{
  "metadata": {
    "timestamp": 1736711809016,
    "page": 93,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "picocms/Pico",
      "stars": 3867,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".build",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3984375,
          "content": "/.build             export-ignore\n/.github            export-ignore\n/assets/.gitignore  export-ignore\n/config/.gitignore  export-ignore\n/content/.gitignore export-ignore\n/plugins/.gitignore export-ignore\n/themes/.gitignore  export-ignore\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/.phpcs.xml         export-ignore\n/.phpdoc.xml        export-ignore\n/.travis.yml        export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2626953125,
          "content": "# Linux\n*~\n*.swp\n\n# Windows\nThumbs.db\ndesktop.ini\n\n# Mac OS X\n.DS_Store\n._*\n\n# Composer\n/composer.lock\n/vendor\n\n# Build system\n/.build/build\n/.build/deploy\n/.build/ci-tools\n/pico-release-*.tar.gz\n/pico-release-*.zip\n\n# phpDocumentor\n/.build/phpdoc\n/.build/phpdoc.cache\n"
        },
        {
          "name": ".htaccess",
          "type": "blob",
          "size": 0.7236328125,
          "content": "<IfModule mod_rewrite.c>\n    RewriteEngine On\n    # May be required to access sub directories\n    #RewriteBase /\n\n    # Deny access to internal dirs and files by passing the URL to Pico\n    RewriteRule ^(config|content|content-sample|lib|vendor)(/|$) index.php [L]\n    RewriteRule ^(CHANGELOG\\.md|composer\\.(json|lock|phar))(/|$) index.php [L]\n    RewriteRule (^\\.|/\\.)(?!well-known(/|$)) index.php [L]\n\n    # Enable URL rewriting\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteRule ^ index.php [L]\n\n    <IfModule mod_env.c>\n        # Let Pico know about available URL rewriting\n        SetEnv PICO_URL_REWRITING 1\n    </IfModule>\n</IfModule>\n\n# Prevent file browsing\nOptions -Indexes -MultiViews\n"
        },
        {
          "name": ".phpcs.xml",
          "type": "blob",
          "size": 1.724609375,
          "content": "<?xml version=\"1.0\"?>\n<ruleset name=\"Pico\">\n    <description>\n        Pico's coding standards mainly base on the PHP-FIG PSR-2 standard,\n        but without the MissingNamespace sniff.\n    </description>\n\n    <!--\n        Run on current working directory by default\n    -->\n    <file>.</file>\n\n    <!--\n        Exclude .build/, .github/ and vendor/ dirs as well as minified JavaScript files\n    -->\n    <exclude-pattern type=\"relative\">^.build/</exclude-pattern>\n    <exclude-pattern type=\"relative\">^.github/</exclude-pattern>\n    <exclude-pattern type=\"relative\">^vendor/</exclude-pattern>\n    <exclude-pattern>*.min.js</exclude-pattern>\n\n    <!--\n        Check files for PHP syntax errors\n    -->\n    <config name=\"php_path\" value=\"php\"/>\n    <rule ref=\"Generic.PHP.Syntax\"/>\n\n    <!--\n        Never use deprecated functions,\n        as they will be removed in future PHP releases\n    -->\n    <rule ref=\"Generic.PHP.DeprecatedFunctions\"/>\n\n    <!--\n        Warn about structures which affect performance negatively\n    -->\n    <rule ref=\"Generic.CodeAnalysis.ForLoopWithTestFunctionCall\"/>\n\n    <!--\n        Pico follows PHP-FIG PSR-2 Coding Style,\n        but doesn't use formal namespaces for historic reasons\n    -->\n    <rule ref=\"PSR2\">\n        <exclude name=\"PSR1.Classes.ClassDeclaration.MissingNamespace\"/>\n    </rule>\n\n    <!--\n        The PHP-FIG PSR-2 Coding Style doesn't fully apply to JavaScript files\n        Furthermore, some sniffs aren't able to handle JavaScript peculiarities\n    -->\n    <rule ref=\"Generic.ControlStructures.InlineControlStructure\">\n        <exclude-pattern>*.js</exclude-pattern>\n    </rule>\n    <rule ref=\"Squiz.Functions.MultiLineFunctionDeclaration\">\n        <exclude-pattern>*.js</exclude-pattern>\n    </rule>\n</ruleset>\n"
        },
        {
          "name": ".phpdoc.xml",
          "type": "blob",
          "size": 0.8916015625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<phpdocumentor>\n    <title><![CDATA[Pico API Documentation]]></title>\n    <parser>\n        <target>.build/phpdoc.cache</target>\n    </parser>\n    <transformer>\n        <target>.build/phpdoc</target>\n    </transformer>\n    <transformations>\n        <template name=\"clean\"/>\n    </transformations>\n    <files>\n        <directory>.</directory>\n        <file>index.php</file>\n        <file>index.php.dist</file>\n\n        <!-- exclude .build and .github directories -->\n        <ignore>.build/*</ignore>\n        <ignore>.github/*</ignore>\n\n        <!-- exclude user config -->\n        <ignore>config/*</ignore>\n        <file>config/config.yml.template</file>\n\n        <!-- exclude all plugins -->\n        <ignore>plugins/*</ignore>\n        <file>plugins/DummyPlugin.php</file>\n\n        <!-- exclude vendor dir -->\n        <ignore>vendor/*</ignore>\n    </files>\n</phpdocumentor>\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.8896484375,
          "content": "dist: bionic\nsudo: false\n\nlanguage: php\n\ncache:\n  directories:\n    - $HOME/.composer/cache/files\n\njobs:\n  include:\n    # Test stage\n    - php: 5.3\n      dist: precise\n    - php: 5.4\n      dist: trusty\n    - php: 5.5\n      dist: trusty\n    - php: 5.6\n      dist: xenial\n    - php: 7.0\n      dist: xenial\n    - php: 7.1\n    - php: 7.2\n    - php: 7.3\n    - php: 7.4\n    - php: nightly\n    - php: hhvm-3.24 # until Dec 2018\n    - php: hhvm-3.27 # until Sep 2019\n    - php: hhvm-3.30 # until Nov 2019\n\n    # Branch deployment stage\n    - stage: deploy-branch\n      if: type == \"push\" && tag IS blank\n      php: 5.3\n      dist: precise\n      install:\n        - '[[ \",$DEPLOY_PHPDOC_BRANCHES,\" == *,\"$TRAVIS_BRANCH\",* ]] || travis_terminate 0'\n        - install.sh --deploy\n      script:\n        - deploy-branch.sh\n\n    # Release deployment stage\n    - stage: deploy-release\n      if: tag IS present\n      php: 5.3\n      dist: precise\n      install:\n        - install.sh --deploy\n      script:\n        - '[ \"$PROJECT_REPO_TAG\" == \"v$(php -r \"require_once(\\\"lib/Pico.php\\\"); echo Pico::VERSION;\")\" ]'\n        - deploy-release.sh\n      before_deploy:\n        - release.sh \"$PROJECT_REPO_TAG\"\n      deploy:\n        provider: releases\n        api_key: ${GITHUB_OAUTH_TOKEN}\n        file:\n          - pico-release-$PROJECT_REPO_TAG.tar.gz\n          - pico-release-$PROJECT_REPO_TAG.zip\n        skip_cleanup: true\n        name: Version ${PROJECT_REPO_TAG:1}\n        draft: true\n        on:\n          tags: true\n\n  # Ignore nightly build failures\n  allow_failures:\n    - php: nightly\n  fast_finish: true\n\nbefore_install:\n  - export PICO_TOOLS_DIR=\"$HOME/__picocms_tools\"\n  - git clone --branch=\"$TOOLS_REPO_BRANCH\" \"https://github.com/$TOOLS_REPO_SLUG.git\" \"$PICO_TOOLS_DIR\"\n  - . \"$PICO_TOOLS_DIR/init/travis.sh.inc\"\n  - . \"$PICO_PROJECT_DIR/.build/init.sh.inc\"\n\ninstall:\n  - install.sh\n\nscript:\n  - phpcs --standard=.phpcs.xml \"$PICO_PROJECT_DIR\"\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 28.359375,
          "content": "Pico Changelog\n==============\n\n**Note:** This changelog only provides technical information about the changes\n          introduced with a particular Pico version, and is meant to supplement\n          the actual code changes. The information in this changelog are often\n          insufficient to understand the implications of larger changes. Please\n          refer to both the UPGRADE and NEWS sections of the docs for more\n          details.\n\n**Note:** Changes breaking backwards compatibility (BC) are marked with an `!`\n          (exclamation mark). This doesn't include changes for which BC is\n          preserved by Pico's official `PicoDeprecated` plugin. If a previously\n          deprecated feature is later removed in `PicoDeprecated`, this change\n          is going to be marked as BC-breaking change in both Pico's and\n          `PicoDeprecated`'s changelog. Please note that BC-breaking changes\n          are only possible with a new major version.\n\n### Version 2.1.4\nReleased: 2020-08-29\n\n```\n* [Changed] Silence PHP errors in Parsedown\n* [Fixed] #560: Improve charset guessing for formatted date strings using\n          `strftime()` (Pico always uses UTF-8, but `strftime()` might not)\n```\n\n### Version 2.1.3\nReleased: 2020-07-10\n\n```\n* [New] Add `locale` option to `config/config.yml`\n* [Changed] Improve Pico docs\n```\n\n### Version 2.1.2\nReleased: 2020-04-10\n\n```\n* [Fixed] Fix DummyPlugin declaring API version 3\n```\n\n### Version 2.1.1\nReleased: 2019-12-31\n\n```\n* [Fixed] Require Parsedown 1.8.0-beta-7 and Parsedown Extra 0.8.0-beta-1 due\n          to changes in Parsedown and Parsedown Extra breaking BC beyond repair\n* [Changed] #523: Check for hidden pages based on page ID instead of full paths\n* [Changed] Improve Pico docs\n```\n\n### Version 2.1.0\nReleased: 2019-11-24\n\n```\n* [Changed] Add Pico's official logo and tagline to `content-sample/_meta.md`\n* [Changed] Improve `content-sample/theme.md` to show Pico's official logo and\n            the usage of the new image utility classes of Pico's default theme\n* [Changed] Improve Pico docs and PHPDoc class docs\n```\n\n### Version 2.1.0-beta.1\nReleased: 2019-11-03\n\n```\n* [New] Introduce API version 3\n* [New] Add `assets_dir`, `assets_url` and `plugins_url` config params\n* [New] Add `%config.*%` Markdown placeholders for scalar config params and the\n        `%assets_url%`, `%themes_url%` and `%plugins_url%` placeholders\n* [New] Add `content-sample/theme.md` for theme testing purposes\n* [New] Introduce API versioning for themes and support theme-specific configs\n        using the new `pico-theme.yml` in a theme's directory; `pico-theme.yml`\n        allows a theme to influence Pico's Twig config, to register known meta\n        headers and to provide defaults for theme config params\n* [New] Add `assets_url`, `themes_url` and `plugins_url` Twig variables\n* [New] Add `pages` Twig function to deal with Pico's page tree; this function\n        replaces the raw usage of Pico's `pages` array in themes\n* [New] Add `url` Twig filter to replace URL placeholders (e.g. `%base_url%`)\n        in strings using the new `Pico::substituteUrl()` method\n* [New] Add `onThemeLoading` and `onThemeLoaded` events\n* [New] Add `debug` config param and the `Pico::isDebugModeEnabled()` method,\n        checking the `PICO_DEBUG` environment variable, to enable debugging\n* [New] Add new `Pico::getNormalizedPath()` method to normalize a path; this\n        method should be used to prevent content dir breakouts when dealing\n        with paths provided by user input\n* [New] Add new `Pico::getUrlFromPath()` method to guess a URL from a file path\n* [New] Add new `Pico::getAbsoluteUrl()` method to make a relative URL absolute\n* [New] #505: Create pre-built `.zip` release archives\n* [Fixed] #461: Proberly handle content files with a UTF-8 BOM\n* [Changed] Rename `theme_url` config param to `themes_url`; the `theme_url`\n            Twig variable and Markdown placeholder are kept unchanged\n* [Changed] Update to Parsedown Extra 0.8 and Parsedown 1.8 (both still beta)\n* [Changed] Enable Twig's `autoescape` feature by default; outputting a\n            variable now causes Twig to escape HTML markup; Pico's `content`\n            variable is a notable exception, as it is marked as being HTML safe\n* [Changed] Rename `prev_page` Twig variable to `previous_page`\n* [Changed] Mark `markdown` and `content` Twig filters as well as the `content`\n            variable as being HTML safe\n* [Changed] Add `$singleLine` param to `markdown` Twig filter as well as the\n            `Pico::parseFileContent()` method to parse just a single line of\n            Markdown input\n* [Changed] Add `AbstractPicoPlugin::configEnabled()` method to check whether\n            a plugin should be enabled or disabled based on Pico's config\n* [Changed] Deprecate the use of `AbstractPicoPlugin::__call()`, use\n            `PicoPluginInterface::getPico()` instead\n* [Changed] Update to Twig 1.36 as last version supporting PHP 5.3, use a\n            Composer-based installation to use a newer Twig version\n* [Changed] Add `$basePath` and `$endSlash` params to `Pico::getAbsolutePath()`\n* [Changed] Deprecate `Pico::getBaseThemeUrl()`\n* [Changed] Replace various `file_exists` calls with proper `is_file` calls\n* [Changed] Refactor release & build system\n* [Changed] Improve Pico docs and PHPDoc class docs\n* [Changed] Various small improvements\n* [Removed] Remove superfluous `base_dir` and `theme_dir` Twig variables\n* [Removed] Remove `PicoPluginInterface::__construct()`\n```\n\n### Version 2.0.5-beta.1\nReleased: 2019-01-03\n\n```\n* [New] Add PHP 7.3 tests\n* [New] Add `2.0.x-dev` alias for master branch to `composer.json`\n* [Changed] Update to Parsedown Extra 0.8 and Parsedown 1.8 (both still beta)\n* [Changed] Improve release & build process\n```\n\n### Version 2.0.4\nReleased: 2018-12-17\n\n```\n* [Fixed] Proberly handle hostnames with ports in `Pico::getBaseUrl()`\n* [Changed] Improve documentation\n```\n\n### Version 2.0.3\nReleased: 2018-12-03\n\n```\n* [Fixed] Support alternative server ports in `Pico::getBaseUrl()`\n* [Changed] Don't require server environment variables to be configured\n* [Changed] Improve release & build process\n* [Changed] Improve documentation\n* [Changed] Improve PHP class docs\n* [Changed] Various small improvements\n```\n\n### Version 2.0.2\nReleased: 2018-08-12\n\n```\n* [Fixed] Support Windows paths (`\\` instead of `/`) in `Pico::evaluateRequestUrl()`\n```\n\n### Version 2.0.1\nReleased: 2018-07-29\n\n```\n* [Changed] Improve documentation\n* [Changed] Add missing \"Formatted Date\", \"Time\" and \"Hidden\" meta headers; use\n            the \"Hidden\" meta header to manually hide a page in the pages list\n```\n\n### Version 2.0.0\nReleased: 2018-07-01\n\n```\n* [New] Add Bountysource\n* [Changed] Improve documentation\n* [Changed] Improve release & build process\n* [Changed] Add `Pico::setConfig()` example to `index.php.dist`\n* [Fixed] Don't load `config/config.yml` multiple times\n```\n\n### Version 2.0.0-beta.3\nReleased: 2018-04-07\n\n```\n* [Changed] Add `README.md`, `CONTRIBUTING.md` and `CHANGELOG.md` of main repo\n            to pre-bundled releases, keep `.gitignore`\n* [Changed] Deny access to a possibly existing `composer.phar` in `.htaccess`\n* [Changed] Disallow the use of the `callback` filter for the `url_param` and\n            `form_param` Twig functions\n* [Changed] Improve documentation\n* [Fixed] Fix page tree when sorting pages by arbitrary values\n* [Fixed] Fix sorting of `Pico::$nativePlugins`\n```\n\n### Version 2.0.0-beta.2\nReleased: 2018-01-21\n\n```\n* [New] Improve release & build process and move most build tools to the new\n        `picocms/ci-tools` repo, allowing them to be used by other projects\n* [New] Add page tree; refer to the `Pico::buildPageTree()` method for more\n        details; also see the `onPageTreeBuilt` event\n* [Changed] Update dependencies: Twig 1.35\n* [Changed] ! Improve `.htaccess` and deny access to all dot files by default\n* [Changed] ! Throw a `RuntimeException` when non-native plugins are loaded,\n            but Pico's `PicoDeprecated` plugin is not loaded\n* [Changed] ! Change `AbstractPicoPlugin::$enabled`'s behavior: setting it to\n            TRUE now leads to throwing a `RuntimeException` when the plugin's\n            dependencies aren't fulfilled; use NULL to maintain old behavior\n* [Changed] ! Force themes to use `.twig` as file extension for Twig templates\n* [Changed] Improve PHP class docs\n* [Changed] Various small improvements\n```\n\n### Version 2.0.0-beta.1\nReleased: 2017-11-05\n\n```\n* [New] Pico is on its way to its second major release!\n* [New] Improve Pico's release & build process\n* [New] Add \"Developer Certificate of Origin\" to `CONTRIBUTING.md`\n* [New] Add license & copyright header to all relevant files\n* [New] Add Pico version constants (`Pico::VERSION` and `Pico::VERSION_ID`),\n        and add a `version` Twig variable and `%version%` Markdown placeholder\n* [New] Add Pico API versioning for plugins (see `Pico::API_VERSION` constant);\n        Pico now triggers events on plugins using the latest API version only\n        (\"native\" plugins), `PicoDeprecated` takes care of all other plugins;\n        as a result, old plugin's always depend on `PicoDeprecated` now\n* [New] Add a theme and plugin installer for composer; Pico now additionally\n        uses the new `vendor/pico-plugin.php` file to discover plugins\n        installed by composer and loads them using composer's autoloader;\n        see the `picocms/composer-installer` repo for more details; Pico\n        loads plugins installed by composer first and ignores conflicting\n        plugins in Pico's `plugins/` dir\n* [New] Add `$enableLocalPlugins` parameter to `Pico::__construct()` to allow\n        website developers to disable local plugin discovery by scanning the\n        `plugins/` dir (i.e. load plugins from `vendor/pico-plugin.php` only)\n* [New] Add public `AbstractPicoPlugin::getPluginConfig()` method\n* [New] Add public `Pico::loadPlugin()` method and the corresponding\n        `onPluginManuallyLoaded` event\n* [New] Add public `Pico::resolveFilePath()` method (replaces the protected\n        `Pico::discoverRequestFile()` method)\n* [New] Add public `Pico::is404Content()` method\n* [New] Add public `Pico::getYamlParser()` method and the corresponding\n        `onYamlParserRegistered` event\n* [New] Add public `Pico::substituteFileContent()` method\n* [New] Add public `Pico::getPageId()` method\n* [New] Add public `Pico::getFilesGlob()` method\n* [New] Add public `Pico::getVendorDir()` method, returning Pico's installation\n        directory (i.e. `/var/www/pico/vendor/picocms/pico`); don't confuse\n        this with composer's `vendor/` dir!\n* [New] Add `$default` parameter to `Pico::getConfig()` method\n* [New] Add empty `assets/` and `content/` dirs\n* [New] #305: Add `url_param` and `form_param` Twig functions, and the public\n        `Pico::getUrlParameter()` and `Pico::getFormParameter()` methods,\n        allowing theme developers to access URL GET and HTTP POST parameters\n* [New] Add `$meta` parameter to `markdown` Twig filter\n* [New] Add `remove` fallback to `sort_by` Twig filter\n* [New] Add `theme_url` config parameter\n* [New] Add public `Pico::getBaseThemeUrl()` method\n* [New] Add `REQUEST_URI` routing method, allowing one to simply rewrite all\n        requests to `index.php` (e.g. use `FallbackResource` or `mod_rewrite`\n        in your `.htaccess` for Apache, or use `try_files` for nginx)\n* [New] #299: Add built-in 404 page as fallback when no `404.md` is found\n* [New] Allow sorting pages by arbitrary meta values\n* [New] Add `onSinglePageLoading` event, allowing one to skip a page\n* [New] Add `onSinglePageContent` event\n* [New] Add some config parameters to change Parsedown's behavior\n* [Changed] ! Disallow running the same Pico instance multiple times by\n            throwing a `RuntimeException` when calling `Pico::run()`\n* [Changed] ! #203: Load plugins from `plugins/<plugin name>/<plugin name>.php`\n            and `plugins/<plugin name>.php` only (directory and file name must\n            match case-sensitive), and throw a `RuntimeException` when Pico is\n            unable to load a plugin; also throw a `RuntimeException` when\n            superfluous files or directories in `plugins/` are found; use a\n            scope-isolated `require()` to include plugin files\n* [Changed] ! Use a plugin dependency topology to sort `Pico::$plugins`,\n            changing the execution order of plugins so that plugins, on which\n            other plugins depend, are always executed before their dependants\n* [Changed] ! Don't pass `$plugins` parameter to `onPluginsLoaded` event by\n            reference anymore; use `Pico::loadPlugin()` instead\n* [Changed] ! Leave `Pico::$pages` unsorted when a unknown sort method was\n            configured; this usually means that a plugin wants to sort it\n* [Changed] Overhaul page discovery events: add `onPagesDiscovered` event which\n            is triggered right before `Pico::$pages` is sorted and move the\n            `$currentPage`, `$previousPage` and `$nextPage` parameters of the\n            `onPagesLoaded` event to the new `onCurrentPageDiscovered` event\n* [Changed] Move the `$twig` parameter of the `onPageRendering` event to the\n            `onTwigRegistered` event, replacing the `onTwigRegistration` event\n* [Changed] Unify the `onParsedownRegistration` event by renaming it to\n            `onParsedownRegistered` and add the `$parsedown` parameter\n* [Changed] #330: Replace `config/config.php` by a modular YAML-based approach;\n            you can now use a arbitrary number of `config/*.yml` files to\n            configure Pico\n* [Changed] ! When trying to auto-detect Pico's `content` dir, Pico no longer\n            searches just for a (possibly empty) directory, but rather checks\n            whether a `index.md` exists in this directory\n* [Changed] ! Use the relative path between `index.php` and `Pico::$themesDir`\n            for Pico's theme URL (also refer to the new `theme_url` config and\n            the public `Pico::getBaseThemeUrl()` method for more details)\n* [Changed] #347: Drop the superfluous trailing \"/index\" from Pico's URLs\n* [Changed] Flip registered meta headers array, so that the array key is used\n            to search for a meta value and the array value is used to store the\n            found meta value (previously it was the other way round)\n* [Changed] ! Add lazy loading for `Pico::$yamlParser`, `Pico::$parsedown` and\n            `Pico::$twig`; the corresponding events are no longer part of\n            Pico's event flow and are triggered on demand\n* [Changed] ! Trigger the `onMetaHeaders` event just once; the event is no\n            longer part of Pico's event flow and is triggered on demand\n* [Changed] Don't lower meta headers on the first level of a page's meta data\n            (i.e. `SomeKey: value` is accessible using `$meta['SomeKey']`)\n* [Changed] Don't compare registered meta headers case-insensitive, require\n            matching case\n* [Changed] Allow users to explicitly set values for the `date_formatted` and\n            `time` meta headers in a page's YAML front matter\n* [Changed] Add page siblings for all pages\n* [Changed] ! Treat pages or directories that are prefixed by `_` as hidden;\n            when requesting a hidden page, Pico responds with a 404 page;\n            hidden pages are still in `Pico::$pages`, but are moved to the end\n            of the pages array when sorted alphabetically or by date\n* [Changed] ! Don't treat explicit requests to a 404 page as successful request\n* [Changed] Change method visibility of `Pico::getFiles()` to public\n* [Changed] Change method visibility of `Pico::triggerEvent()` to public;\n            at first glance this method triggers events on native plugins only,\n            however, `PicoDeprecated` takes care of triggering events for other\n            plugins, thus you can use this method to trigger (custom) events on\n            all plugins; never use it to trigger Pico core events!\n* [Changed] Move Pico's default theme to the new `picocms/pico-theme` repo; the\n            theme was completely rewritten from scratch and is a much better\n            starting point for creating your own theme; refer to the theme's\n            `CHANGELOG.md` for more details\n* [Changed] Move `PicoDeprecated` plugin to the new `picocms/pico-deprecated`\n            repo; refer to the plugin's `CHANGELOG.md` for more details\n* [Changed] Update dependencies: Twig 1.34, Symfony YAML 2.8, Parsedown 1.6\n* [Changed] Improve Pico docs and PHP class docs\n* [Changed] A vast number of small improvements and changes...\n* [Removed] ! Remove `PicoParsePagesContent` plugin\n* [Removed] ! Remove `PicoExcerpt` plugin\n* [Removed] Remove `rewrite_url` and `is_front_page` Twig variables\n* [Removed] Remove superfluous parameters of various events to reduce Pico's\n            error-proneness (plugins hopefully interfere with each other less)\n```\n\n### Version 1.0.6\nReleased: 2017-07-25\n\n```\n* [Changed] Improve documentation\n* [Changed] Improve handling of Pico's Twig config (`$config['twig_config']`)\n* [Changed] Improve PHP platform requirement checks\n```\n\n### Version 1.0.5\nReleased: 2017-05-02\n\n```\n* [Changed] Improve documentation\n* [Fixed] Improve hostname detection with proxies\n* [Fixed] Fix detection of Windows-based server environments\n* [Removed] Remove Twitter links\n```\n\n### Version 1.0.4\nReleased: 2016-10-04\n\n```\n* [New] Add Pico's social icons to default theme\n* [Changed] Improve documentation\n* [Changed] Add CSS flexbox rules to default theme\n* [Fixed] Fix handling of non-YAML 1-line front matters\n* [Fixed] Fix responsiveness in default theme\n```\n\n### Version 1.0.3\nReleased: 2016-05-11\n\n```\n* [Changed] Improve documentation\n* [Changed] Heavily extend nginx configuration docs\n* [Changed] Add CSS rules for definition lists to default theme\n* [Changed] Always use `on404Content...` execution path when serving a `404.md`\n* [Changed] Deny access to `.git` directory, `CHANGELOG.md`, `composer.json`\n            and `composer.lock` (`.htaccess` file)\n* [Changed] Use Pico's `404.md` to deny access to `.git`, `config`, `content`,\n*           `content-sample`, `lib` and `vendor` dirs (`.htaccess` file)\n* [Fixed] #342: Fix responsiveness in default theme\n* [Fixed] #344: Improve HTTPS detection with proxies\n* [Fixed] #346: Force HTTPS to load Google Fonts in default theme\n```\n\n### Version 1.0.2\nReleased: 2016-03-16\n\n```\n* [Changed] Various small improvements and changes...\n* [Fixed] Check dependencies when a plugin is enabled by default\n* [Fixed] Allow `Pico::$requestFile` to point to somewhere outside `content_dir`\n* [Fixed] #336: Fix `Date` meta header parsing with ISO-8601 datetime strings\n```\n\n### Version 1.0.1\nReleased: 2016-02-27\n\n```\n* [Changed] Improve documentation\n* [Changed] Replace `version_compare()` with `PHP_VERSION_ID` in\n            `index.php.dist` (available since PHP 5.2.7)\n* [Fixed] Suppress PHP warning when using `date_default_timezone_get()`\n* [Fixed] #329: Force Apache's `MultiViews` feature to be disabled\n```\n\n### Version 1.0.0\nReleased: 2015-12-24\n\n```\n* [New] On Christmas Eve, we are happy to announce Pico's first stable release!\n        The Pico Community wants to thank all contributors and users who made\n        this possible. Merry Christmas and a Happy New Year 2016!\n* [New] Adding `$queryData` parameter to `Pico::getPageUrl()` method\n* [Changed] Improve documentation\n* [Changed] Moving `LICENSE` to `LICENSE.md`\n* [Changed] Throw `LogicException` instead of `RuntimeException` when calling\n            `Pico::setConfig()` after processing has started\n* [Changed] Default theme now highlights the current page and shows pages with\n            a title in the navigation only\n* [Changed] #292: Ignore YAML parse errors (meta data) in `Pico::readPages()`\n* [Changed] Various small improvements and changes...\n* [Fixed] Support empty meta header\n* [Fixed] #307: Fix path handling on Windows\n```\n\n### Version 1.0.0-beta.2\nReleased: 2015-11-30\n\n```\n* [New] Introducing the `PicoTwigExtension` Twig extension\n* [New] New `markdown` filter for Twig to parse markdown strings; Note: If you\n        want to parse the contents of a page, use the `content` filter instead\n* [New] New `sort_by` filter to sort an array by a specified key or key path\n* [New] New `map` filter to get the values of the given key or key path\n* [New] Introducing `index.php.dist` (used for pre-bundled releases)\n* [New] Use PHP_CodeSniffer to auto-check source code (see `.phpcs.xml`)\n* [New] Use Travis CI to generate phpDocs class docs automatically\n* [Changed] Improve documentation\n* [Changed] Improve table styling in default theme\n* [Changed] Update composer version constraints; almost all dependencies will\n            have pending updates, run `composer update`\n* [Changed] Throw a RuntimeException when the `content` dir isn't accessible\n* [Changed] Reuse `ParsedownExtra` object; new `onParsedownRegistration` event\n* [Changed] `$config['rewrite_url']` is now always available\n* [Changed] `DummyPlugin` class is now final\n* [Changed] Remove `.git` dirs from `vendor/` when deploying\n* [Changed] Various small improvements and changes...\n* [Fixed] `PicoDeprecated`: Sanitize `content_dir` and `base_url` options when\n          reading `config.php` in Picos root dir\n* [Fixed] Replace `urldecode()` (deprecated RFC 1738) with `rawurldecode()`\n          (RFC 3986) in `Page::evaluateRequestUrl()`\n* [Fixed] #272: Encode URLs using `rawurlencode()` in `Pico::getPageUrl()`\n* [Fixed] #274: Prevent double slashes in `base_url`\n* [Fixed] #285: Make `index.php` work when installed as a composer dependency\n* [Fixed] #291: Force `Pico::$requestUrl` to have no leading/trailing slash\n```\n\n### Version 1.0.0-beta.1\nReleased: 2015-11-06\n\n```\n* [Security] (9e2604a) Prevent content_dir breakouts using malicious URLs\n* [New] Pico is on its way to its first stable release!\n* [New] Provide pre-bundled releases\n* [New] Heavily expanded documentation (inline code docs, user docs, dev docs)\n* [New] New routing system using the QUERY_STRING method; Pico now works\n        out-of-the-box with any webserver and without URL rewriting; use\n        `%base_url%?sub/page` in markdown files and `{{ \"sub/page\"|link }}`\n        in Twig templates to declare internal links\n* [New] Brand new plugin system with dependencies (see `PicoPluginInterface`\n        and `AbstractPicoPlugin`); if you're plugin dev, you really should\n        take a look at the UPGRADE section of the docs!\n* [New] Introducing the `PicoDeprecated` plugin to maintain full backward\n        compatibility with Pico 0.9 and Pico 0.8\n* [New] Support YAML-style meta header comments (`---`)\n* [New] Various new placeholders to use in content files (e.g. `%site_title%`)\n* [New] Provide access to all meta headers in content files (`%meta.*%`)\n* [New] Provide access to meta headers in `$page` arrays (`$page['meta']`)\n* [New] The file extension of content files is now configurable\n* [New] Add `Pico::setConfig()` method to predefine config variables\n* [New] Supporting per-directory `404.md` files\n* [New] #103: Providing access to `sub.md` even when the `sub` directory\n        exists, provided that there is no `sub/index.md`\n* [New] #249: Support the `.twig` file extension for templates\n* [New] #268, 269: Now using Travis CI; performing basic code tests and\n        implementing an automatic release process\n* [Changed] Complete code refactoring\n* [Changed] Source code now follows PSR code styling\n* [Changed] Replacing constants (e.g. `ROOT_DIR`) with constructor parameters\n* [Changed] Paths (e.g. `content_dir`) are now relative to Pico's root dir\n* [Changed] Adding `Pico::run()` method that performs Pico's processing and\n            returns the rendered contents\n* [Changed] Renaming all plugin events; adding some new events\n* [Changed] `Pico_Plugin` is now the fully documented `DummyPlugin`\n* [Changed] Meta data must start on the first line of the file now\n* [Changed] Dropping the need to register meta headers for the convenience of\n            users and pure (!) theme devs; plugin devs are still REQUIRED to\n            register their meta headers during `onMetaHeaders`\n* [Changed] Exclude inaccessible files from pages list\n* [Changed] With alphabetical order, index files (e.g. `sub/index.md`) are\n            now always placed before their sub pages (e.g. `sub/foo.md`)\n* [Changed] Pico requires PHP >= 5.3.6 (due to `erusev/parsedown-extra`)\n* [Changed] Pico now implicitly uses a existing `content` directory without\n            the need to configure this in the `config/config.php` explicitly\n* [Changed] Composer: Require a v0.7 release of `erusev/parsedown-extra`\n* [Changed] Moving `license.txt` to `LICENSE`\n* [Changed] Moving and reformatting `changelog.txt` to `CHANGELOG.md`\n* [Changed] #116: Parse meta headers using the Symfony YAML component\n* [Changed] #244: Replace opendir() with scandir()\n* [Changed] #246: Move `config.php` to `config/` directory\n* [Changed] #253: Assume HTTPS if page is requested through port 443\n* [Changed] A vast number of small improvements and changes...\n* [Fixed] Sorting by date now uses timestamps and works as expected\n* [Fixed] Fixing `$currentPage`, `$nextPage` and `$previousPage`\n* [Fixed] #99: Support content filenames with spaces\n* [Fixed] #140, #241: Use file paths as page identifiers rather than titles\n* [Fixed] #248: Always set a timezone; adding `$config['timezone']` option\n* [Fixed] A vast number of small bugs...\n* [Removed] Removing the default Twig cache dir\n* [Removed] Removing various empty `index.html` files\n* [Removed] Removing `$pageData['excerpt']`; recoverable with `PicoExcerpt`\n* [Removed] #93, #158: Pico doesn't parse all content files anymore; moved to\n            `PicoParsePagesContent`; i.e. `$pageData['content']` doesn't exist\n            anymore, use `$pageData['raw_content']` when possible; otherwise\n            use Twigs new `content` filter (e.g. `{{ \"sub/page\"|content }}`)\n```\n\n### Version 0.9\nReleased: 2015-04-28\n\n```\n* [New] Default theme is now mobile-friendly\n* [New] Description meta now available in content areas\n* [New] Add description to composer.json\n* [Changed] content folder is now content-sample\n* [Changed] config.php moved to config.php.template\n* [Changed] Updated documentation & wiki\n* [Changed] Removed Composer, Twig files in /vendor, you must run composer\n            install now\n* [Changed] Localized date format; strftime() instead of date()\n* [Changed] Added ignore for tmp file extensions in the get_files() method\n* [Changed] michelf/php-markdown is replaced with erusev/parsedown-extra\n* [Changed] $config is no global variable anymore\n* [Fixed] Pico now only removes the 1st comment block in .md files\n* [Fixed] Issue wherein the alphabetical sorting of pages did not happen\n```\n\n### Version 0.8\nReleased: 2013-10-23\n\n```\n* [New] Added ability to set template in content meta\n* [New] Added before_parse_content and after_parse_content hooks\n* [Changed] content_parsed hook is now deprecated\n* [Changed] Moved loading the config to nearer the beginning of the class\n* [Changed] Only append ellipsis in limit_words() when word count exceeds max\n* [Changed] Made private methods protected for better inheritance\n* [Fixed] Fixed get_protocol() method to work in more situations\n```\n\n### Version 0.7\nReleased: 2013-09-04\n\n```\n* [New] Added before_read_file_meta and get_page_data plugin hooks to customize\n        page meta data\n* [Changed] Make get_files() ignore dotfiles\n* [Changed] Make get_pages() ignore Emacs and temp files\n* [Changed] Use composer version of Markdown\n* [Changed] Other small tweaks\n* [Fixed] Date warnings and other small bugs\n```\n\n### Version 0.6.2\nReleased: 2013-05-07\n\n```\n* [Changed] Replaced glob_recursive with get_files\n```\n\n### Version 0.6.1\nReleased: 2013-05-07\n\n```\n* [New] Added \"content\" and \"excerpt\" fields to pages\n* [New] Added excerpt_length config setting\n```\n\n### Version 0.6\nReleased: 2013-05-06\n\n```\n* [New] Added plugin functionality\n* [Changed] Other small cleanup\n```\n\n### Version 0.5\nReleased: 2013-05-03\n\n```\n* [New] Added ability to order pages by \"alpha\" or \"date\" (asc or desc)\n* [New] Added prev_page, current_page, next_page and is_front_page template vars\n* [New] Added \"Author\" and \"Date\" title meta fields\n* [Changed] Added \"twig_config\" to settings\n* [Changed] Updated documentation\n* [Fixed] Query string 404 bug\n```\n\n### Version 0.4.1\nReleased: 2013-05-01\n\n```\n* [New] Added CONTENT_EXT global\n* [Changed] Use .md files instead of .txt\n```\n\n### Version 0.4\nReleased: 2013-05-01\n\n```\n* [New] Add get_pages() function for listing content\n* [New] Added changelog.txt\n* [Changed] Updated default theme\n* [Changed] Updated documentation\n```\n\n### Version 0.3\nReleased: 2013-04-27\n\n```\n* [Fixed] get_config() function\n```\n\n### Version 0.2\nReleased: 2013-04-26\n\n```\n* [Changed] Updated Twig\n* [Changed] Better checking for HTTPS\n* [Fixed] Add 404 header to 404 page\n* [Fixed] Case sensitive folder bug\n```\n\n### Version 0.1\nReleased: 2012-04-04\n\n```\n* Initial release\n```\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 17.3515625,
          "content": "Contributing to Pico\n====================\n\nPico aims to be a high quality Content Management System (CMS) but at the same time wants to give contributors freedom when submitting fixes or improvements.\n\nBy contributing to Pico, you accept and agree to the *Developer Certificate of Origin* for your present and future contributions submitted to Pico. Please refer to the *Developer Certificate of Origin* section below.\n\nAside from this, we want to *encourage*, but not obligate you, the contributor, to follow the following guidelines. The only exception to this are the guidelines elucidated in the *Prevent `merge-hell`* section. Having said that: we really appreciate it when you apply the guidelines in part or wholly as that will save us time which, in turn, we can spend on bugfixes and new features.\n\nIssues\n------\n\nIf you want to report an *issue* with Pico's core, please create a new [Issue](https://github.com/picocms/Pico/issues) on GitHub. Concerning problems with plugins or themes, please refer to the website of the developer of this plugin or theme.\n\nBefore creating a [new Issue on GitHub](https://github.com/picocms/Pico/issues/new), please make sure the problem wasn't reported yet using [GitHubs search engine](https://github.com/picocms/Pico/search?type=Issues).\n\nPlease describe your issue as clear as possible and always include the *Pico version* you're using. Provided that you're using *plugins*, include a list of them too. We need information about the *actual and expected behavior*, the *steps to reproduce* the problem, and what steps you have taken to resolve the problem by yourself (i.e. *your own troubleshooting*).\n\nContributing\n------------\n\nOnce you decide you want to contribute to *Pico's core* (which we really appreciate!) you can fork the project from https://github.com/picocms/Pico. If you're interested in developing a *plugin* or *theme* for Pico, please refer to the [development section](http://picocms.org/development/) of our website.\n\n### Developer Certificate of Origin\n\nBy contributing to Pico, you accept and agree to the following terms and conditions for your present and future contributions submitted to Pico. Except for the license granted herein to Pico and recipients of software distributed by Pico, you reserve all right, title, and interest in and to your contributions. All contributions are subject to the following DCO + license terms.\n\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\nAll contributions to this project are licensed under the following MIT License:\n\n```\nCopyright (c) <YEAR> <COPYRIGHT HOLDER>\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n```\n\nPlease note that developing a *plugin* or *theme* for Pico is *not* assumed to be a contribution to Pico itself. By developing a plugin or theme you rather create a 3rd-party project that just uses Pico. Following the spirit of open source, we want to *encourage* you to release your plugin or theme under the terms of a [OSI-approved open source license](https://opensource.org/licenses). After all, Pico is open source, too!\n\n### Prevent `merge-hell`\n\nPlease do *not* develop your contribution on the `master` branch of your fork, but create a separate feature branch, that is based off the `master` branch, for each feature that you want to contribute.\n\n> Not doing so means that if you decide to work on two separate features and place a pull request for one of them, that the changes of the other issue that you are working on is also submitted. Even if it is not completely finished.\n\nTo get more information about the usage of Git, please refer to the [Pro Git book](https://git-scm.com/book) written by Scott Chacon and/or [this help page of GitHub](https://help.github.com/articles/using-pull-requests).\n\n### Pull Requests\n\nPlease keep in mind that pull requests should be small (i.e. one feature per request), stick to existing coding conventions and documentation should be updated if required. It's encouraged to make commits of logical units and check for unnecessary whitespace before committing (try `git diff --check`). Please reference issue numbers in your commit messages where appropriate.\n\n### Coding Standards\n\nPico uses the [PSR-2 Coding Standard](http://www.php-fig.org/psr/psr-2/) as defined by the [PHP Framework Interoperability Group (PHP-FIG)](http://www.php-fig.org/).\n\nFor historical reasons we don't use formal namespaces. Markdown files in the `content-sample` folder (the inline documentation) must follow a hard limit of 80 characters line length.\n\nIt is recommended to check your code using [PHP_CodeSniffer](https://github.com/squizlabs/PHP_CodeSniffer) using Pico's `.phpcs.xml` standard. Use the following command:\n\n    $ ./vendor/bin/phpcs --standard=.phpcs.xml [file]...\n\nWith this command you can specify a file or folder to limit which files it will check or omit that argument altogether, in which case the current working directory is checked.\n\n### Keep documentation in sync\n\nPico accepts the problems of having redundant documentation on different places (concretely Pico's inline user docs, the `README.md` and the website) for the sake of a better user experience. When updating the docs, please make sure to keep them in sync.\n\nIf you update the [`README.md`](https://github.com/picocms/Pico/blob/master/README.md) or [`content-sample/index.md`](https://github.com/picocms/Pico/blob/master/content-sample/index.md), please make sure to update the corresponding files in the [`_docs`](https://github.com/picocms/picocms.github.io/tree/master/_docs/) folder of the `picocms.github.io` repo (i.e. [Pico's website](http://picocms.org/docs/)) and vice versa. Unfortunately this involves three (!) different markdown parsers. If you're experiencing problems, use Pico's [`erusev/parsedown-extra`](https://github.com/erusev/parsedown-extra) as a reference. You can try to make the contents compatible to [Kramdown](http://kramdown.gettalong.org/) (Pico's website) and [CommonMarker](https://github.com/gjtorikian/commonmarker) (`README.md`) by yourself, otherwise please address the issues in your pull request message and we'll take care of it.\n\nVersioning\n----------\n\nPico follows [Semantic Versioning 2.0](http://semver.org) and uses version numbers like `MAJOR`.`MINOR`.`PATCH`. We will increment the:\n\n- `MAJOR` version when we make incompatible API changes,\n- `MINOR` version when we add functionality in a backwards-compatible manner, and\n- `PATCH` version when we make backwards-compatible bug fixes.\n\nFor more information please refer to the http://semver.org website.\n\nBranching\n---------\n\nThe `master` branch contains the current development version of Pico. It is likely *unstable* and *not ready for production use*.\n\nHowever, the `master` branch always consists of a deployable (but not necessarily deployed) version of Pico. As soon as development of a new `MAJOR` or `MINOR` release starts, a separate branch (e.g. `pico-1.1`) is created and a [pull request](https://github.com/picocms/Pico/pulls) is opened to receive the desired feedback.\n\nPico's actual development happens in separate development branches. Development branches are prefixed by:\n\n- `feature/` for bigger features,\n- `enhancement/` for smaller improvements, and\n- `bugfix/` for non-trivial bug fixes.\n\nAs soon as development reaches a point where feedback is appreciated, a pull request is opened. After some time (very soon for bug fixes, and other improvements should have a reasonable feedback phase) the pull request is merged and the development branch will be deleted. Trivial bug fixes that will be part of the next `PATCH` version will be merged directly into `master`.\n\nBuild & Release process\n-----------------------\n\nWe're using [Travis CI](https://travis-ci.com) to automate the build & release process of Pico. It generates and deploys a [PHP class documentation](http://picocms.org/phpDoc/) (powered by [phpDoc](http://phpdoc.org)) for new releases and on every commit to the `master` branch. Travis also prepares new releases by generating Pico's pre-built release packages, a version badge, code statistics (powered by [cloc](https://github.com/AlDanial/cloc)) and updates our website (the [`picocms.github.io` repo](https://github.com/picocms/picocms.github.io)). Please refer to our [`.travis.yml`](https://github.com/picocms/Pico/blob/master/.travis.yml), the [`picocms/ci-tools` repo](https://github.com/picocms/ci-tools) and the [`.build` directory](https://github.com/picocms/Pico/tree/master/.build) for details.\n\nAs insinuated above, it is important that each commit to `master` is deployable. Once development of a new Pico release is finished, trigger Pico's build & release process by pushing a new Git tag. This tag should reference a (usually empty) commit on `master`, which message should adhere to the following template:\n\n```\nVersion 1.0.0\n\n* [Security] ...\n* [New] ...\n* [Changed] ...\n* [Fixed] ...\n* [Removed] ...\n```\n\nBefore pushing a new Git tag, make sure to update the `Pico::VERSION` and `Pico::VERSION_ID` constants. The versions of Pico's official [default theme](https://github.com/picocms/pico-theme) and the [`PicoDeprecated` plugin](https://github.com/picocms/pico-deprecated) both strictly follow Pico's version. Since Pico's pre-built release package contains them, you must always create a new release of them (even though nothing has changed) before creating a new Pico release.\n\nIf you're pushing a new major or minor release of Pico, you should also update Pico's `composer.json` to require the latest minor releases of Pico's dependencies. Besides, don't forget to update the `@version` tags in the PHP class docs.\n\nTravis CI will draft the new [release on GitHub](https://github.com/picocms/Pico/releases) automatically, but will require you to manually amend the descriptions formatting. The latest Pico version is always available at https://github.com/picocms/Pico/releases/latest, so please make sure to publish this URL rather than version-specific URLs. [Packagist](http://packagist.org/packages/picocms/pico) will be updated automatically.\n\nLabeling of Issues & Pull Requests\n----------------------------------\n\nPico makes use of GitHub's label and milestone features, to aide developers in quickly identifying and prioritizing which issues need to be worked on. The starting point for labeling issues and pull requests is the `type` label, which is explained in greater detail below. The `type` label might get combined with a `pri` label, describing the issue's priority, and a `status` label, describing the current status of the issue.\n\nIssues and pull requests labeled with `info: Feedback Needed` indicate that feedback from others is highly appreciated. We always appreciate feedback at any time and from anyone, but when this label is present, we explicitly *ask* you to give feedback. It would be great if you leave a comment!\n\n- The `type: Bug` label is assigned to issues or pull requests, which have been identified as bugs or security issues in Pico's core. It might get combined with the `pri: High` label, when the problem was identified as security issue, or as a so-called \"show stopper\" bug. In contrast, uncritical problems might get labeled with `pri: Low`. `type: Bug` issues and pull requests are usually labeled with one of the following `status` labels when being closed:\n  - `status: Resolved` is used when the issue has been resolved.\n  - `status: Conflict` indicates a conflict with another issue or behavior of Pico, making it impossible to resolve the problem at the moment.\n  - `status: Won't Fix` means, that there is indeed a problem, but for some reason we made the decision that resolving it isn't reasonable, making it intended behavior.\n  - `status: Rejected` is used when the issue was rejected for another reason.\n\n- The `type: Enhancement` and `type: Feature` labels are used to tag pull requests, which introduce either a comparatively small enhancement, or a \"big\" new feature. As with the `type: Bug` label, they might get combined with the `pri: High` or `pri: Low` labels to indicate the pull request's priority. If a pull request isn't mergeable at the moment, it is labeled with `status: Work In Progress` until development of the pull request is finished. After merging or closing the pull request, it is labeled with one of the `status` labels as described above for the `type: Bug` label.\n\n- The `type: Idea` label is similar to the `type: Enhancement` and `type: Feature` labels, but is used for issues or incomplete and abandoned pull requests. It is otherwise used in the exact same way as `type: Enhancement` and `type: Feature`.\n\n- The `type: Release` label is used in the exact same way as `type: Feature` and indicates the primary pull request of a new Pico release (please refer to the *Branching* and *Build & Release process* sections above).\n\n- The `type: Notice`, `type: Support` and `type: Discussion` labels are used to indicate \"fyi\" issues, support-related issues (e.g. issues opened by users or developers asking questions), and issues with disucssions about arbitrary topics related to Pico. They are neither combined with `pri` labels, nor with `status` labels.\n\n- The `type: Duplicate` label is used when there is already another issue or pull request related to this problem or feature request. Issues labeled with `type: Duplicate` are immediately closed.\n\n- The `type: Invalid` label is used for everything else, e.g. issues or pull requests not related to Pico, or invalid bug reports. This includes supposed bug reports that concern actually intended behavior.\n\nThe `status: Deferred` label might get added to any open issue or pull request to indicate that it is still unresolved and will be resolved later. This is also true for the `info: Pinned` label: It indicates a important issue or pull request that remains open on purpose.\n\nAfter resolving a issue, we usually keep it open for about a week to give users some more time for feedback and further questions. This is especially true for issues with the `type: Notice`, `type: Support`, `type: Discussion` and `type: Invalid` labels. After 7 days with no interaction, [Probot](https://probot.github.io/)'s [Stale](https://github.com/apps/stale) bot adds the `info: Stale` label to the issue to ask the participants whether the issue has been resolved. If no more activity occurs, the issue will be automatically closed by Stale bot 2 days later.\n\nIssues and pull requests labeled with `info: Information Needed` indicate that we have asked one of the participants for further information and didn't receive any feedback yet. It is usually added after Stale bot adds the `info: Stale` label to give the participants some more days to give the necessary information.\n\nIssues and pull requests, which are rather related to upstream projects (i.e. projects Pico depends on, like Twig), are additionally labeled with `info: Upstream`.\n\nWhen a issue or pull request isn't directly related to Pico's core, but the project as a whole, it is labeled with `info: Meta`. Issues labeled with `info: Website` are related to [Pico's website](http://picocms.org), however, in this case it is usually expedient to move the issue to the [`picocms.github.io` repo](https://github.com/picocms/picocms.github.io) instead. The same applies to the `info: Pico CMS for Nextcloud` label; these issues are related to [Pico CMS for Nextcloud](https://apps.nextcloud.com/apps/cms_pico).\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0517578125,
          "content": " Copyright (c) 2012 Dev7studios Ltd\n\n Permission is hereby granted, free of charge, to any person\n obtaining a copy of this software and associated documentation\n files (the \"Software\"), to deal in the Software without\n restriction, including without limitation the rights to use,\n copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the\n Software is furnished to do so, subject to the following\n conditions:\n\n The above copyright notice and this permission notice shall be\n included in all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.4423828125,
          "content": "Pico\n====\n\n[![License](https://picocms.github.io/badges/pico-license.svg)](https://github.com/picocms/Pico/blob/master/LICENSE.md)\n[![Version](https://picocms.github.io/badges/pico-version.svg)](https://github.com/picocms/Pico/releases/latest)\n[![Build Status](https://api.travis-ci.org/picocms/Pico.svg?branch=master)](https://travis-ci.org/picocms/Pico)\n[![Libera.Chat](https://picocms.github.io/badges/pico-chat.svg)](https://web.libera.chat/#picocms)\n[![Open Bounties on Bountysource](https://www.bountysource.com/badge/team?team_id=198139&style=bounties_received)](https://www.bountysource.com/teams/picocms)\n\nPico is a stupidly simple, blazing fast, flat file CMS.\n\nVisit us at http://picocms.org/ and see http://picocms.org/about/ for more info.\n\n---\n\n### PHP 8.0+ Users\n\nSeeing an `Unparenthesized a ? b : c ? d : e is not supported.` error?\n\nPico currently has issues with PHP versions newer than 8.0.  This is due to Pico's dependencies, and not Pico itself.  There's currently an \"alpha\" build of Pico you can download as a [Pre-Bundled Release](https://github.com/picocms/Pico/releases/tag/v3.0.0-alpha.2) that solves this issue.\n\nThis \"alpha\" is **perfectly safe** to use in production, as the *only* changes are **updated dependencies and version number strings**.  If you're curious, you can confirm this by [comparing the changes](https://github.com/picocms/Pico/compare/pico-3.0-alpha) between branches.\n\nMore work was intended to be done on this branch, hence the \"3.0\" label, but it hasn't happened yet.  There's an [on-going discussion](https://github.com/picocms/Pico/issues/608) about getting just these updated dependencies merged in as an official update (either Pico 2.2 or 3.0) as soon as possible.\n\nSorry for the inconvenience, and thanks to all Pico users for your patience on the matter. ❤️\n\n---\n\nScreenshot\n----------\n\n![Pico Screenshot](https://picocms.github.io/screenshots/pico-21.png)\n\nInstall\n-------\n\nInstalling Pico is dead simple - and done in seconds! If you have access to a shell on your server (i.e. SSH access), we recommend using [Composer][]. If not, use a pre-bundled release. If you don't know what \"SSH access\" is, head over to the pre-bundled release. 😇\n\nPico requires PHP 5.3.6+ and the PHP extensions `dom` and `mbstring` to be enabled.\n\n### I want to use Composer\n\nStarting with Pico 2.0 we recommend installing Pico using Composer whenever possible. Trust us, you won't regret it when it comes to upgrading Pico! Anyway, if you don't want to use Composer, or if you simply can't use Composer because you don't have access to a shell on your server, don't despair, installing Pico using a pre-bundled release is still easier than everything you know!\n\n###### Step 1\n\nOpen a shell and navigate to the `httpdocs` directory (e.g. `/var/www/html`) of your server. Download Composer and run it with the `create-project` option to install it to the desired directory (e.g. `/var/www/html/pico`):\n\n```shell\n$ curl -sSL https://getcomposer.org/installer | php\n$ php composer.phar create-project picocms/pico-composer pico\n```\n\n###### Step 2\n\nWhat second step? There's no second step. That's it! Open your favorite web browser and navigate to your brand new, stupidly simple, blazing fast, flat file CMS! Pico's sample contents will explain how to create your own contents. 😊\n\n### I want to use a pre-bundled release\n\nDo you know the feeling: You want to install a new website, so you upload all files of your favorite CMS and run the setup script - just to find out that you forgot about creating the SQL database first? Later the setup script tells you that the file permissions are wrong. Heck, what does this even mean? Forget about it, Pico is different!\n\n###### Step 1\n\n[Download the latest Pico release][LatestRelease] and upload all files to the desired install directory of Pico within the `httpdocs` directory (e.g. `/var/www/html/pico`) of your server.\n\n###### Step 2\n\nOkay, here's the catch: There's no catch. That's it! Open your favorite web browser and navigate to your brand new, stupidly simple, blazing fast, flat file CMS! Pico's sample contents will explain how to create your own contents. 😊\n\n### I want to manage my website using a Git repository\n\nGit is a very powerful distributed version-control system - and it can be used to establish a nice workflow around your Pico website. Using a Git repository for your website aids content creation and deployment, including collaborative editing and version control. If you want to manage your website in a Git repository, you use a Composer-based installation.\n\n1. Fork [Pico's Composer starter project][PicoComposerGit] using [GitHub's fork button][HelpFork]. If you don't want to use GitHub you aren't required to, you can choose whatever Git server you want. Forking manually just requires some extra steps: First clone the Git repository locally, add your Git server as a remote and push the repository to this new remote.\n\n2. Clone your fork locally and add your contents and assets. You can edit Pico's `composer.json` to include 3rd-party plugins and themes, or simply add your own plugins and themes to Pico's `plugins` resp. `themes` directories. Don't forget to commit your changes and push them to your Git server.\n\n3. Open a shell on your webserver and navigate to the `httpdocs` directory (e.g. `/var/www/html`). Download Composer, clone your Git repository to the desired directory (e.g. `/var/www/html/pico`) and install Pico's dependencies using Composer's `install` option:\n\n    ```shell\n    $ curl -sSL https://getcomposer.org/installer | php\n    $ git clone https://github.com/<YOUR_USERNAME>/<YOUR_REPOSITORY> pico\n    $ php composer.phar --working-dir=pico install\n    ```\n\n4. If you update your website's contents, simply commit your changes and push them to your Git server. Open a shell on your webserver and navigate to Pico's install directory within the `httpdocs` directory (e.g. `/var/www/html/pico`) of your server. Pull all changes from your Git server and update Pico's dependencies using Composer's `update` option:\n\n    ```shell\n    $ git pull\n    $ php composer.phar update\n    ```\n\n### I'm a developer\n\nSo, you're one of these amazing people making all of this possible? We love you folks! As a developer we recommend you to clone [Pico's Git repository][PicoGit] as well as the Git repositories of [Pico's default theme][PicoThemeGit] and the [`PicoDeprecated` plugin][PicoDeprecatedGit]. You can set up your workspace using [Pico's Composer starter project][PicoComposerGit] and include all of Pico's components using local packages.\n\nUsing Pico's Git repositories is different from using one of the installation methods elucidated above. It gives you the current development version of Pico, what is likely *unstable* and *not ready for production use*!\n\n1. Open a shell and navigate to the desired directory of Pico's development workspace within the `httpdocs` directory (e.g. `/var/www/html/pico`) of your server. Download and extract Pico's Composer starter project into the `workspace` directory:\n\n    ```shell\n    $ curl -sSL https://github.com/picocms/pico-composer/archive/master.tar.gz | tar xz\n    $ mv pico-composer-master workspace\n    ```\n\n2. Clone the Git repositories of all Pico components (Pico's core, Pico's default theme and the `PicoDeprecated` plugin) into the `components` directory:\n\n    ```shell\n    $ mkdir components\n    $ git clone https://github.com/picocms/Pico.git components/pico\n    $ git clone https://github.com/picocms/pico-theme.git components/pico-theme\n    $ git clone https://github.com/picocms/pico-deprecated.git components/pico-deprecated\n    ```\n\n3. Instruct Composer to use the local Git repositories as replacement for the `picocms/pico` (Pico's core), `picocms/pico-theme` (Pico's default theme) and `picocms/pico-deprecated` (the `PicoDeprecated` plugin) packages. Update the `composer.json` of your development workspace (i.e. `workspace/composer.json`) accordingly:\n\n    ```json\n    {\n        \"repositories\": [\n            {\n                \"type\": \"path\",\n                \"url\": \"../components/pico\",\n                \"options\": { \"symlink\": true }\n            },\n            {\n                \"type\": \"path\",\n                \"url\": \"../components/pico-theme\",\n                \"options\": { \"symlink\": true }\n            },\n            {\n                \"type\": \"path\",\n                \"url\": \"../components/pico-deprecated\",\n                \"options\": { \"symlink\": true }\n            }\n        ],\n        \"require\": {\n            \"picocms/pico\": \"dev-master\",\n            \"picocms/pico-theme\": \"dev-master\",\n            \"picocms/pico-deprecated\": \"dev-master\",\n            \"picocms/composer-installer\": \"^1.0\"\n        }\n    }\n    ```\n\n4. Download Composer and run it with the `install` option:\n\n    ```shell\n    $ curl -sSL https://getcomposer.org/installer | php\n    $ php composer.phar --working-dir=workspace install\n    ```\n\nYou can now open your web browser and navigate to Pico's development workspace. All changes you make to Pico's components will automatically be reflected in the development workspace.\n\nBy the way, you can also find all of Pico's components on [Packagist.org][Packagist]: [Pico's core][PicoPackagist], [Pico's default theme][PicoThemePackagist], the [`PicoDeprecated` plugin][PicoDeprecatedPackagist] and [Pico's Composer starter project][PicoComposerPackagist].\n\nUpgrade\n-------\n\nDo you remember when you installed Pico? It was ingeniously simple, wasn't it? Upgrading Pico is no difference! The upgrade process differs depending on whether you used [Composer][] or a pre-bundled release to install Pico. Please note that you should *always* create a backup of your Pico installation before upgrading!\n\nPico follows [Semantic Versioning 2.0][SemVer] and uses version numbers like `MAJOR`.`MINOR`.`PATCH`. When we update the `PATCH` version (e.g. `2.0.0` to `2.0.1`), we made backwards-compatible bug fixes. If we change the `MINOR` version (e.g. `2.0` to `2.1`), we added functionality in a backwards-compatible manner. Upgrading Pico is dead simple in both cases. Simply head over to the appropiate Upgrade sections below.\n\nBut wait, we forgot to mention what happens when we update the `MAJOR` version (e.g. `2.0` to `3.0`). In this case we made incompatible API changes. We will then provide a appropriate upgrade tutorial, so please head over to the [\"Upgrade\" page on our website][HelpUpgrade].\n\n### I've used Composer to install Pico\n\nUpgrading Pico is dead simple if you've used Composer to install Pico. Simply open a shell and navigate to Pico's install directory within the `httpdocs` directory (e.g. `/var/www/html/pico`) of your server. You can now upgrade Pico using just a single command:\n\n```shell\n$ php composer.phar update\n```\n\nThat's it! Composer will automatically update Pico and all plugins and themes you've installed using Composer. Please make sure to manually update all plugins and themes you've installed manually.\n\n### I've used a pre-bundled release to install Pico\n\nOkay, installing Pico was easy, but upgrading Pico is going to be hard, isn't it? I'm afraid I have to disappoint you. It's just as simple as installing Pico!\n\nFirst you'll have to delete the `vendor` directory of your Pico installation (e.g. if you've installed Pico to `/var/www/html/pico`, delete `/var/www/html/pico/vendor`). Then [download the latest Pico release][LatestRelease] and upload all files to your existing Pico installation directory. You will be prompted whether you want to overwrite files like `index.php`, `.htaccess`, ... - simply hit \"Yes\".\n\nThat's it! Now that Pico is up-to-date, you need to update all plugins and themes you've installed.\n\n### I'm a developer\n\nAs a developer you should know how to stay up-to-date... 😉 For the sake of completeness, if you want to upgrade Pico, simply open a shell and navigate to Pico's development workspace (e.g. `/var/www/html/pico`). Then pull the latest commits from the Git repositories of [Pico's core][PicoGit], [Pico's default theme][PicoThemeGit] and the [`PicoDeprecated` plugin][PicoDeprecatedGit]. Let Composer update your dependencies and you're ready to go.\n\n```shell\n$ git -C components/pico pull\n$ git -C components/pico-theme pull\n$ git -C components/pico-deprecated pull\n$ php composer.phar --working-dir=workspace update\n```\n\nGetting Help\n------------\n\n#### Getting Help as a user\n\nIf you want to get started using Pico, please refer to our [user docs][HelpUserDocs]. Please read the [upgrade notes][HelpUpgrade] if you want to upgrade from Pico 1.0 to Pico 2.0. You can find officially supported [plugins][OfficialPlugins] and [themes][OfficialThemes] on our website. A greater choice of third-party plugins and themes can be found in our [Wiki][] on the [plugins][WikiPlugins] or [themes][WikiThemes] pages respectively. If you want to create your own plugin or theme, please refer to the \"Getting Help as a developer\" section below.\n\n#### Getting Help as a developer\n\nIf you're a developer, please refer to the \"Contributing\" section below and our [contribution guidelines][ContributionGuidelines]. To get you started with creating a plugin or theme, please read the [developer docs on our website][HelpDevDocs].\n\n#### You still need help or experience a problem with Pico?\n\nWhen the docs can't answer your question, you can get help by joining us on [#picocms on Libera.Chat][LiberaChat] ([logs][LiberaChatLogs]). When you're experiencing problems with Pico, please don't hesitate to create a new [Issue][Issues] on GitHub. Concerning problems with plugins or themes, please refer to the website of the developer of this plugin or theme.\n\n**Before creating a new Issue,** please make sure the problem wasn't reported yet using [GitHubs search engine][IssuesSearch]. Please describe your issue as clear as possible and always include the *Pico version* you're using. Provided that you're using *plugins*, include a list of them too. We need information about the *actual and expected behavior*, the *steps to reproduce* the problem, and what steps you have taken to resolve the problem by yourself (i.e. *your own troubleshooting*).\n\nContributing\n------------\n\nYou want to contribute to Pico? We really appreciate that! You can help make Pico better by [contributing code][PullRequests] or [reporting issues][Issues], but please take note of our [contribution guidelines][ContributionGuidelines]. In general you can contribute in three different areas:\n\n1. Plugins & Themes: You're a plugin developer or theme designer? We love you folks! You can find tons of information about how to develop plugins and themes at http://picocms.org/development/. If you have created a plugin or theme, please add it to our [Wiki][], either on the [plugins][WikiPlugins] or [themes][WikiThemes] page. You may also [Submit][] it to our website, where it'll be displayed on the official [plugin][OfficialPlugins] or [theme][OfficialThemes] pages!\n\n2. Documentation: We always appreciate people improving our documentation. You can either improve the [inline user docs][EditInlineDocs] or the more extensive [user docs on our website][EditUserDocs]. You can also improve the [docs for plugin and theme developers][EditDevDocs]. Simply fork our website's Git repository from https://github.com/picocms/picocms.github.io, change the Markdown files and open a [pull request][PullRequestsWebsite].\n\n3. Pico's Core: The supreme discipline is to work on Pico's Core. Your contribution should help *every* Pico user to have a better experience with Pico. If this is the case, fork Pico from https://github.com/picocms/Pico and open a [pull request][PullRequests]. We look forward to your contribution!\n\nBy contributing to Pico, you accept and agree to the *Developer Certificate of Origin* for your present and future contributions submitted to Pico. Please refer to the [\"Developer Certificate of Origin\" section in our `CONTRIBUTING.md`][ContributionGuidelinesDCO].\n\nYou don't have time to contribute code to Pico, but still want to \"stand a coffee\" for the ones who do? You can contribute monetary to Pico using [Bountysource][], a crowd funding website that focuses on individual issues and feature requests. Just refer to the \"Bounties and Fundraisers\" section below for more info.\n\nBounties and Fundraisers\n------------------------\n\nPico uses [Bountysource][] to allow monetary contributions to the project. Bountysource is a crowd funding website that focuses on individual issues and feature requests in Open Source projects using micropayment. Users, or \"Backers\", can pledge money for fixing a specific issue, implementing new features, or developing a new plugin or theme. Open source software developers, or \"Bounty Hunters\", can then pick up and solve these tasks to earn the money.\n\nObviously this won't allow a developer to replace a full time job, it's rather aiming to \"stand a coffee\". However, it helps bringing users and developers closer together, and shows developers what users want and how much they care about certain things. Nevertheless you can still donate money to the project itself, as an easy way to say \"Thank You\" and to support Pico.\n\nIf you want to encourage developers to [fix a specific issue][Issues] or implement a feature, simply [pledge a new bounty][Bountysource] or back an existing one.\n\nAs a developer you can pick up a bounty by simply contributing to Pico (please refer to the \"Contributing\" section above). You don't have to be a official Pico Contributor! Pico is a Open Source project, anyone can open [pull requests][PullRequests] and claim bounties.\n\nOfficial Pico Contributors won't claim bounties on their own behalf, Pico will never take any money out of Bountysource. All money collected by Pico is used to pledge new bounties or to support projects Pico depends on.\n\n[Composer]: https://getcomposer.org/\n[LatestRelease]: https://github.com/picocms/Pico/releases/latest\n[PicoGit]: https://github.com/picocms/Pico\n[PicoThemeGit]: https://github.com/picocms/pico-theme\n[PicoDeprecatedGit]: https://github.com/picocms/pico-deprecated\n[PicoComposerGit]: https://github.com/picocms/pico-composer\n[Packagist]: https://packagist.org/\n[PicoPackagist]: https://packagist.org/packages/picocms/pico\n[PicoThemePackagist]: https://packagist.org/packages/picocms/pico-theme\n[PicoDeprecatedPackagist]: https://packagist.org/packages/picocms/pico-deprecated\n[PicoComposerPackagist]: https://packagist.org/packages/picocms/pico-composer\n[SemVer]: http://semver.org\n[HelpFork]: https://help.github.com/en/github/getting-started-with-github/fork-a-repo\n[HelpUpgrade]: http://picocms.org/in-depth/upgrade/\n[HelpUserDocs]: http://picocms.org/docs/\n[HelpDevDocs]: http://picocms.org/development/\n[Submit]: http://picocms.org/in-depth/submission_guidelines\n[OfficialPlugins]: http://picocms.org/plugins/\n[OfficialThemes]: http://picocms.org/themes/\n[Wiki]: https://github.com/picocms/Pico/wiki\n[WikiPlugins]: https://github.com/picocms/Pico/wiki/Pico-Plugins\n[WikiThemes]: https://github.com/picocms/Pico/wiki/Pico-Themes\n[Issues]: https://github.com/picocms/Pico/issues\n[IssuesSearch]: https://github.com/picocms/Pico/search?type=Issues\n[LiberaChat]: https://web.libera.chat/#picocms\n[LiberaChatLogs]: http://picocms.org/irc-logs\n[PullRequests]: https://github.com/picocms/Pico/pulls\n[PullRequestsWebsite]: https://github.com/picocms/picocms.github.io/pulls\n[ContributionGuidelines]: https://github.com/picocms/Pico/blob/master/CONTRIBUTING.md\n[ContributionGuidelinesDCO]: https://github.com/picocms/Pico/blob/master/CONTRIBUTING.md#developer-certificate-of-origin\n[EditInlineDocs]: https://github.com/picocms/Pico/edit/master/content-sample/index.md\n[EditUserDocs]: https://github.com/picocms/picocms.github.io/tree/master/_docs\n[EditDevDocs]: https://github.com/picocms/picocms.github.io/tree/master/_development\n[Bountysource]: https://www.bountysource.com/teams/picocms\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.50390625,
          "content": "# Security Policy\n\n## Supported Versions\n\nOnly the most recent stable version of Pico is supported.\n\n## Reporting a Vulnerability\n\nTo mitigate the impact of possible security issues we ask you to disclose any security issues with Pico privately first (\"responsible disclosure\"). To do so please send an email to Pico's lead developer:\n\n> Daniel Rudolf \\<picocms.org@daniel-rudolf.de\\>\n\nYou should receive an answer within 48 hours.\n\nAll messages with valid security reports will be puslished on GitHub in full text.\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.154296875,
          "content": "{\n    \"name\": \"picocms/pico\",\n    \"type\": \"library\",\n    \"description\": \"Pico is a flat file CMS, this means there is no administration backend and database to deal with. You simply create .md files in the \\\"content\\\" folder and that becomes a page.\",\n    \"keywords\": [\"pico\", \"picocms\", \"pico-cms\", \"simple\", \"flat-file\", \"cms\", \"content-management\", \"website\", \"markdown-to-html\", \"php\", \"markdown\", \"yaml\", \"twig\" ],\n    \"homepage\": \"http://picocms.org/\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Gilbert Pellegrom\",\n            \"email\": \"gilbert@pellegrom.me\",\n            \"role\": \"Project Founder\"\n        },\n        {\n            \"name\": \"Daniel Rudolf\",\n            \"email\": \"picocms.org@daniel-rudolf.de\",\n            \"role\": \"Lead Developer\"\n        },\n        {\n            \"name\": \"The Pico Community\",\n            \"homepage\": \"http://picocms.org/\"\n        },\n        {\n            \"name\": \"Contributors\",\n            \"homepage\": \"https://github.com/picocms/Pico/graphs/contributors\"\n        }\n    ],\n    \"support\": {\n        \"docs\": \"http://picocms.org/docs\",\n        \"issues\": \"https://github.com/picocms/Pico/issues\",\n        \"source\": \"https://github.com/picocms/Pico\"\n    },\n    \"require\": {\n        \"php\": \">=5.3.6\",\n        \"ext-mbstring\": \"*\",\n        \"twig/twig\": \"^1.36\",\n        \"symfony/yaml\" : \"^2.8\",\n        \"erusev/parsedown\": \"1.8.0-beta-7\",\n        \"erusev/parsedown-extra\": \"0.8.0-beta-1\"\n    },\n    \"suggest\": {\n        \"picocms/pico-theme\": \"Pico requires a theme to actually display the contents of your website. This is Pico's official default theme.\",\n        \"picocms/pico-deprecated\": \"PicoDeprecated's purpose is to maintain backward compatibility to older versions of Pico.\",\n        \"picocms/composer-installer\": \"This Composer plugin is responsible for installing Pico plugins and themes using the Composer package manager.\"\n    },\n    \"autoload\": {\n        \"psr-0\": {\n            \"Pico\": \"lib/\",\n            \"PicoPluginInterface\": \"lib/\",\n            \"AbstractPicoPlugin\": \"lib/\"\n        }\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"2.1.x-dev\",\n            \"dev-pico-3.0\": \"3.0.x-dev\"\n        }\n    }\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "content-sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "content",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.php",
          "type": "blob",
          "size": 1.2451171875,
          "content": "<?php // @codingStandardsIgnoreFile\n/**\n * This file is part of Pico. It's copyrighted by the contributors recorded\n * in the version control history of the file, available from the following\n * original location:\n *\n * <https://github.com/picocms/Pico/blob/master/index.php>\n *\n * SPDX-License-Identifier: MIT\n * License-Filename: LICENSE\n */\n\n// load dependencies\nif (is_file(__DIR__ . '/vendor/autoload.php')) {\n    // composer root package\n    require_once(__DIR__ . '/vendor/autoload.php');\n} elseif (is_file(__DIR__ . '/../../../vendor/autoload.php')) {\n    // composer dependency package\n    require_once(__DIR__ . '/../../../vendor/autoload.php');\n} else {\n    die(\n        \"Cannot find 'vendor/autoload.php'. If you're using a composer-based Pico install, run `composer install`. \"\n        . \"If you're rather trying to use one of Pico's pre-built release packages, make sure to download Pico's \"\n        . \"latest release package named 'pico-release-v*.tar.gz' (don't download a source code package).\"\n    );\n}\n\n// instance Pico\n$pico = new Pico(\n    __DIR__,    // root dir\n    'config/',  // config dir\n    'plugins/', // plugins dir\n    'themes/'   // themes dir\n);\n\n// override configuration?\n//$pico->setConfig(array());\n\n// run application\necho $pico->run();\n"
        },
        {
          "name": "index.php.dist",
          "type": "blob",
          "size": 0.9619140625,
          "content": "<?php // @codingStandardsIgnoreFile\n/**\n * This file is part of Pico. It's copyrighted by the contributors recorded\n * in the version control history of the file, available from the following\n * original location:\n *\n * <https://github.com/picocms/Pico/blob/master/index.php.dist>\n *\n * SPDX-License-Identifier: MIT\n * License-Filename: LICENSE\n */\n\n// check PHP platform requirements\nif (PHP_VERSION_ID < 50306) {\n    die('Pico requires PHP 5.3.6 or above to run');\n}\nif (!extension_loaded('dom')) {\n    die(\"Pico requires the PHP extension 'dom' to run\");\n}\nif (!extension_loaded('mbstring')) {\n    die(\"Pico requires the PHP extension 'mbstring' to run\");\n}\n\n// load dependencies\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n// instance Pico\n$pico = new Pico(\n    __DIR__,    // root dir\n    'config/',  // config dir\n    'plugins/', // plugins dir\n    'themes/'   // themes dir\n);\n\n// override configuration?\n//$pico->setConfig(array());\n\n// run application\necho $pico->run();\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "themes",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}