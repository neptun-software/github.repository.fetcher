{
  "metadata": {
    "timestamp": 1736711857384,
    "page": 189,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "symfony/doctrine-bridge",
      "stars": 3182,
      "defaultBranch": "7.2",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.072265625,
          "content": "/Tests export-ignore\n/phpunit.xml.dist export-ignore\n/.git* export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "vendor/\ncomposer.lock\nphpunit.xml\n"
        },
        {
          "name": "ArgumentResolver",
          "type": "tree",
          "content": null
        },
        {
          "name": "Attribute",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.9287109375,
          "content": "CHANGELOG\n=========\n\n7.2\n---\n\n * Accept `ReadableCollection` in `CollectionToArrayTransformer`\n\n7.1\n---\n\n * Allow `EntityValueResolver` to return a list of entities\n * Add support for auto-closing idle connections\n * Allow validating every class against `UniqueEntity` constraint\n * Deprecate auto-mapping of entities in favor of mapped route parameters\n\n7.0\n---\n\n * Remove `DoctrineDbalCacheAdapterSchemaSubscriber`, use `DoctrineDbalCacheAdapterSchemaListener` instead\n * Remove `MessengerTransportDoctrineSchemaSubscriber`, use `MessengerTransportDoctrineSchemaListener` instead\n * Remove `RememberMeTokenProviderDoctrineSchemaSubscriber`, use `RememberMeTokenProviderDoctrineSchemaListener` instead\n * Remove `DbalLogger`, use a middleware instead\n * Remove `DoctrineDataCollector::addLogger()`, use a `DebugDataHolder` instead\n * Remove `ContainerAwareLoader`, use dependency injection in your fixtures instead\n * `ContainerAwareEventManager::getListeners()` must be called with an event name\n * DoctrineBridge now requires `doctrine/event-manager:^2`\n * Add parameter `$isSameDatabase` to `DoctrineTokenProvider::configureSchema()`\n\n6.4\n---\n\n * [BC BREAK] Add argument `$buildDir` to `ProxyCacheWarmer::warmUp()`\n * [BC BREAK] Add return type-hints to `EntityFactory`\n * Deprecate `DbalLogger`, use a middleware instead\n * Deprecate not constructing `DoctrineDataCollector` with an instance of `DebugDataHolder`\n * Deprecate `DoctrineDataCollector::addLogger()`, use a `DebugDataHolder` instead\n * Deprecate `ContainerAwareLoader`, use dependency injection in your fixtures instead\n * Always pass the `Request` object to `EntityValueResolver`'s expression\n * [BC BREAK] Change argument `$lastUsed` of `DoctrineTokenProvider::updateToken()` to accept `DateTimeInterface`\n\n6.3\n---\n\n * Deprecate passing Doctrine subscribers to `ContainerAwareEventManager` class, use listeners instead\n * Add `AbstractSchemaListener`, `LockStoreSchemaListener` and `PdoSessionHandlerSchemaListener`\n * Deprecate `DoctrineDbalCacheAdapterSchemaSubscriber` in favor of `DoctrineDbalCacheAdapterSchemaListener`\n * Deprecate `MessengerTransportDoctrineSchemaSubscriber` in favor of `MessengerTransportDoctrineSchemaListener`\n * Deprecate `RememberMeTokenProviderDoctrineSchemaSubscriber` in favor of `RememberMeTokenProviderDoctrineSchemaListener`\n * Add optional parameter `$isSameDatabase` to `DoctrineTokenProvider::configureSchema()`\n\n6.2\n---\n\n * Add `#[MapEntity]` with its corresponding `EntityValueResolver`\n * Add `NAME` constant to `UlidType` and `UuidType`\n\n6.0\n---\n\n * Remove `DoctrineTestHelper` and `TestRepositoryFactory`\n\n5.4\n---\n\n * Add `DoctrineOpenTransactionLoggerMiddleware` to log when a transaction has been left open\n * Deprecate `PdoCacheAdapterDoctrineSchemaSubscriber` and add `DoctrineDbalCacheAdapterSchemaSubscriber` instead\n * `UniqueEntity` constraint retrieves a maximum of two entities if the default repository method is used.\n * Add support for the newer bundle structure to `AbstractDoctrineExtension::loadMappingInformation()`\n * Add argument `$bundleDir` to `AbstractDoctrineExtension::getMappingDriverBundleConfigDefaults()`\n * Add argument `$bundleDir` to `AbstractDoctrineExtension::getMappingResourceConfigDirectory()`\n\n5.3\n---\n\n * Deprecate `UserLoaderInterface::loadUserByUsername()` in favor of `UserLoaderInterface::loadUserByIdentifier()\n * Deprecate `DoctrineTestHelper` and `TestRepositoryFactory`\n * [BC BREAK] Remove `UuidV*Generator` classes\n * Add `UuidGenerator`\n * Add support for the new security-core `TokenVerifierInterface` in `DoctrineTokenProvider`, fixing parallel requests handling in remember-me\n\n5.2.0\n-----\n\n * added support for symfony/uid as `UlidType` and `UuidType` as Doctrine types\n * added `UlidGenerator`, `UuidV1Generator`, `UuidV4Generator` and `UuidV6Generator`\n\n5.0.0\n-----\n\n * the `getMetadataDriverClass()` method is abstract and must be implemented by class extending `AbstractDoctrineExtension`\n * passing an `IdReader` to the `DoctrineChoiceLoader` when the query cannot be optimized with single id field, throws an exception; pass `null` instead\n * not explicitly passing an instance of `IdReader` to `DoctrineChoiceLoader` when it can optimize single id field, will not apply any optimization\n * `DoctrineExtractor` now requires an `EntityManagerInterface` on instantiation\n\n4.4.0\n-----\n\n * [BC BREAK] using null as `$classValidatorRegexp` value in `DoctrineLoader::__construct` will not enable auto-mapping for all classes anymore, use `'{.*}'` instead.\n * added `DoctrineClearEntityManagerWorkerSubscriber`\n * deprecated `RegistryInterface`, use `Doctrine\\Persistence\\ManagerRegistry`\n * added support for invokable event listeners\n * added `getMetadataDriverClass` method to deprecate class parameters in service configuration files\n\n4.3.0\n-----\n\n * changed guessing of DECIMAL to set the `input` option of `NumberType` to string\n * deprecated not passing an `IdReader` to the `DoctrineChoiceLoader` when query can be optimized with a single id field\n * deprecated passing an `IdReader` to the `DoctrineChoiceLoader` when entities have a composite id\n * added two Messenger middleware: `DoctrinePingConnectionMiddleware` and `DoctrineCloseConnectionMiddleware`\n\n4.2.0\n-----\n\n * deprecated injecting `ClassMetadataFactory` in `DoctrineExtractor`,\n   an instance of `EntityManagerInterface` should be injected instead\n * added support for `simple_array` type\n * the `DoctrineTransactionMiddlewareFactory` class has been removed\n\n4.1.0\n-----\n\n * added support for datetime immutable types in form type guesser\n\n4.0.0\n-----\n\n * the first constructor argument of the `DoctrineChoiceLoader` class must be\n   an `ObjectManager` implementation\n * removed the `MergeDoctrineCollectionListener::onBind()` method\n * trying to reset a non-lazy manager service using the `ManagerRegistry::resetService()`\n   method throws an exception\n * removed the `DoctrineParserCache` class\n\n3.4.0\n-----\n\n * added support for doctrine/dbal v2.6 types\n * added cause of UniqueEntity constraint violation\n * deprecated `DbalSessionHandler` and `DbalSessionHandlerSchema` in favor of\n   `Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler`\n\n3.1.0\n-----\n\n * added \"{{ value }}\" message placeholder to UniqueEntityValidator\n * deprecated `MergeDoctrineCollectionListener::onBind` in favor of\n   `MergeDoctrineCollectionListener::onSubmit`\n * deprecated passing `ChoiceListFactoryInterface` as first argument of\n   `DoctrineChoiceLoader`'s constructor\n\n3.0.0\n-----\n\n * removed `EntityChoiceList`\n * removed `$manager` (2nd) and `$class` (3th) arguments of `ORMQueryBuilderLoader`\n * removed passing a query builder closure to `ORMQueryBuilderLoader`\n * removed `loader` and `property` options of the `DoctrineType`\n\n2.8.0\n-----\n\n * deprecated using the entity provider with a Doctrine repository implementing UserProviderInterface\n * added UserLoaderInterface for loading users through Doctrine.\n\n2.7.0\n-----\n\n * added DoctrineChoiceLoader\n * deprecated EntityChoiceList\n * deprecated passing a query builder closure to ORMQueryBuilderLoader\n * deprecated $manager and $em arguments of ORMQueryBuilderLoader\n * added optional arguments $propertyAccessor and $choiceListFactory to DoctrineOrmExtension constructor\n * deprecated \"loader\" and \"property\" options of DoctrineType\n\n2.4.0\n-----\n\n * deprecated DoctrineOrmTestCase class\n\n2.2.0\n-----\n\n * added an optional PropertyAccessorInterface parameter to DoctrineType,\n   EntityType and EntityChoiceList\n\n2.1.0\n-----\n\n * added a default implementation of the ManagerRegistry\n * added a session storage for Doctrine DBAL\n * DoctrineOrmTypeGuesser now guesses \"collection\" for array Doctrine type\n * DoctrineType now caches its choice lists in order to improve performance\n * DoctrineType now uses ManagerRegistry::getManagerForClass() if the option \"em\" is not set\n * UniqueEntity validation constraint now accepts a \"repositoryMethod\" option that will be used to check for uniqueness instead of the default \"findBy\"\n * [BC BREAK] the DbalLogger::log() visibility has been changed from public to\n   protected\n"
        },
        {
          "name": "CacheWarmer",
          "type": "tree",
          "content": null
        },
        {
          "name": "ContainerAwareEventManager.php",
          "type": "blob",
          "size": 6.4599609375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Bridge\\Doctrine;\n\nuse Doctrine\\Common\\EventArgs;\nuse Doctrine\\Common\\EventManager;\nuse Doctrine\\Common\\EventSubscriber;\nuse Psr\\Container\\ContainerInterface;\n\n/**\n * Allows lazy loading of listener and subscriber services.\n *\n * @author Johannes M. Schmitt <schmittjoh@gmail.com>\n */\nclass ContainerAwareEventManager extends EventManager\n{\n    private array $initialized = [];\n    private bool $initializedSubscribers = false;\n    private array $initializedHashMapping = [];\n    private array $methods = [];\n\n    /**\n     * @param list<array{string[], string|object}> $listeners List of [events, listener] tuples\n     */\n    public function __construct(\n        private ContainerInterface $container,\n        private array $listeners = [],\n    ) {\n    }\n\n    public function dispatchEvent(string $eventName, ?EventArgs $eventArgs = null): void\n    {\n        if (!$this->initializedSubscribers) {\n            $this->initializeSubscribers();\n        }\n        if (!isset($this->listeners[$eventName])) {\n            return;\n        }\n\n        $eventArgs ??= EventArgs::getEmptyInstance();\n\n        if (!isset($this->initialized[$eventName])) {\n            $this->initializeListeners($eventName);\n        }\n\n        foreach ($this->listeners[$eventName] as $hash => $listener) {\n            $listener->{$this->methods[$eventName][$hash]}($eventArgs);\n        }\n    }\n\n    public function getListeners(string $event): array\n    {\n        if (!$this->initializedSubscribers) {\n            $this->initializeSubscribers();\n        }\n        if (!isset($this->initialized[$event])) {\n            $this->initializeListeners($event);\n        }\n\n        return $this->listeners[$event];\n    }\n\n    public function getAllListeners(): array\n    {\n        if (!$this->initializedSubscribers) {\n            $this->initializeSubscribers();\n        }\n\n        foreach ($this->listeners as $event => $listeners) {\n            if (!isset($this->initialized[$event])) {\n                $this->initializeListeners($event);\n            }\n        }\n\n        return $this->listeners;\n    }\n\n    public function hasListeners(string $event): bool\n    {\n        if (!$this->initializedSubscribers) {\n            $this->initializeSubscribers();\n        }\n\n        return isset($this->listeners[$event]) && $this->listeners[$event];\n    }\n\n    public function addEventListener(string|array $events, object|string $listener): void\n    {\n        if (!$this->initializedSubscribers) {\n            $this->initializeSubscribers();\n        }\n\n        $hash = $this->getHash($listener);\n\n        foreach ((array) $events as $event) {\n            // Overrides listener if a previous one was associated already\n            // Prevents duplicate listeners on same event (same instance only)\n            $this->listeners[$event][$hash] = $listener;\n\n            if (\\is_string($listener)) {\n                unset($this->initialized[$event]);\n                unset($this->initializedHashMapping[$event][$hash]);\n            } else {\n                $this->methods[$event][$hash] = $this->getMethod($listener, $event);\n            }\n        }\n    }\n\n    public function removeEventListener(string|array $events, object|string $listener): void\n    {\n        if (!$this->initializedSubscribers) {\n            $this->initializeSubscribers();\n        }\n\n        $hash = $this->getHash($listener);\n\n        foreach ((array) $events as $event) {\n            if (isset($this->initializedHashMapping[$event][$hash])) {\n                $hash = $this->initializedHashMapping[$event][$hash];\n                unset($this->initializedHashMapping[$event][$hash]);\n            }\n\n            // Check if we actually have this listener associated\n            if (isset($this->listeners[$event][$hash])) {\n                unset($this->listeners[$event][$hash]);\n            }\n\n            if (isset($this->methods[$event][$hash])) {\n                unset($this->methods[$event][$hash]);\n            }\n        }\n    }\n\n    public function addEventSubscriber(EventSubscriber $subscriber): void\n    {\n        if (!$this->initializedSubscribers) {\n            $this->initializeSubscribers();\n        }\n\n        parent::addEventSubscriber($subscriber);\n    }\n\n    public function removeEventSubscriber(EventSubscriber $subscriber): void\n    {\n        if (!$this->initializedSubscribers) {\n            $this->initializeSubscribers();\n        }\n\n        parent::removeEventSubscriber($subscriber);\n    }\n\n    private function initializeListeners(string $eventName): void\n    {\n        $this->initialized[$eventName] = true;\n\n        // We'll refill the whole array in order to keep the same order\n        $listeners = [];\n        foreach ($this->listeners[$eventName] as $hash => $listener) {\n            if (\\is_string($listener)) {\n                $listener = $this->container->get($listener);\n                $newHash = $this->getHash($listener);\n\n                $this->initializedHashMapping[$eventName][$hash] = $newHash;\n\n                $listeners[$newHash] = $listener;\n\n                $this->methods[$eventName][$newHash] = $this->getMethod($listener, $eventName);\n            } else {\n                $listeners[$hash] = $listener;\n            }\n        }\n\n        $this->listeners[$eventName] = $listeners;\n    }\n\n    private function initializeSubscribers(): void\n    {\n        $this->initializedSubscribers = true;\n        $listeners = $this->listeners;\n        $this->listeners = [];\n        foreach ($listeners as $listener) {\n            if (\\is_array($listener)) {\n                $this->addEventListener(...$listener);\n                continue;\n            }\n\n            throw new \\InvalidArgumentException(\\sprintf('Using Doctrine subscriber \"%s\" is not allowed. Register it as a listener instead, using e.g. the #[AsDoctrineListener] or #[AsDocumentListener] attribute.', \\is_object($listener) ? get_debug_type($listener) : $listener));\n        }\n    }\n\n    private function getHash(string|object $listener): string\n    {\n        if (\\is_string($listener)) {\n            return '_service_'.$listener;\n        }\n\n        return spl_object_hash($listener);\n    }\n\n    private function getMethod(object $listener, string $event): string\n    {\n        if (!method_exists($listener, $event) && method_exists($listener, '__invoke')) {\n            return '__invoke';\n        }\n\n        return $event;\n    }\n}\n"
        },
        {
          "name": "DataCollector",
          "type": "tree",
          "content": null
        },
        {
          "name": "DependencyInjection",
          "type": "tree",
          "content": null
        },
        {
          "name": "Form",
          "type": "tree",
          "content": null
        },
        {
          "name": "IdGenerator",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2004-present Fabien Potencier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "ManagerRegistry.php",
          "type": "blob",
          "size": 2.5537109375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Bridge\\Doctrine;\n\nuse Doctrine\\Persistence\\AbstractManagerRegistry;\nuse ProxyManager\\Proxy\\GhostObjectInterface;\nuse ProxyManager\\Proxy\\LazyLoadingInterface;\nuse Symfony\\Component\\DependencyInjection\\Container;\nuse Symfony\\Component\\VarExporter\\LazyObjectInterface;\n\n/**\n * References Doctrine connections and entity/document managers.\n *\n * @author Lukas Kahwe Smith <smith@pooteeweet.org>\n */\nabstract class ManagerRegistry extends AbstractManagerRegistry\n{\n    protected Container $container;\n\n    protected function getService($name): object\n    {\n        return $this->container->get($name);\n    }\n\n    protected function resetService($name): void\n    {\n        if (!$this->container->initialized($name)) {\n            return;\n        }\n        $manager = $this->container->get($name);\n\n        if ($manager instanceof LazyObjectInterface) {\n            if (!$manager->resetLazyObject()) {\n                throw new \\LogicException(\\sprintf('Resetting a non-lazy manager service is not supported. Declare the \"%s\" service as lazy.', $name));\n            }\n\n            return;\n        }\n        if (!$manager instanceof LazyLoadingInterface) {\n            throw new \\LogicException(\\sprintf('Resetting a non-lazy manager service is not supported. Declare the \"%s\" service as lazy.', $name));\n        }\n        if ($manager instanceof GhostObjectInterface) {\n            throw new \\LogicException('Resetting a lazy-ghost-object manager service is not supported.');\n        }\n        $manager->setProxyInitializer(\\Closure::bind(\n            function (&$wrappedInstance, LazyLoadingInterface $manager) use ($name) {\n                if (isset($this->aliases[$name])) {\n                    $name = $this->aliases[$name];\n                }\n                if (isset($this->fileMap[$name])) {\n                    $wrappedInstance = $this->load($this->fileMap[$name], false);\n                } elseif ((new \\ReflectionMethod($this, $this->methodMap[$name]))->isStatic()) {\n                    $wrappedInstance = $this->{$this->methodMap[$name]}($this, false);\n                } else {\n                    $wrappedInstance = $this->{$this->methodMap[$name]}(false);\n                }\n\n                $manager->setProxyInitializer(null);\n\n                return true;\n            },\n            $this->container,\n            Container::class\n        ));\n    }\n}\n"
        },
        {
          "name": "Messenger",
          "type": "tree",
          "content": null
        },
        {
          "name": "Middleware",
          "type": "tree",
          "content": null
        },
        {
          "name": "PropertyInfo",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.4462890625,
          "content": "Doctrine Bridge\n===============\n\nThe Doctrine bridge provides integration for\n[Doctrine](http://www.doctrine-project.org/) with various Symfony components.\n\nResources\n---------\n\n * [Contributing](https://symfony.com/doc/current/contributing/index.html)\n * [Report issues](https://github.com/symfony/symfony/issues) and\n   [send Pull Requests](https://github.com/symfony/symfony/pulls)\n   in the [main Symfony repository](https://github.com/symfony/symfony)\n"
        },
        {
          "name": "SchemaListener",
          "type": "tree",
          "content": null
        },
        {
          "name": "Security",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "Types",
          "type": "tree",
          "content": null
        },
        {
          "name": "Validator",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.525390625,
          "content": "{\n    \"name\": \"symfony/doctrine-bridge\",\n    \"type\": \"symfony-bridge\",\n    \"description\": \"Provides integration for Doctrine with various Symfony components\",\n    \"keywords\": [],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Fabien Potencier\",\n            \"email\": \"fabien@symfony.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.2\",\n        \"doctrine/event-manager\": \"^2\",\n        \"doctrine/persistence\": \"^3.1\",\n        \"symfony/deprecation-contracts\": \"^2.5|^3\",\n        \"symfony/polyfill-ctype\": \"~1.8\",\n        \"symfony/polyfill-mbstring\": \"~1.0\",\n        \"symfony/service-contracts\": \"^2.5|^3\"\n    },\n    \"require-dev\": {\n        \"symfony/cache\": \"^6.4|^7.0\",\n        \"symfony/config\": \"^6.4|^7.0\",\n        \"symfony/dependency-injection\": \"^6.4|^7.0\",\n        \"symfony/doctrine-messenger\": \"^6.4|^7.0\",\n        \"symfony/expression-language\": \"^6.4|^7.0\",\n        \"symfony/form\": \"^6.4.6|^7.0.6\",\n        \"symfony/http-kernel\": \"^6.4|^7.0\",\n        \"symfony/lock\": \"^6.4|^7.0\",\n        \"symfony/messenger\": \"^6.4|^7.0\",\n        \"symfony/property-access\": \"^6.4|^7.0\",\n        \"symfony/property-info\": \"^6.4|^7.0\",\n        \"symfony/security-core\": \"^6.4|^7.0\",\n        \"symfony/stopwatch\": \"^6.4|^7.0\",\n        \"symfony/translation\": \"^6.4|^7.0\",\n        \"symfony/type-info\": \"^7.1\",\n        \"symfony/uid\": \"^6.4|^7.0\",\n        \"symfony/validator\": \"^6.4|^7.0\",\n        \"symfony/var-dumper\": \"^6.4|^7.0\",\n        \"doctrine/collections\": \"^1.8|^2.0\",\n        \"doctrine/data-fixtures\": \"^1.1|^2\",\n        \"doctrine/dbal\": \"^3.6|^4\",\n        \"doctrine/orm\": \"^2.15|^3\",\n        \"psr/log\": \"^1|^2|^3\"\n    },\n    \"conflict\": {\n        \"doctrine/collections\": \"<1.8\",\n        \"doctrine/dbal\": \"<3.6\",\n        \"doctrine/lexer\": \"<1.1\",\n        \"doctrine/orm\": \"<2.15\",\n        \"symfony/cache\": \"<6.4\",\n        \"symfony/dependency-injection\": \"<6.4\",\n        \"symfony/form\": \"<6.4.6|>=7,<7.0.6\",\n        \"symfony/http-foundation\": \"<6.4\",\n        \"symfony/http-kernel\": \"<6.4\",\n        \"symfony/lock\": \"<6.4\",\n        \"symfony/messenger\": \"<6.4\",\n        \"symfony/property-info\": \"<6.4\",\n        \"symfony/security-bundle\": \"<6.4\",\n        \"symfony/security-core\": \"<6.4\",\n        \"symfony/validator\": \"<6.4\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Bridge\\\\Doctrine\\\\\": \"\" },\n        \"exclude-from-classmap\": [\n            \"/Tests/\"\n        ]\n    },\n    \"minimum-stability\": \"dev\"\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 1.43359375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"http://schema.phpunit.de/9.3/phpunit.xsd\"\n         backupGlobals=\"false\"\n         colors=\"true\"\n         bootstrap=\"vendor/autoload.php\"\n         failOnRisky=\"true\"\n         failOnWarning=\"true\"\n>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\" />\n    </php>\n\n    <testsuites>\n        <testsuite name=\"Symfony Doctrine Bridge Test Suite\">\n            <directory>./Tests/</directory>\n        </testsuite>\n    </testsuites>\n\n    <coverage>\n        <include>\n            <directory>./</directory>\n        </include>\n        <exclude>\n            <directory>./Resources</directory>\n            <directory>./Tests</directory>\n            <directory>./vendor</directory>\n        </exclude>\n    </coverage>\n\n    <listeners>\n        <listener class=\"Symfony\\Bridge\\PhpUnit\\SymfonyTestsListener\">\n            <arguments>\n                <array>\n                    <element key=\"time-sensitive\">\n                        <array>\n                            <element key=\"0\"><string>Symfony\\Bridge\\Doctrine\\Middleware\\Debug</string></element>\n                            <element key=\"1\"><string>Symfony\\Bridge\\Doctrine\\Middleware\\IdleConnection</string></element>\n                        </array>\n                    </element>\n                </array>\n            </arguments>\n        </listener>\n    </listeners>\n</phpunit>\n"
        }
      ]
    }
  ]
}