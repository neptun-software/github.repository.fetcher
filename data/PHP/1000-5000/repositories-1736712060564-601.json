{
  "metadata": {
    "timestamp": 1736712060564,
    "page": 601,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "web-push-libs/web-push-php",
      "stars": 1726,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2255859375,
          "content": "* text=auto\n\n/.gitattributes export-ignore\n/.github export-ignore\n/.gitignore export-ignore\n/.php-cs-fixer.php export-ignore\n/README.md export-ignore\n/phpstan.neon export-ignore\n/phpunit.xml.dist export-ignore\n/tests export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1630859375,
          "content": "/vendor\ncomposer.lock\nphpunit.xml\n\n# web-push-testing-service logs\ncli.log\nmodule.log\n.vagrant\nVagrantfile # temp, may be?\n.phpunit.cache/*\n.php-cs-fixer.cache\n.idea/\n"
        },
        {
          "name": ".php-cs-fixer.php",
          "type": "blob",
          "size": 0.8955078125,
          "content": "<?php\n// https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/blob/master/doc/config.rst\n\n$config = new PhpCsFixer\\Config();\n$rules  = [\n    '@PSR12'                              => true, // The default rule.\n    '@PHP81Migration'                     => true, // Must be the same as the min PHP version.\n    'blank_line_after_opening_tag'        => false, // Do not waste space between <?php and declare.\n    'global_namespace_import'             => ['import_classes' => false, 'import_constants' => false, 'import_functions' => false],\n    'php_unit_test_class_requires_covers' => true,\n    'php_unit_method_casing'              => true,\n    // Do not enable by default. These rules require review!! (but they are useful)\n    // '@PHP80Migration:risky'      => true,\n    // '@PHPUnit100Migration:risky' => true,\n];\n\n$config->setRules($rules);\n$config->setHideProgress(true);\n$config->setRiskyAllowed(true);\n\nreturn $config;\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0341796875,
          "content": "Copyright (c) 2015 Louis Lagrange\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.2158203125,
          "content": "# WebPush\n\n> Web Push library for PHP\n\n[![Build Status](https://github.com/web-push-libs/web-push-php/actions/workflows/tests.yml/badge.svg)](https://github.com/web-push-libs/web-push-php/actions/workflows/tests.yml)\n\nWebPush can be used to send push messages to endpoints as described in the [Web Push protocol](https://datatracker.ietf.org/doc/html/rfc8030).\n\nThis push message is then received by the browser, which can then create a notification using the [service worker](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) and the [Notifications API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API).\n\n## Requirements\n\nPHP 8.1+ and the following extensions:\n\n- bcmath and/or gmp (optional but better for performance)\n- mbstring\n- curl\n- openssl (with elliptic curve support)\n\nThere is no support and maintenance for older PHP versions, however you are free to use the following compatible versions:\n\n- PHP 5.6 or HHVM: `v1.x`\n- PHP 7.0: `v2.x`\n- PHP 7.1: `v3.x-v5.x`\n- PHP 7.2: `v6.x`\n- PHP 7.3 7.4: `v7.x`\n- PHP 8.0 / Openssl without elliptic curve support: `v8.x`\n\nThis README is only compatible with the latest version. Each version of the library has a git tag where the corresponding README can be read.\n\n## Installation\n\nUse [composer](https://getcomposer.org/) to download and install the library and its dependencies.\n\n```bash\ncomposer require minishlink/web-push\n```\n\n## Usage\n\n### Example\n\nA complete example with html+JS frontend and php backend using `web-push-php` can be found here: [Minishlink/web-push-php-example](https://github.com/Minishlink/web-push-php-example)\n\n### Send Push Message\n\n```php\n<?php\n\nuse Minishlink\\WebPush\\WebPush;\nuse Minishlink\\WebPush\\Subscription;\n\n// store the client-side `PushSubscription` object (calling `.toJSON` on it) as-is and then create a WebPush\\Subscription from it\n$subscription = Subscription::create(json_decode($clientSidePushSubscriptionJSON, true));\n\n// array of notifications\n$notifications = [\n    [\n        'subscription' => $subscription,\n        'payload' => '{\"message\":\"Hello World!\"}',\n    ], [\n          // current PushSubscription format (browsers might change this in the future)\n          'subscription' => Subscription::create([\n              \"endpoint\" => \"https://example.com/other/endpoint/of/another/vendor/abcdef...\",\n              \"keys\" => [\n                  'p256dh' => '(stringOf88Chars)',\n                  'auth' => '(stringOf24Chars)'\n              ],\n          ]),\n          'payload' => '{\"message\":\"Hello World!\"}',\n    ], [\n        // old Firefox PushSubscription format\n        'subscription' => Subscription::create([\n            'endpoint' => 'https://updates.push.services.mozilla.com/push/abc...', // Firefox 43+,\n            'publicKey' => 'BPcMbnWQL5GOYX/5LKZXT6sLmHiMsJSiEvIFvfcDvX7IZ9qqtq68onpTPEYmyxSQNiH7UD/98AUcQ12kBoxz/0s=', // base 64 encoded, should be 88 chars\n            'authToken' => 'CxVX6QsVToEGEcjfYPqXQw==', // base 64 encoded, should be 24 chars\n        ]),\n        'payload' => 'hello !',\n    ], [\n        // old Chrome PushSubscription format\n        'subscription' => Subscription::create([\n            'endpoint' => 'https://fcm.googleapis.com/fcm/send/abcdef...',\n        ]),\n        'payload' => null,\n    ], [\n        // old PushSubscription format\n        'subscription' => Subscription::create([\n            'endpoint' => 'https://example.com/other/endpoint/of/another/vendor/abcdef...',\n            'publicKey' => '(stringOf88Chars)',\n            'authToken' => '(stringOf24Chars)',\n            'contentEncoding' => 'aesgcm', // one of PushManager.supportedContentEncodings\n        ]),\n        'payload' => '{\"message\":\"test\"}',\n    ]\n];\n\n$webPush = new WebPush();\n\n// send multiple notifications with payload\nforeach ($notifications as $notification) {\n    $webPush->queueNotification(\n        $notification['subscription'],\n        $notification['payload'] // optional (defaults null)\n    );\n}\n\n/**\n * Check sent results\n * @var MessageSentReport $report\n */\nforeach ($webPush->flush() as $report) {\n    $endpoint = $report->getRequest()->getUri()->__toString();\n\n    if ($report->isSuccess()) {\n        echo \"[v] Message sent successfully for subscription {$endpoint}.\";\n    } else {\n        echo \"[x] Message failed to sent for subscription {$endpoint}: {$report->getReason()}\";\n    }\n}\n\n/**\n * send one notification and flush directly\n * @var MessageSentReport $report\n */\n$report = $webPush->sendOneNotification(\n    $notifications[0]['subscription'],\n    $notifications[0]['payload'], // optional (defaults null)\n);\n```\n\n### Authentication (VAPID)\n\nBrowsers need to verify your identity. A standard called VAPID can authenticate you for all browsers. You'll need to create and provide a public and private key for your server. These keys must be safely stored and should not change.\n\nYou can specify your authentication details when instantiating WebPush. The keys can be passed directly (recommended), or you can load a PEM file or its content:\n\n```php\n<?php\n\nuse Minishlink\\WebPush\\WebPush;\n\n$endpoint = 'https://fcm.googleapis.com/fcm/send/abcdef...'; // Chrome\n\n$auth = [\n    'VAPID' => [\n        'subject' => 'mailto:me@website.com', // can be a mailto: or your website address\n        'publicKey' => '~88 chars', // (recommended) uncompressed public key P-256 encoded in Base64-URL\n        'privateKey' => '~44 chars', // (recommended) in fact the secret multiplier of the private key encoded in Base64-URL\n        'pemFile' => 'path/to/pem', // if you have a PEM file and can link to it on your filesystem\n        'pem' => 'pemFileContent', // if you have a PEM file and want to hardcode its content\n    ],\n];\n\n$webPush = new WebPush($auth);\n$webPush->queueNotification(...);\n```\n\nIn order to generate the uncompressed public and secret key, encoded in Base64, enter the following in your Linux bash:\n\n```bash\n$ openssl ecparam -genkey -name prime256v1 -out private_key.pem\n$ openssl ec -in private_key.pem -pubout -outform DER|tail -c 65|base64|tr -d '=' |tr '/+' '_-' >> public_key.txt\n$ openssl ec -in private_key.pem -outform DER|tail -c +8|head -c 32|base64|tr -d '=' |tr '/+' '_-' >> private_key.txt\n```\n\nIf you can't access a Linux bash, you can print the output of the `createVapidKeys` function:\n\n```php\nvar_dump(VAPID::createVapidKeys()); // store the keys afterwards\n```\n\nOn the client-side, don't forget to subscribe with the VAPID public key as the `applicationServerKey`: (`urlBase64ToUint8Array` source [here](https://github.com/Minishlink/physbook/blob/02a0d5d7ca0d5d2cc6d308a3a9b81244c63b3f14/app/Resources/public/js/app.js#L177))\n\n```js\nserviceWorkerRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: urlBase64ToUint8Array(vapidPublicKey)\n})\n```\n\n#### Reusing VAPID headers\n\nVAPID headers make use of a JSON Web Token (JWT) to verify your identity. That token payload includes the protocol and hostname of the endpoint included in the subscription and an expiration timestamp (usually between 12-24h), and it's signed using your public and private key. Given that, two notifications sent to the same push service will use the same token, so you can reuse them for the same flush session to boost performance using:\n\n```php\n$webPush->setReuseVAPIDHeaders(true);\n```\n\n### Notifications and default options\n\nEach notification can have a specific Time To Live, urgency, and topic.\nThe WebPush standard states that `urgency` is optional but some users reports that Safari throws errors when it is not specified. This might be fixed in the future.\nYou can change the default options with `setDefaultOptions()` or in the constructor:\n\n```php\n<?php\n\nuse Minishlink\\WebPush\\WebPush;\n\n$defaultOptions = [\n    'TTL' => 300, // defaults to 4 weeks\n    'urgency' => 'normal', // protocol defaults to \"normal\". (very-low, low, normal, or high)\n    'topic' => 'newEvent', // not defined by default. Max. 32 characters from the URL or filename-safe Base64 characters sets\n    'batchSize' => 200, // defaults to 1000\n];\n\n// for every notification\n$webPush = new WebPush([], $defaultOptions);\n$webPush->setDefaultOptions($defaultOptions);\n\n// or for one notification\n$webPush->sendOneNotification($subscription, $payload, ['TTL' => 5000]);\n```\n\n#### TTL\n\nTime To Live (TTL, in seconds) is how long a push message is retained by the push service (eg. Mozilla) in case the user browser\nis not yet accessible (eg. is not connected). You may want to use a very long time for important notifications. The default TTL is 4 weeks.\nHowever, if you send multiple nonessential notifications, set a TTL of 0: the push notification will be delivered only\nif the user is currently connected. For other cases, you should use a minimum of one day if your users have multiple time\nzones, and if they don't several hours will suffice.\n\n#### urgency\n\nUrgency can be either \"very-low\", \"low\", \"normal\", or \"high\". If the browser vendor has implemented this feature, it will save battery life on mobile devices (cf. [protocol](https://datatracker.ietf.org/doc/html/rfc8030#section-5.3)).\n\n#### topic\n\nThis string will make the vendor show to the user only the last notification of this topic (cf. [protocol](https://datatracker.ietf.org/doc/html/rfc8030#section-5.4)).\n\n#### batchSize\n\nIf you send tens of thousands notifications at a time, you may get memory overflows due to how endpoints are called in Guzzle.\nIn order to fix this, WebPush sends notifications in batches. The default size is 1000. Depending on your server configuration (memory), you may want\nto decrease this number. Do this while instantiating WebPush or calling `setDefaultOptions`. Or, if you want to customize this for a specific flush, give\nit as a parameter : `$webPush->flush($batchSize)`.\n\n### Server errors\n\nYou can see what the browser vendor's server sends back in case it encountered an error (push subscription expiration, wrong parameters...).\n\n* `sendOneNotification()` returns a [`MessageSentReport`](https://github.com/web-push-libs/web-push-php/blob/master/src/MessageSentReport.php)\n* `flush()` returns a [`\\Generator`](https://www.php.net/manual/en/language.generators.php) with [`MessageSentReport`](https://github.com/web-push-libs/web-push-php/blob/master/src/MessageSentReport.php) objects. To loop through the results, just pass it into `foreach`. You can also use [`iterator_to_array`](https://php.net/manual/en/function.iterator-to-array.php) to check the contents while debugging.\n\n```php\n<?php\n\n/** @var \\Minishlink\\WebPush\\MessageSentReport $report */\nforeach ($webPush->flush() as $report) {\n    $endpoint = $report->getEndpoint();\n\n    if ($report->isSuccess()) {\n        echo \"[v] Message sent successfully for subscription {$endpoint}.\";\n    } else {\n        echo \"[x] Message failed to sent for subscription {$endpoint}: {$report->getReason()}\";\n\n        // also available (to get more info)\n\n        /** @var \\Psr\\Http\\Message\\RequestInterface $requestToPushService */\n        $requestToPushService = $report->getRequest();\n\n        /** @var \\Psr\\Http\\Message\\ResponseInterface $responseOfPushService */\n        $responseOfPushService = $report->getResponse();\n\n        /** @var string $failReason */\n        $failReason = $report->getReason();\n\n        /** @var bool $isTheEndpointWrongOrExpired */\n        $isTheEndpointWrongOrExpired = $report->isSubscriptionExpired();\n    }\n}\n```\n\n**PLEASE NOTE:** You can only iterate **once** over the `\\Generator` object.\n\nFirefox errors are listed in the [autopush documentation](https://mozilla-services.github.io/autopush-rs/errors.html).\n\n### Payload length, security, and performance\n\nPayloads are encrypted by the library. The maximum payload length is theoretically 4078 bytes (or ASCII characters).\nFor [compatibility reasons (archived)](https://github.com/mozilla-services/autopush/issues/748) though, your payload should be less than 3052 bytes long.\n\nThe library pads the payload by default. This is more secure but it decreases performance for both your server and your user's device.\n\n#### Why is it more secure?\n\nWhen you encrypt a string of a certain length, the resulting string will always have the same length,\nno matter how many times you encrypt the initial string. This can make attackers guess the content of the payload.\nIn order to circumvent this, this library adds some null padding to the initial payload, so that all the input of the encryption process\nwill have the same length. This way, all the output of the encryption process will also have the same length and attackers won't be able to\nguess the content of your payload.\n\n#### Why does it decrease performance?\n\nEncrypting more bytes takes more runtime on your server, and also slows down the user's device with decryption. Moreover, sending and receiving the packet will take more time.\nIt's also not very friendly with users who have limited data plans.\n\n#### How can I disable or customize automatic padding?\n\nYou can customize automatic padding in order to better fit your needs.\n\nHere are some ideas of settings:\n\n* (default) `Encryption::MAX_COMPATIBILITY_PAYLOAD_LENGTH` (2820 bytes) for compatibility purposes with Firefox for Android (See [#108](https://github.com/web-push-libs/web-push-php/issues/108))\n* `Encryption::MAX_PAYLOAD_LENGTH` (4078 bytes) for maximum security\n* `false` for maximum performance\n* If you know your payloads will not exceed `X` bytes, then set it to `X` for the best balance between security and performance.\n\n```php\n<?php\n\nuse Minishlink\\WebPush\\WebPush;\n\n$webPush = new WebPush();\n$webPush->setAutomaticPadding(false); // disable automatic padding\n$webPush->setAutomaticPadding(512); // enable automatic padding to 512 bytes (you should make sure that your payload is less than 512 bytes, or else an attacker could guess the content)\n$webPush->setAutomaticPadding(true); // enable automatic padding to default maximum compatibility length\n```\n\n### Customizing the HTTP client\n\nWebPush uses [Guzzle](https://github.com/guzzle/guzzle). It will use the most appropriate client it finds,\nand most of the time it will be `MultiCurl`, which allows to send multiple notifications in parallel.\n\nYou can customize the default request options and timeout when instantiating WebPush:\n\n```php\n<?php\n\nuse Minishlink\\WebPush\\WebPush;\n\n$timeout = 20; // seconds\n$clientOptions = [\n    \\GuzzleHttp\\RequestOptions::ALLOW_REDIRECTS => false,\n]; // see \\GuzzleHttp\\RequestOptions\n$webPush = new WebPush([], [], $timeout, $clientOptions);\n```\n\n## Common questions (FAQ)\n\n### Is there any plugin/bundle/extension for my favorite PHP framework?\n\nThe following are available:\n\n- Symfony:\n    - [MinishlinkWebPushBundle](https://github.com/Minishlink/web-push-bundle)\n    - [bentools/webpush-bundle](https://github.com/bpolaszek/webpush-bundle) (associate your Symfony users to WebPush subscriptions)\n- Laravel: [laravel-notification-channels/webpush](https://github.com/laravel-notification-channels/webpush)\n- WordPress plugin: [Perfecty Push Notifications](https://github.com/rwngallego/perfecty-push-wp/)\n\nFeel free to add your own!\n\n### What about security?\n\nPayload is encrypted according to the [Message Encryption for Web Push](https://datatracker.ietf.org/doc/html/rfc8291) standard,\nusing the user public key and authentication secret that you can get by following the [Web Push API](https://www.w3.org/TR/push-api/) specification.\n\nInternally, WebPush uses the [WebToken](https://github.com/web-token) framework and OpenSSL to handle encryption keys generation and encryption.\n\n### How do I scale?\n\nHere are some ideas:\n\n1. Make sure MultiCurl is available on your server\n2. Find the right balance for your needs between security and performance (see above)\n3. Find the right batch size (set it in `defaultOptions` or as parameter to `flush()`)\n4. Use `flushPooled()` instead of `flush()`. The former uses concurrent requests, accelerating the process and often doubling the speed of the requests.\n\n### How to solve \"SSL certificate problem: unable to get local issuer certificate\"?\n\nYour installation lacks some certificates.\n\n1. Download [cacert.pem](https://curl.haxx.se/ca/cacert.pem).\n2. Edit your `php.ini`: after `[curl]`, type `curl.cainfo = /path/to/cacert.pem`.\n\nYou can also force using a client without peer verification.\n\n### How to solve \"Class 'Minishlink\\WebPush\\WebPush' not found\"\n\nMake sure to require Composer's [autoloader](https://getcomposer.org/doc/01-basic-usage.md#autoloading).\n\n```php\nrequire __DIR__ . '/path/to/vendor/autoload.php';\n```\n\n### I get authentication errors when sending notifications\n\nMake sure to have database fields that are large enough for the length of the data you are storing ([#233](https://github.com/web-push-libs/web-push-php/issues/233#issuecomment-1252617883)). For the endpoint, users have reported that the URL length does not exceed 500 characters, but this can evolve so you can set it to the 2048 characters limit of most browsers.\n\n### I lost my VAPID keys!\n\nSee [issue #58](https://github.com/web-push-libs/web-push-php/issues/58).\n\n### I'm using Google Cloud Messaging (GCM), how do I use this library?\n\nThis service does not exist anymore.\nIt has been superseded by Google's Firebase Cloud Messaging (FCM) on May 29, 2019.\n\n### I'm using Firebase Cloud Messaging (FCM), how do I use this library?\n\nThis library does not support Firebase Cloud Messaging (FCM).\nOld Chrome subscriptions (prior 2018 and VAPID) do use Legacy HTTP protocol by Firebase Cloud Messaging (FCM) which is [deprecated](https://firebase.google.com/support/faq#fcm-23-deprecation) since 2023 and will stop working in June 2024.\nThe support for this outdated subscription is removed.\n\nPlease do not be confused as Legacy HTTP protocol and Web Push with VAPID use the identical endpoint URL:\n\n> https://fcm.googleapis.com/fcm/send\n\nWeb Push with VAPID will remain available at this URL.\nNo further action is currently required.\n\n### How to send data?\n\nThe browser vendors do not allow to send data using the Push API without creating a notification.\nUse some alternative APIs like WebSocket/WebTransport or Background Synchronization.\n\n### I need to send notifications to native apps. (eg. APNS for iOS)\n\nWebPush is for web apps.\nYou need something like [RMSPushNotificationsBundle](https://github.com/richsage/RMSPushNotificationsBundle) (Symfony).\n\n### This is PHP... I need Javascript!\n\nThis library was inspired by the Node.js [web-push-libs/web-push](https://github.com/web-push-libs/web-push) library.\n\n## Reference\n\n### Examples, Notes and Overviews\n\n- Google's [introduction to push notifications](https://web.dev/explore/notifications)\n- Mozilla [Push API (browser side)](https://developer.mozilla.org/en-US/docs/Web/API/Push_API)\n- Apple [Safari](https://developer.apple.com/documentation/usernotifications/sending_web_push_notifications_in_web_apps_and_browsers)\n- (Archive) Matthew Gaunt's [Web Push Book](https://web-push-book.gauntface.com)\n- (Archive) Mozilla's [ServiceWorker Cookbooks](https://github.com/mdn/serviceworker-cookbook/blob/master/push-payload/README.md) (don't mind the `server.js` file: it should be replaced by your PHP server code with this library)\n\n### Internet Engineering Task Force (IETF)\n\n- Generic Event Delivery Using HTTP Push [RFC8030](https://www.rfc-editor.org/rfc/rfc8030.html)\n- Message Encryption for Web Push [RFC8291](https://www.rfc-editor.org/rfc/rfc8291)\n- Voluntary Application Server Identification (VAPID) for Web Push [RFC8292](https://www.rfc-editor.org/rfc/rfc8292)\n\n### W3C\n\n- Working Draft [Push API](https://www.w3.org/TR/push-api/)\n\n## License\n\n[MIT](https://github.com/web-push-libs/web-push-php/blob/master/LICENSE)\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.533203125,
          "content": "{\n  \"name\": \"minishlink/web-push\",\n  \"type\": \"library\",\n  \"description\": \"Web Push library for PHP\",\n  \"keywords\": [\n    \"push\",\n    \"notifications\",\n    \"web\",\n    \"WebPush\",\n    \"Push API\"\n  ],\n  \"homepage\": \"https://github.com/web-push-libs/web-push-php\",\n  \"license\": \"MIT\",\n  \"authors\": [\n    {\n      \"name\": \"Louis Lagrange\",\n      \"email\": \"lagrange.louis@gmail.com\",\n      \"homepage\": \"https://github.com/Minishlink\"\n    }\n  ],\n  \"scripts\": {\n    \"fix:syntax\": \"./vendor/bin/php-cs-fixer fix ./src --using-cache=no\",\n    \"fix:syntax_tests\": \"./vendor/bin/php-cs-fixer fix ./tests --using-cache=no\",\n    \"test:unit\": \"./vendor/bin/phpunit\",\n    \"test:unit_offline\": \"./vendor/bin/phpunit --exclude-group=online\",\n    \"test:typing\": \"./vendor/bin/phpstan analyse\",\n    \"test:syntax\": \"./vendor/bin/php-cs-fixer fix ./src --dry-run --stop-on-violation --using-cache=no\",\n    \"test:syntax_tests\": \"./vendor/bin/php-cs-fixer fix ./tests --dry-run --stop-on-violation --using-cache=no\"\n  },\n  \"require\": {\n    \"php\": \">=8.1\",\n    \"ext-curl\": \"*\",\n    \"ext-json\": \"*\",\n    \"ext-mbstring\": \"*\",\n    \"ext-openssl\": \"*\",\n    \"guzzlehttp/guzzle\": \"^7.4.5\",\n    \"web-token/jwt-library\": \"^3.3.0|^4.0.0\",\n    \"spomky-labs/base64url\": \"^2.0.4\"\n  },\n  \"suggest\": {\n    \"ext-bcmath\": \"Optional for performance.\",\n    \"ext-gmp\": \"Optional for performance.\"\n  },\n  \"require-dev\": {\n    \"phpunit/phpunit\": \"^10.5.9\",\n    \"phpstan/phpstan\": \"^1.10.57\",\n    \"friendsofphp/php-cs-fixer\": \"^v3.48.0\"\n  },\n  \"autoload\": {\n    \"psr-4\": {\n      \"Minishlink\\\\WebPush\\\\\": \"src\"\n    }\n  }\n}\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.220703125,
          "content": "parameters:\n    level: 7\n    paths:\n        - src\n    reportUnmatchedIgnoredErrors: false\n    ignoreErrors:\n        - '#Unreachable statement \\- code above always terminates\\.#'\n        - identifier: missingType.iterableValue\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 1.013671875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticProperties=\"false\"\n         bootstrap=\"vendor/autoload.php\"\n         cacheDirectory=\".phpunit.cache\"\n         colors=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.5/phpunit.xsd\"\n>\n    <source ignoreSuppressionOfDeprecations=\"true\"\n            ignoreSuppressionOfPhpDeprecations=\"true\"\n            ignoreSuppressionOfErrors=\"true\"\n            ignoreSuppressionOfNotices=\"true\"\n            ignoreSuppressionOfPhpNotices=\"true\"\n            ignoreSuppressionOfWarnings=\"true\"\n            ignoreSuppressionOfPhpWarnings=\"true\"\n    >\n        <include>\n            <directory>src</directory>\n        </include>\n    </source>\n    <testsuites>\n        <testsuite name=\"WebPush Test Suite\">\n            <directory suffix=\".php\">./tests/</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}