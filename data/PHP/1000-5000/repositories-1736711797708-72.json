{
  "metadata": {
    "timestamp": 1736711797708,
    "page": 72,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "symfony/polyfill-ctype",
      "stars": 4056,
      "defaultBranch": "1.x",
      "files": [
        {
          "name": "Ctype.php",
          "type": "blob",
          "size": 6.4326171875,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Polyfill\\Ctype;\n\n/**\n * Ctype implementation through regex.\n *\n * @internal\n *\n * @author Gert de Pagter <BackEndTea@gmail.com>\n */\nfinal class Ctype\n{\n    /**\n     * Returns TRUE if every character in text is either a letter or a digit, FALSE otherwise.\n     *\n     * @see https://php.net/ctype-alnum\n     *\n     * @param mixed $text\n     *\n     * @return bool\n     */\n    public static function ctype_alnum($text)\n    {\n        $text = self::convert_int_to_char_for_ctype($text, __FUNCTION__);\n\n        return \\is_string($text) && '' !== $text && !preg_match('/[^A-Za-z0-9]/', $text);\n    }\n\n    /**\n     * Returns TRUE if every character in text is a letter, FALSE otherwise.\n     *\n     * @see https://php.net/ctype-alpha\n     *\n     * @param mixed $text\n     *\n     * @return bool\n     */\n    public static function ctype_alpha($text)\n    {\n        $text = self::convert_int_to_char_for_ctype($text, __FUNCTION__);\n\n        return \\is_string($text) && '' !== $text && !preg_match('/[^A-Za-z]/', $text);\n    }\n\n    /**\n     * Returns TRUE if every character in text is a control character from the current locale, FALSE otherwise.\n     *\n     * @see https://php.net/ctype-cntrl\n     *\n     * @param mixed $text\n     *\n     * @return bool\n     */\n    public static function ctype_cntrl($text)\n    {\n        $text = self::convert_int_to_char_for_ctype($text, __FUNCTION__);\n\n        return \\is_string($text) && '' !== $text && !preg_match('/[^\\x00-\\x1f\\x7f]/', $text);\n    }\n\n    /**\n     * Returns TRUE if every character in the string text is a decimal digit, FALSE otherwise.\n     *\n     * @see https://php.net/ctype-digit\n     *\n     * @param mixed $text\n     *\n     * @return bool\n     */\n    public static function ctype_digit($text)\n    {\n        $text = self::convert_int_to_char_for_ctype($text, __FUNCTION__);\n\n        return \\is_string($text) && '' !== $text && !preg_match('/[^0-9]/', $text);\n    }\n\n    /**\n     * Returns TRUE if every character in text is printable and actually creates visible output (no white space), FALSE otherwise.\n     *\n     * @see https://php.net/ctype-graph\n     *\n     * @param mixed $text\n     *\n     * @return bool\n     */\n    public static function ctype_graph($text)\n    {\n        $text = self::convert_int_to_char_for_ctype($text, __FUNCTION__);\n\n        return \\is_string($text) && '' !== $text && !preg_match('/[^!-~]/', $text);\n    }\n\n    /**\n     * Returns TRUE if every character in text is a lowercase letter.\n     *\n     * @see https://php.net/ctype-lower\n     *\n     * @param mixed $text\n     *\n     * @return bool\n     */\n    public static function ctype_lower($text)\n    {\n        $text = self::convert_int_to_char_for_ctype($text, __FUNCTION__);\n\n        return \\is_string($text) && '' !== $text && !preg_match('/[^a-z]/', $text);\n    }\n\n    /**\n     * Returns TRUE if every character in text will actually create output (including blanks). Returns FALSE if text contains control characters or characters that do not have any output or control function at all.\n     *\n     * @see https://php.net/ctype-print\n     *\n     * @param mixed $text\n     *\n     * @return bool\n     */\n    public static function ctype_print($text)\n    {\n        $text = self::convert_int_to_char_for_ctype($text, __FUNCTION__);\n\n        return \\is_string($text) && '' !== $text && !preg_match('/[^ -~]/', $text);\n    }\n\n    /**\n     * Returns TRUE if every character in text is printable, but neither letter, digit or blank, FALSE otherwise.\n     *\n     * @see https://php.net/ctype-punct\n     *\n     * @param mixed $text\n     *\n     * @return bool\n     */\n    public static function ctype_punct($text)\n    {\n        $text = self::convert_int_to_char_for_ctype($text, __FUNCTION__);\n\n        return \\is_string($text) && '' !== $text && !preg_match('/[^!-\\/\\:-@\\[-`\\{-~]/', $text);\n    }\n\n    /**\n     * Returns TRUE if every character in text creates some sort of white space, FALSE otherwise. Besides the blank character this also includes tab, vertical tab, line feed, carriage return and form feed characters.\n     *\n     * @see https://php.net/ctype-space\n     *\n     * @param mixed $text\n     *\n     * @return bool\n     */\n    public static function ctype_space($text)\n    {\n        $text = self::convert_int_to_char_for_ctype($text, __FUNCTION__);\n\n        return \\is_string($text) && '' !== $text && !preg_match('/[^\\s]/', $text);\n    }\n\n    /**\n     * Returns TRUE if every character in text is an uppercase letter.\n     *\n     * @see https://php.net/ctype-upper\n     *\n     * @param mixed $text\n     *\n     * @return bool\n     */\n    public static function ctype_upper($text)\n    {\n        $text = self::convert_int_to_char_for_ctype($text, __FUNCTION__);\n\n        return \\is_string($text) && '' !== $text && !preg_match('/[^A-Z]/', $text);\n    }\n\n    /**\n     * Returns TRUE if every character in text is a hexadecimal 'digit', that is a decimal digit or a character from [A-Fa-f] , FALSE otherwise.\n     *\n     * @see https://php.net/ctype-xdigit\n     *\n     * @param mixed $text\n     *\n     * @return bool\n     */\n    public static function ctype_xdigit($text)\n    {\n        $text = self::convert_int_to_char_for_ctype($text, __FUNCTION__);\n\n        return \\is_string($text) && '' !== $text && !preg_match('/[^A-Fa-f0-9]/', $text);\n    }\n\n    /**\n     * Converts integers to their char versions according to normal ctype behaviour, if needed.\n     *\n     * If an integer between -128 and 255 inclusive is provided,\n     * it is interpreted as the ASCII value of a single character\n     * (negative values have 256 added in order to allow characters in the Extended ASCII range).\n     * Any other integer is interpreted as a string containing the decimal digits of the integer.\n     *\n     * @param mixed  $int\n     * @param string $function\n     *\n     * @return mixed\n     */\n    private static function convert_int_to_char_for_ctype($int, $function)\n    {\n        if (!\\is_int($int)) {\n            return $int;\n        }\n\n        if ($int < -128 || $int > 255) {\n            return (string) $int;\n        }\n\n        if (\\PHP_VERSION_ID >= 80100) {\n            @trigger_error($function.'(): Argument of type int will be interpreted as string in the future', \\E_USER_DEPRECATED);\n        }\n\n        if ($int < 0) {\n            $int += 256;\n        }\n\n        return \\chr($int);\n    }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2018-present Fabien Potencier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.341796875,
          "content": "Symfony Polyfill / Ctype\n========================\n\nThis component provides `ctype_*` functions to users who run php versions without the ctype extension.\n\nMore information can be found in the\n[main Polyfill README](https://github.com/symfony/polyfill/blob/main/README.md).\n\nLicense\n=======\n\nThis library is released under the [MIT license](LICENSE).\n"
        },
        {
          "name": "bootstrap.php",
          "type": "blob",
          "size": 1.5625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nuse Symfony\\Polyfill\\Ctype as p;\n\nif (\\PHP_VERSION_ID >= 80000) {\n    return require __DIR__.'/bootstrap80.php';\n}\n\nif (!function_exists('ctype_alnum')) {\n    function ctype_alnum($text) { return p\\Ctype::ctype_alnum($text); }\n}\nif (!function_exists('ctype_alpha')) {\n    function ctype_alpha($text) { return p\\Ctype::ctype_alpha($text); }\n}\nif (!function_exists('ctype_cntrl')) {\n    function ctype_cntrl($text) { return p\\Ctype::ctype_cntrl($text); }\n}\nif (!function_exists('ctype_digit')) {\n    function ctype_digit($text) { return p\\Ctype::ctype_digit($text); }\n}\nif (!function_exists('ctype_graph')) {\n    function ctype_graph($text) { return p\\Ctype::ctype_graph($text); }\n}\nif (!function_exists('ctype_lower')) {\n    function ctype_lower($text) { return p\\Ctype::ctype_lower($text); }\n}\nif (!function_exists('ctype_print')) {\n    function ctype_print($text) { return p\\Ctype::ctype_print($text); }\n}\nif (!function_exists('ctype_punct')) {\n    function ctype_punct($text) { return p\\Ctype::ctype_punct($text); }\n}\nif (!function_exists('ctype_space')) {\n    function ctype_space($text) { return p\\Ctype::ctype_space($text); }\n}\nif (!function_exists('ctype_upper')) {\n    function ctype_upper($text) { return p\\Ctype::ctype_upper($text); }\n}\nif (!function_exists('ctype_xdigit')) {\n    function ctype_xdigit($text) { return p\\Ctype::ctype_xdigit($text); }\n}\n"
        },
        {
          "name": "bootstrap80.php",
          "type": "blob",
          "size": 1.611328125,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nuse Symfony\\Polyfill\\Ctype as p;\n\nif (!function_exists('ctype_alnum')) {\n    function ctype_alnum(mixed $text): bool { return p\\Ctype::ctype_alnum($text); }\n}\nif (!function_exists('ctype_alpha')) {\n    function ctype_alpha(mixed $text): bool { return p\\Ctype::ctype_alpha($text); }\n}\nif (!function_exists('ctype_cntrl')) {\n    function ctype_cntrl(mixed $text): bool { return p\\Ctype::ctype_cntrl($text); }\n}\nif (!function_exists('ctype_digit')) {\n    function ctype_digit(mixed $text): bool { return p\\Ctype::ctype_digit($text); }\n}\nif (!function_exists('ctype_graph')) {\n    function ctype_graph(mixed $text): bool { return p\\Ctype::ctype_graph($text); }\n}\nif (!function_exists('ctype_lower')) {\n    function ctype_lower(mixed $text): bool { return p\\Ctype::ctype_lower($text); }\n}\nif (!function_exists('ctype_print')) {\n    function ctype_print(mixed $text): bool { return p\\Ctype::ctype_print($text); }\n}\nif (!function_exists('ctype_punct')) {\n    function ctype_punct(mixed $text): bool { return p\\Ctype::ctype_punct($text); }\n}\nif (!function_exists('ctype_space')) {\n    function ctype_space(mixed $text): bool { return p\\Ctype::ctype_space($text); }\n}\nif (!function_exists('ctype_upper')) {\n    function ctype_upper(mixed $text): bool { return p\\Ctype::ctype_upper($text); }\n}\nif (!function_exists('ctype_xdigit')) {\n    function ctype_xdigit(mixed $text): bool { return p\\Ctype::ctype_xdigit($text); }\n}\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.9384765625,
          "content": "{\n    \"name\": \"symfony/polyfill-ctype\",\n    \"type\": \"library\",\n    \"description\": \"Symfony polyfill for ctype functions\",\n    \"keywords\": [\"polyfill\", \"compatibility\", \"portable\", \"ctype\"],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Gert de Pagter\",\n            \"email\": \"BackEndTea@gmail.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=7.2\"\n    },\n    \"provide\": {\n        \"ext-ctype\": \"*\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Polyfill\\\\Ctype\\\\\": \"\" },\n        \"files\": [ \"bootstrap.php\" ]\n    },\n    \"suggest\": {\n        \"ext-ctype\": \"For best performance\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"extra\": {\n        \"thanks\": {\n            \"name\": \"symfony/polyfill\",\n            \"url\": \"https://github.com/symfony/polyfill\"\n        }\n    }\n}\n"
        }
      ]
    }
  ]
}