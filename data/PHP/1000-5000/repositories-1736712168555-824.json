{
  "metadata": {
    "timestamp": 1736712168555,
    "page": 824,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spatie/schema-org",
      "stars": 1364,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3046875,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.572265625,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/.github                 export-ignore\n/.gitattributes          export-ignore\n/.gitignore              export-ignore\n/phpunit.xml.dist        export-ignore\n/psalm.xml.dist          export-ignore\n/tests                   export-ignore\n/.editorconfig           export-ignore\n/.php-cs-fixer.dist.php  export-ignore\n/art                     export-ignore\n/docs                    export-ignore\n/UPGRADING.md            export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1298828125,
          "content": ".idea\n.php_cs\n.php_cs.cache\n.phpunit.result.cache\nbuild\ncomposer.lock\ncoverage\ndocs\nphpunit.xml\npsalm.xml\nvendor\n.php-cs-fixer.cache\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 1.2294921875,
          "content": "<?php\n\n$finder = Symfony\\Component\\Finder\\Finder::create()\n    ->in([\n        __DIR__ . '/src',\n        __DIR__ . '/tests',\n    ])\n    ->name('*.php')\n    ->ignoreDotFiles(true)\n    ->ignoreVCS(true);\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@PSR12' => true,\n        'array_syntax' => ['syntax' => 'short'],\n        'ordered_imports' => ['sort_algorithm' => 'alpha'],\n        'no_unused_imports' => true,\n        'not_operator_with_successor_space' => true,\n        'trailing_comma_in_multiline' => true,\n        //'phpdoc_scalar' => true,\n        'unary_operator_spaces' => true,\n        'binary_operator_spaces' => true,\n        'blank_line_before_statement' => [\n            'statements' => ['break', 'continue', 'declare', 'return', 'throw', 'try'],\n        ],\n        //'phpdoc_single_line_var_spacing' => true,\n        //'phpdoc_var_without_name' => true,\n        'class_attributes_separation' => [\n            'elements' => [\n                'method' => 'one',\n            ],\n        ],\n        'method_argument_space' => [\n            'on_multiline' => 'ensure_fully_multiline',\n            'keep_multiple_spaces_after_comma' => true,\n        ],\n        'single_trait_insert_per_statement' => true,\n    ])\n    ->setFinder($finder);\n"
        },
        {
          "name": ".styleci.yml",
          "type": "blob",
          "size": 0.095703125,
          "content": "preset: laravel\n\ndisabled:\n  - single_class_element_per_statement\n\nfinder:\n  exclude:\n    - \"src\"\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 9.326171875,
          "content": "# Changelog\n\nAll Notable changes to `schema-org` will be documented in this file.\n\n## 3.23.0 - 2024-01-11\n\n### What's Changed\n\n* Update generator to use schema v24 by @indyjonesnl in https://github.com/spatie/schema-org/pull/201\n* Schema 24 by @Gummibeer in https://github.com/spatie/schema-org/pull/213\n\n### New Contributors\n\n* @indyjonesnl made their first contribution in https://github.com/spatie/schema-org/pull/201\n\n**Full Changelog**: https://github.com/spatie/schema-org/compare/3.22.0...3.23.0\n\n## 3.22.0 - 2024-01-11\n\n### What's Changed\n\n* upgrade to schema.org v23 by @Gummibeer in https://github.com/spatie/schema-org/pull/212\n\n**Full Changelog**: https://github.com/spatie/schema-org/compare/3.21.0...3.22.0\n\n## 3.21.0 - 2024-01-11\n\n### What's Changed\n\n* upgrade to schema.org v22 by @Gummibeer in https://github.com/spatie/schema-org/pull/211\n\n**Full Changelog**: https://github.com/spatie/schema-org/compare/3.20.0...3.21.0\n\n## 3.20.0 - 2024-01-11\n\n### What's Changed\n\n* upgrade to schema.org v21 by @Gummibeer in https://github.com/spatie/schema-org/pull/210\n\n**Full Changelog**: https://github.com/spatie/schema-org/compare/3.19.0...3.20.0\n\n## 3.19.0 - 2024-01-11\n\n### What's Changed\n\n* upgrade to schema.org v20 by @Gummibeer in https://github.com/spatie/schema-org/pull/209\n\n**Full Changelog**: https://github.com/spatie/schema-org/compare/3.18.0...3.19.0\n\n## 3.18.0 - 2024-01-11\n\n### What's Changed\n\n* upgrade to schema.org v19 by @Gummibeer in https://github.com/spatie/schema-org/pull/208\n\n**Full Changelog**: https://github.com/spatie/schema-org/compare/3.17.0...3.18.0\n\n## 3.17.0 - 2024-01-11\n\n### What's Changed\n\n* upgrade to schema.org v18 by @Gummibeer in https://github.com/spatie/schema-org/pull/207\n\n**Full Changelog**: https://github.com/spatie/schema-org/compare/3.16.0...3.17.0\n\n## 3.16.0 - 2024-01-11\n\n### What's Changed\n\n* upgrade to schema.org v17 by @Gummibeer in https://github.com/spatie/schema-org/pull/206\n\n**Full Changelog**: https://github.com/spatie/schema-org/compare/3.15.0...3.16.0\n\n## 3.15.0 - 2024-01-11\n\n### What's Changed\n\n* upgrade to schema.org v16 by @Gummibeer in https://github.com/spatie/schema-org/pull/204\n* add support/test-run for php8.3 by @Gummibeer in https://github.com/spatie/schema-org/pull/205\n\n**Full Changelog**: https://github.com/spatie/schema-org/compare/3.14.0...3.15.0\n\n## 3.14.0 - 2023-02-14\n\n### What's Changed\n\n- Add PHP 8.2 Support by @patinthehat in https://github.com/spatie/schema-org/pull/190\n- Add support for nonce attribute by @smortexa in https://github.com/spatie/schema-org/pull/191\n\n### New Contributors\n\n- @patinthehat made their first contribution in https://github.com/spatie/schema-org/pull/190\n- @smortexa made their first contribution in https://github.com/spatie/schema-org/pull/191\n\n**Full Changelog**: https://github.com/spatie/schema-org/compare/3.13.0...3.14.0\n\n## 3.13.0 - 2022-11-14\n\n### What's Changed\n\n- add support for complex context by @Gummibeer in https://github.com/spatie/schema-org/pull/189\n\n**Full Changelog**: https://github.com/spatie/schema-org/compare/3.12.0...3.13.0\n\n## 3.12.0 - 2022-11-14\n\n### What's Changed\n\n- Update generator to use schema v15 by @osopolar in https://github.com/spatie/schema-org/pull/188\n\n### New Contributors\n\n- @osopolar made their first contribution in https://github.com/spatie/schema-org/pull/188\n\n**Full Changelog**: https://github.com/spatie/schema-org/compare/3.11.0...3.12.0\n\n## 3.11.0 - 2022-04-11\n\n## What's Changed\n\n- Rewrite tests to use pest instead of phpunit by @otsch in https://github.com/spatie/schema-org/pull/179\n- upgrade to schema:v14 by @Gummibeer in https://github.com/spatie/schema-org/pull/181\n\n## New Contributors\n\n- @otsch made their first contribution in https://github.com/spatie/schema-org/pull/179\n\n**Full Changelog**: https://github.com/spatie/schema-org/compare/3.10.0...3.11.0\n\n## 3.10.0 - 2022-03-04\n\n- Drop PHP 7.4 Support - [#174](https://github.com/spatie/schema-org/pull/174)\n- Add PHP 8.1 Support - [#174](https://github.com/spatie/schema-org/pull/174)\n\n## 3.10.0 - 2022-03-04\n\n- Drop PHP 7.4 Support - [#174](https://github.com/spatie/schema-org/pull/174)\n- Add PHP 8.1 Support - [#174](https://github.com/spatie/schema-org/pull/174)\n\n## 3.9.0 - 2022-02-10\n\n- Add support for Laravel 9 - [#176](https://github.com/spatie/schema-org/pull/176)\n\n## 3.8.0 - 2021-10-20\n\n- Upgrade to schema.org:v13.0 - [#167](https://github.com/spatie/schema-org/pull/167)\n\n## 3.7.0 - 2021-10-06\n\n- Upgrade to schema.org:v12.0 - [#170](https://github.com/spatie/schema-org/pull/170)\n\n## 3.6.0 - 2021-10-06\n\n- Upgrade to schema.org:v11.01 - [#169](https://github.com/spatie/schema-org/pull/169)\n\n## 3.5.0 - 2021-10-05\n\n- Upgrade to schema.org:v10 - [#166](https://github.com/spatie/schema-org/pull/166)\n- Drop PHP 7.3 support - [#165](https://github.com/spatie/schema-org/pull/165)\n- Add PHP 8.1 support - [#165](https://github.com/spatie/schema-org/pull/165)\n\n## 3.4.0 - 2021-05-10\n\n- Add custom `\\Spatie\\SchemaOrg\\Graph` context support - [#160](https://github.com/spatie/schema-org/pull/160)\n\n## 3.3.0 - 2021-01-02\n\n- Fix `@id` and `identifier` serialization for typed identifiers - [#157](https://github.com/spatie/schema-org/pull/157)\n\n## 3.2.1 - 2020-11-28\n\n- Add PHP 8.0 support\n\n## 3.2.0 - 2020-11-05\n\n- Add `\\Spatie\\SchemaOrg\\ReferencedType` to reference types in schemas and graphs - [#155](https://github.com/spatie/schema-org/pull/155)\n\n## 3.1.1 - 2020-10-22\n\n- Fix empty string property values - [#153](https://github.com/spatie/schema-org/pull/153)\n\n## 3.1.0 - 2020-10-07\n\n- Add Multi-Typed-Entity support `\\Spatie\\SchemaOrg\\MultiTypedEntity` - [#148](https://github.com/spatie/schema-org/pull/148)\n\n## 3.0.0 - 2020-08-27\n\n- Upgrade to schema.org:v9 which includes all extensions\n\n## 2.16.0 - 2020-08-27\n\n- Upgrade to schema.org:v8\n\n## 2.15.0 - 2020-08-27\n\nGenerated files with new JSON-LD source - some methods have been dropped which aren't part of the corresponding types but were listed in old RDFa - it's not a breaking release because of the same schema.org version and changes only because of schema file inconsistencies.\n\n## 2.14.1 - 2020-06-10\n\n- Fix `\\BadMethodCallException` message thrown in `\\Spatie\\SchemaOrg\\Graph`\n- Fix `\\Spatie\\SchemaOrg\\Graph` docblock `@method` annotations\n\n## 2.14.0 - 2020-06-03\n\n- Add identifiers to `\\Spatie\\SchemaOrg\\Graph` nodes [#124](https://github.com/spatie/schema-org/pull/124)\n\n## 2.13.0 - 2020-04-17\n\n- RDFa update\n\n## 2.12.1 - 2020-03-17\n\n- Fix after malformed RDFa import [twitter.com/ScreamingDev](https://twitter.com/ScreamingDev/status/1239859471335243779)\n\n## 2.12.0 - 2020-01-23\n\n- RDFa update\n\n## 2.11.1 - 2019-11-18\n\n- Fix types to implement their own contract\n\n## 2.11.0 - 2019-11-18\n\n- Use contracts as type-hints in doc-blocks\n\n## 2.10.0 - 2019-11-12\n\n- Add PHP 7.4 support\n- Fix `Graph` magic call\n- RDFa update\n\n## 2.9.0 - 2019-10-06\n\n- Drop PHP 7.2 support\n\n## 2.8.0 - 2019-10-06\n\n- Drop PHP 7.1 support\n\n## 2.7.0 - 2019-10-06\n\n- Drop PHP 7.0 support\n\n## 2.6.0 - 2019-09-26\n\n- Fix identifier serialization\n\n## 2.5.0 - 2019-09-25\n\n- Add reflection support\n\n## 2.4.0 - 2019-09-25\n\n- RDFa update\n\n## 2.3.0 - 2019-08-07\n\n- Fix null values\n\n## 2.2.1 - 2019-05-28\n\n- Fix pending Types\n\n## 2.2.0 - 2019-05-28\n\n- RDFa update\n\n## 2.1.0 - 2019-01-18\n\n- Add `Graph` support\n\n## 2.0.3 - 2018-10-18\n\n- Convert invalid objects that have a `__toString` method to strings\n\n## 2.0.2 - 2018-06-25\n\n- Fix previous release\n\n## 2.0.1 - 2018-06-25\n\n- Use `https` protocol for Schema.org links\n\n## 2.0.0 - 2018-06-08\n\n- Supports multiple type inheritance. Types no longer extend each other, they all are a direct extension of `BaseType`\n- This release probably doesn't contain any breaking changes for most people. It breaks all type checks (e.g. `instanceof LocalBusiness`), but doesn't change the way types are generated\n\n## 1.7.0 - 2018-06-08\n\n- Regenerated types\n\n## 1.6.0 - 2018-05-22\n\n- Added: `Enumeration` child types with constants, e.g. `Spatie\\Schema\\DayOfWeek::Monday`.\n\n## 1.5.0 - 2018-05-03\n\n- Added: All types are now json serializable and have array access\n\n## 1.4.2 - 2018-03-28\n\n- Fixed: Date format in schemas is now ISO8601 (`DateTime::ATOM`)\n\n## 1.4.1 - 2017-12-11\n\n- Fixed: `@param` hints for numbers (`float|int`)\n\n## 1.4.0 - 2017-09-26\n\n- Added: `BaseType::addProperties` method to add multiple properties in one go\n- Fixed: `@param` hints now also have array versions of the accepted data types, like `string|string[]`\n\n## 1.3.0 - 2017-05-08\n\n- Added: `__call` catches unknown methods and calls `setProperty` under the hood, using the method name as the property name and the first argument as property value\n- Added (by updating generated types): `CreativeWork::accessMode`, `CreativeWork::accessModeSufficient`, `CreativeWork::accessibilitySummary`, `Event::audience`, `FoodEstablishment::hasMenu`\n- Removed (by updating generated types, note that this isn't breaking because `__call` will catch your method calls): `Menu::menuAddOn`\n\n## 1.2.1 - 2017-02-20\n\n- Fixed: New lines are considered and no longer break docs\n- Fixed: HTML line breaks are removed from the docs\n\n## 1.2.0 - 2017-02-07\n\n- Added: Objects that implements `DateTimeInterface` are now formatted to an ISO 8601 compliant string\n- Fixed: Some properties were missing due to some whitespace parsing issues\n\n## 1.1.0 - 2017-01-03\n\n- Added: `if` function to conditionally modify the schema\n\n## 1.0.1 - 2017-01-03\n\n- Fixed: Arrays of properties are now correctly serialized when converted to ld+json\n\n## 1.0.0 - 2016-12-06\n\n- Initial release\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.1025390625,
          "content": "# The MIT License (MIT)\n\nCopyright (c) 2017 Spatie bvba <info@spatie.be>\n\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the \"Software\"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in\n> all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n> THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.4052734375,
          "content": "\n[<img src=\"https://github-ads.s3.eu-central-1.amazonaws.com/support-ukraine.svg?t=1\" />](https://supportukrainenow.org)\n\n# A Fluent Builder For Schema.org Types And ld+json Generator\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/spatie/schema-org.svg?style=flat-square)](https://packagist.org/packages/spatie/schema-org)\n[![MIT License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE.md)\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/spatie/schema-org/run-tests?style=flat-square&logoColor=white&logo=github&label=Tests)](https://github.com/spatie/schema-org/actions?query=workflow%3Arun-tests)\n[![StyleCI](https://styleci.io/repos/74684096/shield?branch=master)](https://styleci.io/repos/74684096)\n[![Total Downloads](https://img.shields.io/packagist/dt/spatie/schema-org.svg?style=flat-square)](https://packagist.org/packages/spatie/schema-org)\n\n`spatie/schema-org` provides a fluent builder for **all** Schema.org types and their properties. The code in `src` is generated from Schema.org's [JSON-LD standards file](https://raw.githubusercontent.com/schemaorg/schemaorg/main/data/releases/13.0/schemaorg-all-https.jsonld), so it provides objects and methods for the entire core vocabulary. The classes and methods are also fully documented as a quick reference.\n\n```php\nuse Spatie\\SchemaOrg\\Schema;\n\n$localBusiness = Schema::localBusiness()\n    ->name('Spatie')\n    ->email('info@spatie.be')\n    ->contactPoint(Schema::contactPoint()->areaServed('Worldwide'));\n\necho $localBusiness->toScript();\n```\n\n```html\n<script type=\"application/ld+json\">\n{\n    \"@context\": \"https:\\/\\/schema.org\",\n    \"@type\": \"LocalBusiness\",\n    \"name\": \"Spatie\",\n    \"email\": \"info@spatie.be\",\n    \"contactPoint\": {\n        \"@type\": \"ContactPoint\",\n        \"areaServed\": \"Worldwide\"\n    }\n}\n</script>\n```\n\n## Support us\n\n[<img src=\"https://github-ads.s3.eu-central-1.amazonaws.com/schema-org.jpg?t=1\" width=\"419px\" />](https://spatie.be/github-ad-click/schema-org)\n\nWe invest a lot of resources into creating [best in class open source packages](https://spatie.be/open-source). You can support us by [buying one of our paid products](https://spatie.be/open-source/support-us).\n\nWe highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You'll find our address on [our contact page](https://spatie.be/about-us). We publish all received postcards on [our virtual postcard wall](https://spatie.be/open-source/postcards).\n\n## Installation\n\nYou can install the package via composer:\n\n``` bash\ncomposer require spatie/schema-org\n```\n\n## Usage\n\nAll types can be instantiated through the `Spatie\\SchemaOrg\\Schema` factory class, or with the `new` keyword.\n\n``` php\n$localBusiness = Schema::localBusiness()->name('Spatie');\n\n// Is equivalent to:\n\n$localBusiness = new LocalBusiness();\n$localBusiness->name('Spatie');\n```\n\n> *All types also accept arrays of the expected data type, for example `sameAs` accepts a string or an array of strings.*\n\nAll types also implement the SPL's `ArrayAccess` for accessing the properties via array notation:\n\n```php\n$anotherLocalBusiness = new LocalBusiness();\nvar_dump(isset($anotherLocalBusiness['name'])); // => false\n$anotherLocalBusiness['name'] = 'Spatie';\nvar_dump(isset($anotherLocalBusiness['name'])); // => true\nvar_dump($anotherLocalBusiness['name']); // => 'Spatie'\nunset($anotherLocalBusiness['name']);\nvar_dump(isset($anotherLocalBusiness['name'])); // => false\n```\n\nTypes can be converted to an array or rendered to a script.\n\n```php\n$localBusiness->toArray();\n\necho $localBusiness->toScript();\n\necho $localBusiness; // Same output as `toScript()`\n```\n\nAdditionally, all types can be converted to a plain JSON string by just calling `json_encode()` with your object:\n\n```php\necho json_encode($localBusiness);\n```\n\nI recommend double checking your structured data with [Google's structured data testing tool](https://search.google.com/structured-data/testing-tool).\n\n### Enumerations\n\nAs of v1.6.0, all [Enumeration](https://schema.org/Enumeration) child types are available as classes with constants.\n\n```php\nSchema::book()->bookFormat(Spatie\\SchemaOrg\\BookFormatType::Hardcover);\n```\n\nThere's no full API documentation for types and properties. You can refer to [the source](https://github.com/spatie/schema-org/tree/master/src) or to [the schema.org website](https://schema.org).\n\nIf you don't want to break the chain of a large schema object, you can use the `if` method to conditionally modify the schema.\n\n```php\nuse Spatie\\SchemaOrg\\LocalBusiness;\nuse Spatie\\SchemaOrg\\Schema;\n\n$business = ['name' => 'Spatie'];\n\n$localBusiness = Schema::localBusiness()\n    ->name($business['name'])\n    ->if(isset($business['email']), function (LocalBusiness $schema) use ($business) {\n        $schema->email($business['email']);\n    });\n```\n\n### Identifier\n\nAs of v2.6.0 the `identifier` key is replaced by `@id` for simple string identifiers. This is due to the definition for the `ld+json` syntax.\n\n> All schema.org syntaxes already have built-in representation for URIs and URLs, e.g. in Microdata 'itemid', in RDFa 1.1, 'resource', **in JSON-LD, '@id'.**\n> \n> &mdash; [schema.org/docs](https://schema.org/docs/datamodel.html#identifierBg) // [PR#102](https://github.com/spatie/schema-org/pull/102)  // [PR#157](https://github.com/spatie/schema-org/pull/157) \n\n### Advanced Usage\n\nIf you'd need to set a custom property, you can use the `setProperty` method.\n\n```php\n$localBusiness->setProperty('foo', 'bar');\n```\n\nIf you'd need to retrieve a property, you can use the `getProperty` method. You can optionally pass in a second parameter to provide a default value.\n\n```php\n$localBusiness->getProperty('name'); // 'Spatie'\n$localBusiness->getProperty('bar'); // null\n$localBusiness->getProperty('bar', 'baz'); // 'baz'\n```\n\nAll properties can be retrieved as an array with the `getProperties` method.\n\n```php\n$localBusiness->getProperties(); // ['name' => 'Spatie', ...]\n```\n\nMultiple properties can be set at once using the `addProperties` method.\n\n```php\n$localBusiness->addProperties(['name' => 'value', 'foo' => 'bar']);\n```\n\nContext and type can be retrieved with the `getContext` and `getType` methods.\n\n```php\n$localBusiness->getContext(); // 'https://schema.org'\n$localBusiness->getType(); // 'LocalBusiness'\n```\n\n### Graph - multiple items\n\nThe Graph has a lot of methods and utilities - the type-safe and simplest way is to use the overloaded methods of the `Spatie\\SchemaOrg\\Schema` class itself. These methods will get an already created or new instance of the requested schema.\n\n```php\n$graph = new Graph();\n\n// Create a product and prelink organization\n$graph\n    ->product()\n    ->name('My cool Product')\n    ->brand($graph->organization());\n\n// Hide the organization from the created script tag\n$graph->hide(\\Spatie\\SchemaOrg\\Organization::class);\n\n// Somewhere else fill out the organization\n$graph\n    ->organization()\n    ->name('My awesome Company');\n\n// Render graph to script tag\necho $graph;\n```\n\nWith these tools the graph is a collection of all available schemas, can link these schemas with each other and prevent helper schemas from being rendered in the script-tag.\n\n### Graph Node identifiers\n\nSometimes you have to keep track of multiple Graph nodes of the same type - for example multiple `Person` nodes for different people in your Organization.\nTo do so you are able to use node identifiers on your graph instance.\nIf you don't provide an identifier a reserved keyword `default` identifier will be used.\n\n```php\nuse Spatie\\SchemaOrg\\Graph;\nuse Spatie\\SchemaOrg\\Person;\n\n$graph = new Graph();\n\n// add a Person using chaining\n$graph->person('freekmurze')\n    ->givenName('Freek')\n    ->familyName('Van der Herten')\n    ->alternateName('freekmurze');\n\n// add a Person using closure\n$graph->person('sebastiandedeyne', function(Person $sebastian, Graph $graph): void {\n    $sebastian\n        ->givenName('Sebastian')\n        ->familyName('De Deyne')\n        ->alternateName('sebastiandedeyne');\n}); \n\n// add a person using closure and second call with same identifier\n$graph->person(\n    'gummibeer', \n    fn(Person $gummibeer) => $gummibeer->alternateName('gummibeer')\n);\n$graph->person('gummibeer')\n    ->givenName('Tom')\n    ->familyName('Witkowski');\n\n$graph->person('random')->name('Random Person');\n\n// hide the random person from Graph\n$graph->hide(Person::class, 'random');\n\necho json_encode($graph);\n```\n\n```json\n{\n    \"@context\":\"https:\\/\\/schema.org\",\n    \"@graph\":[\n        {\n            \"@type\":\"Person\",\n            \"givenName\":\"Freek\",\n            \"familyName\":\"Van der Herten\",\n            \"alternateName\":\"freekmurze\"\n        },\n        {\n            \"@type\":\"Person\",\n            \"givenName\":\"Sebastian\",\n            \"familyName\":\"De Deyne\",\n            \"alternateName\":\"sebastiandedeyne\"\n        },\n        {\n            \"@type\":\"Person\",\n            \"alternateName\":\"gummibeer\",\n            \"givenName\":\"Tom\",\n            \"familyName\":\"Witkowski\"\n        }\n    ]\n}\n```\n\n### Multi Typed Entities\n\nSchema.org allows [multi typed entities](https://github.com/schemaorg/schemaorg/wiki/How-to-use-Multi-Typed-Entities-or-MTEs) - to use them with this package you can use the `MultiTypedEntity` class - which works similar to the graph.\n\n```php\n$mte = new MultiTypedEntity();\n$mte->hotelRoom()->name('The Presidential Suite');\n$mte->product()->offers(\n    Schema::offer()\n        ->name('One Night')\n        ->price(100000.00)\n        ->priceCurrency('USD')\n);\n$mte->product(function (Product $product) {\n    $product->aggregateRating(\n        Schema::aggregateRating()\n            ->bestRating(5)\n            ->worstRating(4)\n    );\n});\n\necho json_encode($mte);\n```\n\n```json\n{\n   \"@context\":\"https:\\/\\/schema.org\",\n   \"@type\":[\n      \"HotelRoom\",\n      \"Product\"\n   ],\n   \"name\":\"The Presidential Suite\",\n   \"offers\":{\n      \"@type\":\"Offer\",\n      \"name\":\"One Night\",\n      \"price\":100000,\n      \"priceCurrency\":\"USD\"\n   },\n   \"aggregateRating\":{\n      \"@type\":\"AggregateRating\",\n      \"bestRating\":5,\n      \"worstRating\":4\n   }\n}\n```\n\nThere isn't a real rule in place how the properties are merged. It only uses `array_merge()` behind the scenes. So you should avoid defining the same property on different types in the MTE or be sure that all properties hold the same value that it's not important which property is used at the end.\n\n## Known Issues\n\n- The `Float` type isn't available since it's a reserved keyword in PHP\n- The `Physician` type isn't available since it extends a type from the `health` extension spec\n\n## Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information what has changed recently.\n\n## Testing\n\n``` bash\n$ composer test\n```\n\n## Contributing\n\nPlease see [CONTRIBUTING](https://github.com/spatie/.github/blob/main/CONTRIBUTING.md) for details.\n\n## Security\n\nIf you've found a bug regarding security please mail [security@spatie.be](mailto:security@spatie.be) instead of using the issue tracker.\n\n## Postcardware\n\nYou're free to use this package, but if it makes it to your production environment we highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using.\n\nOur address is: Spatie, Kruikstraat 22, 2018 Antwerp, Belgium.\n\nWe publish all received postcards [on our company website](https://spatie.be/en/opensource/postcards).\n\n## Credits\n\n- [Sebastian De Deyne](https://github.com/sebastiandedeyne)\n- [Tom Witkowski](https://github.com/Gummibeer)\n- [All Contributors](../../contributors)\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.5986328125,
          "content": "{\n    \"name\": \"spatie/schema-org\",\n    \"description\": \"A fluent builder Schema.org types and ld+json generator\",\n    \"license\": \"MIT\",\n    \"keywords\": [\n        \"spatie\",\n        \"schema-org\"\n    ],\n    \"authors\": [\n        {\n            \"name\": \"Sebastian De Deyne\",\n            \"email\": \"sebastian@spatie.be\",\n            \"homepage\": \"https://spatie.be\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Tom Witkowski\",\n            \"email\": \"dev.gummibeer@gmail.com\",\n            \"homepage\": \"https://gummibeer.de\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"homepage\": \"https://github.com/spatie/schema-org\",\n    \"require\": {\n        \"php\": \"^8.0\",\n        \"ext-json\": \"*\"\n    },\n    \"require-dev\": {\n        \"friendsofphp/php-cs-fixer\": \"^3.6\",\n        \"graham-campbell/analyzer\": \"^3.0.5\",\n        \"illuminate/collections\": \"^8.62.0\",\n        \"league/flysystem\": \"^2.3.0 || ^3.0\",\n        \"pestphp/pest\": \"^1.21\",\n        \"symfony/console\": \"^5.3.7 || 6.0\",\n        \"twig/twig\": \"^3.3.3\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Spatie\\\\SchemaOrg\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Spatie\\\\SchemaOrg\\\\Generator\\\\\": \"generator\",\n            \"Spatie\\\\SchemaOrg\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"pestphp/pest-plugin\": true\n        },\n        \"sort-packages\": true\n    },\n    \"scripts\": {\n        \"fix\": \"@php vendor/bin/php-cs-fixer fix --config=.php-cs-fixer.dist.php --allow-risky=yes\",\n        \"generate\": \"@php ./generate.php\",\n        \"test\": \"@php vendor/bin/pest\"\n    }\n}\n"
        },
        {
          "name": "generate.php",
          "type": "blob",
          "size": 0.2607421875,
          "content": "#!/usr/bin/env php\n<?php\n\nif (file_exists(__DIR__.'/vendor/autoload.php')) {\n    require __DIR__.'/vendor/autoload.php';\n} else {\n    require __DIR__.'/../../autoload.php';\n}\n\n$application = new Spatie\\SchemaOrg\\Generator\\Console\\Application();\n\n$application->run();\n"
        },
        {
          "name": "generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.9443359375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         verbose=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n    <testsuites>\n        <testsuite name=\"Spatie Test Suite\">\n            <directory suffix=\"Test.php\">tests</directory>\n        </testsuite>\n    </testsuites>\n    <coverage>\n        <include>\n            <directory suffix=\".php\">src/Exceptions</directory>\n            <file>./src/BaseType.php</file>\n            <file>./src/Type.php</file>\n            <file>./src/Graph.php</file>\n        </include>\n    </coverage>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}