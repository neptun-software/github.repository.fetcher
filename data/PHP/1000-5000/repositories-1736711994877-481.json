{
  "metadata": {
    "timestamp": 1736711994877,
    "page": 481,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "matthiasmullie/minify",
      "stars": 1977,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.150390625,
          "content": "/.github\n/.idea\n/build\n/docs\n/vendor\n/.dockerignore\n/.gitattributes\n/.gitignore\n/composer.lock\n/CONTRIBUTING.md\n/Dockerfile\n/LICENSE\n/makefile\n/README.md\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.33203125,
          "content": "* text=auto\n\n/.github export-ignore\n/tests export-ignore\n/.dockerignore export-ignore\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/.php-cs-fixer.php export-ignore\n/CONTRIBUTING.md export-ignore\n/Dockerfile export-ignore\n/makefile export-ignore\n/phpunit.xml export-ignore\n/README.md export-ignore\n/ruleset.xml.dist export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0419921875,
          "content": "/.idea\n/build\n/docs\n/vendor\n/composer.lock\n"
        },
        {
          "name": ".php-cs-fixer.php",
          "type": "blob",
          "size": 0.63671875,
          "content": "<?php\n\n$finder = PhpCsFixer\\Finder::create()\n    ->exclude('vendor')\n    ->in(__DIR__);\n\n$config = new PhpCsFixer\\Config();\n\nreturn $config\n    ->setRules(array(\n        '@Symfony' => true,\n        'array_syntax' => array('syntax' => 'long'),\n        'single_line_throw' => false,\n        'yoda_style' => array('equal' => false, 'identical' => false, 'less_and_greater' => false),\n        '@PSR12' => true,\n        'class_definition' => false, // @see https://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/5463\n        'visibility_required' => array('elements' => array('property', 'method')),\n    ))\n    ->setFinder($finder)\n    ->setUsingCache(false);\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.4365234375,
          "content": "# How to contribute\n\n\n## Issues\n\nWhen [filing bugs](https://github.com/matthiasmullie/minify/issues/new),\ntry to be as thorough as possible:\n* What version did you use?\n* What did you try to do? ***Please post the relevant parts of your code.***\n* What went wrong? ***Please include error messages, if any.***\n* What was the expected result?\n\n\n## Pull requests\n\nBug fixes and general improvements to the existing codebase are always welcome.\nNew features are also welcome, but will be judged on an individual basis. If\nyou'd rather not risk wasting your time implementing a new feature only to see\nit turned down, please start the discussion by\n[opening an issue](https://github.com/matthiasmullie/minify/issues/new).\n\n\n### Testing\n\nPlease include tests for every change or addition to the code.\nTo run the complete test suite:\n\n```sh\nmake test\n```\n\nGitHub Actions have been [configured](.github/workflows/test.yml) to run supported\nPHP versions. Upon submitting a new pull request, that test suite will be run &\nreport back on your pull request. Please make sure the test suite passes.\n\n\n### Coding standards\n\nAll code must follow [PSR-12](http://www.php-fig.org/psr/psr-12/). Just make sure\nto run php-cs-fixer before submitting the code, it'll take care of the\nformatting for you:\n\n```sh\nmake format\n```\n\nDocument the code thoroughly!\n\n\n## License\n\nNote that minify is MIT-licensed, which basically allows anyone to do\nanything they like with it, without restriction.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.73828125,
          "content": "ARG VERSION=cli\nFROM php:$VERSION\n\nCOPY . /var/www\nWORKDIR /var/www\n\nRUN cat /etc/os-release | grep jessie && echo \"deb http://archive.debian.org/debian jessie main\" > /etc/apt/sources.list || true\nRUN cat /etc/os-release | grep stretch && echo \"deb http://archive.debian.org/debian stretch main\" > /etc/apt/sources.list || true\nRUN apt-get update\nRUN apt-get install --reinstall -y --force-yes ca-certificates\nRUN apt-get install -y --force-yes zip unzip libzip-dev git\nRUN docker-php-ext-install zip pcntl\nRUN pecl install xdebug || pecl install xdebug-3.1.6 || pecl install xdebug-2.7.2 && docker-php-ext-enable xdebug || true\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\nRUN composer install\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0341796875,
          "content": "Copyright (c) 2012 Matthias Mullie\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.5595703125,
          "content": "# Minify\n\n[![Build status](https://img.shields.io/github/actions/workflow/status/matthiasmullie/minify/test.yml?branch=master&style=flat-square)](https://github.com/matthiasmullie/minify/actions/workflows/test.yml)\n[![Code coverage](http://img.shields.io/codecov/c/gh/matthiasmullie/minify?style=flat-square)](https://codecov.io/gh/matthiasmullie/minify)\n[![Latest version](http://img.shields.io/packagist/v/matthiasmullie/minify?style=flat-square)](https://packagist.org/packages/matthiasmullie/minify)\n[![Downloads total](http://img.shields.io/packagist/dt/matthiasmullie/minify?style=flat-square)](https://packagist.org/packages/matthiasmullie/minify)\n[![License](http://img.shields.io/packagist/l/matthiasmullie/minify?style=flat-square)](https://github.com/matthiasmullie/minify/blob/master/LICENSE)\n\n\nRemoves whitespace, strips comments, combines files (incl. `@import` statements and small assets in CSS files), and optimizes/shortens a few common programming patterns, such as:\n\n**JavaScript**\n* `object['property']` -> `object.property`\n* `true`, `false` -> `!0`, `!1`\n* `while(true)` -> `for(;;)`\n\n**CSS**\n* `@import url(\"http://path\")` -> `@import \"http://path\"`\n* `#ff0000`, `#ff00ff` -> `red`, `#f0f`\n* `-0px`, `50.00px` -> `0`, `50px`\n* `bold` -> `700`\n* `p {}` -> removed\n\nAnd it comes with a huge test suite.\n\n\n## Usage\n\n### CSS\n\n```php\nuse MatthiasMullie\\Minify;\n\n$sourcePath = '/path/to/source/css/file.css';\n$minifier = new Minify\\CSS($sourcePath);\n\n// we can even add another file, they'll then be\n// joined in 1 output file\n$sourcePath2 = '/path/to/second/source/css/file.css';\n$minifier->add($sourcePath2);\n\n// or we can just add plain CSS\n$css = 'body { color: #000000; }';\n$minifier->add($css);\n\n// save minified file to disk\n$minifiedPath = '/path/to/minified/css/file.css';\n$minifier->minify($minifiedPath);\n\n// or just output the content\necho $minifier->minify();\n```\n\n### JS\n\n```php\n// just look at the CSS example; it's exactly the same, but with the JS class & JS files :)\n```\n\n\n## Methods\n\nAvailable methods, for both CSS & JS minifier, are:\n\n### __construct(/* overload paths */)\n\nThe object constructor accepts 0, 1 or multiple paths of files, or even complete CSS/JS content, that should be minified.\nAll CSS/JS passed along, will be combined into 1 minified file.\n\n```php\nuse MatthiasMullie\\Minify;\n$minifier = new Minify\\JS($path1, $path2);\n```\n\n### add($path, /* overload paths */)\n\nThis is roughly equivalent to the constructor.\n\n```php\n$minifier->add($path3);\n$minifier->add($js);\n```\n\n### minify($path)\n\nThis will minify the files' content, save the result to $path and return the resulting content.\nIf the $path parameter is omitted, the result will not be written anywhere.\n\n*CAUTION: If you have CSS with relative paths (to imports, images, ...), you should always specify a target path! Then those relative paths will be adjusted in accordance with the new path.*\n\n```php\n$minifier->minify('/target/path.js');\n```\n\n### gzip($path, $level)\n\nMinifies and optionally saves to a file, just like `minify()`, but it also `gzencode()`s the minified content.\n\n```php\n$minifier->gzip('/target/path.js');\n```\n\n### setMaxImportSize($size) *(CSS only)*\n\nThe CSS minifier will automatically embed referenced files (like images, fonts, ...) into the minified CSS, so they don't have to be fetched over multiple connections.\n\nHowever, for really large files, it's likely better to load them separately (as it would increase the CSS load time if they were included.)\n\nThis method allows the max size of files to import into the minified CSS to be set (in kB). The default size is 5.\n\n```php\n$minifier->setMaxImportSize(10);\n```\n\n### setImportExtensions($extensions) *(CSS only)*\n\nThe CSS minifier will automatically embed referenced files (like images, fonts, ...) into minified CSS, so they don't have to be fetched over multiple connections.\n\nThis methods allows the type of files to be specified, along with their data:mime type.\n\nThe default embedded file types are gif, png, jpg, jpeg, svg, apng, avif, webp, woff and woff2.\n\n```php\n$extensions = array(\n    'gif' => 'data:image/gif',\n    'png' => 'data:image/png',\n);\n\n$minifier->setImportExtensions($extensions);\n```\n\n\n## Installation\n\nSimply add a dependency on `matthiasmullie/minify` to your composer.json file if you use [Composer](https://getcomposer.org/) to manage the dependencies of your project:\n\n```sh\ncomposer require matthiasmullie/minify\n```\n\nAlthough it's recommended to use Composer, you can actually [include these files](https://github.com/matthiasmullie/minify/issues/83) anyway you want.\n\n\n## License\n\nMinify is [MIT](http://opensource.org/licenses/MIT) licensed.\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.3251953125,
          "content": "{\n    \"name\": \"matthiasmullie/minify\",\n    \"type\": \"library\",\n    \"description\": \"CSS & JavaScript minifier, in PHP. Removes whitespace, strips comments, combines files (incl. @import statements and small assets in CSS files), and optimizes/shortens a few common programming patterns.\",\n    \"keywords\": [\"minify\", \"minifier\", \"css\", \"js\", \"javascript\"],\n    \"homepage\": \"https://github.com/matthiasmullie/minify\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Matthias Mullie\",\n            \"homepage\": \"https://www.mullie.eu\",\n            \"email\": \"minify@mullie.eu\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=5.3.0\",\n        \"ext-pcre\": \"*\",\n        \"matthiasmullie/path-converter\": \"~1.1\"\n    },\n    \"require-dev\": {\n        \"friendsofphp/php-cs-fixer\": \">=2.0\",\n        \"matthiasmullie/scrapbook\": \">=1.3\",\n        \"phpunit/phpunit\": \">=4.8\",\n        \"squizlabs/php_codesniffer\": \">=3.0\"\n    },\n    \"suggest\": {\n        \"psr/cache-implementation\": \"Cache implementation to use with Minify::cache\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"MatthiasMullie\\\\Minify\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"MatthiasMullie\\\\Minify\\\\Tests\\\\\": \"tests/\"\n        }\n    },\n    \"bin\": [\n        \"bin/minifycss\",\n        \"bin/minifyjs\"\n    ]\n}\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "makefile",
          "type": "blob",
          "size": 1.25390625,
          "content": "PHP ?=\nTEST ?=\nVOLUME_BINDS ?= src,tests,build,.php-cs-fixer.php,phpunit.xml,ruleset.xml\n\ndocs:\n\tdocker run --rm -v $$(pwd)/src:/data/src -v $$(pwd)/docs:/data/docs -w /data php:cli bash -c \"\\\n\t\tcurl -s -L -O https://phpdoc.org/phpDocumentor.phar;\\\n\t\tphp phpDocumentor.phar --directory=src --target=docs --visibility=public --defaultpackagename=Minify --title=Minify;\"\n\ntest:\n\tVOLUMES=\"\"\n\tfor VOLUME in $$(echo \"$(VOLUME_BINDS)\" | tr \",\" \"\\n\"); do VOLUMES=\"$$VOLUMES -v $$(pwd)/$$VOLUME:/var/www/$$VOLUME\"; done;\\\n\tVERSION=$$(echo \"$(PHP)-cli\" | sed \"s/^-//\");\\\n\ttest $$(docker images -q matthiasmullie/minify:$$VERSION) || docker build -t matthiasmullie/minify:$$VERSION . --build-arg VERSION=$$VERSION;\\\n\tdocker run $$VOLUMES matthiasmullie/minify:$$VERSION env XDEBUG_MODE=coverage vendor/bin/phpunit $(TEST) --coverage-clover build/coverage-$(PHP)-$(TEST).clover\n\nformat:\n\tVOLUMES=\"\"\n\tfor VOLUME in $$(echo \"$(VOLUME_BINDS)\" | tr \",\" \"\\n\"); do VOLUMES=\"$$VOLUMES -v $$(pwd)/$$VOLUME:/var/www/$$VOLUME\"; done;\\\n\ttest $$(docker images -q matthiasmullie/minify:cli) || docker build -t matthiasmullie/minify:cli .;\\\n\tdocker run $$VOLUMES matthiasmullie/minify:cli sh -c \"PHP_CS_FIXER_IGNORE_ENV=1 vendor/bin/php-cs-fixer fix && vendor/bin/phpcbf --standard=ruleset.xml\"\n\n.PHONY: docs\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.5693359375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" colors=\"true\" bootstrap=\"tests/bootstrap.php\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.2/phpunit.xsd\">\n  <coverage>\n    <report>\n      <clover outputFile=\"build/coverage.clover\"/>\n    </report>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"minify\">\n      <directory suffix=\"Test.php\">tests</directory>\n    </testsuite>\n  </testsuites>\n  <logging/>\n  <source>\n    <include>\n      <directory suffix=\".php\">src</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "ruleset.xml",
          "type": "blob",
          "size": 0.197265625,
          "content": "<?xml version=\"1.0\"?>\n<ruleset>\n    <rule ref=\"PSR12\" />\n\n    <file>./src</file>\n    <file>./tests</file>\n\n    <arg name=\"extensions\" value=\"php\" />\n    <arg name=\"encoding\" value=\"UTF-8\" />\n</ruleset>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}