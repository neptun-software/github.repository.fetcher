{
  "metadata": {
    "timestamp": 1736711913540,
    "page": 309,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "symfony/translation-contracts",
      "stars": 2567,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0205078125,
          "content": "/.git* export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "vendor/\ncomposer.lock\nphpunit.xml\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.1533203125,
          "content": "CHANGELOG\n=========\n\nThe changelog is maintained for all Symfony contracts at the following URL:\nhttps://github.com/symfony/contracts/blob/main/CHANGELOG.md\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2018-present Fabien Potencier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "LocaleAwareInterface.php",
          "type": "blob",
          "size": 0.60546875,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Contracts\\Translation;\n\ninterface LocaleAwareInterface\n{\n    /**\n     * Sets the current locale.\n     *\n     * @return void\n     *\n     * @throws \\InvalidArgumentException If the locale contains invalid characters\n     */\n    public function setLocale(string $locale);\n\n    /**\n     * Returns the current locale.\n     */\n    public function getLocale(): string;\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.330078125,
          "content": "Symfony Translation Contracts\n=============================\n\nA set of abstractions extracted out of the Symfony components.\n\nCan be used to build on semantics that the Symfony components proved useful and\nthat already have battle tested implementations.\n\nSee https://github.com/symfony/contracts/blob/main/README.md for more information.\n"
        },
        {
          "name": "Test",
          "type": "tree",
          "content": null
        },
        {
          "name": "TranslatableInterface.php",
          "type": "blob",
          "size": 0.447265625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Contracts\\Translation;\n\n/**\n * @author Nicolas Grekas <p@tchwork.com>\n */\ninterface TranslatableInterface\n{\n    public function trans(TranslatorInterface $translator, ?string $locale = null): string;\n}\n"
        },
        {
          "name": "TranslatorInterface.php",
          "type": "blob",
          "size": 2.501953125,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Contracts\\Translation;\n\n/**\n * @author Fabien Potencier <fabien@symfony.com>\n */\ninterface TranslatorInterface\n{\n    /**\n     * Translates the given message.\n     *\n     * When a number is provided as a parameter named \"%count%\", the message is parsed for plural\n     * forms and a translation is chosen according to this number using the following rules:\n     *\n     * Given a message with different plural translations separated by a\n     * pipe (|), this method returns the correct portion of the message based\n     * on the given number, locale and the pluralization rules in the message\n     * itself.\n     *\n     * The message supports two different types of pluralization rules:\n     *\n     * interval: {0} There are no apples|{1} There is one apple|]1,Inf] There are %count% apples\n     * indexed:  There is one apple|There are %count% apples\n     *\n     * The indexed solution can also contain labels (e.g. one: There is one apple).\n     * This is purely for making the translations more clear - it does not\n     * affect the functionality.\n     *\n     * The two methods can also be mixed:\n     *     {0} There are no apples|one: There is one apple|more: There are %count% apples\n     *\n     * An interval can represent a finite set of numbers:\n     *  {1,2,3,4}\n     *\n     * An interval can represent numbers between two numbers:\n     *  [1, +Inf]\n     *  ]-1,2[\n     *\n     * The left delimiter can be [ (inclusive) or ] (exclusive).\n     * The right delimiter can be [ (exclusive) or ] (inclusive).\n     * Beside numbers, you can use -Inf and +Inf for the infinite.\n     *\n     * @see https://en.wikipedia.org/wiki/ISO_31-11\n     *\n     * @param string      $id         The message id (may also be an object that can be cast to string)\n     * @param array       $parameters An array of parameters for the message\n     * @param string|null $domain     The domain for the message or null to use the default\n     * @param string|null $locale     The locale or null to use the default\n     *\n     * @throws \\InvalidArgumentException If the locale contains invalid characters\n     */\n    public function trans(string $id, array $parameters = [], ?string $domain = null, ?string $locale = null): string;\n\n    /**\n     * Returns the default locale.\n     */\n    public function getLocale(): string;\n}\n"
        },
        {
          "name": "TranslatorTrait.php",
          "type": "blob",
          "size": 7.4541015625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Contracts\\Translation;\n\nuse Symfony\\Component\\Translation\\Exception\\InvalidArgumentException;\n\n/**\n * A trait to help implement TranslatorInterface and LocaleAwareInterface.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\ntrait TranslatorTrait\n{\n    private ?string $locale = null;\n\n    /**\n     * @return void\n     */\n    public function setLocale(string $locale)\n    {\n        $this->locale = $locale;\n    }\n\n    public function getLocale(): string\n    {\n        return $this->locale ?: (class_exists(\\Locale::class) ? \\Locale::getDefault() : 'en');\n    }\n\n    public function trans(?string $id, array $parameters = [], ?string $domain = null, ?string $locale = null): string\n    {\n        if (null === $id || '' === $id) {\n            return '';\n        }\n\n        if (!isset($parameters['%count%']) || !is_numeric($parameters['%count%'])) {\n            return strtr($id, $parameters);\n        }\n\n        $number = (float) $parameters['%count%'];\n        $locale = $locale ?: $this->getLocale();\n\n        $parts = [];\n        if (preg_match('/^\\|++$/', $id)) {\n            $parts = explode('|', $id);\n        } elseif (preg_match_all('/(?:\\|\\||[^\\|])++/', $id, $matches)) {\n            $parts = $matches[0];\n        }\n\n        $intervalRegexp = <<<'EOF'\n/^(?P<interval>\n    ({\\s*\n        (\\-?\\d+(\\.\\d+)?[\\s*,\\s*\\-?\\d+(\\.\\d+)?]*)\n    \\s*})\n\n        |\n\n    (?P<left_delimiter>[\\[\\]])\n        \\s*\n        (?P<left>-Inf|\\-?\\d+(\\.\\d+)?)\n        \\s*,\\s*\n        (?P<right>\\+?Inf|\\-?\\d+(\\.\\d+)?)\n        \\s*\n    (?P<right_delimiter>[\\[\\]])\n)\\s*(?P<message>.*?)$/xs\nEOF;\n\n        $standardRules = [];\n        foreach ($parts as $part) {\n            $part = trim(str_replace('||', '|', $part));\n\n            // try to match an explicit rule, then fallback to the standard ones\n            if (preg_match($intervalRegexp, $part, $matches)) {\n                if ($matches[2]) {\n                    foreach (explode(',', $matches[3]) as $n) {\n                        if ($number == $n) {\n                            return strtr($matches['message'], $parameters);\n                        }\n                    }\n                } else {\n                    $leftNumber = '-Inf' === $matches['left'] ? -\\INF : (float) $matches['left'];\n                    $rightNumber = is_numeric($matches['right']) ? (float) $matches['right'] : \\INF;\n\n                    if (('[' === $matches['left_delimiter'] ? $number >= $leftNumber : $number > $leftNumber)\n                        && (']' === $matches['right_delimiter'] ? $number <= $rightNumber : $number < $rightNumber)\n                    ) {\n                        return strtr($matches['message'], $parameters);\n                    }\n                }\n            } elseif (preg_match('/^\\w+\\:\\s*(.*?)$/', $part, $matches)) {\n                $standardRules[] = $matches[1];\n            } else {\n                $standardRules[] = $part;\n            }\n        }\n\n        $position = $this->getPluralizationRule($number, $locale);\n\n        if (!isset($standardRules[$position])) {\n            // when there's exactly one rule given, and that rule is a standard\n            // rule, use this rule\n            if (1 === \\count($parts) && isset($standardRules[0])) {\n                return strtr($standardRules[0], $parameters);\n            }\n\n            $message = \\sprintf('Unable to choose a translation for \"%s\" with locale \"%s\" for value \"%d\". Double check that this translation has the correct plural options (e.g. \"There is one apple|There are %%count%% apples\").', $id, $locale, $number);\n\n            if (class_exists(InvalidArgumentException::class)) {\n                throw new InvalidArgumentException($message);\n            }\n\n            throw new \\InvalidArgumentException($message);\n        }\n\n        return strtr($standardRules[$position], $parameters);\n    }\n\n    /**\n     * Returns the plural position to use for the given locale and number.\n     *\n     * The plural rules are derived from code of the Zend Framework (2010-09-25),\n     * which is subject to the new BSD license (http://framework.zend.com/license/new-bsd).\n     * Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)\n     */\n    private function getPluralizationRule(float $number, string $locale): int\n    {\n        $number = abs($number);\n\n        return match ('pt_BR' !== $locale && 'en_US_POSIX' !== $locale && \\strlen($locale) > 3 ? substr($locale, 0, strrpos($locale, '_')) : $locale) {\n            'af',\n            'bn',\n            'bg',\n            'ca',\n            'da',\n            'de',\n            'el',\n            'en',\n            'en_US_POSIX',\n            'eo',\n            'es',\n            'et',\n            'eu',\n            'fa',\n            'fi',\n            'fo',\n            'fur',\n            'fy',\n            'gl',\n            'gu',\n            'ha',\n            'he',\n            'hu',\n            'is',\n            'it',\n            'ku',\n            'lb',\n            'ml',\n            'mn',\n            'mr',\n            'nah',\n            'nb',\n            'ne',\n            'nl',\n            'nn',\n            'no',\n            'oc',\n            'om',\n            'or',\n            'pa',\n            'pap',\n            'ps',\n            'pt',\n            'so',\n            'sq',\n            'sv',\n            'sw',\n            'ta',\n            'te',\n            'tk',\n            'ur',\n            'zu' => (1 == $number) ? 0 : 1,\n            'am',\n            'bh',\n            'fil',\n            'fr',\n            'gun',\n            'hi',\n            'hy',\n            'ln',\n            'mg',\n            'nso',\n            'pt_BR',\n            'ti',\n            'wa' => ($number < 2) ? 0 : 1,\n            'be',\n            'bs',\n            'hr',\n            'ru',\n            'sh',\n            'sr',\n            'uk' => ((1 == $number % 10) && (11 != $number % 100)) ? 0 : ((($number % 10 >= 2) && ($number % 10 <= 4) && (($number % 100 < 10) || ($number % 100 >= 20))) ? 1 : 2),\n            'cs',\n            'sk' => (1 == $number) ? 0 : ((($number >= 2) && ($number <= 4)) ? 1 : 2),\n            'ga' => (1 == $number) ? 0 : ((2 == $number) ? 1 : 2),\n            'lt' => ((1 == $number % 10) && (11 != $number % 100)) ? 0 : ((($number % 10 >= 2) && (($number % 100 < 10) || ($number % 100 >= 20))) ? 1 : 2),\n            'sl' => (1 == $number % 100) ? 0 : ((2 == $number % 100) ? 1 : (((3 == $number % 100) || (4 == $number % 100)) ? 2 : 3)),\n            'mk' => (1 == $number % 10) ? 0 : 1,\n            'mt' => (1 == $number) ? 0 : (((0 == $number) || (($number % 100 > 1) && ($number % 100 < 11))) ? 1 : ((($number % 100 > 10) && ($number % 100 < 20)) ? 2 : 3)),\n            'lv' => (0 == $number) ? 0 : (((1 == $number % 10) && (11 != $number % 100)) ? 1 : 2),\n            'pl' => (1 == $number) ? 0 : ((($number % 10 >= 2) && ($number % 10 <= 4) && (($number % 100 < 12) || ($number % 100 > 14))) ? 1 : 2),\n            'cy' => (1 == $number) ? 0 : ((2 == $number) ? 1 : (((8 == $number) || (11 == $number)) ? 2 : 3)),\n            'ro' => (1 == $number) ? 0 : (((0 == $number) || (($number % 100 > 0) && ($number % 100 < 20))) ? 1 : 2),\n            'ar' => (0 == $number) ? 0 : ((1 == $number) ? 1 : ((2 == $number) ? 2 : ((($number % 100 >= 3) && ($number % 100 <= 10)) ? 3 : ((($number % 100 >= 11) && ($number % 100 <= 99)) ? 4 : 5)))),\n            default => 0,\n        };\n    }\n}\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.9765625,
          "content": "{\n    \"name\": \"symfony/translation-contracts\",\n    \"type\": \"library\",\n    \"description\": \"Generic abstractions related to translation\",\n    \"keywords\": [\"abstractions\", \"contracts\", \"decoupling\", \"interfaces\", \"interoperability\", \"standards\"],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Nicolas Grekas\",\n            \"email\": \"p@tchwork.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.1\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Contracts\\\\Translation\\\\\": \"\" },\n        \"exclude-from-classmap\": [\n            \"/Test/\"\n        ]\n    },\n    \"minimum-stability\": \"dev\",\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-main\": \"3.6-dev\"\n        },\n        \"thanks\": {\n            \"name\": \"symfony/contracts\",\n            \"url\": \"https://github.com/symfony/contracts\"\n        }\n    }\n}\n"
        }
      ]
    }
  ]
}