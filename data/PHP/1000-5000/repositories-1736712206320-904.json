{
  "metadata": {
    "timestamp": 1736712206320,
    "page": 904,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spatie/laravel-settings",
      "stars": 1266,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.330078125,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at https://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.yml]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.48828125,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/.travis.yml        export-ignore\n/phpunit.xml.dist   export-ignore\n/tests              export-ignore\n/.editorconfig      export-ignore\n/.php_cs.dist.php   export-ignore\n/.github            export-ignore\n/phpstan.neon.dist  export-ignore\n/phpstan-baseline.neon export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1005859375,
          "content": "build\ncomposer.lock\ndocs\nvendor\ncoverage\n.phpunit.result.cache\n.idea\n.php_cs.cache\n.php-cs-fixer.cache\n"
        },
        {
          "name": ".php_cs.dist.php",
          "type": "blob",
          "size": 1.2509765625,
          "content": "<?php\n\n$finder = Symfony\\Component\\Finder\\Finder::create()\n    ->in([\n        __DIR__ . '/src',\n        __DIR__ . '/tests',\n    ])\n    ->name('*.php')\n    ->notName('*.blade.php')\n    ->ignoreDotFiles(true)\n    ->ignoreVCS(true);\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@PSR2' => true,\n        'array_syntax' => ['syntax' => 'short'],\n        'ordered_imports' => ['sort_algorithm' => 'alpha'],\n        'no_unused_imports' => true,\n        'not_operator_with_successor_space' => true,\n        'trailing_comma_in_multiline' => true,\n        'phpdoc_scalar' => true,\n        'unary_operator_spaces' => true,\n        'binary_operator_spaces' => true,\n        'blank_line_before_statement' => [\n            'statements' => ['break', 'continue', 'declare', 'return', 'throw', 'try'],\n        ],\n        'phpdoc_single_line_var_spacing' => true,\n        'phpdoc_var_without_name' => true,\n        'class_attributes_separation' => [\n            'elements' => [\n                'method' => 'one',\n            ],\n        ],\n        'method_argument_space' => [\n            'on_multiline' => 'ensure_fully_multiline',\n            'keep_multiple_spaces_after_comma' => true,\n        ],\n        'single_trait_insert_per_statement' => true,\n    ])\n    ->setFinder($finder);\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.490234375,
          "content": "# Changelog\n\nAll notable changes to `laravel-settings` will be documented in this file\n\n# Unreleased\n\n- Make `spatie/data-transfer-object` dependency optional. (#160)\n\n## 3.4.0 - 2024-09-20\n\n### What's Changed\n\n* Update README.md by @marventhieme in https://github.com/spatie/laravel-settings/pull/290\n* Update README.md by @marventhieme in https://github.com/spatie/laravel-settings/pull/291\n* Feat: add exists in migrator by @akshit-arora in https://github.com/spatie/laravel-settings/pull/289\n\n### New Contributors\n\n* @marventhieme made their first contribution in https://github.com/spatie/laravel-settings/pull/290\n* @akshit-arora made their first contribution in https://github.com/spatie/laravel-settings/pull/289\n\n**Full Changelog**: https://github.com/spatie/laravel-settings/compare/3.3.3...3.4.0\n\n## 3.3.3 - 2024-08-13\n\n### What's Changed\n\n* Handle Parentheses On Anonymous Settings Migrations by @Magnesium38 in https://github.com/spatie/laravel-settings/pull/280\n\n### New Contributors\n\n* @Magnesium38 made their first contribution in https://github.com/spatie/laravel-settings/pull/280\n\n**Full Changelog**: https://github.com/spatie/laravel-settings/compare/3.3.2...3.3.3\n\n## 3.3.2 - 2024-03-22\n\n### What's Changed\n\n* [3.x] Fix PHP 7.4 Compatibilty by @Rizky92 in https://github.com/spatie/laravel-settings/pull/264\n* Update MakeSettingCommand.php by @hamzaelmaghari in https://github.com/spatie/laravel-settings/pull/262\n\n**Full Changelog**: https://github.com/spatie/laravel-settings/compare/3.3.1...3.3.2\n\n## 3.3.1 - 2024-03-13\n\n### What's Changed\n\n* fix when base path is app path by @mvenghaus in https://github.com/spatie/laravel-settings/pull/259\n\n**Full Changelog**: https://github.com/spatie/laravel-settings/compare/3.3.0...3.3.1\n\n## 3.3.0 - 2024-02-19\n\n### What's Changed\n\n* Update composer.json to use Larastan Org by @arnebr in https://github.com/spatie/laravel-settings/pull/252\n* Add support for laravel 11 by @shuvroroy in https://github.com/spatie/laravel-settings/pull/256\n* Added settings driven custom encoder/decoder by @naxvog in https://github.com/spatie/laravel-settings/pull/250\n\n**Full Changelog**: https://github.com/spatie/laravel-settings/compare/3.2.3...3.3.0\n\n## 3.2.3 - 2023-12-04\n\n- Revert \"Use Illuminate\\Database\\Eloquent\\Casts\\Json if possible\" (#249)\n\n## 3.2.2 - 2023-12-01\n\n- Use Illuminate\\Database\\Eloquent\\Casts\\Json if possible (#241)\n\n## 3.2.1 - 2023-09-15\n\n- Change provider tag name for config (#233)\n\n## 3.2.0 - 2023-07-05\n\n- Add support for database-less fakes\n\n## 3.1.0 - 2023-05-11\n\n- Add support for nullable enum properties\n- Updates to the upgrade guide\n\n## 3.0.0 - 2023-04-28\n\n- Allow repositories to update multiple settings at once (#213 )\n- The default location where searching for settings happens is now `app_path('Settings')` instead of `app_path()`\n- The default `discovered_settings_cache_path` is changed\n\n## 2.8.3 - 2023-03-30\n\n- Remove doctrine as a dependency\n\n## 2.8.2 - 2023-03-10\n\n- Fix remigration problems with anonymous settings migrations\n\n## 2.8.1 - 2023-03-02\n\n- Show message and target path after setting migration created (#203)\n- Follow Laravel's namespace convention in MakeSettingCommand (#200)\n- Update MakeSettingsMigrationCommand.php (#205)\n- Revert \"Add support for structure discoverer\"( #207)\n\n## 2.8.0 - 2023-02-10\n\n- Drop Laravel 8 support\n- Drop PHP 8.0 support\n- Use spatie/structures-discoverer for finding settings\n\n## 2.7.0 - 2023-02-01\n\n- Add Laravel 10 Support (#192)\n- Update make:settings migration class as anonymous class (#189)\n- Use correct namespace in make:settings command (#190)\n\n## 2.6.1 - 2023-01-06\n\n- Add current date to the settings migration file (#178)\n- Add command to make new settings (#181)\n\n## 1.6.1 - 2022-12-21\n\n- create settings migration with current date (#179)\n\n## 2.6.0 - 2022-11-24\n\n- Add support for caching on repository level\n\n## 2.5.0 - 2022-11-10\n\n- Remove deprecated package\n- Add laravel data cast\n- Add support for PHP 8.2\n- Remove PHP 7.4 support\n- Remove dto cast from default config\n\n## 2.4.5 - 2022-09-28\n\n- Add deleteIfExists() method to migrator (#154)\n\n## 2.4.4 - 2022-09-07\n\n- cache encrypted settings\n\nPlease, be sure to clear your cache since settings classes with encrypted properties will crash due to the cached versions missing a proper encrypted version of the property. Clearing and caching again after installing this version resolves this problem and is something you probably should always do when deploying to production!\n\n## 2.4.3 - 2022-08-10\n\n- add rollback to migration\n\n## 2.4.2 - 2022-06-17\n\n- use Facade imports instead of aliases (#132)\n\n## 2.4.1 - 2022-04-07\n\n- Switch to using scoped instances instead of singletons (#129)\n\n## 2.4.0 - 2022-03-22\n\n## What's Changed\n\n- Add TTL config for settings cache by @AlexVanderbist in https://github.com/spatie/laravel-settings/pull/122\n\n## New Contributors\n\n- @AlexVanderbist made their first contribution in https://github.com/spatie/laravel-settings/pull/122\n\n**Full Changelog**: https://github.com/spatie/laravel-settings/compare/2.3.3...2.4.0\n\n## 2.3.3 - 2022-03-18\n\n- fix debug info method\n- convert PHPUnit to Pest (#118)\n\n## 2.3.2 - 2022-02-25\n\n- Allow migrations without a value (#113)\n\n## 2.3.1 - 2022-02-04\n\n- Add support for Laravel 9\n- Fix cache implementation with casts\n- Remove Psalm\n- Add PHPStan\n\n## 2.2.0 - 2021-10-22\n\n- add support for multiple migration paths (#92)\n\n## 2.1.12 - 2021-10-14\n\n- add possibility to check if setting is locked or unlocked (#89)\n\n## 2.1.11 - 2021-08-23\n\n- ignore abstract classes when discovering settings (#84)\n\n## 2.1.10 - 2021-08-17\n\n- add support for `null` in DateTime casts\n\n## 2.1.9 - 2021-07-08\n\n- fix `empty` call not working when properties weren't loaded\n\n## 2.1.8 - 2021-06-21\n\n- fix fake settings not working with `Arrayable`\n\n## 2.1.7 - 2021-06-08\n\n- add support for refreshing settings\n\n## 2.1.6 - 2021-06-03\n\n- add support for defining the database connection table\n\n## 2.1.5 - 2021-05-21\n\n- fix some casting problems\n- update php-cs-fixer\n\n## 2.1.4 - 2021-04-28\n\n- added fallback for settings.auto_discover_settings (#63)\n- add support for spatie/data-transfer-object v3 (#62)\n\n## 2.1.3 - 2021-04-14\n\n- add support for spatie/temporary-directory v2\n\n## 2.1.2 - 2021-04-08\n\n- skip classes with errors when discovering settings\n\n## 2.1.1 - 2021-04-07\n\n- add better support for nullable types in docblocks\n\n## 2.1.0 - 2021-04-07\n\n- add casts to migrations (#53)\n- add original properties to `SavingSettings` event (#57)\n\n## 2.0.1 - 2021-03-05\n\n- add support for lumen\n\n## 2.0.0 - 2021-03-03\n\n- settings classes:\n- properties won't be loaded when constructed but when requested\n- receive a `SettingsMapper` when constructed\n- faking settings will now only request non-given properties from the repository\n- rewritten `SettingsMapper` from scratch\n- removed `SettingsPropertyData` and `ettingsPropertyDataCollection`\n- changed signatures of `SavingSettings` and `LoadingSettings` events\n- added support for caching settings\n- renamed `cache_path` in settings.php to `discovered_settings_cache_path`\n\n## 1.0.8 - 2021-03-03\n\n- fix for properties without defined type\n\n## 1.0.7 - 2021-02-19\n\n- fix correct 'Event' facade (#30)\n\n## 1.0.6 - 2021-02-05\n\n- add support for restoring settings after a Laravel schema:dump\n\n## 1.0.5 - 2021-01-29\n\n- bump the `doctrine/dbal` dependency\n\n## 1.0.4 - 2021-01-08\n\n- add support for getting the locked settings\n\n## 1.0.3 - 2020-11-26\n\n- add PHP 8 support\n\n## 1.0.2 - 2020-11-26\n\n- fix package namespace within migrations (#9)\n\n## 1.0.1 - 2020-11-18\n\n- fix config file tag (#4)\n- fix database migration path exists (#7)\n\n## 1.0.0 - 2020-11-09\n\n- initial release\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.064453125,
          "content": "The MIT License (MIT)\n\nCopyright (c) Spatie bvba <info@spatie.be>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 34.3291015625,
          "content": "\n[<img src=\"https://github-ads.s3.eu-central-1.amazonaws.com/support-ukraine.svg?t=1\" />](https://supportukrainenow.org)\n\n# Store strongly typed application settings\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/spatie/laravel-settings.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-settings)\n[![Tests](https://github.com/spatie/laravel-settings/actions/workflows/run-tests.yml/badge.svg)](https://github.com/spatie/laravel-settings/actions/workflows/run-tests.yml)\n[![PHPStan](https://github.com/spatie/laravel-settings/actions/workflows/phpstan.yml/badge.svg)](https://github.com/spatie/laravel-settings/actions/workflows/phpstan.yml)\n[![Style](https://github.com/spatie/laravel-settings/workflows/Check%20&%20fix%20styling/badge.svg)](https://github.com/spatie/laravel-settings/actions?query=workflow%3A%22Check+%26+fix+styling%22)\n[![Total Downloads](https://img.shields.io/packagist/dt/spatie/laravel-settings.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-settings)\n\nThis package allows you to store settings in a repository (database, Redis, ...) and use them through an application without hassle. You can create a settings class as such:\n\n```php\nclass GeneralSettings extends Settings\n{\n    public string $site_name;\n    \n    public bool $site_active;\n    \n    public static function group(): string\n    {\n        return 'general';\n    }\n}\n```\n\nIf you want to use these settings somewhere in your application, you can inject them, since we register them in the Laravel Container. For example, in a controller:\n\n```php\nclass GeneralSettingsController\n{\n    public function show(GeneralSettings $settings){\n        return view('settings.show', [\n            'site_name' => $settings->site_name,\n            'site_active' => $settings->site_active    \n        ]);\n    }\n}\n```\n\nYou can update the settings as such:\n\n```php\nclass GeneralSettingsController\n{\n    public function update(\n        GeneralSettingsRequest $request,\n        GeneralSettings $settings\n    ){\n        $settings->site_name = $request->input('site_name');\n        $settings->site_active = $request->input('site_active');\n        \n        $settings->save();\n        \n        return redirect()->back();\n    }\n}\n```\n\nLet's take a look at how to create your own settings classes.\n\n## Support us\n\n[![Image](https://github-ads.s3.eu-central-1.amazonaws.com/laravel-settings.jpg)](https://spatie.be/github-ad-click/laravel-settings)\n\nWe invest a lot of resources into creating [best in class open source packages](https://spatie.be/open-source). You can support us by [buying one of our paid products](https://spatie.be/open-source/support-us).\n\nWe highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You'll find our address on [our contact page](https://spatie.be/about-us). We publish all received postcards on [our virtual postcard wall](https://spatie.be/open-source/postcards).\n\n## Installation\n\nYou can install the package via composer:\n\n```bash\ncomposer require spatie/laravel-settings\n```\n\nYou can publish and run the migrations with:\n\n```bash\nphp artisan vendor:publish --provider=\"Spatie\\LaravelSettings\\LaravelSettingsServiceProvider\" --tag=\"migrations\"\nphp artisan migrate\n```\n\nYou can publish the config file with:\n\n```bash\nphp artisan vendor:publish --provider=\"Spatie\\LaravelSettings\\LaravelSettingsServiceProvider\" --tag=\"config\"\n```\n\nThis is the contents of the published config file:\n\n```php\n\nreturn [\n\n    /*\n     * Each settings class used in your application must be registered, you can\n     * add them (manually) here.\n     */\n    'settings' => [\n\n    ],\n\n    /*\n     * The path where the settings classes will be created.\n     */\n    'setting_class_path' => app_path('Settings'),\n\n    /*\n     * In these directories settings migrations will be stored and ran when migrating. A settings \n     * migration created via the make:settings-migration command will be stored in the first path or\n     * a custom defined path when running the command.\n     */\n    'migrations_paths' => [\n        database_path('settings'),\n    ],\n\n    /*\n     * When no repository is set for a settings class, the following repository\n     * will be used for loading and saving settings.\n     */\n    'default_repository' => 'database',\n\n    /*\n     * Settings will be stored and loaded from these repositories.\n     */\n    'repositories' => [\n        'database' => [\n            'type' => Spatie\\LaravelSettings\\SettingsRepositories\\DatabaseSettingsRepository::class,\n            'model' => null,\n            'table' => null,\n            'connection' => null,\n        ],\n        'redis' => [\n            'type' => Spatie\\LaravelSettings\\SettingsRepositories\\RedisSettingsRepository::class,\n            'connection' => null,\n            'prefix' => null,\n        ],\n    ],\n\n    /*\n     * The encoder and decoder will determine how settings are stored and\n     * retrieved in the database. By default, `json_encode` and `json_decode`\n     * are used.\n     */\n    'encoder' => null,\n    'decoder' => null,\n\n    /*\n     * The contents of settings classes can be cached through your application,\n     * settings will be stored within a provided Laravel store and can have an\n     * additional prefix.\n     */\n    'cache' => [\n        'enabled' => env('SETTINGS_CACHE_ENABLED', false),\n        'store' => null,\n        'prefix' => null,\n    ],\n\n    /*\n     * These global casts will be automatically used whenever a property within\n     * your settings class isn't the default PHP type.\n     */\n    'global_casts' => [\n        DateTimeInterface::class => Spatie\\LaravelSettings\\SettingsCasts\\DateTimeInterfaceCast::class,\n        DateTimeZone::class => Spatie\\LaravelSettings\\SettingsCasts\\DateTimeZoneCast::class,\n     // Spatie\\DataTransferObject\\DataTransferObject::class => Spatie\\LaravelSettings\\SettingsCasts\\DtoCast::class,\n        Spatie\\LaravelData\\Data::class => Spatie\\LaravelSettings\\SettingsCasts\\DataCast::class,\n    ],\n\n    /*\n     * The package will look for settings in these paths and automatically\n     * register them.\n     */\n    'auto_discover_settings' => [\n        app_path('Settings'),\n    ],\n\n    /*\n     * Automatically discovered settings classes can be cached, so they don't\n     * need to be searched each time the application boots up.\n     */\n    'discovered_settings_cache_path' => base_path('bootstrap/cache'),\n];\n```\n\n## Usage\n\nThe package is built around settings classes, which are classes with public properties that extend from `Settings`. They also have a static method `group` that should return a string.\n\nYou can create multiple groups of settings, each with their settings class. You could, for example, have `GeneralSettings` with the `general` group and `BlogSettings` with the `blog` group. It's up to you how to structure these groups.\n\nAlthough it is possible to use the same group for different settings classes, we advise you not to use the same group for multiple settings classes.\n\n\n```php\nuse Spatie\\LaravelSettings\\Settings;\n\nclass GeneralSettings extends Settings\n{\n    public string $site_name;\n    \n    public bool $site_active;\n    \n    public static function group(): string\n    {\n        return 'general';\n    }\n}\n```\n\nYou can generate a new settings class using this artisan command. Before you do, please check if the `setting_class_path` is correctly set. You can also specify a `path` option, which is optional.\n\n```bash\n    php artisan make:setting SettingName --group=groupName \n```\n\nNow, you will have to add this settings class to the `settings.php` config file in the `settings` array, so it can be loaded by Laravel:\n\n```php\n    /*\n     * Each settings class used in your application must be registered, you can\n     * add them (manually) here.\n     */\n    'settings' => [\n        GeneralSettings::class\n    ],\n```\n\nEach property in a settings class needs a default value that should be set in its migration. You can create a migration as such:\n\n```bash\nphp artisan make:settings-migration CreateGeneralSettings\n```\n\nThis command will create a new file in `database/settings` where you can add the properties and their default values:\n\n```php\nuse Spatie\\LaravelSettings\\Migrations\\SettingsMigration;\n\nclass CreateGeneralSettings extends SettingsMigration\n{\n    public function up(): void\n    {\n        $this->migrator->add('general.site_name', 'Spatie');\n        $this->migrator->add('general.site_active', true);\n    }\n}\n```\n\nWe add the properties `site_name` and `site_active` here to the `general` group with values `Spatie` and `true`. More on migrations [later](https://github.com/spatie/laravel-settings#creating-settings-migrations).\n\nYou should migrate your database to add the properties:\n\n```bash\nphp artisan migrate\n```\n\nNow, when you want to use the `site_name` property of the `GeneralSettings` settings class, you can inject it into your application:\n\n```php\nclass IndexController\n{\n    public function __invoke(GeneralSettings $settings){\n        return view('index', [\n            'site_name' => $settings->site_name,\n        ]);\n    }\n}\n```\n\nOr use it to load it somewhere in your application as such:\n\n```php\nfunction getName(): string{\n    return app(GeneralSettings::class)->site_name;\n}\n```\n\nUpdating the settings can be done as such:\n\n```php\nclass SettingsController\n{\n    public function __invoke(GeneralSettings $settings, GeneralSettingsRequest $request){\n        $settings->site_name = $request->input('site_name');\n        $settings->site_active = $request->boolean('site_active');\n        \n        $settings->save();\n        \n        return redirect()->back();\n    }\n}\n```\n\n### Selecting a repository\n\nSettings will be stored and loaded from the repository. There are two types of repositories `database` and `redis`. And it is possible to create multiple repositories for these types. For example, you could have two `database` repositories, one that goes to a `settings` table in your database and another that goes to a `global_settings` table.\n\nYou can explicitly set the repository of a settings class by implementing the `repository` method:\n\n```php\nclass GeneralSettings extends Settings\n{\n    public string $site_name;\n    \n    public bool $site_active;\n    \n    public static function group(): string\n    {\n        return 'general';\n    }\n    \n    public static function repository(): ?string\n    {\n        return 'global_settings';\n    }\n}\n```\n\nWhen a repository is not set for a settings class, the `default_repository` in the `settings.php` config file will be used.\n\n### Creating settings migrations\n\nBefore you can load/update settings, you will have to migrate them. Though this might sound a bit strange at the beginning, it is quite logical. You want to have some default settings to start with when you're creating a new application. And what would happen if we change a property of a settings class? Our code would change, but our data doesn't.\n\nThat's why the package requires migrations each time you're changing/creating your settings classes' structure. These migrations will run next to the regular Laravel database migrations, and we've added some tooling to write them as quickly as possible.\n\nCreating a settings migration works just like you would create a regular database migration. You can run the following command:\n\n```bash\nphp artisan make:settings-migration CreateGeneralSettings\n```\n\nThis will add a migration to the `application/database/settings` directory:\n\n```php\nuse Spatie\\LaravelSettings\\Migrations\\SettingsMigration;\n\nclass CreateGeneralSettings extends SettingsMigration\n{\n    public function up(): void\n    {\n\n    }\n}\n```\n\nWe haven't added a `down` method, but this can be added if desired. In the `up` method, you can change the settings data in the repository when migrating. There are a few default operations supported:\n\n#### Adding a property\n\nYou can add a property to a settings group as such:\n\n```php\npublic function up(): void\n{\n    $this->migrator->add('general.timezone', 'Europe/Brussels');\n}\n```\n\nWe've added a `timezone` property to the `general` group, which is being used by `GeneralSettings`. You should always give a default value for a newly created setting. In this case, this is the `Europe/Brussels` timezone.\n\nIf the property in the settings class is nullable, it's possible to give `null` as a default value.\n\n#### Renaming a property\n\nIt is possible to rename a property:\n\n```php\npublic function up(): void\n{\n    $this->migrator->rename('general.timezone', 'general.local_timezone');\n}\n```\n\nYou can also move a property to another group:\n\n```php\npublic function up(): void\n{\n    $this->migrator->rename('general.timezone', 'country.timezone');\n}\n```\n\n#### Updating a property\n\nIt is possible to update the contents of a property:\n\n```php\npublic function up(): void\n{\n    $this->migrator->update(\n        'general.timezone', \n        fn(string $timezone) => return 'America/New_York'\n    );\n}\n```\n\nAs you can see, this method takes a closure as an argument, which makes it possible to update a value based upon its old value.\n\n#### Deleting a property\n\n```php\npublic function up(): void\n{\n    $this->migrator->delete('general.timezone');\n}\n```\n\n#### Checking a property if it exists\n\nThere might be times when you want to check if a property exists in the database. This can be done as such:\n\n```php\npublic function up(): void\n{\n    if ($this->migrator->exists('general.timezone')) {\n        // do something\n    }\n}\n```\n\n#### Operations in group\n\nWhen you're working on a big settings class with many properties, it can be a bit cumbersome always to have to prepend the settings group. That's why you can also perform operations within a settings group:\n\n```php\npublic function up(): void\n{\n    $this->migrator->inGroup('general', function (SettingsBlueprint $blueprint): void {\n        $blueprint->add('timezone', 'Europe/Brussels');\n        \n        $blueprint->rename('timezone', 'local_timezone');\n        \n        $blueprint->update('timezone', fn(string $timezone) => return 'America/New_York');\n        \n        $blueprint->delete('timezone');\n    });\n}\n```\n\n### Typing properties\n\nIt is possible to create a settings class with regular PHP types:\n\n\n```php\nclass RegularTypeSettings extends Settings\n{\n    public string $a_string;\n    \n    public bool $a_bool;\n    \n    public int $an_int;\n    \n    public float $a_float;\n    \n    public array $an_array;\n    \n    public static function group(): string\n    {\n        return 'regular_type';\n    }\n}\n```\n\nInternally the package will convert these types to JSON and save them as such in the repository. But what about types like `DateTime` and `Carbon` or your own created types? Although these types can be converted to JSON, building them back up again from JSON isn't supported.\n\nThat's why you can specify casts within this package. There are two ways to define these casts: locally or globally.\n\n#### Local casts\n\nLocal casts work on one specific settings class and should be defined for each property:\n\n```php\nclass DateSettings extends Settings\n{\n    public DateTime $birth_date;\n    \n    public static function group(): string\n    {\n        return 'date';\n    }\n    \n    public static function casts(): array\n    {\n        return [\n            'birth_date' => DateTimeInterfaceCast::class\n        ];\n    }\n}\n```\n\nThe `DateTimeInterfaceCast` can be used for properties with types like `DateTime`, `DateTimeImmutable`, `Carbon` and `CarbonImmutable`. You can also use an already constructed cast. It becomes handy when you need to pass some extra arguments to the cast:\n\n\n\n```php\nclass DateSettings extends Settings\n{\n    public $birth_date;\n    \n    public static function group(): string\n    {\n        return 'date';\n    }\n    \n    public static function casts(): array\n    {\n        return [\n            'birth_date' => new DateTimeInterfaceWithTimeZoneCast(DateTime::class, 'Europe/Brussels')\n        ];\n    }\n}\n```\n\nAs you can see, we provide `DateTime::class` to the cast, so it knows what type of `DateTime` it should use because the `birth_date` property was not typed, and the cast couldn't infer the type to use.\n\nYou can also provide arguments to a cast without constructing it:\n\n```php\nclass DateSettings extends Settings\n{\n    public $birth_date;\n    \n    public static function group(): string\n    {\n        return 'date';\n    }\n    \n    public static function casts(): array\n    {\n        return [\n            'birth_date' => DateTimeInterfaceCast::class.':'.DateTime::class\n        ];\n    }\n}\n```\n\n#### Global casts\n\nLocal casts are great for defining types for specific properties of the settings class. But it's a lot of work to define a local cast for each regularly used type like a `DateTime`. Global casts try to simplify this process.\n\nYou can define global casts in the `global_casts` array of the package configuration. We've added some default casts to the configuration that can be handy:\n\n```php\n'global_casts' => [\n    DateTimeInterface::class => Spatie\\LaravelSettings\\SettingsCasts\\DateTimeInterfaceCast::class,\n    DateTimeZone::class => Spatie\\LaravelSettings\\SettingsCasts\\DateTimeZoneCast::class,\n // Spatie\\DataTransferObject\\DataTransferObject::class => Spatie\\LaravelSettings\\SettingsCasts\\DtoCast::class,\n    Spatie\\LaravelData\\Data::class => Spatie\\LaravelSettings\\SettingsCasts\\DataCast::class,\n],\n```\n\n A global cast can work on:\n \n - a specific type (`DateTimeZone::class`)\n - a type that implements an interface (`DateTimeInterface::class`)\n - a type that extends from another class (`Data::class`)\n \nIn your settings class, when you use a `DateTime` property (which implements `DateTimeInterface`), you no longer have to define local casts:\n\n```php\nclass DateSettings extends Settings\n{\n    public DateTime $birth_date;\n    \n    public static function group(): string\n    {\n        return 'date';\n    }\n}\n```\n\nThe package will automatically find the cast and will use it to transform the types between the settings class and repository.\n\n#### Typing properties\n\nThere are quite a few options to type properties. You could type them in PHP:\n\n```php\nclass DateSettings extends Settings\n{\n    public DateTime $birth_date;\n    \n    public ?int $a_nullable_int;\n    \n    public static function group(): string\n    {\n        return 'date';\n    }\n}\n```\n\nOr you can use docblocks:\n\n```php\nclass DateSettings extends Settings\n{\n    /** @var \\DateTime  */\n    public $birth_date;\n    \n    /** @var ?int  */\n    public $a_nullable_int;\n    \n    /** @var int|null  */\n    public $another_nullable_int;\n    \n    /** @var int[]|null  */\n    public $an_array_of_ints_or_null;\n    \n    public static function group(): string\n    {\n        return 'date';\n    }\n}\n```\n\nDocblocks can be very useful to type arrays of objects:\n\n```php\nclass DateSettings extends Settings\n{\n    /** @var array<\\DateTime>  */\n    public array $birth_dates;\n    \n    // OR\n\n    /** @var \\DateTime[]  */\n    public array $birth_dates_alternative;\n\n    public static function group(): string\n    {\n        return 'date';\n    }\n}\n```\n\n### Locking properties\n\nWhen you want to disable the ability to update the value of a setting, you can add a lock to it:\n\n```php\n$dateSettings->lock('birth_date');\n```\n\nIt is now impossible to update the value of `birth_date`. When trying to overwrite `birth_date` and saving settings, the package will load the old value of `birth_date` from the repository, and it looks like nothing happened.\n\nYou can also lock multiple settings at once:\n\n```php\n$dateSettings->lock('birth_date', 'name', 'email');\n```\n\nYou can get all the locked settings:\n\n```php\n$dateSettings->getLockedProperties(); // ['birth_date']\n```\n\nUnlocking settings can be done as such:\n\n```php\n$dateSettings->unlock('birth_date', 'name', 'email');\n```\n\nChecking if a setting is currently locked can be done as such:\n\n```php\n$dateSettings->isLocked('birth_date');\n```\n\nChecking if a setting is currently unlocked can be done as such:\n\n```php\n$dateSettings->isUnlocked('birth_date');\n```\n\n### Encrypting properties\n\nSome properties in your settings class can be confidential, like API keys, for example. It is possible to encrypt some of your properties, so it won't be possible to read them when your repository data was compromised.\n\nAdding encryption to the properties of your settings class can be done as such. By adding the `encrypted` static method to your settings class and list all the properties that should be encrypted:\n\n```php\nclass GeneralSettings extends Settings\n{\n    public string $site_name;\n    \n    public bool $site_active;\n    \n    public static function group(): string\n    {\n        return 'general';\n    }\n    \n    public static function encrypted(): array\n    {\n        return [\n            'site_name'\n        ];\n    }\n}\n```\n\n#### Using encryption in migrations\n\nCreating and updating encrypted properties in migrations works a bit differently than non-encrypted properties.\n\nInstead of calling the `add` method to create a new property, you should use the `addEncrypted` method:\n\n```php\npublic function up(): void\n{\n    $this->migrator->addEncrypted('general.site_name', 'Spatie');\n}\n```\n\nThe same goes for the `update` method, which should be replaced by `updateEncrypted`:\n\n```php\npublic function up(): void\n{\n    $this->migrator->updateEncrypted(\n        'general.site_name', \n        fn(string $siteName) => return 'Space'\n    );\n}\n```\n\nYou can make a non-encrypted property encrypted in a migration:\n\n```php\npublic function up(): void\n{\n    $this->migrator->add('general.site_name', 'Spatie');\n\n    $this->migrator->encrypt('general.site_name');\n}\n```\n\nOr make an encrypted property non-encrypted:\n\n```php\npublic function up(): void\n{\n    $this->migrator->addEncrypted('general.site_name', 'Spatie');\n\n    $this->migrator->decrypt('general.site_name');\n}\n```\n\nOf course, you can use these methods when using `inGroup` migration operations.\n\n### Custom encoders and decoders\n\nIt is possible to define custom encoders and decoders instead of the built-in `json_encode` and `json_decode` ones by\nchanging the package configuration like so:\n\n```php\n...\n'encoder' => fn($value): string => str_rot13(json_encode($value)),\n'decoder' => fn(string $payload, bool $associative) => json_decode(str_rot13($payload), $associative),\n...\n```\n\n### Faking settings classes\n\nIn tests, it is sometimes desired that some settings classes can be quickly used with values different from the default ones you've written in your migrations. That's why you can fake settings. Faked settings classes will be registered in the container. And you can overwrite some or all the properties in the settings class:\n\n```php\nDateSettings::fake([\n    'birth_date' => new DateTime('16-05-1994')\n]);\n```\n\nNow, when the `DateSettings` settings class is injected somewhere in your application, the `birth_date` property will be `DateTime('16-05-1994')`.\n\nIf all properties are overwritten, no calls to repositories will be made. If only some properties are overwritten, the package will first add the overwritten properties and then load the missing settings from the repository. It is possible to explicitly throw an MissingSettings exception when a property is not overwritten in a fake method call like this:\n\n```php\nDateSettings::fake([\n    'birth_date' => new DateTime('16-05-1994')\n], false);\n```\n\n### Caching settings\n\nIt takes a small amount of time to load a settings class from a repository. When you've got many settings classes, these added small amounts of time can grow quickly out of hand. The package has built-in support for caching stored settings using the Laravel cache.\n\nYou should first enable the cache within the `settings.php` config file:\n\n```php\n'cache' => [\n    'enabled' => env('SETTINGS_CACHE_ENABLED', false),\n    'store' => null,\n    'prefix' => null,\n],\n```\n\nWe suggest you enable caching in production by adding `SETTINGS_CACHE_ENABLED=true` to your `.env` file. It is also possible to define a store for the cache, which should be one of the stores you defined in the `cache.php` config file. If no store were defined, the default cache store would be taken. To avoid conflicts within the cache, you can also define a prefix that will be added to each cache entry.\n\nThat's it. The package is now smart enough to cache the settings the first time they're loaded. Whenever the settings are edited, the package will refresh the settings.\n\nYou can always clear the cached settings with the following command:\n\n```bash\nphp artisan settings:clear-cache\n```\n\n### Auto discovering settings classes\n\nEach settings class you create should be added to the `settings` array within the `settings.php` config file. When you've got a lot of settings, this can be quickly forgotten.\n\nThat's why it is also possible to auto-discover settings classes. The package will look through your application and tries to discover settings classes. You can specify the paths where will be searched in the config `auto_discover_settings` array. By default, this is the application's app path.\n\nAutodiscovering settings require some extra time before your application is booted up. That's why it is possible to cache them using the following command:\n\n```bash\nphp artisan settings:discover\n```\n\nYou can clear this cache by running:\n\n```bash\nphp artisan settings:clear-discovered\n```\n\n### Writing your own casters\n\nA caster is a class implementing the `SettingsCast` interface:\n\n```php\ninterface SettingsCast\n{\n    /**\n     * Will be used to when retrieving a value from the repository, and\n     * inserting it into the settings class.\n     */\n    public function get($payload);\n\n    /**\n     * Will be used to when retrieving a value from the settings class, and\n     * inserting it into the repository.\n     */\n    public function set($payload);\n}\n```\n\nA created caster can be used for local and global casts, but there are slight differences between them. The package will always try to inject the type of property it is casting. This type is a class string and will be provided as a first argument when constructing the caster. When it cannot deduce the type, `null` will be used as the first argument.\n\nAn example of such caster with a type injected is a simplified `DtoCast`:\n\n```php\nclass DtoCast implements SettingsCast\n{\n    private string $type;\n\n    public function __construct(?string $type)\n    {\n        $this->type = $type;\n    }\n\n    public function get($payload): Data\n    {\n        return $this->type::from($payload);\n    }\n\n    public function set($payload): array\n    {\n        return $payload->toArray();\n    }\n}\n```\n\nThe above is a caster for the [spatie/laravel-data](https://github.com/spatie/laravel-data) package, within its constructor, the type will be a specific Data class, for example, `SongData::class`. In the `get` method, the caster will construct a `Data::class` with the repository properties. The caster receives a `Data::class` as payload in the `set` method and converts it to an array for safe storing in the repository.\n\n#### Local casts\n\nWhen using a local cast, there are a few different possibilities to deduce the type:\n\n```php\n// By the type of property\n\nclass CastSettings extends Settings \n{\n    public DateTime $birth_date;\n    \n    public static function casts(): array\n    {\n        return [\n            'birth_date' => DateTimeInterfaceCast::class\n        ];\n    }\n    \n    ...\n}\n```\n\n```php\n// By the docblock of a property\n\nclass CastSettings extends Settings\n{\n    /** @var \\DateTime  */\n    public $birth_date;\n    \n    public static function casts(): array\n    {\n        return [\n            'birth_date' => DateTimeInterfaceCast::class\n        ];\n    }\n    \n    ...\n}\n```\n\n\n```php\n// By explicit definition\n\nclass CastSettings extends Settings\n{\n    public $birth_date;\n    \n    public static function casts(): array\n    {\n        return [\n            'birth_date' => DateTimeInterfaceCast::class.':'.DateTime::class\n        ];\n    }\n    \n    ...\n}\n```\n\nIn that last case: by explicit definition, it is possible to provide extra arguments that will be passed to the constructor:\n\n```php\nclass CastSettings extends Settings\n{\n    public $birth_date;\n    \n    public static function casts(): array\n    {\n        return [\n            'birth_date' => DateTimeWthTimeZoneInterfaceCast::class.':'.DateTime::class.',Europe/Brussels'\n        ];\n    }\n    \n    ...\n}\n```\n\nAlthough in this case, it might be more readable to construct the caster within the settings class:\n\n```php\nclass CastSettings extends Settings\n{\n    public $birth_date;\n    \n    public static function casts(): array\n    {\n        return [\n            'birth_date' => new DateTimeWthTimeZoneInterfaceCast(DateTime::class, 'Europe/Brussels')\n        ];\n    }\n    \n    ...\n}\n```\n\n#### Global casts\n\nWhen using global casts, the package will again try to deduce the type of property it's casting. In this case, it can only use the property type or infer the type of the property's docblock.\n\nA global cast should be configured in the `settings.php` config file and always has a specific (set) of type(s) it works on. These types can be a particular class, a group of classes implementing an interface, or a group of classes extending from another class.\n\nA good example here is the `DateTimeInterfaceCast` we've added by default in the config. It is defined in the config as such:\n\n```php\n    ...\n\n    'global_casts' => [\n        DateTimeInterface::class => Spatie\\LaravelSettings\\SettingsCasts\\DateTimeInterfaceCast::class,\n    ],\n    \n    ...\n```\n\nWhenever the package detects a `Carbon`, `CarbonImmutable`, `DateTime`, or `DateTimeImmutable` type as the type of one of a settings class's properties. It will use the `DateTimeInterfaceCast` as a caster. This because `Carbon`, `CarbonImmutable`, `DateTime` and `DateTimeImmutable` all implement `DateTimeInterface`. The key that was used in `settings.php` to represent the cast.\n\nThe type injected in the caster will be the type of the property. So let's say you have a property with the type `DateTime` within your settings class. When casting this property, the `DateTimeInterfaceCast` will receive `DateTime:class` as a type. \n\n\n### Repositories\n\nThere are two types of repositories included in the package, the `redis` and `database` repository. You can create multiple repositories for one type in the `setting.php` config file. And each repository can be configured.\n\n#### Database repository\n\nThe database repository has two optional configuration options:\n\n- `model` the Eloquent model used to load/save properties to the database\n- `table` the table used in the database\n- `connection` the connection to use when interacting with the database\n\n#### Redis repository\n\nThe Redis repository also has two optional configuration options:\n\n- `prefix` an optional prefix that will be prepended to the keys\n- `connection` the connection to use when interacting with Redis\n\n#### Caching\n\nIt is possible to add a custom caching configuration per repository, by adding a cache configuration like the default one to your repository config within the `settings.php` config file:\n\n```php\n    'repositories' => [\n        'landlord' => [\n            'type' => Spatie\\LaravelSettings\\SettingsRepositories\\DatabaseSettingsRepository::class,\n            'model' => null,\n            'table' => null,\n            'connection' => 'landlord',\n            'cache' => [\n                'enabled' => env('SETTINGS_CACHE_ENABLED', false),\n                'store' => null,\n                'prefix' => 'landlord',\n                'ttl' => null,\n            ],\n        ],\n        \n        ...\n    ],\n```\n\n#### Creating your own repository type\n\nIt is possible to create your own types of repositories. A repository is a class which implements `SettingsRepository`:\n\n```php\ninterface SettingsRepository\n{\n    /**\n     * Get all the properties in the repository for a single group\n     */\n    public function getPropertiesInGroup(string $group): array;\n\n    /**\n     * Check if a property exists in a group\n     */\n    public function checkIfPropertyExists(string $group, string $name): bool;\n\n    /**\n     * Get the payload of a property\n     */\n    public function getPropertyPayload(string $group, string $name);\n\n    /**\n     * Create a property within a group with a payload\n     */\n    public function createProperty(string $group, string $name, $payload): void;\n\n    /**\n     * Update the payloads of properties within a group.\n     */\n    public function updatePropertiesPayload(string $group, array $properties): void;\n\n    /**\n     * Delete a property from a group\n     */\n    public function deleteProperty(string $group, string $name): void;\n\n    /**\n     * Lock a set of properties for a specific group\n     */\n    public function lockProperties(string $group, array $properties): void;\n\n    /**\n     * Unlock a set of properties for a group\n     */\n    public function unlockProperties(string $group, array $properties): void;\n\n    /**\n     * Get all the locked properties within a group\n     */\n    public function getLockedProperties(string $group): array;\n}\n```\n\nAll these functions should be implemented to interact with the type of storage you're using. The `payload` parameters are raw values(`int`, `bool`, `float`, `string`, `array`). Within the `database`, and `redis` repository types, These raw values are converted to JSON. But this is not required. \n\nIt is required to return raw values again in the `getPropertiesInGroup` and `getPropertyPayload` methods.\n\nEach repository's constructor will receive a `$config` array that the user-defined for the repository within the application `settings.php` config file. It is possible to add other dependencies to the constructor. They will be injected when the repository is created.\n\n#### Refreshing settings\n\nYou can refresh the values and locked properties within the settings class. This can be useful if you change something within your repository and want to see it reflected within your settings:\n\n```php\n$settings->refresh();\n```\n\nYou should only refresh settings when the repository values were changed when the settings class was already loaded.\n\n### Events\n\nThe package will emit a series of events when loading/saving settings classes:\n\n- `LoadingSettings` whenever settings are loaded from the repository but not yet inserted in the settings class\n- `SettingsLoaded` after settings are loaded into the settings class\n- `SavingSettings` whenever settings are saved to the repository but are not yet cast or encrypted\n- `SettingsSaved` after settings are stored within the repository\n\n## Testing\n\n``` bash\ncomposer test\n```\n\n## Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information on what has changed recently.\n\n## Contributing\n\nPlease see [CONTRIBUTING](https://github.com/spatie/.github/blob/main/CONTRIBUTING.md) for details.\n\n## Security\n\nIf you've found a bug regarding security please mail [security@spatie.be](mailto:security@spatie.be) instead of using the issue tracker.\n\n## Credits\n\n- [Ruben Van Assche](https://github.com/rubenvanassche)\n- [All Contributors](../../contributors)\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n\n"
        },
        {
          "name": "UPGRADING.md",
          "type": "blob",
          "size": 1.603515625,
          "content": "# Upgrading\n\nBecause there are many breaking changes an upgrade is not that easy. There are many edge cases this guide does not cover. We accept PRs to improve this guide.\n\n## From v2 to v3\n\nThis should be a quick update:\n\n- When creating a new project, the default search location for settings classes will be in the `app_path('Settings')` directory. If you want to keep the old location, then you can set the `auto_discover_settings` option to `app_path()`. For applications which already have published their config, nothing changes.\n- If you're implementing custom repositories, then update them according to the interface. The method `updatePropertyPayload` is renamed to `updatePropertiesPayload` and should now update multiple properties at once.\n- Add a new migration with the following content\n\n```php\n<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::table('settings', function (Blueprint $table): void {\n            $table->boolean('locked')->default(false)->change();\n\n            $table->unique(['group', 'name']);\n\n            $table->dropIndex(['group']);\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::table('settings', function (Blueprint $table): void {\n            $table->boolean('locked')->default(null)->change();\n\n            $table->dropUnique(['group', 'name']);\n\n            $table->index('group');\n        });\n    }\n};\n```\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.2177734375,
          "content": "{\n    \"name\" : \"spatie/laravel-settings\",\n    \"description\" : \"Store your application settings\",\n    \"keywords\" : [\n        \"spatie\",\n        \"laravel-settings\"\n    ],\n    \"homepage\" : \"https://github.com/spatie/laravel-settings\",\n    \"license\" : \"MIT\",\n    \"authors\" : [\n        {\n            \"name\" : \"Ruben Van Assche\",\n            \"email\" : \"ruben@spatie.be\",\n            \"homepage\" : \"https://spatie.be\",\n            \"role\" : \"Developer\"\n        }\n    ],\n    \"require\" : {\n        \"php\" : \"^7.4|^8.0\",\n        \"ext-json\" : \"*\",\n        \"illuminate/database\" : \"^8.73|^9.0|^10.0|^11.0\",\n        \"phpdocumentor/type-resolver\" : \"^1.5\",\n        \"spatie/temporary-directory\" : \"^1.3|^2.0\"\n    },\n    \"require-dev\" : {\n        \"ext-redis\": \"*\",\n        \"mockery/mockery\": \"^1.4\",\n        \"larastan/larastan\": \"^2.0\",\n        \"orchestra/testbench\": \"^6.23|^7.0|^8.0|^9.0\",\n        \"pestphp/pest\": \"^1.21|^2.0\",\n        \"pestphp/pest-plugin-laravel\": \"^1.2|^2.0\",\n        \"phpstan/extension-installer\": \"^1.1\",\n        \"phpstan/phpstan-deprecation-rules\": \"^1.0\",\n        \"phpstan/phpstan-phpunit\": \"^1.0\",\n        \"phpunit/phpunit\": \"^9.5|^10.0\",\n        \"spatie/laravel-data\": \"^1.0.0|^2.0.0|^4.0.0\",\n        \"spatie/pest-plugin-snapshots\": \"^1.1|^2.0\",\n        \"spatie/phpunit-snapshot-assertions\": \"^4.2|^5.0\",\n        \"spatie/ray\": \"^1.36\"\n    },\n    \"suggest\" : {\n        \"spatie/data-transfer-object\" : \"Allows for DTO casting to settings. (deprecated)\"\n    },\n    \"autoload\" : {\n        \"psr-4\" : {\n            \"Spatie\\\\LaravelSettings\\\\\" : \"src\"\n        }\n    },\n    \"autoload-dev\" : {\n        \"psr-4\" : {\n            \"Spatie\\\\LaravelSettings\\\\Tests\\\\\" : \"tests\"\n        }\n    },\n    \"scripts\" : {\n        \"analyse\" : \"vendor/bin/phpstan analyse\",\n        \"test\" : \"vendor/bin/pest\",\n        \"test-coverage\" : \"vendor/bin/pest --coverage\"\n    },\n    \"config\" : {\n        \"sort-packages\" : true,\n        \"allow-plugins\" : {\n            \"pestphp/pest-plugin\" : true,\n            \"phpstan/extension-installer\" : true\n        }\n    },\n    \"extra\" : {\n        \"laravel\" : {\n            \"providers\" : [\n                \"Spatie\\\\LaravelSettings\\\\LaravelSettingsServiceProvider\"\n            ]\n        }\n    },\n    \"minimum-stability\" : \"dev\",\n    \"prefer-stable\" : true\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "database",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan-baseline.neon",
          "type": "blob",
          "size": 1.5556640625,
          "content": "parameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: \"#^Property 'group' does not exist in Spatie\\\\\\\\LaravelSettings\\\\\\\\Models\\\\\\\\SettingsProperty model\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Models/SettingsProperty.php\n\n\t\t-\n\t\t\tmessage: \"#^Property 'name' does not exist in Spatie\\\\\\\\LaravelSettings\\\\\\\\Models\\\\\\\\SettingsProperty model\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Models/SettingsProperty.php\n\n\t\t-\n\t\t\tmessage: \"#^Property 'payload' does not exist in Spatie\\\\\\\\LaravelSettings\\\\\\\\Models\\\\\\\\SettingsProperty model\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Models/SettingsProperty.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to method toArray\\\\(\\\\) on an unknown class Spatie\\\\\\\\DataTransferObject\\\\\\\\DataTransferObject\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/SettingsCasts/DtoCast.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Spatie\\\\\\\\LaravelSettings\\\\\\\\SettingsCasts\\\\\\\\DtoCast\\\\:\\\\:get\\\\(\\\\) has invalid return type Spatie\\\\\\\\DataTransferObject\\\\\\\\DataTransferObject\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/SettingsCasts/DtoCast.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\$payload of method Spatie\\\\\\\\LaravelSettings\\\\\\\\SettingsCasts\\\\\\\\DtoCast\\\\:\\\\:set\\\\(\\\\) has invalid type Spatie\\\\\\\\DataTransferObject\\\\\\\\DataTransferObject\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/SettingsCasts/DtoCast.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model\\\\:\\\\:\\\\$name\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/SettingsRepositories/DatabaseSettingsRepository.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model\\\\:\\\\:\\\\$payload\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/SettingsRepositories/DatabaseSettingsRepository.php\n\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.251953125,
          "content": "includes:\n    - phpstan-baseline.neon\n\nparameters:\n    level: 4\n    paths:\n        - src\n        - config\n        - database\n    tmpDir: build/phpstan\n    checkOctaneCompatibility: true\n    checkModelProperties: true\n    checkMissingIterableValueType: false\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.90234375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bootstrap=\"vendor/autoload.php\" backupGlobals=\"false\" backupStaticAttributes=\"false\" colors=\"true\" verbose=\"true\" convertErrorsToExceptions=\"true\" convertNoticesToExceptions=\"true\" convertWarningsToExceptions=\"true\" processIsolation=\"false\" stopOnFailure=\"false\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\">\n  <coverage>\n    <include>\n      <directory suffix=\".php\">src/</directory>\n    </include>\n    <report>\n      <clover outputFile=\"build/logs/clover.xml\"/>\n      <html outputDirectory=\"build/coverage\"/>\n      <text outputFile=\"build/coverage.txt\"/>\n    </report>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"Spatie Test Suite\">\n      <directory>tests</directory>\n    </testsuite>\n  </testsuites>\n  <logging>\n    <junit outputFile=\"build/report.junit.xml\"/>\n  </logging>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}