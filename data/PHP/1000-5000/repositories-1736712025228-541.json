{
  "metadata": {
    "timestamp": 1736712025228,
    "page": 541,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "php-fig/link-util",
      "stars": 1838,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2646484375,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4853515625,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/.travis.yml        export-ignore\n/phpunit.xml.dist   export-ignore\n/.scrutinizer.yml   export-ignore\n/test               export-ignore\n/phpcs.xml          export-ignore\n/.editorconfig      export-ignore\n/README.md          export-ignore\n/rebuild-rels.php   export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.052734375,
          "content": "build\ncomposer.lock\ndocs\nvendor\n.phpunit.result.cache\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.1025390625,
          "content": "# The MIT License (MIT)\n\nCopyright (c) 2016 :author_name <:author_email>\n\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the \"Software\"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in\n> all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n> THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.3994140625,
          "content": "PSR Http Link Utilities\n=======================\n\n![Quality Assurance](https://github.com/php-fig/link-util/workflows/Quality%20Assurance/badge.svg)\n\nThis repository includes common utilities to assist with implementing [PSR-13](https://www.php-fig.org/psr/psr-13/).\n\nNote that it is not intended as a complete PSR-13 implementation, only a partial implementation\nto make writing other implementations easier.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.8427734375,
          "content": "{\n    \"name\": \"fig/link-util\",\n    \"description\": \"Common utility implementations for HTTP links\",\n    \"keywords\": [\"psr\", \"psr-13\", \"http\", \"http-link\", \"link\", \"rest\"],\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"PHP-FIG\",\n            \"homepage\": \"https://www.php-fig.org/\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.0.0\",\n        \"psr/link\": \"^1.1.0 | ^2.0.0\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^9\",\n        \"squizlabs/php_codesniffer\": \"^2.3.1\"\n    },\n    \"provide\": {\n        \"psr/link-implementation\": \"1.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Fig\\\\Link\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Fig\\\\Link\\\\Test\\\\\": \"test/\"\n        }\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"1.0.x-dev\"\n        }\n    }\n}\n"
        },
        {
          "name": "phpcs.xml",
          "type": "blob",
          "size": 0.548828125,
          "content": "<?xml version=\"1.0\"?>\n<ruleset name=\"PSR-2 coding standard\">\n    <description>PSR-2 coding standards</description>\n\n    <!-- display progress -->\n    <arg value=\"p\"/>\n    <arg name=\"colors\"/>\n\n    <!-- inherit rules from: -->\n    <rule ref=\"PSR2\"/>\n    <rule ref=\"Generic.Arrays.DisallowLongArraySyntax\"/>\n    <rule ref=\"Squiz.WhiteSpace.SuperfluousWhitespace\">\n        <properties>\n            <property name=\"ignoreBlankLines\" value=\"false\"/>\n        </properties>\n    </rule>\n\n    <!-- Paths to check -->\n    <file>src</file>\n    <file>test</file>\n</ruleset>\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.462890625,
          "content": "<?xml version=\"1.0\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bootstrap=\"./vendor/autoload.php\" colors=\"true\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\">\n  <coverage processUncoveredFiles=\"true\">\n    <include>\n      <directory suffix=\".php\">src</directory>\n    </include>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"Fig\\\\Link Tests\">\n      <directory>./test</directory>\n    </testsuite>\n  </testsuites>\n</phpunit>\n"
        },
        {
          "name": "rebuild-rels.php",
          "type": "blob",
          "size": 5.587890625,
          "content": "<?php\n\ndeclare(strict_types=1);\n\nnamespace Fig\\Link\\Builder;\n\nconst REGISTRY_FILE = 'https://www.iana.org/assignments/link-relations/link-relations.xml';\n\nrun();\n\nfunction run() {\n    $compiler = new RegistryCompiler();\n\n    $records = new Records();\n    $out = fopen('src/Relations.php', 'w');\n    $compiler->compile($records(), $out);\n}\n\nclass Records\n{\n\n    /**\n     * Loads the XML object from the remote source.\n     *\n     * IANA requires a valid User-Agent string for all requests, and non-curl stream options for PHP seem to all\n     * fail at sending a User-Agent, even when told to.  So we use the ugly way.\n     */\n    protected function getXml(): \\SimpleXMLElement\n    {\n        $ch = curl_init(REGISTRY_FILE);\n        curl_setopt($ch, CURLOPT_USERAGENT, 'php-fig/fig-utils');\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $xml = curl_exec($ch);\n\n        return simplexml_load_string($xml);\n    }\n\n    /**\n     * Fetches the records for the relation registry.\n     *\n     * @return iterable<\\SimpleXMLElement>\n     */\n    public function __invoke()\n    {\n        foreach ($this->getXml()->registry->children() as $element) {\n            if ($element->getName() == 'record') {\n                yield $element;\n            }\n        }\n    }\n}\n\n/**\n * Compiles a list of SimpleXmlElements to a Relations interface.\n */\nclass RegistryCompiler\n{\n    /**\n     * Writes a Relations index class based on the provided records.\n     *\n     * @param iterable<\\SimpleXMLElement> $records\n     *   An iterable of SimpleXml elements from the Link Relations XML file.\n     * @param $stream\n     *   An open file stream to which to write the generated code.\n     * @param string $class\n     *   The name of the interface to produce.\n     * @param string $namespace\n     *   The namespace of the interface to generate.\n     */\n    public function compile(iterable $records, $stream, string $class = 'Relations', string $namespace = 'Fig\\\\Link') : void\n    {\n        fwrite($stream, $this->createPreamble($class, $namespace));\n\n        foreach ($records as $record) {\n            $item = $this->createEntry($record);\n            fwrite($stream, $item);\n        }\n\n        fwrite($stream, $this->createClosing());\n    }\n\n    /**\n     * Processes a SimpleXml record into a constant definition.\n     *\n     * @param \\SimpleXMLElement $record\n     *   The record to process.\n     * @return string\n     */\n    protected function createEntry(\\SimpleXMLElement $record) : string\n    {\n        $value = (string)$record->value;\n        $name = $this->buildName($value);\n        $description = $this->rewrap((string)$record->description);\n        $note = $this->rewrap((string)$record->note);\n        $seeUri = $this->xrefLink($record->spec->xref);\n\n        if ($note) {\n            return <<<END\n\n    /**\n     * {$description}\n     *\n     * {$note}\n     *\n     * @see {$seeUri}\n     */\n    const REL_$name = '$value';\n\nEND;\n\n        }\n        else {\n            return <<<END\n\n    /**\n     * {$description}\n     *\n     * @see {$seeUri}\n     */\n    const REL_$name = '$value';\n\nEND;\n\n        }\n\n    }\n\n    /**\n     * Maps an Xref element to a full URL.\n     *\n     * @param \\SimpleXMLElement $xref\n     *   The xref argument of a record.\n     * @return string\n     *   A web URL.\n     * @throws \\Exception\n     */\n    protected function xrefLink(\\SimpleXMLElement $xref) : string\n    {\n        if ($xref['type'] == 'uri') {\n            return (string)$xref['data'];\n        }\n\n        if ($xref['type'] == 'rfc') {\n            return 'https://tools.ietf.org/html/' . $xref['data'];\n        }\n\n        // This seems to never happen.\n        throw new \\InvalidArgumentException(\"Unhandled type: {$xref['type']}\");\n    }\n\n    /**\n     * Fixes the word wrapping of a text string to fit in a docblock.\n     *\n     * @param string $text\n     *   The string to rewrap.\n     * @return string\n     *   The rewrapped string.\n     */\n    protected function rewrap(string $text) : string\n    {\n        $text = preg_replace('/\\s\\s+/', ' ', $text);\n        $text = wordwrap($text, 120);\n        $text = str_replace(\"\\n\", \"\\n     * \", $text);\n        return $text;\n    }\n\n    /**\n     * Maps a rel name to the appropriate constant name.\n     *\n     * @param string $value\n     *   The rel name from the record.\n     * @return string\n     *   A const-name-safe string.\n     */\n    protected function buildName(string $value) : string\n    {\n        return str_replace(['-', '.'], '_', strtoupper($value));\n    }\n\n    /**\n     * Returns the opening of the file.\n     *\n     * @param string $class\n     *   The name of the class/interface to generate.\n     * @param string $namespace\n     *   The namspace for the generated class.\n     * @return string\n     *   A portion of a valid PHP class file.\n     */\n    protected function createPreamble(string $class, string $namespace) : string\n    {\n        return <<<END\n<?php\n\n/**\n * Standard relation names.\n *\n * This file is auto-generated.  Do not edit directly.  Edit or re-run `rebuild-rels.php` if necessary.\n */\n\ndeclare(strict_types=1);\n\nnamespace $namespace;\n\n/**\n * Standard relation names.\n *\n * This interface provides convenience constants for standard relationships defined by IANA. They are not required,\n * but are useful for avoiding typos and similar such errors.\n *\n * This interface may be referenced directly like so:\n *\n * Relations::REL_UP\n *\n * Or you may implement this interface in your class and then refer to the constants locally:\n *\n * static::REL_UP\n */\ninterface $class\n{\nEND;\n    }\n\n    /**\n     * Returns the closing of a file.\n     *\n     * @return string\n     */\n    protected function createClosing() : string\n    {\n        return <<<'END'\n}\nEND;\n    }\n}\n\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}