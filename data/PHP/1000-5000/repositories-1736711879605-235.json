{
  "metadata": {
    "timestamp": 1736711879605,
    "page": 235,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "overtrue/laravel-wechat",
      "stars": 2881,
      "defaultBranch": "7.x",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0732421875,
          "content": "/vendor/\ncomposer.lock\n.php-cs-fixer.cache\n.ideacghooks.lock\n\ncghooks.lock\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0634765625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 overtrue <i@overtruue\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.9990234375,
          "content": "# EasyWeChat for Laravel\n\n微信 SDK EasyWeChat for Laravel， 基于 [w7corp/easywechat](https://github.com/w7corp/easywechat)\n\n[![Sponsor me](https://github.com/overtrue/overtrue/blob/master/sponsor-me-button-s.svg?raw=true)](https://github.com/sponsors/overtrue)\n\n> 7.x 起不再默认支持 Lumen。\n\n## 框架要求\n\n- overtrue/laravel-wechat:^7.0 -> Laravel >= 8.0\n- overtrue/laravel-wechat:^6.0 -> Laravel/Lumen >= 7.0\n- overtrue/laravel-wechat:^5.1 -> Laravel/Lumen >= 5.1\n\n## 安装\n\n```bash\ncomposer require overtrue/laravel-wechat:^7.2\n```\n\n## 配置\n\n1. 创建配置文件：\n\n```shell\nphp artisan vendor:publish --provider=\"Overtrue\\\\LaravelWeChat\\\\ServiceProvider\"\n```\n\n2. 可选，添加别名\n\n```php\n'aliases' => [\n    // ...\n    'EasyWeChat' => Overtrue\\LaravelWeChat\\EasyWeChat::class,\n],\n```\n\n3. 每个模块基本都支持多账号，默认为 `default`。\n\n## 使用\n\n:rotating_light: 在中间件 `App\\Http\\Middleware\\VerifyCsrfToken` 排除微信相关的路由，如：\n\n```php\nprotected $except = [\n    // ...\n    'wechat',\n];\n```\n对于 Laravel 11.x 可以使用`bootstrap/app.php` 中的`$middleware->validateCsrfTokens`方法:\n```php\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->validateCsrfTokens(except: [\n        // ...\n        'wechat',\n    ]);\n})\n```\n\n下面以接收普通消息为例写一个例子。\n\n路由：\n\n```php\nRoute::any('/wechat', 'WeChatController@serve');\n```\n\n> 注意：一定是 `Route::any`, 因为微信服务端认证的时候是 `GET`, 接收用户消息时是 `POST` ！\n\n然后创建控制器 `WeChatController`：\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Log;\n\nclass WeChatController extends Controller\n{\n    public function serve()\n    {\n        Log::info('request arrived.'); \n\n        $server = app('easywechat.official_account')->getServer();\n\n        $server->with(function($message){\n            return \"欢迎关注 overtrue！\";\n        });\n\n        return $server->serve();\n    }\n}\n```\n\n## OAuth 中间件\n\n使用中间件的情况下 `app/config/easywechat.php` 中的 `oauth.callback` 就随便填写吧(因为用不着了 :smile:)。\n\n1. 在 `app/Http/Kernel.php` 中添加路由中间件：\n\n```php\nprotected $routeMiddleware = [\n    // ...\n    'easywechat.oauth' => \\Overtrue\\LaravelWeChat\\Middleware\\OAuthAuthenticate::class,\n];\n```\n\n2. 在路由中添加中间件：\n\n```php\n//...\nRoute::group(['middleware' => ['web', 'easywechat.oauth']], function () {\n    Route::get('/user', function () {\n        $user = session('easywechat.oauth_user.default'); // 拿到授权用户资料\n\n        dd($user);\n    });\n});\n```\n\n中间件支持指定配置名称：`'easywechat.oauth:default'`，当然，你也可以在中间件参数指定当前的 `scopes`:\n\n```php\nRoute::group(['middleware' => ['easywechat.oauth:snsapi_userinfo']], function () {\n  // ...\n});\n\n// 或者指定账户的同时指定 scopes:\nRoute::group(['middleware' => ['easywechat.oauth:default,snsapi_userinfo']], function () {\n  // ...\n});\n```\n\n上面的路由定义了 `/user` 是需要微信授权的，那么在这条路由的**回调 或 控制器对应的方法里**， 你就可以从 `session('easywechat.oauth_user.default')` 拿到已经授权的用户信息了。\n\n## 模拟授权\n\n有时候我们希望在本地开发完成后线上才真实的走微信授权流程，这将减少我们的开发成本，那么你需要做以下两步：\n\n1. 准备模拟授权资料：\n2. \n```php\nuse Illuminate\\Support\\Arr;\nuse Overtrue\\Socialite\\User as SocialiteUser;\n\n$user = new SocialiteUser([\n            'id' => 'mock-openid',\n            'name' => 'overtrue',\n            'nickname' => 'overtrue',\n            'avatar' => 'http://example.com/avatars/overtrue.png',\n            'email' => null,\n            'original' => [],\n            'provider' => 'WeChat',\n        ]);\n```\n\n> 以上字段在 scope 为 `snsapi_userinfo` 时尽可能配置齐全哦，当然，如果你的模式只是 `snsapi_base` 的话只需要 `openid` 就好了。\n\n2. 将资料写入 session：\n\n> 注意：一定要在调用 OAuth 中间件之前写入，比如你可以创建一个全局中间件来完成这件事儿，只在开发环境启用即可。\n\n```php\nsession(['easywechat.oauth_user.default' => $user]); // 同理，`default` 可以更换为您对应的其它配置名\n```\n\n## 事件\n\n> 你可以监听相应的事件，并对事件发生后执行相应的操作。\n\n- OAuth 网页授权：`Overtrue\\LaravelWeChat\\Events\\WeChatUserAuthorized`\n\n```php\n// 该事件有以下属性\n$event->user; // 同 session('easywechat.oauth_user.default') 一样\n$event->isNewSession; // 是不是新的会话（第一次创建 session 时为 true）\n$event->account; // 当前中间件所使用的账号，对应在配置文件中的配置项名称\n```\n\n\n## 开放平台支持\n\n您可以适用内置的 `Overtrue\\LaravelWeChat\\Traits\\HandleOpenPlatformServerEvents` 来快速完成开放平台的服务端验证工作：\n\n*routes/web.php:*\n```php\nRoute::any('/open-platform/server', OpenPlatformController::class);\n```\n\n*app/Http/Controllers/OpenPlatformController.php:*\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Overtrue\\LaravelWeChat\\Traits\\HandleOpenPlatformServerEvents;\n\nclass OpenPlatformController extends Controller\n{\n    use HandleOpenPlatformServerEvents;\n    \n    public function __invoke(Application $application): \\Psr\\Http\\Message\\ResponseInterface\n    {\n        $app = app('easywechat.open_platform');\n        \n        return $this->handleServerEvents($app);\n    }\n}\n```\n\nTips: 默认会根据微信开放平台的推送内容触发如下事件，你可以监听相应的事件并进行处理：\n\n- 授权方成功授权：`Overtrue\\LaravelWeChat\\Events\\OpenPlatform\\Authorized`\n- 授权方更新授权：`Overtrue\\LaravelWeChat\\Events\\OpenPlatform\\AuthorizeUpdated`\n- 授权方取消授权：`Overtrue\\LaravelWeChat\\Events\\OpenPlatform\\Unauthorized`\n- 开放平台推送 VerifyTicket：`Overtrue\\LaravelWeChat\\Events\\OpenPlatform\\VerifyTicketRefreshed`\n\n```php\n// 事件有如下属性\n$message = $event->payload; // 开放平台事件通知内容\n```\n\n配置后 `http://example.com/open-platform/server` 则为开放平台第三方应用设置的授权事件接收 URL。\n\n\n更多 SDK 的具体使用请参考：<https://www.easywechat.com>\n\n## :heart: Sponsor me \n\n[![Sponsor me](https://github.com/overtrue/overtrue/blob/master/sponsor-me.svg?raw=true)](https://github.com/sponsors/overtrue)\n\n如果你喜欢我的项目并想支持它，[点击这里 :heart:](https://github.com/sponsors/overtrue)\n\n## Project supported by JetBrains\n\nMany thanks to Jetbrains for kindly providing a license for me to work on this and other open-source projects.\n\n[![](https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg)](https://www.jetbrains.com/?from=https://github.com/overtrue)\n\n\n## PHP 扩展包开发\n\n> 想知道如何从零开始构建 PHP 扩展包？\n>\n> 请关注我的实战课程，我会在此课程中分享一些扩展开发经验 —— [《PHP 扩展包实战教程 - 从入门到发布》](https://learnku.com/courses/creating-package)\n\n## License\n\nMIT\n"
        },
        {
          "name": "README_EN.md",
          "type": "blob",
          "size": 6.763671875,
          "content": "# EasyWeChat for Laravel\n\nWeChat SDK [w7corp/easywechat](https://github.com/w7corp/easywechat) wrapper for Laravel.\n\n[![Sponsor me](https://github.com/overtrue/overtrue/blob/master/sponsor-me-button-s.svg?raw=true)](https://github.com/sponsors/overtrue)\n\n## Requirements\n\n- overtrue/laravel-wechat:^7.0 -> Laravel >= 8.0\n- overtrue/laravel-wechat:^6.0 -> Laravel/Lumen >= 7.0\n- overtrue/laravel-wechat:^5.1 -> Laravel/Lumen >= 5.1\n\n## Installation\n\n```bash\ncomposer require \"overtrue/laravel-wechat\"\n```\n\n## Config\n\n1. publishe the config file to `config` directory：\n\n  ```shell\n  php artisan vendor:publish --provider=\"Overtrue\\LaravelWeChat\\ServiceProvider\"\n  ```\n\n2. (Optional) You can add the alias to `config/app.php`:\n\n  ```php\n  'aliases' => [\n      // ...\n      'EasyWeChat' => Overtrue\\LaravelWeChat\\EasyWeChat::class,\n  ],\n  ```\n\n3. Each module basically supports multiple accounts, the default name is `default`.\n\n## Usage\n\nIgnore the CSRF check for WeChat related routes:\n\n```php\nprotected $except = [\n    // ...\n    'wechat',\n];\n```\n\nThe following is an example written to receive a server message:\n\nRoutes: \n\n```php\nRoute::any('/wechat', 'WeChatController@serve');\n```\n\n> **Note**\n> \n> It must be `Route::any`, because the WeChat server validation is `GET` request, and when receiving user messages is `POST` request!\n\nThen, let's create a controller `WeChatController`:\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Log;\n\nclass WeChatController extends Controller\n{\n    public function serve()\n    {\n        Log::info('request arrived.'); \n\n        $server = app('easywechat.official_account')->getServer();\n\n        $server->with(function($message){\n            return \"欢迎关注 overtrue！\";\n        });\n\n        return $server->serve();\n    }\n}\n```\n\n## OAuth middleware\n\nIf you're using middleware, just fill in `oauth.callback` with any value in `app/config/wechat.php` (because you won't need it :smile:).\n\n1. Register the middleware to `app/Http/Kernel.php`:\n\n  ```php\n  protected $routeMiddleware = [\n      // ...\n      'easywechat.oauth' => \\Overtrue\\LaravelWeChat\\Middleware\\OAuthAuthenticate::class,\n  ];\n  ```\n\n2. Add the middleware to oauth route:\n\n  ```php\n  //...\n  Route::group(['middleware' => ['web', 'easywechat.oauth']], function () {\n      Route::get('/user', function () {\n          $user = session('easywechat.oauth_user.default'); // oauth user\n\n          \\dd($user);\n      });\n  });\n  ```\n\n  You can also set the config name and scopes as middleware paremeter:\n\n  ```php\n  // scopes\n  Route::group(['middleware' => ['easywechat.oauth:snsapi_userinfo']], function () {\n    // ...\n  });\n\n  // account name and scopes:\n  Route::group(['middleware' => ['easywechat.oauth:default,snsapi_userinfo']], function () {\n    // ...\n  });\n  ```\n\n  The above route defines `/user` as requiring authorization from WeChat, so in the **callback or controller method** of this route, you can get the authorized user information from `session('easywechat.oauth_user.default')`.\n\n## Mock Authorization\n\nSometimes we want to go real WeChat authorization process only after local development is completed online, which will reduce our development cost, then you need to do the following two steps.\n\n1. Prepare mock authorization information:\n\n  ```php\n  use Illuminate\\Support\\Arr;\n  use Overtrue\\Socialite\\User as SocialiteUser;\n\n  $user = new SocialiteUser([\n              'id' => 'mock-openid',\n              'name' => 'overtrue',\n              'nickname' => 'overtrue',\n              'avatar' => 'http://example.com/avatars/overtrue.png',\n              'email' => null,\n              'original' => [],\n              'provider' => 'WeChat',\n          ]);\n  ```\n\n  > If your schema is only `snsapi_base`, you only need `openid`. \n\n2. Write the information to the session:\n\n  ```php\n  // Similarly, `default` can be replaced with your corresponding other configuration name\n  session(['easywechat.oauth_user.default' => $user]); \n  ```\n  \n  > **Note**\n  > \n  > Be sure to write before calling the OAuth middleware, for example, you can create a global middleware to do this, and just enable it in the development environment.\n\n\n## Events\n\nYou can listen to the corresponding events and perform the corresponding actions when they occur.\n\n- **OAuth authorized**: `Overtrue\\LaravelWeChat\\Events\\WeChatUserAuthorized`\n\n```php\n// The event has the following properties\n$event->user; // same as session('easywechat.oauth_user.default')\n$event->isNewSession; // if it is a new session (true when first creating a session)\n$event->account; // the current account used by the middleware, corresponding to the name of the configuration item in the configuration file\n```\n\n\n## Open Platform Support\n\nYou can apply the built-in `Overtrue\\LaravelWeChat\\Traits\\HandleOpenPlatformServerEvents` to quickly complete the server-side validation for the open platform: \n\n*routes/web.php:*\n\n```php\nRoute::any('/open-platform/server', OpenPlatformController::class);\n```\n\n*app/Http/Controllers/OpenPlatformController.php:*\n\n```php\n<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Overtrue\\LaravelWeChat\\Traits\\HandleOpenPlatformServerEvents;\n\nclass OpenPlatformController extends Controller\n{\n    public function __invoke(Application $application): \\Psr\\Http\\Message\\ResponseInterface\n    {\n        $app = app('easywechat.open-platform');\n        \n        return $this->handleServerEvents($app);\n    }\n}\n```\n\n> **Note**\n> \n> By default, the following events will be triggered based on the push content of WeChat Open Platform, you can listen to the corresponding events and process them.\n\n- **Authorized party successfully authorized**: `Overtrue\\LaravelWeChat\\Events\\OpenPlatform\\Authorized`\n- **Authorized party updates authorization**: `Overtrue\\LaravelWeChat\\Events\\OpenPlatform\\AuthorizeUpdated`\n- **Authorizer deauthorized**: `Overtrue\\LaravelWeChat\\Events\\OpenPlatform\\Unauthorized`\n- **OpenPlatform Push VerifyTicket**: `Overtrue\\LaravelWeChat\\Events\\OpenPlatform\\VerifyTicketRefreshed`\n\n```php\n// Events have the following properties\n$message = $event->payload; // Open Platform event notification content\n```\n\nAfter configuration `http://example.com/open-platform/server` is the authorized event receiving URL set for the Open Platform third party application.\n\n\nFor more SDK specific usage, please refer to: <https://www.easywechat.com>\n\n## :heart: Sponsor me \n\n[![Sponsor me](https://github.com/overtrue/overtrue/blob/master/sponsor-me.svg?raw=true)](https://github.com/sponsors/overtrue)\n\nIf you like my project and want to support it, [click here :heart:](https://github.com/sponsors/overtrue)\n\n## Project supported by JetBrains\n\nMany thanks to Jetbrains for kindly providing a license for me to work on this and other open-source projects.\n\n[![](https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg)](https://www.jetbrains.com/?from=https://github.com/overtrue)\n\n## License\n\nMIT\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.34375,
          "content": "{\n  \"name\": \"overtrue/laravel-wechat\",\n  \"description\": \"微信 SDK for Laravel\",\n  \"keywords\": [\n    \"wechat\",\n    \"weixin\",\n    \"laravel\",\n    \"sdk\"\n  ],\n  \"license\": \"MIT\",\n  \"authors\": [\n    {\n      \"name\": \"overtrue\",\n      \"email\": \"anzhengchao@gmail.com\"\n    }\n  ],\n  \"require\": {\n    \"illuminate/container\": \"^9.0|^10.0|^11.0\",\n    \"w7corp/easywechat\": \"^6.0.0\"\n  },\n  \"require-dev\": {\n    \"laravel/framework\": \"^10.0\",\n    \"jetbrains/phpstorm-attributes\": \"^1.0\",\n    \"brainmaestro/composer-git-hooks\": \"dev-master\",\n    \"laravel/pint\": \"^1.5\"\n  },\n  \"autoload\": {\n    \"psr-4\": {\n      \"Overtrue\\\\LaravelWeChat\\\\\": \"src/\"\n    }\n  },\n  \"extra\": {\n    \"laravel\": {\n      \"providers\": [\n        \"Overtrue\\\\LaravelWeChat\\\\ServiceProvider\"\n      ]\n    },\n    \"hooks\": {\n      \"pre-commit\": [\n        \"composer check-style\"\n      ],\n      \"pre-push\": [\n        \"composer check-style\"\n      ]\n    }\n  },\n  \"scripts\": {\n    \"post-update-cmd\": [\n      \"cghooks remove\",\n      \"cghooks add --ignore-lock\",\n      \"cghooks update\"\n    ],\n    \"post-merge\": \"composer install\",\n    \"post-install-cmd\": [\n      \"cghooks remove\",\n      \"cghooks add --ignore-lock\",\n      \"cghooks update\"\n    ],\n    \"check-style\": \"vendor/bin/pint --test\",\n    \"fix-style\": \"vendor/bin/pint\"\n  },\n  \"config\": {\n    \"allow-plugins\": {\n      \"easywechat-composer/easywechat-composer\": true\n    }\n  }\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}