{
  "metadata": {
    "timestamp": 1736711852503,
    "page": 179,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xdebug/xdebug",
      "stars": 3211,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".azure-pipelines.yml",
          "type": "blob",
          "size": 1.8125,
          "content": "trigger:\n  batch: true\n  branches:\n    include:\n      - xdebug_3_4\n      - master\n\njobs:\n Disable master until xdebug_3_4 branch has been created\n  - template: .azure/macos/job.yml\n    parameters:\n      configurationName: 'OSX_PHP_MASTER'\n      phpVersion: 'branch'\n      phpBranch: 'master'\n      configurationParameters: '--enable-debug --disable-zts'\n  - template: .azure/macos/job.yml\n    parameters:\n      configurationName: 'OSX_PHP_84'\n      phpVersion: '8.4.1'\n      configurationParameters: '--enable-debug --disable-zts'\n  - template: .azure/macos/job.yml\n    parameters:\n      configurationName: 'OSX_PHP_84_ZTS'\n      phpVersion: '8.4.1'\n      configurationParameters: '--enable-debug --enable-zts'\n  - template: .azure/macos/job.yml\n    parameters:\n      configurationName: 'OSX_PHP_83'\n      phpVersion: '8.3.12'\n      configurationParameters: '--enable-debug --disable-zts'\n  - template: .azure/macos/job.yml\n    parameters:\n      configurationName: 'OSX_PHP_83_ZTS'\n      phpVersion: '8.3.12'\n      configurationParameters: '--enable-debug --enable-zts'\n  - template: .azure/macos/job.yml\n    parameters:\n      configurationName: 'OSX_PHP_82'\n      phpVersion: '8.2.24'\n      configurationParameters: '--enable-debug --disable-zts'\n  - template: .azure/macos/job.yml\n    parameters:\n      configurationName: 'OSX_PHP_82_ZTS'\n      phpVersion: '8.2.24'\n      configurationParameters: '--enable-debug --enable-zts'\n  - template: .azure/macos/job.yml\n    parameters:\n      configurationName: 'OSX_PHP_81'\n      phpVersion: '8.1.30'\n      configurationParameters: '--enable-debug --disable-zts'\n  - template: .azure/macos/job.yml\n    parameters:\n      configurationName: 'OSX_PHP_80_ZTS'\n      phpVersion: '8.0.30'\n      configurationParameters: '--enable-debug --enable-zts'\n      xdebugConfigurationParameters: '--without-xdebug-compression'\n"
        },
        {
          "name": ".azure",
          "type": "tree",
          "content": null
        },
        {
          "name": ".build.scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gdbinit",
          "type": "blob",
          "size": 0.802734375,
          "content": "define __pxdllist\n\tset $l = (xdebug_llist*)$arg0\n\tset $h = $l->head\n\n\tprint *(xdebug_hash_element*)((*(xdebug_llist_element *) $h).ptr)\n\twhile $h->next\n\t\tprint *(xdebug_hash_element*)((*(xdebug_llist_element *) $h).ptr)\n\tend\nend\n\ndefine pxdhash\n\tset $ht = (xdebug_hash*)$arg0\n\tset $n = $ht->slots\n\tset $i = 0\n\twhile $i < $n\n\t\tif $ht->table[$i]->size != 0\n\t\t\tprintf \"Slot %d →\\n\", $i\n\t\t\t__pxdllist $ht->table[$i]\n\t\t\tprintf \"\\n\"\n\t\tend\n\t\tset $i = $i + 1\n\tend\nend\n\ndefine pxdset\n\tset $s = (xdebug_set*) $arg0\n\tprintf \"Set: size: %d: \", $s->size\n\tset $i = 0\n\twhile $i < $s->size\n\t\tset $byte = &($s->setinfo[$i / 8])\n\t\tset $bit = $i % 8\n\t\tif (*$byte & (1 << $bit))\n\t\t\tprintf \"{%d} \", $i\n\t\tend\n\t\tset $i = $i + 1\n\tend\n\tprintf \"\\n\"\nend\n\nset $xg = ((zend_xdebug_globals*) (*((void ***) tsrm_get_ls_cache()))[xdebug_globals_id-1])\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.091796875,
          "content": "/tests/debugger/bug00627-symlink.inc -text -filter\n/tests/develop/bug00744.phpt -text -filter\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.892578125,
          "content": "/.deps\n/Makefile\n/*.dep\n/*.lo\n/*.loT\n/*.slo\n/*.mk\n/*.la\n/.libs\nsrc/*.dep\nsrc/*.lo\nsrc/*.loT\nsrc/.libs\nsrc/*/*.dep\nsrc/*/*.lo\nsrc/*/*.loT\nsrc/*/.libs\n/libs.mk\n/ac*.m4\n/build\n/config.h\n/config.h.in\n/config.nice\n/config.sub\n/configure\n/configure.ac\n/configure.in\n/config.status\n/config.cache\n/conftest\n/conftest.c\n/core\n/dynlib.m4\n/install-sh\n/ltmain.sh\n/include\n/Makefile.fragments\n/Makefile.global\n/Makefile.objects\n/missing\n/mkinstalldirs\n/modules\n/scan_makefile_in.awk\n/config.guess\n/*sw*\n/contrib/*sw*\ntags\n/config.log\n/libtool\n/Debug\n/Release\n/Debug_TS\n/Release_TS\n/*.plg\n/*.patch\n/*.tgz\n/*.ncb\n/*.opt\n/*.dsw\n/autom4te.cache\n/run-tests-config.php\n/run-tests.php\n/tmp-php.ini\n.svn\n/*~\n/*.rej\n\n# Test files generated by `run-tests.php`\n*.diff\n*.mem\n*.log\n*.out\n*.exp\n*.swp\n*.php\n*.sh\nphpt.*\n/C:\\\\Windows\\\\Temp\\\\remote-log4.txt\n\n# Exclude files we like\n!php_xdebug.stub.php\n!run-xdebug-tests.php\n!make-release.php\n"
        },
        {
          "name": ".xdebugci",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 3.4814453125,
          "content": "Contributing\n============\n\nXdebug is hosted on Github. The source code can be browsed there and can be\nchecked out with::\n\n  git clone https://github.com/xdebug/xdebug.git\n\nIf you think you want to fix a bug or work on a new feature, then you need to\nfollow the instructions below. Please reach out first to discuss your\nsuggested changes as well.\n\nInitial Set-up\n--------------\n\n- Fork Xdebug on GitHub.\n- Make sure you have configured your Author Name and Author Email with GIT.\n  Xdebug doesn't accept contributions from accounts with unnatural names.\n- Clone the repository::\n\n    git clone git@github.com:{your username}/xdebug.git\n\n- Change into the ``xdebug`` repository::\n\n    cd xdebug\n\n- Add the original repository as ``upstream`` remote::\n\n    git remote add upstream https://github.com/xdebug/xdebug.git\n    git fetch upstream\n\n- Add a tracking branch for Xdebug 3.3::\n\n    git checkout --track origin/xdebug_3_3\n\nBranches\n--------\n\nThere are two branches in operation:\n\n``master``\n    This is were all new feature Pull Requests should be targeted at\n``xdebug_3_3``\n    This is were all bug fix Pull Requests should be targeted at. The\n    maintainer will add them to ``master`` too when merging the Pull Request.\n\nWorking on a Pull Request\n-------------------------\n\n- Make sure that your ``master`` and ``xdebug_3_3`` branches are up to date\n  with the ``upstream`` repository.\n- Create an issue in the `issue tracker <https://bugs.xdebug.org>`_ (if none\n  exists yet).\n- Switch to the right target branch (``master`` for features, ``xdebug_3_3``\n  for bug fixes).\n- Create a feature branch::\n\n    git checkout -b issue{issue number}-{description}\n\n  For example::\n\n    git checkout -b issue1893-crash-with-fiber\n\n- For a bug fix, write one or more test cases to verify that the problem\n  currently exists, and also to define what the output should be. Xdebug uses\n  PHP's `phpt tests <https://qa.php.net/write-test.php>`_. The ``README.rst``\n  file contains information on how to run the tests.\n\n  Each of Xdebug's modes has a specific directory where to place tests. For\n  example, for code coverage that is ``tests/coverage``. Test case names\n  should follow the following pattern::\n\n    tests/{feature-group}bug0{issue-number}.phpt\n\n  If you need more than one test, append ``-001`` after the issue number.\n\n  Pull Requests without tests won't be accepted.\n\n- Fix and/or write the code.\n\n- Before you submit a PR, make sure each commit is a single logical unit. The\n  main commit that implements the issue, should have as commit message ``Fixed\n  issue #1893: `` followed by the Summary of the issue in the issue tracker. The\n  message should state what the change was about. For example::\n\n    Fixed issue #1893: Crash with ext-fiber with xdebug.mode=coverage\n\n- Before you submit a PR, make sure to rebase first on the branch that you\n  will be targeting, for example to rebase against the current bug fix\n  branch::\n\n    git fetch upstream && git rebase upstream/xdebug_3_3\n\n- Push your changes to your remote repository::\n\n    git push origin {branch-name}\n\n  For example::\n\n    git push origin issue1893-crash-with-fiber\n\n- Once you're satisfied, generate a pull request. Make sure that the title is\n  in one line, it's fine if it's a few characters larger than what GitHub\n  likes. Do not let the title spill over into the description with ``...```.\n\n  In the description, explain what you changed, and why, and how your solution\n  is the right one. Feel free to include questions, and pointers to specific\n  things that need close review.\n"
        },
        {
          "name": "CREDITS",
          "type": "blob",
          "size": 0.0517578125,
          "content": "Xdebug\nDerick Rethans, Ilia Alshanetsky, Harald Radi\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.9560546875,
          "content": "-------------------------------------------------------------------- \n                 The Xdebug License, version 1.03\n             (Based on \"The PHP License\", version 3.01)\n   Copyright (c) 2003-2022 Derick Rethans. All rights reserved.\n-------------------------------------------------------------------- \n\nRedistribution and use in source and binary forms, with or without\nmodification, is permitted provided that the following conditions\nare met:\n\n  1. Redistributions of source code must retain the above copyright\n     notice, this list of conditions and the following disclaimer.\n \n  2. Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in\n     the documentation and/or other materials provided with the\n     distribution.\n \n  3. The name \"Xdebug\" must not be used to endorse or promote products\n     derived from this software without prior written permission. For\n     written permission, please contact derick@xdebug.org.\n  \n  4. Products derived from this software may not be called \"Xdebug\", nor\n     may \"Xdebug\" appear in their name, without prior written permission\n     from derick@xdebug.org.\n \n  5. Derick Rethans may publish revised and/or new versions of the\n     license from time to time. Each version will be given a\n     distinguishing version number.  Once covered code has been\n     published under a particular version of the license, you may\n     always continue to use it under the terms of that version. You\n     may also choose to use such covered code under the terms of any\n     subsequent version of the license published by Derick Rethans. No\n     one other than Derick Rethans has the right to modify the terms\n     applicable to covered code created under this License.\n\n  6. Redistributions of any form whatsoever must retain the following\n     acknowledgment: \"This product includes Xdebug software, freely\n     available from <https://xdebug.org/>\".\n\nTHIS SOFTWARE IS PROVIDED BY DERICK RETHANS ``AS IS'' AND ANY\nEXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE PHP DEVELOPMENT TEAM OR\nITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n--------------------------------------------------------------------\n\nThis software consists of voluntary contributions made by some\nindividuals on behalf of Derick Rethans.\n\nDerick Rethans can be contacted via e-mail at derick@xdebug.org.\n\nFor more information on Xdebug, please see <https://xdebug.org>.\n"
        },
        {
          "name": "Makefile.frag",
          "type": "blob",
          "size": 2.6123046875,
          "content": "install: $(all_targets) $(install_targets) show-install-instructions\n\nshow-install-instructions:\n\t@echo\n\t@$(top_srcdir)/build/shtool echo -n -e %B\n\t@echo   \"  +----------------------------------------------------------------------+\"\n\t@echo   \"  |                                                                      |\"\n\t@echo   \"  |   INSTALLATION INSTRUCTIONS                                          |\"\n\t@echo   \"  |   =========================                                          |\"\n\t@echo   \"  |                                                                      |\"\n\t@echo   \"  |   See https://xdebug.org/install.php#configure-php for instructions  |\"\n\t@echo   \"  |   on how to enable Xdebug for PHP.                                   |\"\n\t@echo   \"  |                                                                      |\"\n\t@echo   \"  |   Documentation is available online as well:                         |\"\n\t@echo   \"  |   - A list of all settings:  https://xdebug.org/docs-settings.php    |\"\n\t@echo   \"  |   - A list of all functions: https://xdebug.org/docs-functions.php   |\"\n\t@echo   \"  |   - Profiling instructions:  https://xdebug.org/docs-profiling2.php  |\"\n\t@echo   \"  |   - Remote debugging:        https://xdebug.org/docs-debugger.php    |\"\n\t@echo   \"  |                                                                      |\"\n\t@echo   \"  |                                                                      |\"\n\t@echo   \"  |   NOTE: Please disregard the message                                 |\"\n\t@echo   \"  |       You should add \\\"extension=xdebug.so\\\" to php.ini                |\"\n\t@echo   \"  |   that is emitted by the PECL installer. This does not work for      |\"\n\t@echo   \"  |   Xdebug.                                                            |\"\n\t@echo   \"  |                                                                      |\"\n\t@echo   \"  +----------------------------------------------------------------------+\"\n\t@$(top_srcdir)/build/shtool echo -n -e %b\n\t@echo\n\t@echo\n\nfindphp:\n\t@echo $(PHP_EXECUTABLE)\n\nclean-tests:\n\trm -f tests/*.diff tests/*.exp tests/*.log tests/*.out tests/*.php tests/*.sh tests/*.mem\n\ntest:\n\t@echo \"Xdebug can not be tested with 'make test', please refer to:\"\n\t@echo \"    https://github.com/xdebug/xdebug#testing\"\n\t@echo\n\ntest-coverage:\n\t$(MAKE) clean\n\tCCACHE_DISABLE=1 EXTRA_CFLAGS=--coverage $(MAKE) all\n\tTEST_PHP_ARGS=\"-n -d zend_extension=$(top_srcdir)/.libs/xdebug.so\" php run-xdebug-tests.php\n\ntest-coverage-lcov: test-coverage\n\tlcov -c --directory . --output-file $(top_srcdir)/.coverage.lcov\n\ntest-coverage-html: test-coverage-lcov\n\tgenhtml $(top_srcdir)/.coverage.lcov --output-directory=/tmp/html\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 6.24609375,
          "content": "Xdebug\n======\n\n.. image:: https://github.com/xdebug/xdebug/workflows/Build/badge.svg\n   :target: https://github.com/xdebug/xdebug/actions?query=workflow%3ABuild\n.. image:: https://ci.appveyor.com/api/projects/status/glp9xfsmt1p25nkn?svg=true\n   :target: https://ci.appveyor.com/project/derickr/xdebug\n.. image:: https://circleci.com/gh/xdebug/xdebug/tree/master.svg?style=svg\n   :target: https://circleci.com/gh/xdebug/xdebug\n\n.. image:: https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraine.svg\n   :target: https://stand-with-ukraine.pp.ua/\n\nXdebug is a debugging tool for PHP. It provides step-debugging and a whole\nrange of development helpers, such as stack traces, a code profiler, features to\ndump the full execution of your script to a file, and more.\n\n|Repography logo| / Recent activity |Time period|\n-----\n|recent-activity_timeline| |recent-activity_prs| |recent-activity_words| |recent-activity_users|\n\n.. |Time period| image:: https://images.repography.com/0/xdebug/xdebug/recent-activity/ef1290ac5bfa674f07dcfa4f915ce6b3_badge.svg\n   :alt: Time period\n   :target: https://repography.com\n.. |Repography logo| image:: https://images.repography.com/logo.svg\n   :alt: Repography logo\n   :target: https://repography.com\n.. |recent-activity_timeline| image:: https://images.repography.com/0/xdebug/xdebug/recent-activity/ef1290ac5bfa674f07dcfa4f915ce6b3_timeline.svg\n   :alt: Timeline graph\n   :target: https://github.com/xdebug/xdebug/commits\n.. |recent-activity_prs| image:: https://images.repography.com/0/xdebug/xdebug/recent-activity/ef1290ac5bfa674f07dcfa4f915ce6b3_prs.svg\n   :alt: Pull request status graph\n   :target: https://github.com/xdebug/xdebug/pulls\n.. |recent-activity_words| image:: https://images.repography.com/0/xdebug/xdebug/recent-activity/ef1290ac5bfa674f07dcfa4f915ce6b3_words.svg\n   :alt: Trending topics\n   :target: https://github.com/xdebug/xdebug/commits\n.. |recent-activity_users| image:: https://images.repography.com/0/xdebug/xdebug/recent-activity/ef1290ac5bfa674f07dcfa4f915ce6b3_users.svg\n   :alt: Top contributors\n   :target: https://github.com/xdebug/xdebug/graphs/contributors\n\nRequirements\n------------\n\nXdebug requires a `supported version <https://www.php.net/supported-versions.php>`_ of PHP. For\ninstallation it requires the `pecl` tool (available through the `php-pear`\npackage), unless your Linux distribution has an Xdebug package (`php-xdebug`).\n\nInstallation\n------------\n\nOn most Linux distributions you can install Xdebug through its package\nmanager. You can also compile from source with the `pecl` tool through `pecl\ninstall xdebug`. The latter also works for MacOS as long as PHP is installed\nwith Homebrew.\n\nOn Windows, you need to `download <https://xdebug.org/download#releases>`_ a\nbinary. Use the `Wizard <https://xdebug.org/wizard>`_.\n\nUnless you have installed Xdebug with a package manager on Linux, you also\nneed to add the following line to your `php.ini` file, or create a new Xdebug\nspecific ini file `xdebug.ini` in the `conf.d` directory. In either case, it\nneeds the following line added::\n\n\tzend_extension=xdebug\n\nFor more extensive installation instructions, see the documentation at\nhttps://xdebug.org/docs/install\n\nConfiguration\n-------------\n\nMost features in Xdebug have to be opted in into. Each feature has a specific\nopt-in. For example to use the `step debugger\n<https://xdebug.org/docs/remote>`_ you need to set `xdebug.remote_enable=1` in\nyour configuration file. The step debugger requires an IDE (client), of which\nthere are many `available <https://xdebug.org/docs/remote#clients>`_.\n\nThe documentation has instructions for each of Xdebug's features:\nhttps://xdebug.org/docs/ and a full list of `settings\n<https://xdebug.org/docs/all_settings>`_ is also available there.\n\nContributing\n------------\n\nXdebug is written in C, and extensive knowledge of PHP's internals is\nnecessary to be able to contribute. Contributing guidance is available\n`separately <https://github.com/xdebug/xdebug/blob/master/CONTRIBUTING.rst>`_.\n\nBefore you begin to contribute, please reach out first. Either through email\n(address at the bottom), an issue in the `issue tracker\n<https://bugs.xdebug.org>`_ or preferably through IRC on Freenode's #xdebug\nchannel.\n\nTesting\n-------\n\nIf you are familiar with compiling PHP extension from source, have a local\ncheckout of Xdebug's GitHub repository, and have compiled Xdebug in that\ndirectory following the instructions under `installation\n<https://xdebug.org/docs/install#source>`_ you can run Xdebug's tests by\nrunning::\n\n\tphp run-xdebug-tests.php\n\nThe test framework requires that the PHP binary on the path has Xdebug loaded,\nwith remote debugging enabled through `xdebug.mode=debug`. It is possible\nto skip remote debugging tests by exporting the `SKIP_DBGP_TESTS=1` environment\nvariable.\n\nThe `SKIP_UNPARALLEL_TESTS=1` can be used to skip tests that can not run in\nparallel environments, and the `SKIP_SLOW_TESTS=1` environment variable to skip\nslow tests. The `OPCACHE` environment variable can either be `yes` or `no` and\ncontrols whether the test framework enables or disables OpCache.\n\nLicensing\n---------\n\nXdebug is released under `The Xdebug License\n<https://github.com/xdebug/xdebug/blob/master/LICENSE>`_, which is based on\n`The PHP License <https://github.com/php/php-src/blob/master/LICENSE>`_. It is\nan Open Source license (though not explicitly endorsed by the Open Source\nInitiative).\n\nFurther Reading\n---------------\n\nXdebug has extensive documentation on its `website <https://xdebug.org/docs>`_.\nThere are over a hundred settings and many functions documented. Please have a\nlook through the wealth of information that Xdebug can provide to make your\nevery day development with PHP easier.\n\nSupport\n-------\n\nFor questions regarding Xdebug, please use `StackOverflow\n<https://stackoverflow.com/questions/tagged/xdebug>`_, and tag your question\nwith `xdebug`.\n\nYou can also find ad-hoc and sporadic support on IRC: ``freenode/#xdebug``.\nYou can do that with your favourite client, or by using their `webchat\n<http://webchat.freenode.net/?channels=#xdebug>`_.\n\nIf you think that you encountered a bug, please file a detailed bug report\nat https://bugs.xdebug.org. You are required to create an account, this is\nso that you can be contacted for additional information and to keep out\nspam.\n\n\nDerick Rethans — derick@xdebug.org\n"
        },
        {
          "name": "RELEASE_PROCESS.rst",
          "type": "blob",
          "size": 1.697265625,
          "content": "\n#. Mantis: Create new version if needed, and move \"Fixed in version\" from -dev\n   to release: https://bugs.xdebug.org/manage_proj_edit_page.php?project_id=1\n#. Make sure both the master and release branch (i.e. xdebug_3_3) are fully\n   synced and merged.\n#. Update composer.json, config.m4, and config.w32 to reflect supported range\n   of PHP versions.\n#. For first release in minor version (i.e. 3.5.0alpha1), merge package.xml\n   from old bug fix branch into master and new branch and commit::\n\n       git diff HEAD..xdebug_3_4 package.xml | patch -p1\n\n#. Run: ``php .build.scripts/make-release.php <version>``\n#. Move existing release entry down in ``package.xml``\n#. Include new snippet in ``/tmp/package.xml``\n#. Run commands from output\n#. Create a release from the tag on GitHub\n#. Update www.xdebug.org ``views/home/updates.php`` with snippet\n#. Update www.xdebug.org ``src/XdebugVersion.php`` with snippet\n#. Update pre-generated www.xdebug.org ``data/news/...`` file\n#. Write Patreon post taking the rendered news article as starting point\n\n#. Mantis: \"release\" the version, and make sure there is a new one.\n\n#. In the release branch, update template.rc and php_xdebug.h to the new\n   version\n#. Commit template.rc and php_xdebug.h with ``Back to -dev``\n#. Check out master branch, and run: ``git merge --strategy=ours xdebug_3_4``\n#. ``git push origin master xdebug_3_4``\n#. Add files from GHA and source to www.xdebug.org html/files\n#. Create sha256 files for the new releases::\n\n    for i in *3.4.*{tgz,dll}; do \\\n      echo $i; sha256sum $i | sed 's/\\ .*//' > $i.sha256.txt; \\\n    done\n\n#. Add the downloads, DDLs, SHA256 files, and news file to git and commit with\n   \"Go with 3.4.1\"\n#. Upload the source package to PECL\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.2939453125,
          "content": "{\n    \"name\": \"xdebug/xdebug\",\n    \"type\": \"php-ext-zend\",\n    \"license\": \"Xdebug-1.03\",\n    \"description\": \"Xdebug is a debugging and productivity extension for PHP\",\n    \"require\": {\n        \"php\": \">=8.0,<8.6\"\n    },\n    \"php-ext\": {\n        \"priority\": 90,\n        \"configure-options\": []\n    }\n}\n"
        },
        {
          "name": "config.m4",
          "type": "blob",
          "size": 8.720703125,
          "content": "dnl config.m4 for extension Xdebug\n\nPHP_ARG_ENABLE(xdebug, whether to enable Xdebug support,\n[  --enable-xdebug         Enable Xdebug support])\n\nPHP_ARG_ENABLE(xdebug-dev, whether to enable Xdebug developer build flags,\n[  --enable-xdebug-dev              Xdebug: Enable developer flags],, no)\n\nPHP_ARG_WITH(xdebug-compression, [whether to compress profiler files (requires zlib)],\n[  --without-xdebug-compression     Xdebug: Disable compression through zlib],yes,no)\n\nm4_include([m4/pkg.m4])\nm4_include([m4/clocks.m4])\n\nif test \"$PHP_XDEBUG\" != \"no\"; then\n  AC_MSG_CHECKING([for supported PHP version])\n  PHP_XDEBUG_FOUND_VERSION=`${PHP_CONFIG} --version`\n  PHP_XDEBUG_FOUND_VERNUM=`${PHP_CONFIG} --vernum`\n  if test \"$PHP_XDEBUG_FOUND_VERNUM\" -lt \"80000\"; then\n    AC_MSG_ERROR([not supported. Need a PHP version >= 8.0.0 and < 8.6.0 (found $PHP_XDEBUG_FOUND_VERSION)])\n  else\n    if test \"$PHP_XDEBUG_FOUND_VERNUM\" -ge \"80600\"; then\n      AC_MSG_ERROR([not supported. Need a PHP version >= 8.0.0 and < 8.6.0 (found $PHP_XDEBUG_FOUND_VERSION)])\n    else\n      AC_MSG_RESULT([supported ($PHP_XDEBUG_FOUND_VERSION)])\n    fi\n  fi\n  \n  AC_DEFINE(HAVE_XDEBUG,1,[ ])\n\n  old_CPPFLAGS=$CPPFLAGS\n  CPPFLAGS=\"$INCLUDES $CPPFLAGS\"\n\n  AC_XDEBUG_CLOCK\n\n  AC_CHECK_HEADERS([netinet/in.h poll.h sys/poll.h])\n  case $host_os in\n  linux*)\n    AC_DEFINE(HAVE_XDEBUG_CONTROL_SOCKET_SUPPORT,1,[ do have control socket support? ])\n    AC_CHECK_HEADERS([linux/rtnetlink.h], [], [\n      case $host_os in\n        linux-musl*)\n          AC_MSG_ERROR([rtnetlink.h is required, install the linux-headers package: apk add --update linux-headers])\n      esac\n      AC_MSG_ERROR([rtnetlink.h is required, please make sure it is available by installing the correct package])\n    ])\n  esac\n\n  PHP_CHECK_FUNC(res_ninit, resolv)\n  PHP_CHECK_FUNC(res_nclose, resolv)\n\n  PHP_CHECK_LIBRARY(m, cos, [ PHP_ADD_LIBRARY(m,, XDEBUG_SHARED_LIBADD) ])\n\n  if test \"$PHP_XDEBUG_COMPRESSION\" != \"no\"; then\n    PKG_CHECK_MODULES([ZLIB], [zlib >= 1.2.9],[\n      PHP_EVAL_LIBLINE($ZLIB_LIBS, XDEBUG_SHARED_LIBADD)\n      PHP_EVAL_INCLINE($ZLIB_CFLAGS)\n\n      AC_DEFINE(HAVE_XDEBUG_ZLIB,1,[ do we have zlib support compiled in? ])\n    ],[ ])\n  fi\n\n  CPPFLAGS=$old_CPPFLAGS\n\n  if test \"$PHP_XDEBUG_DEV\" = \"yes\"; then\n    AX_CHECK_COMPILE_FLAG(-Wbool-conversion,                _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wbool-conversion\")\n    AX_CHECK_COMPILE_FLAG(-Wdeclaration-after-statement,    _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wdeclaration-after-statement\")\n    AX_CHECK_COMPILE_FLAG(-Wdiscarded-qualifiers,           _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wdiscarded-qualifiers\")\n    AX_CHECK_COMPILE_FLAG(-Wduplicate-enum,                 _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wduplicate-enum\")\n    AX_CHECK_COMPILE_FLAG(-Wempty-body,                     _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wempty-body\")\n    AX_CHECK_COMPILE_FLAG(-Wenum-compare,                   _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wenum-compare\")\n    AX_CHECK_COMPILE_FLAG(-Werror,                          _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Werror\")\n    AX_CHECK_COMPILE_FLAG(-Wextra,                          _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wextra\")\n    AX_CHECK_COMPILE_FLAG(-Wformat-nonliteral,              _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wformat-nonliteral\")\n    AX_CHECK_COMPILE_FLAG(-Wformat-security,                _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wformat-security\")\n    AX_CHECK_COMPILE_FLAG(-Wheader-guard,                   _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wheader-guard\")\n    AX_CHECK_COMPILE_FLAG(-Wincompatible-pointer-types-discards-qualifiers, _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wincompatible-pointer-types-discards-qualifiers\")\n    AX_CHECK_COMPILE_FLAG(-Wimplicit-fallthrough,           _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wimplicit-fallthrough\")\n    AX_CHECK_COMPILE_FLAG(-Winit-self,                      _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Winit-self\")\n    AX_CHECK_COMPILE_FLAG(-Wlogical-not-parentheses,        _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wlogical-not-parentheses\")\n    AX_CHECK_COMPILE_FLAG(-Wlogical-op,                     _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wlogical-op\")\n    AX_CHECK_COMPILE_FLAG(-Wlogical-op-parentheses,         _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wlogical-op-parentheses\")\n    AX_CHECK_COMPILE_FLAG(-Wloop-analysis,                  _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wloop-analysis\")\n    AX_CHECK_COMPILE_FLAG(-Wmaybe-uninitialized,            _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wmaybe-uninitialized\")\n    AX_CHECK_COMPILE_FLAG(-Wmissing-format-attribute,       _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wmissing-format-attribute\")\n    AX_CHECK_COMPILE_FLAG(-Wno-missing-field-initializers,  _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wno-missing-field-initializers\")\n    AX_CHECK_COMPILE_FLAG(-Wno-sign-compare,                _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wno-sign-compare\")\n    AX_CHECK_COMPILE_FLAG(-Wno-unused-but-set-variable,     _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wno-unused-but-set-variable\")\n    AX_CHECK_COMPILE_FLAG(-Wno-unused-parameter,            _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wno-unused-parameter\")\n    AX_CHECK_COMPILE_FLAG(-Wno-variadic-macros,             _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wno-variadic-macros\")\n    AX_CHECK_COMPILE_FLAG(-Wparentheses,                    _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wparentheses\")\n    AX_CHECK_COMPILE_FLAG(-Wpointer-bool-conversion,        _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wpointer-bool-conversion\")\n    AX_CHECK_COMPILE_FLAG(-Wsizeof-array-argument,          _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wsizeof-array-argument\")\n    AX_CHECK_COMPILE_FLAG(-Wstring-conversion,              _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wstring-conversion\")\n    AX_CHECK_COMPILE_FLAG(-Wwrite-strings,                  _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wwrite-strings\")\n    AX_CHECK_COMPILE_FLAG(-Wpointer-arith,                  _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -Wpointer-arith\")\n    AX_CHECK_COMPILE_FLAG(-fdiagnostics-show-option,        _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -fdiagnostics-show-option\")\n    AX_CHECK_COMPILE_FLAG(-fno-exceptions,                  _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -fno-exceptions\")\n    AX_CHECK_COMPILE_FLAG(-fno-omit-frame-pointer,          _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -fno-omit-frame-pointer\")\n    AX_CHECK_COMPILE_FLAG(-fno-optimize-sibling-calls,      _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -fno-optimize-sibling-calls\")\n    AX_CHECK_COMPILE_FLAG(-fsanitize-address,               _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -fsanitize-address\")\n    AX_CHECK_COMPILE_FLAG(-fstack-protector,                _MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS -fstack-protector\")\n\n    MAINTAINER_CFLAGS=\"$_MAINTAINER_CFLAGS\"\n    STD_CFLAGS=\"-g -O0 -Wall\"\n  fi\n\n  PHP_XDEBUG_CFLAGS=\"$STD_CFLAGS $MAINTAINER_CFLAGS\"\n\n  XDEBUG_BASE_SOURCES=\"src/base/base.c src/base/ctrl_socket.c src/base/filter.c\"\n  XDEBUG_LIB_SOURCES=\"src/lib/usefulstuff.c src/lib/cmd_parser.c src/lib/compat.c src/lib/crc32.c src/lib/file.c src/lib/hash.c src/lib/headers.c src/lib/lib.c src/lib/llist.c src/lib/log.c src/lib/set.c src/lib/str.c src/lib/timing.c src/lib/var.c src/lib/var_export_html.c src/lib/var_export_line.c src/lib/var_export_text.c src/lib/var_export_xml.c src/lib/xml.c\"\n\n  XDEBUG_COVERAGE_SOURCES=\"src/coverage/branch_info.c src/coverage/code_coverage.c\"\n  XDEBUG_DEBUGGER_SOURCES=\"src/debugger/com.c src/debugger/debugger.c src/debugger/handler_dbgp.c src/debugger/handlers.c src/debugger/ip_info.c\"\n  XDEBUG_DEVELOP_SOURCES=\"src/develop/develop.c src/develop/monitor.c src/develop/php_functions.c src/develop/stack.c src/develop/superglobals.c\"\n  XDEBUG_GCSTATS_SOURCES=\"src/gcstats/gc_stats.c\"\n  XDEBUG_PROFILER_SOURCES=\"src/profiler/profiler.c\"\n  XDEBUG_TRACING_SOURCES=\"src/tracing/trace_computerized.c src/tracing/trace_flamegraph.c src/tracing/trace_html.c src/tracing/trace_textual.c src/tracing/tracing.c\"\n\n  PHP_NEW_EXTENSION(xdebug, xdebug.c $XDEBUG_BASE_SOURCES $XDEBUG_LIB_SOURCES $XDEBUG_COVERAGE_SOURCES $XDEBUG_DEBUGGER_SOURCES $XDEBUG_DEVELOP_SOURCES $XDEBUG_GCSTATS_SOURCES $XDEBUG_PROFILER_SOURCES $XDEBUG_TRACING_SOURCES, $ext_shared,,$PHP_XDEBUG_CFLAGS,,yes)\n  PHP_ADD_BUILD_DIR(PHP_EXT_BUILDDIR(xdebug)[/src/base])\n  PHP_ADD_BUILD_DIR(PHP_EXT_BUILDDIR(xdebug)[/src/lib])\n  PHP_ADD_BUILD_DIR(PHP_EXT_BUILDDIR(xdebug)[/src/coverage])\n  PHP_ADD_BUILD_DIR(PHP_EXT_BUILDDIR(xdebug)[/src/debugger])\n  PHP_ADD_BUILD_DIR(PHP_EXT_BUILDDIR(xdebug)[/src/develop])\n  PHP_ADD_BUILD_DIR(PHP_EXT_BUILDDIR(xdebug)[/src/gcstats])\n  PHP_ADD_BUILD_DIR(PHP_EXT_BUILDDIR(xdebug)[/src/profiler])\n  PHP_ADD_BUILD_DIR(PHP_EXT_BUILDDIR(xdebug)[/src/tracing])\n  PHP_SUBST(XDEBUG_SHARED_LIBADD)\n  PHP_ADD_MAKEFILE_FRAGMENT\n\n  PHP_ADD_INCLUDE($ext_srcdir/src)\n  PHP_ADD_INCLUDE($ext_builddir/src)\nfi\n"
        },
        {
          "name": "config.w32",
          "type": "blob",
          "size": 2.759765625,
          "content": "// vim:ft=javascript\n\nARG_WITH(\"xdebug\", \"Xdebug support\", \"no\");\n\nARG_WITH(\"xdebug-compression\", \"whether to compress profiler files (requires zlib)\", \"no\");\n\nif (PHP_XDEBUG != 'no') {\n\tvar XDEBUG_BASE_SOURCES=\"base.c filter.c\"\n\tvar XDEBUG_LIB_SOURCES=\"usefulstuff.c cmd_parser.c compat.c crc32.c file.c hash.c headers.c lib.c llist.c log.c set.c str.c timing.c var.c var_export_html.c var_export_line.c var_export_text.c var_export_xml.c xml.c\"\n\n\tvar XDEBUG_COVERAGE_SOURCES=\"branch_info.c code_coverage.c\"\n\tvar XDEBUG_DEBUGGER_SOURCES=\"com.c debugger.c handler_dbgp.c handlers.c\"\n\tvar XDEBUG_DEVELOP_SOURCES=\"develop.c monitor.c php_functions.c stack.c superglobals.c\"\n\tvar XDEBUG_GCSTATS_SOURCES=\"gc_stats.c\"\n\tvar XDEBUG_PROFILER_SOURCES=\"profiler.c\"\n\tvar XDEBUG_TRACING_SOURCES=\"trace_computerized.c trace_flamegraph.c trace_html.c trace_textual.c tracing.c\"\n\t\n\tvar files = \"xdebug.c\";\n\n\tvar XDEBUG_PHP_VERSION = 10000 * PHP_VERSION + 100 * PHP_MINOR_VERSION + 1 * PHP_RELEASE_VERSION;\n\tif (XDEBUG_PHP_VERSION < 80000) {\n\t\tERROR(\"not supported. Need a PHP version >= 8.0.0 and < 8.6.0 (found \" + XDEBUG_PHP_VERSION + \")\");\n\t} else if (XDEBUG_PHP_VERSION >= 80600) {\n\t\tERROR(\"not supported. Need a PHP version >= 8.0.0 and < 8.6.0 (found \" + XDEBUG_PHP_VERSION + \")\");\n\t} else {\n\t\tMESSAGE(\"supported (\" + XDEBUG_PHP_VERSION + \")\");\n\t}\n\n\tif (typeof(ZEND_EXTENSION) == 'undefined') {\n\t\tEXTENSION('xdebug', files);\n\t} else {\n\t\tZEND_EXTENSION('xdebug', files);\n\t}\n\tADD_FLAG(\"CFLAGS_XDEBUG\", \" /I \" + configure_module_dirname + \" \");\n\tADD_FLAG(\"CFLAGS_XDEBUG\", \" /I \" + configure_module_dirname + \"/src \");\n\tADD_SOURCES(configure_module_dirname + \"/src/base\", XDEBUG_BASE_SOURCES, \"xdebug\");\n\tADD_SOURCES(configure_module_dirname + \"/src/lib\", XDEBUG_LIB_SOURCES, \"xdebug\");\n\tADD_SOURCES(configure_module_dirname + \"/src/coverage\", XDEBUG_COVERAGE_SOURCES, \"xdebug\");\n\tADD_SOURCES(configure_module_dirname + \"/src/debugger\", XDEBUG_DEBUGGER_SOURCES, \"xdebug\");\n\tADD_SOURCES(configure_module_dirname + \"/src/develop\", XDEBUG_DEVELOP_SOURCES, \"xdebug\");\n\tADD_SOURCES(configure_module_dirname + \"/src/gcstats\", XDEBUG_GCSTATS_SOURCES, \"xdebug\");\n\tADD_SOURCES(configure_module_dirname + \"/src/profiler\", XDEBUG_PROFILER_SOURCES, \"xdebug\");\n\tADD_SOURCES(configure_module_dirname + \"/src/tracing\", XDEBUG_TRACING_SOURCES, \"xdebug\");\n\n\t// PHP_ZLIB is \"yes\"/\"no\" for in-tree builds, but boolean for phpize builds\n\tvar XDEBUG_ZLIB = (!MODE_PHPIZE && PHP_ZLIB == \"yes\") || (MODE_PHPIZE && PHP_ZLIB);\n\n\tif (PHP_XDEBUG_COMPRESSION != \"no\") {\n\t\tif (((!XDEBUG_ZLIB) && (CHECK_LIB(\"zlib_a.lib;zlib.lib\", \"xdebug\", PHP_XDEBUG))) ||\n\t\t\t(PHP_ZLIB_SHARED && CHECK_LIB(\"zlib.lib\", \"xdebug\", PHP_XDEBUG)) ||\n\t\t\t(XDEBUG_ZLIB && (!PHP_ZLIB_SHARED))\n\t\t) {\n\t\t\tAC_DEFINE('HAVE_XDEBUG_ZLIB', 1);\n\t\t}\n\t}\n\n\tAC_DEFINE(\"HAVE_XDEBUG\", 1, \"Xdebug support\");\n}\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.xml",
          "type": "blob",
          "size": 167.056640625,
          "content": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<package\n packagerversion=\"1.9.4\" version=\"2.0\"\n xmlns=\"http://pear.php.net/dtd/package-2.0\"\n xmlns:tasks=\"http://pear.php.net/dtd/tasks-1.0\"\n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n xsi:schemaLocation=\"http://pear.php.net/dtd/tasks-1.0 http://pear.php.net/dtd/tasks-1.0.xsd http://pear.php.net/dtd/package-2.0 http://pear.php.net/dtd/package-2.0.xsd\">\n <name>xdebug</name>\n <channel>pecl.php.net</channel>\n <summary>Xdebug is a debugging and productivity extension for PHP</summary>\n <description>\nXdebug and provides a range of features to improve the PHP development\nexperience.\n\nStep Debugging\n    A way to step through your code in your IDE or editor while the script is\n    executing.\n\nImprovements to PHP's error reporting\n    An improved var_dump() function, stack traces for Notices, Warnings, Errors\n    and Exceptions to highlight the code path to the error\n\nTracing\n    Writes every function call, with arguments and invocation location to disk.\n    Optionally also includes every variable assignment and return value for\n    each function.\n\nProfiling\n    Allows you, with the help of visualisation tools, to analyse the\n    performance of your PHP application and find bottlenecks.\n\nCode Coverage Analysis\n    To show which parts of your code base are executed when running unit tests\n    with PHP Unit.\n </description>\n <lead>\n  <name>Derick Rethans</name>\n  <user>derick</user>\n  <email>derick@xdebug.org</email>\n  <active>yes</active>\n </lead>\n\n <date>2024-11-28</date>\n <time>13:45:52</time>\n <version>\n  <release>3.4.0</release>\n  <api>3.4.0</api>\n </version>\n <stability>\n  <release>stable</release>\n  <api>stable</api>\n </stability>\n <license uri=\"https://xdebug.org/license/1.03\" filesource=\"LICENSE\">Xdebug-1.03</license>\n <notes>\nThu, Nov 28, 2024 - Xdebug 3.4.0\n\n+ New features:\n\n  - Fixed issue #2239: Add &#039;XDEBUG_IGNORE&#039; GET/POST/COOKIE/ENV to make the step debugger ignore that specific request\n  - Fixed issue #2281: PHP 8.4 support\n\n+ Improvements\n\n  - Fixed issue #2261: Send control socket location in init packet\n\n= Fixed bugs:\n\n  - Fixed issue #2262: PHP 8.4: Closure names need different wrapping algorithm\n  - Fixed issue #2283: SoapClient usage causes segfault with codecoverage\n  - Fixed issue #2294: Nette Tester always crashes in all test jobs when running with XDebug 3.4.0beta1 active\n  - Fixed issue #2304: Seg fault on throw exception\n  - Fixed issue #2305: Segfault when checking whether to ignore creating a debug connection during shutdown functions\n\n </notes>\n\n <contents>\n  <dir name=\"/\">\n   <dir name=\"contrib\">\n    <file name=\"tracefile-analyser.php\" role=\"doc\" />\n    <file name=\"xt.vim\" role=\"doc\" />\n   </dir> <!-- /contrib -->\n\n   <file name=\"config.m4\" role=\"src\" />\n   <file name=\"config.w32\" role=\"src\" />\n   <file name=\"CREDITS\" role=\"doc\" />\n   <file name=\"LICENSE\" role=\"doc\" />\n   <file name=\"xdebug.ini\" role=\"doc\" />\n   <file name=\"Makefile.frag\" role=\"src\" />\n   <file name=\"CONTRIBUTING.rst\" role=\"doc\" />\n   <file name=\"README.rst\" role=\"doc\" />\n   <file name=\"run-xdebug-tests.php\" role=\"src\" />\n\n   <file name=\"xdebug.c\" role=\"src\" />\n   <file name=\"php_xdebug.h\" role=\"src\" />\n   <file name=\"php_xdebug_arginfo.h\" role=\"src\" />\n   <dir name=\"m4\">\n    <file name=\"clocks.m4\" role=\"src\" />\n    <file name=\"pkg.m4\" role=\"src\" />\n   </dir>\n   <dir name=\"src\">\n    <dir name=\"base\">\n     <file name=\"base.c\" role=\"src\" />\n     <file name=\"base.h\" role=\"src\" />\n     <file name=\"base_globals.h\" role=\"src\" />\n     <file name=\"base_private.h\" role=\"src\" />\n     <file name=\"filter.c\" role=\"src\" />\n     <file name=\"filter.h\" role=\"src\" />\n     <file name=\"ctrl_socket.c\" role=\"src\" />\n     <file name=\"ctrl_socket.h\" role=\"src\" />\n    </dir>\n    <dir name=\"lib\">\n     <file name=\"usefulstuff.c\" role=\"src\" />\n     <file name=\"usefulstuff.h\" role=\"src\" />\n     <file name=\"cmd_parser.c\" role=\"src\" />\n     <file name=\"cmd_parser.h\" role=\"src\" />\n     <file name=\"compat.c\" role=\"src\" />\n     <file name=\"compat.h\" role=\"src\" />\n     <file name=\"crc32.c\" role=\"src\" />\n     <file name=\"crc32.h\" role=\"src\" />\n     <file name=\"file.c\" role=\"src\" />\n     <file name=\"file.h\" role=\"src\" />\n     <file name=\"hash.c\" role=\"src\" />\n     <file name=\"hash.h\" role=\"src\" />\n     <file name=\"headers.c\" role=\"src\" />\n     <file name=\"headers.h\" role=\"src\" />\n     <file name=\"lib.c\" role=\"src\" />\n     <file name=\"lib.h\" role=\"src\" />\n     <file name=\"log.c\" role=\"src\" />\n     <file name=\"log.h\" role=\"src\" />\n     <file name=\"lib_private.h\" role=\"src\" />\n     <file name=\"llist.c\" role=\"src\" />\n     <file name=\"llist.h\" role=\"src\" />\n     <file name=\"mm.h\" role=\"src\" />\n     <file name=\"php-header.h\" role=\"src\" />\n     <file name=\"set.c\" role=\"src\" />\n     <file name=\"set.h\" role=\"src\" />\n     <file name=\"str.c\" role=\"src\" />\n     <file name=\"str.h\" role=\"src\" />\n     <file name=\"timing.c\" role=\"src\" />\n     <file name=\"timing.h\" role=\"src\" />\n     <file name=\"var.c\" role=\"src\" />\n     <file name=\"var.h\" role=\"src\" />\n     <file name=\"var_export_html.c\" role=\"src\" />\n     <file name=\"var_export_html.h\" role=\"src\" />\n     <file name=\"var_export_line.c\" role=\"src\" />\n     <file name=\"var_export_line.h\" role=\"src\" />\n     <file name=\"var_export_text.c\" role=\"src\" />\n     <file name=\"var_export_text.h\" role=\"src\" />\n     <file name=\"var_export_xml.c\" role=\"src\" />\n     <file name=\"var_export_xml.h\" role=\"src\" />\n     <file name=\"vector.h\" role=\"src\" />\n     <file name=\"xml.c\" role=\"src\" />\n     <file name=\"xml.h\" role=\"src\" />\n    </dir>\n    <dir name=\"coverage\">\n     <file name=\"branch_info.c\" role=\"src\" />\n     <file name=\"branch_info.h\" role=\"src\" />\n     <file name=\"code_coverage.c\" role=\"src\" />\n     <file name=\"code_coverage.h\" role=\"src\" />\n     <file name=\"code_coverage_private.h\" role=\"src\" />\n    </dir>\n    <dir name=\"develop\">\n     <file name=\"develop.c\" role=\"src\" />\n     <file name=\"develop.h\" role=\"src\" />\n     <file name=\"develop_private.h\" role=\"src\" />\n     <file name=\"monitor.c\" role=\"src\" />\n     <file name=\"monitor.h\" role=\"src\" />\n     <file name=\"php_functions.c\" role=\"src\" />\n     <file name=\"stack.c\" role=\"src\" />\n     <file name=\"stack.h\" role=\"src\" />\n     <file name=\"superglobals.c\" role=\"src\" />\n     <file name=\"superglobals.h\" role=\"src\" />\n    </dir>\n    <dir name=\"debugger\">\n     <file name=\"com.c\" role=\"src\" />\n     <file name=\"com.h\" role=\"src\" />\n     <file name=\"debugger.c\" role=\"src\" />\n     <file name=\"debugger.h\" role=\"src\" />\n     <file name=\"debugger_private.h\" role=\"src\" />\n     <file name=\"handlers.c\" role=\"src\" />\n     <file name=\"handlers.h\" role=\"src\" />\n     <file name=\"handler_dbgp.c\" role=\"src\" />\n     <file name=\"handler_dbgp.h\" role=\"src\" />\n     <file name=\"ip_info.c\" role=\"src\" />\n     <file name=\"ip_info.h\" role=\"src\" />\n    </dir>\n    <dir name=\"gcstats\">\n     <file name=\"gc_stats.c\" role=\"src\" />\n     <file name=\"gc_stats.h\" role=\"src\" />\n     <file name=\"gc_stats_private.h\" role=\"src\" />\n    </dir>\n    <dir name=\"profiler\">\n     <file name=\"profiler.c\" role=\"src\" />\n     <file name=\"profiler.h\" role=\"src\" />\n     <file name=\"profiler_private.h\" role=\"src\" />\n    </dir>\n    <dir name=\"tracing\">\n     <file name=\"tracing.c\" role=\"src\" />\n     <file name=\"tracing.h\" role=\"src\" />\n     <file name=\"tracing_private.h\" role=\"src\" />\n     <file name=\"trace_computerized.c\" role=\"src\" />\n     <file name=\"trace_computerized.h\" role=\"src\" />\n     <file name=\"trace_flamegraph.c\" role=\"src\" />\n     <file name=\"trace_flamegraph.h\" role=\"src\" />\n     <file name=\"trace_html.c\" role=\"src\" />\n     <file name=\"trace_html.h\" role=\"src\" />\n     <file name=\"trace_textual.c\" role=\"src\" />\n     <file name=\"trace_textual.h\" role=\"src\" />\n    </dir>\n   </dir>\n  </dir> <!-- / -->\n </contents>\n <dependencies>\n  <required>\n   <php>\n    <min>8.0.0</min>\n    <max>8.4.99</max>\n   </php>\n   <pearinstaller>\n    <min>1.9.1</min>\n   </pearinstaller>\n  </required>\n </dependencies>\n <providesextension>xdebug</providesextension>\n <zendextsrcrelease />\n <changelog>\n\n  <release>\n   <date>2024-10-04</date>\n   <time>14:39:23</time>\n   <version>\n    <release>3.4.0beta1</release>\n    <api>3.4.0beta1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"https://xdebug.org/license/1.03\" filesource=\"LICENSE\">Xdebug-1.03</license>\n   <notes>\nFri, Oct 04, 2024 - Xdebug 3.4.0beta1\n\n= Fixed bugs:\n\n  - Fixed issue #2261: Send control socket location in init packet\n  - Fixed issue #2281: PHP 8.4 support\n   </notes>\n  </release>\n\n  <release>\n   <date>2024-05-31</date>\n   <time>09:21:23</time>\n   <version>\n    <release>3.4.0alpha1</release>\n    <api>3.4.0alpha1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"https://xdebug.org/license/1.03\" filesource=\"LICENSE\">Xdebug-1.03</license>\n   <notes>\nFri, May 31, 2024 - Xdebug 3.4.0alpha1\n\n= Fixed bugs:\n\n  - Fixed issue #2239: Add &#039;XDEBUG_IGNORE&#039; GET/POST/COOKIE/ENV to make the step debugger ignore that specific request\n  - Fixed issue #2262: PHP 8.4: Closure names need different wrapping algorithm\n\n   </notes>\n  </release>\n\n  <release>\n   <date>2024-04-15</date>\n   <time>12:51:20</time>\n   <version>\n    <release>3.3.2</release>\n    <api>3.3.2</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"https://xdebug.org/license/1.03\" filesource=\"LICENSE\">Xdebug-1.03</license>\n   <notes>\nMon, Apr 15, 2024 - Xdebug 3.3.2\n\n= Fixed bugs:\n\n  - Fixed issue #2216: With PHP8.3 and Apache 2.4.58 error_reporting() causing Apache process to hang\n  - Fixed issue #2230: Crash when xdebug and blackfire extensions are active\n  - Fixed issue #2233: High and continuous Apache server CPU use\n\n   </notes>\n  </release>\n\n  <release>\n   <date>2023-12-14</date>\n   <time>17:36:35</time>\n   <version>\n    <release>3.3.1</release>\n    <api>3.3.1</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"https://xdebug.org/license/1.03\" filesource=\"LICENSE\">Xdebug-1.03</license>\n   <notes>\nThu, Dec 14, 2023 - Xdebug 3.3.1\n\n= Fixed bugs:\n\n  - Fixed issue #2220: Test failure\n  - Fixed issue #2221: Crash when other extensions run PHP code without the stack being initialised yet\n  - Fixed issue #2223: Xdebug&#039;s constants are not available with `xdebug.mode=off`\n  - Fixed issue #2226: xdebug_get_function_stack([&#039;from_exception&#039;]) does not always find stored trace\n  - Fixed issue #2227: Crash with return value and observers\n  - Fixed issue #2228: Return value can not be fetched with property_get if top frame is an internal function\n   </notes>\n  </release>\n\n  <release>\n   <date>2023-11-30</date>\n   <time>16:27:19</time>\n   <version>\n    <release>3.3.0</release>\n    <api>3.3.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"https://xdebug.org/license/1.03\" filesource=\"LICENSE\">Xdebug-1.03</license>\n   <notes>\nThu, Nov 30, 2023 - Xdebug 3.3.0\n\n+ New features:\n\n  - Fixed issue #2171: Support for PHP 8.3\n  - Fixed issue #1732: Add support for flame graph outputs\n  - Fixed issue #2219: Add control socket on Linux to obtain information and initiate debugger or breakpoint\n  - Fixed issue #1562: Add &#039;local_vars&#039; option to &#039;xdebug_get_function_stack&#039; to include variables for each st\n  - Fixed issue #2194: Add &#039;params_as_values&#039; option to &#039;xdebug_get_function_stack&#039; to return data as values\n  - Fixed issue #2195: Add &#039;from_exception&#039; option to &#039;xdebug_get_function_stack&#039; to return the stack trace where an exception was thrown\n\n+ Improvements:\n\n  - Fixed issue #2077: Bring back xdebug.collect_params\n  - Fixed issue #2170: Show contents of Spl&#039;s ArrayIterator\n  - Fixed issue #2172: Show contents of SplDoublyLinkedList and SplPriorityQueue\n  - Fixed issue #2183: Bubble up exception message when using code evalution through protocol\n  - Fixed issue #2188: Step over with fibers does still step into fiber routines\n  - Fixed issue #2197: Add time index and memory to output of xdebug_get_function_stack\n  - Fixed issue #2203: Increase default max nesting time out from 256 to 512\n  - Fixed issue #2206: Optimise debugger breakpoints checking\n  - Fixed issue #2207: Add filenames for include and friends to flamegraph output\n  - Fixed issue #2217: xdebug://gateway pseudo host does not support IPv6\n\n= Fixed bugs:\n\n  - Fixed issue #450: &quot;Incomplete&quot; backtraces when an exception gets rethrown\n  - Fixed issue #476: Exception chaining does not work properly\n  - Fixed issue #1155: Local variables are not shown when execution break in error_handler\n  - Fixed issue #2000: Debugger evaluate expression: &quot;can&#039;t evaluate expression&quot;\n  - Fixed issue #2027: Branch/path code coverage for traits drops trait name since 3.1.0\n  - Fixed issue #2132: Errors when mountinfo does not have enough information for finding systemd private tmp directory\n  - Fixed issue #2200: PECL package file has wrong max PHP version number, and peclweb refuses the package\n  - Fixed issue #2208: Superfluous `...` (three omission dots) in var_dump()\n  - Fixed issue #2210: Flamegraphs crash when using `start_with_request`\n  - Fixed issue #2211: File wrappers get wrong filename location in stack.\n  - Fixed issue #2214: Array keys aren&#039;t escaped in traces\n\n   </notes>\n  </release>\n\n  <release>\n   <date>2023-10-19</date>\n   <time>15:42:30</time>\n   <version>\n    <release>3.3.0alpha3</release>\n    <api>3.3.0alpha3</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"https://xdebug.org/license/1.03\" filesource=\"LICENSE\">Xdebug-1.03</license>\n   <notes>\nThu, Oct 19, 2023 - Xdebug 3.3.0alpha3\n\n= Fixed bugs:\n\n  - Fixed issue #1732: Add support for flame graph outputs\n  - Fixed issue #2000: Debugger evaluate expression: &quot;can&#039;t evaluate expression&quot;\n  - Fixed issue #2077: Bring back xdebug.collect_params\n  - Fixed issue #2203: Increase default max nesting time out from 256 to 512\n  - Fixed issue #2206: Optimise debugger breakpoints checking\n\n   </notes>\n  </release>\n\n  <release>\n   <date>2023-09-06</date>\n   <time>12:53:26</time>\n   <version>\n    <release>3.3.0alpha2</release>\n    <api>3.3.0alpha2</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"https://xdebug.org/license/1.03\" filesource=\"LICENSE\">Xdebug-1.03</license>\n   <notes>\nWed, Sep 06, 2023 - Xdebug 3.3.0alpha2\n\n= Fixed bugs:\n\n  - Fixed issue #2200: PECL package file has wrong max PHP version number, and peclweb refuses the package\n   </notes>\n  </release>\n\n  <release>\n   <date>2023-09-06</date>\n   <time>09:53:58</time>\n   <version>\n    <release>3.3.0alpha1</release>\n    <api>3.3.0alpha1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"https://xdebug.org/license/1.03\" filesource=\"LICENSE\">Xdebug-1.03</license>\n   <notes>\nWed, Sep 06, 2023 - Xdebug 3.3.0alpha1\n\n+ New features:\n\n  - Fixed issue #2171: Support for PHP 8.3\n\n+ Improvements:\n\n  - Fixed issue #1562: Add &#039;local_vars&#039; option to &#039;xdebug_get_function_stack&#039; to include variables for each st\n  - Fixed issue #2170: Show contents of Spl&#039;s ArrayIterator while debugging\n  - Fixed issue #2172: Show contents of SplDoublyLinkedList and SplPriorityQueue while debugging\n  - Fixed issue #2183: Bubble up exception message when using code evalution through protocol\n  - Fixed issue #2188: Step over with fibers does still step into fiber routines\n  - Fixed issue #2194: Add &#039;params_as_values&#039; option to &#039;xdebug_get_function_stack&#039; to return data as values\n  - Fixed issue #2195: Add &#039;from_exception&#039; option to &#039;xdebug_get_function_stack&#039; to return the stack trace where an exception was thrown\n  - Fixed issue #2197: Add time index and memory to output of xdebug_get_function_stack\n\n= Fixed bugs:\n\n  - Fixed issue #450: &quot;Incomplete&quot; backtraces when an exception gets rethrown\n  - Fixed issue #476: Exception chaining does not work properly\n  - Fixed issue #2132: Errors when mountinfo does not have enough information for finding systemd private tmp directory\n   </notes>\n  </release>\n\n  <release>\n   <date>2023-07-14</date>\n   <time>09:14:53</time>\n   <version>\n    <release>3.2.2</release>\n    <api>3.2.2</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"https://xdebug.org/license/1.03\" filesource=\"LICENSE\">Xdebug-1.03</license>\n   <notes>\nFri, Jul 14, 2023 - Xdebug 3.2.2\n\n= Fixed bugs:\n\n  - Fixed issue #2175: Crash with EXC_BAD_ACCESS in xdebug_str_create\n  - Fixed issue #2180: Crash on extended SplFixedArray\n  - Fixed issue #2182: Segfault with ArrayObject on stack\n  - Fixed issue #2186: Segfault with trampoline functions and debugger activation\n   </notes>\n  </release>\n\n  <release>\n   <date>2023-03-21</date>\n   <time>16:35:27</time>\n   <version>\n    <release>3.2.1</release>\n    <api>3.2.1</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"https://xdebug.org/license/1.03\" filesource=\"LICENSE\">Xdebug-1.03</license>\n   <notes>\nTue, Mar 21, 2023 - Xdebug 3.2.1\n\n= Fixed bugs:\n\n  - Fixed issue #2144: Xdebug 3.2.0 ignores xdebug.mode and enables all features\n  - Fixed issue #2145: Xdebug 3.2.0 crash PHP on Windows if xdebug.mode = off\n  - Fixed issue #2146: apache2 segfaulting with version 3.2.0 on PHP 8.0\n  - Fixed issue #2148: Icon for link to docs in xdebug_info() HTML output does not always render correctly\n\n   </notes>\n  </release>\n\n  <release>\n   <date>2022-12-08</date>\n   <time>18:53:55</time>\n   <version>\n    <release>3.2.0</release>\n    <api>3.2.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nThu, Dec 08, 2022 - Xdebug 3.2.0\n\n+ New features:\n\n  - Fixed issue #1819: Allow a list of headers in &#039;xdebug.client_discovery_header&#039;\n  - Fixed issue #2079: Add pseudo hosts xdebug://gateway and xdebug://nameserver\n  - Fixed issue #2086: Include return value in return breakpoint interruption response\n  - Fixed issue #2087: Introduce step for the return state and virtual property for return value\n\n+ Improvements:\n\n  - Fixed issue #2062: Xdebug now records whether systemd's PrivateTmp is used in its diagnostics information\n  - Fixed issue #2104: Add support for PHP 8.2 &quot;SensitiveParameter&quot; attribute\n  - Fixed issue #2117: Removed emulated properties for closures, as PHP 8.2 adds debug information for them\n  - Fixed issue #2122: Local variables are now available when using start_upon_error\n  - Fixed issue #2123: Add warning in log and diagnositics information when a breakpoint is set on a non-existing file\n  - Fixed issue #2138: Step debugger now disconnects and continues running the script, when the debugging client closes the connection\n  - Fixed issue #2136: Duplicate line/conditional breakpoints are now rejected\n\n- Deprecations:\n\n  - Fixed issue #2014: Drop support for PHP 7.2\n  - Fixed issue #2102: Drop support for PHP 7.3\n  - Fixed issue #2103: Drop support for PHP 7.4\n\n= Fixed bugs:\n\n  - Fixed issue #2002: xdebug_trace_handler_t handler members are not always checked for NULL when executing\n  - Fixed issue #2045: Inapproriate frowny face\n  - Fixed issue #2089: Alpine Linux does not support res_ninit\n  - Fixed issue #2093: Fatal error: linux/rtnetlink.h: No such file or directory linux/rtnetlink.h\n  - Fixed issue #2098: With breakpoint_include_return_value enabled step_out break at every function\n  - Fixed issue #2105: 3.2.0alpha1 package misses the php-header.h file\n  - Fixed issue #2108: Segfault on PHP8.1 with PHPUnit 10 when path coverage is enabled\n  - Fixed issue #2113: Crash at step_into after thrown exception with return value debugging en\n  - Fixed issue #2121: Xdebug does not use local independent float-to-string functions\n  - Fixed issue #2124: Xdebug incorrectly reports that there are no children for static closure properties, even though there are\n  - Fixed issue #2125: Crash with PHP 8.2 on 32-bit due to change in &quot;not set&quot; value with CATCH opcode\n  - Fixed issue #2126: Problems with retrieving global variables\n  - Fixed issue #2127: Tracing does not handle NUL char in anonymous closure scope\n  - Fixed issue #2133: Warning with regards to extra NUL character in xdebug_setcookie call\n  - Fixed issue #2134: Xdebug stops at the line where the exception is created, not where it is thrown\n  - Fixed issue #2135: Xdebug stops twice at the same line after a call breakpoint or xdebug_break()\n\n   </notes>\n  </release>\n\n  <release>\n   <date>2022-11-10</date>\n   <time>09:56:57</time>\n   <version>\n    <release>3.2.0RC2</release>\n    <api>3.2.0RC2</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nThu, Nov 10, 2022 - Xdebug 3.2.0RC2\n\n= Fixed bugs:\n\n  - Fixed issue #2100: \"Fatal error: debuginfo() must return an array\" when Exception is thrown from debugInfo in PHP 8.x\n  - Fixed issue #2101: When a temporary breakpoint is hit, breakpoint_list should show it as disabled\n  - Fixed issue #2126: Problems with retrieving global variables\n  - Fixed issue #2127: Tracing does not handle NUL char in anonymous closure scope\n  - Fixed issue #2129: Cannot read snapshot Gzip-compressed data is corrupt\n  - Fixed issue #2133: Warning with regards to extra NUL character in xdebug_setcookie call\n  - Fixed issue #2134: Xdebug stops at the line where the exception is created, not where it is thrown\n  - Fixed issue #2135: Xdebug stops twice at the same line after a call breakpoint or xdebug_break()\n  - Fixed issue #2136: Duplicate line/conditional breakpoints are not rejected\n\n   </notes>\n  </release>\n\n  <release>\n   <date>2022-10-10</date>\n   <time>15:52:03</time>\n   <version>\n    <release>3.2.0RC1</release>\n    <api>3.2.0RC1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n  Mon, Oct 10, 2022 - Xdebug 3.2.0RC1\n\n  = Fixed bugs:\n\n    - Fixed issue #2113: Crash at step_into after thrown exception with return value debugging en\n    - Fixed issue #2117: Removed emulated properties for closures, as PHP 8.2 adds debug information for them\n    - Fixed issue #2121: Xdebug does not use local independent float-to-string functions\n    - Fixed issue #2122: Local variables are not available when using start_upon_error\n    - Fixed issue #2123: Add warning in log and diagnositics information when a breakpoint is set on a non-existing file\n    - Fixed issue #2124: Xdebug incorrectly reports that there are no children for static closure properties, even thought there are\n    - Fixed issue #2125: Crash with PHP 8.2 on 32-bit due to change in &quot;not set&quot; value with CATCH opcode\n\n   </notes>\n  </release>\n\n  <release>\n   <date>2022-08-24</date>\n   <time>09:21:42</time>\n   <version>\n    <release>3.2.0alpha3</release>\n    <api>3.2.0alpha3</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nWed, Aug 24, 2022 - Xdebug 3.2.0alpha3\n\n+ Improvements:\n\n  - Fixed issue #2112: Force &#039;return_value&#039; breakpoint information and step to &#039;on&#039; temporarily\n   </notes>\n  </release>\n\n  <release>\n   <date>2022-07-25</date>\n   <time>10:07:50</time>\n   <version>\n    <release>3.2.0alpha2</release>\n    <api>3.2.0alpha2</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Jul 25, 2022 - Xdebug 3.2.0alpha2\n\n= Fixed bugs:\n\n  - Fixed issue #2105: 3.2.0alpha1 package misses the php-header.h file\n\n   </notes>\n  </release>\n\n  <release>\n   <date>2022-07-20</date>\n   <time>15:57:59</time>\n   <version>\n    <release>3.2.0alpha1</release>\n    <api>3.2.0alpha1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nWed, Jul 20, 2022 - Xdebug 3.2.0alpha1\n\n+ New features:\n\n  - Fixed issue #1819: Allow a list of headers in &#039;xdebug.client_discovery_header&#039;\n  - Fixed issue #2079: Add pseudo hosts xdebug://gateway and xdebug://nameserver\n  - Fixed issue #2087: Introduce step for the return state and virtual property for return value\n  - Fixed issue #2104: Add support for PHP 8.2 &quot;SensitiveParameter&quot; attribute\n\n+ Improvements:\n\n  - Fixed issue #2086: Include return value in return breakpoint interruption response\n\n- Removed features:\n\n  - Fixed issue #2014: Drop support for PHP 7.2\n  - Fixed issue #2102: Drop support for PHP 7.3\n  - Fixed issue #2103: Drop support for PHP 7.4\n\n= Fixed bugs:\n\n  - Fixed issue #2002: xdebug_trace_handler_t handler members are not always checked for NULL when executing\n  - Fixed issue #2045: Inapproriate frowny face\n  - Fixed issue #2062: Profiler can&#039;t able to write cachegrind file at /tmp\n  - Fixed issue #2089: Alpine Linux does not support res_ninit\n  - Fixed issue #2093: Fatal error: linux/rtnetlink.h: No such file or directory  linux/rtnetlink.h\n  - Fixed issue #2098: With breakpoint_include_return_value enabled step_out break at every function\n   </notes>\n  </release>\n\n  <release>\n   <date>2022-11-08</date>\n   <time>13:08:25</time>\n   <version>\n    <release>3.1.6</release>\n    <api>3.1.6</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n  Tue, Nov 08, 2022 - Xdebug 3.1.6\n\n  = Fixed bugs:\n\n    - Fixed issue #2100: \"Fatal error: debuginfo() must return an array\" when Exception is thrown from debugInfo in PHP 8.x\n    - Fixed issue #2101: When a temporary breakpoint is hit, breakpoint_list should show it as disabled\n    - Fixed issue #2129: Cannot read snapshot Gzip-compressed data is corrupt\n\n   </notes>\n  </release>\n\n  <release>\n   <date>2022-06-06</date>\n   <time>16:30:05</time>\n   <version>\n    <release>3.1.5</release>\n    <api>3.1.5</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Jun 06, 2022 - Xdebug 3.1.5\n\n= Fixed bugs:\n\n  - Fixed issue #2056: Install documentation gives wrong arch for installation on M1 Macs\n  - Fixed issue #2082: phpize --clean removes required clocks.m4 file\n  - Fixed issue #2083: Constant defined with an enum case produce double &quot;facet&quot; attribute in context_get response\n  - Fixed issue #2085: Crash when used with source guardian encoded files\n  - Fixed issue #2090: Segfault in __callStatic() after FFI initialization\n\n   </notes>\n  </release>\n\n  <release>\n   <date>2022-04-04</date>\n   <time>11:33:07</time>\n   <version>\n    <release>3.1.4</release>\n    <api>3.1.4</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Apr 04, 2022 - Xdebug 3.1.4\n\n= Fixed bugs:\n\n  - Fixed issue #2006: Removing second call breakpoint with same function name\n  - Fixed issue #2060: XDebug breaks the Symfony &quot;PhpFilesAdapter&quot; cache adapter\n  - Fixed issue #2061: Possible use after free with GC Stats\n  - Fixed issue #2063: Can't inspect ArrayObject storage elements\n  - Fixed issue #2064: Segmentation fault in symfony cache\n  - Fixed issue #2068: Debug session can be started with &quot;XDEBUG_SESSION_START=anything&quot; when xdebug.trigger_value is set\n  - Fixed issue #2069: Warn when profiler_append is used together with zlib compression\n  - Fixed issue #2075: Code coverage misses static array assignment lines\n   </notes>\n  </release>\n\n  <release>\n   <date>2022-02-01</date>\n   <time>16:29:04</time>\n   <version>\n    <release>3.1.3</release>\n    <api>3.1.3</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nTue, Feb 01, 2022 - Xdebug 3.1.3\n\n= Fixed bugs:\n\n  - Fixed issue #2049: evaling broken code (still) causes unhandled exception in PHP 7.4\n  - Fixed issue #2052: Memory leak when a trace file can't be opened because xdebug.trace_output_name is invalid\n  - Fixed issue #2054: Slowdown when calling a function with long string parameters\n  - Fixed issue #2055: Debugger creates XML with double facet attribute\n\n   </notes>\n  </release>\n\n  <release>\n   <date>2021-12-01</date>\n   <time>15:41:13</time>\n   <version>\n    <release>3.1.2</release>\n    <api>3.1.2</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nWed, Dec 01, 2021 - Xdebug 3.1.2\n\n= Fixed bugs:\n\n  - Fixed issue #2036: Segfault on fiber switch in finally block in garbage collected fiber\n  - Fixed issue #2037: Crash when profile file can not be created\n  - Fixed issue #2041: __debugInfo is not used for var_dump output\n  - Fixed issue #2046: Segault on xdebug_get_function_stack inside a Fiber\n   </notes>\n  </release>\n\n  <release>\n   <date>2021-10-15</date>\n   <time>13:19:59</time>\n   <version>\n    <release>3.1.1</release>\n    <api>3.1.1</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nFri, Oct 15, 2021 - Xdebug 3.1.1\n\n= Fixed bugs:\n\n  - Fixed issue #2016: apache gives no output with xdebug 3.1.0b2 installed\n  - Fixed issue #2024: Apache restarts in a loop under PHP 8.1.0 RC3\n  - Fixed issue #2029: incorrect and inaccurate date and time displayed in xdebug.log and trace files\n  - Fixed issue #2030: PhpStorm step-debug not working on PHP 8.0.11\n  - Fixed issue #2032: Use runtime PHP version in DBGp and info pages instead of compiled-against version\n  - Fixed issue #2034: Xdebug throws a Segmentation fault when 'set_time_limit' function is disabled\n  - Fixed issue #2035: Xdebug block everything with localhost in XAMMP\n\n   </notes>\n  </release>\n\n  <release>\n   <date>2021-10-04</date>\n   <time>09:33:42</time>\n   <version>\n    <release>3.1.0</release>\n    <api>3.1.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Oct 04, 2021 - Xdebug 3.1.0\n\n= Fixed bugs:\n\n  - Fixed issue #1472: Add assignments to computer readable trace format\n  - Fixed issue #1537: Add links to documentation to various different &quot;features&quot; after wizard has run\n  - Fixed issue #1738: Add xdebug_notify() function to send data through DBGp to a debugging client\n  - Fixed issue #1853: Enable profile compression for cachegrind files\n  - Fixed issue #1890: Add connected client and protocol features to diagnostic page\n  - Fixed issue #1898: API for querying the currently active mode(s)\n  - Fixed issue #1933: Allow for cloud ID to be set through the trigger\n  - Fixed issue #1938: Branches in traits aren't marked as executed\n  - Fixed issue #1948: Do not redirect warning and error messages to PHP's error log if an Xdebug log is active\n  - Fixed issue #1949: private properties for internal classes can't be fetched for debugging\n  - Fixed issue #1963: php exit code = -1073741819 when xdebug.mode = off (Windows Thread Safe Only)\n  - Fixed issue #1969: Provide breakpoint ID / info in DBGp run command responses\n  - Fixed issue #1970: xdebug_get_function_stack with unnamed (internal) parameters have wrong index\n  - Fixed issue #1972: Add support for PHP 8.1 Fibers\n  - Fixed issue #1974: Add gzip support to trace files\n  - Fixed issue #1976: Switch debug session cookie to Lax, and remove expiry time\n  - Fixed issue #1978: Xdebug's log messages are cut off at 512 bytes\n  - Fixed issue #1980: PHP 8.1: Mark enum classes as &quot;enum&quot;\n  - Fixed issue #1986: Add support for multiple trigger values\n  - Fixed issue #1989: Profiling does not output correct class when parent keyword is used\n  - Fixed issue #1992: Code Coverage with filter produces Segmentation fault on xdebug_stop_code_coverage()\n  - Fixed issue #1993: eval-ing broken code causes stepping to break\n  - Fixed issue #1996: Add support for Closure visualisation in traces, debugging, and Xdebug's var_dump\n  - Fixed issue #1997: Added xdebug_connect_to_client() to attempt a debugging connect while running code\n  - Fixed issue #1998: Double facet attribute generated for enums that are stored in properties\n  - Fixed issue #1999: Add &quot;readonly&quot; facet to PHP 8.1 readonly properties\n  - Fixed issue #2001: Add 'xdebug.use_compression' setting to turn on/off compression for profiling files\n  - Fixed issue #2004: Figure out what &quot;XDEBUG_SHOW_FNAME_TODO&quot; define is for\n  - Fixed issue #2007: xdebug 3.x fails to build on OS X 10.11 or earlier due to clock_gettime_nsec_np requirement\n  - Fixed issue #2008: Using the XDEBUG_SESSION cookie could bypass shared-secret checks\n  - Fixed issue #2009: xdebug_stop_code_coverage's argument has type mismatch\n  - Fixed issue #2011: Closures as protected properties have double facet XML attribute\n  - Fixed issue #2013: Support PHP 8.1\n  - Fixed issue #2018: zlib compression support on Windows\n  - Fixed issue #2019: Xdebug crash because of uninitialized memory\n  - Fixed issue #2020: segfault if xdebug.dump.GET=* and integer key without value in URL\n  - Fixed issue #2021: Segmentation fault due to NULL bytes in internal anonymous class names\n  - Fixed issue #2025: Anonymous classes which extend are not detected as anonymous classes since PHP 8.0\n   </notes>\n  </release>\n\n  <release>\n   <date>2021-09-07</date>\n   <time>13:53:49</time>\n   <version>\n    <release>3.1.0beta2</release>\n    <api>3.1.0beta2</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nTue, Sep 07, 2021 - Xdebug 3.1.0beta2\n\n= Fixed bugs:\n  - This is a packaging fix only release. The package missed a file that were needed\n    for building on PHP 7.2 and 8.1.\n   </notes>\n  </release>\n\n  <release>\n   <date>2021-09-05</date>\n   <time>16:22:41</time>\n   <version>\n    <release>3.1.0beta1</release>\n    <api>3.1.0beta1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nSun, Sep 05, 2021 - Xdebug 3.1.0beta1\n\n+ New features:\n\n  - Fixed issue #1738: Add xdebug_notify() function to send data through DBGp to a debugging client\n  - Fixed issue #1853: Enable profile compression for cachegrind files\n  - Fixed issue #1898: API for querying the currently active mode(s)\n  - Fixed issue #1972: Add support for PHP 8.1 Fibers\n  - Fixed issue #1974: Add gzip support to trace files\n  - Fixed issue #1997: Added xdebug_connect_to_client() to attempt a debugging connect while running code\n  - Fixed issue #2001: Add 'xdebug.use_compression' setting to turn on/off compression for profiling files\n  - Fixed issue #2013: Support PHP 8.1\n\n+ Improvements:\n\n  - Fixed issue #1472: Add assignments to computer readable trace format\n  - Fixed issue #1890: Add connected client and protocol features to diagnostic page\n  - Fixed issue #1933: Allow for cloud ID to be set through the trigger\n  - Fixed issue #1969: Provide breakpoint ID / info in DBGp run command responses\n  - Fixed issue #1976: Switch debug session cookie to Lax, and remove expiry time\n  - Fixed issue #1980: PHP 8.1: Mark enum classes as &quot;enum&quot;\n  - Fixed issue #1986: Add support for multiple trigger values\n  - Fixed issue #1996: Add support for Closure visualisation in traces, debugging, and Xdebug's var_dump\n  - Fixed issue #1999: Add &quot;readonly&quot; facet to PHP 8.1 readonly properties\n\n= Fixed bugs:\n\n  - Fixed issue #1938: Branches in traits aren't marked as executed\n  - Fixed issue #1948: Do not redirect warning and error messages to PHP's error log if an Xdebug log is active\n  - Fixed issue #1949: private properties for internal classes can't be fetched for debugging\n  - Fixed issue #1963: php exit code = -1073741819 when xdebug.mode = off (Windows Thread Safe Only)\n  - Fixed issue #1970: xdebug_get_function_stack with unnamed (internal) parameters have wrong index\n  - Fixed issue #1978: Xdebug's log messages are cut off at 512 bytes\n  - Fixed issue #1989: Profiling does not output correct class when parent keyword is used\n  - Fixed issue #1992: Code Coverage with filter produces Segmentation fault on xdebug_stop_code_coverage()\n  - Fixed issue #1993: eval-ing broken code causes stepping to break\n  - Fixed issue #1998: Double facet attribute generated for enums that are stored in properties\n  - Fixed issue #2004: Figure out what &quot;XDEBUG_SHOW_FNAME_TODO&quot; define is for\n  - Fixed issue #2008: Using the XDEBUG_SESSION cookie could bypass shared-secret checks\n  - Fixed issue #2009: xdebug_stop_code_coverage's argument has type mismatch\n  - Fixed issue #2011: Closures as protected properties have double facet XML attribute\n\n+ Documentation\n\n  - Fixed issue #1537: Add links to documentation to various different &quot;features&quot; after wizard has run\n   </notes>\n  </release>\n\n  <release>\n   <date>2021-04-08</date>\n   <time>10:32:42</time>\n   <version>\n    <release>3.0.4</release>\n    <api>3.0.4</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nThu, Apr 08, 2021 - Xdebug 3.0.4\n\n= Fixed bugs:\n\n  - Fixed issue #1802: Improve xdebug.org home page\n  - Fixed issue #1944: tracing is started without trigger, when profiler is also enabled\n  - Fixed issue #1947: xdebug_info() settings section does not show the modes that are overridden by XDEBUG_MODE\n  - Fixed issue #1950: Assignment trace with ASSIGN_OBJ_REF crashes\n  - Fixed issue #1954: Calling xdebug_start_trace without mode including tracing results in a fatal error\n   </notes>\n  </release>\n\n  <release>\n   <date>2021-02-22</date>\n   <time>10:53:09</time>\n   <version>\n    <release>3.0.3</release>\n    <api>3.0.3</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Feb 22, 2021 - Xdebug 3.0.3\n\n= Fixed bugs:\n\n  - Fixed issue #1930: No local variables with trigger and xdebug_break()\n  - Fixed issue #1931: xdebug_info() output misses configuration settings if phpinfo() has been called\n  - Fixed issue #1932: One line in multi-line string concatenation is not covered\n  - Fixed issue #1940: Wrong type used for showing GC Stats reports\n   </notes>\n  </release>\n\n  <release>\n   <date>2021-01-04</date>\n   <time>17:08:58</time>\n   <version>\n    <release>3.0.2</release>\n    <api>3.0.2</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Jan 04, 2021 - Xdebug 3.0.2\n\n= Fixed bugs:\n\n  - Fixed issue #1907: Empty exception message when setting the $message property to a stringable object\n  - Fixed issue #1910: Code coverage misses constructor property promotion code\n  - Fixed issue #1914: Compillation failure on OpenBSD\n  - Fixed issue #1915: Debugger should only start with XDEBUG_SESSION and not XDEBUG_PROFILE\n  - Fixed issue #1918: Warn if PHP's Garbage Collection is disabled in gc_stats mode\n  - Fixed issue #1919: Crash when enabling filter without the right mode active\n  - Fixed issue #1921: Xdebug does not start step debugging if start_with_request=trigger\n  - Fixed issue #1922: Code coverage misses array assignment lines\n  - Fixed issue #1924: Deprecated INI settings displayed in phpinfo()\n  - Fixed issue #1925: xdebug.start_with_request and start_upon_error display inconsistent values\n  - Fixed issue #1926: Add Xdebug mode's source to xdebug_info() output\n  - Fixed issue #1927: Crash when calling xdebug_stop_trace without a trace in progress\n  - Fixed issue #1928: xdebug_stop_gcstats() can also return false\n\n   </notes>\n  </release>\n\n  <release>\n   <date>2020-12-04</date>\n   <time>15:53:10</time>\n   <version>\n    <release>3.0.1</release>\n    <api>3.0.1</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nFri, Dec  4, 2020 - xdebug 3.0.1\n\n= Fixed bugs:\n\n  - Fixed issue #1893: Crash with ext-fiber and xdebug.mode=coverage\n  - Fixed issue #1896: Segfault with closures that are not created from user code\n  - Fixed issue #1897: Crash when removing a breakpoint\n  - Fixed issue #1900: Update README and add run-xdebug-tests.php to package\n  - Fixed issue #1901: Stack traces are shown (with a broken time) when Xdebug's mode includes 'debug' but not 'develop' or 'trace'\n  - Fixed issue #1902: Compillation failure on AIX\n  - Fixed issue #1903: Constants should always be available, regardless of which mode Xdebug is in\n  - Fixed issue #1904: Profile and trace files using %t or %u do not get the right names\n  - Fixed issue #1905: Debugger does not disable request timeouts\n   </notes>\n  </release>\n\n  <release>\n   <date>2020-11-25</date>\n   <time>16:00:00</time>\n   <version>\n    <release>3.0.0</release>\n    <api>3.0.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nWed, Nov 25, 2020 - xdebug 3.0.0\n\nXdebug 3 includes major changes in functionality compared to Xdebug 2. The\nprimary way how you turn on functionality is through the new xdebug.mode PHP\nconfiguration setting. This made it possible to massively increase performance\nin many of Xdebug's sub systems as Xdebug is now much more conservative in\nwhich hooks are enabled.\n\nConfiguration changes, massive performance improvements, and PHP 8 support are\nthe primary features in Xdebug 3, but there is much more. The upgrade guide\nlists the changes in great detail, please read it:\n\nhttps://xdebug.org/docs/upgrade_guide\n\n-------------\n\n+ New features:\n\n  - Implemented issue #1762: Introduce feature modes\n  - Implemented issue #1793: Add xdebug.start_upon_error setting to cover the removed xdebug.remote_mode=jit feature.\n  - Implemented issue #1797: Implement generic logging\n  - Implemented issue #1801: Rename mode 'display' to mode 'develop'\n  - Implemented issue #1831: Add diagnostics function xdebug_info()\n  - Implemented issue #1833: Add links to documentation in diagnostic log\n  - Implemented issue #1837: Support for associative variadic variable names (PHP 8)\n  - Implemented issue #1841: Add support for PHP 8 'match' keyword\n\n+ Improvements:\n\n  - Implemented issue #1680: Update var dumping routines to include relevant information for interned strings and immutable arrays\n  - Implemented issue #1712: Add unit to profiler data types\n  - Implemented issue #1743: Figuring out whether a call is a closure uses string comparisions instead of checking the ACC flag (Benjamin Eberlei)\n  - Implemented issue #1752: Use a stack pool to manage stack entries instead of allocating and deallocating entries\n  - Implemented issue #1755: Overload pcntl_fork() to prevent performance degradation by calling xdebug_get_pid often (Carlos Granados)\n  - Implemented issue #1781: Include 'Xdebug' in max nesting level error message\n  - Implemented issue #1783: Stacktrace needs vertical scrolling on small screens (Tobias Tom)\n  - Implemented issue #1789: Provide PHP stubs for Xdebug's functions\n  - Implemented issue #1807: Document Xdebug installation with yum and apt\n  - Implemented issue #1813: Make sure that the xdebug_init_*_globals don't do more than they need to, and that init is only done when xdebug.mode != off\n  - Implemented issue #1817: Switch filename storage from char*/size_t to zend_string*\n  - Implemented issue #1818: Switch variable storage from char*/size_t to zend_string*\n  - Implemented issue #1820: Increase time tracing precision (Michael Vorisek)\n  - Implemented issue #1824: Allow Xdebug's mode to be set through an environment variable\n  - Implemented issue #1825: Improve profiler performance by not calling fflush after every function (Michael Vorisek)\n  - Implemented issue #1826: Reduce profiler memory allocation and call overhead\n  - Implemented issue #1829: Switch to 10ns profiler resolution (Michael Vorisek)\n  - Implemented issue #1832: If connect back host can not be contacted, fallback to remote_host/port\n  - Implemented issue #1858: Only open/close log if there is an actual message to log\n  - Implemented issue #1860: Allow xdebug.cloud_id to be set through an environment variable\n  - Implemented issue #1814: Don't obtain the current time when it's not needed\n  - Implemented issue #1835: Add current trace and profile file name, to diagnostic page\n  - Implemented issue #1885: Change xdebug.start_with_ settings to PHP_INI_SYSTEM|PHP_INI_PERDIR\n  - Implemented issue #1889: max_nesting_level should only trigger in \"develop\" mode\n\n- Removed features:\n\n  - Implemented issue #1795: Deprecate PHP 7.1 support\n\n  - Implemented issue #1786: Remove idekey value fallback to USER/USERNAME environment variable\n  - Implemented issue #1809: Remove \"overload_var_dump\" setting\n  - Implemented issue #1810: Remove collect_vars and xdebug_get_declared_vars()\n  - Implemented issue #1812: Remove show_mem_delta setting\n  - Implemented issue #1838: Remove collect_params setting, and always default it to \"4\"\n  - Implemented issue #1847: Remove xdebug.remote_cookie_expire_time setting\n  - Implemented issue #1016: Removed support for pause-execution (introduced in beta1)\n  - Implemented issue #1868: Remove xdebug_disable and xdebug_enabled\n  - Implemented issue #1883: Function xdebug_is_enabled has been removed\n\n= Changes:\n\n  - Implemented issue #1378: Unfortunate coupling of default_enable=1 and remote_mode=jit\n  - Implemented issue #1773: Replace all xdebug.*_output_dir settings with xdebug.output_dir\n  - Implemented issue #1785: Replace xdebug.remote_mode and xdebug.auto_trace with generic \"start-with-request\" setting\n  - Implemented issue #1791: Replace xdebug.*trigger*, xdebug.*trigger_value*, with xdebug.start_with_request=trigger and xdebug.trigger_value\n  - Implemented issue #1792: Change start_with_request=always/never to start_with_request=yes/no\n  - Implemented issue #1794: Replace the filter's blacklist/whitelist with exclude/include\n  - Implemented issue #1811: Remove xdebug.collect_includes setting and always include them\n  - Implemented issue #1843: Adjust XDEBUG_CONFIG checks, and document what can be set through it\n  - Implemented issue #1844: Add deprecation warning for removed and renamed configuration setting names\n  - Implemented issue #1845: Rename xdebug.remote_{host,port} to xdebug.client_{host,port}\n  - Implemented issue #1846: Rename setting xdebug.remote_timeout to xdebug.connect_timeout_ms\n  - Implemented issue #1848: Change default Xdebug port from 9000 to 9003\n  - Implemented issue #1850: Change array variable output in tracing to use modern [] syntax\n  - Implemented issue #1856: Rename xdebug.remote_connect_back to xdebug.discover_client_host\n  - Implemented issue #1857: Rename xdebug.remote_addr_header to xdebug.client_discovery_header\n\n= Fixed bugs:\n\n  - Fixed issue #1608: XDEBUG_CONFIG env var make sessions automatically START ever (at least send the XDEBUG_SESSION cookie)\n  - Fixed issue #1726: Memory leaks spotted in various places in typical error code paths\n  - Fixed issue #1757: Pause-execution feature degrades performance\n  - Fixed issue #1864: Incompatibility with PCS and protobuf extensions\n  - Fixed issue #1870: XDEBUG_SESSION_START URL parameter does not override XDEBUG_SESSION cookie\n  - Fixed issue #1871: The \"idekey\" is not set when debugging is started through XDEBUG_SESSION cookie\n  - Fixed issue #1873: xdebug_info() segfaults if the diagnostic buffer is empty\n  - Fixed issue #1874: Incompatibility with protobuf extension\n  - Fixed issue #1875: Overflow with large amounts of elements for variadics\n  - Fixed issue #1878: Compilation failure: Socket options TCP_KEEPCNT and TCP_KEEPINTVL do not exist on Solaris 10 Sparc\n  - Fixed issue #1880: Bundled unit test tests/debugger/bug00886.phar misses to load phar extension\n  - Fixed issue #1887: Crash bug with xdebug_call_class and xdebug_call_file\n  - Fixed issue #1756: Php process won't exit after running connected to a client\n  - Fixed issue #1823: Profiler generates negative data for memory usage\n  - Fixed issue #1834: Return type must be bool in overloaded set_time_limit\n  - Fixed issue #1888: Make headers sticky in xdebug_info() output\n\n+ Documentation\n\n  - Fixed issue #1865: Document XDEBUG_TRIGGER environment variable\n  - Fixed issue #1866: Document comma separated xdebug.mode values\n  - Fixed issue #1884: Document where Xdebug's settings can be set\n  - Fixed issue #1892: Document changed/removed ini settings in the upgrade guide with the links provided\n   </notes>\n  </release>\n\n  <release>\n   <date>2020-11-16</date>\n   <time>10:08:58</time>\n   <version>\n    <release>3.0.0RC1</release>\n    <api>3.0.0RC1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Nov 16, 2020 - xdebug 3.0.0RC1\n\nThis is a BETA release, and not ready for production environments.\n\nXdebug 3 has many changes. Please read the upgrade guide at\nhttps://3.xdebug.org/docs/upgrade_guide\n\nXdebug 3 documentation is available at https://3.xdebug.org/docs\n\n-------------\n\n+ Improvements:\n\n  - Implemented issue #1814: Don't obtain the current time when it's not needed\n  - Implemented issue #1885: Change xdebug.start_with_ settings to PHP_INI_SYSTEM|PHP_INI_PERDIR\n\n- Removed features:\n\n  - Implemented issue #1016: Removed support for pause-execution (introduced in beta1)\n  - Implemented issue #1868: Remove xdebug_disable and xdebug_enabled\n  - Implemented issue #1883: Function xdebug_is_enabled has been removed\n\n= Fixed bugs:\n\n  - Fixed issue #1608: XDEBUG_CONFIG env var make sessions automatically START ever (at least send the XDEBUG_SESSION cookie)\n  - Fixed issue #1757: Pause-execution feature degrades performance\n  - Fixed issue #1864: Incompatibility with PCS and protobuf extensions\n  - Fixed issue #1870: XDEBUG_SESSION_START URL parameter does not override XDEBUG_SESSION cookie\n  - Fixed issue #1871: The \"idekey\" is not set when debugging is started through XDEBUG_SESSION cookie\n  - Fixed issue #1873: xdebug_info() segfaults if the diagnostic buffer is empty\n  - Fixed issue #1874: Incompatibility with protobuf extension\n  - Fixed issue #1875: Overflow with large amounts of elements for variadics\n  - Fixed issue #1878: Compilation failure: Socket options TCP_KEEPCNT and TCP_KEEPINTVL do not exist on Solaris 10 Sparc\n  - Fixed issue #1880: Bundled unit test tests/debugger/bug00886.phar misses to load phar extension\n  - Fixed issue #1887: Crash bug with xdebug_call_class and xdebug_call_file\n\n+ Documentation\n\n  - Fixed issue #1865: Document XDEBUG_TRIGGER environment variable\n  - Fixed issue #1866: Document comma separated xdebug.mode values\n  - Fixed issue #1884: Document where Xdebug's settings can be set\n   </notes>\n  </release>\n\n  <release>\n   <date>2020-10-14</date>\n   <time>16:08:58</time>\n   <version>\n    <release>3.0.0beta1</release>\n    <api>3.0.0beta1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nWed, Oct 14, 2020 - xdebug 3.0.0beta1\n\nThis is a BETA release, and not ready for production environments.\n\nXdebug 3 has many changes. Please read the upgrade guide at\nhttps://3.xdebug.org/docs/upgrade_guide\n\nXdebug 3 documentation is available at https://3.xdebug.org/docs\n\n-------------\n\n+ New features:\n\n  - Implemented issue #1762: Introduce feature modes\n  - Implemented issue #1793: Add xdebug.start_upon_error setting to cover the removed xdebug.remote_mode=jit feature.\n  - Implemented issue #1797: Implement generic logging\n  - Implemented issue #1801: Rename mode 'display' to mode 'develop'\n  - Implemented issue #1831: Add diagnostics function xdebug_info()\n  - Implemented issue #1833: Add links to documentation in diagnostic log\n  - Implemented issue #1837: Support for associative variadic variable names (PHP 8)\n  - Implemented issue #1841: Add support for PHP 8 'match' keyword\n\n- Removed features:\n\n  - Implemented issue #1795: Deprecate PHP 7.1 support\n\n  - Implemented issue #1786: Remove idekey value fallback to USER/USERNAME environment variable\n  - Implemented issue #1809: Remove \"overload_var_dump\" setting\n  - Implemented issue #1810: Remove collect_vars and xdebug_get_declared_vars()\n  - Implemented issue #1812: Remove show_mem_delta setting\n  - Implemented issue #1838: Remove collect_params setting, and always default it to \"4\"\n  - Implemented issue #1847: Remove xdebug.remote_cookie_expire_time setting\n\n= Changes:\n\n  - Implemented issue #1378: Unfortunate coupling of default_enable=1 and remote_mode=jit\n  - Implemented issue #1773: Replace all xdebug.*_output_dir settings with xdebug.output_dir\n  - Implemented issue #1785: Replace xdebug.remote_mode and xdebug.auto_trace with generic \"start-with-request\" setting\n  - Implemented issue #1791: Replace xdebug.*trigger*, xdebug.*trigger_value*, with xdebug.start_with_request=trigger and xdebug.trigger_value\n  - Implemented issue #1792: Change start_with_request=always/never to start_with_request=yes/no\n  - Implemented issue #1794: Replace the filter's blacklist/whitelist with exclude/include\n  - Implemented issue #1811: Remove xdebug.collect_includes setting and always include them\n  - Implemented issue #1844: Add deprecation warning for removed and renamed configuration setting names\n  - Implemented issue #1845: Rename xdebug.remote_{host,port} to xdebug.client_{host,port}\n  - Implemented issue #1846: Rename setting xdebug.remote_timeout to xdebug.connect_timeout_ms\n  - Implemented issue #1848: Change default Xdebug port from 9000 to 9003\n  - Implemented issue #1850: Change array variable output in tracing to use modern [] syntax\n  - Implemented issue #1856: Rename xdebug.remote_connect_back to xdebug.discover_client_host\n  - Implemented issue #1857: Rename xdebug.remote_addr_header to xdebug.client_discovery_header\n\n+ Improvements:\n\n  - Implemented issue #1680: Update var dumping routines to include relevant information for interned strings and immutable arrays\n  - Implemented issue #1712: Add unit to profiler data types\n  - Implemented issue #1743: Figuring out whether a call is a closure uses string comparisions instead of checking the ACC flag (Benjamin Eberlei)\n  - Implemented issue #1752: Use a stack pool to manage stack entries instead of allocating and deallocating entries\n  - Implemented issue #1755: Overload pcntl_fork() to prevent performance degradation by calling xdebug_get_pid often (Carlos Granados)\n  - Implemented issue #1781: Include 'Xdebug' in max nesting level error message\n  - Implemented issue #1783: Stacktrace needs vertical scrolling on small screens (Tobias Tom)\n  - Implemented issue #1789: Provide PHP stubs for Xdebug's functions\n  - Implemented issue #1807: Document Xdebug installation with yum and apt\n  - Implemented issue #1813: Make sure that the xdebug_init_*_globals don't do more than they need to, and that init is only done when xdebug.mode != off\n  - Implemented issue #1817: Switch filename storage from char*/size_t to zend_string*\n  - Implemented issue #1818: Switch variable storage from char*/size_t to zend_string*\n  - Implemented issue #1820: Increase time tracing precision (Michael Vorisek)\n  - Implemented issue #1824: Allow Xdebug's mode to be set through an environment variable\n  - Implemented issue #1825: Improve profiler performance by not calling fflush after every function (Michael Vorisek)\n  - Implemented issue #1826: Reduce profiler memory allocation and call overhead\n  - Implemented issue #1829: Switch to 10ns profiler resolution (Michael Vorisek)\n  - Implemented issue #1832: If connect back host can not be contacted, fallback to remote_host/port\n  - Implemented issue #1858: Only open/close log if there is an actual message to log\n  - Implemented issue #1860: Allow xdebug.cloud_id to be set through an environment variable\n\n= Fixed bugs:\n\n  - Fixed issue #1756: Php process won't exit after running connected to a client\n  - Fixed issue #1823: Profiler generates negative data for memory usage\n  - Fixed issue #1834: Return type must be bool in overloaded set_time_limit\n   </notes>\n  </release>\n\n  <release>\n   <date>2020-09-28</date>\n   <time>11:21:33</time>\n   <version>\n    <release>2.9.8</release>\n    <api>2.9.8</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Sep 28, 2020 - xdebug 2.9.8\n\n= Fixed bugs:\n\n  - Fixed issue #1851: Paths are not counted as coveraged with loops calling function\n  - Fixed issue #1855: Build issues on FreeBSD\n   </notes>\n  </release>\n\n  <release>\n   <date>2020-09-16</date>\n   <time>15:11:45</time>\n   <version>\n    <release>2.9.7</release>\n    <api>2.9.7</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nWed, Sep 16, 2020 - xdebug 2.9.7\n\n= Fixed bugs:\n\n  - Fixed issue #1839: Add keepalive options to debugging socket\n   </notes>\n  </release>\n\n  <release>\n   <date>2020-05-29</date>\n   <time>11:43:03</time>\n   <version>\n    <release>2.9.6</release>\n    <api>2.9.6</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nFri, May 29, 2020 - xdebug 2.9.6\n\n= Fixed bugs:\n\n  - Fixed issue #1782: Cookie \"XDEBUG_SESSION\" will be soon rejected because it has the \"sameSite\" attribute set to none\n  - Fixed issue #1787: Branch coverage data does not always follow the lines/functions format\n  - Fixed issue #1790: Segfault in var_dump() or while debugging with protobuf extension\n   </notes>\n  </release>\n\n  <release>\n   <date>2020-04-25</date>\n   <time>14:56:10</time>\n   <version>\n    <release>2.9.5</release>\n    <api>2.9.5</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nSat, Apr 25, 2020 - xdebug 2.9.5\n\n= Fixed bugs:\n\n  - Fixed issue #1772: Crash with exception thrown inside a destructor\n  - Fixed issue #1775: Segfault when another extension compiles a PHP file during RINIT\n  - Fixed issue #1779: Nested multi-line built-in function in namespace are not covered\n   </notes>\n </release>\n\n <release>\n   <date>2020-03-23</date>\n   <time>11:12:20</time>\n   <version>\n    <release>2.9.4</release>\n    <api>2.9.4</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Mar 23, 2020 - xdebug 2.9.4\n\n= Fixed bugs:\n\n  - Fixed issue #1763: Crash while setting opcode overrides in ZTS mode.\n  - Fixed issue #1766: Using the DBGp detach command disables remote debugging for the whole process.\n   </notes>\n  </release>\n\n  <release>\n   <date>2020-03-13</date>\n   <time>16:49:40</time>\n   <version>\n    <release>2.9.3</release>\n    <api>2.9.3</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nFri, Mar 13, 2020 - xdebug 2.9.3\n\n= Fixed bugs:\n\n  - Fixed issue #1753: Resolved breakpoints use information from wrong files\n  - Fixed issue #1758: Xdebug changes error_get_last results inside a try catch\n  - Fixed issue #1759: User registered opcode handlers should call ones already set by other extensions\n   </notes>\n  </release>\n\n  <release>\n   <date>2020-01-31</date>\n   <time>09:47:21</time>\n   <version>\n    <release>2.9.2</release>\n    <api>2.9.2</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nFri, Jan 31, 2020 - xdebug 2.9.2\n\n= Fixed bugs:\n\n  - Fixed issue #1735: DBGp eval warning promoted to Exception can cause out-of-sync responses\n  - Fixed issue #1736: Segmentation fault when other extensions run PHP in RINIT\n  - Fixed issue #1739: Tracing footer not written\n   </notes>\n  </release>\n\n  <release>\n   <date>2020-01-16</date>\n   <time>14:18:51</time>\n   <version>\n    <release>2.9.1</release>\n    <api>2.9.1</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nThu, Jan 16, 2020 - xdebug 2.9.1\n\n= Fixed bugs:\n\n  - Fixed issue #1721: Header may not contain NUL bytes in Unknown on line 0\n  - Fixed issue #1727: Debugger stops more often than expected due to resolving breakpoints\n  - Fixed issue #1728: INIT_STATIC_METHOD_CALL is not overloaded\n  - Fixed issue #1731: var_dump with DateTime does not output properties (Ryan Mauger)\n  - Fixed issue #1733: SEND_VAR_NO_REF_EX opcode, used for require(), is not overloaded\n  - Fixed issue #1734: Segfault with DBGp \"source\" with a out-of-range start line number\n   </notes>\n  </release>\n\n  <release>\n   <date>2019-12-09</date>\n   <time>10:44:53</time>\n   <version>\n    <release>2.9.0</release>\n    <api>2.9.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Dec  9, 2019 - xdebug 2.9.0\n\n+ Improvements:\n\n  - Fixed issue #1723: Class/function pre-analysis for code coverage speed improvements\n\n- Removed features:\n\n  - Fixed issue #1301: Removed aggregated profiler feature\n  - Fixed issue #1720: Remove superfluous xdebug.remote_handler setting\n\n= Fixed bugs:\n\n  - Fixed issue #1722: Build warning issues on FreeBSD\n  - Fixed issue #1724: Missing property types and uninitialised values in variable dumping routines\n   </notes>\n  </release>\n\n  <release>\n   <date>2019-12-02</date>\n   <time>10:46:09</time>\n   <version>\n    <release>2.8.1</release>\n    <api>2.8.1</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Dec  2, 2019 - xdebug 2.8.1\n\n= Fixed bugs:\n\n  - Fixed issue #1717: Code coverage turned slow after update from 2.7.2 to 2.8.0\n   </notes>\n  </release>\n\n  <release>\n   <date>2019-10-31</date>\n   <time>10:46:09</time>\n   <version>\n    <release>2.8.0</release>\n    <api>2.8.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nThu, Oct 31, 2019 - xdebug 2.8.0\n\n= Fixed bugs:\n\n  - Fixed issue #1665: Segfault with garbage collection and complex function arguments\n  - Fixed issue #1699: Crash during debugging Phalcon project\n  - Fixed issue #1705: Crash while debugging with ionCube being used\n  - Fixed issue #1708: Crash on evaluating object with properties\n  - Fixed issue #1709: Wrong data type breaks tests on Big Endian build\n  - Fixed issue #1713: INIT_FCALL is not overloaded in code coverage\n   </notes>\n  </release>\n\n  <release>\n   <date>2019-08-26</date>\n   <time>13:39:39</time>\n   <version>\n    <release>2.8.0beta2</release>\n    <api>2.8.0beta2</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Aug 26, 2019 - xdebug 2.8.0beta2\n\n= Fixed bugs:\n\n  - Fixed issue #1540: Code coverage should not run when turned off in php.ini\n  - Fixed issue #1573: Using an exception_handler creates an extra broken profiler file\n  - Fixed issue #1589: function names used in auto_prepend_file missing from profile file\n  - Fixed issue #1613: Wrong name displayed for Recoverable fatal error\n  - Fixed issue #1652: Problems with detach in debugger init stage\n  - Fixed issue #1676: Xdebug doesn't write trace footer for shutdown functions\n  - Fixed issue #1689: Traces show return values and exit information for functions without entry information\n  - Fixed issue #1691: Code Coverage misses fluent interface function call\n  - Fixed issue #1698: Switch PHP 7.4 Windows builds back to VS17\n  - Fixed issue #1700: Xdebug abuses possibilty immutable class flags\n   </notes>\n  </release>\n\n  <release>\n   <date>2019-07-25</date>\n   <time>15:20:11</time>\n   <version>\n    <release>2.8.0beta1</release>\n    <api>2.8.0beta1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nThu, Jul 25, 2019 - xdebug 2.8.0beta1\n\n= Fixed bugs:\n\n  - Fixed issue #1679: Code Coverage misses static property as function\n    argument\n  - Fixed issue #1682: Invalid NULL byte in debugger XML with anonymous classes\n  - Fixed issue #1683: Xdebug does not compile due to changes to ASSIGN_ADD and\n    friends operations in PHP 7.4alpha3\n  - Fixed issue #1687: Use appropriate process ID for logging and \"right\n    process\" tracking\n  - Fixed issue #1688: Improve performance by using getpid() only when step\n    debugger is active\n   </notes>\n  </release>\n\n  <release>\n   <date>2019-06-28</date>\n   <time>16:30:00</time>\n   <version>\n    <release>2.8.0alpha1</release>\n    <api>2.8.0alpha1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nFri, May 28, 2019 - xdebug 2.8.0alpha1\n\n+ Added features:\n\n  - Implemented issue #1599: Add support for PHP 7.4\n\n+ Improvements:\n\n  - Implemented issue #1388: Support 'resolved' flag for breakpoints\n  - Implemented issue #1664: Run breakpoint resolver when after a new breakpoint is added as well\n\n= Fixed bugs:\n\n  - Fixed issue #1660: Return breakpoints for methods don't break immediately\n\n- Removed features:\n\n  - Fixed issue #1666: Remove xdebug.extended_info setting\n   </notes>\n  </release>\n\n  <release>\n   <date>2019-05-06</date>\n   <time>16:48:57</time>\n   <version>\n    <release>2.7.2</release>\n    <api>2.7.2</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, May  6, 2019 - xdebug 2.7.2\n\n= Fixed bugs:\n\n  - Fixed issue #1488: Rewrite DBGp 'property_set' to always use eval\n  - Fixed issue #1586: error_reporting()'s return value is incorrect during debugger's 'eval' command\n  - Fixed issue #1615: Turn off Zend OPcache when remote debugger is turned on\n  - Fixed issue #1656: remote_connect_back alters header if multiple values are present\n  - Fixed issue #1662: __debugInfo should not be used for user-defined classes\n   </notes>\n  </release>\n\n  <release>\n   <date>2019-04-05</date>\n   <time>12:05:02</time>\n   <version>\n    <release>2.7.1</release>\n    <api>2.7.1</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nWed, Apr  5, 2019 - xdebug 2.7.1\n\n= Fixed bugs:\n\n  - Fixed issue #1646: Missing newline in error message\n  - Fixed issue #1647: Memory corruption when a conditional breakpoint is used\n  - Fixed issue #1641: Perfomance degradation with getpid syscall (Kees Hoekzema)\n   </notes>\n  </release>\n\n  <release>\n   <date>2019-03-06</date>\n   <time>11:55:24</time>\n   <version>\n    <release>2.7.0</release>\n    <api>2.7.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nWed, Mar  6, 2019 - xdebug 2.7.0\n\n= Fixed bugs:\n\n  - Fixed issue #1520: Xdebug does not handle variables and properties with \"-\" in their name\n  - Fixed issue #1577: Code coverage path analysis with chained catch fails in PHP 7.3\n  - Fixed issue #1639: Compile warning/error on GCC 8 or Clang due to \"break intentionally missing\"\n  - Fixed issue #1642: Debugger gives: \"Warning: Header may not contain NUL bytes\"\n   </notes>\n  </release>\n\n  <release>\n   <date>2019-02-15</date>\n   <time>15:29:15</time>\n   <version>\n    <release>2.7.0RC2</release>\n    <api>2.7.0RC2</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nFri, Feb 15, 2019 - xdebug 2.7.0RC2\n\n= Fixed bugs:\n\n  - Fixed issue #1551: Property with value null is not represented well\n  - Fixed issue #1621: Xdebug fails to compile cleanly on 32-bit platforms\n  - Fixed issue #1625: Work around ABI conflicts in PHP 7.3.0/PHP 7.3.1\n  - Fixed issue #1628: The PHP function name being constructed to record when GC Collection runs, is not freed\n  - Fixed issue #1629: SOAP Client/Server detection code does not handle inherited classes\n   </notes>\n  </release>\n\n  <release>\n   <date>2019-02-01</date>\n   <time>18:38:37</time>\n   <version>\n    <release>2.7.0RC1</release>\n    <api>2.7.0RC1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nFri, Feb  1, 2019 - xdebug 2.7.0RC1\n\n= Fixed bugs:\n\n  - Fixed issue #1571: File/line information is not shown for closures in namespaces.\n  - Fixed issue #1578: Compile error due to redefinition of \"zif_handler\" with old GCCs.\n  - Fixed issue #1583: Xdebug crashes when OPcache's compact literals optimisation is on.\n  - Fixed issue #1598: Make path/branch coverage work with OPcache loaded for PHP 7.3 and later.\n  - Fixed issue #1620: Division by zero when GC Stats Collection runs with memory manager disabled.\n   </notes>\n  </release>\n\n  <release>\n   <date>2018-09-20</date>\n   <time>08:56:14</time>\n   <version>\n    <release>2.7.0beta1</release>\n    <api>2.7.0beta1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nThu, Sep 20, 2018 - xdebug 2.7.0beta1\n\n+ Improvements:\n\n  - Fixed issue #1519: PHP 7.3 support\n   </notes>\n  </release>\n\n  <release>\n   <date>2018-04-01</date>\n   <time>14:41:14</time>\n   <version>\n    <release>2.7.0alpha1</release>\n    <api>2.7.0alpha1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nSun, Apr  1, 2018 - xdebug 2.7.0alpha1\n\n= Improvements:\n\n  - Fixed issue #938: Support remote debugging for PHP scripts that fork. (Sponsored by Brad Wilson)\n  - Fixed issue #1487: Re-enable IPv6 test on Travis.\n\n= Fixed bugs:\n\n  - Fixed issue #1526: Namespace filter does equality match instead of prefix match.\n  - Fixed issue #1532: SIGABRT when using remote debugging and an error is thrown in eval().\n  - Fixed issue #1543: Various memory leaks due to changes in (internal) string handling.\n   </notes>\n  </release>\n\n  <release>\n   <date>2018-08-01</date>\n   <time>23:39:23</time>\n   <version>\n    <release>2.6.1</release>\n    <api>2.6.1</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nWed, Aug  1, 2018 - xdebug 2.6.1\n\n= Fixed bugs:\n\n  - Fixed issue #1525: Namespace filter does equality match instead of prefix match\n  - Fixed issue #1532: SIGABRT when using remote debugging and an error is thrown in eval() (Philip Hofstetter)\n  - Fixed issue #1543: Various memory leaks due to changes in (internal) string handling\n  - Fixed issue #1556: Crash when register_shutdown_function() is called with a function named call_user_func*\n  - Fixed issue #1557: Remove 'return' in void xdebug_build_fname\n  - Fixed issue #1568: Can't debug object properties that have numeric keys\n\n+ Improvements:\n\n  - Fixed issue #1487: Re-enable IPv6 test on Travis\n   </notes>\n  </release>\n\n  <release>\n   <date>2018-01-29</date>\n   <time>20:07:23</time>\n   <version>\n    <release>2.6.0</release>\n    <api>2.6.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Jan 29, 2018 - xdebug 2.6.0\n\n= Fixed bugs:\n\n  - Fixed issue #1522: Remote debugging test failures on s390 (Big Endian).\n   </notes>\n  </release>\n\n  <release>\n   <date>2018-01-23</date>\n   <time>12:53:32</time>\n   <version>\n    <release>2.6.0RC2</release>\n    <api>2.6.0RC2</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nTue, Jan 23, 2018 - xdebug 2.6.0RC2\n\n= Fixed bugs:\n\n  - Fixed issue #1521: xdebug_gc_stats.* missing from 2.6.0RC1 tarball\n   </notes>\n  </release>\n\n  <release>\n   <date>2018-01-22</date>\n   <time>18:19:32</time>\n   <version>\n    <release>2.6.0RC1</release>\n    <api>2.6.0RC1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Jan 22, 2018 - xdebug 2.6.0RC1\n\n+ Added features:\n\n  - Fixed issue #1506: Add garbage collection statistics feature (Benjamin Eberlei).\n  - Fixed issue #1507: Add functions to access Zend Engine garbage collection metrics (Benjamin Eberlei).\n\n+ Improvements:\n\n  - Fixed issue #1510: Change switch/case \"break intentionally missing\" comments to use GCC 7's new \"fallthrough\" attribute.\n  - Fixed issue #1511: Detect and use compiler flags through new configure option.\n\n= Fixed bugs:\n\n  - Fixed issue #1335: Debugging with PhpStorm sometimes gives \"can not get property\".\n  - Fixed issue #1454: Invalid memory read or segfaults from a __call() method.\n  - Fixed issue #1508: Code coverage filter not checked in xdebug_common_assign_dim handler.\n  - Fixed issue #1509: Code coverage missing for case inside switch with PHP 7.2.\n  - Fixed issue #1512: Xdebug does not properly encode and escape properties with quotes and \\0 characters.\n  - Fixed issue #1514: Variable names with a NULL char are cut off at NULL char.\n  - Fixed issue #1515: Object property names with a NULL char are cut off at NULL char.\n  - Fixed issue #1516: Can't fetch variables or object properties which have \\0 characters in them.\n  - Fixed issue #1517: Notifications incorrectly specify the error type in \"type_string\" instead of \"type\".\n   </notes>\n  </release>\n\n  <release>\n   <date>2017-12-28</date>\n   <time>19:18:21</time>\n   <version>\n    <release>2.6.0beta1</release>\n    <api>2.6.0beta1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nThu, Dec 28, 2017 - xdebug 2.6.0beta1\n\n+ Added features:\n\n  - Fixed issue #1059: Add filter capabilities to tracing, stack traces, and code coverage.\n  - Fixed issue #1437: Add X-Profile-File-Name header when a profile file has been generated.\n\n+ Improvements:\n\n  - Fixed issue #1493: Run test suite in AppVeyor for Windows CI.\n  - Fixed issue #1498: Use new ZEND_EXTENSION API in config.w32 build scripts. (Kalle)\n\n= Fixed bugs:\n\n  - Fixed issue #702: Check whether variables tracing also works with =&amp;.\n  - Fixed issue #1501: Xdebug var dump tries casting properties.\n  - Fixed issue #1502: SEND_REF lines are not marked as covered.\n\n   </notes>\n  </release>\n\n  <release>\n   <date>2017-12-02</date>\n   <time>18:53:29</time>\n   <version>\n    <release>2.6.0alpha1</release>\n    <api>2.6.0alpha1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nSat, Dec  2, 2017 - xdebug 2.6.0alpha1\n\n+ Added features:\n\n  - Implemented issue #474: Added \"memory\" output to profiling files, to find out where memory is allocated.\n  - Implemented issue #575: Dump super globals contents to error log upon errors, just like when this would happen for stack traces.\n  - Implemented issue #964: Parse X-Forwarded-For for the first IP address when selecting the remote_connect_back host (Steve Easley).\n  - Implemented issue #990: Add DBGp: notifications for notices and warnings to be shown in IDEs.\n  - Implemented issue #1312: Implement extended_properties feature to remote debugging to support names and values with low ASCII values.\n  - Implemented issue #1323: Added xdebug.filename_format setting to configure the formatting of filenames when tracing.\n  - Implemented issue #1379: Added support for Unix domain sockets to xdebug.remote_host (Sara Golemon).\n  - Implemented issue #1380: Added xdebug_is_debugger_active() that returns true when debugger is connected.\n  - Implemented issue #1391: Added support for earlier stack frames through new argument for xdebug_call_* functions.\n  - Implemented issue #1420: Handle PHP 7.2's new methods for switch/case\n  - Implemented issue #1470: Added xdebug.remote_timeout to make connect timeout configurable.\n  - Implemented issue #1495: Make var_dump() also use the new xdebug.filename_format when formatting filenames.\n\n+ Improvements:\n\n  - Implemented issue #847: Added support for \"%s\" specifier for xdebug.trace_output_name.\n  - Implemented issue #1384: Compile warning on Ubuntu 16.04 with GCC 5.4.x.\n  - Implemented issue #1401: Improved error message in case the connection breaks.\n  - Implemented issue #1430: Change DBGp tests to use TEST_PHP_EXECUTABLE instead of hard coded 'php'\n  - Implemented issue #1484: Use FD_CLOEXEC with debugging sockets to prevent FDs from leaking to forked processes (Chris Wright).\n  - Improve the foldexpr in xt.vim to fold lines correctly (Donie Leigh).\n\n= Fixed bugs:\n\n  - Fixed issue #1272: property_get doesn't return @attributes for SimpleXMLElement.\n  - Fixed issue #1305: Property names with quotes can not be fetch while debugging.\n  - Fixed issue #1431: Fix \"use after free\" with in add_name_attribute_or_element.\n  - Fixed issue #1432: Fixed memory leak with xdebug_path_info_dtor.\n  - Fixed issue #1449: Debugging breaks with array element keys containing low-ASCII variables.\n  - Fixed issue #1471: Tracing crashes with return_assignments and ternairy operator.\n  - Fixed issue #1474: Crashes due to variable resolving/reading mechanism not taking care of temporary hash tables correctly (Nikita Popov, Derick).\n  - Fixed issue #1481: Fixed s390x and ppc64 builds (Remi Collet).\n  - Fixed issue #1486: Crash on ZEND_SWITCH_LONG / ZEND_SWITCH_STRING with more than 32 cases.\n  - Fixed issue #1496: Rewrite README.rst to be more clear on how to install and build Xdebug.\n\n~ Changes:\n\n  - Fixed issue #1411: Use Error (Throwable) instead of fatal error when maximum nesting level is reached.\n\n- Removed features:\n\n  - Implemented issue #1377: Drop support for PHP 5.5 and 5.6, only PHP 7 is now supported\n\n   </notes>\n  </release>\n\n  <release>\n   <date>2017-06-21</date>\n   <time>12:08:11</time>\n   <version>\n    <release>2.5.5</release>\n    <api>2.5.5</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n= Fixed bugs:\n\n  - Fixed issue #1439: TYPE_CHECK needs overloading due to smart branches\n  - Fixed issue #1444: Code Coverage misses a variable in a multi-line function\n    call\n  - Fixed issue #1446: Code Coverage misses elseif if it uses an isset with a\n    property\n   </notes>\n  </release>\n\n  <release>\n   <date>2017-05-15</date>\n   <time>12:08:11</time>\n   <version>\n    <release>2.5.4</release>\n    <api>2.5.4</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, May 15, 2017 - xdebug 2.5.4\n\n= Fixed bugs:\n\n  - Fixed issue #799: Function traces report base class instead of object name\n  - Fixed issue #1421: Fix set_time_limit hanging on PHP 5.6 when pcntl_exec\n    does not exist (Frode E. Moe)\n  - Fixed issue #1429: Code coverage does not cover null coalesce\n  - Fixed issue #1434: Code coverage segfaults on 32-bit arch\n   </notes>\n  </release>\n\n  <release>\n   <date>2017-04-18</date>\n   <time>19:31:21</time>\n   <version>\n    <release>2.5.3</release>\n    <api>2.5.3</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Apr 18, 2017 - xdebug 2.5.3\n\n= Fixed bugs:\n\n  - Fixed issue #1421: Xdebug crashes when it is loaded without pcntl being\n    present\n   </notes>\n  </release>\n\n  <release>\n   <date>2017-04-17</date>\n   <time>18:42:26</time>\n   <version>\n    <release>2.5.2</release>\n    <api>2.5.2</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Apr 17, 2017 - xdebug 2.5.2\n\n= Fixed bugs:\n\n  - Fixed issue #701: Functions as array indexes show ??? in trace\n  - Fixed issue #1403: Code coverage does not cover BIND_STATIC\n  - Fixed issue #1404: Execution time is calculated incorrectly\n  - Fixed issue #1413: Code coverage mishap with PHP 7.1.3\n  - Fixed issue #1414: Missing variable assignment in traces with OPcache\n    loaded\n  - Fixed issue #1415: Crash with multiple catch constructs with OPcache loaded\n  - Fixed issue #1416: Trace files should not include the first result of a\n    generator if it hasn't started yet\n  - Fixed issue #1417: Fetching properties of static class contexts fails due\n    to incorrect fetch mode\n  - Fixed issue #1419: Summary not written when script ended with\n    \"pcntl_exec()\"\n   </notes>\n  </release>\n\n  <release>\n   <date>2017-04-17</date>\n   <time>18:42:26</time>\n   <version>\n    <release>2.5.2</release>\n    <api>2.5.2</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nSun, Feb 26, 2017 - xdebug 2.5.1\n\n= Fixed bugs:\n\n  - Fixed issue #1057: Add xdebug.ini of all settings to package\n  - Fixed issue #1165: DBGp: step_out skips subsequent function calls\n  - Fixed issue #1180: Code coverage crashes with non-standard start/stops\n  - Fixed issue #1278: Xdebug with PHP 7 does not handle prefill-from-oparray\n    for XDEBUG_CC_UNUSED\n  - Fixed issue #1300: Xdebug functions are not exposing their signature to\n    Reflection\n  - Fixed issue #1313: Arguments to __call() trampoline picked from the wrong\n    memory location\n  - Fixed issue #1329: While printing out a stack with and function parameters,\n    XDebug reads uninitialized zvals or free()d memory\n  - Fixed issue #1381: Code Coverage misses line due to missing FETCH_DIM_W\n    overload\n  - Fixed issue #1385: can not fetch IS_INDIRECT properties\n  - Fixed issue #1386: Executable code not shown as executed/executable\n  - Fixed issue #1392: Unable to compile on FreeBSD due to missing struct\n    definition\n  - Fixed issue #1394: Code coverage does not cover instanceof (in elseif)\n   </notes>\n  </release>\n\n  <release>\n   <date>2016-12-04</date>\n   <time>18:55:08</time>\n   <version>\n    <release>2.5.0</release>\n    <api>2.5.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nSun, Dec  4, 2016 - xdebug 2.5.0\n\n+ Added features:\n\n  - Implemented issue #1232: add memory delta to HTML traces\n  - Implemented issue #1365: Allow remote_connect_back to be set through\n    XDEBUG_CONFIG\n\n= Fixed bugs:\n\n  - Fixed issue #1168: Added defensive check to prevent infinite loop\n  - Fixed issue #1242: Xdebug on Windows with Eclipse has issues with\n    breakpoint IDs\n  - Fixed issue #1343: Wrong values of numerical keys outside 32bit range\n  - Fixed issue #1357: Function signature using variadics is reported as being\n    not executed\n  - Fixed issue #1361: Remote debugging connection issues with Windows (Anatol\n    Belski)\n  - Fixed issue #1373: Crash in zend_hash_apply_with_arguments when debugging,\n    due to unset symbol table\n   </notes>\n  </release>\n\n  <release>\n   <date>2016-11-12</date>\n   <time>14:28:08</time>\n   <version>\n    <release>2.5.0RC1</release>\n    <api>2.5.0RC1</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nSat, Nov 12, 2016 - xdebug 2.5.0RC1\n\n+ Added features:\n\n  - Implemented issue #998: Added support for IPv6 (Thomas Vanhaniemi)\n  - Implemented issue #1297: Initial PHP 7.1 support\n\n= Fixed bugs:\n\n  - Fixed issue #1295: Apache crashes (SIGSEGV) when trying to establish\n    connection when sockfd is large\n  - Fixed issue #1303: POLLRDHUP is not supported outside of Gnu/Linux\n  - Fixed issue #1331: Segfault in code coverage\n\n- Removed features:\n\n  - Support for PHP versions lower than PHP 5.5 has been dropped\n   </notes>\n  </release>\n\n  <release>\n   <date>2016-08-02</date>\n   <time>11:47:08</time>\n   <version>\n    <release>2.4.1</release>\n    <api>2.4.1</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nTue, Aug 02, 2016 - xdebug 2.4.1\n\n= Fixed bugs:\n\n  - Fixed issue #1106: A thrown Exception after a class with __debugInfo gives\n    2 errors\n  - Fixed issue #1241: FAST_CALL/FAST_RET take #2\n  - Fixed issue #1246: Path and branch coverage should be initialised per\n    request, not globally\n  - Fixed issue #1263: Code coverage segmentation fault with opcache enabled\n  - Fixed issue #1277: Crash when using a userland function from RSHUTDOWN with\n    profiling enabled\n  - Fixed issue #1282: var_dump() of integers > 32 bit is broken on Windows\n  - Fixed issue #1288: Segfault when uncaught exception message does not\n    contain \" in \"\n  - Fixed issue #1291: Debugclient installation fails on Mac OS X\n  - Fixed issue #1326: Tracing and generators crashes with PHP 7.x\n  - Fixed issue #1333: Profiler accesses memory structures after freeing\n   </notes>\n  </release>\n\n  <release>\n   <date>2016-01-25</date>\n   <time>20:48:33</time>\n   <version>\n    <release>2.4.0RC4</release>\n    <api>2.4.0RC4</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Jan 25, 2016 - xdebug 2.4.0RC4\n\n= Fixed bugs:\n\n  - Fixed issue #1220: Segmentation fault if var_dump() output is too large.\n  - Fixed issue #1223: Xdebug crashes on PHP 7 when doing a DBGp eval command.\n  - Fixed issue #1229: Issues with GCC 4.8, which in -O2 move removes some\n    required code.\n  - Fixed issue #1235: Xdebug does not compile against PHP 7.1-dev due to\n    ZEND_FETCH_STATIC_PROP*.\n  - Fixed issue #1236: Can't remove breakpoints with negative IDs.\n  - Fixed issue #1238: Xdebug crashes with SIGSEGV while enumerating references\n    in variables.\n  - Fixed issue #1239: Crash due to changes with the CATCH opcode's jump\n    mechanism in 7.1\n  - Fixed issue #1241: Xdebug doesn't handle FAST_RET and FAST_CALL opcodes for\n    branch/dead code analysis, and path coverage.\n  - Fixed issue #1245: xdebug_dump_superglobals dumps *uninitialized* with PHP\n    7.\n  - Fixed issue #1250: Add PHP version descriptors to debugging log and profile\n    files.\n   </notes>\n  </release>\n\n  <release>\n   <date>2016-03-03</date>\n   <time>08:47:08</time>\n   <version>\n    <release>2.4.0</release>\n    <api>2.4.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nThu, Mar 03, 2016 - xdebug 2.4.0\n\n= Fixed bugs:\n\n  - Fixed issue #1258: Case in PHP 7.0 and code coverage\n  - Fixed issue #1261: segmentation fault in xdebug.so with PHP 7.0 version of\n    'pkgtools' due to spl_autoload()\n  - Fixed issue #1262: overload_var_dump=0 messes with xdebug_var_dump()\n  - Fixed issue #1266: xdebug_dump_superglobals() always dumps empty  stack on\n    PHP 7\n  - Fixed issue #1267: AIX build issues\n  - Fixed issue #1270: String parsing marked not covered with PHP 7\n   </notes>\n  </release>\n\n  <release>\n   <date>2015-12-12</date>\n   <time>20:42:33</time>\n   <version>\n    <release>2.4.0RC3</release>\n    <api>2.4.0RC3</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nWed, Dec 12, 2015 - xdebug 2.4.0RC3\n\n= Fixed bugs:\n\n  - Fixed issue #1221: Sort out Windows x64 PHP 7 support\n  - Fixed issue #1229: Detect GCC 4.8 and disable optimisations when it is found\n\n= Others:\n\n  - Made the test suite work for Windows too. Finally, after 13 years.\n   </notes>\n  </release>\n\n  <release>\n   <date>2015-12-02</date>\n   <time>23:31:49</time>\n   <version>\n    <release>2.4.0RC2</release>\n    <api>2.4.0RC2</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nWed, Dec 02, 2015 - xdebug 2.4.0RC2\n\n= Fixed bugs:\n\n  - Fixed issue #1181: Remote debugging does not handle exceptions after using\n    zend_read_property\n  - Fixed issue #1189: Remove address attribute from remote debugging responses\n  - Fixed issue #1194: The error message is doubly HTML-encoded with assert()\n  - Fixed issue #1210: Segfault with code coverage dead code analysis and\n    foreach on PHP 7\n  - Fixed issue #1215: SIGSEGV if xdebug.trace_output_dir directory does not\n    exist\n  - Fixed issue #1217: xdebug.show_error_trace should not be enabled by default\n  - Fixed issue #1218: Xdebug messes with the exception code, by casting it to\n    int\n  - Fixed issue #1219: Set default value for xdebug.overload_var_dump to 2 to\n    include file / line numbers by default\n  - Use long for PHP 5, and zend_long for PHP 7 for ini settings in the globals\n   </notes>\n  </release>\n\n  <release>\n   <date>2015-11-21</date>\n   <time>23:24:57</time>\n   <version>\n    <release>2.4.0RC1</release>\n    <api>2.4.0RC1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nSat, Nov 21, 2015 - xdebug 2.4.0RC1\n\n= Fixed bugs:\n\n  - Fixed issue #1195: Segfault with code coverage and foreach\n  - Fixed issue #1200: Additional opcodes need to be overloaded for PHP 7\n  - Fixed issue #1202: Anonymous classes are not handled properly while remote debugging\n  - Fixed issue #1203: Accessing static property of a class that has no static properties crashes while remote debugging\n  - Fixed issue #1209: Segfault with building a function name for create_function\n  - Restored Windows support (Includes patches by Jan Ehrhardt)\n   </notes>\n  </release>\n\n  <release>\n   <date>2015-11-05</date>\n   <time>12:42:57</time>\n   <version>\n    <release>2.4.0beta1</release>\n    <api>2.4.0beta1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nThu, Sep 05, 2015 - xdebug 2.4.0beta1\n\n+ Added features:\n\n  - Implemented issue #1109: Added support for PHP 7.\n  - Implemented issue #1153: Add function monitor functionality.\n  - Implemented issue #1183: Add xdebug.show_error_trace setting to\n    allow/disallow to show a stack trace for every Error (throwable)\n\n= Fixed bugs:\n\n  - Fixed issue #1070: Too many open files error with php-fpm: connections not\n    closed. (Patch by Sean Dubois)\n  - Fixed issue #1123: With Xdebug 2.3.1, PHPUnit with coverage is\n    exponentially slower than without\n  - Fixed issue #1166: Using $this in __debugInfo() causes infinite recursion\n  - Fixed issue #1173: Segmentation fault in xdebug_get_monitored_functions()\n  - Fixed issue #1182: Using PHPStorm with PHP 7 RC1 and xdebug 2.4-dev break\n    points are passed by including setting break point at start of script\n  - Fixed issue #1192: Dead code analysis does not work for generators with\n    'return;'\n   </notes>\n  </release>\n\n  <release>\n   <date>2015-06-19</date>\n   <time>16:15:00</time>\n   <version>\n    <release>2.3.3</release>\n    <api>2.3.3</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nFri, Jun 19, 2015 - xdebug 2.3.3\n\n= Fixed bugs:\n\n  - Fixed issue #1130: Escaping issues with docrefs and HTML characters in\n    error messages\n  - Fixed issue #1133: PDO exception code value type is changed\n  - Fixed issue #1137: Windows does not support %zu formatting for sprintf\n  - Fixed issue #1140: Tracing with __debugInfo() crashes Xdebug due to a stack\n    overflow\n  - Fixed issue #1148: Can't disable max_nesting_function\n  - Fixed issue #1151: Crash when another extension calls call_user_function()\n    during RINIT\n\n  - Fixed crash with code coverage (Antony Dovgal)\n  - Fixed usage of virtual_file_ex and STR_FREE (Remi Collet)\n  - Reset overloaded opcodes at the end of each request (Eran Ifrah)\n\n= Improvements:\n\n  - Fixed issue #686: Not possible to inspect SplObjectStorage instances with\n    Xdebug\n  - Fixed issue #864: No attributes are shown if an object extends\n    ArrayIterator\n  - Fixed issue #996: Can't evaluate property of class that extends ArrayObject\n  - Fixed issue #1134: Allow introspection of ArrayObject implementation's\n    internal storage\n  - Get rid of setlocale hack, by using %F instead of %f (and speed up tracing\n    by 15-20%)\n   </notes>\n  </release>\n\n  <release>\n   <date>2015-03-22</date>\n   <time>12:34:56</time>\n   <version>\n    <release>2.3.2</release>\n    <api>2.3.2</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nSun, Mar 22, 2015 - xdebug 2.3.2\n\n= Fixed bugs:\n\n  - Fixed issue #1117: Path/branch coverage sometimes crashes\n  - Fixed issue #1121: Segfaults with path/branch coverage\n   </notes>\n  </release>\n\n  <release>\n   <date>2015-02-24</date>\n   <time>22:02:00</time>\n   <version>\n    <release>2.3.1</release>\n    <api>2.3.1</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nTue, Feb 24, 2015 - xdebug 2.3.1\n\n= Fixed bugs:\n\n  - Fixed issue #1112: Setting an invalid xdebug.trace_format causes Xdebug to\n    crash\n  - Fixed issue #1113: xdebug.*_trigger do no longer work, due to NULL not\n    being an empty string\n   </notes>\n  </release>\n\n  <release>\n   <date>2015-02-22</date>\n   <time>14:48:00</time>\n   <version>\n    <release>2.3.0</release>\n    <api>2.3.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nSun, Feb 22, 2015 - xdebug 2.3.0\n\n= Fixed bugs:\n\n  - Fixed bug #932: Added an error message in case the remote debug log\n    couldn't be opened\n  - Fixed bug #982: Incorrect file paths in exception stack trace\n  - Fixed bug #1094: Segmentation fault when attempting to use branch/path\n    coverage\n  - Fixed bug #1101: Debugger is not triggered on xdebug_break() in JIT mode\n  - Fixed bug #1102: Stop Xdebug from crashing when debugging PHP Code with\n    \"php -r\".\n  - Fixed bug #1103: XDEBUG_SESSION_STOP_NO_EXEC only stops first script\n    executed with auto_prepend|append_files\n  - Fixed bug #1104: One character non-public properties cause issues with\n    debugging\n  - Fixed bug #1105: Setting properties without specifying a type only works in\n    topmost frame (Dominik del Bondio)\n  - Fixed bug #1095: Crash when using a non-associate array key in GLOBALS\n  - Fixed bug #1111: eval does not work when debugger is stopped in\n    xdebug_throw_exception_hook (Dominik del Bondio)\n\n+ Added features:\n\n  - General\n\n    - Implemented issue #304: File name and line number info for overloaded\n      var_dump()\n    - Implemented issue #310: Allow class vars and array keys with\n      xdebug_debug_zval()\n    - Implemented issue #722: Add stack trace limit setting.\n    - Implemented issue #1003: Add option to xdebug_print_function_stack() to\n      suppress filename and line number\n    - Implemented issue #1004: Ability to halt on warning/notice\n    - Implemented issue #1023: Add support for PHP 5.6 variadics\n    - Implemented issue #1024: Add support for PHP 5.6's ASSIGN_POW\n\n  - Debugging\n\n    - Implemented issue #406: Added support for remote debugging user-defined\n      constants\n    - Implemented issue #495: Added support for the wildcard exception name '*'\n    - Implemented issue #1066: Better error message for SELinux preventing\n      debugging connections\n    - Implemented issue #1084: Added support for extended classes to trigger\n      exception breakpoints\n    - Implemented issue #1084: Added exception code as extra element to\n      debugger XML\n\n  - Tracing\n\n    - Implemented issue #341: Added the time index and memory usage for\n      function returns in normal tracefiles\n    - Implemented issue #644: Shared secret for profiler_enable_trigger and\n      trace_enable_trigger with *_value option\n    - Implemented issue #971: Added the trace file option\n      \"XDEBUG_TRACE_NAKED_FILENAME\" to xdebug_start_trace() to prevent the\n      \".xt\" extension from being added\n    - Implemented issue #1021: Added support for return values to computerized\n      trace files\n    - Implemented issue #1022: Added support for serialized variables as format\n      in trace files in the form of option \"5\" for \"xdebug.collect_params\"\n\n  - Code coverage\n\n    - Implemented issue #380: Added xdebug_code_coverage_started()\n    - Implemented issue #1034: Add collected path and branch information to\n      xdebug_get_code_coverage() output\n\n  - Profiling\n\n    - Implement issue #1054: Support for filename and function name compression\n      in cachegrind files\n\n+ Changes:\n\n    - Implemented issue #863: Support xdebug.overload_var_dump through\n      ini_set()\n    - Implemented issue #973: Use case-insensitive filename comparison on all\n      systems (Galen Wright-Watson)\n    - Implemented issue #1015: Added the xdebug.force_display_errors and\n      xdebug.force_error_reporting php.ini-only settings to always override\n      PHP's settings for display_errors and error_reporting\n    - Implemented issue #1057: Removed trailing whitespace from example\n      xdebug.ini\n    - Implemented issue #1096: Improve performance improvement for handling\n      breakpoints by ignoring locales (Daniel Sloof)\n    - Implemented issue #1100: Raise default max_nesting_level to 256\n\n- Removed features:\n\n    - Support for PHP versions lower than PHP 5.4 have been dropped.\n   </notes>\n  </release>\n\n  <release>\n   <date>2015-01-21</date>\n   <time>21:59:00</time>\n   <version>\n    <release>2.2.7</release>\n    <api>2.2.7</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nThu, Jan 22, 2014 - xdebug 2.2.7\n\n= Fixed bugs:\n\n - Fixed bug #1083: Segfault when requesting a variable for a context that did\n   not have them.\n - Fixed bug #1087: zend_execute_script or zend_eval_string in RINIT segfaults.\n - Fixed bug #1088: Xdebug won't show dead and not executed lines at the second\n   time.\n - Fixed bug #1098: Xdebug doesn't make use of __debugInfo.\n - Fixed segfaults with ZTS on PHP 5.6.\n   </notes>\n  </release>\n\n  <release>\n   <date>2014-11-14</date>\n   <time>15:13:00</time>\n   <version>\n    <release>2.2.6</release>\n    <api>2.2.6</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nFri, Nov 14, 2014 - xdebug 2.2.6\n\n= Fixed bugs:\n\n - Fixed bug #1048: Can not get $GLOBAL variable by property_value on function\n   context.\n - Fixed bug #1073 and #1075: Segmentation fault with internal functions\n   calling internal functions.\n - Fixed bug #1085: Fixed the tracefile analyser as the format version had been\n   bumbed.\n - Fixed memory leaks\n   </notes>\n  </release>\n\n  <release>\n   <date>2014-04-29</date>\n   <time>20:44:00</time>\n   <version>\n    <release>2.2.5</release>\n    <api>2.2.5</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nTue, Apr 29, 2014 - xdebug 2.2.5\n\n= Fixed bugs:\n\n - Fixed bug #1040: Fixed uninitialized sa value.\n - Fixed building on hurd-i386.\n   </notes>\n  </release>\n\n  <release>\n   <date>2014-02-28</date>\n   <time>10:33:00</time>\n   <version>\n    <release>2.2.4</release>\n    <api>2.2.4</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nFri, Feb 28, 2014 - xdebug 2.2.4\n\n= Fixed bugs:\n\n - Fixed bug #785: Profiler does not handle closures and call_user_func_array well.\n - Fixed bug #963: Xdebug waits too long for response from remote client\n - Fixed bug #976: XDebug crashes if current varibles scope contains COM object.\n - Fixed bug #978: Inspection of array with negative keys fails\n - Fixed bug #979: property_value -m 0 should mean all bytes, not 0 bytes\n - Fixed bug #987: Hidden property names not shown.\n   </notes>\n  </release>\n\n  <release>\n   <date>2013-05-22</date>\n   <time>08:54:00</time>\n   <version>\n    <release>2.2.3</release>\n    <api>2.2.3</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nTue, May 21, 2013 - xdebug 2.2.3\n\n+ Added features:\n\n - Support for PHP 5.5.\n\n= Fixed bugs:\n\n - Fixed bug #923: Xdebug + Netbeans + ext/MongoDB crash on MongoCursor instance\n - Fixed bug #929: Directory name management in xdebug.profiler_output_dir\n - Fixed bug #931: xdebug_str_add does not check for NULL str before calling strlen on it\n - Fixed bug #935: Document the return value from xdebug_get_code_coverage()\n - Fixed bug #947: Newlines converted when html_errors = 0\n   </notes>\n  </release>\n\n  <release>\n   <date>2013-03-23</date>\n   <time>12:00:00</time>\n   <version>\n    <release>2.2.2</release>\n    <api>2.2.2</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nSat, Mar 23, 2013 - xdebug 2.2.2\n\n+ Added features:\n\n\t- Support for PHP 5.5.\n\n= Fixed bugs:\n\n\t- Fixed bug #598: Use HTTP_X_FORWARDED_FOR to determine remote debugger.\n\t- Fixed bug #625: xdebug_get_headers() -> Headers are reset unexpectedly.\n\t- Fixed bug #811: PHP Documentation Link.\n\t- Fixed bug #818: Require a php script in the PHP_RINIT causes Xdebug to crash.\n\t- Fixed bug #903: xdebug_get_headers() returns replaced headers.\n\t- Fixed bug #905: Support PHP 5.5 and generators.\n\t- Fixed bug #920: AM_CONFIG_HEADER is depreciated.\n   </notes>\n  </release>\n\n  <release>\n   <version>\n    <release>2.2.1</release>\n    <api>2.2.1</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2012-07-14</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n= Fixed bugs:\n\n\t- Fixed bug #843: Text output depends on php locale.\n\t- Fixed bug #838/#839/#840: Debugging static properties crashes Xdebug.\n\t- Fixed bug #821: Variable assignments (beginning with =>) should be\n\t  indented one more scope.\n\t- Fixed bug #811: PHP Documentation Link.\n\t- Fixed bug #800: var_dump(get_class(new foo\\bar')) add an extra \"\\\" in\n\t  class name.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.2.0</release>\n    <api>2.2.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2012-05-08</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nTue, May 08, 2012 - xdebug 2.2.0\n\n+ Added features:\n\n\t- Support for PHP 5.4.\n\n\t- Added ANSI colour output for the shell. (Including patches by Michael\n\t  Maclean)\n\t- Added var_dump() overloading on the command line (issue #457).\n\n\t- Added better support for closures in stack and function traces.\n\t- Added the size of arrays to the overloaded variable output, so that you\n\t  know how many elements there are.\n\t- Added support for X-HTTP-FORWARDED-FOR before falling back to REMOTE_ADDR\n\t  (issue #660). (Patch by Hannes Magnusson)\n\t- Added the method call type to xdebug_get_function_stack() (issue #695).\n\t- Added extra information to error printouts to tell that the error\n\t  suppression operator has been ignored due to xdebug.scream.\n\t- Added a error-specific CSS class to stack traces.\n\n+ New settings:\n\n\t- xdebug.cli_color for colouring output on the command line (Unix only).\n\t- Added xdebug.trace_enable_trigger to triger function traces through a\n\t  GET/POST/COOKIE parameter (issue #517). (Patch by Patrick Allaert)\n\t- Added support for the 'U' format specifier for function trace and\n\t  profiler filenames.\n\n+ Changes:\n\n\t- Improved performance by lazy-initializing data structures.\n\t- Improved code coverage performance. (Including some patches by Taavi\n\t  Burns)\n\t- Improved compatibility with KCacheGrind.\n\t- Improved logging of remote debugging connections, by added connection\n\t  success/failure logging to the xdebug.remote_log functionality.\n\n= Fixed bugs:\n\n\t- Fixed bug #827: Enabling Xdebug causes phpt tests to fail because of\n\t  var_dump() formatting issues.\n\t- Fixed bug #823: Single quotes are escaped in var_dumped string output.\n\t- Fixed issue #819: Xdebug 2.2.0RC2 can't stand on a breakpoint more than 30 seconds.\n\t- Fixed bug #801: Segfault with streamwrapper and unclosed $fp on\n\t  destruction.\n\t- Fixed issue #797: Xdebug crashes when fetching static properties.\n\t- Fixed bug #794: Allow coloured output on Windows.\n\t- Fixed bug #784: Unlimited feature for var_display_max_data and\n\t  var_display_max_depth is undocumented.\n\t- Fixed bug #774: Apache crashes on header() calls.\n\t- Fixed bug #764: Tailored Installation instructions do not work.\n\t- Fixed bug #758: php_value xdebug.idekey is ignored in .htaccess files\n\t- Fixed bug #728: Profiler reports __call() invocations confusingly/wrongly.\n\t- Fixed bug #687: Xdebug does not show dynamically defined variable.\n\t- Fixed bug #662: idekey is set to running user.\n\t- Fixed bug #627: Added the realpath check.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.2.0RC2</release>\n    <api>2.2.0RC2</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2012-04-22</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nTue, Apr 22, 2012 - xdebug 2.2.0rc2\n\n= Fixed bugs:\n\n\t- Fixed bug #801: Segfault with streamwrapper and unclosed $fp on\n\t  destruction.\n\t- Fixed bug #794: Allow coloured output on Windows.\n\t- Fixed bug #784: Unlimited feature for var_display_max_data and\n\t  var_display_max_depth is undocumented.\n\t- Fixed bug #774: Apache crashes on header() calls.\n\t- Fixed bug #764: Tailored Installation instructions do not work.\n\t- Fixed bug #758: php_value xdebug.idekey is ignored in .htaccess files\n\t- Fixed bug #662: idekey is set to running user.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.2.0RC1</release>\n    <api>2.2.0RC1</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2012-03-12</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nTue, Mar 13, 2012 - xdebug 2.2.0rc1\n\n+ Added features:\n\n\t- Support for PHP 5.4.\n\n\t- Added ANSI colour output for the shell. (Including patches by Michael\n\t  Maclean)\n\t- Added var_dump() overloading on the command line (issue #457).\n\n\t- Added better support for closures in stack and function traces.\n\t- Added the size of arrays to the overloaded variable output, so that you\n\t  know how many elements there are.\n\t- Added support for X-HTTP-FORWARDED-FOR before falling back to REMOTE_ADDR\n\t  (issue #660). (Patch by Hannes Magnusson)\n\t- Added the method call type to xdebug_get_function_stack() (issue #695).\n\t- Added extra information to error printouts to tell that the error\n\t  suppression operator has been ignored due to xdebug.scream.\n\t- Added a error-specific CSS class to stack traces.\n\n\n+ New settings:\n\n\t- xdebug.cli_color for colouring output on the command line (Unix only).\n\t- Added xdebug.trace_enable_trigger to triger function traces through a\n\t  GET/POST/COOKIE parameter (issue #517). (Patch by Patrick Allaert)\n\t- Added support for the 'U' format specifier for function trace and\n\t  profiler filenames.\n\n+ Changes:\n\n\t- Improved performance by lazy-initializing data structures.\n\t- Improved code coverage performance. (Including some patches by Taavi\n\t  Burns)\n\t- Improved compatibility with KCacheGrind.\n\t- Improved logging of remote debugging connections, by added connection\n\t  success/failure logging to the xdebug.remote_log functionality.\n\n= Fixed bugs:\n\n\t- No additional bug fixes besides the ones from the 2.1 branch up til\n\t  Xdebug 2.1.4.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.1.4</release>\n    <api>2.1.4</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2012-03-12</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n= Fixed bugs:\n\n\t- Fixed bug #788: Collect errors eats fatal errors.\n\t- Fixed bug #787: Segmentation Fault with PHP header_remove().\n\t- Fixed bug #778: Xdebug session in Eclipse crash whenever it run into\n\t  simplexml_load_string call.\n\t- Fixed bug #756: Added support for ZEND_*_*_OBJ and self::*.\n\t- Fixed bug #747: Still problem with error message and soap client / soap\n\t  server.\n\t- Fixed bug #744: new lines in a PHP file from Windows are displayed with\n\t  an extra white line with var_dump().\n\t- Fixed an issue with debugging and the eval command.\n\t- Fixed compilation with ZTS on PHP &lt; 5.3\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.1.3</release>\n    <api>2.1.3</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2012-01-25</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n= Fixed bugs:\n\n\t- Fixed bug #725: EG(current_execute_data) is not checked in xdebug.c,\n\t  xdebug_statement_call.\n\t- Fixed bug #723: xdebug is stricter than PHP regarding Exception property\n\t  types.\n\t- Fixed bug #714: Cachegrind files have huge (wrong) numbers in some lines.\n\t- Fixed bug #709: Xdebug doesn&apos;t understand E_USER_DEPRECATED.\n\t- Fixed bug #698: Allow xdebug.remote_connect_back to be set in .htaccess.\n\t- Fixed bug #690: Function traces are not appended to file with\n\t  xdebug_start_trace() and xdebug.trace_options=1.\n\t- Fixed bug #623: Static properties of a class can be evaluated only with\n\t  difficulty.\n\t- Fixed bug #614/#619: Viewing private variables in base classes through\n\t  the debugger.\n\t- Fixed bug #609: Xdebug and SOAP extension&apos;s error handlers conflict.\n\t- Fixed bug #606/#678/#688/#689/#704: crash after using eval on an\n\t  unparsable, or un-executable statement.\n\t- Fixed bug #305: xdebug exception handler doesn&apos;t properly handle special\n\t  chars.\n\n+ Changes:\n\n\t- Changed xdebug_break() to hint to the statement execution trap instead of\n\t  breaking forcefully adding an extra stackframe.\n\t- Prevent Xdebug 2.1.x to build with PHP 5.4.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.1.2</release>\n    <api>2.1.2</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2011-07-28</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n= Fixed bugs:\n\n\t- Fixed bug #622: Working with eval() code is inconvenient and difficult.\n\t- Fixed bug #684: xdebug_var_dump - IE does not support &amp;.\n\t- Fixed bug #693: Cachegrind files not written when filename is very long.\n\t- Fixed bug #697: Incorrect code coverage of function arguments when using\n\t  XDEBUG_CC_UNUSED.\n\t- Fixed bug #699: Xdebug gets the filename wrong for the countable\n\t  interface.\n\t- Fixed bug #703 by adding another opcode to the list that needs to be\n\t  overridden.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.1.2</release>\n    <api>2.1.2</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2011-07-28</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n= Fixed bugs:\n\n\t- Fixed bug #622: Working with eval() code is inconvenient and difficult.\n\t- Fixed bug #684: xdebug_var_dump - IE does not support &amp;.\n\t- Fixed bug #693: Cachegrind files not written when filename is very long.\n\t- Fixed bug #697: Incorrect code coverage of function arguments when using\n\t  XDEBUG_CC_UNUSED.\n\t- Fixed bug #699: Xdebug gets the filename wrong for the countable\n\t  interface.\n\t- Fixed bug #703 by adding another opcode to the list that needs to be\n\t  overridden.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.1.1</release>\n    <api>2.1.1</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2011-03-28</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nMon, Mar 28, 2011 - xdebug 2.1.1\n\n= Fixed bugs:\n\n  - Fixed ZTS compilation.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.1.1RC1</release>\n    <api>2.1.1RC1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2011-03-22</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nTue, Mar 22, 2011 - xdebug 2.1.1rc1\n\n= Fixed bugs:\n\n  = Debugger\n\t- Fixed bug #518: Removed CLASSNAME pseudo-property optional.\n\t- Fixed bug #592: Xdebug crashes with run after detach.\n\t- Fixed bug #596: Call breakpoint never works with instance methods, only\n\t  static methods.\n\t- Fixed JIT mode in the debugger so that it works for xdebug_break() too.\n\n  = Profiler\n\t- Fixed bug #631: Summary not written when script ended with &quot;exit()&quot;.\n\t- Fixed bug #639: Xdebug profiling: output not correct - missing &apos;cfl=&apos;.\n\t- Fixed bug #642: Fixed line numbers for offsetGet, offsetSet,\n\t  __get/__set/__isset/__unset and __call in profile files and stack\n\t  traces/function traces.\n\t- Fixed bug #643: Profiler gets line numbers wrong.\n\t- Fixed bug #653: XDebug profiler crashes with %H in file name and non\n\t  standard port.\n\n  = Others\n\t- Fixed bug #651: Incorrect code coverage after empty() in conditional.\n\t- Fixed bug #654: Xdebug hides error message in CLI.\n\t- Fixed bug #665: Xdebug does not respect display_errors=stderr.\n\t  Patch by Ben Spencer &lt;dangerous.ben@gmail.com&gt;\n\t- Fixed bug #670: Xdebug crashes with broken &quot;break x&quot; code.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.1.0</release>\n    <api>2.1.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2010-06-29</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nTue, Jun 29, 2010 - xdebug 2.1.0\n\n= Fixed bugs:\n\t- Fixed bug #562: Incorrect coverage information for closure function\n\t  headers.\n\t- Fixed bug #566: Xdebug crashes when using conditional breakpoints.\n\t- Fixed bug #567: xdebug_debug_zval and xdebug_debug_zval_stdout don&apos;t work\n\t  with PHP 5.3. (Patch by Endo Hiroaki).\n\t- Fixed bug #570: undefined symbol: zend_memrchr.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.1.0RC1</release>\n    <api>2.1.0RC1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2010-02-27</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nThu, Apr 06, 2010 - xdebug 2.1.0rc1\n\n= Fixed bugs:\n\t- Fixed bug #494: Private attributes of parent class unavailable when\n\t  inheriting.\n\t- Fixed bug #400: Xdebug shows errors, even when PHP is request startup\n\t  mode.\n\t- Fixed bug #421: xdebug sends back invalid characters in xml sometimes.\n\t- Fixed bug #475: Property names with null chars are not sent fully to the\n\t  client.\n\t- Fixed bug #480: Issues with the reserved resource in multi threaded\n\t  environments (Patch by Francis.Grolemund@netapp.com).\n\t- Fixed bug #558: PHP segfaults when running a nested eval.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.1.0beta3</release>\n    <api>2.1.0beta3</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2010-02-27</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nSat, Feb 27, 2010 - xdebug 2.1.0beta3\n\n= Fixed bugs:\n\t- Fixed memory corruption issues.\n\t- Fixed a threading related issue for code-coverage.\n\t- Fixed bug #532: XDebug breaks header() function.\n\t- DBGP: Prevent Xdebug from returning properties when a too high page number\n\t  has been requested.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.1.0beta2</release>\n    <api>2.1.0beta2</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2010-02-03</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nWed, Feb 03, 2010 - xdebug 2.1.0beta2\n\n= Fixed bugs:\n\t- Fixed memory leak in breakpoint handling.\n\t- Fixed bug #528: Core dump generated with remote_connect_back option set\n\t  and CLI usage.\n\t- Fixed bug #515: declare(ticks) statement confuses code coverage.\n\t- Fixed bug #512: DBGP: breakpoint_get doesn&apos;t return conditions in its\n\t  response.\n\t- Possible fix for bug #507/#517: Crashes because of uninitalised header\n\t  globals.\n\t- Fixed bug #501: Xdebug&apos;s variable tracing misses POST_INC and variants.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.1.0beta1</release>\n    <api>2.1.0beta1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2010-01-03</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nSun, Jan 03, 2010 - xdebug 2.1.0beta1\n\n+ Added features:\n\t- Added error display collection and suppressions.\n\t- Added the recording of headers being set in scripts.\n\t- Added variable assignment tracing.\n\t- Added the ability to turn of the default overriding of var_dump().\n\t- Added &quot;Scream&quot; support, which disables the @ operator.\n\t- Added a trace-file analysing script.\n\t- Added support for debugging into phars.\n\t- Added a default xdebug.ini. (Patch by Martin Schuhfu\n\t  &lt;martins@spot-media.de&gt;)\n\t- Added function parameters in computerized function traces.\n\t- PHP 5.3 compatibility.\n\t- Improved code coverage accuracy.\n\n  + New functions:\n\t- xdebug_get_formatted_function_stack(), which returns a formatted function\n\t  stack instead of displaying it.\n\t- xdebug_get_headers(), which returns all headers that have been set in a\n\t  script, both explicitly with things like header(), but also implicitly\n\t  for things like setcookie().\n\t- xdebug_start_error_collection(), xdebug_stop_error_collection() and\n\t  xdebug_get_collected_errors(), which allow you to collect all notices,\n\t  warnings and error messages that Xdebug generates from PHP&apos;s\n\t  error_reporting functionality so that you can output them at a later\n\t  point in your script by hand.\n\n  + New settings:\n\t- xdebug.collect_assignments, which enables the emitting of variable\n\t  assignments in function traces.\n\t- xdebug.file_line_format, to generate a link with a specific format for\n\t  every filename that Xdebug outputs.\n\t- xdebug.overload_var_dump, which allows you to turn off Xdebug&apos;s version\n\t  of var_dump().\n\t- xdebug.remote_cookie_expire_time, that controls the length of a\n\t  remote debugging session. (Patch by Rick Pannen &lt;pannen@gmail.com&gt;)\n\t- xdebug.scream, which makes the @ operator to be ignored.\n\n+ Changes:\n\t- Added return values for xdebug_start_code_coverage() and\n\t  xdebug_stop_code_coverage() to indicate whether the action was\n\t  successful.  xdebug_start_code_coverage() will return TRUE if the call\n\t  enabled code coverage, and FALSE if it was already enabled.\n\t  xdebug_stop_code_coverage() will return FALSE when code coverage wasn&apos;t\n\t  started yet and TRUE if it was turned on.\n\t- Added an optional argument to xdebug_print_function_stack() to display\n\t  your own message. (Patch by Mikko Koppanen).\n\t- All HTML output as generated by Xdebug now has a HTML &quot;class&quot; attribute\n\t  for easy CSS formatting.\n\n- Removed features:\n\t- Support for PHP versions lower than PHP 5.1 have been dropped.\n\t- The PHP3 and GDB debugger engines have been removed.\n\n= Fixed bugs:\n\t- Fixed support for showing $this in remote debugging sessions.\n\t- Fixed bug in formatting the display of &quot;Variables in the local scope&quot;.\n\t- Possible fix for a threading issue where the headers gathering function\n\t  would create stack overflows.\n\t- Possible fix for #324: xdebug_dump_superglobals() only dumps superglobals\n\t  that were accessed before, and #478: XDebug 2.0.x can&apos;t use %R in\n\t  xdebug.profiler_output_name if register_long_arrays is off.\n\n\t- Fixed bug #505: %s in xdebug.trace_output_name breaks functions traces.\n\t- Fixed bug #494: Private attributes of parent class unavailable when\n\t  inheriting.\n\t- Fixed bug #486: feature_get -n breakpoint_types returns out of date list.\n\t- Fixed bug #476: Xdebug doesn&apos;t support PHP 5.3&apos;s exception chaining.\n\t- Fixed bug #472: Dead Code Analysis for code coverage messed up after goto.\n\t- Fixed bug #470: Catch blocks marked as dead code unless executed.\n\t- Fixed bug #469: context_get for function variables always appear as\n\t  &quot;uninitialized&quot;.\n\t- Fixed bug #468: Property_get on $GLOBALS works only at top-level, by\n\t  adding GLOBALS to the super globals context.\n\t- Fixed bug #453: Memory leaks.\n\t- Fixed bug #445: error_prepend_string and error_append_string are ignored\n\t  by xdebug_error_cb. (Patch by Kent Davidson &lt;kent@marketruler.com&gt;)\n\t- Fixed bug #442: configure: error: &quot;you have strange libedit&quot;.\n\t- Fixed bug #439: Xdebug crash in xdebug_header_handler.\n\t- Fixed bug #423: Conflicts with funcall.\n\t- Fixed bug #419: Make use of P_tmpdir if defined instead of hard coded\n\t  &apos;/tmp&apos;.\n\t- Fixed bug #417: Response of context_get may lack page and pagesize\n\t  attributes.\n\t- Fixed bug #411: Class/function breakpoint setting does not follow the\n\t  specs.\n\t- Fixed bug #393: eval returns array data at the previous page request.\n\t- Fixed bug #391: Xdebug doesn&apos;t stop executing script on catchable fatal\n\t  errors.\n\t- Fixed bug #389: Destructors called on fatal error.\n\t- Fixed bug #368: Xdebug&apos;s debugger bails out on a parse error with the\n\t  eval command.\n\t- Fixed bug #356: Temporary breakpoints persist.\n\t- Fixed bug #355: Function numbers in trace files weren&apos;t unique.\n\t- Fixed bug #340: Segfault while throwing an Exception.\n\t- Fixed bug #328: Private properties are incorrectly enumerated in case of\n\t  extended classes.\n\t- Fixed bug #249: Xdebug&apos;s error handler messes up with the SOAP\n\t  extension&apos;s error handler.\n\n+ DBGP:\n\t- Fixed cases where private properties where shown for objects, but not\n\t  accessible.\n\t- Added a patch by Lucas Nealan (lucas@php.net) and Brian Shire\n\t  (shire@php.net) of Facebook to allow connections to the initiating\n\t  request&apos;s IP address for remote debugging.\n\t- Added the -p argument to the eval command as well, pending inclusion into\n\t  DBGP.\n\t- Added the retrieval of a file&apos;s execution lines. I added a new\n\t  un-official method called xcmd_get_executable_lines which requires the\n\t  stack depth as argument (-d). You can only fetch this information for\n\t  stack frames as it needs an available op-array which is only available\n\t  when a function is executed.\n\t- Added a fake &quot;CLASSNAME&quot; property to objects that are returned in debug\n\t  requests to facilitate deficiencies in IDEs that fail to show the &quot;classname&quot;\n\t  XML attribute.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.0.5</release>\n    <api>2.0.5</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2009-07-03</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nFri, Jul 03, 2009 - xdebug 2.0.5\n\n= Fixed bugs:\n\t- Fixed bug #425: memory leak (around 40MB for each request) when using\n\t  xdebug_start_trace.\n\t- Fixed bug #422: Segfaults when using code coverage with a parse error in\n\t  the script.\n\t- Fixed bug #418: compilation breaks with CodeWarrior for NetWare.\n\t- Fixed bug #403: &apos;call&apos; and &apos;return&apos; breakpoints triggers both on call and\n\t  return for class method breakpoints.\n\t- Fixed TSRM issues for PHP 5.2 and PHP 5.3. (Original patch by Elizabeth\n\t  M. Smith).\n\t- Fixed odd crash bugs, due to GCC 4 sensitivity.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.0.4</release>\n    <api>2.0.4</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2008-12-30</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nTue, Dec 30, 2008 - xdebug 2.0.4\n\n= Fixed bugs:\n\t- Fixed for strange jump positions in path analysis.\n\t- Fixed issues with code coverage crashing on parse errors.\n\t- Fixed code code coverage by overriding more opcodes.\n\t- Fixed issues with Xdebug stalling/crashing when detaching from remote\n\t  debugging.\n\t- Fixed crash on Vista where memory was freed with routines from a different\n\t  standard-C library than it was allocated with. (Patch by Eric Promislow\n\t  &lt;ericp@activestate.com&gt;).\n\t- Link against the correct CRT library. (Patch by Eric Promislow\n\t  &lt;ericp@activestate.com&gt;).\n\t- Sort the symbol elements according to name. (Patch by Eric Promislow\n\t  &lt;ericp@activestate.com&gt;).\n\t- Fixed support for mapped-drive UNC paths for Windows. (Patch by Eric\n\t  Promislow &lt;ericp@activestate.com&gt;).\n\t- Fixed a segfault in interactive mode while including a file.\n\t- Fixed a crash in super global dumping in case somebody was strange enough\n\t  to reassign them to a value type other than an Array.\n\t- Simplify version checking for libtool. (Patch by PGNet\n\t  &lt;pgnet.trash@gmail.com&gt;).\n\t- Fixed display of unused returned variables from functions in PHP 5.3.\n\t- Include config.w32 in the packages as well.\n\t- Fixed .dsp for building with PHP 4.\n\n+ Added features:\n\t- Support debugging into phars.\n\t- Basic PHP 5.3 support.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.0.3</release>\n    <api>2.0.3</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2008-04-09</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nWed, Apr 09, 2008 - xdebug 2.0.3\n\n= Fixed bugs:\n\t- Fixed bug #338: Crash with: xdebug.remote_handler=req.\n\t- Fixed bug #334: Code Coverage Regressions.\n\t- Fixed abstract method detection for PHP 5.3.\n\t- Fixed code coverage dead-code detection.\n\t- Ignore ZEND_ADD_INTERFACE, which is on a different line in PHP &gt;= 5.3 for\n\t  some weird reason.\n\n+ Changes:\n\t- Added a CSS-class for xdebug&apos;s var_dump().\n\t- Added support for the new E_DEPRECATED.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.0.2</release>\n    <api>2.0.2</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2007-11-11</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nSun, Nov 11, 2007 - xdebug 2.0.2\n\n= Fixed bugs:\n\t- Fixed bug #325: DBGP: &quot;detach&quot; stops further sessions being established\n\t  from Apache.\n\t- Fixed bug #321: Code coverage crashes on empty PHP files.\n\t- Fixed bug #318: Segmentation Fault in code coverage analysis.\n\t- Fixed bug #315: Xdebug crashes when including a file that doesn&apos;t exist.\n\t- Fixed bug #314: PHP CLI Error Logging thwarted when XDebug Loaded.\n\t- Fixed bug #300: Direction of var_dump().\n\t- Always set the transaction_id and command. (Related to bug #313).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.0.1</release>\n    <api>2.0.1</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2007-10-29</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nSat, Oct 20, 2007 - xdebug 2.0.1\n\n+ Changes:\n\t- Improved code coverage performance dramatically.\n\t- PHP 5.3 compatibility (no namespaces yet though).\n\n= Fixed bugs:\n\t- Fixed bug #301: Loading would cause SIGBUS on Solaris 10 SPARC. (Patch by\n\t  Sean Chalmers)\n\t- Fixed bug #300: Xdebug does not force LTR rendering for its tables.\n\t- Fixed bug #299: Computerized traces don&apos;t have a newline for return\n\t  entries if memory limit is not enabled.\n\t- Fixed bug #298: xdebug_var_dump() doesn&apos;t handle entity replacements\n\t  correctly concerning string length.\n\t- Fixed a memory free error related to remote debugging conditions.\n\t  (Related to bug #297).\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.0.0</release>\n    <api>2.0.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2007-07-18</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nWed, Jul 18, 2007 - xdebug 2.0.0\n\n+ Changes:\n\t- Put back the disabling of stack traces - apperently people were relying\n\t  on this. This brings back xdebug_enable(), xdebug_disable() and\n\t  xdebug_is_enabled().\n\t- xdebug.collect_params is no longer a boolean setting. Although it worked\n\t  fine, phpinfo() showed only just On or Off here.\n\t- Fixed the Xdebug version of raw_url_encode to not encode : and \\. This is\n\t  not necessary according to the RFCs and it makes debug breakpoints work\n\t  on Windows.\n\n= Fixed bugs:\n\t- Fixed bug #291: Tests that use SPL do not skip when SPL is not available.\n\t- Fixed bug #290: Function calls leak memory.\n\t- Fixed bug #289: Xdebug terminates connection when eval() is run in the\n\t  init stage.\n\t- Fixed bug #284: Step_over on breakpointed line made Xdebug break twice.\n\t- Fixed bug #283: Xdebug always returns $this with the value of last stack\n\t  frame.\n\t- Fixed bug #282: %s is not usable for xdebug.profiler_output_name on\n\t  Windows in all stack frames.\n\t- Fixed bug #280: var_dump() doesn&apos;t display key of array as expected.\n\t- Fixed bug #278: Code Coverage Issue.\n\t- Fixed bug #273: Remote debugging: context_get does not return context id.\n\t- Fixed bug #270: Debugger aborts when PHP&apos;s eval() is encountered.\n\t- Fixed bug #265: XDebug breaks error_get_last() .\n\t- Fixed bug #261: Code coverage issues by overloading zend_assign_dim.\n\n+ DBGP:\n\t- Added support for &quot;breakpoint_languages&quot;.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.0.0RC4</release>\n    <api>2.0.0RC4</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2007-05-17</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nWed, May 17, 2007 - xdebug 2.0.0rc4\n+ Changes:\n\t- Use microseconds instead of a tenths of microseconds to avoid confusion in\n\t  profile information.\n\t- Changed xdebug.profiler_output_name and xdebug.trace_output_name to use\n\t  modifier tags:\n\t  %c = crc32 of the current working directory\n\t  %p = pid\n\t  %r = random number\n\t  %s = script name\n\t  %t = timestamp (seconds)\n\t  %u = timestamp (microseconds)\n\t  %H = $_SERVER[&apos;HTTP_HOST&apos;]\n\t  %R = $_SERVER[&apos;REQUEST_URI&apos;]\n\t  %S = session_id (from $_COOKIE if set)\n\t  %% = literal %\n\n= Fixed bugs:\n\t- Fixed bug #255: Call Stack Table doesn&apos;t show Location on Windows.\n\t- Fixed bug #251: Using the source command with an invalid filename returns\n\t  unexpected result.\n\t- Fixed bug #243: show_exception_trace=&quot;0&quot; ignored.\n\t- Fixed bug #241: Crash in xdebug_get_function_stack().\n\t- Fixed bug #240: Crash with xdebug.remote_log on Windows.\n\t- Fixed a segfault in rendering stack traces to error logs.\n\t- Fixed a bug that prevented variable names from being recorded for remote\n\t  debug session while xdebug.collect_vars was turned off.\n\t- Fixed xdebug_dump_superglobals() in case no super globals were\n\t  configured.\n\n- Removed functions:\n\t- Removed support for Memory profiling as that didn&apos;t work properly.\n\t- Get rid of xdebug.default_enable setting and associated functions:\n\t  xdebug_disable() and xdebug_enable().\n\n+ Added features:\n\t- Implemented support for four different xdebug.collect_params settings for\n\t  stack traces and function traces.\n\t- Allow to trigger profiling by the XDEBUG_PROFILE cookie.\n\n+ DBGP:\n\t- Correctly add namespace definitions to XML.\n\t- Added the xdebug namespace that adds extra information to breakpoints if\n\t  available.\n\t- Stopped the use of &gt;error&gt; elements for exception breakpoints, as that\n\t  violates the protocol.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.0.0RC3</release>\n    <api>2.0.0RC3</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2007-01-31</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nWed, Jan 31, 2007 - xdebug 2.0.0rc3\n+ Changes:\n\t- Removed the bogus &quot;xdebug.allowed_clients&quot; setting - it was not\n\t  implemented.\n\t- Optimized used variable collection by switching to a linked list instead\n\t  of a hash. This is about 30% faster, but it needed a quick conversion to\n\t  hash in the case the information had to be shown to remove duplicate\n\t  variable names.\n\n= Fixed bugs:\n\t- Fixed bug #232: PHP log_errors functionality lost after enabling xdebug\n\t  error handler when CLI is used.\n\t- Fixed problems with opening files - the filename could cause double free\n\t  issues.\n\t- Fixed memory tracking as memory_limit is always enabled in PHP 5.2.1 and\n\t  later.\n\t- Fixed a segfault that occurred when creating printable stack traces and\n\t  collect_params was turned off.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.0.0RC2</release>\n    <api>2.0.0RC2</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2006-12-24</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\nSun, Dec 24, 2006 - xdebug 2.0.0rc2\n+ Added new features:\n\t- Implemented the &quot;xdebug.var_display_max_children&quot; setting. The default is\n\t  set to 128 children.\n\t- Added types to fancy var dumping function.\n\t- Implemented FR #210: Add a way to stop the debug session without having\n\t  to execute a script. The GET/POST parameter &quot;XDEBUG_SESSION_STOP_NO_EXEC&quot;\n\t  works in the same way as XDEBUG_SESSION_STOP, except that the script will\n\t  not be executed.\n\t- DBGP: Allow postmortem analysis.\n\t- DBGP: Added the non-standard function xcmd_profiler_name_get.\n\n+ Changes:\n\t- Fixed the issue where xdebug_get_declared_vars() did not know about\n\t  variables there are in the declared function header, but were not used in\n\t  the code. Due to this change expected arguments that were not send to a\n\t  function will now show up as ??? in stack and function traces in PHP 5.1\n\t  and PHP 5.2.\n\t- Allow xdebug.var_display_max_data and xdebug.var_display_max_depth\n\t  settings of -1 which will unlimit those settings.\n\t- DBGP: Sort super globals in Globals overview.\n\t- DBGP: Fixed a bug where error messages where not added upon errors in the\n\t  protocol.\n\t- DBGP: Change context 1 from globals (superglobals + vars in bottom most\n\t  stack frame) to just superglobals.\n\n= Fixed bugs:\n\t- Fixed linking error on AIX by adding libm.\n\t- Fixed dead code analysis for THROW.\n\t- Fixed oparray prefill caching for code coverage.\n\t- Fixed the xdebug.remote_log feature work.\n\t- DBGP: Fixed a bug where $this did not appear in the local scoped context.\n\t- DBGP: Reimplemented property_set to use the same symbol fetching function\n\t  as property_get. We now only use eval in case no type (-t) argument was\n\t  given.\n\t- DBGP: Fixed some issues with finding out the classname, which is\n\t  important for fetching private properties.\n\t- DBGP: Fixed usage of uninitialized memory that prevented looking up\n\t  numerical array keys while fetching array elements not work properly.\n\t- Fixed bug #228: Binary safety for stream output and property fetches.\n\t- Fixed bug #227: The SESSION super global does not show up in the Globals\n\t  scope.\n\t- Fixed bug #225: xdebug dumps core when protocol is GDB.\n\t- Fixed bug #224: Compile failure on Solaris.\n\t- Fixed bug #219: Memory usage delta in traces don&apos;t work on PHP 5.2.0.\n\t- Fixed bug #215: Cannot retrieve nested arrays when the array key is a\n\t  numeric index.\n\t- Fixed bug #214: The depth level of arrays was incorrectly checked so it\n\t  would show the first page of a level too deep as well.\n\t- Fixed bug #213: Dead code analysis doesn&apos;t take catches for throws into\n\t  account.\n\t- Fixed bug #211: When starting a new session with a different idekey, the\n\t  cookie is not updated.\n\t- Fixed bug #209: Additional remote debugging session started when\n\t  triggering shutdown function.\n\t- Fixed bug #208: Socket connection attempted when XDEBUG_SESSION_STOP.\n\t- Fixed PECL bug #8989: Compile error with PHP 5 and GCC 2.95.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.0.0rc1</release>\n    <api>2.0.0rc1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2006-10-08</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n+ Added new features:\n    - Implemented FR #70: Provide optional depth on xdebug_call_* functions.\n    - Partially implemented FR #50: Resource limiting for variable display. By\n      default only two levels of nested variables and max string lengths of 512\n      are shown. This can be changed by setting the ini settings\n      xdebug.var_display_max_depth and xdebug.var_display_max_data.\n    - Implemented breakpoints for different types of PHP errors. You can now\n      set an &apos;exception&apos; breakpoint on &quot;Fatal error&quot;, &quot;Warning&quot;, &quot;Notice&quot; etc.\n      This is related to bug #187.\n    - Added the xdebug_print_function_trace() function to display a stack trace on\n      demand.\n    - Reintroduce HTML tracing by adding a new tracing option &quot;XDEBUG_TRACE_HTML&quot;\n      (4).\n    - Made xdebug_stop_trace() return the trace file name, so that the\n      following works: &lt;?php echo file_get_contents( xdebug_stop_trace() ); ?&gt;\n    - Added the xdebug.collect_vars setting to tell Xdebug to collect\n      information about which variables are used in a scope. Now you don&apos;t need\n      to show variables with xdebug.show_local_vars anymore for\n      xdebug_get_declared_vars() to work.\n    - Make the filename parameter to the xdebug_start_trace() function\n      optional. If left empty it will use the same algorithm to pick a filename\n      as when you are using the xdebug.auto_trace setting.\n\n+ Changes:\n    - Implemented dead code analysis during code coverage for:\n      * abstract methods.\n      * dead code after return, throw and exit.\n      * implicit returns when a normal return is present.\n    - Improved readability of stack traces.\n    - Use PG(html_errors) instead of checking whether we run with CLI when\n      deciding when to use HTML messages or plain text messages.\n\n= Fixed bugs:\n    - Fixed bug #203: PHP errors with HTML content processed incorrectly. This\n      patch backs out the change that was made to fix bug #182.\n    - Fixed bug #198: Segfault when trying to use a non-existing debug handler.\n    - Fixed bug #197: Race condition fixes created too many files.\n    - Fixed bug #196: Profile timing on Windows does not work.\n    - Fixed bug #195: CLI Error after debugging session.\n    - Fixed bug #193: Compile problems with PHP 5.2.\n    - Fixed bug #191: File/line breakpoints are case-sensitive on Windows.\n    - Fixed bug #181: Xdebug doesn&apos;t handle uncaught exception output\n      correctly.\n    - Fixed bug #173: Coverage produces wrong coverage.\n    - Fixed a typo that prevented the XDEBUG_CONFIG option &quot;profiler_enable&quot;\n      from working.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.0.0beta6</release>\n    <api>2.0.0beta6</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2006-06-30</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n+ Added new features:\n    - Implemented FR #137: feature_get for general commands doesn&apos;t have a text field.\n    - Implemented FR #131: XDebug needs to implement paged child object requests.\n    - Implemented FR #124: Add backtrace dumping information when exception thrown.\n    - Implemented FR #70: Add feature_get breakpoint_types.\n    - Added profiling aggregation functions (patch by Andrei Zmievski)\n    - Implemented the &quot;timestamp&quot; option for the xdebug.trace_output_name and\n      xdebug.profiler_output_name settings.\n    - Added the xdebug.remote_log setting that allows you to log debugger\n      communication to a log file for debugging. This can also be set through\n      the &quot;remote_log&quot; element in the XDEBUG_CONFIG environment variable.\n    - Added a &quot;script&quot; value to the profiler_output_name option.  This will write\n      the profiler output to a filename that consists of the script&apos;s full path\n      (using underscores). ie: /var/www/index.php becomes\n      var_www_index_php_cachegrind.out. (Patch by Brian Shire).\n    - DBGp: Implemented support for hit conditions for breakpoints.\n    - DBGp: Added support for conditions for file/line breakpoints.\n    - DBGp: Added support for hit value checking to file/line breakpoints.\n    - DBGp: Added support for &quot;exception&quot; breakpoints.\n+ Performance improvements:\n    - Added a cache that prevents the code coverage functionality from running a\n      &quot;which code is executable check&quot; on every function call, even if they\n      were executed multiple times. This should speed up code coverage a lot.\n    - Speedup Xdebug but only gathering information about variables in scopes when\n      either remote debugging is used, or show_local_vars is enabled.\n= Fixed bugs:\n    - Fixed bug #184: problem with control chars in code traces\n    - Fixed bug #183: property_get -n $this-&gt;somethingnonexistent crashes the\n      debugger.\n    - Fixed bug #182: Errors are not html escaped when being displayed.\n    - Fixed bug #180: collected includes not shown in trace files. (Patch by\n      Cristian Rodriguez)\n    - Fixed bug #178: $php_errormsg and Track errors unavailable.\n    - Fixed bug #177: debugclient fails to compile due to Bison.\n    - Fixed bug #176: Segfault using SplTempFileObject.\n    - Fixed bug #173: Xdebug segfaults using SPL ArrayIterator.\n    - Fixed bug #171: set_time_limit stack overflow on 2nd request.\n    - Fixed bug #168: Xdebug&apos;s DBGp crashes on an eval command where the\n      result is an array.\n    - Fixed bug #125: show_mem_delta does not calculate correct negative values on\n      64bit machines.\n    - Fixed bug #121: property_get -n $r[2] returns the whole hash.\n    - Fixed bug #111: xdebug does not ignore set_time_limit() function during debug\n      session.\n    - Fixed bug #87: Warning about headers when &quot;register_shutdown_function&quot; used.\n    - Fixed PECL bug #6940 (XDebug ignores set_time_limit)\n    - Fixed Komodo bug 45484: no member data for objects in PHP debugger.\n    - Suppress NOP/EXT_NOP from being marked as executable code with Code\n      Coverage.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.0.0beta5</release>\n    <api>2.0.0beta5</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2005-12-31</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n+ Added new features:\n    - Implemented FR #161: var_dump doesn&apos;t show lengths for strings.\n    - Implemented FR #158: Function calls from the {main} scope always have the\n      line number 0.\n    - Implemented FR #156: it&apos;s impossible to know the time taken by the last\n      func call in xdebug trace mode 0.\n    - Implemented FR #153: xdebug_get_declared_vars().\n\n= Fixed bugs:\n    - Fixed shutdown crash with ZTS on Win32\n    - Fixed bad memory leak when a E_ERROR of exceeding memory_limit was\n      thrown.\n    - Fixed bug #154: GCC 4.0.2 optimizes too much out with -O2.\n    - Fixed bug #141: Remote context_get causes segfault.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.0.0beta4</release>\n    <api>2.0.0beta4</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2005-09-24</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n+ Added new features:\n    - Added xdebug_debug_zval_stdout().\n    - Added xdebug_get_profile_filename() function which returns the current\n      profiler dump file.\n    - Updated for latest 5.1 and 6.0 CVS versions of PHP.\n    - Added FR #148: Option to append to cachegrind files, instead of\n      overwriting.\n    - Implemented FR #114: Rename tests/*.php to tests/*.inc\n\n- Changed features:\n    - Allow &quot;xdebug.default_enable&quot; to be set everywhere.\n\n= Fixed bugs:\n    - DBGP: Xdebug should return &quot;array&quot; with property get, which is defined\n      in the typemap to the common type &quot;hash&quot;.\n    - Fixed bug #142: xdebug crashes with implicit destructor calls.\n    - Fixed bug #136: The &quot;type&quot; attribute is missing from stack_get returns.\n    - Fixed bug #133: PHP scripts exits with 0 on PHP error.\n    - Fixed bug #132: use of eval causes a segmentation fault.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.0.0beta3</release>\n    <api>2.0.0beta3</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2005-05-12</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n+ Added new features:\n    - Added the possibility to trigger the profiler by setting\n      &quot;xdebug.profiler_enable_trigger&quot; to 1 and using XDEBUG_PROFILE as a get\n      parameter.\n\n= Fixed bugs:\n    - Fixed a segfault for when an attribute value is NULL on XML string\n      generation.\n    - Fixed bug #118: Segfault with exception when remote debugging.\n    - Fixed bug #117: var_dump dows not work with &quot;private&quot;.\n    - Fixed bug #109: DBGP&apos;s eval will abort the script when the eval statement\n      is invalid.\n    - Fixed bug #108: log_only still displays some text for errors in included\n      files.\n    - Fixed bug #107: Code Coverage only detects executable code in used\n      functions and classes.\n    - Fixed bug #103: crash when running the DBGp command &apos;eval&apos; on a global\n      variable\n    - Fixed bug #95: Segfault when deinitializing Xdebug module.\n      (Patch by Maxim Poltarak &lt;demiurg@gmail.com&gt;)\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.0.0beta2</release>\n    <api>2.0.0beta2</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2004-11-28</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n+ Added new features:\n    - DBGP: Added error messages to returned errors (in most cases)\n\n+ Added new functions:\n    - xdebug_debug_zval() to debug zvals by printing its refcounts and is_ref\n      values.\n\n= Changed features:\n    - xdebug_code_coverage_stop() will now clean up the code coverage array,\n      unless you specify FALSE as parameter.\n    - The proper Xdebug type is &quot;hash&quot; for associative arrays.\n    - Extended the code-coverage functionality by returning lines with\n      executable code on them, but where not executed with a count value of -1.\n\n= Fixed bugs:\n    - DBGP: Make property_get and property_value finally work as they should,\n      including retrieving information from different depths then the most top\n      stack frame.\n    - DBGP: Fix eval&apos;ed $varnames in property_get.\n    - DBGP: Support the -d option for property_get.\n    - Fixed the exit handler hook to use the new &quot;5.1&quot; way of handling it;\n      which fortunately also works with PHP 5.0.\n    - Fixed bug #102: Problems with configure for automake 1.8.\n    - Fixed bug #101: crash with set_exeception_handler() and uncatched exceptions.\n    - Fixed bug #99: unset variables return the name as a string with property_get.\n    - Fixed bug #98: &apos;longname&apos; attribute not returned for uninitialized\n      property in context_get request.\n    - Fixed bug #94: xdebug_sprintf misbehaves with x86_64/glibc-2.3.3\n    - Fixed bug #93: Crash in lookup_hostname on x86_64\n    - Fixed bug #92: xdebug_disable() doesn&apos;t disable the exception handler.\n    - Fixed bug #68: Summary not written when script ended with &quot;exit()&quot;.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>2.0.0beta1</release>\n    <api>2.0.0beta1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2004-09-15</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n+ Added new features:\n    - Added support for the new DBGp protocol for communicating with the debug\n      engine.\n    - A computerized trace format for easier parsing by external programs.\n    - The ability to set remote debugging features via the environment.  This\n      allows an IDE to emulate CGI and still pass the configuration through to\n      the debugger.  In CGI mode, PHP does not allow -d arguments.\n    - Reimplementation of the tracing code, you can now only trace to file; this greatly\n      enhances performance as no string representation of variables need to be\n      kept in memory any more.\n    - Re-implemented profiling support. Xdebug outputs information the same way\n      that cachegrind does so it is possible to use Kcachegrind as front-end.\n    - Xdebug emits warnings when it was not loaded as a Zend extension.\n    - Added showing private, protected and public to the fancy var_dump()\n      replacement function.\n    - Added the setting of the TCP_NODELAY socket option to stop delays in\n      transferring data to the remote debugger client. (Patch by Christof J.  Reetz)\n    + DebugClient: Added setting for port to listen on and implemented running\n      the previous command when pressing just enter.\n\n+ Added new functions:\n    - xdebug_get_stack_depth() to return the current stack depth level.\n    - xdebug_get_tracefile_name() to retrieve the name of the tracefile. This\n      is useful in case auto trace is enabled and you want to clean the trace\n      file.\n    - xdebug_peak_memory_usage() which returns the peak memory\n      used in a script. (Only works when --enable-memory-limit was enabled)\n\n+ Added feature requests:\n    - FR #5: xdebug_break() function which interupts the script for the debug\n      engine.\n    - FR #30: Dump current scope information in stack traces on error.\n    - FR #88: Make the url parameter XDEBUG_SESSION_START optional. So it can\n      be disabled and the user does not need to add it.\n\n+ Added new php.ini settings:\n    - xdebug.auto_trace_file: to configure a trace file to write to as addition\n      to the xdebug.auto_trace setting which just turns on tracing.\n    - xdebug.collect_includes: separates collecting\n      names of include files from the xdebug.collect_params setting.\n    - xdebug.collect_return: showing return values in traces.\n    - xdebug.dump_global: with which you can turn off dumping of super globals\n      even in you have that configured.\n    - xdebug.extended_info: turns off the generation of extended opcodes that\n      are needed for stepping and breakpoints for the remote debugger. This is\n      useful incase you want to profile memory usage as the generation of this\n      extended info increases memory usage of oparrrays by about 33%.\n    - xdebug.profiler_output_dir: profiler output directory.\n    - xdebug.profiler_enable: enable the profiler.\n    - xdebug.show_local_vars: turn off the showing of local variables in the\n      top most stack frame on errors.\n    - xdebug.show_mem_delta: show differences between current and previous\n      memory usage on a function call level.\n    - xdebug.trace_options: to configure extra\n      options for trace dumping:\n        o XDEBUG_TRACE_APPEND option (1)\n\n= Changed features:\n    - xdebug_start_trace() now returns the filename of the tracefile (.xt is\n      added to the requested name).\n    - Changed default debugging protocol to dbgp instead of gdb.\n    - Changed default debugger port from 17869 to 9000.\n    - Changed trace file naming: xdebug.trace_output_dir is now used to\n      configure a directory to dump automatic traces; the trace file name now\n      also includes the pid (xdebug.trace_output_name=pid) or a crc32 checksum\n      of the current working dir (xdebug.trace_output_name=crc32) and traces\n      are not being appended to an existing file anymore, but simply\n      overwritten.\n    - Removed $this and $GLOBALS from showing variables in the local scope.\n\n- Removed functions:\n    - xdebug_get_function_trace/xdebug_dump_function_trace() because of the new\n      idea of tracing.\n\n= Fixed bugs:\n    - Fixed bug #89: var_dump shows empty strings garbled.\n    - Fixed bug #85: Xdebug segfaults when no idekey is set.\n    - Fixed bug #83: More than 32 parameters functions make xdebug crash.\n    - Fixed bug #75: xdebug&apos;s var_dump implementation is not binary safe.\n    - Fixed bug #73: komodo beta 4.3.7 crash.\n    - Fixed bug #72: breakpoint_get returns wrong structure.\n    - Fixed bug #69: Integer overflow in cachegrind summary.\n    - Fixed bug #67: Filenames in Xdebug break URI RFC with spaces.\n    - Fixed bug #64: Missing include of xdebug_compat.h.\n    - Fixed bug #57: Crash with overloading functions.\n    - Fixed bug #54: source command did not except missing -f parameter.\n    - Fixed bug #53: Feature get misusing the supported attribute.\n    - Fixed bug #51: Only start a debug session if XDEBUG_SESSION_START is\n      passed as GET or POST parameter, or the DBGP_COOKIE is send to the server.\n      Passing XDEBUG_SESSION_STOP as GET/POST parameter will end the debug\n      session and removes the cookie again. The cookie is also passed to the\n      remote handler backends; for DBGp it is added to the &lt;init&gt; packet.\n    - Fixed bug #49: Included file&apos;s names should not be stored by address.\n    - Fixed bug #44: Script time-outs should be disabled when debugging.\n    = Fixed bug #36: GDB handler using print causes segfault with wrong syntax\n    - Fixed bug #33: Implemented the use of the ZEND_POST_DEACTIVATE hook. Now we\n      can handle destructors safely too.\n    - Fixed bug #32: Unusual dynamic variables cause xdebug to crash.\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>1.3.1</release>\n    <api>1.3.1</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2004-04-06</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n= Fixed profiler to aggregate class/method calls correctly. (Robert Beenen)\n= Fixed debugclient to initialize socket structure correctly. (Brandon Philips\n  and David Sklar)\n= GDB: Fixed bug where the source file wasn&apos;t closed after a &quot;source&quot; command.\n  (Derick)\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>1.3.0</release>\n    <api>1.3.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2003-09-17</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n= Fixed segfault where a function name didn&apos;t exist in case of a\n &quot;call_user_function&quot;. (Derick)\n= Fixed reading a filename in case of an callback to a PHP function from an\n  internal function (like &quot;array_map()&quot;). (Derick)\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>1.3.0rc1</release>\n    <api>1.3.0rc1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2003-09-17</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n= Fixed bug with wrong file names for functions called from call_user_*().\n  (Derick)\n+ Added the option &quot;dump_superglobals&quot; to the remote debugger. If you set this\n  option to 0 the &quot;show-local&quot; and similar commands will not return any data\n  from superglobals anymore. (Derick)\n= Fixed bug #2: &quot;pear package&quot; triggers a segfault. (Derick)\n= Fixed crash bug when a function had sprintf style parameters (ie.\n  strftime()). (Derick)\n+ Added &quot;id&quot; attribute to &lt;var /&gt; elements in responses from the remove\n  debugger when the response method is XML. This makes it possible to\n  distinguish between unique elements by use of recursion for example. (Derick)\n= Improved performance greatly by doing lazy folding of variables outside\n  trace mode. (Derick)\n= Fixed a bug with &quot;quit&quot;, if it was used it disabled the extension for the\n  current process. (Derick)\n+ Added the &quot;full&quot; argument to the remote command &quot;backtrace&quot;. When this\n  argument is passed, the local variables will be returned to for each frame in\n  the stack. (Derick)\n+ Implemented xdebug_time_index() which returns the time passed since the\n  start of the script. This change also changes the output of the tracing\n  functions as the start time will no longer be the first function call, but\n  the real start time of the script. (Derick)\n+ Implemented the &quot;show-local&quot; command (shows all local variables in the\n  current scope including all contents). (Derick)\n+ Implemented conditions for breakpoints in the &quot;break&quot; command. (Derick)\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>1.2.0</release>\n    <api>1.2.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2003-04-21</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n= Fixed compilation on MacOSX. (Derick)\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>1.2.0rc2</release>\n    <api>1.2.0rc2</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2003-04-15</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n= Fixed handling Windows paths in the debugger. (Derick)\n= Fixed getting zvals out of Zend Engine 2. (Derick)\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>1.2.0rc1</release>\n    <api>1.2.0rc1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2003-04-06</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n+ Added code coverage functions to check which lines and how often they were\n  touched during execution. (Derick)\n+ Made Xdebug compatible with Zend Engine 2. (Derick)\n+ Added dumping of super globals on errors. (Harald Radi)\n+ Added XML protocol for the debugger client. (Derick)\n= Fixed handling of &quot;continue&quot; (so that it also continues with the script).\n  (Derick)\n+ Additions to the remote debugger: &quot;eval&quot; (evaluate any PHP code from the\n  debugger client). (Derick)\n+ Added profiling support to xdebug. This introduces 3 new functions,\n  xdebug_start_profiling() that begins profiling process,\n  xdebug_stop_profiling() that ends the profiling process and\n  xdebug_dump_function_trace() that dumps the profiling data. (Ilia)\n+ Implemented the &quot;kill&quot; (kills the running script) and &quot;delete&quot; (removes\n  a breakpoint on a specified element) command. (Derick)\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>1.1.0</release>\n    <api>1.1.0</api>\n   </version>\n   <stability>\n    <release>stable</release>\n    <api>stable</api>\n   </stability>\n   <date>2002-11-11</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n+ Implemented the &quot;list&quot; (source listing), &quot;print&quot; (printing variable\n  contents), &quot;show&quot; (show all variables in the scope), &quot;step&quot; (step through\n  execution), &quot;pwd&quot; (print working directory), &quot;next&quot; (step over) and &quot;finish&quot;\n  (step out) commands for the remote debugger. (Derick)\n= Fixed lots of small bugs, under them memory leaks and crash bugs. (Derick)\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>1.1.0pre2</release>\n    <api>1.1.0pre2</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2002-10-29</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n+ Implemented class::method, object-&gt;method and file.ext:line style\n  breakpoints. (Derick)\n+ Added xdebug.collect_params setting. If this setting is on (the default)\n  then Xdebug collects all parameters passed to functions, otherwise they\n  are not collected at all. (Derick)\n+ Implemented correct handling of include/require and eval. (Derick)\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>1.1.0pre1</release>\n    <api>1.1.0pre1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2002-10-22</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n+ Added automatic starting of function traces (xdebug.auto_trace, defaulting to\n  &quot;off&quot;). (Derick)\n- Xdebug no longer supports PHP versions below PHP 4.3.0pre1. (Derick)\n+ Added gdb compatible debugger handler with support for simple (function only)\n  breakpoints. (Derick)\n= Implemented a new way to get class names and file names. (Derick, Thies C.\n  Arntzen &lt;thies@thieso.net&gt;)\n+ Added time-index and memory footprint to CLI dumps. (Derick)\n+ Implemented remote debugger handler abstraction. (Derick)\n+ Added a php3 compatible debugger handler. (Derick)\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>1.0.0rc1</release>\n    <api>1.0.0rc1</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2002-09-01</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n+ Implemented gathering of parameters to internal functions (only available\n  in combination with PHP 4.3.0-dev). (Derick)\n= Implemented a new way to get class names and file names. (Derick, Thies C.\n  Arntzen &gt;thies@thieso.net&lt;)\n+ Added support for error messages with stack trace in syslog. (Sergio\n  Ballestrero &gt;s.ballestrero@planetweb.it&lt;)\n= Windows compilation fixes. (Derick)\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>0.9.0</release>\n    <api>0.9.0</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2002-06-16</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n= Fixed a memory leak in delayed included files. (Derick)\n- Added support for PHP 4.1.2. (Derick)\n= Rewrote xdebug_get_function_stack() and xdebug_get_function_trace() to return\n  data in multidimensional arrays. (Derick)\n= Fixed compiling without memory limit enabled (Sander Roobol, Derick)\n- Add support for classnames, variable include files and variable\n  function names. (Derick)\n- Implemented links to the PHP Manual in traces. (Derick)\n- Added timestamps and memory usage to function traces. (Derick)\n= Fixed crash when using an user defined session handler. (Derick)\n+ Implemented variable function names ($a = &apos;foo&apos;; $f();) for use in\n  traces. (Derick)\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>0.8.0</release>\n    <api>0.8.0</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2002-05-26</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n+ Implemented much better parameter tracing for user defined\n  functions. (Derick)\n= Renamed xdebug_get_function_trace() to xdebug_dump_function_trace().\n  (Derick)\n= Implemented new xdebug_get_function_trace() to return the function trace in\n  an array. (Derick)\n+ Added a parameter to xdebug_start_trace(). When this parameter is used,\n  xdebug will dump a function trace to the filename which this parameter\n  speficies. (Derick)\n- Fix a problem with nested member functions. (Derick)\n= Make configure scripts work with PHP 4.2.x. (Derick)\n+ Implemented handling single-dimensional constant arrays passed to a\n  function. (Derick)\n= Fix function traces in windows. (Derick)\n+ Implemented function traces, which you can start and stop with\n  xdebug_start_trace() and xdebug_stop_trace(). You can view the trace by using\n  the return array from xdebug_get_function_trace(). (Derick)\n= Fixed segfaults with xdebug_call_*(). (Derick)\n   </notes>\n  </release>\n  <release>\n   <version>\n    <release>0.7.0</release>\n    <api>0.7.0</api>\n   </version>\n   <stability>\n    <release>beta</release>\n    <api>beta</api>\n   </stability>\n   <date>2002-05-08</date>\n   <license uri=\"http://www.opensource.org/licenses/bsd-license.php\">BSD style</license>\n   <notes>\n+ Implemented handling of static method calls (foo::bar). (Derick)\n+ Added correct handling of include(_once)/require(_once) and eval().\n  (Derick)\n+ Added ini setting to change the default setting for enabling showing\n  enhanced error messages. (Defaults to &quot;On&quot;). (Derick)\n+ Added the functions xdebug_enable() and xdebug_disable() to change the\n  showing of stack traces from within your code. (Derick)\n= Fixed the extension to show all errors. (Derick)\n+ Implemented xdebug_memory_usage() which returns the memory in use by PHPs\n  engine. (Derick)\n   </notes>\n  </release>\n </changelog>\n</package>\n<!--\nvim:et:ts=1:sw=1:fileencoding=ascii\n-->\n"
        },
        {
          "name": "php_xdebug.h",
          "type": "blob",
          "size": 3.3740234375,
          "content": "/*\n   +----------------------------------------------------------------------+\n   | Xdebug                                                               |\n   +----------------------------------------------------------------------+\n   | Copyright (c) 2002-2024 Derick Rethans                               |\n   +----------------------------------------------------------------------+\n   | This source file is subject to version 1.01 of the Xdebug license,   |\n   | that is bundled with this package in the file LICENSE, and is        |\n   | available at through the world-wide-web at                           |\n   | https://xdebug.org/license.php                                       |\n   | If you did not receive a copy of the Xdebug license and are unable   |\n   | to obtain it through the world-wide-web, please send a note to       |\n   | derick@xdebug.org so we can mail you a copy immediately.             |\n   +----------------------------------------------------------------------+\n */\n\n#ifndef PHP_XDEBUG_H\n#define PHP_XDEBUG_H\n\n#define XDEBUG_NAME       \"Xdebug\"\n#define XDEBUG_VERSION    \"3.5.0-dev\"\n#define XDEBUG_AUTHOR     \"Derick Rethans\"\n#define XDEBUG_COPYRIGHT  \"Copyright (c) 2002-2024 by Derick Rethans\"\n#define XDEBUG_COPYRIGHT_SHORT \"Copyright (c) 2002-2024\"\n#define XDEBUG_URL        \"https://xdebug.org\"\n#define XDEBUG_URL_FAQ    \"https://xdebug.org/docs/faq#api\"\n\n#include \"lib/php-header.h\"\n\n#ifdef HAVE_CONFIG_H\n# include \"config.h\"\n#endif\n\n#include \"base/base_globals.h\"\n#include \"coverage/branch_info.h\"\n#include \"coverage/code_coverage.h\"\n#include \"debugger/debugger.h\"\n#include \"develop/develop.h\"\n#include \"lib/lib.h\"\n#include \"gcstats/gc_stats.h\"\n#include \"profiler/profiler.h\"\n#include \"tracing/tracing.h\"\n#include \"lib/compat.h\"\n#include \"lib/hash.h\"\n#include \"lib/llist.h\"\n#include \"lib/vector.h\"\n#include \"lib/timing.h\"\n\nextern zend_module_entry xdebug_module_entry;\n#define phpext_xdebug_ptr &xdebug_module_entry\n\n#define OUTPUT_NOT_CHECKED -1\n#define OUTPUT_IS_TTY       1\n#define OUTPUT_NOT_TTY      0\n\n#ifdef PHP_WIN32\n#define PHP_XDEBUG_API __declspec(dllexport)\n#else\n#define PHP_XDEBUG_API\n#endif\n\n#ifdef ZTS\n#include \"TSRM.h\"\n#endif\n\n#include \"main/SAPI.h\"\n\n#define XDEBUG_ALLOWED_HALT_LEVELS (E_WARNING | E_NOTICE | E_USER_WARNING | E_USER_NOTICE )\n\nPHP_MINIT_FUNCTION(xdebug);\nPHP_MSHUTDOWN_FUNCTION(xdebug);\nPHP_RINIT_FUNCTION(xdebug);\nPHP_RSHUTDOWN_FUNCTION(xdebug);\nPHP_MINFO_FUNCTION(xdebug);\nZEND_MODULE_POST_ZEND_DEACTIVATE_D(xdebug);\n\nint xdebug_is_output_tty();\n\nZEND_BEGIN_MODULE_GLOBALS(xdebug)\n\tstruct {\n\t\txdebug_base_globals_t     base;\n\t\txdebug_coverage_globals_t coverage;\n\t\txdebug_debugger_globals_t debugger;\n\t\txdebug_develop_globals_t  develop;\n\t\txdebug_gc_stats_globals_t gc_stats;\n\t\txdebug_library_globals_t  library;\n\t\txdebug_profiler_globals_t profiler;\n\t\txdebug_tracing_globals_t  tracing;\n\t} globals;\n\tstruct {\n\t\txdebug_base_settings_t     base;\n\t\txdebug_coverage_settings_t coverage;\n\t\txdebug_debugger_settings_t debugger;\n\t\txdebug_develop_settings_t  develop;\n\t\txdebug_gc_stats_settings_t gc_stats;\n\t\txdebug_library_settings_t  library;\n\t\txdebug_profiler_settings_t profiler;\n\t\txdebug_tracing_settings_t  tracing;\n\t} settings;\nZEND_END_MODULE_GLOBALS(xdebug)\n\n#ifdef ZTS\n#define XG(v) TSRMG(xdebug_globals_id, zend_xdebug_globals *, v)\n#else\n#define XG(v) (xdebug_globals.v)\n#endif\n\n#define XG_BASE(v)     (XG(globals.base.v))\n#define XINI_BASE(v)     (XG(settings.base.v))\n\n#endif\n"
        },
        {
          "name": "php_xdebug.stub.php",
          "type": "blob",
          "size": 7.8154296875,
          "content": "<?php\n/** @generate-function-entries */\n\n/* This file is generated by the 'xdebug.org:html/docs/create-stubs.php' robot\n * for Xdebug 3.1.0-dev — do not modify by hand */\n\n/* Emits a breakpoint to the debug client */\nfunction xdebug_break(): bool {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns the calling class */\n/** @return mixed */\nfunction xdebug_call_class(int $depth = 2) {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns the calling file */\n/** @return mixed */\nfunction xdebug_call_file(int $depth = 2) {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns the calling function/method */\n/** @return mixed */\nfunction xdebug_call_function(int $depth = 2) {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns the calling line number */\n/** @return mixed */\nfunction xdebug_call_line(int $depth = 2) {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns whether code coverage is active */\nfunction xdebug_code_coverage_started(): bool {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Instructs Xdebug to establish a debugging session */\nfunction xdebug_connect_to_client(): bool {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Displays information about a variable */\n/** @return void */\nfunction xdebug_debug_zval(string ...$varname) {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns information about variables to stdout */\n/** @return void */\nfunction xdebug_debug_zval_stdout(string ...$varname) {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Displays information about super globals */\n/** @return void */\nfunction xdebug_dump_superglobals() {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns code coverage information */\nfunction xdebug_get_code_coverage(): array {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns all collected error messages */\n/** @return void */\nfunction xdebug_get_collected_errors(bool $emptyList = false) {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns the number of functions that have been called */\nfunction xdebug_get_function_count(): int {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns information about the stack */\nfunction xdebug_get_function_stack(array $options = []): array {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns the number of garbage collection runs that have been triggered so far */\nfunction xdebug_get_gc_run_count(): int {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns the number of variable roots that have been collected so far */\nfunction xdebug_get_gc_total_collected_roots(): int {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns the garbage collection statistics filename */\n/** @return mixed */\nfunction xdebug_get_gcstats_filename() {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns all the headers as set by calls to PHP's header() function */\nfunction xdebug_get_headers(): array {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns information about monitored functions */\nfunction xdebug_get_monitored_functions(): array {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns the profile information filename */\n/** @return mixed */\nfunction xdebug_get_profiler_filename() {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns the current stack depth level */\nfunction xdebug_get_stack_depth(): int {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns the name of the function trace file */\n/** @return mixed */\nfunction xdebug_get_tracefile_name() {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Show and retrieve diagnostic information */\n/** @return mixed */\nfunction xdebug_info(string $category = null) {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns whether a debugging session is active */\nfunction xdebug_is_debugger_active(): bool {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns the current memory usage */\nfunction xdebug_memory_usage(): int {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Sends data to a debugging client */\nfunction xdebug_notify(mixed $data): bool {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns the peak memory usage */\nfunction xdebug_peak_memory_usage(): int {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Displays the current function stack */\n/** @return void */\nfunction xdebug_print_function_stack(string $message = \"user triggered\", int $options = 0) {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Set filter */\n/** @return void */\nfunction xdebug_set_filter(int $group, int $listType, array $configuration) {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Starts code coverage */\n/** @return void */\nfunction xdebug_start_code_coverage(int $options = 0) {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Starts recording all notices, warnings and errors and prevents their display */\n/** @return void */\nfunction xdebug_start_error_collection() {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Starts function monitoring */\n/** @return void */\nfunction xdebug_start_function_monitor(array $listOfFunctionsToMonitor) {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Start the collection of garbage collection statistics */\n/** @return mixed */\nfunction xdebug_start_gcstats(?string $gcstatsFile = null) {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Starts a new function trace */\nfunction xdebug_start_trace(?string $traceFile = null, int $options = 0): ?string {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Stops code coverage */\n/** @return void */\nfunction xdebug_stop_code_coverage(bool $cleanUp = true) {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Stops recording of all notices, warnings and errors as started by <a href=\"/docs/all_functions#xdebug_start_error_collection\">xdebug_start_error_collection()</a> */\n/** @return void */\nfunction xdebug_stop_error_collection() {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Stops monitoring functions */\n/** @return void */\nfunction xdebug_stop_function_monitor() {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Stops the current garbage collection statistics collection */\n/** @return false|string */\nfunction xdebug_stop_gcstats() {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Stops the current function trace */\n/** @return false|string */\nfunction xdebug_stop_trace() {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Returns the current time index */\nfunction xdebug_time_index(): float {}\n\n/* -----------------------------------------------------------------------*/\n\n/* Displays detailed information about a variable */\n/** @return void */\nfunction xdebug_var_dump(mixed ...$variable) {}\n\n/* -----------------------------------------------------------------------*/\n\n"
        },
        {
          "name": "php_xdebug_arginfo.h",
          "type": "blob",
          "size": 8.7978515625,
          "content": "/* This is a generated file, edit the .stub.php file instead.\n * Stub hash: abb3d6c16210384b6ac37292e3e46713125c8b18 */\n\nZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(arginfo_xdebug_break, 0, 0, _IS_BOOL, 0)\nZEND_END_ARG_INFO()\n\nZEND_BEGIN_ARG_INFO_EX(arginfo_xdebug_call_class, 0, 0, 0)\n\tZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, depth, IS_LONG, 0, \"2\")\nZEND_END_ARG_INFO()\n\n#define arginfo_xdebug_call_file arginfo_xdebug_call_class\n\n#define arginfo_xdebug_call_function arginfo_xdebug_call_class\n\n#define arginfo_xdebug_call_line arginfo_xdebug_call_class\n\n#define arginfo_xdebug_code_coverage_started arginfo_xdebug_break\n\n#define arginfo_xdebug_connect_to_client arginfo_xdebug_break\n\nZEND_BEGIN_ARG_INFO_EX(arginfo_xdebug_debug_zval, 0, 0, 0)\n\tZEND_ARG_VARIADIC_TYPE_INFO(0, varname, IS_STRING, 0)\nZEND_END_ARG_INFO()\n\n#define arginfo_xdebug_debug_zval_stdout arginfo_xdebug_debug_zval\n\nZEND_BEGIN_ARG_INFO_EX(arginfo_xdebug_dump_superglobals, 0, 0, 0)\nZEND_END_ARG_INFO()\n\nZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(arginfo_xdebug_get_code_coverage, 0, 0, IS_ARRAY, 0)\nZEND_END_ARG_INFO()\n\nZEND_BEGIN_ARG_INFO_EX(arginfo_xdebug_get_collected_errors, 0, 0, 0)\n\tZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, emptyList, _IS_BOOL, 0, \"false\")\nZEND_END_ARG_INFO()\n\nZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(arginfo_xdebug_get_function_count, 0, 0, IS_LONG, 0)\nZEND_END_ARG_INFO()\n\nZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(arginfo_xdebug_get_function_stack, 0, 0, IS_ARRAY, 0)\n\tZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, options, IS_ARRAY, 0, \"[]\")\nZEND_END_ARG_INFO()\n\n#define arginfo_xdebug_get_gc_run_count arginfo_xdebug_get_function_count\n\n#define arginfo_xdebug_get_gc_total_collected_roots arginfo_xdebug_get_function_count\n\n#define arginfo_xdebug_get_gcstats_filename arginfo_xdebug_dump_superglobals\n\n#define arginfo_xdebug_get_headers arginfo_xdebug_get_code_coverage\n\n#define arginfo_xdebug_get_monitored_functions arginfo_xdebug_get_code_coverage\n\n#define arginfo_xdebug_get_profiler_filename arginfo_xdebug_dump_superglobals\n\n#define arginfo_xdebug_get_stack_depth arginfo_xdebug_get_function_count\n\n#define arginfo_xdebug_get_tracefile_name arginfo_xdebug_dump_superglobals\n\nZEND_BEGIN_ARG_INFO_EX(arginfo_xdebug_info, 0, 0, 0)\n\tZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, category, IS_STRING, 0, \"null\")\nZEND_END_ARG_INFO()\n\n#define arginfo_xdebug_is_debugger_active arginfo_xdebug_break\n\n#define arginfo_xdebug_memory_usage arginfo_xdebug_get_function_count\n\nZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(arginfo_xdebug_notify, 0, 1, _IS_BOOL, 0)\n\tZEND_ARG_TYPE_INFO(0, data, IS_MIXED, 0)\nZEND_END_ARG_INFO()\n\n#define arginfo_xdebug_peak_memory_usage arginfo_xdebug_get_function_count\n\nZEND_BEGIN_ARG_INFO_EX(arginfo_xdebug_print_function_stack, 0, 0, 0)\n\tZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, message, IS_STRING, 0, \"\\\"user triggered\\\"\")\n\tZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, options, IS_LONG, 0, \"0\")\nZEND_END_ARG_INFO()\n\nZEND_BEGIN_ARG_INFO_EX(arginfo_xdebug_set_filter, 0, 0, 3)\n\tZEND_ARG_TYPE_INFO(0, group, IS_LONG, 0)\n\tZEND_ARG_TYPE_INFO(0, listType, IS_LONG, 0)\n\tZEND_ARG_TYPE_INFO(0, configuration, IS_ARRAY, 0)\nZEND_END_ARG_INFO()\n\nZEND_BEGIN_ARG_INFO_EX(arginfo_xdebug_start_code_coverage, 0, 0, 0)\n\tZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, options, IS_LONG, 0, \"0\")\nZEND_END_ARG_INFO()\n\n#define arginfo_xdebug_start_error_collection arginfo_xdebug_dump_superglobals\n\nZEND_BEGIN_ARG_INFO_EX(arginfo_xdebug_start_function_monitor, 0, 0, 1)\n\tZEND_ARG_TYPE_INFO(0, listOfFunctionsToMonitor, IS_ARRAY, 0)\nZEND_END_ARG_INFO()\n\nZEND_BEGIN_ARG_INFO_EX(arginfo_xdebug_start_gcstats, 0, 0, 0)\n\tZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, gcstatsFile, IS_STRING, 1, \"null\")\nZEND_END_ARG_INFO()\n\nZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(arginfo_xdebug_start_trace, 0, 0, IS_STRING, 1)\n\tZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, traceFile, IS_STRING, 1, \"null\")\n\tZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, options, IS_LONG, 0, \"0\")\nZEND_END_ARG_INFO()\n\nZEND_BEGIN_ARG_INFO_EX(arginfo_xdebug_stop_code_coverage, 0, 0, 0)\n\tZEND_ARG_TYPE_INFO_WITH_DEFAULT_VALUE(0, cleanUp, _IS_BOOL, 0, \"true\")\nZEND_END_ARG_INFO()\n\n#define arginfo_xdebug_stop_error_collection arginfo_xdebug_dump_superglobals\n\n#define arginfo_xdebug_stop_function_monitor arginfo_xdebug_dump_superglobals\n\n#define arginfo_xdebug_stop_gcstats arginfo_xdebug_dump_superglobals\n\n#define arginfo_xdebug_stop_trace arginfo_xdebug_dump_superglobals\n\nZEND_BEGIN_ARG_WITH_RETURN_TYPE_INFO_EX(arginfo_xdebug_time_index, 0, 0, IS_DOUBLE, 0)\nZEND_END_ARG_INFO()\n\nZEND_BEGIN_ARG_INFO_EX(arginfo_xdebug_var_dump, 0, 0, 0)\n\tZEND_ARG_VARIADIC_TYPE_INFO(0, variable, IS_MIXED, 0)\nZEND_END_ARG_INFO()\n\n\nZEND_FUNCTION(xdebug_break);\nZEND_FUNCTION(xdebug_call_class);\nZEND_FUNCTION(xdebug_call_file);\nZEND_FUNCTION(xdebug_call_function);\nZEND_FUNCTION(xdebug_call_line);\nZEND_FUNCTION(xdebug_code_coverage_started);\nZEND_FUNCTION(xdebug_connect_to_client);\nZEND_FUNCTION(xdebug_debug_zval);\nZEND_FUNCTION(xdebug_debug_zval_stdout);\nZEND_FUNCTION(xdebug_dump_superglobals);\nZEND_FUNCTION(xdebug_get_code_coverage);\nZEND_FUNCTION(xdebug_get_collected_errors);\nZEND_FUNCTION(xdebug_get_function_count);\nZEND_FUNCTION(xdebug_get_function_stack);\nZEND_FUNCTION(xdebug_get_gc_run_count);\nZEND_FUNCTION(xdebug_get_gc_total_collected_roots);\nZEND_FUNCTION(xdebug_get_gcstats_filename);\nZEND_FUNCTION(xdebug_get_headers);\nZEND_FUNCTION(xdebug_get_monitored_functions);\nZEND_FUNCTION(xdebug_get_profiler_filename);\nZEND_FUNCTION(xdebug_get_stack_depth);\nZEND_FUNCTION(xdebug_get_tracefile_name);\nZEND_FUNCTION(xdebug_info);\nZEND_FUNCTION(xdebug_is_debugger_active);\nZEND_FUNCTION(xdebug_memory_usage);\nZEND_FUNCTION(xdebug_notify);\nZEND_FUNCTION(xdebug_peak_memory_usage);\nZEND_FUNCTION(xdebug_print_function_stack);\nZEND_FUNCTION(xdebug_set_filter);\nZEND_FUNCTION(xdebug_start_code_coverage);\nZEND_FUNCTION(xdebug_start_error_collection);\nZEND_FUNCTION(xdebug_start_function_monitor);\nZEND_FUNCTION(xdebug_start_gcstats);\nZEND_FUNCTION(xdebug_start_trace);\nZEND_FUNCTION(xdebug_stop_code_coverage);\nZEND_FUNCTION(xdebug_stop_error_collection);\nZEND_FUNCTION(xdebug_stop_function_monitor);\nZEND_FUNCTION(xdebug_stop_gcstats);\nZEND_FUNCTION(xdebug_stop_trace);\nZEND_FUNCTION(xdebug_time_index);\nZEND_FUNCTION(xdebug_var_dump);\n\n\nstatic const zend_function_entry ext_functions[] = {\n\tZEND_FE(xdebug_break, arginfo_xdebug_break)\n\tZEND_FE(xdebug_call_class, arginfo_xdebug_call_class)\n\tZEND_FE(xdebug_call_file, arginfo_xdebug_call_file)\n\tZEND_FE(xdebug_call_function, arginfo_xdebug_call_function)\n\tZEND_FE(xdebug_call_line, arginfo_xdebug_call_line)\n\tZEND_FE(xdebug_code_coverage_started, arginfo_xdebug_code_coverage_started)\n\tZEND_FE(xdebug_connect_to_client, arginfo_xdebug_connect_to_client)\n\tZEND_FE(xdebug_debug_zval, arginfo_xdebug_debug_zval)\n\tZEND_FE(xdebug_debug_zval_stdout, arginfo_xdebug_debug_zval_stdout)\n\tZEND_FE(xdebug_dump_superglobals, arginfo_xdebug_dump_superglobals)\n\tZEND_FE(xdebug_get_code_coverage, arginfo_xdebug_get_code_coverage)\n\tZEND_FE(xdebug_get_collected_errors, arginfo_xdebug_get_collected_errors)\n\tZEND_FE(xdebug_get_function_count, arginfo_xdebug_get_function_count)\n\tZEND_FE(xdebug_get_function_stack, arginfo_xdebug_get_function_stack)\n\tZEND_FE(xdebug_get_gc_run_count, arginfo_xdebug_get_gc_run_count)\n\tZEND_FE(xdebug_get_gc_total_collected_roots, arginfo_xdebug_get_gc_total_collected_roots)\n\tZEND_FE(xdebug_get_gcstats_filename, arginfo_xdebug_get_gcstats_filename)\n\tZEND_FE(xdebug_get_headers, arginfo_xdebug_get_headers)\n\tZEND_FE(xdebug_get_monitored_functions, arginfo_xdebug_get_monitored_functions)\n\tZEND_FE(xdebug_get_profiler_filename, arginfo_xdebug_get_profiler_filename)\n\tZEND_FE(xdebug_get_stack_depth, arginfo_xdebug_get_stack_depth)\n\tZEND_FE(xdebug_get_tracefile_name, arginfo_xdebug_get_tracefile_name)\n\tZEND_FE(xdebug_info, arginfo_xdebug_info)\n\tZEND_FE(xdebug_is_debugger_active, arginfo_xdebug_is_debugger_active)\n\tZEND_FE(xdebug_memory_usage, arginfo_xdebug_memory_usage)\n\tZEND_FE(xdebug_notify, arginfo_xdebug_notify)\n\tZEND_FE(xdebug_peak_memory_usage, arginfo_xdebug_peak_memory_usage)\n\tZEND_FE(xdebug_print_function_stack, arginfo_xdebug_print_function_stack)\n\tZEND_FE(xdebug_set_filter, arginfo_xdebug_set_filter)\n\tZEND_FE(xdebug_start_code_coverage, arginfo_xdebug_start_code_coverage)\n\tZEND_FE(xdebug_start_error_collection, arginfo_xdebug_start_error_collection)\n\tZEND_FE(xdebug_start_function_monitor, arginfo_xdebug_start_function_monitor)\n\tZEND_FE(xdebug_start_gcstats, arginfo_xdebug_start_gcstats)\n\tZEND_FE(xdebug_start_trace, arginfo_xdebug_start_trace)\n\tZEND_FE(xdebug_stop_code_coverage, arginfo_xdebug_stop_code_coverage)\n\tZEND_FE(xdebug_stop_error_collection, arginfo_xdebug_stop_error_collection)\n\tZEND_FE(xdebug_stop_function_monitor, arginfo_xdebug_stop_function_monitor)\n\tZEND_FE(xdebug_stop_gcstats, arginfo_xdebug_stop_gcstats)\n\tZEND_FE(xdebug_stop_trace, arginfo_xdebug_stop_trace)\n\tZEND_FE(xdebug_time_index, arginfo_xdebug_time_index)\n\tZEND_FE(xdebug_var_dump, arginfo_xdebug_var_dump)\n\tZEND_FE_END\n};\n"
        },
        {
          "name": "rebuild.sh",
          "type": "blob",
          "size": 0.4619140625,
          "content": "#!/bin/bash\n\nif [[ ! -f \"config.m4\" ]]; then\n\techo \"There is no config.m4 file in this directory\"\n\texit;\nfi\n\nif [[ -f \"configure.in\" ]]; then\n\trm configure.in\nfi\nif [[ -f \"configure.ac\" ]]; then\n\trm configure.ac\nfi\nif [[ -d \"autom4te.cache\" ]]; then\n\trm -rf autom4te.cache\nfi\n\nbit64=`php -n -r 'echo PHP_INT_SIZE == 8 ? \"1\" : \"0\";'`\nif [[ ${bit64} != \"1\" ]]; then\n\texport CFLAGS=\"-m32\"\nfi\nphpize && ./configure --enable-xdebug-dev && make clean && make all && make install\n"
        },
        {
          "name": "run-xdebug-tests.php",
          "type": "blob",
          "size": 136.8955078125,
          "content": "#!/usr/bin/env php\n<?php\n/*\n   +----------------------------------------------------------------------+\n   | Copyright (c) The PHP Group                                          |\n   +----------------------------------------------------------------------+\n   | This source file is subject to version 3.01 of the PHP license,      |\n   | that is bundled with this package in the file LICENSE, and is        |\n   | available through the world-wide-web at the following url:           |\n   | https://php.net/license/3_01.txt                                     |\n   | If you did not receive a copy of the PHP license and are unable to   |\n   | obtain it through the world-wide-web, please send a note to          |\n   | license@php.net so we can mail you a copy immediately.               |\n   +----------------------------------------------------------------------+\n   | Authors: Ilia Alshanetsky <iliaa@php.net>                            |\n   |          Preston L. Bannister <pbannister@php.net>                   |\n   |          Marcus Boerger <helly@php.net>                              |\n   |          Derick Rethans <derick@php.net>                             |\n   |          Sander Roobol <sander@php.net>                              |\n   |          Andrea Faulds <ajf@ajf.me>                                  |\n   | (based on version by: Stig Bakken <ssb@php.net>)                     |\n   | (based on the PHP 3 test framework by Rasmus Lerdorf)                |\n   +----------------------------------------------------------------------+\n */\n\n/* $Id: ff8fc1a09b14846e2a5daa9b51cc2b6e97f3ac3c $ */\n\n/* Temporary variables while this file is being refactored. */\n/** @var ?JUnit */\n$junit = null;\n\n/* End temporary variables. */\n\n/* Let there be no top-level code beyond this point:\n * Only functions and classes, thanks!\n *\n * Minimum required PHP version: 7.4.0\n */\n\nfunction show_usage(): void\n{\n    echo <<<HELP\nSynopsis:\n    php run-tests.php [options] [files] [directories]\n\nOptions:\n    -j<workers> Run up to <workers> simultaneous testing processes in parallel for\n                quicker testing on systems with multiple logical processors.\n                Note that this is experimental feature.\n\n    -l <file>   Read the testfiles to be executed from <file>. After the test\n                has finished all failed tests are written to the same <file>.\n                If the list is empty and no further test is specified then\n                all tests are executed (same as: -r <file> -w <file>).\n\n    -r <file>   Read the testfiles to be executed from <file>.\n\n    -w <file>   Write a list of all failed tests to <file>.\n\n    -a <file>   Same as -w but append rather then truncating <file>.\n\n    -W <file>   Write a list of all tests and their result status to <file>.\n\n    -c <file>   Look for php.ini in directory <file> or use <file> as ini.\n\n    -n          Pass -n option to the php binary (Do not use a php.ini).\n\n    -d foo=bar  Pass -d option to the php binary (Define INI entry foo\n                with value 'bar').\n\n    -g          Comma separated list of groups to show during test run\n                (possible values: PASS, FAIL, XFAIL, XLEAK, SKIP, BORK, WARN, LEAK, REDIRECT).\n\n    -m          Test for memory leaks with Valgrind (equivalent to -M memcheck).\n\n    -M <tool>   Test for errors with Valgrind tool.\n\n    -p <php>    Specify PHP executable to run.\n\n    -P          Use PHP_BINARY as PHP executable to run (default).\n\n    -q          Quiet, no user interaction (same as environment NO_INTERACTION).\n\n    -s <file>   Write output to <file>.\n\n    -x          Sets 'SKIP_SLOW_TESTS' environmental variable.\n\n    --offline   Sets 'SKIP_ONLINE_TESTS' environmental variable.\n\n    --verbose\n    -v          Verbose mode.\n\n    --help\n    -h          This Help.\n\n    --temp-source <sdir>  --temp-target <tdir> [--temp-urlbase <url>]\n                Write temporary files to <tdir> by replacing <sdir> from the\n                filenames to generate with <tdir>. In general you want to make\n                <sdir> the path to your source files and <tdir> some patch in\n                your web page hierarchy with <url> pointing to <tdir>.\n\n    --keep-[all|php|skip|after|clean]\n                Do not delete 'all' files, 'php' test file, 'skip', 'after',\n                or 'clean' file.\n\n    --set-timeout <n>\n                Set timeout for individual tests, where <n> is the number of\n                seconds. The default value is 60 seconds, or 300 seconds when\n                testing for memory leaks.\n\n    --context <n>\n                Sets the number of lines of surrounding context to print for diffs.\n                The default value is 3.\n\n    --show-[all|php|skip|clean|after|exp|diff|out|mem]\n                Show 'all' files, 'php' test file, 'skip', 'after', or 'clean' file.\n                You can also use this to show the output 'out', the expected result\n                'exp', the difference between them 'diff' or the valgrind log\n                'mem'. The result types get written independent of the log format,\n                however 'diff' only exists when a test fails.\n\n    --show-slow <n>\n                Show all tests that took longer than <n> milliseconds to run.\n\n    --no-clean  Do not execute clean section if any.\n\n    --color\n    --no-color  Do/Don't colorize the result type in the test result.\n\n    --repeat [n]\n                Run the tests multiple times in the same process and check the\n                output of the last execution (CLI SAPI only).\n\n    --bless     Bless failed tests using scripts/dev/bless_tests.php.\n\nHELP;\n}\n\n/**\n * One function to rule them all, one function to find them, one function to\n * bring them all and in the darkness bind them.\n * This is the entry point and exit point überfunction. It contains all the\n * code that was previously found at the top level. It could and should be\n * refactored to be smaller and more manageable.\n */\nfunction main(): void\n{\n    /* This list was derived in a naïve mechanical fashion. If a member\n     * looks like it doesn't belong, it probably doesn't; cull at will.\n     */\n    global $DETAILED, $PHP_FAILED_TESTS, $SHOW_ONLY_GROUPS, $argc, $argv, $cfg,\n           $cfgfiles, $cfgtypes, $conf_passed, $end_time, $environment,\n           $exts_skipped, $exts_tested, $exts_to_test, $failed_tests_file,\n           $ignored_by_ext, $ini_overwrites, $is_switch, $colorize,\n           $log_format, $matches, $no_clean, $no_file_cache,\n           $optionals, $pass_option_n, $pass_options,\n           $pattern_match, $php, $php_cgi, $phpdbg, $preload, $redir_tests,\n           $repeat, $result_tests_file, $slow_min_ms, $start_time, $switch,\n           $temp_source, $temp_target, $test_cnt, $test_dirs,\n           $test_files, $test_idx, $test_list, $test_results, $testfile,\n           $user_tests, $valgrind, $sum_results, $shuffle, $file_cache, $num_repeats,\n           $bless;\n    // Parallel testing\n    global $workers, $workerID;\n    global $context_line_count;\n\n    // Temporary for the duration of refactoring\n    /** @var JUnit */\n    global $junit;\n\n    define('IS_WINDOWS', substr(PHP_OS, 0, 3) == \"WIN\");\n\n    $workerID = 0;\n    if (getenv(\"TEST_PHP_WORKER\")) {\n        $workerID = intval(getenv(\"TEST_PHP_WORKER\"));\n        run_worker();\n        return;\n    }\n\n    define('INIT_DIR', getcwd());\n\n    // Change into the PHP source directory.\n    if (getenv('TEST_PHP_SRCDIR')) {\n        @chdir(getenv('TEST_PHP_SRCDIR'));\n    }\n\n    define('TEST_PHP_SRCDIR', getcwd());\n\n    check_proc_open_function_exists();\n\n    // If timezone is not set, use UTC.\n    if (ini_get('date.timezone') == '') {\n        date_default_timezone_set('UTC');\n    }\n\n    // Delete some security related environment variables\n    putenv('SSH_CLIENT=deleted');\n    putenv('SSH_AUTH_SOCK=deleted');\n    putenv('SSH_TTY=deleted');\n    putenv('SSH_CONNECTION=deleted');\n\n    set_time_limit(0);\n\n    ini_set('pcre.backtrack_limit', PHP_INT_MAX);\n\n    init_output_buffers();\n\n    error_reporting(E_ALL);\n\n    $environment = $_ENV ?? [];\n\n    // Some configurations like php.ini-development set variables_order=\"GPCS\"\n    // not \"EGPCS\", in which case $_ENV is NOT populated. Detect if the $_ENV\n    // was empty and handle it by explicitly populating through getenv().\n    if (empty($environment)) {\n        $environment = getenv();\n    }\n\n    if (empty($environment['TEMP'])) {\n        $environment['TEMP'] = sys_get_temp_dir();\n\n        if (empty($environment['TEMP'])) {\n            // For example, OpCache on Windows will fail in this case because\n            // child processes (for tests) will not get a TEMP variable, so\n            // GetTempPath() will fallback to c:\\windows, while GetTempPath()\n            // will return %TEMP% for parent (likely a different path). The\n            // parent will initialize the OpCache in that path, and child will\n            // fail to reattach to the OpCache because it will be using the\n            // wrong path.\n            die(\"TEMP environment is NOT set\");\n        } else {\n            if (count($environment) == 1) {\n                // Not having other environment variables, only having TEMP, is\n                // probably ok, but strange and may make a difference in the\n                // test pass rate, so warn the user.\n                echo \"WARNING: Only 1 environment variable will be available to tests(TEMP environment variable)\" . PHP_EOL;\n            }\n        }\n    }\n\n    if (IS_WINDOWS && empty($environment[\"SystemRoot\"])) {\n        $environment[\"SystemRoot\"] = getenv(\"SystemRoot\");\n    }\n\n    $php = null;\n    $php_cgi = null;\n    $phpdbg = null;\n\n    if (getenv('TEST_PHP_LOG_FORMAT')) {\n        $log_format = strtoupper(getenv('TEST_PHP_LOG_FORMAT'));\n    } else {\n        $log_format = 'LEODS';\n    }\n\n    // Check whether a detailed log is wanted.\n    if (getenv('TEST_PHP_DETAILED')) {\n        $DETAILED = getenv('TEST_PHP_DETAILED');\n    } else {\n        $DETAILED = 0;\n    }\n\n    $junit = new JUnit($environment, $workerID);\n\n    if (getenv('SHOW_ONLY_GROUPS')) {\n        $SHOW_ONLY_GROUPS = explode(\",\", getenv('SHOW_ONLY_GROUPS'));\n    } else {\n        $SHOW_ONLY_GROUPS = [];\n    }\n\n    // Check whether user test dirs are requested.\n    if (getenv('TEST_PHP_USER')) {\n        $user_tests = explode(',', getenv('TEST_PHP_USER'));\n    } else {\n        $user_tests = [];\n    }\n\n    $exts_to_test = [];\n    $ini_overwrites = [\n        'output_handler=',\n        'open_basedir=',\n        'disable_functions=',\n        'output_buffering=Off',\n        'error_reporting=' . E_ALL,\n        'display_errors=1',\n        'display_startup_errors=1',\n        'log_errors=0',\n        'log_errors_max_len=0',\n        'html_errors=0',\n        'track_errors=0',\n        'report_memleaks=1',\n        'report_zend_debug=0',\n        'docref_root=',\n        'docref_ext=.html',\n        'error_prepend_string=',\n        'error_append_string=',\n        'auto_prepend_file=',\n        'auto_append_file=',\n        'ignore_repeated_errors=0',\n        'precision=14',\n        'serialize_precision=-1',\n        'memory_limit=128M',\n        'opcache.fast_shutdown=0',\n        'opcache.file_update_protection=0',\n        'opcache.revalidate_freq=0',\n        'opcache.jit_hot_loop=1',\n        'opcache.jit_hot_func=1',\n        'opcache.jit_hot_return=1',\n        'opcache.jit_hot_side_exit=1',\n        'zend.assertions=1',\n        'zend.exception_ignore_args=0',\n        'zend.exception_string_param_max_len=15',\n        'short_open_tag=0',\n        'pcre.jit=0',\n    ];\n\n    $no_file_cache = '-d opcache.file_cache= -d opcache.file_cache_only=0';\n\n    define('TRAVIS_CI', (bool) getenv('TRAVIS'));\n\n    // Determine the tests to be run.\n\n    $test_files = [];\n    $redir_tests = [];\n    $test_results = [];\n    $PHP_FAILED_TESTS = [\n        'BORKED' => [],\n        'FAILED' => [],\n        'WARNED' => [],\n        'LEAKED' => [],\n        'XFAILED' => [],\n        'XLEAKED' => [],\n        'SLOW' => []\n    ];\n\n    // If parameters given assume they represent selected tests to run.\n    $result_tests_file = false;\n    $failed_tests_file = false;\n    $pass_option_n = false;\n    $pass_options = '';\n\n    $output_file = INIT_DIR . '/php_test_results_' . date('Ymd_Hi') . '.txt';\n\n    $just_save_results = false;\n    $valgrind = null;\n    $temp_source = null;\n    $temp_target = null;\n    $conf_passed = null;\n    $no_clean = false;\n    $colorize = true;\n    if (function_exists('sapi_windows_vt100_support') && !sapi_windows_vt100_support(STDOUT, true)) {\n        $colorize = false;\n    }\n    if (array_key_exists('NO_COLOR', $environment)) {\n        $colorize = false;\n    }\n    $selected_tests = false;\n    $slow_min_ms = INF;\n    $preload = false;\n    $file_cache = null;\n    $shuffle = false;\n    $bless = false;\n    $workers = null;\n    $context_line_count = 3;\n    $num_repeats = 1;\n\n    $cfgtypes = ['show', 'keep'];\n    $cfgfiles = ['skip', 'php', 'after', 'clean', 'out', 'diff', 'exp', 'mem'];\n    $cfg = [];\n\n    foreach ($cfgtypes as $type) {\n        $cfg[$type] = [];\n\n        foreach ($cfgfiles as $file) {\n            $cfg[$type][$file] = false;\n        }\n    }\n\n    if (!isset($argc, $argv) || !$argc) {\n        $argv = [__FILE__];\n        $argc = 1;\n    }\n\n    if (getenv('TEST_PHP_ARGS')) {\n        $argv = array_merge($argv, explode(' ', getenv('TEST_PHP_ARGS')));\n        $argc = count($argv);\n    }\n\n    for ($i = 1; $i < $argc; $i++) {\n        $is_switch = false;\n        $switch = substr($argv[$i], 1, 1);\n        $repeat = substr($argv[$i], 0, 1) == '-';\n\n        while ($repeat) {\n            if (!$is_switch) {\n                $switch = substr($argv[$i], 1, 1);\n            }\n\n            $is_switch = true;\n\n            if ($repeat) {\n                foreach ($cfgtypes as $type) {\n                    if (strpos($switch, '--' . $type) === 0) {\n                        foreach ($cfgfiles as $file) {\n                            if ($switch == '--' . $type . '-' . $file) {\n                                $cfg[$type][$file] = true;\n                                $is_switch = false;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (!$is_switch) {\n                $is_switch = true;\n                break;\n            }\n\n            $repeat = false;\n\n            switch ($switch) {\n                case 'j':\n                    $workers = substr($argv[$i], 2);\n                    if (!preg_match('/^\\d+$/', $workers) || $workers == 0) {\n                        error(\"'$workers' is not a valid number of workers, try e.g. -j16 for 16 workers\");\n                    }\n                    $workers = intval($workers, 10);\n                    // Don't use parallel testing infrastructure if there is only one worker.\n                    if ($workers === 1) {\n                        $workers = null;\n                    }\n                    break;\n                case 'r':\n                case 'l':\n                    $test_list = file($argv[++$i]);\n                    if ($test_list) {\n                        foreach ($test_list as $test) {\n                            $matches = [];\n                            if (preg_match('/^#.*\\[(.*)\\]\\:\\s+(.*)$/', $test, $matches)) {\n                                $redir_tests[] = [$matches[1], $matches[2]];\n                            } else {\n                                if (strlen($test)) {\n                                    $test_files[] = trim($test);\n                                }\n                            }\n                        }\n                    }\n                    if ($switch != 'l') {\n                        break;\n                    }\n                    $i--;\n                // no break\n                case 'w':\n                    $failed_tests_file = fopen($argv[++$i], 'w+t');\n                    break;\n                case 'a':\n                    $failed_tests_file = fopen($argv[++$i], 'a+t');\n                    break;\n                case 'W':\n                    $result_tests_file = fopen($argv[++$i], 'w+t');\n                    break;\n                case 'c':\n                    $conf_passed = $argv[++$i];\n                    break;\n                case 'd':\n                    $ini_overwrites[] = $argv[++$i];\n                    break;\n                case 'g':\n                    $SHOW_ONLY_GROUPS = explode(\",\", $argv[++$i]);\n                    break;\n                //case 'h'\n                case '--keep-all':\n                    foreach ($cfgfiles as $file) {\n                        $cfg['keep'][$file] = true;\n                    }\n                    break;\n                //case 'l'\n                case 'm':\n                    $valgrind = new RuntestsValgrind($environment);\n                    break;\n                case 'M':\n                    $valgrind = new RuntestsValgrind($environment, $argv[++$i]);\n                    break;\n                case 'n':\n                    if (!$pass_option_n) {\n                        $pass_options .= ' -n';\n                    }\n                    $pass_option_n = true;\n                    break;\n                case 'e':\n                    $pass_options .= ' -e';\n                    break;\n                case '--preload':\n                    $preload = true;\n                    $environment['SKIP_PRELOAD'] = 1;\n                    break;\n                case '--file-cache-prime':\n                    $file_cache = 'prime';\n                    break;\n                case '--file-cache-use':\n                    $file_cache = 'use';\n                    break;\n                case '--no-clean':\n                    $no_clean = true;\n                    break;\n                case '--color':\n                    $colorize = true;\n                    break;\n                case '--no-color':\n                    $colorize = false;\n                    break;\n                case 'p':\n                    $php = $argv[++$i];\n                    putenv(\"TEST_PHP_EXECUTABLE=$php\");\n                    $environment['TEST_PHP_EXECUTABLE'] = $php;\n                    break;\n                case 'P':\n                    $php = PHP_BINARY;\n                    putenv(\"TEST_PHP_EXECUTABLE=$php\");\n                    $environment['TEST_PHP_EXECUTABLE'] = $php;\n                    break;\n                case 'q':\n                    putenv('NO_INTERACTION=1');\n                    $environment['NO_INTERACTION'] = 1;\n                    break;\n                //case 'r'\n                case 's':\n                    $output_file = $argv[++$i];\n                    $just_save_results = true;\n                    break;\n                case '--set-timeout':\n                    $timeout = $argv[++$i] ?? '';\n                    if (!preg_match('/^\\d+$/', $timeout)) {\n                        error(\"'$timeout' is not a valid number of seconds, try e.g. --set-timeout 60 for 1 minute\");\n                    }\n                    $environment['TEST_TIMEOUT'] = intval($timeout, 10);\n                    break;\n                case '--context':\n                    $context_line_count = $argv[++$i] ?? '';\n                    if (!preg_match('/^\\d+$/', $context_line_count)) {\n                        error(\"'$context_line_count' is not a valid number of lines of context, try e.g. --context 3 for 3 lines\");\n                    }\n                    $context_line_count = intval($context_line_count, 10);\n                    break;\n                case '--show-all':\n                    foreach ($cfgfiles as $file) {\n                        $cfg['show'][$file] = true;\n                    }\n                    break;\n                case '--show-slow':\n                    $slow_min_ms = $argv[++$i] ?? '';\n                    if (!preg_match('/^\\d+$/', $slow_min_ms)) {\n                        error(\"'$slow_min_ms' is not a valid number of milliseconds, try e.g. --show-slow 1000 for 1 second\");\n                    }\n                    $slow_min_ms = intval($slow_min_ms, 10);\n                    break;\n                case '--temp-source':\n                    $temp_source = $argv[++$i];\n                    break;\n                case '--temp-target':\n                    $temp_target = $argv[++$i];\n                    break;\n                case 'v':\n                case '--verbose':\n                    $DETAILED = true;\n                    break;\n                case 'x':\n                    $environment['SKIP_SLOW_TESTS'] = 1;\n                    break;\n                case '--offline':\n                    $environment['SKIP_ONLINE_TESTS'] = 1;\n                    break;\n                case '--shuffle':\n                    $shuffle = true;\n                    break;\n                case '--asan':\n                case '--msan':\n                    $environment['USE_ZEND_ALLOC'] = 0;\n                    $environment['USE_TRACKED_ALLOC'] = 1;\n                    $environment['SKIP_ASAN'] = 1;\n                    $environment['SKIP_PERF_SENSITIVE'] = 1;\n                    if ($switch === '--msan') {\n                        $environment['SKIP_MSAN'] = 1;\n                    }\n\n                    $lsanSuppressions = __DIR__ . '/azure/lsan-suppressions.txt';\n                    if (file_exists($lsanSuppressions)) {\n                        $environment['LSAN_OPTIONS'] = 'suppressions=' . $lsanSuppressions\n                            . ':print_suppressions=0';\n                    }\n                    break;\n                case '--repeat':\n                    $num_repeats = (int) $argv[++$i];\n                    $environment['SKIP_REPEAT'] = 1;\n                    break;\n                case '--bless':\n                    $bless = true;\n                    break;\n                //case 'w'\n                case '-':\n                    // repeat check with full switch\n                    $switch = $argv[$i];\n                    if ($switch != '-') {\n                        $repeat = true;\n                    }\n                    break;\n                case '--version':\n                    echo '$Id: ff8fc1a09b14846e2a5daa9b51cc2b6e97f3ac3c $' . \"\\n\";\n                    exit(1);\n\n                default:\n                    echo \"Illegal switch '$switch' specified!\\n\";\n                    // no break\n                case 'h':\n                case '-help':\n                case '--help':\n                    show_usage();\n                    exit(1);\n            }\n        }\n\n        if (!$is_switch) {\n            $selected_tests = true;\n            $testfile = realpath($argv[$i]);\n\n            if (!$testfile && strpos($argv[$i], '*') !== false && function_exists('glob')) {\n                if (substr($argv[$i], -5) == '.phpt') {\n                    $pattern_match = glob($argv[$i]);\n                } else {\n                    if (preg_match(\"/\\*$/\", $argv[$i])) {\n                        $pattern_match = glob($argv[$i] . '.phpt');\n                    } else {\n                        die('Cannot find test file \"' . $argv[$i] . '\".' . PHP_EOL);\n                    }\n                }\n\n                if (is_array($pattern_match)) {\n                    $test_files = array_merge($test_files, $pattern_match);\n                }\n            } else {\n                if (is_dir($testfile)) {\n                    find_files($testfile);\n                } else {\n                    if (substr($testfile, -5) == '.phpt') {\n                        $test_files[] = $testfile;\n                    } else {\n                        die('Cannot find test file \"' . $argv[$i] . '\".' . PHP_EOL);\n                    }\n                }\n            }\n        }\n    }\n\n    if ($selected_tests && count($test_files) === 0) {\n        echo \"No tests found.\\n\";\n        return;\n    }\n\n    if (!$php) {\n        $php = getenv('TEST_PHP_EXECUTABLE');\n    }\n    if (!$php) {\n        $php = PHP_BINARY;\n    }\n\n    if (!$php_cgi) {\n        $php_cgi = getenv('TEST_PHP_CGI_EXECUTABLE');\n    }\n    if (!$php_cgi) {\n        $php_cgi = get_binary($php, 'php-cgi', 'sapi/cgi/php-cgi');\n    }\n\n    if (!$phpdbg) {\n        $phpdbg = getenv('TEST_PHPDBG_EXECUTABLE');\n    }\n    if (!$phpdbg) {\n        $phpdbg = get_binary($php, 'phpdbg', 'sapi/phpdbg/phpdbg');\n    }\n\n    putenv(\"TEST_PHP_EXECUTABLE=$php\");\n    $environment['TEST_PHP_EXECUTABLE'] = $php;\n    putenv(\"TEST_PHP_CGI_EXECUTABLE=$php_cgi\");\n    $environment['TEST_PHP_CGI_EXECUTABLE'] = $php_cgi;\n    putenv(\"TEST_PHPDBG_EXECUTABLE=$phpdbg\");\n    $environment['TEST_PHPDBG_EXECUTABLE'] = $phpdbg;\n\n    if ($conf_passed !== null) {\n        if (IS_WINDOWS) {\n            $pass_options .= \" -c \" . escapeshellarg($conf_passed);\n        } else {\n            $pass_options .= \" -c '\" . realpath($conf_passed) . \"'\";\n        }\n    }\n\n    $test_files = array_unique($test_files);\n    $test_files = array_merge($test_files, $redir_tests);\n\n    // Run selected tests.\n    $test_cnt = count($test_files);\n\n    verify_config();\n    write_information();\n\n    if ($test_cnt) {\n        putenv('NO_INTERACTION=1');\n        usort($test_files, \"test_sort\");\n        $start_time = time();\n\n        echo \"Running selected tests.\\n\";\n\n        $test_idx = 0;\n        run_all_tests($test_files, $environment);\n        $end_time = time();\n\n        if ($failed_tests_file) {\n            fclose($failed_tests_file);\n        }\n\n        if ($result_tests_file) {\n            fclose($result_tests_file);\n        }\n\n        if (0 == count($test_results)) {\n            echo \"No tests were run.\\n\";\n            return;\n        }\n\n        compute_summary();\n        echo \"=====================================================================\";\n        echo get_summary(false);\n\n        if ($output_file != '' && $just_save_results) {\n            save_results($output_file, /* prompt_to_save_results: */ false);\n        }\n    } else {\n        // Compile a list of all test files (*.phpt).\n        $test_files = [];\n        $exts_tested = count($exts_to_test);\n        $exts_skipped = 0;\n        $ignored_by_ext = 0;\n        sort($exts_to_test);\n        $test_dirs = [];\n        $optionals = ['Zend', 'tests', 'ext', 'sapi'];\n\n        foreach ($optionals as $dir) {\n            if (is_dir($dir)) {\n                $test_dirs[] = $dir;\n            }\n        }\n\n        // Convert extension names to lowercase\n        foreach ($exts_to_test as $key => $val) {\n            $exts_to_test[$key] = strtolower($val);\n        }\n\n        foreach ($test_dirs as $dir) {\n            find_files(TEST_PHP_SRCDIR . \"/{$dir}\", $dir == 'ext');\n        }\n\n        foreach ($user_tests as $dir) {\n            find_files($dir, $dir == 'ext');\n        }\n\n        $test_files = array_unique($test_files);\n        usort($test_files, \"test_sort\");\n\n        $start_time = time();\n        show_start($start_time);\n\n        $test_cnt = count($test_files);\n        $test_idx = 0;\n        run_all_tests($test_files, $environment);\n        $end_time = time();\n\n        if ($failed_tests_file) {\n            fclose($failed_tests_file);\n        }\n\n        if ($result_tests_file) {\n            fclose($result_tests_file);\n        }\n\n        // Summarize results\n\n        if (0 == count($test_results)) {\n            echo \"No tests were run.\\n\";\n            return;\n        }\n\n        compute_summary();\n\n        show_end($end_time);\n        show_summary();\n\n        save_results($output_file, /* prompt_to_save_results: */ true);\n    }\n\n    $junit->saveXML();\n    if ($bless) {\n        bless_failed_tests($PHP_FAILED_TESTS['FAILED']);\n    }\n    if (getenv('REPORT_EXIT_STATUS') !== '0' && getenv('REPORT_EXIT_STATUS') !== 'no' &&\n            ($sum_results['FAILED'] || $sum_results['BORKED'] || $sum_results['LEAKED'])) {\n        exit(1);\n    }\n}\n\nif (!function_exists(\"hrtime\")) {\n    /**\n     * @return array|float|int\n     */\n    function hrtime(bool $as_num = false)\n    {\n        $t = microtime(true);\n\n        if ($as_num) {\n            return $t * 1000000000;\n        }\n\n        $s = floor($t);\n        return [0 => $s, 1 => ($t - $s) * 1000000000];\n    }\n}\n\nfunction verify_config(): void\n{\n    global $php;\n\n    if (empty($php) || !file_exists($php)) {\n        error('environment variable TEST_PHP_EXECUTABLE must be set to specify PHP executable!');\n    }\n\n    if (!is_executable($php)) {\n        error(\"invalid PHP executable specified by TEST_PHP_EXECUTABLE  = $php\");\n    }\n}\n\nfunction write_information(): void\n{\n    global $php, $php_cgi, $phpdbg, $php_info, $user_tests, $ini_overwrites, $pass_options, $exts_to_test, $valgrind, $no_file_cache;\n\n    // Get info from php\n    $info_file = __DIR__ . '/run-test-info.php';\n    @unlink($info_file);\n    $php_info = '<?php echo \"\nPHP_SAPI    : \" , PHP_SAPI , \"\nPHP_VERSION : \" , phpversion() , \"\nZEND_VERSION: \" , zend_version() , \"\nPHP_OS      : \" , PHP_OS , \" - \" , php_uname() , \"\nINI actual  : \" , realpath(get_cfg_var(\"cfg_file_path\")) , \"\nMore .INIs  : \" , (function_exists(\\'php_ini_scanned_files\\') ? str_replace(\"\\n\",\"\", php_ini_scanned_files()) : \"** not determined **\"); ?>';\n    save_text($info_file, $php_info);\n    $info_params = [];\n    settings2array($ini_overwrites, $info_params);\n    $info_params = settings2params($info_params);\n    $php_info = `$php $pass_options $info_params $no_file_cache \"$info_file\"`;\n    define('TESTED_PHP_VERSION', `$php -n -r \"echo PHP_VERSION;\"`);\n\n    if ($php_cgi && $php != $php_cgi) {\n        $php_info_cgi = `$php_cgi $pass_options $info_params $no_file_cache -q \"$info_file\"`;\n        $php_info_sep = \"\\n---------------------------------------------------------------------\";\n        $php_cgi_info = \"$php_info_sep\\nPHP         : $php_cgi $php_info_cgi$php_info_sep\";\n    } else {\n        $php_cgi_info = '';\n    }\n\n    if ($phpdbg) {\n        $phpdbg_info = `$phpdbg $pass_options $info_params $no_file_cache -qrr \"$info_file\"`;\n        $php_info_sep = \"\\n---------------------------------------------------------------------\";\n        $phpdbg_info = \"$php_info_sep\\nPHP         : $phpdbg $phpdbg_info$php_info_sep\";\n    } else {\n        $phpdbg_info = '';\n    }\n\n    if (function_exists('opcache_invalidate')) {\n        opcache_invalidate($info_file, true);\n    }\n    @unlink($info_file);\n\n    // load list of enabled and loadable extensions\n    save_text($info_file, <<<'PHP'\n        <?php\n        echo str_replace(\"Zend OPcache\", \"opcache\", implode(\",\", get_loaded_extensions()));\n        $ext_dir = ini_get(\"extension_dir\");\n        foreach (scandir($ext_dir) as $file) {\n            if (!preg_match('/^(?:php_)?([_a-zA-Z0-9]+)\\.(?:so|dll)$/', $file, $matches)) {\n                continue;\n            }\n            $ext = $matches[1];\n            if (!extension_loaded($ext) && @dl($file)) {\n                echo \",\", $ext;\n            }\n        }\n        ?>\n    PHP);\n    $exts_to_test = explode(',', `$php $pass_options $info_params $no_file_cache \"$info_file\"`);\n    // check for extensions that need special handling and regenerate\n    $info_params_ex = [\n        'session' => ['session.auto_start=0'],\n        'tidy' => ['tidy.clean_output=0'],\n        'zlib' => ['zlib.output_compression=Off'],\n        'xdebug' => ['xdebug.mode=off','xdebug.start_with_request=default','xdebug.log_level=20'],\n    ];\n\n    foreach ($info_params_ex as $ext => $ini_overwrites_ex) {\n        if (in_array($ext, $exts_to_test)) {\n            $ini_overwrites = array_merge($ini_overwrites, $ini_overwrites_ex);\n        }\n    }\n\n    if (function_exists('opcache_invalidate')) {\n        opcache_invalidate($info_file, true);\n    }\n    @unlink($info_file);\n\n    // Write test context information.\n    echo \"\n=====================================================================\nPHP         : $php $php_info $php_cgi_info $phpdbg_info\nCWD         : \" . TEST_PHP_SRCDIR . \"\nExtra dirs  : \";\n    foreach ($user_tests as $test_dir) {\n        echo \"{$test_dir}\\n\t\t\t  \";\n    }\n    echo \"\nVALGRIND    : \" . ($valgrind ? $valgrind->getHeader() : 'Not used') . \"\n=====================================================================\n\";\n}\n\nfunction save_results(string $output_file, bool $prompt_to_save_results): void\n{\n    global $sum_results, $failed_test_summary,\n           $PHP_FAILED_TESTS, $php;\n\n    if (getenv('NO_INTERACTION') || TRAVIS_CI) {\n        return;\n    }\n\n    if ($prompt_to_save_results) {\n        /* We got failed Tests, offer the user to save a QA report */\n        $fp = fopen(\"php://stdin\", \"r+\");\n        if ($sum_results['FAILED'] || $sum_results['BORKED'] || $sum_results['WARNED'] || $sum_results['LEAKED']) {\n            echo \"\\nYou may have found a problem in PHP.\";\n        }\n        echo \"\\nThis report can be saved and used to open an issue on the bug tracker at\\n\";\n        echo \"https://github.com/php/php-src/issues\\n\";\n        echo \"This gives us a better understanding of PHP's behavior.\\n\";\n        echo \"Do you want to save this report in a file? [Yn]: \";\n        flush();\n\n        $user_input = fgets($fp, 10);\n        fclose($fp);\n        if (!(strlen(trim($user_input)) == 0 || strtolower($user_input[0]) == 'y')) {\n            return;\n        }\n    }\n    /**\n     * Collect information about the host system for our report\n     * Fetch phpinfo() output so that we can see the PHP environment\n     * Make an archive of all the failed tests\n     */\n    $failed_tests_data = '';\n    $sep = \"\\n\" . str_repeat('=', 80) . \"\\n\";\n    $failed_tests_data .= $failed_test_summary . \"\\n\";\n    $failed_tests_data .= get_summary(true) . \"\\n\";\n\n    if ($sum_results['FAILED']) {\n        foreach ($PHP_FAILED_TESTS['FAILED'] as $test_info) {\n            $failed_tests_data .= $sep . $test_info['name'] . $test_info['info'];\n            $failed_tests_data .= $sep . file_get_contents(realpath($test_info['output']));\n            $failed_tests_data .= $sep . file_get_contents(realpath($test_info['diff']));\n            $failed_tests_data .= $sep . \"\\n\\n\";\n        }\n    }\n\n    $failed_tests_data .= \"\\n\" . $sep . 'BUILD ENVIRONMENT' . $sep;\n    $failed_tests_data .= \"OS:\\n\" . PHP_OS . \" - \" . php_uname() . \"\\n\\n\";\n    $ldd = $autoconf = $sys_libtool = $libtool = $compiler = 'N/A';\n\n    if (!IS_WINDOWS) {\n        /* If PHP_AUTOCONF is set, use it; otherwise, use 'autoconf'. */\n        if (getenv('PHP_AUTOCONF')) {\n            $autoconf = shell_exec(getenv('PHP_AUTOCONF') . ' --version');\n        } else {\n            $autoconf = shell_exec('autoconf --version');\n        }\n\n        /* Always use the generated libtool - Mac OSX uses 'glibtool' */\n        $libtool = shell_exec(INIT_DIR . '/libtool --version');\n\n        /* Use shtool to find out if there is glibtool present (MacOSX) */\n        $sys_libtool_path = shell_exec(__DIR__ . '/build/shtool path glibtool libtool');\n\n        if ($sys_libtool_path) {\n            $sys_libtool = shell_exec(str_replace(\"\\n\", \"\", $sys_libtool_path) . ' --version');\n        }\n\n        /* Try the most common flags for 'version' */\n        $flags = ['-v', '-V', '--version'];\n        $cc_status = 0;\n\n        foreach ($flags as $flag) {\n            system(getenv('CC') . \" $flag >/dev/null 2>&1\", $cc_status);\n            if ($cc_status == 0) {\n                $compiler = shell_exec(getenv('CC') . \" $flag 2>&1\");\n                break;\n            }\n        }\n\n        $ldd = shell_exec(\"ldd $php 2>/dev/null\");\n    }\n\n    $failed_tests_data .= \"Autoconf:\\n$autoconf\\n\";\n    $failed_tests_data .= \"Bundled Libtool:\\n$libtool\\n\";\n    $failed_tests_data .= \"System Libtool:\\n$sys_libtool\\n\";\n    $failed_tests_data .= \"Compiler:\\n$compiler\\n\";\n    $failed_tests_data .= \"Bison:\\n\" . shell_exec('bison --version 2>/dev/null') . \"\\n\";\n    $failed_tests_data .= \"Libraries:\\n$ldd\\n\";\n    $failed_tests_data .= \"\\n\";\n    $failed_tests_data .= $sep . \"PHPINFO\" . $sep;\n    $failed_tests_data .= shell_exec($php . ' -ddisplay_errors=stderr -dhtml_errors=0 -i 2> /dev/null');\n\n    file_put_contents($output_file, $failed_tests_data);\n    echo \"Report saved to: \", $output_file, \"\\n\";\n}\n\nfunction get_binary(string $php, string $sapi, string $sapi_path): ?string\n{\n    $dir = dirname($php);\n    if (IS_WINDOWS && file_exists(\"$dir/$sapi.exe\")) {\n        return realpath(\"$dir/$sapi.exe\");\n    }\n    // Sources tree\n    if (file_exists(\"$dir/../../$sapi_path\")) {\n        return realpath(\"$dir/../../$sapi_path\");\n    }\n    // Installation tree, preserve command prefix/suffix\n    $inst = str_replace('php', $sapi, basename($php));\n    if (file_exists(\"$dir/$inst\")) {\n        return realpath(\"$dir/$inst\");\n    }\n    return null;\n}\n\nfunction find_files(string $dir, bool $is_ext_dir = false, bool $ignore = false): void\n{\n    global $test_files, $exts_to_test, $ignored_by_ext, $exts_skipped;\n\n    $o = opendir($dir) or error(\"cannot open directory: $dir\");\n\n    while (($name = readdir($o)) !== false) {\n        if (is_dir(\"{$dir}/{$name}\") && !in_array($name, ['.', '..', '.svn'])) {\n            $skip_ext = ($is_ext_dir && !in_array(strtolower($name), $exts_to_test));\n            if ($skip_ext) {\n                $exts_skipped++;\n            }\n            find_files(\"{$dir}/{$name}\", false, $ignore || $skip_ext);\n        }\n\n        // Cleanup any left-over tmp files from last run.\n        if (substr($name, -4) == '.tmp') {\n            @unlink(\"$dir/$name\");\n            continue;\n        }\n\n        // Otherwise we're only interested in *.phpt files.\n        // (but not those starting with a dot, which are hidden on\n        // many platforms)\n        if (substr($name, -5) == '.phpt' && substr($name, 0, 1) !== '.') {\n            if ($ignore) {\n                $ignored_by_ext++;\n            } else {\n                $testfile = realpath(\"{$dir}/{$name}\");\n                $test_files[] = $testfile;\n            }\n        }\n    }\n\n    closedir($o);\n}\n\n/**\n * @param array|string $name\n */\nfunction test_name($name): string\n{\n    if (is_array($name)) {\n        return $name[0] . ':' . $name[1];\n    } else {\n        return $name;\n    }\n}\n/**\n * @param array|string $a\n * @param array|string $b\n */\nfunction test_sort($a, $b): int\n{\n    $a = test_name($a);\n    $b = test_name($b);\n\n    $ta = strpos($a, TEST_PHP_SRCDIR . \"/tests\") === 0 ? 1 + (strpos($a,\n            TEST_PHP_SRCDIR . \"/tests/run-test\") === 0 ? 1 : 0) : 0;\n    $tb = strpos($b, TEST_PHP_SRCDIR . \"/tests\") === 0 ? 1 + (strpos($b,\n            TEST_PHP_SRCDIR . \"/tests/run-test\") === 0 ? 1 : 0) : 0;\n\n    if ($ta == $tb) {\n        return strcmp($a, $b);\n    } else {\n        return $tb - $ta;\n    }\n}\n\n//\n//  Write the given text to a temporary file, and return the filename.\n//\n\nfunction save_text(string $filename, string $text, ?string $filename_copy = null): void\n{\n    global $DETAILED;\n\n    if ($filename_copy && $filename_copy != $filename) {\n        if (file_put_contents($filename_copy, $text) === false) {\n            error(\"Cannot open file '\" . $filename_copy . \"' (save_text)\");\n        }\n    }\n\n    if (file_put_contents($filename, $text) === false) {\n        error(\"Cannot open file '\" . $filename . \"' (save_text)\");\n    }\n\n    if (1 < $DETAILED) {\n        echo \"\nFILE $filename {{{\n$text\n}}}\n\";\n    }\n}\n\n//\n//  Write an error in a format recognizable to Emacs or MSVC.\n//\n\nfunction error_report(string $testname, string $logname, string $tested): void\n{\n    $testname = realpath($testname);\n    $logname = realpath($logname);\n\n    switch (strtoupper(getenv('TEST_PHP_ERROR_STYLE'))) {\n        case 'MSVC':\n            echo $testname . \"(1) : $tested\\n\";\n            echo $logname . \"(1) :  $tested\\n\";\n            break;\n        case 'EMACS':\n            echo $testname . \":1: $tested\\n\";\n            echo $logname . \":1:  $tested\\n\";\n            break;\n    }\n}\n\n/**\n * @return false|string\n */\nfunction system_with_timeout(\n    string $commandline,\n    ?array $env = null,\n    ?string $stdin = null,\n    bool $captureStdIn = true,\n    bool $captureStdOut = true,\n    bool $captureStdErr = true\n) {\n    global $valgrind;\n\n    $data = '';\n\n    $bin_env = [];\n    foreach ((array) $env as $key => $value) {\n        $bin_env[$key] = $value;\n    }\n\n    $descriptorspec = [];\n    if ($captureStdIn) {\n        $descriptorspec[0] = ['pipe', 'r'];\n    }\n    if ($captureStdOut) {\n        $descriptorspec[1] = ['pipe', 'w'];\n    }\n    if ($captureStdErr) {\n        $descriptorspec[2] = ['pipe', 'w'];\n    }\n    $proc = proc_open($commandline, $descriptorspec, $pipes, TEST_PHP_SRCDIR, $bin_env, ['suppress_errors' => true]);\n\n    if (!$proc) {\n        return false;\n    }\n\n    if ($captureStdIn) {\n        if (!is_null($stdin)) {\n            fwrite($pipes[0], $stdin);\n        }\n        fclose($pipes[0]);\n        unset($pipes[0]);\n    }\n\n    $timeout = $valgrind ? 300 : ($env['TEST_TIMEOUT'] ?? 60);\n\n    while (true) {\n        /* hide errors from interrupted syscalls */\n        $r = $pipes;\n        $w = null;\n        $e = null;\n\n        $n = @stream_select($r, $w, $e, $timeout);\n\n        if ($n === false) {\n            break;\n        } elseif ($n === 0) {\n            /* timed out */\n            $data .= \"\\n ** ERROR: process timed out **\\n\";\n            proc_terminate($proc, 9);\n            return $data;\n        } elseif ($n > 0) {\n            if ($captureStdOut) {\n                $line = fread($pipes[1], 8192);\n            } elseif ($captureStdErr) {\n                $line = fread($pipes[2], 8192);\n            } else {\n                $line = '';\n            }\n            if (strlen($line) == 0) {\n                /* EOF */\n                break;\n            }\n            $data .= $line;\n        }\n    }\n\n    $stat = proc_get_status($proc);\n\n    if ($stat['signaled']) {\n        $data .= \"\\nTermsig=\" . $stat['stopsig'] . \"\\n\";\n    }\n    if ($stat[\"exitcode\"] > 128 && $stat[\"exitcode\"] < 160) {\n        $data .= \"\\nTermsig=\" . ($stat[\"exitcode\"] - 128) . \"\\n\";\n    } else if (defined('PHP_WINDOWS_VERSION_MAJOR') && (($stat[\"exitcode\"] >> 28) & 0b1111) === 0b1100) {\n        // https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-erref/87fba13e-bf06-450e-83b1-9241dc81e781\n        $data .= \"\\nTermsig=\" . $stat[\"exitcode\"] . \"\\n\";\n    }\n\n    proc_close($proc);\n    return $data;\n}\n\n/**\n * @param string|array|null $redir_tested\n */\nfunction run_all_tests(array $test_files, array $env, $redir_tested = null): void\n{\n    global $test_results, $failed_tests_file, $result_tests_file, $php, $test_idx, $file_cache;\n    global $preload;\n    // Parallel testing\n    global $PHP_FAILED_TESTS, $workers, $workerID, $workerSock;\n\n    if ($file_cache !== null || $preload) {\n        /* Automatically skip opcache tests in --file-cache and --preload mode,\n         * because opcache generally expects these to run under a default configuration. */\n        $test_files = array_filter($test_files, function($test) use($preload) {\n            if (!is_string($test)) {\n                return true;\n            }\n            if (false !== strpos($test, 'ext/opcache')) {\n                return false;\n            }\n            if ($preload && false !== strpos($test, 'ext/zend_test/tests/observer')) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    /* Ignore -jN if there is only one file to analyze. */\n    if ($workers !== null && count($test_files) > 1 && !$workerID) {\n        run_all_tests_parallel($test_files, $env, $redir_tested);\n        return;\n    }\n\n    foreach ($test_files as $name) {\n        if (is_array($name)) {\n            $index = \"# $name[1]: $name[0]\";\n\n            if ($redir_tested) {\n                $name = $name[0];\n            }\n        } elseif ($redir_tested) {\n            $index = \"# $redir_tested: $name\";\n        } else {\n            $index = $name;\n        }\n        $test_idx++;\n\n        if ($workerID) {\n            $PHP_FAILED_TESTS = ['BORKED' => [], 'FAILED' => [], 'WARNED' => [], 'LEAKED' => [], 'XFAILED' => [], 'XLEAKED' => [], 'SLOW' => []];\n            ob_start();\n        }\n\n        $result = run_test($php, $name, $env);\n        if ($workerID) {\n            $resultText = ob_get_clean();\n        }\n\n        if (!is_array($name) && $result != 'REDIR') {\n            if ($workerID) {\n                send_message($workerSock, [\n                    \"type\" => \"test_result\",\n                    \"name\" => $name,\n                    \"index\" => $index,\n                    \"result\" => $result,\n                    \"text\" => $resultText,\n                    \"PHP_FAILED_TESTS\" => $PHP_FAILED_TESTS\n                ]);\n                continue;\n            }\n\n            $test_results[$index] = $result;\n            if ($failed_tests_file && ($result == 'XFAILED' || $result == 'XLEAKED' || $result == 'FAILED' || $result == 'WARNED' || $result == 'LEAKED')) {\n                fwrite($failed_tests_file, \"$index\\n\");\n            }\n            if ($result_tests_file) {\n                fwrite($result_tests_file, \"$result\\t$index\\n\");\n            }\n        }\n    }\n}\n\n/** The heart of parallel testing.\n * @param string|array|null $redir_tested\n */\nfunction run_all_tests_parallel(array $test_files, array $env, $redir_tested): void\n{\n    global $workers, $test_idx, $test_cnt, $test_results, $failed_tests_file, $result_tests_file, $PHP_FAILED_TESTS, $shuffle, $SHOW_ONLY_GROUPS, $valgrind;\n\n    global $junit;\n\n    // The PHP binary running run-tests.php, and run-tests.php itself\n    // This PHP executable is *not* necessarily the same as the tested version\n    $thisPHP = PHP_BINARY;\n    $thisScript = __FILE__;\n\n    $workerProcs = [];\n    $workerSocks = [];\n\n    // Each test may specify a list of conflict keys. While a test that conflicts with\n    // key K is running, no other test that conflicts with K may run. Conflict keys are\n    // specified either in the --CONFLICTS-- section, or CONFLICTS file inside a directory.\n    $dirConflictsWith = [];\n    $fileConflictsWith = [];\n    $sequentialTests = [];\n    foreach ($test_files as $i => $file) {\n        $contents = file_get_contents($file);\n        if (preg_match('/^--CONFLICTS--(.+?)^--/ms', $contents, $matches)) {\n            $conflicts = parse_conflicts($matches[1]);\n        } else {\n            // Cache per-directory conflicts in a separate map, so we compute these only once.\n            $dir = dirname($file);\n            if (!isset($dirConflictsWith[$dir])) {\n                $dirConflicts = [];\n                if (file_exists($dir . '/CONFLICTS')) {\n                    $contents = file_get_contents($dir . '/CONFLICTS');\n                    $dirConflicts = parse_conflicts($contents);\n                }\n                $dirConflictsWith[$dir] = $dirConflicts;\n            }\n            $conflicts = $dirConflictsWith[$dir];\n        }\n\n        // For tests conflicting with \"all\", no other tests may run in parallel. We'll run these\n        // tests separately at the end, when only one worker is left.\n        if (in_array('all', $conflicts, true)) {\n            $sequentialTests[] = $file;\n            unset($test_files[$i]);\n        }\n\n        $fileConflictsWith[$file] = $conflicts;\n    }\n\n    // Some tests assume that they are executed in a certain order. We will be popping from\n    // $test_files, so reverse its order here. This makes sure that order is preserved at least\n    // for tests with a common conflict key.\n    $test_files = array_reverse($test_files);\n\n    // To discover parallelization issues it is useful to randomize the test order.\n    if ($shuffle) {\n        shuffle($test_files);\n    }\n\n    // Don't start more workers than test files.\n    $workers = max(1, min($workers, count($test_files)));\n\n    echo \"Spawning $workers workers... \";\n\n    // We use sockets rather than STDIN/STDOUT for comms because on Windows,\n    // those can't be non-blocking for some reason.\n    $listenSock = stream_socket_server(\"tcp://127.0.0.1:0\") or error(\"Couldn't create socket on localhost.\");\n    $sockName = stream_socket_get_name($listenSock, false);\n    // PHP is terrible and returns IPv6 addresses not enclosed by []\n    $portPos = strrpos($sockName, \":\");\n    $sockHost = substr($sockName, 0, $portPos);\n    if (false !== strpos($sockHost, \":\")) {\n        $sockHost = \"[$sockHost]\";\n    }\n    $sockPort = substr($sockName, $portPos + 1);\n    $sockUri = \"tcp://$sockHost:$sockPort\";\n    $totalFileCount = count($test_files);\n\n    $startTime = microtime(true);\n    for ($i = 1; $i <= $workers; $i++) {\n        $proc = proc_open(\n            [$thisPHP, $thisScript],\n            [], // Inherit our stdin, stdout and stderr\n            $pipes,\n            null,\n            $GLOBALS['environment'] + [\n                \"TEST_PHP_WORKER\" => $i,\n                \"TEST_PHP_URI\" => $sockUri,\n            ],\n            [\n                \"suppress_errors\" => true,\n                'create_new_console' => true,\n            ]\n        );\n        if ($proc === false) {\n            kill_children($workerProcs);\n            error(\"Failed to spawn worker $i\");\n        }\n        $workerProcs[$i] = $proc;\n    }\n\n    for ($i = 1; $i <= $workers; $i++) {\n        $workerSock = stream_socket_accept($listenSock, 5);\n        if ($workerSock === false) {\n            kill_children($workerProcs);\n            error(\"Failed to accept connection from worker.\");\n        }\n\n        $greeting = base64_encode(serialize([\n            \"type\" => \"hello\",\n            \"GLOBALS\" => $GLOBALS,\n            \"constants\" => [\n                \"INIT_DIR\" => INIT_DIR,\n                \"TEST_PHP_SRCDIR\" => TEST_PHP_SRCDIR,\n                \"TRAVIS_CI\" => TRAVIS_CI\n            ]\n        ])) . \"\\n\";\n\n        stream_set_timeout($workerSock, 5);\n        if (fwrite($workerSock, $greeting) === false) {\n            kill_children($workerProcs);\n            error(\"Failed to send greeting to worker.\");\n        }\n\n        $rawReply = fgets($workerSock);\n        if ($rawReply === false) {\n            kill_children($workerProcs);\n            error(\"Failed to read greeting reply from worker.\");\n        }\n\n        $reply = unserialize(base64_decode($rawReply));\n        if (!$reply || $reply[\"type\"] !== \"hello_reply\") {\n            kill_children($workerProcs);\n            error(\"Greeting reply from worker unexpected or could not be decoded: '$rawReply'\");\n        }\n\n        stream_set_timeout($workerSock, 0);\n        stream_set_blocking($workerSock, false);\n\n        $workerID = $reply[\"workerID\"];\n        $workerSocks[$workerID] = $workerSock;\n    }\n    printf(\"Done in %.2fs\\n\", microtime(true) - $startTime);\n    echo \"=====================================================================\\n\";\n    echo \"\\n\";\n\n    $rawMessageBuffers = [];\n    $testsInProgress = 0;\n\n    // Map from conflict key to worker ID.\n    $activeConflicts = [];\n    // Tests waiting due to conflicts. Map from conflict key to array.\n    $waitingTests = [];\n\nescape:\n    while ($test_files || $sequentialTests || $testsInProgress > 0) {\n        $toRead = array_values($workerSocks);\n        $toWrite = null;\n        $toExcept = null;\n        if (stream_select($toRead, $toWrite, $toExcept, 10)) {\n            foreach ($toRead as $workerSock) {\n                $i = array_search($workerSock, $workerSocks);\n                if ($i === false) {\n                    kill_children($workerProcs);\n                    error(\"Could not find worker stdout in array of worker stdouts, THIS SHOULD NOT HAPPEN.\");\n                }\n                while (false !== ($rawMessage = fgets($workerSock))) {\n                    // work around fgets truncating things\n                    if (($rawMessageBuffers[$i] ?? '') !== '') {\n                        $rawMessage = $rawMessageBuffers[$i] . $rawMessage;\n                        $rawMessageBuffers[$i] = '';\n                    }\n                    if (substr($rawMessage, -1) !== \"\\n\") {\n                        $rawMessageBuffers[$i] = $rawMessage;\n                        continue;\n                    }\n\n                    $message = unserialize(base64_decode($rawMessage));\n                    if (!$message) {\n                        kill_children($workerProcs);\n                        $stuff = fread($workerSock, 65536);\n                        error(\"Could not decode message from worker $i: '$rawMessage$stuff'\");\n                    }\n\n                    switch ($message[\"type\"]) {\n                        case \"tests_finished\":\n                            $testsInProgress--;\n                            foreach ($activeConflicts as $key => $workerId) {\n                                if ($workerId === $i) {\n                                    unset($activeConflicts[$key]);\n                                    if (isset($waitingTests[$key])) {\n                                        while ($test = array_pop($waitingTests[$key])) {\n                                            $test_files[] = $test;\n                                        }\n                                        unset($waitingTests[$key]);\n                                    }\n                                }\n                            }\n                            $junit->mergeResults($message[\"junit\"]);\n                            // no break\n                        case \"ready\":\n                            // Schedule sequential tests only once we are down to one worker.\n                            if (count($workerProcs) === 1 && $sequentialTests) {\n                                $test_files = array_merge($test_files, $sequentialTests);\n                                $sequentialTests = [];\n                            }\n                            // Batch multiple tests to reduce communication overhead.\n                            // - When valgrind is used, communication overhead is relatively small,\n                            //   so just use a batch size of 1.\n                            // - If this is running a small enough number of tests,\n                            //   reduce the batch size to give batches to more workers.\n                            $files = [];\n                            $maxBatchSize = $valgrind ? 1 : ($shuffle ? 4 : 32);\n                            $averageFilesPerWorker = max(1, (int) ceil($totalFileCount / count($workerProcs)));\n                            $batchSize = min($maxBatchSize, $averageFilesPerWorker);\n                            while (count($files) <= $batchSize && $file = array_pop($test_files)) {\n                                foreach ($fileConflictsWith[$file] as $conflictKey) {\n                                    if (isset($activeConflicts[$conflictKey])) {\n                                        $waitingTests[$conflictKey][] = $file;\n                                        continue 2;\n                                    }\n                                }\n                                $files[] = $file;\n                            }\n                            if ($files) {\n                                foreach ($files as $file) {\n                                    foreach ($fileConflictsWith[$file] as $conflictKey) {\n                                        $activeConflicts[$conflictKey] = $i;\n                                    }\n                                }\n                                $testsInProgress++;\n                                send_message($workerSocks[$i], [\n                                    \"type\" => \"run_tests\",\n                                    \"test_files\" => $files,\n                                    \"env\" => $env,\n                                    \"redir_tested\" => $redir_tested\n                                ]);\n                            } else {\n                                proc_terminate($workerProcs[$i]);\n                                unset($workerProcs[$i]);\n                                unset($workerSocks[$i]);\n                                goto escape;\n                            }\n                            break;\n                        case \"test_result\":\n                            list($name, $index, $result, $resultText) = [$message[\"name\"], $message[\"index\"], $message[\"result\"], $message[\"text\"]];\n                            foreach ($message[\"PHP_FAILED_TESTS\"] as $category => $tests) {\n                                $PHP_FAILED_TESTS[$category] = array_merge($PHP_FAILED_TESTS[$category], $tests);\n                            }\n                            $test_idx++;\n\n                            if (!$SHOW_ONLY_GROUPS) {\n                                clear_show_test();\n                            }\n\n                            echo $resultText;\n\n                            if (!$SHOW_ONLY_GROUPS) {\n                                show_test($test_idx, count($workerProcs) . \"/$workers concurrent test workers running\");\n                            }\n\n                            if (!is_array($name) && $result != 'REDIR') {\n                                $test_results[$index] = $result;\n\n                                if ($failed_tests_file && ($result == 'XFAILED' || $result == 'XLEAKED' || $result == 'FAILED' || $result == 'WARNED' || $result == 'LEAKED')) {\n                                    fwrite($failed_tests_file, \"$index\\n\");\n                                }\n                                if ($result_tests_file) {\n                                    fwrite($result_tests_file, \"$result\\t$index\\n\");\n                                }\n                            }\n                            break;\n                        case \"error\":\n                            kill_children($workerProcs);\n                            error(\"Worker $i reported error: $message[msg]\");\n                            break;\n                        case \"php_error\":\n                            kill_children($workerProcs);\n                            $error_consts = [\n                                'E_ERROR',\n                                'E_WARNING',\n                                'E_PARSE',\n                                'E_NOTICE',\n                                'E_CORE_ERROR',\n                                'E_CORE_WARNING',\n                                'E_COMPILE_ERROR',\n                                'E_COMPILE_WARNING',\n                                'E_USER_ERROR',\n                                'E_USER_WARNING',\n                                'E_USER_NOTICE',\n                                'E_STRICT', // TODO Cleanup when removed from Zend Engine.\n                                'E_RECOVERABLE_ERROR',\n                                'E_DEPRECATED',\n                                'E_USER_DEPRECATED'\n                            ];\n                            $error_consts = array_combine(array_map('constant', $error_consts), $error_consts);\n                            error(\"Worker $i reported unexpected {$error_consts[$message['errno']]}: $message[errstr] in $message[errfile] on line $message[errline]\");\n                            // no break\n                        default:\n                            kill_children($workerProcs);\n                            error(\"Unrecognised message type '$message[type]' from worker $i\");\n                    }\n                }\n            }\n        }\n    }\n\n    if (!$SHOW_ONLY_GROUPS) {\n        clear_show_test();\n    }\n\n    kill_children($workerProcs);\n\n    if ($testsInProgress < 0) {\n        error(\"$testsInProgress test batches “in progress”, which is less than zero. THIS SHOULD NOT HAPPEN.\");\n    }\n}\n\nfunction send_message($stream, array $message): void\n{\n    $blocking = stream_get_meta_data($stream)[\"blocked\"];\n    stream_set_blocking($stream, true);\n    fwrite($stream, base64_encode(serialize($message)) . \"\\n\");\n    stream_set_blocking($stream, $blocking);\n}\n\nfunction kill_children(array $children): void\n{\n    foreach ($children as $child) {\n        if ($child) {\n            proc_terminate($child);\n        }\n    }\n}\n\nfunction run_worker(): void\n{\n    global $workerID, $workerSock;\n\n    global $junit;\n\n    $sockUri = getenv(\"TEST_PHP_URI\");\n\n    $workerSock = stream_socket_client($sockUri, $_, $_, 5) or error(\"Couldn't connect to $sockUri\");\n\n    $greeting = fgets($workerSock);\n    $greeting = unserialize(base64_decode($greeting)) or die(\"Could not decode greeting\\n\");\n    if ($greeting[\"type\"] !== \"hello\") {\n        error(\"Unexpected greeting of type $greeting[type]\");\n    }\n\n    set_error_handler(function (int $errno, string $errstr, string $errfile, int $errline) use ($workerSock): bool {\n        if (error_reporting() & $errno) {\n            send_message($workerSock, compact('errno', 'errstr', 'errfile', 'errline') + [\n                'type' => 'php_error'\n            ]);\n        }\n\n        return true;\n    });\n\n    foreach ($greeting[\"GLOBALS\"] as $var => $value) {\n        if ($var !== \"workerID\" && $var !== \"workerSock\" && $var !== \"GLOBALS\") {\n            $GLOBALS[$var] = $value;\n        }\n    }\n    foreach ($greeting[\"constants\"] as $const => $value) {\n        define($const, $value);\n    }\n\n    send_message($workerSock, [\n        \"type\" => \"hello_reply\",\n        \"workerID\" => $workerID\n    ]);\n\n    send_message($workerSock, [\n        \"type\" => \"ready\"\n    ]);\n\n    while (($command = fgets($workerSock))) {\n        $command = unserialize(base64_decode($command));\n        $command[\"env\"][\"TEST_PHP_WORKER\"] = getenv('TEST_PHP_WORKER');\n\n        switch ($command[\"type\"]) {\n            case \"run_tests\":\n                run_all_tests($command[\"test_files\"], $command[\"env\"], $command[\"redir_tested\"]);\n                send_message($workerSock, [\n                    \"type\" => \"tests_finished\",\n                    \"junit\" => $junit->isEnabled() ? $junit : null,\n                ]);\n                $junit->clear();\n                break;\n            default:\n                send_message($workerSock, [\n                    \"type\" => \"error\",\n                    \"msg\" => \"Unrecognised message type: $command[type]\"\n                ]);\n                break 2;\n        }\n    }\n}\n\n//\n//  Show file or result block\n//\nfunction show_file_block(string $file, string $block, ?string $section = null): void\n{\n    global $cfg;\n    global $colorize;\n\n    if ($cfg['show'][$file]) {\n        if (is_null($section)) {\n            $section = strtoupper($file);\n        }\n        if ($section === 'DIFF' && $colorize) {\n            // '-' is Light Red for removal, '+' is Light Green for addition\n            $block = preg_replace('/^[0-9]+\\-\\s.*$/m', \"\\e[1;31m\\\\0\\e[0m\", $block);\n            $block = preg_replace('/^[0-9]+\\+\\s.*$/m', \"\\e[1;32m\\\\0\\e[0m\", $block);\n        }\n\n        echo \"\\n========\" . $section . \"========\\n\";\n        echo rtrim($block);\n        echo \"\\n========DONE========\\n\";\n    }\n}\n\nfunction skip_test(string $tested, string $tested_file, string $shortname, string $reason) {\n    global $junit;\n\n    show_result('SKIP', $tested, $tested_file, \"reason: $reason\");\n    $junit->initSuite($junit->getSuiteName($shortname));\n    $junit->markTestAs('SKIP', $shortname, $tested, 0, $reason);\n    return 'SKIPPED';\n}\n\n//\n//  Run an individual test case.\n//\n/**\n * @param string|array $file\n */\nfunction run_test(string $php, $file, array $env): string\n{\n    global $log_format, $ini_overwrites, $PHP_FAILED_TESTS;\n    global $pass_options, $DETAILED, $IN_REDIRECT, $test_cnt, $test_idx;\n    global $valgrind, $temp_source, $temp_target, $cfg, $environment;\n    global $no_clean;\n    global $SHOW_ONLY_GROUPS;\n    global $no_file_cache;\n    global $slow_min_ms;\n    global $preload, $file_cache;\n    global $num_repeats;\n    // Parallel testing\n    global $workerID;\n\n    // Temporary\n    /** @var JUnit */\n    global $junit;\n\n    static $skipCache;\n    if (!$skipCache) {\n        $enableSkipCache = !($env['DISABLE_SKIP_CACHE'] ?? '0');\n        $skipCache = new SkipCache($enableSkipCache, $cfg['keep']['skip']);\n    }\n\n    $temp_filenames = null;\n    $org_file = $file;\n    $orig_php = $php;\n\n    $php_cgi = $env['TEST_PHP_CGI_EXECUTABLE'] ?? null;\n    $phpdbg = $env['TEST_PHPDBG_EXECUTABLE'] ?? null;\n\n    if (is_array($file)) {\n        $file = $file[0];\n    }\n\n    if ($DETAILED) {\n        echo \"\n=================\nTEST $file\n\";\n    }\n\n    $shortname = str_replace(TEST_PHP_SRCDIR . '/', '', $file);\n    $tested_file = $shortname;\n\n    try {\n        $test = new TestFile($file, (bool)$IN_REDIRECT);\n    } catch (BorkageException $ex) {\n        show_result(\"BORK\", $ex->getMessage(), $tested_file);\n        $PHP_FAILED_TESTS['BORKED'][] = [\n            'name' => $file,\n            'test_name' => '',\n            'output' => '',\n            'diff' => '',\n            'info' => \"{$ex->getMessage()} [$file]\",\n        ];\n\n        $junit->markTestAs('BORK', $shortname, $tested_file, 0, $ex->getMessage());\n        return 'BORKED';\n    }\n\n    $tested = $test->getName();\n\n    if ($num_repeats > 1 && $test->hasSection('FILE_EXTERNAL')) {\n        return skip_test($tested, $tested_file, $shortname, 'Test with FILE_EXTERNAL might not be repeatable');\n    }\n\n    if ($test->hasSection('CAPTURE_STDIO')) {\n        $capture = $test->getSection('CAPTURE_STDIO');\n        $captureStdIn = stripos($capture, 'STDIN') !== false;\n        $captureStdOut = stripos($capture, 'STDOUT') !== false;\n        $captureStdErr = stripos($capture, 'STDERR') !== false;\n    } else {\n        $captureStdIn = true;\n        $captureStdOut = true;\n        $captureStdErr = true;\n    }\n    if ($captureStdOut && $captureStdErr) {\n        $cmdRedirect = ' 2>&1';\n    } else {\n        $cmdRedirect = '';\n    }\n\n    /* For GET/POST/PUT tests, check if cgi sapi is available and if it is, use it. */\n    if ($test->isCGI()) {\n        if (!$php_cgi) {\n            return skip_test($tested, $tested_file, $shortname, 'CGI not available');\n        }\n        $php = $php_cgi . ' -C ';\n        $uses_cgi = true;\n        if ($num_repeats > 1) {\n            return skip_test($tested, $tested_file, $shortname, 'CGI does not support --repeat');\n        }\n    }\n\n    /* For phpdbg tests, check if phpdbg sapi is available and if it is, use it. */\n    $extra_options = '';\n    if ($test->hasSection('PHPDBG')) {\n        if (isset($phpdbg)) {\n            $php = $phpdbg . ' -qIb';\n\n            // Additional phpdbg command line options for sections that need to\n            // be run straight away. For example, EXTENSIONS, SKIPIF, CLEAN.\n            $extra_options = '-rr';\n        } else {\n            return skip_test($tested, $tested_file, $shortname, 'phpdbg not available');\n        }\n        if ($num_repeats > 1) {\n            return skip_test($tested, $tested_file, $shortname, 'phpdbg does not support --repeat');\n        }\n    }\n\n    if ($num_repeats > 1) {\n        if ($test->hasSection('CLEAN')) {\n            return skip_test($tested, $tested_file, $shortname, 'Test with CLEAN might not be repeatable');\n        }\n        if ($test->hasSection('STDIN')) {\n            return skip_test($tested, $tested_file, $shortname, 'Test with STDIN might not be repeatable');\n        }\n        if ($test->hasSection('CAPTURE_STDIO')) {\n            return skip_test($tested, $tested_file, $shortname, 'Test with CAPTURE_STDIO might not be repeatable');\n        }\n    }\n\n    if (!$SHOW_ONLY_GROUPS && !$workerID) {\n        show_test($test_idx, $shortname);\n    }\n\n    if (is_array($IN_REDIRECT)) {\n        $temp_dir = $test_dir = $IN_REDIRECT['dir'];\n    } else {\n        $temp_dir = $test_dir = realpath(dirname($file));\n    }\n\n    if ($temp_source && $temp_target) {\n        $temp_dir = str_replace($temp_source, $temp_target, $temp_dir);\n    }\n\n    $main_file_name = basename($file, 'phpt');\n\n    $diff_filename = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'diff';\n    $log_filename = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'log';\n    $exp_filename = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'exp';\n    $output_filename = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'out';\n    $memcheck_filename = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'mem';\n    $sh_filename = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'sh';\n    $temp_file = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'php';\n    $test_file = $test_dir . DIRECTORY_SEPARATOR . $main_file_name . 'php';\n    $temp_skipif = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'skip.php';\n    $test_skipif = $test_dir . DIRECTORY_SEPARATOR . $main_file_name . 'skip.php';\n    $temp_after = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'after.php';\n    $test_after = $test_dir . DIRECTORY_SEPARATOR . $main_file_name . 'after.php';\n    $temp_clean = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'clean.php';\n    $test_clean = $test_dir . DIRECTORY_SEPARATOR . $main_file_name . 'clean.php';\n    $preload_filename = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'preload.php';\n    $tmp_post = $temp_dir . DIRECTORY_SEPARATOR . $main_file_name . 'post';\n    $tmp_relative_file = str_replace(__DIR__ . DIRECTORY_SEPARATOR, '', $test_file) . 't';\n\n    if ($temp_source && $temp_target) {\n        $temp_skipif .= 's';\n        $temp_file .= 's';\n        $temp_clean .= 's';\n        $copy_file = $temp_dir . DIRECTORY_SEPARATOR . basename(is_array($file) ? $file[1] : $file) . '.phps';\n\n        if (!is_dir(dirname($copy_file))) {\n            mkdir(dirname($copy_file), 0777, true) or error(\"Cannot create output directory - \" . dirname($copy_file));\n        }\n\n        if ($test->hasSection('FILE')) {\n            save_text($copy_file, $test->getSection('FILE'));\n        }\n\n        $temp_filenames = [\n            'file' => $copy_file,\n            'diff' => $diff_filename,\n            'log' => $log_filename,\n            'exp' => $exp_filename,\n            'out' => $output_filename,\n            'mem' => $memcheck_filename,\n            'sh' => $sh_filename,\n            'php' => $temp_file,\n            'skip' => $temp_skipif,\n            'after' => $temp_after,\n            'clean' => $temp_clean\n        ];\n    }\n\n    if (is_array($IN_REDIRECT)) {\n        $tested = $IN_REDIRECT['prefix'] . ' ' . $tested;\n        $tested_file = $tmp_relative_file;\n        $shortname = str_replace(TEST_PHP_SRCDIR . '/', '', $tested_file);\n    }\n\n    // unlink old test results\n    @unlink($diff_filename);\n    @unlink($log_filename);\n    @unlink($exp_filename);\n    @unlink($output_filename);\n    @unlink($memcheck_filename);\n    @unlink($sh_filename);\n    @unlink($temp_file);\n    @unlink($test_file);\n    @unlink($temp_skipif);\n    @unlink($test_skipif);\n    @unlink($tmp_post);\n    @unlink($temp_after);\n    @unlink($test_after);\n    @unlink($temp_clean);\n    @unlink($test_clean);\n    @unlink($preload_filename);\n\n    // Reset environment from any previous test.\n    $env['REDIRECT_STATUS'] = '';\n    $env['QUERY_STRING'] = '';\n    $env['PATH_TRANSLATED'] = '';\n    $env['SCRIPT_FILENAME'] = '';\n    $env['REQUEST_METHOD'] = '';\n    $env['CONTENT_TYPE'] = '';\n    $env['CONTENT_LENGTH'] = '';\n    $env['TZ'] = '';\n\n    if ($test->sectionNotEmpty('ENV')) {\n        $env_str = str_replace('{PWD}', dirname($file), $test->getSection('ENV'));\n        $env_str = str_replace('{RUNID}', getenv('UNIQ_RUN_ID'), $env_str);\n        $env_str = str_replace('{TEST_PHP_WORKER}', getenv('TEST_PHP_WORKER'), $env_str);\n        $env_str = str_replace('{TMP}', sys_get_temp_dir(), $env_str);\n        foreach (explode(\"\\n\", $env_str) as $e) {\n            $e = explode('=', trim($e), 2);\n\n            if (!empty($e[0]) && isset($e[1])) {\n                $env[$e[0]] = $e[1];\n            }\n        }\n    }\n\n    // Default ini settings\n    $ini_settings = $workerID ? ['opcache.cache_id' => \"worker$workerID\"] : [];\n\n    // Additional required extensions\n    $extensions = [];\n    if ($test->hasSection('EXTENSIONS')) {\n        $extensions = preg_split(\"/[\\n\\r]+/\", trim($test->getSection('EXTENSIONS')));\n    }\n    if (is_array($IN_REDIRECT) && $IN_REDIRECT['EXTENSIONS'] != []) {\n        $extensions = array_merge($extensions, $IN_REDIRECT['EXTENSIONS']);\n    }\n\n    /* Load required extensions */\n    if ($extensions != []) {\n        $ext_params = [];\n        settings2array($ini_overwrites, $ext_params);\n        $ext_params = settings2params($ext_params);\n        [$ext_dir, $loaded] = $skipCache->getExtensions(\"$orig_php $pass_options $extra_options $ext_params $no_file_cache\");\n        $ext_prefix = IS_WINDOWS ? \"php_\" : \"\";\n        $missing = [];\n        foreach ($extensions as $req_ext) {\n            if (!in_array(strtolower($req_ext), $loaded)) {\n                if ($req_ext == 'opcache' || $req_ext == 'xdebug') {\n                    $ext_file = $ext_dir . DIRECTORY_SEPARATOR . $ext_prefix . $req_ext . '.' . PHP_SHLIB_SUFFIX;\n                    $ini_settings['zend_extension'][] = $ext_file;\n                } else {\n                    $ext_file = $ext_dir . DIRECTORY_SEPARATOR . $ext_prefix . $req_ext . '.' . PHP_SHLIB_SUFFIX;\n                    $ini_settings['extension'][] = $ext_file;\n                }\n                if (!is_readable($ext_file)) {\n                    $missing[] = $req_ext;\n                }\n            }\n        }\n        if ($missing) {\n            $message = 'Required extension' . (count($missing) > 1 ? 's' : '')\n                . ' missing: ' . implode(', ', $missing);\n            return skip_test($tested, $tested_file, $shortname, $message);\n        }\n    }\n\n    // additional ini overwrites\n    //$ini_overwrites[] = 'setting=value';\n    settings2array($ini_overwrites, $ini_settings);\n\n    if (getenv('OPCACHE') !== false) {\n        if (getenv('OPCACHE') == 'yes') {\n            $ini_settings['opcache.enable'] = 1;\n            $ini_settings['opcache.enable_cli'] = 1;\n            $ini_settings['opcache.optimization_level'] = -1;\n        } else {\n            $ini_settings['opcache.enable'] = 0;\n            $ini_settings['opcache.enable_cli'] = 0;\n            $ini_settings['opcache.optimization_level'] = 0;\n        }\n    }\n\n    $orig_ini_settings = settings2params($ini_settings);\n\n    if ($file_cache !== null) {\n        $ini_settings['opcache.file_cache'] = '/tmp';\n        // Make sure warnings still show up on the second run.\n        $ini_settings['opcache.record_warnings'] = '1';\n        // File cache is currently incompatible with JIT.\n        $ini_settings['opcache.jit'] = '0';\n        if ($file_cache === 'use') {\n            // Disable timestamp validation in order to fetch from file cache,\n            // even though all the files are re-created.\n            $ini_settings['opcache.validate_timestamps'] = '0';\n        }\n    } else if ($num_repeats > 1) {\n        // Make sure warnings still show up on the second run.\n        $ini_settings['opcache.record_warnings'] = '1';\n    }\n\n    // Any special ini settings\n    // these may overwrite the test defaults...\n    if ($test->hasSection('INI')) {\n        $ini = str_replace('{PWD}', dirname($file), $test->getSection('INI'));\n        $ini = str_replace('{RUNID}', getenv('UNIQ_RUN_ID'), $ini);\n        $ini = str_replace('{TEST_PHP_WORKER}', getenv('TEST_PHP_WORKER'), $ini);\n        $ini = str_replace('{TMP}', sys_get_temp_dir(), $ini);\n        $replacement = IS_WINDOWS ? '\"' . PHP_BINARY . ' -r \\\"while ($in = fgets(STDIN)) echo $in;\\\" > $1\"' : 'tee $1 >/dev/null';\n        $ini = preg_replace('/{MAIL:(\\S+)}/', $replacement, $ini);\n        settings2array(preg_split(\"/[\\n\\r]+/\", $ini), $ini_settings);\n\n        if ($num_repeats > 1 && isset($ini_settings['opcache.opt_debug_level'])) {\n            return skip_test($tested, $tested_file, $shortname, 'opt_debug_level tests are not repeatable');\n        }\n    }\n\n    $ini_settings = settings2params($ini_settings);\n\n    $env['TEST_PHP_EXTRA_ARGS'] = $pass_options . ' ' . $ini_settings;\n\n    // Check if test should be skipped.\n    $info = '';\n    $warn = false;\n\n    if ($test->sectionNotEmpty('SKIPIF')) {\n        show_file_block('skip', $test->getSection('SKIPIF'));\n        $extra = !IS_WINDOWS ?\n            \"unset REQUEST_METHOD; unset QUERY_STRING; unset PATH_TRANSLATED; unset SCRIPT_FILENAME; unset REQUEST_METHOD;\" : \"\";\n\n        if ($valgrind) {\n            $env['USE_ZEND_ALLOC'] = '0';\n            $env['ZEND_DONT_UNLOAD_MODULES'] = 1;\n        }\n\n        if (!array_key_exists('XDEBUG_MODE', $env)) {\n            $env['XDEBUG_MODE'] = \"\";\n        }\n\n        /* Remove auto prepend and append settings for SKIPIF */\n        $skipif_ini_settings = $orig_ini_settings;\n        $skipif_ini_settings = preg_replace( '@-d \\\"auto_prepend_file=.*?\\\" @', '', $skipif_ini_settings );\n        $skipif_ini_settings = preg_replace( '@-d \\\"auto_append_file=.*?\\\" @', '', $skipif_ini_settings );\n        $skipif_ini_settings = preg_replace( '@-d \\\"xdebug\\.log=.*?\\\" @', '', $skipif_ini_settings );\n        $skipif_ini_settings .= \" -d track_errors=0 -d xdebug.mode=off\";\n\n        $junit->startTimer($shortname);\n\n        $startTime = microtime(true);\n        $commandLine = \"$extra $php $pass_options $extra_options -q $skipif_ini_settings $no_file_cache -d display_errors=1 -d display_startup_errors=0\";\n        $output = $skipCache->checkSkip($commandLine, $test->getSection('SKIPIF'), $test_skipif, $temp_skipif, $env);\n\n        $time = microtime(true) - $startTime;\n        $junit->stopTimer($shortname);\n\n        if ($time > $slow_min_ms / 1000) {\n            $PHP_FAILED_TESTS['SLOW'][] = [\n                'name' => $file,\n                'test_name' => 'SKIPIF of ' . $tested . \" [$tested_file]\",\n                'output' => '',\n                'diff' => '',\n                'info' => $time,\n            ];\n        }\n\n        if (!$cfg['keep']['skip']) {\n            @unlink($test_skipif);\n        }\n\n        if (!strncasecmp('skip', $output, 4)) {\n            if (preg_match('/^skip\\s*(.+)/i', $output, $m)) {\n                show_result('SKIP', $tested, $tested_file, \"reason: $m[1]\", $temp_filenames);\n            } else {\n                show_result('SKIP', $tested, $tested_file, '', $temp_filenames);\n            }\n\n            $message = !empty($m[1]) ? $m[1] : '';\n            $junit->markTestAs('SKIP', $shortname, $tested, null, $message);\n            return 'SKIPPED';\n        }\n\n\n        if (!strncasecmp('info', $output, 4) && preg_match('/^info\\s*(.+)/i', $output, $m)) {\n            $info = \" (info: $m[1])\";\n        } elseif (!strncasecmp('warn', $output, 4) && preg_match('/^warn\\s+(.+)/i', $output, $m)) {\n            $warn = true; /* only if there is a reason */\n            $info = \" (warn: $m[1])\";\n        } elseif (!strncasecmp('xfail', $output, 5)) {\n            // Pretend we have an XFAIL section\n            $test->setSection('XFAIL', ltrim(substr($output, 5)));\n        } elseif ($output !== '') {\n            show_result(\"BORK\", $output, $tested_file, 'reason: invalid output from SKIPIF', $temp_filenames);\n            $PHP_FAILED_TESTS['BORKED'][] = [\n                'name' => $file,\n                'test_name' => '',\n                'output' => '',\n                'diff' => '',\n                'info' => \"$output [$file]\",\n            ];\n\n            $junit->markTestAs('BORK', $shortname, $tested, null, $output);\n            return 'BORKED';\n        }\n    }\n\n    if (!extension_loaded(\"zlib\") && $test->hasAnySections(\"GZIP_POST\", \"DEFLATE_POST\")) {\n        $message = \"ext/zlib required\";\n        show_result('SKIP', $tested, $tested_file, \"reason: $message\", $temp_filenames);\n        $junit->markTestAs('SKIP', $shortname, $tested, null, $message);\n        return 'SKIPPED';\n    }\n\n    if ($test->hasSection('REDIRECTTEST')) {\n        $test_files = [];\n\n        $IN_REDIRECT = eval($test->getSection('REDIRECTTEST'));\n        $IN_REDIRECT['via'] = \"via [$shortname]\\n\\t\";\n        $IN_REDIRECT['dir'] = realpath(dirname($file));\n        $IN_REDIRECT['prefix'] = $tested;\n        $IN_REDIRECT['EXTENSIONS'] = $extensions;\n\n        if (!empty($IN_REDIRECT['TESTS'])) {\n            if (is_array($org_file)) {\n                $test_files[] = $org_file[1];\n            } else {\n                $GLOBALS['test_files'] = $test_files;\n                find_files($IN_REDIRECT['TESTS']);\n\n                foreach ($GLOBALS['test_files'] as $f) {\n                    $test_files[] = [$f, $file];\n                }\n            }\n            $test_cnt += count($test_files) - 1;\n            $test_idx--;\n\n            show_redirect_start($IN_REDIRECT['TESTS'], $tested, $tested_file);\n\n            // set up environment\n            $redirenv = array_merge($environment, $IN_REDIRECT['ENV']);\n            $redirenv['REDIR_TEST_DIR'] = realpath($IN_REDIRECT['TESTS']) . DIRECTORY_SEPARATOR;\n\n            usort($test_files, \"test_sort\");\n            run_all_tests($test_files, $redirenv, $tested);\n\n            show_redirect_ends($IN_REDIRECT['TESTS'], $tested, $tested_file);\n\n            // a redirected test never fails\n            $IN_REDIRECT = false;\n\n            $junit->markTestAs('PASS', $shortname, $tested);\n            return 'REDIR';\n        } else {\n            $bork_info = \"Redirect info must contain exactly one TEST string to be used as redirect directory.\";\n            show_result(\"BORK\", $bork_info, '', '', $temp_filenames);\n            $PHP_FAILED_TESTS['BORKED'][] = [\n                'name' => $file,\n                'test_name' => '',\n                'output' => '',\n                'diff' => '',\n                'info' => \"$bork_info [$file]\",\n            ];\n        }\n    }\n\n    if (is_array($org_file) || $test->hasSection('REDIRECTTEST')) {\n        if (is_array($org_file)) {\n            $file = $org_file[0];\n        }\n\n        $bork_info = \"Redirected test did not contain redirection info\";\n        show_result(\"BORK\", $bork_info, '', '', $temp_filenames);\n        $PHP_FAILED_TESTS['BORKED'][] = [\n            'name' => $file,\n            'test_name' => '',\n            'output' => '',\n            'diff' => '',\n            'info' => \"$bork_info [$file]\",\n        ];\n\n        $junit->markTestAs('BORK', $shortname, $tested, null, $bork_info);\n\n        return 'BORKED';\n    }\n\n    // We've satisfied the preconditions - run the test!\n    if ($test->hasSection('FILE')) {\n        show_file_block('php', $test->getSection('FILE'), 'TEST');\n        save_text($test_file, $test->getSection('FILE'), $temp_file);\n    } else {\n        $test_file = $temp_file = \"\";\n    }\n\n    if ($test->hasSection('GET')) {\n        $query_string = trim($test->getSection('GET'));\n    } else {\n        $query_string = '';\n    }\n\n    $env['REDIRECT_STATUS'] = '1';\n    if (empty($env['QUERY_STRING'])) {\n        $env['QUERY_STRING'] = $query_string;\n    }\n    if (empty($env['PATH_TRANSLATED'])) {\n        $env['PATH_TRANSLATED'] = $test_file;\n    }\n    if (empty($env['SCRIPT_FILENAME'])) {\n        $env['SCRIPT_FILENAME'] = $test_file;\n    }\n\n    if ($test->hasSection('COOKIE')) {\n        $env['HTTP_COOKIE'] = trim($test->getSection('COOKIE'));\n    } else {\n        $env['HTTP_COOKIE'] = '';\n    }\n\n    $args = $test->hasSection('ARGS') ? ' -- ' . $test->getSection('ARGS') : '';\n\n    if ($preload && !empty($test_file)) {\n        save_text($preload_filename, \"<?php opcache_compile_file('$test_file');\");\n        $local_pass_options = $pass_options;\n        unset($pass_options);\n        $pass_options = $local_pass_options;\n        $pass_options .= \" -d opcache.preload=\" . $preload_filename;\n    }\n\n    if ($test->sectionNotEmpty('POST_RAW')) {\n        $post = trim($test->getSection('POST_RAW'));\n        $raw_lines = explode(\"\\n\", $post);\n\n        $request = '';\n        $started = false;\n\n        foreach ($raw_lines as $line) {\n            if (empty($env['CONTENT_TYPE']) && preg_match('/^Content-Type:(.*)/i', $line, $res)) {\n                $env['CONTENT_TYPE'] = trim(str_replace(\"\\r\", '', $res[1]));\n                continue;\n            }\n\n            if ($started) {\n                $request .= \"\\n\";\n            }\n\n            $started = true;\n            $request .= $line;\n        }\n\n        $env['CONTENT_LENGTH'] = strlen($request);\n        $env['REQUEST_METHOD'] = 'POST';\n\n        if (empty($request)) {\n            $junit->markTestAs('BORK', $shortname, $tested, null, 'empty $request');\n            return 'BORKED';\n        }\n\n        save_text($tmp_post, $request);\n        $cmd = \"$php $pass_options $ini_settings -f \\\"$test_file\\\"$cmdRedirect < \\\"$tmp_post\\\"\";\n    } elseif ($test->sectionNotEmpty('PUT')) {\n        $post = trim($test->getSection('PUT'));\n        $raw_lines = explode(\"\\n\", $post);\n\n        $request = '';\n        $started = false;\n\n        foreach ($raw_lines as $line) {\n            if (empty($env['CONTENT_TYPE']) && preg_match('/^Content-Type:(.*)/i', $line, $res)) {\n                $env['CONTENT_TYPE'] = trim(str_replace(\"\\r\", '', $res[1]));\n                continue;\n            }\n\n            if ($started) {\n                $request .= \"\\n\";\n            }\n\n            $started = true;\n            $request .= $line;\n        }\n\n        $env['CONTENT_LENGTH'] = strlen($request);\n        $env['REQUEST_METHOD'] = 'PUT';\n\n        if (empty($request)) {\n            $junit->markTestAs('BORK', $shortname, $tested, null, 'empty $request');\n            return 'BORKED';\n        }\n\n        save_text($tmp_post, $request);\n        $cmd = \"$php $pass_options $ini_settings -f \\\"$test_file\\\"$cmdRedirect < \\\"$tmp_post\\\"\";\n    } elseif ($test->sectionNotEmpty('POST')) {\n        $post = trim($test->getSection('POST'));\n        $content_length = strlen($post);\n        save_text($tmp_post, $post);\n\n        $env['REQUEST_METHOD'] = 'POST';\n        if (empty($env['CONTENT_TYPE'])) {\n            $env['CONTENT_TYPE'] = 'application/x-www-form-urlencoded';\n        }\n\n        if (empty($env['CONTENT_LENGTH'])) {\n            $env['CONTENT_LENGTH'] = $content_length;\n        }\n\n        $cmd = \"$php $pass_options $ini_settings -f \\\"$test_file\\\"$cmdRedirect < \\\"$tmp_post\\\"\";\n    } elseif ($test->sectionNotEmpty('GZIP_POST')) {\n        $post = trim($test->getSection('GZIP_POST'));\n        $post = gzencode($post, 9, FORCE_GZIP);\n        $env['HTTP_CONTENT_ENCODING'] = 'gzip';\n\n        save_text($tmp_post, $post);\n        $content_length = strlen($post);\n\n        $env['REQUEST_METHOD'] = 'POST';\n        $env['CONTENT_TYPE'] = 'application/x-www-form-urlencoded';\n        $env['CONTENT_LENGTH'] = $content_length;\n\n        $cmd = \"$php $pass_options $ini_settings -f \\\"$test_file\\\"$cmdRedirect < \\\"$tmp_post\\\"\";\n    } elseif ($test->sectionNotEmpty('DEFLATE_POST')) {\n        $post = trim($test->getSection('DEFLATE_POST'));\n        $post = gzcompress($post, 9);\n        $env['HTTP_CONTENT_ENCODING'] = 'deflate';\n        save_text($tmp_post, $post);\n        $content_length = strlen($post);\n\n        $env['REQUEST_METHOD'] = 'POST';\n        $env['CONTENT_TYPE'] = 'application/x-www-form-urlencoded';\n        $env['CONTENT_LENGTH'] = $content_length;\n\n        $cmd = \"$php $pass_options $ini_settings -f \\\"$test_file\\\"$cmdRedirect < \\\"$tmp_post\\\"\";\n    } else {\n        $env['REQUEST_METHOD'] = 'GET';\n        $env['CONTENT_TYPE'] = '';\n        $env['CONTENT_LENGTH'] = '';\n\n        $repeat_option = $num_repeats > 1 ? \"--repeat $num_repeats\" : \"\";\n        $cmd = \"$php $pass_options $repeat_option $ini_settings -f \\\"$test_file\\\" $args$cmdRedirect\";\n    }\n\n    $orig_cmd = $cmd;\n    if ($valgrind) {\n        $env['USE_ZEND_ALLOC'] = '0';\n        $env['ZEND_DONT_UNLOAD_MODULES'] = 1;\n\n        $cmd = $valgrind->wrapCommand($cmd, $memcheck_filename, strpos($test_file, \"pcre\") !== false);\n    }\n\n    if (!array_key_exists('XDEBUG_MODE', $env)) {\n        $env['XDEBUG_MODE'] = \"\";\n    }\n\n    if ($DETAILED) {\n        echo \"\nCONTENT_LENGTH  = \" . $env['CONTENT_LENGTH'] . \"\nCONTENT_TYPE    = \" . $env['CONTENT_TYPE'] . \"\nPATH_TRANSLATED = \" . $env['PATH_TRANSLATED'] . \"\nQUERY_STRING    = \" . $env['QUERY_STRING'] . \"\nREDIRECT_STATUS = \" . $env['REDIRECT_STATUS'] . \"\nREQUEST_METHOD  = \" . $env['REQUEST_METHOD'] . \"\nSCRIPT_FILENAME = \" . $env['SCRIPT_FILENAME'] . \"\nHTTP_COOKIE     = \" . $env['HTTP_COOKIE'] . \"\nCOMMAND $cmd\n\";\n    }\n\n    $junit->startTimer($shortname);\n    $hrtime = hrtime();\n    $startTime = $hrtime[0] * 1000000000 + $hrtime[1];\n\n    $stdin = $test->hasSection('STDIN') ? $test->getSection('STDIN') : null;\n    $out = system_with_timeout($cmd, $env, $stdin, $captureStdIn, $captureStdOut, $captureStdErr);\n\n    $junit->stopTimer($shortname);\n    $hrtime = hrtime();\n    $time = $hrtime[0] * 1000000000 + $hrtime[1] - $startTime;\n    if ($time >= $slow_min_ms * 1000000) {\n        $PHP_FAILED_TESTS['SLOW'][] = [\n            'name' => $file,\n            'test_name' => $tested . \" [$tested_file]\",\n            'output' => '',\n            'diff' => '',\n            'info' => $time / 1000000000,\n        ];\n    }\n\n    // Things to run after the test (like, final)\n    if ($test->sectionNotEmpty('AFTER')) {\n        show_file_block('after', $test->getSection('AFTER'));\n        save_text($test_clean, trim($test->getSection('AFTER')), $temp_clean);\n\n        $extra = !IS_WINDOWS ?\n            \"unset REQUEST_METHOD; unset QUERY_STRING; unset PATH_TRANSLATED; unset SCRIPT_FILENAME; unset REQUEST_METHOD;\" : \"\";\n        $out .= system_with_timeout(\"$extra $orig_php $pass_options -q $orig_ini_settings $no_file_cache \\\"$test_clean\\\"\", $env);\n    }\n\n    // Remember CLEAN output to report borked test if it otherwise passes.\n    $clean_output = null;\n    if ($test->sectionNotEmpty('CLEAN') && (!$no_clean || $cfg['keep']['clean'])) {\n        show_file_block('clean', $test->getSection('CLEAN'));\n        save_text($test_clean, trim($test->getSection('CLEAN')), $temp_clean);\n\n        if (!$no_clean) {\n            $extra = !IS_WINDOWS ?\n                \"unset REQUEST_METHOD; unset QUERY_STRING; unset PATH_TRANSLATED; unset SCRIPT_FILENAME; unset REQUEST_METHOD;\" : \"\";\n            $clean_output = system_with_timeout(\"$extra $orig_php $pass_options -q $orig_ini_settings $no_file_cache \\\"$test_clean\\\"\", $env);\n        }\n\n        if (!$cfg['keep']['clean']) {\n            @unlink($test_clean);\n        }\n    }\n\n    $leaked = false;\n    $passed = false;\n\n    if ($valgrind) { // leak check\n        $leaked = filesize($memcheck_filename) > 0;\n\n        if (!$leaked) {\n            @unlink($memcheck_filename);\n        }\n    }\n\n    if ($num_repeats > 1) {\n        // In repeat mode, retain the output before the first execution,\n        // and of the last execution. Do this early, because the trimming below\n        // makes the newline handling complicated.\n        $separator1 = \"Executing for the first time...\\n\";\n        $separator1_pos = strpos($out, $separator1);\n        if ($separator1_pos !== false) {\n            $separator2 = \"Finished execution, repeating...\\n\";\n            $separator2_pos = strrpos($out, $separator2);\n            if ($separator2_pos !== false) {\n                $out = substr($out, 0, $separator1_pos)\n                     . substr($out, $separator2_pos + strlen($separator2));\n            } else {\n                $out = substr($out, 0, $separator1_pos)\n                     . substr($out, $separator1_pos + strlen($separator1));\n            }\n        }\n    }\n\n    // Does the output match what is expected?\n    $output = preg_replace(\"/\\r\\n/\", \"\\n\", trim($out));\n\n    /* when using CGI, strip the headers from the output */\n    $headers = [];\n\n    if (!empty($uses_cgi) && preg_match(\"/^(.*?)\\r?\\n\\r?\\n(.*)/s\", $out, $match)) {\n        $output = trim($match[2]);\n        $rh = preg_split(\"/[\\n\\r]+/\", $match[1]);\n\n        foreach ($rh as $line) {\n            if (strpos($line, ':') !== false) {\n                $line = explode(':', $line, 2);\n                $headers[trim($line[0])] = trim($line[1]);\n            }\n        }\n    }\n\n    $wanted_headers = null;\n    $output_headers = null;\n    $failed_headers = false;\n\n    if ($test->hasSection('EXPECTHEADERS')) {\n        $want = [];\n        $wanted_headers = [];\n        $lines = preg_split(\"/[\\n\\r]+/\", $test->getSection('EXPECTHEADERS'));\n\n        foreach ($lines as $line) {\n            if (strpos($line, ':') !== false) {\n                $line = explode(':', $line, 2);\n                $want[trim($line[0])] = trim($line[1]);\n                $wanted_headers[] = trim($line[0]) . ': ' . trim($line[1]);\n            }\n        }\n\n        $output_headers = [];\n\n        foreach ($want as $k => $v) {\n            if (isset($headers[$k])) {\n                $output_headers[] = $k . ': ' . $headers[$k];\n            }\n\n            if (!isset($headers[$k]) || $headers[$k] != $v) {\n                $failed_headers = true;\n            }\n        }\n\n        ksort($wanted_headers);\n        $wanted_headers = implode(\"\\n\", $wanted_headers);\n        ksort($output_headers);\n        $output_headers = implode(\"\\n\", $output_headers);\n    }\n\n    show_file_block('out', $output);\n\n    if ($preload) {\n        $output = trim(preg_replace(\"/\\n?Warning: Can't preload [^\\n]*\\n?/\", \"\", $output));\n    }\n\n    if ($test->hasAnySections('EXPECTF', 'EXPECTREGEX')) {\n        if ($test->hasSection('EXPECTF')) {\n            $wanted = trim($test->getSection('EXPECTF'));\n        } else {\n            $wanted = trim($test->getSection('EXPECTREGEX'));\n        }\n\n        show_file_block('exp', $wanted);\n        $wanted_re = preg_replace('/\\r\\n/', \"\\n\", $wanted);\n\n        if ($test->hasSection('EXPECTF')) {\n            // do preg_quote, but miss out any %r delimited sections\n            $temp = \"\";\n            $r = \"%r\";\n            $startOffset = 0;\n            $length = strlen($wanted_re);\n            while ($startOffset < $length) {\n                $start = strpos($wanted_re, $r, $startOffset);\n                if ($start !== false) {\n                    // we have found a start tag\n                    $end = strpos($wanted_re, $r, $start + 2);\n                    if ($end === false) {\n                        // unbalanced tag, ignore it.\n                        $end = $start = $length;\n                    }\n                } else {\n                    // no more %r sections\n                    $start = $end = $length;\n                }\n                // quote a non re portion of the string\n                $temp .= preg_quote(substr($wanted_re, $startOffset, $start - $startOffset), '/');\n                // add the re unquoted.\n                if ($end > $start) {\n                    $temp .= '(' . substr($wanted_re, $start + 2, $end - $start - 2) . ')';\n                }\n                $startOffset = $end + 2;\n            }\n            $wanted_re = $temp;\n\n            // Stick to basics\n            $wanted_re = str_replace('%e', '\\\\' . DIRECTORY_SEPARATOR, $wanted_re);\n            $wanted_re = str_replace('%s', '[^\\r\\n]+', $wanted_re);\n            $wanted_re = str_replace('%S', '[^\\r\\n]*', $wanted_re);\n            $wanted_re = str_replace('%a', '.+', $wanted_re);\n            $wanted_re = str_replace('%A', '.*', $wanted_re);\n            $wanted_re = str_replace('%w', '\\s*', $wanted_re);\n            $wanted_re = str_replace('%i', '[+-]?\\d+', $wanted_re);\n            $wanted_re = str_replace('%d', '\\d+', $wanted_re);\n            $wanted_re = str_replace('%x', '[0-9a-fA-F]+', $wanted_re);\n            $wanted_re = str_replace('%f', '[+-]?\\.?\\d+\\.?\\d*(?:[Ee][+-]?\\d+)?', $wanted_re);\n            $wanted_re = str_replace('%c', '.', $wanted_re);\n            $wanted_re = str_replace('%0', '\\x00', $wanted_re);\n            // %f allows two points \"-.0.0\" but that is the best *simple* expression\n        }\n\n        if (preg_match(\"/^$wanted_re\\$/s\", $output)) {\n            $passed = true;\n        }\n    } else {\n        $wanted = trim($test->getSection('EXPECT'));\n        $wanted = preg_replace('/\\r\\n/', \"\\n\", $wanted);\n        show_file_block('exp', $wanted);\n\n        // compare and leave on success\n        if (!strcmp($output, $wanted)) {\n            $passed = true;\n        }\n\n        $wanted_re = null;\n    }\n\n    if ($passed) {\n        if (!$cfg['keep']['php'] && !$leaked) {\n            @unlink($test_file);\n            @unlink($preload_filename);\n        }\n        @unlink($tmp_post);\n\n        if (!$leaked && !$failed_headers) {\n            // If the test passed and CLEAN produced output, report test as borked.\n            if ($clean_output) {\n                show_result(\"BORK\", $output, $tested_file, 'reason: invalid output from CLEAN', $temp_filenames);\n                    $PHP_FAILED_TESTS['BORKED'][] = [\n                    'name' => $file,\n                    'test_name' => '',\n                    'output' => '',\n                    'diff' => '',\n                    'info' => \"$clean_output [$file]\",\n                ];\n\n                $junit->markTestAs('BORK', $shortname, $tested, null, $clean_output);\n                return 'BORKED';\n            }\n\n            if ($test->hasSection('XFAIL')) {\n                $warn = true;\n                $info = \" (warn: XFAIL section but test passes)\";\n            } elseif ($test->hasSection('XLEAK')) {\n                $warn = true;\n                $info = \" (warn: XLEAK section but test passes)\";\n            } else {\n                show_result(\"PASS\", $tested, $tested_file, '', $temp_filenames);\n                $junit->markTestAs('PASS', $shortname, $tested);\n                return 'PASSED';\n            }\n        }\n    }\n\n    // Test failed so we need to report details.\n    if ($failed_headers) {\n        $passed = false;\n        $wanted = $wanted_headers . \"\\n--HEADERS--\\n\" . $wanted;\n        $output = $output_headers . \"\\n--HEADERS--\\n\" . $output;\n\n        if (isset($wanted_re)) {\n            $wanted_re = preg_quote($wanted_headers . \"\\n--HEADERS--\\n\", '/') . $wanted_re;\n        }\n    }\n\n    $restype = [];\n\n    if ($leaked) {\n        $restype[] = $test->hasSection('XLEAK') ?\n                        'XLEAK' : 'LEAK';\n    }\n\n    if ($warn) {\n        $restype[] = 'WARN';\n    }\n\n    if (!$passed) {\n        if ($test->hasSection('XFAIL')) {\n            $restype[] = 'XFAIL';\n            $info = '  XFAIL REASON: ' . rtrim($test->getSection('XFAIL'));\n        } elseif ($test->hasSection('XLEAK')) {\n            $restype[] = 'XLEAK';\n            $info = '  XLEAK REASON: ' . rtrim($test->getSection('XLEAK'));\n        } else {\n            $restype[] = 'FAIL';\n        }\n    }\n\n    if (!$passed) {\n        // write .exp\n        if (strpos($log_format, 'E') !== false && file_put_contents($exp_filename, $wanted) === false) {\n            error(\"Cannot create expected test output - $exp_filename\");\n        }\n\n        // write .out\n        if (strpos($log_format, 'O') !== false && file_put_contents($output_filename, $output) === false) {\n            error(\"Cannot create test output - $output_filename\");\n        }\n\n        // write .diff\n        if (!empty($environment['TEST_PHP_DIFF_CMD'])) {\n            $diff = generate_diff_external($environment['TEST_PHP_DIFF_CMD'], $exp_filename, $output_filename);\n        } else {\n            $diff = generate_diff($wanted, $wanted_re, $output);\n        }\n\n        if (is_array($IN_REDIRECT)) {\n            $orig_shortname = str_replace(TEST_PHP_SRCDIR . '/', '', $file);\n            $diff = \"# original source file: $orig_shortname\\n\" . $diff;\n        }\n        show_file_block('diff', $diff);\n        if (strpos($log_format, 'D') !== false && file_put_contents($diff_filename, $diff) === false) {\n            error(\"Cannot create test diff - $diff_filename\");\n        }\n\n        // write .log\n        if (strpos($log_format, 'L') !== false && file_put_contents($log_filename, \"\n---- EXPECTED OUTPUT\n$wanted\n---- ACTUAL OUTPUT\n$output\n---- FAILED\n\") === false) {\n            error(\"Cannot create test log - $log_filename\");\n            error_report($file, $log_filename, $tested);\n        }\n    }\n\n    if (!$passed || $leaked) {\n        // write .sh\n        if (strpos($log_format, 'S') !== false) {\n            $env_lines = [];\n            foreach ($env as $env_var => $env_val) {\n                $env_lines[] = \"export $env_var=\" . escapeshellarg($env_val ?? \"\");\n            }\n            $exported_environment = $env_lines ? \"\\n\" . implode(\"\\n\", $env_lines) . \"\\n\" : \"\";\n            $sh_script = <<<SH\n#!/bin/sh\n{$exported_environment}\ncase \"$1\" in\n\"gdb\")\n    gdb --args {$orig_cmd}\n    ;;\n\"lldb\")\n    lldb -- {$orig_cmd}\n    ;;\n\"valgrind\")\n    USE_ZEND_ALLOC=0 valgrind $2 {$orig_cmd}\n    ;;\n\"rr\")\n    rr record $2 {$orig_cmd}\n    ;;\n*)\n    {$orig_cmd}\n    ;;\nesac\nSH;\n            if (file_put_contents($sh_filename, $sh_script) === false) {\n                error(\"Cannot create test shell script - $sh_filename\");\n            }\n            chmod($sh_filename, 0755);\n        }\n    }\n\n    if ($valgrind && $leaked && $cfg[\"show\"][\"mem\"]) {\n        show_file_block('mem', file_get_contents($memcheck_filename));\n    }\n\n    show_result(implode('&', $restype), $tested, $tested_file, $info, $temp_filenames);\n\n    foreach ($restype as $type) {\n        $PHP_FAILED_TESTS[$type . 'ED'][] = [\n            'name' => $file,\n            'test_name' => (is_array($IN_REDIRECT) ? $IN_REDIRECT['via'] : '') . $tested . \" [$tested_file]\",\n            'output' => $output_filename,\n            'diff' => $diff_filename,\n            'info' => $info,\n        ];\n    }\n\n    $diff = empty($diff) ? '' : preg_replace('/\\e/', '<esc>', $diff);\n\n    $junit->markTestAs($restype, $shortname, $tested, null, $info, $diff);\n\n    return $restype[0] . 'ED';\n}\n\n/**\n * @return bool|int\n */\nfunction comp_line(string $l1, string $l2, bool $is_reg)\n{\n    if ($is_reg) {\n        return preg_match('/^' . $l1 . '$/s', $l2);\n    } else {\n        return !strcmp($l1, $l2);\n    }\n}\n\nfunction count_array_diff(\n    array $ar1,\n    array $ar2,\n    bool $is_reg,\n    array $w,\n    int $idx1,\n    int $idx2,\n    int $cnt1,\n    int $cnt2,\n    int $steps\n): int {\n    $equal = 0;\n\n    while ($idx1 < $cnt1 && $idx2 < $cnt2 && comp_line($ar1[$idx1], $ar2[$idx2], $is_reg)) {\n        $idx1++;\n        $idx2++;\n        $equal++;\n        $steps--;\n    }\n    if (--$steps > 0) {\n        $eq1 = 0;\n        $st = $steps / 2;\n\n        for ($ofs1 = $idx1 + 1; $ofs1 < $cnt1 && $st-- > 0; $ofs1++) {\n            $eq = @count_array_diff($ar1, $ar2, $is_reg, $w, $ofs1, $idx2, $cnt1, $cnt2, $st);\n\n            if ($eq > $eq1) {\n                $eq1 = $eq;\n            }\n        }\n\n        $eq2 = 0;\n        $st = $steps;\n\n        for ($ofs2 = $idx2 + 1; $ofs2 < $cnt2 && $st-- > 0; $ofs2++) {\n            $eq = @count_array_diff($ar1, $ar2, $is_reg, $w, $idx1, $ofs2, $cnt1, $cnt2, $st);\n            if ($eq > $eq2) {\n                $eq2 = $eq;\n            }\n        }\n\n        if ($eq1 > $eq2) {\n            $equal += $eq1;\n        } elseif ($eq2 > 0) {\n            $equal += $eq2;\n        }\n    }\n\n    return $equal;\n}\n\nfunction generate_array_diff(array $ar1, array $ar2, bool $is_reg, array $w): array\n{\n    global $context_line_count;\n    $idx1 = 0;\n    $cnt1 = @count($ar1);\n    $idx2 = 0;\n    $cnt2 = @count($ar2);\n    $diff = [];\n    $old1 = [];\n    $old2 = [];\n    $number_len = max(3, strlen((string)max($cnt1 + 1, $cnt2 + 1)));\n    $line_number_spec = '%0' . $number_len . 'd';\n\n    /** Mapping from $idx2 to $idx1, including indexes of idx2 that are identical to idx1 as well as entries that don't have matches */\n    $mapping = [];\n\n    while ($idx1 < $cnt1 && $idx2 < $cnt2) {\n        $mapping[$idx2] = $idx1;\n        if (comp_line($ar1[$idx1], $ar2[$idx2], $is_reg)) {\n            $idx1++;\n            $idx2++;\n            continue;\n        } else {\n            $c1 = @count_array_diff($ar1, $ar2, $is_reg, $w, $idx1 + 1, $idx2, $cnt1, $cnt2, 10);\n            $c2 = @count_array_diff($ar1, $ar2, $is_reg, $w, $idx1, $idx2 + 1, $cnt1, $cnt2, 10);\n\n            if ($c1 > $c2) {\n                $old1[$idx1] = sprintf(\"{$line_number_spec}- \", $idx1 + 1) . $w[$idx1++];\n            } elseif ($c2 > 0) {\n                $old2[$idx2] = sprintf(\"{$line_number_spec}+ \", $idx2 + 1) . $ar2[$idx2++];\n            } else {\n                $old1[$idx1] = sprintf(\"{$line_number_spec}- \", $idx1 + 1) . $w[$idx1++];\n                $old2[$idx2] = sprintf(\"{$line_number_spec}+ \", $idx2 + 1) . $ar2[$idx2++];\n            }\n            $last_printed_context_line = $idx1;\n        }\n    }\n    $mapping[$idx2] = $idx1;\n\n    reset($old1);\n    $k1 = key($old1);\n    $l1 = -2;\n    reset($old2);\n    $k2 = key($old2);\n    $l2 = -2;\n    $old_k1 = -1;\n    $add_context_lines = function (int $new_k1) use (&$old_k1, &$diff, $w, $context_line_count, $number_len) {\n        if ($old_k1 >= $new_k1 || !$context_line_count) {\n            return;\n        }\n        $end = $new_k1 - 1;\n        $range_end = min($end, $old_k1 + $context_line_count);\n        if ($old_k1 >= 0) {\n            while ($old_k1 < $range_end) {\n                $diff[] = str_repeat(' ', $number_len + 2) . $w[$old_k1++];\n            }\n        }\n        if ($end - $context_line_count > $old_k1) {\n            $old_k1 = $end - $context_line_count;\n            if ($old_k1 > 0) {\n                // Add a '--' to mark sections where the common areas were truncated\n                $diff[] = '--';\n            }\n        }\n        $old_k1 = max($old_k1, 0);\n        while ($old_k1 < $end) {\n            $diff[] = str_repeat(' ', $number_len + 2) . $w[$old_k1++];\n        }\n        $old_k1 = $new_k1;\n    };\n\n    while ($k1 !== null || $k2 !== null) {\n        if ($k1 == $l1 + 1 || $k2 === null) {\n            $add_context_lines($k1);\n            $l1 = $k1;\n            $diff[] = current($old1);\n            $old_k1 = $k1;\n            $k1 = next($old1) ? key($old1) : null;\n        } elseif ($k2 == $l2 + 1 || $k1 === null) {\n            $add_context_lines($mapping[$k2]);\n            $l2 = $k2;\n            $diff[] = current($old2);\n            $k2 = next($old2) ? key($old2) : null;\n        } elseif ($k1 < $mapping[$k2]) {\n            $add_context_lines($k1);\n            $l1 = $k1;\n            $diff[] = current($old1);\n            $k1 = next($old1) ? key($old1) : null;\n        } else {\n            $add_context_lines($mapping[$k2]);\n            $l2 = $k2;\n            $diff[] = current($old2);\n            $k2 = next($old2) ? key($old2) : null;\n        }\n    }\n\n    while ($idx1 < $cnt1) {\n        $add_context_lines($idx1 + 1);\n        $diff[] = sprintf(\"{$line_number_spec}- \", $idx1 + 1) . $w[$idx1++];\n    }\n\n    while ($idx2 < $cnt2) {\n        if (isset($mapping[$idx2])) {\n            $add_context_lines($mapping[$idx2] + 1);\n        }\n        $diff[] = sprintf(\"{$line_number_spec}+ \", $idx2 + 1) . $ar2[$idx2++];\n    }\n    $add_context_lines(min($old_k1 + $context_line_count + 1, $cnt1 + 1));\n    if ($context_line_count && $old_k1 < $cnt1 + 1) {\n        // Add a '--' to mark sections where the common areas were truncated\n        $diff[] = '--';\n    }\n\n    return $diff;\n}\n\nfunction generate_diff_external(string $diff_cmd, string $exp_file, string $output_file): string\n{\n    $retval = shell_exec(\"{$diff_cmd} {$exp_file} {$output_file}\");\n\n    return is_string($retval) ? $retval : 'Could not run external diff tool set through TEST_PHP_DIFF_CMD environment variable';\n}\n\nfunction generate_diff(string $wanted, ?string $wanted_re, string $output): string\n{\n    $w = explode(\"\\n\", $wanted);\n    $o = explode(\"\\n\", $output);\n    $r = is_null($wanted_re) ? $w : explode(\"\\n\", $wanted_re);\n    $diff = generate_array_diff($r, $o, !is_null($wanted_re), $w);\n\n    return implode(PHP_EOL, $diff);\n}\n\nfunction error(string $message): void\n{\n    echo \"ERROR: {$message}\\n\";\n    exit(1);\n}\n\nfunction settings2array(array $settings, &$ini_settings): void\n{\n    foreach ($settings as $setting) {\n        if (strpos($setting, '=') !== false) {\n            $setting = explode(\"=\", $setting, 2);\n            $name = trim($setting[0]);\n            $value = trim($setting[1]);\n\n            if ($name == 'extension' || $name == 'zend_extension') {\n                if (!isset($ini_settings[$name])) {\n                    $ini_settings[$name] = [];\n                }\n\n                $ini_settings[$name][] = $value;\n            } else {\n                $ini_settings[$name] = $value;\n            }\n        }\n    }\n}\n\nfunction settings2params(array $ini_settings): string\n{\n    $settings = '';\n\n    foreach ($ini_settings as $name => $value) {\n        if (is_array($value)) {\n            foreach ($value as $val) {\n                $val = addslashes($val);\n                $settings .= \" -d \\\"$name=$val\\\"\";\n            }\n        } else {\n            if (IS_WINDOWS && !empty($value) && $value[0] == '\"') {\n                $len = strlen($value);\n\n                if ($value[$len - 1] == '\"') {\n                    $value[0] = \"'\";\n                    $value[$len - 1] = \"'\";\n                }\n            } else {\n                $value = addslashes($value);\n            }\n\n            $settings .= \" -d \\\"$name=$value\\\"\";\n        }\n    }\n\n    return $settings;\n}\n\nfunction compute_summary(): void\n{\n    global $n_total, $test_results, $ignored_by_ext, $sum_results, $percent_results;\n\n    $n_total = count($test_results);\n    $n_total += $ignored_by_ext;\n    $sum_results = [\n        'PASSED' => 0,\n        'WARNED' => 0,\n        'SKIPPED' => 0,\n        'FAILED' => 0,\n        'BORKED' => 0,\n        'LEAKED' => 0,\n        'XFAILED' => 0,\n        'XLEAKED' => 0\n    ];\n\n    foreach ($test_results as $v) {\n        $sum_results[$v]++;\n    }\n\n    $sum_results['SKIPPED'] += $ignored_by_ext;\n    $percent_results = [];\n\n    foreach ($sum_results as $v => $n) {\n        $percent_results[$v] = (100.0 * $n) / $n_total;\n    }\n}\n\nfunction get_summary(bool $show_ext_summary): string\n{\n    global $exts_skipped, $exts_tested, $n_total, $sum_results, $percent_results, $end_time, $start_time, $failed_test_summary, $PHP_FAILED_TESTS, $valgrind;\n\n    $x_total = $n_total - $sum_results['SKIPPED'] - $sum_results['BORKED'];\n\n    if ($x_total) {\n        $x_warned = (100.0 * $sum_results['WARNED']) / $x_total;\n        $x_failed = (100.0 * $sum_results['FAILED']) / $x_total;\n        $x_xfailed = (100.0 * $sum_results['XFAILED']) / $x_total;\n        $x_xleaked = (100.0 * $sum_results['XLEAKED']) / $x_total;\n        $x_leaked = (100.0 * $sum_results['LEAKED']) / $x_total;\n        $x_passed = (100.0 * $sum_results['PASSED']) / $x_total;\n    } else {\n        $x_warned = $x_failed = $x_passed = $x_leaked = $x_xfailed = $x_xleaked = 0;\n    }\n\n    $summary = '';\n\n    if ($show_ext_summary) {\n        $summary .= '\n=====================================================================\nTEST RESULT SUMMARY\n---------------------------------------------------------------------\nExts skipped    : ' . sprintf('%4d', $exts_skipped) . '\nExts tested     : ' . sprintf('%4d', $exts_tested) . '\n---------------------------------------------------------------------\n';\n    }\n\n    $summary .= '\nNumber of tests : ' . sprintf('%4d', $n_total) . '          ' . sprintf('%8d', $x_total);\n\n    if ($sum_results['BORKED']) {\n        $summary .= '\nTests borked    : ' . sprintf('%4d (%5.1f%%)', $sum_results['BORKED'], $percent_results['BORKED']) . ' --------';\n    }\n\n    $summary .= '\nTests skipped   : ' . sprintf('%4d (%5.1f%%)', $sum_results['SKIPPED'], $percent_results['SKIPPED']) . ' --------\nTests warned    : ' . sprintf('%4d (%5.1f%%)', $sum_results['WARNED'], $percent_results['WARNED']) . ' ' . sprintf('(%5.1f%%)', $x_warned) . '\nTests failed    : ' . sprintf('%4d (%5.1f%%)', $sum_results['FAILED'], $percent_results['FAILED']) . ' ' . sprintf('(%5.1f%%)', $x_failed);\n\n    if ($sum_results['XFAILED']) {\n        $summary .= '\nExpected fail   : ' . sprintf('%4d (%5.1f%%)', $sum_results['XFAILED'], $percent_results['XFAILED']) . ' ' . sprintf('(%5.1f%%)', $x_xfailed);\n    }\n\n    if ($valgrind) {\n        $summary .= '\nTests leaked    : ' . sprintf('%4d (%5.1f%%)', $sum_results['LEAKED'], $percent_results['LEAKED']) . ' ' . sprintf('(%5.1f%%)', $x_leaked);\n        if ($sum_results['XLEAKED']) {\n            $summary .= '\nExpected leak   : ' . sprintf('%4d (%5.1f%%)', $sum_results['XLEAKED'], $percent_results['XLEAKED']) . ' ' . sprintf('(%5.1f%%)', $x_xleaked);\n        }\n    }\n\n    $summary .= '\nTests passed    : ' . sprintf('%4d (%5.1f%%)', $sum_results['PASSED'], $percent_results['PASSED']) . ' ' . sprintf('(%5.1f%%)', $x_passed) . '\n---------------------------------------------------------------------\nTime taken      : ' . sprintf('%4d seconds', $end_time - $start_time) . '\n=====================================================================\n';\n    $failed_test_summary = '';\n\n    if (count($PHP_FAILED_TESTS['SLOW'])) {\n        usort($PHP_FAILED_TESTS['SLOW'], function (array $a, array $b): int {\n            return $a['info'] < $b['info'] ? 1 : -1;\n        });\n\n        $failed_test_summary .= '\n=====================================================================\nSLOW TEST SUMMARY\n---------------------------------------------------------------------\n';\n        foreach ($PHP_FAILED_TESTS['SLOW'] as $failed_test_data) {\n            $failed_test_summary .= sprintf('(%.3f s) ', $failed_test_data['info']) . $failed_test_data['test_name'] . \"\\n\";\n        }\n        $failed_test_summary .= \"=====================================================================\\n\";\n    }\n\n    if (count($PHP_FAILED_TESTS['XFAILED'])) {\n        $failed_test_summary .= '\n=====================================================================\nEXPECTED FAILED TEST SUMMARY\n---------------------------------------------------------------------\n';\n        foreach ($PHP_FAILED_TESTS['XFAILED'] as $failed_test_data) {\n            $failed_test_summary .= $failed_test_data['test_name'] . $failed_test_data['info'] . \"\\n\";\n        }\n        $failed_test_summary .= \"=====================================================================\\n\";\n    }\n\n    if (count($PHP_FAILED_TESTS['BORKED'])) {\n        $failed_test_summary .= '\n=====================================================================\nBORKED TEST SUMMARY\n---------------------------------------------------------------------\n';\n        foreach ($PHP_FAILED_TESTS['BORKED'] as $failed_test_data) {\n            $failed_test_summary .= $failed_test_data['info'] . \"\\n\";\n        }\n\n        $failed_test_summary .= \"=====================================================================\\n\";\n    }\n\n    if (count($PHP_FAILED_TESTS['FAILED'])) {\n        $failed_test_summary .= '\n=====================================================================\nFAILED TEST SUMMARY\n---------------------------------------------------------------------\n';\n        foreach ($PHP_FAILED_TESTS['FAILED'] as $failed_test_data) {\n            $failed_test_summary .= $failed_test_data['test_name'] . $failed_test_data['info'] . \"\\n\";\n        }\n        $failed_test_summary .= \"=====================================================================\\n\";\n    }\n    if (count($PHP_FAILED_TESTS['WARNED'])) {\n        $failed_test_summary .= '\n=====================================================================\nWARNED TEST SUMMARY\n---------------------------------------------------------------------\n';\n        foreach ($PHP_FAILED_TESTS['WARNED'] as $failed_test_data) {\n            $failed_test_summary .= $failed_test_data['test_name'] . $failed_test_data['info'] . \"\\n\";\n        }\n\n        $failed_test_summary .= \"=====================================================================\\n\";\n    }\n\n    if (count($PHP_FAILED_TESTS['LEAKED'])) {\n        $failed_test_summary .= '\n=====================================================================\nLEAKED TEST SUMMARY\n---------------------------------------------------------------------\n';\n        foreach ($PHP_FAILED_TESTS['LEAKED'] as $failed_test_data) {\n            $failed_test_summary .= $failed_test_data['test_name'] . $failed_test_data['info'] . \"\\n\";\n        }\n\n        $failed_test_summary .= \"=====================================================================\\n\";\n    }\n\n    if (count($PHP_FAILED_TESTS['XLEAKED'])) {\n        $failed_test_summary .= '\n=====================================================================\nEXPECTED LEAK TEST SUMMARY\n---------------------------------------------------------------------\n';\n        foreach ($PHP_FAILED_TESTS['XLEAKED'] as $failed_test_data) {\n            $failed_test_summary .= $failed_test_data['test_name'] . $failed_test_data['info'] . \"\\n\";\n        }\n\n        $failed_test_summary .= \"=====================================================================\\n\";\n    }\n\n    if ($failed_test_summary && !getenv('NO_PHPTEST_SUMMARY')) {\n        $summary .= $failed_test_summary;\n    }\n\n    return $summary;\n}\n\nfunction show_start($start_time): void\n{\n    echo \"TIME START \" . date('Y-m-d H:i:s', $start_time) . \"\\n=====================================================================\\n\";\n}\n\nfunction show_end($end_time): void\n{\n    echo \"=====================================================================\\nTIME END \" . date('Y-m-d H:i:s', $end_time) . \"\\n\";\n}\n\nfunction show_summary(): void\n{\n    echo get_summary(true);\n}\n\nfunction show_redirect_start(string $tests, string $tested, string $tested_file): void\n{\n    global $SHOW_ONLY_GROUPS;\n\n    if (!$SHOW_ONLY_GROUPS || in_array('REDIRECT', $SHOW_ONLY_GROUPS)) {\n        echo \"REDIRECT $tests ($tested [$tested_file]) begin\\n\";\n    } else {\n        clear_show_test();\n    }\n}\n\nfunction show_redirect_ends(string $tests, string $tested, string $tested_file): void\n{\n    global $SHOW_ONLY_GROUPS;\n\n    if (!$SHOW_ONLY_GROUPS || in_array('REDIRECT', $SHOW_ONLY_GROUPS)) {\n        echo \"REDIRECT $tests ($tested [$tested_file]) done\\n\";\n    } else {\n        clear_show_test();\n    }\n}\n\nfunction show_test(int $test_idx, string $shortname): void\n{\n    global $test_cnt;\n    global $line_length;\n\n    $str = \"TEST $test_idx/$test_cnt [$shortname]\\r\";\n    $line_length = strlen($str);\n    echo $str;\n    flush();\n}\n\nfunction clear_show_test(): void\n{\n    global $line_length;\n    // Parallel testing\n    global $workerID;\n\n    if (!$workerID && isset($line_length)) {\n        // Write over the last line to avoid random trailing chars on next echo\n        echo str_repeat(\" \", $line_length), \"\\r\";\n    }\n}\n\nfunction parse_conflicts(string $text): array\n{\n    // Strip comments\n    $text = preg_replace('/#.*/', '', $text);\n    return array_map('trim', explode(\"\\n\", trim($text)));\n}\n\nfunction show_result(\n    string $result,\n    string $tested,\n    string $tested_file,\n    string $extra = '',\n    ?array $temp_filenames = null\n): void {\n    global $SHOW_ONLY_GROUPS, $colorize;\n\n    if (!$SHOW_ONLY_GROUPS || in_array($result, $SHOW_ONLY_GROUPS)) {\n        if ($colorize) {\n            /* Use ANSI escape codes for coloring test result */\n            switch ( $result ) {\n                case 'PASS': // Light Green\n                    $color = \"\\e[1;32m{$result}\\e[0m\"; break;\n                case 'FAIL':\n                case 'BORK':\n                case 'LEAK':\n                case 'LEAK&FAIL':\n                    // Light Red\n                    $color = \"\\e[1;31m{$result}\\e[0m\"; break;\n                case 'SKIP':\n                    // Dimmed\n                    $color = \"\\e[0;37m{$result}\"; break;\n                default: // Yellow\n                    $color = \"\\e[1;33m{$result}\\e[0m\"; break;\n            }\n\n            echo \"$color $tested [$tested_file] $extra\\e[0m\\n\";\n        } else {\n            echo \"$result $tested [$tested_file] $extra\\n\";\n        }\n    } elseif (!$SHOW_ONLY_GROUPS) {\n        clear_show_test();\n    }\n\n}\n\nclass BorkageException extends Exception\n{\n}\n\nclass JUnit\n{\n    private bool $enabled = true;\n    private $fp = null;\n    private array $suites = [];\n    private array $rootSuite = self::EMPTY_SUITE + ['name' => 'php'];\n\n    private const EMPTY_SUITE = [\n        'test_total' => 0,\n        'test_pass' => 0,\n        'test_fail' => 0,\n        'test_error' => 0,\n        'test_skip' => 0,\n        'test_warn' => 0,\n        'files' => [],\n        'execution_time' => 0,\n    ];\n\n    /**\n     * @throws Exception\n     */\n    public function __construct(array $env, int $workerID)\n    {\n        // Check whether a junit log is wanted.\n        $fileName = $env['TEST_PHP_JUNIT'] ?? null;\n        if (empty($fileName)) {\n            $this->enabled = false;\n            return;\n        }\n        if (!$workerID && !$this->fp = fopen($fileName, 'w')) {\n            throw new Exception(\"Failed to open $fileName for writing.\");\n        }\n    }\n\n    public function isEnabled(): bool\n    {\n        return $this->enabled;\n    }\n\n    public function clear(): void\n    {\n        $this->rootSuite = self::EMPTY_SUITE + ['name' => 'php'];\n        $this->suites = [];\n    }\n\n    public function saveXML(): void\n    {\n        if (!$this->enabled) {\n            return;\n        }\n\n        $xml = '<' . '?' . 'xml version=\"1.0\" encoding=\"UTF-8\"' . '?' . '>' . PHP_EOL;\n        $xml .= sprintf(\n            '<testsuites name=\"%s\" tests=\"%s\" failures=\"%d\" errors=\"%d\" skip=\"%d\" time=\"%s\">' . PHP_EOL,\n            $this->rootSuite['name'],\n            $this->rootSuite['test_total'],\n            $this->rootSuite['test_fail'],\n            $this->rootSuite['test_error'],\n            $this->rootSuite['test_skip'],\n            $this->rootSuite['execution_time']\n        );\n        $xml .= $this->getSuitesXML();\n        $xml .= '</testsuites>';\n        fwrite($this->fp, $xml);\n    }\n\n    private function getSuitesXML(string $suite_name = '')\n    {\n        // FIXME: $suite_name gets overwritten\n        $result = '';\n\n        foreach ($this->suites as $suite_name => $suite) {\n            $result .= sprintf(\n                '<testsuite name=\"%s\" tests=\"%s\" failures=\"%d\" errors=\"%d\" skip=\"%d\" time=\"%s\">' . PHP_EOL,\n                $suite['name'],\n                $suite['test_total'],\n                $suite['test_fail'],\n                $suite['test_error'],\n                $suite['test_skip'],\n                $suite['execution_time']\n            );\n\n            if (!empty($suite_name)) {\n                foreach ($suite['files'] as $file) {\n                    $result .= $this->rootSuite['files'][$file]['xml'];\n                }\n            }\n\n            $result .= '</testsuite>' . PHP_EOL;\n        }\n\n        return $result;\n    }\n\n    public function markTestAs(\n        $type,\n        string $file_name,\n        string $test_name,\n        ?int $time = null,\n        string $message = '',\n        string $details = ''\n    ): void {\n        if (!$this->enabled) {\n            return;\n        }\n\n        $suite = $this->getSuiteName($file_name);\n\n        $this->record($suite, 'test_total');\n\n        $time = $time ?? $this->getTimer($file_name);\n        $this->record($suite, 'execution_time', $time);\n\n        $escaped_details = htmlspecialchars($details, ENT_QUOTES, 'UTF-8');\n        $escaped_details = preg_replace_callback('/[\\0-\\x08\\x0B\\x0C\\x0E-\\x1F]/', function ($c) {\n            return sprintf('[[0x%02x]]', ord($c[0]));\n        }, $escaped_details);\n        $escaped_message = htmlspecialchars($message, ENT_QUOTES, 'UTF-8');\n\n        $escaped_test_name = htmlspecialchars($file_name . ' (' . $test_name . ')', ENT_QUOTES);\n        $this->rootSuite['files'][$file_name]['xml'] = \"<testcase name='$escaped_test_name' time='$time'>\\n\";\n\n        if (is_array($type)) {\n            $output_type = $type[0] . 'ED';\n            $temp = array_intersect(['XFAIL', 'XLEAK', 'FAIL', 'WARN'], $type);\n            $type = reset($temp);\n        } else {\n            $output_type = $type . 'ED';\n        }\n\n        if ('PASS' == $type || 'XFAIL' == $type || 'XLEAK' == $type) {\n            $this->record($suite, 'test_pass');\n        } elseif ('BORK' == $type) {\n            $this->record($suite, 'test_error');\n            $this->rootSuite['files'][$file_name]['xml'] .= \"<error type='$output_type' message='$escaped_message'/>\\n\";\n        } elseif ('SKIP' == $type) {\n            $this->record($suite, 'test_skip');\n            $this->rootSuite['files'][$file_name]['xml'] .= \"<skipped>$escaped_message</skipped>\\n\";\n        } elseif ('WARN' == $type) {\n            $this->record($suite, 'test_warn');\n            $this->rootSuite['files'][$file_name]['xml'] .= \"<warning>$escaped_message</warning>\\n\";\n        } elseif ('FAIL' == $type) {\n            $this->record($suite, 'test_fail');\n            $this->rootSuite['files'][$file_name]['xml'] .= \"<failure type='$output_type' message='$escaped_message'>$escaped_details</failure>\\n\";\n        } else {\n            $this->record($suite, 'test_error');\n            $this->rootSuite['files'][$file_name]['xml'] .= \"<error type='$output_type' message='$escaped_message'>$escaped_details</error>\\n\";\n        }\n\n        $this->rootSuite['files'][$file_name]['xml'] .= \"</testcase>\\n\";\n    }\n\n    private function record(string $suite, string $param, $value = 1): void\n    {\n        $this->rootSuite[$param] += $value;\n        $this->suites[$suite][$param] += $value;\n    }\n\n    private function getTimer(string $file_name)\n    {\n        if (!$this->enabled) {\n            return 0;\n        }\n\n        if (isset($this->rootSuite['files'][$file_name]['total'])) {\n            return number_format($this->rootSuite['files'][$file_name]['total'], 4);\n        }\n\n        return 0;\n    }\n\n    public function startTimer(string $file_name): void\n    {\n        if (!$this->enabled) {\n            return;\n        }\n\n        if (!isset($this->rootSuite['files'][$file_name]['start'])) {\n            $this->rootSuite['files'][$file_name]['start'] = microtime(true);\n\n            $suite = $this->getSuiteName($file_name);\n            $this->initSuite($suite);\n            $this->suites[$suite]['files'][$file_name] = $file_name;\n        }\n    }\n\n    public function getSuiteName(string $file_name): string\n    {\n        return $this->pathToClassName(dirname($file_name));\n    }\n\n    private function pathToClassName(string $file_name): string\n    {\n        if (!$this->enabled) {\n            return '';\n        }\n\n        $ret = $this->rootSuite['name'];\n        $_tmp = [];\n\n        // lookup whether we're in the PHP source checkout\n        $max = 5;\n        if (is_file($file_name)) {\n            $dir = dirname(realpath($file_name));\n        } else {\n            $dir = realpath($file_name);\n        }\n        do {\n            array_unshift($_tmp, basename($dir));\n            $chk = $dir . DIRECTORY_SEPARATOR . \"main\" . DIRECTORY_SEPARATOR . \"php_version.h\";\n            $dir = dirname($dir);\n        } while (!file_exists($chk) && --$max > 0);\n        if (file_exists($chk)) {\n            if ($max) {\n                array_shift($_tmp);\n            }\n            foreach ($_tmp as $p) {\n                $ret .= \".\" . preg_replace(\",[^a-z0-9]+,i\", \".\", $p);\n            }\n            return $ret;\n        }\n\n        return $this->rootSuite['name'] . '.' . str_replace([DIRECTORY_SEPARATOR, '-'], '.', $file_name);\n    }\n\n    public function initSuite(string $suite_name): void\n    {\n        if (!$this->enabled) {\n            return;\n        }\n\n        if (!empty($this->suites[$suite_name])) {\n            return;\n        }\n\n        $this->suites[$suite_name] = self::EMPTY_SUITE + ['name' => $suite_name];\n    }\n\n    /**\n     * @throws Exception\n     */\n    public function stopTimer(string $file_name): void\n    {\n        if (!$this->enabled) {\n            return;\n        }\n\n        if (!isset($this->rootSuite['files'][$file_name]['start'])) {\n            throw new Exception(\"Timer for $file_name was not started!\");\n        }\n\n        if (!isset($this->rootSuite['files'][$file_name]['total'])) {\n            $this->rootSuite['files'][$file_name]['total'] = 0;\n        }\n\n        $start = $this->rootSuite['files'][$file_name]['start'];\n        $this->rootSuite['files'][$file_name]['total'] += microtime(true) - $start;\n        unset($this->rootSuite['files'][$file_name]['start']);\n    }\n\n    public function mergeResults(?JUnit $other): void\n    {\n        if (!$this->enabled || !$other) {\n            return;\n        }\n\n        $this->mergeSuites($this->rootSuite, $other->rootSuite);\n        foreach ($other->suites as $name => $suite) {\n            if (!isset($this->suites[$name])) {\n                $this->suites[$name] = $suite;\n                continue;\n            }\n\n            $this->mergeSuites($this->suites[$name], $suite);\n        }\n    }\n\n    private function mergeSuites(array &$dest, array $source): void\n    {\n        $dest['test_total'] += $source['test_total'];\n        $dest['test_pass']  += $source['test_pass'];\n        $dest['test_fail']  += $source['test_fail'];\n        $dest['test_error'] += $source['test_error'];\n        $dest['test_skip']  += $source['test_skip'];\n        $dest['test_warn']  += $source['test_warn'];\n        $dest['execution_time'] += $source['execution_time'];\n        $dest['files'] += $source['files'];\n    }\n}\n\nclass SkipCache\n{\n    private bool $enable;\n    private bool $keepFile;\n\n    private array $skips = [];\n    private array $extensions = [];\n\n    private int $hits = 0;\n    private int $misses = 0;\n    private int $extHits = 0;\n    private int $extMisses = 0;\n\n    public function __construct(bool $enable, bool $keepFile)\n    {\n        $this->enable = $enable;\n        $this->keepFile = $keepFile;\n    }\n\n    public function checkSkip(string $php, string $code, string $checkFile, string $tempFile, array $env): string\n    {\n        // Extension tests frequently use something like <?php require 'skipif.inc';\n        // for skip checks. This forces us to cache per directory to avoid pollution.\n        $dir = dirname($checkFile);\n        $key = \"$php => $dir\";\n\n        if (isset($this->skips[$key][$code])) {\n            $this->hits++;\n            if ($this->keepFile) {\n                save_text($checkFile, $code, $tempFile);\n            }\n            return $this->skips[$key][$code];\n        }\n\n        save_text($checkFile, $code, $tempFile);\n        $result = trim(system_with_timeout(\"$php \\\"$checkFile\\\"\", $env));\n        if (strpos($result, 'nocache') === 0) {\n            $result = '';\n        } else if ($this->enable) {\n            $this->skips[$key][$code] = $result;\n        }\n        $this->misses++;\n\n        if (!$this->keepFile) {\n            @unlink($checkFile);\n        }\n\n        return $result;\n    }\n\n    public function getExtensions(string $php): array\n    {\n        if (isset($this->extensions[$php])) {\n            $this->extHits++;\n            return $this->extensions[$php];\n        }\n\n        $extDir = `$php -d display_errors=0 -r \"echo ini_get('extension_dir');\"`;\n        $extensions = explode(\",\", `$php -d display_errors=0 -r \"echo implode(',', get_loaded_extensions());\"`);\n        $extensions = array_map('strtolower', $extensions);\n        if (in_array('zend opcache', $extensions)) {\n            $extensions[] = 'opcache';\n        }\n\n        $result = [$extDir, $extensions];\n        $this->extensions[$php] = $result;\n        $this->extMisses++;\n\n        return $result;\n    }\n\n//    public function __destruct()\n//    {\n//        echo \"Skips: {$this->hits} hits, {$this->misses} misses.\\n\";\n//        echo \"Extensions: {$this->extHits} hits, {$this->extMisses} misses.\\n\";\n//        echo \"Cache distribution:\\n\";\n//\n//        foreach ($this->skips as $php => $cache) {\n//            echo \"$php: \" . count($cache) . \"\\n\";\n//        }\n//    }\n}\n\nclass RuntestsValgrind\n{\n    protected $version = '';\n    protected $header = '';\n    protected $version_3_8_0 = false;\n    protected $tool = null;\n\n    public function getVersion(): string\n    {\n        return $this->version;\n    }\n\n    public function getHeader(): string\n    {\n        return $this->header;\n    }\n\n    public function __construct(array $environment, string $tool = 'memcheck')\n    {\n        $this->tool = $tool;\n        $header = system_with_timeout(\"valgrind --tool={$this->tool} --version\", $environment);\n        if (!$header) {\n            error(\"Valgrind returned no version info for {$this->tool}, cannot proceed.\\n\".\n                  \"Please check if Valgrind is installed and the tool is named correctly.\");\n        }\n        $count = 0;\n        $version = preg_replace(\"/valgrind-(\\d+)\\.(\\d+)\\.(\\d+)([.\\w_-]+)?(\\s+)/\", '$1.$2.$3', $header, 1, $count);\n        if ($count != 1) {\n            error(\"Valgrind returned invalid version info (\\\"{$header}\\\") for {$this->tool}, cannot proceed.\");\n        }\n        $this->version = $version;\n        $this->header = sprintf(\n            \"%s (%s)\", trim($header), $this->tool);\n        $this->version_3_8_0 = version_compare($version, '3.8.0', '>=');\n    }\n\n    public function wrapCommand(string $cmd, string $memcheck_filename, bool $check_all): string\n    {\n        $vcmd = \"valgrind -q --tool={$this->tool} --trace-children=yes\";\n        if ($check_all) {\n            $vcmd .= ' --smc-check=all';\n        }\n\n        /* --vex-iropt-register-updates=allregs-at-mem-access is necessary for phpdbg watchpoint tests */\n        if ($this->version_3_8_0) {\n            return \"$vcmd --vex-iropt-register-updates=allregs-at-mem-access --log-file=$memcheck_filename $cmd\";\n        }\n        return \"$vcmd --vex-iropt-precise-memory-exns=yes --log-file=$memcheck_filename $cmd\";\n    }\n}\n\nclass TestFile\n{\n    private string $fileName;\n\n    private array $sections = ['TEST' => ''];\n\n    private const ALLOWED_SECTIONS = [\n        'EXPECT', 'EXPECTF', 'EXPECTREGEX', 'EXPECTREGEX_EXTERNAL', 'EXPECT_EXTERNAL', 'EXPECTF_EXTERNAL', 'EXPECTHEADERS',\n        'POST', 'POST_RAW', 'GZIP_POST', 'DEFLATE_POST', 'PUT', 'GET', 'COOKIE', 'ARGS',\n        'FILE', 'FILEEOF', 'FILE_EXTERNAL', 'REDIRECTTEST',\n        'CAPTURE_STDIO', 'STDIN', 'CGI', 'PHPDBG',\n        'INI', 'ENV', 'EXTENSIONS',\n        'SKIPIF', 'XFAIL', 'XLEAK', 'AFTER', 'CLEAN',\n        'CREDITS', 'DESCRIPTION', 'CONFLICTS', 'WHITESPACE_SENSITIVE',\n    ];\n\n    /**\n     * @throws BorkageException\n     */\n    public function __construct(string $fileName, bool $inRedirect)\n    {\n        $this->fileName = $fileName;\n\n        $this->readFile();\n        $this->validateAndProcess($inRedirect);\n    }\n\n    public function hasSection(string $name): bool\n    {\n        return isset($this->sections[$name]);\n    }\n\n    public function hasAllSections(string ...$names): bool\n    {\n        foreach ($names as $section) {\n            if (!isset($this->sections[$section])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public function hasAnySections(string ...$names): bool\n    {\n        foreach ($names as $section) {\n            if (isset($this->sections[$section])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public function sectionNotEmpty(string $name): bool\n    {\n        return !empty($this->sections[$name]);\n    }\n\n    /**\n     * @throws Exception\n     */\n    public function getSection(string $name): string\n    {\n        if (!isset($this->sections[$name])) {\n            throw new Exception(\"Section $name not found\");\n        }\n        return $this->sections[$name];\n    }\n\n    public function getName(): string\n    {\n        return trim($this->getSection('TEST'));\n    }\n\n    public function isCGI(): bool\n    {\n        return $this->sectionNotEmpty('CGI')\n            || $this->sectionNotEmpty('GET')\n            || $this->sectionNotEmpty('POST')\n            || $this->sectionNotEmpty('GZIP_POST')\n            || $this->sectionNotEmpty('DEFLATE_POST')\n            || $this->sectionNotEmpty('POST_RAW')\n            || $this->sectionNotEmpty('PUT')\n            || $this->sectionNotEmpty('COOKIE')\n            || $this->sectionNotEmpty('EXPECTHEADERS');\n    }\n\n    /**\n     * TODO Refactor to make it not needed\n     */\n    public function setSection(string $name, string $value): void\n    {\n        $this->sections[$name] = $value;\n    }\n\n    /**\n     * Load the sections of the test file\n     * @throws BorkageException\n     */\n    private function readFile(): void\n    {\n        $fp = fopen($this->fileName, \"rb\") or error(\"Cannot open test file: {$this->fileName}\");\n\n        if (!feof($fp)) {\n            $line = fgets($fp);\n\n            if ($line === false) {\n                throw new BorkageException(\"cannot read test\");\n            }\n        } else {\n            throw new BorkageException(\"empty test [{$this->fileName}]\");\n        }\n        if (strncmp('--TEST--', $line, 8)) {\n            throw new BorkageException(\"tests must start with --TEST-- [{$this->fileName}]\");\n        }\n\n        $section = 'TEST';\n        $secfile = false;\n        $secdone = false;\n\n        while (!feof($fp)) {\n            $line = fgets($fp);\n\n            if ($line === false) {\n                break;\n            }\n\n            // Match the beginning of a section.\n            if (preg_match('/^--([_A-Z]+)--/', $line, $r)) {\n                $section = (string) $r[1];\n\n                if (isset($this->sections[$section]) && $this->sections[$section]) {\n                    throw new BorkageException(\"duplicated $section section\");\n                }\n\n                // check for unknown sections\n                if (!in_array($section, self::ALLOWED_SECTIONS)) {\n                    throw new BorkageException('Unknown section \"' . $section . '\"');\n                }\n\n                $this->sections[$section] = '';\n                $secfile = $section == 'FILE' || $section == 'FILEEOF' || $section == 'FILE_EXTERNAL';\n                $secdone = false;\n                continue;\n            }\n\n            // Add to the section text.\n            if (!$secdone) {\n                $this->sections[$section] .= $line;\n            }\n\n            // End of actual test?\n            if ($secfile && preg_match('/^===DONE===\\s*$/', $line)) {\n                $secdone = true;\n            }\n        }\n\n        fclose($fp);\n    }\n\n    /**\n     * @throws BorkageException\n     */\n    private function validateAndProcess(bool $inRedirect): void\n    {\n        // the redirect section allows a set of tests to be reused outside of\n        // a given test dir\n        if ($this->hasSection('REDIRECTTEST')) {\n            if ($inRedirect) {\n                throw new BorkageException(\"Can't redirect a test from within a redirected test\");\n            }\n            return;\n        }\n        if (!$this->hasSection('PHPDBG') && $this->hasSection('FILE') + $this->hasSection('FILEEOF') + $this->hasSection('FILE_EXTERNAL') != 1) {\n            throw new BorkageException(\"missing section --FILE--\");\n        }\n\n        if ($this->hasSection('FILEEOF')) {\n            $this->sections['FILE'] = preg_replace(\"/[\\r\\n]+$/\", '', $this->sections['FILEEOF']);\n            unset($this->sections['FILEEOF']);\n        }\n\n        foreach (['FILE', 'EXPECT', 'EXPECTF', 'EXPECTREGEX'] as $prefix) {\n            // For grepping: FILE_EXTERNAL, EXPECT_EXTERNAL, EXPECTF_EXTERNAL, EXPECTREGEX_EXTERNAL\n            $key = $prefix . '_EXTERNAL';\n\n            if ($this->hasSection($key)) {\n                // don't allow tests to retrieve files from anywhere but this subdirectory\n                $dir = dirname($this->fileName);\n                $fileName = $dir . '/' . trim(str_replace('..', '', $this->getSection($key)));\n\n                if (file_exists($fileName)) {\n                    $this->sections[$prefix] = file_get_contents($fileName);\n                } else {\n                    throw new BorkageException(\"could not load --\" . $key . \"-- \" . $dir . '/' . trim($fileName));\n                }\n            }\n        }\n\n        if (($this->hasSection('EXPECT') + $this->hasSection('EXPECTF') + $this->hasSection('EXPECTREGEX')) != 1) {\n            throw new BorkageException(\"missing section --EXPECT--, --EXPECTF-- or --EXPECTREGEX--\");\n        }\n\n        if ($this->hasSection('PHPDBG') && !$this->hasSection('STDIN')) {\n            $this->sections['STDIN'] = $this->sections['PHPDBG'] . \"\\n\";\n        }\n    }\n}\n\nfunction init_output_buffers(): void\n{\n    // Delete as much output buffers as possible.\n    while (@ob_end_clean()) {\n    }\n\n    if (ob_get_level()) {\n        echo \"Not all buffers were deleted.\\n\";\n    }\n}\n\nfunction check_proc_open_function_exists(): void\n{\n    if (!function_exists('proc_open')) {\n        echo <<<NO_PROC_OPEN_ERROR\n\n+-----------------------------------------------------------+\n|                       ! ERROR !                           |\n| The test-suite requires that proc_open() is available.    |\n| Please check if you disabled it in php.ini.               |\n+-----------------------------------------------------------+\n\nNO_PROC_OPEN_ERROR;\n        exit(1);\n    }\n}\n\nfunction bless_failed_tests(array $failedTests): void\n{\n    if (empty($failedTests)) {\n        return;\n    }\n    $args = [\n        PHP_BINARY,\n        __DIR__ . '/scripts/dev/bless_tests.php',\n    ];\n    foreach ($failedTests as $test) {\n        $args[] = $test['name'];\n    }\n    proc_open($args, [], $pipes);\n}\n\nmain();\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "template.rc",
          "type": "blob",
          "size": 1.3544921875,
          "content": "/* This is a template RC file.\n * Do not edit with MSVC */\n#ifdef APSTUDIO_INVOKED\n# error dont edit with MSVC\n#endif\n\n#include \"winres.h\"\n#include \"main/php_version.h\"\n\nLANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US\n#pragma code_page(1252)\n\n#ifndef THANKS_GUYS\n# define THANKS_GUYS \"\"\n#endif\n\n#define VERSIONDESC 3,5,0,0\n#define VERSIONSTR  \"3.5.0-dev\"\n\n//Version\nVS_VERSION_INFO VERSIONINFO\n FILEVERSION VERSIONDESC\n PRODUCTVERSION VERSIONDESC\n FILEFLAGSMASK 0x3fL\n#ifdef _DEBUG\n FILEFLAGS VS_FF_DEBUG\n#else\n FILEFLAGS 0x0L\n#endif\n FILEOS VOS__WINDOWS32\n FILETYPE VFT_DLL\n FILESUBTYPE VFT2_UNKNOWN\nBEGIN\n    BLOCK \"StringFileInfo\"\n    BEGIN\n        BLOCK \"040904b0\"\n        BEGIN\n            VALUE \"Comments\", THANKS_GUYS \"\\0\"\n            VALUE \"CompanyName\", \"Derick Rethans\\0\"\n            VALUE \"FileDescription\", FILE_DESCRIPTION \"\\0\"\n            VALUE \"FileVersion\", VERSIONSTR\n            VALUE \"InternalName\", FILE_NAME \"\\0\"\n            VALUE \"LegalCopyright\", \"Copyright © 2002-2024 Derick Rethans\\0\"\n            VALUE \"OriginalFilename\", FILE_NAME \"\\0\"\n            VALUE \"PrivateBuild\", \"\\0\"\n            VALUE \"ProductName\", \"Xdebug\\0\"\n            VALUE \"ProductVersion\", VERSIONSTR\n            VALUE \"URL\", \"https://xdebug.org\"\n        END\n    END\n    BLOCK \"VarFileInfo\"\n    BEGIN\n        VALUE \"Translation\", 0x409, 1200\n    END\nEND\n\n#ifdef MC_INCLUDE\n#include MC_INCLUDE\n#endif\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "xdebug.c",
          "type": "blob",
          "size": 27.720703125,
          "content": "/*\n   +----------------------------------------------------------------------+\n   | Xdebug                                                               |\n   +----------------------------------------------------------------------+\n   | Copyright (c) 2002-2024 Derick Rethans                               |\n   +----------------------------------------------------------------------+\n   | This source file is subject to version 1.01 of the Xdebug license,   |\n   | that is bundled with this package in the file LICENSE, and is        |\n   | available at through the world-wide-web at                           |\n   | https://xdebug.org/license.php                                       |\n   | If you did not receive a copy of the Xdebug license and are unable   |\n   | to obtain it through the world-wide-web, please send a note to       |\n   | derick@xdebug.org so we can mail you a copy immediately.             |\n   +----------------------------------------------------------------------+\n */\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include \"lib/php-header.h\"\n#include \"main/php_version.h\"\n#include \"lib/compat.h\"\n\n#if HAVE_XDEBUG\n\n#ifndef PHP_WIN32\n#include <sys/time.h>\n#include <unistd.h>\n#else\n#include \"win32/time.h\"\n#include <process.h>\n#endif\n\n#include \"TSRM.h\"\n#include \"SAPI.h\"\n#include \"zend_extensions.h\"\n#include \"main/php_ini.h\"\n#include \"ext/standard/head.h\"\n#include \"ext/standard/html.h\"\n#include \"ext/standard/info.h\"\n#include \"ext/standard/php_string.h\"\n#include \"php_globals.h\"\n#include \"main/php_output.h\"\n#include \"ext/standard/php_var.h\"\n\n#include \"php_xdebug.h\"\n#include \"php_xdebug_arginfo.h\"\n\n#include \"base/base.h\"\n#if HAVE_XDEBUG_CONTROL_SOCKET_SUPPORT\n# include \"base/ctrl_socket.h\"\n#endif\n#include \"base/filter.h\"\n#include \"coverage/code_coverage.h\"\n#include \"develop/monitor.h\"\n#include \"develop/stack.h\"\n#include \"develop/superglobals.h\"\n#include \"debugger/com.h\"\n#include \"gcstats/gc_stats.h\"\n#include \"lib/usefulstuff.h\"\n#include \"lib/lib.h\"\n#include \"lib/llist.h\"\n#include \"lib/log.h\"\n#include \"lib/mm.h\"\n#include \"lib/var_export_html.h\"\n#include \"lib/var_export_line.h\"\n#include \"lib/var_export_text.h\"\n#include \"profiler/profiler.h\"\n#include \"tracing/tracing.h\"\n\nstatic zend_result (*xdebug_orig_post_startup_cb)(void);\nstatic zend_result xdebug_post_startup(void);\n\nint xdebug_include_or_eval_handler(zend_execute_data *execute_data);\n\n/* True globals */\nint zend_xdebug_initialised = 0;\nint xdebug_global_mode = 0;\n\nzend_module_entry xdebug_module_entry = {\n\tSTANDARD_MODULE_HEADER,\n\t\"xdebug\",\n\text_functions,\n\tPHP_MINIT(xdebug),\n\tPHP_MSHUTDOWN(xdebug),\n\tPHP_RINIT(xdebug),\n\tPHP_RSHUTDOWN(xdebug),\n\tPHP_MINFO(xdebug),\n\tXDEBUG_VERSION,\n\tNO_MODULE_GLOBALS,\n\tZEND_MODULE_POST_ZEND_DEACTIVATE_N(xdebug),\n\tSTANDARD_MODULE_PROPERTIES_EX\n};\n\nZEND_DECLARE_MODULE_GLOBALS(xdebug)\n\n#if COMPILE_DL_XDEBUG\nZEND_GET_MODULE(xdebug)\n# ifdef ZTS\nZEND_TSRMLS_CACHE_DEFINE();\n# endif\n#endif\n\nstatic PHP_INI_MH(OnUpdateServer)\n{\n\tDUMP_TOK(server);\n}\n\nstatic PHP_INI_MH(OnUpdateGet)\n{\n\tDUMP_TOK(get);\n}\n\nstatic PHP_INI_MH(OnUpdatePost)\n{\n\tDUMP_TOK(post);\n}\n\nstatic PHP_INI_MH(OnUpdateCookie)\n{\n\tDUMP_TOK(cookie);\n}\n\nstatic PHP_INI_MH(OnUpdateFiles)\n{\n\tDUMP_TOK(files);\n}\n\nstatic PHP_INI_MH(OnUpdateEnv)\n{\n\tDUMP_TOK(env);\n}\n\nstatic PHP_INI_MH(OnUpdateRequest)\n{\n\tDUMP_TOK(request);\n}\n\nstatic PHP_INI_MH(OnUpdateSession)\n{\n\tDUMP_TOK(session);\n}\n\nstatic PHP_INI_MH(OnUpdateStartWithRequest)\n{\n\tif (!new_value) {\n\t\treturn FAILURE;\n\t}\n\n\tif (!xdebug_lib_set_start_with_request(ZSTR_VAL(new_value))) {\n\t\treturn FAILURE;\n\t}\n\n\treturn SUCCESS;\n}\n\nstatic PHP_INI_MH(OnUpdateStartUponError)\n{\n\tif (!new_value) {\n\t\treturn FAILURE;\n\t}\n\n\tif (!xdebug_lib_set_start_upon_error(ZSTR_VAL(new_value))) {\n\t\treturn FAILURE;\n\t}\n\n\treturn SUCCESS;\n}\n\nstatic PHP_INI_MH(OnUpdateRemovedSetting)\n{\n\tif (! (EG(error_reporting) & E_DEPRECATED)) {\n\t\treturn SUCCESS;\n\t}\n\tif (new_value && ZSTR_LEN(new_value) > 0 && strncmp(\"This setting\", ZSTR_VAL(new_value), 11) != 0) {\n\t\txdebug_log_ex(\n\t\t\tXLOG_CHAN_CONFIG, XLOG_CRIT, \"REMOVED\",\n\t\t\t\"The setting '%s' has been removed, see the upgrading guide at %supgrade_guide#changed-%s\",\n\t\t\tZSTR_VAL(entry->name), xdebug_lib_docs_base(), ZSTR_VAL(entry->name)\n\t\t);\n\t}\n\treturn FAILURE;\n}\n\nstatic PHP_INI_MH(OnUpdateChangedSetting)\n{\n\tif (! (EG(error_reporting) & E_DEPRECATED)) {\n\t\treturn SUCCESS;\n\t}\n\tif (new_value && ZSTR_LEN(new_value) > 0 && strncmp(\"This setting\", ZSTR_VAL(new_value), 11) != 0) {\n\t\txdebug_log_ex(\n\t\t\tXLOG_CHAN_CONFIG, XLOG_CRIT, \"CHANGED\",\n\t\t\t\"The setting '%s' has been renamed, see the upgrading guide at %supgrade_guide#changed-%s\",\n\t\t\tZSTR_VAL(entry->name), xdebug_lib_docs_base(), ZSTR_VAL(entry->name)\n\t\t);\n\t}\n\treturn FAILURE;\n}\n\n#if HAVE_XDEBUG_CONTROL_SOCKET_SUPPORT\nstatic PHP_INI_MH(OnUpdateCtrlSocket)\n{\n\tif (!new_value) {\n\t\treturn FAILURE;\n\t}\n\n\tif (!xdebug_lib_set_control_socket_granularity(ZSTR_VAL(new_value))) {\n\t\treturn FAILURE;\n\t}\n\n\treturn SUCCESS;\n}\n#endif\n\n#ifdef P_tmpdir\n# define XDEBUG_TEMP_DIR P_tmpdir\n#else\n# ifdef PHP_WIN32\n#  define XDEBUG_TEMP_DIR \"C:\\\\Windows\\\\Temp\"\n# else\n#  define XDEBUG_TEMP_DIR \"/tmp\"\n# endif\n#endif\n\nZEND_INI_DISP(display_removed_setting)\n{\n\tZEND_PUTS(\"(setting removed in Xdebug 3)\");\n}\n\nZEND_INI_DISP(display_changed_setting)\n{\n\tZEND_PUTS(\"(setting renamed in Xdebug 3)\");\n}\n\n#if HAVE_XDEBUG_CONTROL_SOCKET_SUPPORT\nZEND_INI_DISP(display_control_socket)\n{\n\tswitch (XINI_BASE(control_socket_granularity))\n\t{\n\t\tcase XDEBUG_CONTROL_SOCKET_OFF:\n\t\t\tZEND_PUTS(\"off\");\n\t\t\tbreak;\n\t\tcase XDEBUG_CONTROL_SOCKET_DEFAULT:\n\t\t\tphp_printf(\"time: %ldms\", XINI_BASE(control_socket_threshold_ms));\n\t\t\tbreak;\n\t\tcase XDEBUG_CONTROL_SOCKET_TIME:\n\t\t\tphp_printf(\"time: %ldms\", XINI_BASE(control_socket_threshold_ms));\n\t\t\tbreak;\n\t}\n}\n#endif\n\n#define XDEBUG_REMOVED_INI_ENTRY(n) PHP_INI_ENTRY_EX((\"\" # n), \"This setting has been removed, see the upgrading guide at https://xdebug.org/docs/upgrade_guide#removed-\" # n, PHP_INI_ALL, OnUpdateRemovedSetting, display_removed_setting)\n#define XDEBUG_CHANGED_INI_ENTRY(n) PHP_INI_ENTRY_EX((\"\" # n), \"This setting has been changed, see the upgrading guide at https://xdebug.org/docs/upgrade_guide#changed-\" # n, PHP_INI_ALL, OnUpdateChangedSetting, display_changed_setting)\n\nstatic const char *xdebug_start_with_request_types[5] = { \"\", \"default\", \"yes\", \"no\", \"trigger\" };\n\nZEND_INI_DISP(display_start_with_request)\n{\n\tchar *value;\n\n\tif (type == ZEND_INI_DISPLAY_ORIG && ini_entry->modified) {\n\t\tvalue = ZSTR_VAL(ini_entry->orig_value);\n\t} else if (ini_entry->value) {\n\t\tvalue = ZSTR_VAL(ini_entry->value);\n\t} else {\n\t\tvalue = NULL;\n\t}\n\tif (value) {\n\t\tZEND_PUTS(xdebug_start_with_request_types[xdebug_lib_get_start_with_request()]);\n\t} else {\n\t\tZEND_PUTS(\"?\");\n\t}\n}\n\n\nstatic const char *xdebug_start_upon_error_types[4] = { \"\", \"default\", \"yes\", \"no\" };\n\nZEND_INI_DISP(display_start_upon_error)\n{\n\tchar *value;\n\n\tif (type == ZEND_INI_DISPLAY_ORIG && ini_entry->modified) {\n\t\tvalue = ZSTR_VAL(ini_entry->orig_value);\n\t} else if (ini_entry->value) {\n\t\tvalue = ZSTR_VAL(ini_entry->value);\n\t} else {\n\t\tvalue = NULL;\n\t}\n\tif (value) {\n\t\tZEND_PUTS(xdebug_start_upon_error_types[xdebug_lib_get_start_upon_error()]);\n\t} else {\n\t\tZEND_PUTS(\"?\");\n\t}\n}\n\n\n#if HAVE_XDEBUG_ZLIB\n# define USE_COMPRESSION_DEFAULT \"1\"\n#else\n# define USE_COMPRESSION_DEFAULT \"0\"\n#endif\n\nPHP_INI_BEGIN()\n\t/* Library settings */\n\tSTD_PHP_INI_ENTRY(\"xdebug.mode\",               \"develop\",               PHP_INI_SYSTEM,                OnUpdateString, settings.library.requested_mode,   zend_xdebug_globals, xdebug_globals)\n\tPHP_INI_ENTRY_EX( \"xdebug.start_with_request\", \"default\",               PHP_INI_SYSTEM|PHP_INI_PERDIR, OnUpdateStartWithRequest, display_start_with_request)\n\tPHP_INI_ENTRY_EX( \"xdebug.start_upon_error\",   \"default\",               PHP_INI_SYSTEM|PHP_INI_PERDIR, OnUpdateStartUponError,   display_start_upon_error)\n\tSTD_PHP_INI_ENTRY(\"xdebug.output_dir\",         XDEBUG_TEMP_DIR,         PHP_INI_ALL,                   OnUpdateString, settings.library.output_dir,       zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_ENTRY(\"xdebug.use_compression\",    USE_COMPRESSION_DEFAULT, PHP_INI_ALL,                   OnUpdateBool,   settings.library.use_compression,  zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_ENTRY(\"xdebug.trigger_value\",      \"\",                      PHP_INI_SYSTEM|PHP_INI_PERDIR, OnUpdateString, settings.library.trigger_value,    zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_ENTRY(\"xdebug.file_link_format\",   \"\",                      PHP_INI_ALL,                   OnUpdateString, settings.library.file_link_format, zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_ENTRY(\"xdebug.filename_format\",    \"\",                      PHP_INI_ALL,                   OnUpdateString, settings.library.filename_format,  zend_xdebug_globals, xdebug_globals)\n#if HAVE_XDEBUG_CONTROL_SOCKET_SUPPORT\n\tPHP_INI_ENTRY_EX(\"xdebug.control_socket\",      \"default\",               PHP_INI_ALL,                   OnUpdateCtrlSocket, display_control_socket)\n#endif\n\n\tSTD_PHP_INI_ENTRY(\"xdebug.log\",       \"\",           PHP_INI_ALL, OnUpdateString, settings.library.log,       zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_ENTRY(\"xdebug.log_level\", XLOG_DEFAULT, PHP_INI_ALL, OnUpdateLong,   settings.library.log_level, zend_xdebug_globals, xdebug_globals)\n\n\t/* Variable display settings */\n\tSTD_PHP_INI_ENTRY(\"xdebug.var_display_max_children\", \"128\",     PHP_INI_ALL,    OnUpdateLong,   settings.library.display_max_children, zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_ENTRY(\"xdebug.var_display_max_data\",     \"512\",     PHP_INI_ALL,    OnUpdateLong,   settings.library.display_max_data,     zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_ENTRY(\"xdebug.var_display_max_depth\",    \"3\",       PHP_INI_ALL,    OnUpdateLong,   settings.library.display_max_depth,    zend_xdebug_globals, xdebug_globals)\n\n\t/* Base settings */\n\tSTD_PHP_INI_ENTRY(\"xdebug.max_nesting_level\", \"512\",                PHP_INI_ALL,    OnUpdateLong,   settings.base.max_nesting_level, zend_xdebug_globals, xdebug_globals)\n\n\t/* Develop settings */\n\tSTD_PHP_INI_ENTRY(\"xdebug.cli_color\",         \"0\",                  PHP_INI_ALL,    OnUpdateLong,   settings.develop.cli_color,         zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_BOOLEAN(\"xdebug.force_display_errors\", \"0\",             PHP_INI_SYSTEM, OnUpdateBool,   settings.develop.force_display_errors, zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_ENTRY(\"xdebug.force_error_reporting\", \"0\",              PHP_INI_SYSTEM, OnUpdateLong,   settings.develop.force_error_reporting, zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_ENTRY(\"xdebug.halt_level\",        \"0\",                  PHP_INI_ALL,    OnUpdateLong,   settings.develop.halt_level,        zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_ENTRY(\"xdebug.max_stack_frames\",  \"-1\",                 PHP_INI_ALL,    OnUpdateLong,   settings.develop.max_stack_frames,  zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_BOOLEAN(\"xdebug.show_error_trace\",  \"0\",                PHP_INI_ALL,    OnUpdateBool,   settings.develop.show_error_trace,  zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_BOOLEAN(\"xdebug.show_exception_trace\",  \"0\",            PHP_INI_ALL,    OnUpdateBool,   settings.develop.show_ex_trace,     zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_BOOLEAN(\"xdebug.show_local_vars\", \"0\",                  PHP_INI_ALL,    OnUpdateBool,   settings.develop.show_local_vars,   zend_xdebug_globals, xdebug_globals)\n\n\t/* Dump superglobals settings */\n\tPHP_INI_ENTRY(\"xdebug.dump.COOKIE\",           NULL,                 PHP_INI_ALL,    OnUpdateCookie)\n\tPHP_INI_ENTRY(\"xdebug.dump.ENV\",              NULL,                 PHP_INI_ALL,    OnUpdateEnv)\n\tPHP_INI_ENTRY(\"xdebug.dump.FILES\",            NULL,                 PHP_INI_ALL,    OnUpdateFiles)\n\tPHP_INI_ENTRY(\"xdebug.dump.GET\",              NULL,                 PHP_INI_ALL,    OnUpdateGet)\n\tPHP_INI_ENTRY(\"xdebug.dump.POST\",             NULL,                 PHP_INI_ALL,    OnUpdatePost)\n\tPHP_INI_ENTRY(\"xdebug.dump.REQUEST\",          NULL,                 PHP_INI_ALL,    OnUpdateRequest)\n\tPHP_INI_ENTRY(\"xdebug.dump.SERVER\",           NULL,                 PHP_INI_ALL,    OnUpdateServer)\n\tPHP_INI_ENTRY(\"xdebug.dump.SESSION\",          NULL,                 PHP_INI_ALL,    OnUpdateSession)\n\tSTD_PHP_INI_BOOLEAN(\"xdebug.dump_globals\",    \"1\",                  PHP_INI_ALL,    OnUpdateBool,   settings.develop.dump_globals,      zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_BOOLEAN(\"xdebug.dump_once\",       \"1\",                  PHP_INI_ALL,    OnUpdateBool,   settings.develop.dump_once,         zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_BOOLEAN(\"xdebug.dump_undefined\",  \"0\",                  PHP_INI_ALL,    OnUpdateBool,   settings.develop.dump_undefined,    zend_xdebug_globals, xdebug_globals)\n\n\t/* Profiler settings */\n\tSTD_PHP_INI_ENTRY(\"xdebug.profiler_output_name\",      \"cachegrind.out.%p\",  PHP_INI_SYSTEM|PHP_INI_PERDIR, OnUpdateString, settings.profiler.profiler_output_name,          zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_BOOLEAN(\"xdebug.profiler_append\",         \"0\",                  PHP_INI_SYSTEM|PHP_INI_PERDIR, OnUpdateBool,   settings.profiler.profiler_append,               zend_xdebug_globals, xdebug_globals)\n\n\t/* Xdebug Cloud */\n\tSTD_PHP_INI_ENTRY(\"xdebug.cloud_id\", \"\", PHP_INI_SYSTEM, OnUpdateString, settings.debugger.cloud_id, zend_xdebug_globals, xdebug_globals)\n\n\t/* Step debugger settings */\n\tSTD_PHP_INI_ENTRY(\"xdebug.client_host\",             \"localhost\",                        PHP_INI_ALL, OnUpdateString, settings.debugger.client_host,             zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_ENTRY(\"xdebug.client_port\",             XDEBUG_CLIENT_PORT_S,               PHP_INI_ALL, OnUpdateLong,   settings.debugger.client_port,             zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_BOOLEAN(\"xdebug.discover_client_host\",  \"0\",                                PHP_INI_ALL, OnUpdateBool,   settings.debugger.discover_client_host,    zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_ENTRY(\"xdebug.client_discovery_header\", \"HTTP_X_FORWARDED_FOR,REMOTE_ADDR\", PHP_INI_ALL, OnUpdateString, settings.debugger.client_discovery_header, zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_ENTRY(\"xdebug.idekey\",                  \"\",                                 PHP_INI_ALL, OnUpdateString, settings.debugger.ide_key_setting,         zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_ENTRY(\"xdebug.connect_timeout_ms\",      \"200\",                              PHP_INI_ALL, OnUpdateLong,   settings.debugger.connect_timeout_ms,      zend_xdebug_globals, xdebug_globals)\n\n\t/* Scream support */\n\tSTD_PHP_INI_BOOLEAN(\"xdebug.scream\",                 \"0\",           PHP_INI_ALL,    OnUpdateBool,   settings.develop.do_scream,            zend_xdebug_globals, xdebug_globals)\n\n\t/* GC Stats support */\n\tSTD_PHP_INI_ENTRY(\"xdebug.gc_stats_output_name\", \"gcstats.%p\",      PHP_INI_SYSTEM|PHP_INI_PERDIR, OnUpdateString, settings.gc_stats.output_name, zend_xdebug_globals, xdebug_globals)\n\n\t/* Tracing settings */\n\tSTD_PHP_INI_ENTRY(\"xdebug.trace_output_name\", \"trace.%c\",           PHP_INI_ALL,    OnUpdateString, settings.tracing.trace_output_name, zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_ENTRY(\"xdebug.trace_format\",      \"0\",                  PHP_INI_ALL,    OnUpdateLong,   settings.tracing.trace_format,      zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_ENTRY(\"xdebug.trace_options\",     \"0\",                  PHP_INI_ALL,    OnUpdateLong,   settings.tracing.trace_options,     zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_BOOLEAN(\"xdebug.collect_assignments\", \"0\",              PHP_INI_ALL,    OnUpdateBool,   settings.tracing.collect_assignments, zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_BOOLEAN(\"xdebug.collect_params\", \"1\",                   PHP_INI_ALL,    OnUpdateBool,   settings.tracing.collect_params,    zend_xdebug_globals, xdebug_globals)\n\tSTD_PHP_INI_BOOLEAN(\"xdebug.collect_return\",  \"0\",                  PHP_INI_ALL,    OnUpdateBool,   settings.tracing.collect_return,    zend_xdebug_globals, xdebug_globals)\n\n\t/* Removed/Changed settings */\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.auto_trace)\n\tXDEBUG_REMOVED_INI_ENTRY(xdebug.collect_includes)\n\tXDEBUG_REMOVED_INI_ENTRY(xdebug.collect_vars)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.coverage_enable)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.default_enable)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.gc_stats_enable)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.gc_stats_output_dir)\n\tXDEBUG_REMOVED_INI_ENTRY(xdebug.overload_var_dump)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.profiler_enable)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.profiler_enable_trigger)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.profiler_enable_trigger_value)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.profiler_output_dir)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.remote_autostart)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.remote_connect_back)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.remote_enable)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.remote_host)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.remote_log)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.remote_log_level)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.remote_mode)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.remote_port)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.remote_timeout)\n\tXDEBUG_REMOVED_INI_ENTRY(xdebug.show_mem_delta)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.trace_output_dir)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.trace_enable_trigger)\n\tXDEBUG_CHANGED_INI_ENTRY(xdebug.trace_enable_trigger_value)\nPHP_INI_END()\n\nstatic void xdebug_init_base_globals(xdebug_base_globals_t *xg)\n{\n\txg->stack                = NULL;\n\txg->in_debug_info        = 0;\n\txg->output_is_tty        = OUTPUT_NOT_CHECKED;\n\txg->in_execution         = 0;\n\txg->in_var_serialisation = 0;\n\txg->error_reporting_override   = 0;\n\txg->error_reporting_overridden = 0;\n\n\txg->filter_type_code_coverage = XDEBUG_FILTER_NONE;\n\txg->filter_type_stack         = XDEBUG_FILTER_NONE;\n\txg->filter_type_tracing       = XDEBUG_FILTER_NONE;\n\txg->filters_code_coverage     = NULL;\n\txg->filters_stack             = NULL;\n\txg->filters_tracing           = NULL;\n\n\txg->php_version_compile_time = PHP_VERSION;\n\txg->php_version_run_time     = zend_get_module_version(\"standard\");\n\n\txdebug_nanotime_init(xg);\n}\n\n\nstatic void php_xdebug_init_globals(zend_xdebug_globals *xg)\n{\n\tmemset(&xg->globals, 0, sizeof(xg->globals));\n\n\txdebug_init_library_globals(&xg->globals.library);\n\txdebug_init_base_globals(&xg->globals.base);\n\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_COVERAGE)) {\n\t\txdebug_init_coverage_globals(&xg->globals.coverage);\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_STEP_DEBUG)) {\n\t\txdebug_init_debugger_globals(&xg->globals.debugger);\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_DEVELOP)) {\n\t\txdebug_init_develop_globals(&xg->globals.develop);\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_PROFILING)) {\n\t\txdebug_init_profiler_globals(&xg->globals.profiler);\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_GCSTATS)) {\n\t\txdebug_init_gc_stats_globals(&xg->globals.gc_stats);\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_TRACING)) {\n\t\txdebug_init_tracing_globals(&xg->globals.tracing);\n\t}\n}\n\nstatic void php_xdebug_shutdown_globals(zend_xdebug_globals *xg)\n{\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_DEVELOP)) {\n\t\txdebug_deinit_develop_globals(&xg->globals.develop);\n\t}\n}\n\n\nstatic void xdebug_env_config(void)\n{\n\tchar       *config = getenv(\"XDEBUG_CONFIG\");\n\txdebug_arg *parts;\n\tint\t\t\ti;\n\t/*\n\t\tXDEBUG_CONFIG format:\n\t\tXDEBUG_CONFIG=var=val var=val\n\t*/\n\tif (!config) {\n\t\treturn;\n\t}\n\n\tparts = xdebug_arg_ctor();\n\txdebug_explode(\" \", config, parts, -1);\n\n\tfor (i = 0; i < parts->c; ++i) {\n\t\tconst char *name = NULL;\n\t\tchar *envvar = parts->args[i];\n\t\tchar *envval = NULL;\n\t\tchar *eq = strchr(envvar, '=');\n\t\tif (!eq || !*eq) {\n\t\t\tcontinue;\n\t\t}\n\t\t*eq = 0;\n\t\tenvval = eq + 1;\n\t\tif (!*envval) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (strcasecmp(envvar, \"discover_client_host\") == 0) {\n\t\t\tname = \"xdebug.discover_client_host\";\n\t\t} else\n\t\tif (strcasecmp(envvar, \"client_port\") == 0) {\n\t\t\tname = \"xdebug.client_port\";\n\t\t} else\n\t\tif (strcasecmp(envvar, \"client_host\") == 0) {\n\t\t\tname = \"xdebug.client_host\";\n\t\t} else\n\t\tif (strcasecmp(envvar, \"cloud_id\") == 0) {\n\t\t\tname = \"xdebug.cloud_id\";\n\t\t} else\n\t\tif (strcasecmp(envvar, \"idekey\") == 0) {\n\t\t\tname = \"xdebug.idekey\";\n\t\t} else\n\t\tif (strcasecmp(envvar, \"output_dir\") == 0) {\n\t\t\tname = \"xdebug.output_dir\";\n\t\t} else\n\t\tif (strcasecmp(envvar, \"profiler_output_name\") == 0) {\n\t\t\tname = \"xdebug.profiler_output_name\";\n\t\t} else\n\t\tif (strcasecmp(envvar, \"log\") == 0) {\n\t\t\tname = \"xdebug.log\";\n\t\t} else\n\t\tif (strcasecmp(envvar, \"log_level\") == 0) {\n\t\t\tname = \"xdebug.log_level\";\n\t\t} else\n\t\tif (strcasecmp(envvar, \"cli_color\") == 0) {\n\t\t\tname = \"xdebug.cli_color\";\n\t\t}\n\n\t\tif (name) {\n\t\t\tzend_string *ini_name = zend_string_init(name, strlen(name), 0);\n\t\t\tzend_string *ini_val = zend_string_init(envval, strlen(envval), 0);\n\t\t\tzend_alter_ini_entry(ini_name, ini_val, PHP_INI_SYSTEM, PHP_INI_STAGE_ACTIVATE);\n\t\t\tzend_string_release(ini_val);\n\t\t\tzend_string_release(ini_name);\n\t\t}\n\t}\n\n\txdebug_arg_dtor(parts);\n}\n\nint xdebug_is_output_tty(void)\n{\n\tif (XG_BASE(output_is_tty) == OUTPUT_NOT_CHECKED) {\n#ifndef PHP_WIN32\n\t\tXG_BASE(output_is_tty) = isatty(STDOUT_FILENO);\n#else\n\t\tXG_BASE(output_is_tty) = getenv(\"ANSICON\") != NULL;\n#endif\n\t}\n\treturn (XG_BASE(output_is_tty));\n}\n\nPHP_MINIT_FUNCTION(xdebug)\n{\n\tZEND_INIT_MODULE_GLOBALS(xdebug, php_xdebug_init_globals, php_xdebug_shutdown_globals);\n\tREGISTER_INI_ENTRIES();\n\n\txdebug_coverage_register_constants(INIT_FUNC_ARGS_PASSTHRU);\n\txdebug_filter_register_constants(INIT_FUNC_ARGS_PASSTHRU);\n\txdebug_tracing_register_constants(INIT_FUNC_ARGS_PASSTHRU);\n\n\t/* Locking in mode as it currently is */\n\tif (!xdebug_lib_set_mode(XG(settings.library.requested_mode))) {\n\t\txdebug_lib_set_mode(\"develop\");\n\t}\n\n\tif (XDEBUG_MODE_IS_OFF()) {\n\t\treturn SUCCESS;\n\t}\n\n\txdebug_library_minit();\n\txdebug_base_minit(INIT_FUNC_ARGS_PASSTHRU);\n\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_STEP_DEBUG)) {\n\t\txdebug_debugger_minit();\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_DEVELOP)) {\n\t\txdebug_develop_minit(INIT_FUNC_ARGS_PASSTHRU);\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_GCSTATS)) {\n\t\txdebug_gcstats_minit();\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_PROFILING)) {\n\t\txdebug_profiler_minit();\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_TRACING)) {\n\t\txdebug_tracing_minit(INIT_FUNC_ARGS_PASSTHRU);\n\t}\n\n\t/* Overload the \"include_or_eval\" opcode if the mode is 'debug' or 'trace' */\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_STEP_DEBUG) || XDEBUG_MODE_IS(XDEBUG_MODE_TRACING)) {\n\t\txdebug_register_with_opcode_multi_handler(ZEND_INCLUDE_OR_EVAL, xdebug_include_or_eval_handler);\n\t}\n\n\t/* Coverage must be last, as it has a catch all override for opcodes */\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_COVERAGE)) {\n\t\txdebug_coverage_minit(INIT_FUNC_ARGS_PASSTHRU);\n\t}\n\n\tif (zend_xdebug_initialised == 0) {\n\t\tzend_error(E_WARNING, \"Xdebug MUST be loaded as a Zend extension\");\n\t}\n\n\treturn SUCCESS;\n}\n\nPHP_MSHUTDOWN_FUNCTION(xdebug)\n{\n\tif (XDEBUG_MODE_IS_OFF()) {\n#ifdef ZTS\n\t\tts_free_id(xdebug_globals_id);\n#endif\n\t\treturn SUCCESS;\n\t}\n\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_GCSTATS)) {\n\t\txdebug_gcstats_mshutdown();\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_PROFILING)) {\n\t\txdebug_profiler_mshutdown();\n\t}\n\n\txdebug_library_mshutdown();\n\n#ifdef ZTS\n\tts_free_id(xdebug_globals_id);\n#else\n\tphp_xdebug_shutdown_globals(&xdebug_globals);\n#endif\n\n\treturn SUCCESS;\n}\n\nstatic void xdebug_init_auto_globals(void)\n{\n\tzend_is_auto_global_str((char*) ZEND_STRL(\"_ENV\"));\n\tzend_is_auto_global_str((char*) ZEND_STRL(\"_GET\"));\n\tzend_is_auto_global_str((char*) ZEND_STRL(\"_POST\"));\n\tzend_is_auto_global_str((char*) ZEND_STRL(\"_COOKIE\"));\n\tzend_is_auto_global_str((char*) ZEND_STRL(\"_REQUEST\"));\n\tzend_is_auto_global_str((char*) ZEND_STRL(\"_FILES\"));\n\tzend_is_auto_global_str((char*) ZEND_STRL(\"_SERVER\"));\n\tzend_is_auto_global_str((char*) ZEND_STRL(\"_SESSION\"));\n}\n\n\nPHP_RINIT_FUNCTION(xdebug)\n{\n#if defined(ZTS) && defined(COMPILE_DL_XDEBUG)\n\tZEND_TSRMLS_CACHE_UPDATE();\n#endif\n\n\tif (XDEBUG_MODE_IS_OFF()) {\n\t\treturn SUCCESS;\n\t}\n\n\t/* Get xdebug ini entries from the environment also,\n\t   this can override the idekey if one is set */\n\txdebug_env_config();\n\n\txdebug_library_rinit();\n\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_COVERAGE)) {\n\t\txdebug_coverage_rinit();\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_STEP_DEBUG)) {\n\t\txdebug_debugger_rinit();\n\n\t\tif (xdebug_debugger_bailout_if_no_exec_requested()) {\n\t\t\tzend_bailout();\n\t\t}\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_DEVELOP)) {\n\t\txdebug_develop_rinit();\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_GCSTATS)) {\n\t\txdebug_gcstats_rinit();\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_PROFILING)) {\n\t\txdebug_profiler_rinit();\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_TRACING)) {\n\t\txdebug_tracing_rinit();\n\t}\n\n\txdebug_init_auto_globals();\n\n\t/* Only enabled extended info when it is not disabled */\n\tCG(compiler_options) = CG(compiler_options) | ZEND_COMPILE_EXTENDED_STMT;\n\n\txdebug_base_rinit();\n\n\treturn SUCCESS;\n}\n\nZEND_MODULE_POST_ZEND_DEACTIVATE_D(xdebug)\n{\n\tif (XDEBUG_MODE_IS_OFF()) {\n\t\treturn SUCCESS;\n\t}\n\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_COVERAGE)) {\n\t\txdebug_coverage_post_deactivate();\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_STEP_DEBUG)) {\n\t\txdebug_debugger_post_deactivate();\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_DEVELOP)) {\n\t\txdebug_develop_post_deactivate();\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_PROFILING)) {\n\t\txdebug_profiler_post_deactivate();\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_TRACING)) {\n\t\txdebug_tracing_post_deactivate();\n\t}\n\n\txdebug_base_post_deactivate();\n\txdebug_library_post_deactivate();\n\n\treturn SUCCESS;\n}\n\nPHP_RSHUTDOWN_FUNCTION(xdebug)\n{\n\tif (XDEBUG_MODE_IS_OFF()) {\n\t\treturn SUCCESS;\n\t}\n\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_DEVELOP)) {\n\t\txdebug_develop_rshutdown();\n\t}\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_GCSTATS)) {\n\t\txdebug_gcstats_rshutdown();\n\t}\n\n\txdebug_base_rshutdown();\n\n\treturn SUCCESS;\n}\n\nPHP_MINFO_FUNCTION(xdebug)\n{\n\txdebug_print_info();\n\n\tif (zend_xdebug_initialised == 0) {\n\t\tphp_info_print_table_start();\n\t\tphp_info_print_table_header(1, \"XDEBUG NOT LOADED AS ZEND EXTENSION\");\n\t\tphp_info_print_table_end();\n\t}\n\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_STEP_DEBUG)) {\n\t\txdebug_debugger_minfo();\n\t}\n\n\tDISPLAY_INI_ENTRIES();\n}\n\nZEND_DLEXPORT void xdebug_statement_call(zend_execute_data *frame)\n{\n\tzend_op_array *op_array = &frame->func->op_array;\n\tint                   lineno;\n\n\tif (XDEBUG_MODE_IS_OFF()) {\n\t\treturn;\n\t}\n\n\tif (!EG(current_execute_data)) {\n\t\treturn;\n\t}\n\n\tlineno = EG(current_execute_data)->opline->lineno;\n\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_COVERAGE)) {\n\t\txdebug_coverage_count_line_if_active(op_array, op_array->filename, lineno);\n\t}\n\n\tif (XDEBUG_MODE_IS(XDEBUG_MODE_STEP_DEBUG)) {\n\t\txdebug_debugger_statement_call(op_array->filename, lineno);\n\t}\n\n#if HAVE_XDEBUG_CONTROL_SOCKET_SUPPORT\n\txdebug_control_socket_dispatch();\n#endif\n}\n\nZEND_DLEXPORT int xdebug_zend_startup(zend_extension *extension)\n{\n\txdebug_library_zend_startup();\n\txdebug_debugger_zend_startup();\n\n\tzend_xdebug_initialised = 1;\n\n\txdebug_orig_post_startup_cb = zend_post_startup_cb;\n\tzend_post_startup_cb = xdebug_post_startup;\n\n\treturn zend_startup_module(&xdebug_module_entry);\n}\n\nstatic zend_result xdebug_post_startup(void)\n{\n\tif (xdebug_orig_post_startup_cb) {\n\t\tint (*cb)(void) = xdebug_orig_post_startup_cb;\n\n\t\txdebug_orig_post_startup_cb = NULL;\n\t\tif (cb() != SUCCESS) {\n\t\t\treturn FAILURE;\n\t\t}\n\t}\n\n\txdebug_base_post_startup();\n\n\treturn SUCCESS;\n}\n\nZEND_DLEXPORT void xdebug_zend_shutdown(zend_extension *extension)\n{\n\txdebug_debugger_zend_shutdown();\n\n\txdebug_library_zend_shutdown();\n}\n\nZEND_DLEXPORT void xdebug_init_oparray(zend_op_array *op_array)\n{\n\tif (XDEBUG_MODE_IS_OFF()) {\n\t\treturn;\n\t}\n\n\txdebug_coverage_init_oparray(op_array);\n}\n\n#ifndef ZEND_EXT_API\n#define ZEND_EXT_API    ZEND_DLEXPORT\n#endif\n\nZEND_EXT_API zend_extension_version_info extension_version_info = { ZEND_EXTENSION_API_NO, (char*) ZEND_EXTENSION_BUILD_ID };\n\nZEND_DLEXPORT zend_extension zend_extension_entry = {\n\t(char*) XDEBUG_NAME,\n\t(char*) XDEBUG_VERSION,\n\t(char*) XDEBUG_AUTHOR,\n\t(char*) XDEBUG_URL_FAQ,\n\t(char*) XDEBUG_COPYRIGHT_SHORT,\n\txdebug_zend_startup,\n\txdebug_zend_shutdown,\n\tNULL,           /* activate_func_t */\n\tNULL,           /* deactivate_func_t */\n\tNULL,           /* message_handler_func_t */\n\tNULL,           /* op_array_handler_func_t */\n\txdebug_statement_call, /* statement_handler_func_t */\n\tNULL,           /* fcall_begin_handler_func_t */\n\tNULL,           /* fcall_end_handler_func_t */\n\txdebug_init_oparray,   /* op_array_ctor_func_t */\n\tNULL,           /* op_array_dtor_func_t */\n\tSTANDARD_ZEND_EXTENSION_PROPERTIES\n};\n\n#endif\n"
        },
        {
          "name": "xdebug.ini",
          "type": "blob",
          "size": 47.5234375,
          "content": "; This file is generated by the 'xdebug.org:html/docs/convert.php' robot\n; for Xdebug 3.4.0 — do not modify by hand\n\n; -----------------------------------------------------------------------------\n; xdebug.cli_color\n;\n; Type: integer, Default value: 0\n;\n; If this setting is 1, Xdebug will color var_dumps and stack traces output when\n; in CLI mode and when the output is a tty. On Windows, the ANSICON [1] tool\n; needs to be installed.\n;\n; [1] http://adoxa.altervista.org/ansicon/\n;\n; If the setting is 2, then Xdebug will always color var_dumps and stack trace,\n; no matter whether it's connected to a tty or whether ANSICON is installed. In\n; this case, you might end up seeing escape codes.\n;\n; See this article [1] for some more information.\n;\n; [1] https://derickrethans.nl/cli-color.html\n;\n; .. note::\n;\n;    This setting can additionally be configured through the\n;    ``XDEBUG_CONFIG``environment variable [1]. [1]\n;    /docs/all_settings#XDEBUG_CONFIG\n;\n;\n;xdebug.cli_color = 0\n\n; -----------------------------------------------------------------------------\n; xdebug.client_discovery_header\n;\n; Type: string, Default value: \"HTTP_X_FORWARDED_FOR,REMOTE_ADDR\"\n;\n; If xdebug.client_discovery_header is configured to be a non-empty string, then\n; the value is used as key in the ``$_SERVER`` superglobal array to determine\n; which header to use to find the IP address or hostname to use for 'connecting\n; back to'. This setting is only used in combination with\n; xdebug.discover_client_host and is otherwise ignored.\n;\n; For example, if xdebug.client_discovery_header is set to\n; ``HTTP_FORWARD_HOST``, then Xdebug will check\n; ``$_SERVER['HTTP_FORWARD_HOST']`` to obtain the IP address to use for\n; 'connecting back'.\n;\n; It is possible to configure multiple fallbacks by using a comma separated list\n; of values. For example if you want to use ``HTTP_FORWARD_HOST`` first, and\n; then also want to check ``REMOTE_ADDR``, then you set\n; xdebug.client_discovery_header to ``HTTP_FORWARD_HOST,REMOTE_ADDR``.\n;\n; .. warning::\n;\n;    PHP automatically prepends ``HTTP_``, and converts ``-`` to ``_``, for\n;    received HTTP header names. The ``THIS-IS-MY-HOST`` HTTP header is\n;    converted into ``$_SERVER['HTTP_THIS_IS_MY_HOST']``. Therefore, the\n;    xdebug.client_discovery_header needs to be set to ``HTTP_THIS_IS_MY_HOST``\n;    to match this.\n;\n; If you have logging enabled, and set the xdebug.log_level setting to ``10``,\n; then Xdebug will list every header, the header value, and the used header (if\n; any) when attempting to find the IP address to connect back to.\n;\n; .. note::\n;\n;    Xdebug 3.2 and later no longer fall back to the\n;    ``$_SERVER['HTTP_X_FORWARDED_FOR']`` and ``$_SERVER['REMOTE_ADDR']`` header\n;    values by default. If you want these headers to be used as well, you\n;    specifically need to add these to the list of headers, by setting\n;    xdebug.client_discovery_header to\n;    ``YOUR_OWN_HEADER,HTTP_X_FORWARDED_FOR,REMOTE_ADDR``.\n;\n;\n;xdebug.client_discovery_header = \"HTTP_X_FORWARDED_FOR,REMOTE_ADDR\"\n\n; -----------------------------------------------------------------------------\n; xdebug.client_host\n;\n; Type: string, Default value: localhost\n;\n; Configures the IP address or hostname where Xdebug will attempt to connect to\n; when initiating a debugging connection. This address should be the address of\n; the machine where your IDE or debugging client is listening for incoming\n; debugging connections.\n;\n; On non-Windows platforms, it is also possible to configure a Unix domain\n; socket [1] which is supported by only a select view debugging clients. In that\n; case, instead of the hostname or IP address, use ``unix:///path/to/sock``.\n;\n; [1] https://en.wikipedia.org/wiki/Unix_domain_socket\n;\n; If xdebug.discover_client_host is enabled then Xdebug will only use the value\n; of this setting in case Xdebug can not connect to an IDE using the information\n; it obtained from HTTP headers. In that case, the value of this setting acts as\n; a fallback only.\n;\n; .. note::\n;\n;    This setting can additionally be configured through the\n;    ``XDEBUG_CONFIG``environment variable [1]. [1]\n;    /docs/all_settings#XDEBUG_CONFIG\n;\n;\n;xdebug.client_host = localhost\n\n; -----------------------------------------------------------------------------\n; xdebug.client_port\n;\n; Type: integer, Default value: 9003\n;\n; The port to which Xdebug tries to connect on the remote host. Port ``9003`` is\n; the default for both Xdebug and the Command Line Debug Client. As many clients\n; use this port number, it is best to leave this setting unchanged.\n;\n; .. note::\n;\n;    This setting can additionally be configured through the\n;    ``XDEBUG_CONFIG``environment variable [1]. [1]\n;    /docs/all_settings#XDEBUG_CONFIG\n;\n;\n;xdebug.client_port = 9003\n\n; -----------------------------------------------------------------------------\n; xdebug.cloud_id\n;\n; Type: string, Default value: \n;\n; With this setting you configure Xdebug for use with Xdebug Cloud [1]. It needs\n; to match one of the tokens from your profile page [2].\n;\n; [1] https://xdebug.cloud\n; [2] https://xdebug.cloud/profile#tokens\n;\n; Your IDE needs to be configured with the same token for Xdebug and your IDE to\n; communicate through Xdebug Cloud.\n;\n; | In PhpStorm you can find this setting under:\n; | File | Settings | PHP | Debug | Xdebug Cloud for Windows and Linux\n; | PhpStorm | Preferences | PHP | Debug | Xdebug Cloud for macOS\n;\n;\n;xdebug.cloud_id = \n\n; -----------------------------------------------------------------------------\n; xdebug.collect_assignments\n;\n; Type: boolean, Default value: false\n;\n; This setting, defaulting to 0, controls whether Xdebug should add variable\n; assignments to function traces. Assign-by-var ( ``=&``) assignments are\n; included too.\n;\n;\n;xdebug.collect_assignments = false\n\n; -----------------------------------------------------------------------------\n; xdebug.collect_params\n;\n; Introduced in version 3.3\n;\n; Type: boolean, Default value: true\n;\n; If enabled (default), files created with the Function Trace feature will\n; include all arguments to functions and methods.\n;\n; When disabled, the argument to each function and method will not be present in\n; the trace files.\n;\n;\n;xdebug.collect_params = true\n\n; -----------------------------------------------------------------------------\n; xdebug.collect_return\n;\n; Type: boolean, Default value: false\n;\n; This setting, defaulting to 0, controls whether Xdebug should write the return\n; value of function calls to the trace files.\n;\n;\n;xdebug.collect_return = false\n\n; -----------------------------------------------------------------------------\n; xdebug.connect_timeout_ms\n;\n; Type: integer, Default value: 200\n;\n; The amount of time in milliseconds that Xdebug will wait for on an IDE to\n; acknowledge an incoming debugging connection. The default value of 200 ms\n; should in most cases be enough. In case you often get dropped debugging\n; requests, perhaps because you have a high latency network, or a development\n; box far away from your IDE, or have a slow firewall, then you can should\n; increase this value.\n;\n; Please note that increasing this value might mean that your requests seem to\n; 'hang' in case Xdebug tries to establish a connection, but your IDE is not\n; listening.\n;\n;\n;xdebug.connect_timeout_ms = 200\n\n; -----------------------------------------------------------------------------\n; xdebug.discover_client_host\n;\n; Type: boolean, Default value: false\n;\n; If enabled, Xdebug will first try to connect to the client that made the HTTP\n; request. It checks the ``$_SERVER['HTTP_X_FORWARDED_FOR']`` and\n; ``$_SERVER['REMOTE_ADDR']`` variables to find out which hostname or IP address\n; to use.\n;\n; If xdebug.client_discovery_header is configured, then the ``$_SERVER``\n; variable with that configured name will be checked instead of the default\n; variables.\n;\n; If Xdebug can not connect to a debugging client as found in one of the HTTP\n; headers, it will fall back to the hostname or IP address as configured by the\n; xdebug.client_host setting.\n;\n; This setting does not apply for debugging through the CLI, as the ``$_SERVER``\n; header variables are not available there.\n;\n; .. note::\n;\n;    This setting can additionally be configured through the\n;    ``XDEBUG_CONFIG``environment variable [1]. [1]\n;    /docs/all_settings#XDEBUG_CONFIG\n;\n; .. warning::\n;\n;    Please note that there is no filter available, and anybody who can connect\n;    to the webserver will then be able to start a debugging session, even if\n;    their address does not match xdebug.client_host.\n;\n;\n;xdebug.discover_client_host = false\n\n; -----------------------------------------------------------------------------\n; xdebug.dump.*\n;\n; Type: string, Default value: Empty\n;\n; * can be any of COOKIE, FILES, GET, POST, REQUEST, SERVER, SESSION. These\n; seven settings control which data from the superglobals is shown when an error\n; situation occurs.\n;\n; Each of those php.ini setting can consist of a comma separated list of\n; variables from this superglobal to dump, or ``*`` for all of them. Make sure\n; you do not add spaces in this setting.\n;\n; In order to dump the REMOTE_ADDR and the REQUEST_METHOD when an error occurs,\n; and all GET parameters, add these settings:\n;\n;     xdebug.dump.SERVER = REMOTE_ADDR,REQUEST_METHOD\n;     xdebug.dump.GET = *\n;\n;\n;xdebug.dump.* = Empty\n\n; -----------------------------------------------------------------------------\n; xdebug.dump_globals\n;\n; Type: boolean, Default value: true\n;\n; When this setting is set to ``true``, Xdebug adds the values of the super\n; globals as configured through the xdebug.dump.* to on-screen stack traces and\n; the error log (if enabled).\n;\n;\n;xdebug.dump_globals = true\n\n; -----------------------------------------------------------------------------\n; xdebug.dump_once\n;\n; Type: boolean, Default value: true\n;\n; Controls whether the values of the superglobals should be dumped on all error\n; situations (set to 0) or only on the first (set to 1).\n;\n;\n;xdebug.dump_once = true\n\n; -----------------------------------------------------------------------------\n; xdebug.dump_undefined\n;\n; Type: boolean, Default value: false\n;\n; If you want to dump undefined values from the superglobals you should set this\n; setting to 1, otherwise leave it set to 0.\n;\n;\n;xdebug.dump_undefined = false\n\n; -----------------------------------------------------------------------------\n; xdebug.file_link_format\n;\n; Type: string, Default value: \n;\n; This setting determines the format of the links that are made in the display\n; of stack traces where file names are used. This allows IDEs to set up a\n; link-protocol that makes it possible to go directly to a line and file by\n; clicking on the filenames that Xdebug shows in stack traces. An example format\n; might look like:\n;\n;     myide://%f@%l\n;\n; The possible format specifiers are:\n;\n; =========  ===============\n; Specifier  Meaning\n; =========  ===============\n; %f         the filename\n; ---------  ---------------\n; %l         the line number\n; =========  ===============\n;\n; For various IDEs/OSses there are some instructions listed on how to make this\n; work:\n;\n; --------\n; PhpStorm\n; --------\n;\n; In the configuration file, add the following line, including the single\n; quotes. This uses PhpStorm's REST API.\n;\n;     xdebug.file_link_format='javascript: var r = new XMLHttpRequest; r.open(\"get\", \"http://localhost:63342/api/file/%f:%l\");r.send()'\n;\n;\n; ----------------\n; Firefox on Linux\n; ----------------\n;\n; - Open\n;\n;   about:config\n;\n; - Add a new boolean setting \"network.protocol-handler.expose.xdebug\" and set\n;   it to \"false\"\n;\n; - Add the following into a shell script\n;\n;   ``~/bin/ff-xdebug.sh``:\n;\n;     #! /bin/sh\n;\n;     f=`echo $1 | cut -d @ -f 1 | sed 's/xdebug:\\/\\///'`\n;     l=`echo $1 | cut -d @ -f 2`\n;\n;   Add to that one of (depending whether you have komodo, gvim or netbeans):\n;\n;   - komodo $f -l $l\n;\n;   - gvim --remote-tab +$l $f\n;\n;   - netbeans \"$f:$l\"\n;\n; - Make the script executable with\n;\n; chmod +x ~/bin/ff-xdebug.sh\n;\n; - Set the xdebug.file_link_format setting to\n;\n; xdebug://%f@%l\n;\n; --------------------\n; Windows and Netbeans\n; --------------------\n;\n; - Create the file\n;\n;   ``netbeans.bat`` and save it in your path ( ``C:\\Windows`` will work):\n;\n;     @echo off\n;     setlocal enableextensions enabledelayedexpansion\n;     set NETBEANS=%1\n;     set FILE=%~2\n;     set FILE=!FILE:%%5C=\\!\n;     %NETBEANS% --nosplash --console suppress --open \"%FILE:~19%\"\n;     nircmd win activate process netbeans.exe\n;\n;   **Note:** Remove the last line if you don't have ``nircmd``.\n;\n; - Save the following code as\n;\n;   ``netbeans_protocol.reg``:\n;\n;     Windows Registry Editor Version 5.00\n;\n;     [HKEY_CLASSES_ROOT\\netbeans]\n;     \"URL Protocol\"=\"\"\n;     @=\"URL:Netbeans Protocol\"\n;\n;     [HKEY_CLASSES_ROOT\\netbeans\\DefaultIcon]\n;     @=\"\\\"C:\\\\Program Files\\\\NetBeans 7.1.1\\\\bin\\\\netbeans.exe,1\\\"\"\n;\n;     [HKEY_CLASSES_ROOT\\netbeans\\shell]\n;\n;     [HKEY_CLASSES_ROOT\\netbeans\\shell\\open]\n;\n;     [HKEY_CLASSES_ROOT\\netbeans\\shell\\open\\command]\n;     @=\"\\\"C:\\\\Windows\\\\netbeans.bat\\\" \\\"C:\\\\Program Files\\\\NetBeans 7.1.1\\\\bin\\\\netbeans.exe\\\" \\\"%1\\\"\"\n;\n;   **Note:** Make sure to change the path to Netbeans (twice), as well as the\n;   ``netbeans.bat`` batch file if you saved it somewhere else than\n;   ``C:\\Windows\\``.\n;\n; - Double click on the\n;\n;   ``netbeans_protocol.reg`` file to import it into the registry.\n;\n; - Set the xdebug.file_link_format setting to\n;\n; xdebug.file_link_format =\n;     \"netbeans://open/?f=%f:%l\"\n;\n;\n;xdebug.file_link_format = \n\n; -----------------------------------------------------------------------------\n; xdebug.filename_format\n;\n; Type: string, Default value: ...%s%n\n;\n; This setting determines the format with which Xdebug renders filenames in HTML\n; stack traces (default: ``...%s%n``) and location information through the\n; overloaded xdebug_var_dump() (default: ``%f``).\n;\n; The possible format specifiers are listed in this table. The example output is\n; rendered according to the full path\n; ``/var/www/vendor/mail/transport/mta.php``.\n;\n; =========  ==============================================  ===========================================================\n; Specifier  Meaning                                         Example Output\n; =========  ==============================================  ===========================================================\n; %a         Ancester: Two directory elements and filename   mail/transport/mta.php\n; ---------  ----------------------------------------------  -----------------------------------------------------------\n; %f         Full path                                       /var/www/vendor/mail/transport/mta.php\n; ---------  ----------------------------------------------  -----------------------------------------------------------\n; %n         Name: Only the file name                        mta.php\n; ---------  ----------------------------------------------  -----------------------------------------------------------\n; %p         Parent: One directory element and the filename  transport/mta.php\n; ---------  ----------------------------------------------  -----------------------------------------------------------\n; %s         Directory separator                             /\n;                                                            on Linux, OSX and other Unix-like systems, ``\\`` on Windows\n; =========  ==============================================  ===========================================================\n;\n;\n;xdebug.filename_format = ...%s%n\n\n; -----------------------------------------------------------------------------\n; xdebug.force_display_errors\n;\n; Type: integer, Default value: 0\n;\n; If this setting is set to ``1`` then errors will **always** be displayed, no\n; matter what the setting of PHP's display_errors [1] is.\n;\n; [1] https://www.php.net/manual/errorfunc.configuration.php#ini.display-errors\n;\n;\n;xdebug.force_display_errors = 0\n\n; -----------------------------------------------------------------------------\n; xdebug.force_error_reporting\n;\n; Type: integer, Default value: 0\n;\n; This setting is a bitmask, like error_reporting [1]. This bitmask will be\n; logically ORed with the bitmask represented by error_reporting [2] to dermine\n; which errors should be displayed. This setting can only be made in php.ini and\n; allows you to force certain errors from being shown no matter what an\n; application does with ini_set() [3].\n;\n; [1] https://www.php.net/manual/errorfunc.configuration.php#ini.error-reporting\n; [2] https://www.php.net/manual/errorfunc.configuration.php#ini.error-reporting\n; [3] https://www.php.net/manual/function.ini-set.php\n;\n;\n;xdebug.force_error_reporting = 0\n\n; -----------------------------------------------------------------------------\n; xdebug.gc_stats_output_name\n;\n; Type: string, Default value: gcstats.%p\n;\n; This setting determines the name of the file that is used to dump garbage\n; collection statistics into. The setting specifies the format with format\n; specifiers, very similar to sprintf() and strftime(). There are several format\n; specifiers that can be used to format the file name.\n;\n; See the xdebug.trace_output_name documentation for the supported specifiers.\n;\n;\n;xdebug.gc_stats_output_name = gcstats.%p\n\n; -----------------------------------------------------------------------------\n; xdebug.halt_level\n;\n; Type: integer, Default value: 0\n;\n; This setting allows you to configure a mask that determines whether, and\n; which, notices and/or warnings get converted to errors. You can configure\n; notices and warnings that are generated by PHP, and notices and warnings that\n; you generate yourself (by means of trigger_error()). For example, to convert\n; the warning of strlen() (without arguments) to an error, you would do:\n;\n;     ini_set('xdebug.halt_level', E_WARNING);\n;     strlen();\n;     echo \"Hi!\\n\";\n;\n; Which will then result in the showing of the error message, and the abortion\n; of the script. ``echo \"Hi!\\n\";`` will not be executed.\n;\n; The setting is a bit mask, so to convert all notices and warnings into errors\n; for all applications, you can set this in php.ini:\n;\n;     xdebug.halt_level=E_WARNING|E_NOTICE|E_USER_WARNING|E_USER_NOTICE\n;\n; The bitmask only supports the four level that are mentioned above.\n;\n;\n;xdebug.halt_level = 0\n\n; -----------------------------------------------------------------------------\n; xdebug.idekey\n;\n; Type: string, Default value: *complex*\n;\n; Controls which IDE Key Xdebug should pass on to the debugging client or proxy.\n; The IDE Key is only important for use with the DBGp Proxy Tool, although some\n; IDEs are incorrectly picky as to what its value is.\n;\n; The default is based on the ``DBGP_IDEKEY`` environment setting. If it is not\n; present, the default falls back to an empty string.\n;\n; If this setting is set to a non-empty string, it selects its value over\n; ``DBGP_IDEKEY`` environment variable as default value.\n;\n; The internal IDE Key also gets updated through debugging session management\n; and overrides the value of this setting as is explained in the Step Debugging\n; documentation.\n;\n; .. note::\n;\n;    This setting can additionally be configured through the\n;    ``XDEBUG_CONFIG``environment variable [1]. [1]\n;    /docs/all_settings#XDEBUG_CONFIG\n;\n;\n;xdebug.idekey = *complex*\n\n; -----------------------------------------------------------------------------\n; xdebug.log\n;\n; Type: string, Default value: \n;\n; Configures Xdebug's log file.\n;\n; Xdebug will log to this file all file creations issues, Step Debugging\n; connection attempts, failures, and debug communication.\n;\n; Enable this functionality by setting the value to a absolute path. Make sure\n; that the system user that PHP runs at (such as ``www-data`` if you are running\n; with Apache) can create and write to the file.\n;\n; The file is opened in append-mode, and will therefore not be overwritten by\n; default. There is no concurrency protection available.\n;\n; The log file will include any attempt that Xdebug makes to connect to an IDE:\n;\n;     [2693358] Log opened at 2020-09-02 07:19:09.616195\n;     [2693358] [Step Debug] INFO: Connecting to configured address/port: localhost:9003.\n;     [2693358] [Step Debug] ERR: Could not connect to debugging client. Tried: localhost:9003 (through xdebug.client_host/xdebug.client_port).\n;     [2693358] [Profiler] ERR: File '/foo/cachegrind.out.2693358' could not be opened.\n;     [2693358] [Profiler] WARN: /foo: No such file or directory\n;     [2693358] [Tracing] ERR: File '/foo/trace.1485761369' could not be opened.\n;     [2693358] [Tracing] WARN: /foo: No such file or directory\n;     [2693358] Log closed at 2020-09-02 07:19:09.617510\n;\n; It includes the opening time ( ``2020-09-02 07:19:09.616195``), the\n; IP/Hostname and port Xdebug is trying to connect to ( ``localhost:9003``), and\n; whether it succeeded ( ``Connected to client``). The number in brackets (\n; ``[2693358]``) is the Process ID.\n;\n; It includes:\n;\n; [2693358]\n;     process ID in brackets\n;\n; 2020-09-02 07:19:09.616195\n;     opening time\n;\n; For Step Debugging:\n;\n;     INFO: Connecting to configured address/port: localhost:9003.\n;     ERR: Could not connect to debugging client. Tried: localhost:9003 (through xdebug.client_host/xdebug.client_port).\n;\n; For Profiling:\n;\n;     ERR: File '/foo/cachegrind.out.2693358' could not be opened.\n;     WARN: /foo: No such file or directory\n;\n; For Function Trace:\n;\n;     ERR: File '/foo/trace.1485761369' could not be opened.\n;     WARN: /foo: No such file or directory\n;\n; All warnings and errors are described on the Description of errors page, with\n; detailed instructions on how to resolve the problem, if possible. All errors\n; are always logged through PHP's internal logging mechanism (configured with\n; error_log [1] in ``php.ini``). All warnings and errors also show up in the\n; diagnostics log that you can view by calling xdebug_info().\n;\n; [1] https://www.php.net/manual/en/errorfunc.configuration.php#ini.error-log\n;\n; ---------------------------\n; Step Debugger Communication\n; ---------------------------\n;\n; The debugging log can also log the communication between Xdebug and an IDE.\n; This communication is in XML, and starts with the ``<init`` XML element:\n;\n;     <init\n;         xmlns=\"urn:debugger_protocol_v1\" xmlns:xdebug=\"https://xdebug.org/dbgp/xdebug\"\n;         fileuri=\"file:///home/httpd/www.xdebug.org/html/router.php\"\n;         language=\"PHP\" xdebug:language_version=\"7.4.11-dev\"\n;         protocol_version=\"1.0\" appid=\"2693358\" idekey=\"XDEBUG_ECLIPSE\">\n;             <engine version=\"3.0.0-dev\"><![CDATA[Xdebug]]></engine>\n;             <author><![CDATA[Derick Rethans]]></author>\n;             <url><![CDATA[https://xdebug.org]]></url>\n;             <copyright><![CDATA[Copyright (c) 2002-2020 by Derick Rethans]]></copyright>\n;     </init>\n;\n; The ``fileuri`` attribute lists the entry point of your application, which can\n; be useful to compare to ``breakpoint_set`` commands to see if path mappings\n; are set-up correctly.\n;\n; Beyond the ``<init`` element, you will find the configuration of features [1]:\n;\n; [1] /docs/dbgp#feature-names\n;\n;     <- feature_set -i 4 -n extended_properties -v 1\n;     -> <response\n;            xmlns=\"urn:debugger_protocol_v1\" xmlns:xdebug=\"https://xdebug.org/dbgp/xdebug\"\n;            command=\"feature_set\" transaction_id=\"4\" feature=\"extended_properties\" success=\"1\">\n;        </response>\n;\n; And continuation commands [1]:\n;\n; [1] /docs/dbgp#continuation-commands\n;\n;     <- step_into -i 9\n;     -> <response\n;            xmlns=\"urn:debugger_protocol_v1\" xmlns:xdebug=\"https://xdebug.org/dbgp/xdebug\"\n;            command=\"step_into\" transaction_id=\"9\"\n;            status=\"break\" reason=\"ok\">\n;                <xdebug:message filename=\"file:///home/httpd/www.xdebug.org/html/router.php\" lineno=\"3\">\n;                </xdebug:message>\n;        </response>\n;\n; You can read about DBGP - A common debugger protocol specification at its\n; dedicated documation page.\n;\n; The xdebug.log_level setting controls how much information is logged.\n;\n; .. warning::\n;\n;    Many Linux distributions now use systemd, which implements **private tmp**\n;    directories. This means that when PHP is run through a web server or as\n;    PHP-FPM, the ``/tmp`` directory is prefixed with something akin to:\n;\n;     /tmp/systemd-private-ea3cfa882b4e478993e1994033fc5feb-apache.service-FfWZRg\n;\n;\n; .. note::\n;\n;    This setting can additionally be configured through the\n;    ``XDEBUG_CONFIG``environment variable [1]. [1]\n;    /docs/all_settings#XDEBUG_CONFIG\n;\n;\n;xdebug.log = \n\n; -----------------------------------------------------------------------------\n; xdebug.log_level\n;\n; Type: integer, Default value: 7\n;\n; Configures which logging messages should be added to the log file.\n;\n; The log file is configured with the xdebug.log setting.\n;\n; The following levels are supported:\n;\n; =====  =============  ================================\n; Level  Name           Example\n; =====  =============  ================================\n; 0      Criticals      Errors in the configuration\n; -----  -------------  --------------------------------\n; 1      Errors         Connection errors\n; -----  -------------  --------------------------------\n; 3      Warnings       Connection warnings\n; -----  -------------  --------------------------------\n; 5      Communication  Protocol messages\n; -----  -------------  --------------------------------\n; **7**  Information    Information while connecting\n; -----  -------------  --------------------------------\n; 10     Debug          Breakpoint resolving information\n; =====  =============  ================================\n;\n; Criticals, errors, and warnings always show up in the diagnostics log that you\n; can view by calling xdebug_info().\n;\n; Criticals and errors are additionally logged through PHP's internal logging\n; mechanism (configured with error_log [1] in ``php.ini``).\n;\n; [1] https://www.php.net/manual/en/errorfunc.configuration.php#ini.error-log\n;\n; .. note::\n;\n;    This setting can additionally be configured through the\n;    ``XDEBUG_CONFIG``environment variable [1]. [1]\n;    /docs/all_settings#XDEBUG_CONFIG\n;\n;\n;xdebug.log_level = 7\n\n; -----------------------------------------------------------------------------\n; xdebug.max_nesting_level\n;\n; Type: integer, Default value: 512\n;\n; Controls the protection mechanism for infinite recursion protection. The value\n; of this setting is the maximum level of nested functions that are allowed\n; before the script will be aborted.\n;\n; When the maximum nesting level is reached, an \"Error [1]\" exception is thrown.\n;\n; [1] https://www.php.net/manual/class.error.php\n;\n; Before Xdebug 3.3, the default value was ``256``.\n;\n;\n;xdebug.max_nesting_level = 512\n\n; -----------------------------------------------------------------------------\n; xdebug.max_stack_frames\n;\n; Type: integer, Default value: -1\n;\n; Controls how many stack frames are shown in stack traces, both on the command\n; line during PHP error stack traces, as well as in the browser for HTML traces.\n;\n;\n;xdebug.max_stack_frames = -1\n\n; -----------------------------------------------------------------------------\n; xdebug.mode\n;\n; Type: string, Default value: develop\n;\n; This setting controls which Xdebug features are enabled.\n;\n; .. note::\n;\n;    This setting can only be set in ``php.ini`` or files like ``99-xdebug.ini``\n;    that are read when a PHP process starts (directly, or through php-fpm). You\n;    can not set this value in ``.htaccess`` and ``.user.ini`` files, which are\n;    read per-request, nor through ``php_admin_value`` as used in Apache VHOSTs\n;    and PHP-FPM pools.\n;\n; The following values are accepted:\n;\n; off\n;     Nothing is enabled. Xdebug does no work besides checking whether\n;     functionality is enabled. Use this setting if you want close to 0\n;     overhead.\n;\n; develop\n;     Enables Development Helpers including the overloaded var_dump().\n;\n; coverage\n;     Enables Code Coverage Analysis to generate code coverage reports, mainly\n;     in combination with\n;\n;     PHPUnit [1].\n;\n; debug\n;     Enables Step Debugging. This can be used to step through your code while\n;     it is running, and analyse values of variables.\n;\n; gcstats\n;     Enables Garbage Collection Statistics to collect statistics about PHP's\n;     Garbage Collection Mechanism.\n;\n; profile\n;     Enables Profiling, with which you can analyse performance bottlenecks with\n;     tools like\n;\n;     KCacheGrind [2].\n;\n; trace\n;     Enables the Function Trace feature, which allows you record every function\n;     call, including arguments, variable assignment, and return value that is\n;     made during a request to a file.\n;\n; You can enable multiple modes at the same time by comma separating their\n; identifiers as value to xdebug.mode: ``xdebug.mode=develop,trace``.\n;\n; [1] https://phpunit.readthedocs.io/en/9.0/code-coverage-analysis.html\n; [2] /docs/profiler#kcachegrind\n;\n; --------------------------------\n; XDEBUG_MODE environment variable\n; --------------------------------\n;\n; You can also set Xdebug's mode by setting the ``XDEBUG_MODE`` environment\n; variable on the command-line; this will take precedence over the xdebug.mode\n; setting, but will not change the value of the xdebug.mode setting.\n;\n; .. warning::\n;\n;    Some web servers have a configuration option to prevent environment\n;    variables from being propagated to PHP and Xdebug. For example, PHP-FPM has\n;    a ``clear_env`` [1] configuration setting that is ``on`` by default, which\n;    you will need to turn ``off`` if you want to use ``XDEBUG_MODE``. Make sure\n;    that your web server does not clean the environment, or specifically allows\n;    the ``XDEBUG_MODE`` environment variable to be passed on. [1]\n;    https://www.php.net/manual/en/install.fpm.configuration.php#clear-env\n;\n;\n;xdebug.mode = develop\n\n; -----------------------------------------------------------------------------\n; xdebug.output_dir\n;\n; Type: string, Default value: /tmp\n;\n; The directory where Xdebug will write tracing, profiling, and garbage\n; collection statistics to. This directory needs to be writable for the system\n; user with which PHP is running.\n;\n; This setting can be changed in ``php.ini``, ``.htaccess`` (and equivalent\n; files), and within a PHP file with ``ini_set()``.\n;\n; In some cases (when profiling, or when xdebug.start_with_request= ``yes`` with\n; tracing), Xdebug creates the file before the script runs. In that case,\n; changes made through ``ini_set()`` will not be taken into account.\n;\n; .. note::\n;\n;    This setting can additionally be configured through the\n;    ``XDEBUG_CONFIG``environment variable [1]. [1]\n;    /docs/all_settings#XDEBUG_CONFIG\n;\n;\n;xdebug.output_dir = /tmp\n\n; -----------------------------------------------------------------------------\n; xdebug.profiler_append\n;\n; Type: integer, Default value: 0\n;\n; When this setting is set to 1, profiler files will not be overwritten when a\n; new request would map to the same file (depending on the\n; xdebug.profiler_output_name setting. Instead the file will be appended to with\n; the new profile.\n;\n;\n;xdebug.profiler_append = 0\n\n; -----------------------------------------------------------------------------\n; xdebug.profiler_output_name\n;\n; Type: string, Default value: cachegrind.out.%p\n;\n; This setting determines the name of the file that is used to dump traces into.\n; The setting specifies the format with format specifiers, very similar to\n; sprintf() and strftime(). There are several format specifiers that can be used\n; to format the file name.\n;\n; See the xdebug.trace_output_name documentation for the supported specifiers.\n;\n; .. note::\n;\n;    This setting can additionally be configured through the\n;    ``XDEBUG_CONFIG``environment variable [1]. [1]\n;    /docs/all_settings#XDEBUG_CONFIG\n;\n;\n;xdebug.profiler_output_name = cachegrind.out.%p\n\n; -----------------------------------------------------------------------------\n; xdebug.scream\n;\n; Type: boolean, Default value: false\n;\n; If this setting is 1, then Xdebug will disable the @ (shut-up) operator so\n; that notices, warnings and errors are no longer hidden.\n;\n;\n;xdebug.scream = false\n\n; -----------------------------------------------------------------------------\n; xdebug.show_error_trace\n;\n; Type: integer, Default value: 0\n;\n; When this setting is set to 1, Xdebug will show a stack trace whenever an\n; Error is raised - even if this Error is actually caught.\n;\n;\n;xdebug.show_error_trace = 0\n\n; -----------------------------------------------------------------------------\n; xdebug.show_exception_trace\n;\n; Type: integer, Default value: 0\n;\n; When this setting is set to 1, Xdebug will show a stack trace whenever an\n; Exception or Error is raised - even if this Exception or Error is actually\n; caught.\n;\n; Error 'exceptions' were introduced in PHP 7.\n;\n;\n;xdebug.show_exception_trace = 0\n\n; -----------------------------------------------------------------------------\n; xdebug.show_local_vars\n;\n; Type: integer, Default value: 0\n;\n; When this setting is set to something != 0 Xdebug's generated stack dumps in\n; error situations will also show all variables in the top-most scope. Beware\n; that this might generate a lot of information, and is therefore turned off by\n; default.\n;\n;\n;xdebug.show_local_vars = 0\n\n; -----------------------------------------------------------------------------\n; xdebug.start_upon_error\n;\n; Type: string, Default value: default\n;\n; Step Debugging can be activated when a PHP Notice or Warning is emitted, or\n; when a Throwable [1] (Exception/Error) is thrown, depending on the value of\n; this setting:\n;\n; [1] https://www.php.net/manual/en/class.throwable.php\n;\n; yes\n;     Initialise a debugging session when a PHP Notice or Warning is emitted, or\n;     when a Throwable is thrown.\n;\n; no\n; default\n;     Do not start a debugging session upon an error situation.\n;\n;\n;xdebug.start_upon_error = default\n\n; -----------------------------------------------------------------------------\n; xdebug.start_with_request\n;\n; Type: string, Default value: default\n;\n; A Function Trace, Garbage Collection Statistics, Profiling, or Step Debugging\n; can be activated at the start of a PHP request. Whether this happens depends\n; on the value of this setting:\n;\n; yes\n;     The functionality starts when the PHP request starts, and before any PHP\n;     code is run.\n;\n;     For example xdebug.mode= ``trace`` and xdebug.start_with_request= ``yes``\n;     starts a Function Trace for the whole request.\n;\n; no\n;     The functionality does not get activated when the request starts.\n;\n;     You can still start a Function Trace with xdebug_start_trace(), or Garbage\n;     Collection Statistics with xdebug_start_gcstats().\n;\n;     Step Debugging and Profiling will never activate with this value.\n;\n; trigger\n;     The functionality only gets activated when a specific trigger is present\n;     when the request starts.\n;\n;     The name of the trigger is ``XDEBUG_TRIGGER``, and Xdebug checks for its\n;     presence in either ``$_ENV`` (environment variable), ``$_GET`` or\n;     ``$_POST`` variable, or ``$_COOKIE`` (HTTP cookie name).\n;\n;     There is a legacy fallback to a functionality specific trigger name:\n;     ``XDEBUG_PROFILE`` (for Profiling), ``XDEBUG_TRACE`` (for a Function\n;     Trace), and ``XDEBUG_SESSION`` (for Step Debugging).\n;\n;     There is another legacy trigger for Step Debugging only. If you set the\n;     ``XDEBUG_CONFIG`` environment variable to any value, then the step\n;     debugger will also get activated.\n;\n;     Debug session management for Step Debugging is also available through\n;     ``XDEBUG_SESSION_START``.\n;\n;     With xdebug.trigger_value you can control which specific trigger value\n;     will activate the trigger. If xdebug.trigger_value is set to an empty\n;     string, **any** value will be accepted.\n;\n;     In this mode it is also possible to activate Step Debugging with\n;     xdebug_break().\n;\n; default\n;     The ``default`` value depends on xdebug.mode:\n;\n;     - **debug**      : ``trigger``\n;\n;     - **gcstats**      : ``no``\n;\n;     - **profile**      : ``yes``\n;\n;     - **trace**      : ``trigger``\n;\n;\n;xdebug.start_with_request = default\n\n; -----------------------------------------------------------------------------\n; xdebug.trace_format\n;\n; Type: integer, Default value: 0\n;\n; The format of the trace file.\n;\n; =====  ==============================================================================\n; Value  Description\n; =====  ==============================================================================\n; 0      shows a human readable indented trace file with:\n;\n;        *time index*, *memory usage*, *memory delta*, *level*, *function name*,\n;        *function parameters*, *filename* and *line number*.\n; -----  ------------------------------------------------------------------------------\n; 1      writes a computer readable format which has two different records. There are\n;        different records for entering a stack frame, and leaving a stack frame. The\n;        table below lists the fields in each type of record. Fields are tab separated.\n; -----  ------------------------------------------------------------------------------\n; 2      writes a trace formatted in (simple) HTML.\n; =====  ==============================================================================\n;\n; Fields for the computerized format:\n;\n; ===========  =====  ==========  ==========  ==========  ============  =============  =========================================  ===================================  ========  ===========  ================  ============================================================\n; Record type  1      2           3           4           5             6              7                                          8                                    9         10           11                12 - ...\n; ===========  =====  ==========  ==========  ==========  ============  =============  =========================================  ===================================  ========  ===========  ================  ============================================================\n; Entry        level  function #  always '0'  time index  memory usage  function name  user-defined (1) or internal function (0)  name of the include or require file  filename  line number  no. of arguments  arguments (as many as specified in field 11) - tab separated\n; -----------  -----  ----------  ----------  ----------  ------------  -------------  -----------------------------------------  -----------------------------------  --------  -----------  ----------------  ------------------------------------------------------------\n; Exit         level  function #  always '1'  time index  memory usage  empty\n; -----------  -----  ----------  ----------  ----------  ------------  -------------  -----------------------------------------  -----------------------------------  --------  -----------  ----------------  ------------------------------------------------------------\n; Return       level  function #  always 'R'  empty       return value  empty\n; ===========  =====  ==========  ==========  ==========  ============  =============  =========================================  ===================================  ========  ===========  ================  ============================================================\n;\n; See the introduction for Function Trace for a few examples.\n;\n;\n;xdebug.trace_format = 0\n\n; -----------------------------------------------------------------------------\n; xdebug.trace_options\n;\n; Type: integer, Default value: 0\n;\n; This settings accepts a bitfield to enable options:\n;\n; 1\n;     Trace file data will be appended to an already existing file with the same\n;     name, instead of it being overwritten.\n;\n; 2\n;     Switches the file format to a tab separated format. The format is\n;     described in the xdebug.trace_format setting as \"format 1\".\n;\n; 4\n;     Switches to a file format that shows data as an HTML table\n;\n; 8\n;     With this bit set,\n;\n;     ``.xt`` is not added automatically to the end of trace file names.\n;\n; To combine multiple flags, you can use bitwise-OR ( ``|``).\n;\n; ``xdebug.trace_options=2|8`` enables both the tab separated format, and stops\n; the addition of ``.xt`` to the end of the file name.\n;\n;\n;xdebug.trace_options = 0\n\n; -----------------------------------------------------------------------------\n; xdebug.trace_output_name\n;\n; Type: string, Default value: trace.%c\n;\n; This setting determines the name of the file that is used to dump traces into.\n; The setting specifies the format with format specifiers, very similar to\n; sprintf() and strftime(). There are several format specifiers that can be used\n; to format the file name. The '.xt' extension is always added automatically.\n;\n; The possible format specifiers are:\n;\n; =========  ======================================  =================  ====================================================\n; Specifier  Meaning                                 Example Format     Example Filename\n; =========  ======================================  =================  ====================================================\n; %c         crc32 of the current working directory  trace.%c           trace.1258863198.xt\n; ---------  --------------------------------------  -----------------  ----------------------------------------------------\n; %p         pid                                     trace.%p           trace.5174.xt\n; ---------  --------------------------------------  -----------------  ----------------------------------------------------\n; %r         random number                           trace.%r           trace.072db0.xt\n; ---------  --------------------------------------  -----------------  ----------------------------------------------------\n; %s         script name 2                           cachegrind.out.%s  cachegrind.out._home_httpd_html_test_xdebug_test_php\n; ---------  --------------------------------------  -----------------  ----------------------------------------------------\n; %t         timestamp (seconds)                     trace.%t           trace.1179434742.xt\n; ---------  --------------------------------------  -----------------  ----------------------------------------------------\n; %u         timestamp (microseconds)                trace.%u           trace.1179434749_642382.xt\n; ---------  --------------------------------------  -----------------  ----------------------------------------------------\n; %H         $_SERVER['HTTP_HOST']                   trace.%H           trace.kossu.xt\n; ---------  --------------------------------------  -----------------  ----------------------------------------------------\n; %R         $_SERVER['REQUEST_URI']                 trace.%R           trace._test_xdebug_test_php_var=1_var2=2.xt\n; ---------  --------------------------------------  -----------------  ----------------------------------------------------\n; %U         $_SERVER['UNIQUE_ID']                   trace.%U           trace.TRX4n38AAAEAAB9gBFkAAAAB.xt\n;\n;            3\n; ---------  --------------------------------------  -----------------  ----------------------------------------------------\n; %S         session_id (from $_COOKIE if set)       trace.%S           trace.c70c1ec2375af58f74b390bbdd2a679d.xt\n; ---------  --------------------------------------  -----------------  ----------------------------------------------------\n; %%         literal %                               trace.%%           trace.%%.xt\n; =========  ======================================  =================  ====================================================\n;\n; 2 This one is only available for trace file names since Xdebug 2.6.\n;\n; 3 New in version 2.2. This one is set by Apache's mod_unique_id module [1]\n;\n; [1] http://httpd.apache.org/docs/current/mod/mod_unique_id.html\n;\n;\n;xdebug.trace_output_name = trace.%c\n\n; -----------------------------------------------------------------------------\n; xdebug.trigger_value\n;\n; Type: string, Default value: \"\"\n;\n; This setting can be used when xdebug.start_with_request is set to ``trigger``,\n; which is the default for Step Debugging and Function Trace.\n;\n; In ``trigger`` mode, Xdebug will only start its functionality when the\n; ``XDEBUG_TRIGGER`` is set in the environment, or when the ``XDEBUG_TRIGGER``\n; GET, POST, or COOKIE variable is set.\n;\n; The legacy names ``XDEBUG_SESSION`` (for Step Debugging), ``XDEBUG_PROFILE``\n; (for Profiling), and ``XDEBUG_TRACE`` (for Function Trace) can also be used\n; instead of ``XDEBUG_TRIGGER``.\n;\n; Normally, Xdebug does not look at which value is actually used. If this\n; setting is set to a non-empty string, then Xdebug will only trigger if the\n; value matches the value of this setting.\n;\n; With the following settings:\n;\n;     xdebug.mode=profile\n;     xdebug.start_with_request=trigger\n;     xdebug.trigger_value=StartProfileForMe\n;\n; Xdebug's profiler will only start when either the environment variable\n; ``XDEBUG_TRIGGER`` is set to ``StartProfileForMe``, the GET or POST variable\n; ``XDEBUG_TRIGGER`` is set to ``StartProfileForMe``, or when the cookie\n; ``XDEBUG_TRIGGER`` has the value ``StartProfileForMe``.\n;\n; From Xdebug 3.1, it is possible to configure multiple values by using a comma\n; separated list. In that case, Xdebug will trigger if the supplied value\n; matches any of the entries that are configured through this setting:\n;\n;     xdebug.trigger_value=StartDebuggerForMe,StartDebuggerForYou\n;\n; See also:\n;\n; xdebug.start_with_request#trigger\n;     For how the triggering mechanism works, and which environment and server\n;     variables Xdebug acts on.\n;\n;\n;xdebug.trigger_value = \"\"\n\n; -----------------------------------------------------------------------------\n; xdebug.use_compression\n;\n; Introduced in version 3.1\n;\n; Type: boolean, Default value: true\n;\n; If enabled, the Function Trace and Profiling features will create GZip\n; compressed files as output. This reduces diskspace.\n;\n; If GZip compression is not supported by Xdebug, because it was not compiled\n; in, then Xdebug will add a warning to its log and xdebug_info() diagnostics\n; section.\n;\n; It is enabled by default if Xdebug has GZip support, and disable if Xdebug\n; does not have GZip support.\n;\n; The QCacheGrind tool that you can use to visualise profiling information does\n; not support reading GZip compressed profile files, whereas KCacheGrind and\n; PhpStorm do. If you are a QCacheGrind user, you should set\n; xdebug.use_compression to ``false``.\n;\n;\n;xdebug.use_compression = true\n\n; -----------------------------------------------------------------------------\n; xdebug.var_display_max_children\n;\n; Type: integer, Default value: 128\n;\n; Controls the amount of array children and object's properties are shown when\n; variables are displayed with either xdebug_var_dump(), xdebug.show_local_vars\n; or when making a Function Trace.\n;\n; To disable any limitation, use *-1* as value.\n;\n; This setting does not have any influence on the number of children that is\n; send to the client through the Step Debugging feature.\n;\n;\n;xdebug.var_display_max_children = 128\n\n; -----------------------------------------------------------------------------\n; xdebug.var_display_max_data\n;\n; Type: integer, Default value: 512\n;\n; Controls the maximum string length that is shown when variables are displayed\n; with either xdebug_var_dump(), xdebug.show_local_vars or when making a\n; Function Trace.\n;\n; To disable any limitation, use *-1* as value.\n;\n; This setting does not have any influence on the number of children that is\n; send to the client through the Step Debugging feature.\n;\n;\n;xdebug.var_display_max_data = 512\n\n; -----------------------------------------------------------------------------\n; xdebug.var_display_max_depth\n;\n; Type: integer, Default value: 3\n;\n; Controls how many nested levels of array elements and object properties are\n; when variables are displayed with either xdebug_var_dump(),\n; xdebug.show_local_vars or when making a Function Trace.\n;\n; The maximum value you can select is *1023*. You can also use *-1* as value to\n; select this maximum number.\n;\n; This setting does not have any influence on the number of children that is\n; send to the client through the Step Debugging feature.\n;\n; .. warning::\n;\n;    Setting the value to a high number could potentially result in PHP using up\n;    all the available memory, so use with caution.\n;\n;\n;xdebug.var_display_max_depth = 3\n\n"
        }
      ]
    }
  ]
}