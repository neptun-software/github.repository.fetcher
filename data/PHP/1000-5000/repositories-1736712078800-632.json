{
  "metadata": {
    "timestamp": 1736712078800,
    "page": 632,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "brandonsavage/Upload",
      "stars": 1666,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.037109375,
          "content": "composer.lock\nvendor/\n.idea\n.DS_Store\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.23828125,
          "content": "language: php\n\nphp:\n  - 5.6\n  - 7.1\n  - 7.2\n  - nightly\n\nmatrix:\n  allow_failures:\n    - php: nightly\n\nbefore_script:\n  - travis_retry composer self-update\n  - travis_retry composer install --no-interaction --prefer-source\n\nscript:\n  - phpunit\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0322265625,
          "content": "Copyright (c) 2012 Josh Lockhart\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.212890625,
          "content": "# Upload\n\n[![Build Status](https://img.shields.io/travis/brandonsavage/Upload.svg?style=flat-square)](https://travis-ci.org/brandonsavage/Upload)\n[![Latest Version](https://img.shields.io/github/release/brandonsavage/Upload.svg?style=flat-square)](https://github.com/brandonsavage/Upload/releases)\n[![Total Downloads](https://img.shields.io/packagist/dt/codeguy/upload.svg?style=flat-square)](https://packagist.org/packages/codeguy/upload)\n\nThis component simplifies file validation and uploading.\n\n## Usage\n\nAssume a file is uploaded with this HTML form:\n\n```html\n<form method=\"POST\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"foo\" value=\"\"/>\n    <input type=\"submit\" value=\"Upload File\"/>\n</form>\n```\n\nWhen the HTML form is submitted, the server-side PHP code can validate and upload the file like this:\n\n```php\n<?php\n$storage = new \\Upload\\Storage\\FileSystem('/path/to/directory');\n$file = new \\Upload\\File('foo', $storage);\n\n// Optionally you can rename the file on upload\n$new_filename = uniqid();\n$file->setName($new_filename);\n\n// Validate file upload\n// MimeType List => http://www.iana.org/assignments/media-types/media-types.xhtml\n$file->addValidations(array(\n    // Ensure file is of type \"image/png\"\n    new \\Upload\\Validation\\Mimetype('image/png'),\n\n    //You can also add multi mimetype validation\n    //new \\Upload\\Validation\\Mimetype(array('image/png', 'image/gif'))\n\n    // Ensure file is no larger than 5M (use \"B\", \"K\", M\", or \"G\")\n    new \\Upload\\Validation\\Size('5M')\n));\n\n// Access data about the file that has been uploaded\n$data = array(\n    'name'       => $file->getNameWithExtension(),\n    'extension'  => $file->getExtension(),\n    'mime'       => $file->getMimetype(),\n    'size'       => $file->getSize(),\n    'md5'        => $file->getMd5(),\n    'dimensions' => $file->getDimensions()\n);\n\n// Try to upload file\ntry {\n    // Success!\n    $file->upload();\n} catch (\\Exception $e) {\n    // Fail!\n    $errors = $file->getErrors();\n}\n```\n\n## How to Install\n\nInstall composer in your project:\n\n```\ncurl -s https://getcomposer.org/installer | php\n```\n\nRequire the package with composer:\n\n```\nphp composer.phar require codeguy/upload\n```\n\n## Author\n\n[Josh Lockhart](https://github.com/codeguy)\n\n## License\n\nMIT Public License\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.6474609375,
          "content": "{\n    \"name\": \"codeguy/upload\",\n    \"type\": \"library\",\n    \"description\": \"Handle file uploads with extensible validation and storage strategies\",\n    \"keywords\": [\"upload\", \"validation\", \"file\"],\n    \"homepage\": \"http://github.com/codeguy/Upload\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Josh Lockhart\",\n            \"email\": \"info@joshlockhart.com\",\n            \"homepage\": \"https://github.com/codeguy/\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=5.6.0\",\n        \"ext-fileinfo\": \"*\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"5.*\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Upload\\\\\": \"src/Upload\" }\n    }\n}\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.615234375,
          "content": "<phpunit backupGlobals=\"true\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         syntaxCheck=\"false\"\n         bootstrap=\"tests/bootstrap.php\">\n   <testsuites>\n        <testsuite name=\"Upload Test Suite\">\n            <directory>./tests/</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist>\n            <directory>./src/Upload/</directory>\n        </whitelist>\n    </filter>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}