{
  "metadata": {
    "timestamp": 1736712060810,
    "page": 602,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jeremeamia/super_closure",
      "stars": 1721,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1865234375,
          "content": "* text=auto\n\ntests export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\n.travis.yml export-ignore\nMakefile export-ignore\nREADME.md export-ignore\nphpunit.xml.dist export-ignore\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0283203125,
          "content": "build/\nvendor/\ncomposer.lock\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.23828125,
          "content": "language: php\n\nsudo: false\n\nmatrix:\n  include:\n    - php: 5.4\n      env: PARSER_VERSION=^1.2\n    - php: 5.4\n      env: PARSER_VERSION=^2.0\n    - php: 5.5\n      env: PARSER_VERSION=^1.2\n    - php: 5.5\n      env: PARSER_VERSION=^2.0\n    - php: 5.5\n      env: PARSER_VERSION=^3.0\n    - php: 5.6\n      env: PARSER_VERSION=^1.2\n    - php: 5.6\n      env: PARSER_VERSION=^2.0\n    - php: 5.6\n      env: PARSER_VERSION=^3.0\n    - php: 7.0\n      env: PARSER_VERSION=^2.0\n    - php: 7.0\n      env: PARSER_VERSION=^3.0\n    - php: 7.0\n      env: PARSER_VERSION=^4.0\n    - php: 7.1\n      env: PARSER_VERSION=^3.0\n    - php: 7.1\n      env: PARSER_VERSION=^4.0\n    - php: 7.2\n      env: PARSER_VERSION=^3.0\n    - php: 7.2\n      env: PARSER_VERSION=^4.0\n    - php: hhvm\n      env: PARSER_VERSION=^1.2\n      dist: trusty\n    - php: hhvm\n      env: PARSER_VERSION=^2.0\n      dist: trusty\n    - php: hhvm\n      env: PARSER_VERSION=^3.0\n      dist: trusty\n  allow_failures:\n    - php: hhvm\n  fast_finish: true\n\nbefore_install:\n  - if [[ $TRAVIS_PHP_VERSION =~ ^hhvm ]]; then echo 'hhvm.jit = false' >> /etc/hhvm/php.ini ; fi\n  - composer require \"nikic/php-parser:${PARSER_VERSION}\" --no-update\n\ninstall: travis_retry composer install --no-interaction --prefer-source\n\nscript: make travis\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0576171875,
          "content": "# MIT License\n\nCopyright (c) 2010-2015 Jeremy Lindblom\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and\nassociated documentation files (the \"Software\"), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge, publish, distribute,\nsublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial\nportions of the Software.\n\n**THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\nNOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\nOF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.375,
          "content": "all: clean coverage docs\n\nclean:\n\trm -rf build/artifacts/*\n\ntest:\n\tvendor/bin/phpunit --testsuite=unit $(TEST)\n\ncoverage:\n\tvendor/bin/phpunit --testsuite=unit --coverage-html=build/artifacts/coverage $(TEST)\n\ncoverage-show:\n\topen build/artifacts/coverage/index.html\n\ninteg:\n\tvendor/bin/phpunit --debug --testsuite=integ $(TEST)\n\nperf:\n\tphp tests/perf.php\n\ntravis:\n\tvendor/bin/phpunit\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.40625,
          "content": "# PHP SuperClosure\n\n[![Total Downloads](https://img.shields.io/packagist/dt/jeremeamia/superclosure.svg?style=flat)][1]\n[![Build Status](https://img.shields.io/travis/jeremeamia/super_closure/master.svg?style=flat)][2]\n[![MIT License](https://img.shields.io/packagist/l/jeremeamia/superclosure.svg?style=flat)][10]\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/jeremeamia/super_closure)\n\nA PHP Library for serializing closures and anonymous functions.\n\n---\n\n## No Longer Maintained\n\nThis software is no longer maintained. Consider using [opis/closure][11] instead.\n\nThe rest of the README will remain intact as it was prior to the software being abandoned.\n\n---\n\n## Introduction\n\nOnce upon a time, I tried to serialize a PHP `Closure` object. As you can\nprobably guess, it doesn't work at all. In fact, you get a very specific error\nmessage from the PHP Runtime:\n\n> Uncaught exception 'Exception' with message 'Serialization of 'Closure' is\n> not allowed'\n\nEven though serializing closures is \"not allowed\" by PHP, the SuperClosure\nlibrary makes it **possible**. Here's the way you use it:\n\n```php\nuse SuperClosure\\Serializer;\n\n$serializer = new Serializer();\n\n$greeting = 'Hello';\n$hello = function ($name = 'World') use ($greeting) {\n    echo \"{$greeting}, {$name}!\\n\";\n};\n\n$hello('Jeremy');\n//> Hello, Jeremy!\n\n$serialized = $serializer->serialize($hello);\n// ...\n$unserialized = $serializer->unserialize($serialized);\n\n$unserialized('Jeremy');\n//> Hello, Jeremy!\n```\n\nYep, pretty cool, right?\n\n### Features\n\nSuperClosure comes with two different **Closure Analyzers**, which each support\ndifferent features regarding the serialization of closures. The `TokenAnalyzer`\nis not as robust as the `AstAnalyzer`, but it is around 20-25 times faster. Using\nthe table below, and keeping in mind what your closure's code looks like, you\nshould _choose the fastest analyzer that supports the features you need_.\n\n<table>\n  <thead>\n    <tr>\n      <th>Supported Features</th>\n      <th>Via <code>AstAnalyzer</code></th>\n      <th>Via <code>TokenAnalyzer</code></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        Regular closures (anonymous functions)<br>\n        <code>$fn = function (...) {...};</code>\n      </td>\n      <td>Yes</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <td>\n        Closures with context<br>\n        <code>$fn = function () use ($a, $b, ...) {...};</code>\n      </td>\n      <td>Yes</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <td>\n        Recursive closures<br>\n        <code>$fn = function () use (&$fn, ...) {...};</code>\n      </td>\n      <td>Yes</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <td>\n        Closures bound to an object<br>\n        <code>$fn = function () {$this->something(); ...};</code>\n      </td>\n      <td>Yes</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <td>\n        Closures scoped to an object<br>\n        <code>$fn = function () {self::something(); ...};</code>\n      </td>\n      <td>Yes</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <td>\n        Static closures (i.e, preserves the `static`-ness)<br>\n        <code>$fn = static function () {...};</code>\n      </td>\n      <td>Yes</td>\n      <td>--</td>\n    </tr>\n    <tr>\n      <td>\n        Closures with class name in params<br>\n        <code>$fn = function (Foo $foo) {...};</code>\n      </td>\n      <td>Yes</td>\n      <td>--</td>\n    </tr>\n    <tr>\n      <td>\n        Closures with class name in body<br>\n        <code>$fn = function () {$foo = new Foo; ...};</code>\n      </td>\n      <td>Yes</td>\n      <td>--</td>\n    </tr>\n    <tr>\n      <td>\n        Closures with magic constants<br>\n        <code>$fn = function () {$file = __FILE__; ...};</code>\n      </td>\n      <td>Yes</td>\n      <td>--</td>\n    </tr>\n    <tr>\n      <td>Performance</td>\n      <td><em>Slow</em></td>\n      <td><em>Fast</em></td>\n    </tr>\n  </tbody>\n</table>\n\n### Caveats\n\n1. For any variables used by reference (e.g., `function () use (&$vars, &$like,\n  &$these) {â€¦}`), the references are not maintained after serialization. The\n  only exception to this is recursive closure references.\n2. If you have two closures defined on a single line (why would you do this\n  anyway?), you will not be able to serialize either one since it is ambiguous\n  which closure's code should be parsed (they are _anonymous_ functions after\n  all).\n3. **Warning**: The `eval()` function is required to unserialize the closure.\n  This function is considered dangerous by many, so you will have to evaluate\n  what precautions you may need to take when using this library. You should only\n  unserialize closures retrieved from a trusted source, otherwise you are\n  opening yourself up to code injection attacks. It is a good idea sign\n  serialized closures if you plan on storing or transporting them. Read the\n  **Signing Closures** section below for details on how to do this.\n4. Cannot serialize closures that are defined within `eval()`'d code. This\n  includes re-serializing a closure that has been unserialized. \n\n### Analyzers\n\nYou can choose the analyzer you want to use when you instantiate the\n`Serializer`. If you do not specify one, the `AstAnalyzer` is used by default,\nsince it has the most capabilities.\n\n```php\nuse SuperClosure\\Serializer;\nuse SuperClosure\\Analyzer\\AstAnalyzer;\nuse SuperClosure\\Analyzer\\TokenAnalyzer;\n\n// Use the default analyzer.\n$serializer = new Serializer();\n\n// Explicitly choose an analyzer.\n$serializer = new Serializer(new AstAnalyzer());\n// OR\n$serializer = new Serializer(new TokenAnalyzer());\n```\n\nAnalyzers are also useful on their own if you are just looking to do some\nintrospection on a Closure object. Check out what is returned when using the\n`AstAnalyzer`:\n\n```php\nuse SuperClosure\\Analyzer\\AstAnalyzer;\n\nclass Calculator\n{\n    public function getAdder($operand)\n    {\n        return function ($number) use ($operand) {\n            return $number + $operand;\n        };\n    }\n}\n\n$closure = (new Calculator)->getAdder(5);\n$analyzer = new AstAnalyzer();\n\nvar_dump($analyzer->analyze($closure));\n// array(10) {\n//   'reflection' => class ReflectionFunction#5 (1) {...}\n//   'code' => string(68) \"function ($number) use($operand) {\n//     return $number + $operand;\n// };\"\n//   'hasThis' => bool(false)\n//   'context' => array(1) {\n//     'operand' => int(5)\n//   }\n//   'hasRefs' => bool(false)\n//   'binding' => class Calculator#2 (0) {...}\n//   'scope' => string(10) \"Calculator\"\n//   'isStatic' => bool(false)\n//   'ast' => class PhpParser\\Node\\Expr\\Closure#13 (2) {...}\n//   'location' => array(8) {\n//     'class' => string(11) \"\\Calculator\"\n//     'directory' => string(47) \"/Users/lindblom/Projects/{...}/SuperClosureTest\"\n//     'file' => string(58) \"/Users/lindblom/Projects/{...}/SuperClosureTest/simple.php\"\n//     'function' => string(9) \"{closure}\"\n//     'line' => int(11)\n//     'method' => string(22) \"\\Calculator::{closure}\"\n//     'namespace' => NULL\n//     'trait' => NULL\n//   }\n// }\n```\n\n### Signing Closures\n\nVersion 2.1+ of SuperClosure allows you to specify a signing key, when you \ninstantiate the Serializer. Doing this will configure your Serializer to\nsign any closures you serialize and verify the signatures of any closures\nyou unserialize. Doing this can help protect you from code injection attacks\nthat could potentially happen if someone tampered with a serialized closure.\n_Remember to keep your signing key secret_.\n\n```php\n$serializer1 = new SuperClosure\\Serializer(null, $yourSecretSigningKey);\n$data = $serializer1->serialize(function () {echo \"Hello!\\n\";});\necho $data . \"\\n\";\n// %rv9zNtTArySx/1803fgk3rPS1RO4uOPPaoZfTRWp554=C:32:\"SuperClosure\\Serializa...\n\n$serializer2 = new SuperClosure\\Serializer(null, $incorrectKey);\ntry {\n    $fn = $serializer2->unserialize($data);\n} catch (SuperClosure\\Exception\\ClosureUnserializationException $e) {\n    echo $e->getMessage() . \"\\n\";\n}\n// The signature of the closure's data is invalid, which means the serialized\n// closure has been modified and is unsafe to unserialize.\n```\n\n## Installation\n\nTo install the Super Closure library in your project using Composer, simply\nrequire the project with Composer:\n\n```bash\n$ composer require jeremeamia/superclosure\n```\n\nYou may of course manually update your require block if you so choose:\n\n```json\n{\n    \"require\": {\n        \"jeremeamia/superclosure\": \"^2.0\"\n    }\n}\n```\n\nPlease visit the [Composer homepage][7] for more information about how to use\nComposer.\n\n## Why would I need to serialize a closure?\n\nWell, since you are here looking at this README, you may already have a use case\nin mind. Even though this concept began as an experiment, there have been some\nuse cases that have come up in the wild.\n\nFor example, in a [video about Laravel and IronMQ][8] by [UserScape][9], at\nabout the 7:50 mark they show how you can push a closure onto a queue as a job\nso that it can be executed by a worker. This is nice because you do not have to\ncreate a whole class for a job that might be really simple.\n\nOr... you might have a dependency injection container or router object that is\nbuilt by writing closures. If you wanted to cache that, you would need to be\nable to serialize it.\n\nIn general, however, serializing closures should probably be avoided.\n\n## Tell me about how this project started\n\nIt all started  back in the beginning of 2010 when PHP 5.3 was starting to\ngain traction. I set out to prove that serializing a closure could be done,\ndespite that PHP wouldn't let me do it. I wrote a blog post called [Extending\nPHP 5.3 Closures with Serialization and Reflection][4] on my former employers'\nblog, [HTMList][5], showing how it could be done. I also released the code on\nGitHub.\n\nSince then, I've made a few iterations on the code, and the most recent\niterations have been more robust, thanks to the usage of the fabulous\n[nikic/php-parser][6] library.\n\n## Who is using SuperClosure?\n\n- [Laravel](https://github.com/laravel/framework) - Serializes a closure to potentially push onto a job queue.\n- [HTTP Mock for PHP](https://github.com/InterNations/http-mock) - Serialize a closure to send to remote server within\n  a test workflow.\n- [Jumper](https://github.com/kakawait/Jumper) - Serialize a closure to run on remote host via SSH.\n- [nicmart/Benchmark](https://github.com/nicmart/Benchmark) - Uses the `ClosureParser` to display a benchmarked\n  Closure's code.\n- [florianv/business](https://github.com/florianv/business) - Serializes special days to store business days definitions.\n- [zumba/json-serializer](https://github.com/zumba/json-serializer) - Serializes PHP variables into JSON format.\n- [PHP-DI](http://php-di.org/) - Compiles closure definitions into optimized PHP code.\n- Please let me know if and how your project uses Super Closure.\n\n## Alternatives\n\nThis year the [Opis Closure][11] library has been introduced, that also provides\nthe ability to serialize a closure. You should check it out as well and see\nwhich one suits your needs the best.\n\nIf you wish to export your closures as executable PHP code instead, you can check out the [brick/varexporter][12] library.\n\n[1]:  https://packagist.org/packages/jeremeamia/superclosure\n[2]:  https://travis-ci.org/jeremeamia/super_closure\n[3]:  http://packagist.org/packages/jeremeamia/SuperClosure\n[4]:  http://www.htmlist.com/development/extending-php-5-3-closures-with-serialization-and-reflection/\n[5]:  http://www.htmlist.com\n[6]:  https://github.com/nikic/PHP-Parser\n[7]:  http://getcomposer.org\n[8]:  http://vimeo.com/64703617\n[9]:  http://www.userscape.com\n[10]: https://github.com/jeremeamia/super_closure/blob/master/LICENSE.md\n[11]: https://github.com/opis/closure\n[12]: https://github.com/brick/varexporter\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.025390625,
          "content": "{\n    \"name\": \"jeremeamia/superclosure\",\n    \"type\": \"library\",\n    \"description\": \"Serialize Closure objects, including their context and binding\",\n    \"keywords\": [\"closure\", \"serialize\", \"serializable\", \"function\", \"parser\", \"tokenizer\", \"lambda\"],\n    \"homepage\": \"https://github.com/jeremeamia/super_closure\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Jeremy Lindblom\",\n            \"email\": \"jeremeamia@gmail.com\",\n            \"homepage\": \"https://github.com/jeremeamia\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=5.4\",\n        \"nikic/php-parser\": \"^1.2|^2.0|^3.0|^4.0\",\n        \"symfony/polyfill-php56\": \"^1.0\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^4.0|^5.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"SuperClosure\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"SuperClosure\\\\Test\\\\\": \"tests/\"\n        }\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"2.4-dev\"\n        }\n    }\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.4375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit bootstrap=\"./vendor/autoload.php\">\n  <testsuites>\n    <testsuite name=\"unit\">\n      <directory>./tests/Unit</directory>\n    </testsuite>\n    <testsuite name=\"integ\">\n      <directory>./tests/Integ</directory>\n    </testsuite>\n  </testsuites>\n  <filter>\n    <whitelist processUncoveredFilesFromWhitelist=\"true\">\n      <directory suffix=\".php\">./src</directory>\n    </whitelist>\n  </filter>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}