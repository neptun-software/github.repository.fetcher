{
  "metadata": {
    "timestamp": 1736711933486,
    "page": 350,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "reactphp/promise",
      "stars": 2408,
      "defaultBranch": "3.x",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1962890625,
          "content": "/.gitattributes export-ignore\n/.github/ export-ignore\n/.gitignore export-ignore\n/phpstan.neon.dist export-ignore\n/phpunit.xml.dist export-ignore\n/phpunit.xml.legacy export-ignore\n/tests/ export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0234375,
          "content": "/composer.lock\n/vendor/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.5556640625,
          "content": "# Changelog\n\n## 3.2.0 (2024-05-24)\n\n*   Feature: Improve PHP 8.4+ support by avoiding implicitly nullable type declarations.\n    (#260 by @Ayesh)\n\n*   Feature: Include previous exceptions when reporting unhandled promise rejections.\n    (#262 by @clue)\n\n*   Update test suite to improve PHP 8.4+ support.\n    (#261 by @SimonFrings)\n\n## 3.1.0 (2023-11-16)\n\n*   Feature: Full PHP 8.3 compatibility.\n    (#255 by @clue)\n\n*   Feature: Describe all callable arguments with types for `Promise` and `Deferred`.\n    (#253 by @clue)\n\n*   Update test suite and minor documentation improvements.\n    (#251 by @ondrejmirtes and #250 by @SQKo)\n\n## 3.0.0 (2023-07-11)\n\nA major new feature release, see [**release announcement**](https://clue.engineering/2023/announcing-reactphp-promise-v3).\n\n*   We'd like to emphasize that this component is production ready and battle-tested.\n    We plan to support all long-term support (LTS) releases for at least 24 months,\n    so you have a rock-solid foundation to build on top of.\n\n*   The v3 release will be the way forward for this package. However, we will still\n    actively support v2 and v1 to provide a smooth upgrade path for those not yet\n    on the latest versions.\n\nThis update involves some major new features and a minor BC break over the\n`v2.0.0` release. We've tried hard to avoid BC breaks where possible and\nminimize impact otherwise. We expect that most consumers of this package will be\naffected by BC breaks, but updating should take no longer than a few minutes.\nSee below for more details:\n\n*   BC break: PHP 8.1+ recommended, PHP 7.1+ required.\n    (#138 and #149 by @WyriHaximus)\n\n*   Feature / BC break: The `PromiseInterface` now includes the functionality of the old ~~`ExtendedPromiseInterface`~~ and ~~`CancellablePromiseInterface`~~.\n    Each promise now always includes the `then()`, `catch()`, `finally()` and `cancel()` methods.\n    The new `catch()` and `finally()` methods replace the deprecated ~~`otherwise()`~~ and ~~`always()`~~ methods which continue to exist for BC reasons.\n    The old ~~`ExtendedPromiseInterface`~~ and ~~`CancellablePromiseInterface`~~ are no longer needed and have been removed as a consequence.\n    (#75 by @jsor and #208 by @clue and @WyriHaximus)\n\n    ```php\n    // old (multiple interfaces may or may not be implemented)\n    assert($promise instanceof PromiseInterface);\n    assert(method_exists($promise, 'then'));\n    if ($promise instanceof ExtendedPromiseInterface) { assert(method_exists($promise, 'otherwise')); }\n    if ($promise instanceof ExtendedPromiseInterface) { assert(method_exists($promise, 'always')); }\n    if ($promise instanceof CancellablePromiseInterface) { assert(method_exists($promise, 'cancel')); }\n    \n    // new (single PromiseInterface with all methods)\n    assert($promise instanceof PromiseInterface);\n    assert(method_exists($promise, 'then'));\n    assert(method_exists($promise, 'catch'));\n    assert(method_exists($promise, 'finally'));\n    assert(method_exists($promise, 'cancel'));\n    ```\n\n*   Feature / BC break: Improve type safety of promises. Require `mixed` fulfillment value argument and `Throwable` (or `Exception`) as rejection reason.\n    Add PHPStan template types to ensure strict types for `resolve(T $value): PromiseInterface<T>` and `reject(Throwable $reason): PromiseInterface<never>`.\n    It is no longer possible to resolve a promise without a value (use `null` instead) or reject a promise without a reason (use `Throwable` instead).\n    (#93, #141 and #142 by @jsor, #138, #149 and #247 by @WyriHaximus and #213 and #246 by @clue)\n\n    ```php\n    // old (arguments used to be optional)\n    $promise = resolve();\n    $promise = reject();\n    \n    // new (already supported before)\n    $promise = resolve(null);\n    $promise = reject(new RuntimeException());\n    ```\n\n*   Feature / BC break: Report all unhandled rejections by default and remove ~~`done()`~~ method.\n    Add new `set_rejection_handler()` function to set the global rejection handler for unhandled promise rejections.\n    (#248, #249 and #224 by @clue)\n\n    ```php\n    // Unhandled promise rejection with RuntimeException: Unhandled in example.php:2\n    reject(new RuntimeException('Unhandled'));\n    ```\n\n*   BC break: Remove all deprecated APIs and reduce API surface.\n    Remove ~~`some()`~~, ~~`map()`~~, ~~`reduce()`~~ functions, use `any()` and `all()` functions instead.\n    Remove internal ~~`FulfilledPromise`~~ and ~~`RejectedPromise`~~ classes, use `resolve()` and `reject()` functions instead.\n    Remove legacy promise progress API (deprecated third argument to `then()` method) and deprecated ~~`LazyPromise`~~ class. \n    (#32 and #98 by @jsor and #164, #219 and #220 by @clue)\n\n*   BC break: Make all classes final to encourage composition over inheritance.\n    (#80 by @jsor)\n\n*   Feature / BC break: Require `array` (or `iterable`) type for `all()` + `race()` + `any()` functions and bring in line with ES6 specification.\n    These functions now require a single argument with a variable number of promises or values as input.\n    (#225 by @clue and #35 by @jsor)\n\n*   Fix / BC break: Fix `race()` to return a forever pending promise when called with an empty `array` (or `iterable`) and bring in line with ES6 specification.\n    (#83 by @jsor and #225 by @clue)\n\n*   Minor performance improvements by initializing `Deferred` in the constructor and avoiding `call_user_func()` calls.\n    (#151 by @WyriHaximus and #171 by @Kubo2)\n\n*   Minor documentation improvements.\n    (#110 by @seregazhuk, #132 by @CharlotteDunois, #145 by @danielecr, #178 by @WyriHaximus, #189 by @srdante, #212 by @clue, #214, #239 and #243 by @SimonFrings and #231 by @nhedger)\n\nThe following changes had to be ported to this release due to our branching\nstrategy, but also appeared in the [`2.x` branch](https://github.com/reactphp/promise/tree/2.x):\n\n*   Feature: Support union types and address deprecation of `ReflectionType::getClass()` (PHP 8+).\n    (#197 by @cdosoftei and @SimonFrings)\n\n*   Feature: Support intersection types (PHP 8.1+).\n    (#209 by @bzikarsky)\n\n*   Feature: Support DNS types (PHP 8.2+).\n    (#236 by @nhedger)\n\n*   Feature: Port all memory improvements from `2.x` to `3.x`.\n    (#150 by @clue and @WyriHaximus)\n\n*   Fix: Fix checking whether cancellable promise is an object and avoid possible warning.\n    (#161 by @smscr)\n\n*   Improve performance by prefixing all global functions calls with \\ to skip the look up and resolve process and go straight to the global function.\n    (#134 by @WyriHaximus)\n\n*   Improve test suite, update PHPUnit and PHP versions and add `.gitattributes` to exclude dev files from exports.\n    (#107 by @carusogabriel, #148 and #234 by @WyriHaximus, #153 by @reedy, #162, #230 and #240 by @clue, #173, #177, #185 and #199 by @SimonFrings, #193 by @woodongwong and #210 by @bzikarsky)\n\nThe following changes were originally planned for this release but later reverted\nand are not part of the final release:\n\n*   Add iterative callback queue handler to avoid recursion (later removed to improve Fiber support). \n    (#28, #82 and #86 by @jsor, #158 by @WyriHaximus and #229 and #238 by @clue)\n\n*   Trigger an `E_USER_ERROR` instead of throwing an exception from `done()` (later removed entire `done()` method to globally report unhandled rejections).\n    (#97 by @jsor and #224 and #248 by @clue)\n\n*   Add type declarations for `some()` (later removed entire `some()` function).\n    (#172 by @WyriHaximus and #219 by @clue)\n\n## 2.0.0 (2013-12-10)\n\nSee [`2.x` CHANGELOG](https://github.com/reactphp/promise/blob/2.x/CHANGELOG.md) for more details.\n\n## 1.0.0 (2012-11-07)\n\nSee [`1.x` CHANGELOG](https://github.com/reactphp/promise/blob/1.x/CHANGELOG.md) for more details.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1005859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2012 Jan Sorgalla, Christian LÃ¼ck, Cees-Jan Kiewiet, Chris Boden\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.3291015625,
          "content": "Promise\n=======\n\nA lightweight implementation of\n[CommonJS Promises/A](http://wiki.commonjs.org/wiki/Promises/A) for PHP.\n\n[![CI status](https://github.com/reactphp/promise/workflows/CI/badge.svg)](https://github.com/reactphp/promise/actions)\n[![installs on Packagist](https://img.shields.io/packagist/dt/react/promise?color=blue&label=installs%20on%20Packagist)](https://packagist.org/packages/react/promise)\n\nTable of Contents\n-----------------\n\n1. [Introduction](#introduction)\n2. [Concepts](#concepts)\n   * [Deferred](#deferred)\n   * [Promise](#promise-1)\n3. [API](#api)\n   * [Deferred](#deferred-1)\n     * [Deferred::promise()](#deferredpromise)\n     * [Deferred::resolve()](#deferredresolve)\n     * [Deferred::reject()](#deferredreject)\n   * [PromiseInterface](#promiseinterface)\n     * [PromiseInterface::then()](#promiseinterfacethen)\n     * [PromiseInterface::catch()](#promiseinterfacecatch)\n     * [PromiseInterface::finally()](#promiseinterfacefinally)\n     * [PromiseInterface::cancel()](#promiseinterfacecancel)\n     * [~~PromiseInterface::otherwise()~~](#promiseinterfaceotherwise)\n     * [~~PromiseInterface::always()~~](#promiseinterfacealways)\n   * [Promise](#promise-2)\n   * [Functions](#functions)\n     * [resolve()](#resolve)\n     * [reject()](#reject)\n     * [all()](#all)\n     * [race()](#race)\n     * [any()](#any)\n     * [set_rejection_handler()](#set_rejection_handler)\n4. [Examples](#examples)\n   * [How to use Deferred](#how-to-use-deferred)\n   * [How promise forwarding works](#how-promise-forwarding-works)\n     * [Resolution forwarding](#resolution-forwarding)\n     * [Rejection forwarding](#rejection-forwarding)\n     * [Mixed resolution and rejection forwarding](#mixed-resolution-and-rejection-forwarding)\n5. [Install](#install)\n6. [Tests](#tests)\n7. [Credits](#credits)\n8. [License](#license)\n\nIntroduction\n------------\n\nPromise is a library implementing\n[CommonJS Promises/A](http://wiki.commonjs.org/wiki/Promises/A) for PHP.\n\nIt also provides several other useful promise-related concepts, such as joining\nmultiple promises and mapping and reducing collections of promises.\n\nIf you've never heard about promises before,\n[read this first](https://gist.github.com/domenic/3889970).\n\nConcepts\n--------\n\n### Deferred\n\nA **Deferred** represents a computation or unit of work that may not have\ncompleted yet. Typically (but not always), that computation will be something\nthat executes asynchronously and completes at some point in the future.\n\n### Promise\n\nWhile a deferred represents the computation itself, a **Promise** represents\nthe result of that computation. Thus, each deferred has a promise that acts as\na placeholder for its actual result.\n\nAPI\n---\n\n### Deferred\n\nA deferred represents an operation whose resolution is pending. It has separate\npromise and resolver parts.\n\n```php\n$deferred = new React\\Promise\\Deferred();\n\n$promise = $deferred->promise();\n\n$deferred->resolve(mixed $value);\n$deferred->reject(\\Throwable $reason);\n```\n\nThe `promise` method returns the promise of the deferred.\n\nThe `resolve` and `reject` methods control the state of the deferred.\n\nThe constructor of the `Deferred` accepts an optional `$canceller` argument.\nSee [Promise](#promise-2) for more information.\n\n#### Deferred::promise()\n\n```php\n$promise = $deferred->promise();\n```\n\nReturns the promise of the deferred, which you can hand out to others while\nkeeping the authority to modify its state to yourself.\n\n#### Deferred::resolve()\n\n```php\n$deferred->resolve(mixed $value);\n```\n\nResolves the promise returned by `promise()`. All consumers are notified by\nhaving `$onFulfilled` (which they registered via `$promise->then()`) called with\n`$value`.\n\nIf `$value` itself is a promise, the promise will transition to the state of\nthis promise once it is resolved.\n\nSee also the [`resolve()` function](#resolve).\n\n#### Deferred::reject()\n\n```php\n$deferred->reject(\\Throwable $reason);\n```\n\nRejects the promise returned by `promise()`, signalling that the deferred's\ncomputation failed.\nAll consumers are notified by having `$onRejected` (which they registered via\n`$promise->then()`) called with `$reason`.\n\nSee also the [`reject()` function](#reject).\n\n### PromiseInterface\n\nThe promise interface provides the common interface for all promise\nimplementations.\nSee [Promise](#promise-2) for the only public implementation exposed by this\npackage.\n\nA promise represents an eventual outcome, which is either fulfillment (success)\nand an associated value, or rejection (failure) and an associated reason.\n\nOnce in the fulfilled or rejected state, a promise becomes immutable.\nNeither its state nor its result (or error) can be modified.\n\n#### PromiseInterface::then()\n\n```php\n$transformedPromise = $promise->then(callable $onFulfilled = null, callable $onRejected = null);\n```\n\nTransforms a promise's value by applying a function to the promise's fulfillment\nor rejection value. Returns a new promise for the transformed result.\n\nThe `then()` method registers new fulfilled and rejection handlers with a promise\n(all parameters are optional):\n\n  * `$onFulfilled` will be invoked once the promise is fulfilled and passed\n    the result as the first argument.\n  * `$onRejected` will be invoked once the promise is rejected and passed the\n    reason as the first argument.\n\nIt returns a new promise that will fulfill with the return value of either\n`$onFulfilled` or `$onRejected`, whichever is called, or will reject with\nthe thrown exception if either throws.\n\nA promise makes the following guarantees about handlers registered in\nthe same call to `then()`:\n\n  1. Only one of `$onFulfilled` or `$onRejected` will be called,\n     never both.\n  2. `$onFulfilled` and `$onRejected` will never be called more\n     than once.\n\n#### See also\n\n* [resolve()](#resolve) - Creating a resolved promise\n* [reject()](#reject) - Creating a rejected promise\n\n#### PromiseInterface::catch()\n\n```php\n$promise->catch(callable $onRejected);\n```\n\nRegisters a rejection handler for promise. It is a shortcut for:\n\n```php\n$promise->then(null, $onRejected);\n```\n\nAdditionally, you can type hint the `$reason` argument of `$onRejected` to catch\nonly specific errors.\n\n```php\n$promise\n    ->catch(function (\\RuntimeException $reason) {\n        // Only catch \\RuntimeException instances\n        // All other types of errors will propagate automatically\n    })\n    ->catch(function (\\Throwable $reason) {\n        // Catch other errors\n    });\n```\n\n#### PromiseInterface::finally()\n\n```php\n$newPromise = $promise->finally(callable $onFulfilledOrRejected);\n```\n\nAllows you to execute \"cleanup\" type tasks in a promise chain.\n\nIt arranges for `$onFulfilledOrRejected` to be called, with no arguments,\nwhen the promise is either fulfilled or rejected.\n\n* If `$promise` fulfills, and `$onFulfilledOrRejected` returns successfully,\n  `$newPromise` will fulfill with the same value as `$promise`.\n* If `$promise` fulfills, and `$onFulfilledOrRejected` throws or returns a\n  rejected promise, `$newPromise` will reject with the thrown exception or\n  rejected promise's reason.\n* If `$promise` rejects, and `$onFulfilledOrRejected` returns successfully,\n  `$newPromise` will reject with the same reason as `$promise`.\n* If `$promise` rejects, and `$onFulfilledOrRejected` throws or returns a\n  rejected promise, `$newPromise` will reject with the thrown exception or\n  rejected promise's reason.\n\n`finally()` behaves similarly to the synchronous finally statement. When combined\nwith `catch()`, `finally()` allows you to write code that is similar to the familiar\nsynchronous catch/finally pair.\n\nConsider the following synchronous code:\n\n```php\ntry {\n    return doSomething();\n} catch (\\Throwable $e) {\n    return handleError($e);\n} finally {\n    cleanup();\n}\n```\n\nSimilar asynchronous code (with `doSomething()` that returns a promise) can be\nwritten:\n\n```php\nreturn doSomething()\n    ->catch('handleError')\n    ->finally('cleanup');\n```\n\n#### PromiseInterface::cancel()\n\n``` php\n$promise->cancel();\n```\n\nThe `cancel()` method notifies the creator of the promise that there is no\nfurther interest in the results of the operation.\n\nOnce a promise is settled (either fulfilled or rejected), calling `cancel()` on\na promise has no effect.\n\n#### ~~PromiseInterface::otherwise()~~\n\n> Deprecated since v3.0.0, see [`catch()`](#promiseinterfacecatch) instead.\n\nThe `otherwise()` method registers a rejection handler for a promise.\n\nThis method continues to exist only for BC reasons and to ease upgrading\nbetween versions. It is an alias for:\n\n```php\n$promise->catch($onRejected);\n```\n\n#### ~~PromiseInterface::always()~~\n\n> Deprecated since v3.0.0, see [`finally()`](#promiseinterfacefinally) instead.\n\nThe `always()` method allows you to execute \"cleanup\" type tasks in a promise chain.\n\nThis method continues to exist only for BC reasons and to ease upgrading\nbetween versions. It is an alias for:\n\n```php\n$promise->finally($onFulfilledOrRejected);\n```\n\n### Promise\n\nCreates a promise whose state is controlled by the functions passed to\n`$resolver`.\n\n```php\n$resolver = function (callable $resolve, callable $reject) {\n    // Do some work, possibly asynchronously, and then\n    // resolve or reject.\n\n    $resolve($awesomeResult);\n    // or throw new Exception('Promise rejected');\n    // or $resolve($anotherPromise);\n    // or $reject($nastyError);\n};\n\n$canceller = function () {\n    // Cancel/abort any running operations like network connections, streams etc.\n\n    // Reject promise by throwing an exception\n    throw new Exception('Promise cancelled');\n};\n\n$promise = new React\\Promise\\Promise($resolver, $canceller);\n```\n\nThe promise constructor receives a resolver function and an optional canceller\nfunction which both will be called with two arguments:\n\n  * `$resolve($value)` - Primary function that seals the fate of the\n    returned promise. Accepts either a non-promise value, or another promise.\n    When called with a non-promise value, fulfills promise with that value.\n    When called with another promise, e.g. `$resolve($otherPromise)`, promise's\n    fate will be equivalent to that of `$otherPromise`.\n  * `$reject($reason)` - Function that rejects the promise. It is recommended to\n    just throw an exception instead of using `$reject()`.\n\nIf the resolver or canceller throw an exception, the promise will be rejected\nwith that thrown exception as the rejection reason.\n\nThe resolver function will be called immediately, the canceller function only\nonce all consumers called the `cancel()` method of the promise.\n\n### Functions\n\nUseful functions for creating and joining collections of promises.\n\nAll functions working on promise collections (like `all()`, `race()`,\netc.) support cancellation. This means, if you call `cancel()` on the returned\npromise, all promises in the collection are cancelled.\n\n#### resolve()\n\n```php\n$promise = React\\Promise\\resolve(mixed $promiseOrValue);\n```\n\nCreates a promise for the supplied `$promiseOrValue`.\n\nIf `$promiseOrValue` is a value, it will be the resolution value of the\nreturned promise.\n\nIf `$promiseOrValue` is a thenable (any object that provides a `then()` method),\na trusted promise that follows the state of the thenable is returned.\n\nIf `$promiseOrValue` is a promise, it will be returned as is.\n\nThe resulting `$promise` implements the [`PromiseInterface`](#promiseinterface)\nand can be consumed like any other promise:\n\n```php\n$promise = React\\Promise\\resolve(42);\n\n$promise->then(function (int $result): void {\n    var_dump($result);\n}, function (\\Throwable $e): void {\n    echo 'Error: ' . $e->getMessage() . PHP_EOL;\n});\n```\n\n#### reject()\n\n```php\n$promise = React\\Promise\\reject(\\Throwable $reason);\n```\n\nCreates a rejected promise for the supplied `$reason`.\n\nNote that the [`\\Throwable`](https://www.php.net/manual/en/class.throwable.php) interface introduced in PHP 7 covers \nboth user land [`\\Exception`](https://www.php.net/manual/en/class.exception.php)'s and \n[`\\Error`](https://www.php.net/manual/en/class.error.php) internal PHP errors. By enforcing `\\Throwable` as reason to \nreject a promise, any language error or user land exception can be used to reject a promise.\n\nThe resulting `$promise` implements the [`PromiseInterface`](#promiseinterface)\nand can be consumed like any other promise:\n\n```php\n$promise = React\\Promise\\reject(new RuntimeException('Request failed'));\n\n$promise->then(function (int $result): void {\n    var_dump($result);\n}, function (\\Throwable $e): void {\n    echo 'Error: ' . $e->getMessage() . PHP_EOL;\n});\n```\n\nNote that rejected promises should always be handled similar to how any\nexceptions should always be caught in a `try` + `catch` block. If you remove the\nlast reference to a rejected promise that has not been handled, it will\nreport an unhandled promise rejection:\n\n```php\nfunction incorrect(): int\n{\n     $promise = React\\Promise\\reject(new RuntimeException('Request failed'));\n\n     // Commented out: No rejection handler registered here.\n     // $promise->then(null, function (\\Throwable $e): void { /* ignore */ });\n\n     // Returning from a function will remove all local variable references, hence why\n     // this will report an unhandled promise rejection here.\n     return 42;\n}\n\n// Calling this function will log an error message plus its stack trace:\n// Unhandled promise rejection with RuntimeException: Request failed in example.php:10\nincorrect();\n```\n\nA rejected promise will be considered \"handled\" if you catch the rejection\nreason with either the [`then()` method](#promiseinterfacethen), the\n[`catch()` method](#promiseinterfacecatch), or the\n[`finally()` method](#promiseinterfacefinally). Note that each of these methods\nreturn a new promise that may again be rejected if you re-throw an exception.\n\nA rejected promise will also be considered \"handled\" if you abort the operation\nwith the [`cancel()` method](#promiseinterfacecancel) (which in turn would\nusually reject the promise if it is still pending).\n\nSee also the [`set_rejection_handler()` function](#set_rejection_handler).\n\n#### all()\n\n```php\n$promise = React\\Promise\\all(iterable $promisesOrValues);\n```\n\nReturns a promise that will resolve only once all the items in\n`$promisesOrValues` have resolved. The resolution value of the returned promise\nwill be an array containing the resolution values of each of the items in\n`$promisesOrValues`.\n\n#### race()\n\n```php\n$promise = React\\Promise\\race(iterable $promisesOrValues);\n```\n\nInitiates a competitive race that allows one winner. Returns a promise which is\nresolved in the same way the first settled promise resolves.\n\nThe returned promise will become **infinitely pending** if  `$promisesOrValues`\ncontains 0 items.\n\n#### any()\n\n```php\n$promise = React\\Promise\\any(iterable $promisesOrValues);\n```\n\nReturns a promise that will resolve when any one of the items in\n`$promisesOrValues` resolves. The resolution value of the returned promise\nwill be the resolution value of the triggering item.\n\nThe returned promise will only reject if *all* items in `$promisesOrValues` are\nrejected. The rejection value will be a `React\\Promise\\Exception\\CompositeException`\nwhich holds all rejection reasons. The rejection reasons can be obtained with\n`CompositeException::getThrowables()`.\n\nThe returned promise will also reject with a `React\\Promise\\Exception\\LengthException`\nif `$promisesOrValues` contains 0 items.\n\n#### set_rejection_handler()\n\n```php\nReact\\Promise\\set_rejection_handler(?callable $callback): ?callable;\n```\n\nSets the global rejection handler for unhandled promise rejections.\n\nNote that rejected promises should always be handled similar to how any\nexceptions should always be caught in a `try` + `catch` block. If you remove\nthe last reference to a rejected promise that has not been handled, it will\nreport an unhandled promise rejection. See also the [`reject()` function](#reject)\nfor more details.\n\nThe `?callable $callback` argument MUST be a valid callback function that\naccepts a single `Throwable` argument or a `null` value to restore the\ndefault promise rejection handler. The return value of the callback function\nwill be ignored and has no effect, so you SHOULD return a `void` value. The\ncallback function MUST NOT throw or the program will be terminated with a\nfatal error.\n\nThe function returns the previous rejection handler or `null` if using the\ndefault promise rejection handler.\n\nThe default promise rejection handler will log an error message plus its stack\ntrace:\n\n```php\n// Unhandled promise rejection with RuntimeException: Unhandled in example.php:2\nReact\\Promise\\reject(new RuntimeException('Unhandled'));\n```\n\nThe promise rejection handler may be used to use customize the log message or\nwrite to custom log targets. As a rule of thumb, this function should only be\nused as a last resort and promise rejections are best handled with either the\n[`then()` method](#promiseinterfacethen), the\n[`catch()` method](#promiseinterfacecatch), or the\n[`finally()` method](#promiseinterfacefinally).\nSee also the [`reject()` function](#reject) for more details.\n\nExamples\n--------\n\n### How to use Deferred\n\n```php\nfunction getAwesomeResultPromise()\n{\n    $deferred = new React\\Promise\\Deferred();\n\n    // Execute a Node.js-style function using the callback pattern\n    computeAwesomeResultAsynchronously(function (\\Throwable $error, $result) use ($deferred) {\n        if ($error) {\n            $deferred->reject($error);\n        } else {\n            $deferred->resolve($result);\n        }\n    });\n\n    // Return the promise\n    return $deferred->promise();\n}\n\ngetAwesomeResultPromise()\n    ->then(\n        function ($value) {\n            // Deferred resolved, do something with $value\n        },\n        function (\\Throwable $reason) {\n            // Deferred rejected, do something with $reason\n        }\n    );\n```\n\n### How promise forwarding works\n\nA few simple examples to show how the mechanics of Promises/A forwarding works.\nThese examples are contrived, of course, and in real usage, promise chains will\ntypically be spread across several function calls, or even several levels of\nyour application architecture.\n\n#### Resolution forwarding\n\nResolved promises forward resolution values to the next promise.\nThe first promise, `$deferred->promise()`, will resolve with the value passed\nto `$deferred->resolve()` below.\n\nEach call to `then()` returns a new promise that will resolve with the return\nvalue of the previous handler. This creates a promise \"pipeline\".\n\n```php\n$deferred = new React\\Promise\\Deferred();\n\n$deferred->promise()\n    ->then(function ($x) {\n        // $x will be the value passed to $deferred->resolve() below\n        // and returns a *new promise* for $x + 1\n        return $x + 1;\n    })\n    ->then(function ($x) {\n        // $x === 2\n        // This handler receives the return value of the\n        // previous handler.\n        return $x + 1;\n    })\n    ->then(function ($x) {\n        // $x === 3\n        // This handler receives the return value of the\n        // previous handler.\n        return $x + 1;\n    })\n    ->then(function ($x) {\n        // $x === 4\n        // This handler receives the return value of the\n        // previous handler.\n        echo 'Resolve ' . $x;\n    });\n\n$deferred->resolve(1); // Prints \"Resolve 4\"\n```\n\n#### Rejection forwarding\n\nRejected promises behave similarly, and also work similarly to try/catch:\nWhen you catch an exception, you must rethrow for it to propagate.\n\nSimilarly, when you handle a rejected promise, to propagate the rejection,\n\"rethrow\" it by either returning a rejected promise, or actually throwing\n(since promise translates thrown exceptions into rejections)\n\n```php\n$deferred = new React\\Promise\\Deferred();\n\n$deferred->promise()\n    ->then(function ($x) {\n        throw new \\Exception($x + 1);\n    })\n    ->catch(function (\\Exception $x) {\n        // Propagate the rejection\n        throw $x;\n    })\n    ->catch(function (\\Exception $x) {\n        // Can also propagate by returning another rejection\n        return React\\Promise\\reject(\n            new \\Exception($x->getMessage() + 1)\n        );\n    })\n    ->catch(function ($x) {\n        echo 'Reject ' . $x->getMessage(); // 3\n    });\n\n$deferred->resolve(1);  // Prints \"Reject 3\"\n```\n\n#### Mixed resolution and rejection forwarding\n\nJust like try/catch, you can choose to propagate or not. Mixing resolutions and\nrejections will still forward handler results in a predictable way.\n\n```php\n$deferred = new React\\Promise\\Deferred();\n\n$deferred->promise()\n    ->then(function ($x) {\n        return $x + 1;\n    })\n    ->then(function ($x) {\n        throw new \\Exception($x + 1);\n    })\n    ->catch(function (\\Exception $x) {\n        // Handle the rejection, and don't propagate.\n        // This is like catch without a rethrow\n        return $x->getMessage() + 1;\n    })\n    ->then(function ($x) {\n        echo 'Mixed ' . $x; // 4\n    });\n\n$deferred->resolve(1);  // Prints \"Mixed 4\"\n```\n\nInstall\n-------\n\nThe recommended way to install this library is [through Composer](https://getcomposer.org/).\n[New to Composer?](https://getcomposer.org/doc/00-intro.md)\n\nThis project follows [SemVer](https://semver.org/).\nThis will install the latest supported version from this branch:\n\n```bash\ncomposer require react/promise:^3.2\n```\n\nSee also the [CHANGELOG](CHANGELOG.md) for details about version upgrades.\n\nThis project aims to run on any platform and thus does not require any PHP\nextensions and supports running on PHP 7.1 through current PHP 8+.\nIt's *highly recommended to use the latest supported PHP version* for this project.\n\nWe're committed to providing long-term support (LTS) options and to provide a\nsmooth upgrade path. If you're using an older PHP version, you may use the\n[`2.x` branch](https://github.com/reactphp/promise/tree/2.x) (PHP 5.4+) or\n[`1.x` branch](https://github.com/reactphp/promise/tree/1.x) (PHP 5.3+) which both\nprovide a compatible API but do not take advantage of newer language features.\nYou may target multiple versions at the same time to support a wider range of\nPHP versions like this:\n\n```bash\ncomposer require \"react/promise:^3 || ^2 || ^1\"\n```\n\n## Tests\n\nTo run the test suite, you first need to clone this repo and then install all\ndependencies [through Composer](https://getcomposer.org/):\n\n```bash\ncomposer install\n```\n\nTo run the test suite, go to the project root and run:\n\n```bash\nvendor/bin/phpunit\n```\n\nOn top of this, we use PHPStan on max level to ensure type safety across the project:\n\n```bash\nvendor/bin/phpstan\n```\n\nCredits\n-------\n\nPromise is a port of [when.js](https://github.com/cujojs/when)\nby [Brian Cavalier](https://github.com/briancavalier).\n\nAlso, large parts of the documentation have been ported from the when.js\n[Wiki](https://github.com/cujojs/when/wiki) and the\n[API docs](https://github.com/cujojs/when/blob/master/docs/api.md).\n\nLicense\n-------\n\nReleased under the [MIT](LICENSE) license.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.36328125,
          "content": "{\n    \"name\": \"react/promise\",\n    \"description\": \"A lightweight implementation of CommonJS Promises/A for PHP\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Jan Sorgalla\",\n            \"homepage\": \"https://sorgalla.com/\",\n            \"email\": \"jsorgalla@gmail.com\"\n        },\n        {\n            \"name\": \"Christian LÃ¼ck\",\n            \"homepage\": \"https://clue.engineering/\",\n            \"email\": \"christian@clue.engineering\"\n        },\n        {\n            \"name\": \"Cees-Jan Kiewiet\",\n            \"homepage\": \"https://wyrihaximus.net/\",\n            \"email\": \"reactphp@ceesjankiewiet.nl\"\n        },\n        {\n            \"name\": \"Chris Boden\",\n            \"homepage\": \"https://cboden.dev/\",\n            \"email\": \"cboden@gmail.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=7.1.0\"\n    },\n    \"require-dev\": {\n        \"phpstan/phpstan\": \"1.10.39 || 1.4.10\",\n        \"phpunit/phpunit\": \"^9.6 || ^7.5\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"React\\\\Promise\\\\\": \"src/\"\n        },\n        \"files\": [\n            \"src/functions_include.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"React\\\\Promise\\\\\": [\n                \"tests/fixtures/\",\n                \"tests/\"\n            ]\n        },\n        \"files\": [\n            \"tests/Fiber.php\"\n        ]\n    },\n    \"keywords\": [\n        \"promise\",\n        \"promises\"\n    ]\n}\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.1181640625,
          "content": "parameters:\n    level: max\n\n    paths:\n        - src/\n        - tests/\n\n    fileExtensions:\n        - php\n        - phpt\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 1.162109375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!-- PHPUnit configuration file with new format for PHPUnit 9.6+ -->\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.6/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         cacheResult=\"false\"\n         colors=\"true\"\n         convertDeprecationsToExceptions=\"true\">\n    <testsuites>\n        <testsuite name=\"Promise Test Suite\">\n            <directory>./tests/</directory>\n            <directory suffix=\".phpt\">./tests/</directory>\n        </testsuite>\n    </testsuites>\n    <coverage>\n        <include>\n            <directory>./src/</directory>\n        </include>\n        <exclude>\n            <file>./src/functions_include.php</file>\n        </exclude>\n    </coverage>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\" />\n        <!-- Evaluate assertions, requires running with \"php -d zend.assertions=1 vendor/bin/phpunit\" -->\n        <!-- <ini name=\"zend.assertions\" value=\"1\" /> -->\n        <ini name=\"assert.active\" value=\"1\" />\n        <ini name=\"assert.exception\" value=\"1\" />\n        <ini name=\"assert.bail\" value=\"0\" />\n    </php>\n</phpunit>\n"
        },
        {
          "name": "phpunit.xml.legacy",
          "type": "blob",
          "size": 1.1005859375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!-- PHPUnit configuration file with old format for legacy PHPUnit -->\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/7.5/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\">\n    <testsuites>\n        <testsuite name=\"Promise Test Suite\">\n            <directory>./tests/</directory>\n            <directory suffix=\".phpt\">./tests/</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist>\n            <directory>./src/</directory>\n            <exclude>\n                <file>./src/functions_include.php</file>\n            </exclude>\n        </whitelist>\n    </filter>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\" />\n        <!-- Evaluate assertions, requires running with \"php -d zend.assertions=1 vendor/bin/phpunit\" -->\n        <!-- <ini name=\"zend.assertions\" value=\"1\" /> -->\n        <ini name=\"assert.active\" value=\"1\" />\n        <ini name=\"assert.exception\" value=\"1\" />\n        <ini name=\"assert.bail\" value=\"0\" />\n    </php>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}