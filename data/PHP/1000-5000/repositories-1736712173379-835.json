{
  "metadata": {
    "timestamp": 1736712173379,
    "page": 835,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pk-fr/yakpro-po",
      "stars": 1349,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1591796875,
          "content": "#-----------------------\n# directories\n#-----------------------\nPHP-Parser/*\ntests/*\nold/*\n#-----------------------\n# files\n#-----------------------\nrun_tests.php\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.08203125,
          "content": "Published under the MIT License\n\nCopyright (c) 2015-2018 Pascal KISSIAN\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.5751953125,
          "content": "[Cette page en FranÃ§ais](https://github.com/pk-fr/yakpro-po/blob/master/locale/fr/README.md)\n\n# YAK Pro - Php Obfuscator\n\n**YAK Pro** stands for **Y**et **A**nother **K**iller **Pro**duct.\n\nFree, Open Source, Published under the MIT License.\n\nThis tool parses php with the best existing php parser [PHP-Parser 4.x](https://github.com/nikic/PHP-Parser/tree/4.x/),\nwhich is an awesome php parsing library written by [nikic](https://github.com/nikic).\n\nYou just have to download the zip archive and uncompress it under the PHP-Parser subdirectory,\nor make a git clone ...\n\n### Warning:  \n    yakpro-po 2.x works on PhpParser 4.x   \n    it will run on php >= 7.0, obfuscating code for php 5.2 to php 7.3   \n    \n    If you are running php 5.3 or higher,  \n    Please use unsupported [yakpro-po 1.x](https://github.com/pk-fr/yakpro-po/tree/1.x) which works on 1.x branch of PhpParser.   \n    \n\n\nThe yakpro-po.cnf self-documented file contains many configuration options!\nTake a look at it!\n\nDemo : [yakpro-po demo](https://www.php-obfuscator.com/?demo).\n\nPrerequisites:  php 7.0 or higher, [PHP-Parser 4.x](https://github.com/nikic/PHP-Parser/tree/4.x/).\n\nNote: This tool has been written in order to obfuscate pure php sources.\nit is not intended to be used with html and embeded php inside \n(use at your own risks...you may try to deactivate statements shuffling...).\nYou can still embed html within php using the echo <<<END ... END; syntax!\n\n## What is Php Obfuscation?\n\nWhen you have a php project you want to distribute, as php is a script interpretor,\nyou distribute also all the sources of your software!\n\nYou may want, for any reason, that other people do not understand, modify, or adapt your software.\n\nAs your software must be understandable by the **php runtime**, but needs to be very difficult\nto understand by human people, obfuscation is a very good way to achieve this goal.\n\n### YAK Pro - Php Obfuscator Obfuscation Main Features:\n\n- Removes all comments, indentation, and generates a single line program file.\n- Obfuscates **if, else, elseif, for, while, do while** by replacing them with **if goto** statements.\n- Obfuscates string literals.\n- Scrambles names for:\n  - Variables, Functions, Constants.\n  - Classes, Interfaces, Traits.\n  - Properties, Methods.\n  - Namespaces.\n  - Labels.\n- Shuffles Statements.\n\n- Recursivly obfuscates a project's directory.\n- Makefile like, timestamps based mechanism, to re-obfuscate only files that were changed since last obfuscation.\n- Many configuration options that let you have **full control** of what is obfuscated within your project!\n\n\n### Why Yet Another Php Obfuscator?\nI began testing some already existing php obfuscation tools, but I did'nt find one that was\nfitting all my needs.\nI wanted a **simple** command line tool, based on a **highly customisable** config file, that would be able to:\n- Be fast and re-obfuscate only files that were changed based on timestamps of files.\n- Preserve some files and/or directories from obfuscation.\n- Not include in the obfuscated target, some files/directories that are present on the source project.\n- Accept lists of names and/or name prefixes to not obfuscate.\n\nSo I started to write this tool.\nVersion 1.0 has been written within a few days...\n\n\n## Setup:\n    Note: This setup is also valid for Windows 10 Anniversary with bash installed...  \n    1. Prerequisites: git and php-cli (command line interface) packages. \n       on ubuntu: (adapt according your linux distribution) \n       # apt install git \n       # apt install php-cli\n       do not forget to install all other php modules that you are using within your software:\n            for example: apt install php-mysql if you are using mysql... \n    2. Navigate to the directory where you want to install yakpro-po (/usr/local is a good idea): \n       # cd /usr/local \n    3. Then retrieve from GitHub: \n       # git clone https://github.com/pk-fr/yakpro-po.git \n    4. Go to the yakpro-po directory: \n       # cd yakpro-po \n    5. Then retrieve from GitHub: \n       # git clone https://github.com/nikic/PHP-Parser.git --branch 4.x\n    6. Check that yakpro-po.php has execute rights, otherwise:\n                                            # chmod a+x yakpro-po.php \n    7. Create a symbolic link in the /usr/local/bin directory\n       # cd /usr/local/bin \n       # ln -s /usr/local/yakpro-po/yakpro-po.php yakpro-po \n    8. You can now run yakpro-po \n       # yakpro-po --help \n       # yakpro-po test.php \n\n    Modify a copy of the yakpro-po.cnf to fit your needs...\n    Read the \"Configuration file loading algorithm\" section of this document\n    to choose the best location suiting your needs!\n\n    That's it! You're done!\n\n####\n\n## Usage:\n\n`yakpro-po`\nObfuscates according configuration file!\n(See configuration file loading algorithm)\n\n`yakpro-po source_filename`\nObfuscates code to stdout\n\n`yakpro-po source_filename -o target_filename`\nObfuscates code to target_filename\n\n`yakpro-po source_directory -o target_directory`\nRecursivly obfuscates code to target_directory/yakpro-po (creates it if it does not already exist).\n\n`yakpro-po --config-file config_file_path`\nAccording to config_file_path.\n\n`yakpro-po --clean`\nRequires target_directory to be present in your config file!\nRecursivly removes target_directory/yakpro-po\n\n\n## Configuration file loading algorithm:\n(the first found is used)\n\n    --config-file argument value\n    YAKPRO_PO_CONFIG_FILE environment variable value if existing and not empty.\n\n    filename selection:\n           YAKPRO_PO_CONFIG_FILENAME environment variable value if existing and not empty,\n           yakpro-po.cnf otherwise.\n\n     file is then searched in the following directories:\n            YAKPRO_PO_CONFIG_DIRECTORY  environment variable value if existing and not empty.\n            current_working_directory\n            current_working_directory/config\n            home_directory\n            home_directory/config\n            /usr/local/YAK/yakpro-po\n            source_code_directory/default_conf_filename\n\n      if no config file is found, default values are used.\n\n      You can find the default config file as an example in the yakpro-po.cnf file of the\n      repository.\n      Do not modify it directly because it will be overwritten at each update!\n      Use your own yakpro-po.cnf file (for example in the root directory of your project)\n\n      When working on directories,\n      context is saved in order to reuse the same obfuscation translation table.\n      When you make some changes in one or several source files,\n      yakpro-po uses timestamps to only reobfuscate files that were changed\n      since the last obfuscation.\n      This can save you a lot of time.\n\n      caveats: does not delete files that are no more present...\n               use --clean  command line parameter, and then re-obfuscate all!\n\n## Other command line options:\n(override config file settings)\n\n    --silent                            do not display Information level messages.\n    --debug                             (internal debugging use) displays the syntax tree.\n\n    -s or\n    --no-strip-indentation              multi line output\n    --strip-indentation                 single line output\n\n    --no-shuffle-statements             do not shuffle statements\n    --shuffle-statements                       shuffle statements\n\n    --no-obfuscate-string-literal       do not obfuscate string literals\n    --obfuscate-string-literal                 obfuscate string literals\n\n    --no-obfuscate-loop-statement       do not obfuscate loop statements\n    --obfuscate-loop-statement                 obfuscate loop statements\n\n    --no-obfuscate-if-statement         do not obfuscate if statements\n    --obfuscate-if-statement                   obfuscate if statements\n\n    --no-obfuscate-constant-name        do not obfuscate constant names\n    --obfuscate-constant-name                  obfuscate constant names\n\n    --no-obfuscate-variable-name        do not obfuscate variable names\n    --obfuscate-variable-name                  obfuscate variable names\n\n    --no-obfuscate-function-name        do not obfuscate function names\n    --obfuscate-function-name                  obfuscate function names\n\n    --no-obfuscate-class_constant-name  do not obfuscate class constant names\n    --obfuscate-class_constant-name            obfuscate class constant names\n\n    --no-obfuscate-class-name           do not obfuscate class names\n    --obfuscate-class-name                     obfuscate class names\n\n    --no-obfuscate-interface-name       do not obfuscate interface names\n    --obfuscate-interface-name                 obfuscate interface names\n\n    --no-obfuscate-trait-name           do not obfuscate trait names\n    --obfuscate-trait-name                     obfuscate trait names\n\n    --no-obfuscate-property-name        do not obfuscate property names\n    --obfuscate-property-name                  obfuscate property names\n\n    --no-obfuscate-method-name          do not obfuscate method names\n    --obfuscate-method-name                    obfuscate method names\n\n    --no-obfuscate-namespace-name       do not obfuscate namespace names\n    --obfuscate-namespace-name                 obfuscate namespace names\n\n    --no-obfuscate-label-name           do not obfuscate label names\n    --obfuscate-label-name                     obfuscate label names\n\n    --scramble-mode     identifier|hexa|numeric         force scramble mode\n    --scramble-length   length ( min=2; max = 16 for scramble_mode=identifier,\n                                        max = 32 for scramble_mode = hexa or numeric)\n\n    --whatis scrambled_name             retrieves original symbol from obfuscation context.\n                                        (usefull for debugging your code when you give away\n                                        obfuscated code, and keep the same obfuscation context).\n                                        Tip: do not include the $ symbol, or use \\$ because\n                                        $ has special meaning in shell.\n\n    -h or\n    --help                              displays help.\n\n####\n\n## YOU MUST BE AWARE OF THE FOLLOWING:\n    If your obfuscated software makes use of external libraries\n    that you do not obfuscate along with your software:\n\n    if the library consists of functions:\n            set the $conf->obfuscate_function_name to false in your yakpro-po.cnf config file,\n            or declare all the functions names you are using in $conf->t_ignore_functions\n            example : $conf->t_ignore_functions = array('my_func1','my_func2');\n\n    if the library consists of classes :\n            set the $conf->obfuscate_class_name,\n                    $conf->obfuscate_property_name,\n                    $conf->obfuscate_method_name\n            to false in your yakpro-po.cnf config file...\n            ... or declare all the classes, properties, methods names you are using in\n                    $conf->t_ignore_classes,\n                    $conf->t_ignore_properties,\n                    $conf->t_ignore_methods.\n\n    This is also true for PDO::FETCH_OBJ that retrieves properties from external source\n    (i.e. database columns).\n\n## Hints for preparing your Software to be run obfuscated\n\n    At first you can test obfuscating only variable names...\n\n\n    If you obfuscate functions, do not use indirect function calls like\n        $my_var = 'my_function';\n        $my_var();\n    or put all the function names you call indirectly in the $conf->t_ignore_functions array!\n\n\n    Do not use indirect variable names!\n        $$my_var = something;\n    or put all the variable names you use indirectly in the $conf->t_ignore_variables array!\n\n\n    Do not use PDO::FETCH_OBJ  but use PDO::FETCH_ASSOC instead!\n    or disable properties obfuscation in the config file.\n\n\n    If you use the define function for defining constants, the only allowed form is when the\n    define function has exactly 2 arguments, and the first one is a litteral string!\n    You MUST disable constants obfuscation in the config file, if you use any other forms\n    of the define function!\n    There is no problem with the const MY_CONST = something; form!\n\n\n## Performance considerations\n\n    Except for the statements shuffling obfuscation option,\n    the obfuscated program speed is almost the same than the original one.\n\n    $conf->shuffle_stmts    is set to true by default.\n\n    If you encounter performance issues, you can either set the option to false,\n    or fine tune the shuffle parameters with the associated options.\n\n    You must know that the lesser the chunk size, the better the obfuscation,\n    and the lower your software performance!\n\n    (during my own tests, the maximum of obfuscation costs me about 13% of performance)\n\n    You can tune it as you wish!\n\n\n\n## Known Issues\n\n[segmentation fault](https://github.com/php/php-src/issues/8193)\n\n    opcache crashes on Ubuntu 21.10 - php 8.0.8 (segfault) both within apache2 and cli when\n    shuffle-statements is turned on for big files\n    \n    works perfectly with newer versions of php (8.0.16 8.1 )\n    \n\n[sedimentation-fault](https://github.com/sedimentation-fault) reported on issue [#75](https://github.com/pk-fr/yakpro-po/issues/75) that a segmentation fault could occure in php's garbage collector when obfuscating many big files in a project:\n\n    Trying to obfuscate ~5000 PHP files of ~1000 lines each, yakpro-po stopped after processing ~1600 files \n    with a simple (and frustrating) Segmentation fault\n\n    Workaround:\n    \n    There is a stack overflow in garbage collector. The solution is to increase limit for stack.\n    To see your current limit, type\n\n    ulimit -s\n\n    I had 8192 - for a task of this size obviously totally undersized...\n    Change this to something more appropriate, say\n\n    ulimit -s 102400\n\n    and retry - the segmentation fault is gone! :-)\n    \n    \n    \n    \n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "locale",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.php",
          "type": "blob",
          "size": 0.4580078125,
          "content": "<?php\n//========================================================================\n// Author:  Pascal KISSIAN\n// Resume:  https://pascal.kissian.net\n//\n// Copyright (c) 2015-2021 Pascal KISSIAN\n//\n// Published under the MIT License\n//          Consider it as a proof of concept!\n//          No warranty of any kind.\n//          Use and abuse at your own risks.\n//========================================================================\n\n$yakpro_po_version = \"2.0.14\";\n\n?>"
        },
        {
          "name": "yakpro-po.cnf",
          "type": "blob",
          "size": 8.32421875,
          "content": "<?php\n// YAK Pro - Php Obfuscator: Config File\n// Do not delete the previous line! it's a magic string for config file!\n//========================================================================\n// Author:  Pascal KISSIAN\n// Resume:  http://pascal.kissian.net\n//\n// CopyRight (c) 2015-2019 Pascal KISSIAN\n//\n// Published under the MIT License\n//          Consider it as a proof of concept!\n//          No warranty of any kind.\n//          Use and abuse at your own risks.\n//========================================================================\n// when we use the word ignore, that means that it is ignored during the obfuscation process (i.e. not obfuscated)\n\n$conf->t_ignore_pre_defined_classes     = 'all';        // 'all' (default value) , 'none',  or array of pre-defined classes that you use in your software:\n                                                        //      ex: array('Exception', 'PDO', 'PDOStatement', 'PDOException');\n                                                        // As instantiation is done at runtime, it is impossible to statically determinate when a method call is detected, on which class the object belong.\n                                                        // so, all method names that exists in a pre_defined_class to ignore are ignored within every classes.\n                                                        // if you have some method names in your classes that have the same name that a predefine class method, it will not be obfuscated.\n                                                        // you can limit the number of method names to ignore by providing an array of the pre-defined classes you really use in your software!\n                                                        // same behaviour for properties...\n\n$conf->t_ignore_constants               = null;         // array where values are names to ignore.\n$conf->t_ignore_variables               = null;         // array where values are names to ignore.\n$conf->t_ignore_functions               = null;         // array where values are names to ignore.\n$conf->t_ignore_class_constants         = null;         // array where values are names to ignore.\n$conf->t_ignore_methods                 = null;         // array where values are names to ignore.\n$conf->t_ignore_properties              = null;         // array where values are names to ignore.\n$conf->t_ignore_classes                 = null;         // array where values are names to ignore.\n$conf->t_ignore_interfaces              = null;         // array where values are names to ignore.\n$conf->t_ignore_traits                  = null;         // array where values are names to ignore.\n$conf->t_ignore_namespaces              = null;         // array where values are names to ignore.\n$conf->t_ignore_labels                  = null;         // array where values are names to ignore.\n\n$conf->t_ignore_constants_prefix        = null;         // array where values are prefix of names to ignore.\n$conf->t_ignore_variables_prefix        = null;         // array where values are prefix of names to ignore.\n$conf->t_ignore_functions_prefix        = null;         // array where values are prefix of names to ignore.\n\n$conf->t_ignore_class_constants_prefix  = null;         // array where values are prefix of names to ignore.\n$conf->t_ignore_properties_prefix       = null;         // array where values are prefix of names to ignore.\n$conf->t_ignore_methods_prefix          = null;         // array where values are prefix of names to ignore.\n\n$conf->t_ignore_classes_prefix          = null;         // array where values are prefix of names to ignore.\n$conf->t_ignore_interfaces_prefix       = null;         // array where values are prefix of names to ignore.\n$conf->t_ignore_traits_prefix           = null;         // array where values are prefix of names to ignore.\n$conf->t_ignore_namespaces_prefix       = null;         // array where values are prefix of names to ignore.\n$conf->t_ignore_labels_prefix           = null;         // array where values are prefix of names to ignore.\n\n$conf->parser_mode                      = 'PREFER_PHP5';// allowed modes are 'PREFER_PHP7', 'PREFER_PHP5', 'ONLY_PHP7', 'ONLY_PHP5'\n                                                        // see PHP-Parser documentation for meaning...\n\n$conf->scramble_mode                    = 'identifier'; // allowed modes are 'identifier', 'hexa', 'numeric'\n$conf->scramble_length                  = 5;            // min length of scrambled names (min = 2; max = 16 for identifier, 32 for hexa and numeric)\n\n$conf->t_obfuscate_php_extension        = array('php'); // array where values are extensions of php files to be obfuscated.\n\n$conf->obfuscate_constant_name          = true;         // self explanatory\n$conf->obfuscate_variable_name          = true;         // self explanatory\n$conf->obfuscate_function_name          = true;         // self explanatory\n$conf->obfuscate_class_name             = true;         // self explanatory\n$conf->obfuscate_interface_name         = true;         // self explanatory\n$conf->obfuscate_trait_name             = true;         // self explanatory\n$conf->obfuscate_class_constant_name    = true;         // self explanatory\n$conf->obfuscate_property_name          = true;         // self explanatory\n$conf->obfuscate_method_name            = true;         // self explanatory\n$conf->obfuscate_namespace_name         = true;         // self explanatory\n$conf->obfuscate_label_name             = true;         // label: , goto label;  obfuscation\n$conf->obfuscate_if_statement           = true;         // obfuscation of  if else elseif statements\n$conf->obfuscate_loop_statement         = true;         // obfuscation of  for while do while statements\n$conf->obfuscate_string_literal         = true;         // pseudo-obfuscation of  string literals\n\n$conf->shuffle_stmts                    = true;         // shuffle chunks of statements!  disable this obfuscation (or minimize the number of chunks) if performance is important for you!\n$conf->shuffle_stmts_min_chunk_size     =    1;         // minimum number of statements in a chunk! the min value is 1, that gives you the maximum of obfuscation ... and the minimum of performance...\n$conf->shuffle_stmts_chunk_mode         = 'fixed';      // 'fixed' or 'ratio' in fixed mode, the chunk_size is always equal to the min chunk size!\n$conf->shuffle_stmts_chunk_ratio        =   20;         // ratio > 1  100/ratio is the percentage of chunks in a statements sequence  ratio = 2 means 50%  ratio = 100 mins 1% ...\n                                                        // if you increase the number of chunks, you increase also the obfuscation level ... and you increase also the performance overhead!\n\n$conf->strip_indentation                = true;         // all your obfuscated code will be generated on a single line\n$conf->abort_on_error                   = true;         // self explanatory\n$conf->confirm                          = true;         // rfu : will answer Y on confirmation request (reserved for future use ... or not...)\n$conf->silent                           = false;        // display or not Information level messages.\n\n\n$conf->source_directory                 = null;         // self explanatory\n$conf->target_directory                 = null;         // self explanatory\n\n$conf->t_keep                           = null;         // array of directory or file pathnames, to keep 'as is' (i.e. not obfuscate.)\n$conf->t_skip                           = null;         // array of directory or file pathnames, to skip when exploring source tree structure ... they will not be on target!\n$conf->allow_and_overwrite_empty_files  = true;         // allow empty files to be kept as is\n\n$conf->max_nested_directory             =   99;\n$conf->follow_symlinks                  = false;        // WARNING: setting it to true will copy the directory instead of replicating the link...\n                                                        // WARNING: if there is a loop of links,  $conf->max_nested_directory can be created...\n\n$conf->user_comment                     = null;         // user comment to insert inside each obfuscated file\n\n$conf->extract_comment_from_line        = null;         // when both 2 are set, each obfuscated file will contain an extract of the corresponding source file,\n$conf->extract_comment_to_line          = null;         // starting from extract_comment_from_line number, and ending at extract_comment_to_line line number.\n\n?>\n"
        },
        {
          "name": "yakpro-po.php",
          "type": "blob",
          "size": 4.1533203125,
          "content": "#!/usr/bin/env php\n<?php\n//========================================================================\n// Author:  Pascal KISSIAN\n// Resume:  http://pascal.kissian.net\n//\n// Copyright (c) 2015-2020 Pascal KISSIAN\n//\n// Published under the MIT License\n//          Consider it as a proof of concept!\n//          No warranty of any kind.\n//          Use and abuse at your own risks.\n//========================================================================\nif (isset($_SERVER[\"SERVER_SOFTWARE\"]) && ($_SERVER[\"SERVER_SOFTWARE\"]!=\"\") ){ echo \"<h1>Comand Line Interface Only!</h1>\"; die; }\n\n\nconst PHP_PARSER_DIRECTORY  = 'PHP-Parser';\n\n\nrequire_once 'include/check_version.php';\n\nrequire_once 'include/get_default_defined_objects.php';     // include this file before defining something....\n\n\nrequire_once 'include/classes/config.php';\nrequire_once 'include/classes/scrambler.php';\nrequire_once 'include/functions.php';\nrequire_once 'version.php';\n\ninclude      'include/retrieve_config_and_arguments.php';\n\nrequire_once 'include/classes/parser_extensions/my_autoloader.php';\nrequire_once 'include/classes/parser_extensions/my_pretty_printer.php';\nrequire_once 'include/classes/parser_extensions/my_node_visitor.php';\n\n\nif ($clean_mode && file_exists(\"$target_directory/yakpro-po/.yakpro-po-directory\") )\n{\n    if (!$conf->silent) fprintf(STDERR,\"Info:\\tRemoving directory\\t= [%s]%s\",\"$target_directory/yakpro-po\",PHP_EOL);\n    remove_directory(\"$target_directory/yakpro-po\");\n    exit(31);\n}\n\nuse PhpParser\\Error;\nuse PhpParser\\ParserFactory;\nuse PhpParser\\NodeTraverser;\nuse PhpParser\\PrettyPrinter;\n\nswitch($conf->parser_mode)\n{\n    case 'PREFER_PHP7': $parser_mode = ParserFactory::PREFER_PHP7;  break;\n    case 'PREFER_PHP5': $parser_mode = ParserFactory::PREFER_PHP5;  break;\n    case 'ONLY_PHP7':   $parser_mode = ParserFactory::ONLY_PHP7;    break;\n    case 'ONLY_PHP5':   $parser_mode = ParserFactory::ONLY_PHP5;    break;\n    default:            $parser_mode = ParserFactory::PREFER_PHP5;  break;\n}\n\n$parser = (new ParserFactory)->create($parser_mode);\n\n\n$traverser          = new NodeTraverser;\n\nif ($conf->obfuscate_string_literal)    $prettyPrinter      = new myPrettyprinter;\nelse                                    $prettyPrinter      = new PrettyPrinter\\Standard;\n\n$t_scrambler = array();\n//foreach(array('variable','function','method','property','class','class_constant','constant','label') as $scramble_what)\nforeach(array('variable','function_or_class','method','property','class_constant','constant','label') as $scramble_what)\n{\n    $t_scrambler[$scramble_what] = new Scrambler($scramble_what, $conf, ($process_mode=='directory') ? $target_directory : null);\n}\nif ($whatis!=='')\n{\n    if ($whatis[0] == '$') $whatis = substr($whatis,1);\n//    foreach(array('variable','function','method','property','class','class_constant','constant','label') as $scramble_what)\n    foreach(array('variable','function_or_class','method','property','class_constant','constant','label') as $scramble_what)\n    {\n        if ( ( $s = $t_scrambler[$scramble_what]-> unscramble($whatis)) !== '')\n        {\n            switch($scramble_what)\n            {\n                case 'variable':\n                case 'property':\n                    $prefix = '$';\n                    break;\n                default:\n                    $prefix = '';\n            }\n            echo \"$scramble_what: {$prefix}{$s}\".PHP_EOL;\n        }\n    }\n    exit(32);\n}\n\n$traverser->addVisitor(new MyNodeVisitor);\n\nswitch($process_mode)\n{\n    case 'file':\n        $obfuscated_str =  obfuscate($source_file);\n        if ($obfuscated_str===null) { exit(33);                                       }\n        if ($target_file   ===''  ) { echo $obfuscated_str.PHP_EOL.PHP_EOL; exit(34); }\n        file_put_contents($target_file,$obfuscated_str);\n        exit(0);\n    case 'directory':\n        if (isset($conf->t_skip) && is_array($conf->t_skip)) foreach($conf->t_skip as $key=>$val) $conf->t_skip[$key] = \"$source_directory/$val\";\n        if (isset($conf->t_keep) && is_array($conf->t_keep)) foreach($conf->t_keep as $key=>$val) $conf->t_keep[$key] = \"$source_directory/$val\";\n        obfuscate_directory($source_directory,\"$target_directory/yakpro-po/obfuscated\");\n        exit(0);\n}\n\n?>\n"
        }
      ]
    }
  ]
}