{
  "metadata": {
    "timestamp": 1736712067539,
    "page": 615,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "clue/stream-filter",
      "stars": 1690,
      "defaultBranch": "1.x",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1982421875,
          "content": "/.gitattributes export-ignore\n/.github/workflows/ export-ignore\n/.gitignore export-ignore\n/examples/ export-ignore\n/phpunit.xml.dist export-ignore\n/phpunit.xml.legacy export-ignore\n/tests/ export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0234375,
          "content": "/vendor/\n/composer.lock\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.767578125,
          "content": "# Changelog\n\n## 1.7.0 (2023-12-20)\n\n*   Feature: Full PHP 8.3 and PHP 8.2 compatibility.\n    (#51 by @yadaiio and #50 by @clue)\n\n*   Feature / Fix: Improve error reporting when custom error handler is used.\n    (#47 by @SimonFrings)\n\n*   Improve test suite and ensure 100% code coverage.\n    (#46 by @SimonFrings, #48 and #50 by @clue and #51 by @yadaiio)\n\n## 1.6.0 (2022-02-21)\n\n*   Feature: Support PHP 8.1 release.\n    (#45 by @clue)\n\n*   Improve documentation to use fully-qualified function names.\n    (#43 by @SimonFrings and #42 by @PaulRotmann)\n\n*   Improve test suite and use GitHub actions for continuous integration (CI).\n    (#39 and #40 by @SimonFrings)\n\n## 1.5.0 (2020-10-02)\n\n*   Feature: Improve performance by using global imports.\n    (#38 by @clue)\n\n*   Improve API documentation and add support / sponsorship info.\n    (#30 by @clue and #35 by @SimonFrings)\n\n*   Improve test suite and add `.gitattributes` to exclude dev files from exports.\n    Prepare PHP 8 support, update to PHPUnit 9 and simplify test matrix.\n    (#32 and #37 by @clue and #34 and #36 by @SimonFrings)\n\n## 1.4.1 (2019-04-09)\n\n*   Fix: Check if the function is declared before declaring it.\n    (#23 by @Niko9911)\n\n*   Improve test suite to also test against PHP 7.2 and\n    add test for base64 encoding and decoding filters.\n    (#22 by @arubacao and #25 by @Nyholm and @clue)\n\n## 1.4.0 (2017-08-18)\n\n*   Feature / Fix: The `fun()` function does not pass filter parameter `null`\n    to underlying `stream_filter_append()` by default\n    (#15 by @Nyholm)\n\n    Certain filters (such as `convert.quoted-printable-encode`) do not accept\n    a filter parameter at all. If no explicit filter parameter is given, we no\n    longer pass a default `null` value.\n\n    ```php\n    $encode = Filter\\fun('convert.quoted-printable-encode');\n    assert('t=C3=A4st' === $encode('tÃ¤st'));\n    ```\n\n*   Add examples and improve documentation\n    (#13 and #20 by @clue and #18 by @Nyholm)\n\n*   Improve test suite by adding PHPUnit to require-dev,\n    fix HHVM build for now again and ignore future HHVM build errors,\n    lock Travis distro so new future defaults will not break the build\n    and test on PHP 7.1\n    (#12, #14 and #19 by @clue and #16 by @Nyholm)\n\n## 1.3.0 (2015-11-08)\n\n*   Feature: Support accessing built-in filters as callbacks\n    (#5 by @clue)\n\n    ```php\n    $fun = Filter\\fun('zlib.deflate');\n\n    $ret = $fun('hello') . $fun('world') . $fun();\n    assert('helloworld' === gzinflate($ret));\n    ```\n\n## 1.2.0 (2015-10-23)\n\n* Feature: Invoke close event when closing filter (flush buffer)\n  (#9 by @clue)\n\n## 1.1.0 (2015-10-22)\n\n* Feature: Abort filter operation when catching an Exception\n  (#10 by @clue)\n\n* Feature: Additional safeguards to prevent filter state corruption\n  (#7 by @clue)\n\n## 1.0.0 (2015-10-18)\n\n* First tagged release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Christian LÃ¼ck\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.6787109375,
          "content": "# clue/stream-filter\n\n[![CI status](https://github.com/clue/stream-filter/actions/workflows/ci.yml/badge.svg)](https://github.com/clue/stream-filter/actions)\n[![installs on Packagist](https://img.shields.io/packagist/dt/clue/stream-filter?color=blue&label=installs%20on%20Packagist)](https://packagist.org/packages/clue/stream-filter)\n\nA simple and modern approach to stream filtering in PHP\n\n**Table of contents**\n\n* [Why?](#why)\n* [Support us](#support-us)\n* [Usage](#usage)\n    * [append()](#append)\n    * [prepend()](#prepend)\n    * [fun()](#fun)\n    * [remove()](#remove)\n* [Install](#install)\n* [Tests](#tests)\n* [License](#license)\n\n## Why?\n\nPHP's stream filtering system is great!\n\nIt offers very powerful stream filtering options and comes with a useful set of built-in filters.\nThese filters can be used to easily and efficiently perform various transformations on-the-fly, such as:\n\n* read from a gzip'ed input file,\n* transcode from ISO-8859-1 (Latin1) to UTF-8,\n* write to a bzip output file\n* and much more.\n\nBut let's face it:\nIts API is [*difficult to work with*](https://www.php.net/manual/en/php-user-filter.filter.php)\nand its documentation is [*subpar*](https://stackoverflow.com/questions/27103269/what-is-a-bucket-brigade).\nThis combined means its powerful features are often neglected.\n\nThis project aims to make these features more accessible to a broader audience.\n* **Lightweight, SOLID design** -\n  Provides a thin abstraction that is [*just good enough*](https://en.wikipedia.org/wiki/Principle_of_good_enough)\n  and does not get in your way.\n  Custom filters require trivial effort.\n* **Good test coverage** -\n  Comes with an automated tests suite and is regularly tested in the *real world*\n\n## Support us\n\nWe invest a lot of time developing, maintaining and updating our awesome\nopen-source projects. You can help us sustain this high-quality of our work by\n[becoming a sponsor on GitHub](https://github.com/sponsors/clue). Sponsors get\nnumerous benefits in return, see our [sponsoring page](https://github.com/sponsors/clue)\nfor details.\n\nLet's take these projects to the next level together! ðŸš€\n\n## Usage\n\nThis lightweight library consists only of a few simple functions.\nAll functions reside under the `Clue\\StreamFilter` namespace.\n\nThe below examples refer to all functions with their fully-qualified names like this:\n\n```php\nClue\\StreamFilter\\append(â€¦);\n```\n\nAs of PHP 5.6+ you can also import each required function into your code like this:\n\n```php\nuse function Clue\\StreamFilter\\append;\n\nappend(â€¦);\n```\n\nAlternatively, you can also use an import statement similar to this:\n\n```php\nuse Clue\\StreamFilter as Filter;\n\nFilter\\append(â€¦);\n```\n\n### append()\n\nThe `append(resource<stream> $stream, callable $callback, int $read_write = STREAM_FILTER_ALL): resource<stream filter>` function can be used to\nappend a filter callback to the given stream.\n\nEach stream can have a list of filters attached.\nThis function appends a filter to the end of this list.\n\nIf the given filter can not be added, it throws an `Exception`.\n\nThe `$stream` can be any valid stream resource, such as:\n\n```php\n$stream = fopen('demo.txt', 'w+');\n```\n\nThe `$callback` should be a valid callable function which accepts \nan individual chunk of data and should return the updated chunk:\n\n```php\n$filter = Clue\\StreamFilter\\append($stream, function ($chunk) {\n    // will be called each time you read or write a $chunk to/from the stream\n    return $chunk;\n});\n```\n\nAs such, you can also use native PHP functions or any other `callable`:\n\n```php\nClue\\StreamFilter\\append($stream, 'strtoupper');\n\n// will write \"HELLO\" to the underlying stream\nfwrite($stream, 'hello');\n```\n\nIf the `$callback` accepts invocation without parameters,\nthen this signature will be invoked once ending (flushing) the filter:\n\n```php\nClue\\StreamFilter\\append($stream, function ($chunk = null) {\n    if ($chunk === null) {\n        // will be called once ending the filter\n        return 'end';\n    }\n    // will be called each time you read or write a $chunk to/from the stream\n    return $chunk;\n});\n\nfclose($stream);\n```\n\n> Note: Legacy PHP versions (PHP < 5.4) do not support passing additional data\nfrom the end signal handler if the stream is being closed.\n\nIf your callback throws an `Exception`, then the filter process will be aborted.\nIn order to play nice with PHP's stream handling,\nthe `Exception` will be transformed to a PHP warning instead:\n\n```php\nClue\\StreamFilter\\append($stream, function ($chunk) {\n    throw new \\RuntimeException('Unexpected chunk');\n});\n\n// raises an E_USER_WARNING with \"Error invoking filter: Unexpected chunk\"\nfwrite($stream, 'hello');\n```\n\nThe optional `$read_write` parameter can be used to only invoke the `$callback`\nwhen either writing to the stream or only when reading from the stream:\n\n```php\nClue\\StreamFilter\\append($stream, function ($chunk) {\n    // will be called each time you write to the stream\n    return $chunk;\n}, STREAM_FILTER_WRITE);\n\nClue\\StreamFilter\\append($stream, function ($chunk) {\n    // will be called each time you read from the stream\n    return $chunk;\n}, STREAM_FILTER_READ);\n```\n\nThis function returns a filter resource which can be passed to [`remove()`](#remove).\n\n> Note that once a filter has been added to stream, the stream can no longer be passed to\n> [`stream_select()`](https://www.php.net/manual/en/function.stream-select.php)\n> (and family).\n>\n> > Warning: stream_select(): cannot cast a filtered stream on this system in {file} on line {line}\n>\n> This is due to limitations of PHP's stream filter support, as it can no longer reliably\n> tell when the underlying stream resource is actually ready.\n> As an alternative, consider calling `stream_select()` on the unfiltered stream and\n> then pass the unfiltered data through the [`fun()`](#fun) function.\n\n### prepend()\n\nThe `prepend(resource<stream> $stream, callable $callback, int $read_write = STREAM_FILTER_ALL): resource<stream filter>` function can be used to\nprepend a filter callback to the given stream.\n\nEach stream can have a list of filters attached.\nThis function prepends a filter to the start of this list.\n\nIf the given filter can not be added, it throws an `Exception`.\n\n```php\n$filter = Clue\\StreamFilter\\prepend($stream, function ($chunk) {\n    // will be called each time you read or write a $chunk to/from the stream\n    return $chunk;\n});\n```\n\nThis function returns a filter resource which can be passed to [`remove()`](#remove).\n\nExcept for the position in the list of filters, this function behaves exactly\nlike the [`append()`](#append) function.\nFor more details about its behavior, see also the [`append()`](#append) function.\n\n### fun()\n\nThe `fun(string $filter, mixed $parameters = null): callable` function can be used to\ncreate a filter function which uses the given built-in `$filter`.\n\nPHP comes with a useful set of [built-in filters](https://www.php.net/manual/en/filters.php).\nUsing `fun()` makes accessing these as easy as passing an input string to filter\nand getting the filtered output string.\n\n```php\n$fun = Clue\\StreamFilter\\fun('string.rot13');\n\nassert('grfg' === $fun('test'));\nassert('test' === $fun($fun('test'));\n```\n\nPlease note that not all filter functions may be available depending \non installed PHP extensions and the PHP version in use.\nIn particular, [HHVM](https://hhvm.com/) may not offer the same filter functions\nor parameters as Zend PHP.\nAccessing an unknown filter function will result in a `RuntimeException`:\n\n```php\nClue\\StreamFilter\\fun('unknown'); // throws RuntimeException\n```\n\nSome filters may accept or require additional filter parameters â€“ most\nfilters do not require filter parameters.\nIf given, the optional `$parameters` argument will be passed to the\nunderlying filter handler as-is.\nIn particular, note how *not passing* this parameter at all differs from\nexplicitly passing a `null` value (which many filters do not accept).\nPlease refer to the individual filter definition for more details.\nFor example, the `string.strip_tags` filter can be invoked like this:\n\n```php\n$fun = Clue\\StreamFilter\\fun('string.strip_tags', '<a><b>');\n\n$ret = $fun('<b>h<br>i</b>');\nassert('<b>hi</b>' === $ret);\n```\n\nUnder the hood, this function allocates a temporary memory stream, so it's\nrecommended to clean up the filter function after use.\nAlso, some filter functions (in particular the\n[zlib compression filters](https://www.php.net/manual/en/filters.compression.php))\nmay use internal buffers and may emit a final data chunk on close.\nThe filter function can be closed by invoking without any arguments:\n\n```php\n$fun = Clue\\StreamFilter\\fun('zlib.deflate');\n\n$ret = $fun('hello') . $fun('world') . $fun();\nassert('helloworld' === gzinflate($ret));\n```\n\nThe filter function must not be used anymore after it has been closed.\nDoing so will result in a `RuntimeException`:\n\n```php\n$fun = Clue\\StreamFilter\\fun('string.rot13');\n$fun();\n\n$fun('test'); // throws RuntimeException\n```\n\n> Note: If you're using the zlib compression filters, then you should be wary\nabout engine inconsistencies between different PHP versions and HHVM.\nThese inconsistencies exist in the underlying PHP engines and there's little we\ncan do about this in this library.\n[Our test suite](tests/) contains several test cases that exhibit these issues.\nIf you feel some test case is missing or outdated, we're happy to accept PRs! :)\n\n### remove()\n\nThe `remove(resource<stream filter> $filter): bool` function can be used to\nremove a filter previously added via [`append()`](#append) or [`prepend()`](#prepend).\n\n```php\n$filter = Clue\\StreamFilter\\append($stream, function () {\n    // â€¦\n});\nClue\\StreamFilter\\remove($filter);\n```\n\n## Install\n\nThe recommended way to install this library is [through Composer](https://getcomposer.org/).\n[New to Composer?](https://getcomposer.org/doc/00-intro.md)\n\nThis project follows [SemVer](https://semver.org/).\nThis will install the latest supported version:\n\n```bash\n$ composer require clue/stream-filter:^1.7\n```\n\nSee also the [CHANGELOG](CHANGELOG.md) for details about version upgrades.\n\nThis project aims to run on any platform and thus does not require any PHP\nextensions and supports running on legacy PHP 5.3 through current PHP 8+ and\nHHVM.\nIt's *highly recommended to use the latest supported PHP version* for this project.\nOlder PHP versions may suffer from a number of inconsistencies documented above.\n\n## Tests\n\nTo run the test suite, you first need to clone this repo and then install all\ndependencies [through Composer](https://getcomposer.org/):\n\n```bash\n$ composer install\n```\n\nTo run the test suite, go to the project root and run:\n\n```bash\n$ vendor/bin/phpunit\n```\n\n## License\n\nThis project is released under the permissive [MIT license](LICENSE).\n\n> Did you know that I offer custom development services and issuing invoices for\n  sponsorships of releases and for contributions? Contact me (@clue) for details.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.8486328125,
          "content": "{\n    \"name\": \"clue/stream-filter\",\n    \"description\": \"A simple and modern approach to stream filtering in PHP\",\n    \"keywords\": [\"stream\", \"callback\", \"filter\", \"php_user_filter\", \"stream_filter_append\", \"stream_filter_register\", \"bucket brigade\"],\n    \"homepage\": \"https://github.com/clue/stream-filter\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Christian LÃ¼ck\",\n            \"email\": \"christian@clue.engineering\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=5.3\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^9.6 || ^5.7 || ^4.8.36\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Clue\\\\StreamFilter\\\\\": \"src/\"\n        },\n        \"files\": [\n            \"src/functions_include.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Clue\\\\Tests\\\\StreamFilter\\\\\": \"tests/\"\n        }\n    }\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.7236328125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!-- PHPUnit configuration file with new format for PHPUnit 9.6+ -->\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.6/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         cacheResult=\"false\"\n         colors=\"true\"\n         convertDeprecationsToExceptions=\"true\">\n    <testsuites>\n        <testsuite name=\"Stream Filter Test Suite\">\n            <directory>./tests/</directory>\n        </testsuite>\n    </testsuites>\n    <coverage>\n        <include>\n            <directory>./src/</directory>\n        </include>\n    </coverage>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\" />\n    </php>\n</phpunit>\n"
        },
        {
          "name": "phpunit.xml.legacy",
          "type": "blob",
          "size": 0.5810546875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!-- PHPUnit configuration file with old format for legacy PHPUnit -->\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/4.8/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\">\n    <testsuites>\n        <testsuite name=\"Stream Filter Test Suite\">\n            <directory>./tests/</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist>\n            <directory>./src/</directory>\n        </whitelist>\n    </filter>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}