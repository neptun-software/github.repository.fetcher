{
  "metadata": {
    "timestamp": 1736712071865,
    "page": 626,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "barbushin/php-imap",
      "stars": 1676,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codeclimate.yml",
          "type": "blob",
          "size": 0.8212890625,
          "content": "# Advanced Configuration for CodeClimate: https://docs.codeclimate.com/docs\nlanguages:\n  PHP: true\nexclude_paths: [\"tests/*\", \"examples/*\"]\nversion: \"2\"         # required to adjust maintainability checks\nchecks:\n  argument-count:\n    config:\n      threshold: 5\n  complex-logic:\n    config:\n      threshold: 4\n  file-lines:\n    config:\n      threshold: 250\n  method-complexity:\n    config:\n      threshold: 5\n  method-count:\n    config:\n      threshold: 20\n  method-lines:\n    config:\n      threshold: 40\n  nested-control-flow:\n    config:\n      threshold: 4\n  return-statements:\n    config:\n      threshold: 4\n  similar-code:\n    config:\n      threshold: # language-specific defaults. an override will affect all languages.\n  identical-code:\n    config:\n      threshold: # language-specific defaults. an override will affect all languages.\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.205078125,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.yml]\nindent_size = 2\n\n[composer.json]\nindent_style = space\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.146484375,
          "content": "# All of the vendor directory should be installed by running 'composer install'\nvendor/\ncomposer.lock\n*.phar\n.php-cs-fixer.cache\ncoverage/\npsalm/cache/\n\n#################\n## Eclipse\n#################\n\n*.pydevproject\n.project\n.metadata\n.idea\nbin/\ntmp/\n*.tmp\n*.bak\n*.swp\n*~.nib\nlocal.properties\n.classpath\n.settings/\n.loadpath\n\n# External tool builders\n.externalToolBuilders/\n\n# Locally stored \"Eclipse launch configurations\"\n*.launch\n\n# CDT-specific\n.cproject\n\n# PDT-specific\n.buildpath\n\n\n#################\n## Visual Studio\n#################\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n[Dd]ebug/\n[Rr]elease/\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.vspscc\n.builds\n*.dotCover\n\n## TODO: If you have NuGet Package Restore enabled, uncomment this\n#packages/\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n\n# Visual Studio profiler\n*.psess\n*.vsp\n\n# ReSharper is a .NET coding add-in\n_ReSharper*\n\n# Installshield output folder\n[Ee]xpress\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish\n\n# Others\n[Bb]in\n[Oo]bj\nsql\nTestResults\n*.Cache\nClientBin\nstylecop.*\n~$*\n*.dbmdl\nGenerated_Code #added for RIA/Silverlight projects\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\n\n\n\n############\n## Windows\n############\n\n# Windows image file caches\nThumbs.db\n\n# Folder config file\nDesktop.ini\n\n\n#############\n## Python\n#############\n\n*.py[co]\n\n# Packages\n*.egg\n*.egg-info\ndist\nbuild\neggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\nclover.xml\n\n#Translations\n*.mo\n\n#Mr Developer\n.mr.developer.cfg\n\n# Mac crap\n.DS_Store\n\n# NetBeans IDE\nnbproject/\n\n# Visual Studio Code\n.vscode/\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 1.3798828125,
          "content": "<?php\n/*\n * This document has been generated with\n * https://mlocati.github.io/php-cs-fixer-configurator/#version:3.0.0-rc.1|configurator\n * you can change this configuration by importing this file.\n */\nreturn (new PhpCsFixer\\Config())\n    ->setRiskyAllowed(true)\n    ->setRules([\n        '@Symfony' => true,\n        '@Symfony:risky' => true,\n        '@PHP71Migration' => true, // @PHP72Migration does not exist\n        '@PHP71Migration:risky' => true, // @PHP72Migration:risky does not exist\n        'array_syntax' => ['syntax' => 'short'],\n        'declare_strict_types' => true,\n        'global_namespace_import' => [\n            'import_classes' => true,\n            'import_constants' => true,\n            'import_functions' => false,\n        ],\n        'native_constant_invocation' => true,\n        'native_function_invocation' => [\n            'strict' => false,\n            'include' => ['@compiler_optimized'],\n        ],\n        'no_superfluous_phpdoc_tags' => true,\n        'ordered_class_elements' => true,\n        'ordered_imports' => true,\n        'php_unit_dedicate_assert' => ['target' => 'newest'],\n        'php_unit_method_casing' => true,\n        'php_unit_test_case_static_method_calls' => ['call_type' => 'this'],\n        'phpdoc_to_comment' => false,\n        'void_return' => true,\n    ])\n    ->setFinder(PhpCsFixer\\Finder::create()\n        ->exclude('vendor')\n        ->in(__DIR__)\n    )\n;\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2012 Sergey Barbushin <barbushin@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.892578125,
          "content": "# PHP IMAP\n\n[![GitHub release](https://img.shields.io/github/release/barbushin/php-imap.svg?style=flat-square)](https://packagist.org/packages/php-imap/php-imap)\n[![Supported PHP Version](https://img.shields.io/packagist/php-v/php-imap/php-imap.svg)](README.md)\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE)\n[![Packagist](https://img.shields.io/packagist/dt/php-imap/php-imap.svg?style=flat-square)](https://packagist.org/packages/php-imap/php-imap)\n\n[![CI PHP Unit Tests](https://github.com/barbushin/php-imap/actions/workflows/php_unit_tests.yml/badge.svg?branch=master)](https://github.com/barbushin/php-imap/actions/workflows/php_unit_tests.yml)\n[![CI PHP Static Analysis](https://github.com/barbushin/php-imap/actions/workflows/php_static_analysis.yml/badge.svg?branch=master)](https://github.com/barbushin/php-imap/actions/workflows/php_static_analysis.yml)\n[![CI PHP Code Coverage](https://github.com/barbushin/php-imap/actions/workflows/php_code_coverage.yml/badge.svg?branch=master)](https://github.com/barbushin/php-imap/actions/workflows/php_code_coverage.yml)\n\n[![Maintainability](https://api.codeclimate.com/v1/badges/02f72a4fd695cb7e2976/maintainability)](https://codeclimate.com/github/barbushin/php-imap/maintainability)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/02f72a4fd695cb7e2976/test_coverage)](https://codeclimate.com/github/barbushin/php-imap/test_coverage)\n[![Type Coverage](https://shepherd.dev/github/barbushin/php-imap/coverage.svg)](https://shepherd.dev/github/barbushin/php-imap)\n\nInitially released in December 2012, the PHP IMAP Mailbox is a powerful and open source library to connect to a mailbox by POP3, IMAP and NNTP using the PHP IMAP extension. This library allows you to fetch emails from your email server. Extend the functionality or create powerful web applications to handle your incoming emails.\n\n### Features\n\n* Connect to mailbox by POP3/IMAP/NNTP, using [PHP IMAP extension](http://php.net/manual/book.imap.php)\n* Get emails with attachments and inline images\n* Get emails filtered or sorted by custom criteria\n* Mark emails as seen/unseen\n* Delete emails\n* Manage mailbox folders\n\n### Requirements\n\n| PHP Version  | php-imap Version | php-imap status |\n| ------------- | ------------- | ------------- |\n| 5.6  | 3.x  | End of life |\n| 7.0  | 3.x  | End of life |\n| 7.1  | 3.x  | End of life |\n| 7.2  | 3.x, 4.x | End of life |\n| 7.3  | 3.x, 4.x | End of life |\n| 7.4  | >3.0.33, 4.x, 5.x | Active support |\n| 8.0  | >3.0.33, 4.x, 5.x | Active support |\n| 8.1  | >4.3.0, 5.x | Active support |\n\n* PHP `fileinfo` extension must be present; so make sure this line is active in your php.ini: `extension=php_fileinfo.dll`\n* PHP `iconv` extension must be present; so make sure this line is active in your php.ini: `extension=php_iconv.dll`\n* PHP `imap` extension must be present; so make sure this line is active in your php.ini: `extension=php_imap.dll`\n* PHP `mbstring` extension must be present; so make sure this line is active in your php.ini: `extension=php_mbstring.dll`\n* PHP `json` extension must be present; so make sure this line is active in your php.ini: `extension=json.dll`\n\n### Installation by Composer\n\nInstall the [latest available release](https://github.com/barbushin/php-imap/releases):\n\n\t$ composer require php-imap/php-imap\n\nInstall the latest available and stable source code from `master`, which is may not released / tagged yet:\n\n\t$ composer require php-imap/php-imap:dev-master\n\n### Run Tests\n\nBefore you can run the any tests you may need to run `composer install` to install all (development) dependencies.\n\n#### Run all tests\n\nYou can run all available tests by running the following command (inside of the installed `php-imap` directory): `composer run tests`\n\n#### Run only PHPUnit tests\n\nYou can run all PHPUnit tests by running the following command (inside of the installed `php-imap` directory): `php vendor/bin/phpunit --testdox`\n\n### Integration with frameworks\n\n* Symfony - https://github.com/secit-pl/imap-bundle\n\n### Getting Started Example\n\nBelow, you'll find an example code how you can use this library. For further information and other examples, you may take a look at the [wiki](https://github.com/barbushin/php-imap/wiki).\n\nBy default, this library uses random filenames for attachments as identical file names from other emails would overwrite other attachments. If you want to keep the original file name, you can set the attachment filename mode to ``true``, but then you also need to ensure, that those files don't get overwritten by other emails for example.\n\n```php\n// Create PhpImap\\Mailbox instance for all further actions\n$mailbox = new PhpImap\\Mailbox(\n\t'{imap.gmail.com:993/imap/ssl}INBOX', // IMAP server and mailbox folder\n\t'some@gmail.com', // Username for the before configured mailbox\n\t'*********', // Password for the before configured username\n\t__DIR__, // Directory, where attachments will be saved (optional)\n\t'UTF-8', // Server encoding (optional)\n    true, // Trim leading/ending whitespaces of IMAP path (optional)\n    false // Attachment filename mode (optional; false = random filename; true = original filename)\n);\n\n// set some connection arguments (if appropriate)\n$mailbox->setConnectionArgs(\n    CL_EXPUNGE // expunge deleted mails upon mailbox close\n    | OP_SECURE // don't do non-secure authentication\n);\n\ntry {\n\t// Get all emails (messages)\n\t// PHP.net imap_search criteria: http://php.net/manual/en/function.imap-search.php\n\t$mailsIds = $mailbox->searchMailbox('ALL');\n} catch(PhpImap\\Exceptions\\ConnectionException $ex) {\n\techo \"IMAP connection failed: \" . implode(\",\", $ex->getErrors('all'));\n\tdie();\n}\n\n// If $mailsIds is empty, no emails could be found\nif(!$mailsIds) {\n\tdie('Mailbox is empty');\n}\n\n// Get the first message\n// If '__DIR__' was defined in the first line, it will automatically\n// save all attachments to the specified directory\n$mail = $mailbox->getMail($mailsIds[0]);\n\n// Show, if $mail has one or more attachments\necho \"\\nMail has attachments? \";\nif($mail->hasAttachments()) {\n\techo \"Yes\\n\";\n} else {\n\techo \"No\\n\";\n}\n\n// Print all information of $mail\nprint_r($mail);\n\n// Print all attachements of $mail\necho \"\\n\\nAttachments:\\n\";\nprint_r($mail->getAttachments());\n```\n\nMethod `imap()` allows to call any [PHP IMAP function](https://www.php.net/manual/ref.imap.php) in a context of the instance. Example:\n\n```php\n// Call imap_check() - see http://php.net/manual/function.imap-check.php\n$info = $mailbox->imap('check');\n\n\n// Show current time for the mailbox\n$currentServerTime = isset($info->Date) && $info->Date ? date('Y-m-d H:i:s', strtotime($info->Date)) : 'Unknown';\n\necho $currentServerTime;\n```\n\nSome request require much time and resources:\n\n```php\n// If you don't need to grab attachments you can significantly increase performance of your application\n$mailbox->setAttachmentsIgnore(true);\n\n// get the list of folders/mailboxes\n$folders = $mailbox->getMailboxes('*');\n\n// loop through mailboxs\nforeach($folders as $folder) {\n\n\t// switch to particular mailbox\n\t$mailbox->switchMailbox($folder['fullpath']);\n\n\t// search in particular mailbox\n\t$mails_ids[$folder['fullpath']] = $mailbox->searchMailbox('SINCE \"1 Jan 2018\" BEFORE \"28 Jan 2018\"');\n}\n\nprint_r($mails_ids);\n```\n\n### Upgrading from 3.x\n\nPrior to 3.1, `Mailbox` used a \"magic\" method (`Mailbox::imap()`), with the\nclass `Imap` now performing it's purpose to call many `imap_*` functions with\nautomated string encoding/decoding of arguments and return values:\n\nBefore:\n\n```php\n    public function checkMailbox()\n    {\n        return $this->imap('check');\n    }\n```\n\nAfter:\n\n```php\n    public function checkMailbox(): object\n    {\n        return Imap::check($this->getImapStream());\n    }\n```\n\n### Recommended\n\n* Google Chrome extension [PHP Console](https://chrome.google.com/webstore/detail/php-console/nfhmhhlpfleoednkpnnnkolmclajemef)\n* Google Chrome extension [JavaScript Errors Notifier](https://chrome.google.com/webstore/detail/javascript-errors-notifie/jafmfknfnkoekkdocjiaipcnmkklaajd)\n"
        },
        {
          "name": "composer-require-checker.config.json",
          "type": "blob",
          "size": 0.4140625,
          "content": "{\n    \"symbol-whitelist\" : [\n        \"null\", \"true\", \"false\",\n        \"static\", \"self\", \"parent\",\n        \"array\", \"string\", \"int\", \"float\", \"bool\", \"iterable\", \"callable\", \"void\", \"object\", \"mixed\", \"never\",\n        \"IMAP\\\\Connection\"\n    ],\n    \"php-core-extensions\" : [\n        \"Core\",\n        \"date\",\n        \"pcre\",\n        \"Phar\",\n        \"Reflection\",\n        \"SPL\",\n        \"standard\"\n    ],\n    \"scan-files\" : []\n}\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.1552734375,
          "content": "{\n    \"name\": \"php-imap/php-imap\",\n    \"description\": \"Manage mailboxes, filter/get/delete emails in PHP (supports IMAP/POP3/NNTP)\",\n    \"keywords\": [\n        \"PHP\",\n        \"mail\",\n        \"IMAP\",\n        \"POP3\",\n        \"mailbox\",\n        \"receive emails\"\n    ],\n    \"homepage\": \"https://github.com/barbushin/php-imap\",\n    \"license\": \"MIT\",\n    \"type\": \"library\",\n    \"authors\": [\n        {\n            \"name\": \"Sergey Barbushin\",\n            \"homepage\": \"http://linkedin.com/in/barbushin\",\n            \"email\": \"barbushin@gmail.com\"\n        }\n    ],\n    \"config\": {\n        \"sort-packages\": true\n    },\n    \"require\": {\n        \"php\": \"^7.4 || ^8.0\",\n        \"ext-fileinfo\": \"*\",\n        \"ext-iconv\": \"*\",\n        \"ext-imap\": \"*\",\n        \"ext-mbstring\": \"*\",\n        \"ext-json\": \"*\"\n    },\n    \"require-dev\": {\n        \"friendsofphp/php-cs-fixer\": \"^3.4\",\n        \"maglnet/composer-require-checker\": \"^2.0|^3.2\",\n        \"nikic/php-parser\": \"^4.3,<4.7|^4.10\",\n        \"paragonie/hidden-string\": \"^1.0\",\n        \"php-parallel-lint/php-parallel-lint\": \"^1.3\",\n        \"phpunit/phpunit\": \"^8.5|^9.5\",\n        \"povils/phpmnd\": \"^2.2\",\n        \"psalm/plugin-phpunit\": \"^0.10.0|^0.15.1\",\n        \"roave/security-advisories\": \"dev-master\",\n        \"sebastian/phpcpd\": \"^4.1|^6.0\"\n    },\n    \"scripts\": {\n        \"static-analysis\": [\n            \"parallel-lint .php-cs-fixer.dist.php src tests examples\",\n            \"phpcpd src tests\",\n            \"composer-require-checker check --config-file=composer-require-checker.config.json ./composer.json\",\n            \"phpmnd ./ --exclude=./.github/ --exclude=./examples/ --exclude=./vendor/ --non-zero-exit-on-violation --hint\",\n            \"php-cs-fixer fix --allow-risky=yes --no-interaction --dry-run -v\",\n            \"psalm --show-info=false\"\n        ],\n        \"tests\": [\n            \"@static-analysis\",\n            \"phpunit --testdox\"\n        ]\n    },\n    \"suggest\": {\n        \"ext-fileinfo\": \"To facilitate IncomingMailAttachment::getFileInfo() auto-detection\"\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"PhpImap\\\\\": \"tests/unit\"\n        }\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"PhpImap\\\\\": \"src/PhpImap\"\n        }\n    }\n}\n"
        },
        {
          "name": "coverage",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.7431640625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    bootstrap=\"vendor/autoload.php\"\n    verbose=\"true\"\n    stopOnError=\"false\"\n    stopOnFailure=\"false\"\n    stopOnIncomplete=\"false\"\n    stopOnSkipped=\"false\"\n    convertErrorsToExceptions=\"true\"\n    convertNoticesToExceptions=\"true\"\n    convertWarningsToExceptions=\"true\"\n    colors=\"true\"\n    forceCoversAnnotation=\"false\"\n    processIsolation=\"false\"\n    xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\">\n  <coverage>\n    <include>\n      <directory>src</directory>\n    </include>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"php-imap Tests\">\n      <directory>tests</directory>\n    </testsuite>\n  </testsuites>\n</phpunit>\n"
        },
        {
          "name": "psalm.baseline.xml",
          "type": "blob",
          "size": 2.1025390625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<files psalm-version=\"3.12.2@7c7ebd068f8acaba211d4a2c707c4ba90874fa26\">\n  <file src=\"examples/get_and_parse_all_emails_without_saving_attachments.php\">\n    <UnusedVariable occurrences=\"1\">\n      <code>$mailbox</code>\n    </UnusedVariable>\n  </file>\n  <file src=\"src/PhpImap/Imap.php\">\n    <DocblockTypeContradiction occurrences=\"3\">\n      <code>\\is_int($section)</code>\n      <code>!\\is_string($section) &amp;&amp; !\\is_int($section)</code>\n      <code>\\is_resource($maybe)</code>\n    </DocblockTypeContradiction>\n  </file>\n  <file src=\"src/PhpImap/Mailbox.php\">\n    <DocblockTypeContradiction occurrences=\"2\">\n      <code>\\in_array($imapSearchOption, $supported_options, true)</code>\n      <code>\\in_array($key, $supported_params, true)</code>\n    </DocblockTypeContradiction>\n    <InvalidArgument occurrences=\"3\">\n      <code>$element-&gt;charset</code>\n      <code>$element-&gt;text</code>\n      <code>$element-&gt;text</code>\n    </InvalidArgument>\n    <PossiblyUnusedMethod occurrences=\"24\">\n      <code>setConnectionRetry</code>\n      <code>setConnectionRetryDelay</code>\n      <code>setExpungeOnDisconnect</code>\n      <code>renameMailbox</code>\n      <code>getListingFolders</code>\n      <code>searchMailboxFrom</code>\n      <code>searchMailboxFromDisableServerEncoding</code>\n      <code>searchMailboxMergeResults</code>\n      <code>searchMailboxMergeResultsDisableServerEncoding</code>\n      <code>saveMail</code>\n      <code>moveMail</code>\n      <code>copyMail</code>\n      <code>markMailAsUnread</code>\n      <code>markMailAsImportant</code>\n      <code>markMailsAsRead</code>\n      <code>markMailsAsUnread</code>\n      <code>markMailsAsImportant</code>\n      <code>getMailboxHeaders</code>\n      <code>getMailboxInfo</code>\n      <code>getQuotaLimit</code>\n      <code>getQuotaUsage</code>\n      <code>getSubscribedMailboxes</code>\n      <code>subscribeMailbox</code>\n      <code>unsubscribeMailbox</code>\n    </PossiblyUnusedMethod>\n  </file>\n  <file src=\"tests/unit/MailboxTest.php\">\n    <InvalidArgument occurrences=\"1\">\n      <code>self::ANYTHING</code>\n    </InvalidArgument>\n  </file>\n</files>\n"
        },
        {
          "name": "psalm.xml",
          "type": "blob",
          "size": 1.107421875,
          "content": "<?xml version=\"1.0\"?>\n<psalm\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"https://getpsalm.org/schema/config\"\n    name=\"Psalm for php-imap\"\n    useDocblockTypes=\"true\"\n    errorLevel=\"1\"\n    strictBinaryOperands=\"false\"\n    rememberPropertyAssignmentsAfterCall=\"true\"\n    checkForThrowsDocblock=\"false\"\n    throwExceptionOnError=\"0\"\n    findUnusedCode=\"false\"\n    ensureArrayStringOffsetsExist=\"true\"\n    ensureArrayIntOffsetsExist=\"true\"\n    resolveFromConfigFile=\"true\"\n    xsi:schemaLocation=\"https://getpsalm.org/schema/config config.xsd\"\n    limitMethodComplexity=\"true\"\n    errorBaseline=\"./psalm.baseline.xml\"\n    cacheDirectory=\"./psalm/cache/\"\n    findUnusedPsalmSuppress=\"true\"\n>\n    <projectFiles>\n        <file name=\"./.php-cs-fixer.dist.php\"/>\n        <directory name=\"src\"/>\n        <ignoreFiles>\n            <directory name=\"tests\"/>\n            <directory name=\"examples\"/>\n            <directory name=\"vendor\"/>\n        </ignoreFiles>\n    </projectFiles>\n\n    <issueHandlers>\n    </issueHandlers>\n    <plugins>\n        <pluginClass class=\"Psalm\\PhpUnitPlugin\\Plugin\"/>\n    </plugins>\n</psalm>\n"
        },
        {
          "name": "psalm",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}