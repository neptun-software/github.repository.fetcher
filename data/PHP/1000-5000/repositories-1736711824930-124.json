{
  "metadata": {
    "timestamp": 1736711824930,
    "page": 124,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "symfony/framework-bundle",
      "stars": 3522,
      "defaultBranch": "7.2",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.072265625,
          "content": "/Tests export-ignore\n/phpunit.xml.dist export-ignore\n/.git* export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "vendor/\ncomposer.lock\nphpunit.xml\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 46.548828125,
          "content": "CHANGELOG\n=========\n\n7.2\n---\n\n * Add support for `--sort` option when extracting translations with `translation:extract` command and `--force` option\n * Add support for setting `headers` with `Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController`\n * Add `--resolve-env-vars` option to `lint:container` command\n * Derivate `kernel.secret` from the decryption secret when its env var is not defined\n * Make the `config/` directory optional in `MicroKernelTrait`, add support for service arguments in the\n   invokable Kernel class, and register `FrameworkBundle` by default when the `bundles.php` file is missing\n * [BC BREAK] The `secrets:decrypt-to-local` command terminates with a non-zero exit code when a secret could not be read\n * Deprecate making `cache.app` adapter taggable, use the `cache.app.taggable` adapter instead\n * Enable `json_decode_detailed_errors` in the default serializer context in debug mode by default when `seld/jsonlint` is installed\n * Register `Symfony\\Component\\Serializer\\NameConverter\\SnakeCaseToCamelCaseNameConverter` as a service named `serializer.name_converter.snake_case_to_camel_case` if available\n * Add `framework.csrf_protection.stateless_token_ids`, `.cookie_name`, and `.check_header` options to use stateless headers/cookies-based CSRF protection\n * Add `framework.form.csrf_protection.field_attr` option\n * Deprecate `session.sid_length` and `session.sid_bits_per_character` config options\n * Add the ability to use an existing service as a lock/semaphore resource\n * Add support for configuring multiple serializer instances via the configuration\n * Add support for `SYMFONY_TRUSTED_PROXIES`, `SYMFONY_TRUSTED_HEADERS`, `SYMFONY_TRUST_X_SENDFILE_TYPE_HEADER` and `SYMFONY_TRUSTED_HOSTS` env vars\n * Add `--no-fill` option to `translation:extract` command\n\n7.1\n---\n\n * Add `CheckAliasValidityPass` to `lint:container` command\n * Add `private_ranges` as a shortcut for private IP address ranges to the `trusted_proxies` option\n * Mark classes `ConfigBuilderCacheWarmer`, `Router`, `SerializerCacheWarmer`, `TranslationsCacheWarmer`, `Translator` and `ValidatorCacheWarmer` as `final`\n * Move the Router `cache_dir` to `kernel.build_dir`\n * Deprecate the `router.cache_dir` config option\n * Add `rate_limiter` tags to rate limiter services\n * Add `secrets:reveal` command\n * Add `rate_limiter` option to `http_client.default_options` and `http_client.scoped_clients`\n * Attach the workflow's configuration to the `workflow` tag\n * Add the `allowed_recipients` option for mailer to allow some users to receive\n   emails even if `recipients` is defined.\n * Reset env vars when resetting the container\n\n7.0\n---\n\n * Remove command `translation:update`, use `translation:extract` instead\n * Make the `http_method_override` config option default to `false`\n * Remove `AbstractController::renderForm()`, use `render()` instead\n * Remove the `Symfony\\Component\\Serializer\\Normalizer\\ObjectNormalizer` and\n   `Symfony\\Component\\Serializer\\Normalizer\\PropertyNormalizer` autowiring aliases, type-hint against\n   `Symfony\\Component\\Serializer\\Normalizer\\NormalizerInterface` or implement `NormalizerAwareInterface` instead\n * Remove the `Http\\Client\\HttpClient` service, use `Psr\\Http\\Client\\ClientInterface` instead\n * Remove the integration of Doctrine annotations, use native attributes instead\n * Remove `EnableLoggerDebugModePass`, use argument `$debug` of HttpKernel's `Logger` instead\n * Remove `AddDebugLogProcessorPass::configureLogger()`, use HttpKernel's `DebugLoggerConfigurator` instead\n * Make the `framework.handle_all_throwables` config option default to `true`\n * Make the `framework.php_errors.log` config option default to `true`\n * Make the `framework.session.cookie_secure` config option default to `auto`\n * Make the `framework.session.cookie_samesite` config option default to `lax`\n * Make the `framework.session.handler_id` default to null if `save_path` is not set and to `session.handler.native_file` otherwise\n * Make the `framework.uid.default_uuid_version` config option default to `7`\n * Make the `framework.uid.time_based_uuid_version` config option default to `7`\n * Make the `framework.validation.email_validation_mode` config option default to `html5`\n * Remove the `framework.validation.enable_annotations` config option, use `framework.validation.enable_attributes` instead\n * Remove the `framework.serializer.enable_annotations` config option, use `framework.serializer.enable_attributes` instead\n * Remove the `routing.loader.annotation` service, use the `routing.loader.attribute` service instead\n * Remove the `routing.loader.annotation.directory` service, use the `routing.loader.attribute.directory` service instead\n * Remove the `routing.loader.annotation.file` service, use the `routing.loader.attribute.file` service instead\n * Remove `AnnotatedRouteControllerLoader`, use `AttributeRouteControllerLoader` instead\n * Remove `AddExpressionLanguageProvidersPass`, use `Symfony\\Component\\Routing\\DependencyInjection\\AddExpressionLanguageProvidersPass` instead\n * Remove `DataCollectorTranslatorPass`, use `Symfony\\Component\\Translation\\DependencyInjection\\DataCollectorTranslatorPass` instead\n * Remove `LoggingTranslatorPass`, use `Symfony\\Component\\Translation\\DependencyInjection\\LoggingTranslatorPass` instead\n * Remove `WorkflowGuardListenerPass`, use `Symfony\\Component\\Workflow\\DependencyInjection\\WorkflowGuardListenerPass` instead\n\n6.4\n---\n\n * Add `HttpClientAssertionsTrait`\n * Add `AbstractController::renderBlock()` and `renderBlockView()`\n * Add native return type to `Translator` and to `Application::reset()`\n * Deprecate the integration of Doctrine annotations, either uninstall the `doctrine/annotations` package or disable the integration by setting `framework.annotations` to `false`\n * Enable `json_decode_detailed_errors` context for Serializer by default if `kernel.debug` is true and the `seld/jsonlint` package is installed\n * Add `DomCrawlerAssertionsTrait::assertAnySelectorTextContains(string $selector, string $text)`\n * Add `DomCrawlerAssertionsTrait::assertAnySelectorTextSame(string $selector, string $text)`\n * Add `DomCrawlerAssertionsTrait::assertAnySelectorTextNotContains(string $selector, string $text)`\n * Deprecate `EnableLoggerDebugModePass`, use argument `$debug` of HttpKernel's `Logger` instead\n * Deprecate `AddDebugLogProcessorPass::configureLogger()`, use HttpKernel's `DebugLoggerConfigurator` instead\n * Deprecate not setting the `framework.handle_all_throwables` config option; it will default to `true` in 7.0\n * Deprecate not setting the `framework.php_errors.log` config option; it will default to `true` in 7.0\n * Deprecate not setting the `framework.session.cookie_secure` config option; it will default to `auto` in 7.0\n * Deprecate not setting the `framework.session.cookie_samesite` config option; it will default to `lax` in 7.0\n * Deprecate not setting either `framework.session.handler_id` or `save_path` config options; `handler_id` will\n   default to null in 7.0 if `save_path` is not set and to `session.handler.native_file` otherwise\n * Deprecate not setting the `framework.uid.default_uuid_version` config option; it will default to `7` in 7.0\n * Deprecate not setting the `framework.uid.time_based_uuid_version` config option; it will default to `7` in 7.0\n * Deprecate not setting the `framework.validation.email_validation_mode` config option; it will default to `html5` in 7.0\n * Deprecate `framework.validation.enable_annotations`, use `framework.validation.enable_attributes` instead\n * Deprecate `framework.serializer.enable_annotations`, use `framework.serializer.enable_attributes` instead\n * Add `array $tokenAttributes = []` optional parameter to `KernelBrowser::loginUser()`\n * Add support for relative URLs in BrowserKit's redirect assertion\n * Change BrowserKitAssertionsTrait::getClient() to be protected\n * Deprecate the `framework.asset_mapper.provider` config option\n * Add `--exclude` option to the `cache:pool:clear` command\n * Add parameters deprecations to the output of `debug:container` command\n * Change `framework.asset_mapper.importmap_polyfill` from a URL to the name of an item in the importmap\n * Provide `$buildDir` when running `CacheWarmer` to build read-only resources\n * Add the global `--profile` option to the console to enable profiling commands\n * Deprecate the `routing.loader.annotation` service, use the `routing.loader.attribute` service instead\n * Deprecate the `routing.loader.annotation.directory` service, use the `routing.loader.attribute.directory` service instead\n * Deprecate the `routing.loader.annotation.file` service, use the `routing.loader.attribute.file` service instead\n * Deprecate `AnnotatedRouteControllerLoader`, use `AttributeRouteControllerLoader` instead\n * Deprecate `AddExpressionLanguageProvidersPass`, use `Symfony\\Component\\Routing\\DependencyInjection\\AddExpressionLanguageProvidersPass` instead\n * Deprecate `DataCollectorTranslatorPass`, use `Symfony\\Component\\Translation\\DependencyInjection\\DataCollectorTranslatorPass` instead\n * Deprecate `LoggingTranslatorPass`, use `Symfony\\Component\\Translation\\DependencyInjection\\LoggingTranslatorPass` instead\n * Deprecate `WorkflowGuardListenerPass`, use `Symfony\\Component\\Workflow\\DependencyInjection\\WorkflowGuardListenerPass` instead\n\n6.3\n---\n\n * Add `extra` option for `http_client.default_options` and `http_client.scoped_client`\n * Add `DomCrawlerAssertionsTrait::assertSelectorCount(int $count, string $selector)`\n * Allow to avoid `limit` definition in a RateLimiter configuration when using the `no_limit` policy\n * Add `--format` option to the `debug:config` command\n * Add support to pass namespace wildcard in `framework.messenger.routing`\n * Deprecate `framework:exceptions` tag, unwrap it and replace `framework:exception` tags' `name` attribute by `class`\n * Deprecate the `notifier.logger_notification_listener` service, use the `notifier.notification_logger_listener` service instead\n * Allow setting private services with the test container\n * Register alias for argument for workflow services with workflow name only\n * Configure the `ErrorHandler` on `FrameworkBundle::boot()`\n * Allow setting `debug.container.dump` to `false` to disable dumping the container to XML\n * Add `framework.http_cache.skip_response_headers` option\n * Display warmers duration on debug verbosity for `cache:clear` command\n * Add `AbstractController::sendEarlyHints()` to send HTTP Early Hints\n * Add autowiring aliases for `Http\\Client\\HttpAsyncClient`\n * Deprecate the `Http\\Client\\HttpClient` service, use `Psr\\Http\\Client\\ClientInterface` instead\n * Add `stop_worker_on_signals` configuration option to `messenger` to define signals which would stop a worker\n * Add support for `--all` option to clear all cache pools with `cache:pool:clear` command\n * Add `--show-aliases` option to `debug:router` command\n\n6.2\n---\n\n * Add `resolve-env` option to `debug:config` command to display actual values of environment variables in dumped configuration\n * Add `NotificationAssertionsTrait`\n * Add option `framework.handle_all_throwables` to allow `Symfony\\Component\\HttpKernel\\HttpKernel` to handle all kinds of `Throwable`\n * Make `AbstractController::render()` able to deal with forms and deprecate `renderForm()`\n * Deprecate the `Symfony\\Component\\Serializer\\Normalizer\\ObjectNormalizer` and\n   `Symfony\\Component\\Serializer\\Normalizer\\PropertyNormalizer` autowiring aliases, type-hint against\n   `Symfony\\Component\\Serializer\\Normalizer\\NormalizerInterface` or implement `NormalizerAwareInterface` instead\n * Add service usages list to the `debug:container` command output\n * Add service and alias deprecation message to `debug:container [<name>]` output\n * Tag all workflows services with `workflow`, those with type=workflow are\n   tagged with `workflow.workflow`, and those with type=state_machine with\n   `workflow.state_machine`\n * Add `rate_limiter` configuration option to `messenger.transport` to allow rate limited transports using the RateLimiter component\n * Remove `@internal` tag from secret vaults to allow them to be used directly outside the framework bundle and custom vaults to be added\n * Deprecate `framework.form.legacy_error_messages` config node\n * Add a `framework.router.cache_dir` configuration option to configure the default `Router` `cache_dir` option\n * Add option `framework.messenger.buses.*.default_middleware.allow_no_senders` to enable throwing when a message doesn't have a sender\n * Deprecate `AbstractController::renderForm()`, use `render()` instead\n * Deprecate `FrameworkExtension::registerRateLimiter()`\n\n6.1\n---\n\n * Add support for configuring semaphores\n * Environment variable `SYMFONY_IDE` is read by default when `framework.ide` config is not set\n * Load PHP configuration files by default in the `MicroKernelTrait`\n * Add `cache:pool:invalidate-tags` command\n * Add `xliff` support in addition to `xlf` for `XliffFileDumper`\n * Deprecate the `reset_on_message` config option. It can be set to `true` only and does nothing now\n * Add `trust_x_sendfile_type_header` option\n * Add support for first-class callable route controller in `MicroKernelTrait`\n * Add tag `routing.condition_service` to autoconfigure routing condition services\n * Automatically register kernel methods marked with the `Symfony\\Component\\Routing\\Annotation\\Route` attribute or annotation as controllers in `MicroKernelTrait`\n * Deprecate not setting the `http_method_override` config option. The default value will change to `false` in 7.0.\n * Add `framework.profiler.collect_serializer_data` config option, set it to `true` to enable the serializer data collector and profiler panel\n\n6.0\n---\n\n * Remove the `session.storage` alias and `session.storage.*` services, use the `session.storage.factory` alias and `session.storage.factory.*` services instead\n * Remove `framework.session.storage_id` configuration option, use the `framework.session.storage_factory_id` configuration option instead\n * Remove the `session` service and the `SessionInterface` alias, use the `\\Symfony\\Component\\HttpFoundation\\Request::getSession()` or the new `\\Symfony\\Component\\HttpFoundation\\RequestStack::getSession()` methods instead\n * Remove the `session.attribute_bag` service and `session.flash_bag` service\n * Remove the `lock.RESOURCE_NAME` and `lock.RESOURCE_NAME.store` services and the `lock`, `LockInterface`, `lock.store` and `PersistingStoreInterface` aliases, use `lock.RESOURCE_NAME.factory`, `lock.factory` or `LockFactory` instead\n * The `form.factory`, `form.type.file`, `translator`, `security.csrf.token_manager`, `serializer`,\n   `cache_clearer`, `filesystem` and `validator` services are now private\n * Remove the `output-format` and `xliff-version` options from `TranslationUpdateCommand`\n * Remove `has()`, `get()`, `getDoctrine()`n and `dispatchMessage()` from `AbstractController`, use method/constructor injection instead\n * Make the \"framework.router.utf8\" configuration option default to `true`\n * Remove the `AdapterInterface` autowiring alias, use `CacheItemPoolInterface` instead\n * Make the `profiler` service private\n * Remove all other values than \"none\", \"php_array\" and \"file\" for `framework.annotation.cache`\n * Register workflow services as private\n * Remove support for passing a `RouteCollectionBuilder` to `MicroKernelTrait::configureRoutes()`, type-hint `RoutingConfigurator` instead\n * Remove the `cache.adapter.doctrine` service\n * Remove the `framework.translator.enabled_locales` config option, use `framework.enabled_locales` instead\n * Make the `framework.messenger.reset_on_message` configuration option default to `true`\n\n5.4\n---\n\n * Add `set_locale_from_accept_language` config option to automatically set the request locale based on the `Accept-Language`\n   HTTP request header and the `framework.enabled_locales` config option\n * Add `set_content_language_from_locale` config option to automatically set the `Content-Language` HTTP response header based on the Request locale\n * Deprecate the `framework.translator.enabled_locales`, use `framework.enabled_locales` instead\n * Add autowiring alias for `HttpCache\\StoreInterface`\n * Add the ability to enable the profiler using a request query parameter, body parameter or attribute\n * Deprecate the `AdapterInterface` autowiring alias, use `CacheItemPoolInterface` instead\n * Deprecate the public `profiler` service to private\n * Deprecate `get()`, `has()`, `getDoctrine()`, and `dispatchMessage()` in `AbstractController`, use method/constructor injection instead\n * Deprecate the `cache.adapter.doctrine` service\n * Add support for resetting container services after each messenger message\n * Add `configureContainer()`, `configureRoutes()`, `getConfigDir()` and `getBundlesPath()` to `MicroKernelTrait`\n * Add support for configuring log level, and status code by exception class\n * Bind the `default_context` parameter onto serializer's encoders and normalizers\n * Add support for `statusCode` default parameter when loading a template directly from route using the `Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController` controller\n * Deprecate `translation:update` command, use `translation:extract` instead\n * Add `PhpStanExtractor` support for the PropertyInfo component\n * Add `cache.adapter.doctrine_dbal` service to replace `cache.adapter.pdo` when a Doctrine DBAL connection is used.\n\n5.3\n---\n\n * Deprecate the `session.storage` alias and `session.storage.*` services, use the `session.storage.factory` alias and `session.storage.factory.*` services instead\n * Deprecate the `framework.session.storage_id` configuration option, use the `framework.session.storage_factory_id` configuration option instead\n * Deprecate the `session` service and the `SessionInterface` alias, use the `Request::getSession()` or the new `RequestStack::getSession()` methods instead\n * Add `AbstractController::renderForm()` to render a form and set the appropriate HTTP status code\n * Add support for configuring PHP error level to log levels\n * Add the `dispatcher` option to `debug:event-dispatcher`\n * Add the `event_dispatcher.dispatcher` tag\n * Add `assertResponseFormatSame()` in `BrowserKitAssertionsTrait`\n * Add support for configuring UUID factory services\n * Add tag `assets.package` to register asset packages\n * Add support to use a PSR-6 compatible cache for Doctrine annotations\n * Deprecate all other values than \"none\", \"php_array\" and \"file\" for `framework.annotation.cache`\n * Add `KernelTestCase::getContainer()` as the best way to get a container in tests\n * Rename the container parameter `profiler_listener.only_master_requests` to `profiler_listener.only_main_requests`\n * Add service `fragment.uri_generator` to generate the URI of a fragment\n * Deprecate registering workflow services as public\n * Deprecate option `--xliff-version` of the `translation:update` command, use e.g. `--format=xlf20` instead\n * Deprecate option `--output-format` of the `translation:update` command, use e.g. `--format=xlf20` instead\n\n5.2.0\n-----\n\n * Added `framework.http_cache` configuration tree\n * Added `framework.trusted_proxies` and `framework.trusted_headers` configuration options\n * Deprecated the public `form.factory`, `form.type.file`, `translator`, `security.csrf.token_manager`, `serializer`,\n   `cache_clearer`, `filesystem` and `validator` services to private.\n * Added `TemplateAwareDataCollectorInterface` and `AbstractDataCollector` to simplify custom data collector creation and leverage autoconfiguration\n * Add `cache.adapter.redis_tag_aware` tag to use `RedisCacheAwareAdapter`\n * added `framework.http_client.retry_failing` configuration tree\n * added `assertCheckboxChecked()` and `assertCheckboxNotChecked()` in `WebTestCase`\n * added `assertFormValue()` and `assertNoFormValue()` in `WebTestCase`\n * Added \"--as-tree=3\" option to `translation:update` command to dump messages as a tree-like structure. The given value defines the level where to switch to inline YAML\n * Deprecated the `lock.RESOURCE_NAME` and `lock.RESOURCE_NAME.store` services and the `lock`, `LockInterface`, `lock.store` and `PersistingStoreInterface` aliases, use `lock.RESOURCE_NAME.factory`, `lock.factory` or `LockFactory` instead.\n\n5.1.0\n-----\n * Removed `--no-backup` option from `translation:update` command (broken since `5.0.0`)\n * Added link to source for controllers registered as named services\n * Added link to source on controller on `router:match`/`debug:router` (when `framework.ide` is configured)\n * Added the `framework.router.default_uri` configuration option to configure the default `RequestContext`\n * Made `MicroKernelTrait::configureContainer()` compatible with `ContainerConfigurator`\n * Added a new `mailer.message_bus` option to configure or disable the message bus to use to send mails.\n * Added flex-compatible default implementation for `MicroKernelTrait::registerBundles()`\n * Deprecated passing a `RouteCollectionBuilder` to `MicroKernelTrait::configureRoutes()`, type-hint `RoutingConfigurator` instead\n * The `TemplateController` now accepts context argument\n * Deprecated *not* setting the \"framework.router.utf8\" configuration option as it will default to `true` in Symfony 6.0\n * Added tag `routing.expression_language_function` to define functions available in route conditions\n * Added `debug:container --deprecations` option to see compile-time deprecations.\n * Made `BrowserKitAssertionsTrait` report the original error message in case of a failure\n * Added ability for `config:dump-reference` and `debug:config` to dump and debug kernel container extension configuration.\n * Deprecated `session.attribute_bag` service and `session.flash_bag` service.\n\n5.0.0\n-----\n\n * Removed support to load translation resources from the legacy directories `src/Resources/translations/` and `src/Resources/<BundleName>/translations/`\n * Removed `ControllerNameParser`.\n * Removed `ResolveControllerNameSubscriber`\n * Removed support for `bundle:controller:action` to reference controllers. Use `serviceOrFqcn::method` instead\n * Removed support for PHP templating, use Twig instead\n * Removed `Controller`, use `AbstractController` instead\n * Removed `Client`, use `KernelBrowser` instead\n * Removed `ContainerAwareCommand`, use dependency injection instead\n * Removed the `validation.strict_email` option, use `validation.email_validation_mode` instead\n * Removed the `cache.app.simple` service and its corresponding PSR-16 autowiring alias\n * Removed cache-related compiler passes and `RequestDataCollector`\n * Removed the `translator.selector` and `session.save_listener` services\n * Removed `SecurityUserValueResolver`, use `UserValueResolver` instead\n * Removed `routing.loader.service`.\n * Service route loaders must be tagged with `routing.route_loader`.\n * Added `slugger` service and `SluggerInterface` alias\n * Removed the `lock.store.flock`, `lock.store.semaphore`, `lock.store.memcached.abstract` and `lock.store.redis.abstract` services.\n * Removed the `router.cache_class_prefix` parameter.\n\n4.4.0\n-----\n\n * Added `lint:container` command to check that services wiring matches type declarations\n * Added `MailerAssertionsTrait`\n * Deprecated support for `templating` engine in `TemplateController`, use Twig instead\n * Deprecated the `$parser` argument of `ControllerResolver::__construct()` and `DelegatingLoader::__construct()`\n * Deprecated the `controller_name_converter` and `resolve_controller_name_subscriber` services\n * The `ControllerResolver` and `DelegatingLoader` classes have been marked as `final`\n * Added support for configuring chained cache pools\n * Deprecated calling `WebTestCase::createClient()` while a kernel has been booted, ensure the kernel is shut down before calling the method\n * Deprecated `routing.loader.service`, use `routing.loader.container` instead.\n * Not tagging service route loaders with `routing.route_loader` has been deprecated.\n * Overriding the methods `KernelTestCase::tearDown()` and `WebTestCase::tearDown()` without the `void` return-type is deprecated.\n * Added new `error_controller` configuration to handle system exceptions\n * Added sort option for `translation:update` command.\n * [BC Break] The `framework.messenger.routing.senders` config key is not deeply merged anymore.\n * Added `secrets:*` commands to deal with secrets seamlessly.\n * Made `framework.session.handler_id` accept a DSN\n * Marked the `RouterDataCollector` class as `@final`.\n * [BC Break] The `framework.messenger.buses.<name>.middleware` config key is not deeply merged anymore.\n * Moved `MailerAssertionsTrait` in `KernelTestCase`\n\n4.3.0\n-----\n\n * Deprecated the `framework.templating` option, configure the Twig bundle instead.\n * Added `WebTestAssertionsTrait` (included by default in `WebTestCase`)\n * Renamed `Client` to `KernelBrowser`\n * Not passing the project directory to the constructor of the `AssetsInstallCommand` is deprecated. This argument will\n   be mandatory in 5.0.\n * Deprecated the \"Psr\\SimpleCache\\CacheInterface\" / \"cache.app.simple\" service, use \"Symfony\\Contracts\\Cache\\CacheInterface\" / \"cache.app\" instead\n * Added the ability to specify a custom `serializer` option for each\n   transport under`framework.messenger.transports`.\n * Added the `RegisterLocaleAwareServicesPass` and configured the `LocaleAwareListener`\n * [BC Break] When using Messenger, the default transport changed from\n   using Symfony's serializer service to use `PhpSerializer`, which uses\n   PHP's native `serialize()` and `unserialize()` functions. To use the\n   original serialization method, set the `framework.messenger.default_serializer`\n   config option to `messenger.transport.symfony_serializer`. Or set the\n   `serializer` option under one specific `transport`.\n * [BC Break] The `framework.messenger.serializer` config key changed to\n   `framework.messenger.default_serializer`, which holds the string service\n   id and `framework.messenger.symfony_serializer`, which configures the\n   options if you're using Symfony's serializer.\n * [BC Break] Removed the `framework.messenger.routing.send_and_handle` configuration.\n   Instead of setting it to true, configure a `SyncTransport` and route messages to it.\n * Added information about deprecated aliases in `debug:autowiring`\n * Added php ini session options `sid_length` and `sid_bits_per_character`\n   to the `session` section of the configuration\n * Added support for Translator paths, Twig paths in translation commands.\n * Added support for PHP files with translations in translation commands.\n * Added support for boolean container parameters within routes.\n * Added the `messenger:setup-transports` command to setup messenger transports\n * Added a `InMemoryTransport` to Messenger. Use it with a DSN starting with `in-memory://`.\n * Added `framework.property_access.throw_exception_on_invalid_property_path` config option.\n * Added `cache:pool:list` command to list all available cache pools.\n\n4.2.0\n-----\n\n * Added a `AbstractController::addLink()` method to add Link headers to the current response\n * Allowed configuring taggable cache pools via a new `framework.cache.pools.tags` option (bool|service-id)\n * Allowed configuring PDO-based cache pools via a new `cache.adapter.pdo` abstract service\n * Deprecated auto-injection of the container in AbstractController instances, register them as service subscribers instead\n * Deprecated processing of services tagged `security.expression_language_provider` in favor of a new `AddExpressionLanguageProvidersPass` in SecurityBundle.\n * Deprecated the `Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller` class in favor of `Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController`.\n * Enabled autoconfiguration for `Psr\\Log\\LoggerAwareInterface`\n * Added new \"auto\" mode for `framework.session.cookie_secure` to turn it on when HTTPS is used\n * Removed the `framework.messenger.encoder` and `framework.messenger.decoder` options. Use the `framework.messenger.serializer.id` option to replace the Messenger serializer.\n * Deprecated the `ContainerAwareCommand` class in favor of `Symfony\\Component\\Console\\Command\\Command`\n * Made `debug:container` and `debug:autowiring` ignore backslashes in service ids\n * Deprecated the `Templating\\Helper\\TranslatorHelper::transChoice()` method, use the `trans()` one instead with a `%count%` parameter\n * Deprecated `CacheCollectorPass`. Use `Symfony\\Component\\Cache\\DependencyInjection\\CacheCollectorPass` instead.\n * Deprecated `CachePoolClearerPass`. Use `Symfony\\Component\\Cache\\DependencyInjection\\CachePoolClearerPass` instead.\n * Deprecated `CachePoolPass`. Use `Symfony\\Component\\Cache\\DependencyInjection\\CachePoolPass` instead.\n * Deprecated `CachePoolPrunerPass`. Use `Symfony\\Component\\Cache\\DependencyInjection\\CachePoolPrunerPass` instead.\n * Deprecated support for legacy translations directories `src/Resources/translations/` and `src/Resources/<BundleName>/translations/`, use `translations/` instead.\n * Deprecated support for the legacy directory structure in `translation:update` and `debug:translation` commands.\n\n4.1.0\n-----\n\n * Allowed to pass an optional `LoggerInterface $logger` instance to the `Router`\n * Added a new `parameter_bag` service with related autowiring aliases to access parameters as-a-service\n * Allowed the `Router` to work with any PSR-11 container\n * Added option in workflow dump command to label graph with a custom label\n * Using a `RouterInterface` that does not implement the `WarmableInterface` is deprecated.\n * Warming up a router in `RouterCacheWarmer` that does not implement the `WarmableInterface` is deprecated and will not\n   be supported anymore in 5.0.\n * The `RequestDataCollector` class has been deprecated. Use the `Symfony\\Component\\HttpKernel\\DataCollector\\RequestDataCollector` class instead.\n * The `RedirectController` class allows for 307/308 HTTP status codes\n * Deprecated `bundle:controller:action` syntax to reference controllers. Use `serviceOrFqcn::method` instead where `serviceOrFqcn`\n   is either the service ID or the FQCN of the controller.\n * Deprecated `Symfony\\Bundle\\FrameworkBundle\\Controller\\ControllerNameParser`\n * The `container.service_locator` tag of `ServiceLocator`s is now autoconfigured.\n * Add the ability to search a route in `debug:router`.\n * Add the ability to use SameSite cookies for sessions.\n\n4.0.0\n-----\n\n * The default `type` option of the `framework.workflows.*` configuration entries is `state_machine`\n * removed `AddConsoleCommandPass`, `AddConstraintValidatorsPass`,\n   `AddValidatorInitializersPass`, `CompilerDebugDumpPass`,  `ConfigCachePass`,\n   `ControllerArgumentValueResolverPass`, `FormPass`, `PropertyInfoPass`,\n   `RoutingResolverPass`, `SerializerPass`, `ValidateWorkflowsPass`\n * made  `Translator::__construct()` `$defaultLocale` argument required\n * removed `SessionListener`, `TestSessionListener`\n * Removed `cache:clear` warmup part along with the `--no-optional-warmers` option\n * Removed core form types services registration when unnecessary\n * Removed `framework.serializer.cache` option and `serializer.mapping.cache.apc`, `serializer.mapping.cache.doctrine.apc` services\n * Removed `ConstraintValidatorFactory`\n * Removed class parameters related to routing\n * Removed absolute template paths support in the template name parser\n * Removed support of the `KERNEL_DIR` environment variable with `KernelTestCase::getKernelClass()`.\n * Removed the `KernelTestCase::getPhpUnitXmlDir()` and `KernelTestCase::getPhpUnitCliConfigArgument()` methods.\n * Removed the \"framework.validation.cache\" configuration option. Configure the \"cache.validator\" service under \"framework.cache.pools\" instead.\n * Removed `PhpStringTokenParser`, use `Symfony\\Component\\Translation\\Extractor\\PhpStringTokenParser` instead.\n * Removed `PhpExtractor`, use `Symfony\\Component\\Translation\\Extractor\\PhpExtractor` instead.\n * Removed the `use_strict_mode` session option, it's is now enabled by default\n\n3.4.0\n-----\n\n * Added `translator.default_path` option and parameter\n * Session `use_strict_mode` is now enabled by default and the corresponding option has been deprecated\n * Made the `cache:clear` command to *not* clear \"app\" PSR-6 cache pools anymore,\n   but to still clear \"system\" ones; use the `cache:pool:clear` command to clear \"app\" pools instead\n * Always register a minimalist logger that writes in `stderr`\n * Deprecated `profiler.matcher` option\n * Added support for `EventSubscriberInterface` on `MicroKernelTrait`\n * Removed `doctrine/cache` from the list of required dependencies in `composer.json`\n * Deprecated `validator.mapping.cache.doctrine.apc` service\n * The `symfony/stopwatch` dependency has been removed, require it via `composer\n   require symfony/stopwatch` in your `dev` environment.\n * Deprecated using the `KERNEL_DIR` environment variable with `KernelTestCase::getKernelClass()`.\n * Deprecated the `KernelTestCase::getPhpUnitXmlDir()` and `KernelTestCase::getPhpUnitCliConfigArgument()` methods.\n * Deprecated `AddCacheClearerPass`, use tagged iterator arguments instead.\n * Deprecated `AddCacheWarmerPass`, use tagged iterator arguments instead.\n * Deprecated `TranslationDumperPass`, use\n   `Symfony\\Component\\Translation\\DependencyInjection\\TranslationDumperPass` instead\n * Deprecated `TranslationExtractorPass`, use\n   `Symfony\\Component\\Translation\\DependencyInjection\\TranslationExtractorPass` instead\n * Deprecated `TranslatorPass`, use\n   `Symfony\\Component\\Translation\\DependencyInjection\\TranslatorPass` instead\n * Added `command` attribute to the `console.command` tag which takes the command\n   name as value, using it makes the command lazy\n * Added `cache:pool:prune` command to allow manual stale cache item pruning of supported PSR-6 and PSR-16 cache pool\n   implementations\n * Deprecated `Symfony\\Bundle\\FrameworkBundle\\Translation\\TranslationLoader`, use\n   `Symfony\\Component\\Translation\\Reader\\TranslationReader` instead\n * Deprecated `translation.loader` service, use `translation.reader` instead\n * `AssetsInstallCommand::__construct()` now takes an instance of\n   `Symfony\\Component\\Filesystem\\Filesystem` as first argument\n * `CacheClearCommand::__construct()` now takes an instance of\n   `Symfony\\Component\\HttpKernel\\CacheClearer\\CacheClearerInterface` as\n    first argument\n * `CachePoolClearCommand::__construct()` now takes an instance of\n   `Symfony\\Component\\HttpKernel\\CacheClearer\\Psr6CacheClearer` as\n    first argument\n * `EventDispatcherDebugCommand::__construct()` now takes an instance of\n   `Symfony\\Component\\EventDispatcher\\EventDispatcherInterface` as\n    first argument\n * `RouterDebugCommand::__construct()` now takes an instance of\n   `Symfony\\Component\\Routing\\RouterInterface` as\n    first argument\n * `RouterMatchCommand::__construct()` now takes an instance of\n   `Symfony\\Component\\Routing\\RouterInterface` as\n    first argument\n * `TranslationDebugCommand::__construct()` now takes an instance of\n   `Symfony\\Component\\Translation\\TranslatorInterface` as\n    first argument\n * `TranslationUpdateCommand::__construct()` now takes an instance of\n   `Symfony\\Component\\Translation\\TranslatorInterface` as\n    first argument\n * `AssetsInstallCommand`, `CacheClearCommand`, `CachePoolClearCommand`,\n   `EventDispatcherDebugCommand`, `RouterDebugCommand`, `RouterMatchCommand`,\n   `TranslationDebugCommand`, `TranslationUpdateCommand`, `XliffLintCommand`\n    and `YamlLintCommand` classes have been marked as final\n * Added `asset.request_context.base_path` and `asset.request_context.secure` parameters\n   to provide a default request context in case the stack is empty (similar to `router.request_context.*` parameters)\n * Display environment variables managed by `Dotenv` in `AboutCommand`\n\n3.3.0\n-----\n\n * Not defining the `type` option of the `framework.workflows.*` configuration entries is deprecated.\n   The default value will be `state_machine` in Symfony 4.0.\n * Deprecated the `CompilerDebugDumpPass` class\n * Deprecated the \"framework.trusted_proxies\" configuration option and the corresponding \"kernel.trusted_proxies\" parameter\n * Added a new version strategy option called \"json_manifest_path\"\n   that allows you to use the `JsonManifestVersionStrategy`.\n * Added `Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController`. It provides\n   the same helpers as the `Controller` class, but does not allow accessing the dependency\n   injection container, in order to encourage explicit dependency declarations.\n * Added support for the `controller.service_arguments` tag, for injecting services into controllers' actions\n * Changed default configuration for\n   assets/forms/validation/translation/serialization/csrf from `canBeEnabled()` to\n   `canBeDisabled()` when Flex is used\n * The server:* commands and their associated router files were moved to WebServerBundle\n * Translation related services are not loaded anymore when the `framework.translator` option\n   is disabled.\n * Added `GlobalVariables::getToken()`\n * Deprecated `Symfony\\Bundle\\FrameworkBundle\\DependencyInjection\\Compiler\\AddConsoleCommandPass`. Use `Symfony\\Component\\Console\\DependencyInjection\\AddConsoleCommandPass` instead.\n * Added configurable paths for validation files\n * Deprecated `SerializerPass`, use `Symfony\\Component\\Serializer\\DependencyInjection\\SerializerPass` instead\n * Deprecated `FormPass`, use `Symfony\\Component\\Form\\DependencyInjection\\FormPass` instead\n * Deprecated `SessionListener`\n * Deprecated `TestSessionListener`\n * Deprecated `Symfony\\Bundle\\FrameworkBundle\\DependencyInjection\\Compiler\\ConfigCachePass`.\n   Use tagged iterator arguments instead.\n * Deprecated `PropertyInfoPass`, use `Symfony\\Component\\PropertyInfo\\DependencyInjection\\PropertyInfoPass` instead\n * Deprecated `ControllerArgumentValueResolverPass`. Use\n   `Symfony\\Component\\HttpKernel\\DependencyInjection\\ControllerArgumentValueResolverPass` instead\n * Deprecated `RoutingResolverPass`, use `Symfony\\Component\\Routing\\DependencyInjection\\RoutingResolverPass` instead\n * [BC BREAK] The `server:run`, `server:start`, `server:stop` and\n   `server:status` console commands have been moved to a dedicated bundle.\n   Require `symfony/web-server-bundle` in your composer.json and register\n   `Symfony\\Bundle\\WebServerBundle\\WebServerBundle` in your AppKernel to use them.\n * Added `$defaultLocale` as 3rd argument of `Translator::__construct()`\n   making `Translator` works with any PSR-11 container\n * Added `framework.serializer.mapping` config option allowing to define custom\n   serialization mapping files and directories\n * Deprecated `AddValidatorInitializersPass`, use\n   `Symfony\\Component\\Validator\\DependencyInjection\\AddValidatorInitializersPass` instead\n * Deprecated `AddConstraintValidatorsPass`, use\n   `Symfony\\Component\\Validator\\DependencyInjection\\AddConstraintValidatorsPass` instead\n * Deprecated `ValidateWorkflowsPass`, use\n   `Symfony\\Component\\Workflow\\DependencyInjection\\ValidateWorkflowsPass` instead\n * Deprecated `ConstraintValidatorFactory`, use\n   `Symfony\\Component\\Validator\\ContainerConstraintValidatorFactory` instead.\n * Deprecated `PhpStringTokenParser`, use\n   `Symfony\\Component\\Translation\\Extractor\\PhpStringTokenParser` instead.\n * Deprecated `PhpExtractor`, use\n   `Symfony\\Component\\Translation\\Extractor\\PhpExtractor` instead.\n\n3.2.0\n-----\n\n * Removed `doctrine/annotations` from the list of required dependencies in `composer.json`\n * Removed `symfony/security-core` and `symfony/security-csrf` from the list of required dependencies in `composer.json`\n * Removed `symfony/templating` from the list of required dependencies in `composer.json`\n * Removed `symfony/translation` from the list of required dependencies in `composer.json`\n * Removed `symfony/asset` from the list of required dependencies in `composer.json`\n * The `Resources/public/images/*` files have been removed.\n * The `Resources/public/css/*.css` files have been removed (they are now inlined in TwigBundle).\n * Added possibility to prioritize form type extensions with `'priority'` attribute on tags `form.type_extension`\n\n3.1.0\n-----\n\n * Added `Controller::json` to simplify creating JSON responses when using the Serializer component\n * Deprecated absolute template paths support in the template name parser\n * Deprecated using core form types without dependencies as services\n * Added `Symfony\\Component\\HttpHernel\\DataCollector\\RequestDataCollector::onKernelResponse()`\n * Added `Symfony\\Bundle\\FrameworkBundle\\DataCollector\\RequestDataCollector`\n * The `framework.serializer.cache` option and the service `serializer.mapping.cache.apc` have been\n   deprecated. APCu should now be automatically used when available.\n\n3.0.0\n-----\n\n * removed `validator.api` parameter\n * removed `alias` option of the `form.type` tag\n\n2.8.0\n-----\n\n * Deprecated the `alias` option of the `form.type_extension` tag in favor of the\n   `extended_type`/`extended-type` option\n * Deprecated the `alias` option of the `form.type` tag\n * Deprecated the Shell\n\n2.7.0\n-----\n\n * Added possibility to extract translation messages from a file or files besides extracting from a directory\n * Added `TranslationsCacheWarmer` to create catalogues at warmup\n\n2.6.0\n-----\n\n * Added helper commands (`server:start`, `server:stop` and `server:status`) to control the built-in web\n   server in the background\n * Added `Controller::isCsrfTokenValid` helper\n * Added configuration for the PropertyAccess component\n * Added `Controller::redirectToRoute` helper\n * Added `Controller::addFlash` helper\n * Added `Controller::isGranted` helper\n * Added `Controller::denyAccessUnlessGranted` helper\n * Deprecated `app.security` in twig as `app.user` and `is_granted()` are already available\n\n2.5.0\n-----\n\n * Added `translation:debug` command\n * Added `--no-backup` option to `translation:update` command\n * Added `config:debug` command\n * Added `yaml:lint` command\n * Deprecated the `RouterApacheDumperCommand` which will be removed in Symfony 3.0.\n\n2.4.0\n-----\n\n * allowed multiple IP addresses in profiler matcher settings\n * added stopwatch helper to time templates with the WebProfilerBundle\n * added service definition for \"security.secure_random\" service\n * added service definitions for the new Security CSRF sub-component\n\n2.3.0\n-----\n\n * [BC BREAK] added a way to disable the profiler (when disabling the profiler, it is now completely removed)\n   To get the same \"disabled\" behavior as before, set `enabled` to `true` and `collect` to `false`\n * [BC BREAK] the `Symfony\\Bundle\\FrameworkBundle\\DependencyInjection\\Compiler\\RegisterKernelListenersPass` was moved\n   to `Component\\HttpKernel\\DependencyInjection\\RegisterListenersPass`\n * added ControllerNameParser::build() which converts a controller short notation (a:b:c) to a class::method notation\n * added possibility to run PHP built-in server in production environment\n * added possibility to load the serializer component in the service container\n * added route debug information when using the `router:match` command\n * added `TimedPhpEngine`\n * added `--clean` option to the `translation:update` command\n * added `http_method_override` option\n * added support for default templates per render tag\n * added FormHelper::form(), FormHelper::start() and FormHelper::end()\n * deprecated FormHelper::enctype() in favor of FormHelper::start()\n * RedirectController actions now receive the Request instance via the method signature.\n\n2.2.0\n-----\n\n * added a new `uri_signer` service to help sign URIs\n * deprecated `Symfony\\Bundle\\FrameworkBundle\\HttpKernel::render()` and `Symfony\\Bundle\\FrameworkBundle\\HttpKernel::forward()`\n * deprecated the `Symfony\\Bundle\\FrameworkBundle\\HttpKernel` class in favor of `Symfony\\Component\\HttpKernel\\DependencyInjection\\ContainerAwareHttpKernel`\n * added support for adding new HTTP content rendering strategies (like ESI and Hinclude)\n   in the DIC via the `kernel.fragment_renderer` tag\n * [BC BREAK] restricted the `Symfony\\Bundle\\FrameworkBundle\\HttpKernel::render()` method to only accept URIs or ControllerReference instances\n   * `Symfony\\Bundle\\FrameworkBundle\\HttpKernel::render()` method signature changed and the first argument\n     must now be a URI or a ControllerReference instance (the `generateInternalUri()` method was removed)\n   * The internal routes (`Resources/config/routing/internal.xml`) have been removed and replaced with a listener (`Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener`)\n   * The `render` method of the `actions` templating helper signature and arguments changed\n * replaced Symfony\\Bundle\\FrameworkBundle\\Controller\\TraceableControllerResolver by Symfony\\Component\\HttpKernel\\Controller\\TraceableControllerResolver\n * replaced Symfony\\Component\\HttpKernel\\Debug\\ContainerAwareTraceableEventDispatcher by Symfony\\Component\\HttpKernel\\Debug\\TraceableEventDispatcher\n * added Client::enableProfiler()\n * a new parameter has been added to the DIC: `router.request_context.base_url`\n   You can customize it for your functional tests or for generating URLs with\n   the right base URL when your are in the CLI context.\n * added support for default templates per render tag\n\n2.1.0\n-----\n\n * moved the translation files to the Form and Validator components\n * changed the default extension for XLIFF files from .xliff to .xlf\n * moved Symfony\\Bundle\\FrameworkBundle\\ContainerAwareEventDispatcher to Symfony\\Component\\EventDispatcher\\ContainerAwareEventDispatcher\n * moved Symfony\\Bundle\\FrameworkBundle\\Debug\\TraceableEventDispatcher to Symfony\\Component\\EventDispatcher\\ContainerAwareTraceableEventDispatcher\n * added a router:match command\n * added a config:dump-reference command\n * added a server:run command\n * added kernel.event_subscriber tag\n * added a way to create relative symlinks when running assets:install command (--relative option)\n * added Controller::getUser()\n * [BC BREAK] assets_base_urls and base_urls merging strategy has changed\n * changed the default profiler storage to use the filesystem instead of SQLite\n * added support for placeholders in route defaults and requirements (replaced\n   by the value set in the service container)\n * added Filesystem component as a dependency\n * added support for hinclude (use ``standalone: 'js'`` in render tag)\n * session options: lifetime, path, domain, secure, httponly were deprecated.\n   Prefixed versions should now be used instead: cookie_lifetime, cookie_path,\n   cookie_domain, cookie_secure, cookie_httponly\n * [BC BREAK] following session options: 'lifetime', 'path', 'domain', 'secure',\n   'httponly' are now prefixed with cookie_ when dumped to the container\n * Added `handler_id` configuration under `session` key to represent `session.handler`\n   service, defaults to `session.handler.native_file`.\n * Added `gc_maxlifetime`, `gc_probability`, and `gc_divisor` to session\n   configuration. This means session garbage collection has a\n  `gc_probability`/`gc_divisor` chance of being run. The `gc_maxlifetime` defines\n   how long a session can idle for. It is different from cookie lifetime which\n   declares how long a cookie can be stored on the remote client.\n * Removed 'auto_start' configuration parameter from session config. The session will\n   start on demand.\n * [BC BREAK] TemplateNameParser::parseFromFilename() has been moved to a dedicated\n   parser: TemplateFilenameParser::parse().\n * [BC BREAK] Kernel parameters are replaced by their value wherever they appear\n   in Route patterns, requirements and defaults. Use '%%' as the escaped value for '%'.\n * [BC BREAK] Switched behavior of flash messages to expire flash messages on retrieval\n   using Symfony\\Component\\HttpFoundation\\Session\\Flash\\FlashBag as opposed to on\n   next pageload regardless of whether they are displayed or not.\n"
        },
        {
          "name": "CacheWarmer",
          "type": "tree",
          "content": null
        },
        {
          "name": "Command",
          "type": "tree",
          "content": null
        },
        {
          "name": "Console",
          "type": "tree",
          "content": null
        },
        {
          "name": "Controller",
          "type": "tree",
          "content": null
        },
        {
          "name": "DataCollector",
          "type": "tree",
          "content": null
        },
        {
          "name": "DependencyInjection",
          "type": "tree",
          "content": null
        },
        {
          "name": "EventListener",
          "type": "tree",
          "content": null
        },
        {
          "name": "FrameworkBundle.php",
          "type": "blob",
          "size": 11.845703125,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Bundle\\FrameworkBundle;\n\nuse Symfony\\Bundle\\FrameworkBundle\\DependencyInjection\\Compiler\\AddDebugLogProcessorPass;\nuse Symfony\\Bundle\\FrameworkBundle\\DependencyInjection\\Compiler\\AssetsContextPass;\nuse Symfony\\Bundle\\FrameworkBundle\\DependencyInjection\\Compiler\\ContainerBuilderDebugDumpPass;\nuse Symfony\\Bundle\\FrameworkBundle\\DependencyInjection\\Compiler\\ErrorLoggerCompilerPass;\nuse Symfony\\Bundle\\FrameworkBundle\\DependencyInjection\\Compiler\\ProfilerPass;\nuse Symfony\\Bundle\\FrameworkBundle\\DependencyInjection\\Compiler\\RemoveUnusedSessionMarshallingHandlerPass;\nuse Symfony\\Bundle\\FrameworkBundle\\DependencyInjection\\Compiler\\TestServiceContainerRealRefPass;\nuse Symfony\\Bundle\\FrameworkBundle\\DependencyInjection\\Compiler\\TestServiceContainerWeakRefPass;\nuse Symfony\\Bundle\\FrameworkBundle\\DependencyInjection\\Compiler\\TranslationLintCommandPass;\nuse Symfony\\Bundle\\FrameworkBundle\\DependencyInjection\\Compiler\\TranslationUpdateCommandPass;\nuse Symfony\\Bundle\\FrameworkBundle\\DependencyInjection\\Compiler\\UnusedTagsPass;\nuse Symfony\\Bundle\\FrameworkBundle\\DependencyInjection\\VirtualRequestStackPass;\nuse Symfony\\Component\\Cache\\Adapter\\ApcuAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\ArrayAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\ChainAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\PhpArrayAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\PhpFilesAdapter;\nuse Symfony\\Component\\Cache\\DependencyInjection\\CacheCollectorPass;\nuse Symfony\\Component\\Cache\\DependencyInjection\\CachePoolClearerPass;\nuse Symfony\\Component\\Cache\\DependencyInjection\\CachePoolPass;\nuse Symfony\\Component\\Cache\\DependencyInjection\\CachePoolPrunerPass;\nuse Symfony\\Component\\Config\\Resource\\ClassExistenceResource;\nuse Symfony\\Component\\Console\\ConsoleEvents;\nuse Symfony\\Component\\Console\\DependencyInjection\\AddConsoleCommandPass;\nuse Symfony\\Component\\DependencyInjection\\Compiler\\PassConfig;\nuse Symfony\\Component\\DependencyInjection\\Compiler\\RegisterReverseContainerPass;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\Dotenv\\Dotenv;\nuse Symfony\\Component\\ErrorHandler\\ErrorHandler;\nuse Symfony\\Component\\EventDispatcher\\DependencyInjection\\RegisterListenersPass;\nuse Symfony\\Component\\Form\\DependencyInjection\\FormPass;\nuse Symfony\\Component\\HttpClient\\DependencyInjection\\HttpClientPass;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Bundle\\Bundle;\nuse Symfony\\Component\\HttpKernel\\DependencyInjection\\ControllerArgumentValueResolverPass;\nuse Symfony\\Component\\HttpKernel\\DependencyInjection\\FragmentRendererPass;\nuse Symfony\\Component\\HttpKernel\\DependencyInjection\\LoggerPass;\nuse Symfony\\Component\\HttpKernel\\DependencyInjection\\RegisterControllerArgumentLocatorsPass;\nuse Symfony\\Component\\HttpKernel\\DependencyInjection\\RegisterLocaleAwareServicesPass;\nuse Symfony\\Component\\HttpKernel\\DependencyInjection\\RemoveEmptyControllerArgumentLocatorsPass;\nuse Symfony\\Component\\HttpKernel\\DependencyInjection\\ResettableServicePass;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\nuse Symfony\\Component\\Messenger\\DependencyInjection\\MessengerPass;\nuse Symfony\\Component\\Mime\\DependencyInjection\\AddMimeTypeGuesserPass;\nuse Symfony\\Component\\PropertyInfo\\DependencyInjection\\PropertyInfoPass;\nuse Symfony\\Component\\Routing\\DependencyInjection\\AddExpressionLanguageProvidersPass;\nuse Symfony\\Component\\Routing\\DependencyInjection\\RoutingResolverPass;\nuse Symfony\\Component\\Runtime\\SymfonyRuntime;\nuse Symfony\\Component\\Scheduler\\DependencyInjection\\AddScheduleMessengerPass;\nuse Symfony\\Component\\Serializer\\DependencyInjection\\SerializerPass;\nuse Symfony\\Component\\Translation\\DependencyInjection\\DataCollectorTranslatorPass;\nuse Symfony\\Component\\Translation\\DependencyInjection\\LoggingTranslatorPass;\nuse Symfony\\Component\\Translation\\DependencyInjection\\TranslationDumperPass;\nuse Symfony\\Component\\Translation\\DependencyInjection\\TranslationExtractorPass;\nuse Symfony\\Component\\Translation\\DependencyInjection\\TranslatorPass;\nuse Symfony\\Component\\Translation\\DependencyInjection\\TranslatorPathsPass;\nuse Symfony\\Component\\Validator\\DependencyInjection\\AddAutoMappingConfigurationPass;\nuse Symfony\\Component\\Validator\\DependencyInjection\\AddConstraintValidatorsPass;\nuse Symfony\\Component\\Validator\\DependencyInjection\\AddValidatorInitializersPass;\nuse Symfony\\Component\\VarExporter\\Internal\\Hydrator;\nuse Symfony\\Component\\VarExporter\\Internal\\Registry;\nuse Symfony\\Component\\Workflow\\DependencyInjection\\WorkflowDebugPass;\nuse Symfony\\Component\\Workflow\\DependencyInjection\\WorkflowGuardListenerPass;\n\n// Help opcache.preload discover always-needed symbols\nclass_exists(ApcuAdapter::class);\nclass_exists(ArrayAdapter::class);\nclass_exists(ChainAdapter::class);\nclass_exists(PhpArrayAdapter::class);\nclass_exists(PhpFilesAdapter::class);\nclass_exists(Dotenv::class);\nclass_exists(ErrorHandler::class);\nclass_exists(Hydrator::class);\nclass_exists(Registry::class);\n\n/**\n * Bundle.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass FrameworkBundle extends Bundle\n{\n    public function boot(): void\n    {\n        $_ENV['DOCTRINE_DEPRECATIONS'] = $_SERVER['DOCTRINE_DEPRECATIONS'] ??= 'trigger';\n\n        if (class_exists(SymfonyRuntime::class)) {\n            $handler = set_error_handler('var_dump');\n            restore_error_handler();\n        } else {\n            $handler = [ErrorHandler::register(null, false)];\n        }\n\n        if (\\is_array($handler) && $handler[0] instanceof ErrorHandler) {\n            $this->container->get('debug.error_handler_configurator')->configure($handler[0]);\n        }\n\n        if ($this->container->getParameter('kernel.http_method_override')) {\n            Request::enableHttpMethodParameterOverride();\n        }\n\n        if ($this->container->hasParameter('kernel.trust_x_sendfile_type_header') && $this->container->getParameter('kernel.trust_x_sendfile_type_header')) {\n            BinaryFileResponse::trustXSendfileTypeHeader();\n        }\n    }\n\n    public function build(ContainerBuilder $container): void\n    {\n        parent::build($container);\n\n        $registerListenersPass = new RegisterListenersPass();\n        $registerListenersPass->setHotPathEvents([\n            KernelEvents::REQUEST,\n            KernelEvents::CONTROLLER,\n            KernelEvents::CONTROLLER_ARGUMENTS,\n            KernelEvents::RESPONSE,\n            KernelEvents::FINISH_REQUEST,\n        ]);\n        if (class_exists(ConsoleEvents::class)) {\n            $registerListenersPass->setNoPreloadEvents([\n                ConsoleEvents::COMMAND,\n                ConsoleEvents::TERMINATE,\n                ConsoleEvents::ERROR,\n            ]);\n        }\n\n        $container->addCompilerPass(new AssetsContextPass(), PassConfig::TYPE_BEFORE_OPTIMIZATION);\n        $container->addCompilerPass(new LoggerPass(), PassConfig::TYPE_BEFORE_OPTIMIZATION, -32);\n        $container->addCompilerPass(new RegisterControllerArgumentLocatorsPass());\n        $container->addCompilerPass(new RemoveEmptyControllerArgumentLocatorsPass(), PassConfig::TYPE_BEFORE_REMOVING);\n        $container->addCompilerPass(new RoutingResolverPass());\n        $this->addCompilerPassIfExists($container, DataCollectorTranslatorPass::class);\n        $container->addCompilerPass(new ProfilerPass());\n        // must be registered before removing private services as some might be listeners/subscribers\n        // but as late as possible to get resolved parameters\n        $container->addCompilerPass($registerListenersPass, PassConfig::TYPE_BEFORE_REMOVING);\n        $this->addCompilerPassIfExists($container, AddConstraintValidatorsPass::class);\n        $this->addCompilerPassIfExists($container, AddValidatorInitializersPass::class);\n        $this->addCompilerPassIfExists($container, AddConsoleCommandPass::class, PassConfig::TYPE_BEFORE_REMOVING);\n        // must be registered before the AddConsoleCommandPass\n        $container->addCompilerPass(new TranslationLintCommandPass(), PassConfig::TYPE_BEFORE_REMOVING, 10);\n        // must be registered as late as possible to get access to all Twig paths registered in\n        // twig.template_iterator definition\n        $this->addCompilerPassIfExists($container, TranslatorPass::class, PassConfig::TYPE_BEFORE_OPTIMIZATION, -32);\n        $this->addCompilerPassIfExists($container, TranslatorPathsPass::class, PassConfig::TYPE_AFTER_REMOVING);\n        $this->addCompilerPassIfExists($container, LoggingTranslatorPass::class);\n        $container->addCompilerPass(new AddExpressionLanguageProvidersPass());\n        $this->addCompilerPassIfExists($container, TranslationExtractorPass::class);\n        $this->addCompilerPassIfExists($container, TranslationDumperPass::class);\n        $container->addCompilerPass(new FragmentRendererPass());\n        $this->addCompilerPassIfExists($container, SerializerPass::class);\n        $this->addCompilerPassIfExists($container, PropertyInfoPass::class);\n        $container->addCompilerPass(new ControllerArgumentValueResolverPass());\n        $container->addCompilerPass(new CachePoolPass(), PassConfig::TYPE_BEFORE_OPTIMIZATION, 32);\n        $container->addCompilerPass(new CachePoolClearerPass(), PassConfig::TYPE_AFTER_REMOVING);\n        $container->addCompilerPass(new CachePoolPrunerPass(), PassConfig::TYPE_AFTER_REMOVING);\n        $this->addCompilerPassIfExists($container, FormPass::class);\n        $this->addCompilerPassIfExists($container, WorkflowGuardListenerPass::class);\n        $container->addCompilerPass(new ResettableServicePass(), PassConfig::TYPE_BEFORE_OPTIMIZATION, -32);\n        $container->addCompilerPass(new RegisterLocaleAwareServicesPass());\n        $container->addCompilerPass(new TestServiceContainerWeakRefPass(), PassConfig::TYPE_BEFORE_REMOVING, -32);\n        $container->addCompilerPass(new TestServiceContainerRealRefPass(), PassConfig::TYPE_AFTER_REMOVING);\n        $this->addCompilerPassIfExists($container, AddMimeTypeGuesserPass::class);\n        $this->addCompilerPassIfExists($container, AddScheduleMessengerPass::class);\n        $this->addCompilerPassIfExists($container, MessengerPass::class);\n        $this->addCompilerPassIfExists($container, HttpClientPass::class);\n        $this->addCompilerPassIfExists($container, AddAutoMappingConfigurationPass::class);\n        $container->addCompilerPass(new RegisterReverseContainerPass(true));\n        $container->addCompilerPass(new RegisterReverseContainerPass(false), PassConfig::TYPE_AFTER_REMOVING);\n        $container->addCompilerPass(new RemoveUnusedSessionMarshallingHandlerPass());\n        // must be registered after MonologBundle's LoggerChannelPass\n        $container->addCompilerPass(new ErrorLoggerCompilerPass(), PassConfig::TYPE_BEFORE_OPTIMIZATION, -32);\n        $container->addCompilerPass(new VirtualRequestStackPass());\n        $container->addCompilerPass(new TranslationUpdateCommandPass(), PassConfig::TYPE_BEFORE_REMOVING);\n\n        if ($container->getParameter('kernel.debug')) {\n            $container->addCompilerPass(new AddDebugLogProcessorPass(), PassConfig::TYPE_BEFORE_OPTIMIZATION, 2);\n            $container->addCompilerPass(new UnusedTagsPass(), PassConfig::TYPE_AFTER_REMOVING);\n            $container->addCompilerPass(new ContainerBuilderDebugDumpPass(), PassConfig::TYPE_BEFORE_REMOVING, -255);\n            $container->addCompilerPass(new CacheCollectorPass(), PassConfig::TYPE_BEFORE_REMOVING);\n            $this->addCompilerPassIfExists($container, WorkflowDebugPass::class);\n        }\n    }\n\n    private function addCompilerPassIfExists(ContainerBuilder $container, string $class, string $type = PassConfig::TYPE_BEFORE_OPTIMIZATION, int $priority = 0): void\n    {\n        $container->addResource(new ClassExistenceResource($class));\n\n        if (class_exists($class)) {\n            $container->addCompilerPass(new $class(), $type, $priority);\n        }\n    }\n}\n"
        },
        {
          "name": "HttpCache",
          "type": "tree",
          "content": null
        },
        {
          "name": "Kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "KernelBrowser.php",
          "type": "blob",
          "size": 7.0595703125,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Bundle\\FrameworkBundle;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\TestBrowserToken;\nuse Symfony\\Component\\BrowserKit\\Cookie;\nuse Symfony\\Component\\BrowserKit\\CookieJar;\nuse Symfony\\Component\\BrowserKit\\History;\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelBrowser;\nuse Symfony\\Component\\HttpKernel\\KernelInterface;\nuse Symfony\\Component\\HttpKernel\\Profiler\\Profile as HttpProfile;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n\n/**\n * Simulates a browser and makes requests to a Kernel object.\n *\n * @author Fabien Potencier <fabien@symfony.com>\n */\nclass KernelBrowser extends HttpKernelBrowser\n{\n    private bool $hasPerformedRequest = false;\n    private bool $profiler = false;\n    private bool $reboot = true;\n\n    public function __construct(KernelInterface $kernel, array $server = [], ?History $history = null, ?CookieJar $cookieJar = null)\n    {\n        parent::__construct($kernel, $server, $history, $cookieJar);\n    }\n\n    public function getContainer(): ContainerInterface\n    {\n        $container = $this->kernel->getContainer();\n\n        return $container->has('test.service_container') ? $container->get('test.service_container') : $container;\n    }\n\n    public function getKernel(): KernelInterface\n    {\n        return $this->kernel;\n    }\n\n    /**\n     * Gets the profile associated with the current Response.\n     */\n    public function getProfile(): HttpProfile|false|null\n    {\n        if (!isset($this->response) || !$this->getContainer()->has('profiler')) {\n            return false;\n        }\n\n        return $this->getContainer()->get('profiler')->loadProfileFromResponse($this->response);\n    }\n\n    /**\n     * Enables the profiler for the very next request.\n     *\n     * If the profiler is not enabled, the call to this method does nothing.\n     */\n    public function enableProfiler(): void\n    {\n        if ($this->getContainer()->has('profiler')) {\n            $this->profiler = true;\n        }\n    }\n\n    /**\n     * Disables kernel reboot between requests.\n     *\n     * By default, the Client reboots the Kernel for each request. This method\n     * allows to keep the same kernel across requests.\n     */\n    public function disableReboot(): void\n    {\n        $this->reboot = false;\n    }\n\n    /**\n     * Enables kernel reboot between requests.\n     */\n    public function enableReboot(): void\n    {\n        $this->reboot = true;\n    }\n\n    /**\n     * @param UserInterface        $user\n     * @param array<string, mixed> $tokenAttributes\n     *\n     * @return $this\n     */\n    public function loginUser(object $user, string $firewallContext = 'main', array $tokenAttributes = []): static\n    {\n        if (!interface_exists(UserInterface::class)) {\n            throw new \\LogicException(\\sprintf('\"%s\" requires symfony/security-core to be installed. Try running \"composer require symfony/security-core\".', __METHOD__));\n        }\n\n        if (!$user instanceof UserInterface) {\n            throw new \\LogicException(\\sprintf('The first argument of \"%s\" must be instance of \"%s\", \"%s\" provided.', __METHOD__, UserInterface::class, get_debug_type($user)));\n        }\n\n        $token = new TestBrowserToken($user->getRoles(), $user, $firewallContext);\n        $token->setAttributes($tokenAttributes);\n\n        $container = $this->getContainer();\n        $container->get('security.untracked_token_storage')->setToken($token);\n\n        if (!$container->has('session.factory')) {\n            return $this;\n        }\n\n        $session = $container->get('session.factory')->createSession();\n        $session->set('_security_'.$firewallContext, serialize($token));\n        $session->save();\n\n        $domains = array_unique(array_map(fn (Cookie $cookie) => $cookie->getName() === $session->getName() ? $cookie->getDomain() : '', $this->getCookieJar()->all())) ?: [''];\n        foreach ($domains as $domain) {\n            $cookie = new Cookie($session->getName(), $session->getId(), null, null, $domain);\n            $this->getCookieJar()->set($cookie);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param Request $request\n     */\n    protected function doRequest(object $request): Response\n    {\n        // avoid shutting down the Kernel if no request has been performed yet\n        // WebTestCase::createClient() boots the Kernel but do not handle a request\n        if ($this->hasPerformedRequest && $this->reboot) {\n            $this->kernel->boot();\n            $this->kernel->shutdown();\n        } else {\n            $this->hasPerformedRequest = true;\n        }\n\n        if ($this->profiler) {\n            $this->profiler = false;\n\n            $this->kernel->boot();\n            $this->getContainer()->get('profiler')->enable();\n        }\n\n        return parent::doRequest($request);\n    }\n\n    /**\n     * @param Request $request\n     */\n    protected function doRequestInProcess(object $request): Response\n    {\n        $response = parent::doRequestInProcess($request);\n\n        $this->profiler = false;\n\n        return $response;\n    }\n\n    /**\n     * Returns the script to execute when the request must be insulated.\n     *\n     * It assumes that the autoloader is named 'autoload.php' and that it is\n     * stored in the same directory as the kernel (this is the case for the\n     * Symfony Standard Edition). If this is not your case, create your own\n     * client and override this method.\n     *\n     * @param Request $request\n     */\n    protected function getScript(object $request): string\n    {\n        $kernel = var_export(serialize($this->kernel), true);\n        $request = var_export(serialize($request), true);\n        $errorReporting = error_reporting();\n\n        $requires = '';\n        foreach (get_declared_classes() as $class) {\n            if (str_starts_with($class, 'ComposerAutoloaderInit')) {\n                $r = new \\ReflectionClass($class);\n                $file = \\dirname($r->getFileName(), 2).'/autoload.php';\n                if (is_file($file)) {\n                    $requires .= 'require_once '.var_export($file, true).\";\\n\";\n                }\n            }\n        }\n\n        if (!$requires) {\n            throw new \\RuntimeException('Composer autoloader not found.');\n        }\n\n        $requires .= 'require_once '.var_export((new \\ReflectionObject($this->kernel))->getFileName(), true).\";\\n\";\n\n        $profilerCode = '';\n        if ($this->profiler) {\n            $profilerCode = <<<'EOF'\n$container = $kernel->getContainer();\n$container = $container->has('test.service_container') ? $container->get('test.service_container') : $container;\n$container->get('profiler')->enable();\nEOF;\n        }\n\n        $code = <<<EOF\n<?php\n\nerror_reporting($errorReporting);\n\n$requires\n\n\\$kernel = unserialize($kernel);\n\\$kernel->boot();\n$profilerCode\n\n\\$request = unserialize($request);\nEOF;\n\n        return $code.$this->getHandleScript();\n    }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2004-present Fabien Potencier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.5322265625,
          "content": "FrameworkBundle\n===============\n\nFrameworkBundle provides a tight integration between Symfony components and the\nSymfony full-stack framework.\n\nSponsor\n-------\n\nHelp Symfony by [sponsoring][1] its development!\n\nResources\n---------\n\n * [Contributing](https://symfony.com/doc/current/contributing/index.html)\n * [Report issues](https://github.com/symfony/symfony/issues) and\n   [send Pull Requests](https://github.com/symfony/symfony/pulls)\n   in the [main Symfony repository](https://github.com/symfony/symfony)\n\n[1]: https://symfony.com/sponsor\n"
        },
        {
          "name": "Resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "Routing",
          "type": "tree",
          "content": null
        },
        {
          "name": "Secrets",
          "type": "tree",
          "content": null
        },
        {
          "name": "Test",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "Translation",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 4.1875,
          "content": "{\n    \"name\": \"symfony/framework-bundle\",\n    \"type\": \"symfony-bundle\",\n    \"description\": \"Provides a tight integration between Symfony components and the Symfony full-stack framework\",\n    \"keywords\": [],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Fabien Potencier\",\n            \"email\": \"fabien@symfony.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.2\",\n        \"composer-runtime-api\": \">=2.1\",\n        \"ext-xml\": \"*\",\n        \"symfony/cache\": \"^6.4|^7.0\",\n        \"symfony/config\": \"^6.4|^7.0\",\n        \"symfony/dependency-injection\": \"^7.2\",\n        \"symfony/deprecation-contracts\": \"^2.5|^3\",\n        \"symfony/error-handler\": \"^6.4|^7.0\",\n        \"symfony/event-dispatcher\": \"^6.4|^7.0\",\n        \"symfony/http-foundation\": \"^6.4|^7.0\",\n        \"symfony/http-kernel\": \"^7.2\",\n        \"symfony/polyfill-mbstring\": \"~1.0\",\n        \"symfony/filesystem\": \"^7.1\",\n        \"symfony/finder\": \"^6.4|^7.0\",\n        \"symfony/routing\": \"^6.4|^7.0\"\n    },\n    \"require-dev\": {\n        \"doctrine/persistence\": \"^1.3|^2|^3\",\n        \"dragonmantank/cron-expression\": \"^3.1\",\n        \"seld/jsonlint\": \"^1.10\",\n        \"symfony/asset\": \"^6.4|^7.0\",\n        \"symfony/asset-mapper\": \"^6.4|^7.0\",\n        \"symfony/browser-kit\": \"^6.4|^7.0\",\n        \"symfony/console\": \"^6.4|^7.0\",\n        \"symfony/clock\": \"^6.4|^7.0\",\n        \"symfony/css-selector\": \"^6.4|^7.0\",\n        \"symfony/dom-crawler\": \"^6.4|^7.0\",\n        \"symfony/dotenv\": \"^6.4|^7.0\",\n        \"symfony/polyfill-intl-icu\": \"~1.0\",\n        \"symfony/form\": \"^6.4|^7.0\",\n        \"symfony/expression-language\": \"^6.4|^7.0\",\n        \"symfony/html-sanitizer\": \"^6.4|^7.0\",\n        \"symfony/http-client\": \"^6.4|^7.0\",\n        \"symfony/lock\": \"^6.4|^7.0\",\n        \"symfony/mailer\": \"^6.4|^7.0\",\n        \"symfony/messenger\": \"^6.4|^7.0\",\n        \"symfony/mime\": \"^6.4|^7.0\",\n        \"symfony/notifier\": \"^6.4|^7.0\",\n        \"symfony/process\": \"^6.4|^7.0\",\n        \"symfony/rate-limiter\": \"^6.4|^7.0\",\n        \"symfony/scheduler\": \"^6.4.4|^7.0.4\",\n        \"symfony/security-bundle\": \"^6.4|^7.0\",\n        \"symfony/semaphore\": \"^6.4|^7.0\",\n        \"symfony/serializer\": \"^7.1\",\n        \"symfony/stopwatch\": \"^6.4|^7.0\",\n        \"symfony/string\": \"^6.4|^7.0\",\n        \"symfony/translation\": \"^6.4|^7.0\",\n        \"symfony/twig-bundle\": \"^6.4|^7.0\",\n        \"symfony/type-info\": \"^7.1\",\n        \"symfony/validator\": \"^6.4|^7.0\",\n        \"symfony/workflow\": \"^6.4|^7.0\",\n        \"symfony/yaml\": \"^6.4|^7.0\",\n        \"symfony/property-info\": \"^6.4|^7.0\",\n        \"symfony/uid\": \"^6.4|^7.0\",\n        \"symfony/web-link\": \"^6.4|^7.0\",\n        \"symfony/webhook\": \"^7.2\",\n        \"phpdocumentor/reflection-docblock\": \"^3.0|^4.0|^5.0\",\n        \"twig/twig\": \"^3.12\"\n    },\n    \"conflict\": {\n        \"doctrine/persistence\": \"<1.3\",\n        \"phpdocumentor/reflection-docblock\": \"<3.2.2\",\n        \"phpdocumentor/type-resolver\": \"<1.4.0\",\n        \"symfony/asset\": \"<6.4\",\n        \"symfony/asset-mapper\": \"<6.4\",\n        \"symfony/clock\": \"<6.4\",\n        \"symfony/console\": \"<6.4\",\n        \"symfony/dotenv\": \"<6.4\",\n        \"symfony/dom-crawler\": \"<6.4\",\n        \"symfony/http-client\": \"<6.4\",\n        \"symfony/form\": \"<6.4\",\n        \"symfony/lock\": \"<6.4\",\n        \"symfony/mailer\": \"<6.4\",\n        \"symfony/messenger\": \"<6.4\",\n        \"symfony/mime\": \"<6.4\",\n        \"symfony/property-info\": \"<6.4\",\n        \"symfony/property-access\": \"<6.4\",\n        \"symfony/runtime\": \"<6.4.13|>=7.0,<7.1.6\",\n        \"symfony/scheduler\": \"<6.4.4|>=7.0.0,<7.0.4\",\n        \"symfony/security-csrf\": \"<7.2\",\n        \"symfony/security-core\": \"<6.4\",\n        \"symfony/serializer\": \"<7.1\",\n        \"symfony/stopwatch\": \"<6.4\",\n        \"symfony/translation\": \"<6.4\",\n        \"symfony/twig-bridge\": \"<6.4\",\n        \"symfony/twig-bundle\": \"<6.4\",\n        \"symfony/validator\": \"<6.4\",\n        \"symfony/web-profiler-bundle\": \"<6.4\",\n        \"symfony/webhook\": \"<7.2\",\n        \"symfony/workflow\": \"<6.4\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Bundle\\\\FrameworkBundle\\\\\": \"\" },\n        \"exclude-from-classmap\": [\n            \"/Tests/\"\n        ]\n    },\n    \"minimum-stability\": \"dev\"\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.9482421875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"http://schema.phpunit.de/9.3/phpunit.xsd\"\n         backupGlobals=\"false\"\n         colors=\"true\"\n         bootstrap=\"vendor/autoload.php\"\n         failOnRisky=\"true\"\n         failOnWarning=\"true\"\n>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\" />\n        <env name=\"REDIS_HOST\" value=\"localhost\" />\n        <env name=\"MEMCACHED_HOST\" value=\"localhost\" />\n    </php>\n\n    <testsuites>\n        <testsuite name=\"Symfony FrameworkBundle Test Suite\">\n            <directory>./Tests/</directory>\n        </testsuite>\n    </testsuites>\n\n    <coverage>\n        <include>\n            <directory>./</directory>\n        </include>\n        <exclude>\n            <directory>./Resources</directory>\n            <directory>./Tests</directory>\n            <directory>./vendor</directory>\n        </exclude>\n    </coverage>\n</phpunit>\n"
        }
      ]
    }
  ]
}