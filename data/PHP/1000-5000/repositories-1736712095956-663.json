{
  "metadata": {
    "timestamp": 1736712095956,
    "page": 663,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nahid/talk",
      "stars": 1610,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1181640625,
          "content": "* text=auto\n\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/README.md export-ignore\n/src/Example export-ignore\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0517578125,
          "content": "*.DS_Store\n/vendor\n/.idea\n/composer.lock\nphpunit.xml\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.8759765625,
          "content": "language: php\n\nphp:\n  - 5.5.9\n  - 5.5\n  - 5.6\n  - 7.0\n  - hhvm\n\nsudo: false\n\ninstall:\n  - travis_retry composer install --no-interaction --prefer-source\n\nscript:\n  - if [ \"$TRAVIS_PHP_VERSION\" != \"5.5.9\" ] && [ \"$TRAVIS_PHP_VERSION\" != \"5.5\" ] && [ \"$TRAVIS_PHP_VERSION\" != \"5.6\" ]; then vendor/bin/phpunit; fi\n  - if [ \"$TRAVIS_PHP_VERSION\" == \"5.5.9\" ] || [ \"$TRAVIS_PHP_VERSION\" == \"5.5\" ] || [ \"$TRAVIS_PHP_VERSION\" == \"5.6\" ]; then vendor/bin/phpunit --coverage-clover build/logs/clover.xml; fi\n\nafter_script:\n  - if [ \"$TRAVIS_PHP_VERSION\" == \"5.5.9\" ] || [ \"$TRAVIS_PHP_VERSION\" == \"5.5\" ] || [ \"$TRAVIS_PHP_VERSION\" == \"5.6\" ]; then wget https://scrutinizer-ci.com/ocular.phar; fi\n  - if [ \"$TRAVIS_PHP_VERSION\" == \"5.5.9\" ] || [ \"$TRAVIS_PHP_VERSION\" == \"5.5\" ] || [ \"$TRAVIS_PHP_VERSION\" == \"5.6\" ]; then php ocular.phar code-coverage:upload --format=php-clover build/logs/clover.xml; fi"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0361328125,
          "content": "MIT License\n\nCopyright (c) 2020 nahid\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.1484375,
          "content": "# Laravel-Talk\n\n[![Awesome Laravel](https://img.shields.io/badge/Awesome-Laravel-brightgreen.svg)](https://github.com/chiraggude/awesome-laravel#utilities)\n[![GitHub license](https://img.shields.io/badge/license-CC0-blue.svg)](https://raw.githubusercontent.com/nahid/talk/master/LICENSE)\n[![Build Status](https://travis-ci.org/nahid/talk.svg?branch=master)](https://travis-ci.org/nahid/talk)\n[![MadeWithLaravel.com shield](https://madewithlaravel.com/storage/repo-shields/275-shield.svg)](https://madewithlaravel.com/p/talk/shield-link)\n\nTalk is a user conversation (chatting) system with realtime messaging for Laravel. You can easily integrate this package with any Laravel based project. It helps you to develop a messaging system in just few minutes. Here is a project screenshot that was developed by Talk.   \n\nTalk v2.1.0 supports realtime messaging. Learn more about [Talk Live Messaging](https://github.com/nahid/talk#realtime-messaging) \n\n\n#### Feedback\n\nIf you already used Talk, please share your experience with us. It will make the project better. \n\n[Give us your feedback](https://github.com/nahid/talk/issues/43) \n\n#### Built with Talk\n\nIf you are using Talk in your project please share your project URL or project name with us. It will inspire other people to use Talk.\n\nSee which project was [Built with Talk](https://github.com/nahid/talk/issues/42).\n\n## Caution \n\n> Do not migrate 1.1.7 from its higher version directly. Please try our [sample project](https://github.com/nahid/talk-example) first and then apply it on your project.\n\n\n![Talk-Example Screenshot](http://i.imgur.com/uQ7sgmI.png \"Talk-Example Project\")\n\nYou may try [Talk-Example](https://github.com/nahid/talk-example) project.\n\nOr you can try live [Demo](http://portal.inilabs.net/baseapp/v1.0/admin/message/inbox) by using this credentials:\n\n```\nusername: admin   \npassword: admin\n```\n\n\n\nSo let's start your tour :)\n\n### Features\n\n* Head to head messaging\n* Realtime messaging\n* Creating new conversation\n* Message threads with latest one\n* View conversations by user id or conversation id\n* Support pagination in threads and messages\n* Delete (soft delete) message from both end. Sender and receiver can delete their message from their end\n* Permanent delete message\n* Mark message as seen\n* Only participant can view or access there message or message threads\n* Inline url render using oembed specifications\n\n### Installation\n\nTalk is a Laravel package so you can install it via Composer. Run this command in your terminal from your project directory:\n\n```\ncomposer require nahid/talk\n```\n\nWait for a while, Composer will automatically install Talk in your project.\n\n### Configuration\n\nWhen the download is complete, you have to call this package service in `config/app.php` config file. To do that, add this line in `app.php` in `providers` section:\n\n```php\nNahid\\Talk\\TalkServiceProvider::class,\n```\n\nTo use facade you have to add this line in `app.php` in `aliases` array:\n\n```php\n'Talk'      => Nahid\\Talk\\Facades\\Talk::class,\n```\n\nNow run this command in your terminal to publish this package resources:\n\n```\nphp artisan vendor:publish --provider=\"Nahid\\Talk\\TalkServiceProvider\"\n```\n\nAfter running this command, all necessary file will be included in your project. This package has two default migrations. So you have to run migrate command like this. (But make sure your database configuration is configured correctly.)\n\n```shell\nphp artisan migrate\n```\n\nOkay, now you need to configure your user model for Talk. Go to `config/talk.php` and config it:\n\n```php\nreturn [\n    'user' => [\n        'model' => 'App\\User',\n        'foreignKey' => null,\n        'ownerKey' => null,\n    ],\n\n    'broadcast' => [\n        'enable' => true,\n        'app_name' => 'talk-example',\n        'driver' => env('TALK_BROADCAST_DRIVER', 'pusher'), // pusher or laravel-websockets\n        'pusher' => [\n            'app_id' => env('PUSHER_APP_ID', ''),\n            'app_key' => env('PUSHER_APP_KEY', ''),\n            'app_secret' => env('PUSHER_APP_SECRET', ''),\n            'options' => [\n                'cluster' => env('PUSHER_APP_CLUSTER', 'ap2'),\n                'encrypted' => env('PUSHER_APP_ENCRYPTION', false),\n                'host' => '127.0.0.1',\n                'port' => env('LARAVEL_WEBSOCKETS_PORT', 6001),\n                'scheme' => 'http',\n                'wsHost' => '127.0.0.1',\n                'wsPort' => env('LARAVEL_WEBSOCKETS_PORT', 6001),\n                'forceTLS' => false,\n                'disableStats' => true\n            ]\n        ],\n    ],\n\n\n    'oembed' => [\n        'enabled' => false,\n        'url' => '',\n        'key' => ''\n    ]\n];\n```\n\n\n### Usage\n\nIts very easy to use. If you want to set authenticate user id globally then you have to set a middleware first. Go to `app/Http/Kernel.php` and set it in `$routeMiddleware` array:\n\n ```php\n 'talk'  =>  \\Nahid\\Talk\\Middleware\\TalkMiddleware::class,\n ```\n\n And now you can use it from anywhere with middleware. Suppose you have a Controller and you want to set authenticate user id globally then write this in controller constructor:\n\n \n ```php\n $this->middleware('talk');\n ```\n \nBut instead of set id globally you can use these procedure from any method in controller:\n\n\n```php\nTalk::setAuthUserId(auth()->user()->id);\n```\n\n\nNow you may use any method what you need. But if want pass authentic id instantly, this method may help you:\n\n```php\nTalk::user(auth()->user()->id)->anyMethodHere();\n```\nPlease see the API Doc.\n\n### API List\n\n\n- [setAuthUserId](https://github.com/nahid/talk#setauthuserid)\n- [user](https://github.com/nahid/talk#user)\n- [isConversationExists](https://github.com/nahid/talk#isconversationexists)\n- [isAuthenticUser](https://github.com/nahid/talk#isauthenticuser)\n- [sendMessage](https://github.com/nahid/talk#sendmessage)\n- [sendMessageByUserId](https://github.com/nahid/talk#sendmessagebyuserid)\n- [getInbox](https://github.com/nahid/talk#getinbox)\n- [getInboxAll](https://github.com/nahid/talk#getinboxAll)\n- [threads](https://github.com/nahid/talk#threads)\n- [threadsAll](https://github.com/nahid/talk#threadsall)\n- [getConversationsById](https://github.com/nahid/talk#getconversationbyid)\n- [getConversationsAllById](https://github.com/nahid/talk#getconversationallbyid)\n- [getConversationsByUserId](https://github.com/nahid/talk#getconversationbyuserid)\n- [getConversationsAllByUserId](https://github.com/nahid/talk#getconversationallbyuserid)\n- [getMessages](https://github.com/nahid/talk#getmessages)\n- [getMessagesByUserId](https://github.com/nahid/talk#getmessagesbyuserid)\n- [getMessagesAll](https://github.com/nahid/talk#getmessagesall)\n- [getMessagesAllByUserId](https://github.com/nahid/talk#getmessagesallbyuserid)\n- [readMessage](https://github.com/nahid/talk#readmessage)\n- [makeSeen](https://github.com/nahid/talk#makeseen)\n- [getReceiverInfo](https://github.com/nahid/talk#getreceiverinfo)\n- [deleteMessage](https://github.com/nahid/talk#deletemessage)\n- [deleteForever](https://github.com/nahid/talk#deleteforever)\n- [deleteConversations](https://github.com/nahid/talk#deleteconversations)\n\n\n### setAuthUserId\n\n`setAuthUserId` method sets the currently loggedin user id, which you pass through parameter. If you pass `null` or `empty` value then it returns false.\n\n**Syntax**\n\n```php\nvoid setAuthUserId($userid)\n```\n\n**Example**\n\nConstructor of a Controller is the best place to write this method. \n\n```php\nfunction __construct()\n{\n    Talk::setAuthUserId(auth()->user()->id);\n}\n```\n\nWhen you pass logged in user ID, Talk will know who is currently authenticated for this system. So Talk retrieve all information based on this user.\n\n### user\n\nYou may use this method instead of `setAuthUserId()` method. When you have to instantly access users conversations then you may use it.\n**Syntax**\n\n```php\nobject user($id)\n```\n**Example**\nWhen you haven't set authenticated user id globally, then you just use this method directly with others method.\n\n```php\n$inboxes = Talk::user(auth()->user()->id)->threads();\nreturn view('messages.threads', compact('inboxes'));\n```\n\n### isConversationExists\n\nThis method checks currently logged in user and if given user is already in conversation\n\n**Syntax**\n\n```php\nint|false isConversationExists($userid)\n```\n\n**Example**\n\n```php\nif ($conversationId = Talk::isConversationExists($userId)) {\n    Talk::sendMessage($conversationId, $message);\n} \n```\n\n### isAuthenticUser\n\nisAuthenticUser checks if  the given user exists in given conversation.\n\n**Syntax**\n\n```php\nboolean isAuthenticUser($conversationId, $userId)\n```\n\n**Example**\n\n```php\nif (Talk::isAuthenticUser($conversationId, $userId)) {\n    Talk::sendMessage($conversationId, $message);\n} \n```\n\n### sendMessage\n\nYou can send messages via conversation id by using this method. If the message is successfully sent, it will return objects of Message model otherwise, it will return `false`\n\n**Syntax**\n\n```php\nobject|false sendMessage($conversationId, $message)\n```\n\n**Example**\n\n```php\n    $message = Talk::sendMessage($conversationId, $message);\n    if ($message) {\n        return response()->json(['status'=>'success', 'data'=>$message], 200);\n   }\n```\n\n### sendMessageByUserId\n\nYou can send message via receiver id by using this method. If the message is successfully sent, it will return objects of Message model otherwise, it will return `false`\n\n**Syntax**\n\n```php\nobject|false sendMessageByUserId($userId, $message)\n```\n\n### getInbox\n\nIf you want to get all the inboxes except soft deleted message , this method may help you. This method gets all the inboxes via previously assigned authenticated user id. It returns collections of message thread with latest message.\n\n**Syntax**\n\n```php\narray getInbox([$order = 'desc'[,$offset = 0[, $take = 20]]])\n```\n\n\n**Example**\n\n```php\n// controller method\n$inboxes = Talk::getInbox();\nreturn view('message.threads', compact('inboxes'));\n```\n\n```html\n<!-- messages/threads.blade.php -->\n<ul>\n    @foreach($inboxes as $inbox)\n        <li>\n            <h2>{{$inbox->withUser->name}}</h2>\n            <p>{{$inbox->thread->message}}</p>\n            <span>{{$inbox->thread->humans_time}}</span>\n        </li>\n    @endforeach\n</ul>\n```\n\n### getInboxAll\n\nIts similar as `getInbox()` method. If you want to get all the inboxes with soft deleted messages, this method may help you. This method gets all the inboxes via given user id.\n\n**Syntax**\n\n```php\nobject getInboxAll([$order = 'desc'[,$offset = 0[, $take = 20]]])\n```\n\n### threads\n\nThis method is an alias of `getInbox()` method.\n\n**Syntax**\n\n```php\narray threads([$order = 'desc'[,$offset = 0[, $take = 20]]])\n```\n\n\n### threadsAll\n\nThis method is an alias of `getInboxAll()` method.\n\n**Syntax**\n\n```php\narray threadsAll([$order = 'desc'[,$offset = 0[, $take = 20]]])\n```\n\n### getConversationsById\n\n\nWhen you want to get all the conversations using your desire conversation id, you can try this method. This method returns all the conversations (except soft deleted) with `sender` and `withUser` objects\n\n**Syntax**\n\n```php\narray getConversationsById($conversationId[, $offset = 0[, $take = 20]])\n```\n\n**Example**\n\n```php\n// controller method\n$conversations = Talk::getConversationsById($conversationId);\n$messages = $conversations->messages;\n$withUser = $conversations->withUser;\n\nreturn view('messages.conversations', compact('messages', 'withUser'));\n```\nThis method returns two objects `messages` and `withUser`. `messages` object contains messages collection and `withUser` object contains participant User collections.\n\nLet's see how to use it with your views\n\n```html\n<!-- messages/conversations.blade.php -->\n<div class=\"message-container\">\n    <h2>Chat with {{$withUser->name}}</h2>\n    @foreach ($messages as $msg)\n     <div class=\"message\">\n        <h4>{{$msg->sender->name}}</h4>\n        <span>{{$msg->humans_time}}</span>\n        <p>\n            {{$msg->message}}\n       </p> \n    </div>\n    @endforeach\n</div>\n```\n\n### getConversationsAllById\n\nThis method is similar as `getConversationsById()`. The only difference between this method is its return all messages with soft deleted items.\n\n**Syntax**\n\n```php\narray getConversationsAllById($conversationId[, $offset = 0[, $take = 20]])\n```\n### getConversationsByUserId\n\nWhen you want to get all the conversations using your desire receiver id, you can try this method. This method returns all the conversations (except soft deleted message) with user's objects\n\n**Syntax**\n\n```php\nobject getConversationsByUserId($receiverId [, $offset = 0[, $take = 20]])\n```\n\n### getConversationsAllByUserId\n\nThis method is similar as `getConversationsByUserId()`. The only difference between this method is it returns all messages with soft deleted items.\n\n**Syntax**\n\n```php\narray getConversationsAllByUserId($receiverId[, $offset = 0[, $take = 20]])\n```\n\n### getMessages\n\nThis is a alias of  `getConversationsById()` method.\n\n**Syntax**\n\n```php\narray messages($conversationId[, $offset = 0[, $take = 20]])\n```\n\n### getMessagesAll\n\nThis is a alias of  `getConversationsAllById()` method.\n\n**Syntax**\n\n```php\narray messagesAll($conversationId[, $offset = 0[, $take = 20]])\n```\n\n### getMessagesByUserId\n\nThis is a alias of  `getConversationsByUserId()` method.\n\n**Syntax**\n\n```php\narray messagesByUserId($receiverId[, $offset = 0[, $take = 20]])\n```\n\n\n### getMessagesAllByUserId\n\nThis is a alias of  `getConversationsAllByUserId()` method.\n\n**Syntax**\n\n```php\narray messagesAllByUserId($receiverId[, $offset = 0[, $take = 20]])\n```\n\n### readMessage\n\nIf you want to read a single message then you may use it. This message is return a single message object by message id.\n\n**Syntax**\n\n```php\narray readMessage($messageId)\n```\n\n### getReceiverInfo\n\nThis method returns all the information about message receiver. \n\n> This method is deprecated from version 2.0.0 and it will be removed from version 2.0.2\n\n**Syntax**\n\n```php\nobject getReceiverInfo($conversationId)\n```\n\n### makeSeen\n\nIf you want to set a message as seen you can use this method.\n\n**Syntax**\n\n```php\nboolean makeSeen($messageId)\n```\n\n### deleteMessage\n\nWhen you want to delete a specific message from a conversation, you have to use this method. This method soft delete message for both user-end individually.\n\n**Syntax**\n\n```php\nboolean deleteMessage($messageId)\n```\n\n### deleteForever\n\nIf you want to hard delete or permanently delete a specific message then you have to use this method.\n\n**Syntax**\n\n```php\nboolean deleteForever($messageId)\n```\n\n### deleteConversations\n\nThis method is used to permanently delete all conversations.\n\n**Syntax**\n\n```php\nboolean deleteConversations($conversationId)\n```\n\n## Realtime Messaging\n\nTalk also support realtime messaging thats called Talk-Live. Talk support pusher and laravel-websocket for realtime messaging. So first you have to configure pusher or laravel-websocket. Go to `app/talk.php` again and configure.\n\n```php\nreturn [\n    'user' => [\n        'model' => 'App\\User',\n        'foreignKey' => null,\n        'ownerKey' => null,\n    ],\n\n    'broadcast' => [\n        'enable' => true,\n        'app_name' => 'talk-example',\n        'driver' => env('TALK_BROADCAST_DRIVER', 'pusher'), // pusher or laravel-websockets\n        'pusher' => [\n            'app_id' => env('PUSHER_APP_ID', ''),\n            'app_key' => env('PUSHER_APP_KEY', ''),\n            'app_secret' => env('PUSHER_APP_SECRET', ''),\n            'options' => [\n                'cluster' => env('PUSHER_APP_CLUSTER', 'ap2'),\n                'encrypted' => env('PUSHER_APP_ENCRYPTION', false),\n                'host' => '127.0.0.1',\n                'port' => env('LARAVEL_WEBSOCKETS_PORT', 6001),\n                'scheme' => 'http',\n                'wsHost' => '127.0.0.1',\n                'wsPort' => env('LARAVEL_WEBSOCKETS_PORT', 6001),\n                'forceTLS' => false,\n                'disableStats' => true\n            ]\n        ],\n    ],\n\n\n    'oembed' => [\n        'enabled' => false,\n        'url' => '',\n        'key' => ''\n    ]\n];\n```\n\nin this new version broadcast section was added with talk config. Here broadcast is disabled by default.\nIf you want to enable live (realtime) messaging then you have to enable it first. Then add pusher credentials to your .env file and you must add a new line called PUSHER_APP_NAME in the .env file to specify your application pusher name. Thats it. Everytime\nwhen you send message then talk will automatically fire two event, one for specific user and second for specific conversation. So\nyou may listen or subscribe one or both as per your wish. Finally you have to subscribe these events by using `talk_live()` helper function.\nGo to where you want to subscribe to work with message data follow this code.\n\n```\n<script>\n    var msgshow = function(data) {\n        // write what you want with this data\n        \n        console.log(data);\n    }\n</script>\n\n{!! talk_live(['user'=>[\"id\"=>auth()->user()->id, 'callback'=>['msgshow']]]) !!}\n```\n\n`talk_live()` supports one parameters as array. The first parameter is for channel name which you want to subscribe. You have not know which channel was broadcast.\nTalk broadcast two channel by default. One for user and second for conversation. If you want to subscribe channel for currently loggedin user then you have to pass\n\nlogedin user id in 'user' key. `['user'=>['id'=>auth()->user()->id, 'callback'=>[]]` or you want to subscribe for conversation id you have pass conversation id as\n'conversation' key. `['conversation'=>['id'=>$conversationID, 'callback'=>[]]`. You may pass both if you want.\n\nYou can pass a callback for working with pusher recieved data. For both `user` and `conversation` section support callbacks as array. So you can pass multiple callback as array value that was shown in previous example.\n\nYou can watch [Talk-Live-Demo](https://youtu.be/bN3s_LbObnQ)\n\n## Oembed support\n\nTalk also supports embed urls simply use `$message->toHtlmString()` in you views to render an embed link\n\nEg. `This is a youtube embed link: https://www.youtube.com/watch?v=jNQXAC9IVRw`\n\n```html\n<div class=\"message-container\">\n    <h2>Chat with {{$withUser->name}}</h2>\n    @foreach ($messages as $msg)\n     <div class=\"message\">\n        <h4>{{$msg->sender->name}}</h4>\n        <span>{{$msg->humans_time}}</span>\n        <p>\n            {{$msg->toHtmlString()}}\n       </p> \n    </div>\n    @endforeach\n</div>\n``` \n\n## Custom embed link\n\nIf you want to setup your own implementation of oembed you can configure it in the talk config file. You endpoint should follow the [Oembed](https://oembed.com/) specifications\n\n```php\n    'user' => [\n        ...\n    ],\n    ...\n    ],\n    'oembed' => [\n        'enabled' => true,\n        'url' => 'http://your.domain/api/oembed',\n        'key' => 'yout-auth-api-key'\n    ]\n```\n### Testing\n\nTalk is backwards compatible with php 5.5.  Use docker to run unit tests.\n\n```bash\ndocker-compose run php55 composer install\ndocker-compose run php55 phpunit\n```\n\n```bash\ndocker-compose run php56 composer install\ndocker-compose run php56 phpunit\n```\n\n```bash\ndocker-compose run php7 composer install\ndocker-compose run php7 phpunit\n```\n\n```bash\ndocker-compose run hhvm composer install\ndocker-compose run hhvm phpunit\n```\n\n### Try Demo Project\n[Talk-Example](https://github.com/nahid/talk-example)\n\n#### Special Thanks To\n[Shipu Ahamed](https://github.com/shipu)\n\nThanks :)\n\n## Support for this project\nHey dude! Help me out for a couple of :beers:!\n\n[![Beerpay](https://beerpay.io/nahid/talk/badge.svg?style=beer-square)](https://beerpay.io/nahid/talk)  [![Beerpay](https://beerpay.io/nahid/talk/make-wish.svg?style=flat-square)](https://beerpay.io/nahid/talk?focus=wish)\n\n"
        },
        {
          "name": "changelog.txt",
          "type": "blob",
          "size": 0.7744140625,
          "content": "Version: 1.1.2\n=================\n1. Fix facade related issue\n2. Add new Method getReceiverInfo($conversationId)\n3. Make getInbox method easier. Now you just call getInbox() instead of getInbox($userId);\n4. Add new dependency Carbon/Carbon\n5. Now you can get message date as like facebook. Example: 3 Mins ago. We are add an imaginary attribut. So you can call it by $message->time_ago\n6. And improve some performance \n\nVersion: 1.1.3\n==================\n1. Fixed newConversation's parameter related issue\n2. Fixed SQL injection by ptondereau \n\nVersion :1.1.4\n=============================\n1. Fixed facades issue\n2. Improve inbox  for sender and reciever wise soft delete\n3. Improve conversations data\n4. Add a new method for talk 'getInboxAll'. Its return all messages with soft deleted message"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.3759765625,
          "content": "{\n    \"name\": \"nahid/talk\",\n    \"description\": \"Talk is a Laravel based realtime messaging, chatting and conversation system. It helps to develop users messaging, chatting and conversations in easy way.\",\n    \"keywords\": [\"message\", \"inbox\", \"conversations\", \"chat\", \"php\", \"laravel\", \"realtime\", \"real-time\"],\n    \"homepage\": \"https://github.com/nahid/talk\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Nahid Bin Azhar\",\n            \"email\": \"nahid.dns@gmail.com\"\n        }\n    ],\n  \"require\": {\n    \"php\": \">=5.6\",\n    \"illuminate/contracts\": \">=5.1.0\",\n    \"illuminate/support\": \">=5.1.0\",\n    \"nesbot/carbon\": \"^2.22\",\n    \"pusher/pusher-php-server\": \"^5.0\",\n    \"predis/predis\": \"~1.1.1\",\n    \"mpratt/embera\": \"^1.9\"\n  },\n  \"require-dev\": {\n    \"ext-json\": \"*\",\n    \"graham-campbell/testbench\": \"^3.1 || ^4.0 || ^5.0\",\n    \"phpunit/phpunit\": \"^4.8 || ^5.0 || ^7.0 || ^8.0\"\n  },\n  \"autoload\": {\n    \"psr-4\": {\n      \"Nahid\\\\Talk\\\\\": \"src\"\n    },\n    \"files\": [\n      \"src/helpers/talk.php\"\n    ]\n  },\n  \"autoload-dev\": {\n    \"psr-4\": {\n      \"Nahid\\\\Talk\\\\Tests\\\\\": \"tests\"\n    }\n  },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"Nahid\\\\Talk\\\\TalkServiceProvider\"\n            ],\n            \"aliases\": {\n                \"Talk\": \"Nahid\\\\Talk\\\\Facades\\\\Talk\"\n            }\n        }\n    },\n  \"minimum-stability\": \"dev\",\n  \"prefer-stable\": true\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "database",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.283203125,
          "content": "php55:\n  build: ./docker/php5.5\n  volumes:\n  - .:/app\n  working_dir: /app\nphp56:\n  build: ./docker/php5.6\n  volumes:\n  - .:/app\n  working_dir: /app\nphp7:\n  build: ./docker/php7\n  volumes:\n  - .:/app\n  working_dir: /app\nhhvm:\n  build: ./docker/hhvm\n  volumes:\n  - .:/app\n  working_dir: /app\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.8974609375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         beStrictAboutTestsThatDoNotTestAnything=\"true\"\n         beStrictAboutOutputDuringTests=\"true\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         failOnRisky=\"true\"\n         failOnWarning=\"true\"\n         processIsolation=\"false\"\n         stopOnError=\"false\"\n         stopOnFailure=\"false\"\n         verbose=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"Talk Test Suite\">\n            <directory suffix=\"Test.php\">./tests</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist processUncoveredFilesFromWhitelist=\"true\">\n            <directory suffix=\".php\">./src</directory>\n        </whitelist>\n    </filter>\n</phpunit>"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}