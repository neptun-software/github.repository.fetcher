{
  "metadata": {
    "timestamp": 1736711918411,
    "page": 319,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "composer/xdebug-handler",
      "stars": 2525,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1318359375,
          "content": "\n[*]\nindent_size = 4\nindent_style = space\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.6650390625,
          "content": "\n# Auto-detect text files, ensure they use LF.\n*       text=auto eol=lf\n\n# These files are always considered text and should use LF.\n# See core.whitespace @ https://git-scm.com/docs/git-config for whitespace flags.\n*.php   text eol=lf whitespace=blank-at-eol,blank-at-eof,space-before-tab,tab-in-indent,tabwidth=4 diff=php\n*.json  text eol=lf whitespace=blank-at-eol,blank-at-eof,space-before-tab,tab-in-indent,tabwidth=4\n\n# Ignore these files in GitHub dists and `git archive` actions.\n/.editorconfig export-ignore\n/.gitattributes export-ignore\n/.github export-ignore\n/.gitignore export-ignore\n/phpstan.neon.dist export-ignore\n/phpunit.xml.dist export-ignore\n/tests export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.064453125,
          "content": "composer.lock\nphpcs.xml\nphpunit.xml\n.phpunit.result.cache\nvendor/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.93359375,
          "content": "## [Unreleased]\n\n## [3.0.5] - 2024-05-06\n  * Fixed: fail restart if PHP_BINARY is not available\n\n## [3.0.4] - 2024-03-26\n  * Added: Functional tests.\n  * Fixed: Incompatibility with PHPUnit 10.\n\n## [3.0.3] - 2022-02-25\n  * Added: support for composer/pcre versions 2 and 3.\n\n## [3.0.2] - 2022-02-24\n  * Fixed: regression in 3.0.1 affecting Xdebug 2\n\n## [3.0.1] - 2022-01-04\n  * Fixed: error when calling `isXdebugActive` before class instantiation.\n\n## [3.0.0] - 2021-12-23\n  * Removed: support for legacy PHP versions (< PHP 7.2.5).\n  * Added: type declarations to arguments and return values.\n  * Added: strict typing to all classes.\n\n## [2.0.3] - 2021-12-08\n  * Added: support, type annotations and refactoring for stricter PHPStan analysis.\n\n## [2.0.2] - 2021-07-31\n  * Added: support for `xdebug_info('mode')` in Xdebug 3.1.\n  * Added: support for Psr\\Log versions 2 and 3.\n  * Fixed: remove ini directives from non-cli HOST/PATH sections.\n\n## [2.0.1] - 2021-05-05\n  * Fixed: don't restart if the cwd is a UNC path and cmd.exe will be invoked.\n\n## [2.0.0] - 2021-04-09\n  * Break: this is a major release, see [UPGRADE.md](UPGRADE.md) for more information.\n  * Break: removed optional `$colorOption` constructor param and passthru fallback.\n  * Break: renamed `requiresRestart` param from `$isLoaded` to `$default`.\n  * Break: changed `restart` param `$command` from a string to an array.\n  * Added: support for Xdebug3 to only restart if Xdebug is not running with `xdebug.mode=off`.\n  * Added: `isXdebugActive()` method to determine if Xdebug is still running in the restart.\n  * Added: feature to bypass the shell in PHP-7.4+ by giving `proc_open` an array of arguments.\n  * Added: Process utility class to the API.\n\n## [1.4.6] - 2021-03-25\n  * Fixed: fail restart if `proc_open` has been disabled in `disable_functions`.\n  * Fixed: enable Windows CTRL event handling in the restarted process.\n\n## [1.4.5] - 2020-11-13\n  * Fixed: use `proc_open` when available for correct FD forwarding to the restarted process.\n\n## [1.4.4] - 2020-10-24\n  * Fixed: exception if 'pcntl_signal' is disabled.\n\n## [1.4.3] - 2020-08-19\n  * Fixed: restore SIGINT to default handler in restarted process if no other handler exists.\n\n## [1.4.2] - 2020-06-04\n  * Fixed: ignore SIGINTs to let the restarted process handle them.\n\n## [1.4.1] - 2020-03-01\n  * Fixed: restart fails if an ini file is empty.\n\n## [1.4.0] - 2019-11-06\n  * Added: support for `NO_COLOR` environment variable: https://no-color.org\n  * Added: color support for Hyper terminal: https://github.com/zeit/hyper\n  * Fixed: correct capitalization of Xdebug (apparently).\n  * Fixed: improved handling for uopz extension.\n\n## [1.3.3] - 2019-05-27\n  * Fixed: add environment changes to `$_ENV` if it is being used.\n\n## [1.3.2] - 2019-01-28\n  * Fixed: exit call being blocked by uopz extension, resulting in application code running twice.\n\n## [1.3.1] - 2018-11-29\n  * Fixed: fail restart if `passthru` has been disabled in `disable_functions`.\n  * Fixed: fail restart if an ini file cannot be opened, otherwise settings will be missing.\n\n## [1.3.0] - 2018-08-31\n  * Added: `setPersistent` method to use environment variables for the restart.\n  * Fixed: improved debugging by writing output to stderr.\n  * Fixed: no restart when `php_ini_scanned_files` is not functional and is needed.\n\n## [1.2.1] - 2018-08-23\n  * Fixed: fatal error with apc, when using `apc.mmap_file_mask`.\n\n## [1.2.0] - 2018-08-16\n  * Added: debug information using `XDEBUG_HANDLER_DEBUG`.\n  * Added: fluent interface for setters.\n  * Added: `PhpConfig` helper class for calling PHP sub-processes.\n  * Added: `PHPRC` original value to restart stettings, for use in a restarted process.\n  * Changed: internal procedure to disable ini-scanning, using `-n` command-line option.\n  * Fixed: replaced `escapeshellarg` usage to avoid locale problems.\n  * Fixed: improved color-option handling to respect double-dash delimiter.\n  * Fixed: color-option handling regression from main script changes.\n  * Fixed: improved handling when checking main script.\n  * Fixed: handling for standard input, that never actually did anything.\n  * Fixed: fatal error when ctype extension is not available.\n\n## [1.1.0] - 2018-04-11\n  * Added: `getRestartSettings` method for calling PHP processes in a restarted process.\n  * Added: API definition and @internal class annotations.\n  * Added: protected `requiresRestart` method for extending classes.\n  * Added: `setMainScript` method for applications that change the working directory.\n  * Changed: private `tmpIni` variable to protected for extending classes.\n  * Fixed: environment variables not available in $_SERVER when restored in the restart.\n  * Fixed: relative path problems caused by Phar::interceptFileFuncs.\n  * Fixed: incorrect handling when script file cannot be found.\n\n## [1.0.0] - 2018-03-08\n  * Added: PSR3 logging for optional status output.\n  * Added: existing ini settings are merged to catch command-line overrides.\n  * Added: code, tests and other artefacts to decouple from Composer.\n  * Break: the following class was renamed:\n    - `Composer\\XdebugHandler` -> `Composer\\XdebugHandler\\XdebugHandler`\n\n[Unreleased]: https://github.com/composer/xdebug-handler/compare/3.0.5...HEAD\n[3.0.5]: https://github.com/composer/xdebug-handler/compare/3.0.4...3.0.5\n[3.0.4]: https://github.com/composer/xdebug-handler/compare/3.0.3...3.0.4\n[3.0.3]: https://github.com/composer/xdebug-handler/compare/3.0.2...3.0.3\n[3.0.2]: https://github.com/composer/xdebug-handler/compare/3.0.1...3.0.2\n[3.0.1]: https://github.com/composer/xdebug-handler/compare/3.0.0...3.0.1\n[3.0.0]: https://github.com/composer/xdebug-handler/compare/2.0.3...3.0.0\n[2.0.3]: https://github.com/composer/xdebug-handler/compare/2.0.2...2.0.3\n[2.0.2]: https://github.com/composer/xdebug-handler/compare/2.0.1...2.0.2\n[2.0.1]: https://github.com/composer/xdebug-handler/compare/2.0.0...2.0.1\n[2.0.0]: https://github.com/composer/xdebug-handler/compare/1.4.6...2.0.0\n[1.4.6]: https://github.com/composer/xdebug-handler/compare/1.4.5...1.4.6\n[1.4.5]: https://github.com/composer/xdebug-handler/compare/1.4.4...1.4.5\n[1.4.4]: https://github.com/composer/xdebug-handler/compare/1.4.3...1.4.4\n[1.4.3]: https://github.com/composer/xdebug-handler/compare/1.4.2...1.4.3\n[1.4.2]: https://github.com/composer/xdebug-handler/compare/1.4.1...1.4.2\n[1.4.1]: https://github.com/composer/xdebug-handler/compare/1.4.0...1.4.1\n[1.4.0]: https://github.com/composer/xdebug-handler/compare/1.3.3...1.4.0\n[1.3.3]: https://github.com/composer/xdebug-handler/compare/1.3.2...1.3.3\n[1.3.2]: https://github.com/composer/xdebug-handler/compare/1.3.1...1.3.2\n[1.3.1]: https://github.com/composer/xdebug-handler/compare/1.3.0...1.3.1\n[1.3.0]: https://github.com/composer/xdebug-handler/compare/1.2.1...1.3.0\n[1.2.1]: https://github.com/composer/xdebug-handler/compare/1.2.0...1.2.1\n[1.2.0]: https://github.com/composer/xdebug-handler/compare/1.1.0...1.2.0\n[1.1.0]: https://github.com/composer/xdebug-handler/compare/1.0.0...1.1.0\n[1.0.0]: https://github.com/composer/xdebug-handler/compare/d66f0d15cb57...1.0.0\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2017 Composer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.1435546875,
          "content": "# composer/xdebug-handler\n\n[![packagist](https://img.shields.io/packagist/v/composer/xdebug-handler)](https://packagist.org/packages/composer/xdebug-handler)\n[![Continuous Integration](https://github.com/composer/xdebug-handler/actions/workflows/continuous-integration.yml/badge.svg?branch=main)](https://github.com/composer/xdebug-handler/actions?query=branch:main)\n![license](https://img.shields.io/github/license/composer/xdebug-handler.svg)\n![php](https://img.shields.io/packagist/php-v/composer/xdebug-handler?colorB=8892BF)\n\nRestart a CLI process without loading the Xdebug extension, unless `xdebug.mode=off`.\n\nOriginally written as part of [composer/composer](https://github.com/composer/composer),\nnow extracted and made available as a stand-alone library.\n\n### Version 3\n\nRemoved support for legacy PHP versions and added type declarations.\n\nLong term support for version 2 (PHP 5.3.2 - 7.2.4) follows [Composer 2.2 LTS](https://blog.packagist.com/composer-2-2/) policy.\n\n## Installation\n\nInstall the latest version with:\n\n```bash\n$ composer require composer/xdebug-handler\n```\n\n## Requirements\n\n* PHP 7.2.5 minimum, although using the latest PHP version is highly recommended.\n\n## Basic Usage\n```php\nuse Composer\\XdebugHandler\\XdebugHandler;\n\n$xdebug = new XdebugHandler('myapp');\n$xdebug->check();\nunset($xdebug);\n```\n\nThe constructor takes a single parameter, `$envPrefix`, which is upper-cased and prepended to default base values to create two distinct environment variables. The above example enables the use of:\n\n- `MYAPP_ALLOW_XDEBUG=1` to override automatic restart and allow Xdebug\n- `MYAPP_ORIGINAL_INIS` to obtain ini file locations in a restarted process\n\n## Advanced Usage\n\n* [How it works](#how-it-works)\n* [Limitations](#limitations)\n* [Helper methods](#helper-methods)\n* [Setter methods](#setter-methods)\n* [Process configuration](#process-configuration)\n* [Troubleshooting](#troubleshooting)\n* [Extending the library](#extending-the-library)\n* [Examples](#examples)\n\n### How it works\n\nA temporary ini file is created from the loaded (and scanned) ini files, with any references to the Xdebug extension commented out. Current ini settings are merged, so that most ini settings made on the command-line or by the application are included (see [Limitations](#limitations))\n\n* `MYAPP_ALLOW_XDEBUG` is set with internal data to flag and use in the restart.\n* The command-line and environment are [configured](#process-configuration) for the restart.\n* The application is restarted in a new process.\n    * The restart settings are stored in the environment.\n    * `MYAPP_ALLOW_XDEBUG` is unset.\n    * The application runs and exits.\n* The main process exits with the exit code from the restarted process.\n\nSee [Examples](#examples) for further information.\n\n#### Signal handling\nAsynchronous signal handling is automatically enabled if the pcntl extension is loaded. `SIGINT` is set to `SIG_IGN` in the parent\nprocess and restored to `SIG_DFL` in the restarted process (if no other handler has been set).\n\nFrom PHP 7.4 on Windows, `CTRL+C` and `CTRL+BREAK` handling is automatically enabled in the restarted process and ignored in the parent process.\n\n### Limitations\nThere are a few things to be aware of when running inside a restarted process.\n\n* Extensions set on the command-line will not be loaded.\n* Ini file locations will be reported as per the restart - see [getAllIniFiles()](#getallinifiles-array).\n* Php sub-processes may be loaded with Xdebug enabled - see [Process configuration](#process-configuration).\n\n### Helper methods\nThese static methods provide information from the current process, regardless of whether it has been restarted or not.\n\n#### _getAllIniFiles(): array_\nReturns an array of the original ini file locations. Use this instead of calling `php_ini_loaded_file` and `php_ini_scanned_files`, which will report the wrong values in a restarted process.\n\n```php\nuse Composer\\XdebugHandler\\XdebugHandler;\n\n$files = XdebugHandler::getAllIniFiles();\n\n# $files[0] always exists, it could be an empty string\n$loadedIni = array_shift($files);\n$scannedInis = $files;\n```\n\nThese locations are also available in the `MYAPP_ORIGINAL_INIS` environment variable. This is a path-separated string comprising the location returned from `php_ini_loaded_file`, which could be empty, followed by locations parsed from calling `php_ini_scanned_files`.\n\n#### _getRestartSettings(): ?array_\nReturns an array of settings that can be used with PHP [sub-processes](#sub-processes), or null if the process was not restarted.\n\n```php\nuse Composer\\XdebugHandler\\XdebugHandler;\n\n$settings = XdebugHandler::getRestartSettings();\n/**\n * $settings: array (if the current process was restarted,\n * or called with the settings from a previous restart), or null\n *\n *    'tmpIni'      => the temporary ini file used in the restart (string)\n *    'scannedInis' => if there were any scanned inis (bool)\n *    'scanDir'     => the original PHP_INI_SCAN_DIR value (false|string)\n *    'phprc'       => the original PHPRC value (false|string)\n *    'inis'        => the original inis from getAllIniFiles (array)\n *    'skipped'     => the skipped version from getSkippedVersion (string)\n */\n```\n\n#### _getSkippedVersion(): string_\nReturns the Xdebug version string that was skipped by the restart, or an empty string if there was no restart (or Xdebug is still loaded, perhaps by an extending class restarting for a reason other than removing Xdebug).\n\n```php\nuse Composer\\XdebugHandler\\XdebugHandler;\n\n$version = XdebugHandler::getSkippedVersion();\n# $version: '3.1.1' (for example), or an empty string\n```\n\n#### _isXdebugActive(): bool_\nReturns true if Xdebug is loaded and is running in an active mode (if it supports modes). Returns false if Xdebug is not loaded, or it is running with `xdebug.mode=off`.\n\n### Setter methods\nThese methods implement a fluent interface and must be called before the main `check()` method.\n\n#### _setLogger(LoggerInterface $logger): self_\nEnables the output of status messages to an external PSR3 logger. All messages are reported with either `DEBUG` or `WARNING` log levels. For example (showing the level and message):\n\n```\n// No restart\nDEBUG    Checking MYAPP_ALLOW_XDEBUG\nDEBUG    The Xdebug extension is loaded (3.1.1) xdebug.mode=off\nDEBUG    No restart (APP_ALLOW_XDEBUG=0) Allowed by xdebug.mode\n\n// Restart overridden\nDEBUG    Checking MYAPP_ALLOW_XDEBUG\nDEBUG    The Xdebug extension is loaded (3.1.1) xdebug.mode=coverage,debug,develop\nDEBUG    No restart (MYAPP_ALLOW_XDEBUG=1)\n\n// Failed restart\nDEBUG    Checking MYAPP_ALLOW_XDEBUG\nDEBUG    The Xdebug extension is loaded (3.1.0)\nWARNING  No restart (Unable to create temp ini file at: ...)\n```\n\nStatus messages can also be output with `XDEBUG_HANDLER_DEBUG`. See [Troubleshooting](#troubleshooting).\n\n#### _setMainScript(string $script): self_\nSets the location of the main script to run in the restart. This is only needed in more esoteric use-cases, or if the `argv[0]` location is inaccessible. The script name `--` is supported for standard input.\n\n#### _setPersistent(): self_\nConfigures the restart using [persistent settings](#persistent-settings), so that Xdebug is not loaded in any sub-process.\n\nUse this method if your application invokes one or more PHP sub-process and the Xdebug extension is not needed. This avoids the overhead of implementing specific [sub-process](#sub-processes) strategies.\n\nAlternatively, this method can be used to set up a default _Xdebug-free_ environment which can be changed if a sub-process requires Xdebug, then restored afterwards:\n\n```php\nfunction SubProcessWithXdebug()\n{\n    $phpConfig = new Composer\\XdebugHandler\\PhpConfig();\n\n    # Set the environment to the original configuration\n    $phpConfig->useOriginal();\n\n    # run the process with Xdebug loaded\n    ...\n\n    # Restore Xdebug-free environment\n    $phpConfig->usePersistent();\n}\n```\n\n### Process configuration\nThe library offers two strategies to invoke a new PHP process without loading Xdebug, using either _standard_ or _persistent_ settings. Note that this is only important if the application calls a PHP sub-process.\n\n#### Standard settings\nUses command-line options to remove Xdebug from the new process only.\n\n* The -n option is added to the command-line. This tells PHP not to scan for additional inis.\n* The temporary ini is added to the command-line with the -c option.\n\n>_If the new process calls a PHP sub-process, Xdebug will be loaded in that sub-process (unless it implements xdebug-handler, in which case there will be another restart)._\n\nThis is the default strategy used in the restart.\n\n#### Persistent settings\nUses environment variables to remove Xdebug from the new process and persist these settings to any sub-process.\n\n* `PHP_INI_SCAN_DIR` is set to an empty string. This tells PHP not to scan for additional inis.\n* `PHPRC` is set to the temporary ini.\n\n>_If the new process calls a PHP sub-process, Xdebug will not be loaded in that sub-process._\n\nThis strategy can be used in the restart by calling [setPersistent()](#setpersistent-self).\n\n#### Sub-processes\nThe `PhpConfig` helper class makes it easy to invoke a PHP sub-process (with or without Xdebug loaded), regardless of whether there has been a restart.\n\nEach of its methods returns an array of PHP options (to add to the command-line) and sets up the environment for the required strategy. The [getRestartSettings()](#getrestartsettings-array) method is used internally.\n\n* `useOriginal()` - Xdebug will be loaded in the new process.\n* `useStandard()` - Xdebug will **not** be loaded in the new process - see [standard settings](#standard-settings).\n* `userPersistent()` - Xdebug will **not** be loaded in the new process - see [persistent settings](#persistent-settings)\n\nIf there was no restart, an empty options array is returned and the environment is not changed.\n\n```php\nuse Composer\\XdebugHandler\\PhpConfig;\n\n$config = new PhpConfig;\n\n$options = $config->useOriginal();\n# $options:     empty array\n# environment:  PHPRC and PHP_INI_SCAN_DIR set to original values\n\n$options = $config->useStandard();\n# $options:     [-n, -c, tmpIni]\n# environment:  PHPRC and PHP_INI_SCAN_DIR set to original values\n\n$options = $config->usePersistent();\n# $options:     empty array\n# environment:  PHPRC=tmpIni, PHP_INI_SCAN_DIR=''\n```\n\n### Troubleshooting\nThe following environment settings can be used to troubleshoot unexpected behavior:\n\n* `XDEBUG_HANDLER_DEBUG=1` Outputs status messages to `STDERR`, if it is defined, irrespective of any PSR3 logger. Each message is prefixed `xdebug-handler[pid]`, where pid is the process identifier.\n\n* `XDEBUG_HANDLER_DEBUG=2` As above, but additionally saves the temporary ini file and reports its location in a status message.\n\n### Extending the library\nThe API is defined by classes and their accessible elements that are not annotated as @internal. The main class has two protected methods that can be overridden to provide additional functionality:\n\n#### _requiresRestart(bool $default): bool_\nBy default the process will restart if Xdebug is loaded and not running with `xdebug.mode=off`. Extending this method allows an application to decide, by returning a boolean (or equivalent) value.\nIt is only called if `MYAPP_ALLOW_XDEBUG` is empty, so it will not be called in the restarted process (where this variable contains internal data), or if the restart has been overridden.\n\nNote that the [setMainScript()](#setmainscriptstring-script-self) and [setPersistent()](#setpersistent-self) setters can be used here, if required.\n\n#### _restart(array $command): void_\nAn application can extend this to modify the temporary ini file, its location given in the `tmpIni` property. New settings can be safely appended to the end of the data, which is `PHP_EOL` terminated.\n\nThe `$command` parameter is an array of unescaped command-line arguments that will be used for the new process.\n\nRemember to finish with `parent::restart($command)`.\n\n#### Example\nThis example demonstrates two ways to extend basic functionality:\n\n* To avoid the overhead of spinning up a new process, the restart is skipped if a simple help command is requested.\n\n* The application needs write-access to phar files, so it will force a restart if `phar.readonly` is set (regardless of whether Xdebug is loaded) and change this value in the temporary ini file.\n\n```php\nuse Composer\\XdebugHandler\\XdebugHandler;\nuse MyApp\\Command;\n\nclass MyRestarter extends XdebugHandler\n{\n    private $required;\n\n    protected function requiresRestart(bool $default): bool\n    {\n        if (Command::isHelp()) {\n            # No need to disable Xdebug for this\n            return false;\n        }\n\n        $this->required = (bool) ini_get('phar.readonly');\n        return $this->required || $default;\n    }\n\n    protected function restart(array $command): void\n    {\n        if ($this->required) {\n            # Add required ini setting to tmpIni\n            $content = file_get_contents($this->tmpIni);\n            $content .= 'phar.readonly=0'.PHP_EOL;\n            file_put_contents($this->tmpIni, $content);\n        }\n\n        parent::restart($command);\n    }\n}\n```\n\n### Examples\nThe `tests\\App` directory contains command-line scripts that demonstrate the internal workings in a variety of scenarios.\nSee [Functional Test Scripts](./tests/App/README.md).\n\n## License\ncomposer/xdebug-handler is licensed under the MIT License, see the LICENSE file for details.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.1025390625,
          "content": "{\n    \"name\": \"composer/xdebug-handler\",\n    \"description\": \"Restarts a process without Xdebug.\",\n    \"type\": \"library\",\n    \"license\": \"MIT\",\n    \"keywords\": [\n        \"xdebug\",\n        \"performance\"\n    ],\n    \"authors\": [\n        {\n            \"name\": \"John Stevenson\",\n            \"email\": \"john-stevenson@blueyonder.co.uk\"\n        }\n    ],\n    \"support\": {\n        \"irc\": \"ircs://irc.libera.chat:6697/composer\",\n        \"issues\": \"https://github.com/composer/xdebug-handler/issues\"\n    },\n    \"require\": {\n        \"php\": \"^7.2.5 || ^8.0\",\n        \"psr/log\": \"^1 || ^2 || ^3\",\n        \"composer/pcre\": \"^1 || ^2 || ^3\"\n    },\n    \"require-dev\": {\n        \"phpstan/phpstan\": \"^1.11\",\n        \"phpstan/phpstan-strict-rules\": \"^1.1\",\n        \"phpunit/phpunit\": \"^8.5 || ^9.6 || ^10.5\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Composer\\\\XdebugHandler\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Composer\\\\XdebugHandler\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"scripts\": {\n        \"test\": \"@php vendor/bin/phpunit\",\n        \"phpstan\": \"@php vendor/bin/phpstan analyse\"\n    }\n}\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.234375,
          "content": "includes:\n    - vendor/phpstan/phpstan/conf/bleedingEdge.neon\n    - vendor/phpstan/phpstan-strict-rules/rules.neon\n\nparameters:\n    level: 9\n    bootstrapFiles:\n        - tests/bootstrap_phpstan.php\n    paths:\n        - src\n        - tests\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.3583984375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n    colors=\"true\"\n    bootstrap=\"vendor/autoload.php\"\n>\n    <testsuites>\n        <testsuite name=\"XdebugHandler Test Suite\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n\n    <groups>\n        <exclude>\n            <group>functional</group>\n        </exclude>\n    </groups>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}