{
  "metadata": {
    "timestamp": 1736711985631,
    "page": 457,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FriendsOfPHP/security-advisories",
      "stars": 2056,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.263671875,
          "content": "# For more information about the properties used in\n# this file, please see the EditorConfig documentation:\n# http://editorconfig.org/\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0234375,
          "content": "/composer.lock\n/vendor/\n"
        },
        {
          "name": "3f",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1826171875,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.3369140625,
          "content": "PHP Security Advisories Database\n================================\n\nThe PHP Security Advisories Database references known security\nvulnerabilities in various PHP projects and libraries. This database **must\nnot** serve as the primary source of information for security issues, it is\nnot authoritative for any referenced software, but it allows to centralize\ninformation for convenience and easy consumption.\n\nLicense\n-------\n\nThe PHP security advisories database is free and unencumbered software released\ninto the public domain.\n\nChecking for Vulnerabilities\n----------------------------\n\nTo check for vulnerabilities in your applications beside manual checks, you should\nuse the [Local CLI tool][1]:\n\n        local-php-security-checker --path=/path/to/composer.lock\n\n**TIP**: If you are using Github, you can use the PHP Security Checker [Github\nAction][2] to automatically check for vulnerabilities when pushing code.\n\nContributing\n------------\n\nContributing security advisories is as easy as it can get:\n\n  * You can contribute a new entry by sending a pull request or by creating a\n    file directly via the Github interface;\n\n  * Create a directory based on the Composer name of the software where the\n    security issue exists (use `symfony/http-foundation` for an issue in the\n    Symfony HttpFoundation component for instance);\n\n  * Each security issue must be saved in a file where the name is the CVE\n    identifier (preferred) or the date when the security issue was announced\n    followed by an increment (`2012-12-12-1` for instance);\n\n  * The file is in the YAML format and **must** contain the following entries\n    (have a look at existing entries for examples):\n\n      * `title`:     A text that describes the security issue in a few words;\n\n      * `link`:      A link to the official security issue announcement (HTTPS\n        links are preferred over HTTP ones);\n\n      * `reference`: A unique reference to identify the software (the only\n        supported scheme is `composer://` followed by the Composer identifier);\n\n      * `branches`: A hash of affected branches, where the name is the branch\n        name (like `2.0.x`), and the value is a hash with the following\n        entries:\n\n          * `time`: The date and time in UTC when the security issue was fixed or null if the\n            issue is not fixed yet (most of the time, the date of the **merge**\n            commit that fixed the issue in the following format `2012-08-27\n            19:17:44`) -- this information must be as accurate as possible as it\n            is used to determine if a project is affected or not;\n\n          * `versions`: An array of constraints describing affected versions\n            for this branch (this is the same format as the one used for\n            Composer -- `['>=2.0.0', '<2.0.17']`).\n\n  * If you have a CVE identifier, add it under the `cve` key.\n\n  * Make sure your file validates by running `php -d memory_limit=-1 validator.php` from the root of this project.\n    This script needs some dependencies to be installed via composer, so you need to\n    run `composer install` before.\n\nIf some affected code is available through different Composer entries (like\nwhen you have read-only subtree splits of a main repository), duplicate the\ninformation in several files.\n\n[1]: https://github.com/fabpot/local-php-security-checker\n[2]: https://github.com/marketplace/actions/the-php-security-checker\n"
        },
        {
          "name": "adodb",
          "type": "tree",
          "content": null
        },
        {
          "name": "alterphp",
          "type": "tree",
          "content": null
        },
        {
          "name": "amphp",
          "type": "tree",
          "content": null
        },
        {
          "name": "api-platform",
          "type": "tree",
          "content": null
        },
        {
          "name": "asymmetricrypt",
          "type": "tree",
          "content": null
        },
        {
          "name": "aws",
          "type": "tree",
          "content": null
        },
        {
          "name": "brightlocal",
          "type": "tree",
          "content": null
        },
        {
          "name": "brotkrueml",
          "type": "tree",
          "content": null
        },
        {
          "name": "bugsnag",
          "type": "tree",
          "content": null
        },
        {
          "name": "cakephp",
          "type": "tree",
          "content": null
        },
        {
          "name": "cart2quote",
          "type": "tree",
          "content": null
        },
        {
          "name": "cartalyst",
          "type": "tree",
          "content": null
        },
        {
          "name": "causal",
          "type": "tree",
          "content": null
        },
        {
          "name": "codeception",
          "type": "tree",
          "content": null
        },
        {
          "name": "codeigniter",
          "type": "tree",
          "content": null
        },
        {
          "name": "codeigniter4",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.4580078125,
          "content": "{\n    \"name\": \"sensiolabs/security-advisories\",\n    \"description\": \"Database of known security vulnerabilities in various PHP projects and libraries\",\n    \"require-dev\": {\n        \"php\": \">=8.1\",\n        \"composer/composer\": \"^2.5\",\n        \"symfony/console\": \"^6.2\",\n        \"symfony/yaml\": \"^6.2\"\n    },\n    \"license\": \"Unlicense\",\n    \"authors\": [\n        {\n            \"name\": \"Fabien Potencier\",\n            \"email\": \"fabien.potencier@gmail.com\"\n        }\n    ]\n}\n"
        },
        {
          "name": "composer",
          "type": "tree",
          "content": null
        },
        {
          "name": "contao-components",
          "type": "tree",
          "content": null
        },
        {
          "name": "contao",
          "type": "tree",
          "content": null
        },
        {
          "name": "datadog",
          "type": "tree",
          "content": null
        },
        {
          "name": "david-garcia",
          "type": "tree",
          "content": null
        },
        {
          "name": "derhansen",
          "type": "tree",
          "content": null
        },
        {
          "name": "directmailteam",
          "type": "tree",
          "content": null
        },
        {
          "name": "doctrine",
          "type": "tree",
          "content": null
        },
        {
          "name": "dompdf",
          "type": "tree",
          "content": null
        },
        {
          "name": "drupal",
          "type": "tree",
          "content": null
        },
        {
          "name": "elijaa",
          "type": "tree",
          "content": null
        },
        {
          "name": "endroid",
          "type": "tree",
          "content": null
        },
        {
          "name": "enshrined",
          "type": "tree",
          "content": null
        },
        {
          "name": "erusev",
          "type": "tree",
          "content": null
        },
        {
          "name": "ezsystems",
          "type": "tree",
          "content": null
        },
        {
          "name": "ezyang",
          "type": "tree",
          "content": null
        },
        {
          "name": "facade",
          "type": "tree",
          "content": null
        },
        {
          "name": "firebase",
          "type": "tree",
          "content": null
        },
        {
          "name": "fixpunkt",
          "type": "tree",
          "content": null
        },
        {
          "name": "fooman",
          "type": "tree",
          "content": null
        },
        {
          "name": "fossar",
          "type": "tree",
          "content": null
        },
        {
          "name": "frappant",
          "type": "tree",
          "content": null
        },
        {
          "name": "friendsofsymfony",
          "type": "tree",
          "content": null
        },
        {
          "name": "friendsofsymfony1",
          "type": "tree",
          "content": null
        },
        {
          "name": "friendsoftypo3",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuel",
          "type": "tree",
          "content": null
        },
        {
          "name": "gos",
          "type": "tree",
          "content": null
        },
        {
          "name": "gree",
          "type": "tree",
          "content": null
        },
        {
          "name": "gregwar",
          "type": "tree",
          "content": null
        },
        {
          "name": "guzzlehttp",
          "type": "tree",
          "content": null
        },
        {
          "name": "illuminate",
          "type": "tree",
          "content": null
        },
        {
          "name": "in2code",
          "type": "tree",
          "content": null
        },
        {
          "name": "ivankristianto",
          "type": "tree",
          "content": null
        },
        {
          "name": "james-heinrich",
          "type": "tree",
          "content": null
        },
        {
          "name": "joomla",
          "type": "tree",
          "content": null
        },
        {
          "name": "jsmitty12",
          "type": "tree",
          "content": null
        },
        {
          "name": "jweiland",
          "type": "tree",
          "content": null
        },
        {
          "name": "kazist",
          "type": "tree",
          "content": null
        },
        {
          "name": "klaviyo",
          "type": "tree",
          "content": null
        },
        {
          "name": "knplabs",
          "type": "tree",
          "content": null
        },
        {
          "name": "kreait",
          "type": "tree",
          "content": null
        },
        {
          "name": "la-haute-societe",
          "type": "tree",
          "content": null
        },
        {
          "name": "laminas",
          "type": "tree",
          "content": null
        },
        {
          "name": "laravel",
          "type": "tree",
          "content": null
        },
        {
          "name": "lcobucci",
          "type": "tree",
          "content": null
        },
        {
          "name": "league",
          "type": "tree",
          "content": null
        },
        {
          "name": "lexik",
          "type": "tree",
          "content": null
        },
        {
          "name": "livewire",
          "type": "tree",
          "content": null
        },
        {
          "name": "magento",
          "type": "tree",
          "content": null
        },
        {
          "name": "matyhtf",
          "type": "tree",
          "content": null
        },
        {
          "name": "mautic",
          "type": "tree",
          "content": null
        },
        {
          "name": "mdanter",
          "type": "tree",
          "content": null
        },
        {
          "name": "mediawiki",
          "type": "tree",
          "content": null
        },
        {
          "name": "microsoft",
          "type": "tree",
          "content": null
        },
        {
          "name": "microweber",
          "type": "tree",
          "content": null
        },
        {
          "name": "monolog",
          "type": "tree",
          "content": null
        },
        {
          "name": "mustache",
          "type": "tree",
          "content": null
        },
        {
          "name": "namshi",
          "type": "tree",
          "content": null
        },
        {
          "name": "nategood",
          "type": "tree",
          "content": null
        },
        {
          "name": "neos",
          "type": "tree",
          "content": null
        },
        {
          "name": "nette",
          "type": "tree",
          "content": null
        },
        {
          "name": "nyholm",
          "type": "tree",
          "content": null
        },
        {
          "name": "nystudio107",
          "type": "tree",
          "content": null
        },
        {
          "name": "nzo",
          "type": "tree",
          "content": null
        },
        {
          "name": "onelogin",
          "type": "tree",
          "content": null
        },
        {
          "name": "oneup",
          "type": "tree",
          "content": null
        },
        {
          "name": "openid",
          "type": "tree",
          "content": null
        },
        {
          "name": "oro",
          "type": "tree",
          "content": null
        },
        {
          "name": "padraic",
          "type": "tree",
          "content": null
        },
        {
          "name": "pagarme",
          "type": "tree",
          "content": null
        },
        {
          "name": "paragonie",
          "type": "tree",
          "content": null
        },
        {
          "name": "passbolt",
          "type": "tree",
          "content": null
        },
        {
          "name": "paypal",
          "type": "tree",
          "content": null
        },
        {
          "name": "pear",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpbb",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpmailer",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpmyadmin",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpoffice",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpseclib",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpwhois",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpxmlrpc",
          "type": "tree",
          "content": null
        },
        {
          "name": "propel",
          "type": "tree",
          "content": null
        },
        {
          "name": "pusher",
          "type": "tree",
          "content": null
        },
        {
          "name": "react",
          "type": "tree",
          "content": null
        },
        {
          "name": "rmccue",
          "type": "tree",
          "content": null
        },
        {
          "name": "robrichards",
          "type": "tree",
          "content": null
        },
        {
          "name": "rudloff",
          "type": "tree",
          "content": null
        },
        {
          "name": "sabberworm",
          "type": "tree",
          "content": null
        },
        {
          "name": "sabre",
          "type": "tree",
          "content": null
        },
        {
          "name": "scheb",
          "type": "tree",
          "content": null
        },
        {
          "name": "sensiolabs",
          "type": "tree",
          "content": null
        },
        {
          "name": "serluck",
          "type": "tree",
          "content": null
        },
        {
          "name": "shopware",
          "type": "tree",
          "content": null
        },
        {
          "name": "silverstripe",
          "type": "tree",
          "content": null
        },
        {
          "name": "simple-updates",
          "type": "tree",
          "content": null
        },
        {
          "name": "simplesamlphp",
          "type": "tree",
          "content": null
        },
        {
          "name": "sitegeist",
          "type": "tree",
          "content": null
        },
        {
          "name": "slim",
          "type": "tree",
          "content": null
        },
        {
          "name": "smarty",
          "type": "tree",
          "content": null
        },
        {
          "name": "socalnick",
          "type": "tree",
          "content": null
        },
        {
          "name": "socialiteproviders",
          "type": "tree",
          "content": null
        },
        {
          "name": "spoonity",
          "type": "tree",
          "content": null
        },
        {
          "name": "squizlabs",
          "type": "tree",
          "content": null
        },
        {
          "name": "stormpath",
          "type": "tree",
          "content": null
        },
        {
          "name": "studio-42",
          "type": "tree",
          "content": null
        },
        {
          "name": "studiomitte",
          "type": "tree",
          "content": null
        },
        {
          "name": "sulu",
          "type": "tree",
          "content": null
        },
        {
          "name": "swiftmailer",
          "type": "tree",
          "content": null
        },
        {
          "name": "sylius",
          "type": "tree",
          "content": null
        },
        {
          "name": "symbiote",
          "type": "tree",
          "content": null
        },
        {
          "name": "symfont",
          "type": "tree",
          "content": null
        },
        {
          "name": "symfony",
          "type": "tree",
          "content": null
        },
        {
          "name": "t3s",
          "type": "tree",
          "content": null
        },
        {
          "name": "tecnickcom",
          "type": "tree",
          "content": null
        },
        {
          "name": "terminal42",
          "type": "tree",
          "content": null
        },
        {
          "name": "thelia",
          "type": "tree",
          "content": null
        },
        {
          "name": "theonedemon",
          "type": "tree",
          "content": null
        },
        {
          "name": "timber",
          "type": "tree",
          "content": null
        },
        {
          "name": "titon",
          "type": "tree",
          "content": null
        },
        {
          "name": "tpwd",
          "type": "tree",
          "content": null
        },
        {
          "name": "truckersmp",
          "type": "tree",
          "content": null
        },
        {
          "name": "twig",
          "type": "tree",
          "content": null
        },
        {
          "name": "typo3",
          "type": "tree",
          "content": null
        },
        {
          "name": "typo3fluid",
          "type": "tree",
          "content": null
        },
        {
          "name": "ua-parser",
          "type": "tree",
          "content": null
        },
        {
          "name": "validator.php",
          "type": "blob",
          "size": 12.2197265625,
          "content": "<?php\n\n// validates that all security advisories are valid\n\nif (!is_file($autoloader = __DIR__.'/vendor/autoload.php')) {\n    echo \"Dependencies are not installed, please run 'composer install' first!\\n\";\n    exit(1);\n}\nrequire $autoloader;\n\nuse Composer\\Config;\nuse Composer\\IO\\NullIO;\nuse Composer\\Repository\\ComposerRepository;\nuse Composer\\Repository\\RepositoryInterface;\nuse Composer\\Util\\HttpDownloader;\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Helper\\ProgressBar;\nuse Symfony\\Component\\Console\\Helper\\Table;\nuse Symfony\\Component\\Console\\Helper\\TableCell;\nuse Symfony\\Component\\Console\\Helper\\TableSeparator;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Style\\SymfonyStyle;\nuse Symfony\\Component\\Yaml\\Exception\\ParseException;\nuse Symfony\\Component\\Yaml\\Parser;\n\nfinal class Validate extends Command\n{\n    private Parser $parser;\n    private array $composerRepositories = array();\n    private Config $composerConfig;\n    private HttpDownloader $httpDownloader;\n\n    public function __construct()\n    {\n        parent::__construct('validate');\n\n        $this->parser = new Parser();\n        $this->composerConfig = new Config(false);\n        $this->composerConfig->merge(array('config' => array('cache-dir' => sys_get_temp_dir().'/php-security-advisories')));\n        $this->httpDownloader = new HttpDownloader(new NullIO(), $this->composerConfig);\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $io = new SymfonyStyle($input, $output);\n\n        $advisoryFilter = function (SplFileInfo $file) {\n            if ($file->isFile() && __DIR__ === $file->getPath()) {\n                return false; // We want to skip root files\n            }\n\n            if ($file->isDir()) {\n                if (__DIR__.DIRECTORY_SEPARATOR.'vendor' === $file->getPathname()) {\n                    return false; // We want to skip the vendor dir\n                }\n\n                $dirName = $file->getFilename();\n                if ('.' === $dirName[0]) {\n                    return false; // Exclude hidden folders (.git and IDE folders at the root)\n                }\n            }\n\n            return true; // any other file gets checks and any other folder gets iterated\n        };\n\n        $isAcceptableVersionConstraint = function ($versionString) {\n            return (bool) preg_match('/^\n                [<>]=?\n                (([1-9]\\d*)|0)\n                (\\.(([1-9]\\d*)|0))*\n                (-(alpha|beta|rc|p(atch)?)[1-9]\\d*)?\n            $/x', $versionString);\n        };\n\n        $messages = array();\n\n        /* @var $dir \\Traversable<\\SplFileInfo> */\n        $dir = new \\RecursiveIteratorIterator(new RecursiveCallbackFilterIterator(new \\RecursiveDirectoryIterator(__DIR__), $advisoryFilter));\n\n        $progress = new ProgressBar($io, count(iterator_to_array($dir)));\n        $progress->start();\n\n        foreach ($dir as $file) {\n            if (!$file->isFile()) {\n                $progress->advance();\n\n                continue;\n            }\n\n            $path = str_replace(__DIR__.DIRECTORY_SEPARATOR, '', $file->getPathname());\n\n            if ('yaml' !== $file->getExtension()) {\n                $messages[$path][] = 'The file extension should be \".yaml\".';\n                continue;\n            }\n\n            try {\n                $data = $this->parser->parse(file_get_contents($file));\n\n                // validate first level keys\n                if ($keys = array_diff(array_keys($data), array('reference', 'branches', 'title', 'link', 'cve', 'composer-repository'))) {\n                    foreach ($keys as $key) {\n                        $messages[$path][] = sprintf('Key \"%s\" is not supported.', $key);\n                    }\n                }\n\n                // required keys\n                foreach (array('reference', 'title', 'link', 'branches') as $key) {\n                    if (!isset($data[$key])) {\n                        $messages[$path][] = sprintf('Key \"%s\" is required.', $key);\n                    }\n                }\n\n                if (isset($data['reference'])) {\n                    if (0 !== strpos($data['reference'], 'composer://')) {\n                        $messages[$path][] = 'Reference must start with \"composer://\"';\n                    } else {\n                        $composerPackage = substr($data['reference'], 11);\n\n                        if (str_replace(DIRECTORY_SEPARATOR, '/', dirname($path)) !== $composerPackage) {\n                            $messages[$path][] = 'Reference composer package must match the folder name';\n                        }\n\n                        if (!isset($data['composer-repository'])) {\n                            $data['composer-repository'] = 'https://repo.packagist.org';\n                        }\n\n                        if (!empty($data['composer-repository'])) {\n                            $composerRepository = $this->getComposerRepository($data['composer-repository']);\n\n                            $found = false;\n                            foreach ($composerRepository->search($composerPackage, RepositoryInterface::SEARCH_NAME) as $package) {\n                                if ($package['name'] === $composerPackage) {\n                                    $found = true;\n                                    break;\n                                }\n                            }\n                            if (!$found) {\n                                $messages[$path][] = sprintf('Invalid composer package (not found in repository %s)', $data['composer-repository']);\n                            }\n                        }\n                    }\n                }\n\n                if (isset($data['cve']) && !str_starts_with($data['cve'], 'CVE-')) {\n                    $messages[$path][] = '\"cve\" must be a valid CVE number when provided.';\n                }\n\n                if (!isset($data['branches'])) {\n                    $progress->advance();\n\n                    continue; // Don't validate branches when not set to avoid notices\n                }\n\n                if (!is_array($data['branches'])) {\n                    $messages[$path][] = '\"branches\" must be an array.';\n                    $progress->advance();\n\n                    continue;  // Don't validate branches when not set to avoid notices\n                }\n\n                $upperBoundWithoutLowerBound = null;\n\n                foreach ($data['branches'] as $name => $branch) {\n                    if (!preg_match('/^([\\d.\\-]+(\\.x)?(-dev)?|master|main)$/', $name)) {\n                        $messages[$path][] = sprintf('Invalid branch name \"%s\".', $name);\n                    }\n\n                    if ($keys = array_diff(array_keys($branch), array('time', 'versions'))) {\n                        foreach ($keys as $key) {\n                            $messages[$path][] = sprintf('Key \"%s\" is not supported for branch \"%s\".', $key, $name);\n                        }\n                    }\n\n                    if (!array_key_exists('time', $branch)) {\n                        $messages[$path][] = sprintf('Key \"time\" is required for branch \"%s\".', $name);\n                    }\n\n                    if (!isset($branch['versions'])) {\n                        $messages[$path][] = sprintf('Key \"versions\" is required for branch \"%s\".', $name);\n                    } elseif (!is_array($branch['versions'])) {\n                        $messages[$path][] = sprintf('\"versions\" must be an array for branch \"%s\".', $name);\n                    } else {\n                        $upperBound = null;\n                        $hasMin = false;\n                        foreach ($branch['versions'] as $version) {\n                            if (!$isAcceptableVersionConstraint($version)) {\n                                $messages[$path][] = sprintf('Version constraint \"%s\" is not in an acceptable format.', $version);\n                            }\n\n                            if ('<' === substr($version, 0, 1)) {\n                                if (null !== $upperBound) {\n                                    $messages[$path][] = sprintf('\"versions\" cannot have multiple upper bounds for branch \"%s\".', $name);\n                                    continue;\n                                }\n\n                                $upperBound = $version;\n                                continue;\n                            }\n                            if ('>' === substr($version, 0, 1)) {\n                                if ($hasMin) {\n                                    $messages[$path][] = sprintf('\"versions\" cannot have multiple lower bounds for branch \"%s\".', $name);\n                                    continue;\n                                }\n\n                                $hasMin = true;\n                            }\n                        }\n\n                        if (null === $upperBound) {\n                            $messages[$path][] = sprintf('\"versions\" must have an upper bound for branch \"%s\".', $name);\n                        }\n\n                        if (!$hasMin && null === $upperBoundWithoutLowerBound) {\n                            $upperBoundWithoutLowerBound = $upperBound;\n                        }\n\n                        // Branches can omit the lower bound only if their upper bound is the same than for other branches without lower bound.\n                        if (!$hasMin && $upperBoundWithoutLowerBound !== $upperBound) {\n                            $messages[$path][] = sprintf('\"versions\" must have a lower bound for branch \"%s\" to avoid overlapping lower branches.', $name);\n                        }\n                    }\n                }\n\n                if (isset($data['cve']) && $data['cve'] !== $file->getBasename('.yaml')) {\n                    $messages[$path][] = sprintf('The filename should be %s.yaml.', $data['cve']);\n                }\n\n            } catch (ParseException $e) {\n                $messages[$path][] = sprintf('YAML is not valid (%s).', $e->getMessage());\n            }\n\n            $progress->advance();\n        }\n\n        $progress->finish();\n\n        $io->newLine();\n\n        if ($messages) {\n            $io->error(sprintf('Found %s issue%s in %s file%s.',\n                $issues = array_sum(array_map('count', $messages)),\n                1 === $issues ? '' : 's', $files = count($messages),\n                1 === $files ? '' : 's'\n            ));\n            $table = new Table($io);\n\n            $table->setHeaders(array('File', 'Issues'));\n\n            $files = array_keys($messages);\n            $lastFile = array_pop($files);\n\n            foreach ($messages as $file => $issues) {\n                $table->addRow(array(\n                    new TableCell($file, array('rowspan' => count($issues))),\n                    array_shift($issues)\n                ));\n\n                foreach ($issues as $issue) {\n                    $table->addRow(array($issue));\n                }\n\n                if ($file !== $lastFile) {\n                    $table->addRow(new TableSeparator());\n                }\n            }\n\n            $table->render();\n        } else {\n            $io->success('No issues found.');\n        }\n\n        return count($messages);\n    }\n\n    private function getComposerRepository($uri): ComposerRepository\n    {\n        if (!isset($this->composerRepositories[$uri])) {\n            $repository = new ComposerRepository(\n                array(\n                    'url' => $uri,\n                ),\n                new NullIO(),\n                $this->composerConfig,\n                $this->httpDownloader\n            );\n\n            $this->composerRepositories[$uri] = $repository;\n        }\n\n        return $this->composerRepositories[$uri];\n    }\n}\n\nfinal class Validator extends Application\n{\n    protected function getCommandName(InputInterface $input): ?string\n    {\n        return 'validate';\n    }\n\n    protected function getDefaultCommands(): array\n    {\n        $defaultCommands = parent::getDefaultCommands();\n\n        $defaultCommands[] = new Validate();\n\n        return $defaultCommands;\n    }\n\n    public function getDefinition(): InputDefinition\n    {\n        $inputDefinition = parent::getDefinition();\n\n        $inputDefinition->setArguments();\n\n        return $inputDefinition;\n    }\n}\n\n$application = new Validator();\n\n$application->run();\n"
        },
        {
          "name": "vrana",
          "type": "tree",
          "content": null
        },
        {
          "name": "waldhacker",
          "type": "tree",
          "content": null
        },
        {
          "name": "wallabag",
          "type": "tree",
          "content": null
        },
        {
          "name": "wikimedia",
          "type": "tree",
          "content": null
        },
        {
          "name": "willdurand",
          "type": "tree",
          "content": null
        },
        {
          "name": "wp-cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "yiisoft",
          "type": "tree",
          "content": null
        },
        {
          "name": "zendframework",
          "type": "tree",
          "content": null
        },
        {
          "name": "zetacomponents",
          "type": "tree",
          "content": null
        },
        {
          "name": "zf-commons",
          "type": "tree",
          "content": null
        },
        {
          "name": "zfcampus",
          "type": "tree",
          "content": null
        },
        {
          "name": "zfr",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}