{
  "metadata": {
    "timestamp": 1736712104318,
    "page": 684,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "weprovide/valet-plus",
      "stars": 1562,
      "defaultBranch": "3.x",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0380859375,
          "content": ".DS_Store\nvendor/\n.idea/\ncomposer.lock\n"
        },
        {
          "name": "README.MD",
          "type": "blob",
          "size": 3.48828125,
          "content": "<p align=\"center\"><img width=\"200\" src=\"images/logo.png\"></p>\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/weprovide/valet-plus.svg?style=flat)](https://packagist.org/packages/weprovide/valet-plus)\n[![Downloads on Packagist](https://img.shields.io/packagist/dt/weprovide/valet-plus.svg?style=flat)](https://packagist.org/packages/weprovide/valet-plus)\n\n## Introduction\n\nValet+ is a development environment for macOS. No Vagrant, no Docker, no `/etc/hosts` file. This project uses \n[laravel/valet](https://github.com/laravel/valet) as a dependency.\n\n\n## Installation\n\n> :warning: Valet+ requires macOS and [Homebrew](https://brew.sh/). Before installation, you should make sure that no \n> other programs such as Apache or Nginx are binding to your local machine's port 80.\n\n> :warning: Valet+ requires [Composer](https://getcomposer.org/) to be installed. \n\nTo get started, you first need to ensure that Homebrew is up-to-date using the update command:\n```shell\nbrew update\n```\n\nNext, you should use Homebrew to install PHP 8.1 (using `shivammathur/php`):\n```shell\nbrew tap shivammathur/php\nbrew install shivammathur/php/php@8.1\nbrew link php@8.1 --force\nbrew services restart php@8.1\n```\n\nInstall Valet+ 3.x-dev with composer:\n```shell\ncomposer global require weprovide/valet-plus:3.x-dev\n```\n\nFinally, you may execute the Valet+ `install` command. This will configure and install Valet+, Nginx, DnsMasq and other\nservices. In addition, use `--help` to see all installation options. \n```shell\nvalet-plus install\n```\n\nThe daemons Valet+ depends on will be configured to launch when your system starts. Once Valet+ is installed, try pinging\nany `*.test` domain on your terminal using a command such as `ping foobar.test`. If Valet+ is installed correctly you \nshould see this domain responding on `127.0.0.1`.\n\n\n\n## Valet+ features\n\nHere are a few key differences compared to the original Valet:\n\n- Nginx config optimization\n- PHP extensions (~~mcrypt~~, ~~intl~~, ~~opcache~~, yaml, apcu, ds, imagick)\n- MySQL (mysql@5.7, mysql@8.0, mysql@8.1, mariadb)\n  - DB commands (list, create, drop, reset, (re)import, export, ~~open~~)\n- Mailhog (on/off mode)\n- Varnish (on/off mode)\n- Redis (on/off mode)\n- Rabbitmq (on/off mode)\n- Xdebug (on/off mode)\n- Memcache (on/off mode)\n- Elasticsearch v6, v7, v8 (on/off mode) using Docker \n- Opensearch v2 (on/off mode) using Docker\n- ~~Ioncube~~\n- Rewrite/unrewrite public domain to local environment\n- ~~DevTools~~\n- Binaries (magerun, magerun2, drush, wp-cli, shopware-cli)\n\n### Changes vs Valet+ 2\n\n- Use command `valet-plus` instead of `valet`.\n- Rename `.env.valet` to `.valet-env.php`.\n- Use command `valet-plus elasticsearch|es use <version>` instead of `valet-plus use elasticsearch|es <version>`.\n- Use `127.0.0.1` as Redis host instead of `/tmp/redis.sock`.\n- Choose which binaries to install (default all) and self-update on `valet-plus install` command.\n- Adds dependency on Docker for Elasticsearch, see https://docs.docker.com/desktop/install/mac-install/\n\n\n\n## Get in touch\n\n[![slack](https://p9.zdassets.com/hc/theme_assets/138842/200037786/logo.png)](https://join.slack.com/t/valet-plus/shared_invite/enQtNDE2MjU2NzgyNjQwLWFiYWNjOWFhOWQ2ZDcyOTEyZTA2MzAzOWYyYzYwMTYzODVlMGE3ZDg3ZWQ1M2JmN2M0OGY3OGUwMDI3NDM1NDU)\n\nWe have a slack workspace available [which you can join](https://join.slack.com/t/valet-plus/shared_invite/enQtNDE2MjU2NzgyNjQwLWFiYWNjOWFhOWQ2ZDcyOTEyZTA2MzAzOWYyYzYwMTYzODVlMGE3ZDg3ZWQ1M2JmN2M0OGY3OGUwMDI3NDM1NDU).\n\nYes, we have a Valet+ fan page https://www.weprovide.com/valet-plus\n"
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.7861328125,
          "content": "{\n    \"name\": \"weprovide/valet-plus\",\n    \"description\": \"Blazing fast macOS PHP development environment\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Mischa Braam\",\n            \"email\": \"mischa.braam@iodigital.com\"\n        }\n    ],\n    \"autoload\": {\n        \"files\": [\n            \"cli/includes/facades.php\"\n        ],\n        \"psr-4\": {\n            \"WeProvide\\\\ValetPlus\\\\\": \"cli/ValetPlus/\"\n        }\n    },\n    \"config\": {\n        \"platform-check\": false,\n        \"allow-plugins\": {\n            \"phpro/grumphp-shim\": true\n        }\n    },\n    \"bin\": [\n        \"valet-plus\"\n    ],\n    \"require\": {\n        \"php\": \"^7.1|^8.0\",\n        \"laravel/valet\": \"^4.5\"\n    },\n    \"require-dev\": {\n        \"squizlabs/php_codesniffer\": \"^3.8\",\n        \"phpro/grumphp-shim\": \"^2.4\"\n    }\n}\n"
        },
        {
          "name": "grumphp.yml",
          "type": "blob",
          "size": 0.22265625,
          "content": "grumphp:\n  ascii:\n    failed: ~\n    succeeded: ~\n  tasks:\n    phpcs:\n      standard: phpcs.xml\n      triggered_by:\n        - php\n      whitelist_patterns:\n        - /^cli\\/ValetPlus\\/(.*)/\n        - /^cli\\/stubs\\/drivers\\/(.*)/\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpcs.xml",
          "type": "blob",
          "size": 0.1953125,
          "content": "<?xml version=\"1.0\"?>\n<ruleset>\n    <file>cli/ValetPlus</file>\n    <file>cli/stubs/drivers</file>\n\n    <arg name=\"extensions\" value=\"php\"/>\n    <arg name=\"cache\"/>\n\n    <rule ref=\"PSR12\"/>\n</ruleset>\n"
        },
        {
          "name": "valet-plus",
          "type": "blob",
          "size": 6.423828125,
          "content": "#!/usr/bin/env bash\n\nSOURCE=\"${BASH_SOURCE[0]}\"\n\n# If the current source is a symbolic link, we need to resolve it to an\n# actual directory name. We'll use PHP to do this easier than we can\n# do it in pure Bash. So, we'll call into PHP CLI here to resolve.\nif [[ -L \"$SOURCE\" ]]\nthen\n    DIR=$(php -r \"echo dirname(realpath('$SOURCE'));\")\nelse\n    DIR=\"$( cd \"$( dirname \"$SOURCE\" )\" && pwd )\"\nfi\n\n# If we are in the global Composer \"bin\" directory, we need to bump our\n# current directory up two, so that we will correctly proxy into the\n# Valet CLI script which is written in PHP. Will use PHP to do it.\nif [ ! -f \"$DIR/cli/valet.php\" ]\nthen\n    DIR=$(php -r \"echo realpath('$DIR/../weprovide/valet-plus');\")\nfi\n\n# Valet is a dependency of Valet+. So, when we're developing on it, it's always in the vendor directory.\n# When we are a user (composer global require weprovide/valet-plus) the following directories are used.\n#   laravel/valet is installed in /Users/<user>/.composer/vendor/laravel/valet/valet\n#   weprovide/valet-plus is installed in /Users/<user>/.composer/vendor/weprovide/valet-plus/valet\nLARAVEL_DIR=\"$DIR/vendor/laravel/valet\"\nif [ ! -d \"$LARAVEL_DIR\" ]; then\n    LARAVEL_DIR=$(php -r \"echo realpath('$DIR/../../laravel/valet');\")\nfi\n\n# Get a command-line executable we can use for the required php version; if this\n# is the inside loop (Valet runs itself 2x in some settings), skip\n# checking and pulling again by reading the exported env var\nif [[ $PHP_EXECUTABLE = \"\" ]]\nthen\n    PHP=$(php $DIR/cli/includes/find-usable-php.php)\n\n    # Validate output before running it on the CLI\n    if [[ ! -f $PHP ]]; then\n        echo \"Error finding executable PHP. Quitting for safety.\"\n        echo \"Provided output from find-usable-php.php:\"\n        echo $PHP\n        exit\n    fi\n\n    export PHP_EXECUTABLE=$PHP\nelse\n    PHP=$PHP_EXECUTABLE\nfi\n\n\n# If the command is the \"share\" command we will need to resolve out any\n# symbolic links for the site. Before starting Ngrok, we will fire a\n# process to retrieve the live Ngrok tunnel URL in the background.\nif [[ \"$1\" = \"share\" ]]\nthen\n    SHARETOOL=\"$($PHP \"$DIR/cli/valet.php\" share-tool)\"\n\n    if [[ $SHARETOOL = \"ngrok\" ]]\n    then\n    # ngrok\n        # Check to make sure ngrok is configured correctly\n        BREW_PREFIX=$(brew --prefix)\n        $($BREW_PREFIX/bin/ngrok config check >/dev/null 2>&1)\n\n        if [[ $? -ne 0 ]]; then\n            echo \"Please sign up for a free ngrok account and then run valet set-ngrok-token {yourTokenHere}.\"\n            exit\n        fi\n\n        # Check for parameters to pass through to ngrok (these will start with '-' or '--')\n        PARAMS=(${@:2})\n        for PARAM in ${PARAMS[@]}\n        do\n            if [[ ${PARAM:0:1} != '-' ]]; then\n                PARAMS=(\"${PARAMS[@]/$PARAM}\") # Quotes when working with strings\n            fi\n        done\n\n        PARAMS=${PARAMS[@]}\n\n        HOST=\"${PWD##*/}\"\n\n        # Find the first linked site for the current dir, if one exists\n        for linkname in ~/.config/valet/Sites/*; do\n            if [[ \"$(readlink $linkname)\" = \"$PWD\" ]]\n            then\n                HOST=\"${linkname##*/}\"\n                break\n            fi\n        done\n\n        TLD=$($PHP \"$DIR/cli/valet.php\" tld)\n\n        # Decide the correct PORT: uses 60 for secure, else 80\n        if grep --quiet --no-messages 443 ~/.config/valet/Nginx/$HOST*\n        then\n            PORT=60\n        else\n            PORT=80\n        fi\n\n        # Lowercase the host to match how the rest of our domains are looked up\n        HOST=$(echo \"$HOST\" | tr '[:upper:]' '[:lower:]')\n\n        sudo -u \"$USER\" \"$BREW_PREFIX/bin/ngrok\" http \"$HOST.$TLD:$PORT\" --host-header=rewrite $PARAMS\n\n        exit\n\n    elif [[ $SHARETOOL = \"expose\" ]]\n    then\n\n    # expose\n        # Check for parameters to pass through to Expose (these will start with '-' or '--')\n        PARAMS=(${@:2})\n        for PARAM in ${PARAMS[@]}\n        do\n            if [[ ${PARAM:0:1} != '-' ]]; then\n                PARAMS=(\"${PARAMS[@]/$PARAM}\") #Quotes when working with strings\n            fi\n        done\n\n        PARAMS=${PARAMS[@]}\n\n        HOST=\"${PWD##*/}\"\n\n        # Find the first linked site for the current dir, if one exists\n        for linkname in ~/.config/valet/Sites/*; do\n            if [[ \"$(readlink $linkname)\" = \"$PWD\" ]]\n            then\n                HOST=\"${linkname##*/}\"\n                break\n            fi\n        done\n\n        TLD=$($PHP \"$DIR/cli/valet.php\" tld)\n\n        # Decide the correct PORT: uses 443 for secure, else 80\n        if grep --quiet --no-messages 443 ~/.config/valet/Nginx/$HOST*\n        then\n            PORT=443\n        else\n            PORT=80\n        fi\n\n        # Lowercase the host to match how the rest of our domains are looked up\n        HOST=$(echo \"$HOST\" | tr '[:upper:]' '[:lower:]')\n\n        sudo -u \"$USER\" expose share \"$HOST.$TLD:$PORT\" $PARAMS\n\n        exit\n\n    else\n        echo ''\n        echo \"Please use 'valet share-tool ngrok' or 'valet share-tool expose'\"\n        echo \"to set your preferred share tool.\"\n        exit\n    fi\n\n# Proxy PHP commands to the \"php\" executable on the isolated site\nelif [[ \"$1\" = \"php\" ]]\nthen\n    if [[ $2 == *\"--site=\"* ]]; then\n        SITE=${2#*=}\n        $(php \"$DIR/cli/valet.php\" which-php $SITE) \"${@:3}\"\n    else\n        $(php \"$DIR/cli/valet.php\" which-php) \"${@:2}\"\n    fi\n\n    exit\n\n# Proxy Composer commands with the \"php\" executable on the isolated site\nelif [[ \"$1\" = \"composer\" ]]\nthen\n    if [[ $2 == *\"--site=\"* ]]; then\n        SITE=${2#*=}\n        $(php \"$DIR/cli/valet.php\" which-php $SITE) $(which composer) \"${@:3}\"\n    else\n        $(php \"$DIR/cli/valet.php\" which-php) $(which composer) \"${@:2}\"\n    fi\n\n    exit\n\n# Proxy Drush commands with the \"php\" executable on the isolated site\nelif [[ \"$1\" = \"drush\" ]]\nthen\n    if [[ $2 == *\"--site=\"* ]]; then\n        SITE=${2#*=}\n        $(php \"$DIR/cli/valet.php\" which-php $SITE) $(which drush) \"${@:3}\"\n    elif [[ $2 == \"uli\" ]]; then\n        $(php \"$DIR/cli/valet.php\" which-php) $(which drush) uli --uri=$(php \"$DIR/cli/valet.php\" which-uri) \"${@:3}\"\n    else\n        $(php \"$DIR/cli/valet.php\" which-php)  $(which drush) \"${@:2}\"\n    fi\n\n    exit\n\n# Finally, for every other command we will just proxy into the PHP tool\n# and let it handle the request. These are commands which can be run\n# without sudo and don't require taking over terminals like Ngrok.\nelse\n    if [[ \"$EUID\" -ne 0 ]]\n    then\n        sudo USER=\"$USER\" --preserve-env \"$SOURCE\" \"$@\"\n        exit\n    fi\n\n    $PHP \"$DIR/cli/valet.php\" \"$@\"\nfi\n"
        }
      ]
    }
  ]
}