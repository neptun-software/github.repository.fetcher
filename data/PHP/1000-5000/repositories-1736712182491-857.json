{
  "metadata": {
    "timestamp": 1736712182491,
    "page": 857,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spatie/laravel-searchable",
      "stars": 1330,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3056640625,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at https://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3857421875,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/.travis.yml        export-ignore\n/phpunit.xml.dist   export-ignore\n/.scrutinizer.yml   export-ignore\n/tests              export-ignore\n/.editorconfig      export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1005859375,
          "content": "build\ncomposer.lock\ndocs\nvendor\ncoverage\n.phpunit.result.cache\n.php_cs.cache\n.idea\n.php-cs-fixer.cache\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 1.16015625,
          "content": "<?php\n\n$finder = Symfony\\Component\\Finder\\Finder::create()\n    ->notPath('bootstrap/*')\n    ->notPath('storage/*')\n    ->notPath('resources/view/mail/*')\n    ->in([\n        __DIR__ . '/src',\n        __DIR__ . '/tests',\n    ])\n    ->name('*.php')\n    ->notName('*.blade.php')\n    ->ignoreDotFiles(true)\n    ->ignoreVCS(true);\n\nreturn (new PhpCsFixer\\Config)\n    ->setRules([\n        '@PSR2' => true,\n        'array_syntax' => ['syntax' => 'short'],\n        'ordered_imports' => ['sort_algorithm' => 'alpha'],\n        'no_unused_imports' => true,\n        'not_operator_with_successor_space' => true,\n        'trailing_comma_in_multiline' => true,\n        'phpdoc_scalar' => true,\n        'unary_operator_spaces' => true,\n        'binary_operator_spaces' => true,\n        'blank_line_before_statement' => [\n            'statements' => ['break', 'continue', 'declare', 'return', 'throw', 'try'],\n        ],\n        'phpdoc_single_line_var_spacing' => true,\n        'phpdoc_var_without_name' => true,\n        'method_argument_space' => [\n            'on_multiline' => 'ensure_fully_multiline',\n            'keep_multiple_spaces_after_comma' => true,\n        ]\n    ])\n    ->setFinder($finder);\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.1298828125,
          "content": "# Changelog\n\nAll notable changes to `laravel-searchable` will be documented in this file\n\n## 1.12.0 - 2024-03-13\n\n### What's Changed\n\n* Update composer.json by @officialkidmax in https://github.com/spatie/laravel-searchable/pull/145\n\n### New Contributors\n\n* @officialkidmax made their first contribution in https://github.com/spatie/laravel-searchable/pull/145\n\n**Full Changelog**: https://github.com/spatie/laravel-searchable/compare/1.11.2...1.12.0\n\n## 1.11.2 - 2023-01-24\n\n### What's Changed\n\n- Laravel 10.x Compatibility by @laravel-shift in https://github.com/spatie/laravel-searchable/pull/140\n\n**Full Changelog**: https://github.com/spatie/laravel-searchable/compare/1.11.1...1.11.2\n\n## 1.11.1 - 2023-01-24\n\n### What's Changed\n\n- Add PHP 8.2 Support by @patinthehat in https://github.com/spatie/laravel-searchable/pull/135\n- fix: use mixin for static analysis by @ju5t in https://github.com/spatie/laravel-searchable/pull/139\n\n### New Contributors\n\n- @patinthehat made their first contribution in https://github.com/spatie/laravel-searchable/pull/135\n- @ju5t made their first contribution in https://github.com/spatie/laravel-searchable/pull/139\n\n**Full Changelog**: https://github.com/spatie/laravel-searchable/compare/1.11.0...1.11.1\n\n## 1.11.0 - 2022-01-13\n\n## What's Changed\n\n- Update code block syntax by @grantholle in https://github.com/spatie/laravel-searchable/pull/126\n- Add support for Laravel 9\n\n## New Contributors\n\n- @grantholle made their first contribution in https://github.com/spatie/laravel-searchable/pull/126\n\n**Full Changelog**: https://github.com/spatie/laravel-searchable/compare/1.10.0...1.11.0\n\n## 1.10.0 - 2021-06-24\n\n- Allow searching with special characters (#117)\n\n## 1.9.3 - 2021-may-the-forth\n\n- changed query building order to play nice with forwarded calls (#101)\n\n## 1.9.2 - 2021-05-03\n\n- handle columns with reserved names (#110)\n\n## 1.9.1 - 2020-12-27\n\n- add support for PHP 8.0\n\n## 1.9.0 - 2020-12-09\n\n- add aspect search result limit (#82)\n\n## 1.8.0 - 2020-11-28\n\n- allow to use same query method (#81)\n\n## 1.7.1 - 2020-11-10\n\n- remove backticks in SearchAspect to support PostgreSQL (#85)\n\n## 1.7.0 - 2020-09-08\n\n- add support for Laravel 8\n\n## 1.6.2 - 2020-04-29\n\n- escape searchable attributes (#60)\n\n## 1.6.1 - 2020-03-03\n\n- revert #42\n\n## 1.6.0 - 2020-03-03\n\n- add support for Laravel 7\n- fix issue when fuzzy searching model fields (#42)\n\n## 1.5.0 - 2019-12-15\n\n- allow applying query scopes and eager loading relationships (#44)\n\n## 1.4.0 - 2019-09-04\n\n- add support for Laravel 6\n\n## 1.3.0 - 2019-02-27\n\n- drop support for Laravel 5.7 and lower\n- drop support for PHP 7.1 and lower\n\n## 1.2.3 - 2019-02-27\n\n- add support for Laravel 5.8\n- add support for PHPUnit 8.0\n\n## 1.2.2 - 2019-02-01\n\n- use Str:: and Arr:: instead of helper methods\n\n## 1.2.1 - 2019-01-14\n\n- fix: the closure for registering a model search aspect can no longer be a global function\n\n## 1.2.0 - 2019-01-11\n\n- search with multiple keywords on multiple columns\n\n## 1.1.0 - 2018-12-28\n\n- add preferred `search()` method (alias for `perform()`)\n\n## 1.0.1 - 2018-12-28\n\n- fix passing an array of searchable model attributes to `registerModel`\n\n## 1.0.0 - 2018-12-27\n\n- initial release\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.064453125,
          "content": "The MIT License (MIT)\n\nCopyright (c) Spatie bvba <info@spatie.be>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.693359375,
          "content": "# Laravel Searchable\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/spatie/laravel-searchable.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-searchable)\n[![run-tests](https://github.com/spatie/laravel-searchable/actions/workflows/run-tests.yml/badge.svg)](https://github.com/spatie/laravel-searchable/actions/workflows/run-tests.yml)\n[![Total Downloads](https://img.shields.io/packagist/dt/spatie/laravel-searchable.svg?style=flat-square)](https://packagist.org/packages/spatie/laravel-searchable)\n\nThis package makes it easy to get structured search from a variety of sources. Here's an example where we search through some models. We already did some small preparation on the models themselves.\n\n```php\n$searchResults = (new Search())\n   ->registerModel(User::class, 'name')\n   ->registerModel(BlogPost::class, 'title')\n   ->search('john');\n```\n\nThe search will be performed case insensitive. `$searchResults` now contains all `User` models that contain `john` in the `name` attribute and `BlogPost`s that contain 'john' in the `title` attribute.\n\nIn your view you can now loop over the search results:\n\n```blade\n<h1>Search</h1>\n\nThere are {{ $searchResults->count() }} results.\n\n@foreach($searchResults->groupByType() as $type => $modelSearchResults)\n   <h2>{{ $type }}</h2>\n   \n   @foreach($modelSearchResults as $searchResult)\n       <ul>\n            <li><a href=\"{{ $searchResult->url }}\">{{ $searchResult->title }}</a></li>\n       </ul>\n   @endforeach\n@endforeach\n```\n\nIn this example we used models, but you can easily add a search aspect for an external API, list of files or an array of values.\n\n## Support us\n\n[<img src=\"https://github-ads.s3.eu-central-1.amazonaws.com/laravel-searchable.jpg?t=1\" width=\"419px\" />](https://spatie.be/github-ad-click/laravel-searchable)\n\nWe invest a lot of resources into creating [best in class open source packages](https://spatie.be/open-source). You can support us by [buying one of our paid products](https://spatie.be/open-source/support-us).\n\nWe highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You'll find our address on [our contact page](https://spatie.be/about-us). We publish all received postcards on [our virtual postcard wall](https://spatie.be/open-source/postcards).\n\n## Installation\n\nYou can install the package via composer:\n\n```bash\ncomposer require spatie/laravel-searchable\n```\n\n## Usage\n\n### Preparing your models\n\nIn order to search through models you'll have to let them implement the `Searchable` interface.\n\n```php\nnamespace Spatie\\Searchable;\n\ninterface Searchable\n{\n    public function getSearchResult(): SearchResult;\n}\n```\n\nYou'll only need to add a `getSearchResult` method to each searchable model that must return an instance of `SearchResult`. Here's how it could look like for a blog post model.\n\n```php\nuse Spatie\\Searchable\\Searchable;\nuse Spatie\\Searchable\\SearchResult;\n\nclass BlogPost extends Model implements Searchable\n{\n     public function getSearchResult(): SearchResult\n     {\n        $url = route('blogPost.show', $this->slug);\n     \n         return new \\Spatie\\Searchable\\SearchResult(\n            $this,\n            $this->title,\n            $url\n         );\n     }\n}\n```\n\n### Searching models\n\nWith the models prepared you can search them like this:\n\n```php\n$searchResults = (new Search())\n   ->registerModel(User::class, 'name')\n   ->search('john');\n```\n\nThe search will be performed case insensitive. `$searchResults` now contains all `User` models that contain `john` in the `name` attribute.\n\nYou can also pass multiple attributes to search through:\n\n```php\n// use multiple model attributes\n\n$searchResults = (new Search())\n   ->registerModel(User::class, 'first_name', 'last_name')\n   ->search('john');\n   \n// or use an array of model attributes\n\n$searchResults = (new Search())\n   ->registerModel(User::class, ['first_name', 'last_name'])\n   ->search('john');\n```\n\nTo get fine grained control you can also use a callable. This way you can also search for exact matches, apply scopes, eager load relationships, or even filter your query like you would using the query builder.\n\n```php\n$search = (new Search())\n   ->registerModel(User::class, function(ModelSearchAspect $modelSearchAspect) {\n       $modelSearchAspect\n          ->addSearchableAttribute('name') // return results for partial matches on usernames\n          ->addExactSearchableAttribute('email') // only return results that exactly match the e-mail address\n          ->active()\n          ->has('posts')\n          ->with('roles');\n});\n```\n\n### Creating custom search aspects\n\nYou are not limited to only registering basic models as search aspects. You can easily create your own, custom search aspects by extending the `SearchAspect` class.\n\nConsider the following custom search aspect to search an external API:\n\n```php\nclass OrderSearchAspect extends SearchAspect\n{\n    public function getResults(string $term): Collection\n    {\n        return OrderApi::searchOrders($term);\n    }\n}\n```\n\nThis is how you can use it:\n\n```php\n$searchResults = (new Search())\n   ->registerAspect(OrderSearchAspect::class)\n   ->search('john');\n```\n\n### Limiting aspect results\n\nIt is possible to limit the amount of results returned by each aspect by calling `limitAspectResults` prior to performing the search.\n\n```php\n$searchResults = (new Search())\n    ->registerAspect(BlogPostAspect::class)\n    ->limitAspectResults(50)\n    ->search('How To');\n```\n\n### Rendering search results\n\nHere's an example on rendering search results:\n\n```blade\n<h1>Search</h1>\n\nThere are {{ $searchResults->count() }} results.\n\n@foreach($searchResults->groupByType() as $type => $modelSearchResults)\n   <h2>{{ $type }}</h2>\n   \n   @foreach($modelSearchResults as $searchResult)\n       <ul>\n            <a href=\"{{ $searchResult->url }}\">{{ $searchResult->title }}</a>\n       </ul>\n   @endforeach\n@endforeach\n```\n\nYou can customize the `$type` by adding a public property `$searchableType` on your model or custom search aspect\n\n```php\nclass BlogPost extends Model implements Searchable\n{\n    public $searchableType = 'custom named aspect';\n}\n```\n\n### Testing\n\n```bash\ncomposer test\n```\n\n### Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information on what has changed recently.\n\n## Contributing\n\nPlease see [CONTRIBUTING](https://github.com/spatie/.github/blob/main/CONTRIBUTING.md) for details.\n\n### Security\n\nIf you've found a bug regarding security please mail [security@spatie.be](mailto:security@spatie.be) instead of using the issue tracker.\n\n## Credits\n\n- [Alex Vanderbist](https://github.com/AlexVanderbist)\n- [Freek Van der Herten](https://github.com/freekmurze)\n- [All Contributors](../../contributors)\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.35546875,
          "content": "{\n    \"name\": \"spatie/laravel-searchable\",\n    \"description\": \"Pragmatically search through models and other sources\",\n    \"keywords\": [\n        \"spatie\",\n        \"laravel-searchable\"\n    ],\n    \"homepage\": \"https://github.com/spatie/laravel-searchable\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Alex Vanderbist\",\n            \"email\": \"alex@spatie.be\",\n            \"homepage\": \"https://spatie.be\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Freek Van der Herten\",\n            \"email\": \"freek@spatie.be\",\n            \"homepage\": \"https://spatie.be\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"require\": {\n        \"php\": \"^7.3|^8.0\",\n        \"laravel/framework\": \"^8.78|^9.0|^10.0|^11.0\",\n        \"ext-pdo\": \"*\"\n    },\n    \"require-dev\": {\n        \"orchestra/testbench\": \"^6.27|^7.0|^8.0\",\n        \"larapack/dd\": \"^1.0\",\n        \"phpunit/phpunit\": \"^9.3|^10.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Spatie\\\\Searchable\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Spatie\\\\Searchable\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"scripts\": {\n        \"test\": \"vendor/bin/phpunit\",\n        \"test-coverage\": \"vendor/bin/phpunit --coverage-html coverage\"\n    },\n    \"config\": {\n        \"sort-packages\": true\n    }\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.7265625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bootstrap=\"vendor/autoload.php\" backupGlobals=\"false\" backupStaticAttributes=\"false\" colors=\"true\" verbose=\"true\" convertErrorsToExceptions=\"true\" convertNoticesToExceptions=\"true\" convertWarningsToExceptions=\"true\" processIsolation=\"false\" stopOnFailure=\"false\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\">\n  <coverage>\n    <include>\n      <directory suffix=\".php\">src/</directory>\n    </include>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"Spatie Test Suite\">\n      <directory>tests</directory>\n    </testsuite>\n  </testsuites>\n  <php>\n    <env name=\"DB_CONNECTION\" value=\"testing\"/>\n  </php>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}