{
  "metadata": {
    "timestamp": 1736711770543,
    "page": 25,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "webonyx/graphql-php",
      "stars": 4652,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.3564453125,
          "content": "codecov:\n  require_ci_to_pass: yes\n\ncoverage:\n  precision: 2\n  round: down\n  range: \"70...100\"\n  status:\n    project:\n      default:\n        threshold: 1%\n        only_pulls: true\n    patch:\n      default:\n        threshold: 1%\n        only_pulls: true\n\nparsers:\n  gcov:\n    branch_detection:\n      conditional: yes\n      loop: yes\n      method: no\n      macro: no\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.5947265625,
          "content": "# Set the default behavior, in case people don't have core.autocrlf set.\n* text eol=lf\n\n/.github export-ignore\n/benchmarks export-ignore\n/tests export-ignore\n/examples export-ignore\n/phpstan export-ignore\n/.codecov.yml export-ignore\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/CONTRIBUTING.md export-ignore\n/generate-class-reference.php export-ignore\n/mkdocs.yml export-ignore\n/phpbench.json export-ignore\n/.php-cs-fixer.php export-ignore\n/phpstan.neon.dist export-ignore\n/phpstan-baseline.neon export-ignore\n/phpunit.xml.dist export-ignore\n/rector.php export-ignore\n/renovate.json export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.09375,
          "content": ".phpunit.result.cache\n.php-cs-fixer.cache\ncomposer.lock\ncomposer.phar\nphpstan.neon\nvendor\n.idea\n"
        },
        {
          "name": ".php-cs-fixer.php",
          "type": "blob",
          "size": 0.57421875,
          "content": "<?php declare(strict_types=1);\n\n$finder = PhpCsFixer\\Finder::create()\n    ->notPath('vendor')\n    ->in(__DIR__)\n    ->name('*.php')\n    ->ignoreDotFiles(true)\n    ->ignoreVCS(true);\n\nreturn \\MLL\\PhpCsFixerConfig\\risky($finder, [\n    'no_superfluous_phpdoc_tags' => [\n        'allow_mixed' => true,\n    ],\n    'phpdoc_align' => [\n        'align' => 'left'\n    ],\n    'phpdoc_order_by_value' => [\n        'annotations' => [\n            'throws',\n        ],\n    ],\n    'yoda_style' => [\n        'equal' => false,\n        'identical' => false,\n        'less_and_greater' => false,\n    ],\n]);\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 30.490234375,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\nYou can find and compare releases at the [GitHub release page](https://github.com/webonyx/graphql-php/releases).\n\n## Unreleased\n\n## v15.19.1\n\n### Fixed\n\n- Handle fields that return lists in `ResolveInfo::getFieldSelectionWithAliases` https://github.com/webonyx/graphql-php/pull/1664\n\n## v15.19.0\n\n### Added\n\n- Add method `getFieldSelectionWithAliases` to class `ResolveInfo` https://github.com/webonyx/graphql-php/pull/1648\n\n## v15.18.1\n\n### Fixed\n\n- Reset static caches of instances using standard types when overriding them https://github.com/webonyx/graphql-php/pull/1632\n\n## v15.18.0\n\n### Added\n\n- Propagate error messages of client-safe exceptions during `parseValue` https://github.com/webonyx/graphql-php/pull/1624\n\n## v15.17.0\n\n### Added\n\n- Allow customizing PhpEnumType https://github.com/webonyx/graphql-php/pull/1623\n\n## v15.16.1\n\n### Fixed\n\n- Make field args mapper optional https://github.com/webonyx/graphql-php/pull/1622\n\n## v15.16.0\n\n### Added\n\n- Create field args mapper and cache args resolution https://github.com/webonyx/graphql-php/pull/1587\n\n## v15.15.0\n\n### Added\n\n- Add field config decorator when building schema from SDL https://github.com/webonyx/graphql-php/pull/1590\n\n## v15.14.3\n\n### Fixed\n\n- Serialize `BackedEnum` instances by name, not value https://github.com/webonyx/graphql-php/pull/1618\n\n## v15.14.2\n\n### Changed\n\n- Annotate return value of `Helper::validateOperationParams` as list https://github.com/webonyx/graphql-php/pull/1615\n\n## v15.14.1\n\n### Changed\n\n- Narrow type of execution errors from `array` to `list` https://github.com/webonyx/graphql-php/pull/1597\n\n## v15.14.0\n\n### Added\n\n- Allow native PHP enums as return values for SDL-based enums https://github.com/webonyx/graphql-php/pull/1608\n\n## v15.13.0\n\n### Added\n\n- Serialize valid `\\BackedEnum` values in `GraphQL\\Type\\Definition\\PhpEnumType` https://github.com/webonyx/graphql-php/pull/1604\n\n## v15.12.5\n\n### Fixed\n\n- Avoid infinite recursion in `QueryDepth` validator https://github.com/webonyx/graphql-php/pull/1581\n\n## v15.12.4\n\n### Fixed\n\n- Ensure `unaliasedPath` does not grow for each list item https://github.com/webonyx/graphql-php/pull/1579\n\n## v15.12.3\n\n### Fixed\n\n- Avoid crash by triggering side effect via `count` on `PHPUnit\\Framework\\Test` https://github.com/webonyx/graphql-php/pull/1577\n\n## v15.12.2\n\n### Changed\n\n- Optimize and deduplicate ReferenceExecutor https://github.com/webonyx/graphql-php/pull/1572\n\n## v15.12.1\n\n### Fixed\n\n- Remove redundant code in `ReferenceExecutor` https://github.com/webonyx/graphql-php/pull/1570\n\n## v15.12.0\n\n### Added\n\n- Add property `unaliasedPath` to `ResolveInfo` https://github.com/webonyx/graphql-php/pull/1548\n\n## v15.11.2\n\n### Fixed\n\n- Fix `ScopedContext` for mutations https://github.com/webonyx/graphql-php/pull/1549\n\n## v15.11.1\n\n### Fixed\n\n- Count new lines when parsing multi-line comments https://github.com/webonyx/graphql-php/pull/1538\n\n## v15.11.0\n\n### Changed\n\n- Allow scalars from `BuildClientSchema` to have any type https://github.com/webonyx/graphql-php/pull/1536\n\n## v15.10.0\n\n### Changed\n\n- The standard server now produces distinct exception classes instead of generic `RequestError` https://github.com/webonyx/graphql-php/pull/1533\n\n## v15.9.1\n\n### Fixed\n\n- Allow enum instances in `PhpEnumType::parseValue()` https://github.com/webonyx/graphql-php/pull/1519\n\n## v15.9.0\n\n### Added\n\n- Support `react/promise` v3 https://github.com/webonyx/graphql-php/pull/1517\n\n## v15.8.1\n\n### Fixed\n\n- Correctly print deprecated argument with default value https://github.com/webonyx/graphql-php/pull/1491\n\n## v15.8.0\n\n### Added\n\n- Early return when complexity is disabled https://github.com/webonyx/graphql-php/pull/1475\n- Allow access to calculated query complexity https://github.com/webonyx/graphql-php/pull/1475\n\n### Fixed\n\n- Fix PHPStan definition for `SchemaConfig` option `types` https://github.com/webonyx/graphql-php/pull/1479\n\n## v15.7.0\n\n### Added\n\n- Control field visibility through option `visible` https://github.com/webonyx/graphql-php/pull/1434\n\n## v15.6.3\n\n### Fixed\n\n- Fix printing of single line descriptions with Unicode https://github.com/webonyx/graphql-php/pull/1436\n\n## v15.6.2\n\n### Fixed\n\n- Avoid instantiations when checking if types are built-in https://github.com/webonyx/graphql-php/pull/1423\n\n## v15.6.1\n\n### Fixed\n\n- Allow lazy root type callables to return `null` https://github.com/webonyx/graphql-php/pull/1422\n\n## v15.6.0\n\n### Added\n\n- Allow lazy root types `query`, `mutation`, `subscription` https://github.com/webonyx/graphql-php/pull/1418\n\n## v15.5.3\n\n### Fixed\n\n- Also set `queryId` from Apollo-source `sha256Hash` if `query` is provided https://github.com/webonyx/graphql-php/pull/1412\n\n## v15.5.2\n\n### Fixed\n\n- Do not set raw vars on query complexity rule if no validation rules are used https://github.com/webonyx/graphql-php/pull/1413\n\n## v15.5.1\n\n### Fixed\n\n- Remove useless and broken `Parser::document()`, use `parse()`\n\n## v15.5.0\n\n### Added\n\n- Add `ScopedContext` interface to control cloning of the context value\n\n## v15.4.0\n\n### Added\n\n- Allow deprecating input fields and arguments https://github.com/webonyx/graphql-php/pull/1382\n\n## v15.3.2\n\n### Fixed\n\n- Call static methods in `SchemaPrinter` with `static::` to enable overrides\n\n## v15.3.1\n\n### Fixed\n\n- Allow sending both `query` and `queryId`, let `persistedQueryLoader` handle it https://github.com/webonyx/graphql-php/pull/1372\n\n## v15.3.0\n\n### Added\n\n- Provide a custom name for the Enum generated by `PhpEnumType` https://github.com/webonyx/graphql-php/pull/1368\n\n## v15.2.5\n\n### Fixed\n\n- Merge selected fields in `ResolveInfo::getFieldSelection()` https://github.com/webonyx/graphql-php/pull/1365\n\n## v15.2.4\n\n### Fixed\n\n- Ensure `OperationDefinitionNode.variableDefinitions` is initialized\n\n## v15.2.3\n\n### Fixed\n\n- Annotate `@throws` accurately\n\n## v15.2.2\n\n### Fixed\n\n- Improve handling of JSON encoding errors\n\n## v15.2.1\n\n### Fixed\n\n- Initialize `directives` and `arguments` in `Node` with empty `NodeList`\n\n## v15.2.0\n\n### Changed\n\n- Improve validation messages for type definitions\n\n## v15.1.0\n\n### Added\n\n- Add additional sorting options to `SchemaPrinter`\n\n## v15.0.3\n\n### Fixed\n\n- Fix `QueryPlan` for `union` types\n\n### Changed\n\n- Improve `QueryPlan` performance\n\n## v15.0.2\n\n### Fixed\n\n- Fix `QueryPlan` when querying `__typename` on a `union` type\n\n## v15.0.1\n\n### Fixed\n\n- Fix printing of single line descriptions with backslashes\n\n### Changed\n\n- Print long argument lists on multiple lines\n- Print space between object value brackets\n\n## v15.0.0\n\n### Changed\n\n- PHP version required: 7.4+\n- Propagate error message and stack trace for why leaf value serialization failed\n- Do not throw client safe `Error` when failing to serialize an Enum type\n- Use native PHP types for properties of `Type` and its subclasses\n- Throw `SerializationError` over client safe `Error` when failing to serialize leaf types\n- Move debug entries in errors under `extensions` key\n- Use native PHP types wherever possible\n- Always throw `RequestError` with useful message when clients provide an invalid JSON body\n- Move class `BlockString` from namespace `GraphQL\\Utils` to `GraphQL\\Language`\n- Return string-keyed arrays from `GraphQL::getStandardDirectives()`, `GraphQL::getStandardTypes()` and `GraphQL::getStandardValidationRules()`\n- Move complexity related code from `FieldDefinition` to `QueryComplexity`\n- Exclude unused standard types from the schema\n- Require lazy type loader to return `Type` directly without an intermediary callable\n- Allow lazy type loader to return `null`\n- Rename `ServerConfig` option `persistentQueryLoader` to `persistedQueryLoader`\n- Call previously unused methods `EnumType::parseValue()` and `EnumType::parseLiteral()`\n- Strongly type `PromiseAdapter::createRejected()` to require `\\Throwable`\n- Move members specific to `NamedType` out of `Type`: `$name`, `$description`, `$config`, `isBuiltInType()`, `assertValid()`\n- Always convert recursively when calling `Node::toArray()`\n- Make `Directive::$config['args']` use the same definition style as `FieldDefinition::$config['args']`\n- Rename `FieldArgument` to `Argument`\n- Make errors when parsing scalar literals more precise\n- Change expected `QueryPlan` options from `['group-implementor-fields']` to `['groupImplementorFields' => true]` in `ResolveInfo::lookAhead()`\n- Always convert promises through `PromiseAdapter::convertThenable()` before calling `->then()` on them\n- Use `JSON_THROW_ON_ERROR` in `json_encode()`\n- Validate some internal invariants through `assert()`\n- `PromiseAdapter::all()` accepts `iterable`\n- Throw if `Introspection::fromSchema()` returns no data\n- Reorganize abstract class `ASTValidationContext` to interface `ValidationContext`\n- Reorganize AST interfaces related to schema and type extensions\n- Align `Utils::suggestionList()` with the reference implementation (#1075)\n- Order schema topologically and according to the user-defined order, affects introspection and printing\n- `GraphQL\\Utils\\AST::typeFromAST()` now needs a type loader callable instead of the Schema\n- Do not change HTTP status code in `StandardServer`\n- Use `\"` instead of `\"\"\"` for single line descriptions\n- Make `Helper::emitResponse()` private, use `Helper::sendResponse()`\n- Emit unescaped UTF-8 from `StandardServer`\n- Sync input value coercion with `graphql-js` reference implementation\n- Store rules exclusively by class name in `DocumentValidator`\n- Reorder standard types as described in the GraphQL specification\n- Improve runtime performance by moving checks for duplicate/mismatching type instances to `assert()` or schema validation\n- Replace `HasSelectionSet::$selectionSet` with `HasSelectionSet::getSelectionSet()`\n- Replace `TypeDefinitionNode::$name` with `TypeDefinitionNode::getName()`\n- Replace `TypeExtensionNode::$name` with `TypeExtensionNode::getName()`\n\n### Added\n\n- Improve extendability of validator rules\n- Add tests for errors that occur when undeclared fields are passed in input\n- Warn about orphaned object types\n- Expose structured enumeration of directive locations\n- Add `AST::concatAST()` utility\n- Allow lazy input object fields\n- Add validation rule `UniqueEnumValueNames`\n- Add SDL validation rule `UniqueOperationTypes` (#995)\n- Add ability to remove custom validation rules after adding them via `DocumentValidator::removeRule()`\n- Allow lazy enum values\n- Make `Node` implement `JsonSerializable`\n- Add SDL validation rule `UniqueTypeNames` (#998)\n- Add support for SDL validation to `KnownTypeNames` rule (#999)\n- Add SDL validation rule `UniqueArgumentDefinitionNames` (#1136)\n- Add `parseValue` config option to InputObjectType to parse input value to custom value object\n- Add option `sortTypes` to have `SchemaPrinter` order types alphabetically\n- Allow constructing `EnumType` from PHP enum\n- Add `TypeInfo::getParentTypeStack()` and `TypeInfo::getFieldDefStack()`\n- Include path to faulty input in coercion errors\n- Add ability to resolve abstract type of object via `__typename`\n\n### Optimized\n\n- Use recursive algorithm for printer and improve its performance\n- Use `foreach` over slower functions `array_map()` and `Utils::map()`\n\n### Fixed\n\n- Avoid `QueryPlan` crash when multiple `$fieldNodes` are present\n- Allow instantiating multiple `QueryPlan` with different options\n- Clarify error when attempting to coerce anything but `array` or `stdClass` to an input object\n- Allow directives on variable definitions\n- Handle `null` parent of list in `ValuesOfCorrectType::getVisitor`\n- Allow sending both `query` and `queryId`, ignore `queryId` in that case\n- Preserve extended methods from class-based types in `SchemaExtender::extend()`\n- Fix printing of empty types (#940)\n- Clone `NodeList` in `Node::cloneDeep()`\n- Calling `Schema::getType()` on a schema built from SDL returns `null` for unknown types (#1068)\n- Avoid crash on typeless inline fragment when using `QueryComplexity` rule\n- Avoid calling `FormattedError::addDebugEntries()` twice when using default error formatting\n- Avoid calling defined functions named like lazily loaded types\n- Show actual error in debug entries\n- Deal with `iterable` in implementations of `PromiseAdapter::all()`\n\n### Removed\n\n- Remove `OperationParams` method `getOriginalInput()` in favor of public property `$originalInput`\n- Remove `OperationParams` method `isReadOnly()` in favor of public property `$readOnly`\n- Remove `Utils::withErrorHandling()`\n- Remove `TypeComparators::doTypesOverlap()`\n- Remove `DocumentValidator::isError()`\n- Remove `DocumentValidator::append()`\n- Remove `Utils::getVariableType()` in favor of `Utils::printSafe()`\n- Remove warning for passing `isDeprecated` in field definition config\n- Remove `WrappingType::getWrappedType()` argument `$recurse` in favor of `WrappingType::getInnermostType()`\n- Remove `Type::assertType()`\n- Remove `ListOfType::$ofType`, `ListOfType::getOfType()` and `NonNull::getOfType()`\n- Remove option `commentDescriptions` from `BuildSchema::buildAST()`, `BuildSchema::build()` and `Printer::doPrint()`\n- Remove parameter `$options` from `ASTDefinitionBuilder`\n- Remove `FieldDefinition::create()` in favor of `new FieldDefinition()`\n- Remove `GraphQL\\Exception\\InvalidArgument`\n- Remove `Utils::find()`, `Utils::every()` and `Utils::invariant()`\n- Remove argument `bool $exitWhenDone` from `StandardServer::send500Error()` and `StandardServer::handleRequest()`\n- Remove `Schema::getAstNode()` in favor of `Schema::$astNode`\n- Remove ability to override standard types through `Schema` option `types`, use `Type::overrideStandardTypes()`\n- Remove `GraphQL\\Utils\\TypeInfo::typeFromAST()`, use `GraphQL\\Utils\\AST::typeFromAST()`\n- Remove `StandardServer::send500Error()`, handle non-GraphQL errors yourself\n- Remove `StandardServer::getHelper()`, use `new Helper`\n- Remove error extension field `category`, use custom error formatting if you still need it\n- Remove deprecated `Type::getInternalTypes()`\n- Remove deprecated `GraphQL::execute()`\n- Remove deprecated `GraphQL::executeAndReturnResult()`\n- Remove deprecated experimental CoroutineExecutor\n- Remove deprecated `FormattedError::create()` and `FormattedError::createFromPHPError()`\n- Remove deprecated `GraphQL::setPromiseAdapter()`\n- Remove deprecated `AST::getOperation()`\n- Remove deprecated constants from `BreakingChangesFinder`\n- Remove deprecated `DocumentValidator::isValidLiteralValue()`\n- Remove deprecated `Error::formatError()` and `Error::toSerializableArray()`\n- Remove deprecated `GraphQL::getInternalDirectives()`\n- Remove deprecated `Schema::isPossibleType()`\n- Remove deprecated methods from `TypeInfo`\n- Remove deprecated `Values::valueFromAST()` and `Values::isValidPHPValue()`\n- Remove deprecated public property access to `InputObjectField::$type`\n- Remove deprecated public property access to `FieldDefinition::$type`\n- Remove alias `GraphQL\\Validator\\Rules\\AbstractQuerySecurity`, use `GraphQL\\Validator\\Rules\\QuerySecurityRule`\n- Remove alias `GraphQL\\Validator\\Rules\\AbstractValidationRule`, use `GraphQL\\Validator\\Rules\\ValidationRule`\n- Remove alias `GraphQL\\Utils\\FindBreakingChanges`, use `GraphQL\\Utils\\BreakingChangesFinder`\n\n## v14.11.10\n\n### Fixed\n\n- Fix PHP 8.2 deprecated string interpolation syntax\n- Fix PHP 8.2 deprecated dynamic properties\n\n## v14.11.9\n\n### Fixed\n\n- Accept AST where field arguments are not given\n\n## v14.11.8\n\n### Fixed\n\n- Correct the broken 14.11.7 release - see https://github.com/webonyx/graphql-php/issues/1221\n\n## v14.11.7\n\n### Fixed\n\n- Fix PHP 8.2 deprecation of \"static\" in callables\n\n## v14.11.6\n\n### Fixed\n\n- Fix validation of modified sparse ASTs\n\n## v14.11.5\n\n### Fixed\n\n- Fix `extend()` to preserve `repeatable` (#931)\n\n## v14.11.4\n\n### Fixed\n\n- Fix repeatable directive validation for AST\n\n## v14.11.3\n\n### Fixed\n\n- Fix compatibility of more methods with native return type in PHP 8.1\n\n## v14.11.2\n\n### Fixed\n\n- Support non-JSON `ServerRequestInterface`\n\n## v14.11.1\n\n### Fixed\n\n- Fix compatibility of methods with native return type in PHP 8.1\n\n## v14.11.0\n\n### Added\n\n- Allow field definitions to be defined as any `iterable`, not just `array`\n\n## v14.10.0\n\n### Added\n\n- Make `IntType` constants `MAX_INT` and `MIN_INT` public\n\n## v14.9.0\n\n### Added\n\n- Add support for type config decorator in `SchemaExtender`\n\n## v14.8.0\n\n### Added\n\n- Implement `GraphQL\\Utils\\AST::getOperationAST()`\n\n## v14.7.0\n\n### Added\n\n- Allow providing field definitions as a callable and resolve them lazily\n\n## v14.6.4\n\n### Fixed\n\n- Avoid crashing in `QueryPlan` when `__typename` is used in the query\n\n## v14.6.3\n\nRefactoring:\n\n- Improve performance of subtype checks\n\n## v14.6.2\n\n### Fixed\n\n- Fix overly eager validation of repeatable directive usage\n\n## v14.6.1\n\n### Fixed\n\n- Add fallback for `directive.isRepeatable` in `BuildClientSchema`\n\n## v14.6.0\n\n### Added\n\n- Open ReferenceExecutor for extending\n\n### Fixed\n\n- Ensure properties annotated to hold NodeList are not null\n- Validate that directive argument names do not use reserved or duplicate names\n\n## v14.5.1\n\n### Fixed\n\n- Fix Input Object field shortcut definition with callable (#773)\n\n## v14.5.0\n\n### Added\n\n- Implement support for interfaces implementing interfaces (#740), huge kudos to @Kingdutch\n\nDeprecates:\n\n- Constant `BreakingChangeFinder::BREAKING_CHANGE_INTERFACE_REMOVED_FROM_OBJECT`.\n  Use `BreakingChangeFinder::BREAKING_CHANGE_IMPLEMENTED_INTERFACE_REMOVED` instead.\n  Constant value also changed from `INTERFACE_REMOVED_FROM_OBJECT` to `IMPLEMENTED_INTERFACE_REMOVED`.\n\n- Constant `BreakingChangeFinder::DANGEROUS_CHANGE_INTERFACE_ADDED_TO_OBJECT`\n  Use `DANGEROUS_CHANGE_IMPLEMENTED_INTERFACE_ADDED` instead.\n  Constant value also changed from `INTERFACE_ADDED_TO_OBJECT` to `IMPLEMENTED_INTERFACE_ADDED`.\n\nRefactoring:\n\n- Reify AST node types and remove unneeded nullability (#751)\n\n## v14.4.1\n\n### Fixed\n\n- Allow pushing nodes to `NodeList` via `[]=` (#767)\n- Fix signature of `Error\\FormattedError::prepareFormatter()` to address PHP8 deprecation (#742)\n- Do not add errors key to result when errors discarded by custom error handler (#766)\n\n## v14.4.0\n\n### Fixed\n\n- Fixed `SchemaPrinter` so that it uses late static bindings when extended\n- Parse `DirectiveDefinitionNode->locations` as `NodeList<NamedNode>` (fixes AST::fromArray conversion) (#723)\n- Parse `Parser::implementsInterfaces` as `NodeList<NamedTypeNode>` (fixes AST::fromArray conversion)\n- Fix signature of `Parser::unionMemberTypes` to match actual `NodeList<NamedTypeNode>`\n\n## v14.3.0\n\n### Added\n\n- Allow `typeLoader` to return a type thunk (#687)\n\n### Fixed\n\n- Read getParsedBody() instead of getBody() when Request is ServerRequest (#715)\n- Fix default get/set behavior on InputObjectField and FieldDefinition (#716)\n\n## v14.2.0\n\nDeprecates:\n\n- Public access to `FieldDefinition::$type` property (#702)\n\nFixes:\n\n- Fix validation for input field definition directives (#714)\n\n## v14.1.1\n\n## v14.1.1\n\n### Fixed\n\n- Handle nullable `DirectiveNode#astNode` in `SchemaValidationContext` (#708)\n\n## v14.1.0\n\n### Added\n\n- Add partial parse functions for const variants (#693)\n\n### Fixed\n\n- Differentiate between client-safe and non-client-safe errors in scalar validation (#706)\n- Proper type hints for `IntValueNode` (#691)\n- Fix \"only booleans are allowed\" errors (#659)\n- Ensure NamedTypeNode::$name is always a NameNode (#695)\n\n### Optimized\n\n- Visitor: simplify getVisitFn (#694)\n- Replace function calls with type casts (#692)\n\n## v14.0.2\n\n### Optimized\n\n- Optimize lazy types (#684)\n\n## v14.0.1\n\n### Fixed\n\n- Fix for: Argument defaults with integer/float values crashes introspection query (#679)\n- Fix for \"Invalid AST Node: false\" error (#685)\n- Fix double Error wrapping when parsing variables (#688)\n\n### Optimized\n\n- Do not use call_user_func or call_user_func_array (#676)\n- Codestyle and static analysis improvements (#648, #690)\n\n## v14.0.0\n\nThis release brings several breaking changes. Please refer to [UPGRADE](UPGRADE.md) document for details.\n\n- **BREAKING/BUGFIX:** Strict coercion of scalar types (#278)\n- **BREAKING/BUGFIX:** Spec-compliance: Fixed ambiguity with null variable values and default values (#274)\n- **BREAKING:** Removed deprecated directive introspection fields (onOperation, onFragment, onField)\n- **BREAKING:** `GraphQL\\Deferred` now extends `GraphQL\\Executor\\Promise\\Adapter\\SyncPromise`\n- **BREAKING:** renamed several types of dangerous/breaking changes (returned by `BreakingChangesFinder`)\n- **BREAKING:** Renamed `GraphQL\\Error\\Debug` to `GraphQL\\Error\\DebugFlag`.\n- **BREAKING:** Debug flags in `GraphQL\\Executor\\ExecutionResult`, `GraphQL\\Error\\FormattedError` and `GraphQL\\Server\\ServerConfig` do not accept `boolean` value anymore but `int` only.\n- **BREAKING:** `$positions` in `GraphQL\\Error\\Error` constructor are not nullable anymore. Same can be expressed by passing an empty array.\n\n### Added\n\n- Support repeatable directives (#643)\n- Support SDL Validation and other schema validation improvements (e.g. #492)\n- Added promise adapter for [Amp](https://amphp.org/) (#551)\n- Query plan utility improvements (#513, #632)\n- Allow retrieving query complexity once query has been completed (#316)\n- Allow input types to be passed in from variables using \\stdClass instead of associative arrays (#535)\n- Support UTF-16 surrogate pairs within string literals (#554, #556)\n\n### Changed\n\n- Compliant with the GraphQL specification [June 2018 Edition](https://spec.graphql.org/June2018/)\n- Having an empty string in `deprecationReason` will now print the `@deprecated` directive (only a `null` `deprecationReason` won't print the `@deprecated` directive).\n\n### Optimized\n\n- Perf: support lazy type definitions (#557)\n- Simplified Deferred implementation (now allows chaining like promises, #573)\n\n### Deprecated\n\n- Deprecated Experimental executor (#397)\n\n### Fixed\n\n- Some bugs\n- Improve accuracy of type hints with [PHPStan](https://github.com/phpstan/phpstan)\n\nSpecial thanks to @simPod, @spawnia and @shmax for their major contributions!\n\n## v0.13.9\n\n- Fix double Error wrapping when parsing variables (#689)\n\n## v0.13.8\n\n- Don't call global field resolver on introspection fields (#481)\n\n## v0.13.7\n\n- Added retrieving query complexity once query has been completed (#316)\n- Allow input types to be passed in from variables using \\stdClass instead of associative arrays (#535)\n\n## v0.13.6\n\n- QueryPlan can now be used on interfaces not only objects. (#495)\n- Array in variables in place of object shouldn't cause fatal error (fixes #467)\n- Scalar type ResolverInfo::getFieldSelection support (#529)\n\n## v0.13.5\n\n- Fix coroutine executor when using with promise (#486)\n\n## v0.13.4\n\n- Force int when setting max query depth (#477)\n\n## v0.13.3\n\n- Reverted minor possible breaking change (#476)\n\n## v0.13.2\n\n- Added QueryPlan support (#436)\n- Fixed an issue with NodeList iteration over missing keys (#475)\n\n## v0.13.1\n\n- Better validation of field/directive arguments\n- Support for apollo client/server persisted queries\n- Minor tweaks and fixes\n\n## v0.13.0\n\nThis release brings several breaking changes. Please refer to [UPGRADE](UPGRADE.md) document for details.\n\nNew features and notable changes:\n\n- PHP version required: 7.1+\n- Spec compliance: error `category` and extensions are displayed under `extensions` key when using default formatting (#389)\n- New experimental executor with improved performance (#314).<br>\n  It is a one-line switch: `GraphQL::useExperimentalExecutor()`.<br>\n  <br>\n  **Please try it and post your feedback at https://github.com/webonyx/graphql-php/issues/397**\n  (as it may become the default one in future)\n  <br>\n  <br>\n- Ported `extendSchema` from the reference implementation under `GraphQL\\Utils\\SchemaExtender` (#362)\n- Added ability to override standard types via `GraphQL::overrideStandardTypes(array $types)` (#401)\n- Added flag `Debug::RETHROW_UNSAFE_EXCEPTIONS` which would only rethrow app-specific exceptions (#337)\n- Several classes were renamed (see [UPGRADE.md](UPGRADE.md))\n- Schema Validation improvements\n\n## v0.12.6\n\n- Bugfix: Call to a member function getLocation() on null (#336)\n- Fixed several errors discovered by static analysis (#329)\n\n## v0.12.5\n\n- Execution performance optimization for lists\n\n## v0.12.4\n\n- Allow stringeable objects to be serialized by StringType (#303)\n\n## v0.12.3\n\n- StandardServer: add support for the multipart/form-data content type (#300)\n\n## v0.12.2\n\n- SchemaPrinter: Use multi-line block for trailing quote (#294)\n\n## v0.12.1\n\n- Fixed bug in validation rule OverlappingFieldsCanBeMerged (#292)\n- Added one more breaking change note in UPGRADE.md (#291)\n- Spec compliance: remove `data` entry from response on top-level error (#281)\n\n## v0.12.0\n\n- RFC: Block String (multi-line strings via triple-quote \"\"\"string\"\"\")\n- GraphQL Schema SDL: Descriptions as strings (including multi-line)\n- Changed minimum required PHP version to 5.6\n\nImprovements:\n\n- Allow extending GraphQL errors with additional properties\n- Fixed parsing of default values in Schema SDL\n- Handling several more cases in findBreakingChanges\n- StandardServer: expect `operationName` (instead of `operation`) in input\n\n## v0.11.5\n\n- Allow objects with \\_\\_toString in IDType\n\n## v0.11.4\n\n- findBreakingChanges utility (see #199)\n\n## v0.11.3\n\n- StandardServer: Support non pre-parsed PSR-7 request body (see #202)\n\n## v0.11.2\n\n- Bugfix: provide descriptions to custom scalars (see #181)\n\n## v0.11.1\n\n- Ability to override internal types via `types` option of the schema (see #174).\n\n## v0.11.0\n\nThis release brings little changes but there are two reasons why it is released as major version:\n\n1. To follow reference implementation versions (it matches 0.11.x series of graphql-js)\n2. It may break existing applications because scalar input coercion rules are stricter now:<br>\n   In previous versions sloppy client input could leak through with unexpected results.\n   For example string `\"false\"` accidentally sent in variables was converted to boolean `true`\n   and passed to field arguments. In the new version, such input will produce an error\n   (which is a spec-compliant behavior).\n\nImprovements:\n\n- Stricter input coercion (see #171)\n- Types built with `BuildSchema` now have reference to AST node with corresponding AST definition (in $astNode property)\n- Account for query offset for error locations (e.g. when query is stored in `.graphql` file)\n\n## v0.10.2\n\n- StandardServer improvement: do not raise an error when variables are passed as empty string (see #156)\n\n## v0.10.1\n\n- Fixed infinite loop in the server (see #153)\n\n## v0.10.0\n\nThis release brings several breaking changes. Please refer to [UPGRADE](UPGRADE.md) document for details.\n\nNew features and notable changes:\n\n- Changed minimum PHP version from 5.4 to 5.5\n- Lazy loading of types without separate build step (see #69, see [docs](https://webonyx.github.io/graphql-php/type-system/schema/#lazy-loading-of-types))\n- PSR-7 compliant Standard Server (see [docs](https://webonyx.github.io/graphql-php/executing-queries/#using-server))\n- New default error formatting, which does not expose sensitive data (see [docs](https://webonyx.github.io/graphql-php/error-handling/))\n- Ability to define custom error handler to filter/log/re-throw exceptions after execution (see [docs](https://webonyx.github.io/graphql-php/error-handling/#custom-error-handling-and-formatting))\n- Allow defining schema configuration using objects with fluent setters vs array (see [docs](https://webonyx.github.io/graphql-php/type-system/schema/#using-config-class))\n- Allow serializing AST to array and re-creating AST from array lazily (see [docs](https://webonyx.github.io/graphql-php/reference/#graphqlutilsast))\n- [Apollo-style](https://dev-blog.apollodata.com/query-batching-in-apollo-63acfd859862) query batching support via server (see [docs](https://webonyx.github.io/graphql-php/executing-queries/#query-batching))\n- Schema validation, including validation of interface implementations (see [docs](https://webonyx.github.io/graphql-php/type-system/schema/#schema-validation))\n- Ability to pass custom config formatter when defining schema using [GraphQL type language](http://graphql.org/learn/schema/#type-language) (see [docs](https://webonyx.github.io/graphql-php/type-system/type-language/))\n\nImprovements:\n\n- Significantly improved parser performance (see #137 and #128)\n- Support for PHP7 exceptions everywhere (see #127)\n- Improved [documentation](https://webonyx.github.io/graphql-php/) and docblock comments\n\nDeprecations and breaking changes - see [UPGRADE](UPGRADE.md) document.\n\n## v0.9.14\n\n- Minor change to assist DataLoader project in fixing #150\n\n## v0.9.13\n\n- Fixed PHP notice and invalid conversion when non-scalar value is passed as ID or String type (see #121)\n\n## v0.9.12\n\n- Fixed bug occurring when enum `value` is bool, null or float (see #141)\n\n## v0.9.11\n\n- Ability to disable introspection (see #131)\n\n## v0.9.10\n\n- Fixed issue with query complexity throwing on invalid queries (see #125)\n- Fixed \"Out of memory\" error when `resolveType` returns unexpected result (see #119)\n\n## v0.9.9\n\n- Bugfix: throw UserError vs InvariantViolationError for errors caused by client (see #123)\n\n## v0.9.8\n\n- Bugfix: use directives when calculating query complexity (see #113)\n- Bugfix: `AST\\Node::__toString()` will convert node to array recursively to encode to json without errors\n\n## v0.9.7\n\n- Bugfix: `ResolveInfo::getFieldSelection()` now correctly merges fragment selections (see #98)\n\n## v0.9.6\n\n- Bugfix: `ResolveInfo::getFieldSelection()` now respects inline fragments\n\n## v0.9.5\n\n- Fixed SyncPromiseAdapter::all() to not change the order of arrays (see #92)\n\n## v0.9.4\n\n- Tools to help building schema out of Schema definition language as well as printing existing\n  schema in Schema definition language (see #91)\n\n## v0.9.3\n\n- Fixed Utils::assign() bug related to detecting missing required keys (see #89)\n\n## v0.9.2\n\n- Schema Definition Language: element descriptions can be set through comments (see #88)\n\n## v0.9.1\n\n- Fixed: `GraphQL\\Server` now properly sets promise adapter before executing query\n\n## v0.9.0\n\n- Deferred resolvers (see #66, see [docs](docs/data-fetching.md#solving-n1-problem))\n- New Facade class with fluid interface: `GraphQL\\Server` (see #82)\n- Experimental: ability to load types in Schema lazily via custom `TypeResolutionStrategy` (see #69)\n\n## v0.8.0\n\nThis release brings several minor breaking changes. Please refer to [UPGRADE](UPGRADE.md) document for details.\n\nNew features:\n\n- Support for `null` value (as required by latest GraphQL spec)\n- Shorthand definitions for field and argument types (see #47)\n- `path` entry in errors produced by resolvers for better debugging\n- `resolveType` for interface/union is now allowed to return string name of type\n- Ability to omit name when extending type class (vs defining inline)\n\nImprovements:\n\n- Spec compliance improvements\n- New docs and examples\n\n## Older versions\n\nLook at [GitHub Releases Page](https://github.com/webonyx/graphql-php/releases).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.5439453125,
          "content": "# Contributing to graphql-php\n\n## Workflow\n\nIf your contribution requires significant or breaking changes, or if you plan to propose a major new feature,\nwe recommend you to [create an issue](https://github.com/webonyx/graphql-php/issues/new)\nwith a brief proposal and discuss it with us first.\n\nFor smaller contributions just use this workflow:\n\n- Fork the project.\n- Add your features and or bug fixes.\n- Add tests to ensure your changes work and will continue working.\n- Check your changes using `composer check`.\n- Add an entry to the [Changelog's Unreleased section](CHANGELOG.md#unreleased).\n- Send a pull request.\n\n## Setup\n\n```sh\ngit clone <your-fork-url>\ncd graphql-php\ncomposer install\n```\n\n## Testing\n\nWe ensure the code works and continues to work as expected with [PHPUnit](https://phpunit.de).\n\nRun unit tests:\n\n```sh\ncomposer test\n```\n\nSome tests have an annotation such as `@see it('<description>')`.\nIt references a matching test in the [graphql-js implementation](https://github.com/graphql/graphql-js).\n\nWhen porting tests that utilize [the `dedent()` test utility from `graphql-js`](https://github.com/graphql/graphql-js/blob/99d6079434/src/__testUtils__/dedent.js),\nwe instead use [the PHP native `nowdoc` syntax](https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.nowdoc).\nIf the string contents are in a specific grammar, use an appropriate tag such as `GRAPHQL`, `PHP` or `JSON`:\n\n```php\nself::assertSomePrintedOutputExactlyMatches(\n    <<<'GRAPHQL'\n    type Foo {\n      bar: Baz\n    }\n\n    GRAPHQL,\n    $output\n);\n```\n\n## Coding Standard\n\nWe format the code automatically with [php-cs-fixer](https://github.com/friendsofphp/php-cs-fixer).\n\nApply automatic code style fixes:\n\n```sh\ncomposer fix\n```\n\n### Multiline Ternary Expressions\n\nTernary expressions must be spread across multiple lines.\n\n```php\n$foo = $cond\n    ? 1\n    : 2;\n```\n\n### Extensibility\n\nWe cannot foresee every possible use case in advance, extending the code should remain possible.\n\n#### `protected` over `private`\n\nAlways use class member visibility `protected` over `private`.\n\n#### Late Static Binding\n\nAlways use `static::` over `self::` for method calls to enable overriding of static class methods.\n\n#### `final` classes\n\nPrefer `final` classes in [tests](tests), but never use them in [src](src).\n\n## Static Analysis\n\nWe validate code correctness with [PHPStan](https://phpstan.org).\n\nRun static analysis:\n\n```sh\ncomposer stan\n```\n\nRegenerate the [PHPStan baseline](https://phpstan.org/user-guide/baseline):\n\n```sh\ncomposer baseline\n```\n\n### Type Assertions\n\nWhen control flow or native types are insufficient to convince the IDE or PHPStan that a value\nis of a certain type, but you know it must be due to some invariant, you may assert its type.\nPrefer `assert()` for simple types and only use `@var` for complex types:\n\n```php\nfunction identity($value) { return $value; }\n\n$mustBeInt = identity(1);\nassert(is_int($mustBeInt));\n\n/** @var array<string, int> $mustBeArrayOfStrings */\n$mustBeArrayOfStringsToInts = identity(['foo' => 42]);\n```\n\n## Running Benchmarks\n\nWe benchmark performance critical code with [PHPBench](https://github.com/phpbench/phpbench).\n\nCheck performance:\n\n```sh\ncomposer bench\n```\n\n## Documentation\n\nWe document this library by rendering the Markdown files in [docs](docs) with [MkDocs](https://www.mkdocs.org).\n\n> You may propose changes to the docs via merge requests against the `master` branch.\n> Do not edit the generated HTML files in the `gh-pages` branch directly, they are automatically generated.\n\nGenerate the class reference docs:\n\n```sh\ncomposer docs\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "MIT License\n\nCopyright (c) 2015-present, Webonyx, LLC.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.2353515625,
          "content": ".PHONY: it\nit: fix stan test docs ## Run the commonly used targets\n\n.PHONY: help\nhelp: ## Displays this list of targets with descriptions\n\t@grep --extended-regexp '^[a-zA-Z0-9_-]+:.*?## .*$$' $(firstword $(MAKEFILE_LIST)) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[32m%-30s\\033[0m %s\\n\", $$1, $$2}'\n\n.PHONY: setup\nsetup: vendor phpstan.neon ## Set up the project\n\n.PHONY: fix\nfix: rector php-cs-fixer prettier ## Automatic code fixes\n\n.PHONY: rector\nrector: vendor ## Automatic code fixes with Rector\n\tcomposer rector\n\n.PHONY: php-cs-fixer\nphp-cs-fixer: vendor ## Fix code style\n\tcomposer php-cs-fixer\n\n.PHONY: prettier\nprettier: ## Format code with prettier\n\tprettier --write --tab-width=2 *.md **/*.md\n\nphpstan.neon:\n\tprintf \"includes:\\n  - phpstan.neon.dist\" > phpstan.neon\n\n.PHONY: stan\nstan: ## Runs static analysis with phpstan\n\tcomposer stan\n\n.PHONY: test\ntest: ## Runs tests with phpunit\n\tcomposer test\n\n.PHONY: bench\nbench: ## Runs benchmarks with phpbench\n\tcomposer bench\n\n.PHONY: docs\ndocs: ## Generate the class-reference docs\n\tphp generate-class-reference.php\n\tprettier --write docs/class-reference.md\n\nvendor: composer.json composer.lock\n\tcomposer install\n\tcomposer validate\n\tcomposer normalize\n\ncomposer.lock: composer.json\n\tcomposer update\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.1943359375,
          "content": "# graphql-php\n\n[![Test](https://github.com/webonyx/graphql-php/workflows/Test/badge.svg)](https://github.com/webonyx/graphql-php/actions?query=workflow:Test+branch:master)\n[![Static Analysis](https://github.com/webonyx/graphql-php/workflows/Static%20Analysis/badge.svg)](https://github.com/webonyx/graphql-php/actions?query=workflow:%22Static%20Analysis%22+branch:master)\n[![Coverage Status](https://codecov.io/gh/webonyx/graphql-php/branch/master/graph/badge.svg)](https://codecov.io/gh/webonyx/graphql-php/branch/master)\n[![Latest Stable Version](https://poser.pugx.org/webonyx/graphql-php/version)](https://packagist.org/packages/webonyx/graphql-php)\n\nThis is a PHP implementation of the [GraphQL](https://graphql.org) [specification](https://github.com/graphql/graphql-spec)\nbased on the [reference implementation in JavaScript](https://github.com/graphql/graphql-js).\n\n## Installation\n\nVia composer:\n\n```sh\ncomposer require webonyx/graphql-php\n```\n\n## Documentation\n\nFull documentation is available at [https://webonyx.github.io/graphql-php](https://webonyx.github.io/graphql-php)\nor in the [docs](docs) directory.\n\n## Examples\n\nThere are several ready examples in the [examples](examples) directory,\nwith a specific README file per example.\n\n## Versioning\n\nThis project follows [Semantic Versioning 2.0.0](https://semver.org/spec/v2.0.0.html).\n\nElements that belong to the public API of this package are marked with the `@api` PHPDoc tag.\nThose elements are thus guaranteed to be stable within major versions. All other elements are\nnot part of this backwards compatibility guarantee and may change between minor or patch versions.\n\nThe most recent version is actively developed on [`master`](https://github.com/webonyx/graphql-php/tree/master).\nOlder versions are generally no longer supported, although exceptions may be made for sponsors.\n\n## Security\n\nFor security related issues, email [benedikt@franke.tech](benedikt@franke.tech) instead of opening a GitHub issue.\n\n## Contributors\n\nThis project exists thanks to [all the people](https://github.com/webonyx/graphql-php/graphs/contributors) who [contribute](CONTRIBUTING.md).\n\n## Backers\n\n<a href=\"https://opencollective.com/webonyx-graphql-php#backers\" target=\"_blank\"><img src=\"https://opencollective.com/webonyx-graphql-php/backers.svg?width=890\"></a>\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [Become a sponsor](https://opencollective.com/webonyx-graphql-php#sponsor).\n\n<a href=\"https://opencollective.com/webonyx-graphql-php/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/webonyx-graphql-php/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webonyx-graphql-php/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/webonyx-graphql-php/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webonyx-graphql-php/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/webonyx-graphql-php/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webonyx-graphql-php/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/webonyx-graphql-php/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webonyx-graphql-php/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/webonyx-graphql-php/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webonyx-graphql-php/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/webonyx-graphql-php/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webonyx-graphql-php/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/webonyx-graphql-php/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webonyx-graphql-php/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/webonyx-graphql-php/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webonyx-graphql-php/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/webonyx-graphql-php/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/webonyx-graphql-php/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/webonyx-graphql-php/sponsor/9/avatar.svg\"></a>\n\n## License\n\nSee [LICENSE](LICENSE).\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 23.8876953125,
          "content": "## v14.x.x > v15.x.x\n\n### BREAKING: Removed error extension field `category`\n\nThe formatting of errors that implement the `ClientAware` interface no longer\ncontains the key `category`. This includes both built-in and user-defined errors.\n\n```php\nthrow new \\GraphQL\\Error\\Error('msg');\n```\n\nFormatting before the change:\n\n```php\n'errors' => [\n    [\n        'message' => 'msg',\n        'extensions' => [\n            'category' => 'graphql',\n        ],\n    ],\n]\n```\n\nAfter the change:\n\n```php\n'errors' => [\n    [\n        'message' => 'msg',\n    ],\n]\n```\n\nThe method `ClientAware::getCategory()` was removed, you may also remove it from your implementations:\n\n```diff\nuse GraphQL\\Error\\ClientAware;\n\nclass MyException extends \\Exception implements ClientAware\n{\n    public function isClientSafe(): bool\n    {\n        return true;\n    }\n\n-   public function getCategory(): string\n-   {\n-       return 'my-category';\n-   }\n}\n```\n\nYou can always switch to [custom error formatting](https://webonyx.github.io/graphql-php/error-handling/#custom-error-handling-and-formatting)\nto revert to the old format.\n\n### `exit` yourself\n\nThe argument `bool $exitWhenDone` was removed from `StandardServer::send500Error()` and `StandardServer::handleRequest()`.\nExit yourself if you need to:\n\n```diff\n$server = new GraphQL\\Server\\StandardServer();\n-$server->handleRequest($body, true);\n+$server->handleRequest($body);\n+exit;\n```\n\n## v0.13.x > v14.x.x\n\n### BREAKING: Strict coercion of scalar types (#278)\n\n**Impact: Major**\n\nThis change may break API clients if they were sending loose variable values.\n\n<details>\n  <summary>See Examples</summary>\n\nConsider the following query:\n\n```graphql\nquery ($intQueryVariable: Int) {\n  test(intInput: $intQueryVariable)\n}\n```\n\nWhat happens if we pass non-integer values as `$intQueryVariable`:\n\n```\n[true, false, 1, 0, 0.0, 'true', 'false', '1', '0', '0.0', [], [0,1]]\n```\n\n#### Integer coercion, changed behavior:\n\n```\nbool(true):\n 0.13.x: coerced to int(1)\n 14.x.x: Error: Variable \"$queryVariable\" got invalid value true; Expected type Int; Int cannot represent non-integer value: true\n\nbool(false):\n 0.13.x: coerced to int(0)\n 14.x.x: Error: Variable \"$queryVariable\" got invalid value false; Expected type Int; Int cannot represent non-integer value: false\n\nstring(1) \"1\"\n 0.13.x: was coerced to int(1)\n 14.x.x: Error: Variable \"$queryVariable\" got invalid value \"1\"; Expected type Int; Int cannot represent non-integer value: 1\n\nstring(1) \"0\"\n 0.13.x: was coerced to int(0)\n 14.x.x: Error: Variable \"$queryVariable\" got invalid value \"0\"; Expected type Int; Int cannot represent non-integer value: 0\n\nstring(3) \"0.0\"\n 0.13.x: was coerced to int(0)\n 14.x.x: Error: Variable \"$queryVariable\" got invalid value \"0.0\"; Expected type Int; Int cannot represent non-integer value: 0.0\n```\n\nDid not change:\n\n```\nint(1): coerced to int(1)\nint(0) was coerced to int(0)\nfloat(0) was coerced to int(0)\n\nstring(4) \"true\":\n Error: Variable \"$queryVariable\" got invalid value \"true\"; Expected type Int; Int cannot represent non 32-bit signed integer value: true\n\nstring(5) \"false\":\n Error: Variable \"$queryVariable\" got invalid value \"false\"; Expected type Int; Int cannot represent non 32-bit signed integer value: false\n\narray(0) {}\n Error: Variable \"$queryVariable\" got invalid value []; Expected type Int; Int cannot represent non 32-bit signed integer value: []\n\narray(2) { [0]=> int(0) [1]=> int(1) }\n Error: Variable \"$queryVariable\" got invalid value [0,1]; Expected type Int; Int cannot represent non 32-bit signed integer value: [0,1]\n```\n\n#### Float coercion, changed behavior:\n\n```graphql\nquery ($queryVariable: Float) {\n  test(floatInput: $queryVariable)\n}\n```\n\n```\nbool(true)\n 0.13.x: was coerced to float(1)\n 14.x.x: Error: Variable \"$queryVariable\" got invalid value true; Expected type Float; Float cannot represent non numeric value: true\n\nbool(false)\n 0.13.x: was coerced to float(0)\n 14.x.x: Error: Variable \"$queryVariable\" got invalid value false; Expected type Float; Float cannot represent non numeric value: false\n\nstring(1) \"1\"\n 0.13.x: was coerced to float(1)\n 14.x.x: Error: Variable \"$queryVariable\" got invalid value \"1\"; Expected type Float; Float cannot represent non numeric value: 1\n\nstring(1) \"0\"\n 0.13.x: was coerced to float(0)\n 14.x.x: Error: Variable \"$queryVariable\" got invalid value \"0\"; Expected type Float; Float cannot represent non numeric value: 0\n\nstring(3) \"0.0\"\n 0.13.x: was coerced to float(0)\n 14.x.x: Error: Variable \"$queryVariable\" got invalid value \"0.0\"; Expected type Float; Float cannot represent non numeric value: 0.0\n```\n\n#### String coercion, changed behavior:\n\n```graphql\nquery ($queryVariable: String) {\n  test(stringInput: $queryVariable)\n}\n```\n\n```\nbool(true)\n 0.13.x: was coerced to string(1) \"1\"\n 14.x.x: Error: Variable \"$queryVariable\" got invalid value true; Expected type String; String cannot represent a non string value: true\n\nbool(false)\n 0.13.x: was coerced to string(0) \"\"\n 14.x.x: Error: Variable \"$queryVariable\" got invalid value false; Expected type String; String cannot represent a non string value: false\n\nint(1)\n 0.13.x: was coerced to string(1) \"1\"\n 14.x.x: Error: Variable \"$queryVariable\" got invalid value 1; Expected type String; String cannot represent a non string value: 1\n\nint(0)\n 0.13.x: was coerced to string(1) \"0\"\n 14.x.x:  Error: Variable \"$queryVariable\" got invalid value 0; Expected type String; String cannot represent a non string value: 0\n\nfloat(0)\n 0.13.x: was coerced to string(1) \"0\"\n 14.x.x: Error: Variable \"$queryVariable\" got invalid value 0; Expected type String; String cannot represent a non string value: 0\n```\n\n#### Boolean coercion did not change.\n\n</details>\n\n### Breaking: renamed classes and changed signatures\n\n**Impact: Medium**\n\n- Dropped previously deprecated `GraphQL\\Schema`. Use `GraphQL\\Type\\Schema`.\n- Renamed `GraphQL\\Error\\Debug` to `GraphQL\\Error\\DebugFlag`.\n- Debug flags in `GraphQL\\Executor\\ExecutionResult`, `GraphQL\\Error\\FormattedError` and `GraphQL\\Server\\ServerConfig`\n  do not accept `boolean` value anymore but `int` only (pass values of `GraphQL\\Error\\DebugFlag` constants)\n- `$positions` in `GraphQL\\Error\\Error` are not nullable anymore. Same can be expressesed by passing empty array.\n\n### BREAKING: Removed deprecated directive introspection fields (onOperation, onFragment, onField)\n\n**Impact: Minor**\n\nCould affect developer tools relying on old introspection format.\nReplaced with [Directive Locations](https://spec.graphql.org/June2018/#sec-Type-System.Directives).\n\n### BREAKING: Changes in validation rules:\n\n**Impact: Minor**\n\n- Removal of `VariablesDefaultValueAllowed` validation rule. All variables may now specify a default value.\n- Renamed `ProvidedNonNullArguments` to `ProvidedRequiredArguments` (no longer require values to be provided to non-null arguments which provide a default value).\n\nCould affect projects using custom sets of validation rules.\n\n### BREAKING: `GraphQL\\Deferred` now extends `GraphQL\\Executor\\Promise\\Adapter\\SyncPromise`\n\n**Impact: Minor**\n\nCan only affect a few projects that were somehow customizing deferreds or the default sync promise adapter.\n\n### BREAKING: renamed several types of dangerous/breaking changes (returned by `BreakingChangesFinder`):\n\n**Impact: Minor**\n\nCan affect projects relying on `BreakingChangesFinder` utility in their CI.\n\nFollowing types of changes were renamed:\n\n```\n- `NON_NULL_ARG_ADDED` to `REQUIRED_ARG_ADDED`\n- `NON_NULL_INPUT_FIELD_ADDED` to `REQUIRED_INPUT_FIELD_ADDED`\n- `NON_NULL_DIRECTIVE_ARG_ADDED` to `REQUIRED_DIRECTIVE_ARG_ADDED`\n- `NULLABLE_INPUT_FIELD_ADDED` to `OPTIONAL_INPUT_FIELD_ADDED`\n- `NULLABLE_ARG_ADDED` to `OPTIONAL_ARG_ADDED`\n```\n\n### Breaking: Dropped `GraphQL\\Error\\Error::$message`\n\n**Impact: Minor**\n\nUse `GraphQL\\Error\\Error->getMessage()` instead.\n\n### Breaking: change TypeKind constants\n\n**Impact: Minor**\n\nThe constants in `\\GraphQL\\Type\\TypeKind` were partly renamed and their values\nhave been changed to match their name instead of a numeric index.\n\n### Breaking: some error messages were changed\n\n**Impact: Minor**\n\nCan affect projects relying on error messages parsing.\n\nOne example: added quotes around `parentType.fieldName` in error message:\n\n```diff\n- Cannot return null for non-nullable field parentType.fieldName.\n+ Cannot return null for non-nullable field \"parentType.fieldName\".\n```\n\nBut expect other similar changes like this.\n\n## Upgrade v0.12.x > v0.13.x\n\n### Breaking (major): minimum supported version of PHP\n\nNew minimum required version of PHP is **7.1+**\n\n### Breaking (major): default errors formatting changed according to spec\n\n**Category** and extensions assigned to errors are shown under `extensions` key\n\n```php\n$e = new Error(\n    'msg',\n    null,\n    null,\n    null,\n    null,\n    null,\n    ['foo' => 'bar']\n);\n```\n\nFormatting before the change:\n\n```\n'errors' => [\n    [\n        'message' => 'msg',\n        'category' => 'graphql',\n        'foo' => 'bar'\n    ]\n]\n```\n\nAfter the change:\n\n```\n'errors' => [\n    [\n        'message' => 'msg',\n        'extensions' => [\n            'category' => 'graphql',\n            'foo' => 'bar',\n        ],\n    ]\n]\n```\n\nNote: if error extensions contain `category` key - it has a priority over default category.\n\nYou can always switch to [custom error formatting](https://webonyx.github.io/graphql-php/error-handling/#custom-error-handling-and-formatting) to revert to the old format.\n\n### Try it: Experimental Executor with improved performance\n\nIt is disabled by default. To enable it, do the following\n\n```php\nuse GraphQL\\Executor\\Executor;\nuse GraphQL\\Experimental\\Executor\\CoroutineExecutor;\n\nExecutor::setImplementationFactory([CoroutineExecutor::class, 'create']);\n```\n\n**Please post your feedback about new executor at https://github.com/webonyx/graphql-php/issues/397\nEspecially if you had issues (because it may become the default in one of the next releases)**\n\n### Breaking: multiple interfaces separated with & in SDL\n\nBefore the change:\n\n```graphql\ntype Foo implements Bar, Baz {\n  field: Type\n}\n```\n\nAfter the change:\n\n```graphql\ntype Foo implements Bar & Baz {\n  field: Type\n}\n```\n\nTo allow for an adaptive migration, use `allowLegacySDLImplementsInterfaces` option of parser:\n\n```php\nParser::parse($source, [ 'allowLegacySDLImplementsInterfaces' => true])\n```\n\n### Breaking: several classes renamed\n\n- `AbstractValidationRule` renamed to `ValidationRule` (NS `GraphQL\\Validator\\Rules`)\n- `AbstractQuerySecurity` renamed to `QuerySecurityRule` (NS `GraphQL\\Validator\\Rules`)\n- `FindBreakingChanges` renamed to `BreakingChangesFinder` (NS `GraphQL\\Utils`)\n\n### Breaking: new constructors\n\n`GraphQL\\Type\\Definition\\ResolveInfo` now takes 10 arguments instead of one array.\n\n## Upgrade v0.11.x > v0.12.x\n\n### Breaking: Minimum supported version is PHP5.6\n\nDropped support for PHP 5.5. This release still supports PHP 5.6 and PHP 7.0\n**But the next major release will require PHP7.1+**\n\n### Breaking: Custom scalar types need to throw on invalid value\n\nAs null might be a valid value custom types need to throw an\nException inside `parseLiteral()`, `parseValue()` and `serialize()`.\n\nReturning null from any of these methods will now be treated as valid result.\n\n### Breaking: Custom scalar types parseLiteral() declaration changed\n\nA new parameter was added to `parseLiteral()`, which also needs to be added to any custom scalar type extending from `ScalarType`\n\nBefore:\n\n```php\nclass MyType extends ScalarType {\n\n    ...\n\n    public function parseLiteral($valueNode) {\n        //custom implementation\n    }\n}\n```\n\nAfter:\n\n```php\nclass MyType extends ScalarType {\n\n    ...\n\n    public function parseLiteral($valueNode, array $variables = null) {\n        //custom implementation\n    }\n}\n```\n\n### Breaking: Descriptions in comments are not used as descriptions by default anymore\n\nDescriptions now need to be inside Strings or BlockStrings in order to be picked up as\ndescription. If you want to keep the old behaviour you can supply the option `commentDescriptions`\nto BuildSchema::buildAST(), BuildSchema::build() or Printer::doPrint().\n\nHere is the official way now to define descriptions in the graphQL language:\n\nOld:\n\n```graphql\n# Description\ntype Dog {\n  ...\n}\n```\n\nNew:\n\n```graphql\n\"Description\"\ntype Dog {\n  ...\n}\n\n\"\"\"\nLong Description\n\"\"\"\ntype Dog {\n  ...\n}\n```\n\n### Breaking: Cached AST of version 0.11.x is not compatible with 0.12.x.\n\nThat's because description in AST is now a separate node, not just a string.\nMake sure to renew caches.\n\n### Breaking: Most of previously deprecated classes and methods were removed\n\nSee deprecation notices for previous versions in details.\n\n### Breaking: Standard server expects `operationName` vs `operation` for multi-op queries\n\nBefore the change:\n\n```json\n{\n  \"queryId\": \"persisted-query-id\",\n  \"operation\": \"QueryFromPersistedDocument\",\n  \"variables\": {}\n}\n```\n\nAfter the change:\n\n```json\n{\n  \"queryId\": \"persisted-query-id\",\n  \"operationName\": \"QueryFromPersistedDocument\",\n  \"variables\": {}\n}\n```\n\nThis naming is aligned with graphql-express version.\n\n### Possibly Breaking: AST to array serialization excludes nulls\n\nMost users won't be affected. It _may_ affect you only if you do your own manipulations\nwith exported AST.\n\nExample of json-serialized AST before the change:\n\n```json\n{\n  \"kind\": \"Field\",\n  \"loc\": null,\n  \"name\": {\n    \"kind\": \"Name\",\n    \"loc\": null,\n    \"value\": \"id\"\n  },\n  \"alias\": null,\n  \"arguments\": [],\n  \"directives\": [],\n  \"selectionSet\": null\n}\n```\n\nAfter the change:\n\n```json\n{\n  \"kind\": \"Field\",\n  \"name\": {\n    \"kind\": \"Name\",\n    \"value\": \"id\"\n  },\n  \"arguments\": [],\n  \"directives\": []\n}\n```\n\n## Upgrade v0.8.x, v0.9.x > v0.10.x\n\n### Breaking: changed minimum PHP version from 5.4 to 5.5\n\nIt allows us to leverage `::class` constant, `generators` and other features of newer PHP versions.\n\n### Breaking: default error formatting\n\nBy default exceptions thrown in resolvers will be reported with generic message `\"Internal server error\"`.\nOnly exceptions implementing interface `GraphQL\\Error\\ClientAware` and claiming themselves as `safe` will\nbe reported with full error message.\n\nThis breaking change is done to avoid information leak in production when unhandled\nexceptions were reported to clients (e.g. database connection errors, file access errors, etc).\n\nAlso every error reported to client now has new `category` key which is either `graphql` or `internal`.\nExceptions implementing `ClientAware` interface may define their own custom categories.\n\nDuring development or debugging use `$executionResult->toArray(true)`. It will add `debugMessage` key to\neach error entry in result. If you also want to add `trace` for each error - pass flags instead:\n\n```\nuse GraphQL\\Error\\FormattedError;\n$debug = FormattedError::INCLUDE_DEBUG_MESSAGE | FormattedError::INCLUDE_TRACE;\n$result = GraphQL::executeAndReturnResult(/*args*/)->toArray($debug);\n```\n\nTo change default `\"Internal server error\"` message to something else, use:\n\n```\nGraphQL\\Error\\FormattedError::setInternalErrorMessage(\"Unexpected error\");\n```\n\n**This change only affects default error reporting mechanism. If you set your own error formatter using\n`$executionResult->setErrorFormatter($myFormatter)` you won't be affected by this change.**\n\nIf you need to revert to old behavior temporary, use:\n\n```php\nGraphQL::executeAndReturnResult(/**/)\n    ->setErrorFormatter('\\GraphQL\\Error\\Error::formatError')\n    ->toArray();\n```\n\nBut note that this is deprecated format and will be removed in future versions.\n\nIn general, if new default formatting doesn't work for you - just set [your own error\nformatter](https://webonyx.github.io/graphql-php/error-handling/#custom-error-handling-and-formatting).\n\n### Breaking: Validation rules now have abstract base class\n\nPreviously any callable was accepted by DocumentValidator as validation rule. Now only instances of\n`GraphQL\\Validator\\Rules\\AbstractValidationRule` are allowed.\n\nIf you were using custom validation rules, just wrap them with\n`GraphQL\\Validator\\Rules\\CustomValidationRule` (created for backwards compatibility).\n\nBefore:\n\n```php\nuse GraphQL\\Validator\\DocumentValidator;\n\n$myRule = function(ValidationContext $context) {};\nDocumentValidator::validate($schema, $ast, [$myRule]);\n```\n\nAfter:\n\n```php\nuse GraphQL\\Validator\\Rules\\CustomValidationRule;\nuse GraphQL\\Validator\\DocumentValidator;\n\n$myRule = new CustomValidationRule('MyRule', function(ValidationContext $context) {});\nDocumentValidator::validate($schema, $ast, [$myRule]);\n```\n\nAlso `DocumentValidator::addRule()` signature changed.\n\nBefore the change:\n\n```php\nuse GraphQL\\Validator\\DocumentValidator;\n\n$myRule = function(ValidationContext $context) {};\nDocumentValidator::addRule('MyRuleName', $myRule);\n```\n\nAfter the change:\n\n```php\nuse GraphQL\\Validator\\DocumentValidator;\n\n$myRule = new CustomValidationRulefunction('MyRule', ValidationContext $context) {});\nDocumentValidator::addRule($myRule);\n```\n\n### Breaking: AST now uses `NodeList` vs array for lists of nodes\n\nIt helps us unserialize AST from array lazily. This change affects you only if you use `array_`\nfunctions with AST or mutate AST directly.\n\nBefore the change:\n\n```php\nnew GraphQL\\Language\\AST\\DocumentNode([\n    'definitions' => array(/*...*/)\n]);\n```\n\nAfter the change:\n\n```\nnew GraphQL\\Language\\AST\\DocumentNode([\n    'definitions' => new NodeList([/*...*/])\n]);\n```\n\n### Breaking: scalar types now throw different exceptions when parsing and serializing\n\nOn invalid client input (`parseValue` and `parseLiteral`) they throw standard `GraphQL\\Error\\Error`\nbut when they encounter invalid output (in `serialize`) they throw `GraphQL\\Error\\InvariantViolation`.\n\nPreviously they were throwing `GraphQL\\Error\\UserError`. This exception is no longer used so make sure\nto adjust if you were checking for this error in your custom error formatters.\n\n### Breaking: removed previously deprecated ability to define type as callable\n\nSee https://github.com/webonyx/graphql-php/issues/35\n\n### Deprecated: `GraphQL\\GraphQL::executeAndReturnResult`\n\nMethod is renamed to `GraphQL\\GraphQL::executeQuery`. Old method name is still available,\nbut will trigger deprecation warning in the next version.\n\n### Deprecated: `GraphQL\\GraphQL::execute`\n\nUse `GraphQL\\GraphQL::executeQuery()->toArray()` instead.\nOld method still exists, but will trigger deprecation warning in next version.\n\n### Deprecated: `GraphQL\\Schema` moved to `GraphQL\\Type\\Schema`\n\nOld class still exists, but will trigger deprecation warning in next version.\n\n### Deprecated: `GraphQL\\Utils` moved to `GraphQL\\Utils\\Utils`\n\nOld class still exists, but triggers deprecation warning when referenced.\n\n### Deprecated: `GraphQL\\Type\\Definition\\Config`\n\nIf you were using config validation in previous versions, replace:\n\n```php\nGraphQL\\Type\\Definition\\Config::enableValidation();\n```\n\nwith:\n\n```php\n$schema->assertValid();\n```\n\nSee https://github.com/webonyx/graphql-php/issues/148\n\n### Deprecated: experimental `GraphQL\\Server`\n\nUse [new PSR-7 compliant implementation](docs/executing-queries.md#using-server) instead.\n\n### Deprecated: experimental `GraphQL\\Type\\Resolution` interface and implementations\n\nUse schema [**typeLoader** option](docs/schema-definition.md#lazy-loading-of-types) instead.\n\n### Non-breaking: usage on async platforms\n\nWhen using the library on async platforms use separate method `GraphQL::promiseToExecute()`.\nIt requires promise adapter in it's first argument and always returns a `Promise`.\n\nOld methods `GraphQL::execute` and `GraphQL::executeAndReturnResult` still work in backwards-compatible manner,\nbut they are deprecated and will be removed eventually.\n\nSame applies to Executor: use `Executor::promiseToExecute()` vs `Executor::execute()`.\n\n## Upgrade v0.7.x > v0.8.x\n\nAll of those changes apply to those who extends various parts of this library.\nIf you only use the library and don't try to extend it - everything should work without breaks.\n\n### Breaking: Custom directives handling\n\nWhen passing custom directives to schema, default directives (like `@skip` and `@include`)\nare not added to schema automatically anymore. If you need them - add them explicitly with\nyour other directives.\n\nBefore the change:\n\n```php\n$schema = new Schema([\n   // ...\n   'directives' => [$myDirective]\n]);\n```\n\nAfter the change:\n\n```php\n$schema = new Schema([\n    // ...\n    'directives' => array_merge(GraphQL::getInternalDirectives(), [$myDirective])\n]);\n```\n\n### Breaking: Schema protected property and methods visibility\n\nMost of the `protected` properties and methods of `GraphQL\\Schema` were changed to `private`.\nPlease use public interface instead.\n\n### Breaking: Node kind constants\n\nNode kind constants were extracted from `GraphQL\\Language\\AST\\Node` to\nseparate class `GraphQL\\Language\\AST\\NodeKind`\n\n### Non-breaking: AST node classes renamed\n\nAST node classes were renamed to disambiguate with types. e.g.:\n\n```\nGraphQL\\Language\\AST\\Field -> GraphQL\\Language\\AST\\FieldNode\nGraphQL\\Language\\AST\\OjbectValue -> GraphQL\\Language\\AST\\OjbectValueNode\n```\n\netc.\n\nOld names are still available via `class_alias` defined in `src/deprecated.php`.\nThis file is included automatically when using composer autoloading.\n\n### Deprecations\n\nThere are several deprecations which still work, but trigger `E_USER_DEPRECATED` when used.\n\nFor example `GraphQL\\Executor\\Executor::setDefaultResolveFn()` is renamed to `setDefaultResolver()`\nbut still works with old name.\n\n## Upgrade v0.6.x > v0.7.x\n\nThere are a few new breaking changes in v0.7.0 that were added to the graphql-js reference implementation\nwith the spec of April2016\n\n### 1. Context for resolver\n\nYou can now pass a custom context to the `GraphQL::execute` function that is available in all resolvers as 3rd argument.\nThis can for example be used to pass the current user etc.\n\nMake sure to update all calls to `GraphQL::execute`, `GraphQL::executeAndReturnResult`, `Executor::execute` and all\n`'resolve'` callbacks in your app.\n\nBefore v0.7.0 `GraphQL::execute` signature looked this way:\n\n```php\nGraphQL::execute(\n    $schema,\n    $query,\n    $rootValue,\n    $variables,\n    $operationName\n);\n```\n\nStarting from v0.7.0 the signature looks this way (note the new `$context` argument):\n\n```php\nGraphQL::execute(\n    $schema,\n    $query,\n    $rootValue,\n    $context,\n    $variables,\n    $operationName\n);\n```\n\nBefore v.0.7.0 resolve callbacks had following signature:\n\n```php\n/**\n * @param mixed $object The parent resolved object\n * @param array $args Input arguments\n * @param ResolveInfo $info ResolveInfo object\n * @return mixed\n */\nfunction resolveMyField($object, array $args, ResolveInfo $info) {\n    //...\n}\n```\n\nStarting from v0.7.0 the signature has changed to (note the new `$context` argument):\n\n```php\n/**\n * @param mixed $object The parent resolved object\n * @param array $args Input arguments\n * @param mixed $context The context object that was passed to GraphQL::execute\n * @param ResolveInfo $info ResolveInfo object\n * @return mixed\n */\nfunction resolveMyField($object, array $args, $context, ResolveInfo $info){\n    //...\n}\n```\n\n### 2. Schema constructor signature\n\nThe signature of the Schema constructor now accepts an associative config array instead of positional arguments:\n\nBefore v0.7.0:\n\n```php\n$schema = new Schema($queryType, $mutationType);\n```\n\nStarting from v0.7.0:\n\n```php\n$schema = new Schema([\n    'query' => $queryType,\n    'mutation' => $mutationType,\n    'types' => $arrayOfTypesWithInterfaces // See 3.\n]);\n```\n\n### 3. Types can be directly passed to schema\n\nThere are edge cases when GraphQL cannot infer some types from your schema.\nOne example is when you define a field of interface type and object types implementing\nthis interface are not referenced anywhere else.\n\nIn such case object types might not be available when an interface is queried and query\nvalidation will fail. In that case, you need to pass the types that implement the\ninterfaces directly to the schema, so that GraphQL knows of their existence during query validation.\n\nFor example:\n\n```php\n$schema = new Schema([\n    'query' => $queryType,\n    'mutation' => $mutationType,\n    'types' => $arrayOfTypesWithInterfaces\n]);\n```\n\nNote that you don't need to pass all types here - only those types that GraphQL \"doesn't see\"\nautomatically. Before v7.0.0 the workaround for this was to create a dumb (non-used) field per\neach \"invisible\" object type.\n\nAlso see [webonyx/graphql-php#38](https://github.com/webonyx/graphql-php/issues/38)\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.32421875,
          "content": "{\n  \"name\": \"webonyx/graphql-php\",\n  \"description\": \"A PHP port of GraphQL reference implementation\",\n  \"license\": \"MIT\",\n  \"type\": \"library\",\n  \"keywords\": [\n    \"graphql\",\n    \"API\"\n  ],\n  \"homepage\": \"https://github.com/webonyx/graphql-php\",\n  \"require\": {\n    \"php\": \"^7.4 || ^8\",\n    \"ext-json\": \"*\",\n    \"ext-mbstring\": \"*\"\n  },\n  \"require-dev\": {\n    \"amphp/amp\": \"^2.6\",\n    \"amphp/http-server\": \"^2.1\",\n    \"dms/phpunit-arraysubset-asserts\": \"dev-master\",\n    \"ergebnis/composer-normalize\": \"^2.28\",\n    \"friendsofphp/php-cs-fixer\": \"3.65.0\",\n    \"mll-lab/php-cs-fixer-config\": \"^5.9.2\",\n    \"nyholm/psr7\": \"^1.5\",\n    \"phpbench/phpbench\": \"^1.2\",\n    \"phpstan/extension-installer\": \"^1.1\",\n    \"phpstan/phpstan\": \"1.12.12\",\n    \"phpstan/phpstan-phpunit\": \"1.4.1\",\n    \"phpstan/phpstan-strict-rules\": \"1.6.1\",\n    \"phpunit/phpunit\": \"^9.5 || ^10.5.21 || ^11\",\n    \"psr/http-message\": \"^1 || ^2\",\n    \"react/http\": \"^1.6\",\n    \"react/promise\": \"^2.0 || ^3.0\",\n    \"rector/rector\": \"^1.0\",\n    \"symfony/polyfill-php81\": \"^1.23\",\n    \"symfony/var-exporter\": \"^5 || ^6 || ^7\",\n    \"thecodingmachine/safe\": \"^1.3 || ^2\"\n  },\n  \"suggest\": {\n    \"amphp/http-server\": \"To leverage async resolving with webserver on AMPHP platform\",\n    \"psr/http-message\": \"To use standard GraphQL server\",\n    \"react/promise\": \"To leverage async resolving on React PHP platform\"\n  },\n  \"autoload\": {\n    \"psr-4\": {\n      \"GraphQL\\\\\": \"src/\"\n    }\n  },\n  \"autoload-dev\": {\n    \"psr-4\": {\n      \"GraphQL\\\\Benchmarks\\\\\": \"benchmarks/\",\n      \"GraphQL\\\\Examples\\\\Blog\\\\\": \"examples/01-blog/Blog/\",\n      \"GraphQL\\\\Tests\\\\\": \"tests/\"\n    }\n  },\n  \"config\": {\n    \"allow-plugins\": {\n      \"composer/package-versions-deprecated\": true,\n      \"ergebnis/composer-normalize\": true,\n      \"phpstan/extension-installer\": true\n    },\n    \"preferred-install\": \"dist\",\n    \"sort-packages\": true\n  },\n  \"scripts\": {\n    \"baseline\": \"phpstan --generate-baseline\",\n    \"bench\": \"phpbench run\",\n    \"check\": [\n      \"@fix\",\n      \"@stan\",\n      \"@test\"\n    ],\n    \"docs\": \"php generate-class-reference.php\",\n    \"fix\": [\n      \"@rector\",\n      \"@php-cs-fixer\"\n    ],\n    \"php-cs-fixer\": \"php-cs-fixer fix\",\n    \"rector\": \"rector process\",\n    \"stan\": \"phpstan --verbose\",\n    \"test\": \"php -d zend.exception_ignore_args=Off -d zend.assertions=On -d assert.active=On -d assert.exception=On vendor/bin/phpunit\"\n  }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate-class-reference.php",
          "type": "blob",
          "size": 5.25,
          "content": "<?php declare(strict_types=1);\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse GraphQL\\Utils\\PhpDoc;\nuse Symfony\\Component\\VarExporter\\Exception\\ExceptionInterface;\nuse Symfony\\Component\\VarExporter\\VarExporter;\n\nconst OUTPUT_FILE = __DIR__ . '/docs/class-reference.md';\n\nconst ENTRIES = [\n    GraphQL\\GraphQL::class => [],\n    GraphQL\\Type\\Definition\\Type::class => [],\n    GraphQL\\Type\\Definition\\ResolveInfo::class => [],\n    GraphQL\\Language\\DirectiveLocation::class => ['constants' => true],\n    GraphQL\\Type\\SchemaConfig::class => [],\n    GraphQL\\Type\\Schema::class => [],\n    GraphQL\\Language\\Parser::class => [],\n    GraphQL\\Language\\Printer::class => [],\n    GraphQL\\Language\\Visitor::class => [],\n    GraphQL\\Language\\AST\\NodeKind::class => ['constants' => true],\n    GraphQL\\Executor\\Executor::class => [],\n    GraphQL\\Executor\\ScopedContext::class => [],\n    GraphQL\\Executor\\ExecutionResult::class => [],\n    GraphQL\\Executor\\Promise\\PromiseAdapter::class => [],\n    GraphQL\\Validator\\DocumentValidator::class => [],\n    GraphQL\\Error\\Error::class => ['constants' => true],\n    GraphQL\\Error\\Warning::class => ['constants' => true],\n    GraphQL\\Error\\ClientAware::class => [],\n    GraphQL\\Error\\DebugFlag::class => ['constants' => true],\n    GraphQL\\Error\\FormattedError::class => [],\n    GraphQL\\Server\\StandardServer::class => [],\n    GraphQL\\Server\\ServerConfig::class => [],\n    GraphQL\\Server\\Helper::class => [],\n    GraphQL\\Server\\OperationParams::class => [],\n    GraphQL\\Utils\\BuildSchema::class => [],\n    GraphQL\\Utils\\AST::class => [],\n    GraphQL\\Utils\\SchemaPrinter::class => [],\n];\n\n/**\n * @param ReflectionClass<object> $class\n * @param array{constants?: bool, props?: bool, methods?: bool} $options\n *\n * @throws ExceptionInterface\n * @throws ReflectionException\n */\nfunction renderClass(ReflectionClass $class, array $options): string\n{\n    $classDocs = PhpDoc::unwrap(PhpDoc::unpad($class->getDocComment()));\n    $content = '';\n    $className = $class->getName();\n\n    if ($options['constants'] ?? false) {\n        $constants = [];\n        foreach ($class->getConstants(/* TODO enable with PHP 8: ReflectionClassConstant::IS_PUBLIC */) as $name => $value) {\n            $constants[] = \"const {$name} = \" . VarExporter::export($value) . ';';\n        }\n\n        if ($constants !== []) {\n            $constants = \"```php\\n\" . implode(\"\\n\", $constants) . \"\\n```\";\n            $content .= \"### {$className} Constants\\n\\n{$constants}\\n\\n\";\n        }\n    }\n\n    if ($options['props'] ?? true) {\n        $props = [];\n        foreach ($class->getProperties(ReflectionProperty::IS_PUBLIC) as $property) {\n            if (isApi($property)) {\n                $props[] = renderProp($property);\n            }\n        }\n\n        if ($props !== []) {\n            $props = \"```php\\n\" . implode(\"\\n\\n\", $props) . \"\\n```\";\n            $content .= \"### {$className} Props\\n\\n{$props}\\n\\n\";\n        }\n    }\n\n    if ($options['methods'] ?? true) {\n        $methods = [];\n        foreach ($class->getMethods(ReflectionMethod::IS_PUBLIC) as $method) {\n            if (isApi($method)) {\n                $methods[] = renderMethod($method);\n            }\n        }\n\n        if ($methods !== []) {\n            $methods = implode(\"\\n\\n\", $methods);\n            $content .= \"### {$className} Methods\\n\\n{$methods}\\n\\n\";\n        }\n    }\n\n    return <<<TEMPLATE\n    ## {$className}\n    \n    {$classDocs}\n    \n    {$content}\n    TEMPLATE;\n}\n\n/**\n * @throws ExceptionInterface\n * @throws ReflectionException\n */\nfunction renderMethod(ReflectionMethod $method): string\n{\n    $args = array_map(\n        static function (ReflectionParameter $p): string {\n            $type = ltrim($p->getType() . ' ');\n            $def = $type . '$' . $p->getName();\n\n            if ($p->isDefaultValueAvailable()) {\n                $val = $p->isDefaultValueConstant()\n                    ? $p->getDefaultValueConstantName()\n                    : $p->getDefaultValue();\n                $def .= ' = ' . VarExporter::export($val);\n            }\n\n            return $def;\n        },\n        $method->getParameters()\n    );\n    $argsStr = implode(', ', $args);\n    if (strlen($argsStr) >= 80) {\n        $argsStr = \"\\n    \" . implode(\",\\n    \", $args) . \"\\n\";\n    }\n\n    $returnType = $method->getReturnType();\n    $def = \"function {$method->getName()}({$argsStr})\";\n    $def = $method->isStatic()\n        ? \"static {$def}\"\n        : $def;\n    $def = $returnType instanceof ReflectionType\n        ? \"{$def}: {$returnType}\"\n        : $def;\n    $docBlock = PhpDoc::unpad($method->getDocComment());\n\n    return <<<TEMPLATE\n```php\n{$docBlock}\n{$def}\n```\nTEMPLATE;\n}\n\nfunction renderProp(ReflectionProperty $prop): string\n{\n    $signature = implode(' ', Reflection::getModifierNames($prop->getModifiers())) . ' $' . $prop->getName() . ';';\n\n    return PhpDoc::unpad($prop->getDocComment()) . \"\\n\" . $signature;\n}\n\n/**\n * @param ReflectionProperty|ReflectionMethod $reflector\n */\nfunction isApi(Reflector $reflector): bool\n{\n    $comment = $reflector->getDocComment();\n    if ($comment === false) {\n        return false;\n    }\n\n    return preg_match('~[\\r\\n ]+\\* @api~', $comment) === 1;\n}\n\nfile_put_contents(OUTPUT_FILE, '');\n\nforeach (ENTRIES as $className => $options) {\n    $rendered = renderClass(new ReflectionClass($className), $options);\n    file_put_contents(OUTPUT_FILE, $rendered, FILE_APPEND);\n}\n"
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 1.234375,
          "content": "site_name: graphql-php\nsite_description: PHP implementation of the GraphQL specification\nrepo_name: webonyx/graphql-php\nrepo_url: https://github.com/webonyx/graphql-php\ntheme:\n  name: material\ndocs_dir: docs/\nmarkdown_extensions:\n  - toc:\n      permalink: true\n  - pymdownx.superfences\n  - pymdownx.highlight:\n      extend_pygments_lang:\n        - name: php\n          lang: php\n          options:\n            startinline: true\nnav:\n- About: index.md\n- Getting Started: getting-started.md\n- Concepts: concepts.md\n- Complementary Tools: complementary-tools.md\n- Schema Definition: schema-definition.md\n- Type Definitions:\n  - Introduction: type-definitions/index.md\n  - Object Types: type-definitions/object-types.md\n  - Scalars: type-definitions/scalars.md\n  - Enums: type-definitions/enums.md\n  - Lists and Non-Nulls: type-definitions/lists-and-nonnulls.md\n  - Interfaces: type-definitions/interfaces.md\n  - Unions: type-definitions/unions.md\n  - Inputs: type-definitions/inputs.md\n  - Directives: type-definitions/directives.md\n- Schema Definition Language: schema-definition-language.md\n- Executing Queries: executing-queries.md\n- Fetching Data: data-fetching.md\n- Handling Errors: error-handling.md\n- Security: security.md\n- Class Reference: class-reference.md\n"
        },
        {
          "name": "phpbench.json",
          "type": "blob",
          "size": 0.1826171875,
          "content": "{\n  \"runner.bootstrap\": \"vendor/autoload.php\",\n  \"runner.path\": \"benchmarks\",\n  \"runner.file_pattern\": \"*Bench.php\",\n  \"runner.retry_threshold\": 5,\n  \"runner.time_unit\": \"milliseconds\"\n}\n"
        },
        {
          "name": "phpstan-baseline.neon",
          "type": "blob",
          "size": 6.7490234375,
          "content": "parameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: \"#^Unable to resolve the template type TCloneable in call to method static method GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\Node\\\\:\\\\:cloneValue\\\\(\\\\)$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Language/AST/Node.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable property access on TCloneable of TNode of GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\Node\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Language/AST/Node.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable property access on GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\Node\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Language/Visitor.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable property access on GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\Node\\\\|null\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Language/Visitor.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$config of class GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Argument constructor expects array\\\\{name\\\\: string, type\\\\: \\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\)\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\), defaultValue\\\\?\\\\: mixed, description\\\\?\\\\: string\\\\|null, deprecationReason\\\\?\\\\: string\\\\|null, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InputValueDefinitionNode\\\\|null\\\\}, non\\\\-empty\\\\-array given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Type/Definition/Argument.php\n\n\t\t-\n\t\t\tmessage: \"#^Property GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\:\\\\:\\\\$interfaces \\\\(array\\\\<int, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\>\\\\) does not accept array\\\\<int, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\>\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Type/Definition/InterfaceType.php\n\n\t\t-\n\t\t\tmessage: \"#^Unable to resolve the template type T in call to method static method GraphQL\\\\\\\\Type\\\\\\\\Schema\\\\:\\\\:resolveType\\\\(\\\\)$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Type/Definition/InterfaceType.php\n\n\t\t-\n\t\t\tmessage: \"#^Property GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\:\\\\:\\\\$interfaces \\\\(array\\\\<int, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\>\\\\) does not accept array\\\\<int, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\>\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Type/Definition/ObjectType.php\n\n\t\t-\n\t\t\tmessage: \"#^Unable to resolve the template type T in call to method static method GraphQL\\\\\\\\Type\\\\\\\\Schema\\\\:\\\\:resolveType\\\\(\\\\)$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Type/Definition/ObjectType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\UnionType\\\\:\\\\:getTypes\\\\(\\\\) should return array\\\\<int, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\> but returns array\\\\<int, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\>\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Type/Definition/UnionType.php\n\n\t\t-\n\t\t\tmessage: \"#^Property GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\UnionType\\\\:\\\\:\\\\$types \\\\(array\\\\<int, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\>\\\\) does not accept array\\\\<int, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\>\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Type/Definition/UnionType.php\n\n\t\t-\n\t\t\tmessage: \"#^Unable to resolve the template type T in call to method static method GraphQL\\\\\\\\Type\\\\\\\\Schema\\\\:\\\\:resolveType\\\\(\\\\)$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Type/Definition/UnionType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method GraphQL\\\\\\\\Type\\\\\\\\Schema\\\\:\\\\:resolveType\\\\(\\\\) should return T of GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type but returns \\\\(callable&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\|T of GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Type/Schema.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable property access on GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\ArgumentNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\BooleanValueNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\DirectiveDefinitionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\DirectiveNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\DocumentNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\EnumTypeDefinitionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\EnumTypeExtensionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\EnumValueDefinitionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\EnumValueNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\FieldDefinitionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\FieldNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\FloatValueNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\FragmentDefinitionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\FragmentSpreadNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InlineFragmentNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InputObjectTypeDefinitionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InputObjectTypeExtensionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InputValueDefinitionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InterfaceTypeDefinitionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InterfaceTypeExtensionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\IntValueNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\ListTypeNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\ListValueNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\NamedTypeNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\NameNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\NonNullTypeNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\NullValueNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\ObjectFieldNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\ObjectTypeDefinitionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\ObjectTypeExtensionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\ObjectValueNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\OperationDefinitionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\OperationTypeDefinitionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\ScalarTypeDefinitionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\ScalarTypeExtensionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\SchemaDefinitionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\SelectionSetNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\StringValueNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\UnionTypeDefinitionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\UnionTypeExtensionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\VariableDefinitionNode\\\\|GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\VariableNode\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Utils/AST.php\n\n\t\t-\n\t\t\tmessage: \"#^Variable property access on mixed\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Utils/AST.php\n\n\t\t-\n\t\t\tmessage: \"#^Method GraphQL\\\\\\\\Validator\\\\\\\\Rules\\\\\\\\KnownDirectives\\\\:\\\\:getDirectiveLocationForASTPath\\\\(\\\\) has parameter \\\\$ancestors with generic class GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\NodeList but does not specify its types\\\\: T$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Validator/Rules/KnownDirectives.php\n\n\t\t-\n\t\t\tmessage: \"#^Method GraphQL\\\\\\\\Validator\\\\\\\\Rules\\\\\\\\OverlappingFieldsCanBeMerged\\\\:\\\\:getFieldsAndFragmentNames\\\\(\\\\) should return array\\\\{array\\\\<string, array\\\\<int, array\\\\{GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type, GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\FieldNode, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\FieldDefinition\\\\|null\\\\}\\\\>\\\\>, array\\\\<int, string\\\\>\\\\} but returns array\\\\{mixed, array\\\\<int, int\\\\|string\\\\>\\\\}\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Validator/Rules/OverlappingFieldsCanBeMerged.php\n\n\t\t-\n\t\t\tmessage: \"#^SplObjectStorage\\\\<GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\SelectionSetNode, array\\\\{array\\\\<string, array\\\\<int, array\\\\{GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type, GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\FieldNode, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\FieldDefinition\\\\|null\\\\}\\\\>\\\\>, array\\\\<int, string\\\\>\\\\}\\\\> does not accept array\\\\<int, mixed\\\\>\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Validator/Rules/OverlappingFieldsCanBeMerged.php"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 2.7197265625,
          "content": "parameters:\n    # TODO increase to max\n    level: 8\n\n    paths:\n        - benchmarks\n        - examples\n        - generate-class-reference.php\n        - src\n        - tests\n\n    exceptions:\n        check:\n            missingCheckedExceptionInThrows: true\n            tooWideThrowType: true\n\n    ignoreErrors:\n        # Since this is a library that is supposed to be flexible, we don't\n        # want to lock down every possible extension point.\n        - \"~Unsafe usage of new static\\\\(\\\\)~\"\n\n        # This class uses magic methods to reduce a whole lot of boilerplate required to\n        # allow partial parsing of language fragments.\n        - \"~Variable method call on GraphQL\\\\\\\\Language\\\\\\\\Parser\\\\.~\"\n\n        # Useful/necessary when dealing with arbitrary user data\n        - message: \"~Variable property access on object~\"\n          path: src/Utils/Utils.php\n          count: 2\n\n        # PHPStan does not play nicely with markTestSkipped()\n        - message: \"~Unreachable statement - code above always terminates~\"\n          path: tests\n        - message: \"#^Property GraphQL\\\\\\\\Tests\\\\\\\\Type\\\\\\\\SchemaTest\\\\:\\\\:\\\\$implementingType is never read, only written\\\\.$#\"\n          path: tests\n\n        # Cannot satisfy input covariance\n        - '~(expects|should return) array<string, array<string, callable\\(GraphQL\\\\Language\\\\AST\\\\Node\\): \\(GraphQL\\\\Language\\\\VisitorOperation\\|void\\|false\\|null\\)>\\|\\(callable\\(GraphQL\\\\Language\\\\AST\\\\Node\\): \\(GraphQL\\\\Language\\\\VisitorOperation\\|void\\|false\\|null\\)\\)>(,| but returns)?~'\n\n        # No need to have @throws in methods that are never called\n        ## PHPUnit\n        - message: \"~Method GraphQL\\\\\\\\Tests\\\\\\\\.+?Test(CaseBase)?::(test.+?|setUp(BeforeClass)?|tearDown)\\\\(\\\\) throws checked exception .+? but it's missing from the PHPDoc @throws tag~\"\n          path: tests\n        ## PHPBench\n        - message: \"~it's missing from the PHPDoc @throws tag~\"\n          path: benchmarks\n\nincludes:\n    - phpstan-baseline.neon\n    - phpstan/include-by-php-version.php\n\nservices:\n    - class: GraphQL\\Tests\\PhpStan\\Type\\Definition\\Type\\IsAbstractTypeStaticMethodTypeSpecifyingExtension\n      tags:\n          - phpstan.typeSpecifier.staticMethodTypeSpecifyingExtension\n\n    - class: GraphQL\\Tests\\PhpStan\\Type\\Definition\\Type\\IsCompositeTypeStaticMethodTypeSpecifyingExtension\n      tags:\n          - phpstan.typeSpecifier.staticMethodTypeSpecifyingExtension\n\n    - class: GraphQL\\Tests\\PhpStan\\Type\\Definition\\Type\\IsInputTypeStaticMethodTypeSpecifyingExtension\n      tags:\n          - phpstan.typeSpecifier.staticMethodTypeSpecifyingExtension\n\n    - class: GraphQL\\Tests\\PhpStan\\Type\\Definition\\Type\\IsOutputTypeStaticMethodTypeSpecifyingExtension\n      tags:\n          - phpstan.typeSpecifier.staticMethodTypeSpecifyingExtension\n"
        },
        {
          "name": "phpstan",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.5068359375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n         bootstrap=\"tests/bootstrap.php\">\n  <php>\n    <ini name=\"error_reporting\" value=\"E_ALL\"/>\n  </php>\n  <source>\n    <include>\n      <directory>src</directory>\n    </include>\n  </source>\n  <testsuites>\n    <testsuite name=\"webonyx/graphql-php Test Suite\">\n      <directory>tests/</directory>\n    </testsuite>\n  </testsuites>\n</phpunit>\n"
        },
        {
          "name": "rector.php",
          "type": "blob",
          "size": 3.1298828125,
          "content": "<?php declare(strict_types=1);\n\nreturn static function (Rector\\Config\\RectorConfig $rectorConfig): void {\n    $rectorConfig->sets([\n        Rector\\Set\\ValueObject\\SetList::CODE_QUALITY,\n        Rector\\Set\\ValueObject\\SetList::DEAD_CODE,\n        Rector\\PHPUnit\\Set\\PHPUnitSetList::PHPUNIT_60,\n        Rector\\PHPUnit\\Set\\PHPUnitSetList::PHPUNIT_70,\n        Rector\\PHPUnit\\Set\\PHPUnitSetList::PHPUNIT_80,\n        Rector\\PHPUnit\\Set\\PHPUnitSetList::PHPUNIT_90,\n        Rector\\PHPUnit\\Set\\PHPUnitSetList::PHPUNIT_CODE_QUALITY,\n    ]);\n    $rectorConfig->skip([\n        Rector\\CodeQuality\\Rector\\Isset_\\IssetOnPropertyObjectToPropertyExistsRector::class, // isset() is nice when moving towards typed properties\n        Rector\\CodeQuality\\Rector\\Identical\\FlipTypeControlToUseExclusiveTypeRector::class, // Unnecessarily complex with PHPStan\n        Rector\\CodeQuality\\Rector\\Concat\\JoinStringConcatRector::class => [\n            __DIR__ . '/tests', // Sometimes more readable for long strings\n        ],\n        Rector\\CodeQuality\\Rector\\ClassMethod\\LocallyCalledStaticMethodToNonStaticRector::class, // static methods are fine\n        Rector\\CodeQuality\\Rector\\Foreach_\\UnusedForeachValueToArrayKeysRector::class, // Less efficient\n        Rector\\CodeQuality\\Rector\\Switch_\\SwitchTrueToIfRector::class, // More expressive in some cases\n        Rector\\DeadCode\\Rector\\If_\\RemoveAlwaysTrueIfConditionRector::class, // Sometimes necessary to prove runtime behaviour matches defined types\n        Rector\\DeadCode\\Rector\\If_\\RemoveDeadInstanceOfRector::class, // Sometimes necessary to prove runtime behaviour matches defined types\n        Rector\\DeadCode\\Rector\\Node\\RemoveNonExistingVarAnnotationRector::class, // Sometimes false-positive\n        Rector\\DeadCode\\Rector\\Property\\RemoveUnusedPrivatePropertyRector::class, // TODO reintroduce when https://github.com/rectorphp/rector-src/pull/4491 is released\n        Rector\\PHPUnit\\CodeQuality\\Rector\\Class_\\NarrowUnusedSetUpDefinedPropertyRector::class, // Sometimes nicer for symmetry\n        Rector\\PHPUnit\\CodeQuality\\Rector\\Class_\\PreferPHPUnitThisCallRector::class, // Prefer self::\n        Rector\\PHPUnit\\CodeQuality\\Rector\\MethodCall\\AssertPropertyExistsRector::class, // Uses deprecated PHPUnit methods\n        Rector\\PHPUnit\\CodeQuality\\Rector\\MethodCall\\AssertIssetToSpecificMethodRector::class => [\n            __DIR__ . '/tests/Utils/MixedStoreTest.php', // Uses keys that are not string or int\n        ],\n        Rector\\PHPUnit\\CodeQuality\\Rector\\MethodCall\\AssertEqualsToSameRector::class => [\n            __DIR__ . '/tests/TestCaseBase.php', // Array output may differ between tested PHP versions, assertEquals smooths over this\n        ],\n        Rector\\PHPUnit\\PHPUnit60\\Rector\\ClassMethod\\AddDoesNotPerformAssertionToNonAssertingTestRector::class, // False-positive\n    ]);\n    $rectorConfig->paths([\n        __DIR__ . '/benchmarks',\n        __DIR__ . '/examples',\n        __DIR__ . '/phpstan',\n        __DIR__ . '/src',\n        __DIR__ . '/tests',\n        __DIR__ . '/.php-cs-fixer.php',\n        __DIR__ . '/generate-class-reference.php',\n        __DIR__ . '/rector.php',\n    ]);\n    $rectorConfig->phpstanConfig(__DIR__ . '/phpstan.neon');\n};\n"
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 0.666015625,
          "content": "{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n      \"config:base\"\n  ],\n  \"labels\": [\"dependencies\"],\n  \"rangeStrategy\": \"replace\",\n  \"packageRules\": [\n    {\n      \"matchPackagePatterns\": [\"phpstan\"],\n      \"automerge\": true,\n      \"automergeStrategy\": \"squash\",\n      \"groupName\": \"phpstan packages\",\n      \"groupSlug\": \"phpstan\",\n      \"rangeStrategy\": \"pin\"\n    },\n    {\n      \"matchPackageNames\": [\"phpstan/extension-installer\"],\n      \"rangeStrategy\": \"replace\"\n    },\n    {\n      \"matchPackageNames\": [\"friendsofphp/php-cs-fixer\"],\n      \"automerge\": true,\n      \"automergeStrategy\": \"squash\"\n    }\n  ],\n  \"assignees\": [\n    \"simPod\"\n  ]\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}