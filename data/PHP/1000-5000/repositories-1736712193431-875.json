{
  "metadata": {
    "timestamp": 1736712193431,
    "page": 875,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "thephpleague/color-extractor",
      "stars": 1305,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0703125,
          "content": "vendor\ncomposer.lock\n.DS_Store\n.idea\n.php_cs.cache\n.phpunit.result.cache"
        },
        {
          "name": ".php_cs",
          "type": "blob",
          "size": 0.28125,
          "content": "<?php\n\n$finder = Symfony\\Component\\Finder\\Finder::create()\n    ->files()\n    ->name('*.php')\n    ->in(array('src', 'tests'));\n\nreturn PhpCsFixer\\Config::create()\n    ->setFinder($finder)\n    ->setRules([\n        '@Symfony' => true,\n        'array_syntax' => ['syntax' => 'short'],\n    ]);"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.16015625,
          "content": "# Contributing\n\nContributions are **welcome** and will be fully **credited**.\n\nWe accept contributions via Pull Requests on [Github](https://github.com/php-loep/statsd).\n\n\n## Pull Requests\n\n- **[PSR-2 Coding Standard](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md)** - The easiest way to apply the conventions is to install [PHP Code Sniffer](http://pear.php.net/package/PHP_CodeSniffer).\n\n- **Add tests!** - Your patch won't be accepted if it doesn't have tests.\n\n- **Document any change in behaviour** - Make sure the README and any other relevant documentation are kept up-to-date.\n\n- **Consider our release cycle** - We try to follow semver. Randomly breaking public APIs is not an option.\n\n- **Create topic branches** - Don't ask us to pull from your master branch.\n\n- **One pull request per feature** - If you want to do more than one thing, send multiple pull requests.\n\n- **Send coherent history** - Make sure each individual commit in your pull request is meaningful. If you had to make multiple intermediate commits while developing, please squash them before submitting.\n\n\n## Running Tests\n\n``` bash\n$ phpunit\n```\n\n\n**Happy coding**!"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Mathieu Lechat\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.6884765625,
          "content": "ColorExtractor\n==============\n\n![Build Status](https://github.com/thephpleague/color-extractor/actions/workflows/run-tests.yml/badge.svg)\n[![Total Downloads](https://poser.pugx.org/league/color-extractor/downloads.png)](https://packagist.org/packages/league/color-extractor)\n[![Latest Stable Version](https://poser.pugx.org/league/color-extractor/v/stable.png)](https://packagist.org/packages/league/color-extractor)\n\nExtract colors from an image like a human would do.\n\n## Install\n\nVia Composer\n\n``` bash\n$ composer require league/color-extractor\n```\n\n## Usage\n\n```php\nrequire 'vendor/autoload.php';\n\nuse League\\ColorExtractor\\Color;\nuse League\\ColorExtractor\\ColorExtractor;\nuse League\\ColorExtractor\\Palette;\n\n$palette = Palette::fromFilename('./some/image.png');\n\n// $palette is an iterator on colors sorted by pixel count\nforeach($palette as $color => $count) {\n    // colors are represented by integers\n    echo Color::fromIntToHex($color), ': ', $count, \"\\n\";\n}\n\n// it offers some helpers too\n$topFive = $palette->getMostUsedColors(5);\n\n$colorCount = count($palette);\n\n$blackCount = $palette->getColorCount(Color::fromHexToInt('#000000'));\n\n\n// an extractor is built from a palette\n$extractor = new ColorExtractor($palette);\n\n// it defines an extract method which return the most “representative” colors\n$colors = $extractor->extract(5);\n\n```\n\n## Handling transparency\n\nBy default **any pixel with alpha value greater than zero will be discarded**. This is because transparent colors are not perceived\nas is. For example fully transparent black would be seen white on a white background. So if you want to take transparency into account\nwhen building a palette you have to specify this background color. You can do this with the second argument of `Palette` constructors.\nIts default value is `null`, meaning a color won't be added to the palette if its alpha component exists and is greater than zero.\n\nYou can set it as an integer representing the color, then transparent colors will be blended before addition to the palette.\n\n```php\n// we set a white background so fully transparent colors will be added as white in the palette\n// pure red #FF0000 at 50% opacity will be stored as #FF8080 as it would be perceived\n$palette = Palette::fromFilename('./some/image.png', Color::fromHexToInt('#FFFFFF'));\n```\n\n## Contributing\n\nPlease see [CONTRIBUTING](https://github.com/thephpleague/color-extractor/blob/master/CONTRIBUTING.md) for details.\n\n\n## Credits\n\n- [Mathieu Lechat](https://github.com/MatTheCat)\n- [All Contributors](https://github.com/thephpleague/color-extractor/contributors)\n\n\n## License\n\nThe MIT License (MIT). Please see [License File](https://github.com/thephpleague/color-extractor/blob/master/LICENSE) for more information.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.0673828125,
          "content": "{\n    \"name\": \"league/color-extractor\",\n    \"type\": \"library\",\n    \"description\": \"Extract colors from an image as a human would do.\",\n    \"keywords\": [\"image\", \"color\", \"extract\", \"palette\", \"human\"],\n    \"homepage\": \"https://github.com/thephpleague/color-extractor\",\n    \"license\": \"MIT\",\n    \"replace\": {\n        \"matthecat/colorextractor\": \"*\"\n    },\n    \"authors\": [\n        {\n            \"name\": \"Mathieu Lechat\",\n            \"email\": \"math.lechat@gmail.com\",\n            \"homepage\": \"http://matthecat.com\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^7.3 || ^8.0\",\n        \"ext-gd\": \"*\"\n    },\n    \"require-dev\": {\n        \"friendsofphp/php-cs-fixer\": \"~2\",\n        \"phpunit/phpunit\": \"^9.5\"\n    },\n    \"suggest\": {\n        \"ext-curl\": \"To download images from remote URLs if allow_url_fopen is disabled for security reasons\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"League\\\\ColorExtractor\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"League\\\\ColorExtractor\\\\Tests\\\\\": \"tests\"\n        }\n    }\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.4580078125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" colors=\"true\" bootstrap=\"vendor/autoload.php\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\">\n  <coverage>\n    <include>\n      <directory suffix=\".php\">src</directory>\n    </include>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"ColorExtractor Test Suite\">\n      <directory>tests</directory>\n    </testsuite>\n  </testsuites>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}