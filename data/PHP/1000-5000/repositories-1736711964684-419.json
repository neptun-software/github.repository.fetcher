{
  "metadata": {
    "timestamp": 1736711964684,
    "page": 419,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "symfony/property-info",
      "stars": 2197,
      "defaultBranch": "7.2",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.072265625,
          "content": "/Tests export-ignore\n/phpunit.xml.dist export-ignore\n/.git* export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "vendor/\ncomposer.lock\nphpunit.xml\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.87890625,
          "content": "CHANGELOG\n=========\n\n7.1\n---\n\n * Introduce `PropertyDocBlockExtractorInterface` to extract a property's doc block\n * Restrict access to `PhpStanExtractor` based on visibility\n * Add `PropertyTypeExtractorInterface::getType()` as experimental\n\n6.4\n---\n\n * Make properties writable when a setter in camelCase exists, similar to the camelCase getter\n\n6.1\n---\n\n * Add support for phpDocumentor and PHPStan pseudo-types\n * Add PHP 8.0 promoted properties `@param` mutation support to `PhpDocExtractor`\n * Add PHP 8.0 promoted properties `@param` mutation support to `PhpStanExtractor`\n\n6.0\n---\n\n * Remove the `Type::getCollectionKeyType()` and `Type::getCollectionValueType()` methods, use `Type::getCollectionKeyTypes()` and `Type::getCollectionValueTypes()` instead\n * Remove the `enable_magic_call_extraction` context option in `ReflectionExtractor::getWriteInfo()` and `ReflectionExtractor::getReadInfo()` in favor of `enable_magic_methods_extraction`\n\n5.4\n---\n\n * Add PhpStanExtractor\n\n5.3\n---\n\n * Add support for multiple types for collection keys & values\n * Deprecate the `Type::getCollectionKeyType()` and `Type::getCollectionValueType()` methods, use `Type::getCollectionKeyTypes()` and `Type::getCollectionValueTypes()` instead\n\n5.2.0\n-----\n\n * deprecated the `enable_magic_call_extraction` context option in `ReflectionExtractor::getWriteInfo()` and `ReflectionExtractor::getReadInfo()` in favor of `enable_magic_methods_extraction`\n\n5.1.0\n-----\n\n * Add support for extracting accessor and mutator via PHP Reflection\n\n4.3.0\n-----\n\n * Added the ability to extract private and protected properties and methods on `ReflectionExtractor`\n * Added the ability to extract property type based on its initial value\n\n4.2.0\n-----\n\n * added `PropertyInitializableExtractorInterface` to test if a property can be initialized through the constructor (implemented by `ReflectionExtractor`)\n\n3.3.0\n-----\n\n * Added `PropertyInfoPass`\n"
        },
        {
          "name": "DependencyInjection",
          "type": "tree",
          "content": null
        },
        {
          "name": "Extractor",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2015-present Fabien Potencier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "PhpStan",
          "type": "tree",
          "content": null
        },
        {
          "name": "PropertyAccessExtractorInterface.php",
          "type": "blob",
          "size": 0.7080078125,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\PropertyInfo;\n\n/**\n * Guesses if the property can be accessed or mutated.\n *\n * @author Kévin Dunglas <dunglas@gmail.com>\n */\ninterface PropertyAccessExtractorInterface\n{\n    /**\n     * Is the property readable?\n     */\n    public function isReadable(string $class, string $property, array $context = []): ?bool;\n\n    /**\n     * Is the property writable?\n     */\n    public function isWritable(string $class, string $property, array $context = []): ?bool;\n}\n"
        },
        {
          "name": "PropertyDescriptionExtractorInterface.php",
          "type": "blob",
          "size": 0.7666015625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\PropertyInfo;\n\n/**\n * Guesses the property's human readable description.\n *\n * @author Kévin Dunglas <dunglas@gmail.com>\n */\ninterface PropertyDescriptionExtractorInterface\n{\n    /**\n     * Gets the short description of the property.\n     */\n    public function getShortDescription(string $class, string $property, array $context = []): ?string;\n\n    /**\n     * Gets the long description of the property.\n     */\n    public function getLongDescription(string $class, string $property, array $context = []): ?string;\n}\n"
        },
        {
          "name": "PropertyDocBlockExtractorInterface.php",
          "type": "blob",
          "size": 0.9609375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\PropertyInfo;\n\nuse phpDocumentor\\Reflection\\DocBlock;\n\n/**\n * Extract a property's doc block.\n *\n * A property's doc block may be located on a constructor promoted argument, on\n * the property or on a mutator for that property.\n *\n * @author Tobias Nyholm <tobias.nyholm@gmail.com>\n */\ninterface PropertyDocBlockExtractorInterface\n{\n    /**\n     * Gets the first available doc block for a property. It finds the doc block\n     * by the following priority:\n     *  - constructor promoted argument\n     *  - the class property\n     *  - a mutator method for that property\n     *\n     * If no doc block is found, it will return null.\n     */\n    public function getDocBlock(string $class, string $property): ?DocBlock;\n}\n"
        },
        {
          "name": "PropertyInfoCacheExtractor.php",
          "type": "blob",
          "size": 3.2666015625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\PropertyInfo;\n\nuse Psr\\Cache\\CacheItemPoolInterface;\nuse Symfony\\Component\\TypeInfo\\Type;\n\n/**\n * Adds a PSR-6 cache layer on top of an extractor.\n *\n * @author Kévin Dunglas <dunglas@gmail.com>\n *\n * @final\n */\nclass PropertyInfoCacheExtractor implements PropertyInfoExtractorInterface, PropertyInitializableExtractorInterface\n{\n    private array $arrayCache = [];\n\n    public function __construct(\n        private readonly PropertyInfoExtractorInterface $propertyInfoExtractor,\n        private readonly CacheItemPoolInterface $cacheItemPool,\n    ) {\n    }\n\n    public function isReadable(string $class, string $property, array $context = []): ?bool\n    {\n        return $this->extract('isReadable', [$class, $property, $context]);\n    }\n\n    public function isWritable(string $class, string $property, array $context = []): ?bool\n    {\n        return $this->extract('isWritable', [$class, $property, $context]);\n    }\n\n    public function getShortDescription(string $class, string $property, array $context = []): ?string\n    {\n        return $this->extract('getShortDescription', [$class, $property, $context]);\n    }\n\n    public function getLongDescription(string $class, string $property, array $context = []): ?string\n    {\n        return $this->extract('getLongDescription', [$class, $property, $context]);\n    }\n\n    public function getProperties(string $class, array $context = []): ?array\n    {\n        return $this->extract('getProperties', [$class, $context]);\n    }\n\n    public function getType(string $class, string $property, array $context = []): ?Type\n    {\n        return $this->extract('getType', [$class, $property, $context]);\n    }\n\n    public function getTypes(string $class, string $property, array $context = []): ?array\n    {\n        return $this->extract('getTypes', [$class, $property, $context]);\n    }\n\n    public function isInitializable(string $class, string $property, array $context = []): ?bool\n    {\n        return $this->extract('isInitializable', [$class, $property, $context]);\n    }\n\n    /**\n     * Retrieves the cached data if applicable or delegates to the decorated extractor.\n     */\n    private function extract(string $method, array $arguments): mixed\n    {\n        try {\n            $serializedArguments = serialize($arguments);\n        } catch (\\Exception) {\n            // If arguments are not serializable, skip the cache\n            return $this->propertyInfoExtractor->{$method}(...$arguments);\n        }\n\n        // Calling rawurlencode escapes special characters not allowed in PSR-6's keys\n        $key = rawurlencode($method.'.'.$serializedArguments);\n\n        if (\\array_key_exists($key, $this->arrayCache)) {\n            return $this->arrayCache[$key];\n        }\n\n        $item = $this->cacheItemPool->getItem($key);\n\n        if ($item->isHit()) {\n            return $this->arrayCache[$key] = $item->get();\n        }\n\n        $value = $this->propertyInfoExtractor->{$method}(...$arguments);\n        $item->set($value);\n        $this->cacheItemPool->save($item);\n\n        return $this->arrayCache[$key] = $value;\n    }\n}\n"
        },
        {
          "name": "PropertyInfoExtractor.php",
          "type": "blob",
          "size": 3.4765625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\PropertyInfo;\n\nuse Symfony\\Component\\TypeInfo\\Type;\n\n/**\n * Default {@see PropertyInfoExtractorInterface} implementation.\n *\n * @author Kévin Dunglas <dunglas@gmail.com>\n *\n * @final\n */\nclass PropertyInfoExtractor implements PropertyInfoExtractorInterface, PropertyInitializableExtractorInterface\n{\n    /**\n     * @param iterable<mixed, PropertyListExtractorInterface>          $listExtractors\n     * @param iterable<mixed, PropertyTypeExtractorInterface>          $typeExtractors\n     * @param iterable<mixed, PropertyDescriptionExtractorInterface>   $descriptionExtractors\n     * @param iterable<mixed, PropertyAccessExtractorInterface>        $accessExtractors\n     * @param iterable<mixed, PropertyInitializableExtractorInterface> $initializableExtractors\n     */\n    public function __construct(\n        private readonly iterable $listExtractors = [],\n        private readonly iterable $typeExtractors = [],\n        private readonly iterable $descriptionExtractors = [],\n        private readonly iterable $accessExtractors = [],\n        private readonly iterable $initializableExtractors = [],\n    ) {\n    }\n\n    public function getProperties(string $class, array $context = []): ?array\n    {\n        return $this->extract($this->listExtractors, 'getProperties', [$class, $context]);\n    }\n\n    public function getShortDescription(string $class, string $property, array $context = []): ?string\n    {\n        return $this->extract($this->descriptionExtractors, 'getShortDescription', [$class, $property, $context]);\n    }\n\n    public function getLongDescription(string $class, string $property, array $context = []): ?string\n    {\n        return $this->extract($this->descriptionExtractors, 'getLongDescription', [$class, $property, $context]);\n    }\n\n    public function getType(string $class, string $property, array $context = []): ?Type\n    {\n        return $this->extract($this->typeExtractors, 'getType', [$class, $property, $context]);\n    }\n\n    public function getTypes(string $class, string $property, array $context = []): ?array\n    {\n        return $this->extract($this->typeExtractors, 'getTypes', [$class, $property, $context]);\n    }\n\n    public function isReadable(string $class, string $property, array $context = []): ?bool\n    {\n        return $this->extract($this->accessExtractors, 'isReadable', [$class, $property, $context]);\n    }\n\n    public function isWritable(string $class, string $property, array $context = []): ?bool\n    {\n        return $this->extract($this->accessExtractors, 'isWritable', [$class, $property, $context]);\n    }\n\n    public function isInitializable(string $class, string $property, array $context = []): ?bool\n    {\n        return $this->extract($this->initializableExtractors, 'isInitializable', [$class, $property, $context]);\n    }\n\n    /**\n     * Iterates over registered extractors and return the first value found.\n     *\n     * @param iterable<mixed, object> $extractors\n     * @param list<mixed>             $arguments\n     */\n    private function extract(iterable $extractors, string $method, array $arguments): mixed\n    {\n        foreach ($extractors as $extractor) {\n            if (null !== $value = $extractor->{$method}(...$arguments)) {\n                return $value;\n            }\n        }\n\n        return null;\n    }\n}\n"
        },
        {
          "name": "PropertyInfoExtractorInterface.php",
          "type": "blob",
          "size": 0.623046875,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\PropertyInfo;\n\n/**\n * Gets info about PHP class properties.\n *\n * A convenient interface inheriting all specific info interfaces.\n *\n * @author Kévin Dunglas <dunglas@gmail.com>\n */\ninterface PropertyInfoExtractorInterface extends PropertyTypeExtractorInterface, PropertyDescriptionExtractorInterface, PropertyAccessExtractorInterface, PropertyListExtractorInterface\n{\n}\n"
        },
        {
          "name": "PropertyInitializableExtractorInterface.php",
          "type": "blob",
          "size": 0.673828125,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\PropertyInfo;\n\n/**\n * Guesses if the property can be initialized through the constructor.\n *\n * @author Kévin Dunglas <dunglas@gmail.com>\n */\ninterface PropertyInitializableExtractorInterface\n{\n    /**\n     * Is the property initializable? Returns true if a constructor's parameter matches the given property name.\n     */\n    public function isInitializable(string $class, string $property, array $context = []): ?bool;\n}\n"
        },
        {
          "name": "PropertyListExtractorInterface.php",
          "type": "blob",
          "size": 0.630859375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\PropertyInfo;\n\n/**\n * Extracts the list of properties available for the given class.\n *\n * @author Kévin Dunglas <dunglas@gmail.com>\n */\ninterface PropertyListExtractorInterface\n{\n    /**\n     * Gets the list of properties available for the given class.\n     *\n     * @return string[]|null\n     */\n    public function getProperties(string $class, array $context = []): ?array;\n}\n"
        },
        {
          "name": "PropertyReadInfo.php",
          "type": "blob",
          "size": 1.525390625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\PropertyInfo;\n\n/**\n * The property read info tells how a property can be read.\n *\n * @author Joel Wurtz <jwurtz@jolicode.com>\n */\nfinal class PropertyReadInfo\n{\n    public const TYPE_METHOD = 'method';\n    public const TYPE_PROPERTY = 'property';\n\n    public const VISIBILITY_PUBLIC = 'public';\n    public const VISIBILITY_PROTECTED = 'protected';\n    public const VISIBILITY_PRIVATE = 'private';\n\n    public function __construct(\n        private readonly string $type,\n        private readonly string $name,\n        private readonly string $visibility,\n        private readonly bool $static,\n        private readonly bool $byRef,\n    ) {\n    }\n\n    /**\n     * Get type of access.\n     */\n    public function getType(): string\n    {\n        return $this->type;\n    }\n\n    /**\n     * Get name of the access, which can be a method name or a property name, depending on the type.\n     */\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    public function getVisibility(): string\n    {\n        return $this->visibility;\n    }\n\n    public function isStatic(): bool\n    {\n        return $this->static;\n    }\n\n    /**\n     * Whether this accessor can be accessed by reference.\n     */\n    public function canBeReference(): bool\n    {\n        return $this->byRef;\n    }\n}\n"
        },
        {
          "name": "PropertyReadInfoExtractorInterface.php",
          "type": "blob",
          "size": 0.6171875,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\PropertyInfo;\n\n/**\n * Extract read information for the property of a class.\n *\n * @author Joel Wurtz <jwurtz@jolicode.com>\n */\ninterface PropertyReadInfoExtractorInterface\n{\n    /**\n     * Get read information object for a given property of a class.\n     */\n    public function getReadInfo(string $class, string $property, array $context = []): ?PropertyReadInfo;\n}\n"
        },
        {
          "name": "PropertyTypeExtractorInterface.php",
          "type": "blob",
          "size": 0.75390625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\PropertyInfo;\n\nuse Symfony\\Component\\PropertyInfo\\Type as LegacyType;\nuse Symfony\\Component\\TypeInfo\\Type;\n\n/**\n * Type Extractor Interface.\n *\n * @author Kévin Dunglas <dunglas@gmail.com>\n *\n * @method Type|null getType(string $class, string $property, array $context = [])\n */\ninterface PropertyTypeExtractorInterface\n{\n    /**\n     * Gets types of a property.\n     *\n     * @return LegacyType[]|null\n     */\n    public function getTypes(string $class, string $property, array $context = []): ?array;\n}\n"
        },
        {
          "name": "PropertyWriteInfo.php",
          "type": "blob",
          "size": 2.99609375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\PropertyInfo;\n\n/**\n * The write mutator defines how a property can be written.\n *\n * @author Joel Wurtz <jwurtz@jolicode.com>\n */\nfinal class PropertyWriteInfo\n{\n    public const TYPE_NONE = 'none';\n    public const TYPE_METHOD = 'method';\n    public const TYPE_PROPERTY = 'property';\n    public const TYPE_ADDER_AND_REMOVER = 'adder_and_remover';\n    public const TYPE_CONSTRUCTOR = 'constructor';\n\n    public const VISIBILITY_PUBLIC = 'public';\n    public const VISIBILITY_PROTECTED = 'protected';\n    public const VISIBILITY_PRIVATE = 'private';\n\n    private ?self $adderInfo = null;\n    private ?self $removerInfo = null;\n    private array $errors = [];\n\n    public function __construct(\n        private readonly string $type = self::TYPE_NONE,\n        private readonly ?string $name = null,\n        private readonly ?string $visibility = null,\n        private readonly ?bool $static = null,\n    ) {\n    }\n\n    public function getType(): string\n    {\n        return $this->type;\n    }\n\n    public function getName(): string\n    {\n        if (null === $this->name) {\n            throw new \\LogicException(\"Calling getName() when having a mutator of type {$this->type} is not tolerated.\");\n        }\n\n        return $this->name;\n    }\n\n    public function setAdderInfo(self $adderInfo): void\n    {\n        $this->adderInfo = $adderInfo;\n    }\n\n    public function getAdderInfo(): self\n    {\n        if (null === $this->adderInfo) {\n            throw new \\LogicException(\"Calling getAdderInfo() when having a mutator of type {$this->type} is not tolerated.\");\n        }\n\n        return $this->adderInfo;\n    }\n\n    public function setRemoverInfo(self $removerInfo): void\n    {\n        $this->removerInfo = $removerInfo;\n    }\n\n    public function getRemoverInfo(): self\n    {\n        if (null === $this->removerInfo) {\n            throw new \\LogicException(\"Calling getRemoverInfo() when having a mutator of type {$this->type} is not tolerated.\");\n        }\n\n        return $this->removerInfo;\n    }\n\n    public function getVisibility(): string\n    {\n        if (null === $this->visibility) {\n            throw new \\LogicException(\"Calling getVisibility() when having a mutator of type {$this->type} is not tolerated.\");\n        }\n\n        return $this->visibility;\n    }\n\n    public function isStatic(): bool\n    {\n        if (null === $this->static) {\n            throw new \\LogicException(\"Calling isStatic() when having a mutator of type {$this->type} is not tolerated.\");\n        }\n\n        return $this->static;\n    }\n\n    public function setErrors(array $errors): void\n    {\n        $this->errors = $errors;\n    }\n\n    public function getErrors(): array\n    {\n        return $this->errors;\n    }\n\n    public function hasErrors(): bool\n    {\n        return (bool) \\count($this->errors);\n    }\n}\n"
        },
        {
          "name": "PropertyWriteInfoExtractorInterface.php",
          "type": "blob",
          "size": 0.6220703125,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\PropertyInfo;\n\n/**\n * Extract write information for the property of a class.\n *\n * @author Joel Wurtz <jwurtz@jolicode.com>\n */\ninterface PropertyWriteInfoExtractorInterface\n{\n    /**\n     * Get write information object for a given property of a class.\n     */\n    public function getWriteInfo(string $class, string $property, array $context = []): ?PropertyWriteInfo;\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.5283203125,
          "content": "PropertyInfo Component\n======================\n\nThe PropertyInfo component extracts information about PHP class' properties\nusing metadata of popular sources.\n\nResources\n---------\n\n * [Documentation](https://symfony.com/doc/current/components/property_info.html)\n * [Contributing](https://symfony.com/doc/current/contributing/index.html)\n * [Report issues](https://github.com/symfony/symfony/issues) and\n   [send Pull Requests](https://github.com/symfony/symfony/pulls)\n   in the [main Symfony repository](https://github.com/symfony/symfony)\n"
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "Type.php",
          "type": "blob",
          "size": 4.4443359375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\PropertyInfo;\n\n/**\n * Type value object (immutable).\n *\n * @author Kévin Dunglas <dunglas@gmail.com>\n *\n * @final\n */\nclass Type\n{\n    public const BUILTIN_TYPE_INT = 'int';\n    public const BUILTIN_TYPE_FLOAT = 'float';\n    public const BUILTIN_TYPE_STRING = 'string';\n    public const BUILTIN_TYPE_BOOL = 'bool';\n    public const BUILTIN_TYPE_RESOURCE = 'resource';\n    public const BUILTIN_TYPE_OBJECT = 'object';\n    public const BUILTIN_TYPE_ARRAY = 'array';\n    public const BUILTIN_TYPE_NULL = 'null';\n    public const BUILTIN_TYPE_FALSE = 'false';\n    public const BUILTIN_TYPE_TRUE = 'true';\n    public const BUILTIN_TYPE_CALLABLE = 'callable';\n    public const BUILTIN_TYPE_ITERABLE = 'iterable';\n\n    /**\n     * List of PHP builtin types.\n     *\n     * @var string[]\n     */\n    public static array $builtinTypes = [\n        self::BUILTIN_TYPE_INT,\n        self::BUILTIN_TYPE_FLOAT,\n        self::BUILTIN_TYPE_STRING,\n        self::BUILTIN_TYPE_BOOL,\n        self::BUILTIN_TYPE_RESOURCE,\n        self::BUILTIN_TYPE_OBJECT,\n        self::BUILTIN_TYPE_ARRAY,\n        self::BUILTIN_TYPE_CALLABLE,\n        self::BUILTIN_TYPE_FALSE,\n        self::BUILTIN_TYPE_TRUE,\n        self::BUILTIN_TYPE_NULL,\n        self::BUILTIN_TYPE_ITERABLE,\n    ];\n\n    /**\n     * List of PHP builtin collection types.\n     *\n     * @var string[]\n     */\n    public static array $builtinCollectionTypes = [\n        self::BUILTIN_TYPE_ARRAY,\n        self::BUILTIN_TYPE_ITERABLE,\n    ];\n\n    private array $collectionKeyType;\n    private array $collectionValueType;\n\n    /**\n     * @param Type[]|Type|null $collectionKeyType\n     * @param Type[]|Type|null $collectionValueType\n     *\n     * @throws \\InvalidArgumentException\n     */\n    public function __construct(\n        private string $builtinType,\n        private bool $nullable = false,\n        private ?string $class = null,\n        private bool $collection = false,\n        array|self|null $collectionKeyType = null,\n        array|self|null $collectionValueType = null,\n    ) {\n        if (!\\in_array($builtinType, self::$builtinTypes, true)) {\n            throw new \\InvalidArgumentException(\\sprintf('\"%s\" is not a valid PHP type.', $builtinType));\n        }\n\n        $this->collectionKeyType = $this->validateCollectionArgument($collectionKeyType, 5, '$collectionKeyType') ?? [];\n        $this->collectionValueType = $this->validateCollectionArgument($collectionValueType, 6, '$collectionValueType') ?? [];\n    }\n\n    private function validateCollectionArgument(array|self|null $collectionArgument, int $argumentIndex, string $argumentName): ?array\n    {\n        if (null === $collectionArgument) {\n            return null;\n        }\n\n        if (\\is_array($collectionArgument)) {\n            foreach ($collectionArgument as $type) {\n                if (!$type instanceof self) {\n                    throw new \\TypeError(\\sprintf('\"%s()\": Argument #%d (%s) must be of type \"%s[]\", \"%s\" or \"null\", array value \"%s\" given.', __METHOD__, $argumentIndex, $argumentName, self::class, self::class, get_debug_type($collectionArgument)));\n                }\n            }\n\n            return $collectionArgument;\n        }\n\n        return [$collectionArgument];\n    }\n\n    /**\n     * Gets built-in type.\n     *\n     * Can be bool, int, float, string, array, object, resource, null, callback or iterable.\n     */\n    public function getBuiltinType(): string\n    {\n        return $this->builtinType;\n    }\n\n    public function isNullable(): bool\n    {\n        return $this->nullable;\n    }\n\n    /**\n     * Gets the class name.\n     *\n     * Only applicable if the built-in type is object.\n     */\n    public function getClassName(): ?string\n    {\n        return $this->class;\n    }\n\n    public function isCollection(): bool\n    {\n        return $this->collection;\n    }\n\n    /**\n     * Gets collection key types.\n     *\n     * Only applicable for a collection type.\n     *\n     * @return Type[]\n     */\n    public function getCollectionKeyTypes(): array\n    {\n        return $this->collectionKeyType;\n    }\n\n    /**\n     * Gets collection value types.\n     *\n     * Only applicable for a collection type.\n     *\n     * @return Type[]\n     */\n    public function getCollectionValueTypes(): array\n    {\n        return $this->collectionValueType;\n    }\n}\n"
        },
        {
          "name": "Util",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.4013671875,
          "content": "{\n    \"name\": \"symfony/property-info\",\n    \"type\": \"library\",\n    \"description\": \"Extracts information about PHP class' properties using metadata of popular sources\",\n    \"keywords\": [\n        \"property\",\n        \"type\",\n        \"phpdoc\",\n        \"symfony\",\n        \"validator\",\n        \"doctrine\"\n    ],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Kévin Dunglas\",\n            \"email\": \"dunglas@gmail.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.2\",\n        \"symfony/string\": \"^6.4|^7.0\",\n        \"symfony/type-info\": \"~7.1.9|^7.2.2\"\n    },\n    \"require-dev\": {\n        \"symfony/serializer\": \"^6.4|^7.0\",\n        \"symfony/cache\": \"^6.4|^7.0\",\n        \"symfony/dependency-injection\": \"^6.4|^7.0\",\n        \"phpdocumentor/reflection-docblock\": \"^5.2\",\n        \"phpstan/phpdoc-parser\": \"^1.0|^2.0\"\n    },\n    \"conflict\": {\n        \"phpdocumentor/reflection-docblock\": \"<5.2\",\n        \"phpdocumentor/type-resolver\": \"<1.5.1\",\n        \"symfony/dependency-injection\": \"<6.4\",\n        \"symfony/cache\": \"<6.4\",\n        \"symfony/serializer\": \"<6.4\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Component\\\\PropertyInfo\\\\\": \"\" },\n        \"exclude-from-classmap\": [\n            \"/Tests/\"\n        ]\n    },\n    \"minimum-stability\": \"dev\"\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.8583984375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"http://schema.phpunit.de/9.3/phpunit.xsd\"\n         backupGlobals=\"false\"\n         colors=\"true\"\n         bootstrap=\"vendor/autoload.php\"\n         failOnRisky=\"true\"\n         failOnWarning=\"true\"\n        >\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\" />\n    </php>\n\n    <testsuites>\n        <testsuite name=\"Symfony Property Info Component Test Suite\">\n            <directory>./Tests/</directory>\n        </testsuite>\n    </testsuites>\n\n    <coverage>\n        <include>\n            <directory>./</directory>\n        </include>\n        <exclude>\n            <directory>./Resources</directory>\n            <directory>./Tests</directory>\n            <directory>./vendor</directory>\n        </exclude>\n    </coverage>\n</phpunit>\n"
        }
      ]
    }
  ]
}