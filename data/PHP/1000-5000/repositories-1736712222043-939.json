{
  "metadata": {
    "timestamp": 1736712222043,
    "page": 939,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "JosephSilber/page-cache",
      "stars": 1218,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.205078125,
          "content": "/tests          export-ignore\n/.github        export-ignore\n/.gitattributes export-ignore\n/.gitignore     export-ignore\n/.travis.yml    export-ignore\n/phpunit.xml    export-ignore\n/readme.md      export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.056640625,
          "content": "vendor\ncomposer.lock\n.phpunit.result.cache\n.phpunit.cache\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0517578125,
          "content": "The MIT License (MIT)\n\nCopyright (c) <Joseph Silber>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.3388671875,
          "content": "{\n    \"name\": \"silber/page-cache\",\n    \"description\": \"Caches responses as static files on disk for lightning fast page loads.\",\n    \"keywords\": [\n        \"laravel\",\n        \"cache\"\n    ],\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Joseph Silber\",\n            \"email\": \"contact@josephsilber.com\"\n        }\n    ],\n    \"autoload\": {\n        \"psr-4\": {\n            \"Silber\\\\PageCache\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Silber\\\\PageCache\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"require\": {\n        \"php\": \"^8.2\",\n        \"illuminate/contracts\": \"^11.0\",\n        \"illuminate/filesystem\": \"^11.0\",\n        \"symfony/http-foundation\": \"^7.0\"\n    },\n    \"require-dev\": {\n        \"illuminate/container\": \"^11.0\",\n        \"laravel/pint\": \"^1.14\",\n        \"mockery/mockery\": \"^1.6.9\",\n        \"pestphp/pest\": \"3.x-dev\",\n        \"phpunit/phpunit\": \"^11.0\",\n        \"symfony/var-dumper\": \"^7.0\"\n    },\n    \"suggest\": {\n        \"illuminate/console\": \"Allows clearing the cache via artisan\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"Silber\\\\PageCache\\\\LaravelServiceProvider\"\n            ]\n        }\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"pestphp/pest-plugin\": true\n        }\n    }\n}\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.49609375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" backupGlobals=\"false\" bootstrap=\"vendor/autoload.php\" colors=\"true\" processIsolation=\"false\" stopOnFailure=\"true\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/11.0/phpunit.xsd\" cacheDirectory=\".phpunit.cache\" backupStaticProperties=\"false\">\n  <testsuites>\n    <testsuite name=\"Package Test Suite\">\n      <directory suffix=\".php\">./tests/</directory>\n    </testsuite>\n  </testsuites>\n</phpunit>\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 7.9658203125,
          "content": "# Laravel Page Cache\n\n[![Build Status][icon-build]][link-build]\n[![Latest Stable Version][icon-version]][link-packagist]\n[![Total Downloads][icon-downloads]][link-downloads]\n[![License][icon-license]](LICENSE.txt)\n\nThis package allows you to easily cache responses as static files on disk for lightning fast page loads.\n\n- [Introduction](#introduction)\n- [Installation](#installation)\n  - [Service Provider](#service-provider)\n  - [Middleware](#middleware)\n  - [URL rewriting](#url-rewriting)\n  - [Ignoring the cached files](#ignoring-the-cached-files)\n- [Usage](#usage)\n  - [Using the middleware](#using-the-middleware)\n  - [Clearing the cache](#clearing-the-cache)\n  - [Customizing what to cache](#customizing-what-to-cache)\n- [License](#license)\n\n---\n\n## Introduction\n\nWhile static site builders such as [Jekyll](https://jekyllrb.com/) and [Jigsaw](https://jigsaw.tighten.co/) are extremely popular these days, dynamic PHP sites still offer a lot of value even for a site that is mostly static. A proper PHP site allows you to easily add dynamic functionality wherever needed, and also means that there's no build step involved in pushing updates to the site.\n\nThat said, for truly static pages on a site, there really is no reason to have to boot up a full PHP app just to serve a static page. Serving a simple HTML page from disk is infinitely faster and less taxing on the server.\n\nThe solution? Full page caching.\n\nUsing the middleware included in this package, you can selectively cache the response to disk for any given request. Subsequent calls to the same page will be served directly as a static HTML page!\n\n## Installation\n\n> **Note**: The current version of Page Cache requires PHP 8.2+ and Laravel 11+.\n>\n> If you're on Laravel v5-v10, use [Page Cache v1.0.9](https://github.com/JosephSilber/page-cache/tree/v1.0.9).\n\nInstall the `page-cache` package with composer:\n\n```\n$ composer require silber/page-cache\n```\n\n### Middleware\n\nOpen `app/Http/Kernel.php` and add a new item to the `web` middleware group:\n\n```php\nprotected $middlewareGroups = [\n    'web' => [\n        \\Silber\\PageCache\\Middleware\\CacheResponse::class,\n        /* ... keep the existing middleware here */\n    ],\n];\n```\n\nThe middleware is smart enough to only cache responses with a 200 HTTP status code, and only for GET requests.\n\nIf you want to selectively cache only specific requests to your site, you should instead add a new mapping to the `middlewareAliases` array:\n\n```php\nprotected $middlewareAliases = [\n    'page-cache' => \\Silber\\PageCache\\Middleware\\CacheResponse::class,\n    /* ... keep the existing mappings here */\n];\n```\n\nOnce registered, you can then [use this middleware on individual routes](#using-the-middleware).\n\n### URL rewriting\n\nIn order to serve the static files directly once they've been cached, you need to properly configure your web server to check for those static files.\n\n- **For nginx:**\n\n    Update your `location` block's `try_files` directive to include a check in the `page-cache` directory:\n\n    ```nginxconf\n    location = / {\n        try_files /page-cache/pc__index__pc.html /index.php?$query_string;\n    }\n\n    location / {\n        try_files $uri $uri/ /page-cache/$uri.html /page-cache/$uri.json /page-cache/$uri.xml /index.php?$query_string;\n    }\n    ```\n\n- **For apache:**\n\n    Open `public/.htaccess` and add the following before the block labeled `Handle Front Controller`:\n\n    ```apacheconf\n    # Serve Cached Page If Available...\n    RewriteCond %{REQUEST_URI} ^/?$\n    RewriteCond %{DOCUMENT_ROOT}/page-cache/pc__index__pc.html -f\n    RewriteRule .? page-cache/pc__index__pc.html [L]\n    RewriteCond %{DOCUMENT_ROOT}/page-cache%{REQUEST_URI}.html -f\n    RewriteRule . page-cache%{REQUEST_URI}.html [L]\n    RewriteCond %{DOCUMENT_ROOT}/page-cache%{REQUEST_URI}.json -f\n    RewriteRule . page-cache%{REQUEST_URI}.json [L]\n    RewriteCond %{DOCUMENT_ROOT}/page-cache%{REQUEST_URI}.xml -f\n    RewriteRule . page-cache%{REQUEST_URI}.xml [L]\n    ```\n\n### Ignoring the cached files\n\nTo make sure you don't commit your locally-cached files to your git repository, add this line to your `.gitignore` file:\n\n```\n/public/page-cache\n```\n\n## Usage\n\n### Using the middleware\n\n> **Note:** If you've added the middleware to the global `web` group, then all successful GET requests will automatically be cached. No need to put the middleware again directly on the route.\n>\n> If you instead registered it in `middlewareAliases`, you should use the middleware on whichever routes you want to be cached.\n\nTo cache the response of a given request, use the `page-cache` middleware:\n\n```php\nRoute::middleware('page-cache')->get('posts/{slug}', 'PostController@show');\n```\n\nEvery post will now be cached to a file under the `public/page-cache` directory, closely matching the URL structure of the request. All subsequent requests for this post will be served directly from disk, never even hitting your app!\n\n### Clearing the cache\n\nSince the responses are cached to disk as static files, any updates to those pages in your app will not be reflected on your site. To update pages on your site, you should clear the cache with the following command:\n\n```\nphp artisan page-cache:clear\n```\n\nAs a rule of thumb, it's good practice to add this to your deployment script. That way, whenever you push an update to your site, the page cache will automatically be cleared.\n\nIf you're using [Forge](https://forge.laravel.com)'s Quick Deploy feature, you should add this line to the end of your Deploy Script. This'll ensure that the cache is cleared whenever you push an update to your site.\n\nYou may optionally pass a URL slug to the command, to only delete the cache for a specific page:\n\n```\nphp artisan page-cache:clear {slug}\n```\n\nTo clear everything under a given path, use the `--recursive` flag:\n\n```\nphp artisan page-cache:clear {slug} --recursive\n```\n\nFor example, imagine you have a category resource under `/categories`, with the following cached pages:\n\n- `/categories/1`\n- `/categories/2`\n- `/categories/5`\n\nTo clear the cache for all categories, use `--recursive` with the `categories` path:\n\n```\nphp artisan page-cache:clear categories --recursive\n```\n\n\n### Customizing what to cache\n\nBy default, all GET requests with a 200 HTTP response code are cached. If you want to change that, create your own middleware that extends the package's base middleware, and override the `shouldCache` method with your own logic.\n\n1. Run the `make:middleware` Artisan command to create your middleware file:\n\n    ```\n    php artisan make:middleware CacheResponse\n    ```\n\n2. Replace the contents of the file at `app/Http/Middleware/CacheResponse.php` with this:\n\n    ```php\n    <?php\n\n    namespace App\\Http\\Middleware;\n\n    use Symfony\\Component\\HttpFoundation\\Request;\n    use Symfony\\Component\\HttpFoundation\\Response;\n    use Silber\\PageCache\\Middleware\\CacheResponse as BaseCacheResponse;\n\n    class CacheResponse extends BaseCacheResponse\n    {\n        protected function shouldCache(Request $request, Response $response)\n        {\n            // In this example, we don't ever want to cache pages if the\n            // URL contains a query string. So we first check for it,\n            // then defer back up to the parent's default checks.\n            if ($request->getQueryString()) {\n                return false;\n            }\n\n            return parent::shouldCache($request, $response);\n        }\n    }\n    ```\n\n3. Finally, update the middleware references in your `app/Http/Kernel.php` file, to point to your own middleware.\n\n## License\n\nThe Page Cache package is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).\n\n[icon-build]: https://github.com/JosephSilber/page-cache/workflows/Tests/badge.svg\n[icon-downloads]: https://poser.pugx.org/silber/page-cache/downloads\n[icon-license]: https://poser.pugx.org/silber/page-cache/license\n[icon-version]: https://poser.pugx.org/silber/page-cache/v/stable\n\n[link-build]: https://github.com/JosephSilber/page-cache/actions\n[link-downloads]: https://packagist.org/packages/silber/page-cache\n[link-packagist]: https://packagist.org/packages/silber/page-cache\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}