{
  "metadata": {
    "timestamp": 1736712251494,
    "page": 993,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjEwMDA=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zelon88/HRConvert2",
      "stars": 1166,
      "defaultBranch": "master",
      "files": [
        {
          "name": "DATA",
          "type": "tree",
          "content": null
        },
        {
          "name": "Documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3173828125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {one line to give the program's name and a brief idea of what it does.}\n    Copyright (C) {year}  {name of author}\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    {project}  Copyright (C) {year}  {fullname}\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "Logs",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.5869140625,
          "content": "-----------------------------------------------\n**[Installation Instructions](https://github.com/zelon88/HRConvert2/blob/master/Documentation/INSTALLATION_INSTRUCTIONS.txt)**\n-----------------------------------------------\n# HRConvert2\n\n### A self-hosted drag-and-drop file conversion server & file sharing tool that supports 445 file formats with 4 color schemes & 13 end-user selectable languages. \n\n![HRConvert2](https://github.com/zelon88/HRConvert2/blob/master/Documentation/Screenshots/HRConvert2-1.png)\n\n---\n### Features\n- Converts 445 different file formats.\n- Self hosted. Installs on a home server!\n- All conversions are performed locally on your server.\n- Performs Optical Character Recognition (OCR) on PDFs & images.\n- Can scan files for viruses automatically in the background with ClamAV.\n- Allows users to scan files for viruses on-demand using ClamAV or [zelon88/scanCore](https://github.com/zelon88/scanCore).\n- Allows users to generate temporary links for sharing files.\n- Minimalistic drag & drop interface.\n- Each user gets their own temporary scratch space!\n- End users can switch between 13 languages by appending it to the URL like this: `?language=en`\n- Safe enough for public facing environments (when properly implemented).\n- No databases. No cookies. No cache files. \n- Installs cleanly alongside other popular software (like WordPress).\n- Does not make external connections.\n- All JS is locally installed. No bulky frameworks. No analytics. No Google Fonts.\n- No tracking capabilities whatsoever.\n- Comes with 4 color schemes set in config.php.\n- Secure, performant, & compact codebase that's been open-source for years.\n\n---\n### Here Is A Sample Of Just Some Supported Formats\n#### Audio Formats\nSupports specific bitrate through the API.\n- Mp2\n- Mp3\n- Aac\n- Avi\n- Flac\n- Ogg\n- Wav\n- Wma\n- M4a\n- M4p\n#### Video Formats\n- 3gp\n- Mkv\n- Avi\n- Mp4\n- Flv\n- Mpeg\n- Wmv\n- Mov\n- M4v\n#### Stream Formats\n- M3u8\n#### Document Formats\n- Doc\n- Docx\n- Txt\n- Rtf\n- Odt\n- Pdf\n#### Spreadsheet Formats\n- Csv\n- Xls\n- Xlsx\n- Ods\n#### Presentation Formats\n- Pages\n- Pptx\n- Ppt\n- Xps\n- Pot\n- Potx\n- Potm\n- Ppa\n- Ppt\n- Pptx\n- Odp\n#### Archive Formats\nCan convert between archive formats & disk image formats.\n- Zip\n- Rar\n- Tar\n- Bz\n- Gz\n- Bz2\n- 7z\n- Iso\n- Vhd\n- Vdi\n- Tar.bz2\n- Tar.gz\n#### Image Formats\nCan convert pictures of documents to document formats.\nSupports resize & rotate.\n- Jpg\n- Jpeg\n- Png\n- Bmp\n- Pdf\n- Gif\n- Webp\n- Cin\n- Dds\n- Dib\n- Flif\n- Avif\n- Gplt\n- Sct\n- Xcf\n- Heic\n- Ico\n#### 3D Model Formats\n- 3ds\n- Obj\n- Collada\n- Off\n- Ply\n- Stl\n- Gts\n- Ptx\n- Dxf\n- U3d\n- X3d\n- Vrml\n#### Subtitle Formats\n- Vtt\n- Ssa\n- Ass\n- Srt\n- Dvb\n#### Drawing Files\nCan convert drawing files to image formats.\n- Svg\n- Dxf\n- Fig\n- Vdx\n- Dia\n- Wpg\n#### OCR Support\nOCR Operations support the following input formats...\n- Jpg\n- Jpeg\n- Png\n- Bmp\n- Pdf\n- Gif\nOCR Operations support the following output formats...\n- Doc\n- Docx\n- Txt\n- Rtf\n- Odt\n- Pdf\n\n---\n# Supported Languages\nLanguages can be forced via policy or dynamically selected by the user by appending `?language=en` to the server URL.\nNo need install additional language packs to switch languages. Translations are built-in. \nDevelopers can craft links or redirects to load the correct language for each user or set the language once & forget it.\n- English (en)\n- French (fr)\n- Spanish (es)\n- Chinese, Simplified (zh)\n- Hindi (hi)\n- Arabic (ar)\n- Russian (ru)\n- Ukranian (uk)\n- Bengali (bn)\n- German (de)\n- Korean (ko)\n- Italian (it)\n- Portuguese (pt)\n\n---\n# Screenshots\n![HRConvert2](https://github.com/zelon88/HRConvert2/blob/master/Documentation/Screenshots/HRConvert2-10.png)\n\n![HRConvert2](https://github.com/zelon88/HRConvert2/blob/master/Documentation/Screenshots/HRConvert2-11.png)\n\n![HRConvert2](https://github.com/zelon88/HRConvert2/blob/master/Documentation/Screenshots/HRConvert2-12.png)\n\n![HRConvert2](https://github.com/zelon88/HRConvert2/blob/master/Documentation/Screenshots/HRConvert2-13.png)\n\n![HRConvert2](https://github.com/zelon88/HRConvert2/blob/master/Documentation/Screenshots/HRConvert2-14.png)\n\n![HRConvert2](https://github.com/zelon88/HRConvert2/blob/master/Documentation/Screenshots/HRConvert2-15.png)\n\n![HRConvert2](https://github.com/zelon88/HRConvert2/blob/master/Documentation/Screenshots/HRConvert2-16.png)\n\n![HRConvert2](https://github.com/zelon88/HRConvert2/blob/master/Documentation/Screenshots/HRConvert2-17.png)\n\n---\n# License\nThis project is licensed under the [GNU General Public License v3.0 License](https://github.com/zelon88/HRConvert2/blob/master/Documentation/LICENSE). See the [Official Documentation](https://github.com/zelon88/HRConvert2/tree/master/Documentation) for more information.\n"
        },
        {
          "name": "Resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "UI",
          "type": "tree",
          "content": null
        },
        {
          "name": "convertCore.php",
          "type": "blob",
          "size": 147.0439453125,
          "content": "<!DOCTYPE HTML>\n<?php\n// / -----------------------------------------------------------------------------------\n// / COPYRIGHT INFORMATION ...\n// / HRConvert2, Copyright on 6/9/2024 by Justin Grimes, www.github.com/zelon88\n// /\n// / LICENSE INFORMATION ...\n// / This project is protected by the GNU GPLv3 Open-Source license.\n// / https://www.gnu.org/licenses/gpl-3.0.html\n// /\n// / APPLICATION INFORMATION ...\n// / This application is designed to provide a web-interface for converting file formats\n// / on a server for users of any web browser without authentication.\n// /\n// / FILE INFORMATION ...\n// / v3.3.7.\n// / This file contains the core logic of the application.\n// /\n// / HARDWARE REQUIREMENTS ...\n// / This application requires at least a Raspberry Pi Model B+ or greater.\n// / This application will run on just about any x86 or x64 computer.\n// /\n// / DEPENDENCY REQUIREMENTS ...\n// / This application requires Debian Linux (w/3rd Party audio license),\n// / Apache 2.4, PHP 8+, LibreOffice, Unoconv, ClamAV, Tesseract, Rar, Unrar, Unzip,\n// / 7zipper, FFMPEG, PDFTOTEXT, Dia, PopplerUtils, MeshLab, Mkisofs & ImageMagick.\n// /\n// / <3 Open-Source\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to reset PHP's time limit for execution.\nfunction setTimeLimit() {\n  $TimeReset = set_time_limit(0);\n  return $TimeReset; }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to set the date & time for the session.\nfunction verifyTime() {\n  // / Set variables.\n  global $TimeIsSet, $Date, $Time;\n  $TimeIsSet = FALSE;\n  $tzAbbreviations = DateTimeZone::listAbbreviations();\n  $tzList = array();\n  // / Build a list of timezones supported by this PHP installation.\n  foreach ($tzAbbreviations as $zone) foreach ($zone as $item) if (is_string($item['timezone_id']) && $item['timezone_id'] !== '') $tzList[] = $item['timezone_id'];\n  $tzList = array_unique($tzList);\n  $zoneList = array_values($tzList);\n  // / Check that the currently set timezone is valid.\n  if (in_array(@date_default_timezone_get(), $zoneList)) $TimeIsSet = TRUE;\n  // / Try to set the time regardless of whether or not the timezone is correct.\n  $Date = date(\"m_d_y\");\n  $Time = date(\"F j, Y, g:i a\");\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $tzAbbreviations = $tzList = $zoneList = $zone = $item = NULL;\n  unset($tzAbbreviations, $tzList, $zoneList, $zone, $item);\n  return array($TimeIsSet, $Date, $Time); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to sanitize input strings with varying degrees of tolerance.\n// / Filters a given string of | \\ ~ # [ ] ( ) { } ; : $ ! # ^ & % @ > * < \" / '\n// / This function will replace any of the above specified charcters with NOTHING. No character at all. An empty string.\n// / This function will replace whitespace with the underscore character.\n// / Set $strict to TRUE to also filter out backslash characters as well. Example:  /\nfunction sanitizeString($Variable, $strict) {\n  if ($strict) $Variable = htmlentities(trim(str_replace(' ', '_', str_replace('..', '', str_replace('//', '', str_replace(str_split('|\\\\~#[](){};:$!#^&%@>*<\"\\'/'), '', $Variable))))), ENT_QUOTES, 'UTF-8');\n  if (!$strict) $Variable = htmlentities(trim(str_replace(' ', '_', str_replace('..', '', str_replace('//', '', str_replace(str_split('|\\\\[](){};\"\\''), '', $Variable))))), ENT_QUOTES, 'UTF-8');\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $strict = NULL;\n  unset($strict);\n  return $Variable; }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to sanitize input strings or arrays with varying degrees of tolerance.\n// / Filters a given string of | \\ ~ # [ ] ( ) { } ; : $ ! # ^ & % @ > * < \" / '\n// / This function will replace any of the above specified charcters with NOTHING. No character at all. An empty string.\n// / This function will replace whitespace with the underscore character.\n// / Set $strict to TRUE to also filter out backslash characters as well. Example:  /\nfunction sanitize($Variable, $strict) {\n  // / Set variables.\n  $VariableIsSanitized = TRUE;\n  $var = '';\n  $key = 0;\n  if (!is_bool($strict)) $strict = TRUE;\n  // / Only continue if the input variable is a type that we can properly sanitize.\n  if (!is_string($Variable) && !is_numeric($Variable) && !is_array($Variable)) $VariableIsSanitized = FALSE;\n  else {\n    // / Sanitize array inputs.\n    // / Note that when $strict is TRUE this also filters out backslashes.\n    if (is_array($Variable)) foreach ($Variable as $key => $var) $Variable[$key] = sanitizeString($Variable[$key], $strict);\n    // / Sanitize string & numeric inputs.\n    // / Note that when $strict is TRUE this also filters out backslashes.\n    if (is_string($Variable) or is_numeric($Variable)) $Variable = sanitizeString($Variable, $strict); }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $strict = $key = $var = NULL;\n  unset($strict, $key, $var);\n  return array($Variable, $VariableIsSanitized); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to load required HRConvert2 files.\nfunction verifyInstallation() {\n  // / Set variables.\n  global $Salts1, $Salts2, $Salts3, $Salts4, $Salts5, $Salts6, $URL, $VirusScan, $AllowUserVirusScan, $InstLoc, $ServerRootDir, $ConvertLoc, $LogDir, $ApplicationName, $ApplicationTitle, $SupportedLanguages, $DefaultLanguage, $AllowUserSelectableLanguage, $SupportedGuis, $DefaultGui, $AllowUserSelectableGui, $DeleteThreshold, $Verbose, $MaxLogSize, $Font, $ButtonStyle, $DefaultColor, $SupportedColors, $AllowUserSelectableColor, $ColorToUse, $ShowGUI, $ShowFinePrint, $TOSURL, $PPURL, $ScanCoreMemoryLimit, $ScanCoreChunkSize, $ScanCoreDebug, $ScanCoreVerbose, $SpinnerStyle, $SpinnerColor, $URL, $AllowUserShare, $SupportedConversionTypes, $VersionInfoFile, $Version, $DeleteBuildEnvironment, $DeleteDevelopmentDocumentation, $UserArchiveArray, $UserDearchiveArray, $UserDocumentArray, $UserSpreadsheetArray, $UserPresentationArray, $UserImageArray, $UserMediaInputArray, $UserMediaOutputArray, $UserVideoInputArray, $UserVideoOutputArray, $UserStreamArray, $UserDrawingArray, $UserModelArray, $UserSubtitleInputArray, $UserSubtitleOutputArray, $UserPDFWorkArr, $RARArchiveMethod, $RetryCount;\n  // / Define absolute paths for files that we only have relative paths for.\n  $InstallationIsVerified = $buildDirDeleted = $dockerFileDeleted = $readmeDeleted = $changelogFileDeleted = $buildEnvDeleted = $devDocsDeleted = $checkOne = $checkTwo = FALSE;\n  $ConfigFile = realpath(dirname(__FILE__).DIRECTORY_SEPARATOR.'Resources'.DIRECTORY_SEPARATOR.'config.php');\n  $VersionInfoFile = realpath(dirname(__FILE__).DIRECTORY_SEPARATOR.'Resources'.DIRECTORY_SEPARATOR.'versionInfo.php');\n  $dockerFile = realpath(dirname(__FILE__).DIRECTORY_SEPARATOR.'Documentation'.DIRECTORY_SEPARATOR.'Build'.DIRECTORY_SEPARATOR.'Dockerfile');\n  $changelogFile = realpath(dirname(__FILE__).DIRECTORY_SEPARATOR.'Documentation'.DIRECTORY_SEPARATOR.'CHANGELOG.txt');\n  $readmeFile = realpath(dirname(__FILE__).DIRECTORY_SEPARATOR.'README.md');\n  $buildDir = realpath(dirname(__DIR__).DIRECTORY_SEPARATOR.'Build');\n  // / Check for required files & stop execution if they are missing.\n  if (!file_exists($ConfigFile)) die ('ERROR!!! HRConvert2-0: Could not process the HRConvert2 Configuration file (config.php)!'.PHP_EOL.'<br />');\n  else require_once ($ConfigFile);\n  if (!file_exists($VersionInfoFile)) die ('ERROR!!! HRConvert2-24000: Could not process the HRConvert2 Version Information file (versionInfo.php)!'.PHP_EOL.'<br />');\n  else require_once ($VersionInfoFile);\n  // / Delete the build environment if specified by config.php.\n  if ($DeleteBuildEnvironment) {\n    if (is_dir($buildDir)) $buildDirDeleted = cleanFiles($buildDir);\n    if (file_exists($dockerFile)) $dockerFileDeleted = unlink($dockerFile);\n    if ($buildDirDeleted && $dockerFileDeleted) $buildEnvDeleted = TRUE; }\n  // / Delete the development environment if specified by config.php.\n  if ($DeleteDevelopmentDocumentation) {\n    if (file_exists($changelogFile)) $changelogFileDeleted = unlink($changelogFile);\n    if (file_exists($readmeFile)) $readmeDeleted = unlink($readmeFile);\n    if ($changelogFileDeleted && $readmeDeleted) $devDocsDeleted = TRUE; }\n  // / Perform a check to see if any required operations failed. \n  if ($DeleteBuildEnvironment) if (!$buildEnvDeleted) $checkOne = TRUE;\n  if ($DeleteDevelopmentDocumentation) if (!$devDocsDeleted) $checkTwo = TRUE;\n  // / Installation is considered verified when check one & check two are both false.\n  if (!$checkOne && !$checkTwo) $InstallationIsVerified = TRUE;\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $buildDir = $buildDirDeleted = $dockerFile = $dockerFileDeleted = $readmeFile = $readmeDeleted = $changelogFile = $changelogFileDeleted = $buildEnvDeleted = $devDocsDeleted = $checkOne = $checkTwo = NULL;\n  unset($buildDir, $buildDirDeleted, $dockerFile, $dockerFileDeleted, $readmeFile, $readmeDeleted, $changelogFile, $changelogFileDeleted, $buildEnvDeleted, $devDocsDeleted, $checkOne, $checkTwo);\n  return array($InstallationIsVerified, $ConfigFile, $Version); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to attempt to detect the users IP so it can be used as an identifier for the session.\nfunction verifySession() {\n  // / Set variables.\n  $IP = '';\n  $HashedUserAgent = hash('sha256', $_SERVER['HTTP_USER_AGENT']);\n  $SessionIsVerified = TRUE;\n  // / Detect an IP that we can use as an identifier for the session.\n  if (!empty($_SERVER['HTTP_CLIENT_IP'])) $IP = htmlentities(str_replace(str_split('~#[](){};:$!#^&%@>*<\"\\''), '', $_SERVER['HTTP_CLIENT_IP']), ENT_QUOTES, 'UTF-8');\n  elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) $IP = htmlentities(str_replace(str_split('~#[](){};:$!#^&%@>*<\"\\''), '', $_SERVER['HTTP_X_FORWARDED_FOR']), ENT_QUOTES, 'UTF-8');\n  else $IP = htmlentities(str_replace('..', '', str_replace(str_split('~#[](){};:$!#^&%@>*<\"\\''), '', $_SERVER['REMOTE_ADDR'])), ENT_QUOTES, 'UTF-8');\n  return array($SessionIsVerified, $IP, $HashedUserAgent); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to define the $SesHash related variables for the session.\nfunction verifySesHash($IP, $HashedUserAgent) {\n  // / Set variables.\n  global $Date, $Salts1, $Salts2, $Salts3, $Salts4, $Salts5, $Salts6, $Token1;\n  if (is_string($Salts1) && is_string($Salts2) && is_string($Salts3) && is_string($Salts4) && is_string($Salts4) && is_string($Salts5) && is_string($Salts6)) {\n    $SesHashIsVerified = TRUE;\n    $SesHash = substr(hash('ripemd160', $Date.$Salts1.$Salts2.$Salts3.$Salts4.$Salts5.$Salts6), -12);\n    $SesHash2 = substr(hash('ripemd160', $SesHash.$Token1.$Date.$IP.$HashedUserAgent.$Salts1.$Salts2.$Salts3.$Salts4.$Salts5.$Salts6), -12);\n    $SesHash3 = $SesHash.'/'.$SesHash2;\n    $SesHash4 = hash('ripemd160', $Salts6.$Salts5.$Salts4.$Salts3.$Salts2.$Salts1); }\n  else $SesHashIsVerified = $SesHash = $SesHash2 = $SesHash3 = $SesHash4 = FALSE;\n  return array($SesHashIsVerified, $SesHash, $SesHash2, $SesHash3, $SesHash4); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to create a logfile if one does not exist.\nfunction verifyLogs() {\n  // / Set variables.\n  global $LogDir, $LogFile, $MaxLogSize, $InstLoc, $SesHash, $SesHash4, $DefaultLogDir, $DefaultLogSize, $Time, $Date, $LogInc, $LogInc2, $MaxLogSize, $LogDir, $LogFile, $VirusScan, $ApplicationName, $PermissionLevels;\n  $LogExists = $logWritten = FALSE;\n  $LogInc = $LogInc2 = 0;\n  $LogFile = str_replace('..', '', $LogDir.'/'.$ApplicationName.'_'.$LogInc.'_'.$Date.'_'.$SesHash4.'_'.$SesHash.'.txt');\n  $DefaultLogDir = $InstLoc.'/Logs';\n  $DefaultLogSize = 1048576;\n  $ClamLogFile = str_replace('..', '', $LogDir.'/ClamLog_'.$LogInc2.'_'.$Date.'_'.$SesHash4.'_'.$SesHash.'.txt');\n  if (!is_numeric($MaxLogSize)) $MaxLogSize = $DefaultLogSize;\n  if (!is_dir($LogDir)) @mkdir($LogDir, $PermissionLevels);\n  if (!is_dir($LogDir)) $LogDir = $DefaultLogDir;\n  if (!is_dir($LogDir)) die('ERROR!!! '.$Time.': '.$ApplicationName.'-3, The log directory does not exist at '.$LogDir.'.');\n  if (!file_exists($LogDir.'/index.html')) @copy('index.html', $LogDir.'/index.html');\n  // / Create a log file depending on whether or not the max filesize has been reached.\n  while (file_exists($LogFile) && round((filesize($LogFile) / $MaxLogSize), 2) > $MaxLogSize) {\n    $LogInc++;\n    $LogFile = str_replace('..', '', $LogDir.'/'.$ApplicationName.'_'.$LogInc.'_'.$Date.'_'.$SesHash4.'_'.$SesHash.'.txt');\n    $logWritten = file_put_contents($LogFile, 'OP-Act, '.$Time.': Logfile created using method 0.'.PHP_EOL, FILE_APPEND); }\n  if (!file_exists($LogFile)) $logWritten = file_put_contents($LogFile, 'OP-Act, '.$Time.': Logfile created using method 1.'.PHP_EOL, FILE_APPEND);\n  if (file_exists($LogFile)) $LogExists = TRUE;\n  // / Set a clamlog file depending on whether or not the max filesize has been reached, but do not create one yet.\n  if ($VirusScan) {\n    while (file_exists($ClamLogFile) && round((filesize($ClamLogFile) / $MaxLogSize), 2) > $MaxLogSize) {\n      $LogInc2++;\n      $LogFile = str_replace('..', '', $LogDir.'/ClamLog_'.$LogInc2.'_'.$Date.'_'.$SesHash4.'_'.$SesHash.'.txt'); } }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $logWritten = NULL;\n  unset($logWritten);\n  return array($LogExists, $LogFile, $ClamLogFile); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to format a log entry & write it to the logfile.\nfunction logEntry($entry) {\n  // / Set variables.\n  global $Time, $LogFile, $SesHash3;\n  $LogWritten = FALSE;\n  // / Format the input string into a log entry & write it to the $LogFile.\n  $LogWritten = file_put_contents($LogFile, 'Op-Act, '.$Time.', '.$SesHash3.': '.$entry.PHP_EOL, FILE_APPEND);\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $entry = NULL;\n  unset($entry);\n  return $LogWritten; }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to format an error entry & write it to the logfile.\nfunction errorEntry($entry, $errorNumber, $die) {\n  // / Set variables.\n  global $Time, $LogFile, $SesHash3, $ApplicationName;\n  $LogWritten = FALSE;\n  // / Format the error number into a unique error identifier.\n  if (!is_numeric($errorNumber)) $errorNumber = $ApplicationName.'-###';\n  else $errorNumber = $ApplicationName.'-'.$errorNumber;\n  // / Format the input string into a log entry with the error number & write it to the $LogFile.\n  $LogWritten = file_put_contents($LogFile, 'ERROR!!! '.$Time.', '.$errorNumber.', '.$SesHash3.': '.$entry.PHP_EOL, FILE_APPEND);\n  if ($die) die('ERROR!!! '.$Time.' '.$errorNumber.': '.$entry.PHP_EOL);\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $entry = $errorNumber = $die = NULL;\n  unset($entry, $errorNumber, $die);\n  return $LogWritten; }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to set an echo variable that adjusts printed URL's to https when SSL is enabled.\nfunction verifyEncryption() {\n  $EncryptionVerified = TRUE;\n  // / Determine if the connection is encrypted and adjust the $URLEcho accordingly.\n  if (!empty($_SERVER['HTTPS']) && $_SERVER['SERVER_PORT'] == 443) $URLEcho = 's';\n  else $URLEcho = '';\n  return array($EncryptionVerified, $URLEcho); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to set or validate a Token so it can be used as a unique identifier for the session.\nfunction verifyTokens($Token1, $Token2) {\n  // / Verify variables.\n  global $Salts1, $Salts2, $Salts3, $Salts4, $Salts5, $Salts6;\n  $TokensAreValid = TRUE;\n  // / Check that tokens are valid & set them if they are not.\n  if (!isset($Token1) or $Token1 === '' or strlen($Token1) < 19) $Token1 = hash('ripemd160', rand(0, 1000000000).rand(0, 1000000000));\n  if (isset($Token2)) if ($Token2 !== hash('ripemd160', $Token1.$Salts1.$Salts2.$Salts3.$Salts4.$Salts5.$Salts6)) $TokensAreValid = FALSE;\n  if (!isset($Token2) or $Token2 === '' or strlen($Token2) < 19) $Token2 = hash('ripemd160', $Token1.$Salts1.$Salts2.$Salts3.$Salts4.$Salts5.$Salts6);\n  return array($TokensAreValid, $Token1, $Token2); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to verify that all required POST & GET inputs are properly sanitized.\nfunction verifyInputs() {\n  // / Set variables.\n  $var = FALSE;\n  $InputsAreVerified = TRUE;\n  $GUI = $Color = $Language = $Token1 = $Token2 = $Height = $Width = $Rotate = $Bitrate = $Method = $Download = $UserFilename = $UserExtension = $Archive = $UserScanType = $ScanAll = $UserClamScan = $UserScanCoreScan = $var = '';\n  $variableIsSanitized = $ConvertSelected = $PDFWorkSelected = $FilesToArchive = $FilesToScan = $FilesToDelete = array();\n  $key = 0;\n  $ScanType = 'all';\n  // / Sanitize each variable as needed & build a list of error check results.\n  if (isset($_POST['noGui'])) $_GET['noGui'] = TRUE;\n  if (isset($_POST['filesToDelete'])) list ($FilesToDelete, $variableIsSanitized[$key++]) = sanitize($_POST['filesToDelete'], TRUE);\n  if (isset($_POST['language'])) list ($Language, $variableIsSanitized[$key++]) = sanitize($_POST['language'], TRUE);\n  if (isset($_GET['language'])) list ($Language, $variableIsSanitized[$key++]) = sanitize($_GET['language'], TRUE);\n  if (isset($_POST['color'])) list ($Color, $variableIsSanitized[$key++]) = sanitize($_POST['color'], TRUE);\n  if (isset($_GET['color'])) list ($Color, $variableIsSanitized[$key++]) = sanitize($_GET['color'], TRUE);\n  if (isset($_POST['gui'])) list ($GUI, $variableIsSanitized[$key++]) = sanitize($_POST['gui'], TRUE);\n  if (isset($_GET['gui'])) list ($GUI, $variableIsSanitized[$key++]) = sanitize($_GET['gui'], TRUE);\n  if (isset($_POST['Token1'])) list ($Token1, $variableIsSanitized[$key++]) = sanitize($_POST['Token1'], TRUE);\n  if (isset($_POST['Token2'])) list ($Token2, $variableIsSanitized[$key++]) = sanitize($_POST['Token2'], TRUE);\n  if (isset($_POST['height'])) list ($Height, $variableIsSanitized[$key++]) = sanitize($_POST['height'], TRUE);\n  if (isset($_POST['width'])) list ($Width, $variableIsSanitized[$key++]) = sanitize($_POST['width'], TRUE);\n  if (isset($_POST['rotate'])) list ($Rotate, $variableIsSanitized[$key++]) = sanitize($_POST['rotate'], TRUE);\n  if (isset($_POST['bitrate'])) list ($Bitrate, $variableIsSanitized[$key++]) = sanitize($_POST['bitrate'], TRUE);\n  if (isset($_POST['method'])) list ($Method, $variableIsSanitized[$key++]) = sanitize($_POST['method'], TRUE);\n  if (isset($_POST['download'])) list ($Download, $variableIsSanitized[$key++]) = sanitize($_POST['download'], TRUE);\n  if (isset($_POST['archive'])) list ($Archive, $variableIsSanitized[$key++]) = sanitize($_POST['archive'], TRUE);\n  if (isset($_POST['extension'])) list ($UserExtension, $variableIsSanitized[$key++]) = sanitize($_POST['extension'], TRUE);\n  if (isset($_POST['filesToArchive'])) list ($FilesToArchive, $variableIsSanitized[$key++]) = sanitize($_POST['filesToArchive'], TRUE);\n  if (isset($_POST['archextension'])) list ($UserExtension, $variableIsSanitized[$key++]) = sanitize($_POST['archextension'], TRUE);\n  if (isset($_POST['userfilename'])) list ($UserFilename, $variableIsSanitized[$key++]) = sanitize($_POST['userfilename'], TRUE);\n  if (isset($_POST['userconvertfilename'])) list ($UserFilename, $variableIsSanitized[$key++]) = sanitize($_POST['userconvertfilename'], TRUE);\n  if (isset($_POST['pdfworkSelected'])) list ($PDFWorkSelected, $variableIsSanitized[$key++]) = sanitize($_POST['pdfworkSelected'], TRUE);\n  if (isset($_POST['convertSelected'])) list ($ConvertSelected, $variableIsSanitized[$key++]) = sanitize($_POST['convertSelected'], TRUE);\n  if (isset($_POST['pdfextension'])) list ($UserExtension, $variableIsSanitized[$key++]) = sanitize($_POST['pdfextension'], TRUE);\n  if (isset($_POST['userpdfconvertfilename'])) list ($UserFilename, $variableIsSanitized[$key++]) = sanitize($_POST['userpdfconvertfilename'], TRUE);\n  if (isset($_POST['scanallbutton'])) list ($ScanAll, $variableIsSanitized[$key++]) = sanitize($_POST['scanallbutton'], TRUE);\n  if (isset($_POST['scantype'])) list ($UserScanType, $variableIsSanitized[$key++]) = sanitize($_POST['scantype'], TRUE);\n  if (isset($_POST['clamscanbutton'])) list ($UserClamScan, $variableIsSanitized[$key++]) = sanitize($_POST['clamscanbutton'], TRUE);\n  if (isset($_POST['scancorebutton'])) list ($UserScanCoreScan, $variableIsSanitized[$key++]) = sanitize($_POST['scancorebutton'], TRUE);\n  if (isset($_POST['filesToScan'])) list ($FilesToScan, $variableIsSanitized[$key++]) = sanitize($_POST['filesToScan'], TRUE);\n  // / Handle when a user submits User Virus Scan options.\n  if (isset($_POST['clamScanButton']) && isset($_POST['filesToScan'])) $ScanType = 'clamav';\n  if (isset($_POST['scancorebutton']) && isset($_POST['filesToScan'])) $ScanType = 'scancore';\n  if (isset($_POST['scanallbutton']) && isset($_POST['filesToScan'])) $ScanType = 'all';\n  // / Check the list of error check results and see if any errors occured.\n  foreach ($variableIsSanitized as $var) if (!$var) ($InputsAreVerified = FALSE);\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $variableIsSanitized = $key = $var = NULL;\n  unset($variableIsSanitized, $key, $var);\n  return array($InputsAreVerified, $GUI, $Color, $Language, $Token1, $Token2, $Height, $Width, $Rotate, $Bitrate, $Method, $Download, $UserFilename, $UserExtension, $FilesToArchive, $PDFWorkSelected, $ConvertSelected, $FilesToScan, $FilesToDelete, $UserScanType); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to set the styles to use for the session.\nfunction verifyColors($ButtonStyle) {\n  // / Set variables.\n  global $ButtonStyle, $Color, $SupportedColors, $AllowUserSelectableColor, $ColorToUse, $GreenButtonCode, $BlueButtonCode, $RedButtonCode, $DefaultButtonCode;\n  $ColorsAreSet = FALSE;\n  $ColorToUse = 'blue';\n  $ButtonStyle = strtolower($ButtonStyle);\n  $ButtonCode = $DefaultButtonCode;\n  $validColors = array('green', 'blue', 'red', 'grey');\n  // / Make sure $SupportedColors is valid.\n  if (!isset($SupportedColors) or !is_array($SupportedColors)) $SupportedColors = $validColors;\n  // / Make sure the Default Color is valid.\n  if (isset($ButtonStyle)) if (in_array($ButtonStyle, $SupportedColors)) $ColorToUse = $ButtonStyle;\n  // / If allowed and if specified, detect the users specified color and set that as the color to use.\n  if (isset($AllowUserSelectableColor)) {\n    if ($AllowUserSelectableColor) if (isset($Color)) if (in_array($Color, $SupportedColors)) {\n      $ColorToUse = $Color; }\n    if (!$AllowUserSelectableColor) $ButtonStyle = $DefaultColor; }\n  // / Set the $Color variable to whatever the current color is so the next page will use the same one.\n  $_GET['color'] = $ColorToUse;\n  // / Validate the desired color and set it as the color to use if possible.\n  if (in_array($ColorToUse, $validColors)) {\n    $ColorsAreSet = TRUE;\n    if ($ColorToUse === 'green') $ButtonCode = $GreenButtonCode;\n    if ($ColorToUse === 'blue') $ButtonCode = $BlueButtonCode;\n    if ($ColorToUse === 'red') $ButtonCode = $RedButtonCode;\n    if ($ColorToUse === 'grey') $ButtonCode = $DefaultButtonCode; }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $validColors = NULL;\n  unset($validColors);\n  return array($ColorsAreSet, $ButtonCode); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to set the GUI to use for the session.\nfunction verifyGui() {\n  // / Set variables.\n  global $GUI, $DefaultGui, $SupportedGuis, $AllowUserSelectableGui, $GuiFiles, $GuiDir, $GuiResourcesDir, $GuiImageDir, $GuiCSSDir, $GuiJSDir, $GuiHeaderFile, $GuiFooterFile, $GuiUI1File, $GuiUI2File, $GreenButtonCode, $BlueButtonCode, $RedButtonCode, $DefaultButtonCode, $Font;\n  $defaultGui = $reqFile =  $variableIsSanitized = FALSE;\n  $GuiIsSet = TRUE;\n  $GuiToUse = 'Default';\n  $GuiFiles = $guiFiles = array();\n  $defaultGuis = array('Default');\n  // / Make sure $SupportedGuis is valid.\n  if (!isset($SupportedGuis) or !is_array($SupportedGuis)) $SupportedGuis = $defaultGuis;\n  // / Make sure the Default GUI is valid.\n  if (isset($DefaultGui)) if (in_array($DefaultGui, $SupportedGuis)) $GuiToUse = $DefaultGui;\n  // / If allowed and if specified, detect the users specified GUI and set that as the GUI to use.\n  if (isset($AllowUserSelectableGui)) {\n    if ($AllowUserSelectableGui) if (isset($GUI)) if (in_array($GUI, $SupportedGuis)) {\n      $GuiToUse = $GUI; }\n    if (!$AllowUserSelectableGui) $GuiToUse = $DefaultGui; }\n  // / Set the $GUI variable to whatever the current GUI is so the next page will use the same one.\n  $_GET['gui'] = $GuiToUse;\n  // / Set the variables to a URL safe relative path to required UI files.\n  $GuiDir = 'UI/'.$GuiToUse.'/';\n  $StyleCoreFile = $GuiDir.'styleCore.php';\n  $GuiHeaderFile = $GuiDir.'header.php';\n  $GuiFooterFile = $GuiDir.'footer.php';\n  $GuiUI1File = $GuiDir.'convertGui1.php';\n  $GuiUI2File = $GuiDir.'convertGui2.php';\n  $GuiResourcesDir = $GuiDir.'Resources/';\n  $GuiImageDir = $GuiResourcesDir.'Image/';\n  $GuiCSSDir = $GuiResourcesDir.'CSS/';\n  $GuiJSDir = $GuiResourcesDir.'JS/';\n  $guiFiles = array($GuiHeaderFile, $GuiFooterFile, $GuiUI1File, $GuiUI2File, $StyleCoreFile);\n  // / Verify that the required GUI folder exists.\n  if (is_dir($GuiDir)) $GuiIsSet = TRUE;\n  // / Verify that required GUI files exist.\n  foreach ($guiFiles as $reqFile) if (file_exists($reqFile)) array_push($GuiFiles, $reqFile);\n  // / Determine if the styleCore.php file is part of the desired GUI, and load it if required.\n  if (in_array($StyleCoreFile, $GuiFiles)) { \n    // / Load the styleCore.php file.\n    require_once($StyleCoreFile);\n    // / Set the variables for required color data.\n    $GreenButtonCode = $greenButtonCode; \n    $BlueButtonCode = $blueButtonCode;\n    $RedButtonCode = $redButtonCode; \n    $DefaultButtonCode = $defaultButtonCode; }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $defaultGuis = $reqFile = $guiFiles = $greenButtonCode = $blueButtonCode = $redButtonCode = $defaultButtonCode = NULL;\n  unset($defaultGuis, $reqFile, $guiFiles, $greenButtonCode, $blueButtonCode, $redButtonCode, $defaultButtonCode);\n  return array($GuiIsSet, $GuiToUse, $GuiDir, $GuiFiles); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to set the language to use for the session.\nfunction verifyLanguage() {\n  // / Set variables.\n  global $Language, $DefaultLanguage, $SupportedLanguages, $AllowUserSelectableLanguage, $LanguageFiles, $GuiDir, $LanguageDir, $LanguageStringsFile, $Language;\n  $defaultLanguages = $reqFile = $variableIsSanitized = FALSE;\n  $LanguageIsSet = TRUE;\n  $LanguageToUse = 'en';\n  $LanguageFiles = $languageFiles = array();\n  $defaultLanguages = array('en', 'fr', 'es', 'zh', 'hi', 'ar', 'ru', 'uk', 'bn', 'de', 'ko', 'it', 'pt');\n  // / Make sure $SupportedLanguages is valid.\n  if (!isset($SupportedLanguages) or !is_array($SupportedLanguages)) $SupportedLanguages = $defaultLanguages;\n  // / Make sure the Default Language is valid.\n  if (isset($DefaultLanguage)) if (in_array($DefaultLanguage, $SupportedLanguages)) $LanguageToUse = $DefaultLanguage;\n  // / If allowed and if specified, detect the users specified language and set that as the language to use.\n  if (isset($AllowUserSelectableLanguage)) {\n    if ($AllowUserSelectableLanguage) if (isset($Language)) if (in_array($Language, $SupportedLanguages)) {\n      $LanguageToUse = $Language; }\n    if (!$AllowUserSelectableLanguage) $LanguageToUse = $DefaultLanguage; }\n  // / Set the $Language variable to whatever the current language is so the next page will use the same one.\n  $_GET['language'] = $LanguageToUse;\n  // / Set the variables to required UI files.\n  $LanguageDir = $GuiDir.'Languages/'.$LanguageToUse.'/';\n  $LanguageStringsFile = $LanguageDir.'languageStrings.php';\n  $languageFiles = array($LanguageStringsFile);\n  // / Verify that the required langauge folder exists.\n  if (!is_dir($LanguageDir)) $LanguageIsSet = FALSE;\n  // / Verify that required language files exist.\n  if (file_exists($LanguageStringsFile)) $LanguageIsSet = TRUE;\n  foreach ($languageFiles as $reqFile) if (file_exists($reqFile)) array_push($LanguageFiles, $reqFile);\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $defaultLanguages = $reqFile = $variableIsSanitized = $languageFiles = NULL;\n  unset($defaultLanguages, $reqFile, $variableIsSanitized, $languageFiles);\n  return array($LanguageIsSet, $LanguageToUse, $LanguageDir, $LanguageFiles); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to reliably sanitize a path or URL of dangerous strings.\nfunction securePath($PathToSecure, $DangerArr, $isURL) {\n  // / Set variables.\n  global $DirSep;\n  // / Loop through each dangerous file & remove it from the supplied path.\n  foreach ($DangerArr as $dArr) $PathToSecure = str_replace($dArr, '', $PathToSecure);\n  // / Remove double directory separatorsthat may have been created during the last step.\n  $PathToSecure = str_replace($DirSep.$DirSep, $DirSep, str_replace($DirSep.$DirSep, $DirSep, str_replace('..', '', $PathToSecure)));\n  // / Detect if the path is a URL & remove double directory separators that may exist.\n  if ($isURL) $PathToSecure = str_replace($DirSep, '/', $PathToSecure);\n  // / Rempve double dots that may have been created during the last step.\n  $PathToSecure = str_replace('..', '', $PathToSecure);\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $dArr = $isURL = NULL;\n  unset($dArr, $isURL);\n  return $PathToSecure; }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to set the global variables for the session.\nfunction verifyGlobals() {\n  // / Set global variables to be used through the entire application.\n  global $URL, $URLEcho, $HRConvertVersion, $Date, $Time, $SesHash, $SesHash2, $SesHash3, $SesHash4, $CoreLoaded, $ConvertDir, $InstLoc, $ConvertTemp, $ConvertTempDir, $ConvertGuiCounter1, $DefaultApps, $RequiredDirs, $RequiredIndexes, $DangerousFiles, $Allowed, $ArchiveArray, $DearchiveArray, $DocumentArray, $SpreadsheetArray, $PresentationArray, $ImageArray, $MediaInputArray, $MediaOutputArray, $VideoInputArray, $VideoOutputArray, $StreamArray, $DrawingArray, $ModelArray, $SubtitleInputArray, $SubtitleOutputArray, $PDFWorkArr, $ConvertLoc, $DirSep, $SupportedConversionTypes, $Lol, $Lolol, $Append, $PathExt, $ConsolidatedLogFileName, $ConsolidatedLogFile, $Alert, $Alert1, $Alert2, $Alert3, $FCPlural, $FCPlural1, $FCPlural2, $FCPlural3, $UserClamLogFile, $UserClamLogFileName, $UserScanCoreLogFile, $UserScanCoreFileName, $SpinnerStyle, $SpinnerColor, $FullURL, $ServerRootDir, $StopCounter, $SleepTimer, $PermissionLevels, $ApacheUser, $File, $HeaderDisplayed, $UIDisplayed, $FooterDisplayed, $LanguageStringsLoaded, $GUIDisplayed, $Version, $GUIDirection, $SupportedFormatCount, $GUIAlignment, $GreenButtonCode, $BlueButtonCode, $RedButtonCode, $DefaultButtonCode, $UserArchiveArray, $UserDearchiveArray, $UserDocumentArray, $UserSpreadsheetArray, $UserPresentationArray, $UserImageArray, $UserMediaInputArray, $UserMediaOutputArray, $UserVideoInputArray, $UserVideoOutputArray, $UserStreamArray, $UserDrawingArray, $UserModelArray, $UserSubtitleInputArray, $UserSubtitleOutputArray, $UserPDFWorkArr, $RetryCount;\n  // / Application related variables.\n  $HRConvertVersion = 'v3.3.7';\n  $GlobalsAreVerified = FALSE;\n  $CoreLoaded = TRUE;\n  $SleepTimer = 0;\n  $StopCounter = $RetryCount;\n  $PermissionLevels = 0755;\n  $ApacheUser = 'www-data';\n  // / Convinience variables.\n  $DirSep = DIRECTORY_SEPARATOR;\n  $Lol = PHP_EOL;\n  $Lolol = $Lolol;\n  $Append = FILE_APPEND;\n  $PathExt = PATHINFO_EXTENSION;\n  // / UI Related variables.\n  $ConvertGuiCounter1 = 0;\n  $File = $FCPlural = $FCPlural1 = $FCPlural2 = $FCPlural3 = $GreenButtonCode = $BlueButtonCode = $RedButtonCode = $DefaultButtonCode = '';\n  $HeaderDisplayed = $UIDisplayed = $FooterDisplayed =$LanguageStringsLoaded = $GUIDisplayed = FALSE;\n  $GUIDirection = 'ltr';\n  $GUIAlignment = 'left';\n  $Alert = 'Cannot convert this file! Try changing the name.';\n  $Alert1 = 'Cannot perform a virus scan on this file!';\n  $Alert2 = 'File Link Copied to Clipboard!';\n  $Alert3 = 'Operation Failed!';\n  // / Security related variables.\n  $DefaultApps = array('.', '..');\n  $DangerousFiles = array('js', 'php', '.html', 'css', 'phar', '.', '..', 'index.php', 'index.html');\n  // / URL related variables.\n  $subDir = securePath(str_replace($ServerRootDir.$DirSep, '', $InstLoc), $DangerousFiles, TRUE);\n  $partURL = securePath($URL.'/'.$subDir, $DangerousFiles, TRUE);\n  $FullURL = 'http'.$URLEcho.'://'.$partURL;\n  // / Directory related variables.\n  $convertDir0 = securePath($ConvertLoc.$DirSep.$SesHash, $DangerousFiles, $DangerousFiles, FALSE);\n  $ConvertDir = securePath($convertDir0.$DirSep.$SesHash2.$DirSep, $DangerousFiles, FALSE);\n  $ConvertTemp = securePath($InstLoc.'/DATA', $DangerousFiles, FALSE);\n  $convertTempDir0 = securePath($ConvertTemp.$DirSep.$SesHash, $DangerousFiles, FALSE);\n  $ConvertTempDir = securePath($convertTempDir0.$DirSep.$SesHash2.$DirSep, $DangerousFiles, FALSE);\n  $RequiredDirs = array($convertDir0, $ConvertDir, $ConvertTemp, $convertTempDir0, $ConvertTempDir);\n  $RequiredIndexes = array($ConvertTemp, $convertTempDir0, $ConvertTempDir);\n  // / A/V related variables.\n  $UserClamLogFileName = 'User_ClamScan_Virus_Scan_Report.txt';\n  $UserClamLogFile = $ConvertDir.$UserClamLogFileName;\n  $UserScanCoreFileName = 'User_ScanCore_Virus_Scan_Report.txt';\n  $UserScanCoreLogFile = $ConvertDir.$UserScanCoreFileName;\n  $ConsolidatedLogFileName = 'User_Consolidated_Virus_Scan_Report.txt';\n  $ConsolidatedLogFile = $ConvertTempDir.$ConsolidatedLogFileName;\n  // / Format related variables.\n  $ArchiveArray = $DearchiveArray = $DocumentArray = $SpreadsheetArray = $PresentationArray = $ImageArray = $MediaArray = $VideoArray = $StreamArray = $DrawingArray = $ModelArray = $SubtitleArray = $PDFWorkArr = array();\n  if (in_array('Archive', $SupportedConversionTypes)) $ArchiveArray = $UserArchiveArray;\n  if (in_array('Archive', $SupportedConversionTypes)) $DearchiveArray = $UserDearchiveArray;\n  if (in_array('Document', $SupportedConversionTypes)) $DocumentArray = $UserDocumentArray;\n  if (in_array('Document', $SupportedConversionTypes)) $SpreadsheetArray = $UserSpreadsheetArray;\n  if (in_array('Document', $SupportedConversionTypes)) $PresentationArray = $UserPresentationArray;\n  if (in_array('Image', $SupportedConversionTypes)) $ImageArray = $UserImageArray;\n  if (in_array('Audio', $SupportedConversionTypes)) $MediaInputArray = $UserMediaInputArray;\n  if (in_array('Audio', $SupportedConversionTypes)) $MediaOutputArray = $UserMediaOutputArray;\n  if (in_array('Video', $SupportedConversionTypes)) $VideoInputArray = $UserVideoInputArray;\n  if (in_array('Video', $SupportedConversionTypes)) $VideoOutputArray = $UserVideoOutputArray;\n  if (in_array('Stream', $SupportedConversionTypes) && in_array('Audio', $SupportedConversionTypes)) $StreamArray = $UserStreamArray;\n  if (in_array('Drawing', $SupportedConversionTypes)) $DrawingArray = $UserDrawingArray;\n  if (in_array('Model', $SupportedConversionTypes)) $ModelArray = $UserModelArray;\n  if (in_array('Subtitle', $SupportedConversionTypes)) $SubtitleInputArray = $UserSubtitleInputArray;\n  if (in_array('Subtitle', $SupportedConversionTypes)) $SubtitleOutputArray = $UserSubtitleOutputArray;\n  if (in_array('OCR', $SupportedConversionTypes) && in_array('Document', $SupportedConversionTypes)) $PDFWorkArr = $UserPDFWorkArr;\n  $Allowed = array_unique(array_merge(array_merge(array_merge(array_merge(array_merge(array_merge(array_merge(array_merge(array_merge(array_merge(array_merge(array_merge($ArchiveArray, $DearchiveArray), $DocumentArray), $SpreadsheetArray), $PresentationArray), $ImageArray), $MediaInputArray), $VideoInputArray), $StreamArray), $DrawingArray), $ModelArray), $SubtitleInputArray), $PDFWorkArr));\n  $SupportedFormatCount = count($Allowed);\n  // / Perform a version integrity check.\n  if ($HRConvertVersion === $Version) $GlobalsAreVerified = TRUE;\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $convertDir0 = $convertTempDir0 = $subDir = $partURL = NULL;\n  unset($convertDir0, $convertTempDir0, $subDir, $partURL);\n  return array($GlobalsAreVerified, $CoreLoaded); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to sanitize & verifie an array of files.\nfunction getFiles($pathToFiles) {\n  // / Set variables.\n  global $DangerousFiles, $DirSep, $PathExt;\n  $Files = $dirtyFileArr = array();\n  if (is_dir($pathToFiles)) $dirtyFileArr = @scandir($pathToFiles);\n  // / Iterate through each detected file & make sure it's not dangerous before adding it to the output array.\n  foreach ($dirtyFileArr as $dirtyFile) {\n    $dirtyExt = pathinfo($pathToFiles.$DirSep.$dirtyFile, $PathExt);\n    // / Make sure the file is safe to handle.\n    if (in_array(strtolower($dirtyExt), $DangerousFiles) or is_dir($pathToFiles.$DirSep.$dirtyFile)) continue;\n    array_push($Files, $dirtyFile); }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $dirtyFile = $pathToFiles = $dirtyFileArr = NULL;\n  unset($dirtyFile, $pathToFiles, $dirtyFileArr);\n  return $Files; }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to return the extension to a specified file.\nfunction getExtension($pathToFile) {\n  // / Set variables.\n  global $PathExt;\n  $Pathinfo = pathinfo($pathToFile, $PathExt);\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $pathToFile = NULL;\n  unset($pathToFile);\n  return $Pathinfo;  }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to return the filesize of a specified file.\nfunction getFilesize($File) {\n  // / Set variables.\n  $Size = @filesize($File);\n  // / Determine the most efficient unit of measure to represent the specified value in.\n  if ($Size < 1024) $Size = $Size.\" Bytes\";\n  elseif (($Size < 1048576) && ($Size > 1023)) $Size = round($Size / 1024, 1).\" KB\";\n  elseif (($Size < 1073741824) && ($Size > 1048575)) $Size = round($Size / 1048576, 1).\" MB\";\n  else $Size = round($Size/1073741824, 1).\" GB\";\n  return $Size; }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to return the file time of a specified symlink.\nfunction symlinkmtime($symlinkPath) {\n  // / Set variables.\n  $Stat = @lstat($symlinkPath);\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $symlinkPath = NULL;\n  unset($symlinkPath);\n  return isset($Stat['mtime']) ? $Stat['mtime'] : NULL; }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to return the file time of a specified file.\n// / Only returns a value if the specified file exists.\nfunction fileTime($filePath) {\n  if (file_exists($filePath)) $Stat = @filemtime($filePath);\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $filePath = NULL;\n  unset($filePath);\n  return $Stat; }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to test if a folder is empty.\n// / Returns TRUE when a folder is empty.\n// / Returns FALSE when a folder is not empty.\nfunction is_dir_empty($dir) {\n  // / Set variables.\n  $Check = TRUE;\n  // / Make sure the selected directory is actually a directory.\n  if (is_dir($dir)) {\n    // / Gather the contents of the directory.\n    $contents = scandir($dir);\n    // / Iterate through the contents of the directory & break once any valid file is found.\n    foreach ($contents as $content) if ($content == '.' or $content == '..') $Check = FALSE; }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $dir = $contents = $content = NULL;\n  unset($dir, $contents, $content); \n  return $Check; }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to scan an input file or folder for viruses with ClamAV.\nfunction virusScan($path) {\n  // / Set variables.\n  global $Verbose, $ClamLogFile, $AllowUserVirusScan, $Lol, $Lolol, $ApplicationName;\n  $ScanComplete = TRUE;\n  $VirusFound = FALSE;\n  $returnData = '';\n  $returnData = shell_exec(str_replace('  ', ' ', str_replace('  ', ' ', 'clamscan -r '.$path.' | grep FOUND >> '.$ClamLogFile)));\n  $clamLogFileDATA = @file_get_contents($ClamLogFile);\n  // / Check if ClamAV found an infection in the specified file.\n  if (strpos($clamLogFileDATA, 'Virus Detected') !== FALSE or strpos($clamLogFileDATA, 'FOUND') !== FALSE) {\n    $ScanComplete = $virusFound = TRUE;\n    // / If the specified file exists, is infected, is not a directory, & $AllowUserVirusScan is set to FALSE then delete the infected file. \n    if (file_exists($path)) if (is_file($path) && !is_dir($path) && !$AllowUserVirusScan) @unlink($path);\n    errorEntry('There were potentially infected files detected at '.$path.'!', 500, FALSE);\n    errorEntry('ClamAV output the following: '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))), 501, TRUE); }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $returnData = $clamLogFileDATA = $path = NULL;\n  unset($returnData, $clamLogFileDATA, $path);\n  return array($ScanComplete, $VirusFound); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to create required directories if they do not exist.\nfunction verifyRequiredDirs() {\n  // /  Set variables.\n  global $ConvertLoc, $RequiredDirs, $RequiredIndexes, $Time, $LogFile, $Verbose, $PermissionLevels;\n  $RequiredDirsExist = FALSE;\n  // / If the $ConvertLoc does not exist we stop execution rather than create one.\n  if (!is_dir($ConvertLoc)) errorEntry('The specified Data Storage Directory does not exist at '.$ConvertLoc.'!', 1000, TRUE);\n  // / Iterate through the array of required directories.\n  foreach ($RequiredDirs as $requiredDir) {\n    // / Check that the currently selected directory exists.\n    if (!is_dir($requiredDir)) {\n      if ($Verbose) logEntry('Created a directory at '.$requiredDir.'.');\n      // / Try to create the currently selected directory.\n      @mkdir($requiredDir, $PermissionLevels); }\n    // / Re-check to see if our attempt to create the directory was successful & log the result.\n    if (is_dir($requiredDir)) $RequiredDirsExist = TRUE;\n    else errorEntry('Could not create a directory at '.$requiredDir.'!', 1001, TRUE); }\n  // / Make sure that each required directory has an index.html file for document root protection.\n  foreach ($RequiredIndexes as $requiredIndex) @copy('index.html', $requiredIndex.'/index.html');\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $requiredDir = $requiredIndex = $MAKELogFile = NULL;\n  unset($requiredDir, $requiredIndex, $MAKELogFile); \n  return array($RequiredDirsExist, $RequiredDirs); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to clean a selection of files.\n// / Recursively deletes files.\n// / This function is extremely dangerous! Please handle with care.\nfunction cleanFiles($path) {\n  // / Set variables.\n  global $ConvertLoc, $ConvertTemp, $DefaultApps, $DirSep;\n  $variableIsSanitized = $i = $f = $CleanSuccess = $pathCheck = $loopCheck = FALSE;\n  list ($path, $variableIsSanitized) = sanitize($path, FALSE);\n  // / Make sure the selected directory is actually a directory.\n  if ($variableIsSanitized && is_dir($path)) {\n    $i = array_diff(scandir($path), array('..', '.'));\n    // / Iterate through each file object in the directory.\n    foreach ($i as $f) {\n      // / If the selected file object is a file, delete it.\n      if (is_file($path.$DirSep.$f) && !in_array(basename($path.$DirSep.$f), $DefaultApps)) @unlink($path.$DirSep.$f);\n      // / If the selected file object is a directory, try to delete it.\n      if (is_dir($path.$DirSep.$f) && !in_array(basename($path.$DirSep.$f), $DefaultApps) && is_dir_empty($path)) @rmdir($path.$DirSep.$f);\n      // / If the selected file object is a directory that still exists, run this function on it to remove any file objects it contains.\n      if (is_dir($path.$DirSep.$f) && !in_array(basename($path.$DirSep.$f), $DefaultApps) && !is_dir_empty($path)) $loopCheck = cleanFiles($path.$DirSep.$f); }\n    // / Once all file objects in the selected directory have been deleted, attempt to delete the selected directory.\n    if ($path !== $ConvertLoc && $path !== $ConvertTemp) @rmdir($path); }\n  // / Check if the function was successful. Note that $ConvertLoc and $ConvertTemp locations are not deleted..\n  $pathCheck = is_dir($path);\n  if ($pathCheck) if (is_dir_empty($path)) $CleanSuccess = TRUE;\n  if (!$pathCheck) $CleanSuccess = TRUE;\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $path = $i = $f = $variableIsSanitized = $pathCheck = $loopCheck = NULL;\n  unset($path, $i, $f, $variableIsSanitized, $pathCheck, $loopCheck); \n  return $CleanSuccess; }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to clean up old files in the $TempLoc.\nfunction cleanTempLoc() {\n  // / Set variables.\n  global $ConvertTemp, $DeleteThreshold, $DefaultApps, $DirSep, $PermissionLevels;\n  $TempLocDeepCleaned = FALSE;\n  $CleanedTempLoc = $loopCheck = TRUE;\n  // / Make sure the directory to be scanned exists.\n  if (file_exists($ConvertTemp)) {\n    $dFiles = array_diff(scandir($ConvertTemp), array('..', '.'));\n    $now = time();\n    // / Iterate through each subfolder in the directory.\n    foreach ($dFiles as $dFile) {\n      // / Validate the folder.\n      if (in_array($dFile, $DefaultApps)) continue;\n      $dFilePath = $ConvertTemp.$DirSep.$dFile;\n      if ($dFilePath == $ConvertTemp.'/index.html') continue;\n      // / See if the folder is due for deletion.\n      if ($now - fileTime($dFilePath) > ($DeleteThreshold * 60)) {\n        // / If the folder is due to be deleted, recursively delete it.\n        if (is_dir($dFilePath)) {\n          $TempLocDeepCleaned = TRUE;\n          @chmod ($dFilePath, $PermissionLevels);\n          $loopCheck = cleanFiles($dFilePath);\n          if (is_dir_empty($dFilePath)) @rmdir($dFilePath); } }\n      // / Check if the most recent iteration of the loop was successful.\n      if (!$loopCheck) $CleanedTempLoc = FALSE; $loopCheck = TRUE; } }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $dFiles = $dFile = $dFilePath = $now = $loopCheck = NULL;\n  unset($dFiles, $dFile, $dFilePath, $now, $loopCheck);\n  return array($CleanedTempLoc, $TempLocDeepCleaned); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to clean up old files in the $ConvertLoc.\nfunction cleanConvertLoc() {\n  // / Set variables.\n  global $ConvertLoc, $DeleteThreshold, $DefaultApps, $DirSep, $PermissionLevels;\n  $ConvertLocDeepCleaned = FALSE;\n  $CleanedConvertLoc = $loopCheck = TRUE;\n  // / Make sure the directory to be scanned exists.\n  if (file_exists($ConvertLoc)) {\n    $dFiles = array_diff(scandir($ConvertLoc), array('..', '.'));\n    $now = time();\n    // / Iterate through each subfolder in the directory.\n    foreach ($dFiles as $dFile) {\n      // / Validate the folder.\n      if (in_array($dFile, $DefaultApps)) continue;\n      $dFilePath = $ConvertLoc.$DirSep.$dFile;\n      // / See if the folder is due for deletion.\n      if ($now - fileTime($dFilePath) > ($DeleteThreshold * 60)) {\n        // / If the folder is due to be deleted, recursively delete it.\n        if (is_dir($dFilePath)) {\n          $ConvertLocDeepCleaned = TRUE;\n          @chmod ($dFilePath, $PermissionLevels);\n          $loopCheck = cleanFiles($dFilePath);\n          if (is_dir_empty($dFilePath)) @rmdir($dFilePath); } }\n      // / Check if the most recent iteration of the loop was successful.\n      if (!$loopCheck) $CleanedConvertLoc = FALSE; $loopCheck = TRUE; } }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $dFiles = $dFile = $dFilePath = $now = $loopCheck = NULL;\n  unset($dFiles, $dFile, $dFilePath, $now, $loopCheck);\n  return array($CleanedConvertLoc, $ConvertLocDeepCleaned); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to verify that the document conversion engine is installed & running.\nfunction verifyDocumentConversionEngine() {\n  // / Set variables.\n  global $Verbose, $Lol, $Lolol;\n  $DocEnginePID = 0;\n  $DocumentEngineStarted = FALSE;\n  $returnData = '';\n  // / Determine if the document conversion engine (Unoconv) is installed.\n  if (!file_exists('/usr/bin/unoconv')) errorEntry('Could not verify the document conversion engine installation at /usr/bin/unoconv!', 2000, TRUE);\n  if (file_exists('/usr/bin/unoconv')) {\n    if ($Verbose) logEntry('Verified the document conversion engine installation.');\n    $DocEnginePID = shell_exec('pgrep soffice.bin');\n    if ($Verbose) logEntry('The document conversion engine PID is: '.str_replace($Lol, '', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($DocEnginePID)))));\n    // / Determine if the document conversion engine is already running.\n    if ($DocEnginePID === 0 or $DocEnginePID === '' or $DocEnginePID === NULL or !$DocEnginePID) {\n      // / Try to start the document conversion engine.\n      if ($Verbose)logEntry('Starting the document conversion engine.');\n      $returnData = shell_exec('/usr/bin/unoconv -l &');\n      if ($Verbose && trim($returnData) !== '') logEntry('The document conversion engine PID is: '.str_replace($Lol, '', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($DocEnginePID))))); } }\n  $DocumentEnginePID = trim($DocEnginePID);\n  // / Write the document engine PID to the log file.\n  if ($DocEnginePID !== 0 && $DocEnginePID !== '' && $DocEnginePID !== NULL) {\n    $DocumentEngineStarted = TRUE;\n    if ($Verbose) logEntry('The document conversion engine is running.'); }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $returnData = NULL;\n  unset($returnData);\n  return array($DocumentEngineStarted, $DocEnginePID); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to convert document formats.\nfunction convertDocuments($pathname, $newPathname, $extension) {\n  // / Set variables.\n  global $Verbose, $Lol, $Lolol, $StopCounter, $SleepTimer;\n  $ConversionSuccess = $ConversionErrors = FALSE;\n  $returnData = '';\n  $stopper = 0;\n  $sleepTime = $SleepTimer;\n  // / The following code verifies that the document conversion engine is installed & running.\n  list ($documentEngineStarted, $documentEnginePID) = verifyDocumentConversionEngine();\n  if (!$documentEngineStarted) {\n    $ConversionErrors = TRUE;\n    errorEntry('Could not verify the document conversion engine!', 7000, FALSE); }\n  else if ($Verbose) logEntry('Verified the document conversion engine.');\n  // / The following code performs the actual document conversion.\n  if ($documentEngineStarted) {\n    if ($Verbose) logEntry('Converting document.');\n    // / This code will attempt the conversion up to $StopCounter number of times.\n    while (!file_exists($newPathname) && $stopper <= $StopCounter) {\n      // / If the last conversion attempt failed, wait a moment before trying again.\n      if ($stopper !== 0) sleep($sleepTime++);\n      // / Attempt the conversion.\n      $returnData = shell_exec('unoconv -o '.$newPathname.' -f '.$extension.' '.$pathname);\n      // / Count the number of conversions to avoid infinite loops.\n      $stopper++;\n      // / Stop attempting the conversion after $StopCounter number of attempts.\n      if ($stopper === $StopCounter) {\n        $ConversionErrors = TRUE;\n        errorEntry('The document converter timed out!', 7001, FALSE); } }\n    if ($Verbose && trim($returnData) !== '') logEntry('Unoconv returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData))))); }\n  if (file_exists($newPathname)) $ConversionSuccess = TRUE;\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $stopper = $pathname = $newPathname = $extension = $returnData = $documentEngineStarted = $documentEnginePID = $sleepTime = NULL;\n  unset($stopper, $pathname, $newPathname, $extension, $returnData, $documentEngineStarted, $documentEnginePID, $sleepTime);\n  return array($ConversionSuccess, $ConversionErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to convert image formats.\nfunction convertImages($pathname, $newPathname, $height, $width, $rotate) {\n  // / Set variables.\n  global $Verbose, $Lol, $Lolol, $StopCounter, $SleepTimer;\n  $ConversionSuccess = $ConversionErrors = $imgMethod = FALSE;\n  $returnData = $wh = '';\n  $stopper = $whx = 0;\n  $sleepTime = $SleepTimer;\n  // / Validate the height, width, & rotate arguments.\n  if (!is_numeric($height) or $height === FALSE) $height = 0;\n  if (!is_numeric($width) or $width === FALSE) $width = 0;\n  if (!is_numeric($rotate) or $rotate === FALSE) '-rotate '.$rotate;\n  $wxh = $width.'x'.$height;\n  if ($wxh == '0x0' or $wxh =='x0' or $wxh == '0x' or $wxh == '0' or $wxh == '00' or $wxh == '' or $wxh == ' ') $wh = '';\n  else $wh = '-resize '.$wxh.' ';\n  if ($Verbose) logEntry('Converting image.');\n  // / This code will attempt the conversion up to $StopCounter number of times.\n  while (!file_exists($newPathname) && $stopper <= $StopCounter) {\n    // / If the last conversion attempt failed, wait a moment before trying again.\n    if ($stopper !== 0) sleep($sleepTime++);\n    // / Attempt the conversion.\n    $returnData = shell_exec('convert -background none '.$wh.$rotate.' '.$pathname.' '.$newPathname);\n    // / Count the number of conversions to avoid infinite loops.\n    $stopper++;\n    // / Stop attempting the conversion after $StopCounter number of attempts.\n    if ($stopper === $StopCounter) {\n      $ConversionErrors = TRUE;\n      errorEntry('The image converter timed out!', 8000, FALSE); } }\n  if ($Verbose && trim($returnData) !== '') logEntry('ImageMagick returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n  if (file_exists($newPathname)) $ConversionSuccess = TRUE;\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $returnData = $stopper = $pathname = $newPathname = $height = $width = $extension = $wxh = $rotate = $imgMethod = $wh = $sleepTime = NULL;\n  unset($returnData, $stopper, $pathname, $newPathname, $height, $width, $extension, $wxh, $rotate, $imgMethod, $wh, $sleepTime);\n  return array($ConversionSuccess, $ConversionErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to convert 3D model formats.\nfunction convertModels($pathname, $newPathname) {\n  // / Set variables.\n  global $Verbose, $Lol, $Lolol, $StopCounter, $SleepTimer;\n  $ConversionSuccess = $ConversionErrors = FALSE;\n  $returnData = '';\n  $stopper = 0;\n  $sleepTime = $SleepTimer;\n  if ($Verbose) logEntry('Converting model.');\n  // / This code will attempt the conversion up to $StopCounter number of times.\n  while (!file_exists($newPathname) && $stopper <= $StopCounter) {\n    // / If the last conversion attempt failed, wait a moment before trying again.\n    if ($stopper !== 0) sleep($sleepTime++);\n    // / Attempt the conversion.\n    $returnData = shell_exec('meshlabserver -i '.$pathname.' -o '.$newPathname);\n    // / Count the number of conversions to avoid infinite loops.\n    $stopper++;\n    // / Stop attempting the conversion after $StopCounter number of attempts.\n    if ($stopper === $StopCounter) {\n      $ConversionErrors = TRUE;\n      errorEntry('The model converter timed out!', 9000, FALSE); } }\n  if ($Verbose && trim($returnData) !== '') logEntry('Meshlab returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n  if (file_exists($newPathname)) $ConversionSuccess = TRUE;\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $returnData = $stopper = $pathname = $newPathname = NULL;\n  unset($returnData, $stopper, $pathname, $newPathname);\n  return array($ConversionSuccess, $ConversionErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to convert 2D vector drawing formats.\nfunction convertDrawings($pathname, $newPathname) {\n  // / Set variables.\n  global $Verbose, $Lol, $Lolol, $StopCounter, $SleepTimer;\n  $ConversionSuccess = $ConversionErrors = FALSE;\n  $returnData = '';\n  $stopper = 0;\n  $sleepTime = $SleepTimer;\n  if ($Verbose) logEntry('Converting drawing.');\n  // / This code will attempt the conversion up to $StopCounter number of times.\n  while (!file_exists($newPathname) && $stopper <= $StopCounter) {\n    // / If the last conversion attempt failed, wait a moment before trying again.\n    if ($stopper !== 0) sleep($sleepTime++);\n    // / Attempt the conversion.\n    $returnData = shell_exec('dia '.$pathname.' -e '.$newPathname);\n    // / Count the number of conversions to avoid infinite loops.\n    $stopper++;\n    // / Stop attempting the conversion after $StopCounter number of attempts.\n    if ($stopper === $StopCounter) { \n      $ConversionErrors = TRUE;\n      errorEntry('The drawing converter timed out!', 10000, FALSE); } }\n  if ($Verbose && trim($returnData) !== '') logEntry('Dia returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n  if (file_exists($newPathname)) $ConversionSuccess = TRUE;\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $returnData = $stopper = $pathname = $newPathname = $sleepTime = NULL;\n  unset($returnData, $stopper, $pathname, $newPathname, $sleepTime);\n  return array($ConversionSuccess, $ConversionErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to convert video formats.\nfunction convertVideos($pathname, $newPathname) {\n  // / Set variables.\n  global $Verbose, $Lol, $Lolol, $StopCounter, $SleepTimer;\n  $ConversionSuccess = $ConversionErrors = FALSE;\n  $returnData = '';\n  $stopper = 0;\n  $sleepTime = $SleepTimer;\n  if ($Verbose) logEntry('Converting video.');\n  // / This code will attempt the conversion up to $StopCounter number of times.\n  while (!file_exists($newPathname) && $stopper <= $StopCounter) {\n    // / If the last conversion attempt failed, wait a moment before trying again.\n    if ($stopper !== 0) sleep($sleepTime++);\n    // / Attempt the conversion.\n    $returnData = shell_exec('ffmpeg -i '.$pathname.' -c:v libx264 '.$newPathname);\n    // / Count the number of conversions to avoid infinite loops.\n    $stopper++;\n    // / Stop attempting the conversion after $StopCounter number of attempts.\n    if ($stopper === $StopCounter) {\n      $ConversionErrors = TRUE;\n      errorEntry('The video converter timed out!', 11000, FALSE); } }\n  if ($Verbose && trim($returnData) !== '') logEntry('Ffmpeg returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n  if (file_exists($newPathname)) $ConversionSuccess = TRUE;\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $returnData = $stopper = $pathname = $newPathname = $sleepTime = NULL;\n  unset($returnData, $stopper, $pathname, $newPathname, $sleepTime);\n  return array($ConversionSuccess, $ConversionErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to convert subtitle formats.\nfunction convertSubtitles($pathname, $newPathname) {\n  // / Set variables.\n  global $Verbose, $Lol, $Lolol, $StopCounter, $SleepTimer;\n  $ConversionSuccess = $ConversionErrors = FALSE;\n  $returnData = '';\n  $stopper = 0;\n  $sleepTime = $SleepTimer;\n  if ($Verbose) logEntry('Converting subtitle.');\n  // / This code will attempt the conversion up to $StopCounter number of times.\n  while (!file_exists($newPathname) && $stopper <= $StopCounter) {\n    // / If the last conversion attempt failed, wait a moment before trying again.\n    if ($stopper !== 0) sleep($sleepTime++);\n    // / Attempt the conversion.\n    $returnData = shell_exec('ffmpeg -i '.$pathname.' '.$newPathname);\n    // / Count the number of conversions to avoid infinite loops.\n    $stopper++;\n    // / Stop attempting the conversion after $StopCounter number of attempts.\n    if ($stopper === $StopCounter) {\n      $ConversionErrors = TRUE;\n      errorEntry('The subtitle converter timed out!', 22000, FALSE); } }\n  if ($Verbose && trim($returnData) !== '') logEntry('Ffmpeg returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n  if (file_exists($newPathname)) $ConversionSuccess = TRUE;\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $returnData = $stopper = $pathname = $newPathname = $sleepTime = NULL;\n  unset($returnData, $stopper, $pathname, $newPathname, $sleepTime);\n  return array($ConversionSuccess, $ConversionErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to convert stream formats.\nfunction convertStreams($pathname, $newPathname) {\n  // / Set variables.\n  global $Verbose, $Lol, $Lolol, $StopCounter, $SleepTimer;\n  $ConversionSuccess = $ConversionErrors = FALSE;\n  $returnData = '';\n  $stopper = 0;\n  $sleepTime = $SleepTimer;\n  if ($Verbose) logEntry('Converting stream.');\n  // / This code will attempt the conversion up to $StopCounter number of times.\n  while (!file_exists($newPathname) && $stopper <= $StopCounter) {\n    // / If the last conversion attempt failed, wait a moment before trying again.\n    if ($stopper !== 0) sleep($sleepTime++);\n    // / Attempt the conversion.\n    $returnData = shell_exec('ffmpeg -protocol_whitelist file,http,https,tcp,tls,crypto -i '.$pathname.' -c copy '.$newPathname);\n    // / Count the number of conversions to avoid infinite loops.\n    $stopper++;\n    // / Stop attempting the conversion after $StopCounter number of attempts.\n    if ($stopper === $StopCounter) {\n      $ConversionErrors = TRUE;\n      errorEntry('The stream converter timed out!', 21000, FALSE); } }\n  if ($Verbose && trim($returnData) !== '') logEntry('Ffmpeg returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n  if (file_exists($newPathname)) $ConversionSuccess = TRUE;\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $returnData = $stopper = $pathname = $newPathname = $sleepTime = NULL;\n  unset($returnData, $stopper, $pathname, $newPathname, $sleepTime);\n  return array($ConversionSuccess, $ConversionErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to convert audio formats.\nfunction convertAudio($pathname, $newPathname, $extension, $bitrate) {\n  // / Set variables.\n  global $Verbose, $Lol, $Lolol, $StopCounter, $SleepTimer;\n  $ConversionSuccess = $ConversionErrors = FALSE;\n  $returnData = '';\n  $stopper = 0;\n  $sleepTime = $SleepTimer;\n  if ($extension === 'mkv') $extension = 'matroska';\n  $ext = ' -f '.$extension;\n  // / Determine if the bitrate is being set.\n  if (!is_numeric($bitrate) or $bitrate === FALSE) $bitrate = 'auto';\n  if ($bitrate = 'auto') $br = ' ';\n  elseif ($bitrate != 'auto' ) $br = (' -b:'.$bitrate.' ');\n  $ConversionSuccess = $ConversionErrors = FALSE;\n  if ($Verbose) logEntry('Converting audio.');\n  // / This code will attempt the conversion up to $StopCounter number of times.\n  while (!file_exists($newPathname) && $stopper <= $StopCounter) {\n    // / If the last conversion attempt failed, wait a moment before trying again.\n    if ($stopper !== 0) sleep($sleepTime++);\n    // / Attempt the conversion.\n    logEntry('ffmpeg -y -i '.$pathname.$ext.$br.$newPathname);\n    $returnData = shell_exec('ffmpeg -y -i '.$pathname.$ext.$br.$newPathname);\n    // / Count the number of conversions to avoid infinite loops.\n    $stopper++;\n    // / Stop attempting the conversion after $StopCounter number of attempts.\n    if ($stopper === $StopCounter) {\n      $ConversionErrors = TRUE;\n      errorEntry('The audio converter timed out!', 12000, FALSE); } }\n  if ($Verbose && trim($returnData) !== '') logEntry('Ffmpeg returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n  if (file_exists($newPathname)) $ConversionSuccess = TRUE;\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $returnData = $stopper = $pathname = $newPathname = $ext = $extension = $sleepTime = NULL;\n  unset($returnData, $stopper, $pathname, $newPathname, $ext, $extension, $sleepTime);\n  return array($ConversionSuccess, $ConversionErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to convert archive & disk image formats.\nfunction convertArchives($pathname, $newPathname, $extension) {\n  // / Set variables.\n  global $Verbose, $ConvertDir, $Lol, $Lolol, $StopCounter, $SleepTimer, $PathExt, $PermissionLevels, $RARArchiveMethod;\n  $ConversionSuccess = $ConversionErrors = FALSE;\n  $returnData = '';\n  $filename = pathinfo($pathname, PATHINFO_FILENAME);\n  $safedir2 = $ConvertDir.$filename;\n  $safedir3 = $safedir2.'.7z';\n  $safedir4 = $safedir2.'.zip';\n  $array7zo = array('7z', 'cbz', 'cbr');\n  $arrayzipo = array('zip');\n  $array7zo2 = array('vhd', 'vdi', 'iso');\n  $arraytaro = array('tar.gz', 'tar.bz2', 'tar');\n  $arrayraro = array('rar');\n  $rarMethod = 'other';\n  $stopper = 0;\n  $sleepTime = $SleepTimer;\n  $oldExtension =  pathinfo($pathname, $PathExt);\n  // / Create a folder to contain extracted files.\n  @mkdir($safedir2, $PermissionLevels);\n  if (!is_dir($safedir2)) $ConversionErrors = TRUE;\n  // / Check if output files already exist & delete them if they do.\n  if (file_exists($safedir3)) @unlink($safedir3);\n  if (file_exists($safedir4)) @unlink($safedir4);\n  if ($Verbose) logEntry('Extracting file '.$pathname,' to '.$safedir2.'.');\n  // / Code to Extract the selected archive.\n  // / Currently only 7z is used, but this code exists to give flexibility.\n  // / At one time I tried using zip for zip, rar for rar, ect.\n  // / I determined that 7z was the most reliable in all cases.\n  // / However that may some day change, so the code exists to allow future granularity.\n  if (in_array(strtolower($oldExtension), $arrayzipo)) $returnData = shell_exec('7z x -aoa '.$pathname.' -o'.$safedir2);\n  if (in_array(strtolower($oldExtension), $array7zo)) $returnData = shell_exec('7z x -aoa '.$pathname.' -o'.$safedir2);\n  if (in_array(strtolower($oldExtension), $array7zo2)) $returnData = shell_exec('7z x -y '.$pathname.' -o'.$safedir2);\n  if (in_array(strtolower($oldExtension), $arrayraro)) $returnData = shell_exec('7z x -aoa '.$pathname.' -o'.$safedir2);\n  if (in_array(strtolower($oldExtension), $arraytaro)) $returnData = shell_exec('7z x -aoa '.$pathname.' -o'.$safedir2);\n  if ($Verbose) logEntry('The extractor returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n  if ($Verbose) logEntry('Archiving file '.$safedir2.' to '.$newPathname.'.');\n  // / Code to rearchive archive files using 7z.\n  if (in_array($extension, $array7zo)) {\n    // / This code will attempt the archive operation up to $StopCounter number of times.\n    while ($stopper <= $StopCounter) {\n      // / If the last conversion attempt failed, wait a moment before trying again.\n      if ($stopper !== 0) sleep($sleepTime++);\n      // / Attempt the conversion.\n      $returnData = shell_exec('7z a -t'.$extension.' '.$newPathname.' '.$safedir2);\n      if ($Verbose && trim($returnData) !== '') logEntry('The archiver returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n      // / Count the number of conversions to avoid infinite loops.\n      $stopper++;\n    // / Stop attempting the archive operation after $StopCounter number of attempts.\n      if ($stopper === $StopCounter) {\n        $ConversionErrors = TRUE;\n        errorEntry('The archiver timed out!', 13001, FALSE); } } }\n  // / Code to rearchive disk image files using mkisofs.\n  if (in_array($extension, $array7zo2)) {\n    // / This code will attempt the archive operation up to $StopCounter number of times.\n    while ($stopper <= $StopCounter) {\n      // / If the last conversion attempt failed, wait a moment before trying again.\n      if ($stopper !== 0) sleep($sleepTime++);\n      // / Attempt the conversion.\n      $returnData = shell_exec('mkisofs -o '.$newPathname.' '.$safedir2);\n      if ($Verbose && trim($returnData) !== '') logEntry('The archiver returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n      // / Count the number of conversions to avoid infinite loops.\n      $stopper++;\n    // / Stop attempting the archive operation after $StopCounter number of attempts.\n      if ($stopper === $StopCounter) {\n        $ConversionErrors = TRUE;\n        errorEntry('The archiver timed out!', 13002, FALSE); } } }\n  // / Code to rearchive archive files using zip.\n  if (in_array($extension, $arrayzipo)) {\n    // / This code will attempt the archive operation up to $StopCounter number of times.\n    while ($stopper <= $StopCounter) {\n      // / If the last conversion attempt failed, wait a moment before trying again.\n      if ($stopper !== 0) sleep($sleepTime++);\n      // / Attempt the conversion.\n      $returnData = shell_exec('zip -r -j '.$newPathname.' '.$safedir2);\n      if ($Verbose && trim($returnData) !== '') logEntry('The archiver returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n      // / Count the number of conversions to avoid infinite loops.\n      $stopper++;\n    // / Stop attempting the archive operation after $StopCounter number of attempts.\n      if ($stopper === $StopCounter) {\n        $ConversionErrors = TRUE;\n        errorEntry('The archiver timed out!', 13003, FALSE); } } }\n  // / Code to rearachive archive files using tar.\n  if (in_array($extension, $arraytaro)) {\n    // / This code will attempt the archive operation up to $StopCounter number of times.\n    while ($stopper <= $StopCounter) {\n      // / If the last conversion attempt failed, wait a moment before trying again.\n      if ($stopper !== 0) sleep($sleepTime++);\n      // / Attempt the conversion.\n      $returnData = shell_exec('tar -cjf '.$newPathname.' -C '.$safedir2.' .');\n      if ($Verbose && trim($returnData) !== '') logEntry('The archiver returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n      // / Count the number of conversions to avoid infinite loops.\n      $stopper++;\n    // / Stop attempting the archive operation after $StopCounter number of attempts.\n      if ($stopper === $StopCounter) {\n        $ConversionErrors = TRUE;\n        errorEntry('The archiver timed out!', 13004, FALSE); } } }\n  // / Code to rearchive archive files using rar.\n  if (in_array($extension, $arrayraro)) {\n    if ($RARArchiveMethod === 'rar' && file_exists('/usr/bin/rar')) $rarMethod = 'rar';\n    else $rarMethod = 'other';\n    // / This code will attempt the archive operation up to $StopCounter number of times.\n    while ($stopper <= $StopCounter) {\n      // / If the last conversion attempt failed, wait a moment before trying again.\n      if ($stopper !== 0) sleep($sleepTime++);\n      // / Attempt the conversion.\n      if ($rarMethod === 'rar') $returnData = shell_exec('rar a -ep1 -r '.$newPathname.' '.$safedir2);\n      else $returnData = shell_exec('7z a -t'.$extension.' '.$newPathname.' '.$safedir2);\n      if ($Verbose && trim($returnData) !== '') logEntry('The archiver returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n      // / Count the number of conversions to avoid infinite loops.\n      $stopper++;\n    // / Stop attempting the archive operation after $StopCounter number of attempts.\n      if ($stopper === $StopCounter) {\n        $ConversionErrors = TRUE;\n        errorEntry('The archiver timed out!', 13005, FALSE); } } }\n  // / Check if any errors occurred.\n  if (!file_exists($newPathname)) {\n    $ConversionErrors = TRUE;\n    errorEntry('The archiver failed to produce an archive!', 13000, FALSE); }\n  else $ConversionSuccess = TRUE;\n  // / Code to clean up temporary files & directories.\n  cleanFiles($safedir2);\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $filename = $safedir2 = $safedir3 = $safedir4 = $oldExtension = $returnData = $pathname = $newPathname = $extension = $array7zo = $arrayzipo = $array7zo2 = $arraytaro = $arrayraro = $sleepTime = $rarMethod = NULL;\n  unset($filename, $safedir2, $safedir3, $safedir4, $oldExtension, $returnData, $pathname, $newPathname, $extension, $array7zo, $arrayzipo, $array7zo2, $arraytaro, $arrayraro, $sleepTime, $rarMethod);\n  return array($ConversionSuccess, $ConversionErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to convert a file based on a pre-determined input type and return the results.\nfunction convert($type, $pathname, $newPathname, $extension, $height, $width, $rotate, $bitrate) {\n  // / Set variables.\n  global $Verbose, $SupportedConversionTypes;\n  $ConversionSuccess = $ConversionErrors = FALSE;\n  // / Check that the required conversion type is allowed.\n  if (in_array($type, $SupportedConversionTypes)) { \n    if ($type === 'Document') list ($ConversionSuccess, $ConversionErrors) = convertDocuments($pathname, $newPathname, $extension);\n    if ($type === 'Image') list ($ConversionSuccess, $ConversionErrors) = convertImages($pathname, $newPathname, $height, $width, $rotate);\n    if ($type === 'Model') list ($ConversionSuccess, $ConversionErrors) = convertModels($pathname, $newPathname);\n    if ($type === 'Drawing') list ($ConversionSuccess, $ConversionErrors) = convertDrawings($pathname, $newPathname);\n    if ($type === 'Video') list ($ConversionSuccess, $ConversionErrors) = convertVideos($pathname, $newPathname);\n    if ($type === 'Subtitle') list ($ConversionSuccess, $ConversionErrors) = convertSubtitles($pathname, $newPathname);\n    if ($type === 'Stream') list ($ConversionSuccess, $ConversionErrors) = convertStreams($pathname, $newPathname);\n    if ($type === 'Audio') list ($ConversionSuccess, $ConversionErrors) = convertAudio($pathname, $newPathname, $extension, $bitrate);\n    if ($type === 'Archive') list ($ConversionSuccess, $ConversionErrors) = convertArchives($pathname, $newPathname, $extension); }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $type = $pathname = $newPathname = $extension = $height = $width = $rotate = $bitrate = NULL;\n  unset($type, $pathname, $newPathname, $extension, $height, $width, $rotate, $bitrate);\n  return array($ConversionSuccess, $ConversionErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to syncronize the users AppData between the $ConvertLoc and the $InstLoc.\nfunction syncLocations() {\n  // / Set variables.\n  global $ConvertDir, $ConvertTempDir, $DirSep, $PermissionLevels, $ApacheUser;\n  $LocationsSynced = TRUE;\n  // / Iterate through each file object in the $ConvertDir, skipping dots.\n  foreach ($iterator = new \\RecursiveIteratorIterator (new \\RecursiveDirectoryIterator ($ConvertDir, \\RecursiveDirectoryIterator::SKIP_DOTS), \\RecursiveIteratorIterator::SELF_FIRST) as $item) {\n    // / Verify the permissions on the file object.\n    @chmod($item, $PermissionLevels);\n    @chown($item, $ApacheUser);\n    // / If the file object is a directory, make a corresponding directory in the $ConvertTempDir.\n    if (is_dir($item)) {\n      if (!file_exists($ConvertTempDir.$DirSep.$iterator->getSubPathName())) @mkdir($ConvertTempDir.$DirSep.$iterator->getSubPathName(), $PermissionLevels); }\n    // / If the file object is a file that does not already exist in the $ConvertTempDir, create a symlink to it in the $ConvertTempDir.\n    else if (!is_link($ConvertTempDir.$DirSep.$iterator->getSubPathName()) or !file_exists($ConvertTempDir.$DirSep.$iterator->getSubPathName())) symlink($item, $ConvertTempDir.$DirSep.$iterator->getSubPathName()); }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $iterator = $item = NULL;\n  unset($iterator, $item);\n  return $LocationsSynced; }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to verify files before performing operations on them.\nfunction verifyFile($file, $UserFilename, $UserExtension, $clean, $copy, $skip) {\n  global $DangerousFiles, $ConvertDir, $ConvertTempDir, $Allowed, $Verbose, $PathExt;\n  $FileIsVerified = $Pathname = $OldPathname = $NewPathname = $variableIsSanitized = FALSE;\n  // / Check to make sure all iteration specific required variables are properly sanitized.\n  list ($file, $variableIsSanitized) = sanitize($file, FALSE);\n  list ($Pathname, $variableIsSanitized) = sanitize($ConvertTempDir.$file, FALSE);\n  list ($OldPathname, $variableIsSanitized) = sanitize($ConvertDir.$file, FALSE);\n  $OldExtension = pathinfo($Pathname, $PathExt);\n  // / Check if the selected file is safe to handle.\n  if (in_array(strtolower($OldExtension), $Allowed) && !in_array(strtolower($OldExtension), $DangerousFiles) && $file !== '.' && $file !== '..' && $file !== 'index.html') $FileIsVerified = TRUE;\n  if (!$FileIsVerified) errorEntry('The file '.$file.' failed first stage validation!', 14000, TRUE);\n  if ($FileIsVerified) {\n    if ($Verbose && file_exists($Pathname) && $clean) logEntry('Deleting stale file '.$Pathname.'.');\n    // / Remove the temp file if one already exists.\n    if (file_exists($Pathname) && $clean) @unlink($Pathname);\n    // / Check to make sure that the stale file was deleted if required or creating a new one will cause problems.\n    if (file_exists($Pathname) && $clean) errorEntry('Could not delete stale file '.$Pathname.'!', 14001, TRUE);\n    if ($Verbose && file_exists($OldPathname) && $copy) logEntry('Copying file '.$file.' to '.$Pathname.'.');\n    // / Copy the file to the working directory.\n    if (file_exists($OldPathname) && $copy) @copy($OldPathname, $Pathname);\n    // / Check to make sure the temporary file was created.\n    if (!$skip) if (!file_exists($Pathname)) errorEntry('The file '.$Pathname.' failed second stage validation!', 14002, TRUE);\n    if (file_exists($Pathname)) if ($Verbose  && $copy) logEntry('Copied file '.$file.'.');\n    // / If the $UserFilename & $UserExtension variables are valid we can prepare for a $NewPathfile.\n    if ($UserFilename && $UserExtension) {\n      // / Define the $NewPathname if required.\n      list ($NewPathname, $variableIsSanitized) = sanitize($ConvertDir.$UserFilename.'.'.$UserExtension, FALSE);\n      // / Make sure the $NewPathname is not a dangerous file.\n      if (in_array(strtolower($UserExtension), $DangerousFiles)) errorEntry('The file '.$file.' failed third stage validation!', 14003, TRUE);\n      if ($Verbose && file_exists($NewPathname) && $clean) logEntry('Deleting stale file '.$Pathname.'.');\n      // / Remove the $NewPathname file if it already exists.\n      if (file_exists($NewPathname) && $clean) @unlink($NewPathname);\n      // / Check to make sure that the stale file was deleted if required or creating a new one will cause problems.\n      if (file_exists($NewPathname) && $clean) errorEntry('Could not delete stale file '.$NewPathname.'!', 14004, TRUE); } }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $file = $variableIsSanitized = NULL;\n  unset($file, $variableIsSanitized);\n  return array($FileIsVerified, $Pathname, $OldPathname, $OldExtension, $NewPathname); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to build the GUI.\nfunction buildGUI($guiType, $ButtonCode) {\n  // / Set variables.\n  global $GuiFiles, $LanguageFiles, $LanguageStringsFile, $GuiHeaderFile, $GuiFooterFile, $GuiUI1File, $GuiUI2File, $CoreLoaded, $ConvertDir, $ConvertTempDir, $Token1, $Token2, $SesHash, $SesHash2, $SesHash3, $SesHash4, $Date, $Time, $TOSURL, $PPURL, $ShowFinePrint, $PDFWorkArr, $ArchiveArray, $DearchiveArray, $DocumentArray, $SpreadsheetArray, $ImageArray, $ModelArray, $DrawingArray, $VideoInputArray, $VideoOutputArray, $SubtitleInputArray, $SubtitleOutputArray, $StreamArray, $MediaInputArray, $MediaOutputArray, $PresentationArray, $ConvertGuiCounter1, $ConsolidatedLogFileName, $Alert, $Alert1, $Alert2, $Alert3, $FCPlural, $FCPlural1, $FCPlural2, $FCPlural3, $File, $Files, $FileCount, $SpinnerStyle, $SpinnerColor, $PacmanLoc, $Allowed, $AllowUserVirusScan, $AllowUserShare, $SupportedConversionTypes, $FullURL, $LanguageDir, $FaviconPath, $DropzonePath, $DropzoneStylesheetPath, $StylesheetPath, $JsLibraryPath, $JqueryPath, $GUIDirection, $SupportedFormatCount, $GUIAlignment, $HeaderDisplayed, $UIDisplayed, $FooterDisplayed, $LanguageStringsLoaded, $GUIDisplayed, $GuiResourcesDir, $GuiImageDir, $GuiCSSDir, $GuiJSDir;\n  $guiUIFile = $GuiUI1File;\n  $Files = array();\n  $FileCount = 0;\n  // / Make sure the $guiType is valid.\n  if (!is_numeric($guiType)) {\n    if ($guiType < 0) $guiType = 0;\n    if ($guiType > 0) $guiType = 1; }\n  // / Determine which loading indicator to use.\n  $PacmanLoc = $GuiImageDir.'pacman'.$SpinnerStyle.strtolower($SpinnerColor).'.gif';\n  if (!file_exists($PacmanLoc)) $PacmanLoc = $GuiImageDir.'pacman1grey.gif';\n  // / Gather a list of files.\n  if ($guiType === 2) {\n    $Files = getFiles($ConvertDir);\n    $FileCount = count($Files); }\n  // / Load language specific GUI elements, if there are any.\n  if (in_array($LanguageStringsFile, $LanguageFiles)) require_once($LanguageStringsFile);\n  // / Load the header.\n  if (in_array($GuiHeaderFile, $GuiFiles)) require_once($GuiHeaderFile);\n  // / Build and define the different GUI types that are available.\n  if ($guiType === 1) $guiUIFile = $GuiUI1File;\n  if ($guiType === 2) $guiUIFile = $GuiUI2File;\n  // / Build the specified GUI.\n  if (in_array($guiUIFile, $GuiFiles)) require_once($guiUIFile);\n  // / Load the footer.\n  if (in_array($GuiFooterFile, $GuiFiles)) require_once($GuiFooterFile);\n  // / Check if the required GUI elements were loaded.\n  if ($HeaderDisplayed && $UIDisplayed && $FooterDisplayed && $LanguageStringsLoaded) $GUIDisplayed = TRUE;\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $guiType = $languageUIFile = NULL; \n  unset($guiType, $languageUIFile); \n  return $GUIDisplayed; }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to display the GUI.\nfunction showGUI($ShowGUI, $ButtonCode) {\n  // / Set variables.\n  global $ButtonCode;\n  $GUIDisplayed = FALSE;\n  // / Determine whether to show a full or minimal GUI.\n  if (isset($ShowGUI)) if (!$ShowGUI) $_GET['noGui'] = TRUE;\n  // / Call the GUI from the selected language pack after files have been uploaded.\n  if (isset($_GET['showFiles'])) $GUIDisplayed = buildGui(2, $ButtonCode);\n  // / Call the GUI from the selected language pack before files have been uploaded.\n  if (!isset($_GET['showFiles'])) $GUIDisplayed = buildGui(1, $ButtonCode);\n  return $GUIDisplayed; }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to upload a selection of files.\nfunction uploadFiles() {\n  // / Set variables.\n  global $DangerousFiles, $VirusScan, $AllowUserVirusScan, $ConvertDir, $LogFile, $Verbose, $PathExt, $PermissionLevels, $Allowed;\n  $UploadComplete = $UploadErrors = $virusFound = $variableIsSanitized = FALSE;\n  $file = $f0 = $f1 = '';\n  // / Make sure the input files are formatted into an array.\n  if (!is_array($_FILES['file']['name'])) $_FILES['file']['name'] = array($_FILES['file']['name']);\n  // / Iterate through the array of input files.\n  foreach ($_FILES['file']['name'] as $file) {\n    $UploadComplete = FALSE;\n    // / Make sure the file is sanitized before processing it.\n    list ($file, $variableIsSanitized) = sanitize($file, TRUE);\n    if (!$variableIsSanitized or !is_string($file) or $file === '' or $file === '.' or $file === '..' or $file === 'index.html') {\n      $OperationErrors = TRUE;\n      errorEntry('Could not sanitize the input file!', 6000, FALSE); \n      continue; }\n    if ($Verbose) logEntry('User selected to Upload file '.$file.'.');\n    $f0 = pathinfo($file, $PathExt);\n    // / Make sure the file is not in the list of dangerous formats.\n    if (in_array(strtolower($f0), $DangerousFiles) or !in_array(strtolower($f0), $Allowed)) {\n      errorEntry('Unsupported file format, '.$f0.'!', 6001, FALSE);\n      continue; }\n    list ($f1, $variableIsSanitized) = sanitize($ConvertDir.pathinfo($file, PATHINFO_BASENAME), FALSE);\n    // / Code to remove an output file that already exists.\n    if (file_exists($f1)) @unlink($f1);\n    @copy($_FILES['file']['tmp_name'], $f1);\n    if (!file_exists($f1)) {\n      $UploadErrors = TRUE;\n      errorEntry('Could not upload file '.$file.' to '.$f1.'!', 6002, FALSE); }\n    else {\n      $UploadComplete = TRUE;\n      if ($Verbose) logEntry('Uploaded file '.$file.' to '.$f1.'.'); }\n    @chmod($f1, $PermissionLevels);\n    // / Scan with ClamAV if $AllowUserVirusScan is set to FALSE in config.php.\n    if (!$AllowUserVirusScan) {\n      // / Scan with ClamAV if $VirusScan is set to TRUE in config.php.\n      if ($VirusScan) {\n        if ($Verbose) logEntry('Starting virus scan.');\n        list ($scanComplete, $virusFound) = virusScan($f1);\n        if (!$scanComplete) errorEntry('Could not perform a virus scan!', 6003, TRUE);\n        if ($virusFound) errorEntry('Virus detected!', 6004, TRUE);\n        if ($Verbose) logEntry('Virus scan complete.'); } } }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $file = $f0 = $f1 = $variableIsSanitized = $scanComplete = $virusFound = NULL;\n  unset ($file, $f0, $f1, $variableIsSanitized, $scanComplete, $virusFound);\n  return array($UploadComplete, $UploadErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to upload a selection of files.\nfunction downloadFiles($Download) {\n  // / Set variables.\n  global $DangerousFiles, $Verbose, $PathExt, $Download, $ConvertDir, $ConsolidatedLogFileName, $Allowed;\n  $DownloadComplete = $DownloadErrors = $clean = $copy = $skip = $variableIsSanitized = FALSE;\n  $file = $f0 = '';\n  list ($Download, $variableIsSanitized) = sanitize($Download, FALSE);\n  // / Make sure the input files are formatted into an array.\n  if (!is_array($Download)) $Download = array($Download);\n  // / Iterate through the array of input files.\n  foreach ($Download as $file) {\n    $DownloadComplete = FALSE;\n    // / Make sure the file is sanitized before processing it.\n    list ($file, $variableIsSanitized) = sanitize($file, TRUE);\n    if (!$variableIsSanitized or !is_string($file) or $file === '' or $file === '.' or $file === '..' or $file === 'index.html') {\n      $OperationErrors = TRUE;\n      errorEntry('Could not sanitize the input file!', 3000, FALSE); \n      continue; }\n    if ($Verbose) logEntry('User selected to Download file '.$file.'.');\n    if ($file === $ConsolidatedLogFileName) $skip = TRUE;\n    else $clean = $copy = TRUE;\n    $f0 = pathinfo($file, $PathExt);\n    // / Make sure the file is not in the list of dangerous formats.\n    if (in_array(strtolower($f0), $DangerousFiles) or !in_array(strtolower($f0), $Allowed)) {\n      errorEntry('Unsupported file format, '.$f0.'!', 3004, FALSE);\n      continue; }\n    // / Make sure all iteration specific required variables are properly sanitized.\n    list ($fileIsVerified, $pathname, $oldPathname, $oldExtension, $newPathname) = verifyFile($file, FALSE, FALSE, $clean, $copy, $skip);\n    if (!$fileIsVerified) {\n      $ArchiveErrors = TRUE;\n      errorEntry('Could not verify the input file.', 3001, FALSE);\n      continue; }\n    // / Make sure that the file exists.\n    if (!file_exists($oldPathname) && !$skip) {\n      $DownloadErrors = TRUE;\n      errorEntry('File '.$file.' does not exist!', 3002, FALSE);\n      continue; }\n    if (!file_exists($pathname)) errorEntry('Could not verify the input file.', 3003, FALSE);\n    else {\n      if (!$DownloadErrors) $DownloadComplete = TRUE;\n      if ($Verbose) logEntry('Verified file'.$newPathname.'.'); } }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $file = $f0 = $clean = $copy = $skip = $variableIsSanitized = NULL;\n  unset ($file, $f0, $clean, $copy, $skip, $variableIsSanitized); \n  return array($DownloadComplete, $DownloadErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to delete a selection of files.\nfunction deleteFiles($FilesToDelete) {\n  // / Set variables.\n  global $DangerousFiles, $Verbose, $FilesToDelete, $ConvertDir, $ConvertTempDir;\n  $DeleteComplete = $DeleteErrors = $variableIsSanitized = FALSE;\n  $file = $f0 = $f1 = '';\n  list ($FilesToDelete, $variableIsSanitized) = sanitize($FilesToDelete, FALSE);\n  // / Make sure the input files are formatted into an array.\n  if (!is_array($FilesToDelete)) $FilesToDelete = array($FilesToDelete);\n  // / Iterate through the array of input files.\n  foreach ($FilesToDelete as $file) {\n    $DeleteComplete = FALSE;\n    // / Make sure the file is sanitized before processing it.\n    list ($file, $variableIsSanitized) = sanitize($file, TRUE);\n    if (!$variableIsSanitized or !is_string($file) or $file === '' or $file === '.' or $file === '..' or $file === 'index.html') {\n      $OperationErrors = TRUE;\n      errorEntry('Could not sanitize the input file!', 23000, FALSE); \n      continue; }\n    if ($Verbose) logEntry('User selected to Delete file '.$file.'.');\n    $f0 = pathinfo($file, $PathExt);\n    // / Make sure the file is not in the list of dangerous formats.\n    if (in_array(strtolower($f0), $DangerousFiles)) {\n      errorEntry('Unsupported file format, '.$f0.'!', 23001, FALSE);\n      continue; }\n    list ($f0, $variableIsSanitized) = sanitize($ConvertTempDir.pathinfo($file, PATHINFO_BASENAME), FALSE);\n    // / Code to remove the selected file from the $ConvertTempDir.\n    if (file_exists($f0)) @unlink($f1);\n    list ($f1, $variableIsSanitized) = sanitize($ConvertDir.pathinfo($file, PATHINFO_BASENAME), FALSE);\n    // / Code to remove the selected file from the $ConvertDir.\n    if (file_exists($f1)) @unlink($f1);\n    // / Check that the selected files were deleted.\n    if (!file_exists($f0) && !file_exists($f1)) {\n     if ($Verbose) logEntry('Deleted file '.$file.'.');\n     $DeleteComplete = TRUE; }\n    else {\n      $DeleteErrors = TRUE;\n      if ($Verbose) logEntry('Could not delete file '.$file.'!', 23002, FALSE); } }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $file = $f0 = $f1 = NULL;\n  unset($file, $f0, $f1);\n  return array($DeleteComplete, $DeleteErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to archive a selection of files.\nfunction archiveFiles($FilesToArchive, $UserFilename, $UserExtension) {\n  // / Set variables.\n  global $Verbose, $VirusScan, $ConvertTempDir, $Lol, $Lolol, $RARArchiveMethod;\n  $ArchiveComplete = $ArchiveErrors = $virusFound = $skip = $variableIsSanitized = FALSE;\n  $clean = $copy = TRUE;\n  $returnData = $file = '';\n  $rararr = array('rar');\n  $ziparr = array('zip');\n  $tararr = array('7z', 'tar', 'tar.gz', 'tar.bz2');\n  $isoarr = array('iso');\n  $rarMethod = 'other';\n  // / Make sure the input files are formatted into an array.\n  if (!is_array($FilesToArchive)) $FilesToArchive = array($FilesToArchive);\n  // / Iterate through the array of input files.\n  foreach ($FilesToArchive as $file) {\n    $ArchiveComplete = FALSE;\n    // / Make sure the file is sanitized before processing it.\n    list ($file, $variableIsSanitized) = sanitize($file, TRUE);\n    if (!$variableIsSanitized or !is_string($file) or $file === '' or $file === '.' or $file === '..' or $file === 'index.html') {\n      $OperationErrors = TRUE;\n      errorEntry('Could not sanitize the input file!', 4000, FALSE); \n      continue; }\n    // / Set the $clean & $copy arguments for the verifyFiles() function as needed,\n    if (count($FilesToArchive) > 1) $clean = FALSE; $copy = TRUE;\n    if ($Verbose) logEntry('User selected to Archive file '.$file.'.');\n    // / Verify the file before performing any operations on it.\n    list ($fileIsVerified, $pathname, $oldPathname, $oldExtension, $newPathname) = verifyFile($file, $UserFilename, $UserExtension, $clean, $copy, $skip);\n    if (!$fileIsVerified) {\n      $ArchiveErrors = TRUE;\n      errorEntry('Could not verify the input file.', 4001, FALSE);\n      continue; }\n    else if ($Verbose) logEntry('Verified file'.$newPathname.'.');\n    // / Scan with ClamAV if $VirusScan is set to TRUE in config.php.\n    if ($VirusScan) {\n      if ($Verbose) logEntry('Starting virus scan.');\n      list ($scanComplete, $virusFound) = virusScan($pathname);\n      if (!$scanComplete) errorEntry('Could not perform a virus scan!', 4002, TRUE);\n      if ($virusFound) errorEntry('Virus detected!', 4003, TRUE);\n      if ($Verbose) logEntry('Virus scan complete.'); }\n    // / Handle archiving of rar compatible files.\n    if (in_array($UserExtension, $rararr)) {\n      if ($RARArchiveMethod === 'rar') $rarMethod = 'rar';\n      else $rarMethod = 'other';\n      if ($rarMethod === 'rar' && file_exists('/usr/bin/rar')) $returnData = shell_exec('rar a -ep '.$newPathname.' '.$pathname);\n      else $returnData = shell_exec('7z a '.$newPathname.' '.$pathname); }\n    // / Handle archiving of .zip compatible files.\n    if (in_array($UserExtension, $ziparr)) $returnData = shell_exec('zip -j '.$newPathname.' '.$pathname);\n    // / Handle archiving of 7zipper compatible files.\n    if (in_array($UserExtension, $tararr)) $returnData = shell_exec('7z a '.$newPathname.' '.$pathname);\n    // / Handle archiving of mkisofs compatible files.\n    if (in_array($UserExtension, $isoarr)) $returnData = shell_exec('mkisofs -o '.$newPathname.' '.$pathname);\n    if ($Verbose && trim($returnData) !== '') logEntry('The archiver returned the following: '.$Lol.'  ');\n    if (!file_exists($newPathname)) {\n      $ArchiveError = TRUE;\n      errorEntry('Could not archive file '.$pathname.' to '.$newPathname.'!', 4004, FALSE); }\n    else {\n      $ArchiveComplete = TRUE;\n      if ($Verbose) logEntry('Archived file '.$pathname.' to '.$newPathname.'.'); } }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $file = $rararr = $ziparr = $tararr = $isoarr = $pathname = $userFileName = $oldPathname = $newPathname = $scanComplete = $virusFound = $returnData = $variableIsSanitized = $fileIsVerified = $oldExtension = $clean = $copy = $skip = $variableIsSanitized = $rarMethod = NULL;\n  unset ($file, $rararr, $ziparr, $tararr, $isoarr, $pathname, $userFileName, $oldPathname, $newPathname, $scanComplete, $virusFound, $returnData, $variableIsSanitized, $fileIsVerified, $oldExtension, $clean, $copy, $skip, $variableIsSanitized, $rarMethod); \n  return array($ArchiveComplete, $ArchiveErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to convert a selection of files.\nfunction convertFiles($ConvertSelected, $UserFilename, $UserExtension, $Height, $Width, $Rotate, $Bitrate) {\n  // / Set variables.\n  global $Verbose, $VirusScan, $DocumentArray, $ImageArray, $ModelArray, $DrawingArray, $VideoInputArray, $SubtitleInputArray, $StreamArray, $MediaInputArray, $ArchiveArray;\n  $MainConversionSuccess = $MainConversionErrors = $virusFound = $skip = $isExtensionSupported = $fileIsVerified = $variableIsSanitized = FALSE;\n  $clean = $copy = TRUE;\n  $docarray =  $DocumentArray;\n  $imgarray = $ImageArray;\n  $modelarray = $ModelArray;\n  $drawingarray = $DrawingArray;\n  $videoarray =  $VideoInputArray;\n  $subtitleArray = $SubtitleInputArray;\n  $streamarray = $StreamArray;\n  $audioarray =  $MediaInputArray;\n  $archarray = $ArchiveArray; \n  $pdfarray = array('pdf');\n  $array7z = array('7z', 'zip', 'rar', 'iso', 'vhd');\n  $array7zo = array('7z', 'zip');\n  $arrayzipo = array('zip');\n  $array7zo2 = array('vhd', 'iso');\n  $arraytaro = array('tar.gz', 'tar.bz2', 'tar');\n  $arrayraro = array('rar');\n  $arrayArray = array('Document' => $docarray, 'Image' => $imgarray, 'Model' => $modelarray, 'Drawing' => $drawingarray, 'Video' => $videoarray, 'Subtitle' => $subtitleArray, 'Stream' => $streamarray, 'Audio' => $audioarray, 'Archive' => $archarray);\n  $arrKey = 0;\n  $file = '';\n  // / Make sure the input files are formatted into an array.\n  if (!is_array($ConvertSelected)) $ConvertSelected = array($ConvertSelected);\n  // / Iterate through the array of input files.\n  foreach ($ConvertSelected as $file) {\n    $MainConversionSuccess = FALSE;\n    // / Make sure the file is sanitized before processing it.\n    list ($file, $variableIsSanitized) = sanitize($file, TRUE);\n    if (!$variableIsSanitized or !is_string($file) or $file === '' or $file === '.' or $file === '..' or $file === 'index.html') {\n      $OperationErrors = TRUE;\n      errorEntry('Could not sanitize the input file!', 5000, FALSE); \n      continue; }\n    // / Set the $clean & $copy arguments for the verifyFiles() function as needed,\n    if (count($ConvertSelected) > 1) $clean = FALSE; $copy = TRUE;\n    if (in_array($UserExtension, $archarray)) $clean = FALSE;\n    if (in_array($UserExtension, $docarray)) $clean = FALSE;\n    if ($Verbose) logEntry('User selected to Convert file '.$file.'.');\n    // / Verify the file before performing any operations on it.\n    list ($fileIsVerified, $pathname, $oldPathname, $oldExtension, $newPathname) = verifyFile($file, $UserFilename, $UserExtension, $clean, $copy, $skip);\n    if (!$fileIsVerified) {\n      $MainConversionErrors = TRUE;\n      errorEntry('Could not verify the input file.', 5001, FALSE);\n      continue; }\n    else if ($Verbose) logEntry('Verified file '.$newPathname.'.');\n    // / Scan with ClamAV if $VirusScan is set to TRUE in config.php.\n    if ($VirusScan) {\n      if ($Verbose) logEntry('Starting virus scan.');\n      list ($scanComplete, $virusFound) = virusScan($newPathname);\n      if (!$scanComplete) errorEntry('Could not perform a virus scan!', 5002, TRUE);\n      if ($virusFound) errorEntry('Virus detected!', 5003, TRUE);\n      if ($Verbose) logEntry('Virus scan complete.'); }\n    // / Iterate through the array of supported formats & call the appropriate code to perform the conversion.\n    foreach ($arrayArray as $arrKey => $arrArray) {\n      // / Code to convert & manipulate files.\n      if (in_array(strtolower($oldExtension), $arrArray)) {\n        $isExtensionSupported = TRUE;\n        list ($ConversionSuccess, $ConversionErrors) = convert($arrKey, $pathname, $newPathname, $UserExtension, $Height, $Width, $Rotate, $Bitrate);\n        if (!$ConversionSuccess) {\n          $MainConversionSuccess = FALSE;\n          errorEntry('Could not convert the selected '.$arrKey.'!', 5004, FALSE); }\n        if ($ConversionErrors) {\n          $MainConversionErrors = TRUE;\n          logEntry($arrKey.' conversion finished with errors.'); }\n        if ($Verbose) logEntry($arrKey.' Conversion Complete'); } }\n    // / Error handler & logger for converting files.\n    if (!$isExtensionSupported) errorEntry('File extension '.$oldExtension.' is not supported!', 5006, FALSE);\n    if (!file_exists($newPathname)) {\n      $MainConversionErrors = TRUE;\n      $MainConversionSuccess = FALSE;\n      errorEntry('Could not create '.$newPathname.' from '.$oldPathname.'!', 5005, FALSE); }\n    if (file_exists($newPathname)) {\n      $MainConversionSuccess = TRUE;\n      if ($Verbose) logEntry('Created a file at '.$newPathname.'.'); } }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $file = $pathname = $oldPathname = $oldExtension= $newPathname = $docarray = $imgarray = $audioarray = $videoarray = $subtitleArray = $streamarray = $modelarray = $drawingarray = $pdfarray = $archarray = $array7z = $array7zo = $arrayzipo = $arraytaro = $arrayraro = $arrayArray = $fileIsVerified = $scanComplete = $virusFound = $variableIsSanitized = $arrKey = $clean = $copy = $skip = $isExtensionSupported = NULL;\n  unset ($file, $pathname, $oldPathname, $oldExtension, $newPathname, $docarray, $imgarray, $audioarray, $videoarray, $subtitleArray, $streamarray, $modelarray, $drawingarray, $pdfarray, $archarray, $array7z, $array7zo, $arrayzipo, $arraytaro, $arrayraro, $arrayArray, $fileIsVerified, $scanComplete, $virusFound, $variableIsSanitized, $arrKey, $clean, $copy, $skip, $isExtensionSupported);\n  return array($MainConversionSuccess, $MainConversionErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to OCR a selection of files.\nfunction ocrFiles($PDFWorkSelected, $UserFilename, $UserExtension, $Method) {\n  // / Set variables.\n  global $Verbose, $VirusScan, $ConvertTempDir, $ConvertDir, $Lol, $Lolol, $Append;\n  $OperationSuccessful = $OperationErrors = $multiple = $virusFound = $skip = $variableIsSanitized = FALSE;\n  $clean = $copy = TRUE;\n  $returnData = $file = '';\n  $doc1array =  array('txt', 'pages', 'doc', 'xls', 'xlsx', 'docx', 'rtf', 'odt', 'ods');\n  $img1array = array('jpg', 'jpeg', 'bmp', 'webp', 'png', 'gif');\n  $pdf1array = array('pdf');\n  $allowedOCR =  array('txt', 'doc', 'docx', 'rtf' ,'xls', 'xlsx', 'ods', 'odt', 'jpg', 'jpeg', 'bmp', 'webp', 'png', 'gif', 'pdf', 'abw');\n  // / Make sure the input files are formatted into an array.\n  if (!is_array($PDFWorkSelected)) $PDFWorkSelected = array($PDFWorkSelected);\n  // / Iterate through the array of input files.\n  foreach ($PDFWorkSelected as $file) {\n    $OperationSuccessful = FALSE;\n    // / Make sure the file is sanitized before processing it.\n    list ($file, $variableIsSanitized) = sanitize($file, TRUE);\n    if (!$variableIsSanitized or !is_string($file) or $file === '' or $file === '.' or $file === '..' or $file === 'index.html') {\n      $OperationErrors = TRUE;\n      errorEntry('Could not sanitize the input file!', 15000, FALSE); \n      continue; }\n    if ($Verbose) logEntry('User selected to perform OCR on file '.$file.'.');\n    // / Verify the file before performing any operations on it.\n    list ($fileIsVerified, $pathname, $oldPathname, $oldExtension, $newPathname) = verifyFile($file, $UserFilename, $UserExtension, $clean, $copy, $skip);\n    $pathnameTEMP = str_replace('..', '', str_replace('.'.$oldExtension, '.txt' , $pathname));\n    if (!$fileIsVerified) {\n      $MainConversionErrors = TRUE;\n      errorEntry('Could not verify the input file.', 15001, FALSE);\n      continue; }\n    else if ($Verbose) logEntry('Verified file '.$newPathname.'.');\n    // / Scan with ClamAV if $VirusScan is set to TRUE in config.php.\n    if ($VirusScan) {\n      if ($Verbose) logEntry('Starting virus scan.');\n      list ($scanComplete, $virusFound) = virusScan($newPathname);\n      if (!$scanComplete) errorEntry('Could not perform a virus scan!', 15002, TRUE);\n      if ($virusFound) errorEntry('Virus detected!', 15003, TRUE);\n      if ($Verbose) logEntry('Virus scan complete.'); }\n    if (in_array(strtolower($oldExtension), $allowedOCR)) {\n      // / Code to convert a PDF to a document.\n      if (in_array(strtolower($oldExtension), $pdf1array)) {\n        if (in_array($UserExtension, $doc1array)) {\n          // / If Method 1 is selected, attempt a direct conversion.\n          if ($Method === 0 or $Method === '0' or $Method === '') {\n            if ($Verbose) logEntry('Performing OCR using method 0.');\n            // / Perform the conversion using PDFTOTEXT.\n            $returnData = shell_exec('pdftotext -layout '.$pathname.' '.$pathnameTEMP);\n            if ($Verbose && trim($returnData) !== '') logEntry('The converter returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n            if (!file_exists($pathnameTEMP)) {\n              errorEntry('Could not complete the conversion using method 0. Reattempting using method 1.', 15004, FALSE);\n              $Method = 1; } }\n            // / If Method 2 is selected, attempt to convert each page of the .pdf to .jpg, then convert that to .txt.\n            if ($Method === 1 or $Method === '1') {\n              $pathnameTEMP1 = str_replace('..', '', str_replace('.'.$oldExtension, '.jpg' , $pathname));\n              if ($Verbose) logEntry('Performing OCR intermediate operation using method 0.');\n              // / Perform the conversion using ImageMagick.\n              $returnData = shell_exec('convert '.$pathname.' '.$pathnameTEMP1);\n              if ($Verbose && trim($returnData) !== '') logEntry('The converter returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n              // / If a file doesn't exist there is a good chance it is because ImageMagick has split the pages up.\n              if (!file_exists($pathnameTEMP1)) {\n                // / Scan the current directory for files matching the filename.\n                $pagedFilesArrRAW = scandir($ConvertTempDir);\n                foreach ($pagedFilesArrRAW as $pagedFile) {\n                  $filename = pathinfo($pathname, PATHINFO_FILENAME);\n                  // / Look for files with the same filename but in .jpg format.\n                  if (strpos($pagedFile, $filename) !== TRUE) continue;\n                  if (strpos($pagedFile, '.jpg') !== TRUE) continue;\n                  if ($pagedFile == '.' or $pagedFile == '..' or $pagedFile == '.AppData' or $pagedFile == 'index.html') continue;\n                  // / Set page specific variables.\n                  $pathnameTEMP1 = str_replace('..', '', str_replace('.'.$oldExtension, '.jpg' , $pathname));\n                  $cleanFilname = str_replace('..', '', str_replace($oldExtension, '', $filename));\n                  $pageNumber = str_replace('..', '', str_replace('-', '', str_replace($cleanFilname, '', str_replace('.jpg', '', $pagedFile))));\n                  $pathnameTEMP1 = str_replace('..', '', str_replace('.jpg', '-'.$pageNumber.'.jpg', $pathnameTEMP1));\n                  $pathnameTEMP = str_replace('..', '', str_replace('.'.$oldExtension, '-'.$pageNumber.'.txt', $pathname)); \n                  $pathnameTEMPTesseract = str_replace('..', '', str_replace('.'.$oldExtension, '-'.$pageNumber, $pathname));\n                  $pathnameTEMP0 = str_replace('..', '', str_replace('-'.$pageNumber.'.txt', '.txt', $pathnameTEMP));\n                  if ($Verbose) logEntry('Performing OCR final operation using method 0.');\n                  // / Perform the conversion using Tesseract.\n                  $returnData = shell_exec('tesseract '.$pathnameTEMP1.' '.$pathnameTEMPTesseract);\n                  if ($Verbose && trim($returnData) !== '') logEntry('The converter returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n                  if (!file_exists($pathnameTEMP)) errorEntry('Could not complete the conversion using method 1.', 15005, FALSE);\n                  // / Recompile all of the text files into one big text file.\n                  $readPageData = file_get_contents($pathnameTEMP);\n                  $writePageData = file_put_contents($pathnameTEMP0, $readPageData.$Lol, $Append);\n                  $multiple = TRUE;\n                  if (!file_exists($pathnameTEMP0)) errorEntry('Could not OCR file!', 15006, FALSE); } }\n                  if ($Verbose) logEntry('Converted file '.$pathnameTEMP1.' to '.$pathnameTEMP.'.');\n              if (!$multiple) {\n                $pathnameTEMPTesseract = str_replace('..', '', str_replace('.txt', '', $pathnameTEMP));\n                if ($Verbose) logEntry('Performing OCR final using method 0.');\n                $returnData = shell_exec('tesseract '.$pathnameTEMP1.' '.$pathnameTEMPTesseract);\n                if ($Verbose && trim($returnData) !== '') logEntry('The converter returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData))))); } } } }\n        // / Code to convert a document to a PDF.\n        if (in_array(strtolower($oldExtension), $doc1array)) {\n          if (in_array($UserExtension, $pdf1array)) {\n            // / The following code verifies that the document conversion engine is installed & running.\n            list ($documentEngineStarted, $documentEnginePID) = verifyDocumentConversionEngine();\n            if (!$documentEngineStarted) {\n              $OperationErrors = TRUE;\n              errorEntry('Could not verify the document conversion engine!', 15007, FALSE); }\n            // / Perform the conversion using Unoconv.\n            $returnData = shell_execs('/usr/bin/unoconv -o '.$newPathname.' -f pdf '.$pathname);\n            if ($Verbose && trim($returnData) !== '') logEntry('The converter returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData))))); } }\n        // / Code to convert an image to a PDF.\n        if (in_array(strtolower($oldExtension), $img1array)) {\n          $pathnameTEMPTesseract = str_replace('..', '', str_replace('.'.$oldExtension, '', $pathname));\n          if ($Verbose) logEntry('Performing OCR operation using method 0.');\n          // / Perform the conversion using Unoconv.\n          $returnData = shell_exec('tesseract '.$pathname.' '.$pathnameTEMPTesseract);\n          if ($Verbose && trim($returnData) !== '') logEntry('The converter returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n          if (!file_exists($pathnameTEMP)) {\n            $pathnameTEMP3 = str_replace('..', '', str_replace('.'.$oldExtension, '.pdf' , $pathname));\n            // / The following code verifies that the document conversion engine is installed & running.\n            list ($documentEngineStarted, $documentEnginePID) = verifyDocumentConversionEngine();\n            if (!$documentEngineStarted) {\n              $OperationErrors = TRUE;\n              errorEntry('Could not verify the document conversion engine!', 15008, FALSE); }\n            if ($Verbose) logEntry('Performing OCR intermediate operation using method 0.');\n            // / Perform the conversion using Unoconv.\n            $returnData = shell_exec('/usr/bin/unoconv -o '.$pathnameTEMP3.' -f pdf '.$pathname);\n            if ($Verbose && trim($returnData) !== '') logEntry('Performing OCR final operation using method 0.');\n            // / Perform the conversion using PDFTOTEXT.\n            $returnData = shell_exec('pdftotext -layout '.$pathnameTEMP3.' '.$pathnameTEMP);\n            if ($Verbose && trim($returnData) !== '') logEntry('The converter returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData))))); }\n          if ($Verbose && file_exists($pathnameTEMP)) logEntry('Created an intermediate file at '.$pathnameTEMP.'.');\n          if (!file_exists($pathnameTEMP)) {\n            $OperationErrors = TRUE; \n            if ($Verbose) errorEntry('Could not create an intermediate directory at '.$pathnameTEMP.'!', 15009, FALSE); } }\n      // / If the output file is a txt file we leave it as-is.\n      if ($UserExtension == 'txt') {\n        if (file_exists($pathnameTEMP)) {\n          rename($pathnameTEMP, $newPathname);\n          if ($Verbose) logEntry('Renamed file '.$pathname.' to '.$pathnameTEMP.'.'); } }\n      // / If the output file is not a txt file we convert it with Unoconv.\n      if ($UserExtension !== 'txt') {\n        // / Perform the conversion using Unoconv.\n        $returnData = shell_exec('/usr/bin/unoconv -o '.$newPathname.' -f '.$UserExtension.' '.$pathnameTEMP);\n        if ($Verbose && trim($returnData) !== '') logEntry('The converter returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData))))); }\n      // / Error handler for if the output file does not exist.\n      if (file_exists($newPathname)) {\n        $OperationSuccessful = TRUE;\n        if ($Verbose) logEntry('Created a file at '.$newPathname.'.'); } } }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $file = $file1 = $file2 = $pathname = $oldPathname = $filename = $oldExtension = $newPathname = $doc1array = $img1array = $pdf1array = $pathnameTEMP = $pathnameTEMP1 = $pagedFilesArrRAW = $pagedFile = $cleanFilname = $pageNumber = $readPageData = $writePageData = $multiple = $pathnameTEMPTesseract = $pathnameTEMP3 = $clean = $copy = $skip =$allowedOCR = $variableIsSanitized = NULL;\n  unset ($file, $file1, $file2, $pathname, $oldPathname , $filename, $oldExtension, $newPathname, $doc1array, $img1array, $pdf1array, $pathnameTEMP, $pathnameTEMP1, $pagedFilesArrRAW, $pagedFile, $cleanFilname, $pageNumber, $readPageData, $writePageData, $multiple, $pathnameTEMPTesseract, $pathnameTEMP3, $clean, $copy, $skip, $allowedOCR, $variableIsSanitized); \n  return array($OperationSuccessful, $OperationErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to create a user virus logfiles if required.\n// / Type can be either 'clamav' or 'scancore'.\nfunction verifyUserVirusLogs($type) {\n  // / Set variables.\n  global $Verbose, $Time, $ConvertDir, $ConvertTempDir, $UserClamLogFile, $UserScanCoreLogFile, $SesHash3, $Lol, $Append, $UserScanCoreLogFileName;\n  $LogsExist = FALSE;\n  $userClamLogFileName = $userScanCoreLogFileName = '';\n  // / Verify the User Clam Log File if needed.\n  if ($type === 'clamav') {\n    // / Remove the old User ClamAV Virus Log file if one already exists.\n    if (file_exists($UserClamLogFile)) {\n      if ($Verbose) logEntry('Deleting stale file '.$UserClamLogFile.'.');\n      @unlink($UserClamLogFile); }\n    // / Make sure that the stale file was deleted if required or creating a new one will cause problems.\n    if (file_exists($UserClamLogFile)) errorEntry('Could not delete stale file '.$UserClamLogFile.'!', 16000, TRUE);\n    else file_put_contents($UserClamLogFile, 'Op-Act, '.$Time.', '.$SesHash3.': Created a User Clam Log File.'.$Lol, $Append);\n    // / Make sure that the file was successfully replaced.\n    if (!file_exists($UserClamLogFile)) errorEntry('Could not create a file at '.$UserClamLogFile.'!', 16001, TRUE);\n    else {\n      $LogsExist = TRUE;\n      if ($Verbose) logEntry('Created a file at '.$UserClamLogFile.'.'); } }\n  // / Verify the User ScanCore Log File if needed.\n  if ($type === 'scancore') {\n    // / Remove the old User ScanCore Virus Log file if one already exists.\n    if (file_exists($UserScanCoreLogFile)) {\n      if ($Verbose) logEntry('Deleting stale file '.$UserScanCoreLogFileName.'.');\n      @unlink($UserScanCoreLogFile); }\n    // / Make sure that the stale file was deleted if required or creating a new one will cause problems.\n    if (file_exists($UserScanCoreLogFile)) errorEntry('Could not delete stale file '.$UserScanCoreFile.'!', 16002, TRUE);\n    else file_put_contents($UserScanCoreLogFile, 'Op-Act, '.$Time.', '.$SesHash3.': Created a User ScanCore Log File.'.$Lol, $Append);\n    // / Make sure that the file was successfully replaced.\n    if (!file_exists($UserScanCoreLogFile)) errorEntry('Could not create a file at '.$UserScanCoreLogFile.'!', 16003, TRUE);\n    else {\n      $LogsExist = TRUE;\n      if ($Verbose) logEntry('Created a file at '.$UserScanCoreLogFile.'.'); } }\n  return array($LogsExist, $UserClamLogFile, $UserScanCoreLogFile); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to format a log entry & write it to the logfile.\n// / Type can be either 'clamav' or 'scancore'.\nfunction userVirusLogEntry($Entry, $type) {\n  // / Set variables.\n  global $Time, $UserClamLogFile, $UserScanCoreLogFile, $SesHash3, $Lol, $Append;\n  $LogWritten = $logWrittenA = $logWrittenB = FALSE;\n  // / Format the input string into a log entry & write it to the $UserClamLogFile.\n  if ($type === 'clamav') $logWrittenA = file_put_contents($UserClamLogFile, 'Op-Act, '.$Time.', '.$SesHash3.': '.$Entry.$Lol, $Append);\n  // / Format the input string into a log entry & write it to the $UserScanCoreLogFile.\n  if ($type === 'scancore') $logWrittenB = file_put_contents($UserScanCoreLogFile, 'Op-Act, '.$Time.', '.$SesHash3.': '.$Entry.$Lol, $Append);\n  // / Check that a log entry was written.\n  if ($type === 'clamav') if ($logWrittenA) $LogWritten = TRUE;\n  if ($type === 'scancore') if ($logWrittenB) $LogWritten = TRUE;\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $logWrittenA = $logWrittenB = NULL;\n  unset($logWrittenA, $logWrittenB);\n  return $LogWritten; }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to scan a user supplied file on-demand with ClamAV.\nfunction userClamScan($FilesToScan) {\n  // / Set variables.\n  global $Verbose, $ConvertDir, $Lol, $Lolol, $UserClamLogFile;\n  $OperationSuccessful = $OperationErrors = $UserVirusFound = $userFilename = $userExtension = $clean = $copy = $userFilename = $userExtension = $variableIsSanitized = FALSE;\n  $skip = TRUE;\n  $returnData = $txt = $file = $clamLogFileDATA = '';\n  $txt = 'Initiating User Virus Scan with ClamAV.';\n  userVirusLogEntry($txt, 'clamav');\n  if ($Verbose) logEntry($txt);\n  // / Make sure the input files are formatted into an array.\n  if (!is_array($FilesToScan)) $FilesToScan = array($FilesToScan);\n  // / Iterate through the array of input files.\n  foreach ($FilesToScan as $file) {\n    $UserVirusFound = FALSE;\n    // / Make sure the file is sanitized before processing it.\n    list ($file, $variableIsSanitized) = sanitize($file, TRUE);\n    if (!$variableIsSanitized or !is_string($file) or $file === '' or $file === '.' or $file === '..' or $file === 'index.html') {\n      $OperationErrors = TRUE;\n      errorEntry('Could not sanitize the input file!', 17000, FALSE);\n      continue; }\n    if ($Verbose) logEntry('User selected to perform a Clam Scan on file '.$file.'.');\n    // / Verify the file before performing any operations on it.\n    list ($fileIsVerified, $pathname, $oldPathname, $oldExtension, $newPathname) = verifyFile($file, $userFilename, $userExtension, $clean, $copy, $skip);\n    if (!$fileIsVerified) {\n      $OperationErrors = TRUE;\n      errorEntry('Could not verify the input file.', 17001, FALSE);\n      continue; }\n    $OperationSuccessful = TRUE;\n    $txt = 'Scanning '.$file.'.';\n    if ($Verbose) logEntry($txt);\n    userVirusLogEntry($txt, 'clamav');\n    // / Scan the selected file with ClamAV.\n    $returnData = shell_exec(str_replace('  ', ' ', str_replace('   ', ' ', 'clamscan -r '.$ConvertDir.$file.' | grep FOUND >> '.$UserClamLogFile)));\n    // / Write the full ClamAV output to the normal $LogFile.\n    if ($Verbose) logEntry('The Virus Scanner returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n    // / Load the contents of the User Clam Log File for processing because it has been sanitized of unnecessary data & whitespace.\n    $clamLogFileDATA = @file_get_contents($UserClamLogFile);\n    // / Check the contents of the User Clam Log File for virus detections.\n    if (strpos($clamLogFileDATA, 'FOUND') !== FALSE or strpos($clamLogFileDATA, 'FOUND') === TRUE) {\n      $UserVirusFound = TRUE;\n      $txt = 'WARNING!!! Potentially infected file detected at '.$file.'!';\n      if ($Verbose) logEntry($txt);\n      userVirusLogEntry($txt, 'clamav'); }\n      // / Write the results of the scan to both log files.\n    else {\n      $txt = 'No infection detected in '.$file.'.';\n      if ($Verbose) logEntry($txt);\n      userVirusLogEntry($txt, 'clamav'); } }\n  $txt = 'ClamAV Virus Scan Complete.';\n  if ($Verbose) logEntry($txt);\n  userVirusLogEntry($txt, 'clamav');\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $variableIsSanitized = $clean = $copy = $skip = $returnData = $txt = $userFilename = $userExtension = $clamLogFileDATA  = NULL;\n  unset($variableIsSanitized, $clean, $copy, $skip, $returnData, $txt, $userFilename, $userExtension, $clamLogFileDATA);\n  return array($OperationSuccessful, $OperationErrors, $UserVirusFound); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A fuction to prepare the execution environment for ScanCore.\nfunction startScanCore($pathname, $UserScanCoreLogFile) {\n  // / Set variables.\n  global $InstLoc, $ConvertDir, $MaxLogSize, $ScanCoreMemoryLimit, $ScanCoreChunkSize, $ScanCoreDebug, $ScanCoreVerbose, $DirSep, $ScanCoreVerbose, $ScanCoreDebug, $Date, $SesHash, $SesHash2; \n  $ReturnData = $scVerbose = $scDebug = '';\n  $ScanCoreFile = $InstLoc.$DirSep.'Resources'.$DirSep.'ScanCore'.$DirSep.'ScanCore.php';\n  $scInc = 0;\n  if ($ScanCoreVerbose) $scVerbose = ' -v';\n  if ($ScanCoreDebug) $scDebug = ' -d';\n  // / Make sure that ScanCore is installed.\n  if (!file_exists($ScanCoreFile)) errorEntry('Could not verify the ScanCore Virus Scanner!', 18000, TRUE);\n  // / The filename for the ScanCore log file.\n  $scLogFile = $ConvertDir.$DirSep.'ScanCore_'.$SesHash.'_'.$SesHash2.'_'.$Date.'_'.$scInc.'_Log.txt';\n  while (file_exists($scLogFile)) $scLogFile = $ConvertDir.$DirSep.'ScanCore_'.$SesHash.'_'.$SesHash2.'_'.$Date.'_'.$scInc++.'_Log.txt';\n  // / Run ScanCore with the information supplied.\n  $ReturnData = shell_exec('php '.$ScanCoreFile.' '.$pathname.' -m '.$ScanCoreMemoryLimit.' -c '.$ScanCoreChunkSize.' -lf '.$scLogFile.' -rf '.$UserScanCoreLogFile.' -ml '.$MaxLogSize.' -r'.$scVerbose.$scDebug);\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $pathname = $scVerbose = $scDebug = $scLogFile = $scInc = NULL;\n  unset($pathname, $scVerbose, $scDebug, $scLogFile, $scInc);\n  return $ReturnData; }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to scan a user supplied file on-demand with ScanCore.\nfunction userScanCoreScan($FilesToScan) {\n  // / Set variables.\n  global $Verbose, $ConvertDir, $Lol, $Lolol, $UserScanCoreLogFile;\n  $OperationSuccessful = $OperationErrors = $UserVirusFound = $userFilename = $userExtension = $clean = $copy = $variableIsSanitized = FALSE;\n  $skip = TRUE;\n  $returnData = $txt = $file = $scanCoreLogFileDATA = '';\n  $txt = 'Initiating User Virus Scan with ScanCore.';\n  userVirusLogEntry($txt, 'scancore');\n  if ($Verbose) logEntry($txt);\n  // / Make sure the input files are formatted into an array.\n  if (!is_array($FilesToScan)) $FilesToScan = array($FilesToScan);\n  // / Iterate through the array of input files.\n  foreach ($FilesToScan as $file) {\n    $UserVirusFound = FALSE;\n    // / Make sure the file is sanitized before processing it.\n    list ($file, $variableIsSanitized) = sanitize($file, TRUE);\n    if (!$variableIsSanitized or !is_string($file) or $file === '' or $file === '.' or $file === '..' or $file === 'index.html') {\n      $OperationErrors = TRUE;\n      errorEntry('Could not sanitize the input file!', 19000, FALSE);\n      continue; }\n    if ($Verbose) logEntry('User selected to perform a ScanCore Scan on file '.$file.'.');\n    // / Verify the file before performing any operations on it.\n    list ($fileIsVerified, $pathname, $oldPathname, $oldExtension, $newPathname) = verifyFile($file, $userFilename, $userExtension, $clean, $copy, $skip);\n    if (!$fileIsVerified) {\n      $OperationErrors = TRUE;\n      errorEntry('Could not verify the input file.', 19001, FALSE);\n      continue; }\n    $OperationSuccessful = TRUE;\n    $txt = 'Scanning '.$file.'.';\n    if ($Verbose) logEntry($txt);\n    userVirusLogEntry($txt, 'scancore');\n    // / Scan the selected file with ScanCore.\n    $returnData = startScanCore($ConvertDir.$file, $UserScanCoreLogFile);\n    // / Write the full ScanCore output to the normal $LogFile.\n    if ($Verbose) logEntry('ScanCore returned the following: '.$Lol.'  '.str_replace($Lol, $Lol.'  ', str_replace($Lolol, $Lol, str_replace($Lolol, $Lol, trim($returnData)))));\n    // / Load the contents of the User ScanCore Log File for processing because it has been sanitized of unnecessary data & whitespace.\n    $scanCoreLogFileDATA = @file_get_contents($UserScanCoreLogFile);\n    // / Check the contents of the User ScanCore Log File for virus detections.\n    if (strpos($scanCoreLogFileDATA, 'Infected') !== FALSE or strpos($scanCoreLogFileDATA, 'Infected') === TRUE) {\n      $UserVirusFound = TRUE;\n      $txt = 'WARNING!!! Potentially infected file detected at '.$file.'!';\n      if ($Verbose) logEntry($txt);\n      userVirusLogEntry($txt, 'scancore'); }\n    // / Write the results of the scan to both log files.\n    else {\n      $txt = 'No infection detected in '.$file.'.';\n      if ($Verbose) logEntry($txt);\n      userVirusLogEntry($txt, 'scancore'); } }\n  $txt = 'ScanCore Virus Scan Complete.';\n  if ($Verbose) logEntry($txt);\n  userVirusLogEntry($txt, 'scancore');\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $variableIsSanitized = $clean = $copy = $skip = $returnData = $txt = $userFilename = $userExtension = $scanCoreLogFileDATA = NULL;\n  unset($variableIsSanitized, $clean, $copy, $skip, $returnData, $txt, $userFilename, $userExtension, $scanCoreLogFileDATA);\n  return array($OperationSuccessful, $OperationErrors, $UserVirusFound); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to process the results of a User Virus Scan & check for any failures or errors.\n// / Type can be either 'clamav', 'scancore', or 'all'.\nfunction checkUserVirusScanResults($type, $scan1Complete, $scan1Errors, $scan2Complete, $scan2Errors) {\n  // / Set variables.\n  $ScanErrors = FALSE;\n  // / Check that all the input check results are valid.\n  if (!is_bool($scan1Complete)) $scan1Complete = FALSE;\n  if (!is_bool($scan1Errors)) $scan1Errors = FALSE;\n  if (!is_bool($scan2Complete)) $scan2Complete = FALSE;\n  if (!is_bool($scan2Errors)) $scan2Errors = FALSE;\n  // / Check if all required scan operations are complete & if any erros occured.\n  if ($type == 'all') {\n    if ($scan1Complete && $scan2Complete) $ScanComplete = TRUE;\n    if ($scan1Errors or $scan2Errors) $ScanErrors = TRUE; }\n  // / Set results using only ClamAV output.\n  if ($type == 'clamav') {\n    $ScanComplete = TRUE;\n     if ($scan1Complete) $ScanComplete = TRUE;\n     if ($scan1Errors) $ScanErrors = TRUE; }\n  // / Set results using only ScanCore output.\n  if ($type == 'scancore') {\n    $ScanComplete = TRUE;\n     if ($scan2Complete) $ScanComplete = TRUE;\n     if ($scan2Errors) $ScanErrors = TRUE; }\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $scan1Complete = $scan1Errors = $scan2Complete = $scan2Errors = NULL;\n  unset($scan1Complete, $scan1Errors, $scan2Complete, $scan2Errors);\n  return array($ScanComplete, $ScanErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to define & verify that a Consolidated User Virus Log File exists.\n// / Type can be either 'clamav', 'scancore', or 'all'.\nfunction verifyConsolidatedLogFile() {\n  // / Set variables.\n  global $Verbose, $ConsolidatedLogFile, $Append;\n  $ConsolidatedLogsExist = FALSE;\n  // / Remove the old Consolidated Virus Log file if one already exists.\n  if (file_exists($ConsolidatedLogFile)) {\n    if ($Verbose) logEntry('Deleting stale consolidated log file.');\n    @unlink($ConsolidatedLogFile); }\n  // / Make sure that the stale file was deleted if required or creating a new one will cause problems.\n  if (file_exists($ConsolidatedLogFile)) errorEntry('Could not delete stale file '.$ConsolidatedLogFile.'!', 20000, TRUE);\n  // / Attempt to create a new consolidated log one if the previous one was successfully removed.\n  else file_put_contents($ConsolidatedLogFile, '', $Append);\n  // / Make sure that the file was successfully replaced.\n  if (!file_exists($ConsolidatedLogFile)) errorEntry('Could not create a file at '.$ConsolidatedLogFile.'!', 20001, TRUE);\n  else {\n    $ConsolidatedLogsExist = TRUE;\n    if ($Verbose) logEntry('Created a file at '.$ConsolidatedLogFile.'.'); }\n  return array($ConsolidatedLogsExist, $ConsolidatedLogFile); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to consolidate User Virus Scan log files generated via various methods into one meaningful report.\n// / Type can be either 'clamav', 'scancore', or 'all'.\nfunction consolidateLogs($type, $UserClamLogFile, $UserScanCoreLogFile) {\n  // / Set variables.\n  global $Verbose, $Lol, $Append, $ConsolidatedLogFile, $UserClamLogFile, $UserScanCoreLogFile;\n  $ConsolidatedLogsExist = $ConsolidatedLogErrors = $logWrittenA = $logWrittenB = $logWrittenC = $logWrittenD = $logWrittenE = FALSE;\n  $userClamLogData = $userScanCoreData = $consolidatedLogData = $txt = $userScanCoreLogData = '';\n  $spacer = '----------';\n  list ($ConsolidatedLogsExist, $ConsolidatedLogFile) = verifyConsolidatedLogFile();\n  if ($type === 'clamav') {\n    // / Load the User Clam Log File into memory.\n    $userClamLogData = file_get_contents($UserClamLogFile);\n    $logWrittenA = file_put_contents($ConsolidatedLogFile, $userClamLogData.$Lol.$spacer.$Lol, $Append); }\n  if ($type === 'scancore') {\n    // / Load the User Scan Core Log File into memory.\n    $userScanCoreLogData = file_get_contents($UserScanCoreLogFile);\n    $logWrittenB = file_put_contents($ConsolidatedLogFile, $userScanCoreLogData.$Lol.$spacer.$Lol, $Append); }\n  if ($type === 'all') {\n    // / Load the Consolidated Log File into memory.\n    $txt = 'User selected to scan files with all available scanners.';\n    $logWrittenC = file_put_contents($ConsolidatedLogFile, $txt.$Lol.$spacer.$Lol, $Append);\n    $userClamLogData = file_get_contents($UserClamLogFile);\n    $logWrittenD = file_put_contents($ConsolidatedLogFile, $userClamLogData.$Lol.$spacer.$Lol, $Append);\n    $userScanCoreLogData = file_get_contents($UserScanCoreLogFile);\n    $logWrittenE = file_put_contents($ConsolidatedLogFile, $userScanCoreLogData.$Lol.$spacer.$Lol, $Append); }\n  // / Check to be sure that the $ConsolidatedLogFile exists.\n  if ($type === 'clamav' && !$logWrittenA) $ConsolidatedLogErrors = TRUE; \n  if ($type === 'scancore' && !$logWrittenB) $ConsolidatedLogErrors = TRUE;\n  if ($type === 'all') if (!$logWrittenC or !$logWrittenD or !$logWrittenE) $ConsolidatedLogErrors = TRUE;\n  if (file_exists($ConsolidatedLogFile)) $ConsolidatedLogsExist = TRUE;\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $type = $txt = $spacer = $logWrittenA = $logWrittenB = $logWrittenC = $logWrittenD = $logWrittenE = $userClamLogData = $userScanCoreLogData = NULL;\n  unset($type, $txt, $spacer, $logWrittenA, $logWrittenB, $logWrittenC, $logWrittenD, $logWrittenE, $userClamLogData, $userScanCoreLogData);\n  return array($ConsolidatedLogsExist, $ConsolidatedLogErrors); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / A function to scan an input file or folder for viruses with ClamAV.\n// / Type can be either 'clamav', 'scancore', or 'all'.\nfunction userVirusScan($FilesToScan, $type) {\n  // / Set variables.\n  global $Verbose, $Lol, $Lolol, $ApplicationName, $UserClamLogFile, $UserScanCoreLogFile;\n  $ScanComplete = $ScanErrors = $UserVirusFound = $scan1Complete = $scan1Errors = $scan2Complete = $scan2Errors = $ConsolidatedLogsExist = $ConsolidatedLogErrors = FALSE;\n  $returnData = $fileToScan = '';\n  // / Check that the $type input variable is valid.\n  if ($type !== 'all' && $type !== 'clamav' && $type !== 'scancore') $type = 'all';\n  // / Make sure the input files are formatted into an array.\n  if (!is_array($FilesToScan)) $FilesToScan = array($FilesToScan);\n  list ($LogsExist, $UserClamLogFile, $UserScanCoreLogFile) = verifyUserVirusLogs($type);\n  // / Iterate through the array of input files.\n  foreach ($FilesToScan as $fileToScan) {\n    $ScanComplete = $scan1Complete = $scan2Complete = FALSE;\n    // / Perform a User Virus Scan using ClamAV if required.\n    if ($type === 'clamav' or $type === 'all') {\n      // / Prepare to run a ClamAV Scan.\n      list ($scan1Complete, $scan1Errors, $UserVirusFound) = userClamScan($FilesToScan); }\n    // / Perform a User Virus Scan using ScanCore if required.\n    if ($type === 'scancore' or $type === 'all') {\n      // / Prepare to run a ScanCore Scan.\n      list ($scan2Complete, $scan2Errors, $UserVirusFound) = userScanCoreScan($FilesToScan); } }\n  // / Check the results of the virus scan for failures or errors.\n  list ($ScanComplete, $ScanErrors) = checkUserVirusScanResults($type, $scan1Complete, $scan1Errors, $scan2Complete, $scan2Errors);\n  // / Consolidate the log files created during the scan into the $ConvertTempDir so the user can access them.\n  list ($ConsolidatedLogsExist, $ConsolidatedLogErrors) = consolidateLogs($type, $UserClamLogFile, $UserScanCoreLogFile);\n  // / Verify that all operations are complete.\n  if ($ScanErrors or $ConsolidatedLogErrors) $ScanErrors = TRUE;\n  if (!$ConsolidatedLogsExist) $ScanComplete = FALSE;\n  // / Manually clean up sensitive memory. Helps to keep track of variable assignments.\n  $fileToScan = $returnData = $path = $type = $scan1Complete = $scan1Errors = $scan2Complete = $scan2Errors = NULL;\n  unset($fileToScan, $returnData ,$path, $type, $scan1Complete, $scan1Errors, $scan2Complete, $scan2Errors);\n  return array($ScanComplete, $ScanErrors, $UserVirusFound); }\n// / -----------------------------------------------------------------------------------\n\n// / -----------------------------------------------------------------------------------\n// / The main logic of the program that makes use of the functions above.\n\n// / The following code resets PHP's time limit for execution.\n$TimeReset = setTimeLimit();\nif (!$TimeReset) die('ERROR!!! HRConvert2-3: Could not set the execution timer!');\n\n// / The following code sets date & time related variables.\nlist ($TimeIsSet, $Date, $Time) = verifyTime();\nif (!$TimeIsSet or !$Date or !$Time) die('ERROR!!! HRConvert2-4: Could not verify timezone!');\n\n// / The following code verifies that the installation is valid.\nlist ($InstallationIsVerified, $ConfigFile, $Version) = verifyInstallation();\nif (!$InstallationIsVerified) die('ERROR!!! '.$Time.', HRConvert2-5: Could not verify installation!');\n\n// / The following code verifies that string inputs to the core are properly sanitized.\nlist ($InputsAreVerified, $GUI, $Color, $Language, $Token1, $Token2, $Height, $Width, $Rotate, $Bitrate, $Method, $Download, $UserFilename, $UserExtension, $FilesToArchive, $PDFWorkSelected, $ConvertSelected, $FilesToScan, $FilesToDelete, $UserScanType) = verifyInputs();\nif (!$InputsAreVerified) die('ERROR!!! '.$Time.', '.$ApplicationName.'-6: Could not verify inputs!');\n\n// / The following code verifies enough user information to generate a unique session identifier.\nlist ($SessionIsVerified, $IP, $HashedUserAgent) = verifySession();\nif (!$SessionIsVerified) die('ERROR!!! '.$Time.', '.$ApplicationName.'-7: Could not verify session!');\n\n// / The following code generates a series of unique session identifiers.\nlist ($SesHashIsVerified, $SesHash, $SesHash2, $SesHash3, $SesHash4) = verifySesHash($IP, $HashedUserAgent);\nif (!$SesHashIsVerified) die('ERROR!!! '.$Time.': '.$ApplicationName.'-8: Could not verify unique session identifier!');\n\n// / The following code verifies the logging environment.\nlist ($LogFileExists, $LogFile, $ClamLogFile) = verifyLogs();\nif (!$LogFileExists) die('ERROR!!! '.$Time.', '.$ApplicationName.'-9, '.$SesHash3.': Could not verify logging environment!');\n\n// / The following code tries to verify that the session is encrypted, if possible.\nlist ($EncryptionVerified, $URLEcho) = verifyEncryption();\nif (!$EncryptionVerified) errorEntry('Could not verify connection!', 10, TRUE);\nelse if ($Verbose) logEntry('Verified inbound connection.');\n\n// / The following code verifies & sanitizes global variables for the session.\nlist ($GlobalsAreVerified, $CoreLoaded) = verifyGlobals();\nif (!$GlobalsAreVerified) errorEntry('Could not verify globals!', 11, TRUE);\nelse if ($Verbose) logEntry('Verified globals.');\n\n// / The following code verifies that required directories exist & creates them where needed.\nlist ($RequiredDirsExist, $RequiredDirs) = verifyRequiredDirs();\nif (!$RequiredDirsExist) errorEntry('Could not verify required directories!', 12, TRUE);\nelse if ($Verbose) logEntry('Verified required directories.');\n\n// / The following code removes old files from the $ConvertTempLoc.\nlist ($CleanedTempLoc, $TempLocDeepCleaned) = cleanTempLoc();\nif (!$CleanedTempLoc) errorEntry('Could not clean the temporary location!', 13, TRUE);\nelse if ($Verbose) logEntry('Cleaned temporary location.');\n\n// / The following code removes old files from the $ConvertLoc.\nlist ($CleanedConvertLoc, $ConvertLocDeepCleaned) = cleanConvertLoc();\nif (!$CleanedConvertLoc) errorEntry('Could not clean the convert location!', 14, TRUE);\nelse if ($Verbose) logEntry('Cleaned convert location.');\n\n// / The following code verifies the tokens supplied by the user, if any.\nlist ($TokensAreValid, $Token1, $Token2) = verifyTokens($Token1, $Token2);\nif (!$TokensAreValid) if ($Verbose) logEntry('Could not verify tokens.');\nif ($TokensAreValid) if ($Verbose) logEntry('Verified tokens.');\n\n// / The following code sets the language for the session.\nlist ($GuiIsSet, $GuiToUse, $GuiDir, $GuiFiles) = verifyGui();\nif (!$GuiIsSet) errorEntry('Could not verify GUI! GUI set to '.$GuiToUse.'!', 25, TRUE);\nelse if ($Verbose) logEntry('Verified GUI. GUI set to '.$GuiToUse.'.');\n\n// / The following code sets the color scheme for the session.\nlist ($ColorsAreSet, $ButtonCode) = verifyColors($ButtonStyle);\nif (!$ColorsAreSet) errorEntry('Could not verify color scheme! Color set to '.$ButtonStyle.'!', 15, TRUE);\nelse if ($Verbose) logEntry('Verified color scheme. Color set to '.$ButtonStyle.'.');\n\n// / The following code sets the language for the session.\nlist ($LanguageIsSet, $LanguageToUse, $LanguageDir, $LanguageFiles) = verifyLanguage();\nif (!$LanguageIsSet) errorEntry('Could not verify language! Language set to '.$LanguageToUse.'!', 16, TRUE);\nelse if ($Verbose) logEntry('Verified language. Language set to '.$LanguageToUse.'.');\n\n// / The following code displays the appropriate GUI for the session.\nif (!isset($_POST['filesToArchive']) && !isset($_POST['convertSelected']) && !isset($_POST['pdfworkSelected']) && !isset($_POST['download']) && !isset($_POST['upload']) && !isset($_POST['filesToScan'])) {\n  $GUIDisplayed = showGUI($ShowGUI, $ButtonCode);\n  if (!$GUIDisplayed) errorEntry('Could not display GUI!', 17, TRUE);\n  else if ($Verbose)  logEntry('Displaying the GUI.'); }\nelse if ($Verbose) logEntry('Skipping display GUI procedure.');\n\n// / Only enable file related operations if valid tokens have been supplied.\nif ($TokensAreValid) {\n  // / The following code is performed when a user initiates a file upload.\n  if ($TokensAreValid && !empty($_FILES)) {\n    logEntry('Initiating Uploader.');\n    list ($UploadComplete, $UploadErrors) = uploadFiles();\n    if (!$UploadComplete) errorEntry('Upload Failed!', 18, TRUE);\n    if ($UploadErrors) logEntry('Upload finished with errors.');\n    if ($Verbose) logEntry('Upload Complete.'); }\n\n  // / The following code is performed when a user downloads a selection of files.\n  if (isset($_POST['download'])) {\n    logEntry('Initiating Downloader.');\n    list ($DownloadComplete, $DownloadErrors) = downloadFiles($Download);\n    if (!$DownloadComplete) errorEntry('Download Failed!', 19, TRUE);\n    if ($DownloadErrors) logEntry('Download finished with errors.');\n    if ($Verbose) logEntry('Download Complete.'); }\n\n  // / The following code is performed when a user deletes a selection of files.\n  if (isset($_POST['filesToDelete'])) {\n    logEntry('Initiating Deletor.');\n    list ($DeleteComplete, $DeleteErrors) = deleteFiles($FilesToDelete);\n    if (!$DeleteComplete) errorEntry('Delete Failed!', 24, TRUE);\n    if ($DeleteErrors) logEntry('Delete finished with errors.');\n    if ($Verbose) logEntry('Delete Complete.'); }\n\n  // / The following code is performed when a user archives a selection of files.\n  if (isset($_POST['filesToArchive'])) { \n    logEntry('Initiating Archiver.');\n    list ($ArchiveComplete, $ArchiveErrors) = archiveFiles($FilesToArchive, $UserFilename, $UserExtension);\n    if (!$ArchiveComplete) errorEntry('Archive Failed!', 20, TRUE);\n    if ($ArchiveErrors) logEntry('Archive finished with errors.');\n    if ($Verbose) logEntry('Archive Complete.'); }\n\n  // / The following code is performed when a user converts a selection of files.\n  if (isset($_POST['convertSelected'])) {\n    logEntry('Initiating Converter.');\n    list ($ConversionComplete, $ConversionErrors) = convertFiles($ConvertSelected, $UserFilename, $UserExtension, $Height, $Width, $Rotate, $Bitrate);\n    if (!$ConversionComplete) errorEntry('Conversion Failed!', 21, TRUE);\n    if ($ConversionErrors) logEntry('Conversion finished with errors.');\n    if ($Verbose) logEntry('Conversion Complete.'); }\n\n  // / The following code is performed when a user performs OCR on a selection of files.\n  if (isset($_POST['pdfworkSelected'])) {\n    logEntry('Initiating Converter.');\n    list ($ConversionComplete, $ConversionErrors) = ocrFiles($PDFWorkSelected, $UserFilename, $UserExtension, $Method);\n    if (!$ConversionComplete) errorEntry('OCR Operation Failed!', 22, TRUE);\n    if ($ConversionErrors) logEntry('OCR Operation finished with errors.');\n    if ($Verbose)  logEntry('Conversion Complete.'); }\n\n  // / The following code is performed when a user performs a virus scan on a selection of files.\n  if (isset($_POST['filesToScan']) && $AllowUserVirusScan) {\n    logEntry('Initiating User Virus Scannner.');\n    list ($ScanComplete, $ScanErrors, $UserVirusFound) = userVirusScan($FilesToScan, $UserScanType);\n    if (!$ScanComplete) errorEntry('User Virus Scan Failed!', 23, TRUE);\n    if ($UserVirusFound) logEntry('The User Virus Scan detected infected files.');\n    if (!$UserVirusFound) logEntry('The User Virus Scan did not detect any infected files.');\n    if ($ScanErrors) logEntry('User Virus Scan finished with errors.');\n    if ($Verbose)  logEntry('User Virus Scan Complete.'); } }\n// / -----------------------------------------------------------------------------------\n?>"
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 0.87890625,
          "content": "<!DOCTYPE html>\n<html>\n<title>HRConvert2 | HRConvert2 Authentication</title>\n<body>\n<div id=\"outer\" align=\"center\"><h1>Configuring HRConvert2 ...</h1>\n\n<div id=\"inner\" style=\"position:absolute; top:50%; left:50%; height:10em; margin-top:-5em; margin-right:5em;\"><strong>Please wait . . .</strong></div>\n</div>\n<script type=\"text/javascript\">\n\n// Set the URL below to the page the user is sent to if their screensize is UNDER the specified number of pixels.\nif (screen.width <= 699) { document.location = \"/HRProprietary/HRConvert2/convertCore.php\"; }\n// / Set the URL below to the page the user is sent to if their screensize is OVER the specified number of pixels.\nif (screen.width >= 700) { document.location = \"/HRProprietary/HRConvert2/convertCore.php\"; }\n\n</script>\n\n<meta id=\"IfNothingHappens\" http-equiv=\"refresh\" content=\"5\"; url=\"/HRProprietary/HRConvert2/convertCore.php\" >\n\n</body>\n</html>"
        }
      ]
    }
  ]
}