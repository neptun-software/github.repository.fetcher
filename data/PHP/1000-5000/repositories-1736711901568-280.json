{
  "metadata": {
    "timestamp": 1736711901568,
    "page": 280,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spatie/async",
      "stars": 2660,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3046875,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3857421875,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/.travis.yml        export-ignore\n/phpunit.xml.dist   export-ignore\n/.scrutinizer.yml   export-ignore\n/tests              export-ignore\n/.editorconfig      export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.10546875,
          "content": ".phpunit.result.cache\nbuild\ncomposer.lock\nvendor\ntests/another-php-binary\n.php_cs.cache\n.php-cs-fixer.cache\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 1.3203125,
          "content": "<?php\n\n$finder = Symfony\\Component\\Finder\\Finder::create()\n    ->in([\n        __DIR__ . '/src',\n        __DIR__ . '/tests',\n    ])\n    ->name('*.php')\n    ->notName('*.blade.php')\n    ->notName('ClassWithSyntaxError.php')\n    ->ignoreDotFiles(true)\n    ->ignoreVCS(true);\n\nreturn (new PhpCsFixer\\Config())\n    ->setRiskyAllowed(true)\n    ->setRules([\n        '@PSR12' => true,\n        'array_syntax' => ['syntax' => 'short'],\n        'ordered_imports' => ['sort_algorithm' => 'alpha'],\n        'no_unused_imports' => true,\n        'not_operator_with_successor_space' => true,\n        'trailing_comma_in_multiline' => true,\n        'phpdoc_scalar' => true,\n        'unary_operator_spaces' => true,\n        'binary_operator_spaces' => true,\n        'blank_line_before_statement' => [\n            'statements' => ['break', 'continue', 'declare', 'return', 'throw', 'try'],\n        ],\n        'phpdoc_single_line_var_spacing' => true,\n        'phpdoc_var_without_name' => true,\n        'class_attributes_separation' => [\n            'elements' => [\n                'method' => 'one',\n            ],\n        ],\n        'method_argument_space' => [\n            'on_multiline' => 'ensure_fully_multiline',\n            'keep_multiple_spaces_after_comma' => true,\n        ],\n        'single_trait_insert_per_statement' => true,\n    ])\n    ->setFinder($finder);\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.16015625,
          "content": "# Changelog\n\nAll notable changes to `async` will be documented in this file\n\n## 1.5.2 - 2020-11-20\n\n- Configure task in synchronous process\n- Add Pool::forceSynchronous function\n\n## 1.5.1 - 2020-11-20\n\n- Support for PHP 8\n\n## 1.5.0 - 2020-09-18\n\n- Add fallback to SerializableException to handle \"complex\" exceptions (#119)\n\n## 1.4.1 - 2020-08-19\n\n- Properly stop process on timeout (#105)\n\n## 1.4.0 - 2020-04-15\n\n- Make binary configurable (#111 and #112)\n\n## 1.3.0 - 2020-03-17\n\n- Support microsecond timeouts (#109)\n\n## 1.2.0 - 2020-02-14\n\n- Add ability to stop the pool early (#56)\n\n## 1.1.1 - 2019-12-24\n\n- allow Symfony 5 components\n\n## 1.1.0 - 2019-09-30\n\n- Make output length configurable (#86)\n\n## 1.0.4 - 2019-08-02\n\n- Fix for `SynchronousProcess::resolveErrorOutput` (#73)\n\n## 1.0.3 - 2019-07-22\n\n- Fix for Symfony Process argument deprecation\n\n## 1.0.1 - 2019-05-17\n\n- Synchronous execution time bugfix\n\n## 1.0.1 - 2019-05-07\n\n- Check on PCNTL support before registering listeners\n\n## 1.0.0 - 2019-03-22\n\n- First stable release\n- Add the ability to catch exceptions by type\n- Thrown errors can only have one handler. \nSee [UPGRADING](./UPGRADING.md#100) for more information.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.064453125,
          "content": "The MIT License (MIT)\n\nCopyright (c) Spatie bvba <info@spatie.be>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.837890625,
          "content": "# Asynchronous and parallel PHP\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/spatie/async.svg?style=flat-square)](https://packagist.org/packages/spatie/async)\n![Tests Status](https://img.shields.io/github/actions/workflow/status/spatie/async/run-tests.yml)\n[![Quality Score](https://img.shields.io/scrutinizer/g/spatie/async.svg?style=flat-square)](https://scrutinizer-ci.com/g/spatie/async)\n[![Total Downloads](https://img.shields.io/packagist/dt/spatie/async.svg?style=flat-square)](https://packagist.org/packages/spatie/async)\n\nThis library provides a small and easy wrapper around PHP's PCNTL extension.\nIt allows running of different processes in parallel, with an easy-to-use API.\n\n## Support us\n\n[<img src=\"https://github-ads.s3.eu-central-1.amazonaws.com/async.jpg?t=1\" width=\"419px\" />](https://spatie.be/github-ad-click/async)\n\nWe invest a lot of resources into creating [best in class open source packages](https://spatie.be/open-source). You can support us by [buying one of our paid products](https://spatie.be/open-source/support-us).\n\nWe highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You'll find our address on [our contact page](https://spatie.be/about-us). We publish all received postcards on [our virtual postcard wall](https://spatie.be/open-source/postcards).\n\n## Installation\n\nYou can install the package via composer:\n\n```bash\ncomposer require spatie/async\n```\n\n## Usage\n\n```php\nuse Spatie\\Async\\Pool;\n\n$pool = Pool::create();\n\nforeach ($things as $thing) {\n    $pool->add(function () use ($thing) {\n        // Do a thing\n    })->then(function ($output) {\n        // Handle success\n    })->catch(function (Throwable $exception) {\n        // Handle exception\n    });\n}\n\n$pool->wait();\n```\n\n### Event listeners\n\nWhen creating asynchronous processes, you'll get an instance of `ParallelProcess` returned.\nYou can add the following event hooks on a process.\n\n```php\n$pool\n    ->add(function () {\n        // ...\n    })\n    ->then(function ($output) {\n        // On success, `$output` is returned by the process or callable you passed to the queue.\n    })\n    ->catch(function ($exception) {\n        // When an exception is thrown from within a process, it's caught and passed here.\n    })\n    ->timeout(function () {\n        // A process took too long to finish.\n    })\n;\n```\n\n### Functional API\n\nInstead of using methods on the `$pool` object, you may also use the `async` and `await` helper functions.\n\n```php\nuse Spatie\\Async\\Pool;\n\n$pool = Pool::create();\n\nforeach (range(1, 5) as $i) {\n    $pool[] = async(function () {\n        usleep(random_int(10, 1000));\n\n        return 2;\n    })->then(function (int $output) {\n        $this->counter += $output;\n    });\n}\n\nawait($pool);\n```\n\n### Error handling\n\nIf an `Exception` or `Error` is thrown from within a child process, it can be caught per process by specifying a callback in the `->catch()` method.\n\n```php\n$pool\n    ->add(function () {\n        // ...\n    })\n    ->catch(function ($exception) {\n        // Handle the thrown exception for this child process.\n    })\n;\n```\n\nIf there's no error handler added, the error will be thrown in the parent process when calling `await()` or `$pool->wait()`.\n\nIf the child process would unexpectedly stop without throwing an `Throwable`, \nthe output written to `stderr` will be wrapped and thrown as `Spatie\\Async\\ParallelError` in the parent process.\n\n### Catching exceptions by type\n\nBy type hinting the `catch` functions, you can provide multiple error handlers, \neach for individual types of errors.\n\n```php\n$pool\n    ->add(function () {\n        throw new MyException('test');\n    })\n    ->catch(function (MyException $e) {\n        // Handle `MyException`\n    })\n    ->catch(function (OtherException $e) {\n        // Handle `OtherException`\n    });\n```\n\nNote that as soon as an exception is handled, it won't trigger any other handlers\n\n```php\n$pool\n    ->add(function () {\n        throw new MyException('test');\n    })\n    ->catch(function (MyException $e) {\n        // This one is triggerd when `MyException` is thrown\n    })\n    ->catch(function (Exception $e) {\n        // This one is not triggerd, even though `MyException` extends `Exception`\n    });\n```\n\n### Stopping a pool\n\nIf you need to stop a pool early, because the task it was performing has been completed by one\nof the child processes, you can use the `$pool->stop()` method. This will prevent the \npool from starting any additional processes.\n\n```php\nuse Spatie\\Async\\Pool;\n\n$pool = Pool::create();\n\n// Generate 10k processes generating random numbers\nfor($i = 0; $i < 10000; $i++) {\n    $pool->add(function() use ($i) {\n        return rand(0, 100);\n    })->then(function($output) use ($pool) {\n        // If one of them randomly picks 100, end the pool early.\n        if ($output === 100) {\n            $pool->stop();\n        }\n    });\n}\n\n$pool->wait();\n```\n\nNote that a pool will be rendered useless after being stopped, and a new pool should be\ncreated if needed.\n\n### Using another PHP binary\n\nBy default the pool will use `php` to execute its child processes. You can configure another binary like so:\n\n```php\nPool::create()\n    ->withBinary('/path/to/php');\n```\n\n### Working with tasks\n\nBesides using closures, you can also work with a `Task`. \nA `Task` is useful in situations where you need more setup work in the child process.\nBecause a child process is always bootstrapped from nothing, chances are you'll want to initialise eg. the dependency container before executing the task.\nThe `Task` class makes this easier to do.\n\n```php\nuse Spatie\\Async\\Task;\n\nclass MyTask extends Task\n{\n    public function configure()\n    {\n        // Setup eg. dependency container, load config,...\n    }\n\n    public function run()\n    {\n        // Do the real work here.\n    }\n}\n\n// Add the task to the pool\n$pool->add(new MyTask());\n```\n\n#### Simple tasks\n\nIf you want to encapsulate the logic of your task, but don't want to create a full blown `Task` object,\nyou may also pass an invokable object to the `Pool`.\n\n```php\nclass InvokableClass\n{\n    // ...\n\n    public function __invoke()\n    {\n        // ...\n    }\n}\n\n$pool->add(new InvokableClass(/* ... */));\n```\n\n### Pool configuration\n\nYou're free to create as many pools as you want, each pool has its own queue of processes it will handle.\n\nA pool is configurable by the developer:\n\n```php\nuse Spatie\\Async\\Pool;\n\n$pool = Pool::create()\n\n// The maximum amount of processes which can run simultaneously.\n    ->concurrency(20)\n\n// The maximum amount of time a process may take to finish in seconds\n// (decimal places are supported for more granular timeouts).\n    ->timeout(15)\n\n// Configure which autoloader sub processes should use.\n    ->autoload(__DIR__ . '/../../vendor/autoload.php')\n    \n// Configure how long the loop should sleep before re-checking the process statuses in microseconds.\n    ->sleepTime(50000)\n;\n```\n\n### Synchronous fallback\n\nIf the required extensions (`pcntl` and `posix`) are not installed in your current PHP runtime, the `Pool` will automatically fallback to synchronous execution of tasks.\n\nThe `Pool` class has a static method `isSupported` you can call to check whether your platform is able to run asynchronous processes. \n\nIf you're using a `Task` to run processes, only the `run` method of those tasks will be called when running in synchronous mode.\n\n## Behind the curtains\n\nWhen using this package, you're probably wondering what's happening underneath the surface.\n\nWe're using the `symfony/process` component to create and manage child processes in PHP.\nBy creating child processes on the fly, we're able to execute PHP scripts in parallel.\nThis parallelism can improve performance significantly when dealing with multiple synchronous tasks,\nwhich don't really need to wait for each other.\nBy giving these tasks a separate process to run on, the underlying operating system can take care of running them in parallel.\n\nThere's a caveat when dynamically spawning processes: you need to make sure that there won't be too many processes at once,\nor the application might crash.\nThe `Pool` class provided by this package takes care of handling as many processes as you want\nby scheduling and running them when it's possible.\n\nThat's the part that `async()` or `$pool->add()` does. Now let's look at what `await()` or `$pool->wait()` does.\n\nWhen multiple processes are spawned, each can have a separate time to completion.\nOne process might eg. have to wait for a HTTP call, while the other has to process large amounts of data.\nSometimes you also have points in your code which have to wait until the result of a process is returned.\n\nThis is why we have to wait at a certain point in time: for all processes on a pool to finish,\nso we can be sure it's safe to continue without accidentally killing the child processes which aren't done yet.\n\nWaiting for all processes is done by using a `while` loop, which will wait until all processes are finished.\nDetermining when a process is finished is done by using a listener on the `SIGCHLD` signal.\nThis signal is emitted when a child process is finished by the OS kernel.\nAs of PHP 7.1, there's much better support for listening and handling signals,\nmaking this approach more performant than eg. using process forks or sockets for communication.\nYou can read more about it [here](https://wiki.php.net/rfc/async_signals).\n\nWhen a process is finished, its success event is triggered, which you can hook into with the `->then()` function.\nLikewise, when a process fails or times out, the loop will update that process' status and move on.\nWhen all processes are finished, the while loop will see that there's nothing more to wait for, and stop.\nThis is the moment your parent process can continue to execute.\n\n### Comparison to other libraries\n\nWe've written a blog post containing more information about use cases for this package, as well as making comparisons to other asynchronous PHP libraries like ReactPHP and Amp: [http://stitcher.io/blog/asynchronous-php](http://stitcher.io/blog/asynchronous-php).\n\n## Testing\n\n``` bash\ncomposer test\n```\n\n## Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information what has changed recently.\n\n## Contributing\n\nPlease see [CONTRIBUTING](https://github.com/spatie/.github/blob/main/CONTRIBUTING.md) for details.\n\n### Security\n\nIf you've found a bug regarding security please mail [security@spatie.be](mailto:security@spatie.be) instead of using the issue tracker.\n\n## Postcardware\n\nYou're free to use this package, but if it makes it to your production environment we highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using.\n\nOur address is: Spatie, Kruikstraat 22, 2018 Antwerp, Belgium.\n\nWe publish all received postcards [on our company website](https://spatie.be/en/opensource/postcards).\n\n## Credits\n\n- [Brent Roose](https://github.com/brendt)\n- [All Contributors](../../contributors)\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n"
        },
        {
          "name": "UPGRADING.md",
          "type": "blob",
          "size": 0.2158203125,
          "content": "## 1.0.0\n\n- Thrown errors can only have one handler. \nIf you have several handlers catching the same exception, only the first will be triggered. \nPlease see the [README](./README.md#error-handling) for more information.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.173828125,
          "content": "{\n    \"name\": \"spatie/async\",\n    \"description\": \"Asynchronous and parallel PHP with the PCNTL extension\",\n    \"keywords\": [\n        \"spatie\",\n        \"async\"\n    ],\n    \"homepage\": \"https://github.com/spatie/async\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Brent Roose\",\n            \"email\": \"brent@spatie.be\",\n            \"homepage\": \"https://spatie.be\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.3\",\n        \"laravel/serializable-closure\": \"^1.3.7\",\n        \"symfony/process\": \"^7.2\"\n    },\n    \"require-dev\": {\n        \"larapack/dd\": \"^1.1\",\n        \"phpunit/phpunit\": \"^11.0\",\n        \"symfony/stopwatch\": \"^7.2\"\n    },\n    \"suggest\": {\n        \"ext-pcntl\": \"Required to use async processes\",\n        \"ext-posix\": \"Required to use async processes\"\n    },\n    \"autoload\": {\n        \"files\": [\n            \"src/helpers.php\"\n        ],\n        \"psr-4\": {\n            \"Spatie\\\\Async\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Spatie\\\\Async\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"scripts\": {\n        \"test\": \"vendor/bin/phpunit\"\n    },\n    \"config\": {\n        \"sort-packages\": true\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.826171875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\"\n    bootstrap=\"vendor/autoload.php\"\n    backupGlobals=\"false\"\n    backupStaticAttributes=\"false\"\n    colors=\"true\"\n    verbose=\"true\"\n    convertErrorsToExceptions=\"true\"\n    convertNoticesToExceptions=\"true\"\n    convertWarningsToExceptions=\"true\"\n    processIsolation=\"false\"\n    stopOnFailure=\"false\"\n>\n    <coverage>\n        <include>\n            <directory suffix=\".php\">src/</directory>\n        </include>\n    </coverage>\n    <testsuites>\n        <testsuite name=\"Spatie Test Suite\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n    <logging>\n        <junit outputFile=\"build/report.junit.xml\"/>\n    </logging>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}