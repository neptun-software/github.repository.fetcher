{
  "metadata": {
    "timestamp": 1736712000026,
    "page": 492,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "symfony/http-client-contracts",
      "stars": 1945,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0205078125,
          "content": "/.git* export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "vendor/\ncomposer.lock\nphpunit.xml\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.1533203125,
          "content": "CHANGELOG\n=========\n\nThe changelog is maintained for all Symfony contracts at the following URL:\nhttps://github.com/symfony/contracts/blob/main/CHANGELOG.md\n"
        },
        {
          "name": "ChunkInterface.php",
          "type": "blob",
          "size": 2,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Contracts\\HttpClient;\n\nuse Symfony\\Contracts\\HttpClient\\Exception\\TransportExceptionInterface;\n\n/**\n * The interface of chunks returned by ResponseStreamInterface::current().\n *\n * When the chunk is first, last or timeout, the content MUST be empty.\n * When an unchecked timeout or a network error occurs, a TransportExceptionInterface\n * MUST be thrown by the destructor unless one was already thrown by another method.\n *\n * @author Nicolas Grekas <p@tchwork.com>\n */\ninterface ChunkInterface\n{\n    /**\n     * Tells when the idle timeout has been reached.\n     *\n     * @throws TransportExceptionInterface on a network error\n     */\n    public function isTimeout(): bool;\n\n    /**\n     * Tells when headers just arrived.\n     *\n     * @throws TransportExceptionInterface on a network error or when the idle timeout is reached\n     */\n    public function isFirst(): bool;\n\n    /**\n     * Tells when the body just completed.\n     *\n     * @throws TransportExceptionInterface on a network error or when the idle timeout is reached\n     */\n    public function isLast(): bool;\n\n    /**\n     * Returns a [status code, headers] tuple when a 1xx status code was just received.\n     *\n     * @throws TransportExceptionInterface on a network error or when the idle timeout is reached\n     */\n    public function getInformationalStatus(): ?array;\n\n    /**\n     * Returns the content of the response chunk.\n     *\n     * @throws TransportExceptionInterface on a network error or when the idle timeout is reached\n     */\n    public function getContent(): string;\n\n    /**\n     * Returns the offset of the chunk in the response body.\n     */\n    public function getOffset(): int;\n\n    /**\n     * In case of error, returns the message that describes it.\n     */\n    public function getError(): ?string;\n}\n"
        },
        {
          "name": "Exception",
          "type": "tree",
          "content": null
        },
        {
          "name": "HttpClientInterface.php",
          "type": "blob",
          "size": 5.9228515625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Contracts\\HttpClient;\n\nuse Symfony\\Contracts\\HttpClient\\Exception\\TransportExceptionInterface;\nuse Symfony\\Contracts\\HttpClient\\Test\\HttpClientTestCase;\n\n/**\n * Provides flexible methods for requesting HTTP resources synchronously or asynchronously.\n *\n * @see HttpClientTestCase for a reference test suite\n *\n * @author Nicolas Grekas <p@tchwork.com>\n */\ninterface HttpClientInterface\n{\n    public const OPTIONS_DEFAULTS = [\n        'auth_basic' => null,   // array|string - an array containing the username as first value, and optionally the\n                                //   password as the second one; or string like username:password - enabling HTTP Basic\n                                //   authentication (RFC 7617)\n        'auth_bearer' => null,  // string - a token enabling HTTP Bearer authorization (RFC 6750)\n        'query' => [],          // string[] - associative array of query string values to merge with the request's URL\n        'headers' => [],        // iterable|string[]|string[][] - headers names provided as keys or as part of values\n        'body' => '',           // array|string|resource|\\Traversable|\\Closure - the callback SHOULD yield a string\n                                //   smaller than the amount requested as argument; the empty string signals EOF; if\n                                //   an array is passed, it is meant as a form payload of field names and values\n        'json' => null,         // mixed - if set, implementations MUST set the \"body\" option to the JSON-encoded\n                                //   value and set the \"content-type\" header to a JSON-compatible value if it is not\n                                //   explicitly defined in the headers option - typically \"application/json\"\n        'user_data' => null,    // mixed - any extra data to attach to the request (scalar, callable, object...) that\n                                //   MUST be available via $response->getInfo('user_data') - not used internally\n        'max_redirects' => 20,  // int - the maximum number of redirects to follow; a value lower than or equal to 0\n                                //   means redirects should not be followed; \"Authorization\" and \"Cookie\" headers MUST\n                                //   NOT follow except for the initial host name\n        'http_version' => null, // string - defaults to the best supported version, typically 1.1 or 2.0\n        'base_uri' => null,     // string - the URI to resolve relative URLs, following rules in RFC 3986, section 2\n        'buffer' => true,       // bool|resource|\\Closure - whether the content of the response should be buffered or not,\n                                //   or a stream resource where the response body should be written,\n                                //   or a closure telling if/where the response should be buffered based on its headers\n        'on_progress' => null,  // callable(int $dlNow, int $dlSize, array $info) - throwing any exceptions MUST abort the\n                                //   request; it MUST be called on connection, on headers and on completion; it SHOULD be\n                                //   called on upload/download of data and at least 1/s\n        'resolve' => [],        // string[] - a map of host to IP address that SHOULD replace DNS resolution\n        'proxy' => null,        // string - by default, the proxy-related env vars handled by curl SHOULD be honored\n        'no_proxy' => null,     // string - a comma separated list of hosts that do not require a proxy to be reached\n        'timeout' => null,      // float - the idle timeout (in seconds) - defaults to ini_get('default_socket_timeout')\n        'max_duration' => 0,    // float - the maximum execution time (in seconds) for the request+response as a whole;\n                                //   a value lower than or equal to 0 means it is unlimited\n        'bindto' => '0',        // string - the interface or the local socket to bind to\n        'verify_peer' => true,  // see https://php.net/context.ssl for the following options\n        'verify_host' => true,\n        'cafile' => null,\n        'capath' => null,\n        'local_cert' => null,\n        'local_pk' => null,\n        'passphrase' => null,\n        'ciphers' => null,\n        'peer_fingerprint' => null,\n        'capture_peer_cert_chain' => false,\n        'crypto_method' => \\STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT, // STREAM_CRYPTO_METHOD_TLSv*_CLIENT - minimum TLS version\n        'extra' => [],          // array - additional options that can be ignored if unsupported, unlike regular options\n    ];\n\n    /**\n     * Requests an HTTP resource.\n     *\n     * Responses MUST be lazy, but their status code MUST be\n     * checked even if none of their public methods are called.\n     *\n     * Implementations are not required to support all options described above; they can also\n     * support more custom options; but in any case, they MUST throw a TransportExceptionInterface\n     * when an unsupported option is passed.\n     *\n     * @throws TransportExceptionInterface When an unsupported option is passed\n     */\n    public function request(string $method, string $url, array $options = []): ResponseInterface;\n\n    /**\n     * Yields responses chunk by chunk as they complete.\n     *\n     * @param ResponseInterface|iterable<array-key, ResponseInterface> $responses One or more responses created by the current HTTP client\n     * @param float|null                                               $timeout   The idle timeout before yielding timeout chunks\n     */\n    public function stream(ResponseInterface|iterable $responses, ?float $timeout = null): ResponseStreamInterface;\n\n    /**\n     * Returns a new instance of the client with new default options.\n     */\n    public function withOptions(array $options): static;\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2018-present Fabien Potencier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.328125,
          "content": "Symfony HttpClient Contracts\n============================\n\nA set of abstractions extracted out of the Symfony components.\n\nCan be used to build on semantics that the Symfony components proved useful and\nthat already have battle tested implementations.\n\nSee https://github.com/symfony/contracts/blob/main/README.md for more information.\n"
        },
        {
          "name": "ResponseInterface.php",
          "type": "blob",
          "size": 4.689453125,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Contracts\\HttpClient;\n\nuse Symfony\\Contracts\\HttpClient\\Exception\\ClientExceptionInterface;\nuse Symfony\\Contracts\\HttpClient\\Exception\\DecodingExceptionInterface;\nuse Symfony\\Contracts\\HttpClient\\Exception\\RedirectionExceptionInterface;\nuse Symfony\\Contracts\\HttpClient\\Exception\\ServerExceptionInterface;\nuse Symfony\\Contracts\\HttpClient\\Exception\\TransportExceptionInterface;\n\n/**\n * A (lazily retrieved) HTTP response.\n *\n * @author Nicolas Grekas <p@tchwork.com>\n */\ninterface ResponseInterface\n{\n    /**\n     * Gets the HTTP status code of the response.\n     *\n     * @throws TransportExceptionInterface when a network error occurs\n     */\n    public function getStatusCode(): int;\n\n    /**\n     * Gets the HTTP headers of the response.\n     *\n     * @param bool $throw Whether an exception should be thrown on 3/4/5xx status codes\n     *\n     * @return string[][] The headers of the response keyed by header names in lowercase\n     *\n     * @throws TransportExceptionInterface   When a network error occurs\n     * @throws RedirectionExceptionInterface On a 3xx when $throw is true and the \"max_redirects\" option has been reached\n     * @throws ClientExceptionInterface      On a 4xx when $throw is true\n     * @throws ServerExceptionInterface      On a 5xx when $throw is true\n     */\n    public function getHeaders(bool $throw = true): array;\n\n    /**\n     * Gets the response body as a string.\n     *\n     * @param bool $throw Whether an exception should be thrown on 3/4/5xx status codes\n     *\n     * @throws TransportExceptionInterface   When a network error occurs\n     * @throws RedirectionExceptionInterface On a 3xx when $throw is true and the \"max_redirects\" option has been reached\n     * @throws ClientExceptionInterface      On a 4xx when $throw is true\n     * @throws ServerExceptionInterface      On a 5xx when $throw is true\n     */\n    public function getContent(bool $throw = true): string;\n\n    /**\n     * Gets the response body decoded as array, typically from a JSON payload.\n     *\n     * @param bool $throw Whether an exception should be thrown on 3/4/5xx status codes\n     *\n     * @throws DecodingExceptionInterface    When the body cannot be decoded to an array\n     * @throws TransportExceptionInterface   When a network error occurs\n     * @throws RedirectionExceptionInterface On a 3xx when $throw is true and the \"max_redirects\" option has been reached\n     * @throws ClientExceptionInterface      On a 4xx when $throw is true\n     * @throws ServerExceptionInterface      On a 5xx when $throw is true\n     */\n    public function toArray(bool $throw = true): array;\n\n    /**\n     * Closes the response stream and all related buffers.\n     *\n     * No further chunk will be yielded after this method has been called.\n     */\n    public function cancel(): void;\n\n    /**\n     * Returns info coming from the transport layer.\n     *\n     * This method SHOULD NOT throw any ExceptionInterface and SHOULD be non-blocking.\n     * The returned info is \"live\": it can be empty and can change from one call to\n     * another, as the request/response progresses.\n     *\n     * The following info MUST be returned:\n     *  - canceled (bool) - true if the response was canceled using ResponseInterface::cancel(), false otherwise\n     *  - error (string|null) - the error message when the transfer was aborted, null otherwise\n     *  - http_code (int) - the last response code or 0 when it is not known yet\n     *  - http_method (string) - the HTTP verb of the last request\n     *  - redirect_count (int) - the number of redirects followed while executing the request\n     *  - redirect_url (string|null) - the resolved location of redirect responses, null otherwise\n     *  - response_headers (array) - an array modelled after the special $http_response_header variable\n     *  - start_time (float) - the time when the request was sent or 0.0 when it's pending\n     *  - url (string) - the last effective URL of the request\n     *  - user_data (mixed) - the value of the \"user_data\" request option, null if not set\n     *\n     * When the \"capture_peer_cert_chain\" option is true, the \"peer_certificate_chain\"\n     * attribute SHOULD list the peer certificates as an array of OpenSSL X.509 resources.\n     *\n     * Other info SHOULD be named after curl_getinfo()'s associative return value.\n     *\n     * @return mixed An array of all available info, or one of them when $type is\n     *               provided, or null when an unsupported type is requested\n     */\n    public function getInfo(?string $type = null): mixed;\n}\n"
        },
        {
          "name": "ResponseStreamInterface.php",
          "type": "blob",
          "size": 0.59765625,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Contracts\\HttpClient;\n\n/**\n * Yields response chunks, returned by HttpClientInterface::stream().\n *\n * @author Nicolas Grekas <p@tchwork.com>\n *\n * @extends \\Iterator<ResponseInterface, ChunkInterface>\n */\ninterface ResponseStreamInterface extends \\Iterator\n{\n    public function key(): ResponseInterface;\n\n    public function current(): ChunkInterface;\n}\n"
        },
        {
          "name": "Test",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.9765625,
          "content": "{\n    \"name\": \"symfony/http-client-contracts\",\n    \"type\": \"library\",\n    \"description\": \"Generic abstractions related to HTTP clients\",\n    \"keywords\": [\"abstractions\", \"contracts\", \"decoupling\", \"interfaces\", \"interoperability\", \"standards\"],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Nicolas Grekas\",\n            \"email\": \"p@tchwork.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.1\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Contracts\\\\HttpClient\\\\\": \"\" },\n        \"exclude-from-classmap\": [\n            \"/Test/\"\n        ]\n    },\n    \"minimum-stability\": \"dev\",\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-main\": \"3.6-dev\"\n        },\n        \"thanks\": {\n            \"name\": \"symfony/contracts\",\n            \"url\": \"https://github.com/symfony/contracts\"\n        }\n    }\n}\n"
        }
      ]
    }
  ]
}