{
  "metadata": {
    "timestamp": 1736712103708,
    "page": 682,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cweiske/jsonmapper",
      "stars": 1568,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.177734375,
          "content": "# https://editorconfig.org/\nroot = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\n\n[*.php]\nindent_style = space\nindent_size = 4\n\n[*.xml]\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2294921875,
          "content": "/.gitattributes export-ignore\n/.gitignore export-ignore\n/ChangeLog export-ignore\n/example export-ignore\n/README.rst export-ignore\n/tests export-ignore\n/.editorconfig export-ignore\n/.github export-ignore\n/contributing.rst export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1064453125,
          "content": "/README.html\n/*.tgz\n/dist/\n/vendor/\n/composer.lock\n.phpunit.result.cache\n.buildpath\n.idea\n.project\n.settings\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 9.5224609375,
          "content": "2024-09-08  Christian Weiske  <cweiske@cweiske.de>\n\n\t* BC break: Enforce bStrictObjectTypeChecking on arrays\n\t  by @dktapps\n\t  https://github.com/cweiske/jsonmapper/pull/225\n\t* BC break: Only objects implementing both ArrayAccess and Traversable\n\t  are handled as arrays now.\n\t  Previously classes implementing only ArrayAccess were used as arrays,\n\t  which broke non-traversable objects providing array access.\n\t  by @daniser\n\t  https://github.com/cweiske/jsonmapper/pull/224\n\t* BC break: Reject NULL values in arrays unless explicitly allowed\n\t  Set $bStrictNullTypesInArrays to get old behavior back.\n\t  by @cweiske\n\t  https://github.com/cweiske/jsonmapper/issues/233\n\t* BC break: Default $bStrictObjectTypeChecking to true\n\t  Class constructors are not called automatically anymore.\n\t  by @cweiske\n\t  https://github.com/cweiske/jsonmapper/issues/226\n\t* Version 5.0.0\n\n2024-09-08  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Add support \"?type\" syntax for nullable types\n\t  by @RobinvanderVliet\n\t  https://github.com/cweiske/jsonmapper/pull/235\n\t* Clean up phpunit tests\n\t  by @SvenRtbg\n\t  https://github.com/cweiske/jsonmapper/pull/232\n\t* Increase test coverage to 100%\n\t  by @cweiske\n\t* Version 4.5.0\n\n2024-01-31  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Fix crash for case-insentive match without docblock\n\t  by @jorrit\n\t  https://github.com/cweiske/jsonmapper/pull/222\n\t* Version 4.4.1\n\n2024-01-28  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Add optional arguments for post mapping event\n\t  by @maikschneider\n\t* Version 4.4.0\n\n2024-01-27  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Add support for \"mixed\" class property types\n\t  by @jorrit\n\t* Add support for PHP 8.0 constructor property promotion\n\t  by @wundii\n\t* Fix notice when mapping non-flat values in flat typed properties\n\t  and throw an exception instead\n\t  by @dktapps\n\t* Version 4.3.0\n\n2023-04-09  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Add support for backed enums\n\t  by @Reinfi\n\t* Undefined property handler may return string to override variable name\n\t  by @Reinfi\n\t* Support ArrayAccess instead of only ArrayObject\n\t  by @Reinfi\n\t* map() supports class names as 2nd parameter now\n\t  by @Reinfi\n\t* Add support for variadic method arguments in setters\n\t  by @Reinfi\n\t* Version 4.2.0\n\n2022-12-08  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Throw exception when \"union|types\" are encountered (issue #192)\n\t* Version 4.1.0\n\n2020-12-01  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Add support for PHP 8.0\n\t  by @daniser\n\t* Add support for PHPUnit 8 and 9\n\t  by @daniser\n\t* Drop support for PHP 5.6 and 7.0\n\t* Drop support for PHPUnit < 7.5\n\t* Version 4.0.0\n\n\t* Thank you @SvenRtbg for caring about JsonMapper\n\n2020-11-02  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Fix PHP version check that breaks in PHP 8\n\t  by @TysonAndre\n\t* Version 3.1.1\n\n2020-08-15  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Prefer docblock annotations above reflected type for properties\n\t  by @jorrit\n\t* Version 3.1.0\n\n2020-06-28  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Add support for PHP 7.4 class type properties\n\t  by @lukascernydis\n\t* Version 3.0.0\n\n2020-04-16  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Add postMappingMethod property\n\t  by @mrcnpdlk\n\t* Version 2.1.0\n\n2020-03-04  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Fix PHP 7.4 warning: ReflectionType::__toString() is deprecated\n\t  by @DeyV\n\t* Make \"createInstance\" protected instead of public (BC break)\n\t* Version 2.0.0\n\n2019-08-15  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Add PHP extension dependencies to composer.json (pull request #132)\n\t  by @CybotTM\n\t* Add support for polymorphism in arrays (issue #134, pull request #135)\n\t  by @GregorySech\n\t* Add new option $bRemoveUndefinedAttributes (issue #126)\n\t  by @Acolyte\n\t* Call constructor when instantiating a class (pull request #129)\n\t  by @soldierm\n\t* Fix PHP 7.4 error: array offset on value of type null (pull request #131)\n\t  by @remicollet\n\t* Version 1.6.0\n\n2019-08-04  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Fix PHP 7.4 curly braces deprecation notice (pull request #130)\n\t  by @TysonAndre\n\t* Version 1.5.2\n\n2019-07-08  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Fix support for \"mixed\" in namespaced classes\n\t* Version 1.5.1\n\n2019-07-07  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Add support for PHP 7 scalar type hints (issue #98)\n\t  by @patrickallaert\n\t* Add support for namespaced classes in classMap keys without backslash (issue #111)\n\t* Throw exception when an object shall be converted into a string (pull request #106)\n\t  by @m1ke\n\t* Throw exception when an object is passed as value into a string array (pull request #107)\n\t  by @m1ke\n\t* Correctly support setting private properties defined in parent classes (issue #109)\n\t* Use class map as early as possible (issues #96 and #122)\n\t* Version 1.5.0\n\n2017-11-28  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Fix do not modify keys when mapping objects to arrays (issue #87)\n\t* Add support for lists of ArrayObjects\n\t  by @DerManoMann\n\t* Add support for callback functions in $classMap\n\t  by @DerManoMann\n\t* Use PHPUnit 5+ for tests\n\t* Version 1.4.0\n\n2017-08-14  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Fix \"Missing argument\" error when instantiating class with required\n\t  constructor parameter by @jaredchu (pull request #85)\n\t* Raise minimum PHP version to 5.6.0\n\t* Version 1.3.0\n\n2017-07-13  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Add support for multidimensional arrays\n\t  by @thomasphansen (issue #81)\n\t* Version 1.2.0\n\n2017-01-27  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Fix namespace resolution of ArrayObject child classes (issue #69)\n\t* Add PHP 7.1 nullability support\n\t  by @MHarutunian (issue #67)\n\t* Version 1.1.1\n\n2016-11-17  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Add support for mapping to private properties/methods\n\t  by @jonaswouters\n\t* Add classname to \"NULL not allowed\" exception message\n\t  by @veteran29\n\t* Version 1.1.0\n\n2016-10-11  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Add option to turn off the \"must not be NULL\" exception\n\t  by @kamranahmedse (issue #58)\n\t* Add support for properties with hyphens \"-\"\n\t  by @redshark1802 (issue #55)\n\t* Add support for both \"double\" and \"float\" types\n\t* Move to PEAR channel zustellzentrum.cweiske.de\n\t* Version 1.0.0\n\n2016-04-14  Christian Weiske  <cweiske@cweiske.de>\n\n\t* Add $undefinedPropertyHandler (issue #51)\n\t* Add $classMap to override class names (issue #53)\n\t* Add option to enable strict object type checks (issue #50)\n\t* Add composer autoloader performance improvement\n\t* Add exception when an array is expected, but simple type given\n\t  (issue #44)\n\t* Fix non-nullable object handling: Exception is now thrown when\n\t  NULL is given and an object was expected.\n\n\t  THIS WILL PROBABLY BREAK YOUR CODE\n\n\t  Add \"|null\" to all your \"@var ClassName\" lines to fix that.\n\t* Version 0.11.0\n\n2015-09-24  Christian Weiske  <christian.weiske@netresearch.de>\n\n\t* Add dependency injection support (issue #42)\n\t* Fix casting of arrays of simple types\n\t* Version 0.10.0\n\n2015-08-14  Christian Weiske  <christian.weiske@netresearch.de>\n\n\t* Add case-insensitive property matching (issue #40)\n\t* Add option to disable map() parameter type enforcement (issue #37)\n\t* Release 0.9.0\n\n2015-07-06  Christian Weiske  <christian.weiske@netresearch.de>\n\n\t* Add support for seting objects directly if they have\n\t  the correct type already by @radmen\n\t* Throw exception when a non-object is passed to map()\n\t* Release 0.8.0\n\n2015-06-19  Christian Weiske  <christian.weiske@netresearch.de>\n\n\t* Support \"mixed\" variable type (issue #33)\n\t* Release 0.7.0\n\n2015-05-28  Christian Weiske  <christian.weiske@netresearch.de>\n\n\t* Fix namespace error with setter type hints\n\t* Release 0.6.1\n\n2015-04-09  Christian Weiske  <christian.weiske@netresearch.de>\n\n\t* Prefer setter methods over directy property access\n\t* Change setter method name calculation for properties\n\t  with _ underscores by @msankhala\n\t* Release 0.6.0\n\n2015-03-18  Christian Weiske  <christian.weiske@netresearch.de>\n\n\t* Add support for nullable types (int|null) by @barryvdh\n\t* Increase test coverage to 100%\n\t* Fix float value detection by @sonicgd\n\t* Release 0.5.0\n\n2015-01-08  Christian Weiske  <christian.weiske@netresearch.de>\n\n\t* Fix bug #23: handle empty variable types\n\t* Fix bug #24: Namespaced ArrayObject class with namespaced\n\t               value type does not work\n\t* Release 0.4.4\n\n2014-12-17  Christian Weiske  <christian.weiske@netresearch.de>\n\n\t* Change license from AGPL v3 to OSL-3.0\n\t* Release 0.4.3\n\n2014-12-05  Christian Weiske  <christian.weiske@netresearch.de>\n\n\t* Fix array mapping when value is NULL by @darkgaro\n\t* Release 0.4.2\n\n2014-11-04  Christian Weiske  <christian.weiske@netresearch.de>\n\n\t* Fix handling of private properties with public setters\n\t* Fix handling of simple array types in namespaced files\n\t* Release 0.4.1\n\n2014-08-20  Sebastian Mendel  <sebastian.mendel@netresearch.de>\n\n\t* Incorporate performance tweaks from @Jalle19\n\t* Release 0.4.0\n\n2014-06-11  Andre Hähnel  <andre.haehnel@netresearch.de>\n\n\t* Optional exceptions for missing or undefined data\n\t* Release 0.3.0\n\n2014-05-16  Christian Weiske  <christian.weiske@netresearch.de>\n\n\t* Handle NULL values when mapping simple data types onto objects\n\t* Release 0.2.1\n\n2014-05-15  Christian Weiske  <christian.weiske@netresearch.de>\n\n\t* Add support for mapping simple data types onto objects\n\t* Fix tests on phpunit 4.x\n\t* Release version 0.2.0\n\n2014-03-17  Christian Weiske  <christian.weiske@netresearch.de>\n\n\t* Prevent autoloading classes with ] in its name\n\t* Release version 0.1.3\n\n2014-02-03  Christian Weiske  <christian.weiske@netresearch.de>\n\n\t* Fix issue #2: Namespace is prepended two times\n\t* Fix issue #1: Remove declare(encoding=\"UTF-8\") calls\n\t* Release version 0.1.2\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.080078125,
          "content": "Open Software License v. 3.0 (OSL-3.0)\n\nThis Open Software License (the \"License\") applies to any original work of authorship (the \"Original Work\") whose owner (the \"Licensor\") has placed the following licensing notice adjacent to the copyright notice for the Original Work:\n\n     Licensed under the Open Software License version 3.0\n\n1) Grant of Copyright License. Licensor grants You a worldwide, royalty-free, non-exclusive, sublicensable license, for the duration of the copyright, to do the following:\n\n     a) to reproduce the Original Work in copies, either alone or as part of a collective work;\n    \n     b) to translate, adapt, alter, transform, modify, or arrange the Original Work, thereby creating derivative works (\"Derivative Works\") based upon the Original Work;\n\n     c) to distribute or communicate copies of the Original Work and Derivative Works to the public, with the proviso that copies of Original Work or Derivative Works that You distribute or communicate shall be licensed under this Open Software License;\n\n     d) to perform the Original Work publicly; and\n\n     e) to display the Original Work publicly.\n\n2) Grant of Patent License. Licensor grants You a worldwide, royalty-free, non-exclusive, sublicensable license, under patent claims owned or controlled by the Licensor that are embodied in the Original Work as furnished by the Licensor, for the duration of the patents, to make, use, sell, offer for sale, have made, and import the Original Work and Derivative Works.\n\n3) Grant of Source Code License. The term \"Source Code\" means the preferred form of the Original Work for making modifications to it and all available documentation describing how to modify the Original Work. Licensor agrees to provide a machine-readable copy of the Source Code of the Original Work along with each copy of the Original Work that Licensor distributes. Licensor reserves the right to satisfy this obligation by placing a machine-readable copy of the Source Code in an information repository reasonably calculated to permit inexpensive and convenient access by You for as long as Licensor continues to distribute the Original Work.\n\n4) Exclusions From License Grant. Neither the names of Licensor, nor the names of any contributors to the Original Work, nor any of their trademarks or service marks, may be used to endorse or promote products derived from this Original Work without express prior permission of the Licensor. Except as expressly stated herein, nothing in this License grants any license to Licensor’s trademarks, copyrights, patents, trade secrets or any other intellectual property. No patent license is granted to make, use, sell, offer for sale, have made, or import embodiments of any patent claims other than the licensed claims defined in Section 2. No license is granted to the trademarks of Licensor even if such marks are included in the Original Work. Nothing in this License shall be interpreted to prohibit Licensor from licensing under terms different from this License any Original Work that Licensor otherwise would have a right to license.\n\n5) External Deployment. The term \"External Deployment\" means the use, distribution, or communication of the Original Work or Derivative Works in any way such that the Original Work or Derivative Works may be used by anyone other than You, whether those works are distributed or communicated to those persons or made available as an application intended for use over a network. As an express condition for the grants of license hereunder, You must treat any External Deployment by You of the Original Work or a Derivative Work as a distribution under section 1(c).\n\n6) Attribution Rights. You must retain, in the Source Code of any Derivative Works that You create, all copyright, patent, or trademark notices from the Source Code of the Original Work, as well as any notices of licensing and any descriptive text identified therein as an \"Attribution Notice.\" You must cause the Source Code for any Derivative Works that You create to carry a prominent Attribution Notice reasonably calculated to inform recipients that You have modified the Original Work.\n\n7) Warranty of Provenance and Disclaimer of Warranty. Licensor warrants that the copyright in and to the Original Work and the patent rights granted herein by Licensor are owned by the Licensor or are sublicensed to You under the terms of this License with the permission of the contributor(s) of those copyrights and patent rights. Except as expressly stated in the immediately preceding sentence, the Original Work is provided under this License on an \"AS IS\" BASIS and WITHOUT WARRANTY, either express or implied, including, without limitation, the warranties of non-infringement, merchantability or fitness for a particular purpose. THE ENTIRE RISK AS TO THE QUALITY OF THE ORIGINAL WORK IS WITH YOU. This DISCLAIMER OF WARRANTY constitutes an essential part of this License. No license to the Original Work is granted by this License except under this disclaimer.\n\n8) Limitation of Liability. Under no circumstances and under no legal theory, whether in tort (including negligence), contract, or otherwise, shall the Licensor be liable to anyone for any indirect, special, incidental, or consequential damages of any character arising as a result of this License or the use of the Original Work including, without limitation, damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses. This limitation of liability shall not apply to the extent applicable law prohibits such limitation.\n\n9) Acceptance and Termination. If, at any time, You expressly assented to this License, that assent indicates your clear and irrevocable acceptance of this License and all of its terms and conditions. If You distribute or communicate copies of the Original Work or a Derivative Work, You must make a reasonable effort under the circumstances to obtain the express assent of recipients to the terms of this License. This License conditions your rights to undertake the activities listed in Section 1, including your right to create Derivative Works based upon the Original Work, and doing so without honoring these terms and conditions is prohibited by copyright law and international treaty. Nothing in this License is intended to affect copyright exceptions and limitations (including “fair use” or “fair dealing”). This License shall terminate immediately and You may no longer exercise any of the rights granted to You by this License upon your failure to honor the conditions in Section 1(c).\n\n10) Termination for Patent Action. This License shall terminate automatically and You may no longer exercise any of the rights granted to You by this License as of the date You commence an action, including a cross-claim or counterclaim, against Licensor or any licensee alleging that the Original Work infringes a patent. This termination provision shall not apply for an action alleging patent infringement by combinations of the Original Work with other software or hardware.\n\n11) Jurisdiction, Venue and Governing Law. Any action or suit relating to this License may be brought only in the courts of a jurisdiction wherein the Licensor resides or in which Licensor conducts its primary business, and under the laws of that jurisdiction excluding its conflict-of-law provisions. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any use of the Original Work outside the scope of this License or after its termination shall be subject to the requirements and penalties of copyright or patent law in the appropriate jurisdiction. This section shall survive the termination of this License.\n\n12) Attorneys' Fees. In any action to enforce the terms of this License or seeking damages relating thereto, the prevailing party shall be entitled to recover its costs and expenses, including, without limitation, reasonable attorneys' fees and costs incurred in connection with such action, including any appeal of such action. This section shall survive the termination of this License.\n\n13) Miscellaneous. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.\n\n14) Definition of \"You\" in This License. \"You\" throughout this License, whether in upper or lower case, means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License. For legal entities, \"You\" includes any entity that controls, is controlled by, or is under common control with you. For purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n15) Right to Use. You may use the Original Work in all ways not otherwise restricted or conditioned by this License or by law, and Licensor promises not to interfere with or be responsible for such uses by You.\n\n16) Modification of This License. This License is Copyright (c) 2005 Lawrence Rosen. Permission is granted to copy, distribute, or communicate this License without modification. Nothing in this License permits You to modify this License as applied to the Original Work or to Derivative Works. However, You may modify the text of this License and copy, distribute or communicate your modified version (the \"Modified License\") and apply it to other original works of authorship subject to the following conditions: (i) You may not indicate in any way that your Modified License is the \"Open Software License\" or \"OSL\" and you may not use those names in the name of your Modified License; (ii) You must replace the notice specified in the first paragraph above with the notice \"Licensed under <insert your license name here>\" or with a notice of your own that is not confusingly similar to the notice in this License; and (iii) You may not claim that your original works are open source software unless your Modified License has been approved by Open Source Initiative (OSI) and You comply with its license review and certification process."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.0478515625,
          "content": "check:\n\t./vendor/bin/phpunit\n\t./vendor/bin/phpcs\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 15.2177734375,
          "content": "********************************************************\nJsonMapper - map nested JSON structures onto PHP classes\n********************************************************\n\nTakes data retrieved from a JSON__ web service and converts them\ninto nested object and arrays - using your own model classes.\n\nStarting from a base object, it maps JSON data on class properties,\nconverting them into the correct simple types or objects.\n\nIt's a bit like the native SOAP parameter mapping PHP's ``SoapClient``\ngives you, but for JSON.\nIt does not rely on any schema, only your PHP class definitions.\n\nType detection works by parsing type declarations and ``@var``\ndocblock annotations of class properties,\nas well as type hints in setter methods.\n\nYou do not have to modify your model classes by adding JSON specific code;\nit works automatically by parsing already-existing docblocks.\n\nThis library has no dependencies.\n\nKeywords: deserialization, hydration\n\n__ http://json.org/\n\n\n.. contents::\n\n============\nPro & contra\n============\n\nBenefits\n========\n- Autocompletion in IDEs\n- It's easy to add comfort methods to data model classes\n- Your JSON API may change, but your models can stay the same - not\n  breaking applications that use the model classes.\n\nDrawbacks\n=========\n- Model classes need to be written by hand\n\n  Since JsonMapper does not rely on any schema information\n  (e.g. from `json-schema`__), model classes cannot be generated\n  automatically.\n\n__ http://json-schema.org/\n\n\n=====\nUsage\n=====\n\nBasic usage\n===========\n#. `Install`__ ``netresearch/jsonmapper`` with composer\n#. Create a ``JsonMapper`` object instance\n#. Call the ``map`` or ``mapArray`` method, depending on your data\n\nMap a normal object:\n\n.. code:: php\n\n    <?php\n    require 'autoload.php';\n    $mapper = new JsonMapper();\n    $contactObject = $mapper->map($jsonContact, new Contact());\n    // or as classname\n    $contactObject = $mapper->map($jsonContact, Contact::class);\n\nMap an array of objects:\n\n.. code:: php\n\n    <?php\n    require 'autoload.php';\n    $mapper = new JsonMapper();\n    $contactsArray = $mapper->mapArray(\n        $jsonContacts, array(), 'Contact'\n    );\n\nInstead of ``array()`` you may also use ``ArrayObject`` and derived classes,\nas well as classes implementing ``ArrayAccess``.\n\n.. __: #installation\n\n\nExample\n=======\nJSON from an address book web service:\n\n.. code:: javascript\n\n    {\n        \"name\":\"Sheldon Cooper\",\n        \"address\": {\n            \"street\": \"2311 N. Los Robles Avenue\",\n            \"city\": \"Pasadena\"\n        }\n    }\n\nYour local ``Contact`` class:\n\n.. code:: php\n\n    <?php\n    class Contact\n    {\n        /**\n         * Full name\n         */\n        public string $name;\n\n        public ?Address $address;\n    }\n\nYour local ``Address`` class:\n\n.. code:: php\n\n    <?php\n    class Address\n    {\n        public $street;\n        public $city;\n\n        public function getGeoCoords()\n        {\n            //do something with $street and $city\n        }\n    }\n\nYour application code:\n\n.. code:: php\n\n    <?php\n    $json = json_decode(file_get_contents('http://example.org/sheldon.json'));\n    $mapper = new JsonMapper();\n    $contact = $mapper->map($json, new Contact());\n\n    echo \"Geo coordinates for \" . $contact->name . \": \"\n        . var_export($contact->address->getGeoCoords(), true);\n\n\nProperty type mapping\n=====================\n``JsonMapper`` uses several sources to detect the correct type of\na property in the following order:\n\n#. Setter method (``set`` + ``ucwords($propertyname)``)\n\n   Underscores \"``_``\" and hyphens \"``-``\" make the next letter uppercase.\n   Property ``foo_bar-baz`` leads to setter method ``setFooBarBaz``.\n\n   #. If it has a type hint in the method signature then its type used::\n\n        public function setPerson(Contact $person) {...}\n\n   #. The method's docblock is inspected for ``@param $type`` annotations::\n\n        /**\n         * @param Contact $person Main contact for this application\n         */\n        public function setPerson($person) {...}\n\n   #. If no type could be detected, the plain JSON value is passed\n      to the setter method.\n\n#. Class property types (since PHP 7.4)::\n\n     public Contact $person;\n\n#. Constructor property promotion types (since PHP 8.0)::\n\n     public function __construct(protected Contact $person) {}\n\n#. ``@var $type`` docblock annotation of class properties::\n\n    /**\n     * @var \\my\\application\\model\\Contact\n     */\n    public $person;\n\n   The property has to be public to be used directly.\n   You may also use `$bIgnoreVisibility`__ to utilize\n   protected and private properties.\n\n   .. __: #prop-bignorevisibility\n\n   If no type could be detected, the property gets the plain JSON value set.\n\n   If a property can not be found, JsonMapper tries to find the property\n   in a case-insensitive manner.\n   A JSON property ``isempty`` would then be mapped to a PHP property\n   ``isEmpty``.\n\n   .. note::\n      You have to provide the fully qualified namespace\n      for the type to work. Relative class names are evaluated\n      in the context of the current classes namespace, NOT\n      respecting any imports that may be present.\n\n      PHP does not provide the imports via Reflection; the comment text only\n      contains the literal text of the type.\n      For performance reasons JsonMapper does not parse the source code on its\n      own to detect and expand any imports.\n\n\nSupported type names\n--------------------\n\n- Simple types\n\n  - ``string``\n  - ``bool``, ``boolean``\n  - ``int``, ``integer``\n  - ``double``, ``float``\n  - ``array``\n  - ``object``\n  - ``mixed``\n- Class names, with and without namespaces\n\n  - ``Contact`` - exception will be thrown if the JSON value is ``null``\n- Arrays of simple types and class names:\n\n  - ``int[]``\n  - ``Contact[]``\n- Multidimensional arrays:\n\n  - ``int[][]``\n  - ``TreeDeePixel[][][]``\n- ArrayObjects of simple types and class names:\n\n  - ``ContactList[Contact]``\n  - ``NumberList[int]``\n\n- Backed enums, with and without namespaces\n\n   - ``Suit:string|Suit:int`` - exception will be thrown if the JSON value is not present in the enum\n- Nullable types:\n\n  - ``int|null`` or ``?int`` - will be ``null`` if the value in JSON is\n    ``null``, otherwise it will be an integer\n  - ``Contact|null`` or ``?Contact`` - will be ``null`` if the value in JSON is\n    ``null``, otherwise it will be an object of type ``Contact``\n\nArrayObjects and extending classes are treated as arrays.\n\nVariables without a type or with type ``mixed`` will get the\nJSON value set directly without any conversion.\n\nSee `phpdoc's type documentation`__ for more information.\n\n__ http://phpdoc.org/docs/latest/references/phpdoc/types.html\n\n\nSimple type mapping\n-------------------\n\n.. note::\n   This feature is disabled by default for security reasons since version 5.\n   See `$bStrictObjectTypeChecking`__ for details.\n\n   .. __: #prop-bstrictobjecttypechecking\n\nWhen an object shall be created but the JSON contains a simple type\nonly (e.g. string, float, boolean), this value is passed to\nthe classes' constructor. Example:\n\nPHP code:\n\n.. code:: php\n\n    public DateTime $date;\n\nJSON:\n\n.. code:: js\n\n    {\"date\":\"2014-05-15\"}\n\nThis will result in ``new DateTime('2014-05-15')`` being called.\n\n\nClass map\n---------\nWhen variables are defined as objects of abstract classes or interfaces,\nJsonMapper would normally try to instantiate those directly and crash.\n\nUsing JsonMapper's ``$classMap`` property, you can specify which classes\nshall get instantiated instead:\n\n.. code:: php\n\n    $jm = new JsonMapper();\n    $jm->classMap['Foo'] = 'Bar';\n    $jm->map(...);\n\nThis would create objects of type ``Bar`` when a variable is defined to be\nof type ``Foo``.\n\nIt is also possible to use a callable in case the actual implementation class\nneeds to be determined dynamically (for example in case of a union).\nThe mapped class ('Foo' in the example below) and the Json data are passed as\nparameters into the call.\n\n.. code:: php\n\n    $mapper = function ($class, $jvalue) {\n        // examine $class and $jvalue to figure out what class to use...\n        return 'DateTime';\n    };\n\n    $jm = new JsonMapper();\n    $jm->classMap['Foo'] = $mapper;\n    $jm->map(...);\n\n\nNullables\n---------\nJsonMapper throws an exception when a JSON property is ``null``,\nunless the PHP class property has a nullable type - e.g. ``Contact|null`` or ``?Contact``.\n\nIf your API contains many fields that may be ``null`` and you do not want\nto make all your type definitions nullable, set:\n\n.. code:: php\n\n    $jm->bStrictNullTypes = false;\n\nSince version 5.0.0, ``null`` values in arrays lead to a ``JsonMapper_Exception``\nunless the type is nullable - e.g. ``array[?string]`` or ``array[string|null]``.\n\nTo get the previous behavior back (allowing nulls even when not declared so) set:\n\n.. code:: php\n\n    $jm->bStrictNullTypesInArrays = false;\n\n\nLogging\n=======\nJsonMapper's ``setLogger()`` method supports all PSR-3__ compatible\nlogger instances.\n\nEvents that get logged:\n\n- JSON data contain a key, but the class does not have a property\n  or setter method for it.\n- Neither setter nor property can be set from outside because they\n  are protected or private\n\n__ http://www.php-fig.org/psr/psr-3/\n\n\nHandling invalid or missing data\n================================\nDuring development, APIs often change.\nTo get notified about such changes, JsonMapper can be configured to\nthrow exceptions in case of either missing or yet unknown data.\n\n\nUnknown properties\n------------------\nWhen JsonMapper sees properties in the JSON data that are\nnot defined in the PHP class, you can let it throw an exception\nby setting ``$bExceptionOnUndefinedProperty``:\n\n.. code:: php\n\n    $jm = new JsonMapper();\n    $jm->bExceptionOnUndefinedProperty = true;\n    $jm->map(...);\n\nYou may also choose to handle those properties yourself by setting\na callable__ to ``$undefinedPropertyHandler``:\n\n__ http://php.net/manual/en/language.types.callable.php\n\n.. code:: php\n\n    /**\n     * Handle undefined properties during JsonMapper::map()\n     *\n     * @param object $object    Object that is being filled\n     * @param string $propName  Name of the unknown JSON property\n     * @param mixed  $jsonValue JSON value of the property\n     *\n     * @return void\n     */\n    function setUndefinedProperty($object, $propName, $jsonValue)\n    {\n        $object->{'UNDEF' . $propName} = $jsonValue;\n    }\n\n    $jm = new JsonMapper();\n    $jm->undefinedPropertyHandler = 'setUndefinedProperty';\n    $jm->map(...);\n\nOr if you would let JsonMapper handle the setter for you, you can return a string\nfrom the ``$undefinedPropertyHandler`` which will be used as property name.\n\n.. code:: php\n\n    /**\n     * Handle undefined properties during JsonMapper::map()\n     *\n     * @param object $object    Object that is being filled\n     * @param string $propName  Name of the unknown JSON property\n     * @param mixed  $jsonValue JSON value of the property\n     *\n     * @return void\n     */\n    function fixPropName($object, $propName, $jsonValue)\n    {\n        return ucfirst($propName);\n    }\n\n    $jm = new JsonMapper();\n    $jm->undefinedPropertyHandler = 'fixPropName';\n    $jm->map(...);\n\nMissing properties\n------------------\n\n.. note::\n   This only works when `$bStrictObjectTypeChecking`__ stays enabled.\n\n   .. __: #prop-bstrictobjecttypechecking\n\nProperties in your PHP classes can be marked as \"required\" by\nputting ``@required`` in their docblock:\n\n.. code:: php\n\n    /**\n     * @var string\n     * @required\n     */\n    public $someDatum;\n\nWhen the JSON data do not contain this property, JsonMapper will throw\na ``JsonMapper_Exception`` when ``$bExceptionOnMissingData`` is activated:\n\n.. code:: php\n\n    $jm = new JsonMapper();\n    $jm->bExceptionOnMissingData = true;\n    $jm->map(...);\n\nOption ``$bRemoveUndefinedAttributes`` causes JsonMapper to remove properties\nfrom the final object if they have not been in the JSON data:\n\n.. code:: php\n\n    $jm = new JsonMapper();\n    $jm->bRemoveUndefinedAttributes = true;\n    $jm->map(...);\n\n\n.. _prop-bignorevisibility:\n\nPrivate properties and functions\n================================\nYou can allow mapping to private and protected properties and\nsetter methods by setting ``$bIgnoreVisibility`` to true:\n\n.. code:: php\n\n    $jm = new JsonMapper();\n    $jm->bIgnoreVisibility = true;\n    $jm->map(...);\n\n\n.. _prop-bstrictobjecttypechecking:\n\nSimple types instead of objects\n===============================\nWhen a variable's type is a class and JSON data is a simple type\nlike ``string``, JsonMapper can pass this value to the class' constructor\nwhen configured to do so:\n\n.. code:: php\n\n    $jm = new JsonMapper();\n    $jm->bStrictObjectTypeChecking = false;\n    $jm->map(...);\n\nThis can be used to automatically initialize DateTime objects\nfrom date strings.\n\nDisabling this strict object type checks may lead to problems, though:\n\n- When a class does not have a constructor or no constructor parameter,\n  the value will get lost\n- When the constructor has more than 1 required parameter, it will crash.\n- When the constructor's parameter type does not match the one of the\n  data in JSON, it will crash\n- ``@required`` properties will not be filled\n\n.. note::\n   The default value changed from ``false`` to ``true`` in version 5 to\n   increase security.\n\n   Now you have to opt in if you want to pass simple types to\n   the class constructor.\n\n\nPassing arrays to ``map()``\n===========================\nYou may wish to pass array data into ``map()`` that you got by calling\n\n.. code:: php\n\n    json_decode($jsonString, true)\n\nBy default, JsonMapper will throw an exception because ``map()`` requires\nan object as first parameter.\nYou can circumvent that by setting ``$bEnforceMapType`` to ``false``:\n\n.. code:: php\n\n    $jm = new JsonMapper();\n    $jm->bEnforceMapType = false;\n    $jm->map(...);\n\n\nPost-mapping callback\n=====================\nJsonMapper is able to call a custom method directly on each object after\nmapping it is finished:\n\n.. code:: php\n\n    $jm = new JsonMapper();\n    $jm->postMappingMethod = 'afterMapping';\n    $jm->map(...);\n\nNow ``afterMapping()`` is called on each mapped object\n(if the class has that method).\n\nYou may pass additional arguments to the post-mapping callback:\n\n.. code:: php\n\n    $jm = new JsonMapper();\n    $jm->postMappingMethod = 'afterMapping';\n    $jm->postMappingMethodArguments = [23, 'foo'];\n    $jm->map(...);\n\n\n.. _installation:\n\n============\nInstallation\n============\nVia Composer from Packagist__::\n\n    $ composer require netresearch/jsonmapper\n\n__ https://packagist.org/packages/netresearch/jsonmapper\n\n\n================\nRelated software\n================\nAlternatives\n\n- `Jackson's data binding`__ for Java\n- `Johannes Schmitt Serializer`__ for PHP\n- `metassione`__ for PHP\n- `Cartographer`__ for PHP\n- `Data Transfer Object`__ for PHP\n- `Valinor`__ for PHP\n- An equally named `JsonMapper`__ library that has dependencies.\n\n__ https://fasterxml.github.io/jackson-databind/\n__ http://jmsyst.com/libs/serializer\n__ https://github.com/drbonzo/metassione\n__ https://github.com/jonjomckay/cartographer\n__ https://github.com/spatie/data-transfer-object\n__ https://github.com/cuyz/valinor\n__ https://jsonmapper.net/\n\n\n================\nAbout JsonMapper\n================\n\nLicense\n=======\nJsonMapper is licensed under the `OSL 3.0`__.\n\n__ http://opensource.org/licenses/osl-3.0\n\n\nCoding style\n============\nJsonMapper follows the `PEAR Coding Standards`__.\n\n__ http://pear.php.net/manual/en/standards.php\n\n\nAuthor\n======\n`Christian Weiske`__, `cweiske.de`__\n\n__ mailto:cweiske+jsonmapper@cweiske.de\n__ http://cweiske.de/\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.150390625,
          "content": "{\n    \"name\": \"netresearch/jsonmapper\",\n    \"description\": \"Map nested JSON structures onto PHP classes\",\n    \"license\": \"OSL-3.0\",\n    \"autoload\": {\n        \"psr-0\": {\"JsonMapper\": \"src/\"}\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"namespacetest\\\\\": \"tests/support/namespacetest\",\n            \"othernamespace\\\\\": \"tests/support/othernamespace\",\n            \"Enums\\\\\": \"tests/support/Enums\"\n        },\n        \"psr-0\": {\n            \"JsonMapperTest_\": \"tests/support\",\n            \"\": [\"tests/support/Zoo\"]\n        }\n    },\n    \"authors\": [\n        {\n            \"name\": \"Christian Weiske\",\n            \"email\": \"cweiske@cweiske.de\",\n            \"homepage\": \"http://github.com/cweiske/jsonmapper/\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"support\": {\n        \"email\": \"cweiske@cweiske.de\",\n        \"issues\": \"https://github.com/cweiske/jsonmapper/issues\"\n    },\n    \"require\":{\n        \"php\": \">=7.1\",\n        \"ext-spl\": \"*\",\n        \"ext-json\": \"*\",\n        \"ext-pcre\": \"*\",\n        \"ext-reflection\": \"*\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"~7.5 || ~8.0 || ~9.0 || ~10.0\",\n        \"squizlabs/php_codesniffer\": \"~3.5\"\n    }\n}\n"
        },
        {
          "name": "contributing.rst",
          "type": "blob",
          "size": 0.6396484375,
          "content": "**************************************\nHow to add your features to JsonMapper\n**************************************\n\nIf you want to add a new feature or a fix to this library, please consider these aspects:\n\n- Respect the original code style and continue using it - it uses `PEAR Coding Standards`__.\n- Pull requests fixing a bug should include a test case that illustrates the wrong behaviour.\n- Pull requests adding a new feature should also include a test for the new feature.\n\n __ http://pear.php.net/manual/en/standards.php\n\nHaving test cases included in your pull request greatly helps reviewing it and will increase the chance of it being merged.\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpcs.xml",
          "type": "blob",
          "size": 0.4970703125,
          "content": "<?xml version=\"1.0\"?>\n<ruleset name=\"JsonMapper\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"phpcs.xsd\">\n\n    <rule ref=\"PEAR\">\n        <exclude name=\"PEAR.Commenting.FileComment.Missing\"/>\n        <exclude name=\"PEAR.Commenting.ClassComment.MissingCategoryTag\"/>\n    </rule>\n    <rule ref=\"Generic.Files.LineLength\">\n        <properties>\n            <property name=\"lineLimit\" value=\"100\"/>\n        </properties>\n    </rule>\n\n    <file>src/</file>\n</ruleset>\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.5947265625,
          "content": "<?xml version=\"1.0\"?>\n<phpunit\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.5/phpunit.xsd\"\n    backupGlobals=\"false\"\n    bootstrap=\"tests/bootstrap.php\"\n    colors=\"true\"\n    beStrictAboutChangesToGlobalState=\"true\"\n    beStrictAboutOutputDuringTests=\"true\"\n    beStrictAboutTestsThatDoNotTestAnything=\"true\"\n>\n  <testsuites>\n    <testsuite name=\"all\">\n      <directory>tests</directory>\n    </testsuite>\n  </testsuites>\n  <source>\n    <include>\n      <directory suffix=\".php\">src/</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}