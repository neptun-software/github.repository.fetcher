{
  "metadata": {
    "timestamp": 1736712224284,
    "page": 945,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spatie/simple-excel",
      "stars": 1205,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.330078125,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at https://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.yml]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3857421875,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/.travis.yml        export-ignore\n/phpunit.xml.dist   export-ignore\n/.scrutinizer.yml   export-ignore\n/tests              export-ignore\n/.editorconfig      export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.091796875,
          "content": "build\ncomposer.lock\ndocs\nvendor\ncoverage\n.phpunit.result.cache\ntests/temp\n.php-cs-fixer.cache\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 1.189453125,
          "content": "<?php\n\n$finder = Symfony\\Component\\Finder\\Finder::create()\n    ->notPath('bootstrap/*')\n    ->notPath('storage/*')\n    ->notPath('storage/*')\n    ->notPath('resources/view/mail/*')\n    ->in([\n        __DIR__ . '/src',\n        __DIR__ . '/tests',\n    ])\n    ->name('*.php')\n    ->notName('*.blade.php')\n    ->ignoreDotFiles(true)\n    ->ignoreVCS(true);\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@PSR12' => true,\n        'array_syntax' => ['syntax' => 'short'],\n        'ordered_imports' => ['sort_algorithm' => 'alpha'],\n        'no_unused_imports' => true,\n        'not_operator_with_successor_space' => true,\n        'trailing_comma_in_multiline' => true,\n        'phpdoc_scalar' => true,\n        'unary_operator_spaces' => true,\n        'binary_operator_spaces' => true,\n        'blank_line_before_statement' => [\n            'statements' => ['break', 'continue', 'declare', 'return', 'throw', 'try'],\n        ],\n        'phpdoc_single_line_var_spacing' => true,\n        'phpdoc_var_without_name' => true,\n        'method_argument_space' => [\n            'on_multiline' => 'ensure_fully_multiline',\n            'keep_multiple_spaces_after_comma' => true,\n        ]\n    ])\n    ->setFinder($finder);\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 10.50390625,
          "content": "# Changelog\n\nAll notable changes to `simple-excel` will be documented in this file\n\n## 3.7.1 - 2024-12-16\n\n### What's Changed\n\n* Update documentation on how to use custom delimiter by @pikant in https://github.com/spatie/simple-excel/pull/179\n* Fix deprecation warning for PHP 8.4 implicit nullable parameter by @hmazter in https://github.com/spatie/simple-excel/pull/180\n\n### New Contributors\n\n* @pikant made their first contribution in https://github.com/spatie/simple-excel/pull/179\n\n**Full Changelog**: https://github.com/spatie/simple-excel/compare/3.7.0...3.7.1\n\n## 3.7.0 - 2024-09-23\n\n### What's Changed\n\n* Improve the wording and fix a typo about automatically detecting headers. by @timmch in https://github.com/spatie/simple-excel/pull/174\n* Fix README sheetExists() should be hasSheet() by @damonzocp in https://github.com/spatie/simple-excel/pull/175\n* Add XLSX option helpers to SimpleExcelReader by @brodos in https://github.com/spatie/simple-excel/pull/178\n\n### New Contributors\n\n* @timmch made their first contribution in https://github.com/spatie/simple-excel/pull/174\n* @damonzocp made their first contribution in https://github.com/spatie/simple-excel/pull/175\n* @brodos made their first contribution in https://github.com/spatie/simple-excel/pull/178\n\n**Full Changelog**: https://github.com/spatie/simple-excel/compare/3.6.0...3.7.0\n\n## 3.6.0 - 2024-04-24\n\n### What's Changed\n\n* CSV stream callback fixed by @rakibhoossain in https://github.com/spatie/simple-excel/pull/170\n\n### New Contributors\n\n* @rakibhoossain made their first contribution in https://github.com/spatie/simple-excel/pull/170\n\n**Full Changelog**: https://github.com/spatie/simple-excel/compare/3.5.0...3.6.0\n\n## 3.5.0 - 2024-04-03\n\n### What's Changed\n\n* Add useEncoding to SimpleExcelReader by @aminevg in https://github.com/spatie/simple-excel/pull/167\n\n### New Contributors\n\n* @aminevg made their first contribution in https://github.com/spatie/simple-excel/pull/167\n\n**Full Changelog**: https://github.com/spatie/simple-excel/compare/3.4.0...3.5.0\n\n## 3.4.0 - 2024-03-04\n\n### What's Changed\n\n* Laravel 11.x Compatibility by @laravel-shift in https://github.com/spatie/simple-excel/pull/164\n\n### New Contributors\n\n* @laravel-shift made their first contribution in https://github.com/spatie/simple-excel/pull/164\n\n**Full Changelog**: https://github.com/spatie/simple-excel/compare/3.3.0...3.4.0\n\n## 3.3.0 - 2023-12-05\n\n### What's Changed\n\n* Add the option to check if a sheet exists by name by @pascallieverse in https://github.com/spatie/simple-excel/pull/158\n\n### New Contributors\n\n* @pascallieverse made their first contribution in https://github.com/spatie/simple-excel/pull/158\n\n**Full Changelog**: https://github.com/spatie/simple-excel/compare/3.2.1...3.3.0\n\n## 3.2.1 - 2023-11-09\n\n### What's Changed\n\n- Add some documentation to explain how to change column widths by @dakira in https://github.com/spatie/simple-excel/pull/146\n- Update README.md by @EkoGit-777 in https://github.com/spatie/simple-excel/pull/148\n- Add documentation for closing the file manually when necessary by @RayDabbah in https://github.com/spatie/simple-excel/pull/155\n- Fix openspout backwards compatibility change that stops parsing formulas by @dakira in https://github.com/spatie/simple-excel/pull/156\n\n### New Contributors\n\n- @EkoGit-777 made their first contribution in https://github.com/spatie/simple-excel/pull/148\n- @RayDabbah made their first contribution in https://github.com/spatie/simple-excel/pull/155\n\n**Full Changelog**: https://github.com/spatie/simple-excel/compare/3.2.0...3.2.1\n\n## 3.2.0 - 2023-03-13\n\n### What's Changed\n\n- Fix workflow badge in README by @nelson6e65 in https://github.com/spatie/simple-excel/pull/135\n- Allow `shouldAddBom` in `streamDownload` by @mariomka in https://github.com/spatie/simple-excel/pull/141\n\n### New Contributors\n\n- @nelson6e65 made their first contribution in https://github.com/spatie/simple-excel/pull/135\n- @mariomka made their first contribution in https://github.com/spatie/simple-excel/pull/141\n\n**Full Changelog**: https://github.com/spatie/simple-excel/compare/3.1.0...3.2.0\n\n## 3.1.0 - 2023-01-20\n\n### What's Changed\n\n- Updated Upgrade.md. For replace StyleBuilder to Style since its been … by @GekkeGlennDev in https://github.com/spatie/simple-excel/pull/134\n- Allow delimiter in streamDownload() by @lukasleitsch in https://github.com/spatie/simple-excel/pull/132\n\n### New Contributors\n\n- @GekkeGlennDev made their first contribution in https://github.com/spatie/simple-excel/pull/134\n- @lukasleitsch made their first contribution in https://github.com/spatie/simple-excel/pull/132\n\n**Full Changelog**: https://github.com/spatie/simple-excel/compare/3.0.1...3.1.0\n\n## 3.0.1 - 2023-01-17\n\n### What's Changed\n\n- Doc Correction : adding-layout by @jeremysalmon in https://github.com/spatie/simple-excel/pull/129\n- Doc Update : OpenSpout Doc Link from 3.x to 4.x and How to make border by @jeremysalmon in https://github.com/spatie/simple-excel/pull/130\n- add support for laravel 10 by @ankurk91 in https://github.com/spatie/simple-excel/pull/131\n\n### New Contributors\n\n- @jeremysalmon made their first contribution in https://github.com/spatie/simple-excel/pull/129\n- @ankurk91 made their first contribution in https://github.com/spatie/simple-excel/pull/131\n\n**Full Changelog**: https://github.com/spatie/simple-excel/compare/3.0.0...3.0.1\n\n## 3.0.0 - 2022-12-09\n\n### What's Changed\n\n- V3 with PHP 8.2 support by @Nielsvanpach in https://github.com/spatie/simple-excel/pull/128\n\n#### Most notable changes\n\n1. Add support for openspout/openspout v4\n2. Drop support for openspout/openspout v3\n3. Add type hinting\n4. Removed `useDelimiter` on SimpleExcelWriter\n5. Removed `headerRowFormatter` on SimpleExcelReader\n\n### New Contributors\n\n- @Nielsvanpach made their first contribution in https://github.com/spatie/simple-excel/pull/128\n\n**Full Changelog**: https://github.com/spatie/simple-excel/compare/2.5.0...3.0.0\n\n## 2.5.0 - 2022-12-05\n\n### What's Changed\n\n- Added addHeaderFromArray method to the SimpleWriter by @bedus-creation in https://github.com/spatie/simple-excel/pull/125\n\n### New Contributors\n\n- @bedus-creation made their first contribution in https://github.com/spatie/simple-excel/pull/125\n\n**Full Changelog**: https://github.com/spatie/simple-excel/compare/2.4.0...2.5.0\n\n## 2.4.0 - 2022-11-09\n\n### What's Changed\n\n- Refactor tests to Pest by @alexmanase in https://github.com/spatie/simple-excel/pull/123\n- Add optional styling when adding multiple rows to xslx by @chrisdicarlo in https://github.com/spatie/simple-excel/pull/122\n- Add new sheet to XLSX with Header-Row by @red-freak in https://github.com/spatie/simple-excel/pull/124\n\n### New Contributors\n\n- @alexmanase made their first contribution in https://github.com/spatie/simple-excel/pull/123\n- @chrisdicarlo made their first contribution in https://github.com/spatie/simple-excel/pull/122\n- @red-freak made their first contribution in https://github.com/spatie/simple-excel/pull/124\n\n**Full Changelog**: https://github.com/spatie/simple-excel/compare/2.3.0...2.4.0\n\n## 2.3.0 - 2022-10-11\n\n### What's Changed\n\n- Use field delimiter only for csv reader by @dehbka in https://github.com/spatie/simple-excel/pull/111\n- Add function fromSheetName to read on specific spreadsheet name by @SpyBott in https://github.com/spatie/simple-excel/pull/117\n\n### New Contributors\n\n- @dehbka made their first contribution in https://github.com/spatie/simple-excel/pull/111\n- @SpyBott made their first contribution in https://github.com/spatie/simple-excel/pull/117\n\n**Full Changelog**: https://github.com/spatie/simple-excel/compare/2.2.0...2.3.0\n\n## 2.2.0 - 2022-09-02\n\n### What's Changed\n\n- Documentation for fromSheet and headerOnRow by @dakira in https://github.com/spatie/simple-excel/pull/102\n- Ability to set custom headers (whether or not headers exist in the file) by @kitbs in https://github.com/spatie/simple-excel/pull/103\n\n### New Contributors\n\n- @kitbs made their first contribution in https://github.com/spatie/simple-excel/pull/103\n\n**Full Changelog**: https://github.com/spatie/simple-excel/compare/2.1.0...2.2.0\n\n## 2.1.0 - 2022-06-09\n\n### What's Changed\n\n- Implement headerOnRow method by @ArondeParon in https://github.com/spatie/simple-excel/pull/89\n\n### New Contributors\n\n- @ArondeParon made their first contribution in https://github.com/spatie/simple-excel/pull/89\n\n**Full Changelog**: https://github.com/spatie/simple-excel/compare/2.0.0...2.1.0\n\n## 2.0.0 - 2022-06-06\n\n- move from box/spout to openspout/openspout\n\n## 1.15.1 - 2022-05-11\n\n## What's Changed\n\n- Update README.md by @vdvcoder in https://github.com/spatie/simple-excel/pull/80\n- Typo by @saurabhsharma2u in https://github.com/spatie/simple-excel/pull/83\n- Allow for selecting sheet by number by @dakira in https://github.com/spatie/simple-excel/pull/86\n\n## New Contributors\n\n- @vdvcoder made their first contribution in https://github.com/spatie/simple-excel/pull/80\n- @saurabhsharma2u made their first contribution in https://github.com/spatie/simple-excel/pull/83\n- @dakira made their first contribution in https://github.com/spatie/simple-excel/pull/86\n\n**Full Changelog**: https://github.com/spatie/simple-excel/compare/1.15.0...1.15.1\n\n## 1.15.0 - 2022-01-12\n\n- support Laravel 9\n\n## 1.14.1 - 2021-06-11\n\n- Allow trimming empty header titles (#64)\n\n## 1.14.0 - 2021-06-10\n\n- Allow all forms of callables to format header (#63)\n- drop support for PHP 7\n\n## 1.13.1 - 2021-03-26\n\n- make sure `getHeaders()` take delimiter in account (#57)\n\n## 1.13.0 - 2020-01-18\n\n- add `getHeaders()` (#52)\n\n## 1.12.0 - 2020-12-30\n\n- add `headersToSnakeCase` and `formatHeadersUsing`\n\n## 1.11.0 - 2020-12-29\n\n- enable disabling BOM on writer (#48)\n\n## 1.10.2 - 2020-12-28\n\n- use setHeaderStyle fluently (#47)\n\n## 1.10.1 - 2020-12-27\n\n- enable header row trimming (#46)\n\n## 1.10.0 - 2020-12-08\n\n- allow setting the writer/reader type manually (#43)\n\n## 1.9.1 - 2020-11-30\n\n- add support for PHP 8\n\n## 1.9.0 - 2020-10-30\n\n- add Header Styling Method (#39)\n\n## 1.8.1 - 2020-10-08\n\n- fix `skip` method\n\n## 1.8.0 - 2020-10-04\n\n- add 'take' and 'skip' functions to reader (#35)\n\n## 1.7.1 - 2020-09-08\n\n- allow Laravel 8\n\n## 1.7.0 - 2020-08-19\n\n- make `addRows` chainable\n\n## 1.6.0 - 2020-07-16\n\n- add `addRows`\n\n## 1.5.0 - 2020-07-01\n\n- wrong tag, please ignore\n\n## 1.4.0 - 2020-04-15\n\n- Add `useDelimiter` method for `SimpleExcelWriter` (#25)\n\n## 1.3.1 - 2019-02-17\n\n- Fix columns being returned in the wrong order\n\n## 1.3.0 - 2019-01-02\n\n- drop support for PHP 7.3\n\n## 1.2.2 - 2019-11-29\n\n- make sure `streamDownload` does not create a file\n\n## 1.2.0 - 2019-11-29\n\n- add `streamDownload` and `toBrowser`\n\n## 1.1.0 - 2019-10-27\n\n- add `getPath`\n\n## 1.0.0 - 2019-10-26\n\n- initial release\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.064453125,
          "content": "The MIT License (MIT)\n\nCopyright (c) Spatie bvba <info@spatie.be>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.1015625,
          "content": "# Read and write simple Excel and CSV files\n\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/spatie/simple-excel.svg?style=flat-square)](https://packagist.org/packages/spatie/simple-excel)\n![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/spatie/simple-excel/run-tests.yml?label=tests&branch=main)\n[![Total Downloads](https://img.shields.io/packagist/dt/spatie/simple-excel.svg?style=flat-square)](https://packagist.org/packages/spatie/simple-excel)\n\nThis package allows you to easily read and write simple Excel and CSV files. Behind the scenes generators are used to ensure low memory usage, even when working with large files.\n\nHere's an example on how to read an Excel or CSV.\n\n```php\nuse Spatie\\SimpleExcel\\SimpleExcelReader;\n\nSimpleExcelReader::create($pathToFile)->getRows()\n   ->each(function(array $rowProperties) {\n        // process the row\n    });\n```\n\nIf `$pathToFile` ends with `.csv` a CSV file is assumed. If it ends with `.xlsx`, an Excel file is assumed.\n\n## Support us\n\n[<img src=\"https://github-ads.s3.eu-central-1.amazonaws.com/simple-excel.jpg?t=1\" width=\"419px\" />](https://spatie.be/github-ad-click/simple-excel)\n\nWe invest a lot of resources into creating [best in class open source packages](https://spatie.be/open-source). You can support us by [buying one of our paid products](https://spatie.be/open-source/support-us).\n\nWe highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You'll find our address on [our contact page](https://spatie.be/about-us). We publish all received postcards on [our virtual postcard wall](https://spatie.be/open-source/postcards).\n\n## Installation\n\nYou can install the package via composer:\n\n```bash\ncomposer require spatie/simple-excel\n```\n\n## Usage\n\n### Reading a CSV\n\nImagine you have a CSV with this content.\n\n```csv\nemail,first_name\njohn@example.com,john\njane@example.com,jane\n```\n\n```php\nuse Spatie\\SimpleExcel\\SimpleExcelReader;\n\n// $rows is an instance of Illuminate\\Support\\LazyCollection\n$rows = SimpleExcelReader::create($pathToCsv)->getRows();\n\n$rows->each(function(array $rowProperties) {\n   // in the first pass $rowProperties will contain\n   // ['email' => 'john@example.com', 'first_name' => 'john']\n});\n```\n\n#### Reading an Excel file\n\nReading an Excel file is identical to reading a CSV file. Just make sure that the path given to the `create` method of `SimpleExcelReader` ends with `xlsx`.\n\n#### Working with LazyCollections\n\n`getRows` will return an instance of [`Illuminate\\Support\\LazyCollection`](https://laravel.com/docs/master/collections#lazy-collections). This class is part of the Laravel framework. Behind the scenes generators are used, so memory usage will be low, even for large files.\n\nYou'll find a list of methods you can use on a `LazyCollection` [in the Laravel documentation](https://laravel.com/docs/master/collections#the-enumerable-contract).\n\nHere's a quick, silly example where we only want to process rows that have a `first_name` that contains more than 5 characters.\n\n```php\nSimpleExcelReader::create($pathToCsv)->getRows()\n    ->filter(function(array $rowProperties) {\n       return strlen($rowProperties['first_name']) > 5;\n    })\n    ->each(function(array $rowProperties) {\n        // processing rows\n    });\n```\n\n#### Reading a file without headers\n\nIf the file you are reading does not contain a header row, then you should use the `noHeaderRow()` method.\n\n```php\n// $rows is an instance of Illuminate\\Support\\LazyCollection\n$rows = SimpleExcelReader::create($pathToCsv)\n    ->noHeaderRow()\n    ->getRows()\n    ->each(function(array $rowProperties) {\n       // in the first pass $rowProperties will contain\n       // [0 => 'john@example', 1 => 'john']\n});\n```\n\n#### Manually setting the headers\n\nIf you would like to use a specific array of values for the headers, you can use the `useHeaders()` method.\n\n```php\n// $rows is an instance of Illuminate\\Support\\LazyCollection\n$rows = SimpleExcelReader::create($pathToCsv)\n    ->useHeaders(['email_address', 'given_name'])\n    ->getRows()\n    ->each(function(array $rowProperties) {\n       // in the first pass $rowProperties will contain\n       // ['email_address' => 'john@example', 'given_name' => 'john']\n});\n```\n\nIf your file already contains a header row, it will be ignored and replaced with your custom headers.\n\nIf your file does not contain a header row, you should also use `noHeaderRow()`, and your headers will be used instead of numeric keys, as above.\n\n#### Working with multiple sheet documents\n\nExcel files can include multiple spreadsheets. You can select the sheet you want to use with the `fromSheet()` method to select by index.\n\n```php\n$rows = SimpleExcelReader::create($pathToXlsx)\n    ->fromSheet(3)\n    ->getRows();\n```\n\nWith multiple spreadsheets, you can too select the sheet you want to use with the `fromSheetName()` method to select by name.\n\n```php\n$rows = SimpleExcelReader::create($pathToXlsx)\n    ->fromSheetName(\"sheet1\")\n    ->getRows();\n```\n\nIf you want to check if a sheet exists, use the `hasSheet()` method.\n\n```php\n$hasSheet = SimpleExcelReader::create($pathToXlsx)\n    ->hasSheet(\"sheet1\");\n```\n\n#### Retrieving header row values\n\nIf you would like to retrieve the header row as an array, you can use the `getHeaders()` method.\n\nIf you have used `useHeaders()` to set custom headers, these will be returned instead of the actual headers in the file. To get the original headers from the file, use `getOriginalHeaders()`.\n\n```php\n$headers = SimpleExcelReader::create($pathToCsv)->getHeaders();\n\n// $headers will contain\n// [ 'email', 'first_name' ]\n```\n\n#### Dealing with headers that are not on the first line\n\nIf your file has headers that are not on the first line, you can use the `headerOnRow()` method\nto indicate the line at which the headers are present. Any data above this line\nwill be discarded from the result.\n\n`headerOnRow` accepts the line number as an argument, starting at 0. Blank lines are not counted.\n\nSince blank lines will not be counted, this method is mostly useful for files\nthat include formatting above the actual dataset, which can be the case with Excel files.\n\n```csv\nThis is my data sheet\nSee worksheet 1 for the data, worksheet 2 for the graphs.\n\n\n\nemail , firstname\njohn@example.com,john\njane@example.com,jane\n```\n\n```php\n// $rows is an instance of Illuminate\\Support\\LazyCollection\n$rows = SimpleExcelReader::create($pathToCsv)\n    ->trimHeaderRow()\n    ->headerOnRow(3)\n    ->getRows()\n    ->each(function(array $rowProperties) {\n       // in the first pass $rowProperties will contain\n       // ['email' => 'john@example', 'first_name' => 'john']\n});\n```\n\n#### Trimming headers\n\nIf the file you are reading contains a title row, but you need to trim additional characters on the title values, then you should use the `trimHeaderRow()` method.\nThis functionality mimics the `trim` method, and the default characters it trims, matches that function.\n\nImagine you have a csv file with this content.\n\n```csv\nemail , first_name\njohn@example.com,john\njane@example.com,jane\n```\n\n```php\n// $rows is an instance of Illuminate\\Support\\LazyCollection\n$rows = SimpleExcelReader::create($pathToCsv)\n    ->trimHeaderRow()\n    ->getRows()\n    ->each(function(array $rowProperties) {\n       // in the first pass $rowProperties will contain\n       // ['email' => 'john@example', 'first_name' => 'john']\n});\n```\n\n`trimHeaderRow()` additionally accepts a param to specify what characters to trim. This param can utilize the same functionality allowed by the trim function's `$characters` definition including a range of characters.\n\n#### Convert headers to snake_case\n\nIf you would like all the headers to be converted to snake_case, use the the `headersToSnakeCase()` method.\n\n```csv\nEmail,First Name,Last Name\njohn@example.com,john,doe\nmary-jane@example.com,mary jane,doe\n```\n\n```php\n$rows = SimpleExcelReader::create($pathToCsv)\n    ->headersToSnakeCase()\n    ->getRows()\n    ->each(function(array $rowProperties) {\n        // rowProperties converted to snake_case\n        // ['email' => 'john@example', 'first_name' => 'John', 'last_name' => 'doe']\n    });\n```\n\n#### Manually formatting headers\n\nYou can use a custom formatter to change the headers using the `formatHeadersUsing` method and passing a closure.\n\n```csv\nemail,first_name,last_name\njohn@example.com,john,doe\nmary-jane@example.com,mary jane,doe\n```\n\n```php\n$rows = SimpleExcelReader::create($pathToCsv)\n    ->formatHeadersUsing(fn($header) => \"{$header}_simple_excel\")\n    ->getRows()\n    ->each(function(array $rowProperties) {\n        // ['email_simple_excel' => 'john@example', 'first_name_simple_excel' => 'John', 'last_name_simple_excel' => 'doe']\n    });\n```\n\n#### Manually working with the reader object\n\nUnder the hood this package uses the [box/spout](https://github.com/openspout/openspout) package. You can get to the underlying reader that implements `\\OpenSpout\\Reader\\ReaderInterface` by calling the `getReader` method.\n\n```php\n$reader = SimpleExcelReader::create($pathToCsv)->getReader();\n```\n\n#### Limiting the result set\n\nThe `take` method allows you to specify a limit on how many rows should be returned.\n\n```php\n// $rows is an instance of Illuminate\\Support\\LazyCollection\n$rows = SimpleExcelReader::create($pathToCsv)\n    ->take(5)\n    ->getRows();\n```\n\nThe `skip` method allows you to define which row to start reading data from. In this example we get rows 11 to 16.\n\n\n```php\n$rows = SimpleExcelReader::create($pathToCsv)\n    ->skip(10)\n    ->take(5)\n    ->getRows();\n```\n\n#### Reading cells that contain formulas\n\nNormally, cells containing formulas are parsed and their computed value will be returned. If you want to keep the actual formula as a string, you can use the `keepFormulas` method.\n\n```php\n$rows = SimpleExcelReader::create($pathToXlsx)\n    ->keepFormulas()\n    ->getRows();\n```\n\n#### Preserve date formatting\n\nBy default, when reading a spreadsheet with dates or times, the values are returned as `DateTimeImmutable` objects. To return a formatted date (e.g., “9/20/2024”) instead, use the `preserveDateTimeFormatting` method. The date format will match what’s specified in the spreadsheet.\n\n```php\n$rows = SimpleExcelReader::create($pathToXlsx)\n    ->preserveDateTimeFormatting()\n    ->getRows();\n```\n\n#### Preserve empty rows\n\nYou can preserve empty rows by using the `preserveEmptyRows` method.\n\n```php\n$rows = SimpleExcelReader::create($pathToXlsx)\n    ->preserveEmptyRows()\n    ->getRows();\n```\n\n### Writing files\n\nHere's how you can write a CSV file:\n\n```php\nuse Spatie\\SimpleExcel\\SimpleExcelWriter;\n\n$writer = SimpleExcelWriter::create($pathToCsv)\n     ->addRow([\n        'first_name' => 'John',\n        'last_name' => 'Doe',\n    ])\n    ->addRow([\n        'first_name' => 'Jane',\n        'last_name' => 'Doe',\n    ]);\n```\n\nThe file at `pathToCsv` will contain:\n\n```csv\nfirst_name,last_name\nJohn,Doe\nJane,Doe\n```\n\n#### Manually set the header from array\n\nInstead of letting the package automatically detect a header row, you can set it manually.\n\n```php\nuse Spatie\\SimpleExcel\\SimpleExcelWriter;\n\n$writer = SimpleExcelWriter::create($pathToCsv)\n    ->addHeader(['first_name', 'last_name'])\n    ->addRow(['John', 'Doe'])\n    ->addRow(['Jane', 'Doe'])\n```\n\n#### Writing an Excel file\n\nWriting an Excel file is identical to writing a csv. Just make sure that the path given to the `create` method of `SimpleExcelWriter` ends with `xlsx`.\nOne other thing to be aware of when writing an Excel file is that the file doesn't get written until the instance of `SimpleExcelWriter` is garbage collected.\nThat's when the `close` method is called. The `close` method is what finalizes writing the file to disk. If you need to access the file before the instance is garbage collected you will need to call the `close` method first.\n\n```php\n$writer->close();\n```\n\n#### Streaming an Excel file to the browser\n\nInstead of writing a file to disk, you can stream it directly to the browser.\n\n```php\n$writer = SimpleExcelWriter::streamDownload('your-export.xlsx')\n     ->addRow([\n        'first_name' => 'John',\n        'last_name' => 'Doe',\n    ])\n    ->addRow([\n        'first_name' => 'Jane',\n        'last_name' => 'Doe',\n    ])\n    ->toBrowser();\n```\n\nMake sure to call `flush()` if you're sending large streams to the browser\n\n```php\n$writer = SimpleExcelWriter::streamDownload('your-export.xlsx');\n\nforeach (range(1, 10_000) as $i) {\n    $writer->addRow([\n        'first_name' => 'John',\n        'last_name' => 'Doe',\n    ]);\n\n    if ($i % 1000 === 0) {\n        flush(); // Flush the buffer every 1000 rows\n    }\n}\n\n$writer->toBrowser();\n```\n\nYou could also use a callback.\n\n```php\nuse Spatie\\SimpleExcel\\SimpleExcelWriter;\nuse OpenSpout\\Common\\Entity\\Row;\n\n$writer = SimpleExcelWriter::streamDownload('user-list.xlsx', function ($writerCallback, $downloadName) {\n\n    $writerCallback->openToBrowser($downloadName);\n\n    $writerCallback->addRow(Row::fromValues([\n        'first_name' => 'First Name',\n        'last_name' => 'Last Name',\n    ]));\n\n    $writerCallback->addRow(Row::fromValues([\n        'first_name' => 'Rakib',\n        'last_name' => 'Hossain',\n    ]));\n\n    foreach (range(1, 10_000) as $i) {\n        $writerCallback->addRow(Row::fromValues([\n            'first_name' => 'Rakib',\n            'last_name' => 'Hossain',\n        ]));\n\n        if ($i % 1000 === 0) {\n            flush();\n        }\n    }\n});\n\n$writer->toBrowser();\n```\n\n\n### Writing multiple rows at once\n\nYou can use `addRows` instead of `addRow` to add multiple rows at once.\n\n```php\n$writer = SimpleExcelWriter::streamDownload('your-export.xlsx')\n     ->addRows([\n        [\n            'first_name' => 'John',\n            'last_name' => 'Doe',\n        ],\n        [\n            'first_name' => 'Jane',\n            'last_name' => 'Doe',\n        ],\n    ]);\n```\n\n#### Writing a file without titles\n\nIf the file you are writing should not have a title row added automatically, then you should use the `noHeaderRow()` method.\n\n```php\n$writer = SimpleExcelWriter::create($pathToCsv)\n    ->noHeaderRow()\n    ->addRow([\n        'first_name' => 'Jane',\n        'last_name' => 'Doe',\n    ]);\n```\n\nThis will output:\n\n```csv\nJane,Doe\n```\n\n#### Adding layout\n\nUnder the hood this package uses the [openspout/openspout](https://github.com/openspout/openspout) package. That package contains a `Style` builder that you can use to format rows. Styles can only be used on excel documents.\n\n```php\nuse OpenSpout\\Common\\Entity\\Style\\Color;\nuse OpenSpout\\Common\\Entity\\Style\\CellAlignment;\nuse OpenSpout\\Common\\Entity\\Style\\Style;\nuse OpenSpout\\Common\\Entity\\Style\\Border;\nuse OpenSpout\\Common\\Entity\\Style\\BorderPart;\n\n/* Create a border around a cell */\n$border = new Border(\n        new BorderPart(Border::BOTTOM, Color::LIGHT_BLUE, Border::WIDTH_THIN, Border::STYLE_SOLID),\n        new BorderPart(Border::LEFT, Color::LIGHT_BLUE, Border::WIDTH_THIN, Border::STYLE_SOLID),\n        new BorderPart(Border::RIGHT, Color::LIGHT_BLUE, Border::WIDTH_THIN, Border::STYLE_SOLID),\n        new BorderPart(Border::TOP, Color::LIGHT_BLUE, Border::WIDTH_THIN, Border::STYLE_SOLID)\n    );\n\n$style = (new Style())\n   ->setFontBold()\n   ->setFontSize(15)\n   ->setFontColor(Color::BLUE)\n   ->setShouldWrapText()\n   ->setBackgroundColor(Color::YELLOW)\n   ->setBorder($border);\n\n$writer->addRow(['values', 'of', 'the', 'row'], $style);\n```\nTo style your HeaderRow simply call the `setHeaderStyle($style)` Method.\n\n```php\n$writer->setHeaderStyle($style);\n```\n\nFor more information on styles head over to [the Spout docs](https://github.com/openspout/openspout/tree/4.x/docs).\n\n#### Setting column widths and row heights\n\nBy accessing the underlying OpenSpout Writer you can set default column widths and row heights and change the width of specific columns.\n\n```php\nSimpleExcelWriter::create(\n    file: 'document.xlsx',\n    configureWriter: function ($writer) {\n        $options = $writer->getOptions();\n        $options->DEFAULT_COLUMN_WIDTH=25; // set default width\n        $options->DEFAULT_ROW_HEIGHT=15; // set default height\n        // set columns 1, 3 and 8 to width 40\n        $options->setColumnWidth(40, 1, 3, 8);\n        // set columns 9 through 12 to width 10\n        $options->setColumnWidthForRange(10, 9, 12);\n    }\n)\n```\n\n#### Creating an additional sheets\n\nBy default, the writer will write to the first sheet. If you want to write to an additional sheet, you can use the `addNewSheetAndMakeItCurrent` method.\n\n```php\n$writer = SimpleExcelWriter::create($pathToXlsx);\n\nPosts::all()->each(function (Post $post) use ($writer) {\n    $writer->nameCurrentSheet($post->title);\n\n    $post->comments->each(function (Comment $comment) use ($writer) {\n        $writer->addRow([\n            'comment' => $comment->comment,\n            'author' => $comment->author,\n        ]);\n    });\n\n    if(!$post->is($posts->last())) {\n        $writer->addNewSheetAndMakeItCurrent();\n    }\n});\n```\n\n#### Using an alternative delimiter\n\nBy default the `SimpleExcelReader` will assume that the delimiter is a `,`.\n\nThis is how you can use an alternative delimiter:\n\n```php\nSimpleExcelWriter::create($pathToCsv)->useDelimiter(';');\n```\n\n#### Getting the number of rows written\n\nYou can get the number of rows that are written. This number includes the automatically added header row.\n\n```php\n$writerWithAutomaticHeader = SimpleExcelWriter::create($this->pathToCsv)\n    ->addRow([\n        'first_name' => 'John',\n        'last_name' => 'Doe',\n    ]);\n\n$writerWithAutomaticHeader->getNumberOfRows(); // returns 2\n```\n\n#### Disable BOM\n\nYou can also disable adding a BOM to the start of the file. BOM must be disabled on create and cannot be disabled after creation of the writer.\n\nA BOM, or byte order mark, indicates a number of things for the file being written including the file being unicode as well as it's UTF encoding type.\n\n```php\nSimpleExcelWriter::createWithoutBom($this->pathToCsv, $type);\n```\n\nAdditional information about BOM can be found [here](https://en.wikipedia.org/wiki/Byte_order_mark).\n\n#### Manually working with the writer object\n\nUnder the hood this package uses the [openspout/openspout](https://github.com/openspout/openspout) package. You can get to the underlying writer that implements `\\OpenSpout\\Reader\\WriterInterface` by calling the `getWriter` method.\n\n```php\n$writer = SimpleExcelWriter::create($pathToCsv)->getWriter();\n```\n\n### Testing\n\n``` bash\ncomposer test\n```\n\n### Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information on what has changed recently.\n\n## Contributing\n\nPlease see [CONTRIBUTING](https://github.com/spatie/.github/blob/main/CONTRIBUTING.md) for details.\n\n### Security\n\nIf you've found a bug regarding security please mail [security@spatie.be](mailto:security@spatie.be) instead of using the issue tracker.\n\n## Postcardware\n\nYou're free to use this package, but if it makes it to your production environment we highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using.\n\nOur address is: Spatie, Kruikstraat 22, 2018 Antwerp, Belgium.\n\nWe publish all received postcards [on our company website](https://spatie.be/en/opensource/postcards).\n\n## Credits\n\n- [Freek Van der Herten](https://github.com/freekmurze)\n- [All Contributors](../../contributors)\n\n## Alternatives\n\n- [PhpSpreadsheet](https://phpspreadsheet.readthedocs.io/en/latest/)\n- [laravel-excel](https://laravel-excel.com)\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 1.603515625,
          "content": "# Upgrade guide\n\n## Upgrading from 2.x to 3.0\n\n\n### Most notable changes\n\n1. Add support for openspout/openspout v4\n2. Drop support for openspout/openspout v3\n3. Add type hinting\n4. Removed `useDelimiter` on SimpleExcelWriter\n5. Removed `headerRowFormatter` on SimpleExcelReader\n\n### Classes have been moved\n\n- `\\Box\\Spout\\Common\\Entity\\Row` should be replaced with `\\OpenSpout\\Common\\Entity\\Row`\n- `\\Box\\Spout\\Common\\Entity\\Style\\Style` should be replaced with `OpenSpout\\Common\\Entity\\Style\\Style`\n\n### Removed `useDelimiter()` on SimpleExcelWriter\n\nIn v3 there was a method to set a delimiter. Now you should pass this as parameter to the constructor.\n\nChange\n```php\n$reader = SimpleExcelWriter::create($file)->useDelimiter(';');\n```\n\nTo\n```php\n $writer = SimpleExcelWriter::create(file: $file, delimiter: ';');\n```\n\n### Replace StyleBuilder with Style\n\nIn OpenSpout v4 the `StyleBuilder` is removed and integrated inside the `Style` class.\n\nUpdate code like this...\n\n```php\nuse OpenSpout\\Common\\Entity\\Style\\Style;\nuse OpenSpout\\Writer\\Common\\Creator\\Style\\StyleBuilder;\n\n$builder = new StyleBuilder();\n$builder\n    ->setFontBold()\n    ->setFontName('Sans');\n```\n\n... to ...\n\n```php\nuse OpenSpout\\Common\\Entity\\Style\\Style;\n\n$style = new Style();\n$style\n    ->setFontBold()\n    ->setFontName('Sans');\n```\n\n### Deprecated setting the type manually\n\nIn v4 of openspout/openspout it is no longer possible to explicitly set the type.\nWe still have support for this, but we'll deprecate the method.\n\n```php\n$reader = SimpleExcelReader::create('php://input', 'csv');\n```\n\n```php\n $writer = SimpleExcelWriter::create('php://output', 'csv');\n```\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.4287109375,
          "content": "{\n    \"name\": \"spatie/simple-excel\",\n    \"description\": \"Read and write simple Excel and CSV files\",\n    \"keywords\": [\n        \"spatie\",\n        \"simple-excel\"\n    ],\n    \"homepage\": \"https://github.com/spatie/simple-excel\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Freek Van der Herten\",\n            \"email\": \"freek@spatie.be\",\n            \"homepage\": \"https://spatie.be\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"openspout/openspout\": \"^4.19\",\n        \"illuminate/support\": \"^9.0|^10.0|^11.0\"\n    },\n    \"require-dev\": {\n        \"pestphp/pest-plugin-laravel\": \"^1.3|^2.3\",\n        \"phpunit/phpunit\": \"^9.4|^10.5\",\n        \"spatie/pest-plugin-snapshots\": \"^1.1|^2.1\",\n        \"spatie/phpunit-snapshot-assertions\": \"^4.0|^5.1\",\n        \"spatie/temporary-directory\": \"^1.2|^2.2\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Spatie\\\\SimpleExcel\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Spatie\\\\SimpleExcel\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"scripts\": {\n        \"format\": \"vendor/bin/php-cs-fixer fix --allow-risky=yes\",\n        \"test\": \"vendor/bin/pest\",\n        \"test-coverage\": \"vendor/bin/pest --coverage-html coverage\"\n    },\n    \"config\": {\n        \"sort-packages\": true,\n        \"allow-plugins\": {\n            \"pestphp/pest-plugin\": true\n        }\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 1.1591796875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n    backupGlobals=\"false\"\n    backupStaticAttributes=\"false\"\n    bootstrap=\"vendor/autoload.php\"\n    colors=\"true\"\n    convertErrorsToExceptions=\"true\"\n    convertNoticesToExceptions=\"true\"\n    convertWarningsToExceptions=\"true\"\n    processIsolation=\"false\"\n    stopOnFailure=\"false\"\n    executionOrder=\"random\"\n    failOnWarning=\"true\"\n    failOnRisky=\"true\"\n    failOnEmptyTestSuite=\"true\"\n    beStrictAboutOutputDuringTests=\"true\"\n    verbose=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"Spatie Test Suite\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n    <coverage>\n        <include>\n            <directory suffix=\".php\">./src</directory>\n        </include>\n        <report>\n            <html outputDirectory=\"build/coverage\"/>\n            <text outputFile=\"build/coverage.txt\"/>\n            <clover outputFile=\"build/logs/clover.xml\"/>\n        </report>\n    </coverage>\n    <logging>\n        <junit outputFile=\"build/report.junit.xml\"/>\n    </logging>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}