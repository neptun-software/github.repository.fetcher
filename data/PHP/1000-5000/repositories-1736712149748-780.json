{
  "metadata": {
    "timestamp": 1736712149748,
    "page": 780,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kirschbaum-development/eloquent-power-joins",
      "stars": 1420,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3046875,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3857421875,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/.travis.yml        export-ignore\n/phpunit.xml.dist   export-ignore\n/.scrutinizer.yml   export-ignore\n/tests              export-ignore\n/.editorconfig      export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.11328125,
          "content": "build\ncomposer.lock\ndocs\nphpunit.xml\nvendor\ncoverage\n.phpunit.result.cache\n.php_cs.cache\n.php-cs-fixer.cache\n.envrc\n"
        },
        {
          "name": ".php-cs-fixer.php",
          "type": "blob",
          "size": 0.732421875,
          "content": "<?php\n\n$rules = [\n    '@Symfony' => true,\n    'strict_param' => true,\n    'php_unit_method_casing' => ['case' => 'snake_case'],\n    'phpdoc_align' => [\n        'align' => 'left'\n    ],\n    'global_namespace_import' => [\n        'import_classes' => true,\n        'import_constants' => true,\n        'import_functions' => true\n    ],\n    'yoda_style' => [\n        'equal' => false,\n        'identical' => false,\n        'less_and_greater' => false,\n    ],\n];\n\n$finder = PhpCsFixer\\Finder::create()\n    ->in(__DIR__)\n    ->name('*.php')\n    ->notName('*.blade.php')\n    ->ignoreDotFiles(true)\n    ->ignoreVCS(true);\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules($rules)\n    ->setFinder($finder)\n    ->setRiskyAllowed(true)\n    ->setUsingCache(true);\n"
        },
        {
          "name": ".php_cs",
          "type": "blob",
          "size": 3.7939453125,
          "content": "<?php\n\n$finder = PhpCsFixer\\Finder::create()\n    ->exclude('vendor')\n    ->in(__DIR__ . '/src')\n    ->name('*.php')\n    ->ignoreDotFiles(true)\n    ->ignoreVCS(true);\n\nreturn PhpCsFixer\\Config::create()\n    ->setFinder($finder)\n    ->setRules([\n        '@PSR2' => true,\n        'phpdoc_no_empty_return' => false,\n        'phpdoc_var_annotation_correct_order' => true,\n        'array_syntax' => [\n            'syntax' => 'short',\n        ],\n        'no_singleline_whitespace_before_semicolons' => true,\n        'no_extra_blank_lines' => [\n            'break', 'case', 'continue', 'curly_brace_block', 'default',\n            'extra', 'parenthesis_brace_block', 'return',\n            'square_brace_block', 'switch', 'throw', 'use', 'useTrait', 'use_trait',\n        ],\n        'cast_spaces' => [\n            'space' => 'single',\n        ],\n        'single_quote' => true,\n        'lowercase_cast' => true,\n        'lowercase_static_reference' => true,\n        'no_empty_phpdoc' => true,\n        'no_empty_comment' => true,\n        'array_indentation' => true,\n        'short_scalar_cast' => true,\n        'no_mixed_echo_print' => [\n            'use' => 'echo',\n        ],\n        'ordered_imports' => [\n            'sort_algorithm' => 'alpha',\n        ],\n        'no_unused_imports' => true,\n        'binary_operator_spaces' => [\n            'default' => 'single_space',\n        ],\n        'no_empty_statement' => true,\n        'unary_operator_spaces' => true, // $number ++ becomes $number++\n        'hash_to_slash_comment' => true, // # becomes //\n        'standardize_not_equals' => true, // <> becomes !=\n        'native_function_casing' => true,\n        'ternary_operator_spaces' => true,\n        'ternary_to_null_coalescing' => true,\n        'declare_equal_normalize' => [\n            'space' => 'single',\n        ],\n        'function_typehint_space' => true,\n        'no_leading_import_slash' => true,\n        'blank_line_before_statement' => [\n            'statements' => [\n                'break', 'case', 'continue',\n                'declare', 'default', 'die',\n                'do', 'exit', 'for', 'foreach',\n                'goto', 'if', 'include',\n                'include_once', 'require', 'require_once',\n                'return', 'switch', 'throw', 'try', 'while', 'yield',\n            ],\n        ],\n        'combine_consecutive_unsets' => true,\n        'method_chaining_indentation' => true,\n        'no_whitespace_in_blank_line' => true,\n        'blank_line_after_opening_tag' => true,\n        'no_trailing_comma_in_list_call' => true,\n        'list_syntax' => ['syntax' => 'short'],\n        // public function getTimezoneAttribute( ? Banana $value) becomes public function getTimezoneAttribute(?Banana $value)\n        'compact_nullable_typehint' => true,\n        'explicit_string_variable' => true,\n        'no_leading_namespace_whitespace' => true,\n        'trailing_comma_in_multiline_array' => true,\n        'not_operator_with_successor_space' => true,\n        'object_operator_without_whitespace' => true,\n        'single_blank_line_before_namespace' => true,\n        'no_blank_lines_after_class_opening' => true,\n        'no_blank_lines_after_phpdoc' => true,\n        'no_whitespace_before_comma_in_array' => true,\n        'no_trailing_comma_in_singleline_array' => true,\n        'multiline_whitespace_before_semicolons' => [\n            'strategy' => 'no_multi_line',\n        ],\n        'no_multiline_whitespace_around_double_arrow' => true,\n        'no_useless_return' => true,\n        'phpdoc_add_missing_param_annotation' => false,\n        'phpdoc_order' => true,\n        'phpdoc_scalar' => false,\n        'phpdoc_separation' => false,\n        'phpdoc_single_line_var_spacing' => false,\n        'single_trait_insert_per_statement' => true,\n        'return_type_declaration' => [\n            'space_before' => 'none',\n        ],\n    ])\n    ->setLineEnding(\"\\n\");\n"
        },
        {
          "name": ".stubs.php",
          "type": "blob",
          "size": 4.505859375,
          "content": "<?php\n\n\nnamespace Illuminate\\Database\\Eloquent {\n    use Closure;\n\n    class Builder\n    {\n        // join relationship methods\n        /** @return self */\n        public function joinRelationship(string $relationName, Closure|array|string $callback = null, string $joinType = 'join', bool $useAlias = false, bool $disableExtraConditions = false, string $morphable = null) {}\n\n        /** @return self */\n        public function leftJoinRelationship(string $relationName, Closure|array|string $callback = null, string $joinType = 'join', bool $useAlias = false, bool $disableExtraConditions = false, string $morphable = null) {}\n\n        /** @return self */\n        public function rightJoinRelationship(string $relationName, Closure|array|string $callback = null, string $joinType = 'join', bool $useAlias = false, bool $disableExtraConditions = false, string $morphable = null) {}\n\n        /** @return self */\n        public function joinRelationshipUsingAlias(string $relationName, Closure|array|string $callback = null, bool $disableExtraConditions = false, string $morphable = null) {}\n\n        /** @return self */\n        public function leftJoinRelationshipUsingAlias(string $relationName, Closure|array|string $callback = null, bool $disableExtraConditions = false, string $morphable = null) {}\n\n        /** @return self */\n        public function rightJoinRelationshipUsingAlias(string $relationName, Closure|array|string $callback = null, bool $disableExtraConditions = false, string $morphable = null) {}\n\n        /** @return self */\n        public function joinNestedRelationship(string $relationships, Closure|array|string $callback = null, string $joinType = 'join', bool $useAlias = false, bool $disableExtraConditions = false, ?string $morphable = null) {}\n\n        /** @return self */\n        public function orderByPowerJoins(string|array $sort, string $direction = 'asc', ?string $aggregation = null, $joinType = 'join', $aliases = null) {}\n\n        /** @return self */\n        public function orderByLeftPowerJoins(string|array $sort, string $direction = 'asc') {}\n\n        /** @return self */\n        public function orderByPowerJoinsCount(string|array $sort, string $direction = 'asc') {}\n\n        /** @return self */\n        public function orderByLeftPowerJoinsCount(string|array $sort, string $direction = 'asc') {}\n\n        /** @return self */\n        public function orderByPowerJoinsSum(string|array $sort, string $direction = 'asc') {}\n\n        /** @return self */\n        public function orderByLeftPowerJoinsSum(string|array $sort, string $direction = 'asc') {}\n\n        /** @return self */\n        public function orderByPowerJoinsAvg(string|array $sort, string $direction = 'asc') {}\n\n        /** @return self */\n        public function orderByLeftPowerJoinsAvg(string|array $sort, $direction = 'asc') {}\n\n        /** @return self */\n        public function orderByPowerJoinsMin(string|array $sort, string $direction = 'asc') {}\n\n        /** @return self */\n        public function orderByLeftPowerJoinsMin(string|array $sort, string $direction = 'asc') {}\n\n        /** @return self */\n        public function orderByPowerJoinsMax(string|array $sort, string $direction = 'asc') {}\n\n        /** @return self */\n        public function orderByLeftPowerJoinsMax(string|array $sort, string $direction = 'asc') {}\n\n        /** @return self */\n        public function powerJoinHas(string $relation, string $operator = '>=', int $count = 1, string $boolean = 'and', Closure|array|string $callback = null, ?string $morphable = null) {}\n\n        /** @return self */\n        public function powerJoinDoesntHave(string $relation, string $boolean = 'and', Closure|array|string $callback = null) {}\n\n        /** @return self */\n        public function powerJoinWhereHas(string $relation, Closure|array|string $callback = null, string $operator = '>=', int $count = 1) {}\n\n        // PowerJoinClause methods for when a closure is being used as a callback\n        /** @return self */\n        public function as(string $alias, ?string $joinedTableAlias = null) {}\n\n        /** @return self */\n        public function on($first, $operator = null, $second = null, $boolean = 'and') {}\n\n        /** @return self */\n        public function withGlobalScopes() {}\n\n        /** @return self */\n        public function withTrashed() {}\n\n        /** @return self */\n        public function onlyTrashed() {}\n\n        /** @return self */\n        public function left() {}\n\n        /** @return self */\n        public function right() {}\n\n        /** @return self */\n        public function inner() {}\n    }\n}\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.734375,
          "content": "# Changelog\n\nAll notable changes to `eloquent-power-joins` will be documented in this file.\n\n## 2.2.2 - 2020-10\n- Fixed the ability to pass nested closures in join callbacks when using aliases;\n\n## 2.2.1 - 2020-10\n- Fixed nested conditions in relationship definitions;\n\n## 2.1.0 - 2020-09\n- Added the ability to include trashed models in join clauses;\n\n## 2.0.0 - 2020-09\n- Introduced trait that has to be used by models;\n- Automatically applying extra relationship conditions;\n- Ability to order by using left joins;\n- Laravel 8 support;\n_ Lots of bugfixes;\n- Changed the method signature for sorting;\n- Changed the method signature for querying relationship existence;\n\n## 1.1.0\n- Added the ability to use table aliases;\n\n## 1.0.0\n- Initial release;\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.90234375,
          "content": "# Contributing\n\nContributions are **welcome** and will be fully **credited**.\n\nPlease read and understand the contribution guide before creating an issue or pull request.\n\n## Etiquette\n\nThis project is open source, and as such, the maintainers give their free time to build and maintain the source code\nheld within. They make the code freely available in the hope that it will be of use to other developers. It would be\nextremely unfair for them to suffer abuse or anger for their hard work.\n\nPlease be considerate towards maintainers when raising issues or presenting pull requests. Let's show the\nworld that developers are civilized and selfless people.\n\nIt's the duty of the maintainer to ensure that all submissions to the project are of sufficient\nquality to benefit the project. Many developers have different skillsets, strengths, and weaknesses. Respect the maintainer's decision, and do not be upset or abusive if your submission is not used.\n\n## Viability\n\nWhen requesting or submitting new features, first consider whether it might be useful to others. Open\nsource projects are used by many developers, who may have entirely different needs to your own. Think about\nwhether or not your feature is likely to be used by other users of the project.\n\n## Procedure\n\nBefore filing an issue:\n\n- Attempt to replicate the problem, to ensure that it wasn't a coincidental incident.\n- Check to make sure your feature suggestion isn't already present within the project.\n- Check the pull requests tab to ensure that the bug doesn't have a fix in progress.\n- Check the pull requests tab to ensure that the feature isn't already in progress.\n\nBefore submitting a pull request:\n\n- Check the codebase to ensure that your feature doesn't already exist.\n- Check the pull requests to ensure that another person hasn't already submitted the feature or fix.\n\n## Requirements\n\nIf the project maintainer has any additional requirements, you will find them listed here.\n\n- **[PSR-2 Coding Standard](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md)** - The easiest way to apply the conventions is to install [PHP Code Sniffer](https://pear.php.net/package/PHP_CodeSniffer).\n\n- **Add tests!** - Your patch won't be accepted if it doesn't have tests.\n\n- **Document any change in behaviour** - Make sure the `README.md` and any other relevant documentation are kept up-to-date.\n\n- **Consider our release cycle** - We try to follow [SemVer v2.0.0](https://semver.org/). Randomly breaking public APIs is not an option.\n\n- **One pull request per feature** - If you want to do more than one thing, send multiple pull requests.\n\n- **Send coherent history** - Make sure each individual commit in your pull request is meaningful. If you had to make multiple intermediate commits while developing, please [squash them](https://www.git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages) before submitting.\n\n**Happy coding**!\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0390625,
          "content": "MIT License\n\nCopyright (c) Luis Dalmolin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.1806640625,
          "content": "![Eloquent Power Joins](screenshots/eloquent-power-joins.jpg \"Eloquent Power Joins\")\n\n![Laravel Supported Versions](https://img.shields.io/badge/laravel-10.x/11.x-green.svg)\n[![run-tests](https://github.com/kirschbaum-development/eloquent-power-joins/actions/workflows/ci.yaml/badge.svg)](https://github.com/kirschbaum-development/eloquent-power-joins/actions/workflows/ci.yaml)\n[![MIT Licensed](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE.md)\n[![Latest Version on Packagist](https://img.shields.io/packagist/v/kirschbaum-development/eloquent-power-joins.svg?style=flat-square)](https://packagist.org/packages/kirschbaum-development/eloquent-power-joins)\n[![Total Downloads](https://img.shields.io/packagist/dt/kirschbaum-development/eloquent-power-joins.svg?style=flat-square)](https://packagist.org/packages/kirschbaum-development/eloquent-power-joins)\n\nThe Laravel magic you know, now applied to joins.\n\nJoins are very useful in a lot of ways. If you are here, you most likely know about and use them. Eloquent is very powerful, but it lacks a bit of the \"Laravel way\" when using joins. This package make your joins in a more Laravel way, with more readable with less code while hiding implementation details from places they don't need to be exposed.\n\nA few things we consider is missing when using joins which are very powerful Eloquent features:\n\n* Ability to use relationship definitions to make joins;\n* Ability to use model scopes inside different contexts;\n* Ability to query relationship existence using joins instead of where exists;\n* Ability to easily sort results based on columns or aggregations from related tables;\n\nYou can read a more detailed explanation on the problems this package solves on [this blog post](https://kirschbaumdevelopment.com/insights/power-joins).\n\n## Installation\n\nYou can install the package via composer:\n\n```bash\ncomposer require kirschbaum-development/eloquent-power-joins\n```\n\nFor Laravel versions < 10, use the 3.* version. For Laravel versions < 8, use the 2.* version:\n\n```bash\ncomposer require kirschbaum-development/eloquent-power-joins:3.*\n```\n\n## Usage\n\nThis package provides a few features.\n\n### 1 - Join Relationship\n\nLet's say you have a `User` model with a `hasMany` relationship to the `Post` model. If you want to join the tables, you would usually write something like:\n\n```php\nUser::select('users.*')->join('posts', 'posts.user_id', '=', 'users.id');\n```\n\nThis package provides you with a new `joinRelationship()` method, which does the exact same thing.\n\n```php\nUser::joinRelationship('posts');\n```\n\nBoth options produce the same results. In terms of code, you didn't save THAT much, but you are now using the relationship between the `User` and the `Post` models to join the tables. This means that you are now hiding how this relationship works behind the scenes (implementation details). You also don't need to change the code if the relationship type changes. You now have more readable and less overwhelming code.\n\nBut, **it gets better** when you need to **join nested relationships**. Let's assume you also have a `hasMany` relationship between the `Post` and `Comment` models and you need to join these tables, you can simply write:\n\n```php\nUser::joinRelationship('posts.comments');\n```\n\nSo much better, wouldn't you agree?! You can also `left` or `right` join the relationships as needed.\n\n```php\nUser::leftJoinRelationship('posts.comments');\nUser::rightJoinRelationship('posts.comments');\n```\n\n#### Joining polymorphic relationships\n\nLet's imagine, you have a `Image` model that is a polymorphic relationship (`Post -> morphMany -> Image`). Besides the regular join, you would also need to apply the `where imageable_type = Post::class` condition, otherwise you could get messy results.\n\nTurns out, if you join a polymorphic relationship, Eloquent Power Joins automatically applies this condition for you. You simply need to call the same method.\n\n```php\nPost::joinRelationship('images');\n```\n\nYou can also join MorphTo relationships.\n\n```php\nImage::joinRelationship('imageable', morphable: Post::class);\n```\n\nNote: Querying morph to relationships only supports one morphable type at a time.\n\n**Applying conditions & callbacks to the joins**\n\nNow, let's say you want to apply a condition to the join you are making. You simply need to pass a callback as the second parameter to the `joinRelationship` method.\n\n```php\nUser::joinRelationship('posts', fn ($join) => $join->where('posts.approved', true))->toSql();\n```\n\nYou can also specify the type of join you want to make in the callback:\n\n```php\nUser::joinRelationship('posts', fn ($join) => $join->left());\n```\n\nFor **nested calls**, you simply need to pass an array referencing the relationship names.\n\n```php\nUser::joinRelationship('posts.comments', [\n    'posts' => fn ($join) => $join->where('posts.published', true),\n    'comments' => fn ($join) => $join->where('comments.approved', true),\n]);\n```\n\nFor **belongs to many** calls, you need to pass an array with the relationship, and then an array with the table names.\n\n```php\nUser::joinRelationship('groups', [\n    'groups' => [\n        'groups' => function ($join) {\n            // ...\n        },\n        // group_members is the intermediary table here\n        'group_members' => fn ($join) => $join->where('group_members.active', true),\n    ]\n]);\n```\n\n#### Using model scopes inside the join callbacks 🤯\n\nWe consider this one of the most useful features of this package. Let's say, you have a `published` scope on your `Post` model:\n\n```php\n    public function scopePublished($query)\n    {\n        $query->where('published', true);\n    }\n```\n\nWhen joining relationships, you **can** use the scopes defined in the model being joined. How cool is this?\n\n```php\nUser::joinRelationship('posts', function ($join) {\n    // the $join instance here can access any of the scopes defined in Post 🤯\n    $join->published();\n});\n```\n\nWhen using model scopes inside a join clause, you **can't** type hint the `$query` parameter in your scope. Also, keep in mind you are inside a join, so you are limited to use only conditions supported by joins.\n\n#### Using aliases\n\nSometimes, you are going to need to use table aliases on your joins because you are joining the same table more than once. One option to accomplish this is to use the `joinRelationshipUsingAlias` method.\n\n```php\nPost::joinRelationshipUsingAlias('category.parent')->get();\n```\n\nIn case you need to specify the name of the alias which is going to be used, you can do in two different ways:\n\n1. Passing a string as the second parameter (this won't work for nested joins):\n\n```php\nPost::joinRelationshipUsingAlias('category', 'category_alias')->get();\n```\n\n2. Calling the `as` function inside the join callback.\n\n```php\nPost::joinRelationship('category.parent', [\n    'category' => fn ($join) => $join->as('category_alias'),\n    'parent' => fn ($join) => $join->as('category_parent'),\n])->get()\n```\n\nFor *belongs to many* or *has many through* calls, you need to pass an array with the relationship, and then an array with the table names.\n\n```php\nGroup::joinRelationship('posts.user', [\n    'posts' => [\n        'posts' => fn ($join) => $join->as('posts_alias'),\n        'post_groups' => fn ($join) => $join->as('post_groups_alias'),\n    ],\n])->toSql();\n```\n\n#### Select * from table\n\nWhen making joins, using `select * from ...` can be dangerous as fields with the same name between the parent and the joined tables could conflict. Thinking on that, if you call the `joinRelationship` method without previously selecting any specific columns, Eloquent Power Joins will automatically include that for you. For instance, take a look at the following examples:\n\n```php\nUser::joinRelationship('posts')->toSql();\n// select users.* from users inner join posts on posts.user_id = users.id\n```\n\nAnd, if you specify the select statement:\n\n```php\nUser::select('users.id')->joinRelationship('posts')->toSql();\n// select users.id from users inner join posts on posts.user_id = users.id\n```\n\n#### Soft deletes\n\nWhen joining any models which uses the `SoftDeletes` trait, the following condition will be also automatically applied to all your joins:\n\n```sql\nand \"users\".\"deleted_at\" is null\n```\n\nIn case you want to include trashed models, you can call the `->withTrashed()` method in the join callback.\n\n```php\nUserProfile::joinRelationship('users', fn ($join) => $join->withTrashed());\n```\n\nYou can also call the `onlyTrashed` model as well:\n\n```php\nUserProfile::joinRelationship('users', ($join) => $join->onlyTrashed());\n```\n\n#### Extra conditions defined in relationships\n\nIf you have extra conditions in your relationship definitions, they will get automatically applied for you.\n\n```php\nclass User extends Model\n{\n    public function publishedPosts()\n    {\n        return $this->hasMany(Post::class)->published();\n    }\n}\n```\n\nIf you call `User::joinRelationship('publishedPosts')->get()`, it will also apply the additional published scope to the join clause. It would produce an SQL more or less like this:\n\n```sql\nselect users.* from users inner join posts on posts.user_id = posts.id and posts.published = 1\n```\n\n#### Global Scopes\n\nIf your model have global scopes applied to it, you can enable the global scopes by calling the `withGlobalScopes` method in your join clause, like this:\n\n```php\nUserProfile::joinRelationship('users', fn ($join) => $join->withGlobalScopes());\n```\n\nThere's, though, a gotcha here. Your global scope **cannot** type-hint the `Eloquent\\Builder` class in the first parameter of the `apply` method, otherwise you will get errors.\n\n### 2 - Querying relationship existence (Using Joins)\n\n[Querying relationship existence](https://laravel.com/docs/7.x/eloquent-relationships#querying-relationship-existence) is a very powerful and convenient feature of Eloquent. However, it uses the `where exists` syntax which is not always the best and may not be the more performant choice, depending on how many records you have or the structure of your tables.\n\nThis packages implements the same functionality, but instead of using the `where exists` syntax, it uses **joins**. Below, you can see the methods this package implements and also the Laravel equivalent.\n\nPlease note that although the methods are similar, you will not always get the same results when using joins, depending on the context of your query. You should be aware of the differences between querying the data with `where exists` vs `joins`.\n\n**Laravel Native Methods**\n\n``` php\nUser::has('posts');\nUser::has('posts.comments');\nUser::has('posts', '>', 3);\nUser::whereHas('posts', fn ($query) => $query->where('posts.published', true));\nUser::whereHas('posts.comments', ['posts' => fn ($query) => $query->where('posts.published', true));\nUser::doesntHave('posts');\n```\n\n**Package equivalent, but using joins**\n\n```php\nUser::powerJoinHas('posts');\nUser::powerJoinHas('posts.comments');\nUser::powerJoinHas('posts.comments', '>', 3);\nUser::powerJoinWhereHas('posts', function ($join) {\n    $join->where('posts.published', true);\n});\nUser::powerJoinDoesntHave('posts');\n```\n\nWhen using the `powerJoinWhereHas` method with relationships that involves more than 1 table (One to Many, Many to Many, etc.), use the array syntax to pass the callback:\n\n```php\nUser::powerJoinWhereHas('commentsThroughPosts', [\n    'comments' => fn ($query) => $query->where('body', 'a')\n])->get());\n```\n\n### 3 - Order by\n\nYou can also sort your query results using a column from another table using the `orderByPowerJoins` method.\n\n```php\nUser::orderByPowerJoins('profile.city');\n```\n\nIf you need to pass some raw values for the order by function, you can do like this:\n\n```php\nUser::orderByPowerJoins(['profile', DB::raw('concat(city, \", \", state)']);\n```\n\nThis query will sort the results based on the `city` column on the `user_profiles` table. You can also sort your results by aggregations (`COUNT`, `SUM`, `AVG`, `MIN` or `MAX`).\n\nFor instance, to sort users with the highest number of posts, you can do this:\n\n```php\n$users = User::orderByPowerJoinsCount('posts.id', 'desc')->get();\n```\n\nOr, to get the list of posts where the comments contain the highest average of votes.\n\n```php\n$posts = Post::orderByPowerJoinsAvg('comments.votes', 'desc')->get();\n```\n\nYou also have methods for `SUM`, `MIN` and `MAX`:\n\n```php\nPost::orderByPowerJoinsSum('comments.votes');\nPost::orderByPowerJoinsMin('comments.votes');\nPost::orderByPowerJoinsMax('comments.votes');\n```\n\nIn case you want to use left joins in sorting, you also can:\n\n```php\nPost::orderByLeftPowerJoinsCount('comments.votes');\nPost::orderByLeftPowerJoinsAvg('comments.votes');\nPost::orderByLeftPowerJoinsSum('comments.votes');\nPost::orderByLeftPowerJoinsMin('comments.votes');\nPost::orderByLeftPowerJoinsMax('comments.votes');\n```\n\n***\n\n## Contributing\n\nPlease see [CONTRIBUTING](CONTRIBUTING.md) for details.\n\n### Security\n\nIf you discover any security related issues, please email security@kirschbaumdevelopment.com instead of using the issue tracker.\n\n## Credits\n\n- [Luis Dalmolin](https://github.com/luisdalmolin)\n\n## Sponsorship\n\nDevelopment of this package is sponsored by Kirschbaum Development Group, a developer driven company focused on problem solving, team building, and community. Learn more [about us](https://kirschbaumdevelopment.com) or [join us](https://careers.kirschbaumdevelopment.com)!\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.498046875,
          "content": "{\n    \"name\": \"kirschbaum-development/eloquent-power-joins\",\n    \"description\": \"The Laravel magic applied to joins.\",\n    \"keywords\": [\n        \"laravel\",\n        \"eloquent\",\n        \"mysql\",\n        \"join\"\n    ],\n    \"homepage\": \"https://github.com/kirschbaum-development/eloquent-power-joins\",\n    \"license\": \"MIT\",\n    \"type\": \"library\",\n    \"authors\": [\n        {\n            \"name\": \"Luis Dalmolin\",\n            \"email\": \"luis.nh@gmail.com\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"illuminate/support\": \"^10.0|^11.0\",\n        \"illuminate/database\": \"^10.0|^11.0\"\n    },\n    \"require-dev\": {\n        \"friendsofphp/php-cs-fixer\": \"dev-master\",\n        \"laravel/legacy-factories\": \"^1.0@dev\",\n        \"orchestra/testbench\": \"^8.0|^9.0\",\n        \"phpunit/phpunit\": \"^10.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Kirschbaum\\\\PowerJoins\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Kirschbaum\\\\PowerJoins\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"scripts\": {\n        \"test\": \"vendor/bin/phpunit\",\n        \"test-coverage\": \"vendor/bin/phpunit --coverage-html coverage\",\n        \"lint\": \"vendor/bin/php-cs-fixer fix -vvv --show-progress=dots --config=.php-cs-fixer.php\"\n    },\n    \"config\": {\n        \"sort-packages\": true\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"Kirschbaum\\\\PowerJoins\\\\PowerJoinsServiceProvider\"\n            ]\n        }\n    },\n    \"minimum-stability\": \"dev\"\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.783203125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit bootstrap=\"vendor/autoload.php\"\n         backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         colors=\"true\"\n         verbose=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\">\n    <testsuites>\n        <testsuite name=\"Test Suite\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist>\n            <directory suffix=\".php\">src/</directory>\n        </whitelist>\n    </filter>\n    <logging>\n        <log type=\"tap\" target=\"build/report.tap\"/>\n        <log type=\"junit\" target=\"build/report.junit.xml\"/>\n    </logging>\n</phpunit>\n"
        },
        {
          "name": "screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}