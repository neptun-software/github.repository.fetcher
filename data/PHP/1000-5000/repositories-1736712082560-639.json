{
  "metadata": {
    "timestamp": 1736712082560,
    "page": 639,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "goaop/framework",
      "stars": 1660,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.095703125,
          "content": "vendor/\ncomposer.lock\nphpunit.xml\ntests/Fixtures/project/var/cache/*\nbuild/\n/.phpunit.result.cache"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 0.818359375,
          "content": "before_commands:\n    - \"composer install --no-dev --prefer-source\"\n\ntools:\n    external_code_coverage:\n        timeout: 1200\n    php_code_coverage:\n        enabled: true\n    php_code_sniffer:\n        enabled: true\n        config:\n            standard: PSR2\n        filter:\n            paths: [\"src/*\"]\n    php_cpd:\n        enabled: true\n        excluded_dirs: [\"docs\", \"demos\", \"tests\", \"vendor\"]\n    php_cs_fixer:\n        enabled: true\n        config:\n            level: all\n        filter:\n            paths: [\"src/*\"]\n    php_loc:\n        enabled: true\n        excluded_dirs: [\"docs\", \"demos\", \"tests\", \"vendor\"]\n    php_pdepend:\n        enabled: true\n        excluded_dirs: [\"docs\", \"demos\", \"tests\", \"vendor\"]\n    php_analyzer:\n        enabled: true\n        filter:\n            paths: [\"src/*\"]\n    sensiolabs_security_checker: true\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.611328125,
          "content": "Changelog\n======\n3.0.0 (December 4, 2019)\n* [BC BREAK] Switched to the PHP7.2 and upper, strict types, return type hints and new syntax\n* [BC BREAK] Removed the Joinpoint->getThis() method, as not all joinpoints belongs to classes (eg. FunctionInvocation)\n* [BC BREAK] Removed the Joinpoint->getStaticPart() method as it can return anything, better to use explicit methods \n* [Feature] Introduced the new ClassJoinpoint interface with getScope(), getThis() and isDynamic() methods\n* [Feature] Implemented parameter widening feature for generated code #380\n* [Feature] AnnotatedReflectionProperty provides simple access to property annotations #388 by @TheCelavi\n* [Feature] Switched to the `zendframework/zend-code` package to generate code for proxies\n* [Feature] Add private properties interception #412\n\n2.0.0 (May 14, 2016)\n* Dropped support for PHP<5.6, clean all old code\n* [BC BREAK] Removed ability to rebind closures, because of PHP restrictions, see #247\n* [BC BREAK] Removed getDefaultFeatures() method from the AspectKernel, no need in it since PHP5.6\n* Migrated from the `Andrewswille/Token-Reflection` to the `goaop/parser-reflection` library for PHP5.6 and PHP7.0 support\n* Added support for PHP5.6 and 7.0 features: variadic methods, scalar type hints, return type hints\n* [Feature] Command-line tools for debugging aspects and advisors\n\n1.0.0 (Feb 13, 2016)\n* Dropped support for PHP<5.5, clean all old code\n* Tagged public methods and interfaces with @api tag. No more changes for them in future.\n* Refactored core code to use general interceptors for everything instead of separate classes\n* New static initialization pointcut to intercept the moment of class loading\n* New feature to intercept object initializations, requires INTERCEPT_INITIALIZATIONS to be enabled\n* [BC BREAK] remove class() pointcut from the grammar #189\n* [BC BREAK] make within() and @within() match all joinpoints #189\n* [BC BREAK] drop @annotation syntax. Add @execution pointcut\n* Pointcuts can be build now directly from closures via `PointcutBuilder` class\n* Do not create files in the cache, if no aspects were applied to them, respects `includePath` option now\n* `FilterInjector` is now disabled by default, this job for composer integration now\n* Automatic opcache invalidation for cache state file\n\n0.6.1 (Jul 5, 2015)\n* Minor patch to fix a bug with overwriting files\n\n0.6.0 (Feb 1, 2015)\n* Interceptor for magic methods via \"dynamic\" pointcut. This feature also gives an access for dynamic pointcuts with different checks and conditions.\n* PSR-4 standard for the codebase, thanks to @cordoval\n* Added a support for splat (...) operator for more efficient advice invocation (requires PHP5.6)\n* New feature system. All tunings of kernel are configured with feature-set. This breaks old configuration option `interceptFunctions=>true` use `'features' => $defaultFeatures | Features::INTERCEPT_FUNCTIONS` now\n* Proxy can generate more effective invocation call with `static::class` for PHP>=5.5\n* Bug-fixes with empty cache path and PSR4 code, thanks to @andy-shea\n* Make pointcut grammar class compatible with PHP7.0\n\n0.5.0 (May 24, 2014)\n* Proxies are now stored in the separate files to allow more transparent debugging\n* Cache warmer command added\n* Extended pointcut syntax for or-ed methods: ClassName->method1|method2(*)\n* Access to the annotations for method from MethodInvocation\n* Support for read-only file systems (phar, GAE, etc)\n* Direct access to advisors (no more serialize/unserialize)\n* New @within pointcut to match classes by annotation class\n* Nice demo GUI\n* Deprecate the usage of submodules for framework\n* Inheritance support during class-loading and weaving\n* List of small fixes and imrovements\n\n0.4.1 (Aug 27, 2013)\n* Better parsing of complex \"include\" expressions for Yii (by @zvirusz)\n* Support for dynamic arguments count for methods by checking for func_get_args() inside method body\n* Fixed a bug with autoloaders reodering (by @zvirusz)\n\n0.4.0 (Aug 04, 2013)\n* Privileged advices for aspect: allows to access private and protected properties and methods of objects inside advice\n* Full integration with composer that allows for easy configuration and workflow with AOP\n* Fix some bugs with caching on Windows\n* \"True\" pointcut references that gives the ability to compose a complex pointcut from a simple pointcuts.\n* Pointcut now accept \"$this\" in references to point to the current aspect instance\n  (Allows for abstract aspects and abstract pointcuts)\n* AspectContainer interface was extracted. This gives the way to integrate with another DIC. Look at Warlock framework.\n* Intercepting system functions such as `fopen()`, `file_get_contents()`, etc\n* Annotation property pointcut was added\n* Ability to declare multiple interfaces and/or traits with single `DeclareParent` introduction\n* DeclareError interceptor was added. This can be used for generating an runtime error for methods that should not be executed\n  in such a way.\n\n0.3.0 (May 27, 2013)\n* Support for dynamic pointcuts: pointcut that match a specific point in the code, if it is under the control\n flow (look at AspectJ cflow and cflowbelow)\n* Performance optimizations\n* Case-sensitive matching for pointcuts\n* Primitive pointcuts (&&, ||, !)\n* [BC break] Changes in the kernel configuration (look at the demo for appLoader and autoloadPaths)\n* Fix a logic bug for a composite pointcuts\n\n0.2.0 (Mar 15, 2013)\n* Intercepting methods in traits\n* Pointcut parser/grammar\n* Huge pointcuts refactoring, cleaning\n* Lazy loading services, pointcuts\n\n0.1.1 (Jan 20, 2013)\n* Introduction advice support\n* Fix bug with composer autoloader prepending\n* Fix doctrine/common dependency: >=2.0.0, <2.4.0\n\n0.1.0 (Jan 08, 2013)\n* Initial release of library\n"
        },
        {
          "name": "CONTRIBUTE.md",
          "type": "blob",
          "size": 0.701171875,
          "content": "# How to contribute\n\n## Installation\n\nBefore you contribute make sure you install all necessary dependencies using:\n\n```bash\n$ composer install\n```\n\n## Run Tests\n\nTo run tests simply run the `phpunit` executable in the `vendor/bin`\n\n```bash\n$ ./vendor/bin/phpunit\n```\n\nYou should get an output similar to this\n\n```bash\n$ ./vendor/bin/phpunit\n\nPHPUnit 4.8.29 by Sebastian Bergmann and contributors.\n \n..........................SSSSSS...............................  63 / 157 ( 40%)\n............................................................... 126 / 157 ( 80%)\n...............................\n \nTime: 658 ms, Memory: 25.00MB\n \nOK, but incomplete, skipped, or risky tests!\nTests: 157, Assertions: 207, Skipped: 6.\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.064453125,
          "content": "Copyright (c) 2019 Lisachenko Alexander <lisachenko.it@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Procfile",
          "type": "blob",
          "size": 0.0390625,
          "content": "web: vendor/bin/heroku-php-nginx demos/\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.056640625,
          "content": "Go! Aspect-Oriented Framework for PHP\n-----------------\n\nGo! AOP is a modern aspect-oriented framework in plain PHP with rich features for the new level of software development. The framework allows cross-cutting issues to be solved in the traditional object-oriented PHP code by providing a highly efficient and transparent hook system for your exisiting code.\n\n![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/goaop/framework/phpunit.yml?branch=master)\n[![GitHub release](https://img.shields.io/github/release/goaop/framework.svg)](https://github.com/goaop/framework/releases/latest)\n[![Total Downloads](https://img.shields.io/packagist/dt/goaop/framework.svg)](https://packagist.org/packages/goaop/framework)\n[![Daily Downloads](https://img.shields.io/packagist/dd/goaop/framework.svg)](https://packagist.org/packages/goaop/framework)\n[![SensioLabs Insight](https://img.shields.io/sensiolabs/i/34549463-37d3-4368-94f5-812880d3ce4c.svg)](https://insight.sensiolabs.com/projects/34549463-37d3-4368-94f5-812880d3ce4c)\n[![Minimum PHP Version](http://img.shields.io/badge/php-%3E%3D%208.2-8892BF.svg)](https://php.net/)\n[![License](https://img.shields.io/packagist/l/goaop/framework.svg)](https://packagist.org/packages/goaop/framework)\n\nFeatures\n------------\n* Provides dynamic hook system for PHP without changes in the original source code.\n* Doesn't require any PECL-extentions (php-aop, runkit, uopz) and DI-containers to work.\n* Object-oriented design of aspects, joinpoints and pointcuts.\n* Intercepting an execution of any public or protected method in a classes.\n* Intercepting an execution of static methods and methods in final classes.\n* Intercepting an execution of methods in the traits.\n* Intercepting an access to the public/protected properties for objects.\n* Hooks for static class initialization (after class is loaded into PHP memory).\n* Hooks for object initialization (intercepting `new` keywords).\n* Intercepting an invocation of system PHP functions.\n* Ability to change the return value of any methods/functions via `Around` type of advice.\n* Rich pointcut grammar syntax for defining pointcuts in the source code.\n* Native debugging for AOP with XDebug. The code with weaved aspects is fully readable and native. You can put a breakpoint in the original class or in the aspect and it will work (for debug mode)!\n* Can be integrated with any existing PHP frameworks and libraries (with or without additional configuration).\n* Highly optimized for production use: support of opcode cachers, lazy loading of advices and aspects, joinpoints caching, no runtime checks of pointcuts, no runtime annotations parsing, no evals and `__call` methods, no slow proxies and `call_user_func_array()`. Fast bootstraping process (2-20ms) and advice invocation.\n\n\nWhat is AOP?\n------------\n\n[AOP (Aspect-Oriented Programming)](http://en.wikipedia.org/wiki/Aspect-oriented_programming) is an approach to cross-cutting concerns, where these concerns are designed and implemented \nin a \"modular\" way (that is, with appropriate encapsulation, lack of duplication, etc.), then integrated into all the relevant\nexecution points in a succinct and robust way, e.g. through declarative or programmatic means.\n\nIn AOP terms, the execution points are called join points. A set of those points is called a pointcut and the new\nbehavior that is executed before, after, or \"around\" a join point is called advice. You can read more about AOP in\n[Introduction](http://go.aopphp.com/docs/introduction/) section.\n\n\nInstallation\n------------\n\nGo! AOP framework can be installed with composer. Installation is quite easy:\n\n1. Download the framework using composer\n2. Create an application aspect kernel\n3. Configure the aspect kernel in the front controller\n4. Create an aspect\n5. Register the aspect in the aspect kernel\n\n### Step 0 (optional): Try demo examples in the framework\n\nAsk composer to create new project in empty directory:\n\n```bash\ncomposer create-project goaop/framework\n```\nAfter that just configure your web server to `demos/` folder and open it in your browser. Then you can look at some demo examples before going deeper into installing it in your project.\n\n### Step 1: Download the library using composer\n\nAsk composer to download the latest version of Go! AOP framework with its dependencies by running the command:\n\n``` bash\ncomposer require goaop/framework\n```\n\nComposer will install the framework to your project's `vendor/goaop/framework` directory.\n\n\n### Step 2: Create an application aspect kernel\n\nThe aim of this framework is to provide easy AOP integration for your application.\nYou have to first create the `AspectKernel` class\nfor your application. This class will manage all aspects of your\napplication in one place.\n\nThe framework provides base class to make it easier to create your own kernel.\nTo create your application kernel, extend the abstract class `Go\\Core\\AspectKernel`\n\n``` php\n<?php\n// app/ApplicationAspectKernel.php\n\nuse Go\\Core\\AspectKernel;\nuse Go\\Core\\AspectContainer;\n\n/**\n * Application Aspect Kernel\n */\nclass ApplicationAspectKernel extends AspectKernel\n{\n\n    /**\n     * Configure an AspectContainer with advisors, aspects and pointcuts\n     *\n     * @param AspectContainer $container\n     *\n     * @return void\n     */\n    protected function configureAop(AspectContainer $container)\n    {\n    }\n}\n```\n\n### 3. Configure the aspect kernel in the front controller\n\nTo configure the aspect kernel, call `init()` method of kernel instance.\n\n``` php\n// front-controller, for Symfony2 application it's web/app_dev.php\n\ninclude __DIR__ . '/vendor/autoload.php'; // use composer\n\n// Initialize an application aspect container\n$applicationAspectKernel = ApplicationAspectKernel::getInstance();\n$applicationAspectKernel->init([\n        'debug'        => true, // use 'false' for production mode\n        'appDir'       => __DIR__ . '/..', // Application root directory\n        'cacheDir'     => __DIR__ . '/path/to/cache/for/aop', // Cache directory\n        // Include paths restricts the directories where aspects should be applied, or empty for all source files\n        'includePaths' => [\n            __DIR__ . '/../src/'\n        ]\n]);\n```\n\n### 4. Create an aspect\n\nAspect is the key element of AOP philosophy. Go! AOP framework just uses simple PHP classes for declaring aspects, which makes it possible to use all features of OOP for aspect classes.\nAs an example let's intercept all the methods and display their names:\n\n``` php\n// Aspect/MonitorAspect.php\n\nnamespace Aspect;\n\nuse Go\\Aop\\Aspect;\nuse Go\\Aop\\Intercept\\FieldAccess;\nuse Go\\Aop\\Intercept\\MethodInvocation;\nuse Go\\Lang\\Annotation\\After;\nuse Go\\Lang\\Annotation\\Before;\nuse Go\\Lang\\Annotation\\Around;\nuse Go\\Lang\\Annotation\\Pointcut;\n\n/**\n * Monitor aspect\n */\nclass MonitorAspect implements Aspect\n{\n\n    /**\n     * Method that will be called before real method\n     *\n     * @param MethodInvocation $invocation Invocation\n     * @Before(\"execution(public Example->*(*))\")\n     */\n    public function beforeMethodExecution(MethodInvocation $invocation)\n    {\n        echo 'Calling Before Interceptor for: ',\n            $invocation,\n            ' with arguments: ',\n            json_encode($invocation->getArguments()),\n            \"<br>\\n\";\n    }\n}\n```\n\nEasy, isn't it? We declared here that we want to install a hook before the execution of\nall dynamic public methods in the class Example. This is done with the help of annotation\n`@Before(\"execution(public Example->*(*))\")`\nHooks can be of any types, you will see them later.\nBut we don't change any code in the class Example! I can feel your astonishment now.\n\n### 5. Register the aspect in the aspect kernel\n\nTo register the aspect just add an instance of it in the `configureAop()` method of the kernel:\n\n``` php\n// app/ApplicationAspectKernel.php\n\nuse Aspect\\MonitorAspect;\n\n//...\n\n    protected function configureAop(AspectContainer $container)\n    {\n        $container->registerAspect(new MonitorAspect());\n    }\n\n//...\n```\n\n### 6. Optional configurations\n\n#### 6.1 Custom annotation cache\n\nBy default, Go! AOP uses `Doctrine\\Common\\Cache\\FilesystemCache` for caching\nannotations. However, if you need to use any other caching engine\nfor annotation, you may configure cache driver via `annotationCache` configuration\noption of your application aspect kernel. Only requirement is\nthat cache driver implements `Doctrine\\Common\\Cache\\Cache` interface.\n\nThis can be very useful when deploying to read-only filesystems. In that\ncase, you may use, per example, `Doctrine\\Common\\Cache\\ArrayCache` or some\nmemory-based cache driver.\n\n#### 6.2 Support for weaving Doctrine entities (experimental, alpha)\n\nWeaving Doctrine entities can not be supported out of the box due to the fact\nthat Go! AOP generates two sets of classes for each weaved entity, a concrete class and\nproxy with pointcuts. Doctrine will interpret both of those classes as concrete entities\nand assign for both of them same metadata, which would mess up the database and relations\n(see [https://github.com/goaop/framework/issues/327](https://github.com/goaop/framework/issues/327)).\n\nTherefore, a workaround is provided with this library which will sort out\nmapping issue in Doctrine. Workaround is in form of event subscriber,\n`Go\\Bridge\\Doctrine\\MetadataLoadInterceptor` which has to be registered\nwhen Doctrine is bootstraped in your project. For details how to do that,\nsee [http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/events.html](http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/events.html).\n\nEvent subscriber will modify metadata entity definition for generated Go! Aop proxies\nas mapped superclass. That would sort out issues on which you may stumble upon when\nweaving Doctrine entities.\n\n### 7. Contribution\n\nTo contribute changes see the [Contribute Readme](CONTRIBUTE.md)\n\nDocumentation\n-------------\n\nDocumentation about Go! library can be found at [official site][1].\nIf you like this project, you could support it via <a href=\"https://flattr.com/submit/auto?fid=83r77w&url=https%3A%2F%2Fgithub.com%2Fgoaop%2Fframework\" target=\"_blank\"><img src=\"https://button.flattr.com/flattr-badge-large.png\" alt=\"Flattr this\" title=\"Flattr this\" border=\"0\"></a>\n\n[1]: http://go.aopphp.com\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.6728515625,
          "content": "{\n    \"name\": \"goaop/framework\",\n    \"description\": \"Framework for aspect-oriented programming in PHP.\",\n\n    \"type\": \"library\",\n    \"keywords\": [\"library\", \"aop\", \"php\", \"aspect\"],\n    \"homepage\": \"http://go.aopphp.com/\",\n    \"license\": \"MIT\",\n\n    \"require\": {\n        \"php\": \"^8.2.0\",\n        \"goaop/parser-reflection\": \"4.x-dev\",\n        \"goaop/dissect\": \"^3.0\",\n        \"laminas/laminas-code\": \"^4.13\",\n        \"symfony/finder\": \"^5.4 || ^6.4 || ^7.0\"\n    },\n\n    \"require-dev\": {\n        \"adlawson/vfs\": \"^0.12.1\",\n        \"doctrine/orm\": \"^2.5\",\n        \"phpstan/phpstan\": \"^1.10.57\",\n        \"phpunit/phpunit\": \"^10.5.10\",\n        \"symfony/console\": \"^6.4 || ^7.0\",\n        \"symfony/filesystem\": \"^6.4 || ^7.0\",\n        \"symfony/process\": \"^6.4 || ^7.0\",\n        \"tracy/tracy\": \"^2.10\",\n        \"webmozart/glob\": \"^4.1\"\n    },\n\n    \"suggest\": {\n        \"symfony/console\": \"Enables the usage of the command-line tool.\"\n    },\n\n    \"bin\": [\"bin/aspect\"],\n    \"authors\": [\n        {\n            \"name\": \"Lisachenko Alexander\",\n            \"homepage\": \"https://github.com/lisachenko\"\n        }\n    ],\n\n    \"autoload\": {\n        \"psr-4\": {\n            \"Go\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-0\": {\n            \"Demo\\\\\": \"demos/\"\n        },\n        \"psr-4\": {\n            \"Go\\\\\": \"tests/Go/\",\n            \"Go\\\\Tests\\\\TestProject\\\\\": \"tests/Fixtures/project/src/\"\n        },\n        \"files\": [\n            \"tests/functions.php\",\n            \"tests/Go/Stubs/ClassWithoutNamespace.php\"\n        ]\n    },\n\n    \"minimum-stability\": \"stable\",\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"4.0-dev\"\n        }\n    },\n    \"config\": {\n        \"sort-packages\": true\n    }\n}\n"
        },
        {
          "name": "demos",
          "type": "tree",
          "content": null
        },
        {
          "name": "nitpick.json",
          "type": "blob",
          "size": 0.0625,
          "content": "{\n  \"ignore\": [\n    \"tests/*\",\n    \"phpstan-baseline.php\"\n  ]\n}\n"
        },
        {
          "name": "phpstan-baseline.php",
          "type": "blob",
          "size": 0.712890625,
          "content": "<?php declare(strict_types = 1);\n\n$ignoreErrors = [];\n$ignoreErrors[] = [\n\t'message' => '#^Property Doctrine\\\\\\\\ORM\\\\\\\\Mapping\\\\\\\\ClassMetadataInfo\\\\<object\\\\>\\\\:\\\\:\\\\$table \\\\(array\\\\{name\\\\: string, schema\\\\?\\\\: string, indexes\\\\?\\\\: array, uniqueConstraints\\\\?\\\\: array, options\\\\?\\\\: array\\\\<string, mixed\\\\>, quoted\\\\?\\\\: bool\\\\}\\\\) does not accept array\\\\{\\\\}\\\\.$#',\n\t'count' => 1,\n\t'path' => __DIR__ . '/src/Bridge/Doctrine/MetadataLoadInterceptor.php',\n];\n$ignoreErrors[] = [\n\t'message' => '#^Call to function file_get_contents\\\\(\\\\) on a separate line has no effect\\\\.$#',\n\t'count' => 1,\n\t'path' => __DIR__ . '/src/Instrument/ClassLoading/CacheWarmer.php',\n];\n\nreturn ['parameters' => ['ignoreErrors' => $ignoreErrors]];\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.0751953125,
          "content": "includes:\n\t- phpstan-baseline.php\n\nparameters:\n  level: 4\n  paths:\n    - src\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.724609375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.5/phpunit.xsd\" colors=\"true\" bootstrap=\"./vendor/autoload.php\">\n  <testsuites>\n    <testsuite name=\"Go! AOP Test Suite\">\n      <directory>./tests/Go/</directory>\n    </testsuite>\n  </testsuites>\n  <coverage>\n    <report>\n      <clover outputFile=\"./build/logs/clover.xml\"/>\n      <crap4j outputFile=\"./build/logs/crap4j.xml\"/>\n      <xml outputDirectory=\"./build/coverage/xml\"/>\n    </report>\n  </coverage>\n  <logging>\n    <junit outputFile=\"./build/logs/junit.xml\"/>\n  </logging>\n  <source>\n    <include>\n      <directory>./src/</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}