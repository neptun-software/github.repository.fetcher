{
  "metadata": {
    "timestamp": 1736712221105,
    "page": 936,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "UnionOfRAD/lithium",
      "stars": 1223,
      "defaultBranch": "1.3",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.52734375,
          "content": "#\n# li₃: the most RAD framework for PHP (http://li3.me)\n#\n# Copyright 2016, Union of RAD. All rights reserved. This source\n# code is distributed under the terms of the BSD 3-Clause License.\n# The full license text can be found in the LICENSE.txt file.\n#\n\n# See http://editorconfig.org on how to put this file to good use.\n# See http://li3.me/docs/book/specs/1.x/accepted/LSR-0-coding\n\nroot = true\n\n[*]\nend_of_line = lf\ncharset = utf-8\n\n[*.php]\nindent_style = tab\ntab_width = 4\ninsert_final_newline = false\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.302734375,
          "content": "#\n# li₃: the most RAD framework for PHP (http://li3.me)\n#\n# Copyright 2009, Union of RAD. All rights reserved. This source\n# code is distributed under the terms of the BSD 3-Clause License.\n# The full license text can be found in the LICENSE.txt file.\n#\n\n# OS X\n.DS_Store\n\n# Vim\n.*.sw[a-z]\n\n# PHPStorm\n.idea\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 31.8837890625,
          "content": "# Change Log\n\n## v1.3.0\n\nThis is an API-compatible upgrade of Li3 1.2 for all users of PHP 7.4.\n\n### Added\n\n- PHP 7.4 support\n\n### Removed\n\n- PHP 7.3 support (and below)\n\n## v1.2.0\n\n### Added\n\n- PHP 7.1 support\n\n- PHP 7.2 partial support, please read the note on extending from `*Object` below\n\n- PHP 7.3 partial support, please read the note on extending from `*Object` below\n\n- The `li3_fixtures` library is now part of the framework `test` package.\n\n- Data sources now support the `nested` strategy which will embed related records/documents by\n  fetching them using additional queries. (jails) \n\t\n  This strategy is auto-enabled on NoSQL-style databases where documents now\n  do not have to be fetched manually anymore. For classic relational databases\n  the new strategy can be enabled on a per query basis, if preferred over the\n  default `joined` strategy:\n\n  ```\n  Galleries::find('all', ['with' => 'Images', 'strategy' => 'nested'])\n  ```\n\n  Please note that records/documents - fetched using this strategy - cannot be\n  further constrained by conditions.\n\n- `Cache::key()` learned to generate safe cache keys. Where each adapter defines\n  what \"safe\" means. The method was all in all made more flexible and feature rich\n  as it added support for reusable and key mutating generator functions as well as\n  support for key generation by passing any form of data.\n\n- `action\\Request` is now (via `$this->request->is('dnt')`) able to detect if the \n  _Do Not Track_ feature is enabled.\n\n- The auto-library feature for scoped routes can now be disabled, so it's possible to\n  i.e. have an app and an admin scope, where the admin scope itself contains several \n  admin libraries.\n\n- `openssl_random_pseudo_bytes()` has been added as a new RNG source.\n\n- Added `core\\MergeInheritable` trait which allows classes to merge their array\n  properties with such properties defined in class parents. Used mainly for\n  merging `action\\Controller::$_render` and `data\\Model` properties. Also \n  slightly optimizes memory usage in said classes.\n\n- The `Response` now knows about HTTP status code 426 (Upgrade Required).\n\n- The `Encrypt` session strategy now uses the `openssl` extension for symmetric \n  encryption for better support and performance, whenever possible. Previously the,\n  now deprecated, `mcrypt` extension was always used. When `openssl` cannot be \n  used as a drop in, the strategy will fall back to `mcrypt` usage (aka _legacy_ \n  mode). This is the case when a non-default cipher mode (anything else than AES 256 \n  CBC) has been chosen or the `openssl` extension is not available.\n\n- The credit card validator now supports MasterCard 2-series. (Grayson Scherer)\n\n- `Libraries::instance()` now accepts a class map as a 4th parameter.\n\n- `Helper::attributes()` is now part of the public API.\n\n- `Model::hasFinder()` checks if a given finder is available, works for magic finders, too.\n\n- `Validator::has()` checks if a rule is available under given name.\n\n### Changed\n\n- The undocumented feature in `Cache::{write,read,delete,increment,decrement}()`, where \n  these methods supported callables as keys has been removed. Keys can now be of scalar \n  type only.\n\n- `Cache::key()` now requires a cache configuration name as it's first argument.\n\n- Dropped support for PHP 5.5\n\n- The `Encrypt` strategy now depends on the `openssl` extension, when it does not\n  operate in _legacy_ mode (see above). In this case it also doesn't depend on the \n  `mcrypt` extension anymore.\n\n- With HTML5 stating the type when linking or embedding scripts and styles using\n  `text/css` and `text/javascript` has become unnecessary. The `Html` helper will \n  now generate `<link>`, `<style>` and `<script>` tags without such types.\n\n### Deprecated\n\n- Short rendering instructions have now been officially deprecated and trigger a\n  deprecation message. Usage of short syntax was already discouraged.\n  \n  ```\n  ['template' => '/path/to/template'] // short deprecated syntax\n  ['template' => ['path' => '/path/to/template']] // full valid syntax\n  ```\n\n- `Object` and `StaticObject` are being deprecated, as\n  `Object` is soft-reserved in PHP >=7. Chance is taken for a cleanup of the\n  class-hirarchy and unused/obsolete methods. Newly created classes should\n  not inherit from `Object`/`StaticObject` anymore. \n\n  When using the framework with PHP >=7.2, ensure you are extending\n  `ObjectDeprecated` and `StaticObjectDeprecated`, for all other PHP versions\n  this change is not required.\n  \n  | old | new |\n  | --- | --- |\n  | `*Object::$_autoConfig` | use `lithium\\core\\AutoConfigurable` |\n  | `*Object::_init()` | _no replacement_ |\n  | `*Object::_instance()` | replaced, use `lithium\\core\\Libraries::instance()` |\n  | `analysis\\Inspector::_instance()` |  replaced, use `lithium\\core\\Libraries::instance()` |\n  | `data\\Model::_instance()` |  replaced, use `lithium\\core\\Libraries::instance()` |\n  | `*Object::_parents()` | replaced, use `lithium\\core\\MergeInheritable::_inherit()` |\n  | `*Object::_stop()` | _no replacement_, must reimplement |\n  | `Object::__set_state()` | _no replacement_ |\n  | `*Object::invokeMethod()` | _no replacement_, use `call_user_func_array()` |\n  | `analysis\\Inspector::invokeMethod()` | _no replacement_ |\n  | `Model::respondsTo()` | use `Model::hasFinder()` instead |\n  | `Validator::respondsTo()` | use `Validator::has()` instead |\n  | `*::respondsTo()` | use `is_callable()` instead |\n\n- Changing the default cipher and/or mode for the `Encrypt` strategy has been \n  deprecated and will cause the strategy to switch into _legacy_ mode. In legacy\n  mode the deprecated `mcrypt` extension will still be used.\n\n- Deprecated the non-flatten mode in `Set::extract()` as it is rarely used.\n\n### Fixed\n\n- The `'key'` and `'class'` options were supposed to be provided only for\n  Session strategies. They however leaked into Session adapters options.\n\n- A potential invalid reuse of a previously initialized `mcrypt` resource\n  has been fixed when using multiple `Encrypt` strategies with different\n  ciphers and/or modes. \n\n## v1.1.1\n\n### Added\n\n- PHP 7.1 support\n\n### Fixed\n\n- Test report filters are now fully normalized before passing them into `Report`.\n- Removed debug code in exception handling of `Database` (Alex Bowers).\n\n## v1.1.0\n\n### Added\n\n- PHP 7.0 support\n\n- `Database` now supports the `NOT BETWEEN` operator. #1208 (Eric Cholis)\n\n- Restrictions on library search paths for i.e. adapters inside non-core libraries have been\n  relaxed. This fixes an inconvenience where adapters (and other classes) always had to be placed\n  under the `extensions` directory. Even in cases where it didn't feel natural to put them there.\n\n  This is best demonstrated using the `li3_access` plugin as an example. This plugin\n  defines a new adaptable class (`security\\Access`).\n\n  Before:\n  ```\n  li3_access\n  ├── security\n  │   ├── Access.php\n  │   └── access\n  │       └── Adapter.php\n  └── extensions\n      └── adapter\n          └── access\n              ├── Resources.php\n              └── Rules.php\n  ```\n\n  After:\n  ```\n  li3_access\n  └── security\n      ├── Access.php\n      └── access\n          ├── Adapter.php\n          └── adapter\n              ├── Resources.php\n              └── Rules.php\n  ```\n\n\n- Filters and related classes have been refactored and extracted into the new\n  `lithium\\aop` namespace.\n\n  **Shallow hirarchy.** With the new `Filters`, classes that need filter functionality\n  don't need to inherit from `Object`/`StaticObject` anymore and don't need to have\n  special methods or properties defined. This is possible by entirely relying on a central\n  filters manager and using `spl_object_hash()` internally.\n\n  **Simplified filters context.** By integrating PHP 5.5's new `::class` keyword with `use`,\n  references to the static context are now made with `Context::class`, removing the need\n  for a static `$self` and repeating the full class name across filters in the same file.\n\n  **Simplified filters signature.** By using PHP 5.4's new context binding feature for\n  closures, we were able to simplify the signature of filters - i.e. by dropping the\n  `$self`.\n\n  This - as a sideeffect - reduces the requirement of using `invokeMethod()` to access\n  protected members of the context. `$this` and `Context::class` can be used to access\n  the filtered object. Also makes better stacktraces.\n\n  **Simplified chain advancing.**\n  Instead of advancing the chain via `$chain->next()`, a callable (`$next()`) is used.\n  The advancing function just requires one argument.\n\n  ```php\n  function($self, $params, $chain) { // old\n      $self->invokeMethod('_foo');\n      $params['bar'] = 'baz';\n      return $chain->next($self, $params, $chain);\n  }\n\n  function($params, $next) { // new\n      $this->_foo();\n      $params['bar'] = 'baz';\n      return $next($params);\n  }\n  ```\n\n  **Strict separation of filters and implementation.** The implementation function (the one\n  being filtered) now takes just a single `$params` argument. It doesn't have access to\n  the chain anymore.\n\n  **Everything is lazy.** The new filter manager will now by default apply any filters -\n  for both concrete and static classes - lazily.\n\n  **Better filtering of concrete classes.** It is now possible to apply\n  filters to both all and/or specific instances of a concrete class.\n\n  ```php\n  $foo = new Foo();\n\n  // Executes filter only for `$foo`'s `bar` method.\n  Filters::apply($foo, 'bar', function($params, $next) {});\n\n  // Executes filter for all `Foo`'s `bar` methods.\n  Filters::apply('Foo', 'bar', function($params, $next) {});\n  ```\n\n  **Performance** for filtered methods - especially when there are no filters applied to it -\n  has been improved, so that there is only a minimal penality for making a method\n  filterable.\n\n- `Router::match()` now additionaly supports the magic schemes `tel` and `sms`. This\n  allows to create `tel:+49401234567` style links.\n\n- `Model::save()` using a relational database adapter will now only save updated fields,\n  instead of blindly saving all. #1121 (Hamid Reza Koushki)\n\n- `Hash::calculate()` learned to hash over arbitrary data (scalar and non-scalar, closures). #1196 (David Persson)\n\n- Introduced new `lithium\\net\\HostString` class to help parse `<host>:<port>` strings.\n\n- `Cache` together with the `File` adapter can now be used to store BLOBs. \n\n  ```php\n  Cache::config([\n    'blob' => [\n      'adapter' => 'File', \n      'streams' => true // Enable this option for BLOB support.\n    ]\n  ]);\n  \n  $stream = fopen('php://temp', 'wb');\n  $pdf->generate()->store($stream); // some expensive action\n  \n  // We must rewind the stream, as Cache will not do this for us.\n  rewind($stream);\n  \n  // Store the contents of $stream into a cache item.\n  Cache::write('blob', 'productCatalogPdf', $stream);\n  \n  // ... later somewhere else in the galaxy ...\n  $stream = Cache::read('blob', 'productCatalogPdf');\n  ```\n\n- `mcrypt_create_iv()` and PHP7's `random_bytes()` have been added as new RNG sources.\n\n- Enable custom error messages in form helper. This feature allows to provide messages\n  for validation error inside the template. This allows easier translation of messages and\n  customization in case there is no control over the model (i.e. developing a \"theme\" for a\n  customer without changing the basic functionality). #1167 (David Persson)\n\n- Strict mode can now be enabled for MySQL via the `'strict'` option. Read more about the\n  feature at http://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-strict. #1171 (David Persson)\n\n- Added drain option to action request allowing to disable auto stream reading. When the\n  drain option is disabled, action request will not drain stream data - when sent. This reduces\n  memory usage and is a first step in enabling streaming very large files (i.e. uploading video\n  content). The option is enabled by default to keep current behavior, but future versions may\n  disable it. #1110 (David Persson)\n\n  With draining disabled, streams must be read manually:\n\n  ```php\n  $stream = fopen('php://input', 'r');\n  // Do something with $stream.\n  fclose($stream);\n  ```\n\n  Note that with draining disabled, automatic content decoding is not supported\n  anymore. It must be manually decoded as follows.\n\n  ```php\n  $data = Media::decode($request->type, stream_get_contents($stream));\n  ```\n\n- Text form fields now support generating corresponding `<datalist>` elements for autocompletion.\n\n  ```php\n  $this->form->field('region', [\n      'type' => 'text',\n      'list' => ['foo', 'bar', 'baz']\n  ]);\n  ```\n\n- It is now guaranteed that `Random::generate()` will use a cryptographic strong RNG. It \n  no longer falls back to a less strong source. \n\n- Due to a new host string parser implementation and framework wide rollout, first \n  any class accepting a host string in the form of `<host>` or `<host>:<port>` now\n  also accepts the port only notation `:<port>`. This allows to change just the\n  port but keep using the default host name. Second, host strings will now also handle \n  IPv6 addresses correctly.\n\n- Console command help now shows inherited options i.e. `[--silent] [--plain] [--help]`.\n\n- Reduced `preg_match()` call count in `Router` in favor of `strpos()` for performance reasons.\n\n- Improved database encoding, timezone and searchPath methods. #1172 (David Persson)\n\n- Multi-word console command arguments are now parsed into camelized versions.\n  `--no-color`, will be available as `noColor` and assigned to a `$noColor` property if\n  present in the command class definition. Previously `--no-color` was made available as\n  `no-color`. This has been deprecated.\n\n- New `lithium\\util\\Text`, `lithium\\security\\Random` and `lithium\\security\\Hash` \n  classes which were extracted from `String`. #1184 (David Persson)\n\n- The bulitin test framework now handles circular references in expectations or results\n  correctly. The display format of fails has been changed to that of `print_r()`.\n\n- Validator can now validate whole arrays:\n  ```\n  $value = array('complex' => true, 'foo' => 'bar');\n  Validator::add('arrayHasComplexFooKeys', function($value, $format, $options) {\n      return isset($value['complex'], $value['foo']);\n  });\n  ```\n\n- Switched to short array syntax.\n\n### Changed\n\n- The `persist` option for the MongoDb adapter has been removed. Persistent connection\n  configuration is not compatible with mongo ext >= 1.2.0. 1.2.0 was released in \n  2011 and it is expected that almost all users already have a more recent \n  version. (Eric Cholis)\n\n- When failing to close an established network connection via the `Socket` subclasses \n  `Context`, `Stream` and `Curl` (i.e. `$socket->close()`), the close operation will\n  not be retried anymore. Instead `false` is returned.\n\n- To skip decoration in the console test command use `--just-assertions` instead of `--plain`.\n\n- When no suitable RNG is found (rare), `Random::generate()` will throw an exception.\n\n- Database encoding, timezone, and searchPath methods may now throw exceptions. Please\n  wrap code calling these methods directly in try/catch blocks - if needed. #1172\n  (David Persson)\n\n- Instance filters are now not cleaned up automatically anymore, that\n  is when the instance was destroyed, its filters went away with it.\n\n- `Inspector::properties()` and `Inspector::methdos()` now requires an instance when \n  inspecting concrete classes.\n\n- When calculating test coverage dead code is not ignored anymore. `XDEBUG_CC_DEAD_CODE`\n  causes problems with PHP 7.0 + opcache and cannot be relieably used. \n\n- The undocumented and deprecated `'servers'` option in the `Memcache` cache adapter has been\n  removed. `'host'` should be used in all cases.\n\n### Deprecated\n\n- Multi-word console command arguments i.e. `--no-color` were made available as\n  `no-color`. This has been deprecated. \n\n- The XCache caching adapter has been deprecated as it is not compatible with the wildly\n  deployed OPcache and does not perform better.\n\n- The FirePhp logging adapter has been deprecated as Firebug's usage share is shrinking\n  in favor of builtin developer tools.\n\n- The builtin mocking framework (`lithium\\test\\Mocker`) has been deprecated as alternatives\n  exist and it is not needed as a core test dependency. This takes the task of maintaining full\n  blown mocking from us. You might want to have a look at \n  [Mockery](https://github.com/padraic/mockery).\n\n- Per adapter filters in `Logger` and `Session` have been deprecated. Please apply filters \n  directly to the static `Logger::*` and `Session::*` methods instead.\n\n  ```php\n  // deprecated usage\n  Session::config([\n    'default' => [\n       'filters' => [function($self, $params, $chain) { /* ... */ }]\n    ]\n  ]);\n\n  // always use this\n  use lithium\\storage\\Session;\n\n  Filters::apply(Session::class, 'write', function($params, $next) { \n    /* ... */ \n  });\n  ```\n\n-  Methods in an adapter of `Logger` and `Session`, which returned a closure taking\n  `$self` as the first parameter, should now drop that parameter expectation.\n\n- The String class has been renamed to `Text` while RNG and hashing functionality\n  have been extracted into `lithium\\security\\Random` and `lithium\\security\\Hash`. #1184 (David Persson)\n\n  This is mainly to achieve PHP 7.0 compatibilty as `String`\n  [will become a reserved name](https://wiki.php.net/rfc/reserve_even_more_types_in_php_7).\n\n  Old methods are deprecated but continue to work and redirect to new methods. It wont be\n  possible to use the old String class with PHP >= 7.0. You must use the new names before\n  switching to PHP 7.0.\n\n  | old | new |\n  | --- | --- |\n  | `lithium\\util\\String::hash()` | `lithium\\security\\Hash::calculate()` |\n  | `lithium\\util\\String::compare()` | `lithium\\security\\Hash::compare()` |\n  | `lithium\\util\\String::random()` | `lithium\\security\\Random::generate()` |\n  | `lithium\\util\\String::ENCODE_BASE_64` | `lithium\\security\\Random::ENCODE_BASE_64` |\n  | `lithium\\util\\String::uuid()` | `lithium\\util\\Text::uuid()` |\n  | `lithium\\util\\String::insert()` | `lithium\\util\\Text::insert()` |\n  | `lithium\\util\\String::clean()` | `lithium\\util\\Text::clean()` |\n  | `lithium\\util\\String::extract()` | `lithium\\util\\Text::extract()` |\n  | `lithium\\util\\String::tokenize()` | `lithium\\util\\Text::tokenize()` |\n\n- The `lithium\\util\\collection\\Filters` class has been deprecated in favor\n  of `lithium\\aop\\Filters`.There have also been changes in how filters should\n  be implemented and advanced. **Everything old keeps on working** and calls are\n  forwarded to the new implementations. Methods for filtering functionality in\n  `Object`/`StaticObject` have also been deprecated.\n\n  | old | new |\n  | --- | --- |\n  | `lithium\\core\\*Object::applyFilter()` | `lithium\\aop\\Filters::apply()` |\n  | `lithium\\core\\*Object::_filter()` | `lithium\\aop\\Filters::run()` |\n  | `lithium\\util\\collection\\Filters::apply()` | `lithium\\aop\\Filters::apply()` |\n  | `lithium\\util\\collection\\Filters::run()` | `lithium\\aop\\Filters::run()` |\n  | `lithium\\util\\collection\\Filters::hasApplied()` | `lithium\\aop\\Filters::hasApplied()` |\n\n  **Changes in making a method filterable**:\n  ```\n  $this->_filter(__METHOD__, $params, function($self, $params) { // old (instance)\n  static::_filter(__METHOD__, $params, function($self, $params) { // old (static)\n\n  Filters::run($this, __FUNCTION__, $params, function($params) { // new (instance)\n  Filters::run(get_called_class(), __FUNCTION__, $params, function($params) { // new (static)\n  ```\n\n  **Changes in applying filters**:\n  ```\n  $foo::applyFilter(/* ... */) // old (instance)\n  Foo::applyFilter(/* ... */) // old (static)\n\n  Filters::apply($foo, 'bar', /* ... */) // new (instance)\n  Filters::apply('Foo', 'bar', /* ... */) // new (any instance)\n  Filters::apply('Foo', 'bar', /* ... */) // new (static)\n  ```\n\n  **Changes in the filter signature**:\n  ```php\n  // old\n  Filters::apply('Foo', 'bar', function($self, $params, $chain) {\n    $self->invokeMethod('_qux');\n    return $chain->next($self, $params, $chain);\n  });\n\n  // new\n  Filters::apply('Foo', 'bar', function($params, $next) {\n    $this->_qux();\n    return $next($params);\n  });\n  ```\n\n  Accessing the currently filtered class/method from inside a filter function\n  (via `$chain->method()`) has been deprecated. \n\n### Fixed\n\n- Fixed possible infinite retry loop when failing to close an established network \n  connection in the `Socket` subclasses `Context`, `Stream` and `Curl`.\n\n- Fixed slug generation by `Inflector` for strings containing multibyte characters or\n  (unprintable) whitespaces.\n\n- Added missing uppercase transliteration pairs used by `Inflector::slug()`.\n\n- Fixed edge case when using `Collection::prev()` and the collection contained\n  a falsey value (i.e. `null`, `false`, `''`).\n\n- Fixed parsing certain exception details in `Database` i.e. `pgsql unknown role exception`.\n\n- Fixed retrieval of property default values in concrete classes through `Inspector`.\n\n- Fixed write through caching via `Cache::read()`. When passing in a closure for the `'write'`\n  option, the closure was called even when the key was already present in cache.\n\n  - Fixed and enabled modification of the default query options through `Model::query()`.\n\n## v1.0.3\n\n### Fixed\n\n- Fixed write through caching via `Cache::read()`. When passing in a closure for the `'write'`\n  option, the closure was called even when the key was already present in cache.\n\n- Fixed and enabled modification of the default query options through `Model::query()`.\n\n## v1.0.2\n\n### Deprecated\n\n- Brace globbing support has been deprecated in `Libraries`. This feature\n  cannot be reliably be provided crossplatform and will already not work\n  if `GLOB_BRACE` is not available. (reported by Aaron Santiago)\n\n### Fixed\n\n- Optimized searching for a library's namespaces has been reenabled. \n\n- Per connection read preference settings for MongoDB were ignored. (Fitz Agard)\n\n## v1.0.1\n\n### Fixed\n\n- Result-less queries produced by performing a raw query \n  i.e. `'SET SESSION group_concat_max_len = 1000000;'` are now handled correcly.\n\n- Fixes MySQL DSN socket support when a socket path is given in `'host'`. \n\n- When using the model `count` finder without a `'conditions'` key, options\n  like `having`, `offset`, `group` were mistakenly interpreted as conditions.\n\n- Calculation queries returning no results at all, do not error out, but\n  return `null` now.\n\n- Extraction of translation tokens using context together with short array syntax\n  is now fully supported.\n\n## v1.0.0\n\n(This includes changes from 1.0.0-beta on only.)\n\n### Fixed\n\n- Most coding standard violations have been fixed. (David Persson)\n- Several incorrectly documented return/param types and unreachable code paths have been fixed, \n  thanks to our new static analysis tools. (David Persson)\n- Fixed case where routes weren't matched inside scopes. #1115 (Hamid Reza Koushki)\n- Several Security helper fixes #1131, f96e8b5, a868b3b, bbcadda (Hamid Reza Koushki, David Persson)\n- Fixed Session::read() with HMAC strategy on non-existent key. #1111 (David Persson, Hamid Reza Koushki)\n- Fixed bug where conditions on relation queries where not taken into account #1099, #1141 (Jacob Budin, David Persson, Hamid Reza Koushki)\n- Fixed cases where values of some MongoDB query operatos were incorrectly casted. #1124 (Hamid Reza Koushki)\n- Fixed case where `0` was be ignored as an argument value in commands. #1104, #1125 (Ali Farhadi)\n- Fixed bug with mis-matched route default values #995, #1126 (Simon Jaillet)\n- `$_FILES` parsing in Request is skipped if the globals option is off. 7c659c4 (David Persson)\n- Fixed ignore of `$initial` parameter in `Collection::reduce()` #1096 (Jacob Budin)\n- Fixed encoding/decoding of empty JSON values #1103, #1090 (Simon Jaillet) \n- The offset parameter in the cache memory adapter wasn't used. 1daa738 (David Persson)\n- Compatiblity with latest MongoDB driver #1093, #1079, #698 (Simon Jaillet)\n- Fixed tests to correctly run and pass on Windows #1073, #1039 (Tsoulloftas Christodoulos, Ciaro Vermeire) \n- Fixed case where custom configuration was ignored when using form helper with checkboxes #1061 (Mark Wilde)\n- Fixed #888 to make the any option in Validator::check() work correctly. #1051 (David Persson)\n- Fixed issue with compiled view templates on Windows. 32b878a (David Persson)\n- Dechunking body data is now more safe and unwanted urldecoding of data is prevented. #1020 (Warren Seymour)\n- Fixed bug when using LIMIT, ORDER and hasMany relations with PostgreSql. #1145 (Hamid Reza Koushki)\n- Matched implementation with documentation of `Request::accepts()`. The method now returns a boolean \n  when type is provided. #1180, #856 (David Persson, David Rogers)\n- Fixed bug where route defaults weren't kept when key params were present in route. (David Persson)\n- Fixed several bugs in the FormSignature class. #839, #998, #1173 (Hamid Reza Koushki, David Persson, Ciaro Vermeire, cinaeco)\n- Fixed undetected buggy behavior in `Database`/`RecordSet` where records could get out of order and **associated has-many** \n  records would be partially missing. The bug occurred when querying for results with a has-many relationship and without ordering \n  by the primary key of the main record. In all queries involving a has-many relationship, it is adviced to first order by the main \n  id as otherwise an exception will be thrown. \n  We've decided against adding in the main id magically, as silently rewriting users' queries is a rabbit hole we dont't want \n  to go down. In general implicit order by the database is not something to rely on, if you want records in a certain order, always \n  explictly specify it. \n  Fixes #1162 and #1182 (Hamid Reza Koushki, Nate Abele, David Persson)\n\n  ```php\n  Posts::find('all', array( // wrong :(\n\t'order' => 'Comments.created',\n\t'with' => 'Comments'\n  ));\n\n  Posts::find('all', array( // correct :)\n\t'order' => array('id', 'Comments.created'),\n\t'with' => 'Comments'\n  ));\n\n  Posts::find('all', array( // correct :)\n\t'order' => array('title', 'id', 'Comments.created'),\n\t'with' => 'Comments'\n  ));\n  ```\n\n### Improved\n\n- Improved database and source performance by adding caching of expensive lookups and \n  serveral other changes. 7d54eba, 8984bc2, bfc9426, 39ef580 (David Persson)\n- Uniform __construct/__destruct docblocks. (David Persson)\n- Improved overall API documentation. (David Persson) \n- Removed unused code (David Persson)\n- Performance optimization of `Message::translate()` 28a2023 (David Persson)\n- Performance optimization of `DocumentSet::_set()` #1144 (Warren Seymour)\n- Removed most `extract()`-usage 651d07a, f74b691 (David Persson)\n- String::compare() will use native `hash_equals()` if possible. #1138 (David Persson)\n- Better cookie support in Request/Response #618, #1123 (Ali Farhadi)\n- We're now using standard tripple-backtick markdown syntax for fenced code blocks. (David Persson)\n- When using `isset()` nested documents are now supported using the dot notation #1094 (Warren Seymour)\n- Improved casting of MongoDB array based fields as content elements. #1102 (Simon Jaillet)\n- Improved performance in net related classes #1089 (David Persson)\n- When using the cache adapter for logging, logs are now persisted as long as possible. d3b2382 (David Persson)\n- Better HHVM compatibilty (although not yet full) 0de8fa0, 651d07a (David Persson)\n- Micro-optimization of `is_null()` into `=== null`. aa4ea12 (David Persson)\n- Implemented GC and increment/decrement for file cache adapter. (David Persson)\n- Improved file cache adapter parser. (David Persson)\n- Improved host/port parsing in redis cache adapter. #1076 (Soban Vuex)\n- Added missing 429, 431, 511 HTTP status codes. #1075 (Dirk Brünsicke)\n- `session_cache_limiter` is now configurable. 7a98128 (David Persson)\n- Enable serialization of data entity and collection. (David Persson)\n- Cast empty dates to `NULL` for relational databases. #997 (Simon Jaillet)\n- Use transactions when bulk-inserting in redis cache adapter. 995214f (David Persson)\n- Improved view template cache GC and compilation. 6f641e7, a502da5 (David Persson)\n- Support DELETE method in curl socket #1034 (Warren Seymour)\n- Improved performance by using HMAC in the FormSignature class. #1173 (David Persson)\n- Improved memory profile and (internal) semantics of `RecordSet` and PDO `Result` fetching. (Nate Abele)\n- Order direction using `Database` are now normalized to uppercase (i.e. `ASC`). (David Person)\n\n### Added\n\n- Add support for PATCH HTTP method. (Gavin Davies)\n- Allow prefixed names for auth check (i.e. `user.name`) (Alex Soban)\n- Allow continued manipulation in dispatcher rules. #1158, #1159 (David Persson, Hamid Reza Koushki)\n- Added change log file. You're reading it :) (David Persson)\n- Added whitelist support to `Model::validates()` #1143 (Ali Farhadi)\n- Added support for atomic increment/decrement in relational databases #1122 (Ali Farhadi)\n- Added three-way `'required'` switch option for controlling when to run validation rules against \n  (non-existent) fields. Now by default all fields that are required on *create* keep being required (unchanged),\n  however when *updating* validation rules for fields that are not present are skipped. #1118 (Hamid Reza Koushki)\n- Added support for REGEXP and SOUNDS LIKE operators for MySQL #1116 (David Persson)\n- Coverage summary statistics are now shown when using the test command #1107 (Gavin Davies)\n- Added support for using sockets in redis cache adapter. #1076 (Soban Vuex)\n- Implemented cache scoping. #1067 (David Persson)\n- Added cache adapter base class. (David Persson)\n- Implemented cache item persistence through `Cache::PERSIST`. 8a0b24a (David Persson)\n- The g11n infrastructure now supports gettext-like contexts. #999 (Jasper Tey) \n\n### Changed\n\n- The shorthand `Download` header has been deprecated because of its overhead and magicness. #1134 (David Persson)\n- When updating an *existing* entity, validation rules for fields that are not present on the to-be-saved entity are\n  skipped. The old behavior of requiring on *create and update* can be brought back by using the `'required'` option\n  set to `true` with `Model::save()` or `Model::validates()`. #1118  (Hamid Reza Koushki)\n- Strategy support for Cache::delete() has been removed as it made no sense. d15f3e7 (David Persson)\n- The APC cache adapter now extends the base cache adapter class. Thus the base class must be loaded\n  before the APC adapter. Normally this should happen automatically and no updates are needed. However\n  if you use an old bootstrap file, the base adapter may not been loaded before the apc one.\n  A deprecation notice will then be triggered. (David Persson)\n\n### Backwards Incompatible Changes\n\n- Removed the automatic `__init()` for static classes. fa4ef11 (jails)\n- `String::compare()` is now stricter and errors out when one of the provided params is not a string. 7822a2b (David Persson)\n- Encoding/decoding of JSON using empty values has been improved. When encoding `null` into JSON\n  an empty string instead of an empty array is returned. `{}` is now correctly decoded into an\n  empty array. #1103, #1090 (Simon Jaillet)\n- When setting Request/Response headers, the new headers are not returned directly. Instead\n  one must now first set, then get. #1089 (David Persson)\n- Cache adapter instances cannot directly be filtered anymore, instead the `Cache` class' methods may\n  be filtered. This clears up some misconceptions and simplifies adapter code. #1068 (David Persson)\n- Cache adapters must now extend the new cache adapter base class. (David Persson)\n- Cache adapters must now support multi-key reads and writes. (David Persson)\n- When used with a parameter `lithium\\action\\Request::accepts()` now returns a boolean.\n  It previously was returning i.e. `'json'` when `application/json` was in accepted content types\n  and invoked with `Request::accepts('json')`. This change matches the actual behavior with\n  documented (and expected) behavior. (David Persson, David Rogers)\n- The `library` command has been extracted into the `li3_lab` plugin. Please install the plugin\n  to continue using that command. #1174 (David Persson)\n- The `FormSignature` class now uses HMAC with a secret key. This will now require configuring the class\n  with an app specific secret key before using it. #1173 (David Persson)\n- When installed via composer the default location is now `libraries/lithium`.\n- Test `test` command no longer modifies the `error_reporting` setting. Please make sure\n  you have set the `error_reporting` to `E_ALL` in your php.ini.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.8681640625,
          "content": "# Contributing\n\nThank you for your interest in contributing to the project! It is built by a\nthriving community of developers who value cutting-edge technology and concise,\nmaintainable code. If you've found a bug, or have an idea for a feature, we\nencourage your participation in making the framework better.\n\n**Security vulnerabilities** are an especially sensitive class of\nbug and should not be disclosed publicly. Please read the\n[full information](http://li3.me/development#security) on our website.\n\nHere's what you need to stick to in order to have the best chance of getting your code pushed to the core:\n\n* **Conceptual integrity**: code should conform to the goals of the framework\n* **Maintainability**: code should pass existing [tests](http://li3.me/docs/specs/accepted/LSR-2-testing.md), have adequate test coverage and should conform to our [coding standards](http://li3.me/docs/specs/accepted/LSR-0-coding.md)\n* **Comprehensibility**: code should be concise and expressive, and should be accompanied by new [documentation](http://li3.me/docs/specs/accepted/LSR-1-documenting.md) as appropriate, or updates to existing docs\n* **Integration**: finally, pull requests should be submitted against their respective version branch. The following 3 rules help, to determine the correct version branch.\n\t1. Patches for bug fixes against _next stable_ (i.e. 1.0).\n\t2. Patches for BC-features against _next minor_. (i.e. 1.1)\n\t3. Patches for BC-breaking-features against _next major_. (i.e. 2.0)\n\nAs always, all contributions are important, and we're very grateful for the help\nof all those who have gotten us this far. If you're interested in helping out,\nbut feel you could use a little coaching, be sure to message us and\nintroduce yourself -- we'd love to help you get started.\n\nYou may also want to review the full [development guidelines](http://li3.me/development) over at [li3.me](http://li3.me/).\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.4921875,
          "content": "Copyright (c) 2009, Union of RAD http://union-of-rad.org\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice,\n\t\tthis list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright notice,\n\t\tthis list of conditions and the following disclaimer in the documentation\n\t\tand/or other materials provided with the distribution.\n    * Neither the name of Lithium, Union of Rad, nor the names of its contributors \n\t\tmay be used to endorse or promote products derived from this software \n\t\twithout specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\nOF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\nEVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.7841796875,
          "content": "# li₃\n\n### You asked for a better framework. Here it is.\n\nli₃ is the fast, flexible and the most RAD development framework for PHP.\n\n### A framework of firsts\n\nli₃ is the first and only major PHP framework built from the ground up for PHP\n5.3+, and the first to break ground into major new technologies, including\nbridging the gap between relational and non-relational databases through a\nsingle, unified API.\n\n### Promiscuously opinionated\n\nSome frameworks give you a solid set of classes, but little or no default\nproject organization, leaving you to fend for yourself on each project you\ncreate, and spend time wiring up framework classes that should just work\ntogether. Others provide you with great organizational conventions, but no way\nto break out of those conventions if you need to, and too often, no way to\noverride or replace core framework classes.\n\nli₃ is the first framework to give you the best of both worlds, without\ncompromising either. In fact, li₃'s API is intentionally designed to allow you\nto \"grow out of\" the framework and into your own custom code over the course of\nyour application's lifecycle, if your needs require.\n\n### Technology\n\nli₃ takes full advantage of the latest PHP features, including\nnamespaces, late static binding and closures. li₃'s innovative [method filter\nsystem](http://li3.me/docs/api/lithium/latest:1.x/lithium/aop/Filters) makes extensive use\nof closures and anonymous functions to allow application developers to \"wrap\"\nframework method calls, intercepting parameters before, and return values after.\n\nli₃ also complies with PSR-4, the PHP namespacing standard, allowing you to easily\nintegrate other PHP standard libraries and frameworks with li₃ applications,\nand vice-versa.\n\nli₃ integrates the latest storage technologies, including MongoDB, CouchDB and\nRedis, with plugin support for Cassandra, ElasticSearch and others.\n\n### Flexibility\n\nli₃ gives you full control over your application, from filters to dynamically\nmodify framework internals, to dynamic dependencies to extend and replace core\nclasses with application or plugin classes, to heavy use of adapter-oriented\nconfigurations, to make it seamless to move between different technologies and\noptions.\n\nEvery component of the li₃ framework stack is replaceable through the\nrobust plugin architecture. Swap out the default ORM / ODM implementation\nfor [Doctrine 2](https://github.com/mariano/li3_doctrine2/) or [PHP\nActiveRecord](https://github.com/greut/li3_activerecord). Don't like\nthe templating? Use [Twig](https://github.com/UnionOfRAD/li3_twig),\n[Mustache](https://github.com/bruensicke/li3_mustache), or roll your own.\n\nIf you don't even need to write a full application, build a micro-app in a\nsingle file using the routing system, without giving up the maintainability of\nthe framework's structure.\n\n"
        },
        {
          "name": "action",
          "type": "tree",
          "content": null
        },
        {
          "name": "analysis",
          "type": "tree",
          "content": null
        },
        {
          "name": "aop",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.8681640625,
          "content": "{\n    \"name\": \"unionofrad/lithium\",\n    \"description\": \"The li₃ PHP framework\",\n    \"keywords\": [\"lithium\", \"li3\", \"framework\"],\n    \"homepage\": \"http://li3.me\",\n    \"license\": \"BSD-3-Clause\",\n    \"type\": \"lithium-library\",\n    \"authors\": [\n        {\"name\": \"Union of RAD\"},\n        {\"name\": \"The Community\"}\n    ],\n    \"support\": {\n        \"stack overflow\": \"https://stackoverflow.com/tags/li3\"\n    },\n    \"require\": {\n        \"php\": \"~7.4\",\n        \"composer/installers\": \"1.*\"\n    },\n    \"suggest\": {\n        \"ext-openssl\": \"For the Encrypt Session strategy.\",\n        \"ext-memcached\": \"For the Memcache Cache adapter.\",\n        \"ext-redis\": \"For the Redis Cache adapter.\",\n        \"ext-mongo\": \"For the MongoDb Datasource. \",\n        \"ext-pdo\": \"For the MySql, Postgres and Sqlite Datasources.\",\n        \"ext-curl\": \"For the Curl Socket adapter.\"\n    },\n    \"bin\" : [\"console/li3\"]\n}"
        },
        {
          "name": "console",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "g11n",
          "type": "tree",
          "content": null
        },
        {
          "name": "net",
          "type": "tree",
          "content": null
        },
        {
          "name": "security",
          "type": "tree",
          "content": null
        },
        {
          "name": "storage",
          "type": "tree",
          "content": null
        },
        {
          "name": "template",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}