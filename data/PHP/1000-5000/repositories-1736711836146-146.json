{
  "metadata": {
    "timestamp": 1736711836146,
    "page": 146,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "symfony/event-dispatcher-contracts",
      "stars": 3376,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0205078125,
          "content": "/.git* export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "vendor/\ncomposer.lock\nphpunit.xml\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.1533203125,
          "content": "CHANGELOG\n=========\n\nThe changelog is maintained for all Symfony contracts at the following URL:\nhttps://github.com/symfony/contracts/blob/main/CHANGELOG.md\n"
        },
        {
          "name": "Event.php",
          "type": "blob",
          "size": 1.4443359375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Contracts\\EventDispatcher;\n\nuse Psr\\EventDispatcher\\StoppableEventInterface;\n\n/**\n * Event is the base class for classes containing event data.\n *\n * This class contains no event data. It is used by events that do not pass\n * state information to an event handler when an event is raised.\n *\n * You can call the method stopPropagation() to abort the execution of\n * further listeners in your event listener.\n *\n * @author Guilherme Blanco <guilhermeblanco@hotmail.com>\n * @author Jonathan Wage <jonwage@gmail.com>\n * @author Roman Borschel <roman@code-factory.org>\n * @author Bernhard Schussek <bschussek@gmail.com>\n * @author Nicolas Grekas <p@tchwork.com>\n */\nclass Event implements StoppableEventInterface\n{\n    private bool $propagationStopped = false;\n\n    public function isPropagationStopped(): bool\n    {\n        return $this->propagationStopped;\n    }\n\n    /**\n     * Stops the propagation of the event to further event listeners.\n     *\n     * If multiple event listeners are connected to the same event, no\n     * further event listener will be triggered once any trigger calls\n     * stopPropagation().\n     */\n    public function stopPropagation(): void\n    {\n        $this->propagationStopped = true;\n    }\n}\n"
        },
        {
          "name": "EventDispatcherInterface.php",
          "type": "blob",
          "size": 1.0146484375,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Contracts\\EventDispatcher;\n\nuse Psr\\EventDispatcher\\EventDispatcherInterface as PsrEventDispatcherInterface;\n\n/**\n * Allows providing hooks on domain-specific lifecycles by dispatching events.\n */\ninterface EventDispatcherInterface extends PsrEventDispatcherInterface\n{\n    /**\n     * Dispatches an event to all registered listeners.\n     *\n     * @template T of object\n     *\n     * @param T           $event     The event to pass to the event handlers/listeners\n     * @param string|null $eventName The name of the event to dispatch. If not supplied,\n     *                               the class of $event should be used instead.\n     *\n     * @return T The passed $event MUST be returned\n     */\n    public function dispatch(object $event, ?string $eventName = null): object;\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2018-present Fabien Potencier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.337890625,
          "content": "Symfony EventDispatcher Contracts\n=================================\n\nA set of abstractions extracted out of the Symfony components.\n\nCan be used to build on semantics that the Symfony components proved useful and\nthat already have battle tested implementations.\n\nSee https://github.com/symfony/contracts/blob/main/README.md for more information.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.962890625,
          "content": "{\n    \"name\": \"symfony/event-dispatcher-contracts\",\n    \"type\": \"library\",\n    \"description\": \"Generic abstractions related to dispatching event\",\n    \"keywords\": [\"abstractions\", \"contracts\", \"decoupling\", \"interfaces\", \"interoperability\", \"standards\"],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Nicolas Grekas\",\n            \"email\": \"p@tchwork.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.1\",\n        \"psr/event-dispatcher\": \"^1\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Contracts\\\\EventDispatcher\\\\\": \"\" }\n    },\n    \"minimum-stability\": \"dev\",\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-main\": \"3.6-dev\"\n        },\n        \"thanks\": {\n            \"name\": \"symfony/contracts\",\n            \"url\": \"https://github.com/symfony/contracts\"\n        }\n    }\n}\n"
        }
      ]
    }
  ]
}