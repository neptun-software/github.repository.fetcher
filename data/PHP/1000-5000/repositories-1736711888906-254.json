{
  "metadata": {
    "timestamp": 1736711888906,
    "page": 254,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "thephpleague/commonmark",
      "stars": 2782,
      "defaultBranch": "2.6",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1845703125,
          "content": "; top-most EditorConfig file\nroot = true\n\n# All files.\n[*]\nend_of_line = LF\nindent_style = space\nindent_size = 4\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.8583984375,
          "content": "# Path-based git attributes\n# https://www.kernel.org/pub/software/scm/git/docs/gitattributes.html\n\n# Ignore all test and documentation with \"export-ignore\".\n/commonmark-banner.png  export-ignore\n/.editorconfig        export-ignore\n/.gitattributes       export-ignore\n/.github              export-ignore\n/.gitignore           export-ignore\n/.nojekyll            export-ignore\n/.scrutinizer.yml     export-ignore\n/.styleci.yml         export-ignore\n/CHANGELOG-0.x.md     export-ignore\n/CHANGELOG-1.x.md     export-ignore\n/docker               export-ignore\n/docker-compose.yml   export-ignore\n/docs                 export-ignore\n/phpcs.xml.dist       export-ignore\n/phpstan.neon.dist    export-ignore\n/phpunit.xml.dist     export-ignore\n/psalm.xml            export-ignore\n/RELEASE_CHECKLIST.md export-ignore\n/roave-bc-check.yaml  export-ignore\n/tests                export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.12890625,
          "content": "/.idea/\n/.phpcs-cache\n/.phpunit.result.cache\n/.phpunit.cache\n/build/\n/docs/_site/\ncomposer.lock\ncomposer.phar\n/vendor/\nphpunit.xml\n\n"
        },
        {
          "name": ".nojekyll",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".phpstorm.meta.php",
          "type": "blob",
          "size": 6.0556640625,
          "content": "<?php\n\n/*\n * This file is part of the league/commonmark package.\n *\n * (c) Colin O'Dell <colinodell@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace PHPSTORM_META\n{\n    expectedArguments(\\League\\CommonMark\\Util\\HtmlElement::__construct(), 0, 'a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kdb', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'pre', 'progress', 'q', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr');\n\n    expectedArguments(\\League\\CommonMark\\Extension\\CommonMark\\Node\\Block\\Heading::__construct(), 0, 1, 2, 3, 4, 5, 6);\n    expectedReturnValues(\\League\\CommonMark\\Extension\\CommonMark\\Node\\Block\\Heading::getLevel(), 1, 2, 3, 4, 5, 6);\n\n    registerArgumentsSet('league_commonmark_htmlblock_types', \\League\\CommonMark\\Extension\\CommonMark\\Node\\Block\\HtmlBlock::TYPE_1_CODE_CONTAINER, \\League\\CommonMark\\Extension\\CommonMark\\Node\\Block\\HtmlBlock::TYPE_2_COMMENT, \\League\\CommonMark\\Extension\\CommonMark\\Node\\Block\\HtmlBlock::TYPE_3, \\League\\CommonMark\\Extension\\CommonMark\\Node\\Block\\HtmlBlock::TYPE_4, \\League\\CommonMark\\Extension\\CommonMark\\Node\\Block\\HtmlBlock::TYPE_5_CDATA, \\League\\CommonMark\\Extension\\CommonMark\\Node\\Block\\HtmlBlock::TYPE_6_BLOCK_ELEMENT, \\League\\CommonMark\\Extension\\CommonMark\\Node\\Block\\HtmlBlock::TYPE_7_MISC_ELEMENT);\n    expectedArguments(\\League\\CommonMark\\Extension\\CommonMark\\Node\\Block\\HtmlBlock::__construct(), 0, argumentsSet('league_commonmark_htmlblock_types'));\n    expectedArguments(\\League\\CommonMark\\Extension\\CommonMark\\Node\\Block\\HtmlBlock::setType(), 0, argumentsSet('league_commonmark_htmlblock_types'));\n    expectedReturnValues(\\League\\CommonMark\\Extension\\CommonMark\\Node\\Block\\HtmlBlock::getType(), argumentsSet('league_commonmark_htmlblock_types'));\n    expectedArguments(\\League\\CommonMark\\Util\\RegexHelper::getHtmlBlockOpenRegex(), 0, argumentsSet('league_commonmark_htmlblock_types'));\n    expectedArguments(\\League\\CommonMark\\Util\\RegexHelper::getHtmlBlockCloseRegex(), 0, argumentsSet('league_commonmark_htmlblock_types'));\n\n    registerArgumentsSet('league_commonmark_newline_types', \\League\\CommonMark\\Node\\Inline\\Newline::HARDBREAK, \\League\\CommonMark\\Node\\Inline\\Newline::SOFTBREAK);\n    expectedArguments(\\League\\CommonMark\\Node\\Inline\\Newline::__construct(), 0, argumentsSet('league_commonmark_newline_types'));\n    expectedReturnValues(\\League\\CommonMark\\Node\\Inline\\Newline::getType(), argumentsSet('league_commonmark_newline_types'));\n\n    registerArgumentsSet('league_commonmark_options',\n        'html_input',\n        'allow_unsafe_links',\n        'max_nesting_level',\n        'max_delimiters_per_line',\n        'renderer',\n        'renderer/block_separator',\n        'renderer/inner_separator',\n        'renderer/soft_break',\n        'commonmark',\n        'commonmark/enable_em',\n        'commonmark/enable_strong',\n        'commonmark/use_asterisk',\n        'commonmark/use_underscore',\n        'commonmark/unordered_list_markers',\n        'disallowed_raw_html',\n        'disallowed_raw_html/disallowed_tags',\n        'external_link',\n        'external_link/html_class',\n        'external_link/internal_hosts',\n        'external_link/nofollow',\n        'external_link/noopener',\n        'external_link/noreferrer',\n        'external_link/open_in_new_window',\n        'footnote',\n        'footnote/backref_class',\n        'footnote/backref_symbol',\n        'footnote/container_add_hr',\n        'footnote/container_class',\n        'footnote/ref_class',\n        'footnote/ref_id_prefix',\n        'footnote/footnote_class',\n        'footnote/footnote_id_prefix',\n        'heading_permalink',\n        'heading_permalink/apply_id_to_heading',\n        'heading_permalink/heading_class',\n        'heading_permalink/html_class',\n        'heading_permalink/fragment_prefix',\n        'heading_permalink/id_prefix',\n        'heading_permalink/inner_contents',\n        'heading_permalink/insert',\n        'heading_permalink/max_heading_level',\n        'heading_permalink/min_heading_level',\n        'heading_permalink/symbol',\n        'heading_permalink/title',\n        'mentions',\n        'smartpunct/double_quote_closer',\n        'smartpunct/double_quote_opener',\n        'smartpunct/single_quote_closer',\n        'smartpunct/single_quote_opener',\n        'slug_normalizer',\n        'slug_normalizer/instance',\n        'slug_normalizer/max_length',\n        'slug_normalizer/unique',\n        'table',\n        'table/wrap',\n        'table/wrap/attributes',\n        'table/wrap/enabled',\n        'table/wrap/tag',\n        'table/alignment_attributes',\n        'table/alignment_attributes/left',\n        'table/alignment_attributes/center',\n        'table/alignment_attributes/right',\n        'table/max_autocompleted_cells',\n        'table_of_contents',\n        'table_of_contents/html_class',\n        'table_of_contents/max_heading_level',\n        'table_of_contents/min_heading_level',\n        'table_of_contents/normalize',\n        'table_of_contents/placeholder',\n        'table_of_contents/position',\n        'table_of_contents/style',\n    );\n    expectedArguments(\\League\\Config\\ConfigurationInterface::get(), 0, argumentsSet('league_commonmark_options'));\n    expectedArguments(\\League\\Config\\ConfigurationInterface::exists(), 0, argumentsSet('league_commonmark_options'));\n    expectedArguments(\\League\\Config\\MutableConfigurationInterface::set(), 0, argumentsSet('league_commonmark_options'));\n}\n"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 1.119140625,
          "content": "filter:\n    excluded_paths: [tests/*]\nbuild:\n    nodes:\n        analysis:\n            tests:\n                override:\n                    - php-scrutinizer-run\nchecks:\n    php:\n        code_rating: true\n        remove_extra_empty_lines: true\n        remove_php_closing_tag: true\n        remove_trailing_whitespace: true\n        fix_use_statements:\n            remove_unused: true\n            preserve_multiple: false\n            preserve_blanklines: true\n            order_alphabetically: true\n        fix_php_opening_tag: true\n        fix_linefeed: true\n        fix_line_ending: true\n        fix_identation_4spaces: true\n        fix_doc_comments: true\n        excluded_dependencies:\n            - commonmark/commonmark.js\ntools:\n    external_code_coverage:\n        timeout: 1800\n        runs: 2\n    php_analyzer: true\n    php_code_coverage: false\n    php_code_sniffer:\n        config:\n            standard: PSR2\n        filter:\n            paths: ['src']\n    php_cpd:\n        enabled: true\n        excluded_dirs: [vendor, tests]\n    php_loc:\n        enabled: true\n        excluded_dirs: [vendor, tests]\n    php_pdepend: true\n    php_sim: true\n\n"
        },
        {
          "name": ".styleci.yml",
          "type": "blob",
          "size": 0.0126953125,
          "content": "preset: psr1\n"
        },
        {
          "name": "CHANGELOG-0.x.md",
          "type": "blob",
          "size": 33.029296875,
          "content": "# Change Log\nAll notable changes to this project will be documented in this file.\nUpdates should follow the [Keep a CHANGELOG](https://keepachangelog.com/) principles.\n\n## [0.19.3] - 2019-06-18\n\n### Fixed\n\n - Fixed bug where elements with content of `\"0\"` wouldn't be rendered (#376)\n\n## [0.19.2] - 2019-05-19\n\n### Fixed\n\n - Fixed bug where default values for nested configuration paths were inadvertently cast to strings\n\n## [0.19.1] - 2019-04-10\n\n### Added\n\n - Added the missing `addExtension()` method to the new `ConfigurableEnvironmentInterface`\n\n### Fixed\n\n - Fixed extensions not being able to register other extensions\n\n## [0.19.0] - 2019-04-10\n\n### Added\n\n - The priority of parsers, processors, and renderers can now be set when `add()`ing them; you no longer need to rely on the order in which they are added\n - Added support for trying multiple parsers per block/inline\n - Extracted two new base interfaces from `Environment`:\n   - `EnvironmentInterface`\n   - `ConfigurableEnvironmentInterface`\n - Extracted a new `AbstractStringContainerBlock` base class and corresponding `StringContainerInterface` from `AbstractBlock`\n - Added `Cursor::getEncoding()` method\n - Added `.phpstorm.meta.php` file for better IDE code completion\n - Made some minor optimizations here and there\n\n### Changed\n\n - Pretty much everything now has parameter and return types (#346)\n - Attributes passed to `HtmlElement` will now be escaped by default\n - `Environment` is now a `final` class\n - `Environment::getBlockRendererForClass()` was replaced with `Environment::getBlockRenderersForClass()` (note the added `s`)\n - `Environment::getInlineRendererForClass()` was replaced with `Environment::getInlineRenderersForClass()` (note the added `s`)\n - The `Environment::get____()` methods now return an iterator instead of an array\n - `Context::addBlock()` no longer returns the same block instance you passed into the method, as this served no useful purpose\n - `RegexHelper::isEscapable()` no longer accepts `null` values\n - `Node::replaceChildren()` now accepts any type of `iterable`, not just `array`s\n - Some block elements now extend `AbstractStringContainerBlock` instead of `AbstractBlock`\n   - `InlineContainerInterface` now extends the new `StringContainerInterface`\n   - The `handleRemainingContents()` method (formerly on `AbstractBlock`, now on `AbstractStringContainerBlock`) is now an `abstract method\n   - The `InlineParserContext` constructor now requires an `AbstractStringContainerBlock` instead of an `AbstractBlock`\n\n### Removed\n\n - Removed support for PHP 5.6 and 7.0 (#346)\n - Removed support for `add()`ing parsers with just the target block/inline class name - you need to include the full namespace now\n - Removed the following unused methods from `Environment`:\n   - `getInlineParser($name)`\n   - `getInlineParsers()`\n   - `createInlineParserEngine()`\n - Removed the unused `getName()` methods:\n   - `AbstractBlockParser::getName()`\n   - `AbstractInlineParser::getName()`\n   - `BlockParserInterface::getName()`\n   - `InlinerParserInterface::getName()`\n - Removed the now-useless classes:\n   - `AbstractBlockParser`\n   - `AbstractInlinerParser`\n   - `InlineContainer`\n - Removed the `AbstractBlock::acceptsLines()` method\n - Removed the now-useless constructor from `AbstractBlock`\n - Removed previously-deprecated functionality:\n   - `InlineContainer` class\n   - `RegexHelper::$instance`\n   - `RegexHelper::getInstance()`\n   - `RegexHelper::getPartialRegex()`\n   - `RegexHelper::getHtmlTagRegex()`\n   - `RegexHelper::getLinkTitleRegex()`\n   - `RegexHelper::getLinkDestinationBracesRegex()`\n   - `RegexHelper::getThematicBreakRegex()`\n - Removed the second `$preserveEntities` parameter from `Xml:escape()`\n\n## [0.18.5] - 2019-03-28\n\n### Fixed\n\n - Fixed the adjoining `Text` collapser not handling the full tree (thephpleague/commonmark-ext-autolink#10)\n\n## [0.18.4] - 2019-03-23\n\n### Changed\n\n - Modified how URL normalization decodes certain characters in order to align with the JS library's output\n - Disallowed unescaped `(` in parenthesized link title\n\n### Fixed\n\n - Fixed two exponential backtracking issues\n\n## [0.18.3] - 2019-03-21\n\nThis is a **security update** release.\n\n### Changed\n\n - XML/HTML entities in attributes will no longer be preserved when rendering (#353)\n\n### Fixed\n\n - Fix XSS vulnerability caused by improper preservation of entities when rendering (#353)\n\n### Deprecated\n\n - Deprecated the `$preserveEntites` argument of `Xml::escape()` for removal in the next release (#353)\n\n## [0.18.2] - 2019-03-16\n\n### Fixed\n\n - Fixed adjoining `Text` elements not being collapsed after delimiter processing\n\n### Deprecated\n\n - Deprecated the `CommonmarkConverter::VERSION` constant for removal in 1.0.0\n\n## [0.18.1] - 2018-12-29\n\nThis is a **security update** release.\n\n### Fixed\n\n - Fix XSS vulnerability caused by URL normalization not handling/encoding newlines properly (#337, CVE-2018-20583)\n\n## [0.18.0] - 2018-09-18\n\n### Added\n\n - Added `ConverterInterface` to `Converter` and `CommonMarkConverter` (#330)\n - Added `ListItem::getListData()` method (#329)\n\n### Changed\n\n - Links with `target=\"_blank\"` will also get `rel=\"noopener noreferrer\"` by default (#331)\n - Implemented several performance optimizations (#324)\n\n## [0.17.5] - 2018-03-29\n\n### Fixed\n\n - Fixed incorrect version constant value (again)\n - Fixed release checklist to prevent the above from happening\n - Fixed incorrect dates in CHANGELOG\n\n## [0.17.4] - 2018-03-28\n\n### Added\n\n - Added `ListBlock::setTight()` method\n\n## [0.17.3] - 2018-03-26\n\n### Fixed\n\n - Fixed incorrect version constant value\n\n## [0.17.2] - 2018-03-25\n\n### Added\n\n - Added new `RegexHelper::isEscapable()` method\n\n### Fixed\n\n - Fixed spec compliance bug where escaped spaces should not be allowed in link destinations\n\n## [0.17.1] - 2018-03-18\n\n### Added\n\n - Added a new constant containing the current version: `CommonMarkConverter::VERSION` (#314)\n\n## [0.17.0] - 2017-12-30\n\nThis release contains several breaking changes and a minimum PHP version bump - see <UPGRADE.md> for more details.\n\n### Added\n\n - Added new `max_nesting_level` setting (#243)\n - Added minor performance optimizations to `Cursor`\n\n### Changed\n\n - Minimum PHP version is now 5.6.5.\n - All full and partial regular expressions in `RegexHelper` are now defined as constants instead of being built on-the-fly.\n - `Cursor::saveState()` now returns an `array` instead of a `CursorState` object.\n - `Cursor::restoreState()` now accepts an `array` parameter instead of a `CursorState` object.\n - Saving/restoring the Cursor state no longer tracks things that don't change (like the text content).\n - `RegexHelper` is now `final`.\n - References to `InlineContainer` changed to new `InlineContainerInterface` interface.\n - `MiscExtension::addInlineParser()` and `MiscExtension::addBlockRenderer()` now return `$this` instead of nothing.\n\n### Fixed\n - Fixed `Reference::normalizeReference()` not properly collapsing whitespace to a single space\n\n### Deprecated\n\n - `RegexHelper::getInstance()` and all instance (non-static) methods have been deprecated.\n - The `InlineContainer` interface has been deprecated. Use `InlineContainerInterface` instead.\n\n### Removed\n\n - Removed support for PHP 5.4 and 5.5.\n - Removed `CursorState` class\n - Removed all previous deprecations:\n   - `Cursor::getFirstNonSpacePosition()`\n   - `Cursor::getFirstNonSpaceCharacter()`\n   - `Cursor::advanceWhileMatches()`\n   - `Cursor::advanceToFirstNonSpace()`\n   - `ElementRendererInterface::escape()`\n   - `HtmlRenderer::escape()`\n   - `RegexHelper::REGEX_UNICODE_WHITESPACE`\n   - `RegexHelper::getLinkDestinationRegex()`\n\n## [0.16.0] - 2017-10-30\n\nThis release contains breaking changes, several performance improvements, and two deprecations:\n\n### Added\n\n - Added new `Xml` utility class; moved HTML/XML escaping logic into there (see deprecations below)\n\n### Changed\n\n - `Environment::getInlineParsersForCharacter()` now returns an empty array (instead of `null`) when no matching parsers are found\n - Three utility classes are now marked `final`:\n   - `Html5Entities`\n   - `LinkParserHelper`\n   - `UrlEncoder`\n\n### Fixed\n\n - Improved performance of several methods (for a 10% overall performance boost - #292)\n\n### Deprecated\n\nThe following methods were deprecated and are scheduled for removal in 0.17.0 or 1.0.0 (whichever comes first).  See <UPGRADE.md> for more information.\n\n - `Cursor::advanceWhileMatches()` deprecated; use `Cursor::match()` instead.\n - `HtmlRenderer::escape()` deprecated; use `Xml::escape()` instead.\n\n### Removed\n\n - Removed `DelimiterStack::findFirstMatchingOpener()` which was previously deprecated in 0.15.0\n\n## [0.15.7] - 2017-10-26\n\n### Fixed\n\n - Improved performance of `Cursor::advanceBy()` (for a 16% performance boost)\n\n## [0.15.6] - 2017-08-08\n\n### Fixed\n\n - Fixed URI normalization not properly encoding/decoding special characters in certain cases (#287)\n\n## [0.15.5] - 2017-08-05\n\nThis release bumps spec compliance to 0.28 without breaking changes to the API.\n\n### Added\n\n - Project is now tested against PHP 7.2\n\n### Changed\n\n - Bumped CommonMark spec target to 0.28\n - Changed internal implementation of `LinkParserHelper::parseLinkDestination()` to allow nested parens\n - Changed precedence of strong/emph when both nestings are possible (rule 14)\n - Allow tabs before and after ATX closing header\n\n### Fixed\n\n - Fixed HTML type 6 block regex matching against `<pre>` (it shouldn't) and not matching `<iframe>` (it should)\n - Fixed reference parser incorrectly handling escaped `]` characters\n - Fixed \"multiple of 3\" delimiter run calculations\n\n### Deprecated\n\nAn unused constant and static method were deprecated and will be removed in a future release.  See <UPGRADE.md> for more information.\n\n - Deprecated `RegexHelper::REGEX_UNICODE_WHITESPACE` (no longer used)\n - Deprecated `RegexHelper::getLinkDestinationRegex()` (no longer used)\n\n## [0.15.4] - 2017-05-09\n\n### Added\n\n - Added new methods to `Cursor` (#280):\n   - `advanceToNextNonSpaceOrNewline()` - Identical replacement for the (now-deprecated) `advanceToFirstNonSpace()` method\n   - `advanceToNextNonSpaceOrTab()` - Similar replacement for `advanceToFirstNonSpace()` but with proper tab handling\n   - `getNextNonSpaceCharacter()` - Identical replacement for the (now-deprecated) `getFirstNonSpaceCharacter()` method\n   - `getNextNonSpacePosition()` - Identical replacement for the (now-deprecated) `getFirstNonSpacePosition()` method\n - Added new method to `CursorState` (#280):\n   - `getNextNonSpaceCache()` - Identical replacement for the (now-deprecated) `getFirstNonSpaceCache()` method\n\n### Fixed\n\n - Fixed duplicate characters in non-intended lines containing tabs (#279)\n\n### Deprecated\n\n**All deprecations listed here will be removed in a future 0.x release.** See [UPGRADE.md](UPGRADE.md) for instructions on preparing your code for the eventual removal of these methods.\n\n - Deprecated `Cursor::advanceToFirstNonSpace()` (#280)\n   - Use `advanceToNextNonSpaceOrTab()` or `advanceToNextNonSpaceOrNewline()` instead, depending on your requirements\n - Deprecated `Cursor::getFirstNonSpaceCharacter()` (#280)\n   - Use `Cursor::getNextNonSpaceCharacter()` instead\n - Deprecated `Cursor::getFirstNonSpacePosition()` (#280)\n   - Use `Cursor::getNextNonSpacePosition()` instead\n - Deprecated `CursorState::getFirstNonSpaceCache()` (#280)\n   - Use `CursorState::getNextNonSpaceCache()` instead\n\n## [0.15.3] - 2016-12-18\n\n### Fixed\n - Allow inline parsers matching regex delimiter to be created (#271, #272)\n\n## [0.15.2] - 2016-11-22\n\n### Changed\n - Bumped spec target version to 0.27 (#268)\n - H2-H6 elements are now parsed as HTML block elements instead of HTML inlines\n\n### Fixed\n - Fixed incomplete punctuation regex\n - Fixed shortcut links not being allowed before a `(`\n - Fixed distinction between Unicode whitespace and regular whitespace\n\n## [0.15.1] - 2016-11-08\n\n### Fixed\n - Fixed setext heading underlines not allowing trailing tabs (#266)\n\n## [0.15.0] - 2016-09-14\n\n### Added\n - Added preliminary support for PHP 7.1 (#259)\n - Added more regression tests (#258, #260)\n\n### Changed\n - Bumped spec target version to 0.26 (#260)\n - The `CursorState` constructor requires an additional parameter (#258)\n - Ordered lists cannot interupt a paragraph unless they start with `1` (#260)\n - Blank list items cannot interupt a paragraph (#260)\n\n### Deprecated\n - Deprecated `DelimiterStack::findFirstMatchingOpener()` - use `findMatchingOpener()` instead (#260)\n\n### Fixed\n - Fixed tabs in ATX headers and thematic breaks (#260)\n - Fixed issue where cursor state was not being restored properly (#258, #260)\n   - This fixed the lists-with-tabs regression reported in #258\n\n### Removed\n - Removed an unnecessary check in `Cursor::advanceBy()` (#260)\n - Removed the two-blanks-break-out-of-lists feature (#260)\n\n\n## [0.14.0] - 2016-07-02\n### Added\n - The `safe` option is deprecated and replaced by 2 new options (#253, #255):\n   - `html_input` (`strip`, `allow` or `escape`): how to handle untrusted HTML input (the default is `strip` for BC reasons)\n   - `allow_unsafe_links` (`true` or `false`): whether to allow risky image URLs and links (the default is `true` for BC reasons)\n\n### Deprecated\n - The `safe` option is now deprecated and will be removed in the 1.0.0 release.\n\n## [0.13.4] - 2016-06-14\n\n### Fixed\n - Fixed path to `autoload.php` within bin/commonmark (#250)\n\n## [0.13.3] - 2016-05-21\n\n### Added\n - Added `setUrl()` method for `Link` and `Image` elements (#227, #244)\n - Added cebe/markdown to the benchmark tool (#245)\n\n## [0.13.2] - 2016-03-27\n\n### Added\n - Added ability to invoke `Converter` as a function (#233, #239)\n - Added new `advanceBySpaceOrTab` convenience method to `Cursor`\n\n### Changed\n - Bumped spec target version to 0.25\n - Adjusted how tabs are handled by the `Cursor` (#234)\n - Made a couple small micro-optimizations to heavily used functions (#240)\n - Updated URLs in docblocks to use HTTPS where possible (#238)\n\n## [0.13.1] - 2016-03-09\n\n### Changed\n - Refactored `EmphasisParser::parse()` to simplify it (#223)\n - Updated dev dependencies (#218 & #220)\n\n### Fixed\n - Fixed invalid regex generated when no inline parsers are defined (#224)\n - Fixed logic bug with blank line after empty list item (#230)\n - Fixed some incorrect code comments\n\n### Removed\n - Removed unused variables (#223)\n\n## [0.13.0] - 2016-01-13\n\n### Added\n - Added AST document processors (#210)\n - Added optional `Environment` parameter to `CommonMarkConverter` constructor\n\n### Changed\n - Renamed \"header\" things to \"heading\" for spec consistency\n   - `Header` => `Heading`\n   - `ATXHeaderParser` => `ATXHeadingParser`\n   - `SetExtHeaderParser` => `SetExtHeadingParser`\n   - `HeaderRenderer` => `HeadingRenderer`\n - Renamed \"HorizontalRule\" to \"ThematicBreak\" for spec consistency\n   - `HorizontalRule` => `ThematicBreak`\n   - `HorizontalRuleParser` => `ThematicBreakParser`\n   - `HorizontalRuleRenderer` => `ThematicBreakRenderer`\n   - `HorizontalRuleRendererTest` => `ThematicBreakRendererTest`\n   - `RegexHelper::getHRuleRegex()` => `RegexHelper::getThematicBreakRegex()`\n - Renamed inline \"Html\" and \"RawHtml\" to \"HtmlInline\" for consistency\n   - `Html` => `HtmlInline`\n   - `RawHtmlParser` => `HtmlInlineParser`\n   - `RawHtmlRenderer` => `HtmlInlineRenderer`\n - Don't allow whitespace between link text and link label of a reference link (spec change)\n - Don't allow spaces in link destinations, even in `<>`\n - Allow multiline setext header content\n   - The `Heading` constructor now allows `$contents` to be a `string` (old behavior) or `string[]` (new)\n\n### Fixed\n - Fixed several list issues and regressions (jgm/commonmark.js#59)\n\n### Removed\n - Removed schema whitelist from autolink regex\n - Moved SmartPunct functionality into new [league/commonmark-extras](https://github.com/thephpleague/commonmark-extras) package\n\n## [0.12.0] - 2015-11-04\n\n### Added\n - Added ability to configure characters and disable emphasis/strong (#135)\n - Added new ConfigurationAwareInterface support for all parsers, processors, and renderers (#201)\n - Added HTML safe mode to handle untrusted input (#200, #201)\n   - Safe mode is disabled by default for backwards-compatibility\n   - To enable it, set the `safe` option to `true`\n - Added AppVeyor integration for automated unit/functional testing on Windows (#195)\n\n### Changed\n - `AbstractBlock::finalize()` now requires a second parameter, `$endLineNumber`\n - `RegexHelper::REGEX_ENTITY` no longer includes the starting `/` or the ending `/i` (#194)\n - `Node::setParent()` now accepts null values (#203)\n\n### Fixed\n - Fixed incorrect `endLine` positions (#187)\n - Fixed `DocParser::preProcessInput` dropping up to 2 ending newlines instead of just one\n - Fixed `EntityParser` not checking for ampersands at the start of the current position (#192, #194)\n\n### Removed\n - Removed protected function Context::addChild()\n   - It was a duplicate of the Context::addBlock() method\n - Disabled STDIN reading on `bin/commonmark` for Windows due to PHP issues (#189, #195)\n\n## [0.11.3] - 2015-09-25\n### Fixed\n - Reset container after closing containing lists (#183; jgm/commonmark.js#67)\n   - The temporary fix from 0.11.2 was reverted\n\n## [0.11.2] - 2015-09-23\n### Fixed\n - Fixed parser checking acceptsLines on the wrong element (#183)\n\n## [0.11.1] - 2015-09-22\n### Changed\n - Tightened up some loose comparisons\n\n### Fixed\n - Fixed missing \"bin\" directive in composer.json\n - Updated a docblock to match recent changes to method parameters\n\n### Removed\n - Removed unused variable from within QuoteProcessor's closure\n\n## [0.11.0] - 2015-09-19\n### Added\n - Added new `Node` class, which both `AbstractBlock` and `AbstractInline` extend from (#169)\n - Added a `NodeWalker` and `NodeWalkerEvent` to traverse the AST without using recursion\n - Added new `InlineContainer` interface for blocks\n - Added new `getContainer()` and `getReferenceMap()` methods to `InlineParserContext`\n - Added `iframe` to whitelist of HTML block tags (as per spec)\n - Added `./bin/commonmark` for converting Markdown at the command line\n\n### Changed\n - Bumped spec target version to 0.22\n - Revised AST to use a double-linked list (#169)\n - `AbstractBlock` and `AbstractInline` both extend from `Node`\n   - Sub-classes must implement new `isContainer()` method\n - Other major changes to `AbstractBlock`:\n   - `getParent()` is now `parent()`\n   - `setParent()` now expects a `Node` instead of an `AbstractBlock`\n   - `getChildren()` is now `children()`\n   - `getLastChild()` is now `lastChild()`\n   - `addChild()` is now `appendChild()`\n - `InlineParserContext` is constructed using the container `AbstractBlock` and the document's `RefereceMap`\n   - The constructor will automatically create the `Cursor` using the container's string contents\n - `InlineParserEngine::parse` now requires the `Node` container and the document's `ReferenceMap` instead of a `ContextInterface` and `Cursor`\n - Changed `Delimiter` to reference the actual inline `Node` instead of the position\n   - The `int $pos` protected member and constructor arg is now `Node $node`\n   - Use `getInlineNode()` and `setInlineNode()` instead of `getPos()` and `setPos()`\n - Changed `DocParser::processInlines` to use a `NodeWalker` to iterate through inlines\n   - Walker passed as second argument instead of `AbstractBlock`\n   - Uses a `while` loop instead of recursion to traverse the AST\n - `Image` and `Link` now only accept a string as their second argument\n - Refactored how `CloseBracketParser::parse()` works internally\n - `CloseBracketParser::createInline` no longer accepts label inlines\n - Disallow list item starting with multiple blank lines (see jgm/CommonMark#332)\n - Modified `AbstractBlock::setLastLineBlank()`\n   - Functionality moved to `AbstractBlock::shouldLastLineBeBlank()` and new `DocParser::setAndPropagateLastLineBlank()` method\n   - `AbstractBlock::setLastLineBlank()` is now a setter method for `AbstractBlock::$lastLineBlank`\n - `AbstractBlock::handleRemainingContents()` is no longer abstract\n   - A default implementation is provided\n   - Removed duplicate code from sub-classes which used the default implementation - they'll just use the parent method from now on\n\n### Fixed\n - Fixed logic error in calculation of offset (see jgm/commonmark.js@94053a8)\n - Fixed bug where `DocParser` checked the wrong method to determine remainder handling behavior\n - Fixed bug where `HorizontalRuleParser` failed to advance the cursor beyond the parsed horizontal rule characters\n - Fixed `DocParser` not ignoring the final newline of the input (like the reference parser does)\n\n### Removed\n - Removed `Block\\Element\\AbstractInlineContainer`\n   - Extend `AbstractBlock` and implement `InlineContainer` instead\n   - Use child methods instead of `getInlines` and `setInlines`\n - Removed `AbstractBlock::replaceChild()`\n   - Call `Node::replaceWith()` directly the child node instead\n - Removed the `getInlines()` method from `InlineParserContext`\n   - Add parsed inlines using `$inlineContext->getContainer()->appendChild()` instead of `$inlineContext->getInlines()->add()`\n - Removed the `ContextInterface` argument from `AbstractInlineParser::parse()` and `InlineParserEngine::parseCharacter`\n - Removed the first `ArrayCollection $inlines` argument from `InlineProcessorInterface::processInlines()`\n - Removed `CloseBracketParser::nullify()`\n - Removed `pre` from rule 6 of HTML blocks (see jgm/CommonMark#355)\n\n## [0.10.0] - 2015-07-25\n### Added\n - Added parent references to inline elements (#124)\n - Added smart punctuation extension (#134)\n - Added HTML block types\n - Added indentation caching to the cursor\n - Added automated code style checks (#133)\n - Added support for tag attributes in renderers (#101, #165)\n\n### Changed\n - Bumped spec target version to 0.21\n - Revised HTML block parsing to conform to new spec (jgm/commonmark.js@99bd473)\n - Imposed 9-digit limit on ordered list markers, per spec\n - Allow non-initial hyphens in html tag names (jgm/CommonMark#239)\n - Updated list of block tag names\n - Changed tab/indentation handling to meet the new spec behavior\n - Modified spec tests to show spaces and tabs in test results\n - Replaced `HtmlRendererInterface` with `ElementRendererInterface` (#141)\n - Removed the unnecessary `trim()` and string cast from `ListItemRenderer`\n\n### Fixed\n - Fixed link reference definition edge case (#120)\n - Allow literal (non-escaping) backslashes in link destinations (#118)\n - Allow backslash-escaped backslashes in link labels (#119)\n - Allow link labels up to 999 characters (per the spec)\n - Properly split on whitespace when determining code block class (jgm/commonmark.js#54)\n - Fixed code style issues (#132, #133, #151, #152)\n - Fixed wording for invalid inline exception (#136)\n\n### Removed\n - Removed the advance-by-one optimization due to added cursor complexity\n\n## [0.9.0] - 2015-06-18\n### Added\n - Added public $data array to block elements (#95)\n - Added `isIndented` helper method to `Cursor`\n - Added a new `Converter` base class which `CommonMarkConverter` extends from (#105)\n\n### Changed\n - Bumped spec target version to 0.20 (#112)\n - Renamed ListBlock::$data and ListItem::$data to $listData\n - Require link labels to contain non-whitespace (jgm/CommonMark#322)\n - Use U+FFFD for entities resolving to 0 (jgm/CommonMark#323)\n - Moved `IndentedCodeParser::CODE_INDENT_LEVEL` to `Cursor::INDENT_LEVEL`\n - Changed arrays to short syntax (#116)\n - Improved efficiency of DelimiterStack iteration (jgm/commonmark.js#43)\n\n### Fixed\n - Fixed open block tag followed by newline not being recognized (jgm/CommonMark#324)\n - Fixed indented lists sometimes being parsed incorrectly (jgm/commonmark.js#42)\n\n## [0.8.0] - 2015-04-29\n### Added\n - Allow swapping built-in renderers without using their fully qualified names (#84)\n - Lots of unit tests (for existing code)\n - Ability to include arbitrary functional tests in addition to spec-based tests\n\n### Changed\n - Dropped support for PHP 5.3 (#64 and #76)\n - Bumped spec target version to 0.19\n - Made the AbstractInlineContainer be abstract\n - Moved environment config. logic into separate class\n\n### Fixed\n - Fixed underscore emphasis to conform to spec changes (jgm/CommonMark#317)\n\n### Removed\n - Removed PHP 5.3 workaround (see commit 5747822)\n - Removed unused AbstractWebResource::setUrl() method\n - Removed unnecessary check for hrule when parsing lists (#85)\n\n## [0.7.2] - 2015-03-08\n### Changed\n - Bumped spec target version to 0.18\n\n### Fixed\n - Fixed broken parsing of emphasized text ending with a '0' character (#81)\n\n## [0.7.1] - 2015-03-01\n### Added\n - All references can now be obtained from the `ReferenceMap` via `listReferences()` (#73)\n - Test against PHP 7.0 (nightly) but allow failures\n\n### Changed\n - ListData::$start now defaults to null instead of 0 (#74)\n - Replace references to HtmlRenderer with new HtmlRendererInterface\n\n### Fixed\n - Fixed 0-based ordered lists starting at 1 instead of 0 (#74)\n - Fixed errors parsing multi-byte characters (#78 and #79)\n\n## [0.7.0] - 2015-02-16\n### Added\n - More unit tests to increase code coverage\n\n### Changed\n - Enabled the InlineParserEngine to parse several non-special characters at once (performance boost)\n - NewlineParser no longer attempts to parse spaces; look-behind is used instead (major performance boost)\n - Moved closeUnmatchedBlocks into its own class\n - Image and link elements now extend AbstractInlineContainer; label data is stored via $inlineContents instead\n - Renamed AbstractInlineContainer::$inlineContents and its getter/setter\n\n### Removed\n - Removed the InlineCollection class\n - Removed the unused ArrayCollection::splice() method\n - Removed impossible-to-reach code in Cursor::advanceToFirstNonSpace\n - Removed unnecessary test from the InlineParserEngine\n - Removed unnecessary/unused RegexHelper::getMainRegex() method\n\n## [0.6.1] - 2015-01-25\n### Changed\n - Bumped spec target version to 0.17\n - Updated emphasis parsing for underscores to prevent intra-word emphasis\n - Deferred closing of fenced code blocks\n\n## [0.6.0] - 2015-01-09\n### Added\n - Bulk registration of parsers/renderers via extensions (#45)\n - Proper UTF-8 support, especially in the Cursor; mbstring extension is now required (#49)\n - Environment is now configurable; options can be accessed in its parsers/renderers (#56)\n - Added some unit tests\n\n### Changed\n - Bumped spec target version to 0.15 (#50)\n - Parsers/renderers are now lazy-initialized (#52)\n - Some private elements are now protected for easier extending, especially on Element classes (#53)\n - Renderer option keys changed from camelCase to underscore_case (#56)\n - Moved CommonMark parser/render definitions into CommonMarkCoreExtension\n\n### Fixed\n - Improved parsing of emphasis around punctuation\n - Improved regexes for CDATA and HTML comments\n - Fixed issue with HTML content that is considered false in loose comparisons, like `'0'` (#55)\n - Fixed DocParser trying to add empty strings to closed containers (#58)\n - Fixed incorrect use of a null parameter value in the HtmlElementTest\n\n### Removed\n - Removed unused ReferenceDefinition* classes (#51)\n - Removed UnicodeCaseFolder in favor of mb_strtoupper\n\n## [0.5.1] - 2014-12-27\n### Fixed\n - Fixed infinite loop and link-in-link-in-image parsing (#37)\n\n### Removed\n - Removed hard dependency on mbstring extension; workaround used if not installed (#38)\n\n## [0.5.0] - 2014-12-24\n### Added\n - Support for custom directives, parsers, and renderers\n\n### Changed\n - Major refactoring to de-couple directives from the parser, support custom directive functionality, and reduce complexity\n - Updated references to stmd.js in README and docblocks\n - Modified CHANGELOG formatting\n - Improved travis configuration\n - Put tests in autoload-dev\n\n### Fixed\n - Fixed CommonMarkConverter re-creating object each time new text is converted (#26)\n\n### Removed\n - Removed HtmlRenderer::render() (use the renderBlock method instead)\n - Removed dependency on symfony/options-resolver (fixes #20)\n\n## [0.4.0] - 2014-12-15\n### Added\n - Added some missing copyright info\n\n### Changed\n - Changed namespace to League\\CommonMark\n - Made compatible with spec version 0.13\n - Moved delimiter stack functionality into separate class\n\n### Fixed\n - Fixed regex which caused HHVM tests to fail\n\n## [0.3.0] - 2014-11-28\n### Added\n - Made renderer options configurable (issue #7)\n\n### Changed\n - Made compatible with spec version 0.12\n - Stack-based parsing now used for emphasis, links and images\n - Protected some of the internal renderer methods which shouldn't have been `public`\n - Minor code clean-up (including PSR-2 compliance)\n\n### Removed\n - Removed unnecessary distinction between ATX and Setext headers\n\n## [0.2.1] - 2014-11-09\n### Added\n - Added simpler string replacement to a method\n\n### Changed\n - Removed \"is\" prefix from boolean methods\n * Updated to latest version of PHPUnit\n * Target specific spec version\n\n## [0.2.0] - 2014-11-09\n### Changed\n - Mirrored significant changes and improvements from stmd.js\n - Made compatible with spec version 0.10\n - Updated location of JGM's repository\n - Allowed HHVM tests to fail without affecting overall build success\n\n### Removed\n - Removed composer.lock\n - Removed fixed reference to jgm/stmd@0275f34\n\n## [0.1.2] - 2014-09-28\n### Added\n - Added performance benchmarking tool (issue #2)\n - Added more badges to the README\n\n### Changed\n - Fix JS -> PHP null judgement (issue #4)\n - Updated phpunit dependency\n\n## [0.1.1] - 2014-09-08\n### Added\n - Add anchors to regexes\n\n### Changed\n - Updated target spec (now compatible with jgm/stmd:spec.txt @ 2cf0750)\n - Adjust HTML output for fenced code\n - Adjust block-level tag regex (remove \"br\", add \"iframe\")\n - Fix incorrect handling of nested emphasis\n\n## 0.1.0\n### Added\n - Initial commit (compatible with jgm/stmd:spec.txt @ 0275f34)\n\n[0.19.3]: https://github.com/thephpleague/commonmark/compare/0.19.2...0.19.3\n[0.19.2]: https://github.com/thephpleague/commonmark/compare/0.19.1...0.19.2\n[0.19.1]: https://github.com/thephpleague/commonmark/compare/0.19.0...0.19.1\n[0.19.0]: https://github.com/thephpleague/commonmark/compare/0.18.5...0.19.0\n[0.18.5]: https://github.com/thephpleague/commonmark/compare/0.18.4...0.18.5\n[0.18.4]: https://github.com/thephpleague/commonmark/compare/0.18.3...0.18.4\n[0.18.3]: https://github.com/thephpleague/commonmark/compare/0.18.2...0.18.3\n[0.18.2]: https://github.com/thephpleague/commonmark/compare/0.18.1...0.18.2\n[0.18.1]: https://github.com/thephpleague/commonmark/compare/0.18.0...0.18.1\n[0.18.0]: https://github.com/thephpleague/commonmark/compare/0.17.5...0.18.0\n[0.17.5]: https://github.com/thephpleague/commonmark/compare/0.17.4...0.17.5\n[0.17.4]: https://github.com/thephpleague/commonmark/compare/0.17.3...0.17.4\n[0.17.3]: https://github.com/thephpleague/commonmark/compare/0.17.2...0.17.3\n[0.17.2]: https://github.com/thephpleague/commonmark/compare/0.17.1...0.17.2\n[0.17.1]: https://github.com/thephpleague/commonmark/compare/0.17.0...0.17.1\n[0.17.0]: https://github.com/thephpleague/commonmark/compare/0.16.0...0.17.0\n[0.16.0]: https://github.com/thephpleague/commonmark/compare/0.15.7...0.16.0\n[0.15.7]: https://github.com/thephpleague/commonmark/compare/0.15.6...0.15.7\n[0.15.6]: https://github.com/thephpleague/commonmark/compare/0.15.5...0.15.6\n[0.15.5]: https://github.com/thephpleague/commonmark/compare/0.15.4...0.15.5\n[0.15.4]: https://github.com/thephpleague/commonmark/compare/0.15.3...0.15.4\n[0.15.3]: https://github.com/thephpleague/commonmark/compare/0.15.2...0.15.3\n[0.15.2]: https://github.com/thephpleague/commonmark/compare/0.15.1...0.15.2\n[0.15.1]: https://github.com/thephpleague/commonmark/compare/0.15.0...0.15.1\n[0.15.0]: https://github.com/thephpleague/commonmark/compare/0.14.0...0.15.0\n[0.14.0]: https://github.com/thephpleague/commonmark/compare/0.13.4...0.14.0\n[0.13.4]: https://github.com/thephpleague/commonmark/compare/0.13.3...0.13.4\n[0.13.3]: https://github.com/thephpleague/commonmark/compare/0.13.2...0.13.3\n[0.13.2]: https://github.com/thephpleague/commonmark/compare/0.13.1...0.13.2\n[0.13.1]: https://github.com/thephpleague/commonmark/compare/0.13.0...0.13.1\n[0.13.0]: https://github.com/thephpleague/commonmark/compare/0.12.0...0.13.0\n[0.12.0]: https://github.com/thephpleague/commonmark/compare/0.11.3...0.12.0\n[0.11.3]: https://github.com/thephpleague/commonmark/compare/0.11.2...0.11.3\n[0.11.2]: https://github.com/thephpleague/commonmark/compare/0.11.1...0.11.2\n[0.11.1]: https://github.com/thephpleague/commonmark/compare/0.11.0...0.11.1\n[0.11.0]: https://github.com/thephpleague/commonmark/compare/0.10.0...0.11.0\n[0.10.0]: https://github.com/thephpleague/commonmark/compare/0.9.0...0.10.0\n[0.9.0]: https://github.com/thephpleague/commonmark/compare/0.8.0...0.9.0\n[0.8.0]: https://github.com/thephpleague/commonmark/compare/0.7.2...0.8.0\n[0.7.2]: https://github.com/thephpleague/commonmark/compare/0.7.1...0.7.2\n[0.7.1]: https://github.com/thephpleague/commonmark/compare/0.7.0...0.7.1\n[0.7.0]: https://github.com/thephpleague/commonmark/compare/0.6.1...0.7.0\n[0.6.1]: https://github.com/thephpleague/commonmark/compare/0.6.0...0.6.1\n[0.6.0]: https://github.com/thephpleague/commonmark/compare/0.5.1...0.6.0\n[0.5.1]: https://github.com/thephpleague/commonmark/compare/0.5.0...0.5.1\n[0.5.0]: https://github.com/thephpleague/commonmark/compare/0.4.0...0.5.0\n[0.4.0]: https://github.com/thephpleague/commonmark/compare/0.3.0...0.4.0\n[0.3.0]: https://github.com/thephpleague/commonmark/compare/0.2.1...0.3.0\n[0.2.1]: https://github.com/thephpleague/commonmark/compare/0.2.0...0.2.1\n[0.2.0]: https://github.com/thephpleague/commonmark/compare/0.1.2...0.2.0\n[0.1.2]: https://github.com/thephpleague/commonmark/compare/0.1.1...0.1.2\n[0.1.1]: https://github.com/thephpleague/commonmark/compare/0.1.0...0.1.1\n"
        },
        {
          "name": "CHANGELOG-1.x.md",
          "type": "blob",
          "size": 19.9140625,
          "content": "# Change Log\nAll notable changes to this project will be documented in this file.\nUpdates should follow the [Keep a CHANGELOG](https://keepachangelog.com/) principles.\n\n## [Unreleased][unreleased]\n\n## [1.6.7] - 2022-01-13\n\n### Changed\n\n- Added `ReturnTypeWillChange` attribute to prevent PHP 8.1 deprecation warnings (#785)\n- Coerced punctuation counts to integers to ensure floats are never used\n\n## [1.6.6] - 2021-07-17\n\n### Fixed\n\n- Fixed Mentions inside of links creating nested links against the spec's rules (#688)\n\n## [1.6.5] - 2021-06-26\n\n### Changed\n\n- Simplified checks for thematic breaks\n\n### Fixed\n\n- Fixed ExternalLinkProcessor not handling autolinks by adjusting its priority to -50 (#681)\n\n## [1.6.4] - 2021-06-19\n\n### Changed\n\n- Optimized attribute parsing to avoid inspecting every space character (30% performance boost)\n\n## [1.6.3] - 2021-06-19\n\n### Fixed\n\n- Fixed incorrect parsing of tilde-fenced code blocks with leading spaces (#676)\n\n## [1.6.2] - 2021-05-12\n\n### Fixed\n\n- Fixed incorrect error level for deprecation notices\n\n## [1.6.1] - 2021-05-08\n\n### Fixed\n\n- Fixed `HeadingPermalinkProcessor` skipping text contents from certain nodes (#615)\n\n## [1.6.0] - 2021-05-01\n\n### Added\n\n - Added forward-compatibility for [configuration options which will be changing in 2.0](https://commonmark.thephpleague.com/1.6/upgrading/):\n    - `commonmark/enable_em` (currently `enable_em` in 1.x)\n    - `commonmark/enable_strong` (currently `enable_strong` in 1.x)\n    - `commonmark/use_asterisk` (currently `use_asterisk` in 1.x)\n    - `commonmark/use_underscore` (currently `use_underscore` in 1.x)\n    - `commonmark/unordered_list_markers` (currently `unordered_list_markers` in 1.x)\n    - `mentions/*/prefix` (currently `mentions/*/symbol` in 1.x)\n    - `mentions/*/pattern` (currently `mentions/*/regex` in 1.x)\n    - `max_nesting_level` (currently supports `int` and `float` values in 1.x; will only support `int` in 2.0)\n - Added new `MarkdownConverter` class for creating converters with custom environments; this replaces the previously-deprecated `Converter` class\n - Added new `RegexHelper::matchFirst()` method\n - Added new `Configuration::exists()` method\n\n### Changed\n\n - The `max_nesting_level` option now defaults to `PHP_INT_MAX` instead of `INF`\n\n### Deprecated\n\n - Deprecated the [configuration options shown above](https://commonmark.thephpleague.com/1.6/upgrading/)\n - Deprecated the ability to pass a custom `Environment` into the constructors of `CommonMarkConverter` and `GithubFlavoredMarkdownConverter`; use `MarkdownConverter` instead\n - Deprecated `ConfigurableEnvironmentInterface::setConfig()`; use `mergeConfig()` instead\n - Deprecated calling `ConfigurableEnvironmentInterface::mergeConfig()` without any parameters\n - Deprecated calling `Configuration::get()` and `EnvironmentInterface::getConfig()` without any parameters\n - Deprecated calling `Configuration::set()` without the second `$value` parameter\n - Deprecated `RegexHelper::matchAll()`; use `RegexHelper::matchFirst()` instead\n - Deprecated extending the `ArrayCollection` class; will be marked `final` in 2.0\n\n### Fixed\n\n - Fixed missing check for empty arrays being passed into the `unordered_list_markers` configuration option\n\n## [1.5.8] - 2021-03-28\n\n### Fixed\n\n - Fixed Table of Contents not rendering heading inlines properly (#587, #588)\n - Fixed parsing of tables within list items (#590)\n\n## [1.5.7] - 2020-10-31\n\n### Fixed\n\n - Fixed mentions not being parsed when appearing after non-word characters (#582)\n\n## [1.5.6] - 2020-10-17\n\n### Changed\n\n - Blocks added outside of the parsing context now have their start/end line numbers defaulted to 0 to avoid type errors (#579)\n\n### Fixed\n\n - Fixed replacement blocks not inheriting the start line number of the container they're replacing (#579)\n - Fixed Table of Contents blocks not having correct start/end line numbers (#579)\n\n## [1.5.5] - 2020-09-13\n\n### Changed\n\n - Bumped CommonMark spec compliance to 0.28.2\n\n### Fixed\n\n - Fixed `textarea` elements not being treated as a type 1 HTML block (like `script`, `style`, or `pre`)\n - Fixed autolink processor not handling other unmatched trailing parentheses\n\n## [1.5.4] - 2020-08-17\n\n### Fixed\n\n - Fixed footnote ID configuration not taking effect (#524, #530)\n - Fixed heading permalink slugs not being unique (#531, #534)\n\n## [1.5.3] - 2020-07-19\n\n### Fixed\n\n - Fixed regression of multi-byte inline parser characters not being matched\n\n## [1.5.2] - 2020-07-19\n\n### Changed\n\n - Significantly improved performance of the inline parser regex\n\n### Fixed\n\n - Fixed parent class lookups for non-existent classes on PHP 8 (#517)\n\n## [1.5.1] - 2020-06-27\n\n### Fixed\n\n - Fixed UTF-8 encoding not being checked in the `UrlEncoder` utility (#509) or the `Cursor`\n\n## [1.5.0] - 2020-06-21\n\n### Added\n\n - Added new `AttributesExtension` based on <https://github.com/webuni/commonmark-attributes-extension> (#474)\n - Added new `FootnoteExtension` based on <https://github.com/rezozero/commonmark-ext-footnotes> (#474)\n - Added new `MentionExtension` to replace `InlineMentionParser` with more flexibility and customization\n - Added the ability to render `TableOfContents` nodes anywhere in a document (given by a placeholder)\n - Added the ability to properly clone `Node` objects\n - Added options to customize the value of `rel` attributes set via the `ExternalLink` extension (#476)\n - Added a new `heading_permalink/slug_normalizer` configuration option to allow custom slug generation (#460)\n - Added a new `heading_permalink/symbol` configuration option to replace the now deprecated `heading_permalink/inner_contents` configuration option (#505)\n - Added `SlugNormalizer` and `TextNormalizer` classes to make normalization reusable by extensions (#485)\n - Added new classes:\n   - `TableOfContentsGenerator`\n   - `TableOfContentsGeneratorInterface`\n   - `TableOfContentsPlaceholder`\n   - `TableOfContentsPlaceholderParser`\n   - `TableOfContentsPlaceholderRenderer`\n\n### Changed\n\n - \"Moved\" the `TableOfContents` class into a new `Node` sub-namespace (with backward-compatibility)\n - Reference labels are now generated and stored in lower-case instead of upper-case\n - Reference labels are no longer normalized inside the `Reference`, only the `ReferenceMap`\n\n### Fixed\n\n - Fixed reference label case folding polyfill not being consistent between different PHP versions\n\n### Deprecated\n\n - Deprecated the `CommonMarkConverter::VERSION` constant (#496)\n - Deprecated `League\\CommonMark\\Extension\\Autolink\\InlineMentionParser` (use `League\\CommonMark\\Extension\\Mention\\MentionParser` instead)\n - Deprecated everything under `League\\CommonMark\\Extension\\HeadingPermalink\\Slug` (use the classes under `League\\CommonMark\\Normalizer` instead)\n - Deprecated `League\\CommonMark\\Extension\\TableOfContents\\TableOfContents` (use the one in the new `Node` sub-namespace instead)\n - Deprecated the `STYLE_` and `NORMALIZE_` constants in `TableOfContentsBuilder` (use the ones in `TableOfContentsGenerator` instead)\n - Deprecated the `\\League\\CommonMark\\Extension\\HeadingPermalink\\HeadingPermalinkRenderer::DEFAULT_INNER_CONTENTS` constant (#505)\n - Deprecated the `heading_permalink/inner_contents` configuration option in the `HeadingPermalink` extension (use the new `heading_permalink/symbol` configuration option instead) (#505)\n\n## [1.4.3] - 2020-05-04\n\n### Fixed\n\n - Fixed certain Unicode letters, numbers, and marks not being preserved when generating URL slugs (#467)\n\n## [1.4.2] - 2020-04-24\n\n### Fixed\n\n - Fixed inline code blocks not be included within heading permalinks (#457)\n\n## [1.4.1] - 2020-04-20\n\n### Fixed\n\n - Fixed BC break caused by ConverterInterface alias not being used by some DI containers (#454)\n\n## [1.4.0] - 2020-04-18\n\n### Added\n\n - Added new [Heading Permalink extension](https://commonmark.thephpleague.com/extensions/heading-permalinks/) (#420)\n - Added new [Table of Contents extension](https://commonmark.thephpleague.com/extensions/table-of-contents/) (#441)\n - Added new `MarkdownConverterInterface` as a long-term replacement for `ConverterInterface` (#439)\n - Added new `DocumentPreParsedEvent` event (#427, #359, #399)\n - Added new `ListBlock::TYPE_BULLET` constant as a replacement for `ListBlock::TYPE_UNORDERED`\n - Added new `MarkdownInput` class and `MarkdownInputInterface` to handle pre-parsing and allow listeners to replace Markdown contents\n\n### Changed\n\n - Block & inline renderers will now render child classes automatically (#222, #209)\n - The `ListBlock` constants now use fully-lowercased values instead of titlecased values\n - Significantly improved typing\n\n### Fixed\n\n - Fixed loose comparison when checking for table alignment\n - Fixed `StaggeredDelimiterProcessor` returning from a `void` function\n\n### Deprecated\n\n - The `Converter` class has been deprecated; use `CommonMarkConverter` instead (#438, #439)\n - The `ConverterInterface` has been deprecated; use `MarkdownConverterInterface` instead (#438, #439)\n - The `bin/commonmark` script has been deprecated\n - The following methods of `ArrayCollection` have been deprecated:\n   - `add()`\n   - `set()`\n   - `get()`\n   - `remove()`\n   - `isEmpty()`\n   - `contains()`\n   - `indexOf()`\n   - `containsKey()`\n   - `replaceWith()`\n   - `removeGaps()`\n - The `ListBlock::TYPE_UNORDERED` constant has been deprecated, use `ListBlock::TYPE_BULLET` instead\n\n## [1.3.4] - 2020-04-13\n\n### Fixed\n\n - Fixed configuration/environment not being injected into event listeners when adding them via `[$instance, 'method']` callable syntax (#440)\n\n## [1.3.3] - 2020-04-05\n\n### Fixed\n\n - Fixed event listeners not having the environment or configuration injected if they implemented the `EnvironmentAwareInterface` or `ConfigurationAwareInterface` (#423)\n\n## [1.3.2] - 2020-03-25\n\n### Fixed\n\n - Optimized URL normalization in cases where URLs don't contain special characters (#417, #418)\n\n## [1.3.1] - 2020-02-28\n\n### Fixed\n\n - Fixed return types of `Environment::createCommonMarkEnvironment()` and `Environment::createGFMEnvironment()`\n\n## [1.3.0] - 2020-02-08\n\n### Added\n\n - Added (optional) **full GFM support!** 🎉🎉🎉 (#409)\n - Added check to ensure Markdown input is valid UTF-8 (#401, #405)\n - Added new `unordered_list_markers` configuration option (#408, #411)\n\n### Changed\n\n - Introduced several micro-optimizations for a 5-10% performance boost\n\n## [1.2.2] - 2020-01-15\n\nThis release contains the same changes as 1.1.3:\n\n### Fixed\n\n - Fixed link parsing edge case (#403)\n\n## [1.1.3] - 2020-01-15\n\n### Fixed\n\n - Fixed link parsing edge case (#403)\n\n## [1.2.1] - 2020-01-14\n\n### Changed\n\n - Introduced several micro-optimizations, reducing the parse time by 8%\n\n## [1.2.0] - 2020-01-09\n\n### Changed\n\n - Removed URL decoding step before encoding (more performant and better matches the JS library)\n - Removed redundant token from HTML tag regex\n\n## [1.1.2] - 2019-12-09\n\n### Fixed\n\n - Fixed URL normalization not handling non-UTF-8 sequences properly (#395, #396)\n\n## [1.1.1] - 2019-11-11\n\n### Fixed\n\n - Fixed handling of link destinations with unbalanced unescaped parens\n - Fixed adding delimiters to stack which can neither open nor close a run\n\n## [1.1.0] - 2019-10-31\n\n### Added\n\n - Added a new `Html5EntityDecoder` class (#387)\n\n### Changed\n\n - Improved performance by 10% (#389)\n - Made entity decoding less memory-intensive (#386, #387)\n\n### Fixed\n\n - Fixed PHP 7.4 compatibility issues\n\n### Deprecated\n\n - Deprecated the `Html5Entities` class - use `Html5EntityDecoder` instead (#387)\n\n## [1.0.0] - 2019-06-29\n\nNo changes were made since 1.0.0-rc1.\n\n## [1.0.0-rc1] - 2019-06-19\n\n### Added\n\n - Extracted a `ReferenceMapInterface` from the `ReferenceMap` class\n - Added optional `ReferenceMapInterface` parameter to the `Document` constructor\n\n### Changed\n\n - Replaced all references to `ReferenceMap` with `ReferenceMapInterface`\n - `ReferenceMap::addReference()` no longer returns `$this`\n\n### Fixed\n\n - Fixed bug where elements with content of `\"0\"` wouldn't be rendered (#376)\n\n## [1.0.0-beta4] - 2019-06-05\n\n### Added\n\n - Added event dispatcher functionality (#359, #372)\n\n### Removed\n\n - Removed `DocumentProcessorInterface` functionality in favor of event dispatching (#373)\n\n## [1.0.0-beta3] - 2019-05-27\n\n### Changed\n\n - Made the `Delimiter` class final and extracted a new `DelimiterInterface`\n   - Modified most external usages to use this new interface\n - Renamed three `Delimiter` methods:\n   - `getOrigDelims()` renamed to `getOriginalLength()`\n   - `getNumDelims()` renamed to `getLength()`\n   - `setNumDelims()` renamed to `setLength()`\n - Made additional classes final:\n   - `DelimiterStack`\n   - `ReferenceMap`\n   - `ReferenceParser`\n - Moved `ReferenceParser` into the `Reference` sub-namespace\n\n### Removed\n\n - Removed unused `Delimiter` methods:\n   - `setCanOpen()`\n   - `setCanClose()`\n   - `setChar()`\n   - `setIndex()`\n   - `setInlineNode()`\n - Removed fluent interface from `Delimiter` (setter methods now have no return values)\n\n## [1.0.0-beta2] - 2019-05-27\n\n### Changed\n\n - `DelimiterProcessorInterface::process()` will accept any type of `AbstractStringContainer` now, not just `Text` nodes\n - The `Delimiter` constructor, `getInlineNode()`, and `setInlineNode()` no longer accept generic `Node` elements - only `AbstractStringContainer`s\n\n\n### Removed\n\n - Removed all deprecated functionality:\n   - The `safe` option (use `html_input` and `allow_unsafe_links` options instead)\n   - All deprecated `RegexHelper` constants\n   - `DocParser::getEnvironment()` (you should obtain it some other way)\n   - `AbstractInlineContainer` (use `AbstractInline` instead and make `isContainer()` return `true`)\n\n## [1.0.0-beta1] - 2019-05-26\n\n### Added\n\n - Added proper support for delimiters, including custom delimiters\n   - `addDelimiterProcessor()` added to `ConfigurableEnvironmentInterface` and `Environment`\n - Basic delimiters no longer need custom parsers - they'll be parsed automatically\n - Added new methods:\n   - `AdjacentTextMerger::mergeTextNodesBetweenExclusive()`\n   - `CommonMarkConveter::getEnvironment()`\n   - `Configuration::set()`\n - Extracted some new interfaces from base classes:\n   - `DocParserInterface` created from `DocParser`\n   - `ConfigurationInterface` created from `Configuration`\n   - `ReferenceInterface` created from `Reference`\n\n### Changed\n\n - Renamed several methods of the `Configuration` class:\n   - `getConfig()` renamed to `get()`\n   - `mergeConfig()` renamed to `merge()`\n   - `setConfig()` renamed to `replace()`\n - Changed `ConfigurationAwareInterface::setConfiguration()` to accept the new `ConfigurationInterface` instead of the concrete class\n - Renamed the `AdjoiningTextCollapser` class to `AdjacentTextMerger`\n   - Replaced its `collapseTextNodes()` method with the new `mergeChildNodes()` method\n - Made several classes `final`:\n   - `Configuration`\n   - `DocParser`\n   - `HtmlRenderer`\n   - `InlineParserEngine`\n   - `NodeWalker`\n   - `Reference`\n   - All of the block/inline parsers and renderers\n - Reduced visibility of several internal methods to `private`:\n    - `DelimiterStack::findEarliest()`\n    - All `protected` methods in `InlineParserEngine`\n - Marked some classes and methods as `@internal`\n - `ElementRendererInterface` now requires a public `renderInline()` method; added this to `HtmlRenderer`\n - Changed `InlineParserEngine::parse()` to require an `AbstractStringContainerBlock` instead of the generic `Node` class\n - Un-deprecated the `CommonmarkConverter::VERSION` constant\n - The `Converter` constructor now requires an instance of `DocParserInterface` instead of the concrete `DocParser`\n - Changed `Emphasis`, `Strong`, and `AbstractWebResource` to directly extend `AbstractInline` instead of the (now-deprecated) intermediary `AbstractInlineContainer` class\n\n### Fixed\n\n - Fixed null errors when inserting sibling `Node`s without parents\n - Fixed `NodeWalkerEvent` not requiring a `Node` via its constructor\n - Fixed `Reference::normalizeReference()` improperly converting to uppercase instead of performing proper Unicode case-folding\n - Fixed strong emphasis delimiters not being preserved when `enable_strong` is set to `false` (it now works identically to `enable_em`)\n\n### Deprecated\n\n - Deprecated `DocParser::getEnvironment()` (you should obtain it some other way)\n - Deprecated `AbstractInlineContainer` (use `AbstractInline` instead and make `isContainer()` return `true`)\n\n### Removed\n\n - Removed inline processor functionality now that we have proper delimiter support:\n   - Removed `addInlineProcessor()` from `ConfigurableEnvironmentInterface` and `Environment`\n   - Removed `getInlineProcessors()` from `EnvironmentInterface` and `Environment`\n   - Removed `EmphasisProcessor`\n   - Removed `InlineProcessorInterface`\n - Removed `EmphasisParser` now that we have proper delimiter support\n - Removed support for non-UTF-8-compatible encodings\n    - Removed `getEncoding()` from `ContextInterface`\n    - Removed `getEncoding()`, `setEncoding()`, and `$encoding` from `Context`\n    - Removed `getEncoding()` and the second `$encoding` constructor param from `Cursor`\n - Removed now-unused methods\n   - Removed `DelimiterStack::getTop()` (no replacement)\n   - Removed `DelimiterStack::iterateByCharacters()` (use the new `processDelimiters()` method instead)\n   - Removed the protected `DelimiterStack::findMatchingOpener()` method\n\n[unreleased]: https://github.com/thephpleague/commonmark/compare/1.6.7...1.6\n[1.6.7]: https://github.com/thephpleague/commonmark/compare/1.6.6...1.6.7\n[1.6.6]: https://github.com/thephpleague/commonmark/compare/1.6.5...1.6.6\n[1.6.5]: https://github.com/thephpleague/commonmark/compare/1.6.4...1.6.5\n[1.6.4]: https://github.com/thephpleague/commonmark/compare/1.6.3...1.6.4\n[1.6.3]: https://github.com/thephpleague/commonmark/compare/1.6.2...1.6.3\n[1.6.2]: https://github.com/thephpleague/commonmark/compare/1.6.1...1.6.2\n[1.6.1]: https://github.com/thephpleague/commonmark/compare/1.6.0...1.6.1\n[1.6.0]: https://github.com/thephpleague/commonmark/compare/1.5.8...1.6.0\n[1.5.8]: https://github.com/thephpleague/commonmark/compare/1.5.7...1.5.8\n[1.5.7]: https://github.com/thephpleague/commonmark/compare/1.5.6...1.5.7\n[1.5.6]: https://github.com/thephpleague/commonmark/compare/1.5.5...1.5.6\n[1.5.5]: https://github.com/thephpleague/commonmark/compare/1.5.4...1.5.5\n[1.5.4]: https://github.com/thephpleague/commonmark/compare/1.5.3...1.5.4\n[1.5.3]: https://github.com/thephpleague/commonmark/compare/1.5.2...1.5.3\n[1.5.2]: https://github.com/thephpleague/commonmark/compare/1.5.1...1.5.2\n[1.5.1]: https://github.com/thephpleague/commonmark/compare/1.5.0...1.5.1\n[1.5.0]: https://github.com/thephpleague/commonmark/compare/1.4.3...1.5.0\n[1.4.3]: https://github.com/thephpleague/commonmark/compare/1.4.2...1.4.3\n[1.4.2]: https://github.com/thephpleague/commonmark/compare/1.4.1...1.4.2\n[1.4.1]: https://github.com/thephpleague/commonmark/compare/1.4.0...1.4.1\n[1.4.0]: https://github.com/thephpleague/commonmark/compare/1.3.4...1.4.0\n[1.3.4]: https://github.com/thephpleague/commonmark/compare/1.3.3...1.3.4\n[1.3.3]: https://github.com/thephpleague/commonmark/compare/1.3.2...1.3.3\n[1.3.2]: https://github.com/thephpleague/commonmark/compare/1.3.1...1.3.2\n[1.3.1]: https://github.com/thephpleague/commonmark/compare/1.3.0...1.3.1\n[1.3.0]: https://github.com/thephpleague/commonmark/compare/1.2.2...1.3.0\n[1.2.2]: https://github.com/thephpleague/commonmark/compare/1.2.1...1.2.2\n[1.2.1]: https://github.com/thephpleague/commonmark/compare/1.2.0...1.2.1\n[1.2.0]: https://github.com/thephpleague/commonmark/compare/1.1.2...1.2.0\n[1.1.3]: https://github.com/thephpleague/commonmark/compare/1.1.2...1.1.3\n[1.1.2]: https://github.com/thephpleague/commonmark/compare/1.1.1...1.1.2\n[1.1.1]: https://github.com/thephpleague/commonmark/compare/1.1.0...1.1.1\n[1.1.0]: https://github.com/thephpleague/commonmark/compare/1.0.0...1.1.0\n[1.0.0]: https://github.com/thephpleague/commonmark/compare/1.0.0-rc1...1.0.0\n[1.0.0-rc1]: https://github.com/thephpleague/commonmark/compare/1.0.0-beta4...1.0.0-rc1\n[1.0.0-beta4]: https://github.com/thephpleague/commonmark/compare/1.0.0-beta3...1.0.0-beta4\n[1.0.0-beta3]: https://github.com/thephpleague/commonmark/compare/1.0.0-beta2...1.0.0-beta3\n[1.0.0-beta2]: https://github.com/thephpleague/commonmark/compare/1.0.0-beta1...1.0.0-beta2\n[1.0.0-beta1]: https://github.com/thephpleague/commonmark/compare/0.19.2...1.0.0-beta1\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 32.615234375,
          "content": "# Change Log\nAll notable changes to this project will be documented in this file.\nUpdates should follow the [Keep a CHANGELOG](https://keepachangelog.com/) principles.\n\n**Upgrading from 1.x?** See <https://commonmark.thephpleague.com/2.0/upgrading/> for additional information.\n\n## [Unreleased][unreleased]\n\n## [2.6.1] - 2024-12-29\n\n### Fixed\n\n- Rendered list items should only add newlines around block-level children (#1059, #1061)\n\n## [2.6.0] - 2024-12-07\n\nThis is a **security release** to address potential denial of service attacks when parsing specially crafted,\nmalicious input from untrusted sources (like user input).\n\n### Added\n\n- Added `max_delimiters_per_line` config option to prevent denial of service attacks when parsing malicious input\n- Added `table/max_autocompleted_cells` config option to prevent denial of service attacks when parsing large tables\n- The `AttributesExtension` now supports attributes without values (#985, #986)\n- The `AutolinkExtension` exposes two new configuration options to override the default behavior (#969, #987):\n    - `autolink/allowed_protocols` - an array of protocols to allow autolinking for\n    - `autolink/default_protocol` - the default protocol to use when none is specified\n- Added `RegexHelper::isWhitespace()` method to check if a given character is an ASCII whitespace character\n- Added `CacheableDelimiterProcessorInterface` to ensure linear complexity for dynamic delimiter processing\n- Added `Bracket` delimiter type to optimize bracket parsing\n\n### Changed\n\n- `[` and `]` are no longer added as `Delimiter` objects on the stack; a new `Bracket` type with its own stack is used instead\n- `UrlAutolinkParser` no longer parses URLs with more than 127 subdomains\n- Expanded reference links can no longer exceed 100kb, or the size of the input document (whichever is greater)\n- Delimiters should always provide a non-null value via `DelimiterInterface::getIndex()`\n  - We'll attempt to infer the index based on surrounding delimiters where possible\n- The `DelimiterStack` now accepts integer positions for any `$stackBottom` argument\n- Several small performance optimizations\n\n## [2.5.3] - 2024-08-16\n\n### Changed\n\n- Made compatible with CommonMark spec 0.31.1, including:\n  - Remove `source`, add `search` to list of recognized block tags\n\n## [2.5.2] - 2024-08-14\n\n### Changed\n\n- Boolean attributes now require an explicit `true` value (#1040)\n\n### Fixed\n\n- Fixed regression where text could be misinterpreted as an attribute (#1040)\n\n## [2.5.1] - 2024-07-24\n\n### Fixed\n\n- Fixed attribute parsing incorrectly parsing mustache-like syntax (#1035)\n- Fixed incorrect `Table` start line numbers (#1037)\n\n## [2.5.0] - 2024-07-22\n\n### Added\n\n- The `AttributesExtension` now supports attributes without values (#985, #986)\n- The `AutolinkExtension` exposes two new configuration options to override the default behavior (#969, #987):\n    - `autolink/allowed_protocols` - an array of protocols to allow autolinking for\n    - `autolink/default_protocol` - the default protocol to use when none is specified\n\n### Changed\n\n- Made compatible with CommonMark spec 0.31.0, including:\n    - Allow closing fence to be followed by tabs\n    - Remove restrictive limitation on inline comments\n    - Unicode symbols now treated like punctuation (for purposes of flankingness)\n    - Trailing tabs on the last line of indented code blocks will be excluded\n    - Improved HTML comment matching\n- `Paragraph`s only containing link reference definitions will be kept in the AST until the `Document` is finalized\n    - (These were previously removed immediately after parsing the `Paragraph`)\n\n### Fixed\n\n- Fixed list tightness not being determined properly in some edge cases\n- Fixed incorrect ending line numbers for several block types in various scenarios\n- Fixed lowercase inline HTML declarations not being accepted\n\n## [2.4.4] - 2024-07-22\n\n### Fixed\n\n- Fixed SmartPunct extension changing already-formatted quotation marks (#1030)\n\n## [2.4.3] - 2024-07-22\n\n### Fixed\n\n- Fixed the Attributes extension not supporting CSS level 3 selectors (#1013)\n- Fixed `UrlAutolinkParser` incorrectly parsing text containing `www` anywhere before an autolink (#1025)\n\n\n## [2.4.2] - 2024-02-02\n\n### Fixed\n\n- Fixed declaration parser being too strict\n- `FencedCodeRenderer`: don't add `language-` to class if already prefixed\n\n### Deprecated\n\n- Returning dynamic values from `DelimiterProcessorInterface::getDelimiterUse()` is deprecated\n    - You should instead implement `CacheableDelimiterProcessorInterface` to help the engine perform caching to avoid performance issues.\n- Failing to set a delimiter's index (or returning `null` from `DelimiterInterface::getIndex()`) is deprecated and will not be supported in 3.0\n- Deprecated `DelimiterInterface::isActive()` and `DelimiterInterface::setActive()`, as these are no longer used by the engine\n- Deprecated `DelimiterStack::removeEarlierMatches()` and `DelimiterStack::searchByCharacter()`, as these are no longer used by the engine\n- Passing a `DelimiterInterface` as the `$stackBottom` argument to `DelimiterStack::processDelimiters()` or `::removeAll()` is deprecated and will not be supported in 3.0; pass the integer position instead.\n\n### Fixed\n\n- Fixed NUL characters not being replaced in the input\n- Fixed quadratic complexity parsing unclosed inline links\n- Fixed quadratic complexity parsing emphasis and strikethrough delimiters\n- Fixed issue where having 500,000+ delimiters could trigger a [known segmentation fault issue in PHP's garbage collection](https://bugs.php.net/bug.php?id=68606)\n- Fixed quadratic complexity deactivating link openers\n- Fixed quadratic complexity parsing long backtick code spans with no matching closers\n- Fixed catastrophic backtracking when parsing link labels/titles\n\n## [2.4.1] - 2023-08-30\n\n### Fixed\n\n- Fixed `ExternalLinkProcessor` not fully disabling the `rel` attribute when configured to do so (#992)\n\n## [2.4.0] - 2023-03-24\n\n### Added\n\n- Added generic `CommonMarkException` marker interface for all exceptions thrown by the library\n- Added several new specific exception types implementing that marker interface:\n    - `AlreadyInitializedException`\n    - `InvalidArgumentException`\n    - `IOException`\n    - `LogicException`\n    - `MissingDependencyException`\n    - `NoMatchingRendererException`\n    - `ParserLogicException`\n- Added more configuration options to the Heading Permalinks extension (#939):\n    - `heading_permalink/apply_id_to_heading` - When `true`, the `id` attribute will be applied to the heading element itself instead of the `<a>` tag\n    - `heading_permalink/heading_class` - class to apply to the heading element\n    - `heading_permalink/insert` - now accepts `none` to prevent the creation of the `<a>` link\n- Added new `table/alignment_attributes` configuration option to control how table cell alignment is rendered (#959)\n\n### Changed\n\n- Change several thrown exceptions from `RuntimeException` to `LogicException` (or something extending it), including:\n    - `CallbackGenerator`s that fail to set a URL or return an expected value\n    - `MarkdownParser` when deactivating the last block parser or attempting to get an active block parser when they've all been closed\n    - Adding items to an already-initialized `Environment`\n    - Rendering a `Node` when no renderer has been registered for it\n- `HeadingPermalinkProcessor` now throws `InvalidConfigurationException` instead of `RuntimeException` when invalid config values are given.\n- `HtmlElement::setAttribute()` no longer requires the second parameter for boolean attributes\n- Several small micro-optimizations\n- Changed Strikethrough to only allow 1 or 2 tildes per the updated GFM spec\n\n### Fixed\n\n- Fixed inaccurate `@throws` docblocks throughout the codebase, including `ConverterInterface`, `MarkdownConverter`, and `MarkdownConverterInterface`.\n    - These previously suggested that only `\\RuntimeException`s were thrown, which was inaccurate as `\\LogicException`s were also possible.\n\n## [2.3.9] - 2023-02-15\n\n### Fixed\n\n- Fixed autolink extension not detecting some URIs with underscores (#956)\n\n## [2.3.8] - 2022-12-10\n\n### Fixed\n\n- Fixed parsing issues when `mb_internal_encoding()` is set to something other than `UTF-8` (#951)\n\n## [2.3.7] - 2022-11-03\n\n### Fixed\n\n- Fixed `TaskListItemMarkerRenderer` not including HTML attributes set on the node by other extensions (#947)\n\n## [2.3.6] - 2022-10-30\n\n### Fixed\n\n- Fixed unquoted attribute parsing when closing curly brace is followed by certain characters (like a `.`) (#943)\n\n## [2.3.5] - 2022-07-29\n\n### Fixed\n\n- Fixed error using `InlineParserEngine` when no inline parsers are registered in the `Environment` (#908)\n\n## [2.3.4] - 2022-07-17\n\n### Changed\n\n- Made a number of small tweaks to the embed extension's parsing behavior to fix #898:\n    - Changed `EmbedStartParser` to always capture embed-like lines in container blocks, regardless of parent block type\n    - Changed `EmbedProcessor` to also remove `Embed` blocks that aren't direct children of the `Document`\n    - Increased the priority of `EmbedProcessor` to `1010`\n\n### Fixed\n\n- Fixed `EmbedExtension` not parsing embeds following a list block (#898)\n\n## [2.3.3] - 2022-06-07\n\n### Fixed\n\n- Fixed `DomainFilteringAdapter` not reindexing the embed list (#884, #885)\n\n## [2.3.2] - 2022-06-03\n\n### Fixed\n\n- Fixed FootnoteExtension stripping extra characters from tab-indented footnotes (#881)\n\n## [2.2.5] - 2022-06-03\n\n### Fixed\n\n- Fixed FootnoteExtension stripping extra characters from tab-indented footnotes (#881)\n\n## [2.3.1] - 2022-05-14\n\n### Fixed\n\n- Fixed AutolinkExtension not ignoring trailing strikethrough syntax (#867)\n\n## [2.2.4] - 2022-05-14\n\n### Fixed\n\n- Fixed AutolinkExtension not ignoring trailing strikethrough syntax (#867)\n\n## [2.3.0] - 2022-04-07\n\n### Added\n\n- Added new `EmbedExtension` (#805)\n- Added `DocumentRendererInterface` as a replacement for the now-deprecated `MarkdownRendererInterface`\n\n### Deprecated\n\n- Deprecated `MarkdownRendererInterface`; use `DocumentRendererInterface` instead\n\n## [2.2.3] - 2022-02-26\n\n### Fixed\n\n- Fixed front matter parsing with Windows line endings (#821)\n\n## [2.1.3] - 2022-02-26\n\n### Fixed\n\n- Fixed front matter parsing with Windows line endings (#821)\n\n## [2.0.4] - 2022-02-26\n\n### Fixed\n\n- Fixed front matter parsing with Windows line endings (#821)\n\n## [2.2.2] - 2022-02-13\n\n### Fixed\n\n- Fixed double-escaping of image alt text (#806, #810)\n- Fixed Psalm typehints for event class names\n\n## [2.2.1] - 2022-01-25\n\n### Fixed\n\n - Fixed `symfony/deprecation-contracts` constraint\n\n### Removed\n\n - Removed deprecation trigger from `MarkdownConverterInterface` to reduce noise\n\n## [2.2.0] - 2022-01-22\n\n### Added\n\n - Added new `ConverterInterface`\n - Added new `MarkdownToXmlConverter` class\n - Added new `HtmlDecorator` class which can wrap existing renderers with additional HTML tags\n - Added new `table/wrap` config to apply an optional wrapping/container element around a table (#780)\n\n### Changed\n\n - `HtmlElement` contents can now consist of any `Stringable`, not just `HtmlElement` and `string`\n\n### Deprecated\n\n - Deprecated `MarkdownConverterInterface` and its `convertToHtml()` method; use `ConverterInterface` and `convert()` instead\n\n## [2.1.2] - 2022-02-13\n\n### Fixed\n\n- Fixed double-escaping of image alt text (#806, #810)\n- Fixed Psalm typehints for event class names\n\n## [2.1.1] - 2022-01-02\n\n### Added\n\n - Added missing return type to `Environment::dispatch()` to fix deprecation warning (#778)\n\n## [2.1.0] - 2021-12-05\n\n### Added\n\n- Added support for ext-yaml in FrontMatterExtension (#715)\n- Added support for symfony/yaml v6.0 in FrontMatterExtension (#739)\n- Added new `heading_permalink/aria_hidden` config option (#741)\n\n### Fixed\n\n - Fixed PHP 8.1 deprecation warning (#759, #762)\n\n## [2.0.3] - 2022-02-13\n\n### Fixed\n\n- Fixed double-escaping of image alt text (#806, #810)\n- Fixed Psalm typehints for event class names\n\n## [2.0.2] - 2021-08-14\n\n### Changed\n\n- Bumped minimum version of league/config to support PHP 8.1\n\n### Fixed\n\n- Fixed ability to register block parsers that identify lines starting with letters (#706)\n\n## [2.0.1] - 2021-07-31\n\n### Fixed\n\n- Fixed nested autolinks (#689)\n- Fixed description lists being parsed incorrectly (#692)\n- Fixed Table of Contents not respecting Heading Permalink prefixes (#690)\n\n## [2.0.0] - 2021-07-24\n\nNo changes were introduced since the previous RC2 release.\nSee all entries below for a list of changes between 1.x and 2.0.\n\n## [2.0.0-rc2] - 2021-07-17\n\n### Fixed\n\n- Fixed Mentions inside of links creating nested links against the spec's rules (#688)\n\n## [2.0.0-rc1] - 2021-07-10\n\nNo changes were introduced since the previous release.\n\n## [2.0.0-beta3] - 2021-07-03\n\n### Changed\n\n - Any leading UTF-8 BOM will be stripped from the input\n - The `getEnvironment()` method of `CommonMarkConverter` and `GithubFlavoredMarkdownConverter` will always return the concrete, configurable `Environment` for upgrading convenience\n - Optimized AST iteration\n - Lots of small micro-optimizations\n\n## [2.0.0-beta2] - 2021-06-27\n\n### Added\n\n- Added new `Node::iterator()` method and `NodeIterator` class for faster AST iteration (#683, #684)\n\n### Changed\n\n- Made compatible with CommonMark spec 0.30.0\n- Optimized link label parsing\n- Optimized AST iteration for a 50% performance boost in some event listeners (#683, #684)\n\n### Fixed\n\n- Fixed processing instructions with EOLs\n- Fixed case-insensitive matching for HTML tag types\n- Fixed type 7 HTML blocks incorrectly interrupting lazy paragraphs\n- Fixed newlines in reference labels not collapsing into spaces\n- Fixed link label normalization with escaped newlines\n- Fixed unnecessary AST iteration when no default attributes are configured\n\n## [2.0.0-beta1] - 2021-06-20\n\n### Added\n\n - **Added three new extensions:**\n   - `FrontMatterExtension` ([see documentation](https://commonmark.thephpleague.com/extensions/front-matter/))\n   - `DescriptionListExtension` ([see documentation](https://commonmark.thephpleague.com/extensions/description-lists/))\n   - `DefaultAttributesExtension` ([see documentation](https://commonmark.thephpleague.com/extensions/default-attributes/))\n - **Added new `XmlRenderer` to simplify AST debugging** ([see documentation](https://commonmark.thephpleague.com/xml/)) (#431)\n - **Added the ability to configure disallowed raw HTML tags** (#507)\n - **Added the ability for Mentions to use multiple characters for their symbol** (#514, #550)\n - **Added the ability to delegate event dispatching to PSR-14 compliant event dispatcher libraries**\n - **Added new configuration options:**\n   - Added `heading_permalink/min_heading_level` and `heading_permalink/max_heading_level` options to control which headings get permalinks (#519)\n   - Added `heading_permalink/fragment_prefix` to allow customizing the URL fragment prefix (#602)\n   - Added `footnote/backref_symbol` option for customizing backreference link appearance (#522)\n   - Added `slug_normalizer/max_length` option to control the maximum length of generated URL slugs\n   - Added `slug_normalizer/unique` option to control whether unique slugs should be generated per-document or per-environment\n - **Added purity markers throughout the codebase** (verified with Psalm)\n - Added `Query` class to simplify Node traversal when looking to take action on certain Nodes\n - Added new `HtmlFilter` and `StringContainerHelper` utility classes\n - Added new `AbstractBlockContinueParser` class to simplify the creation of custom block parsers\n - Added several new classes and interfaces:\n   - `BlockContinue`\n   - `BlockContinueParserInterface`\n   - `BlockContinueParserWithInlinesInterface`\n   - `BlockStart`\n   - `BlockStartParserInterface`\n   - `ChildNodeRendererInterface`\n   - `ConfigurableExtensionInterface`\n   - `CursorState`\n   - `DashParser` (extracted from `PunctuationParser`)\n   - `DelimiterParser`\n   - `DocumentBlockParser`\n   - `DocumentPreRenderEvent`\n   - `DocumentRenderedEvent`\n   - `EllipsesParser` (extracted from `PunctuationParser`)\n   - `ExpressionInterface`\n   - `FallbackNodeXmlRenderer`\n   - `InlineParserEngineInterface`\n   - `InlineParserMatch`\n   - `MarkdownParserState`\n   - `MarkdownParserStateInterface`\n   - `MarkdownRendererInterface`\n   - `Query`\n   - `RawMarkupContainerInterface`\n   - `ReferenceableInterface`\n   - `RenderedContent`\n   - `RenderedContentInterface`\n   - `ReplaceUnpairedQuotesListener`\n   - `SpecReader`\n   - `TableOfContentsRenderer`\n   - `UniqueSlugNormalizer`\n   - `UniqueSlugNormalizerInterface`\n   - `XmlRenderer`\n   - `XmlNodeRendererInterface`\n - Added several new methods:\n   - `Cursor::getCurrentCharacter()`\n   - `Environment::createDefaultConfiguration()`\n   - `Environment::setEventDispatcher()`\n   - `EnvironmentInterface::getExtensions()`\n   - `EnvironmentInterface::getInlineParsers()`\n   - `EnvironmentInterface::getSlugNormalizer()`\n   - `FencedCode::setInfo()`\n   - `Heading::setLevel()`\n   - `HtmlRenderer::renderDocument()`\n   - `InlineParserContext::getFullMatch()`\n   - `InlineParserContext::getFullMatchLength()`\n   - `InlineParserContext::getMatches()`\n   - `InlineParserContext::getSubMatches()`\n   - `LinkParserHelper::parsePartialLinkLabel()`\n   - `LinkParserHelper::parsePartialLinkTitle()`\n   - `Node::assertInstanceOf()`\n   - `RegexHelper::isLetter()`\n   - `StringContainerInterface::setLiteral()`\n   - `TableCell::getType()`\n   - `TableCell::setType()`\n   - `TableCell::getAlign()`\n   - `TableCell::setAlign()`\n\n### Changed\n\n - **Changed the converter return type**\n   - `CommonMarkConverter::convertToHtml()` now returns an instance of `RenderedContentInterface`. This can be cast to a string for backward compatibility with 1.x.\n - **Table of Contents items are no longer wrapped with `<p>` tags** (#613)\n - **Heading Permalinks now link to element IDs instead of using `name` attributes** (#602)\n - **Heading Permalink IDs and URL fragments now have a `content` prefix by default** (#602)\n - **Changes to configuration options:**\n     - `enable_em` has been renamed to `commonmark/enable_em`\n     - `enable_strong` has been renamed to `commonmark/enable_strong`\n     - `use_asterisk` has been renamed to `commonmark/use_asterisk`\n     - `use_underscore` has been renamed to `commonmark/use_underscore`\n     - `unordered_list_markers` has been renamed to `commonmark/unordered_list_markers`\n     - `mentions/*/symbol` has been renamed to `mentions/*/prefix`\n     - `mentions/*/regex` has been renamed to `mentions/*/pattern` and requires partial regular expressions (without delimiters or flags)\n     - `max_nesting_level` now defaults to `PHP_INT_MAX` and no longer supports floats\n     - `heading_permalink/slug_normalizer` has been renamed to `slug_normalizer/instance`\n - **Event dispatching is now fully PSR-14 compliant**\n - **Moved and renamed several classes** - [see the full list here](https://commonmark.thephpleague.com/2.0/upgrading/#classesnamespaces-renamed)\n - The `HeadingPermalinkExtension` and `FootnoteExtension` were modified to ensure they never produce a slug which conflicts with slugs created by the other extension\n - `SlugNormalizer::normalizer()` now supports optional prefixes and max length options passed in via the `$context` argument\n - The `AbstractBlock::$data` and `AbstractInline::$data` arrays were replaced with a `Data` array-like object on the base `Node` class\n - **Implemented a new approach to block parsing.** This was a massive change, so here are the highlights:\n   - Functionality previously found in block parsers and node elements has moved to block parser factories and block parsers, respectively ([more details](https://commonmark.thephpleague.com/2.0/upgrading/#new-block-parsing-approach))\n   - `ConfigurableEnvironmentInterface::addBlockParser()` is now `EnvironmentBuilderInterface::addBlockParserFactory()`\n   - `ReferenceParser` was re-implemented and works completely different than before\n   - The paragraph parser no longer needs to be added manually to the environment\n - **Implemented a new approach to inline parsing** where parsers can now specify longer strings or regular expressions they want to parse (instead of just single characters):\n   - `InlineParserInterface::getCharacters()` is now `getMatchDefinition()` and returns an instance of `InlineParserMatch`\n   - `InlineParserContext::__construct()` now requires the contents to be provided as a `Cursor` instead of a `string`\n - **Implemented delimiter parsing as a special type of inline parser** (via the new `DelimiterParser` class)\n - **Changed block and inline rendering to use common methods and interfaces**\n   - `BlockRendererInterface` and `InlineRendererInterface` were replaced by `NodeRendererInterface` with slightly different parameters. All core renderers now implement this interface.\n   - `ConfigurableEnvironmentInterface::addBlockRenderer()` and `addInlineRenderer()` were combined into `EnvironmentBuilderInterface::addRenderer()`\n   - `EnvironmentInterface::getBlockRenderersForClass()` and `getInlineRenderersForClass()` are now just `getRenderersForClass()`\n - **Completely refactored the Configuration implementation**\n   - All configuration-specific classes have been moved into a new `league/config` package with a new namespace\n   - `Configuration` objects must now be configured with a schema and all options must match that schema - arbitrary keys are no longer permitted\n   - `Configuration::__construct()` no longer accepts the default configuration values - use `Configuration::merge()` instead\n   - `ConfigurationInterface` now only contains a `get(string $key)`; this method no longer allows arbitrary default values to be returned if the option is missing\n   - `ConfigurableEnvironmentInterface` was renamed to `EnvironmentBuilderInterface`\n   - `ExtensionInterface::register()` now requires an `EnvironmentBuilderInterface` param instead of `ConfigurableEnvironmentInterface`\n - **Added missing return types to virtually every class and interface method**\n - Re-implemented the GFM Autolink extension using the new inline parser approach instead of document processors\n   - `EmailAutolinkProcessor` is now `EmailAutolinkParser`\n   - `UrlAutolinkProcessor` is now `UrlAutolinkParser`\n - `HtmlElement` can now properly handle array (i.e. `class`) and boolean (i.e. `checked`) attribute values\n - `HtmlElement` automatically flattens any attributes with array values into space-separated strings, removing duplicate entries\n - Combined separate classes/interfaces into one:\n   - `DisallowedRawHtmlRenderer` replaces `DisallowedRawHtmlBlockRenderer` and `DisallowedRawHtmlInlineRenderer`\n   - `NodeRendererInterface` replaces `BlockRendererInterface` and `InlineRendererInterface`\n - Renamed the following methods:\n   - `Environment` and `ConfigurableEnvironmentInterface`:\n     - `addBlockParser()` is now `addBlockStartParser()`\n   - `ReferenceMap` and `ReferenceMapInterface`:\n     - `addReference()` is now `add()`\n     - `getReference()` is now `get()`\n     - `listReferences()` is now `getIterator()`\n   - Various node (block/inline) classes:\n     - `getContent()` is now `getLiteral()`\n     - `setContent()` is now `setLiteral()`\n - Moved and renamed the following constants:\n   - `EnvironmentInterface::HTML_INPUT_ALLOW` is now `HtmlFilter::ALLOW`\n   - `EnvironmentInterface::HTML_INPUT_ESCAPE` is now `HtmlFilter::ESCAPE`\n   - `EnvironmentInterface::HTML_INPUT_STRIP` is now `HtmlFilter::STRIP`\n   - `TableCell::TYPE_HEAD` is now `TableCell::TYPE_HEADER`\n   - `TableCell::TYPE_BODY` is now `TableCell::TYPE_DATA`\n - Changed the visibility of the following properties:\n   - `AttributesInline::$attributes` is now `private`\n   - `AttributesInline::$block` is now `private`\n   - `TableCell::$align` is now `private`\n   - `TableCell::$type` is now `private`\n   - `TableSection::$type` is now `private`\n - Several methods which previously returned `$this` now return `void`\n   - `Delimiter::setPrevious()`\n   - `Node::replaceChildren()`\n   - `Context::setTip()`\n   - `Context::setContainer()`\n   - `Context::setBlocksParsed()`\n   - `AbstractStringContainer::setContent()`\n   - `AbstractWebResource::setUrl()`\n - Several classes are now marked `final`:\n   - `ArrayCollection`\n   - `Emphasis`\n   - `FencedCode`\n   - `Heading`\n   - `HtmlBlock`\n   - `HtmlElement`\n   - `HtmlInline`\n   - `IndentedCode`\n   - `Newline`\n   - `Strikethrough`\n   - `Strong`\n   - `Text`\n - `Heading` nodes no longer directly contain a copy of their inner text\n - `StringContainerInterface` can now be used for inlines, not just blocks\n - `ArrayCollection` only supports integer keys\n - `HtmlElement` now implements `Stringable`\n - `Cursor::saveState()` and `Cursor::restoreState()` now use `CursorState` objects instead of arrays\n - `NodeWalker::next()` now enters, traverses any children, and leaves all elements which may have children (basically all blocks plus any inlines with children). Previously, it only did this for elements explicitly marked as \"containers\".\n - `InvalidOptionException` was removed\n - Anything with a `getReference(): ReferenceInterface` method now implements `ReferencableInterface`\n - The `SmartPunct` extension now replaces all unpaired `Quote` elements with `Text` elements towards the end of parsing, making the `QuoteRenderer` unnecessary\n - Several changes made to the Footnote extension:\n   - Footnote identifiers can no longer contain spaces\n   - Anonymous footnotes can now span subsequent lines\n   - Footnotes can now contain multiple lines of content, including sub-blocks, by indenting them\n   - Footnote event listeners now have numbered priorities (but still execute in the same order)\n   - Footnotes must now be separated from previous content by a blank line\n - The line numbers (keys) returned via `MarkdownInput::getLines()` now start at 1 instead of 0\n - `DelimiterProcessorCollectionInterface` now extends `Countable`\n - `RegexHelper::PARTIAL_` constants must always be used in case-insensitive contexts\n - `HeadingPermalinkProcessor` no longer accepts text normalizers via the constructor - these must be provided via configuration instead\n - Blocks which can't contain inlines will no longer be asked to render inlines\n - `AnonymousFootnoteRefParser` and `HeadingPermalinkProcessor` now implement `EnvironmentAwareInterface` instead of `ConfigurationAwareInterface`\n - The second argument to `TextNormalizerInterface::normalize()` must now be an array\n - The `title` attribute for `Link` and `Image` nodes is now stored using a dedicated property instead of stashing it in `$data`\n - `ListData::$delimiter` now returns either `ListBlock::DELIM_PERIOD` or `ListBlock::DELIM_PAREN` instead of the literal delimiter\n\n### Fixed\n\n - **Fixed parsing of footnotes without content**\n - **Fixed rendering of orphaned footnotes and footnote refs**\n - **Fixed some URL autolinks breaking too early** (#492)\n - Fixed `AbstractStringContainer` not actually being `abstract`\n\n### Removed\n\n - **Removed support for PHP 7.1, 7.2, and 7.3** (#625, #671)\n - **Removed all previously-deprecated functionality:**\n   - Removed the ability to pass custom `Environment` instances into the `CommonMarkConverter` and `GithubFlavoredMarkdownConverter` constructors\n   - Removed the `Converter` class and `ConverterInterface`\n   - Removed the `bin/commonmark` script\n   - Removed the `Html5Entities` utility class\n   - Removed the `InlineMentionParser` (use `MentionParser` instead)\n   - Removed `DefaultSlugGenerator` and `SlugGeneratorInterface` from the `Extension/HeadingPermalink/Slug` sub-namespace (use the new ones under `./SlugGenerator` instead)\n   - Removed the following `ArrayCollection` methods:\n     - `add()`\n     - `set()`\n     - `get()`\n     - `remove()`\n     - `isEmpty()`\n     - `contains()`\n     - `indexOf()`\n     - `containsKey()`\n     - `replaceWith()`\n     - `removeGaps()`\n   - Removed the `ConfigurableEnvironmentInterface::setConfig()` method\n   - Removed the `ListBlock::TYPE_UNORDERED` constant\n   - Removed the `CommonMarkConverter::VERSION` constant\n   - Removed the `HeadingPermalinkRenderer::DEFAULT_INNER_CONTENTS` constant\n   - Removed the `heading_permalink/inner_contents` configuration option\n - **Removed now-unused classes:**\n   - `AbstractStringContainerBlock`\n   - `BlockRendererInterface`\n   - `Context`\n   - `ContextInterface`\n   - `Converter`\n   - `ConverterInterface`\n   - `InlineRendererInterface`\n   - `PunctuationParser` (was split into two classes: `DashParser` and `EllipsesParser`)\n   - `QuoteRenderer`\n   - `UnmatchedBlockCloser`\n - Removed the following methods, properties, and constants:\n   - `AbstractBlock::$open`\n   - `AbstractBlock::$lastLineBlank`\n   - `AbstractBlock::isContainer()`\n   - `AbstractBlock::canContain()`\n   - `AbstractBlock::isCode()`\n   - `AbstractBlock::matchesNextLine()`\n   - `AbstractBlock::endsWithBlankLine()`\n   - `AbstractBlock::setLastLineBlank()`\n   - `AbstractBlock::shouldLastLineBeBlank()`\n   - `AbstractBlock::isOpen()`\n   - `AbstractBlock::finalize()`\n   - `AbstractBlock::getData()`\n   - `AbstractInline::getData()`\n   - `ConfigurableEnvironmentInterface::addBlockParser()`\n   - `ConfigurableEnvironmentInterface::mergeConfig()`\n   - `Delimiter::setCanClose()`\n   - `EnvironmentInterface::getConfig()`\n   - `EnvironmentInterface::getInlineParsersForCharacter()`\n   - `EnvironmentInterface::getInlineParserCharacterRegex()`\n   - `HtmlRenderer::renderBlock()`\n   - `HtmlRenderer::renderBlocks()`\n   - `HtmlRenderer::renderInline()`\n   - `HtmlRenderer::renderInlines()`\n   - `Node::isContainer()`\n   - `RegexHelper::matchAll()` (use the new `matchFirst()` method instead)\n   - `RegexHelper::REGEX_WHITESPACE`\n - Removed the second `$contents` argument from the `Heading` constructor\n\n### Deprecated\n\n**The following things have been deprecated and will not be supported in v3.0:**\n\n - `Environment::mergeConfig()` (set configuration before instantiation instead)\n - `Environment::createCommonMarkEnvironment()` and `Environment::createGFMEnvironment()`\n    - Alternative 1: Use `CommonMarkConverter` or `GithubFlavoredMarkdownConverter` if you don't need to customize the environment\n    - Alternative 2: Instantiate a new `Environment` and add the necessary extensions yourself\n\n[unreleased]: https://github.com/thephpleague/commonmark/compare/2.6.1...main\n[2.6.1]: https://github.com/thephpleague/commonmark/compare/2.6.0...2.6.1\n[2.6.0]: https://github.com/thephpleague/commonmark/compare/2.5.3...2.6.0\n[2.5.3]: https://github.com/thephpleague/commonmark/compare/2.5.2...2.5.3\n[2.5.2]: https://github.com/thephpleague/commonmark/compare/2.5.1...2.5.2\n[2.5.1]: https://github.com/thephpleague/commonmark/compare/2.5.0...2.5.1\n[2.5.0]: https://github.com/thephpleague/commonmark/compare/2.4.4...2.5.0\n[2.4.4]: https://github.com/thephpleague/commonmark/compare/2.4.3...2.4.4\n[2.4.3]: https://github.com/thephpleague/commonmark/compare/2.4.2...2.4.3\n[2.4.2]: https://github.com/thephpleague/commonmark/compare/2.4.1...2.4.2\n[2.4.1]: https://github.com/thephpleague/commonmark/compare/2.4.0...2.4.1\n[2.4.0]: https://github.com/thephpleague/commonmark/compare/2.3.9...2.4.0\n[2.3.9]: https://github.com/thephpleague/commonmark/compare/2.3.8...2.3.9\n[2.3.8]: https://github.com/thephpleague/commonmark/compare/2.3.7...2.3.8\n[2.3.7]: https://github.com/thephpleague/commonmark/compare/2.3.6...2.3.7\n[2.3.6]: https://github.com/thephpleague/commonmark/compare/2.3.5...2.3.6\n[2.3.5]: https://github.com/thephpleague/commonmark/compare/2.3.4...2.3.5\n[2.3.4]: https://github.com/thephpleague/commonmark/compare/2.3.3...2.3.4\n[2.3.3]: https://github.com/thephpleague/commonmark/compare/2.3.2...2.3.3\n[2.3.2]: https://github.com/thephpleague/commonmark/compare/2.3.2...main\n[2.3.1]: https://github.com/thephpleague/commonmark/compare/2.3.0...2.3.1\n[2.3.0]: https://github.com/thephpleague/commonmark/compare/2.2.3...2.3.0\n[2.2.5]: https://github.com/thephpleague/commonmark/compare/2.2.4...2.2.5\n[2.2.4]: https://github.com/thephpleague/commonmark/compare/2.2.3...2.2.4\n[2.2.3]: https://github.com/thephpleague/commonmark/compare/2.2.2...2.2.3\n[2.2.2]: https://github.com/thephpleague/commonmark/compare/2.2.1...2.2.2\n[2.2.1]: https://github.com/thephpleague/commonmark/compare/2.2.0...2.2.1\n[2.2.0]: https://github.com/thephpleague/commonmark/compare/2.1.1...2.2.0\n[2.1.3]: https://github.com/thephpleague/commonmark/compare/2.1.2...2.1.3\n[2.1.2]: https://github.com/thephpleague/commonmark/compare/2.1.1...2.1.2\n[2.1.1]: https://github.com/thephpleague/commonmark/compare/2.0.2...2.1.1\n[2.1.0]: https://github.com/thephpleague/commonmark/compare/2.0.2...2.1.0\n[2.0.4]: https://github.com/thephpleague/commonmark/compare/2.0.3...2.0.4\n[2.0.3]: https://github.com/thephpleague/commonmark/compare/2.0.2...2.0.3\n[2.0.2]: https://github.com/thephpleague/commonmark/compare/2.0.1...2.0.2\n[2.0.1]: https://github.com/thephpleague/commonmark/compare/2.0.0...2.0.1\n[2.0.0]: https://github.com/thephpleague/commonmark/compare/2.0.0-rc2...2.0.0\n[2.0.0-rc2]: https://github.com/thephpleague/commonmark/compare/2.0.0-rc1...2.0.0-rc2\n[2.0.0-rc1]: https://github.com/thephpleague/commonmark/compare/2.0.0-beta3...2.0.0-rc1\n[2.0.0-beta3]: https://github.com/thephpleague/commonmark/compare/2.0.0-beta2...2.0.0-beta3\n[2.0.0-beta2]: https://github.com/thephpleague/commonmark/compare/2.0.0-beta1...2.0.0-beta2\n[2.0.0-beta1]: https://github.com/thephpleague/commonmark/compare/1.6...2.0.0-beta1\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.6123046875,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2014-2022, Colin O'Dell. All rights reserved. Some code based on commonmark.js (copyright 2014-2018, John MacFarlane) and commonmark-java (copyright 2015-2016, Atlassian Pty Ltd)\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.9716796875,
          "content": "# league/commonmark\n\n[![Latest Version](https://img.shields.io/packagist/v/league/commonmark.svg?style=flat-square)](https://packagist.org/packages/league/commonmark)\n[![Total Downloads](https://img.shields.io/packagist/dt/league/commonmark.svg?style=flat-square)](https://packagist.org/packages/league/commonmark)\n[![Software License](https://img.shields.io/badge/License-BSD--3-brightgreen.svg?style=flat-square)](LICENSE)\n[![Build Status](https://img.shields.io/github/actions/workflow/status/thephpleague/commonmark/tests.yml?branch=main&style=flat-square)](https://github.com/thephpleague/commonmark/actions?query=workflow%3ATests+branch%3Amain)\n[![Coverage Status](https://img.shields.io/scrutinizer/coverage/g/thephpleague/commonmark.svg?style=flat-square)](https://scrutinizer-ci.com/g/thephpleague/commonmark/code-structure)\n[![Quality Score](https://img.shields.io/scrutinizer/g/thephpleague/commonmark.svg?style=flat-square)](https://scrutinizer-ci.com/g/thephpleague/commonmark)\n[![Psalm Type Coverage](https://shepherd.dev/github/thephpleague/commonmark/coverage.svg)](https://shepherd.dev/github/thephpleague/commonmark)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/126/badge)](https://bestpractices.coreinfrastructure.org/projects/126)\n[![Sponsor development of this project](https://img.shields.io/badge/sponsor%20this%20package-%E2%9D%A4-ff69b4.svg?style=flat-square)](https://www.colinodell.com/sponsor)\n\n![league/commonmark](commonmark-banner.png)\n\n**league/commonmark** is a highly-extensible PHP Markdown parser created by [Colin O'Dell][@colinodell] which supports the full [CommonMark] spec and [GitHub-Flavored Markdown].  It is based on the [CommonMark JS reference implementation][commonmark.js] by [John MacFarlane] \\([@jgm]\\).\n\n## 📦 Installation & Basic Usage\n\nThis project requires PHP 7.4 or higher with the `mbstring` extension.  To install it via [Composer] simply run:\n\n``` bash\n$ composer require league/commonmark\n```\n\nThe `CommonMarkConverter` class provides a simple wrapper for converting CommonMark to HTML:\n\n```php\nuse League\\CommonMark\\CommonMarkConverter;\n\n$converter = new CommonMarkConverter([\n    'html_input' => 'strip',\n    'allow_unsafe_links' => false,\n]);\n\necho $converter->convert('# Hello World!');\n\n// <h1>Hello World!</h1>\n```\n\nOr if you want GitHub-Flavored Markdown, use the `GithubFlavoredMarkdownConverter` class instead:\n\n```php\nuse League\\CommonMark\\GithubFlavoredMarkdownConverter;\n\n$converter = new GithubFlavoredMarkdownConverter([\n    'html_input' => 'strip',\n    'allow_unsafe_links' => false,\n]);\n\necho $converter->convert('# Hello World!');\n\n// <h1>Hello World!</h1>\n```\n\nPlease note that only UTF-8 and ASCII encodings are supported.  If your Markdown uses a different encoding please convert it to UTF-8 before running it through this library.\n\n> [!CAUTION]\n> If you will be parsing untrusted input from users, please consider setting the `html_input` and `allow_unsafe_links` options per the example above. See <https://commonmark.thephpleague.com/security/> for more details. If you also do choose to allow raw HTML input from untrusted users, consider using a library (like [HTML Purifier](https://github.com/ezyang/htmlpurifier)) to provide additional HTML filtering.\n\n## 📓 Documentation\n\nFull documentation on advanced usage, configuration, and customization can be found at [commonmark.thephpleague.com][docs].\n\n## ⏫ Upgrading\n\nInformation on how to upgrade to newer versions of this library can be found at <https://commonmark.thephpleague.com/releases>.\n\n## 💻 GitHub-Flavored Markdown\n\nThe `GithubFlavoredMarkdownConverter` shown earlier is a drop-in replacement for the `CommonMarkConverter` which adds additional features found in the GFM spec:\n\n - Autolinks\n - Disallowed raw HTML\n - Strikethrough\n - Tables\n - Task Lists\n\nSee the [Extensions documentation](https://commonmark.thephpleague.com/customization/extensions/) for more details on how to include only certain GFM features if you don't want them all.\n\n## 🗃️ Related Packages\n\n### Integrations\n\n- [CakePHP 3](https://github.com/gourmet/common-mark)\n- [Drupal](https://www.drupal.org/project/markdown)\n- [Laravel 4+](https://github.com/GrahamCampbell/Laravel-Markdown)\n- [Sculpin](https://github.com/bcremer/sculpin-commonmark-bundle)\n- [Symfony 2 & 3](https://github.com/webuni/commonmark-bundle)\n- [Symfony 4](https://github.com/avensome/commonmark-bundle)\n- [Twig Markdown extension](https://github.com/twigphp/markdown-extension)\n- [Twig filter and tag](https://github.com/aptoma/twig-markdown)\n- [Laravel CommonMark Blog](https://github.com/spekulatius/laravel-commonmark-blog)\n\n### Included Extensions\n\nSee [our extension documentation](https://commonmark.thephpleague.com/extensions/overview) for a full list of extensions bundled with this library.\n\n### Community Extensions\n\nCustom parsers/renderers can be bundled into extensions which extend CommonMark.  Here are some that you may find interesting:\n\n - [Emoji extension](https://github.com/ElGigi/CommonMarkEmoji) - UTF-8 emoji extension with Github tag.\n - [Sup Sub extensions](https://github.com/OWS/commonmark-sup-sub-extensions) - Adds support of superscript and subscript (`<sup>` and `<sub>` HTML tags)\n - [YouTube iframe extension](https://github.com/zoonru/commonmark-ext-youtube-iframe) - Replaces youtube link with iframe.\n - [Lazy Image extension](https://github.com/simonvomeyser/commonmark-ext-lazy-image) - Adds various options for lazy loading of images.\n - [Marker Extension](https://github.com/noah1400/commonmark-marker-extension) - Adds support of highlighted text (`<mark>` HTML tag)\n\nOthers can be found on [Packagist under the `commonmark-extension` package type](https://packagist.org/packages/league/commonmark?type=commonmark-extension).\n\nIf you build your own, feel free to submit a PR to add it to this list!\n\n### Others\n\nCheck out the other cool things people are doing with `league/commonmark`: <https://packagist.org/packages/league/commonmark/dependents>\n\n## 🏷️ Versioning\n\n[SemVer](http://semver.org/) is followed closely. Minor and patch releases should not introduce breaking changes to the codebase; however, they might change the resulting AST or HTML output of parsed Markdown (due to bug fixes, spec changes, etc.)  As a result, you might get slightly different HTML, but any custom code built onto this library should still function correctly.\n\nAny classes or methods marked `@internal` are not intended for use outside of this library and are subject to breaking changes at any time, so please avoid using them.\n\n## 🛠️ Maintenance & Support\n\nWhen a new **minor** version (e.g. `2.0` -> `2.1`) is released, the previous one (`2.0`) will continue to receive security and critical bug fixes for *at least* 3 months.\n\nWhen a new **major** version is released (e.g. `1.6` -> `2.0`), the previous one (`1.6`) will receive critical bug fixes for *at least* 3 months and security updates for 6 months after that new release comes out.\n\n(This policy may change in the future and exceptions may be made on a case-by-case basis.)\n\n**Professional support, including notification of new releases and security updates, is available through a [Tidelift Subscription](https://tidelift.com/subscription/pkg/packagist-league-commonmark?utm_source=packagist-league-commonmark&utm_medium=referral&utm_campaign=readme).**\n\n## 👷‍♀️ Contributing\n\nTo report a security vulnerability, please use the [Tidelift security contact](https://tidelift.com/security). Tidelift will coordinate the fix and disclosure with us.\n\nIf you encounter a bug in the spec, please report it to the [CommonMark] project.  Any resulting fix will eventually be implemented in this project as well.\n\nContributions to this library are **welcome**, especially ones that:\n\n * Improve usability or flexibility without compromising our ability to adhere to the [CommonMark spec]\n * Mirror fixes made to the [reference implementation][commonmark.js]\n * Optimize performance\n * Fix issues with adhering to the [CommonMark spec]\n\nMajor refactoring to core parsing logic should be avoided if possible so that we can easily follow updates made to [the reference implementation][commonmark.js]. That being said, we will absolutely consider changes which don't deviate too far from the reference spec or which are favored by other popular CommonMark implementations.\n\nPlease see [CONTRIBUTING](https://github.com/thephpleague/commonmark/blob/main/.github/CONTRIBUTING.md) for additional details.\n\n## 🧪 Testing\n\n``` bash\n$ composer test\n```\n\nThis will also test league/commonmark against the latest supported spec.\n\n## 🚀 Performance Benchmarks\n\nYou can compare the performance of **league/commonmark** to other popular parsers by running the included benchmark tool:\n\n``` bash\n$ ./tests/benchmark/benchmark.php\n```\n\n## 👥 Credits & Acknowledgements\n\nThis code was originally based on the [CommonMark JS reference implementation][commonmark.js] which is written, maintained, and copyrighted by [John MacFarlane].  This project simply wouldn't exist without his work.\n\nAnd a huge thanks to all of our amazing contributors:\n\n<a href=\"https://github.com/thephpleague/commonmark/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=thephpleague/commonmark\" />\n</a>\n\n### Sponsors\n\nWe'd also like to extend our sincere thanks the following sponsors who support ongoing development of this project:\n\n - [Tidelift](https://tidelift.com/subscription/pkg/packagist-league-commonmark?utm_source=packagist-league-commonmark&utm_medium=referral&utm_campaign=readme) for offering support to both the maintainers and end-users through their [professional support](https://tidelift.com/subscription/pkg/packagist-league-commonmark?utm_source=packagist-league-commonmark&utm_medium=referral&utm_campaign=readme) program\n - [Blackfire](https://www.blackfire.io/) for providing an Open-Source Profiler subscription\n - [JetBrains](https://www.jetbrains.com/) for supporting this project with complimentary [PhpStorm](https://www.jetbrains.com/phpstorm/) licenses\n\nAre you interested in sponsoring development of this project? See <https://www.colinodell.com/sponsor> for a list of ways to contribute.\n\n## 📄 License\n\n**league/commonmark** is licensed under the BSD-3 license.  See the [`LICENSE`](LICENSE) file for more details.\n\n## 🏛️ Governance\n\nThis project is primarily maintained by [Colin O'Dell][@colinodell].  Members of the [PHP League] Leadership Team may occasionally assist with some of these duties.\n\n## 🗺️  Who Uses It?\n\nThis project is used by [Drupal](https://www.drupal.org/project/markdown), [Laravel Framework](https://laravel.com/), [Cachet](https://cachethq.io/), [Firefly III](https://firefly-iii.org/), [Neos](https://www.neos.io/), [Daux.io](https://daux.io/), and [more](https://packagist.org/packages/league/commonmark/dependents)!\n\n---\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/packagist-league-commonmark?utm_source=packagist-league-commonmark&utm_medium=referral&utm_campaign=readme\">Get professional support for league/commonmark with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n\n[CommonMark]: http://commonmark.org/\n[CommonMark spec]: http://spec.commonmark.org/\n[commonmark.js]: https://github.com/jgm/commonmark.js\n[GitHub-Flavored Markdown]: https://github.github.com/gfm/\n[John MacFarlane]: http://johnmacfarlane.net\n[docs]: https://commonmark.thephpleague.com/\n[docs-examples]: https://commonmark.thephpleague.com/customization/overview/#examples\n[docs-example-twitter]: https://commonmark.thephpleague.com/customization/inline-parsing#example-1---twitter-handles\n[docs-example-smilies]: https://commonmark.thephpleague.com/customization/inline-parsing#example-2---emoticons\n[All Contributors]: https://github.com/thephpleague/commonmark/contributors\n[@colinodell]: https://www.twitter.com/colinodell\n[@jgm]: https://github.com/jgm\n[jgm/stmd]: https://github.com/jgm/stmd\n[Composer]: https://getcomposer.org/\n[PHP League]: https://thephpleague.com\n"
        },
        {
          "name": "RELEASE_CHECKLIST.md",
          "type": "blob",
          "size": 1.2353515625,
          "content": "# Release Checklist\n\n## Preparation\n\n - [ ] Ensure all tests are passing (check GitHub workflows).\n - [ ] Ensure changes are documented in `CHANGELOG.md`. Release titles should be linked to GitHub.\n - [ ] If breaking changes or deprecations are introduced, document the upgrade process in the doc site's upgrade page.\n - [ ] Bump the `branch-alias` in `composer.json` if needed.\n - [ ] Ensure all changes above make it into the `main` branch\n\n## Documentation\n\n - [ ] Update the relevant documentation in `./docs/`\n - [ ] Remember to note the upgrade changes in the docs too\n - [ ] If releasing a new major or minor version, make sure to clone the previous one and make the necessary changes.  This will allow people to submit new features to the dev-main version. Don't forget to update version numbers in project.yml! And update the redirects too. Especially for /security/.\n - [ ] Build and preview the docs locally\n\n## Release\n\n - [ ] Create a signed tag locally and push it up. Tag should be named `xx.yy.zz`.\n - [ ] Go to GitHub and add release notes from the relevant `CHANGELOG` section.\n - [ ] Resync project on <https://libraries.io/packagist/league%2Fcommonmark/>\n - [ ] Update release notes and supported branches on Tidelift\n - [ ] ???\n - [ ] PROFIT!!\n"
        },
        {
          "name": "commonmark-banner.png",
          "type": "blob",
          "size": 121.208984375,
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 4.14453125,
          "content": "{\n    \"name\": \"league/commonmark\",\n    \"type\": \"library\",\n    \"description\": \"Highly-extensible PHP Markdown parser which fully supports the CommonMark spec and GitHub-Flavored Markdown (GFM)\",\n    \"keywords\": [\"markdown\",\"parser\",\"commonmark\",\"gfm\",\"github\",\"flavored\",\"github-flavored\",\"md\"],\n    \"homepage\": \"https://commonmark.thephpleague.com\",\n    \"license\": \"BSD-3-Clause\",\n    \"authors\": [\n        {\n            \"name\": \"Colin O'Dell\",\n            \"email\": \"colinodell@gmail.com\",\n            \"homepage\": \"https://www.colinodell.com\",\n            \"role\": \"Lead Developer\"\n        }\n    ],\n    \"support\": {\n        \"docs\": \"https://commonmark.thephpleague.com/\",\n        \"forum\": \"https://github.com/thephpleague/commonmark/discussions\",\n        \"issues\": \"https://github.com/thephpleague/commonmark/issues\",\n        \"rss\": \"https://github.com/thephpleague/commonmark/releases.atom\",\n        \"source\": \"https://github.com/thephpleague/commonmark\"\n    },\n    \"require\": {\n        \"php\": \"^7.4 || ^8.0\",\n        \"ext-mbstring\": \"*\",\n        \"league/config\": \"^1.1.1\",\n        \"psr/event-dispatcher\": \"^1.0\",\n        \"symfony/deprecation-contracts\": \"^2.1 || ^3.0\",\n        \"symfony/polyfill-php80\": \"^1.16\"\n    },\n    \"require-dev\": {\n        \"ext-json\": \"*\",\n        \"cebe/markdown\": \"^1.0\",\n        \"commonmark/cmark\": \"0.31.1\",\n        \"commonmark/commonmark.js\": \"0.31.1\",\n        \"composer/package-versions-deprecated\": \"^1.8\",\n        \"embed/embed\": \"^4.4\",\n        \"erusev/parsedown\": \"^1.0\",\n        \"github/gfm\": \"0.29.0\",\n        \"michelf/php-markdown\": \"^1.4 || ^2.0\",\n        \"nyholm/psr7\": \"^1.5\",\n        \"phpstan/phpstan\": \"^1.8.2\",\n        \"phpunit/phpunit\": \"^9.5.21 || ^10.5.9 || ^11.0.0\",\n        \"scrutinizer/ocular\": \"^1.8.1\",\n        \"symfony/finder\": \"^5.3 | ^6.0 | ^7.0\",\n        \"symfony/process\": \"^5.4 | ^6.0 | ^7.0\",\n        \"symfony/yaml\": \"^2.3 | ^3.0 | ^4.0 | ^5.0 | ^6.0 | ^7.0\",\n        \"unleashedtech/php-coding-standard\": \"^3.1.1\",\n        \"vimeo/psalm\": \"^4.24.0 || ^5.0.0\"\n    },\n    \"minimum-stability\": \"beta\",\n    \"suggest\": {\n        \"symfony/yaml\": \"v2.3+ required if using the Front Matter extension\"\n    },\n    \"repositories\": [\n        {\n            \"type\": \"package\",\n            \"package\": {\n                \"name\": \"commonmark/commonmark.js\",\n                \"version\": \"0.31.1\",\n                \"dist\": {\n                    \"url\": \"https://github.com/commonmark/commonmark.js/archive/0.31.1.zip\",\n                    \"type\": \"zip\"\n                }\n            }\n        },\n        {\n            \"type\": \"package\",\n            \"package\": {\n                \"name\": \"commonmark/cmark\",\n                \"version\": \"0.31.1\",\n                \"dist\": {\n                    \"url\": \"https://github.com/commonmark/cmark/archive/0.31.1.zip\",\n                    \"type\": \"zip\"\n                }\n            }\n        },\n        {\n            \"type\": \"package\",\n            \"package\": {\n                \"name\": \"github/gfm\",\n                \"version\": \"0.29.0\",\n                \"dist\": {\n                    \"url\": \"https://github.com/github/cmark-gfm/archive/0.29.0.gfm.13.zip\",\n                    \"type\": \"zip\"\n                }\n            }\n        }\n    ],\n    \"autoload\": {\n        \"psr-4\": {\n            \"League\\\\CommonMark\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"League\\\\CommonMark\\\\Tests\\\\Unit\\\\\": \"tests/unit\",\n            \"League\\\\CommonMark\\\\Tests\\\\Functional\\\\\": \"tests/functional\",\n            \"League\\\\CommonMark\\\\Tests\\\\PHPStan\\\\\": \"tests/phpstan\"\n        }\n    },\n    \"scripts\": {\n        \"phpcs\": \"phpcs\",\n        \"phpstan\": \"phpstan analyse\",\n        \"phpunit\": \"phpunit --no-coverage\",\n        \"psalm\": \"psalm --stats\",\n        \"pathological\": \"tests/pathological/test.php\",\n        \"test\": [\n            \"@phpcs\",\n            \"@phpstan\",\n            \"@psalm\",\n            \"@phpunit\",\n            \"@pathological\"\n        ]\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-main\": \"2.7-dev\"\n        }\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"composer/package-versions-deprecated\": true,\n            \"dealerdirect/phpcodesniffer-composer-installer\": true\n        },\n        \"sort-packages\": true\n    }\n}\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.1865234375,
          "content": "version: '3.7'\nservices:\n    php:\n        build: ./docker\n        volumes:\n            - .:/app:rw\n    bc-check:\n        image: nyholm/roave-bc-check\n        volumes:\n            - .:/app:ro\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpcs.xml.dist",
          "type": "blob",
          "size": 0.5205078125,
          "content": "<?xml version=\"1.0\"?>\n<ruleset>\n    <arg name=\"basepath\" value=\".\"/>\n    <arg name=\"extensions\" value=\"php\"/>\n    <arg name=\"parallel\" value=\"80\"/>\n    <arg name=\"cache\" value=\".phpcs-cache\"/>\n    <arg name=\"colors\"/>\n\n    <!-- Ignore warnings, show progress of the run and show sniff names -->\n    <arg value=\"nps\"/>\n\n    <!-- Directories to be checked -->\n    <file>src</file>\n    <file>tests/unit</file>\n    <file>tests/functional</file>\n\n    <!-- Include full Unleashed Coding Standard -->\n    <rule ref=\"Unleashed\"/>\n</ruleset>\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 1.3564453125,
          "content": "parameters:\n  level: 8\n  paths:\n    - src\n  ignoreErrors:\n   - path: src/Reference/ReferenceParser.php\n     message: '#Parameter .+ of class .+Reference constructor expects string, string\\|null given#'\n   - path: src/Util/RegexHelper.php\n     message: '#Method .+RegexHelper::unescape\\(\\) should return string but returns string\\|null#'\n   - path: src/Delimiter/DelimiterStack.php\n     message: '#unknown class WeakMap#'\n  exceptions:\n    uncheckedExceptionClasses:\n      # Exceptions caused by bad developer logic that should always bubble up:\n      - 'League\\CommonMark\\Exception\\AlreadyInitializedException'\n      - 'League\\CommonMark\\Exception\\InvalidArgumentException'\n      - 'League\\CommonMark\\Exception\\MissingDependencyException'\n      - 'League\\CommonMark\\Exception\\UnexpectedEncodingException'\n      - 'League\\CommonMark\\Parser\\ParserLogicException'\n      - 'League\\CommonMark\\Renderer\\NoMatchingRendererException'\n      - 'League\\Config\\Exception\\InvalidConfigurationException'\n      - 'League\\Config\\Exception\\UnknownOptionException'\n      - 'League\\Config\\Exception\\ValidationException'\n      # Should never be thrown by our code:\n      - 'Dflydev\\DotAccessData\\Exception\\DataException'\n      - 'Dflydev\\DotAccessData\\Exception\\InvalidPathException'\n    check:\n      missingCheckedExceptionInThrows: true\nrules:\n  - 'League\\CommonMark\\Tests\\PHPStan\\MbstringFunctionCallRule'\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 1.0263671875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         bootstrap=\"vendor/autoload.php\"\n         backupGlobals=\"false\"\n         backupStaticProperties=\"false\"\n         colors=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         cacheDirectory=\".phpunit.cache\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.0/phpunit.xsd\">\n    <coverage>\n        <include>\n            <directory suffix=\".php\">src/</directory>\n        </include>\n        <report>\n            <clover outputFile=\"build/logs/clover.xml\"/>\n            <html outputDirectory=\"build/coverage\"/>\n            <text outputFile=\"build/coverage.txt\"/>\n        </report>\n    </coverage>\n    <testsuites>\n        <testsuite name=\"league/commonmark Functional Tests\">\n            <directory>tests/functional</directory>\n        </testsuite>\n        <testsuite name=\"league/commonmark Unit Tests\">\n            <directory>tests/unit</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n"
        },
        {
          "name": "psalm.xml",
          "type": "blob",
          "size": 0.43359375,
          "content": "<?xml version=\"1.0\"?>\n<psalm\n    errorLevel=\"3\"\n    resolveFromConfigFile=\"true\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"https://getpsalm.org/schema/config\"\n    xsi:schemaLocation=\"https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd\"\n>\n    <projectFiles>\n        <directory name=\"src\" />\n        <ignoreFiles>\n            <directory name=\"vendor\" />\n        </ignoreFiles>\n    </projectFiles>\n</psalm>\n"
        },
        {
          "name": "roave-bc-check.yaml",
          "type": "blob",
          "size": 0.2041015625,
          "content": "parameters:\n    ignoreErrors:\n        - '#\\[BC\\] CHANGED: The number of required arguments for League\\\\CommonMark\\\\Extension\\\\TableOfContents\\\\TableOfContentsGenerator\\#__construct\\(\\) increased from 4 to 5#'\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}