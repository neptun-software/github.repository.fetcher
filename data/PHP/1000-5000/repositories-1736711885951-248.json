{
  "metadata": {
    "timestamp": 1736711885951,
    "page": 248,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Propaganistas/Laravel-Phone",
      "stars": 2792,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.15625,
          "content": "/.gitattributes export-ignore\n/.github export-ignore\n/.gitignore export-ignore\n/tests export-ignore\n/phpunit.xml.dist export-ignore\n/phpstan.neon export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0625,
          "content": "/vendor\n/.idea\ncomposer.phar\ncomposer.lock\n.phpunit.result.cache"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Propaganistas\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.328125,
          "content": "# Laravel Phone\n\n![Tests](https://github.com/Propaganistas/Laravel-Phone/workflows/Tests/badge.svg?branch=master)\n[![Latest Stable Version](https://poser.pugx.org/propaganistas/laravel-phone/v/stable)](https://packagist.org/packages/propaganistas/laravel-phone)\n[![Total Downloads](https://poser.pugx.org/propaganistas/laravel-phone/downloads)](https://packagist.org/packages/propaganistas/laravel-phone)\n[![License](https://poser.pugx.org/propaganistas/laravel-phone/license)](https://packagist.org/packages/propaganistas/laravel-phone)\n\nAdds phone number functionality to Laravel based on the [PHP port](https://github.com/giggsey/libphonenumber-for-php) of [libphonenumber by Google](https://github.com/googlei18n/libphonenumber).\n\n## Table of Contents\n\n- [Demo](#demo)\n- [Installation](#installation)\n- [Validation](#validation)\n- [Attribute casting](#attribute-casting)\n- [Utility class](#utility-phonenumber-class)\n    - [Formatting](#formatting)\n    - [Number information](#number-information)\n    - [Equality comparison](#equality-comparison)\n- [Database considerations](#database-considerations)\n\n## Demo\n\nCheck out the behavior of this package in the [demo](https://laravel-phone.herokuapp.com).\n\n## Installation\n\nRun the following command to install the latest applicable version of the package:\n\n```bash\ncomposer require propaganistas/laravel-phone\n```\n\nThe Service Provider gets discovered automatically by Laravel.\n\nIn your languages directory, add an extra translation in every `validation.php` language file:\n\n```php\n'phone' => 'The :attribute field must be a valid number.',\n```\n\n## Validation\n\nUse the `phone` keyword in your validation rules array or use the `Propaganistas\\LaravelPhone\\Rules\\Phone` rule class to define the rule in an expressive way.\n\nTo put constraints on the allowed originating countries, you can explicitly specify the allowed country codes.\n\n```php\n'phonefield'       => 'phone:US,BE',\n// 'phonefield'    => (new Phone)->country(['US', 'BE'])\n```\n\nOr to make things more dynamic, you can also match against another data field holding a country code. For example, to require a phone number to match the provided country of residence.\nMake sure the country field has the same name as the phone field but with `_country` appended for automatic discovery, or provide your custom country field name as a parameter to the validator:\n\n```php\n'phonefield'            => 'phone',\n// 'phonefield'         => (new Phone)\n'phonefield_country'    => 'required_with:phonefield',\n```\n\n```php\n'phonefield'            => 'phone:custom_country_field',\n// 'phonefield'         => (new Phone)->countryField('custom_country_field')\n'custom_country_field'  => 'required_with:phonefield',\n```\n\nNote: country codes should be [*ISO 3166-1 alpha-2 compliant*](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements).\n\nTo support _any valid internationally formatted_ phone number next to the whitelisted countries, use the `INTERNATIONAL` parameter. This can be useful when you're expecting locally formatted numbers from a specific country but also want to accept any other foreign number entered properly:\n\n```php\n'phonefield'            => 'phone:INTERNATIONAL,BE',\n// 'phonefield'         => (new Phone)->international()->country('BE')\n```\n\nTo specify constraints on the number type, just append the allowed types to the end of the parameters, e.g.:\n\n```php\n'phonefield'       => 'phone:mobile',\n// 'phonefield'    => (new Phone)->type('mobile')\n```\nThe most common types are `mobile` and `fixed_line`, but feel free to use any of the types defined [here](https://github.com/giggsey/libphonenumber-for-php/blob/master/src/PhoneNumberType.php).\n\nPrepend a type with an exclamation mark to blacklist it instead. Note that you can never use whitelisted *and* blacklisted types at the same time.\n\n```php\n'phonefield'       => 'phone:!mobile',\n// 'phonefield'    => (new Phone)->notType('mobile')\n```\n\nYou can also enable lenient validation by using the `LENIENT` parameter.\nWith leniency enabled, only the length of the number is checked instead of actual carrier patterns.\n\n```php\n'phonefield'       => 'phone:LENIENT',\n// 'phonefield'    => (new Phone)->lenient()\n```\n\n## Attribute casting\n\nTwo cast classes are provided for automatic casting of Eloquent model attributes:\n\n```php\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Propaganistas\\LaravelPhone\\Casts\\RawPhoneNumberCast;\nuse Propaganistas\\LaravelPhone\\Casts\\E164PhoneNumberCast;\n\nclass User extends Model\n{\n    public $casts = [\n        'phone_1' => RawPhoneNumberCast::class.':BE',\n        'phone_2' => E164PhoneNumberCast::class.':BE',\n    ];\n}\n```\n\nBoth classes automatically cast the database value to a PhoneNumber object for further use in your application.\n\n```php\n$user->phone // PhoneNumber object or null\n```\nWhen setting a value, they both accept a string value or a PhoneNumber object. \nThe `RawPhoneNumberCast` mutates the database value to the raw input number, while the `E164PhoneNumberCast` writes a formatted E.164 phone number to the database.\n\nIn case of `RawPhoneNumberCast`, the cast needs to be hinted about the phone country in order to properly parse the raw number into a phone object.\nIn case of `E164PhoneNumberCast` and the value to be set is not already in some international format, the cast needs to be hinted about the phone country in order to properly mutate the value.\n\nBoth classes accept cast parameters in the same way:\n1. When a similar named attribute exists, but suffixed with `_country` (e.g. phone_country), the cast will detect and use it automatically.\n2. Provide another attribute's name as a cast parameter\n3. Provide one or several country codes as cast parameters\n\n```php\npublic $casts = [\n    'phone_1' => RawPhoneNumberCast::class.':country_field',\n    'phone_2' => E164PhoneNumberCast::class.':BE',\n];\n```\n\n**Important note:** Both casts expect __valid__ phone numbers in order to smoothly convert from/to PhoneNumber objects. Please validate phone numbers before setting them on a model. Refer to the [validation documentation](#validation) to learn how to validate phone numbers.\n\n#### ⚠️ Attribute assignment and `E164PhoneNumberCast`\nDue to the nature of `E164PhoneNumberCast` a valid country attribute is expected if the number is not passed in international format. Since casts are applied in the order of the given values, be sure to set the country attribute _before_ setting the phone number attribute. Otherwise `E164PhoneNumberCast` will encounter an empty country value and throw an unexpected exception.\n\n```php\n// Wrong\n$model->fill([\n    'phone' => '012 34 56 78',\n    'phone_country' => 'BE',\n]);\n\n// Correct\n$model->fill([\n    'phone_country' => 'BE',\n    'phone' => '012 34 56 78',\n]);\n\n// Wrong\n$model->phone = '012 34 56 78';\n$model->phone_country = 'BE';\n\n// Correct\n$model->phone_country = 'BE';\n$model->phone = '012 34 56 78';\n```\n\n## Utility PhoneNumber class\n\nA phone number can be wrapped in the `Propaganistas\\LaravelPhone\\PhoneNumber` class to enhance it with useful utility methods. It's safe to directly reference these objects in views or when saving to the database as they will degrade gracefully to the E.164 format.\n\n```php\nuse Propaganistas\\LaravelPhone\\PhoneNumber;\n\n(string) new PhoneNumber('+3212/34.56.78');                // +3212345678\n(string) new PhoneNumber('012 34 56 78', 'BE');            // +3212345678\n```\n\nAlternatively you can use the `phone()` helper function. It returns a `Propaganistas\\LaravelPhone\\PhoneNumber` instance or the formatted string if `$format` was provided:\n\n```php\nphone('+3212/34.56.78');                // PhoneNumber instance\nphone('012 34 56 78', 'BE');            // PhoneNumber instance\nphone('012 34 56 78', 'BE', $format);   // string\n```\n\n### Formatting\nA PhoneNumber can be formatted in various ways:\n\n```php\n$phone = new PhoneNumber('012/34.56.78', 'BE');\n\n$phone->format($format);       // See libphonenumber\\PhoneNumberFormat\n$phone->formatE164();          // +3212345678\n$phone->formatInternational(); // +32 12 34 56 78\n$phone->formatRFC3966();       // tel:+32-12-34-56-78\n$phone->formatNational();      // 012 34 56 78\n\n// Formats so the number can be called straight from the provided country.\n$phone->formatForCountry('BE'); // 012 34 56 78\n$phone->formatForCountry('NL'); // 00 32 12 34 56 78\n$phone->formatForCountry('US'); // 011 32 12 34 56 78\n\n// Formats so the number can be clicked on and called straight from the provided country using a cellphone.\n$phone->formatForMobileDialingInCountry('BE'); // 012345678\n$phone->formatForMobileDialingInCountry('NL'); // +3212345678\n$phone->formatForMobileDialingInCountry('US'); // +3212345678\n```\n\n### Number information\nGet some information about the phone number:\n\n```php\n$phone = new PhoneNumber('012 34 56 78', 'BE');\n\n$phone->getType();              // 'fixed_line'\n$phone->isOfType('fixed_line'); // true\n$phone->getCountry();           // 'BE'\n$phone->isOfCountry('BE');      // true\n```\n\n### Equality comparison\nCheck if a given phone number is (not) equal to another one:\n\n```php\n$phone = new PhoneNumber('012 34 56 78', 'BE');\n\n$phone->equals('012/34.56.76', 'BE')       // true\n$phone->equals('+32 12 34 56 78')          // true\n$phone->equals( $anotherPhoneObject )      // true/false\n\n$phone->notEquals('045 67 89 10', 'BE')    // true\n$phone->notEquals('+32 45 67 89 10')       // true\n$phone->notEquals( $anotherPhoneObject )   // true/false\n```\n\n## Database considerations\n\n> Disclaimer: Phone number handling is quite different in each application. The topics mentioned below are therefore meant as a set of thought starters; support will **not** be provided.\n\nStoring phone numbers in a database has always been a speculative topic and there's simply no silver bullet. It all depends on your application's requirements. Here are some things to take into account, along with an implementation suggestion. Your ideal database setup will probably be a combination of some of the pointers detailed below.\n\n### Uniqueness\n\nThe E.164 format globally and uniquely identifies a phone number across the world. It also inherently implies a specific country and can be supplied as-is to the `phone()` helper.\n\nYou'll need:\n\n* One column to store the phone number\n* To format the phone number to E.164 before persisting it\n\nExample:\n\n* User input = `012/45.65.78`\n* Database column\n  * `phone` (varchar) = `+3212456578`\n\n### Presenting the phone number the way it was inputted\n\nIf you store formatted phone numbers the raw user input will unretrievably get lost. It may be beneficial to present your users with their very own inputted phone number, for example in terms of improved user experience. \n\nYou'll need:\n* Two columns to store the raw input and the correlated country\n\nExample:\n\n* User input = `012/34.56.78`\n* Database columns\n  * `phone` (varchar) = `012/34.56.78`\n  * `phone_country` (varchar) = `BE`\n\n### Supporting searches\n\nSearching through phone numbers can quickly become ridiculously complex and will always require deep understanding of the context and extent of your application. Here's _a_ possible approach covering quite a lot of \"natural\" use cases.\n\nYou'll need:\n* Three additional columns to store searchable variants of the phone number:\n  * Normalized input (raw input with all non-alpha characters stripped)\n  * National formatted phone number (with all non-alpha characters stripped)\n  * E.164 formatted phone number\n* Probably a `saving()` observer (or equivalent) to prefill the variants before persistence\n* An extensive search query utilizing the searchable variants\n  \nExample:\n\n* User input = `12/34.56.78`  \n* Observer method:\n  ```php\n  public function saving(User $user)\n  {\n      if ($user->isDirty('phone') && $user->phone) {\n          $user->phone_normalized = preg_replace('/[^0-9]/', '', $user->phone);\n          $user->phone_national = preg_replace('/[^0-9]/', '', phone($user->phone, $user->phone_country)->formatNational());\n          $user->phone_e164 = phone($user->phone, $user->phone_country)->formatE164();\n      }\n  }\n  ```\n* Database columns\n  * `phone_normalized` (varchar) = `12345678`\n  * `phone_national` (varchar) = `012345678`\n  * `phone_e164` (varchar) = `+3212345678`\n* Search query:\n  ```php\n  // $search holds the search term\n  User::where(function($query) use ($search) {\n    $query->where('phone_normalized', 'LIKE', preg_replace('/[^0-9]/', '', $search) . '%')\n          ->orWhere('phone_national', 'LIKE', preg_replace('/[^0-9]/', '', $search) . '%')\n          ->orWhere('phone_e164', 'LIKE', preg_replace('/[^+0-9]/', '', $search) . '%')\n  });\n  ```\n"
        },
        {
          "name": "UPGRADING.md",
          "type": "blob",
          "size": 2.865234375,
          "content": "# Upgrading\n\n## From <5.3 to >=5.3\n\nThe internal dependency `giggsey/libphonenumber-for-php` is now substituted by `giggsey/libphonenumber-for-php-lite`.\n\n`libphonenumber-for-php-lite` is a lightweight drop-in replacement for `libphonenumber-for-php`, significantly reducing the package size being pulled in. `libphonenumber-for-php-lite` excludes geolocation, carrier information and short number info.\n\nThis is a non-breaking change for functionality provided by `Laravel-Phone`.\nHowever, if you have defined a macro, please review your code and if needed require `giggsey/libphonenumber-for-php` as an explicit dependency in your project.\n\n## From 4.x to 5.x\n\nThe package now minimally requires PHP 8.0 and Laravel 9.0. It also supports Laravel 10.\nAll documented behavior is preserved. There are just some minor syntactical changes that might need your attention.\n\n**Estimated time to upgrade: 0 to 5 minutes**\n\n### Validation\n\n#### New feature\n- The `Phone` rule is now available to be referenced as a [rule object](https://laravel.com/docs/9.x/validation#using-rule-objects) (`Propaganistas\\LaravelPhone\\Rules\\Phone`):\n    ```php\n    'phonefield' => (new Phone)->mobile()->country('BE')\n    ```\n\n#### Breaking changes\n- The `detect()` method of the Rule macro has been **renamed** to `international()` to better describe its behavior.\n    ```php\n    'phonefield' => Rule::phone()->detect()\n    // becomes\n    'phonefield' => Rule::phone()->international()\n    ```\n- The `AUTO` parameter has been **renamed** to `INTERNATIONAL` to better describe its behavior.\n    ```php\n    'phonefield' => 'phone:AUTO'\n    // becomes\n    'phonefield' => 'phone:INTERNATIONAL'\n    ```\n\n### Utility PhoneNumber class\n\n#### Breaking changes\n- The `make()` method has been **removed** as it was redundant. Use the `phone()` helper or simply construct a new object.\n    ```php\n    PhoneNumber::make($number, $country)\n\n    // becomes\n    phone($number, $country)                 // 1-to-1 replacement ; chainable with subsequent methods\n    // or\n    new PhoneNumber($number, $country)       // wrap in additional parentheses to chain with subsequent methods\n    ```\n- the `ofCountry()` method has been **removed**. Specification of possible countries is now only possible while constructing the object.\n    ```php\n    $object = new PhoneNumber($number);\n    $object->ofCountry($country);\n\n    // becomes\n    $object = new PhoneNumber($number, $country);    // or  phone($number, $country)\n    ```\n- The **undocumented** public method `numberLooksInternational()` has been removed. There is no alternative.\n\n### Attribute casting\n\n#### Breaking changes\n- Similar to the other cast, `RawPhoneNumberCast` will now also throw an exception when it gets invoked with an invalid phone object (i.e. while __accessing__ the casted attribute). Make sure to validate phone numbers before persisting them and provide the appropriate country code to the cast.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.2744140625,
          "content": "{\n    \"name\": \"propaganistas/laravel-phone\",\n    \"description\": \"Adds phone number functionality to Laravel based on Google's libphonenumber API.\",\n    \"keywords\": [\n        \"laravel\",\n        \"libphonenumber\",\n        \"validation\",\n        \"phone\"\n    ],\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Propaganistas\",\n            \"email\": \"Propaganistas@users.noreply.github.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"illuminate/contracts\": \"^10.0|^11.0\",\n        \"illuminate/support\": \"^10.0|^11.0\",\n        \"illuminate/validation\": \"^10.0|^11.0\",\n        \"giggsey/libphonenumber-for-php-lite\": \"^8.13.35\"\n    },\n    \"require-dev\": {\n        \"orchestra/testbench\": \"*\",\n        \"phpunit/phpunit\": \"^10.5\",\n        \"laravel/pint\": \"^1.14\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Propaganistas\\\\LaravelPhone\\\\\": \"src/\"\n        },\n        \"files\": [\n            \"src/helpers.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Propaganistas\\\\LaravelPhone\\\\Tests\\\\\": \"tests/\"\n        }\n    },\n    \"extra\": {\n        \"laravel\": {\n            \"providers\": [\n                \"Propaganistas\\\\LaravelPhone\\\\PhoneServiceProvider\"\n            ]\n        }\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.5517578125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"Package Test Suite\">\n            <directory suffix=\".php\">tests</directory>\n            <exclude>tests/TestCase.php</exclude>\n        </testsuite>\n    </testsuites>\n    <source>\n        <include>\n            <directory>src</directory>\n        </include>\n    </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}