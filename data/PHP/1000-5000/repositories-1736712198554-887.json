{
  "metadata": {
    "timestamp": 1736712198554,
    "page": 887,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "thephpleague/mime-type-detection",
      "stars": 1287,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.39453125,
          "content": "* text=auto\n\n/phpstan.neon export-ignore\n/bin export-ignore\n/.github export-ignore\n/.php-cs-fixer.dist.php export-ignore\n/.scrutinizer.yml export-ignore\n/src/Generation export-ignore\n/test_files export-ignore\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/.travis.yml export-ignore\n/**/*Test.php export-ignore\n/phpunit.php export-ignore\n/phpunit.xml.dist export-ignore\n/readme.md export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1083984375,
          "content": "/vendor/\n/coverage/\n/.phpunit.result.cache\n/.php-cs-fixer.php\n/.php-cs-fixer.cache\n/phpunit.xml\n/composer.lock\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 1.171875,
          "content": "<?php\n\n$finder = PhpCsFixer\\Finder::create()\n    ->in([__DIR__ . '/src'])\n;\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@PSR2' => true,\n        'array_syntax' => ['syntax' => 'short'],\n        'binary_operator_spaces' => true,\n        'single_line_after_imports' => true,\n        'blank_line_before_statement' => ['statements' => ['return']],\n        'cast_spaces' => true,\n        'concat_space' => ['spacing' => 'one'],\n        'no_singleline_whitespace_before_semicolons' => true,\n        'not_operator_with_space' => true,\n        'no_unused_imports' => true,\n        'phpdoc_align' => false,\n        'phpdoc_indent' => true,\n        'phpdoc_no_access' => true,\n        'phpdoc_no_alias_tag' => true,\n        'phpdoc_no_package' => true,\n        'phpdoc_scalar' => true,\n        'phpdoc_separation' => true,\n        'phpdoc_summary' => true,\n        'phpdoc_to_comment' => true,\n        'phpdoc_trim' => true,\n        'single_blank_line_at_eof' => true,\n        'ternary_operator_spaces' => true,\n        'ordered_imports' => [\n            'sort_algorithm' => 'alpha',\n            'imports_order' => ['const', 'class', 'function'],\n        ]\n    ])\n    ->setFinder($finder)\n    ;\n"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 0.74609375,
          "content": "filter:\n    paths: [\"src/*\"]\n    excluded_paths: [\"src/*Test.php\", \"src/Generation/*\"]\nchecks:\n  php:\n    code_rating: true\n    remove_extra_empty_lines: true\n    remove_php_closing_tag: true\n    remove_trailing_whitespace: true\n    fix_use_statements:\n      remove_unused: true\n      preserve_multiple: false\n      preserve_blanklines: true\n      order_alphabetically: true\n    fix_php_opening_tag: true\n    fix_linefeed: true\n    fix_line_ending: true\n    fix_identation_4spaces: true\n    fix_doc_comments: true\ntools:\n  external_code_coverage:\n    timeout: 1800\n    runs: 6\n  php_code_coverage: false\n  php_code_sniffer:\n    config:\n      standard: PSR2\n    filter:\n      paths: ['src']\n  php_loc:\n    enabled: true\n    excluded_dirs: [vendor]\n  php_sim: false\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.9755859375,
          "content": "# Changelog\n\n## 1.16.0 - 2025-09-21\n\n- Updated lookup\n- Prepped for 8.4 implicit nullable deprecation\n\n## 1.15.0 - 2024-01-28\n\n- Updated lookup\n\n## 1.14.0 - 2022-10-17\n\n### Updated\n\n- Updated lookup\n\n## 1.13.0 - 2023-08-05\n\n### Added\n\n- A reverse lookup mechanism to fetch one or all extensions for a given mimetype\n\n## 1.12.0 - 2023-08-03\n\n### Updated\n\n- Updated lookup\n\n## 1.11.0 - 2023-04-17\n\n### Updated\n\n- Updated lookup\n\n## 1.10.0 - 2022-04-11\n\n### Fixed\n\n- Added Flysystem v1 inconclusive mime-types and made it configurable as a constructor parameter.\n\n## 1.9.0 - 2021-11-21\n\n### Updated\n\n- Updated lookup\n\n## 1.8.0 - 2021-09-25\n\n### Added\n\n- Added the decorator `OverridingExtensionToMimeTypeMap` which allows you to override values.\n\n## 1.7.0 - 2021-01-18\n\n### Added\n\n- Added a `bufferSampleSize` parameter to the `FinfoMimeTypeDetector` class that allows you to send a reduced content sample which costs less memory.\n\n## 1.6.0 - 2021-01-18\n\n### Changes\n\n- Updated generated mime-type map\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0380859375,
          "content": "Copyright (c) 2013-2023 Frank de Jonge\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.7822265625,
          "content": "{\n    \"name\": \"league/mime-type-detection\",\n    \"description\": \"Mime-type detection for Flysystem\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Frank de Jonge\",\n            \"email\": \"info@frankdejonge.nl\"\n        }\n    ],\n    \"scripts\": {\n        \"test\": \"vendor/bin/phpunit\",\n        \"phpstan\": \"vendor/bin/phpstan analyse -l 6 src\"\n    },\n    \"require\": {\n        \"php\": \"^7.4 || ^8.0\",\n        \"ext-fileinfo\": \"*\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^8.5.8 || ^9.3 || ^10.0\",\n        \"phpstan/phpstan\": \"^0.12.68\",\n        \"friendsofphp/php-cs-fixer\": \"^3.2\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"League\\\\MimeTypeDetection\\\\\": \"src\"\n        }\n    },\n    \"config\": {\n        \"platform\": {\n            \"php\": \"7.4.0\"\n        }\n    }\n}\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 0.0517578125,
          "content": "parameters:\n    checkMissingIterableValueType: false\n"
        },
        {
          "name": "phpunit.php",
          "type": "blob",
          "size": 0.0458984375,
          "content": "<?php\n\ninclude __DIR__.'/vendor/autoload.php';\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.6103515625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit colors=\"true\" bootstrap=\"phpunit.php\">\n    <testsuites>\n        <testsuite name=\"Flysystem MimeTypeDetection\">\n            <directory suffix=\"Test.php\">./src/</directory>\n        </testsuite>\n    </testsuites>\n    <filter>\n        <whitelist>\n            <directory>./src/</directory>\n            <exclude>\n                <directory suffix=\".php\">./src/Generation</directory>\n                <directory suffix=\"Test.php\">./src/</directory>\n                <directory suffix=\"Fixture.php\">./src/</directory>\n            </exclude>\n        </whitelist>\n    </filter>\n</phpunit>\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 4.4384765625,
          "content": "## League Mime Type Detection\n\n[![Author](https://img.shields.io/badge/author-@frankdejonge-blue.svg)](https://twitter.com/frankdejonge)\n[![Source Code](https://img.shields.io/badge/source-league%2Fmime--type--detection-blue.svg)](https://github.com/thephpleague/mime-type-detection)\n[![Latest Version](https://img.shields.io/github/tag/thephpleague/mime-type-detection.svg)](https://github.com/thephpleague/mime-type-detection/releases)\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg)](https://github.com/thephpleague/mime-type-detection/blob/master/LICENSE)\n[![Build Status](https://travis-ci.com/thephpleague/mime-type-detection.svg?branch=master)](https://travis-ci.com/thephpleague/mime-type-detection)\n[![Coverage Status](https://img.shields.io/scrutinizer/coverage/g/thephpleague/mime-type-detection.svg)](https://scrutinizer-ci.com/g/thephpleague/mime-type-detection/code-structure)\n[![Quality Score](https://img.shields.io/scrutinizer/g/thephpleague/mime-type-detection.svg)](https://scrutinizer-ci.com/g/thephpleague/mime-type-detection)\n[![Total Downloads](https://img.shields.io/packagist/dt/league/mime-type-detection.svg)](https://packagist.org/packages/league/mime-type-detection)\n![php 7.2+](https://img.shields.io/badge/php-min%207.2-red.svg)\n\n\nThis package supplies a generic mime-type detection interface with a\n`finfo` based implementation.\n\n## Usage\n\n```bash\ncomposer require league/mime-type-detection\n```\n\n## Consumer interface\n\nYour code is advised to couple to the following interfaces:\n\n- `League\\MimetypeDetection\\MimeTypeDetector`<br/>\n  This contract is used to detect mimetypes based on file names and file contents.\n- `League\\MimetypeDetection\\ExtensionLookup`<br/>\n  This contract is used to lookup one or all mimetypes for a given file extension.\n  Added in `1.13.0`.\n\n### Detectors\n\nFinfo with extension fallback:\n\n```php\n$detector = new League\\MimeTypeDetection\\FinfoMimeTypeDetector();\n\n// Detect by contents, fall back to detection by extension.\n$mimeType = $detector->detectMimeType('some/path.php', 'string contents');\n\n// Detect by contents only, no extension fallback.\n$mimeType = $detector->detectMimeTypeFromBuffer('string contents');\n\n// Detect by actual file, no extension fallback.\n$mimeType = $detector->detectMimeTypeFromFile('existing/path.php');\n\n// Only detect by extension\n$mimeType = $detector->detectMimeTypeFromPath('any/path.php');\n\n// Constructor options\n$detector = new League\\MimeTypeDetection\\FinfoMimeTypeDetector(\n  $pathToMimeDatabase, // Custom mime database location, default: ''\n  $customExtensionMap, // Custom extension fallback mapp, default: null\n  $bufferSampleSize // Buffer size limit, used to take a sample (substr) from the input buffer to reduce memory consumption.\n);\n```\n\nExtension only:\n\n```php\n$detector = new League\\MimeTypeDetection\\ExtensionMimeTypeDetector();\n\n// Only detect by extension, ignores the file contents\n$mimeType = $detector->detectMimeType('some/path.php', 'string contents');\n\n// Always returns null\n$mimeType = $detector->detectMimeTypeFromBuffer('string contents');\n\n// Only detect by extension\n$mimeType = $detector->detectMimeTypeFromFile('existing/path.php');\n\n// Only detect by extension\n$mimeType = $detector->detectMimeTypeFromPath('any/path.php');\n```\n\n## Extension lookup by mime-type\n\n> This feature was added in version `1.13.0`\n\nThe various implementations can look up the extensions that can be used for\na given mime-type.\n\n```\n// string | null\n$extension = $detector->lookupExtension($mime$type);\n\n// array<string>\n$allExtensions = $detector->lookupAllExtensions($mimeType);\n```\n\n## Extension mime-type lookup\n\nAs a fallback for `finfo` based lookup, an extension map\nis used to determine the mime-type. There is an advised implementation\nshipped, which is generated from information collected by the npm\npackage [mime-db](https://www.npmjs.com/package/mime-db).\n\n### Provided extension maps\n\nGenerated:\n\n```php\n$map = new League\\MimeTypeDetection\\GeneratedExtensionToMimeTypeMap();\n\n// string mime-type or NULL\n$mimeType = $map->lookupMimeType('png');\n```\n\nOverriding decorator\n\n```php\n$innerMap = new League\\MimeTypeDetection\\GeneratedExtensionToMimeTypeMap();\n$map = new League\\MimeTypeDetection\\OverridingExtensionToMimeTypeMap($innerMap, ['png' => 'custom/mimetype']);\n\n// string \"custom/mimetype\"\n$mimeType = $map->lookupMimeType('png');\n```\n\nEmpty:\n\n```php\n$map = new League\\MimeTypeDetection\\EmptyExtensionToMimeTypeMap();\n\n// Always returns NULL\n$mimeType = $map->lookupMimeType('png');\n```\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_files",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}