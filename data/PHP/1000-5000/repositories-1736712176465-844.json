{
  "metadata": {
    "timestamp": 1736712176465,
    "page": 844,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "iamcal/oembed",
      "stars": 1339,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".DS_Store",
          "type": "blob",
          "size": 8.00390625,
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0673828125,
          "content": "node_modules/\n.DS_Store\nproviders.json\n/secrets/cloudflare-api-token\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.01953125,
          "content": "unsafe-perm = true\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Cal Henderson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.1142578125,
          "content": "oEmbed Spec\n===========\n\n[![Build Status](https://github.com/iamcal/oembed/actions/workflows/build.yml/badge.svg)](https://github.com/iamcal/oembed/actions)\n<span class=\"badge-npmversion\"><a href=\"https://npmjs.org/package/oembed-providers\" title=\"View this project on NPM\"><img src=\"https://img.shields.io/npm/v/oembed-providers.svg\" alt=\"NPM version\" /></a></span>\n\nThis repo represents the current oEmbed spec as seen at \n<a href=\"http://oembed.com\">http://oembed.com</a> and any drafts, in the `www` directory.\n\nIt also contains configuration information (the registry) for oEmbed providers, as YAML files in the `providers` directory.\n\n\n## Consuming the provider registry\n\nIf you need to use the provider registry directly, you can install this package using NPM:\n\n    npm install https://github.com/iamcal/oembed\n\nThat will install the providers file into `node_modules/oembed-providers/providers.json`, where you can ingest it directly.\n\n\n## Maintainers: Publishing to NPM\n\n* Update version in `package.json` to today's date\n* `npm login` if you haven't already\n* `npm publish`\n* Check https://www.npmjs.com/package/oembed-providers\n\n"
        },
        {
          "name": "build.js",
          "type": "blob",
          "size": 0.5556640625,
          "content": "const fs = require(\"fs\");\nconst path = require(\"path\");\nconst yaml = require(\"js-yaml\");\n\nconsole.log(\n  JSON.stringify(\n    process.argv.slice(2).reduce((acc, p) => {\n      const entries = yaml.load(\n        fs.readFileSync(path.resolve(process.cwd(), p), \"utf8\")\n      );\n\n      for (const entry of entries) {\n        for (const endpoint of entry.endpoints) {\n          delete endpoint.docs_url;\n          delete endpoint.example_urls;\n          delete endpoint.notes;\n        }\n\n        acc.push(entry);\n      }\n\n      return acc;\n    }, []),\n    null,\n    4\n  )\n);\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 0.431640625,
          "content": "#!/bin/bash\n\n# neuron-base puts it in the wrong place, because the repo-name does not inclkude \".com\"\nmv /var/www/html/oembed /var/www/html/oembed.com\n\nln -s /var/www/html/oembed.com/site.conf /etc/apache2/sites-available/oembed.com.conf\na2ensite oembed.com\n\napt-get install -y libyaml-dev\npecl install yaml\necho \"extension=yaml.so\" >> /etc/php/7.0/apache2/php.ini\necho \"extension=yaml.so\" >> /etc/php/7.0/cli/php.ini\n\nservice apache2 reload\n"
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 0.6982421875,
          "content": "{\n  \"name\": \"oembed-providers\",\n  \"version\": \"1.0.20210622\",\n  \"lockfileVersion\": 1,\n  \"requires\": true,\n  \"dependencies\": {\n    \"argparse\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz\",\n      \"integrity\": \"sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==\",\n      \"dev\": true\n    },\n    \"js-yaml\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/js-yaml/-/js-yaml-4.0.0.tgz\",\n      \"integrity\": \"sha512-pqon0s+4ScYUvX30wxQi3PogGFAlUyH0awepWvwkj4jD4v+ova3RiYw8bmA6x2rDrEaj8i/oWKoRxpVNW+Re8Q==\",\n      \"dev\": true,\n      \"requires\": {\n        \"argparse\": \"^2.0.1\"\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.6767578125,
          "content": "{\n  \"name\": \"oembed-providers\",\n  \"version\": \"1.0.20241022\",\n  \"license\": \"MIT\",\n  \"description\": \"oEmbed providers\",\n  \"main\": \"providers.json\",\n  \"files\": [\n    \"providers.*\"\n  ],\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"node ./build.js providers/*.yml > providers.json\",\n    \"prepare\": \"npm run build\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/iamcal/oembed.git\"\n  },\n  \"keywords\": [\n    \"oembed\",\n    \"json\",\n    \"providers\",\n    \"list\"\n  ],\n  \"author\": \"Cal Henderson <cal@iamcal.com>\",\n  \"bugs\": {\n    \"url\": \"https://github.com/iamcal/oembed/issues\"\n  },\n  \"devDependencies\": {\n    \"js-yaml\": \"^4.0.0\"\n  }\n}\n"
        },
        {
          "name": "providers-disabled",
          "type": "tree",
          "content": null
        },
        {
          "name": "providers",
          "type": "tree",
          "content": null
        },
        {
          "name": "secrets",
          "type": "tree",
          "content": null
        },
        {
          "name": "site.conf",
          "type": "blob",
          "size": 0.796875,
          "content": "<Directory \"/var/www/html/oembed.com/www\">\n\tOptions -Indexes\n\tAllowOverride All\n\n\tphp_flag display_errors on\n\tphp_value error_reporting 32767\n\tphp_value magic_quotes_gpc 0\n\tphp_value register_globals 0\n\tphp_value magic_quotes_runtime 0\n\tphp_value register_long_arrays on\n\n\tDirectoryIndex index.php index.htm\n\n\tOrder allow,deny\n\tAllow from all\n\n\tRewriteEngine On\n\tRewriteCond %{http_host} !^oembed\\.com [NC]\n\tRewriteCond %{http_host} !^origin\\.oembed\\.com [NC]\n\tRewriteRule ^(.*)$ %{REQUEST_SCHEME}://oembed.com/$1 [R=301,NC]\n\n\tRewriteRule ^providers.json$ /json.php [L]\n</Directory>\n\n<VirtualHost *:80>\n\tDocumentRoot /var/www/html/oembed.com/www\n\tServerName oembed.com\n\tServerAlias www.oembed.com origin.oembed.com\n\n\tRedirect permanent / https://oembed.com/\n</VirtualHost>\n\nInclude /var/www/html/oembed.com/ssl.conf\n"
        },
        {
          "name": "ssl.conf",
          "type": "blob",
          "size": 0.4130859375,
          "content": "<VirtualHost *:443>\n\tServerName oembed.com\n\tServerAlias www.oembed.com origin.oembed.com\n\tDocumentRoot /var/www/html/oembed.com/www\n\n\tSSLEngine on\n\tSSLCertificateFile /etc/letsencrypt/live/www.oembed.com/cert.pem\n\tSSLCertificateChainFile /etc/letsencrypt/live/www.oembed.com/chain.pem\n\tSSLCertificateKeyFile /etc/letsencrypt/live/www.oembed.com/privkey.pem\n\n\tInclude /etc/letsencrypt/options-ssl-apache.conf\n</VirtualHost>\n"
        },
        {
          "name": "test.php",
          "type": "blob",
          "size": 5.6923828125,
          "content": "<?php\n\t$num_files = 0;\n\t$num_entries = 0;\n\n\t$expected_keys = array(\n\t\t'#'\t\t\t\t=> 1,\n\t\t'#/provider_name'\t\t=> 1,\n\t\t'#/provider_url'\t\t=> 1,\n\t\t'#/endpoints'\t\t\t=> 1,\n\t\t'#/endpoints/#'\t\t\t=> 1,\n\t\t'#/endpoints/#/schemes'\t\t=> 1,\n\t\t'#/endpoints/#/schemes/#'\t=> 1,\n\t\t'#/endpoints/#/url'\t\t=> 1,\n\t\t'#/endpoints/#/example_urls'\t=> 1,\n\t\t'#/endpoints/#/example_urls/#'\t=> 1,\n\t\t'#/endpoints/#/discovery'\t=> 1,\n\t\t'#/endpoints/#/formats'\t\t=> 1,\n\t\t'#/endpoints/#/formats/#'\t=> 1,\n\t\t'#/endpoints/#/notes'\t\t=> 1,\n\t\t'#/endpoints/#/notes/#'\t\t=> 1,\n\t\t'#/endpoints/#/docs_url'\t=> 1,\n\t);\n\n#$p1 = yaml_parse_file(\"providers/vidmount.yml\", -1);\n#$p2 = yaml_parse_file(\"providers/vidyard.yml\", -1);\n#echo var_export($p1);\n#echo var_export($p2);\n#exit;\n\n\t$dh = opendir('providers');\n\twhile (($file = readdir($dh)) !== false){\n\t\tif (preg_match('!\\.yml$!', $file)){\n\t\t\t$partial = yaml_parse_file(\"providers/$file\");\n\t\t\tif (!$partial || !is_array($partial)){\n\t\t\t\techo \"Unable to parse provider file providers/$file\\n\";\n\t\t\t\texit(1);\n\t\t\t}\n\n\t\t\t# check if there is more than one document in the file\n\t\t\t$full = yaml_parse_file(\"providers/$file\", -1);\n\t\t\tif (count($full) != 1){\n\t\t\t\techo \"More than one YAML document specified in providers/$file\\n\";\n\t\t\t\techo \"(The file should end with \\\"...\\\", not \\\"---\\\")\\n\";\n\t\t\t\texit(1);\n\t\t\t}\n\n\t\t\t$num_files++;\n\t\t\t$num_entries += count($partial);\n\n\n\t\t\t#\n\t\t\t# check for any unexpected keys\n\t\t\t#\n\n\t\t\t$keys = check_keys($partial);\n\t\t\tforeach ($keys as $k){\n\t\t\t\tif (!isset($expected_keys[$k])){\n\t\t\t\t\techo \"Unexpected key {$k} in provider file providers/$file\\n\";\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t#\n\t\t\t# check that we define at least one endpoint and that each endpoint has a scheme and a url\n\t\t\t#\n\n\t\t\tforeach ($partial as $def){\n\t\t\t\tif (!isset($def['endpoints']) || !count($def['endpoints'])){\n\t\t\t\t\techo \"No endpoints defined in provider file providers/$file\\n\";\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tforeach ($def['endpoints'] as $endpoint){\n\n\t\t\t\t\t# this test is currently disabled because three providers fail it.\n\t\t\t\t\t# i _believe_ they should be deleted, as they are of no use to consumers.\n\n\t\t\t\t\tif (!isset($endpoint['discovery']) || $endpoint['discovery'] === 0){\n\t\t\t\t\t\tif (!isset($endpoint['schemes']) || !count($endpoint['schemes'])){\n\t\t\t\t\t\t\techo \"Endpoint without schemes or discovery found in provider file providers/$file\\n\";\n\t\t\t\t\t\t\tprint_r($endpoint);\n\t\t\t\t\t\t\texit(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!isset($endpoint['url'])){\n\t\t\t\t\t\techo \"Endpoint without URL found in provider file providers/$file\\n\";\n\t\t\t\t\t\tprint_r($endpoint);\n\t\t\t\t\t\texit(1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (preg_match('!\\*!', $endpoint['url'])){\n\t\t\t\t\t\techo \"Endpoint URL contains a wildcard in provider file providers/$file\\n\";\n\t\t\t\t\t\tprint_r($endpoint);\n\t\t\t\t\t\texit(1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isset($endpoint['example_urls']))\n\t\t\t\t\tforeach ($endpoint['example_urls'] as $example){\n\n\t\t\t\t\t\tif (!preg_match('!^https?://!', $example)){\n\t\t\t\t\t\t\techo \"Endpoint example URL does not start with http:// or https:// in provider file providers/$file\\n\";\n\t\t\t\t\t\t\tprint_r($endpoint);\n\t\t\t\t\t\t\texit(1);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!preg_match('!url=!', $example)){\n\t\t\t\t\t\t\techo \"Endpoint example URL does not contain url= param in provider file providers/$file\\n\";\n\t\t\t\t\t\t\tprint_r($endpoint);\n\t\t\t\t\t\t\texit(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isset($endpoint['schemes'])){\n\t\t\t\t\tforeach ($endpoint['schemes'] as $scheme){\n\n\t\t\t\t\t\t# check for people trying to put regexes in the schemes (e.g. \"(foo|bar)\")\n\t\t\t\t\t\tif (strpos($scheme, '(') !== false){\n\t\t\t\t\t\t\techo \"Scheme contains illegal character '(' in provider file providers/$file\\n\";\n\t\t\t\t\t\t\tprint_r($endpoint['schemes']);\n\t\t\t\t\t\t\texit(1);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (strpos($scheme, ')') !== false){\n\t\t\t\t\t\t\techo \"Scheme contains illegal character ')' in provider file providers/$file\\n\";\n\t\t\t\t\t\t\tprint_r($endpoint['schemes']);\n\t\t\t\t\t\t\texit(1);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t# check for wildcards in schemes (and that a scheme exists)\n\t\t\t\t\t\tif (!preg_match('!^([a-z]+):!', $scheme)){\n\t\t\t\t\t\t\techo \"Scheme URL must contain a scheme which itself may not contain wildcards in provider file providers/$file\\n\";\n\t\t\t\t\t\t\tprint_r($endpoint['schemes']);\n\t\t\t\t\t\t\texit(1);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t# for HTTP(S) URLs, check for domain wildcards\n\t\t\t\t\t\tif (preg_match('!^https?://([^/]+)!', $scheme, $m)){\n\t\t\t\t\t\t\t$domain = $m[1];\n\t\t\t\t\t\t\t$parts = array_reverse(explode('.', $domain));\n\n\t\t\t\t\t\t\t# allow 'foo.com' but no 'com'\n\t\t\t\t\t\t\tif (count($parts) < 2){\n\t\t\t\t\t\t\t\techo \"Scheme domain must be fully qualified in provider file providers/$file\\n\";\n\t\t\t\t\t\t\t\tprint_r($endpoint['schemes']);\n\t\t\t\t\t\t\t\texit(1);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t# '*.foo.com' is ok, but '*.com' is not\n\t\t\t\t\t\t\tif ($parts[0] == '*' || $parts[1] == '*'){\n\t\t\t\t\t\t\t\techo \"Scheme domain may not contain a wildcard as the TLD in provider file providers/$file\\n\";\n\t\t\t\t\t\t\t\tprint_r($endpoint['schemes']);\n\t\t\t\t\t\t\t\texit(1);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t# domain atoms may either be a wildcard, or a literal match,\n\t\t\t\t\t\t\t# so '*.foo.bar.com' is ok, but '*foo.bar.com' is not\n\t\t\t\t\t\t\tforeach ($parts as $part){\n\t\t\t\t\t\t\t\tif (strpos($part, '*') !== false && $part !== '*'){\n\t\t\t\t\t\t\t\t\techo \"Scheme domain wildcards must be for a whole atom TLD in provider file providers/$file\\n\";\n\t\t\t\t\t\t\t\t\tprint_r($endpoint['schemes']);\n\t\t\t\t\t\t\t\t\texit(1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}else if (in_array($file,  ['README.md', '.', '..'])){\n\t\t\t# these are expected to be here\n\t\t}else{\n\t\t\techo \"Unexpected file {$file} in providers directory - your file must end in .yml\\n\";\n\t\t\texit(1);\n\t\t}\n\t}\n\n\techo \"Loaded $num_files provider files, containing $num_entries entries\\n\";\n\texit(0);\n\n\n\tfunction check_keys($a){\n\t\t$out = array();\n\t\tcheck_keys_inner('', $a, $out);\n\t\treturn array_keys($out);\n\t}\n\n\tfunction check_keys_inner($prefix, $a, &$out){\n\t\tforeach ($a as $k => $v){\n\t\t\t$key = is_int($k) ? '#' : $k;\n\t\t\t$out[$prefix.$key] = 1;\n\t\t\tif (is_array($v)){\n\t\t\t\tcheck_keys_inner($prefix.$key.'/', $v, $out);\n\t\t\t}\n\t\t}\n\t}\n"
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 0.2900390625,
          "content": "#!/bin/bash\ngit pull --rebase\nkey=$(cat secrets/cloudflare-api-token)\ncurl -X POST \"https://api.cloudflare.com/client/v4/zones/81e818e9878c5dc03727566c901a51d7/purge_cache\" \\\n     -H \"Authorization: Bearer $key\" \\\n     -H \"Content-Type: application/json\" \\\n     --data '{\"purge_everything\":true}'\n"
        },
        {
          "name": "www",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}