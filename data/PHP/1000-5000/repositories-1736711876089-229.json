{
  "metadata": {
    "timestamp": 1736711876089,
    "page": 229,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gharlan/alfred-github-workflow",
      "stars": 2902,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0712890625,
          "content": "/.php-cs-fixer.cache\n\n/composer.lock\n/vendor/\n\n/yarn.lock\n/node_modules/\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 0.4990234375,
          "content": "<?php\n\nreturn (new PhpCsFixer\\Config())\n    ->setRiskyAllowed(true)\n    ->setRules([\n        '@Symfony' => true,\n        '@Symfony:risky' => true,\n        'empty_loop_body' => ['style' => 'semicolon'],\n        'method_argument_space' => false,\n        'modernize_strpos' => false,\n        'native_constant_invocation' => false,\n        'no_superfluous_phpdoc_tags' => false,\n        'psr_autoloading' => false,\n        'no_useless_else' => true,\n    ])\n    ->setFinder((new PhpCsFixer\\Finder())->in(__DIR__))\n;\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.6640625,
          "content": "Changelog\n=========\n\nVersion 1.9.1 – 2024-12-05\n--------------------------\n\n### Bugfix\n\n* Fix for PHP 8.4 (@romantech)\n* Fix for branch names containing special chars like `#`\n\n\nVersion 1.9 – 2024-02-04\n------------------------\n\n### Features\n\n* Better support for Alfred 5\n* `gh my stars` opens `/<username>?tab=stars` instead of `/stars`\n\n\nVersion 1.8.1 – 2022-10-16\n--------------------------\n\n### Bugfix\n\n* Fixed version number in workflow\n\n\nVersion 1.8 – 2022-10-15\n------------------------\n\n### Features\n\n* New command `gh user/repo dev` opening repo in Visual Studio Code (Codespaces)\n* New command `gh user/repo discussions`\n* New command `gh my repos new`\n* Search issues by title (`gh user/repo #search`)\n* Archived repos with prefix `[Archived]` in subtitle\n* Performance improvement\n\n### Bugfixes\n\n* Fix result display for non-PR issue IDs (@tobias-grasse)\n* Fix git clone url, use new `x-github-client://` scheme\n\n\nVersion 1.7.1 – 2022-01-01\n--------------------------\n\n### Bugfixes\n\n* Fix deprecation warning when using PHP 8.1\n\n\nVersion 1.7 – 2021-10-26\n------------------------\n\n### Features\n\n* Support for macOS 12 Montery: PHP is no longer pre-installed, you must install it by yourself via [Homebrew](https://brew.sh) (`brew install php`)\n* Better support for Alfred 4\n* new command `gh user/repo actions` (@Attsun1031)\n* command `gh user/repo new issue` lands on issue template selector page (@riastrad)\n\n\nVersion 1.6.2 – 2018-02-13\n--------------------------\n\n### Bugfixes\n\n* Api pagination didn't work correctly anymore (missing results from page > 2)\n\n\nVersion 1.6.1 – 2017-09-23\n--------------------------\n\n### Bugfixes\n\n* Support for macOS 10.13 High Sierra\n* Commit search results had wrong urls on GitHub Enterprise (@beparker)\n\n\nVersion 1.6 – 2017-05-07\n------------------------\n\n### Features\n\n* new command `gh user/repo projects` (@dagio)\n* new command `gh my pulls review requested` (@AeroEchelon)\n* better sorting for issues (most recently updated on top) and commits (most recent on top) (@danielma)\n\n### Bugfixes\n\n* On macOS 10.12.5 Beta URLs didn't opened in browser anymore\n\n\nVersion 1.5 – 2016-12-13\n------------------------\n\n### Features\n\n* new commands for searching repos and users globally in GitHub (`gh s repo` and `gh s @user`)\n* new command `gh my repos` (@jacobkossman)\n* new command `gh > delete database`\n* source repos with higher priority than forks\n\n### Bugfixes\n\n* in some situations private repos were missing (@lxynox)\n* after saving GitHub Enterprise url the workflow didn't reopen correctly\n* updated user sub commands (\"Activity\" tab does not exist any more on GitHub)\n\n\nVersion 1.4.1 – 2016-22-07\n--------------------------\n\n* fixed reading environment variables (important for hotkey support)\n\n\nVersion 1.4 – 2016-22-07\n------------------------\n\n* Hotkey support\n* use native update mechanism of Alfred (to keep your hotkeys)\n* new command `gh user/repo releases` (@altern8tif)\n* cache warmup after login\n* lower cpu usage in multi curl\n* fixed autocomplete values in GitHub Enterprise\n\n\nVersion 1.3 – 2016-17-07\n------------------------\n\n**Important:** This is the last version for Alfred 2.\n\n* Disabled updates in Alfred 2\n* Updates in Alfred 3 are loaded from new location (GitHub releases)\n\n\nVersion 1.2 – 2016-04-17\n------------------------\n\n### Features\n\n* New sub commands for `gh my issues/pull`: `created`, `assigned` and `mentioned`\n* New help command: `gh > help`\n* Longer cache lifetime\n\n\nVersion 1.1 – 2015-01-10\n------------------------\n\n### Features\n\n* GitHub Enterprise support (use `ghe`)\n* Commit search (`gh user/repo *hash`)\n\n### Bugfixes\n\n* A space after `gh` is required to avoid confusion when using commands of other workflows like `ghost`\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) Gregor Harlan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.0576171875,
          "content": "GitHub Workflow for [Alfred](http://www.alfredapp.com)\n============================\n\nYou can search through GitHub (`gh`) and your GitHub Enterprise instance (`ghe`).\n\n**[DOWNLOAD](https://github.com/gharlan/alfred-github-workflow/releases)**\n\n![Workflow Screenshot](screenshot.png)\n\nSetup\n-----\n\nThis workflow requires PHP, which is no longer pre-installed since macOS 12 Montery.  \nYou can install it via [Homebrew](https://brew.sh) (`brew install php`).\n\n### For github.com\n\nIn Alfred type (`gh > login`) to authenticate against your account. The login uses OAuth, so you do not have to enter your credentials.\n\n### For github enterprise\n\n1. In Alfred type (`ghe > url https://github.mycompany.com`)\n2. Create a new Personal Access Token (`ghe > generate token` or `https://github.mycompany.com/settings/applications`). It only needs access to your repos. Copy this token to your clipboard.\n3. In Alfred type (`ghe > login <paste token here>`)\n4. You can now `ghe your_enterprise_repo_name`\n\n### Access to private repositories in organizations\n\nOrganizations must approve this app, otherwise private repositories of that organization can not be accessed. Access can be requested [here](https://github.com/settings/connections/applications/2d4f43826cb68e11c17c).\n\nKey Combinations\n----------------\n\nKey Combination        | Action\n---------------------- | ------\n`enter`                | Open entry in default browser\n`cmd` + `c`            | Copy URL of the entry\n`cmd` + `enter`        | Paste URL to front most app\n`shift` or `cmd` + `y` | Open URL in QuickLook\n\nCommands\n--------\n\nTo search through your GitHub Enterprise instance replace `gh` by `ghe`.\n\n### Repo commands\n\n* `gh user/repo`\n* `gh user/repo #123`\n* `gh user/repo @branch`\n* `gh user/repo *commit`\n* `gh user/repo /path/to/file`\n* `gh user/repo actions`\n* `gh user/repo admin`\n* `gh user/repo clone`\n* `gh user/repo dev`\n* `gh user/repo discussions`\n* `gh user/repo graphs`\n* `gh user/repo issues`\n* `gh user/repo milestones`\n* `gh user/repo network`\n* `gh user/repo new issue`\n* `gh user/repo new pull`\n* `gh user/repo projects`\n* `gh user/repo pulls`\n* `gh user/repo pulse`\n* `gh user/repo releases`\n* `gh user/repo wiki`\n* `gh user/repo projects`\n\n### User commands\n\n* `gh @user`\n* `gh @user overview`\n* `gh @user repositories`\n* `gh @user stars`\n* `gh @user gists`\n\n### Search commands\n\n* `gh s repo`\n* `gh s @user`\n\n### \"My\" commands\n\n* `gh my dashboard`\n* `gh my notifications`\n* `gh my profile`\n* `gh my issues`\n* `gh my issues created`\n* `gh my issues assigned`\n* `gh my issues mentioned`\n* `gh my pulls`\n* `gh my pulls created`\n* `gh my pulls assigned`\n* `gh my pulls mentioned`\n* `gh my pulls review requested`\n* `gh my repos`\n* `gh my repos new`\n* `gh my settings`\n* `gh my stars`\n* `gh my gists`\n\n### Workflow commands\n\n* `gh > login`\n* `gh > logout`\n* `gh > delete cache`\n* `gh > delete database`\n* `gh > update`\n* `gh > activate autoupdate`\n* `gh > deactivate autoupdate`\n* `gh > help`\n* `gh > changelog`\n* `ghe > url` (GitHub Enterprise only)\n* `ghe > generate token` (GitHub Enterprise only)\n* `ghe > enterprise reset` (GitHub Enterprise only)\n"
        },
        {
          "name": "action.php",
          "type": "blob",
          "size": 2.828125,
          "content": "<?php\n\nrequire 'workflow.php';\n\n$query = trim($argv[1]);\n\nif ('>' !== $query[0] && 0 !== strpos($query, 'e >')) {\n    if ('.git' == substr($query, -4)) {\n        $query = 'x-github-client://openRepo/'.substr($query, 0, -4);\n    }\n    exec('open '.$query);\n\n    return;\n}\n\n$enterprise = 0 === strpos($query, 'e ');\nif ($enterprise) {\n    $query = substr($query, 2);\n}\n$parts = explode(' ', $query);\n\nWorkflow::init($enterprise);\n\nswitch ($parts[1]) {\n    case 'enterprise-url':\n        Workflow::setConfig('enterprise_url', rtrim($parts[2], '/'));\n        exec('osascript -e \"tell application \\\"Alfred\\\" to search \\\"ghe \\\"\"');\n        break;\n\n    case 'enterprise-reset':\n        Workflow::removeConfig('enterprise_url');\n        Workflow::removeConfig('enterprise_access_token');\n        Workflow::deleteCache();\n        break;\n\n    case 'login':\n        if (isset($parts[2]) && $parts[2]) {\n            Workflow::setAccessToken($parts[2]);\n            echo 'Successfully logged in';\n        } elseif (!$enterprise) {\n            Workflow::startServer();\n            $state = version_compare(PHP_VERSION, '5.4', '<') ? 'm' : '';\n            $url = Workflow::getBaseUrl().'/login/oauth/authorize?client_id=2d4f43826cb68e11c17c&scope=repo&state='.$state;\n            exec('open '.escapeshellarg($url));\n        }\n        break;\n\n    case 'logout':\n        Workflow::removeAccessToken();\n        Workflow::deleteCache();\n        echo 'Successfully logged out';\n        break;\n\n    case 'delete-cache':\n        Workflow::deleteCache();\n        echo 'Successfully deleted cache';\n        break;\n\n    case 'delete-database':\n        Workflow::deleteDatabase();\n        echo 'Successfully deleted database';\n        break;\n\n    case 'refresh-cache':\n        $curl = new Curl();\n        foreach (explode(',', $parts[2]) as $url) {\n            Workflow::requestCache($url, $curl, null, false, 0, false);\n        }\n        $curl->execute();\n        Workflow::cleanCache();\n        break;\n\n    case 'activate-autoupdate':\n        Workflow::setConfig('autoupdate', 1);\n        echo 'Activated auto updating';\n        break;\n\n    case 'deactivate-autoupdate':\n        Workflow::setConfig('autoupdate', 0);\n        echo 'Deactivated auto updating';\n        break;\n\n    case 'update':\n        $release = json_decode(Workflow::request('https://api.github.com/repos/gharlan/alfred-github-workflow/releases/latest'));\n        if (!isset($release->assets[0]->browser_download_url)) {\n            echo 'Update failed';\n            exit;\n        }\n        $response = Workflow::request($release->assets[0]->browser_download_url, null, null, false);\n        if (!$response) {\n            echo 'Update failed';\n            exit;\n        }\n        $path = getenv('alfred_workflow_data').'/github.alfredworkflow';\n        file_put_contents($path, $response);\n        exec('open '.escapeshellarg($path));\n        break;\n}\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.07421875,
          "content": "{\n    \"require-dev\": {\n        \"friendsofphp/php-cs-fixer\": \"^3.48\"\n    }\n}\n"
        },
        {
          "name": "curl.php",
          "type": "blob",
          "size": 4.3564453125,
          "content": "<?php\n\nclass Curl\n{\n    /** @var CurlRequest[] */\n    private $requests = [];\n    private $running = false;\n    private $debug = false;\n\n    private static $multiHandle;\n\n    public function add(CurlRequest $request)\n    {\n        $this->requests[$request->url] = $request;\n        if ($this->running) {\n            $this->addHandle($request);\n        }\n    }\n\n    public function execute()\n    {\n        $this->running = true;\n        if (!is_resource(self::$multiHandle)) {\n            self::$multiHandle = curl_multi_init();\n        }\n\n        foreach ($this->requests as $request) {\n            $this->addHandle($request);\n        }\n\n        $finish = false;\n        $running = true;\n        do {\n            $finish = !$running;\n            while (CURLM_CALL_MULTI_PERFORM == $execrun = curl_multi_exec(self::$multiHandle, $running));\n\n            if (CURLM_OK != $execrun) {\n                break;\n            }\n            while ($done = curl_multi_info_read(self::$multiHandle)) {\n                $ch = $done['handle'];\n                $info = curl_getinfo($ch);\n                $url = self::getHeader($info['request_header'], 'X-Url');\n                $request = $this->requests[$url];\n                $rawResponse = curl_multi_getcontent($ch);\n                if (preg_match(\"@^HTTP/\\\\d\\\\.\\\\d 200 Connection established\\r\\n\\r\\n@i\", $rawResponse)) {\n                    list(, $header, $body) = explode(\"\\r\\n\\r\\n\", $rawResponse, 3);\n                } else {\n                    list($header, $body) = explode(\"\\r\\n\\r\\n\", $rawResponse, 2);\n                }\n                $response = new CurlResponse();\n                $response->request = $request;\n                $response->status = $info['http_code'];\n                $headerNames = [\n                    'etag' => 'ETag',\n                    'contentType' => 'Content-Type',\n                    'link' => 'Link',\n                ];\n                foreach ($headerNames as $key => $name) {\n                    $response->$key = self::getHeader($header, $name);\n                }\n                if (200 == $response->status) {\n                    $response->content = $body;\n                }\n                $callback = $request->callback;\n                $callback($response);\n                curl_multi_remove_handle(self::$multiHandle, $ch);\n                curl_close($ch);\n            }\n            if ($running || !$finish) {\n                if (-1 === curl_multi_select(self::$multiHandle, 1)) {\n                    usleep(250);\n                }\n            }\n        } while ($running || !$finish);\n\n        $this->running = false;\n\n        return true;\n    }\n\n    private function addHandle(CurlRequest $request)\n    {\n        $defaultOptions = [\n            CURLOPT_HEADER => true,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_USERAGENT => 'alfred-github-workflow',\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_MAXREDIRS => 5,\n            CURLOPT_ENCODING => '',\n            CURLINFO_HEADER_OUT => true,\n        ];\n        if ($this->debug) {\n            $defaultOptions[CURLOPT_PROXY] = 'localhost';\n            $defaultOptions[CURLOPT_PROXYPORT] = 8888;\n            $defaultOptions[CURLOPT_SSL_VERIFYPEER] = 0;\n        }\n\n        $ch = curl_init();\n        $options = $defaultOptions;\n        $options[CURLOPT_URL] = $request->url;\n        $header = [];\n        $header[] = 'X-Url: '.$request->url;\n        if ($request->token) {\n            $header[] = 'Authorization: token '.$request->token;\n        }\n        if ($request->etag) {\n            $header[] = 'If-None-Match: '.$request->etag;\n        }\n        $options[CURLOPT_HTTPHEADER] = $header;\n        curl_setopt_array($ch, $options);\n        curl_multi_add_handle(self::$multiHandle, $ch);\n    }\n\n    public static function getHeader($header, $key)\n    {\n        if (preg_match('/^'.preg_quote($key, '/').': (\\V*)/mi', $header, $match)) {\n            return $match[1];\n        }\n\n        return null;\n    }\n}\n\nclass CurlRequest\n{\n    public $url;\n    public $etag;\n    public $token;\n    public $callback;\n\n    public function __construct($url, $etag, $token, $callback)\n    {\n        $this->url = $url;\n        $this->etag = $etag;\n        $this->token = $token;\n        $this->callback = $callback;\n    }\n}\n\nclass CurlResponse\n{\n    /** @var CurlRequest */\n    public $request;\n    public $status;\n    public $contentType;\n    public $etag;\n    public $link;\n    public $content;\n}\n"
        },
        {
          "name": "icon.png",
          "type": "blob",
          "size": 5.423828125,
          "content": null
        },
        {
          "name": "icons",
          "type": "tree",
          "content": null
        },
        {
          "name": "info.plist",
          "type": "blob",
          "size": 16.58203125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>bundleid</key>\n\t<string>de.gh01.alfred.github</string>\n\t<key>category</key>\n\t<string>Internet</string>\n\t<key>connections</key>\n\t<dict>\n\t\t<key>14CA19E2-6328-4201-905E-A751E2BA47B5</key>\n\t\t<array>\n\t\t\t<dict>\n\t\t\t\t<key>destinationuid</key>\n\t\t\t\t<string>ABE8DD6E-CD29-4E70-87CF-1382A0446009</string>\n\t\t\t\t<key>modifiers</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>modifiersubtext</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>vitoclose</key>\n\t\t\t\t<false/>\n\t\t\t</dict>\n\t\t</array>\n\t\t<key>29045171-6618-4FA4-BAB0-39C10422CF31</key>\n\t\t<array>\n\t\t\t<dict>\n\t\t\t\t<key>destinationuid</key>\n\t\t\t\t<string>67ADBB8D-C705-4981-BB9B-7C9238BEFF2E</string>\n\t\t\t\t<key>modifiers</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>modifiersubtext</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>vitoclose</key>\n\t\t\t\t<false/>\n\t\t\t</dict>\n\t\t</array>\n\t\t<key>94B48881-907F-4752-AAA0-234EA30CFC18</key>\n\t\t<array>\n\t\t\t<dict>\n\t\t\t\t<key>destinationuid</key>\n\t\t\t\t<string>FC76BC27-8BCB-4BEE-AD42-EAC2D9B01F0F</string>\n\t\t\t\t<key>modifiers</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>modifiersubtext</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>vitoclose</key>\n\t\t\t\t<false/>\n\t\t\t</dict>\n\t\t</array>\n\t\t<key>95CD1A63-A0C6-4458-9817-9C6B1A90C827</key>\n\t\t<array>\n\t\t\t<dict>\n\t\t\t\t<key>destinationuid</key>\n\t\t\t\t<string>29045171-6618-4FA4-BAB0-39C10422CF31</string>\n\t\t\t\t<key>modifiers</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>modifiersubtext</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>vitoclose</key>\n\t\t\t\t<false/>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>destinationuid</key>\n\t\t\t\t<string>9715D8FA-0199-450F-99B8-64796B5AC6CB</string>\n\t\t\t\t<key>modifiers</key>\n\t\t\t\t<integer>1048576</integer>\n\t\t\t\t<key>modifiersubtext</key>\n\t\t\t\t<string>Copy and paste URL</string>\n\t\t\t\t<key>vitoclose</key>\n\t\t\t\t<false/>\n\t\t\t</dict>\n\t\t</array>\n\t\t<key>9715D8FA-0199-450F-99B8-64796B5AC6CB</key>\n\t\t<array>\n\t\t\t<dict>\n\t\t\t\t<key>destinationuid</key>\n\t\t\t\t<string>87F10E6D-697C-47CE-BD78-E7174F5DF815</string>\n\t\t\t\t<key>modifiers</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>modifiersubtext</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>vitoclose</key>\n\t\t\t\t<false/>\n\t\t\t</dict>\n\t\t</array>\n\t\t<key>ABE8DD6E-CD29-4E70-87CF-1382A0446009</key>\n\t\t<array>\n\t\t\t<dict>\n\t\t\t\t<key>destinationuid</key>\n\t\t\t\t<string>95CD1A63-A0C6-4458-9817-9C6B1A90C827</string>\n\t\t\t\t<key>modifiers</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>modifiersubtext</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>vitoclose</key>\n\t\t\t\t<false/>\n\t\t\t</dict>\n\t\t</array>\n\t\t<key>DAA505B9-F86C-4AF8-818B-8F614F01485E</key>\n\t\t<array>\n\t\t\t<dict>\n\t\t\t\t<key>destinationuid</key>\n\t\t\t\t<string>94B48881-907F-4752-AAA0-234EA30CFC18</string>\n\t\t\t\t<key>modifiers</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>modifiersubtext</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>vitoclose</key>\n\t\t\t\t<false/>\n\t\t\t</dict>\n\t\t</array>\n\t\t<key>FC76BC27-8BCB-4BEE-AD42-EAC2D9B01F0F</key>\n\t\t<array>\n\t\t\t<dict>\n\t\t\t\t<key>destinationuid</key>\n\t\t\t\t<string>29045171-6618-4FA4-BAB0-39C10422CF31</string>\n\t\t\t\t<key>modifiers</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>modifiersubtext</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>vitoclose</key>\n\t\t\t\t<false/>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>destinationuid</key>\n\t\t\t\t<string>9715D8FA-0199-450F-99B8-64796B5AC6CB</string>\n\t\t\t\t<key>modifiers</key>\n\t\t\t\t<integer>1048576</integer>\n\t\t\t\t<key>modifiersubtext</key>\n\t\t\t\t<string>Copy and paste URL</string>\n\t\t\t\t<key>vitoclose</key>\n\t\t\t\t<false/>\n\t\t\t</dict>\n\t\t</array>\n\t</dict>\n\t<key>createdby</key>\n\t<string>Gregor Harlan</string>\n\t<key>description</key>\n\t<string>GitHub for Alfred</string>\n\t<key>disabled</key>\n\t<false/>\n\t<key>name</key>\n\t<string>GitHub</string>\n\t<key>objects</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>config</key>\n\t\t\t<dict>\n\t\t\t\t<key>action</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>argument</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>focusedappvariable</key>\n\t\t\t\t<false/>\n\t\t\t\t<key>focusedappvariablename</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>hotkey</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>hotmod</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>hotstring</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>leftcursor</key>\n\t\t\t\t<false/>\n\t\t\t\t<key>modsmode</key>\n\t\t\t\t<integer>2</integer>\n\t\t\t\t<key>relatedAppsMode</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t</dict>\n\t\t\t<key>type</key>\n\t\t\t<string>alfred.workflow.trigger.hotkey</string>\n\t\t\t<key>uid</key>\n\t\t\t<string>DAA505B9-F86C-4AF8-818B-8F614F01485E</string>\n\t\t\t<key>version</key>\n\t\t\t<integer>2</integer>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>config</key>\n\t\t\t<dict>\n\t\t\t\t<key>alfredfiltersresults</key>\n\t\t\t\t<false/>\n\t\t\t\t<key>alfredfiltersresultsmatchmode</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>argumenttreatemptyqueryasnil</key>\n\t\t\t\t<false/>\n\t\t\t\t<key>argumenttrimmode</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>argumenttype</key>\n\t\t\t\t<integer>1</integer>\n\t\t\t\t<key>escaping</key>\n\t\t\t\t<integer>100</integer>\n\t\t\t\t<key>keyword</key>\n\t\t\t\t<string>gh</string>\n\t\t\t\t<key>queuedelaycustom</key>\n\t\t\t\t<integer>3</integer>\n\t\t\t\t<key>queuedelayimmediatelyinitially</key>\n\t\t\t\t<true/>\n\t\t\t\t<key>queuedelaymode</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>queuemode</key>\n\t\t\t\t<integer>1</integer>\n\t\t\t\t<key>runningsubtext</key>\n\t\t\t\t<string>Loading results…</string>\n\t\t\t\t<key>script</key>\n\t\t\t\t<string>&lt;?php\n\nrequire 'search.php';\n\nSearch::run('github', $argv[1], getenv('hotkey'));\n\necho Workflow::getItemsAsXml();</string>\n\t\t\t\t<key>scriptargtype</key>\n\t\t\t\t<integer>1</integer>\n\t\t\t\t<key>scriptfile</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>subtext</key>\n\t\t\t\t<string>Search or type a command</string>\n\t\t\t\t<key>title</key>\n\t\t\t\t<string>gh...</string>\n\t\t\t\t<key>type</key>\n\t\t\t\t<integer>1</integer>\n\t\t\t\t<key>withspace</key>\n\t\t\t\t<false/>\n\t\t\t</dict>\n\t\t\t<key>type</key>\n\t\t\t<string>alfred.workflow.input.scriptfilter</string>\n\t\t\t<key>uid</key>\n\t\t\t<string>FC76BC27-8BCB-4BEE-AD42-EAC2D9B01F0F</string>\n\t\t\t<key>version</key>\n\t\t\t<integer>3</integer>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>config</key>\n\t\t\t<dict>\n\t\t\t\t<key>concurrently</key>\n\t\t\t\t<false/>\n\t\t\t\t<key>escaping</key>\n\t\t\t\t<integer>100</integer>\n\t\t\t\t<key>script</key>\n\t\t\t\t<string>&lt;?php\n\nrequire 'action.php';</string>\n\t\t\t\t<key>scriptargtype</key>\n\t\t\t\t<integer>1</integer>\n\t\t\t\t<key>scriptfile</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>type</key>\n\t\t\t\t<integer>1</integer>\n\t\t\t</dict>\n\t\t\t<key>type</key>\n\t\t\t<string>alfred.workflow.action.script</string>\n\t\t\t<key>uid</key>\n\t\t\t<string>29045171-6618-4FA4-BAB0-39C10422CF31</string>\n\t\t\t<key>version</key>\n\t\t\t<integer>2</integer>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>config</key>\n\t\t\t<dict>\n\t\t\t\t<key>lastpathcomponent</key>\n\t\t\t\t<false/>\n\t\t\t\t<key>onlyshowifquerypopulated</key>\n\t\t\t\t<true/>\n\t\t\t\t<key>removeextension</key>\n\t\t\t\t<false/>\n\t\t\t\t<key>text</key>\n\t\t\t\t<string>{query}</string>\n\t\t\t\t<key>title</key>\n\t\t\t\t<string>GitHub</string>\n\t\t\t</dict>\n\t\t\t<key>type</key>\n\t\t\t<string>alfred.workflow.output.notification</string>\n\t\t\t<key>uid</key>\n\t\t\t<string>67ADBB8D-C705-4981-BB9B-7C9238BEFF2E</string>\n\t\t\t<key>version</key>\n\t\t\t<integer>1</integer>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>config</key>\n\t\t\t<dict>\n\t\t\t\t<key>argument</key>\n\t\t\t\t<string>{query}</string>\n\t\t\t\t<key>passthroughargument</key>\n\t\t\t\t<false/>\n\t\t\t\t<key>variables</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>hotkey</key>\n\t\t\t\t\t<string>1</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<key>type</key>\n\t\t\t<string>alfred.workflow.utility.argument</string>\n\t\t\t<key>uid</key>\n\t\t\t<string>94B48881-907F-4752-AAA0-234EA30CFC18</string>\n\t\t\t<key>version</key>\n\t\t\t<integer>1</integer>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>config</key>\n\t\t\t<dict>\n\t\t\t\t<key>action</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>argument</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>focusedappvariable</key>\n\t\t\t\t<false/>\n\t\t\t\t<key>focusedappvariablename</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>hotkey</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>hotmod</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>hotstring</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>leftcursor</key>\n\t\t\t\t<false/>\n\t\t\t\t<key>modsmode</key>\n\t\t\t\t<integer>2</integer>\n\t\t\t\t<key>relatedAppsMode</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t</dict>\n\t\t\t<key>type</key>\n\t\t\t<string>alfred.workflow.trigger.hotkey</string>\n\t\t\t<key>uid</key>\n\t\t\t<string>14CA19E2-6328-4201-905E-A751E2BA47B5</string>\n\t\t\t<key>version</key>\n\t\t\t<integer>2</integer>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>config</key>\n\t\t\t<dict>\n\t\t\t\t<key>alfredfiltersresults</key>\n\t\t\t\t<false/>\n\t\t\t\t<key>alfredfiltersresultsmatchmode</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>argumenttreatemptyqueryasnil</key>\n\t\t\t\t<false/>\n\t\t\t\t<key>argumenttrimmode</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>argumenttype</key>\n\t\t\t\t<integer>1</integer>\n\t\t\t\t<key>escaping</key>\n\t\t\t\t<integer>100</integer>\n\t\t\t\t<key>keyword</key>\n\t\t\t\t<string>ghe</string>\n\t\t\t\t<key>queuedelaycustom</key>\n\t\t\t\t<integer>3</integer>\n\t\t\t\t<key>queuedelayimmediatelyinitially</key>\n\t\t\t\t<true/>\n\t\t\t\t<key>queuedelaymode</key>\n\t\t\t\t<integer>0</integer>\n\t\t\t\t<key>queuemode</key>\n\t\t\t\t<integer>1</integer>\n\t\t\t\t<key>runningsubtext</key>\n\t\t\t\t<string>Loading results…</string>\n\t\t\t\t<key>script</key>\n\t\t\t\t<string>&lt;?php\n\nrequire 'search.php';\n\nSearch::run('enterprise', $argv[1], getenv('hotkey'));\n\necho Workflow::getItemsAsXml();</string>\n\t\t\t\t<key>scriptargtype</key>\n\t\t\t\t<integer>1</integer>\n\t\t\t\t<key>scriptfile</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>subtext</key>\n\t\t\t\t<string>Search or type a command (GitHub Enterprise)</string>\n\t\t\t\t<key>title</key>\n\t\t\t\t<string>ghe...</string>\n\t\t\t\t<key>type</key>\n\t\t\t\t<integer>1</integer>\n\t\t\t\t<key>withspace</key>\n\t\t\t\t<false/>\n\t\t\t</dict>\n\t\t\t<key>type</key>\n\t\t\t<string>alfred.workflow.input.scriptfilter</string>\n\t\t\t<key>uid</key>\n\t\t\t<string>95CD1A63-A0C6-4458-9817-9C6B1A90C827</string>\n\t\t\t<key>version</key>\n\t\t\t<integer>3</integer>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>config</key>\n\t\t\t<dict>\n\t\t\t\t<key>autopaste</key>\n\t\t\t\t<true/>\n\t\t\t\t<key>clipboardtext</key>\n\t\t\t\t<string>{query}</string>\n\t\t\t\t<key>ignoredynamicplaceholders</key>\n\t\t\t\t<false/>\n\t\t\t\t<key>transient</key>\n\t\t\t\t<false/>\n\t\t\t</dict>\n\t\t\t<key>type</key>\n\t\t\t<string>alfred.workflow.output.clipboard</string>\n\t\t\t<key>uid</key>\n\t\t\t<string>87F10E6D-697C-47CE-BD78-E7174F5DF815</string>\n\t\t\t<key>version</key>\n\t\t\t<integer>3</integer>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>config</key>\n\t\t\t<dict>\n\t\t\t\t<key>argument</key>\n\t\t\t\t<string>{query}</string>\n\t\t\t\t<key>passthroughargument</key>\n\t\t\t\t<false/>\n\t\t\t\t<key>variables</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>hotkey</key>\n\t\t\t\t\t<string>1</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<key>type</key>\n\t\t\t<string>alfred.workflow.utility.argument</string>\n\t\t\t<key>uid</key>\n\t\t\t<string>ABE8DD6E-CD29-4E70-87CF-1382A0446009</string>\n\t\t\t<key>version</key>\n\t\t\t<integer>1</integer>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>config</key>\n\t\t\t<dict>\n\t\t\t\t<key>inputstring</key>\n\t\t\t\t<string>{query}</string>\n\t\t\t\t<key>matchcasesensitive</key>\n\t\t\t\t<false/>\n\t\t\t\t<key>matchmode</key>\n\t\t\t\t<integer>2</integer>\n\t\t\t\t<key>matchstring</key>\n\t\t\t\t<string>^\\w+://</string>\n\t\t\t</dict>\n\t\t\t<key>type</key>\n\t\t\t<string>alfred.workflow.utility.filter</string>\n\t\t\t<key>uid</key>\n\t\t\t<string>9715D8FA-0199-450F-99B8-64796B5AC6CB</string>\n\t\t\t<key>version</key>\n\t\t\t<integer>1</integer>\n\t\t</dict>\n\t</array>\n\t<key>readme</key>\n\t<string>Changelog\n=========\n\nVersion 1.9.1 – 2024-12-05\n--------------------------\n\n### Bugfix\n\n* Fix for PHP 8.4 (@romantech)\n* Fix for branch names containing special chars like `#`\n\n\nVersion 1.9 – 2024-02-04\n------------------------\n\n### Features\n\n* Better support for Alfred 5\n* `gh my stars` opens `/&lt;username&gt;?tab=stars` instead of `/stars`\n\n\nVersion 1.8.1 – 2022-10-16\n--------------------------\n\n### Bugfix\n\n* Fixed version number in workflow\n\n\nVersion 1.8 – 2022-10-15\n------------------------\n\n### Features\n\n* New command `gh user/repo dev` opening repo in Visual Studio Code (Codespaces)\n* New command `gh user/repo discussions`\n* New command `gh my repos new`\n* Search issues by title (`gh user/repo #search`)\n* Archived repos with prefix `[Archived]` in subtitle\n* Performance improvement\n\n### Bugfixes\n\n* Fix result display for non-PR issue IDs (@tobias-grasse)\n* Fix git clone url, use new `x-github-client://` scheme\n\n\nVersion 1.7.1 – 2022-01-01\n--------------------------\n\n### Bugfixes\n\n* Fix deprecation warning when using PHP 8.1\n\n\nVersion 1.7 – 2021-10-26\n------------------------\n\n### Features\n\n* Support for macOS 12 Montery: PHP is no longer pre-installed, you must install it by yourself via [Homebrew](https://brew.sh) (`brew install php`)\n* Better support for Alfred 4\n* new command `gh user/repo actions` (@Attsun1031)\n* command `gh user/repo new issue` lands on issue template selector page (@riastrad)\n\n\nVersion 1.6.2 – 2018-02-13\n--------------------------\n\n### Bugfixes\n\n* Api pagination didnt work correctly anymore (missing results from page &gt; 2)\n\n\nVersion 1.6.1 – 2017-09-23\n--------------------------\n\n### Bugfixes\n\n* Support for macOS 10.13 High Sierra\n* Commit search results had wrong urls on GitHub Enterprise (@beparker)\n\n\nVersion 1.6 – 2017-05-07\n------------------------\n\n### Features\n\n* new command `gh user/repo projects` (@dagio)\n* new command `gh my pulls review requested` (@AeroEchelon)\n* better sorting for issues (most recently updated on top) and commits (most recent on top) (@danielma)\n\n### Bugfixes\n\n* On macOS 10.12.5 Beta URLs didnt opened in browser anymore\n\n\nVersion 1.5 – 2016-12-13\n------------------------\n\n### Features\n\n* new commands for searching repos and users globally in GitHub (`gh s repo` and `gh s @user`)\n* new command `gh my repos` (@jacobkossman)\n* new command `gh &gt; delete database`\n* source repos with higher priority than forks\n\n### Bugfixes\n\n* in some situations private repos were missing (@lxynox)\n* after saving GitHub Enterprise url the workflow didn't reopen correctly\n* updated user sub commands (Activity tab does not exist any more on GitHub)\n\n\nVersion 1.4.1 – 2016-22-07\n--------------------------\n\n* fixed reading environment variables (important for hotkey support)\n\n\nVersion 1.4 – 2016-22-07\n------------------------\n\n* Hotkey support\n* use native update mechanism of Alfred (to keep your hotkeys)\n* new command `gh user/repo releases` (@altern8tif)\n* cache warmup after login\n* lower cpu usage in multi curl\n* fixed autocomplete values in GitHub Enterprise\n\n\nVersion 1.3 – 2016-17-07\n------------------------\n\n**Important:** This is the last version for Alfred 2.\n\n* Disabled updates in Alfred 2\n* Updates in Alfred 3 are loaded from new location (GitHub releases)\n\n\nVersion 1.2 – 2016-04-17\n------------------------\n\n### Features\n\n* New sub commands for `gh my issues/pull`: `created`, `assigned` and `mentioned`\n* New help command: `gh &gt; help`\n* Longer cache lifetime\n\n\nVersion 1.1 – 2015-01-10\n------------------------\n\n### Features\n\n* GitHub Enterprise support (use `ghe`)\n* Commit search (`gh user/repo *hash`)\n\n### Bugfixes\n\n* A space after `gh` is required to avoid confusion when using commands of other workflows like `ghost`\n</string>\n\t<key>uidata</key>\n\t<dict>\n\t\t<key>14CA19E2-6328-4201-905E-A751E2BA47B5</key>\n\t\t<dict>\n\t\t\t<key>colorindex</key>\n\t\t\t<integer>9</integer>\n\t\t\t<key>note</key>\n\t\t\t<string>GitHub Enterprise</string>\n\t\t\t<key>xpos</key>\n\t\t\t<integer>30</integer>\n\t\t\t<key>ypos</key>\n\t\t\t<integer>230</integer>\n\t\t</dict>\n\t\t<key>29045171-6618-4FA4-BAB0-39C10422CF31</key>\n\t\t<dict>\n\t\t\t<key>xpos</key>\n\t\t\t<integer>600</integer>\n\t\t\t<key>ypos</key>\n\t\t\t<integer>40</integer>\n\t\t</dict>\n\t\t<key>67ADBB8D-C705-4981-BB9B-7C9238BEFF2E</key>\n\t\t<dict>\n\t\t\t<key>xpos</key>\n\t\t\t<integer>790</integer>\n\t\t\t<key>ypos</key>\n\t\t\t<integer>40</integer>\n\t\t</dict>\n\t\t<key>87F10E6D-697C-47CE-BD78-E7174F5DF815</key>\n\t\t<dict>\n\t\t\t<key>xpos</key>\n\t\t\t<integer>790</integer>\n\t\t\t<key>ypos</key>\n\t\t\t<integer>230</integer>\n\t\t</dict>\n\t\t<key>94B48881-907F-4752-AAA0-234EA30CFC18</key>\n\t\t<dict>\n\t\t\t<key>colorindex</key>\n\t\t\t<integer>12</integer>\n\t\t\t<key>xpos</key>\n\t\t\t<integer>220</integer>\n\t\t\t<key>ypos</key>\n\t\t\t<integer>70</integer>\n\t\t</dict>\n\t\t<key>95CD1A63-A0C6-4458-9817-9C6B1A90C827</key>\n\t\t<dict>\n\t\t\t<key>colorindex</key>\n\t\t\t<integer>9</integer>\n\t\t\t<key>note</key>\n\t\t\t<string>GitHub Enterprise</string>\n\t\t\t<key>xpos</key>\n\t\t\t<integer>330</integer>\n\t\t\t<key>ypos</key>\n\t\t\t<integer>230</integer>\n\t\t</dict>\n\t\t<key>9715D8FA-0199-450F-99B8-64796B5AC6CB</key>\n\t\t<dict>\n\t\t\t<key>xpos</key>\n\t\t\t<integer>680</integer>\n\t\t\t<key>ypos</key>\n\t\t\t<integer>260</integer>\n\t\t</dict>\n\t\t<key>ABE8DD6E-CD29-4E70-87CF-1382A0446009</key>\n\t\t<dict>\n\t\t\t<key>colorindex</key>\n\t\t\t<integer>9</integer>\n\t\t\t<key>xpos</key>\n\t\t\t<integer>220</integer>\n\t\t\t<key>ypos</key>\n\t\t\t<integer>260</integer>\n\t\t</dict>\n\t\t<key>DAA505B9-F86C-4AF8-818B-8F614F01485E</key>\n\t\t<dict>\n\t\t\t<key>colorindex</key>\n\t\t\t<integer>12</integer>\n\t\t\t<key>note</key>\n\t\t\t<string>github.com</string>\n\t\t\t<key>xpos</key>\n\t\t\t<integer>30</integer>\n\t\t\t<key>ypos</key>\n\t\t\t<integer>40</integer>\n\t\t</dict>\n\t\t<key>FC76BC27-8BCB-4BEE-AD42-EAC2D9B01F0F</key>\n\t\t<dict>\n\t\t\t<key>colorindex</key>\n\t\t\t<integer>12</integer>\n\t\t\t<key>note</key>\n\t\t\t<string>github.com</string>\n\t\t\t<key>xpos</key>\n\t\t\t<integer>330</integer>\n\t\t\t<key>ypos</key>\n\t\t\t<integer>40</integer>\n\t\t</dict>\n\t</dict>\n\t<key>variables</key>\n\t<dict>\n\t\t<key>hotkey</key>\n\t\t<string>0</string>\n\t</dict>\n\t<key>version</key>\n\t<string>1.9.1</string>\n\t<key>webaddress</key>\n\t<string>https://github.com/gharlan/alfred-github-workflow</string>\n</dict>\n</plist>\n"
        },
        {
          "name": "item.php",
          "type": "blob",
          "size": 4.6025390625,
          "content": "<?php\n\nclass Item\n{\n    private $randomUid = false;\n    private $prefix = '';\n    private $prefixOnlyTitle = true;\n    private $title;\n    private $comparator;\n    private $subtitle;\n    private $icon;\n    private $arg;\n    private $valid = true;\n    private $add = '…';\n    private $autocomplete = true;\n    private $prio = 0;\n    private $missingChars = 0;\n    private $sameChars = 0;\n\n    public static function create()\n    {\n        return new self();\n    }\n\n    public function randomUid()\n    {\n        $this->randomUid = true;\n\n        return $this;\n    }\n\n    public function prefix($prefix, $onlyTitle = true)\n    {\n        $this->prefix = $prefix;\n        $this->prefixOnlyTitle = $onlyTitle;\n\n        return $this;\n    }\n\n    public function title($title)\n    {\n        $this->title = $title;\n\n        return $this;\n    }\n\n    public function comparator($comparator)\n    {\n        $this->comparator = $comparator;\n\n        return $this;\n    }\n\n    public function subtitle($subtitle)\n    {\n        $this->subtitle = $subtitle;\n\n        return $this;\n    }\n\n    public function icon($icon)\n    {\n        $this->icon = $icon;\n\n        return $this;\n    }\n\n    public function arg($arg)\n    {\n        $this->arg = $arg;\n\n        return $this;\n    }\n\n    public function valid($valid, $add = '…')\n    {\n        $this->valid = (bool) $valid;\n        $this->add = $add;\n\n        return $this;\n    }\n\n    public function autocomplete($autocomplete = true)\n    {\n        $this->autocomplete = $autocomplete;\n\n        return $this;\n    }\n\n    public function prio($prio)\n    {\n        $this->prio = $prio;\n\n        return $this;\n    }\n\n    public function match($query)\n    {\n        $comparator = strtolower($this->comparator ?: $this->title);\n        $query = strtolower($query);\n        if (!$this->prefixOnlyTitle && 0 === stripos($query, $this->prefix)) {\n            $query = substr($query, strlen($this->prefix));\n        }\n        $this->sameChars = 0;\n        $queryLength = strlen($query);\n        for ($i = 0, $k = 0; $i < $queryLength; ++$i, $k++) {\n            for (; isset($comparator[$k]) && $comparator[$k] !== $query[$i]; ++$k);\n\n            if (!isset($comparator[$k])) {\n                return false;\n            }\n            if ($i === $k) {\n                ++$this->sameChars;\n            }\n        }\n        $this->missingChars = strlen($comparator) - $queryLength;\n\n        return true;\n    }\n\n    public function compare(self $another)\n    {\n        if ($this->sameChars != $another->sameChars) {\n            return $this->sameChars < $another->sameChars ? 1 : -1;\n        }\n        if ($this->prio != $another->prio) {\n            return $this->prio < $another->prio ? 1 : -1;\n        }\n\n        return $this->missingChars > $another->missingChars ? 1 : -1;\n    }\n\n    /**\n     * @param self[] $items\n     *\n     * @return string\n     */\n    public static function toXml(array $items, $enterprise, $hotkey, $baseUrl)\n    {\n        $xml = new SimpleXMLElement('<items></items>');\n        $prefix = $hotkey ? '' : ' ';\n        foreach ($items as $item) {\n            $c = $xml->addChild('item');\n            $title = $item->prefix.$item->title;\n            $c->addAttribute('uid', $item->randomUid ? md5(time().$title) : md5($title));\n            if ($item->icon && file_exists(__DIR__.'/icons/'.$item->icon.'.png')) {\n                $c->addChild('icon', 'icons/'.$item->icon.'.png');\n            } else {\n                $c->addChild('icon', 'icon.png');\n            }\n            if ($item->arg) {\n                $arg = $item->arg;\n                if ('/' === $arg[0]) {\n                    $arg = $baseUrl.$arg;\n                } elseif (false === strpos($arg, '://')) {\n                    $arg = ($enterprise ? 'e ' : '').$arg;\n                }\n                $c->addAttribute('arg', $arg);\n            }\n            if ($item->autocomplete) {\n                if (is_string($item->autocomplete)) {\n                    $autocomplete = $item->autocomplete;\n                } elseif (null !== $item->comparator) {\n                    $autocomplete = $item->comparator;\n                } else {\n                    $autocomplete = $item->title;\n                }\n                $c->addAttribute('autocomplete', $prefix.($item->prefixOnlyTitle ? $autocomplete : $item->prefix.$autocomplete));\n            }\n            if (!$item->valid) {\n                $c->addAttribute('valid', 'no');\n                $title .= $item->add;\n            }\n            $c->addChild('title', htmlspecialchars($title));\n            if ($item->subtitle) {\n                $c->addChild('subtitle', htmlspecialchars($item->subtitle));\n            }\n        }\n\n        return $xml->asXML();\n    }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.06640625,
          "content": "{\n    \"dependencies\": {\n        \"@primer/octicons\": \"^17.5\"\n    }\n}\n"
        },
        {
          "name": "screenshot.png",
          "type": "blob",
          "size": 109.8994140625,
          "content": null
        },
        {
          "name": "search.php",
          "type": "blob",
          "size": 22.671875,
          "content": "<?php\n\nrequire 'workflow.php';\n\nclass Search\n{\n    private static $enterprise;\n    private static $query;\n    private static $parts;\n    private static $user;\n\n    public static function run($scope, $query, $hotkey)\n    {\n        self::$enterprise = 'enterprise' === $scope;\n\n        Workflow::init(self::$enterprise, $query, $hotkey);\n\n        if (!$hotkey) {\n            if ('' === $query) {\n                self::addEmptyQueryCommand();\n\n                return Workflow::getItemsAsXml();\n            }\n            if (' ' !== $query[0]) {\n                return '';\n            }\n        }\n\n        $query = ltrim($query);\n        self::$query = $query;\n        self::$parts = $parts = explode(' ', $query);\n\n        if (Workflow::checkUpdate()) {\n            self::addUpdateCommands();\n\n            return;\n        }\n\n        if (self::$enterprise && !Workflow::getBaseUrl()) {\n            self::addEnterpriseUrlCommand();\n\n            return;\n        }\n\n        if (!Workflow::getAccessToken() || !(self::$user = Workflow::requestApi('/user'))) {\n            self::addLoginCommands();\n\n            return;\n        }\n\n        Workflow::stopServer();\n\n        if (isset($query[0]) && '>' == $query[0]) {\n            self::addSystemCommands();\n            Workflow::sortItems();\n\n            return;\n        }\n\n        $isSearch = 's' === $parts[0] && isset($parts[1]);\n        $isUser = isset($query[0]) && '@' == $query[0];\n        $isRepo = false;\n        $queryUser = null;\n        if ($isUser) {\n            $queryUser = ltrim($parts[0], '@');\n        } elseif (!$isSearch && false !== $pos = strpos($parts[0], '/')) {\n            $queryUser = substr($parts[0], 0, $pos);\n            $isRepo = true;\n        }\n\n        if ('my' == $parts[0] && isset($parts[1])) {\n            self::addMyCommands();\n        } elseif ($isSearch && strlen($query) > 5 && '@' !== substr($parts[1], 0, 1)) {\n            self::addRepoSearchCommands();\n        } elseif ($isSearch && strlen($query) > 6 && '@' === substr($parts[1], 0, 1)) {\n            self::addUserSearchCommands();\n        } elseif ($isUser && isset($parts[1])) {\n            self::addUserSubCommands($queryUser);\n        } elseif (!$isUser && $isRepo && isset($parts[1])) {\n            self::addRepoSubCommands();\n        } else {\n            self::addDefaultCommands($isSearch, $isUser, $isRepo, $queryUser);\n        }\n\n        Workflow::sortItems();\n\n        if (!$query) {\n            return;\n        }\n\n        if (!$isSearch && !$isUser && !isset($parts[1])) {\n            Workflow::addItem(Item::create()\n                ->title('s '.$query)\n                ->subtitle('Search repo (in alfred workflow)')\n                ->comparator($query)\n                ->autocomplete('s '.$query)\n                ->icon('repo')\n                ->valid(false)\n            );\n        }\n\n        if (!$isSearch && !$isRepo && !isset($parts[1])) {\n            $title = 's @'.ltrim($query, '@');\n            Workflow::addItem(Item::create()\n                ->title($title)\n                ->subtitle('Search user (in alfred workflow)')\n                ->comparator($query)\n                ->autocomplete($title)\n                ->icon('user')\n                ->valid(false)\n            );\n        }\n\n        if (!$isUser && $isRepo && isset($parts[1])) {\n            $repoQuery = substr($query, strlen($parts[0]) + 1);\n            Workflow::addItem(Item::create()\n                ->title(\"Search '$parts[0]' for '$repoQuery'\")\n                ->icon('search')\n                ->arg('/'.$parts[0].'/search?q='.urlencode($repoQuery))\n                ->autocomplete(false)\n            );\n        }\n\n        $path = $isUser ? $queryUser : 'search?q='.urlencode($query);\n        $name = self::$enterprise ? 'GitHub Enterprise' : 'GitHub';\n        Workflow::addItem(Item::create()\n            ->title(\"Search $name for '$query'\")\n            ->icon('search')\n            ->arg('/'.$path)\n            ->autocomplete(false)\n        );\n    }\n\n    private static function addEmptyQueryCommand()\n    {\n        Workflow::addItem(Item::create()\n            ->title(self::$enterprise ? 'ghe' : 'gh')\n            ->subtitle('Search or type a command'.(self::$enterprise ? ' (GitHub Enterprise)' : ''))\n            ->comparator('')\n            ->valid(false)\n        );\n    }\n\n    private static function addUpdateCommands()\n    {\n        $cmds = [\n            'update' => 'There is an update for this Alfred workflow',\n            'deactivate autoupdate' => 'Deactivate auto updating this Alfred Workflow',\n        ];\n        foreach ($cmds as $cmd => $desc) {\n            Workflow::addItem(Item::create()\n                ->title('> '.$cmd)\n                ->subtitle($desc)\n                ->icon($cmd)\n                ->arg('> '.str_replace(' ', '-', $cmd))\n                ->randomUid()\n            );\n        }\n\n        Workflow::addItem(Item::create()\n            ->title('> changelog')\n            ->subtitle('View the changelog')\n            ->icon('file')\n            ->arg('https://github.com/gharlan/alfred-github-workflow/blob/main/CHANGELOG.md')\n            ->randomUid()\n        );\n    }\n\n    private static function addEnterpriseUrlCommand()\n    {\n        $url = null;\n        if (count(self::$parts) > 1 && '>' == self::$parts[0] && 'url' == self::$parts[1] && isset(self::$parts[2])) {\n            $url = self::$parts[2];\n        }\n        Workflow::addItem(Item::create()\n            ->title('> url '.$url)\n            ->subtitle('Set the GitHub Enterprise URL')\n            ->arg('> enterprise-url '.$url)\n            ->valid((bool) $url, '<URL>')\n            ->randomUid()\n        );\n    }\n\n    private static function addLoginCommands()\n    {\n        Workflow::removeAccessToken();\n        $token = null;\n        if (count(self::$parts) > 1 && '>' == self::$parts[0] && 'login' == self::$parts[1] && isset(self::$parts[2])) {\n            $token = self::$parts[2];\n        }\n        if (!$token && !self::$enterprise) {\n            Workflow::addItem(Item::create()\n                ->title('> login')\n                ->subtitle('Generate OAuth access token')\n                ->arg('> login')\n                ->randomUid()\n            );\n        }\n        Workflow::addItem(Item::create()\n            ->title('> login '.$token)\n            ->subtitle('Save access token')\n            ->arg('> login '.$token)\n            ->valid((bool) $token, '<access_token>')\n            ->randomUid()\n        );\n        if (!$token && self::$enterprise) {\n            Workflow::addItem(Item::create()\n                ->title('> generate token')\n                ->subtitle('Generate a new access token')\n                ->arg('/settings/applications')\n                ->randomUid()\n            );\n            Workflow::addItem(Item::create()\n                ->title('> enterprise reset')\n                ->subtitle('Reset the GitHub Enterprise URL')\n                ->arg('> enterprise-reset')\n                ->randomUid()\n            );\n        }\n    }\n\n    private static function addDefaultCommands($isSearch, $isUser, $isRepo, $queryUser)\n    {\n        $users = [];\n        $repos = [];\n\n        $curl = new Curl();\n\n        if (!$isSearch && !$isUser) {\n            $getRepos = function ($url, $prio) use ($curl, &$repos) {\n                Workflow::requestApi($url, $curl, function ($urlRepos) use (&$repos, $prio) {\n                    foreach ($urlRepos as $repo) {\n                        $repo->score = 300 + $prio + ($repo->fork ? 0 : 10);\n                        $repos[$repo->id] = $repo;\n                    }\n                });\n            };\n            if ($isRepo) {\n                if ($queryUser != self::$user->login) {\n                    $urls = ['/users/'.$queryUser.'/repos', '/orgs/'.$queryUser.'/repos'];\n                } else {\n                    $urls = ['/user/repos'];\n                }\n            } else {\n                Workflow::requestApi('/user/orgs', $curl, function ($orgs) use ($getRepos) {\n                    foreach ($orgs as $org) {\n                        $getRepos('/orgs/'.$org->login.'/repos', 0);\n                    }\n                });\n                $urls = ['/user/starred', '/user/subscriptions', '/user/repos'];\n            }\n            foreach ($urls as $prio => $url) {\n                $getRepos($url, $prio + 1);\n            }\n        }\n\n        if (!$isSearch && !$isRepo) {\n            Workflow::requestApi('/user/following', $curl, function ($urlUsers) use (&$users) {\n                $users = $urlUsers;\n            });\n        }\n\n        $curl->execute();\n\n        self::addRepos($repos);\n\n        foreach ($users as $user) {\n            Workflow::addItemIfMatches(Item::create()\n                ->prefix('@', false)\n                ->title($user->login.' ')\n                ->subtitle($user->type)\n                ->arg($user->html_url)\n                ->icon(lcfirst($user->type))\n                ->prio(200)\n            );\n        }\n\n        Workflow::addItemIfMatches(Item::create()\n            ->title('s '.substr(self::$query, 2, 4))\n            ->subtitle('Search repo or @user (min 4 chars)')\n            ->prio(110)\n            ->valid(false)\n        );\n\n        Workflow::addItemIfMatches(Item::create()\n            ->title('my ')\n            ->subtitle('Dashboard, settings, and more')\n            ->prio(100)\n            ->valid(false)\n        );\n    }\n\n    private static function addRepoSearchCommands()\n    {\n        $q = substr(self::$query, 2);\n        $repos = Workflow::requestApi('/search/repositories?q='.urlencode($q), null, null, true);\n\n        self::addRepos($repos, 's ');\n    }\n\n    private static function addUserSearchCommands()\n    {\n        $q = substr(self::$query, 3);\n        $users = Workflow::requestApi('/search/users?q='.urlencode($q), null, null, true);\n\n        self::addUsers($users, 's @');\n    }\n\n    private static function addRepos($repos, $comparatorPrefix = '')\n    {\n        foreach ($repos as $repo) {\n            $icon = 'repo';\n            if ($repo->fork) {\n                $icon = 'fork';\n            } elseif ($repo->mirror_url) {\n                $icon = 'mirror';\n            }\n            if ($repo->private) {\n                $icon = 'private-'.$icon;\n            }\n            Workflow::addItemIfMatches(Item::create()\n                ->title($repo->full_name.' ')\n                ->comparator($comparatorPrefix.$repo->full_name)\n                ->autocomplete($repo->full_name.' ')\n                ->subtitle(($repo->archived ? '[Archived] ' : '').$repo->description)\n                ->icon($icon)\n                ->arg('/'.$repo->full_name)\n                ->prio($repo->score)\n            );\n        }\n    }\n\n    private static function addUsers($users, $comparatorPrefix = '')\n    {\n        foreach ($users as $user) {\n            Workflow::addItemIfMatches(Item::create()\n                ->prefix('@', false)\n                ->title($user->login.' ')\n                ->comparator($comparatorPrefix.$user->login)\n                ->autocomplete($user->login.' ')\n                ->subtitle($user->type)\n                ->arg($user->html_url)\n                ->icon(lcfirst($user->type))\n                ->prio(isset($user->score) ? $user->score : 200)\n            );\n        }\n    }\n\n    private static function addRepoSubCommands()\n    {\n        $parts = self::$parts;\n        if (isset($parts[1][0]) && in_array($parts[1][0], ['#', '@', '*', '/'])) {\n            switch ($parts[1][0]) {\n                case '*':\n                    $commits = Workflow::requestApi('/repos/'.$parts[0].'/commits');\n                    foreach ($commits as $commit) {\n                        Workflow::addItemIfMatches(Item::create()\n                            ->title($commit->commit->message)\n                            ->comparator($parts[0].' *'.$commit->sha)\n                            ->subtitle($commit->commit->author->date.'  ('.$commit->sha.')')\n                            ->icon('commits')\n                            ->arg('/'.$parts[0].'/commit/'.$commit->sha)\n                            ->prio(strtotime($commit->commit->author->date))\n                        );\n                    }\n                    break;\n                case '@':\n                    $branches = Workflow::requestApi('/repos/'.$parts[0].'/branches');\n                    foreach ($branches as $branch) {\n                        Workflow::addItemIfMatches(Item::create()\n                            ->title('@'.$branch->name)\n                            ->comparator($parts[0].' @'.$branch->name)\n                            ->subtitle($branch->commit->sha)\n                            ->icon('branch')\n                            ->arg('/'.$parts[0].'/tree/'.str_replace('%2F', '/', urlencode($branch->name)))\n                        );\n                    }\n                    break;\n                case '/':\n                    $repo = Workflow::requestApi('/repos/'.$parts[0]);\n                    $files = Workflow::requestApi('/repos/'.$parts[0].'/git/trees/'.$repo->default_branch.'?recursive=1');\n                    foreach ($files->tree as $file) {\n                        if ('blob' === $file->type) {\n                            Workflow::addItemIfMatches(Item::create()\n                                ->title(basename($file->path))\n                                ->subtitle('/'.$file->path)\n                                ->comparator($parts[0].' /'.$file->path)\n                                ->icon('file')\n                                ->arg('/'.$parts[0].'/blob/'.$repo->default_branch.'/'.$file->path)\n                            );\n                        }\n                    }\n                    break;\n                case '#':\n                    $issues = Workflow::requestApi('/repos/'.$parts[0].'/issues?sort=updated&state=all');\n                    foreach ($issues as $issue) {\n                        Workflow::addItemIfMatches(Item::create()\n                            ->title($issue->title)\n                            ->comparator($parts[0].' #'.$issue->number.' '.$issue->title)\n                            ->subtitle('#'.$issue->number)\n                            ->icon(isset($issue->pull_request) ? 'pull-request' : 'issue')\n                            ->arg($issue->html_url)\n                            ->prio(strtotime($issue->updated_at))\n                        );\n                    }\n                    break;\n            }\n        } else {\n            $subs = [\n                'actions' => ['Show Github Actions'],\n                'admin' => ['Manage this repo', 'settings'],\n                'discussions' => ['Show discussions'],\n                'graphs' => ['All the graphs'],\n                'issues ' => ['List, show and create issues', 'issue'],\n                'milestones' => ['View milestones', 'milestone'],\n                'network' => ['See the network', 'graphs'],\n                'projects' => ['View projects', 'project'],\n                'pulls' => ['Show open pull requests', 'pull-request'],\n                'pulse' => ['See recent activity'],\n                'wiki' => ['Pull up the wiki'],\n                'commits' => ['View commit history'],\n                'releases' => ['See latest releases'],\n            ];\n            foreach ($subs as $key => $sub) {\n                Workflow::addItemIfMatches(Item::create()\n                    ->title($parts[0].' '.$key)\n                    ->subtitle($sub[0])\n                    ->icon(isset($sub[1]) ? $sub[1] : $key)\n                    ->arg('/'.$parts[0].'/'.$key)\n                );\n            }\n            Workflow::addItemIfMatches(Item::create()\n                ->title($parts[0].' new issue')\n                ->subtitle('Create new issue')\n                ->icon('issue')\n                ->arg('/'.$parts[0].'/issues/new/choose?source=c')\n            );\n            Workflow::addItemIfMatches(Item::create()\n                ->title($parts[0].' new pull')\n                ->subtitle('Create new pull request')\n                ->icon('pull-request')\n                ->arg('/'.$parts[0].'/pull/new?source=c')\n            );\n            if (empty($parts[1])) {\n                $subs = [\n                    '#' => ['Show a specific issue / pull request', 'issue'],\n                    '@' => ['Show a specific branch', 'branch'],\n                    '*' => ['Show a specific commit', 'commits'],\n                    '/' => ['Show a blob', 'file'],\n                ];\n                foreach ($subs as $key => $sub) {\n                    Workflow::addItemIfMatches(Item::create()\n                        ->title($parts[0].' '.$key)\n                        ->subtitle($sub[0])\n                        ->icon($sub[1])\n                        ->arg($key.' '.$parts[0])\n                        ->valid(false)\n                    );\n                }\n            }\n            Workflow::addItemIfMatches(Item::create()\n                ->title($parts[0].' dev')\n                ->subtitle('Open repo with Visual Studio Code in browser')\n                ->icon('codespaces')\n                ->arg('https://github.dev/'.$parts[0])\n            );\n            Workflow::addItemIfMatches(Item::create()\n                ->title($parts[0].' clone')\n                ->subtitle('Clone this repo')\n                ->icon('clone')\n                ->arg('/'.$parts[0].'.git')\n            );\n        }\n    }\n\n    private static function addUserSubCommands($queryUser)\n    {\n        $subs = [\n            'overview' => [$queryUser, \"View $queryUser's overview\", 'user'],\n            'repositories' => [$queryUser.'?tab=repositories', \"View $queryUser's repositories\", 'repo'],\n            'stars' => [$queryUser.'?tab=stars', \"View $queryUser's stars\"],\n        ];\n        $prio = count($subs) + 2;\n        foreach ($subs as $key => $sub) {\n            Workflow::addItemIfMatches(Item::create()\n                ->title('@'.$queryUser.' '.$key)\n                ->subtitle($sub[1])\n                ->icon(isset($sub[2]) ? $sub[2] : $key)\n                ->arg('/'.$sub[0])\n                ->prio($prio--)\n            );\n        }\n        Workflow::addItemIfMatches(Item::create()\n            ->title('@'.$queryUser.' gists')\n            ->subtitle(\"View $queryUser's' gists\")\n            ->icon('gists')\n            ->arg(Workflow::getGistUrl().'/'.$queryUser)\n            ->prio(2)\n        );\n\n        Workflow::addItemIfMatches(Item::create()\n            ->title($queryUser.'/')\n            ->comparator('@'.$queryUser.' ')\n            ->autocomplete($queryUser.'/')\n            ->subtitle(\"View $queryUser's' repositories (in alfred workflow)\")\n            ->icon('repo')\n            ->prio(1)\n            ->valid(false)\n        );\n    }\n\n    private static function addMyCommands()\n    {\n        $parts = self::$parts;\n        if (isset($parts[2]) && in_array($parts[1], ['pulls', 'issues'])) {\n            $icon = 'pulls' === $parts[1] ? 'pull-request' : 'issue';\n            $items = $icon.'s';\n            $subs = [\n                'created' => [$parts[1], 'View your '.$items],\n                'assigned' => [$parts[1].'/assigned', 'View your assigned '.$items],\n                'mentioned' => [$parts[1].'/mentioned', 'View '.$items.' that mentioned you'],\n            ];\n            if ('pulls' === $parts[1]) {\n                $subs['review requested'] = [$parts[1].'/review-requested', 'View '.$items.' that require review'];\n            }\n            foreach ($subs as $key => $sub) {\n                Workflow::addItemIfMatches(Item::create()\n                    ->title('my '.$parts[1].' '.$key)\n                    ->subtitle($sub[1])\n                    ->icon($icon)\n                    ->arg('/'.$sub[0])\n                    ->prio(1)\n                );\n            }\n\n            return;\n        } elseif (isset($parts[2]) && 'repos' === $parts[1]) {\n            Workflow::addItemIfMatches(Item::create()\n                ->title('my '.$parts[1].' ')\n                ->subtitle('View your repos')\n                ->icon('repo')\n                ->arg('/'.self::$user->login.'?tab=repositories')\n                ->prio(1)\n            );\n            Workflow::addItemIfMatches(Item::create()\n                ->title('my '.$parts[1].' new')\n                ->subtitle('Create new repo')\n                ->icon('repo')\n                ->arg('/new')\n                ->prio(1)\n            );\n\n            return;\n        }\n\n        $myPages = [\n            'dashboard' => ['', 'View your dashboard'],\n            'pulls ' => ['pulls', 'View your pull requests', 'pull-request'],\n            'issues ' => ['issues', 'View your issues', 'issue'],\n            'stars' => [self::$user->login.'?tab=stars', 'View your starred repositories'],\n            'profile' => [self::$user->login, 'View your public user profile', 'user'],\n            'settings' => ['settings', 'View or edit your account settings'],\n            'notifications' => ['notifications', 'View all your notifications'],\n        ];\n        foreach ($myPages as $key => $my) {\n            Workflow::addItemIfMatches(Item::create()\n                ->title('my '.$key)\n                ->subtitle($my[1])\n                ->icon(isset($my[2]) ? $my[2] : rtrim($key))\n                ->arg('/'.$my[0])\n                ->prio(1)\n            );\n        }\n        Workflow::addItemIfMatches(Item::create()\n            ->title('my gists')\n            ->subtitle('View your gists')\n            ->icon('gists')\n            ->arg(Workflow::getGistUrl().'/'.self::$user->login)\n            ->prio(1)\n        );\n\n        Workflow::addItemIfMatches(Item::create()\n            ->title('my repos ')\n            ->subtitle('View your repos')\n            ->icon('repo')\n            ->arg('/'.self::$user->login.'?tab=repositories')\n            ->prio(1)\n        );\n    }\n\n    private static function addSystemCommands()\n    {\n        $cmds = [\n            'delete cache' => 'Delete GitHub Cache',\n            'logout' => 'Log out this workflow',\n            'delete database' => 'Delete database (contains login, config and cache)',\n            'update' => 'Update this Alfred workflow',\n        ];\n        if (Workflow::getConfig('autoupdate', true)) {\n            $cmds['deactivate autoupdate'] = 'Deactivate auto updating this Alfred Workflow';\n        } else {\n            $cmds['activate autoupdate'] = 'Activate auto updating this Alfred Workflow';\n        }\n        if (self::$enterprise) {\n            $cmds['enterprise reset'] = 'Reset the GitHub Enterprise URL';\n        }\n        foreach ($cmds as $cmd => $desc) {\n            Workflow::addItemIfMatches(Item::create()\n                ->title('> '.$cmd)\n                ->subtitle($desc)\n                ->icon($cmd)\n                ->arg('> '.str_replace(' ', '-', $cmd))\n            );\n        }\n\n        $cmds = [\n            'help' => 'readme',\n            'changelog' => 'changelog',\n        ];\n        foreach ($cmds as $cmd => $file) {\n            Workflow::addItemIfMatches(Item::create()\n                ->title('> '.$cmd)\n                ->subtitle('View the '.$file)\n                ->icon('file')\n                ->arg('https://github.com/gharlan/alfred-github-workflow/blob/main/'.strtoupper($file).'.md')\n            );\n        }\n    }\n}\n"
        },
        {
          "name": "server.php",
          "type": "blob",
          "size": 1.47265625,
          "content": "<?php\n\nif (preg_match('/\\.(?:png|jpg|jpeg|gif)$/', $_SERVER['REQUEST_URI'])) {\n    return false;\n}\n\nrequire 'workflow.php';\n\nWorkflow::init();\n\nif (!isset($_GET['access_token'])) {\n    echo 'FAILURE (missing access_token parameter)!';\n    exit;\n}\n\nWorkflow::setAccessToken($_GET['access_token']);\nWorkflow::cacheWarmup();\n\n?>\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>alfred-github-workflow</title>\n        <style>\n            * {\n                margin: 0;\n                padding: 0;\n            }\n            body {\n                background: #999;\n                font-family: 'Helvetica Neue', sans-serif;\n                font-size: 14pt;\n            }\n            div {\n                padding-top: 200px;\n                width: 450px;\n                margin: 0 auto;\n            }\n            img {\n                display: block;\n                float: left;\n                margin-right: 20px;\n            }\n            p {\n                padding-top: 20px;\n            }\n            span {\n                background: #444;\n                color: #fff;\n                padding: 5px;\n                margin-bottom: 5px;\n                display: inline-block;\n            }\n        </style>\n    </head>\n    <body>\n        <div>\n            <img src=\"icon.png\" width=\"125\" height=\"125\"/>\n            <p>\n                <span>alfred-github-workflow is ready.</span><br>\n                <span>Have fun.</span>\n            </p>\n        </div>\n    </body>\n</html>\n"
        },
        {
          "name": "workflow.php",
          "type": "blob",
          "size": 14.1103515625,
          "content": "<?php\n\nrequire 'item.php';\nrequire 'curl.php';\n\nclass Workflow\n{\n    public const VERSION = '1.9.1';\n    public const BUNDLE = 'de.gh01.alfred.github';\n    public const DEFAULT_CACHE_MAX_AGE = 10;\n\n    private static $filePids;\n\n    private static $fileDb;\n    /** @var PDO */\n    private static $db;\n    /** @var PDOStatement[] */\n    private static $statements = [];\n\n    private static $enterprise;\n    private static $baseUrl = 'https://github.com';\n    private static $apiUrl = 'https://api.github.com';\n    private static $gistUrl = 'https://gist.github.com';\n\n    private static $query;\n    private static $hotkey;\n    private static $items = [];\n\n    private static $refreshUrls = [];\n\n    private static $debug = false;\n\n    public static function init($enterprise = false, $query = null, $hotkey = false)\n    {\n        date_default_timezone_set('UTC');\n\n        self::$enterprise = $enterprise;\n        self::$query = ltrim($query ?? '');\n        self::$hotkey = $hotkey;\n\n        $dataDir = getenv('alfred_workflow_data');\n        if (!$dataDir) {\n            $dataDir = getenv('HOME').'/Library/Application Support/Alfred/Workflow Data/'.self::BUNDLE;\n            putenv('alfred_workflow_data=\"'.$dataDir.'\"');\n        }\n        if (!is_dir($dataDir)) {\n            mkdir($dataDir);\n        }\n\n        self::$filePids = $dataDir.'/pid';\n\n        self::$fileDb = $dataDir.'/db.sqlite';\n        $exists = file_exists(self::$fileDb);\n        self::$db = new PDO('sqlite:'.self::$fileDb, null, null);\n        self::$db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n        if (!$exists) {\n            self::createTables();\n        }\n\n        if (self::$enterprise) {\n            self::$baseUrl = self::getConfig('enterprise_url');\n            self::$apiUrl = self::$baseUrl ? self::$baseUrl.'/api/v3' : null;\n            self::$gistUrl = self::$baseUrl ? self::$baseUrl.'/gist' : null;\n        }\n\n        self::$debug = getenv('alfred_debug') && defined('STDERR');\n\n        register_shutdown_function([__CLASS__, 'shutdown']);\n    }\n\n    public static function shutdown()\n    {\n        if (self::$refreshUrls) {\n            $urls = implode(',', array_keys(self::$refreshUrls));\n            exec(escapeshellarg(PHP_BINARY).' action.php \"> refresh-cache '.$urls.'\" > /dev/null 2>&1 &');\n            self::log('refreshing cache in background for %s', $urls);\n        }\n    }\n\n    public static function setConfig($key, $value)\n    {\n        self::getStatement('REPLACE INTO config VALUES(?, ?)')->execute([$key, $value]);\n    }\n\n    public static function getConfig($key, $default = null)\n    {\n        $stmt = self::getStatement('SELECT value FROM config WHERE key = ?');\n        $stmt->execute([$key]);\n        $value = $stmt->fetchColumn();\n\n        return false !== $value ? $value : $default;\n    }\n\n    public static function removeConfig($key)\n    {\n        self::getStatement('DELETE FROM config WHERE key = ?')->execute([$key]);\n    }\n\n    public static function getBaseUrl()\n    {\n        return self::$baseUrl;\n    }\n\n    public static function getApiUrl($path = null)\n    {\n        $url = self::$apiUrl;\n\n        if ($path) {\n            $paramStart = false === strpos($path, '?') ? '?' : '&';\n            $url .= $path.$paramStart.'per_page=100';\n        }\n\n        return $url;\n    }\n\n    public static function getGistUrl()\n    {\n        return self::$gistUrl;\n    }\n\n    public static function setAccessToken($token)\n    {\n        self::setConfig(self::$enterprise ? 'enterprise_access_token' : 'access_token', $token);\n    }\n\n    public static function getAccessToken()\n    {\n        return self::getConfig(self::$enterprise ? 'enterprise_access_token' : 'access_token');\n    }\n\n    public static function removeAccessToken()\n    {\n        self::removeConfig(self::$enterprise ? 'enterprise_access_token' : 'access_token');\n    }\n\n    public static function request(string $url, ?Curl $curl = null, $callback = null, bool $withAuthorization = true)\n    {\n        self::log('loading content for %s', $url);\n\n        $return = false;\n        $returnValue = null;\n        if (!$curl) {\n            $curl = new Curl();\n            $return = true;\n            $callback = function ($content) use (&$returnValue) {\n                $returnValue = $content;\n            };\n        }\n\n        $token = $withAuthorization ? self::getAccessToken() : null;\n        $curl->add(new CurlRequest($url, null, $token, function (CurlResponse $response) use ($callback) {\n            if (is_callable($callback) && isset($response->content)) {\n                $callback($response->content);\n            }\n        }));\n\n        if ($return) {\n            $curl->execute();\n        }\n\n        return $returnValue;\n    }\n\n    /**\n     * @param string   $url\n     * @param Curl     $curl\n     * @param callable $callback\n     * @param bool     $firstPageOnly\n     * @param int      $maxAge\n     * @param bool     $refreshInBackground\n     *\n     * @return mixed\n     */\n    public static function requestCache(string $url, ?Curl $curl = null, $callback = null, bool $firstPageOnly = false, int $maxAge = self::DEFAULT_CACHE_MAX_AGE, bool $refreshInBackground = true)\n    {\n        $return = false;\n        $returnValue = null;\n        if (!$curl) {\n            $curl = new Curl();\n            $return = true;\n            $callback = function ($content) use (&$returnValue) {\n                $returnValue = $content;\n            };\n        }\n\n        $stmt = self::getStatement('SELECT * FROM request_cache WHERE url = ?');\n        $stmt->execute([$url]);\n        $stmt->bindColumn('timestamp', $timestamp);\n        $stmt->bindColumn('etag', $etag);\n        $stmt->bindColumn('content', $content);\n        $stmt->bindColumn('refresh', $refresh);\n        $stmt->fetch(PDO::FETCH_BOUND);\n\n        $shouldRefresh = $timestamp < time() - 60 * $maxAge;\n        $refreshInBackground = $refreshInBackground && null !== $content;\n\n        if ($shouldRefresh && $refreshInBackground && $refresh < time() - 3 * 60) {\n            self::getStatement('UPDATE request_cache SET refresh = ? WHERE url = ?')->execute([time(), $url]);\n            self::$refreshUrls[$url] = true;\n        }\n\n        if (!$shouldRefresh || $refreshInBackground) {\n            self::log('using cached content for %s', $url);\n            $content = json_decode($content);\n\n            if (!$firstPageOnly) {\n                $stmt = self::getStatement('SELECT url, content FROM request_cache WHERE parent = ? ORDER BY `timestamp` DESC');\n                while ($stmt->execute([$url]) && $data = $stmt->fetchObject()) {\n                    $content = array_merge($content, json_decode($data->content));\n                    $url = $data->url;\n                }\n            }\n\n            if (is_callable($callback)) {\n                $callback($content);\n            }\n\n            return $returnValue;\n        }\n\n        $responses = [];\n\n        $handleResponse = function (CurlResponse $response, $content, $parent = null) use (&$handleResponse, $curl, &$responses, $stmt, $callback, $firstPageOnly) {\n            $url = $response->request->url;\n            if ($response && in_array($response->status, [200, 304])) {\n                $checkNext = false;\n                if (304 == $response->status) {\n                    $response->content = $content;\n                    $checkNext = true;\n                } elseif (false === stripos($response->contentType, 'json')) {\n                    $response->content = json_encode($response->content);\n                }\n                $response->content = json_decode($response->content);\n                if (isset($response->content->items)) {\n                    $response->content = $response->content->items;\n                }\n                $responses[] = $response->content;\n                self::getStatement('REPLACE INTO request_cache VALUES(?, ?, ?, ?, 0, ?)')\n                    ->execute([$url, time(), $response->etag, json_encode($response->content), $parent]);\n\n                if ($firstPageOnly) {\n                    // do nothing\n                } elseif ($checkNext || $response->link && preg_match('/<([^<>]+)>; rel=\"next\"/U', $response->link, $match)) {\n                    $stmt = self::getStatement('SELECT * FROM request_cache WHERE parent = ?');\n                    $stmt->execute([$url]);\n                    if ($checkNext) {\n                        $stmt->bindColumn('url', $nextUrl);\n                    } else {\n                        $nextUrl = $match[1];\n                    }\n                    $stmt->bindColumn('etag', $etag);\n                    $stmt->bindColumn('content', $content);\n                    $stmt->fetch(PDO::FETCH_BOUND);\n                    if ($nextUrl) {\n                        $curl->add(new CurlRequest($nextUrl, $etag, self::getAccessToken(), function (CurlResponse $response) use ($handleResponse, $url, $content) {\n                            $handleResponse($response, $content, $url);\n                        }));\n\n                        return;\n                    }\n                } else {\n                    self::getStatement('DELETE FROM request_cache WHERE parent = ?')->execute([$url]);\n                }\n            } else {\n                self::getStatement('DELETE FROM request_cache WHERE url = ?')->execute([$url]);\n                $url = null;\n            }\n\n            if (is_callable($callback)) {\n                if (empty($responses)) {\n                    $callback([]);\n\n                    return;\n                }\n                if (1 === count($responses)) {\n                    $callback($responses[0]);\n\n                    return;\n                }\n                $callback(array_reduce($responses, function ($content, $response) {\n                    return array_merge($content, $response);\n                }, []));\n            }\n        };\n\n        self::log('loading content for %s', $url);\n        $curl->add(new CurlRequest($url, $etag, self::getAccessToken(), function (CurlResponse $response) use (&$responses, $handleResponse , $content) {\n            $handleResponse($response, $content);\n        }));\n\n        if ($return) {\n            $curl->execute();\n        }\n\n        return $returnValue;\n    }\n\n    public static function requestApi(string $url, ?Curl $curl = null, $callback = null, bool $firstPageOnly = false, int $maxAge = self::DEFAULT_CACHE_MAX_AGE)\n    {\n        $url = self::getApiUrl($url);\n\n        return self::requestCache($url, $curl, $callback, $firstPageOnly, $maxAge);\n    }\n\n    public static function cleanCache()\n    {\n        self::$db->exec('DELETE FROM request_cache WHERE timestamp < '.(time() - 100 * 24 * 60 * 60));\n    }\n\n    public static function deleteCache()\n    {\n        self::$db->exec('DELETE FROM request_cache');\n    }\n\n    public static function cacheWarmup()\n    {\n        $paths = ['/user', '/user/orgs', '/user/starred', '/user/subscriptions', '/user/repos', '/user/following'];\n        foreach ($paths as $path) {\n            self::$refreshUrls[self::getApiUrl($path)] = true;\n        }\n    }\n\n    public static function startServer()\n    {\n        if (version_compare(PHP_VERSION, '5.4', '>=')) {\n            self::stopServer();\n            shell_exec(sprintf(\n                'alfred_workflow_data=%s %s -d variables_order=EGPCS -S localhost:2233 server.php > /dev/null 2>&1 & echo $! >> %s',\n                escapeshellarg(getenv('alfred_workflow_data')),\n                escapeshellarg(PHP_BINARY),\n                escapeshellarg(self::$filePids)\n            ));\n        }\n    }\n\n    public static function stopServer()\n    {\n        if (file_exists(self::$filePids)) {\n            $pids = file(self::$filePids);\n            foreach ($pids as $pid) {\n                shell_exec('kill -9 '.$pid);\n            }\n            unlink(self::$filePids);\n        }\n    }\n\n    public static function checkUpdate()\n    {\n        if (self::VERSION !== self::getConfig('version')) {\n            self::setConfig('version', self::VERSION);\n        }\n        if (!self::getConfig('autoupdate', 1)) {\n            return false;\n        }\n        $release = self::requestCache('https://api.github.com/repos/gharlan/alfred-github-workflow/releases/latest', null, null, true, 1440);\n        if (!$release) {\n            return false;\n        }\n        $version = ltrim($release->tag_name, 'v');\n\n        return version_compare($version, self::VERSION) > 0;\n    }\n\n    private static function createTables()\n    {\n        self::$db->exec('\n            CREATE TABLE config (\n                key TEXT PRIMARY KEY NOT NULL,\n                value TEXT\n            ) WITHOUT ROWID\n        ');\n\n        self::$db->exec('\n            CREATE TABLE request_cache (\n                url TEXT PRIMARY KEY NOT NULL,\n                timestamp INTEGER NOT NULL,\n                etag TEXT,\n                content TEXT,\n                refresh INTEGER,\n                parent TEXT\n            ) WITHOUT ROWID\n        ');\n        self::$db->exec('CREATE INDEX parent_url ON request_cache(parent) WHERE parent IS NOT NULL');\n    }\n\n    public static function deleteDatabase()\n    {\n        self::closeCursors();\n        self::$db = null;\n        unlink(self::$fileDb);\n    }\n\n    public static function addItemIfMatches(Item $item)\n    {\n        if ($item->match(self::$query)) {\n            self::$items[] = $item;\n        }\n    }\n\n    public static function addItem(Item $item)\n    {\n        self::$items[] = $item;\n    }\n\n    public static function sortItems()\n    {\n        usort(self::$items, function (Item $a, Item $b) {\n            return $a->compare($b);\n        });\n    }\n\n    public static function getItemsAsXml()\n    {\n        return Item::toXml(self::$items, self::$enterprise, self::$hotkey, self::getBaseUrl());\n    }\n\n    public static function log($msg)\n    {\n        if (self::$debug) {\n            fwrite(STDERR, \"\\n\".call_user_func_array('sprintf', func_get_args()));\n        }\n    }\n\n    /**\n     * @param string $query\n     *\n     * @return PDOStatement\n     */\n    public static function getStatement($query)\n    {\n        if (!isset(self::$statements[$query])) {\n            self::$statements[$query] = self::$db->prepare($query);\n        }\n\n        return self::$statements[$query];\n    }\n\n    protected static function closeCursors()\n    {\n        foreach (self::$statements as $statement) {\n            $statement->closeCursor();\n        }\n        self::$statements = [];\n    }\n}\n"
        }
      ]
    }
  ]
}