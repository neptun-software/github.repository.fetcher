{
  "metadata": {
    "timestamp": 1736712067822,
    "page": 616,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "picqer/php-barcode-generator",
      "stars": 1690,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3193359375,
          "content": "# ignore directories in the git-generated distributed .zip archive\n/.github export-ignore\n/tests export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\ngenerate-examples.php export-ignore\ngenerate-verified-files.php export-ignore\nphpunit.xml export-ignore\nexamples.md export-ignore\nphpstan.neon.dist export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0654296875,
          "content": "vendor\ncomposer.lock\ncomposer.phar\n.phpunit.result.cache\n.DS_Store\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 7.4716796875,
          "content": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 13.091796875,
          "content": "# PHP Barcode Generator \n<a href=\"https://github.com/picqer/php-barcode-generator/actions\"><img src=\"https://github.com/picqer/php-barcode-generator/workflows/phpunit/badge.svg\" alt=\"Build Status\"></a>\n<a href=\"https://packagist.org/packages/picqer/php-barcode-generator\"><img src=\"https://img.shields.io/packagist/dt/picqer/php-barcode-generator\" alt=\"Total Downloads\"></a>\n<a href=\"https://packagist.org/packages/picqer/php-barcode-generator\"><img src=\"https://img.shields.io/packagist/v/picqer/php-barcode-generator\" alt=\"Latest Stable Version\"></a>\n\nThis is an easy to use, non-bloated, framework independent, barcode generator in PHP. It uses zero(!) composer dependencies and is only a handful of files. Probably the reason that this is the most downloaded barcode generator for PHP on Packagist. ;)\n\nIt creates SVG, PNG, JPG and HTML images, from the most used 1D barcode standards.\n\n## No support for...\n- No support for any **2D** barcodes, like QR codes.\n- We only generate the 'bars' part of a barcode, without text below the barcode. If you want text of the code below the barcode, you could add it later to the output of this package. \n\n## Installation\nInstall through [composer](https://getcomposer.org/doc/00-intro.md):\n\n```\ncomposer require picqer/php-barcode-generator\n```\n\nIf you want to generate PNG or JPG images, you need the GD library or Imagick installed on your system as well. For SVG or HTML renders, there are no dependencies.\n\n## Usage\nYou want a barcode for a specific \"type\" (for example Code 128 or UPC) in a specific image format (for example PNG or SVG).\n\n- First, encode the string you want the barcode of into a `Barcode` object with one of the barcode types.\n- Then, use one of the renderers to render the image of the bars in the `Barcode` object.\n\n> The \"type\" is a standard that defines which characters you can encode and which bars represent which character. The most used types are [code 128](https://en.wikipedia.org/wiki/Code_128) and [EAN/UPC](https://en.wikipedia.org/wiki/International_Article_Number). Not all characters can be encoded into each barcode type, and not all barcode scanners can read all types.\n\n```php\n<?php\nrequire 'vendor/autoload.php';\n\n// Make Barcode object of Code128 encoding.\n$barcode = (new Picqer\\Barcode\\Types\\TypeCode128())->getBarcode('081231723897');\n\n// Output the barcode as HTML in the browser with a HTML Renderer\n$renderer = new Picqer\\Barcode\\Renderers\\HtmlRenderer();\necho $renderer->render($barcode);\n```\n\nWill result in this beauty:<br>\n![Barcode 081231723897 as Code 128](tests/verified-files/081231723897-ean13.svg)\n\nEach renderer has their own options. For example, you can set the height, width and color of a PNG:\n```php\n<?php\nrequire 'vendor/autoload.php';\n\n$colorRed = [255, 0, 0];\n\n$barcode = (new Picqer\\Barcode\\Types\\TypeCode128())->getBarcode('081231723897');\n$renderer = new Picqer\\Barcode\\Renderers\\PngRenderer();\n$renderer->setForegroundColor($colorRed);\n\n// Save PNG to the filesystem, with widthFactor 3 (width of the barcode x 3) and height of 50 pixels\nfile_put_contents('barcode.png', $renderer->render($barcode, $barcode->getWidth() * 3, 50));\n```\n\n## Image renderers\nAvailable image renderers: SVG, PNG, JPG and HTML.\n\nThey all conform to the RendererInterface and have the same `render()` method. Some renderers have extra options as well, via set*() methods.\n\n### Widths\nThe render() method needs the Barcode object, the width and height. **For JPG/PNG images**, you only get a valid barcode if you give a width that is a factor of the width of the Barcode object. That is why the examples show `$barcode->getWidth() * 2` to make the image 2 times wider in pixels then the width of the barcode data. You *can* give an arbitrary number as width and the image will be scaled as best as possible, but without anti-aliasing, it will not be perfectly valid.\n\nHTML and SVG renderers can handle any width and height, even floats.\n\nHere are all the options for each renderer:\n\n### SVG\nA vector based SVG image. Gives the best quality to print.\n```php\n$renderer = new Picqer\\Barcode\\Renderers\\SvgRenderer();\n$renderer->setForegroundColor([255, 0, 0]); // Give a color red for the bars, default is black. Give it as 3 times 0-255 values for red, green and blue. \n$renderer->setBackgroundColor([0, 0, 255]); // Give a color blue for the background, default is transparent. Give it as 3 times 0-255 values for red, green and blue. \n$renderer->setSvgType($renderer::TYPE_SVG_INLINE); // Changes the output to be used inline inside HTML documents, instead of a standalone SVG image (default)\n$renderer->setSvgType($renderer::TYPE_SVG_STANDALONE); // If you want to force the default, create a stand alone SVG image\n\n$renderer->render($barcode, 450.20, 75); // Width and height support floats\n````\n\n### PNG + JPG\nAll options for PNG and JPG are the same.\n```php\n$renderer = new Picqer\\Barcode\\Renderers\\PngRenderer();\n$renderer->setForegroundColor([255, 0, 0]); // Give a color for the bars, default is black. Give it as 3 times 0-255 values for red, green and blue. \n$renderer->setBackgroundColor([0, 255, 255]); // Give a color for the background, default is transparent (in PNG) or white (in JPG). Give it as 3 times 0-255 values for red, green and blue. \n$renderer->useGd(); // If you have Imagick and GD installed, but want to use GD\n$renderer->useImagick(); // If you have Imagick and GD installed, but want to use Imagick\n\n$renderer->render($barcode, 5, 40); // Width factor (how many pixel wide every bar is), and the height in pixels\n````\n\n### HTML\nGives HTML to use inline in a full HTML document.\n```php\n$renderer = new Picqer\\Barcode\\Renderers\\HtmlRenderer();\n$renderer->setForegroundColor([255, 0, 0]); // Give a color red for the bars, default is black. Give it as 3 times 0-255 values for red, green and blue. \n$renderer->setBackgroundColor([0, 0, 255]); // Give a color blue for the background, default is transparent. Give it as 3 times 0-255 values for red, green and blue. \n\n$renderer->render($barcode, 450.20, 75); // Width and height support floats\n````\n\n### Dynamic HTML\nGive HTML here the barcode is using the full width and height, to put inside a container/div that has a fixed size.\n```php\n$renderer = new Picqer\\Barcode\\Renderers\\DynamicHtmlRenderer();\n$renderer->setForegroundColor([255, 0, 0]); // Give a color red for the bars, default is black. Give it as 3 times 0-255 values for red, green and blue. \n$renderer->setBackgroundColor([0, 0, 255]); // Give a color blue for the background, default is transparent. Give it as 3 times 0-255 values for red, green and blue. \n\n$renderer->render($barcode);\n````\n\nYou can put the rendered HTML inside a div like this:\n```html\n<div style=\"width: 400px; height: 75px\"><?php echo $renderedBarcode; ?></div>\n```\n\n## Accepted barcode types\nThese barcode types are supported. All types support different character sets and some have mandatory lengths. Please see wikipedia for supported chars and lengths per type.\n\nYou can find all supported types in the [src/Types](src/Types) folder.\n\nMost used types are TYPE_CODE_128 and TYPE_CODE_39. Because of the best scanner support, variable length and most chars supported.\n\n- TYPE_CODE_32 (italian pharmaceutical code 'MINSAN')\n- TYPE_CODE_39\n- TYPE_CODE_39_CHECKSUM\n- TYPE_CODE_39E\n- TYPE_CODE_39E_CHECKSUM\n- TYPE_CODE_93\n- TYPE_STANDARD_2_5\n- TYPE_STANDARD_2_5_CHECKSUM\n- TYPE_INTERLEAVED_2_5\n- TYPE_INTERLEAVED_2_5_CHECKSUM\n- TYPE_CODE_128\n- TYPE_CODE_128_A\n- TYPE_CODE_128_B\n- TYPE_CODE_128_C\n- TYPE_EAN_2\n- TYPE_EAN_5\n- TYPE_EAN_8\n- TYPE_EAN_13\n- TYPE_ITF14 (Also known as GTIN-14)\n- TYPE_UPC_A\n- TYPE_UPC_E\n- TYPE_MSI\n- TYPE_MSI_CHECKSUM\n- TYPE_POSTNET\n- TYPE_PLANET\n- TYPE_RMS4CC\n- TYPE_KIX\n- TYPE_IMB\n- TYPE_CODABAR\n- TYPE_CODE_11\n- TYPE_PHARMA_CODE\n- TYPE_PHARMA_CODE_TWO_TRACKS\n\n[See example images for all supported barcode types](examples.md)\n\n## A note about PNG and JPG images\nIf you want to use PNG or JPG images, you need to install [Imagick](https://www.php.net/manual/en/intro.imagick.php) or the [GD library](https://www.php.net/manual/en/intro.image.php). This package will use Imagick if that is installed, or fall back to GD. If you have both installed, but you want a specific method, you can use `$renderer->useGd()` or `$renderer->useImagick()` to force your preference.\n\n## Examples\n\n### Embedded PNG image in HTML\n```php\n$barcode = (new Picqer\\Barcode\\Types\\TypeCode128())->getBarcode('081231723897');\n$renderer = new Picqer\\Barcode\\Renderers\\PngRenderer();\necho '<img src=\"data:image/png;base64,' . base64_encode($renderer->render($barcode, $barcode->getWidth() * 2)) . '\">';\n```\n\n### Save JPG barcode to disk\n```php\n$barcode = (new Picqer\\Barcode\\Types\\TypeCodabar())->getBarcode('081231723897');\n$renderer = new Picqer\\Barcode\\Renderers\\JpgRenderer();\n\nfile_put_contents('barcode.jpg', $renderer->render($barcode, $barcode->getWidth() * 2));\n```\n\n### Oneliner SVG output to disk\n```php\nfile_put_contents('barcode.svg', (new Picqer\\Barcode\\Renderers\\SvgRenderer())->render((new Picqer\\Barcode\\Types\\TypeKix())->getBarcode('6825ME601')));\n```\n\n## Upgrading to v3\nThere is no need to change anything when upgrading from v2 to v3. Above you find the new preferred way of using this library since v3. But the old style still works.\n\nTo give the renderers the same interface, setting colors is now always with an array of RGB colors. If you use the old BarcodeGenerator* classes and use colors with names ('red') or hex codes (#3399ef), these will be converted using the ColorHelper. All hexcodes are supported, but for names of colors only the basic colors are supported.\n\nIf you want to convert to the new style, here is an example:\n```php\n// Old style\n$generator = new Picqer\\Barcode\\BarcodeGeneratorSVG();\necho $generator->getBarcode('081231723897', $generator::TYPE_CODE_128);\n\n// New style\n$barcode = (new Picqer\\Barcode\\Types\\TypeCode128())->getBarcode('081231723897');\n$renderer = new Picqer\\Barcode\\Renderers\\SvgRenderer();\necho $renderer->render($barcode);\n```\n\nThe width in the renderer is now the width of the end result, instead of the widthFactor. If you want to keep dynamic widths, you can get the width of the encoded Barcode and multiply it by the widthFactor to get the same result as before. See here an example for a widthFactor of 2:\n```php\n// Old style\n$generator = new Picqer\\Barcode\\BarcodeGeneratorSVG();\necho $generator->getBarcode('081231723897', $generator::TYPE_CODE_128, 2. 30);\n\n// New style\n$barcode = (new Picqer\\Barcode\\Types\\TypeCode128())->getBarcode('081231723897');\n$renderer = new Picqer\\Barcode\\Renderers\\SvgRenderer();\necho $renderer->render($barcode, $barcode->getWidth() * 2, 30);\n```\n\n---\n\n## Previous style generators\nIn version 3 the barcode type encoders and image renderers are completely separate. This makes building your own renderer way easier. The old way was using \"generators\". Below are the old examples of these generators, which still works in v3 as well.\n\n### Usage\nInitiate the barcode generator for the output you want, then call the ->getBarcode() routine as many times as you want.\n\n```php\n<?php\nrequire 'vendor/autoload.php';\n\n// This will output the barcode as HTML output to display in the browser\n$generator = new Picqer\\Barcode\\BarcodeGeneratorHTML();\necho $generator->getBarcode('081231723897', $generator::TYPE_CODE_128);\n```\n\nWill result in this beauty:<br>\n![Barcode 081231723897 as Code 128](tests/verified-files/081231723897-ean13.svg)\n\nThe `getBarcode()` method accepts the following parameters:\n- `$barcode` String needed to encode in the barcode\n- `$type` Type of barcode, use the constants defined in the class\n- `$widthFactor` Width is based on the length of the data, with this factor you can make the barcode bars wider than default\n- `$height` The total height of the barcode in pixels\n- `$foregroundColor` Hex code as string, or array of RGB, of the colors of the bars (the foreground color)\n\nExample of usage of all parameters:\n\n```php\n<?php\n\nrequire 'vendor/autoload.php';\n\n$redColor = [255, 0, 0];\n\n$generator = new Picqer\\Barcode\\BarcodeGeneratorPNG();\nfile_put_contents('barcode.png', $generator->getBarcode('081231723897', $generator::TYPE_CODE_128, 3, 50, $redColor));\n```\n\n### Image types\n```php\n$generatorSVG = new Picqer\\Barcode\\BarcodeGeneratorSVG(); // Vector based SVG\n$generatorPNG = new Picqer\\Barcode\\BarcodeGeneratorPNG(); // Pixel based PNG\n$generatorJPG = new Picqer\\Barcode\\BarcodeGeneratorJPG(); // Pixel based JPG\n$generatorHTML = new Picqer\\Barcode\\BarcodeGeneratorHTML(); // Pixel based HTML\n$generatorHTML = new Picqer\\Barcode\\BarcodeGeneratorDynamicHTML(); // Vector based HTML\n```\n\n#### Embedded PNG image in HTML\n```php\n$generator = new Picqer\\Barcode\\BarcodeGeneratorPNG();\necho '<img src=\"data:image/png;base64,' . base64_encode($generator->getBarcode('081231723897', $generator::TYPE_CODE_128)) . '\">';\n```\n\n#### Save JPG barcode to disk\n```php\n$generator = new Picqer\\Barcode\\BarcodeGeneratorJPG();\nfile_put_contents('barcode.jpg', $generator->getBarcode('081231723897', $generator::TYPE_CODABAR));\n```\n\n#### Oneliner SVG output to disk\n```php\nfile_put_contents('barcode.svg', (new Picqer\\Barcode\\BarcodeGeneratorSVG())->getBarcode('6825ME601', Picqer\\Barcode\\BarcodeGeneratorSVG::TYPE_KIX));\n```\n\n---\n*The codebase is based on the [TCPDF barcode generator](https://github.com/tecnickcom/TCPDF) by Nicola Asuni. This code is therefor licensed under LGPLv3.*\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.443359375,
          "content": "{\n    \"name\": \"picqer/php-barcode-generator\",\n    \"type\": \"library\",\n    \"description\": \"An easy to use, non-bloated, barcode generator in PHP. Creates SVG, PNG, JPG and HTML images from the most used 1D barcode standards.\",\n    \"keywords\": [ \"php\", \"barcode\", \"barcode generator\", \"EAN\", \"EAN13\", \"UPC\", \"Code39\", \"Code128\", \"Code93\", \"Standard 2 of 5\", \"MSI\", \"POSTNET\", \"KIX\", \"KIXCODE\", \"CODABAR\", \"PHARMA\", \"Code11\", \"SVG\", \"PNG\", \"HTML\", \"JPG\", \"JPEG\" ],\n    \"homepage\": \"https://github.com/picqer/php-barcode-generator\",\n    \"license\": \"LGPL-3.0-or-later\",\n    \"authors\": [\n        {\n            \"name\": \"Casper Bakker\",\n            \"email\": \"info@picqer.com\",\n            \"homepage\": \"https://picqer.com\"\n        },\n        {\n            \"name\": \"Nicola Asuni\",\n            \"email\": \"info@tecnick.com\",\n            \"homepage\": \"http://nicolaasuni.tecnick.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.2\",\n        \"ext-mbstring\": \"*\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^9.5\",\n        \"phpstan/phpstan\": \"^1.10\"\n    },\n    \"suggest\": {\n        \"ext-bcmath\": \"Barcode IMB (Intelligent Mail Barcode) needs bcmath extension\",\n        \"ext-gd\": \"For JPG and PNG generators, GD or Imagick is required\",\n        \"ext-imagick\": \"For JPG and PNG generators, GD or Imagick is required\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Picqer\\\\Barcode\\\\\": \"src\"\n        }\n    },\n    \"scripts\": {\n        \"test\": \"vendor/bin/phpunit\"\n    }\n}\n"
        },
        {
          "name": "examples.md",
          "type": "blob",
          "size": 5.015625,
          "content": "# Examples of supported barcodes\n\nThese are examples of supported barcodes with this library.\n\nAll types can be found in the src/Types directory.\n\n\n\n### TypeCode39\n\n![Barcode 1234567890ABC as Picqer\\Barcode\\Types\\TypeCode39](tests/verified-files/TypeCode39-1234567890ABC.svg)\n\n### TypeCode39Checksum\n\n![Barcode 1234567890ABC as Picqer\\Barcode\\Types\\TypeCode39Checksum](tests/verified-files/TypeCode39Checksum-1234567890ABC.svg)\n\n### TypeCode39Extended\n\n![Barcode 1234567890abcABC as Picqer\\Barcode\\Types\\TypeCode39Extended](tests/verified-files/TypeCode39Extended-1234567890abcABC.svg)\n\n### TypeCode39ExtendedChecksum\n\n![Barcode 1234567890abcABC as Picqer\\Barcode\\Types\\TypeCode39ExtendedChecksum](tests/verified-files/TypeCode39ExtendedChecksum-1234567890abcABC.svg)\n\n### TypeCode93\n\n![Barcode 1234567890abcABC as Picqer\\Barcode\\Types\\TypeCode93](tests/verified-files/TypeCode93-1234567890abcABC.svg)\n\n### TypeStandard2of5\n\n![Barcode 1234567890 as Picqer\\Barcode\\Types\\TypeStandard2of5](tests/verified-files/TypeStandard2of5-1234567890.svg)\n\n### TypeStandard2of5Checksum\n\n![Barcode 1234567890 as Picqer\\Barcode\\Types\\TypeStandard2of5Checksum](tests/verified-files/TypeStandard2of5Checksum-1234567890.svg)\n\n### TypeInterleaved25\n\n![Barcode 1234567890 as Picqer\\Barcode\\Types\\TypeInterleaved25](tests/verified-files/TypeInterleaved25-1234567890.svg)\n\n### TypeInterleaved25Checksum\n\n![Barcode 1234567890 as Picqer\\Barcode\\Types\\TypeInterleaved25Checksum](tests/verified-files/TypeInterleaved25Checksum-1234567890.svg)\n\n### TypeEan13\n\n![Barcode 081231723897 as Picqer\\Barcode\\Types\\TypeEan13](tests/verified-files/TypeEan13-081231723897.svg)\n\n![Barcode 0049000004632 as Picqer\\Barcode\\Types\\TypeEan13](tests/verified-files/TypeEan13-0049000004632.svg)\n\n![Barcode 004900000463 as Picqer\\Barcode\\Types\\TypeEan13](tests/verified-files/TypeEan13-004900000463.svg)\n\n### TypeITF14\n\n![Barcode 00012345600012 as Picqer\\Barcode\\Types\\TypeITF14](tests/verified-files/TypeITF14-00012345600012.svg)\n\n![Barcode 05400141288766 as Picqer\\Barcode\\Types\\TypeITF14](tests/verified-files/TypeITF14-05400141288766.svg)\n\n### TypeCode128\n\n![Barcode 081231723897 as Picqer\\Barcode\\Types\\TypeCode128](tests/verified-files/TypeCode128-081231723897.svg)\n\n![Barcode 1234567890abcABC-283*33 as Picqer\\Barcode\\Types\\TypeCode128](tests/verified-files/TypeCode128-1234567890abcABC-283-33.svg)\n\n### TypeCode128A\n\n![Barcode 1234567890 as Picqer\\Barcode\\Types\\TypeCode128A](tests/verified-files/TypeCode128A-1234567890.svg)\n\n### TypeCode128B\n\n![Barcode 081231723897 as Picqer\\Barcode\\Types\\TypeCode128B](tests/verified-files/TypeCode128B-081231723897.svg)\n\n![Barcode 1234567890abcABC-283*33 as Picqer\\Barcode\\Types\\TypeCode128B](tests/verified-files/TypeCode128B-1234567890abcABC-283-33.svg)\n\n### TypeUpcExtension2\n\n![Barcode 22 as Picqer\\Barcode\\Types\\TypeUpcExtension2](tests/verified-files/TypeUpcExtension2-22.svg)\n\n### TypeUpcExtension5\n\n![Barcode 1234567890abcABC-283*33 as Picqer\\Barcode\\Types\\TypeUpcExtension5](tests/verified-files/TypeUpcExtension5-1234567890abcABC-283-33.svg)\n\n### TypeEan8\n\n![Barcode 1234568 as Picqer\\Barcode\\Types\\TypeEan8](tests/verified-files/TypeEan8-1234568.svg)\n\n### TypeUpcA\n\n![Barcode 123456789 as Picqer\\Barcode\\Types\\TypeUpcA](tests/verified-files/TypeUpcA-123456789.svg)\n\n### TypeUpcE\n\n![Barcode 123456789 as Picqer\\Barcode\\Types\\TypeUpcE](tests/verified-files/TypeUpcE-123456789.svg)\n\n### TypeMsi\n\n![Barcode 123456789 as Picqer\\Barcode\\Types\\TypeMsi](tests/verified-files/TypeMsi-123456789.svg)\n\n### TypeMsiChecksum\n\n![Barcode 123456789 as Picqer\\Barcode\\Types\\TypeMsiChecksum](tests/verified-files/TypeMsiChecksum-123456789.svg)\n\n### TypePostnet\n\n![Barcode 123456789 as Picqer\\Barcode\\Types\\TypePostnet](tests/verified-files/TypePostnet-123456789.svg)\n\n### TypePlanet\n\n![Barcode 123456789 as Picqer\\Barcode\\Types\\TypePlanet](tests/verified-files/TypePlanet-123456789.svg)\n\n### TypeRms4cc\n\n![Barcode 123456789 as Picqer\\Barcode\\Types\\TypeRms4cc](tests/verified-files/TypeRms4cc-123456789.svg)\n\n### TypeKix\n\n![Barcode 123456789 as Picqer\\Barcode\\Types\\TypeKix](tests/verified-files/TypeKix-123456789.svg)\n\n### TypeIntelligentMailBarcode\n\n![Barcode 123456789 as Picqer\\Barcode\\Types\\TypeIntelligentMailBarcode](tests/verified-files/TypeIntelligentMailBarcode-123456789.svg)\n\n### TypeCodabar\n\n![Barcode 123456789 as Picqer\\Barcode\\Types\\TypeCodabar](tests/verified-files/TypeCodabar-123456789.svg)\n\n### TypeCode11\n\n![Barcode 123456789 as Picqer\\Barcode\\Types\\TypeCode11](tests/verified-files/TypeCode11-123456789.svg)\n\n### TypePharmacode\n\n![Barcode 123456789 as Picqer\\Barcode\\Types\\TypePharmacode](tests/verified-files/TypePharmacode-123456789.svg)\n\n### TypePharmacodeTwoCode\n\n![Barcode 123456789 as Picqer\\Barcode\\Types\\TypePharmacodeTwoCode](tests/verified-files/TypePharmacodeTwoCode-123456789.svg)\n\n### TypeTelepen\n\n![Barcode 1234567890ASCD as Picqer\\Barcode\\Types\\TypeTelepen](tests/verified-files/TypeTelepen-1234567890ASCD.svg)\n\n### TypeTelepenNumeric\n\n![Barcode 1234567890 as Picqer\\Barcode\\Types\\TypeTelepenNumeric](tests/verified-files/TypeTelepenNumeric-1234567890.svg)\n\n\n\n*This file is generated by generate-examples.php*"
        },
        {
          "name": "generate-examples.php",
          "type": "blob",
          "size": 0.9765625,
          "content": "<?php\n\nrequire('vendor/autoload.php');\nrequire(__DIR__ . '/tests/VerifiedBarcodeTest.php');\n$verifiedFiles = VerifiedBarcodeTest::$supportedBarcodes;\n\n$result = [];\n$result[] = '# Examples of supported barcodes';\n$result[] = 'These are examples of supported barcodes with this library.';\n$result[] = 'All types can be found in the src/Types directory.';\n$result[] = '';\n\nforeach ($verifiedFiles as $verifiedFile) {\n    $result[] = '### ' . substr($verifiedFile['type'], strrpos($verifiedFile['type'], '\\\\') + 1);\n    foreach ($verifiedFile['barcodes'] as $barcode) {\n        $result[] = sprintf(\n            '![Barcode %s as %s](tests/verified-files/%s.svg)',\n            $barcode,\n            $verifiedFile['type'],\n            Picqer\\Barcode\\Helpers\\StringHelpers::getSafeFilenameFrom($verifiedFile['type'] . '-' . $barcode)\n        );\n    }\n}\n\n$result[] = '';\n$result[] = '*This file is generated by generate-examples.php*';\n\nfile_put_contents('examples.md', implode(PHP_EOL . PHP_EOL, $result));\n"
        },
        {
          "name": "generate-verified-files.php",
          "type": "blob",
          "size": 2.7333984375,
          "content": "<?php\n\nrequire('vendor/autoload.php');\n\n$svgRenderer = new Picqer\\Barcode\\Renderers\\SvgRenderer();\n$htmlRenderer = new Picqer\\Barcode\\Renderers\\HtmlRenderer();\n$dynamicHtmlRenderer = new Picqer\\Barcode\\Renderers\\DynamicHtmlRenderer();\n\n$typeEncoderEan13 = new \\Picqer\\Barcode\\Types\\TypeEan13();\n$typeEncoderCode128 = new \\Picqer\\Barcode\\Types\\TypeCode128();\n$typeEncoderIMB = new \\Picqer\\Barcode\\Types\\TypeIntelligentMailBarcode();\n\n$barcode = $typeEncoderEan13->getBarcode('081231723897');\nfile_put_contents('tests/verified-files/081231723897-ean13.svg', $svgRenderer->render($barcode, $barcode->getWidth() * 2));\nfile_put_contents('tests/verified-files/081231723897-ean13-fractional-width.svg', $svgRenderer->render($barcode, $barcode->getWidth() * 0.25, 25.75));\n\n$svgRendererRed = new Picqer\\Barcode\\Renderers\\SvgRenderer();\n$svgRendererRed->setBackgroundColor([255, 0, 0]);\nfile_put_contents('tests/verified-files/081231723897-ean13-red-background.svg', $svgRendererRed->render($barcode, $barcode->getWidth() * 2));\n\n$barcode = $typeEncoderCode128->getBarcode('081231723897');\nfile_put_contents('tests/verified-files/081231723897-code128.html', $htmlRenderer->render($barcode, $barcode->getWidth() * 2));\n$htmlRendererRed = new Picqer\\Barcode\\Renderers\\HtmlRenderer();\n$htmlRendererRed->setBackgroundColor([255, 0, 0]);\nfile_put_contents('tests/verified-files/081231723897-code128-red-background.html', $htmlRendererRed->render($barcode, $barcode->getWidth() * 2));\n\n$barcode = $typeEncoderIMB->getBarcode('12345678903');\nfile_put_contents('tests/verified-files/12345678903-imb.html', $htmlRenderer->render($barcode, $barcode->getWidth() * 2));\n\n$barcode = $typeEncoderCode128->getBarcode('081231723897');\nfile_put_contents('tests/verified-files/081231723897-dynamic-code128.html', $dynamicHtmlRenderer->render($barcode));\n\n$barcode = $typeEncoderIMB->getBarcode('12345678903');\nfile_put_contents('tests/verified-files/12345678903-dynamic-imb.html', $dynamicHtmlRenderer->render($barcode));\n\n$barcode = $typeEncoderEan13->getBarcode('0049000004632');\nfile_put_contents('tests/verified-files/0049000004632-ean13.svg', $svgRenderer->render($barcode, $barcode->getWidth() * 2));\n\n\n// New style of verified files, defined in VerifiedBarcodeTest.php\nrequire(__DIR__ . '/tests/VerifiedBarcodeTest.php');\n$verifiedFiles = VerifiedBarcodeTest::$supportedBarcodes;\n\nforeach ($verifiedFiles as $verifiedFile) {\n    foreach ($verifiedFile['barcodes'] as $barcodeText) {\n        $barcode = (new $verifiedFile['type']())->getBarcode($barcodeText);\n        $result = $svgRenderer->render($barcode, $barcode->getWidth() * 2);\n\n        file_put_contents('tests/verified-files/' . Picqer\\Barcode\\Helpers\\StringHelpers::getSafeFilenameFrom($verifiedFile['type'] . '-' . $barcodeText) . '.svg', $result);\n    }\n}\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.041015625,
          "content": "parameters:\n  paths:\n    - src\n  level: 5\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.642578125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" backupGlobals=\"false\" backupStaticAttributes=\"false\" colors=\"true\" convertErrorsToExceptions=\"true\" convertNoticesToExceptions=\"true\" convertWarningsToExceptions=\"true\" processIsolation=\"false\" stopOnError=\"false\" stopOnFailure=\"false\" verbose=\"true\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\">\n  <coverage>\n    <include>\n      <directory>./src</directory>\n    </include>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"Barcode Test Suite\">\n      <directory>./tests/</directory>\n    </testsuite>\n  </testsuites>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}