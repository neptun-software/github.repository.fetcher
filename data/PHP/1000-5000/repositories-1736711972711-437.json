{
  "metadata": {
    "timestamp": 1736711972711,
    "page": 437,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rebing/graphql-laravel",
      "stars": 2139,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2080078125,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.yml]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.595703125,
          "content": "* text=auto\n.editorconfig export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\n/.github export-ignore\n/.php-cs-fixer.dist.php export-ignore\n/docker-compose-dev.yml export-ignore\n/Dockerfile.dev export-ignore\n/example export-ignore\n/Makefile export-ignore\n/phpstan-baseline.neon export-ignore\n/phpstan.neon.dist export-ignore\n/phpunit.xml.dist export-ignore\n/README-docker.md export-ignore\n/tests export-ignore\n/tmp export-ignore\n\n# Github specific: force syntax highlighting to be PHP for stubs\n# See https://github.com/github/linguist/blob/master/docs/overrides.md\n*.stub linguist-language=PHP\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.087890625,
          "content": "/vendor\n.idea/\n/phpunit.xml\n/composer.lock\n.phpunit.result.cache\n.php-cs-fixer.cache\n/tmp\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 0.3076171875,
          "content": "<?php declare(strict_types=1);\n\nuse PhpCsFixer\\Config;\n\nrequire __DIR__ . '/vendor/autoload.php';\n$finder = PhpCsFixer\\Finder::create()\n    ->in(__DIR__)\n    ->exclude('tmp');\nreturn (new Config())\n        ->setFinder($finder)\n        ->setRules(\\Mfn\\PhpCsFixer\\Config::getRules())\n        ->setRiskyAllowed(true);\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 33.0966796875,
          "content": "CHANGELOG\n=========\n\n[Next release](https://github.com/rebing/graphql-laravel/compare/9.7.0...master)\n\n2024-11-22, 9.7.0\n-----------------\n\n## Fixed\n- Fixes for implicit nullability deprecation (PHP 8.4 compat) [\\#1152 / duncanmcclean](https://github.com/rebing/graphql-laravel/pull/1152)\n\n2024-08-23, 9.6.0\n-----------------\n\n## Fixed\n- Bring back laravel-mongodb support [\\#1144 / jsrodas-pdpaola](https://github.com/rebing/graphql-laravel/pull/1144)\n\n2024-03-06, 9.5.0\n-----------------\n\n### Changed\n- Relax PaginationType/SimplePaginationType getPaginationFields typehint [\\#1132 / jasonvarga](https://github.com/rebing/graphql-laravel/pull/1132)\n\n2024-03-04, 9.4.0\n-----------------\n\n## Added\n- Possibility to add resolver middleware at runtime using `GraphQL::appendGlobalResolverMiddleware(YourMiddleware::class)` or `GraphQL::appendGlobalResolverMiddleware(new YourMiddleware(...))`\n\n2024-02-18, 9.3.0\n-----------------\n\n## Removed\n- Support for Laravel 9 & PHP 8.0 have been removed [\\#1123 / mfn](https://github.com/rebing/graphql-laravel/pull/1123)\n\n2024-02-18, 9.2.0\n-----------------\n\n## Added\n- Support Laravel for 11 [\\#1117 / mfn](https://github.com/rebing/graphql-laravel/pull/1117)\n\n2023-08-06, 9.1.0\n-----------------\n## Fixed\n- fix schema validation - resolve not allowed in input fields [\\#1078 / crissi](https://github.com/rebing/graphql-laravel/pull/1078)\n\n2023-06-25, 9.0.0\n-----------------\n## Breaking changes\n### Added\n- Upgrade to graphql-php 15 [\\#953 / mfn](https://github.com/rebing/graphql-laravel/pull/953)\\\n  This includes possible breaking changes also outside of this package, see also https://github.com/webonyx/graphql-php/releases/tag/v15.0.0 \\\n  Known breaking changes:\n  - non-standard error related data keys are not included directly in\n    `errors.*.<non-standard error key>` any more, but have been moved to\n    `errors.*.extensions.<non-standard error key>`.\\\n    Also new keys may appear here from upstream.\n  - The `errors.*.extensions.category` has been removed upstream, but we try to\n    keep it alive with the interface\n    `\\Rebing\\GraphQL\\Error\\ProvidesErrorCategory` as it can be a useful\n    discriminator on the client side in certain cases. But only the cases from\n    _this_ library are preserved, e.g. categories like `request`, `graphql` or\n    `internal` are gone.\n  - The `\\Rebing\\GraphQL\\Support\\OperationParams` has added required types due to\n    its base class changes:\n    - Old: `public function getOriginalInput($key)`\\\n      new: `public function getOriginalInput(string $key)`\n    - Old: `public function isReadOnly()`\\\n      new: `public function isReadOnly(): bool`\n  \n  Some BC may happen also if you extended code originating in graphql-php,\n  some examples:\n  - if you implement custom types, you now have to use property types for e.g.\n    `$name` or `$description`\n  - If you used any `\\GraphQL\\Validator\\DocumentValidator` in your code\n    directly, you now need use FQCN to reference them and not the shortened\n    string names.\n  - `->getWrappedType(true)` was replaced with `->getInnermostType()`\n  - the class `\\GraphQL\\Type\\Definition\\FieldArgument` has been renamed to\n    `\\GraphQL\\Type\\Definition\\Argument`\n\n### Removed\n- Remove support for eager loading (=non-lazy loading) of types\\\n  Lazy loading has been introduced in 2.0.0 (2019-08) and has been made the\n  default since 8.0.0 (2021-11).\\\n  The practical impact is that types are always going to be resolved using a\n  type loader and therefore cannot use aliases anymore. Types and their type\n  name have to match.\n- Remove integrated GraphiQL support in favour of https://github.com/mll-lab/laravel-graphiql [\\#986 / mfn](https://github.com/rebing/graphql-laravel/pull/986)\n- Laravel 6 is no longer supported [\\#967 / mfn](https://github.com/rebing/graphql-laravel/pull/967)\n- Laravel 8 is no longer supported [\\#1049 / mfn](https://github.com/rebing/graphql-laravel/pull/1049)\n\n## Changed\n- The type resolver is now able to resolve the top level types 'Query',\n  'Mutation' and 'Subscription'\\\n  If you have an existing query/mutation/type named like this, you need to\n  rename it.\n- Return types were added to all methods of the commands [\\#1005 / sforward](https://github.com/rebing/graphql-laravel/pull/1005)\n- Upgrade to laragraph/utils v2 [\\#1032 / mfn](https://github.com/rebing/graphql-laravel/pull/1032)\n- The `Pagination` and `SimplePagination` helper types now enforce `nonNull` on their data types\n- The test suite now also runs with `--prefer-lowest` [\\#1055 / mfn](https://github.com/rebing/graphql-laravel/pull/1055)\\\n  This uncovered a few issues with `laragraph/utils` and `webonyx/graphql-php`\n  and thus their minimum version had to be slightly bumped to `2.0.1` and\n  `15.0.3` respectively.\n\n### Removed\n- Remove unused publish command [\\#1004 / sforward](https://github.com/rebing/graphql-laravel/pull/1004)\n  A leftover from the Lumen removal yers ago (#772)\n\n2023-02-18, 8.6.0\n-----------------\n### Added\n- Add Laravel 10 support [\\#983 / jasonvarga](https://github.com/rebing/graphql-laravel/pull/983)\n\n2023-01-13, 8.5.0\n-----------------\n### Added\n- Add support for thecodingmachine/safe 2.4 [\\#961 / tranvantri](https://github.com/rebing/graphql-laravel/pull/961)\n\n2023-01-06, 8.4.0\n-----------------\n### Added\n- Register directives via schema config [\\#947 / sforward](https://github.com/rebing/graphql-laravel/pull/947)\n\n2022-06-11, 8.3.0\n-----------------\n### Added\n- Add support to use array in `controller` param in config [\\#906 / viktorruskai](https://github.com/rebing/graphql-laravel/pull/906)\n- Add support for laravel validation attributes [\\#901 / jacobdekeizer](https://github.com/rebing/graphql-laravel/pull/901)\n\n### Fixed\n- Allow 'always' to work on object types [\\#473 / tinyoverflow \\#369 / zjbarg](https://github.com/rebing/graphql-laravel/pull/892)\n- Allow using addSelect() in relationship query scopes [\\#875 / codercms](https://github.com/rebing/graphql-laravel/pull/806)\n\n### Removed\n- Support for PHP 7.2, PHP 7.3 and Laravel 7.0 (all EOL) [\\#914 / mfn](https://github.com/rebing/graphql-laravel/pull/914)\n\n2022-01-30, 8.2.1\n-----------------\n### Fixed\n- Fix schema parsing issue when route prefix is empty string [\\#890 / hello-liang-shan](https://github.com/rebing/graphql-laravel/pull/890)\\\n  Note: this is a follow-up fix to #888\n\n2022-01-27, 8.2.0\n-----------------\n### Fixed\n- Fix \"No configuration for schema '' found\" when route prefix is empty string [\\#888 / hello-liang-shan](https://github.com/rebing/graphql-laravel/pull/888)\n\n2022-01-15, 8.1.0\n-----------------\n### Added\n- Support for Laravel 9 [\\#879 / mfn](https://github.com/rebing/graphql-laravel/pull/879)\n\n2021-11-15, 8.0.0\n-----------------\n\n## Breaking changes\n- Rewrite and simplify how schemas are handled\n  - `\\Rebing\\GraphQL\\GraphQL::$schemas` now only holds `Schema`s and not a\n    mixture of strings or arrays\n  - `\\Rebing\\GraphQL\\GraphQL::schema()` now only accepts a \"schema name\", but no\n    ad hoc `Schema` or \"schema configs\". To use ad hoc schemas, use\n    `\\Rebing\\GraphQL\\GraphQL::buildSchemaFromConfig()` and\n    `\\Rebing\\GraphQL\\GraphQL::addSchema()`\n  - `\\Rebing\\GraphQL\\GraphQL::queryAndReturnResult()` (and thus also\n    `\\Rebing\\GraphQL\\GraphQL::query()`) does not accept ad hoc schemas via\n    `$opts['schema']` anymore; it now only can reference a schema via its name.\n  - `\\Rebing\\GraphQL\\GraphQL::addSchema()` now only accept `Schema` objects,\n    where before it would support ad hoc schemas via array configuration.\n    Use `\\Rebing\\GraphQL\\GraphQL::buildSchemaFromConfig()` for that now.\n  - `\\Rebing\\GraphQL\\GraphQL::getSchemaConfiguration()` has been removed due to\n    the simplifications.\n  - `\\Rebing\\GraphQL\\GraphQL::getNormalizedSchemaConfiguration()` does not\n    support ad hoc schemas anymore and only accepts the schema name.\n  - `\\Rebing\\GraphQL\\GraphQLServiceProvider::bootSchemas()` has been removed due\n    to the simplifications.\n    \n- The following methods now take a `\\Illuminate\\Contracts\\Config\\Repository` as\n  second argument:\n  - `\\Rebing\\GraphQL\\GraphQL::__construct`\n  - `\\Rebing\\GraphQL\\GraphQLServiceProvider::applySecurityRules`\n- As part of moving the architecture to an execution based middleware approach,\n  the following methods have been removed:\n  - `\\Rebing\\GraphQL\\GraphQLController::handleAutomaticPersistQueries` has been\n    replaced by the `AutomaticPersistedQueriesMiddleware` middleware\n  - `\\Rebing\\GraphQL\\GraphQLController::queryContext` has been\n    replaced by the `AddAuthUserContextValueMiddleware` middleware\\\n    If you relied on overriding `queryContext` to inject a custom context, you\n    now need to create your own execution middleware and add to your\n    configuration\n  - `\\Rebing\\GraphQL\\GraphQLController::executeQuery` has become obsolete, no\n    direct replacement.\n\n- Routing has been rewritten and simplified [\\#757 / mfn](https://github.com/rebing/graphql-laravel/pull/757)\n  - All routing related configuration is now within the top level `route`\n    configuration key\n  - The following configuration options have been removed:\n    - `graphql.routes`\\\n      It's therefore also not possible anymore to register different routes for\n      queries and mutations within a schema. Each schema gets only one route\n      (except for the default schema, which is registered for the global prefix\n      route as well as under its name).\\\n      If necessary, this can be emulated with different schemas and multi-level\n      paths\n  - The following configuration options have been moved/renamed:\n    - `graphql.prefix` => `graphql.route.prefix`\n    - `graphql.controllers` => `graphql.route.controller`\\\n      Further, providing a controller action for `query` or `mutation` is not\n      supported anymore.\n    - `graphql.middleware` => `graphql.route.middleware`\n    - `graphql.route_group_attributes` => `graphql.route.group_attributes`\n  - The actual routes defined have changed:\n    - No more separate routes for the HTTP methods\n    - 1 route for each schema + 1 route for the group prefix (default schema)\n    - If GraphiQL is enabled: 1 route graphiql route for each schema + 1 for the\n      graphiql group prefix (default schema)\n    - If provided, the `'method'` argument **must** provide the HTTP method\n      verbs in uppercase like `POST` or `GET`, `post` or `get` will **not** work.\n  - It's now possible to prevent the registering of any routes by making the top\n    level `route` an empty array or null\n  - `\\Rebing\\GraphQL\\GraphQL::routeNameTransformer` has been removed\n  - It's now possible to register schemas with a `-` in their name\n  - Routes are now properly cacheable\n\n- Remove the `\\Rebing\\GraphQL\\GraphQLController::$app`  property [\\#755 / mfn](https://github.com/rebing/graphql-laravel/pull/755)\\\n  Injecting the application container early is incompatible when running within\n  an application server like laravel/octane, as it's not guaranteed that the\n  container received contains all the bindings. If you relied on this property\n  when extending the classes, invoke the container directly via\n  `Container::getInstance()`.\n  \n- Remove deprecated `\\Rebing\\GraphQL\\Support\\Type::$inputObject` and `\\Rebing\\GraphQL\\Support\\Type::$enumObject` properties [\\#752 / mfn](https://github.com/rebing/graphql-laravel/pull/752)\\\n  Instead in your code, extend `\\Rebing\\GraphQL\\Support\\InputType` and `\\Rebing\\GraphQL\\Support\\EnumType` directly \n  \n- Support for Lumen has been removed\n  \n- Integrate laragraph/utils RequestParser [\\#739 / mfn](https://github.com/rebing/graphql-laravel/pull/739)\\\n  The parsing of GraphQL requests is now more strict:\n  - if you send a `GET` request, the GraphQL query has to be in the query parameters\n  - if you send a `POST` request, the GraphQL query needs to be in the body\\\n    Mixing of either isn't possible anymore\n  - batched queries will only work with `POST` requests\n    This is due to `RequestParser` using `\\GraphQL\\Server\\Helper::parseRequestParams` which includes this check\n  Further:  \n  - Drop support for configuration the name of the variable for the variables (`params_key`)\n  - `GraphQLUploadMiddleware` has been removed (`RequestParser` includes this functionality)\n  - Empty GraphQL queries now return a proper validated GraphQL error\n      \n- In `\\Rebing\\GraphQL\\GraphQL`, renamed remaining instances of `$params` to `$variables`    \n  After switching to `RequestParser`, the support for changing the variable name\n  what was supposed to `params_key` has gone and thus the name isn't fitting anymore.\n  Also, the default value for `$variables` has been changed to `null` to better\n  fit the how `OperationParams` works:\n  - old: `public function query(string $query, ?array $params = [], array $opts = []): array`\n    new: `public function query(string $query, ?array $variables = null, array $opts = []): array`\n  - old: `public function queryAndReturnResult(string $query, ?array $params = [], array $opts = []): ExecutionResult`\n    new: `public function queryAndReturnResult(string $query, ?array $variables = null, array $opts = []): ExecutionResult`\n\n  - `\\Rebing\\GraphQL\\Support\\ResolveInfoFieldsAndArguments` has been removed\n  - `$getSelectFields` closure no longer takes a depth parameter\n\n- The `$args` argument, of the `handle` method of the execution middlewares requires `array` as type.  \n\n### Added\n- Command to make an execution middleware [\\#772 / mfn](https://github.com/rebing/graphql-laravel/pull/772)\n- Command to make a schema configuration [\\#830 / matsn0w](https://github.com/rebing/graphql-laravel/pull/830)\n- The primary execution of the GraphQL request is now piped through middlewares [\\#762 / crissi and mfn](https://github.com/rebing/graphql-laravel/pull/762)\\\n  This allows greater flexibility for enabling/disabling certain functionality\n  as well as bringing in new features without having to open up the library.\n- Primarily register \\Rebing\\GraphQL\\GraphQL as service and keep `'graphql'` as alias [\\#768 / mfn](https://github.com/rebing/graphql-laravel/pull/768)\n- Automatic Persisted Queries (APQ) now cache the parsed query [\\#740 / mfn](https://github.com/rebing/graphql-laravel/pull/740)\\\n  This avoids having to re-parse the same queries over and over again.\n- Add ability to detect unused GraphQL variables [\\#660 / mfn](https://github.com/rebing/graphql-laravel/pull/660)\n- Laravel's `ValidationException` is now formatted the same way as a `ValidationError` [\\#748 / mfn](https://github.com/rebing/graphql-laravel/pull/748)\n- A few missing typehints (mostly array related) [\\#849 / mfn](https://github.com/rebing/graphql-laravel/pull/849)\n\n### Changed\n- Internally webonyx query plan feature is now used for retrieving information about a query [\\#793 / crissi](https://github.com/rebing/graphql-laravel/pull/793))\n- Rewrite and simplify how schemas are handled [\\#779 / mfn](https://github.com/rebing/graphql-laravel/pull/779)\n- Internally stop using the global `config()` function and preferable use the repository or the Facade otherwise [\\#774 / mfn](https://github.com/rebing/graphql-laravel/pull/774)\n- Don't silence broken schemas when normalizing them for generating routes [\\#766 / mfn](https://github.com/rebing/graphql-laravel/pull/766)\n- Lazy loading types has been enabled by default [\\#758 / mfn](https://github.com/rebing/graphql-laravel/pull/758)\n- Make it easier to extend select fields [\\#799 / crissi](https://github.com/rebing/graphql-laravel/pull/799)\n- The `$args` argument, of the `handle` method of the execution middlewares requires `array` as type [\\#843 / sforward](https://github.com/rebing/graphql-laravel/pull/843)\n- Embrace thecodingmachine/safe and use thecodingmachine/phpstan-safe-rule to enforce it [\\#851 / mfn](https://github.com/rebing/graphql-laravel/pull/851)\n- Don't require a return value for the query option of fields [\\#856 / sforward](https://github.com/rebing/graphql-laravel/pull/856)\n\n### Fixed\n- Fix `TypeNotFound` when an interface defined after another type where it is used [\\#828 / kasian-sergeev](https://github.com/rebing/graphql-laravel/pull/828)\n\n### Removed\n- The method `\\Rebing\\GraphQL\\GraphQLServiceProvider::provides` was removed [\\#769 / mfn](https://github.com/rebing/graphql-laravel/pull/769)\\\n  It's only relevant for deferred providers which ours however isn't (and can't\n  be made into with the current Laravel architecture).\n\n2021-04-10, 7.2.0\n-----------------\n### Added\n- Allow disabling batched requests [\\#738 / mfn](https://github.com/rebing/graphql-laravel/pull/738)\n\n2021-04-08, 7.1.0\n-----------------\n### Added\n- Basic Automatic Persisted Queries (APQ) support [\\#701 / illambo](https://github.com/rebing/graphql-laravel/pull/701)\n\n2021-04-03, 7.0.1\n-----------------\n### Added\n- Support Laravels simple pagination [\\#715 / lamtranb](https://github.com/rebing/graphql-laravel/pull/715)\n\n2021-04-03, 7.0.0\n-----------------\n## Breaking changes\n- Signature of `\\Rebing\\GraphQL\\Support\\Privacy::validate` changed, now it accepts both query/mutation arguments and the query/mutation context.\n  Update your existing privacy policies this way:\n  ```diff\n  -public function validate(array $queryArgs): bool\n  +public function validate(array $queryArgs, $queryContext = null): bool\n  ```\n\n### Added\n- Ability to pass query/mutation context to the field privacy handler (both closure and class) [\\#727 / torunar](https://github.com/rebing/graphql-laravel/pull/727)\n\n2021-04-03, 6.5.0\n-----------------\n### Fixed\n- Middleware and methods can be used in class based schemas. [\\#724 / jasonvarga](https://github.com/rebing/graphql-laravel/pull/724)\\\n  This is a follow-up fix for [Support for class based schemas](https://github.com/rebing/graphql-laravel/pull/706)\n\n2021-03-31, 6.4.0\n-----------------\n### Added\n- Support for per-schema types [\\#658 / stevelacey](https://github.com/rebing/graphql-laravel/pull/658)\n\n2021-03-12, 6.3.0\n-----------------\n### Added\n- Support for class based schemas [\\#706 / jasonvarga](https://github.com/rebing/graphql-laravel/pull/706)\n\n2021-03-12, 6.2.0\n-----------------\n### Fixed\n- Lumen routing with regular expression constraints [\\#719 / sglitowitzsoci](https://github.com/rebing/graphql-laravel/pull/719)\n\n2020-11-30, 6.1.0\n-----------------\nSame as 6.1.0-rc1!\n\n### Added\n- Support for resolver middleware [\\#594 / stevelacey](https://github.com/rebing/graphql-laravel/pull/594)\n\n2020-11-27, 6.1.0-rc1\n---------------------\n### Added\n- Support for resolver middleware [\\#594 / stevelacey](https://github.com/rebing/graphql-laravel/pull/594)\n\n2020-11-26, 6.0.0\n-----------------\n### Fixed\n- Implemented generation of a SyntaxError instead of a hard Exception for empty single/batch queries [\\#685 / plivius](https://github.com/rebing/graphql-laravel/pull/685)\n\n2020-11-13, 6.0.0-rc1\n---------------------\n## Breaking changes\n- Upgrade to webonyx/graphql-php 14.0.0 [\\#645 / mfn](https://github.com/rebing/graphql-laravel/pull/645)\n  Be sure to read up on breaking changes in graphql-php => https://github.com/webonyx/graphql-php/releases/tag/v14.0.0\n- Remove support for Laravel < 6.0 [\\#651 / mfn](https://github.com/rebing/graphql-laravel/pull/651)\n  This also bumps the minimum required version to PHP 7.2\n\n### Added\n- Support for Laravel 8 [\\#672 / mfn](https://github.com/rebing/graphql-laravel/pull/672)\n\n2020-11-26, 5.1.5\n-----------------\n### Fixed\n- Implemented generation of a SyntaxError instead of a hard Exception for empty single/batch queries [\\#685 / plivius](https://github.com/rebing/graphql-laravel/pull/685)\n\n2020-11-16, 5.1.5-rc1\n---------------------\n### Added\n- Support for PHP 8 [\\#686 / mfn](https://github.com/rebing/graphql-laravel/pull/686)\n\n2020-09-03, 5.1.4\n-----------------\nHotfix release to replace 5.1.3\n\nApologies for the rushed 5.1.3 release causing trouble, it was in fact cut from the wrong branch and it was current state for the upcoming 6.x series 😬\n\n5.1.4 intends to correct this.\n\n### Added\n- Support Laravel 8 [\\#671 / mfn](https://github.com/rebing/graphql-laravel/pull/671)\n\n2020-09-02, 5.1.3\n-----------------\n### Added\n- Support Laravel 8 [\\#671 / mfn](https://github.com/rebing/graphql-laravel/pull/671)\n\n2020-07-02, 5.1.2\n-----------------\n### Added\n- Re-added support for validation in field arguments (with breaking change fix) [\\#630 / crissi](https://github.com/rebing/graphql-laravel/pull/630)\n\n2020-04-23, 5.1.1\n-----------------\n### Fixed\n- Reverted \"Add support for validation in field arguments\" due to [breaking changes reported](https://github.com/rebing/graphql-laravel/issues/627)\n\n2020-04-22, 5.1.0\n-----------------\n### Added\n- Add support for validation in field arguments [\\#608 / crissi](https://github.com/rebing/graphql-laravel/pull/608)\n- Add support for modifiers to `GraphQL::type` [\\#621 / stevelacey](https://github.com/rebing/graphql-laravel/pull/621)\n\n2020-04-03, 5.0.0\n-----------------\n### Added\n- Support Laravel 7 [\\#597 / exodusanto](https://github.com/rebing/graphql-laravel/pull/597)\n- Add support for custom authorization message [\\#578 / Sh1d0w](https://github.com/rebing/graphql-laravel/pull/578)\n- Add support for macros on the GraphQL service/facade [\\#592 / stevelacey](https://github.com/rebing/graphql-laravel/pull/592)\n### Fixed\n- Fix the infinite loop as well as sending the correct matching input data to the rule-callback [\\#579 / crissi](https://github.com/rebing/graphql-laravel/pull/579)\n- Fix selecting not the correct columns for interface fields [\\#607 / illambo](https://github.com/rebing/graphql-laravel/pull/607)\n### Changed\n- Refactor route files with the goal of making adding subscription support easier [\\#575 / crissi](https://github.com/rebing/graphql-laravel/pull/575)\n### Removed\n- Official support for Laravel 5.8 has been removed [\\#596 / mfn](https://github.com/rebing/graphql-laravel/pull/596)\n\n2019-12-09, 4.0.0\n-----------------\n### Added\n- Allow passing through an instance of a `Field` [\\#521 / georgeboot](https://github.com/rebing/graphql-laravel/pull/521/files)\n- Add the ability to alias query and mutations arguments as well as input objects [\\#517 / crissi](https://github.com/rebing/graphql-laravel/pull/517/files)\n- Classes can now be injected in the Resolve method from the query/mutation similarly to Laravel controller methods [\\#520 / crissi](https://github.com/rebing/graphql-laravel/pull/520/files)\n### Fixed\n- Fix validation rules for non-null list of non-null objects [\\#511 / crissi](https://github.com/rebing/graphql-laravel/pull/511/files)\n- Add morph type to returned models [\\#503 / crissi](https://github.com/rebing/graphql-laravel/pull/503)\n- Querying same field multiple times causes an error (e.g. via fragments) [\\#537 / edgarsn](https://github.com/rebing/graphql-laravel/pull/537)\n- Fixed the custom query not being handled by interface's relations [\\#486 / EdwinDayot](https://github.com/rebing/graphql-laravel/pull/486)\n### Changed\n- Switch Code Style handling from StyleCI to PHP-CS Fixer [\\#502 / crissi](https://github.com/rebing/graphql-laravel/pull/502)\n- Implemented [ClientAware](https://webonyx.github.io/graphql-php/error-handling/#default-error-formatting) interface on integrated exceptions [\\#530 / georgeboot](https://github.com/rebing/graphql-laravel/pull/530)\n- More control over validation through optional user-generated validator by introducing `getValidator()` [\\#531 / mailspice](https://github.com/rebing/graphql-laravel/pull/531)\n\n2019-10-23, 3.1.0\n-----------------\n### Added\n- Allow passing through the `rootValue` as an option [\\#492 / tuurbo](https://github.com/rebing/graphql-laravel/pull/492)\n\n2019-10-20, 3.0.0\n-----------------\n### Added\n- Add `wrapType()`, allowing to add more information for queries/mutations [\\#496 / albertcito](https://github.com/rebing/graphql-laravel/pull/496)\n### Changed\n- The signature of `authorize` changed, receiving not the exact same argumenst the resolver would [\\#489 / mfn](https://github.com/rebing/graphql-laravel/pull/489)\n  - before: `public function authorize(array $args)`\n  - after: `public function authorize($root, array $args, $ctx, ResolveInfo $resolveInfo = null, Closure $getSelectFields = null): bool`\n- Forward PHP engine errors to the application error handler [\\#487 / mfn](https://github.com/rebing/graphql-laravel/pull/487)\n\n2019-08-27, 2.1.0\n-----------------\n### Added\n- The custom `'query'` now receives the GraphQL context as the 3rd arg (same as any resolver) [\\#464 / mfn](https://github.com/rebing/graphql-laravel/pull/464)\n- Allow to load deeper nested queries by allowing to change the depth when calling `$getSelectFields(int $depth)` [\\#472 / mfn](https://github.com/rebing/graphql-laravel/pull/472)\n\n2019-08-18, 2.0.1\n-----------------\n### Added\n- Allow `'alias'` to be a callback [\\#452 / crissi](https://github.com/rebing/graphql-laravel/pull/452)\n\n### Changed\n- Internal\n  - Properly separate larastans' phpstan config from ours [\\#451 / szepeviktor](https://github.com/rebing/graphql-laravel/pull/451)\n\n### Fixed\n- Support adding Schema objects directly [\\#449 / mfn](https://github.com/rebing/graphql-laravel/pull/449)\n- Input arguments are properly parsed when objects or lists are passed [\\#419 / sowork](https://github.com/rebing/graphql-laravel/pull/419)\n\n2019-08-05, 2.0.0\n-----------------\n## Breaking changes\n- The `UploadType` now has to be added manually to the `types` in your schema if you want to use it\n  - The `::getInstance()` method is gone\n- The order and arguments/types for resolvers has changed:\n  - before: `resolve($root, $array, SelectFields $selectFields, ResolveInfo $info)`\n  - after: `resolve($root, $array, $context, ResolveInfo $info, Closure $getSelectFields)`\n- Added PHP types / phpdoc to all methods / properties [\\#331](https://github.com/rebing/graphql-laravel/pull/331)\n  - Changes in method signatures will require small adaptions.\n- Validation errors are moved from `error.validation` to `error.extensions.validation` as per GraphQL spec recommendation [\\#294](https://github.com/rebing/graphql-laravel/pull/294)\n- SelectFields on interface types now only selects specific fields instead of all [\\#294](https://github.com/rebing/graphql-laravel/pull/294)\n  - Although this could be considered a bug fix, it changes what columns are selected and if your code as a side effect dependent on all columns being selected, it will break\n\n### Added\n- Added support for lazy loading types (config `lazyload_types`), improve performance on large type systems [\\#405](https://github.com/rebing/graphql-laravel/pull/405) but doesn't work together with type aliases or `paginate()`.\n- A migration guide for the Folklore library as part of the readme\n- New `make:graphql:input` command\n- New `make:graphql:union` command\n- New `make:graphql:interface` command\n- New `make:graphql:field` command\n- New `make:graphql:enum` command and dedicated `EnumType`, deprecating `$enumObject=true` in the `Type` class\n- New `make:graphql:scalar` command and add more information regarding scalars to the readme\n- `TypeConvertible` interface requiring to implement `toType(): \\GraphQL\\Type\\Definition\\Type`\n  Existing types are not affected because they already made use of the same method/signature, but custom Scalar GraphQL types work differently and benefit from the interface\n- `alias` is now also supported for relationships [\\#367](https://github.com/rebing/graphql-laravel/pull/367)\n- `InputType` support class which eventually replace `$inputObject=true` [\\#363](https://github.com/rebing/graphql-laravel/pull/363)\n- Support `DB::raw()` in `alias` fields\n- GraphiQL: use regenerated CSRF from server if present [\\#332](https://github.com/rebing/graphql-laravel/pull/332)\n- Internal\n  - Added declare(strict_types=1) directive to all files\n  - Test suite has been refactored and now features Database (SQLite) tests too\n\n### Changed\n- Types and Schemas are now only booted when the `graphql` service is requested, improving performance when having this library installed but not using it in certain workloads (pure artisan commands, non-GraphQL web requests, etc.) [\\#427](https://github.com/rebing/graphql-laravel/pull/427)\n- Follow Laravel convention and use plural for namespaces (e.g. new queries are placed in `App\\GraphQL\\Queries`, not `App\\GraphQL\\Query` anymore); make commands have been adjusted\n- Made the following classes _abstract_: `Support\\Field`, `Support\\InterfaceType`, `Support\\Mutation`, `Support\\Query`, `Support\\Type`, `Support\\UnionType` [\\#357](https://github.com/rebing/graphql-laravel/pull/357)\n- Updated GraphiQL to 0.13.0 [\\#335](https://github.com/rebing/graphql-laravel/pull/335)\n  - If you're using CSP, be sure to allow `cdn.jsdelivr.net` and `cdnjs.cloudflare.com`\n- `ValidatorError`: remove setter and make it a constructor arg, add getter and rely on contracts\n- Replace global helper `is_lumen` with static class call `\\Rebing\\GraphQL\\Helpers::isLumen`\n\n### Fixed\n- The Paginator correctly inherits the types model so it can be used with `SelectFields` and still generates correct SQL queries [\\#415](https://github.com/rebing/graphql-laravel/pull/415)\n- Arguments are now validated before they're passed to `authorize()` [\\#413](https://github.com/rebing/graphql-laravel/pull/413)\n- File uploads now correctly work with batched requests [\\#397](https://github.com/rebing/graphql-laravel/pull/397)\n- Path multi-level support for Schemas works again [\\#358](https://github.com/rebing/graphql-laravel/pull/358)\n- SelectFields correctly passes field arguments to the custom query [\\#327](https://github.com/rebing/graphql-laravel/pull/327)\n  - This also applies to privacy checks on fields, the callback now receives the field arguments too\n  - Previously the initial query arguments would be used everywhere\n\n### Removed\n- Removed `\\Fluent` dependency on `\\Rebing\\GraphQL\\Support\\Field` [\\#431](https://github.com/rebing/graphql-laravel/pull/431)\n- Removed `\\Fluent` dependency on `\\Rebing\\GraphQL\\Support\\Type` [\\#389](https://github.com/rebing/graphql-laravel/pull/389)\n- Unused static field `\\Rebing\\GraphQL\\Support\\Type::$instances`\n- Unused field `\\Rebing\\GraphQL\\Support\\Type::$unionType`\n\n2019-06-10, v1.24.0\n-------------------\n### Changed\n- Prefix named GraphiQL routes with `graphql.` for compatibility with Folklore [\\#360](https://github.com/rebing/graphql-laravel/pull/360)\n\n2019-06-10, v1.23.0\n-------------------\n### Added\n- New config options `headers` to send custom HTTP headers and `json_encoding_options` for encoding the JSON response [\\#293](https://github.com/rebing/graphql-laravel/pull/293)\n### Fixed\n- SelectFields now works with wrapped types (nonNull, listOf) [\\#315](https://github.com/rebing/graphql-laravel/pull/315)\n\n2019-05-31, v1.22.0\n-------------------\n### Added\n- Auto-resolve aliased fields [\\#283](https://github.com/rebing/graphql-laravel/pull/283)\n- This project has a changelog `\\o/`\n\n2019-03-07, v1.21.2\n-------------------\n\n- Allow configuring a custom default field resolver [\\#266](https://github.com/rebing/graphql-laravel/pull/266)\n- Routes have now given names, so they can be referenced [\\#264](https://github.com/rebing/graphql-laravel/pull/264)\n- Expose more fields on the default pagination type [\\#262](https://github.com/rebing/graphql-laravel/pull/262)\n- Mongodb support [\\#257](https://github.com/rebing/graphql-laravel/pull/257)\n- Add support for MorphOne relationships [\\#238](https://github.com/rebing/graphql-laravel/pull/238)\n- Checks for lumen when determining schema [\\#247](https://github.com/rebing/graphql-laravel/pull/247)\n- Internal changes:\n  - Replace deprecated global `array_*` and `str_*` helpers with direct `Arr::*` and `Str::*` calls\n  - Code style now enforced via [StyleCI](https://styleci.io/)\n\n2019-03-07, v1.20.2\n-------------------\n\n- Fixed infinite recursion for InputTypeObject self reference [\\#230](https://github.com/rebing/graphql-laravel/pull/230)\n\n2019-03-03, v1.20.1\n-------------------\n\n- Laravel 5.8 support\n\n2019-02-04, v1.19.1\n-------------------\n\n- Don't report certain GraphQL Errors\n\n2019-02-03, v1.18.1\n-------------------\n\n- Mutation routes fix\n\n2019-01-29, v1.18.0\n-------------------\n\n- Fix to allow recursive input objects [\\#158](https://github.com/rebing/graphql-laravel/issues/158)\n\n2019-01-24, v1.17.6\n-------------------\n\n- Fixed default error handler\n\n2018-12-17, v1.17.3\n-------------------\n\n- Bump webonxy/graphql-php version requirement\n- Add support for custom error handler config `handle_errors`\n\n2018-12-17, v1.16.0\n-------------------\n\n- Fixed validation\n\n2018-07-20, v1.14.2\n-------------------\n\n- Validation error messages\n  Can now add custom validation error messages to Queries and Mutations\n\n2018-05-16, v1.13.0\n-------------------\n\n- Added support for query complexity and depth ([more details](https://github.com/webonyx/graphql-php#security))\n- Also added support for InputObjectType rules validation.\n\n2018-04-20, v1.12.0\n-------------------\n\n- [Added support for Unions](https://github.com/rebing/graphql-laravel/blob/master/docs/advanced.md#unions) and [Interfaces](https://github.com/rebing/graphql-laravel/blob/master/docs/advanced.md#interfaces)\n\n2018-04-10, v1.11.0\n-------------------\n\n- Rules supported for all Fields\n  Added `rules` support for Query fields\n\n2018-02-28, v1.9.5\n------------------\n\n- Allow subscription types to be added\n  Supports creating the schema, but the underlying PHP functionality does not do anything.\n\n2018-01-05, v1.8.2\n------------------\n\n- Updating route and controller to give us the ability to create multilevel URI names [\\#69](https://github.com/rebing/graphql-laravel/pull/69)\n\n2017-10-31, v1.7.3\n------------------\n\n- Composer fix\n\n2017-10-04, v1.7.1\n------------------\n\n- SelectFields fix\n\n2017-09-23, v1.6.1\n------------------\n\n- GET routes\n\n2017-08-27, v1.5.0\n------------------\n\n- Enum types\n\n2017-08-20, v1.4.9\n------------------\n\n- Privacy validation optimized\n\n2017-03-27, v1.4\n------------------\n\n- Initial release\n"
        },
        {
          "name": "Dockerfile.dev",
          "type": "blob",
          "size": 0.3193359375,
          "content": "FROM php:8.3.9-cli-alpine\n\nCOPY --from=mlocati/php-extension-installer:2.2.19 /usr/bin/install-php-extensions /usr/local/bin/\n\nRUN install-php-extensions \\\n      xdebug && \\\n      rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini\n\nCOPY --from=composer:2.7.7 /usr/bin/composer /usr/local/bin/\n\nRUN mkdir /app\n\nWORKDIR /app\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0498046875,
          "content": "MIT License\n\nCopyright (c) 2018 Mikk Mihkel Nurges\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.2890625,
          "content": "docker-phpstan:\n\tdocker compose -f docker-compose-dev.yml run --rm php sh -c \"php -v ; composer phpstan\"\ndocker-phpstan-baseline:\n\tdocker compose -f docker-compose-dev.yml run --rm php sh -c \"php -v ; composer phpstan-baseline\"\ndocker-rebuild:\n\tdocker compose -f docker-compose-dev.yml build php\n"
        },
        {
          "name": "README-docker.md",
          "type": "blob",
          "size": 0.05859375,
          "content": "This docker configuration is meant to be run in development\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 84.6064453125,
          "content": "# Laravel GraphQL\n\n[![Latest Stable Version](https://poser.pugx.org/rebing/graphql-laravel/v/stable)](https://packagist.org/packages/rebing/graphql-laravel)\n[![License](https://poser.pugx.org/rebing/graphql-laravel/license)](https://packagist.org/packages/rebing/graphql-laravel)\n[![Tests](https://github.com/rebing/graphql-laravel/workflows/Tests/badge.svg)](https://github.com/rebing/graphql-laravel/actions?query=workflow%3ATests)\n[![Downloads](https://img.shields.io/packagist/dt/rebing/graphql-laravel.svg?style=flat-square)](https://packagist.org/packages/rebing/graphql-laravel)\n[![Get on Slack](https://img.shields.io/badge/slack-join-orange.svg)](https://join.slack.com/t/rebing-graphql/shared_invite/enQtNTE5NjQzNDI5MzQ4LTdhNjk0ZGY1N2U1YjE4MGVlYmM2YTc2YjQ0MmIwODY5MWMwZWIwYmY1MWY4NTZjY2Q5MzdmM2Q3NTEyNDYzZjc)\n\nUse Facebook's GraphQL with PHP 8.1+ on Laravel 10.0+. It is based on the [PHP port of GraphQL reference implementation](https://github.com/webonyx/graphql-php). You can find more information about GraphQL in the [GraphQL Introduction](https://reactjs.org/blog/2015/05/01/graphql-introduction.html) on the [React](https://reactjs.org/) blog or you can read the [GraphQL specifications](https://spec.graphql.org/).\n\n* Allows creating **queries** and **mutations** as request endpoints\n* Supports multiple schemas\n  * per schema queries/mutations/types \n  * per schema HTTP middlewares\n  * per schema GraphQL execution middlewares\n* Custom GraphQL **resolver middleware** can be defined for each query/mutation\n  \nWhen using the `SelectFields` class for Eloquent support, additional features are available:\n* Queries return **types**, which can have custom **privacy** settings.\n* The queried fields will have the option to be retrieved **dynamically** from the database.\n\nIt offers following features and improvements over the original package by\n[Folklore](https://github.com/folkloreinc/laravel-graphql):\n* Per-operation authorization\n* Per-field callback defining its visibility (e.g. hiding from unauthenticated users)\n* `SelectFields` abstraction available in `resolve()`, allowing for advanced eager loading\n  and thus dealing with n+1 problems\n* Pagination support\n* Server-side support for [query batching](https://www.apollographql.com/blog/batching-client-graphql-queries-a685f5bcd41b/)\n* Support for file uploads\n\n## Installation\n\n### Dependencies:\n\n* [Laravel 9.0+](https://github.com/laravel/laravel)\n* [GraphQL PHP](https://github.com/webonyx/graphql-php)\n\n\n### Installation:\n\nRequire the package via Composer:\n```bash\ncomposer require rebing/graphql-laravel\n```\n\n#### Laravel\n\nPublish the configuration file:\n```bash\nphp artisan vendor:publish --provider=\"Rebing\\GraphQL\\GraphQLServiceProvider\"\n```\n\nReview the configuration file:\n```\nconfig/graphql.php\n```\n\n## Usage\n\n- [Laravel GraphQL](#laravel-graphql)\n  - [Installation](#installation)\n    - [Dependencies:](#dependencies)\n    - [Installation:](#installation-1)\n      - [Laravel](#laravel)\n  - [Usage](#usage)\n    - [Concepts](#concepts)\n      - [A word on declaring a field `nonNull`](#a-word-on-declaring-a-field-nonnull)\n    - [Data loading](#data-loading)\n    - [Middleware Overview](#middleware-overview)\n      - [HTTP middleware](#http-middleware)\n      - [GraphQL execution middleware](#graphql-execution-middleware)\n      - [GraphQL resolver middleware](#graphql-resolver-middleware)\n    - [Schemas](#schemas)\n      - [Schema classes](#schema-classes)\n    - [Creating a query](#creating-a-query)\n    - [Creating a mutation](#creating-a-mutation)\n      - [File uploads](#file-uploads)\n        - [Vue.js and Axios example](#vuejs-and-axios-example)\n        - [jQuery or vanilla javascript](#jquery-or-vanilla-javascript)\n    - [Validation](#validation)\n      - [Example defining rules in each argument](#example-defining-rules-in-each-argument)\n      - [Example using the `rules()` method](#example-using-the-rules-method)\n      - [Example using Laravel's validator directly](#example-using-laravels-validator-directly)\n      - [Handling validation errors](#handling-validation-errors)\n      - [Customizing error messages](#customizing-error-messages)\n      - [Customizing attributes](#customizing-attributes)\n      - [Misc notes](#misc-notes)\n    - [Resolve method](#resolve-method)\n    - [Resolver middleware](#resolver-middleware)\n      - [Defining middleware](#defining-middleware)\n      - [Registering middleware](#registering-middleware)\n      - [Terminable middleware](#terminable-middleware)\n    - [Authorization](#authorization)\n    - [Privacy](#privacy)\n    - [Query variables](#query-variables)\n    - [Custom field](#custom-field)\n      - [Even better reusable fields](#even-better-reusable-fields)\n    - [Eager loading relationships](#eager-loading-relationships)\n    - [Type relationship query](#type-relationship-query)\n    - [Pagination](#pagination)\n    - [Batching](#batching)\n    - [Scalar types](#scalar-types)\n    - [Enums](#enums)\n    - [Unions](#unions)\n    - [Interfaces](#interfaces)\n      - [Supporting custom queries on interface relations](#supporting-custom-queries-on-interface-relations)\n      - [Sharing interface fields](#sharing-interface-fields)\n    - [Input Object](#input-object)\n    - [Type modifiers](#type-modifiers)\n    - [Field and input alias](#field-and-input-alias)\n    - [JSON columns](#json-columns)\n    - [Field deprecation](#field-deprecation)\n    - [Default field resolver](#default-field-resolver)\n    - [Macros](#macros)\n    - [Automatic Persisted Queries support](#automatic-persisted-queries-support)\n      - [Notes](#notes)\n      - [Client example](#client-example)\n  - [Misc features](#misc-features)\n    - [Detecting unused variables](#detecting-unused-variables)\n  - [Configuration options](#configuration-options)\n  - [Guides](#guides)\n    - [Upgrading from v1 to v2](#upgrading-from-v1-to-v2)\n    - [Migrating from Folklore](#migrating-from-folklore)\n  - [Performance considerations](#performance-considerations)\n    - [Wrap Types](#wrap-types)\n  - [Known Limitations](#known-limitations)\n    - [SelectFields related](#selectfields-related)\n  - [GraphQL testing clients](#graphql-testing-clients)\n\n### Concepts\n\nBefore diving head first into code, it's good to familiarize yourself with the\nconcepts surrounding GraphQL. If you've already experience with GraphQL, feel\nfree to skip this part.\n\n- \"schema\"  \n  A GraphQL schema defines all the queries, mutations and types\n  associated with it.\n- \"queries\" and \"mutations\"  \n  The \"methods\" you call in your GraphQL request (think about your REST endpoint)\n- \"types\"  \n  Besides the primitive scalars like int and string, custom \"shapes\" can be\n  defined and returned via custom types. They can map to your database models or\n  basically any data you want to return.\n- \"resolver\"  \n  Any time data is returned, it is \"resolved\". Usually in query/mutations this\n  specified the primary way to retrieve your data (e.g. using `SelectFields` or\n  [dataloaders](https://github.com/overblog/dataloader-php))\n\nTypically, all queries/mutations/types are defined using the `$attributes`\nproperty and the `args()` / `fields()` methods as well as the `resolve()` method.\n\nargs/fields again return a configuration array for each field they supported.\nThose fields usually support these shapes\n- the \"key\" is the name of the field\n- `type` (required): a GraphQL specifier for the type supported here\n  \nOptional keys are:\n- `description`: made available when introspecting the GraphQL schema\n- `resolve`: override the default field resolver\n- `deprecationReason`: document why something is deprecated\n\n#### A word on declaring a field `nonNull`\n\nIt's quite common, and actually good practice, to see the gracious use of\n`Type::nonNull()` on any kind of input and/or output fields.\n\n**The more specific the intent of your type system, the better for the consumer.**\n\nSome examples\n\n- if you require a certain field for a query/mutation argument, declare it non\n  null\n- if you know that your (e.g. model) field can never return null (e.g. users ID,\n  email, etc.), declare it no null\n- if you return a list of something, like e.g. tags, which is a) always an array\n  (even empty) and b) shall not contain `null` values, declare the type like this:\\\n  `Type::nonNull(Type::listOf(Type::nonNull(Type::string())))`\n\nThere exists a lot of tooling in the GraphQL ecosystem, which benefits the more\nspecific your type system is.\n\n### Data loading\n\nThe act of loading/retrieving your data is called \"resolving\" in GraphQL. GraphQL\nitself does **not** define the \"how\" and leaves it up to the implementor.\n\nIn the context of Laravel it's natural to assume the primary source of data will\nbe Eloquent. This library therefore provides a convenient helper called\n`SelectFields` which tries its best to\n[eager load relations](#eager-loading-relationships) and to\n[avoid n+1 problems](https://www.google.com/search?hl=en&q=n%2B1%20problem).\n\nBe aware that this is not the only way and it's also common to use _concepts_\ncalled \"dataloaders\". They usually take advantage of \"deferred\" executions of\nresolved fields, as explained in [graphql-php solving n+1 problem](https://github.com/webonyx/graphql-php/blob/master/docs/data-fetching.md#solving-n1-problem).\n\nThe gist is that you can use any kind of data source you like (Eloquent,\nstatic data, ElasticSearch results, caching, etc.) in your resolvers but you've\nto be mindful of the execution model to avoid repetitive fetches and perform\nsmart pre-fetching of your data.\n\n### Middleware Overview\n\nThe following middleware concepts are supported:\n\n- HTTP middleware (i.e. from Laravel)\n- GraphQL execution middleware\n- GraphQL resolver middleware\n\nBriefly said, a middleware _usually_ is a class:\n- with a `handle` method\n- receiving a fixed set of parameters plus a callable for the next middleware\n- is responsible for calling the \"next\" middleware\\\n  Usually a middleware does just that but may decide to not do that and\n  just return\n- has the freedom to mutate the parameters passed on\n\n#### HTTP middleware\n\nAny [Laravel compatible HTTP middleware](https://laravel.com/docs/middleware)\ncan be provided on a global level for all GraphQL endpoints via the config\n`graphql.route.middleware` or on a per-schema basis via\n`graphql.schemas.<yourschema>.middleware`. The per-schema middleware overrides\nthe global one.\n\n#### GraphQL execution middleware\n\nThe processing of a GraphQL request, henceforth called \"execution\", flows\nthrough a set of middlewares.\n\nThey can be set on global level via `graphql.execution_middleware` or per-schema\nvia `graphql.schemas.<yourschema>.execution_middleware`.\n\nBy default, the recommended set of middlewares is provided on the global level.\n\nNote: the execution of the GraphQL request _itself_ is also implemented via a\nmiddleware, which is usually expected to be called last (and does not call\nfurther middlewares). In case you're interested in the details, please see\n`\\Rebing\\GraphQL\\GraphQL::appendGraphqlExecutionMiddleware`\n\n#### GraphQL resolver middleware\n\nAfter the HTTP middleware and the execution middleware is applied, the\n\"resolver middleware\" is executed for the query/mutation being targeted\n**before** the actual `resolve()` method is called.\n\nSee [Resolver middleware](#resolver-middleware) for more details.\n\n### Schemas\n\nSchemas are required for defining GraphQL endpoints. You can define multiple\nschemas and assign different **HTTP middleware** and **execution middleware** to\nthem, in addition to the global middleware. For example:\n\n```php\n'schema' => 'default',\n\n'schemas' => [\n    'default' => [\n        'query' => [\n            ExampleQuery::class,\n        ],\n        'mutation' => [\n            ExampleMutation::class,\n        ],\n        'types' => [\n        \n        ],\n    ],\n    'user' => [\n        'query' => [\n            App\\GraphQL\\Queries\\ProfileQuery::class\n        ],\n        'mutation' => [\n\n        ],\n        'types' => [\n        \n        ],\n        'middleware' => ['auth'],\n        // Which HTTP methods to support; must be given in UPPERCASE!\n        'method' => ['GET', 'POST'], \n        'execution_middleware' => [\n            \\Rebing\\GraphQL\\Support\\ExecutionMiddleware\\UnusedVariablesMiddleware::class,\n        ],\n    ],\n],\n```\n\nTogether with the configuration, in a way the schema defines also the route by\nwhich it is accessible. Per the default configuration of `prefix = graphql`, the\n_default_ schema is accessible via `/graphql`.\n\n\n\n\n#### Schema classes\n\nYou may alternatively define the configuration of a schema in a class that implements `ConfigConvertible`.\n\nIn your config, you can reference the name of the class, rather than an array.\n\n```php\n'schemas' => [\n    'default' => DefaultSchema::class\n]\n```\n\n```php\nnamespace App\\GraphQL\\Schemas;\n\nuse Rebing\\GraphQL\\Support\\Contracts\\ConfigConvertible;\n\nclass DefaultSchema implements ConfigConvertible\n{\n    public function toConfig(): array\n    {\n        return [\n            'query' => [\n                ExampleQuery::class,\n            ],\n            'mutation' => [\n                ExampleMutation::class,\n            ],\n            'types' => [\n            \n            ],\n        ];\n    }\n}\n```\n\nYou can use the `php artisan make:graphql:schemaConfig` command to create a new schema configuration class automatically.\n\n### Creating a query\n\nFirst you usually create a type you want to return from the query. The Eloquent `'model'` is only required if specifying relations.\n\n> **Note:** The `selectable` key is required, if it's a non-database field or not a relation\n\n```php\nnamespace App\\GraphQL\\Types;\n\nuse App\\User;\nuse GraphQL\\Type\\Definition\\Type;\nuse Rebing\\GraphQL\\Support\\Type as GraphQLType;\n\nclass UserType extends GraphQLType\n{\n    protected $attributes = [\n        'name'          => 'User',\n        'description'   => 'A user',\n        // Note: only necessary if you use `SelectFields`\n        'model'         => User::class,\n    ];\n\n    public function fields(): array\n    {\n        return [\n            'id' => [\n                'type' => Type::nonNull(Type::string()),\n                'description' => 'The id of the user',\n                // Use 'alias', if the database column is different from the type name.\n                // This is supported for discrete values as well as relations.\n                // - you can also use `DB::raw()` to solve more complex issues\n                // - or a callback returning the value (string or `DB::raw()` result)\n                'alias' => 'user_id',\n            ],\n            'email' => [\n                'type' => Type::string(),\n                'description' => 'The email of user',\n                'resolve' => function($root, array $args) {\n                    // If you want to resolve the field yourself,\n                    // it can be done here\n                    return strtolower($root->email);\n                }\n            ],\n            // Uses the 'getIsMeAttribute' function on our custom User model\n            'isMe' => [\n                'type' => Type::boolean(),\n                'description' => 'True, if the queried user is the current user',\n                'selectable' => false, // Does not try to query this from the database\n            ]\n        ];\n    }\n\n    // You can also resolve a field by declaring a method in the class\n    // with the following format resolve[FIELD_NAME]Field()\n    protected function resolveEmailField($root, array $args)\n    {\n        return strtolower($root->email);\n    }\n}\n```\n\nThe best practice is to start with your schema in `config/graphql.php` and add types directly to your schema (e.g. `default`):\n\n```php\n'schemas' => [\n    'default' => [\n        // ...\n        \n        'types' => [\n            App\\GraphQL\\Types\\UserType::class,\n        ],\n```\n\nAlternatively you can:\n\n- add the type on the \"global\" level, e.g. directly in the root config:\n  ```php\n  'types' => [\n      App\\GraphQL\\Types\\UserType::class,\n  ],\n  ```\n  Adding them on the global level allows to share them between different schemas\n  but be aware this might make it harder to understand which types/fields are used\n  where.\n\n- or add the type with the `GraphQL` Facade, in a service provider for example.\n  ```php\n  GraphQL::addType(\\App\\GraphQL\\Types\\UserType::class);\n  ```\n\nThen you need to define a query that returns this type (or a list). You can also specify arguments that you can use in the resolve method.\n```php\nnamespace App\\GraphQL\\Queries;\n\nuse Closure;\nuse App\\User;\nuse Rebing\\GraphQL\\Support\\Facades\\GraphQL;\nuse GraphQL\\Type\\Definition\\ResolveInfo;\nuse GraphQL\\Type\\Definition\\Type;\nuse Rebing\\GraphQL\\Support\\Query;\n\nclass UsersQuery extends Query\n{\n    protected $attributes = [\n        'name' => 'users',\n    ];\n\n    public function type(): Type\n    {\n        return Type::nonNull(Type::listOf(Type::nonNull(GraphQL::type('User'))));\n    }\n\n    public function args(): array\n    {\n        return [\n            'id' => [\n                'name' => 'id', \n                'type' => Type::string(),\n            ],\n            'email' => [\n                'name' => 'email', \n                'type' => Type::string(),\n            ]\n        ];\n    }\n\n    public function resolve($root, array $args, $context, ResolveInfo $resolveInfo, Closure $getSelectFields)\n    {\n        if (isset($args['id'])) {\n            return User::where('id' , $args['id'])->get();\n        }\n\n        if (isset($args['email'])) {\n            return User::where('email', $args['email'])->get();\n        }\n\n        return User::all();\n    }\n}\n```\n\nAdd the query to the `config/graphql.php` configuration file\n\n```php\n'schemas' => [\n    'default' => [\n        'query' => [\n            App\\GraphQL\\Queries\\UsersQuery::class\n        ],\n        // ...\n    ]\n]\n```\n\nAnd that's it. You should be able to query GraphQL with a request to the url `/graphql` (or anything you choose in your config). Try a GET request with the following `query` input\n\n```graphql\nquery FetchUsers {\n    users {\n        id\n        email\n    }\n}\n```\n\nFor example, if you use homestead:\n```\nhttp://homestead.app/graphql?query=query+FetchUsers{users{id,email}}\n```\n\n### Creating a mutation\n\nA mutation is like any other query. It accepts arguments and returns an object of a certain type. Mutations are meant to be used for operations **modifying** (mutating) the state on the server (which queries are not supposed to perform).\n\nThis is conventional abstraction, technically you can do anything you want in a query resolve, including mutating state.\n\nFor example, a mutation to update the password of a user. First you need to define the Mutation:\n\n```php\nnamespace App\\GraphQL\\Mutations;\n\nuse Closure;\nuse App\\User;\nuse GraphQL;\nuse GraphQL\\Type\\Definition\\Type;\nuse GraphQL\\Type\\Definition\\ResolveInfo;\nuse Rebing\\GraphQL\\Support\\Mutation;\n\nclass UpdateUserPasswordMutation extends Mutation\n{\n    protected $attributes = [\n        'name' => 'updateUserPassword'\n    ];\n\n    public function type(): Type\n    {\n        return Type::nonNull(GraphQL::type('User'));\n    }\n\n    public function args(): array\n    {\n        return [\n            'id' => [\n                'name' => 'id', \n                'type' => Type::nonNull(Type::string()),\n            ],\n            'password' => [\n                'name' => 'password', \n                'type' => Type::nonNull(Type::string()),\n            ]\n        ];\n    }\n\n    public function resolve($root, array $args, $context, ResolveInfo $resolveInfo, Closure $getSelectFields)\n    {\n        $user = User::find($args['id']);\n        if(!$user) {\n            return null;\n        }\n\n        $user->password = bcrypt($args['password']);\n        $user->save();\n\n        return $user;\n    }\n}\n```\n\nAs you can see in the `resolve()` method, you use the arguments to update your model and return it.\n\nYou should then add the mutation to the `config/graphql.php` configuration file:\n\n```php\n'schemas' => [\n    'default' => [\n        'mutation' => [\n            App\\GraphQL\\Mutations\\UpdateUserPasswordMutation::class,\n        ],\n        // ...\n    ]\n]\n```\n\nYou can then use the following query on your endpoint to do the mutation:\n\n```graphql\nmutation users {\n    updateUserPassword(id: \"1\", password: \"newpassword\") {\n        id\n        email\n    }\n}\n```\n\nif you use homestead:\n```\nhttp://homestead.app/graphql?query=mutation+users{updateUserPassword(id: \"1\", password: \"newpassword\"){id,email}}\n```\n\n#### File uploads\n\nThis library uses https://github.com/laragraph/utils which is compliant with the spec at https://github.com/jaydenseric/graphql-multipart-request-spec .\n\nYou have to add the `\\Rebing\\GraphQL\\Support\\UploadType` first to your `config/graphql` schema types definition (either global or in your schema):\n\n```php\n'types' => [\n    \\Rebing\\GraphQL\\Support\\UploadType::class,\n],\n```\n\nIt is important that you send the request as `multipart/form-data`:\n\n> **WARNING:** when you are uploading files, Laravel will use FormRequest - it means\n> that middlewares which are changing request, will not have any effect.\n\n```php\nnamespace App\\GraphQL\\Mutations;\n\nuse Closure;\nuse GraphQL;\nuse GraphQL\\Type\\Definition\\ResolveInfo;\nuse GraphQL\\Type\\Definition\\Type;\nuse Rebing\\GraphQL\\Support\\Mutation;\n\nclass UserProfilePhotoMutation extends Mutation\n{\n    protected $attributes = [\n        'name' => 'userProfilePhoto',\n    ];\n\n    public function type(): Type\n    {\n        return GraphQL::type('User');\n    }\n\n    public function args(): array\n    {\n        return [\n            'profilePicture' => [\n                'name' => 'profilePicture',\n                'type' => GraphQL::type('Upload'),\n                'rules' => ['required', 'image', 'max:1500'],\n            ],\n        ];\n    }\n\n    public function resolve($root, array $args, $context, ResolveInfo $resolveInfo, Closure $getSelectFields)\n    {\n        $file = $args['profilePicture'];\n\n        // Do something with file here...\n    }\n}\n```\n\nNote: You can test your file upload implementation using [Altair](https://altair.sirmuel.design/) as explained [here](https://www.xkoji.dev/blog/working-with-file-uploads-using-altair-graphql/).\n\n##### Vue.js and Axios example\n\n```vue\n<template>\n  <div class=\"input-group\">\n    <div class=\"custom-file\">\n      <input type=\"file\" class=\"custom-file-input\" id=\"uploadFile\" ref=\"uploadFile\" @change=\"handleUploadChange\">\n      <label class=\"custom-file-label\" for=\"uploadFile\">\n        Drop Files Here to upload\n      </label>\n    </div>\n    <div class=\"input-group-append\">\n      <button class=\"btn btn-outline-success\" type=\"button\" @click=\"upload\">Upload</button>\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'FileUploadExample',\n    data() {\n      return {\n        file: null,\n      };\n    },\n    methods: {\n      handleUploadChange() {\n        this.file = this.$refs.uploadFile.files[0];\n      },\n      async upload() {\n        if (!this.file) {\n          return;\n        }\n        // Creating form data object\n        let bodyFormData = new FormData();\n        bodyFormData.set('operations', JSON.stringify({\n                   // Mutation string\n            'query': `mutation uploadSingleFile($file: Upload!) {\n                        upload_single_file  (attachment: $file)\n                      }`,\n            'variables': {\"attachment\": this.file}\n        }));\n        bodyFormData.set('operationName', null);\n        bodyFormData.set('map', JSON.stringify({\"file\":[\"variables.file\"]}));\n        bodyFormData.append('file', this.file);\n\n        // Post the request to GraphQL controller\n        let res = await axios.post('/graphql', bodyFormData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n\n        if (res.data.status.code == 200) {\n          // On success file upload\n          this.file = null;\n        }\n      }\n    }\n  }\n</script>\n\n<style scoped>\n</style>\n```\n\n##### jQuery or vanilla javascript\n```html\n<input type=\"file\" id=\"fileUpload\">\n```\n```javascript\n// Get the file from input element\n// In jQuery:\nlet file = $('#fileUpload').prop('files')[0];\n// Vanilla JS:\nlet file = document.getElementById(\"fileUpload\").files[0];\n\n// Create a FormData object\nlet bodyFormData = new FormData();\nbodyFormData.set('operations', JSON.stringify({\n         // Mutation string\n  'query': `mutation uploadSingleFile($file: Upload!) {\n              upload_single_file  (attachment: $file)\n            }`,\n  'variables': {\"attachment\": this.file}\n}));\nbodyFormData.set('operationName', null);\nbodyFormData.set('map', JSON.stringify({\"file\":[\"variables.file\"]}));\nbodyFormData.append('file', this.file);\n\n// Post the request to GraphQL controller via Axios, jQuery.ajax, or vanilla XMLHttpRequest\nlet res = await axios.post('/graphql', bodyFormData, {\n  headers: {\n    \"Content-Type\": \"multipart/form-data\"\n  }\n});\n```\n\n### Validation\n\nLaravel's validation is supported on queries, mutations, input types and field\narguments.\n\n> **Note:** The support is \"sugar on top\" and is provided as a convenience.\n> It may have limitations in certain cases, in which case regular Laravel\n> validation can be used in your respective `resolve()` methods, just like\n> in regular Laravel code.\n\nAdding validation rules is supported in the following ways:\n\n- the field configuration key `'rules'` is supported\n  - in queries/mutations in fields declared in `function args()`\n  - in input types in fields declared in `function fields()`  \n  - `'args'` declared for a field\n- Overriding `\\Rebing\\GraphQL\\Support\\Field::rules` on any query/mutation/input type\n- Or directly use Laravel's `Validator` in your `resolve()` method\n\nUsing the configuration key `'rules'` is very convenient, as it is declared in\nthe same location as the GraphQL type itself. However, you may hit certain\nrestrictions with this approach (like multi-field validation using `*`), in\nwhich case you can override the `rules()` method.\n\n#### Example defining rules in each argument\n\n```php\nclass UpdateUserEmailMutation extends Mutation\n{\n    //...\n\n    public function args(): array\n    {\n        return [\n            'id' => [\n                'name' => 'id',\n                'type' => Type::string(),\n                'rules' => ['required']\n            ],\n            'email' => [\n                'name' => 'email',\n                'type' => Type::string(),\n                'rules' => ['required', 'email']\n            ]\n        ];\n    }\n\n    //...\n}\n```\n\n#### Example using the `rules()` method\n\n```php\nnamespace App\\GraphQL\\Mutations;\n\nuse Closure;\nuse App\\User;\nuse GraphQL;\nuse GraphQL\\Type\\Definition\\ResolveInfo;\nuse GraphQL\\Type\\Definition\\Type;\nuse Rebing\\GraphQL\\Support\\Mutation;\n\nclass UpdateUserEmailMutation extends Mutation\n{\n    protected $attributes = [\n        'name' => 'updateUserEmail'\n    ];\n\n    public function type(): Type\n    {\n        return GraphQL::type('User');\n    }\n\n    public function args(): array\n    {\n        return [\n            'id' => [\n                'name' => 'id', \n                'type' => Type::string(),\n            ],\n            'email' => [\n                'name' => 'email', \n                'type' => Type::string(),\n            ]\n        ];\n    }\n\n    protected function rules(array $args = []): array\n    {\n        return [\n            'id' => ['required'],\n            'email' => ['required', 'email'],\n            'password' => $args['id'] !== 1337 ? ['required'] : [],\n        ];\n    }\n\n    public function resolve($root, array $args)\n    {\n        $user = User::find($args['id']);\n        if (!$user) {\n            return null;\n        }\n\n        $user->email = $args['email'];\n        $user->save();\n\n        return $user;\n    }\n}\n```\n\n#### Example using Laravel's validator directly\n\nCalling `validate()` in the example below will throw Laravel's `ValidationException`\nwhich is handed by the default `error_formatter` by this library:\n\n```php\nprotected function resolve($root, array $args) {\n    \\Illuminate\\Support\\Facades\\Validator::make($args, [\n        'data.*.password' => 'string|nullable|same:data.*.password_confirmation',\n    ])->validate();\n}\n```\n\nThe format of the `'rules'` configuration key, or the rules returned by the\n`rules()` method, follows the same convention that Laravel supports, e.g.:\n- `'rules' => 'required|string`\\\n  or\n- `'rules' => ['required', 'string']`\\\n  or\n- `'rules' => function (…) { … }`\\\n  etc.\n\nFor the `args()` method or the `'args'` definition for a field, the field names\nare directly used for the validation. However, for input types, which can be\nnested and occur multiple times, the field names are mapped as e.g.\n`data.0.fieldname`. This is imported to understand when returning rules from\nthe `rules()` method.\n\n#### Handling validation errors\n\nExceptions are used to communicate back in the GraphQL response that validation\nerrors occurred. When using the built-in support, the exception\n`\\Rebing\\GraphQL\\Error\\ValidationError` is thrown. In your custom code or when\ndirectly using the Laravel `Validator`, Laravel's built-in\n`\\Illuminate\\Validation\\ValidationException` is supported too. In both cases,\nthe GraphQL response is transformed to the error format shown below.\n\nTo support returning validation errors in a GraphQL error response, the\n`'extensions'` are used, as there's no proper equivalent.\n\nOn the client side, you can check if `message` for a given error matches\n`'validation'`, you can expect the `extensions.validation` key which maps each\nfield to their respective errors:\n\n```json\n{\n  \"data\": {\n    \"updateUserEmail\": null\n  },\n  \"errors\": [\n    {\n      \"message\": \"validation\",\n      \"extensions\": {\n        \"validation\": {\n          \"email\": [\n            \"The email is invalid.\"\n          ]\n        }\n      },\n      \"locations\": [\n        {\n          \"line\": 1,\n          \"column\": 20\n        }\n      ]\n    }\n  ]\n}\n```\n\nYou can customize the way this is handled by providing your own `error_formatter`\nin the configuration, replacing the default one from this library.\n\n#### Customizing error messages\n\nThe validation errors returned can be customised by overriding the\n`validationErrorMessages` method. This method should return an array of custom\nvalidation messages in the same way documented by Laravel's validation. For\nexample, to check an `email` argument doesn't conflict with any existing data,\nyou could perform the following:\n\n> **Note:** the keys should be in `field_name`.`validator_type` format, so you can\n> return specific errors per validation type.\n\n```php\npublic function validationErrorMessages(array $args = []): array\n{\n    return [\n        'name.required' => 'Please enter your full name',\n        'name.string' => 'Your name must be a valid string',\n        'email.required' => 'Please enter your email address',\n        'email.email' => 'Please enter a valid email address',\n        'email.exists' => 'Sorry, this email address is already in use',\n    ];\n}\n```\n\n#### Customizing attributes\n\nThe validation attributes can be customised by overriding the\n`validationAttributes` method. This method should return an array of custom\nattributes in the same way documented by Laravel's validation.\n\n```php\npublic function validationAttributes(array $args = []): array\n{\n    return [\n        'email' => 'email address',\n    ];\n}\n```\n\n#### Misc notes\n\nCertain type declarations of GraphQL may cancel our or render certain validations\nunnecessary. A good example is using `Type::nonNull()` to ultimately declare\nthat an argument is required. In such a case a `'rules' => 'required'`\nconfiguration will likely never be triggered, because the GraphQL execution\nengine already prevents this field from being accepted in the first place.\n\nOr to be more clear: if a GraphQL type system violation occurs, then no Laravel\nvalidation will be even execution, as the code does not get so far.\n\n### Resolve method\n\nThe resolve method is used in both queries and mutations, and it's here that responses are created.\n\nThe first three parameters to the resolve method are hard-coded:\n\n1. The `$root` object this resolve method belongs to (can be `null`)\n2. The arguments passed as `array $args` (can be an empty array)\n3. The query specific GraphQL context\n   Can be customized by implementing a custom \"execution middleware\", see\n   `\\Rebing\\GraphQL\\Support\\ExecutionMiddleware\\AddAuthUserContextValueMiddleware`\n   for an example.\n\nArguments here after will be attempted to be injected, similar to how controller methods works in Laravel.\n\nYou can typehint any class that you will need an instance of.\n\nThere are two hardcoded classes which depend on the local data for the query:\n- `GraphQL\\Type\\Definition\\ResolveInfo` has information useful for field resolution process.\n- `Rebing\\GraphQL\\Support\\SelectFields` allows eager loading of related Eloquent models, see [Eager loading relationships](#eager-loading-relationships).\n\nExample:\n\n```php\nnamespace App\\GraphQL\\Queries;\n\nuse Closure;\nuse App\\User;\nuse GraphQL;\nuse GraphQL\\Type\\Definition\\Type;\nuse GraphQL\\Type\\Definition\\ResolveInfo;\nuse Rebing\\GraphQL\\Support\\SelectFields;\nuse Rebing\\GraphQL\\Support\\Query;\nuse SomeClassNamespace\\SomeClassThatDoLogging;\n\nclass UsersQuery extends Query\n{\n    protected $attributes = [\n        'name' => 'users',\n    ];\n\n    public function type(): Type\n    {\n        return Type::listOf(GraphQL::type('User'));\n    }\n\n    public function args(): array\n    {\n        return [\n            'id' => [\n                'name' => 'id', \n                'type' => Type::string(),\n            ]\n        ];\n    }\n\n    public function resolve($root, array $args, $context, ResolveInfo $info, SelectFields $fields, SomeClassThatDoLogging $logging)\n    {\n        $logging->log('fetched user');\n\n        $select = $fields->getSelect();\n        $with = $fields->getRelations();\n\n        $users = User::select($select)->with($with);\n\n        return $users->get();\n    }\n}\n```\n\n### Resolver middleware\n\nThese are **GraphQL specific resolver middlewares** and are only\nconceptually related to Laravel's \"HTTP middleware\". The main difference:\n\n- Laravel's HTTP middleware:\n  - works on the schema / route level\n  - is compatible with any regular Laravel HTTP middleware\n  - is the same for all queries/mutations in a schema\n- Resolver middleware\n  - Works similar in concept\n  - But applies on the query/mutation level, i.e. can be different for every\n    query/mutation\n  - Is technically not compatible with HTTP middleware\n  - Takes different arguments\n\n#### Defining middleware\n\nTo create a new middleware, use the `make:graphql:middleware` Artisan command\n\n```sh\nphp artisan make:graphql:middleware ResolvePage\n```\n\nThis command will place a new ResolvePage class within your app/GraphQL/Middleware directory.\nIn this middleware, we will set the Paginator current page to the argument we accept via our `PaginationType`:\n\n```php\nnamespace App\\GraphQL\\Middleware;\n\nuse Closure;\nuse GraphQL\\Type\\Definition\\ResolveInfo;\nuse Illuminate\\Pagination\\Paginator;\nuse Rebing\\GraphQL\\Support\\Middleware;\n\nclass ResolvePage extends Middleware\n{\n    public function handle($root, array $args, $context, ResolveInfo $info, Closure $next)\n    {\n        Paginator::currentPageResolver(function () use ($args) {\n            return $args['pagination']['page'] ?? 1;\n        });\n\n        return $next($root, $args, $context, $info);\n    }\n}\n```\n\n#### Registering middleware\n\nIf you would like to assign middleware to specific queries/mutations,\nlist the middleware class in the `$middleware` property of your query class.\n\n```php\nnamespace App\\GraphQL\\Queries;\n\nuse App\\GraphQL\\Middleware;\nuse Rebing\\GraphQL\\Support\\Query;\nuse Rebing\\GraphQL\\Support\\Query;\n\nclass UsersQuery extends Query\n{\n    protected $middleware = [\n        Middleware\\Logstash::class,\n        Middleware\\ResolvePage::class,\n    ];\n}\n```\n\nIf you want a middleware to run during every GraphQL query/mutation to your application,\nlist the middleware class in the `$middleware` property of your base query class.\n\n```php\nnamespace App\\GraphQL\\Queries;\n\nuse App\\GraphQL\\Middleware;\nuse Rebing\\GraphQL\\Support\\Query as BaseQuery;\n\nabstract class Query extends BaseQuery\n{\n    protected $middleware = [\n        Middleware\\Logstash::class,\n        Middleware\\ResolvePage::class,\n    ];\n}\n```\n\nAlternatively, you can override `getMiddleware` to supply your own logic:\n\n```php\n    protected function getMiddleware(): array\n    {\n        return array_merge([...], $this->middleware);\n    }\n```\n\nIf you want to register middleware globally, use the `resolver_middleware_append` key in `config/graphql.php`:\n\n```php  \nreturn [\n    ...\n    'resolver_middleware_append' => [YourMiddleware::class],\n];\n```\n\nYou can also use the `appendGlobalResolverMiddleware` method in any ServiceProvider:\n\n```php\n    ...\n    public function boot()\n    {\n        ...\n        GraphQL::appendGlobalResolverMiddleware(YourMiddleware::class);\n        // Or with new instance\n        GraphQL::appendGlobalResolverMiddleware(new YourMiddleware(...));\n    }\n```\n\n#### Terminable middleware\n\nSometimes a middleware may need to do some work after the response has been sent to the browser.\nIf you define a terminate method on your middleware and your web server is using FastCGI,\nthe terminate method will automatically be called after the response is sent to the browser:\n\n```php\nnamespace App\\GraphQL\\Middleware;\n\nuse Countable;\nuse GraphQL\\Language\\Printer;\nuse GraphQL\\Type\\Definition\\ResolveInfo;\nuse Illuminate\\Contracts\\Pagination\\LengthAwarePaginator;\nuse Illuminate\\Pagination\\AbstractPaginator;\nuse Illuminate\\Support\\Arr;\nuse Illuminate\\Support\\Facades\\Config;\nuse Illuminate\\Support\\Facades\\Log;\nuse Illuminate\\Support\\Facades\\Route;\nuse Rebing\\GraphQL\\Support\\Middleware;\n\nclass Logstash extends Middleware\n{\n    public function terminate($root, array $args, $context, ResolveInfo $info, $result): void\n    {\n        Log::channel('logstash')->info('', (\n            collect([\n                'query' => $info->fieldName,\n                'operation' => $info->operation->name->value ?? null,\n                'type' => $info->operation->operation,\n                'fields' => array_keys(Arr::dot($info->getFieldSelection($depth = PHP_INT_MAX))),\n                'schema' => Arr::first(Route::current()->parameters()) ?? Config::get('graphql.default_schema', 'default'),\n                'vars' => $this->formatVariableDefinitions($info->operation->variableDefinitions),\n            ])\n                ->when($result instanceof Countable, function ($metadata) use ($result) {\n                    return $metadata->put('count', $result->count());\n                })\n                ->when($result instanceof AbstractPaginator, function ($metadata) use ($result) {\n                    return $metadata->put('per_page', $result->perPage());\n                })\n                ->when($result instanceof LengthAwarePaginator, function ($metadata) use ($result) {\n                    return $metadata->put('total', $result->total());\n                })\n                ->merge($this->formatArguments($args))\n                ->toArray()\n        ));\n    }\n\n    private function formatArguments(array $args): array\n    {\n        return collect(Arr::sanitize($args))\n            ->mapWithKeys(function ($value, $key) {\n                return [\"\\${$key}\" => $value];\n            })\n            ->toArray();\n    }\n\n    private function formatVariableDefinitions(?iterable $variableDefinitions = []): array\n    {\n        return collect($variableDefinitions)\n            ->map(function ($def) {\n                return Printer::doPrint($def);\n            })\n            ->toArray();\n    }\n}\n```\n\nThe terminate method receives both the resolver arguments and the query result.\n\nOnce you have defined a terminable middleware, you should add it to the list of\nmiddleware in your queries and mutations.\n\n### Authorization\n\nFor authorization similar to Laravel's Request (or middleware) functionality, we can override the `authorize()` function in a Query or Mutation.\nAn example of Laravel's `'auth'` middleware:\n\n```php\nnamespace App\\GraphQL\\Queries;\n\nuse Auth;\nuse Closure;\nuse GraphQL\\Type\\Definition\\ResolveInfo;\n\nclass UsersQuery extends Query\n{\n    public function authorize($root, array $args, $ctx, ResolveInfo $resolveInfo = null, Closure $getSelectFields = null): bool\n    {\n        // true, if logged in\n        return ! Auth::guest();\n    }\n\n    // ...\n}\n```\n\nOr we can make use of arguments passed via the GraphQL query:\n\n```php\nnamespace App\\GraphQL\\Queries;\n\nuse Auth;\nuse Closure;\nuse GraphQL\\Type\\Definition\\ResolveInfo;\n\nclass UsersQuery extends Query\n{\n    public function authorize($root, array $args, $ctx, ResolveInfo $resolveInfo = null, Closure $getSelectFields = null): bool\n    {\n        if (isset($args['id'])) {\n            return Auth::id() == $args['id'];\n        }\n\n        return true;\n    }\n\n    // ...\n}\n```\n\nYou can also provide a custom error message when the authorization fails (defaults to Unauthorized):\n\n```php\nnamespace App\\GraphQL\\Queries;\n\nuse Auth;\nuse Closure;\nuse GraphQL\\Type\\Definition\\ResolveInfo;\n\nclass UsersQuery extends Query\n{\n    public function authorize($root, array $args, $ctx, ResolveInfo $resolveInfo = null, Closure $getSelectFields = null): bool\n    {\n        if (isset($args['id'])) {\n            return Auth::id() == $args['id'];\n        }\n\n        return true;\n    }\n\n    public function getAuthorizationMessage(): string\n    {\n        return 'You are not authorized to perform this action';\n    }\n\n    // ...\n}\n```\n\n### Privacy\n\n> **Note:** this only applies when making use of the `SelectFields` class to query Eloquent models!\n\nYou can set custom privacy attributes for every Type's Field. If a field is not\nallowed, `null` will be returned. For example, if you want the user's email to\nonly be accessible to themselves:\n\n```php\nclass UserType extends GraphQLType\n{\n    // ...\n\n    public function fields(): array\n    {\n        return [\n            'id' => [\n                'type'          => Type::nonNull(Type::string()),\n                'description'   => 'The id of the user'\n            ],\n            'email' => [\n                'type'          => Type::string(),\n                'description'   => 'The email of user',\n                'privacy'       => function(array $args, $ctx): bool {\n                    return $args['id'] == Auth::id();\n                }\n            ]\n        ];\n    }\n\n    // ...\n\n}\n```\n\nor you can create a class that extends the abstract GraphQL Privacy class:\n\n```php\nuse Auth;\nuse Rebing\\GraphQL\\Support\\Privacy;\n\nclass MePrivacy extends Privacy\n{\n    public function validate(array $queryArgs, $queryContext = null): bool\n    {\n        return $queryArgs['id'] == Auth::id();\n    }\n}\n```\n\n```php\nuse MePrivacy;\n\nclass UserType extends GraphQLType\n{\n\n    // ...\n\n    public function fields(): array\n    {\n        return [\n            'id' => [\n                'type'          => Type::nonNull(Type::string()),\n                'description'   => 'The id of the user'\n            ],\n            'email' => [\n                'type'          => Type::string(),\n                'description'   => 'The email of user',\n                'privacy'       => MePrivacy::class,\n            ]\n        ];\n    }\n\n    // ...\n\n}\n```\n\n### Query variables\n\nGraphQL offers you the possibility to use variables in your query so you don't need to \"hardcode\" value. This is done like that:\n\n```graphql\nquery FetchUserByID($id: String)\n{\n    user(id: $id) {\n        id\n        email\n    }\n}\n```\n\nWhen you query the GraphQL endpoint, you can pass a JSON encoded `variables` parameter.\n\n```\nhttp://homestead.app/graphql?query=query+FetchUserByID($id:Int){user(id:$id){id,email}}&variables={\"id\":123}\n```\n\n### Custom field\n\nYou can also define a field as a class if you want to reuse it in multiple types.\n\n```php\nnamespace App\\GraphQL\\Fields;\n\nuse GraphQL\\Type\\Definition\\Type;\nuse Rebing\\GraphQL\\Support\\Field;\n\nclass PictureField extends Field\n{\n    protected $attributes = [\n        'description'   => 'A picture',\n    ];\n\n    public function type(): Type\n    {\n        return Type::string();\n    }\n\n    public function args(): array\n    {\n        return [\n            'width' => [\n                'type' => Type::int(),\n                'description' => 'The width of the picture'\n            ],\n            'height' => [\n                'type' => Type::int(),\n                'description' => 'The height of the picture'\n            ]\n        ];\n    }\n\n    protected function resolve($root, array $args)\n    {\n        $width = isset($args['width']) ? $args['width']:100;\n        $height = isset($args['height']) ? $args['height']:100;\n\n        return 'http://placehold.it/'.$width.'x'.$height;\n    }\n}\n```\n\nYou can then use it in your type declaration\n\n```php\nnamespace App\\GraphQL\\Types;\n\nuse App\\GraphQL\\Fields\\PictureField;\nuse App\\User;\nuse GraphQL\\Type\\Definition\\Type;\nuse Rebing\\GraphQL\\Support\\Type as GraphQLType;\n\nclass UserType extends GraphQLType\n{\n    protected $attributes = [\n        'name'          => 'User',\n        'description'   => 'A user',\n        'model'         => User::class,\n    ];\n\n    public function fields(): array\n    {\n        return [\n            'id' => [\n                'type' => Type::nonNull(Type::string()),\n                'description' => 'The id of the user'\n            ],\n            'email' => [\n                'type' => Type::string(),\n                'description' => 'The email of user'\n            ],\n            //Instead of passing an array, you pass a class path to your custom field\n            'picture' => PictureField::class\n        ];\n    }\n}\n```\n\n#### Even better reusable fields\n\nInstead of using the class name, you can also supply an actual instance of the `Field`. This allows you to not only re-use the field, but will also open up the possibility to re-use the resolver.\n\nLet's imagine we want a field type that can output dates formatted in all sorts of ways.\n\n```php\nnamespace App\\GraphQL\\Fields;\n\nuse GraphQL\\Type\\Definition\\Type;\nuse Rebing\\GraphQL\\Support\\Field;\n\nclass FormattableDate extends Field\n{\n    protected $attributes = [\n        'description' => 'A field that can output a date in all sorts of ways.',\n    ];\n\n    public function __construct(array $settings = [])\n    {\n        $this->attributes = \\array_merge($this->attributes, $settings);\n    }\n\n    public function type(): Type\n    {\n        return Type::string();\n    }\n\n    public function args(): array\n    {\n        return [\n            'format' => [\n                'type' => Type::string(),\n                'defaultValue' => 'Y-m-d H:i',\n                'description' => 'Defaults to Y-m-d H:i',\n            ],\n            'relative' => [\n                'type' => Type::boolean(),\n                'defaultValue' => false,\n            ],\n        ];\n    }\n\n    protected function resolve($root, array $args): ?string\n    {\n        $date = $root->{$this->getProperty()};\n\n        if (!$date instanceof Carbon) {\n            return null;\n        }\n\n        if ($args['relative']) {\n            return $date->diffForHumans();\n        }\n\n        return $date->format($args['format']);\n    }\n\n    protected function getProperty(): string\n    {\n        return $this->attributes['alias'] ?? $this->attributes['name'];\n    }\n}\n```\n\nYou can use this field in your type as follows:\n\n```php\nnamespace App\\GraphQL\\Types;\n\nuse App\\GraphQL\\Fields\\FormattableDate;\nuse App\\User;\nuse GraphQL\\Type\\Definition\\Type;\nuse Rebing\\GraphQL\\Support\\Type as GraphQLType;\n\nclass UserType extends GraphQLType\n{\n    protected $attributes = [\n        'name'          => 'User',\n        'description'   => 'A user',\n        'model'         => User::class,\n    ];\n\n    public function fields(): array\n    {\n        return [\n            'id' => [\n                'type' => Type::nonNull(Type::string()),\n                'description' => 'The id of the user'\n            ],\n            'email' => [\n                'type' => Type::string(),\n                'description' => 'The email of user'\n            ],\n\n            // You can simply supply an instance of the class\n            'dateOfBirth' => new FormattableDate,\n\n            // Because the constructor of `FormattableDate` accepts our the array of parameters,\n            // we can override them very easily.\n            // Imagine we want our field to be called `createdAt`, but our database column\n            // is called `created_at`:\n            'createdAt' => new FormattableDate([\n                'alias' => 'created_at',\n            ])\n        ];\n    }\n}\n```\n\n### Eager loading relationships\n\nThe `Rebing\\GraphQL\\Support\\SelectFields` class allows to eager load related Eloquent models. \nOnly the required fields will be queried from the database.\n\nThe class can be instantiated by **typehinting** `SelectFields $selectField` in your resolve method.\n\nYou can also construct the class by typehinting a `Closure`.\nThe Closure accepts an optional parameter for the depth of the query to analyse.\n\nYour Query would look like:\n\n```php\nnamespace App\\GraphQL\\Queries;\n\nuse Closure;\nuse App\\User;\nuse GraphQL;\nuse GraphQL\\Type\\Definition\\Type;\nuse GraphQL\\Type\\Definition\\ResolveInfo;\nuse Rebing\\GraphQL\\Support\\SelectFields;\nuse Rebing\\GraphQL\\Support\\Query;\n\nclass UsersQuery extends Query\n{\n    protected $attributes = [\n        'name' => 'users',\n    ];\n\n    public function type(): Type\n    {\n        return Type::listOf(GraphQL::type('User'));\n    }\n\n    public function args(): array\n    {\n        return [\n            'id' => [\n                'name' => 'id', \n                'type' => Type::string(),\n            ],\n            'email' => [\n                'name' => 'email', \n                'type' => Type::string(),\n            ]\n        ];\n    }\n\n    public function resolve($root, array $args, $context, ResolveInfo $info, Closure $getSelectFields)\n    {\n        /** @var SelectFields $fields */\n        $fields = $getSelectFields();\n        $select = $fields->getSelect();\n        $with = $fields->getRelations();\n\n        $users = User::select($select)->with($with);\n\n        return $users->get();\n    }\n}\n```\n\nYour Type for User might look like shown below. The `profile` and `posts`\nrelations must also exist in the UserModel's relations. If some fields are\nrequired for the relation to load or validation etc, then you can define an\n`always` attribute that will add the given attributes to select.\n\nThe attribute can be a comma separated string or an array of attributes to\nalways include.\n\n```php\nnamespace App\\GraphQL\\Types;\n\nuse App\\User;\nuse GraphQL\\Type\\Definition\\Type;\nuse Rebing\\GraphQL\\Support\\Facades\\GraphQL;\nuse Rebing\\GraphQL\\Support\\Type as GraphQLType;\n\nclass UserType extends GraphQLType\n{\n    /**\n     * @var array\n     */\n    protected $attributes = [\n        'name'          => 'User',\n        'description'   => 'A user',\n        'model'         => User::class,\n    ];\n\n    /**\n    * @return array\n    */\n    public function fields(): array\n    {\n        return [\n            'uuid' => [\n                'type' => Type::nonNull(Type::string()),\n                'description' => 'The uuid of the user'\n            ],\n            'email' => [\n                'type' => Type::nonNull(Type::string()),\n                'description' => 'The email of user'\n            ],\n            'profile' => [\n                'type' => GraphQL::type('Profile'),\n                'description' => 'The user profile',\n            ],\n            'posts' => [\n                'type' => Type::listOf(GraphQL::type('Post')),\n                'description' => 'The user posts',\n                // Can also be defined as a string\n                'always' => ['title', 'body'],\n            ]\n        ];\n    }\n}\n```\n\nAt this point we have a profile and a post type as expected for any model\n\n```php\nclass ProfileType extends GraphQLType\n{\n    protected $attributes = [\n        'name'          => 'Profile',\n        'description'   => 'A user profile',\n        'model'         => UserProfileModel::class,\n    ];\n\n    public function fields(): array\n    {\n        return [\n            'name' => [\n                'type' => Type::string(),\n                'description' => 'The name of user'\n            ]\n        ];\n    }\n}\n```\n\n```php\nclass PostType extends GraphQLType\n{\n    protected $attributes = [\n        'name'          => 'Post',\n        'description'   => 'A post',\n        'model'         => PostModel::class,\n    ];\n\n    public function fields(): array\n    {\n        return [\n            'title' => [\n                'type' => Type::nonNull(Type::string()),\n                'description' => 'The title of the post'\n            ],\n            'body' => [\n                'type' => Type::string(),\n                'description' => 'The body the post'\n            ]\n        ];\n    }\n}\n```\n\n### Type relationship query\n\n> **Note:** this only applies when making use of the `SelectFields` class to query Eloquent models!\n\nYou can also specify the `query` that will be included with a relationship via Eloquent's query builder:\n\n```php\nclass UserType extends GraphQLType\n{\n\n    // ...\n\n    public function fields(): array\n    {\n        return [\n            // ...\n\n            // Relation\n            'posts' => [\n                'type'          => Type::listOf(GraphQL::type('Post')),\n                'description'   => 'A list of posts written by the user',\n                'args'          => [\n                    'date_from' => [\n                        'type' => Type::string(),\n                    ],\n                 ],\n                // $args are the local arguments passed to the relation\n                // $query is the relation builder object\n                // $ctx is the GraphQL context (can be customized by overriding `\\Rebing\\GraphQL\\GraphQLController::queryContext`\n                // The return value should be the query builder or void\n                'query'         => function (array $args, $query, $ctx): void {\n                    $query->addSelect('some_column')\n                          ->where('posts.created_at', '>', $args['date_from']);\n                }\n            ]\n        ];\n    }\n}\n```\n\n### Pagination\n\nPagination will be used, if a query or mutation returns a `PaginationType`.\n\nNote that unless you use [resolver middleware](#defining-middleware),\nyou will have to manually supply both the limit and page values:\n\n```php\nnamespace App\\GraphQL\\Queries;\n\nuse Closure;\nuse GraphQL\\Type\\Definition\\ResolveInfo;\nuse GraphQL\\Type\\Definition\\Type;\nuse Rebing\\GraphQL\\Support\\Facades\\GraphQL;\nuse Rebing\\GraphQL\\Support\\Query;\n\nclass PostsQuery extends Query\n{\n    public function type(): Type\n    {\n        return GraphQL::paginate('posts');\n    }\n\n    // ...\n\n    public function resolve($root, array $args, $context, ResolveInfo $info, Closure $getSelectFields)\n    {\n        $fields = $getSelectFields();\n\n        return Post::with($fields->getRelations())\n            ->select($fields->getSelect())\n            ->paginate($args['limit'], ['*'], 'page', $args['page']);\n    }\n}\n```\n\nQuery `posts(limit:10,page:1){data{id},total,per_page}` might return\n\n```\n{\n    \"data\": {\n        \"posts: [\n            \"data\": [\n                {\"id\": 3},\n                {\"id\": 5},\n                ...\n            ],\n            \"total\": 21,\n            \"per_page\": 10\n        ]\n    }\n}\n```\n\nNote that you need to add in the extra 'data' object when you request paginated resources as the returned data gives you\nthe paginated resources in a data object at the same level as the returned pagination metadata.\n\n[Simple Pagination](https://laravel.com/docs/pagination#simple-pagination) will be used, if a query or mutation returns a `SimplePaginationType`.\n\n```php\nnamespace App\\GraphQL\\Queries;\n\nuse Closure;\nuse GraphQL\\Type\\Definition\\ResolveInfo;\nuse GraphQL\\Type\\Definition\\Type;\nuse Rebing\\GraphQL\\Support\\Facades\\GraphQL;\nuse Rebing\\GraphQL\\Support\\Query;\n\nclass PostsQuery extends Query\n{\n    public function type(): Type\n    {\n        return GraphQL::simplePaginate('posts');\n    }\n\n    // ...\n\n    public function resolve($root, array $args, $context, ResolveInfo $info, Closure $getSelectFields)\n    {\n        $fields = $getSelectFields();\n\n        return Post::with($fields->getRelations())\n            ->select($fields->getSelect())\n            ->simplePaginate($args['limit'], ['*'], 'page', $args['page']);\n    }\n}\n```\n\n### Batching\n\nBatched requests are required to be sent via a POST request.\n\nYou can send multiple queries (or mutations) at once by grouping them together. Therefore, instead of creating two HTTP requests:\n\n```\nPOST\n{\n    query: \"query postsQuery { posts { id, comment, author_id } }\"\n}\n\nPOST\n{\n    query: \"mutation storePostMutation($comment: String!) { store_post(comment: $comment) { id } }\",\n    variables: { \"comment\": \"Hi there!\" }\n}\n```\n\nyou could batch it as one\n\n```\nPOST\n[\n    {\n        query: \"query postsQuery { posts { id, comment, author_id } }\"\n    },\n    {\n        query: \"mutation storePostMutation($comment: String!) { store_post(comment: $comment) { id } }\",\n        variables: { \"comment\": \"Hi there!\" }\n    }\n]\n```\n\nFor systems sending multiple requests at once, this can help performance by batching together queries that will be made within a certain interval of time.\n\nThere are tools that help with this and can handle the batching for you, e.g. [Apollo](https://www.apollographql.com/)\n\n> **A note on query batching:** whilst it may look like an \"only win\" situations,\n> there are possible downsides using batching:\n> \n> - All queries/mutations are executed in the same \"process execution context\".  \n>   If your code has side-effects which might not show up in the usual FastCGI\n>   environment (single request/response), it may cause issues here.\n> \n> - The \"HTTP middleware\" is only executed for the whole batch _once_  \n>   In case you would expect it being triggered for each query/mutation included.\n>   This may be especially relevant for logging or rate limiting.  \n>   OTOH with \"resolver middleware\" this will work as expected (though the solve\n>   different problems).\n> \n> - No limitations on the number of queries/mutations  \n>   Currently there's no way to limit this.\n\nSupport for batching can be disabled by setting the config `batching.enable` to `false`.\n\n### Scalar types\n\nGraphQL comes with built-in scalar types for string, int, boolean, etc. It's possible to create custom scalar types to special purpose fields.\n\nAn example could be a link: instead of using `Type::string()` you could create a scalar type `Link` and reference it with `GraphQL::type('Link')`.\n\nThe benefits would be:\n\n- a dedicated description so you can give more meaning/purpose to a field than just call it a string type\n- explicit conversion logic for the following steps:\n  - converting from the internal logic to the serialized GraphQL output (`serialize`)\n  - query/field input argument conversion (`parseLiteral`)\n  - when passed as variables to your query (`parseValue`)\n\nThis also means validation logic can be added within these methods to _ensure_ that the value delivered/received is e.g. a true link.\n\nA scalar type has to implement all the methods; you can quick start this with `artisan make:graphql:scalar <typename>`. Then just add the scalar to your existing types in the schema.\n\nFor more advanced use, please [refer to the official documentation regarding scalar types](https://webonyx.github.io/graphql-php/type-system/scalar-types).\n\n> **A note on performance:** be mindful of the code you include in your scalar\n> types methods. If you return a large number of fields making use of custom\n> scalars which includes complex logic to validate field, it might impact your\n> response times.\n\n### Enums\n\nEnumeration types are a special kind of scalar that is restricted to a particular set of allowed values.\nRead more about Enums [here](https://graphql.org/learn/schema/#enumeration-types)\n\nFirst create an Enum as an extension of the GraphQLType class:\n```php\nnamespace App\\GraphQL\\Enums;\n\nuse Rebing\\GraphQL\\Support\\EnumType;\n\nclass EpisodeEnum extends EnumType\n{\n    protected $attributes = [\n        'name' => 'episode',\n        'description' => 'The types of demographic elements',\n        'values' => [\n            'NEWHOPE' => 'NEWHOPE',\n            'EMPIRE' => 'EMPIRE',\n            'JEDI' => 'JEDI',\n        ],\n    ];\n}\n```\n\n> **Note:** within the `$attributes['values']` array the key is enum value the GraphQL client\n> will be able to choose from, while the value is what will your server receive (what will enum\n> be resolved to).\n\nThe Enum will be registered like any other type in your schema in `config/graphq.php`:\n\n```php\n'schemas' => [\n    'default' => [\n        'types' => [\n            EpisodeEnum::class,\n        ],\n```\n\nThen use it like:\n```php\nnamespace App\\GraphQL\\Types;\n\nuse Rebing\\GraphQL\\Support\\Type as GraphQLType;\n\nclass TestType extends GraphQLType\n{\n    public function fields(): array\n    {\n        return [\n            'episode_type' => [\n                'type' => GraphQL::type('EpisodeEnum')\n            ]\n        ];\n    }\n}\n```\n\n### Unions\n\nA Union is an abstract type that simply enumerates other Object Types. The value of Union Type is actually a value of one of included Object Types.\n\nIt's useful if you need to return unrelated types in the same Query. For example when implementing a search for multiple different entities.\n\nExample for defining a UnionType:\n\n```php\nnamespace App\\GraphQL\\Unions;\n\nuse App\\Post;\nuse GraphQL;\nuse Rebing\\GraphQL\\Support\\UnionType;\n\nclass SearchResultUnion extends UnionType\n{\n    protected $attributes = [\n        'name' => 'searchResult',\n    ];\n\n    public function types(): array\n    {\n        return [\n            GraphQL::type('Post'),\n            GraphQL::type('Episode'),\n        ];\n    }\n\n    public function resolveType($value)\n    {\n        if ($value instanceof Post) {\n            return GraphQL::type('Post');\n        } elseif ($value instanceof Episode) {\n            return GraphQL::type('Episode');\n        }\n    }\n}\n\n```\n\n### Interfaces\n\nYou can use interfaces to abstract a set of fields. Read more about Interfaces [here](https://graphql.org/learn/schema/#interfaces)\n\nAn implementation of an interface:\n\n```php\nnamespace App\\GraphQL\\Interfaces;\n\nuse GraphQL;\nuse GraphQL\\Type\\Definition\\Type;\nuse Rebing\\GraphQL\\Support\\InterfaceType;\n\nclass CharacterInterface extends InterfaceType\n{\n    protected $attributes = [\n        'name' => 'character',\n        'description' => 'Character interface.',\n    ];\n\n    public function fields(): array\n    {\n        return [\n            'id' => [\n                'type' => Type::nonNull(Type::int()),\n                'description' => 'The id of the character.'\n            ],\n            'name' => Type::string(),\n            'appearsIn' => [\n                'type' => Type::nonNull(Type::listOf(GraphQL::type('Episode'))),\n                'description' => 'A list of episodes in which the character has an appearance.'\n            ],\n        ];\n    }\n\n    public function resolveType($root)\n    {\n        // Use the resolveType to resolve the Type which is implemented trough this interface\n        $type = $root['type'];\n        if ($type === 'human') {\n            return GraphQL::type('Human');\n        } elseif  ($type === 'droid') {\n            return GraphQL::type('Droid');\n        }\n    }\n}\n```\n\nA Type that implements an interface:\n\n```php\nnamespace App\\GraphQL\\Types;\n\nuse GraphQL;\nuse Rebing\\GraphQL\\Support\\Type as GraphQLType;\nuse GraphQL\\Type\\Definition\\Type;\n\nclass HumanType extends GraphQLType\n{\n    protected $attributes = [\n        'name' => 'human',\n        'description' => 'A human.'\n    ];\n\n    public function fields(): array\n    {\n        return [\n            'id' => [\n                'type' => Type::nonNull(Type::int()),\n                'description' => 'The id of the human.',\n            ],\n            'name' => Type::string(),\n            'appearsIn' => [\n                'type' => Type::nonNull(Type::listOf(GraphQL::type('Episode'))),\n                'description' => 'A list of episodes in which the human has an appearance.'\n            ],\n            'totalCredits' => [\n                'type' => Type::nonNull(Type::int()),\n                'description' => 'The total amount of credits this human owns.'\n            ]\n        ];\n    }\n\n    public function interfaces(): array\n    {\n        return [\n            GraphQL::type('Character')\n        ];\n    }\n}\n```\n\n#### Supporting custom queries on interface relations\n\nIf an interface contains a relation with a custom query, it's required to implement `public function types()` returning an array of `GraphQL::type()`, i.e. all the possible types it may resolve to (quite similar as it works for unions) so that it works correctly with `SelectFields`.\n\nBased on the previous code example, the method would look like:\n```php\n    public function types(): array\n    {\n        return[\n            GraphQL::type('Human'),\n            GraphQL::type('Droid'),\n        ];\n    }\n```\n\n#### Sharing interface fields\n\nSince you often have to repeat many of the field definitions of the Interface in the concrete types, it makes sense to share the definitions of the Interface.\nYou can access and reuse specific interface fields with the method `getField(string fieldName): FieldDefinition`. To get all fields as an array use `getFields(): array`\n\nWith this you could write the `fields` method of your `HumanType` class like this:\n\n\n```php\npublic function fields(): array\n{\n    $interface = GraphQL::type('Character');\n\n    return [\n        $interface->getField('id'),\n        $interface->getField('name'),\n        $interface->getField('appearsIn'),\n\n        'totalCredits' => [\n            'type' => Type::nonNull(Type::int()),\n            'description' => 'The total amount of credits this human owns.'\n        ]\n    ];\n}\n```\n\nOr by using the `getFields` method:\n\n```php\npublic function fields(): array\n{\n    $interface = GraphQL::type('Character');\n\n    return array_merge($interface->getFields(), [\n        'totalCredits' => [\n            'type' => Type::nonNull(Type::int()),\n            'description' => 'The total amount of credits this human owns.'\n        ]\n    ]);\n}\n```\n\n### Input Object\n\nInput Object types allow you to create complex inputs. Fields have no args or resolve options and their type must be `InputType`. You can add rules option if you want to validate input data.\nRead more about Input Object [here](https://graphql.org/learn/schema/#input-types)\n\nFirst create an InputObjectType as an extension of the GraphQLType class:\n```php\nnamespace App\\GraphQL\\InputObject;\n\nuse GraphQL\\Type\\Definition\\Type;\nuse Rebing\\GraphQL\\Support\\InputType;\n\nclass ReviewInput extends InputType\n{\n    protected $attributes = [\n        'name' => 'reviewInput',\n        'description' => 'A review with a comment and a score (0 to 5)'\n    ];\n\n    public function fields(): array\n    {\n        return [\n            'comment' => [\n                'name' => 'comment',\n                'description' => 'A comment (250 max chars)',\n                'type' => Type::string(),\n                // You can define Laravel Validation here\n                'rules' => ['max:250']\n            ],\n            'score' => [\n                'name' => 'score',\n                'description' => 'A score (0 to 5)',\n                'type' => Type::int(),\n                // You must use 'integer' on rules if you want to validate if the number is inside a range\n                // Otherwise it will validate the number of 'characters' the number can have.\n                'rules' => ['integer', 'min:0', 'max:5']\n            ]\n        ];\n    }\n}\n```\n\nThe Input Object will be registered like any other type in your schema in `config/graphq.php`:\n\n```php\n'schemas' => [\n    'default' => [\n        'types' => [\n            'ReviewInput' => ReviewInput::class\n        ],\n```\n\nThen use it in a mutation, like:\n```php\n// app/GraphQL/Type/TestMutation.php\nclass TestMutation extends GraphQLType {\n\n    public function args(): array\n    {\n        return [\n            'review' => [\n                'type' => GraphQL::type('ReviewInput')\n            ]\n        ]\n    }\n\n}\n```\n\n### Type modifiers\n\nType modifiers can be applied by wrapping your chosen type in `Type::nonNull` or `Type::listOf` calls\nor alternatively you can use the shorthand syntax available via `GraphQL::type` to build up more complex\ntypes.\n\n```php\nGraphQL::type('MyInput!');\nGraphQL::type('[MyInput]');\nGraphQL::type('[MyInput]!');\nGraphQL::type('[MyInput!]!');\n\nGraphQL::type('String!');\nGraphQL::type('[String]');\nGraphQL::type('[String]!');\nGraphQL::type('[String!]!');\n```\n\n### Field and input alias\n\nIt is possible to alias query and mutation arguments as well as input object fields.\n\nIt can be especially useful for mutations saving data to the database.\n\nHere you might want the input names to be different from the column names in the database.\n\nExample, where the database columns are `first_name` and `last_name`:\n\n```php\nnamespace App\\GraphQL\\InputObject;\n\nuse GraphQL\\Type\\Definition\\Type;\nuse Rebing\\GraphQL\\Support\\InputType;\n\nclass UserInput extends InputType\n{\n    protected $attributes = [\n        'name' => 'userInput',\n        'description' => 'A user.'\n    ];\n\n    public function fields(): array\n    {\n        return [\n            'firstName' => [\n                'alias' => 'first_name',\n                'description' => 'The first name of the user',\n                'type' => Type::string(),\n                'rules' => ['max:30']\n            ],\n            'lastName' => [\n                'alias' => 'last_name',\n                'description' => 'The last name of the user',\n                'type' => Type::string(),\n                'rules' => ['max:30']\n            ]\n        ];\n    }\n}\n```\n\n```php\nnamespace App\\GraphQL\\Mutations;\n\nuse Closure;\nuse App\\User;\nuse GraphQL;\nuse GraphQL\\Type\\Definition\\Type;\nuse GraphQL\\Type\\Definition\\ResolveInfo;\nuse Rebing\\GraphQL\\Support\\Mutation;\n\nclass UpdateUserMutation extends Mutation\n{\n    protected $attributes = [\n        'name' => 'updateUser'\n    ];\n\n    public function type(): Type\n    {\n        return GraphQL::type('User');\n    }\n\n    public function args(): array\n    {\n        return [\n            'id' => [\n                'type' => Type::nonNull(Type::string())\n            ],\n            'input' => [\n                'type' => GraphQL::type('UserInput')\n            ]\n        ];\n    }\n\n    public function resolve($root, array $args, $context, ResolveInfo $resolveInfo, Closure $getSelectFields)\n    {\n        $user = User::find($args['id']);\n        $user->fill($args['input']));\n        $user->save();\n\n        return $user;\n    }\n}\n```\n\n### JSON columns\n\nWhen using JSON columns in your database, the field won't be defined as a \"relationship\",\nbut rather a simple column with nested data. To get a nested object that's not a database relationship,\nuse the `is_relation` attribute in your Type:\n\n```php\nclass UserType extends GraphQLType\n{\n    // ...\n\n    public function fields(): array\n    {\n        return [\n            // ...\n\n            // JSON column containing all posts made by this user\n            'posts' => [\n                'type'          => Type::listOf(GraphQL::type('Post')),\n                'description'   => 'A list of posts written by the user',\n                // Now this will simply request the \"posts\" column, and it won't\n                // query for all the underlying columns in the \"post\" object\n                // The value defaults to true\n                'is_relation' => false\n            ]\n        ];\n    }\n\n    // ...\n}\n```\n\n### Field deprecation\n\nSometimes you would want to deprecate a field but still have to maintain backward compatibility\nuntil clients completely stop using that field. You can deprecate a field using\n[directive](https://www.graphql-tools.com/docs/generate-schema/#descriptions--deprecations). If you add `deprecationReason`\nto field attributes it will become marked as deprecated in GraphQL documentation. You can validate schema on client\nusing [Apollo Engine](https://www.apollographql.com/blog/schema-validation-with-apollo-engine-4032456425ba/).\n\n\n```php\nnamespace App\\GraphQL\\Types;\n\nuse App\\User;\nuse GraphQL\\Type\\Definition\\Type;\nuse Rebing\\GraphQL\\Support\\Type as GraphQLType;\n\nclass UserType extends GraphQLType\n{\n    protected $attributes = [\n        'name'          => 'User',\n        'description'   => 'A user',\n        'model'         => User::class,\n    ];\n\n    public function fields(): array\n    {\n        return [\n            'id' => [\n                'type' => Type::nonNull(Type::string()),\n                'description' => 'The id of the user',\n            ],\n            'email' => [\n                'type' => Type::string(),\n                'description' => 'The email of user',\n            ],\n            'address' => [\n                'type' => Type::string(),\n                'description' => 'The address of user',\n                'deprecationReason' => 'Deprecated due to address field split'\n            ],\n            'address_line_1' => [\n                'type' => Type::string(),\n                'description' => 'The address line 1 of user',\n            ],\n            'address_line_2' => [\n                'type' => Type::string(),\n                'description' => 'The address line 2 of user',\n            ],\n        ];\n    }\n}\n```\n\n### Default field resolver\n\nIt's possible to override the default field resolver provided by the underlying\nwebonyx/graphql-php library using the config option `defaultFieldResolver`.\n\nYou can define any valid callable (static class method, closure, etc.) for it:\n\n```php\n'defaultFieldResolver' => [Your\\Klass::class, 'staticMethod'],\n```\n\nThe parameters received are your regular \"resolve\" function signature.\n\n### Macros\n\nIf you would like to define some helpers that you can re-use in a variety of your\nqueries, mutations and types, you may use the macro method on the `GraphQL` facade.\n\nFor example, from a service provider's boot method:\n\n```php\nnamespace App\\Providers;\n\nuse GraphQL\\Type\\Definition\\Type;\nuse Illuminate\\Support\\ServiceProvider;\nuse Rebing\\GraphQL\\Support\\Facades\\GraphQL;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        GraphQL::macro('listOf', function (string $name): Type {\n            return Type::listOf(GraphQL::type($name));\n        });\n    }\n}\n```\n\nThe `macro` function accepts a name as its first argument, and a `Closure` as its second.\n\n### Automatic Persisted Queries support\n\nAutomatic Persisted Queries (APQ) improve network performance by sending smaller requests, with zero build-time configuration.\n\nAPQ is disabled by default and can be enabled in the config via `apq.enabled=true` or by setting the environment variable `GRAPHQL_APQ_ENABLE=true`.\n\nA persisted query is an ID or hash that can be generated on the client sent to the server instead of the entire GraphQL query string. \nThis smaller signature reduces bandwidth utilization and speeds up client loading times.\nPersisted queries pair especially with GET requests, enabling the browser cache and integration with a CDN.\n\nBehind the scenes, APQ uses Laravel's cache for storing / retrieving the queries.\nThey are parsed by GraphQL before storing, so re-parsing them again is not necessary.\nPlease see the various options there for which cache, prefix, TTL, etc. to use.\n\n> Note: it is advised to clear the cache after a deployment to accommodate for changes in your schema!\n\nFor more information see: \n - [Apollo - Automatic persisted queries](https://www.apollographql.com/docs/apollo-server/performance/apq/) \n - [Apollo link persisted queries - protocol](https://github.com/apollographql/apollo-link-persisted-queries#protocol)\n\n> Note: the APQ protocol requires the hash sent by the client being compared\n> with the computed hash on the server. In case a mutating middleware like\n> `TrimStrings` is active and the query sent contains leading/trailing\n> whitespaces, these hashes can never match resulting in an error.\n> \n> In such case either disable the middleware or trim the query on the client\n> before hashing.\n\n#### Notes\n - The error descriptions are aligned with [apollo-server](https://github.com/apollographql/apollo-server).\n\n#### Client example\n\nBelow a simple integration example with Vue/Apollo, the `createPersistedQueryLink`\nautomatically manages the APQ flow.\n\n```js\n// [example app.js]\n\nrequire('./bootstrap');\n\nwindow.Vue = require('vue');\n\nVue.component('example-component', require('./components/ExampleComponent.vue').default);\n\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { createHttpLink } from 'apollo-link-http';\nimport { createPersistedQueryLink } from 'apollo-link-persisted-queries';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport VueApollo from 'vue-apollo';\n\nconst httpLinkWithPersistedQuery = createPersistedQueryLink().concat(createHttpLink({\n    uri: '/graphql',\n}));\n\n// Create the apollo client\nconst apolloClient = new ApolloClient({\n    link: ApolloLink.from([httpLinkWithPersistedQuery]),\n    cache: new InMemoryCache(),\n    connectToDevTools: true,\n})\n\nconst apolloProvider = new VueApollo({\n    defaultClient: apolloClient,\n});\n\nVue.use(VueApollo);\n\nconst app = new Vue({\n    el: '#app',\n    apolloProvider,\n});\n```\n```vue \n<!-- [example TestComponent.vue] -->\n\n<template>\n    <div>\n        <p>Test APQ</p>\n        <p>-> <span v-if=\"$apollo.queries.hello.loading\">Loading...</span>{{ hello }}</p>\n    </div>\n</template>\n\n<script>\n    import gql from 'graphql-tag';\n    export default {\n        apollo: {\n            hello: gql`query{hello}`,\n        },\n        mounted() {\n            console.log('Component mounted.')\n        }\n    }\n</script>\n```\n\n## Misc features\n\n### Detecting unused variables\n\nBy default, `'variables'` provided alongside the GraphQL query which are **not**\nconsumed, are silently ignored.\n\nIf you consider the hypothetical case you have an optional (nullable) argument\nin your query, and you provide a variable argument for it but you make a typo,\nthis can go unnoticed.\n\nExample:\n```graphql\nmutation test($value:ID) {\n  someMutation(type:\"falbala\", optional_id: $value)\n}\n```\nVariables provided:\n```json5\n{\n  // Ops! typo in `values`\n  \"values\": \"138\"\n}\n```\n\nIn this case, nothing happens and `optional_id` will be treated as not being provided.\n\nTo prevent such scenarios, you can add the `UnusedVariablesMiddleware` to your\n`execution_middleware`.\n\n## Configuration options\n\n- `route`\\\n  Holds all the configuration for the route group. Each schema will be available\n  via its name as a dedicated route.\n  - `prefix`\\\n    The route prefix to your GraphQL endpoint without the leading `/`.\\\n    The default makes the API available via `/graphql`\n  - `controller`\\\n    Allows overriding the default controller class, in case you want to extend or\n    replace the existing one (also supports `array` format).\n  - `middleware`\\\n    Global GraphQL middleware applying in case no schema-specific middleware was\n    provided\n  - `group_attributes`\\\n    Additional route group attributes\n- `default_schema`\\\n  The name of the default schema used, when none is provided via the route\n- `batching`\\\n  - 'enable'\\\n    Whether to support GraphQL batching or not\n- `error_formatter`\\\n  This callable will be passed the Error object for each errors GraphQL catch.\n  The method should return an array representing the error.\n- `errors_handler`\\\n  Custom Error Handling. The default handler will pass exceptions to laravel\n  Error Handling mechanism.\n- `security`\\\n  Various options to limit the query complexity and depth, see docs at\n  https://webonyx.github.io/graphql-php/security/\n  - `query_max_complexity`\n  - `query_max_depth`\n  - `disable_introspection`\n- `pagination_type`\\\n  You can define your own pagination type.\n- `simple_pagination_type`\\\n  You can define your own simple pagination type.\n- `defaultFieldResolver`\\\n  Overrides the default field resolver, see http://webonyx.github.io/graphql-php/data-fetching/#default-field-resolver\n- `headers`\\\n  Any headers that will be added to the response returned by the default controller\n- `json_encoding_options`\\\n  Any JSON encoding options when returning a response from the default controller\n- `apq`\\\n  Automatic Persisted Queries (APQ)\n  - `enable`\\\n    It's disabled by default.\n  - `cache_driver`\\\n    Which cache driver to use.\n  - `cache_prefix`\\\n    The cache prefix to use.\n  - `cache_ttl`\\\n    How long to cache the queries.\n- `detect_unused_variables`\\\n  If enabled, variables provided but not consumed by the query will throw an error\n\n## Guides\n\n### Upgrading from v1 to v2\n\nAlthough version 2 builds on the same code base and does not radically change how the library itself works, many things were improved, sometimes leading to incompatible changes.\n\n- Step 0: make a backup!\n- Re-publish the configuration file to learn about all the new settings\n- The order and arguments/types for resolvers has changed:\n  - before: `resolve($root, $array, SelectFields $selectFields, ResolveInfo $info)`\n  - after: `resolve($root, $array, $context, ResolveInfo $info, Closure $getSelectFields)`\n  - If you now want to use SelectFields, you've to first request it: `$selectFields = $getSelectFields();`. The primary reason for this is performance. SelectFields is an optional feature but consumes resources to traverse the GraphQL request AST and introspect all the types for their configuration to apply its magic. In the past it was always constructed and thus consumed resources, even when not requested. This has been changed to an explicit form.\n- Many method signature declarations changed to improve type safety, which have to be adapted:\n  - The signature of the method fields changed:\n    - from `public function fields()`\n    - to `public function fields(): array`\n  - The signature of the method toType changed:\n    - from `public function toType()`\n    - to `public function toType(): \\GraphQL\\Type\\Definition\\Type`\n  - The signature of the method getFields changed:\n    - from `public function getFields()`\n    - to `public function getFields(): array`\n  - The signature of the method interfaces changed:\n    - from `public function interfaces()`\n    - to `public function interfaces(): array`\n  - The signature of the method types changed:\n    - from `public function types()`\n    - to `public function types(): array`\n  - The signature of the method type changed:\n    - from `public function type()`\n    - to `public function type(): \\GraphQL\\Type\\Definition\\Type`\n  - The signature of the method args changed:\n    - from `public function args()`\n    - to `public function args(): array`\n  - The signature of the method queryContext changed:\n    - from `protected function queryContext($query, $variables, $schema)`\n    - to `protected function queryContext()`\n  - The signature of the controller method query changed:\n    - from `function query($query, $variables = [], $opts = [])`\n    - to `function query(string $query, ?array $variables = [], array $opts = []): array`\n  - If you're using custom Scalar types:\n    - the signature of the method parseLiteral changed (due to upgrade of the webonyx library):\n      - from `public function parseLiteral($ast)`\n      - to `public function parseLiteral($valueNode, ?array $variables = null)`\n- The `UploadType` now has to be added manually to the `types` in your schema if you want to use it. The `::getInstance()` method is gone, you simple reference it like any other type via `GraphQL::type('Upload')`.\n- Follow Laravel convention and use plural for namespaces (e.g. new queries are placed in `App\\GraphQL\\Queries`, not `App\\GraphQL\\Query` anymore); the respective `make` commands have been adjusted. This will not break any existing code, but code generates will use the new schema.\n- Be sure to read the [Changelog](CHANGELOG.md) for more details\n\n### Migrating from Folklore\nhttps://github.com/folkloreinc/laravel-graphql, formerly also known as https://github.com/Folkloreatelier/laravel-graphql\n\nBoth code bases are very similar and, depending on your level of customization, the migration may be very quick.\n\nNote: this migration is written with version 2.* of this library in mind.\n\nThe following is not a bullet-proof list but should serve as a guide. It's not an error if you don't need to perform certain steps.\n\n**Make a backup before proceeding!**\n\n- `composer remove folklore/graphql`\n- if you've a custom ServiceProvider or did include it manually, remove it. The point is that the existing GraphQL code should not be triggered to run.\n- `composer require rebing/graphql-laravel`\n- Publish `config/graphql.php` and adapt it (prefix, middleware, schemas, types, mutations, queries, security settings)\n  - Removed settings\n    - `domain`\n    - `resolvers`\n  - `schema` (default schema) renamed to `default_schema`\n  - `middleware_schema` does not exist, it's defined within a `schema.<name>.middleware` now\n- Change namespace references:\n  - from `Folklore\\`\n  - to `Rebing\\`\n- See [Upgrade guide from v1 to v2 for all the function signature changes](#upgrading-from-v1-to-v2)\n- The trait `ShouldValidate` does not exist anymore; the provided features are baked into `Field`\n- The first argument to the resolve method for queries/mutations is now `null` (previously its default was an empty array)\n\n## Performance considerations\n\n### Wrap Types\n\nYou can wrap types to add more information to the queries and mutations. Similar as the pagination is working you can do the same with your extra data that you want to inject ([see test examples](https://github.com/rebing/graphql-laravel/tree/master/tests/Unit/WithTypeTests)). For instance, in your query:\n\n```php\npublic function type(): Type\n{\n    return GraphQL::wrapType(\n        'PostType',\n        'PostMessageType',\n        \\App\\GraphQL\\Types\\WrapMessagesType::class,\n    );\n}\n\npublic function resolve($root, array $args)\n{\n    return [\n        'data' => Post::find($args['post_id']),\n        'messages' => new Collection([\n                new SimpleMessage(\"Congratulations, the post was found\"),\n                new SimpleMessage(\"This post cannot be edited\", \"warning\"),\n        ]),\n    ];\n}\n```\n\n## Known limitations\n\n### SelectFields related\n- Resolving fields via aliases will only resolve them once, even if the fields\n  have different arguments ([Issue](https://github.com/rebing/graphql-laravel/issues/604)).\n\n## GraphQL testing clients\n - [Firecamp](https://firecamp.io/graphql)\n - [GraphiQL](https://github.com/graphql/graphiql) [integration via laravel-graphiql](https://github.com/mll-lab/laravel-graphiql)\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.8486328125,
          "content": "{\n    \"name\": \"rebing/graphql-laravel\",\n    \"description\": \"Laravel wrapper for PHP GraphQL\",\n    \"keywords\": [\"framework\", \"laravel\", \"graphql\", \"react\"],\n    \"authors\": [\n        {\n            \"name\": \"Rebing OÜ\",\n            \"homepage\": \"http://www.rebing.ee\",\n            \"role\": \"Company\"\n        },\n        {\n            \"name\": \"Mikk Mihkel Nurges\",\n            \"email\": \"mikk.nurges@rebing.ee\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Folklore\",\n            \"email\": \"info@atelierfolklore.ca\",\n            \"homepage\": \"http://atelierfolklore.ca\"\n        },\n        {\n            \"name\": \"David Mongeau-Petitpas\",\n            \"email\": \"dmp@atelierfolklore.ca\",\n            \"homepage\": \"http://mongo.ca\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Markus Podar\",\n            \"email\": \"markus@fischer.name\",\n            \"role\": \"Developer\",\n            \"homepage\": \"https://github.com/mfn\"\n        }\n    ],\n    \"license\": \"MIT\",\n    \"type\": \"library\",\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"ext-json\": \"*\",\n        \"illuminate/contracts\": \"^10.0|^11.0\",\n        \"illuminate/support\": \"^10.0|^11.0\",\n        \"laragraph/utils\": \"^2.0.1\",\n        \"thecodingmachine/safe\": \"^2.4\",\n        \"webonyx/graphql-php\": \"^15.0.3\"\n    },\n    \"require-dev\": {\n        \"ext-pdo_sqlite\": \"*\",\n        \"fakerphp/faker\": \"^1.6\",\n        \"friendsofphp/php-cs-fixer\": \"^3\",\n        \"larastan/larastan\": \"^2\",\n        \"laravel/framework\": \"^10.0|^11.0\",\n        \"mfn/php-cs-fixer-config\": \"^2\",\n        \"mockery/mockery\": \"^1.5\",\n        \"orchestra/testbench-core\": \"^8.0|^9.0\",\n        \"phpstan/phpstan\": \"^1\",\n        \"phpunit/phpunit\": \"^10.5.32\",\n        \"thecodingmachine/phpstan-safe-rule\": \"^1\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Rebing\\\\GraphQL\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Rebing\\\\GraphQL\\\\Tests\\\\\": \"tests/\"\n        }\n    },\n    \"scripts\": {\n        \"phpstan\": \"phpstan analyse --memory-limit=512M --error-format=raw\",\n        \"phpstan-baseline\": \"phpstan analyse --memory-limit=512M --generate-baseline\",\n        \"lint\": \"php-cs-fixer fix --diff --dry-run\",\n        \"fix-style\": \"php-cs-fixer fix\",\n        \"tests\": \"LOG_DEPRECATIONS_CHANNEL=errorlog phpunit\"\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"9.x-dev\"\n        },\n        \"laravel\": {\n            \"providers\": [\n                \"Rebing\\\\GraphQL\\\\GraphQLServiceProvider\"\n            ],\n            \"aliases\": {\n                \"GraphQL\": \"Rebing\\\\GraphQL\\\\Support\\\\Facades\\\\GraphQL\"\n            }\n        }\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"config\": {\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    },\n    \"suggest\": {\n        \"mll-lab/laravel-graphiql\": \"Easily integrate GraphiQL into your Laravel projects. \"\n    }\n}\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose-dev.yml",
          "type": "blob",
          "size": 0.1728515625,
          "content": "version: '3'\n\nservices:\n    php:\n        build:\n            context: .\n            dockerfile: Dockerfile.dev\n        volumes:\n            - ./:/app\n        working_dir: '/app'\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan-baseline.neon",
          "type": "blob",
          "size": 98.58203125,
          "content": "parameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: \"#^Cannot access offset 'name' on array\\\\<string, mixed\\\\>\\\\|Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Field\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: src/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot access offset 1 on iterable\\\\<\\\\(int\\\\|string\\\\), string\\\\>\\\\|null\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: src/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Instanceof between Error and Error will always evaluate to true\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\GraphQL\\\\:\\\\:getGlobalResolverMiddlewares\\\\(\\\\) should return list\\\\<class\\\\-string\\\\|object\\\\> but returns array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$config of class GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType constructor expects array\\\\{name\\\\?\\\\: string\\\\|null, description\\\\?\\\\: string\\\\|null, resolveField\\\\?\\\\: \\\\(callable\\\\(mixed, array\\\\<string, mixed\\\\>, mixed, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ResolveInfo\\\\)\\\\: mixed\\\\)\\\\|null, argsMapper\\\\?\\\\: \\\\(callable\\\\(array\\\\<string, mixed\\\\>, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\FieldDefinition, GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\FieldNode, mixed\\\\)\\\\: mixed\\\\)\\\\|null, fields\\\\: \\\\(callable\\\\(\\\\)\\\\: iterable\\\\)\\\\|iterable, interfaces\\\\?\\\\: \\\\(callable\\\\(\\\\)\\\\: iterable\\\\<callable\\\\(\\\\)\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\>\\\\)\\\\|iterable\\\\<\\\\(callable\\\\(\\\\)\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\)\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\>, isTypeOf\\\\?\\\\: \\\\(callable\\\\(mixed, mixed, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ResolveInfo\\\\)\\\\: \\\\(bool\\\\|GraphQL\\\\\\\\Deferred\\\\|null\\\\)\\\\)\\\\|null, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\ObjectTypeDefinitionNode\\\\|null, \\\\.\\\\.\\\\.\\\\}, non\\\\-empty\\\\-array\\\\<string, array\\\\<non\\\\-empty\\\\-array\\\\<string, mixed\\\\>\\\\|\\\\(ArrayAccess&Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Field\\\\)\\\\>\\\\|string\\\\> given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$config of class GraphQL\\\\\\\\Type\\\\\\\\Schema constructor expects array\\\\{query\\\\?\\\\: \\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\|null\\\\)\\\\)\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\|null, mutation\\\\?\\\\: \\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\|null\\\\)\\\\)\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\|null, subscription\\\\?\\\\: \\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\|null\\\\)\\\\)\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\|null, types\\\\?\\\\: \\\\(callable\\\\(\\\\)\\\\: iterable\\\\<callable\\\\(\\\\)\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\NamedType\\\\>\\\\)\\\\|\\\\(callable\\\\(\\\\)\\\\: iterable\\\\<GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\NamedType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\>\\\\)\\\\|iterable\\\\<\\\\(callable\\\\(\\\\)\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\NamedType\\\\)\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\NamedType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\>\\\\|null, directives\\\\?\\\\: array\\\\<GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Directive\\\\>\\\\|null, typeLoader\\\\?\\\\: \\\\(callable\\\\(string\\\\)\\\\: \\\\(\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\NamedType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\|null\\\\)\\\\)\\\\|null, assumeValid\\\\?\\\\: bool\\\\|null, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\SchemaDefinitionNode\\\\|null, \\\\.\\\\.\\\\.\\\\}\\\\|GraphQL\\\\\\\\Type\\\\\\\\SchemaConfig, array\\\\{query\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type, mutation\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\|null, subscription\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\|null, directives\\\\: array, types\\\\: Closure\\\\(\\\\)\\\\: list\\\\<GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\>, typeLoader\\\\: Closure\\\\(mixed\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\|null\\\\)\\\\} given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Property GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\:\\\\:\\\\$config \\\\(array\\\\{name\\\\?\\\\: string\\\\|null, description\\\\?\\\\: string\\\\|null, resolveField\\\\?\\\\: \\\\(callable\\\\(mixed, array\\\\<string, mixed\\\\>, mixed, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ResolveInfo\\\\)\\\\: mixed\\\\)\\\\|null, argsMapper\\\\?\\\\: \\\\(callable\\\\(array\\\\<string, mixed\\\\>, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\FieldDefinition, GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\FieldNode, mixed\\\\)\\\\: mixed\\\\)\\\\|null, fields\\\\: \\\\(callable\\\\(\\\\)\\\\: iterable\\\\)\\\\|iterable, interfaces\\\\?\\\\: \\\\(callable\\\\(\\\\)\\\\: iterable\\\\<callable\\\\(\\\\)\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\>\\\\)\\\\|iterable\\\\<\\\\(callable\\\\(\\\\)\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\)\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\>, isTypeOf\\\\?\\\\: \\\\(callable\\\\(mixed, mixed, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ResolveInfo\\\\)\\\\: \\\\(bool\\\\|GraphQL\\\\\\\\Deferred\\\\|null\\\\)\\\\)\\\\|null, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\ObjectTypeDefinitionNode\\\\|null, \\\\.\\\\.\\\\.\\\\}\\\\) does not accept array\\\\{name\\\\?\\\\: string\\\\|null, description\\\\?\\\\: string\\\\|null, resolveField\\\\?\\\\: \\\\(callable\\\\(mixed, array\\\\<string, mixed\\\\>, mixed, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ResolveInfo\\\\)\\\\: mixed\\\\)\\\\|string\\\\|null, argsMapper\\\\?\\\\: \\\\(callable\\\\(array\\\\<string, mixed\\\\>, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\FieldDefinition, GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\FieldNode, mixed\\\\)\\\\: mixed\\\\)\\\\|string\\\\|null, fields\\\\: \\\\(callable\\\\(\\\\)\\\\: iterable\\\\)\\\\|iterable\\\\|string, interfaces\\\\?\\\\: \\\\(callable\\\\(\\\\)\\\\: iterable\\\\<callable\\\\(\\\\)\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\>\\\\)\\\\|iterable\\\\<\\\\(callable\\\\(\\\\)\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\)\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\>\\\\|string, isTypeOf\\\\?\\\\: \\\\(callable\\\\(mixed, mixed, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ResolveInfo\\\\)\\\\: \\\\(bool\\\\|GraphQL\\\\\\\\Deferred\\\\|null\\\\)\\\\)\\\\|string\\\\|null, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\ObjectTypeDefinitionNode\\\\|string\\\\|null, \\\\.\\\\.\\\\.\\\\}\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Result of \\\\|\\\\| is always true\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\AliasArguments\\\\\\\\AliasArguments\\\\:\\\\:get\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/AliasArguments/AliasArguments.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\AliasArguments\\\\\\\\AliasArguments\\\\:\\\\:getAliasesInFields\\\\(\\\\) has parameter \\\\$fields with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/AliasArguments/AliasArguments.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\AliasArguments\\\\\\\\AliasArguments\\\\:\\\\:getAliasesInFields\\\\(\\\\) has parameter \\\\$prefix with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/AliasArguments/AliasArguments.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\AliasArguments\\\\\\\\AliasArguments\\\\:\\\\:getAliasesInFields\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/AliasArguments/AliasArguments.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\AliasArguments\\\\\\\\ArrayKeyChange\\\\:\\\\:changeKey\\\\(\\\\) has parameter \\\\$segments with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/AliasArguments/ArrayKeyChange.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\AliasArguments\\\\\\\\ArrayKeyChange\\\\:\\\\:changeKey\\\\(\\\\) has parameter \\\\$target with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/AliasArguments/ArrayKeyChange.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\AliasArguments\\\\\\\\ArrayKeyChange\\\\:\\\\:changeKey\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/AliasArguments/ArrayKeyChange.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\AliasArguments\\\\\\\\ArrayKeyChange\\\\:\\\\:modify\\\\(\\\\) has parameter \\\\$array with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/AliasArguments/ArrayKeyChange.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\AliasArguments\\\\\\\\ArrayKeyChange\\\\:\\\\:modify\\\\(\\\\) has parameter \\\\$pathKeyMappings with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/AliasArguments/ArrayKeyChange.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\AliasArguments\\\\\\\\ArrayKeyChange\\\\:\\\\:modify\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/AliasArguments/ArrayKeyChange.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\AliasArguments\\\\\\\\ArrayKeyChange\\\\:\\\\:orderPaths\\\\(\\\\) has parameter \\\\$paths with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/AliasArguments/ArrayKeyChange.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$config of class GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\EnumType constructor expects array\\\\{name\\\\?\\\\: string\\\\|null, description\\\\?\\\\: string\\\\|null, values\\\\: \\\\(callable\\\\(\\\\)\\\\: iterable\\\\<int\\\\|string, mixed\\\\>\\\\)\\\\|iterable\\\\<int\\\\|string, mixed\\\\>, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\EnumTypeDefinitionNode\\\\|null, extensionASTNodes\\\\?\\\\: array\\\\<GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\EnumTypeExtensionNode\\\\>\\\\|null\\\\}, array\\\\<string, mixed\\\\> given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/EnumType.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#2 \\\\$schema of method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\ExecutionMiddleware\\\\\\\\AbstractExecutionMiddleware\\\\:\\\\:handle\\\\(\\\\) expects GraphQL\\\\\\\\Type\\\\\\\\Schema, Closure given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/ExecutionMiddleware/AbstractExecutionMiddleware.php\n\n\t\t-\n\t\t\tmessage: \"#^Class Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Facades\\\\\\\\GraphQL has PHPDoc tag @method for method buildSchemaFromConfig\\\\(\\\\) parameter \\\\#1 \\\\$schemaConfig with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Facades/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Class Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Facades\\\\\\\\GraphQL has PHPDoc tag @method for method execute\\\\(\\\\) return type with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Facades/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Class Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Facades\\\\\\\\GraphQL has PHPDoc tag @method for method formatError\\\\(\\\\) return type with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Facades/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Class Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Facades\\\\\\\\GraphQL has PHPDoc tag @method for method getGlobalResolverMiddlewares\\\\(\\\\) return type with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Facades/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Class Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Facades\\\\\\\\GraphQL has PHPDoc tag @method for method getSchemas\\\\(\\\\) return type with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Facades/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Class Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Facades\\\\\\\\GraphQL has PHPDoc tag @method for method objectType\\\\(\\\\) parameter \\\\#1 \\\\$type with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Facades/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Class Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Facades\\\\\\\\GraphQL has PHPDoc tag @method for method objectType\\\\(\\\\) parameter \\\\#2 \\\\$opts with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Facades/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Class Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Facades\\\\\\\\GraphQL has PHPDoc tag @method for method query\\\\(\\\\) parameter \\\\#2 \\\\$params with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Facades/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Class Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Facades\\\\\\\\GraphQL has PHPDoc tag @method for method query\\\\(\\\\) parameter \\\\#3 \\\\$opts with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Facades/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Class Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Facades\\\\\\\\GraphQL has PHPDoc tag @method for method query\\\\(\\\\) return type with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Facades/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Class Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Facades\\\\\\\\GraphQL has PHPDoc tag @method for method queryAndReturnResult\\\\(\\\\) parameter \\\\#2 \\\\$params with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Facades/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Class Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Facades\\\\\\\\GraphQL has PHPDoc tag @method for method queryAndReturnResult\\\\(\\\\) parameter \\\\#3 \\\\$opts with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Facades/GraphQL.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method getName\\\\(\\\\) on ReflectionType\\\\|null\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Field.php\n\n\t\t-\n\t\t\tmessage: \"#^Cannot call method isBuiltin\\\\(\\\\) on ReflectionType\\\\|null\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Field.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Field\\\\:\\\\:__set\\\\(\\\\) has parameter \\\\$value with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Field.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Field\\\\:\\\\:aliasArgs\\\\(\\\\) has parameter \\\\$arguments with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Field.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Field\\\\:\\\\:aliasArgs\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Field.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Field\\\\:\\\\:appendGlobalMiddlewares\\\\(\\\\) should return list\\\\<class\\\\-string\\\\|object\\\\> but returns array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Field.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Field\\\\:\\\\:attributes\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Field.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Field\\\\:\\\\:authorize\\\\(\\\\) has parameter \\\\$args with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Field.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Field\\\\:\\\\:getArgs\\\\(\\\\) has parameter \\\\$arguments with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Field.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Field\\\\:\\\\:getArgs\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Field.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Field\\\\:\\\\:getAttributes\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Field.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Field\\\\:\\\\:getValidator\\\\(\\\\) has parameter \\\\$args with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Field.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Field\\\\:\\\\:getValidator\\\\(\\\\) has parameter \\\\$rules with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Field.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Field\\\\:\\\\:validationErrorMessages\\\\(\\\\) has parameter \\\\$args with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Field.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Field\\\\:\\\\:validationErrorMessages\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Field.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$config of class GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputObjectType constructor expects array\\\\{name\\\\?\\\\: string\\\\|null, description\\\\?\\\\: string\\\\|null, fields\\\\: \\\\(callable\\\\(\\\\)\\\\: iterable\\\\<array\\\\{name\\\\?\\\\: string, type\\\\: callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\), defaultValue\\\\?\\\\: mixed, description\\\\?\\\\: string\\\\|null, deprecationReason\\\\?\\\\: string\\\\|null, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InputValueDefinitionNode\\\\|null\\\\}\\\\|callable\\\\(\\\\)\\\\: \\\\(array\\\\{name\\\\?\\\\: string, type\\\\: callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\), defaultValue\\\\?\\\\: mixed, description\\\\?\\\\: string\\\\|null, deprecationReason\\\\?\\\\: string\\\\|null, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InputValueDefinitionNode\\\\|null\\\\}\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputObjectField\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\)\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputObjectField\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\>\\\\)\\\\|iterable\\\\<array\\\\{name\\\\?\\\\: string, type\\\\: \\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\)\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\), defaultValue\\\\?\\\\: mixed, description\\\\?\\\\: string\\\\|null, deprecationReason\\\\?\\\\: string\\\\|null, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InputValueDefinitionNode\\\\|null\\\\}\\\\|\\\\(callable\\\\(\\\\)\\\\: \\\\(array\\\\{name\\\\?\\\\: string, type\\\\: callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\), defaultValue\\\\?\\\\: mixed, description\\\\?\\\\: string\\\\|null, deprecationReason\\\\?\\\\: string\\\\|null, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InputValueDefinitionNode\\\\|null\\\\}\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputObjectField\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\)\\\\)\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputObjectField\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\>, parseValue\\\\?\\\\: callable\\\\(array\\\\<string, mixed\\\\>\\\\)\\\\: mixed, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InputObjectTypeDefinitionNode\\\\|null, extensionASTNodes\\\\?\\\\: array\\\\<GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InputObjectTypeExtensionNode\\\\>\\\\|null\\\\}, array\\\\<string, mixed\\\\> given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/InputType.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$config of class GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType constructor expects array\\\\{name\\\\?\\\\: string\\\\|null, description\\\\?\\\\: string\\\\|null, fields\\\\: \\\\(callable\\\\(\\\\)\\\\: iterable\\\\)\\\\|iterable, interfaces\\\\?\\\\: \\\\(callable\\\\(\\\\)\\\\: iterable\\\\<callable\\\\(\\\\)\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\>\\\\)\\\\|iterable\\\\<\\\\(callable\\\\(\\\\)\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\)\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\>, resolveType\\\\?\\\\: \\\\(callable\\\\(mixed, mixed, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ResolveInfo\\\\)\\\\: \\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\|string\\\\|null\\\\)\\\\|GraphQL\\\\\\\\Deferred\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\|string\\\\|null\\\\)\\\\)\\\\|null, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InterfaceTypeDefinitionNode\\\\|null, extensionASTNodes\\\\?\\\\: array\\\\<GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InterfaceTypeExtensionNode\\\\>\\\\|null\\\\}, array\\\\<string, mixed\\\\> given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/InterfaceType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Middleware\\\\:\\\\:handle\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Middleware.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Middleware\\\\:\\\\:handle\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Middleware.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Middleware\\\\:\\\\:handle\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Middleware.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Middleware\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Middleware.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Middleware\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$arguments with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Middleware.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#2 \\\\$args of method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Middleware\\\\:\\\\:handle\\\\(\\\\) expects array\\\\<string, mixed\\\\>, Closure given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Middleware.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\PaginationType\\\\:\\\\:getPaginationFields\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/PaginationType.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$type of static method GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\:\\\\:nonNull\\\\(\\\\) expects \\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\NullableType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\)\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\NullableType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\), GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/PaginationType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Privacy\\\\:\\\\:fire\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Privacy.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\:\\\\:\\\\$config\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:__construct\\\\(\\\\) has parameter \\\\$queryArgs with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:addAlwaysFields\\\\(\\\\) has parameter \\\\$select with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:addFieldToSelect\\\\(\\\\) has parameter \\\\$select with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:getRelations\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:getSelect\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:getSelectableFieldsAndRelations\\\\(\\\\) has parameter \\\\$queryArgs with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:getSelectableFieldsAndRelations\\\\(\\\\) has parameter \\\\$requestedFields with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:getSelectableFieldsAndRelations\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:handleFields\\\\(\\\\) has parameter \\\\$queryArgs with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:handleFields\\\\(\\\\) has parameter \\\\$select with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:handleFields\\\\(\\\\) has parameter \\\\$with with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:handleInterfaceFields\\\\(\\\\) has parameter \\\\$field with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:handleInterfaceFields\\\\(\\\\) has parameter \\\\$queryArgs with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:handleInterfaceFields\\\\(\\\\) has parameter \\\\$select with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:handleInterfaceFields\\\\(\\\\) has parameter \\\\$with with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:handleRelation\\\\(\\\\) has parameter \\\\$field with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:handleRelation\\\\(\\\\) has parameter \\\\$select with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:isQueryable\\\\(\\\\) has parameter \\\\$fieldObject with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Offset 'always' on array\\\\{name\\\\: string, type\\\\: \\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\OutputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\)\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\OutputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\), resolve\\\\?\\\\: \\\\(callable\\\\(mixed, array\\\\<string, mixed\\\\>, mixed, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ResolveInfo\\\\)\\\\: mixed\\\\)\\\\|null, args\\\\?\\\\: iterable\\\\<array\\\\{name\\\\?\\\\: string, type\\\\: \\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\)\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\), defaultValue\\\\?\\\\: mixed, description\\\\?\\\\: string\\\\|null, deprecationReason\\\\?\\\\: string\\\\|null, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InputValueDefinitionNode\\\\|null\\\\}\\\\|\\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\)\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\>\\\\|null, argsMapper\\\\?\\\\: \\\\(callable\\\\(array\\\\<string, mixed\\\\>, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\FieldDefinition, GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\FieldNode, mixed\\\\)\\\\: mixed\\\\)\\\\|null, description\\\\?\\\\: string\\\\|null, visible\\\\?\\\\: bool\\\\|\\\\(callable\\\\(\\\\)\\\\: bool\\\\), deprecationReason\\\\?\\\\: string\\\\|null, \\\\.\\\\.\\\\.\\\\} in isset\\\\(\\\\) does not exist\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Offset 'privacy' on array\\\\{name\\\\: string, type\\\\: \\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\OutputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\)\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\OutputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\), resolve\\\\?\\\\: \\\\(callable\\\\(mixed, array\\\\<string, mixed\\\\>, mixed, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ResolveInfo\\\\)\\\\: mixed\\\\)\\\\|null, args\\\\?\\\\: iterable\\\\<array\\\\{name\\\\?\\\\: string, type\\\\: \\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\)\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\), defaultValue\\\\?\\\\: mixed, description\\\\?\\\\: string\\\\|null, deprecationReason\\\\?\\\\: string\\\\|null, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InputValueDefinitionNode\\\\|null\\\\}\\\\|\\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\)\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\>\\\\|null, argsMapper\\\\?\\\\: \\\\(callable\\\\(array\\\\<string, mixed\\\\>, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\FieldDefinition, GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\FieldNode, mixed\\\\)\\\\: mixed\\\\)\\\\|null, description\\\\?\\\\: string\\\\|null, visible\\\\?\\\\: bool\\\\|\\\\(callable\\\\(\\\\)\\\\: bool\\\\), deprecationReason\\\\?\\\\: string\\\\|null, \\\\.\\\\.\\\\.\\\\} in isset\\\\(\\\\) does not exist\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Offset 'selectable' on array\\\\{name\\\\: string, type\\\\: \\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\OutputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\)\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\OutputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\), resolve\\\\?\\\\: \\\\(callable\\\\(mixed, array\\\\<string, mixed\\\\>, mixed, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ResolveInfo\\\\)\\\\: mixed\\\\)\\\\|null, args\\\\?\\\\: iterable\\\\<array\\\\{name\\\\?\\\\: string, type\\\\: \\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\)\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\), defaultValue\\\\?\\\\: mixed, description\\\\?\\\\: string\\\\|null, deprecationReason\\\\?\\\\: string\\\\|null, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\InputValueDefinitionNode\\\\|null\\\\}\\\\|\\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\)\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InputType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\>\\\\|null, argsMapper\\\\?\\\\: \\\\(callable\\\\(array\\\\<string, mixed\\\\>, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\FieldDefinition, GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\FieldNode, mixed\\\\)\\\\: mixed\\\\)\\\\|null, description\\\\?\\\\: string\\\\|null, visible\\\\?\\\\: bool\\\\|\\\\(callable\\\\(\\\\)\\\\: bool\\\\), deprecationReason\\\\?\\\\: string\\\\|null, \\\\.\\\\.\\\\.\\\\} in isset\\\\(\\\\) does not exist\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$callback of function call_user_func expects callable\\\\(\\\\)\\\\: mixed, array\\\\{mixed, mixed\\\\} given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:\\\\$relations type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\SelectFields\\\\:\\\\:\\\\$select type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Result of && is always false\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SelectFields.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$type of static method GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\:\\\\:nonNull\\\\(\\\\) expects \\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\NullableType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\)\\\\)\\\\|\\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\NullableType&GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type\\\\), GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\Type given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/SimplePaginationType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Type\\\\:\\\\:getFieldResolver\\\\(\\\\) has parameter \\\\$field with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Type.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$callback of function call_user_func_array expects callable\\\\(\\\\)\\\\: mixed, array\\\\{\\\\$this\\\\(Rebing\\\\\\\\GraphQL\\\\\\\\Support\\\\\\\\Type\\\\), non\\\\-falsy\\\\-string\\\\} given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Type.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$config of class GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType constructor expects array\\\\{name\\\\?\\\\: string\\\\|null, description\\\\?\\\\: string\\\\|null, resolveField\\\\?\\\\: \\\\(callable\\\\(mixed, array\\\\<string, mixed\\\\>, mixed, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ResolveInfo\\\\)\\\\: mixed\\\\)\\\\|null, argsMapper\\\\?\\\\: \\\\(callable\\\\(array\\\\<string, mixed\\\\>, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\FieldDefinition, GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\FieldNode, mixed\\\\)\\\\: mixed\\\\)\\\\|null, fields\\\\: \\\\(callable\\\\(\\\\)\\\\: iterable\\\\)\\\\|iterable, interfaces\\\\?\\\\: \\\\(callable\\\\(\\\\)\\\\: iterable\\\\<callable\\\\(\\\\)\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\>\\\\)\\\\|iterable\\\\<\\\\(callable\\\\(\\\\)\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\)\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\>, isTypeOf\\\\?\\\\: \\\\(callable\\\\(mixed, mixed, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ResolveInfo\\\\)\\\\: \\\\(bool\\\\|GraphQL\\\\\\\\Deferred\\\\|null\\\\)\\\\)\\\\|null, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\ObjectTypeDefinitionNode\\\\|null, \\\\.\\\\.\\\\.\\\\}, array\\\\<string, mixed\\\\> given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/Type.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$config of class GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\UnionType constructor expects array\\\\{name\\\\?\\\\: string\\\\|null, description\\\\?\\\\: string\\\\|null, types\\\\: \\\\(callable\\\\(\\\\)\\\\: iterable\\\\<callable\\\\(\\\\)\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\>\\\\)\\\\|iterable\\\\<\\\\(callable\\\\(\\\\)\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\)\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\>, resolveType\\\\?\\\\: \\\\(callable\\\\(mixed, mixed, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ResolveInfo\\\\)\\\\: \\\\(callable\\\\(\\\\)\\\\: \\\\(GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\|string\\\\|null\\\\)\\\\|GraphQL\\\\\\\\Deferred\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType\\\\|string\\\\|null\\\\)\\\\)\\\\|null, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\UnionTypeDefinitionNode\\\\|null, extensionASTNodes\\\\?\\\\: array\\\\<GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\UnionTypeExtensionNode\\\\>\\\\|null\\\\}, array\\\\<string, mixed\\\\> given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/UnionType.php\n\n\t\t-\n\t\t\tmessage: \"#^Unsafe usage of new static\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Support/UploadType.php\n\n\t\t-\n\t\t\tmessage: \"#^Offset 'uses' might not exist on array\\\\{uses\\\\?\\\\: mixed, middleware\\\\?\\\\: mixed\\\\}\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/routes.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\AuthorizeArgsTests\\\\\\\\GraphQLContext\\\\:\\\\:\\\\$data has no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/AuthorizeArgsTests/GraphQLContext.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\AuthorizeArgsTests\\\\\\\\TestAuthorizationArgsQuery\\\\:\\\\:authorize\\\\(\\\\) has parameter \\\\$args with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/AuthorizeArgsTests/TestAuthorizationArgsQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\MutationValidationUniqueWithCustomRulesTests\\\\\\\\RuleObjectFail\\\\:\\\\:message\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/MutationValidationUniqueWithCustomRulesTests/RuleObjectFail.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\MutationValidationUniqueWithCustomRulesTests\\\\\\\\RuleObjectPass\\\\:\\\\:message\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/MutationValidationUniqueWithCustomRulesTests/RuleObjectPass.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\AlwaysRelationTests\\\\\\\\LikableInterfaceType\\\\:\\\\:resolveType\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/AlwaysRelationTests/LikableInterfaceType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\AlwaysRelationTests\\\\\\\\LikableInterfaceType\\\\:\\\\:resolveType\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/AlwaysRelationTests/LikableInterfaceType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\AlwaysRelationTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/AlwaysRelationTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\AlwaysRelationTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/AlwaysRelationTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\AlwaysRelationTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/AlwaysRelationTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\AlwaysRelationTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/AlwaysRelationTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\AlwaysTests\\\\\\\\AlwaysQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/AlwaysTests/AlwaysQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\AlwaysTests\\\\\\\\AlwaysQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/AlwaysTests/AlwaysQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\AlwaysTests\\\\\\\\AlwaysQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/AlwaysTests/AlwaysQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\AlwaysTests\\\\\\\\AlwaysQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/AlwaysTests/AlwaysQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\ArrayTests\\\\\\\\ArrayQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/ArrayTests/ArrayQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\ArrayTests\\\\\\\\ArrayQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/ArrayTests/ArrayQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\ArrayTests\\\\\\\\ArrayQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$ctx with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/ArrayTests/ArrayQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\ArrayTests\\\\\\\\ArrayQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/ArrayTests/ArrayQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\ComputedPropertiesTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/ComputedPropertiesTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\ComputedPropertiesTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/ComputedPropertiesTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\ComputedPropertiesTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/ComputedPropertiesTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\ComputedPropertiesTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/ComputedPropertiesTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\DepthTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/DepthTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\DepthTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/DepthTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\DepthTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/DepthTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\DepthTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/DepthTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\InterfaceTests\\\\\\\\ExampleInterfaceQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/InterfaceTests/ExampleInterfaceQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\InterfaceTests\\\\\\\\ExampleInterfaceQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/InterfaceTests/ExampleInterfaceQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\InterfaceTests\\\\\\\\ExampleInterfaceQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/InterfaceTests/ExampleInterfaceQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\InterfaceTests\\\\\\\\ExampleInterfaceQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/InterfaceTests/ExampleInterfaceQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\InterfaceTests\\\\\\\\ExampleInterfaceType\\\\:\\\\:resolveType\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/InterfaceTests/ExampleInterfaceType.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$column of method Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Builder\\\\<Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model\\\\>\\\\:\\\\:where\\\\(\\\\) expects array\\\\<int\\\\|model property of Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model, mixed\\\\>\\\\|\\\\(Closure\\\\(Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Builder\\\\<Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model\\\\>\\\\)\\\\: mixed\\\\)\\\\|Illuminate\\\\\\\\Contracts\\\\\\\\Database\\\\\\\\Query\\\\\\\\Expression\\\\|model property of Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model, 'id' given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/InterfaceTests/ExampleInterfaceType.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Models\\\\\\\\Post\\\\:\\\\:\\\\$created_at\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/InterfaceTests/InterfaceTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Access to an undefined property Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Models\\\\\\\\Post\\\\:\\\\:\\\\$updated_at\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/InterfaceTests/InterfaceTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\InterfaceTests\\\\\\\\LikableInterfaceType\\\\:\\\\:resolveType\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/InterfaceTests/LikableInterfaceType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\InterfaceTests\\\\\\\\LikableInterfaceType\\\\:\\\\:resolveType\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/InterfaceTests/LikableInterfaceType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\InterfaceTests\\\\\\\\LikableInterfaceType\\\\:\\\\:types\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/InterfaceTests/LikableInterfaceType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\InterfaceTests\\\\\\\\UserQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/InterfaceTests/UserQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\InterfaceTests\\\\\\\\UserQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/InterfaceTests/UserQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\InterfaceTests\\\\\\\\UserQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/InterfaceTests/UserQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\InterfaceTests\\\\\\\\UserQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/InterfaceTests/UserQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\MorphRelationshipTests\\\\\\\\LikableInterfaceType\\\\:\\\\:resolveType\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/MorphRelationshipTests/LikableInterfaceType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\MorphRelationshipTests\\\\\\\\LikableInterfaceType\\\\:\\\\:resolveType\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/MorphRelationshipTests/LikableInterfaceType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\MorphRelationshipTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/MorphRelationshipTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\MorphRelationshipTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/MorphRelationshipTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\MorphRelationshipTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/MorphRelationshipTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\MorphRelationshipTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/MorphRelationshipTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$column of method Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Builder\\\\<Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model\\\\>\\\\:\\\\:where\\\\(\\\\) expects array\\\\<int\\\\|model property of Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model, mixed\\\\>\\\\|\\\\(Closure\\\\(Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Builder\\\\<Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model\\\\>\\\\)\\\\: mixed\\\\)\\\\|Illuminate\\\\\\\\Contracts\\\\\\\\Database\\\\\\\\Query\\\\\\\\Expression\\\\|model property of Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model, 'comments\\\\.flag' given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/NestedRelationLoadingTests/PostType.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$column of method Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Builder\\\\<Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model\\\\>\\\\:\\\\:where\\\\(\\\\) expects array\\\\<int\\\\|model property of Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model, mixed\\\\>\\\\|\\\\(Closure\\\\(Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Builder\\\\<Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model\\\\>\\\\)\\\\: mixed\\\\)\\\\|Illuminate\\\\\\\\Contracts\\\\\\\\Database\\\\\\\\Query\\\\\\\\Expression\\\\|model property of Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model, 'posts\\\\.flag' given\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: tests/Database/SelectFields/NestedRelationLoadingTests/UserType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\NestedRelationLoadingTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/NestedRelationLoadingTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\NestedRelationLoadingTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/NestedRelationLoadingTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\NestedRelationLoadingTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/NestedRelationLoadingTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\NestedRelationLoadingTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/NestedRelationLoadingTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\PrimaryKeyTests\\\\\\\\PrimaryKeyPaginationQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/PrimaryKeyTests/PrimaryKeyPaginationQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\PrimaryKeyTests\\\\\\\\PrimaryKeyPaginationQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/PrimaryKeyTests/PrimaryKeyPaginationQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\PrimaryKeyTests\\\\\\\\PrimaryKeyPaginationQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$ctx with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/PrimaryKeyTests/PrimaryKeyPaginationQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\PrimaryKeyTests\\\\\\\\PrimaryKeyPaginationQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/PrimaryKeyTests/PrimaryKeyPaginationQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\PrimaryKeyTests\\\\\\\\PrimaryKeyQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/PrimaryKeyTests/PrimaryKeyQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\PrimaryKeyTests\\\\\\\\PrimaryKeyQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/PrimaryKeyTests/PrimaryKeyQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\PrimaryKeyTests\\\\\\\\PrimaryKeyQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$ctx with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/PrimaryKeyTests/PrimaryKeyQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\PrimaryKeyTests\\\\\\\\PrimaryKeyQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/PrimaryKeyTests/PrimaryKeyQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\QueryArgsAndContextTests\\\\\\\\GraphQLContext\\\\:\\\\:\\\\$data has no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/QueryArgsAndContextTests/GraphQLContext.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$column of method Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Builder\\\\<Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model\\\\>\\\\:\\\\:where\\\\(\\\\) expects array\\\\<int\\\\|model property of Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model, mixed\\\\>\\\\|\\\\(Closure\\\\(Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Builder\\\\<Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model\\\\>\\\\)\\\\: mixed\\\\)\\\\|Illuminate\\\\\\\\Contracts\\\\\\\\Database\\\\\\\\Query\\\\\\\\Expression\\\\|model property of Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model, 'comments\\\\.flag' given\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: tests/Database/SelectFields/QueryArgsAndContextTests/PostType.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$column of method Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Builder\\\\<Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model\\\\>\\\\:\\\\:where\\\\(\\\\) expects array\\\\<int\\\\|model property of Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model, mixed\\\\>\\\\|\\\\(Closure\\\\(Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Builder\\\\<Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model\\\\>\\\\)\\\\: mixed\\\\)\\\\|Illuminate\\\\\\\\Contracts\\\\\\\\Database\\\\\\\\Query\\\\\\\\Expression\\\\|model property of Illuminate\\\\\\\\Database\\\\\\\\Eloquent\\\\\\\\Model, 'posts\\\\.flag' given\\\\.$#\"\n\t\t\tcount: 3\n\t\t\tpath: tests/Database/SelectFields/QueryArgsAndContextTests/UserType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\QueryArgsAndContextTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/QueryArgsAndContextTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\QueryArgsAndContextTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/QueryArgsAndContextTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\QueryArgsAndContextTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/QueryArgsAndContextTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\UnionTests\\\\\\\\SearchQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/UnionTests/SearchQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\UnionTests\\\\\\\\SearchQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/UnionTests/SearchQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\UnionTests\\\\\\\\SearchQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$ctx with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/UnionTests/SearchQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\UnionTests\\\\\\\\SearchQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/UnionTests/SearchQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\ValidateDiffNodeTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/ValidateDiffNodeTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\ValidateDiffNodeTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/ValidateDiffNodeTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\ValidateDiffNodeTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/ValidateDiffNodeTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\ValidateDiffNodeTests\\\\\\\\UsersQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/ValidateDiffNodeTests/UsersQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\ValidateFieldTests\\\\\\\\ValidateFieldsQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/ValidateFieldTests/ValidateFieldsQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\ValidateFieldTests\\\\\\\\ValidateFieldsQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/ValidateFieldTests/ValidateFieldsQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\ValidateFieldTests\\\\\\\\ValidateFieldsQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/ValidateFieldTests/ValidateFieldsQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Database\\\\\\\\SelectFields\\\\\\\\ValidateFieldTests\\\\\\\\ValidateFieldsQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Database/SelectFields/ValidateFieldTests/ValidateFieldsQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\CustomExamplesQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/CustomExamplesQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\CustomExamplesQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/CustomExamplesQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\CustomExamplesQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/CustomExamplesQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ErrorFormatter\\\\:\\\\:formatError\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ErrorFormatter.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleField\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleField.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleField\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleField.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleField\\\\:\\\\:resolve\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleField.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleInterfaceType\\\\:\\\\:resolveType\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleInterfaceType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleInterfaceType\\\\:\\\\:resolveType\\\\(\\\\) should return GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\StringType but returns GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ScalarType\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleInterfaceType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleMiddleware\\\\:\\\\:handle\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleMiddleware.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleMiddleware\\\\:\\\\:handle\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleMiddleware.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleMiddleware\\\\:\\\\:handle\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleMiddleware.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleMiddleware\\\\:\\\\:terminate\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleMiddleware.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleMiddleware\\\\:\\\\:terminate\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleMiddleware.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleMiddleware\\\\:\\\\:terminate\\\\(\\\\) has parameter \\\\$result with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleMiddleware.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleMiddleware\\\\:\\\\:terminate\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleMiddleware.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleNestedValidationInputObject\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleNestedValidationInputObject.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleNestedValidationInputObject\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleNestedValidationInputObject.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleNestedValidationInputObject\\\\:\\\\:resolve\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleNestedValidationInputObject.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleUnionType\\\\:\\\\:resolveType\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleUnionType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleUnionType\\\\:\\\\:resolveType\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleUnionType.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleValidationField\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleValidationField.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleValidationField\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleValidationField.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleValidationField\\\\:\\\\:resolve\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleValidationField.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleValidationInputObject\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleValidationInputObject.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleValidationInputObject\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleValidationInputObject.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleValidationInputObject\\\\:\\\\:resolve\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExampleValidationInputObject.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesAuthorizeMessageQuery\\\\:\\\\:authorize\\\\(\\\\) has parameter \\\\$args with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesAuthorizeMessageQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesAuthorizeMessageQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesAuthorizeMessageQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesAuthorizeMessageQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesAuthorizeMessageQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesAuthorizeMessageQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesAuthorizeMessageQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesAuthorizeMessageQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesAuthorizeMessageQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesAuthorizeQuery\\\\:\\\\:authorize\\\\(\\\\) has parameter \\\\$args with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesAuthorizeQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesAuthorizeQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesAuthorizeQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesAuthorizeQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesAuthorizeQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesAuthorizeQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesAuthorizeQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesAuthorizeQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesAuthorizeQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesFilteredQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesFilteredQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesFilteredQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesFilteredQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesFilteredQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesFilteredQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesFilteredQuery\\\\:\\\\:resolve\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesFilteredQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesMiddlewareQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesMiddlewareQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesMiddlewareQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesMiddlewareQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesMiddlewareQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesMiddlewareQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesPaginationQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesPaginationQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesPaginationQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesPaginationQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesPaginationQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesPaginationQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Objects/ExamplesQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostNonNullPaginationQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostNonNullPaginationQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostNonNullPaginationQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostNonNullPaginationQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostNonNullPaginationQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostNonNullPaginationQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostNonNullSimplePaginationQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostNonNullSimplePaginationQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostNonNullSimplePaginationQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostNonNullSimplePaginationQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostNonNullSimplePaginationQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostNonNullSimplePaginationQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostNonNullWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostNonNullWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostNonNullWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostNonNullWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostNonNullWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostNonNullWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostNonNullWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostNonNullWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostQueryWithNonInjectableTypehintsQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostQueryWithNonInjectableTypehintsQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostQueryWithNonInjectableTypehintsQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostQueryWithNonInjectableTypehintsQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostQueryWithNonInjectableTypehintsQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$ctx with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostQueryWithNonInjectableTypehintsQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostQueryWithNonInjectableTypehintsQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostQueryWithNonInjectableTypehintsQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostQueryWithSelectFieldsClassInjectionQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostQueryWithSelectFieldsClassInjectionQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostQueryWithSelectFieldsClassInjectionQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostQueryWithSelectFieldsClassInjectionQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostQueryWithSelectFieldsClassInjectionQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$ctx with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostQueryWithSelectFieldsClassInjectionQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostQueryWithSelectFieldsClassInjectionQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostQueryWithSelectFieldsClassInjectionQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsAndModelAndAliasAndCustomResolverQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsAndModelAndAliasAndCustomResolverQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsAndModelAndAliasAndCustomResolverQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsAndModelAndAliasAndCustomResolverQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsAndModelAndAliasAndCustomResolverQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsAndModelAndAliasAndCustomResolverQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsAndModelAndAliasAndCustomResolverQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsAndModelAndAliasAndCustomResolverQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsAndModelAndAliasCallbackQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsAndModelAndAliasCallbackQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsAndModelAndAliasCallbackQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsAndModelAndAliasCallbackQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsAndModelAndAliasCallbackQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsAndModelAndAliasCallbackQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsAndModelAndAliasCallbackQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsAndModelAndAliasCallbackQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsAndModelAndAliasQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsAndModelAndAliasQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsAndModelAndAliasQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsAndModelAndAliasQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsAndModelAndAliasQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsAndModelAndAliasQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsAndModelAndAliasQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsAndModelAndAliasQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsNoModelQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsNoModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsNoModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsNoModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsNoModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsNoModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostWithSelectFieldsNoModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostWithSelectFieldsNoModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostsListOfWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostsListOfWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostsListOfWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostsListOfWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostsListOfWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostsListOfWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostsListOfWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostsListOfWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostsNonNullAndListAndNonNullOfWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostsNonNullAndListAndNonNullOfWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostsNonNullAndListAndNonNullOfWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostsNonNullAndListAndNonNullOfWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostsNonNullAndListAndNonNullOfWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostsNonNullAndListAndNonNullOfWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostsNonNullAndListAndNonNullOfWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostsNonNullAndListAndNonNullOfWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostsNonNullAndListOfWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostsNonNullAndListOfWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostsNonNullAndListOfWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostsNonNullAndListOfWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostsNonNullAndListOfWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$context with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostsNonNullAndListOfWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Queries\\\\\\\\PostsNonNullAndListOfWithSelectFieldsAndModelQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Queries/PostsNonNullAndListOfWithSelectFieldsAndModelQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Unsafe usage of new static\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Support/Types/MyCustomScalarString.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\TestCase\\\\:\\\\:assertGraphQLSchema\\\\(\\\\) has parameter \\\\$schema with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/TestCase.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\TestCase\\\\:\\\\:assertGraphQLSchemaHasMutation\\\\(\\\\) has parameter \\\\$key with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/TestCase.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\TestCase\\\\:\\\\:assertGraphQLSchemaHasMutation\\\\(\\\\) has parameter \\\\$schema with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/TestCase.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\TestCase\\\\:\\\\:assertGraphQLSchemaHasQuery\\\\(\\\\) has parameter \\\\$key with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/TestCase.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\TestCase\\\\:\\\\:assertGraphQLSchemaHasQuery\\\\(\\\\) has parameter \\\\$schema with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/TestCase.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\TestCase\\\\:\\\\:formatSafeTrace\\\\(\\\\) has parameter \\\\$trace with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/TestCase.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$laravel of method Illuminate\\\\\\\\Console\\\\\\\\Command\\\\:\\\\:setLaravel\\\\(\\\\) expects Illuminate\\\\\\\\Contracts\\\\\\\\Container\\\\\\\\Container, Illuminate\\\\\\\\Foundation\\\\\\\\Application\\\\|null given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/TestCase.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\TestCase\\\\:\\\\:\\\\$data has no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/TestCase.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\TestCase\\\\:\\\\:\\\\$queries has no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/TestCase.php\n\n\t\t-\n\t\t\tmessage: \"#^Call to an undefined method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\TestCaseDatabase\\\\:\\\\:setupTraitForSqlAssertion\\\\(\\\\)\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/TestCaseDatabase.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\AliasArguments\\\\\\\\Stubs\\\\\\\\UpdateExampleMutation\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/AliasArguments/Stubs/UpdateExampleMutation.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\AliasArguments\\\\\\\\Stubs\\\\\\\\UpdateExampleMutation\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/AliasArguments/Stubs/UpdateExampleMutation.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\AliasArguments\\\\\\\\Stubs\\\\\\\\UpdateExampleMutation\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/AliasArguments/Stubs/UpdateExampleMutation.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\Console\\\\\\\\EnumMakeCommandTest\\\\:\\\\:dataForMakeCommand\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/Console/EnumMakeCommandTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\Console\\\\\\\\ExecutionMiddlewareMakeCommandTest\\\\:\\\\:dataForMakeCommand\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/Console/ExecutionMiddlewareMakeCommandTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\Console\\\\\\\\InputMakeCommandTest\\\\:\\\\:dataForMakeCommand\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/Console/InputMakeCommandTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\Console\\\\\\\\InterfaceMakeCommandTest\\\\:\\\\:dataForMakeCommand\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/Console/InterfaceMakeCommandTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\Console\\\\\\\\MiddlewareMakeCommandTest\\\\:\\\\:dataForMakeCommand\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/Console/MiddlewareMakeCommandTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\Console\\\\\\\\MutationMakeCommandTest\\\\:\\\\:dataForMakeCommand\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/Console/MutationMakeCommandTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\Console\\\\\\\\QueryMakeCommandTest\\\\:\\\\:dataForMakeCommand\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/Console/QueryMakeCommandTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\Console\\\\\\\\ScalarMakeCommandTest\\\\:\\\\:dataForMakeCommand\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/Console/ScalarMakeCommandTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\Console\\\\\\\\TypeMakeCommandTest\\\\:\\\\:dataForMakeCommand\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/Console/TypeMakeCommandTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\Console\\\\\\\\UnionMakeCommandTest\\\\:\\\\:dataForMakeCommand\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/Console/UnionMakeCommandTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\EngineErrorInResolverTests\\\\\\\\QueryWithEngineErrorInCodeQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/EngineErrorInResolverTests/QueryWithEngineErrorInCodeQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\EngineErrorInResolverTests\\\\\\\\QueryWithEngineErrorInCodeQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/EngineErrorInResolverTests/QueryWithEngineErrorInCodeQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#2 \\\\$visitor of static method GraphQL\\\\\\\\Language\\\\\\\\Visitor\\\\:\\\\:visit\\\\(\\\\) expects array\\\\<string, array\\\\<string, callable\\\\(GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\Node\\\\)\\\\: \\\\(GraphQL\\\\\\\\Language\\\\\\\\VisitorOperation\\\\|void\\\\|false\\\\|null\\\\)\\\\>\\\\|\\\\(callable\\\\(GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\Node\\\\)\\\\: \\\\(GraphQL\\\\\\\\Language\\\\\\\\VisitorOperation\\\\|void\\\\|false\\\\|null\\\\)\\\\)\\\\>, array\\\\{VariableDefinition\\\\: Closure\\\\(mixed, mixed, mixed, mixed, mixed\\\\)\\\\: mixed\\\\} given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/ExecutionMiddlewareTest/ChangeQueryArgTypeMiddleware.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$abstract of function app expects string\\\\|null, object\\\\|string given\\\\.$#\"\n\t\t\tcount: 3\n\t\t\tpath: tests/Unit/GraphQLTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$config of class GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ObjectType constructor expects array\\\\{name\\\\?\\\\: string\\\\|null, description\\\\?\\\\: string\\\\|null, resolveField\\\\?\\\\: \\\\(callable\\\\(mixed, array\\\\<string, mixed\\\\>, mixed, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ResolveInfo\\\\)\\\\: mixed\\\\)\\\\|null, argsMapper\\\\?\\\\: \\\\(callable\\\\(array\\\\<string, mixed\\\\>, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\FieldDefinition, GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\FieldNode, mixed\\\\)\\\\: mixed\\\\)\\\\|null, fields\\\\: \\\\(callable\\\\(\\\\)\\\\: iterable\\\\)\\\\|iterable, interfaces\\\\?\\\\: \\\\(callable\\\\(\\\\)\\\\: iterable\\\\<callable\\\\(\\\\)\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\>\\\\)\\\\|iterable\\\\<\\\\(callable\\\\(\\\\)\\\\: GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\)\\\\|GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\InterfaceType\\\\>, isTypeOf\\\\?\\\\: \\\\(callable\\\\(mixed, mixed, GraphQL\\\\\\\\Type\\\\\\\\Definition\\\\\\\\ResolveInfo\\\\)\\\\: \\\\(bool\\\\|GraphQL\\\\\\\\Deferred\\\\|null\\\\)\\\\)\\\\|null, astNode\\\\?\\\\: GraphQL\\\\\\\\Language\\\\\\\\AST\\\\\\\\ObjectTypeDefinitionNode\\\\|null, \\\\.\\\\.\\\\.\\\\}, array\\\\{name\\\\: 'ObjectType'\\\\} given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/GraphQLTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\InstantiableTypesTest\\\\\\\\FormattableDate\\\\:\\\\:__construct\\\\(\\\\) has parameter \\\\$settings with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/InstantiableTypesTest/FormattableDate.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\InstantiableTypesTest\\\\\\\\FormattableDate\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/InstantiableTypesTest/FormattableDate.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\InstantiableTypesTest\\\\\\\\FormattableDate\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/InstantiableTypesTest/FormattableDate.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\InstantiableTypesTest\\\\\\\\FormattableDate\\\\:\\\\:\\\\$defaultFormat has no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/InstantiableTypesTest/FormattableDate.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\InstantiableTypesTest\\\\\\\\UserQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/InstantiableTypesTest/UserQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\InstantiableTypesTest\\\\\\\\UserQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/InstantiableTypesTest/UserQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\InstantiableTypesTest\\\\\\\\UserQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/InstantiableTypesTest/UserQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\LaravelValidatorTests\\\\\\\\RuleObjectFail\\\\:\\\\:message\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/LaravelValidatorTests/RuleObjectFail.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\LaravelValidatorTests\\\\\\\\RuleObjectPass\\\\:\\\\:message\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/LaravelValidatorTests/RuleObjectPass.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\MutationCustomRulesTests\\\\\\\\MutationWithCustomRuleWithClosure\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/MutationCustomRulesTests/MutationWithCustomRuleWithClosure.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\MutationCustomRulesTests\\\\\\\\MutationWithCustomRuleWithClosure\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/MutationCustomRulesTests/MutationWithCustomRuleWithClosure.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\MutationCustomRulesTests\\\\\\\\RuleObject\\\\:\\\\:message\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/MutationCustomRulesTests/RuleObject.php\n\n\t\t-\n\t\t\tmessage: \"#^Return type \\\\(class\\\\-string\\\\<Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\UpdateExampleMutationWithInputType\\\\>\\\\) of method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\MutationTest\\\\:\\\\:getFieldClass\\\\(\\\\) should be compatible with return type \\\\(class\\\\-string\\\\<Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleField\\\\>\\\\) of method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\FieldTest\\\\:\\\\:getFieldClass\\\\(\\\\)$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/MutationTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\MutationValidationInWithCustomRulesTests\\\\\\\\RuleObjectFail\\\\:\\\\:message\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/MutationValidationInWithCustomRulesTests/RuleObjectFail.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\MutationValidationInWithCustomRulesTests\\\\\\\\RuleObjectPass\\\\:\\\\:message\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/MutationValidationInWithCustomRulesTests/RuleObjectPass.php\n\n\t\t-\n\t\t\tmessage: \"#^Return type \\\\(class\\\\-string\\\\<Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExamplesQuery\\\\>\\\\) of method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\QueryTest\\\\:\\\\:getFieldClass\\\\(\\\\) should be compatible with return type \\\\(class\\\\-string\\\\<Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Support\\\\\\\\Objects\\\\\\\\ExampleField\\\\>\\\\) of method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\FieldTest\\\\:\\\\:getFieldClass\\\\(\\\\)$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/QueryTest.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\TypesInSchemas\\\\\\\\SchemaOne\\\\\\\\Query\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/TypesInSchemas/SchemaOne/Query.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\TypesInSchemas\\\\\\\\SchemaTwo\\\\\\\\Query\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/TypesInSchemas/SchemaTwo/Query.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\UploadTests\\\\\\\\UploadMultipleFilesMutation\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/UploadTests/UploadMultipleFilesMutation.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\UploadTests\\\\\\\\UploadMultipleFilesMutation\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/UploadTests/UploadMultipleFilesMutation.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\UploadTests\\\\\\\\UploadMultipleFilesMutation\\\\:\\\\:resolve\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/UploadTests/UploadMultipleFilesMutation.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\UploadTests\\\\\\\\UploadSingleFileMutation\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/UploadTests/UploadSingleFileMutation.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\UploadTests\\\\\\\\UploadSingleFileMutation\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/UploadTests/UploadSingleFileMutation.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\ValidationAuthorizationTests\\\\\\\\ValidationAndAuthorizationMutation\\\\:\\\\:authorize\\\\(\\\\) has parameter \\\\$args with no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/ValidationAuthorizationTests/ValidationAndAuthorizationMutation.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\WithTypeTests\\\\\\\\PostMessagesQuery\\\\:\\\\:resolve\\\\(\\\\) has no return type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/WithTypeTests/PostMessagesQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\WithTypeTests\\\\\\\\PostMessagesQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$args with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/WithTypeTests/PostMessagesQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\WithTypeTests\\\\\\\\PostMessagesQuery\\\\:\\\\:resolve\\\\(\\\\) has parameter \\\\$root with no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/WithTypeTests/PostMessagesQuery.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\WithTypeTests\\\\\\\\SimpleMessage\\\\:\\\\:\\\\$code has no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/WithTypeTests/SimpleMessage.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\WithTypeTests\\\\\\\\SimpleMessage\\\\:\\\\:\\\\$message has no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/WithTypeTests/SimpleMessage.php\n\n\t\t-\n\t\t\tmessage: \"#^Property Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\WithTypeTests\\\\\\\\SimpleMessage\\\\:\\\\:\\\\$type has no type specified\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/WithTypeTests/SimpleMessage.php\n\n\t\t-\n\t\t\tmessage: \"#^Method Rebing\\\\\\\\GraphQL\\\\\\\\Tests\\\\\\\\Unit\\\\\\\\WithTypeTests\\\\\\\\WrapperType\\\\:\\\\:getMessagesFields\\\\(\\\\) return type has no value type specified in iterable type array\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: tests/Unit/WithTypeTests/WrapperType.php\n\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 1.919921875,
          "content": "includes:\n    - ./vendor/larastan/larastan/extension.neon\n    - ./phpstan-baseline.neon\n    - ./vendor/phpstan/phpstan/conf/bleedingEdge.neon\n    - ./vendor/thecodingmachine/phpstan-safe-rule/phpstan-safe-rule.neon\nparameters:\n    level: 8\n    tmpDir: tmp/phpstan/\n    paths:\n        - src/\n        - tests/\n    excludePaths:\n        - tests/Support/database/\n    inferPrivatePropertyTypeFromConstructor: true\n    checkUninitializedProperties: true\n    checkModelProperties: true\n    ignoreErrors:\n        -\n          identifier: missingType.generics\n        - '/Call to an undefined method Illuminate\\\\Testing\\\\TestResponse::(content|getData|getStatusCode)\\(\\)/'\n        # tests/Unit/GraphQLTest.php\n        - '/Call to an undefined method GraphQL\\\\Type\\\\Definition\\\\Type::getFields\\(\\)/'\n        - '/Call to an undefined method Mockery\\\\/'\n        # tests/Database/AuthorizeArgsTests/TestAuthorizationArgsQuery.php\n        - '/Trying to invoke Closure\\|null but it might not be a callable/'\n        - '/Property Rebing\\\\GraphQL\\\\Support\\\\Field\\:\\:\\$name \\(string\\) does not accept int\\|string/'\n        - '/Parameter #1 \\$name of method Rebing\\\\GraphQL\\\\Support\\\\Type\\:\\:getFieldResolver\\(\\) expects string, int\\|string given/'\n        # Mass ignore the raw array property access used in many tests for now\n        # See also https://github.com/larastan/larastan/issues/611\n        -\n          path: tests/*\n          message: '/Cannot access property \\$[a-z]+ on Rebing\\\\GraphQL\\\\Tests\\\\Support\\\\Models\\\\[A-Za-z]+\\|null./'\n        -\n          path: tests/*\n          message: '/Cannot call method make\\(\\) on Illuminate\\\\Foundation\\\\Application\\|null\\./'\n        -\n          path: tests/*\n          message: \"/Offset 'config' might not exist/\"\n        - path: tests/*\n          message: '/Parameter #1 \\$type of static method GraphQL\\\\Type\\\\Definition\\\\Type::nonNull\\(\\) expects .*, GraphQL\\\\Type\\\\Definition\\\\Type given./'\n    reportUnmatchedIgnoredErrors: true\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 1.1611328125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.5/phpunit.xsd\"\n        beStrictAboutChangesToGlobalState=\"true\"\n        beStrictAboutOutputDuringTests=\"false\"\n        beStrictAboutTestsThatDoNotTestAnything=\"true\"\n        cacheDirectory=\".phpunit.result.cache\"\n        displayDetailsOnPhpunitDeprecations=\"true\"\n        displayDetailsOnTestsThatTriggerDeprecations=\"true\"\n        displayDetailsOnTestsThatTriggerErrors=\"true\"\n        displayDetailsOnTestsThatTriggerNotices=\"true\"\n        displayDetailsOnTestsThatTriggerWarnings=\"true\"\n        failOnDeprecation=\"false\"\n        failOnNotice=\"true\"\n        failOnPhpunitDeprecation=\"false\"\n        failOnRisky=\"true\"\n        failOnWarning=\"true\"\n>\n  <testsuites>\n    <testsuite name=\"Unit\">\n      <directory suffix=\"Test.php\">./tests/Unit</directory>\n    </testsuite>\n    <testsuite name=\"Database\">\n      <directory suffix=\"Test.php\">./tests/Database</directory>\n    </testsuite>\n  </testsuites>\n  <source>\n    <include>\n      <directory suffix=\".php\">./src</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tmp",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}