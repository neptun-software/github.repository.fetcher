{
  "metadata": {
    "timestamp": 1736712272649,
    "page": 35,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "twigphp/Twig",
      "stars": 8221,
      "defaultBranch": "3.x",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.21875,
          "content": "; top-most EditorConfig file\nroot = true\n\n; Unix-style newlines\n[*]\nend_of_line = LF\n\n[*.php]\nindent_style = space\nindent_size = 4\n\n[*.test]\nindent_style = space\nindent_size = 4\n\n[*.rst]\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2373046875,
          "content": "/.github/ export-ignore\n/doc/ export-ignore\n/extra/ export-ignore\n/tests/ export-ignore\n/.editorconfig export-ignore\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/.php-cs-fixer.dist.php export-ignore\n/phpunit.xml.dist export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.09375,
          "content": "/doc/_build/vendor\n/doc/_build/output\n/composer.lock\n/phpunit.xml\n/vendor\n.phpunit.result.cache\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 0.8662109375,
          "content": "<?php\n\nreturn (new PhpCsFixer\\Config())\n    ->setRules([\n        '@Symfony' => true,\n        '@Symfony:risky' => true,\n        '@PHPUnit75Migration:risky' => true,\n        'php_unit_dedicate_assert' => ['target' => '5.6'],\n        'array_syntax' => ['syntax' => 'short'],\n        'php_unit_fqcn_annotation' => true,\n        'no_unreachable_default_argument_value' => false,\n        'braces' => ['allow_single_line_closure' => true],\n        'heredoc_to_nowdoc' => false,\n        'ordered_imports' => true,\n        'phpdoc_types_order' => ['null_adjustment' => 'always_last', 'sort_algorithm' => 'none'],\n        // TODO: Remove once the \"compiler_optimized\" set includes \"sprintf\"\n        'native_function_invocation' => ['include' => ['@compiler_optimized', 'sprintf'], 'scope' => 'all'],\n        ])\n    ->setRiskyAllowed(true)\n    ->setFinder((new PhpCsFixer\\Finder())->in(__DIR__))\n;\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 17.37890625,
          "content": "# 3.19.0 (2025-XX-XX)\n\n * Add the `invoke` filter\n * Make `{}` optional for the `types` tag\n * Add `LastModifiedExtensionInterface` and implementation in `AbstractExtension` to track modification of runtime classes\n\n# 3.18.0 (2024-12-29)\n\n * Fix unary operator precedence change\n * Ignore `SyntaxError` exceptions from undefined handlers when using the `guard` tag\n * Add a way to stream template rendering (`TemplateWrapper::stream()` and `TemplateWrapper::streamBlock()`)\n\n# 3.17.1 (2024-12-12)\n\n * Fix the null coalescing operator when the test returns null\n * Fix the Elvis operator when used as '? :' instead of '?:'\n * Support for invoking closures\n\n# 3.17.0 (2024-12-10)\n\n * Fix ArrayAccess with objects as keys\n * Support underscores in number literals\n * Deprecate `ConditionalExpression` and `NullCoalesceExpression` (use `ConditionalTernary` and `NullCoalesceBinary` instead)\n\n# 3.16.0 (2024-11-29)\n\n * Deprecate `InlinePrint`\n * Fix having macro variables starting with an underscore\n * Deprecate not passing a `Source` instance to `TokenStream`\n * Deprecate returning `null` from `TwigFilter::getSafe()` and `TwigFunction::getSafe()`, return `[]` instead\n\n# 3.15.0 (2024-11-17)\n \n * [BC BREAK] Add support for accessing class constants with the dot operator;\n   this can be a BC break if you don't use UPPERCASE constant names\n * Add Spanish inflector support for the `plural` and `singular` filters in the String extension\n * Deprecate `TempNameExpression` in favor of `LocalVariable`\n * Deprecate `NameExpression` in favor of `ContextVariable`\n * Deprecate `AssignNameExpression` in favor of `AssignContextVariable`\n * Remove `MacroAutoImportNodeVisitor`\n * Deprecate `MethodCallExpression` in favor of `MacroReferenceExpression`\n * Fix support for the \"is defined\" test on `_self.xxx` (auto-imported) macros\n * Fix support for the \"is defined\" test on inherited macros\n * Add named arguments support for the dot operator arguments (`foo.bar(some: arg)`)\n * Add named arguments support for macros\n * Add a new `guard` tag that allows to test if some Twig callables are available at compilation time\n * Allow arrow functions everywhere\n * Deprecate passing a string or an array to Twig callable arguments accepting arrow functions (pass a `\\Closure`)\n * Add support for triggering deprecations for future operator precedence changes\n * Deprecate using the `not` unary operator in an expression with ``*``, ``/``, ``//``, or ``%`` without using explicit parentheses to clarify precedence\n * Deprecate using the `??` binary operator without explicit parentheses\n * Deprecate using the `~`Â binary operator in an expression with `+` or `-` without using parentheses to clarify precedence\n * Deprecate not passing `AbstractExpression` args to most constructor arguments for classes extending `AbstractExpression`\n * Fix `power` expressions with a negative number in parenthesis (`(-1) ** 2`)\n * Deprecate instantiating `Node` directly. Use `EmptyNode` or `Nodes` instead.\n * Add support for inline comments\n * Add `Profile::getStartTime()` and `Profile::getEndTime()`\n * Fix \"ignore missing\" when used on an \"embed\" tag\n * Fix the possibility to override an aliased block (via use)\n * Add template cache hot reload\n * Allow Twig callable argument names to be free-form (snake-case or camelCase) independently of the PHP callable signature\n   They were automatically converted to snake-cased before\n * Deprecate the `attribute` function; use the `.` notation and wrap the name with parenthesis instead\n * Add support for argument unpackaging\n * Add JSON support for the file extension escaping strategy\n * Support Markup instances (and any other \\Stringable) as dynamic mapping keys\n * Deprecate the `sandbox` tag\n * Improve the way one can deprecate a Twig callable (use `deprecation_info` instead of the other callable options)\n * Add the `enum` function\n * Add support for logical `xor` operator\n\n# 3.14.2 (2024-11-07)\n\n * Fix an infinite recursion in the sandbox code\n\n# 3.14.1 (2024-11-06)\n\n * [BC BREAK] Fix a security issue in the sandbox mode allowing an attacker to call attributes on Array-like objects\n   They are now checked via the property policy\n * Fix a security issue in the sandbox mode allowing an attacker to be able to call `toString()`\n   under some circumstances on an object even if the `__toString()` method is not allowed by the security policy\n\n# 3.14.0 (2024-09-09)\n\n * Fix a security issue when an included sandboxed template has been loaded before without the sandbox context\n * Add the possibility to reset globals via `Environment::resetGlobals()`\n * Deprecate `Environment::mergeGlobals()`\n\n# 3.13.0 (2024-09-07)\n\n * Add the `types` tag (experimental)\n * Deprecate the `Twig\\Test\\NodeTestCase::getTests()` data provider, override `provideTests()` instead.\n * Mark `Twig\\Test\\NodeTestCase::getEnvironment()` as final, override `createEnvironment()` instead.\n * Deprecate `Twig\\Test\\NodeTestCase::getVariableGetter()`, call `createVariableGetter()` instead.\n * Deprecate `Twig\\Test\\NodeTestCase::getAttributeGetter()`, call `createAttributeGetter()` instead.\n * Deprecate not overriding `Twig\\Test\\IntegrationTestCase::getFixturesDirectory()`, this method will be abstract in 4.0\n * Marked `Twig\\Test\\IntegrationTestCase::getTests()` and `getLegacyTests()` as final\n\n# 3.12.0 (2024-08-29)\n\n * Deprecate the fact that the `extends` and `use` tags are always allowed in a sandboxed template.\n   This behavior will change in 4.0 where these tags will need to be explicitly allowed like any other tag.\n * Deprecate the \"tag\" constructor argument of the \"Twig\\Node\\Node\" class as the tag is now automatically set by the Parser when needed\n * Fix precedence of two-word tests when the first word is a valid test\n * Deprecate the `spaceless` filter\n * Deprecate some internal methods from `Parser`: `getBlockStack()`, `hasBlock()`, `getBlock()`, `hasMacro()`, `hasTraits()`, `getParent()`\n * Deprecate passing `null` to `Twig\\Parser::setParent()`\n * Update `Node::__toString()` to include the node tag if set\n * Add support for integers in methods of `Twig\\Node\\Node` that take a Node name\n * Deprecate not passing a `BodyNode` instance as the body of a `ModuleNode` or `MacroNode` constructor\n * Deprecate returning \"null\" from \"TokenParserInterface::parse()\".\n * Deprecate `OptimizerNodeVisitor::OPTIMIZE_TEXT_NODES`\n * Fix performance regression when `use_yield` is `false` (which is the default)\n * Improve compatibility when `use_yield` is `false` (as extensions still using `echo` will work as is)\n * Accept colons (`:`) in addition to equals (`=`) to separate argument names and values in named arguments\n * Add the `html_cva` function (in the HTML extra package)\n * Add support for named arguments to the `block` and `attribute` functions\n * Throw a SyntaxError exception at compile time when a Twig callable has not the minimum number of required arguments\n * Add a `CallableArgumentsExtractor` class\n * Deprecate passing a name to `FunctionExpression`, `FilterExpression`, and `TestExpression`;\n   pass a `TwigFunction`, `TwigFilter`, or `TestFilter` instead\n * Deprecate all Twig callable attributes on `FunctionExpression`, `FilterExpression`, and `TestExpression`\n * Deprecate the `filter` node of `FilterExpression`\n * Add the notion of Twig callables (functions, filters, and tests)\n * Bump minimum PHP version to 8.0\n * Fix integration tests when a test has more than one data/expect section and deprecations\n * Add the `enum_cases` function\n\n# 3.11.2 (2024-11-06)\n\n * [BC BREAK] Fix a security issue in the sandbox mode allowing an attacker to call attributes on Array-like objects\n   They are now checked via the property policy\n * Fix a security issue in the sandbox mode allowing an attacker to be able to call `toString()`\n   under some circumstances on an object even if the `__toString()` method is not allowed by the security policy\n\n# 3.11.1 (2024-09-10)\n\n * Fix a security issue when an included sandboxed template has been loaded before without the sandbox context\n\n# 3.11.0 (2024-08-08)\n\n * Deprecate `OptimizerNodeVisitor::OPTIMIZE_RAW_FILTER`\n * Add `Twig\\Cache\\ChainCache` and `Twig\\Cache\\ReadOnlyFilesystemCache`\n * Add the possibility to deprecate attributes and nodes on `Node`\n * Add the possibility to add a package and a version to the `deprecated` tag\n * Add the possibility to add a package for filter/function/test deprecations\n * Mark `ConstantExpression` as being `@final`\n * Add the `find` filter\n * Fix optimizer mode validation in `OptimizerNodeVisitor`\n * Add the possibility to yield from a generator in `PrintNode`\n * Add the `shuffle` filter\n * Add the `singular` and `plural` filters in `StringExtension`\n * Deprecate the second argument of `Twig\\Node\\Expression\\CallExpression::compileArguments()`\n * Deprecate `Twig\\ExpressionParser\\parseHashExpression()` in favor of\n   `Twig\\ExpressionParser::parseMappingExpression()`\n * Deprecate `Twig\\ExpressionParser\\parseArrayExpression()` in favor of\n   `Twig\\ExpressionParser::parseSequenceExpression()`\n * Add `sequence` and `mapping` tests\n * Deprecate `Twig\\Node\\Expression\\NameExpression::isSimple()` and\n    `Twig\\Node\\Expression\\NameExpression::isSpecial()`\n\n# 3.10.3 (2024-05-16)\n\n * Fix missing ; in generated code\n\n# 3.10.2 (2024-05-14)\n\n * Fix support for the deprecated escaper signature\n\n# 3.10.1 (2024-05-12)\n\n * Fix BC break on escaper extension\n * Fix constant return type\n\n# 3.10.0 (2024-05-11)\n\n * Make `CoreExtension::formatDate`, `CoreExtension::convertDate`, and\n   `CoreExtension::formatNumber` part of the public API\n * Add `needs_charset` option for filters and functions\n * Extract the escaping logic from the `EscaperExtension` class to a new\n   `EscaperRuntime` class.\n\n   The following methods from ``Twig\\\\Extension\\\\EscaperExtension`` are\n   deprecated: ``setEscaper()``, ``getEscapers()``, ``setSafeClasses``,\n   ``addSafeClasses()``. Use the same methods on the\n   ``Twig\\\\Runtime\\\\EscaperRuntime`` class instead.\n  * Fix capturing output from extensions that still use echo\n  * Fix a PHP warning in the Lexer on malformed templates\n  * Fix blocks not available under some circumstances\n  * Synchronize source context in templates when setting a Node on a Node\n\n# 3.9.3 (2024-04-18)\n\n * Add missing `twig_escape_filter_is_safe` deprecated function\n * Fix yield usage with CaptureNode\n * Add missing unwrap call when using a TemplateWrapper instance internally\n * Ensure Lexer is initialized early on\n\n# 3.9.2 (2024-04-17)\n\n * Fix usage of display_end hook\n\n# 3.9.1 (2024-04-17)\n\n * Fix missing `$blocks` variable in `CaptureNode`\n\n# 3.9.0 (2024-04-16)\n\n * Add support for PHP 8.4\n * Deprecate AbstractNodeVisitor\n * Deprecate passing Template to Environment::resolveTemplate(), Environment::load(), and Template::loadTemplate()\n * Add a new \"yield\" mode for output generation;\n   Node implementations that use \"echo\" or \"print\" should use \"yield\" instead;\n   all Node implementations should be flagged with `#[YieldReady]` once they've been made ready for \"yield\";\n   the \"use_yield\" Environment option can be turned on when all nodes have been made `#[YieldReady]`;\n   \"yield\" will be the only strategy supported in the next major version\n * Add return type for Symfony 7 compatibility\n * Fix premature loop exit in Security Policy lookup of allowed methods/properties\n * Deprecate all internal extension functions in favor of methods on the extension classes\n * Mark all extension functions as @internal\n * Add SourcePolicyInterface to selectively enable the Sandbox based on a template's Source\n * Throw a proper Twig exception when using cycle on an empty array\n\n# 3.8.0 (2023-11-21)\n\n * Catch errors thrown during template rendering\n * Fix IntlExtension::formatDateTime use of date formatter prototype\n * Fix premature loop exit in Security Policy lookup of allowed methods/properties\n * Remove NumberFormatter::TYPE_CURRENCY (deprecated in PHP 8.3)\n * Restore return type annotations\n * Allow Symfony 7 packages to be installed\n * Deprecate `twig_test_iterable` function. Use the native `is_iterable` instead.\n\n# 3.7.1 (2023-08-28)\n\n * Fix some phpdocs\n\n# 3.7.0 (2023-07-26)\n\n * Add support for the ...spread operator on arrays and hashes\n\n# 3.6.1 (2023-06-08)\n\n * Suppress some native return type deprecation messages\n\n# 3.6.0 (2023-05-03)\n\n * Allow psr/container 2.0\n * Add the new PHP 8.0 IntlDateFormatter::RELATIVE_* constants for date formatting\n * Make the Lexer initialize itself lazily\n\n# 3.5.1 (2023-02-08)\n\n * Arrow functions passed to the \"reduce\" filter now accept the current key as a third argument\n * Restores the leniency of the matches twig comparison\n * Fix error messages in sandboxed mode for \"has some\" and \"has every\"\n\n# 3.5.0 (2022-12-27)\n\n * Make Twig\\ExpressionParser non-internal\n * Add \"has some\" and \"has every\" operators\n * Add Compile::reset()\n * Throw a better runtime error when the \"matches\" regexp is not valid\n * Add \"twig *_names\" intl functions\n * Fix optimizing closures callbacks\n * Add a better exception when getting an undefined constant via `constant`\n * Fix `if` nodes when outside of a block and with an empty body\n\n# 3.4.3 (2022-09-28)\n\n * Fix a security issue on filesystem loader (possibility to load a template outside a configured directory)\n\n# 3.4.2 (2022-08-12)\n\n * Allow inherited magic method to still run with calling class\n * Fix CallExpression::reflectCallable() throwing TypeError\n * Fix typo in naming (currency_code)\n\n# 3.4.1 (2022-05-17)\n\n* Fix optimizing non-public named closures\n\n# 3.4.0 (2022-05-22)\n\n * Add support for named closures\n\n# 3.3.10 (2022-04-06)\n\n * Enable bytecode invalidation when auto_reload is enabled\n\n# 3.3.9 (2022-03-25)\n\n * Fix custom escapers when using multiple Twig environments\n * Add support for \"constant('class', object)\"\n * Do not reuse internally generated variable names during parsing\n\n# 3.3.8 (2022-02-04)\n\n * Fix a security issue when in a sandbox: the `sort` filter must require a Closure for the `arrow` parameter\n * Fix deprecation notice on `round`\n * Fix call to deprecated `convertToHtml` method\n\n# 3.3.7 (2022-01-03)\n\n* Allow more null support when Twig expects a string (for better 8.1 support)\n* Only use Commonmark extensions if markdown enabled\n\n# 3.3.6 (2022-01-03)\n\n* Only use Commonmark extensions if markdown enabled\n\n# 3.3.5 (2022-01-03)\n\n* Allow CommonMark extensions to easily be added\n* Allow null when Twig expects a string (for better 8.1 support)\n* Make some performance optimizations\n* Allow Symfony translation contract v3+\n\n# 3.3.4 (2021-11-25)\n\n * Bump minimum supported Symfony component versions\n * Fix a deprecated message\n\n# 3.3.3 (2021-09-17)\n\n * Allow Symfony 6\n * Improve compatibility with PHP 8.1\n * Explicitly specify the encoding for mb_ord in JS escaper\n\n# 3.3.2 (2021-05-16)\n\n * Revert \"Throw a proper exception when a template name is an absolute path (as it has never been supported)\"\n\n# 3.3.1 (2021-05-12)\n\n * Fix PHP 8.1 compatibility\n * Throw a proper exception when a template name is an absolute path (as it has never been supported)\n\n# 3.3.0 (2021-02-08)\n\n * Fix macro calls in a \"cache\" tag\n * Add the slug filter\n * Allow extra bundle to be compatible with Twig 2\n\n# 3.2.1 (2021-01-05)\n\n * Fix extra bundle compat with older versions of Symfony\n\n# 3.2.0 (2021-01-05)\n\n * Add the Cache extension in the \"extra\" repositories: \"cache\" tag\n * Add \"registerUndefinedTokenParserCallback\"\n * Mark built-in node visitors as @internal\n * Fix \"odd\" not working for negative numbers\n\n# 3.1.1 (2020-10-27)\n\n * Fix \"include(template_from_string())\"\n\n# 3.1.0 (2020-10-21)\n\n * Fix sandbox support when using \"include(template_from_string())\"\n * Make round brackets optional for one argument tests like \"same as\" or \"divisible by\"\n * Add support for ES2015 style object initialisation shortcut { a } is the same as { 'a': a }\n\n# 3.0.5 (2020-08-05)\n\n * Fix twig_compare w.r.t. whitespace trimming\n * Fix sandbox not disabled if syntax error occurs within {% sandbox %} tag\n * Fix a regression when not using a space before an operator\n * Restrict callables to closures in filters\n * Allow trailing commas in argument lists (in calls as well as definitions)\n\n# 3.0.4 (2020-07-05)\n\n * Fix comparison operators\n * Fix options not taken into account when using \"Michelf\\MarkdownExtra\"\n * Fix \"Twig\\Extra\\Intl\\IntlExtension::getCountryName()\" to accept \"null\" as a first argument\n * Throw exception in case non-Traversable data is passed to \"filter\"\n * Fix context optimization on PHP 7.4\n * Fix PHP 8 compatibility\n * Fix ambiguous syntax parsing\n\n# 3.0.3 (2020-02-11)\n\n * Add a check to ensure that iconv() is defined\n\n# 3.0.2 (2020-02-11)\n\n * Avoid exceptions when an intl resource is not found\n * Fix implementation of case-insensitivity for method names\n\n# 3.0.1 (2019-12-28)\n\n * fixed Symfony 5.0 support for the HTML extra extension\n\n# 3.0.0 (2019-11-15)\n\n * fixed number formatter in Intl extra extension when using a formatter prototype\n\n# 3.0.0-BETA1 (2019-11-11)\n\n * removed the \"if\" condition support on the \"for\" tag\n * made the in, <, >, <=, >=, ==, and != operators more strict when comparing strings and integers/floats\n * removed the \"filter\" tag\n * added type hints everywhere\n * changed Environment::resolveTemplate() to always return a TemplateWrapper instance\n * removed Template::__toString()\n * removed Parser::isReservedMacroName()\n * removed SanboxedPrintNode\n * removed Node::setTemplateName()\n * made classes marked as \"@final\" final\n * removed InitRuntimeInterface, ExistsLoaderInterface, and SourceContextLoaderInterface\n * removed the \"spaceless\" tag\n * removed Twig\\Environment::getBaseTemplateClass() and Twig\\Environment::setBaseTemplateClass()\n * removed the \"base_template_class\" option on Twig\\Environment\n * bumped minimum PHP version to 7.2\n * removed PSR-0 classes\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.48046875,
          "content": "Copyright (c) 2009-present by the Twig Team.\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimer in the documentation\n      and/or other materials provided with the distribution.\n    * Neither the name of Twig nor the names of its contributors\n      may be used to endorse or promote products derived from this software\n      without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 0.7236328125,
          "content": "Twig, the flexible, fast, and secure template language for PHP\n==============================================================\n\nTwig is a template language for PHP.\n\nTwig uses a syntax similar to the Django and Jinja template languages which\ninspired the Twig runtime environment.\n\nSponsors\n--------\n\n.. raw:: html\n\n    <a href=\"https://docs.blackfire.io/introduction?utm_source=twig&utm_medium=github_readme&utm_campaign=logo\">\n        <img src=\"https://static.blackfire.io/assets/intemporals/logo/png/blackfire-io_secondary_horizontal_transparent.png?1\" width=\"255px\" alt=\"Blackfire.io\">\n    </a>\n\nMore Information\n----------------\n\nRead the `documentation`_ for more information.\n\n.. _documentation: https://twig.symfony.com/documentation\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.458984375,
          "content": "{\n    \"name\": \"twig/twig\",\n    \"type\": \"library\",\n    \"description\": \"Twig, the flexible, fast, and secure template language for PHP\",\n    \"keywords\": [\"templating\"],\n    \"homepage\": \"https://twig.symfony.com\",\n    \"license\": \"BSD-3-Clause\",\n    \"minimum-stability\": \"dev\",\n    \"authors\": [\n        {\n            \"name\": \"Fabien Potencier\",\n            \"email\": \"fabien@symfony.com\",\n            \"homepage\": \"http://fabien.potencier.org\",\n            \"role\": \"Lead Developer\"\n        },\n        {\n            \"name\": \"Twig Team\",\n            \"role\": \"Contributors\"\n        },\n        {\n            \"name\": \"Armin Ronacher\",\n            \"email\": \"armin.ronacher@active-4.com\",\n            \"role\": \"Project Founder\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.0.2\",\n        \"symfony/deprecation-contracts\": \"^2.5|^3\",\n        \"symfony/polyfill-mbstring\": \"^1.3\",\n        \"symfony/polyfill-ctype\": \"^1.8\",\n        \"symfony/polyfill-php81\": \"^1.29\"\n    },\n    \"require-dev\": {\n        \"symfony/phpunit-bridge\": \"^5.4.9|^6.4|^7.0\",\n        \"psr/container\": \"^1.0|^2.0\",\n        \"phpstan/phpstan\": \"^2.0\"\n    },\n    \"autoload\": {\n        \"files\": [\n            \"src/Resources/core.php\",\n            \"src/Resources/debug.php\",\n            \"src/Resources/escaper.php\",\n            \"src/Resources/string_loader.php\"\n        ],\n        \"psr-4\" : {\n            \"Twig\\\\\" : \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\" : {\n            \"Twig\\\\Tests\\\\\" : \"tests/\"\n        }\n    }\n}\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "extra",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan-baseline.neon",
          "type": "blob",
          "size": 1.1328125,
          "content": "parameters:\n\tignoreErrors:\n\t\t- # The method is dynamically generated by the CheckSecurityNode\n\t\t\tmessage: '#^Call to an undefined method Twig\\\\Template\\:\\:checkSecurity\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Extension/CoreExtension.php\n\n\t\t- # Avoid BC-break\n\t\t\tmessage: '#^Constructor of class Twig\\\\Node\\\\ForNode has an unused parameter \\$ifexpr\\.$#'\n\t\t\tidentifier: constructor.unusedParameter\n\t\t\tcount: 1\n\t\t\tpath: src/Node/ForNode.php\n\n\t\t- # 2 parameters will be required\n\t\t\tmessage: '#^Method Twig\\\\Node\\\\IncludeNode\\:\\:addGetTemplate\\(\\) invoked with 2 parameters, 1 required\\.$#'\n\t\t\tidentifier: arguments.count\n\t\t\tcount: 1\n\t\t\tpath: src/Node/IncludeNode.php\n\n\t\t- # int|string will be supported in 4.x\n\t\t\tmessage: '#^PHPDoc tag @param for parameter $name with type int|string is not subtype of native type string\\.$#'\n\t\t\tidentifier: parameter.phpDocType\n\t\t\tcount: 5\n\t\t\tpath: src/Node/Node.php\n\n\t\t- # Adding 0 to the string representation of a number is valid and what we want here\n\t\t\tmessage: '#^Binary operation \"\\+\" between 0 and string results in an error\\.$#'\n\t\t\tidentifier: binaryOp.invalid\n\t\t\tcount: 1\n\t\t\tpath: src/Lexer.php\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.123046875,
          "content": "includes:\n    - phpstan-baseline.neon\n\nparameters:\n    level: 3\n    paths:\n        - src\n    excludePaths:\n        - src/Test\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.71875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" backupGlobals=\"false\" backupStaticAttributes=\"false\" colors=\"true\" convertErrorsToExceptions=\"true\" convertNoticesToExceptions=\"true\" convertWarningsToExceptions=\"true\" processIsolation=\"false\" stopOnFailure=\"false\" bootstrap=\"vendor/autoload.php\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.6/phpunit.xsd\">\n  <coverage/>\n  <testsuites>\n    <testsuite name=\"Twig Test Suite\">\n      <directory>./tests/</directory>\n    </testsuite>\n  </testsuites>\n  <php>\n    <ini name=\"error_reporting\" value=\"-1\" />\n  </php>\n  <listeners>\n    <listener class=\"Symfony\\Bridge\\PhpUnit\\SymfonyTestsListener\" />\n  </listeners>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}