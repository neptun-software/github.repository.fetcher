{
  "metadata": {
    "timestamp": 1736712313426,
    "page": 118,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "doctrine/event-manager",
      "stars": 5963,
      "defaultBranch": "2.0.x",
      "files": [
        {
          "name": ".doctrine-project.json",
          "type": "blob",
          "size": 0.78515625,
          "content": "{\n    \"active\": true,\n    \"name\": \"Event Manager\",\n    \"slug\": \"event-manager\",\n    \"docsSlug\": \"doctrine-event-manager\",\n    \"versions\": [\n        {\n            \"name\": \"2.0\",\n            \"branchName\": \"2.0.x\",\n            \"slug\": \"latest\",\n            \"current\": true,\n            \"aliases\": [\n                \"current\",\n                \"stable\"\n            ]\n        },\n        {\n            \"name\": \"1.2\",\n            \"branchName\": \"1.2.x\",\n            \"slug\": \"1.2\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"1.1\",\n            \"branchName\": \"1.1.x\",\n            \"slug\": \"1.1\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"1.0\",\n            \"branchName\": \"1.0\",\n            \"slug\": \"1.0\",\n            \"maintained\": false\n        }\n    ]\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2783203125,
          "content": "/docs export-ignore\n/tests export-ignore\n/.doctrine-project.json export-ignore\n/.gitattributes export-ignore\n/.github export-ignore\n/.gitignore export-ignore\n/.scrutinizer.yml export-ignore\n/phpunit.xml.dist export-ignore\n/phpcs.xml.dist export-ignore\n/phpstan.neon.dist export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1240234375,
          "content": "/vendor/\n/composer.lock\n/phpunit.xml\n/phpcs.xml\n/.phpcs-cache\n/.phpunit.cache\n\n# phpDocumentor/guides output directory\n/output\n"
        },
        {
          "name": ".scrutinizer.yml",
          "type": "blob",
          "size": 0.990234375,
          "content": "build:\n    nodes:\n        analysis:\n            environment:\n                php:\n                    version: 7.1\n            cache:\n                disabled: false\n                directories:\n                    - ~/.composer/cache\n            project_setup:\n                override: true\n            tests:\n                override:\n                    - php-scrutinizer-run\n                    - phpcs-run\n    dependencies:\n        override:\n            - composer install -noa\n\ntools:\n    external_code_coverage:\n        timeout: 600\n\nbuild_failure_conditions:\n    - 'elements.rating(<= C).new.exists'                        # No new classes/methods with a rating of C or worse allowed\n    - 'issues.label(\"coding-style\").new.exists'                 # No new coding style issues allowed\n    - 'issues.severity(>= MAJOR).new.exists'                    # New issues of major or higher severity\n    - 'project.metric_change(\"scrutinizer.test_coverage\", < 0)' # Code Coverage decreased from previous inspection\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "Copyright (c) 2006-2015 Doctrine Project\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.8203125,
          "content": "# Doctrine Event Manager\n\n[![Build Status](https://github.com/doctrine/event-manager/workflows/Continuous%20Integration/badge.svg)](https://github.com/doctrine/event-manager/actions)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/doctrine/event-manager/badges/quality-score.png?b=1.2.x)](https://scrutinizer-ci.com/g/doctrine/event-manager/?branch=1.2.x)\n[![Code Coverage](https://scrutinizer-ci.com/g/doctrine/event-manager/badges/coverage.png?b=1.2.x)](https://scrutinizer-ci.com/g/doctrine/event-manager/?branch=1.2.x)\n\nThe Doctrine Event Manager is a library that provides a simple event system.\n\n## More resources:\n\n* [Website](https://www.doctrine-project.org/)\n* [Documentation](https://www.doctrine-project.org/projects/doctrine-event-manager/en/latest/)\n* [Downloads](https://github.com/doctrine/event-manager/releases)\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 0.59765625,
          "content": "# Upgrade to 2.0\n\n## Made the `$event` parameter of `EventManager::getListeners()` mandatory\n\nWhen calling `EventManager::getListeners()` you need to specify the event that\nyou want to fetch the listeners for. Call `getAllListeners()` instead if you\nwant to access the listeners of all events.\n\n# Upgrade to 1.2\n\n## Deprecated calling `EventManager::getListeners()` without an event name\n\nWhen calling `EventManager::getListeners()` without an event name, all\nlisteners were returned, keyed by event name. A new method `getAllListeners()`\nhas been added to provide this functionality. It should be used instead.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.6982421875,
          "content": "{\n    \"name\": \"doctrine/event-manager\",\n    \"description\": \"The Doctrine Event Manager is a simple PHP event system that was built to be used with the various Doctrine projects.\",\n    \"license\": \"MIT\",\n    \"type\": \"library\",\n    \"keywords\": [\n        \"events\",\n        \"event\",\n        \"event dispatcher\",\n        \"event manager\",\n        \"event system\"\n    ],\n    \"authors\": [\n        {\n            \"name\": \"Guilherme Blanco\",\n            \"email\": \"guilhermeblanco@gmail.com\"\n        },\n        {\n            \"name\": \"Roman Borschel\",\n            \"email\": \"roman@code-factory.org\"\n        },\n        {\n            \"name\": \"Benjamin Eberlei\",\n            \"email\": \"kontakt@beberlei.de\"\n        },\n        {\n            \"name\": \"Jonathan Wage\",\n            \"email\": \"jonwage@gmail.com\"\n        },\n        {\n            \"name\": \"Johannes Schmitt\",\n            \"email\": \"schmittjoh@gmail.com\"\n        },\n        {\n            \"name\": \"Marco Pivetta\",\n            \"email\": \"ocramius@gmail.com\"\n        }\n    ],\n    \"homepage\": \"https://www.doctrine-project.org/projects/event-manager.html\",\n    \"require\": {\n        \"php\": \"^8.1\"\n    },\n    \"require-dev\": {\n        \"doctrine/coding-standard\": \"^12\",\n        \"phpdocumentor/guides-cli\": \"^1.4\",\n        \"phpstan/phpstan\": \"^1.8.8\",\n        \"phpunit/phpunit\": \"^10.5\"\n    },\n    \"conflict\": {\n        \"doctrine/common\": \"<2.9\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Doctrine\\\\Common\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Doctrine\\\\Tests\\\\Common\\\\\": \"tests\"\n        }\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"dealerdirect/phpcodesniffer-composer-installer\": true\n        },\n        \"sort-packages\": true\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpcs.xml.dist",
          "type": "blob",
          "size": 1.25390625,
          "content": "<?xml version=\"1.0\"?>\n<ruleset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"vendor/squizlabs/php_codesniffer/phpcs.xsd\">\n    <arg name=\"basepath\" value=\".\"/>\n    <arg name=\"extensions\" value=\"php\"/>\n    <arg name=\"parallel\" value=\"80\"/>\n    <arg name=\"cache\" value=\".phpcs-cache\"/>\n    <arg name=\"colors\"/>\n\n    <!-- Ignore warnings, show progress of the run and show sniff names -->\n    <arg value=\"nps\"/>\n\n    <config name=\"php_version\" value=\"80100\"/>\n\n    <file>src</file>\n    <file>tests</file>\n\n    <rule ref=\"Doctrine\" />\n\n    <rule ref=\"SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint\">\n        <!-- This interface is commonly implemented by userland code.\n             We omit the return type to ease the migration to 2.0 -->\n        <exclude-pattern>src/EventSubscriber.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"PSR1.Classes.ClassDeclaration.MultipleClasses\">\n        <exclude-pattern>tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Squiz.Classes.ClassFileName.NoMatch\">\n        <exclude-pattern>tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Squiz.Commenting.FunctionComment.WrongStyle\">\n        <exclude-pattern>tests/EventManagerTest.php</exclude-pattern>\n    </rule>\n</ruleset>\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.0546875,
          "content": "parameters:\n  level: 9\n  paths:\n    - src/\n    - tests/\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.5927734375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n         colors=\"true\"\n         beStrictAboutOutputDuringTests=\"true\"\n         bootstrap=\"./vendor/autoload.php\"\n         cacheDirectory=\".phpunit.cache\"\n>\n    <testsuites>\n        <testsuite name=\"Doctrine Event Manager Test Suite\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n\n    <source>\n        <include>\n            <directory>src</directory>\n        </include>\n    </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}