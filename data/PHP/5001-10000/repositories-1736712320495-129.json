{
  "metadata": {
    "timestamp": 1736712320495,
    "page": 129,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "larastan/larastan",
      "stars": 5684,
      "defaultBranch": "3.x",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.533203125,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nblock_comment_start = /*\nblock_comment = *\nblock_comment_end = */\n\n[*.md]\n; Skip indent check because of code blocks\nindent_size = unset\ntrim_trailing_whitespace = false\n\n[{*.json,*.yml}]\nindent_size = 2\n\n[tests/laravel-test.sh]\n; Contains here documents\nindent_size = unset\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.0009765625,
          "content": "#\n# Exclude these files from release archives.\n# This will also make them unavailable when using Composer with `--prefer-dist`.\n# https://git-scm.com/docs/gitattributes\n#\n/.github              export-ignore\n/docs                 export-ignore\n/e2e                  export-ignore\n/tests                export-ignore\n.editorconfig         export-ignore\n.gitattributes        export-ignore\n.gitignore            export-ignore\n.styleci.yml          export-ignore\nCHANGELOG.md          export-ignore\nCONTRIBUTING.md       export-ignore\nREADME.md             export-ignore\nRELEASE.md            export-ignore\nUPGRADE.md            export-ignore\nphpstan.neon.dist     export-ignore\nphpstan-baseline.neon export-ignore\nphpunit.xml.dist      export-ignore\nphpunit-bootstrap.php export-ignore\n\n#\n# Auto detect text files and perform LF normalization\n#\n* text=auto\n\n#\n# The above will handle all files NOT found below\n#\n*.md text\n*.php text\n*.inc text\n\n#\n# PHP syntax highlight for stub files\n#\n*.stub             linguist-language=PHP\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0771484375,
          "content": "/.idea/\ncomposer.lock\n/vendor/\ncoverage.xml\n.phpunit.result.cache\n.phpcs-cache\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.9912109375,
          "content": "# CONTRIBUTING\n\nContributions are welcome, and are accepted via pull requests.\nPlease review these guidelines before submitting any pull requests.\n\n## Process\n\n1. Fork the project\n1. Create a new branch\n1. Code, test, commit and push\n1. Open a pull request detailing your changes. Make sure to follow the [template](.github/PULL_REQUEST_TEMPLATE.md)\n\n## Guidelines\n\n* Please follow the [PSR-2 Coding Style Guide](http://www.php-fig.org/psr/psr-2), enforced by [StyleCI](https://styleci.io).\n* Send a coherent commit history, making sure each individual commit in your pull request is meaningful.\n* You may need to [rebase](https://git-scm.com/book/en/v2/Git-Branching-Rebasing) to avoid merge conflicts.\n* Please remember that we follow [SemVer](http://semver.org).\n\n## Setup\n\nClone your fork, then install all dependencies:\n\n    composer update\n\n## Tests\n\nRun code style checks:\n\n    composer test:cs\n\nRun all tests:\n\n    composer test\n\nCode analysis:\n\n    composer test:types\n\nUnit tests:\n\n    composer test:unit\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.1025390625,
          "content": "The MIT License (MIT)\n\nCopyright (c) Can Vural <can9119@gmail.com>, Nuno Maduro <enunomaduro@gmail.com>,\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.14453125,
          "content": "<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/larastan/larastan/master/docs/logo.png\" alt=\"Larastan Logo\" width=\"300\">\n    <br><br>\n    <img src=\"https://raw.githubusercontent.com/larastan/larastan/master/docs/example.png\" alt=\"Larastan Example\" height=\"300\">\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/larastan/larastan/actions\"><img src=\"https://github.com/larastan/larastan/actions/workflows/tests.yml/badge.svg\" alt=\"Build Status\"></a>\n  <a href=\"https://packagist.org/packages/larastan/larastan/stats\"><img src=\"https://poser.pugx.org/larastan/larastan/d/total.svg\" alt=\"Total Downloads\"></a>\n  <a href=\"https://packagist.org/packages/larastan/larastan\"><img src=\"https://poser.pugx.org/larastan/larastan/v/stable.svg\" alt=\"Latest Version\"></a>\n  <a href=\"https://github.com/larastan/larastan/blob/master/LICENSE.md\"><img src=\"https://poser.pugx.org/larastan/larastan/license.svg\" alt=\"License\"></a>\n</p>\n\n------\n\n## ⚗️ About Larastan\n\nLarastan was created by [Can Vural](https://github.com/canvural) and [Nuno Maduro](https://github.com/nunomaduro), got artwork designed by [@Caneco](http://github.com/caneco), is maintained by [Can Vural](https://github.com/canvural) and [Viktor Szépe](https://github.com/szepeviktor), and is a [PHPStan](https://phpstan.org/) extension for Laravel. Larastan focuses on **finding errors in your code**. It catches whole classes of bugs even **before you write tests** for the code.\n\n- Adds static typing to Laravel to improve developer productivity and **code quality**\n- Supports most of [Laravel](https://laravel.com)'s **beautiful magic**\n- Discovers bugs in your code\n\n> While by definition, \"static analysis\" doesn't load any of your application's code. Larastan boots your application's container, so it can resolve types that are only possible to compute at runtime. That's why we use the term \"code analysis\" instead of \"static analysis\".\n\n### Supported Laravel versions\n| Laravel Version  | Larastan Version |\n|------------------|------------------|\n| < 9              | 1.x              |\n| \\> 9.0 && <11.15 | 2.x              |\n| 11.15+           | 3.0+             |\n\n## ✨ Getting Started In 3 Steps\n\n> **Requires:**\n- **[PHP 8.2+](https://php.net/releases/)**\n- **[Laravel 11.15+](https://github.com/laravel/laravel)**\n\n**1**: First, you may use [Composer](https://getcomposer.org) to install Larastan as a development dependency into your Laravel project:\n\n```bash\ncomposer require --dev \"larastan/larastan:^3.0\"\n```\n\n> Using Larastan for analysing Laravel packages? You may need to install `orchestra/testbench`.\n\n**2**: Then, create a `phpstan.neon` or `phpstan.neon.dist` file in the root of your application. It might look like this:\n\n```\nincludes:\n    - vendor/larastan/larastan/extension.neon\n    - vendor/nesbot/carbon/extension.neon\n\nparameters:\n\n    paths:\n        - app/\n\n    # Level 10 is the highest level\n    level: 5\n\n#    ignoreErrors:\n#        - '#PHPDoc tag @var#'\n#\n#    excludePaths:\n#        - ./*/*/FileToBeExcluded.php\n```\n\nFor all available options, please take a look at the PHPStan documentation: **https://phpstan.org/config-reference**\n\n**3**: Finally, you may start analyzing your code using the phpstan console command:\n\n```bash\n./vendor/bin/phpstan analyse\n```\n\nIf you are getting the error `Allowed memory size exhausted`, then you can use the `--memory-limit` option fix the problem:\n\n```bash\n./vendor/bin/phpstan analyse --memory-limit=2G\n```\n\n## Ignoring errors\n\nIgnoring a specific error can be done either with a php comment or in the configuration file: \n\n```php\n// @phpstan-ignore-next-line\n$test->badMethod();\n\n$test->badMethod(); // @phpstan-ignore-line\n```\n\nWhen ignoring errors in PHPStan's configuration file, they are ignored by writing a regex based on error messages:\n\n```yaml\nparameters:\n    ignoreErrors:\n        - '#Call to an undefined method .*badMethod\\(\\)#'\n```\n\n### Baseline file\n\nIn older codebases it might be hard to spend the time fixing all the code to pass a high PHPStan Level. \n\nTo get around this a baseline file can be generated. The baseline file will create a configuration file with all of the current errors, so new code can be written following a higher standard than the old code. ([PHPStan Docs](https://phpstan.org/user-guide/baseline))\n\n```bash\n./vendor/bin/phpstan analyse --generate-baseline\n```\n\n## Rules\n\nA list of configurable rules specific to Laravel can be found [here](docs/rules.md).\n\n\n## Features\n\nA list of Larastan features can be found [here](docs/features.md).\n\n## Custom PHPDoc types\n\nA list of PHPDoc types specific to Larastan can be found [here](docs/custom-types.md).\n\n## Custom PHPStan config parameters\n\nA list of custom config parameters that you can use in your PHPStan config file can be found [here](docs/custom-config-parameters.md).\n\n## Errors To Ignore\n\nSome parts of Laravel are currently too magical for Larastan/PHPStan to understand.\nWe listed common [errors to ignore](docs/errors-to-ignore.md), add them as needed\n\n## 👊🏻 Contributing\n\nThank you for considering contributing to Larastan. All the contribution guidelines are mentioned [here](CONTRIBUTING.md).\n\n## 📖 License\n\nLarastan is an open-sourced software licensed under the [MIT license](LICENSE.md).\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 0.7841796875,
          "content": "# Release process\n\nUpon releasing a new version there's some checks and updates to be made:\n\n- Clear your local repository with: `git add . && git reset --hard && git checkout master`\n- Check the contents on `https://github.com/larastan/larastan/compare/{latest_version}...master`\n  and update the [changelog](/CHANGELOG.md) file with the modifications on this release\n  > Note: make sure that there are no breaking changes and you may use `git tag --list` to check the latest release\n- Commit the `CHANGELOG.md` with the message: `git commit -m \"docs: bumps version to {new_version}\"`\n- `git push`\n- `git tag {new_version}`\n- `git push --tags`\n- Create a release on GitHub https://github.com/larastan/larastan/releases\n- Make a tweet about the release attributing credits to the external collaborators\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 13,
          "content": "# Upgrade Guide\n\n## Upgrading to `3.0` from `2.x`\n\nThis is a new major release with lots of breaking changes. \n\n**Please first read PHPStan's 2.0 upgrade guide [here](https://github.com/phpstan/phpstan/blob/2.0.x/UPGRADING.md) carefully.**\n\n### Correct return types for model relation methods\n######  Likelihood Of Impact: High\n\nNormally PHPStan warns the users when a return type of method does not provide its generic types. For example, the following code will produce a PHPStan error:\n\n```php\nclass User extends Model\n{\n    public function posts(): HasMany\n    {\n        return $this->hasMany(Post::class);\n    }\n}\n\n// Method User::posts() return type with generic class HasMany does not specify its types: TRelatedModel, TDeclaringModel\n```\n\nIn the previous versions of Larastan, in this case Larastan would parse the model file and read the method body to understand the generic types of the relation. But this approach is slow (because it requires parsing the file) and the maintenance of this feature is hard. So in this version, Larastan will not parse the method body to understand the generic types of the relation. Instead, you need to provide the correct generic types in the return type of the relation method. Here is how you can fix the above example:\n\n```php\nclass User extends Model\n{\n    /**\n     * @return HasMany<Post, $this>\n     */\n    public function posts(): HasMany\n    {\n        return $this->hasMany(Post::class);\n    }\n}\n```\n\nManually adding these annotations can be tedious. To help with this, we've created a [Rector](https://github.com/rectorphp/rector) rule that can automatically add them for you! You can use [this rule](https://github.com/driftingly/rector-laravel/blob/main/docs/rector_rules_overview.md#addgenericreturntypetorelationsrector) to automatically add the correct generic annotations. It detects your Laravel version and adds the appropriate generic types accordingly.\n\nIf you're not currently using Rector, or can't use it due to dependency conflicts, don't worry! We've also prepared a simple script that can run Rector for you without requiring a full installation.\n\nFirst install [`cpx`](https://cpx.dev/):\n```bash\ncomposer global require cpx/cpx\n```\n\nThen download [this script](https://gist.github.com/canvural/7385ec70d2719e9961886430fbb4798c) from the gist and run with:\n```bash\ncpx exec /path/to/script/cpx-rector-larastan-upgrade.php\n```\n\n### Template annotation renames\n######  Likelihood Of Impact: Low\n\nThese changes were made in Laravel itself, so here we needed to follow the same changes. If you were using any of the template annotations in your code, you need to update them as follows:\n\n- `TModelClass` annotation of the Eloquent Builder class is renamed to `TModel`.\n- `TChildModel` annotation of the relation classes is renamed to `TDeclaringModel`.\n\n### Code related to Carbon has been removed\n######  Likelihood Of Impact: Low\n\nLarastan 3.x removed some code that was handling some edge cases related to Carbon. This code is now removed because the official Carbon PHPStan extension can do the same things. If you are using `phpstan-extension-installer` in your project you are already using the Carbon PHPStan extensions and there is nothing else to do. If not, you can add `vendor/nesbot/carbon/extension.neon` to your `phpstan.neon` file to enable the Carbon PHPStan extension.\n\n### `checkPhpDocMissingReturn: false` config option removed\n######  Likelihood Of Impact: Low\nFor some historical reason Larastan was setting `checkPhpDocMissingReturn: false` config option. Now the option is removed from Larastan, it'll use the behaviour from PHPStan itself. If you want the old behaviour back you can add the option to your own config.\n\n### `noEnvCallsOutsideOfConfig` and `checkModelAppends` options are enabled by default\nStarting from Larastan 3.0 the `NoEnvCallsOutsideOfConfigRule` and `ModelAppendsRule` are enabled by default.\n\n### Removed `*.blade.php` from `excludePaths` config option\n######  Likelihood Of Impact: Low\nWe've removed `*.blade.php` from `excludePaths` config option. If you were analysing paths containing Blade files and now are getting errors for them you can add it back in your configuration via:\n```neon\nexcludePaths:\n    - *.blade.php\n```\n\n## Upgrading to `2.9.6` from `2.9.5`\n\nThis release adds support for Laravel 11 `casts` method. If you are using the `casts` method in your models, you will need to update the return type of the `casts` method to `array` in your model classes. Also, you'd need to provide the correct array shape for the return type. So that Larastan will recognize the model casts. Here is an example:\n\n```php\n/**\n * @return array{is_admin: 'boolean', meta: 'array'}\n */\npublic function casts(): array\n{\n    return [\n        'is_admin' => 'boolean',\n        'meta' => 'array',\n    ];\n}\n```\n\n## Upgrading to `2.9.2` from `2.9.0`\n\n- The UnusedViewsRule has been changed to specify the absolute path of the unused view, rather than the view name. This may mean that baselines will need regenerating to account for this change.\n\n## Upgrading to `2.7.0` from `2.6.5`\n\n### Organization Change\n\nStarting with Larastan 2.7.0, the Larastan repository will now be managed under the [Larastan](https://github.com/larastan) organization. To receive the latest updates, please modify your composer's Larastan entry as follows:\n\n```diff\n    \"require-dev\": {\n-        \"nunomaduro/larastan\": \"^2.6.0\",\n+        \"larastan/larastan\": \"^2.7.0\",\n    },\n```\n\nIf you are using the `includes` option in your `phpstan.neon` configuration file, please update it as well:\n\n```diff\nincludes:\n-    - ./vendor/nunomaduro/larastan/extension.neon\n+    - ./vendor/larastan/larastan/extension.neon\n```\n\n## Upgrading to `2.0.0` from `1.x`\n\n### Eloquent Collection now requires 2 generic types\n\nIn Larastan 1.x, Eloquent Collection was defined with only one generic type. Just the model type. But starting with Laravel 9, all collection stubs are now moved into the Laravel core. And as part of that migration process, the collection type is now defined with 2 generic types. First is collection item key, second is collection item value. So if you had a docblock like this `Collection<User>` now you should change it to `Collection<int, User>`.\n\n### Removed configuration `checkGenericClassInNonGenericObjectType: false` from default config\n\nIn Larastan 1.x, we set the `checkGenericClassInNonGenericObjectType` to `false` by default. In 2.0.0, this is removed from the config. If you want to keep the same behavior, you can set it to `false` in your config.\n\n## Upgrading to `0.7.11`\n\n### Laravel 8 Model Factory support\n\n`0.7.11` adds support for Laravel 8 model factory return types and methods. But there is one step you need to do before taking advantage of this.\n\nBecause `Factory` class is marked as generic now, you need to also specify this in your model factories.\n\nSo for example if you have `UserFactory` class, the following change needs to be made:\n```php\n<?php\n\n/** @extends Factory<User> */\nclass UserFactory extends Factory\n{\n    // ...\n}\n```\n\nSo general rule is that `@extends Factory<MODELNAME>` PHPDoc needs to be added to factory class, where `MODELNAME` is the model class name which this factory is using.\n\n## Upgrading to `0.7.0`\n\n### `databaseMigrationsPath` parameter is now an array\n\n`databaseMigrationsPath` parameter is changed to be an `array` from `string`. To allow multiple migration paths.\n\n## Upgrading to 0.6\n\nIn previous versions of Larastan, `reportUnmatchedIgnoredErrors` config value was set to `false` by Larastan. Larastan no longer ignores errors on your behalf. Here is how you can fix them yourself:\n\n### Result of function abort \\(void\\) is used\n\nStop `return`-ing abort.\n\n```diff\n-return abort(401);\n+abort(401);\n```\n\n### Call to an undefined method Illuminate\\\\Support\\\\HigherOrder\n\nLarastan still does not understand this particular magic, you can\n[ignore it yourself](docs/errors-to-ignore.md#higher-order-messages) for now.\n\n### Method App\\\\Exceptions\\\\Handler::render\\(\\) should return Illuminate\\\\Http\\\\Response but returns Symfony\\\\Component\\\\HttpFoundation\\\\Response\n\nFix the docblock.\n\n```diff\n-    * @return Illuminate\\Http\\Response|Symfony\\Component\\HttpFoundation\\Response\n+    * @return Symfony\\Component\\HttpFoundation\\Response\n     */\n    public function render($request, Exception $exception)\n```\n\n### Property App\\\\Http\\\\Middleware\\\\TrustProxies::\\$headers \\(string\\) does not accept default value of type int\n\nFix the docblock.\n\n```diff\n-    * @var string\n+    * @var int\n     */\n    protected $headers = Request::HEADER_X_FORWARDED_ALL;\n```\n\n## Upgrading to 0.5.8\n\n### Custom collections\nIf you are taking advantage of custom Eloquent Collections for your models, you have to mark your custom collection class as generic like so:\n```php\n/**\n * @template TModel\n * @extends Collection<TModel>\n */\nclass CustomCollection extends Collection\n{\n}\n```\nIf your IDE complains about the `template` or `extends` annotation you may also use the PHPStan specific annotations `@phpstan-template` and `@phpstan-extends`\n\nAlso in your model file where you are overriding the `newCollection` method, you have to specify the return type like so:\n\n```php\n/**\n * @param array<int, YourModel> $models\n *\n * @return CustomCollection<YourModel>\n */\npublic function newCollection(array $models = []): CustomCollection\n{\n    return new CustomCollection($models);\n}\n```\n\nIf your IDE complains about the return type annotation you may also use the PHPStan specific return type `@phpstan-return`\n\n## Upgrading to 0.5.6\n\n### Generic Relations\nEloquent relations are now generic classes. Internally, this makes couple of things easier and more flexible. In general it shouldn't affect your code. The only caveat is if you define your custom relations. If you do that, you have to mark your custom relation class as generic like so:\n\n```php\n/**\n * @template TRelatedModel of \\Illuminate\\Database\\Eloquent\\Model\n * @extends Relation<TRelatedModel>\n */\nclass CustomRelation extends Relation\n{\n    //...\n}\n```\n\n## Upgrading To 0.5.3 From 0.5.2\n\n#### Eloquent Resources\nIn order to perform proper analysis on your Eloquent resources, you must typehint the underlying Eloquent model class.\nThis will inform PHPStan that this resource uses `User` model. So calls to `$this` with model property or methods will be inferred correctly.\n\n```php\n/**\n * @extends JsonResource<User>\n */\nclass UserResource extends JsonResource\n{\n...\n}\n\n```\n\n## Upgrading To 0.5.1 From 0.5.0\n\n#### Eloquent Model property types\n0.5.1 introduces ability to infer Eloquent model property types. To take advantage of this you have to remove any model class from `universalObjectCratesClasses` PHPStan configuration parameter, if you added any earlier.\n\n#### Custom Eloquent Builders\nIf you are taking advantage of custom Eloquent Builders for your models, you have to mark your custom builder class as generic like so:\n```php\n/**\n * @template TModel of \\Illuminate\\Database\\Eloquent\\Model\n * @extends Builder<TModel>\n */\nclass CustomBuilder extends Builder\n{\n}\n```\nIf your IDE complains about the `template` or `extends` annotation you may also use the PHPStan specific annotations `@phpstan-template` and `@phpstan-extends`\n\nAlso in your model file where you are overriding the `newEloquentBuilder` method, you have to specify the return type like so:\n\n```php\n/**\n * @param \\Illuminate\\Database\\Query\\Builder $query\n *\n * @return CustomBuilder<YourModelWithCustomBuilder>\n */\npublic function newEloquentBuilder($query): CustomBuilder\n{\n    return new CustomBuilder($query);\n}\n```\n\nIf your IDE complains about the return type annotation you may also use the PHPStan specific return type `@phpstan-return`\n\n#### Collection generics\nGeneric stubs added to Eloquent and Support collections. Larastan is able to take advantage of this and returns the correct collection with its items defined. For example `Collection<User>` represents collection of users. But in case Larastan fails to do so in any case, you can assist with adding a typehint with the appropriate annotation like `@var`, `@param` or `@return` using the syntax `Collection<Model>`\n\n## Upgrading To 0.5 From 0.4\n\n### Updating Dependencies\n\nUpdate your `nunomaduro/larastan` dependency to `^0.5` in your `composer.json` file.\n\n### `artisan code:analyse`\n\nThe artisan `code:analyse` command is no longer available. Therefore, you need to:\n\n1. Start using the phpstan command to launch Larastan.\n\n```bash\n./vendor/bin/phpstan analyse\n```\n\nIf you are getting the error `Allowed memory size exhausted`, then you can use the `--memory-limit` option fix the problem:\n\n```bash\n./vendor/bin/phpstan analyse --memory-limit=2G\n```\n\n2. Create a `phpstan.neon` or `phpstan.neon.dist` file in the root of your application that might look like this:\n\n```\nincludes:\n    - ./vendor/nunomaduro/larastan/extension.neon\n\nparameters:\n\n    paths:\n        - app\n\n    # The level 7 is the highest level\n    level: 5\n\n    ignoreErrors:\n        - '#Unsafe usage of new static#'\n\n    excludes_analyse:\n        - ./*/*/FileToBeExcluded.php\n\n    checkMissingIterableValueType: false\n```\n\n### Misc\n\nYou may want to be aware of all the BC breaks detailed in:\n\n- PHPStan changelog: [github.com/phpstan/phpstan/releases/tag/0.12.0](https://github.com/phpstan/phpstan/releases/tag/0.12.0)\n"
        },
        {
          "name": "bootstrap.php",
          "type": "blob",
          "size": 1.025390625,
          "content": "<?php\n\ndeclare(strict_types=1);\n\nuse Illuminate\\Contracts\\Console\\Kernel;\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Laravel\\Lumen\\Application as LumenApplication;\nuse Larastan\\Larastan\\ApplicationResolver;\nuse Orchestra\\Testbench\\Concerns\\CreatesApplication;\n\nif (! defined('LARAVEL_START')) {\n    define('LARAVEL_START', microtime(true));\n}\n\nif (file_exists($applicationPath = getcwd().'/bootstrap/app.php')) { // Applications and Local Dev\n    $app = require $applicationPath;\n} elseif (file_exists($applicationPath = dirname(__DIR__, 3).'/bootstrap/app.php')) { // Relative path from default vendor dir\n    $app = require $applicationPath;\n} elseif (trait_exists(CreatesApplication::class)) { // Packages\n    $app = ApplicationResolver::resolve();\n}\n\nif (isset($app)) {\n    if ($app instanceof Application) {\n        $app->make(Kernel::class)->bootstrap();\n    } elseif ($app instanceof LumenApplication) {\n        $app->boot();\n    }\n\n    if (! defined('LARAVEL_VERSION')) {\n        define('LARAVEL_VERSION', $app->version());\n    }\n}\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.5400390625,
          "content": "{\n    \"name\": \"larastan/larastan\",\n    \"type\": \"phpstan-extension\",\n    \"description\": \"Larastan - Discover bugs in your code without running it. A phpstan/phpstan wrapper for Laravel\",\n    \"keywords\": [\"laravel\", \"larastan\", \"phpstan\", \"php\", \"package\", \"static analysis\", \"code analysis\", \"code analyse\"],\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Can Vural\",\n            \"email\": \"can9119@gmail.com\"\n        },\n        {\n            \"name\": \"Nuno Maduro\",\n            \"email\": \"enunomaduro@gmail.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.2\",\n        \"ext-json\": \"*\",\n        \"illuminate/console\": \"^11.15.0\",\n        \"illuminate/container\": \"^11.15.0\",\n        \"illuminate/contracts\": \"^11.15.0\",\n        \"illuminate/database\": \"^11.15.0\",\n        \"illuminate/http\": \"^11.15.0\",\n        \"illuminate/pipeline\": \"^11.15.0\",\n        \"illuminate/support\": \"^11.15.0\",\n        \"phpmyadmin/sql-parser\": \"^5.9.0\",\n        \"phpstan/phpstan\": \"^2.0.3\"\n    },\n    \"require-dev\": {\n        \"doctrine/coding-standard\": \"^12.0\",\n        \"nikic/php-parser\": \"^5.3\",\n        \"laravel/framework\": \"^11.15.0\",\n        \"mockery/mockery\": \"^1.6\",\n        \"orchestra/canvas\": \"^v9.1.3\",\n        \"orchestra/testbench-core\": \"^9.5.2\",\n        \"phpstan/phpstan-deprecation-rules\": \"^2.0.0\",\n        \"phpunit/phpunit\": \"^10.5.16\"\n    },\n    \"suggest\": {\n        \"orchestra/testbench\": \"Using Larastan for analysing a package needs Testbench\"\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"App\\\\\": \"tests/application/app/\",\n            \"Database\\\\Factories\\\\\": \"tests/application/database/factories/\",\n            \"Database\\\\Migrations\\\\\": \"tests/application/database/migrations/\"\n        },\n      \"classmap\": [\n        \"tests/\"\n      ]\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"autoload\": {\n        \"psr-4\": {\n            \"Larastan\\\\Larastan\\\\\": \"src/\"\n        }\n    },\n    \"config\": {\n        \"sort-packages\": true,\n        \"preferred-install\": \"dist\",\n        \"allow-plugins\": {\n            \"dealerdirect/phpcodesniffer-composer-installer\": true\n        }\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"2.0-dev\"\n        },\n        \"phpstan\": {\n            \"includes\": [\n                \"extension.neon\"\n            ]\n        }\n    },\n    \"scripts\": {\n        \"test:cs\": \"phpcs\",\n        \"test:types\": \"phpstan analyse --ansi --memory-limit 256M\",\n        \"test:unit\": \"phpunit --colors=always -d memory_limit=1408M\",\n        \"test\": [\n            \"@test:types\",\n            \"@test:unit\"\n        ]\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "e2e",
          "type": "tree",
          "content": null
        },
        {
          "name": "extension.neon",
          "type": "blob",
          "size": 17.861328125,
          "content": "parameters:\n    universalObjectCratesClasses:\n        - Illuminate\\Http\\Request\n        - Illuminate\\Support\\Optional\n    earlyTerminatingFunctionCalls:\n        - abort\n        - dd\n    mixinExcludeClasses:\n        - Eloquent\n    bootstrapFiles:\n        - bootstrap.php\n    checkOctaneCompatibility: false\n    noEnvCallsOutsideOfConfig: true\n    noModelMake: true\n    noUnnecessaryCollectionCall: true\n    noUnnecessaryCollectionCallOnly: []\n    noUnnecessaryCollectionCallExcept: []\n    squashedMigrationsPath: []\n    databaseMigrationsPath: []\n    disableMigrationScan: false\n    disableSchemaScan: false\n    viewDirectories: []\n    checkModelProperties: false\n    checkUnusedViews: false\n    checkModelAppends: true\n\nparametersSchema:\n    checkOctaneCompatibility: bool()\n    noEnvCallsOutsideOfConfig: bool()\n    noModelMake: bool()\n    noUnnecessaryCollectionCall: bool()\n    noUnnecessaryCollectionCallOnly: listOf(string())\n    noUnnecessaryCollectionCallExcept: listOf(string())\n    databaseMigrationsPath: listOf(string())\n    disableMigrationScan: bool()\n    viewDirectories: listOf(string())\n    squashedMigrationsPath: listOf(string())\n    disableSchemaScan: bool()\n    checkModelProperties: bool()\n    checkUnusedViews: bool()\n    checkModelAppends: bool()\n\nconditionalTags:\n    Larastan\\Larastan\\Rules\\NoEnvCallsOutsideOfConfigRule:\n        phpstan.rules.rule: %noEnvCallsOutsideOfConfig%\n    Larastan\\Larastan\\Rules\\NoModelMakeRule:\n        phpstan.rules.rule: %noModelMake%\n    Larastan\\Larastan\\Rules\\NoUnnecessaryCollectionCallRule:\n        phpstan.rules.rule: %noUnnecessaryCollectionCall%\n    Larastan\\Larastan\\Rules\\OctaneCompatibilityRule:\n        phpstan.rules.rule: %checkOctaneCompatibility%\n    Larastan\\Larastan\\Rules\\UnusedViewsRule:\n        phpstan.rules.rule: %checkUnusedViews%\n    Larastan\\Larastan\\Rules\\ModelAppendsRule:\n        phpstan.rules.rule: %checkModelAppends%\n\nservices:\n    -\n        class: Larastan\\Larastan\\Methods\\RelationForwardsCallsExtension\n        tags:\n            - phpstan.broker.methodsClassReflectionExtension\n\n    -\n        class: Larastan\\Larastan\\Methods\\ModelForwardsCallsExtension\n        tags:\n            - phpstan.broker.methodsClassReflectionExtension\n\n    -\n        class: Larastan\\Larastan\\Methods\\EloquentBuilderForwardsCallsExtension\n        tags:\n            - phpstan.broker.methodsClassReflectionExtension\n\n    -\n        class: Larastan\\Larastan\\Methods\\HigherOrderTapProxyExtension\n        tags:\n            - phpstan.broker.methodsClassReflectionExtension\n\n    -\n        class: Larastan\\Larastan\\Methods\\HigherOrderCollectionProxyExtension\n        tags:\n            - phpstan.broker.methodsClassReflectionExtension\n\n    -\n        class: Larastan\\Larastan\\Methods\\StorageMethodsClassReflectionExtension\n        tags:\n            - phpstan.broker.methodsClassReflectionExtension\n\n    -\n        class: Larastan\\Larastan\\Methods\\Extension\n        tags:\n            - phpstan.broker.methodsClassReflectionExtension\n    -\n        class: Larastan\\Larastan\\Methods\\ModelFactoryMethodsClassReflectionExtension\n        tags:\n            - phpstan.broker.methodsClassReflectionExtension\n    -\n        class: Larastan\\Larastan\\Methods\\RedirectResponseMethodsClassReflectionExtension\n        tags:\n            - phpstan.broker.methodsClassReflectionExtension\n    -\n        class: Larastan\\Larastan\\Methods\\MacroMethodsClassReflectionExtension\n        tags:\n            - phpstan.broker.methodsClassReflectionExtension\n    -\n        class: Larastan\\Larastan\\Methods\\ViewWithMethodsClassReflectionExtension\n        tags:\n            - phpstan.broker.methodsClassReflectionExtension\n\n    -\n        class: Larastan\\Larastan\\Properties\\ModelAccessorExtension\n        tags:\n            - phpstan.broker.propertiesClassReflectionExtension\n\n    -\n        class: Larastan\\Larastan\\Properties\\ModelPropertyExtension\n        tags:\n            - phpstan.broker.propertiesClassReflectionExtension\n\n    -\n        class: Larastan\\Larastan\\Properties\\HigherOrderCollectionProxyPropertyExtension\n        tags:\n            - phpstan.broker.propertiesClassReflectionExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\HigherOrderTapProxyExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\ContainerArrayAccessDynamicMethodReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n        arguments:\n            className: Illuminate\\Contracts\\Container\\Container\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\ContainerArrayAccessDynamicMethodReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n        arguments:\n            className: Illuminate\\Container\\Container\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\ContainerArrayAccessDynamicMethodReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n        arguments:\n            className: Illuminate\\Foundation\\Application\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\ContainerArrayAccessDynamicMethodReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n        arguments:\n            className: Illuminate\\Contracts\\Foundation\\Application\n\n    -\n        class: Larastan\\Larastan\\Properties\\ModelRelationsExtension\n        tags:\n            - phpstan.broker.propertiesClassReflectionExtension\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\ModelOnlyDynamicMethodReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\ModelFactoryDynamicStaticMethodReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicStaticMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\ModelDynamicStaticMethodReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicStaticMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\AppMakeDynamicReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicStaticMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\AuthExtension\n        tags:\n            - phpstan.broker.dynamicStaticMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\GuardDynamicStaticMethodReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicStaticMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\AuthManagerExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\DateExtension\n        tags:\n            - phpstan.broker.dynamicStaticMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\GuardExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\RequestFileExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\RequestRouteExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\RequestUserExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\EloquentBuilderExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\RelationFindExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\RelationCollectionExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\ModelFindExtension\n        tags:\n            - phpstan.broker.dynamicStaticMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\BuilderModelFindExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\TestCaseExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\Support\\CollectionHelper\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\Helpers\\AuthExtension\n        tags:\n            - phpstan.broker.dynamicFunctionReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\Helpers\\CollectExtension\n        tags:\n            - phpstan.broker.dynamicFunctionReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\Helpers\\NowAndTodayExtension\n        tags:\n            - phpstan.broker.dynamicFunctionReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\Helpers\\ResponseExtension\n        tags:\n            - phpstan.broker.dynamicFunctionReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\Helpers\\ValidatorExtension\n        tags:\n            - phpstan.broker.dynamicFunctionReturnTypeExtension\n    \n    -        \n        class: Larastan\\Larastan\\ReturnTypes\\Helpers\\LiteralExtension\n        tags:\n            - phpstan.broker.dynamicFunctionReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\CollectionFilterRejectDynamicReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\CollectionWhereNotNullDynamicReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\EnumerableGenericStaticMethodDynamicMethodReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\NewModelQueryDynamicMethodReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\FactoryDynamicMethodReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\EnumerableGenericStaticMethodDynamicStaticMethodReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicStaticMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\Types\\AbortIfFunctionTypeSpecifyingExtension\n        tags:\n            - phpstan.typeSpecifier.functionTypeSpecifyingExtension\n        arguments:\n            methodName: 'abort'\n            negate: false\n\n    -\n        class: Larastan\\Larastan\\Types\\AbortIfFunctionTypeSpecifyingExtension\n        tags:\n            - phpstan.typeSpecifier.functionTypeSpecifyingExtension\n        arguments:\n            methodName: 'abort'\n            negate: true\n\n    -\n        class: Larastan\\Larastan\\Types\\AbortIfFunctionTypeSpecifyingExtension\n        tags:\n            - phpstan.typeSpecifier.functionTypeSpecifyingExtension\n        arguments:\n            methodName: throw\n            negate: false\n\n    -\n        class: Larastan\\Larastan\\Types\\AbortIfFunctionTypeSpecifyingExtension\n        tags:\n            - phpstan.typeSpecifier.functionTypeSpecifyingExtension\n        arguments:\n            methodName: throw\n            negate: true\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\Helpers\\AppExtension\n        tags:\n            - phpstan.broker.dynamicFunctionReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\Helpers\\ValueExtension\n        tags:\n            - phpstan.broker.dynamicFunctionReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\Helpers\\StrExtension\n        tags:\n            - phpstan.broker.dynamicFunctionReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\Helpers\\TapExtension\n        tags:\n            - phpstan.broker.dynamicFunctionReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\StorageDynamicStaticMethodReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicStaticMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\Types\\GenericEloquentCollectionTypeNodeResolverExtension\n        tags:\n            - phpstan.phpDoc.typeNodeResolverExtension\n\n    -\n        class: Larastan\\Larastan\\Types\\ViewStringTypeNodeResolverExtension\n        tags:\n            - phpstan.phpDoc.typeNodeResolverExtension\n\n    -\n        class: Larastan\\Larastan\\Rules\\OctaneCompatibilityRule\n\n    -\n        class: Larastan\\Larastan\\Rules\\NoEnvCallsOutsideOfConfigRule\n\n    -\n        class: Larastan\\Larastan\\Rules\\NoModelMakeRule\n\n    -\n        class: Larastan\\Larastan\\Rules\\NoUnnecessaryCollectionCallRule\n        arguments:\n            onlyMethods: %noUnnecessaryCollectionCallOnly%\n            excludeMethods: %noUnnecessaryCollectionCallExcept%\n\n    -\n        class: Larastan\\Larastan\\Rules\\ModelAppendsRule\n\n    -\n        class: Larastan\\Larastan\\Types\\GenericEloquentBuilderTypeNodeResolverExtension\n        tags:\n            - phpstan.phpDoc.typeNodeResolverExtension\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\AppEnvironmentReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\Types\\ModelProperty\\ModelPropertyTypeNodeResolverExtension\n        tags:\n            - phpstan.phpDoc.typeNodeResolverExtension\n        arguments:\n            active: %checkModelProperties%\n\n    -\n        class: Larastan\\Larastan\\Properties\\MigrationHelper\n        arguments:\n            databaseMigrationPath: %databaseMigrationsPath%\n            disableMigrationScan: %disableMigrationScan%\n            parser: @currentPhpVersionSimpleDirectParser\n            reflectionProvider: @reflectionProvider\n\n    -\n        class: Larastan\\Larastan\\Properties\\SquashedMigrationHelper\n        arguments:\n            schemaPaths: %squashedMigrationsPath%\n            disableSchemaScan: %disableSchemaScan%\n\n    -\n        class: Larastan\\Larastan\\Properties\\ModelCastHelper\n\n    -\n        class: Larastan\\Larastan\\Properties\\ModelPropertyHelper\n\n    -\n        class: Larastan\\Larastan\\Rules\\ModelRuleHelper\n\n    -\n        class: Larastan\\Larastan\\Methods\\BuilderHelper\n        arguments:\n            checkProperties: %checkModelProperties%\n\n    -\n        class: Larastan\\Larastan\\Rules\\RelationExistenceRule\n        tags:\n            - phpstan.rules.rule\n\n    -\n        class: Larastan\\Larastan\\Rules\\CheckDispatchArgumentTypesCompatibleWithClassConstructorRule\n        arguments:\n            dispatchableClass: Illuminate\\Foundation\\Bus\\Dispatchable\n        tags:\n            - phpstan.rules.rule\n    -\n        class: Larastan\\Larastan\\Rules\\CheckDispatchArgumentTypesCompatibleWithClassConstructorRule\n        arguments:\n            dispatchableClass: Illuminate\\Foundation\\Events\\Dispatchable\n        tags:\n            - phpstan.rules.rule\n\n    -\n        class: Larastan\\Larastan\\Properties\\Schema\\PhpMyAdminDataTypeToPhpTypeConverter\n\n    -\n        class: Larastan\\Larastan\\LarastanStubFilesExtension\n        tags:\n            - phpstan.stubFilesExtension\n\n    -\n        class: Larastan\\Larastan\\Rules\\UnusedViewsRule\n\n    -\n        class: Larastan\\Larastan\\Collectors\\UsedViewFunctionCollector\n        tags:\n            - phpstan.collector\n\n    -\n        class: Larastan\\Larastan\\Collectors\\UsedEmailViewCollector\n        tags:\n            - phpstan.collector\n\n    -\n        class: Larastan\\Larastan\\Collectors\\UsedViewMakeCollector\n        tags:\n            - phpstan.collector\n\n    -\n        class: Larastan\\Larastan\\Collectors\\UsedViewFacadeMakeCollector\n        tags:\n            - phpstan.collector\n\n    -\n        class: Larastan\\Larastan\\Collectors\\UsedRouteFacadeViewCollector\n        tags:\n            - phpstan.collector\n    -\n        class: Larastan\\Larastan\\Collectors\\UsedViewInAnotherViewCollector\n        arguments:\n            parser: @currentPhpVersionSimpleDirectParser\n    -\n        class: Larastan\\Larastan\\Support\\ViewFileHelper\n        arguments:\n            viewDirectories: %viewDirectories%\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\ApplicationMakeDynamicReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\ContainerMakeDynamicReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\ConsoleCommand\\ArgumentDynamicReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\ConsoleCommand\\HasArgumentDynamicReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\ConsoleCommand\\OptionDynamicReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\ConsoleCommand\\HasOptionDynamicReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\TranslatorGetReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicMethodReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\TransHelperReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicFunctionReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\DoubleUnderscoreHelperReturnTypeExtension\n        tags:\n            - phpstan.broker.dynamicFunctionReturnTypeExtension\n\n    -\n        class: Larastan\\Larastan\\ReturnTypes\\AppMakeHelper\n\n    -\n        class: Larastan\\Larastan\\Internal\\ConsoleApplicationResolver\n\n    -\n        class: Larastan\\Larastan\\Internal\\ConsoleApplicationHelper\n\n    -\n        class: Larastan\\Larastan\\Support\\HigherOrderCollectionProxyHelper\n\nrules:\n    - Larastan\\Larastan\\Rules\\UselessConstructs\\NoUselessWithFunctionCallsRule\n    - Larastan\\Larastan\\Rules\\UselessConstructs\\NoUselessValueFunctionCallsRule\n    - Larastan\\Larastan\\Rules\\DeferrableServiceProviderMissingProvidesRule\n    - Larastan\\Larastan\\Rules\\ConsoleCommand\\UndefinedArgumentOrOptionRule\n"
        },
        {
          "name": "phpcs.xml.dist",
          "type": "blob",
          "size": 2.380859375,
          "content": "<?xml version=\"1.0\"?>\n<ruleset>\n    <arg name=\"basepath\" value=\".\"/>\n    <arg name=\"extensions\" value=\"php\"/>\n    <arg name=\"parallel\" value=\"80\"/>\n    <arg name=\"cache\" value=\".phpcs-cache\"/>\n    <arg name=\"colors\"/>\n\n    <!-- Ignore warnings, show progress of the run and show sniff names -->\n    <arg value=\"nps\"/>\n\n    <!-- Directories to be checked -->\n    <file>src</file>\n    <file>tests</file>\n\n    <exclude-pattern>tests/*/data</exclude-pattern>\n    <exclude-pattern>tests/enum-definition.php</exclude-pattern>\n    <exclude-pattern>tests/bootstrap.php</exclude-pattern>\n    <exclude-pattern>tests/application</exclude-pattern>\n\n    <!-- Include full Doctrine Coding Standard -->\n    <rule ref=\"Doctrine\">\n      <exclude name=\"SlevomatCodingStandard.PHP.RequireExplicitAssertion\"/>\n    </rule>\n\n    <rule ref=\"PSR1.Methods.CamelCapsMethodName.NotCamelCaps\">\n      <exclude-pattern>tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Squiz.Arrays.ArrayDeclaration.ValueNoNewline\">\n      <exclude-pattern>tests/Type/GenericModelPropertyTypeTest.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Generic.PHP.ForbiddenFunctions\">\n        <properties>\n            <property name=\"forbiddenFunctions\" type=\"array\">\n                <element key=\"chop\" value=\"rtrim\"/>\n                <element key=\"close\" value=\"closedir\"/>\n                <element key=\"delete\" value=\"unset\"/>\n                <element key=\"doubleval\" value=\"floatval\"/>\n                <element key=\"extract\" value=\"null\"/>\n                <element key=\"fputs\" value=\"fwrite\"/>\n                <element key=\"ini_alter\" value=\"ini_set\"/>\n                <element key=\"is_double\" value=\"is_float\"/>\n                <element key=\"is_integer\" value=\"is_int\"/>\n                <element key=\"is_long\" value=\"is_int\"/>\n                <element key=\"is_null\" value=\"null\"/>\n                <element key=\"is_real\" value=\"is_float\"/>\n                <element key=\"is_writeable\" value=\"is_writable\"/>\n                <element key=\"join\" value=\"implode\"/>\n                <element key=\"key_exists\" value=\"array_key_exists\"/>\n                <element key=\"pos\" value=\"current\"/>\n                <element key=\"settype\" value=\"null\"/>\n                <element key=\"show_source\" value=\"highlight_file\"/>\n                <element key=\"sizeof\" value=\"count\"/>\n                <element key=\"strchr\" value=\"strstr\"/>\n            </property>\n        </properties>\n    </rule>\n</ruleset>\n\n"
        },
        {
          "name": "phpstan-baseline.neon",
          "type": "blob",
          "size": 1.50390625,
          "content": "parameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: \"#^PHPDoc tag @var assumes the expression with type PHPStan\\\\\\\\Type\\\\\\\\Type\\\\|null is always PHPStan\\\\\\\\Type\\\\\\\\Constant\\\\\\\\ConstantStringType but it's error\\\\-prone and dangerous\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Methods/HigherOrderCollectionProxyExtension.php\n\n\t\t-\n\t\t\tmessage: \"#^PHPDoc tag @var assumes the expression with type PHPStan\\\\\\\\Type\\\\\\\\Type\\\\|null is always PHPStan\\\\\\\\Type\\\\\\\\ObjectType but it's error\\\\-prone and dangerous\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Methods/HigherOrderCollectionProxyExtension.php\n\n\t\t-\n\t\t\tmessage: \"#^Creating new PHPStan\\\\\\\\Reflection\\\\\\\\Php\\\\\\\\DummyParameter is not covered by backward compatibility promise\\\\. The class might change in a minor PHPStan version\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Methods/ModelForwardsCallsExtension.php\n\n\t\t-\n\t\t\tmessage: \"#^PHPDoc tag @var assumes the expression with type PHPStan\\\\\\\\Type\\\\\\\\Type\\\\|null is always PHPStan\\\\\\\\Type\\\\\\\\Constant\\\\\\\\ConstantStringType but it's error\\\\-prone and dangerous\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Properties/HigherOrderCollectionProxyPropertyExtension.php\n\n\t\t-\n\t\t\tmessage: \"#^PHPDoc tag @var assumes the expression with type PHPStan\\\\\\\\Type\\\\\\\\Type\\\\|null is always PHPStan\\\\\\\\Type\\\\\\\\ObjectType but it's error\\\\-prone and dangerous\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Properties/HigherOrderCollectionProxyPropertyExtension.php\n\n\t\t-\n\t\t\tmessage: \"#^Doing instanceof PHPStan\\\\\\\\Type\\\\\\\\Generic\\\\\\\\GenericObjectType is error\\\\-prone and deprecated\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: src/Rules/ModelRuleHelper.php\n\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.2744140625,
          "content": "includes:\n    - vendor/phpstan/phpstan/conf/bleedingEdge.neon\n    - vendor/phpstan/phpstan-deprecation-rules/rules.neon\n    - extension.neon\n    - phpstan-baseline.neon\nparameters:\n    level: 8\n    phpVersion: 80200\n    paths:\n        - src\n    reportUnmatchedIgnoredErrors: false\n"
        },
        {
          "name": "phpunit-bootstrap.php",
          "type": "blob",
          "size": 0.7861328125,
          "content": "<?php\n\nuse Illuminate\\Filesystem\\Filesystem;\n\nrequire_once __DIR__.'/vendor/autoload.php';\n\n$filesystem = new Filesystem();\n\n$filesystem->copyDirectory(__DIR__.'/tests/application/database/migrations', __DIR__.'/vendor/orchestra/testbench-core/laravel/database/migrations');\n$filesystem->copyDirectory(__DIR__.'/tests/application/database/schema', __DIR__.'/vendor/orchestra/testbench-core/laravel/database/schema');\n$filesystem->copyDirectory(__DIR__.'/tests/application/config', __DIR__.'/vendor/orchestra/testbench-core/laravel/config');\n$filesystem->copyDirectory(__DIR__.'/tests/application/resources', __DIR__.'/vendor/orchestra/testbench-core/laravel/resources');\n$filesystem->copyDirectory(__DIR__.'/tests/application/app/Console', __DIR__.'/vendor/orchestra/testbench-core/laravel/app/Console');\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.513671875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.5/phpunit.xsd\"\n    beStrictAboutOutputDuringTests=\"true\"\n    beStrictAboutChangesToGlobalState=\"true\"\n    bootstrap=\"phpunit-bootstrap.php\"\n    colors=\"true\"\n    failOnRisky=\"true\"\n    failOnWarning=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"Test Suite\">\n            <directory>./tests</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "stubs",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}