{
  "metadata": {
    "timestamp": 1736712313094,
    "page": 117,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "thephpleague/omnipay",
      "stars": 5971,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0546875,
          "content": "/vendor\ncomposer.lock\ncomposer.phar\nphpunit.xml\n.idea/*\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.8095703125,
          "content": "Changelog\n=========\n\n## v3.2 - 2021-06-01\n\nOmnipay 3.2 is compatible with PHP8. This is done by upgrading the test suite to PHPUnit 8/9, with the release of omnipay/tests v4 and omnipay/common v3.1. This change is primarily for gateway developers, to make it possible to actually test PHP8, but they will need to upgrade their tests to use PHPUnit 9 (the currently supported PHPUnit version). \n## v3.1 - 2020-10-29\n\nOmnipay 3.1 uses Guzzle 7 by default (using the Guzzle 7 adapter). This doesn't change omnipay-common because they will work with any compatible Http Client.\nThe minimum PHP versions is bumped to 7.2 because of this.\n\n## v3.0 - 2018-05-14\n\nOmnipay 3.0 focuses on separation of the HTTP Client, to be independent of Guzzle. \nThis release brings compatibility with the latest Symfony 3+4 and Laravel 5. \nThe breaking changes for applications using Omnipay are kept to a minimum.\n\nThe `omnipay/omnipay` package name has been changed to `league/omnipay`\n\n### Upgrading applications from Omnipay 2.x to 3.x\n\n#### Breaking changes\n - The `redirect()` method no calls `exit()` after sending the content. This is up to the developer now.\n - An HTTP Client is required. Guzzle will be installed when using `league/omnipay`, \n but otherwise you need to required your own implementation (see [PHP HTTP Clients](http://docs.php-http.org/en/latest/clients.html))\n- The `omnipay/omnipay` package name has been changed to `league/omnipay` and no longers installs all the gateways directly.\n\n#### Added\n - It is now possible to use `setAmountInteger(integer $value)` to set the amount in the base units of the currency.\n - Support for [Money for PHP](http://moneyphp.org/) objects are added, by using `setMoney(Money $money)` the Amount and Currency are set.\n\n### Upgrading Gateways from 2.x to 3.x\n\nThe primary difference is the HTTP Client. We are now using HTTPlug (http://httplug.io/) but rely on our own interface.\n\n### Breaking changes\n- Change typehint from Guzzle ClientInterface to `Omnipay\\Common\\Http\\ClientInterface`\n- `$client->get('..')`/`$client->post('..')` etc are removed, you can call `$client->request('GET', '')`.\n- No need to call `$request->send()`, requests are sent directly.\n- Instead of `$client->createRequest(..)` you can create+send the request directly with `$client->request(..)`.\n- When sending a JSON body, convert the body to a string with `json_encode()` and set the correct Content-Type.\n- The response is a PSR-7 Response object. You can call `$response->getBody()->getContents()` to get the body as string.\n- `$response->json()` and `$response->xml()` are gone, but you can implement the logic directly.\n- An HTTP Client is no longer added by default by `omnipay/common`, but `league/omnipay` will add Guzzle. \nGateways should not rely on Guzzle or other clients directly.\n- `$body` should be a string (eg. `http_build_query($data)` or `json_encode($data)` instead of just `$data`).\n- The `$headers` parameters should be an `array` (not `null`, but can be empty)\n\nExamples:\n```php\n// V2 XML:\n $response = $this->httpClient->post($this->endpoint, null, $data)->send();\n $result = $httpResponse->xml();\n\n// V3 XML:\n $response = $this->httpClient->request('POST', $this->endpoint, [], http_build_query($data));\n $result = simplexml_load_string($httpResponse->getBody()->getContents());\n```\n\n```php\n// Example JSON request:\n\n $response = $this->httpClient->request('POST', $this->endpoint, [\n     'Accept' => 'application/json',\n     'Content-Type' => 'application/json',\n ], json_encode($data));\n \n $result = json_decode($response->getBody()->getContents(), true);\n```\n\n#### Testing changes\n\nPHPUnit is upgraded to PHPUnit 6. Common issues:\n\n- `setExpectedException()` is removed\n\n```php\n// PHPUnit 5:\n$this->setExpectedException($class, $message);\n\n// PHPUnit 6:\n$this->expectException($class);\n$this->expectExceptionMessage($message);\n```\n\n- Tests that do not perform any assertions, will be marked as risky. This can be avoided by annotating them with ` @doesNotPerformAssertions`\n\n- You should remove the `Mockery\\Adapter\\Phpunit\\TestListener` in phpunit.xml.dist\n\n\n## v2.0.0 - 2013-11-17\n\n### Package Separation\n\nAs of 2.0, Omnipay has been split into separate packages. Core functionality is contained within the [omnipay/common](https://github.com/omnipay/common) repository, and all gateways have their own repositories. This means that if your project only requires on a single gateway, you can load it without installing all of the other gateways. All officially supported gateways can be found under the [Omnipay GitHub organization](//github.com/omnipay).\n\nIf you want to install all gateways, you can still use the `omnipay/omnipay` metapackage in `composer.json`:\n\n~~~ javascript\n{\n    \"require\": {\n        \"omnipay/omnipay\": \"~2.0\"\n    }\n}\n~~~\n\nAlternatively, if you want to migrate to an individual gateway, simply change your `composer.json` file to reference the specific gateway (`omnipay/common` will be included for you automatically):\n\n~~~ javascript\n{\n    \"require\": {\n        \"omnipay/paypal\": \"~2.0\"\n    }\n}\n~~~\n\n### Breaking Changes\n\nThe `GatewayFactory` class can no longer be called in a static fashion. To help those who want to use dependency injection, you can now create an instance of GatewayFactory:\n\n~~~ php\n$factory = new GatewayFactory();\n$gateway = $factory->create('PayPal_Express');\n~~~\n\nThe following code is invalid and will no longer work:\n\n~~~ php\n$gateway = GatewayFactory::create('PayPal_Express'); // will cause PHP error!\n~~~\n\nIf you want to continue to use static methods for simplicity, you can use the new Omnipay class:\n\n~~~ php\n// at the top of your PHP file\nuse Omnipay\\Omnipay;\n\n// further down when you need to create the gateway\n$gateway = Omnipay::create('PayPal_Express');\n~~~\n\nBehind the scenes, this will create a GatewayFactory instance for you and call the appropriate method on it.\n\n### Additions\n\n**Omnipay now supports sending line-item data to gateways.** Currently this is only supported by the PayPal gateway. Line item details can be added to a request like so:\n\n~~~ php\n$request->setItems(array(\n    array('name' => 'Food', 'quantity' => 1, 'price' => '40.00'),\n    array('name' => 'Drinks', 'quantity' => 2, 'price' => '6.00'),\n));\n~~~\n\nFor more details, see the [pull request](https://github.com/omnipay/omnipay/pull/154).\n\n**Omnipay now also supports modifying request data before it is sent to the gateway.**. This allows you to send arbitrary custom data with a request, even if Omnipay doesn't support a parameter directly. To modify the request data, instead of calling `send()` directly on the request, you may use the new `sendData()` method:\n\n~~~ php\n// standard method - send default data\n$response = $request->send();\n\n// new method - get and send custom data\n$data = $request->getData();\n$data['customParameter'] = true;\n\n$response = $request->sendData($data);\n~~~\n\nFor more details, see the [pull request](https://github.com/omnipay/omnipay/pull/162).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.603515625,
          "content": "# Contributing Guidelines\n\n* Fork the project.\n* Make your feature addition or bug fix.\n* Add tests for it. This is important so I don't break it in a future version unintentionally.\n* Commit just the modifications, do not mess with the composer.json or CHANGELOG.md files.\n* Ensure your code is nicely formatted in the [PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md)\n  style and that all tests pass.\n* Don't forget to check all versionnumbers and tag it correctly in GIT ;)\n* Send the pull request.\n* Check that the Travis CI build passed. If not, rinse and repeat.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0380859375,
          "content": "Copyright (c) 2012-2018 Adrian Macneil\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 46.380859375,
          "content": "# Omnipay\n\n**An easy to use, consistent payment processing library for PHP**\n\n[![Unit Tests](https://github.com/thephpleague/omnipay/actions/workflows/run-tests.yml/badge.svg)](https://github.com/thephpleague/omnipay/actions/workflows/run-tests.yml)\n[![Latest Stable Version](https://poser.pugx.org/omnipay/common/version)](https://packagist.org/packages/omnipay/common)\n[![Total Downloads](https://poser.pugx.org/omnipay/common/d/total)](https://packagist.org/packages/omnipay/common)\n\nOmnipay is a payment processing library for PHP. It has been designed based on\nideas from [Active Merchant](http://activemerchant.org/), plus experience implementing\ndozens of gateways for [CI Merchant]. It has a clear and consistent API,\nis fully unit tested, and even comes with an example application to get you started.\n\n**Why use Omnipay instead of a gateway's official PHP package/example code?**\n\n* Because you can learn one API and use it in multiple projects using different payment gateways\n* Because if you need to change payment gateways you won't need to rewrite your code\n* Because most official PHP payment gateway libraries are a mess\n* Because most payment gateways have exceptionally poor documentation\n* Because you are writing a shopping cart and need to support multiple gateways\n\n## TL;DR\n\nJust want to see some code?\n\n```php\nuse Omnipay\\Omnipay;\n\n$gateway = Omnipay::create('Stripe');\n$gateway->setApiKey('abc123');\n\n$formData = array('number' => '4242424242424242', 'expiryMonth' => '6', 'expiryYear' => '2030', 'cvv' => '123');\n$response = $gateway->purchase(array('amount' => '10.00', 'currency' => 'USD', 'card' => $formData))->send();\n\nif ($response->isRedirect()) {\n    // redirect to offsite payment gateway\n    $response->redirect();\n} elseif ($response->isSuccessful()) {\n    // payment was successful: update database\n    print_r($response);\n} else {\n    // payment failed: display message to customer\n    echo $response->getMessage();\n}\n```\n\nAs you can see, Omnipay has a consistent, well thought out API. We try to abstract as much\nas possible the differences between the various payments gateways.\n\n## Package Layout\n\nOmnipay is a collection of packages which all depend on the\n[omnipay/common](https://github.com/thephpleague/omnipay-common) package to provide\na consistent interface. There are no dependencies on official payment gateway PHP packages -\nwe prefer to work with the HTTP API directly. Under the hood, we use the popular and powerful\n[PHP-HTTP](http://docs.php-http.org/en/latest/index.html) library to make HTTP requests.\nA [Guzzle](http://guzzlephp.org/) adapter is required by default, when using `league/omnipay`.\n\nNew gateways can be created by cloning the layout of an existing package. When choosing a\nname for your package, please don't use the `omnipay` vendor prefix, as this implies that\nit is officially supported. You should use your own username as the vendor prefix, and prepend\n`omnipay-` to the package name to make it clear that your package works with Omnipay.\nFor example, if your GitHub username was `santa`, and you were implementing the `giftpay`\npayment library, a good name for your composer package would be `santa/omnipay-giftpay`.\n\n## Installation\n\nOmnipay is installed via [Composer](https://getcomposer.org/).\nFor most uses, you will need to require `league/omnipay` and an individual gateway:\n\n```\ncomposer require league/omnipay:^3 omnipay/paypal\n```\n\nIf you want to use your own HTTP Client instead of Guzzle (which is the default for `league/omnipay`),\nyou can require `omnipay/common` and any `php-http/client-implementation` (see [PHP Http](http://docs.php-http.org/en/latest/clients.html))\n\n```\ncomposer require league/common:^3 omnipay/paypal php-http/buzz-adapter\n```\n\n## Upgrade from v2 to v3\n\nIf your gateway is supported for v3, you can require that version. Make sure you require `league/omnipay` or a separate Http Adapter.\n\nIf there is no version for v3 yet, please raise an issue or upgrade the gateways yourself and create a PR.\nSee the [Upgrade guide for omnipay/common](https://github.com/thephpleague/omnipay-common/blob/master/UPGRADE.md)\n\n> Note: The package name has been changed from `omnipay/omnipay` to `league/omnipay` for v3\n\n## Payment Gateways\n\nAll payment gateways must implement [GatewayInterface](https://github.com/thephpleague/omnipay-common/blob/master/src/Common/GatewayInterface.php), and will usually\nextend [AbstractGateway](https://github.com/thephpleague/omnipay-common/blob/master/src/Common/AbstractGateway.php) for basic functionality.\n\nThe following gateways are available:\n\nGateway | 2.x | 3.x | Composer Package | Maintainer\n--- | --- | --- | --- | ---\n[2c2p](https://github.com/dilab/omnipay-2c2p) | ✓ | ✓ | dilab/omnipay-2c2p | [Xu Ding](https://github.com/dilab)\n[2Checkout](https://github.com/thephpleague/omnipay-2checkout) | ✓ | - | omnipay/2checkout | [Omnipay](https://github.com/thephpleague/omnipay)\n[2Checkout Improved](https://github.com/collizo4sky/omnipay-2checkout) | ✓ | - | collizo4sky/omnipay-2checkout | [Agbonghama Collins](https://github.com/collizo4sky)\n[99Bill](https://github.com/laraveler/omnipay-99bill) | - | ✓ | x-class/omnipay-99bill | [Laraveler](https://github.com/laraveler)\n[Acapture (PayVision)](https://github.com/queueup-dev/omnipay-acapture) | ✓ | - | qup/omnipay-acapture | [Niels de Vries](https://github.com/niels-qup)\n[Adyen](https://github.com/academe/omnipay-adyen) | - | ✓ | academe/omnipay-adyen | [Jason Judge](https://github.com/judgej)\n[Affirm](https://github.com/eduardlleshi/omnipay-affirm) | ✓ | ✓ | eduardlleshi/omnipay-affirm | [Eduard Lleshi](https://github.com/eduardlleshi)\n[Agms](https://github.com/agmscode/omnipay-agms) | ✓ | - | agmscode/omnipay-agms | [Maanas Royy](https://github.com/maanas)\n[Alipay(Global)](https://github.com/lokielse/omnipay-global-alipay) | ✓ | ✓ | lokielse/omnipay-global-alipay | [Loki Else](https://github.com/lokielse)\n[Alipay](https://github.com/lokielse/omnipay-alipay) | ✓ | ✓ | lokielse/omnipay-alipay | [Loki Else](https://github.com/lokielse)\n[Allied Wallet](https://github.com/delatbabel/omnipay-alliedwallet) | ✓ | - | delatbabel/omnipay-alliedwallet | [Del](https://github.com/delatbabel)\n[Arca](https://github.com/k3rnel/omnipay-arca) | - | ✓ | k3rnel/omnipay-arca | [Poghos Boyajyan](https://github.com/k3rnel)\n[Authorize.Net](https://github.com/thephpleague/omnipay-authorizenet) | ✓ | ✓ | omnipay/authorizenet | [Jason Judge](https://github.com/judgej)\n[Authorize.Net API](https://github.com/academe/omnipay-authorizenetapi) | - | ✓ | academe/omnipay-authorizenetapi | [Jason Judge](https://github.com/judgej)\n[Authorize.Net Recurring Billing](https://github.com/cimpleo/omnipay-authorizenetrecurring) | - | ✓ | cimpleo/omnipay-authorizenetrecurring | [CimpleO](https://github.com/cimpleo)\n[Bankart](https://github.com/ampeco/omnipay-bankart) | ✓ | ✓ | ampeco/omnipay-bankart | [Ampeco](https://github.com/ampeco)\n[Barclays ePDQ](https://github.com/digitickets/omnipay-barclays-epdq) | ✓ | - | digitickets/omnipay-barclays-epdq | [DigiTickets](https://github.com/digitickets)\n[BlueOrange bank](https://github.com/DeH4eG/omnipay-blueorange) | - | ✓ | deh4eg/omnipay-blueorange | [Denis Smolakov](https://github.com/DeH4eG)\n[Beanstream](https://github.com/lemonstand/omnipay-beanstream) | ✓ | - | lemonstand/omnipay-beanstream | [LemonStand](https://github.com/lemonstand)\n[BitPay](https://github.com/hiqdev/omnipay-bitpay) | ✓ | ✓ | hiqdev/omnipay-bitpay | [HiQDev](https://github.com/hiqdev)\n[BKM Express](https://github.com/yasinkuyu/omnipay-bkm) | ✓ | - | yasinkuyu/omnipay-bkm | [Yasin Kuyu](https://github.com/yasinkuyu)\n[BlueSnap](https://github.com/vimeo/omnipay-bluesnap) | ✓ | - | vimeo/omnipay-bluesnap | [Vimeo](https://github.com/vimeo)\n[Braintree](https://github.com/thephpleague/omnipay-braintree) | ✓ | ✓ | omnipay/braintree | [Omnipay](https://github.com/thephpleague/omnipay)\n[Buckaroo](https://github.com/thephpleague/omnipay-buckaroo) | ✓ | - | omnipay/buckaroo | [Omnipay](https://github.com/thephpleague/omnipay)\n[CardGate](https://github.com/cardgate/omnipay-cardgate) | ✓ | - | cardgate/omnipay-cardgate | [CardGate](https://github.com/cardgate)\n[CardSave](https://github.com/thephpleague/omnipay-cardsave) | ✓ | - | omnipay/cardsave | [Omnipay](https://github.com/thephpleague/omnipay)\n[CashBaBa](https://github.com/tapos007/omnipay-cashbaba) | ✓ | ✓ | omnipay/cashbaba | [Recursion Technologies Ltd](https://github.com/tapos007)\n[Checkout.com](https://github.com/fotografde/omnipay-checkoutcom) | ✓ | - | fotografde/checkoutcom | [fotograf.de](https://github.com/fotografde)\n[CloudBanking](https://github.com/spsingh/omnipay-cloudbanking) | ✓ | - | cloudbanking/omnipay-cloudbanking | [Cloudbanking](http://cloudbanking.com.au/)\n[Coinbase](https://github.com/thephpleague/omnipay-coinbase) | ✓ | - | omnipay/coinbase | [Omnipay](https://github.com/thephpleague/omnipay)\n[CoinGate](https://github.com/coingate/omnipay-coingate) | ✓ | - | coingate/omnipay-coingate | [CoinGate](https://github.com/coingate)\n[CoinPayments](https://github.com/InkedCurtis/omnipay-coinpayments) | ✓ | ✓ | InkedCurtis/omnipay-coinpayments | [InkedCurtis](https://github.com/InkedCurtis)\n[Creditcall](https://github.com/meebio/omnipay-creditcall) | ✓ | - | meebio/omnipay-creditcall | [John Jablonski](https://github.com/jan-j)\n[CSOB](https://github.com/bileto/omnipay-csob) (GP WebPay) | ✓ | - | bileto/omnipay-csob |\n[Cybersource](https://github.com/dioscouri/omnipay-cybersource) | ✓ | ✓ | dioscouri/omnipay-cybersource | [Dioscouri Design](https://github.com/dioscouri)\n[Cybersource SOAP](https://github.com/Klinche/omnipay-cybersource-soap) | ✓ | - | dabsquared/omnipay-cybersource-soap | [DABSquared](https://github.com/DABSquared)\n[DataCash](https://github.com/digitickets/omnipay-datacash) | ✓ | - | digitickets/omnipay-datacash | [DigiTickets](https://github.com/digitickets)\n[Datatrans](https://github.com/w-vision/omnipay-datatrans) | ✓ | - | w-vision/datatrans | [Dominik Pfaffenbauer](https://github.com/dpfaffenbauer)\n[Datatrans](https://github.com/academe/omnipay-datatrans) | ✓ | ✓ | academe/omnipay-datatrans | [Jason Judge](https://github.com/judgej)\n[Docdata Payments](https://github.com/Uskur/omnipay-docdata-payments) | ✓ | ✓ | uskur/omnipay-docdata-payments | [Uskur](https://github.com/Uskur)\n[Dummy](https://github.com/thephpleague/omnipay-dummy) | ✓ | ✓ | omnipay/dummy | [Del](https://github.com/delatbabel)\n[Ebanx](https://github.com/descubraomundo/omnipay-ebanx) | - | ✓ | descubraomundo/omnipay-ebanx | [Descubra o Mundo](https://github.com/descubraomundo/)\n[eGHL](https://bitbucket.org/eghl/eghl-omnipay/src/master/) | - | ✓ | e-ghl/omnipay | [Jawad Humayun](https://bitbucket.org/jawad242/)\n[eGHL](https://github.com/dilab/omnipay-eghl) | ✓ | ✓ | dilab/omnipay-eghl | [Xu Ding](https://github.com/dilab)\n[eCoin](https://github.com/hiqdev/omnipay-ecoin) | ✓ | ✓ | hiqdev/omnipay-ecoin | [HiQDev](https://github.com/hiqdev)\n[ecoPayz](https://github.com/dercoder/omnipay-ecopayz) | ✓ | - | dercoder/omnipay-ecopayz | [Alexander Fedra](https://github.com/dercoder)\n[eSewa](https://github.com/sudiptpa/esewa) | - | ✓ | sudiptpa/omnipay-esewa | [Sujip Thapa](https://github.com/sudiptpa)\n[EgopayRu](https://github.com/pinguinjkeke/omnipay-egopaymentru) | ✓ | - | pinguinjkeke/omnipay-egopaymentru | [Alexander Avakov](https://github.com/pinguinjkeke)\n[Elavon](https://github.com/lxrco/omnipay-elavon) | ✓ | ✓ | lxrco/omnipay-elavon | [Korri](https://github.com/Korri)\n[ePayments](https://github.com/hiqdev/omnipay-epayments) | ✓ | ✓ | hiqdev/omnipay-epayments | [HiQDev](https://github.com/hiqdev)\n[ePayService](https://github.com/hiqdev/omnipay-epayservice) | ✓ | ✓ | hiqdev/omnipay-epayservice | [HiQDev](https://github.com/hiqdev)\n[eWAY](https://github.com/thephpleague/omnipay-eway) | ✓ | ✓ | omnipay/eway | [Del](https://github.com/delatbabel)\n[Fasapay](https://github.com/andreas22/omnipay-fasapay) | ✓ | - | andreas22/omnipay-fasapay | [Andreas Christodoulou](https://github.com/andreas22)\n[Faspay](https://github.com/David-Kurniawan/omnipay-faspay) | ✓ | ✓ | David-Kurniawan/omnipay-faspay | [David](https://github.com/David-Kurniawan)\n[Fat Zebra](https://github.com/delatbabel/omnipay-fatzebra) | ✓ | - | delatbabel/omnipay-fatzebra | [Del](https://github.com/delatbabel)\n[FreeKassa](https://github.com/hiqdev/omnipay-freekassa) | ✓ | ✓ | hiqdev/omnipay-freekassa | [HiQDev](https://github.com/hiqdev)\n[Fibank](https://github.com/ampeco/omnipay-fibank) | - | ✓ | ampeco/omnipay-fibank | [Ampeco](https://github.com/ampeco)\n[First Data](https://github.com/thephpleague/omnipay-firstdata) | ✓ | - | omnipay/firstdata | [OmniPay](https://github.com/thephpleague/omnipay)\n[Flo2cash](https://github.com/guisea/omnipay-flo2cash) | ✓ | - | guisea/omnipay-flo2cash | [Aaron Guise](https://github.com/guisea)\n[Free / Zero Amount](https://github.com/colinodell/omnipay-zero) | ✓ | - | colinodell/omnipay-zero | [Colin O'Dell](https://github.com/colinodell)\n[GiroCheckout](https://github.com/academe/Omnipay-GiroCheckout) | ✓ | ✓ | academe/omnipay-girocheckout | [Jason Judge](https://github.com/judgej)\n[Globalcloudpay](https://github.com/dercoder/omnipay-globalcloudpay) | ✓ | - | dercoder/omnipay-globalcloudpay | [Alexander Fedra](https://github.com/dercoder)\n[GoCardless](https://github.com/thephpleague/omnipay-gocardless) | ✓ | - | omnipay/gocardless | [Del](https://github.com/delatbabel)\n[GoPay](https://github.com/bileto/omnipay-gopay) | ✓ | - | bileto/omnipay-gopay |\n[GovPayNet](https://github.com/flexcoders/omnipay-govpaynet) | ✓ | - | omnipay/omnipay-govpaynet | [FlexCoders](https://github.com/flexcoders)\n[GVP (Garanti)](https://github.com/yasinkuyu/omnipay-gvp) | ✓ | - | yasinkuyu/omnipay-gvp | [Yasin Kuyu](https://github.com/yasinkuyu)\n[GVP (Garanti)](https://github.com/emr/omnipay-gvp) | - | ✓ | emr/omnipay-gvp | [Emre Akinci](https://github.com/emr)\n[Helcim](https://github.com/academe/omnipay-helcim) | ✓ | - | academe/omnipay-helcim | [Jason Judge](https://github.com/judgej)\n[Icepay Payments](https://github.com/superbrave/omnipay-icepay-payments) | - | ✓ | superbrave/omnipay-icepay-payments | [SuperBrave](https://github.com/superbrave)\n[iDram](https://github.com/ptuchik/omnipay-idram) | - | ✓ | ptuchik/omnipay-idram | [Avik Aghajanyan](https://github.com/ptuchik)\n[iDeal](https://github.com/deniztezcan/omnipay-ideal) | - | ✓ | deniztezcan/omnipay-ideal | [Deniz Tezcan](https://github.com/deniztezcan)\n[Ingenico ePayments](https://github.com/deniztezcan/omnipay-ingenico-epayments) | - | ✓ | deniztezcan/omnipay-ingenico-epayments | [Deniz Tezcan](https://github.com/deniztezcan)\n[iPay88](https://github.com/dilab/omnipay-ipay88) | ✓ | ✓ | dilab/omnipay-ipay88 | [Xu Ding](https://github.com/dilab)\n[IfthenPay](https://github.com/ifthenpay/omnipay-ifthenpay) | ✓ | - | ifthenpay/omnipay-ifthenpay | [Rafael Almeida](https://github.com/rafaelcpalmeida)\n[Ikajo](https://github.com/hiqdev/omnipay-ikajo) | ✓ | ✓ | hiqdev/omnipay-ikajo | [HiQDev](https://github.com/hiqdev)\n[InterKassa](https://github.com/hiqdev/omnipay-interkassa) | ✓ | ✓ | hiqdev/omnipay-interkassa | [HiQDev](https://github.com/hiqdev)\n[InovioPay](https://github.com/mvestil/omnipay-inoviopay) | ✓ | ✓ | mvestil/omnipay-inoviopay | [Mark Vestil](https://github.com/mvestil)\n[Iyzico](https://github.com/yasinkuyu/omnipay-iyzico) | ✓ | - | yasinkuyu/omnipay-iyzico | [Yasin Kuyu](https://github.com/yasinkuyu)\n[Judo Pay](https://github.com/Transportersio/omnipay-judopay) | ✓ | - | transportersio/omnipay-judopay | [Transporters.io](https://github.com/Transportersio)\n[Klarna Checkout](https://github.com/MyOnlineStore/omnipay-klarna-checkout) | ✓ | ✓ | myonlinestore/omnipay-klarna-checkout | [MyOnlineStore](https://github.com/MyOnlineStore)\n[Laybuy](https://github.com/mediabeastnz/omnipay-laybuy) | ✓ | - | mediabeastnz/omnipay-laybuy | [Myles Derham](https://github.com/mediabeastnz)\n[Luminor Gateway](https://github.com/DeH4eG/omnipay-luminor) | - | ✓ | deh4eg/omnipay-luminor | [Denis Smolakov](https://github.com/DeH4eG)\n[Komerci (Rede, former RedeCard)](https://github.com/byjg/omnipay-komerci) | ✓ | - | byjg/omnipay-komerci | [João Gilberto Magalhães](https://github.com/byjg)\n[Komoju](https://github.com/dannyvink/omnipay-komoju) | ✓ | - | vink/omnipay-komoju | [Danny Vink](https://github.com/dannyvink)\n[Midtrans](https://github.com/dilab/omnipay-midtrans) | ✓ | ✓ | dilab/omnipay-midtrans | [Xu Ding](https://github.com/dilab)\n[MercadoPago](https://github.com/lucassmacedo/omnipay-mercadopago) | - | ✓ | lucassmacedo/omnipay-mercadopago | [Lucas Macedo](https://github.com/lucassmacedo)\n[Magnius](https://github.com/fruitcake/omnipay-magnius) | - | ✓ | fruitcake/omnipay-magnius | [Fruitcake](https://github.com/fruitcake)\n[Manual](https://github.com/thephpleague/omnipay-manual) | ✓ | - | omnipay/manual | [Del](https://github.com/delatbabel)\n[Migs](https://github.com/thephpleague/omnipay-migs) | ✓ | - | omnipay/migs | [Omnipay](https://github.com/thephpleague/omnipay)\n[Mpesa](https://github.com/wasksofts/omnipay-mpesa) | ✓ | - | wasksofts/omnipay-mpesa | [wasksofts](https://github.com/wasksofts/omnipay-mpesa)\n[MTNCAM Mobile Money](https://github.com/larrytech7/omnipay-momocm) | ✓ | ✓ | larrytech7/omnipay-momocm | [Akah Harvey](https://github.com/larrytech7)\n[Mollie](https://github.com/thephpleague/omnipay-mollie) | ✓ | ✓ | omnipay/mollie | [Barry vd. Heuvel](https://github.com/barryvdh)\n[MOLPay](https://github.com/leesiongchan/omnipay-molpay) | ✓ | - | leesiongchan/molpay | [Lee Siong Chan](https://github.com/leesiongchan)\n[MoMo](https://github.com/phpviet/omnipay-momo) | - | ✓ | phpviet/omnipay-momo | [PHPViet](https://github.com/phpviet)\n[Moneris](https://github.com/unoapp-dev/omnipay-moneris) | - | ✓ | unoapp-dev/omnipay-moneris | [UNOapp Dev](https://github.com/unoapp-dev)\n[MultiCards](https://github.com/incube8/omnipay-multicards) | ✓ | - | incube8/omnipay-multicards | [Del](https://github.com/delatbabel)\n[MultiSafepay](https://github.com/thephpleague/omnipay-multisafepay) | ✓ | - | omnipay/multisafepay | [Alexander Deruwe](https://github.com/aderuwe)\n[MyCard](https://github.com/xxtime/omnipay-mycard) | ✓ | - | xxtime/omnipay-mycard | [Joe Chu](https://github.com/xxtime)\n[MyFatoorah](https://github.com/my-fatoorah/omnipay-myfatoorah) | - | ✓ | myfatoorah/omnipay | [MyFatoorah Plugins Team](https://github.com/my-fatoorah)\n[National Australia Bank (NAB) Transact](https://github.com/sudiptpa/omnipay-nabtransact) | ✓ | ✓ | sudiptpa/omnipay-nabtransact | [Sujip Thapa](https://github.com/sudiptpa)\n[NestPay (EST)](https://github.com/yasinkuyu/omnipay-nestpay) | ✓ | - | yasinkuyu/omnipay-nestpay | [Yasin Kuyu](https://github.com/yasinkuyu)\n[NestPay (EST)](https://github.com/uskur/omnipay-nestpay) | - | ✓ | uskur/omnipay-nestpay | [Uskur](https://github.com/uskur)\n[Netaxept (BBS)](https://github.com/thephpleague/omnipay-netaxept) | ✓ | - | omnipay/netaxept | [Omnipay](https://github.com/thephpleague/omnipay)\n[Netbanx](https://github.com/thephpleague/omnipay-netbanx) | ✓ | - | omnipay/netbanx | [Maks Rafalko](https://github.com/borNfreee)\n[Neteller](https://github.com/dercoder/omnipay-neteller) | ✓ | - | dercoder/omnipay-neteller | [Alexander Fedra](https://github.com/dercoder)\n[NetPay](https://github.com/netpay/omnipay-netpay) | ✓ | - | netpay/omnipay-netpay | [NetPay](https://github.com/netpay)\n[Network Merchants Inc. (NMI)](https://github.com/mfauveau/omnipay-nmi) | ✓ | - | mfauveau/omnipay-nmi | [Matthieu Fauveau](https://github.com/mfauveau)\n[Nocks](https://github.com/nocksapp/checkout-omnipay) | ✓ | ✓ | nocksapp/omnipay-nocks | [Nocks](https://github.com/nocksapp)\n[Nuvei](https://github.com/diversifiedtech/omnipay-nuvei) | - | ✓ | nmc9/omnipay-nuvei | [DiversifiedTech](https://github.com/diversifiedtech)\n[OkPay](https://github.com/hiqdev/omnipay-okpay) | ✓ | ✓ | hiqdev/omnipay-okpay | [HiQDev](https://github.com/hiqdev)\n[OnePay](https://github.com/dilab/omnipay-onepay) | ✓ | ✓ | dilab/omnipay-onepay | [Xu Ding](https://github.com/dilab)\n[Openpay Australia](https://github.com/sudiptpa/openpay) | ✓ | ✓ | sudiptpa/omnipay-openpay | [Sujip Thapa](https://github.com/sudiptpa)\n[Oppwa](https://github.com/vdbelt/omnipay-oppwa) | ✓ | ✓ | vdbelt/omnipay-oppwa | [Martin van de Belt](https://github.com/vdbelt)\n[PAY. (Pay.nl & Pay.be)](https://github.com/paynl/omnipay-paynl) | ✓ | ✓ | paynl/omnipay-paynl | [Andy Pieters](https://github.com/andypieters)\n[PayMongo](https://github.com/oozman/omnipay-paymongo) | - | ✓ | oozman/omnipay-paymongo | [Oozman](https://github.com/oozman)\n[Payoo](https://github.com/dilab/omnipay-payoo) | ✓ | ✓ | dilab/omnipay-payoo | [Xu Ding](https://github.com/dilab)\n[Pacnet](https://github.com/mfauveau/omnipay-pacnet) | ✓ | - | mfauveau/omnipay-pacnet | [Matthieu Fauveau](https://github.com/mfauveau)\n[Pagar.me](https://github.com/descubraomundo/omnipay-pagarme) | ✓ | - | descubraomundo/omnipay-pagarme | [Descubra o Mundo](https://github.com/descubraomundo)\n[Paratika (Asseco)](https://github.com/yasinkuyu/omnipay-paratika) | ✓ | - | yasinkuyu/omnipay-paratika | [Yasin Kuyu](https://github.com/yasinkuyu)\n[PayFast](https://github.com/thephpleague/omnipay-payfast) | ✓ | - | omnipay/payfast | [Omnipay](https://github.com/thephpleague/omnipay)\n[PayGate](https://github.com/mvnrsa/omnipay-paygate) | - | ✓ | mvnrsa/paygate | [Marnus van Niekerk](https://github.com/mvnrsa)\n[Payflow](https://github.com/thephpleague/omnipay-payflow) | ✓ | - | omnipay/payflow | [Del](https://github.com/delatbabel)\n[PaymentExpress (DPS)](https://github.com/thephpleague/omnipay-paymentexpress) | ✓ | ✓ | omnipay/paymentexpress | [Del](https://github.com/delatbabel)\n[PaymentExpress / DPS (A2A)](https://github.com/onlinesid/omnipay-paymentexpress-a2a) | ✓ | - | onlinesid/omnipay-paymentexpress-a2a | [Sid](https://github.com/onlinesid)\n[PaymentgateRu](https://github.com/pinguinjkeke/omnipay-paymentgateru) | ✓ | ✓ | pinguinjkeke/omnipay-paymentgateru | [Alexander Avakov](https://github.com/pinguinjkeke)\n[PaymentSense](https://github.com/digitickets/omnipay-paymentsense) | ✓ | - | digitickets/omnipay-paymentsense | [DigiTickets](https://github.com/digitickets)\n[PaymentWall](https://github.com/incube8/omnipay-paymentwall) | ✓ | - | incube8/omnipay-paymentwall | [Del](https://github.com/delatbabel)\n[Paynow](https://github.com/pay-now/omnipay-paynow) | - | ✓ | pay-now/omnipay-paynow | [Paynow](https://github.com/pay-now)\n[PayPal](https://github.com/thephpleague/omnipay-paypal) | ✓ | ✓ | omnipay/paypal | [Del](https://github.com/delatbabel)\n[PayPro](https://github.com/payproNL/omnipay-paypro) | ✓ | - | paypronl/omnipay-paypro | [Fruitcake](https://github.com/fruitcake)\n[PAYONE](https://github.com/academe/omnipay-payone) | ✓ | ✓ | academe/omnipay-payone | [Jason Judge](https://github.com/judgej)\n[Paysafecard](https://github.com/dercoder/omnipay-paysafecard) | ✓ | - | dercoder/omnipay-paysafecard | [Alexander Fedra](https://github.com/dercoder)\n[Paysafecard](https://github.com/worldstream-labs/omnipay-paysafecard) | - | ✓ | worldstream-labs/omnipay-paysafecard | [Worldstream](https://github.com/worldstream-labs)\n[Paysafe Payment Hub (Neteller)](https://github.com/worldstream-labs/omnipay-paysafe-payment-hub) | - | ✓ | worldstream-labs/omnipay-paysafe-payment-hub | [Worldstream](https://github.com/worldstream-labs)\n[Paysera](https://github.com/povils/omnipay-paysera) | ✓ | - | povils/omnipay-paysera | [Povils](https://github.com/povils)\n[Paysera](https://github.com/semyonchetvertnyh/omnipay-paysera) | - | ✓ | semyonchetvertnyh/omnipay-paysera | [Semyon Chetvertnyh](https://github.com/semyonchetvertnyh)\n[PaySimple](https://github.com/dranes/omnipay-paysimple) | ✓ | - | dranes/omnipay-paysimple | [Dranes](https://github.com/dranes)\n[PaySsion](https://github.com/InkedCurtis/omnipay-payssion) | ✓ | - | inkedcurtis/omnipay-payssion | [Curtis](https://github.com/inkedcurtis)\n[PayTrace](https://github.com/iddqdidkfa/omnipay-paytrace) | ✓ | - | softcommerce/omnipay-paytrace | [Oleg Ilyushyn](https://github.com/iddqdidkfa)\n[PayU](https://github.com/bileto/omnipay-payu) | ✓ | - | bileto/omnipay-payu |\n[PayZen](https://github.com/ubitransports/omnipay-payzen) | ✓ | - | ubitransports/omnipay-payzen | [Ubitransport](https://github.com/ubitransports)\n[Paxum](https://github.com/hiqdev/omnipay-paxum) | ✓ | ✓ | hiqdev/omnipay-paxum | [HiQDev](https://github.com/hiqdev)\n[Pelecard](https://github.com/Uskur/omnipay-pelecard) | ✓ | ✓ | uskur/omnipay-pelecard | [Uskur](https://github.com/Uskur)\n[Pin Payments](https://github.com/thephpleague/omnipay-pin) | ✓ | - | omnipay/pin | [Del](https://github.com/delatbabel)\n[Ping++](https://github.com/phoenixg/omnipay-pingpp) | ✓ | - | phoenixg/omnipay-pingpp | [Huang Feng](https://github.com/phoenixg)\n[POLi](https://github.com/burnbright/omnipay-poli) | ✓ | - | burnbright/omnipay-poli | [Sid](https://github.com/onlinesid)\n[Portmanat](https://github.com/dercoder/omnipay-portmanat) | ✓ | - | dercoder/omnipay-portmanat | [Alexander Fedra](https://github.com/dercoder)\n[Posnet](https://github.com/yasinkuyu/omnipay-posnet) | ✓ | - | yasinkuyu/omnipay-posnet | [Yasin Kuyu](https://github.com/yasinkuyu)\n[Postfinance](https://github.com/bummzack/omnipay-postfinance) | ✓ | - | bummzack/omnipay-postfinance | [Roman Schmid](https://github.com/bummzack)\n[Qiwi](https://github.com/hiqdev/omnipay-qiwi) | ✓ | ✓ | hiqdev/omnipay-qiwi | [HiQDev](https://github.com/hiqdev)\n[QQ Wallet(QPay)](https://github.com/kuangjy2/omnipay-qpay) | - | ✓ | kuangjy/omnipay-qpay | [Kuang Jiaye](https://github.com/kuangjy2)\n[Quickpay](https://github.com/NobrainerWeb/omnipay-quickpay) | ✓ | - | nobrainerweb/omnipay-quickpay | [Nobrainer Web](https://github.com/NobrainerWeb)\n[Rabobank](https://github.com/thephpleague/omnipay-rabobank) | ✓ | - | omnipay/rabobank | [Barry vd. Heuvel](https://github.com/barryvdh)\n[Razorpay](https://github.com/razorpay/omnipay-razorpay) | ✓ | - |  razorpay/omnipay-razorpay  | [razorpay](https://github.com/razorpay)\n[Realex](https://github.com/digitickets/omnipay-realex) | ✓ | - | digitickets/omnipay-realex | [DigiTickets](https://github.com/digitickets)\n[RedSys](https://github.com/jsampedro77/sermepa-omnipay) | ✓ | - | nazka/sermepa-omnipay | [Javier Sampedro](https://github.com/jsampedro77)\n[RentMoola](https://github.com/rentmoola/omnipay-rentmoola) | ✓ | - | rentmoola/omnipay-rentmoola | [Geoff Shaw](https://github.com/Shawg)\n[RoboKassa](https://github.com/hiqdev/omnipay-robokassa) | ✓ | ✓ | hiqdev/omnipay-robokassa | [HiQDev](https://github.com/hiqdev)\n[RocketGate](https://github.com/mvestil/omnipay-rocketgate) | ✓ | ✓ | mvestil/omnipay-rocketgate | [Mark Vestil](https://github.com/mvestil)\n[Sage Pay](https://github.com/thephpleague/omnipay-sagepay) | ✓ | ✓ | omnipay/sagepay | [Jason Judge](https://github.com/judgej)\n[Sberbank](https://github.com/AndrewNovikof/omnipay-sberbank) | - | ✓ | andrewnovikof/omnipay-sberbank | [Andrew Novikov](https://github.com/AndrewNovikof)\n[SecPay](https://github.com/justinbusschau/omnipay-secpay) | ✓ | - | justinbusschau/omnipay-secpay | [Justin Busschau](https://github.com/justinbusschau)\n[SecurePay](https://github.com/thephpleague/omnipay-securepay) | ✓ | ✓ | omnipay/securepay | [Omnipay](https://github.com/thephpleague/omnipay)\n[Secure Trading](https://github.com/meebio/omnipay-secure-trading) | ✓ | - | meebio/omnipay-secure-trading | [John Jablonski](https://github.com/jan-j)\n[Sisow](https://github.com/fruitcake/omnipay-sisow) | ✓ | ✓ | fruitcakestudio/omnipay-sisow | [Fruitcake](https://github.com/fruitcake)\n[Skrill](https://github.com/alfaproject/omnipay-skrill) | ✓ | - | alfaproject/omnipay-skrill | [João Dias](https://github.com/alfaproject)\n[Sofort](https://github.com/aimeoscom/omnipay-sofort) | ✓ | - | aimeoscom/omnipay-sofort | [Aimeos GmbH](https://github.com/aimeoscom)\n[Spreedly](https://github.com/gregoriohc/omnipay-spreedly) | ✓ | - | gregoriohc/omnipay-spreedly | [Gregorio Hernández Caso](https://github.com/gregoriohc)\n[Square](https://github.com/Transportersio/omnipay-square) | ✓ | ✓ | transportersio/omnipay-square | [Transporters.io](https://github.com/Transportersio)\n[Starkpay](https://github.com/starkpay/omnipay) | ✓ | ✓ | starkpay/omnipay | [Starkpay](https://github.com/starkpay)\n[Stripe](https://github.com/thephpleague/omnipay-stripe) | ✓ | ✓ | omnipay/stripe | [Del](https://github.com/delatbabel)\n[TargetPay](https://github.com/thephpleague/omnipay-targetpay) | ✓ | - | omnipay/targetpay | [Alexander Deruwe](https://github.com/aderuwe)\n[TatraBank](https://github.com/bileto/omnipay-tatrabank) | ✓ | - | omnipay-tatrabank |\n[ToyyibPay](https://github.com/sitehandy/omnipay-toyyibpay) | - | ✓ | sitehandy/omnipay-toyyibpay | [Amirol Zolkifli](https://github.com/sitehandy)\n[Tpay](https://github.com/tpay-com/omnipay-tpay) | ✓ | - | omnipay/tpay | [Tpay.com](https://github.com/tpay-com)\n[UnionPay](https://github.com/lokielse/omnipay-unionpay) | ✓ | ✓ | lokielse/omnipay-unionpay | [Loki Else](https://github.com/lokielse)\n[Vantiv](https://github.com/lemonstand/omnipay-vantiv) | ✓ | - | lemonstand/omnipay-vantiv | [LemonStand](https://github.com/lemonstand)\n[Veritrans](https://github.com/andylibrian/omnipay-veritrans) | ✓ | - | andylibrian/omnipay-veritrans | [Andy Librian](https://github.com/andylibrian)\n[Vindicia](https://github.com/vimeo/omnipay-vindicia) | ✓ | - | vimeo/omnipay-vindicia | [Vimeo](https://github.com/vimeo)\n[VivaPayments](https://github.com/delatbabel/omnipay-vivapayments) | ✓ | - | delatbabel/omnipay-vivapayments | [Del](https://github.com/delatbabel)\n[VR Payment](https://github.com/antibodies-online/omnipay-vr-payment) | - | ✓ | antibodies-online/omnipay-vr-payment | [antibodies-online](https://github.com/antibodies-online)\n[WebMoney](https://github.com/dercoder/omnipay-webmoney) | ✓ | ✓ | dercoder/omnipay-webmoney | [Alexander Fedra](https://github.com/dercoder)\n[WeChat](https://github.com/labs7in0/omnipay-wechat) | ✓ | - | labs7in0/omnipay-wechat | [7IN0's Labs](https://github.com/labs7in0)\n[WechatPay](https://github.com/lokielse/omnipay-wechatpay) | ✓ | ✓ | lokielse/omnipay-wechatpay |  [Loki Else](https://github.com/lokielse)\n[WePay](https://github.com/collizo4sky/omnipay-wepay) | ✓ | - | collizo4sky/omnipay-wepay | [Agbonghama Collins](https://github.com/collizo4sky)\n[Wirecard](https://github.com/igaponov/omnipay-wirecard) | ✓ | ✓ | igaponov/omnipay-wirecard | [Igor Gaponov](https://github.com/igaponov)\n[Wirecard](https://github.com/academe/omnipay-wirecard) | ✓ | - | academe/omnipay-wirecard | [Jason Judge](https://github.com/judgej)\n[Worldpay XML Direct Corporate Gateway](https://github.com/teaandcode/omnipay-worldpay-xml) | ✓ | - | teaandcode/omnipay-worldpay-xml | [Dave Nash](https://github.com/teaandcode)\n[Worldpay XML Hosted Corporate Gateway](https://github.com/catharsisjelly/omnipay-worldpay-cg-hosted) | ✓ | ✓ | catharsisjelly/omnipay-worldpay-cg-hosted | [Chris Lock](https://github.com/catharsisjelly)\n[Worldpay Business Gateway](https://github.com/thephpleague/omnipay-worldpay) | ✓ | ✓ | omnipay/worldpay | [Omnipay](https://github.com/thephpleague/omnipay)\n[Yandex.Kassa](https://github.com/hiqdev/omnipay-yandex-kassa) | ✓ | ✓ | hiqdev/omnipay-yandex-kassa | [HiQDev](https://github.com/hiqdev)\n[Yandex.Money](https://github.com/yandex-money/yandex-money-cms-omnipay) | ✓ | - | yandexmoney/omnipay | [Roman Ananyev](https://github.com/aTastyCookie/)\n[Yandex.Money for P2P payments](https://github.com/hiqdev/omnipay-yandexmoney) | ✓ | ✓ | hiqdev/omnipay-yandexmoney | [HiQDev](https://github.com/hiqdev)\n[Yekpay](https://github.com/nekofar/omnipay-yekpay) | - | ✓ | nekofar/omnipay-yekpay | [Milad Nekofar](https://github.com/nekofar)\n[ZarinPal](https://github.com/nekofar/omnipay-zarinpal) | - | ✓ | nekofar/omnipay-zarinpal | [Milad Nekofar](https://github.com/nekofar)\n\nGateways are created and initialized like so:\n\n```php\nuse Omnipay\\Omnipay;\n\n$gateway = Omnipay::create('PayPal_Express');\n$gateway->setUsername('adrian');\n$gateway->setPassword('12345');\n```\n\nMost settings are gateway specific. If you need to query a gateway to get a list\nof available settings, you can call `getDefaultParameters()`:\n\n```php\n$settings = $gateway->getDefaultParameters();\n// default settings array format:\narray(\n    'username' => '', // string variable\n    'testMode' => false, // boolean variable\n    'landingPage' => array('billing', 'login'), // enum variable, first item should be treated as default\n);\n```\n\nGenerally most payment gateways can be classified as one of two types:\n\n* Off-site gateways such as PayPal Express, where the customer is redirected to a third party site to enter payment details\n* On-site (merchant-hosted) gateways such as PayPal Pro, where the customer enters their credit card details on your site\n\nHowever, there are some gateways such as Sage Pay Direct, where you take credit card details on site, then optionally redirect\nif the customer's card supports 3D Secure authentication. Therefore, there is no point differentiating between the two types of\ngateway (other than by the methods they support).\n\n## Credit Card / Payment Form Input\n\nUser form input is directed to an [CreditCard](https://github.com/thephpleague/omnipay-common/blob/master/src/Common/CreditCard.php)\nobject. This provides a safe way to accept user input.\n\nThe `CreditCard` object has the following fields:\n\n* firstName\n* lastName\n* number\n* expiryMonth\n* expiryYear\n* startMonth\n* startYear\n* cvv\n* issueNumber\n* type\n* billingAddress1\n* billingAddress2\n* billingCity\n* billingPostcode\n* billingState\n* billingCountry\n* billingPhone\n* shippingAddress1\n* shippingAddress2\n* shippingCity\n* shippingPostcode\n* shippingState\n* shippingCountry\n* shippingPhone\n* company\n* email\n\nEven off-site gateways make use of the `CreditCard` object, because often you need to pass\ncustomer billing or shipping details through to the gateway.\n\nThe `CreditCard` object can be initialized with untrusted user input via the constructor.\nAny fields passed to the constructor which are not recognized will be ignored.\n\n```php\n$formInputData = array(\n    'firstName' => 'Bobby',\n    'lastName' => 'Tables',\n    'number' => '4111111111111111',\n);\n$card = new CreditCard($formInputData);\n```\n\nYou can also just pass the form data array directly to the gateway, and a `CreditCard` object\nwill be created for you.\n\nCreditCard fields can be accessed using getters and setters:\n\n```php\n$number = $card->getNumber();\n$card->setFirstName('Adrian');\n```\n\nIf you submit credit card details which are obviously invalid (missing required fields, or a number\nwhich fails the Luhn check), [InvalidCreditCardException](https://github.com/thephpleague/omnipay-common/blob/master/src/Omnipay/Common/Exception/InvalidCreditCardException.php)\nwill be thrown.  You should validate the card details using your framework's validation library\nbefore submitting the details to your gateway, to avoid unnecessary API calls.\n\nFor on-site payment gateways, the following card fields are generally required:\n\n* firstName\n* lastName\n* number\n* expiryMonth\n* expiryYear\n* cvv\n\nYou can also verify the card number using the Luhn algorithm by calling `Helper::validateLuhn($number)`.\n\n## Gateway Methods\n\nThe main methods implemented by gateways are:\n\n* `authorize($options)` - authorize an amount on the customer's card\n* `completeAuthorize($options)` - handle return from off-site gateways after authorization\n* `capture($options)` - capture an amount you have previously authorized\n* `purchase($options)` - authorize and immediately capture an amount on the customer's card\n* `completePurchase($options)` - handle return from off-site gateways after purchase\n* `refund($options)` - refund an already processed transaction\n* `void($options)` - generally can only be called up to 24 hours after submitting a transaction\n* `acceptNotification()` - convert an incoming request from an off-site gateway to a generic notification object\n  for further processing\n* `createCard` - get a cardReference that can be used for future payments. This might be used in a monthly billing scenario, for example.  \n\nOn-site gateways do not need to implement the `completeAuthorize` and `completePurchase` methods. Gateways that don't\nreceive payment notifications don't need to implement `acceptNotification`. If any gateway does not support certain\nfeatures (such as refunds), it will throw `BadMethodCallException`.\n\nAll gateway methods except `acceptNotification` take an `$options` array as an argument. The `acceptNotification` method\ndoes not take any parameters and will access the HTTP URL variables or POST data implicitly. Each gateway differs in\nwhich parameters are required, and the gateway will throw `InvalidRequestException` if you omit any required parameters.\nAll gateways will accept a subset of these options:\n\n* card\n* token\n* amount\n* currency\n* description\n* transactionId\n* clientIp\n* returnUrl\n* cancelUrl\n\nPass the options through to the method like so:\n\n```php\n$card = new CreditCard($formData);\n$request = $gateway->authorize(array(\n    'amount' => '10.00', // this represents $10.00\n    'card' => $card,\n    'returnUrl' => 'https://www.example.com/return',\n));\n```\n\nWhen calling the `completeAuthorize` or `completePurchase` methods, the exact same arguments should be provided as\nwhen you made the initial `authorize` or `purchase` call (some gateways will need to verify for example the actual\namount paid equals the amount requested). The only parameter you can omit is `card`.\n\nTo summarize the various parameters you have available to you:\n\n* Gateway settings (e.g. username and password) are set directly on the gateway. These settings apply to all payments, and generally you will store these in a configuration file or in the database.\n* Method options are used for any payment-specific options, which are not set by the customer. For example, the payment `amount`, `currency`, `transactionId` and `returnUrl`.\n* CreditCard parameters are data which the user supplies. For example, you want the user to specify their `firstName` and `billingCountry`, but you don't want a user to specify the payment `currency` or `returnUrl`.\n\n## The Payment Response\n\nThe payment response must implement [ResponseInterface](https://github.com/thephpleague/omnipay-common/blob/master/src/Omnipay/Common/Message/ResponseInterface.php). There are two main types of response:\n\n* Payment was successful (standard response)\n* Website requires redirect to off-site payment form (redirect response)\n\n### Successful Response\n\nFor a successful responses, a reference will normally be generated, which can be used to capture or refund the transaction\nat a later date. The following methods are always available:\n\n```php\n$response = $gateway->purchase(array('amount' => '10.00', 'card' => $card))->send();\n\n$response->isSuccessful(); // is the response successful?\n$response->isRedirect(); // is the response a redirect?\n$response->getTransactionReference(); // a reference generated by the payment gateway\n$response->getTransactionId(); // the reference set by the originating website if available.\n$response->getMessage(); // a message generated by the payment gateway\n```\n\nIn addition, most gateways will override the response object, and provide access to any extra fields returned by the gateway.\nIf the payment authorization is re-usable the gateway will implement ```$response->getCardReference();```. This\nmethod is always available (but may return NULL) from 3.1.1\n\n### Redirect Response\n\nThe redirect response is further broken down by whether the customer's browser must redirect using GET (RedirectResponse object), or\nPOST (FormRedirectResponse). These could potentially be combined into a single response class, with a `getRedirectMethod()`.\n\nAfter processing a payment, the cart should check whether the response requires a redirect, and if so, redirect accordingly:\n\n```php\n$response = $gateway->purchase(array('amount' => '10.00', 'card' => $card))->send();\nif ($response->isSuccessful()) {\n    // payment is complete\n} elseif ($response->isRedirect()) {\n    $response->redirect(); // this will automatically forward the customer\n} else {\n    // not successful\n}\n```\n\nThe customer isn't automatically forwarded on, because often the cart or developer will want to customize the redirect method\n(or if payment processing is happening inside an AJAX call they will want to return JS to the browser instead).\n\nTo display your own redirect page, simply call `getRedirectUrl()` on the response, then display it accordingly:\n\n```php\n$url = $response->getRedirectUrl();\n// for a form redirect, you can also call the following method:\n$data = $response->getRedirectData(); // associative array of fields which must be posted to the redirectUrl\n```\n\n## Error Handling\n\nYou can test for a successful response by calling `isSuccessful()` on the response object. If there\nwas an error communicating with the gateway, or your request was obviously invalid, an exception\nwill be thrown. In general, if the gateway does not throw an exception, but returns an unsuccessful\nresponse, it is a message you should display to the customer. If an exception is thrown, it is\neither a bug in your code (missing required fields), or a communication error with the gateway.\n\nYou can handle both scenarios by wrapping the entire request in a try-catch block:\n\n```php\ntry {\n    $response = $gateway->purchase(array('amount' => '10.00', 'card' => $card))->send();\n    if ($response->isSuccessful()) {\n        // mark order as complete\n    } elseif ($response->isRedirect()) {\n        $response->redirect();\n    } else {\n        // display error to customer\n        exit($response->getMessage());\n    }\n} catch (\\Exception $e) {\n    // internal error, log exception and display a generic message to the customer\n    exit('Sorry, there was an error processing your payment. Please try again later.');\n}\n```\n\n## Test mode and developer mode\n  Most gateways allow you to set up a sandbox or developer account which uses a different url\n  and credentials. Some also allow you to do test transactions against the live site, which does\n  not result in a live transaction.\n\n  Gateways that implement only the developer account (most of them) call it testMode. Authorize.net,\n  however, implements both and refers to this mode as developerMode.  \n\n  When implementing with multiple gateways you should use a construct along the lines of the following:\n```php\nif ($is_developer_mode) {\n    if (method_exists($gateway, 'setDeveloperMode')) {\n        $gateway->setDeveloperMode(TRUE);\n    } else {\n        $gateway->setTestMode(TRUE);\n    }\n}\n```\n\n## Token Billing\n\nToken billing allows you to store a credit card with your gateway, and charge it at a later date.\nToken billing is not supported by all gateways. For supported gateways, the following methods\nare available:\n\n* `createCard($options)` - returns a response object which includes a `cardReference`, which can be used for future transactions\n* `updateCard($options)` - update a stored card, not all gateways support this method\n* `deleteCard($options)` - remove a stored card, not all gateways support this method\n\nOnce you have a `cardReference`, (which should be available from the response object\nusing getCardReference) you can use it instead of the `card` parameter when creating a charge:\n\n    $gateway->purchase(array('amount' => '10.00', 'cardReference' => 'abc'));\n    \nIn many cases the createCard action will also process the initial payment at the same time.\nIn these cases you should pass in the 'action' ('authorize' or 'purchase') in the createCard\noptions.\n\n## Recurring Billing\n\nAt this stage, automatic recurring payments functionality is out of scope for this library.\nThis is because there is likely far too many differences between how each gateway handles\nrecurring billing profiles. Also in most cases token billing will cover your needs, as you can\nstore a credit card then charge it on whatever schedule you like. Feel free to get in touch if\nyou really think this should be a core feature and worth the effort.\n\n## Incoming Notifications\n\nSome gateways (e.g. Cybersource, GoPay) offer HTTP notifications to inform the merchant about the completion (or, in\ngeneral, status) of the payment. To assist with handling such notifications, the `acceptNotification()` method will\nextract the transaction reference and payment status from the HTTP request and return a generic `NotificationInterface`.\n\n```php\n$notification = $gateway->acceptNotification();\n\n$notification->getTransactionReference(); // A reference provided by the gateway to represent this transaction\n$notification->getTransactionStatus(); // Current status of the transaction, one of NotificationInterface::STATUS_*\n$notification->getMessage(); // Additional message, if any, provided by the gateway\n\n// update the status of the corresponding transaction in your database\n```\n\n**Note:** some earlier gateways used the `completeAuthorize` and `completePurchase` messages to handle the incoming\nnotifications. These are being converted and the `complete*` messages deprecated.\nThey won't be removed in OmniPay 2.x, but it is advisable to switch to the `acceptNotification` message when convenient.\nAn example is Sage Pay Server [completeAuthorize](https://github.com/thephpleague/omnipay-sagepay/blob/master/src/ServerGateway.php#L81)\nwhich is now handled by [acceptNotification](https://github.com/thephpleague/omnipay-sagepay/blob/master/src/ServerGateway.php#L40).\n\n## Example Application\n\nAn example application is provided in the [omnipay/example](https://github.com/thephpleague/omnipay-example) repo.\nYou can run it using PHP's built in web server (PHP 5.4+):\n\n    $ php composer.phar update --dev\n    $ php -S localhost:8000\n\nFor more information, see the [Omnipay example application](https://github.com/thephpleague/omnipay-example).\n\n## Support\n\nIf you are having general issues with Omnipay, we suggest posting on\n[Stack Overflow](http://stackoverflow.com/). Be sure to add the\n[omnipay tag](http://stackoverflow.com/questions/tagged/omnipay) so it can be easily found.\n\nIf you want to keep up to date with release anouncements, discuss ideas for the project,\nor ask more detailed questions, there is also a [mailing list](https://groups.google.com/forum/#!forum/omnipay) which\nyou can subscribe to.\n\nIf you believe you have found a bug, please report it using the GitHub issue tracker\nfor the appropriate package, or better yet, fork the library and submit a pull request.\n\n## Security\nIf you discover any security related issues, please email barryvdh@gmail.com instead of using the issue tracker.\n\n\n## Feedback\n\n**Please provide feedback!** We want to make this library useful in as many projects as possible.\nPlease head on over to the [mailing list](https://groups.google.com/forum/#!forum/omnipay)\nand point out what you do and don't like, or fork the project and make suggestions. **No issue is too small.**\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.015625,
          "content": "{\n    \"name\": \"league/omnipay\",\n    \"type\": \"metapackage\",\n    \"description\": \"Omnipay payment processing library\",\n    \"keywords\": [\n        \"omnipay\",\n        \"checkout\",\n        \"creditcard\",\n        \"payment\"\n    ],\n    \"homepage\": \"https://omnipay.thephpleague.com/\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Adrian Macneil\",\n            \"email\": \"adrian@adrianmacneil.com\"\n        },\n        {\n            \"name\": \"Barry vd. Heuvel\",\n            \"email\": \"barryvdh@gmail.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^7.2|^8.0\",\n        \"omnipay/common\": \"^3.1\",\n        \"php-http/discovery\": \"^1.14\",\n        \"php-http/guzzle7-adapter\": \"^1\"\n    },\n    \"require-dev\": {\n        \"omnipay/tests\": \"^3|^4\"\n    },\n    \"autoload-dev\": {\n        \"psr-4\": { \"Omnipay\\\\Tests\\\\\" : \"tests\" }\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"3.2.x-dev\"\n        }\n    },\n    \"scripts\": {\n        \"test\": \"phpunit\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.7275390625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\">\n  <coverage>\n    <include>\n      <directory>./src</directory>\n    </include>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"Omnipay Test Suite\">\n      <directory>./tests/</directory>\n    </testsuite>\n  </testsuites>\n</phpunit>\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}