{
  "metadata": {
    "timestamp": 1736712255513,
    "page": 2,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "doctrine/orm",
      "stars": 9954,
      "defaultBranch": "3.3.x",
      "files": [
        {
          "name": ".doctrine-project.json",
          "type": "blob",
          "size": 2.6787109375,
          "content": "{\n    \"active\": true,\n    \"name\": \"Object Relational Mapper\",\n    \"shortName\": \"ORM\",\n    \"slug\": \"orm\",\n    \"docsSlug\": \"doctrine-orm\",\n    \"versions\": [\n        {\n            \"name\": \"4.0\",\n            \"branchName\": \"4.0.x\",\n            \"slug\": \"latest\",\n            \"upcoming\": true\n        },\n        {\n            \"name\": \"3.4\",\n            \"branchName\": \"3.4.x\",\n            \"slug\": \"3.4\",\n            \"upcoming\": true\n        },\n        {\n            \"name\": \"3.3\",\n            \"branchName\": \"3.3.x\",\n            \"slug\": \"3.3\",\n            \"current\": true\n        },\n        {\n            \"name\": \"3.2\",\n            \"branchName\": \"3.2.x\",\n            \"slug\": \"3.2\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.1\",\n            \"branchName\": \"3.1.x\",\n            \"slug\": \"3.1\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.0\",\n            \"branchName\": \"3.0.x\",\n            \"slug\": \"3.0\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.21\",\n            \"branchName\": \"2.21.x\",\n            \"slug\": \"2.21\",\n            \"upcoming\": true\n        },\n        {\n            \"name\": \"2.20\",\n            \"branchName\": \"2.20.x\",\n            \"slug\": \"2.20\",\n            \"maintained\": true\n        },\n        {\n            \"name\": \"2.19\",\n            \"branchName\": \"2.19.x\",\n            \"slug\": \"2.19\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.18\",\n            \"branchName\": \"2.18.x\",\n            \"slug\": \"2.18\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.17\",\n            \"branchName\": \"2.17.x\",\n            \"slug\": \"2.17\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.16\",\n            \"branchName\": \"2.16.x\",\n            \"slug\": \"2.16\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.15\",\n            \"branchName\": \"2.15.x\",\n            \"slug\": \"2.15\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.14\",\n            \"branchName\": \"2.14.x\",\n            \"slug\": \"2.14\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.13\",\n            \"branchName\": \"2.13.x\",\n            \"slug\": \"2.13\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.12\",\n            \"branchName\": \"2.12.x\",\n            \"slug\": \"2.12\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.11\",\n            \"branchName\": \"2.11.x\",\n            \"slug\": \"2.11\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.10\",\n            \"branchName\": \"2.10.x\",\n            \"slug\": \"2.10\",\n            \"maintained\": false\n        }\n    ]\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.5830078125,
          "content": "/.github export-ignore\n/ci export-ignore\n/docs export-ignore\n/tests export-ignore\n/tools export-ignore\n.doctrine-project.json export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\nbuild.properties export-ignore\nbuild.properties.dev export-ignore\nbuild.xml export-ignore\nCONTRIBUTING.md export-ignore\nphpunit.xml.dist export-ignore\nrun-all.sh export-ignore\nphpcs.xml.dist export-ignore\nphpbench.json export-ignore\nphpstan.neon export-ignore\nphpstan-baseline.neon export-ignore\nphpstan-dbal2.neon export-ignore\nphpstan-params.neon export-ignore\nphpstan-persistence2.neon export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2041015625,
          "content": "build/\nlogs/\nreports/\ndist/\ndownload/\n/.settings/\n.buildpath\n.project\n.idea\n*.iml\nvendor/\n/tests/Doctrine/Performance/history.db\n/.phpcs-cache\ncomposer.lock\n.phpunit.cache\n.phpunit.result.cache\n/*.phpunit.xml\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.4599609375,
          "content": "# Contribute to Doctrine\n\nThank you for contributing to Doctrine!\n\nBefore we can merge your Pull-Request here are some guidelines that you need to follow.\nThese guidelines exist not to annoy you, but to keep the code base clean,\nunified and future proof.\n\nDoctrine has [general contributing guidelines][contributor workflow], make\nsure you follow them.\n\n[contributor workflow]: https://www.doctrine-project.org/contribute/index.html\n\n## Coding Standard\n\nThis project follows [`doctrine/coding-standard`][coding standard homepage].\nYou may fix many some of the issues with `vendor/bin/phpcbf`.\n\n[coding standard homepage]: https://github.com/doctrine/coding-standard\n\n## Unit-Tests\n\nPlease try to add a test for your pull-request.\n\n* If you want to fix a bug or provide a reproduce case, create a test file in\n  ``tests/Tests/ORM/Functional/Ticket`` with the name of the ticket,\n  ``DDC1234Test.php`` for example.\n* If you want to contribute new functionality add unit- or functional tests\n  depending on the scope of the feature.\n\nYou can run the unit-tests by calling ``vendor/bin/phpunit`` from the root of the project.\nIt will run all the tests with an in memory SQLite database.\n\nIn order to do that, you will need a fresh copy of the ORM, and you\nwill have to run a composer installation in the project:\n\n```sh\ngit clone git@github.com:doctrine/orm.git\ncd orm\ncomposer install\n```\n\nYou will also need to enable the PHP extension that provides the SQLite driver\nfor PDO: `pdo_sqlite`. How to do so depends on your system, but checking that it\nis enabled can universally be done with `php -m`: that command should list the\nextension.\n\nTo run the testsuite against another database, copy the ``phpunit.xml.dist``\nto for example ``mysql.phpunit.xml`` and edit the parameters. You can\ntake a look at the ``ci/github/phpunit`` directory for some examples. Then run:\n\n    vendor/bin/phpunit -c mysql.phpunit.xml\n\nIf you do not provide these parameters, the test suite will use an in-memory\nsqlite database.\n\nTips for creating unit tests:\n\n1. If you put a test into the `Ticket` namespace as described above, put the testcase and all entities into the same class.\n   See `https://github.com/doctrine/orm/tree/3.0.x/tests/Tests/ORM/Functional/Ticket/DDC2306Test.php` for an\n   example.\n\n## Getting merged\n\nPlease allow us time to review your pull requests. We will give our best to review\neverything as fast as possible, but cannot always live up to our own expectations.\n\nThank you very much again for your contribution!\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0302734375,
          "content": "Copyright (c) Doctrine Project\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.3564453125,
          "content": "|                      [4.0.x][4.0]                      |                      [3.4.x][3.4]                      |                      [3.3.x][3.3]                      |                      [2.21.x][2.21]                      |                      [2.20.x][2.20]                      |\n|:------------------------------------------------------:|:------------------------------------------------------:|:------------------------------------------------------:|:--------------------------------------------------------:|:--------------------------------------------------------:|\n|           [![Build status][4.0 image]][4.0]            |           [![Build status][3.4 image]][3.4]            |           [![Build status][3.3 image]][3.3]            |           [![Build status][2.21 image]][2.21]            |           [![Build status][2.20 image]][2.20]            |\n| [![Coverage Status][4.0 coverage image]][4.0 coverage] | [![Coverage Status][3.4 coverage image]][3.4 coverage] | [![Coverage Status][3.3 coverage image]][3.3 coverage] | [![Coverage Status][2.21 coverage image]][2.21 coverage] | [![Coverage Status][2.20 coverage image]][2.20 coverage] |\n\nDoctrine ORM is an object-relational mapper for PHP 8.1+ that provides transparent persistence\nfor PHP objects. It sits on top of a powerful database abstraction layer (DBAL). One of its key features\nis the option to write database queries in a proprietary object oriented SQL dialect called Doctrine Query Language (DQL),\ninspired by Hibernate's HQL. This provides developers with a powerful alternative to SQL that maintains flexibility\nwithout requiring unnecessary code duplication.\n\n\n## More resources:\n\n* [Website](http://www.doctrine-project.org)\n* [Documentation](https://www.doctrine-project.org/projects/doctrine-orm/en/stable/index.html)\n\n\n  [4.0 image]: https://github.com/doctrine/orm/actions/workflows/continuous-integration.yml/badge.svg?branch=4.0.x\n  [4.0]: https://github.com/doctrine/orm/tree/4.0.x\n  [4.0 coverage image]: https://codecov.io/gh/doctrine/orm/branch/4.0.x/graph/badge.svg\n  [4.0 coverage]: https://codecov.io/gh/doctrine/orm/branch/4.0.x\n  [3.4 image]: https://github.com/doctrine/orm/actions/workflows/continuous-integration.yml/badge.svg?branch=3.4.x\n  [3.4]: https://github.com/doctrine/orm/tree/3.4.x\n  [3.4 coverage image]: https://codecov.io/gh/doctrine/orm/branch/3.4.x/graph/badge.svg\n  [3.4 coverage]: https://codecov.io/gh/doctrine/orm/branch/3.4.x\n  [3.3 image]: https://github.com/doctrine/orm/actions/workflows/continuous-integration.yml/badge.svg?branch=3.3.x\n  [3.3]: https://github.com/doctrine/orm/tree/3.3.x\n  [3.3 coverage image]: https://codecov.io/gh/doctrine/orm/branch/3.3.x/graph/badge.svg\n  [3.3 coverage]: https://codecov.io/gh/doctrine/orm/branch/3.3.x\n  [2.21 image]: https://github.com/doctrine/orm/actions/workflows/continuous-integration.yml/badge.svg?branch=2.21.x\n  [2.21]: https://github.com/doctrine/orm/tree/2.21.x\n  [2.21 coverage image]: https://codecov.io/gh/doctrine/orm/branch/2.21.x/graph/badge.svg\n  [2.21 coverage]: https://codecov.io/gh/doctrine/orm/branch/2.21.x\n  [2.20 image]: https://github.com/doctrine/orm/actions/workflows/continuous-integration.yml/badge.svg?branch=2.20.x\n  [2.20]: https://github.com/doctrine/orm/tree/2.20.x\n  [2.20 coverage image]: https://codecov.io/gh/doctrine/orm/branch/2.20.x/graph/badge.svg\n  [2.20 coverage]: https://codecov.io/gh/doctrine/orm/branch/2.20.x\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.7666015625,
          "content": "Security\n========\n\nThe Doctrine library is operating very close to your database and as such needs\nto handle and make assumptions about SQL injection vulnerabilities.\n\nIt is vital that you understand how Doctrine approaches security, because\nwe cannot protect you from SQL injection.\n\nPlease read the documentation chapter on Security in Doctrine DBAL and ORM to\nunderstand the assumptions we make.\n\n- [DBAL Security Page](https://www.doctrine-project.org/projects/doctrine-dbal/en/stable/reference/security.html)\n- [ORM Security Page](https://www.doctrine-project.org/projects/doctrine-orm/en/stable/reference/security.html)\n\nIf you find a Security bug in Doctrine, please follow our\n[Security reporting guidelines](https://www.doctrine-project.org/policies/security.html#reporting).\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 94.373046875,
          "content": "# Upgrade to 3.4\n\nUsing the same class several times in a discriminator map is deprecated.\nIn 4.0, this will be an error.\n\n# Upgrade to 3.3\n\n## Deprecate `DatabaseDriver`\n\nThe class `Doctrine\\ORM\\Mapping\\Driver\\DatabaseDriver` is deprecated without replacement.\n\n## Add `Doctrine\\ORM\\Query\\OutputWalker` interface, deprecate `Doctrine\\ORM\\Query\\SqlWalker::getExecutor()`\n\nOutput walkers should implement the new `\\Doctrine\\ORM\\Query\\OutputWalker` interface and create\n`Doctrine\\ORM\\Query\\Exec\\SqlFinalizer` instances instead of `Doctrine\\ORM\\Query\\Exec\\AbstractSqlExecutor`s.\nThe output walker must not base its workings on the query `firstResult`/`maxResult` values, so that the \n`SqlFinalizer` can be kept in the query cache and used regardless of the actual `firstResult`/`maxResult` values.\nAny operation dependent on `firstResult`/`maxResult` should take place within the `SqlFinalizer::createExecutor()`\nmethod. Details can be found at https://github.com/doctrine/orm/pull/11188.\n\n\n# Upgrade to 3.2\n\n## Deprecate the `NotSupported` exception\n\nThe class `Doctrine\\ORM\\Exception\\NotSupported` is deprecated without replacement.\n\n## Deprecate remaining `Serializable` implementation\n\nRelying on `SequenceGenerator` implementing the `Serializable` is deprecated\nbecause that interface won't be implemented in ORM 4 anymore.\n\nThe following methods are deprecated:\n\n* `SequenceGenerator::serialize()`\n* `SequenceGenerator::unserialize()`\n\n## `orm:schema-tool:update` option `--complete` is deprecated\n\nThat option behaves as a no-op, and is deprecated. It will be removed in 4.0.\n\n## Deprecate properties `$indexes` and `$uniqueConstraints` of `Doctrine\\ORM\\Mapping\\Table`\n\nThe properties `$indexes` and `$uniqueConstraints` have been deprecated since they had no effect at all.\nThe preferred way of defining indices and unique constraints is by\nusing the `\\Doctrine\\ORM\\Mapping\\UniqueConstraint` and `\\Doctrine\\ORM\\Mapping\\Index` attributes.\n\n# Upgrade to 3.1\n\n## Deprecate `Doctrine\\ORM\\Mapping\\ReflectionEnumProperty`\n\nThis class is deprecated and will be removed in 4.0.\nInstead, use `Doctrine\\Persistence\\Reflection\\EnumReflectionProperty` from\n`doctrine/persistence`.\n\n## Deprecate passing null to `ClassMetadata::fullyQualifiedClassName()`\n\nPassing `null` to `Doctrine\\ORM\\ClassMetadata::fullyQualifiedClassName()` is\ndeprecated and will no longer be possible in 4.0.\n\n## Deprecate array access\n\nUsing array access on instances of the following classes is deprecated:\n\n- `Doctrine\\ORM\\Mapping\\DiscriminatorColumnMapping`\n- `Doctrine\\ORM\\Mapping\\EmbedClassMapping`\n- `Doctrine\\ORM\\Mapping\\FieldMapping`\n- `Doctrine\\ORM\\Mapping\\JoinColumnMapping`\n- `Doctrine\\ORM\\Mapping\\JoinTableMapping`\n\n# Upgrade to 3.0\n\n## BC BREAK: Calling `ClassMetadata::getAssociationMappedByTargetField()` with the owning side of an association now throws an exception\n\nPreviously, calling\n`Doctrine\\ORM\\Mapping\\ClassMetadata::getAssociationMappedByTargetField()` with\nthe owning side of an association returned `null`, which was undocumented, and\nwrong according to the phpdoc of the parent method.\n\nIf you do not know whether you are on the owning or inverse side of an association,\nyou can use  `Doctrine\\ORM\\Mapping\\ClassMetadata::isAssociationInverseSide()`\nto find out.\n\n## BC BREAK: `Doctrine\\ORM\\Proxy\\Autoloader` no longer extends `Doctrine\\Common\\Proxy\\Autoloader`\n\nMake sure to use the former when writing a type declaration or an `instanceof` check.\n\n## Minor BC BREAK: Changed order of arguments passed to `OneToOne`, `ManyToOne` and `Index` mapping PHP attributes\n\nTo keep PHP mapping attributes consistent, order of arguments passed to above attributes has been changed\nso `$targetEntity` is a first argument now. This change affects only non-named arguments usage.\n\n## BC BREAK: AUTO keyword for identity generation defaults to IDENTITY for PostgreSQL when using `doctrine/dbal` 4\n\nWhen using the `AUTO` strategy to let Doctrine determine the identity generation mechanism for\nan entity, and when using `doctrine/dbal` 4, PostgreSQL now uses `IDENTITY`\ninstead of `SEQUENCE` or `SERIAL`.\n* If you want to upgrade your existing tables to identity columns, you will need to follow [migration to identity columns on PostgreSQL](https://www.doctrine-project.org/projects/doctrine-dbal/en/4.0/how-to/postgresql-identity-migration.html)\n* If you want to keep using SQL sequences, you need to configure the ORM this way:\n```php\nuse Doctrine\\DBAL\\Platforms\\PostgreSQLPlatform;\nuse Doctrine\\ORM\\Configuration;\nuse Doctrine\\ORM\\Mapping\\ClassMetadata;\n\nassert($configuration instanceof Configuration);\n$configuration->setIdentityGenerationPreferences([\n    PostgreSQLPlatform::CLASS => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]);\n```\n\n## BC BREAK: Throw exceptions when using illegal attributes on Embeddable\n\nThere are only a few attributes allowed on an embeddable such as `#[Column]` or\n`#[Embedded]`. Previously all others that target entity classes where ignored,\nnow they throw an exception.\n\n## BC BREAK: Partial objects are removed\n\nWARNING: This was relaxed in ORM 3.2 when partial was re-allowed for array-hydration.\n\n- The `PARTIAL` keyword in DQL no longer exists (reintroduced in ORM 3.2)\n- `Doctrine\\ORM\\Query\\AST\\PartialObjectExpression` is removed. (reintroduced in ORM 3.2)\n- `Doctrine\\ORM\\Query\\SqlWalker::HINT_PARTIAL` (reintroduced in ORM 3.2) and\n  `Doctrine\\ORM\\Query::HINT_FORCE_PARTIAL_LOAD` are removed.\n- `Doctrine\\ORM\\EntityManager*::getPartialReference()` is removed.\n\n## BC BREAK: `Doctrine\\ORM\\Persister\\Entity\\EntityPersister::executeInserts()` return type changed to `void`\n\nImplementors should adapt to the new signature, and should call\n`UnitOfWork::assignPostInsertId()` for each entry in the previously returned\narray.\n\n## BC BREAK: `Doctrine\\ORM\\Proxy\\ProxyFactory` no longer extends abstract factory from `doctrine/common`\n\nIt is no longer possible to call methods, constants or properties inherited\nfrom that class on a `ProxyFactory` instance.\n\n`Doctrine\\ORM\\Proxy\\ProxyFactory::createProxyDefinition()` and\n`Doctrine\\ORM\\Proxy\\ProxyFactory::resetUninitializedProxy()` are removed as well.\n\n## BC BREAK: lazy ghosts are enabled unconditionally\n\n`Doctrine\\ORM\\Configuration::setLazyGhostObjectEnabled()` and\n`Doctrine\\ORM\\Configuration::isLazyGhostObjectEnabled()` are now no-ops and\nwill be deprecated in 3.1.0\n\n## BC BREAK: collisions in identity map are unconditionally rejected\n\n`Doctrine\\ORM\\Configuration::setRejectIdCollisionInIdentityMap()` and\n`Doctrine\\ORM\\Configuration::isRejectIdCollisionInIdentityMapEnabled()` are now\nno-ops and will be deprecated in 3.1.0.\n\n## BC BREAK: Lifecycle callback mapping on embedded classes is now explicitly forbidden\n\nLifecycle callback mapping on embedded classes produced no effect, and is now\nexplicitly forbidden to point out mistakes.\n\n## BC BREAK: The `NOTIFY` change tracking policy is removed\n\nYou should use `DEFERRED_EXPLICIT` instead.\n\n## BC BREAK: `Mapping\\Driver\\XmlDriver::__construct()` third argument is now enabled by default\n\nThe third argument to\n`Doctrine\\ORM\\Mapping\\Driver\\XmlDriver::__construct()` was introduced to\nlet users opt-in to XML validation, that is now always enabled by default.\n\nAs a consequence, the same goes for\n`Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver`, and for\n`Doctrine\\ORM\\ORMSetup::createXMLMetadataConfiguration()`.\n\n## BC BREAK: `Mapping\\Driver\\AttributeDriver::__construct()` second argument is now a no-op\n\nThe second argument to\n`Doctrine\\ORM\\Mapping\\Driver\\AttributeDriver::__construct()` was introduced to\nlet users opt-in to a new behavior, that is now always enforced, regardless of\nthe value of that argument.\n\n## BC BREAK: `Query::setDQL()` and `Query::setFirstResult()` no longer accept `null`\n\nThe `$dqlQuery` argument of `Doctrine\\ORM\\Query::setDQL()` must always be a\nstring.\n\nThe `$firstResult` argument of `Doctrine\\ORM\\Query::setFirstResult()` must\nalways be an integer.\n\n## BC BREAK: `orm:schema-tool:update` option `--complete` is now a no-op\n\n`orm:schema-tool:update` now behaves as if `--complete` was provided,\nregardless of whether it is provided or not.\n\n## BC BREAK: Removed `Doctrine\\ORM\\Proxy\\Proxy` interface.\n\nUse `Doctrine\\Persistence\\Proxy` instead to check whether proxies are initialized.\n\n## BC BREAK: Overriding fields or associations declared in other than mapped superclasses\n\nAs stated in the documentation, fields and associations may only be overridden when being inherited\nfrom mapped superclasses. Overriding them for parent entity classes now throws a `MappingException`.\n\n## BC BREAK: Undeclared entity inheritance now throws a `MappingException`\n\nAs soon as an entity class inherits from another entity class, inheritance has to\nbe declared by adding the appropriate configuration for the root entity.\n\n## Removed `getEntityManager()` in `Doctrine\\ORM\\Event\\OnClearEventArgs` and `Doctrine\\ORM\\Event\\*FlushEventArgs`\n\nUse `getObjectManager()` instead.\n\n## BC BREAK: Removed `Doctrine\\ORM\\Mapping\\ClassMetadataInfo` class\n\nUse `Doctrine\\ORM\\Mapping\\ClassMetadata` instead.\n\n## BC BREAK: Removed `Doctrine\\ORM\\Event\\LifecycleEventArgs` class.\n\nUse one of the dedicated event classes instead:\n\n* `Doctrine\\ORM\\Event\\PrePersistEventArgs`\n* `Doctrine\\ORM\\Event\\PreUpdateEventArgs`\n* `Doctrine\\ORM\\Event\\PreRemoveEventArgs`\n* `Doctrine\\ORM\\Event\\PostPersistEventArgs`\n* `Doctrine\\ORM\\Event\\PostUpdateEventArgs`\n* `Doctrine\\ORM\\Event\\PostRemoveEventArgs`\n* `Doctrine\\ORM\\Event\\PostLoadEventArgs`\n\n## BC BREAK: Removed `AttributeDriver::$entityAnnotationClasses` and `AttributeDriver::getReader()`\n\n* If you need to change the behavior of `AttributeDriver::isTransient()`,\n  override that method instead.\n* The attribute reader is internal to the driver and should not be accessed from outside.\n\n## BC BREAK: Removed `Doctrine\\ORM\\Query\\AST\\InExpression`\n\nThe AST parser will create a `InListExpression` or a `InSubselectExpression` when\nencountering an `IN ()` DQL expression instead of a generic `InExpression`.\n\nAs a consequence, `SqlWalker::walkInExpression()` has been replaced by\n`SqlWalker::walkInListExpression()` and `SqlWalker::walkInSubselectExpression()`.\n\n## BC BREAK: Changed `EntityManagerInterface#refresh($entity)`, `EntityManagerDecorator#refresh($entity)` and `UnitOfWork#refresh($entity)` signatures\n\nThe new signatures of these methods add an optional `LockMode|int|null $lockMode`\nparam with default `null` value (no lock).\n\n## BC Break: Removed AnnotationDriver\n\nThe annotation driver and anything related to annotation has been removed.\nPlease migrate to another mapping driver.\n\nThe `Doctrine\\ORM\\Mapping\\Annotation` maker interface has been removed in favor of the new\n`Doctrine\\ORM\\Mapping\\MappingAttribute` interface.\n\n## BC BREAK: Removed `EntityManager::create()`\n\nThe constructor of `EntityManager` is now public and must be used instead of the `create()` method.\nHowever, the constructor expects a `Connection` while `create()` accepted an array with connection parameters.\nYou can pass that array to DBAL's `Doctrine\\DBAL\\DriverManager::getConnection()` method to bootstrap the\nconnection.\n\n## BC BREAK: Removed `QueryBuilder` methods and constants.\n\nThe following `QueryBuilder` constants and methods have been removed:\n\n1. `SELECT`,\n2. `DELETE`,\n3. `UPDATE`,\n4. `STATE_DIRTY`,\n5. `STATE_CLEAN`,\n6. `getState()`,\n7. `getType()`.\n\n## BC BREAK: Omitting only the alias argument for `QueryBuilder::update` and `QueryBuilder::delete` is not supported anymore\n\nWhen building an UPDATE or DELETE query and when passing a class/type to the function, the alias argument must not be omitted.\n\n### Before\n\n```php\n$qb = $em->createQueryBuilder()\n    ->delete('User u')\n    ->where('u.id = :user_id')\n    ->setParameter('user_id', 1);\n```\n\n### After\n\n```php\n$qb = $em->createQueryBuilder()\n    ->delete('User', 'u')\n    ->where('u.id = :user_id')\n    ->setParameter('user_id', 1);\n```\n\n## BC BREAK: Split output walkers and tree walkers\n\n`SqlWalker` and its child classes don't implement the `TreeWalker` interface\nanymore.\n\nThe following methods have been removed from the `TreeWalker` interface and\nfrom the `TreeWalkerAdapter` and `TreeWalkerChain` classes:\n\n* `setQueryComponent()`\n* `walkSelectClause()`\n* `walkFromClause()`\n* `walkFunction()`\n* `walkOrderByClause()`\n* `walkOrderByItem()`\n* `walkHavingClause()`\n* `walkJoin()`\n* `walkSelectExpression()`\n* `walkQuantifiedExpression()`\n* `walkSubselect()`\n* `walkSubselectFromClause()`\n* `walkSimpleSelectClause()`\n* `walkSimpleSelectExpression()`\n* `walkAggregateExpression()`\n* `walkGroupByClause()`\n* `walkGroupByItem()`\n* `walkDeleteClause()`\n* `walkUpdateClause()`\n* `walkUpdateItem()`\n* `walkWhereClause()`\n* `walkConditionalExpression()`\n* `walkConditionalTerm()`\n* `walkConditionalFactor()`\n* `walkConditionalPrimary()`\n* `walkExistsExpression()`\n* `walkCollectionMemberExpression()`\n* `walkEmptyCollectionComparisonExpression()`\n* `walkNullComparisonExpression()`\n* `walkInExpression()`\n* `walkInstanceOfExpression()`\n* `walkLiteral()`\n* `walkBetweenExpression()`\n* `walkLikeExpression()`\n* `walkStateFieldPathExpression()`\n* `walkComparisonExpression()`\n* `walkInputParameter()`\n* `walkArithmeticExpression()`\n* `walkArithmeticTerm()`\n* `walkStringPrimary()`\n* `walkArithmeticFactor()`\n* `walkSimpleArithmeticExpression()`\n* `walkPathExpression()`\n* `walkResultVariable()`\n* `getExecutor()`\n\nThe following changes have been made to the abstract `TreeWalkerAdapter` class:\n\n* The method `setQueryComponent()` is now protected.\n* The method `_getQueryComponents()` has been removed in favor of\n  `getQueryComponents()`.\n\n## BC BREAK: Removed identity columns emulation through sequences\n\nIf the platform you are using does not support identity columns, you should\nswitch to the `SEQUENCE` strategy.\n\n## BC BREAK: Made setters parameters mandatory\n\nThe following methods require an argument when being called. Pass `null`\ninstead of omitting the argument.\n\n* `Doctrine\\ORM\\Event\\OnClassMetadataNotFoundEventArgs::setFoundMetadata()`\n* `Doctrine\\ORM\\AbstractQuery::setHydrationCacheProfile()`\n* `Doctrine\\ORM\\AbstractQuery::setResultCache()`\n* `Doctrine\\ORM\\AbstractQuery::setResultCacheProfile()`\n\n## BC BREAK: New argument to `NamingStrategy::joinColumnName()`\n\n### Before\n\n```php\n<?php\nclass MyStrategy implements NamingStrategy\n{\n    /**\n     * @param string $propertyName A property name.\n     */\n    public function joinColumnName($propertyName): string\n    {\n        // …\n    }\n}\n```\n\n### After\n\nThe `class-string` type for `$className` can be inherited from the signature of\nthe interface.\n\n```php\n<?php\nclass MyStrategy implements NamingStrategy\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function joinColumnName(string $propertyName, string $className): string\n    {\n        // …\n    }\n}\n```\n\n## BC BREAK: Remove `StaticPHPDriver` and `DriverChain`\n\nUse `Doctrine\\Persistence\\Mapping\\Driver\\StaticPHPDriver` and\n`Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain` from\n`doctrine/persistence` instead.\n\n## BC BREAK: `UnderscoreNamingStrategy` is number aware only\n\nThe second argument to `UnderscoreNamingStrategy::__construct()` was dropped,\nthe strategy can no longer be unaware of numbers.\n\n## BC BREAK: Remove `Doctrine\\ORM\\Tools\\DisconnectedClassMetadataFactory`\n\nNo replacement is provided.\n\n## BC BREAK: Remove support for `Type::canRequireSQLConversion()`\n\nThis feature was deprecated in DBAL 3.3.0 and will be removed in DBAL 4.0.\nThe value conversion methods are now called regardless of the type.\n\nThe `MappingException::sqlConversionNotAllowedForIdentifiers()` method has been removed\nas no longer relevant.\n\n## BC Break: Removed the `doctrine` binary.\n\nThe documentation explains how the console tools can be bootstrapped for\nstandalone usage:\n\nhttps://www.doctrine-project.org/projects/doctrine-orm/en/stable/reference/tools.html\n\nThe method `ConsoleRunner::printCliConfigTemplate()` has been removed as well\nbecause it was only useful in the context of the `doctrine` binary.\n\n## BC Break: Removed `EntityManagerHelper` and related logic\n\nAll console commands require a `$entityManagerProvider` to be passed via the\nconstructor. Commands won't try to get the entity manager from a previously\nregistered `em` console helper.\n\nThe following classes have been removed:\n\n* `Doctrine\\ORM\\Tools\\Console\\EntityManagerProvider\\HelperSetManagerProvider`\n* `Doctrine\\ORM\\Tools\\Console\\Helper\\EntityManagerHelper`\n\nThe following breaking changes have been applied to `Doctrine\\ORM\\Tools\\Console\\ConsoleRunner`:\n\n* The method `createHelperSet()` has been removed.\n* The methods `run()` and `createApplication()` don't accept an instance of\n  `HelperSet` as first argument anymore.\n* The method `addCommands()` requires an instance of `EntityManagerProvider`\n  as second argument now.\n\n## BC Break: `Exception\\ORMException` is no longer a class, but an interface\n\nAll methods in `Doctrine\\ORM\\ORMException` have been extracted to dedicated exceptions.\n\n * `missingMappingDriverImpl()` => `Exception\\MissingMappingDriverImplementation::create()`\n * `unrecognizedField()` => `Persisters\\Exception\\UnrecognizedField::byName()`\n * `unexpectedAssociationValue()` => `Exception\\UnexpectedAssociationValue::create()`\n * `invalidOrientation()` => `Persisters\\Exception\\InvalidOrientation::fromClassNameAndField()`\n * `entityManagerClosed()` => `Exception\\EntityManagerClosed::create()`\n * `invalidHydrationMode()` => `Exception\\InvalidHydrationMode::fromMode()`\n * `mismatchedEventManager()` => `Exception\\MismatchedEventManager::create()`\n * `findByRequiresParameter()` => `Repository\\Exception\\InvalidMagicMethodCall::onMissingParameter()`\n * `invalidMagicCall()` => `Repository\\Exception\\InvalidMagicMethodCall::becauseFieldNotFoundIn()`\n * `invalidFindByInverseAssociation()` => `Repository\\Exception\\InvalidFindByCall::fromInverseSideUsage()`\n * `invalidResultCacheDriver()` => `Cache\\Exception\\InvalidResultCacheDriver::create()`\n * `notSupported()` => `Exception\\NotSupported::create()`\n * `queryCacheNotConfigured()` => `QueryCacheNotConfigured::create()`\n * `metadataCacheNotConfigured()` => `Cache\\Exception\\MetadataCacheNotConfigured::create()`\n * `queryCacheUsesNonPersistentCache()` => `Cache\\Exception\\QueryCacheUsesNonPersistentCache::fromDriver()`\n * `metadataCacheUsesNonPersistentCache()` => `Cache\\Exception\\MetadataCacheUsesNonPersistentCache::fromDriver()`\n * `proxyClassesAlwaysRegenerating()` => `Exception\\ProxyClassesAlwaysRegenerating::create()`\n * `invalidEntityRepository()` => `Exception\\InvalidEntityRepository::fromClassName()`\n * `missingIdentifierField()` => `Exception\\MissingIdentifierField::fromFieldAndClass()`\n * `unrecognizedIdentifierFields()` => `Exception\\UnrecognizedIdentifierFields::fromClassAndFieldNames()`\n * `cantUseInOperatorOnCompositeKeys()` => `Persisters\\Exception\\CantUseInOperatorOnCompositeKeys::create()`\n\n## BC Break: `CacheException` is no longer a class, but an interface\n\nAll methods in `Doctrine\\ORM\\Cache\\CacheException` have been extracted to dedicated exceptions.\n\n * `updateReadOnlyCollection()` => `Cache\\Exception\\CannotUpdateReadOnlyCollection::fromEntityAndField()`\n * `updateReadOnlyEntity()` => `Cache\\Exception\\CannotUpdateReadOnlyEntity::fromEntity()`\n * `nonCacheableEntity()` => `Cache\\Exception\\NonCacheableEntity::fromEntity()`\n * `nonCacheableEntityAssociation()` => `Cache\\Exception\\NonCacheableEntityAssociation::fromEntityAndField()`\n\n\n## BC Break: Missing type declaration added for identifier generators\n\nAlthough undocumented, it was possible to configure a custom repository\nclass that implements `ObjectRepository` but does not extend the\n`EntityRepository` base class. Repository classes have to extend\n`EntityRepository` now.\n\n## BC BREAK: Removed support for entity namespace alias\n\n- `EntityManager::getRepository()` no longer accepts the entity namespace alias\n  notation.\n- `Configuration::addEntityNamespace()` and\n  `Configuration::getEntityNamespace()` have been removed.\n\n## BC BREAK: Remove helper methods from `AbstractCollectionPersister`\n\nThe following protected methods of\n`Doctrine\\ORM\\Cache\\Persister\\Collection\\AbstractCollectionPersister`\nhave been removed.\n\n* `evictCollectionCache()`\n* `evictElementCache()`\n\n## BC BREAK: `Doctrine\\ORM\\Query\\TreeWalkerChainIterator`\n\nThis class has been removed without replacement.\n\n## BC BREAK: Remove quoting methods from `ClassMetadata`\n\nThe following methods have been removed from the class metadata because\nquoting is handled by implementations of `Doctrine\\ORM\\Mapping\\QuoteStrategy`:\n\n* `getQuotedIdentifierColumnNames()`\n* `getQuotedColumnName()`\n* `getQuotedTableName()`\n* `getQuotedJoinTableName()`\n\n## BC BREAK: Remove ability to merge detached entities\n\nMerge semantics was a poor fit for the PHP \"share-nothing\" architecture.\nIn addition to that, merging caused multiple issues with data integrity\nin the managed entity graph, which was constantly spawning more edge-case\nbugs/scenarios.\n\nThe method `UnitOfWork::merge()` has been removed. The method\n`EntityManager::merge()` will throw an exception on each call.\n\n## BC BREAK: Removed ability to partially flush/commit entity manager and unit of work\n\nThe following methods don't accept a single entity or an array of entities anymore:\n\n* `Doctrine\\ORM\\EntityManager::flush()`\n* `Doctrine\\ORM\\Decorator\\EntityManagerDecorator::flush()`\n* `Doctrine\\ORM\\UnitOfWork::commit()`\n\nThe semantics of `flush()` and `commit()` will remain the same, but the change\ntracking will be performed on all entities managed by the unit of work, and not\njust on the provided entities, as the parameter is now completely ignored.\n\n## BC BREAK: Removed ability to partially clear entity manager and unit of work\n\n* Passing an argument other than `null` to `EntityManager::clear()` will raise\n  an exception.\n* The unit of work cannot be cleared partially anymore. Passing an argument to\n  `UnitOfWork::clear()` does not have any effect anymore; the unit of work is\n  cleared completely.\n* The method `EntityRepository::clear()` has been removed.\n* The methods `getEntityClass()` and `clearsAllEntities()` have been removed\n  from `OnClearEventArgs`.\n\n## BC BREAK: Remove support for Doctrine Cache\n\nThe Doctrine Cache library is not supported anymore. The following methods\nhave been removed from `Doctrine\\ORM\\Configuration`:\n\n* `getQueryCacheImpl()`\n* `setQueryCacheImpl()`\n* `getHydrationCacheImpl()`\n* `setHydrationCacheImpl()`\n* `getMetadataCacheImpl()`\n* `setMetadataCacheImpl()`\n\nThe methods have been replaced by PSR-6 compatible counterparts\n(just strip the `Impl` suffix from the old name to get the new one).\n\n## BC BREAK: Remove `Doctrine\\ORM\\Configuration::newDefaultAnnotationDriver`\n\nThis functionality has been moved to the new `ORMSetup` class. Call\n`Doctrine\\ORM\\ORMSetup::createDefaultAnnotationDriver()` to create\na new annotation driver.\n\n## BC BREAK: Remove `Doctrine\\ORM\\Tools\\Setup`\n\nIn our effort to migrate from Doctrine Cache to PSR-6, the `Setup` class which\naccepted a Doctrine Cache instance in each method has been removed.\n\nThe replacement is `Doctrine\\ORM\\ORMSetup` which accepts a PSR-6\ncache instead.\n\n## BC BREAK: Removed named queries\n\nAll APIs related to named queries have been removed.\n\n## BC BREAK: Remove old cache accessors and mutators from query classes\n\nThe following methods have been removed from `AbstractQuery`:\n\n* `setResultCacheDriver()`\n* `getResultCacheDriver()`\n* `useResultCache()`\n* `getResultCacheLifetime()`\n* `getResultCacheId()`\n\nThe following methods have been removed from `Query`:\n\n* `setQueryCacheDriver()`\n* `getQueryCacheDriver()`\n\n## BC BREAK: Remove `Doctrine\\ORM\\Cache\\MultiGetRegion`\n\nThe interface has been merged into `Doctrine\\ORM\\Cache\\Region`.\n\n## BC BREAK: Rename `AbstractIdGenerator::generate()` to `generateId()`\n\n* Implementations of `AbstractIdGenerator` have to implement the method\n  `generateId()`.\n* The method `generate()` has been removed from `AbstractIdGenerator`.\n\n## BC BREAK: Remove cache settings inspection\n\nDoctrine does not provide its own cache implementation anymore and relies on\nthe PSR-6 standard instead. As a consequence, we cannot determine anymore\nwhether a given cache adapter is suitable for a production environment.\nBecause of that, functionality that aims to do so has been removed:\n\n* `Configuration::ensureProductionSettings()`\n* the `orm:ensure-production-settings` console command\n\n## BC BREAK: PSR-6-based second level cache\n\nThe second level cache has been reworked to consume a PSR-6 cache. Using a\nDoctrine Cache instance is not supported anymore.\n\n* `DefaultCacheFactory`: The constructor expects a PSR-6 cache item pool as\n  second argument now.\n* `DefaultMultiGetRegion`: This class has been removed.\n* `DefaultRegion`:\n    * The constructor expects a PSR-6 cache item pool as second argument now.\n    * The protected `$cache` property is removed.\n    * The properties `$name` and `$lifetime` as well as the constant\n      `REGION_KEY_SEPARATOR` and the method `getCacheEntryKey()` are\n      `private` now.\n    * The method `getCache()` has been removed.\n\n\n## BC Break: Remove `Doctrine\\ORM\\Mapping\\Driver\\PHPDriver`\n\nUse `StaticPHPDriver` instead when you want to programmatically configure\nentity metadata.\n\n## BC BREAK: Remove `Doctrine\\ORM\\EntityManagerInterface#transactional()`\n\nThis method has been replaced by `Doctrine\\ORM\\EntityManagerInterface#wrapInTransaction()`.\n\n## BC BREAK: Removed support for schema emulation.\n\nThe ORM no longer attempts to emulate schemas on SQLite.\n\n## BC BREAK: Remove `Setup::registerAutoloadDirectory()`\n\nUse Composer's autoloader instead.\n\n## BC BREAK: Remove YAML mapping drivers.\n\nIf your code relies on `YamlDriver` or `SimpleYamlDriver`, you **MUST** migrate to\nattribute, annotation or XML drivers instead.\n\nYou can use the `orm:convert-mapping` command to convert your metadata mapping to XML\n_before_ upgrading to 3.0:\n\n```sh\nphp doctrine orm:convert-mapping xml /path/to/mapping-path-converted-to-xml\n```\n\n## BC BREAK: Remove code generators and related console commands\n\nThese console commands have been removed:\n\n* `orm:convert-d1-schema`\n* `orm:convert-mapping`\n* `orm:generate:entities`\n* `orm:generate-repositories`\n\nThese classes have been deprecated:\n\n* `Doctrine\\ORM\\Tools\\ConvertDoctrine1Schema`\n* `Doctrine\\ORM\\Tools\\EntityGenerator`\n* `Doctrine\\ORM\\Tools\\EntityRepositoryGenerator`\n\nThe entire `Doctrine\\ORM\\Tools\\Export` namespace has been removed as well.\n\n## BC BREAK: Removed `Doctrine\\ORM\\Version`\n\nUse Composer's runtime API if you _really_ need to check the version of the ORM package at runtime.\n\n## BC BREAK: EntityRepository::count() signature change\n\nThe argument `$criteria` of `Doctrine\\ORM\\EntityRepository::count()` is now\noptional. Overrides in child classes should be made compatible.\n\n## BC BREAK: changes in exception hierarchy\n\n- `Doctrine\\ORM\\ORMException` has been removed\n- `Doctrine\\ORM\\Exception\\ORMException` is now an interface\n\n## Variadic methods now use native variadics\nThe following methods were using `func_get_args()` to simulate a variadic argument:\n- `Doctrine\\ORM\\Query\\Expr#andX()`\n- `Doctrine\\ORM\\Query\\Expr#orX()`\n- `Doctrine\\ORM\\QueryBuilder#select()`\n- `Doctrine\\ORM\\QueryBuilder#addSelect()`\n- `Doctrine\\ORM\\QueryBuilder#where()`\n- `Doctrine\\ORM\\QueryBuilder#andWhere()`\n- `Doctrine\\ORM\\QueryBuilder#orWhere()`\n- `Doctrine\\ORM\\QueryBuilder#groupBy()`\n- `Doctrine\\ORM\\QueryBuilder#andGroupBy()`\n- `Doctrine\\ORM\\QueryBuilder#having()`\n- `Doctrine\\ORM\\QueryBuilder#andHaving()`\n- `Doctrine\\ORM\\QueryBuilder#orHaving()`\nA variadic argument is now actually used in their signatures signature (`...$x`).\nSignatures of overridden methods should be changed accordingly\n\n## Minor BC BREAK: removed `Doctrine\\ORM\\EntityManagerInterface#copy()`\n\nMethod `Doctrine\\ORM\\EntityManagerInterface#copy()` never got its implementation and is removed in 3.0.\n\n## BC BREAK: Removed classes related to UUID and TABLE generator strategies\n\nThe following classes have been removed:\n- `Doctrine\\ORM\\Id\\TableGenerator`\n- `Doctrine\\ORM\\Id\\UuidGenerator`\n\nUsing the `UUID` strategy for generating identifiers is not supported anymore.\n\n## BC BREAK: Removed `Query::iterate()`\n\nThe deprecated method `Query::iterate()` has been removed along with the\nfollowing classes and methods:\n\n- `AbstractHydrator::iterate()`\n- `AbstractHydrator::hydrateRow()`\n- `IterableResult`\n\nUse `toIterable()` instead.\n\n# Upgrade to 2.20\n\n## Add `Doctrine\\ORM\\Query\\OutputWalker` interface, deprecate `Doctrine\\ORM\\Query\\SqlWalker::getExecutor()`\n\nOutput walkers should implement the new `\\Doctrine\\ORM\\Query\\OutputWalker` interface and create\n`Doctrine\\ORM\\Query\\Exec\\SqlFinalizer` instances instead of `Doctrine\\ORM\\Query\\Exec\\AbstractSqlExecutor`s.\nThe output walker must not base its workings on the query `firstResult`/`maxResult` values, so that the\n`SqlFinalizer` can be kept in the query cache and used regardless of the actual `firstResult`/`maxResult` values.\nAny operation dependent on `firstResult`/`maxResult` should take place within the `SqlFinalizer::createExecutor()`\nmethod. Details can be found at https://github.com/doctrine/orm/pull/11188.\n\n## Explictly forbid property hooks\n\nProperty hooks are not supported yet by Doctrine ORM. Until support is added,\nthey are explicitly forbidden because the support would result in a breaking\nchange in behavior.\n\nProgress on this is tracked at https://github.com/doctrine/orm/issues/11624 .\n\n## PARTIAL DQL syntax is undeprecated\n\nUse of the PARTIAL keyword is not deprecated anymore in DQL, because we will be\nable to support PARTIAL objects with PHP 8.4 Lazy Objects and\nSymfony/VarExporter in a better way. When we decided to remove this feature\nthese two abstractions did not exist yet.\n\nWARNING: If you want to upgrade to 3.x and still use PARTIAL keyword in DQL\nwith array or object hydrators, then you have to directly migrate to ORM 3.3.x or higher.\nPARTIAL keyword in DQL is not available in 3.0, 3.1 and 3.2 of ORM.\n\n## Deprecate `\\Doctrine\\ORM\\Query\\Parser::setCustomOutputTreeWalker()`\n\nUse the `\\Doctrine\\ORM\\Query::HINT_CUSTOM_OUTPUT_WALKER` query hint to set the output walker\nclass instead of setting it through the `\\Doctrine\\ORM\\Query\\Parser::setCustomOutputTreeWalker()` method\non the parser instance.\n\n# Upgrade to 2.19\n\n## Deprecate calling `ClassMetadata::getAssociationMappedByTargetField()` with the owning side of an association\n\nCalling\n`Doctrine\\ORM\\Mapping\\ClassMetadata::getAssociationMappedByTargetField()` with\nthe owning side of an association returns `null`, which is undocumented, and\nwrong according to the phpdoc of the parent method.\n\nIf you do not know whether you are on the owning or inverse side of an association,\nyou can use  `Doctrine\\ORM\\Mapping\\ClassMetadata::isAssociationInverseSide()`\nto find out.\n\n## Deprecate `Doctrine\\ORM\\Query\\Lexer::T_*` constants\n\nUse `Doctrine\\ORM\\Query\\TokenType::T_*` instead.\n\n# Upgrade to 2.17\n\n## Deprecate annotations classes for named queries\n\nThe following classes have been deprecated:\n\n* `Doctrine\\ORM\\Mapping\\NamedNativeQueries`\n* `Doctrine\\ORM\\Mapping\\NamedNativeQuery`\n* `Doctrine\\ORM\\Mapping\\NamedQueries`\n* `Doctrine\\ORM\\Mapping\\NamedQuery`\n\n## Deprecate `Doctrine\\ORM\\Query\\Exec\\AbstractSqlExecutor::_sqlStatements`\n\nUse `Doctrine\\ORM\\Query\\Exec\\AbstractSqlExecutor::sqlStatements` instead.\n\n## Undeprecate `Doctrine\\ORM\\Proxy\\Autoloader`\n\nIt will be a full-fledged class, no longer extending\n`Doctrine\\Common\\Proxy\\Autoloader` in 3.0.x.\n\n## Deprecated: reliance on the non-optimal defaults that come with the `AUTO` identifier generation strategy\n\nWhen the `AUTO` identifier generation strategy was introduced, the best\nstrategy at the time was selected for each database platform.\nA lot of time has passed since then, and with ORM 3.0.0 and DBAL 4.0.0, support\nfor better strategies will be added.\n\nBecause of that, it is now deprecated to rely on the historical defaults when\nthey differ from what we will be recommended in the future.\n\nInstead, you should pick a strategy for each database platform you use, and it\nwill be used when using `AUTO`. As of now, only PostgreSQL is affected by this.\n\nIt is recommended that PostgreSQL users configure their existing and new\napplications to use `SEQUENCE` until `doctrine/dbal` 4.0.0 is released:\n\n```php\nuse Doctrine\\DBAL\\Platforms\\PostgreSQLPlatform;\nuse Doctrine\\ORM\\Configuration;\n\nassert($configuration instanceof Configuration);\n$configuration->setIdentityGenerationPreferences([\n    PostgreSQLPlatform::CLASS => ClassMetadata::GENERATOR_TYPE_SEQUENCE,\n]);\n```\n\nWhen DBAL 4 is released, `AUTO` will result in `IDENTITY`, and the above\nconfiguration should be removed to migrate to it.\n\n## Deprecate `EntityManagerInterface::getPartialReference()`\n\nThis method does not have a replacement and will be removed in 3.0.\n\n## Deprecate not-enabling lazy-ghosts\n\nNot enabling lazy ghost objects is deprecated. In ORM 3.0, they will be always enabled.\nEnsure `Doctrine\\ORM\\Configuration::setLazyGhostObjectEnabled(true)` is called to enable them.\n\n# Upgrade to 2.16\n\n## Deprecated accepting duplicate IDs in the identity map\n\nFor any given entity class and ID value, there should be only one object instance\nrepresenting the entity.\n\nIn https://github.com/doctrine/orm/pull/10785, a check was added that will guard this\nin the identity map. The most probable cause for violations of this rule are collisions\nof application-provided IDs.\n\nIn ORM 2.16.0, the check was added by throwing an exception. In ORM 2.16.1, this will be\nchanged to a deprecation notice. ORM 3.0 will make it an exception again. Use\n`\\Doctrine\\ORM\\Configuration::setRejectIdCollisionInIdentityMap()` if you want to opt-in\nto the new mode.\n\n## Potential changes to the order in which `INSERT`s are executed\n\nIn https://github.com/doctrine/orm/pull/10547, the commit order computation was improved\nto fix a series of bugs where a correct (working) commit order was previously not found.\nAlso, the new computation may get away with fewer queries being executed: By inserting\nreferred-to entities first and using their ID values for foreign key fields in subsequent\n`INSERT` statements, additional `UPDATE` statements that were previously necessary can be\navoided.\n\nWhen using database-provided, auto-incrementing IDs, this may lead to IDs being assigned\nto entities in a different order than it was previously the case.\n\n## Deprecated returning post insert IDs from `EntityPersister::executeInserts()`\n\nPersisters implementing `\\Doctrine\\ORM\\Persisters\\Entity\\EntityPersister` should no longer\nreturn an array of post insert IDs from their `::executeInserts()` method. Make the\npersister call `Doctrine\\ORM\\UnitOfWork::assignPostInsertId()` instead.\n\n## Changing the way how reflection-based mapping drivers report fields, deprecated the \"old\" mode\n\nIn ORM 3.0, a change will be made regarding how the `AttributeDriver` reports field mappings.\nThis change is necessary to be able to detect (and reject) some invalid mapping configurations.\n\nTo avoid surprises during 2.x upgrades, the new mode is opt-in. It can be activated on the\n`AttributeDriver` and `AnnotationDriver` by setting the `$reportFieldsWhereDeclared`\nconstructor parameter to `true`. It will cause `MappingException`s to be thrown when invalid\nconfigurations are detected.\n\nNot enabling the new mode will cause a deprecation notice to be raised. In ORM 3.0,\nonly the new mode will be available.\n\n# Upgrade to 2.15\n\n## Deprecated configuring `JoinColumn` on the inverse side of one-to-one associations\n\nFor one-to-one associations, the side using the `mappedBy` attribute is the inverse side.\nThe owning side is the entity with the table containing the foreign key. Using `JoinColumn`\nconfiguration on the _inverse_ side now triggers a deprecation notice and will be an error\nin 3.0.\n\n## Deprecated overriding fields or associations not declared in mapped superclasses\n\nAs stated in the documentation, fields and associations may only be overridden when being inherited\nfrom mapped superclasses. Overriding them for parent entity classes now triggers a deprecation notice\nand will be an error in 3.0.\n\n## Deprecated undeclared entity inheritance\n\nAs soon as an entity class inherits from another entity class, inheritance has to\nbe declared by adding the appropriate configuration for the root entity.\n\n## Deprecated stubs for \"concrete table inheritance\"\n\nThis third way of mapping class inheritance was never implemented. Code stubs are\nnow deprecated and will be removed in 3.0.\n\n* `\\Doctrine\\ORM\\Mapping\\ClassMetadataInfo::INHERITANCE_TYPE_TABLE_PER_CLASS` constant\n* `\\Doctrine\\ORM\\Mapping\\ClassMetadataInfo::isInheritanceTypeTablePerClass()` method\n* Using `TABLE_PER_CLASS` as the value for the `InheritanceType` attribute or annotation\n  or in XML configuration files.\n\n# Upgrade to 2.14\n\n## Deprecated `Doctrine\\ORM\\Persisters\\Exception\\UnrecognizedField::byName($field)` method.\n\nUse `Doctrine\\ORM\\Persisters\\Exception\\UnrecognizedField::byFullyQualifiedName($className, $field)` instead.\n\n## Deprecated constants of `Doctrine\\ORM\\Internal\\CommitOrderCalculator`\n\nThe following public constants have been deprecated:\n\n* `CommitOrderCalculator::NOT_VISITED`\n* `CommitOrderCalculator::IN_PROGRESS`\n* `CommitOrderCalculator::VISITED`\n\nThese constants were used for internal purposes. Relying on them is discouraged.\n\n## Deprecated `Doctrine\\ORM\\Query\\AST\\InExpression`\n\nThe AST parser will create a `InListExpression` or a `InSubselectExpression` when\nencountering an `IN ()` DQL expression instead of a generic `InExpression`.\n\nAs a consequence, `SqlWalker::walkInExpression()` has been deprecated in favor of\n`SqlWalker::walkInListExpression()` and `SqlWalker::walkInSubselectExpression()`.\n\n## Deprecated constructing a `CacheKey` without `$hash`\n\nThe `Doctrine\\ORM\\Cache\\CacheKey` class has an explicit constructor now with\nan optional parameter `$hash`. That parameter will become mandatory in 3.0.\n\n## Deprecated `AttributeDriver::$entityAnnotationClasses`\n\nIf you need to change the behavior of `AttributeDriver::isTransient()`,\noverride that method instead.\n\n## Deprecated incomplete schema updates\n\nUsing `orm:schema-tool:update` without passing the `--complete` flag is\ndeprecated. Use schema asset filtering if you need to preserve assets not\nmanaged by DBAL.\n\nLikewise, calling `SchemaTool::updateSchema()` or\n`SchemaTool::getUpdateSchemaSql()` with a second argument is deprecated.\n\n## Deprecated annotation mapping driver.\n\nPlease switch to one of the other mapping drivers. Native attributes which PHP\nsupports since version 8.0 are probably your best option.\n\nAs a consequence, the following methods are deprecated:\n- `ORMSetup::createAnnotationMetadataConfiguration`\n- `ORMSetup::createDefaultAnnotationDriver`\n\nThe marker interface `Doctrine\\ORM\\Mapping\\Annotation` is deprecated as well.\nAll annotation/attribute classes implement\n`Doctrine\\ORM\\Mapping\\MappingAttribute` now.\n\n## Deprecated `Doctrine\\ORM\\Proxy\\Proxy` interface.\n\nUse `Doctrine\\Persistence\\Proxy` instead to check whether proxies are initialized.\n\n## Deprecated `Doctrine\\ORM\\Event\\LifecycleEventArgs` class.\n\nIt will be removed in 3.0. Use one of the dedicated event classes instead:\n\n* `Doctrine\\ORM\\Event\\PrePersistEventArgs`\n* `Doctrine\\ORM\\Event\\PreUpdateEventArgs`\n* `Doctrine\\ORM\\Event\\PreRemoveEventArgs`\n* `Doctrine\\ORM\\Event\\PostPersistEventArgs`\n* `Doctrine\\ORM\\Event\\PostUpdateEventArgs`\n* `Doctrine\\ORM\\Event\\PostRemoveEventArgs`\n* `Doctrine\\ORM\\Event\\PostLoadEventArgs`\n\n# Upgrade to 2.13\n\n## Deprecated `EntityManager::create()`\n\nThe constructor of `EntityManager` is now public and should be used instead of the `create()` method.\nHowever, the constructor expects a `Connection` while `create()` accepted an array with connection parameters.\nYou can pass that array to DBAL's `Doctrine\\DBAL\\DriverManager::getConnection()` method to bootstrap the\nconnection.\n\n## Deprecated `QueryBuilder` methods and constants.\n\n1. The `QueryBuilder::getState()` method has been deprecated as the builder state is an internal concern.\n2. Relying on the type of the query being built by using `QueryBuilder::getType()` has been deprecated.\n   If necessary, track the type of the query being built outside of the builder.\n\nThe following `QueryBuilder` constants related to the above methods have been deprecated:\n\n1. `SELECT`,\n2. `DELETE`,\n3. `UPDATE`,\n4. `STATE_DIRTY`,\n5. `STATE_CLEAN`.\n\n## Deprecated omitting only the alias argument for `QueryBuilder::update` and `QueryBuilder::delete`\n\nWhen building an UPDATE or DELETE query and when passing a class/type to the function, the alias argument must not be omitted.\n\n### Before\n\n```php\n$qb = $em->createQueryBuilder()\n    ->delete('User u')\n    ->where('u.id = :user_id')\n    ->setParameter('user_id', 1);\n```\n\n### After\n\n```php\n$qb = $em->createQueryBuilder()\n    ->delete('User', 'u')\n    ->where('u.id = :user_id')\n    ->setParameter('user_id', 1);\n```\n\n## Deprecated using the `IDENTITY` identifier strategy on platform that do not support identity columns\n\nIf identity columns are emulated with sequences on the platform you are using,\nyou should switch to the `SEQUENCE` strategy.\n\n## Deprecated passing `null` to `Doctrine\\ORM\\Query::setFirstResult()`\n\n`$query->setFirstResult(null);` is equivalent to `$query->setFirstResult(0)`.\n\n## Deprecated calling setters without arguments\n\nThe following methods will require an argument in 3.0. Pass `null` instead of\nomitting the argument.\n\n* `Doctrine\\ORM\\Event\\OnClassMetadataNotFoundEventArgs::setFoundMetadata()`\n* `Doctrine\\ORM\\AbstractQuery::setHydrationCacheProfile()`\n* `Doctrine\\ORM\\AbstractQuery::setResultCache()`\n* `Doctrine\\ORM\\AbstractQuery::setResultCacheProfile()`\n\n## Deprecated passing invalid fetch modes to `AbstractQuery::setFetchMode()`\n\nCalling `AbstractQuery::setFetchMode()` with anything else than\n`Doctrine\\ORM\\Mapping::FETCH_EAGER` results in\n`Doctrine\\ORM\\Mapping::FETCH_LAZY` being used. Relying on that behavior is\ndeprecated and will result in an exception in 3.0.\n\n## Deprecated `getEntityManager()` in `Doctrine\\ORM\\Event\\OnClearEventArgs` and `Doctrine\\ORM\\Event\\*FlushEventArgs`\n\nThis method has been deprecated in:\n\n* `Doctrine\\ORM\\Event\\OnClearEventArgs`\n* `Doctrine\\ORM\\Event\\OnFlushEventArgs`\n* `Doctrine\\ORM\\Event\\PostFlushEventArgs`\n* `Doctrine\\ORM\\Event\\PreFlushEventArgs`\n\nIt will be removed in 3.0. Use `getObjectManager()` instead.\n\n## Prepare split of output walkers and tree walkers\n\nIn 3.0, `SqlWalker` and its child classes won't implement the `TreeWalker`\ninterface anymore. Relying on that inheritance is deprecated.\n\nThe following methods of the `TreeWalker` interface have been deprecated:\n\n* `setQueryComponent()`\n* `walkSelectClause()`\n* `walkFromClause()`\n* `walkFunction()`\n* `walkOrderByClause()`\n* `walkOrderByItem()`\n* `walkHavingClause()`\n* `walkJoin()`\n* `walkSelectExpression()`\n* `walkQuantifiedExpression()`\n* `walkSubselect()`\n* `walkSubselectFromClause()`\n* `walkSimpleSelectClause()`\n* `walkSimpleSelectExpression()`\n* `walkAggregateExpression()`\n* `walkGroupByClause()`\n* `walkGroupByItem()`\n* `walkDeleteClause()`\n* `walkUpdateClause()`\n* `walkUpdateItem()`\n* `walkWhereClause()`\n* `walkConditionalExpression()`\n* `walkConditionalTerm()`\n* `walkConditionalFactor()`\n* `walkConditionalPrimary()`\n* `walkExistsExpression()`\n* `walkCollectionMemberExpression()`\n* `walkEmptyCollectionComparisonExpression()`\n* `walkNullComparisonExpression()`\n* `walkInExpression()`\n* `walkInstanceOfExpression()`\n* `walkLiteral()`\n* `walkBetweenExpression()`\n* `walkLikeExpression()`\n* `walkStateFieldPathExpression()`\n* `walkComparisonExpression()`\n* `walkInputParameter()`\n* `walkArithmeticExpression()`\n* `walkArithmeticTerm()`\n* `walkStringPrimary()`\n* `walkArithmeticFactor()`\n* `walkSimpleArithmeticExpression()`\n* `walkPathExpression()`\n* `walkResultVariable()`\n* `getExecutor()`\n\nThe following changes have been made to the abstract `TreeWalkerAdapter` class:\n\n* All implementations of now-deprecated `TreeWalker` methods have been\n  deprecated as well.\n* The method `setQueryComponent()` will become protected in 3.0. Calling it\n  publicly is deprecated.\n* The method `_getQueryComponents()` is deprecated, call `getQueryComponents()`\n  instead.\n\nOn the `TreeWalkerChain` class, all implementations of now-deprecated\n`TreeWalker` methods have been deprecated as well.  However, `SqlWalker` is\nunaffected by those deprecations and will continue to implement all of those\nmethods.\n\n## Deprecated passing `null` to `Doctrine\\ORM\\Query::setDQL()`\n\nDoing `$query->setDQL(null);` achieves nothing.\n\n## Deprecated omitting second argument to `NamingStrategy::joinColumnName`\n\nWhen implementing `NamingStrategy`, it is deprecated to implement\n`joinColumnName()` with only one argument.\n\n### Before\n\n```php\n<?php\nclass MyStrategy implements NamingStrategy\n{\n    /**\n     * @param string $propertyName A property name.\n     */\n    public function joinColumnName($propertyName): string\n    {\n        // …\n    }\n}\n```\n\n### After\n\nFor backward-compatibility reasons, the parameter has to be optional, but can\nbe documented as guaranteed to be a `class-string`.\n\n```php\n<?php\nclass MyStrategy implements NamingStrategy\n{\n    /**\n     * @param string       $propertyName A property name.\n     * @param class-string $className\n     */\n    public function joinColumnName($propertyName, $className = null): string\n    {\n        // …\n    }\n}\n```\n\n## Deprecated methods related to named queries\n\nThe following methods have been deprecated:\n\n- `Doctrine\\ORM\\Query\\ResultSetMappingBuilder::addNamedNativeQueryMapping()`\n- `Doctrine\\ORM\\Query\\ResultSetMappingBuilder::addNamedNativeQueryResultClassMapping()`\n- `Doctrine\\ORM\\Query\\ResultSetMappingBuilder::addNamedNativeQueryResultSetMapping()`\n- `Doctrine\\ORM\\Query\\ResultSetMappingBuilder::addNamedNativeQueryEntityResultMapping()`\n\n## Deprecated classes related to Doctrine 1 and reverse engineering\n\nThe following classes have been deprecated:\n\n- `Doctrine\\ORM\\Tools\\ConvertDoctrine1Schema`\n- `Doctrine\\ORM\\Tools\\DisconnectedClassMetadataFactory`\n\n## Deprecate `ClassMetadataInfo` usage\n\nIt is deprecated to pass `Doctrine\\ORM\\Mapping\\ClassMetadataInfo` instances\nthat are not also instances of `Doctrine\\ORM\\ClassMetadata` to the following\nmethods:\n\n- `Doctrine\\ORM\\Mapping\\Builder\\ClassMetadataBuilder::__construct()`\n- `Doctrine\\ORM\\Mapping\\Driver\\DatabaseDriver::loadMetadataForClass()`\n- `Doctrine\\ORM\\Tools\\SchemaValidator::validateClass()`\n\n# Upgrade to 2.12\n\n## Deprecated the `doctrine` binary.\n\nThe documentation explains how the console tools can be bootstrapped for\nstandalone usage.\n\nThe method `ConsoleRunner::printCliConfigTemplate()` is deprecated because it\nwas only useful in the context of the `doctrine` binary.\n\n## Deprecate omitting `$class` argument to `ORMInvalidArgumentException::invalidIdentifierBindingEntity()`\n\nTo make it easier to identify understand the cause for that exception, it is\ndeprecated to omit the class name when calling\n`ORMInvalidArgumentException::invalidIdentifierBindingEntity()`.\n\n## Deprecate `Doctrine\\ORM\\Tools\\Console\\Helper\\EntityManagerHelper`\n\nUsing a console helper to provide the ORM's console commands with one or\nmultiple entity managers had been deprecated with 2.9 already. This leaves\nThe `EntityManagerHelper` class with no purpose which is why it is now\ndeprecated too. Applications that still rely on the `em` console helper, can\neasily recreate that class in their own codebase.\n\n## Deprecate custom repository classes that don't extend `EntityRepository`\n\nAlthough undocumented, it is currently possible to configure a custom repository\nclass that implements `ObjectRepository` but does not extend the\n`EntityRepository` base class.\n\nThis is now deprecated. Please extend `EntityRepository` instead.\n\n## Deprecated more APIs related to entity namespace aliases\n\n```diff\n-$config = $entityManager->getConfiguration();\n-$config->addEntityNamespace('CMS', 'My\\App\\Cms');\n+use My\\App\\Cms\\CmsUser;\n\n-$entityManager->getRepository('CMS:CmsUser');\n+$entityManager->getRepository(CmsUser::class);\n```\n\n## Deprecate `AttributeDriver::getReader()` and `AnnotationDriver::getReader()`\n\nThat method was inherited from the abstract `AnnotationDriver` class of\n`doctrine/persistence`, and does not seem to serve any purpose.\n\n## Un-deprecate `Doctrine\\ORM\\Proxy\\Proxy`\n\nBecause no forward-compatible new proxy solution had been implemented yet, the\ncurrent proxy mechanism is not considered deprecated anymore for the time\nbeing. This applies to the following interfaces/classes:\n\n* `Doctrine\\ORM\\Proxy\\Proxy`\n* `Doctrine\\ORM\\Proxy\\ProxyFactory`\n\nThese methods have been un-deprecated:\n\n* `Doctrine\\ORM\\Configuration::getAutoGenerateProxyClasses()`\n* `Doctrine\\ORM\\Configuration::getProxyDir()`\n* `Doctrine\\ORM\\Configuration::getProxyNamespace()`\n\nNote that the `Doctrine\\ORM\\Proxy\\Autoloader` remains deprecated and will be removed in 3.0.\n\n## Deprecate helper methods from `AbstractCollectionPersister`\n\nThe following protected methods of\n`Doctrine\\ORM\\Cache\\Persister\\Collection\\AbstractCollectionPersister`\nare not in use anymore and will be removed.\n\n* `evictCollectionCache()`\n* `evictElementCache()`\n\n## Deprecate `Doctrine\\ORM\\Query\\TreeWalkerChainIterator`\n\nThis class won't have a replacement.\n\n## Deprecate `OnClearEventArgs::getEntityClass()` and `OnClearEventArgs::clearsAllEntities()`\n\nThese methods will be removed in 3.0 along with the ability to partially clear\nthe entity manager.\n\n## Deprecate `Doctrine\\ORM\\Configuration::newDefaultAnnotationDriver`\n\nThis functionality has been moved to the new `ORMSetup` class. Call\n`Doctrine\\ORM\\ORMSetup::createDefaultAnnotationDriver()` to create\na new annotation driver.\n\n## Deprecate `Doctrine\\ORM\\Tools\\Setup`\n\nIn our effort to migrate from Doctrine Cache to PSR-6, the `Setup` class which\naccepted a Doctrine Cache instance in each method has been deprecated.\n\nThe replacement is `Doctrine\\ORM\\ORMSetup` which accepts a PSR-6\ncache instead.\n\n## Deprecate `Doctrine\\ORM\\Cache\\MultiGetRegion`\n\nThe interface will be merged with `Doctrine\\ORM\\Cache\\Region` in 3.0.\n\n# Upgrade to 2.11\n\n## Rename `AbstractIdGenerator::generate()` to `generateId()`\n\nImplementations of `AbstractIdGenerator` have to override the method\n`generateId()` without calling the parent implementation. Not doing so is\ndeprecated. Calling `generate()` on any `AbstractIdGenerator` implementation\nis deprecated.\n\n## PSR-6-based second level cache\n\nThe second level cache has been reworked to consume a PSR-6 cache. Using a\nDoctrine Cache instance is deprecated.\n\n* `DefaultCacheFactory`: The constructor expects a PSR-6 cache item pool as\n  second argument now.\n* `DefaultMultiGetRegion`: This class is deprecated in favor of `DefaultRegion`.\n* `DefaultRegion`:\n  * The constructor expects a PSR-6 cache item pool as second argument now.\n  * The protected `$cache` property is deprecated.\n  * The properties `$name` and `$lifetime` as well as the constant\n   `REGION_KEY_SEPARATOR` and the method `getCacheEntryKey()` are flagged as\n   `@internal` now. They all will become `private` in 3.0.\n  * The method `getCache()` is deprecated without replacement.\n\n## Deprecated: `Doctrine\\ORM\\Mapping\\Driver\\PHPDriver`\n\nUse `StaticPHPDriver` instead when you want to programmatically configure\nentity metadata.\n\nYou can convert mappings with the `orm:convert-mapping` command or more simply\nin this case, `include` the metadata file from the `loadMetadata` static method\nused by the `StaticPHPDriver`.\n\n## Deprecated: `Setup::registerAutoloadDirectory()`\n\nUse Composer's autoloader instead.\n\n## Deprecated: `AbstractHydrator::hydrateRow()`\n\nFollowing the deprecation of the method `AbstractHydrator::iterate()`, the\nmethod `hydrateRow()` has been deprecated as well.\n\n## Deprecate cache settings inspection\n\nDoctrine does not provide its own cache implementation anymore and relies on\nthe PSR-6 standard instead. As a consequence, we cannot determine anymore\nwhether a given cache adapter is suitable for a production environment.\nBecause of that, functionality that aims to do so has been deprecated:\n\n* `Configuration::ensureProductionSettings()`\n* the `orm:ensure-production-settings` console command\n\n# Upgrade to 2.10\n\n## BC Break: `UnitOfWork` now relies on SPL object IDs, not hashes\n\nWhen calling the following methods, you are now supposed to use the result of\n`spl_object_id()`, and not `spl_object_hash()`:\n- `UnitOfWork::clearEntityChangeSet()`\n- `UnitOfWork::setOriginalEntityProperty()`\n\n## BC Break: Removed `TABLE` id generator strategy\n\nThe implementation was unfinished for 14 years.\nIt is now deprecated to rely on:\n- `Doctrine\\ORM\\Id\\TableGenerator`;\n- `Doctrine\\ORM\\Mapping\\ClassMetadata::GENERATOR_TYPE_TABLE`;\n- `Doctrine\\ORM\\Mapping\\ClassMetadata::$tableGeneratorDefinition`;\n- or `Doctrine\\ORM\\Mapping\\ClassMetadata::isIdGeneratorTable()`.\n\n## New method `Doctrine\\ORM\\EntityManagerInterface#wrapInTransaction($func)`\n\nWorks the same as `Doctrine\\ORM\\EntityManagerInterface#transactional()` but returns any value returned from `$func` closure rather than just _non-empty value returned from the closure or true_.\n\nBecause of BC policy, the method does not exist on the interface yet. This is the example of safe usage:\n\n```php\nfunction foo(EntityManagerInterface $entityManager, callable $func) {\n    if (method_exists($entityManager, 'wrapInTransaction')) {\n        return $entityManager->wrapInTransaction($func);\n    }\n\n    return $entityManager->transactional($func);\n}\n```\n\n`Doctrine\\ORM\\EntityManagerInterface#transactional()` has been deprecated.\n\n## Minor BC BREAK: some exception methods have been removed\n\nThe following methods were not in use and are very unlikely to be used by\ndownstream packages or applications, and were consequently removed:\n\n- `ORMException::entityMissingForeignAssignedId`\n- `ORMException::entityMissingAssignedIdForField`\n- `ORMException::invalidFlushMode`\n\n## Deprecated: database-side UUID generation\n\n[DB-generated UUIDs are deprecated as of `doctrine/dbal` 2.8][DBAL deprecation].\nAs a consequence, using the `UUID` strategy for generating identifiers is deprecated as well.\nFurthermore, relying on the following classes and methods is deprecated:\n\n- `Doctrine\\ORM\\Id\\UuidGenerator`\n- `Doctrine\\ORM\\Mapping\\ClassMetadataInfo::isIdentifierUuid()`\n\n[DBAL deprecation]: https://github.com/doctrine/dbal/pull/3212\n\n## Minor BC BREAK: Custom hydrators and `toIterable()`\n\nThe type declaration of the `$stmt` parameter of `AbstractHydrator::toIterable()` has been removed. This change might\nbreak custom hydrator implementations that override this very method.\n\nOverriding this method is not recommended, which is why the method is documented as `@final` now.\n\n```diff\n- public function toIterable(ResultStatement $stmt, ResultSetMapping $resultSetMapping, array $hints = []): iterable\n+ public function toIterable($stmt, ResultSetMapping $resultSetMapping, array $hints = []): iterable\n```\n\n## Deprecated: Entity Namespace Aliases\n\nEntity namespace aliases are deprecated, use the magic ::class constant to abbreviate full class names\nin EntityManager, EntityRepository and DQL.\n\n```diff\n-  $entityManager->find('MyBundle:User', $id);\n+  $entityManager->find(User::class, $id);\n```\n\n# Upgrade to 2.9\n\n## Minor BC BREAK: Setup tool needs cache implementation\n\nWith the deprecation of doctrine/cache, the setup tool might no longer work as expected without a different cache\nimplementation. To work around this:\n* Install symfony/cache: `composer require symfony/cache`. This will keep previous behaviour without any changes\n* Instantiate caches yourself: to use a different cache implementation, pass a cache instance when calling any\n  configuration factory in the setup tool:\n  ```diff\n  - $config = Setup::createAnnotationMetadataConfiguration($paths, $isDevMode, $proxyDir);\n  + $cache = \\Doctrine\\Common\\Cache\\Psr6\\DoctrineProvider::wrap($anyPsr6Implementation);\n  + $config = Setup::createAnnotationMetadataConfiguration($paths, $isDevMode, $proxyDir, $cache);\n  ```\n* As a quick workaround, you can lock the doctrine/cache dependency to work around this: `composer require doctrine/cache ^1.11`.\n  Note that this is only recommended as a bandaid fix, as future versions of ORM will no longer work with doctrine/cache\n  1.11.\n\n## Deprecated: doctrine/cache for metadata caching\n\nThe `Doctrine\\ORM\\Configuration#setMetadataCacheImpl()` method is deprecated and should no longer be used. Please use\n`Doctrine\\ORM\\Configuration#setMetadataCache()` with any PSR-6 cache adapter instead.\n\n## Removed: flushing metadata cache\n\nTo support PSR-6 caches, the `--flush` option for the `orm:clear-cache:metadata` command is ignored. Metadata cache is\nnow always cleared regardless of the cache adapter being used.\n\n# Upgrade to 2.8\n\n## Minor BC BREAK: Failed commit now throw OptimisticLockException\n\nMethod `Doctrine\\ORM\\UnitOfWork#commit()` can throw an OptimisticLockException when a commit silently fails and returns false\nsince `Doctrine\\DBAL\\Connection#commit()` signature changed from returning void to boolean\n\n## Deprecated: `Doctrine\\ORM\\AbstractQuery#iterate()`\n\nThe method `Doctrine\\ORM\\AbstractQuery#iterate()` is deprecated in favor of `Doctrine\\ORM\\AbstractQuery#toIterable()`.\nNote that `toIterable()` yields results of the query, unlike `iterate()` which yielded each result wrapped into an array.\n\n# Upgrade to 2.7\n\n## Added `Doctrine\\ORM\\AbstractQuery#enableResultCache()` and `Doctrine\\ORM\\AbstractQuery#disableResultCache()` methods\n\nMethod `Doctrine\\ORM\\AbstractQuery#useResultCache()` which could be used for both enabling and disabling the cache\n(depending on passed flag) was split into two.\n\n## Minor BC BREAK: paginator output walkers aren't be called anymore on sub-queries for queries without max results\n\nTo optimize DB interaction, `Doctrine\\ORM\\Tools\\Pagination\\Paginator` no longer fetches identifiers to be able to\nperform the pagination with join collections when max results isn't set in the query.\n\n## Minor BC BREAK: tables filtered with `schema_filter` are no longer created\n\nWhen generating schema diffs, if a source table is filtered out by a `schema_filter` expression, then a `CREATE TABLE` was\nalways generated, even if the table already existed. This has been changed in this release and the table will no longer\nbe created.\n\n## Deprecated number unaware `Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy`\n\nIn the last patch of the `v2.6.x` series, we fixed a bug that was not converting names properly when they had numbers\n(e.g.: `base64Encoded` was wrongly converted to `base64encoded` instead of `base64_encoded`).\n\nIn order to not break BC we've introduced a way to enable the fixed behavior using a boolean constructor argument. This\nargument will be removed in 3.0 and the default behavior will be the fixed one.\n\n## Deprecated: `Doctrine\\ORM\\AbstractQuery#useResultCache()`\n\nMethod `Doctrine\\ORM\\AbstractQuery#useResultCache()` is deprecated because it is split into `enableResultCache()`\nand `disableResultCache()`. It will be removed in 3.0.\n\n## Deprecated code generators and related console commands\n\nThese console commands have been deprecated:\n\n * `orm:convert-mapping`\n * `orm:generate:entities`\n * `orm:generate-repositories`\n\nThese classes have been deprecated:\n\n * `Doctrine\\ORM\\Tools\\EntityGenerator`\n * `Doctrine\\ORM\\Tools\\EntityRepositoryGenerator`\n\nWhole Doctrine\\ORM\\Tools\\Export namespace with all its members have been deprecated as well.\n\n## Deprecated `Doctrine\\ORM\\Proxy\\Proxy` marker interface\n\nProxy objects in Doctrine ORM 3.0 will no longer implement `Doctrine\\ORM\\Proxy\\Proxy` nor\n`Doctrine\\Persistence\\Proxy`: instead, they implement\n`ProxyManager\\Proxy\\GhostObjectInterface`.\n\nThese related classes have been deprecated:\n\n * `Doctrine\\ORM\\Proxy\\ProxyFactory`\n * `Doctrine\\ORM\\Proxy\\Autoloader` - we suggest using the composer autoloader instead\n\nThese methods have been deprecated:\n\n * `Doctrine\\ORM\\Configuration#getAutoGenerateProxyClasses()`\n * `Doctrine\\ORM\\Configuration#getProxyDir()`\n * `Doctrine\\ORM\\Configuration#getProxyNamespace()`\n\n## Deprecated `Doctrine\\ORM\\Version`\n\nThe `Doctrine\\ORM\\Version` class is now deprecated and will be removed in Doctrine ORM 3.0:\nplease refrain from checking the ORM version at runtime or use Composer's [runtime API](https://getcomposer.org/doc/07-runtime.md#knowing-whether-package-x-is-installed-in-version-y).\n\n## Deprecated `EntityManager#merge()` method\n\nMerge semantics was a poor fit for the PHP \"share-nothing\" architecture.\nIn addition to that, merging caused multiple issues with data integrity\nin the managed entity graph, which was constantly spawning more edge-case bugs/scenarios.\n\nThe following API methods were therefore deprecated:\n\n* `EntityManager#merge()`\n* `UnitOfWork#merge()`\n\nAn alternative to `EntityManager#merge()` will not be provided by ORM 3.0, since the merging\nsemantics should be part of the business domain rather than the persistence domain of an\napplication. If your application relies heavily on CRUD-alike interactions and/or `PATCH`\nrestful operations, you should look at alternatives such as [JMSSerializer](https://github.com/schmittjoh/serializer).\n\n## Extending `EntityManager` is deprecated\n\nFinal keyword will be added to the `EntityManager::class` in Doctrine ORM 3.0 in order to ensure that EntityManager\n is not used as valid extension point. Valid extension point should be EntityManagerInterface.\n\n## Deprecated `EntityManager#clear($entityName)`\n\nIf your code relies on clearing a single entity type via `EntityManager#clear($entityName)`,\nthe signature has been changed to `EntityManager#clear()`.\n\nThe main reason is that partial clears caused multiple issues with data integrity\nin the managed entity graph, which was constantly spawning more edge-case bugs/scenarios.\n\n## Deprecated `EntityManager#flush($entity)` and `EntityManager#flush($entities)`\n\nIf your code relies on single entity flushing optimisations via\n`EntityManager#flush($entity)`, the signature has been changed to\n`EntityManager#flush()`.\n\nSaid API was affected by multiple data integrity bugs due to the fact\nthat change tracking was being restricted upon a subset of the managed\nentities. The ORM cannot support committing subsets of the managed\nentities while also guaranteeing data integrity, therefore this\nutility was removed.\n\nThe `flush()` semantics will remain the same, but the change tracking will be performed\non all entities managed by the unit of work, and not just on the provided\n`$entity` or `$entities`, as the parameter is now completely ignored.\n\nThe same applies to `UnitOfWork#commit($entity)`, which will simply be\n`UnitOfWork#commit()`.\n\nIf you would still like to perform batching operations over small `UnitOfWork`\ninstances, it is suggested to follow these paths instead:\n\n * eagerly use `EntityManager#clear()` in conjunction with a specific second level\n   cache configuration (see http://docs.doctrine-project.org/projects/doctrine-orm/en/stable/reference/second-level-cache.html)\n * use an explicit change tracking policy (see http://docs.doctrine-project.org/projects/doctrine-orm/en/stable/reference/change-tracking-policies.html)\n\n## Deprecated `YAML` mapping drivers.\n\nIf your code relies on `YamlDriver`  or `SimpleYamlDriver`, you **MUST** change to\nannotation or XML drivers instead.\n\n## Deprecated: `Doctrine\\ORM\\EntityManagerInterface#copy()`\n\nMethod `Doctrine\\ORM\\EntityManagerInterface#copy()` never got its implementation and is deprecated.\nIt will be removed in 3.0.\n\n# Upgrade to 2.6\n\n## Added `Doctrine\\ORM\\EntityRepository::count()` method\n\n`Doctrine\\ORM\\EntityRepository::count()` has been added. This new method has different\nsignature than `Countable::count()` (required parameter) and therefore are not compatible.\nIf your repository implemented the `Countable` interface, you will have to use\n`$repository->count([])` instead and not implement `Countable` interface anymore.\n\n## Minor BC BREAK: `Doctrine\\ORM\\Tools\\Console\\ConsoleRunner` is now final\n\nSince it's just an utilitarian class and should not be inherited.\n\n## Minor BC BREAK: removed `Doctrine\\ORM\\Query\\QueryException::associationPathInverseSideNotSupported()`\n\nMethod `Doctrine\\ORM\\Query\\QueryException::associationPathInverseSideNotSupported()`\nnow has a required parameter `$pathExpr`.\n\n## Minor BC BREAK: removed `Doctrine\\ORM\\Query\\Parser#isInternalFunction()`\n\nMethod `Doctrine\\ORM\\Query\\Parser#isInternalFunction()` was removed because\nthe distinction between internal function and user defined DQL was removed.\n[#6500](https://github.com/doctrine/orm/pull/6500)\n\n## Minor BC BREAK: removed `Doctrine\\ORM\\ORMException#overwriteInternalDQLFunctionNotAllowed()`\n\nMethod `Doctrine\\ORM\\Query\\Parser#overwriteInternalDQLFunctionNotAllowed()` was\nremoved because of the choice to allow users to overwrite internal functions, ie\n`AVG`, `SUM`, `COUNT`, `MIN` and `MAX`. [#6500](https://github.com/doctrine/orm/pull/6500)\n\n## PHP 7.1 is now required\n\nDoctrine 2.6 now requires PHP 7.1 or newer.\n\nAs a consequence, automatic cache setup in Doctrine\\ORM\\Tools\\Setup::create*Configuration() was changed:\n- APCu extension (ext-apcu) will now be used instead of abandoned APC (ext-apc).\n- Memcached extension (ext-memcached) will be used instead of obsolete Memcache (ext-memcache).\n- XCache support was dropped as it doesn't work with PHP 7.\n\n# Upgrade to 2.5\n\n## Minor BC BREAK: removed `Doctrine\\ORM\\Query\\SqlWalker#walkCaseExpression()`\n\nMethod `Doctrine\\ORM\\Query\\SqlWalker#walkCaseExpression()` was unused and part\nof the internal API of the ORM, so it was removed. [#5600](https://github.com/doctrine/orm/pull/5600).\n\n## Minor BC BREAK: removed $className parameter on `AbstractEntityInheritancePersister#getSelectJoinColumnSQL()`\n\nAs `$className` parameter was not used in the method, it was safely removed.\n\n## Minor BC BREAK: query cache key time is now a float\n\nAs of 2.5.5, the `QueryCacheEntry#time` property will contain a float value\ninstead of an integer in order to have more precision and also to be consistent\nwith the `TimestampCacheEntry#time`.\n\n## Minor BC BREAK: discriminator map must now include all non-transient classes\n\nIt is now required that you declare the root of an inheritance in the\ndiscriminator map.\n\nWhen declaring an inheritance map, it was previously possible to skip the root\nof the inheritance in the discriminator map. This was actually a validation\nmistake by Doctrine2 and led to problems when trying to persist instances of\nthat class.\n\nIf you don't plan to persist instances some classes in your inheritance, then\neither:\n\n - make those classes `abstract`\n - map those classes as `MappedSuperclass`\n\n## Minor BC BREAK: ``EntityManagerInterface`` instead of ``EntityManager`` in type-hints\n\nAs of 2.5, classes requiring the ``EntityManager`` in any method signature will now require\nan ``EntityManagerInterface`` instead.\nIf you are extending any of the following classes, then you need to check following\nsignatures:\n\n- ``Doctrine\\ORM\\Tools\\DebugUnitOfWorkListener#dumpIdentityMap(EntityManagerInterface $em)``\n- ``Doctrine\\ORM\\Mapping\\ClassMetadataFactory#setEntityManager(EntityManagerInterface $em)``\n\n## Minor BC BREAK: Custom Hydrators API change\n\nAs of 2.5, `AbstractHydrator` does not enforce the usage of cache as part of\nAPI, and now provides you a clean API for column information through the method\n`hydrateColumnInfo($column)`.\nCache variable being passed around by reference is no longer needed since\nHydrators are per query instantiated since Doctrine 2.4.\n\n## Minor BC BREAK: Entity based ``EntityManager#clear()`` calls follow cascade detach\n\nWhenever ``EntityManager#clear()`` method gets called with a given entity class\nname, until 2.4, it was only detaching the specific requested entity.\nAs of 2.5, ``EntityManager`` will follow configured cascades, providing a better\nmemory management since associations will be garbage collected, optimizing\nresources consumption on long running jobs.\n\n## BC BREAK: NamingStrategy interface changes\n\n1. A new method ``embeddedFieldToColumnName($propertyName, $embeddedColumnName)``\n\nThis method generates the column name for fields of embedded objects. If you implement your custom NamingStrategy, you\nnow also need to implement this new method.\n\n2. A change to method ``joinColumnName()`` to include the $className\n\n## Updates on entities scheduled for deletion are no longer processed\n\nIn Doctrine 2.4, if you modified properties of an entity scheduled for deletion, UnitOfWork would\nproduce an UPDATE statement to be executed right before the DELETE statement. The entity in question\nwas therefore present in ``UnitOfWork#entityUpdates``, which means that ``preUpdate`` and ``postUpdate``\nlisteners were (quite pointlessly) called. In ``preFlush`` listeners, it used to be possible to undo\nthe scheduled deletion for updated entities (by calling ``persist()`` if the entity was found in both\n``entityUpdates`` and ``entityDeletions``). This does not work any longer, because the entire changeset\ncalculation logic is optimized away.\n\n## Minor BC BREAK: Default lock mode changed from LockMode::NONE to null in method signatures\n\nA misconception concerning default lock mode values in method signatures lead to unexpected behaviour\nin SQL statements on SQL Server. With a default lock mode of ``LockMode::NONE`` throughout the\nmethod signatures in ORM, the table lock hint ``WITH (NOLOCK)`` was appended to all locking related\nqueries by default. This could result in unpredictable results because an explicit ``WITH (NOLOCK)``\ntable hint tells SQL Server to run a specific query in transaction isolation level READ UNCOMMITTED\ninstead of the default READ COMMITTED transaction isolation level.\nTherefore there now is a distinction between ``LockMode::NONE`` and ``null`` to be able to tell\nDoctrine whether to add table lock hints to queries by intention or not. To achieve this, the following\nmethod signatures have been changed to declare ``$lockMode = null`` instead of ``$lockMode = LockMode::NONE``:\n\n- ``Doctrine\\ORM\\Cache\\Persister\\AbstractEntityPersister#getSelectSQL()``\n- ``Doctrine\\ORM\\Cache\\Persister\\AbstractEntityPersister#load()``\n- ``Doctrine\\ORM\\Cache\\Persister\\AbstractEntityPersister#refresh()``\n- ``Doctrine\\ORM\\Decorator\\EntityManagerDecorator#find()``\n- ``Doctrine\\ORM\\EntityManager#find()``\n- ``Doctrine\\ORM\\EntityRepository#find()``\n- ``Doctrine\\ORM\\Persisters\\BasicEntityPersister#getSelectSQL()``\n- ``Doctrine\\ORM\\Persisters\\BasicEntityPersister#load()``\n- ``Doctrine\\ORM\\Persisters\\BasicEntityPersister#refresh()``\n- ``Doctrine\\ORM\\Persisters\\EntityPersister#getSelectSQL()``\n- ``Doctrine\\ORM\\Persisters\\EntityPersister#load()``\n- ``Doctrine\\ORM\\Persisters\\EntityPersister#refresh()``\n- ``Doctrine\\ORM\\Persisters\\JoinedSubclassPersister#getSelectSQL()``\n\nYou should update signatures for these methods if you have subclassed one of the above classes.\nPlease also check the calling code of these methods in your application and update if necessary.\n\n**Note:**\nThis in fact is really a minor BC BREAK and should not have any affect on database vendors\nother than SQL Server because it is the only one that supports and therefore cares about\n``LockMode::NONE``. It's really just a FIX for SQL Server environments using ORM.\n\n## Minor BC BREAK: `__clone` method not called anymore when entities are instantiated via metadata API\n\nAs of PHP 5.6, instantiation of new entities is deferred to the\n[`doctrine/instantiator`](https://github.com/doctrine/instantiator) library, which will avoid calling `__clone`\nor any public API on instantiated objects.\n\n## BC BREAK: `Doctrine\\ORM\\Repository\\DefaultRepositoryFactory` is now `final`\n\nPlease implement the `Doctrine\\ORM\\Repository\\RepositoryFactory` interface instead of extending\nthe `Doctrine\\ORM\\Repository\\DefaultRepositoryFactory`.\n\n## BC BREAK: New object expression DQL queries now respects user provided aliasing and not return consumed fields\n\nWhen executing DQL queries with new object expressions, instead of returning DTOs numerically indexes, it will now respect user provided aliases. Consider the following query:\n\n    SELECT new UserDTO(u.id,u.name) as user,new AddressDTO(a.street,a.postalCode) as address, a.id as addressId FROM User u INNER JOIN u.addresses a WITH a.isPrimary = true\n\nPreviously, your result would be similar to this:\n\n    array(\n        0=>array(\n            0=>{UserDTO object},\n            1=>{AddressDTO object},\n            2=>{u.id scalar},\n            3=>{u.name scalar},\n            4=>{a.street scalar},\n            5=>{a.postalCode scalar},\n            'addressId'=>{a.id scalar},\n        ),\n        ...\n    )\n\nFrom now on, the resultset will look like this:\n\n    array(\n        0=>array(\n            'user'=>{UserDTO object},\n            'address'=>{AddressDTO object},\n            'addressId'=>{a.id scalar}\n        ),\n        ...\n    )\n\n## Minor BC BREAK: added second parameter $indexBy in EntityRepository#createQueryBuilder method signature\n\nAdded way to access the underlying QueryBuilder#from() method's 'indexBy' parameter when using EntityRepository#createQueryBuilder()\n\n# Upgrade to 2.4\n\n## BC BREAK: Compatibility Bugfix in PersistentCollection#matching()\n\nIn Doctrine 2.3 it was possible to use the new ``matching($criteria)``\nfunctionality by adding constraints for assocations based on ID:\n\n    Criteria::expr()->eq('association', $assocation->getId());\n\nThis functionality does not work on InMemory collections however, because\nin memory criteria compares object values based on reference.\nAs of 2.4 the above code will throw an exception. You need to change\noffending code to pass the ``$assocation`` reference directly:\n\n    Criteria::expr()->eq('association', $assocation);\n\n## Composer is now the default autoloader\n\nThe test suite now runs with composer autoloading. Support for PEAR, and tarball autoloading is deprecated.\nSupport for GIT submodules is removed.\n\n## OnFlush and PostFlush event always called\n\nBefore 2.4 the postFlush and onFlush events were only called when there were\nactually entities that changed. Now these events are called no matter if there\nare entities in the UoW or changes are found.\n\n## Parenthesis are now considered in arithmetic expression\n\nBefore 2.4 parenthesis are not considered in arithmetic primary expression.\nThat's conceptually wrong, since it might result in wrong values. For example:\n\nThe DQL:\n\n    SELECT 100 / ( 2 * 2 ) FROM MyEntity\n\nBefore 2.4 it generates the SQL:\n\n    SELECT 100 / 2 * 2 FROM my_entity\n\nNow parenthesis are considered, the previous DQL will generate:\n\n    SELECT 100 / (2 * 2) FROM my_entity\n\n# Upgrade to 2.3\n\n## Auto Discriminator Map breaks userland implementations with Listener\n\nThe new feature to detect discriminator maps automatically when none\nare provided breaks userland implementations doing this with a\nlistener in ``loadClassMetadata`` event.\n\n## EntityManager#find() not calls EntityRepository#find() anymore\n\nPrevious to 2.3, calling ``EntityManager#find()`` would be delegated to\n``EntityRepository#find()``.  This has lead to some unexpected behavior in the\ncore of Doctrine when people have overwritten the find method in their\nrepositories. That is why this behavior has been reversed in 2.3, and\n``EntityRepository#find()`` calls ``EntityManager#find()`` instead.\n\n## EntityGenerator add*() method generation\n\nWhen generating an add*() method for a collection the EntityGenerator will now not\nuse the Type-Hint to get the singular for the collection name, but use the field-name\nand strip a trailing \"s\" character if there is one.\n\n## Merge copies non persisted properties too\n\nWhen merging an entity in UoW not only mapped properties are copied, but also others.\n\n## Query, QueryBuilder and NativeQuery parameters *BC break*\n\nFrom now on, parameters in queries is an ArrayCollection instead of a simple array.\nThis affects heavily the usage of setParameters(), because it will not append anymore\nparameters to query, but will actually override the already defined ones.\nWhenever you are retrieving a parameter (ie. $query->getParameter(1)), you will\nreceive an instance of Query\\Parameter, which contains the methods \"getName\",\n\"getValue\" and \"getType\". Parameters are also only converted to when necessary, and\nnot when they are set.\n\nAlso, related functions were affected:\n\n* execute($parameters, $hydrationMode) the argument $parameters can be either an key=>value array or an ArrayCollection instance\n* iterate($parameters, $hydrationMode) the argument $parameters can be either an key=>value array or an ArrayCollection instance\n* setParameters($parameters) the argument $parameters can be either an key=>value array or an ArrayCollection instance\n* getParameters() now returns ArrayCollection instead of array\n* getParameter($key) now returns Parameter instance instead of parameter value\n\n## Query TreeWalker method renamed\n\nInternal changes were made to DQL and SQL generation. If you have implemented your own TreeWalker,\nyou probably need to update it. The method walkJoinVariableDeclaration is now named walkJoin.\n\n## New methods in TreeWalker interface *BC break*\n\nTwo methods getQueryComponents() and setQueryComponent() were added to the TreeWalker interface and all its implementations\nincluding TreeWalkerAdapter, TreeWalkerChain and SqlWalker. If you have your own implementation not inheriting from one of the\nabove you must implement these new methods.\n\n## Metadata Drivers\n\nMetadata drivers have been rewritten to reuse code from `Doctrine\\Persistence`. Anyone who is using the\n`Doctrine\\ORM\\Mapping\\Driver\\Driver` interface should instead refer to\n`Doctrine\\Persistence\\Mapping\\Driver\\MappingDriver`. Same applies to\n`Doctrine\\ORM\\Mapping\\Driver\\AbstractFileDriver`: you should now refer to\n`Doctrine\\Persistence\\Mapping\\Driver\\FileDriver`.\n\nAlso, following mapping drivers have been deprecated, please use their replacements in Doctrine\\Common as listed:\n\n *  `Doctrine\\ORM\\Mapping\\Driver\\DriverChain`       => `Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain`\n *  `Doctrine\\ORM\\Mapping\\Driver\\PHPDriver`         => `Doctrine\\Persistence\\Mapping\\Driver\\PHPDriver`\n *  `Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver`   => `Doctrine\\Persistence\\Mapping\\Driver\\StaticPHPDriver`\n\n# Upgrade to 2.2\n\n## ResultCache implementation rewritten\n\nThe result cache is completely rewritten and now works on the database result level, not inside the ORM AbstractQuery\nanymore. This means that for result cached queries the hydration will now always be performed again, regardless of\nthe hydration mode. Affected areas are:\n\n1. Fixes the problem that entities coming from the result cache were not registered in the UnitOfWork\n   leading to problems during EntityManager#flush. Calls to EntityManager#merge are not necessary anymore.\n2. Affects the array hydrator which now includes the overhead of hydration compared to caching the final result.\n\nThe API is backwards compatible however most of the getter methods on the `AbstractQuery` object are now\ndeprecated in favor of calling AbstractQuery#getQueryCacheProfile(). This method returns a `Doctrine\\DBAL\\Cache\\QueryCacheProfile`\ninstance with access to result cache driver, lifetime and cache key.\n\n\n## EntityManager#getPartialReference() creates read-only entity\n\nEntities returned from EntityManager#getPartialReference() are now marked as read-only if they\nhaven't been in the identity map before. This means objects of this kind never lead to changes\nin the UnitOfWork.\n\n\n## Fields omitted in a partial DQL query or a native query are never updated\n\nFields of an entity that are not returned from a partial DQL Query or native SQL query\nwill never be updated through an UPDATE statement.\n\n\n## Removed support for onUpdate in @JoinColumn\n\nThe onUpdate foreign key handling makes absolutely no sense in an ORM. Additionally Oracle doesn't even support it. Support for it is removed.\n\n\n## Changes in Annotation Handling\n\nThere have been some changes to the annotation handling in Common 2.2 again, that affect how people with old configurations\nfrom 2.0 have to configure the annotation driver if they don't use `Configuration::newDefaultAnnotationDriver()`:\n\n    // Register the ORM Annotations in the AnnotationRegistry\n    AnnotationRegistry::registerFile('path/to/Doctrine/ORM/Mapping/Driver/DoctrineAnnotations.php');\n\n    $reader = new \\Doctrine\\Common\\Annotations\\SimpleAnnotationReader();\n    $reader->addNamespace('Doctrine\\ORM\\Mapping');\n    $reader = new \\Doctrine\\Common\\Annotations\\CachedReader($reader, new ArrayCache());\n\n    $driver = new AnnotationDriver($reader, (array)$paths);\n\n    $config->setMetadataDriverImpl($driver);\n\n\n## Scalar mappings can now be omitted from DQL result\n\nYou are now allowed to mark scalar SELECT expressions as HIDDEN an they are not hydrated anymore.\nExample:\n\nSELECT u, SUM(a.id) AS HIDDEN numArticles FROM User u LEFT JOIN u.Articles a ORDER BY numArticles DESC HAVING numArticles > 10\n\nYour result will be a collection of Users, and not an array with key 0 as User object instance and \"numArticles\" as the number of articles per user\n\n\n## Map entities as scalars in DQL result\n\nWhen hydrating to array or even a mixed result in object hydrator, previously you had the 0 index holding you entity instance.\nYou are now allowed to alias this, providing more flexibility for you code.\nExample:\n\nSELECT u AS user FROM User u\n\nWill now return a collection of arrays with index \"user\" pointing to the User object instance.\n\n\n## Performance optimizations\n\nThousands of lines were completely reviewed and optimized for best performance.\nRemoved redundancy and improved code readability made now internal Doctrine code easier to understand.\nAlso, Doctrine 2.2 now is around 10-15% faster than 2.1.\n\n## EntityManager#find(null)\n\nPreviously EntityManager#find(null) returned null. It now throws an exception.\n\n# Upgrade to 2.1\n\n## Interface for EntityRepository\n\nThe EntityRepository now has an interface Doctrine\\Persistence\\ObjectRepository. This means that your classes that override EntityRepository and extend find(), findOneBy() or findBy() must be adjusted to follow this interface.\n\n## AnnotationReader changes\n\nThe annotation reader was heavily refactored between 2.0 and 2.1-RC1. In theory the operation of the new reader should be backwards compatible, but it has to be setup differently to work that way:\n\n    // new call to the AnnotationRegistry\n    \\Doctrine\\Common\\Annotations\\AnnotationRegistry::registerFile('/doctrine-src/src/Mapping/Driver/DoctrineAnnotations.php');\n\n    $reader = new \\Doctrine\\Common\\Annotations\\AnnotationReader();\n    $reader->setDefaultAnnotationNamespace('Doctrine\\ORM\\Mapping\\\\');\n    // new code necessary starting here\n    $reader->setIgnoreNotImportedAnnotations(true);\n    $reader->setEnableParsePhpImports(false);\n    $reader = new \\Doctrine\\Common\\Annotations\\CachedReader(\n        new \\Doctrine\\Common\\Annotations\\IndexedReader($reader), new ArrayCache()\n    );\n\nThis is already done inside the ``$config->newDefaultAnnotationDriver``, so everything should automatically work if you are using this method. You can verify if everything still works by executing a console command such as schema-validate that loads all metadata into memory.\n\n# Update from 2.0-BETA3 to 2.0-BETA4\n\n## XML Driver <change-tracking-policy /> element demoted to attribute\n\nWe changed how the XML Driver allows to define the change-tracking-policy. The working case is now:\n\n    <entity change-tracking-policy=\"DEFERRED_IMPLICT\" />\n\n# Update from 2.0-BETA2 to 2.0-BETA3\n\n## Serialization of Uninitialized Proxies\n\nAs of Beta3 you can now serialize uninitialized proxies, an exception will only be thrown when\ntrying to access methods on the unserialized proxy as long as it has not been re-attached to the\nEntityManager using `EntityManager#merge()`. See this example:\n\n    $proxy = $em->getReference('User', 1);\n\n    $serializedProxy = serialize($proxy);\n    $detachedProxy = unserialized($serializedProxy);\n\n    echo $em->contains($detachedProxy); // FALSE\n\n    try {\n        $detachedProxy->getId(); // uninitialized detached proxy\n    } catch(Exception $e) {\n\n    }\n    $attachedProxy = $em->merge($detachedProxy);\n    echo $attackedProxy->getId(); // works!\n\n## Changed SQL implementation of Postgres and Oracle DateTime types\n\nThe DBAL Type \"datetime\" included the Timezone Offset in both Postgres and Oracle. As of this version they are now\ngenerated without Timezone (TIMESTAMP WITHOUT TIME ZONE instead of TIMESTAMP WITH TIME ZONE).\nSee [this comment to Ticket DBAL-22](http://www.doctrine-project.org/jira/browse/DBAL-22?focusedCommentId=13396&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_13396)\nfor more details as well as migration issues for PostgreSQL and Oracle.\n\nBoth Postgres and Oracle will throw Exceptions during hydration of Objects with \"DateTime\" fields unless migration steps are taken!\n\n## Removed multi-dot/deep-path expressions in DQL\n\nThe support for implicit joins in DQL through the multi-dot/Deep Path Expressions\nwas dropped. For example:\n\n    SELECT u FROM User u WHERE u.group.name = ?1\n\nSee the \"u.group.id\" here is using multi dots (deep expression) to walk\nthrough the graph of objects and properties. Internally the DQL parser\nwould rewrite these queries to:\n\n    SELECT u FROM User u JOIN u.group g WHERE g.name = ?1\n\nThis explicit notation will be the only supported notation as of now. The internal\nhandling of multi-dots in the DQL Parser was very complex, error prone in edge cases\nand required special treatment for several features we added. Additionally\nit had edge cases that could not be solved without making the DQL Parser\neven much more complex. For this reason we will drop the support for the\ndeep path expressions to increase maintainability and overall performance\nof the DQL parsing process. This will benefit any DQL query being parsed,\neven those not using deep path expressions.\n\nNote that the generated SQL of both notations is exactly the same! You\ndon't loose anything through this.\n\n## Default Allocation Size for Sequences\n\nThe default allocation size for sequences has been changed from 10 to 1. This step was made\nto not cause confusion with users and also because it is partly some kind of premature optimization.\n\n# Update from 2.0-BETA1 to 2.0-BETA2\n\nThere are no backwards incompatible changes in this release.\n\n# Upgrade from 2.0-ALPHA4 to 2.0-BETA1\n\n## EntityRepository deprecates access to protected variables\n\nInstead of accessing protected variables for the EntityManager in\na custom EntityRepository it is now required to use the getter methods\nfor all the three instance variables:\n\n* `$this->_em` now accessible through `$this->getEntityManager()`\n* `$this->_class` now accessible through `$this->getClassMetadata()`\n* `$this->_entityName` now accessible through `$this->getEntityName()`\n\nImportant: For Beta 2 the protected visibility of these three properties will be\nchanged to private!\n\n## Console migrated to Symfony Console\n\nThe Doctrine CLI has been replaced by Symfony Console Configuration\n\nInstead of having to specify:\n\n    [php]\n    $cliConfig = new CliConfiguration();\n    $cliConfig->setAttribute('em', $entityManager);\n\nYou now have to configure the script like:\n\n    [php]\n    $helperSet = new \\Symfony\\Components\\Console\\Helper\\HelperSet(array(\n        'db' => new \\Doctrine\\DBAL\\Tools\\Console\\Helper\\ConnectionHelper($em->getConnection()),\n        'em' => new \\Doctrine\\ORM\\Tools\\Console\\Helper\\EntityManagerHelper($em)\n    ));\n\n## Console: No need for Mapping Paths anymore\n\nIn previous versions you had to specify the --from and --from-path options\nto show where your mapping paths are from the console. However this information\nis already known from the Mapping Driver configuration, so the requirement\nfor this options were dropped.\n\nInstead for each console command all the entities are loaded and to\nrestrict the operation to one or more sub-groups you can use the --filter flag.\n\n## AnnotationDriver is not a default mapping driver anymore\n\nIn conjunction with the recent changes to Console we realized that the\nannotations driver being a default metadata driver lead to lots of glue\ncode in the console components to detect where entities lie and how to load\nthem for batch updates like SchemaTool and other commands. However the\nannotations driver being a default driver does not really help that much\nanyways.\n\nTherefore we decided to break backwards compatibility in this issue and drop\nthe support for Annotations as Default Driver and require our users to\nspecify the driver explicitly (which allows us to ask for the path to all\nentities).\n\nIf you are using the annotations metadata driver as default driver, you\nhave to add the following lines to your bootstrap code:\n\n    $driverImpl = $config->newDefaultAnnotationDriver(array(__DIR__.\"/Entities\"));\n    $config->setMetadataDriverImpl($driverImpl);\n\nYou have to specify the path to your entities as either string of a single\npath or array of multiple paths\nto your entities. This information will be used by all console commands to\naccess all entities.\n\nXml and Yaml Drivers work as before!\n\n\n## New inversedBy attribute\n\nIt is now *mandatory* that the owning side of a bidirectional association specifies the\n'inversedBy' attribute that points to the name of the field on the inverse side that completes\nthe association. Example:\n\n    [php]\n    // BEFORE (ALPHA4 AND EARLIER)\n    class User\n    {\n        //...\n        /** @OneToOne(targetEntity=\"Address\", mappedBy=\"user\") */\n        private $address;\n        //...\n    }\n    class Address\n    {\n        //...\n        /** @OneToOne(targetEntity=\"User\") */\n        private $user;\n        //...\n    }\n\n    // SINCE BETA1\n    // User class DOES NOT CHANGE\n    class Address\n    {\n        //...\n        /** @OneToOne(targetEntity=\"User\", inversedBy=\"address\") */\n        private $user;\n        //...\n    }\n\nThus, the inversedBy attribute is the counterpart to the mappedBy attribute. This change\nwas necessary to enable some simplifications and further performance improvements. We\napologize for the inconvenience.\n\n## Default Property for Field Mappings\n\nThe \"default\" option for database column defaults has been removed. If desired, database column defaults can\nbe implemented by using the columnDefinition attribute of the @Column annotation (or the appropriate XML and YAML equivalents).\nPrefer PHP default values, if possible.\n\n## Selecting Partial Objects\n\nQuerying for partial objects now has a new syntax. The old syntax to query for partial objects\nnow has a different meaning. This is best illustrated by an example. If you previously\nhad a DQL query like this:\n\n    [sql]\n    SELECT u.id, u.name FROM User u\n\nSince BETA1, simple state field path expressions in the select clause are used to select\nobject fields as plain scalar values (something that was not possible before).\nTo achieve the same result as previously (that is, a partial object with only id and name populated)\nyou need to use the following, explicit syntax:\n\n    [sql]\n    SELECT PARTIAL u.{id,name} FROM User u\n\n## XML Mapping Driver\n\nThe 'inheritance-type' attribute changed to take last bit of ClassMetadata constant names, i.e.\nNONE, SINGLE_TABLE, INHERITANCE_TYPE_JOINED\n\n## YAML Mapping Driver\n\nThe way to specify lifecycle callbacks in YAML Mapping driver was changed to allow for multiple callbacks\nper event. The Old syntax ways:\n\n    [yaml]\n    lifecycleCallbacks:\n      doStuffOnPrePersist: prePersist\n      doStuffOnPostPersist: postPersist\n\nThe new syntax is:\n\n    [yaml]\n    lifecycleCallbacks:\n      prePersist: [ doStuffOnPrePersist, doOtherStuffOnPrePersistToo ]\n      postPersist: [ doStuffOnPostPersist ]\n\n## PreUpdate Event Listeners\n\nEvent Listeners listening to the 'preUpdate' event can only affect the primitive values of entity changesets\nby using the API on the `PreUpdateEventArgs` instance passed to the preUpdate listener method. Any changes\nto the state of the entitys properties won't affect the database UPDATE statement anymore. This gives drastic\nperformance benefits for the preUpdate event.\n\n## Collection API\n\nThe Collection interface in the Common package has been updated with some missing methods\nthat were present only on the default implementation, ArrayCollection. Custom collection\nimplementations need to be updated to adhere to the updated interface.\n\n# Upgrade from 2.0-ALPHA3 to 2.0-ALPHA4\n\n## CLI Controller changes\n\nCLI main object changed its name and namespace. Renamed from Doctrine\\ORM\\Tools\\Cli to Doctrine\\Common\\Cli\\CliController.\nDoctrine\\Common\\Cli\\CliController now only deals with namespaces. Ready to go, Core, Dbal and Orm are available and you can subscribe new tasks by retrieving the namespace and including new task. Example:\n\n    [php]\n    $cli->getNamespace('Core')->addTask('my-example', '\\MyProject\\Tools\\Cli\\Tasks\\MyExampleTask');\n\n\n## CLI Tasks documentation\n\nTasks have implemented a new way to build documentation. Although it is still possible to define the help manually by extending the basicHelp and extendedHelp, they are now optional.\nWith new required method AbstractTask::buildDocumentation, its implementation defines the TaskDocumentation instance (accessible through AbstractTask::getDocumentation()), basicHelp and extendedHelp are now not necessary to be implemented.\n\n## Changes in Method Signatures\n\n    * A bunch of Methods on both Doctrine\\DBAL\\Platforms\\AbstractPlatform and Doctrine\\DBAL\\Schema\\AbstractSchemaManager\n      have changed quite significantly by adopting the new Schema instance objects.\n\n## Renamed Methods\n\n    * Doctrine\\ORM\\AbstractQuery::setExpireResultCache() -> expireResultCache()\n    * Doctrine\\ORM\\Query::setExpireQueryCache() -> expireQueryCache()\n\n## SchemaTool Changes\n\n    * \"doctrine schema-tool --drop\" now always drops the complete database instead of\n    only those tables defined by the current database model. The previous method had\n    problems when foreign keys of orphaned tables pointed to tables that were scheduled\n    for deletion.\n    * Use \"doctrine schema-tool --update\" to get a save incremental update for your\n    database schema without deleting any unused tables, sequences or foreign keys.\n    * Use \"doctrine schema-tool --complete-update\" to do a full incremental update of\n    your schema.\n# Upgrade from 2.0-ALPHA2 to 2.0-ALPHA3\n\nThis section details the changes made to Doctrine 2.0-ALPHA3 to make it easier for you\nto upgrade your projects to use this version.\n\n## CLI Changes\n\nThe $args variable used in the cli-config.php for configuring the Doctrine CLI has been renamed to $globalArguments.\n\n## Proxy class changes\n\nYou are now required to make supply some minimalist configuration with regards to proxy objects. That involves 2 new configuration options. First, the directory where generated proxy classes should be placed needs to be specified. Secondly, you need to configure the namespace used for proxy classes. The following snippet shows an example:\n\n    [php]\n    // step 1: configure directory for proxy classes\n    // $config instanceof Doctrine\\ORM\\Configuration\n    $config->setProxyDir('/path/to/myproject/lib/MyProject/Generated/Proxies');\n    $config->setProxyNamespace('MyProject\\Generated\\Proxies');\n\nNote that proxy classes behave exactly like any other classes when it comes to class loading. Therefore you need to make sure the proxy classes can be loaded by some class loader. If you place the generated proxy classes in a namespace and directory under your projects class files, like in the example above, it would be sufficient to register the MyProject namespace on a class loader. Since the proxy classes are contained in that namespace and adhere to the standards for class loading, no additional work is required.\nGenerating the proxy classes into a namespace within your class library is the recommended setup.\n\nEntities with initialized proxy objects can now be serialized and unserialized properly from within the same application.\n\nFor more details refer to the Configuration section of the manual.\n\n## Removed allowPartialObjects configuration option\n\nThe allowPartialObjects configuration option together with the `Configuration#getAllowPartialObjects` and `Configuration#setAllowPartialObjects` methods have been removed.\nThe new behavior is as if the option were set to FALSE all the time, basically disallowing partial objects globally. However, you can still use the `Query::HINT_FORCE_PARTIAL_LOAD` query hint to force a query to return partial objects for optimization purposes.\n\n## Renamed Methods\n\n* Doctrine\\ORM\\Configuration#getCacheDir() to getProxyDir()\n* Doctrine\\ORM\\Configuration#setCacheDir($dir) to setProxyDir($dir)\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.5380859375,
          "content": "{\n    \"name\": \"doctrine/orm\",\n    \"type\": \"library\",\n    \"description\": \"Object-Relational-Mapper for PHP\",\n    \"keywords\": [\"orm\", \"database\"],\n    \"homepage\": \"https://www.doctrine-project.org/projects/orm.html\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\"name\": \"Guilherme Blanco\", \"email\": \"guilhermeblanco@gmail.com\"},\n        {\"name\": \"Roman Borschel\", \"email\": \"roman@code-factory.org\"},\n        {\"name\": \"Benjamin Eberlei\", \"email\": \"kontakt@beberlei.de\"},\n        {\"name\": \"Jonathan Wage\", \"email\": \"jonwage@gmail.com\"},\n        {\"name\": \"Marco Pivetta\", \"email\": \"ocramius@gmail.com\"}\n    ],\n    \"config\": {\n        \"allow-plugins\": {\n            \"composer/package-versions-deprecated\": true,\n            \"dealerdirect/phpcodesniffer-composer-installer\": true,\n            \"phpstan/extension-installer\": true\n        },\n        \"sort-packages\": true\n    },\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"composer-runtime-api\": \"^2\",\n        \"ext-ctype\": \"*\",\n        \"doctrine/collections\": \"^2.2\",\n        \"doctrine/dbal\": \"^3.8.2 || ^4\",\n        \"doctrine/deprecations\": \"^0.5.3 || ^1\",\n        \"doctrine/event-manager\": \"^1.2 || ^2\",\n        \"doctrine/inflector\": \"^1.4 || ^2.0\",\n        \"doctrine/instantiator\": \"^1.3 || ^2\",\n        \"doctrine/lexer\": \"^3\",\n        \"doctrine/persistence\": \"^3.3.1 || ^4\",\n        \"psr/cache\": \"^1 || ^2 || ^3\",\n        \"symfony/console\": \"^5.4 || ^6.0 || ^7.0\",\n        \"symfony/var-exporter\": \"^6.3.9 || ^7.0\"\n    },\n    \"require-dev\": {\n        \"doctrine/coding-standard\": \"^12.0\",\n        \"phpbench/phpbench\": \"^1.0\",\n        \"phpdocumentor/guides-cli\": \"^1.4\",\n        \"phpstan/extension-installer\": \"^1.4\",\n        \"phpstan/phpstan\": \"2.0.3\",\n        \"phpstan/phpstan-deprecation-rules\": \"^2\",\n        \"phpunit/phpunit\": \"^10.4.0\",\n        \"psr/log\": \"^1 || ^2 || ^3\",\n        \"squizlabs/php_codesniffer\": \"3.7.2\",\n        \"symfony/cache\": \"^5.4 || ^6.2 || ^7.0\"\n    },\n    \"suggest\": {\n        \"ext-dom\": \"Provides support for XSD validation for XML mapping files\",\n        \"symfony/cache\": \"Provides cache support for Setup Tool with doctrine/cache 2.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Doctrine\\\\ORM\\\\\": \"src\" }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Doctrine\\\\Tests\\\\\": \"tests/Tests\",\n            \"Doctrine\\\\StaticAnalysis\\\\\": \"tests/StaticAnalysis\",\n            \"Doctrine\\\\Performance\\\\\": \"tests/Performance\"\n        }\n    },\n    \"archive\": {\n        \"exclude\": [\"!vendor\", \"tests\", \"*phpunit.xml\", \"build.xml\", \"build.properties\", \"composer.phar\", \"vendor/satooshi\", \"lib/vendor\", \"*.swp\"]\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "doctrine-mapping.xsd",
          "type": "blob",
          "size": 26.1328125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n    targetNamespace=\"http://doctrine-project.org/schemas/orm/doctrine-mapping\"\n    xmlns:orm=\"http://doctrine-project.org/schemas/orm/doctrine-mapping\"\n    elementFormDefault=\"qualified\">\n\n  <xs:annotation>\n    <xs:documentation><![CDATA[\n       This is the XML Schema for the object/relational\n       mapping file used by the Doctrine ORM.\n     ]]></xs:documentation>\n  </xs:annotation>\n\n  <xs:element name=\"doctrine-mapping\">\n    <xs:complexType>\n      <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n        <xs:element name=\"mapped-superclass\" type=\"orm:mapped-superclass\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n        <xs:element name=\"entity\" type=\"orm:entity\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n        <xs:element name=\"embeddable\" type=\"orm:embeddable\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n        <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n      </xs:choice>\n      <xs:anyAttribute namespace=\"##other\"/>\n    </xs:complexType>\n  </xs:element>\n\n  <xs:complexType name=\"emptyType\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"cascade-type\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"cascade-all\" type=\"orm:emptyType\" minOccurs=\"0\"/>\n      <xs:element name=\"cascade-persist\" type=\"orm:emptyType\" minOccurs=\"0\"/>\n      <xs:element name=\"cascade-remove\" type=\"orm:emptyType\" minOccurs=\"0\"/>\n      <xs:element name=\"cascade-refresh\" type=\"orm:emptyType\" minOccurs=\"0\"/>\n      <xs:element name=\"cascade-detach\" type=\"orm:emptyType\" minOccurs=\"0\"/>\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:simpleType name=\"lifecycle-callback-type\">\n    <xs:restriction base=\"xs:token\">\n      <xs:enumeration value=\"prePersist\"/>\n      <xs:enumeration value=\"postPersist\"/>\n      <xs:enumeration value=\"preUpdate\"/>\n      <xs:enumeration value=\"postUpdate\"/>\n      <xs:enumeration value=\"preRemove\"/>\n      <xs:enumeration value=\"postRemove\"/>\n      <xs:enumeration value=\"postLoad\"/>\n      <xs:enumeration value=\"preFlush\"/>\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:simpleType name=\"cache-usage-type\">\n    <xs:restriction base=\"xs:token\">\n      <xs:enumeration value=\"READ_ONLY\"/>\n      <xs:enumeration value=\"READ_WRITE\"/>\n      <xs:enumeration value=\"NONSTRICT_READ_WRITE\"/>\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:complexType name=\"lifecycle-callback\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"type\" type=\"orm:lifecycle-callback-type\" use=\"required\" />\n    <xs:attribute name=\"method\" type=\"xs:NMTOKEN\" use=\"required\" />\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"lifecycle-callbacks\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"lifecycle-callback\" type=\"orm:lifecycle-callback\" minOccurs=\"1\" maxOccurs=\"unbounded\" />\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"entity-listener\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"lifecycle-callback\" type=\"orm:lifecycle-callback\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"class\" type=\"orm:fqcn\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"entity-listeners\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"entity-listener\" type=\"orm:entity-listener\" minOccurs=\"1\" maxOccurs=\"unbounded\" />\n    </xs:choice>\n  </xs:complexType>\n\n  <xs:complexType name=\"column-result\">\n    <xs:attribute name=\"name\" type=\"xs:string\" use=\"required\" />\n  </xs:complexType>\n\n  <xs:complexType name=\"field-result\">\n    <xs:attribute name=\"name\" type=\"xs:string\" use=\"required\" />\n    <xs:attribute name=\"column\" type=\"xs:string\" />\n  </xs:complexType>\n\n  <xs:complexType name=\"entity-result\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"field-result\" type=\"orm:field-result\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n    </xs:choice>\n    <xs:attribute name=\"entity-class\" type=\"orm:fqcn\" use=\"required\" />\n    <xs:attribute name=\"discriminator-column\" type=\"xs:string\" use=\"optional\" />\n  </xs:complexType>\n\n  <xs:complexType name=\"cache\">\n    <xs:attribute name=\"usage\" type=\"orm:cache-usage-type\" />\n    <xs:attribute name=\"region\" type=\"xs:string\" />\n  </xs:complexType>\n\n  <xs:complexType name=\"entity\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"cache\" type=\"orm:cache\" minOccurs=\"0\" maxOccurs=\"1\"/>\n      <xs:element name=\"options\" type=\"orm:options\" minOccurs=\"0\" />\n      <xs:element name=\"indexes\" type=\"orm:indexes\" minOccurs=\"0\"/>\n      <xs:element name=\"unique-constraints\" type=\"orm:unique-constraints\" minOccurs=\"0\"/>\n      <xs:element name=\"discriminator-column\" type=\"orm:discriminator-column\" minOccurs=\"0\"/>\n      <xs:element name=\"discriminator-map\" type=\"orm:discriminator-map\" minOccurs=\"0\"/>\n      <xs:element name=\"lifecycle-callbacks\" type=\"orm:lifecycle-callbacks\" minOccurs=\"0\" maxOccurs=\"1\" />\n      <xs:element name=\"entity-listeners\" type=\"orm:entity-listeners\" minOccurs=\"0\" maxOccurs=\"1\" />\n      <xs:element name=\"id\" type=\"orm:id\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      <xs:element name=\"field\" type=\"orm:field\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n      <xs:element name=\"embedded\" type=\"orm:embedded\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n      <xs:element name=\"one-to-one\" type=\"orm:one-to-one\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n      <xs:element name=\"one-to-many\" type=\"orm:one-to-many\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      <xs:element name=\"many-to-one\" type=\"orm:many-to-one\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      <xs:element name=\"many-to-many\" type=\"orm:many-to-many\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      <xs:element name=\"association-overrides\" type=\"orm:association-overrides\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      <xs:element name=\"attribute-overrides\" type=\"orm:attribute-overrides\" minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"name\" type=\"xs:string\" use=\"required\" />\n    <xs:attribute name=\"table\" type=\"orm:tablename\" />\n    <xs:attribute name=\"schema\" type=\"xs:NMTOKEN\" />\n    <xs:attribute name=\"repository-class\" type=\"orm:fqcn\"/>\n    <xs:attribute name=\"inheritance-type\" type=\"orm:inheritance-type\"/>\n    <xs:attribute name=\"change-tracking-policy\" type=\"orm:change-tracking-policy\" />\n    <xs:attribute name=\"read-only\" type=\"xs:boolean\" default=\"false\" />\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:simpleType name=\"tablename\" id=\"tablename\">\n    <xs:restriction base=\"xs:token\">\n      <xs:pattern value=\"[a-zA-Z_u01-uff.]+\" id=\"tablename.pattern\">\n      </xs:pattern>\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:complexType name=\"option\" mixed=\"true\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"option\" type=\"orm:option\"/>\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"name\" type=\"xs:NMTOKEN\" use=\"required\"/>\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"options\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"option\" type=\"orm:option\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"mapped-superclass\" >\n    <xs:complexContent>\n      <xs:extension base=\"orm:entity\"/>\n    </xs:complexContent>\n  </xs:complexType>\n\n  <xs:complexType name=\"embeddable\">\n    <xs:complexContent>\n      <xs:extension base=\"orm:entity\"/>\n    </xs:complexContent>\n  </xs:complexType>\n\n  <xs:simpleType name=\"change-tracking-policy\">\n    <xs:restriction base=\"xs:token\">\n      <xs:enumeration value=\"DEFERRED_IMPLICIT\"/>\n      <xs:enumeration value=\"DEFERRED_EXPLICIT\"/>\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:simpleType name=\"inheritance-type\">\n    <xs:restriction base=\"xs:token\">\n      <xs:enumeration value=\"SINGLE_TABLE\"/>\n      <xs:enumeration value=\"JOINED\"/>\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:simpleType name=\"generator-strategy\">\n    <xs:restriction base=\"xs:token\">\n      <xs:enumeration value=\"NONE\"/>\n      <xs:enumeration value=\"SEQUENCE\"/>\n      <xs:enumeration value=\"IDENTITY\"/>\n      <xs:enumeration value=\"AUTO\"/>\n      <xs:enumeration value=\"CUSTOM\" />\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:simpleType name=\"fk-action\">\n    <xs:restriction base=\"xs:token\">\n      <xs:enumeration value=\"CASCADE\"/>\n      <xs:enumeration value=\"RESTRICT\"/>\n      <xs:enumeration value=\"SET NULL\"/>\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:simpleType name=\"fetch-type\">\n    <xs:restriction base=\"xs:token\">\n      <xs:enumeration value=\"EAGER\"/>\n      <xs:enumeration value=\"LAZY\"/>\n      <xs:enumeration value=\"EXTRA_LAZY\"/>\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:simpleType name=\"generated-type\">\n    <xs:restriction base=\"xs:token\">\n      <xs:enumeration value=\"NEVER\"/>\n      <xs:enumeration value=\"INSERT\"/>\n      <xs:enumeration value=\"ALWAYS\"/>\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:complexType name=\"field\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"options\" type=\"orm:options\" minOccurs=\"0\" />\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"name\" type=\"xs:NMTOKEN\" use=\"required\" />\n    <xs:attribute name=\"type\" type=\"orm:type\" default=\"string\" />\n    <xs:attribute name=\"column\" type=\"orm:columntoken\" />\n    <xs:attribute name=\"length\" type=\"xs:NMTOKEN\" />\n    <xs:attribute name=\"unique\" type=\"xs:boolean\" default=\"false\" />\n    <xs:attribute name=\"nullable\" type=\"xs:boolean\" default=\"false\" />\n    <xs:attribute name=\"insertable\" type=\"xs:boolean\" default=\"true\" />\n    <xs:attribute name=\"updatable\" type=\"xs:boolean\" default=\"true\" />\n    <xs:attribute name=\"generated\" type=\"orm:generated-type\" default=\"NEVER\" />\n    <xs:attribute name=\"enum-type\" type=\"xs:string\" />\n    <xs:attribute name=\"version\" type=\"xs:boolean\" />\n    <xs:attribute name=\"column-definition\" type=\"xs:string\" />\n    <xs:attribute name=\"precision\" type=\"xs:integer\" use=\"optional\" />\n    <xs:attribute name=\"scale\" type=\"xs:integer\" use=\"optional\" />\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"embedded\">\n    <xs:sequence>\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:sequence>\n    <xs:attribute name=\"name\" type=\"xs:string\" use=\"required\" />\n    <xs:attribute name=\"class\" type=\"orm:fqcn\" use=\"optional\" />\n    <xs:attribute name=\"column-prefix\" type=\"xs:string\" use=\"optional\" />\n    <xs:attribute name=\"use-column-prefix\" type=\"xs:boolean\" default=\"true\" use=\"optional\" />\n  </xs:complexType>\n\n  <xs:complexType name=\"discriminator-column\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"options\" type=\"orm:options\" minOccurs=\"0\" />\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"name\" type=\"xs:NMTOKEN\" use=\"required\" />\n    <xs:attribute name=\"type\" type=\"xs:NMTOKEN\"/>\n    <xs:attribute name=\"field-name\" type=\"xs:NMTOKEN\" />\n    <xs:attribute name=\"length\" type=\"xs:NMTOKEN\" />\n    <xs:attribute name=\"column-definition\" type=\"xs:string\" />\n    <xs:attribute name=\"enum-type\" type=\"xs:string\" />\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"unique-constraint\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"options\" type=\"orm:options\" minOccurs=\"0\" />\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"name\" type=\"xs:NMTOKEN\" use=\"optional\"/>\n    <xs:attribute name=\"columns\" type=\"xs:string\" use=\"optional\"/>\n    <xs:attribute name=\"fields\" type=\"xs:string\" use=\"optional\"/>\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"unique-constraints\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"unique-constraint\" type=\"orm:unique-constraint\" minOccurs=\"1\" maxOccurs=\"unbounded\"/>\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"index\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"options\" type=\"orm:options\" minOccurs=\"0\" />\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"name\" type=\"xs:NMTOKEN\" use=\"optional\"/>\n    <xs:attribute name=\"columns\" type=\"xs:string\" use=\"optional\"/>\n    <xs:attribute name=\"fields\" type=\"xs:string\" use=\"optional\"/>\n    <xs:attribute name=\"flags\" type=\"xs:string\" use=\"optional\"/>\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"indexes\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"index\" type=\"orm:index\" minOccurs=\"1\" maxOccurs=\"unbounded\"/>\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"discriminator-mapping\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"value\" type=\"orm:type\" use=\"required\"/>\n    <xs:attribute name=\"class\" type=\"orm:fqcn\" use=\"required\"/>\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"discriminator-map\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"discriminator-mapping\" type=\"orm:discriminator-mapping\" minOccurs=\"1\" maxOccurs=\"unbounded\"/>\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"generator\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"strategy\" type=\"orm:generator-strategy\" use=\"optional\" default=\"AUTO\" />\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"id\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"generator\" type=\"orm:generator\" minOccurs=\"0\" />\n      <xs:element name=\"sequence-generator\" type=\"orm:sequence-generator\" minOccurs=\"0\" maxOccurs=\"1\" />\n      <xs:element name=\"custom-id-generator\" type=\"orm:custom-id-generator\" minOccurs=\"0\" maxOccurs=\"1\" />\n      <xs:element name=\"options\" type=\"orm:options\" minOccurs=\"0\" />\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"name\" type=\"xs:NMTOKEN\" use=\"required\" />\n    <xs:attribute name=\"type\" type=\"orm:type\" />\n    <xs:attribute name=\"column\" type=\"orm:columntoken\" />\n    <xs:attribute name=\"length\" type=\"xs:NMTOKEN\" />\n    <xs:attribute name=\"association-key\" type=\"xs:boolean\" default=\"false\" />\n    <xs:attribute name=\"column-definition\" type=\"xs:string\" />\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"sequence-generator\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n      <xs:attribute name=\"sequence-name\" type=\"xs:NMTOKEN\" use=\"required\" />\n      <xs:attribute name=\"allocation-size\" type=\"xs:integer\" use=\"optional\" default=\"1\" />\n      <xs:attribute name=\"initial-value\" type=\"xs:integer\" use=\"optional\" default=\"1\" />\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"custom-id-generator\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"class\" type=\"orm:fqcn\" use=\"required\" />\n  </xs:complexType>\n\n  <xs:simpleType name=\"fqcn\" id=\"fqcn\">\n    <xs:restriction base=\"xs:token\">\n      <xs:pattern value=\"[a-zA-Z_u01-uff][a-zA-Z0-9_u01-uff]+\" id=\"fqcn.pattern\">\n      </xs:pattern>\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:simpleType name=\"type\" id=\"type\">\n    <xs:restriction base=\"xs:token\">\n      <xs:pattern value=\"([a-zA-Z_u01-uff][a-zA-Z0-9_u01-uff]+)|(\\c+)\" id=\"type.class.pattern\">\n      </xs:pattern>\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:complexType name=\"inverse-join-columns\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"join-column\" type=\"orm:join-column\" minOccurs=\"1\" maxOccurs=\"unbounded\" />\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"join-column\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"name\" type=\"xs:NMTOKEN\" use=\"optional\" />\n    <xs:attribute name=\"referenced-column-name\" type=\"xs:NMTOKEN\" use=\"optional\" default=\"id\" />\n    <xs:attribute name=\"unique\" type=\"xs:boolean\" default=\"false\" />\n    <xs:attribute name=\"nullable\" type=\"xs:boolean\" default=\"true\" />\n    <xs:attribute name=\"on-delete\" type=\"orm:fk-action\" />\n    <xs:attribute name=\"column-definition\" type=\"xs:string\" />\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"join-columns\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"join-column\" type=\"orm:join-column\" minOccurs=\"1\" maxOccurs=\"unbounded\" />\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"join-table\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"join-columns\" type=\"orm:join-columns\" />\n      <xs:element name=\"inverse-join-columns\" type=\"orm:join-columns\" />\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"name\" type=\"xs:NMTOKEN\" use=\"required\" />\n    <xs:attribute name=\"schema\" type=\"xs:NMTOKEN\" />\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"order-by\">\n      <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n          <xs:element name=\"order-by-field\" type=\"orm:order-by-field\" minOccurs=\"1\" maxOccurs=\"unbounded\" />\n          <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n      </xs:choice>\n      <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"order-by-field\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"name\" type=\"xs:NMTOKEN\" use=\"required\" />\n    <xs:attribute name=\"direction\" type=\"orm:order-by-direction\" default=\"ASC\" />\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:simpleType name=\"order-by-direction\">\n    <xs:restriction base=\"xs:token\">\n      <xs:enumeration value=\"ASC\"/>\n      <xs:enumeration value=\"DESC\"/>\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:simpleType name=\"columntoken\" id=\"columntoken\">\n    <xs:restriction base=\"xs:token\">\n      <xs:pattern value=\"[-._:A-Za-z0-9`]+\" id=\"columntoken.pattern\"/>\n    </xs:restriction>\n  </xs:simpleType>\n\n  <xs:complexType name=\"many-to-many\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n       <xs:element name=\"cache\" type=\"orm:cache\" minOccurs=\"0\" maxOccurs=\"1\"/>\n      <xs:element name=\"cascade\" type=\"orm:cascade-type\" minOccurs=\"0\" />\n      <xs:element name=\"join-table\" type=\"orm:join-table\" minOccurs=\"0\" />\n      <xs:element name=\"order-by\" type=\"orm:order-by\" minOccurs=\"0\" />\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"field\" type=\"xs:NMTOKEN\" use=\"required\" />\n    <xs:attribute name=\"target-entity\" type=\"xs:string\" use=\"required\" />\n    <xs:attribute name=\"mapped-by\" type=\"xs:NMTOKEN\" />\n    <xs:attribute name=\"inversed-by\" type=\"xs:NMTOKEN\" />\n    <xs:attribute name=\"index-by\" type=\"xs:NMTOKEN\" />\n    <xs:attribute name=\"fetch\" type=\"orm:fetch-type\" default=\"LAZY\" />\n    <xs:attribute name=\"orphan-removal\" type=\"xs:boolean\" default=\"false\" />\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"one-to-many\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n       <xs:element name=\"cache\" type=\"orm:cache\" minOccurs=\"0\" maxOccurs=\"1\"/>\n      <xs:element name=\"cascade\" type=\"orm:cascade-type\" minOccurs=\"0\" />\n      <xs:element name=\"order-by\" type=\"orm:order-by\" minOccurs=\"0\" />\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"field\" type=\"xs:NMTOKEN\" use=\"required\" />\n    <xs:attribute name=\"target-entity\" type=\"xs:string\" use=\"required\" />\n    <xs:attribute name=\"mapped-by\" type=\"xs:NMTOKEN\" use=\"required\" />\n    <xs:attribute name=\"index-by\" type=\"xs:NMTOKEN\" />\n    <xs:attribute name=\"fetch\" type=\"orm:fetch-type\" default=\"LAZY\" />\n    <xs:attribute name=\"orphan-removal\" type=\"xs:boolean\" default=\"false\" />\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"many-to-one\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n       <xs:element name=\"cache\" type=\"orm:cache\" minOccurs=\"0\" maxOccurs=\"1\"/>\n      <xs:element name=\"cascade\" type=\"orm:cascade-type\" minOccurs=\"0\" />\n      <xs:choice minOccurs=\"0\" maxOccurs=\"1\">\n        <xs:element name=\"join-column\" type=\"orm:join-column\"/>\n        <xs:element name=\"join-columns\" type=\"orm:join-columns\"/>\n      </xs:choice>\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"field\" type=\"xs:NMTOKEN\" use=\"required\" />\n    <xs:attribute name=\"target-entity\" type=\"xs:string\" />\n    <xs:attribute name=\"inversed-by\" type=\"xs:NMTOKEN\" />\n    <xs:attribute name=\"fetch\" type=\"orm:fetch-type\" default=\"LAZY\" />\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"one-to-one\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n       <xs:element name=\"cache\" type=\"orm:cache\" minOccurs=\"0\" maxOccurs=\"1\"/>\n      <xs:element name=\"cascade\" type=\"orm:cascade-type\" minOccurs=\"0\" />\n      <xs:choice minOccurs=\"0\" maxOccurs=\"1\">\n        <xs:element name=\"join-column\" type=\"orm:join-column\"/>\n        <xs:element name=\"join-columns\" type=\"orm:join-columns\"/>\n      </xs:choice>\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"field\" type=\"xs:NMTOKEN\" use=\"required\" />\n    <xs:attribute name=\"target-entity\" type=\"xs:string\" />\n    <xs:attribute name=\"mapped-by\" type=\"xs:NMTOKEN\" />\n    <xs:attribute name=\"inversed-by\" type=\"xs:NMTOKEN\" />\n    <xs:attribute name=\"fetch\" type=\"orm:fetch-type\" default=\"LAZY\" />\n    <xs:attribute name=\"orphan-removal\" type=\"xs:boolean\" default=\"false\" />\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"association-overrides\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"association-override\" type=\"orm:association-override\" minOccurs=\"1\" maxOccurs=\"unbounded\" />\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n  </xs:complexType>\n\n  <xs:complexType name=\"association-override\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"join-table\" type=\"orm:join-table\" minOccurs=\"0\" />\n      <xs:element name=\"join-columns\" type=\"orm:join-columns\" minOccurs=\"0\" />\n      <xs:element name=\"inversed-by\" type=\"orm:inversed-by-override\" minOccurs=\"0\" maxOccurs=\"1\" />\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"name\" type=\"xs:NMTOKEN\" use=\"required\" />\n    <xs:attribute name=\"fetch\" type=\"orm:fetch-type\" use=\"optional\" />\n  </xs:complexType>\n\n  <xs:complexType name=\"inversed-by-override\">\n    <xs:attribute name=\"name\" type=\"xs:NMTOKEN\" use=\"required\" />\n  </xs:complexType>\n\n  <xs:complexType name=\"attribute-overrides\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"attribute-override\" type=\"orm:attribute-override\" minOccurs=\"1\" maxOccurs=\"unbounded\" />\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n  </xs:complexType>\n\n  <xs:complexType name=\"attribute-override\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"field\" type=\"orm:attribute-override-field\" minOccurs=\"1\" />\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"name\" type=\"xs:NMTOKEN\" use=\"required\" />\n  </xs:complexType>\n\n  <xs:complexType name=\"attribute-override-field\">\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"options\" type=\"orm:options\" minOccurs=\"0\" />\n      <xs:any minOccurs=\"0\" maxOccurs=\"unbounded\" namespace=\"##other\"/>\n    </xs:choice>\n    <xs:attribute name=\"type\" type=\"orm:type\" default=\"string\" />\n    <xs:attribute name=\"column\" type=\"orm:columntoken\" />\n    <xs:attribute name=\"length\" type=\"xs:NMTOKEN\" />\n    <xs:attribute name=\"unique\" type=\"xs:boolean\" default=\"false\" />\n    <xs:attribute name=\"nullable\" type=\"xs:boolean\" default=\"false\" />\n    <xs:attribute name=\"insertable\" type=\"xs:boolean\" default=\"true\" />\n    <xs:attribute name=\"updateable\" type=\"xs:boolean\" default=\"true\" />\n    <xs:attribute name=\"version\" type=\"xs:boolean\" />\n    <xs:attribute name=\"column-definition\" type=\"xs:string\" />\n    <xs:attribute name=\"precision\" type=\"xs:integer\" use=\"optional\" />\n    <xs:attribute name=\"scale\" type=\"xs:integer\" use=\"optional\" />\n    <xs:anyAttribute namespace=\"##other\"/>\n  </xs:complexType>\n\n</xs:schema>\n"
        },
        {
          "name": "phpbench.json",
          "type": "blob",
          "size": 0.2197265625,
          "content": "{\n    \"runner.bootstrap\": \"tests/Tests/TestInit.php\",\n    \"runner.path\": \"tests/Performance\",\n    \"runner.file_pattern\": \"*Bench.php\",\n\n    \"core.extensions\": [\n        \"PhpBench\\\\Extensions\\\\XDebug\\\\XDebugExtension\"\n    ]\n}\n"
        },
        {
          "name": "phpcs.xml.dist",
          "type": "blob",
          "size": 14.2548828125,
          "content": "<?xml version=\"1.0\"?>\n<ruleset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         name=\"PHP_CodeSniffer\"\n         xsi:noNamespaceSchemaLocation=\"vendor/squizlabs/php_codesniffer/phpcs.xsd\">\n    <arg name=\"basepath\" value=\".\"/>\n    <arg name=\"extensions\" value=\"php\"/>\n    <arg name=\"parallel\" value=\"80\"/>\n    <arg name=\"cache\" value=\".phpcs-cache\"/>\n    <arg name=\"colors\"/>\n\n    <!-- Ignore warnings, show progress of the run and show sniff names -->\n    <arg value=\"nps\"/>\n\n    <config name=\"php_version\" value=\"80100\"/>\n\n    <file>src</file>\n    <file>tests</file>\n\n    <exclude-pattern>*/tests/Tests/Proxies/__CG__*</exclude-pattern>\n    <exclude-pattern>*/tests/Tests/ORM/Tools/Export/export/*</exclude-pattern>\n\n    <rule ref=\"Doctrine\">\n        <exclude name=\"SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly.ReferencedGeneralException\"/>\n        <exclude name=\"SlevomatCodingStandard.ControlStructures.EarlyExit\"/>\n        <exclude name=\"SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming\"/>\n        <exclude name=\"SlevomatCodingStandard.Classes.SuperfluousExceptionNaming\"/>\n        <exclude name=\"SlevomatCodingStandard.Classes.ModernClassNameReference.ClassNameReferencedViaFunctionCall\"/>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint\">\n        <!--\n            that class extends another one inside src/ and can therefore not\n            have more native typehints since its parent cannot have them: that\n            would break signature compatibility.\n        -->\n        <exclude-pattern>tests/Tests/Mocks/HydratorMockStatement.php</exclude-pattern>\n        <exclude-pattern>tests/Tests/Models/Cache/ComplexAction.php</exclude-pattern>\n        <exclude-pattern>tests/Tests/Models/DDC117/DDC117ArticleDetails.php</exclude-pattern>\n        <exclude-pattern>tests/Tests/Models/DDC117/DDC117Translation.php</exclude-pattern>\n        <exclude-pattern>tests/Tests/ORM/Functional/Ticket/DDC2579Test.php</exclude-pattern>\n        <exclude-pattern>tests/Tests/ORM/Functional/ValueObjectsTest.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingAnyTypeHint\">\n        <exclude-pattern>tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint\">\n        <exclude-pattern>tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"PSR1.Classes.ClassDeclaration.MultipleClasses\">\n        <exclude-pattern>src/Mapping/Driver/LoadMappingFileImplementation.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/GetReflectionClassImplementation.php</exclude-pattern>\n        <exclude-pattern>tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Squiz.Classes.ClassFileName.NoMatch\">\n        <exclude-pattern>src/Tools/Console/Helper/EntityManagerHelper.php</exclude-pattern>\n        <exclude-pattern>tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Squiz.NamingConventions.ValidVariableName.MemberNotCamelCaps\">\n        <exclude-pattern>src/Tools/Debug.php</exclude-pattern>\n        <exclude-pattern>tests/Tests/ORM/Tools/DebugTest.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Generic.NamingConventions.UpperCaseConstantName.ClassConstantNotUpperCase\">\n        <exclude-pattern>src/Events.php</exclude-pattern>\n        <exclude-pattern>src/Tools/ToolEvents.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.Operators.DisallowEqualOperators.DisallowedNotEqualOperator\">\n        <exclude-pattern>src/Internal/Hydration/AbstractHydrator.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"PSR1.Methods.CamelCapsMethodName.NotCamelCaps\">\n        <exclude-pattern>src/Query/Parser.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly.ReferenceViaFullyQualifiedName\">\n        <exclude-pattern>src/Mapping/AssociationOverride.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/AssociationOverrides.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/AttributeOverride.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/AttributeOverrides.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/Cache.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/ChangeTrackingPolicy.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/Column.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/CustomIdGenerator.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/DiscriminatorColumn.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/DiscriminatorMap.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/Embeddable.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/Embedded.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/Entity.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/EntityListeners.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/GeneratedValue.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/HasLifecycleCallbacks.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/Id.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/Index.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/InheritanceType.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/JoinColumn.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/JoinColumns.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/JoinTable.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/ManyToMany.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/ManyToOne.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/MappedSuperclass.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/OneToMany.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/OneToOne.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/OrderBy.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/PostLoad.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/PostPersist.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/PostRemove.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/PostUpdate.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/PreFlush.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/PrePersist.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/PreRemove.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/PreUpdate.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/SequenceGenerator.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/Table.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/UniqueConstraint.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/Version.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.Commenting.EmptyComment\">\n        <exclude-pattern>src/Cache/DefaultQueryCache.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.Commenting.ForbiddenAnnotations\">\n        <properties>\n            <property name=\"forbiddenAnnotations\" type=\"array\">\n                <!--\n                    From Doctrine Coding Standard:\n                    Forbid useless annotations - Git and LICENCE file provide more accurate information\n                -->\n                <element value=\"@api\"/>\n                <element value=\"@author\"/>\n                <element value=\"@category\"/>\n                <element value=\"@copyright\"/>\n                <element value=\"@created\"/>\n                <element value=\"@license\"/>\n                <element value=\"@package\"/>\n                <element value=\"@since\"/>\n                <element value=\"@subpackage\"/>\n                <element value=\"@version\"/>\n\n                <!-- Additionally forbid oldschool PHPUnit annotations to force the usage of attributes -->\n                <element value=\"@covers\"/>\n                <element value=\"@depends\"/>\n                <element value=\"@dataProvider\"/>\n                <element value=\"@group\"/>\n                <element value=\"@requires\"/>\n                <element value=\"@test\"/>\n                <element value=\"@testWith\"/>\n            </property>\n        </properties>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming\">\n        <exclude-pattern>src/EntityManagerInterface.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.Classes.SuperfluousTraitNaming.SuperfluousSuffix\">\n        <exclude-pattern>tests/Tests/Models/DDC1872/DDC1872ExampleTrait.php</exclude-pattern>\n    </rule>\n\n    <rule name=\"SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingAnyTypeHint\">\n        <exclude-pattern>*/tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification\">\n        <exclude-pattern>*/tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingTraversableTypeHintSpecification\">\n        <exclude-pattern>*/tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingTraversableTypeHintSpecification\">\n        <exclude-pattern>*/tests/*</exclude-pattern>\n    </rule>\n\n    <!-- intentionally without namespace -->\n    <rule ref=\"PSR1.Classes.ClassDeclaration.MissingNamespace\">\n        <exclude-pattern>tests/Tests/Models/Global/GlobalNamespaceModel.php</exclude-pattern>\n        <exclude-pattern>tests/Tests/Models/DDC3231/DDC3231User1NoNamespace.php</exclude-pattern>\n        <exclude-pattern>tests/Tests/Models/DDC3231/DDC3231User2NoNamespace.php</exclude-pattern>\n    </rule>\n\n    <!-- file with multiple namespaces confuses the sniff -->\n    <rule ref=\"PSR2.Namespaces.UseDeclaration.UseAfterNamespace\">\n        <exclude-pattern>tests/Tests/ORM/Functional/Ticket/DDC2084Test.php</exclude-pattern>\n    </rule>\n\n    <!-- file with multiple namespaces confuses the sniff -->\n    <rule ref=\"SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses.IncorrectlyOrderedUses\">\n        <exclude-pattern>tests/Tests/ORM/Functional/Ticket/DDC2084Test.php</exclude-pattern>\n    </rule>\n\n    <!-- intentionally empty blocks -->\n    <rule ref=\"Generic.CodeAnalysis.EmptyStatement.DetectedForeach\">\n        <exclude-pattern>tests/Tests/ORM/Functional/Ticket/DDC1301Test.php</exclude-pattern>\n        <exclude-pattern>tests/Tests/ORM/Functional/ExtraLazyCollectionTest.php</exclude-pattern>\n    </rule>\n\n    <!--\n        That file is used in a test as a template to create another one with a\n        different namespace. The use statement has to stay.\n    -->\n    <rule ref=\"SlevomatCodingStandard.Namespaces.UseFromSameNamespace.UseFromSameNamespace\">\n        <exclude-pattern>tests/Tests/Models/DDC1590/DDC1590User.php</exclude-pattern>\n    </rule>\n\n\n    <rule ref=\"Squiz.Classes.ValidClassName.NotCamelCaps\">\n        <!-- we need to test what happens with an stdClass proxy -->\n        <exclude-pattern>tests/Tests/Proxy/DefaultProxyClassNameResolverTest.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Squiz.Commenting.FunctionComment.WrongStyle\">\n        <!-- https://github.com/squizlabs/PHP_CodeSniffer/issues/1961 -->\n        <exclude-pattern>tests/Tests/Mocks/DatabasePlatformMock.php</exclude-pattern>\n        <exclude-pattern>tests/Tests/Mocks/DriverMock.php</exclude-pattern>\n        <exclude-pattern>tests/Tests/ORM/UnitOfWorkTest.php</exclude-pattern>\n        <exclude-pattern>tests/Tests/ORM/Query/DeleteSqlGenerationTest.php</exclude-pattern>\n    </rule>\n    <rule ref=\"Squiz.Commenting.FunctionComment.InvalidNoReturn\">\n        <!-- https://github.com/squizlabs/PHP_CodeSniffer/issues/2099 -->\n        <exclude-pattern>src/Query/AST/Node.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration.NoAssignment\">\n        <exclude-pattern>tests/Tests/ORM/Mapping/php/Doctrine.Tests*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"PSR2.Methods.MethodDeclaration.Underscore\">\n        <exclude-pattern>src/AbstractQuery.php</exclude-pattern>\n        <exclude-pattern>src/Mapping/ClassMetadata.php</exclude-pattern>\n        <exclude-pattern>src/NativeQuery.php</exclude-pattern>\n        <exclude-pattern>src/Query.php</exclude-pattern>\n        <exclude-pattern>src/Query/TreeWalkerAdapter.php</exclude-pattern>\n        <exclude-pattern>src/Tools/Export/Driver/AbstractExporter.php</exclude-pattern>\n        <exclude-pattern>src/Tools/Export/Driver/PhpExporter.php</exclude-pattern>\n        <!-- extending a class from another package -->\n        <exclude-pattern>tests/Tests/Mocks/DatabasePlatformMock.php</exclude-pattern>\n        <exclude-pattern>tests/Tests/Mocks/SchemaManagerMock.php</exclude-pattern>\n        <exclude-pattern>tests/Tests/ORM/AbstractQueryTest.php</exclude-pattern>\n        <exclude-pattern>tests/Tests/ORM/Functional/Ticket/DDC3634Test.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Squiz.NamingConventions.ValidVariableName.PublicHasUnderscore\">\n        <!-- the impact of changing this would be too big -->\n        <exclude-pattern>tests/Tests/OrmFunctionalTestCase.php</exclude-pattern>\n    </rule>\n    <rule ref=\"Squiz.NamingConventions.ValidVariableName.MemberNotCamelCaps\">\n        <!-- Member variable \"__isCloning\" is not in valid camel caps format -->\n        <exclude-pattern>src/Proxy/ProxyFactory.php</exclude-pattern>\n        <!-- accessing public property __isInitialized__ of a proxy -->\n        <exclude-pattern>tests/Tests/ORM/Functional/ProxiesLikeEntitiesTest.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.Namespaces.UnusedUses.MismatchingCaseSensitivity\">\n        <!-- Using @group and Group entity in the same file -->\n        <exclude-pattern>tests/Tests/ORM/Functional/Ticket/DDC1885Test.php</exclude-pattern>\n        <exclude-pattern>tests/Tests/ORM/Functional/Ticket/DDC1843Test.php</exclude-pattern>\n        <exclude-pattern>tests/Tests/ORM/Mapping/ClassMetadataFactoryTest.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Generic.CodeAnalysis.EmptyStatement.DetectedElse\">\n        <!-- The missing code needs to be implemented someday -->\n        <exclude-pattern>src/Id/TableGenerator.php</exclude-pattern>\n    </rule>\n    <rule ref=\"Generic.CodeAnalysis.EmptyStatement.DetectedIf\">\n        <!-- The missing code needs to be implemented someday -->\n        <exclude-pattern>src/Id/TableGenerator.php</exclude-pattern>\n    </rule>\n    <rule ref=\"Squiz.Commenting.FunctionComment.ExtraParamComment\">\n        <!-- https://github.com/doctrine/orm/issues/8537 -->\n        <exclude-pattern>src/QueryBuilder.php</exclude-pattern>\n    </rule>\n</ruleset>\n"
        },
        {
          "name": "phpstan-baseline.neon",
          "type": "blob",
          "size": 178.4609375,
          "content": "parameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: '#^Expression \"\\$setCacheEntry\\(\\$data\\)\" on a separate line does not do anything\\.$#'\n\t\t\tidentifier: expr.resultUnused\n\t\t\tcount: 1\n\t\t\tpath: src/AbstractQuery.php\n\n\t\t-\n\t\t\tmessage: '#^Expression \"\\$setCacheEntry\\(\\$stmt\\)\" on a separate line does not do anything\\.$#'\n\t\t\tidentifier: expr.resultUnused\n\t\t\tcount: 1\n\t\t\tpath: src/AbstractQuery.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\AbstractQuery\\:\\:getParameter\\(\\) should return Doctrine\\\\ORM\\\\Query\\\\Parameter\\|null but returns Doctrine\\\\ORM\\\\Query\\\\Parameter\\|false\\|null\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/AbstractQuery.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$stmt of method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\AbstractHydrator\\:\\:toIterable\\(\\) expects Doctrine\\\\DBAL\\\\Result, Doctrine\\\\DBAL\\\\Result\\|int given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/AbstractQuery.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\CacheFactory\\:\\:buildCachedEntityPersister\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/CacheFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\CacheFactory\\:\\:buildEntityHydrator\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/CacheFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\CollectionHydrator\\:\\:buildCacheEntry\\(\\) has parameter \\$collection with generic interface Doctrine\\\\Common\\\\Collections\\\\Collection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/CollectionHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\CollectionHydrator\\:\\:buildCacheEntry\\(\\) has parameter \\$collection with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/CollectionHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\CollectionHydrator\\:\\:buildCacheEntry\\(\\) has parameter \\$collection with no value type specified in iterable type array\\|\\(Doctrine\\\\Common\\\\Collections\\\\Collection&iterable\\)\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/CollectionHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\CollectionHydrator\\:\\:buildCacheEntry\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/CollectionHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\CollectionHydrator\\:\\:loadCacheEntry\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/CollectionHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\CollectionHydrator\\:\\:loadCacheEntry\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/CollectionHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\DefaultCache\\:\\:buildCollectionCacheKey\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultCache.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\DefaultCache\\:\\:buildEntityCacheKey\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultCache.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\DefaultCache\\:\\:toIdentifierArray\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultCache.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\DefaultCacheFactory\\:\\:buildCachedEntityPersister\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultCacheFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\DefaultCacheFactory\\:\\:buildEntityHydrator\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultCacheFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\DefaultCollectionHydrator\\:\\:buildCacheEntry\\(\\) has parameter \\$collection with generic interface Doctrine\\\\Common\\\\Collections\\\\Collection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultCollectionHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\DefaultCollectionHydrator\\:\\:buildCacheEntry\\(\\) has parameter \\$collection with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultCollectionHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\DefaultCollectionHydrator\\:\\:buildCacheEntry\\(\\) has parameter \\$collection with no value type specified in iterable type array\\|\\(Doctrine\\\\Common\\\\Collections\\\\Collection&iterable\\)\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultCollectionHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\DefaultCollectionHydrator\\:\\:buildCacheEntry\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultCollectionHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\DefaultCollectionHydrator\\:\\:loadCacheEntry\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultCollectionHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\DefaultCollectionHydrator\\:\\:loadCacheEntry\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultCollectionHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumnFieldNames\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultEntityHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$targetToSourceKeyColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultEntityHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$targetToSourceKeyColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultEntityHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\EntityPersister\\:\\:getCacheRegion\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultEntityHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\DefaultEntityHydrator\\:\\:buildCacheEntry\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultEntityHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\DefaultEntityHydrator\\:\\:loadCacheEntry\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultEntityHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$data of class Doctrine\\\\ORM\\\\Cache\\\\EntityCacheEntry constructor expects array\\<string, mixed\\>, array\\<int\\|string, mixed\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultEntityHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Unable to resolve the template type T in call to method Doctrine\\\\ORM\\\\EntityManagerInterface\\:\\:getReference\\(\\)$#'\n\t\t\tidentifier: argument.templateType\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultEntityHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Cache\\\\CacheEntry\\:\\:\\$class\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Cache/DefaultQueryCache.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined method Doctrine\\\\ORM\\\\Cache\\\\CacheEntry\\:\\:resolveAssociationEntries\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Cache/DefaultQueryCache.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\EntityPersister\\:\\:getCacheRegion\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultQueryCache.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\EntityPersister\\:\\:storeEntityCache\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Cache/DefaultQueryCache.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\DefaultQueryCache\\:\\:storeAssociationCache\\(\\) return type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 2\n\t\t\tpath: src/Cache/DefaultQueryCache.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$className of method Doctrine\\\\ORM\\\\EntityManagerInterface\\:\\:getClassMetadata\\(\\) expects string, class\\-string\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 2\n\t\t\tpath: src/Cache/DefaultQueryCache.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$entityName of method Doctrine\\\\ORM\\\\UnitOfWork\\:\\:getEntityPersister\\(\\) expects class\\-string, class\\-string\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 2\n\t\t\tpath: src/Cache/DefaultQueryCache.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$entityName of static method Doctrine\\\\ORM\\\\Cache\\\\Exception\\\\NonCacheableEntity\\:\\:fromEntity\\(\\) expects string, class\\-string\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultQueryCache.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$result of class Doctrine\\\\ORM\\\\Cache\\\\QueryCacheEntry constructor expects array\\<string, mixed\\>, array\\<int\\|string, array\\<string, array\\<mixed\\>\\>\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/DefaultQueryCache.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$key of method Doctrine\\\\ORM\\\\Cache\\\\Logging\\\\CacheLogger\\:\\:entityCacheHit\\(\\) expects Doctrine\\\\ORM\\\\Cache\\\\EntityCacheKey, Doctrine\\\\ORM\\\\Cache\\\\CacheKey given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 2\n\t\t\tpath: src/Cache/DefaultQueryCache.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$key of method Doctrine\\\\ORM\\\\Cache\\\\Logging\\\\CacheLogger\\:\\:entityCacheMiss\\(\\) expects Doctrine\\\\ORM\\\\Cache\\\\EntityCacheKey, Doctrine\\\\ORM\\\\Cache\\\\CacheKey given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 2\n\t\t\tpath: src/Cache/DefaultQueryCache.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\EntityHydrator\\:\\:buildCacheEntry\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/EntityHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\EntityHydrator\\:\\:loadCacheEntry\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/EntityHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Cache\\\\CacheEntry\\:\\:\\$identifiers\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/AbstractCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\AbstractCollectionPersister\\:\\:contains\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/AbstractCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\AbstractCollectionPersister\\:\\:containsKey\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/AbstractCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\AbstractCollectionPersister\\:\\:count\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/AbstractCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\AbstractCollectionPersister\\:\\:get\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/AbstractCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\AbstractCollectionPersister\\:\\:getSourceEntityMetadata\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/AbstractCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\AbstractCollectionPersister\\:\\:getTargetEntityMetadata\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/AbstractCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\AbstractCollectionPersister\\:\\:loadCollectionCache\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/AbstractCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\AbstractCollectionPersister\\:\\:loadCriteria\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/AbstractCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\AbstractCollectionPersister\\:\\:slice\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/AbstractCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\AbstractCollectionPersister\\:\\:storeCollectionCache\\(\\) has parameter \\$elements with generic interface Doctrine\\\\Common\\\\Collections\\\\Collection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/AbstractCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\AbstractCollectionPersister\\:\\:storeCollectionCache\\(\\) has parameter \\$elements with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/AbstractCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\AbstractCollectionPersister\\:\\:storeCollectionCache\\(\\) has parameter \\$elements with no value type specified in iterable type array\\|\\(Doctrine\\\\Common\\\\Collections\\\\Collection&iterable\\)\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/AbstractCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$key of method Doctrine\\\\ORM\\\\Cache\\\\EntityHydrator\\:\\:buildCacheEntry\\(\\) expects Doctrine\\\\ORM\\\\Cache\\\\EntityCacheKey, Doctrine\\\\ORM\\\\Cache\\\\CacheKey given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/AbstractCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#3 \\$entry of method Doctrine\\\\ORM\\\\Cache\\\\CollectionHydrator\\:\\:loadCacheEntry\\(\\) expects Doctrine\\\\ORM\\\\Cache\\\\CollectionCacheEntry, Doctrine\\\\ORM\\\\Cache\\\\CacheEntry given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/AbstractCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\AbstractCollectionPersister\\:\\:\\$sourceEntity with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/AbstractCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\AbstractCollectionPersister\\:\\:\\$targetEntity with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/AbstractCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\CachedCollectionPersister\\:\\:getSourceEntityMetadata\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/CachedCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\CachedCollectionPersister\\:\\:getTargetEntityMetadata\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/CachedCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\CachedCollectionPersister\\:\\:loadCollectionCache\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/CachedCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\CachedCollectionPersister\\:\\:storeCollectionCache\\(\\) has parameter \\$elements with generic interface Doctrine\\\\Common\\\\Collections\\\\Collection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/CachedCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\CachedCollectionPersister\\:\\:storeCollectionCache\\(\\) has parameter \\$elements with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/CachedCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\CachedCollectionPersister\\:\\:storeCollectionCache\\(\\) has parameter \\$elements with no value type specified in iterable type array\\|\\(Doctrine\\\\Common\\\\Collections\\\\Collection&iterable\\)\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/CachedCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\NonStrictReadWriteCachedCollectionPersister\\:\\:delete\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/NonStrictReadWriteCachedCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\NonStrictReadWriteCachedCollectionPersister\\:\\:update\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/NonStrictReadWriteCachedCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\ReadOnlyCachedCollectionPersister\\:\\:update\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/ReadOnlyCachedCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined method Doctrine\\\\ORM\\\\Cache\\\\Region\\:\\:lock\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Cache/Persister/Collection/ReadWriteCachedCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\ReadWriteCachedCollectionPersister\\:\\:delete\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/ReadWriteCachedCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Collection\\\\ReadWriteCachedCollectionPersister\\:\\:update\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Collection/ReadWriteCachedCollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Cache\\\\CacheEntry\\:\\:\\$class\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Cache/Persister/Entity/AbstractEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\CachedPersister&Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\CollectionPersister\\:\\:loadCollectionCache\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Cache/Persister/Entity/AbstractEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\CachedPersister&Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\CollectionPersister\\:\\:storeCollectionCache\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Cache/Persister/Entity/AbstractEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\EntityPersister\\:\\:storeEntityCache\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Entity/AbstractEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Entity\\\\AbstractEntityPersister\\:\\:__construct\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Entity/AbstractEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Entity\\\\AbstractEntityPersister\\:\\:getClassMetadata\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Entity/AbstractEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Entity\\\\AbstractEntityPersister\\:\\:loadManyToManyCollection\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Entity/AbstractEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Entity\\\\AbstractEntityPersister\\:\\:loadOneToManyCollection\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Entity/AbstractEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#3 \\$entry of method Doctrine\\\\ORM\\\\Cache\\\\EntityHydrator\\:\\:loadCacheEntry\\(\\) expects Doctrine\\\\ORM\\\\Cache\\\\EntityCacheEntry, Doctrine\\\\ORM\\\\Cache\\\\CacheEntry given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Entity/AbstractEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined method Doctrine\\\\ORM\\\\Cache\\\\Region\\:\\:lock\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Cache/Persister/Entity/ReadWriteCachedEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^If condition is always true\\.$#'\n\t\t\tidentifier: if.alwaysTrue\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Entity/ReadWriteCachedEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Cache\\\\Persister\\\\Entity\\\\ReadWriteCachedEntityPersister\\:\\:__construct\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/Persister/Entity/ReadWriteCachedEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Cache\\\\CacheEntry\\:\\:\\$time\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Cache/TimestampQueryCacheValidator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Configuration\\:\\:getDefaultRepositoryClassName\\(\\) return type with generic class Doctrine\\\\ORM\\\\EntityRepository does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Configuration.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Configuration\\:\\:setDefaultRepositoryClassName\\(\\) has parameter \\$className with generic class Doctrine\\\\ORM\\\\EntityRepository but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Configuration.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$className of method Doctrine\\\\ORM\\\\Configuration\\:\\:addCustomNumericFunction\\(\\) expects \\(callable\\(string\\)\\: Doctrine\\\\ORM\\\\Query\\\\AST\\\\Functions\\\\FunctionNode\\)\\|class\\-string\\<Doctrine\\\\ORM\\\\Query\\\\AST\\\\Functions\\\\FunctionNode\\>, class\\-string given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Configuration.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Decorator\\\\EntityManagerDecorator\\:\\:getClassMetadata\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Decorator/EntityManagerDecorator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Decorator\\\\EntityManagerDecorator\\:\\:getRepository\\(\\) return type with generic class Doctrine\\\\ORM\\\\EntityRepository does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Decorator/EntityManagerDecorator.php\n\n\t\t-\n\t\t\tmessage: '#^Return type \\(Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\) of method Doctrine\\\\ORM\\\\Decorator\\\\EntityManagerDecorator\\:\\:getMetadataFactory\\(\\) should be compatible with return type \\(Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadataFactory\\<Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata\\<object\\>\\>\\) of method Doctrine\\\\Persistence\\\\ObjectManager\\:\\:getMetadataFactory\\(\\)$#'\n\t\t\tidentifier: method.childReturnType\n\t\t\tcount: 1\n\t\t\tpath: src/Decorator/EntityManagerDecorator.php\n\n\t\t-\n\t\t\tmessage: '#^Return type \\(Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\) of method Doctrine\\\\ORM\\\\Decorator\\\\EntityManagerDecorator\\:\\:getMetadataFactory\\(\\) should be compatible with return type \\(Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadataFactory\\<Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata\\<object\\>\\>\\) of method Doctrine\\\\Persistence\\\\ObjectManagerDecorator\\<Doctrine\\\\ORM\\\\EntityManagerInterface\\>\\:\\:getMetadataFactory\\(\\)$#'\n\t\t\tidentifier: method.childReturnType\n\t\t\tcount: 1\n\t\t\tpath: src/Decorator/EntityManagerDecorator.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined method object\\:\\:setEntityManager\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/EntityManager.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\EntityManager\\:\\:checkLockRequirements\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/EntityManager.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\EntityManager\\:\\:find\\(\\) should return \\(T of object\\)\\|null but returns object\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/EntityManager.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\EntityManager\\:\\:find\\(\\) should return \\(T of object\\)\\|null but returns object\\|null\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 3\n\t\t\tpath: src/EntityManager.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\EntityManager\\:\\:getReference\\(\\) should return \\(T of object\\)\\|null but returns Doctrine\\\\ORM\\\\Proxy\\\\InternalProxy\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/EntityManager.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\EntityManager\\:\\:getReference\\(\\) should return \\(T of object\\)\\|null but returns object\\|null\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/EntityManager.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\EntityManager\\:\\:isUninitializedObject\\(\\) has parameter \\$value with no type specified\\.$#'\n\t\t\tidentifier: missingType.parameter\n\t\t\tcount: 1\n\t\t\tpath: src/EntityManager.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$className of method Doctrine\\\\Persistence\\\\Mapping\\\\AbstractClassMetadataFactory\\<Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\>\\:\\:getMetadataFor\\(\\) expects class\\-string, string given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/EntityManager.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\EntityManager\\:\\:\\$metadataFactory \\(Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\) does not accept object\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/EntityManager.php\n\n\t\t-\n\t\t\tmessage: '#^Return type \\(Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\) of method Doctrine\\\\ORM\\\\EntityManager\\:\\:getMetadataFactory\\(\\) should be compatible with return type \\(Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadataFactory\\<Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata\\<object\\>\\>\\) of method Doctrine\\\\Persistence\\\\ObjectManager\\:\\:getMetadataFactory\\(\\)$#'\n\t\t\tidentifier: method.childReturnType\n\t\t\tcount: 1\n\t\t\tpath: src/EntityManager.php\n\n\t\t-\n\t\t\tmessage: '#^Return type \\(Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\) of method Doctrine\\\\ORM\\\\EntityManagerInterface\\:\\:getMetadataFactory\\(\\) should be compatible with return type \\(Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadataFactory\\<Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata\\<object\\>\\>\\) of method Doctrine\\\\Persistence\\\\ObjectManager\\:\\:getMetadataFactory\\(\\)$#'\n\t\t\tidentifier: method.childReturnType\n\t\t\tcount: 1\n\t\t\tpath: src/EntityManagerInterface.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\EntityRepository\\:\\:findBy\\(\\) should return list\\<T of object\\> but returns array\\<mixed\\>\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/EntityRepository.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\EntityRepository\\:\\:findOneBy\\(\\) should return \\(T of object\\)\\|null but returns object\\|null\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/EntityRepository.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\EntityRepository\\:\\:matching\\(\\) should return Doctrine\\\\Common\\\\Collections\\\\AbstractLazyCollection\\<int, T of object\\>&Doctrine\\\\Common\\\\Collections\\\\Selectable\\<int, T of object\\> but returns Doctrine\\\\ORM\\\\LazyCriteriaCollection\\<\\(int\\|string\\), object\\>\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/EntityRepository.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Event\\\\ListenersInvoker\\:\\:getSubscribedSystems\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Event/ListenersInvoker.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Event\\\\ListenersInvoker\\:\\:invoke\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Event/ListenersInvoker.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Event\\\\OnClassMetadataNotFoundEventArgs\\:\\:getFoundMetadata\\(\\) return type with generic interface Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Event/OnClassMetadataNotFoundEventArgs.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Event\\\\OnClassMetadataNotFoundEventArgs\\:\\:setFoundMetadata\\(\\) has parameter \\$classMetadata with generic interface Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Event/OnClassMetadataNotFoundEventArgs.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Event\\\\OnClassMetadataNotFoundEventArgs\\:\\:\\$foundMetadata with generic interface Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Event/OnClassMetadataNotFoundEventArgs.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Event\\\\PreUpdateEventArgs\\:\\:__construct\\(\\) has parameter \\$changeSet with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Event/PreUpdateEventArgs.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Event\\\\PreUpdateEventArgs\\:\\:getEntityChangeSet\\(\\) return type with generic class Doctrine\\\\ORM\\\\PersistentCollection does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Event/PreUpdateEventArgs.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Event\\\\PreUpdateEventArgs\\:\\:\\$entityChangeSet with generic class Doctrine\\\\ORM\\\\PersistentCollection does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Event/PreUpdateEventArgs.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Id\\\\AssignedGenerator\\:\\:generateId\\(\\) return type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Id/AssignedGenerator.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Internal/Hydration/AbstractHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\AbstractHydrator\\:\\:gatherRowData\\(\\) return type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 3\n\t\t\tpath: src/Internal/Hydration/AbstractHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\AbstractHydrator\\:\\:gatherRowData\\(\\) return type with generic class ReflectionClass does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/Hydration/AbstractHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\AbstractHydrator\\:\\:getClassMetadata\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/Hydration/AbstractHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\AbstractHydrator\\:\\:getDiscriminatorValues\\(\\) has parameter \\$classMetadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/Hydration/AbstractHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\AbstractHydrator\\:\\:registerManaged\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/Hydration/AbstractHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter &\\$id by\\-ref type of method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\AbstractHydrator\\:\\:gatherRowData\\(\\) expects array\\<string, string\\>, array\\<int\\|string, string\\> given\\.$#'\n\t\t\tidentifier: parameterByRef.type\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/Hydration/AbstractHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter &\\$nonemptyComponents by\\-ref type of method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\AbstractHydrator\\:\\:gatherRowData\\(\\) expects array\\<string, bool\\>, array\\<int\\|string, bool\\> given\\.$#'\n\t\t\tidentifier: parameterByRef.type\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/Hydration/AbstractHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\ArrayHydrator\\:\\:hydrateAllData\\(\\) return type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/Hydration/ArrayHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter &\\$result by\\-ref type of method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\ArrayHydrator\\:\\:hydrateRowData\\(\\) expects array\\<mixed\\>, array\\<mixed\\>\\|null given\\.$#'\n\t\t\tidentifier: parameterByRef.type\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/Hydration/ArrayHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$inversedBy\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Internal/Hydration/ObjectHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Internal/Hydration/ObjectHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$mappedBy\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 3\n\t\t\tpath: src/Internal/Hydration/ObjectHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\ObjectHydrator\\:\\:hydrateAllData\\(\\) return type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/Hydration/ObjectHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\ObjectHydrator\\:\\:initRelatedCollection\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/Hydration/ObjectHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\ObjectHydrator\\:\\:initRelatedCollection\\(\\) return type with generic class Doctrine\\\\ORM\\\\PersistentCollection does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/Hydration/ObjectHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$assoc of method Doctrine\\\\ORM\\\\PersistentCollection\\<\\(int\\|string\\),mixed\\>\\:\\:setOwner\\(\\) expects Doctrine\\\\ORM\\\\Mapping\\\\AssociationMapping&Doctrine\\\\ORM\\\\Mapping\\\\ToManyAssociationMapping, Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/Hydration/ObjectHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\ObjectHydrator\\:\\:\\$uninitializedCollections with generic class Doctrine\\\\ORM\\\\PersistentCollection does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/Hydration/ObjectHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\ScalarColumnHydrator\\:\\:hydrateAllData\\(\\) return type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/Hydration/ScalarColumnHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\ScalarHydrator\\:\\:hydrateAllData\\(\\) return type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/Hydration/ScalarHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\SimpleObjectHydrator\\:\\:hydrateAllData\\(\\) return type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/Hydration/SimpleObjectHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\SimpleObjectHydrator\\:\\:\\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/Hydration/SimpleObjectHydrator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Internal\\\\HydrationCompleteHandler\\:\\:deferPostLoadInvoking\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/HydrationCompleteHandler.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Internal\\\\StronglyConnectedComponents\\:\\:\\$representingNodes \\(array\\<int, object\\>\\) does not accept array\\<int\\|string, object\\>\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/StronglyConnectedComponents.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Internal\\\\StronglyConnectedComponents\\:\\:\\$states \\(array\\<int, 1\\|2\\|3\\>\\) does not accept non\\-empty\\-array\\<''''\\|int, 1\\|2\\|3\\>\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Internal/StronglyConnectedComponents.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\AnsiQuoteStrategy\\:\\:getColumnAlias\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/AnsiQuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\AnsiQuoteStrategy\\:\\:getColumnName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/AnsiQuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\AnsiQuoteStrategy\\:\\:getIdentifierColumnNames\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/AnsiQuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\AnsiQuoteStrategy\\:\\:getJoinColumnName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/AnsiQuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\AnsiQuoteStrategy\\:\\:getJoinTableName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/AnsiQuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\AnsiQuoteStrategy\\:\\:getReferencedJoinColumnName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/AnsiQuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\AnsiQuoteStrategy\\:\\:getSequenceName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/AnsiQuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\AnsiQuoteStrategy\\:\\:getTableName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/AnsiQuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$mappingArray of static method Doctrine\\\\ORM\\\\Mapping\\\\JoinTableMapping\\:\\:fromMappingArray\\(\\) expects array\\{name\\: string, quoted\\?\\: bool\\|null, joinColumns\\?\\: array\\<mixed\\>, inverseJoinColumns\\?\\: array\\<mixed\\>, schema\\?\\: string\\|null, options\\?\\: array\\<string, mixed\\>\\}, non\\-empty\\-array\\<mixed\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/AssociationMapping.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Mapping\\\\AssociationMapping\\:\\:\\$cache type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/AssociationMapping.php\n\n\t\t-\n\t\t\tmessage: '#^Instanceof between Doctrine\\\\ORM\\\\Mapping\\\\AssociationOverride and Doctrine\\\\ORM\\\\Mapping\\\\AssociationOverride will always evaluate to true\\.$#'\n\t\t\tidentifier: instanceof.alwaysTrue\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/AssociationOverrides.php\n\n\t\t-\n\t\t\tmessage: '#^Instanceof between Doctrine\\\\ORM\\\\Mapping\\\\AttributeOverride and Doctrine\\\\ORM\\\\Mapping\\\\AttributeOverride will always evaluate to true\\.$#'\n\t\t\tidentifier: instanceof.alwaysTrue\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/AttributeOverrides.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\Builder\\\\ClassMetadataBuilder\\:\\:__construct\\(\\) has parameter \\$cm with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Builder/ClassMetadataBuilder.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\Builder\\\\ClassMetadataBuilder\\:\\:getClassMetadata\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Builder/ClassMetadataBuilder.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$repositoryClassName of method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<object\\>\\:\\:setCustomRepositoryClass\\(\\) expects class\\-string\\<Doctrine\\\\ORM\\\\EntityRepository\\>\\|null, string given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Builder/ClassMetadataBuilder.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$mapping of method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<object\\>\\:\\:mapEmbedded\\(\\) expects array\\{fieldName\\: string, class\\?\\: class\\-string, declaredField\\?\\: string, columnPrefix\\?\\: string\\|false\\|null, originalField\\?\\: string\\}, array\\<mixed\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Builder/EmbeddedBuilder.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\Builder\\\\EntityListenerBuilder\\:\\:bindEntityListener\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Builder/EntityListenerBuilder.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 4\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^If condition is always true\\.$#'\n\t\t\tidentifier: if.alwaysTrue\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\:\\:inlineEmbeddable\\(\\) has parameter \\$embeddable with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\:\\:setAssociationOverride\\(\\) has parameter \\$overrideMapping with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 2\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\:\\:setCustomRepositoryClass\\(\\) has parameter \\$repositoryClassName with generic class Doctrine\\\\ORM\\\\EntityRepository but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$array \\(list\\<string\\>\\) of array_values is already a list, call has no effect\\.$#'\n\t\t\tidentifier: arrayValues.list\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$class of method Doctrine\\\\Persistence\\\\Mapping\\\\ReflectionService\\:\\:getAccessibleProperty\\(\\) expects class\\-string, string given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$mapping of method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<T of object\\>\\:\\:validateAndCompleteTypedAssociationMapping\\(\\) expects array\\{type\\: 1\\|2\\|4\\|8, fieldName\\: string, targetEntity\\?\\: class\\-string\\}, non\\-empty\\-array\\<string, mixed\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$mappingArray of static method Doctrine\\\\ORM\\\\Mapping\\\\AssociationMapping\\:\\:fromMappingArray\\(\\) expects array\\{fieldName\\: string, sourceEntity\\: class\\-string, targetEntity\\: class\\-string, cascade\\?\\: list\\<''all''\\|''detach''\\|''persist''\\|''refresh''\\|''remove''\\>, fetch\\?\\: 2\\|3\\|4\\|null, inherited\\?\\: class\\-string\\|null, declared\\?\\: class\\-string\\|null, cache\\?\\: array\\<mixed\\>\\|null, \\.\\.\\.\\}, non\\-empty\\-array given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$mappingArray of static method Doctrine\\\\ORM\\\\Mapping\\\\EmbeddedClassMapping\\:\\:fromMappingArray\\(\\) expects array\\{class\\: class\\-string, columnPrefix\\?\\: string\\|false\\|null, declaredField\\?\\: string\\|null, originalField\\?\\: string\\|null, inherited\\?\\: class\\-string\\|null, declared\\?\\: class\\-string\\|null\\}, array\\{class\\: string, columnPrefix\\: string\\|false\\|null, declaredField\\: string\\|null, originalField\\: string\\|null\\} given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$mappingArray of static method Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\:\\:fromMappingArrayAndNamingStrategy\\(\\) expects array\\{fieldName\\: string, sourceEntity\\: class\\-string, targetEntity\\: class\\-string, cascade\\?\\: list\\<''all''\\|''detach''\\|''persist''\\|''refresh''\\|''remove''\\>, fetch\\?\\: 2\\|3\\|4\\|null, inherited\\?\\: class\\-string\\|null, declared\\?\\: class\\-string\\|null, cache\\?\\: array\\<mixed\\>\\|null, \\.\\.\\.\\}, non\\-empty\\-array given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$mappingArray of static method Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\:\\:fromMappingArrayAndName\\(\\) expects array\\{fieldName\\: string, sourceEntity\\: class\\-string, targetEntity\\: class\\-string, cascade\\?\\: list\\<''all''\\|''detach''\\|''persist''\\|''refresh''\\|''remove''\\>, fetch\\?\\: 2\\|3\\|4\\|null, inherited\\?\\: class\\-string\\|null, declared\\?\\: class\\-string\\|null, cache\\?\\: array\\<mixed\\>\\|null, \\.\\.\\.\\}, non\\-empty\\-array given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$mappingArray of static method Doctrine\\\\ORM\\\\Mapping\\\\ToOneInverseSideMapping\\:\\:fromMappingArrayAndName\\(\\) expects array\\{fieldName\\: string, sourceEntity\\: class\\-string, targetEntity\\: class\\-string, cascade\\?\\: list\\<''all''\\|''detach''\\|''persist''\\|''refresh''\\|''remove''\\>, fetch\\?\\: 2\\|3\\|4\\|null, inherited\\?\\: class\\-string\\|null, declared\\?\\: class\\-string\\|null, cache\\?\\: array\\<mixed\\>\\|null, \\.\\.\\.\\}, non\\-empty\\-array given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$mappingArray of static method Doctrine\\\\ORM\\\\Mapping\\\\ToOneOwningSideMapping\\:\\:fromMappingArrayAndName\\(\\) expects array\\{fieldName\\: string, sourceEntity\\: class\\-string, targetEntity\\: class\\-string, cascade\\?\\: list\\<''all''\\|''detach''\\|''persist''\\|''refresh''\\|''remove''\\>, fetch\\?\\: 2\\|3\\|4\\|null, inherited\\?\\: class\\-string\\|null, declared\\?\\: class\\-string\\|null, cache\\?\\: array\\<mixed\\>\\|null, \\.\\.\\.\\}, non\\-empty\\-array given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 2\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$class of method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<T of object\\>\\:\\:getAccessibleProperty\\(\\) expects class\\-string, string given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#3 \\$embeddedClass of class Doctrine\\\\ORM\\\\Mapping\\\\ReflectionEmbeddedProperty constructor expects class\\-string, string given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\:\\:\\$customRepositoryClassName with generic class Doctrine\\\\ORM\\\\EntityRepository does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\:\\:\\$table type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 2\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<T of object\\>\\:\\:\\$customRepositoryClassName \\(class\\-string\\<Doctrine\\\\ORM\\\\EntityRepository\\>\\|null\\) does not accept class\\-string\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<T of object\\>\\:\\:\\$discriminatorMap \\(array\\<int\\|string, class\\-string\\>\\) does not accept array\\<int\\|string, string\\>\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<T of object\\>\\:\\:\\$entityListeners \\(array\\<string, list\\<array\\{class\\: class\\-string, method\\: string\\}\\>\\>\\) does not accept non\\-empty\\-array\\<string, list\\<array\\{class\\: string, method\\: string\\}\\>\\>\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<T of object\\>\\:\\:\\$subClasses \\(list\\<class\\-string\\>\\) does not accept non\\-empty\\-list\\<string\\>\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Strict comparison using \\!\\=\\= between Doctrine\\\\ORM\\\\Mapping\\\\FieldMapping and false will always evaluate to true\\.$#'\n\t\t\tidentifier: notIdentical.alwaysTrue\n\t\t\tcount: 2\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Template type T is declared as covariant, but occurs in invariant position in property Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\:\\:\\$name\\.$#'\n\t\t\tidentifier: generics.variance\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Template type T is declared as covariant, but occurs in invariant position in property Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\:\\:\\$reflClass\\.$#'\n\t\t\tidentifier: generics.variance\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^Unable to resolve the template type C in call to method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<T of object\\>\\:\\:fullyQualifiedClassName\\(\\)$#'\n\t\t\tidentifier: argument.templateType\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadata.php\n\n\t\t-\n\t\t\tmessage: '#^If condition is always true\\.$#'\n\t\t\tidentifier: if.alwaysTrue\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:addDefaultDiscriminatorMap\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:addInheritedEmbeddedClasses\\(\\) has parameter \\$parentClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:addInheritedEmbeddedClasses\\(\\) has parameter \\$subClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:addInheritedFields\\(\\) has parameter \\$parentClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:addInheritedFields\\(\\) has parameter \\$subClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:addInheritedIndexes\\(\\) has parameter \\$parentClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:addInheritedIndexes\\(\\) has parameter \\$subClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:addInheritedRelations\\(\\) has parameter \\$parentClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:addInheritedRelations\\(\\) has parameter \\$subClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:addMappingInheritanceInformation\\(\\) has parameter \\$parentClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:addNestedEmbeddedClasses\\(\\) has parameter \\$parentClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:addNestedEmbeddedClasses\\(\\) has parameter \\$subClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:completeIdGeneratorMapping\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:doLoadMetadata\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:doLoadMetadata\\(\\) has parameter \\$parent with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:findAbstractEntityClassesNotListedInDiscriminatorMap\\(\\) has parameter \\$rootEntityClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:inheritIdGeneratorMapping\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:inheritIdGeneratorMapping\\(\\) has parameter \\$parent with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:initializeReflection\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:isEntity\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:newClassMetadataInstance\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:onNotFoundMetadata\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:validateRuntimeMetadata\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:validateRuntimeMetadata\\(\\) has parameter \\$parent with generic interface Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadataFactory\\:\\:wakeupReflection\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$generator of method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<object\\>\\:\\:setIdGenerator\\(\\) expects Doctrine\\\\ORM\\\\Id\\\\AbstractIdGenerator, object given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$rootEntityClass of static method Doctrine\\\\ORM\\\\Mapping\\\\MappingException\\:\\:missingInheritanceTypeDeclaration\\(\\) expects class\\-string, class\\-string\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ClassMetadataFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Mapping\\\\DefaultEntityListenerResolver\\:\\:\\$instances \\(array\\<class\\-string, object\\>\\) does not accept array\\<string, object\\>\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/DefaultEntityListenerResolver.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/DefaultQuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\DefaultQuoteStrategy\\:\\:getColumnAlias\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/DefaultQuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\DefaultQuoteStrategy\\:\\:getColumnName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/DefaultQuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\DefaultQuoteStrategy\\:\\:getIdentifierColumnNames\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/DefaultQuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\DefaultQuoteStrategy\\:\\:getJoinColumnName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/DefaultQuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\DefaultQuoteStrategy\\:\\:getJoinTableName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/DefaultQuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\DefaultQuoteStrategy\\:\\:getReferencedJoinColumnName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/DefaultQuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\DefaultQuoteStrategy\\:\\:getSequenceName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/DefaultQuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\DefaultQuoteStrategy\\:\\:getTableName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/DefaultQuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\Driver\\\\AttributeDriver\\:\\:isRepeatedPropertyDeclaration\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/AttributeDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$mapping of method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<T of object\\>\\:\\:mapEmbedded\\(\\) expects array\\{fieldName\\: string, class\\?\\: class\\-string, declaredField\\?\\: string, columnPrefix\\?\\: string\\|false\\|null, originalField\\?\\: string\\}, array\\{fieldName\\: string, cache\\?\\: array\\{usage\\: int, region\\: string\\|null\\}, class\\: string\\|null, columnPrefix\\: bool\\|string\\|null\\} given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/AttributeDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Unable to resolve the template type C in call to method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<T of object\\>\\:\\:fullyQualifiedClassName\\(\\)$#'\n\t\t\tidentifier: argument.templateType\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/AttributeDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Cannot call method getName\\(\\) on Doctrine\\\\DBAL\\\\Schema\\\\Column\\|false\\.$#'\n\t\t\tidentifier: method.nonObject\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/DatabaseDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Instanceof between Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<T of object\\> and Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata will always evaluate to true\\.$#'\n\t\t\tidentifier: instanceof.alwaysTrue\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/DatabaseDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\Driver\\\\DatabaseDriver\\:\\:__construct\\(\\) has parameter \\$sm with generic class Doctrine\\\\DBAL\\\\Schema\\\\AbstractSchemaManager but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/DatabaseDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\Driver\\\\DatabaseDriver\\:\\:buildFieldMappings\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/DatabaseDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\Driver\\\\DatabaseDriver\\:\\:buildIndexes\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/DatabaseDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\Driver\\\\DatabaseDriver\\:\\:buildToOneAssociationMappings\\(\\) has parameter \\$metadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/DatabaseDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\Driver\\\\DatabaseDriver\\:\\:getClassNameForTable\\(\\) should return class\\-string but returns string\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 2\n\t\t\tpath: src/Mapping/Driver/DatabaseDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$columnName of method Doctrine\\\\ORM\\\\Mapping\\\\Driver\\\\DatabaseDriver\\:\\:getFieldNameForColumn\\(\\) expects string, string\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 4\n\t\t\tpath: src/Mapping/Driver/DatabaseDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\Driver\\\\SimplifiedXmlDriver\\:\\:__construct\\(\\) has parameter \\$fileExtension with no type specified\\.$#'\n\t\t\tidentifier: missingType.parameter\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/SimplifiedXmlDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\Driver\\\\SimplifiedXmlDriver\\:\\:__construct\\(\\) has parameter \\$prefixes with no type specified\\.$#'\n\t\t\tidentifier: missingType.parameter\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/SimplifiedXmlDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\Driver\\\\XmlDriver\\:\\:cacheToArray\\(\\) should return array\\{usage\\: int\\|null, region\\?\\: string\\} but returns array\\{usage\\: ''''\\|''0''\\|int\\|null, region\\: string\\|null\\}\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/XmlDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\Driver\\\\XmlDriver\\:\\:columnToArray\\(\\) return type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/XmlDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$columnDef of method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<T of object\\>\\:\\:setDiscriminatorColumn\\(\\) expects array\\{name\\: string\\|null, fieldName\\?\\: string\\|null, type\\?\\: string\\|null, length\\?\\: int\\|null, columnDefinition\\?\\: string\\|null, enumType\\?\\: class\\-string\\<BackedEnum\\>\\|null, options\\?\\: array\\<string, mixed\\>\\|null\\}\\|Doctrine\\\\ORM\\\\Mapping\\\\DiscriminatorColumnMapping\\|null, array\\{name\\: string\\|null, type\\: string, length\\: int, columnDefinition\\: string\\|null, enumType\\: string\\|null, options\\?\\: array\\<int\\|string, array\\<int\\|string, mixed\\>\\|bool\\|string\\>\\} given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/XmlDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$data of function simplexml_load_string expects string, string\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/XmlDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$mapping of method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<T of object\\>\\:\\:mapEmbedded\\(\\) expects array\\{fieldName\\: string, class\\?\\: class\\-string, declaredField\\?\\: string, columnPrefix\\?\\: string\\|false\\|null, originalField\\?\\: string\\}, array\\{fieldName\\: string, class\\: string\\|null, columnPrefix\\: string\\|false\\|null\\} given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/XmlDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$repositoryClassName of method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<T of object\\>\\:\\:setCustomRepositoryClass\\(\\) expects class\\-string\\<Doctrine\\\\ORM\\\\EntityRepository\\>\\|null, string given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/XmlDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$repositoryClassName of method Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<T of object\\>\\:\\:setCustomRepositoryClass\\(\\) expects class\\-string\\<Doctrine\\\\ORM\\\\EntityRepository\\>\\|null, string\\|null given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/XmlDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\<T of object\\>\\:\\:\\$table \\(array\\{name\\: string, schema\\?\\: string, indexes\\?\\: array, uniqueConstraints\\?\\: array, options\\?\\: array\\<string, mixed\\>, quoted\\?\\: bool\\}\\) does not accept array\\{name\\: string, schema\\?\\: string, indexes\\?\\: array, uniqueConstraints\\?\\: array, options\\: array\\<int\\|string, array\\<int\\|string, mixed\\>\\|bool\\|string\\>, quoted\\?\\: bool\\}\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/Driver/XmlDriver.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Mapping\\\\FieldMapping\\:\\:\\$declared \\(class\\-string\\|null\\) does not accept string\\|null\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/FieldMapping.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Mapping\\\\FieldMapping\\:\\:\\$enumType \\(class\\-string\\<BackedEnum\\>\\|null\\) does not accept string\\|null\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/FieldMapping.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Mapping\\\\FieldMapping\\:\\:\\$inherited \\(class\\-string\\|null\\) does not accept string\\|null\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/FieldMapping.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Mapping\\\\FieldMapping\\:\\:\\$options type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/FieldMapping.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Mapping\\\\JoinTableMapping\\:\\:\\$options \\(array\\<string, mixed\\>\\) does not accept array\\<string, mixed\\>\\|bool\\|string\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/JoinTableMapping.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Mapping\\\\JoinTableMapping\\:\\:\\$quoted \\(bool\\|null\\) does not accept array\\<string, mixed\\>\\|bool\\|string\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/JoinTableMapping.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Mapping\\\\JoinTableMapping\\:\\:\\$schema \\(string\\|null\\) does not accept array\\<string, mixed\\>\\|bool\\|string\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/JoinTableMapping.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\MappedSuperclass\\:\\:__construct\\(\\) has parameter \\$repositoryClass with generic class Doctrine\\\\ORM\\\\EntityRepository but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/MappedSuperclass.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\QuoteStrategy\\:\\:getColumnAlias\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/QuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\QuoteStrategy\\:\\:getColumnName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/QuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\QuoteStrategy\\:\\:getIdentifierColumnNames\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/QuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\QuoteStrategy\\:\\:getJoinColumnName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/QuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\QuoteStrategy\\:\\:getJoinTableName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/QuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\QuoteStrategy\\:\\:getReferencedJoinColumnName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/QuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\QuoteStrategy\\:\\:getSequenceName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/QuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\QuoteStrategy\\:\\:getTableName\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/QuoteStrategy.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ReflectionEnumProperty\\:\\:getValue\\(\\) return type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ReflectionEnumProperty.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ToOneOwningSideMapping\\:\\:fromMappingArray\\(\\) should return static\\(Doctrine\\\\ORM\\\\Mapping\\\\ToOneOwningSideMapping\\) but returns Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ToOneOwningSideMapping.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ToOneOwningSideMapping\\:\\:fromMappingArrayAndName\\(\\) has parameter \\$table with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ToOneOwningSideMapping.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Mapping\\\\ToOneOwningSideMapping\\:\\:fromMappingArrayAndName\\(\\) should return static\\(Doctrine\\\\ORM\\\\Mapping\\\\ToOneOwningSideMapping\\) but returns Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Mapping/ToOneOwningSideMapping.php\n\n\t\t-\n\t\t\tmessage: '#^Call to function is_int\\(\\) with string will always evaluate to false\\.$#'\n\t\t\tidentifier: function.impossibleType\n\t\t\tcount: 1\n\t\t\tpath: src/NativeQuery.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\NativeQuery\\:\\:_doExecute\\(\\) never returns int so it can be removed from the return type\\.$#'\n\t\t\tidentifier: return.unusedType\n\t\t\tcount: 1\n\t\t\tpath: src/NativeQuery.php\n\n\t\t-\n\t\t\tmessage: '#^Result of && is always false\\.$#'\n\t\t\tidentifier: booleanAnd.alwaysFalse\n\t\t\tcount: 1\n\t\t\tpath: src/NativeQuery.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\ORMInvalidArgumentException\\:\\:invalidAssociation\\(\\) has parameter \\$targetClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/ORMInvalidArgumentException.php\n\n\t\t-\n\t\t\tmessage: '#^Call to method Doctrine\\\\ORM\\\\Mapping\\\\AssociationMapping\\:\\:isToMany\\(\\) will always evaluate to true\\.$#'\n\t\t\tidentifier: method.alreadyNarrowedType\n\t\t\tcount: 1\n\t\t\tpath: src/PersistentCollection.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\PersistentCollection\\:\\:__construct\\(\\) has parameter \\$typeClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/PersistentCollection.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\PersistentCollection\\:\\:get\\(\\) should return T\\|null but returns object\\|null\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/PersistentCollection.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\PersistentCollection\\:\\:getTypeClass\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/PersistentCollection.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\PersistentCollection\\:\\:matching\\(\\) should return Doctrine\\\\Common\\\\Collections\\\\Collection\\<TKey of \\(int\\|string\\), T\\> but returns Doctrine\\\\Common\\\\Collections\\\\ArrayCollection\\<\\(int\\|string\\), mixed\\>\\|Doctrine\\\\ORM\\\\LazyCriteriaCollection\\<\\(int\\|string\\), object\\>\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/PersistentCollection.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\PersistentCollection\\:\\:matching\\(\\) should return Doctrine\\\\Common\\\\Collections\\\\Collection\\<TKey of \\(int\\|string\\), T\\> but returns Doctrine\\\\Common\\\\Collections\\\\ReadableCollection\\<TKey of \\(int\\|string\\), T\\>&Doctrine\\\\Common\\\\Collections\\\\Selectable\\<TKey of \\(int\\|string\\), T\\>\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/PersistentCollection.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$key of method Doctrine\\\\ORM\\\\PersistentCollection\\<TKey of \\(int\\|string\\),T\\>\\:\\:set\\(\\) expects TKey of \\(int\\|string\\), int\\|string given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/PersistentCollection.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$callback of function array_walk expects callable\\(object, int\\)\\: mixed, array\\{Doctrine\\\\Common\\\\Collections\\\\Collection\\<TKey of \\(int\\|string\\), T\\>&Doctrine\\\\Common\\\\Collections\\\\Selectable\\<TKey of \\(int\\|string\\), T\\>, ''add''\\} given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/PersistentCollection.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\CollectionPersister\\:\\:contains\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/CollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\CollectionPersister\\:\\:containsKey\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/CollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\CollectionPersister\\:\\:count\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/CollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\CollectionPersister\\:\\:delete\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/CollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\CollectionPersister\\:\\:get\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/CollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\CollectionPersister\\:\\:loadCriteria\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/CollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\CollectionPersister\\:\\:slice\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/CollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\CollectionPersister\\:\\:update\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/CollectionPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinTable\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinTableColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$relationToSourceKeyColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$relationToTargetKeyColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinTable\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Call to function assert\\(\\) with true will always evaluate to true\\.$#'\n\t\t\tidentifier: function.alreadyNarrowedType\n\t\t\tcount: 2\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Call to method Doctrine\\\\ORM\\\\Mapping\\\\AssociationMapping\\:\\:isIndexed\\(\\) will always evaluate to true\\.$#'\n\t\t\tidentifier: method.alreadyNarrowedType\n\t\t\tcount: 2\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Instanceof between Doctrine\\\\ORM\\\\Mapping\\\\InverseSideMapping&Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyAssociationMapping and Doctrine\\\\ORM\\\\Mapping\\\\InverseSideMapping will always evaluate to true\\.$#'\n\t\t\tidentifier: instanceof.alwaysTrue\n\t\t\tcount: 2\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:collectJoinTableColumnParameters\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:contains\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:containsKey\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:count\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:delete\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:generateFilterConditionSQL\\(\\) has parameter \\$targetEntity with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:get\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:getDeleteRowSQL\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:getDeleteRowSQLParameters\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:getDeleteSQL\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:getDeleteSQLParameters\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:getInsertRowSQL\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:getInsertRowSQLParameters\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:getJoinTableRestrictions\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:getJoinTableRestrictionsWithKey\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:getMapping\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:getOrderingSql\\(\\) has parameter \\$targetClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:loadCriteria\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:slice\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\ManyToManyPersister\\:\\:update\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$association of method Doctrine\\\\ORM\\\\Mapping\\\\QuoteStrategy\\:\\:getJoinTableName\\(\\) expects Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping, Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/ManyToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\OneToManyPersister\\:\\:contains\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/OneToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\OneToManyPersister\\:\\:containsKey\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/OneToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\OneToManyPersister\\:\\:count\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/OneToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\OneToManyPersister\\:\\:delete\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/OneToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\OneToManyPersister\\:\\:deleteEntityCollection\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/OneToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\OneToManyPersister\\:\\:deleteJoinedEntityCollection\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/OneToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\OneToManyPersister\\:\\:get\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/OneToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\OneToManyPersister\\:\\:getMapping\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/OneToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\OneToManyPersister\\:\\:loadCriteria\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/OneToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\OneToManyPersister\\:\\:slice\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/OneToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Collection\\\\OneToManyPersister\\:\\:update\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Collection/OneToManyPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\AbstractEntityInheritancePersister\\:\\:getSelectColumnSQL\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/AbstractEntityInheritancePersister.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 5\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$mappedBy\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$targetToSourceKeyColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinTable\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 4\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$relationToTargetKeyColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$sourceToTargetKeyColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined method Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:indexBy\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:__construct\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:expandCriteriaParameters\\(\\) should return array\\{list\\<mixed\\>, list\\<Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:ASCII\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:BINARY\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:INTEGER\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:STRING\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:ASCII\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:BINARY\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:BOOLEAN\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:INTEGER\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:LARGE_OBJECT\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:NULL\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:STRING\\|string\\>\\} but returns array\\{array\\<mixed\\>, list\\<Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:ASCII\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:BINARY\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:INTEGER\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:STRING\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:ASCII\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:BINARY\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:BOOLEAN\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:INTEGER\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:LARGE_OBJECT\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:NULL\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:STRING\\|string\\>\\}\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:expandParameters\\(\\) should return array\\{list\\<mixed\\>, list\\<Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:ASCII\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:BINARY\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:INTEGER\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:STRING\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:ASCII\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:BINARY\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:BOOLEAN\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:INTEGER\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:LARGE_OBJECT\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:NULL\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:STRING\\|string\\>\\} but returns array\\{array\\<mixed\\>, list\\<Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:ASCII\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:BINARY\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:INTEGER\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:STRING\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:ASCII\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:BINARY\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:BOOLEAN\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:INTEGER\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:LARGE_OBJECT\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:NULL\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:STRING\\|string\\>\\}\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:expandToManyParameters\\(\\) return type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:extractIdentifierTypes\\(\\) has parameter \\$versionedClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:fetchVersionAndNotUpsertableValues\\(\\) has parameter \\$versionedClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:generateFilterConditionSQL\\(\\) has parameter \\$targetEntity with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:getClassIdentifiersTypes\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:getClassMetadata\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:getIndividualValue\\(\\) should return list\\<mixed\\> but returns array\\<mixed\\>\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:getSelectColumnAssociationSQL\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:getSelectColumnSQL\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:getTypes\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:getTypes\\(\\) should return list\\<Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:ASCII\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:BINARY\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:INTEGER\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:STRING\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:ASCII\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:BINARY\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:BOOLEAN\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:INTEGER\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:LARGE_OBJECT\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:NULL\\|Doctrine\\\\DBAL\\\\ParameterType\\:\\:STRING\\|string\\> but returns list\\<Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:ASCII\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:BINARY\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:INTEGER\\|Doctrine\\\\DBAL\\\\ArrayParameterType\\:\\:STRING\\|int\\>\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:loadCollectionFromStatement\\(\\) has parameter \\$coll with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:loadManyToManyCollection\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:loadOneToManyCollection\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$association of method Doctrine\\\\ORM\\\\Mapping\\\\QuoteStrategy\\:\\:getJoinTableName\\(\\) expects Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping, Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$lockMode of method Doctrine\\\\DBAL\\\\Platforms\\\\AbstractPlatform\\:\\:appendLockHint\\(\\) expects Doctrine\\\\DBAL\\\\LockMode, Doctrine\\\\DBAL\\\\LockMode\\:\\:NONE\\|Doctrine\\\\DBAL\\\\LockMode\\:\\:OPTIMISTIC\\|Doctrine\\\\DBAL\\\\LockMode\\:\\:PESSIMISTIC_READ\\|Doctrine\\\\DBAL\\\\LockMode\\:\\:PESSIMISTIC_WRITE\\|int given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 2\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#3 \\$hints of method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\AbstractHydrator\\:\\:hydrateAll\\(\\) expects array\\<string, string\\>, array\\<string, Doctrine\\\\ORM\\\\PersistentCollection\\|true\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#3 \\$hints of method Doctrine\\\\ORM\\\\Internal\\\\Hydration\\\\AbstractHydrator\\:\\:hydrateAll\\(\\) expects array\\<string, string\\>, array\\<string, true\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 4\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\CachedPersisterContext\\:\\:\\$sqlTableAliases \\(array\\<class\\-string, string\\>\\) does not accept array\\<string, string\\>\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Strict comparison using \\!\\=\\= between mixed and null will always evaluate to true\\.$#'\n\t\t\tidentifier: notIdentical.alwaysTrue\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Strict comparison using \\=\\=\\= between string and null will always evaluate to false\\.$#'\n\t\t\tidentifier: identical.alwaysFalse\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/BasicEntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\CachedPersisterContext\\:\\:__construct\\(\\) has parameter \\$class with generic interface Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/CachedPersisterContext.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\EntityPersister\\:\\:getClassMetadata\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/EntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\EntityPersister\\:\\:loadManyToManyCollection\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/EntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\EntityPersister\\:\\:loadOneToManyCollection\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/EntityPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Persisters/Entity/JoinedSubclassPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$targetToSourceKeyColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/JoinedSubclassPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\JoinedSubclassPersister\\:\\:fetchVersionAndNotUpsertableValues\\(\\) has parameter \\$versionedClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/JoinedSubclassPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\JoinedSubclassPersister\\:\\:getVersionedClassMetadata\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/JoinedSubclassPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$lockMode of method Doctrine\\\\DBAL\\\\Platforms\\\\AbstractPlatform\\:\\:appendLockHint\\(\\) expects Doctrine\\\\DBAL\\\\LockMode, Doctrine\\\\DBAL\\\\LockMode\\:\\:NONE\\|Doctrine\\\\DBAL\\\\LockMode\\:\\:OPTIMISTIC\\|Doctrine\\\\DBAL\\\\LockMode\\:\\:PESSIMISTIC_READ\\|Doctrine\\\\DBAL\\\\LockMode\\:\\:PESSIMISTIC_WRITE\\|int given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/JoinedSubclassPersister.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/SingleTablePersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\SingleTablePersister\\:\\:generateFilterConditionSQL\\(\\) has parameter \\$targetEntity with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/Entity/SingleTablePersister.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\SqlExpressionVisitor\\:\\:__construct\\(\\) has parameter \\$classMetadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/SqlExpressionVisitor.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Persisters\\\\SqlValueVisitor\\:\\:getParamsAndTypes\\(\\) return type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Persisters/SqlValueVisitor.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#3 \\$className of static method Doctrine\\\\ORM\\\\Proxy\\\\Autoloader\\:\\:resolveFile\\(\\) expects class\\-string, string given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/Autoloader.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#3 of closure expects class\\-string, string given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/Autoloader.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Proxy\\\\DefaultProxyClassNameResolver\\:\\:resolveClassName\\(\\) should return class\\-string\\<T of object\\> but returns class\\-string\\<Doctrine\\\\Persistence\\\\Proxy\\<T of object\\>\\>\\|class\\-string\\<T of object\\>\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/DefaultProxyClassNameResolver.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Proxy\\\\DefaultProxyClassNameResolver\\:\\:resolveClassName\\(\\) should return class\\-string\\<T of object\\> but returns string\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/DefaultProxyClassNameResolver.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata\\:\\:\\$isEmbeddedClass\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata\\:\\:\\$isMappedSuperclass\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined static method Doctrine\\\\ORM\\\\Proxy\\\\ProxyFactory\\:\\:createLazyGhost\\(\\)\\.$#'\n\t\t\tidentifier: staticMethod.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Call to function is_bool\\(\\) with bool will always evaluate to true\\.$#'\n\t\t\tidentifier: function.alreadyNarrowedType\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Comparison operation \"\\<\" between 0\\|1\\|2\\|3\\|4 and 0 is always false\\.$#'\n\t\t\tidentifier: smaller.alwaysFalse\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Comparison operation \"\\>\" between 0\\|1\\|2\\|3\\|4 and 4 is always false\\.$#'\n\t\t\tidentifier: greater.alwaysFalse\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Proxy\\\\ProxyFactory\\:\\:createLazyInitializer\\(\\) has Doctrine\\\\ORM\\\\EntityNotFoundException in PHPDoc @throws tag but it''s not thrown\\.$#'\n\t\t\tidentifier: throws.unusedType\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Proxy\\\\ProxyFactory\\:\\:createLazyInitializer\\(\\) has parameter \\$classMetadata with generic interface Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Proxy\\\\ProxyFactory\\:\\:createLazyInitializer\\(\\) return type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Proxy\\\\ProxyFactory\\:\\:createLazyInitializer\\(\\) return type with generic interface Doctrine\\\\ORM\\\\Proxy\\\\InternalProxy does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Proxy\\\\ProxyFactory\\:\\:generateProxyClass\\(\\) has parameter \\$class with generic interface Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Proxy\\\\ProxyFactory\\:\\:generateProxyClasses\\(\\) has parameter \\$classes with generic interface Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Proxy\\\\ProxyFactory\\:\\:generateSerializeImpl\\(\\) has parameter \\$class with generic interface Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Proxy\\\\ProxyFactory\\:\\:generateUseLazyGhostTrait\\(\\) has parameter \\$class with generic interface Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Proxy\\\\ProxyFactory\\:\\:getProxy\\(\\) return type with generic interface Doctrine\\\\ORM\\\\Proxy\\\\InternalProxy does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Proxy\\\\ProxyFactory\\:\\:loadProxyClass\\(\\) has parameter \\$class with generic interface Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Proxy\\\\ProxyFactory\\:\\:skipClass\\(\\) has parameter \\$metadata with generic interface Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$class of method Doctrine\\\\ORM\\\\Utility\\\\IdentifierFlattener\\:\\:flattenIdentifier\\(\\) expects Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata, Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$filename of function filemtime expects string, string\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#3 \\$length of function substr expects int\\|null, int\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#3 \\$newScope of static method Closure\\:\\:bind\\(\\) expects ''static''\\|class\\-string\\|object\\|null, string given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Result of \\|\\| is always false\\.$#'\n\t\t\tidentifier: booleanOr.alwaysFalse\n\t\t\tcount: 1\n\t\t\tpath: src/Proxy/ProxyFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Query\\:\\:processParameterMappings\\(\\) return type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: src/Query.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$parameters of method Doctrine\\\\ORM\\\\AbstractQuery\\:\\:toIterable\\(\\) expects array\\<mixed\\>\\|Doctrine\\\\Common\\\\Collections\\\\ArrayCollection\\<int, Doctrine\\\\ORM\\\\Query\\\\Parameter\\>, iterable\\<\\(int\\|string\\), mixed\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$sqlParams of method Doctrine\\\\ORM\\\\Query\\:\\:evictResultSetCache\\(\\) expects array\\<string, mixed\\>, list\\<mixed\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Query\\\\AST\\\\Functions\\\\BitAndFunction\\:\\:\\$firstArithmetic \\(Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\) does not accept Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\|string\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/Functions/BitAndFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Query\\\\AST\\\\Functions\\\\BitAndFunction\\:\\:\\$secondArithmetic \\(Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\) does not accept Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\|string\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/Functions/BitAndFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Query\\\\AST\\\\Functions\\\\BitOrFunction\\:\\:\\$firstArithmetic \\(Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\) does not accept Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\|string\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/Functions/BitOrFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Query\\\\AST\\\\Functions\\\\BitOrFunction\\:\\:\\$secondArithmetic \\(Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\) does not accept Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\|string\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/Functions/BitOrFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\:\\:\\$value\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/Functions/DateAddFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Query\\\\AST\\\\Functions\\\\DateAddFunction\\:\\:\\$firstDateExpression \\(Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\) does not accept Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\|string\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/Functions/DateAddFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Query\\\\AST\\\\Functions\\\\DateAddFunction\\:\\:\\$intervalExpression \\(Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\) does not accept Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\|string\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/Functions/DateAddFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Query\\\\AST\\\\Functions\\\\DateDiffFunction\\:\\:\\$date1 \\(Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\) does not accept Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\|string\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/Functions/DateDiffFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Query\\\\AST\\\\Functions\\\\DateDiffFunction\\:\\:\\$date2 \\(Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\) does not accept Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\|string\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/Functions/DateDiffFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\:\\:\\$value\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/Functions/DateSubFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Query/AST/Functions/IdentityFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$joinColumn of method Doctrine\\\\ORM\\\\Mapping\\\\QuoteStrategy\\:\\:getJoinColumnName\\(\\) expects Doctrine\\\\ORM\\\\Mapping\\\\JoinColumnMapping, Doctrine\\\\ORM\\\\Mapping\\\\JoinColumnMapping\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/Functions/IdentityFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$simpleArithmeticExpr of method Doctrine\\\\ORM\\\\Query\\\\SqlWalker\\:\\:walkSimpleArithmeticExpression\\(\\) expects Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\|string, Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\|string\\|true given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/Functions/LocateFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$mappedBy\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/Functions/SizeFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$targetToSourceKeyColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/Functions/SizeFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinTable\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/Functions/SizeFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$association of method Doctrine\\\\ORM\\\\Mapping\\\\QuoteStrategy\\:\\:getJoinTableName\\(\\) expects Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping, Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/Functions/SizeFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$mode of method Doctrine\\\\DBAL\\\\Platforms\\\\AbstractPlatform\\:\\:getTrimExpression\\(\\) expects Doctrine\\\\DBAL\\\\Platforms\\\\TrimMode, Doctrine\\\\DBAL\\\\Platforms\\\\TrimMode\\:\\:BOTH\\|Doctrine\\\\DBAL\\\\Platforms\\\\TrimMode\\:\\:LEADING\\|Doctrine\\\\DBAL\\\\Platforms\\\\TrimMode\\:\\:TRAILING\\|Doctrine\\\\DBAL\\\\Platforms\\\\TrimMode\\:\\:UNSPECIFIED\\|int given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 2\n\t\t\tpath: src/Query/AST/Functions/TrimFunction.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined method Doctrine\\\\ORM\\\\Query\\\\SqlWalker\\:\\:walkJoinPathExpression\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/JoinClassPathExpression.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined method Doctrine\\\\ORM\\\\Query\\\\SqlWalker\\:\\:walkJoinVariableDeclaration\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/JoinVariableDeclaration.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined method Doctrine\\\\ORM\\\\Query\\\\SqlWalker\\:\\:walkWhenClauseExpression\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/SimpleWhenClause.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined method Doctrine\\\\ORM\\\\Query\\\\SqlWalker\\:\\:walkWhenClauseExpression\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Query/AST/WhenClause.php\n\n\t\t-\n\t\t\tmessage: '#^Argument of an invalid type list\\<string\\>\\|string supplied for foreach, only iterables are supported\\.$#'\n\t\t\tidentifier: foreach.nonIterable\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Exec/MultiTableDeleteExecutor.php\n\n\t\t-\n\t\t\tmessage: '#^Cannot assign new offset to list\\<string\\>\\|string\\.$#'\n\t\t\tidentifier: offsetAssign.dimType\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Exec/MultiTableDeleteExecutor.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Query\\\\Exec\\\\MultiTableDeleteExecutor\\:\\:execute\\(\\) should return int but returns int\\|string\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Exec/MultiTableDeleteExecutor.php\n\n\t\t-\n\t\t\tmessage: '#^Argument of an invalid type list\\<string\\>\\|string supplied for foreach, only iterables are supported\\.$#'\n\t\t\tidentifier: foreach.nonIterable\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Exec/MultiTableUpdateExecutor.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Query\\\\Exec\\\\MultiTableUpdateExecutor\\:\\:execute\\(\\) should return int but returns int\\|string\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Exec/MultiTableUpdateExecutor.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#3 \\$types of method Doctrine\\\\DBAL\\\\Connection\\:\\:executeStatement\\(\\) expects array\\<int\\<0, max\\>\\|string, Doctrine\\\\DBAL\\\\ArrayParameterType\\|Doctrine\\\\DBAL\\\\ParameterType\\|Doctrine\\\\DBAL\\\\Types\\\\Type\\|string\\>, list\\<Doctrine\\\\DBAL\\\\ArrayParameterType\\|Doctrine\\\\DBAL\\\\ParameterType\\|Doctrine\\\\DBAL\\\\Types\\\\Type\\|int\\|string\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Exec/MultiTableUpdateExecutor.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$sql of method Doctrine\\\\DBAL\\\\Connection\\:\\:executeQuery\\(\\) expects string, list\\<string\\>\\|string given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Exec/SingleSelectExecutor.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Query\\\\Exec\\\\SingleTableDeleteUpdateExecutor\\:\\:execute\\(\\) should return int but returns int\\|string\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Exec/SingleTableDeleteUpdateExecutor.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$sql of method Doctrine\\\\DBAL\\\\Connection\\:\\:executeStatement\\(\\) expects string, list\\<string\\>\\|string given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Exec/SingleTableDeleteUpdateExecutor.php\n\n\t\t-\n\t\t\tmessage: '#^PHPDoc type array\\<string\\> of property Doctrine\\\\ORM\\\\Query\\\\Expr\\\\Andx\\:\\:\\$allowedClasses is not covariant with PHPDoc type list\\<class\\-string\\> of overridden property Doctrine\\\\ORM\\\\Query\\\\Expr\\\\Base\\:\\:\\$allowedClasses\\.$#'\n\t\t\tidentifier: property.phpDocType\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Expr/Andx.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Query\\\\Expr\\\\Func\\:\\:getArguments\\(\\) should return list\\<mixed\\> but returns array\\<mixed\\>\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Expr/Func.php\n\n\t\t-\n\t\t\tmessage: '#^PHPDoc type array\\<string\\> of property Doctrine\\\\ORM\\\\Query\\\\Expr\\\\Orx\\:\\:\\$allowedClasses is not covariant with PHPDoc type list\\<class\\-string\\> of overridden property Doctrine\\\\ORM\\\\Query\\\\Expr\\\\Base\\:\\:\\$allowedClasses\\.$#'\n\t\t\tidentifier: property.phpDocType\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Expr/Orx.php\n\n\t\t-\n\t\t\tmessage: '#^PHPDoc type array\\<string\\> of property Doctrine\\\\ORM\\\\Query\\\\Expr\\\\Select\\:\\:\\$allowedClasses is not covariant with PHPDoc type list\\<class\\-string\\> of overridden property Doctrine\\\\ORM\\\\Query\\\\Expr\\\\Base\\:\\:\\$allowedClasses\\.$#'\n\t\t\tidentifier: property.phpDocType\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Expr/Select.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Query\\\\Filter\\\\SQLFilter\\:\\:\\$parameters \\(array\\<string, array\\{type\\: string, value\\: mixed, is_list\\: bool\\}\\>\\) does not accept non\\-empty\\-array\\<string, array\\{value\\: mixed, type\\: Doctrine\\\\DBAL\\\\ArrayParameterType\\|Doctrine\\\\DBAL\\\\ParameterType\\|int\\|string, is_list\\: bool\\}\\>\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Filter/SQLFilter.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Query\\\\ParameterTypeInferer\\:\\:inferType\\(\\) never returns int so it can be removed from the return type\\.$#'\n\t\t\tidentifier: return.unusedType\n\t\t\tcount: 1\n\t\t\tpath: src/Query/ParameterTypeInferer.php\n\n\t\t-\n\t\t\tmessage: '#^@readonly property cannot have a default value\\.$#'\n\t\t\tidentifier: property.readOnlyByPhpDocDefaultValue\n\t\t\tcount: 3\n\t\t\tpath: src/Query/Parser.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined method object\\:\\:parse\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Parser.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Query\\\\Parser\\:\\:CustomFunctionsReturningStrings\\(\\) should return Doctrine\\\\ORM\\\\Query\\\\AST\\\\Functions\\\\FunctionNode but returns object\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Parser.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Query\\\\Parser\\:\\:getMetadataForDqlAlias\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Parser.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$AST of method Doctrine\\\\ORM\\\\Query\\\\Parser\\:\\:processDeferredNewObjectExpressions\\(\\) expects Doctrine\\\\ORM\\\\Query\\\\AST\\\\SelectStatement, Doctrine\\\\ORM\\\\Query\\\\AST\\\\DeleteStatement\\|Doctrine\\\\ORM\\\\Query\\\\AST\\\\SelectStatement\\|Doctrine\\\\ORM\\\\Query\\\\AST\\\\UpdateStatement given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Parser.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$expected of method Doctrine\\\\ORM\\\\Query\\\\Parser\\:\\:syntaxError\\(\\) expects string, int\\|string given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 3\n\t\t\tpath: src/Query/Parser.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$expression of class Doctrine\\\\ORM\\\\Query\\\\AST\\\\ParenthesisExpression constructor expects Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node, Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\|string given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Parser.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$stringPattern of class Doctrine\\\\ORM\\\\Query\\\\AST\\\\LikeExpression constructor expects Doctrine\\\\ORM\\\\Query\\\\AST\\\\Functions\\\\FunctionNode\\|Doctrine\\\\ORM\\\\Query\\\\AST\\\\InputParameter\\|Doctrine\\\\ORM\\\\Query\\\\AST\\\\Literal\\|Doctrine\\\\ORM\\\\Query\\\\AST\\\\PathExpression, Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Parser.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#3 \\$length of function substr expects int\\|null, int\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Parser.php\n\n\t\t-\n\t\t\tmessage: '#^Strict comparison using \\=\\=\\= between 102 and 102 will always evaluate to true\\.$#'\n\t\t\tidentifier: identical.alwaysTrue\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Parser.php\n\n\t\t-\n\t\t\tmessage: '#^Unreachable statement \\- code above always terminates\\.$#'\n\t\t\tidentifier: deadCode.unreachable\n\t\t\tcount: 2\n\t\t\tpath: src/Query/Parser.php\n\n\t\t-\n\t\t\tmessage: '#^Using nullsafe property access \"\\?\\-\\>position\" on left side of \\?\\? is unnecessary\\. Use \\-\\> instead\\.$#'\n\t\t\tidentifier: nullsafe.neverNull\n\t\t\tcount: 1\n\t\t\tpath: src/Query/Parser.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Query/ResultSetMappingBuilder.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Query\\\\ResultSetMappingBuilder\\:\\:isInheritanceSupported\\(\\) has parameter \\$classMetadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Query/ResultSetMappingBuilder.php\n\n\t\t-\n\t\t\tmessage: '#^Instanceof between Doctrine\\\\ORM\\\\Query\\\\AST\\\\DeleteStatement and Doctrine\\\\ORM\\\\Query\\\\AST\\\\DeleteStatement will always evaluate to true\\.$#'\n\t\t\tidentifier: instanceof.alwaysTrue\n\t\t\tcount: 1\n\t\t\tpath: src/Query/SqlOutputWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$mappedBy\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$sourceToTargetKeyColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$targetToSourceKeyColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 3\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinTable\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 6\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Cannot assign new offset to list\\<string\\>\\|string\\.$#'\n\t\t\tidentifier: offsetAssign.dimType\n\t\t\tcount: 2\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Match arm comparison between 3 and 3 is always true\\.$#'\n\t\t\tidentifier: match.alwaysTrue\n\t\t\tcount: 1\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Query\\\\SqlWalker\\:\\:generateClassTableInheritanceJoins\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Query\\\\SqlWalker\\:\\:generateFilterConditionSQL\\(\\) has parameter \\$targetEntity with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Query\\\\SqlWalker\\:\\:getChildDiscriminatorsFromClassMetadata\\(\\) has parameter \\$rootClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Query\\\\SqlWalker\\:\\:getMetadataForDqlAlias\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$association of method Doctrine\\\\ORM\\\\Mapping\\\\QuoteStrategy\\:\\:getJoinTableName\\(\\) expects Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping, Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 2\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$condTerm of method Doctrine\\\\ORM\\\\Query\\\\SqlWalker\\:\\:walkConditionalTerm\\(\\) expects Doctrine\\\\ORM\\\\Query\\\\AST\\\\ConditionalFactor\\|Doctrine\\\\ORM\\\\Query\\\\AST\\\\ConditionalPrimary\\|Doctrine\\\\ORM\\\\Query\\\\AST\\\\ConditionalTerm, Doctrine\\\\ORM\\\\Query\\\\AST\\\\Phase2OptimizableConditional given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$identVariable of method Doctrine\\\\ORM\\\\Query\\\\SqlWalker\\:\\:walkEntityIdentificationVariable\\(\\) expects string, Doctrine\\\\ORM\\\\Query\\\\AST\\\\Node\\|string given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$fieldName of method Doctrine\\\\ORM\\\\Query\\\\ResultSetMapping\\:\\:addIndexBy\\(\\) expects string, string\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Query\\\\SqlWalker\\:\\:\\$selectedClasses \\(array\\<string, array\\{class\\: Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata, dqlAlias\\: string, resultAlias\\: string\\|null\\}\\>\\) does not accept non\\-empty\\-array\\<int\\|string, array\\{class\\: Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata, dqlAlias\\: mixed, resultAlias\\: string\\|null\\}\\>\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Query\\\\SqlWalker\\:\\:\\$selectedClasses with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Query/SqlWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Query\\\\TreeWalkerAdapter\\:\\:getMetadataForDqlAlias\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Query/TreeWalkerAdapter.php\n\n\t\t-\n\t\t\tmessage: '#^Argument of an invalid type array\\<int\\|string, array\\<int\\|string, object\\>\\|object\\|string\\>\\|object\\|string\\|false supplied for foreach, only iterables are supported\\.$#'\n\t\t\tidentifier: foreach.nonIterable\n\t\t\tcount: 1\n\t\t\tpath: src/QueryBuilder.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\QueryBuilder\\:\\:getParameter\\(\\) should return Doctrine\\\\ORM\\\\Query\\\\Parameter\\|null but returns Doctrine\\\\ORM\\\\Query\\\\Parameter\\|false\\|null\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/QueryBuilder.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$dqlPart of method Doctrine\\\\ORM\\\\QueryBuilder\\:\\:add\\(\\) expects array\\<''join''\\|int\\<0, max\\>, array\\<int\\|string, object\\>\\|string\\>\\|object\\|string, array\\{Doctrine\\\\ORM\\\\Query\\\\Expr\\\\Andx\\|Doctrine\\\\ORM\\\\Query\\\\Expr\\\\Orx\\}\\|Doctrine\\\\ORM\\\\Query\\\\Expr\\\\Andx given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/QueryBuilder.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$dqlPart of method Doctrine\\\\ORM\\\\QueryBuilder\\:\\:add\\(\\) expects array\\<''join''\\|int\\<0, max\\>, array\\<int\\|string, object\\>\\|string\\>\\|object\\|string, array\\{Doctrine\\\\ORM\\\\Query\\\\Expr\\\\Composite\\}\\|Doctrine\\\\ORM\\\\Query\\\\Expr\\\\Andx given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/QueryBuilder.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$dqlPart of method Doctrine\\\\ORM\\\\QueryBuilder\\:\\:add\\(\\) expects array\\<''join''\\|int\\<0, max\\>, array\\<int\\|string, object\\>\\|string\\>\\|object\\|string, non\\-empty\\-array\\<string, Doctrine\\\\ORM\\\\Query\\\\Expr\\\\Join\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 2\n\t\t\tpath: src/QueryBuilder.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#3 \\$length of function substr expects int\\|null, int\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 2\n\t\t\tpath: src/QueryBuilder.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Repository\\\\DefaultRepositoryFactory\\:\\:createRepository\\(\\) return type with generic class Doctrine\\\\ORM\\\\EntityRepository does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Repository/DefaultRepositoryFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Repository\\\\DefaultRepositoryFactory\\:\\:\\$repositoryList with generic class Doctrine\\\\ORM\\\\EntityRepository does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Repository/DefaultRepositoryFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata\\:\\:\\$name\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Console/Command/GenerateProxiesCommand.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$filename of function file_exists expects string, string\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Console/Command/GenerateProxiesCommand.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$filename of function is_writable expects string, string\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Console/Command/GenerateProxiesCommand.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$proxyDir of method Doctrine\\\\ORM\\\\Proxy\\\\ProxyFactory\\:\\:generateProxyClasses\\(\\) expects string\\|null, string\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Console/Command/GenerateProxiesCommand.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\Console\\\\Command\\\\MappingDescribeCommand\\:\\:getClassMetadata\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Console/Command/MappingDescribeCommand.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$entityListeners of method Doctrine\\\\ORM\\\\Tools\\\\Console\\\\Command\\\\MappingDescribeCommand\\:\\:formatEntityListeners\\(\\) expects list\\<object\\>, array\\<string, list\\<array\\{class\\: class\\-string, method\\: string\\}\\>\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Console/Command/MappingDescribeCommand.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$callback of function array_filter expects \\(callable\\(class\\-string\\)\\: bool\\)\\|null, Closure\\(mixed\\)\\: \\(0\\|1\\|false\\) given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Console/Command/MappingDescribeCommand.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$classes of method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:createSchema\\(\\) expects list\\<Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\>, array\\<mixed\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Console/Command/SchemaTool/CreateCommand.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$classes of method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:getCreateSchemaSql\\(\\) expects list\\<Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\>, array\\<mixed\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Console/Command/SchemaTool/CreateCommand.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$classes of method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:dropSchema\\(\\) expects list\\<Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\>, array\\<mixed\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Console/Command/SchemaTool/DropCommand.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$classes of method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:getDropSchemaSQL\\(\\) expects list\\<Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\>, array\\<mixed\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 2\n\t\t\tpath: src/Tools/Console/Command/SchemaTool/DropCommand.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$classes of method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:getUpdateSchemaSql\\(\\) expects list\\<Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\>, array\\<mixed\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Console/Command/SchemaTool/UpdateCommand.php\n\n\t\t-\n\t\t\tmessage: '#^Class Doctrine\\\\ORM\\\\Tools\\\\Console\\\\MetadataFilter extends generic class FilterIterator but does not specify its types\\: TKey, TValue, TIterator$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Console/MetadataFilter.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\Console\\\\MetadataFilter\\:\\:__construct\\(\\) has parameter \\$metadata with generic class ArrayIterator but does not specify its types\\: TKey, TValue$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Console/MetadataFilter.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\Console\\\\MetadataFilter\\:\\:filter\\(\\) has parameter \\$metadatas with generic interface Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Console/MetadataFilter.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\Console\\\\MetadataFilter\\:\\:filter\\(\\) return type with generic interface Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Console/MetadataFilter.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\Console\\\\MetadataFilter\\:\\:getInnerIterator\\(\\) return type with generic interface Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Console/MetadataFilter.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$string of function html_entity_decode expects string, string\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Debug.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$stream of function fclose expects resource, resource\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/DebugUnitOfWorkListener.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$stream of function fwrite expects resource, resource\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 14\n\t\t\tpath: src/Tools/DebugUnitOfWorkListener.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\Event\\\\GenerateSchemaTableEventArgs\\:\\:__construct\\(\\) has parameter \\$classMetadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Event/GenerateSchemaTableEventArgs.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\Event\\\\GenerateSchemaTableEventArgs\\:\\:getClassMetadata\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Event/GenerateSchemaTableEventArgs.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Pagination/CountOutputWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Pagination/LimitSubqueryOutputWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\Pagination\\\\LimitSubqueryOutputWalker\\:\\:walkSelectStatement\\(\\) should return string but returns list\\<string\\>\\|string\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Pagination/LimitSubqueryOutputWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#3 \\$length of function substr expects int\\|null, int\\|false given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Pagination/LimitSubqueryOutputWalker.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\Pagination\\\\Paginator\\:\\:count\\(\\) should return int\\<0, max\\> but returns int\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Pagination/Paginator.php\n\n\t\t-\n\t\t\tmessage: '#^PHPDoc tag @var for variable \\$parameters contains generic interface Doctrine\\\\Common\\\\Collections\\\\Collection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Pagination/Paginator.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$parameters of method Doctrine\\\\ORM\\\\AbstractQuery\\:\\:setParameters\\(\\) expects array\\<mixed\\>\\|Doctrine\\\\Common\\\\Collections\\\\ArrayCollection\\<int, Doctrine\\\\ORM\\\\Query\\\\Parameter\\>, Doctrine\\\\Common\\\\Collections\\\\Collection&iterable\\<Doctrine\\\\ORM\\\\Query\\\\Parameter\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/Pagination/Paginator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\ResolveTargetEntityListener\\:\\:remapAssociation\\(\\) has parameter \\$classMetadata with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/ResolveTargetEntityListener.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$className of method Doctrine\\\\Persistence\\\\Mapping\\\\AbstractClassMetadataFactory\\<Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\>\\:\\:setMetadataFor\\(\\) expects class\\-string, \\(int\\|string\\) given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/ResolveTargetEntityListener.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 3\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Call to function is_numeric\\(\\) with int\\<0, max\\> will always evaluate to true\\.$#'\n\t\t\tidentifier: function.alreadyNarrowedType\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:addDiscriminatorColumnDefinition\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:createSchema\\(\\) has parameter \\$classes with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:dropSchema\\(\\) has parameter \\$classes with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:gatherColumn\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:gatherColumns\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:gatherRelationJoinColumns\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:gatherRelationsSql\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:getCreateSchemaSql\\(\\) has parameter \\$classes with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:getDefiningClass\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:getDefiningClass\\(\\) return type with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:getDropSchemaSQL\\(\\) has parameter \\$classes with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:getIndexColumns\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:getSchemaFromMetadata\\(\\) has parameter \\$classes with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:getUpdateSchemaSql\\(\\) has parameter \\$classes with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:processingNotRequired\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Negated boolean expression is always false\\.$#'\n\t\t\tidentifier: booleanNot.alwaysFalse\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#1 \\$classes of method Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:getUpdateSchemaSql\\(\\) expects list\\<Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata\\>, array\\<mixed\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\Tools\\\\SchemaTool\\:\\:\\$schemaManager with generic class Doctrine\\\\DBAL\\\\Schema\\\\AbstractSchemaManager does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaTool.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$inversedBy\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Tools/SchemaValidator.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaValidator.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinTable\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 6\n\t\t\tpath: src/Tools/SchemaValidator.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$mappedBy\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 9\n\t\t\tpath: src/Tools/SchemaValidator.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$relationToSourceKeyColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaValidator.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$relationToTargetKeyColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaValidator.php\n\n\t\t-\n\t\t\tmessage: '#^Call to an undefined method Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:orderBy\\(\\)\\.$#'\n\t\t\tidentifier: method.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaValidator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\SchemaValidator\\:\\:validateClass\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaValidator.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Tools\\\\SchemaValidator\\:\\:validatePropertiesTypes\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Tools/SchemaValidator.php\n\n\t\t-\n\t\t\tmessage: '#^ Parameter \\#3 \\$changeSet of class Doctrine\\\\ORM\\\\Event\\\\PreUpdateEventArgs constructor is passed by reference, so it expects variables only$#'\n\t\t\tidentifier: argument.byRef\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$inversedBy\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 3\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$mappedBy\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$targetToSourceKeyColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\UnitOfWork\\:\\:convertSingleFieldIdentifierToPHPValue\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\UnitOfWork\\:\\:eagerLoadCollections\\(\\) has parameter \\$collections with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\UnitOfWork\\:\\:getEntityChangeSet\\(\\) return type with generic class Doctrine\\\\ORM\\\\PersistentCollection does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\UnitOfWork\\:\\:hasMissingIdsWhichAreForeignKeys\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\UnitOfWork\\:\\:isCollectionScheduledForDeletion\\(\\) has parameter \\$coll with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\UnitOfWork\\:\\:loadCollection\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\UnitOfWork\\:\\:normalizeIdentifier\\(\\) has parameter \\$targetClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\UnitOfWork\\:\\:scheduleCollectionDeletion\\(\\) has parameter \\$coll with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\UnitOfWork\\:\\:scheduleCollectionForBatchLoading\\(\\) has parameter \\$collection with generic class Doctrine\\\\ORM\\\\PersistentCollection but does not specify its types\\: TKey, T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\UnitOfWork\\:\\:scheduleCollectionForBatchLoading\\(\\) has parameter \\$sourceClass with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^PHPDoc tag @phpstan\\-assert\\-if\\-true for \\$obj contains generic interface Doctrine\\\\ORM\\\\Proxy\\\\InternalProxy but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$assoc of method Doctrine\\\\ORM\\\\PersistentCollection\\<\\(int\\|string\\),mixed\\>\\:\\:setOwner\\(\\) expects Doctrine\\\\ORM\\\\Mapping\\\\AssociationMapping&Doctrine\\\\ORM\\\\Mapping\\\\ToManyAssociationMapping, Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 4\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$assoc of method Doctrine\\\\ORM\\\\PersistentCollection\\<\\*NEVER\\*,\\*NEVER\\*\\>\\:\\:setOwner\\(\\) expects Doctrine\\\\ORM\\\\Mapping\\\\AssociationMapping&Doctrine\\\\ORM\\\\Mapping\\\\ToManyAssociationMapping, Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#2 \\$length of function array_chunk expects int\\<1, max\\>, int given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 2\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#3 \\$collection of class Doctrine\\\\ORM\\\\PersistentCollection constructor expects Doctrine\\\\Common\\\\Collections\\\\Collection\\<\\(int\\|string\\), mixed\\>&Doctrine\\\\Common\\\\Collections\\\\Selectable\\<\\(int\\|string\\), mixed\\>, Doctrine\\\\Common\\\\Collections\\\\Collection given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter \\#5 \\$invoke of method Doctrine\\\\ORM\\\\Event\\\\ListenersInvoker\\:\\:invoke\\(\\) expects int\\<0, 7\\>, int\\<min, \\-1\\>\\|int\\<1, max\\> given\\.$#'\n\t\t\tidentifier: argument.type\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Parameter &\\$visited by\\-ref type of method Doctrine\\\\ORM\\\\UnitOfWork\\:\\:cascadeDetach\\(\\) expects array\\<int, object\\>, array\\<mixed\\> given\\.$#'\n\t\t\tidentifier: parameterByRef.type\n\t\t\tcount: 2\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Property Doctrine\\\\ORM\\\\UnitOfWork\\:\\:\\$entityChangeSets \\(array\\<int, array\\<string, array\\{mixed, mixed\\}\\>\\>\\) does not accept non\\-empty\\-array\\<int, array\\<string, array\\{mixed, mixed\\}\\|Doctrine\\\\ORM\\\\PersistentCollection\\>\\>\\.$#'\n\t\t\tidentifier: assign.propertyType\n\t\t\tcount: 1\n\t\t\tpath: src/UnitOfWork.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata\\:\\:\\$name\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Utility/HierarchyDiscriminatorResolver.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata\\:\\:\\$subClasses\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Utility/HierarchyDiscriminatorResolver.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Utility\\\\HierarchyDiscriminatorResolver\\:\\:resolveDiscriminatorsForClass\\(\\) has parameter \\$rootClassMetadata with generic interface Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Utility/HierarchyDiscriminatorResolver.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Utility/IdentifierFlattener.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Utility\\\\IdentifierFlattener\\:\\:__construct\\(\\) has parameter \\$metadataFactory with generic interface Doctrine\\\\Persistence\\\\Mapping\\\\ClassMetadataFactory but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Utility/IdentifierFlattener.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Utility\\\\IdentifierFlattener\\:\\:flattenIdentifier\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Utility/IdentifierFlattener.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\JoinTableMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Utility/PersisterHelper.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinColumns\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Utility/PersisterHelper.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$joinTable\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 2\n\t\t\tpath: src/Utility/PersisterHelper.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToManyOwningSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\ManyToOneAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToManyAssociationMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneInverseSideMapping\\|Doctrine\\\\ORM\\\\Mapping\\\\OneToOneOwningSideMapping\\:\\:\\$mappedBy\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: src/Utility/PersisterHelper.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Utility\\\\PersisterHelper\\:\\:getTypeOfColumn\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Utility/PersisterHelper.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\ORM\\\\Utility\\\\PersisterHelper\\:\\:getTypeOfField\\(\\) has parameter \\$class with generic class Doctrine\\\\ORM\\\\Mapping\\\\ClassMetadata but does not specify its types\\: T$#'\n\t\t\tidentifier: missingType.generics\n\t\t\tcount: 1\n\t\t\tpath: src/Utility/PersisterHelper.php\n"
        },
        {
          "name": "phpstan-dbal3.neon",
          "type": "blob",
          "size": 2.9248046875,
          "content": "includes:\n    - phpstan-baseline.neon\n    - phpstan-params.neon\n\nparameters:\n    reportUnmatchedIgnoredErrors: false # Some errors in the baseline only apply to DBAL 4\n    ignoreErrors:\n        # Symfony cache supports passing a key prefix to the clear method.\n        - '/^Method Psr\\\\Cache\\\\CacheItemPoolInterface\\:\\:clear\\(\\) invoked with 1 parameter, 0 required\\.$/'\n\n        # We can be certain that those values are not matched.\n        -\n            message: '~^Match expression does not handle remaining values:~'\n            path: src/Persisters/Entity/BasicEntityPersister.php\n\n        # DBAL 4 compatibility\n        -\n            message: '~^Method Doctrine\\\\ORM\\\\Query\\\\AST\\\\Functions\\\\TrimFunction::getTrimMode\\(\\) never returns .* so it can be removed from the return type\\.$~'\n            path: src/Query/AST/Functions/TrimFunction.php\n\n        -\n            message: '~.*getTrimExpression.*expects int.*~'\n            path: src/Query/AST/Functions/TrimFunction.php\n\n        - '~^Class Doctrine\\\\DBAL\\\\Platforms\\\\SQLitePlatform not found\\.$~'\n\n        # To be removed in 4.0\n        -\n            message: '#Negated boolean expression is always false\\.#'\n            paths:\n                - src/Mapping/Driver/AttributeDriver.php\n\n        -\n            message: '~^Call to deprecated method getEventManager\\(\\) of class Doctrine\\\\DBAL\\\\Connection\\.$~'\n            path: src/EntityManager.php\n        -\n            message: '~deprecated class Doctrine\\\\DBAL\\\\Tools\\\\Console\\\\Command\\\\ReservedWordsCommand\\:~'\n            path: src/Tools/Console/ConsoleRunner.php\n\n        # Compatibility with Persistence 3\n        -\n            message: '#Expression on left side of \\?\\? is not nullable.#'\n            path: src/Mapping/Driver/AttributeDriver.php\n\n        -\n            message: '~^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:getArrayBindingType\\(\\) never returns .* so it can be removed from the return type\\.$~'\n            path: src/Persisters/Entity/BasicEntityPersister.php\n\n        -\n            message: '~getTypes.*should return~'\n            path: src/Persisters/Entity/BasicEntityPersister.php\n\n        -\n            message: '~.*appendLockHint.*expects.*LockMode given~'\n            paths:\n                - src/Persisters/Entity/BasicEntityPersister.php\n                - src/Persisters/Entity/JoinedSubclassPersister.php\n\n        -\n            message: '~.*executeStatement.*expects~'\n            path: src/Query/Exec/MultiTableUpdateExecutor.php\n\n        -\n            message: '~method_exists.*getEventManager~'\n            path: src/EntityManager.php\n\n        -\n            message: '~method_exists.*getIdentitySequence~'\n            path: src/Mapping/ClassMetadataFactory.php\n\n        -\n            message: '~expand(Criteria)?Parameters.*should return array~'\n            path: src/Persisters/Entity/BasicEntityPersister.php\n\n        -\n            message: '~inferType.*never returns~'\n            path: src/Query/ParameterTypeInferer.php\n"
        },
        {
          "name": "phpstan-params.neon",
          "type": "blob",
          "size": 0.2578125,
          "content": "parameters:\n    level: 7\n    paths:\n        - src\n        - tests/StaticAnalysis\n    excludePaths:\n        - src/Mapping/Driver/AttributeReader.php\n    earlyTerminatingMethodCalls:\n        Doctrine\\ORM\\Query\\Parser:\n            - syntaxError\n    phpVersion: 80400\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 2.353515625,
          "content": "includes:\n    - phpstan-baseline.neon\n    - phpstan-params.neon\n\nparameters:\n    ignoreErrors:\n        # Symfony cache supports passing a key prefix to the clear method.\n        - '/^Method Psr\\\\Cache\\\\CacheItemPoolInterface\\:\\:clear\\(\\) invoked with 1 parameter, 0 required\\.$/'\n\n        # We can be certain that those values are not matched.\n        -\n            message: '~^Match expression does not handle remaining values:~'\n            path: src/Persisters/Entity/BasicEntityPersister.php\n\n        # DBAL 4 compatibility\n        -\n            message: '~^Method Doctrine\\\\ORM\\\\Query\\\\AST\\\\Functions\\\\TrimFunction::getTrimMode\\(\\) never returns .* so it can be removed from the return type\\.$~'\n            path: src/Query/AST/Functions/TrimFunction.php\n        -\n            message: '~^Method Doctrine\\\\ORM\\\\Persisters\\\\Entity\\\\BasicEntityPersister\\:\\:getArrayBindingType\\(\\) never returns .* so it can be removed from the return type\\.$~'\n            path: src/Persisters/Entity/BasicEntityPersister.php\n\n        # Compatibility with DBAL 3\n        # See https://github.com/doctrine/dbal/pull/3480\n        -\n            message: '~^Result of method Doctrine\\\\DBAL\\\\Connection::commit\\(\\) \\(void\\) is used\\.$~'\n            path: src/UnitOfWork.php\n        -\n            message: '~^Strict comparison using === between null and false will always evaluate to false\\.$~'\n            path: src/UnitOfWork.php\n        -\n            message: '~^Variable \\$e on left side of \\?\\? always exists and is not nullable\\.$~'\n            path: src/UnitOfWork.php\n\n        -\n            message: '~^Parameter #1 \\$command of method Symfony\\\\Component\\\\Console\\\\Application::add\\(\\) expects Symfony\\\\Component\\\\Console\\\\Command\\\\Command, Doctrine\\\\DBAL\\\\Tools\\\\Console\\\\Command\\\\ReservedWordsCommand given\\.$~'\n            path: src/Tools/Console/ConsoleRunner.php\n\n        -\n            message: '~Strict comparison using \\=\\=\\= between callable\\(\\)\\: mixed and null will always evaluate to false\\.~'\n            path: src/Tools/SchemaTool.php\n\n        # To be removed in 4.0\n        -\n            message: '#Negated boolean expression is always false\\.#'\n            paths:\n                - src/Mapping/Driver/AttributeDriver.php\n\n        # Compatibility with Persistence 3\n        -\n            message: '#Expression on left side of \\?\\? is not nullable.#'\n            path: src/Mapping/Driver/AttributeDriver.php\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 3.1162109375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--\n    Use this configuration file as a template to run the tests against any dbms.\n    Procedure:\n        1) Save a copy of this file with a name of your choosing. It doesn't matter\n           where you place it as long as you know where it is.\n           i.e. \"mysqlconf.xml\" (It needs the ending .xml).\n        2) Edit the file and fill in your settings (database name, type, username, etc.)\n           Just change the \"value\"s, not the names of the var elements.\n        3) To run the tests against the database type the following from within the\n           tests/ folder: phpunit -c <filename> ...\n           Example: phpunit -c mysqlconf.xml AllTests\n-->\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n         colors=\"true\"\n         displayDetailsOnTestsThatTriggerNotices=\"true\"\n         displayDetailsOnTestsThatTriggerWarnings=\"true\"\n         failOnNotice=\"true\"\n         failOnWarning=\"true\"\n         failOnRisky=\"true\"\n         bootstrap=\"./tests/Tests/TestInit.php\"\n         cacheDirectory=\".phpunit.cache\"\n>\n    <testsuites>\n        <testsuite name=\"Doctrine ORM Test Suite\">\n            <directory>./tests/Tests/ORM</directory>\n        </testsuite>\n    </testsuites>\n\n    <groups>\n        <exclude>\n            <group>performance</group>\n            <group>locking_functional</group>\n        </exclude>\n    </groups>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\"/>\n        <!-- \"Real\" test database -->\n        <var name=\"db_driver\" value=\"pdo_sqlite\"/>\n        <var name=\"db_memory\" value=\"true\"/>\n        <!-- to use another database driver / credentials, provide them like so:\n          <var name=\"db_driver\" value=\"pdo_mysql\"/>\n          <var name=\"db_host\" value=\"localhost\" />\n          <var name=\"db_user\" value=\"root\" />\n          <var name=\"db_password\" value=\"\" />\n          <var name=\"db_dbname\" value=\"doctrine_tests\" />\n          <var name=\"db_port\" value=\"3306\"/>-->\n        <!--<var name=\"db_event_subscribers\" value=\"Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit\">-->\n        <!--\n         At the start of each test run, we will drop and recreate the test database.\n\n         By default we assume that the `db_` config above has unrestricted access to the provided database\n         platform.\n\n         If you prefer, you can provide a restricted user above and a separate `privileged_db` config\n         block to provide details of a privileged connection to use for the setup / teardown actions.\n\n         Note that these configurations are not merged - if you specify a `privileged_db_driver` then\n         you must also specify all the other options that your driver requires.\n\n        <var name=\"privileged_db_driver\" value=\"pdo_mysql\"/>\n        <var name=\"privileged_db_host\" value=\"localhost\" />\n        <var name=\"privileged_db_user\" value=\"root\" />\n        <var name=\"privileged_db_password\" value=\"\" />\n        <var name=\"privileged_db_dbname\" value=\"doctrine_tests_tmp\" />\n        <var name=\"privileged_db_port\" value=\"3306\"/>\n        -->\n        <env name=\"COLUMNS\" value=\"120\"/>\n    </php>\n</phpunit>\n"
        },
        {
          "name": "run-all.sh",
          "type": "blob",
          "size": 0.70703125,
          "content": "#!/bin/bash\n\n# This script is a small convenience wrapper for running the doctrine testsuite against a large bunch of databases.\n# Just create the phpunit.xmls as described in the array below and configure the specific files <php /> section\n# to connect to that database. Just omit a file if you don't have that database and the tests will be skipped.\n\nconfigs[1]=\"mysql.phpunit.xml\" \nconfigs[2]='postgres.phpunit.xml' \nconfigs[3]='sqlite.phpunit.xml'\nconfigs[4]='oracle.phpunit.xml'\nconfigs[5]='db2.phpunit.xml'\nconfigs[6]='pdo-ibm.phpunit.xml'\nconfigs[7]='sqlsrv.phpunit.xml'\n\nfor i in \"${configs[@]}\"; do\n    if [ -f \"$i\" ];\n    then\n        echo \"RUNNING TESTS WITH CONFIG $i\"\n        phpunit -c \"$i\" \"$@\" \n    fi;\ndone\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}