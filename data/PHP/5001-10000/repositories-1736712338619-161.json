{
  "metadata": {
    "timestamp": 1736712338619,
    "page": 161,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjE2NA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "openai-php/client",
      "stars": 5065,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3291015625,
          "content": "; This file is for unifying the coding style for different editors and IDEs.\n; More information at http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.yml]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3544921875,
          "content": "/art               export-ignore\n/tests             export-ignore\n/.github           export-ignore\n.editorconfig      export-ignore\n.gitattributes     export-ignore\n.gitignore         export-ignore\nCHANGELOG.md       export-ignore\nCONTRIBUTING.md    export-ignore\nphpstan.neon.dist  export-ignore\nphpunit.xml.dist   export-ignore\nREADME.md          export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.12109375,
          "content": "/.phpunit.cache\n/.php-cs-fixer.cache\n/.php-cs-fixer.php\n/composer.lock\n/phpunit.xml\n/vendor/\n*.swp\n*.swo\nplayground/*\n.idea\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 10.39453125,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/)\nand this project adheres to [Semantic Versioning](http://semver.org/).\n\n## v0.10.1 (2024-06-06)\n### Added\n-  Add support for Assistants API v2 and Vector Stores endpoints ([#420](https://github.com/openai-php/client/pull/420))\n\n### Docs\n-  Add vector store endpoints documentation ([#420](https://github.com/openai-php/client/pull/420))\n\n## v0.10.0-beta.1 (2024-05-27)\n### Added\n-  Add support for Assistants API v2 and Vector Stores endpoint ([#405](https://github.com/openai-php/client/pull/405))\n\n## v0.9.2 (2024-05-27)\n### Added\n- Support for usage stream option on chat endpoint ([#398](https://github.com/openai-php/client/pull/398))\n\n- ### Fixed\n- Missing output paramenter on streamed code interpreter outpu ([#406](https://github.com/openai-php/client/pull/406))\n\n## v0.9.1 (2024-05-24)\n### Added\n- Add support for Batches endpoint ([#403](https://github.com/openai-php/client/pull/403))\n\n## v0.9.0 (2024-05-21)\n### Added\n- Assistants: add streaming support ([#367](https://github.com/openai-php/client/pull/367))\n\n## v0.8.5 (2024-04-15)\n### Added\n- Audio: add support for timestamp_granularities ([#374](https://github.com/openai-php/client/pull/374))\n\n## v0.8.4 (2024-02-07)\n### Fixed\n- Fix default fake data for meta information ([#332](https://github.com/openai-php/client/pull/332))\n\n## v0.8.3 (2024-02-02)\n### Added\n- ThreadRun: Add \"usage\" property to the response ([#330](https://github.com/openai-php/client/pull/330))\n\n## v0.8.2 (2024-01-26)\n### Fixed\n- ThreadRunStep: \"content\" missing in response if result has not been submitted ([#319](https://github.com/openai-php/client/pull/319))\n- Files: \"bytes\" in retrieve response is may null ([#325](https://github.com/openai-php/client/pull/325))\n\n## v0.8.1 (2023-12-22)\n### Added\n- Add support for Assistants and Threads endpoint ([#271](https://github.com/openai-php/client/pull/271))\n- Add stream support for Text To Speech ([#235](https://github.com/openai-php/client/pull/235))\n- Add test resources for Assistants and Threads  ([#279](https://github.com/openai-php/client/pull/279))\n\n### Changed\n- Remove thread messages delete endpoint ([#309](https://github.com/openai-php/client/pull/309))\n\n### Fixed\n- Handle x-request-id in meta information ([#283](https://github.com/openai-php/client/pull/283))\n- Handle meta information from azure headers ([#307](https://github.com/openai-php/client/pull/307))\n- Add missing default system_fingerprint to chat create response fixture ([#308](https://github.com/openai-php/client/pull/308))\n- Convert headers to lower case before creation meta information ([#306](https://github.com/openai-php/client/pull/306))\n\n### Docs\n- Remove threads list endpoint from README.md ([#275](https://github.com/openai-php/client/pull/275))\n- Clarify assistants files docs ([#278](https://github.com/openai-php/client/pull/278))\n- Fix image creation example ([#297](https://github.com/openai-php/client/pull/297))\n- Fix outdated links ([#299](https://github.com/openai-php/client/pull/299))\n- Add troubleshooting section and explain how to configure HTTP client timeouts\n\n## v0.8.0 (2023-11-23)\n### Added\n-  Add support for Assistants and Threads endpoint ([#271](https://github.com/openai-php/client/pull/271))\n\n## v0.8.0-beta.3 (2023-11-23)\n### Removed\n-  Remove `list()` from Threads resource\n\n## v0.8.0-beta.2 (2023-11-14)\n### Fixed\n-  instruction on ThreadRunResponse may be nullable\n\n## v0.7.10 (2023-11-14)\n### Added\n-  Add RetrieveJobResponseError and batch_size, learning_rate_multiplier parameters on RetrieveJobResponseHyperparameters for fine-tuning endpoint ([#255](https://github.com/openai-php/client/pull/255))\n\n## v0.7.9 (2023-11-14)\n### Added\n-  Add revised_prompt property to CreateResponseData on the image create endpoint ([#257](https://github.com/openai-php/client/pull/257))\n\n### Docs\n- Fix model in one of the examples\n\n## v0.8.0-beta.1 (2023-11-13)\n### Added\n-  Add support for Assistants and Threads endpoint ([#243](https://github.com/openai-php/client/pull/243))\n\n## v0.7.8 (2023-11-07)\n### Added\n-  Add support for GTP-4 vision on the chat completion endpoint ([#241](https://github.com/openai-php/client/pull/241))\n\n## v0.7.7 (2023-11-07)\n### Added\n-  Add support for tool calls on the chat completion endpoint ([#239](https://github.com/openai-php/client/pull/239))\n\n## v0.7.6 (2023-11-06)\n### Added\n-  Add support for the audio speech endpoint ([#237](https://github.com/openai-php/client/pull/237))\n\n## v0.7.5 (2023-11-06)\n### Changed\n- Update Models endpoint response object to the latest API changes ([#235](https://github.com/openai-php/client/pull/235))\n\n### Docs\n- Update FineTuning job id names ([#230](https://github.com/openai-php/client/pull/230))\n- Use Chat resource as the primary example\n\n## v0.7.4 (2023-10-21)\n### Fixed\n- nEpochs on RetrieveJobResponseHyperparameters may be string\n- processingMs ond MetaInformationOpenAI may be null ([#218](https://github.com/openai-php/client/pull/218))\n\n## v0.7.3 (2023-09-08)\n### Added\n- Add \"has_more\" to fine-tuning jobs and events list responses ([#206](https://github.com/openai-php/client/pull/206))\n\n### Changed\n- Add parameters to the fine-tuning jobs list request to filter the results ([#206](https://github.com/openai-php/client/pull/206))\n\n### Fixed\n- error_code may be int\n\n## v0.7.2 (2023-08-31)\n### Fixed\n- Missing openai-version header from Azure\n\n## v0.7.1 (2023-08-29)\n### Fixed\n- Typo in class name MetaInformationOpenAI\n\n## v0.7.0 (2023-08-29)\n### Added\n- Add support for the fine-tuning API ([#199](https://github.com/openai-php/client/pull/199))\n- Provide access to header / meta information for all responses ([#195](https://github.com/openai-php/client/pull/195))\n\n### Changed\n- Mark `FineTunes` resource as deprecated\n- Mark `Edits` resource as deprecated\n- Add missing moderation enums ([#178](https://github.com/openai-php/client/pull/178))\n\n### Fixed\n- Chat completion create response with function calling on Azure ([#184](https://github.com/openai-php/client/pull/184))\n- Breaking change on OpenAI API regarding \"transient\" field in Audio translations ([#168](https://github.com/openai-php/client/pull/168))\n- Docs: fix OpenAI URL\n\n## v0.6.3 (2023-07-07)\n### Fixed\n- Breaking change on OpenAI API regarding \"transient\" field in Audio ([#160](https://github.com/openai-php/client/pull/160))\n\n## v0.6.2 (2023-06-23)\n### Changed\n- Error handling: use error code as exception message if error message is empty ([#150](https://github.com/openai-php/client/pull/150))\n\n### Fixed\n- Error handling: Catch error in stream responses ([#150](https://github.com/openai-php/client/pull/150))\n- Error handling: Handle errors where message is an array ([#150](https://github.com/openai-php/client/pull/150))\n\n## v0.6.1 (2023-06-15)\n### Fixed\n- Chat/CreateResponse faking with function_call ([#145](https://github.com/openai-php/client/issues/145))\n\n## v0.6.0 (2023-06-14)\n### Added\n- Add support for function calling in the Chat Completions API ([#144](https://github.com/openai-php/client/issues/144))\n\n## v0.5.3 (2023-06-07)\n### Fixed\n- Exception handling for server error with non default content type header ([#134](https://github.com/openai-php/client/issues/134))\n- Faking embedding responses for multidimensional vectors ([#131](https://github.com/openai-php/client/issues/131))\n\n## v0.5.2 (2023-05-27)\n### Added\n- Add support for psr/http-message ^2.0 ([#130](https://github.com/openai-php/client/issues/130))\n\n## v0.5.1 (2023-05-24)\n### Fixed\n- fix: stream broken after checking for errors (regression of [#113](https://github.com/openai-php/client/pull/113))\n\n## v0.5.0 (2023-05-24)\n### Added\n- Support for HTTP base uri ([#106](https://github.com/openai-php/client/pull/106))\n\n### Changed\n- unify exception handling between HTTP client implementations ([#113](https://github.com/openai-php/client/pull/113))\n\n### Fixed\n- fix toArray() on `CreateStreamedResponseDelta` to match the original API response  ([#108](https://github.com/openai-php/client/pull/108))\n\n### Docs\n- explain usage for \"OpenAI on Azure\" ([#109](https://github.com/openai-php/client/pull/109))\n\n## v0.4.2 (2023-04-12)\n### Added\n- Testing support ([#71](https://github.com/openai-php/client/pull/71))\n\n### Changed\n- Trim ApiKey before sending it to the API ([#101](https://github.com/openai-php/client/pull/101))\n\n### Fixed\n- Nullable fields on error response  ([#102](https://github.com/openai-php/client/pull/102))\n\n## v0.4.1 (2023-03-24)\n### Added\n- Stream suppport ([#84](https://github.com/openai-php/client/pull/84))\n\n## v0.4.0 (2023-03-17)\n### Changed\n- Removed dependency for `guzzlehttp/guzzle` and use PSR-18 client discovery instead ([#75](https://github.com/openai-php/client/pull/75))\n- Add Client factory which allows for a custom HTTP client\n- Client factory further accepts custom HTTP headers, query parameters and API URI\n\n## v0.3.5 (2023-03-08)\n### Fixed\n- `status_details` can be a string in file responses. Affects Files and FineTunes resources ([#68](https://github.com/openai-php/client/pull/68))\n\n## v0.3.4 (2023-03-03)\n### Added\n- `Audio` resource to turn audio into text powered by `whisper-1` ([#62](https://github.com/openai-php/client/pull/62))\n\n## v0.3.3 (2023-03-02)\n### Added\n- `Chat` resource aka ChatGPT powered by `gpt-3.5-turbo` ([#60](https://github.com/openai-php/client/pull/60))\n\n## v0.3.2 (2023-02-28)\n### Fixed\n- Nullable `finish_reason` on Completions `CreateResponse` ([#52](https://github.com/openai-php/client/pull/52), [545e0ab](https://github.com/openai-php/client/commit/545e0aba106fb0c60a86c2918f5209940b6dd26f))\n\n## v0.3.1 (2023-02-07)\n### Fixed\n- Missing `events` on FineTunes `RetrieveResponse` ([#41](https://github.com/openai-php/client/pull/41))\n\n## v0.3.0 (2023-01-03)\n### Changed\n- `OpenAI::client()` first argument changed from `apiToken` to `apiKey` ([#25](https://github.com/openai-php/client/pull/25))\n\n### Fixed\n- Getting contents from Guzzle's response causing issues with middleware ([#33](https://github.com/openai-php/client/pull/33))\n\n## v0.2.1 (2022-11-09)\n### Fixed\n- FineTunes create response: `batch_size`, `learning_rate` and `fine_tuned_model` are nullable ([#16](https://github.com/openai-php/client/issues/16))\n- File responses: add missing fields `status` and `status_details`\n\n## v0.2.0 (2022-11-07)\n### Added\n- Add `images()` resource to interact with [DALL-E](https://platform.openai.com/docs/api-reference/images)\n\n### Fixed\n- Parse completions create response with logprobs correctly\n\n## v0.1.0 (2022-10-20)\n### Added\n- First version\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.080078125,
          "content": "# CONTRIBUTING\n\nContributions are welcome, and are accepted via pull requests.\nPlease review these guidelines before submitting any pull requests.\n\n## Process\n\n1. Fork the project\n1. Create a new branch\n1. Code, test, commit and push\n1. Open a pull request detailing your changes. Make sure to follow the [template](.github/PULL_REQUEST_TEMPLATE.md)\n\n## Guidelines\n\n* Please ensure the coding style running `composer lint`.\n* Send a coherent commit history, making sure each individual commit in your pull request is meaningful.\n* You may need to [rebase](https://git-scm.com/book/en/v2/Git-Branching-Rebasing) to avoid merge conflicts.\n* Please remember that we follow [SemVer](http://semver.org/).\n\n## Setup\n\nClone your fork, then install the dev dependencies:\n```bash\ncomposer install\n```\n\n## Refactor\n\nRefactor your code:\n```bash\ncomposer refactor\n```\n\n## Lint\n\nLint your code:\n```bash\ncomposer lint\n```\n\n## Tests\n\nRun all tests:\n```bash\ncomposer test\n```\n\nCheck code quality:\n```bash\ncomposer test:refactor\n```\n\nCheck types:\n```bash\ncomposer test:types\n```\n\nUnit tests:\n```bash\ncomposer test:unit\n```\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0712890625,
          "content": "The MIT License (MIT)\n\nCopyright (c) Nuno Maduro <enunomaduro@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 65.53125,
          "content": "<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/openai-php/client/main/art/example.png\" width=\"600\" alt=\"OpenAI PHP\">\n    <p align=\"center\">\n        <a href=\"https://github.com/openai-php/client/actions\"><img alt=\"GitHub Workflow Status (main)\" src=\"https://img.shields.io/github/actions/workflow/status/openai-php/client/tests.yml?branch=main&label=tests&style=round-square\"></a>\n        <a href=\"https://packagist.org/packages/openai-php/client\"><img alt=\"Total Downloads\" src=\"https://img.shields.io/packagist/dt/openai-php/client\"></a>\n        <a href=\"https://packagist.org/packages/openai-php/client\"><img alt=\"Latest Version\" src=\"https://img.shields.io/packagist/v/openai-php/client\"></a>\n        <a href=\"https://packagist.org/packages/openai-php/client\"><img alt=\"License\" src=\"https://img.shields.io/github/license/openai-php/client\"></a>\n    </p>\n</p>\n\n------\n**OpenAI PHP** is a community-maintained PHP API client that allows you to interact with the [Open AI API](https://platform.openai.com/docs/api-reference/introduction). If you or your business relies on this package, it's important to support the developers who have contributed their time and effort to create and maintain this valuable tool:\n\n- Nuno Maduro: **[github.com/sponsors/nunomaduro](https://github.com/sponsors/nunomaduro)**\n- Sandro Gehri: **[github.com/sponsors/gehrisandro](https://github.com/sponsors/gehrisandro)**\n\n## Table of Contents\n- [Get Started](#get-started)\n- [Usage](#usage)\n  - [Models Resource](#models-resource)\n  - [Completions Resource](#completions-resource)\n  - [Chat Resource](#chat-resource)\n  - [Audio Resource](#audio-resource)\n  - [Embeddings Resource](#embeddings-resource)\n  - [Files Resource](#files-resource)\n  - [FineTuning Resource](#finetuning-resource)\n  - [Moderations Resource](#moderations-resource)\n  - [Images Resource](#images-resource)\n  - [Assistants Resource](#assistants-resource)\n  - [Threads Resource](#threads-resource)\n  - [Threads Messages Resource](#threads-messages-resource)\n  - [Threads Runs Resource](#threads-runs-resource)\n  - [Threads Runs Steps Resource](#threads-runs-steps-resource)\n  - [Vector Stores Resource](#vector-stores-resource)\n  - [Vector Stores Files Resource](#vector-store-files-resource)\n  - [Vector Stores File Batches Resource](#vector-store-file-batches-resource)\n  - [Batches Resource](#batches-resource)\n  - [FineTunes Resource (deprecated)](#finetunes-resource-deprecated)\n  - [Edits Resource (deprecated)](#edits-resource-deprecated)\n- [Meta Information](#meta-information)\n- [Troubleshooting](#troubleshooting)\n- [Testing](#testing)\n- [Services](#services)\n  - [Azure](#azure)\n\n## Get Started\n\n> **Requires [PHP 8.1+](https://php.net/releases/)**\n\nFirst, install OpenAI via the [Composer](https://getcomposer.org/) package manager:\n\n```bash\ncomposer require openai-php/client\n```\n\nEnsure that the `php-http/discovery` composer plugin is allowed to run or install a client manually if your project does not already have a PSR-18 client integrated.\n```bash\ncomposer require guzzlehttp/guzzle\n```\n\nThen, interact with OpenAI's API:\n\n```php\n$yourApiKey = getenv('YOUR_API_KEY');\n$client = OpenAI::client($yourApiKey);\n\n$result = $client->chat()->create([\n    'model' => 'gpt-4',\n    'messages' => [\n        ['role' => 'user', 'content' => 'Hello!'],\n    ],\n]);\n\necho $result->choices[0]->message->content; // Hello! How can I assist you today?\n```\n\nIf necessary, it is possible to configure and create a separate client.\n\n```php\n$yourApiKey = getenv('YOUR_API_KEY');\n\n$client = OpenAI::factory()\n    ->withApiKey($yourApiKey)\n    ->withOrganization('your-organization') // default: null\n    ->withProject('Your Project') // default: null\n    ->withBaseUri('openai.example.com/v1') // default: api.openai.com/v1\n    ->withHttpClient($httpClient = new \\GuzzleHttp\\Client([])) // default: HTTP client found using PSR-18 HTTP Client Discovery\n    ->withHttpHeader('X-My-Header', 'foo')\n    ->withQueryParam('my-param', 'bar')\n    ->withStreamHandler(fn (RequestInterface $request): ResponseInterface => $httpClient->send($request, [\n        'stream' => true // Allows to provide a custom stream handler for the http client.\n    ]))\n    ->make();\n```\n\n## Usage\n\n### `Models` Resource\n\n#### `list`\n\nLists the currently available models, and provides basic information about each one such as the owner and availability.\n\n```php\n$response = $client->models()->list();\n\n$response->object; // 'list'\n\nforeach ($response->data as $result) {\n    $result->id; // 'gpt-3.5-turbo-instruct'\n    $result->object; // 'model'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', 'data' => [...]]\n```\n\n#### `retrieve`\n\nRetrieves a model instance, providing basic information about the model such as the owner and permissioning.\n\n```php\n$response = $client->models()->retrieve('gpt-3.5-turbo-instruct');\n\n$response->id; // 'gpt-3.5-turbo-instruct'\n$response->object; // 'model'\n$response->created; // 1642018370\n$response->ownedBy; // 'openai'\n\n$response->toArray(); // ['id' => 'gpt-3.5-turbo-instruct', ...]\n```\n\n#### `delete`\n\nDelete a fine-tuned model.\n\n```php\n$response = $client->models()->delete('curie:ft-acmeco-2021-03-03-21-44-20');\n\n$response->id; // 'curie:ft-acmeco-2021-03-03-21-44-20'\n$response->object; // 'model'\n$response->deleted; // true\n\n$response->toArray(); // ['id' => 'curie:ft-acmeco-2021-03-03-21-44-20', ...]\n```\n\n### `Completions` Resource\n\n#### `create`\n\nCreates a completion for the provided prompt and parameters.\n\n```php\n$response = $client->completions()->create([\n    'model' => 'gpt-3.5-turbo-instruct',\n    'prompt' => 'Say this is a test',\n    'max_tokens' => 6,\n    'temperature' => 0\n]);\n\n$response->id; // 'cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7'\n$response->object; // 'text_completion'\n$response->created; // 1589478378\n$response->model; // 'gpt-3.5-turbo-instruct'\n\nforeach ($response->choices as $choice) {\n    $choice->text; // '\\n\\nThis is a test'\n    $choice->index; // 0\n    $choice->logprobs; // null\n    $choice->finishReason; // 'length' or null\n}\n\n$response->usage->promptTokens; // 5,\n$response->usage->completionTokens; // 6,\n$response->usage->totalTokens; // 11\n\n$response->toArray(); // ['id' => 'cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7', ...]\n```\n\n#### `create streamed`\n\nCreates a streamed completion for the provided prompt and parameters.\n\n```php\n$stream = $client->completions()->createStreamed([\n        'model' => 'gpt-3.5-turbo-instruct',\n        'prompt' => 'Hi',\n        'max_tokens' => 10,\n    ]);\n\nforeach($stream as $response){\n    $response->choices[0]->text;\n}\n// 1. iteration => 'I'\n// 2. iteration => ' am'\n// 3. iteration => ' very'\n// 4. iteration => ' excited'\n// ...\n```\n\n### `Chat` Resource\n\n#### `create`\n\nCreates a completion for the chat message.\n\n```php\n$response = $client->chat()->create([\n    'model' => 'gpt-3.5-turbo',\n    'messages' => [\n        ['role' => 'user', 'content' => 'Hello!'],\n    ],\n]);\n\n$response->id; // 'chatcmpl-6pMyfj1HF4QXnfvjtfzvufZSQq6Eq'\n$response->object; // 'chat.completion'\n$response->created; // 1677701073\n$response->model; // 'gpt-3.5-turbo-0301'\n\nforeach ($response->choices as $choice) {\n    $choice->index; // 0\n    $choice->message->role; // 'assistant'\n    $choice->message->content; // '\\n\\nHello there! How can I assist you today?'\n    $choice->finishReason; // 'stop'\n}\n\n$response->usage->promptTokens; // 9,\n$response->usage->completionTokens; // 12,\n$response->usage->totalTokens; // 21\n\n$response->toArray(); // ['id' => 'chatcmpl-6pMyfj1HF4QXnfvjtfzvufZSQq6Eq', ...]\n```\n\nCreates a completion for the chat message with a tool call.\n\n```php\n$response = $client->chat()->create([\n    'model' => 'gpt-3.5-turbo-0613',\n    'messages' => [\n        ['role' => 'user', 'content' => 'What\\'s the weather like in Boston?'],\n    ],\n    'tools' => [\n        [\n            'type' => 'function',\n            'function' => [\n                'name' => 'get_current_weather',\n                'description' => 'Get the current weather in a given location',\n                'parameters' => [\n                    'type' => 'object',\n                    'properties' => [\n                        'location' => [\n                            'type' => 'string',\n                            'description' => 'The city and state, e.g. San Francisco, CA',\n                        ],\n                        'unit' => [\n                            'type' => 'string',\n                            'enum' => ['celsius', 'fahrenheit']\n                        ],\n                    ],\n                    'required' => ['location'],\n                ],\n            ],\n        ]\n    ]\n]);\n\n$response->id; // 'chatcmpl-6pMyfj1HF4QXnfvjtfzvufZSQq6Eq'\n$response->object; // 'chat.completion'\n$response->created; // 1677701073\n$response->model; // 'gpt-3.5-turbo-0613'\n\nforeach ($response->choices as $choice) {\n    $choice->index; // 0\n    $choice->message->role; // 'assistant'\n    $choice->message->content; // null\n    $choice->message->toolCalls[0]->id; // 'call_123'\n    $choice->message->toolCalls[0]->type; // 'function'\n    $choice->message->toolCalls[0]->function->name; // 'get_current_weather'\n    $choice->message->toolCalls[0]->function->arguments; // \"{\\n  \\\"location\\\": \\\"Boston, MA\\\"\\n}\"\n    $choice->finishReason; // 'tool_calls'\n}\n\n$response->usage->promptTokens; // 82,\n$response->usage->completionTokens; // 18,\n$response->usage->totalTokens; // 100\n```\n\nCreates a completion for the chat message with a function call.\n\n```php\n$response = $client->chat()->create([\n    'model' => 'gpt-3.5-turbo-0613',\n    'messages' => [\n        ['role' => 'user', 'content' => 'What\\'s the weather like in Boston?'],\n    ],\n    'functions' => [\n        [\n            'name' => 'get_current_weather',\n            'description' => 'Get the current weather in a given location',\n            'parameters' => [\n                'type' => 'object',\n                'properties' => [\n                    'location' => [\n                        'type' => 'string',\n                        'description' => 'The city and state, e.g. San Francisco, CA',\n                    ],\n                    'unit' => [\n                        'type' => 'string',\n                        'enum' => ['celsius', 'fahrenheit']\n                    ],\n                ],\n                'required' => ['location'],\n            ],\n        ]\n    ]\n]);\n\n$response->id; // 'chatcmpl-6pMyfj1HF4QXnfvjtfzvufZSQq6Eq'\n$response->object; // 'chat.completion'\n$response->created; // 1677701073\n$response->model; // 'gpt-3.5-turbo-0613'\n\nforeach ($response->choices as $choice) {\n    $choice->index; // 0\n    $choice->message->role; // 'assistant'\n    $choice->message->content; // null\n    $choice->message->functionCall->name; // 'get_current_weather'\n    $choice->message->functionCall->arguments; // \"{\\n  \\\"location\\\": \\\"Boston, MA\\\"\\n}\"\n    $choice->finishReason; // 'function_call'\n}\n\n$response->usage->promptTokens; // 82,\n$response->usage->completionTokens; // 18,\n$response->usage->totalTokens; // 100\n```\n\n#### `create streamed`\n\nCreates a streamed completion for the chat message.\n\n```php\n$stream = $client->chat()->createStreamed([\n    'model' => 'gpt-4',\n    'messages' => [\n        ['role' => 'user', 'content' => 'Hello!'],\n    ],\n]);\n\nforeach($stream as $response){\n    $response->choices[0]->toArray();\n}\n// 1. iteration => ['index' => 0, 'delta' => ['role' => 'assistant'], 'finish_reason' => null]\n// 2. iteration => ['index' => 0, 'delta' => ['content' => 'Hello'], 'finish_reason' => null]\n// 3. iteration => ['index' => 0, 'delta' => ['content' => '!'], 'finish_reason' => null]\n// ...\n```\n\nTo get usage report when using stream you can use `include_usage` in `stream_options` .\n\n```php\n$stream = $client->chat()->createStreamed([\n    'model' => 'gpt-4',\n    'messages' => [\n        ['role' => 'user', 'content' => 'Hello!'],\n    ],\n    'stream_options'=>[\n        'include_usage' => true,\n    ]\n]);\n\nforeach($stream as $response){\n    if($response->usage !== null){\n        $response->usage->promptTokens; // 9,\n        $response->usage->completionTokens; // 12,\n        $response->usage->totalTokens; // 21\n    }\n}\n```\n\n `usage` is always `null` except for the last chunk which contains the token usage statistics for the entire request.\n\n### `Audio` Resource\n\n#### `speech`\n\nGenerates audio from the input text.\n\n```php\n$client->audio()->speech([\n    'model' => 'tts-1',\n    'input' => 'The quick brown fox jumped over the lazy dog.',\n    'voice' => 'alloy',\n]); // audio file content as string\n```\n\n#### `speechStreamed`\n\nGenerates streamed audio from the input text.\n\n```php\n$stream = $client->audio()->speechStreamed([\n    'model' => 'tts-1',\n    'input' => 'The quick brown fox jumped over the lazy dog.',\n    'voice' => 'alloy',\n]);\n\nforeach($stream as $chunk){\n    $chunk; // chunk of audio file content as string\n}\n```\n\n#### `transcribe`\n\nTranscribes audio into the input language.\n\n```php\n$response = $client->audio()->transcribe([\n    'model' => 'whisper-1',\n    'file' => fopen('audio.mp3', 'r'),\n    'response_format' => 'verbose_json',\n    'timestamp_granularities' => ['segment', 'word']\n]);\n\n$response->task; // 'transcribe'\n$response->language; // 'english'\n$response->duration; // 2.95\n$response->text; // 'Hello, how are you?'\n\nforeach ($response->segments as $segment) {\n    $segment->index; // 0\n    $segment->seek; // 0\n    $segment->start; // 0.0\n    $segment->end; // 4.0\n    $segment->text; // 'Hello, how are you?'\n    $segment->tokens; // [50364, 2425, 11, 577, 366, 291, 30, 50564]\n    $segment->temperature; // 0.0\n    $segment->avgLogprob; // -0.45045216878255206\n    $segment->compressionRatio; // 0.7037037037037037\n    $segment->noSpeechProb; // 0.1076972484588623\n    $segment->transient; // false\n}\n\nforeach ($response->words as $word) {\n    $word->word; // 'Hello'\n    $word->start; // 0.31\n    $word->end; // 0.92\n}\n\n$response->toArray(); // ['task' => 'transcribe', ...]\n```\n\n#### `translate`\n\nTranslates audio into English.\n\n```php\n$response = $client->audio()->translate([\n    'model' => 'whisper-1',\n    'file' => fopen('german.mp3', 'r'),\n    'response_format' => 'verbose_json',\n]);\n\n$response->task; // 'translate'\n$response->language; // 'english'\n$response->duration; // 2.95\n$response->text; // 'Hello, how are you?'\n\nforeach ($response->segments as $segment) {\n    $segment->index; // 0\n    $segment->seek; // 0\n    $segment->start; // 0.0\n    $segment->end; // 4.0\n    $segment->text; // 'Hello, how are you?'\n    $segment->tokens; // [50364, 2425, 11, 577, 366, 291, 30, 50564]\n    $segment->temperature; // 0.0\n    $segment->avgLogprob; // -0.45045216878255206\n    $segment->compressionRatio; // 0.7037037037037037\n    $segment->noSpeechProb; // 0.1076972484588623\n    $segment->transient; // false\n}\n\n$response->toArray(); // ['task' => 'translate', ...]\n```\n\n### `Embeddings` Resource\n\n#### `create`\n\nCreates an embedding vector representing the input text.\n\n```php\n$response = $client->embeddings()->create([\n    'model' => 'text-similarity-babbage-001',\n    'input' => 'The food was delicious and the waiter...',\n]);\n\n$response->object; // 'list'\n\nforeach ($response->embeddings as $embedding) {\n    $embedding->object; // 'embedding'\n    $embedding->embedding; // [0.018990106880664825, -0.0073809814639389515, ...]\n    $embedding->index; // 0\n}\n\n$response->usage->promptTokens; // 8,\n$response->usage->totalTokens; // 8\n\n$response->toArray(); // ['data' => [...], ...]\n```\n\n### `Files` Resource\n\n#### `list`\n\nReturns a list of files that belong to the user's organization.\n\n```php\n$response = $client->files()->list();\n\n$response->object; // 'list'\n\nforeach ($response->data as $result) {\n    $result->id; // 'file-XjGxS3KTG0uNmNOK362iJua3'\n    $result->object; // 'file'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', 'data' => [...]]\n```\n\n#### `delete`\n\nDelete a file.\n\n```php\n$response = $client->files()->delete($file);\n\n$response->id; // 'file-XjGxS3KTG0uNmNOK362iJua3'\n$response->object; // 'file'\n$response->deleted; // true\n\n$response->toArray(); // ['id' => 'file-XjGxS3KTG0uNmNOK362iJua3', ...]\n```\n\n#### `retrieve`\n\nReturns information about a specific file.\n\n```php\n$response = $client->files()->retrieve('file-XjGxS3KTG0uNmNOK362iJua3');\n\n$response->id; // 'file-XjGxS3KTG0uNmNOK362iJua3'\n$response->object; // 'file'\n$response->bytes; // 140\n$response->createdAt; // 1613779657\n$response->filename; // 'mydata.jsonl'\n$response->purpose; // 'fine-tune'\n$response->status; // 'succeeded'\n$response->status_details; // null\n\n$response->toArray(); // ['id' => 'file-XjGxS3KTG0uNmNOK362iJua3', ...]\n```\n\n#### `upload`\n\nUpload a file that contains document(s) to be used across various endpoints/features.\n\n```php\n$response = $client->files()->upload([\n        'purpose' => 'fine-tune',\n        'file' => fopen('my-file.jsonl', 'r'),\n    ]);\n\n$response->id; // 'file-XjGxS3KTG0uNmNOK362iJua3'\n$response->object; // 'file'\n$response->bytes; // 140\n$response->createdAt; // 1613779657\n$response->filename; // 'mydata.jsonl'\n$response->purpose; // 'fine-tune'\n$response->status; // 'succeeded'\n$response->status_details; // null\n\n$response->toArray(); // ['id' => 'file-XjGxS3KTG0uNmNOK362iJua3', ...]\n```\n\n#### `download`\n\nReturns the contents of the specified file.\n\n```php\n$client->files()->download($file); // '{\"prompt\": \"<prompt text>\", ...'\n```\n\n### `FineTuning` Resource\n\n#### `create job`\n\nCreates a job that fine-tunes a specified model from a given dataset.\n\n```php\n$response = $client->fineTuning()->createJob([\n    'training_file' => 'file-abc123',\n    'validation_file' => null,\n    'model' => 'gpt-3.5-turbo',\n    'hyperparameters' => [\n        'n_epochs' => 4,\n    ],\n    'suffix' => null,\n]);\n\n$response->id; // 'ftjob-AF1WoRqd3aJAHsqc9NY7iL8F'\n$response->object; // 'fine_tuning.job'\n$response->model; // 'gpt-3.5-turbo-0613'\n$response->fineTunedModel; // null\n// ...\n\n$response->toArray(); // ['id' => 'ftjob-AF1WoRqd3aJAHsqc9NY7iL8F', ...]\n```\n\n#### `list jobs`\n\nList your organization's fine-tuning jobs.\n\n```php\n$response = $client->fineTuning()->listJobs();\n\n$response->object; // 'list'\n\nforeach ($response->data as $result) {\n    $result->id; // 'ftjob-AF1WoRqd3aJAHsqc9NY7iL8F'\n    $result->object; // 'fine_tuning.job'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', 'data' => [...]]\n```\n\nYou can pass additional parameters to the `listJobs` method to narrow down the results.\n\n```php\n$response = $client->fineTuning()->listJobs([\n    'limit' => 3, // Number of jobs to retrieve (Default: 20)\n    'after' => 'ftjob-AF1WoRqd3aJAHsqc9NY7iL8F', // Identifier for the last job from the previous pagination request.\n]);\n```\n\n#### `retrieve job`\n\nGet info about a fine-tuning job.\n\n```php\n$response = $client->fineTuning()->retrieveJob('ftjob-AF1WoRqd3aJAHsqc9NY7iL8F');\n\n$response->id; // 'ftjob-AF1WoRqd3aJAHsqc9NY7iL8F'\n$response->object; // 'fine_tuning.job'\n$response->model; // 'gpt-3.5-turbo-0613'\n$response->createdAt; // 1614807352\n$response->finishedAt; // 1692819450\n$response->fineTunedModel; // 'ft:gpt-3.5-turbo-0613:jwe-dev::7qnxQ0sQ'\n$response->organizationId; // 'org-jwe45798ASN82s'\n$response->resultFiles[0]; // 'file-1bl05WrhsKDDEdg8XSP617QF'\n$response->status; // 'succeeded'\n$response->validationFile; // null\n$response->trainingFile; // 'file-abc123'\n$response->trainedTokens; // 5049\n\n$response->hyperparameters->nEpochs; // 9\n\n$response->toArray(); // ['id' => 'ftjob-AF1WoRqd3aJAHsqc9NY7iL8F', ...]\n```\n\n#### `cancel job`\n\nImmediately cancel a fine-tune job.\n\n```php\n$response = $client->fineTuning()->cancelJob('ftjob-AF1WoRqd3aJAHsqc9NY7iL8F');\n\n$response->id; // 'ftjob-AF1WoRqd3aJAHsqc9NY7iL8F'\n$response->object; // 'fine_tuning.job'\n// ...\n$response->status; // 'cancelled'\n// ...\n\n$response->toArray(); // ['id' => 'ftjob-AF1WoRqd3aJAHsqc9NY7iL8F', ...]\n```\n\n#### `list job events`\n\nGet status updates for a fine-tuning job.\n\n```php\n$response = $client->fineTuning()->listJobEvents('ftjob-AF1WoRqd3aJAHsqc9NY7iL8F');\n\n$response->object; // 'list'\n\nforeach ($response->data as $result) {\n    $result->object; // 'fine_tuning.job.event' \n    $result->createdAt; // 1614807352\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', 'data' => [...]]\n```\n\nYou can pass additional parameters to the `listJobEvents` method to narrow down the results.\n\n```php\n$response = $client->fineTuning()->listJobEvents('ftjob-AF1WoRqd3aJAHsqc9NY7iL8F', [\n    'limit' => 3, // Number of events to retrieve (Default: 20)\n    'after' => 'ftevent-kLPSMIcsqshEUEJVOVBVcHlP', // Identifier for the last event from the previous pagination request.\n]);\n```\n\n### `FineTunes` Resource (deprecated)\n\n#### `create`\n\nCreates a job that fine-tunes a specified model from a given dataset.\n\n```php\n$response = $client->fineTunes()->create([\n    'training_file' => 'file-ajSREls59WBbvgSzJSVWxMCB',\n    'validation_file' => 'file-XjSREls59WBbvgSzJSVWxMCa',\n    'model' => 'curie',\n    'n_epochs' => 4,\n    'batch_size' => null,\n    'learning_rate_multiplier' => null,\n    'prompt_loss_weight' => 0.01,\n    'compute_classification_metrics' => false,\n    'classification_n_classes' => null,\n    'classification_positive_class' => null,\n    'classification_betas' => [],\n    'suffix' => null,\n]);\n\n$response->id; // 'ft-AF1WoRqd3aJAHsqc9NY7iL8F'\n$response->object; // 'fine-tune'\n// ...\n\n$response->toArray(); // ['id' => 'ft-AF1WoRqd3aJAHsqc9NY7iL8F', ...]\n```\n\n#### `list`\n\nList your organization's fine-tuning jobs.\n\n```php\n$response = $client->fineTunes()->list();\n\n$response->object; // 'list'\n\nforeach ($response->data as $result) {\n    $result->id; // 'ft-AF1WoRqd3aJAHsqc9NY7iL8F'\n    $result->object; // 'fine-tune'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', 'data' => [...]]\n```\n\n#### `retrieve`\n\nGets info about the fine-tune job.\n\n```php\n$response = $client->fineTunes()->retrieve('ft-AF1WoRqd3aJAHsqc9NY7iL8F');\n\n$response->id; // 'ft-AF1WoRqd3aJAHsqc9NY7iL8F'\n$response->object; // 'fine-tune'\n$response->model; // 'curie'\n$response->createdAt; // 1614807352\n$response->fineTunedModel; // 'curie => ft-acmeco-2021-03-03-21-44-20'\n$response->organizationId; // 'org-jwe45798ASN82s'\n$response->resultFiles; // [\n$response->status; // 'succeeded'\n$response->validationFiles; // [\n$response->trainingFiles; // [\n$response->updatedAt; // 1614807865\n\nforeach ($response->events as $result) {\n    $result->object; // 'fine-tune-event' \n    $result->createdAt; // 1614807352\n    $result->level; // 'info'\n    $result->message; // 'Job enqueued. Waiting for jobs ahead to complete. Queue number =>  0.'\n}\n\n$response->hyperparams->batchSize; // 4 \n$response->hyperparams->learningRateMultiplier; // 0.1 \n$response->hyperparams->nEpochs; // 4 \n$response->hyperparams->promptLossWeight; // 0.1\n\nforeach ($response->resultFiles as $result) {\n    $result->id; // 'file-XjGxS3KTG0uNmNOK362iJua3'\n    $result->object; // 'file'\n    $result->bytes; // 140\n    $result->createdAt; // 1613779657\n    $result->filename; // 'mydata.jsonl'\n    $result->purpose; // 'fine-tune'\n    $result->status; // 'succeeded'\n    $result->status_details; // null\n}\n\nforeach ($response->validationFiles as $result) {\n    $result->id; // 'file-XjGxS3KTG0uNmNOK362iJua3'\n    // ...\n}\n\nforeach ($response->trainingFiles as $result) {\n    $result->id; // 'file-XjGxS3KTG0uNmNOK362iJua3'\n    // ...\n}\n\n$response->toArray(); // ['id' => 'ft-AF1WoRqd3aJAHsqc9NY7iL8F', ...]\n```\n\n#### `cancel`\n\nImmediately cancel a fine-tune job.\n\n```php\n$response = $client->fineTunes()->cancel('ft-AF1WoRqd3aJAHsqc9NY7iL8F');\n\n$response->id; // 'ft-AF1WoRqd3aJAHsqc9NY7iL8F'\n$response->object; // 'fine-tune'\n// ...\n$response->status; // 'cancelled'\n// ...\n\n$response->toArray(); // ['id' => 'ft-AF1WoRqd3aJAHsqc9NY7iL8F', ...]\n```\n\n#### `list events`\n\nGet fine-grained status updates for a fine-tune job.\n\n```php\n$response = $client->fineTunes()->listEvents('ft-AF1WoRqd3aJAHsqc9NY7iL8F');\n\n$response->object; // 'list'\n\nforeach ($response->data as $result) {\n    $result->object; // 'fine-tune-event' \n    $result->createdAt; // 1614807352\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', 'data' => [...]]\n```\n\n#### `list events streamed`\n\nGet streamed fine-grained status updates for a fine-tune job.\n\n```php\n$stream = $client->fineTunes()->listEventsStreamed('ft-y3OpNlc8B5qBVGCCVsLZsDST');\n\nforeach($stream as $response){\n    $response->message;\n}\n// 1. iteration => 'Created fine-tune: ft-y3OpNlc8B5qBVGCCVsLZsDST'\n// 2. iteration => 'Fine-tune costs $0.00'\n// ...\n// xx. iteration => 'Uploaded result file: file-ajLKUCMsFPrT633zqwr0eI4l'\n// xx. iteration => 'Fine-tune succeeded'\n```\n\n### `Moderations` Resource\n\n#### `create`\n\nClassifies if text violates OpenAI's Content Policy.\n\n```php\n\n$response = $client->moderations()->create([\n    'model' => 'text-moderation-latest',\n    'input' => 'I want to k*** them.',\n]);\n\n$response->id; // modr-5xOyuS\n$response->model; // text-moderation-003\n\nforeach ($response->results as $result) {\n    $result->flagged; // true\n\n    foreach ($result->categories as $category) {\n        $category->category->value; // 'violence'\n        $category->violated; // true\n        $category->score; // 0.97431367635727\n    }\n}\n\n$response->toArray(); // ['id' => 'modr-5xOyuS', ...]\n```\n\n### `Images` Resource\n\n#### `create`\n\nCreates an image given a prompt.\n\n```php\n$response = $client->images()->create([\n    'model' => 'dall-e-3',\n    'prompt' => 'A cute baby sea otter',\n    'n' => 1,\n    'size' => '1024x1024',\n    'response_format' => 'url',\n]);\n\n$response->created; // 1589478378\n\nforeach ($response->data as $data) {\n    $data->url; // 'https://oaidalleapiprodscus.blob.core.windows.net/private/...'\n    $data->b64_json; // null\n}\n\n$response->toArray(); // ['created' => 1589478378, data => ['url' => 'https://oaidalleapiprodscus...', ...]]\n```\n\n#### `edit`\n\nCreates an edited or extended image given an original image and a prompt.\n\n```php\n$response = $client->images()->edit([\n    'image' => fopen('image_edit_original.png', 'r'),\n    'mask' => fopen('image_edit_mask.png', 'r'),\n    'prompt' => 'A sunlit indoor lounge area with a pool containing a flamingo',\n    'n' => 1,\n    'size' => '256x256',\n    'response_format' => 'url',\n]);\n\n$response->created; // 1589478378\n\nforeach ($response->data as $data) {\n    $data->url; // 'https://oaidalleapiprodscus.blob.core.windows.net/private/...'\n    $data->b64_json; // null\n}\n\n$response->toArray(); // ['created' => 1589478378, data => ['url' => 'https://oaidalleapiprodscus...', ...]]\n```\n\n#### `variation`\n\nCreates a variation of a given image.\n\n```php\n$response = $client->images()->variation([\n    'image' => fopen('image_edit_original.png', 'r'),\n    'n' => 1,\n    'size' => '256x256',\n    'response_format' => 'url',\n]);\n\n$response->created; // 1589478378\n\nforeach ($response->data as $data) {\n    $data->url; // 'https://oaidalleapiprodscus.blob.core.windows.net/private/...'\n    $data->b64_json; // null\n}\n\n$response->toArray(); // ['created' => 1589478378, data => ['url' => 'https://oaidalleapiprodscus...', ...]]\n```\n\n### `Assistants` Resource\n\n> **Note:** If you are creating the client manually from the factory. Make sure you provide the necessary header:\n> ```php\n> $factory->withHttpHeader('OpenAI-Beta', 'assistants=v2')\n> ```\n\n#### `create`\n\nCreate an assistant with a model and instructions.\n\n```php\n$response = $client->assistants()->create([\n    'instructions' => 'You are a personal math tutor. When asked a question, write and run Python code to answer the question.',\n    'name' => 'Math Tutor',\n    'tools' => [\n        [\n            'type' => 'code_interpreter',\n        ],\n    ],\n    'model' => 'gpt-4',\n]);\n\n$response->id; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->object; // 'assistant'\n$response->createdAt; // 1623936000\n$response->name; // 'Math Tutor'\n$response->instructions; // 'You are a personal math tutor. When asked a question, write and run Python code to answer the question.'\n$response->model; // 'gpt-4'\n$response->description; // null\n$response->tools[0]->type; // 'code_interpreter'\n$response->toolResources; // []\n$response->metadata; // []\n$response->temperature: // null\n$response->topP: // null\n$response->format: // 'auto'\n\n$response->toArray(); // ['id' => 'asst_gxzBkD1wkKEloYqZ410pT5pd', ...]\n```\n\n#### `retrieve`\n\nRetrieves an assistant.\n\n```php\n$response = $client->assistants()->retrieve('asst_gxzBkD1wkKEloYqZ410pT5pd');\n\n$response->id; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->object; // 'assistant'\n$response->createdAt; // 1623936000\n$response->name; // 'Math Tutor'\n$response->instructions; // 'You are a personal math tutor. When asked a question, write and run Python code to answer the question.'\n$response->model; // 'gpt-4'\n$response->description; // null\n$response->tools[0]->type; // 'code_interpreter'\n$response->toolResources; // []\n$response->metadata; // []\n$response->temperature: // null\n$response->topP: // null\n$response->format: // 'auto'\n\n$response->toArray(); // ['id' => 'asst_gxzBkD1wkKEloYqZ410pT5pd', ...]\n```\n\n#### `modify`\n\nModifies an assistant.\n\n```php\n$response = $client->assistants()->modify('asst_gxzBkD1wkKEloYqZ410pT5pd', [\n        'name' => 'New Math Tutor',\n    ]);\n\n$response->id; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->object; // 'assistant'\n$response->createdAt; // 1623936000\n$response->name; // 'New Math Tutor'\n$response->instructions; // 'You are a personal math tutor. When asked a question, write and run Python code to answer the question.'\n$response->model; // 'gpt-4'\n$response->description; // null\n$response->tools[0]->type; // 'code_interpreter'\n$response->toolResources; // []\n$response->metadata; // []\n$response->temperature: // null\n$response->topP: // null\n$response->format: // 'auto'\n\n$response->toArray(); // ['id' => 'asst_gxzBkD1wkKEloYqZ410pT5pd', ...]\n```\n\n#### `delete`\n\nDelete an assistant.\n\n```php\n$response = $client->assistants()->delete('asst_gxzBkD1wkKEloYqZ410pT5pd');\n\n$response->id; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->object; // 'assistant.deleted'\n$response->deleted; // true\n\n$response->toArray(); // ['id' => 'asst_gxzBkD1wkKEloYqZ410pT5pd', ...]\n```\n\n#### `list`\n\nReturns a list of assistants.\n\n```php\n$response = $client->assistants()->list([\n    'limit' => 10,\n]);\n\n$response->object; // 'list'\n$response->firstId; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->lastId; // 'asst_reHHtAM0jKLDIxanM6gP6DaR'\n$response->hasMore; // true\n\nforeach ($response->data as $result) {\n    $result->id; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', ...]]\n```\n\n\n### `Threads` Resource\n\n#### `create`\n\nCreate a thread.\n\n```php\n$response = $client->threads()->create([]);\n\n$response->id; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->object; // 'thread'\n$response->createdAt; // 1623936000\n$response->toolResources; // null\n$response->metadata; // []\n\n$response->toArray(); // ['id' => 'thread_tKFLqzRN9n7MnyKKvc1Q7868', ...]\n```\n\n#### `createAndRun`\n\nCreate a thread and run it in one request.\n\n```php\n$response = $client->threads()->createAndRun(\n    [\n        'assistant_id' => 'asst_gxzBkD1wkKEloYqZ410pT5pd',\n        'thread' => [\n            'messages' =>\n                [\n                    [\n                        'role' => 'user',\n                        'content' => 'Explain deep learning to a 5 year old.',\n                    ],\n                ],\n        ],\n    ],\n);\n\n$response->id; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->object; // 'thread.run'\n$response->createdAt; // 1623936000\n$response->assistantId; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->status; // 'queued'\n$response->requiredAction; // null\n$response->lastError; // null\n$response->startedAt; // null\n$response->expiresAt; // 1699622335\n$response->cancelledAt; // null\n$response->failedAt; // null\n$response->completedAt; // null\n$response->incompleteDetails; // null\n$response->lastError; // null\n$response->model; // 'gpt-4'\n$response->instructions; // null\n$response->tools; // []\n$response->metadata; // []\n$response->usage->total_tokens; // 579\n$response->temperature; // null\n$response->topP; // null\n$response->maxPromptTokens; // 1000\n$response->maxCompletionTokens; // 1000\n$response->truncationStrategy->type; // 'auto'\n$response->responseFormat; // 'auto'\n$response->toolChoice; // 'auto'\n\n$response->toArray(); // ['id' => 'run_4RCYyYzX9m41WQicoJtUQAb8', ...]\n```\n\n#### `retrieve`\n\nRetrieves a thread.\n\n```php\n$response = $client->threads()->retrieve('thread_tKFLqzRN9n7MnyKKvc1Q7868');\n\n$response->id; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->object; // 'thread'\n$response->createdAt; // 1623936000\n$response->toolResources; // null\n$response->metadata; // []\n\n$response->toArray(); // ['id' => 'thread_tKFLqzRN9n7MnyKKvc1Q7868', ...]\n```\n\n#### `modify`\n\nModifies a thread.\n\n```php\n$response = $client->threads()->modify('thread_tKFLqzRN9n7MnyKKvc1Q7868', [\n        'metadata' => [\n            'name' => 'My new thread name',\n        ],\n    ]);\n\n$response->id; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->object; // 'thread'\n$response->createdAt; // 1623936000\n$response->toolResources; // null\n$response->metadata; // ['name' => 'My new thread name']\n\n$response->toArray(); // ['id' => 'thread_tKFLqzRN9n7MnyKKvc1Q7868', ...]\n```\n\n#### `delete`\n\nDelete a thread.\n\n```php\n$response = $client->threads()->delete('thread_tKFLqzRN9n7MnyKKvc1Q7868');\n\n$response->id; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->object; // 'thread.deleted'\n$response->deleted; // true\n\n$response->toArray(); // ['id' => 'thread_tKFLqzRN9n7MnyKKvc1Q7868', ...]\n```\n\n### `Threads Messages` Resource\n\n#### `create`\n\nCreate a message.\n\n```php\n$response = $client->threads()->messages()->create('thread_tKFLqzRN9n7MnyKKvc1Q7868', [\n    'role' => 'user',\n    'content' => 'What is the sum of 5 and 7?',\n]);\n\n$response->id; // 'msg_SKYwvF3zcigxthfn6F4hnpdU'\n$response->object; // 'thread.message'\n$response->createdAt; // 1623936000\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->status; // 'in_progress\n$response->incompleteDetails; // null\n$response->completedAt; // null\n$response->incompleteAt; // null\n$response->role; // 'user'\n$response->content[0]->type; // 'text'\n$response->content[0]->text->value; // 'What is the sum of 5 and 7?'\n$response->content[0]->text->annotations; // []\n$response->assistantId; // null\n$response->runId; // null\n$response->attachments; // []\n$response->metadata; // []\n\n$response->toArray(); // ['id' => 'msg_SKYwvF3zcigxthfn6F4hnpdU', ...]\n```\n\n#### `retrieve`\n\nRetrieve a message.\n\n```php\n$response = $client->threads()->messages()->retrieve(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    messageId: 'msg_SKYwvF3zcigxthfn6F4hnpdU',\n);\n\n$response->id; // 'msg_SKYwvF3zcigxthfn6F4hnpdU'\n$response->object; // 'thread.message'\n$response->createdAt; // 1623936000\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->status; // 'in_progress\n$response->incompleteDetails; // null\n$response->completedAt; // null\n$response->incompleteAt; // null\n$response->role; // 'user'\n$response->content[0]->type; // 'text'\n$response->content[0]->text->value; // 'What is the sum of 5 and 7?'\n$response->content[0]->text->annotations; // []\n$response->assistantId; // null\n$response->runId; // null\n$response->attachments; // []\n$response->metadata; // []\n\n$response->toArray(); // ['id' => 'msg_SKYwvF3zcigxthfn6F4hnpdU', ...]\n```\n\n#### `modify`\n\nModifies a message.\n\n```php\n$response = $client->threads()->messages()->modify(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    messageId: 'msg_SKYwvF3zcigxthfn6F4hnpdU',\n    parameters:  [\n        'metadata' => [\n            'name' => 'My new message name',\n        ],\n    ],\n);\n\n$response->id; // 'msg_SKYwvF3zcigxthfn6F4hnpdU'\n$response->object; // 'thread.message'\n$response->createdAt; // 1623936000\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->status; // 'in_progress\n$response->incompleteDetails; // null\n$response->completedAt; // null\n$response->incompleteAt; // null\n$response->role; // 'user'\n$response->content[0]->type; // 'text'\n$response->content[0]->text->value; // 'What is the sum of 5 and 7?'\n$response->content[0]->text->annotations; // []\n$response->assistantId; // null\n$response->runId; // null\n$response->attachments; // []\n$response->metadata; // ['name' => 'My new message name']\n\n$response->toArray(); // ['id' => 'msg_SKYwvF3zcigxthfn6F4hnpdU', ...]\n```\n\n#### `delete`\n\nDeletes a message.\n\n```php\n$response = $client->threads()->messages()->delete(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    messageId: 'msg_SKYwvF3zcigxthfn6F4hnpdU'\n);\n\n$response->id; // 'msg_SKYwvF3zcigxthfn6F4hnpdU'\n$response->object; // 'thread.message.deleted'\n$response->deleted; // true\n\n$response->toArray(); // ['id' => 'msg_SKYwvF3zcigxthfn6F4hnpdU', ...]\n```\n\n#### `list`\n\nReturns a list of messages for a given thread.\n\n```php\n$response = $client->threads()->messages()->list('thread_tKFLqzRN9n7MnyKKvc1Q7868', [\n    'limit' => 10,\n]);\n\n$response->object; // 'list'\n$response->firstId; // 'msg_SKYwvF3zcigxthfn6F4hnpdU'\n$response->lastId; // 'msg_SKYwvF3zcigxthfn6F4hnpdU'\n$response->hasMore; // false\n\nforeach ($response->data as $result) {\n    $result->id; // 'msg_SKYwvF3zcigxthfn6F4hnpdU'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', ...]]\n```\n\n\n### `Threads Runs` Resource\n\n#### `create`\n\nCreate a run.\n\n```php\n$response = $client->threads()->runs()->create(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868', \n    parameters: [\n        'assistant_id' => 'asst_gxzBkD1wkKEloYqZ410pT5pd',\n    ],\n);\n\n$response->id; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->object; // 'thread.run'\n$response->createdAt; // 1623936000\n$response->assistantId; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->status; // 'queued'\n$response->startedAt; // null\n$response->expiresAt; // 1699622335\n$response->cancelledAt; // null\n$response->failedAt; // null\n$response->completedAt; // null\n$response->incompleteDetails; // null\n$response->lastError; // null\n$response->model; // 'gpt-4'\n$response->instructions; // null\n$response->tools; // []\n$response->metadata; // []\n$response->usage->total_tokens; // 579\n$response->temperature; // null\n$response->topP; // null\n$response->maxPromptTokens; // 1000\n$response->maxCompletionTokens; // 1000\n$response->truncationStrategy->type; // 'auto'\n$response->toolChoice; // 'auto'\n$response->responseFormat; // 'auto'\n\n$response->toArray(); // ['id' => 'run_4RCYyYzX9m41WQicoJtUQAb8', ...]\n```\n\n#### `create streamed`\n\nCreates a streamed run.\n\n[OpenAI Assistant Events](https://platform.openai.com/docs/api-reference/assistants-streaming/events)\n\n```php\n$stream = $client->threads()->runs()->createStreamed(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    parameters: [\n        'assistant_id' => 'asst_gxzBkD1wkKEloYqZ410pT5pd',\n    ],\n);\n\nforeach($stream as $response){\n    $response->event // 'thread.run.created' | 'thread.run.in_progress' | .....\n    $response->response // ThreadResponse | ThreadRunResponse | ThreadRunStepResponse | ThreadRunStepDeltaResponse | ThreadMessageResponse | ThreadMessageDeltaResponse\n}\n\n// ...\n```\n\n#### `create streamed with function calls`\n\nCreates a streamed run with function calls\n\n[OpenAI Assistant Events](https://platform.openai.com/docs/api-reference/assistants-streaming/events)\n\n```php\n$stream = $client->threads()->runs()->createStreamed(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    parameters: [\n        'assistant_id' => 'asst_gxzBkD1wkKEloYqZ410pT5pd',\n    ],\n);\n\n\ndo{\n    foreach($stream as $response){\n        $response->event // 'thread.run.created' | 'thread.run.in_progress' | .....\n        $response->response // ThreadResponse | ThreadRunResponse | ThreadRunStepResponse | ThreadRunStepDeltaResponse | ThreadMessageResponse | ThreadMessageDeltaResponse\n\n        switch($response->event){\n            case 'thread.run.created':\n            case 'thread.run.queued':\n            case 'thread.run.completed':\n            case 'thread.run.cancelling':\n                $run = $response->response;\n                break;\n            case 'thread.run.expired':\n            case 'thread.run.cancelled':\n            case 'thread.run.failed':\n                $run = $response->response;\n                break 3;\n            case 'thread.run.requires_action':\n                // Overwrite the stream with the new stream started by submitting the tool outputs\n                $stream = $client->threads()->runs()->submitToolOutputsStreamed(\n                    threadId: $run->threadId,\n                    runId: $run->id,\n                    parameters: [\n                        'tool_outputs' => [\n                            [\n                                'tool_call_id' => 'call_KSg14X7kZF2WDzlPhpQ168Mj',\n                                'output' => '12',\n                            ]\n                        ],\n                    ]\n                );\n                break;\n        }\n    }\n} while ($run->status != \"completed\")\n\n// ...\n```\n\n#### `retrieve`\n\nRetrieves a run.\n\n```php\n$response = $client->threads()->runs()->retrieve(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    runId: 'run_4RCYyYzX9m41WQicoJtUQAb8',\n);\n\n$response->id; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->object; // 'thread.run'\n$response->createdAt; // 1623936000\n$response->assistantId; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->status; // 'queued'\n$response->startedAt; // null\n$response->expiresAt; // 1699622335\n$response->cancelledAt; // null\n$response->failedAt; // null\n$response->completedAt; // null\n$response->incompleteDetails; // null\n$response->lastError; // null\n$response->model; // 'gpt-4'\n$response->instructions; // null\n$response->tools; // []\n$response->metadata; // []\n$response->usage->promptTokens; // 25,\n$response->usage->completionTokens; // 32,\n$response->usage->totalTokens; // 57\n$response->temperature; // null\n$response->topP; // null\n$response->maxPromptTokens; // 1000\n$response->maxCompletionTokens; // 1000\n$response->truncationStrategy->type; // 'auto'\n$response->toolChoice; // 'auto'\n$response->responseFormat; // 'auto'\n\n$response->toArray(); // ['id' => 'run_4RCYyYzX9m41WQicoJtUQAb8', ...]\n```\n\n#### `modify`\n\nModifies a run.\n\n```php\n$response = $client->threads()->runs()->modify(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    runId: 'run_4RCYyYzX9m41WQicoJtUQAb8',\n    parameters:  [\n        'metadata' => [\n            'name' => 'My new run name',\n        ],\n    ],\n);\n\n$response->id; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->object; // 'thread.run'\n$response->createdAt; // 1623936000\n$response->assistantId; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->status; // 'queued'\n$response->startedAt; // null\n$response->expiresAt; // 1699622335\n$response->cancelledAt; // null\n$response->failedAt; // null\n$response->completedAt; // null\n$response->incompleteDetails; // null\n$response->lastError; // null\n$response->model; // 'gpt-4'\n$response->instructions; // null\n$response->tools; // []\n$response->usage->total_tokens; // 579\n$response->temperature; // null\n$response->topP; // null\n$response->maxPromptTokens; // 1000\n$response->maxCompletionTokens; // 1000\n$response->truncationStrategy->type; // 'auto'\n$response->toolChoice; // 'auto'\n$response->responseFormat; // 'auto'\n$response->metadata; // ['name' => 'My new run name']\n\n$response->toArray(); // ['id' => 'run_4RCYyYzX9m41WQicoJtUQAb8', ...]\n```\n\n#### `cancel`\n\nCancels a run that is `in_progress`.\n\n```php\n$response = $client->threads()->runs()->cancel(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    runId: 'run_4RCYyYzX9m41WQicoJtUQAb8',\n);\n\n$response->id; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->object; // 'thread.run'\n$response->createdAt; // 1623936000\n$response->assistantId; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->status; // 'cancelling'\n$response->startedAt; // null\n$response->expiresAt; // 1699622335\n$response->cancelledAt; // null\n$response->failedAt; // null\n$response->completedAt; // null\n$response->incompleteDetails; // null\n$response->lastError; // null\n$response->model; // 'gpt-4'\n$response->instructions; // null\n$response->tools; // []\n$response->usage?->total_tokens; // 579\n$response->temperature; // null\n$response->topP; // null\n$response->maxPromptTokens; // 1000\n$response->maxCompletionTokens; // 1000\n$response->truncationStrategy->type; // 'auto'\n$response->toolChoice; // 'auto'\n$response->responseFormat; // 'auto'\n$response->metadata; // []\n\n$response->toArray(); // ['id' => 'run_4RCYyYzX9m41WQicoJtUQAb8', ...]\n```\n\n#### `submitToolOutputs`\n\nWhen a run has the status: `requires_action` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.\n\n```php\n$response = $client->threads()->runs()->submitToolOutputs(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    runId: 'run_4RCYyYzX9m41WQicoJtUQAb8',\n    parameters: [\n        'tool_outputs' => [\n            [\n                'tool_call_id' => 'call_KSg14X7kZF2WDzlPhpQ168Mj',\n                'output' => '12',\n            ],\n        ],\n    ]\n);\n\n$response->id; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->object; // 'thread.run'\n$response->createdAt; // 1623936000\n$response->assistantId; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->status; // 'in_progress'\n$response->startedAt; // null\n$response->expiresAt; // 1699622335\n$response->cancelledAt; // null\n$response->failedAt; // null\n$response->completedAt; // null\n$response->incompleteDetails; // null\n$response->lastError; // null\n$response->model; // 'gpt-4'\n$response->instructions; // null\n$response->usage->total_tokens; // 579\n$response->temperature; // null\n$response->topP; // null\n$response->maxPromptTokens; // 1000\n$response->maxCompletionTokens; // 1000\n$response->truncationStrategy->type; // 'auto'\n$response->responseFormat; // 'auto'\n$response->tools[0]->type; // 'function'\n$response->toolChoice; // 'auto'\n$response->metadata; // []\n\n$response->toArray(); // ['id' => 'run_4RCYyYzX9m41WQicoJtUQAb8', ...]\n```\n\n#### `list`\n\nReturns a list of runs belonging to a thread.\n\n```php\n$response = $client->threads()->runs()->list(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    parameters: [\n        'limit' => 10,\n    ],\n);\n\n$response->object; // 'list'\n$response->firstId; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->lastId; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->hasMore; // false\n\nforeach ($response->data as $result) {\n    $result->id; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', ...]]\n```\n\n### `Threads Runs Steps` Resource\n\n#### `retrieve`\n\nRetrieves a run step.\n\n```php\n$response = $client->threads()->runs()->steps()->retrieve(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    runId: 'run_4RCYyYzX9m41WQicoJtUQAb8',\n    stepId: 'step_1spQXgbAabXFm1YXrwiGIMUz',\n);\n\n$response->id; // 'step_1spQXgbAabXFm1YXrwiGIMUz'\n$response->object; // 'thread.run.step'\n$response->createdAt; // 1699564106\n$response->runId; // 'run_4RCYyYzX9m41WQicoJtUQAb8'\n$response->assistantId; // 'asst_gxzBkD1wkKEloYqZ410pT5pd'\n$response->threadId; // 'thread_tKFLqzRN9n7MnyKKvc1Q7868'\n$response->type; // 'message_creation'\n$response->status; // 'completed'\n$response->cancelledAt; // null\n$response->completedAt; // 1699564119\n$response->expiresAt; // null\n$response->failedAt; // null\n$response->lastError; // null\n$response->stepDetails->type; // 'message_creation'\n$response->stepDetails->messageCreation->messageId; // 'msg_i404PxKbB92d0JAmdOIcX7vA'\n\n$response->toArray(); // ['id' => 'step_1spQXgbAabXFm1YXrwiGIMUz', ...]\n```\n\n#### `list`\n\nReturns a list of run steps belonging to a run.\n\n```php\n$response = $client->threads()->runs()->steps()->list(\n    threadId: 'thread_tKFLqzRN9n7MnyKKvc1Q7868',\n    runId: 'run_4RCYyYzX9m41WQicoJtUQAb8',\n    parameters: [\n        'limit' => 10,\n    ],\n);\n\n$response->object; // 'list'\n$response->firstId; // 'step_1spQXgbAabXFm1YXrwiGIMUz'\n$response->lastId; // 'step_1spQXgbAabXFm1YXrwiGIMUz'\n$response->hasMore; // false\n\nforeach ($response->data as $result) {\n    $result->id; // 'step_1spQXgbAabXFm1YXrwiGIMUz'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', ...]]\n```\n\n\n### `Batches` Resource\n\n#### `create`\n\nCreates a batch.\n\n```php\n\n$fileResponse = $client->files()->upload(\n     parameters: [\n          'purpose' => 'batch',\n          'file' => fopen('commands.jsonl', 'r'),\n    ]\n);\n\n$fileId = $fileResponse->id;\n\n$response = $client->batches()->create(\n    parameters: [\n        'input_file_id' => $fileId,\n        'endpoint' => '/v1/chat/completions',\n        'completion_window' => '24h'\n    ]\n );\n\n$response->id; // 'batch_abc123'\n$response->object; // 'batch'\n$response->endpoint; // /v1/chat/completions\n$response->errors; // null\n$response->completionWindow; // '24h'\n$response->status; // 'validating'\n$response->outputFileId; // null\n$response->errorFileId; // null\n$response->createdAt; // 1714508499\n$response->inProgressAt; // null\n$response->expiresAt; // 1714536634\n$response->completedAt; // null\n$response->failedAt; // null\n$response->expiredAt; // null\n$response->requestCounts; // null\n$response->metadata; // ['name' => 'My batch name']\n\n$response->toArray(); // ['id' => 'batch_abc123', ...]\n```\n\n#### `retrieve`\n\nRetrieves a batch.\n\n```php\n$response = $client->batches()->retrieve(id: 'batch_abc123');\n\n$response->id; // 'batch_abc123'\n$response->object; // 'batch'\n$response->endpoint; // /v1/chat/completions\n$response->errors; // null\n$response->completionWindow; // '24h'\n$response->status; // 'validating'\n$response->outputFileId; // null\n$response->errorFileId; // null\n$response->createdAt; // 1714508499\n$response->inProgressAt; // null\n$response->expiresAt; // 1714536634\n$response->completedAt; // null\n$response->failedAt; // null\n$response->expiredAt; // null\n$response->requestCounts->total; // 100\n$response->requestCounts->completed; // 95\n$response->requestCounts->failed; // 5\n$response->metadata; // ['name' => 'My batch name']\n\n$response->toArray(); // ['id' => 'batch_abc123', ...]\n```\n\n#### `cancel`\n\nCancels a batch.\n\n```php\n$response = $client->batches()->cancel(id: 'batch_abc123');\n\n$response->id; // 'batch_abc123'\n$response->object; // 'batch'\n$response->endpoint; // /v1/chat/completions\n$response->errors; // null\n$response->completionWindow; // '24h'\n$response->status; // 'cancelling'\n$response->outputFileId; // null\n$response->errorFileId; // null\n$response->createdAt; // 1711471533\n$response->inProgressAt; // 1711471538\n$response->expiresAt; // 1711557933\n$response->cancellingAt; // 1711475133\n$response->cancelledAt; // null\n$response->requestCounts->total; // 100\n$response->requestCounts->completed; // 23\n$response->requestCounts->failed; // 1\n$response->metadata; // ['name' => 'My batch name']\n\n$response->toArray(); // ['id' => 'batch_abc123', ...]\n```\n\n#### `list`\n\nReturns a list of batches.\n\n```php\n$response = $client->batches()->list(\n    parameters: [\n        'limit' => 10, \n    ],\n);\n\n$response->object; // 'list'\n$response->firstId; // 'batch_abc123'\n$response->lastId; // 'batch_abc456'\n$response->hasMore; // true\n\nforeach ($response->data as $result) {\n    $result->id; // 'batch_abc123'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', ...]]\n```\n\n\n### `Vector Stores` Resource\n\n#### `create`\n\nCreate a vector store.\n\n```php\n$response = $client->vectorStores()->create([\n    'file_ids' => [\n        'file-fUU0hFRuQ1GzhOweTNeJlCXG',\n    ],\n    'name' => 'My first Vector Store',\n]);\n\n$response->id; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n$response->object; // 'vector_store'\n$response->createdAt; // 1717703267\n$response->name; // 'My first Vector Store'\n$response->usageBytes; // 0\n$response->fileCounts->inProgress; // 1\n$response->fileCounts->completed; // 0\n$response->fileCounts->failed; // 0\n$response->fileCounts->cancelled; // 0\n$response->fileCounts->total; // 1\n$response->status; // 'in_progress'\n$response->expiresAfter; // null\n$response->expiresAt; // null\n$response->lastActiveAt; // 1717703267\n\n$response->toArray(); // ['id' => 'vs_vzfQhlTWVUl38QGqQAoQjeDF', ...]\n```\n\n#### `retrieve`\n\nRetrieves a vector store.\n\n```php\n$response = $client->vectorStores()->retrieve(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n);\n\n$response->id; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n$response->object; // 'vector_store'\n$response->createdAt; // 1717703267\n$response->name; // 'My first Vector Store'\n$response->usageBytes; // 0\n$response->fileCounts->inProgress; // 1\n$response->fileCounts->completed; // 0\n$response->fileCounts->failed; // 0\n$response->fileCounts->cancelled; // 0\n$response->fileCounts->total; // 1\n$response->status; // 'in_progress'\n$response->expiresAfter; // null\n$response->expiresAt; // null\n$response->lastActiveAt; // 1717703267\n\n$response->toArray(); // ['id' => 'vs_vzfQhlTWVUl38QGqQAoQjeDF', ...]\n```\n\n#### `modify`\n\nModifies a vector store.\n\n```php\n$response = $client->vectorStores()->modify(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n    parameters:  [\n        'name' => 'New name',\n    ],\n);\n\n$response->id; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n$response->object; // 'vector_store'\n$response->createdAt; // 1717703267\n$response->name; // 'New name'\n$response->usageBytes; // 0\n$response->fileCounts->inProgress; // 1\n$response->fileCounts->completed; // 0\n$response->fileCounts->failed; // 0\n$response->fileCounts->cancelled; // 0\n$response->fileCounts->total; // 1\n$response->status; // 'in_progress'\n$response->expiresAfter; // null\n$response->expiresAt; // null\n$response->lastActiveAt; // 1717703267\n\n$response->toArray(); // ['id' => 'vs_vzfQhlTWVUl38QGqQAoQjeDF', ...]\n```\n\n#### `delete`\n\nDelete a vector store.\n\n```php\n$response = $client->vectorStores()->delete(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n);\n\n$response->id; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n$response->object; // 'vector_store.deleted'\n$response->deleted; // true\n\n$response->toArray(); // ['id' => 'vs_vzfQhlTWVUl38QGqQAoQjeDF', ...]\n```\n\n#### `list`\n\nReturns a list of vector stores.\n\n```php\n$response = $client->vectorStores()->list(\n    parameters: [\n        'limit' => 10,\n    ],\n);\n\n$response->object; // 'list'\n$response->firstId; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n$response->lastId; // 'vs_D5DPOgBxSoEBTmYBgUESdPpa'\n$response->hasMore; // true\n\nforeach ($response->data as $result) {\n    $result->id; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', ...]]\n```\n\n\n### `Vector Store Files` Resource\n\n#### `create`\n\nCreate a vector store file by attaching a File to a vector store.\n\n```php\n$response = $client->vectorStores()->files()->create(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n    parameters: [\n        'file_id' => 'file-fUU0hFRuQ1GzhOweTNeJlCXG',\n    ]\n);\n\n$response->id; // 'file-fUU0hFRuQ1GzhOweTNeJlCXG'\n$response->object; // 'vector_store.file'\n$response->usageBytes; // 4553\n$response->createdAt; // 1717703267\n$response->vectorStoreId; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n$response->status; // 'completed'\n$response->lastError; // null\n$response->chunkingStrategy->type; // 'static'\n$response->chunkingStrategy->maxChunkSizeTokens; // 800\n$response->chunkingStrategy->chunkOverlapTokens; // 400\n\n$response->toArray(); // ['id' => 'file-fUU0hFRuQ1GzhOweTNeJlCXG', ...]\n```\n\n#### `retrieve`\n\nRetrieves a vector store file.\n\n```php\n$response = $client->vectorStores()->files()->retrieve(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n    fileId: 'file-fUU0hFRuQ1GzhOweTNeJlCXG',\n);\n\n$response->id; // 'file-fUU0hFRuQ1GzhOweTNeJlCXG'\n$response->object; // 'vector_store.file'\n$response->usageBytes; // 4553\n$response->createdAt; // 1717703267\n$response->vectorStoreId; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n$response->status; // 'completed'\n$response->lastError; // null\n$response->chunkingStrategy->type; // 'static'\n$response->chunkingStrategy->maxChunkSizeTokens; // 800\n$response->chunkingStrategy->chunkOverlapTokens; // 400\n\n$response->toArray(); // ['id' => 'file-fUU0hFRuQ1GzhOweTNeJlCXG', ...]\n```\n\n#### `delete`\n\nDelete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the delete file endpoint.\n\n```php\n$response = $client->vectorStores()->files()->delete(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n    fileId: 'file-fUU0hFRuQ1GzhOweTNeJlCXG',\n);\n\n$response->id; // 'file-fUU0hFRuQ1GzhOweTNeJlCXG'\n$response->object; // 'vector_store.file.deleted'\n$response->deleted; // true\n\n$response->toArray(); // ['id' => 'file-fUU0hFRuQ1GzhOweTNeJlCXG', ...]\n```\n\n#### `list`\n\nReturns a list of vector store files.\n\n```php\n$response = $client->vectorStores()->files()->list(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n    parameters: [\n        'limit' => 10,\n    ],\n);\n\n$response->object; // 'list'\n$response->firstId; // 'file-fUU0hFRuQ1GzhOweTNeJlCXG'\n$response->lastId; // 'file-D5DPOgBxSoEBTmYBgUESdPpa'\n$response->hasMore; // true\n\nforeach ($response->data as $result) {\n    $result->id; // 'file-fUU0hFRuQ1GzhOweTNeJlCXG'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', ...]]\n```\n\n\n### `Vector Store File Batches` Resource\n\n#### `create`\n\nCreate a vector store file batch.\n\n```php\n$response = $client->vectorStores()->batches()->create(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n    parameters: [\n        'file_ids' => [\n            'file-fUU0hFRuQ1GzhOweTNeJlCXG',\n        ],\n    ]\n);\n\n$response->id; // 'vsfb_123'\n$response->object; // 'vector_store.files_batch'\n$response->createdAt; // 1698107661\n$response->vectorStoreId; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n$response->status; // 'completed'\n$response->fileCounts->inProgress; // 1\n$response->fileCounts->completed; // 0\n$response->fileCounts->failed; // 0\n$response->fileCounts->cancelled; // 0\n$response->fileCounts->total; // 1\n\n$response->toArray(); // ['id' => 'vsfb_123', ...]\n```\n\n#### `retrieve`\n\nRetrieves a vector store file batch.\n\n```php\n$response = $client->vectorStores()->batches()->retrieve(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n    fileBatchId: 'vsfb_123',\n);\n\n$response->id; // 'vsfb_123'\n$response->object; // 'vector_store.files_batch'\n$response->createdAt; // 1698107661\n$response->vectorStoreId; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n$response->status; // 'completed'\n$response->fileCounts->inProgress; // 1\n$response->fileCounts->completed; // 0\n$response->fileCounts->failed; // 0\n$response->fileCounts->cancelled; // 0\n$response->fileCounts->total; // 1\n\n$response->toArray(); // ['id' => 'vsfb_123', ...]\n```\n\n#### `cancel`\n\nCancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.\n\n```php\n$response = $client->vectorStores()->batches()->cancel(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n    fileBatchId: 'vsfb_123',\n);\n\n$response->id; // 'vsfb_123'\n$response->object; // 'vector_store.files_batch'\n$response->createdAt; // 1698107661\n$response->vectorStoreId; // 'vs_vzfQhlTWVUl38QGqQAoQjeDF'\n$response->status; // 'cancelling'\n$response->fileCounts->inProgress; // 1\n$response->fileCounts->completed; // 0\n$response->fileCounts->failed; // 0\n$response->fileCounts->cancelled; // 0\n$response->fileCounts->total; // 1\n\n$response->toArray(); // ['id' => 'vsfb_123', ...]\n```\n\n#### `list`\n\nReturns a list of vector store files.\n\n```php\n$response = $client->vectorStores()->batches()->listFiles(\n    vectorStoreId: 'vs_vzfQhlTWVUl38QGqQAoQjeDF',\n    fileBatchId: 'vsfb_123',\n    parameters: [\n        'limit' => 10,\n    ],\n);\n\n$response->object; // 'list'\n$response->firstId; // 'file-fUU0hFRuQ1GzhOweTNeJlCXG'\n$response->lastId; // 'file-D5DPOgBxSoEBTmYBgUESdPpa'\n$response->hasMore; // true\n\nforeach ($response->data as $result) {\n    $result->id; // 'file-fUU0hFRuQ1GzhOweTNeJlCXG'\n    // ...\n}\n\n$response->toArray(); // ['object' => 'list', ...]]\n```\n\n### `Edits` Resource (deprecated)\n\n> OpenAI has deprecated the Edits API and will stop working by January 4, 2024.\n> https://openai.com/blog/gpt-4-api-general-availability#deprecation-of-the-edits-api\n\n#### `create`\n\nCreates a new edit for the provided input, instruction, and parameters.\n\n```php\n$response = $client->edits()->create([\n    'model' => 'text-davinci-edit-001',\n    'input' => 'What day of the wek is it?',\n    'instruction' => 'Fix the spelling mistakes',\n]);\n\n$response->object; // 'edit'\n$response->created; // 1589478378\n\nforeach ($response->choices as $choice) {\n    $choice->text; // 'What day of the week is it?'\n    $choice->index; // 0\n}\n\n$response->usage->promptTokens; // 25,\n$response->usage->completionTokens; // 32,\n$response->usage->totalTokens; // 57\n\n$response->toArray(); // ['object' => 'edit', ...]\n```\n\n## Meta Information\n\nOn all response objects you can access the meta information returned by the API via the `meta()` method.\n\n```php\n$response = $client->completions()->create([\n    'model' => 'gpt-3.5-turbo-instruct',\n    'prompt' => 'Say this is a test',\n]);\n\n$meta = $response->meta();\n\n$meta->requestId; // '574a03e2faaf4e9fd703958e4ddc66f5'\n\n$meta->openai->model; // 'gpt-3.5-turbo-instruct'\n$meta->openai->organization; // 'org-jwe45798ASN82s'\n$meta->openai->version; // '2020-10-01'\n$meta->openai->processingMs; // 425\n\n$meta->requestLimit->limit; // 3000\n$meta->requestLimit->remaining; // 2999\n$meta->requestLimit->reset; // '20ms'\n\n$meta->tokenLimit->limit; // 250000\n$meta->tokenLimit->remaining; // 249984\n$meta->tokenLimit->reset; // '3ms'\n```\n\nThe `toArray()` method returns the meta information in the form originally returned by the API.\n\n```php\n$meta->toArray();\n\n// [ \n//   'x-request-id' => '574a03e2faaf4e9fd703958e4ddc66f5',\n//   'openai-model' => 'gpt-3.5-turbo-instruct',\n//   'openai-organization' => 'org-jwe45798ASN82s',\n//   'openai-processing-ms' => 402,\n//   'openai-version' => '2020-10-01',\n//   'x-ratelimit-limit-requests' => 3000,\n//   'x-ratelimit-remaining-requests' => 2999,\n//   'x-ratelimit-reset-requests' => '20ms',\n//   'x-ratelimit-limit-tokens' => 250000,\n//   'x-ratelimit-remaining-tokens' => 249983,\n//   'x-ratelimit-reset-tokens' => '3ms',\n// ]\n```\n\nOn streaming responses you can access the meta information on the reponse stream object.\n\n```php\n$stream = $client->completions()->createStreamed([\n    'model' => 'gpt-3.5-turbo-instruct',\n    'prompt' => 'Say this is a test',\n]);\n    \n$stream->meta(); \n```\n\nFor further details about the rates limits and what to do if you hit them visit the [OpenAI documentation](https://platform.openai.com/docs/guides/rate-limits/rate-limits).\n\n## Troubleshooting\n\n### Timeout\n\nYou may run into a timeout when sending requests to the API. The default timeout depends on the HTTP client used.\n\nYou can increase the timeout by configuring the HTTP client and passing in to the factory.\n\nThis example illustrates how to increase the timeout using Guzzle.\n```php\nOpenAI::factory()\n    ->withApiKey($apiKey)\n    ->withOrganization($organization)\n    ->withHttpClient(new \\GuzzleHttp\\Client(['timeout' => $timeout]))\n    ->make();\n```\n\n## Testing\n\nThe package provides a fake implementation of the `OpenAI\\Client` class that allows you to fake the API responses.\n\nTo test your code ensure you swap the `OpenAI\\Client` class with the `OpenAI\\Testing\\ClientFake` class in your test case.\n\nThe fake responses are returned in the order they are provided while creating the fake client.\n\nAll responses are having a `fake()` method that allows you to easily create a response object by only providing the parameters relevant for your test case.\n\n```php\nuse OpenAI\\Testing\\ClientFake;\nuse OpenAI\\Responses\\Completions\\CreateResponse;\n\n$client = new ClientFake([\n    CreateResponse::fake([\n        'choices' => [\n            [\n                'text' => 'awesome!',\n            ],\n        ],\n    ]),\n]);\n\n$completion = $client->completions()->create([\n    'model' => 'gpt-3.5-turbo-instruct',\n    'prompt' => 'PHP is ',\n]);\n\nexpect($completion['choices'][0]['text'])->toBe('awesome!');\n```\n\nIn case of a streamed response you can optionally provide a resource holding the fake response data.\n\n```php\nuse OpenAI\\Testing\\ClientFake;\nuse OpenAI\\Responses\\Chat\\CreateStreamedResponse;\n\n$client = new ClientFake([\n    CreateStreamedResponse::fake(fopen('file.txt', 'r'););\n]);\n\n$completion = $client->chat()->createStreamed([\n        'model' => 'gpt-3.5-turbo',\n        'messages' => [\n            ['role' => 'user', 'content' => 'Hello!'],\n        ],\n]);\n\nexpect($response->getIterator()->current())\n        ->id->toBe('chatcmpl-6yo21W6LVo8Tw2yBf7aGf2g17IeIl');\n```\n\nAfter the requests have been sent there are various methods to ensure that the expected requests were sent:\n\n```php\n// assert completion create request was sent\n$client->assertSent(Completions::class, function (string $method, array $parameters): bool {\n    return $method === 'create' &&\n        $parameters['model'] === 'gpt-3.5-turbo-instruct' &&\n        $parameters['prompt'] === 'PHP is ';\n});\n// or\n$client->completions()->assertSent(function (string $method, array $parameters): bool {\n    // ...\n});\n\n// assert 2 completion create requests were sent\n$client->assertSent(Completions::class, 2);\n\n// assert no completion create requests were sent\n$client->assertNotSent(Completions::class);\n// or\n$client->completions()->assertNotSent();\n\n// assert no requests were sent\n$client->assertNothingSent();\n```\n\nTo write tests expecting the API request to fail you can provide a `Throwable` object as the response.\n\n```php\n$client = new ClientFake([\n    new \\OpenAI\\Exceptions\\ErrorException([\n        'message' => 'The model `gpt-1` does not exist',\n        'type' => 'invalid_request_error',\n        'code' => null,\n    ])\n]);\n\n// the `ErrorException` will be thrown\n$completion = $client->completions()->create([\n    'model' => 'gpt-3.5-turbo-instruct',\n    'prompt' => 'PHP is ',\n]);\n```\n\n## Services\n\n### Azure\n\nIn order to use the Azure OpenAI Service, it is necessary to construct the client manually using the factory.\n\n```php\n$client = OpenAI::factory()\n    ->withBaseUri('{your-resource-name}.openai.azure.com/openai/deployments/{deployment-id}')\n    ->withHttpHeader('api-key', '{your-api-key}')\n    ->withQueryParam('api-version', '{version}')\n    ->make();\n```\n\nTo use Azure, you must deploy a model, identified by the {deployment-id}, which is already incorporated into the API calls. As a result, you do not have to provide the model during the calls since it is included in the `BaseUri`.\n\nTherefore, a basic sample completion call would be:\n\n```php\n$result = $client->completions()->create([\n    'prompt' => 'PHP is'\n]);\n``` \n\n---\n\nOpenAI PHP is an open-sourced software licensed under the **[MIT license](https://opensource.org/licenses/MIT)**.\n"
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.107421875,
          "content": "{\n    \"name\": \"openai-php/client\",\n    \"description\": \"OpenAI PHP is a supercharged PHP API client that allows you to interact with the Open AI API\",\n    \"keywords\": [\"php\", \"openai\", \"sdk\", \"codex\", \"GPT-3\", \"DALL-E\", \"api\", \"client\", \"natural\", \"language\", \"processing\"],\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Nuno Maduro\",\n            \"email\": \"enunomaduro@gmail.com\"\n        },\n        {\n            \"name\": \"Sandro Gehri\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.1.0\",\n        \"php-http/discovery\": \"^1.20.0\",\n        \"php-http/multipart-stream-builder\": \"^1.4.2\",\n        \"psr/http-client\": \"^1.0.3\",\n        \"psr/http-client-implementation\": \"^1.0.1\",\n        \"psr/http-factory-implementation\": \"*\",\n        \"psr/http-message\": \"^1.1.0|^2.0.0\"\n    },\n    \"require-dev\": {\n        \"guzzlehttp/guzzle\": \"^7.9.2\",\n        \"guzzlehttp/psr7\": \"^2.7.0\",\n        \"laravel/pint\": \"^1.18.1\",\n        \"mockery/mockery\": \"^1.6.12\",\n        \"nunomaduro/collision\": \"^7.11.0|^8.5.0\",\n        \"pestphp/pest\": \"^2.36.0|^3.5.0\",\n        \"pestphp/pest-plugin-arch\": \"^2.7|^3.0\",\n        \"pestphp/pest-plugin-type-coverage\": \"^2.8.7|^3.1.0\",\n        \"phpstan/phpstan\": \"^1.12.7\",\n        \"symfony/var-dumper\": \"^6.4.11|^7.1.5\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"OpenAI\\\\\": \"src/\"\n        },\n        \"files\": [\n            \"src/OpenAI.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests/\"\n        }\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"config\": {\n        \"sort-packages\": true,\n        \"preferred-install\": \"dist\",\n        \"allow-plugins\": {\n            \"pestphp/pest-plugin\": true,\n            \"php-http/discovery\": false\n        }\n    },\n    \"scripts\": {\n        \"lint\": \"pint -v\",\n        \"test:lint\": \"pint --test -v\",\n        \"test:types\": \"phpstan analyse --ansi\",\n        \"test:type-coverage\": \"pest --type-coverage --min=100\",\n        \"test:unit\": \"pest --colors=always\",\n        \"test\": [\n            \"@test:lint\",\n            \"@test:types\",\n            \"@test:type-coverage\",\n            \"@test:unit\"\n        ]\n    }\n}\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.1572265625,
          "content": "parameters:\n    level: max\n    paths:\n        - src\n    excludePaths:\n            analyse:\n                - src/Testing\n\n    reportUnmatchedIgnoredErrors: true\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.4814453125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.0/phpunit.xsd\"\n         colors=\"true\"\n         cacheDirectory=\".phpunit.cache\">\n  <source>\n    <include>\n      <directory suffix=\".php\">./src</directory>\n    </include>\n  </source>\n  <testsuites>\n    <testsuite name=\"default\">\n      <directory suffix=\".php\">./tests</directory>\n    </testsuite>\n  </testsuites>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}