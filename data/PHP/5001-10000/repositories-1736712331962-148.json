{
  "metadata": {
    "timestamp": 1736712331962,
    "page": 148,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vinkla/hashids",
      "stars": 5316,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.228515625,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.yml]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.228515625,
          "content": "* text=auto eol=lf\n\n/tests export-ignore\n/.github export-ignore\n/.editorconfig export-ignore\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/phpunit.xml.dist export-ignore\n/CHANGELOG.md export-ignore\n/README.md export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0322265625,
          "content": "composer.lock\nphpunit.xml\nvendor\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.04296875,
          "content": "# CHANGELOG\n\n## 5.0.2\n\n- Updated PHPDoc types\n\n## 5.0.1\n\n- Updated PHPDoc types for encode method\n\n## 5.0.0\n\n- Added property type declarations\n- Replaced HashidsException with InvalidArgumentException\n- Removed PHP 7 and 8.0 support\n- Renamed Bc class to BCMath\n\n## 4.1.0\n\n- Added PHP 8.0 support\n\n## 4.0.0\n\n- Added UTF-8 support (thanks [@bonfante](https://github.com/ivanakimov/hashids.php/pull/128))\n- Removed PHP 7.1 support\n\n## 3.0.0\n\n- Added BC and GMP math classes (thanks [@jwpage](https://github.com/ivanakimov/hashids.php/pull/106))\n- Update and optimize alphabet shuffling (thanks [@jwpage](https://github.com/ivanakimov/hashids.php/pull/105))\n- Removed PHP 5.0 support ([#107](https://github.com/ivanakimov/hashids.php/pull/107))\n\n## 2.0.4\n\n- Remove ext-bcmath requirement ([#91](https://github.com/ivanakimov/hashids.php/pull/91))\n\n## 2.0.3\n\n- Implemented unhash using Horner's method (thanks [@jkramarz](https://github.com/ivanakimov/hashids.php/pull/80))\n\n## 2.0.2\n\n- Fix bug related to bc math accuracy (thanks [@jkramarz](https://github.com/ivanakimov/hashids.php/pull/79))\n\n## 2.0.1\n\n- Fix bug related to big numbers (thanks [@jkramarz](https://github.com/ivanakimov/hashids.php/pull/75))\n\n## 2.0.0\n\n- Added .editorconfig file\n- Added Codecov coverage\n- Added StyleCI integration\n- Dropped HHVM support\n- Dropped PHP 5.3 - 5.5 support\n- Updated file structure\n- Updated how separators are generated\n- Updated test suite\n\n## 1.0.6\n\n- `CHANGELOG` moved to its own file (thanks [@vinkla](https://github.com/ivanakimov/hashids.php/pull/41))\n- `.gitattributes` added (thanks [@vinkla](https://github.com/ivanakimov/hashids.php/pull/40))\n- autoload with PSR-4 (thanks [@vinkla and @GrahamCampbell](https://github.com/ivanakimov/hashids.php/pull/43))\n- `LICENSE` moved to its own file (thanks [@vinkla](https://github.com/ivanakimov/hashids.php/pull/44))\n- `.gitignore` file simplified (thanks [@vinkla](https://github.com/ivanakimov/hashids.php/pull/45))\n- random `README` cleanups (thanks [@vinkla](https://github.com/ivanakimov/hashids.php/pull/46))\n- applied PSR-1 and PSR-2 to the code (thanks [@pablofmorales](https://github.com/ivanakimov/hashids.php/pull/51))\n- typo in custom parameters example (thanks [@McMillanThomas](https://github.com/ivanakimov/hashids.php/pull/52))\n- testing against PHP 7.0 now (thanks [@vinkla](https://github.com/ivanakimov/hashids.php/pull/54))\n\n## 1.0.5\n\n- bug fix for passing empty array to `encode` (thanks [@bpahan](https://github.com/ivanakimov/hashids.php/issues/32))\n\n## 1.0.3 & 1.0.4\n\n- adjusting examples (thanks [@Trismegiste](https://github.com/ivanakimov/hashids.php/pull/28))\n- proper version bump in `const VERSION`\n\n## 1.0.2\n\n- PSR-2 cleanup + interface changes (thanks [@Trismegiste](https://github.com/ivanakimov/hashids.php/pull/23))\n- `encode()` can accept array of integers (thanks [@leunggamciu](https://github.com/ivanakimov/hashids.php/pull/24))\n\n## 1.0.1\n\n- bug fix for `encode_hex()` (thanks [@leihog](https://github.com/ivanakimov/hashids.php/pull/20))\n- unit test for `encode_hex()/decode_hex()`\n\n## 1.0.0\n\n- Several public functions are renamed to be more appropriate:\n    - Function `encrypt()` changed to `encode()`\n    - Function `decrypt()` changed to `decode()`\n    - Function `encrypt_hex()` changed to `encode_hex()`\n    - Function `decrypt_hex()` changed to `decode_hex()`\n\n    Hashids was designed to encode integers, primary ids at most. We've had several requests to encrypt sensitive data with Hashids and this is the wrong algorithm for that. So to encourage more appropriate use, `encrypt/decrypt` is being \"downgraded\" to `encode/decode`.\n\n- Version tag added: `1.0`\n- `README.md` updated\n\n## 0.3.1\n\n- Added *encrypt_hex()* and *decrypt_hex()* support\n- Minor: Relaxed integer check in *encrypt()* function (can now pass strings of numbers)\n\n## 0.3.0\n\n> **Warning** Hashes change in this version\n\n- Bug fix: better handling of big numbers: [https://github.com/ivanakimov/hashids.php/issues/3](https://github.com/ivanakimov/hashids.php/issues/3) (thanks [@tobsn](https://github.com/tobsn) and [@miquelfire](https://github.com/miquelfire))\n- Bug fix: exception throwing in constructor\n- Default maximum number is set to 1 billion: 1,000,000,000. Unless you have [GNU Multiple Precision](https://www.php.net/manual/en/book.gmp.php) or [BCMath Arbitrary Precision Mathematics](https://www.php.net/manual/en/book.bc.php) library installed - then `PHP_INT_MAX` is used.\n- Cleanup: private variables use underscores\n\n## 0.2.1\n\n- General directory cleanup + improvements\n- Now only one library file for both PHP 5.3 and PHP 5.4\n- Constants uppercased\n- Namespace `Hashids` added to library class\n\n## 0.2.0\n\n> **Warning** Hashes change in this version\n\n- Overall approximately **4x** faster\n- Consistent shuffle function uses slightly modified version of [Fisherâ€“Yates algorithm](https://en.m.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm)\n- Generate large hash strings faster (more than 1000 chars)\n- When using _minimum hash length_ parameter, hash character disorder has been improved\n- Basic English curse words will now be avoided even with custom alphabet\n- Class name changed from `hashids` to `Hashids`\n- New unit tests with [PHPUnit](https://github.com/sebastianbergmann/phpunit/) (requires latest PHP)\n- Composer package at packagist: [https://packagist.org/packages/hashids/hashids](https://packagist.org/packages/hashids/hashids)\n- _Minor:_ a bit smaller code overall -- more motivation to port to other languages :P\n\n## 0.1.3\n\n> **Warning** Hashes change in this version\n\n- Updated default alphabet (thanks to [@speps](https://github.com/speps))\n- Constructor removes duplicate characters for default alphabet as well (thanks to [@speps](https://github.com/speps))\n\n## 0.1.2\n\n> **Warning** Hashes change in this version\n\n- Minimum hash length can now be specified\n- Added more randomness to hashes\n- Added unit tests\n- Added example files\n- Changed warnings that can be thrown\n- Renamed `encode/decode` to `encrypt/decrypt`\n- Consistent shuffle does not depend on md5 anymore\n- Speed improvements\n\n## 0.1.1\n\n- Speed improvements\n- Bug fixes\n\n## 0.1.0\n\n- First commit\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0380859375,
          "content": "MIT License\n\nCopyright (c) Ivan Akimov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.5380859375,
          "content": "[![hashids](https://raw.githubusercontent.com/hashids/hashids.github.io/master/public/img/hashids.gif \"Hashids\")](https://hashids.org/)\n\n[![Build Status](https://badgen.net/github/checks/vinkla/hashids?label=build&icon=github)](https://github.com/vinkla/hashids/actions)\n[![Monthly Downloads](https://badgen.net/packagist/dm/hashids/hashids)](https://packagist.org/packages/hashids/hashids/stats)\n[![Latest Version](https://badgen.net/packagist/v/hashids/hashids)](https://packagist.org/packages/hashids/hashids)\n\n**Hashids** is a small PHP library to generate YouTube-like ids from numbers. Use it when you don't want to expose your database numeric ids to users: [https://hashids.org/php](https://hashids.org/php)\n\n## Getting started\n\nRequire this package, with [Composer](https://getcomposer.org), in the root directory of your project.\n\n```bash\ncomposer require hashids/hashids\n```\n\nThen you can import the class into your application:\n\n```php\nuse Hashids\\Hashids;\n\n$hashids = new Hashids();\n\n$hashids->encode(1);\n```\n\n> **Note** Hashids require either [`bcmath`](https://secure.php.net/manual/en/book.bc.php) or [`gmp`](https://secure.php.net/manual/en/book.gmp.php) extension in order to work.\n\n## Quick Example\n\n```php\nuse Hashids\\Hashids;\n\n$hashids = new Hashids();\n\n$id = $hashids->encode(1, 2, 3); // o2fXhV\n$numbers = $hashids->decode($id); // [1, 2, 3]\n```\n\n## More Options\n\n#### A few more ways to pass input ids to the `encode()` function:\n\n```php\nuse Hashids\\Hashids;\n\n$hashids = new Hashids();\n\n$hashids->encode(1, 2, 3); // o2fXhV\n$hashids->encode([1, 2, 3]); // o2fXhV\n$hashids->encode('1', '2', '3'); // o2fXhV\n$hashids->encode(['1', '2', '3']); // o2fXhV\n```\n\n#### Making your output ids unique\n\nPass a project name to make your output ids unique:\n\n```php\nuse Hashids\\Hashids;\n\n$hashids = new Hashids('My Project');\n$hashids->encode(1, 2, 3); // Z4UrtW\n\n$hashids = new Hashids('My Other Project');\n$hashids->encode(1, 2, 3); // gPUasb\n```\n\n#### Use padding to make your output ids longer\n\nNote that output ids are only padded to fit **at least** a certain length. It doesn't mean that they will be *exactly* that length.\n\n```php\nuse Hashids\\Hashids;\n\n$hashids = new Hashids(); // no padding\n$hashids->encode(1); // jR\n\n$hashids = new Hashids('', 10); // pad to length 10\n$hashids->encode(1); // VolejRejNm\n```\n\n#### Using a custom alphabet\n\n```php\nuse Hashids\\Hashids;\n\n$hashids = new Hashids('', 0, 'abcdefghijklmnopqrstuvwxyz'); // all lowercase\n$hashids->encode(1, 2, 3); // mdfphx\n```\n\n#### Encode hex instead of numbers\n\nUseful if you want to encode [Mongo](https://www.mongodb.com)'s ObjectIds. Note that *there is no limit* on how large of a hex number you can pass (it does not have to be Mongo's ObjectId).\n\n```php\nuse Hashids\\Hashids;\n\n$hashids = new Hashids();\n\n$id = $hashids->encodeHex('507f1f77bcf86cd799439011'); // y42LW46J9luq3Xq9XMly\n$hex = $hashids->decodeHex($id); // 507f1f77bcf86cd799439011\n```\n\n## Pitfalls\n\n1. When decoding, output is always an array of numbers (even if you encoded only one number):\n\n\t```php\n\tuse Hashids\\Hashids;\n\n\t$hashids = new Hashids();\n\n\t$id = $hashids->encode(1);\n\n\t$hashids->decode($id); // [1]\n\t```\n\n2. Encoding negative numbers is not supported.\n3. If you pass bogus input to `encode()`, an empty string will be returned:\n\n\t```php\n\tuse Hashids\\Hashids;\n\n\t$hashids = new Hashids();\n\n\t$id = $hashids->encode('123a');\n\n\t$id === ''; // true\n\t```\n\n4. Do not use this library as a security measure. **Do not** encode sensitive data with it. Hashids is **not** an encryption library.\n\n# Randomness\n\nThe primary purpose of Hashids is to obfuscate numeric ids. It's **not** meant or tested to be used as a security or compression tool. Having said that, this algorithm does try to make these ids random and unpredictable:\n\nThere is no pattern shown when encoding multiple identical numbers (3 shown in the following example):\n\n```php\nuse Hashids\\Hashids;\n\n$hashids = new Hashids();\n\n$hashids->encode(5, 5, 5); // A6t1tQ\n```\n\nThe same is true when encoding a series of numbers vs. encoding them separately:\n\n```php\nuse Hashids\\Hashids;\n\n$hashids = new Hashids();\n\n$hashids->encode(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); // wpfLh9iwsqt0uyCEFjHM\n\n$hashids->encode(1); // jR\n$hashids->encode(2); // k5\n$hashids->encode(3); // l5\n$hashids->encode(4); // mO\n$hashids->encode(5); // nR\n```\n\n## Curse words! #$%@\n\nThis code was written with the intent of placing the output ids in visible places, like the URL. Therefore, the algorithm tries to avoid generating most common English curse words by generating ids that never have the following letters next to each other:\n\n```\nc, f, h, i, s, t, u\n```\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.326171875,
          "content": "{\n    \"name\": \"hashids/hashids\",\n    \"description\": \"Generate short, unique, non-sequential ids (like YouTube and Bitly) from numbers\",\n    \"license\": \"MIT\",\n    \"keywords\": [\n        \"bitly\",\n        \"decode\",\n        \"encode\",\n        \"hash\",\n        \"hashid\",\n        \"hashids\",\n        \"ids\",\n        \"obfuscate\",\n        \"youtube\"\n    ],\n    \"authors\": [\n        {\n            \"name\": \"Ivan Akimov\",\n            \"homepage\": \"https://github.com/4kimov\"\n        },\n        {\n            \"name\": \"Vincent Klaiber\",\n            \"homepage\": \"https://github.com/vinkla\"\n        }\n    ],\n    \"homepage\": \"https://hashids.org/php\",\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"ext-mbstring\": \"*\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^10.5|^11.2\"\n    },\n    \"suggest\": {\n        \"ext-bcmath\": \"Required to use BC Math arbitrary precision mathematics (*).\",\n        \"ext-gmp\": \"Required to use GNU multiple precision mathematics (*).\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"autoload\": {\n        \"psr-4\": {\n            \"Hashids\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Hashids\\\\Tests\\\\\": \"tests/\"\n        }\n    },\n    \"config\": {\n        \"preferred-install\": \"dist\"\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"5.0-dev\"\n        }\n    }\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.4814453125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bootstrap=\"vendor/autoload.php\" cacheResult=\"false\" colors=\"true\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/11.2/phpunit.xsd\">\n  <testsuites>\n    <testsuite name=\"Test Suite\">\n      <directory suffix=\"Test.php\">./tests</directory>\n    </testsuite>\n  </testsuites>\n  <source>\n    <include>\n      <directory suffix=\".php\">./src</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}