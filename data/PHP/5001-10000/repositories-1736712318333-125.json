{
  "metadata": {
    "timestamp": 1736712318333,
    "page": 125,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "doctrine/common",
      "stars": 5793,
      "defaultBranch": "3.5.x",
      "files": [
        {
          "name": ".doctrine-project.json",
          "type": "blob",
          "size": 1.3740234375,
          "content": "{\n    \"active\": true,\n    \"name\": \"Common\",\n    \"slug\": \"common\",\n    \"docsSlug\": \"doctrine-common\",\n    \"versions\": [\n        {\n            \"name\": \"3.5\",\n            \"branchName\": \"3.5.x\",\n            \"slug\": \"3.5\",\n            \"current\": true\n        },\n        {\n            \"name\": \"3.4\",\n            \"branchName\": \"3.4.x\",\n            \"slug\": \"3.4\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.3\",\n            \"branchName\": \"3.3.x\",\n            \"slug\": \"3.3\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.2\",\n            \"branchName\": \"3.2.x\",\n            \"slug\": \"3.2\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.1\",\n            \"branchName\": \"3.1.x\",\n            \"slug\": \"3.1\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.0\",\n            \"branchName\": \"3.0.x\",\n            \"slug\": \"3.0\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.13\",\n            \"branchName\": \"2.13.x\",\n            \"slug\": \"2.13\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.12\",\n            \"branchName\": \"2.12.x\",\n            \"slug\": \"2.12\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.11\",\n            \"branchName\": \"2.11\",\n            \"slug\": \"2.11\",\n            \"maintained\": false\n        }\n    ]\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.24609375,
          "content": "tests export-ignore\n.doctrine-project.json export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\n.github export-ignore\nphpunit.xml.dist export-ignore\n/phpcs.xml.dist export-ignore\n/phpstan.neon.dist export-ignore\n/psalm.xml export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.177734375,
          "content": "logs/\nreports/\ndist/\ntests/Common/Proxy/generated/\ncomposer.lock\nvendor/\ndoctrine-common-*.tar\ndoctrine-common-*.tar.gz\n/phpcs.xml\n/.phpcs-cache\n/phpstan.neon\n/.phpunit.result.cache\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "Copyright (c) 2006-2015 Doctrine Project\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.578125,
          "content": "# Doctrine Common\n\n[![Build Status](https://github.com/doctrine/common/workflows/Continuous%20Integration/badge.svg)](https://github.com/doctrine/common/actions)\n[![codecov](https://codecov.io/gh/doctrine/common/branch/3.1.x/graph/badge.svg)](https://codecov.io/gh/doctrine/common)\n\nThe Doctrine Common project is a library that provides extensions to core PHP functionality.\n\n## More resources:\n\n* [Website](https://www.doctrine-project.org/)\n* [Documentation](https://www.doctrine-project.org/projects/doctrine-common/en/current/)\n* [Downloads](https://github.com/doctrine/common/releases)\n"
        },
        {
          "name": "UPGRADE_TO_2_1",
          "type": "blob",
          "size": 2.0791015625,
          "content": "This document details all the possible changes that you should investigate when updating\nyour project from Doctrine Common 2.0.x to 2.1\n\n## AnnotationReader changes\n\nThe annotation reader was heavily refactored between 2.0 and 2.1-RC1. In theory the operation of the new reader should be backwards compatible, but it has to be setup differently to work that way:\n\n    $reader = new \\Doctrine\\Common\\Annotations\\AnnotationReader();\n    $reader->setDefaultAnnotationNamespace('Doctrine\\ORM\\Mapping\\\\');\n    // new code necessary starting here\n    $reader->setIgnoreNotImportedAnnotations(true);\n    $reader->setEnableParsePhpImports(false);\n    $reader = new \\Doctrine\\Common\\Annotations\\CachedReader(\n        new \\Doctrine\\Common\\Annotations\\IndexedReader($reader), new ArrayCache()\n    );\n\n## Annotation Base class or @Annotation\n\nBeginning after 2.1-RC2 you have to either extend ``Doctrine\\Common\\Annotations\\Annotation`` or add @Annotation to your annotations class-level docblock, otherwise the class will simply be ignored.\n\n## Removed methods on AnnotationReader\n\n* AnnotationReader::setAutoloadAnnotations()\n* AnnotationReader::getAutoloadAnnotations()\n* AnnotationReader::isAutoloadAnnotations()\n\n## AnnotationRegistry\n\nAutoloading through the PHP autoloader is removed from the 2.1 AnnotationReader. Instead you have to use the global AnnotationRegistry for loading purposes:\n\n    \\Doctrine\\Common\\Annotations\\AnnotationRegistry::registerFile($fileWithAnnotations);\n    \\Doctrine\\Common\\Annotations\\AnnotationRegistry::registerAutoloadNamespace($namespace, $dirs = null);\n    \\Doctrine\\Common\\Annotations\\AnnotationRegistry::registerAutoloadNamespaces($namespaces);\n    \\Doctrine\\Common\\Annotations\\AnnotationRegistry::registerLoader($callable);\n\nThe $callable for registering a loader accepts a class as first and only parameter and must try to silently autoload it. On success true has to be returned.\nThe registerAutoloadNamespace function registers a PSR-0 compatible silent autoloader for all classes with the given namespace in the given directories.\nIf null is passed as directory the include path will be used.\n\n"
        },
        {
          "name": "UPGRADE_TO_2_2",
          "type": "blob",
          "size": 2.3701171875,
          "content": "This document details all the possible changes that you should investigate when \nupdating your project from Doctrine Common 2.1 to 2.2:\n\n## Annotation Changes\n\n- AnnotationReader::setIgnoreNotImportedAnnotations has been removed, you need to \n  add ignore annotation names which are supposed to be ignored via\n  AnnotationReader::addGlobalIgnoredName\n  \n- AnnotationReader::setAutoloadAnnotations was deprecated by the AnnotationRegistry\n  in 2.1 and has been removed in 2.2\n\n- AnnotationReader::setEnableParsePhpImports was added to ease transition to the new\n  annotation mechanism in 2.1 and is removed in 2.2\n\n- AnnotationReader::isParsePhpImportsEnabled is removed (see above)\n\n- AnnotationReader::setDefaultAnnotationNamespace was deprecated in favor of explicit\n  configuration in 2.1 and will be removed in 2.2 (for isolated projects where you\n  have full-control over _all_ available annotations, we offer a dedicated reader\n  class ``SimpleAnnotationReader``)\n\n- AnnotationReader::setAnnotationCreationFunction was deprecated in 2.1 and will be\n  removed in 2.2. We only offer two creation mechanisms which cannot be changed\n  anymore to allow the same reader instance to work with all annotations regardless\n  of which library they are coming from.\n  \n- AnnotationReader::setAnnotationNamespaceAlias was deprecated in 2.1 and will be\n  removed in 2.2 (see setDefaultAnnotationNamespace)\n\n- If you use a class as annotation which has not the @Annotation marker in it's \n  class block, we will now throw an exception instead of silently ignoring it. You\n  can however still achieve the previous behavior using the @IgnoreAnnotation, or\n  AnnotationReader::addGlobalIgnoredName (the exception message will contain detailed\n  instructions when you run into this problem).\n\n## Cache Changes\n  \n- Renamed old AbstractCache to CacheProvider\n\n- Dropped the support to the following functions of all cache providers:\n\n - CacheProvider::deleteByWildcard\n\n - CacheProvider::deleteByRegEx\n\n - CacheProvider::deleteByPrefix\n\n - CacheProvider::deleteBySuffix\n\n- CacheProvider::deleteAll will not remove ALL entries, it will only mark them as invalid\n\n- CacheProvider::flushAll will remove ALL entries, namespaced or not\n\n- Added support to MemcachedCache\n\n- Added support to WincacheCache\n\n## ClassLoader Changes\n\n- ClassLoader::fileExistsInIncludePath() no longer exists. Use the native stream_resolve_include_path() PHP function"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.685546875,
          "content": "{\n    \"name\": \"doctrine/common\",\n    \"type\": \"library\",\n    \"description\": \"PHP Doctrine Common project is a library that provides additional functionality that other Doctrine projects depend on such as better reflection support, proxies and much more.\",\n    \"keywords\": [\n        \"php\",\n        \"common\",\n        \"doctrine\"\n    ],\n    \"homepage\": \"https://www.doctrine-project.org/projects/common.html\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\"name\": \"Guilherme Blanco\", \"email\": \"guilhermeblanco@gmail.com\"},\n        {\"name\": \"Roman Borschel\", \"email\": \"roman@code-factory.org\"},\n        {\"name\": \"Benjamin Eberlei\", \"email\": \"kontakt@beberlei.de\"},\n        {\"name\": \"Jonathan Wage\", \"email\": \"jonwage@gmail.com\"},\n        {\"name\": \"Johannes Schmitt\", \"email\": \"schmittjoh@gmail.com\"},\n        {\"name\": \"Marco Pivetta\", \"email\": \"ocramius@gmail.com\"}\n    ],\n    \"require\": {\n        \"php\": \"^7.1 || ^8.0\",\n        \"doctrine/persistence\": \"^2.0 || ^3.0 || ^4.0\"\n    },\n    \"require-dev\": {\n        \"doctrine/collections\": \"^1\",\n        \"phpstan/phpstan\": \"^1.4.1\",\n        \"phpstan/phpstan-phpunit\": \"^1\",\n        \"phpunit/phpunit\": \"^7.5.20 || ^8.5 || ^9.0\",\n        \"doctrine/coding-standard\": \"^9.0 || ^10.0\",\n        \"squizlabs/php_codesniffer\": \"^3.0\",\n        \"symfony/phpunit-bridge\": \"^6.1\",\n        \"vimeo/psalm\": \"^4.4\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Doctrine\\\\Common\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Doctrine\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"dealerdirect/phpcodesniffer-composer-installer\": true,\n            \"composer/package-versions-deprecated\": true\n        }\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpcs.xml.dist",
          "type": "blob",
          "size": 2.78515625,
          "content": "<?xml version=\"1.0\"?>\n<ruleset>\n    <arg name=\"basepath\" value=\".\"/>\n    <arg name=\"extensions\" value=\"php\"/>\n    <arg name=\"parallel\" value=\"80\"/>\n    <arg name=\"cache\" value=\".phpcs-cache\"/>\n    <arg name=\"colors\" />\n\n    <config name=\"php_version\" value=\"70100\"/>\n\n    <!-- Ignore warnings and show progress of the run -->\n    <arg value=\"np\"/>\n\n    <file>src</file>\n    <file>tests</file>\n\n    <exclude-pattern>tests/Common/Proxy/*</exclude-pattern>\n    <exclude-pattern>tests/Common/ClassLoaderTest/*</exclude-pattern>\n    <exclude-pattern>tests/Common/Util/TestAsset/*</exclude-pattern>\n\n    <rule ref=\"Doctrine\">\n        <exclude name=\"SlevomatCodingStandard.TypeHints.DeclareStrictTypes\"/>\n        <exclude name=\"SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint\"/>\n        <exclude name=\"SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint\"/>\n        <exclude name=\"SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly.ReferencedGeneralException\"/>\n        <exclude name=\"SlevomatCodingStandard.ControlStructures.EarlyExit\"/>\n        <exclude name=\"SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming\"/>\n        <exclude name=\"SlevomatCodingStandard.Classes.SuperfluousExceptionNaming\"/>\n        <exclude name=\"Squiz.NamingConventions.ValidVariableName.MemberNotCamelCaps\"/>\n    </rule>\n\n    <rule ref=\"Squiz.Classes.ClassFileName.NoMatch\">\n        <exclude-pattern>tests/Common/Util/ClassUtilsTest.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.Commenting.RequireOneLineDocComment.MultiLineDocComment\">\n        <!-- This sniff produces annotations that PHPUnit 7 does not understand. -->\n        <exclude-pattern>tests</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Squiz.Classes.ClassFileName.NoMatch\">\n        <exclude-pattern>tests/Common/Util/ClassUtilsTest.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"PSR1.Classes.ClassDeclaration.MultipleClasses\">\n        <exclude-pattern>tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"PSR1.Classes.ClassDeclaration.MissingNamespace\">\n        <exclude-pattern>tests/Common/ClassLoaderTest/*.class.php</exclude-pattern>\n    </rule>\n    <rule ref=\"Squiz.Classes.ValidClassName.NotCamelCaps\">\n        <exclude-pattern>tests/Common/Util/ClassUtilsTest.php</exclude-pattern>\n        <exclude-pattern>tests/Common/ClassLoaderTest/*.class.php</exclude-pattern>\n    </rule>\n    <rule ref=\"PEAR.Functions.ValidDefaultValue.NotAtEnd\">\n        <exclude-pattern>tests/Common/Proxy/*HintClass.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Squiz.Classes.ClassFileName.NoMatch\">\n        <exclude-pattern>tests/*</exclude-pattern>\n    </rule>\n    <rule ref=\"Squiz.Commenting.FunctionComment.InvalidNoReturn\">\n        <exclude-pattern>tests/Common/Proxy/InvalidReturnTypeClass.php</exclude-pattern>\n    </rule>\n</ruleset>\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 2.5244140625,
          "content": "parameters:\n    phpVersion: 80200\n    level: 3\n    paths:\n        - src\n        - tests\n    excludePaths:\n        - tests/Common/Proxy/InvalidReturnTypeClass.php\n        - tests/Common/Proxy/InvalidTypeHintClass.php\n        - tests/Common/Proxy/LazyLoadableObjectWithTypedProperties.php\n        - tests/Common/Proxy/MagicIssetClassWithInteger.php\n        - tests/Common/Proxy/NullableNonOptionalHintClass.php\n        - tests/Common/Proxy/PHP81NeverType.php\n        - tests/Common/Proxy/PHP81IntersectionTypes.php\n        - tests/Common/Proxy/Php8UnionTypes.php\n        - tests/Common/Proxy/Php8StaticType.php\n        - tests/Common/Proxy/ProxyGeneratorTest.php\n        - tests/Common/Proxy/ProxyLogicTypedPropertiesTest.php\n        - tests/Common/Proxy/SerializedClass.php\n        - tests/Common/Proxy/VariadicTypeHintClass.php\n        - tests/Common/Proxy/Php71NullableDefaultedNonOptionalHintClass.php\n        - tests/Common/Proxy/generated\n    ignoreErrors:\n        - '#Access to an undefined property Doctrine\\\\Common\\\\Proxy\\\\Proxy::\\$publicField#'\n        -\n            message: '#^Result of method Doctrine\\\\Tests\\\\Common\\\\Proxy\\\\LazyLoadableObjectWithVoid::(adding|incrementing)AndReturningVoid\\(\\) \\(void\\) is used\\.$#'\n            path: 'tests/Common/Proxy/ProxyLogicVoidReturnTypeTest.php'\n        -\n            message: '#.*LazyLoadableObject.*#'\n            path: 'tests/Common/Proxy/ProxyLogicTest.php'\n        -\n            message: '#^Instantiated class Doctrine\\\\Tests\\\\Common\\\\ProxyProxy\\\\__CG__\\\\Doctrine\\\\Tests\\\\Common\\\\Proxy\\\\.* not found.$#'\n            path: 'tests/Common/Proxy/ProxyLogicTest.php'\n        -\n            message: '#^Instantiated class Doctrine\\\\Tests\\\\Common\\\\ProxyProxy\\\\__CG__\\\\Doctrine\\\\Tests\\\\Common\\\\Proxy\\\\.* not found.$#'\n            path: 'tests/Common/Proxy/ProxyLogicVoidReturnTypeTest.php'\n        -\n            message: '#^Method Doctrine\\\\Tests\\\\Common\\\\Proxy\\\\MagicIssetClassWithInteger::__isset\\(\\) should return bool but returns int\\.$#'\n            path: 'tests/Common/Proxy/MagicIssetClassWithInteger.php'\n        -\n            message: '#^Access to an undefined property Doctrine\\\\Tests\\\\Common\\\\Proxy\\\\MagicGetByRefClass\\:\\:\\$nonExisting\\.$#'\n            path: 'tests/Common/Proxy/ProxyMagicMethodsTest.php'\n\n        -\n            message: \"#^Class Doctrine\\\\\\\\Tests\\\\\\\\Common\\\\\\\\Proxy\\\\\\\\MagicIssetClassWithInteger not found\\\\.$#\"\n            count: 1\n            path: tests/Common/Proxy/ProxyMagicMethodsTest.php\nincludes:\n    - vendor/phpstan/phpstan-phpunit/extension.neon\n    - vendor/phpstan/phpstan-phpunit/rules.neon\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.55859375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n         colors=\"true\"\n         beStrictAboutOutputDuringTests=\"true\"\n         beStrictAboutTodoAnnotatedTests=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"Doctrine Common Test Suite\">\n            <directory>./tests</directory>\n        </testsuite>\n    </testsuites>\n\n    <filter>\n        <whitelist>\n            <directory>./src</directory>\n        </whitelist>\n    </filter>\n</phpunit>\n"
        },
        {
          "name": "psalm.xml",
          "type": "blob",
          "size": 0.470703125,
          "content": "<?xml version=\"1.0\"?>\n<psalm\n    errorLevel=\"8\"\n    resolveFromConfigFile=\"true\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"https://getpsalm.org/schema/config\"\n    xsi:schemaLocation=\"https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd\"\n    phpVersion=\"8.1\"\n>\n    <projectFiles>\n        <directory name=\"src\" />\n        <ignoreFiles>\n            <file name=\"src/Proxy/ProxyGenerator.php\" />\n        </ignoreFiles>\n    </projectFiles>\n</psalm>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}