{
  "metadata": {
    "timestamp": 1736712313835,
    "page": 119,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nextcloud/all-in-one",
      "stars": 5916,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01171875,
          "content": "* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.23828125,
          "content": ".DS_Store\n.idea/\n*.iml\n\n/php/data/*\n/php/session/*\n!/php/data/.gitkeep\n!/php/session/.gitkeep\n/php/vendor\n\n/manual-install/*.conf\n!/manual-install/sample.conf\n/manual-install/docker-compose.yml\n/manual-install/compose.yaml\n/manual-install/.env\n"
        },
        {
          "name": "Containers",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 33.7138671875,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "community-containers",
          "type": "tree",
          "content": null
        },
        {
          "name": "compose.yaml",
          "type": "blob",
          "size": 7.9091796875,
          "content": "services:\n  nextcloud-aio-mastercontainer:\n    image: nextcloud/all-in-one:latest\n    init: true\n    restart: always\n    container_name: nextcloud-aio-mastercontainer # This line is not allowed to be changed as otherwise AIO will not work correctly\n    volumes:\n      - nextcloud_aio_mastercontainer:/mnt/docker-aio-config # This line is not allowed to be changed as otherwise the built-in backup solution will not work\n      - /var/run/docker.sock:/var/run/docker.sock:ro # May be changed on macOS, Windows or docker rootless. See the applicable documentation. If adjusting, don't forget to also set 'WATCHTOWER_DOCKER_SOCKET_PATH'!\n    network_mode: bridge # add to the same network as docker run would do\n    ports:\n      - 80:80 # Can be removed when running behind a web server or reverse proxy (like Apache, Nginx, Caddy, Cloudflare Tunnel and else). See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md\n      - 8080:8080\n      - 8443:8443 # Can be removed when running behind a web server or reverse proxy (like Apache, Nginx, Caddy, Cloudflare Tunnel and else). See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md\n    # environment: # Is needed when using any of the options below\n      # AIO_DISABLE_BACKUP_SECTION: false # Setting this to true allows to hide the backup section in the AIO interface. See https://github.com/nextcloud/all-in-one#how-to-disable-the-backup-section\n      # AIO_COMMUNITY_CONTAINERS: # With this variable, you can add community containers very easily. See https://github.com/nextcloud/all-in-one/tree/main/community-containers#community-containers\n      # APACHE_PORT: 11000 # Is needed when running behind a web server or reverse proxy (like Apache, Nginx, Caddy, Cloudflare Tunnel and else). See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md\n      # APACHE_IP_BINDING: 127.0.0.1 # Should be set when running behind a web server or reverse proxy (like Apache, Nginx, Caddy, Cloudflare Tunnel and else) that is running on the same host. See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md\n      # APACHE_ADDITIONAL_NETWORK: frontend_net # (Optional) Connect the apache container to an additional docker network. Needed when behind a web server or reverse proxy (like Apache, Nginx, Caddy, Cloudflare Tunnel and else) running in a different docker network on same server. See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md\n      # BORG_RETENTION_POLICY: --keep-within=7d --keep-weekly=4 --keep-monthly=6 # Allows to adjust borgs retention policy. See https://github.com/nextcloud/all-in-one#how-to-adjust-borgs-retention-policy\n      # COLLABORA_SECCOMP_DISABLED: false # Setting this to true allows to disable Collabora's Seccomp feature. See https://github.com/nextcloud/all-in-one#how-to-disable-collaboras-seccomp-feature\n      # NEXTCLOUD_DATADIR: /mnt/ncdata # Allows to set the host directory for Nextcloud's datadir. ⚠️⚠️⚠️ Warning: do not set or adjust this value after the initial Nextcloud installation is done! See https://github.com/nextcloud/all-in-one#how-to-change-the-default-location-of-nextclouds-datadir\n      # NEXTCLOUD_MOUNT: /mnt/ # Allows the Nextcloud container to access the chosen directory on the host. See https://github.com/nextcloud/all-in-one#how-to-allow-the-nextcloud-container-to-access-directories-on-the-host\n      # NEXTCLOUD_UPLOAD_LIMIT: 16G # Can be adjusted if you need more. See https://github.com/nextcloud/all-in-one#how-to-adjust-the-upload-limit-for-nextcloud\n      # NEXTCLOUD_MAX_TIME: 3600 # Can be adjusted if you need more. See https://github.com/nextcloud/all-in-one#how-to-adjust-the-max-execution-time-for-nextcloud\n      # NEXTCLOUD_MEMORY_LIMIT: 512M # Can be adjusted if you need more. See https://github.com/nextcloud/all-in-one#how-to-adjust-the-php-memory-limit-for-nextcloud\n      # NEXTCLOUD_TRUSTED_CACERTS_DIR: /path/to/my/cacerts # CA certificates in this directory will be trusted by the OS of the nextcloud container (Useful e.g. for LDAPS) See https://github.com/nextcloud/all-in-one#how-to-trust-user-defined-certification-authorities-ca\n      # NEXTCLOUD_STARTUP_APPS: deck twofactor_totp tasks calendar contacts notes # Allows to modify the Nextcloud apps that are installed on starting AIO the first time. See https://github.com/nextcloud/all-in-one#how-to-change-the-nextcloud-apps-that-are-installed-on-the-first-startup\n      # NEXTCLOUD_ADDITIONAL_APKS: imagemagick # This allows to add additional packages to the Nextcloud container permanently. Default is imagemagick but can be overwritten by modifying this value. See https://github.com/nextcloud/all-in-one#how-to-add-os-packages-permanently-to-the-nextcloud-container\n      # NEXTCLOUD_ADDITIONAL_PHP_EXTENSIONS: imagick # This allows to add additional php extensions to the Nextcloud container permanently. Default is imagick but can be overwritten by modifying this value. See https://github.com/nextcloud/all-in-one#how-to-add-php-extensions-permanently-to-the-nextcloud-container\n      # NEXTCLOUD_ENABLE_DRI_DEVICE: true # This allows to enable the /dev/dri device for containers that profit from it. ⚠️⚠️⚠️ Warning: this only works if the '/dev/dri' device is present on the host! If it should not exist on your host, don't set this to true as otherwise the Nextcloud container will fail to start! See https://github.com/nextcloud/all-in-one#how-to-enable-hardware-acceleration-for-nextcloud\n      # NEXTCLOUD_ENABLE_NVIDIA_GPU: true # This allows to enable the NVIDIA runtime and GPU access for containers that profit from it. ⚠️⚠️⚠️ Warning: this only works if an NVIDIA gpu is installed on the server. See https://github.com/nextcloud/all-in-one#how-to-enable-hardware-acceleration-for-nextcloud.\n      # NEXTCLOUD_KEEP_DISABLED_APPS: false # Setting this to true will keep Nextcloud apps that are disabled in the AIO interface and not uninstall them if they should be installed. See https://github.com/nextcloud/all-in-one#how-to-keep-disabled-apps\n      # SKIP_DOMAIN_VALIDATION: false # This should only be set to true if things are correctly configured. See https://github.com/nextcloud/all-in-one?tab=readme-ov-file#how-to-skip-the-domain-validation\n      # TALK_PORT: 3478 # This allows to adjust the port that the talk container is using which is exposed on the host. See https://github.com/nextcloud/all-in-one#how-to-adjust-the-talk-port\n      # WATCHTOWER_DOCKER_SOCKET_PATH: /var/run/docker.sock # Needs to be specified if the docker socket on the host is not located in the default '/var/run/docker.sock'. Otherwise mastercontainer updates will fail. For macos it needs to be '/var/run/docker.sock'\n    # security_opt: [\"label:disable\"] # Is needed when using SELinux\n\n#   # Optional: Caddy reverse proxy. See https://github.com/nextcloud/all-in-one/discussions/575\n#   # Hint: You need to uncomment APACHE_PORT: 11000 above, adjust cloud.example.com to your domain and uncomment the necessary docker volumes at the bottom of this file in order to make it work\n#   # You can find further examples here: https://github.com/nextcloud/all-in-one/discussions/588\n#   caddy:\n#     image: caddy:alpine\n#     restart: always\n#     container_name: caddy\n#     volumes:\n#       - caddy_certs:/certs\n#       - caddy_config:/config\n#       - caddy_data:/data\n#       - caddy_sites:/srv\n#     network_mode: \"host\"\n#     configs:\n#       - source: Caddyfile\n#         target: /etc/caddy/Caddyfile\n# configs:\n#   Caddyfile:\n#     content: |\n#       # Adjust cloud.example.com to your domain below\n#       https://cloud.example.com:443 {\n#         reverse_proxy localhost:11000\n#       }\n\nvolumes: # If you want to store the data on a different drive, see https://github.com/nextcloud/all-in-one#how-to-store-the-filesinstallation-on-a-separate-drive\n  nextcloud_aio_mastercontainer:\n    name: nextcloud_aio_mastercontainer # This line is not allowed to be changed as otherwise the built-in backup solution will not work\n  # caddy_certs:\n  # caddy_config:\n  # caddy_data:\n  # caddy_sites:\n"
        },
        {
          "name": "develop.md",
          "type": "blob",
          "size": 2.2978515625,
          "content": "## Developer channel\nIf you want to switch to the develop channel, you simply stop and delete the mastercontainer and create a new one with a changed tag to develop:\n```shell\nsudo docker run \\\n--init \\\n--sig-proxy=false \\\n--name nextcloud-aio-mastercontainer \\\n--restart always \\\n--publish 80:80 \\\n--publish 8080:8080 \\\n--publish 8443:8443 \\\n--volume nextcloud_aio_mastercontainer:/mnt/docker-aio-config \\\n--volume /var/run/docker.sock:/var/run/docker.sock:ro \\\nnextcloud/all-in-one:develop\n```\nAnd you are done :)\nIt will now also select the developer channel for all other containers automatically.\n\n## How to publish new releases?\nSimply use https://github.com/nextcloud/all-in-one/issues/180 as template.\n\n## How to build new containers\nGo to https://github.com/nextcloud-releases/all-in-one/actions/workflows/repo-sync.yml and run the workflow that will first sync the repo and then build new container that automatically get published to `develop` and `develop-arm64`.\n\n## How to test things correctly?\nBefore testing, make sure that at least the amd64 containers are built successfully by checking the last workflow here: https://github.com/nextcloud-releases/all-in-one/actions/workflows/build_images.yml. \n\nThere is a testing-VM available for the maintainer of AIO that allows for some final testing before releasing new version. See [this](https://cloud.nextcloud.com/apps/collectives/Nextcloud%20Handbook/Technical/AIO%20testing%20VM?fileId=6350152) for details.\n\n## How to promote builds from develop to beta\n1. Verify that no job is running here: https://github.com/nextcloud-releases/all-in-one/actions/workflows/build_images.yml\n2. Go to https://github.com/nextcloud-releases/all-in-one/actions/workflows/promote-to-beta.yml, click on `Run workflow`.\n\n## Where to find the VPS and other builds?\nThis is documented here: https://github.com/nextcloud-releases/all-in-one/tree/main/.build\n\n## How to promote builds from beta to latest\n\n1. Verify that no job is running here: https://github.com/nextcloud-releases/all-in-one/actions/workflows/promote-to-beta.yml\n2. Go to https://github.com/nextcloud-releases/all-in-one/actions/workflows/promote-to-latest.yml, click on `Run workflow`.\n\n## How to connect to the database?\nSimply run `sudo docker exec -it nextcloud-aio-database psql -U oc_nextcloud nextcloud_database` and you should be in.\n"
        },
        {
          "name": "docker-ipv6-support.md",
          "type": "blob",
          "size": 2.3427734375,
          "content": "# IPv6-Support for Docker\n\n## Docker on Linux and Docker-rootless\nFirst of all upgrade your docker installation to v27.0.1 or higher.\n1. Then edit `/etc/docker/daemon.json` (or `~/.config/docker/daemon.json` in case of docker-rootless), add the below json:\n\n    ```json\n    {\n      \"default-network-opts\": {\"bridge\":{\"com.docker.network.enable_ipv6\":\"true\"}}\n    }\n    ```\n\n    Save the file.\n\n2.  Reload the Docker configuration file.\n\n    ```console\n    sudo systemctl restart docker\n    ```\n3. Make sure that ipv6 is enabled for the internal `nextcloud-aio` network by running `sudo docker network inspect nextcloud-aio | grep EnableIPv6`. On a new instance, this command should return that it did not find a network with this name. Then you can run `sudo docker network create nextcloud-aio` in order to create the network with ipv6-support. However if it finds the network and its value `EnableIPv6` is set to false, make sure to follow https://github.com/nextcloud/all-in-one/discussions/4989 in order to recreate the network and enable ipv6 for it.\n\n## Docker Desktop (Windows and macOS)\nFirst of all upgrade your docker desktop installation to v4.32.0 or higher.\nThen, on Windows and macOS which use Docker Desktop, you need to go into the settings, and select `Docker Engine`. There you should see the currently used daemon.json file. \n\n1. You need to now adjust this json file:\n\n    ```\n    \"default-network-opts\": {\"bridge\":{\"com.docker.network.enable_ipv6\":\"true\"}}\n    ```\n\n2. Add these values to the json and make sure to keep the other currently values and that you don't see `Unexpected token in JSON at position ...` before attempting to restart by clicking on `Apply & restart`.\n3. Make sure that ipv6 is enabled for the internal `nextcloud-aio` network by running `sudo docker network inspect nextcloud-aio | grep EnableIPv6`. On a new instance, this command should return that it did not find a network with this name. Then you can run `sudo docker network create nextcloud-aio` in order to create the network with ipv6-support. However if it finds the network and its value `EnableIPv6` is set to false, make sure to follow https://github.com/nextcloud/all-in-one/discussions/4989 in order to recreate the network and enable ipv6 for it.\n\n---\n\n**Note**: This is a copy of the original docker docs at https://docs.docker.com/config/daemon/ipv6/ which apparently are not correct.\n"
        },
        {
          "name": "docker-rootless.md",
          "type": "blob",
          "size": 5.5537109375,
          "content": "# Docker rootless\r\n\r\n**Please note:** Due to a bug in Collabora is the Collabora container currently in rootless mode not working. See https://github.com/CollaboraOnline/online/issues/2800. In that case, you need to run a separate Collabora instance on your own if you want to use this feature. The following flag will be useful https://github.com/nextcloud/all-in-one#how-to-keep-disabled-apps.\r\n\r\nYou can run AIO with docker rootless by following the steps below.\r\n\r\n0. If docker is already installed, you should consider disabling it first: (`sudo systemctl disable --now docker.service docker.socket`)\r\n1. Install docker rootless by following the official documentation: https://docs.docker.com/engine/security/rootless/#install. The easiest way is installing it **Without packages** (`curl -fsSL https://get.docker.com/rootless | sh`). Further limitations, distribution specific hints, etc. are discussed on the same site. Also do not forget to enable the systemd service, which may not be enabled always by default. See https://docs.docker.com/engine/security/rootless/#usage. (`systemctl --user enable docker`)\r\n1. If you need ipv6 support, you should enable it by following https://github.com/nextcloud/all-in-one/blob/main/docker-ipv6-support.md.\r\n1. Do not forget to set the mentioned environmental variables `PATH` and `DOCKER_HOST` and in best case add them to your `~/.bashrc` file as shown!\r\n1. Also do not forget to run `loginctl enable-linger USERNAME` (and substitute USERNAME with the correct one) in order to make sure that user services are automatically started after every reboot.\r\n1. Expose the privileged ports by following https://docs.docker.com/engine/security/rootless/#exposing-privileged-ports. (`sudo setcap cap_net_bind_service=ep $(which rootlesskit); systemctl --user restart docker`). If you require the correct source IP you must expose them via `/etc/sysctl.conf`, [see note below](#note-regarding-docker-network-driver).\r\n1. Use the official AIO startup command but use `--volume $XDG_RUNTIME_DIR/docker.sock:/var/run/docker.sock:ro` instead of `--volume /var/run/docker.sock:/var/run/docker.sock:ro` and also add `--env WATCHTOWER_DOCKER_SOCKET_PATH=$XDG_RUNTIME_DIR/docker.sock` to the initial container startup (which is needed for mastercontainer updates to work correctly). When you are using Portainer to deploy AIO, the variable `$XDG_RUNTIME_DIR` is not available. In this case, it is necessary to manually add the path (e.g. `/run/user/1000/docker.sock`) to the Docker compose file to replace the `$XDG_RUNTIME_DIR` variable. If you are not sure how to get the path, you can run on the host: `echo $XDG_RUNTIME_DIR`.\r\n1. Now everything should work like without docker rootless. You can consider using docker-compose for this or running it behind a reverse proxy. Basically the only thing that needs to be adjusted always in the startup command or compose.yaml file (after installing docker rootles) are things that are mentioned in point 3.\r\n1. ⚠️ **Important:** Please read through all notes below!\r\n\r\n### Note regarding sudo in the documentation\r\nAlmost all commands in this project's documentation use `sudo docker ...`. Since `sudo` is not needed in case of docker rootless, you simply remove `sudo` from the commands and they should work. \r\n\r\n### Note regarding permissions\r\nAll files outside the containers get created, written to and accessed as the user that is running the docker daemon or a subuid of it. So for the built-in backup to work you need to allow this user to write to the target directory. E.g. with `sudo chown -R USERNAME:GROUPNAME /mnt/backup`. The same applies when changing Nextcloud's datadir via NEXTCLOUD_DATADIR. E.g. `sudo chown -R USERNAME:GROUPNAME /mnt/ncdata`. When you want to use the NEXTCLOUD_MOUNT option for local external storage, you need to adjust the permissions of the chosen folders to be accessible/writeable by the userid `100032:100032` (if running `grep ^$(whoami): /etc/subuid` as the user that is running the docker daemon returns 100000 as first value). \r\n\r\n\r\n### Note regarding docker network driver\r\nBy default rootless docker uses the `slirp4netns` IP driver and the `builtin` port driver. As mentioned in [the documentation](https://docs.docker.com/engine/security/rootless/#networking-errors), this combination doesn't provide \"Source IP propagation\". This means that Apache and Nextcloud will see all connections as coming from the docker gateway (e.g 172.19.0.1), which can lead to the Nextcloud brute force protection blocking all connection attempts. To expose the correct source IP, you will need to configure docker to also use `slirp4netns` as the port driver (see also [this guide](https://rootlesscontaine.rs/getting-started/docker/#changing-the-port-forwarder)).\r\nAs stated in the documentation, this change will likely lead to decreased network throughput. You should test this by trying to transfer a large file after completing your setup and revert back to the `builtin` port driver if the throughput is too slow.\r\n* Add `net.ipv4.ip_unprivileged_port_start=80` to `/etc/sysctl.conf`. Editing this file requires root privileges. (using capabilities doesn't work here; see [this issue](https://github.com/rootless-containers/slirp4netns/issues/251#issuecomment-761415404)).\r\n* Run `sudo sysctl --system` to propagate the change.\r\n* Create `~/.config/systemd/user/docker.service.d/override.conf`\r\n  with the following content:\r\n  ```\r\n  [Service]\r\n  Environment=\"DOCKERD_ROOTLESS_ROOTLESSKIT_NET=slirp4netns\"\r\n  Environment=\"DOCKERD_ROOTLESS_ROOTLESSKIT_PORT_DRIVER=slirp4netns\"\r\n  ```\r\n* Restart the docker daemon\r\n  ```\r\n  systemctl --user restart docker\r\n  ```\r\n"
        },
        {
          "name": "local-instance.md",
          "type": "blob",
          "size": 2.8662109375,
          "content": "# Local instance\r\nIt is possible due to several reasons that you do not want or cannot open Nextcloud to the public internet. Perhaps you were hoping to access AIO directly from an `ip.add.r.ess` (unsupported) or without a valid domain.  However, AIO requires a valid certificate to work correctly. Below is discussed how you can achieve both: Having a valid certificate for Nextcloud and only using it locally.\r\n\r\n### Content\r\n- [1. The recommended way](#1-the-recommended-way)\r\n- [2. Use the ACME DNS-challenge](#2-use-the-acme-dns-challenge)\r\n- [3. Use Cloudflare](#3-use-cloudflare)\r\n- [4. Buy a certificate and use that](#4-buy-a-certificate-and-use-that)\r\n- [5. Tailscale network](#5-tailscale-network)\r\n\r\n## 1. The recommended way\r\nThe recommended way is the following:\r\n1. Set up your domain correctly to point to your home network\r\n1. Set up a reverse proxy by following the [reverse proxy documentation](./reverse-proxy.md) but only open port 80 (which is needed for the ACME challenge to work - however no real traffic will use this port).\r\n1. Set up a local DNS-server like a pi-hole and configure it to be your local DNS-server for the whole network. Then in the Pi-hole interface, add a custom DNS-record for your domain and overwrite the A-record (and possibly the AAAA-record, too) to point to the private ip-address of your reverse proxy (see https://github.com/nextcloud/all-in-one#how-can-i-access-nextcloud-locally)\r\n1. Enter the ip-address of your local dns-server in the daemon.json file for docker so that you are sure that all docker containers use the correct local dns-server.\r\n1. Now, entering the domain in the AIO-interface should work as expected and should allow you to continue with the setup\r\n\r\n**Hint:** You may have a look at [this video](https://youtu.be/zk-y2wVkY4c) for a more complete but possibly outdated example.\r\n\r\n## 2. Use the ACME DNS-challenge\r\nYou can alternatively use the ACME DNS-challenge to get a valid certificate for Nextcloud. Here is described how to set it up: https://github.com/nextcloud/all-in-one#how-to-get-nextcloud-running-using-the-acme-dns-challenge\r\n\r\n## 3. Use Cloudflare\r\nIf you do not have any control over the network, you may think about using Cloudflare Tunnel to get a valid certificate for your Nextcloud. However it will be opened to the public internet then. See https://github.com/nextcloud/all-in-one#how-to-run-nextcloud-behind-a-cloudflare-tunnel how to set this up.\r\n\r\n## 4. Buy a certificate and use that\r\nIf none of the above ways work for you, you may simply buy a certificate from an issuer for your domain. You then download the certificate onto your server, configure AIO in [reverse proxy mode](./reverse-proxy.md) and use the certificate for your domain in your reverse proxy config.\r\n\r\n## 5. Tailscale network\r\nFor a reverse proxy example guide for Tailscale, see this guide by @flll: https://github.com/nextcloud/all-in-one/discussions/5439\r\n"
        },
        {
          "name": "manual-install",
          "type": "tree",
          "content": null
        },
        {
          "name": "manual-upgrade.md",
          "type": "blob",
          "size": 6.904296875,
          "content": "# Manual upgrade\r\n\r\nIf you do not update Nextcloud AIO for a long time (6+ months), when you eventually update in the AIO interface you will find Nextcloud no longer works. This is due to incompatible PHP versions within the nextcloud container.\r\nThere is unfortunately no way to fix this from a maintainer POV if you refrain from upgrading for so long.\r\n\r\nThe only way to fix this on your side is upgrading regularly (e.g. by enabling daily backups which will also automatically upgrade all containers) and following the steps below to get back to a normal state:\r\n\r\n---\r\n\r\n## Method 1\r\n\r\n1. Start all containers from the AIO interface \r\n    - Now, it will report that Nextcloud is restarting because it is not able to start due to the above mentioned problem\r\n    - #### Do **not** click on `Stop containers` because you will need them running going forward, see below\r\n2. Find out with which PHP version your installed Nextcloud is compatible by running `sudo docker exec nextcloud-aio-nextcloud cat lib/versioncheck.php`. \r\n    - There you will find information about the max. supported PHP version\r\n    - **Make a mental note of this**\r\n3. Stop the Nextcloud container and the Apache container by running \r\n    ```bash\r\n        sudo docker stop nextcloud-aio-nextcloud && sudo docker stop nextcloud-aio-apache\r\n    ```\r\n4. Run the following commands in order to reverse engineer the Nextcloud container:\r\n    ```bash\r\n        sudo docker pull assaflavie/runlike\r\n        echo '#!/bin/bash' > /tmp/nextcloud-aio-nextcloud\r\n        sudo docker run --rm -v /var/run/docker.sock:/var/run/docker.sock assaflavie/runlike -p nextcloud-aio-nextcloud >> /tmp/nextcloud-aio-nextcloud\r\n        sudo chown root:root /tmp/nextcloud-aio-nextcloud\r\n    ```\r\n5. Now open `/tmp/nextcloud-aio-nextcloud` with a text editor, and edit the container tag:\r\n\r\n\r\n| To change                              | Replace with                                        |\r\n|----------------------------------------|-----------------------------------------------------|\r\n| `nextcloud/aio-nextcloud:latest`       | `nextcloud/aio-nextcloud:php{version}-latest`       |\r\n| `nextcloud/aio-nextcloud:latest-arm64` | `nextcloud/aio-nextcloud:php{version}-latest-arm64` |\r\n\r\n\r\n\r\n - e.g. `nextcloud/aio-nextcloud:php8.0-latest` or `nextcloud/aio-nextcloud:php8.0-latest-arm64`\r\n - However, if you are unsure check the docker hub (https://hub.docker.com/r/nextcloud/aio-nextcloud/tags)\r\n - Using nano and the arrow keys to navigate:\r\n  - `sudo nano /tmp/nextcloud-aio-nextcloud` making changes as above, then `[Ctrl]+[o]` -> `[Enter]` and `[Ctrl]+[x]` to save and exit.\r\n6. Next, stop and remove the current container: \r\n    ```bash\r\n        sudo docker stop nextcloud-aio-nextcloud\r\n        sudo docker rm nextcloud-aio-nextcloud\r\n    ```\r\n7. Now start the Nextcloud container with the new tag by simply running `sudo bash /tmp/nextcloud-aio-nextcloud` which at startup should automatically upgrade Nextcloud to a more recent version. If not, make sure that there is no `skip.update` file in the Nextcloud datadir. If there is such a file, simply delete the file and restart the container again.<br>\r\n**Info**: You can open the Nextcloud container logs with `sudo docker logs -f nextcloud-aio-nextcloud`.\r\n8. After the Nextcloud container is started (you can tell by looking at the logs), simply restart the container again with `sudo docker restart nextcloud-aio-nextcloud` until it does not install a new Nextcloud update anymore upon the container startup.\r\n9. Now, you should be able to use the AIO interface again by simply stopping the AIO containers and starting them again which should finally bring up your instance again.\r\n10. If not and if you get the same error again, you may repeat the process starting from the beginning again until your Nextcloud version is finally up-to-date.\r\n11. Now, if everything is finally running as usual again, it is recommended to create a backup in order to save the current state. Consider enabling daily backups if doing regular upgrades is a hassle for you. \r\n\r\n---\r\n\r\n## Method 2\r\n#### *Approach using portainer if method 1 does not work for you*\r\n\r\nPrerequisite: have all containers from AIO interface running.\r\n\r\n<details>\r\n<summary>Click to expand</summary>\r\n\r\n##### 1. Install portainer if not installed:\r\n```bash\r\ndocker volume create portainer_data\r\ndocker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest\r\n```\r\n- If you have a reverse proxy\r\n    - you can setup and navigate using a domain name.\r\n- For the **standard** AIO install\r\n    - Open port 9443 on your firewall\r\n    - navigate to `https://<server-ip>:9443`\r\n- Accept the insecure self-signed certificate and set an admin password\r\n- If prompted to add an environment\r\n    - add local\r\n\r\n##### 2. Within the local portainer environment navigate to the **containers** tab \r\n- Here you should see all the various containers running\r\n\r\n##### 3. Now we need to stop the `nextcloud-aio-nextcloud` and `nextcloud-aio-apache` containers\r\n\r\n-  This can be done by selecting the checkbox's next to the containers' name and clicking the **Stop** button at the top\r\n    - or you can click into individual containers and stop them there\r\n\r\n##### 4. Find the version of PHP compatible with the running nextcloud container\r\n- navigate to ```nextcloud-aio-nextcloud``` and click on ```logs```, you should see something along the lines of:\r\n```logs\r\nThis version of nextcloud is not compatible with >=php 8.2, you are currently running php 8.2.18\r\n```\r\nMake **note** of the version which is compatible, rounding down to 1 digit after the dot. \r\n - In this example we would want php 8.1 since anything with 8.2 or above is incompatible\r\n\r\n##### 5. Find the correct container version\r\nIn general it should be ```nextcloud/aio-nextcloud:php8.x-latest-arm64``` or `nextcloud/aio-nextcloud:php8.x-latest` replacing `x` with the version you require.\r\nHowever, if you are unsure check the docker hub (https://hub.docker.com/r/nextcloud/aio-nextcloud/tags)\r\n\r\n##### 6. Replace the container\r\n- Navigate to the ```nextcloud-aio-nextcloud``` container within portainer\r\n- Click ```Duplicate/Edit```\r\n- Within image, change this to the correct version from Step 5\r\n- Click ```Deploy the container```\r\n    - if you are prompted to force repull the image click the slider and press pull image\r\n\r\n*Navigate to the nextcloud-aio-nextcloud logs and you will see the container updating*\r\n\r\nOnce you see no more activities in the logs or a message like ```NOTICE: ready to handle connections```, we've done it!\r\n\r\n#### Now you can handle everything through the AIO admin interface and stop and restart the containers normally.\r\n\r\n---\r\n\r\n##### 7. Last Step is removing portainer if you don't want to keep it\r\n\r\n```bash\r\ndocker stop portainer\r\ndocker rm portainer\r\ndocker volume rm portainer_data\r\n```\r\n- Make sure you close port 9443 on your firewall and delete any necessary reverse proxy hosts.\r\n\r\n</details>\r\n"
        },
        {
          "name": "migration.md",
          "type": "blob",
          "size": 13.970703125,
          "content": "# How to migrate from an already existing Nextcloud installation to Nextcloud AIO?\n\nThere are basically three ways how to migrate from an already existing Nextcloud installation to Nextcloud AIO (if you ran AIO on the former installation already, you can follow [these steps](https://github.com/nextcloud/all-in-one#how-to-migrate-from-aio-to-aio)):\n\n1. Migrate only the files which is the easiest way (this excludes all calendar data for example)\n1. Migrate the files and the database which is much more complicated (and doesn't work on former snap installations)\n1. Use the user_migration app that allows to migrate some of the user's data from a former instance to a new instance but needs to be done manually for each user\n\n## Migrate only the files \n**Please note**: If you used groupfolders or encrypted your files before, you will need to restore the database, as well! (This will also exclude all calendar data for example).\n\nThe procedure for migrating only the files works like this:\n1. Take a backup of your former instance (especially from your datadirectory, see `'datadirectory'` in your `config.php`)\n1. Install Nextcloud AIO on a new server/linux installation, enter your domain and wait until all containers are running\n1. Recreate all users that were present on your former installation\n1. Take a backup using Nextcloud AIO's built-in backup solution (so that you can easily restore to this state again) (Note: this will stop all containers and is expected: don't start the container again at this point!)\n1. Restore the datadirectory of your former instance: for `/path/to/old/nextcloud/data/` run `sudo docker cp --follow-link /path/to/old/nextcloud/data/. nextcloud-aio-nextcloud:/mnt/ncdata/` Note: the `/.` and `/` at the end are necessary.\n1. Next, run `sudo docker run --rm --volume nextcloud_aio_nextcloud_data:/mnt/ncdata:rw alpine chown -R 33:0 /mnt/ncdata/` and `sudo docker run --rm --volume nextcloud_aio_nextcloud_data:/mnt/ncdata:rw alpine chmod -R 750 /mnt/ncdata/` to apply the correct permissions. (Or if `NEXTCLOUD_DATADIR` was provided, apply `chown -R 33:0` and `chmod -R 750` to the chosen path.)\n1. Start the containers again and wait until all containers are running\n1. Run `sudo docker exec --user www-data -it nextcloud-aio-nextcloud php occ files:scan-app-data && sudo docker exec --user www-data -it nextcloud-aio-nextcloud php occ files:scan --all` in order to scan all files in the datadirectory.\n1. If the restored data is older than any clients you want to continue to sync, for example if the server was down for a period of time during migration, you may want to take a look at [Synchronising with clients after migration](/migration.md#synchronising-with-clients-after-migration) below.\n\n## Migrate the files and the database\n**Please note**: this is much more complicated than migrating only the files and also not as failproof so be warned! Also, this will not work on former snap installations as the snap is read-only and thus you cannot install the necessary `pdo_pgsql` PHP extension. So if migrating from snap, you will need to use one of the other methods. However you could try to ask if the snaps maintainer could add this one small PHP extension to the snap here: https://github.com/nextcloud-snap/nextcloud-snap/issues which would allow for an easy migration.\n\nThe procedure for migrating the files and the database works like this:\n1. Make sure that your old instance is on exactly the same version like the version used in Nextcloud AIO. (e.g. 23.0.0) You can find the used version here: [click here](https://github.com/nextcloud/all-in-one/search?l=Dockerfile&q=NEXTCLOUD_VERSION&type=). If not, simply upgrade your former installation to that version or wait until the version used in Nextcloud AIO got updated to the same version of your former installation or the other way around.\n1. First, on the old instance, update all Nextcloud apps to its latest version via the app management site (important for the restore later on). Then take a backup of your former instance (especially from your datadirectory and database).\n1. If your former installation didn't use Postgresql already, you will now need to convert your old installation to use Postgresql as database temporarily (in order to be able to perform a pg_dump afterwards):\n    1. Install Postgresql on your former installation: on a Debian based OS should the following command work:\n        ```\n        sudo apt update && sudo apt install postgresql -y\n        ```\n    1. Create a new database by running:\n        ```\n        export PG_USER=\"ncadmin\" # This is a temporary user that gets created for the dump but is then overwritten by the correct one later on\n        export PG_PASSWORD=\"my-temporary-password\"\n        export PG_DATABASE=\"nextcloud_db\"\n        sudo -u postgres psql <<END\n        CREATE USER $PG_USER WITH PASSWORD '$PG_PASSWORD' CREATEDB;\n        CREATE DATABASE $PG_DATABASE WITH OWNER $PG_USER TEMPLATE template0 ENCODING 'UTF8';\n        GRANT ALL PRIVILEGES ON DATABASE $PG_DATABASE TO $PG_USER;\n        GRANT ALL PRIVILEGES ON SCHEMA public TO $PG_USER;\n        END\n        ```\n    1. Run the following command to start the conversion:\n        ```\n        occ db:convert-type --all-apps --password \"$PG_PASSWORD\" pgsql \"$PG_USER\" 127.0.0.1 \"$PG_DATABASE\"\n        ```\n        **Please note:** You might need to change the ip-address `127.0.0.1` and adjust the occ command (`occ`) based on your exact installation. Further information on the conversion is additionally available here: https://docs.nextcloud.com/server/stable/admin_manual/configuration_database/db_conversion.html#converting-database-type<br>\n        **Troubleshooting:** If you get an error that it could not find a driver for the conversion, you most likely need to install the PHP extension `pdo_pgsql`.\n    1. Hopefully does the conversion finish successfully. If not, simply restore your old Nextcloud installation from backup. If yes, you should now log in to your Nextcloud and test if everything works and if all data has been converted successfully.\n    1. If everything works as expected, feel free to continue with the steps below.\n1. Now, run a pg_dump to get an export of your current database. Something like the following command should work:\n    ```\n    sudo -Hiu postgres pg_dump \"$PG_DATABASE\"  > ./database-dump.sql\n    ```\n    **Please note:** The exact name of the database export file is important! (`database-dump.sql`)<br>\n    And of course you need to to use the correct name that the Postgresql database has for the export (if `$PG_DATABASE` doesn't work directly).\n1. At this point, you can finally install Nextcloud AIO on a new server/linux installation, enter your domain in the AIO interface (use the same domain that you used on your former installation) and wait until all containers are running. Then you should check the included Nextcloud version by running `sudo docker inspect nextcloud-aio-nextcloud | grep NEXTCLOUD_VERSION`. Also install all apps via the apps management site that were installed on the old Nextcloud installation. Otherwise they will show as installed, but will not work.\n1. Next, take a backup using Nextcloud AIO's built-in backup solution (so that you can easily restore to this state again) (Note: this will stop all containers and is expected: don't start the container again at this point!)\n1. Now, we are slowly starting to import your files and database. First, you need to modify the datadirectory that is stored inside the database export:\n    1. Find out what the directory of your old Nextcloud installation is by e.g. opening the config.php file and looking at the value `datadirectory`.\n    1. Now, create a copy of the database file so that you can simply restore it if you should make a mistake while editing: `cp database-dump.sql database-dump.sql.backup`\n    1. Next, open the database export with e.g. nano: `nano database-dump.sql`\n    1. Press `[CTRL] + [w]` in order to open the search\n    1. Type in `local::/your/old/datadir/` which should bring up the exact line where you need to modify the path to use the one used in Nextcloud AIO, instead.\n    1. Change it to look like this: `local::/mnt/ncdata/`.\n    1. Now save the file by pressing `[CTRL] + [o]` then `[ENTER]` and close nano by pressing `[CTRL] + [x]`\n    1. In order to make sure that everything is good, you can now run `grep \"/your/old/datadir\" database-dump.sql` which should not bring up further results.<br>\n    1. **Please note:** Unfortunately it is not possible to import a database dump from a former database owner with the name `nextcloud`. You can check if that is the case with this command: `grep \"Name: oc_appconfig; Type: TABLE; Schema: public; Owner:\" database-dump.sql | grep -oP 'Owner:.*$' | sed 's|Owner:||;s| ||g'`. If it returns `nextcloud`, you need to rename the owner in the dump file manually. A command like the following should work, however please note that it is possible that it will overwrite wrong lines. You can thus first check which lines it will change with `grep \"Owner: nextcloud$\" database-dump.sql`. If only correct looking lines get returned, feel free to change them with `sed -i 's|Owner: nextcloud$|Owner: ncadmin|' database-dump.sql`.\nThe same applies for the second statement, check with `grep \" OWNER TO nextcloud;$\" database-dump.sql` and replace with `sed -i 's| OWNER TO nextcloud;$| OWNER TO ncadmin;|' database-dump.sql`.\n1. Next, copy the database dump into the correct place and prepare the database container which will import from the database dump automatically the next container start: \n    ```\n    sudo docker run --rm --volume nextcloud_aio_database_dump:/mnt/data:rw alpine rm /mnt/data/database-dump.sql\n    sudo docker cp database-dump.sql nextcloud-aio-database:/mnt/data/\n    sudo docker run --rm --volume nextcloud_aio_database_dump:/mnt/data:rw alpine chmod 777 /mnt/data/database-dump.sql\n    sudo docker run --rm --volume nextcloud_aio_database_dump:/mnt/data:rw alpine rm /mnt/data/initial-cleanup-done\n    ```\n1. If the commands above were executed successfully, restore the datadirectory of your former instance into your datadirectory: `sudo docker run --rm --volume nextcloud_aio_nextcloud_data:/mnt/ncdata:rw alpine sh -c \"rm -rf /mnt/ncdata/*\"` and `sudo docker cp --follow-link /path/to/nextcloud/data/. nextcloud-aio-nextcloud:/mnt/ncdata/` Note: the `/.` and `/` at the end are necessary. (Or if `NEXTCLOUD_DATADIR` was provided, first delete the files in there and then copy the files to the chosen path.)\n1. Next, run `sudo docker run --rm --volume nextcloud_aio_nextcloud_data:/mnt/ncdata:rw alpine chown -R 33:0 /mnt/ncdata/` and `sudo docker run --rm --volume nextcloud_aio_nextcloud_data:/mnt/ncdata:rw alpine chmod -R 750 /mnt/ncdata/` to apply the correct permissions on the datadirectory. (Or if `NEXTCLOUD_DATADIR` was provided, apply `chown -R 33:0` and `chmod -R 750` to the chosen path.)\n1. Edit the Nextcloud AIO config.php file using `sudo docker run -it --rm --volume nextcloud_aio_nextcloud:/var/www/html:rw alpine sh -c \"apk add --no-cache nano && nano /var/www/html/config/config.php\"` and modify only `passwordsalt`, `secret`, `instanceid` and set it to the old values that you used on your old installation. If you are brave, feel free to modify further values e.g. add your old LDAP config or S3 storage config. (Some things like Mail server config can be added back using Nextcloud's webinterface later on).\n1. When you are done and saved your changes to the file, finally start the containers again and wait until all containers are running.\n1. As last step, install all apps again that were installed before on your old instance by using the webinterface.\n\nNow the whole Nextcloud instance should work again.<br>\nIf not, feel free to restore the AIO instance from backup and start at step 8 again.\n\nIf the restored data is older than any clients you want to continue to sync, for example if the server was down for a period of time during migration, you may want to take a look at [Synchronising with clients after migration](/migration.md#synchronising-with-clients-after-migration) below.\n\n## Use the user_migration app\nA new way since the Nextcloud update to 24 is to use the new [user_migration app](https://apps.nextcloud.com/apps/user_migration#app-gallery). It allows to export the most important data on one instance and import it on a different Nextcloud instance. For that, you need to install and enable the user_migration app on your old instance, trigger the export for the user, create the user on the new instance, log in with that user and import the archive that was created during the export. This then needs to be done for each user that you want to migrate.\n\nIf the restored data is older than any clients you want to continue to sync, for example if the server was down for a period of time during migration, you may want to take a look at [Synchronising with clients after migration](/migration.md#synchronising-with-clients-after-migration) below.\n\n# Synchronising with clients after migration\n#### From https://docs.nextcloud.com/server/latest/admin_manual/maintenance/restore.html#synchronising-with-clients-after-data-recovery\nBy default the Nextcloud server is considered the authoritative source for the data. If the data on the server and the client differs clients will default to fetching the data from the server.\n\nIf the recovered backup is outdated the state of the clients may be more up to date than the state of the server. In this case also make sure to run `sudo docker exec --user www-data -it nextcloud-aio-nextcloud php occ maintenance:data-fingerprint` command afterwards. It changes the logic of the synchronisation algorithm to try an recover as much data as possible. Files missing on the server are therefore recovered from the clients and in case of different content the users will be asked.\n\n>[!Note]\n>The usage of maintenance:data-fingerprint can cause conflict dialogues and difficulties deleting files on the client. Therefore it’s only recommended to prevent dataloss if the backup was outdated.\n\n\nIf you are running multiple application servers you will need to make sure the config files are synced between them so that the updated data-fingerprint is applied on all instances.\n"
        },
        {
          "name": "multiple-instances.md",
          "type": "blob",
          "size": 22.7099609375,
          "content": "# Multiple AIO instances\r\nIt is possible to run multiple instances of AIO on one server.\r\n\r\nThere are two ways to achieve this: The normal way is creating multiple VMs, installing AIO in [reverse proxy mode](./reverse-proxy.md) in each of them and having one reverse proxy in front of them that points to each VM (you also need to [use a different `TALK_PORT`](https://github.com/nextcloud/all-in-one#how-to-adjust-the-talk-port) for each of them). The second and more advanced way is creating multiple users on the server and using docker rootless for each of them in order to install multiple instances on the same server. \r\n\r\n\r\n## Run multiple AIO instances on the same server with docker rootless\r\n1. Create as many linux users as you need first. The easiest way is to use `sudo adduser` and follow the setup for that. Make sure to create a strong unique password for each of them and write it down!\r\n1. Log in as each of the users by opening a new SSH connection as the user and install docker rootless for each of them by following step 0-1 and 3-4 of the [docker rootless documentation](./docker-rootless.md) (you can skip step 2 in this case).\r\n1. Then install AIO in reverse proxy mode by using the command that is described in step 2 and 3 of the [reverse proxy documentation](./reverse-proxy.md) but use a different `APACHE_PORT` and [`TALK_PORT`](https://github.com/nextcloud/all-in-one#how-to-adjust-the-talk-port) for each instance as otherwise it will bug out. Also make sure to adjust the docker socket and `WATCHTOWER_DOCKER_SOCKET_PATH` correctly for each of them by following step 6 of the [docker rootless documentation](./docker-rootless.md). Additionally, modify `--publish 8080:8080` to a different port for each container, e.g. `8081:8080` as otherwise it will not work.<br>\r\n**⚠️ Please note:** If you want to adjust the `NEXTCLOUD_DATADIR`, make sure to apply the correct permissions to the chosen path as documented at the bottom of the [docker rootless documentation](./docker-rootless.md). Also for the built-in backup to work, the target path needs to have the correct permissions as documented there, too.\r\n1. Now install your webserver of choice on the host system. It is recommended to use caddy for this as it is by far the easiest solution. You can do so by following https://caddyserver.com/docs/install#debian-ubuntu-raspbian or below. (It needs to be installed directly on the host or on a different server in the same network).\r\n1. Next create your Caddyfile with multiple entries and domains for the different instances like described in step 1 of the [reverse proxy documentation](./reverse-proxy.md). Obviously each domain needs to point correctly to the chosen `APACHE_PORT` that you've configured before. Then start Caddy which should automatically get the needed certificates for you if your domains are configured correctly and ports 80 and 443 are forwarded to your server.\r\n1. Now open each of the AIO interfaces by opening `https://ip.address.of.this.server:8080` or e.g. `https://ip.address.of.this.server:8081` or as chosen during step 3 of this documentation. \r\n1. Finally type in the domain that you've configured for each of the instances during step 5 of this documentation and you are done.\r\n1. Please also do not forget to open/forward each chosen `TALK_PORT` UDP and TCP in your firewall/router as otherwise Talk will not work correctly!\r\n\r\nNow everything should be set up correctly and you should have created multiple working instances of AIO on the same server!\r\n\r\n\r\n## Run multiple AIO instances on the same server inside their own virtual machines\r\nThis guide will walk you through creating and configuring two (or more) Debian-based VMs (with \"reverse proxy mode\" Nextcloud AIO installed in each VM), behind one Caddy reverse proxy, all running on one host physical machine (like a laptop or desktop PC). It's highly recommend to follow the steps in order. Steps 1 through 4 will need to be repeated. Steps 5 through 8 only need to be completed once. All commands are expected to be run as root.\r\n\r\n<details><summary><strong>PLEASE READ: A few expectations about your network</strong></summary>\r\nThis guide assumes that you have forwarded ports 443 and 8443 to your host physical machine via your router's configuration page, and either set up Dynamic DNS or obtained a static outbound IP address from your ISP. If this is not the case, or if you are brand-new to networking, you probably should not proceed with this guide, unless you are just using it for educational purposes. Proper network setup and security is critical when it comes to keeping your data safe. You may consider hosting using a VPS instead, or choosing one of <a href=\"https://nextcloud.com/providers/\">Nextcloud's trusted providers.</a>\r\n</details>\r\n\r\n<details><summary><strong>A note for VPS users</strong></summary>\r\nIf you want to do this on a VPS, and your VPS is KVM-based and provides a static IP address, you can likely benefit from this guide too! Simply replace the words \"host physical machine\" with \"VPS\" and follow along.\r\n</details>\r\n\r\n**Before starting:** Make sure your host physical machine has enough resources. A host machine with 8GB RAM and 100GB storage is sufficient for running two fairly minimal VMs, with 2GB RAM and 32GB storage allocated to each VM. This guide assumes you have these resources at the minimum. This is fine for just testing the setup, but you will probably want to allocate more resources to your VMs if you plan to use this for day-to-day use.\r\nIf your host machine has more than 8GB memory available, and you plan to enable any of the optional containers (Nextcloud Office, Talk, Imaginary, etc.) in any of your instances, then you should definitely allocate more memory to the VM hosting that instance. In other words, before turning on any extra features inside a particular AIO interface, make sure you've first allocated enough resources to the VM that the instance is running inside. If in doubt, the AIO interface itself gives great recommendations for extra CPU and RAM allocation.\r\n\r\n**Additional prerequisites:** Your host physical machine needs to have virtualization enabled in it's UEFI/BIOS. It also needs a few tools installed in order to create VMs. Assuming your host machine is a bare-bones Ubuntu or Debian Linux server without a desktop environment installed, the easiest way to create VMs is to install *QEMU*, *virsh*, *virt-install*, and a few extra packages to support UEFI booting and network config ([more info](https://wiki.debian.org/KVM)). You only need to do this once. To do this, run this command (**on the host physical machine**):\r\n<!--\r\n```shell\r\n# For host machines running Ubuntu Server:\r\napt install --no-install-recommends qemu-system libvirt-clients libvirt-daemon-system virtinst ovmf bridge-utils\r\n```\r\n```shell\r\n# For host machines running Debian:\r\napt install --no-install-recommends qemu-system qemu-utils libvirt-clients libvirt-daemon-system virtinst ovmf bridge-utils dnsmasq-base\r\n```\r\n-->\r\n```shell\r\n# For host machines running Ubuntu Server or Debian:\r\napt install --no-install-recommends qemu-system qemu-utils libvirt-clients libvirt-daemon-system virtinst ovmf bridge-utils dnsmasq-base\r\n```\r\n\r\n**Let's begin!** This guide assumes that you have two domains where you would like to host two individual AIO instances (one instance per domain). Let's call these domains `example1.com` and `example2.com`. Therefore, we'll create two VMs named `example1-com` and `example2-com` (These are the VM names we'll use below in step 1).\r\n\r\n**Once you're ready, follow steps 1-4 below to set up your VMs. You will configure them one at a time.**\r\n\r\n1. Choose a name for your VM. A good choice is to name each VM the same as the domain name that will be used to access it.\r\n2. Choose the distribution you'd like to install within the VM:\r\n   <details><summary><strong>Ubuntu Server 22.04.4 LTS</strong></summary>\r\n       <h4>Downloading the .ISO image</h4>\r\n       You must first download an .ISO image to your host machine, and then provide virt-install with the path to that image.\r\n       <!-- This step is required because Ubuntu no longer hosts their \"Legacy Ubuntu Server Installer\" images, meaning we can no longer pass a URL to virt-install to use as a location. -->\r\n       <pre><code># Skip this part if you've already downloaded this image\r\n   curl -o /tmp/ubuntu-22.04.4-live-server-amd64.iso https://releases.ubuntu.com/jammy/ubuntu-22.04.4-live-server-amd64.iso\r\n   </code></pre>\r\n       <em>Note: You may choose a different place to store the .ISO file, but it needs to be somewhere accessible by QEMU. \"/tmp\" and \"/home\" work well, but choosing a location like \"/root\" will cause the next command to fail.</em>\r\n       <h4>Creating the VM</h4>\r\n       Now create the Ubuntu Server VM (Don't forget to replace [VM_NAME]):\r\n       <pre><code>virt-install \\\r\n   --name [VM_NAME] \\\r\n   --virt-type kvm \\\r\n   --location /tmp/ubuntu-22.04.4-live-server-amd64.iso,kernel=casper/vmlinuz,initrd=casper/initrd \\\r\n   --os-variant ubuntujammy \\\r\n   --disk size=32 \\\r\n   --memory 2048 \\\r\n   --graphics none \\\r\n   --console pty,target_type=serial \\\r\n   --extra-args \"console=ttyS0\" \\\r\n   --autostart \\\r\n   --boot uefi\r\n   </code></pre>\r\n       <h4>Using a different version of Ubuntu Server</h4>\r\n       To use a different Ubuntu Server release, visit <a href=\"https://releases.ubuntu.com\">this page</a> and find the version you want. You will need to adjust the filename and URL for the curl command, and the location and os-variant for the virt-install command, accordingly.\r\n   </details>\r\n   <details><summary><strong>Debian 11</strong></summary>\r\n       <h4>Creating the VM</h4>\r\n       Create the Debian VM (Don't forget to replace [VM_NAME]):\r\n       <pre><code>virt-install \\\r\n   --name [VM_NAME] \\\r\n   --virt-type kvm \\\r\n   --location http://deb.debian.org/debian/dists/bullseye/main/installer-amd64/ \\\r\n   --os-variant debian11 \\\r\n   --disk size=32 \\\r\n   --memory 2048 \\\r\n   --graphics none \\\r\n   --console pty,target_type=serial \\\r\n   --extra-args \"console=ttyS0\" \\\r\n   --autostart \\\r\n   --boot uefi\r\n   </code></pre>\r\n   </details>\r\n   <details><summary><strong>Debian 12</strong></summary>\r\n       <h4>Creating the VM</h4>\r\n       Create the Debian VM (Don't forget to replace [VM_NAME]):\r\n       <pre><code># If the os-variant \"debian12\" is unknown, try \"debiantesting\" instead\r\n   virt-install \\\r\n   --name [VM_NAME] \\\r\n   --virt-type kvm \\\r\n   --location http://deb.debian.org/debian/dists/bookworm/main/installer-amd64/ \\\r\n   --os-variant debian12 \\\r\n   --disk size=32 \\\r\n   --memory 2048 \\\r\n   --graphics none \\\r\n   --console pty,target_type=serial \\\r\n   --extra-args \"console=ttyS0\" \\\r\n   --autostart \\\r\n   --boot uefi\r\n   </code></pre>\r\n   </details>\r\n   <!--To learn more about virt-install or automating this process, see <a href=\"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/sect-guest_virtual_machine_installation_overview-creating_guests_with_virt_install\">this guide</a>.-->\r\n3. Navigate through the text-based installer. Most options can remain as default, but here are some tips:\r\n   <details><summary><strong>For the Ubuntu Server installer</strong></summary>\r\n   When asked about the \"type of installation\", you can leave the default \"Ubuntu Server\" without third-party drivers. You can leave the HTTP proxy information blank. In the \"Profile Configuration\" section, you can set \"Your servers name\" (hostname) to the same value as the name you gave to your VM (for example, \"example1-com\"). The installer will only let you create a non-root user. Note down the password you use here! You may skip enabling Ubuntu Pro. You can allow the partitioner to use the entire disk, this only uses the virtual disk that you defined above in step 2. You'll eventually be given the option to install additional software. Although \"Nextcloud\" is listed here, you almost certainly do <strong>not</strong> want to select this option, since you are setting up Nextcloud AIO. You'll be asked about installing \"SSH server\", this is entirely optional (This lets you easily SSH into the VM in the future in case you have to perform any maintenance, but even if you do not install an SSH server, you can still log in using the \"virsh console\" command). Finally, disregard the \"[FAILED] Failed unmounting /cdrom.\" message, and press return.\r\n   </details>\r\n   <details><summary><strong>For the Debian installer</strong></summary>\r\n   When asked, you can set the hostname to the same value as the name you gave to your VM (for example, \"example1-com\"). You can leave the domain name and HTTP proxy information blank. Allow the installer to create both a root and a non-root user. Note down the password(s) you use here! You can allow the partitioner to use the entire disk, this only uses the virtual disk that you defined above in step 2. When tasksel (Software selection) runs and asks if you want to install additional software, use spacebar and your arrow keys to un-check the \"Debian desktop environment\" and \"GNOME\" options. The \"SSH server\" option is entirely optional (This lets you easily SSH into the VM in the future in case you have to perform any maintenance, but even if you do not install an SSH server, you can still log in using the \"virsh console\" command). Make sure \"standard system utilities\" is also checked. Hit tab to select \"Continue\". Finally, disregard the warning about GRUB, allow it to install to your \"primary drive\" (again, it's only virtual, and this only applies to the VM- this will not affect the boot configuration of your host physical machine) and select \"/dev/vda\" for the bootable device.\r\n   </details>\r\n4. Configure your new VM:\r\n\r\n   After it has finished installing, the VM will have rebooted and presented you with a login prompt. For Debian, just use `root` as the username, and enter the password you chose during the installation process. Ubuntu restricts root account access, so you'll need to first login with your non-root user, and then run `sudo su -` to elevate your privileges.\r\n\r\n   We will now run a few commands to install docker and AIO in reverse proxy mode! As with any other commands, carefully read and try your best to understand them before running them.\r\n\r\n   **Each time you reach this step and run the `docker run` command below, you'll need to increment the `TALK_PORT` value. For example: 3478, 3479, etc... You may use other values as long as they don't conflict, and make sure they are [greater than 1024](https://github.com/nextcloud/all-in-one/discussions/2517). Be sure to note down the Talk port number you've assigned to this VM/AIO instance. You will need it later if you decide to enable Nextcloud Talk.**\r\n\r\n   Run these commands (**on the VM**):\r\n   ```shell\r\n   apt install -y curl\r\n   \r\n   curl -fsSL https://get.docker.com | sh\r\n\r\n   # Make sure you increment the TALK_PORT value every time you run this!\r\n   docker run \\\r\n   --init \\\r\n   --sig-proxy=false \\\r\n   --name nextcloud-aio-mastercontainer \\\r\n   --restart always \\\r\n   --publish 8080:8080 \\\r\n   --env APACHE_PORT=11000 \\\r\n   --env APACHE_IP_BINDING=0.0.0.0 \\\r\n   --env TALK_PORT=3478 \\\r\n   --volume nextcloud_aio_mastercontainer:/mnt/docker-aio-config \\\r\n   --volume /var/run/docker.sock:/var/run/docker.sock:ro \\\r\n   nextcloud/all-in-one:latest\r\n   ```\r\n   The last command may take a few minutes. When it's finished, you should see a success message, saying \"Initial startup of Nextcloud All-in-One complete!\". Now exit the console session with `Ctrl + [c]`. This concludes the setup for this particular VM.\r\n\r\n   \r\n   ---\r\n6. Go ahead and run through steps 1-4 again in order to set up your second VM. When you're finished, proceed down to step 6. *(Note: If you downloaded the Ubuntu .ISO image and no longer need it, you may delete it now.)*\r\n7. Almost done! All that's left is configuring your reverse proxy. To do this, you first need to [install it](https://caddyserver.com/docs/install#debian-ubuntu-raspbian). Run (**on the host physical machine**):\r\n   ```shell\r\n   apt update -y\r\n   apt install -y debian-keyring debian-archive-keyring apt-transport-https curl\r\n   curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\r\n   curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-stable.list\r\n   apt update -y\r\n   apt install -y caddy\r\n   ```\r\n   These commands will ensure that your system is up-to-date and install the latest stable version of Caddy via it's official binary source.\r\n8. To configure Caddy, you need to know the IP address assigned to each VM. Run (**on the host physical machine**):\r\n    ```shell\r\n    virsh net-dhcp-leases default\r\n    ```\r\n    This will show you the VMs you set up, and the IP address corresponding to each of them. Note down each IP and corresponding hostname.\r\n    Finally, you will configure Caddy using this information. Open the default Caddyfile with a text editor:\r\n    ```shell\r\n    nano /etc/caddy/Caddyfile\r\n    ```\r\n    Replace everything in this file with the following configuration. Don't forget to edit this sample configuration and substitute in your own domain names and IP addresses. `[DOMAIN_NAME_*]` should be a domain name like `example1.com`, and `[IP_ADDRESS_*]` should be a local IPv4 address like `192.168.122.225`.\r\n    ```shell\r\n    # Virtual machine #1 - \"example1-com\"\r\n    https://[DOMAIN_NAME_1]:8443 {\r\n        reverse_proxy https://[IP_ADDRESS_1]:8080 {\r\n            transport http {\r\n                tls_insecure_skip_verify\r\n            }\r\n        }\r\n    }\r\n    https://[DOMAIN_NAME_1]:443 {\r\n        reverse_proxy [IP_ADDRESS_1]:11000\r\n    }\r\n    \r\n    # Virtual machine #2 - \"example2-com\"\r\n    https://[DOMAIN_NAME_2]:8443 {\r\n        reverse_proxy https://[IP_ADDRESS_2]:8080 {\r\n            transport http {\r\n                tls_insecure_skip_verify\r\n            }\r\n        }\r\n    }\r\n    https://[DOMAIN_NAME_2]:443 {\r\n        reverse_proxy [IP_ADDRESS_2]:11000\r\n    }\r\n\r\n    # (Add more configurations here if you set up more than two VMs!)\r\n    ```\r\n    After making this change, you'll need to restart Caddy:\r\n   ```shell\r\n   systemctl restart caddy\r\n   ```\r\n9. That's it! Now, all that's left is to set up your instances through the AIO interface as usual by visiting `https://example1.com:8443` and `https://example2.com:8443` in a browser. Once you're finished going through each setup, you can access your new instances simply through their domain names. You can host as many instances with as many domain names as you want this way, as long as you have enough system resources. Enjoy!\r\n    \r\n    <details><summary><strong>A few extra tips for managing this setup</strong></summary>\r\n        <ul>\r\n            <li>You can easily connect to a VM to perform maintenance using this command (<strong>on the host physical machine</strong>): <pre><code>virsh console --domain [VM_NAME]</code></pre></li>\r\n            <li>If you chose to install an SSH Server, you can SSH in using this command (<strong>on the host physical machine</strong>): <pre><code>ssh [NONROOT_USER]@[IP_ADDRESS] # By default, OpenSSH does not allow logging in as root</code></pre></li>\r\n            <li>If you mess up the configuration of a VM, you may wish to completely delete it and start fresh with a new one. <strong>THIS WILL DELETE ALL DATA ASSOCIATED WITH THE VM INCLUDING ANYTHING IN YOUR AIO DATADIR!</strong> If you are sure you would like to do this, run (<strong>on the host physical machine</strong>): <pre><code>virsh destroy --domain [VM_NAME] ; virsh undefine --nvram --domain [VM_NAME] && rm -rfi /var/lib/libvirt/images/[VM_NAME].qcow2</code></pre></li>\r\n            <li>Using Nextcloud Talk will require some extra configuration. Back when you set up your VMs, they were (by default) configured with NAT, meaning they are in their own subnet. The VMs must each instead be bridged, so that your router may directly \"see\" them (as if they were real, physical devices on your network), and each AIO instance inside each VM must be configured with a different Talk port (like 3478, 3479, etc.). You should have already set these port numbers (back when you first configured the VM in step 4 above), but if you still need to set (or want to change) these values, you can remove the mastercontainer and re-run the initial \"docker run\" command with a modified Talk port <a href=\"https://github.com/nextcloud/all-in-one#how-to-adjust-the-talk-port\">like so</a>. Then, the Talk port for EACH instance needs to be forwarded in your router's settings DIRECTLY to the VM hosting the instance (completely bypassing your host physical machine/reverse proxy). And finally, inside an admin-privileged account (such as the default \"admin\" account) in each instance, you must visit <strong>https://[DOMAIN_NAME]/settings/admin/talk</strong> then find the STUN/TURN Settings, and from there set the proper values. If this is too complicated, it may be easier to use public STUN/TURN servers, but I have not tested any of this, rather I'm just sharing what I have found so far (more info available <a href=\"https://github.com/nextcloud/all-in-one/discussions/2517\">here</a>). If you have figured this out or if any of this information is incorrect, please edit this section!</li>\r\n            <li>Configuring daily automatic backups is a bit more involved with this setup. But for the occasional manual borg backup, you can connect a physical SSD/HDD via a cheap USB SATA adapter/dock to a free USB port on your host physical machine, and then use these commands to pass the disk through to a VM of your choosing (<strong>on the host physical machine and on the VM</strong>): <pre><code>virsh attach-device --live --domain [VM_NAME] --file [USB_DEVICE_DEFINITION.xml]\r\n   virsh console --domain [VM_NAME]\r\n   # (Login to the VM with root privileges)\r\n   mkdir -p /mnt/[MOUNT_NAME]\r\n   mount /dev/disk/by-label/[DISK_NAME] /mnt/[MOUNT_NAME]</code></pre></li>\r\n            To create the XML device definition file, see <a href=\"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/virtualization_administration_guide/sect-managing_guest_virtual_machines_with_virsh-attaching_and_updating_a_device_with_virsh\">this short guide</a>. An SSD/HDD is recommended, but nothing is stopping you from using something as simple as a flash drive for testing if you really want. Finally, to actually perform a manual backup, make sure your disk is properly mounted and then simply use the AIO interface to perform the backup.\r\n            <li>If you want to shave off around 8-10 seconds of total boot time when you reboot your host physical machine, a simple trick is to lower the GRUB_TIMEOUT from the default five seconds to one second, on both the host physical machine and each of the VMs. You can also remove the delay, but it's generally safer to leave at least one second. (Always be extremely careful when editing GRUB config, especially on the host physical machine, as an incorrect configuration can prevent your device from booting!)</li>\r\n        </ul>\r\n    </details>\r\n"
        },
        {
          "name": "nextcloud-aio-helm-chart",
          "type": "tree",
          "content": null
        },
        {
          "name": "php",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 92.8427734375,
          "content": "# Nextcloud All-in-One\nThe official Nextcloud installation method. Nextcloud AIO provides easy deployment and maintenance with most features included in this one Nextcloud instance. \n\nIncluded are:\n- Nextcloud\n- High performance backend for Nextcloud Files\n- Nextcloud Office (optional)\n- High performance backend for Nextcloud Talk and TURN-server (optional)\n- Nextcloud Talk Recording-server (optional)\n- Backup solution (optional, based on [BorgBackup](https://github.com/borgbackup/borg#what-is-borgbackup))\n- Imaginary (optional, for previews of heic, heif, illustrator, pdf, svg, tiff and webp)\n- ClamAV (optional, Antivirus backend for Nextcloud)\n- Fulltextsearch (optional)\n- Whiteboard (optional)\n- Docker Socket Proxy (optional, needed for [Nextcloud App API](https://github.com/cloud-py-api/app_api#nextcloud-appapi))\n<details><summary>And much more:</summary>\n\n- Simple web interface included that enables easy installation and maintenance\n- [Easy updates included](https://github.com/nextcloud/all-in-one#how-to-update-the-containers)\n- Update and backup notifications included\n- Daily backups can be enabled from the AIO interface which also allows updating all containers, Nextcloud and its apps afterwards automatically\n- Instance restore from backup archive via the AIO interface included (you only need the archive and the password in order to restore the whole instance on a new AIO instance)\n- APCu as local cache\n- Redis as distributed cache and for file locking\n- Postgresql as database\n- PHP-FPM with performance-optimized config (e.g. Opcache and JIT enabled by default)\n- A+ security in Nextcloud security scan\n- Ready to be used behind existing [Reverse proxies](https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md)\n- Can be used behind [Cloudflare Tunnel](https://github.com/nextcloud/all-in-one#how-to-run-nextcloud-behind-a-cloudflare-tunnel)\n- Can be used inside [Tailscale network](https://github.com/nextcloud/all-in-one/discussions/5439)\n- Ready for big file uploads up to 10 GB on public links, [adjustable](https://github.com/nextcloud/all-in-one#how-to-adjust-the-upload-limit-for-nextcloud) (logged in users can upload much bigger files using the webinterface or the mobile/desktop clients since chunking is used in that case)\n- PHP and web server timeouts set to 3600s, [adjustable](https://github.com/nextcloud/all-in-one#how-to-adjust-the-max-execution-time-for-nextcloud) (important for big file uploads)\n- Defaults to a max of 512 MB RAM per PHP process, [adjustable](https://github.com/nextcloud/all-in-one#how-to-adjust-the-php-memory-limit-for-nextcloud)\n- Automatic TLS included (by using Let's Encrypt)\n- Brotli compression enabled by default for javascript, css and svg files which reduces Nextcloud load times\n- HTTP/2 and HTTP/3 enabled\n- \"Pretty URLs\" for Nextcloud are enabled by default (removes the index.php from all links)\n- Video previews work out of the box and when Imaginary is enabled, many recent image formats as well!\n- Only one domain and not multiple domains are required for everything to work (usually you would need to have one domain for each service which is much more complex)\n- [Adjustable location](https://github.com/nextcloud/all-in-one#how-to-change-the-default-location-of-nextclouds-datadir) of Nextcloud's datadir (e.g. good for easy file-sharing with host system on Windows and MacOS)\n- By default confined (good for security) but can [allow access to additional storages](https://github.com/nextcloud/all-in-one#how-to-allow-the-nextcloud-container-to-access-directories-on-the-host) in order to enable the usage of the local external storage feature\n- Possibility included to [adjust default installed Nextcloud apps](https://github.com/nextcloud/all-in-one#how-to-change-the-nextcloud-apps-that-are-installed-on-the-first-startup)\n- Nextcloud installation is not read only - that means you can apply patches if you should need them (instead of having to wait for the next release for them getting applied)\n- `ffmpeg`, `smbclient`, `libreoffice` and `nodejs` are included by default\n- Possibility included to [permanently add additional OS packages into the Nextcloud container](https://github.com/nextcloud/all-in-one#how-to-change-the-nextcloud-apps-that-are-installed-on-the-first-startup) without having to build your own Docker image\n- Possibility included to [permanently add additional PHP extensions into the Nextcloud container](https://github.com/nextcloud/all-in-one#how-to-add-php-extensions-permanently-to-the-nextcloud-container) without having to build your own Docker image\n- Possibility included to [pass the needed device for hardware transcoding](https://github.com/nextcloud/all-in-one#how-to-enable-hardware-acceleration-for-nextcloud) to the Nextcloud container\n- Possibility included to [store all docker related files on a separate drive](https://github.com/nextcloud/all-in-one#how-to-store-the-filesinstallation-on-a-separate-drive)\n- [Additional features can be added very easily](https://github.com/nextcloud/all-in-one/tree/main/community-containers#community-containers)\n- [LDAP can be used as user backend for Nextcloud](https://github.com/nextcloud/all-in-one/tree/main#ldap)\n- Migration from any former Nextcloud installation to AIO is possible. See [this documentation](https://github.com/nextcloud/all-in-one/blob/main/migration.md)\n- [Fail2Ban can be added](https://github.com/nextcloud/all-in-one#fail2ban)\n- [phpMyAdmin, Adminer or pgAdmin can be added](https://github.com/nextcloud/all-in-one#phpmyadmin-adminer-or-pgadmin)\n- [Mail server can be added](https://github.com/nextcloud/all-in-one#mail-server)\n- Nextcloud can be [accessed locally via the domain](https://github.com/nextcloud/all-in-one#how-can-i-access-nextcloud-locally)\n- Can [be installed locally](https://github.com/nextcloud/all-in-one/blob/main/local-instance.md) (if you don't want or cannot make the instance publicly reachable)\n- [IPv6-ready](https://github.com/nextcloud/all-in-one/blob/main/docker-ipv6-support.md)\n- Can be used with [Docker rootless](https://github.com/nextcloud/all-in-one/blob/main/docker-rootless.md) (good for additional security)\n- Runs on all platforms Docker supports (e.g. also on Windows and Macos)\n- Included containers easy to debug by having the possibility to check their logs directly from the AIO interface\n- [Docker-compose ready](./compose.yaml)\n- Can be installed [without a container having access to the docker socket](https://github.com/nextcloud/all-in-one/tree/main/manual-install)\n- Can be installed with [Docker Swarm](https://github.com/nextcloud/all-in-one#can-i-run-this-with-docker-swarm)\n- Can be installed with [Kubernetes](https://github.com/nextcloud/all-in-one/tree/main/nextcloud-aio-helm-chart)\n- Almost all included containers Alpine Linux based (good for security and size)\n- Many of the included containers run as non-root user (good for security)\n- Many of the included containers have a read-only root-FS (good for security)\n- Included containers run in its own docker network (good for security) and only really necessary ports are exposed on the host\n- [Multiple instances on one server](https://github.com/nextcloud/all-in-one/blob/main/multiple-instances.md) are doable without having to deal with VMs\n- Adjustable backup path or remote borg repository from the AIO interface (good to put the backups e.g. on a different drive if using a local backup path)\n- Possibility included to also back up external Docker Volumes or Host paths (can be used for host backups)\n- Borg backup can be completely managed from the AIO interface, including backup creation, backup restore, backup integrity check and integrity-repair\n- Other forms of [remote backup](https://github.com/nextcloud/all-in-one#are-remote-borg-backups-supported) are indirectly possible\n- Updates and backups can be [run from an external script](https://github.com/nextcloud/all-in-one#how-to-stopstartupdate-containers-or-trigger-the-daily-backup-from-a-script-externally). See [this documentation](https://github.com/nextcloud/all-in-one#how-to-enable-automatic-updates-without-creating-a-backup-beforehand) for a complete example.\n\n</details>\n\n## Screenshots\n| First setup | After installation |\n|---|---|\n| ![image](https://github.com/user-attachments/assets/6ef5d7b5-86f2-402c-bc6c-b633af2ca7dd) | ![image](https://github.com/user-attachments/assets/939d0fdf-436f-433d-82d3-27548263a040) |\n\n## How to use this?\nThe following instructions are meant for installations without a web server or reverse proxy (like Apache, Nginx, Caddy, Cloudflare Tunnel and else) already being in place. If you want to run AIO behind a web server or reverse proxy (like Apache, Nginx, Caddy, Cloudflare Tunnel and else), see the [reverse proxy documentation](https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md). Also, the instructions below are especially meant for Linux. For macOS see [this](#how-to-run-aio-on-macos), for Windows see [this](#how-to-run-aio-on-windows) and for Synology see [this](#how-to-run-aio-on-synology-dsm).\n1. Install Docker on your Linux installation by following the official documentation: https://docs.docker.com/engine/install/#supported-platforms.\n>[!WARNING]\n> You could use the convenience script below to install docker. However we recommend to not blindly download and execute scripts as sudo. But if you feel like it, you can of course use it. See below: \n\n<details>\n    <summary>Using the convenience script</summary>\n\n```sh\ncurl -fsSL https://get.docker.com | sudo sh\n```\n\n</details>\n\n2. If you need ipv6 support, you should enable it by following https://github.com/nextcloud/all-in-one/blob/main/docker-ipv6-support.md.\n3. Run the command below in order to start the container on Linux and without a web server or reverse proxy (like Apache, Nginx, Caddy, Cloudflare Tunnel and else) already in place:\n    ```\n    # For Linux and without a web server or reverse proxy (like Apache, Nginx, Caddy, Cloudflare Tunnel and else) already in place:\n    sudo docker run \\\n    --init \\\n    --sig-proxy=false \\\n    --name nextcloud-aio-mastercontainer \\\n    --restart always \\\n    --publish 80:80 \\\n    --publish 8080:8080 \\\n    --publish 8443:8443 \\\n    --volume nextcloud_aio_mastercontainer:/mnt/docker-aio-config \\\n    --volume /var/run/docker.sock:/var/run/docker.sock:ro \\\n    nextcloud/all-in-one:latest\n    ```\n    <details>\n    <summary>Explanation of the command</summary>\n\n    - `sudo docker run` This command spins up a new docker container. Docker commands can optionally be used without `sudo` if the user is added to the docker group (this is not the same as docker rootless, see FAQ below).\n    - `--init` This option makes sure that no zombie-processes are created, ever. See [the Docker documentation](https://docs.docker.com/reference/cli/docker/container/run/#init).\n    - `--sig-proxy=false` This option allows to exit the container shell that gets attached automatically when using `docker run` by using `[CTRL] + [C]` without shutting down the container.\n    - `--name nextcloud-aio-mastercontainer` This is the name of the container. This line is not allowed to be changed, since mastercontainer updates would fail.\n    - `--restart always` This is the \"restart policy\". `always` means that the container should always get started with the Docker daemon. See the Docker documentation for further detail about restart policies: https://docs.docker.com/config/containers/start-containers-automatically/\n    - `--publish 80:80` This means that port 80 of the container should get published on the host using port 80. It is used for getting valid certificates for the AIO interface if you want to use port 8443. It is not needed if you run AIO behind a web server or reverse proxy and can get removed in that case as you can simply use port 8080 for the AIO interface then.\n    - `--publish 8080:8080` This means that port 8080 of the container should get published on the host using port 8080. This port is used for the AIO interface and uses a self-signed certificate by default. You can also use a different host port if port 8080 is already used on your host, for example `--publish 8081:8080` (only the first port can be changed for the host, the second port is for the container and must remain at 8080).\n    - `--publish 8443:8443` This means that port 8443 of the container should get published on the host using port 8443. If you publish port 80 and 8443 to the public internet, you can access the AIO interface via this port with a valid certificate. It is not needed if you run AIO behind a web server or reverse proxy and can get removed in that case as you can simply use port 8080 for the AIO interface then.\n    - `--volume nextcloud_aio_mastercontainer:/mnt/docker-aio-config` This means that the files that are created by the mastercontainer will be stored in a docker volume that is called `nextcloud_aio_mastercontainer`. This line is not allowed to be changed, since built-in backups would fail later on.\n    - `--volume /var/run/docker.sock:/var/run/docker.sock:ro` The docker socket is mounted into the container which is used for spinning up all the other containers and for further features. It needs to be adjusted on Windows/macOS and on docker rootless. See the applicable documentation on this. If adjusting, don't forget to also set `WATCHTOWER_DOCKER_SOCKET_PATH`! If you dislike this, see https://github.com/nextcloud/all-in-one/tree/main/manual-install.\n    - `nextcloud/all-in-one:latest` This is the docker container image that is used.\n    - Further options can be set using environment variables, for example `--env NEXTCLOUD_DATADIR=\"/mnt/ncdata\"` (This is an example for Linux. See [this](https://github.com/nextcloud/all-in-one#how-to-change-the-default-location-of-nextclouds-datadir) for other OS' and for an explanation of what this value does. This specific one needs to be specified upon the first startup if you want to change it to a specific path instead of the default Docker volume). To see explanations and examples for further variables (like changing the location of Nextcloud's datadir or mounting some locations as external storage into the Nextcloud container), read through this readme and look at the docker-compose file: https://github.com/nextcloud/all-in-one/blob/main/compose.yaml\n    </details>\n\n    Note: You may be interested in adjusting Nextcloud’s datadir to store the files in a different location than the default docker volume. See [this documentation](https://github.com/nextcloud/all-in-one#how-to-change-the-default-location-of-nextclouds-datadir) on how to do it.\n\n4. After the initial startup, you should be able to open the Nextcloud AIO Interface now on port 8080 of this server.<br>\nE.g. `https://ip.address.of.this.server:8080`<br>\n⚠️ **Important:** do always use an ip-address if you access this port and not a domain as HSTS might block access to it later! (It is also expected that this port uses a self-signed certificate due to security concerns which you need to accept in your browser)<br><br>\nIf your firewall/router has port 80 and 8443 open/forwarded and you point a domain to your server, you can get a valid certificate automatically by opening the Nextcloud AIO Interface via:<br>\n`https://your-domain-that-points-to-this-server.tld:8443`\n5. Please do not forget to open port `3478/TCP` and `3478/UDP` in your firewall/router for the Talk container!\n\n## FAQ\n### How does it work?\nNextcloud AIO is inspired by projects like Portainer that manage the docker daemon by talking to it through the docker socket directly. This concept allows a user to install only one container with a single command that does the heavy lifting of creating and managing all containers that are needed in order to provide a Nextcloud installation with most features included. It also makes updating a breeze and is not bound to the host system (and its slow updates) anymore as everything is in containers. Additionally, it is very easy to handle from a user perspective because a simple interface for managing your Nextcloud AIO installation is provided.\n\n### How to contribute?\nSee [this issue](https://github.com/nextcloud/all-in-one/issues/5251) for a list of feature requests that need help by contributors.\n\n### How many users are possible?\nUp to 100 users are free, more are possible with [Nextcloud Enterprise](https://nextcloud.com/all-in-one/)\n\n### Are reverse proxies supported?\nYes. Please refer to the following documentation on this: [reverse-proxy.md](https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md)\n\n### Which CPU architectures are supported?\nYou can check this on Linux by running: `uname -m`\n- x86_64/x64/amd64\n- aarch64/arm64/armv8 (Note: ClamAV is currently not supported on this CPU architecture)\n\n### Which ports are mandatory to be open in your firewall/router?\nOnly those (if you access the Mastercontainer Interface internally via port 8080):\n- `443/TCP` for the Apache container\n- `443/UDP` if you want to enable http3 for the Apache container\n- `3478/TCP` and `3478/UDP` for the Talk container\n\n### Explanation of used ports:\n- `8080/TCP`: Mastercontainer Interface with self-signed certificate (works always, also if only access via IP-address is possible, e.g. `https://ip.address.of.this.server:8080/`) ⚠️ **Important:** do always use an ip-address if you access this port and not a domain as HSTS might block access to it later! (It is also expected that this port uses a self-signed certificate due to security concerns which you need to accept in your browser)\n- `80/TCP`: redirects to Nextcloud (is used for getting the certificate via ACME http-challenge for the Mastercontainer)\n- `8443/TCP`: Mastercontainer Interface with valid certificate (only works if port 80 and 8443 are open/forwarded in your firewall/router and you point a domain to your server. It generates a valid certificate then automatically and access via e.g. `https://public.domain.com:8443/` is possible.)\n- `443/TCP`: will be used by the Apache container later on and needs to be open/forwarded in your firewall/router\n- `443/UDP`: will be used by the Apache container later on and needs to be open/forwarded in your firewall/router if you want to enable http3\n- `3478/TCP` and `3478/UDP`: will be used by the Turnserver inside the Talk container and needs to be open/forwarded in your firewall/router\n\n### How to run AIO on macOS?\nOn macOS, there is only one thing different in comparison to Linux: instead of using `--volume /var/run/docker.sock:/var/run/docker.sock:ro`, you need to use `--volume /var/run/docker.sock.raw:/var/run/docker.sock:ro` to run it after you installed [Docker Desktop](https://www.docker.com/products/docker-desktop/) (and don't forget to [enable ipv6](https://github.com/nextcloud/all-in-one/blob/main/docker-ipv6-support.md) if you should need that). Apart from that it should work and behave the same like on Linux.\n\nAlso, you may be interested in adjusting Nextcloud's Datadir to store the files on the host system. See [this documentation](https://github.com/nextcloud/all-in-one#how-to-change-the-default-location-of-nextclouds-datadir) on how to do it.\n\n### How to run AIO on Windows?\nOn Windows, install [Docker Desktop](https://www.docker.com/products/docker-desktop/) (and don't forget to [enable ipv6](https://github.com/nextcloud/all-in-one/blob/main/docker-ipv6-support.md) if you should need that) and run the following command in the command prompt:\n\n```\ndocker run ^\n--init ^\n--sig-proxy=false ^\n--name nextcloud-aio-mastercontainer ^\n--restart always ^\n--publish 80:80 ^\n--publish 8080:8080 ^\n--publish 8443:8443 ^\n--volume nextcloud_aio_mastercontainer:/mnt/docker-aio-config ^\n--volume //var/run/docker.sock:/var/run/docker.sock:ro ^\nnextcloud/all-in-one:latest\n```\n\nAlso, you may be interested in adjusting Nextcloud's Datadir to store the files on the host system. See [this documentation](https://github.com/nextcloud/all-in-one#how-to-change-the-default-location-of-nextclouds-datadir) on how to do it.\n\n> [!NOTE]  \n> Almost all commands in this project's documentation use `sudo docker ...`. Since `sudo` is not available on Windows, you simply remove `sudo` from the commands and they should work.  \n\n### How to run AIO on Synology DSM\nOn Synology, there are two things different in comparison to Linux: instead of using `--volume /var/run/docker.sock:/var/run/docker.sock:ro`, you need to use `--volume /volume1/docker/docker.sock:/var/run/docker.sock:ro` to run it. You also need to add `--env WATCHTOWER_DOCKER_SOCKET_PATH=\"/volume1/docker/docker.sock\"`to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`). Apart from that it should work and behave the same like on Linux. Obviously the Synology Docker GUI will not work with that so you will need to either use SSH or create a user-defined script task in the task scheduler as the user 'root' in order to run the command.\n\n> [!NOTE]  \n> It is possible that the docker socket on your Synology is located in `/var/run/docker.sock` like the default on Linux. Then you can just use the Linux command without having to change anything - you will notice this when you try to start the container and it says that the bind mount failed. E.g. `docker: Error response from daemon: Bind mount failed: '/volume1/docker/docker.sock' does not exists.` \n\nAlso, you may be interested in adjusting Nextcloud's Datadir to store the files on the host system. See [this documentation](https://github.com/nextcloud/all-in-one#how-to-change-the-default-location-of-nextclouds-datadir) on how to do it.\n\nYou'll also need to adjust Synology's firewall, see below:\n\n<details>\n<summary>Click here to expand</summary>\n\nThe Synology DSM is vulnerable to attacks with it's open ports and login interfaces, which is why a firewall setup is always recommended. If a firewall is activated it is necessary to have exceptions for ports 80,443, the subnet of the docker bridge which includes the Nextcloud containers, your public static IP (if you don't use DDNS) and if applicable your NC-Talk ports 3478 TCP+UDP:\n\n![Screenshot 2023-01-19 at 14 13 48](https://user-images.githubusercontent.com/70434961/213677995-71a9f364-e5d2-49e5-831e-4579f217c95c.png)\n\nIf you have the NAS setup on your local network (which is most often the case) you will need to setup the Synology DNS to be able to access Nextcloud from your network via its domain. Also don't forget to add the new DNS to your DHCP server and your fixed IP settings:\n \n![Screenshot 2023-01-20 at 12 13 44](https://user-images.githubusercontent.com/70434961/213683295-0b39a2bd-7a26-414c-a408-127dd4f07826.png)\n</details>\n\n### How to run AIO with Portainer?\nThe easiest way to run it with Portainer on Linux is to use Portainer's stacks feature and use [this docker-compose file](./compose.yaml) in order to start AIO correctly. \n\n### Can I run AIO on TrueNAS SCALE?\n\nWith the Truenas Scale Release 24.10.0 (which was officially released on October 29th 2024 as a stable release) IX Systems ditched the Kubernetes integration and implemented a fully working docker environment.\n\nFor a more complete guide, see this guide by @zybster: https://github.com/nextcloud/all-in-one/discussions/5506\n\nOn older TrueNAS SCALE releases with Kubernetes environment, there are two ways to run AIO. The preferred one is to run AIO inside a VM. This is necessary since they do not expose the docker socket for containers on the host, you also cannot use docker-compose on it thus and it is also not possible to run custom helm-charts that are not explicitly written for TrueNAS SCALE.\n\nAnother but untested way is to install Portainer on your TrueNAS SCALE from here https://truecharts.org/charts/stable/portainer/installation-notes and add the Helm-chart repository https://nextcloud.github.io/all-in-one/ into Portainer by following https://docs.portainer.io/user/kubernetes/helm. More docs on AIOs Helm Chart are available here: https://github.com/nextcloud/all-in-one/tree/main/nextcloud-aio-helm-chart#nextcloud-aio-helm-chart.\n\n### Notes on Cloudflare (proxy/tunnel)\n- Cloudflare Proxy and Cloudflare Tunnel both require Cloudflare to perform TLS termination on their side and thus decrypt all the traffic on their infrastructure. This is a privacy concern and you will need to look for other solutions if it's unacceptable for you.\n- Using Cloudflare Tunnel might potentially slow down Nextcloud since local access via the configured domain is not possible because TLS termination is in that case offloaded to Cloudflare's infrastructure. There is no way to disable this behavior in Cloudflare Tunnel.\n- It is known that the domain validation may not work correctly behind Cloudflare since Cloudflare might block the validation attempt. You can simply skip it in that case by following: https://github.com/nextcloud/all-in-one#how-to-skip-the-domain-validation\n- Make sure to [disable Cloudflares Rocket Loader feature](https://help.nextcloud.com/t/login-page-not-working-solved/149417/8) as otherwise Nextcloud's login prompt will not be shown.\n- Cloudflare only supports uploading files up to 100 MB in the free plan, if you try to upload bigger files you will get an error (413 - Payload Too Large) if no chunking is used (e.g. for public uploads in the web, or if chunks are configured to be bigger than 100 MB in the clients or the web). If you need to upload bigger files, you need to disable the proxy option in your DNS settings. Note that this will both disable Cloudflare DDoS protection and Cloudflare Tunnel as these services require the proxy option to be enabled.\n- If using Cloudflare Tunnel and the Nextcloud Desktop Client [Set Chunking on Nextcloud Desktop Client](https://github.com/nextcloud/desktop/issues/4271#issuecomment-1159578065)\n- Cloudflare only allows a max timeout of 100s for requests which is not configurable. This means that any server-side processing e.g. for assembling chunks for big files during upload that take longer than 100s will simply not work. See https://github.com/nextcloud/server/issues/19223. If you need to upload big files reliably, you need to disable the proxy option in your DNS settings. Note that this will both disable Cloudflare DDoS protection and Cloudflare Tunnel as these services require the proxy option to be enabled.\n- It is known that the in AIO included collabora (Nextcloud Office) does not work out of the box behind Cloudflare. To make it work, you need to add all [Cloudflare IP-ranges](https://www.cloudflare.com/ips/) to the wopi-allowlist in `https://yourdomain.com/settings/admin/richdocuments`\n- Cloudflare Proxy might block the Turnserver for Nextcloud Talk from working correctly. You might want to disable Cloudflare Proxy thus. See https://github.com/nextcloud/all-in-one/discussions/2463#discussioncomment-5779981\n- The built-in turn-server for Nextcloud Talk will not work behind Cloudflare Tunnel since it needs a separate port (by default 3478 or as chosen) available on the same domain. If you still want to use the feature, you will need to install your own turnserver or use a publicly available one and adjust and test your stun and turn settings in `https://yourdomain.com/settings/admin/talk`.\n- If you get an error in Nextcloud's admin overview that the HSTS header is not set correctly, you might need to enable it in Cloudflare manually.\n- If you are using AIO's built-in Reverse Proxy and don't use your own, then the certificate issuing may possibly not work out-of-the-box because Cloudflare might block the attempt. In that case you need to disable the Proxy feature at least temporarily in order to make it work. Note that this isn't an option if you need Cloudflare Tunnel as disabling the proxy would also disable Cloudflare Tunnel which would in turn make your server unreachable for the verification. See https://github.com/nextcloud/all-in-one/discussions/1101.\n\n### How to run Nextcloud behind a Cloudflare Tunnel?\nAlthough it does not seems like it is the case but from AIO perspective a Cloudflare Tunnel works like a reverse proxy. So please follow the [reverse proxy documentation](./reverse-proxy.md) where is documented how to make it run behind a Cloudflare Tunnel. However please see the [caveats](https://github.com/nextcloud/all-in-one#notes-on-cloudflare-proxytunnel) before proceeding.\n\n### How to run Nextcloud inside a Tailscale network?\nFor a reverse proxy example guide for Tailscale, see this guide by @flll: https://github.com/nextcloud/all-in-one/discussions/5439\n\n### Disrecommended VPS providers\n- *Older* Strato VPS using Virtuozzo caused problems though ones from Q3 2023 and later should work.\n  If your VPS has a `/proc/user_beancounters` file and a low `numproc` limit set in it\n  your server will likely misbehave once it reaches this limit\n  which is very quickly reached by AIO, see [here](https://github.com/nextcloud/all-in-one/discussions/1747#discussioncomment-4716164).\n- Hostingers VPS seem to miss a specific Kernel feature which is required for AIO to run correctly. See [here](https://help.nextcloud.com/t/help-installing-nc-via-aio-on-vps/153956).\n\n### Recommended VPS\nIn general recommended VPS are those that are KVM/non-virtualized as Docker should work best on them.\n\n### Note on storage options\n- SD-cards are disrecommended for AIO since they cripple the performance and they are not meant for many write operations which is needed for the database and other parts\n- SSD storage is recommended\n- HDD storage should work as well but is of course much slower than SSD storage\n\n### How to get Nextcloud running using the ACME DNS-challenge?\nYou can install AIO in reverse proxy mode where is also documented how to get it running using the ACME DNS-challenge for getting a valid certificate for AIO. See the [reverse proxy documentation](./reverse-proxy.md). (Meant is the `Caddy with ACME DNS-challenge` section). Also see https://github.com/dani-garcia/vaultwarden/wiki/Running-a-private-vaultwarden-instance-with-Let%27s-Encrypt-certs#getting-a-custom-caddy-build for additional docs on this topic.\n\n### How to run Nextcloud locally? No domain wanted, or wanting intranet access within your LAN.\nIf you do not want to open Nextcloud to the public internet, you may have a look at the following documentation on how to set it up locally: [local-instance.md](./local-instance.md), but keep in mind you're still required to have https working properly.\n\n### Can I use an ip-address for Nextcloud instead of a domain?\nNo and it will not be added. If you only want to run it locally, you may have a look at the following documentation: [local-instance.md](./local-instance.md) for configuration without a traditional domain. Or, [consider using NextcloudPi](nextcloudpi.com) for ip-address access locally (it bundles fewer features than AIO).\n\n### Can I run AIO offline or in an airgapped system?\nNo. This is not possible and will not be added due to multiple reasons: update checks, app installs via app-store, downloading additional docker images on demand and more.\n\n### Are self-signed certificates supported for Nextcloud?\nNo and they will not be. If you want to run it locally, without opening Nextcloud to the public internet, please have a look at the [local instance documentation](./local-instance.md).\n\n### Can I use AIO with multiple domains?\nNo and it will not be added. However you can use [this feature](https://github.com/nextcloud/all-in-one/blob/main/multiple-instances.md) in order to create multiple AIO instances, one for each domain.\n\n### Are other ports than the default 443 for Nextcloud supported?\nNo and they will not be. Please use a dedicated domain for Nextcloud and set it up correctly by following the [reverse proxy documentation](./reverse-proxy.md). If port 443 and/or 80 is blocked for you, you may use the a Cloudflare Tunnel if you want to publish it online. You could also use the ACME DNS-challenge to get a valid certificate. However in all cases the Nextcloud interface will redirect you to port 443.\n\n### Can I run Nextcloud in a subdirectory on my domain?\nNo and it will not be added. Please use a dedicated (sub-)domain for Nextcloud and set it up correctly by following the [reverse proxy documentation](./reverse-proxy.md).\n\n### How can I access Nextcloud locally?\nPlease note that local access is not possible if you are running AIO behind Cloudflare Tunnel since TLS proxying is in that case offloaded to Cloudflares infrastructure. You can fix this by setting up your own reverse proxy that handles TLS proxying locally and will make the steps below work.\n\nPlease make sure that if you are running AIO behind a reverse proxy, that the reverse proxy is configured to use port 443 on the server that runs it. Otherwise the steps below will not work.\n\nNow that this is out of the way, the recommended way how to access Nextcloud locally, is to set up a local dns-server like a pi-hole and set up a custom dns-record for that domain that points to the internal ip-adddress of your server that runs Nextcloud AIO. Below are some guides:\n- https://www.howtogeek.com/devops/how-to-run-your-own-dns-server-on-your-local-network/\n- https://help.nextcloud.com/t/need-help-to-configure-internal-access/156075/6\n- https://howchoo.com/pi/pi-hole-setup together with https://web.archive.org/web/20221203223505/https://docs.callitkarma.me/posts/PiHole-Local-DNS/\n- https://dockerlabs.collabnix.com/intermediate/networking/Configuring_DNS.html\nApart from that there is now a community container that can be added to the AIO stack: https://github.com/nextcloud/all-in-one/tree/main/community-containers/pi-hole\n\n### How to skip the domain validation?\nIf you are completely sure that you've configured everything correctly and are not able to pass the domain validation, you may skip the domain validation by adding `--env SKIP_DOMAIN_VALIDATION=true` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`! If it was started already, you will need to stop the mastercontainer, remove it (no data will be lost) and recreate it using the docker run command that you initially used).\n\n### How to resolve firewall problems with Fedora Linux, RHEL OS, CentOS, SUSE Linux and others?\nIt is known that Linux distros that use [firewalld](https://firewalld.org) as their firewall daemon have problems with docker networks. In case the containers are not able to communicate with each other, you may change your firewalld to use the iptables backend by running:\n```\nsudo sed -i 's/FirewallBackend=nftables/FirewallBackend=iptables/g' /etc/firewalld/firewalld.conf\nsudo systemctl restart firewalld docker\n```\nAfterwards it should work.<br>\n\nSee https://dev.to/ozorest/fedora-32-how-to-solve-docker-internal-network-issue-22me for more details on this. This limitation is even mentioned on the official firewalld website: https://firewalld.org/#who-is-using-it\n\n### Are there known problems when SELinux is enabled?\nYes. If SELinux is enabled, you might need to add the `--security-opt label:disable` option to the docker run command of the mastercontainer in order to allow it to access the docker socket (or `security_opt: [\"label:disable\"]` in compose.yaml). See https://github.com/nextcloud/all-in-one/discussions/485\n\n### How to run `occ` commands?\nSimply run the following: `sudo docker exec --user www-data -it nextcloud-aio-nextcloud php occ your-command`. Of course `your-command` needs to be exchanged with the command that you want to run.\n\n### How to resolve `Security & setup warnings displays the \"missing default phone region\" after initial install`?\nSimply run the following command: `sudo docker exec --user www-data nextcloud-aio-nextcloud php occ config:system:set default_phone_region --value=\"yourvalue\"`. Of course you need to modify `yourvalue` based on your location. Examples are `DE`, `US` and `GB`. See this list for more codes: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements\n\n### How to run multiple AIO instances on one server?\nSee [multiple-instances.md](./multiple-instances.md) for some documentation on this.\n\n### Bruteforce protection FAQ\nNextcloud features a built-in bruteforce protection which may get triggered and will block an ip-address or disable a user. You can unblock an ip-address by running `sudo docker exec --user www-data -it nextcloud-aio-nextcloud php occ security:bruteforce:reset <ip-address>` and enable a disabled user by running `sudo docker exec --user www-data -it nextcloud-aio-nextcloud php occ user:enable <name of user>`. See https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/occ_command.html#security for further information.\n\n### Update policy\nThis project values stability over new features. That means that when a new major Nextcloud update gets introduced, we will wait at least until the first patch release, e.g. `24.0.1` is out before upgrading to it. Also we will wait with the upgrade until all important apps are compatible with the new major version. Minor or patch releases for Nextcloud and all dependencies as well as all containers will be updated to new versions as soon as possible but we try to give all updates first a good test round before pushing them. That means that it can take around 2 weeks before new updates reach the `latest` channel. If you want to help testing, you can switch to the `beta` channel by following [this documentation](#how-to-switch-the-channel) which will also give you the updates earlier.\n\n### How to switch the channel?\nYou can switch to a different channel like e.g. the beta channel or from the beta channel back to the latest channel by stopping the mastercontainer, removing it (no data will be lost) and recreating the container using the same command that you used initially to create the mastercontainer. You simply need to change the last line `nextcloud/all-in-one:latest` to `nextcloud/all-in-one:beta` and vice versa.\n\n### How to update the containers?\nIf we push new containers to `latest`, you will see in the AIO interface below the `containers` section that new container updates were found. In this case, just press `Stop containers` and `Start and update containers` in order to update the containers. The mastercontainer has its own update procedure though. See below. And don't forget to back up the current state of your instance using the built-in backup solution before starting the containers again! Otherwise you won't be able to restore your instance easily if something should break during the update. \n\nIf a new `mastercontainer` update was found, you'll see a note below the `Stop containers` button that allows to show the changelog. If you click that button and the containers are stopped, you will see a new button that allows to update the mastercontainer. After doing so and after the update is gone through, you will have the  option again to `Start and update containers`. It is recommended to create a backup before clicking the `Start and update containers` button.\n\nAdditionally, there is a cronjob that runs once a day that checks for container and mastercontainer updates and sends a notification to all Nextcloud admins if a new update was found.\n\n#### How often are update notifications sent?\nAIO ships its own update notifications implementation. It checks if container updates are available. If so, it sends a notification with the title `Container updates available!` on saturdays to Nextcloud users that are part of the `admin` group. If the Nextcloud container image should be older than 90 days (~3 months) and thus badly outdated, AIO sends a notification to all Nextcloud users with the title `AIO is outdated!`. Thus admins should make sure to update the container images at least once every 3 months in order to make sure that the instance gets all security bugfixes as soon as possible.\n\n### How to easily log in to the AIO interface?\nIf your Nextcloud is running and you are logged in as admin in your Nextcloud, you can easily log in to the AIO interface by opening `https://yourdomain.tld/settings/admin/overview` which will show a button on top that enables you to log in to the AIO interface by just clicking on this button. \n\n> [!Note]\n> You can change the domain/ip-address/port of the button by simply stopping the containers, visiting the AIO interface from the correct and desired domain/ip-address/port and clicking once on `Start containers`.\n\n### How to change the domain?\n> [!NOTE]  \n> Editing the configuration.json manually and making a mistake may break your instance so please create a backup first!\n\nIf you set up a new AIO instance, you need to enter a domain. Currently there is no way to change this domain afterwards from the AIO interface. So in order to change it, you need to edit the configuration.json manually using `sudo docker run -it --rm --volume nextcloud_aio_mastercontainer:/mnt/docker-aio-config:rw alpine sh -c \"apk add --no-cache nano && nano /mnt/docker-aio-config/data/configuration.json\"`, substitute each occurrence of your old domain with your new domain and save and write out the file. Afterwards restart your containers from the AIO interface and everything should work as expected if the new domain is correctly configured.<br>\nIf you are running AIO behind a web server or reverse proxy (like Apache, Nginx, Caddy, Cloudflare Tunnel and else), you need to obviously also change the domain in your reverse proxy config.\n\nAdditionally, after restarting the containers, you need to open the admin settings and update some values manually that cannot be changed automatically. Here is a list of some known places:\n- `https://your-nc-domain.com/settings/admin/talk` for Turn/Stun server and Signaling Server if you enabled Talk via the AIO interface\n- `https://your-nc-domain.com/settings/admin/theming` for the theming URL\n- `https://your-nc-domain.com/settings/admin/app_api` for the deploy daemon if you enabled the App API via the AIO interface\n\n### How to properly reset the instance?\nIf something goes unexpected routes during the initial installation, you might want to reset the AIO installation to be able to start from scratch.\n\n> [!NOTE]  \n> If you already have it running and have data on your instance, you should not follow these instructions as it will delete all data that is coupled to your AIO instance.\n\nHere is how to reset the AIO instance properly:\n1. Stop all containers if they are running from the AIO interface\n1. Stop the mastercontainer with `sudo docker stop nextcloud-aio-mastercontainer`\n1. If the domaincheck container is still running, stop it with `sudo docker stop nextcloud-aio-domaincheck`\n1. Check that no AIO containers are running anymore by running `sudo docker ps --format {{.Names}}`. If no `nextcloud-aio` containers are listed, you can proceed with the steps below. If there should be some, you will need to stop them with `sudo docker stop <container_name>` until no one is listed anymore.\n1. Check which containers are stopped: `sudo docker ps --filter \"status=exited\"`\n1. Now remove all these stopped containers with `sudo docker container prune`\n1. Delete the docker network with `sudo docker network rm nextcloud-aio`\n1. Check which volumes are dangling with `sudo docker volume ls --filter \"dangling=true\"`\n1. Now remove all these dangling volumes: `sudo docker volume prune --filter all=1` (on Windows you might need to remove some volumes afterwards manually with `docker volume rm nextcloud_aio_backupdir`, `docker volume rm nextcloud_aio_nextcloud_datadir`). \n1. If you've configured `NEXTCLOUD_DATADIR` to a path on your host instead of the default volume, you need to clean that up as well. (E.g. by simply deleting the directory).\n1. Make sure that no volumes are remaining with `sudo docker volume ls --format {{.Name}}`. If no `nextcloud-aio` volumes are listed, you can proceed with the steps below. If there should be some, you will need to remove them with `sudo docker volume rm <volume_name>` until no one is listed anymore.\n1. Optional: You can remove all docker images with `sudo docker image prune -a`.\n1. And you are done! Now feel free to start over with the recommended docker run command!\n\n### Backup solution\nNextcloud AIO provides a backup solution based on [BorgBackup](https://github.com/borgbackup/borg#what-is-borgbackup). These backups act as a restore point in case the installation gets corrupted. By using this tool, backups are incremental, differential, compressed and encrypted – so only the first backup will take a while. Further backups should be fast as only changes are taken into account.\n\nIt is recommended to create a backup before any container update. By doing this, you will be safe regarding any possible complication during updates because you will be able to restore the whole instance with basically one click. \n\nFor local backups, the restore process should be pretty fast as rsync is used to restore the chosen backup which only transfers changed files and deletes additional ones. For remote borg backups, the whole backup archive is extracted from the remote, which depending on how clever `borg extract` is, may require downloading the whole archive.\n\nIf you connect an external drive to your host, and choose the backup directory to be on that drive, you are also kind of safe against drive failures of the drive where the docker volumes are stored on. \n\n<details>\n<summary>How to do the above step for step</summary>\n\n1. Mount an external/backup HDD to the host OS using the built-in functionality or udev rules or whatever way you prefer. (E.g. follow this video: https://www.youtube.com/watch?v=2lSyX4D3v_s) and mount the drive in best case in `/mnt/backup`.\n2. If not already done, fire up the docker container and set up Nextcloud as per the guide.\n3. Now open the AIO interface.\n4. Under backup section, add your external disk mountpoint as backup directory, e.g. `/mnt/backup`.\n5. Click on `Create Backup` which should create the first backup on the external disk.\n\n</details>\n\nIf you want to back up directly to a remote borg repository:\n\n<details>\n<summary>How to do the above step for step</summary>\n\n1. Create your borg repository at the remote. Note down the repository URL for later.\n2. Open the AIO interface\n3. Under backup section, leave the local path blank and fill in the url to your borg repository that you noted down earlier.\n4. Click on `Create backup`, this will create an ssh key pair and fail because the remote doesn't trust this key yet. Copy the public key shown in AIO and add it to your authorized keys on the remote.\n5. Try again to create a backup, this time it should succeed.\n\n</details>\n\nBackups can be created and restored in the AIO interface using the buttons `Create Backup` and `Restore selected backup`. Additionally, a backup check is provided that checks the integrity of your backups but it shouldn't be needed in most situations. \n\nThe backups themselves get encrypted with an encryption key that gets shown to you in the AIO interface. Please save that at a safe place as you will not be able to restore from backup without this key.\n\nDaily backups can get enabled after the initial backup is done. Enabling this also allows to enable an option that allows to automatically update all containers, Nextcloud and its apps.\n\nBe aware that this solution does not back up files and folders that are mounted into Nextcloud using the external storage app - but you can add further Docker volumes and host paths that you want to back up after the initial backup is done.\n\n---\n\n#### What is getting backed up by AIO's backup solution?\nBacked up will get all important data of your Nextcloud AIO instance like the database, your files and configuration files of the mastercontainer and else. Files and folders that are mounted into Nextcloud using the external storage app are not getting backed up. There is currently no way to exclude the data directory because it would require hacks like running files:scan and would make the backup solution much more unreliable (since the database and your files/folders need to stay in sync). If you still don't want your datadirectory to be backed up, see https://github.com/nextcloud/all-in-one#how-to-enable-automatic-updates-without-creating-a-backup-beforehand for options (there is a hint what needs to be backed up in which order).\n\n#### How to adjust borgs retention policy?\nThe built-in borg-based backup solution has by default a retention policy of `--keep-within=7d --keep-weekly=4 --keep-monthly=6`. See https://borgbackup.readthedocs.io/en/stable/usage/prune.html for what these values mean. You can adjust the retention policy by providing `--env BORG_RETENTION_POLICY=\"--keep-within=7d --keep-weekly=4 --keep-monthly=6\"` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`! If it was started already, you will need to stop the mastercontainer, remove it (no data will be lost) and recreate it using the docker run command that you initially used) and customize the value to your fitting. ⚠️ Please make sure that this value is valid, otherwise backup pruning will bug out!\n\n#### How to migrate from AIO to AIO?\nIf you have the borg backup feature enabled, you can copy it over to the new host and restore from the backup. This guide assumes the new installation data dir will be on `/mnt/datadir`, you can adjust the steps if it's elsewhere.\n\n1. Set the DNS entry to 60 seconds TTL if applicable\n1. On your current installation, use the AIO interface to:\n    1. Update AIO and all containers\n    1. Stop all containers (from now on, your cloud is down)\n    1. Create a current borg backup\n    1. Note the path where the backups are stored and the encryption password\n1. Navigate to the backup folder\n1. Create archive of the backup so it's easier to copy: `tar -czvf borg.tar.gz borg`\n1. Copy the archive over to the new host: `cp borg.tar.gz user@new.host:/mnt`. Make sure to replace `user` with your actual user and `new.host` with the IP or domain of the actual host. You can also use another way to copy the archive.\n1. Switch to the new host\n1. Go to the folder you put the backup archive and extract it with `tar -xf borg.tar.gz`\n1. Follow the installation guide to create a new aio instance, but do not start the containers yet (the `docker run` or `docker compose up -d` command)\n1. Change the DNS entry to the new host's IP\n1. Configure your reverse proxy if you use one\n1. Start the AIO container and open the new AIO interface in your browser\n1. Make sure to save the newly generated passphrase and enter it in the next step\n1. Select the \"Restore former AIO instance from backup\" option and enter the encryption password from the old backup and the path in which the extracted `borg` folder lies in (without the borg part) and hit `Submit location and password`\n1. Choose the latest backup in the dropdown and hit `Restore selected backup`\n1. Wait until the backup is restored\n1. Start the containers in the AIO interface\n\n#### Are remote borg backups supported?\nBacking up directly to a remote borg repository is supported. This avoids having to store a local copy of your backups, supports append-only borg keys to counter ransomware and allows using the AIO interface to manage your backups.\n\nSome alternatives, which do not have all the above benefits:\n\n- Mount a network FS like SSHFS, SMB or NFS in the directory that you enter in AIO as backup directory\n- Use rsync or rclone for syncing the borg backup archive that AIO creates locally to a remote target (make sure to lock the backup archive correctly before starting the sync; search for \"aio-lockfile\"; you can find a local example script here: https://github.com/nextcloud/all-in-one#sync-the-backup-regularly-to-another-drive)\n- You can find a well written guide that uses rclone and e.g. BorgBase for remote backups here: https://github.com/nextcloud/all-in-one/discussions/2247\n- Here is another one that utilizes borgmatic and BorgBase for remote backups: https://github.com/nextcloud/all-in-one/discussions/4391\n- create your own backup solution using a script and borg, borgmatic or any other to backup tool for backing up to a remote target (make sure to stop and start the AIO containers correctly following https://github.com/nextcloud/all-in-one#how-to-enable-automatic-updates-without-creating-a-backup-beforehand)\n\n---\n\n#### Failure of the backup container in LXC containers\nIf you are running AIO in a LXC container, you need to make sure that FUSE is enabled in the LXC container settings. Also, if using Alpine Linux as host OS, make sure to add fuse via `apk add fuse`. Otherwise the backup container will not be able to start as FUSE is required for it to work.\n\n---\n\n#### How to create the backup volume on Windows?\nAs stated in the AIO interface, it is possible to use a docker volume as backup target. Before you can use that, you need to create it first. Here is an example how to create one on Windows:\n```\ndocker volume create ^\n--driver local ^\n--name nextcloud_aio_backupdir ^\n-o device=\"/host_mnt/e/your/backup/path\" ^\n-o type=\"none\" ^\n-o o=\"bind\"\n```\nIn this example, it would mount `E:\\your\\backup\\path` into the volume so for a different location you need to adjust `/host_mnt/e/your/backup/path` accordingly. Afterwards enter `nextcloud_aio_backupdir` in the AIO interface as backup location.\n\n---\n\n#### Pro-tip: Backup archives access\nYou can open the BorgBackup archives on your host by following these steps:<br>\n(instructions for Ubuntu Desktop)\n```bash\n# Install borgbackup on the host\nsudo apt update && sudo apt install borgbackup\n\n# In any shell where you use borg, you must first export this variable\n# If you are using the default backup location /mnt/backup/borg\nexport BORG_REPO='/mnt/backup/borg'\n# or if you are using a remote repository\nexport BORG_REPO='user@host:/path/to/repo'\n\n# Mount the archives to /tmp/borg\nsudo mkdir -p /tmp/borg && sudo borg mount \"$BORG_REPO\" /tmp/borg\n\n# After entering your repository key successfully, you should be able to access all archives in /tmp/borg\n# You can now do whatever you want by syncing them to a different place using rsync or doing other things\n# E.g. you can open the file manager on that location by running:\nxhost +si:localuser:root && sudo nautilus /tmp/borg\n\n# When you are done, simply close the file manager and run the following command to unmount the backup archives:\nsudo umount /tmp/borg\n```\n\n---\n\n#### Delete backup archives manually\nYou can delete BorgBackup archives on your host manually by following these steps:<br>\n(instructions for Debian based OS' like Ubuntu)\n```bash\n# Install borgbackup on the host\nsudo apt update && sudo apt install borgbackup\n\n# In any shell where you use borg, you must first export this variable\n# If you are using the default backup location /mnt/backup/borg\nexport BORG_REPO='/mnt/backup/borg'\n# or if you are using a remote repository\nexport BORG_REPO='user@host:/path/to/repo'\n\n# List all archives (if you are using the default backup location /mnt/backup/borg)\nsudo borg list\n\n# After entering your repository key successfully, you should now see a list of all backup archives\n# An example backup archive might be called 20220223_174237-nextcloud-aio\n# Then you can simply delete the archive with:\nsudo borg delete --stats --progress \"::20220223_174237-nextcloud-aio\"\n\n# If borg 1.2.0 or higher is installed, you then need to run borg compact in order to clean up the freed space\nsudo borg --version\n# If version number of the command above is higher than 1.2.0 you need to run the command below:\nsudo borg compact\n\n```\n\nAfter doing so, make sure to update the backup archives list in the AIO interface!<br>\nYou can do so by clicking on the `Check backup integrity` button or `Create backup` button.\n\n---\n\n#### Sync local backups regularly to another drive\nFor increased backup security, you might consider syncing the local backup repository regularly to another drive.\n\nTo do that, first add the drive to `/etc/fstab` so that it is able to get automatically mounted and then create a script that does all the things automatically. Here is an example for such a script:\n\n<details>\n<summary>Click here to expand</summary>\n\n```bash\n#!/bin/bash\n\n# Please modify all variables below to your needings:\nSOURCE_DIRECTORY=\"/mnt/backup/borg\"\nDRIVE_MOUNTPOINT=\"/mnt/backup-drive\"\nTARGET_DIRECTORY=\"/mnt/backup-drive/borg\"\n\n########################################\n# Please do NOT modify anything below! #\n########################################\n\nif [ \"$EUID\" -ne 0 ]; then \n    echo \"Please run as root\"\n    exit 1\nfi\n\nif ! [ -d \"$SOURCE_DIRECTORY\" ]; then\n    echo \"The source directory does not exist.\"\n    exit 1\nfi\n\nif [ -z \"$(ls -A \"$SOURCE_DIRECTORY/\")\" ]; then\n    echo \"The source directory is empty which is not allowed.\"\n    exit 1\nfi\n\nif ! [ -d \"$DRIVE_MOUNTPOINT\" ]; then\n    echo \"The drive mountpoint must be an existing directory\"\n    exit 1\nfi\n\nif ! grep -q \"$DRIVE_MOUNTPOINT\" /etc/fstab; then\n    echo \"Could not find the drive mountpoint in the fstab file. Did you add it there?\"\n    exit 1\nfi\n\nif ! mountpoint -q \"$DRIVE_MOUNTPOINT\"; then\n    mount \"$DRIVE_MOUNTPOINT\"\n    if ! mountpoint -q \"$DRIVE_MOUNTPOINT\"; then\n        echo \"Could not mount the drive. Is it connected?\"\n        exit 1\n    fi\nfi\n\nif [ -f \"$SOURCE_DIRECTORY/lock.roster\" ]; then\n    echo \"Cannot run the script as the backup archive is currently changed. Please try again later.\"\n    exit 1\nfi\n\nmkdir -p \"$TARGET_DIRECTORY\"\nif ! [ -d \"$TARGET_DIRECTORY\" ]; then\n    echo \"Could not create target directory\"\n    exit 1\nfi\n\nif [ -f \"$SOURCE_DIRECTORY/aio-lockfile\" ]; then\n    echo \"Not continuing because aio-lockfile already exists.\"\n    exit 1\nfi\n\ntouch \"$SOURCE_DIRECTORY/aio-lockfile\"\n\nif ! rsync --stats --archive --human-readable --delete \"$SOURCE_DIRECTORY/\" \"$TARGET_DIRECTORY\"; then\n    echo \"Failed to sync the backup repository to the target directory.\"\n    exit 1\nfi\n\nrm \"$SOURCE_DIRECTORY/aio-lockfile\"\nrm \"$TARGET_DIRECTORY/aio-lockfile\"\n\numount \"$DRIVE_MOUNTPOINT\"\n\nif docker ps --format \"{{.Names}}\" | grep \"^nextcloud-aio-nextcloud$\"; then\n    docker exec nextcloud-aio-nextcloud bash /notify.sh \"Rsync backup successful!\" \"Synced the backup repository successfully.\"\nelse\n    echo \"Synced the backup repository successfully.\"\nfi\n\n```\n\n</details>\n\nYou can simply copy and paste the script into a file e.g. named `backup-script.sh` e.g. here: `/root/backup-script.sh`. Do not forget to modify the variables to your requirements!\n\nAfterwards apply the correct permissions with `sudo chown root:root /root/backup-script.sh` and `sudo chmod 700 /root/backup-script.sh`. Then you can create a cronjob that runs e.g. at `20:00` each week on Sundays like this: \n1. Open the cronjob with `sudo crontab -u root -e` (and choose your editor of choice if not already done. I'd recommend nano). \n1. Add the following new line to the crontab if not already present: `0 20 * * 7 /root/backup-script.sh` which will run the script at 20:00 on Sundays each week. \n1. save and close the crontab (when using nano are the shortcuts for this `Ctrl + o` -> `Enter` and close the editor with `Ctrl + x`).\n\n### How to stop/start/update containers or trigger the daily backup from a script externally?\n> [!WARNING]  \n> The below script will only work after the initial setup of AIO. So you will always need to first visit the AIO interface, type in your domain and start the containers the first time or restore an older AIO instance from its borg backup before you can use the script.\n\nYou can do so by running the `/daily-backup.sh` script that is stored in the mastercontainer. It accepts the following environment variables:\n- `AUTOMATIC_UPDATES` if set to `1`, it will automatically stop the containers, update them and start them including the mastercontainer. If the mastercontainer gets updated, this script's execution will stop as soon as the mastercontainer gets stopped. You can then wait until it is started again and run the script with this flag again in order to update all containers correctly afterwards.\n- `DAILY_BACKUP` if set to `1`, it will automatically stop the containers and create a backup. If you want to start them again afterwards, you may have a look at the `START_CONTAINERS` option.\n- `START_CONTAINERS` if set to `1`, it will automatically start the containers without updating them.\n- `STOP_CONTAINERS` if set to `1`, it will automatically stop the containers.\n- `CHECK_BACKUP` if set to `1`, it will start the backup check. This is not allowed to be enabled at the same time like `DAILY_BACKUP`. Please be aware that this option is non-blocking which means that the backup check is not done when the process is finished since it only start the borgbackup container with the correct configuration.\n\nOne example for this would be `sudo docker exec -it --env DAILY_BACKUP=1 nextcloud-aio-mastercontainer /daily-backup.sh`, which you can run via a cronjob or put it in a script.\n\n> [!NOTE]  \n> None of the option returns error codes. So you need to check for the correct result yourself.\n\n### How to disable the backup section?\nIf you already have a backup solution in place, you may want to hide the backup section. You can do so by adding `--env AIO_DISABLE_BACKUP_SECTION=true` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`! If it was started already, you will need to stop the mastercontainer, remove it (no data will be lost) and recreate it using the docker run command that you initially used).\n\n### How to change the default location of Nextcloud's Datadir?\n> [!WARNING]  \n> Do not set or adjust this value after the initial Nextcloud installation is done! If you still want to do it afterwards, see [this](https://github.com/nextcloud/all-in-one/discussions/890#discussioncomment-3089903) on how to do it.\n\nYou can configure the Nextcloud container to use a specific directory on your host as data directory. You can do so by adding the environmental variable `NEXTCLOUD_DATADIR` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`! If it was started already, you will need to stop the mastercontainer, remove it (no data will be lost) and recreate it using the docker run command that you initially used). Allowed values for that variable are strings that start with `/` and are not equal to `/`. The chosen directory or volume will then be mounted to `/mnt/ncdata` inside the container.\n\n- An example for Linux is `--env NEXTCLOUD_DATADIR=\"/mnt/ncdata\"`. ⚠️ Please note: If you should be using an external BTRFS drive that is mounted to `/mnt/ncdata`, make sure to choose a subfolder like e.g. `/mnt/ncdata/nextcloud` as datadir, since the root folder is not suited as datadir in that case. See https://github.com/nextcloud/all-in-one/discussions/2696.\n- On macOS it might be `--env NEXTCLOUD_DATADIR=\"/var/nextcloud-data\"`\n- For Synology it may be `--env NEXTCLOUD_DATADIR=\"/volume1/docker/nextcloud/data\"`. \n- On Windows it might be `--env NEXTCLOUD_DATADIR=\"/run/desktop/mnt/host/c/ncdata\"`. (This path is equivalent to `C:\\ncdata` on your Windows host so you need to translate the path accordingly. Hint: the path that you enter needs to start with `/run/desktop/mnt/host/`. Append to that the exact location on your windows host, e.g. `c/ncdata` which is equivalent to `C:\\ncdata`.) ⚠️ **Please note**: This does not work with external drives like USB or network drives and only with internal drives like SATA or NVME drives.\n- Another option is to provide a specific volume name here with: `--env NEXTCLOUD_DATADIR=\"nextcloud_aio_nextcloud_datadir\"`. This volume needs to be created beforehand manually by you in order to be able to use it. e.g. on Windows with:\n    ```\n    docker volume create ^\n    --driver local ^\n    --name nextcloud_aio_nextcloud_datadir ^\n    -o device=\"/host_mnt/e/your/data/path\" ^\n    -o type=\"none\" ^\n    -o o=\"bind\"\n    ```\n    In this example, it would mount `E:\\your\\data\\path` into the volume so for a different location you need to adjust `/host_mnt/e/your/data/path` accordingly.\n\n### Can I use a CIFS/SMB share as Nextcloud's datadir?\n\nSure. Add this to the `/etc/fstab` file on the host system: <br>\n`<your-storage-host-and-subpath> <your-mount-dir> cifs rw,mfsymlinks,seal,credentials=<your-credentials-file>,uid=33,gid=0,file_mode=0770,dir_mode=0770 0 0`<br>\n(Of course you need to modify `<your-storage-host-and-subpath>`, `<your-mount-dir>` and `<your-credentials-file>` for your specific case.)\n\nOne example could look like this:<br>\n`//your-storage-host/subpath /mnt/storagebox cifs rw,mfsymlinks,seal,credentials=/etc/storage-credentials,uid=33,gid=0,file_mode=0770,dir_mode=0770 0 0`<br>\nand add into `/etc/storage-credentials`:\n```\nusername=<smb/cifs username>\npassword=<password>\n```\n(Of course you need to modify `<smb/cifs username>` and `<password>` for your specific case.)\n\nNow you can use `/mnt/storagebox` as Nextcloud's datadir like described in the section above this one.\n\n### How to allow the Nextcloud container to access directories on the host?\nBy default, the Nextcloud container is confined and cannot access directories on the host OS. You might want to change this when you are planning to use local external storage in Nextcloud to store some files outside the data directory and can do so by adding the environmental variable `NEXTCLOUD_MOUNT` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`! If it was started already, you will need to stop the mastercontainer, remove it (no data will be lost) and recreate it using the docker run command that you initially used). Allowed values for that variable are strings that start with `/` and are not equal to `/`.\n\n- Two examples for Linux are `--env NEXTCLOUD_MOUNT=\"/mnt/\"` and `--env NEXTCLOUD_MOUNT=\"/media/\"`.\n- On macOS it might be `--env NEXTCLOUD_MOUNT=\"/Volumes/your_drive/\"`\n- For Synology it may be `--env NEXTCLOUD_MOUNT=\"/volume1/\"`.\n- On Windows it might be `--env NEXTCLOUD_MOUNT=\"/run/desktop/mnt/host/d/your-folder/\"`. (This path is equivalent to `D:\\your-folder` on your Windows host so you need to translate the path accordingly. Hint: the path that you enter needs to start with `/run/desktop/mnt/host/`. Append to that the exact location on your windows host, e.g. `d/your-folder/` which is equivalent to `D:\\your-folder`.) ⚠️ **Please note**: This does not work with external drives like USB or network drives and only with internal drives like SATA or NVME drives.\n\nAfter using this option, please make sure to apply the correct permissions to the directories that you want to use in Nextcloud. E.g. `sudo chown -R 33:0 /mnt/your-drive-mountpoint` and `sudo chmod -R 750 /mnt/your-drive-mountpoint` should make it work on Linux when you have used `--env NEXTCLOUD_MOUNT=\"/mnt/\"`. On Windows you could do this e.g. with `docker exec -it nextcloud-aio-nextcloud chown -R 33:0 /run/desktop/mnt/host/d/your-folder/` and `docker exec -it nextcloud-aio-nextcloud chmod -R 750 /run/desktop/mnt/host/d/your-folder/`.\n\nYou can then navigate to `https://your-nc-domain.com/settings/apps/disabled`, activate the external storage app, navigate to `https://your-nc-domain.com/settings/admin/externalstorages` and add a local external storage directory that will be accessible inside the container at the same place that you've entered. E.g. `/mnt/your-drive-mountpoint` will be mounted to `/mnt/your-drive-mountpoint` inside the container, etc. \n\nBe aware though that these locations will not be covered by the built-in backup solution - but you can add further Docker volumes and host paths that you want to back up after the initial backup is done.\n\n> [!NOTE]  \n> If you can't see the type \"local storage\" in the external storage admin options, a restart of the containers from the AIO interface may be required.\n\n### How to adjust the Talk port?\nBy default will the talk container use port `3478/UDP` and `3478/TCP` for connections. This should be set to something higher than 1024! You can adjust the port by adding e.g. `--env TALK_PORT=3478` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`! If it was started already, you will need to stop the mastercontainer, remove it (no data will be lost) and recreate it using the docker run command that you initially used) and adjusting the port to your desired value. Best is to use a port over 1024, so e.g. 3479 to not run into this: https://github.com/nextcloud/all-in-one/discussions/2517\n\n### How to adjust the upload limit for Nextcloud?\nBy default, public uploads to Nextcloud are limited to a max of 16G (logged in users can upload much bigger files using the webinterface or the mobile/desktop clients, since chunking is used in that case). You can adjust the upload limit by providing `--env NEXTCLOUD_UPLOAD_LIMIT=16G` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`! If it was started already, you will need to stop the mastercontainer, remove it (no data will be lost) and recreate it using the docker run command that you initially used) and customize the value to your fitting. It must start with a number and end with `G` e.g. `16G`.\n\n### How to adjust the max execution time for Nextcloud?\nBy default, uploads to Nextcloud are limited to a max of 3600s. You can adjust the upload time limit by providing `--env NEXTCLOUD_MAX_TIME=3600` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`! If it was started already, you will need to stop the mastercontainer, remove it (no data will be lost) and recreate it using the docker run command that you initially used) and customize the value to your fitting. It must be a number e.g. `3600`.\n\n### How to adjust the PHP memory limit for Nextcloud?\nBy default, each PHP process in the Nextcloud container is limited to a max of 512 MB. You can adjust the memory limit by providing `--env NEXTCLOUD_MEMORY_LIMIT=512M` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`! If it was started already, you will need to stop the mastercontainer, remove it (no data will be lost) and recreate it using the docker run command that you initially used) and customize the value to your fitting. It must start with a number and end with `M` e.g. `1024M`.\n\n### What can I do to fix the internal or reserved ip-address error?\nIf you get an error during the domain validation which states that your ip-address is an internal or reserved ip-address, you can fix this by first making sure that your domain indeed has the correct public ip-address that points to the server and then adding `--add-host yourdomain.com:<public-ip-address>` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`! If it was started already, you will need to stop the mastercontainer, remove it (no data will be lost) and recreate it using the docker run command that you initially used) which will allow the domain validation to work correctly. And so that you know: even if the `A` record of your domain should change over time, this is no problem since the mastercontainer will not make any attempt to access the chosen domain after the initial domain validation.\n\n### Can I run this with Docker swarm?\nYes. For that to work, you need to use and follow the [manual-install documentation](./manual-install/).\n\n### Can I run this with Kubernetes?\nYes. For that to work, you need to use and follow the [helm-chart documentation](./nextcloud-aio-helm-chart/).\n\n### How to run this with Docker rootless?\nYou can run AIO also with docker rootless. How to do this is documented here: [docker-rootless.md](https://github.com/nextcloud/all-in-one/blob/main/docker-rootless.md)\n\n### Can I run this with Podman instead of Docker?\nSince Podman is not 100% compatible with the Docker API, Podman is not supported (since that would add yet another platform where the maintainer would need to test on). However you can use and follow the [manual-install documentation](./manual-install/) to get AIO's containers running with Podman or use Docker rootless, as described in the above section. Also there is this now: https://github.com/nextcloud/all-in-one/discussions/3487\n\n### How to change the Nextcloud apps that are installed on the first startup?\nYou might want to adjust the Nextcloud apps that are installed upon the first startup of the Nextcloud container. You can do so by adding `--env NEXTCLOUD_STARTUP_APPS=\"deck twofactor_totp tasks calendar contacts notes\"` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`! If it was started already, you will need to stop the mastercontainer, remove it (no data will be lost) and recreate it using the docker run command that you initially used) and customize the value to your fitting. It must be a string with small letters a-z, 0-9, spaces and hyphens or '_'. You can disable shipped and by default enabled apps by adding a hyphen in front of the appid. E.g. `-contactsinteraction`.\n\n### How to add OS packages permanently to the Nextcloud container?\nSome Nextcloud apps require additional external dependencies that must be bundled within Nextcloud container in order to work correctly. As we cannot put each and every dependency for all apps into the container - as this would make the project quickly unmaintainable - there is an official way in which you can add additional dependencies into the Nextcloud container. However note that doing this is disrecommended since we do not test Nextcloud apps that require external dependencies. \n\nYou can do so by adding `--env NEXTCLOUD_ADDITIONAL_APKS=\"imagemagick dependency2 dependency3\"` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`! If it was started already, you will need to stop the mastercontainer, remove it (no data will be lost) and recreate it using the docker run command that you initially used) and customize the value to your fitting. It must be a string with small letters a-z, digits 0-9, spaces, dots and hyphens or '_'. You can find available packages here: https://pkgs.alpinelinux.org/packages?branch=v3.21. By default `imagemagick` is added. If you want to keep it, you need to specify it as well.\n\n### How to add PHP extensions permanently to the Nextcloud container?\nSome Nextcloud apps require additional php extensions that must be bundled within Nextcloud container in order to work correctly. As we cannot put each and every dependency for all apps into the container - as this would make the project quickly unmaintainable - there is an official way in which you can add additional php extensions into the Nextcloud container. However note that doing this is disrecommended since we do not test Nextcloud apps that require additional php extensions. \n\nYou can do so by adding `--env NEXTCLOUD_ADDITIONAL_PHP_EXTENSIONS=\"imagick extension1 extension2\"` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`! If it was started already, you will need to stop the mastercontainer, remove it (no data will be lost) and recreate it using the docker run command that you initially used) and customize the value to your fitting. It must be a string with small letters a-z, digits 0-9, spaces, dots and hyphens or '_'. You can find available extensions here: https://pecl.php.net/packages.php. By default `imagick` is added. If you want to keep it, you need to specify it as well.\n\n### What about the pdlib PHP extension for the facerecognition app?\nThe [facerecognition app](https://apps.nextcloud.com/apps/facerecognition) requires the pdlib PHP extension to be installed. Unfortunately, it is not available on PECL nor via PHP core, so there is no way to add this into AIO currently. However you can use [this community container](https://github.com/nextcloud/all-in-one/tree/main/community-containers/facerecognition) in order to run facerecognition.\n\n### How to enable hardware acceleration for Nextcloud?\nSome container can use GPU acceleration to increase performance like [memories app](https://apps.nextcloud.com/apps/memories) allows to enable hardware transcoding for videos.\n\n#### With open source drivers MESA for AMD, Intel and **new** drivers `Nouveau` for Nvidia\n\n> [!WARNING]  \n> This only works if the `/dev/dri` device is present on the host! If it does not exist on your host, don't proceed as otherwise the Nextcloud container will fail to start! If you are unsure about this, better do not proceed with the instructions below. Make sure that your driver is correctly configured on the host.\n\nA list of supported device can be fond in [MESA 3D documentation](https://docs.mesa3d.org/systems.html).\n\nThis method use the [Direct Rendering Infrastructure](https://dri.freedesktop.org/wiki/) with the access to the `/dev/dri` device.\n\nIn order to use that, you need to add `--env NEXTCLOUD_ENABLE_DRI_DEVICE=true` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`! If it was started already, you will need to stop the mastercontainer, remove it (no data will be lost) and recreate it using the docker run command that you initially used) which will mount the `/dev/dri` device into the container.\n\n\n#### With proprietary drivers for Nvidia :warning: BETA\n\n> [!WARNING]\n> This only works if the Nvidia Toolkit is installed on the host and an NVIDIA GPU is enabled! Make sure that it is correctly configured on the host. If it does not exist on your host, don't proceed as otherwise the Nextcloud container will fail to start! If you are unsure about this, better do not proceed with the instructions below.\n> \n> This feature is in beta. Since the proprietary, we haven't a lot of user using proprietary drivers, we can't guarantee the stability of this feature. Your feedback is welcome.\n\nThis method use the [Nvidia Container Toolkit](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/index.html) with the nvidia runtime.\n\nIn order to use that, you need to add `--env NEXTCLOUD_ENABLE_NVIDIA_GPU=true` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`! If it was started already, you will need to stop the mastercontainer, remove it (no data will be lost) and recreate it using the docker run command that you initially used) which will enable the nvidia runtime.\n\nIf you're using WSL2 and want to use the NVIDIA runtime, please follow the instructions to [install the NVIDIA Container Toolkit meta-version in WSL](https://docs.nvidia.com/cuda/wsl-user-guide/index.html#cuda-support-for-wsl-2).\n\n### How to keep disabled apps?\nIn certain situations you might want to keep Nextcloud apps that are disabled in the AIO interface and not uninstall them if they should be installed in Nextcloud. You can do so by adding `--env NEXTCLOUD_KEEP_DISABLED_APPS=true` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`! If it was started already, you will need to stop the mastercontainer, remove it (no data will be lost) and recreate it using the docker run command that you initially used). \n> [!WARNING]  \n> Doing this might cause unintended problems in Nextcloud if an app that requires an external dependency is still installed but the external dependency not for example.\n\n### Huge docker logs\nIf you should run into issues with huge docker logs, you can adjust the log size by following https://docs.docker.com/config/containers/logging/local/#usage. However for the included AIO containers, this should usually not be needed because almost all of them have the log level set to warn so they should not produce many logs.\n\n### Access/Edit Nextcloud files/folders manually\nThe files and folders that you add to Nextcloud are by default stored in the following docker directory: `nextcloud_aio_nextcloud:/mnt/ncdata/` (usually `/var/lib/docker/volumes/nextcloud_aio_nextcloud_data/_data/` on linux host systems). If needed, you can modify/add/delete files/folders there but **ATTENTION**: be very careful when doing so because you might corrupt your AIO installation! Best is to create a backup using the built-in backup solution before editing/changing files/folders in there because you will then be able to restore your instance to the backed up state.\n\nAfter you are done modifying/adding/deleting files/folders, don't forget to apply the correct permissions by running: `sudo docker exec nextcloud-aio-nextcloud chown -R 33:0 /mnt/ncdata/` and `sudo docker exec nextcloud-aio-nextcloud chmod -R 750 /mnt/ncdata/` and rescan the files with `sudo docker exec --user www-data -it nextcloud-aio-nextcloud php occ files:scan --all`.\n\n### How to store the files/installation on a separate drive?\nYou can move the whole docker library and all its files including all Nextcloud AIO files and folders to a separate drive by first mounting the drive in the host OS (NTFS is not supported and ext4 is recommended as FS) and then following this tutorial: https://www.guguweb.com/2019/02/07/how-to-move-docker-data-directory-to-another-location-on-ubuntu/<br>\n(Of course docker needs to be installed first for this to work.)\n\n⚠️ If you encounter errors from richdocuments in your Nextcloud logs, check in your Collabora container if the message \"Capabilities are not set for the coolforkit program.\" appears. If so, follow these steps:\n\n1. Stop all the containers from the AIO Interface.\n2. Go to your terminal and delete the Collabora container (`docker rm nextcloud-aio-collabora`) AND the Collabora image (`docker image rm nextcloud/aio-collabora`).\n3. You might also want to prune your Docker (`docker system prune`) (no data will be lost).\n4. Restart your containers from the AIO Interface.\n\nThis should solve the problem.\n\n### How to edit Nextclouds config.php file with a texteditor?\nYou can edit Nextclouds config.php file directly from the host with your favorite text editor. E.g. like this: `sudo docker run -it --rm --volume nextcloud_aio_nextcloud:/var/www/html:rw alpine sh -c \"apk add --no-cache nano && nano /var/www/html/config/config.php\"`. Make sure to not break the file though which might corrupt your Nextcloud instance otherwise. In best case, create a backup using the built-in backup solution before editing the file.\n\n### How to change default files by creating a custom skeleton directory?\nAll users see a set of [default files and folders](https://docs.nextcloud.com/server/latest/admin_manual/configuration_files/default_files_configuration.html) as dictated by Nextcloud's configuration.  To change these default files and folders a custom skeleton directory must first be created; this can be accomplished by copying your skeleton files `sudo docker cp --follow-link /path/to/nextcloud/skeleton/ nextcloud-aio-nextcloud:/mnt/ncdata/skeleton/`, applying the correct permissions with `sudo docker exec nextcloud-aio-nextcloud chown -R 33:0 /mnt/ncdata/skeleton/` and `sudo docker exec nextcloud-aio-nextcloud chmod -R 750 /mnt/ncdata/skeleton/` and setting the skeleton directory option with `sudo docker exec --user www-data -it nextcloud-aio-nextcloud php occ config:system:set skeletondirectory --value=\"/mnt/ncdata/skeleton\"`.  Further information is available in the Nextcloud documentation on [configuration parameters for the skeleton directory](https://docs.nextcloud.com/server/stable/admin_manual/configuration_server/config_sample_php_parameters.html#skeletondirectory).\n\n### Fail2ban\nYou can configure your server to block certain ip-addresses using fail2ban as bruteforce protection. Here is how to set it up: https://docs.nextcloud.com/server/stable/admin_manual/installation/harden_server.html#setup-fail2ban. The logpath of AIO is by default `/var/lib/docker/volumes/nextcloud_aio_nextcloud/_data/data/nextcloud.log`. Do not forget to add `chain=DOCKER-USER` to your nextcloud jail config (`nextcloud.local`) otherwise the nextcloud service running on docker will still be accessible even if the IP is banned. Also, you may change the blocked ports to cover all AIO ports: by default `80,443,8080,8443,3478` (see [this](https://github.com/nextcloud/all-in-one#explanation-of-used-ports)). Apart from that there is now a community container that can be added to the AIO stack: https://github.com/nextcloud/all-in-one/tree/main/community-containers/fail2ban\n\n### LDAP\nIt is possible to connect to an existing LDAP server. You need to make sure that the LDAP server is reachable from the Nextcloud container. Then you can enable the LDAP app and configure LDAP in Nextcloud manually. If you don't have a LDAP server yet, recommended is to use this docker container: https://hub.docker.com/r/nitnelave/lldap. Make sure here as well that Nextcloud can talk to the LDAP server. The easiest way is by adding the LDAP docker container to the docker network `nextcloud-aio`. Then you can connect to the LDAP container by its name from the Nextcloud container. There is now a community container which allows to easily add LLDAP to AIO: https://github.com/nextcloud/all-in-one/tree/main/community-containers/lldap\n\n### Netdata\nNetdata allows you to monitor your server using a GUI. You can install it by following https://learn.netdata.cloud/docs/agent/packaging/docker#create-a-new-netdata-agent-container. Apart from that there is now a way for the community to add containers: https://github.com/nextcloud/all-in-one/discussions/392#discussioncomment-7133563\n\n### USER_SQL\nIf you want to use the user_sql app, the easiest way is to create an additional database container and add it to the docker network `nextcloud-aio`. Then the Nextcloud container should be able to talk to the database container using its name.\n\n### phpMyAdmin, Adminer or pgAdmin\nIt is possible to install any of these to get a GUI for your AIO database. The pgAdmin container is recommended. You can get some docs on it here: https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html. For the container to connect to the aio-database, you need to connect the container to the docker network `nextcloud-aio` and use `nextcloud-aio-database` as database host, `oc_nextcloud` as database username and the password that you get when running `sudo docker exec nextcloud-aio-nextcloud grep dbpassword config/config.php` as the password. Apart from that there is now a way for the community to add containers: https://github.com/nextcloud/all-in-one/discussions/3061#discussioncomment-7307045\n\n### Mail server\nYou can configure one yourself by using either of these four recommended projects: [Docker Mailserver](https://github.com/docker-mailserver/docker-mailserver/#docker-mailserver), [Mailu](https://github.com/Mailu/Mailu), [Maddy Mail Server](https://github.com/foxcpp/maddy#maddy-mail-server), [Mailcow](https://github.com/mailcow/mailcow-dockerized#mailcow-dockerized-------) or [Stalwart](https://stalw.art/). There is now a community container which allows to easily add Stalwart Mail server to AIO: https://github.com/nextcloud/all-in-one/tree/main/community-containers/stalwart\n\n### How to migrate from an already existing Nextcloud installation to Nextcloud AIO?\nPlease see the following documentation on this: [migration.md](https://github.com/nextcloud/all-in-one/blob/main/migration.md)\n\n### Requirements for integrating new containers\nFor integrating new containers, they must pass specific requirements for being considered to get integrated in AIO itself. Even if not considered, we may add some documentation on it. Also there is this now: https://github.com/nextcloud/all-in-one/tree/main/community-containers#community-containers\n\nWhat are the requirements?\n1. New containers must be related to Nextcloud. Related means that there must be a feature in Nextcloud that gets added by adding this container.\n2. It must be optionally installable. Disabling and enabling the container from the AIO interface must work and must not produce any unexpected side-effects.\n3. The feature that gets added into Nextcloud by adding the container must be maintained by the Nextcloud GmbH. \n4. It must be possible to run the container without big quirks inside docker containers. Big quirks means e.g. needing to change the capabilities or security options. \n5. The container should not mount directories from the host into the container: only docker volumes should be used.\n6. The container must be usable by more than 90% of the users (e.g. not too high system requirements and such)\n7. No additional setup should be needed after adding the container - it should work completely out of the box.\n8. If the container requires being exposed, only subfolders are supported. So the container should not require its own (sub-)domain and must be able to run in a subfolder.\n\n### How to trust user-defined Certification Authorities (CA)?\nFor some applications it might be necessary to establish a secure connection to another host/server which is using a certificate issued by a Certification Authority that is not trusted out of the box. An example could be configuring LDAPS against a domain controller (Active Directory or Samba-based) of an organization.\n\nYou can make the Nextcloud container trust any Certification Authority by providing the environmental variable `NEXTCLOUD_TRUSTED_CACERTS_DIR` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`! If it was started already, you will need to stop the mastercontainer, remove it (no data will be lost) and recreate it using the docker run command that you initially used). The value of the variables should be set to the absolute paths of the directory on the host, which contains one or more Certification Authorities certificates. You should use X.509 certificates, Base64 encoded. (Other formats may work but have not been tested!) All the certificates in the directory will be trusted.\n\nWhen using `docker run`, the environmental variable can be set with `--env NEXTCLOUD_TRUSTED_CACERTS_DIR=/path/to/my/cacerts`.\n\nIn order for the value to be valid, the path should start with `/` and not end with `/` and point to an existing **directory**. Pointing the variable directly to a certificate **file** will not work and may also break things.\n\n### How to disable Collabora's Seccomp feature?\nThe Collabora container enables Seccomp by default, which is a security feature of the Linux kernel. On systems without this kernel feature enabled, you need to provide `--env COLLABORA_SECCOMP_DISABLED=true` to the initial docker run command in order to make it work.\n\n### How to enable automatic updates without creating a backup beforehand?\nIf you have an external backup solution, you might want to enable automatic updates without creating a backup first. However note that doing this is disrecommended since you will not be able to easily create and restore a backup from the AIO interface anymore and you need to make sure to shut down all the containers properly before creating the backup, e.g. by stopping them from the AIO interface first. \n\nBut anyhow, is here a guide that helps you automate the whole procedure:\n\n<details>\n<summary>Click here to expand</summary>\n\n```bash\n#!/bin/bash\n\n# Stop the containers\ndocker exec --env STOP_CONTAINERS=1 nextcloud-aio-mastercontainer /daily-backup.sh\n\n# Below is optional if you run AIO in a VM which will shut down the VM afterwards\n# poweroff\n\n```\n\n</details>\n\nYou can simply copy and paste the script into a file e.g. named `shutdown-script.sh` e.g. here: `/root/shutdown-script.sh`. \n\nAfterwards apply the correct permissions with `sudo chown root:root /root/shutdown-script.sh` and `sudo chmod 700 /root/shutdown-script.sh`. Then you can create a cronjob that runs it on a schedule e.g. runs the script at `04:00` each day like this: \n1. Open the cronjob with `sudo crontab -u root -e` (and choose your editor of choice if not already done. I'd recommend nano). \n1. Add the following new line to the crontab if not already present: `0 4 * * * /root/shutdown-script.sh` which will run the script at 04:00 each day. \n1. save and close the crontab (when using nano the shortcuts for this are `Ctrl + o` and then `Enter` to save, and close the editor with `Ctrl + x`).\n\n\n**After that is in place, you should schedule a backup from your backup solution that creates a backup after AIO is shut down properly. Hint: If your backup runs on the same host, make sure to at least back up all docker volumes and additionally Nextcloud's datadir if it is not stored in a docker volume.**\n\n**Afterwards, you can create a second script that automatically updates the containers:**\n\n<details>\n<summary>Click here to expand</summary>\n\n```bash\n#!/bin/bash\n\n# Run container update once\nif ! docker exec --env AUTOMATIC_UPDATES=1 nextcloud-aio-mastercontainer /daily-backup.sh; then\n    while docker ps --format \"{{.Names}}\" | grep -q \"^nextcloud-aio-watchtower$\"; do\n        echo \"Waiting for watchtower to stop\"\n        sleep 30\n    done\n\n    while ! docker ps --format \"{{.Names}}\" | grep -q \"^nextcloud-aio-mastercontainer$\"; do\n        echo \"Waiting for Mastercontainer to start\"\n        sleep 30\n    done\n\n    # Run container update another time to make sure that all containers are updated correctly.\n    docker exec --env AUTOMATIC_UPDATES=1 nextcloud-aio-mastercontainer /daily-backup.sh\nfi\n\n```\n\n</details>\n\nYou can simply copy and paste the script into a file e.g. named `automatic-updates.sh` e.g. here: `/root/automatic-updates.sh`.\n\nAfterwards apply the correct permissions with `sudo chown root:root /root/automatic-updates.sh` and `sudo chmod 700 /root/automatic-updates.sh`. Then you can create a cronjob that runs e.g. at `05:00` each day like this: \n1. Open the cronjob with `sudo crontab -u root -e` (and choose your editor of choice if not already done. I'd recommend nano). \n1. Add the following new line to the crontab if not already present: `0 5 * * * /root/automatic-updates.sh` which will run the script at 05:00 each day. \n1. save and close the crontab (when using nano the shortcuts for this are `Ctrl + o` then `Enter` to save, and close the editor with `Ctrl + x`).\n\n### Securing the AIO interface from unauthorized ACME challenges\n[By design](https://github.com/nextcloud/all-in-one/discussions/4882#discussioncomment-9858384), Caddy that runs inside the mastercontainer, which handles automatic TLS certificate generation for the AIO interface, is vulnerable to receiving DNS challenges for arbitrary hostnames from anyone on the internet. While this does not compromise your server's security, it can result in cluttered logs and rejected certificate renewal attempts due to rate limit abuse. To mitigate this issue, it is recommended to place the AIO interface behind a VPN and/or limit its public exposure.\n"
        },
        {
          "name": "reverse-proxy.md",
          "type": "blob",
          "size": 46.263671875,
          "content": "# Reverse Proxy Documentation\n\n> [!NOTE]\n> Please note that AIO comes secured with TLS out-of-the-box. So you don't need to necessarily set up your own reverse proxy if you only want to run Nextcloud AIO which is much easier. See [the normal readme](https://github.com/nextcloud/all-in-one?tab=readme-ov-file#how-to-use-this) in that case. However if port 443 should already be used because you already run a web server or reverse proxy (like Apache, Nginx, Caddy, Cloudflare Tunnel and else), you need to follow this reverse proxy documentation to set up Nextcloud AIO.\n\n## Introduction\nIn order to run Nextcloud behind a web server or reverse proxy (like Apache, Nginx, Caddy, Cloudflare Tunnel and else), you need to:\n1. add a specific config to your web server or reverse proxy. [See the documentation below.](#1-configure-the-reverse-proxy)\n2. specify the port that AIO's integrated Apache container shall use via the environmental variable `APACHE_PORT` (that runs inside its own container and published this port on the host) and adjust the `docker run` command of AIO. [See the documentation below.](#2-use-this-startup-command).\n3. Open the AIO interface at port `8080` and type in and validate your domain. [See the documentation below.](#4-open-the-aio-interface)\n\nHere one example with all reverse proxy settings for Linux:\n```\nsudo docker run \\\n--init \\\n--sig-proxy=false \\\n--name nextcloud-aio-mastercontainer \\\n--restart always \\\n--publish 8080:8080 \\\n--env APACHE_PORT=11000 \\\n--env APACHE_IP_BINDING=0.0.0.0 \\\n--env APACHE_ADDITIONAL_NETWORK=\"\" \\\n--env SKIP_DOMAIN_VALIDATION=false \\\n--volume nextcloud_aio_mastercontainer:/mnt/docker-aio-config \\\n--volume /var/run/docker.sock:/var/run/docker.sock:ro \\\nnextcloud/all-in-one:latest\n```\n\n<details>\n\n<summary>Explanation of the command</summary>\n\n- `sudo docker run` This command spins up a new docker container. Docker commands can optionally be used without `sudo` if the user is added to the docker group (this is not the same as docker rootless, see FAQ in the normal readme).\n- `--init` This option makes sure that no zombie-processes are created, ever. See [the Docker documentation](https://docs.docker.com/reference/cli/docker/container/run/#init).\n- `--sig-proxy=false` This option allows to exit the container shell that gets attached automatically when using `docker run` by using `[CTRL] + [C]` without shutting down the container.\n- `--name nextcloud-aio-mastercontainer` This is the name of the container. This line is not allowed to be changed, since mastercontainer updates would fail.\n- `--restart always` This is the \"restart policy\". `always` means that the container should always get started with the Docker daemon. See the Docker documentation for further detail about restart policies: https://docs.docker.com/config/containers/start-containers-automatically/\n- `--publish 8080:8080` This means that port 8080 of the container should get published on the host using port 8080. This port is used for the AIO interface and uses a self-signed certificate by default. You can also use a different host port if port 8080 is already used on your host, for example `--publish 8081:8080` (only the first port can be changed for the host, the second port is for the container and must remain at 8080).\n- `--env APACHE_PORT=11000` This is the port that is published on the host that runs Docker and Nextcloud AIO at which the reverse proxy should point at.\n- `--env APACHE_IP_BINDING=0.0.0.0` This can be modified to allow access to the published port on the host only from certain ip-addresses. [See this documentation](#3-limit-the-access-to-the-apache-container)\n- `--env APACHE_ADDITIONAL_NETWORK=\"\"` This can be used to put the sibling apache container that is created by AIO into a specified network - useful if your reverse proxy runs as a container on the same host. [See this documentation](#adapting-the-sample-web-server-configurations-below)\n- `--env SKIP_DOMAIN_VALIDATION=false` This can be set to `true` if the domain validation does not work and you are sure that you configured everything correctly after you followed [the debug documentation](#6-how-to-debug-things).\n- `--volume nextcloud_aio_mastercontainer:/mnt/docker-aio-config` This means that the files that are created by the mastercontainer will be stored in a docker volume that is called `nextcloud_aio_mastercontainer`. This line is not allowed to be changed, since built-in backups would fail later on.\n- `--volume /var/run/docker.sock:/var/run/docker.sock:ro` The docker socket is mounted into the container which is used for spinning up all the other containers and for further features. It needs to be adjusted on Windows/macOS and on docker rootless. See the applicable documentation on this. If adjusting, don't forget to also set `WATCHTOWER_DOCKER_SOCKET_PATH`! If you dislike this, see https://github.com/nextcloud/all-in-one/tree/main/manual-install.\n- `nextcloud/all-in-one:latest` This is the docker container image that is used.\n- Further options can be set using environment variables, for example `--env NEXTCLOUD_DATADIR=\"/mnt/ncdata\"` (This is an example for Linux. See [this](https://github.com/nextcloud/all-in-one#how-to-change-the-default-location-of-nextclouds-datadir) for other OS' and for an explanation of what this value does. This specific one needs to be specified upon the first startup if you want to change it to a specific path instead of the default Docker volume). To see explanations and examples for further variables (like changing the location of Nextcloud's datadir or mounting some locations as external storage into the Nextcloud container), read through this readme and look at the docker-compose file: https://github.com/nextcloud/all-in-one/blob/main/compose.yaml\n\n</details>\n\n> [!Note] \n> If you run into troubles, see [the debug section](#6-how-to-debug-things).\n\n---\n\n> [!IMPORTANT] \n> If you need HTTPS between Nextcloud and the reverse proxy because it is running on a different server in the same network, simply add another reverse proxy to the chain that runs on the same server like AIO and takes care of HTTPS proxying (most likely via self-signed certificates). Another option would be to create a VPN between the server that runs AIO and the server that runs the reverse proxy which takes care of encrypting the connection.\n\n> [!NOTE]\n> Since the Apache container gets created by the mastercontainer, there is **NO** way to provide custom docker labels or custom environmental variables for the Apache container. So please do not attempt to do this because it will fail!\n\n## Content\n\nThe process to run Nextcloud behind a reverse proxy consists of at least steps 1, 2 and 4:\n1. **Configure the reverse proxy! See [point 1](#1-configure-the-reverse-proxy)**\n1. **Use this startup command! See [point 2](#2-use-this-startup-command)**\n1. Optional: if the reverse proxy is installed on the same host and in the host network, you should limit the apache container to only listen on localhost. See [point 3](#3-limit-the-access-to-the-apache-container)\n1. **Open the AIO interface. See [point 4](#4-open-the-aio-interface)**\n1. Optional: get a valid certificate for the AIO interface! See [point 5](#5-optional-get-a-valid-certificate-for-the-aio-interface)\n1. Optional: how to debug things? See [point 6](#6-how-to-debug-things)\n\n## 1. Configure the reverse proxy\n\n### Adapting the sample web server configurations below\n1. Replace `<your-nc-domain>` with the domain on which you want to run Nextcloud.\n1. Adjust the port `11000` to match your chosen `APACHE_PORT`.\n1. Adjust `localhost` or `127.0.0.1` to point to the Nextcloud server IP or domain depending on where the reverse proxy is running. See the following options.\n\n    <details>\n\n    <summary>On the same server without a container</summary>\n\n    For this setup, the default sample configurations with `localhost:$APACHE_PORT` should work.\n\n    </details>\n\n    <details>\n\n    <summary>On the same server in a Docker container</summary>\n\n    The reverse-proxy container needs to be connected to the nextcloud containers. This can be achieved one of these 3 ways:\n    1. Utilize host networking instead of docker bridge networking: Specify `--network host` option (or `network_mode: host` for docker-compose) as setting for the reverse proxy container to connect it to the host network. If you are using a firewall on the server, you need to open ports 80 and 443 for the reverse proxy manually. With this setup, the default sample configurations with reverse-proxy pointing to `localhost:$APACHE_PORT` should work directly.\n    1. Connect nextcloud's external-facing containers to the reverse-proxy's docker network by specifying env variable APACHE_ADDITIONAL_NETWORK. With this setup, the reverse proxy can utilize Docker bridge network's DNS name resolution to access nextcloud at `http://nextcloud-aio-apache:$APACHE_PORT`. ⚠️⚠️⚠️ Note, the specified network must already exist before Nextcloud AIO is started. Otherwise it will fail to start the container because the network is not existing.\n    1. Connect the reverse-proxy container to the `nextcloud-aio` network by specifying it as a secondary (external) network for the reverse proxy container. With this setup also, the reverse proxy can utilize Docker bridge network's DNS name resolution to access nextcloud at `http://nextcloud-aio-apache:$APACHE_PORT` .\n\n    </details>\n\n    <details>\n\n    <summary>On a different server (in container or not)</summary>\n\n    Use the private ip-address of the host that shall be running AIO. So e.g. `private.ip.address.of.aio.server:$APACHE_PORT` instead of `localhost:$APACHE_PORT`.\n    \n    If you are not sure how to retrieve that, you can run: `ip a | grep \"scope global\" | head -1 | awk '{print $2}' | sed 's|/.*||'` on the server that shall be running AIO (the commands only work on Linux).\n\n    </details>\n\n### Apache\n\n<details>\n\n<summary>click here to expand</summary>\n\n**Disclaimer:** It might be possible that the config below is not working 100% correctly, yet. Improvements to it are very welcome!\n\nAdd this as a new Apache site config:\n\n(The config below assumes that you are using certbot to get your certificates. You need to create them first in order to make it work.)\n\n```\n<VirtualHost *:80>\n    ServerName <your-nc-domain>\n\n    RewriteEngine On\n    RewriteCond %{HTTPS} off\n    RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}\n    RewriteCond %{SERVER_NAME} =<your-nc-domain>\n    RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName <your-nc-domain>\n\n    # Reverse proxy based on https://httpd.apache.org/docs/current/mod/mod_proxy_wstunnel.html\n    RewriteEngine On\n    ProxyPreserveHost On\n    RequestHeader set X-Real-IP %{REMOTE_ADDR}s\n    AllowEncodedSlashes NoDecode\n    \n    ProxyPass / http://localhost:11000/ nocanon # Adjust to match APACHE_PORT and APACHE_IP_BINDING. See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md#adapting-the-sample-web-server-configurations-below\n    ProxyPassReverse / http://localhost:11000/ # Adjust to match APACHE_PORT and APACHE_IP_BINDING. See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md#adapting-the-sample-web-server-configurations-below\n    \n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteCond %{THE_REQUEST} \"^[a-zA-Z]+ /(.*) HTTP/\\d+(\\.\\d+)?$\"\n    RewriteRule .? \"ws://localhost:11000/%1\" [P,L,UnsafeAllow3F] # Adjust to match APACHE_PORT and APACHE_IP_BINDING. See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md#adapting-the-sample-web-server-configurations-below\n\n    # Enable h2, h2c and http1.1\n    Protocols h2 h2c http/1.1\n    \n    # Solves slow upload speeds caused by http2\n    H2WindowSize 5242880\n\n    # TLS\n    SSLEngine               on\n    SSLProtocol             -all +TLSv1.2 +TLSv1.3\n    SSLCipherSuite          ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305\n    SSLHonorCipherOrder     off\n    SSLSessionTickets       off\n\n    # If running apache on a subdomain (eg. nextcloud.example.com) of a domain that already has an wildcard ssl certificate from certbot on this machine, \n    # the <your-nc-domain> in the below lines should be replaced with just the domain (eg. example.com), not the subdomain. \n    # In this case the subdomain should already be secured without additional actions\n    SSLCertificateFile /etc/letsencrypt/live/<your-nc-domain>/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/<your-nc-domain>/privkey.pem\n\n    # Disable HTTP TRACE method.\n    TraceEnable off\n    <Files \".ht*\">\n        Require all denied\n    </Files>\n\n    # Support big file uploads\n    LimitRequestBody 0\n    Timeout 86400\n    ProxyTimeout 86400\n</VirtualHost>\n```\n\n⚠️ **Please note:** Look into [this](#adapting-the-sample-web-server-configurations-below) to adapt the above example configuration.\n\nTo make the config work you can run the following command:\n`sudo a2enmod rewrite proxy proxy_http proxy_wstunnel ssl headers http2`\n\n</details>\n\n### Caddy (recommended)\n\n<details>\n\n<summary>click here to expand</summary>\n\n**Hint:** You may have a look at [this guide](https://github.com/nextcloud/all-in-one/discussions/575#discussion-4055615) for a more complete but possibly outdated example.\n\nAdd this to your Caddyfile:\n\n```\nhttps://<your-nc-domain>:443 {\n    reverse_proxy localhost:11000 # Adjust to match APACHE_PORT and APACHE_IP_BINDING. See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md#adapting-the-sample-web-server-configurations-below\n}\n```\nThe Caddyfile is a text file called `Caddyfile` (no extension) which – if you should be running Caddy inside a container – should usually be created in the same location as your `compose.yaml` file prior to starting the container.\n\n⚠️ **Please note:** look into [this](#adapting-the-sample-web-server-configurations-below) to adapt the above example configuration.\n\n**Advice:** You may have a look at [this](https://github.com/nextcloud/all-in-one/discussions/575#discussion-4055615) for a more complete example.\n\n</details>\n\n### Caddy with ACME DNS-challenge\n\n<details>\n\n<summary>click here to expand</summary>\n\nYou can get AIO running using the ACME DNS-challenge. Here is how to do it.\n\n1. Follow [this documentation](https://caddy.community/t/how-to-use-dns-provider-modules-in-caddy-2/8148) in order to get a Caddy build that is compatible with your domain provider's DNS challenge.\n1. Add this to your Caddyfile:\n    ```\n    https://<your-nc-domain>:443 {\n        reverse_proxy localhost:11000 # Adjust to match APACHE_PORT and APACHE_IP_BINDING. See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md#adapting-the-sample-web-server-configurations-below\n        tls {\n            dns <provider> <key>\n        }\n    }\n    ```\n    ⚠️ **Please note:** Look into [this](#adapting-the-sample-web-server-configurations-below) to adapt the above example configuration.\n\n    You also need to adjust `<provider>` and `<key>` to match your case.\n\n1. Now continue with [point 2](#2-use-this-startup-command) but additionally, add `--env SKIP_DOMAIN_VALIDATION=true` to the docker run command of the mastercontainer (but before the last line `nextcloud/all-in-one:latest`) which will disable the domain validation (because it is known that the domain validation will not work when using the DNS-challenge since no port is publicly opened).\n\n**Advice:** In order to make it work in your home network, you may add the internal ipv4-address of your reverse proxy as A DNS-record to your domain and disable the dns-rebind-protection in your router. Another way it to set up a local dns-server like a pi-hole and set up a custom dns-record for that domain that points to the internal ip-adddress of your reverse proxy (see https://github.com/nextcloud/all-in-one#how-can-i-access-nextcloud-locally). If both is not possible, you may add the domain to the hosts file which is needed then for any devices that shall use the server.\n\n</details>\n\n### Citrix ADC VPX / Citrix Netscaler\n\n<details>\n\n<summary>click here to expand</summary>\n\nFor a reverse proxy example guide for Citrix ADC VPX / Citrix Netscaler, see this guide by @esmith443: https://github.com/nextcloud/all-in-one/discussions/2452\n\n</details>\n\n### Cloudflare Tunnel\n\n<details>\n\n<summary>click here to expand</summary>\n\n\n**Hint:** You may have a look at [this guide](https://github.com/nextcloud/all-in-one/discussions/2845#discussioncomment-6423237) for a more complete but possibly outdated example.\n\nAlthough it does not seem like it is the case but from AIO perspective a Cloudflare Tunnel works like a reverse proxy. Please see the [caveats](https://github.com/nextcloud/all-in-one#notes-on-cloudflare-proxytunnel) before proceeding. Here is then how to make it work:\n\n1. Install the Cloudflare Tunnel on the same machine where AIO will be running on and point the Tunnel with the domain that you want to use for AIO to `http://localhost:11000`.<br>\n⚠️ **Please note:** look into [this](#adapting-the-sample-web-server-configurations-below) to adapt the above example configuration.\n1. Now continue with [point 2](#2-use-this-startup-command) but add `--env SKIP_DOMAIN_VALIDATION=true` to the docker run command - which will disable the domain validation (because it is known that the domain validation will not work behind a Cloudflare Tunnel).\n\n**Advice:** Make sure to [disable Cloudflares Rocket Loader feature](https://help.nextcloud.com/t/login-page-not-working-solved/149417/8) as otherwise Nextcloud's login prompt will not be shown.\n\n</details>\n\n### HaProxy\n\n<details>\n\n<summary>click here to expand</summary>\n\n**Disclaimer:** It might be possible that the config below is not working 100% correctly, yet. Improvements to it are very welcome!\n\nHere is an example HaProxy config:\n\n```\nglobal\n    chroot                      /var/haproxy\n    log                         /var/run/log audit debug\n    lua-prepend-path            /tmp/haproxy/lua/?.lua\n    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305\n    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\n    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets\n\n    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305\n    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\n    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets\n\ndefaults\n    log     global\n    option redispatch -1\n    retries 3\n    default-server init-addr last,libc\n\n# Frontend: LetsEncrypt_443 ()\nfrontend LetsEncrypt_443\n    bind 0.0.0.0:443 name 0.0.0.0:443 ssl crt-list /tmp/haproxy/ssl/605f6609f106d1.17683543.certlist \n    mode http\n    option http-keep-alive\n    default_backend acme_challenge_backend\n    option forwardfor\n    # tuning options\n    timeout client 30s\n\n    # logging options\n    # ACL: find_acme_challenge\n    acl acl_605f6d4b6453d2.03059920 path_beg -i /.well-known/acme-challenge/\n    # ACL: Nextcloud\n    acl acl_60604e669c3ca4.13013327 hdr(host) -i <your-nc-domain>\n\n    # ACTION: redirect_acme_challenges\n    use_backend acme_challenge_backend if acl_605f6d4b6453d2.03059920\n    # ACTION: Nextcloud\n    use_backend Nextcloud if acl_60604e669c3ca4.13013327\n\n\n# Frontend: LetsEncrypt_80 ()\nfrontend LetsEncrypt_80\n    bind 0.0.0.0:80 name 0.0.0.0:80 \n    mode tcp\n    default_backend acme_challenge_backend\n    # tuning options\n    timeout client 30s\n\n    # logging options\n    # ACL: find_acme_challenge\n    acl acl_605f6d4b6453d2.03059920 path_beg -i /.well-known/acme-challenge/\n\n    # ACTION: redirect_acme_challenges\n    use_backend acme_challenge_backend if acl_605f6d4b6453d2.03059920\n\n# Frontend (DISABLED): 1_HTTP_frontend ()\n\n# Frontend (DISABLED): 1_HTTPS_frontend ()\n\n# Frontend (DISABLED): 0_SNI_frontend ()\n\n# Backend: acme_challenge_backend (Added by Let's Encrypt plugin)\nbackend acme_challenge_backend\n    # health checking is DISABLED\n    mode http\n    balance source\n    # stickiness\n    stick-table type ip size 50k expire 30m  \n    stick on src\n    # tuning options\n    timeout connect 30s\n    timeout server 30s\n    http-reuse safe\n    server acme_challenge_host 127.0.0.1:43580 \n\n# Backend: Nextcloud ()\nbackend Nextcloud\n    mode http\n    balance source\n    server Nextcloud localhost:11000 # Adjust to match APACHE_PORT and APACHE_IP_BINDING. See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md#adapting-the-sample-web-server-configurations-below\n```\n\n⚠️ **Please note:** Look into [this](#adapting-the-sample-web-server-configurations-below) to adapt the above example configuration.\n\n</details>\n\n### Nginx, Freenginx, Openresty, Angie\n\n<details>\n\n<summary>click here to expand</summary>\n\n**Hint:** You may have a look at [this guide](https://github.com/nextcloud/all-in-one/discussions/588#discussioncomment-2811152) for a more complete but possibly outdated example.\n\n**Disclaimer:** This config was tested and should normally work on all modern Nginx versions. Improvements to the config are very welcome!\n\nAdd the below template to your Nginx config.\n\n**Note:** please check your Nginx version by running: `nginx -v` and adjust the lines marked with version notes to fit your version.\n\n```\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    '' close;\n}\n\nserver {\n    listen 80;\n    listen [::]:80;            # comment to disable IPv6\n\n    if ($scheme = \"http\") {\n        return 301 https://$host$request_uri;\n    }\n    if ($http_x_forwarded_proto = \"http\") {\n        return 301 https://$host$request_uri;\n    }\n\n    listen 443 ssl http2;      # for nginx versions below v1.25.1\n    listen [::]:443 ssl http2; # for nginx versions below v1.25.1 - comment to disable IPv6\n\n    # listen 443 ssl;      # for nginx v1.25.1+\n    # listen [::]:443 ssl; # for nginx v1.25.1+ - keep comment to disable IPv6\n    # http2 on;            # uncomment to enable HTTP/2 - supported on nginx v1.25.1+\n\n    # listen 443 quic reuseport;       # uncomment to enable HTTP/3 / QUIC - supported on nginx v1.25.0+ - please remove \"reuseport\" if there is already another quic listener on port 443 with enabled reuseport\n    # listen [::]:443 quic reuseport;  # uncomment to enable HTTP/3 / QUIC - supported on nginx v1.25.0+ - please remove \"reuseport\" if there is already another quic listener on port 443 with enabled reuseport - keep comment to disable IPv6\n    # http3 on;                                 # uncomment to enable HTTP/3 / QUIC - supported on nginx v1.25.0+\n    # quic_gso on;                              # uncomment to enable HTTP/3 / QUIC - supported on nginx v1.25.0+\n    # quic_retry on;                            # uncomment to enable HTTP/3 / QUIC - supported on nginx v1.25.0+\n    # quic_bpf on;                              # improves  HTTP/3 / QUIC - supported on nginx v1.25.0+, if nginx runs as a docker container you need to give it privileged permission to use this option\n    # add_header Alt-Svc 'h3=\":443\"; ma=86400'; # uncomment to enable HTTP/3 / QUIC - supported on nginx v1.25.0+\n\n    proxy_buffering off;\n    proxy_request_buffering off;\n\n    client_max_body_size 0;\n    client_body_buffer_size 512k;\n    # http3_stream_buffer_size 512k; # uncomment to enable HTTP/3 / QUIC - supported on nginx v1.25.0+\n    proxy_read_timeout 86400s;\n\n    server_name <your-nc-domain>;\n\n    location / {\n        proxy_pass http://127.0.0.1:11000$request_uri; # Adjust to match APACHE_PORT and APACHE_IP_BINDING. See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md#adapting-the-sample-web-server-configurations-below\n\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Port $server_port;\n        proxy_set_header X-Forwarded-Scheme $scheme;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header Host $host;\n        proxy_set_header Early-Data $ssl_early_data;\n\n        # Websocket\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n    }\n\n    # If running nginx on a subdomain (eg. nextcloud.example.com) of a domain that already has an wildcard ssl certificate from certbot on this machine, \n    # the <your-nc-domain> in the below lines should be replaced with just the domain (eg. example.com), not the subdomain. \n    # In this case the subdomain should already be secured without additional actions\n    ssl_certificate /etc/letsencrypt/live/<your-nc-domain>/fullchain.pem;   # managed by certbot on host machine\n    ssl_certificate_key /etc/letsencrypt/live/<your-nc-domain>/privkey.pem; # managed by certbot on host machine\n\n    ssl_dhparam /etc/dhparam; # curl -L https://ssl-config.mozilla.org/ffdhe2048.txt -o /etc/dhparam\n\n    ssl_early_data on;\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:SSL:10m;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ecdh_curve x25519:x448:secp521r1:secp384r1:secp256r1;\n\n    ssl_prefer_server_ciphers on;\n    ssl_conf_command Options PrioritizeChaCha;\n    ssl_ciphers TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256;\n}\n\n```\n\n⚠️ **Please note:** look into [this](#adapting-the-sample-web-server-configurations-below) to adapt the above example configuration.\n\n</details>\n\n### NPMplus (Fork of Nginx-Proxy-Manager - NPM)\n\n<details>\n\n<summary>click here to expand</summary>\n\n⚠️ **Please note:** This is not needed when running NPMplus as a community container.\n\nFirst, make sure the environmental variables `PUID` and `PGID` in the `compose.yaml` file for NPM are either unset or set to `0`. <br>\nIf you need to change the GID/PID then please add `net.ipv4.ip_unprivileged_port_start=0` at the end of `/etc/sysctl.conf`. <br>\nNote: this will cause that a non root user can bind privileged ports.\n\nSecond, see these screenshots for a working config:\n\n![grafik](https://github.com/user-attachments/assets/c32c8fe8-7417-4f8f-9625-24b95651e630)\n\n![grafik](https://github.com/user-attachments/assets/a26c53fd-6cc8-4a6b-a86f-c2f94b70088f)\n\n![grafik](https://github.com/user-attachments/assets/75d7f539-35d1-4a3e-8c51-43123f698893)\n\n![grafik](https://github.com/user-attachments/assets/e494edb5-8b70-4d45-bc9b-374219230041)\n\n⚠️ **Please note:** Nextcloud will complain that X-XXS-Protection is set to the wrong value, this is intended by NPMplus. <br>\n⚠️ **Please note:** look into [this](#adapting-the-sample-web-server-configurations-below) to adapt the above example configuration.\n\n</details>\n\n### Nginx-Proxy-Manager - NPM\n\n<details>\n\n<summary>click here to expand</summary>\n\n**Hint:** You may have a look at [this guide](https://github.com/nextcloud/all-in-one/discussions/588#discussioncomment-3040493) for a more complete but possibly oudated example.\n\nFirst, make sure the environmental variables `PUID` and `PGID` in the `compose.yaml` file for NPM are either unset or set to `0`. <br>\nIf you need to change the GID/PID then please add `net.ipv4.ip_unprivileged_port_start=0` at the end of `/etc/sysctl.conf`. <br>\nNote: this will cause that a non root user can bind privileged ports.\n\nSecond, see these screenshots for a working config:\n\n![grafik](https://user-images.githubusercontent.com/75573284/213889707-b7841ca0-3ea7-4321-acf6-50e1c1649442.png)\n\n![grafik](https://user-images.githubusercontent.com/75573284/213889724-1ab32264-3e0c-4d83-b067-9fe9d1672fb2.png)\n\n![grafik](https://github.com/nextcloud/all-in-one/assets/24786786/fecbb5ef-d2f4-4e0f-bc4b-82207e2c2809)\n\n![grafik](https://user-images.githubusercontent.com/75573284/213889746-87dbe8c5-4d1f-492f-b251-bbf82f1510d0.png)\n\n```\nclient_body_buffer_size 512k;\nproxy_read_timeout 86400s;\nclient_max_body_size 0;\n```\n\n⚠️ **Please note:** look into [this](#adapting-the-sample-web-server-configurations-below) to adapt the above example configuration.\nAlso change `<you>@<your-mail-provider-domain>` to a mail address of yours.\n\n</details>\n\n### Nginx-Proxy\n\n<details>\n\n<summary>click here to expand</summary>\n\nUnfortunately, it is not possible to configure Nginx-proxy in a way that works because it completely relies on environmental variables of the docker containers itself. Providing these variables does not work as stated above.\n\nIf you really want to use AIO, we recommend you to switch to caddy. It is simply amazing!<br>\n\nApart from that, there is a [manual-install](https://github.com/nextcloud/all-in-one/tree/main/manual-install).\n\n</details>\n\n### Node.js with Express\n\n<details>\n\n<summary>click here to expand</summary>\n\n**Disclaimer:** it might be possible that the config below is not working 100% correctly, yet. Improvements to it are very welcome!\n\nFor Node.js, we will use the npm package `http-proxy`. WebSockets must be handled separately.\n\nThis example only uses `http`, but if your Express server already uses a `https` server, then follow the same instructions for `https`.\n\n```js\nconst HttpProxy = require('http-proxy');\nconst express = require('express');\nconst http = require('http');\n\nconst app = express();\nconst proxy = HttpProxy.createProxyServer({\n\ttarget: 'http://localhost:11000', // Adjust to match APACHE_PORT and APACHE_IP_BINDING. See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md#adapting-the-sample-web-server-configurations-below\n\t// Timeout can be changed to your liking.\n\ttimeout: 1000 * 60 * 3,\n\tproxyTimeout: 1000 * 60 * 3,\n\t// Not 100% certain whether autoRewrite is necessary, but enabling it SEEMS to make it behave more stably.\n\tautoRewrite: true,\n\t// Do not enable followRedirects.\n\tfollowRedirects: false,\n});\n\n// Handle errors with proxy.web and proxy.ws\nfunction onProxyError(err, req, res, target) {\n\t// Handle errors however you like. Here's an example:\n\tif (err.code === 'ECONNREFUSED') {\n\t\treturn res.status(503).send('Nextcloud server is currently not running. It may be down for temporary maintenance.');\n\t}\n\t// other errors\n\telse {\n\t\tconsole.error(err);\n\t\treturn res.status(500).send(String(err));\n\t}\n}\n\napp.use((req, res) => {\n\tproxy.web(req, res, {}, onProxyError);\n});\n\nconst httpServer = http.createServer(app);\nhttpServer.listen('80');\n\n// Listen for an upgrade to a WebSocket connection.\nhttpServer.on('upgrade', (req, socket, head) => {\n\tproxy.ws(req, socket, head, {}, onProxyError);\n});\n```\n\nIf you are using the Express package `vhost` for your app, you can use `proxy.web` inside the vhosted express function (see the following code snippet), but `proxy.ws` still needs to be done \"globally\" on your http server. Nextcloud should automatically ignore websocket requests for other domains.\n\n```js\nconst HttpProxy = require('http-proxy');\nconst express = require('express');\nconst http = require('http');\n\nconst myNextcloudApp = express();\nconst myOtherApp = express();\nconst vhost = express();\n\n// Definitions for proxy and onProxyError unchanged. (see above)\n\nmyNextcloudApp.use((req, res) => {\n\tproxy.web(req, res, {}, onProxyError);\n});\n\nvhost.use(vhostFunc('<your-nc-domain>', myNextcloudApp));\n\nconst httpServer = http.createServer(app);\nhttpServer.listen('80');\n\n// Listen for an upgrade to a WebSocket connection.\nhttpServer.on('upgrade', (req, socket, head) => {\n\tproxy.ws(req, socket, head, {}, onProxyError);\n});\n```\n\n⚠️ **Please note:** look into [this](#adapting-the-sample-web-server-configurations-below) to adapt the above example configuration.\n\n</details>\n\n### Synology Reverse Proxy\n\n<details>\n\n<summary>click here to expand</summary>\n\n**Disclaimer:** it might be possible that the config below is not working 100% correctly, yet. Improvements to it are very welcome!\n\nSee these screenshots for a working config:\n\n![image](https://user-images.githubusercontent.com/89748315/192525606-48cab54b-866e-4964-90a8-15e71bd362fb.png)\n\n![image](https://user-images.githubusercontent.com/70434961/213193789-fa936edc-e307-4e6a-9a53-ae26d1bf2f42.jpg)\n\n⚠️ **Please note:** look into [this](#adapting-the-sample-web-server-configurations-below) to adapt the above example configuration.\n\n</details>\n\n### Traefik 2\n\n<details>\n\n<summary>click here to expand</summary>\n\n**Hint:** You may have a look at [this video](https://www.youtube.com/watch?v=VLPSRrLMDmA) for a more complete but possibly outdated example.\n\n**Disclaimer:** it might be possible that the config below is not working 100% correctly, yet. Improvements to it are very welcome!\n\nTraefik's building blocks (router, service, middlewares) need to be defined using dynamic configuration similar to [this](https://doc.traefik.io/traefik/providers/file/#configuration-examples) official Traefik configuration example. Using **docker labels _won't work_** because of the nature of the project.\n\nThe examples below define the dynamic configuration in YAML files. If you rather prefer TOML, use a YAML to TOML converter.\n\n1. In Traefik's static configuration define a [file provider](https://doc.traefik.io/traefik/providers/file/) for dynamic providers:\n\n    ```yml\n    # STATIC CONFIGURATION\n   \n    entryPoints:\n      https:\n        address: \":443\" # Create an entrypoint called \"https\" that uses port 443\n        # If you want to enable HTTP/3 support, uncomment the line below\n        # http3: {}\n    \n    certificatesResolvers:\n      # Define \"letsencrypt\" certificate resolver\n      letsencrypt:\n        acme:\n          storage: /letsencrypt/acme.json # Defines the path where certificates should be stored\n          email: <your-email-address> # Where LE sends notification about certificates expiring\n          tlschallenge: true\n   \n    providers:\n      file:\n        directory: \"/path/to/dynamic/conf\" # Adjust the path according your needs.\n        watch: true\n\n    # Enable HTTP/3 feature by uncommenting the lines below. Don't forget to route 443 UDP to Traefik (Firewall\\NAT\\Traefik Container)\n    # experimental:\n      # http3: true\n    ```\n\n1. Declare the router, service and middlewares for Nextcloud in `/path/to/dynamic/conf/nextcloud.yml`:\n\n    ```yml\n    http:\n      routers:\n        nextcloud:\n          rule: \"Host(`<your-nc-domain>`)\"\n          entrypoints:\n            - \"https\"\n          service: nextcloud\n          middlewares:\n            - nextcloud-chain\n          tls:\n            certresolver: \"letsencrypt\"\n\n      services:\n        nextcloud:\n          loadBalancer:\n            servers:\n              - url: \"http://localhost:11000\" # Adjust to match APACHE_PORT and APACHE_IP_BINDING. See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md#adapting-the-sample-web-server-configurations-below\n\n      middlewares:\n        nextcloud-secure-headers:\n          headers:\n            hostsProxyHeaders:\n              - \"X-Forwarded-Host\"\n            referrerPolicy: \"same-origin\"\n\n        https-redirect:\n          redirectscheme:\n            scheme: https \n\n        nextcloud-chain:\n          chain:\n            middlewares:\n              # - ... (e.g. rate limiting middleware)\n              - https-redirect\n              - nextcloud-secure-headers\n    ```\n\n---\n\n⚠️ **Please note:** look into [this](#adapting-the-sample-web-server-configurations-below) to adapt the above example configuration.\n\n</details>\n\n### IIS with ARR and URL Rewrite\n\n<details>\n\n<summary>click here to expand</summary>\n\n**Disclaimer:** It might be possible that the config below is not working 100% correctly, yet. Improvements to it are very welcome!\n\n**Please note:** Using IIS as a reverse proxy comes with some limitations:\n- A maximum upload size of 4GiB, in the example configuration below the limit is set to 2GiB.\n\n\n#### Prerequisites\n1. **Windows Server** with IIS installed.\n2. [**Application Request Routing (ARR)**](https://www.iis.net/downloads/microsoft/application-request-routing) and [**URL Rewrite**](https://www.iis.net/downloads/microsoft/url-rewrite) modules installed.\n3. [**WebSocket Protocol**](https://learn.microsoft.com/en-us/iis/configuration/system.webserver/websocket) feature enabled.\n\nFor information on how to set up IIS as a reverse proxy please refer to [this](https://learn.microsoft.com/en-us/iis/extensions/url-rewrite-module/reverse-proxy-with-url-rewrite-v2-and-application-request-routing).\nThere are also information on how to use the IIS Manager [here](https://learn.microsoft.com/en-us/iis/).\n\nThe following configuration example assumes the following:\n* A site has been created that is configured with HTTPS support and the desired host name.\n* A server farm named `nc-server-farm` has been created and is pointing to the Nextcloud server.\n* No global Rewrite Rules has been created for the `nc-server-farm` server farm.\n\nAdd the following `web.config` file to the root of the site you created as the reverse proxy.\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <system.web>\n    <!-- Allow all urls -->\n    <httpRuntime requestValidationMode=\"2.0\" requestPathInvalidCharacters=\"\" />\n  </system.web>\n  <system.webServer>\n    <rewrite>\n      <!-- useOriginalURLEncoding needs to be set to false, otherwise IIS will double encode urls causing all files with spaces or special characters to be inaccessible -->\n      <rules useOriginalURLEncoding=\"false\">\n        <!-- Force https -->\n        <rule name=\"Https\" stopProcessing=\"true\">\n          <match url=\"(.*)\" />\n          <conditions>\n            <add input=\"{HTTPS}\" pattern=\"^OFF$\" />\n          </conditions>\n          <action type=\"Redirect\" url=\"https://{HTTP_HOST}/{REQUEST_URI}\" appendQueryString=\"false\" />\n        </rule>\n        <!-- Redirect to internal nextcloud server -->\n        <rule name=\"To nextcloud\" stopProcessing=\"true\">\n          <match url=\"(.*)\" />\n          <conditions>\n            <add input=\"{HTTPS}\" pattern=\"^ON$\" />\n          </conditions>\n          <!-- Note that {UNENCODED_URL} already contains starting slash, so we must add it directly after the port number without additional slash -->\n          <action type=\"Rewrite\" url=\"http://nc-server-farm:11000{UNENCODED_URL}\" appendQueryString=\"false\" />\n        </rule>\n      </rules>\n    </rewrite>\n    <security>\n      <!-- Increase upload limit to 2GiB -->\n      <requestFiltering allowDoubleEscaping=\"true\">\n        <requestLimits maxAllowedContentLength=\"2147483648\" />\n      </requestFiltering>\n    </security>\n  </system.webServer>\n</configuration>\n\n```\n⚠️ **Please note:** Look into [this](#adapting-the-sample-web-server-configurations-below) to adapt the above example configuration.\n\n</details>\n\n### Tailscale\n\n<details>\n\n<summary>click here to expand</summary>\n\nFor a reverse proxy example guide for Tailscale, see this guide by @flll: https://github.com/nextcloud/all-in-one/discussions/5439\n\n</details>\n\n\n### Others\n\n<details>\n\n<summary>click here to expand</summary>\n\nConfig examples for other reverse proxies are currently not documented. Pull requests are welcome!\n\n</details>\n\n## 2. Use this startup command\n\nAfter adjusting your reverse proxy config, use the following command to start AIO:<br>\n\n(For a `compose.yaml` example, see the example further [below](#inspiration-for-a-docker-compose-file).)\n\n```\n# For Linux:\nsudo docker run \\\n--init \\\n--sig-proxy=false \\\n--name nextcloud-aio-mastercontainer \\\n--restart always \\\n--publish 8080:8080 \\\n--env APACHE_PORT=11000 \\\n--env APACHE_IP_BINDING=0.0.0.0 \\\n--env APACHE_ADDITIONAL_NETWORK=\"\" \\\n--env SKIP_DOMAIN_VALIDATION=false \\\n--volume nextcloud_aio_mastercontainer:/mnt/docker-aio-config \\\n--volume /var/run/docker.sock:/var/run/docker.sock:ro \\\nnextcloud/all-in-one:latest\n```\n\nNote: you may be interested in adjusting Nextcloud’s datadir to store the files in a different location than the default docker volume. See [this documentation](https://github.com/nextcloud/all-in-one#how-to-change-the-default-location-of-nextclouds-datadir) on how to do it.\n\nYou should also think about limiting the Apache container to listen only on localhost in case the reverse proxy is running on the same host and in the host network, by providing an additional environmental variable to this docker run command. See [point 3](#3-limit-the-access-to-the-apache-container).\n\nOn macOS see https://github.com/nextcloud/all-in-one#how-to-run-aio-on-macos.\n\n<details>\n\n<summary>Command for Windows</summary>\n\nOn Windows, install [Docker Desktop](https://www.docker.com/products/docker-desktop/) (and don't forget to [enable ipv6](https://github.com/nextcloud/all-in-one/blob/main/docker-ipv6-support.md) if you should need that) and run the following command in the command prompt:\n\n```\ndocker run ^\n--init ^\n--sig-proxy=false ^\n--name nextcloud-aio-mastercontainer ^\n--restart always ^\n--publish 8080:8080 ^\n--env APACHE_PORT=11000 ^\n--env APACHE_IP_BINDING=0.0.0.0 ^\n--env APACHE_ADDITIONAL_NETWORK=\"\" ^\n--env SKIP_DOMAIN_VALIDATION=false ^\n--volume nextcloud_aio_mastercontainer:/mnt/docker-aio-config ^\n--volume //var/run/docker.sock:/var/run/docker.sock:ro ^\nnextcloud/all-in-one:latest\n```\n\nAlso, you may be interested in adjusting Nextcloud's Datadir to store the files on the host system. See [this documentation](https://github.com/nextcloud/all-in-one#how-to-change-the-default-location-of-nextclouds-datadir) on how to do it.\n\n</details>\n\nOn Synology DSM see https://github.com/nextcloud/all-in-one#how-to-run-aio-on-synology-dsm\n\n### Inspiration for a docker-compose file\n\nSimply translate the docker run command into a docker-compose file. You can have a look at [this file](https://github.com/nextcloud/all-in-one/blob/main/compose.yaml) for some inspiration but you will need to modify it either way. You can find further examples here: https://github.com/nextcloud/all-in-one/discussions/588\n\n## 3. Limit the access to the Apache container\n\nUse this environment variable during the initial startup of the mastercontainer to make the apache container only listen on localhost: `--env APACHE_IP_BINDING=127.0.0.1`. **Attention:** This is only recommended to be set if you use `localhost` in your reverse proxy config to connect to your AIO instance. If you use an ip-address instead of localhost, you should set it to `0.0.0.0`.\n\n## 4. Open the AIO interface\n\nAfter starting AIO, you should be able to access the AIO Interface via `https://ip.address.of.the.host:8080` and type in and validate the domain that you have configured.<br>\n⚠️ **Important:** do always use an ip-address if you access this port and not a domain as HSTS might block access to it later! (It is also expected that this port uses a self-signed certificate due to security concerns which you need to accept in your browser)<br>\nEnter your domain in the AIO interface that you've used in the reverse proxy config and you should be done. Please do not forget to open/forward port `3478/TCP` and `3478/UDP` in your firewall/router for the Talk container!\n\n## 5. Optional: get a valid certificate for the AIO interface\n\nIf you want to also access your AIO interface publicly with a valid certificate, you can add e.g. the following config to your Caddyfile:\n\n```\nhttps://<your-nc-domain>:8443 {\n    reverse_proxy https://localhost:8080 {\n        transport http {\n            tls_insecure_skip_verify\n        }\n    }\n}\n```\n⚠️ **Please note:** Look into [this](#adapting-the-sample-web-server-configurations-below) to adapt the above example configuration.\n\nAfterwards should the AIO interface be accessible via `https://ip.address.of.the.host:8443`. You can alternatively change the domain to a different subdomain by using `https://<your-alternative-domain>:443` instead of `https://<your-nc-domain>:8443` in the Caddyfile and use that to access the AIO interface.\n\n## 6. How to debug things?\n\nIf something does not work, follow the steps below:\n1. Make sure to exactly follow the whole reverse proxy documentation step-for-step from top to bottom!\n1. Make sure that you used the `docker run` command that is described in this reverse proxy documentation. **Hint:** make sure that you have set the `APACHE_PORT` via e.g. `--env APACHE_PORT=11000` during the docker run command!\n1. Make sure to set the `APACHE_IP_BINDING` variable correctly. If in doubt, set it to `--env APACHE_IP_BINDING=0.0.0.0`\n1. Make sure that all ports to which your reverse proxy is pointing match the chosen `APACHE_PORT`.\n1. Make sure to follow [this](#adapting-the-sample-web-server-configurations-below) to adapt the example configurations to your specific setup!\n1. Make sure that the mastercontainer is able to spawn other containers. You can do so by checking that the mastercontainer indeed has access to the Docker socket which might not be positioned in one of the suggested directories like `/var/run/docker.sock` but in a different directory, based on your OS and the way how you installed Docker. The mastercontainer logs should help figuring this out. You can have a look at them by running `sudo docker logs nextcloud-aio-mastercontainer` after the container is started the first time.\n1. Check if after the mastercontainer was started, the reverse proxy if running inside a container, can reach the provided apache port. You can test this by running `nc -z localhost 11000; echo $?` from inside the reverse proxy container. If the output is `0`, everything works. Alternatively you can of course use instead of `localhost` the ip-address of the host here for the test.\n1. Make sure that you are not behind CGNAT. If that is the case, you will not be able to open ports properly. In that case you might use a Cloudflare Tunnel!\n1. If you use Cloudflare, you might need to skip the domain validation anyways since it is known that Cloudflare might block the validation attempts. In that case, see the last option below!\n1. If your reverse proxy is configured to use the host network (as recommended in the above docs) or running on the host, make sure that you've configured your firewall to open port 443 (and 80)!\n1. Check if you have a public IPv4- and public IPv6-address. If you only have a public IPv6-address (e.g. due to DS-Lite), make sure to enable IPv6 in Docker and your whole networking infrastructure (e.g. also by adding an AAAA DNS-entry to your domain)!\n1. Try to configure everything from scratch - if it still does not work by following https://github.com/nextcloud/all-in-one#how-to-properly-reset-the-instance.\n1. As last resort, you may disable the domain validation by adding `--env SKIP_DOMAIN_VALIDATION=true` to the docker run command. But only use this if you are completely sure that you've correctly configured everything!\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}