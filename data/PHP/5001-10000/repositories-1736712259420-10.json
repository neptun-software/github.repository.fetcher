{
  "metadata": {
    "timestamp": 1736712259420,
    "page": 10,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "doctrine/dbal",
      "stars": 9507,
      "defaultBranch": "4.2.x",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 5.05078125,
          "content": "build: false\nplatform:\n  - x64\n#matrix:\n#  fast_finish: true # kills the build at the first failure\nclone_folder: C:\\projects\\dbal\nclone_depth: 2\n\nonly_commits:\n  files:\n    - .appveyor.yml\n    - ci\\appveyor\\\n    - composer.*\n    - src\\\n    - tests\\\n\ncache:\n  - C:\\ProgramData\\chocolatey\\bin -> .appveyor.yml\n  - C:\\ProgramData\\chocolatey\\lib -> .appveyor.yml\n  - C:\\tools\\php -> .appveyor.yml\n  - C:\\tools\\composer -> .appveyor.yml\n  - '%LOCALAPPDATA%\\Composer\\files -> composer.json'\n\n## Build matrix for lowest and highest possible targets\nenvironment:\n  matrix:\n  - db: mssql\n    driver: sqlsrv\n    db_version: sql2017\n    php: 8.1\n  - db: mssql\n    driver: pdo_sqlsrv\n    db_version: sql2017\n    php: 8.1\n\ninit:\n  - SET PATH=C:\\Program Files\\OpenSSL;c:\\tools\\php;C:\\tools\\composer;%PATH%\n  - SET COMPOSER_NO_INTERACTION=1\n  - SET ANSICON=121x90 (121x90)\n\n## Install PHP and composer, and run the appropriate composer command\ninstall:\n    - sc config wuauserv start=auto\n    - net start wuauserv\n    - ps: |\n        # Check if installation is cached\n        if (!(Test-Path c:\\tools\\php)) {\n          choco upgrade chocolatey\n          appveyor-retry choco install --no-progress --params '\"\"/InstallDir:C:\\tools\\php\"\"' --ignore-checksums -y php --version ((choco search php --exact --all-versions -r | select-string -pattern $env:php | sort { [version]($_ -split '\\|' | select -last 1) } -Descending | Select-Object -first 1) -replace '[php|]','')\n          # install sqlite\n          appveyor-retry choco install --no-progress -y sqlite\n          Get-ChildItem -Path c:\\tools\\php\n          cd c:\\tools\\php\n\n          # Set PHP environment items that are always needed\n          copy php.ini-production php.ini\n          Add-Content php.ini \"`n date.timezone=UTC\"\n          Add-Content php.ini \"`n extension_dir=ext\"\n          Add-Content php.ini \"`n memory_limit=1G\"\n          Add-Content php.ini \"`n extension=php_openssl.dll\"\n          Add-Content php.ini \"`n extension=php_mbstring.dll\"\n          Add-Content php.ini \"`n extension=php_fileinfo.dll\"\n          Add-Content php.ini \"`n extension=php_pdo_sqlite.dll\"\n          Add-Content php.ini \"`n extension=php_sqlite3.dll\"\n          Add-Content php.ini \"`n extension=php_curl.dll\"\n\n          $DLLVersion = \"5.10.0\"\n          cd c:\\tools\\php\\ext\n          $source = \"https://windows.php.net/downloads/pecl/releases/sqlsrv/$($DLLVersion)/php_sqlsrv-$($DLLVersion)-$($env:php)-nts-vs16-x64.zip\"\n          $destination = \"c:\\tools\\php\\ext\\php_sqlsrv-$($DLLVersion)-$($env:php)-nts-vs16-x64.zip\"\n          Invoke-WebRequest $source -OutFile $destination\n          7z x -y php_sqlsrv-$($DLLVersion)-$($env:php)-nts-vs16-x64.zip > $null\n          $source = \"https://windows.php.net/downloads/pecl/releases/pdo_sqlsrv/$($DLLVersion)/php_pdo_sqlsrv-$($DLLVersion)-$($env:php)-nts-vs16-x64.zip\"\n          $destination = \"c:\\tools\\php\\ext\\php_pdo_sqlsrv-$($DLLVersion)-$($env:php)-nts-vs16-x64.zip\"\n          Invoke-WebRequest $source -OutFile $destination\n          7z x -y php_pdo_sqlsrv-$($DLLVersion)-$($env:php)-nts-vs16-x64.zip > $null\n          $DLLVersion = (Invoke-WebRequest \"https://pecl.php.net/rest/r/pcov/stable.txt\").Content\n          Invoke-WebRequest https://windows.php.net/downloads/pecl/releases/pcov/$($DLLVersion)/php_pcov-$($DLLVersion)-$($env:php)-nts-vs16-$($env:platform).zip -OutFile pcov.zip\n          7z x -y pcov.zip > $null\n          Remove-Item c:\\tools\\php\\* -include .zip\n          cd c:\\tools\\php\n          Add-Content php.ini \"`nextension=php_sqlsrv.dll\"\n          Add-Content php.ini \"`nextension=php_pdo_sqlsrv.dll\"\n          Add-Content php.ini \"`nextension=php_pcov.dll\"\n          Add-Content php.ini \"`n\"\n\n          # download Composer\n          if (!(Test-Path C:\\tools\\composer)) {\n            New-Item -path c:\\tools -name composer -itemtype directory\n          }\n          if (!(Test-Path c:\\tools\\composer\\composer.phar)) {\n            appveyor-retry appveyor DownloadFile https://getcomposer.org/composer.phar -Filename C:\\tools\\composer\\composer.phar\n            Set-Content -path 'C:\\tools\\composer\\composer.bat' -Value ('@php C:\\tools\\composer\\composer.phar %*')\n          }\n        }\n    # install composer dependencies\n    - cd C:\\projects\\dbal\n    - appveyor-retry composer self-update\n    - appveyor-retry composer install --no-progress --prefer-dist\n\nbefore_test:\n# Selectively start the services\n  - ps: >-\n      if ($env:db -eq \"mssql\") {\n        $instanceName = $env:db_version.ToUpper()\n        net start \"MSSQL`$$instanceName\"\n      }\n\ntest_script:\n  - ps: >-\n      if ($env:db_version) {\n        $env:phpunit_config = \"ci\\appveyor\\$($env:db).$($env:db_version).$($env:driver).appveyor.xml\"\n      } else {\n        $env:phpunit_config = \"ci\\appveyor\\$($env:db).$($env:driver).appveyor.xml\"\n      }\n\n      vendor\\bin\\phpunit -c $($env:phpunit_config) --coverage-clover clover.xml\n\n      if ($LastExitCode -ne 0) {\n        $host.SetShouldExit($LastExitCode)\n      }\n\nafter_test:\n  - appveyor DownloadFile https://codecov.io/bash -FileName codecov.sh\n  - SET upload_name=appveyor-%db%-%db_version%-%driver%-php-%php%\n  - bash codecov.sh -f clover.xml -n %upload_name%\n"
        },
        {
          "name": ".doctrine-project.json",
          "type": "blob",
          "size": 2.3740234375,
          "content": "{\n    \"active\": true,\n    \"name\": \"Database Abstraction Layer\",\n    \"shortName\": \"DBAL\",\n    \"slug\": \"dbal\",\n    \"docsSlug\": \"doctrine-dbal\",\n    \"versions\": [\n        {\n            \"name\": \"5.0\",\n            \"branchName\": \"5.0.x\",\n            \"slug\": \"latest\",\n            \"upcoming\": true\n        },\n        {\n            \"name\": \"4.3\",\n            \"branchName\": \"4.3.x\",\n            \"slug\": \"4.3\",\n            \"upcoming\": true\n        },\n        {\n            \"name\": \"4.2\",\n            \"branchName\": \"4.2.x\",\n            \"slug\": \"4.2\",\n            \"current\": true\n        },\n        {\n            \"name\": \"4.1\",\n            \"branchName\": \"4.1.x\",\n            \"slug\": \"4.1\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"4.0\",\n            \"branchName\": \"4.0.x\",\n            \"slug\": \"4.0\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.10\",\n            \"branchName\": \"3.10.x\",\n            \"slug\": \"3.10\",\n            \"upcoming\": true\n        },\n        {\n            \"name\": \"3.9\",\n            \"branchName\": \"3.9.x\",\n            \"slug\": \"3.9\",\n            \"maintained\": true\n        },\n        {\n            \"name\": \"3.8\",\n            \"branchName\": \"3.8.x\",\n            \"slug\": \"3.8\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.7\",\n            \"branchName\": \"3.7.x\",\n            \"slug\": \"3.7\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.6\",\n            \"branchName\": \"3.6.x\",\n            \"slug\": \"3.6\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.5\",\n            \"branchName\": \"3.5.x\",\n            \"slug\": \"3.5\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.4\",\n            \"branchName\": \"3.4.x\",\n            \"slug\": \"3.4\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.3\",\n            \"branchName\": \"3.3.x\",\n            \"slug\": \"3.3\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.2\",\n            \"branchName\": \"3.2.x\",\n            \"slug\": \"3.2\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.1\",\n            \"branchName\": \"3.1.x\",\n            \"slug\": \"3.1\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"3.0\",\n            \"branchName\": \"3.0.x\",\n            \"slug\": \"3.0\",\n            \"maintained\": false\n        }\n    ]\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4609375,
          "content": "/.appveyor.yml export-ignore\n/ci export-ignore\n/docs export-ignore\n/.doctrine-project.json export-ignore\n/.gitattributes export-ignore\n/.github export-ignore\n/.gitignore export-ignore\n/phpcs.xml.dist export-ignore\n/phpstan.neon.dist export-ignore\n/phpunit.xml.dist export-ignore\n/psalm.xml.dist export-ignore\n/psalm-strict.xml export-ignore\n/run-all.sh export-ignore\n/SECURITY.md export-ignore\n/static-analysis export-ignore\n/tests export-ignore\n/UPGRADE.md export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.146484375,
          "content": "/composer.lock\n.phpunit.result.cache\nbuild/\nlogs/\nreports/\ndist/\ndownload/\nvendor/\n/*.phpunit.xml\n/phpunit.xml\n/.phpcs-cache\n/phpstan.neon\n/psalm.xml\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.357421875,
          "content": "This repository has [guidelines specific to testing][testing guidelines], and\nDoctrine has [general contributing guidelines][contributor workflow], make\nsure you follow both.\n\n[contributor workflow]: https://www.doctrine-project.org/contribute/index.html\n[testing guidelines]: https://www.doctrine-project.org/projects/doctrine-dbal/en/stable/reference/testing.html\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "Copyright (c) 2006-2018 Doctrine Project\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.1767578125,
          "content": "# Doctrine DBAL\n\n|                   [5.0-dev][5.0]                    |                   [4.3-dev][4.3]                    |                     [4.2][4.2]                      |                     [3.10][3.10]                      |                     [3.9][3.9]                      |\n|:---------------------------------------------------:|:---------------------------------------------------:|:---------------------------------------------------:|:-----------------------------------------------------:|:---------------------------------------------------:|\n|      [![GitHub Actions][GA 5.0 image]][GA 5.0]      |      [![GitHub Actions][GA 4.3 image]][GA 4.3]      |      [![GitHub Actions][GA 4.2 image]][GA 4.2]      |      [![GitHub Actions][GA 3.10 image]][GA 3.10]      |      [![GitHub Actions][GA 3.9 image]][GA 3.9]      |\n|   [![AppVeyor][AppVeyor 5.0 image]][AppVeyor 5.0]   |   [![AppVeyor][AppVeyor 4.3 image]][AppVeyor 4.3]   |   [![AppVeyor][AppVeyor 4.2 image]][AppVeyor 4.2]   |   [![AppVeyor][AppVeyor 3.10 image]][AppVeyor 3.10]   |   [![AppVeyor][AppVeyor 3.9 image]][AppVeyor 3.9]   |\n| [![Code Coverage][Coverage 5.0 image]][CodeCov 5.0] | [![Code Coverage][Coverage 4.3 image]][CodeCov 4.3] | [![Code Coverage][Coverage 4.2 image]][CodeCov 4.2] | [![Code Coverage][Coverage 3.10 image]][CodeCov 3.10] | [![Code Coverage][Coverage 3.9 image]][CodeCov 3.9] |\n|                         N/A                         |                         N/A                         |     [![Type Coverage][TypeCov image]][TypeCov]      |                         N/A                           |                         N/A                         |\n\nPowerful ***D***ata***B***ase ***A***bstraction ***L***ayer with many features for database schema introspection and schema management.\n\n## More resources:\n\n* [Website](http://www.doctrine-project.org/projects/dbal.html)\n* [Documentation](http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/)\n* [Issue Tracker](https://github.com/doctrine/dbal/issues)\n\n  [Coverage 5.0 image]: https://codecov.io/gh/doctrine/dbal/branch/5.0.x/graph/badge.svg\n  [5.0]: https://github.com/doctrine/dbal/tree/5.0.x\n  [CodeCov 5.0]: https://codecov.io/gh/doctrine/dbal/branch/5.0.x\n  [AppVeyor 5.0]: https://ci.appveyor.com/project/doctrine/dbal/branch/5.0.x\n  [AppVeyor 5.0 image]: https://ci.appveyor.com/api/projects/status/i88kitq8qpbm0vie/branch/5.0.x?svg=true\n  [GA 5.0]: https://github.com/doctrine/dbal/actions?query=workflow%3A%22Continuous+Integration%22+branch%3A5.0.x\n  [GA 5.0 image]: https://github.com/doctrine/dbal/actions/workflows/continuous-integration.yml/badge.svg?branch=5.0.x\n\n  [Coverage 4.3 image]: https://codecov.io/gh/doctrine/dbal/branch/4.3.x/graph/badge.svg\n  [4.3]: https://github.com/doctrine/dbal/tree/4.3.x\n  [CodeCov 4.3]: https://codecov.io/gh/doctrine/dbal/branch/4.3.x\n  [AppVeyor 4.3]: https://ci.appveyor.com/project/doctrine/dbal/branch/4.3.x\n  [AppVeyor 4.3 image]: https://ci.appveyor.com/api/projects/status/i88kitq8qpbm0vie/branch/4.3.x?svg=true\n  [GA 4.3]: https://github.com/doctrine/dbal/actions?query=workflow%3A%22Continuous+Integration%22+branch%3A4.3.x\n  [GA 4.3 image]: https://github.com/doctrine/dbal/actions/workflows/continuous-integration.yml/badge.svg?branch=4.3.x\n\n  [Coverage 4.2 image]: https://codecov.io/gh/doctrine/dbal/branch/4.2.x/graph/badge.svg\n  [4.2]: https://github.com/doctrine/dbal/tree/4.2.x\n  [CodeCov 4.2]: https://codecov.io/gh/doctrine/dbal/branch/4.2.x\n  [AppVeyor 4.2]: https://ci.appveyor.com/project/doctrine/dbal/branch/4.2.x\n  [AppVeyor 4.2 image]: https://ci.appveyor.com/api/projects/status/i88kitq8qpbm0vie/branch/4.2.x?svg=true\n  [GA 4.2]: https://github.com/doctrine/dbal/actions?query=workflow%3A%22Continuous+Integration%22+branch%3A4.2.x\n  [GA 4.2 image]: https://github.com/doctrine/dbal/actions/workflows/continuous-integration.yml/badge.svg?branch=4.2.x\n  [TypeCov]: https://shepherd.dev/github/doctrine/dbal\n  [TypeCov image]: https://shepherd.dev/github/doctrine/dbal/coverage.svg\n\n  [Coverage 3.10 image]: https://codecov.io/gh/doctrine/dbal/branch/3.10.x/graph/badge.svg\n  [3.10]: https://github.com/doctrine/dbal/tree/3.10.x\n  [CodeCov 3.10]: https://codecov.io/gh/doctrine/dbal/branch/3.10.x\n  [AppVeyor 3.10]: https://ci.appveyor.com/project/doctrine/dbal/branch/3.10.x\n  [AppVeyor 3.10 image]: https://ci.appveyor.com/api/projects/status/i88kitq8qpbm0vie/branch/3.10.x?svg=true\n  [GA 3.10]: https://github.com/doctrine/dbal/actions?query=workflow%3A%22Continuous+Integration%22+branch%3A3.10.x\n  [GA 3.10 image]: https://github.com/doctrine/dbal/actions/workflows/continuous-integration.yml/badge.svg?branch=3.10.x\n\n  [Coverage 3.9 image]: https://codecov.io/gh/doctrine/dbal/branch/3.9.x/graph/badge.svg\n  [3.9]: https://github.com/doctrine/dbal/tree/3.9.x\n  [CodeCov 3.9]: https://codecov.io/gh/doctrine/dbal/branch/3.9.x\n  [AppVeyor 3.9]: https://ci.appveyor.com/project/doctrine/dbal/branch/3.9.x\n  [AppVeyor 3.9 image]: https://ci.appveyor.com/api/projects/status/i88kitq8qpbm0vie/branch/3.9.x?svg=true\n  [GA 3.9]: https://github.com/doctrine/dbal/actions?query=workflow%3A%22Continuous+Integration%22+branch%3A3.9.x\n  [GA 3.9 image]: https://github.com/doctrine/dbal/actions/workflows/continuous-integration.yml/badge.svg?branch=3.9.x\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.6259765625,
          "content": "Security\n========\n\nThe Doctrine library is operating very close to your database and as such needs\nto handle and make assumptions about SQL injection vulnerabilities.\n\nIt is vital that you understand how Doctrine approaches security because\nwe cannot protect you from SQL injection.\n\nPlease read the documentation chapter on Security in Doctrine DBAL to\nunderstand the assumptions we make.\n\n- [Latest security.rst page on Github](https://github.com/doctrine/dbal/blob/4.0.x/docs/en/reference/security.rst)\n- [Security Page in rendered documentation](http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/security.html)\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 101.095703125,
          "content": "Note about upgrading: Doctrine uses static and runtime mechanisms to raise\nawareness about deprecated code.\n\n- Use of `@deprecated` docblock that is detected by IDEs (like PHPStorm) or\n  Static Analysis tools (like Psalm, phpstan)\n- Use of our low-overhead runtime deprecation API, details:\n  https://github.com/doctrine/deprecations/\n\n# Upgrade to 4.2\n\n## Support for new PDO subclasses on PHP 8.4\n\nOn PHP 8.4, if you call `getNativeConnection()` on a connection established through one of the PDO drivers,\nyou will get an instance of the new PDO subclasses, e.g. `Pdo\\Mysql` or `Pdo\\Ppgsql` instead of just `PDO`.\n\nHowever, this currently does not apply to persistent connections.\nSee https://github.com/php/php-src/issues/16314 for details.\n\n## Minor BC break: incompatible query cache format\n\nThe query cache format has been changed to address the issue where a cached result with no rows would miss the metadata.\nThis change is not backwards compatible. If you are using the query cache, you should clear the cache before the\nupgrade.\n\n# Upgrade to 4.1\n\n## Deprecated `TableDiff` methods\n\nThe `TableDiff` methods `getModifiedColumns()` and `getRenamedColumns()` have been merged into a single\nmethod `getChangedColumns()`. Use this method instead.\n\n## Deprecated support for MariaDB 10.4, MySQL 5.7 and Postgres 10 + 11\n\n* Upgrade to MariaDB 10.5 or later.\n* Upgrade to MySQL 8.0 or later.\n* Upgrade to Postgres 12 or later.\n\n## Add `Result::getColumnName()`\n\nDriver and middleware results need to implement a new method `getColumnName()` that gives access to the\ncolumn name. Not doing so is deprecated.\n\n# Upgrade to 4.0\n\n## BC BREAK: removed `AbstractMySQLPlatform` methods.\n\n1. `getColumnTypeSQLSnippets()`,\n2. `getDatabaseNameSQL()`.\n\n## BC BREAK: Removed lock-related `AbstractPlatform` methods\n\nThe methods `AbstractPlatform::getReadLockSQL()`, `::getWriteLockSQL()` and `::getForUpdateSQL()` have been removed\nUse `QueryBuilder::forUpdate()` as a replacement for the latter.\n\n## BC BREAK: BIGINT values are cast to int if possible\n\n`BigIntType` casts values retrieved from the database to int if they're inside\nthe integer range of PHP. Previously, those values were always cast to string.\n\n## BC BREAK: Stricter `DateTime` types\n\nThe following types don't accept or return `DateTimeImmutable` instances anymore:\n\n* `DateTimeType`\n* `DateTimeTzType`\n* `DateType`\n* `TimeType`\n* `VarDateTimeType`\n\nAs a consequence, the following type classes don't extend their mutable\ncounterparts anymore:\n\n* `DateTimeImmutableType`\n* `DateTimeTzImmutableType`\n* `DateImmutableType`\n* `TimeImmutableType`\n* `VarDateTimeImmutableType`\n\n## BC BREAK: Remove legacy execute and fetch methods.\n\nThe following methods have been removed:\n\n* `Result::fetch()`\n* `Result::fetchAll()`\n* `Connection::exec()`\n* `Connection::executeUpdate()`\n* `Connection::query()`\n\nAdditionally, the `FetchMode` class has been removed.\n\n## BC BREAK: Removed the `url` connection parameter\n\nDBAL ships with a new and configurable DSN parser that can be used to parse a\ndatabase URL into connection parameters understood by `DriverManager`.\n\n### Before\n\n```php\n$connection = DriverManager::getConnection(\n    ['url' => 'mysql://my-user:t0ps3cr3t@my-host/my-database']\n);\n```\n\n### After\n\n```php\n$dsnParser  = new DsnParser(['mysql' => 'pdo_mysql']);\n$connection = DriverManager::getConnection(\n    $dsnParser->parse('mysql://my-user:t0ps3cr3t@my-host/my-database')\n);\n```\n\n## BC BREAK: Removed `Connection::PARAM_*_ARRAY` constants\n\nUse the enum `ArrayParameterType` instead.\n\n## BC BREAK: Disallowed partial version numbers in ``serverVersion``\n\nThe ``serverVersion`` connection parameter must consist of 3 numbers:\n\n```diff\n-'serverVersion' => '8.0'\n+'serverVersion' => '8.0.31'\n```\n\n## BC BREAK: Removed `mariadb-` prefix hack\n\nPreviously, it was necessary to prefix the `serverVersion` parameter with\n`mariadb-` when using MariaDB. Doing so is now considered invalid, and you\nshould prefer using the version as returned by `SELECT VERSION();`\n\n```diff\n-'serverVersion' => 'mariadb-10.9.3'\n+'serverVersion' => '10.9.3-MariaDB-1'\n```\n\n\n## BC BREAK: Removed `SchemaDiff::$orphanedForeignKeys`\n\nThe functionality of automatically dropping the foreign keys referencing the tables being dropped has been removed.\n\n## BC BREAK: Removed registration of user defined functions for SQLite\n\nDBAL does not register functions for SQLite anymore. The following functions\nwhich were previously provided by DBAL have been removed:\n\n* `locate()`: SQLite provides the function `instr()` that behaves similarly.\n  Use `AbstractPlatform::getLocateExpression()` if you need a portable solution.\n* `mod()`: SQLite provides a `%` operator for modulo calculations.\n  Use `AbstractPlatform::getModExpression()` if you need a portable solution.\n  Since version 3.35.0 SQLite also provides a `mod()` function if math\n  functions have been enabled.\n* `sqrt()`: Upgrade to SQLite 3.35.0 and compile SQLite with math functions to\n  get a native `sqrt()` function. If you need a `sqrt()` implementation for an\n  earlier release of SQLite, you can polyfill it.\n\n  ```php\n  // pdo_sqlite driver\n  $connection->getNativeConnection()\n      ->sqliteCreateFunction('sqrt', \\sqrt(...), 1);\n\n  // sqlite3 driver\n  $connection->getNativeConnection()\n      ->createFunction('sqrt', \\sqrt(...), 1);\n  ```\n\nThe `userDefinedFunctions` driver option has also been removed. If you want\nto register your own functions, do so by calling `sqliteCreateFunction()`\nor `createFunction()` on the PDO or SQLite3 connection.\n\n## BC BREAK: Removed `Table` methods\n\nThe following `Table` methods have been removed:\n\n- `changeColumn()`,\n- `getForeignKeyColumns()`,\n- `getPrimaryKeyColumns()`,\n- `hasPrimaryKey()`.\n\n## BC BREAK: removed `SchemaException` error code constants\n\nThe following `SchemaException` class constants have been removed:\n\n- `TABLE_DOESNT_EXIST`,\n- `TABLE_ALREADY_EXISTS`,\n- `COLUMN_DOESNT_EXIST`,\n- `COLUMN_ALREADY_EXISTS`,\n- `INDEX_DOESNT_EXIST`,\n- `INDEX_ALREADY_EXISTS`,\n- `SEQUENCE_DOENST_EXIST`,\n- `SEQUENCE_ALREADY_EXISTS`,\n- `INDEX_INVALID_NAME`,\n- `FOREIGNKEY_DOESNT_EXIST`,\n- `CONSTRAINT_DOESNT_EXIST`,\n- `NAMESPACE_ALREADY_EXISTS`.\n\n## BC BREAK: Exception classes have been converted to interfaces\n\nThe `Doctrine\\DBAL\\Exception` and the `Doctrine\\DBAL\\Schema\\SchemaException` classes are now interfaces.\n\n## BC BREAK: removed misspelled isFullfilledBy() method\n\nThis method's name was spelled incorrectly. Use `isFulfilledBy` instead.\n\n## BC BREAK: removed default PostgreSQL connection database.\n\nWhen connecting to a PostgreSQL server, the driver will no longer connect to the \"postgres\" database by default.\n\n## BC BREAK: removed support for the \"default_dbname\" parameter of the wrapper `Connection`.\n\nThe \"default_dbname\" parameter of the wrapper `Connection` is no longer supported.\n\n## BC BREAK: removed fallback connection used to determine the database platform.\n\nWhen determining the database platform, if an attempt to connect using the provided configuration fails,\nthe wrapper connection will no longer fall back to a configuration without the database name.\n\n## BC BREAK: removed support for driver name aliases.\n\nDriver name aliases are no longer supported.\n\n## BC BREAK: removed support for the \"platform\" parameter of the wrapper `Connection`.\n\nThe support for the \"platform\" parameter of the wrapper `Connection` has been removed.\n\n## BC BREAK: removed support for \"unique\" and \"check\" column properties.\n\nThe \"unique\" and \"check\" column properties are no longer supported.\n\n## BC BREAK: removed default precision and scale of decimal columns.\n\nThe DBAL no longer provides default values for precision and scale of decimal columns.\n\n## BC BREAK: a non-empty WHERE clause is not enforced in data manipulation `Connection` methods.\n\nThe `Connection::update()` and `::delete()` methods no longer enforce a non-empty WHERE clause. If modification\nof all table rows should not be allowed, it should be implemented in the application code.\n\n## BC BREAK: removed wrapper- and driver-level `Statement::bindParam()` methods.\n\nThe following methods have been removed:\n\n1. `Doctrine\\DBAL\\Statement::bindParam()`,\n2. `Doctrine\\DBAL\\Driver\\Statement::bindParam()`.\n\n## BC BREAK: made parameter type in driver-level `Statement::bindValue()` required.\n\nThe `$type` parameter of the driver-level `Statement::bindValue()` has been made required.\n\n## BC BREAK: removed support for using NULL as prepared statement parameter type.\n\nThe value of parameter type used in the wrapper layer (e.g. in `Connection::executeQuery()`\nor `Statement::bindValue()`) can no longer be `NULL`.\n\n## BC BREAK: converted enum-like classes to enums\n\nThe following classes have been converted to enums:\n\n1. `Doctrine\\DBAL\\ColumnCase`,\n2. `Doctrine\\DBAL\\LockMode`,\n3. `Doctrine\\DBAL\\ParameterType`,\n4. `Doctrine\\DBAL\\ArrayParameterType`,\n5. `Doctrine\\DBAL\\TransactionIsolationLevel`,\n6. `Doctrine\\DBAL\\Platforms\\DateIntervalUnit`,\n7. `Doctrine\\DBAL\\Platforms\\TrimMode`.\n8. `Doctrine\\DBAL\\Query\\ForUpdate\\ConflictResolutionMode`\n\nThe corresponding class constants are now instances of their enum type.\n\n## BC BREAK: dropped naming convention for default constraints on SQL Server\n\nThe DBAL no longer generates default constraint names using the table name and column name. The name is now generated\nby the database.\n\n## BC BREAK: renamed SQLite platform classes\n\n1. `SqlitePlatform` => `SQLitePlatform`\n2. `SqliteSchemaManager` => `SQLiteSchemaManager`\n\n## BC BREAK: removed `SqlitePlatform` methods.\n\n1. `getTinyIntTypeDeclarationSQL()`,\n2. `getMediumIntTypeDeclarationSQL()`.\n\n## BC BREAK: removed `AbstractPlatform` methods.\n\n1. `getColumnsFieldDeclarationListSQL()`,\n2. `getCustomTypeDeclarationSQL()`,\n3. `getDefaultSchemaName()`,\n4. `getIdentitySequenceName()`,\n5. `getIndexFieldDeclarationListSQL()`,\n6. `supportsCreateDropDatabase()`,\n7. `usesSequenceEmulatedIdentityColumns()`.\n\n## BC BREAK: removed support for the `NULL` value of schema asset filter.\n\nThe argument of `Configuration::setSchemaAssetsFilter()` is now required and non-nullable.\n\n## BC BREAK: removed support for custom schema options.\n\nThe following `Column` class properties and methods have been removed:\n\n- `$_customSchemaOptions`,\n- `setCustomSchemaOption()`,\n- `hasCustomSchemaOption()`,\n- `getCustomSchemaOption()`,\n- `setCustomSchemaOptions()`,\n- `getCustomSchemaOptions()`.\n\n## BC BREAK: removed `array` and `object` column types.\n\nThe following classes and constants have been removed:\n- `ArrayType`,\n- `ObjectType`,\n- `Types::ARRAY`,\n- `Types::OBJECT`.\n\n## BC BREAK: removed `Driver::getSchemaManager()`\n\nThe `Driver::getSchemaManager()` method has been removed.\n\n## BC BREAK: removed `AbstractSchemaManager` methods\n\nThe `AbstractSchemaManager::getDatabasePlatform()` and `::listTableDetails()` methods have been removed.\n\n## BC BREAK: removed Schema Visitor API.\n\nThe following interfaces and classes have been removed:\n\n1. `Doctrine\\DBAL\\Schema\\Visitor`,\n2. `Doctrine\\DBAL\\Schema\\NamespaceVisitor`,\n3. `Doctrine\\DBAL\\Schema\\AbstractVisitor`.\n\nThe following methods have been removed:\n\n1. `Doctrine\\DBAL\\Schema\\Schema::visit()`,\n2. `Doctrine\\DBAL\\Schema\\Table::visit()`,\n3. `Doctrine\\DBAL\\Schema\\Sequence::visit()`.\n\n## BC BREAK: removed `RemoveNamespacedAssets`.\n\nThe `RemoveNamespacedAssets` schema visitor has been removed.\n\n## BC BREAK: removed the functionality of checking schema for the usage of reserved keywords.\n\nThe following components have been removed:\n\n1. The `dbal:reserved-words` console command.\n2. The `ReservedWordsCommand` and `ReservedKeywordsValidator` classes.\n3. The `KeywordList::getName()` method.\n\n## BC BREAK: removed `AbstractPlatform::supportsForeignKeyConstraints()`.\n\nThe `AbstractPlatform::supportsForeignKeyConstraints()` method has been removed.\n\n## BC BREAK: foreign key DDL is generated on MySQL regardless of the storage engine.\n\nThe DBAL generates DDL for foreign keys regardless of the MySQL storage engines used by the table\nthat owns the foreign key constraint.\n\n## BC BREAK: removed `AbstractPlatform` methods exposing quote characters.\n\nThe `AbstractPlatform::getStringLiteralQuoteCharacter()` and `::getIdentifierQuoteCharacter()` methods\nhave been removed.\n\n## Deprecated: `AbstractPlatform::CREATE_*` constants\n\nThe `AbstractPlatform::CREATE_INDEXES` and `::CREATE_FOREIGNKEYS` constants have been deprecated\nas they no longer have any effect on the behavior of the `AbstractPlatform::getCreateTableSQL()` method.\n\n## BC BREAK: removed `$createFlags` from `AbstractPlatform::getCreateTableSQL()`\n\nThe `$createFlags` parameter of `AbstractPlatform::getCreateTableSQL()` has been removed.\n\n## BC BREAK: removed `CreateSchemaSqlCollector` and `DropSchemaSqlCollector`\n\nThe `CreateSchemaSqlCollector` and `DropSchemaSqlCollector` classes have been removed.\n\n## BC BREAK: remove support for transaction nesting without savepoints\n\nStarting a transaction inside another transaction with\n`Doctrine\\DBAL\\Connection::beginTransaction()` now always results in\nsavepoints being used.\n\nIn case your platform does not support savepoints, you will have to\nrework your application logic so as to avoid nested transaction blocks.\n\n## Deprecated: configuration methods related to transaction nesting\n\nSince it is no longer possible to configure whether transaction nesting is\nemulated with savepoints or not, configuring that behavior has no effect and it\nis deprecated to attempt to change it or to know how it is configured. As a\nresult, the following methods are deprecated:\n\n- `Connection::setNestTransactionsWithSavepoints()`\n- `Connection::getNestTransactionsWithSavepoints()`\n\n## BC BREAK: Auto-increment columns on PostgreSQL are implemented as `IDENTITY`, not `SERIAL`.\n\nInstead of using `SERIAL*` column types for `autoincrement` columns, the DBAL will now use\nthe `GENERATED BY DEFAULT AS IDENTITY` clause.\n\nThe upgrade to DBAL 4 will require manual migration of the database schema.\nSee the [documentation](docs/en/how-to/postgresql-identity-migration.rst) for more details.\n\n## Removed the `doctrine-dbal` binary and the `ConsoleRunner` class.\n\nThe documentation explains how the console tools can be bootstrapped for standalone usage.\n\n## Removed support for the `$database` parameter of `AbstractSchemaManager::list*()` methods\n\nPassing `$database` to the following methods is no longer supported:\n\n- `AbstractSchemaManager::listSequences()`,\n- `AbstractSchemaManager::listTableColumns()`,\n- `AbstractSchemaManager::listTableForeignKeys()`.\n\n## Removed `AbstractPlatform` schema introspection methods\n\nThe following schema introspection methods have been removed:\n\n- `AbstractPlatform::getListTablesSQL()`,\n- `AbstractPlatform::getListTableColumnsSQL()`,\n- `AbstractPlatform::getListTableIndexesSQL()`,\n- `AbstractPlatform::getListTableForeignKeysSQL()`,\n- `AbstractPlatform::getListTableConstraintsSQL()`.\n\n## Abstract methods in the `AbstractSchemaManager` class have been declared as `abstract`\n\nThe following abstract methods in the `AbstractSchemaManager` class have been declared as `abstract`:\n\n- `selectDatabaseColumns()`,\n- `selectDatabaseIndexes()`,\n- `selectDatabaseForeignKeys()`,\n- `getDatabaseTableOptions()`.\n\nEvery non-abstract schema manager class must implement them in order to satisfy the API.\n\n# BC Break: The number of affected rows is returned as `int|string`\n\nThe signatures of the methods returning the number of affected rows changed as returning `int|string` instead of `int`.\nIf the number is greater than `PHP_INT_MAX`, the number of affected rows may be returned as a string if the driver supports it.\n\n# BC Break: Dropped support for `collate` option for MySQL\n\nUse `collation` instead.\n\n## BC BREAK: Removed `Type::getName()`\n\nAs a consequence, only types extending `JsonType` or that type itself can have\nthe `jsonb` platform option set.\n\n## BC BREAK: Deployed database schema no longer contains the information about abstract data types\n\nDatabase column comments no longer contain type comments added by DBAL.\nIf you use `doctrine/migrations`, it should generate a migration dropping those\ncomments from all columns that have them.\nAs a consequence, introspecting a table no longer guarantees getting the same\ncolumn types that were used when creating that table.\n\n## BC BREAK: Removed `AbstractPlatform::prefersIdentityColumns()`\n\nThe `AbstractPlatform::prefersIdentityColumns()` method has been removed.\n\n## BC BREAK: Removed the `Graphviz` visitor.\n\nThe `Doctrine\\DBAL\\Schema\\Visitor\\Graphviz` class has been removed.\n\n## BC BREAK: Removed support for Oracle 12c (12.2.0.1) and older\n\nOracle 12c (12.2.0.1) and older are not supported anymore.\n\n## BC BREAK: Removed support for MariaDB 10.4.2 and older\n\nMariaDB 10.4.2 and older are not supported anymore. The following classes have been removed:\n\n* `Doctrine\\DBAL\\Platforms\\MariaDb1027Platform`\n* `Doctrine\\DBAL\\Platforms\\MariaDB1043Platform`\n* `Doctrine\\DBAL\\Platforms\\Keywords\\MariaDb102Keywords`\n\n## BC BREAK: Removed support for MySQL 5.6 and older\n\nMySQL 5.6 and older are not supported anymore. The following classes have been merged into their respective\nparent classes:\n\n* `Doctrine\\DBAL\\Platforms\\MySQL57Platform`\n* `Doctrine\\DBAL\\Platforms\\Keywords\\MySQL57Keywords`\n\n## BC BREAK: Removed active support for Postgres 9\n\nPostgres 9 is not actively supported anymore. The following classes have been merged into their respective parent class:\n\n* `Doctrine\\DBAL\\Platforms\\PostgreSQL100Platform`\n* `Doctrine\\DBAL\\Platforms\\Keywords\\PostgreSQL100Keywords`\n\n## BC BREAK: Removed Platform \"commented type\" API\n\nThe following methods are removed:\n\n- `AbstractPlatform::hasNativeJsonType()`\n- `AbstractPlatform::hasNativeGuidType()`\n- `AbstractPlatform::isCommentedDoctrineType()`\n- `AbstractPlatform::initializeCommentedDoctrineTypes()`\n- `AbstractPlatform::markDoctrineTypeCommented()`\n- `Type::requiresSQLCommentHint()`\n\nThe protected property `AbstractPlatform::$doctrineTypeComments` is removed as\nwell.\n\n## BC BREAK: Removed `Type::canRequireSQLConversion()`\n\nThe `Type::canRequireSQLConversion()` method has been removed.\n\n## BC BREAK: Removed `Connection::getWrappedConnection()`, `Connection::connect()` made `protected`.\n\nThe wrapper-level `Connection::getWrappedConnection()` method has been removed. The `Connection::connect()` method\nhas been made `protected` and now must return the underlying driver-level connection.\n\n## BC BREAK: Added `getNativeConnection()` to driver connections and removed old accessors\n\nDriver and middleware connections must implement `getNativeConnection()` now. This new method replaces several accessors\nthat have been removed:\n\n* `Doctrine\\DBAL\\Driver\\PDO\\Connection::getWrappedConnection()`\n* `Doctrine\\DBAL\\Driver\\PDO\\SQLSrv\\Connection::getWrappedConnection()`\n* `Doctrine\\DBAL\\Driver\\Mysqli\\Connection::getWrappedResourceHandle()`\n\n## BC BREAK: Removed `SQLLogger` and its implementations.\n\nThe `SQLLogger` interface and its implementations `DebugStack` and `LoggerChain` have been removed.\nThe corresponding `Configuration` methods, `getSQLLogger()` and `setSQLLogger()`, have been removed as well.\n\n## BC BREAK: Removed `SqliteSchemaManager::createDatabase()` and `dropDatabase()` methods.\n\nThe `SqliteSchemaManager::createDatabase()` and `dropDatabase()` methods have been removed.\n\n## BC BREAK: Removed `AbstractSchemaManager::dropAndCreate*()` and `::tryMethod()` methods.\n\nThe following `AbstractSchemaManager` methods have been removed:\n\n1. `AbstractSchemaManager::dropAndCreateConstraint()`,\n2. `AbstractSchemaManager::dropAndCreateDatabase()`,\n3. `AbstractSchemaManager::dropAndCreateForeignKey()`,\n4. `AbstractSchemaMVersionAwarePlatformDriveranager::dropAndCreateIndex()`,\n5. `AbstractSchemaManager::dropAndCreateSequence()`,\n6. `AbstractSchemaManager::dropAndCreateTable()`,\n7. `AbstractSchemaManager::dropAndCreateView()`,\n8. `AbstractSchemaManager::tryMethod()`.\n\n## BC BREAK: Removed support for SQL Server 2016 and older\n\nDBAL is now tested only with SQL Server 2017 and newer.\n\n## BC BREAK: `Statement::execute()` marked private.\n\nThe `Statement::execute()` method has been marked private.\n\n## BC BREAK: Removed `QueryBuilder` methods and contstants.\n\nThe following `QueryBuilder` methods have been removed:\n\n1. `execute()`,\n2. `getState()`,\n3. `getType()`,\n4. `getConnection()`.\n\nThe following `QueryBuilder` constants have been removed:\n\n1. `SELECT`,\n2. `DELETE`,\n3. `UPDATE`,\n4. `INSERT`,\n5. `STATE_DIRTY`,\n6. `STATE_CLEAN`.\n\n## BC BREAK: Removed the `Constraint` interface.\n\nThe `Constraint` interface has been removed. The `ForeignKeyConstraint`, `Index` and `UniqueConstraint` classes\nno longer implement this interface.\n\nThe following methods that used to accept an instance of `Constraint` have been removed:\n\n- `AbstractPlatform::getCreateConstraintSQL()`,\n- `AbstractSchemaManager::createConstraint()`, `::dropConstraint()` and `::dropAndCreateConstraint()`,\n- `ForeignKeyConstraint::getColumns()` and `::getQuotedColumns()`.\n\n## BC BREAK: Removed `AbstractSchemaManager::getSchemaSearchPaths()`.\n\nThe `AbstractSchemaManager::getSchemaSearchPaths()` method has been removed.\n\nThe schema configuration returned by `AbstractSchemaManager::createSchemaConfig()` will contain a non-empty schema name\nonly for those database platforms that support schemas (currently, PostgreSQL).\n\nThe schema returned by `AbstractSchemaManager::createSchema()` will have a non-empty name only for those\ndatabase platforms that support schemas.\n\n## BC BREAK: Removed `AbstractAsset::getFullQualifiedName()`.\n\nThe `AbstractAsset::getFullQualifiedName()` method has been removed.\n\n## BC BREAK: Removed schema methods related to explicit foreign key indexes.\n\nThe following methods have been removed:\n\n- `Schema::hasExplicitForeignKeyIndexes()`,\n- `SchemaConfig::hasExplicitForeignKeyIndexes()`,\n- `SchemaConfig::setExplicitForeignKeyIndexes()`.\n\n## BC BREAK: Removed `Schema::getTableNames()`.\n\nThe `Schema::getTableNames()` method has been removed.\n\n## BC BREAK: Changes in `Schema` method return values.\n\nThe `Schema::getNamespaces()`, `Schema::getTables()` and `Schema::getSequences()` methods will return numeric arrays\nof namespaces, tables and sequences respectively instead of associative arrays.\n\n## BC BREAK: Removed `SqlitePlatform::udf*()` methods.\n\nThe following `SqlitePlatform` methods have been removed:\n\n- `udfSqrt()`,\n- `udfMod()`,\n- `udfLocate()`.\n\n## BC BREAK: `SQLServerPlatform` methods marked protected.\n\nThe following `SQLServerPlatform` methods have been marked protected:\n\n- `getDefaultConstraintDeclarationSQL()`,\n- `getAddExtendedPropertySQL()`,\n- `getDropExtendedPropertySQL()`,\n- `getUpdateExtendedPropertySQL()`.\n\n## BC BREAK: `OraclePlatform` methods marked protected.\n\nThe `OraclePlatform::getCreateAutoincrementSql()` method has been marked protected.\n\n## BC BREAK: Removed `OraclePlatform::assertValidIdentifier()`.\n\nThe `OraclePlatform::assertValidIdentifier()` method has been removed.\n\n## BC BREAK: Changed signatures of `AbstractPlatform::getIndexDeclarationSQL()` and `::getUniqueConstraintDeclarationSQL()`\n\nThe `AbstractPlatform::getIndexDeclarationSQL()` and `::getUniqueConstraintDeclarationSQL()` methods no longer accept\nthe name of the object as a separate parameter. The name of the passed index or constraint is used instead.\n\n## BC BREAK: Removed `AbstractPlatform::canEmulateSchemas()`\n\nThe `AbstractPlatform::canEmulateSchemas()` method and the schema emulation implemented in the SQLite platform\nhave been removed.\n\n## BC BREAK: removed `TableDiff::$name` name `TableDiff::getName()`.\n\nThe `TableDiff::$name` property and `TableDiff::getName()` method have been removed.\n\n## BC BREAK: removed support for renaming tables via `TableDiff` and `AbstractPlatform::alterTable()`.\n\nThe `TableDiff::$newName` property and the `TableDiff::getNewName()` method have been removed.\n\n## BC BREAK: removed `SchemaDiff` reference to the original schema.\n\nThe `SchemaDiff` class no longer accepts or exposes a reference to the original schema.\n\n## BC BREAK: Changes in the `ColumnDiff` class\n\n1. The `$fromColumn` parameter of the `ColumnDiff` constructor has been made required.\n2. The `$oldColumnName` property and the `getOldColumnName()` method have been removed.\n\n## BC BREAK: Changes in the return value of `Table::getColumns()`\n\n1. The columns are returned as a list, not as an associative array.\n2. The columns are no longer sorted based on whether they belong to the primary key or a foreign key.\n\n## BC BREAK: Removed schema comparison APIs that don't account for the current database connection and the database platform\n\nThe `Schema::getMigrateFromSql()` and `::getMigrateToSql()` methods have been removed.\n\n## BC BREAK: Removed driver-level APIs that don't take the server version into account.\n\nThe `ServerInfoAwareConnection` interface has been removed. The `getServerVersion()` method has been made\npart of the driver-level `Connection` interface.\n\nThe `VersionAwarePlatformDriver` interface has been removed. The `Driver::getDatabasePlatform()` method now accepts\na `ServerVersionProvider` argument that will provide the server version, if the driver relies on the server version\nto instantiate a database platform.\n\n## BC BREAK: Removed `AbstractPlatform::getName()`\n\nThe `AbstractPlatform::getName()` method has been removed.\n\n## BC BREAK: Removed versioned platform classes that represent the lowest supported version.\n\nThe following platform-related classes have been removed:\n\n1. `PostgreSQL94Platform` and `PostgreSQL94Keywords`.\n2. `SQLServer2012Platform` and `SQLServer2012Keywords`.\n\n## BC BREAK: Removed `AbstractPlatform::getNowExpression()`.\n\nThe `AbstractPlatform::getNowExpression()` method has been removed.\n\n## BC BREAK: Removed reference from `ForeignKeyConstraint` to its local (referencing) `Table`.\n\nReference from `ForeignKeyConstraint` to its local (referencing) `Table` is removed as well as the following methods:\n\n- `setLocalTable()`,\n- `getLocalTable()`,\n- `getLocalTableName()`.\n\n## BC BREAK: Removed redundant `AbstractPlatform` methods.\n\nThe following redundant `AbstractPlatform` methods have been removed:\n\n- `getSqlCommentStartString()`,\n- `getSqlCommentEndString()`,\n- `getWildcards()`,\n- `getAvgExpression()`,\n- `getCountExpression()`,\n- `getMaxExpression()`,\n- `getMinExpression()`,\n- `getSumExpression()`,\n- `getMd5Expression()`,\n- `getSqrtExpression()`,\n- `getRoundExpression()`,\n- `getRtrimExpression()`,\n- `getLtrimExpression()`,\n- `getUpperExpression()`,\n- `getLowerExpression()`,\n- `getNotExpression()`,\n- `getIsNullExpression()`,\n- `getIsNotNullExpression()`,\n- `getBetweenExpression()`,\n- `getAcosExpression()`,\n- `getSinExpression()`,\n- `getPiExpression()`,\n- `getCosExpression()`,\n- `getTemporaryTableSQL()`,\n- `getUniqueFieldDeclarationSQL()`,\n- `getListUsersSQL()`,\n- `supportsIndexes()`,\n- `supportsAlterTable()`,\n- `supportsTransactions()`,\n- `supportsPrimaryConstraints()`,\n- `supportsViews()`,\n- `supportsLimitOffset()`.\n- `supportsGettingAffectedRows()`.\n\n## Abstract methods in the `AbstractPlatform` class have been declared as `abstract`.\n\nThe following abstract methods in the `AbstractPlatform` class have been declared as `abstract`:\n\n- `getListTablesSQL()`,\n- `getAlterTableSQL()`,\n- `getListTableColumnsSQL()`,\n- `getListTableIndexesSQL()`,\n- `getListTableForeignKeysSQL()`,\n- `getCreateViewSQL()`,\n- `getListViewsSQL()`,\n- `getDropViewSQL()`,\n- `getDateArithmeticIntervalExpression()`,\n- `getDateDiffExpression()`,\n- `getTimeTypeDeclarationSQL()`,\n- `getDateTimeTypeDeclarationSQL()`,\n- `getLocateExpression()`,\n- `getSetTransactionIsolationSQL()`.\n\nEvery non-abstract platform class must implement them in order to satisfy the API.\n\n## `Connection::lastInsertId()` throws an exception when there's no identity value.\n\nInstead of returning an empty value, `Connection::lastInsertId()` throws an exception when there's no identity value.\n\n## Removed static keyword from `Comparator::compareSchemas()` signature\n\nThe method `Comparator::compareSchemas()` cannot be called statically anymore.\n\n## Removed `Comparator` methods\n\nThe `Comparator::compare()`, `::diffTable()` and `::diffColumn()` methods have been removed.\n\n## Removed `ColumnDiff` methods\n\nThe `ColumnDiff::hasChanged()` method has been removed.\n\n## Removed `TableGenerator` component\n\nThe `TableGenerator` component has been removed.\n\n## Removed support for `Connection::lastInsertId($name)`\n\nThe `Connection::lastInsertId()` method no longer accepts a sequence name.\n\n## Removed defaults for MySQL table charset, collation and engine\n\nThe library no longer provides the default values for MySQL table charset, collation and engine.\nIf omitted in the table definition, MySQL will derive the values from the database options.\n\n## Removed `ReservedWordsCommand::setKeywordListClass()`\n\nTo add or replace a keyword list, use `ReservedWordsCommand::setKeywordList()`.\n\n## Removed `AbstractPlatform::getReservedKeywordsClass()`\n\nInstead of implementing `AbstractPlatform::getReservedKeywordsClass()`, platforms must implement `AbstractPlatform::createReservedKeywordsList()`. The latter has been made abstract.\n\n## `PostgreSQLSchemaManager` methods have been made protected.\n\n`PostgreSQLSchemaManager::getExistingSchemaSearchPaths()` and `::determineExistingSchemaSearchPaths()` have been made protected.\nThe former has also been made final.\n\n## Removed schema- and namespace-related methods\n\nThe following schema- and namespace-related methods have been removed:\n\n- `AbstractPlatform::getListNamespacesSQL()`,\n- `AbstractSchemaManager::createSchema()`,\n- `AbstractSchemaManager::listNamespaceNames()`,\n- `AbstractSchemaManager::getPortableNamespacesList()`,\n- `AbstractSchemaManager::getPortableNamespaceDefinition()`,\n- `PostgreSQLSchemaManager::getSchemaNames()`.\n\n## BC BREAK: Removed `Connection::$_schemaManager` and `Connection::getSchemaManager()`\n\nThe `Connection` and `AbstractSchemaManager` classes used to have a reference on each other effectively making a circular reference. Use `createSchemaManager()` to instantiate a schema manager.\n\n## BC BREAK: Removed `Connection::$_expr` and `Connection::getExpressionBuilder()`\n\nThe `Connection` and `ExpressionBuilder` classes used to have a reference on each other effectively making a circular reference. Use `createExpressionBuilder()` to instantiate an expression builder.\n\n## BC BREAK: Removed `ExpressionBuilder` methods\n\nThe `andX()` and `orX()` methods of the `ExpressionBuilder` class have been removed. Use `and()` and `or()` instead.\n\n## BC BREAK: Removed `CompositeExpression` methods\n\nThe `add()` and `addMultiple()` methods of the `CompositeExpression` class have been removed. Use `with()` instead, which returns a new instance.\nThe `CompositeExpression` class is now immutable.\n\n## BC BREAK: Changes in the QueryBuilder API.\n\n1. The `select()`, `addSelect()`, `groupBy()` and `addGroupBy()` methods no longer accept an array of arguments. Pass each expression as an individual argument or expand an array of expressions using the `...` operator.\n2. The `select()`, `addSelect()`, `groupBy()` and `addGroupBy()` methods no longer ignore the first argument if it's empty.\n3. The `addSelect()` method can be no longer called without arguments.\n4. The `insert()`, `update()` and `delete()` methods now require the `$table` parameter, and do not support aliases anymore.\n5. The `add()`, `getQueryPart()`, `getQueryParts()`, `resetQueryPart()` and `resetQueryParts()` methods are removed.\n6. For a `select()` query, the `getSQL()` method now throws an expression if no `SELECT` expressions have been provided.\n\n## BC BREAK: Changes in handling string and binary columns\n\n- When generating schema DDL, DBAL no longer provides the default length for string and binary columns. The application may need to provide the column length if required by the target platform.\n- The `\\DBAL\\Platforms\\AbstractPlatform::getVarcharTypeDeclarationSQL()` method has been renamed to `::getStringTypeDeclarationSQL()`.\n- The following `AbstractPlatform` methods have been removed as no longer relevant: `::getCharMaxLength()`, `::getVarcharMaxLength()`, `::getVarcharDefaultLength()`, `::getBinaryMaxLength()`, `::getBinaryDefaultLength()`.\n\n## BC BREAK: Changes in `Doctrine\\DBAL\\Event\\SchemaCreateTableEventArgs`\n\nTable columns are no longer indexed by column name. Use the `name` attribute of the column instead.\n\n## BC BREAK: Changes in the `Doctrine\\DBAL\\Schema` API\n\n- Column precision no longer defaults to 10. The default value is NULL.\n- Asset names are no longer nullable. An empty asset name should be represented as an empty string.\n\n## BC BREAK: Changes in the `Doctrine\\DBAL\\Event` API\n\n- `SchemaAlterTableAddColumnEventArgs::addSql()` and the same method in other `SchemaEventArgs`-based classes no longer accept an array of SQL statements. They accept a variadic string.\n\n## BC BREAK: Changes in the `Doctrine\\DBAL\\Schema` API\n\n- Method `Doctrine\\DBAL\\Schema\\AbstractSchemaManager::_getPortableViewDefinition()` no longer optionally returns false. It will always return a `Doctrine\\DBAL\\Schema\\View` instance.\n- Property `Doctrine\\DBAL\\Schema\\Table::$_primaryKeyName` is now optionally null instead of false.\n- Method `Doctrine\\DBAL\\Schema\\AbstractSchemaManager::tablesExist()` no longer accepts a string. Use `Doctrine\\DBAL\\Schema\\AbstractSchemaManager::tableExists()` instead.\n- Method `Doctrine\\DBAL\\Schema\\OracleSchemaManager::createDatabase()` no longer accepts `null` for `$database` argument.\n\n## BC BREAK PostgreSqlPlatform ForeignKeyConstraint support for `feferred` misspelling removed\n\n`PostgreSqlPlatform::getAdvancedForeignKeyOptionsSQL()` had a typo in it in 2.x. Both the option name\n`feferred` and `deferred` were supported in `2.x` but the misspelling was removed in 3.x.\n\nThe method was used internally and is no longer needed.\n\n## BC BREAK `DB2SchemaManager::_getPortableForeignKeyRuleDef()` removed\n\nThe method was used internally and is no longer needed.\n\n## BC BREAK `AbstractPlatform::get*Expression()` methods no loner accept integer values as arguments\n\nThe following methods' arguments do not longer accept integer value:\n\n- the `$expression` argument in `::getCountExpression()`,\n- the `$decimals` argument in `::getRoundExpression()`,\n- the `$seconds` argument in `::getDateAddSecondsExpression()`,\n- the `$seconds` argument in `::getDateSubSecondsExpression()`,\n- the `$minutes` argument in `::getDateAddMinutesExpression()`,\n- the `$minutes` argument in `::getDateSubMinutesExpression()`,\n- the `$hours` argument in `::getDateAddHourExpression()`,\n- the `$hours` argument in `::getDateAddHourExpression()`,\n- the `$days` argument in `::getDateAddDaysExpression()`,\n- the `$days` argument in `::getDateSubDaysExpression()`,\n- the `$weeks` argument in `::getDateAddWeeksExpression()`,\n- the `$weeks` argument in `::getDateSubWeeksExpression()`,\n- the `$months` argument in `::getDateAddMonthExpression()`,\n- the `$months` argument in `::getDateSubMonthExpression()`,\n- the `$quarters` argument in `::getDateAddQuartersExpression()`,\n- the `$quarters` argument in `::getDateSubQuartersExpression()`,\n- the `$years` argument in `::getDateAddYearsExpression()`,\n- the `$years` argument in `::getDateSubYearsExpression()`.\n\nPlease use the strings representing numeric SQL literals instead (e.g. `'1'` instead of `1`).\n\nThe signature of `AbstractPlatform::getConcatExpression()` changed to `::getConcatExpression(string ...$string)`.\n\n## BC BREAK The type of `$start` in `AbstractPlatform::getLocateExpression()` changed from `string|false` to `?string`\n\nThe default value of `$start` is now `null`, not `false`.\n\n## BC BREAK The types of `$start` and `$length` in `AbstractPlatform::getSubstringExpression()` changed from `int` and `?int` to `string` and `?string` respectively\n\nThe platform abstraction allows building arbitrary SQL expressions, so even if the arguments represent numeric literals, they should be passed as a string.\n\nNote that `OraclePlatform::getSubstringExpression()` will no longer automatically format the values of the `$start` and `$length` parameters as integers. The caller of the method is responsible for the validity of the SQL expressions.\n\n## BC BREAK The type of `$char` in `AbstractPlatform::getTrimExpression()` changed from `string|false` to `?string`\n\nThe default value of `$char` is now `null`, not `false`. Additionally, the method will throw an `InvalidArgumentException` in an invalid value of `$mode` is passed.\n\n## BC BREAK `Statement::quote()` only accepts strings.\n\n`Statement::quote()` and `ExpressionBuilder::literal()` no longer accept arguments of an arbitrary type and and don't implement type-specific handling. Only strings can be quoted.\n\n## BC BREAK `Statement` and `Connection` methods return `void`.\n\n`Connection::connect()`, `::bindValue()` and `::execute()` no longer return a boolean value. They will throw an exception in case of failure.\n\n## BC BREAK Transaction-related `Statement` methods return `void`.\n\n`Statement::beginTransaction()`, `::commit()` and `::rollBack()` no longer return a boolean value. They will throw a `DriverException` in case of failure.\n\n## MINOR BC BREAK `Statement::fetchColumn()` with an invalid index.\n\nSimilarly to `PDOStatement::fetchColumn()`, DBAL statements throw an exception in case of an invalid column index.\n\n## BC BREAK `Statement::execute()` with redundant parameters.\n\nSimilarly to the drivers based on `pdo_pgsql` and `pdo_sqlsrv`, `OCI8Statement::execute()` and `MySQLiStatement::execute()` do not longer ignore redundant parameters.\n\n## BC BREAK: The `NULL` value of `$offset` in LIMIT queries is not allowed\n\nThe `NULL` value of the `$offset` argument in `AbstractPlatform::(do)?ModifyLimitQuery()` methods is no longer allowed. The absence of the offset should be indicated with a `0` which is now the default value.\n\n## BC BREAK: Changes to handling binary fields\n\n- Binary fields whose length exceeds the maximum field size on a given platform are no longer represented as `BLOB`s.\n  Use binary fields of a size which fits all target platforms, or use blob explicitly instead.\n- Binary fields are no longer represented as streams in PHP. They are represented as strings.\n\n## BC BREAK: Removal of Doctrine Cache\n\nThe following methods have been removed.\n\n| class               | method                   | replacement        |\n| ------------------- | ------------------------ | ------------------ |\n| `Configuration`     | `setResultCacheImpl()`   | `setResultCache()` |\n| `Configuration`     | `getResultCacheImpl()`   | `getResultCache()` |\n| `QueryCacheProfile` | `setResultCacheDriver()` | `setResultCache()` |\n| `QueryCacheProfile` | `getResultCacheDriver()` | `getResultCache()` |\n\n# Upgrade to 3.8\n\n## Deprecated lock-related `AbstractPlatform` methods\n\nThe usage of `AbstractPlatform::getReadLockSQL()`, `::getWriteLockSQL()` and `::getForUpdateSQL()` is deprecated as\nthis API is not portable. Use `QueryBuilder::forUpdate()` as a replacement for the latter.\n\n## Deprecated `AbstractMySQLPlatform` methods\n\n* `AbstractMySQLPlatform::getColumnTypeSQLSnippets()` has been deprecated\n  in favor of `AbstractMySQLPlatform::getColumnTypeSQLSnippet()`.\n* `AbstractMySQLPlatform::getDatabaseNameSQL()` has been deprecated without replacement.\n* Not passing a database name to `AbstractMySQLPlatform::getColumnTypeSQLSnippet()` has been deprecated.\n\n## Deprecated reset methods from `QueryBuilder`\n\n`QueryBuilder::resetQueryParts()` has been deprecated.\n\nResetting individual query parts through the generic `resetQueryPart()` method has been deprecated as well.\nHowever, several replacements have been put in place depending on the `$queryPartName` parameter:\n\n| `$queryPartName` | suggested replacement                      |\n|------------------|--------------------------------------------|\n| `'select'`       | Call `select()` with a new set of columns. |\n| `'distinct'`     | `distinct(false)`                          |\n| `'where'`        | `resetWhere()`                             |\n| `'groupBy'`      | `resetGroupBy()`                           |\n| `'having'`       | `resetHaving()`                            |\n| `'orderBy'`      | `resetOrderBy()`                           |\n| `'values'`       | Call `values()` with a new set of values.  |\n\n## Deprecated getting query parts from `QueryBuilder`\n\nThe usage of `QueryBuilder::getQueryPart()` and `::getQueryParts()` is deprecated. The query parts\nare implementation details and should not be relied upon.\n\n# Upgrade to 3.6\n\n## Deprecated not setting a schema manager factory\n\nDBAL 4 will change the way the schema manager is created. To opt in to the new\nbehavior, please configure the schema manager factory:\n\n```php\n$configuration = new Configuration();\n$configuration->setSchemaManagerFactory(new DefaultSchemaManagerFactory());\n\n$connection = DriverManager::getConnection(\n    [/* your parameters */],\n    $configuration,\n);\n```\n\nIf you use a custom platform implementation, please make sure it implements\nthe `createSchemaManager()`method . Otherwise, the connection will fail to\ncreate a schema manager.\n\n## Deprecated the `url` connection parameter\n\nDBAL ships with a new and configurable DSN parser that can be used to parse a\ndatabase URL into connection parameters understood by `DriverManager`.\n\n### Before\n\n```php\n$connection = DriverManager::getConnection(\n    ['url' => 'mysql://my-user:t0ps3cr3t@my-host/my-database']\n);\n```\n\n### After\n\n```php\n$dsnParser  = new DsnParser(['mysql' => 'pdo_mysql']);\n$connection = DriverManager::getConnection(\n    $dsnParser->parse('mysql://my-user:t0ps3cr3t@my-host/my-database')\n);\n```\n\n## Deprecated `Connection::PARAM_*_ARRAY` constants\n\nUse the corresponding constants on `ArrayParameterType` instead. Please be aware that\n`ArrayParameterType` will be a native enum type in DBAL 4.\n\n# Upgrade to 3.5\n\n## Deprecated extension via Doctrine Event Manager\n\nExtension of the library behavior via Doctrine Event Manager has been deprecated.\n\nThe following methods and properties have been deprecated:\n- `AbstractPlatform::$_eventManager`,\n- `AbstractPlatform::getEventManager()`,\n- `AbstractPlatform::setEventManager()`,\n- `Connection::$_eventManager`,\n- `Connection::getEventManager()`.\n\n## Deprecated extension via connection events\n\nSubscription to the `postConnect` event has been deprecated. Use one of the following replacements for the standard\nevent listeners or implement a custom middleware instead.\n\nThe following `postConnect` event listeners have been deprecated:\n1. `OracleSessionInit`. Use `Doctrine\\DBAL\\Driver\\OCI8\\Middleware\\InitializeSession`.\n2. `SQLiteSessionInit`. Use `Doctrine\\DBAL\\Driver\\AbstractSQLiteDriver\\Middleware\\EnableForeignKeys`.\n3. `SQLSessionInit`. Implement a custom middleware.\n\n## Deprecated extension via transaction events\n\nSubscription to the following events has been deprecated:\n- `onTransactionBegin`,\n- `onTransactionCommit`,\n- `onTransactionRollBack`.\n\nThe upgrade path will depend on the use case:\n1. If you need to extend the behavior of only the actual top-level transactions (not the ones emulated via savepoints),\n   implement a driver middleware.\n2. If you need to extend the behavior of the top-level and nested transactions, either implement a driver middleware\n   or implement a custom wrapper connection.\n\n## Deprecated extension via schema definition events\n\nSubscription to the following events has been deprecated:\n- `onSchemaColumnDefinition`,\n- `onSchemaIndexDefinition`.\n\nUse a custom schema manager instead.\n\n## Deprecated extension via schema manipulation events\n\nSubscription to the following events has been deprecated:\n- `onSchemaCreateTable`,\n- `onSchemaCreateTableColumn`,\n- `onSchemaDropTable`,\n- `onSchemaAlterTable`,\n- `onSchemaAlterTableAddColumn`,\n- `onSchemaAlterTableRemoveColumn`,\n- `onSchemaAlterTableChangeColumn`,\n- `onSchemaAlterTableRenameColumn`.\n\nThe upgrade path will depend on the use case:\n1. If you are using the events to modify the behavior of the platform, you should extend the platform class\n   and implement the corresponding logic in the sub-class.\n2. If you are using the events to modify the arguments processed by the platform (e.g. modify the table definition\n   before the platform generates the `CREATE TABLE` DDL), you should do the needed modifications before calling\n   the corresponding platform or schema manager method.\n\n## Deprecated the emulation of the `LOCATE()` function for SQLite\n\nRelying on the availability of the `LOCATE()` on SQLite deprecated. SQLite does not provide that function natively,\nbut the function `INSTR()` can be a drop-in replacement in most situations. Use\n`AbstractPlatform::getLocateExpression()` if you need a portable solution.\n\n## Deprecated `SchemaDiff::toSql()` and `SchemaDiff::toSaveSql()`\n\nUsing `SchemaDiff::toSql()` to generate SQL representing the diff has been deprecated.\nUse `AbstractPlatform::getAlterSchemaSQL()` instead.\n\n`SchemaDiff::toSaveSql()` has been deprecated without a replacement.\n\n## Deprecated `SchemaDiff::$orphanedForeignKeys`\n\nRelying on the schema diff tracking foreign keys referencing the tables that have been dropped is deprecated.\nBefore dropping a table referenced by foreign keys, drop the foreign keys first.\n\n## Deprecated the `userDefinedFunctions` driver option for `pdo_sqlite`\n\nInstead of funneling custom functions through the `userDefinedFunctions` option, use `getNativeConnection()`\nto access the wrapped PDO connection and register your custom functions directly.\n\n### Before\n\n```php\n$connection = DriverManager::getConnection([\n    'driver' => 'pdo_sqlite',\n    'path' => '/path/to/file.db',\n    'driverOptions' => [\n        'userDefinedFunctions' => [\n            'my_function' => ['callback' => [SomeClass::class, 'someMethod'], 'numArgs' => 2],\n        ],\n    ]\n]);\n```\n\n### After\n\n```php\n$connection = DriverManager::getConnection([\n    'driver' => 'pdo_sqlite',\n    'path' => '/path/to/file.db',\n]);\n\n$connection->getNativeConnection()\n    ->sqliteCreateFunction('my_function', [SomeClass::class, 'someMethod'], 2);\n```\n\n## Deprecated `Table` methods.\n\nThe `hasPrimaryKey()` method has been deprecated. Use `getPrimaryKey()` and check if the return value is not null.\nThe `getPrimaryKeyColumns()` method has been deprecated. Use `getPrimaryKey()` and `Index::getColumns()` instead.\nThe `getForeignKeyColumns()` method has been deprecated. Use `getForeignKey()`\nand `ForeignKeyConstraint::getLocalColumns()` instead.\nThe `changeColumn()` method has been deprecated. Use `modifyColumn()` instead.\n\n## Deprecated `SchemaException` error codes.\n\nRelying on the error code of `SchemaException` is deprecated. In order to handle a specific type of exception,\ncatch the corresponding exception class instead.\n\n| Error Code                  | Class                          |\n|-----------------------------|--------------------------------|\n| `TABLE_DOESNT_EXIST`        | `TableDoesNotExist`            |\n| `TABLE_ALREADY_EXISTS`      | `TableAlreadyExists`           |\n| `COLUMN_DOESNT_EXIST`       | `ColumnDoesNotExist`           |\n| `COLUMN_ALREADY_EXISTS`     | `ColumnAlreadyExists`          |\n| `INDEX_DOESNT_EXIST`        | `IndexDoesNotExist`            |\n| `INDEX_ALREADY_EXISTS`      | `IndexAlreadyExists`           |\n| `SEQUENCE_DOENST_EXIST`     | `SequenceDoesNotExist`         |\n| `SEQUENCE_ALREADY_EXISTS`   | `SequenceAlreadyExists`        |\n| `FOREIGNKEY_DOESNT_EXIST`   | `ForeignKeyDoesNotExist`       |\n| `CONSTRAINT_DOESNT_EXIST`   | `UniqueConstraintDoesNotExist` |\n| `NAMESPACE_ALREADY_EXISTS`  | `NamespaceAlreadyExists`       |\n\n## Deprecated fallback connection used to determine the database platform.\n\nRelying on a fallback connection used to determine the database platform while connecting to a non-existing database\nhas been deprecated. Either use an existing database name in connection parameters or omit the database name\nif the platform and the server configuration allow that.\n\n## Deprecated misspelled isFullfilledBy() method\n\nThis method's name was spelled incorrectly. Use `isFulfilledBy` instead.\n\n## Deprecated default PostgreSQL connection database.\n\nRelying on the DBAL connecting to the \"postgres\" database by default is deprecated. Unless you want to have the server\ndetermine the default database for the connection, specify the database name explicitly.\n\n## Deprecated the \"default_dbname\" parameter of the wrapper `Connection`.\n\nThe \"default_dbname\" parameter of the wrapper `Connection` has been deprecated. Use \"dbname\" instead.\n\n## Deprecated the \"platform\" parameter of the wrapper `Connection`.\n\nThe \"platform\" parameter of the wrapper `Connection` has been deprecated. Use a driver middleware that would instantiate\nthe platform instead.\n\n## Deprecated driver name aliases.\n\nRelying on driver name aliases in connection parameters has been deprecated. Use the actual driver names instead.\n\n## Deprecated \"unique\" and \"check\" column properties.\n\nThe \"unique\" and \"check\" column properties have been deprecated. Use unique constraints to define unique columns.\n\n## Deprecated relying on the default precision and scale of decimal columns.\n\nRelying on the default precision and scale of decimal columns provided by the DBAL is deprecated.\nWhen declaring decimal columns, specify the precision and scale explicitly.\n\n## Deprecated `Comparator::diffTable()` method.\n\nThe `Comparator::diffTable()` method has been deprecated in favor of `Comparator::compareTables()`\nand `TableDiff::isEmpty()`.\n\nInstead of having to check whether the diff is equal to the boolean `false`, you can optionally check\nif the returned table diff is empty.\n\n### Before\n\n```php\n$diff = $comparator->diffTable($oldTable, $newTable);\n\n// mandatory check\nif ($diff !== false) {\n    // we have a diff\n}\n```\n\n### After\n\n```php\n$diff = $comparator->compareTables($oldTable, $newTable);\n\n// optional check\nif (! $diff->isEmpty()) {\n    // we have a diff\n}\n```\n\n## Deprecated not passing `$fromTable` to the `TableDiff` constructor.\n\nNot passing `$fromTable` to the `TableDiff` constructor has been deprecated.\n\nThe `TableDiff::$name` property and the `TableDiff::getName()` method have been deprecated as well. In order to obtain\nthe name of the table that the diff describes, use `TableDiff::getOldTable()`.\n\n## Deprecated renaming tables via `TableDiff` and `AbstractPlatform::alterTable()`.\n\nRenaming tables via setting the `$newName` property on a `TableDiff` and passing it to `AbstractPlatform::alterTable()`\nis deprecated. The implementations of `AbstractSchemaManager::alterTable()` should use `AbstractPlatform::renameTable()`\ninstead.\n\nThe `TableDiff::$newName` property and the `TableDiff::getNewName()` method have been deprecated.\n\n## Marked `Comparator` methods as internal.\n\nThe following `Comparator` methods have been marked as internal:\n\n- `columnsEqual()`,\n- `diffForeignKey()`,\n- `diffIndex()`.\n\nThe `diffColumn()` method has been deprecated. Use `diffTable()` instead.\n\n## Marked `SchemaDiff` public properties as internal.\n\nThe public properties of the `SchemaDiff` class have been marked as internal. Use the following corresponding methods\ninstead:\n\n| Property             | Method                  |\n|----------------------|-------------------------|\n| `$newNamespaces`     | `getCreatedSchemas()`   |\n| `$removedNamespaces` | `getDroppedSchemas()`   |\n| `$newTables`         | `getCreatedTables()`    |\n| `$changedTables`     | `getAlteredTables()`    |\n| `$removedTables`     | `getDroppedTables()`    |\n| `$newSequences`      | `getCreatedSequences()` |\n| `$changedSequences`  | `getAlteredSequence()`  |\n| `$removedSequences`  | `getDroppedSequences()` |\n\n## Marked `TableDiff` public properties as internal.\n\nThe public properties of the `TableDiff` class have been marked as internal. Use the following corresponding methods\ninstead:\n\n| Property               | Method                     |\n|------------------------|----------------------------|\n| `$addedColumns`        | `getAddedColumns()`        |\n| `$changedColumns`      | `getModifiedColumns()`     |\n| `$removedColumns`      | `getDroppedColumns()`      |\n| `$renamedColumns`      | `getRenamedColumns()`      |\n| `$addedIndexes`        | `getAddedIndexes()`        |\n| `$changedIndexes`      | `getModifiedIndexes()`     |\n| `$removedIndexes`      | `getDroppedIndexes()`      |\n| `$renamedIndexes`      | `getRenamedIndexes()`      |\n| `$addedForeignKeys`    | `getAddedForeignKeys()`    |\n| `$changedForeignKeys`  | `getModifiedForeignKeys()` |\n| `$removedForeignKeys`  | `getDroppedForeignKeys()`  |\n\n## Marked `ColumnDiff` public properties as internal.\n\nThe `$fromColumn` and `$column` properties of the `ColumnDiff` class have been marked as internal. Use the\n`getOldColumn()` and `getNewColumn()` methods instead.\n\n## Deprecated `ColumnDiff::$changedProperties` and `::hasChanged()`.\n\nThe `ColumnDiff::$changedProperties` property and the `hasChanged()` method have been deprecated. Use one of the\nfollowing `ColumnDiff` methods in order to check if a given column property has changed:\n\n- `hasTypeChanged()`,\n- `hasLengthChanged()`,\n- `hasPrecisionChanged()`,\n- `hasScaleChanged()`,\n- `hasUnsignedChanged()`,\n- `hasFixedChanged()`,\n- `hasNotNullChanged()`,\n- `hasDefaultChanged()`,\n- `hasAutoIncrementChanged()`,\n- `hasCommentChanged()`.\n\n## Deprecated `ColumnDiff` APIs dedicated to the old column name.\n\nThe `$oldColumnName` property and the `getOldColumnName()` method of the `ColumnDiff` class have been deprecated.\n\nMake sure the `$fromColumn` argument is passed to the `ColumnDiff` constructor and use the `$fromColumn` property\ninstead.\n\n## Marked schema diff constructors as internal.\n\nThe constructors of the following classes have been marked as internal:\n\n1. `SchemaDiff`,\n2. `TableDiff`,\n3. `ColumnDiff`.\n\nThese classes can be instantiated only by schema comparators. The signatures of the constructors may change in future\nversions.\n\n## Deprecated `SchemaDiff` reference to the original schema.\n\nThe `SchemaDiff::$fromSchema` property has been deprecated.\n\n## Marked `AbstractSchemaManager::_execSql()` as internal.\n\nThe `AbstractSchemaManager::_execSql()` method has been marked as internal. It will not be available in 4.0.\n\n## Deprecated `AbstractSchemaManager` schema introspection methods.\n\nThe following `AbstractSchemaManager` methods has been deprecated:\n\n1. `listTableDetails()`. Use `introspectTable()` instead,\n2. `createSchema()`. Use `introspectSchema()` instead.\n\n# Upgrade to 3.4\n\n## Deprecated wrapper- and driver-level `Statement::bindParam()` methods.\n\nThe following methods have been deprecated:\n\n1. `Doctrine\\DBAL\\Statement::bindParam()`,\n2. `Doctrine\\DBAL\\Driver\\Statement::bindParam()`.\n\nUse the corresponding `bindValue()` instead.\n\n## Deprecated not passing parameter type to the driver-level `Statement::bind*()` methods.\n\nNot passing `$type` to the driver-level `Statement::bindParam()` and `::bindValue()` is deprecated.\nPass the type corresponding to the parameter being bound.\n\n## Deprecated passing `$params` to `Statement::execute*()` methods.\n\nPassing `$params` to the driver-level `Statement::execute()` and the wrapper-level `Statement::executeQuery()`\nand `Statement::executeStatement()` methods has been deprecated.\n\nBind parameters using `Statement::bindParam()` or `Statement::bindValue()` instead.\n\n## Deprecated `QueryBuilder` methods and constants.\n\n1. The `QueryBuilder::getState()` method has been deprecated as the builder state is an internal concern.\n2. Relying on the type of the query being built by using `QueryBuilder::getType()` has been deprecated.\n   If necessary, track the type of the query being built outside of the builder.\n3. The `QueryBuilder::getConnection()` method has been deprecated. Use the connection used to instantiate the builder\n   instead.\n\nThe following `QueryBuilder` constants related to the above methods have been deprecated:\n\n1. `SELECT`,\n2. `DELETE`,\n3. `UPDATE`,\n4. `INSERT`,\n5. `STATE_DIRTY`,\n6. `STATE_CLEAN`.\n\n## Marked `Connection::ARRAY_PARAM_OFFSET` as internal.\n\nThe `Connection::ARRAY_PARAM_OFFSET` constant has been marked as internal. It will be removed in 4.0.\n\n## Deprecated using NULL as prepared statement parameter type.\n\nOmit the type or use `ParameterType::STRING` instead.\n\n## Deprecated passing asset names as assets in `AbstractPlatform` and `AbstractSchemaManager` methods.\n\nPassing assets to the following `AbstractPlatform` methods and parameters has been deprecated:\n\n1. The `$table` parameter of `getDropTableSQL()`,\n2. The `$table` parameter of `getDropTemporaryTableSQL()`,\n3. The `$index` and `$table` parameters of `getDropIndexSQL()`,\n4. The `$constraint` and `$table` parameters of `getDropConstraintSQL()`,\n5. The `$foreignKey` and `$table` parameters of `getDropForeignKeySQL()`,\n6. The `$sequence` parameter of `getDropSequenceSQL()`,\n7. The `$table` parameter of `getCreateConstraintSQL()`,\n8. The `$table` parameter of `getCreatePrimaryKeySQL()`,\n9. The `$table` parameter of `getCreateForeignKeySQL()`.\n\nPassing assets to the following `AbstractSchemaManager` methods and parameters has been deprecated:\n\n1. The `$index` and `$table` parameters of `dropIndex()`,\n2. The `$table` parameter of `dropConstraint()`,\n3. The `$foreignKey` and `$table` parameters of `dropForeignKey()`.\n\nPass a string representing the quoted asset name instead.\n\n## Marked `AbstractPlatform` methods as internal.\n\nThe following methods have been marked internal as they are not designed to be used from outside the platform classes:\n\n1. `getAdvancedForeignKeyOptionsSQL()`,\n2. `getColumnCharsetDeclarationSQL()`,\n3. `getColumnCollationDeclarationSQL()`,\n4. `getColumnDeclarationSQL()`,\n5. `getCommentOnColumnSQL()`,\n6. `getDefaultValueDeclarationSQL()`,\n7. `getForeignKeyDeclarationSQL()`,\n8. `getForeignKeyReferentialActionSQL()`,\n9. `getIndexDeclarationSQL()`,\n10. `getInlineColumnCommentSQL()`,\n11. `supportsColumnCollation()`,\n12. `supportsCommentOnStatement()`,\n13. `supportsInlineColumnComments()`,\n14. `supportsPartialIndexes()`.\n\n## Deprecated internal `AbstractPlatform` methods.\n\nThe following methods have been deprecated as they do not represent any platform-level abstraction:\n\n1. `getCustomTypeDeclarationSQL()`,\n2. `getIndexFieldDeclarationListSQL()`,\n3. `getColumnsFieldDeclarationListSQL()`.\n\n## Deprecated `AbstractPlatform` methods.\n\n1. `usesSequenceEmulatedIdentityColumns()` and `getIdentitySequenceName()` have been deprecated since the fact of\n   emulation of identity columns and the underlying sequence name are internal platform-specific implementation details.\n2. `getDefaultSchemaName()` has been deprecated since it's not used to implement any of the portable APIs.\n3. `supportsCreateDropDatabase()` has been deprecated. Try calling `AbstractSchemaManager::createDatabase`\n    and/or `::dropDatabase()` to see if the corresponding operations are supported by the current database platform\n    or implement conditional logic based on the platform class name.\n\n## Deprecated `SqlitePlatform::getTinyIntTypeDeclarationSQL()` and `::getMediumIntTypeDeclarationSQL()` methods.\n\nThe methods have been deprecated since they are implemented only by the SQLite platform, and the column types\nthey implement are not portable across the rest of the supported platforms.\n\nUse `SqlitePlatform::getSmallIntTypeDeclarationSQL()` and `::getIntegerTypeDeclarationSQL()` respectively instead.\n\n## Deprecated `NULL` schema asset filter.\n\nNot passing an argument to `Configuration::setSchemaAssetsFilter()` and passing `NULL` as the value of `$callable`\nhas been deprecated. In order to disable filtering, pass a callable that always returns true.\n\n## Deprecated custom schema options.\n\nCustom schema options have been deprecated since they effectively duplicate the functionality of platform options.\n\nThe following `Column` class properties and methods have been deprecated:\n\n- `$_customSchemaOptions`,\n- `setCustomSchemaOption()`,\n- `hasCustomSchemaOption()`,\n- `getCustomSchemaOption()`,\n- `setCustomSchemaOptions()`,\n- `getCustomSchemaOptions()`.\n\nUse platform options instead.\n\n## Deprecated `array` and `object` column types.\n\nThe `array` and `object` column types have been deprecated since they use PHP built-in serialization. Without additional\nconfiguration, which the API of these types doesn't allow, the usage of built-in serialization may lead to\nsecurity issues.\n\nThe following classes and constants have been deprecated:\n- `ArrayType`,\n- `ObjectType`,\n- `Types::ARRAY`,\n- `Types::OBJECT`.\n\nUse JSON for storing unstructured data.\n\n## Deprecated `Driver::getSchemaManager()`.\n\nThe `Driver::getSchemaManager()` method has been deprecated. Use `AbstractPlatform::createSchemaManager()` instead.\n\n## Deprecated `ConsolerRunner`.\n\nThe `ConsoleRunner` class has been deprecated. Use Symfony Console documentation\nto bootstrap a command-line application.\n\n## Deprecated `Visitor` interfaces and `visit()` methods on schema objects.\n\nThe following interfaces and classes have been deprecated:\n\n1. `Visitor`,\n2. `NamespaceVisitor`,\n3. `AbstractVisitor`.\n\nThe following methods have been deprecated:\n\n1. `Schema::visit()`,\n2. `Table::visit()`,\n3. `Sequence::visit()`.\n\nInstead of having schema objects call the visitor API, call the API of the schema objects.\n\n## Deprecated removal of namespaced assets from schema.\n\nThe `RemoveNamespacedAssets` schema visitor and the usage of namespaced database object names with the platforms\nthat don't support them have been deprecated.\n\n## Deprecated the functionality of checking schema for the usage of reserved keywords.\n\nThe following components have been deprecated:\n\n1. The `dbal:reserved-words` console command.\n2. The `ReservedWordsCommand` and `ReservedKeywordsValidator` classes.\n3. The `KeywordList::getName()` method.\n\nUse the documentation on the used database platform(s) instead.\n\n## Deprecated `CreateSchemaSqlCollector` and `DropSchemaSqlCollector`.\n\nThe `CreateSchemaSqlCollector` and `DropSchemaSqlCollector` classes have been deprecated in favor of\n`CreateSchemaObjectsSQLBuilder` and `DropSchemaObjectsSQLBuilder` respectively.\n\n## Deprecated calling `AbstractPlatform::getCreateTableSQL()` with any of the `CREATE_INDEXES` and `CREATE_FOREIGNKEYS`\nflags unset.\n\nNot setting the `CREATE_FOREIGNKEYS` flag and unsetting the `CREATE_INDEXES` flag when calling\n`AbstractPlatform::getCreateTableSQL()` has been deprecated. The table should be always created with indexes.\nIn order to build the statements that create multiple tables referencing each other via foreign keys,\nuse `AbstractPlatform::getCreateTablesSQL()`.\n\n## Deprecated `AbstractPlatform::supportsForeignKeyConstraints()`.\n\nThe `AbstractPlatform::supportsForeignKeyConstraints()` method has been deprecated. All platforms should support\nforeign key constraints.\n\n## Deprecated `AbstractPlatform::supportsForeignKeyConstraints()`.\n\nRelying on the DBAL not generating DDL for foreign keys on MySQL engines other than InnoDB is deprecated.\nDefine foreign key constraints only if they are necessary.\n\n## Deprecated `AbstractPlatform` methods exposing quote characters.\n\nThe `AbstractPlatform::getStringLiteralQuoteCharacter()` and `::getIdentifierQuoteCharacter()` methods\nhave been deprecated. Use `::quoteStringLiteral()` and `::quoteIdentifier()` to quote string literals and identifiers\nrespectively.\n\n## Deprecated `AbstractSchemaManager::getDatabasePlatform()`\n\nThe `AbstractSchemaManager::getDatabasePlatform()` method has been deprecated. Use `Connection::getDatabasePlatform()`\ninstead.\n\n## Deprecated passing date interval parameters as integer.\n\nPassing date interval parameters to the following `AbstractPlatform` methods as integer has been deprecated:\n\n- the `$seconds` argument in `::getDateAddSecondsExpression()`,\n- the `$seconds` parameter in `::getDateSubSecondsExpression()`,\n- the `$minutes` parameter in `::getDateAddMinutesExpression()`,\n- the `$minutes` parameter in `::getDateSubMinutesExpression()`,\n- the `$hours` parameter in `::getDateAddHourExpression()`,\n- the `$hours` parameter in `::getDateAddHourExpression()`,\n- the `$days` parameter in `::getDateAddDaysExpression()`,\n- the `$days` parameter in `::getDateSubDaysExpression()`,\n- the `$weeks` parameter in `::getDateAddWeeksExpression()`,\n- the `$weeks` parameter in `::getDateSubWeeksExpression()`,\n- the `$months` parameter in `::getDateAddMonthExpression()`,\n- the `$months` parameter in `::getDateSubMonthExpression()`,\n- the `$quarters` parameter in `::getDateAddQuartersExpression()`,\n- the `$quarters` parameter in `::getDateSubQuartersExpression()`,\n- the `$years` parameter in `::getDateAddYearsExpression()`,\n- the `$years` parameter in `::getDateSubYearsExpression()`.\n\nUse the strings representing numeric SQL literals instead (e.g. `'1'` instead of `1`).\n\n## Deprecated transaction nesting without savepoints\n\nStarting a transaction inside another transaction with\n`Doctrine\\DBAL\\Connection::beginTransaction()` without enabling transaction\nnesting with savepoints beforehand is deprecated.\n\nTransaction nesting with savepoints can be enabled with\n`$connection->setNestTransactionsWithSavepoints(true);`\n\nIn case your platform does not support savepoints, you will have to rework your\napplication logic so as to avoid nested transaction blocks.\n\n## Added runtime deprecations for the default string column length.\n\nIn addition to the formal deprecation introduced in DBAL 3.2, the library will now emit a deprecation message at runtime\nif the string or binary column length is omitted, but it's required by the target database platform.\n\n## Deprecated `AbstractPlatform::getVarcharTypeDeclarationSQL()`\n\nThe `AbstractPlatform::getVarcharTypeDeclarationSQL()` method has been deprecated.\nUse `AbstractPlatform::getStringTypeDeclarationSQL()` instead.\n\n## Deprecated `$database` parameter of `AbstractSchemaManager::list*()` methods\n\nPassing `$database` to the following methods has been deprecated:\n\n- `AbstractSchemaManager::listSequences()`,\n- `AbstractSchemaManager::listTableColumns()`,\n- `AbstractSchemaManager::listTableForeignKeys()`.\n\nOnly introspection of the current database will be supported in DBAL 4.0.\n\n## Deprecated `AbstractPlatform` schema introspection methods\n\nThe following schema introspection methods have been deprecated:\n\n- `AbstractPlatform::getListTablesSQL()`,\n- `AbstractPlatform::getListTableColumnsSQL()`,\n- `AbstractPlatform::getListTableIndexesSQL()`,\n- `AbstractPlatform::getListTableForeignKeysSQL()`.\n\n## `AbstractPlatform` schema introspection methods made internal\n\nThe following schema introspection methods have been marked as internal:\n\n- `AbstractPlatform::getListDatabasesSQL()`,\n- `AbstractPlatform::getListSequencesSQL()`,\n- `AbstractPlatform::getListViewsSQL()`.\n\nThe queries used for schema introspection are an internal implementation detail of the DBAL.\n\n## Deprecated `collate` option for MySQL\n\nThis undocumented option is deprecated in favor of `collation`.\n\n## Deprecated `AbstractPlatform::getListTableConstraintsSQL()`\n\nThis method is unused by the DBAL since 2.0.\n\n## Deprecated `Type::getName()`\n\nThis method is not useful for the DBAL anymore, and will be removed in 4.0.\nAs a consequence, depending on the name of a type being `json` for `jsonb` to\nbe used for the Postgres platform is deprecated in favor of extending\n`Doctrine\\DBAL\\Types\\JsonType`.\n\nYou can use `Type::getTypeRegistry()->lookupName($type)` instead.\n\n## Deprecated `AbstractPlatform::getColumnComment()`, `AbstractPlatform::getDoctrineTypeComment()`,\n`AbstractPlatform::hasNative*Type()` and `Type::requiresSQLCommentHint()`\n\nDBAL no longer needs column comments to ensure proper diffing. Note that all the\nmethods should probably have been marked as internal as these comments were an\nimplementation detail of the DBAL.\n\n# Upgrade to 3.3\n\n## Deprecated `Type::canRequireSQLConversion()`.\n\nConsumers should call `Type::convertToDatabaseValueSQL()` and `Type::convertToPHPValueSQL()` regardless of the type.\n\n## Deprecated the `doctrine-dbal` binary.\n\nThe documentation explains how the console tools can be bootstrapped for standalone usage.\n\nThe method `ConsoleRunner::printCliConfigTemplate()` is deprecated because it was only useful in the context of the\n`doctrine-dbal` binary.\n\n## Deprecated the `Graphviz` visitor.\n\nThis class is not part of the database abstraction provided by the library and will be removed in DBAL 4.\n\n## Deprecated the `--depth` option of `RunSqlCommand`.\n\nThis option does not have any effect anymore and will be removed in DBAL 4.\n\n## Deprecated platform \"commented type\" API\n\nSince `Type::requiresSQLCommentTypeHint()` already allows determining whether a\ntype should result in SQL columns with a type hint in their comments, the\nfollowing methods are deprecated:\n\n- `AbstractPlatform::isCommentedDoctrineType()`\n- `AbstractPlatform::initializeCommentedDoctrineTypes()`\n- `AbstractPlatform::markDoctrineTypeCommented()`\n\nThe protected property `AbstractPlatform::$doctrineTypeComments` is deprecated\nas well.\n\n## Deprecated support for IBM DB2 10.5 and older\n\nIBM DB2 10.5 and older won't be supported in DBAL 4. Consider upgrading to IBM DB2 11.1 or later.\n\n## Deprecated support for Oracle 12c (12.2.0.1) and older\n\nOracle 12c (12.2.0.1) won't be supported in DBAL 4. Consider upgrading to Oracle 18c (12.2.0.2) or later.\n\n## Deprecated support for MariaDB 10.2.6 and older\n\nMariaDB 10.2.6 and older won't be supported in DBAL 4. Consider upgrading to MariaDB 10.2.7 or later.\nThe following classes have been deprecated:\n\n* `Doctrine\\DBAL\\Platforms\\MariaDb1027Platform`\n* `Doctrine\\DBAL\\Platforms\\Keywords\\MariaDb102Keywords`\n\n## Deprecated support for MySQL 5.6 and older\n\nMySQL 5.6 and older won't be actively supported in DBAL 4. Consider upgrading to MySQL 5.7 or later.\nThe following classes have been deprecated:\n\n* `Doctrine\\DBAL\\Platforms\\MySQL57Platform`\n* `Doctrine\\DBAL\\Platforms\\Keywords\\MySQL57Keywords`\n\n## Deprecated support for Postgres 9\n\nPostgres 9 won't be actively supported in DBAL 4. Consider upgrading to Postgres 10 or later.\nThe following classes have been deprecated:\n\n* `Doctrine\\DBAL\\Platforms\\PostgreSQL100Platform`\n* `Doctrine\\DBAL\\Platforms\\Keywords\\PostgreSQL100Keywords`\n\n## Deprecated `Connection::getWrappedConnection()`, `Connection::connect()` made `@internal`.\n\nThe wrapper-level `Connection::getWrappedConnection()` method has been deprecated.\nUse `Connection::getNativeConnection()` to access the native connection.\n\nThe `Connection::connect()` method has been marked internal. It will be marked `protected` in DBAL 4.0.\n\n## Add `Connection::getNativeConnection()`\n\nDriver and middleware connections need to implement a new method `getNativeConnection()` that gives access to the\nnative database connection. Not doing so is deprecated.\n\n## Deprecate accessors for the native connection in favor of `getNativeConnection()`\n\nThe following methods have been deprecated:\n\n* `Doctrine\\DBAL\\Driver\\PDO\\Connection::getWrappedConnection()`\n* `Doctrine\\DBAL\\Driver\\PDO\\SQLSrv\\Connection::getWrappedConnection()`\n* `Doctrine\\DBAL\\Driver\\Mysqli\\Connection::getWrappedResourceHandle()`\n\nCall `getNativeConnection()` to access the underlying PDO or MySQLi connection.\n\n# Upgrade to 3.2\n\n## Minor BC Break: using cache keys with characters reserved by `psr/cache`\n\nWe have been working on phasing out `doctrine/cache`, and 3.2.0 allows to use\n`psr/cache` instead. To help calling our own internal APIs in a unified way, we\nalso wrap `doctrine/cache` implementations with a `psr/cache` adapter.\nUsing cache keys containing characters reserved by `psr/cache` will result in\nan exception. The characters are the following: `{}()/\\@:`.\n\n## Deprecated `SQLLogger` and its implementations.\n\nThe `SQLLogger` and its implementations `DebugStack` and `LoggerChain` have been deprecated.\nFor logging purposes, use `Doctrine\\DBAL\\Logging\\Middleware` instead. No replacement for `DebugStack` is provided.\n\nThe `Configuration` methods `getSQLLogger()` and `setSQLLogger()` have been deprecated as well.\n\n## Deprecated `SqliteSchemaManager::createDatabase()` and `dropDatabase()` methods.\n\nThe `SqliteSchemaManager::createDatabase()` and `dropDatabase()` methods have been deprecated. The SQLite engine\nwill create the database file automatically. In order to delete the database file, use the filesystem.\n\n## Deprecated `AbstractSchemaManager::dropAndCreate*()` and `::tryMethod()` methods.\n\nThe following `AbstractSchemaManager::dropAndCreate*()` methods have been deprecated:\n\n1. `AbstractSchemaManager::dropAndCreateConstraint()`. Use `AbstractSchemaManager::dropIndex()`\n   and `AbstractSchemaManager::createIndex()`, `AbstractSchemaManager::dropForeignKey()`\n   and `AbstractSchemaManager::createForeignKey()` or `AbstractSchemaManager::dropUniqueConstraint()`\n   and `AbstractSchemaManager::createUniqueConstraint()` instead.\n2. `AbstractSchemaManager::dropAndCreateIndex()`. Use `AbstractSchemaManager::dropIndex()`\n   and `AbstractSchemaManager::createIndex()` instead.\n3. `AbstractSchemaManager::dropAndCreateForeignKey()`.\n    Use AbstractSchemaManager::dropForeignKey() and AbstractSchemaManager::createForeignKey() instead.\n4. `AbstractSchemaManager::dropAndCreateSequence()`. Use `AbstractSchemaManager::dropSequence()`\n   and `AbstractSchemaManager::createSequence()` instead.\n5. `AbstractSchemaManager::dropAndCreateTable()`. Use `AbstractSchemaManager::dropTable()`\n   and `AbstractSchemaManager::createTable()` instead.\n6. `AbstractSchemaManager::dropAndCreateDatabase()`. Use `AbstractSchemaManager::dropDatabase()`\n   and `AbstractSchemaManager::createDatabase()` instead.\n7. `AbstractSchemaManager::dropAndCreateView()`. Use `AbstractSchemaManager::dropView()`\n   and `AbstractSchemaManager::createView()` instead.\n\nThe `AbstractSchemaManager::tryMethod()` method has been also deprecated.\n\n## Deprecated `AbstractSchemaManager::getSchemaSearchPaths()`.\n\n1. The `AbstractSchemaManager::getSchemaSearchPaths()` method has been deprecated.\n2. Relying on `AbstractSchemaManager::createSchemaConfig()` populating the schema name for those database\n   platforms that don't support schemas (currently, all except for PostgreSQL) is deprecated.\n3. Relying on `Schema` using \"public\" as the default name is deprecated.\n\n## Deprecated `AbstractAsset::getFullQualifiedName()`.\n\nThe `AbstractAsset::getFullQualifiedName()` method has been deprecated. Use `::getNamespaceName()`\nand `::getName()` instead.\n\n## Deprecated schema methods related to explicit foreign key indexes.\n\nThe following methods have been deprecated:\n\n- `Schema::hasExplicitForeignKeyIndexes()`,\n- `SchemaConfig::hasExplicitForeignKeyIndexes()`,\n- `SchemaConfig::setExplicitForeignKeyIndexes()`.\n\n## Deprecated `Schema::getTableNames()`.\n\nThe `Schema::getTableNames()` method has been deprecated. In order to obtain schema table names,\nuse `Schema::getTables()` and call `Table::getName()` on the elements of the returned array.\n\n## Deprecated features of `Schema::getTables()`\n\nUsing the returned array keys as table names is deprecated. Retrieve the name from the table\nvia `Table::getName()` instead. In order to retrieve a table by name, use `Schema::getTable()`.\n\n## Deprecated `AbstractPlatform::canEmulateSchemas()`.\n\nThe `AbstractPlatform::canEmulateSchemas()` method and the schema emulation implemented in the SQLite platform\nhave been deprecated.\n\n## Deprecated `udf*` methods of the `SQLitePlatform` methods.\n\nThe following `SQLServerPlatform` methods have been deprecated in favor of their implementations\nin the `UserDefinedFunctions` class:\n- `udfSqrt()`,\n- `udfMod()`,\n- `udfLocate()`.\n\n## `SQLServerPlatform` methods marked internal.\n\nThe following `SQLServerPlatform` methods have been marked internal:\n- `getDefaultConstraintDeclarationSQL()`,\n- `getAddExtendedPropertySQL()`,\n- `getDropExtendedPropertySQL()`,\n- `getUpdateExtendedPropertySQL()`.\n\n## `OraclePlatform` methods marked internal.\n\nThe `OraclePlatform::getCreateAutoincrementSql()` and `::getDropAutoincrementSql()` have been marked internal.\n\n## Deprecated `OraclePlatform::assertValidIdentifier()`\n\nThe `OraclePlatform::assertValidIdentifier()` method has been deprecated.\n\n## Deprecated features of `Table::getColumns()`\n\n1. Using the returned array keys as column names is deprecated. Retrieve the name from the column\n   via `Column::getName()` instead. In order to retrieve a column by name, use `Table::getColumn()`.\n2. Relying on the columns being sorted based on whether they belong to the primary key or a foreign key is deprecated.\n   If necessary, maintain the column order explicitly.\n\n## Deprecated not passing the `$fromColumn` argument to the `ColumnDiff` constructor.\n\nNot passing the `$fromColumn` argument to the `ColumnDiff` constructor is deprecated.\n\n## Deprecated `AbstractPlatform::getName()`\n\nRelying on the name of the platform is discouraged. To identify the platform, use its class name.\n\n## Deprecated versioned platform classes that represent the lowest supported version:\n\n1. `PostgreSQL94Platform` and `PostgreSQL94Keywords`. Use `PostgreSQLPlatform` and `PostgreSQLKeywords` instead.\n2. `SQLServer2012Platform` and `SQLServer2012Keywords`. Use `SQLServerPlatform` and `SQLServerKeywords` instead.\n\n## Deprecated schema comparison APIs that don't account for the current database connection and the database platform\n\n1. Instantiation of the `Comparator` class outside the DBAL is deprecated. Use `SchemaManager::createComparator()`\n   to create the comparator specific to the current database connection and the database platform.\n2. The `Schema::getMigrateFromSql()` and `::getMigrateToSql()` methods are deprecated. Compare the schemas using the\n   connection-aware comparator and produce the SQL by passing the resulting diff to the target platform.\n\n## Deprecated driver-level APIs that don't take the server version into account.\n\nThe `ServerInfoAwareConnection` and `VersionAwarePlatformDriver` interfaces are deprecated. In the next major version,\nall drivers and driver connections will be required to implement the APIs aware of the server version.\n\n## Deprecated `AbstractPlatform::prefersIdentityColumns()`.\n\nWhether to use identity columns should be decided by the application developer. For example, based on the set\nof supported database platforms.\n\n## Deprecated `AbstractPlatform::getNowExpression()`.\n\nRelying on dates generated by the database is deprecated. Generate dates within the application.\n\n## Deprecated reference from `ForeignKeyConstraint` to its local (referencing) `Table`.\n\nReference from `ForeignKeyConstraint` to its local (referencing) `Table` is deprecated as well as the following methods:\n\n- `setLocalTable()`,\n- `getLocalTable()`,\n- `getLocalTableName()`.\n\nWhen a foreign key is used as part of the `Table` definition, the table should be used directly. When a foreign key is\nused as part of another collection (e.g. `SchemaDiff`), the collection should store the reference to the key's\nreferencing table separately.\n\n## Deprecated redundant `AbstractPlatform` methods.\n\nThe following methods implement simple SQL fragments that don't vary across supported platforms. The SQL fragments\nimplemented by these methods should be used as is:\n\n- `getSqlCommentStartString()`,\n- `getSqlCommentEndString()`,\n- `getWildcards()`,\n- `getAvgExpression()`,\n- `getCountExpression()`,\n- `getMaxExpression()`,\n- `getMinExpression()`,\n- `getSumExpression()`,\n- `getMd5Expression()`,\n- `getSqrtExpression()`,\n- `getRoundExpression()`,\n- `getRtrimExpression()`,\n- `getLtrimExpression()`,\n- `getUpperExpression()`,\n- `getLowerExpression()`,\n- `getNotExpression()`,\n- `getIsNullExpression()`,\n- `getIsNotNullExpression()`,\n- `getBetweenExpression()`,\n- `getAcosExpression()`,\n- `getSinExpression()`,\n- `getPiExpression()`,\n- `getCosExpression()`,\n- `getTemporaryTableSQL()`,\n- `getUniqueFieldDeclarationSQL()`.\n\nThe `getListUsersSQL()` method is not implemented by any of the supported platforms.\n\nThe following methods describe the features consistently implemented across all the supported platforms:\n\n- `supportsIndexes()`,\n- `supportsAlterTable()`,\n- `supportsTransactions()`,\n- `supportsPrimaryConstraints()`,\n- `supportsViews()`,\n- `supportsLimitOffset()`.\n\nAll 3rd-party platform implementations must implement the support for these features as well.\n\nThe `supportsGettingAffectedRows()` method describes a driver-level feature and does not belong to the Platform API.\n\n## Deprecated `AbstractPlatform` methods that describe the default and the maximum column lengths.\n\nRelying on the default and the maximum column lengths provided by the DBAL is deprecated.\nThe following `AbstractPlatform` methods and their implementations in specific platforms have been deprecated:\n\n- `getCharMaxLength()`,\n- `getVarcharDefaultLength()`,\n- `getVarcharMaxLength()`,\n- `getBinaryDefaultLength()`,\n- `getBinaryMaxLength()`.\n\nIf required by the target platform(s), the column length should be specified based on the application logic.\n\n## Deprecated static calls to `Comparator::compareSchemas($fromSchema, $toSchema)`\n\nThe usage of `Comparator::compareSchemas($fromSchema, $toSchema)` statically is\ndeprecated in order to provide a more consistent API.\n\n## Deprecated `Comparator::compare($fromSchema, $toSchema)`\n\nThe usage of `Comparator::compare($fromSchema, $toSchema)` is deprecated and\nreplaced by `Comparator::compareSchemas($fromSchema, $toSchema)` in order to\nclarify the purpose of the method.\n\n## Deprecated `Connection::lastInsertId($name)`\n\nThe usage of `Connection::lastInsertId()` with a sequence name is deprecated as unsafe in scenarios with multiple\nconcurrent connections. If a newly inserted row needs to be referenced, it is recommended to generate its identifier\nexplicitly prior to insertion.\n\n## Introduction of PSR-6 for result caching\n\nInstead of relying on the deprecated `doctrine/cache` library, a PSR-6 cache\ncan now be used for result caching. The usage of Doctrine Cache is deprecated\nin favor of PSR-6. The following methods related to Doctrine Cache have been\nreplaced with PSR-6 counterparts:\n\n| class               | old method               | new method         |\n| ------------------- | ------------------------ | ------------------ |\n| `Configuration`     | `setResultCacheImpl()`   | `setResultCache()` |\n| `Configuration`     | `getResultCacheImpl()`   | `getResultCache()` |\n| `QueryCacheProfile` | `setResultCacheDriver()` | `setResultCache()` |\n| `QueryCacheProfile` | `getResultCacheDriver()` | `getResultCache()` |\n\n# Upgrade to 3.1\n\n## Deprecated schema- and namespace-related methods\n\nThe usage of the following schema- and namespace-related methods is deprecated:\n\n- `AbstractPlatform::getListNamespacesSQL()`,\n- `AbstractSchemaManager::listNamespaceNames()`,\n- `AbstractSchemaManager::getPortableNamespacesList()`,\n- `AbstractSchemaManager::getPortableNamespaceDefinition()`,\n- `PostgreSQLSchemaManager::getSchemaNames()`.\n\nUse `AbstractSchemaManager::listSchemaNames()` instead.\n\n## `PostgreSQLSchemaManager` methods marked internal.\n\n`PostgreSQLSchemaManager::getExistingSchemaSearchPaths()` and `::determineExistingSchemaSearchPaths()` have been marked internal.\n\n## `OracleSchemaManager` methods marked internal.\n\n`OracleSchemaManager::dropAutoincrement()` has been marked internal.\n\n## Deprecated `AbstractPlatform::getReservedKeywordsClass()`\n\nInstead of implementing `getReservedKeywordsClass()`, `AbstractPlatform` subclasses should implement\n`createReservedKeywordsList()`.\n\n## Deprecated `ReservedWordsCommand::setKeywordListClass()`\n\nThe usage of `ReservedWordsCommand::setKeywordListClass()` has been deprecated. To add or replace a keyword list,\nuse `setKeywordList()` instead.\n\n## Deprecated `$driverOptions` argument of `PDO\\Statement::bindParam()` and `PDO\\SQLSrv\\Statement::bindParam()`\n\nThe usage of the `$driverOptions` argument of `PDO\\Statement::bindParam()` and `PDO\\SQLSrv\\Statement::bindParam()` is deprecated.\nTo define parameter binding type as `ASCII`, `BINARY` or `BLOB`, use the corresponding `ParameterType::*` constant.\n\n## Deprecated `Connection::$_schemaManager` and `Connection::getSchemaManager()`\n\nThe usage of `Connection::$_schemaManager` and `Connection::getSchemaManager()` is deprecated.\nUse `Connection::createSchemaManager()` instead.\n\n## Deprecated `Connection::$_expr` and `Connection::getExpressionBuilder()`\n\nThe usage of `Connection::$_expr` and `Connection::getExpressionBuilder()` is deprecated.\nUse `Connection::createExpressionBuilder()` instead.\n\n## Deprecated `QueryBuilder::execute()`\n\nThe usage of `QueryBuilder::execute()` is deprecated. Use either `QueryBuilder::executeQuery()` or\n`QueryBuilder::executeStatement()`, depending on whether the queryBuilder is a query (SELECT) or a statement (INSERT,\nUPDATE, DELETE).\n\nYou might also consider the use of the new shortcut methods, such as:\n\n- `fetchAllAssociative()`\n- `fetchAllAssociativeIndexed()`\n- `fetchAllKeyValue()`\n- `fetchAllNumeric()`\n- `fetchAssociative()`\n- `fetchFirstColumn()`\n- `fetchNumeric()`\n- `fetchOne()`\n\n# Upgrade to 3.0\n\n## BC BREAK: leading colon in named parameter names not supported\n\nThe usage of the colon prefix when binding named parameters is no longer supported.\n\n## BC BREAK `Doctrine\\DBAL\\Abstraction\\Result` removed\n\nThe `Doctrine\\DBAL\\Abstraction\\Result` interface is removed. Use the `Doctrine\\DBAL\\Result` class instead.\n\n## BC BREAK: `Doctrine\\DBAL\\Types\\Type::getDefaultLength()` removed\n\nThe `Doctrine\\DBAL\\Types\\Type::getDefaultLength()` method has been removed as it served no purpose.\n\n## BC BREAK: `Doctrine\\DBAL\\DBALException` class renamed\n\nThe `Doctrine\\DBAL\\DBALException` class has been renamed to `Doctrine\\DBAL\\Exception`.\n\n## BC BREAK: `Doctrine\\DBAL\\Schema\\Table` constructor new parameter\n\nDeprecated parameter `$idGeneratorType` removed and added a new parameter `$uniqueConstraints`.\nConstructor changed like so:\n\n```diff\n- __construct($name, array $columns = [], array $indexes = [], array $fkConstraints = [], $idGeneratorType = 0, array $options = [])\n+ __construct($name, array $columns = [], array $indexes = [], array $uniqueConstraints = [], array $fkConstraints = [], array $options = [])\n```\n\n## BC BREAK: change in the behavior of `SchemaManager::dropDatabase()`\n\nWhen dropping a database, the DBAL no longer attempts to kill the client sessions that use the database.\nIt's the responsibility of the operator to make sure that the database is not being used.\n\n## BC BREAK: removed `Synchronizer` package\n\nThe `Doctrine\\DBAL\\Schema\\Synchronizer\\SchemaSynchronizer` interface and all its implementations have been removed.\n\n## BC BREAK: removed wrapper `Connection` methods\n\nThe following methods of the `Connection` class have been removed:\n\n1. `query()`.\n2. `exec()`.\n3. `executeUpdate()`.\n\n## BC BREAK: Changes in the wrapper-level API ancestry\n\nThe wrapper-level `Connection` and `Statement` classes no longer implement the corresponding driver-level interfaces.\n\n## BC BREAK: Removed `DBALException` factory methods\n\nThe following factory methods of the `DBALException` class have been removed:\n\n1. `DBALException::invalidPlatformSpecified()`.\n2. `DBALException::invalidPdoInstance()`.\n\n## BC BREAK: PDO-based driver classes are moved under the `PDO` namespace\n\nThe following classes have been renamed:\n\n- `PDOMySql\\Driver` → `PDO\\MySQL\\Driver`\n- `PDOOracle\\Driver` → `PDO\\OCI\\Driver`\n- `PDOPgSql\\Driver` → `PDO\\PgSQL\\Driver`\n- `PDOSqlite\\Driver` → `PDO\\SQLite\\Driver`\n- `PDOSqlsrv\\Driver` → `PDO\\SQLSrv\\Driver`\n- `PDOSqlsrv\\Connection` → `PDO\\SQLSrv\\Connection`\n- `PDOSqlsrv\\Statement` → `PDO\\SQLSrv\\Statement`\n\n## BC BREAK: Changes schema manager instantiation.\n\n1. The `$platform` argument of all schema manager constructors is no longer optional.\n2. A new `$platform` argument has been added to the `Driver::getSchemaManager()` method.\n\n## BC BREAK: Changes in driver classes\n\n1. All implementations of the `Driver` interface have been made final.\n2. The `PDO\\Connection` and `PDO\\Statement` classes have been made final.\n3. The `PDOSqlsrv\\Connection` and `PDOSqlsrv\\Statement` classes have been made final and no longer extend the corresponding PDO classes.\n4. The `SQLSrv\\LastInsertId` class has been made final.\n\n## BC BREAK: Changes in wrapper-level exceptions\n\n`DBALException::invalidTableName()` has been replaced with the `InvalidTableName` class.\n\n## BC BREAK: Changes in driver-level exception handling\n\n1. The `convertException()` method has been removed from the `Driver` interface. The logic of exception conversion has been moved to the `ExceptionConverter` interface. The drivers now must implement the `getExceptionConverter()` method.\n2. The `driverException()` and `driverExceptionDuringQuery()` factory methods have been removed from the `DBALException` class.\n3. Non-driver exceptions (e.g. exceptions of type `Error`) are no longer wrapped in a `DBALException`.\n\n## BC BREAK: More driver-level methods are allowed to throw a `Driver\\Exception`.\n\nThe following driver-level methods are allowed to throw a `Driver\\Exception`:\n\n- `Connection::prepare()`\n- `Connection::lastInsertId()`\n- `Connection::beginTransaction()`\n- `Connection::commit()`\n- `Connection::rollBack()`\n- `ServerInfoAwareConnection::getServerVersion()`\n- `Statement::bindParam()`\n- `Statement::bindValue()`\n- `Result::rowCount()`\n- `Result::columnCount()`\n\nThe driver-level implementations of `Connection::query()` and `Connection::exec()` may no longer throw a `DBALException`.\n\n## The `ExceptionConverterDriver` interface is removed\n\nAll drivers must implement the `convertException()` method which is now part of the `Driver` interface.\n\n## The `PingableConnection` interface is removed\n\nThe functionality of pinging the server is no longer supported. Lost\nconnections are now automatically reconnected by Doctrine internally.\n\n## BC BREAK: Deprecated driver-level classes and interfaces are removed.\n\n- `AbstractDriverException`\n- `DriverException`\n- `PDOConnection`\n- `PDOException`\n- `PDOStatement`\n- `IBMDB2\\DB2Connection`\n- `IBMDB2\\DB2Driver`\n- `IBMDB2\\DB2Exception`\n- `IBMDB2\\DB2Statement`\n- `Mysqli\\MysqliConnection`\n- `Mysqli\\MysqliException`\n- `Mysqli\\MysqliStatement`\n- `OCI8\\OCI8Connection`\n- `OCI8\\OCI8Exception`\n- `OCI8\\OCI8Statement`\n- `SQLSrv\\SQLSrvConnection`\n- `SQLSrv\\SQLSrvException`\n- `SQLSrv\\SQLSrvStatement`\n\n## BC BREAK: `ServerInfoAwareConnection::requiresQueryForServerVersion()` is removed.\n\nThe `ServerInfoAwareConnection::requiresQueryForServerVersion()` method has been removed as an implementation detail which is the same for all supported drivers.\n\n## BC BREAK Changes in driver exceptions\n\n1. The `Doctrine\\DBAL\\Driver\\DriverException::getErrorCode()` method is removed. In order to obtain the driver error code, please use `::getCode()` or `::getSQLState()`.\n2. The value returned by `Doctrine\\DBAL\\Driver\\PDOException::getSQLState()` no longer falls back to the driver error code.\n\n## BC BREAK: Changes in `OracleSchemaManager::createDatabase()`\n\nThe `$database` argument is no longer nullable or optional.\n\n## BC BREAK: `Doctrine\\DBAL\\Types\\Type::__toString()` removed\n\nRelying on string representation was discouraged and has been removed.\n\n## BC BREAK: Changes in the `Doctrine\\DBAL\\Schema` API\n\n- Removed unused method `Doctrine\\DBAL\\Schema\\AbstractSchemaManager::_getPortableFunctionsList()`\n- Removed unused method `Doctrine\\DBAL\\Schema\\AbstractSchemaManager::_getPortableFunctionDefinition()`\n- Removed unused method `Doctrine\\DBAL\\Schema\\OracleSchemaManager::_getPortableFunctionDefinition()`\n- Removed unused method `Doctrine\\DBAL\\Schema\\SqliteSchemaManager::_getPortableTableIndexDefinition()`\n\n## BC BREAK: Removed support for DB-generated UUIDs\n\nThe support for DB-generated UUIDs was removed as non-portable.\nPlease generate UUIDs on the application side (e.g. using [ramsey/uuid](https://packagist.org/packages/ramsey/uuid)).\n\n## BC BREAK: Changes in the `Doctrine\\DBAL\\Connection` API\n\n- The following methods have been removed as leaking internal implementation details: `::getHost()`, `::getPort()`, `::getUsername()`, `::getPassword()`.\n\n## BC BREAK: Changes in the `Doctrine\\DBAL\\Event` API\n\n- `ConnectionEventArgs::getDriver()`, `::getDatabasePlatform()` and `::getSchemaManager()` methods have been removed. The connection information can be obtained from the connection which is available via `::getConnection()`.\n- `SchemaColumnDefinitionEventArgs::getDatabasePlatform()` and `SchemaIndexDefinitionEventArgs::getDatabasePlatform()` have been removed for the same reason as above.\n\n## BC BREAK: Changes in obtaining the currently selected database name\n\n- The `Doctrine\\DBAL\\Driver::getDatabase()` method has been removed. Please use `Doctrine\\DBAL\\Connection::getDatabase()` instead.\n- `Doctrine\\DBAL\\Connection::getDatabase()` will always return the name of the database currently connected to, regardless of the configuration parameters and will initialize a database connection if it's not yet established.\n- A call to `Doctrine\\DBAL\\Connection::getDatabase()`, when connected to an SQLite database, will no longer return the database file path.\n\n## BC BREAK: `Doctrine\\DBAL\\Driver::getName()` removed\n\nThe `Doctrine\\DBAL\\Driver::getName()` has been removed.\n\n## BC BREAK Removed previously deprecated features\n\n * Removed `json_array` type and all associated hacks.\n * Removed `Connection::TRANSACTION_*` constants.\n * Removed `AbstractPlatform::DATE_INTERVAL_UNIT_*` and `AbstractPlatform::TRIM_*` constants.\n * Removed `AbstractPlatform::getSQLResultCasing()`, `::prefersSequences()` and `::supportsForeignKeyOnUpdate()` methods.\n * Removed `PostgreSqlPlatform::getDisallowDatabaseConnectionsSQL()` and `::getCloseActiveDatabaseConnectionsSQL()` methods.\n * Removed `MysqlSessionInit` listener.\n * Removed `MySQLPlatform::getCollationFieldDeclaration()`.\n * Removed `AbstractPlatform::getIdentityColumnNullInsertSQL()`.\n * Removed `AbstractPlatform::fixSchemaElementName()`.\n * Removed `Table::addUnnamedForeignKeyConstraint()` and `Table::addNamedForeignKeyConstraint()`.\n * Removed `Table::renameColumn()`.\n * Removed `SQLParserUtils::getPlaceholderPositions()`.\n * Removed `LoggerChain::addLogger`.\n * Removed `AbstractSchemaManager::getFilterSchemaAssetsExpression()`, `Configuration::getFilterSchemaAssetsExpression()`\n   and `Configuration::getFilterSchemaAssetsExpression()`.\n * `SQLParserUtils::*_TOKEN` constants made private.\n\n## BC BREAK changes the `Driver::connect()` signature\n\nThe method no longer accepts the `$username`, `$password` and `$driverOptions` arguments. The corresponding values are expected to be passed as the `\"user\"`, `\"password\"` and `\"driver_options\"` keys of the `$params` argument respectively.\n\n## Removed `MasterSlaveConnection`\n\nThis class was deprecated in favor of `PrimaryReadReplicaConnection`\n\n## BC BREAK: Changes in the portability layer\n\n1. The platform-specific portability constants (`Portability\\Connection::PORTABILITY_{PLATFORM}`) were internal implementation details which are no longer relevant.\n2. The `Portability\\Connection` class no longer extends the DBAL `Connection`.\n3. The `Portability\\Class` class has been made final.\n\n## BC BREAK changes in fetching statement results\n\n1. The `Statement` interface no longer extends `ResultStatement`.\n2. The `ResultStatement` interface has been renamed to `Result`.\n3. Instead of returning `bool`, `Statement::execute()` now returns a `Result` that should be used for fetching the result data and metadata.\n4. The functionality previously available via `Statement::closeCursor()` is now available via `Result::free()`. The behavior of fetching data from a freed result is no longer portable. In this case, some drivers will return `false` while others may throw an exception.\n\nAdditional related changes:\n\n1. The `ArrayStatement` and `ResultCacheStatement` classes from the `Cache` package have been renamed to `ArrayResult` and  `CachingResult` respectively and marked `@internal`.\n\n## BC BREAK `Statement::rowCount()` is moved.\n\n`Statement::rowCount()` has been moved to the `ResultStatement` interface where it belongs by definition.\n\n## Removed `FetchMode` and the corresponding methods\n\n1. The `FetchMode` class and the `setFetchMode()` method of the `Connection` and `Statement` interfaces are removed.\n2. The `Statement::fetch()` method is replaced with `fetchNumeric()`, `fetchAssociative()` and `fetchOne()`.\n3. The `Statement::fetchAll()` method is replaced with `fetchAllNumeric()`, `fetchAllAssociative()` and `fetchColumn()`.\n4. The `Statement::fetchColumn()` method is replaced with `fetchOne()`.\n5. The `Connection::fetchArray()` and `fetchAssoc()` methods are replaced with `fetchNumeric()` and `fetchAssociative()` respectively.\n6. The `StatementIterator` class is removed. The usage of a `Statement` object as `Traversable` is no longer possible. Use `iterateNumeric()`, `iterateAssociative()` and `iterateColumn()` instead.\n7. Fetching data in mixed mode (former `FetchMode::MIXED`) is no longer possible.\n\n## BC BREAK: Dropped handling of one-based numeric arrays of parameters in `Statement::execute()`\n\nThe statement implementations no longer detect whether `$params` is a zero- or one-based array. A zero-based numeric array is expected.\n\n## BC BREAK `Statement::project()` has been removed\n\n- The `Statement::project()` method has been removed. Use `::executeQuery()` and fetch the data from the statement using one of the `Statement::fetch*()` methods instead.\n\n## BC BREAK `::errorCode()` and `::errorInfo()` removed from `Connection` and `Statement` APIs\n\nThe error information is available in `DriverException` thrown in case of an error.\n\n## BC BREAK: Dropped support for `FetchMode::CUSTOM_OBJECT` and `::STANDARD_OBJECT`\n\nInstead of fetching an object, fetch an array and map it to an object of the desired class.\n\n## BC BREAK: Dropped support for the `$columnIndex` argument in `ResultStatement::fetchColumn()`, other `ResultStatement::fetch*()` methods invoked with `FetchMode::COLUMN` and `Connection::fetchColumn()`.\n\nIn order to fetch a column with an index other than `0`, use `FetchMode::NUMERIC` and the array element with the corresponding index.\n\n## BC BREAK: Removed `EchoSQLLogger`\n\n`EchoSQLLogger` is no longer available as part of the package.\n\n## BC BREAK: Removed support for SQL Anywhere\n\nThe support for the SQL Anywhere database platform and the corresponding driver has been removed.\n\n## BC BREAK: Removed support for PostgreSQL 9.3 and older\n\nDBAL now requires PostgreSQL 9.4 or newer, support for unmaintained versions has been dropped.\nIf you are using any of the legacy versions, you have to upgrade to a newer PostgreSQL version (9.6+ is recommended).\n\nThe following classes have been removed:\n\n * `Doctrine\\DBAL\\Platforms\\PostgreSqlPlatform`\n * `Doctrine\\DBAL\\Platforms\\PostgreSQL91Platform`\n * `Doctrine\\DBAL\\Platforms\\PostgreSQL92Platform`\n * `Doctrine\\DBAL\\Platforms\\Keywords\\PostgreSQLKeywords`\n * `Doctrine\\DBAL\\Platforms\\Keywords\\PostgreSQL91Keywords`\n * `Doctrine\\DBAL\\Platforms\\Keywords\\PostgreSQL92Keywords`\n\n## BC BREAK: Removed support for MariaDB 10.0 and older\n\nDBAL now requires MariaDB 10.1 or newer, support for unmaintained versions has been dropped.\nIf you are using any of the legacy versions, you have to upgrade to a newer MariaDB version (10.1+ is recommended).\n\n## BC BREAK: The `ServerInfoAwareConnection` interface now extends `Connection`\n\nAll implementations of the `ServerInfoAwareConnection` interface have to implement the methods defined in the `Connection` interface as well.\n\n## BC BREAK: `VersionAwarePlatformDriver` interface now extends `Driver`\n\nAll implementations of the `VersionAwarePlatformDriver` interface have to implement the methods defined in the `Driver` interface as well.\n\n## BC BREAK: Removed `MsSQLKeywords` class\n\nThe `Doctrine\\DBAL\\Platforms\\MsSQLKeywords` class has been removed.\nPlease use `Doctrine\\DBAL\\Platforms\\SQLServerPlatform` instead.\n\n## BC BREAK: Removed PDO DB2 driver\n\nThis PDO-based IBM DB2 driver (built on top of `pdo_ibm` extension) has already been unsupported as of 2.5, it has been now removed.\n\nThe following class has been removed:\n\n * `Doctrine\\DBAL\\Driver\\PDOIbm\\Driver`\n\n## BC BREAK: Removed support for SQL Server 2008 and older\n\nDBAL now requires SQL Server 2012 or newer, support for unmaintained versions has been dropped.\nIf you are using any of the legacy versions, you have to upgrade to a newer SQL Server version.\n\nThe following classes have been removed:\n\n * `Doctrine\\DBAL\\Platforms\\SQLServerPlatform`\n * `Doctrine\\DBAL\\Platforms\\SQLServer2005Platform`\n * `Doctrine\\DBAL\\Platforms\\SQLServer2008Platform`\n * `Doctrine\\DBAL\\Platforms\\Keywords\\SQLServerKeywords`\n * `Doctrine\\DBAL\\Platforms\\Keywords\\SQLServer2005Keywords`\n * `Doctrine\\DBAL\\Platforms\\Keywords\\SQLServer2008Keywords`\n\nThe `AbstractSQLServerDriver` class and its subclasses no longer implement the `VersionAwarePlatformDriver` interface.\n\n## BC BREAK: Removed `Doctrine\\DBAL\\Version`\n\nThe `Doctrine\\DBAL\\Version` class is no longer available: please refrain from checking the DBAL version at runtime.\n\n## BC BREAK User-provided `PDO` instance is no longer supported\n\nIn order to share the same `PDO` instances between DBAL and other components, initialize the connection in DBAL and access it using `Connection::getWrappedConnection()->getWrappedConnection()`.\n\n## BC BREAK: the PDO symbols are no longer part of the DBAL API\n\n1. The support of `PDO::PARAM_*`, `PDO::FETCH_*`, `PDO::CASE_*` and `PDO::PARAM_INPUT_OUTPUT` constants in the DBAL API is removed.\n2. `\\Doctrine\\DBAL\\Driver\\PDOConnection` does not extend `\\PDO` anymore. Please use `\\Doctrine\\DBAL\\Driver\\PDOConnection::getWrappedConnection()` to access the underlying `PDO` object.\n3. `\\Doctrine\\DBAL\\Driver\\PDOStatement` does not extend `\\PDOStatement` anymore.\n\nBefore:\n\n```php\nuse Doctrine\\DBAL\\Portability\\Connection;\n\n$params = array(\n    'wrapperClass' => Connection::class,\n    'fetch_case' => PDO::CASE_LOWER,\n);\n\n$stmt->bindValue(1, 1, PDO::PARAM_INT);\n$stmt->fetchAll(PDO::FETCH_COLUMN);\n```\n\nAfter:\n\n```php\nuse Doctrine\\DBAL\\ColumnCase;\nuse Doctrine\\DBAL\\FetchMode;\nuse Doctrine\\DBAL\\ParameterType;\nuse Doctrine\\DBAL\\Portability\\Connection;\n\n$params = array(\n    'wrapperClass' => Connection::class,\n    'fetch_case' => ColumnCase::LOWER,\n);\n\n$stmt->bindValue(1, 1, ParameterType::INTEGER);\n$stmt->fetchAll(FetchMode::COLUMN);\n```\n\n## BC BREAK: Removed Drizzle support\n\nThe Drizzle project is abandoned and is therefore not supported by Doctrine DBAL anymore.\n\n## BC BREAK: Removed `dbal:import` CLI command\n\nThe `dbal:import` CLI command has been removed since it only worked with PDO-based drivers by relying on a non-documented behavior of the extension, and it was impossible to make it work with other drivers.\nPlease use other database client applications for import, e.g.:\n\n * For MySQL and MariaDB: `mysql [dbname] < data.sql`.\n * For PostgreSQL: `psql [dbname] < data.sql`.\n * For SQLite: `sqlite3 /path/to/file.db < data.sql`.\n\n## BC BREAK: Changed signature of `ExceptionConverter::convert()`\n\nBefore:\n\n```php\npublic function convert(string $message, Doctrine\\DBAL\\Driver\\Exception $exception): DriverException\n```\n\nAfter:\n\n```php\npublic function convert(Doctrine\\DBAL\\Driver\\Exception $exception, ?Doctrine\\DBAL\\Query $query): DriverException\n```\n\n## BC Break: The `DriverException` constructor is now internal\n\nThe constructor of `Doctrine\\DBAL\\Exception\\DriverException` is now `@internal`.\n\n## BC Break: `Configuration`\n\n- all `Configuration` methods are now typed\n- `Configuration::setSchemaAssetsFilter()` now returns `void`\n- `Configuration::$_attributes` has been removed; use individual properties in subclasses instead\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.111328125,
          "content": "{\n    \"name\": \"doctrine/dbal\",\n    \"type\": \"library\",\n    \"description\": \"Powerful PHP database abstraction layer (DBAL) with many features for database schema introspection and management.\",\n    \"keywords\": [\n        \"abstraction\",\n        \"database\",\n        \"dbal\",\n        \"db2\",\n        \"mariadb\",\n        \"mssql\",\n        \"mysql\",\n        \"pgsql\",\n        \"postgresql\",\n        \"oci8\",\n        \"oracle\",\n        \"pdo\",\n        \"queryobject\",\n        \"sasql\",\n        \"sql\",\n        \"sqlite\",\n        \"sqlserver\",\n        \"sqlsrv\"\n    ],\n    \"homepage\": \"https://www.doctrine-project.org/projects/dbal.html\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\"name\": \"Guilherme Blanco\", \"email\": \"guilhermeblanco@gmail.com\"},\n        {\"name\": \"Roman Borschel\", \"email\": \"roman@code-factory.org\"},\n        {\"name\": \"Benjamin Eberlei\", \"email\": \"kontakt@beberlei.de\"},\n        {\"name\": \"Jonathan Wage\", \"email\": \"jonwage@gmail.com\"}\n    ],\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"doctrine/deprecations\": \"^0.5.3|^1\",\n        \"psr/cache\": \"^1|^2|^3\",\n        \"psr/log\": \"^1|^2|^3\"\n    },\n    \"require-dev\": {\n        \"doctrine/coding-standard\": \"12.0.0\",\n        \"fig/log-test\": \"^1\",\n        \"jetbrains/phpstorm-stubs\": \"2023.2\",\n        \"phpstan/phpstan\": \"2.1.1\",\n        \"phpstan/phpstan-phpunit\": \"2.0.3\",\n        \"phpstan/phpstan-strict-rules\": \"^2\",\n        \"phpunit/phpunit\": \"10.5.39\",\n        \"psalm/plugin-phpunit\": \"0.19.0\",\n        \"slevomat/coding-standard\": \"8.13.1\",\n        \"squizlabs/php_codesniffer\": \"3.10.2\",\n        \"symfony/cache\": \"^6.3.8|^7.0\",\n        \"symfony/console\": \"^5.4|^6.3|^7.0\",\n        \"vimeo/psalm\": \"5.25.0\"\n    },\n    \"suggest\": {\n        \"symfony/console\": \"For helpful console commands such as SQL execution and import of files.\"\n    },\n    \"config\": {\n        \"sort-packages\": true,\n        \"allow-plugins\": {\n            \"dealerdirect/phpcodesniffer-composer-installer\": true,\n            \"composer/package-versions-deprecated\": true\n        }\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Doctrine\\\\DBAL\\\\\": \"src\" }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": { \"Doctrine\\\\DBAL\\\\Tests\\\\\": \"tests\" }\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpcs.xml.dist",
          "type": "blob",
          "size": 7.240234375,
          "content": "<?xml version=\"1.0\"?>\n<ruleset\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"vendor/squizlabs/php_codesniffer/phpcs.xsd\"\n>\n    <arg name=\"basepath\" value=\".\"/>\n    <arg name=\"extensions\" value=\"php\"/>\n    <arg name=\"parallel\" value=\"80\"/>\n    <arg name=\"cache\" value=\".phpcs-cache\"/>\n    <arg name=\"colors\"/>\n\n    <!-- Show progress of the run and show sniff names -->\n    <arg value=\"ps\"/>\n\n    <config name=\"php_version\" value=\"80100\"/>\n\n    <file>src</file>\n    <file>tests</file>\n\n    <rule ref=\"Doctrine\">\n        <exclude name=\"SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming\"/>\n        <exclude name=\"SlevomatCodingStandard.Classes.SuperfluousExceptionNaming\"/>\n        <exclude name=\"SlevomatCodingStandard.Classes.DisallowLateStaticBindingForConstants.DisallowedLateStaticBindingForConstant\"/>\n        <exclude name=\"SlevomatCodingStandard.ControlStructures.ControlStructureSpacing.IncorrectLinesCountAfterLastControlStructure\"/>\n        <!-- https://github.com/doctrine/coding-standard/issues/288 -->\n        <exclude name=\"SlevomatCodingStandard.TypeHints.UnionTypeHintFormat.DisallowedShortNullable\"/>\n\n        <exclude name=\"PSR2.Methods.MethodDeclaration.Underscore\"/>\n        <!-- https://github.com/slevomat/coding-standard/issues/867 -->\n        <exclude name=\"SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing.IncorrectLinesCountAfterLastControlStructure\"/>\n        <!-- See https://github.com/squizlabs/PHP_CodeSniffer/issues/2937 -->\n        <exclude name=\"Squiz.Arrays.ArrayDeclaration.ValueNoNewline\"/>\n        <exclude name=\"Squiz.NamingConventions.ValidVariableName.PublicHasUnderscore\"/>\n    </rule>\n\n    <rule ref=\"PSR2.Classes.PropertyDeclaration.Underscore\">\n        <exclude-pattern>*/src/Configuration.php</exclude-pattern>\n        <exclude-pattern>*/src/Connection.php</exclude-pattern>\n        <exclude-pattern>*/src/Driver</exclude-pattern>\n        <exclude-pattern>*/src/Event/Listeners</exclude-pattern>\n        <exclude-pattern>*/src/Platforms</exclude-pattern>\n        <exclude-pattern>*/src/Schema</exclude-pattern>\n        <exclude-pattern>*/src/Tools/Console/Helper/ConnectionHelper.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly\">\n        <!-- ext-sqlite3 throws generic exceptions. -->\n        <!-- Catching \\Exception is legit here, and we don't want to widen types to \\Throwable. -->\n        <exclude-pattern>src/Driver/SQLite3/*</exclude-pattern>\n\n        <!-- Catching \\Exception is legit for `\\DateTime::__construct()`. -->\n        <exclude-pattern>src/Types/DateTimeType.php</exclude-pattern>\n        <exclude-pattern>src/Types/VarDateTimeType.php</exclude-pattern>\n\n        <!-- Catching \\Exception is legit for `\\DateTimeImmutable::__construct()`. -->\n        <exclude-pattern>src/Types/DateTimeImmutableType.php</exclude-pattern>\n        <exclude-pattern>src/Types/VarDateTimeImmutableType.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"PSR1.Classes.ClassDeclaration.MultipleClasses\">\n        <exclude-pattern>*/tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.PHP.RequireExplicitAssertion.RequiredExplicitAssertion\">\n        <exclude-pattern>tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Squiz.Classes.ClassFileName.NoMatch\">\n        <exclude-pattern>*/tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Generic.NamingConventions.UpperCaseConstantName.ClassConstantNotUpperCase\">\n        <exclude-pattern>src/Events.php</exclude-pattern>\n    </rule>\n\n    <!-- see https://github.com/squizlabs/PHP_CodeSniffer/issues/2099 -->\n    <rule ref=\"Squiz.Commenting.FunctionComment.InvalidNoReturn\">\n        <exclude-pattern>src/Platforms/AbstractPlatform.php</exclude-pattern>\n        <exclude-pattern>src/Schema/AbstractSchemaManager.php</exclude-pattern>\n        <exclude-pattern>tests/Platforms/AbstractPlatformTestCase.php</exclude-pattern>\n    </rule>\n\n    <!-- see https://github.com/squizlabs/PHP_CodeSniffer/issues/2838 -->\n    <rule ref=\"Squiz.Commenting.FunctionComment.SpacingAfter\">\n        <exclude-pattern>src/Driver/AbstractMySQLDriver.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Squiz.NamingConventions.ValidVariableName.MemberNotCamelCaps\">\n        <exclude-pattern>tests/Functional/DataAccess/FetchClass.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Squiz.NamingConventions.ValidVariableName.MemberNotCamelCaps\">\n        <!--\n            These files use the underlying driver APIs that don't comply with the coding standard\n            phpcs wrongly complains about them, and that has been reported here:\n            https://github.com/squizlabs/PHP_CodeSniffer/issues/2950\n        -->\n        <exclude-pattern>src/Driver/IBMDB2/Connection.php</exclude-pattern>\n        <exclude-pattern>src/Driver/Mysqli/Exception/ConnectionFailed.php</exclude-pattern>\n        <exclude-pattern>tests/Functional/Driver/Mysqli/ResultTest.php</exclude-pattern>\n    </rule>\n\n    <!-- See https://github.com/squizlabs/PHP_CodeSniffer/issues/2837 -->\n    <rule ref=\"Squiz.NamingConventions.ValidVariableName.NotCamelCaps\">\n        <exclude-pattern>src/Connection.php</exclude-pattern>\n        <exclude-pattern>src/Schema/Comparator.php</exclude-pattern>\n        <exclude-pattern>src/SQLParserUtils.php</exclude-pattern>\n    </rule>\n\n    <!-- some statement classes close cursor using an empty while-loop -->\n    <rule ref=\"Generic.CodeAnalysis.EmptyStatement.DetectedWhile\">\n        <exclude-pattern>src/Driver/SQLSrv/Result.php</exclude-pattern>\n        <exclude-pattern>tests/Functional/ResultCacheTest.php</exclude-pattern>\n    </rule>\n\n    <!-- See https://github.com/slevomat/coding-standard/issues/770 -->\n    <rule ref=\"SlevomatCodingStandard.Namespaces.UnusedUses\">\n        <exclude-pattern>src/Driver/ExceptionConverterDriver.php</exclude-pattern>\n        <exclude-pattern>src/Query/QueryBuilder.php</exclude-pattern>\n    </rule>\n\n    <!-- see https://github.com/doctrine/dbal/issues/3377 -->\n    <rule ref=\"SlevomatCodingStandard.Operators.DisallowEqualOperators.DisallowedNotEqualOperator\">\n        <exclude-pattern>src/Schema/ColumnDiff.php</exclude-pattern>\n    </rule>\n\n    <!-- The SQLSRV_* functions are defined in the upper case by the sqlsrv extension and violate the standard\n         see https://docs.microsoft.com/en-us/sql/connect/php/constants-microsoft-drivers-for-php-for-sql-server -->\n    <rule ref=\"Squiz.PHP.LowercasePHPFunctions\">\n        <exclude-pattern>src/Driver/SQLSrv/Statement.php</exclude-pattern>\n    </rule>\n\n    <!-- This could be considered a bug in the sniff or the shortcoming of the Platform API design\n         see https://github.com/squizlabs/PHP_CodeSniffer/issues/3035 -->\n    <rule ref=\"Generic.CodeAnalysis.UselessOverridingMethod.Found\">\n        <exclude-pattern>src/Platforms/SQLitePlatform.php</exclude-pattern>\n        <exclude-pattern>src/Platforms/*/Comparator.php</exclude-pattern>\n        <exclude-pattern>src/Driver/PDO/SQLSrv/Connection.php</exclude-pattern>\n        <exclude-pattern>src/Driver/PDO/SQLSrv/Statement.php</exclude-pattern>\n    </rule>\n\n    <!-- This issue is likely fixed in Slevomat Coding Standard 8.0.0 -->\n    <rule ref=\"SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly.ReferenceViaFallbackGlobalName\">\n        <exclude-pattern>src/ParameterType.php</exclude-pattern>\n    </rule>\n</ruleset>\n"
        },
        {
          "name": "phpstan-baseline.neon",
          "type": "blob",
          "size": 3.8037109375,
          "content": "parameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\DBAL\\\\Driver\\\\IBMDB2\\\\Connection\\:\\:exec\\(\\) never returns numeric\\-string so it can be removed from the return type\\.$#'\n\t\t\tidentifier: return.unusedType\n\t\t\tcount: 1\n\t\t\tpath: src/Driver/IBMDB2/Connection.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\DBAL\\\\Driver\\\\OCI8\\\\Connection\\:\\:exec\\(\\) never returns numeric\\-string so it can be removed from the return type\\.$#'\n\t\t\tidentifier: return.unusedType\n\t\t\tcount: 1\n\t\t\tpath: src/Driver/OCI8/Connection.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\DBAL\\\\Driver\\\\OCI8\\\\Result\\:\\:fetchAllAssociative\\(\\) should return list\\<array\\<string, mixed\\>\\> but returns array\\<mixed\\>\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Driver/OCI8/Result.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\DBAL\\\\Driver\\\\OCI8\\\\Result\\:\\:fetchAllNumeric\\(\\) should return list\\<list\\<mixed\\>\\> but returns array\\<mixed\\>\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Driver/OCI8/Result.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\DBAL\\\\Driver\\\\PDO\\\\Result\\:\\:fetchAll\\(\\) should return list\\<mixed\\> but returns array\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Driver/PDO/Result.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\DBAL\\\\Driver\\\\PgSQL\\\\Result\\:\\:fetchAllAssociative\\(\\) should return list\\<array\\<string, mixed\\>\\> but returns array\\<int, array\\<string, mixed\\>\\>\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Driver/PgSQL/Result.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\DBAL\\\\Driver\\\\PgSQL\\\\Result\\:\\:fetchAllNumeric\\(\\) should return list\\<list\\<mixed\\>\\> but returns array\\<int, list\\<mixed\\>\\>\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Driver/PgSQL/Result.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\DBAL\\\\Driver\\\\PgSQL\\\\Result\\:\\:fetchFirstColumn\\(\\) should return list\\<mixed\\> but returns array\\<int, bool\\|float\\|int\\|string\\|null\\>\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Driver/PgSQL/Result.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\DBAL\\\\Driver\\\\SQLite3\\\\Result\\:\\:fetchNumeric\\(\\) should return list\\<mixed\\>\\|false but returns array\\|false\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Driver/SQLite3/Result.php\n\n\t\t-\n\t\t\tmessage: '#^Template type T is declared as covariant, but occurs in invariant position in property Doctrine\\\\DBAL\\\\Schema\\\\AbstractSchemaManager\\:\\:\\$platform\\.$#'\n\t\t\tidentifier: generics.variance\n\t\t\tcount: 1\n\t\t\tpath: src/Schema/AbstractSchemaManager.php\n\n\t\t-\n\t\t\tmessage: '#^Loose comparison via \"\\!\\=\" is not allowed\\.$#'\n\t\t\tidentifier: notEqual.notAllowed\n\t\t\tcount: 1\n\t\t\tpath: src/Schema/ColumnDiff.php\n\n\t\t-\n\t\t\tmessage: '#^Method Doctrine\\\\DBAL\\\\Schema\\\\SQLiteSchemaManager\\:\\:addDetailsToTableForeignKeyColumns\\(\\) should return list\\<array\\<string, mixed\\>\\> but returns array\\<int\\<0, max\\>, array\\<string, mixed\\>\\>\\.$#'\n\t\t\tidentifier: return.type\n\t\t\tcount: 1\n\t\t\tpath: src/Schema/SQLiteSchemaManager.php\n\n\t\t-\n\t\t\tmessage: '#^Offset string might not exist on array\\{application_name\\?\\: string, charset\\?\\: string, dbname\\?\\: string, defaultTableOptions\\?\\: array\\<string, mixed\\>, driver\\?\\: ''ibm_db2''\\|''mysqli''\\|''oci8''\\|''pdo_mysql''\\|''pdo_oci''\\|''pdo_pgsql''\\|''pdo_sqlite''\\|''pdo_sqlsrv''\\|''pgsql''\\|''sqlite3''\\|''sqlsrv'', driverClass\\?\\: class\\-string\\<Doctrine\\\\DBAL\\\\Driver\\>, driverOptions\\?\\: array\\<mixed\\>, host\\?\\: string, \\.\\.\\.\\}\\.$#'\n\t\t\tidentifier: offsetAccess.notFound\n\t\t\tcount: 1\n\t\t\tpath: tests/DriverManagerTest.php\n\n\t\t-\n\t\t\tmessage: '#^Call to new Doctrine\\\\DBAL\\\\Driver\\\\PgSQL\\\\Result\\(\\) on a separate line has no effect\\.$#'\n\t\t\tidentifier: new.resultUnused\n\t\t\tcount: 1\n\t\t\tpath: tests/Functional/Driver/PgSQL/ResultTest.php\n\n\t\t-\n\t\t\tmessage: '#^Call to function array_filter\\(\\) requires parameter \\#2 to be passed to avoid loose comparison semantics\\.$#'\n\t\t\tidentifier: arrayFilter.strict\n\t\t\tcount: 1\n\t\t\tpath: tests/Functional/Schema/MySQL/JsonCollationTest.php\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 4.9658203125,
          "content": "parameters:\n    level: 8\n    phpVersion: 80402\n    paths:\n        - src\n        - static-analysis\n        - tests\n    treatPhpDocTypesAsCertain: false\n    reportUnmatchedIgnoredErrors: false\n    ignoreErrors:\n        - identifier: missingType.generics\n\n        # https://github.com/phpstan/phpstan-strict-rules/issues/103\n        -\n            message: '~^Construct empty\\(\\) is not allowed. Use more strict comparison\\.~'\n            paths:\n                - src/Connections/PrimaryReadReplicaConnection.php\n                - src/Driver/*/Driver.php\n                - src/Driver/AbstractOracleDriver/EasyConnectString.php\n                - src/Platforms/*Platform.php\n                - src/Schema/*SchemaManager.php\n                - tests/TestUtil.php\n\n        # In some namespaces, we use array<string,mixed>, some elements of which are actually boolean\n        -\n            message: '~^Only booleans are allowed in .*, mixed given~'\n            paths:\n                - src/Platforms/*Platform.php\n                - src/Schema/*SchemaManager.php\n\n        # Some APIs use variable method calls internally\n        -\n            message: '~^Variable method call on .*~'\n            paths:\n                - src/Schema/Column.php\n\n        # TODO: remove this once the support for PHP 7 is dropped\n        -\n            message: '~^Strict comparison using !== between int and false will always evaluate to true\\.$~'\n            paths:\n                - src/Driver/OCI8/Result.php\n        -\n            message: '~^Unreachable statement - code above always terminates\\.$~'\n            paths:\n                - src/Driver/OCI8/Result.php\n\n        # https://github.com/phpstan/phpstan/issues/4679\n        -\n            message: '~^Cannot call method writeTemporary\\(\\) on OCILob\\|null\\.$~'\n            paths:\n                - src/Driver/OCI8/Statement.php\n\n        # We're testing with invalid input.\n        -\n            message: '~array{driver: ''invalid_driver''} given\\.$~'\n            path: tests/DriverManagerTest.php\n        -\n            message: '~array{driver: ''pdo_sqlite'', memory: true, wrapperClass: ''stdClass''} given\\.$~'\n            path: tests/DriverManagerTest.php\n        -\n            message: '~array{driverClass: ''stdClass''} given\\.$~'\n            path: tests/DriverManagerTest.php\n        -\n            message: '~^Parameter #1 \\$driverOptions of method Doctrine\\\\DBAL\\\\Tests\\\\Functional\\\\Driver\\\\Mysqli\\\\ConnectionTest\\:\\:getConnection\\(\\) expects array<string, mixed>, .* given\\.$~'\n            path: tests/Functional/Driver/Mysqli/ConnectionTest.php\n        -\n            message: '~^Parameter #1 \\$params of method Doctrine\\\\DBAL\\\\Driver\\:\\:connect\\(\\) expects array~'\n            path: tests/Driver/PDO/*/DriverTest.php\n\n        # There is no way to make this assertion in the code,\n        # and the API doesn't support parametrization of returned column types.\n        -\n            message: '~^Method Doctrine\\\\DBAL\\\\Schema\\\\PostgreSQLSchemaManager::fetchTableOptionsByTable\\(\\) should return array<string, array<string, mixed>> but returns array<int\\|string, array<string, mixed>>\\.$~'\n            paths:\n                - src/Schema/PostgreSQLSchemaManager.php\n\n        # We don't need to declare the return type *that* fine-grained.\n        - '~^Method Doctrine\\\\DBAL\\\\Driver\\\\PDO\\\\Statement\\:\\:convertParamType\\(\\) never returns \\d+ so it can be removed from the return type\\.$~'\n\n        # PHPStan does not understand the array shapes returned by pg_fetch_*() methods.\n        - '~^Parameter #1 \\$row of method Doctrine\\\\DBAL\\\\Driver\\\\PgSQL\\\\Result\\:\\:mapAssociativeRow\\(\\) expects array<string, string\\|null>, array<int\\|string, string\\|null> given\\.$~'\n        - '~^Parameter #1 \\$row of method Doctrine\\\\DBAL\\\\Driver\\\\PgSQL\\\\Result\\:\\:mapNumericRow\\(\\) expects list<string\\|null>, .* given\\.$~'\n\n        # Required for Psalm compatibility\n        - '~^Property Doctrine\\\\DBAL\\\\Tests\\\\Types\\\\BaseDateTypeTestCase\\:\\:\\$currentTimezone \\(non-empty-string\\) does not accept string\\.$~'\n\n        # The @throws annotations are part of a contract. Even if the default implementation doen't throw those\n        # exceptions, the child implementations might do so.\n        -\n            identifier: throws.unusedType\n            path: src/Types/Type.php\n\n        # We don't narrow the return type of lastInsertId() yet.\n        - '/^Method Doctrine\\\\DBAL\\\\Driver\\\\.+\\\\Connection\\:\\:lastInsertId\\(\\) never returns (int|false) so it can be removed from the return type\\.$/'\n\n        # Type check for legacy implementations of the Result interface\n        # TODO: remove in 5.0.0\n        - '~^Call to function method_exists\\(\\) with Doctrine\\\\DBAL\\\\Driver\\\\Result and ''getColumnName'' will always evaluate to true\\.$~'\n\n        # TODO: Review these errors and fix them.\n        - identifier: phpunit.assertEquals\nincludes:\n    - phpstan-baseline.neon\n    - phar://phpstan.phar/conf/bleedingEdge.neon\n    - vendor/phpstan/phpstan-phpunit/extension.neon\n    - vendor/phpstan/phpstan-phpunit/rules.neon\n    - vendor/phpstan/phpstan-strict-rules/rules.neon\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 1.5419921875,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--\n    Use this configuration file as a template to run the tests against any dbms.\n    Procedure:\n        1) Save a copy of this file with a name of your choosing. It doesn't matter\n           where you place it as long as you know where it is.\n           i.e. \"mysqlconf.xml\" (It needs the ending .xml).\n        2) Edit the file and fill in your settings (database name, type, username, etc.)\n           Just change the \"value\"s, not the names of the var elements.\n        3) To run the tests against the database type the following from within the\n           tests/ folder: phpunit -c <filename> ...\n           Example: phpunit -c mysqlconf.xml\n-->\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n         colors=\"true\"\n         beStrictAboutOutputDuringTests=\"true\"\n         failOnRisky=\"true\"\n         failOnWarning=\"true\"\n>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\" />\n\n        <!--\n            By default, the tests are run against SQLite.\n            If you want to run them against another DBMS,\n            see https://www.doctrine-project.org/projects/doctrine-dbal/en/stable/reference/testing.html#running-integration-tests-locally\n        -->\n    </php>\n\n    <testsuites>\n        <testsuite name=\"Doctrine DBAL Test Suite\">\n            <directory>tests</directory>\n        </testsuite>\n    </testsuites>\n\n    <source>\n        <include>\n            <directory>src</directory>\n        </include>\n    </source>\n</phpunit>\n"
        },
        {
          "name": "psalm-strict.xml",
          "type": "blob",
          "size": 0.7919921875,
          "content": "<?xml version=\"1.0\"?>\n<psalm\n    errorLevel=\"1\"\n    phpVersion=\"8.1\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"https://getpsalm.org/schema/config\"\n    xsi:schemaLocation=\"https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd\"\n>\n    <projectFiles>\n        <directory name=\"static-analysis\" />\n        <ignoreFiles>\n            <directory name=\"src\" />\n            <directory name=\"vendor\" />\n        </ignoreFiles>\n    </projectFiles>\n    <issueHandlers>\n        <NoValue>\n            <errorLevel type=\"suppress\">\n                <!--\n                    This error looks bogus.\n                -->\n                <file name=\"static-analysis/driver-manager-retrieves-correct-connection-type.php\"/>\n            </errorLevel>\n        </NoValue>\n    </issueHandlers>\n</psalm>\n"
        },
        {
          "name": "psalm.xml.dist",
          "type": "blob",
          "size": 17.1279296875,
          "content": "<?xml version=\"1.0\"?>\n<psalm\n    errorLevel=\"2\"\n    phpVersion=\"8.2\"\n    findUnusedBaselineEntry=\"false\"\n    findUnusedCode=\"false\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"https://getpsalm.org/schema/config\"\n    xsi:schemaLocation=\"https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd\"\n>\n    <projectFiles>\n        <directory name=\"src\" />\n        <directory name=\"static-analysis\" />\n        <directory name=\"tests\" />\n        <ignoreFiles>\n            <directory name=\"vendor\" />\n        </ignoreFiles>\n    </projectFiles>\n    <stubs>\n        <file name=\"vendor/jetbrains/phpstorm-stubs/PDO/PDO.php\" />\n        <file name=\"vendor/jetbrains/phpstorm-stubs/ibm_db2/ibm_db2.php\" />\n        <file name=\"vendor/jetbrains/phpstorm-stubs/mysqli/mysqli.php\" />\n        <file name=\"vendor/jetbrains/phpstorm-stubs/oci8/oci8.php\" />\n        <file name=\"vendor/jetbrains/phpstorm-stubs/sqlsrv/sqlsrv.php\" />\n    </stubs>\n    <issueHandlers>\n        <ArgumentTypeCoercion>\n            <!--\n                The actual return type of the driver functions or methods depends on the\n                values of the passed arguments, so it cannot be determined statically.\n            -->\n            <errorLevel type=\"suppress\">\n                <file name=\"src/Driver/PgSQL/Result.php\"/>\n            </errorLevel>\n        </ArgumentTypeCoercion>\n        <ConflictingReferenceConstraint>\n            <errorLevel type=\"suppress\">\n                <!--\n                    This one is just too convoluted for Psalm to figure out, by\n                    its author's own admission\n                -->\n                <file name=\"src/Driver/OCI8/ConvertPositionalToNamedPlaceholders.php\"/>\n            </errorLevel>\n        </ConflictingReferenceConstraint>\n        <DeprecatedClass>\n            <errorLevel type=\"suppress\">\n                <!--\n                    See https://github.com/doctrine/dbal/pull/6343\n                    TODO: remove in 5.0.0\n                -->\n                <referencedClass name=\"Doctrine\\DBAL\\Platforms\\Keywords\\MySQL80Keywords\" />\n                <referencedClass name=\"Doctrine\\DBAL\\Platforms\\MariaDB1052Platform\" />\n                <referencedClass name=\"Doctrine\\DBAL\\Platforms\\MySQL80Platform\" />\n                <referencedClass name=\"Doctrine\\DBAL\\Platforms\\PostgreSQL120Platform\" />\n            </errorLevel>\n        </DeprecatedClass>\n        <DeprecatedMethod>\n            <errorLevel type=\"suppress\">\n                <!--\n                    See https://github.com/doctrine/dbal/pull/6202\n                    TODO: remove in 4.0.0\n                -->\n                <referencedMethod name=\"Doctrine\\DBAL\\Schema\\TableDiff::getModifiedColumns\" />\n                <referencedMethod name=\"Doctrine\\DBAL\\Schema\\TableDiff::getRenamedColumns\" />\n                <referencedMethod name=\"Doctrine\\DBAL\\Platforms\\AbstractMySQLPlatform::getColumnTypeSQLSnippets\" />\n                <referencedMethod name=\"Doctrine\\DBAL\\Platforms\\AbstractMySQLPlatform::getDatabaseNameSQL\" />\n\n                <!-- TODO for PHPUnit 11 -->\n                <referencedMethod name=\"PHPUnit\\Framework\\TestCase::iniSet\"/>\n            </errorLevel>\n        </DeprecatedMethod>\n        <DocblockTypeContradiction>\n            <errorLevel type=\"suppress\">\n                <!--\n                    These issues can be mostly divided in the following categories:\n                      1. Union types not supported at the language level (require dropping PHP 7 support)\n                      2. Associative arrays with typed elements used instead of classes (require breaking API changes)\n                -->\n                <file name=\"src/Connection.php\"/>\n                <file name=\"src/Driver/IBMDB2/Statement.php\"/>\n                <directory name=\"src/Driver/PgSQL\"/>\n                <!--\n                    Requires a release of https://github.com/JetBrains/phpstorm-stubs/pull/1255\n                -->\n                <file name=\"src/Driver/PDO/Connection.php\"/>\n                <file name=\"src/DriverManager.php\"/>\n                <file name=\"src/Platforms/AbstractMySQLPlatform.php\"/>\n                <file name=\"src/Platforms/AbstractPlatform.php\"/>\n                <file name=\"src/Platforms/SQLServerPlatform.php\"/>\n                <file name=\"src/Platforms/SQLitePlatform.php\"/>\n                <file name=\"src/Schema/Column.php\"/>\n                <!-- See https://github.com/vimeo/psalm/issues/5472 -->\n                <file name=\"src/Portability/Converter.php\"/>\n                <!-- We're checking for invalid input -->\n                <file name=\"src/Configuration.php\"/>\n            </errorLevel>\n        </DocblockTypeContradiction>\n        <FalsableReturnStatement>\n            <errorLevel type=\"suppress\">\n                <!--\n                    Fixing these issues requires an API change\n                -->\n                <file name=\"src/Driver/PDO/SQLSrv/Connection.php\"/>\n                <file name=\"src/Driver/SQLSrv/Connection.php\"/>\n            </errorLevel>\n        </FalsableReturnStatement>\n        <ImpureMethodCall>\n            <errorLevel type=\"suppress\">\n                <!--\n                    Requires a release of\n                    https://github.com/vimeo/psalm/pull/3171\n                -->\n                <file name=\"src/Exception/DriverException.php\"/>\n            </errorLevel>\n        </ImpureMethodCall>\n        <ImplementedReturnTypeMismatch>\n            <errorLevel type=\"suppress\">\n                <!-- Fixing this issue requires an API change -->\n                <file name=\"src/Driver/OCI8/Connection.php\"/>\n            </errorLevel>\n        </ImplementedReturnTypeMismatch>\n        <InaccessibleProperty>\n            <errorLevel type=\"suppress\">\n                <!--\n                     Even though DateInterval properties are recommended to be considered as readonly,\n                     there is no way to initialize an inverted interval using the constructor.\n\n                     See: https://github.com/vimeo/psalm/pull/9895\n                -->\n                <file name=\"src/Types/DateIntervalType.php\"/>\n                <file name=\"tests/Types/DateIntervalTest.php\"/>\n            </errorLevel>\n        </InaccessibleProperty>\n        <InvalidCast>\n            <errorLevel type=\"suppress\">\n                <!-- See https://github.com/vimeo/psalm/issues/10995 -->\n                <file name=\"src/Types/BigIntType.php\"/>\n            </errorLevel>\n        </InvalidCast>\n        <InvalidArgument>\n            <errorLevel type=\"suppress\">\n                <!-- We're testing with invalid input here. -->\n                <file name=\"tests/Driver/PDO/*/DriverTest.php\"/>\n                <file name=\"tests/Functional/Driver/Mysqli/ConnectionTest.php\"/>\n                <file name=\"tests/Platforms/AbstractPlatformTestCase.php\"/>\n            </errorLevel>\n        </InvalidArgument>\n        <InvalidArrayOffset>\n            <errorLevel type=\"suppress\">\n                <!-- https://github.com/vimeo/psalm/issues/10213 -->\n                <file name=\"tests/Functional/BinaryDataAccessTest.php\"/>\n            </errorLevel>\n        </InvalidArrayOffset>\n        <InvalidDocblock>\n            <errorLevel type=\"suppress\">\n                <!-- See https://github.com/vimeo/psalm/issues/5472 -->\n                <file name=\"src/Portability/Converter.php\"/>\n            </errorLevel>\n        </InvalidDocblock>\n        <InvalidPropertyAssignmentValue>\n            <errorLevel type=\"suppress\">\n                <!-- Fixing this issue requires an API change -->\n                <file name=\"src/Driver/PDO/Exception.php\"/>\n            </errorLevel>\n        </InvalidPropertyAssignmentValue>\n        <LessSpecificReturnStatement>\n            <!--\n                The actual return type of the driver functions or methods depends on the\n                values of the passed arguments, so it cannot be determined statically.\n            -->\n            <errorLevel type=\"suppress\">\n                <file name=\"src/Driver/IBMDB2/Result.php\"/>\n                <file name=\"src/Driver/OCI8/Result.php\"/>\n                <file name=\"src/Driver/PDO/Result.php\"/>\n                <file name=\"src/Driver/PgSQL/Result.php\"/>\n                <file name=\"src/Driver/SQLite3/Result.php\"/>\n            </errorLevel>\n        </LessSpecificReturnStatement>\n        <MoreSpecificReturnType>\n            <errorLevel type=\"suppress\">\n                <!--\n                    The actual return type of the driver functions or methods depends on the\n                    values of the passed arguments, so it cannot be determined statically.\n                -->\n                <file name=\"src/Driver/IBMDB2/Result.php\"/>\n                <file name=\"src/Driver/OCI8/Result.php\"/>\n                <file name=\"src/Driver/PDO/Result.php\"/>\n                <file name=\"src/Driver/PgSQL/Result.php\"/>\n                <file name=\"src/Driver/SQLite3/Result.php\"/>\n            </errorLevel>\n        </MoreSpecificReturnType>\n        <NoValue>\n            <errorLevel type=\"suppress\">\n                <!-- See https://github.com/vimeo/psalm/issues/10995 -->\n                <file name=\"src/Types/BigIntType.php\"/>\n                <!--\n                    This error looks bogus.\n                -->\n                <file name=\"static-analysis/driver-manager-retrieves-correct-connection-type.php\"/>\n            </errorLevel>\n        </NoValue>\n        <NullableReturnStatement>\n            <errorLevel type=\"suppress\">\n                <!--\n                    Fixing this issue requires an API change\n                -->\n                <file name=\"src/Driver/AbstractSQLiteDriver.php\"/>\n            </errorLevel>\n        </NullableReturnStatement>\n        <PossiblyInvalidArrayOffset>\n            <errorLevel type=\"suppress\">\n                <!-- $array[key($array)] is safe. -->\n                <file name=\"src/Query/QueryBuilder.php\"/>\n            </errorLevel>\n        </PossiblyInvalidArrayOffset>\n        <PossiblyNullArgument>\n            <errorLevel type=\"suppress\">\n                <!--\n                    This is a valid issue and requires some refactoring.\n                -->\n                <file name=\"src/Schema/SQLiteSchemaManager.php\"/>\n            </errorLevel>\n        </PossiblyNullArgument>\n        <PossiblyUndefinedArrayOffset>\n            <errorLevel type=\"suppress\">\n                <!-- See https://github.com/psalm/psalm-plugin-phpunit/pull/82 -->\n                <file name=\"tests/Functional/PrimaryReadReplicaConnectionTest.php\"/>\n                <file name=\"tests/Functional/Schema/PostgreSQLSchemaManagerTest.php\"/>\n                <!-- There is no way to mark a nullable element in an array shape as always set,\n                     and the PHPUnit plugin for Psalm does not seem to understand static assertions -->\n                <file name=\"tests/TestUtil.php\"/>\n            </errorLevel>\n        </PossiblyUndefinedArrayOffset>\n        <PossiblyUndefinedVariable>\n            <errorLevel type=\"suppress\">\n                <!--\n                    See https://github.com/vimeo/psalm/issues/4354\n                -->\n                <file name=\"src/Schema/AbstractSchemaManager.php\"/>\n            </errorLevel>\n        </PossiblyUndefinedVariable>\n        <PossiblyFalseReference>\n            <errorLevel type=\"suppress\">\n                <!--\n                    oci_new_descriptor() returns OCI-Lob|false on PHP 7 and OCILob|null on PHP 8\n                -->\n                <file name=\"src/Driver/OCI8/Statement.php\"/>\n            </errorLevel>\n        </PossiblyFalseReference>\n        <PropertyNotSetInConstructor>\n            <errorLevel type=\"suppress\">\n                <!-- See https://github.com/psalm/psalm-plugin-phpunit/issues/107 -->\n                <!-- See https://github.com/sebastianbergmann/phpunit/pull/4610 -->\n                <directory name=\"tests\"/>\n            </errorLevel>\n        </PropertyNotSetInConstructor>\n        <RedundantConditionGivenDocblockType>\n            <errorLevel type=\"suppress\">\n                <!--\n                    Fixing these issues requires support of union types at the language level\n                    or breaking API changes.\n                -->\n                <file name=\"src/Platforms/AbstractMySQLPlatform.php\"/>\n                <file name=\"tests/Functional/Driver/AbstractDriverTestCase.php\"/>\n\n                <!-- We're checking for invalid input. -->\n                <directory name=\"src/Driver/PgSQL\"/>\n                <file name=\"src/Result.php\"/>\n\n                <!-- We're testing invalid input. -->\n                <file name=\"tests/Types/DateImmutableTypeTest.php\"/>\n                <file name=\"tests/Types/DateTimeImmutableTypeTest.php\"/>\n                <file name=\"tests/Types/TimeImmutableTypeTest.php\"/>\n\n                <!-- False positive: \"mixed is never string\" -->\n                <file name=\"src/Platforms/PostgreSQLPlatform.php\" />\n            </errorLevel>\n        </RedundantConditionGivenDocblockType>\n        <RedundantPropertyInitializationCheck>\n            <errorLevel type=\"suppress\">\n                <!-- Running isset() checks on properties that should be initialized by setUp() is fine. -->\n                <directory name=\"tests\"/>\n\n                <!-- Ignore isset() checks in destructors. -->\n                <file name=\"src/Driver/PgSQL/Connection.php\"/>\n                <file name=\"src/Driver/PgSQL/Statement.php\"/>\n            </errorLevel>\n        </RedundantPropertyInitializationCheck>\n        <TypeDoesNotContainNull>\n            <errorLevel type=\"suppress\">\n                <!-- See https://github.com/psalm/psalm-plugin-phpunit/issues/107 -->\n                <file name=\"tests/Functional/Schema/SchemaManagerFunctionalTestCase.php\"/>\n            </errorLevel>\n        </TypeDoesNotContainNull>\n        <TypeDoesNotContainType>\n            <errorLevel type=\"suppress\">\n                <!-- See https://github.com/vimeo/psalm/issues/11008 -->\n                <file name=\"src/Driver/SQLite3/Result.php\"/>\n                <!-- Ignore isset() checks in destructors. -->\n                <file name=\"src/Driver/PgSQL/Connection.php\"/>\n                <file name=\"src/Driver/PgSQL/Statement.php\"/>\n                <!-- See https://github.com/vimeo/psalm/issues/10995 -->\n                <file name=\"src/Types/BigIntType.php\"/>\n            </errorLevel>\n        </TypeDoesNotContainType>\n        <UndefinedClass>\n            <errorLevel type=\"suppress\">\n                <!-- New PDO classes introduced in PHP 8.4 -->\n                <referencedClass name=\"Pdo\\Mysql\"/>\n                <referencedClass name=\"Pdo\\Pgsql\"/>\n                <referencedClass name=\"Pdo\\Sqlite\"/>\n            </errorLevel>\n        </UndefinedClass>\n        <UndefinedDocblockClass>\n            <errorLevel type=\"suppress\">\n                <!-- See https://github.com/vimeo/psalm/issues/5472 -->\n                <referencedClass name=\"Doctrine\\DBAL\\Portability\\T\"/>\n                <!--\n                    The OCI-Lob class was renamed to OCILob in PHP 8 while Psalm infers PHP 7 from composer.json\n                    and may not properly interpret the LanguageLevelTypeAware annotation from the stubs.\n                -->\n                <referencedClass name=\"OCILob\"/>\n            </errorLevel>\n        </UndefinedDocblockClass>\n        <UndefinedMethod>\n            <errorLevel type=\"suppress\">\n                <!-- New PDO static constructor introduced in PHP 8.4 -->\n                <referencedMethod name=\"PDO::connect\"/>\n            </errorLevel>\n        </UndefinedMethod>\n        <UnsupportedPropertyReferenceUsage>\n            <errorLevel type=\"suppress\">\n                <!-- This code is valid -->\n                <file name=\"src/Driver/Mysqli/Result.php\"/>\n                <file name=\"src/Driver/Mysqli/Statement.php\"/>\n            </errorLevel>\n        </UnsupportedPropertyReferenceUsage>\n        <UnsupportedReferenceUsage>\n            <errorLevel type=\"suppress\">\n                <!-- This code is valid -->\n                <file name=\"src/Driver/SQLSrv/Statement.php\"/>\n            </errorLevel>\n        </UnsupportedReferenceUsage>\n        <InvalidReturnStatement>\n            <errorLevel type=\"suppress\">\n                <!-- lastInsertId has a return type that does not match the one defined in the interface-->\n                <file name=\"src/Driver/Mysqli/Connection.php\"/>\n\n                <!-- See https://github.com/vimeo/psalm/issues/5472 -->\n                <file name=\"src/Portability/Converter.php\"/>\n            </errorLevel>\n        </InvalidReturnStatement>\n        <InvalidReturnType>\n            <errorLevel type=\"suppress\">\n                <!-- lastInsertId has a return type that does not match the one defined in the interface-->\n                <file name=\"src/Driver/Mysqli/Connection.php\"/>\n\n                <!-- See https://github.com/vimeo/psalm/issues/5472 -->\n                <file name=\"src/Portability/Converter.php\"/>\n            </errorLevel>\n        </InvalidReturnType>\n        <InvalidScalarArgument>\n            <errorLevel type=\"suppress\">\n                <!-- See https://github.com/vimeo/psalm/issues/4295 -->\n                <file name=\"src/Exception/DriverException.php\"/>\n\n                <!-- See https://bugs.php.net/bug.php?id=77591 -->\n                <referencedFunction name=\"db2_autocommit\"/>\n\n                <!-- We're testing invalid input. -->\n                <file name=\"tests/Functional/Driver/Mysqli/ConnectionTest.php\"/>\n            </errorLevel>\n        </InvalidScalarArgument>\n    </issueHandlers>\n</psalm>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "static-analysis",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}