{
  "metadata": {
    "timestamp": 1736712261768,
    "page": 14,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "googleapis/google-api-php-client",
      "stars": 9407,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3408203125,
          "content": "/.gitattributes export-ignore\n/.github export-ignore\n/.gitignore export-ignore\n/.travis.yml export-ignore\n/CODE_OF_CONDUCT.md export-ignore\n/docs export-ignore\n/examples export-ignore\n/phpunit.xml.dist export-ignore\n/phpcs.xml.dist export-ignore\n/style export-ignore\n/tests export-ignore\n/UPGRADING.md export-ignore\n/phpstan.neon.dist export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.142578125,
          "content": ".DS_Store\nphpunit.xml\nphpcs.xml\ncomposer.lock\nvendor\nexamples/testfile-small.txt\nexamples/testfile.txt\ntests/.apiKey\n.phpunit.result.cache\n.idea/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.8896484375,
          "content": "# Changelog\n\n## [2.18.2](https://github.com/googleapis/google-api-php-client/compare/v2.18.1...v2.18.2) (2024-12-16)\n\n\n### Bug Fixes\n\n* Correct type for jwt constructor arg ([#2648](https://github.com/googleapis/google-api-php-client/issues/2648)) ([31a9861](https://github.com/googleapis/google-api-php-client/commit/31a9861af02a8e9070b395f05caed7ffce0ef8be))\n\n## [2.18.1](https://github.com/googleapis/google-api-php-client/compare/v2.18.0...v2.18.1) (2024-11-24)\n\n\n### Bug Fixes\n\n* Implicitly marking parameter  as nullable is deprecated ([#2638](https://github.com/googleapis/google-api-php-client/issues/2638)) ([de57db2](https://github.com/googleapis/google-api-php-client/commit/de57db2fdc0d56de1abbf778b28b77c3347eb3fd))\n\n## [2.18.0](https://github.com/googleapis/google-api-php-client/compare/v2.17.0...v2.18.0) (2024-10-16)\n\n\n### Features\n\n* **docs:** Use doctum shared workflow for reference docs ([#2618](https://github.com/googleapis/google-api-php-client/issues/2618)) ([242e2cb](https://github.com/googleapis/google-api-php-client/commit/242e2cb09ad5b25b047a862b4d521037e74cae29))\n\n\n### Bug Fixes\n\n* Explicit token caching issue ([#2358](https://github.com/googleapis/google-api-php-client/issues/2358)) ([dc13e5e](https://github.com/googleapis/google-api-php-client/commit/dc13e5e3f517148d3c66d151a5ab133b7840d8fb))\n\n## [2.17.0](https://github.com/googleapis/google-api-php-client/compare/v2.16.0...v2.17.0) (2024-07-10)\n\n\n### Features\n\n* Add logger to client constructor config ([#2606](https://github.com/googleapis/google-api-php-client/issues/2606)) ([1f47133](https://github.com/googleapis/google-api-php-client/commit/1f4713329d71111a317cda8ef8603fa1bdc88858))\n* Add the protected apiVersion property ([#2588](https://github.com/googleapis/google-api-php-client/issues/2588)) ([7e79f3d](https://github.com/googleapis/google-api-php-client/commit/7e79f3d7be4811f760e19cc4a2c558e04196ec1d))\n\n## [2.16.0](https://github.com/googleapis/google-api-php-client/compare/v2.15.4...v2.16.0) (2024-04-24)\n\n\n### Features\n\n* Add universe domain support ([#2563](https://github.com/googleapis/google-api-php-client/issues/2563)) ([35895de](https://github.com/googleapis/google-api-php-client/commit/35895ded90b507074b3430a94a5790ddd01f39f0))\n\n## [2.15.4](https://github.com/googleapis/google-api-php-client/compare/v2.15.3...v2.15.4) (2024-03-06)\n\n\n### Bug Fixes\n\n* Updates phpseclib because of a security issue ([#2574](https://github.com/googleapis/google-api-php-client/issues/2574)) ([633d41f](https://github.com/googleapis/google-api-php-client/commit/633d41f1b65fdb71a83bf747f7a3ad9857f6d02a))\n\n## [2.15.3](https://github.com/googleapis/google-api-php-client/compare/v2.15.2...v2.15.3) (2024-01-04)\n\n\n### Bug Fixes\n\n* Guzzle dependency version ([#2546](https://github.com/googleapis/google-api-php-client/issues/2546)) ([c270f28](https://github.com/googleapis/google-api-php-client/commit/c270f28b00594a151a887edd3cfd205594a1256a))\n\n## [2.15.2](https://github.com/googleapis/google-api-php-client/compare/v2.15.1...v2.15.2) (2024-01-03)\n\n\n### Bug Fixes\n\n* Disallow vulnerable guzzle versions ([#2536](https://github.com/googleapis/google-api-php-client/issues/2536)) ([d1830ed](https://github.com/googleapis/google-api-php-client/commit/d1830ede17114a4951ab9e60b3b9bcd9393b8668))\n* Php 8.3 deprecated get_class method call without argument ([#2509](https://github.com/googleapis/google-api-php-client/issues/2509)) ([8c66021](https://github.com/googleapis/google-api-php-client/commit/8c6602119b631e1a9da4dbe219af18d51c8dab8e))\n* Phpseclib security vulnerability ([#2524](https://github.com/googleapis/google-api-php-client/issues/2524)) ([73705c2](https://github.com/googleapis/google-api-php-client/commit/73705c2a65bfc01fa6d7717b7f401b8288fe0587))\n\n## [2.15.1](https://github.com/googleapis/google-api-php-client/compare/v2.15.0...v2.15.1) (2023-09-12)\n\n\n### Bug Fixes\n\n* Upgrade min phpseclib version ([#2499](https://github.com/googleapis/google-api-php-client/issues/2499)) ([8e7fae2](https://github.com/googleapis/google-api-php-client/commit/8e7fae2b79cfc1b72026347abf6314d91442a018))\n\n## [2.15.0](https://github.com/googleapis/google-api-php-client/compare/v2.14.0...v2.15.0) (2023-05-18)\n\n\n### Features\n\n* Add pkce support and upgrade examples ([#2438](https://github.com/googleapis/google-api-php-client/issues/2438)) ([bded223](https://github.com/googleapis/google-api-php-client/commit/bded223ece445a6130cde82417b20180b1d6698a))\n* Drop support for 7.3 and below ([#2431](https://github.com/googleapis/google-api-php-client/issues/2431)) ([c765b37](https://github.com/googleapis/google-api-php-client/commit/c765b379e95ab272b6a87aa802d9f5507eaeb2e7))\n\n## [2.14.0](https://github.com/googleapis/google-api-php-client/compare/v2.13.2...v2.14.0) (2023-05-11)\n\n\n### Features\n\n* User-supplied query params for auth url ([#2432](https://github.com/googleapis/google-api-php-client/issues/2432)) ([74a7d7b](https://github.com/googleapis/google-api-php-client/commit/74a7d7b838acb08afc02b449f338fbe6577cb03c))\n\n## [2.13.2](https://github.com/googleapis/google-api-php-client/compare/v2.13.1...v2.13.2) (2023-03-23)\n\n\n### Bug Fixes\n\n* Calling class_exists with null in Google\\Model ([#2405](https://github.com/googleapis/google-api-php-client/issues/2405)) ([5ed4edc](https://github.com/googleapis/google-api-php-client/commit/5ed4edc9315110a715e9763d27ee6761e1aaa00a))\n\n## [2.13.1](https://github.com/googleapis/google-api-php-client/compare/v2.13.0...v2.13.1) (2023-03-13)\n\n\n### Bug Fixes\n\n* Allow dynamic properties on model classes ([#2408](https://github.com/googleapis/google-api-php-client/issues/2408)) ([11080d5](https://github.com/googleapis/google-api-php-client/commit/11080d5e85a040751a13aca8131f93c7d910db11))\n\n## [2.13.0](https://github.com/googleapis/google-api-php-client/compare/v2.12.6...v2.13.0) (2022-12-19)\n\n\n### Features\n\n* Make auth http client config extends from default client config ([#2348](https://github.com/googleapis/google-api-php-client/issues/2348)) ([2640250](https://github.com/googleapis/google-api-php-client/commit/2640250c7bab479f378972733dcc0a3e9b2e14f8))\n\n\n### Bug Fixes\n\n* Don't send content-type header if no post body exists ([#2288](https://github.com/googleapis/google-api-php-client/issues/2288)) ([654c0e2](https://github.com/googleapis/google-api-php-client/commit/654c0e29ab78aba8bfef52fd3d06a3b2b39c4e0d))\n* Ensure new redirect_uri propogates to OAuth2 class ([#2282](https://github.com/googleapis/google-api-php-client/issues/2282)) ([a69131b](https://github.com/googleapis/google-api-php-client/commit/a69131b6488735d112a529a278cfc8b875e18647))\n* Lint errors ([#2315](https://github.com/googleapis/google-api-php-client/issues/2315)) ([88cc63c](https://github.com/googleapis/google-api-php-client/commit/88cc63c38b0cf88629f66fdf8ba6006f6c6d5a2c))\n* Update accounts.google.com authorization URI ([#2275](https://github.com/googleapis/google-api-php-client/issues/2275)) ([b2624d2](https://github.com/googleapis/google-api-php-client/commit/b2624d21fce894126b9975a872cf5cda8038b254))\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 1.9345703125,
          "content": "# Contributor Code of Conduct\n\nAs contributors and maintainers of this project,\nand in the interest of fostering an open and welcoming community,\nwe pledge to respect all people who contribute through reporting issues,\nposting feature requests, updating documentation,\nsubmitting pull requests or patches, and other activities.\n\nWe are committed to making participation in this project\na harassment-free experience for everyone,\nregardless of level of experience, gender, gender identity and expression,\nsexual orientation, disability, personal appearance,\nbody size, race, ethnicity, age, religion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery\n* Personal attacks\n* Trolling or insulting/derogatory comments\n* Public or private harassment\n* Publishing other's private information,\nsuch as physical or electronic\naddresses, without explicit permission\n* Other unethical or unprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct.\nBy adopting this Code of Conduct,\nproject maintainers commit themselves to fairly and consistently\napplying these principles to every aspect of managing this project.\nProject maintainers who do not follow or enforce the Code of Conduct\nmay be permanently removed from the project team.\n\nThis code of conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior\nmay be reported by opening an issue\nor contacting one or more of the project maintainers.\n\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.2.0,\navailable at [http://contributor-covenant.org/version/1/2/0/](http://contributor-covenant.org/version/1/2/0/)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.015625,
          "content": "Apache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\n\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets \"[]\"\nreplaced with your own identifying information. (Don't include\nthe brackets!) The text should be enclosed in the appropriate\ncomment syntax for the file format. We also recommend that a\nfile or class name and description of purpose be included on the\nsame \"printed page\" as the copyright notice for easier\nidentification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.7314453125,
          "content": "![](https://github.com/googleapis/google-api-php-client/workflows/.github/workflows/tests.yml/badge.svg)\n\n# Google APIs Client Library for PHP #\n\n**NOTE**: please check to see if the package you'd like to install is available in our\nlist of [Google cloud packages](https://cloud.google.com/php/docs/reference) first, as\nthese are the recommended libraries.\n\n<dl>\n  <dt>Reference Docs</dt><dd><a href=\"https://googleapis.github.io/google-api-php-client/\">https://googleapis.github.io/google-api-php-client/</a></dd>\n  <dt>License</dt><dd>Apache 2.0</dd>\n</dl>\n\nThe Google API Client Library enables you to work with Google APIs such as Gmail, Drive or YouTube on your server.\n\nThese client libraries are officially supported by Google. However, the libraries are considered complete and are in maintenance mode. This means that we will address critical bugs and security issues but will not add any new features.\n\n## Google Cloud Platform\n\nFor Google Cloud Platform APIs such as [Datastore][cloud-datastore], [Cloud Storage][cloud-storage], [Pub/Sub][cloud-pubsub], and [Compute Engine][cloud-compute], we recommend using the Google Cloud client libraries. For a complete list of supported Google Cloud client libraries, see [googleapis/google-cloud-php](https://github.com/googleapis/google-cloud-php).\n\n[cloud-datastore]: https://github.com/googleapis/google-cloud-php-datastore\n[cloud-pubsub]: https://github.com/googleapis/google-cloud-php-pubsub\n[cloud-storage]: https://github.com/googleapis/google-cloud-php-storage\n[cloud-compute]: https://github.com/googleapis/google-cloud-php-compute\n\n## Requirements ##\n* [PHP 8.0 or higher](https://www.php.net/)\n\n## Developer Documentation ##\n\nThe [docs folder](docs/) provides detailed guides for using this library.\n\n## Installation ##\n\nYou can use **Composer** or simply **Download the Release**\n\n### Composer\n\nThe preferred method is via [composer](https://getcomposer.org/). Follow the\n[installation instructions](https://getcomposer.org/doc/00-intro.md) if you do not already have\ncomposer installed.\n\nOnce composer is installed, execute the following command in your project root to install this library:\n\n```sh\ncomposer require google/apiclient\n```\n\nIf you're facing a timeout error then either increase the timeout for composer by adding the env flag as `COMPOSER_PROCESS_TIMEOUT=600 composer install` or you can put this in the `config` section of the composer schema:\n```\n{\n    \"config\": {\n        \"process-timeout\": 600\n    }\n}\n```\n\nFinally, be sure to include the autoloader:\n\n```php\nrequire_once '/path/to/your-project/vendor/autoload.php';\n```\n\nThis library relies on `google/apiclient-services`. That library provides up-to-date API wrappers for a large number of Google APIs. In order that users may make use of the latest API clients, this library does not pin to a specific version of `google/apiclient-services`. **In order to prevent the accidental installation of API wrappers with breaking changes**, it is highly recommended that you pin to the [latest version](https://github.com/googleapis/google-api-php-client-services/releases) yourself prior to using this library in production.\n\n#### Cleaning up unused services\n\nThere are over 200 Google API services. The chances are good that you will not\nwant them all. In order to avoid shipping these dependencies with your code,\nyou can run the `Google\\Task\\Composer::cleanup` task and specify the services\nyou want to keep in `composer.json`:\n\n```json\n{\n    \"require\": {\n        \"google/apiclient\": \"^2.15.0\"\n    },\n    \"scripts\": {\n        \"pre-autoload-dump\": \"Google\\\\Task\\\\Composer::cleanup\"\n    },\n    \"extra\": {\n        \"google/apiclient-services\": [\n            \"Drive\",\n            \"YouTube\"\n        ]\n    }\n}\n```\n\nThis example will remove all services other than \"Drive\" and \"YouTube\" when\n`composer update` or a fresh `composer install` is run.\n\n**IMPORTANT**: If you add any services back in `composer.json`, you will need to\nremove the `vendor/google/apiclient-services` directory explicitly for the\nchange you made to have effect:\n\n```sh\nrm -r vendor/google/apiclient-services\ncomposer update\n```\n\n**NOTE**: This command performs an exact match on the service name, so to keep\n`YouTubeReporting` and `YouTubeAnalytics` as well, you'd need to add each of\nthem explicitly:\n\n```json\n{\n    \"extra\": {\n        \"google/apiclient-services\": [\n            \"Drive\",\n            \"YouTube\",\n            \"YouTubeAnalytics\",\n            \"YouTubeReporting\"\n        ]\n    }\n}\n```\n\n### Download the Release\n\nIf you prefer not to use composer, you can download the package in its entirety. The [Releases](https://github.com/googleapis/google-api-php-client/releases) page lists all stable versions. Download any file\nwith the name `google-api-php-client-[RELEASE_NAME].zip` for a package including this library and its dependencies.\n\nUncompress the zip file you download, and include the autoloader in your project:\n\n```php\nrequire_once '/path/to/google-api-php-client/vendor/autoload.php';\n```\n\nFor additional installation and setup instructions, see [the documentation](docs/).\n\n## Examples ##\nSee the [`examples/`](examples) directory for examples of the key client features. You can\nview them in your browser by running the php built-in web server.\n\n```\n$ php -S localhost:8000 -t examples/\n```\n\nAnd then browsing to the host and port you specified\n(in the above example, `http://localhost:8000`).\n\n### Basic Example ###\n\n```php\n// include your composer dependencies\nrequire_once 'vendor/autoload.php';\n\n$client = new Google\\Client();\n$client->setApplicationName(\"Client_Library_Examples\");\n$client->setDeveloperKey(\"YOUR_APP_KEY\");\n\n$service = new Google\\Service\\Books($client);\n$query = 'Henry David Thoreau';\n$optParams = [\n  'filter' => 'free-ebooks',\n];\n$results = $service->volumes->listVolumes($query, $optParams);\n\nforeach ($results->getItems() as $item) {\n  echo $item['volumeInfo']['title'], \"<br /> \\n\";\n}\n```\n\n### Authentication with OAuth ###\n\n> An example of this can be seen in [`examples/simple-file-upload.php`](examples/simple-file-upload.php).\n\n1. Follow the instructions to [Create Web Application Credentials](docs/oauth-web.md#create-authorization-credentials)\n1. Download the JSON credentials\n1. Set the path to these credentials using `Google\\Client::setAuthConfig`:\n\n    ```php\n    $client = new Google\\Client();\n    $client->setAuthConfig('/path/to/client_credentials.json');\n    ```\n\n1. Set the scopes required for the API you are going to call\n\n    ```php\n    $client->addScope(Google\\Service\\Drive::DRIVE);\n    ```\n\n1. Set your application's redirect URI\n\n    ```php\n    // Your redirect URI can be any registered URI, but in this example\n    // we redirect back to this same page\n    $redirect_uri = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF'];\n    $client->setRedirectUri($redirect_uri);\n    ```\n\n1. In the script handling the redirect URI, exchange the authorization code for an access token:\n\n    ```php\n    if (isset($_GET['code'])) {\n        $token = $client->fetchAccessTokenWithAuthCode($_GET['code']);\n    }\n    ```\n\n### Authentication with Service Accounts ###\n\n> An example of this can be seen in [`examples/service-account.php`](examples/service-account.php).\n\nSome APIs\n(such as the [YouTube Data API](https://developers.google.com/youtube/v3/)) do\nnot support service accounts. Check with the specific API documentation if API\ncalls return unexpected 401 or 403 errors.\n\n1. Follow the instructions to [Create a Service Account](docs/oauth-server.md#creating-a-service-account)\n1. Download the JSON credentials\n1. Set the path to these credentials using the `GOOGLE_APPLICATION_CREDENTIALS` environment variable:\n\n    ```php\n    putenv('GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json');\n    ```\n\n1. Tell the Google client to use your service account credentials to authenticate:\n\n    ```php\n    $client = new Google\\Client();\n    $client->useApplicationDefaultCredentials();\n    ```\n\n1. Set the scopes required for the API you are going to call\n\n    ```php\n    $client->addScope(Google\\Service\\Drive::DRIVE);\n    ```\n\n1. If you have delegated domain-wide access to the service account and you want to impersonate a user account, specify the email address of the user account using the method setSubject:\n\n    ```php\n    $client->setSubject($user_to_impersonate);\n    ```\n\n#### How to use a specific JSON key\n\nIf you want to a specific JSON key instead of using `GOOGLE_APPLICATION_CREDENTIALS` environment variable, you can do this:\n\n```php\n$jsonKey = [\n   'type' => 'service_account',\n   // ...\n];\n$client = new Google\\Client();\n$client->setAuthConfig($jsonKey);\n```\n\n### Making Requests ###\n\nThe classes used to call the API in [google-api-php-client-services](https://github.com/googleapis/google-api-php-client-services) are autogenerated. They map directly to the JSON requests and responses found in the [APIs Explorer](https://developers.google.com/apis-explorer/#p/).\n\nA JSON request to the [Datastore API](https://developers.google.com/apis-explorer/#p/datastore/v1beta3/datastore.projects.runQuery) would look like this:\n\n```\nPOST https://datastore.googleapis.com/v1beta3/projects/YOUR_PROJECT_ID:runQuery?key=YOUR_API_KEY\n```\n```json\n{\n    \"query\": {\n        \"kind\": [{\n            \"name\": \"Book\"\n        }],\n        \"order\": [{\n            \"property\": {\n                \"name\": \"title\"\n            },\n            \"direction\": \"descending\"\n        }],\n        \"limit\": 10\n    }\n}\n```\n\nUsing this library, the same call would look something like this:\n\n```php\n// create the datastore service class\n$datastore = new Google\\Service\\Datastore($client);\n\n// build the query - this maps directly to the JSON\n$query = new Google\\Service\\Datastore\\Query([\n    'kind' => [\n        [\n            'name' => 'Book',\n        ],\n    ],\n    'order' => [\n        'property' => [\n            'name' => 'title',\n        ],\n        'direction' => 'descending',\n    ],\n    'limit' => 10,\n]);\n\n// build the request and response\n$request = new Google\\Service\\Datastore\\RunQueryRequest(['query' => $query]);\n$response = $datastore->projects->runQuery('YOUR_DATASET_ID', $request);\n```\n\nHowever, as each property of the JSON API has a corresponding generated class, the above code could also be written like this:\n\n```php\n// create the datastore service class\n$datastore = new Google\\Service\\Datastore($client);\n\n// build the query\n$request = new Google\\Service\\Datastore_RunQueryRequest();\n$query = new Google\\Service\\Datastore\\Query();\n//   - set the order\n$order = new Google\\Service\\Datastore_PropertyOrder();\n$order->setDirection('descending');\n$property = new Google\\Service\\Datastore\\PropertyReference();\n$property->setName('title');\n$order->setProperty($property);\n$query->setOrder([$order]);\n//   - set the kinds\n$kind = new Google\\Service\\Datastore\\KindExpression();\n$kind->setName('Book');\n$query->setKinds([$kind]);\n//   - set the limit\n$query->setLimit(10);\n\n// add the query to the request and make the request\n$request->setQuery($query);\n$response = $datastore->projects->runQuery('YOUR_DATASET_ID', $request);\n```\n\nThe method used is a matter of preference, but *it will be very difficult to use this library without first understanding the JSON syntax for the API*, so it is recommended to look at the [APIs Explorer](https://developers.google.com/apis-explorer/#p/) before using any of the services here.\n\n### Making HTTP Requests Directly ###\n\nIf Google Authentication is desired for external applications, or a Google API is not available yet in this library, HTTP requests can be made directly.\n\nIf you are installing this client only to authenticate your own HTTP client requests, you should use [`google/auth`](https://github.com/googleapis/google-auth-library-php#call-the-apis) instead.\n\nThe `authorize` method returns an authorized [Guzzle Client](http://docs.guzzlephp.org/), so any request made using the client will contain the corresponding authorization.\n\n```php\n// create the Google client\n$client = new Google\\Client();\n\n/**\n * Set your method for authentication. Depending on the API, This could be\n * directly with an access token, API key, or (recommended) using\n * Application Default Credentials.\n */\n$client->useApplicationDefaultCredentials();\n$client->addScope(Google\\Service\\Plus::PLUS_ME);\n\n// returns a Guzzle HTTP Client\n$httpClient = $client->authorize();\n\n// make an HTTP request\n$response = $httpClient->get('https://www.googleapis.com/plus/v1/people/me');\n```\n\n### Caching ###\n\nIt is recommended to use another caching library to improve performance. This can be done by passing a [PSR-6](https://www.php-fig.org/psr/psr-6/) compatible library to the client:\n\n```php\nuse League\\Flysystem\\Adapter\\Local;\nuse League\\Flysystem\\Filesystem;\nuse Cache\\Adapter\\Filesystem\\FilesystemCachePool;\n\n$filesystemAdapter = new Local(__DIR__.'/');\n$filesystem        = new Filesystem($filesystemAdapter);\n\n$cache = new FilesystemCachePool($filesystem);\n$client->setCache($cache);\n```\n\nIn this example we use [PHP Cache](http://www.php-cache.com/). Add this to your project with composer:\n\n```\ncomposer require cache/filesystem-adapter\n```\n\n### Updating Tokens ###\n\nWhen using [Refresh Tokens](https://developers.google.com/identity/protocols/OAuth2InstalledApp#offline) or [Service Account Credentials](https://developers.google.com/identity/protocols/OAuth2ServiceAccount#overview), it may be useful to perform some action when a new access token is granted. To do this, pass a callable to the `setTokenCallback` method on the client:\n\n```php\n$logger = new Monolog\\Logger();\n$tokenCallback = function ($cacheKey, $accessToken) use ($logger) {\n  $logger->debug(sprintf('new access token received at cache key %s', $cacheKey));\n};\n$client->setTokenCallback($tokenCallback);\n```\n\n### Debugging Your HTTP Request using Charles ###\n\nIt is often very useful to debug your API calls by viewing the raw HTTP request. This library supports the use of [Charles Web Proxy](https://www.charlesproxy.com/documentation/getting-started/). Download and run Charles, and then capture all HTTP traffic through Charles with the following code:\n\n```php\n// FOR DEBUGGING ONLY\n$httpClient = new GuzzleHttp\\Client([\n    'proxy' => 'localhost:8888', // by default, Charles runs on localhost port 8888\n    'verify' => false, // otherwise HTTPS requests will fail.\n]);\n\n$client = new Google\\Client();\n$client->setHttpClient($httpClient);\n```\n\nNow all calls made by this library will appear in the Charles UI.\n\nOne additional step is required in Charles to view SSL requests. Go to **Charles > Proxy > SSL Proxying Settings** and add the domain you'd like captured. In the case of the Google APIs, this is usually `*.googleapis.com`.\n\n### Controlling HTTP Client Configuration Directly\n\nGoogle API Client uses [Guzzle](http://docs.guzzlephp.org/) as its default HTTP client. That means that you can control your HTTP requests in the same manner you would for any application using Guzzle.\n\nLet's say, for instance, we wished to apply a referrer to each request.\n\n```php\nuse GuzzleHttp\\Client;\n\n$httpClient = new Client([\n    'headers' => [\n        'referer' => 'mysite.com'\n    ]\n]);\n\n$client = new Google\\Client();\n$client->setHttpClient($httpClient);\n```\n\nOther Guzzle features such as [Handlers and Middleware](http://docs.guzzlephp.org/en/stable/handlers-and-middleware.html) offer even more control.\n\n### Partial Consent and Granted Scopes\n\nWhen using OAuth2 3LO (e.g. you're a client requesting credentials from a 3rd\nparty, such as in the [simple file upload example](examples/simple-file-upload.php)),\nyou may want to take advantage of Partial Consent.\n\nTo allow clients to only grant certain scopes in the OAuth2 screen, pass the\nquerystring parameter for `enable_serial_consent` when generating the\nauthorization URL:\n\n```php\n$authUrl = $client->createAuthUrl($scope, ['enable_serial_consent' => 'true']);\n```\n\nOnce the flow is completed, you can see which scopes were granted by calling\n`getGrantedScope` on the OAuth2 object:\n\n```php\n// Space-separated string of granted scopes if it exists, otherwise null.\necho $client->getOAuth2Service()->getGrantedScope();\n```\n\n### Service Specific Examples ###\n\nYouTube: https://github.com/youtube/api-samples/tree/master/php\n\n## How Do I Contribute? ##\n\nPlease see the [contributing](.github/CONTRIBUTING.md) page for more information. In particular, we love pull requests - but please make sure to sign the contributor license agreement.\n\n## Frequently Asked Questions ##\n\n### What do I do if something isn't working? ###\n\nFor support with the library the best place to ask is via the google-api-php-client tag on StackOverflow: https://stackoverflow.com/questions/tagged/google-api-php-client\n\nIf there is a specific bug with the library, please [file an issue](https://github.com/googleapis/google-api-php-client/issues) in the GitHub issues tracker, including an example of the failing code and any specific errors retrieved. Feature requests can also be filed, as long as they are core library requests, and not-API specific: for those, refer to the documentation for the individual APIs for the best place to file requests. Please try to provide a clear statement of the problem that the feature would address.\n\n### I want an example of X! ###\n\nIf X is a feature of the library, file away! If X is an example of using a specific service, the best place to go is to the teams for those specific APIs - our preference is to link to their examples rather than add them to the library, as they can then pin to specific versions of the library. If you have any examples for other APIs, let us know and we will happily add a link to the README above!\n\n### Why do some Google\\Service classes have weird names? ###\n\nThe _Google\\Service_ classes are generally automatically generated from the API discovery documents: https://developers.google.com/discovery/. Sometimes new features are added to APIs with unusual names, which can cause some unexpected or non-standard style naming in the PHP classes.\n\n### How do I deal with non-JSON response types? ###\n\nSome services return XML or similar by default, rather than JSON, which is what the library supports. You can request a JSON response by adding an 'alt' argument to optional params that is normally the last argument to a method call:\n\n```php\n$opt_params = array(\n  'alt' => \"json\"\n);\n```\n\n### How do I set a field to null? ###\n\nThe library strips out nulls from the objects sent to the Google APIs as it is the default value of all of the uninitialized properties. To work around this, set the field you want to null to `Google\\Model::NULL_VALUE`. This is a placeholder that will be replaced with a true null when sent over the wire.\n\n## Code Quality ##\n\nRun the PHPUnit tests with PHPUnit. You can configure an API key and token in BaseTest.php to run all calls, but this will require some setup on the Google Developer Console.\n\n    phpunit tests/\n\n### Coding Style\n\nTo check for coding style violations, run\n\n```\nvendor/bin/phpcs src --standard=style/ruleset.xml -np\n```\n\nTo automatically fix (fixable) coding style violations, run\n\n```\nvendor/bin/phpcbf src --standard=style/ruleset.xml\n```\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.3212890625,
          "content": "# Security Policy\n\nTo report a security issue, please use [g.co/vulnz](https://g.co/vulnz).\n\nThe Google Security Team will respond within 5 working days of your report on g.co/vulnz.\n\nWe use g.co/vulnz for our intake, and do coordination and disclosure here using GitHub Security Advisory to privately discuss and fix the issue.\n"
        },
        {
          "name": "UPGRADING.md",
          "type": "blob",
          "size": 12.314453125,
          "content": "Google API Client Upgrade Guide\n===============================\n\n2.x to 2.10.0\n-------------\n\n### Namespaces\n\nThe Google API Client for PHP now uses namespaces for all classes. Code using\nthe legacy classnames will continue to work, but it is advised to upgrade to the\nunderspaced names, as the legacy classnames will be deprecated some time in the\nfuture.\n\n**Before**\n\n```php\n$client = new Google_Client();\n$service = new Google_Service_Books($client);\n```\n\n**After**\n```php\n$client = new Google\\Client();\n$service = new Google\\Service\\Books($client);\n```\n\n### Service class constructors\n\nService class constructors now accept an optional `Google\\Client|array` parameter\nas their first argument, rather than requiring an instance of `Google\\Client`.\n\n**Before**\n\n```php\n$client = new Google_Client();\n$client->setApplicationName(\"Client_Library_Examples\");\n$client->setDeveloperKey(\"YOUR_APP_KEY\");\n\n$service = new Google_Service_Books($client);\n```\n\n**After**\n\n```php\n$service = new Google\\Service\\Books([\n    'application_name' => \"Client_Library_Examples\",\n    'developer_key'    => \"YOUR_APP_KEY\",\n]);\n```\n\n1.0 to 2.0\n----------\n\nThe Google API Client for PHP has undergone major internal changes in `2.0`. Please read through\nthe list below in order to upgrade to the latest version:\n\n## Installation now uses `Composer`\n\n**Before**\n\nThe project was cloned in your project and you would run the autoloader from wherever:\n\n```php\n// the autoload file was included\nrequire_once 'google-api-php-client/src/Google/autoload.php'; // or wherever autoload.php is located\n// OR classes were added one-by-one\nrequire_once 'Google/Client.php';\nrequire_once 'Google/Service/YouTube.php';\n```\n\n**After**\n\nThis library now uses [composer](https://getcomposer.org) (We suggest installing\ncomposer [globally](http://symfony.com/doc/current/cookbook/composer.html)). Add this library by\nrunning the following in the root of your project:\n\n```\n$ composer require google/apiclient:~2.0\n```\n\nThis will install this library and generate an autoload file in `vendor/autoload.php` in the root\nof your project. You can now include this library with the following code:\n\n```php\nrequire_once 'vendor/autoload.php';\n```\n\n## Access Tokens are passed around as arrays instead of JSON strings\n\n**Before**\n\n```php\n$accessToken = $client->getAccessToken();\nprint_r($accessToken);\n// would output:\n// string(153) \"{\"access_token\":\"ya29.FAKsaByOPoddfzvKRo_LBpWWCpVTiAm4BjsvBwxtN7IgSNoUfcErBk_VPl4iAiE1ntb_\",\"token_type\":\"Bearer\",\"expires_in\":3593,\"created\":1445548590}\"\nfile_put_contents($credentialsPath, $accessToken);\n```\n\n**After**\n\n```php\n$accessToken = $client->getAccessToken();\nprint_r($accessToken);\n// will output:\n// array(4) {\n//   [\"access_token\"]=>\n//   string(73) \"ya29.FAKsaByOPoddfzvKRo_LBpWWCpVTiAm4BjsvBwxtN7IgSNoUfcErBk_VPl4iAiE1ntb_\"\n//   [\"token_type\"]=>\n//   string(6) \"Bearer\"\n//   [\"expires_in\"]=>\n//   int(3593)\n//   [\"created\"]=>\n//   int(1445548590)\n// }\nfile_put_contents($credentialsPath, json_encode($accessToken));\n```\n\n## ID Token data is returned as an array\n\n**Before**\n\n```php\n$ticket = $client->verifyIdToken($idToken);\n$data = $ticket->getAttributes();\n$userId = $data['payload']['sub'];\n```\n\n**After**\n\n```php\n$userData = $client->verifyIdToken($idToken);\n$userId = $userData['sub'];\n```\n\n## `Google_Auth_AssertionCredentials` has been removed\n\nFor service accounts, we now use `setAuthConfig` or `useApplicationDefaultCredentials`\n\n**Before**\n\n```php\n$client_email = '1234567890-a1b2c3d4e5f6g7h8i@developer.gserviceaccount.com';\n$private_key = file_get_contents('MyProject.p12');\n$scopes = array('https://www.googleapis.com/auth/sqlservice.admin');\n$credentials = new Google_Auth_AssertionCredentials(\n    $client_email,\n    $scopes,\n    $private_key\n);\n```\n\n**After**\n\n```php\n$client->setAuthConfig('/path/to/service-account.json');\n\n// OR use environment variables (recommended)\n\nputenv('GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json');\n$client->useApplicationDefaultCredentials();\n```\n\n> Note: P12s are deprecated in favor of service account JSON, which can be generated in the\n> Credentials section of Google Developer Console.\n\nIn order to impersonate a user, call `setSubject` when your service account\ncredentials are being used.\n\n**Before**\n\n```php\n$user_to_impersonate = 'user@example.org';\n$credentials = new Google_Auth_AssertionCredentials(\n    $client_email,\n    $scopes,\n    $private_key,\n    'notasecret',                                 // Default P12 password\n    'http://oauth.net/grant_type/jwt/1.0/bearer', // Default grant type\n    $user_to_impersonate,\n);\n```\n\n**After**\n\n```php\n$user_to_impersonate = 'user@example.org';\n$client->setSubject($user_to_impersonate);\n```\n\nAdditionally, `Google_Client::loadServiceAccountJson` has been removed in favor\nof `Google_Client::setAuthConfig`:\n\n**Before**\n\n```php\n$scopes = [ Google_Service_Books::BOOKS ];\n$client->loadServiceAccountJson('/path/to/service-account.json', $scopes);\n```\n\n**After**\n\n```php\n$scopes = [ Google_Service_Books::BOOKS ];\n$client->setAuthConfig('/path/to/service-account.json');\n$client->setScopes($scopes);\n```\n\n## `Google_Auth_AppIdentity` has been removed\n\nFor App Engine authentication, we now use the underlying [`google/auth`][Google Auth] and\ncall `useApplicationDefaultCredentials`:\n\n**Before**\n\n```php\n$client->setAuth(new Google_Auth_AppIdentity($client));\n$client->getAuth()\n    ->authenticateForScope('https://www.googleapis.com/auth/sqlservice.admin')\n```\n\n**After**\n\n```php\n$client->useApplicationDefaultCredentials();\n$client->addScope('https://www.googleapis.com/auth/sqlservice.admin');\n```\n\nThis will detect when the App Engine environment is present, and use the appropriate credentials.\n\n## `Google_Auth_Abstract` classes have been removed\n\n[`google/auth`][Google Auth] is now used for authentication. As a result, all\n`Google_Auth`-related functionality has been removed. The methods that were a part of\n`Google_Auth_Abstract` have been moved into the `Google_Client` object.\n\n**Before**\n\n```php\n$request = new Google_Http_Request();\n$client->getAuth()->sign($request);\n```\n\n**After**\n\n```php\n// create an authorized HTTP client\n$httpClient = $client->authorize();\n\n// OR add authorization to an existing client\n$httpClient = new GuzzleHttp\\Client();\n$httpClient = $client->authorize($httpClient);\n```\n\n**Before**\n\n```php\n$request = new Google_Http_Request();\n$response = $client->getAuth()->authenticatedRequest($request);\n```\n\n**After**\n\n```php\n$httpClient = $client->authorize();\n$request = new GuzzleHttp\\Psr7\\Request('POST', $url);\n$response = $httpClient->send($request);\n```\n\n> NOTE: `$request` can be any class implementing\n> `Psr\\Http\\Message\\RequestInterface`\n\nIn addition, other methods that were callable on `Google_Auth_OAuth2` are now called\non the `Google_Client` object:\n\n**Before**\n\n```php\n$client->getAuth()->refreshToken($token);\n$client->getAuth()->refreshTokenWithAssertion();\n$client->getAuth()->revokeToken($token);\n$client->getAuth()->isAccessTokenExpired();\n```\n\n**After**\n\n```php\n$client->refreshToken($token);\n$client->refreshTokenWithAssertion();\n$client->revokeToken($token);\n$client->isAccessTokenExpired();\n```\n\n## PHP 5.6 is now the minimum supported PHP version\n\nThis was previously `PHP 5.2`. If you still need to use PHP 5.2, please continue to use\nthe [v1-master](https://github.com/google/google-api-php-client/tree/v1-master) branch.\n\n## Guzzle and PSR-7 are used for HTTP Requests\n\nThe HTTP library Guzzle is used for all HTTP Requests. By default, [`Guzzle 6`][Guzzle 6]\nis used, but this library is also compatible with [`Guzzle 5`][Guzzle 5]. As a result,\nall `Google_IO`-related functionality and `Google_Http`-related functionality has been\nchanged or removed.\n\n1. Removed `Google_Http_Request`\n1. Removed `Google_IO_Abstract`, `Google_IO_Exception`, `Google_IO_Curl`, and `Google_IO_Stream`\n1. Removed methods `Google_Client::getIo` and `Google_Client::setIo`\n1. Refactored `Google_Http_Batch` and `Google_Http_MediaFileUpload` for Guzzle\n1. Added `Google_Client::getHttpClient` and `Google_Client::setHttpClient` for getting and\nsetting the Guzzle `GuzzleHttp\\ClientInterface` object.\n\n> NOTE: `PSR-7`-compatible libraries can now be used with this library.\n\n## Other Changes\n\n - [`PSR 3`][PSR 3] `LoggerInterface` is now supported, and [Monolog][Monolog] is used for all\n logging. As a result, all `Google_Logger`-related functionality has been removed:\n    1. Removed `Google_Logger_Abstract`, `Google_Logger_Exception`, `Google_Logger_File`,\n    `Google_Logger_Null`, and `Google_Logger_Psr`\n    1. `Google_Client::setLogger` now requires `Psr\\Log\\LoggerInterface`\n - [`firebase/jwt`][Firebase JWT] is now used for all JWT signing and verifying. As a result, the\n following classes have been changed or removed:\n    1. Removed `Google_Signer_P12`\n    1. Removed `Google_Verifier_Pem`\n    1. Removed `Google_Auth_LoginTicket` (see below)\n - The following classes and methods have been removed in favor of [`google/auth`][Google Auth]:\n    1. Removed methods `Google_Client::getAuth` and `Google_Client::setAuth`\n    1. Removed `Google_Auth_Abstract`\n        - `Google_Auth_Abstract::sign` and `Google_Auth_Abstract::authenticatedRequest` have been\n        replaced by `Google_Client::authorize`. See the above examples for more details.\n    1. Removed `Google_Auth_AppIdentity`. This is now supported in [`google/auth`][Google Auth AppIdentity]\n    and is used automatically when `Google_Client::useApplicationDefaultCredentials` is called.\n    1. Removed `Google_Auth_AssertionCredentials`. Use `Google_Client::setAuthConfig` instead.\n    1. Removed `Google_Auth_ComputeEngine`. This is now supported in\n    [`google/auth`][Google Auth GCE], and is used automatically when\n    `Google_Client::useApplicationDefaultCredentials` is called.\n    1. Removed `Google_Auth_Exception`\n    1. Removed `Google_Auth_LoginTicket`. Calls to `Google_Client::verifyIdToken` now returns\n    the payload of the ID Token as an array if the verification is successful.\n    1. Removed `Google_Auth_OAuth2`. This functionality is now supported in [`google/auth`][Google Auth OAuth2] and wrapped in `Google_Client`. These changes will only affect applications calling `Google_Client::getAuth`,\n    as the methods on `Google_Client` have not changed.\n    1. Removed `Google_Auth_Simple`. This is now supported in [`google/auth`][Google Auth Simple]\n    and is used automatically when `Google_Client::setDeveloperKey` is called.\n - `Google_Client::sign` has been replaced by `Google_Client::authorize`. This function\n    now takes a `GuzzleHttp\\ClientInterface` object and uses the following decision tree for\n    authentication:\n    1. Uses Application Default Credentials when\n    `Google_Client::useApplicationDefaultCredentials` is called\n      - Looks for `GOOGLE_APPLICATION_CREDENTIALS` environment variable if set\n      - Looks in `~/.config/gcloud/application_default_credentials.json`\n      - Otherwise, uses `GCECredentials`\n    1. Uses API Key if set (see `Client::setDeveloperKey`)\n    1. Uses Access Token if set (call `Client::setAccessToken`)\n    1. Automatically refreshes access tokens if one is set and the access token is expired\n - Removed `Google_Config`\n - Removed `Google_Utils`\n - [`PSR-6`][PSR 6] cache is used for all caching. As a result:\n    1. Removed `Google_Cache_Abstract`\n    1. Classes `Google_Cache_Apc`, `Google_Cache_File`, `Google_Cache_Memcache`, and\n    `Google_Cache_Null` now implement `Google\\Auth\\CacheInterface`.\n    1. Google Auth provides simple [caching utilities][Google Auth Cache] which\n   are used by default unless you provide alternatives.\n - Removed `$boundary` constructor argument for `Google_Http_MediaFileUpload`\n\n[PSR 3]: https://www.php-fig.org/psr/psr-3/\n[PSR 6]: https://www.php-fig.org/psr/psr-6/\n[Guzzle 5]: https://github.com/guzzle/guzzle\n[Guzzle 6]: http://docs.guzzlephp.org/en/latest/psr7.html\n[Monolog]: https://github.com/Seldaek/monolog\n[Google Auth]: https://github.com/google/google-auth-library-php\n[Google Auth Cache]: https://github.com/googleapis/google-auth-library-php/tree/master/src/Cache\n[Google Auth GCE]: https://github.com/google/google-auth-library-php/blob/master/src/GCECredentials.php\n[Google Auth OAuth2]: https://github.com/google/google-auth-library-php/blob/master/src/OAuth2.php\n[Google Auth Simple]: https://github.com/google/google-auth-library-php/blob/master/src/Simple.php\n[Google Auth AppIdentity]: https://github.com/google/google-auth-library-php/blob/master/src/AppIdentityCredentials.php\n[Firebase JWT]: https://github.com/firebase/php-jwt\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.318359375,
          "content": "{\n    \"name\": \"google/apiclient\",\n    \"type\": \"library\",\n    \"description\": \"Client library for Google APIs\",\n    \"keywords\": [\"google\"],\n    \"homepage\": \"http://developers.google.com/api-client-library/php\",\n    \"license\": \"Apache-2.0\",\n    \"require\": {\n        \"php\": \"^8.0\",\n        \"google/auth\": \"^1.37\",\n        \"google/apiclient-services\": \"~0.350\",\n        \"firebase/php-jwt\": \"^6.0\",\n        \"monolog/monolog\": \"^2.9||^3.0\",\n        \"phpseclib/phpseclib\": \"^3.0.36\",\n        \"guzzlehttp/guzzle\": \"^7.4.5\",\n        \"guzzlehttp/psr7\": \"^2.6\"\n    },\n    \"require-dev\": {\n        \"squizlabs/php_codesniffer\": \"^3.8\",\n        \"symfony/dom-crawler\": \"~2.1\",\n        \"symfony/css-selector\": \"~2.1\",\n        \"cache/filesystem-adapter\": \"^1.1\",\n        \"phpcompatibility/php-compatibility\": \"^9.2\",\n        \"composer/composer\": \"^1.10.23\",\n        \"phpspec/prophecy-phpunit\": \"^2.1\",\n        \"phpunit/phpunit\": \"^9.6\"\n    },\n    \"suggest\": {\n        \"cache/filesystem-adapter\": \"For caching certs and tokens (using Google\\\\Client::setCache)\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Google\\\\\": \"src/\"\n        },\n        \"files\": [\n            \"src/aliases.php\"\n        ],\n        \"classmap\": [\n            \"src/aliases.php\"\n        ]\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-main\": \"2.x-dev\"\n        }\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpcs.xml.dist",
          "type": "blob",
          "size": 8.01953125,
          "content": "<?xml version=\"1.0\"?>\n<ruleset name=\"GAPI\">\n <description>The Google API client library coding standard.</description>\n\n <!-- PHP code MUST use the long <?php ?> tags or the short-echo <?= ?> tags; it MUST NOT use the other tag variations. -->\n <rule ref=\"Generic.PHP.DisallowShortOpenTag.EchoFound\">\n  <severity>0</severity>\n </rule>\n\n <!-- PHP code MUST use only UTF-8 without BOM. -->\n <rule ref=\"Generic.Files.ByteOrderMark\"/>\n\n <!-- Check for duplicated class names -->\n <rule ref=\"Generic.Classes.DuplicateClassName\" />\n\n <!-- Class constants MUST be declared in all upper case with underscore separators. -->\n <rule ref=\"Generic.NamingConventions.UpperCaseConstantName\"/>\n\n <!-- Method names MUST be declared in camelCase(). -->\n <rule ref=\"Generic.NamingConventions.CamelCapsFunctionName\">\n  <properties>\n   <property name=\"strict\" value=\"false\"/>\n  </properties>\n  <!-- Tests have some properties that break this! -->\n  <exclude-pattern>*Test.php</exclude-pattern>\n </rule>\n\n <!-- All PHP files MUST use the Unix LF (linefeed) line ending. -->\n <rule ref=\"Generic.Files.LineEndings\">\n  <properties>\n   <property name=\"eolChar\" value=\"\\n\"/>\n  </properties>\n </rule>\n\n <!-- All PHP files MUST end with a single blank line. -->\n <rule ref=\"PSR2.Files.EndFileNewline\" />\n\n <!-- The closing ?> tag MUST be omitted from files containing only PHP. -->\n <rule ref=\"Zend.Files.ClosingTag\"/>\n\n <!-- The soft limit on line length MUST be 100 characters; automated style checkers MUST warn but MUST NOT error at the soft limit. -->\n <rule ref=\"Generic.Files.LineLength\">\n  <properties>\n   <property name=\"lineLimit\" value=\"100\"/>\n   <property name=\"absoluteLineLimit\" value=\"120\"/>\n  </properties>\n  <!-- Generated libs have some rather long class names that break this! -->\n  <exclude-pattern>Service/*.php</exclude-pattern>\n </rule>\n\n <!-- There MUST NOT be trailing whitespace at the end of non-blank lines. -->\n <rule ref=\"Squiz.WhiteSpace.SuperfluousWhitespace\">\n  <properties>\n   <property name=\"ignoreBlankLines\" value=\"true\"/>\n   </properties>\n </rule>\n <rule ref=\"Squiz.WhiteSpace.SuperfluousWhitespace.StartFile\">\n  <severity>0</severity>\n </rule>\n <rule ref=\"Squiz.WhiteSpace.SuperfluousWhitespace.EndFile\">\n  <severity>0</severity>\n </rule>\n <rule ref=\"Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines\">\n  <severity>0</severity>\n </rule>\n\n <!-- Require arrays to be defined by [] instead of array(). -->\n <rule ref=\"Generic.Arrays.DisallowLongArraySyntax\" />\n\n <!-- There MUST NOT be more than one statement per line. -->\n <rule ref=\"Generic.Formatting.DisallowMultipleStatements\"/>\n\n <!-- Code MUST use an indent of 4 spaces, and MUST NOT use tabs for indenting. -->\n <rule ref=\"Generic.WhiteSpace.ScopeIndent\">\n  <properties>\n   <property name=\"indent\" value=\"4\" />\n  </properties>\n </rule>\n <rule ref=\"Generic.WhiteSpace.DisallowTabIndent\"/>\n\n <!-- PHP keywords MUST be in lower case. -->\n <rule ref=\"Generic.PHP.LowerCaseKeyword\"/>\n\n <!-- The PHP constants true, false, and null MUST be in lower case. -->\n <rule ref=\"Generic.PHP.LowerCaseConstant\"/>\n\n <!-- The extends and implements keywords MUST be declared on the same line as the class name.\n      The opening brace for the class go MUST go on its own line; the closing brace for the class MUST go on the next line after the body.\n      Lists of implements MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one interface per line. -->\n <rule ref=\"PSR2.Classes.ClassDeclaration\">\n   <exclude-pattern>src/aliases\\.php</exclude-pattern>\n </rule>\n\n\n <!-- Visibility MUST be declared on all properties.\n      The var keyword MUST NOT be used to declare a property.\n      There MUST NOT be more than one property declared per statement.\n      Property names SHOULD NOT be prefixed with a single underscore to indicate protected or private visibility. -->\n <rule ref=\"PSR2.Classes.PropertyDeclaration\" />\n <rule ref=\"PSR2.Classes.PropertyDeclaration.Underscore\" />\n\n <!-- Visibility MUST be declared on all methods. -->\n <rule ref=\"Squiz.Scope.MethodScope\"/>\n <rule ref=\"Squiz.WhiteSpace.ScopeKeywordSpacing\"/>\n\n\n <!-- Method names MUST NOT be declared with a space after the method name. The opening brace MUST go on its own line, and the closing brace MUST go on the next line following the body. There MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. -->\n <rule ref=\"Squiz.Functions.FunctionDeclaration\"/>\n <rule ref=\"Squiz.Functions.LowercaseFunctionKeywords\"/>\n\n <!-- In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->\n <rule ref=\"Squiz.Functions.FunctionDeclarationArgumentSpacing\">\n  <properties>\n   <property name=\"equalsSpacing\" value=\"1\"/>\n  </properties>\n </rule>\n\n <!-- Method arguments with default values MUST go at the end of the argument list. -->\n <rule ref=\"PEAR.Functions.ValidDefaultValue\"/>\n\n <!-- Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. When the argument list is split across multiple lines, the closing parenthesis and opening brace MUST be placed together on their own line with one space between them. -->\n <rule ref=\"Squiz.Functions.MultiLineFunctionDeclaration\"/>\n\n <!-- When present, the abstract and final declarations MUST precede the visibility declaration.\n      When present, the static declaration MUST come after the visibility declaration. -->\n <!-- Method names SHOULD NOT be prefixed with a single underscore to indicate protected or private visibility. -->\n <rule ref=\"PSR2.Methods.MethodDeclaration\" />\n\n <!-- When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis, there MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.\n Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. -->\n <rule ref=\"Generic.Functions.FunctionCallArgumentSpacing\"/>\n <rule ref=\"PEAR.Functions.FunctionCallSignature\">\n  <properties>\n   <property name=\"allowMultipleArguments\" value=\"true\"/>\n  </properties>\n </rule>\n <rule ref=\"PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket\">\n  <severity>0</severity>\n </rule>\n <rule ref=\"PEAR.Functions.FunctionCallSignature.CloseBracketLine\">\n  <severity>0</severity>\n </rule>\n\n <!-- The general style rules for control structures are as follows:\n There MUST be one space after the control structure keyword\n There MUST NOT be a space after the opening parenthesis\n There MUST NOT be a space before the closing parenthesis\n There MUST be one space between the closing parenthesis and the opening brace\n The structure body MUST be indented once\n The closing brace MUST be on the next line after the body -->\n <rule ref=\"Squiz.ControlStructures.ControlSignature\" />\n <rule ref=\"Squiz.WhiteSpace.ScopeClosingBrace\">\n   <exclude-pattern>src/aliases\\.php</exclude-pattern>\n </rule>\n <rule ref=\"Squiz.ControlStructures.ForEachLoopDeclaration\"/>\n <rule ref=\"Squiz.ControlStructures.ForLoopDeclaration\"/>\n <rule ref=\"Squiz.ControlStructures.LowercaseDeclaration\"/>\n\n <!-- The body of each structure MUST be enclosed by braces. This standardizes how the structures look, and reduces the likelihood of introducing errors as new lines get added to the body. -->\n <rule ref=\"Generic.ControlStructures.InlineControlStructure\"/>\n\n <!-- The case statement MUST be indented once from switch, and the break keyword (or other terminating keyword) MUST be indented at the same level as the case body. There MUST be a comment such as // no break when fall-through is intentional in a non-empty case body. -->\n <rule ref=\"PSR2.ControlStructures.SwitchDeclaration\" />\n</ruleset>\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.0810546875,
          "content": "parameters:\n    treatPhpDocTypesAsCertain: false\n    level: 5\n    paths:\n    - src\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.59375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\" colors=\"true\" bootstrap=\"tests/bootstrap.php\">\n  <coverage>\n    <include>\n      <directory suffix=\".php\">./src</directory>\n    </include>\n  </coverage>\n  <testsuites>\n    <testsuite name=\"Google PHP Client Unit Test Suite\">\n      <directory>tests/Google</directory>\n    </testsuite>\n    <testsuite name=\"Google PHP Client Examples Test Suite\">\n      <directory>tests/examples</directory>\n    </testsuite>\n  </testsuites>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}