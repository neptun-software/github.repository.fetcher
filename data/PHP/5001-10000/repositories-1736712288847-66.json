{
  "metadata": {
    "timestamp": 1736712288847,
    "page": 66,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "symfony/var-dumper",
      "stars": 7415,
      "defaultBranch": "7.2",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.072265625,
          "content": "/Tests export-ignore\n/phpunit.xml.dist export-ignore\n/.git* export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "composer.lock\nphpunit.xml\nvendor/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.8720703125,
          "content": "CHANGELOG\n=========\n\n7.2\n---\n\n * Add support for `FORCE_COLOR` environment variable\n * Add support for virtual properties\n\n7.1\n---\n\n * Add support for new DOM extension classes in `DOMCaster`\n\n7.0\n---\n\n * Add argument `$label` to `VarDumper::dump()`\n * Require explicit argument when calling `VarDumper::setHandler()`\n * Remove display of backtrace in `Twig_Template`, only `Twig\\Template` is supported\n\n6.4\n---\n\n * Dump uninitialized properties\n\n6.3\n---\n\n * Add caster for `WeakMap`\n * Add support of named arguments to `dd()` and `dump()` to display the argument name\n * Add support for `Relay\\Relay`\n * Add display of invisible characters\n\n6.2\n---\n\n * Add support for `FFI\\CData` and `FFI\\CType`\n * Deprecate calling `VarDumper::setHandler()` without arguments\n\n5.4\n---\n\n * Add ability to style integer and double values independently\n * Add casters for Symfony's UUIDs and ULIDs\n * Add support for `Fiber`\n\n5.2.0\n-----\n\n * added support for PHPUnit `--colors` option\n * added `VAR_DUMPER_FORMAT=server` env var value support\n * prevent replacing the handler when the `VAR_DUMPER_FORMAT` env var is set\n\n5.1.0\n-----\n\n * added `RdKafka` support\n\n4.4.0\n-----\n\n * added `VarDumperTestTrait::setUpVarDumper()` and `VarDumperTestTrait::tearDownVarDumper()`\n   to configure casters & flags to use in tests\n * added `ImagineCaster` and infrastructure to dump images\n * added the stamps of a message after it is dispatched in `TraceableMessageBus` and `MessengerDataCollector` collected data\n * added `UuidCaster`\n * made all casters final\n * added support for the `NO_COLOR` env var (https://no-color.org/)\n\n4.3.0\n-----\n\n * added `DsCaster` to support dumping the contents of data structures from the Ds extension\n\n4.2.0\n-----\n\n * support selecting the format to use by setting the environment variable `VAR_DUMPER_FORMAT` to `html` or `cli`\n\n4.1.0\n-----\n\n * added a `ServerDumper` to send serialized Data clones to a server\n * added a `ServerDumpCommand` and `DumpServer` to run a server collecting\n   and displaying dumps on a single place with multiple formats support\n * added `CliDescriptor` and `HtmlDescriptor` descriptors for `server:dump` CLI and HTML formats support\n\n4.0.0\n-----\n\n * support for passing `\\ReflectionClass` instances to the `Caster::castObject()`\n   method has been dropped, pass class names as strings instead\n * the `Data::getRawData()` method has been removed\n * the `VarDumperTestTrait::assertDumpEquals()` method expects a 3rd `$filter = 0`\n   argument and moves `$message = ''` argument at 4th position.\n * the `VarDumperTestTrait::assertDumpMatchesFormat()` method expects a 3rd `$filter = 0`\n   argument and moves `$message = ''` argument at 4th position.\n\n3.4.0\n-----\n\n * added `AbstractCloner::setMinDepth()` function to ensure minimum tree depth\n * deprecated `MongoCaster`\n\n2.7.0\n-----\n\n * deprecated `Cloner\\Data::getLimitedClone()`. Use `withMaxDepth`, `withMaxItemsPerDepth` or `withRefHandles` instead.\n"
        },
        {
          "name": "Caster",
          "type": "tree",
          "content": null
        },
        {
          "name": "Cloner",
          "type": "tree",
          "content": null
        },
        {
          "name": "Command",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dumper",
          "type": "tree",
          "content": null
        },
        {
          "name": "Exception",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (c) 2014-present Fabien Potencier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.5927734375,
          "content": "VarDumper Component\n===================\n\nThe VarDumper component provides mechanisms for walking through any arbitrary\nPHP variable. It provides a better `dump()` function that you can use instead\nof `var_dump()`.\n\nResources\n---------\n\n * [Documentation](https://symfony.com/doc/current/components/var_dumper/introduction.html)\n * [Contributing](https://symfony.com/doc/current/contributing/index.html)\n * [Report issues](https://github.com/symfony/symfony/issues) and\n   [send Pull Requests](https://github.com/symfony/symfony/pulls)\n   in the [main Symfony repository](https://github.com/symfony/symfony)\n"
        },
        {
          "name": "Resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "Server",
          "type": "tree",
          "content": null
        },
        {
          "name": "Test",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "VarDumper.php",
          "type": "blob",
          "size": 3.9580078125,
          "content": "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Component\\VarDumper;\n\nuse Symfony\\Component\\ErrorHandler\\ErrorRenderer\\FileLinkFormatter;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\RequestStack;\nuse Symfony\\Component\\VarDumper\\Caster\\ReflectionCaster;\nuse Symfony\\Component\\VarDumper\\Cloner\\VarCloner;\nuse Symfony\\Component\\VarDumper\\Dumper\\CliDumper;\nuse Symfony\\Component\\VarDumper\\Dumper\\ContextProvider\\CliContextProvider;\nuse Symfony\\Component\\VarDumper\\Dumper\\ContextProvider\\RequestContextProvider;\nuse Symfony\\Component\\VarDumper\\Dumper\\ContextProvider\\SourceContextProvider;\nuse Symfony\\Component\\VarDumper\\Dumper\\ContextualizedDumper;\nuse Symfony\\Component\\VarDumper\\Dumper\\HtmlDumper;\nuse Symfony\\Component\\VarDumper\\Dumper\\ServerDumper;\n\n// Load the global dump() function\nrequire_once __DIR__.'/Resources/functions/dump.php';\n\n/**\n * @author Nicolas Grekas <p@tchwork.com>\n */\nclass VarDumper\n{\n    /**\n     * @var callable|null\n     */\n    private static $handler;\n\n    public static function dump(mixed $var, ?string $label = null): mixed\n    {\n        if (null === self::$handler) {\n            self::register();\n        }\n\n        return (self::$handler)($var, $label);\n    }\n\n    public static function setHandler(?callable $callable): ?callable\n    {\n        $prevHandler = self::$handler;\n\n        // Prevent replacing the handler with expected format as soon as the env var was set:\n        if (isset($_SERVER['VAR_DUMPER_FORMAT'])) {\n            return $prevHandler;\n        }\n\n        self::$handler = $callable;\n\n        return $prevHandler;\n    }\n\n    private static function register(): void\n    {\n        $cloner = new VarCloner();\n        $cloner->addCasters(ReflectionCaster::UNSET_CLOSURE_FILE_INFO);\n\n        $format = $_SERVER['VAR_DUMPER_FORMAT'] ?? null;\n        switch (true) {\n            case 'html' === $format:\n                $dumper = new HtmlDumper();\n                break;\n            case 'cli' === $format:\n                $dumper = new CliDumper();\n                break;\n            case 'server' === $format:\n            case $format && 'tcp' === parse_url($format, \\PHP_URL_SCHEME):\n                $host = 'server' === $format ? $_SERVER['VAR_DUMPER_SERVER'] ?? '127.0.0.1:9912' : $format;\n                $dumper = \\in_array(\\PHP_SAPI, ['cli', 'phpdbg', 'embed'], true) ? new CliDumper() : new HtmlDumper();\n                $dumper = new ServerDumper($host, $dumper, self::getDefaultContextProviders());\n                break;\n            default:\n                $dumper = \\in_array(\\PHP_SAPI, ['cli', 'phpdbg', 'embed'], true) ? new CliDumper() : new HtmlDumper();\n        }\n\n        if (!$dumper instanceof ServerDumper) {\n            $dumper = new ContextualizedDumper($dumper, [new SourceContextProvider()]);\n        }\n\n        self::$handler = function ($var, ?string $label = null) use ($cloner, $dumper) {\n            $var = $cloner->cloneVar($var);\n\n            if (null !== $label) {\n                $var = $var->withContext(['label' => $label]);\n            }\n\n            $dumper->dump($var);\n        };\n    }\n\n    private static function getDefaultContextProviders(): array\n    {\n        $contextProviders = [];\n\n        if (!\\in_array(\\PHP_SAPI, ['cli', 'phpdbg', 'embed'], true) && class_exists(Request::class)) {\n            $requestStack = new RequestStack();\n            $requestStack->push(Request::createFromGlobals());\n            $contextProviders['request'] = new RequestContextProvider($requestStack);\n        }\n\n        $fileLinkFormatter = class_exists(FileLinkFormatter::class) ? new FileLinkFormatter(null, $requestStack ?? null) : null;\n\n        return $contextProviders + [\n            'cli' => new CliContextProvider(),\n            'source' => new SourceContextProvider(null, null, $fileLinkFormatter),\n        ];\n    }\n}\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.1484375,
          "content": "{\n    \"name\": \"symfony/var-dumper\",\n    \"type\": \"library\",\n    \"description\": \"Provides mechanisms for walking through any arbitrary PHP variable\",\n    \"keywords\": [\"dump\", \"debug\"],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Nicolas Grekas\",\n            \"email\": \"p@tchwork.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=8.2\",\n        \"symfony/polyfill-mbstring\": \"~1.0\"\n    },\n    \"require-dev\": {\n        \"ext-iconv\": \"*\",\n        \"symfony/console\": \"^6.4|^7.0\",\n        \"symfony/http-kernel\": \"^6.4|^7.0\",\n        \"symfony/process\": \"^6.4|^7.0\",\n        \"symfony/uid\": \"^6.4|^7.0\",\n        \"twig/twig\": \"^3.12\"\n    },\n    \"conflict\": {\n        \"symfony/console\": \"<6.4\"\n    },\n    \"autoload\": {\n        \"files\": [ \"Resources/functions/dump.php\" ],\n        \"psr-4\": { \"Symfony\\\\Component\\\\VarDumper\\\\\": \"\" },\n        \"exclude-from-classmap\": [\n            \"/Tests/\"\n        ]\n    },\n    \"bin\": [\n        \"Resources/bin/var-dump-server\"\n    ],\n    \"minimum-stability\": \"dev\"\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 1.0185546875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"http://schema.phpunit.de/9.3/phpunit.xsd\"\n         backupGlobals=\"false\"\n         colors=\"true\"\n         bootstrap=\"vendor/autoload.php\"\n         failOnRisky=\"true\"\n         failOnWarning=\"true\"\n>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\" />\n        <env name=\"DUMP_LIGHT_ARRAY\" value=\"\" />\n        <env name=\"DUMP_STRING_LENGTH\" value=\"\" />\n    </php>\n\n    <testsuites>\n        <testsuite name=\"Symfony VarDumper Component Test Suite\">\n            <directory>./Tests/</directory>\n            <directory suffix=\".phpt\">./Tests/Dumper/functions/</directory>\n        </testsuite>\n    </testsuites>\n\n    <coverage>\n        <include>\n            <directory>./</directory>\n        </include>\n        <exclude>\n            <directory>./Resources</directory>\n            <directory>./Tests</directory>\n            <directory>./vendor</directory>\n        </exclude>\n    </coverage>\n</phpunit>\n"
        }
      ]
    }
  ]
}