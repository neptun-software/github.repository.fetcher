{
  "metadata": {
    "timestamp": 1736712282294,
    "page": 54,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "webmozarts/assert",
      "stars": 7580,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1611328125,
          "content": "root = true\n\n[*]\ncharset=utf-8\nend_of_line=lf\ntrim_trailing_whitespace=true\ninsert_final_newline=true\nindent_style=space\nindent_size=4\n\n[*.{yaml,yml}]\nindent_size=2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3515625,
          "content": "/.gitattributes       export-ignore\n/.gitignore           export-ignore\n/.github              export-ignore\n/.php_cs              export-ignore\n/.editorconfig        export-ignore\n/psalm.xml            export-ignore\n/bin                  export-ignore\n/ci                   export-ignore\n/phpunit.xml.dist     export-ignore\n/tests                export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0634765625,
          "content": "vendor/\n/composer.lock\n.php-cs-fixer.cache\n.phpunit.result.cache\n"
        },
        {
          "name": ".php-cs-fixer.php",
          "type": "blob",
          "size": 0.7646484375,
          "content": "<?php\n\n$finder = PhpCsFixer\\Finder::create()\n    ->in(__DIR__.'/src')\n    ->in(__DIR__.'/tests')\n;\n\nreturn (new PhpCsFixer\\Config())\n    ->setRiskyAllowed(true)\n    ->setRules([\n        '@PSR2' => true,\n        '@Symfony' => true,\n        'ordered_imports' => true,\n        'array_syntax' => ['syntax' => 'long'],\n        'fully_qualified_strict_types' => false,\n        'global_namespace_import' => true,\n        'no_superfluous_phpdoc_tags' => false,\n        'phpdoc_annotation_without_dot' => false,\n        'phpdoc_types_order' => false,\n        'phpdoc_separation' => ['skip_unlisted_annotations' => true],\n        'phpdoc_summary' => false,\n        'phpdoc_to_comment' => false,\n        'phpdoc_align' => false,\n        'yoda_style' => false,\n    ])\n    ->setFinder($finder)\n;\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.9560546875,
          "content": "Changelog\n=========\n\n## UNRELEASED\n\n### Fixed\n\n- Corrected messages and typos in various assertions\n\n## 1.11.0\n\n### Added\n\n* Added explicit (non-magic) `allNullOr*` methods, with `@psalm-assert` annotations, for better Psalm support.\n\n### Changed\n\n* Trait methods will now check the assertion themselves, instead of using `__callStatic`\n* `isList` will now deal correctly with (modified) lists that contain `NaN`\n* `reportInvalidArgument` now has a return type of `never`.\n\n### Removed\n\n* Removed `symfony/polyfill-ctype` as a dependency, and require `ext-ctype` instead.\n  * You can still require the `symfony/polyfill-ctype` in your project if you need it, as it provides `ext-ctype`\n\n## 1.10.0\n\n### Added\n\n* On invalid assertion, we throw a `Webmozart\\Assert\\InvalidArgumentException`\n* Added `Assert::positiveInteger()`\n\n### Changed\n\n* Using a trait with real implementations of `all*()` and `nullOr*()` methods to improve psalm compatibility.\n\n### Removed\n\n* Support for PHP <7.2\n\n## 1.9.1\n\n## Fixed\n\n* provisional support for PHP 8.0\n\n## 1.9.0\n\n* added better Psalm support for `all*` & `nullOr*` methods\n* These methods are now understood by Psalm through a mixin. You may need a newer version of Psalm in order to use this\n* added `@psalm-pure` annotation to `Assert::notFalse()`\n* added more `@psalm-assert` annotations where appropriate\n\n## Changed\n\n* the `all*` & `nullOr*` methods are now declared on an interface, instead of `@method` annotations.\nThis interface is linked to the `Assert` class with a `@mixin` annotation. Most IDEs have supported this\nfor a long time, and you should not lose any autocompletion capabilities. PHPStan has supported this since\nversion `0.12.20`. This package is marked incompatible (with a composer conflict) with phpstan version prior to that.\nIf you do not use PHPStan than this does not matter.\n\n## 1.8.0\n\n### Added\n\n* added `Assert::notStartsWith()`\n* added `Assert::notEndsWith()`\n* added `Assert::inArray()`\n* added `@psalm-pure` annotations to pure assertions\n\n### Fixed\n\n* Exception messages of comparisons between `DateTime(Immutable)` objects now display their date & time.\n* Custom Exception messages for `Assert::count()` now use the values to render the exception message.\n\n## 1.7.0 (2020-02-14)\n\n### Added\n\n* added `Assert::notFalse()`\n* added `Assert::isAOf()`\n* added `Assert::isAnyOf()`\n* added `Assert::isNotA()`\n\n## 1.6.0 (2019-11-24)\n\n### Added\n\n* added `Assert::validArrayKey()`\n* added `Assert::isNonEmptyList()`\n* added `Assert::isNonEmptyMap()`\n* added `@throws InvalidArgumentException` annotations to all methods that throw.\n* added `@psalm-assert` for the list type to the `isList` assertion.\n\n### Fixed\n\n* `ResourceBundle` & `SimpleXMLElement` now pass the `isCountable` assertions.\nThey are countable, without implementing the `Countable` interface.\n* The doc block of `range` now has the proper variables.\n* An empty array will now pass `isList` and `isMap`. As it is a valid form of both.\nIf a non-empty variant is needed, use `isNonEmptyList` or `isNonEmptyMap`.\n\n### Changed\n\n* Removed some `@psalm-assert` annotations, that were 'side effect' assertions See:\n  * [#144](https://github.com/webmozart/assert/pull/144)\n  * [#145](https://github.com/webmozart/assert/issues/145)\n  * [#146](https://github.com/webmozart/assert/pull/146)\n  * [#150](https://github.com/webmozart/assert/pull/150)\n* If you use Psalm, the minimum version needed is `3.6.0`. Which is enforced through a composer conflict.\nIf you don't use Psalm, then this has no impact.\n\n## 1.5.0 (2019-08-24)\n\n### Added\n\n* added `Assert::uniqueValues()`\n* added `Assert::unicodeLetters()`\n* added: `Assert::email()`\n* added support for [Psalm](https://github.com/vimeo/psalm), by adding `@psalm-assert` annotations where appropriate.\n\n### Fixed\n\n* `Assert::endsWith()` would not give the correct result when dealing with a multibyte suffix.\n* `Assert::length(), minLength, maxLength, lengthBetween` would not give the correct result when dealing with multibyte characters.\n\n**NOTE**: These 2 changes may break your assertions if you relied on the fact that multibyte characters didn't behave correctly.\n\n### Changed\n\n* The names of some variables have been updated to better reflect what they are.\n* All function calls are now in their FQN form, slightly increasing performance.\n* Tests are now properly ran against HHVM-3.30 and PHP nightly.\n\n### Deprecation\n\n* deprecated `Assert::isTraversable()` in favor of `Assert::isIterable()`\n  * This was already done in 1.3.0, but it was only done through a silenced `trigger_error`. It is now annotated as well.\n\n## 1.4.0 (2018-12-25)\n\n### Added\n\n* added `Assert::ip()`\n* added `Assert::ipv4()`\n* added `Assert::ipv6()`\n* added `Assert::notRegex()`\n* added `Assert::interfaceExists()`\n* added `Assert::isList()`\n* added `Assert::isMap()`\n* added polyfill for ctype\n\n### Fixed\n\n* Special case when comparing objects implementing `__toString()`\n\n## 1.3.0 (2018-01-29)\n\n### Added\n\n* added `Assert::minCount()`\n* added `Assert::maxCount()`\n* added `Assert::countBetween()`\n* added `Assert::isCountable()`\n* added `Assert::notWhitespaceOnly()`\n* added `Assert::natural()`\n* added `Assert::notContains()`\n* added `Assert::isArrayAccessible()`\n* added `Assert::isInstanceOfAny()`\n* added `Assert::isIterable()`\n\n### Fixed\n\n* `stringNotEmpty` will no longer report \"0\" is an empty string\n\n### Deprecation\n\n* deprecated `Assert::isTraversable()` in favor of `Assert::isIterable()`\n\n## 1.2.0 (2016-11-23)\n\n * added `Assert::throws()`\n * added `Assert::count()`\n * added extension point `Assert::reportInvalidArgument()` for custom subclasses\n\n## 1.1.0 (2016-08-09)\n\n * added `Assert::object()`\n * added `Assert::propertyExists()`\n * added `Assert::propertyNotExists()`\n * added `Assert::methodExists()`\n * added `Assert::methodNotExists()`\n * added `Assert::uuid()`\n\n## 1.0.2 (2015-08-24)\n\n * integrated Style CI\n * add tests for minimum package dependencies on Travis CI\n\n## 1.0.1 (2015-05-12)\n\n * added support for PHP 5.3.3\n\n## 1.0.0 (2015-05-12)\n\n * first stable release\n\n## 1.0.0-beta (2015-03-19)\n\n * first beta release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Bernhard Schussek\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.6943359375,
          "content": "Webmozart Assert\n================\n\n[![Latest Stable Version](https://poser.pugx.org/webmozart/assert/v/stable.svg)](https://packagist.org/packages/webmozart/assert)\n[![Total Downloads](https://poser.pugx.org/webmozart/assert/downloads.svg)](https://packagist.org/packages/webmozart/assert)\n\nThis library contains efficient assertions to test the input and output of\nyour methods. With these assertions, you can greatly reduce the amount of coding\nneeded to write a safe implementation.\n\nAll assertions in the [`Assert`] class throw an `Webmozart\\Assert\\InvalidArgumentException` if\nthey fail.\n\nFAQ\n---\n\n**What's the difference to [beberlei/assert]?**\n\nThis library is heavily inspired by Benjamin Eberlei's wonderful [assert package],\nbut fixes a usability issue with error messages that can't be fixed there without\nbreaking backwards compatibility.\n\nThis package features usable error messages by default. However, you can also\neasily write custom error messages:\n\n```\nAssert::string($path, 'The path is expected to be a string. Got: %s');\n```\n\nIn [beberlei/assert], the ordering of the `%s` placeholders is different for\nevery assertion. This package, on the contrary, provides consistent placeholder\nordering for all assertions:\n\n* `%s`: The tested value as string, e.g. `\"/foo/bar\"`.\n* `%2$s`, `%3$s`, ...: Additional assertion-specific values, e.g. the\n  minimum/maximum length, allowed values, etc.\n\nCheck the source code of the assertions to find out details about the additional\navailable placeholders.\n\nInstallation\n------------\n\nUse [Composer] to install the package:\n\n```bash\ncomposer require webmozart/assert\n```\n\nExample\n-------\n\n```php\nuse Webmozart\\Assert\\Assert;\n\nclass Employee\n{\n    public function __construct($id)\n    {\n        Assert::integer($id, 'The employee ID must be an integer. Got: %s');\n        Assert::greaterThan($id, 0, 'The employee ID must be a positive integer. Got: %s');\n    }\n}\n```\n\nIf you create an employee with an invalid ID, an exception is thrown:\n\n```php\nnew Employee('foobar');\n// => Webmozart\\Assert\\InvalidArgumentException:\n//    The employee ID must be an integer. Got: string\n\nnew Employee(-10);\n// => Webmozart\\Assert\\InvalidArgumentException:\n//    The employee ID must be a positive integer. Got: -10\n```\n\nAssertions\n----------\n\nThe [`Assert`] class provides the following assertions:\n\n### Type Assertions\n\nMethod                                                   | Description\n-------------------------------------------------------- | --------------------------------------------------\n`string($value, $message = '')`                          | Check that a value is a string\n`stringNotEmpty($value, $message = '')`                  | Check that a value is a non-empty string\n`integer($value, $message = '')`                         | Check that a value is an integer\n`integerish($value, $message = '')`                      | Check that a value casts to an integer\n`positiveInteger($value, $message = '')`                 | Check that a value is a positive (non-zero) integer\n`float($value, $message = '')`                           | Check that a value is a float\n`numeric($value, $message = '')`                         | Check that a value is numeric\n`natural($value, $message = '')`                         | Check that a value is a non-negative integer\n`boolean($value, $message = '')`                         | Check that a value is a boolean\n`scalar($value, $message = '')`                          | Check that a value is a scalar\n`object($value, $message = '')`                          | Check that a value is an object\n`resource($value, $type = null, $message = '')`          | Check that a value is a resource\n`isCallable($value, $message = '')`                      | Check that a value is a callable\n`isArray($value, $message = '')`                         | Check that a value is an array\n`isTraversable($value, $message = '')`  (deprecated)     | Check that a value is an array or a `\\Traversable`\n`isIterable($value, $message = '')`                      | Check that a value is an array or a `\\Traversable`\n`isCountable($value, $message = '')`                     | Check that a value is an array or a `\\Countable`\n`isInstanceOf($value, $class, $message = '')`            | Check that a value is an `instanceof` a class\n`isInstanceOfAny($value, array $classes, $message = '')` | Check that a value is an `instanceof` at least one class on the array of classes\n`notInstanceOf($value, $class, $message = '')`           | Check that a value is not an `instanceof` a class\n`isAOf($value, $class, $message = '')`                   | Check that a value is of the class or has one of its parents\n`isAnyOf($value, array $classes, $message = '')`         | Check that a value is of at least one of the classes or has one of its parents\n`isNotA($value, $class, $message = '')`                  | Check that a value is not of the class or has not one of its parents\n`isArrayAccessible($value, $message = '')`               | Check that a value can be accessed as an array\n`uniqueValues($values, $message = '')`                   | Check that the given array contains unique values\n\n### Comparison Assertions\n\nMethod                                          | Description\n----------------------------------------------- | ------------------------------------------------------------------\n`true($value, $message = '')`                   | Check that a value is `true`\n`false($value, $message = '')`                  | Check that a value is `false`\n`notFalse($value, $message = '')`               | Check that a value is not `false`\n`null($value, $message = '')`                   | Check that a value is `null`\n`notNull($value, $message = '')`                | Check that a value is not `null`\n`isEmpty($value, $message = '')`                | Check that a value is `empty()`\n`notEmpty($value, $message = '')`               | Check that a value is not `empty()`\n`eq($value, $value2, $message = '')`            | Check that a value equals another (`==`)\n`notEq($value, $value2, $message = '')`         | Check that a value does not equal another (`!=`)\n`same($value, $value2, $message = '')`          | Check that a value is identical to another (`===`)\n`notSame($value, $value2, $message = '')`       | Check that a value is not identical to another (`!==`)\n`greaterThan($value, $value2, $message = '')`   | Check that a value is greater than another\n`greaterThanEq($value, $value2, $message = '')` | Check that a value is greater than or equal to another\n`lessThan($value, $value2, $message = '')`      | Check that a value is less than another\n`lessThanEq($value, $value2, $message = '')`    | Check that a value is less than or equal to another\n`range($value, $min, $max, $message = '')`      | Check that a value is within a range\n`inArray($value, array $values, $message = '')` | Check that a value is one of a list of values\n`oneOf($value, array $values, $message = '')`   | Check that a value is one of a list of values (alias of `inArray`)\n\n### String Assertions\n\nYou should check that a value is a string with `Assert::string()` before making\nany of the following assertions.\n\nMethod                                              | Description\n--------------------------------------------------- | -----------------------------------------------------------------\n`contains($value, $subString, $message = '')`       | Check that a string contains a substring\n`notContains($value, $subString, $message = '')`    | Check that a string does not contain a substring\n`startsWith($value, $prefix, $message = '')`        | Check that a string has a prefix\n`notStartsWith($value, $prefix, $message = '')`     | Check that a string does not have a prefix\n`startsWithLetter($value, $message = '')`           | Check that a string starts with a letter\n`endsWith($value, $suffix, $message = '')`          | Check that a string has a suffix\n`notEndsWith($value, $suffix, $message = '')`       | Check that a string does not have a suffix\n`regex($value, $pattern, $message = '')`            | Check that a string matches a regular expression\n`notRegex($value, $pattern, $message = '')`         | Check that a string does not match a regular expression\n`unicodeLetters($value, $message = '')`             | Check that a string contains Unicode letters only\n`alpha($value, $message = '')`                      | Check that a string contains letters only\n`digits($value, $message = '')`                     | Check that a string contains digits only\n`alnum($value, $message = '')`                      | Check that a string contains letters and digits only\n`lower($value, $message = '')`                      | Check that a string contains lowercase characters only\n`upper($value, $message = '')`                      | Check that a string contains uppercase characters only\n`length($value, $length, $message = '')`            | Check that a string has a certain number of characters\n`minLength($value, $min, $message = '')`            | Check that a string has at least a certain number of characters\n`maxLength($value, $max, $message = '')`            | Check that a string has at most a certain number of characters\n`lengthBetween($value, $min, $max, $message = '')`  | Check that a string has a length in the given range\n`uuid($value, $message = '')`                       | Check that a string is a valid UUID\n`ip($value, $message = '')`                         | Check that a string is a valid IP (either IPv4 or IPv6)\n`ipv4($value, $message = '')`                       | Check that a string is a valid IPv4\n`ipv6($value, $message = '')`                       | Check that a string is a valid IPv6\n`email($value, $message = '')`                      | Check that a string is a valid e-mail address\n`notWhitespaceOnly($value, $message = '')`          | Check that a string contains at least one non-whitespace character\n\n### File Assertions\n\nMethod                              | Description\n----------------------------------- | --------------------------------------------------\n`fileExists($value, $message = '')` | Check that a value is an existing path\n`file($value, $message = '')`       | Check that a value is an existing file\n`directory($value, $message = '')`  | Check that a value is an existing directory\n`readable($value, $message = '')`   | Check that a value is a readable path\n`writable($value, $message = '')`   | Check that a value is a writable path\n\n### Object Assertions\n\nMethod                                                | Description\n----------------------------------------------------- | --------------------------------------------------\n`classExists($value, $message = '')`                  | Check that a value is an existing class name\n`subclassOf($value, $class, $message = '')`           | Check that a class is a subclass of another\n`interfaceExists($value, $message = '')`              | Check that a value is an existing interface name\n`implementsInterface($value, $class, $message = '')`  | Check that a class implements an interface\n`propertyExists($value, $property, $message = '')`    | Check that a property exists in a class/object\n`propertyNotExists($value, $property, $message = '')` | Check that a property does not exist in a class/object\n`methodExists($value, $method, $message = '')`        | Check that a method exists in a class/object\n`methodNotExists($value, $method, $message = '')`     | Check that a method does not exist in a class/object\n\n### Array Assertions\n\nMethod                                             | Description\n-------------------------------------------------- | ------------------------------------------------------------------\n`keyExists($array, $key, $message = '')`           | Check that a key exists in an array\n`keyNotExists($array, $key, $message = '')`        | Check that a key does not exist in an array\n`validArrayKey($key, $message = '')`               | Check that a value is a valid array key (int or string)\n`count($array, $number, $message = '')`            | Check that an array contains a specific number of elements\n`minCount($array, $min, $message = '')`            | Check that an array contains at least a certain number of elements\n`maxCount($array, $max, $message = '')`            | Check that an array contains at most a certain number of elements\n`countBetween($array, $min, $max, $message = '')`  | Check that an array has a count in the given range\n`isList($array, $message = '')`                    | Check that an array is a non-associative list\n`isNonEmptyList($array, $message = '')`            | Check that an array is a non-associative list, and not empty\n`isMap($array, $message = '')`                     | Check that an array is associative and has strings as keys\n`isNonEmptyMap($array, $message = '')`             | Check that an array is associative and has strings as keys, and is not empty\n\n### Function Assertions\n\nMethod                                      | Description\n------------------------------------------- | -----------------------------------------------------------------------------------------------------\n`throws($closure, $class, $message = '')`   | Check that a function throws a certain exception. Subclasses of the exception class will be accepted.\n\n### Collection Assertions\n\nAll of the above assertions can be prefixed with `all*()` to test the contents\nof an array or a `\\Traversable`:\n\n```php\nAssert::allIsInstanceOf($employees, 'Acme\\Employee');\n```\n\n### Nullable Assertions\n\nAll of the above assertions can be prefixed with `nullOr*()` to run the\nassertion only if the value is not `null`:\n\n```php\nAssert::nullOrString($middleName, 'The middle name must be a string or null. Got: %s');\n```\n\n### Extending Assert\n\nThe `Assert` class comes with a few methods, which can be overridden to change the class behaviour. You can also extend it to\nadd your own assertions.\n\n#### Overriding methods\n\nOverriding the following methods in your assertion class allows you to change the behaviour of the assertions:\n\n* `public static function __callStatic($name, $arguments)`\n  * This method is used to 'create' the `nullOr` and `all` versions of the assertions.\n* `protected static function valueToString($value)`\n  * This method is used for error messages, to convert the value to a string value for displaying. You could use this for representing a value object with a `__toString` method for example.\n* `protected static function typeToString($value)`\n  * This method is used for error messages, to convert a value to a string representing its type.\n* `protected static function strlen($value)`\n  * This method is used to calculate string length for relevant methods, using the `mb_strlen` if available and useful.\n* `protected static function reportInvalidArgument($message)`\n  * This method is called when an assertion fails, with the specified error message. Here you can throw your own exception, or log something.\n\n## Static analysis support\n\nWhere applicable, assertion functions are annotated to support Psalm's\n[Assertion syntax](https://psalm.dev/docs/annotating_code/assertion_syntax/).\nA dedicated [PHPStan Plugin](https://github.com/phpstan/phpstan-webmozart-assert) is\nrequired for proper type support.\n\nAuthors\n-------\n\n* [Bernhard Schussek] a.k.a. [@webmozart]\n* [The Community Contributors]\n\nContribute\n----------\n\nContributions to the package are always welcome!\n\n* Report any bugs or issues you find on the [issue tracker].\n* You can grab the source code at the package's [Git repository].\n\nLicense\n-------\n\nAll contents of this package are licensed under the [MIT license].\n\n[beberlei/assert]: https://github.com/beberlei/assert\n[assert package]: https://github.com/beberlei/assert\n[Composer]: https://getcomposer.org\n[Bernhard Schussek]: https://webmozarts.com\n[The Community Contributors]: https://github.com/webmozart/assert/graphs/contributors\n[issue tracker]: https://github.com/webmozart/assert/issues\n[Git repository]: https://github.com/webmozart/assert\n[@webmozart]: https://twitter.com/webmozart\n[MIT license]: LICENSE\n[`Assert`]: src/Assert.php\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.490234375,
          "content": "{\n    \"name\": \"webmozart/assert\",\n    \"description\": \"Assertions to validate method input/output with nice error messages.\",\n    \"license\": \"MIT\",\n    \"keywords\": [\n        \"assert\",\n        \"check\",\n        \"validate\"\n    ],\n    \"authors\": [\n        {\n            \"name\": \"Bernhard Schussek\",\n            \"email\": \"bschussek@gmail.com\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^7.2 || ^8.0\",\n        \"ext-ctype\": \"*\"\n    },\n    \"suggest\": {\n        \"ext-simplexml\": \"\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Webmozart\\\\Assert\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Webmozart\\\\Assert\\\\Bin\\\\\": \"bin/src\",\n            \"Webmozart\\\\Assert\\\\Tests\\\\\": \"tests/\"\n        }\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"1.10-dev\"\n        }\n    },\n    \"scripts\": {\n        \"install-tools\": [\n            \"composer --working-dir=tools/php-cs-fixer install\",\n            \"composer --working-dir=tools/phpunit install\",\n            \"composer --working-dir=tools/psalm install\",\n            \"composer --working-dir=tools/roave-bc-check install\"\n        ],\n        \"bc-check\": \"./tools/roave-bc-check/vendor/bin/roave-backward-compatibility-check\",\n        \"cs-check\" : \"./tools/php-cs-fixer/vendor/bin/php-cs-fixer check\",\n        \"cs-fix\": \"./tools/php-cs-fixer/vendor/bin/php-cs-fixer fix\",\n        \"static-analysis\": \"./tools/psalm/vendor/bin/psalm --threads=4 --root=$(pwd)\",\n        \"test\": \"./tools/phpunit/vendor/bin/phpunit\"\n    }\n}\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.638671875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:noNamespaceSchemaLocation=\"./vendor/phpunit/phpunit/phpunit.xsd\"\n        bootstrap=\"vendor/autoload.php\"\n        colors=\"true\"\n        verbose=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"Webmozart Assert Test Suite\">\n            <directory>./tests/</directory>\n            <exclude>./tests/static-analysis</exclude>\n        </testsuite>\n    </testsuites>\n\n    <!-- Whitelist for code coverage -->\n    <filter>\n        <whitelist>\n            <directory suffix=\".php\">./src/</directory>\n        </whitelist>\n    </filter>\n</phpunit>\n"
        },
        {
          "name": "psalm.xml",
          "type": "blob",
          "size": 0.3994140625,
          "content": "<?xml version=\"1.0\"?>\n<psalm\n    errorLevel=\"8\"\n    resolveFromConfigFile=\"true\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"https://getpsalm.org/schema/config\"\n    xsi:schemaLocation=\"https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd\"\n>\n    <projectFiles>\n        <directory name=\"bin\"/>\n        <directory name=\"tests/static-analysis\" />\n    </projectFiles>\n</psalm>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}