{
  "metadata": {
    "timestamp": 1736712335147,
    "page": 152,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "theseer/tokenizer",
      "stars": 5174,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2724609375,
          "content": "/.github         export-ignore\n/tests           export-ignore\n/.gitattributes  export-ignore\n/.gitignore      export-ignore\n/.php_cs.dist    export-ignore\n/.travis.yml     export-ignore\n/build.xml       export-ignore\n/phive.xml       export-ignore\n/phpunit.xml     export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0830078125,
          "content": "/.idea\n/.php_cs.cache\n/src/autoload.php\n/tools\n/vendor\n/build\n/.phpunit.result.cache\n"
        },
        {
          "name": ".php_cs.dist",
          "type": "blob",
          "size": 11.4384765625,
          "content": "<?php\n\nrequire __DIR__ . '/tools/php-cs-fixer.d/PhpdocSingleLineVarFixer.php';\n\nreturn PhpCsFixer\\Config::create()\n    ->registerCustomFixers([\n        new \\PharIo\\CSFixer\\PhpdocSingleLineVarFixer()\n    ])\n    ->setRiskyAllowed(true)\n    ->setRules(\n        [\n            'PharIo/phpdoc_single_line_var_fixer'           => true,\n\n            'align_multiline_comment'                       => true,\n            'array_indentation'                             => true,\n            'array_syntax'                                  => ['syntax' => 'short'],\n            'binary_operator_spaces'                        => [\n                'operators' => [\n                    '='  => 'align_single_space_minimal',\n                    '=>' => 'align',\n                ],\n            ],\n            'blank_line_after_namespace'                    => true,\n            'blank_line_after_opening_tag'                  => false,\n            'blank_line_before_statement'                   => [\n                'statements' => [\n                    'break',\n                    'continue',\n                    'declare',\n                    'do',\n                    'for',\n                    'foreach',\n                    'if',\n                    'include',\n                    'include_once',\n                    'require',\n                    'require_once',\n                    'return',\n                    'switch',\n                    'throw',\n                    'try',\n                    'while',\n                    'yield',\n                ],\n            ],\n            'braces'                                        => [\n                'allow_single_line_closure'                   => false,\n                'position_after_anonymous_constructs'         => 'same',\n                'position_after_control_structures'           => 'same',\n                'position_after_functions_and_oop_constructs' => 'same'\n            ],\n            'cast_spaces'                                   => ['space' => 'none'],\n\n            // This fixer removes the blank line at class start, no way to disable that, so we disable the fixer :(\n            //'class_attributes_separation'                   => ['elements' => ['const', 'method', 'property']],\n\n            'combine_consecutive_issets'                    => true,\n            'combine_consecutive_unsets'                    => true,\n            'compact_nullable_typehint'                     => true,\n            'concat_space'                                  => ['spacing' => 'one'],\n            'date_time_immutable'                           => true,\n            'declare_equal_normalize'                       => ['space' => 'single'],\n            'declare_strict_types'                          => true,\n            'dir_constant'                                  => true,\n            'elseif'                                        => true,\n            'encoding'                                      => true,\n            'full_opening_tag'                              => true,\n            'fully_qualified_strict_types'                  => true,\n            'function_declaration'                          => [\n                'closure_function_spacing' => 'one'\n            ],\n            'header_comment'                                => false,\n            'indentation_type'                              => true,\n            'is_null'                                       => true,\n            'line_ending'                                   => true,\n            'list_syntax'                                   => ['syntax' => 'short'],\n            'logical_operators'                             => true,\n            'lowercase_cast'                                => true,\n            'lowercase_constants'                           => true,\n            'lowercase_keywords'                            => true,\n            'lowercase_static_reference'                    => true,\n            'magic_constant_casing'                         => true,\n            'method_argument_space'                         => ['ensure_fully_multiline' => true],\n            'modernize_types_casting'                       => true,\n            'multiline_comment_opening_closing'             => true,\n            'multiline_whitespace_before_semicolons'        => true,\n            'native_constant_invocation'                    => true,\n            'native_function_casing'                        => true,\n            'native_function_invocation'                    => true,\n            'new_with_braces'                               => false,\n            'no_alias_functions'                            => true,\n            'no_alternative_syntax'                         => true,\n            'no_blank_lines_after_class_opening'            => false,\n            'no_blank_lines_after_phpdoc'                   => true,\n            'no_blank_lines_before_namespace'               => true,\n            'no_closing_tag'                                => true,\n            'no_empty_comment'                              => true,\n            'no_empty_phpdoc'                               => true,\n            'no_empty_statement'                            => true,\n            'no_extra_blank_lines'                          => true,\n            'no_homoglyph_names'                            => true,\n            'no_leading_import_slash'                       => true,\n            'no_leading_namespace_whitespace'               => true,\n            'no_mixed_echo_print'                           => ['use' => 'print'],\n            'no_multiline_whitespace_around_double_arrow'   => true,\n            'no_null_property_initialization'               => true,\n            'no_php4_constructor'                           => true,\n            'no_short_bool_cast'                            => true,\n            'no_short_echo_tag'                             => true,\n            'no_singleline_whitespace_before_semicolons'    => true,\n            'no_spaces_after_function_name'                 => true,\n            'no_spaces_inside_parenthesis'                  => true,\n            'no_superfluous_elseif'                         => true,\n            'no_superfluous_phpdoc_tags'                    => true,\n            'no_trailing_comma_in_list_call'                => true,\n            'no_trailing_comma_in_singleline_array'         => true,\n            'no_trailing_whitespace'                        => true,\n            'no_trailing_whitespace_in_comment'             => true,\n            'no_unneeded_control_parentheses'               => false,\n            'no_unneeded_curly_braces'                      => false,\n            'no_unneeded_final_method'                      => true,\n            'no_unreachable_default_argument_value'         => true,\n            'no_unset_on_property'                          => true,\n            'no_unused_imports'                             => true,\n            'no_useless_else'                               => true,\n            'no_useless_return'                             => true,\n            'no_whitespace_before_comma_in_array'           => true,\n            'no_whitespace_in_blank_line'                   => true,\n            'non_printable_character'                       => true,\n            'normalize_index_brace'                         => true,\n            'object_operator_without_whitespace'            => true,\n            'ordered_class_elements'                        => [\n                'order' => [\n                    'use_trait',\n                    'constant_public',\n                    'constant_protected',\n                    'constant_private',\n                    'property_public_static',\n                    'property_protected_static',\n                    'property_private_static',\n                    'property_public',\n                    'property_protected',\n                    'property_private',\n                    'method_public_static',\n                    'construct',\n                    'destruct',\n                    'magic',\n                    'phpunit',\n                    'method_public',\n                    'method_protected',\n                    'method_private',\n                    'method_protected_static',\n                    'method_private_static',\n                ],\n            ],\n            'ordered_imports'                               => true,\n            'phpdoc_add_missing_param_annotation'           => true,\n            'phpdoc_align'                                  => true,\n            'phpdoc_annotation_without_dot'                 => true,\n            'phpdoc_indent'                                 => true,\n            'phpdoc_no_access'                              => true,\n            'phpdoc_no_empty_return'                        => true,\n            'phpdoc_no_package'                             => true,\n            'phpdoc_order'                                  => true,\n            'phpdoc_return_self_reference'                  => true,\n            'phpdoc_scalar'                                 => true,\n            'phpdoc_separation'                             => true,\n            'phpdoc_single_line_var_spacing'                => true,\n            'phpdoc_to_comment'                             => false,\n            'phpdoc_trim'                                   => true,\n            'phpdoc_trim_consecutive_blank_line_separation' => true,\n            'phpdoc_types'                                  => ['groups' => ['simple', 'meta']],\n            'phpdoc_types_order'                            => true,\n            'phpdoc_to_return_type'                         => true,\n            'phpdoc_var_without_name'                       => true,\n            'pow_to_exponentiation'                         => true,\n            'protected_to_private'                          => true,\n            'return_assignment'                             => true,\n            'return_type_declaration'                       => ['space_before' => 'none'],\n            'self_accessor'                                 => false,\n            'semicolon_after_instruction'                   => true,\n            'set_type_to_cast'                              => true,\n            'short_scalar_cast'                             => true,\n            'simplified_null_return'                        => true,\n            'single_blank_line_at_eof'                      => true,\n            'single_import_per_statement'                   => true,\n            'single_line_after_imports'                     => true,\n            'single_quote'                                  => true,\n            'standardize_not_equals'                        => true,\n            'ternary_to_null_coalescing'                    => true,\n            'trailing_comma_in_multiline_array'             => false,\n            'trim_array_spaces'                             => true,\n            'unary_operator_spaces'                         => true,\n            'visibility_required'                           => [\n                'elements' => [\n                    'const',\n                    'method',\n                    'property',\n                ],\n            ],\n            'void_return'                                   => true,\n            'whitespace_after_comma_in_array'               => true,\n            'yoda_style'                                    => false\n        ]\n    )\n    ->setFinder(\n        PhpCsFixer\\Finder::create()\n            ->files()\n            ->in(__DIR__ . '/src')\n            ->in(__DIR__ . '/tests')\n            ->notName('*.phpt')\n            ->notName('autoload.php')\n    );\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.0615234375,
          "content": "# Changelog\n\nAll notable changes to Tokenizer are documented in this file using the [Keep a CHANGELOG](http://keepachangelog.com/) principles.\n\n## [1.2.3] - 2024-03-03\n\n### Changed\n\n* Do not use implicitly nullable parameters\n\n## [1.2.2] - 2023-11-20\n\n### Fixed\n\n* [#18](https://github.com/theseer/tokenizer/issues/18): Tokenizer fails on protobuf metadata files\n\n\n## [1.2.1] - 2021-07-28\n\n### Fixed\n\n* [#13](https://github.com/theseer/tokenizer/issues/13): Fatal error when tokenizing files that contain only a single empty line\n\n\n## [1.2.0] - 2020-07-13\n\nThis release is now PHP 8.0 compliant.\n\n### Fixed\n\n* Whitespace handling in general (only noticable in the intermediate `TokenCollection`) is now consitent  \n\n### Changed\n\n* Updated `Tokenizer` to deal with changed whitespace handling in PHP 8.0\n  The XMLSerializer was unaffected.\n\n\n## [1.1.3] - 2019-06-14\n\n### Changed\n\n* Ensure XMLSerializer can deal with empty token collections\n\n### Fixed\n\n* [#2](https://github.com/theseer/tokenizer/issues/2): Fatal error in infection / phpunit\n\n\n## [1.1.2] - 2019-04-04\n\n### Changed\n\n* Reverted PHPUnit 8 test update to stay PHP 7.0 compliant\n\n\n## [1.1.1] - 2019-04-03\n\n### Fixed\n\n* [#1](https://github.com/theseer/tokenizer/issues/1): Empty file causes invalid array read \n\n### Changed\n\n* Tests should now be PHPUnit 8 compliant\n\n\n## [1.1.0] - 2017-04-07\n\n### Added\n\n* Allow use of custom namespace for XML serialization\n\n\n## [1.0.0] - 2017-04-05\n\nInitial Release\n\n[1.2.3]: https://github.com/theseer/tokenizer/compare/1.2.2...1.2.3\n[1.2.2]: https://github.com/theseer/tokenizer/compare/1.2.1...1.2.2\n[1.2.1]: https://github.com/theseer/tokenizer/compare/1.2.0...1.2.1\n[1.2.0]: https://github.com/theseer/tokenizer/compare/1.1.3...1.2.0\n[1.1.3]: https://github.com/theseer/tokenizer/compare/1.1.2...1.1.3\n[1.1.2]: https://github.com/theseer/tokenizer/compare/1.1.1...1.1.2\n[1.1.1]: https://github.com/theseer/tokenizer/compare/1.1.0...1.1.1\n[1.1.0]: https://github.com/theseer/tokenizer/compare/1.0.0...1.1.0\n[1.0.0]: https://github.com/theseer/tokenizer/compare/b2493e57de80c1b7414219b28503fa5c6b4d0a98...1.0.0\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.49609375,
          "content": "Tokenizer\n\nCopyright (c) 2017 Arne Blankerts <arne@blankerts.de> and contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of Arne Blankerts nor the names of contributors\n  may be used to endorse or promote products derived from this software\n  without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT  * NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS\nBE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\nOR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.4169921875,
          "content": "# Tokenizer\n\nA small library for converting tokenized PHP source code into XML.\n\n[![Test](https://github.com/theseer/tokenizer/actions/workflows/ci.yml/badge.svg)](https://github.com/theseer/tokenizer/actions/workflows/ci.yml)\n\n## Installation\n\nYou can add this library as a local, per-project dependency to your project using [Composer](https://getcomposer.org/):\n\n    composer require theseer/tokenizer\n\nIf you only need this library during development, for instance to run your project's test suite, then you should add it as a development-time dependency:\n\n    composer require --dev theseer/tokenizer\n\n## Usage examples\n\n```php\n$tokenizer = new TheSeer\\Tokenizer\\Tokenizer();\n$tokens = $tokenizer->parse(file_get_contents(__DIR__ . '/src/XMLSerializer.php'));\n\n$serializer = new TheSeer\\Tokenizer\\XMLSerializer();\n$xml = $serializer->toXML($tokens);\n\necho $xml;\n```\n\nThe generated XML structure looks something like this:\n\n```xml\n<?xml version=\"1.0\"?>\n<source xmlns=\"https://github.com/theseer/tokenizer\">\n <line no=\"1\">\n  <token name=\"T_OPEN_TAG\">&lt;?php </token>\n  <token name=\"T_DECLARE\">declare</token>\n  <token name=\"T_OPEN_BRACKET\">(</token>\n  <token name=\"T_STRING\">strict_types</token>\n  <token name=\"T_WHITESPACE\"> </token>\n  <token name=\"T_EQUAL\">=</token>\n  <token name=\"T_WHITESPACE\"> </token>\n  <token name=\"T_LNUMBER\">1</token>\n  <token name=\"T_CLOSE_BRACKET\">)</token>\n  <token name=\"T_SEMICOLON\">;</token>\n </line>\n</source>\n```\n"
        },
        {
          "name": "build.xml",
          "type": "blob",
          "size": 1.39453125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project name=\"Tokenizer\" default=\"setup\">\n    <target name=\"setup\" depends=\"clean,install-tools,generate-autoloader\"/>\n\n    <target name=\"clean\" unless=\"clean.done\" description=\"Cleanup build artifacts\">\n        <delete dir=\"${basedir}/tools\"/>\n        <delete dir=\"${basedir}/vendor\"/>\n        <delete file=\"${basedir}/src/autoload.php\"/>\n\n        <property name=\"clean.done\" value=\"true\"/>\n    </target>\n\n    <target name=\"prepare\" unless=\"prepare.done\" depends=\"clean\" description=\"Prepare for build\">\n        <property name=\"prepare.done\" value=\"true\"/>\n    </target>\n\n    <target name=\"install-tools\" description=\"Install tools with Phive\">\n        <exec executable=\"phive\" taskname=\"phive\">\n            <arg value=\"install\"/>\n            <arg value=\"--trust-gpg-keys\" />\n            <arg value=\"4AA394086372C20A,2A8299CE842DD38C\" />\n        </exec>\n    </target>\n\n    <target name=\"generate-autoloader\" depends=\"install-tools\" description=\"Generate autoloader using PHPAB\">\n        <exec executable=\"${basedir}/tools/phpab\" taskname=\"phpab\">\n            <arg value=\"--output\"/>\n            <arg path=\"${basedir}/src/autoload.php\"/>\n            <arg path=\"${basedir}/src\"/>\n        </exec>\n    </target>\n\n    <target name=\"test\" depends=\"generate-autoloader\" description=\"Run tests\">\n        <exec executable=\"${basedir}/tools/phpunit\" taskname=\"phpunit\"/>\n    </target>\n</project>\n\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.548828125,
          "content": "{\n  \"name\": \"theseer/tokenizer\",\n  \"description\": \"A small library for converting tokenized PHP source code into XML and potentially other formats\",\n  \"license\": \"BSD-3-Clause\",\n  \"authors\": [\n    {\n      \"name\": \"Arne Blankerts\",\n      \"email\": \"arne@blankerts.de\",\n      \"role\": \"Developer\"\n    }\n  ],\n  \"support\": {\n    \"issues\": \"https://github.com/theseer/tokenizer/issues\"\n  },\n  \"require\": {\n    \"php\": \"^7.2 || ^8.0\",\n    \"ext-xmlwriter\": \"*\",\n    \"ext-dom\": \"*\",\n    \"ext-tokenizer\": \"*\"\n  },\n  \"autoload\": {\n    \"classmap\": [\n      \"src/\"\n    ]\n  }\n}\n\n"
        },
        {
          "name": "composer.lock",
          "type": "blob",
          "size": 0.6396484375,
          "content": "{\n    \"_readme\": [\n        \"This file locks the dependencies of your project to a known state\",\n        \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies\",\n        \"This file is @generated automatically\"\n    ],\n    \"content-hash\": \"b010f1b3d9d47d431ee1cb54ac1de755\",\n    \"packages\": [],\n    \"packages-dev\": [],\n    \"aliases\": [],\n    \"minimum-stability\": \"stable\",\n    \"stability-flags\": [],\n    \"prefer-stable\": false,\n    \"prefer-lowest\": false,\n    \"platform\": {\n        \"php\": \"^7.2 || ^8.0\",\n        \"ext-xmlwriter\": \"*\",\n        \"ext-dom\": \"*\",\n        \"ext-tokenizer\": \"*\"\n    },\n    \"platform-dev\": []\n}\n"
        },
        {
          "name": "phive.xml",
          "type": "blob",
          "size": 0.3857421875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phive xmlns=\"https://phar.io/phive\">\n  <phar name=\"phpunit\" version=\"^9.0\" installed=\"9.6.13\" location=\"./tools/phpunit\" copy=\"false\"/>\n  <phar name=\"phpab\" version=\"^1.23.0\" installed=\"1.29.0\" location=\"./tools/phpab\" copy=\"false\"/>\n  <phar name=\"php-cs-fixer\" version=\"^2.16.4\" installed=\"2.19.3\" location=\"./tools/php-cs-fixer\" copy=\"false\"/>\n</phive>\n"
        },
        {
          "name": "phpunit.xml",
          "type": "blob",
          "size": 0.77734375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\" bootstrap=\"src/autoload.php\"\n         backupGlobals=\"false\" beStrictAboutOutputDuringTests=\"true\" beStrictAboutTestsThatDoNotTestAnything=\"true\"\n         beStrictAboutTodoAnnotatedTests=\"true\" verbose=\"true\">\n\n    <coverage processUncoveredFiles=\"true\">\n        <include>\n            <directory suffix=\".php\">src</directory>\n        </include>\n        <report>\n            <html outputDirectory=\"build/coverage/html\" lowUpperBound=\"60\" highLowerBound=\"90\" />\n        </report>\n    </coverage>\n\n    <testsuite name=\"Tokenizer\">\n        <directory suffix=\"Test.php\">tests</directory>\n    </testsuite>\n\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}