{
  "metadata": {
    "timestamp": 1736712314208,
    "page": 120,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "doctrine/collections",
      "stars": 5904,
      "defaultBranch": "2.2.x",
      "files": [
        {
          "name": ".doctrine-project.json",
          "type": "blob",
          "size": 1.2109375,
          "content": "{\n    \"active\": true,\n    \"name\": \"Collections\",\n    \"slug\": \"collections\",\n    \"docsSlug\": \"doctrine-collections\",\n    \"versions\": [\n        {\n            \"name\": \"3.0\",\n            \"branchName\": \"3.0.x\",\n            \"slug\": \"latest\",\n            \"upcoming\": true\n        },\n        {\n            \"name\": \"2.3\",\n            \"branchName\": \"2.3.x\",\n            \"slug\": \"2.3\",\n            \"upcoming\": true\n        },\n        {\n            \"name\": \"2.2\",\n            \"branchName\": \"2.2.x\",\n            \"slug\": \"stable\",\n            \"current\": true\n        },\n        {\n            \"name\": \"2.1\",\n            \"branchName\": \"2.1.x\",\n            \"slug\": \"2.1\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"2.0\",\n            \"branchName\": \"2.0.x\",\n            \"slug\": \"2.0\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"1.8\",\n            \"branchName\": \"1.8.x\",\n            \"slug\": \"1.8\"\n        },\n        {\n            \"name\": \"1.7\",\n            \"branchName\": \"1.7.x\",\n            \"slug\": \"1.7\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"1.6\",\n            \"branchName\": \"1.6.x\",\n            \"slug\": \"1.6\",\n            \"maintained\": false\n        }\n    ]\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.25390625,
          "content": "/tests export-ignore\n/.github export-ignore\n.doctrine-project.json export-ignore\n.gitattributes export-ignore\n.gitignore export-ignore\n.scrutinizer.yml export-ignore\nphpunit.xml.dist export-ignore\n/phpcs.xml.dist export-ignore\n/phpstan.neon.dist export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.076171875,
          "content": "/composer.lock\n/vendor\n/build\n/phpcs.xml\n/.phpcs-cache\n/.phpunit.result.cache\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.4072265625,
          "content": "# Contribute to Doctrine\n\nThank you for contributing to Doctrine!\n\nBefore we can merge your Pull-Request here are some guidelines that you need to follow.\nThese guidelines exist not to annoy you, but to keep the code base clean,\nunified and future proof.\n\n## Coding Standard\n\nWe use the [Doctrine Coding Standard](https://github.com/doctrine/coding-standard).\n\n## Unit-Tests\n\nPlease try to add a test for your pull-request.\n\n* If you want to contribute new functionality add unit- or functional tests\n  depending on the scope of the feature.\n\nYou can run the unit-tests by calling ``vendor/bin/phpunit`` from the root of the project.\nIt will run all the project tests.\n\nIn order to do that, you will need a fresh copy of doctrine/collections, and you\nwill have to run a composer installation in the project:\n\n```sh\ngit clone git@github.com:doctrine/collections.git\ncd collections\ncurl -sS https://getcomposer.org/installer | php --\n./composer.phar install\n```\n\n## Github Actions\n\nWe automatically run your pull request through Github Actions against supported\nPHP versions. If you break the tests, we cannot merge your code, so please make\nsure that your code is working before opening up a Pull-Request.\n\n## Getting merged\n\nPlease allow us time to review your pull requests. We will give our best to review\neverything as fast as possible, but cannot always live up to our own expectations.\n\nThank you very much again for your contribution!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "Copyright (c) 2006-2013 Doctrine Project\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.3505859375,
          "content": "# Doctrine Collections\n\n[![Build Status](https://github.com/doctrine/collections/workflows/Continuous%20Integration/badge.svg)](https://github.com/doctrine/collections/actions)\n[![Code Coverage](https://codecov.io/gh/doctrine/collections/branch/2.0.x/graph/badge.svg)](https://codecov.io/gh/doctrine/collections/branch/2.0.x)\n\nCollections Abstraction library\n"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 6.01171875,
          "content": "Note about upgrading: Doctrine uses static and runtime mechanisms to raise\nawareness about deprecated code.\n\n- Use of `@deprecated` docblock that is detected by IDEs (like PHPStorm) or\n  Static Analysis tools (like Psalm, phpstan)\n- Use of our low-overhead runtime deprecation API, details:\n  https://github.com/doctrine/deprecations/\n\n# Upgrade to 2.2\n\n## Deprecated string representation of sort order\n\nCriteria orderings direction is now represented by the\n`Doctrine\\Common\\Collection\\Order` enum.\n\nAs a consequence:\n\n- `Criteria::ASC` and `Criteria::DESC` are deprecated in favor of\n  `Order::Ascending` and `Order::Descending`, respectively.\n- `Criteria::getOrderings()` is deprecated in favor of `Criteria::orderings()`,\n  which returns `array<string, Order>`.\n- `Criteria::orderBy()` accepts `array<string, string|Order>`, but passing\n  anything other than `array<string, Order>` is deprecated.\n\n# Upgrade to 2.0\n\n## BC breaking changes\n\nNative parameter types were added. Native return types will be added in 3.0.x\nAs a consequence, some signatures were changed and will have to be adjusted in sub-classes.\n\nNote that in order to keep compatibility with both 1.x and 2.x versions,\nextending code would have to omit the added parameter types.\nThis would only work in PHP 7.2+ which is the first version featuring\n[parameter widening](https://wiki.php.net/rfc/parameter-no-type-variance).\nIt is also recommended to add return types according to the tables below\n\nYou can find a list of major changes to public API below.\n\n### Doctrine\\Common\\Collections\\Collection\n\n|             1.0.x                |                  3.0.x                           |\n|---------------------------------:|:-------------------------------------------------|\n| `add($element)`                  | `add(mixed $element): void`                      |\n| `clear()`                        | `clear(): void`                                  |\n| `contains($element)`             | `contains(mixed $element): bool`                 |\n| `isEmpty()`                      | `isEmpty(): bool`                                |\n| `removeElement($element)`        | `removeElement(mixed $element): bool`            |\n| `containsKey($key)`              | `containsKey(string\\|int $key): bool`            |\n| `get()`                          | `get(string\\|int $key): mixed`                   |\n| `getKeys()`                      | `getKeys(): array`                               |\n| `getValues()`                    | `getValues(): array`                             |\n| `set($key, $value)`              | `set(string\\|int $key, $value): void`            |\n| `toArray()`                      | `toArray(): array`                               |\n| `first()`                        | `first(): mixed`                                 |\n| `last()`                         | `last(): mixed`                                  |\n| `key()`                          | `key(): int\\|string\\|null`                        |\n| `current()`                      | `current(): mixed`                               |\n| `next()`                         | `next(): mixed`                                  |\n| `exists(Closure $p)`             | `exists(Closure $p): bool`                       |\n| `filter(Closure $p)`             | `filter(Closure $p): self`                       |\n| `forAll(Closure $p)`             | `forAll(Closure $p): bool`                       |\n| `map(Closure $func)`             | `map(Closure $func): self`                       |\n| `partition(Closure $p)`          | `partition(Closure $p): array`                   |\n| `indexOf($element)`              | `indexOf(mixed $element): int\\|string\\|false`    |\n| `slice($offset, $length = null)` | `slice(int $offset, ?int $length = null): array` |\n| `count()`                        | `count(): int`                                   |\n| `getIterator()`                  | `getIterator(): \\Traversable`                    |\n| `offsetSet($offset, $value)`     | `offsetSet(mixed $offset, mixed $value): void`   |\n| `offsetUnset($offset)`           | `offsetUnset(mixed $offset): void`               |\n| `offsetExists($offset)`          | `offsetExists(mixed $offset): bool`              |\n\n### Doctrine\\Common\\Collections\\AbstractLazyCollection\n\n|      1.0.x        |         3.0.x           |\n|------------------:|:------------------------|\n| `isInitialized()` | `isInitialized(): bool` |\n| `initialize()`    | `initialize(): void`    |\n| `doInitialize()`  | `doInitialize(): void`  |\n\n### Doctrine\\Common\\Collections\\ArrayCollection\n\n|            1.0.x              |               3.0.x                   |\n|------------------------------:|:--------------------------------------|\n| `createFrom(array $elements)` | `createFrom(array $elements): static` |\n| `__toString()`                | `__toString(): string`                |\n\n### Doctrine\\Common\\Collections\\Criteria\n\n|            1.0.x                          |               3.0.x                         |\n|------------------------------------------:|:--------------------------------------------|\n| `where(Expression $expression): self`     | `where(Expression $expression): static`     |\n| `andWhere(Expression $expression): self`  | `andWhere(Expression $expression): static`  |\n| `orWhere(Expression $expression): self`   | `orWhere(Expression $expression): static`   |\n| `orderBy(array $orderings): self`         | `orderBy(array $orderings): static`         |\n| `setFirstResult(?int $firstResult): self` | `setFirstResult(?int $firstResult): static` |\n| `setMaxResult(?int $maxResults): self`    | `setMaxResults(?int $maxResults): static`   |\n\n### Doctrine\\Common\\Collections\\Selectable\n\n|             1.0.x              |                   3.0.x                    |\n|-------------------------------:|:-------------------------------------------|\n| `matching(Criteria $criteria)` | `matching(Criteria $criteria): Collection` |\n\n# Upgrade to 1.7\n\n## Deprecated null first result\n\nPassing null as `$firstResult` to\n`Doctrine\\Common\\Collections\\Criteria::__construct()` and to\n`Doctrine\\Common\\Collections\\Criteria::setFirstResult()` is deprecated.\nUse `0` instead.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.587890625,
          "content": "{\n    \"name\": \"doctrine/collections\",\n    \"description\": \"PHP Doctrine Collections library that adds additional functionality on top of PHP arrays.\",\n    \"license\": \"MIT\",\n    \"type\": \"library\",\n    \"keywords\": [\n        \"php\",\n        \"collections\",\n        \"array\",\n        \"iterators\"\n    ],\n    \"authors\": [\n        {\n            \"name\": \"Guilherme Blanco\",\n            \"email\": \"guilhermeblanco@gmail.com\"\n        },\n        {\n            \"name\": \"Roman Borschel\",\n            \"email\": \"roman@code-factory.org\"\n        },\n        {\n            \"name\": \"Benjamin Eberlei\",\n            \"email\": \"kontakt@beberlei.de\"\n        },\n        {\n            \"name\": \"Jonathan Wage\",\n            \"email\": \"jonwage@gmail.com\"\n        },\n        {\n            \"name\": \"Johannes Schmitt\",\n            \"email\": \"schmittjoh@gmail.com\"\n        }\n    ],\n    \"homepage\": \"https://www.doctrine-project.org/projects/collections.html\",\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"doctrine/deprecations\": \"^1\"\n    },\n    \"require-dev\": {\n        \"ext-json\": \"*\",\n        \"doctrine/coding-standard\": \"^12\",\n        \"phpstan/phpstan\": \"^1.8\",\n        \"phpstan/phpstan-phpunit\": \"^1.0\",\n        \"phpunit/phpunit\": \"^10.5\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Doctrine\\\\Common\\\\Collections\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Doctrine\\\\Tests\\\\Common\\\\Collections\\\\\": \"tests\"\n        }\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"composer/package-versions-deprecated\": true,\n            \"dealerdirect/phpcodesniffer-composer-installer\": true\n        }\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpcs.xml.dist",
          "type": "blob",
          "size": 1.7431640625,
          "content": "<?xml version=\"1.0\"?>\n<ruleset>\n    <arg name=\"basepath\" value=\".\"/>\n    <arg name=\"extensions\" value=\"php\"/>\n    <arg name=\"parallel\" value=\"80\"/>\n    <arg name=\"cache\" value=\".phpcs-cache\"/>\n    <arg name=\"colors\"/>\n\n    <config name=\"php_version\" value=\"80100\"/>\n\n    <!-- Ignore warnings, show progress of the run and show sniff names -->\n    <arg value=\"nps\"/>\n\n    <file>src</file>\n    <file>tests</file>\n\n    <rule ref=\"Doctrine\" >\n        <!-- https://github.com/doctrine/collections/pull/381#issuecomment-1745206747 -->\n        <exclude name=\"SlevomatCodingStandard.Commenting.UselessInheritDocComment\"/>\n        <exclude name=\"SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint\"/>\n    </rule>\n\n    <rule ref=\"PSR1.Classes.ClassDeclaration.MultipleClasses\">\n        <exclude-pattern>tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Squiz.Classes.ClassFileName.NoMatch\">\n        <exclude-pattern>tests/*</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming\">\n        <exclude-pattern>src/AbstractLazyCollection.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"Squiz.NamingConventions.ValidVariableName.NotCamelCaps\">\n        <exclude-pattern>tests/ClosureExpressionVisitorTest.php</exclude-pattern>\n    </rule>\n    <rule ref=\"Squiz.NamingConventions.ValidVariableName.MemberNotCamelCaps\">\n        <exclude-pattern>tests/ClosureExpressionVisitorTest.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint\">\n        <exclude-pattern>src/AbstractLazyCollection.php</exclude-pattern>\n        <exclude-pattern>src/ArrayCollection.php</exclude-pattern>\n        <exclude-pattern>src/Collection.php</exclude-pattern>\n    </rule>\n</ruleset>\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.4443359375,
          "content": "parameters:\n    level: 8\n    paths:\n        - src\n        - tests/StaticAnalysis\n\n    ignoreErrors:\n        -\n            message: '~Parameter #1 \\$key of method Doctrine\\\\Common\\\\Collections\\\\ArrayCollection<TKey of \\(int\\|string\\),T>::set\\(\\) expects TKey of \\(int\\|string\\), int\\|string given\\.~'\n            path: 'src/ArrayCollection.php'\n\nincludes:\n    - vendor/phpstan/phpstan-phpunit/extension.neon\n    - vendor/phpstan/phpstan-phpunit/rules.neon\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.5458984375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n     colors=\"true\"\n     beStrictAboutOutputDuringTests=\"true\"\n     beStrictAboutTodoAnnotatedTests=\"true\"\n>\n    <testsuites>\n        <testsuite name=\"Doctrine Collections Test Suite\">\n            <directory>./tests/</directory>\n        </testsuite>\n    </testsuites>\n\n    <source>\n        <include>\n            <directory>./src/</directory>\n        </include>\n    </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}