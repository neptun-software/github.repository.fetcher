{
  "metadata": {
    "timestamp": 1736712294916,
    "page": 79,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hamcrest/hamcrest-php",
      "stars": 6963,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveralls.yml",
          "type": "blob",
          "size": 0.017578125,
          "content": "src_dir: hamcrest\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1298828125,
          "content": "/.coveralls.yml export-ignore\r\n/.gush.yml export-ignore\r\n/.travis.yml export-ignore\r\n/.github export-ignore\r\n/tests export-ignore\r\n\r\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0478515625,
          "content": "composer.lock\ntests/.phpunit.result.cache\nvendor\n"
        },
        {
          "name": ".gush.yml",
          "type": "blob",
          "size": 0.1796875,
          "content": "adapter: github\nissue_tracker: github\nmeta-header: \"Copyright (c) 2009-2015 hamcrest.org\"\ntable-pr:\n    fixed_tickets: ['Fixed Tickets', '']\n    license: ['License', MIT]\nbase: master\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.37109375,
          "content": "language: php\n\ndist: trusty\n\nmatrix:\n  include:\n    - name: PHP 5.3\n      php: 5.3\n      dist: precise\n    - name: PHP 5.4\n      php: 5.4\n    - name: PHP 5.5\n      php: 5.5\n    - name: PHP 5.6\n      php: 5.6\n    - name: HHVM 3.18\n      php: hhvm-3.18\n\ninstall:\n  - travis_retry composer update --prefer-dist --no-progress\n\nscript:\n  - vendor/bin/phpunit -c tests/phpunit.xml.dist\n"
        },
        {
          "name": "CHANGES.txt",
          "type": "blob",
          "size": 5.291015625,
          "content": "== Version 2.0.1: Released Jul 09 2020 ==\n\n* Added support for PHP 8\n\n\n== Version 2.0: Released Feb 26 2016 ==\n\n* Removed automatic loading of global functions\n\n\n== Version 1.1.0: Released Feb 2 2012 ==\n\nIssues Fixed: 121, 138, 147\n\n* Added non-empty matchers to complement the emptiness-matching forms.\n\n  - nonEmptyString()\n  - nonEmptyArray()\n  - nonEmptyTraversable()\n\n* Added ability to pass variable arguments to several array-based matcher\n  factory methods so they work like allOf() et al.\n\n  - anArray()\n  - arrayContainingInAnyOrder(), containsInAnyOrder()\n  - arrayContaining(), contains()\n  - stringContainsInOrder()\n\n* Matchers that accept an array of matchers now also accept variable arguments.\n  Any non-matcher arguments are wrapped by IsEqual.\n\n* Added noneOf() as a shortcut for not(anyOf()).\n\n\n== Version 1.0.0: Released Jan 20 2012 ==\n\nIssues Fixed: 119, 136, 139, 141, 148, 149, 172\n\n* Moved hamcrest.php into Hamcrest folder and renamed to Hamcrest.php.\n  This is more in line with PEAR packaging standards.\n\n* Renamed callable() to callableValue() for compatibility with PHP 5.4.\n\n* Added Hamcrest_Text_StringContainsIgnoringCase to assert using stripos().\n\n    assertThat('fOObAr', containsStringIgnoringCase('oba'));\n    assertThat('fOObAr', containsString('oba')->ignoringCase());\n\n* Fixed Hamcrest_Core_IsInstanceOf to return false for native types.\n\n* Moved string-based matchers to Hamcrest_Text package.\n  StringContains, StringEndsWith, StringStartsWith, and SubstringMatcher\n\n* Hamcrest.php and Hamcrest_Matchers.php are now built from @factory doctags.\n  Added @factory doctag to every static factory method.\n\n* Hamcrest_Matchers and Hamcrest.php now import each matcher as-needed\n  and Hamcrest.php calls the matchers directly instead of Hamcrest_Matchers.\n\n\n== Version 0.3.0: Released Jul 26 2010 ==\n\n* Added running count to Hamcrest_MatcherAssert with methods to get and reset it.\n  This can be used by unit testing frameworks for reporting.\n\n* Added Hamcrest_Core_HasToString to assert return value of toString() or __toString().\n\n    assertThat($anObject, hasToString('foo'));\n\n* Added Hamcrest_Type_IsScalar to assert is_scalar().\n  Matches values of type bool, int, float, double, and string.\n\n    assertThat($count, scalarValue());\n    assertThat('foo', scalarValue());\n\n* Added Hamcrest_Collection package.\n\n  - IsEmptyTraversable\n  - IsTraversableWithSize\n\n    assertThat($iterator, emptyTraversable());\n    assertThat($iterator, traversableWithSize(5));\n\n* Added Hamcrest_Xml_HasXPath to assert XPath expressions or the content of nodes in an XML/HTML DOM.\n\n    assertThat($dom, hasXPath('books/book/title'));\n    assertThat($dom, hasXPath('books/book[contains(title, \"Alice\")]', 3));\n    assertThat($dom, hasXPath('books/book/title', 'Alice in Wonderland'));\n    assertThat($dom, hasXPath('count(books/book)', greaterThan(10)));\n\n* Added aliases to match the Java API.\n\n    hasEntry() -> hasKeyValuePair()\n    hasValue() -> hasItemInArray()\n    contains() -> arrayContaining()\n    containsInAnyOrder() -> arrayContainingInAnyOrder()\n\n* Added optional subtype to Hamcrest_TypeSafeMatcher to enforce object class or resource type.\n\n* Hamcrest_TypeSafeDiagnosingMatcher now extends Hamcrest_TypeSafeMatcher.\n\n\n== Version 0.2.0: Released Jul 14 2010 ==\n\nIssues Fixed: 109, 111, 114, 115\n\n* Description::appendValues() and appendValueList() accept Iterator and IteratorAggregate. [111]\n  BaseDescription::appendValue() handles IteratorAggregate.\n\n* assertThat() accepts a single boolean parameter and\n  wraps any non-Matcher third parameter with equalTo().\n\n* Removed null return value from assertThat(). [114]\n\n* Fixed wrong variable name in contains(). [109]\n\n* Added Hamcrest_Core_IsSet to assert isset().\n\n    assertThat(array('foo' => 'bar'), set('foo'));\n    assertThat(array('foo' => 'bar'), notSet('bar'));\n\n* Added Hamcrest_Core_IsTypeOf to assert built-in types with gettype(). [115]\n  Types: array, boolean, double, integer, null, object, resource, and string.\n  Note that gettype() returns \"double\" for float values.\n\n    assertThat($count, typeOf('integer'));\n    assertThat(3.14159, typeOf('double'));\n    assertThat(array('foo', 'bar'), typeOf('array'));\n    assertThat(new stdClass(), typeOf('object'));\n\n* Added type-specific matchers in new Hamcrest_Type package.\n\n  - IsArray\n  - IsBoolean\n  - IsDouble (includes float values)\n  - IsInteger\n  - IsObject\n  - IsResource\n  - IsString\n\n    assertThat($count, integerValue());\n    assertThat(3.14159, floatValue());\n    assertThat('foo', stringValue());\n\n* Added Hamcrest_Type_IsNumeric to assert is_numeric().\n  Matches values of type int and float/double or strings that are formatted as numbers.\n\n    assertThat(5, numericValue());\n    assertThat('-5e+3', numericValue());\n\n* Added Hamcrest_Type_IsCallable to assert is_callable().\n\n    assertThat('preg_match', callable());\n    assertThat(array('SomeClass', 'SomeMethod'), callable());\n    assertThat(array($object, 'SomeMethod'), callable());\n    assertThat($object, callable());\n    assertThat(function ($x, $y) { return $x + $y; }, callable());\n\n* Added Hamcrest_Text_MatchesPattern for regex matching with preg_match().\n\n    assertThat('foobar', matchesPattern('/o+b/'));\n\n* Added aliases:\n  - atLeast() for greaterThanOrEqualTo()\n  - atMost() for lessThanOrEqualTo()\n\n\n== Version 0.1.0: Released Jul 7 2010 ==\n\n* Created PEAR package\n\n* Core matchers\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.7060546875,
          "content": "# Contributing\nhamcrest-php is an open source, community-driven project. If you'd like to contribute, feel free to do this, but remember to follow these few simple rules:\n\n## Asking Questions\nFeel free to ask any questions and share your experiences in the [Issue tracking system](https://github.com/hamcrest/hamcrest-php/issues/) and help to improve the documentation.\n\n## Submitting an issues\n- A reproducible example is required for every bug report, otherwise it will most probably be __closed without warning__.\n- If you are going to make a big, substantial change, let's discuss it first.\n\n## Working with Pull Requests\n1. Create your feature addition or a bug fix branch based on __`master`__ branch in your repository's fork.\n2. Make necessary changes, but __don't mix__ code reformatting with code changes on topic.\n3. Add tests for those changes (please look into `tests/` folder for some examples). This is important so we don't break it in a future version unintentionally.\n4. Check your code using \"Coding Standard\" (see below).\n5. Commit your code.\n6. Squash your commits by topic to preserve a clean and readable log.\n7. Create Pull Request.\n\n## Running the Tests\n\n### Installation/Configuration\n\n1. Using `git clone https://github.com/hamcrest/hamcrest-php` to clone this repository.\n2. Using the `composer update` to update the dependencies to support your development environment.\n3. Using `vendor/bin/phpunit -c tests/phpunit.xml.dist` command to do unit test works.\n\n## Contributor Code of Conduct\n\nPlease note that this project is released with a [Contributor Code of\nConduct](http://contributor-covenant.org/). By participating in this project\nyou agree to abide by its terms. See [CODE_OF_CONDUCT](CODE_OF_CONDUCT.md) file.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.447265625,
          "content": "BSD License\n\nCopyright (c) 2000-2025, www.hamcrest.org\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of\nconditions and the following disclaimer. Redistributions in binary form must reproduce\nthe above copyright notice, this list of conditions and the following disclaimer in\nthe documentation and/or other materials provided with the distribution.\n\nNeither the name of Hamcrest nor the names of its contributors may be used to endorse\nor promote products derived from this software without specific prior written\npermission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT\nSHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\nBUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\nWAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.703125,
          "content": "This is the PHP port of Hamcrest Matchers\n=========================================\n\n[![tests](https://github.com/hamcrest/hamcrest-php/actions/workflows/tests.yml/badge.svg)](https://github.com/hamcrest/hamcrest-php/actions/workflows/tests.yml)\n\nHamcrest is a matching library originally written for Java, but\nsubsequently ported to many other languages.  hamcrest-php is the\nofficial PHP port of Hamcrest and essentially follows a literal\ntranslation of the original Java API for Hamcrest, with a few\nExceptions, mostly down to PHP language barriers:\n\n  1. `instanceOf($theClass)` is actually `anInstanceOf($theClass)`\n\n  2. `both(containsString('a'))->and(containsString('b'))`\n     is actually `both(containsString('a'))->andAlso(containsString('b'))`\n\n  3. `either(containsString('a'))->or(containsString('b'))`\n     is actually `either(containsString('a'))->orElse(containsString('b'))`\n\n  4. Unless it would be non-semantic for a matcher to do so, hamcrest-php\n     allows dynamic typing for it's input, in \"the PHP way\". Exception are\n     where semantics surrounding the type itself would suggest otherwise,\n     such as stringContains() and greaterThan().\n\n  5. Several official matchers have not been ported because they don't\n     make sense or don't apply in PHP:\n\n       - `typeCompatibleWith($theClass)`\n       - `eventFrom($source)`\n       - `hasProperty($name)` **\n       - `samePropertyValuesAs($obj)` **\n\n  6. When most of the collections matchers are finally ported, PHP-specific\n     aliases will probably be created due to a difference in naming\n     conventions between Java's Arrays, Collections, Sets and Maps compared\n     with PHP's Arrays.\n\n---\n** [Unless we consider POPO's (Plain Old PHP Objects) akin to JavaBeans]\n     - The POPO thing is a joke.  Java devs coin the term POJO's (Plain Old\n       Java Objects).\n\n\nUsage\n-----\n\nHamcrest matchers are easy to use as:\n\n```php\nHamcrest_MatcherAssert::assertThat('a', Hamcrest_Matchers::equalToIgnoringCase('A'));\n```\n\nAlternatively, you can use the global proxy-functions:\n\n```php\n$result = true;\n// with an identifier\nassertThat(\"result should be true\", $result, equalTo(true));\n\n// without an identifier\nassertThat($result, equalTo(true));\n\n// evaluate a boolean expression\nassertThat($result === true);\n\n// with syntactic sugar is()\nassertThat(true, is(true));\n```\n\n:warning: **NOTE:** the global proxy-functions aren't autoloaded by default, so you will need to load them first:\n\n```php\n\\Hamcrest\\Util::registerGlobalFunctions();\n```\n\nFor brevity, all of the examples below use the proxy-functions.\n\n\nDocumentation\n-------------\nA tutorial can be found on the [Hamcrest site](https://code.google.com/archive/p/hamcrest/wikis/TutorialPHP.wiki).\n\n\nAvailable Matchers\n------------------\n* [Array](../master/README.md#array)\n* [Collection](../master/README.md#collection)\n* [Object](../master/README.md#object)\n* [Numbers](../master/README.md#numbers)\n* [Type checking](../master/README.md#type-checking)\n* [XML](../master/README.md#xml)\n\n\n### Array\n\n* `anArray` - evaluates an array\n```php\nassertThat([], anArray());\n```\n\n* `hasItemInArray` - check if item exists in array\n```php\n$list = range(2, 7, 2);\n$item = 4;\nassertThat($list, hasItemInArray($item));\n```\n\n* `hasValue` - alias of hasItemInArray\n\n* `arrayContainingInAnyOrder` - check if array contains elements in any order\n```php\nassertThat([2, 4, 6], arrayContainingInAnyOrder([6, 4, 2]));\nassertThat([2, 4, 6], arrayContainingInAnyOrder([4, 2, 6]));\n```\n\n* `containsInAnyOrder` - alias of arrayContainingInAnyOrder\n\n* `arrayContaining` - An array with elements that match the given matchers in the same order.\n```php\nassertThat([2, 4, 6], arrayContaining([2, 4, 6]));\nassertthat([2, 4, 6], not(arrayContaining([6, 4, 2])));\n```\n\n* `contains` - check array in same order\n```php\nassertThat([2, 4, 6], contains([2, 4, 6]));\n```\n\n* `hasKeyInArray` - check if array has given key\n```php\nassertThat(['name'=> 'foobar'], hasKeyInArray('name'));\n```\n\n* `hasKey` - alias of hasKeyInArray\n\n* `hasKeyValuePair` - check if array has given key, value pair\n```php\nassertThat(['name'=> 'foobar'], hasKeyValuePair('name', 'foobar'));\n```\n* `hasEntry` - same as hasKeyValuePair\n\n* `arrayWithSize` - check array has given size\n```php\nassertthat([2, 4, 6], arrayWithSize(3));\n```\n* `emptyArray` - check if array is empty\n```php\nassertThat([], emptyArray());\n```\n\n* `nonEmptyArray`\n```php\nassertThat([1], nonEmptyArray());\n```\n\n### Collection\n\n* `emptyTraversable` - check if traversable is empty\n```php\n$empty_it = new EmptyIterator;\nassertThat($empty_it, emptyTraversable());\n```\n\n* `nonEmptyTraversable` - check if traversable isn't empty\n```php\n$non_empty_it = new ArrayIterator(range(1, 10));\nassertThat($non_empty_it, nonEmptyTraversable());\na\n```\n\n* `traversableWithSize`\n```php\n$non_empty_it = new ArrayIterator(range(1, 10));\nassertThat($non_empty_it, traversableWithSize(count(range(1, 10))));\n`\n```\n\n### Core\n\n* `allOf` - Evaluates to true only if ALL of the passed in matchers evaluate to true.\n```php\nassertThat([2,4,6], allOf(hasValue(2), arrayWithSize(3)));\n```\n\n* `anyOf` - Evaluates to true if ANY of the passed in matchers evaluate to true.\n```php\nassertThat([2, 4, 6], anyOf(hasValue(8), hasValue(2)));\n```\n\n* `noneOf` - Evaluates to false if ANY of the passed in matchers evaluate to true.\n```php\nassertThat([2, 4, 6], noneOf(hasValue(1), hasValue(3)));\n```\n\n* `both` + `andAlso` - This is useful for fluently combining matchers that must both pass.\n```php\nassertThat([2, 4, 6], both(hasValue(2))->andAlso(hasValue(4)));\n```\n\n* `either` + `orElse` - This is useful for fluently combining matchers where either may pass,\n```php\nassertThat([2, 4, 6], either(hasValue(2))->orElse(hasValue(4)));\n```\n\n* `describedAs` - Wraps an existing matcher and overrides the description when it fails.\n```php \n$expected = \"Dog\";\n$found = null;\n// this assertion would result error message as Expected: is not null but: was null\n//assertThat(\"Expected {$expected}, got {$found}\", $found, is(notNullValue()));\n// and this assertion would result error message as Expected: Dog but: was null\n//assertThat($found, describedAs($expected, notNullValue()));\n```\n\n* `everyItem` - A matcher to apply to every element in an array.\n```php\nassertThat([2, 4, 6], everyItem(notNullValue()));\n```\n\n* `hasItem` - check array has given item, it can take a matcher argument\n```php\nassertThat([2, 4, 6], hasItem(equalTo(2)));\n```\n\n* `hasItems` - check array has given items, it can take multiple matcher as arguments\n```php\nassertThat([1, 3, 5], hasItems(equalTo(1), equalTo(3)));\n```\n\n### Object\n\n* `hasToString` - check `__toString` or `toString` method\n```php\nclass Foo {\n    public $name = null;\n\n    public function __toString() {\n        return \"[Foo]Instance\";\n    }\n}\n$foo = new Foo;\nassertThat($foo, hasToString(equalTo(\"[Foo]Instance\")));\n```\n\n* `equalTo` - compares two instances using comparison operator '=='\n```php\n$foo = new Foo;\n$foo2 = new Foo;\nassertThat($foo, equalTo($foo2));\n```\n\n* `identicalTo` - compares two instances using identity operator '==='\n```php\nassertThat($foo, is(not(identicalTo($foo2))));\n```\n\n* `anInstanceOf` - check instance is an instance|sub-class of given class\n```php\nassertThat($foo, anInstanceOf(Foo::class));\n```\n\n* `any` - alias of `anInstanceOf`\n\n* `nullValue` check null\n```php\nassertThat(null, is(nullValue()));\n```\n\n* `notNullValue` check not null\n```php\nassertThat(\"\", notNullValue());\n```\n\n* `sameInstance` - check for same instance\n```php\nassertThat($foo, is(not(sameInstance($foo2))));\nassertThat($foo, is(sameInstance($foo)));\n```\n\n* `typeOf`- check type\n```php \nassertThat(1, typeOf(\"integer\"));\n```\n\n* `notSet` - check if instance property is not set\n```php\nassertThat($foo, notSet(\"name\"));\n```\n\n* `set` - check if instance property is set\n```php\n$foo->name = \"bar\";\nassertThat($foo, set(\"name\"));\n```\n\n### Numbers\n\n* `closeTo` - check value close to a range\n```php\nassertThat(3, closeTo(3, 0.5));\n```\n\n* `comparesEqualTo` - check with '=='\n```php\nassertThat(2, comparesEqualTo(2));\n```\n\n* `greaterThan` - check '>'\n```\nassertThat(2, greaterThan(1));\n```\n\n* `greaterThanOrEqualTo`\n```php\nassertThat(2, greaterThanOrEqualTo(2));\n```\n\n* `atLeast` - The value is >= given value\n```php\nassertThat(3, atLeast(2));\n```\n* `lessThan`\n```php\nassertThat(2, lessThan(3));\n```\n\n* `lessThanOrEqualTo`\n```php\nassertThat(2, lessThanOrEqualTo(3));\n```\n\n* `atMost` - The value is <= given value\n```php\nassertThat(2, atMost(3));\n```\n\n### String\n\n* `emptyString` - check for empty string\n```php\nassertThat(\"\", emptyString());\n```\n\n* `isEmptyOrNullString`\n```php\nassertThat(null, isEmptyOrNullString());\n```\n\n* `nullOrEmptyString`\n```php\nassertThat(\"\", nullOrEmptyString());\n```\n\n* `isNonEmptyString`\n```php\nassertThat(\"foo\", isNonEmptyString());\n```\n\n* `nonEmptyString`\n```php\nassertThat(\"foo\", nonEmptyString());\n```\n\n* `equalToIgnoringCase`\n```php\nassertThat(\"Foo\", equalToIgnoringCase(\"foo\"));\n```\n* `equalToIgnoringWhiteSpace`\n```php\nassertThat(\" Foo \", equalToIgnoringWhiteSpace(\"Foo\"));\n```\n\n* `matchesPattern` - matches with regex pattern\n```php\nassertThat(\"foobarbaz\", matchesPattern('/(foo)(bar)(baz)/'));\n```\n\n* `containsString` - check for substring\n```php\nassertThat(\"foobar\", containsString(\"foo\"));\n```\n\n* `containsStringIgnoringCase`\n```php\nassertThat(\"fooBar\", containsStringIgnoringCase(\"bar\"));\n```\n\n* `stringContainsInOrder`\n```php\nassertThat(\"foo\", stringContainsInOrder(\"foo\"));\n```\n\n* `endsWith` - check string that ends with given value\n```php\nassertThat(\"foo\", endsWith(\"oo\"));\n```\n\n* `startsWith` - check string that starts with given value\n```php\nassertThat(\"bar\", startsWith(\"ba\"));\n```\n\n### Type-checking\n\n* `arrayValue` - check array type\n```php\nassertThat([], arrayValue());\n```\n\n* `booleanValue`\n```php\nassertThat(true, booleanValue());\n```\n* `boolValue` - alias of booleanValue\n\n* `callableValue` - check if value is callable\n```php\n$func = function () {};\nassertThat($func, callableValue());\n```\n* `doubleValue`\n```php\nassertThat(3.14, doubleValue());\n```\n\n* `floatValue`\n```php\nassertThat(3.14, floatValue());\n```\n\n* `integerValue`\n```php\nassertThat(1, integerValue());\n```\n\n* `intValue` - alias of `integerValue`\n\n* `numericValue` - check if value is numeric\n```php\nassertThat(\"123\", numericValue());\n```\n\n* `objectValue` - check for object\n```php\n$obj = new stdClass;\nassertThat($obj, objectValue());\n```\n* `anObject`\n```php\nassertThat($obj, anObject());\n```\n\n* `resourceValue` - check resource type\n```php\n$fp = fopen(\"/tmp/foo\", \"w+\");\nassertThat($fp, resourceValue());\n```\n\n* `scalarValue` - check for scalar value\n```php\nassertThat(1, scalarValue());\n```\n\n* `stringValue`\n```php\nassertThat(\"\", stringValue());\n```\n\n### XML\n\n* `hasXPath` - check xml with a xpath\n```php\n$xml = <<<XML\n<books>\n  <book>\n    <isbn>1</isbn>   \n  </book>\n  <book>\n    <isbn>2</isbn>   \n  </book>\n</books>\nXML;\n\n$doc = new DOMDocument;\n$doc->loadXML($xml);\nassertThat($doc, hasXPath(\"book\", 2));\n```\n\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.685546875,
          "content": "{\n\t\"name\": \"hamcrest/hamcrest-php\",\n\t\"type\": \"library\",\n\t\"description\": \"This is the PHP port of Hamcrest Matchers\",\n\t\"keywords\": [\"test\"],\n\t\"license\": \"BSD-3-Clause\",\n\t\"authors\": [\n\t],\n\n\t\"autoload\": {\n\t\t\"classmap\": [\"hamcrest\"]\n\t},\n\t\"autoload-dev\": {\n\t\t\"classmap\": [\"tests\", \"generator\"]\n\t},\n\n\t\"require\": {\n\t\t\"php\": \"^5.3|^7.0|^8.0\"\n\t},\n\n\t\"require-dev\": {\n\t\t\"phpunit/php-file-iterator\": \"^1.4 || ^2.0 || ^3.0\",\n\t\t\"phpunit/phpunit\": \"^4.8.36 || ^5.7 || ^6.5 || ^7.0 || ^8.0 || ^9.0\"\n\t},\n\n\t\"replace\": {\n\t\t\"kodova/hamcrest-php\": \"*\",\n\t\t\"davedevelopment/hamcrest-php\": \"*\",\n\t\t\"cordoval/hamcrest-php\": \"*\"\n\t},\n\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"2.1-dev\"\n        }\n    }\n}\n"
        },
        {
          "name": "generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "hamcrest",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}