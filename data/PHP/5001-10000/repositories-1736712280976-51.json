{
  "metadata": {
    "timestamp": 1736712280976,
    "page": 51,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "predis/predis",
      "stars": 7627,
      "defaultBranch": "v2.x",
      "files": [
        {
          "name": ".codespellrc",
          "type": "blob",
          "size": 0.19140625,
          "content": "[codespell]\nskip=./.git\ncheck-hidden=\ncheck-filenames=\nbuiltin=clear,rare,informal,usage,code,names\nignore-words-list=master,masters,slave,slaves,whitelist,cas,exat,smove,SUGGET,sugget,ro,DOF,dof\n"
        },
        {
          "name": ".coveralls.yml",
          "type": "blob",
          "size": 0.0400390625,
          "content": "coverage_clover: build/logs/clover-*.xml\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4404296875,
          "content": "root = true\n\n[*]\ncharset = utf-8\nindent_style = space\nindent_size = 4\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nblock_comment_start = /*\nblock_comment = *\nblock_comment_end = */\n\n[*.php]\nmax_line_length = 150\n\n[*.{md,yml,yaml,neon,sh}]\nindent_size = 2\n\n[VERSION]\ninsert_final_newline = false\n\n[tests/**.php]\nmax_line_length = unset\n\n[{src/ClientInterface.php,src/ClientContextInterface.php}]\nmax_line_length = unset\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.5986328125,
          "content": "* text=auto\n\n/.github export-ignore\n/bin export-ignore\n/examples export-ignore\n/tests export-ignore\n/.codespellrc export-ignore linguist-language=INI\n/.coveralls.yml export-ignore\n/.editorconfig export-ignore\n/.gitattributes export-ignore\n/.gitignore export-ignore\n/.php-cs-fixer.dist.php export-ignore\n/CHANGELOG.md export-ignore linguist-documentation\n/CONTRIBUTING.md export-ignore linguist-documentation\n/FAQ.md export-ignore linguist-documentation\n/VERSION export-ignore\n/phpunit.relay.xml export-ignore\n/phpunit.xml.dist export-ignore\n/phpstan.dist.neon export-ignore\n/phpstan-tests.dist.neon export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.107421875,
          "content": "/build\n/vendor\n.php-version\n.php_cs.cache\n.phpunit.result.cache\n.php-cs-fixer.cache\ncomposer.lock\nphpunit.xml\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 1.146484375,
          "content": "<?php\n\n$PREDIS_HEADER = <<<EOS\nThis file is part of the Predis package.\n\n(c) 2009-2020 Daniele Alessandri\n(c) 2021-2024 Till KrÃ¼ss\n\nFor the full copyright and license information, please view the LICENSE\nfile that was distributed with this source code.\nEOS;\n\nreturn (new PhpCsFixer\\Config)\n    ->setRules([\n        '@PHP71Migration' => true,\n        'header_comment' => ['header' => $PREDIS_HEADER],\n        '@Symfony' => true,\n        'phpdoc_separation' => false,\n        'phpdoc_annotation_without_dot' => false,\n        'no_superfluous_phpdoc_tags' => false,\n        'no_unneeded_curly_braces' => false,\n        'no_unneeded_braces' => false,\n        'global_namespace_import' => true,\n        'yoda_style' => false,\n        'single_line_throw' => false,\n        'concat_space' => ['spacing' => 'one'],\n        'increment_style' => false,\n        'trailing_comma_in_multiline' => ['after_heredoc' => true, 'elements' => ['array_destructuring', 'arrays']]\n    ])\n    ->setFinder(\n        PhpCsFixer\\Finder::create()\n            ->in(__DIR__ . '/bin')\n            ->in(__DIR__ . '/examples')\n            ->in(__DIR__ . '/src')\n            ->in(__DIR__ . '/tests')\n    );\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 11.7744140625,
          "content": "## Changelog\n\n## v2.3.0 (2024-11-21)\n### Added\n- Added `GeoShapeField` field (#1467)\n- Added hash expiration commands (#1456)\n- Added support for time series `IGNORE` filter (#1458)\n- Added `XREAD` commands (#1459)\n- Added `NOVALUES` argument support to `HSCAN` (#1459)\n- Added support for search `INDEXMISSING` and `INDEXEMPTY` arguments (#1464)\n\n### Changed\n- Explicitly mark nullable parameters as nullable (#1448)\n- Filter out available replicas based on link status flag (#1440)\n- Respect `prefix` for `ZPOPMIN`, `ZPOPMAX`, `ZMSCORE`, `LMOVE`, `BLMOVE`, `SMISMEMBER` and `GEOSEARCH` (#1451, #1453, #1455, #1468)\n\n### Fixed\n- Fixed Relay support when using Redis Cluster (#1397)\n- Fixed `cmsincrby()` type annotation (#1333)\n- Fixed `set()` type annotation (#1394)\n- Fixed operator precedence in connection factory (#1405)\n- Fixed a bug with `null` arguments in `set()` method (#1470, #1471)\n\n## v2.2.2 (2023-09-13)\n\n### Added\n- Added `client_info` client parameter\n- Added support for `CLUSTER` container command\n\n### Fixed\n- Fixed `EXPIRETIME` not using `prefix`\n- Disabled `CLIENT SETINFO` calls by default\n\n## v2.2.1 (2023-08-15)\n\n### Added\n- Added support for `WAITAOF` command (#1357)\n- Added support for `SHUTDOWN` command (#1359)\n- Added support for `FUNCTION` command (#1332)\n- Added support for new optional `PEXPIRE`, `PEXPIREAT` and `COMMAND`\n- Added missing Redis Stack commands to `KeyPrefixProcessor` (#1358)\n\n### Changed\n- Set client name and version when establishing a connection (#1347)\n\n## v2.2.0 (2023-06-14)\n\nPredis v2.2.0 introduces official support for [Redis Stack](https://redis.io/docs/stack/) as well as a [Relay](https://github.com/cachewerk/relay) integration for substantially [faster read performance](https://github.com/predis/predis/wiki/Using-Relay).\n\n### Added\n- Added support for [Relay](https://github.com/predis/predis/wiki/Using-Relay) (#1263)\n- Added support for `FCALL_RO` command (#1191)\n- Added support for Redis `JSON`, `Bloom`, `Search` and `TimeSeries`  module (#1253)\n- Added support for `ACL SETUSER, GETUSER, DRYRUN` commands (#1193)\n\n### Changed\n- Minor code style and type-hint changes (#1311)\n\n### Fixed\n- Fixed prefixes for `XTRIM` and `XREVRANGE` commands (#1230)\n- Fixed `fclose()` being called on invalid stream resource (#1199)\n- Fixed `BitByte` and `ExpireOptions` traits skip processing on null values (#1169)\n- Fixed missing `@return` annotations (#1265)\n- Fixed `GETDEL` prefixing (#1306)\n\n## v2.1.2 (2023-03-02)\n\n### Added\n- Added stream commands to `KeyPrefixProcessor` (#1051)\n- Added `ReplicationStrategy::$loadBalancing` option to disable replica reads (#1168)\n- Added support for `FCALL` and `FUNCTIONS` commands (#1049)\n- Added support for `PEXPIRETIME` command (#1031)\n- Added support for `EXPIRETIME` command (#1029)\n- Added support for `EVAL_RO` command (#1032)\n- Added support for `LCS` command (#1035)\n- Added support for `SORT_RO` command (#1044)\n- Added support for `SINTERCARD` command (#1027)\n- Added support for `EVALSHA_RO` command (#1034)\n- Added support for new arguments for `BITPOS` and `BITCOUNT` commands (#1045)\n- Added support for new arguments for `EXPIRE` and `EXPIREAT` commands (#1046)\n\n### Bug Fixes\n- Fixed deprecated function call syntax\n\n### Deprecated\n- Further deprecated phpiredis and webdis integration (#1179)\n\n### Maintenance\n- Applied coding standards\n- Pass PHPStan level 2\n\n## v2.1.1 (2023-01-17)\n\n### Bug Fixes\n- Fix `@template` in `Predis\\Client` (#1017)\n- Fix support options array in `ZINTERSTORE` and `ZUNIONSTORE` (#1018)\n\n### Deprecated\n- Deprecated phpiredis and webdis connections\n\n## v2.1.0 (2023-01-16)\n\n### New Features\n- Implemented `GETEX` command (#872)\n- Implemented `GETDEL` command (#869)\n- Implemented `COPY` command (#866)\n- Implemented `FAILOVER` command (#875)\n- Implemented `LMOVE` command (#863)\n- Implemented `LMPOP` command (#1013)\n- Implemented `HRANDFIELD` command (#870)\n- Implemented `SMISMEMBER` command (#871)\n- Implemented `ZMPOP` command (#831)\n- Implemented `BLMOVE` command (#865)\n- Implemented `BLMPOP` command (#1015)\n- Implemented `BZMPOP` command (#833)\n- Implemented `BZPOPMIN` command (#862)\n- Implemented `BZPOPMAX` command (#864)\n- Implemented `ZUNION` command (#860)\n- Implemented `ZINTER` command (#859)\n- Implemented `ZINTERCARD` command (#861)\n- Implemented `ZRANGESTORE` command (#829)\n- Implemented `ZDIFFSTORE` command (#828)\n- Implemented `ZDIFF` command (#826)\n- Implemented `ZRANDMEMBER` command (#825)\n- Implemented `ZMSCORE` (#823)\n- Implemented `GEOSEARCH` command (#867)\n- Implemented `GEOSEARCHSTORE` command (#873)\n\n### Bug Fixes\n- Added annotations to suppress PHP 8.1 return type deprecation warning (#810)\n\n### Maintenance\n- Added mixin annotations for traits (#835)\n\n## v2.0.3 (2022-10-11)\n\n- Improved PHP 8.2 support\n- Call `is_resource()` before reading/writing\n- Added partial support for Redis Stream commands\n- Fixed Sentinel authentication issue\n\n## v2.0.2 (2022-09-06)\n\n- Fixed PHP 8.2 deprecation notice: Use of \"static\" in callables\n\n## v2.0.1 (2022-09-04)\n\n- Added retry interval to `RedisCluster` with a default of `10ms`\n- Avoid PHP 8.2 warning in `Connection\\Parameters`\n- Fixed Sentinel reconnect issue in long-running PHP processes\n\n## v2.0.0 (2022-06-08)\n\n- Dropped support for PHP 7.1 and older\n\n- Accepted values for some client options have changed, this is the new list of\n  accepted values:\n\n  - `aggregate`: callable returning an aggregate connection.\n  - `cluster`: string value (`predis`, `redis`), callable returning an aggregate\n    connection.\n  - `replication`: string value (`predis`, `sentinel`), callable returning an\n    aggregate connection.\n  - `commands`: command factory, named array mapping command IDs to PHP classes,\n    callable returning a command factory or a named array.\n  - `connections`: connection factory, callable object returning a connection\n    factory, named array mapping URI schemes to PHP classes, string identifying\n    a supported combination of configurations for the connection factory.\n  - `prefix`: string value, command processor, callable.\n  - `exceptions`: boolean.\n\n  Note that both the `cluster` and `replication` options now return a closure\n  acting as initializer instead of an aggregate connection instance.\n\n- The `connections` client option now accepts certain string values identifying\n  certain combinations of configurations for the connection factory. Currently\n  this is used to provide a short way to configure Predis to load our phpiredis\n  based connection backends simply, accepted values are:\n\n  - `phpiredis-stream` maps `Phpiredis\\Connection\\PhpiredisStreamConnection` to\n    `tcp`, `redis`, `unix` URI schemes.\n  - `phpiredis-socket` maps `Phpiredis\\Connection\\PhpiredisSocketConnection` to\n    `tcp`, `redis`, `unix` URI schemes.\n  - `phpiredis-stream` is simply an alias of `phpiredis-stream`.\n\n- Added the new `Predis\\Cluster\\Hash\\PhpiredisCRC16` class using ext-phpiredis\n  to speed-up the generation of the CRC16 hash of keys for redis-cluster. Predis\n  automatically uses this class when ext-phpiredis is loaded, but it is possible\n  to configure the hash generator using the new `crc16` client option (accepted\n  values `predis`, `phpiredis` or an hash generator instance).\n\n- Replication backends now use the `role` parameter instead of `alias` in order\n  to distinguish the role of a connection. Accepted values are `master`, `slave`\n  and, for redis-sentinel, `sentinel`. This led to a redesign of how connections\n  can be retrieved from replication backends: the method getConnectionById() now\n  retrieves a connection only by its ID (ip:port pair), to get a connection by\n  its alias there is the new method getConnectionByAlias(). This method is not\n  supported by the redis-sentinel backend due to its dynamic nature (connections\n  are retrieved and initialized at runtime from sentinels) but it is possible to\n  get a single connection from the pool by using its ID. It is also possible to\n  retrieve a connection by role using the method getConnectionByRole().\n\n- The concept of connection ID (ip:port pair) and connection alias (the `alias`\n  parameter) in `Predis\\Connection\\Cluster\\PredisCluster` has been separated.\n  This change does not affect distribution and it is safe for existing clusters.\n\n- Client option classes now live in the `Predis\\Configuration\\Option` namespace.\n\n- Classes for Redis commands have been moved into the new `Predis\\Command\\Redis`\n  namespace and each class name mirrors the respective Redis command ID.\n\n- The concept of server profiles is gone, the library now uses a single command\n  factory to create instances of commands classes. The `profile` option has been\n  replaced by the `commands` option accepting `Predis\\Command\\FactoryInterface`\n  to customize the underlying command factory. The default command factory class\n  used by Predis is `Predis\\Command\\RedisFactory` and it still allows developers\n  to define or override commands with their own implementations. In addition to\n  that, `Predis\\Command\\RedisFactory` relies on a convention-over-configuration\n  approach by looking for a suitable class with the same name as the command ID\n  in the `Predis\\Command\\Redis` when the internal class map does not contain a\n  class associated.\n\n- The method `Predis\\Client::getClientFor($connectionID)` has been replaced by\n  `getClientBy($selector, $value, $callable = null)` which is more flexible as\n  it is not limited to picking a connection from the underlying replication or\n  cluster backend by ID, but allows users to specify a `$selector` that can be\n  either `id` (the old behavior), `key`, `slot` or `command`. The client uses\n  duck-typing instead of type-checking to verify that the underlying connection\n  implements a method that matches the specified selector which means that some\n  selectors may not be available to all kinds of connection backends.\n\n- The method `Predis\\Client::getConnectionById($connectionID)` has been removed.\n\n- Changed the signature for the constructor of `Predis\\Command\\RawCommand`.\n\n- The `Predis\\Connection\\Aggregate` namespace has been split into two separate\n  namespaces for cluster backends (`Predis\\Connection\\Cluster`) and replication\n  backends (`Predis\\Connection\\Replication`).\n\n- The method `Predis\\Connection\\AggregateConnectionInterface::getConnection()`\n  has been renamed to `getConnectionByCommand()`.\n\n- The methods `switchToMaster()` and `switchToSlave()` have been promoted to be\n  part of `Predis\\Connection\\Replication\\ReplicationInterface` while the method\n  `switchTo($connection)` has been removed from it.\n\n- The method `Predis\\Connection\\Cluster\\PredisCluster::executeCommandOnNodes()`\n  has been removed as it is possible to achieve the same by iterating over the\n  connection or, even better, over the client instance in order to execute the\n  same command against all of the registered connections.\n\n- The class `Predis\\CommunicationException` now uses the correct default types\n  for the `$message` (string) and `$code` (integer) parameters.\n\n- The method `onConnectionError()` in `Predis\\Connection\\AbstractConnection`\n  class now passes the second argument as an integer value `0` as its default\n  value instead of `null`.\n\n- Support Pub/Sub and Pipelines when using replication\n\n- The class `Predis\\Transaction\\AbortedMultiExecException` now uses the correct\n  default types for the `$code` (integer) parameter.\n\n- __FIX__: using `strval` in `getScanOptions()` method, part of\n  `Predis\\Collection\\Iterator\\CursorBasedIterator` to make sure we retrieve the\n  string value of `$this->match` and not passing `null` to `strlen()` function.\n\n- __FIX__: the value returned from `getArgument()` in `isReadOperation()` method,\n  part of `Predis\\Replication\\ReplicationStrategy` class, is checked to not pass\n  `null` to `sha1` function.\n\n- __FIX__: the value returned from `getArgument()` in `parseResponse()`method,\n  part of `Predis\\Command\\Redis\\SENTINEL` class, is checked to not pass `null`\n  to `strtolower()` function.\n\n## v2.0.0-beta.1 (2022-05-26)\n\nSame as v2.0.0\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 7.595703125,
          "content": "# Frequently asked questions about Predis #\n\n## What is the point of Predis? ##\n\nThe main point of Predis is about offering a highly customizable and extensible client for Redis,\nthat can be easily extended by developers while still being reasonably fast. With Predis you can\nswap almost any class with your own custom implementation: you can have custom connection classes,\nnew distribution strategies for client-side sharding, or handlers to replace or add Redis commands.\nAll of this can be achieved without messing with the source code of the library and directly in your\nown application. Given the fast pace at which Redis is developed and adds new features, this can be\na great asset since it allows developers to add new and still missing features or commands or change\nthe standard behaviour of the library without the need to break dependencies in production code (at\nleast to some degree).\n\n## Does Predis support UNIX domain sockets and persistent connections? ##\n\nYes. Obviously persistent connections actually work only when using PHP configured as a persistent\nprocess reused by the web server (see [PHP-FPM](http://php-fpm.org)).\n\n## Does Predis support SSL-encrypted connections? ##\n\nYes. Encrypted connections are mostly useful when connecting to Redis instances exposed by various\ncloud hosting providers without the need to configure an SSL proxy, but you should also take into\naccount the general performances degradation especially during the connect() operation when the TLS\nhandshake must be performed to secure the connection. Persistent SSL-encrypted connections may help\nin that respect, but they are supported only when running on PHP >= 7.0.0.\n\n## Does Predis support transparent (de)serialization of values? ##\n\nWhen using [Relay](https://github.com/cachewerk/relay) as the underlying client, several\nserialization and compression algorithms are supported. This slightly increases CPU usage,\nbut significantly reduces bytes sent over the network and Redis memory usage.\n\nWithout Relay, Predis will not serialize data and will never do that by default. The reason\nbehind this decision is that serialization is usually something that developers prefer to\ncustomize depending on their needs and can not be easily generalized when using Redis because\nof the many possible access patterns for your data. This does not mean that it is impossible\nto have such a feature since you can leverage the extensibility of this library to define\nyour own serialization-aware commands. You can find more details about how to do that\n[on this issue](http://github.com/predis/predis/issues/29#issuecomment-1202624).\n\n## How can I force Predis to connect to Redis before sending any command? ##\n\nExplicitly connecting to Redis is usually not needed since the client initializes connections lazily\nonly when they are needed. Admittedly, this behavior can be inconvenient in certain scenarios when\nyou absolutely need to perform an upfront check to determine if the server is up and running and\neventually catch exceptions on failures. Forcing the client to open the underlying connection can be\ndone by invoking `Predis\\Client::connect()`:\n\n```php\n$client = new Predis\\Client();\n\ntry {\n    $client->connect();\n} catch (Predis\\Connection\\ConnectionException $exception) {\n    // We could not connect to Redis! Your handling code goes here.\n}\n\n$client->info();\n```\n\n## How Predis abstracts Redis commands? ##\n\nThe approach used to implement Redis commands is quite simple: by default each command follows the\nsame signature as defined on the [Redis documentation](http://redis.io/commands) which makes things\npretty easy if you already know how Redis works or you need to look up how to use certain commands.\nAlternatively, variadic commands can accept an array for keys or values (depending on the command)\ninstead of a list of arguments. Commands such as [`RPUSH`](http://redis.io/commands/rpush) and\n[`HMSET`](http://redis.io/commands/hmset) are great examples:\n\n```php\n$client->rpush('my:list', 'value1', 'value2', 'value3');             // plain method arguments\n$client->rpush('my:list', ['value1', 'value2', 'value3']);           // single argument array\n\n$client->hmset('my:hash', 'field1', 'value1', 'field2', 'value2');   // plain method arguments\n$client->hmset('my:hash', ['field1'=>'value1', 'field2'=>'value2']); // single named array\n```\n\nAn exception to this rule is [`SORT`](http://redis.io/commands/sort) for which modifiers are passed\n[using a named array](tests/Predis/Command/KeySortTest.php#L54-L75).\n\n## When should I use Relay? ##\n\nIf you care about performance, __always__. [Relay](https://github.com/cachewerk/relay) is free to use.\n\n## When should I use PhpRedis? ###\n\nPredis is fast enough when Redis is located on the same machine as PHP, more on that later.\n\n[PhpRedis](https://github.com/phpredis/phpredis) (and Relay) perform significantly better when\nnetwork I/O is involved, due to their ability to compress data by ~75%. Fewer bytes and received\nsent over the network [means faster operations](https://akalongman.medium.com/phpredis-vs-predis-comparison-on-real-production-data-a819b48cbadb),\nand potentially cost savings when network traffic isn't free (e.g. AWS ElastiCache Inter-AZ transfer costs).\n\n## Predis is a pure-PHP implementation: it can not be fast enough! ##\n\nIt really depends, but most of the times the answer is: _yes, it is fast enough_. I will give you a\ncouple of easy numbers with a simple test that uses a single client and is executed by PHP 5.5.6\nagainst a local instance of Redis 2.8 that runs under Ubuntu 13.10 on a Intel Q6600:\n\n```\n21000 SET/sec using 12 bytes for both key and value.\n21000 GET/sec while retrieving the very same values.\n0.130 seconds to fetch 30000 keys using _KEYS *_.\n```\n\nHow does it compare with [__PhpRedis__](http://github.com/phpredis/phpredis), a nice C extension\nproviding an efficient client for Redis?\n\n```\n30100 SET/sec using 12 bytes for both key and value\n29400 GET/sec while retrieving the very same values\n0.035 seconds to fetch 30000 keys using \"KEYS *\"\".\n```\n\nWow __PhpRedis__ seems much faster! Well, we are comparing a C extension with a pure-PHP library so\nlower numbers are quite expected but there is a fundamental flaw in them: is this really how you are\ngoing to use Redis in your application? Are you really going to send thousands of commands using a\nfor-loop on each page request using a single client instance? If so... well I guess you are probably\ndoing something wrong. Also, if you need to `SET` or `GET` multiple keys you should definitely use\ncommands such as `MSET` and `MGET`. You can also use pipelining to get more performances when this\ntechnique can be used.\n\nThere is one more thing: we have tested the overhead of Predis by connecting on a localhost instance\nof Redis but how these numbers change when we hit the physical network by connecting to remote Redis\ninstances?\n\n```\nUsing Predis:\n3200 SET/sec using 12 bytes for both key and value\n3200 GET/sec while retrieving the very same values\n0.132 seconds to fetch 30000 keys using \"KEYS *\".\n\nUsing PhpRedis:\n3500 SET/sec using 12 bytes for both key and value\n3500 GET/sec while retrieving the very same values\n0.045 seconds to fetch 30000 keys using \"KEYS *\".\n```\n\nThere you go, you get almost the same average numbers and the reason is simple: network latency is a\nreal performance killer and you cannot do (almost) anything about that. As a disclaimer, remember\nthat we are measuring the overhead of client libraries implementations and the effects of network\nround-trip times, so we are not really measuring how fast Redis is. Redis shines best with thousands\nof concurrent clients doing requests! Also, actual performances should be measured according to how\nyour application will use Redis.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.12109375,
          "content": "MIT License\n\nCopyright (c) 2009-2020 Daniele Alessandri (original work)\nCopyright (c) 2021-2024 Till KrÃ¼ss (modified work)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.95703125,
          "content": "# Predis #\n\n[![Software license][ico-license]](LICENSE)\n[![Latest stable][ico-version-stable]][link-releases]\n[![Latest development][ico-version-dev]][link-releases]\n[![Monthly installs][ico-downloads-monthly]][link-downloads]\n[![Build status][ico-build]][link-actions]\n[![Coverage Status][ico-coverage]][link-coverage]\n\nA flexible and feature-complete [Redis](http://redis.io) client for PHP 7.2 and newer.\n\nMore details about this project can be found on the [frequently asked questions](FAQ.md).\n\n\n## Main features ##\n\n- Support for Redis from __3.0__ to __7.4__.\n- Support for clustering using client-side sharding and pluggable keyspace distributors.\n- Support for [redis-cluster](http://redis.io/topics/cluster-tutorial) (Redis >= 3.0).\n- Support for master-slave replication setups and [redis-sentinel](http://redis.io/topics/sentinel).\n- Transparent key prefixing of keys using a customizable prefix strategy.\n- Command pipelining on both single nodes and clusters (client-side sharding only).\n- Abstraction for Redis transactions (Redis >= 2.0) and CAS operations (Redis >= 2.2).\n- Abstraction for Lua scripting (Redis >= 2.6) and automatic switching between `EVALSHA` or `EVAL`.\n- Abstraction for `SCAN`, `SSCAN`, `ZSCAN` and `HSCAN` (Redis >= 2.8) based on PHP iterators.\n- Connections are established lazily by the client upon the first command and can be persisted.\n- Connections can be established via TCP/IP (also TLS/SSL-encrypted) or UNIX domain sockets.\n- Support for custom connection classes for providing different network or protocol backends.\n- Flexible system for defining custom commands and override the default ones.\n\n\n## How to _install_ and use Predis ##\n\nThis library can be found on [Packagist](http://packagist.org/packages/predis/predis) for an easier\nmanagement of projects dependencies using [Composer](http://packagist.org/about-composer).\nCompressed archives of each release are [available on GitHub](https://github.com/predis/predis/releases).\n\n```shell\ncomposer require predis/predis\n```\n\n\n### Loading the library ###\n\nPredis relies on the autoloading features of PHP to load its files when needed and complies with the\n[PSR-4 standard](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md).\nAutoloading is handled automatically when dependencies are managed through Composer, but it is also\npossible to leverage its own autoloader in projects or scripts lacking any autoload facility:\n\n```php\n// Prepend a base path if Predis is not available in your \"include_path\".\nrequire 'Predis/Autoloader.php';\n\nPredis\\Autoloader::register();\n```\n\n\n### Connecting to Redis ###\n\nWhen creating a client instance without passing any connection parameter, Predis assumes `127.0.0.1`\nand `6379` as default host and port. The default timeout for the `connect()` operation is 5 seconds:\n\n```php\n$client = new Predis\\Client();\n$client->set('foo', 'bar');\n$value = $client->get('foo');\n```\n\nConnection parameters can be supplied either in the form of URI strings or named arrays. The latter\nis the preferred way to supply parameters, but URI strings can be useful when parameters are read\nfrom non-structured or partially-structured sources:\n\n```php\n// Parameters passed using a named array:\n$client = new Predis\\Client([\n    'scheme' => 'tcp',\n    'host'   => '10.0.0.1',\n    'port'   => 6379,\n]);\n\n// Same set of parameters, passed using an URI string:\n$client = new Predis\\Client('tcp://10.0.0.1:6379');\n```\n\nPassword protected servers can be accessed by adding `password` to the parameters set. When ACLs are\nenabled on Redis >= 6.0, both `username` and `password` are required for user authentication.\n\nIt is also possible to connect to local instances of Redis using UNIX domain sockets, in this case\nthe parameters must use the `unix` scheme and specify a path for the socket file:\n\n```php\n$client = new Predis\\Client(['scheme' => 'unix', 'path' => '/path/to/redis.sock']);\n$client = new Predis\\Client('unix:/path/to/redis.sock');\n```\n\nThe client can leverage TLS/SSL encryption to connect to secured remote Redis instances without the\nneed to configure an SSL proxy like stunnel. This can be useful when connecting to nodes running on\nvarious cloud hosting providers. Encryption can be enabled with using the `tls` scheme and an array\nof suitable [options](http://php.net/manual/context.ssl.php) passed via the `ssl` parameter:\n\n```php\n// Named array of connection parameters:\n$client = new Predis\\Client([\n  'scheme' => 'tls',\n  'ssl'    => ['cafile' => 'private.pem', 'verify_peer' => true],\n]);\n\n// Same set of parameters, but using an URI string:\n$client = new Predis\\Client('tls://127.0.0.1?ssl[cafile]=private.pem&ssl[verify_peer]=1');\n```\n\nThe connection schemes [`redis`](http://www.iana.org/assignments/uri-schemes/prov/redis) (alias of\n`tcp`) and [`rediss`](http://www.iana.org/assignments/uri-schemes/prov/rediss) (alias of `tls`) are\nalso supported, with the difference that URI strings containing these schemes are parsed following\nthe rules described on their respective IANA provisional registration documents.\n\nThe actual list of supported connection parameters can vary depending on each connection backend so\nit is recommended to refer to their specific documentation or implementation for details.\n\nPredis can aggregate multiple connections when providing an array of connection parameters and the\nappropriate option to instruct the client about how to aggregate them (clustering, replication or a\ncustom aggregation logic). Named arrays and URI strings can be mixed when providing configurations\nfor each node:\n\n```php\n$client = new Predis\\Client([\n    'tcp://10.0.0.1?alias=first-node', ['host' => '10.0.0.2', 'alias' => 'second-node'],\n], [\n    'cluster' => 'predis',\n]);\n```\n\nSee the [aggregate connections](#aggregate-connections) section of this document for more details.\n\nConnections to Redis are lazy meaning that the client connects to a server only if and when needed.\nWhile it is recommended to let the client do its own stuff under the hood, there may be times when\nit is still desired to have control of when the connection is opened or closed: this can easily be\nachieved by invoking `$client->connect()` and `$client->disconnect()`. Please note that the effect\nof these methods on aggregate connections may differ depending on each specific implementation.\n\n\n### Client configuration ###\n\nMany aspects and behaviors of the client can be configured by passing specific client options to the\nsecond argument of `Predis\\Client::__construct()`:\n\n```php\n$client = new Predis\\Client($parameters, ['prefix' => 'sample:']);\n```\n\nOptions are managed using a mini DI-alike container and their values can be lazily initialized only\nwhen needed. The client options supported by default in Predis are:\n\n  - `prefix`: prefix string applied to every key found in commands.\n  - `exceptions`: whether the client should throw or return responses upon Redis errors.\n  - `connections`: list of connection backends or a connection factory instance.\n  - `cluster`: specifies a cluster backend (`predis`, `redis` or callable).\n  - `replication`: specifies a replication backend (`predis`, `sentinel` or callable).\n  - `aggregate`: configures the client with a custom aggregate connection (callable).\n  - `parameters`: list of default connection parameters for aggregate connections.\n  - `commands`: specifies a command factory instance to use through the library.\n\nUsers can also provide custom options with values or callable objects (for lazy initialization) that\nare stored in the options container for later use through the library.\n\n\n### Aggregate connections ###\n\nAggregate connections are the foundation upon which Predis implements clustering and replication and\nthey are used to group multiple connections to single Redis nodes and hide the specific logic needed\nto handle them properly depending on the context. Aggregate connections usually require an array of\nconnection parameters along with the appropriate client option when creating a new client instance.\n\n#### Cluster ####\n\nPredis can be configured to work in clustering mode with a traditional client-side sharding approach\nto create a cluster of independent nodes and distribute the keyspace among them. This approach needs\nsome sort of external health monitoring of nodes and requires the keyspace to be rebalanced manually\nwhen nodes are added or removed:\n\n```php\n$parameters = ['tcp://10.0.0.1', 'tcp://10.0.0.2', 'tcp://10.0.0.3'];\n$options    = ['cluster' => 'predis'];\n\n$client = new Predis\\Client($parameters);\n```\n\nAlong with Redis 3.0, a new supervised and coordinated type of clustering was introduced in the form\nof [redis-cluster](http://redis.io/topics/cluster-tutorial). This kind of approach uses a different\nalgorithm to distribute the keyspaces, with Redis nodes coordinating themselves by communicating via\na gossip protocol to handle health status, rebalancing, nodes discovery and request redirection. In\norder to connect to a cluster managed by redis-cluster, the client requires a list of its nodes (not\nnecessarily complete since it will automatically discover new nodes if necessary) and the `cluster`\nclient options set to `redis`:\n\n```php\n$parameters = ['tcp://10.0.0.1', 'tcp://10.0.0.2', 'tcp://10.0.0.3'];\n$options    = ['cluster' => 'redis'];\n\n$client = new Predis\\Client($parameters, $options);\n```\n\n#### Replication ####\n\nThe client can be configured to operate in a single master / multiple slaves setup to provide better\nservice availability. When using replication, Predis recognizes read-only commands and sends them to\na random slave in order to provide some sort of load-balancing and switches to the master as soon as\nit detects a command that performs any kind of operation that would end up modifying the keyspace or\nthe value of a key. Instead of raising a connection error when a slave fails, the client attempts to\nfall back to a different slave among the ones provided in the configuration.\n\nThe basic configuration needed to use the client in replication mode requires one Redis server to be\nidentified as the master (this can be done via connection parameters by setting the `role` parameter\nto `master`) and one or more slaves (in this case setting `role` to `slave` for slaves is optional):\n\n```php\n$parameters = ['tcp://10.0.0.1?role=master', 'tcp://10.0.0.2', 'tcp://10.0.0.3'];\n$options    = ['replication' => 'predis'];\n\n$client = new Predis\\Client($parameters, $options);\n```\n\nThe above configuration has a static list of servers and relies entirely on the client's logic, but\nit is possible to rely on [`redis-sentinel`](http://redis.io/topics/sentinel) for a more robust HA\nenvironment with sentinel servers acting as a source of authority for clients for service discovery.\nThe minimum configuration required by the client to work with redis-sentinel is a list of connection\nparameters pointing to a bunch of sentinel instances, the `replication` option set to `sentinel` and\nthe `service` option set to the name of the service:\n\n```php\n$sentinels = ['tcp://10.0.0.1', 'tcp://10.0.0.2', 'tcp://10.0.0.3'];\n$options   = ['replication' => 'sentinel', 'service' => 'mymaster'];\n\n$client = new Predis\\Client($sentinels, $options);\n```\n\nIf the master and slave nodes are configured to require an authentication from clients, a password\nmust be provided via the global `parameters` client option. This option can also be used to specify\na different database index. The client options array would then look like this:\n\n```php\n$options = [\n    'replication' => 'sentinel',\n    'service' => 'mymaster',\n    'parameters' => [\n        'password' => $secretpassword,\n        'database' => 10,\n    ],\n];\n```\n\nWhile Predis is able to distinguish commands performing write and read-only operations, `EVAL` and\n`EVALSHA` represent a corner case in which the client switches to the master node because it cannot\ntell when a Lua script is safe to be executed on slaves. While this is indeed the default behavior,\nwhen certain Lua scripts do not perform write operations it is possible to provide an hint to tell\nthe client to stick with slaves for their execution:\n\n```php\n$parameters = ['tcp://10.0.0.1?role=master', 'tcp://10.0.0.2', 'tcp://10.0.0.3'];\n$options    = ['replication' => function () {\n    // Set scripts that won't trigger a switch from a slave to the master node.\n    $strategy = new Predis\\Replication\\ReplicationStrategy();\n    $strategy->setScriptReadOnly($LUA_SCRIPT);\n\n    return new Predis\\Connection\\Replication\\MasterSlaveReplication($strategy);\n}];\n\n$client = new Predis\\Client($parameters, $options);\n$client->eval($LUA_SCRIPT, 0);             // Sticks to slave using `eval`...\n$client->evalsha(sha1($LUA_SCRIPT), 0);    // ... and `evalsha`, too.\n```\n\nThe [`examples`](examples/) directory contains a few scripts that demonstrate how the client can be\nconfigured and used to leverage replication in both basic and complex scenarios.\n\n\n### Command pipelines ###\n\nPipelining can help with performances when many commands need to be sent to a server by reducing the\nlatency introduced by network round-trip timings. Pipelining also works with aggregate connections.\nThe client can execute the pipeline inside a callable block or return a pipeline instance with the\nability to chain commands thanks to its fluent interface:\n\n```php\n// Executes a pipeline inside the given callable block:\n$responses = $client->pipeline(function ($pipe) {\n    for ($i = 0; $i < 1000; $i++) {\n        $pipe->set(\"key:$i\", str_pad($i, 4, '0', 0));\n        $pipe->get(\"key:$i\");\n    }\n});\n\n// Returns a pipeline that can be chained thanks to its fluent interface:\n$responses = $client->pipeline()->set('foo', 'bar')->get('foo')->execute();\n```\n\n\n### Transactions ###\n\nThe client provides an abstraction for Redis transactions based on `MULTI` and `EXEC` with a similar\ninterface to command pipelines:\n\n```php\n// Executes a transaction inside the given callable block:\n$responses = $client->transaction(function ($tx) {\n    $tx->set('foo', 'bar');\n    $tx->get('foo');\n});\n\n// Returns a transaction that can be chained thanks to its fluent interface:\n$responses = $client->transaction()->set('foo', 'bar')->get('foo')->execute();\n```\n\nThis abstraction can perform check-and-set operations thanks to `WATCH` and `UNWATCH` and provides\nautomatic retries of transactions aborted by Redis when `WATCH`ed keys are touched. For an example\nof a transaction using CAS you can see [the following example](examples/transaction_using_cas.php).\n\n\n### Adding new commands ###\n\nWhile we try to update Predis to stay up to date with all the commands available in Redis, you might\nprefer to stick with an old version of the library or provide a different way to filter arguments or\nparse responses for specific commands. To achieve that, Predis provides the ability to implement new\ncommand classes to define or override commands in the default command factory used by the client:\n\n```php\n// Define a new command by extending Predis\\Command\\Command:\nclass BrandNewRedisCommand extends Predis\\Command\\Command\n{\n    public function getId()\n    {\n        return 'NEWCMD';\n    }\n}\n\n// Inject your command in the current command factory:\n$client = new Predis\\Client($parameters, [\n    'commands' => [\n        'newcmd' => 'BrandNewRedisCommand',\n    ],\n]);\n\n$response = $client->newcmd();\n```\n\nThere is also a method to send raw commands without filtering their arguments or parsing responses.\nUsers must provide the list of arguments for the command as an array, following the signatures as\ndefined by the [Redis documentation for commands](http://redis.io/commands):\n\n```php\n$response = $client->executeRaw(['SET', 'foo', 'bar']);\n```\n\n\n### Script commands ###\n\nWhile it is possible to leverage [Lua scripting](http://redis.io/commands/eval) on Redis 2.6+ using\ndirectly [`EVAL`](http://redis.io/commands/eval) and [`EVALSHA`](http://redis.io/commands/evalsha),\nPredis offers script commands as an higher level abstraction built upon them to make things simple.\nScript commands can be registered in the command factory used by the client and are accessible as if\nthey were plain Redis commands, but they define Lua scripts that get transmitted to the server for\nremote execution. Internally they use [`EVALSHA`](http://redis.io/commands/evalsha) by default and\nidentify a script by its SHA1 hash to save bandwidth, but [`EVAL`](http://redis.io/commands/eval)\nis used as a fall back when needed:\n\n```php\n// Define a new script command by extending Predis\\Command\\ScriptCommand:\nclass ListPushRandomValue extends Predis\\Command\\ScriptCommand\n{\n    public function getKeysCount()\n    {\n        return 1;\n    }\n\n    public function getScript()\n    {\n        return <<<LUA\nmath.randomseed(ARGV[1])\nlocal rnd = tostring(math.random())\nredis.call('lpush', KEYS[1], rnd)\nreturn rnd\nLUA;\n    }\n}\n\n// Inject the script command in the current command factory:\n$client = new Predis\\Client($parameters, [\n    'commands' => [\n        'lpushrand' => 'ListPushRandomValue',\n    ],\n]);\n\n$response = $client->lpushrand('random_values', $seed = mt_rand());\n```\n\n\n### Customizable connection backends ###\n\nPredis can use different connection backends to connect to Redis. The builtin Relay integration\nleverages the [Relay](https://github.com/cachewerk/relay) extension for PHP for major performance\ngains, by caching a partial replica of the Redis dataset in PHP shared runtime memory.\n\n```php\n$client = new Predis\\Client('tcp://127.0.0.1', [\n    'connections' => 'relay',\n]);\n```\n\nDevelopers can create their own connection classes to support whole new network backends, extend\nexisting classes or provide completely different implementations. Connection classes must implement\n`Predis\\Connection\\NodeConnectionInterface` or extend `Predis\\Connection\\AbstractConnection`:\n\n```php\nclass MyConnectionClass implements Predis\\Connection\\NodeConnectionInterface\n{\n    // Implementation goes here...\n}\n\n// Use MyConnectionClass to handle connections for the `tcp` scheme:\n$client = new Predis\\Client('tcp://127.0.0.1', [\n    'connections' => ['tcp' => 'MyConnectionClass'],\n]);\n```\n\nFor a more in-depth insight on how to create new connection backends you can refer to the actual\nimplementation of the standard connection classes available in the `Predis\\Connection` namespace.\n\n\n## Development ##\n\n\n### Reporting bugs and contributing code ###\n\nContributions to Predis are highly appreciated either in the form of pull requests for new features,\nbug fixes, or just bug reports. We only ask you to adhere to issue and pull request templates.\n\n\n### Test suite ###\n\n__ATTENTION__: Do not ever run the test suite shipped with Predis against instances of Redis running\nin production environments or containing data you are interested in!\n\nPredis has a comprehensive test suite covering every aspect of the library and that can optionally\nperform integration tests against a running instance of Redis (required >= 2.4.0 in order to verify\nthe correct behavior of the implementation of each command. Integration tests for unsupported Redis\ncommands are automatically skipped. If you do not have Redis up and running, integration tests can\nbe disabled. See [the tests README](tests/README.md) for more details about testing this library.\n\nPredis uses GitHub Actions for continuous integration and the history for past and current builds can be\nfound [on its actions page](https://github.com/predis/predis/actions).\n\n### License ###\n\nThe code for Predis is distributed under the terms of the MIT license (see [LICENSE](LICENSE)).\n\n[ico-license]: https://img.shields.io/github/license/predis/predis.svg?style=flat-square\n[ico-version-stable]: https://img.shields.io/github/v/tag/predis/predis?label=stable&style=flat-square\n[ico-version-dev]: https://img.shields.io/github/v/tag/predis/predis?include_prereleases&label=pre-release&style=flat-square\n[ico-downloads-monthly]: https://img.shields.io/packagist/dm/predis/predis.svg?style=flat-square\n[ico-build]: https://img.shields.io/github/actions/workflow/status/predis/predis/tests.yml?branch=main&style=flat-square\n[ico-coverage]: https://img.shields.io/coverallsCoverage/github/predis/predis?style=flat-square\n\n[link-releases]: https://github.com/predis/predis/releases\n[link-actions]: https://github.com/predis/predis/actions\n[link-downloads]: https://packagist.org/packages/predis/predis/stats\n[link-coverage]: https://coveralls.io/github/predis/predis\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0087890625,
          "content": "2.3.1-dev"
        },
        {
          "name": "autoload.php",
          "type": "blob",
          "size": 0.25390625,
          "content": "<?php\n\n/*\n * This file is part of the Predis package.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nrequire __DIR__.'/src/Autoloader.php';\n\nPredis\\Autoloader::register();\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.283203125,
          "content": "{\n    \"name\": \"predis/predis\",\n    \"type\": \"library\",\n    \"description\": \"A flexible and feature-complete Redis client for PHP.\",\n    \"keywords\": [\"nosql\", \"redis\", \"predis\"],\n    \"homepage\": \"http://github.com/predis/predis\",\n    \"license\": \"MIT\",\n    \"support\": {\n        \"issues\": \"https://github.com/predis/predis/issues\"\n    },\n    \"authors\": [\n        {\n            \"name\": \"Till KrÃ¼ss\",\n            \"homepage\": \"https://till.im\",\n            \"role\": \"Maintainer\"\n        }\n    ],\n    \"funding\": [\n        {\n            \"type\": \"github\",\n            \"url\": \"https://github.com/sponsors/tillkruss\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^7.2 || ^8.0\"\n    },\n    \"require-dev\": {\n        \"friendsofphp/php-cs-fixer\": \"^3.3\",\n        \"phpstan/phpstan\": \"^1.9\",\n        \"phpunit/phpunit\": \"^8.0 || ^9.4\"\n    },\n    \"suggest\": {\n        \"ext-relay\": \"Faster connection with in-memory caching (>=0.6.2)\"\n    },\n    \"scripts\": {\n        \"phpstan\": \"phpstan analyse\",\n        \"style\": \"php-cs-fixer fix --diff --dry-run\",\n        \"style:fix\": \"php-cs-fixer fix\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Predis\\\\\": \"src/\"\n        }\n    },\n    \"config\": {\n        \"sort-packages\": true,\n        \"preferred-install\": \"dist\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan-tests.dist.neon",
          "type": "blob",
          "size": 0.509765625,
          "content": "parameters:\n  level: 0\n\n  paths:\n    - tests/\n\n  ignoreErrors:\n    # Uses func_get_args()\n    - message: \"#^Static method Predis\\\\\\\\Command\\\\\\\\RawCommand\\\\:\\\\:create\\\\(\\\\) invoked with 0 parameters, at least 1 required\\\\.$#\"\n      count: 1\n      path: tests/Predis/Command/RawCommandTest.php\n    # Mockery\n    - message: \"#^Call to an undefined method Predis\\\\\\\\Configuration\\\\\\\\Option\\\\\\\\AggregateTest\\\\:\\\\:getMockConnectionClass\\\\(\\\\)\\\\.$#\"\n      count: 2\n      path: tests/Predis/Configuration/Option/AggregateTest.php\n"
        },
        {
          "name": "phpstan.dist.neon",
          "type": "blob",
          "size": 2.400390625,
          "content": "parameters:\n  level: 2\n\n  paths:\n    - src/\n\n  ignoreErrors:\n    # Tricky ones\n    - message: \"#^Cannot cast Predis\\\\\\\\Response\\\\\\\\ResponseInterface to string\\\\.$#\"\n      count: 1\n      path: src/Client.php\n    - message: \"#^Cannot cast Predis\\\\\\\\Connection\\\\\\\\ConnectionInterface to string\\\\.$#\"\n      count: 1\n      path: src/Client.php\n    # phpiredis extension is not installed\n    - \"#^Function phpiredis_\\\\w+ not found\\\\.$#\"\n    - \"#^Constant PHPIREDIS_#\"\n    # \"new static\" in non-final classes\n    - message: \"#^Unsafe usage of new static\\\\(\\\\)\\\\.$#\"\n      count: 3\n      path: src/Client.php\n    - message: \"#^Unsafe usage of new static\\\\(\\\\)\\\\.$#\"\n      count: 1\n      path: src/Connection/Parameters.php\n    # Using an interface as concrete type\n    - message: \"#^Call to an undefined method Predis\\\\\\\\Command\\\\\\\\FactoryInterface\\\\:\\\\:define\\\\(\\\\)\\\\.$#\"\n      count: 1\n      path: src/Configuration/Option/Commands.php\n    - message: \"#^Call to an undefined method Predis\\\\\\\\Command\\\\\\\\FactoryInterface\\\\:\\\\:undefine\\\\(\\\\)\\\\.$#\"\n      count: 1\n      path: src/Configuration/Option/Commands.php\n    - message: \"#^Access to an undefined property Predis\\\\\\\\Configuration\\\\\\\\OptionsInterface\\\\:\\\\:\\\\$parameters\\\\.$#\"\n      count: 1\n      path: src/Configuration/Option/Connections.php\n    - message: \"#^Access to an undefined property Predis\\\\\\\\Connection\\\\\\\\ParametersInterface\\\\:\\\\:\\\\$weight\\\\.$#\"\n      count: 1\n      path: src/Connection/Cluster/PredisCluster.php\n    - message: \"#^Variable \\\\$response might not be defined\\\\.$#\"\n      count: 2\n      path: src/Connection/Cluster/RedisCluster.php\n    - message: \"#^Access to an undefined property Predis\\\\\\\\Connection\\\\\\\\ParametersInterface\\\\:\\\\:\\\\$role\\\\.$#\"\n      count: 1\n      path: src/Connection/Replication/MasterSlaveReplication.php\n    - message: \"#^Access to an undefined property Predis\\\\\\\\Connection\\\\\\\\ParametersInterface\\\\:\\\\:\\\\$role\\\\.$#\"\n      count: 1\n      path: src/Connection/Replication/SentinelReplication.php\n    # try/catch problems\n    - message: \"#^Variable \\\\$connection might not be defined\\\\.$#\"\n      count: 1\n      path: src/Connection/Replication/MasterSlaveReplication.php\n    - message: \"#^Variable \\\\$response might not be defined\\\\.$#\"\n      count: 1\n      path: src/Connection/Replication/MasterSlaveReplication.php\n    - message: \"#^Variable \\\\$response might not be defined\\\\.$#\"\n      count: 1\n      path: src/Connection/Replication/SentinelReplication.php\n"
        },
        {
          "name": "phpunit.relay.xml",
          "type": "blob",
          "size": 1.384765625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n    bootstrap=\"tests/bootstrap.php\"\n    colors=\"true\"\n    convertErrorsToExceptions=\"true\"\n    convertNoticesToExceptions=\"true\"\n    convertWarningsToExceptions=\"true\"\n    processIsolation=\"false\"\n    stopOnError=\"false\"\n    stopOnFailure=\"false\"\n    beStrictAboutTestsThatDoNotTestAnything=\"true\"\n>\n\n    <testsuites>\n        <testsuite name=\"Predis Test Suite\">\n            <directory phpVersion=\"7.4\">tests/Predis/</directory>\n        </testsuite>\n    </testsuites>\n\n    <groups>\n        <exclude>\n            <group>relay-incompatible</group>\n            <group>relay-resp3</group>\n            <group>realm-webdis</group>\n            <group>realm-stack</group>\n            <group>ext-curl</group>\n            <group>ext-phpiredis</group>\n            <group>cluster</group>\n        </exclude>\n    </groups>\n\n    <filter>\n        <whitelist>\n            <directory suffix=\".php\">src/</directory>\n        </whitelist>\n    </filter>\n\n    <php>\n        <const name=\"REDIS_SERVER_HOST\" value=\"127.0.0.1\" />\n        <const name=\"REDIS_SERVER_PORT\" value=\"6379\" />\n        <const name=\"REDIS_SERVER_DBNUM\" value=\"0\" />\n        <env name=\"USE_RELAY\" value=\"true\" />\n\n        <!-- Redis Cluster -->\n        <!-- Only master nodes endpoints included -->\n        <const name=\"REDIS_CLUSTER_ENDPOINTS\" value=\"127.0.0.1:6372,127.0.0.1:6373,127.0.0.1:6374\" />\n    </php>\n</phpunit>\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 1.73828125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n    bootstrap=\"tests/bootstrap.php\"\n    colors=\"true\"\n    convertErrorsToExceptions=\"true\"\n    convertNoticesToExceptions=\"true\"\n    convertWarningsToExceptions=\"true\"\n    processIsolation=\"false\"\n    stopOnError=\"false\"\n    stopOnFailure=\"false\"\n    beStrictAboutTestsThatDoNotTestAnything=\"true\"\n>\n\n    <testsuites>\n        <testsuite name=\"Predis Test Suite\">\n            <directory>tests/Predis/</directory>\n        </testsuite>\n    </testsuites>\n\n    <coverage processUncoveredFiles=\"true\">\n        <include>\n            <directory suffix=\".php\">./src</directory>\n        </include>\n        <report>\n            <clover outputFile=\"build/logs/clover.xml\"/>\n        </report>\n    </coverage>\n\n    <groups>\n        <exclude>\n            <group>realm-webdis</group>\n            <group>realm-stack</group>\n            <group>ext-relay</group>\n            <group>ext-curl</group>\n            <group>ext-phpiredis</group>\n            <group>cluster</group>\n            <!-- <group>connected</group> -->\n            <!-- <group>disconnected</group> -->\n            <!-- <group>commands</group> -->\n            <!-- <group>slow</group> -->\n        </exclude>\n    </groups>\n\n    <filter>\n        <whitelist>\n            <directory suffix=\".php\">src/</directory>\n        </whitelist>\n    </filter>\n\n    <php>\n        <const name=\"REDIS_SERVER_HOST\" value=\"127.0.0.1\" />\n        <const name=\"REDIS_SERVER_PORT\" value=\"6379\" />\n        <const name=\"REDIS_SERVER_DBNUM\" value=\"0\" />\n        <env name=\"USE_RELAY\" value=\"false\" />\n\n        <!-- Redis Cluster -->\n        <!-- Only master nodes endpoints included -->\n        <const name=\"REDIS_CLUSTER_ENDPOINTS\" value=\"127.0.0.1:6372,127.0.0.1:6373,127.0.0.1:6374\" />\n    </php>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}