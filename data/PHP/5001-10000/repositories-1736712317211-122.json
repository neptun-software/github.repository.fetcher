{
  "metadata": {
    "timestamp": 1736712317211,
    "page": 122,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Respect/Validation",
      "stars": 5823,
      "defaultBranch": "2.4",
      "files": [
        {
          "name": ".docheader",
          "type": "blob",
          "size": 0.0986328125,
          "content": "/*\n * Copyright (c) Alexandre Gomes Gaigalas <alganet@gmail.com>\n * SPDX-License-Identifier: MIT\n */\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1181640625,
          "content": "/*.dist export-ignore\n/*.yml export-ignore\n/.* export-ignore\n/bin export-ignore\n/docs export-ignore\n/tests export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.126953125,
          "content": ".couscous/\n.iso-codes-cache/\n.phpcs.cache\n.phpunit.result.cache\ncomposer.lock\nMakefile\nphpcs.xml\nphpstan.neon\nphpunit.xml\nvendor/\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.1005859375,
          "content": "version: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n\nmkdocs:\n  configuration: mkdocs.yml\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.658203125,
          "content": "# Changes in Respect\\Validation 2.x\n\n## 2.3\n\nVersioning Changes:\n\n - Dropped support for PHP 8.0 and below.\n - Updated dev dependencies\n\nDeprecations:\n\n - Symfony façade validators are no longer supported and were\n   removed.\n\nFixes:\n\n - `KeySet` now reports which extra keys are causing the rule to fail.\n - Ensure empty strings are never a valid currency code\n - Do not hide messages on EachException\n - Dot not throw exception when validating an uninitialized property\n\nChanges:\n\n - You can no longer wrap `KeySet` in `Not`.\n - `Phone` now uses `giggsey/libphonenumber-for-php`, this package needs\n   to be installed if you want to use this validator.\n - `Phone` now supports the parameter `$countryCode` to validate phones\n   of a specific country.\n\n## 2.2.4\n\nMeta:\n\n - CHANGELOG.md is being written once again to provide an overview\n   of active changes to the API and codebase.\n\nVersioning Changes:\n\n - Dropped PHP 7.3 support. \n - Added support for PHP 8.0 and PHP 8.1. This will be the\n   last release with PHP 7.4 support. Support for PHP 8.2 is considered\n   experimental, local development should be done at 8.1.\n\nDeprecations:\n\n - Zend Framework façade validators are no longer supported and were\n   removed.\n - Symfony façade validators are no longer suggested, and will be\n   removed in release 2.3.\n - v::dateTime('z') is not supported anymore in PHP8, and should not be relied upon\n\nFixes:\n - Updated bin/update-currency-codes to fetch XML from another source.\n - Updated bin/update-iso-codes to new file format.\n - Updated regionals (CountryCode.php, CurrencyCode.php, Tld.php) (2023-02-13).\n - Added RuPay card validation (thanks @rakshit087)\n - Fixed `v::decimal()` for float values (thanks @scruwi)\n - Added `v::portugueseNif()` to validate _Número de Identificação Fiscal_ in Portugal (thanks @goncalo-andrade).\n - Allow 5-digit and 6-digit postal codes for Cambodia (thanks @omega3000)\n - `v::intval()` now handles negative values with trailing zeroes better (thanks @l-x)\n\n## 2.2.x\n\nChangelogs between 1.1.0 and 2.2.4 are available only through `git log` and GitHub Releases.\n\n# Changes in Respect\\Validation 1.x\n\nAll notable changes of the Respect\\Validation releases are documented in this file.\n\n## 1.1.0 - 2016-04-24\n\n### Added\n\n- Create \"Fibonacci\" rule (#637)\n- Create \"IdentityCard\" rule (#632)\n- Create \"Image\" rule (#621)\n- Create \"LanguageCode\" rule (#597)\n- Create \"Pesel\" rule (#616)\n- Create \"PhpLabel\" rule (#652)\n\n### Changed\n\n- Allow the define brands for credit card validation (#661)\n- Define names for the child of Not rule (#641)\n- Ensure namespace separator on appended prefixes (#666)\n- Length gets length of integers (#643)\n- Set template for the only rule in the chain (#663)\n- Throw an exception when age is not an integer (#667)\n- Use \"{less/greater} than or equal to\" phrasing (#604)\n\n## 1.0.0 - 2015-10-24\n\n### Added\n\n- Add \"alpha-3\" and \"numeric\" formats for \"CountryCode\" rule (#530)\n- Add support for PHP 7 (#426)\n- Create \"BoolVal\" rule (#583)\n- Create \"Bsn\" rule (#450)\n- Create \"CallableType\" rule (#397)\n- Create \"Countable\" rule (#566)\n- Create \"CurrencyCode\" rule (#567)\n- Create \"Extension\" rule (#360)\n- Create \"Factor\" rule (#405)\n- Create \"Finite\" rule (#397)\n- Create \"FloatType\" rule (#565)\n- Create \"Identical\" rule (#442)\n- Create \"Imei\" rule (#590)\n- Create \"Infinite\" rule (#397)\n- Create \"IntType\" rule (#451)\n- Create \"Iterable\" rule (#570)\n- Create \"KeyNested\" rule (#429)\n- Create \"KeySet\" rule (#374)\n- Create \"KeyValue\" rule (#441)\n- Create \"Mimetype\" rule (#361)\n- Create \"NotBlank\" rule (#443)\n- Create \"NotOptional\" rule (#448)\n- Create \"Optional\" rule (#423)\n- Create \"ResourceType\" rule (#397)\n- Create \"ScalarVal\" rule (#397)\n- Create \"Size\" rule (#359)\n- Create \"SubdivisionCode\" rule for 252 countries (#411)\n- Create \"VideoUrl\" rule (#410)\n- Create method `getMessages()` for nested exceptions (#406)\n\n### Changed\n\n- Add country code to the message of \"PostalCode\" exception rule (#413)\n- Make \"ArrayVal\" validate only if the input can be used as an array (#574)\n- Make \"Between\" rule inclusive (#445)\n- Make \"Max\" rule inclusive (#445)\n- Make \"Min\" rule inclusive (#445)\n- New generic top-level domains (#368)\n- On `AbstractRelated` (`Attribute`, `Call` and `Key`) define names for child rules (#365)\n- On exceptions, convert `Array` to string (#387)\n- On exceptions, convert `Exception` to string (#399)\n- On exceptions, convert `Traversable` to string (#399)\n- On exceptions, convert resources to string (#399)\n- On exceptions, do not display parent message then rule has only one child (#407)\n- On exceptions, improve `Object` conversion to string (#399)\n- On exceptions, improve conversion of all values by using JSON (#399)\n- On exceptions, nested messages are displayed in a Markdown list (#588)\n- Rename exception class \"AbstractGroupedException\" to \"GroupedValidationException\" (#591)\n- Rename exception class \"AbstractNestedException\" to \"NestedValidationException\" (#591)\n- Rename rule \"Arr\" to \"ArrayVal\"\n- Rename rule \"Bool\" to \"BoolType\" (#426)\n- Rename rule \"False\" to \"FalseVal\" (#426)\n- Rename rule \"Float\" to \"FloatVal\" (#426)\n- Rename rule \"Int\" to \"IntVal\" (#426)\n- Rename rule \"NullValue\" to \"NullType\"\n- Rename rule \"Object\" to \"ObjectType\"\n- Rename rule \"String\" to \"StringType\" (#426)\n- Rename rule \"True\" to \"TrueVal\" (#426)\n- Use `filter_var()` on \"TrueVal\" and \"FalseVal\" rules (#409)\n\n### Removed\n\n- Drop support for PHP 5.3 (#466)\n- Remove `addOr()` shortcut (#444)\n- Remove `NestedValidationExceptionInterface` interface (#591)\n- Remove `not()` shortcut (#444)\n- Remove `ValidationExceptionInterface` interface (#591)\n- Remove identical checking from \"Equals\" rule (#442)\n- Removed Deprecated Rules (#277)\n- Validation rules do not accept an empty string by default (#422)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.96484375,
          "content": "# Contributing\n\nContributions to Respect\\Validation are always welcome. You make our lives\neasier by sending us your contributions through [pull requests][].\n\nPull requests for bug fixes must be based on the oldest stable version's branch\nwhereas pull requests for new features must be based on the `master` branch.\n\nDue to time constraints, we are not always able to respond as quickly as we\nwould like. Please do not take delays personal and feel free to remind us here,\non IRC, or on Gitter if you feel that we forgot to respond.\n\nPlease see the [project documentation][] before proceeding. You should also know\nabout [PHP-FIG][]'s standards and basic unit testing, but we're sure you can\nlearn that just by looking at other rules. Pick the simple ones like `ArrayType`\nto begin.\n\nBefore writing anything, feature or bug fix:\n- Check if there is already an issue related to it (opened or closed) and if\n  someone is already working on that;\n    - If there is not, [open an issue][] and notify everybody that you're going\n      to work on that;\n    - If there is, create a comment to notify everybody that you're going to\n      work on that.\n- Make sure that what you need is not done yet\n\n## Adding a new validator\n\nA common validator (rule) on Respect\\Validation is composed of three classes:\n\n  * `library/Rules/YourRuleName.php`: the rule itself\n  * `library/Exceptions/YourRuleNameException.php`: the exception thrown by the rule\n  * `tests/unit/Rules/YourRuleNameTest.php`: tests for the rule\n\nThe classes are pretty straightforward. In the sample below, we're going to\ncreate a validator that validates if a string is equal to \"Hello World\".\n\n- Classes should be `final` unless they are used in a different scope;\n- Properties should be `private` unless they are used in a different scope;\n- Classes should use strict typing;\n- Some docblocks are required.\n\n### Creating the rule\n\nThe rule itself needs to implement the `Validatable` interface but, it is\nconvenient to just extend the `AbstractRule` class.\nDoing that, you'll only need to declare one method: `isValid(mixed $input): bool`.\nThis method must return `true` or `false`.\n\nIf your validator class is `HelloWorld`, it will be available as `v::helloWorld()`\nand will natively have support for chaining and everything else.\n\n```php\n<?php\n\n/*\n * Copyright (c) Alexandre Gomes Gaigalas <alganet@gmail.com>\n * SPDX-License-Identifier: MIT\n */\n\ndeclare(strict_types=1);\n\nnamespace Respect\\Validation\\Rules;\n\nuse Respect\\Validation\\Rules\\Core\\Simple;\n\n/**\n * Explain in one sentence what this rule does.\n *\n * @author Your Name <youremail@yourdomain.tld>\n */\nfinal class HelloWorld extends Simple\n{\n    public function isValid(mixed $input): bool\n    {\n        return $input === 'Hello World';\n    }\n}\n```\n\n### Creating unit tests\n\nFinally, we need to test if everything is running smooth. We have `RuleTestCase`\nthat allows us to make easier to test rules, but you fell free to use the\n`PHPUnit\\Framework\\TestCase` if you want or you need it's necessary.\n\nThe `RuleTestCase` extends PHPUnit's `PHPUnit\\Framework\\TestCase` class, so you\nare able to use any methods of it. By extending `RuleTestCase` you should\nimplement two methods that should return a [data provider][] with the rule as\nfirst item of the arrays:\n\n- `providerForValidInput`: Will test when `isValid()` should return `true`\n- `providerForInvalidInput`: Will test when `isValid()` should return `false`\n\n```php\n<?php\n\n/*\n * Copyright (c) Alexandre Gomes Gaigalas <alganet@gmail.com>\n * SPDX-License-Identifier: MIT\n */\n\ndeclare(strict_types=1);\n\nnamespace Respect\\Validation\\Rules;\n\nuse Respect\\Validation\\Test\\RuleTestCase;\n\n/**\n * @group rule\n *\n * @covers \\Respect\\Validation\\Rules\\HelloWorld\n *\n * @author Your Name <youremail@yourdomain.tld>\n */\nfinal class HelloWorldTest extends RuleTestCase\n{\n    /**\n     * {@inheritDoc}\n     */\n    public static function providerForValidInput(): array\n    {\n        $rule = new HelloWorld();\n\n        return [\n            [$rule, 'Hello World'],\n        ];\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public static function providerForInvalidInput(): array\n    {\n        $rule = new HelloWorld();\n\n        return [\n            [$rule, 'Not a hello'],\n            [$rule, 'Hello darkness, my old friend'],\n            [$rule, 'Hello is it me you\\'re looking for?'],\n        ];\n    }\n}\n```\n\nIf the constructor of your rule accepts arguments you may create specific tests\nfor it other than what is covered by `RuleTestCase`.\n\n### Helping us a little bit more\n\nYou rule will be accepted only with these 3 files (rule, exception and unit test),\nbut if you really want to help us, you can follow the example of [ArrayType][] by:\n\n- Adding your new rule on the `Validator`'s class docblock;\n- Writing a documentation for your new rule;\n- Creating integration tests with PHPT.\n\nAs we already said, none of them are required but you will help us a lot.\n\n## Documentation\n\nOur docs at https://respect-validation.readthedocs.io are generated from our\nMarkdown files. Add your brand new rule and it should be soon available.\n\n## Running Tests\n\nAfter run `composer install` on the library's root directory you must run PHPUnit.\n\n### Linux\n\nYou can test the project using the commands:\n```sh\n$ vendor/bin/phpunit\n```\n\nor\n\n```sh\n$ composer phpunit\n```\n\n### Windows\n\nYou can test the project using the commands:\n```sh\n> vendor\\bin\\phpunit\n```\n\nor\n\n```sh\n> composer phpunit\n```\n\nNo test should fail.\n\nYou can tweak the PHPUnit's settings by copying `phpunit.xml.dist` to `phpunit.xml`\nand changing it according to your needs.\n\n[ArrayType]: https://github.com/Respect/Validation/commit/f08a1fa\n[data provider]: https://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.data-providers \"PHPUnit Data Providers\"\n[open an issue]: http://github.com/Respect/Validation/issues\n[PHP-FIG]: http://www.php-fig.org \"PHP Framework Interop Group\"\n[project documentation]: https://respect-validation.readthedocs.io/ \"Respect\\Validation documentation\"\n[pull requests]: http://help.github.com/pull-requests \"GitHub pull requests\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0703125,
          "content": "MIT License\n\nCopyright (c) Alexandre Gomes Gaigalas <alganet@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.3251953125,
          "content": "# Respect\\Validation\n\n[![Build Status](https://img.shields.io/github/actions/workflow/status/Respect/Validation/continuous-integration.yml?branch=master&style=flat-square)](https://github.com/Respect/Validation/actions/workflows/continuous-integration.yml)\n[![Code Coverage](https://img.shields.io/codecov/c/github/Respect/Validation?style=flat-square)](https://codecov.io/gh/Respect/Validation)\n[![Latest Stable Version](https://img.shields.io/packagist/v/respect/validation.svg?style=flat-square)](https://packagist.org/packages/respect/validation)\n[![Total Downloads](https://img.shields.io/packagist/dt/respect/validation.svg?style=flat-square)](https://packagist.org/packages/respect/validation)\n[![License](https://img.shields.io/packagist/l/respect/validation.svg?style=flat-square)](https://packagist.org/packages/respect/validation)\n\nThe most awesome validation engine ever created for PHP.\n\n- Complex rules made simple: `v::numericVal()->positive()->between(1, 255)->isValid($input)`.\n- [Granularity control](docs/02-feature-guide.md#validation-methods) for advanced reporting.\n- [More than 150](docs/08-list-of-rules-by-category.md) (fully tested) validation rules.\n- [A concrete API](docs/05-concrete-api.md) for non fluent usage.\n\nLearn More:\n\n* [Documentation](https://respect-validation.readthedocs.io)\n* [How to contribute](CONTRIBUTING.md)\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.1572265625,
          "content": "coverage:\n  status:\n    project:\n      default:\n        target: 94%    # the required coverage value\n        threshold: 1%  # the leniency in hitting the target\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 2.3505859375,
          "content": "{\n    \"name\": \"respect/validation\",\n    \"description\": \"The most awesome validation engine ever created for PHP\",\n    \"keywords\": [\"respect\", \"validation\", \"validator\"],\n    \"type\": \"library\",\n    \"homepage\": \"http://respect.github.io/Validation/\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Respect/Validation Contributors\",\n            \"homepage\": \"https://github.com/Respect/Validation/graphs/contributors\"\n        }\n    ],\n    \"config\": {\n        \"sort-packages\": true,\n        \"allow-plugins\": {\n            \"dealerdirect/phpcodesniffer-composer-installer\": true\n        }\n    },\n    \"require\": {\n        \"php\": \">=8.1\",\n        \"respect/stringifier\": \"^0.2.0\",\n        \"symfony/polyfill-mbstring\": \"^1.2\"\n    },\n    \"require-dev\": {\n        \"egulias/email-validator\": \"^3.0\",\n        \"giggsey/libphonenumber-for-php-lite\": \"^8.13\",\n        \"malukenho/docheader\": \"^1.0\",\n        \"mikey179/vfsstream\": \"^1.6\",\n        \"phpstan/phpstan\": \"^1.9\",\n        \"phpstan/phpstan-deprecation-rules\": \"^1.1\",\n        \"phpstan/phpstan-phpunit\": \"^1.3\",\n        \"phpunit/phpunit\": \"^9.6\",\n        \"psr/http-message\": \"^1.0\",\n        \"respect/coding-standard\": \"^4.0\",\n        \"squizlabs/php_codesniffer\": \"^3.7\"\n    },\n    \"suggest\": {\n        \"ext-bcmath\": \"Arbitrary Precision Mathematics\",\n        \"ext-fileinfo\": \"File Information\",\n        \"ext-mbstring\": \"Multibyte String Functions\",\n        \"egulias/email-validator\": \"Improves the Email rule if available\",\n        \"giggsey/libphonenumber-for-php-lite\": \"Enables the phone rule if available\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Respect\\\\Validation\\\\\": \"library/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Respect\\\\Validation\\\\\": \"tests/unit/\",\n            \"Respect\\\\Validation\\\\Test\\\\\": \"tests/library/\"\n        },\n        \"files\": [\n            \"tests/integration/lib/helpers.php\"\n        ]\n    },\n    \"scripts\": {\n        \"docheader\": \"vendor/bin/docheader check library/ tests/\",\n        \"phpcs\": \"vendor/bin/phpcs\",\n        \"phpstan\": \"vendor/bin/phpstan analyze\",\n        \"phpunit\": \"vendor/bin/phpunit\",\n        \"phpunit-integration\": \"vendor/bin/phpunit --testsuite=integration\",\n        \"phpunit-unit\": \"vendor/bin/phpunit --testsuite=unit\",\n        \"qa\": [\n            \"@docheader\",\n            \"@phpcs\",\n            \"@phpstan\",\n            \"@phpunit\"\n        ]\n    }\n}\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 0.0478515625,
          "content": "site_name: Respect\\Validation\ntheme: readthedocs\n"
        },
        {
          "name": "phpcs.xml.dist",
          "type": "blob",
          "size": 1.3984375,
          "content": "<?xml version=\"1.0\"?>\n<ruleset\n    name=\"PHPCS Coding Standards for Respect\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"vendor/squizlabs/php_codesniffer/phpcs.xsd\"\n>\n    <arg name=\"basepath\" value=\".\" />\n    <arg name=\"cache\" value=\".phpcs.cache\" />\n    <arg name=\"colors\" />\n    <arg name=\"extensions\" value=\"php,phpt\" />\n    <arg value=\"p\" />\n    <arg value=\"s\" />\n\n    <file>library/</file>\n    <file>tests/</file>\n\n    <rule ref=\"Respect\">\n        <exclude name=\"SlevomatCodingStandard.Commenting.ForbiddenAnnotations.AnnotationForbidden\" />\n        <exclude name=\"SlevomatCodingStandard.Commenting.UselessInheritDocComment.UselessInheritDocComment\" />\n        <exclude name=\"SlevomatCodingStandard.Classes.RequireConstructorPropertyPromotion.RequiredConstructorPropertyPromotion\" />\n        <exclude name=\"SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingNativeTypeHint\" />\n        <exclude name=\"SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingNativeTypeHint\" />\n        <exclude name=\"SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingNativeTypeHint\" />\n        <exclude name=\"SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingAnyTypeHint\" />\n        <exclude name=\"SlevomatCodingStandard.Classes.ModernClassNameReference.ClassNameReferencedViaFunctionCall\" />\n        <exclude name=\"Generic.Files.LineLength.TooLong\" />\n    </rule>\n</ruleset>\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 3.0029296875,
          "content": "includes:\n    - vendor/phpstan/phpstan-deprecation-rules/rules.neon\n    - vendor/phpstan/phpstan-phpunit/extension.neon\n    - vendor/phpstan/phpstan-phpunit/rules.neon\nparameters:\n  fileExtensions:\n    - php\n    - phpt\n  ignoreErrors:\n    -\n      # Why: Properties are read dynamically during message construction\n      message: '/Property Respect\\\\Validation\\\\Rules\\\\[a-zA-Z0-9\\\\_]+::\\$[a-zA-Z0-9\\\\_]+ is never read, only written\\./'\n\n    -\n      # Why: SimpleXMLElement is weird and doesn't implement anything ArrayAccess-like\n      message: '/Instanceof between mixed and SimpleXMLElement will always evaluate to false\\./'\n      path: library/Rules/ArrayVal.php\n\n    -\n      # Why: This error is intentional, so PHPunit can test an invalid __callStatic call\n      message: '/Call to an undefined static method Respect\\\\Validation\\\\Validator::iDoNotExistSoIShouldThrowException/'\n      path: tests/unit/ValidatorTest.php\n\n    -\n      # Why: StaticValidator is a stub interface that types __callStatic\n      message: '/Call to static method PHPUnit\\\\Framework\\\\Assert::assertSame\\(\\) with Respect\\\\Validation\\\\Validator and Respect\\\\Validation\\\\ChainedValidator will always evaluate to false./'\n      path: tests/unit/ValidatorTest.php\n\n    -\n        # Why: I don't want to make changes to the code just to make phpstan happy\n        message: '/Parameter #2 \\$values of function vsprintf expects array<bool\\|float\\|int\\|string\\|null>, array<string, array<bool\\|int\\|string>\\|bool\\|float\\|int\\|string> given./'\n        path: library/Rules/AbstractAge.php\n\n    # Why: Deprecations of version 3.0\n    - message: '/Using rule exceptions directly is deprecated, and will be removed in the next major version\\./'\n\n    - message: '/This class is deprecated, and will be removed in the next major version\\./'\n\n    -\n        message: '/Calling `.+\\(\\)` directly from rules is deprecated. Please use {@see \\\\Respect\\\\Validation\\\\Validator::.+\\(\\)} instead./'\n        path: tests/unit/Rules\n    -\n        message: '/Calling `.+\\(\\)` directly from rules is deprecated. Please use {@see \\\\Respect\\\\Validation\\\\Validator::.+\\(\\)} instead./'\n        path: tests/unit/FactoryTest.php\n    -\n        message: '/Calling `.+\\(\\)` directly from rules is deprecated. Please use {@see \\\\Respect\\\\Validation\\\\Validator::.+\\(\\)} instead./'\n        path: library/Validator.php\n    -\n        message: '/Calling validator as a function is deprecated, and will be removed in the next major version./'\n        path: tests/unit/Rules\n    -\n        message: '/Calling `reportError\\(\\)` directly is deprecated, and will be removed in the next major version./'\n        path: tests/unit/Rules\n    -\n        message: '/Calling `.+\\(\\)` directly from rules is deprecated. Please use {@see \\\\Respect\\\\Validation\\\\Validator::.+\\(\\)} instead./'\n        path: library/Rules\n    -\n        message: '/Calling `reportError\\(\\)` directly is deprecated, and will be removed in the next major version./'\n        path: library/Rules\n  level: 8\n  paths:\n    - library/\n    - tests/\n  excludePaths:\n    - tests/integration/\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.91015625,
          "content": "<?xml version=\"1.0\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         verbose=\"true\">\n  <testsuites>\n    <testsuite name=\"unit\">\n      <directory suffix=\"Test.php\">tests/unit/</directory>\n    </testsuite>\n    <testsuite name=\"integration\">\n      <directory suffix=\".phpt\">tests/integration/</directory>\n    </testsuite>\n  </testsuites>\n  <coverage processUncoveredFiles=\"true\" ignoreDeprecatedCodeUnits=\"true\">\n    <include>\n        <directory suffix=\".php\">library/</directory>\n    </include>\n  </coverage>\n</phpunit>\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}