{
  "metadata": {
    "timestamp": 1736712356646,
    "page": 29,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vlucas/phpdotenv",
      "stars": 13237,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.21484375,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.{yml,yaml}]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4189453125,
          "content": "* text=auto\n\n/tests export-ignore\n/.editorconfig export-ignore\n/.gitattributes export-ignore\n/.github export-ignore\n/.gitignore export-ignore\n/.github export-ignore\n/Makefile export-ignore\n/phpstan-baseline.neon export-ignore\n/phpstan.neon.dist export-ignore\n/phpunit.xml.dist export-ignore\n/psalm-baseline.xml export-ignore\n/psalm.xml export-ignore\n/README.md export-ignore\n/UPGRADING.md export-ignore\n/vendor-bin export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0849609375,
          "content": ".phpunit.result.cache\ncomposer.lock\nphpstan.neon\nphpstan.tests.neon\nphpunit.xml\nvendor\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.5205078125,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2014, Graham Campbell.\nCopyright (c) 2013, Vance Lucas.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.4931640625,
          "content": "install:\n\t@docker run -it -w /data -v ${PWD}:/data:delegated -v ~/.composer:/root/.composer:delegated --entrypoint composer --rm registry.gitlab.com/grahamcampbell/php:8.3-base update\n\t@docker run -it -w /data -v ${PWD}:/data:delegated -v ~/.composer:/root/.composer:delegated --entrypoint composer --rm registry.gitlab.com/grahamcampbell/php:8.3-base bin all update\n\nphpunit:\n\t@docker run -it -w /data -v ${PWD}:/data:delegated --entrypoint vendor/bin/phpunit --rm registry.gitlab.com/grahamcampbell/php:8.3-cli\n\nphpstan-analyze:\n\t@docker run -it -w /data -v ${PWD}:/data:delegated --entrypoint vendor/bin/phpstan --rm registry.gitlab.com/grahamcampbell/php:8.3-cli analyze\n\nphpstan-baseline:\n\t@docker run -it -w /data -v ${PWD}:/data:delegated --entrypoint vendor/bin/phpstan --rm registry.gitlab.com/grahamcampbell/php:8.3-cli analyze --generate-baseline\n\npsalm-analyze:\n\t@docker run -it -w /data -v ${PWD}:/data:delegated --entrypoint vendor/bin/psalm.phar --rm registry.gitlab.com/grahamcampbell/php:8.3-cli\n\npsalm-baseline:\n\t@docker run -it -w /data -v ${PWD}:/data:delegated --entrypoint vendor/bin/psalm.phar --rm registry.gitlab.com/grahamcampbell/php:8.3-cli --set-baseline=psalm-baseline.xml\n\npsalm-show-info:\n\t@docker run -it -w /data -v ${PWD}:/data:delegated --entrypoint vendor/bin/psalm.phar --rm registry.gitlab.com/grahamcampbell/php:8.3-cli --show-info=true\n\ntest: phpunit phpstan-analyze psalm-analyze\n\nclean:\n\t@rm -rf .phpunit.result.cache composer.lock vendor vendor-bin/*/composer.lock vendor-bin/*/vendor\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.654296875,
          "content": "PHP dotenv\n==========\n\nLoads environment variables from `.env` to `getenv()`, `$_ENV` and `$_SERVER` automagically.\n\n![Banner](https://user-images.githubusercontent.com/2829600/71564012-31105580-2a91-11ea-9ad7-ef1278411b35.png)\n\n<p align=\"center\">\n<a href=\"LICENSE\"><img src=\"https://img.shields.io/badge/license-BSD%203--Clause-brightgreen.svg?style=flat-square\" alt=\"Software License\"></img></a>\n<a href=\"https://packagist.org/packages/vlucas/phpdotenv\"><img src=\"https://img.shields.io/packagist/dt/vlucas/phpdotenv.svg?style=flat-square\" alt=\"Total Downloads\"></img></a>\n<a href=\"https://github.com/vlucas/phpdotenv/releases\"><img src=\"https://img.shields.io/github/release/vlucas/phpdotenv.svg?style=flat-square\" alt=\"Latest Version\"></img></a>\n</p>\n\n\n## Why .env?\n\n**You should never store sensitive credentials in your code**. Storing\n[configuration in the environment](https://www.12factor.net/config) is one of\nthe tenets of a [twelve-factor app](https://www.12factor.net/). Anything that\nis likely to change between deployment environments – such as database\ncredentials or credentials for 3rd party services – should be extracted from\nthe code into environment variables.\n\nBasically, a `.env` file is an easy way to load custom configuration variables\nthat your application needs without having to modify .htaccess files or\nApache/nginx virtual hosts. This means you won't have to edit any files outside\nthe project, and all the environment variables are always set no matter how you\nrun your project - Apache, Nginx, CLI, and even PHP's built-in webserver. It's\nWAY easier than all the other ways you know of to set environment variables,\nand you're going to love it!\n\n* NO editing virtual hosts in Apache or Nginx\n* NO adding `php_value` flags to .htaccess files\n* EASY portability and sharing of required ENV values\n* COMPATIBLE with PHP's built-in web server and CLI runner\n\nPHP dotenv is a PHP version of the original [Ruby\ndotenv](https://github.com/bkeepers/dotenv).\n\n\n## Installation\n\nInstallation is super-easy via [Composer](https://getcomposer.org/):\n\n```bash\n$ composer require vlucas/phpdotenv\n```\n\nor add it by hand to your `composer.json` file.\n\n\n## Upgrading\n\nWe follow [semantic versioning](https://semver.org/), which means breaking\nchanges may occur between major releases. We have upgrading guides available\nfor V2 to V3, V3 to V4 and V4 to V5 available [here](UPGRADING.md).\n\n\n## Usage\n\nThe `.env` file is generally kept out of version control since it can contain\nsensitive API keys and passwords. A separate `.env.example` file is created\nwith all the required environment variables defined except for the sensitive\nones, which are either user-supplied for their own development environments or\nare communicated elsewhere to project collaborators. The project collaborators\nthen independently copy the `.env.example` file to a local `.env` and ensure\nall the settings are correct for their local environment, filling in the secret\nkeys or providing their own values when necessary. In this usage, the `.env`\nfile should be added to the project's `.gitignore` file so that it will never\nbe committed by collaborators.  This usage ensures that no sensitive passwords\nor API keys will ever be in the version control history so there is less risk\nof a security breach, and production values will never have to be shared with\nall project collaborators.\n\nAdd your application configuration to a `.env` file in the root of your\nproject. **Make sure the `.env` file is added to your `.gitignore` so it is not\nchecked-in the code**\n\n```shell\nS3_BUCKET=\"dotenv\"\nSECRET_KEY=\"souper_seekret_key\"\n```\n\nNow create a file named `.env.example` and check this into the project. This\nshould have the ENV variables you need to have set, but the values should\neither be blank or filled with dummy data. The idea is to let people know what\nvariables are required, but not give them the sensitive production values.\n\n```shell\nS3_BUCKET=\"devbucket\"\nSECRET_KEY=\"abc123\"\n```\n\nYou can then load `.env` in your application with:\n\n```php\n$dotenv = Dotenv\\Dotenv::createImmutable(__DIR__);\n$dotenv->load();\n```\n\nTo suppress the exception that is thrown when there is no `.env` file, you can:\n\n```php\n$dotenv = Dotenv\\Dotenv::createImmutable(__DIR__);\n$dotenv->safeLoad();\n```\n\nOptionally you can pass in a filename as the second parameter, if you would\nlike to use something other than `.env`:\n\n```php\n$dotenv = Dotenv\\Dotenv::createImmutable(__DIR__, 'myconfig');\n$dotenv->load();\n```\n\nAll of the defined variables are now available in the `$_ENV` and `$_SERVER`\nsuper-globals.\n\n```php\n$s3_bucket = $_ENV['S3_BUCKET'];\n$s3_bucket = $_SERVER['S3_BUCKET'];\n```\n\n\n### Putenv and Getenv\n\nUsing `getenv()` and `putenv()` is strongly discouraged due to the fact that\nthese functions are not thread safe, however it is still possible to instruct\nPHP dotenv to use these functions. Instead of calling\n`Dotenv::createImmutable`, one can call `Dotenv::createUnsafeImmutable`, which\nwill add the `PutenvAdapter` behind the scenes. Your environment variables will\nnow be available using the `getenv` method, as well as the super-globals:\n\n```php\n$s3_bucket = getenv('S3_BUCKET');\n$s3_bucket = $_ENV['S3_BUCKET'];\n$s3_bucket = $_SERVER['S3_BUCKET'];\n```\n\n\n### Nesting Variables\n\nIt's possible to nest an environment variable within another, useful to cut\ndown on repetition.\n\nThis is done by wrapping an existing environment variable in `${…}` e.g.\n\n```shell\nBASE_DIR=\"/var/webroot/project-root\"\nCACHE_DIR=\"${BASE_DIR}/cache\"\nTMP_DIR=\"${BASE_DIR}/tmp\"\n```\n\n\n### Immutability and Repository Customization\n\nImmutability refers to if Dotenv is allowed to overwrite existing environment\nvariables. If you want Dotenv to overwrite existing environment variables,\nuse `createMutable` instead of `createImmutable`:\n\n```php\n$dotenv = Dotenv\\Dotenv::createMutable(__DIR__);\n$dotenv->load();\n```\n\nBehind the scenes, this is instructing the \"repository\" to allow immutability\nor not. By default, the repository is configured to allow overwriting existing\nvalues by default, which is relevant if one is calling the \"create\" method\nusing the `RepositoryBuilder` to construct a more custom repository:\n\n```php\n$repository = Dotenv\\Repository\\RepositoryBuilder::createWithNoAdapters()\n    ->addAdapter(Dotenv\\Repository\\Adapter\\EnvConstAdapter::class)\n    ->addWriter(Dotenv\\Repository\\Adapter\\PutenvAdapter::class)\n    ->immutable()\n    ->make();\n\n$dotenv = Dotenv\\Dotenv::create($repository, __DIR__);\n$dotenv->load();\n```\n\nThe above example will write loaded values to `$_ENV` and `putenv`, but when\ninterpolating environment variables, we'll only read from `$_ENV`. Moreover, it\nwill never replace any variables already set before loading the file.\n\nBy means of another example, one can also specify a set of variables to be\nallow listed. That is, only the variables in the allow list will be loaded:\n\n```php\n$repository = Dotenv\\Repository\\RepositoryBuilder::createWithDefaultAdapters()\n    ->allowList(['FOO', 'BAR'])\n    ->make();\n\n$dotenv = Dotenv\\Dotenv::create($repository, __DIR__);\n$dotenv->load();\n```\n\n\n### Requiring Variables to be Set\n\nPHP dotenv has built in validation functionality, including for enforcing the\npresence of an environment variable. This is particularly useful to let people\nknow any explicit required variables that your app will not work without.\n\nYou can use a single string:\n\n```php\n$dotenv->required('DATABASE_DSN');\n```\n\nOr an array of strings:\n\n```php\n$dotenv->required(['DB_HOST', 'DB_NAME', 'DB_USER', 'DB_PASS']);\n```\n\nIf any ENV vars are missing, Dotenv will throw a `RuntimeException` like this:\n\n```\nOne or more environment variables failed assertions: DATABASE_DSN is missing\n```\n\n\n### Empty Variables\n\nBeyond simply requiring a variable to be set, you might also need to ensure the\nvariable is not empty:\n\n```php\n$dotenv->required('DATABASE_DSN')->notEmpty();\n```\n\nIf the environment variable is empty, you'd get an Exception:\n\n```\nOne or more environment variables failed assertions: DATABASE_DSN is empty\n```\n\n\n### Integer Variables\n\nYou might also need to ensure that the variable is of an integer value. You may\ndo the following:\n\n```php\n$dotenv->required('FOO')->isInteger();\n```\n\nIf the environment variable is not an integer, you'd get an Exception:\n\n```\nOne or more environment variables failed assertions: FOO is not an integer.\n```\n\nOne may only want to enforce validation rules when a variable is set. We\nsupport this too:\n\n```php\n$dotenv->ifPresent('FOO')->isInteger();\n```\n\n\n### Boolean Variables\n\nYou may need to ensure a variable is in the form of a boolean, accepting\n\"true\", \"false\", \"On\", \"1\", \"Yes\", \"Off\", \"0\" and \"No\". You may do the\nfollowing:\n\n```php\n$dotenv->required('FOO')->isBoolean();\n```\n\nIf the environment variable is not a boolean, you'd get an Exception:\n\n```\nOne or more environment variables failed assertions: FOO is not a boolean.\n```\n\nSimilarly, one may write:\n\n```php\n$dotenv->ifPresent('FOO')->isBoolean();\n```\n\n\n### Allowed Values\n\nIt is also possible to define a set of values that your environment variable\nshould be. This is especially useful in situations where only a handful of\noptions or drivers are actually supported by your code:\n\n```php\n$dotenv->required('SESSION_STORE')->allowedValues(['Filesystem', 'Memcached']);\n```\n\nIf the environment variable wasn't in this list of allowed values, you'd get a\nsimilar Exception:\n\n```\nOne or more environment variables failed assertions: SESSION_STORE is not an allowed value.\n```\n\nIt is also possible to define a regex that your environment variable should be.\n```php\n$dotenv->required('FOO')->allowedRegexValues('([[:lower:]]{3})');\n```\n\n\n### Comments\n\nYou can comment your `.env` file using the `#` character. E.g.\n\n```shell\n# this is a comment\nVAR=\"value\" # comment\nVAR=value # comment\n```\n\n\n### Parsing Without Loading\n\nSometimes you just wanna parse the file and resolve the nested environment variables, by giving us a string, and have an array returned back to you. While this is already possible, it is a little fiddly, so we have provided a direct way to do this:\n\n```php\n// ['FOO' => 'Bar', 'BAZ' => 'Hello Bar']\nDotenv\\Dotenv::parse(\"FOO=Bar\\nBAZ=\\\"Hello \\${FOO}\\\"\");\n```\n\nThis is exactly the same as:\n\n```php\nDotenv\\Dotenv::createArrayBacked(__DIR__)->load();\n```\n\nonly, instead of providing the directory to find the file, you have directly provided the file contents.\n\n\n### Usage Notes\n\nWhen a new developer clones your codebase, they will have an additional\none-time step to manually copy the `.env.example` file to `.env` and fill-in\ntheir own values (or get any sensitive values from a project co-worker).\n\n\n### Troubleshooting\n\nIn certain server setups (most commonly found in shared hosting), PHP might deactivate superglobals like `$_ENV` or `$_SERVER`. If these variables are not set, review the `variables_order` in the `php.ini` file. See [php.net/manual/en/ini.core.php#ini.variables-order](https://www.php.net/manual/en/ini.core.php#ini.variables-order).\n\n## Security\n\nIf you discover a security vulnerability within this package, please send an email to security@tidelift.com. All security vulnerabilities will be promptly addressed. You may view our full security policy [here](https://github.com/vlucas/phpdotenv/security/policy).\n\n\n## License\n\nPHP dotenv is licensed under [The BSD 3-Clause License](LICENSE).\n\n\n## For Enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of `vlucas/phpdotenv` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/packagist-vlucas-phpdotenv?utm_source=packagist-vlucas-phpdotenv&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n"
        },
        {
          "name": "UPGRADING.md",
          "type": "blob",
          "size": 13.576171875,
          "content": "# Upgrading Guide\n\n## V5.5 to V5.6\n\nBumping the minimum required PHP version is not a breaking change, however it is notable. Since version 5.6.0, we now require PHP 7.2.5 or higher. Installation metrics show that for some time, PHP 7.1 has represented only around 0.1% of installs of V5.\n\nRelease notes for 5.6.0 are available [here](https://github.com/vlucas/phpdotenv/releases/tag/v5.6.0).\n\n## V4 to V5\n\n### Introduction\n\nVersion 5 bumps to PHP 7.1+, and adds some additional parameter typing. There have been some internal changes and refactorings too, but nothing that changes the overall feel and usage of the package. The Dotenv class itself is largely unchanged from V4.\n\nRelease notes for 5.0.0 are available [here](https://github.com/vlucas/phpdotenv/releases/tag/v5.0.0).\n\n### Details\n\n1. The `Dotenv\\Dotenv::createImmutable` and `Dotenv\\Dotenv::createMutable` methods no longer call will result in `getenv` and `putenv` being called. One should instead use `Dotenv\\Dotenv::createUnsafeImmutable` and `Dotenv\\Dotenv::createUnsafeMutable` methods, if one really needs these functions.\n2. The `Dotenv\\Dotenv` constructor has been modified to expect exactly 4 parameters: a store, a parser, a loader, and a repository. This likely won't affect many people, since it is more common to construct this class via the public static create methods. Those methods have not changed.\n3. Scalar typehints have been added to the public interface.\n4. The parser now returns a result type instead of raising an exception. This change is strictly internal, and most users won't notice a difference. The responsibility for raising an exception has simply been shifted up to the caller.\n5. Adapters have been refactored again, with changes to the repositories. In particular, the repository builder has been tweaked. It now expects to be explicitly told if you want to use the default adapters or not, and expects individual readers and writers to be added, one by one. Similar changes have been applied to the store factory. Moreover, the `ApacheAdapter` has been changed so that it behaves much like the other adapters. The old behaviour can be simulated by composing it with the new `ReplacingWriter` (see below). We will no longer include this adapter in our default setup, so that people can enable exactly what they need. Finally, by default, we will no longer be using the `PutenvAdapter`. It can be added, as required.\n6. Variable whitelisting has been replaced with allow listing, and the responsibility has moved from the loader to a new adapter `GuardedWriter`.\n7. The parser has been moved to its own namespace and parses entire files now. This change is expected to have little impact when upgrading. The `Lines` class has also moved to the parser namespace.\n8. The loader now only returns the variables that were actually loaded into the repository, and not all the variables from the file. Moreover, it now expects as input the result of running the new parser (an array of entries), rather than raw file content.\n\nThe changes listed in (4) mean that instead of:\n\n```php\n$repository = Dotenv\\Repository\\RepositoryBuilder::create()\n    ->withReaders([\n        new Dotenv\\Repository\\Adapter\\EnvConstAdapter(),\n    ])\n    ->withWriters([\n        new Dotenv\\Repository\\Adapter\\EnvConstAdapter(),\n        new Dotenv\\Repository\\Adapter\\PutenvAdapter(),\n    ])\n    ->make();\n```\n\none would now write:\n\n```php\n$repository = Dotenv\\Repository\\RepositoryBuilder::createWithNoAdapters()\n    ->addAdapter(Dotenv\\Repository\\Adapter\\EnvConstAdapter::class)\n    ->addWriter(Dotenv\\Repository\\Adapter\\PutenvAdapter::class)\n    ->make();\n```\n\nInstead of passing class names, one can also pass actual adapter instances. Note that it is not possible to directly construct any of the adapters. One has to go via their static `create` method which returns an optional. This is to strictly encapsulate the fact that not all adapters are capable of running on all systems, and so those that cannot be run, cannot be created. For example, the apache adapter can only be run within an apache web server context. Passing the class names as in the above example will handle this for you, by adding the adapter only if it can be created (the optional has a value set).\n\nTo add an apache environment variable writer that only writes to existing apache environment variables, as was the default in v4, one should do the following:\n\n```php\n$builder = Dotenv\\Repository\\RepositoryBuilder::createWithDefaultAdapters();\n\nDotenv\\Repository\\Adapter\\ApacheAdapter::create()->map(function ($adapter) {\n    return new Dotenv\\Repository\\Adapter\\ReplacingWriter($adapter, $adapter);\n})->map([$builder, 'addWriter'])->getOrElse($builder);\n\n$repository = $builder->make();\n```\n\nThe use of optionals handles the case where the apache environment functions are not available (such as in a CLI environment).\n\n## V4.0 to V4.1\n\n### Introduction\n\nVersion 4.1 is a minor release, and as such, there are no breaking changes. There is, however a deprecation to be noted.\n\n### Details\n\nThe `Dotenv\\Dotenv` constructor now expects either an array of file paths as the third parameter, or an instance of `Dotenv\\Store\\StoreInterface`. Passing an array is deprecated, and will be removed in V5.\n\n## V3 to V4\n\n### Introduction\n\nVersion 4 sees some refactoring, and support for escaping dollars in values (https://github.com/vlucas/phpdotenv/pull/380). It is no longer possible to change immutability on the fly, and the `Loader` no longer is responsible for tracking immutability. It is now the responsibility of \"repositories\" to track this. One must explicitly decide if they want (im)mutability when constructing an instance of `Dotenv\\Dotenv`.\n\nRelease notes for 4.0.0 are available [here](https://github.com/vlucas/phpdotenv/releases/tag/v4.0.0).\n\n### Details\n\nV4 has again changed the way you initialize the `Dotenv` class. If you want immutable loading of environment variables, then replace `Dotenv::create` with `Dotenv::createImmutable`, and if you want mutable loading, replace `Dotenv::create` with `Dotenv::createMutable` and `->overload()` with `->load()`. The `overload` method has been removed in favour of specifying mutability at object construction.\n\nThe behaviour when parsing single quoted strings has now changed, to mimic the behaviour of bash. It is no longer possible to escape characters in single quoted strings, and everything is treated literally. As soon as the first single quote character is read, after the initial one, then the variable is treated as ending immediately at that point. When parsing unquoted or double quoted strings, it is now possible to escape dollar signs, to forcefully avoid variable interpolation. Escaping dollars is not mandated, in the sense that if a dollar is present, and not following by variable interpolation syntax, this is allowed, and the dollar will be treated as a literal dollar. Finally, interpolation of variables is now performed right to left, instead of left to right, so it is possible to nest interpolations to allow using the value of a variable as the name of another for further interpolation.\n\nThe `getEnvironmentVariableNames` method is no longer available. This is because calls to `load()` (since v3.0.0) return an associative array of what was loaded, so `$dotenv->getEnvironmentVariableNames()` can be replaced with `array_keys($dotenv->load())`.\n\nThere have been various internal refactorings. Apart from what has already been mentioned, the only other changes likely to affect developers is:\n\n1. The `Dotenv\\Environment` namespace has been moved to `Dotenv\\Repository`, the `Dotenv\\Environment\\Adapter\\AdapterInterface` interface has been replaced by `Dotenv\\Repository\\Adapter\\ReaderInterface` and `Dotenv\\Repository\\Adapter\\WriterInterface`.\n2. The `Dotenv\\Environment\\DotenvFactory` has been (roughly) replaced by `Dotenv\\Repository\\RepositoryBuilder`, and `Dotenv\\Environment\\FactoryInterface` has been deleted.\n3. `Dotenv\\Environment\\AbstractVariables` has been replaced by `Dotenv\\Repository\\AbstractRepository`, `Dotenv\\Environment\\DotenvVariables` has been replaced by `Dotenv\\Repository\\AdapterRepository`, and `Dotenv\\Environment\\VariablesInterface` has been replaced by `Dotenv\\Repository\\RepositoryInterface`.\n4. The `Dotenv\\Loader` class has been moved to `Dotenv\\Loader\\Loader`, and now has a different public interface. It no longer expects any parameters at construction, and implements only the new interface `Dotenv\\Loader\\LoaderInterface`. Its responsibility has changed to purely taking raw env file content, and handing it off to the parser, dealing with variable interpolation, and sending off instructions to the repository to set variables. No longer can it be used as a way to read the environment by callers, and nor does it track immutability.\n5. The `Dotenv\\Parser` and `Dotenv\\Lines` classes have moved to `Dotenv\\Loader\\Parser` and `Dotenv\\Loader\\Lines`, respectively. `Dotenv\\Loader\\Parser::parse` now return has either `null` or `Dotenv\\Loader\\Value` objects as values, instead of `string`s. This is to support the new variable interpolation and dollar escaping features.\n6. The `Dotenv\\Validator` constructor has changed from `__construct(array $variables, Loader $loader, $required = true)` to `__construct(RepositoryInterface $repository, array $variables, $required = true)`.\n\nThe example at the bottom of the below upgrading guide, in V4 now looks like:\n\n```php\n<?php\n\nuse Dotenv\\Dotenv;\nuse Dotenv\\Repository\\Adapter\\EnvConstAdapter;\nuse Dotenv\\Repository\\Adapter\\ServerConstAdapter;\nuse Dotenv\\Repository\\RepositoryBuilder;\n\n$adapters = [\n\tnew EnvConstAdapter(),\n\tnew ServerConstAdapter(),\n];\n\n$repository = RepositoryBuilder::create()\n    ->withReaders($adapters)\n    ->withWriters($adapters)\n    ->immutable()\n    ->make();\n\nDotenv::create($repository, $path, null)->load();\n```\n\nSince v3.2.0, it was easily possible to read a file and process variable interpolations, without actually \"loading\" the variables. This is still possible in v4.0.0. Example code that does this is as follows:\n\n```php\n<?php\n\nuse Dotenv\\Repository\\Adapter\\ArrayAdapter;\nuse Dotenv\\Repository\\RepositoryBuilder;\nuse Dotenv\\Loader\\Loader;\n\n$adapters = [new ArrayAdapter()];\n\n$repository = RepositoryBuilder::create()\n    ->withReaders($adapters)\n    ->withWriters($adapters)\n    ->make();\n\n$variables = (new Loader())->load($repository, $content);\n```\n\nNotice, that compared to v3, the loader no longer expects file paths in the constructor. Reading of the files is now managed by the `Dotenv\\Dotenv` class. The loader is genuinely just loading the content into the repository.\n\nFinally, we note that the minimum supported version of PHP has increased to 5.5.9, up from 5.4.0 in V3 and 5.3.9 in V2.\n\n## V2 to V3\n\n### Introduction\n\nNew in Version 3 is first-class support for multiline variables ([#301](https://github.com/vlucas/phpdotenv/pull/301)) and much more flexibility in terms of which parts of the environment we try to read and modify ([#300](https://github.com/vlucas/phpdotenv/pull/300)). Consequently, you will need to replace any occurrences of `new Dotenv(...)` with `Dotenv::create(...)`, since our new native constructor takes a `Loader` instance now, so that it can be truly customized if required. Finally, one should note that the loader will no longer be trimming values ([#302](https://github.com/vlucas/phpdotenv/pull/302)), moreover `Loader::load()` and its callers now return an associative array of the variables loaded with their values, rather than an array of raw lines from the environment file ([#306](https://github.com/vlucas/phpdotenv/pull/306)).\n\nRelease notes for 3.0.0 are available [here](https://github.com/vlucas/phpdotenv/releases/tag/v3.0.0).\n\n### Details\n\nV3 has changed the way you initialize the `Dotenv` class. Consequently, you will need to replace any occurrences of new Dotenv(...) with Dotenv::create(...), since our new native constructor takes a `Loader` instance now.\n\n`Loader::load()` and its callers now return an associative array of the variables loaded with their values.\n\nValue parsing has been modified in the following ways:\n\n1. For unquoted strings, as soon as there's a hash, it's treated as a comment start.\n2. We're being stricter about invalid escape sequences within quoted strings.\n3. We're no longer trimming the parsed values of quoted strings.\n4. Multiline quoted values are now permitted, and will be parsed by V3.\n\n| input value | V2.5.2 | V2.6.1 | V3.3.1 |\n|-|-|-|-|\n| `foo#bar` | `foo#bar` | `foo#bar` | `foo` |\n| `foo # bar` | `foo` | `foo` | `foo` |\n| `\"iiiiviiiixiiiiviiii\\n\"` | silent failure | `iiiviiiixiiiiviiii\\n` | fails with invalid escape sequence exception |\n| `\"iiiiviiiixiiiiviiii\\\\n\"` | `iiiiviiiixiiiiviiii\\n` | `iiiiviiiixiiiiviiii\\n` | `iiiiviiiixiiiiviiii\\n` |\n| `\"foo\\\"bar\"` | `foo\"bar` | `foo\"bar` | `foo\"bar` |\n| `\"  foo \"` | `foo` with whitespace trimmed | `foo` with whitespace trimmed | `foo` with 2 spaces in front and one after |\n\nIn double quoted strings, double quotes and backslashes need escaping with a backslash, and in single quoted strings, single quote and backslashes need escaping with a backslash. In v2.5.2, forgetting an escape can lead to odd results due to the regex running out of stack, but this was fixed in 2.6 and 3.3, with 2.6 allowing you to continue after an unescaped backslash, but 3.3 not.\n\nIt's possible to use phpdotenv V3 in a threaded environment, instructing it to not call any functions that are not tread-safe:\n\n```php\n<?php\n\nuse Dotenv\\Dotenv;\nuse Dotenv\\Environment\\Adapter\\EnvConstAdapter;\nuse Dotenv\\Environment\\Adapter\\ServerConstAdapter;\nuse Dotenv\\Environment\\DotenvFactory;\n\n$factory = new DotenvFactory([new EnvConstAdapter(), new ServerConstAdapter()]);\n\nDotenv::create($path, null, $factory)->load();\n```\n\nFinally, we note that the minimum supported version of PHP has increased from 5.3.9 to 5.4.0.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.6201171875,
          "content": "{\n    \"name\": \"vlucas/phpdotenv\",\n    \"description\": \"Loads environment variables from `.env` to `getenv()`, `$_ENV` and `$_SERVER` automagically.\",\n    \"keywords\": [\"env\", \"dotenv\", \"environment\"],\n    \"license\": \"BSD-3-Clause\",\n    \"authors\": [\n        {\n            \"name\": \"Graham Campbell\",\n            \"email\": \"hello@gjcampbell.co.uk\",\n            \"homepage\": \"https://github.com/GrahamCampbell\"\n        },\n        {\n            \"name\": \"Vance Lucas\",\n            \"email\": \"vance@vancelucas.com\",\n            \"homepage\": \"https://github.com/vlucas\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^7.2.5 || ^8.0\",\n        \"ext-pcre\": \"*\",\n        \"graham-campbell/result-type\": \"^1.1.3\",\n        \"phpoption/phpoption\": \"^1.9.3\",\n        \"symfony/polyfill-ctype\": \"^1.24\",\n        \"symfony/polyfill-mbstring\": \"^1.24\",\n        \"symfony/polyfill-php80\": \"^1.24\"\n    },\n    \"require-dev\": {\n        \"ext-filter\": \"*\",\n        \"bamarni/composer-bin-plugin\": \"^1.8.2\",\n        \"phpunit/phpunit\":\"^8.5.34 || ^9.6.13 || ^10.4.2\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Dotenv\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Dotenv\\\\Tests\\\\\": \"tests/Dotenv/\"\n        }\n    },\n    \"suggest\": {\n        \"ext-filter\": \"Required to use the boolean validator.\"\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"bamarni/composer-bin-plugin\": true\n        },\n        \"preferred-install\": \"dist\"\n    },\n    \"extra\": {\n        \"bamarni-bin\": {\n            \"bin-links\": true,\n            \"forward-command\": false\n        },\n        \"branch-alias\": {\n            \"dev-master\": \"5.6-dev\"\n        }\n    }\n}\n"
        },
        {
          "name": "phpstan-baseline.neon",
          "type": "blob",
          "size": 1.4248046875,
          "content": "parameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#2 \\\\$callback of function array_reduce expects callable\\\\(GrahamCampbell\\\\\\\\ResultType\\\\\\\\Result\\\\<array\\\\{Dotenv\\\\\\\\Parser\\\\\\\\Value, int\\\\}, mixed\\\\>\\\\|GrahamCampbell\\\\\\\\ResultType\\\\\\\\Result\\\\<array\\\\{mixed, int\\\\}, string\\\\>, string\\\\)\\\\: \\\\(GrahamCampbell\\\\\\\\ResultType\\\\\\\\Result\\\\<array\\\\{Dotenv\\\\\\\\Parser\\\\\\\\Value, int\\\\}, mixed\\\\>\\\\|GrahamCampbell\\\\\\\\ResultType\\\\\\\\Result\\\\<array\\\\{mixed, int\\\\}, string\\\\>\\\\), Closure\\\\(GrahamCampbell\\\\\\\\ResultType\\\\\\\\Result, string\\\\)\\\\: GrahamCampbell\\\\\\\\ResultType\\\\\\\\Result\\\\<array\\\\{Dotenv\\\\\\\\Parser\\\\\\\\Value, int\\\\}, string\\\\> given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Parser/EntryParser.php\n\n\t\t-\n\t\t\tmessage: \"#^Only booleans are allowed in a negated boolean, int\\\\|false given\\\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Parser/Lexer.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#1 \\\\$readers of class Dotenv\\\\\\\\Repository\\\\\\\\RepositoryBuilder constructor expects array\\\\<Dotenv\\\\\\\\Repository\\\\\\\\Adapter\\\\\\\\ReaderInterface\\\\>, array\\\\<Dotenv\\\\\\\\Repository\\\\\\\\Adapter\\\\\\\\ReaderInterface\\\\|S\\\\> given\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: src/Repository/RepositoryBuilder.php\n\n\t\t-\n\t\t\tmessage: \"#^Parameter \\\\#2 \\\\$writers of class Dotenv\\\\\\\\Repository\\\\\\\\RepositoryBuilder constructor expects array\\\\<Dotenv\\\\\\\\Repository\\\\\\\\Adapter\\\\\\\\WriterInterface\\\\>, array\\\\<Dotenv\\\\\\\\Repository\\\\\\\\Adapter\\\\\\\\WriterInterface\\\\|S\\\\> given\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: src/Repository/RepositoryBuilder.php\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.0888671875,
          "content": "includes:\n    - phpstan-baseline.neon\n\nparameters:\n    level: max\n    paths:\n        - src\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.681640625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" backupGlobals=\"false\" beStrictAboutTestsThatDoNotTestAnything=\"true\" beStrictAboutOutputDuringTests=\"true\" bootstrap=\"vendor/autoload.php\" colors=\"true\" failOnRisky=\"true\" failOnWarning=\"true\" processIsolation=\"false\" stopOnError=\"false\" stopOnFailure=\"false\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.4/phpunit.xsd\">\n  <testsuites>\n    <testsuite name=\"PHP Dotenv Test Suite\">\n      <directory suffix=\"Test.php\">./tests</directory>\n    </testsuite>\n  </testsuites>\n  <source>\n    <include>\n      <directory suffix=\".php\">./src</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "psalm-baseline.xml",
          "type": "blob",
          "size": 1.4189453125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<files psalm-version=\"5.25.0@01a8eb06b9e9cc6cfb6a320bf9fb14331919d505\">\n  <file src=\"src/Repository/Adapter/EnvConstAdapter.php\">\n    <RedundantConditionGivenDocblockType>\n      <code><![CDATA[\\is_scalar($value)]]></code>\n    </RedundantConditionGivenDocblockType>\n  </file>\n  <file src=\"src/Repository/RepositoryBuilder.php\">\n    <InvalidStringClass>\n      <code><![CDATA[$adapter::create()]]></code>\n      <code><![CDATA[$reader::create()]]></code>\n      <code><![CDATA[$writer::create()]]></code>\n    </InvalidStringClass>\n    <MissingClosureReturnType>\n      <code><![CDATA[static function ($adapter) {]]></code>\n      <code><![CDATA[static function ($reader) {]]></code>\n      <code><![CDATA[static function ($writer) {]]></code>\n    </MissingClosureReturnType>\n  </file>\n  <file src=\"src/Util/Regex.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[$pattern]]></code>\n      <code><![CDATA[$pattern]]></code>\n      <code><![CDATA[$pattern]]></code>\n      <code><![CDATA[$pattern]]></code>\n    </ArgumentTypeCoercion>\n    <InvalidReturnStatement>\n      <code><![CDATA[self::pregAndWrap(static function (string $subject) use ($pattern) {\n            return (int) @\\preg_match_all($pattern, $subject);\n        }, $subject)]]></code>\n    </InvalidReturnStatement>\n    <InvalidReturnType>\n      <code><![CDATA[\\GrahamCampbell\\ResultType\\Result<int,string>]]></code>\n    </InvalidReturnType>\n  </file>\n</files>\n"
        },
        {
          "name": "psalm.xml",
          "type": "blob",
          "size": 0.44921875,
          "content": "<?xml version=\"1.0\"?>\n<psalm\n    errorLevel=\"2\"\n    resolveFromConfigFile=\"true\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"https://getpsalm.org/schema/config\"\n    xsi:schemaLocation=\"https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd\"\n    errorBaseline=\"psalm-baseline.xml\"\n    findUnusedBaselineEntry=\"true\"\n    findUnusedCode=\"false\"\n>\n    <projectFiles>\n        <directory name=\"src\" />\n    </projectFiles>\n</psalm>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor-bin",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}