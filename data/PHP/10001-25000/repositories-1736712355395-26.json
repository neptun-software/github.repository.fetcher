{
  "metadata": {
    "timestamp": 1736712355395,
    "page": 26,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Intervention/image",
      "stars": 14011,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1826171875,
          "content": "# editorconfig.org\n\nroot = true\n\n[*.php]\nindent_size = 4\nindent_style = space\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4111328125,
          "content": "* text=auto\n\n/.editorconfig      export-ignore\n/.github            export-ignore\n/.well-known        export-ignore\n/CONTRIBUTING.md    export-ignore\n/tests              export-ignore\n/.gitattributes     export-ignore\n/.gitignore         export-ignore\n/phpcs.xml.dist     export-ignore\n/phpunit.dist.xml   export-ignore\n/phpstan.dist.neon  export-ignore\n/docker-compose.yml export-ignore\n/Dockerfile         export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.078125,
          "content": "build/\nvendor/\n/.phpunit.cache\ncomposer.lock\nphpunit.xml\nphpcs.xml\nphpstan.neon\n"
        },
        {
          "name": ".well-known",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.3408203125,
          "content": "# Contributing to Intervention Image\n\nThank you for your interest in contributing to the project. Any contribution\nthat improves the project is welcome and will be considered for integration.\n\nPlease understand that there is no guarantee that your pull request will be\naccepted. To avoid misunderstandings, it is recommended that you first initiate\na discussion about your planned changes on the [issue\nboard](https://github.com/Intervention/image/issues).\n\nYou agree that your contributions will be licensed under the same license as\nthe main project. Before submitting a pull request familiarize yourself with\nthe [license](LICENSE) and understand its terms and conditions.\n\n## Requirements\n\nTo ensure a smooth collaboration process and maintain the quality of the\nproject the submitted pull request must meet the following requirements to be\naccepted for review. It is a good idea to check these locally **before** you\nsubmit the PR.\n\n### Follow the Branching Model\n\nPlease submit only one feature or bug fix per pull request. The best practice\nis to split your contributions into thematically meaningful branches and then\nsubmit them individually as pull requests.\n\n### Comply with the Coding Standard\n\nThe project follows the [PSR12 coding\nstandard](https://www.php-fig.org/psr/psr-12/) with some [additional\nextensions](phpcs.xml.dist). Adherence to these rules is essential and can be\neasily checked with the following command.\n\n```bash\n./vendor/bin/phpcs\n```\n\nOr by using the project's Docker environment.\n\n```bash\ndocker-compose run --rm --build standards\n```\n\n### Write Tests\n\nFor new features or changes to the existing code base, it is essential to cover\nthem with tests. Integrate your tests in the  the project's test environment\nand consider both positive and negative scenarios.\n\nMake sure that all tests are passed with the following command.\n\n```bash\n./vendor/bin/phpunit\n```\n\nOr by using the project's Docker environment.\n\n```bash\ndocker-compose run --rm --build tests\n```\n\n### Pay attention to the Analyzer Results\n\nA static analyzer is also used to avoid bugs and ensure quality. In addition to\ntesting, it must also run without errors.\n\nCheck the analyzer by running the following command.\n\n```bash\n./vendor/bin/phpstan analyze --memory-limit=512M ./src\n```\n\nOr by using the project's Docker environment.\n\n```bash\ndocker-compose run --rm --build analysis\n```\n\n**Thank you!**\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.6279296875,
          "content": "FROM php:8.1-cli\n\n# install dependencies\nRUN apt update \\\n        && apt install -y \\\n            libmagickwand-dev \\\n            libwebp-dev \\\n            libpng-dev \\\n            libavif-dev \\\n            git \\\n            zip \\\n        && pecl install imagick \\\n        && pecl install xdebug \\\n        && docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp --with-avif \\\n        && docker-php-ext-enable \\\n            imagick \\\n            xdebug \\\n        && docker-php-ext-install \\\n            gd \\\n            exif \\\n        && apt-get clean\n\n# install composer\nCOPY --from=composer /usr/bin/composer /usr/bin/composer\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0615234375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013-present Oliver Vogel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.2099609375,
          "content": "{\n    \"name\": \"intervention/image\",\n    \"description\": \"PHP image manipulation\",\n    \"homepage\": \"https://image.intervention.io/\",\n    \"keywords\": [\n        \"image\",\n        \"gd\",\n        \"imagick\",\n        \"watermark\",\n        \"thumbnail\",\n        \"resize\"\n    ],\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Oliver Vogel\",\n            \"email\": \"oliver@intervention.io\",\n            \"homepage\": \"https://intervention.io/\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"ext-mbstring\": \"*\",\n        \"intervention/gif\": \"^4.2\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^10.0 || ^11.0\",\n        \"mockery/mockery\": \"^1.6\",\n        \"phpstan/phpstan\": \"^2.1\",\n        \"squizlabs/php_codesniffer\": \"^3.8\",\n        \"slevomat/coding-standard\": \"~8.0\"\n    },\n    \"suggest\": {\n        \"ext-exif\": \"Recommended to be able to read EXIF data properly.\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Intervention\\\\Image\\\\\": \"src\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Intervention\\\\Image\\\\Tests\\\\\": \"tests\"\n        }\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"dealerdirect/phpcodesniffer-composer-installer\": true\n        }\n    }\n}\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.689453125,
          "content": "version: '3'\n\nservices:\n  tests:\n    build: ./\n    working_dir: /project\n    command: bash -c \"composer install && ./vendor/bin/phpunit\"\n    volumes:\n      - ./:/project\n  coverage:\n    build: ./\n    working_dir: /project\n    command: bash -c \"composer install && ./vendor/bin/phpunit --coverage-text\"\n    volumes:\n      - ./:/project\n    environment:\n      - XDEBUG_MODE=coverage\n  analysis:\n    build: ./\n    working_dir: /project\n    command: bash -c \"composer install && ./vendor/bin/phpstan analyze --memory-limit=512M\"\n    volumes:\n      - ./:/project\n  standards:\n    build: ./\n    working_dir: /project\n    command: bash -c \"composer install && ./vendor/bin/phpcs\"\n    volumes:\n      - ./:/project\n"
        },
        {
          "name": "phpcs.xml.dist",
          "type": "blob",
          "size": 3.06640625,
          "content": "<?xml version=\"1.0\"?>\n<ruleset name=\"Intervention\">\n  <file>src/</file>\n  <file>tests/</file>\n  <arg name=\"colors\"/>\n  <arg value=\"p\"/>\n\n  <rule ref=\"PSR12\"/>\n  <rule ref=\"Generic.Arrays.ArrayIndent\"/>\n  <rule ref=\"Generic.ControlStructures.InlineControlStructure\"/>\n  <rule ref=\"Generic.Formatting.SpaceAfterCast\"/>\n  <rule ref=\"Generic.Formatting.SpaceAfterNot\">\n    <properties>\n      <property name=\"spacing\" value=\"0\" />\n    </properties>\n  </rule>\n  <rule ref=\"Generic.Metrics.NestingLevel\"/>\n  <rule ref=\"SlevomatCodingStandard.Arrays.SingleLineArrayWhitespace\"/>\n  <rule ref=\"SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation\"/>\n  <rule ref=\"SlevomatCodingStandard.Classes.ClassConstantVisibility\"/>\n  <rule ref=\"SlevomatCodingStandard.Classes.ClassMemberSpacing\"/>\n  <rule ref=\"SlevomatCodingStandard.Classes.ConstantSpacing\"/>\n  <rule ref=\"SlevomatCodingStandard.Classes.MethodSpacing\"/>\n  <rule ref=\"SlevomatCodingStandard.Classes.ModernClassNameReference\"/>\n  <rule ref=\"SlevomatCodingStandard.Classes.ParentCallSpacing\"/>\n  <rule ref=\"SlevomatCodingStandard.Classes.PropertyDeclaration\"/>\n  <rule ref=\"SlevomatCodingStandard.Classes.RequireSelfReference\"/>\n  <rule ref=\"SlevomatCodingStandard.Classes.TraitUseDeclaration\"/>\n  <rule ref=\"SlevomatCodingStandard.Files.TypeNameMatchesFileName\">\n    <properties>\n      <property name=\"rootNamespaces\" type=\"array\">\n        <element key=\"src\" value=\"Intervention\\Image\"/>\n        <element key=\"tests\" value=\"Intervention\\Image\\Tests\"/>\n      </property>\n    </properties>\n  </rule>\n  <rule ref=\"SlevomatCodingStandard.Namespaces.DisallowGroupUse\"/>\n  <rule ref=\"SlevomatCodingStandard.Namespaces.MultipleUsesPerLine\"/>\n  <rule ref=\"SlevomatCodingStandard.Namespaces.UnusedUses\">\n    <properties>\n      <property name=\"searchAnnotations\" value=\"true\" />\n    </properties>\n  </rule>\n  <rule ref=\"SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash\"/>\n  <rule ref=\"SlevomatCodingStandard.Namespaces.UseFromSameNamespace\"/>\n  <rule ref=\"SlevomatCodingStandard.Namespaces.UseSpacing\"/>\n  <rule ref=\"SlevomatCodingStandard.Namespaces.UselessAlias\"/>\n  <rule ref=\"SlevomatCodingStandard.Strings.DisallowVariableParsing\"/>\n  <rule ref=\"SlevomatCodingStandard.TypeHints.DeclareStrictTypes\">\n    <properties>\n      <property name=\"spacesCountAroundEqualsSign\" value=\"0\" />\n    </properties>\n  </rule>\n  <rule ref=\"SlevomatCodingStandard.TypeHints.LongTypeHints\"/>\n  <rule ref=\"SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue\"/>\n  <rule ref=\"SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing\"/>\n  <rule ref=\"SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing\"/>\n  <rule ref=\"SlevomatCodingStandard.TypeHints.UnionTypeHintFormat\">\n    <properties>\n      <property name=\"withSpaces\" value=\"no\" />\n      <property name=\"nullPosition\" value=\"first\" />\n    </properties>\n  </rule>\n  <rule ref=\"SlevomatCodingStandard.PHP.UselessSemicolon\"/>\n  <rule ref=\"SlevomatCodingStandard.Whitespaces.DuplicateSpaces\"/>\n  <rule ref=\"SlevomatCodingStandard.Variables.UnusedVariable\"/>\n  <rule ref=\"SlevomatCodingStandard.Variables.UselessVariable\"/>\n</ruleset>\n"
        },
        {
          "name": "phpstan.dist.neon",
          "type": "blob",
          "size": 0.28125,
          "content": "parameters:\n    level: 6\n    paths:\n        - src\n    exceptions:\n        check:\n            missingCheckedExceptionInThrows: true\n        uncheckedExceptionClasses:\n            - ImagickException\n            - ImagickDrawException\n            - ImagickPixelException\n            - Error\n"
        },
        {
          "name": "phpunit.dist.xml",
          "type": "blob",
          "size": 0.845703125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.5/phpunit.xsd\" \n    backupGlobals=\"false\" \n    backupStaticProperties=\"false\" \n    beStrictAboutTestsThatDoNotTestAnything=\"false\" \n    bootstrap=\"vendor/autoload.php\" \n    cacheDirectory=\".phpunit.cache\" \n    colors=\"true\" \n    displayDetailsOnTestsThatTriggerNotices=\"true\"\n    processIsolation=\"false\" \n    stopOnFailure=\"false\">\n  <testsuites>\n    <testsuite name=\"Unit Tests\">\n      <directory suffix=\".php\">./tests/Unit</directory>\n    </testsuite>\n    <testsuite name=\"Feature Tests\">\n      <directory suffix=\".php\">./tests/Feature</directory>\n    </testsuite>\n  </testsuites>\n  <source>\n    <include>\n      <directory suffix=\".php\">src</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 2.453125,
          "content": "# Intervention Image\n## PHP Image Processing\n\n[![Latest Version](https://img.shields.io/packagist/v/intervention/image.svg)](https://packagist.org/packages/intervention/image)\n[![Build Status](https://github.com/Intervention/image/actions/workflows/run-tests.yml/badge.svg)](https://github.com/Intervention/image/actions)\n[![Monthly Downloads](https://img.shields.io/packagist/dm/intervention/image.svg)](https://packagist.org/packages/intervention/image/stats)\n[![Support me on Ko-fi](https://raw.githubusercontent.com/Intervention/image/develop/.github/images/support.svg)](https://ko-fi.com/interventionphp)\n\nIntervention Image is a **PHP image processing library** that provides a simple\nand expressive way to create, edit, and compose images. It comes with a universal\ninterface for the two most popular PHP image manipulation extensions. You can\nchoose between the GD library or Imagick as the base layer for all operations.\n\n- Simple interface for common image editing tasks\n- Interchangeable driver architecture\n- Support for animated images\n- Framework-agnostic\n- PSR-12 compliant\n\n## Installation\n\nYou can easily install this library using [Composer](https://getcomposer.org).\nSimply request the package with the following command:\n\n```bash\ncomposer require intervention/image\n```\n\n## Getting Started\n\nLearn the [basics](https://image.intervention.io/v3/basics/instantiation/) on\nhow to use Intervention Image and more with the [official\ndocumentation](https://image.intervention.io/v3/).\n\n## Code Examples\n\n```php\nuse Intervention\\Image\\ImageManager;\n\n// create image manager with desired driver\n$manager = new ImageManager(\n    new Intervention\\Image\\Drivers\\Gd\\Driver()\n);\n\n// open an image file\n$image = $manager->read('images/example.gif');\n\n// resize image instance\n$image->resize(height: 300);\n\n// insert a watermark\n$image->place('images/watermark.png');\n\n// encode edited image\n$encoded = $image->toJpg();\n\n// save encoded image\n$encoded->save('images/example.jpg');\n```\n\n## Requirements\n\n- PHP >= 8.1\n\n## Supported Image Libraries\n\n- GD Library\n- Imagick PHP extension\n\n## Security\n\nIf you discover any security related issues, please email oliver@intervention.io directly.\n\n## Authors\n\nThis library is developed and maintained by [Oliver Vogel](https://intervention.io)\n\nThanks to the community of [contributors](https://github.com/Intervention/image/graphs/contributors) who have helped to improve this project.\n\n## License\n\nIntervention Image is licensed under the [MIT License](LICENSE).\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}