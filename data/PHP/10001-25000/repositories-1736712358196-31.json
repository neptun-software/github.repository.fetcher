{
  "metadata": {
    "timestamp": 1736712358196,
    "page": 31,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "phpstan/phpstan",
      "stars": 13129,
      "defaultBranch": "2.1.x",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.13671875,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\n\n[*.{md,njk,ts,pcss}]\nindent_style = tab\n\n[*.{php,json}]\nindent_style = space\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.296875,
          "content": "/.* export-ignore\n/BACKERS.md export-ignore\n/CHANGELOG.md export-ignore\n/CODE_OF_CONDUCT.md export-ignore\n/docker export-ignore\n/e2e export-ignore\n/identifier-extractor export-ignore\n/playground-api export-ignore\n/playground-runner export-ignore\n/website/ export-ignore\n\n/website/** -linguist-detectable\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1494140625,
          "content": "/build/phpstan-generated.neon\n/composer.lock\n/conf/config.local.yml\n/e2e/vendor\n/vendor\n/.idea/*\n!.idea/icon.png\n/tests/tmp\n/tests/.phpunit.result.cache\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".phar-checksum",
          "type": "blob",
          "size": 0.072265625,
          "content": "504a9d8f41115f877069984f8a9c9378\n76740fd95bbe616331c66de45f489c697163a52b\n"
        },
        {
          "name": ".typos.toml",
          "type": "blob",
          "size": 0.166015625,
          "content": "[files]\nextend-exclude = [\n    \".git/\",\n    \"website/src/js/data/countries.json\",\n]\nignore-hidden = false\n\n[default]\nextend-ignore-re = [\n    \"'pk_live_[0-9A-Za-z]+'\",\n]\n"
        },
        {
          "name": "BACKERS.md",
          "type": "blob",
          "size": 10.8896484375,
          "content": "# Backers\n\nDevelopment of PHPStan is made possible thanks to these awesome backers!\nYou can become one of them by [becoming a GitHub Sponsor](https://github.com/sponsors/ondrejmirtes/).\n\nCheck out all the tiers - higher ones include additional goodies like placing\nthe logo of your company in PHPStan's README and the website.\n\n# $100+\n\n<ul>\n<li><a href=\"https://packagist.com/\">Private Packagist</a></li>\n<li><a href=\"https://www.startupjobs.cz/startup/shipmonk\">Shipmonk</a></li>\n<li><a href=\"https://www.contentkingapp.com/?ref=php-developer&utm_source=phpstan&utm_medium=referral&utm_campaign=sponsorship\">ContentKing</a></li>\n<li><a href=\"https://www.shopware.com/en/\">Shopware</a></li>\n<li><a href=\"https://www.campoint.net\">campoint AG</a></li>\n\n<!-- hundred --><li><a href=\"https://github.com/yositosi\"> (yositosi)</a></li>\n<li><a href=\"https://github.com/blackfireio\">Blackfire (blackfireio)</a></li>\n<li><a href=\"https://github.com/RightCapitalHQ\">RightCapital (RightCapitalHQ)</a></li>\n<li><a href=\"https://github.com/zolweb\">ZOL (zolweb)</a></li>\n<li><a href=\"https://github.com/TicketSwap\">TicketSwap (TicketSwap)</a></li>\n<li><a href=\"https://github.com/craftcms\">Craft CMS (craftcms)</a></li>\n<li><a href=\"https://github.com/worksome\">Worksome (worksome)</a></li>\n<li><a href=\"https://github.com/cdn77\">CDN77.com (cdn77)</a></li>\n<!-- hundred -->\n\n<!-- hundred-org --><li><a href=\"https://github.com/ohgoodlord\">Goodlord (ohgoodlord)</a></li>\n<li><a href=\"https://github.com/crispnl\">crispnl (crispnl)</a></li>\n<li><a href=\"https://github.com/inviqa\">Inviqa (inviqa)</a></li>\n<li><a href=\"https://github.com/hephaist-io\">Hephaist.io (hephaist-io)</a></li>\n<li><a href=\"https://github.com/matthiasCP\">Matthias @campointAG (matthiasCP)</a></li>\n<li><a href=\"https://github.com/MacPaw\">MacPaw Inc. (MacPaw)</a></li>\n<li><a href=\"https://github.com/Edgenext2024\"> (Edgenext2024)</a></li>\n<li><a href=\"https://github.com/FameHelsinki\">Fame Helsinki (FameHelsinki)</a></li>\n<li><a href=\"https://github.com/route4me\">Route4Me Route Planner (route4me)</a></li>\n<li><a href=\"https://github.com/malsatin\">Sergey (malsatin)</a></li>\n<li><a href=\"https://github.com/belsimpel\">Belsimpel.nl B.V. (belsimpel)</a></li>\n<li><a href=\"https://github.com/jrfnl\">Juliette (jrfnl)</a></li>\n<!-- hundred-org -->\n</ul>\n\n# $30+\n\n<ul>\n<!-- thirty --><li><a href=\"https://github.com/martin-georgiev\">Martin Georgiev (martin-georgiev)</a></li>\n<li><a href=\"https://github.com/glami\">GLAMI (glami)</a></li>\n<!-- thirty -->\n\n<!-- thirty-org --><li><a href=\"https://github.com/polylang\">Polylang (polylang)</a></li>\n<!-- thirty-org -->\n</ul>\n\n# $5+\n\n<ul>\n<!-- five --><li><a href=\"https://github.com/canvural\">Can Vural (canvural)</a></li>\n<li><a href=\"https://github.com/pyrech\">Loïck Piera (pyrech)</a></li>\n<li><a href=\"https://github.com/adamlundrigan\">Adam Lundrigan (adamlundrigan)</a></li>\n<li><a href=\"https://github.com/escopecz\">John Linhart (escopecz)</a></li>\n<li><a href=\"https://github.com/Ocramius\">Marco Pivetta (Ocramius)</a></li>\n<li><a href=\"https://github.com/ldebrouwer\">Luc (ldebrouwer)</a></li>\n<li><a href=\"https://github.com/Dukolm\"> (Dukolm)</a></li>\n<li><a href=\"https://github.com/zonuexe\">USAMI Kenta (zonuexe)</a></li>\n<li><a href=\"https://github.com/stpnkcrk\">Stepan Kocourek (stpnkcrk)</a></li>\n<li><a href=\"https://github.com/NicolasCARPi\">Nicolas CARPi (NicolasCARPi)</a></li>\n<li><a href=\"https://github.com/DaveLiddament\">Dave Liddament (DaveLiddament)</a></li>\n<li><a href=\"https://github.com/sustmi\">Miroslav Šustek (sustmi)</a></li>\n<li><a href=\"https://github.com/ScottHelme\">Scott Helme (ScottHelme)</a></li>\n<li><a href=\"https://github.com/forrest79\">Jakub Trmota (forrest79)</a></li>\n<li><a href=\"https://github.com/lcobucci\">Luís Cobucci (lcobucci)</a></li>\n<li><a href=\"https://github.com/complexgmbh\">Complex GmbH & Co. KG (complexgmbh)</a></li>\n<li><a href=\"https://github.com/tenkoma\">Koji Tanaka (tenkoma)</a></li>\n<li><a href=\"https://github.com/MidnightDesign\">Rudolph Gottesheim (MidnightDesign)</a></li>\n<li><a href=\"https://github.com/vaclavpavek\">Václav Pávek (vaclavpavek)</a></li>\n<li><a href=\"https://github.com/afilina\">Anna Filina (afilina)</a></li>\n<li><a href=\"https://github.com/Einenlum\">Yann Rabiller (Einenlum)</a></li>\n<li><a href=\"https://github.com/solcik\">David Šolc (solcik)</a></li>\n<li><a href=\"https://github.com/rieschl\">Thomas Rieschl (rieschl)</a></li>\n<li><a href=\"https://github.com/lampbristol\">Lamp Bristol (lampbristol)</a></li>\n<li><a href=\"https://github.com/themasch\">Mark Schmale (themasch)</a></li>\n<li><a href=\"https://github.com/nicwortel\">Nic Wortel (nicwortel)</a></li>\n<li><a href=\"https://github.com/customgento\">CustomGento (customgento)</a></li>\n<li><a href=\"https://github.com/johnbillion\">John Blackbourn (johnbillion)</a></li>\n<li><a href=\"https://github.com/dbu\">David Buchmann (dbu)</a></li>\n<li><a href=\"https://github.com/mavrck\">Bill Condo (mavrck)</a></li>\n<li><a href=\"https://github.com/drealecs\">Alexandru Pătrănescu (drealecs)</a></li>\n<li><a href=\"https://github.com/janveselynet\">Jan Veselý (janveselynet)</a></li>\n<li><a href=\"https://github.com/Luxian\">Lucian NEAG (Luxian)</a></li>\n<li><a href=\"https://github.com/christiansipola\">Christian Sjöström (christiansipola)</a></li>\n<li><a href=\"https://github.com/voda\">Ondřej Vodáček (voda)</a></li>\n<li><a href=\"https://github.com/o0h\">Hideki Kinjyo (o0h)</a></li>\n<li><a href=\"https://github.com/brotkrueml\">Chris Müller (brotkrueml)</a></li>\n<li><a href=\"https://github.com/joelclermont\">Joel Clermont (joelclermont)</a></li>\n<li><a href=\"https://github.com/spaze\">Michal Špaček (spaze)</a></li>\n<li><a href=\"https://github.com/DavidBadura\">David Badura (DavidBadura)</a></li>\n<li><a href=\"https://github.com/kento-oka\">Kento Oka (kento-oka)</a></li>\n<li><a href=\"https://github.com/tpetry\">Tobias Petry (tpetry)</a></li>\n<li><a href=\"https://github.com/SimoTod\">Simone Todaro (SimoTod)</a></li>\n<li><a href=\"https://github.com/rajyan\">Yohta Kimura (rajyan)</a></li>\n<li><a href=\"https://github.com/pavlakis\">Antonios Pavlakis (pavlakis)</a></li>\n<li><a href=\"https://github.com/croct-tech\">Croct (croct-tech)</a></li>\n<li><a href=\"https://github.com/p4veI\">Pavel Karfík (p4veI)</a></li>\n<li><a href=\"https://github.com/pionl\">Martin Kluska (pionl)</a></li>\n<li><a href=\"https://github.com/akondas\">Arkadiusz Kondas (akondas)</a></li>\n<li><a href=\"https://github.com/marmichalski\">Marcin Michalski (marmichalski)</a></li>\n<li><a href=\"https://github.com/mad-briller\">Brad Miller (mad-briller)</a></li>\n<li><a href=\"https://github.com/romm\">Romain Canon (romm)</a></li>\n<li><a href=\"https://github.com/RVxLab\"> (RVxLab)</a></li>\n<li><a href=\"https://github.com/muno92\"> (muno92)</a></li>\n<li><a href=\"https://github.com/underwood\">Scott Underwood (underwood)</a></li>\n<li><a href=\"https://github.com/damienalexandre\">Damien Alexandre (damienalexandre)</a></li>\n<li><a href=\"https://github.com/westonruter\">Weston Ruter (westonruter)</a></li>\n<li><a href=\"https://github.com/ricklambrechts\">Rick Lambrechts (ricklambrechts)</a></li>\n<li><a href=\"https://github.com/SomeBdyElse\">Hannes Lau (SomeBdyElse)</a></li>\n<li><a href=\"https://github.com/EmilMassey\">Emil Masiakowski (EmilMassey)</a></li>\n<li><a href=\"https://github.com/hirokinoue\">Hiroki Inoue (hirokinoue)</a></li>\n<li><a href=\"https://github.com/greew\">Jesper Skytte Marcussen (greew)</a></li>\n<li><a href=\"https://github.com/jesperbeisner\">Jesper Beisner (jesperbeisner)</a></li>\n<li><a href=\"https://github.com/vazaha-nl\">Lennart Hengstmengel (vazaha-nl)</a></li>\n<li><a href=\"https://github.com/zbateson\">Zaahid Bateson (zbateson)</a></li>\n<li><a href=\"https://github.com/WebBeest\">Patrick Kannekens (WebBeest)</a></li>\n<li><a href=\"https://github.com/peterfox\">Peter Fox (peterfox)</a></li>\n<li><a href=\"https://github.com/BernhardK91\">Bernhard Krämer (BernhardK91)</a></li>\n<li><a href=\"https://github.com/WyriHaximus\">Cees-Jan Kiewiet (WyriHaximus)</a></li>\n<li><a href=\"https://github.com/byWulf\">Michael Wolf (byWulf)</a></li>\n<li><a href=\"https://github.com/DrewAPicture\">Drew Jaynes (DrewAPicture)</a></li>\n<li><a href=\"https://github.com/amsoell\">Andy Soell (amsoell)</a></li>\n<!-- five -->\n\n<!-- five-org --><li><a href=\"https://github.com/hxv\">Michał Włodarczyk (hxv)</a></li>\n<li><a href=\"https://github.com/midatechsro\">midatechsro (midatechsro)</a></li>\n<li><a href=\"https://github.com/Schrank\">Fabian Blechschmidt (Schrank)</a></li>\n<li><a href=\"https://github.com/ScottHelme\">Scott Helme (ScottHelme)</a></li>\n<li><a href=\"https://github.com/aspirantzhang\">Aspirant Zhang (aspirantzhang)</a></li>\n<li><a href=\"https://github.com/oliverklee\">Oliver Klee (oliverklee)</a></li>\n<li><a href=\"https://github.com/gogaille\">Gogaille (gogaille)</a></li>\n<li><a href=\"https://github.com/andrewwoods\">Andrew Woods (andrewwoods)</a></li>\n<li><a href=\"https://github.com/Stollie\">Remco Raaijmakers (Stollie)</a></li>\n<li><a href=\"https://github.com/acelaya\">Alejandro Celaya (acelaya)</a></li>\n<li><a href=\"https://github.com/fusonic\">Fusonic GmbH (fusonic)</a></li>\n<li><a href=\"https://github.com/eliashaeussler\">Elias Häußler (eliashaeussler)</a></li>\n<li><a href=\"https://github.com/Enrise\">Enrise (Enrise)</a></li>\n<li><a href=\"https://github.com/lucassabreu\">Lucas dos Santos Abreu (lucassabreu)</a></li>\n<li><a href=\"https://github.com/matthewmincher\">Matthew Mincher (matthewmincher)</a></li>\n<li><a href=\"https://github.com/loganmarchione\">Logan Marchione (loganmarchione)</a></li>\n<li><a href=\"https://github.com/mceglowski\"> (mceglowski)</a></li>\n<li><a href=\"https://github.com/olliescase\">Oliver Scase (olliescase)</a></li>\n<li><a href=\"https://github.com/zajca\">Martin Zajíc (zajca)</a></li>\n<li><a href=\"https://github.com/o0h\">Hideki Kinjyo (o0h)</a></li>\n<li><a href=\"https://github.com/tenkoma\">Koji Tanaka (tenkoma)</a></li>\n<li><a href=\"https://github.com/stafftastic\">stafftastic GmbH (stafftastic)</a></li>\n<li><a href=\"https://github.com/AllenJB\">AllenJB (AllenJB)</a></li>\n<li><a href=\"https://github.com/madbob\">Roberto Guido (madbob)</a></li>\n<li><a href=\"https://github.com/stopfstedt\">Stefan Topfstedt (stopfstedt)</a></li>\n<li><a href=\"https://github.com/kingkero\">Martin Rehberger (kingkero)</a></li>\n<li><a href=\"https://github.com/previousnext\">PreviousNext (previousnext)</a></li>\n<li><a href=\"https://github.com/erik-perri\">Erik Perri (erik-perri)</a></li>\n<li><a href=\"https://github.com/alisqi\">AlisQI (alisqi)</a></li>\n<li><a href=\"https://github.com/WyriHaximus\">Cees-Jan Kiewiet (WyriHaximus)</a></li>\n<li><a href=\"https://github.com/lubatti\">Lautaro Lubatti (lubatti)</a></li>\n<li><a href=\"https://github.com/istiak-tridip\">Istiak Tridip (istiak-tridip)</a></li>\n<li><a href=\"https://github.com/kassner\">Rafael Kassner (kassner)</a></li>\n<li><a href=\"https://github.com/ssddanbrown\">Dan Brown (ssddanbrown)</a></li>\n<li><a href=\"https://github.com/zeleznypa\">Pavel Železný (zeleznypa)</a></li>\n<li><a href=\"https://github.com/epic-64\">William Raendchen (epic-64)</a></li>\n<li><a href=\"https://github.com/KateMorley\">Kate Morley (KateMorley)</a></li>\n<!-- five-org -->\n</ul>\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.1337890625,
          "content": "# Changelog\n\nAll PHPStan releases have their changelog [published in the Releases section](https://github.com/phpstan/phpstan/releases).\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.3544921875,
          "content": "\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nondrej@mirtes.cz.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2016 Ondřej Mirtes\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.0478515625,
          "content": "<h1 align=\"center\">PHPStan - PHP Static Analysis Tool</h1>\n\n<p align=\"center\">\n\t<img src=\"https://i.imgur.com/WaRKPlC.png\" alt=\"PHPStan\" width=\"300\" height=\"300\">\n</p>\n\n<p align=\"center\">\n\t<a href=\"https://github.com/phpstan/phpstan/actions\"><img src=\"https://github.com/phpstan/phpstan/workflows/Tests/badge.svg\" alt=\"Build Status\"></a>\n\t<a href=\"https://packagist.org/packages/phpstan/phpstan\"><img src=\"https://poser.pugx.org/phpstan/phpstan/v/stable\" alt=\"Latest Stable Version\"></a>\n\t<a href=\"https://packagist.org/packages/phpstan/phpstan/stats\"><img src=\"https://poser.pugx.org/phpstan/phpstan/downloads\" alt=\"Total Downloads\"></a>\n\t<a href=\"https://choosealicense.com/licenses/mit/\"><img src=\"https://poser.pugx.org/phpstan/phpstan/license\" alt=\"License\"></a>\n\t<a href=\"https://phpstan.org/\"><img src=\"https://img.shields.io/badge/PHPStan-enabled-brightgreen.svg?style=flat\" alt=\"PHPStan Enabled\"></a>\n</p>\n\n------\n\nPHPStan focuses on finding errors in your code without actually running it. It catches whole classes of bugs\neven before you write tests for the code. It moves PHP closer to compiled languages in the sense that the correctness of each line of the code\ncan be checked before you run the actual line.\n\n**[Read more about PHPStan »](https://phpstan.org/)**\n\n**[Try out PHPStan on the on-line playground! »](https://phpstan.org/try)**\n\n## Sponsors\n\n<a href=\"https://coders.thecodingmachine.com/phpstan\"><img src=\"website/src/images/sponsor/tcm.png\" alt=\"TheCodingMachine\" width=\"247\" height=\"64\"></a>\n&nbsp;&nbsp;&nbsp;\n<a href=\"https://packagist.com/?utm_source=phpstan&utm_medium=readme&utm_campaign=sponsorlogo\"><img src=\"website/src/images/sponsor/packagist.png\" alt=\"Private Packagist\" width=\"283\" height=\"64\"></a>\n<br>\n<a href=\"https://www.cdn77.com/\"><img src=\"website/src/images/sponsor/cdn77.png\" alt=\"CDN77\" width=\"283\" height=\"64\"></a>\n&nbsp;&nbsp;&nbsp;\n<a href=\"https://blackfire.io/docs/introduction?utm_source=phpstan&utm_medium=github_readme&utm_campaign=logo\"><img src=\"website/src/images/sponsor/blackfire.png\" alt=\"Blackfire.io\" width=\"254\" height=\"64\"></a>\n<br>\n<a href=\"https://www.iodigital.com/\"><img src=\"website/src/images/sponsor/io.png\" alt=\"iO\" width=\"254\" height=\"65\"></a>\n&nbsp;&nbsp;&nbsp;\n<a href=\"https://www.fame.fi/\"><img src=\"website/src/images/sponsor/fame.png\" alt=\"Fame Helsinki\" width=\"283\" height=\"64\"></a>\n<br>\n<a href=\"https://www.startupjobs.cz/startup/shipmonk\"><img src=\"website/src/images/sponsor/shipmonk.jpg\" alt=\"ShipMonk\" width=\"290\" height=\"64\"></a>\n&nbsp;&nbsp;&nbsp;\n<a href=\"https://togetter.com/\"><img src=\"website/src/images/sponsor/togetter.png\" alt=\"Togetter\" width=\"283\" height=\"64\"></a>\n<br>\n<a href=\"https://join.rightcapital.com/?utm_source=phpstan&utm_medium=github&utm_campaign=sponsorship\"><img src=\"website/src/images/sponsor/rightcapital.png\" alt=\"RightCapital\" width=\"283\" height=\"64\"></a>\n&nbsp;&nbsp;&nbsp;\n<a href=\"https://www.contentkingapp.com/?ref=php-developer&utm_source=phpstan&utm_medium=referral&utm_campaign=sponsorship\"><img src=\"website/src/images/sponsor/contentking.png\" alt=\"ContentKing\" width=\"283\" height=\"64\"></a>\n<br>\n<a href=\"https://zol.fr?utm_source=phpstan\"><img src=\"website/src/images/sponsor/zol.png\" alt=\"ZOL\" width=\"283\" height=\"64\"></a>\n&nbsp;&nbsp;&nbsp;\n<a href=\"https://www.edgenext.com/\"><img src=\"website/src/images/sponsor/edgenext.png\" alt=\"EdgeNext\" width=\"283\" height=\"64\"></a>\n<br>\n<a href=\"https://www.shopware.com/en/\"><img src=\"website/src/images/sponsor/shopware.png\" alt=\"Shopware\" width=\"284\" height=\"64\"></a>\n&nbsp;&nbsp;&nbsp;\n<a href=\"https://craftcms.com/\"><img src=\"website/src/images/sponsor/craftcms.png\" alt=\"Craft CMS\" width=\"283\" height=\"64\"></a>\n<br>\n<a href=\"https://www.worksome.com/\"><img src=\"website/src/images/sponsor/worksome.png\" alt=\"Worksome\" width=\"283\" height=\"64\"></a>\n&nbsp;&nbsp;&nbsp;\n<a href=\"https://www.campoint.net/\"><img src=\"website/src/images/sponsor/campoint.png\" alt=\"campoint AG\" width=\"283\" height=\"64\"></a>\n<br>\n<a href=\"https://www.crisp.nl/\"><img src=\"website/src/images/sponsor/crisp.png\" alt=\"Crisp.nl\" width=\"283\" height=\"64\"></a>\n&nbsp;&nbsp;&nbsp;\n<a href=\"https://inviqa.com/\"><img src=\"website/src/images/sponsor/inviqa.png\" alt=\"Inviqa\" width=\"254\" height=\"65\"></a>\n<br>\n<a href=\"https://www.shoptet.cz/\"><img src=\"website/src/images/sponsor/shoptet.png\" alt=\"Shoptet\" width=\"283\" height=\"64\"></a>\n&nbsp;&nbsp;&nbsp;\n<a href=\"https://route4me.com/\"><img src=\"website/src/images/sponsor/route4me.png\" alt=\"Route4Me: Route Optimizer and Route Planner Software\" width=\"283\" height=\"64\"></a>\n<br>\n<a href=\"https://werkenbijbelsimpel.nl/en/about-us/\"><img src=\"website/src/images/sponsor/belsimpel.png\" alt=\"Belsimpel\" width=\"284\" height=\"64\"></a>\n&nbsp;&nbsp;&nbsp;\n<a href=\"https://jobs.ticketswap.com/\"><img src=\"website/src/images/sponsor/ticketswap.png\" alt=\"TicketSwap\" width=\"269\" height=\"64\"></a>\n\n\n[**You can now sponsor my open-source work on PHPStan through GitHub Sponsors.**](https://github.com/sponsors/ondrejmirtes)\n\nDoes GitHub already have your 💳? Do you use PHPStan to find 🐛 before they reach production? [Send a couple of 💸 a month my way too.](https://github.com/sponsors/ondrejmirtes) Thank you!\n\nOne-time donations [through Revolut.me](https://revolut.me/ondrejmirtes) are also accepted. To request an invoice, [contact me](mailto:ondrej@mirtes.cz) through e-mail.\n\n## Documentation\n\nAll the documentation lives on the [phpstan.org website](https://phpstan.org/):\n\n* [Getting Started & User Guide](https://phpstan.org/user-guide/getting-started)\n* [Config Reference](https://phpstan.org/config-reference)\n* [PHPDocs Basics](https://phpstan.org/writing-php-code/phpdocs-basics) & [PHPDoc Types](https://phpstan.org/writing-php-code/phpdoc-types)\n* [Extension Library](https://phpstan.org/user-guide/extension-library)\n* [Developing Extensions](https://phpstan.org/developing-extensions/extension-types)\n* [API Reference](https://apiref.phpstan.org/)\n\n## PHPStan Pro\n\nPHPStan Pro is a paid add-on on top of open-source PHPStan Static Analysis Tool with these premium features:\n\n* Web UI for browsing found errors, you can click and open your editor of choice on the offending line.\n* Continuous analysis (watch mode): scans changed files in the background, refreshes the UI automatically.\n\nTry it on PHPStan 0.12.45 or later by running it with the `--pro` option. You can create an account either by following the on-screen instructions, or by visiting [account.phpstan.com](https://account.phpstan.com/).\n\nAfter 30-day free trial period it costs 7 EUR for individuals monthly, 70 EUR for teams (up to 25 members). By paying for PHPStan Pro, you're supporting the development of open-source PHPStan.\n\nYou can read more about it on [PHPStan's website](https://phpstan.org/blog/introducing-phpstan-pro).\n\n## Code of Conduct\n\nThis project adheres to a [Contributor Code of Conduct](https://github.com/phpstan/phpstan/blob/master/CODE_OF_CONDUCT.md). By participating in this project and its community, you are expected to uphold this code.\n\n## Contributing\n\nAny contributions are welcome. PHPStan's source code open to pull requests lives at [`phpstan/phpstan-src`](https://github.com/phpstan/phpstan-src).\n"
        },
        {
          "name": "UPGRADING.md",
          "type": "blob",
          "size": 19.9794921875,
          "content": "Upgrading from PHPStan 1.x to 2.0\n=================================\n\n## PHP version requirements\n\nPHPStan now requires PHP 7.4 or newer to run.\n\n## Upgrading guide for end users\n\nThe best way to get ready for upgrade to PHPStan 2.0 is to update to the **latest PHPStan 1.12 release**\nand enable [**Bleeding Edge**](https://phpstan.org/blog/what-is-bleeding-edge). This will enable the new rules and behaviours that 2.0 turns on for all users.\n\nAlso make sure to install and enable [`phpstan/phpstan-deprecation-rules`](https://github.com/phpstan/phpstan-deprecation-rules).\n\nOnce you get to a green build with no deprecations showed on latest PHPStan 1.12.x with Bleeding Edge enabled, you can update all your related PHPStan dependencies to 2.0 in `composer.json`:\n\n```json\n\"require-dev\": {\n    \"phpstan/phpstan\": \"^2.0\",\n    \"phpstan/phpstan-deprecation-rules\": \"^2.0\",\n    \"phpstan/phpstan-doctrine\": \"^2.0\",\n    \"phpstan/phpstan-nette\": \"^2.0\",\n    \"phpstan/phpstan-phpunit\": \"^2.0\",\n    \"phpstan/phpstan-strict-rules\": \"^2.0\",\n    \"phpstan/phpstan-symfony\": \"^2.0\",\n    \"phpstan/phpstan-webmozart-assert\": \"^2.0\",\n    ...\n}\n```\n\nDon't forget to update [3rd party PHPStan extensions](https://phpstan.org/user-guide/extension-library) as well.\n\nAfter changing your `composer.json`, run `composer update 'phpstan/*' -W`.\n\nIt's up to you whether you go through the new reported errors or if you just put them all to the [baseline](https://phpstan.org/user-guide/baseline) ;) Everyone who's on PHPStan 1.12 should be able to upgrade to PHPStan 2.0.\n\n### Noteworthy changes to code analysis\n\n* [**Enhancements in handling parameters passed by reference**](https://phpstan.org/blog/enhancements-in-handling-parameters-passed-by-reference)\n* [**Validate inline PHPDoc `@var` tag type**](https://phpstan.org/blog/phpstan-1-10-comes-with-lie-detector#validate-inline-phpdoc-%40var-tag-type)\n* [**List type enforced**](https://phpstan.org/blog/phpstan-1-9-0-with-phpdoc-asserts-list-type#list-type)\n* **Always `true` conditions always reported**: previously reported only with phpstan-strict-rules, this is now always reported.\n\n### Removed option `checkMissingIterableValueType`\n\nIt's strongly recommended to add the missing array typehints.\n\nIf you want to continue ignoring missing typehints from arrays, add `missingType.iterableValue` error identifier to your `ignoreErrors`:\n\n```neon\nparameters:\n\tignoreErrors:\n\t\t-\n\t\t\tidentifier: missingType.iterableValue\n```\n\n### Removed option `checkGenericClassInNonGenericObjectType`\n\nIt's strongly recommended to add the missing generic typehints.\n\nIf you want to continue ignoring missing typehints from generics, add `missingType.generics` error identifier to your `ignoreErrors`:\n\n```neon\nparameters:\n\tignoreErrors:\n\t\t-\n\t\t\tidentifier: missingType.generics\n```\n\n### Removed `checkAlwaysTrue*` options\n\nThese options have been removed because PHPStan now always behaves as if these were set to `true`:\n\n* `checkAlwaysTrueCheckTypeFunctionCall`\n* `checkAlwaysTrueInstanceof`\n* `checkAlwaysTrueStrictComparison`\n* `checkAlwaysTrueLooseComparison`\n\n### Removed option `excludes_analyse`\n\nIt has been replaced with [`excludePaths`](https://phpstan.org/user-guide/ignoring-errors#excluding-whole-files).\n\n### Paths in `excludePaths` and `ignoreErrors` have to be a valid file path or a fnmatch pattern\n\nIf you are excluding a file path that might not exist but you still want to have it in `excludePaths`, append `(?)`:\n\n```neon\nparameters:\n\texcludePaths:\n\t\t- tests/*/data/*\n\t\t- src/broken\n\t\t- node_modules (?) # optional path, might not exist\n```\n\nIf you have the same situation in `ignoreErrors` (ignoring an error in a path that might not exist), use `reportUnmatchedIgnoredErrors: false`.\n\n```neon\nparameters:\n\treportUnmatchedIgnoredErrors: false\n```\n\nAppending `(?)` in `ignoreErrors` is not supported.\n\n### Changes in 1st party PHPStan extensions\n\n* [phpstan-doctrine](https://github.com/phpstan/phpstan-doctrine)\n  * Removed config parameter `searchOtherMethodsForQueryBuilderBeginning` (extension now behaves as when this was set to `true`)\n  * Removed config parameter `queryBuilderFastAlgorithm` (extension now behaves as when this was set to `false`)\n* [phpstan-symfony](https://github.com/phpstan/phpstan-symfony)\n  * Removed legacy options with `_` in the name\n  * `container_xml_path` -> use `containerXmlPath`\n  * `constant_hassers` -> use `constantHassers`\n  * `console_application_loader` -> use `consoleApplicationLoader`\n\n### Minor backward compatibility breaks\n\n* Removed unused config parameter `cache.nodesByFileCountMax`\n* Removed unused config parameter `memoryLimitFile`\n* Removed unused feature toggle `disableRuntimeReflectionProvider`\n* Removed unused config parameter `staticReflectionClassNamePatterns`\n* Remove `fixerTmpDir` config parameter, use `pro.tmpDir` instead\n* Remove `tempResultCachePath` config parameter, use `resultCachePath` instead\n* `additionalConfigFiles` config parameter must be a list\n\n## Upgrading guide for extension developers\n\n> [!NOTE]\n> Please switch to PHPStan 2.0 in a new major version of your extension. It's not feasible to try to support both PHPStan 1.x and PHPStan 2.x with the same extension code.\n>\n> You can definitely get closer to supporting PHPStan 2.0 without increasing major version by solving reported deprecations and other issues by analysing your extension code with PHPStan & phpstan-deprecation-rules & Bleeding Edge, but the final leap and solving backward incompatibilities should be done by requiring `\"phpstan/phpstan\": \"^2.0\"` in your `composer.json`, and releasing a new major version.\n\n### PHPStan now uses nikic/php-parser v5\n\nSee [UPGRADING](https://github.com/nikic/PHP-Parser/blob/master/UPGRADE-5.0.md) guide for PHP-Parser.\n\nThe most notable change is how `throw` statement is represented. Previously, `throw` statements like `throw $e;` were represented using the `Stmt\\Throw_` class, while uses inside other expressions (such as `$x ?? throw $e`) used the `Expr\\Throw_` class.\n\nNow, `throw $e;` is represented as a `Stmt\\Expression` that contains an `Expr\\Throw_`. The\n`Stmt\\Throw_` class has been removed.\n\n### PHPStan now uses phpstan/phpdoc-parser v2\n\nSee [UPGRADING](https://github.com/phpstan/phpdoc-parser/blob/2.0.x/UPGRADING.md) guide for phpstan/phpdoc-parser.\n\n### Returning plain strings as errors no longer supported, use RuleErrorBuilder\n\nIdentifiers are also required in custom rules.\n\nLearn more: [Using RuleErrorBuilder to enrich reported errors in custom rules](https://phpstan.org/blog/using-rule-error-builder)\n\n**Before**:\n\n```php\nreturn ['My error'];\n```\n\n**After**:\n\n```php\nreturn [\n    RuleErrorBuilder::message('My error')\n        ->identifier('my.error')\n        ->build(),\n];\n```\n\n### Deprecate various `instanceof *Type` in favour of new methods on `Type` interface\n\nLearn more: [Why Is instanceof *Type Wrong and Getting Deprecated?](https://phpstan.org/blog/why-is-instanceof-type-wrong-and-getting-deprecated)\n\n### Removed deprecated `ParametersAcceptorSelector::selectSingle()`\n\nUse [`ParametersAcceptorSelector::selectFromArgs()`](https://apiref.phpstan.org/2.0.x/PHPStan.Reflection.ParametersAcceptorSelector.html#_selectFromArgs) instead. It should be used in most places where `selectSingle()` was previously used, like dynamic return type extensions.\n\n**Before**:\n\n```php\n$defaultReturnType = ParametersAcceptorSelector::selectSingle($functionReflection->getVariants())->getReturnType();\n```\n\n**After**:\n\n```php\n$defaultReturnType = ParametersAcceptorSelector::selectFromArgs(\n    $scope,\n    $functionCall->getArgs(),\n    $functionReflection->getVariants()\n)->getReturnType();\n```\n\nIf you're analysing function or method body itself and you're using one of the following methods, ask for `getParameters()` and `getReturnType()` directly on the reflection object:\n\n* [InClassMethodNode::getMethodReflection()](https://apiref.phpstan.org/2.0.x/PHPStan.Node.InClassMethodNode.html)\n* [InFunctionNode::getFunctionReflection()](https://apiref.phpstan.org/2.0.x/PHPStan.Node.InFunctionNode.html)\n* [FunctionReturnStatementsNode::getFunctionReflection()](https://apiref.phpstan.org/2.0.x/PHPStan.Node.FunctionReturnStatementsNode.html)\n* [MethodReturnStatementsNode::getMethodReflection()](https://apiref.phpstan.org/2.0.x/PHPStan.Node.MethodReturnStatementsNode.html)\n* [Scope::getFunction()](https://apiref.phpstan.org/2.0.x/PHPStan.Analyser.Scope.html#_getFunction)\n\n**Before**:\n\n```php\n$function = $node->getFunctionReflection();\n$returnType = ParametersAcceptorSelector::selectSingle($function->getVariants())->getReturnType();\n```\n\n**After**:\n\n```php\n$returnType = $node->getFunctionReflection()->getReturnType();\n```\n\n### Changed `TypeSpecifier::create()` and `SpecifiedTypes` constructor parameters\n\n[`PHPStan\\Analyser\\TypeSpecifier::create()`](https://apiref.phpstan.org/2.0.x/PHPStan.Analyser.TypeSpecifier.html#_create) now accepts (all parameters are required):\n\n* `Expr $expr`\n* `Type $type`\n* `TypeSpecifierContext $context`\n* `Scope $scope`\n\nIf you want to change `$overwrite` or `$rootExpr` (previous parameters also used to be accepted by this method), call `setAlwaysOverwriteTypes()` and `setRootExpr()` on [`SpecifiedTypes`](https://apiref.phpstan.org/2.0.x/PHPStan.Analyser.SpecifiedTypes.html) (object returned by `TypeSpecifier::create()`). These methods return a new object (SpecifiedTypes is immutable).\n\n[`SpecifiedTypes`](https://apiref.phpstan.org/2.0.x/PHPStan.Analyser.SpecifiedTypes.html) constructor now accepts:\n\n* `array $sureTypes`\n* `array $sureNotTypes`\n\nIf you want to change `$overwrite` or `$rootExpr` (previous parameters also used to be accepted by the constructor), call `setAlwaysOverwriteTypes()` and `setRootExpr()`. These methods return a new object (SpecifiedTypes is immutable).\n\n### `ConstantArrayType` no longer extends `ArrayType`\n\n`Type::getArrays()` now returns `list<ArrayType|ConstantArrayType>`.\n\nUsing `$type instanceof ArrayType` is [being deprecated anyway](https://phpstan.org/blog/why-is-instanceof-type-wrong-and-getting-deprecated) so the impact of this change should be minimal.\n\n### Changed `TypeSpecifier::specifyTypesInCondition()`\n\nThis method no longer accepts `Expr $rootExpr`. If you want to change it, call `setRootExpr()` on [`SpecifiedTypes`](https://apiref.phpstan.org/2.0.x/PHPStan.Analyser.SpecifiedTypes.html) (object returned by `TypeSpecifier::specifyTypesInCondition()`). `setRootExpr()` method returns a new object (SpecifiedTypes is immutable).\n\n### Node attributes `parent`, `previous`, `next` are no longer available\n\nLearn more: https://phpstan.org/blog/preprocessing-ast-for-custom-rules\n\n### Removed config parameter `scopeClass`\n\nAs a replacement you can implement [`PHPStan\\Type\\ExpressionTypeResolverExtension`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.ExpressionTypeResolverExtension.html) interface instead and register it as a service.\n\n### Removed `PHPStan\\Broker\\Broker`\n\nUse [`PHPStan\\Reflection\\ReflectionProvider`](https://apiref.phpstan.org/2.0.x/PHPStan.Reflection.ReflectionProvider.html) instead.\n\n`BrokerAwareExtension` was also removed. Ask for `ReflectionProvider` in the extension constructor instead.\n\nInstead of `PHPStanTestCase::createBroker()`, call `PHPStanTestCase::createReflectionProvider()`.\n\n### List type is enabled for everyone\n\nRemoved static methods from `AccessoryArrayListType` class:\n\n* `isListTypeEnabled()`\n* `setListTypeEnabled()`\n* `intersectWith()`\n\nInstead of `AccessoryArrayListType::intersectWith($type)`, do `TypeCombinator::intersect($type, new AccessoryArrayListType())`.\n\n### Minor backward compatibility breaks\n\n* Classes that were previously `@final` were made `final`\n* Parameter `$callableParameters` of [`MutatingScope::enterAnonymousFunction()`](https://apiref.phpstan.org/2.0.x/PHPStan.Analyser.MutatingScope.html#_enterAnonymousFunction) and [`enterArrowFunction()`](https://apiref.phpstan.org/2.0.x/PHPStan.Analyser.MutatingScope.html#_enterArrowFunction) made required\n* Parameter `StatementContext $context` of [`NodeScopeResolver::processStmtNodes()`](https://apiref.phpstan.org/2.0.x/PHPStan.Analyser.NodeScopeResolver.html#_processStmtNodes) made required\n* ClassPropertiesNode - remove `$extensions` parameter from [`getUninitializedProperties()`](https://apiref.phpstan.org/2.0.x/PHPStan.Node.ClassPropertiesNode.html#_getUninitializedProperties)\n* `Type::getSmallerType()`, `Type::getSmallerOrEqualType()`, `Type::getGreaterType()`, `Type::getGreaterOrEqualType()`, `Type::isSmallerThan()`, `Type::isSmallerThanOrEqual()` now require [`PhpVersion`](https://apiref.phpstan.org/2.0.x/PHPStan.Php.PhpVersion.html) as argument.\n* `CompoundType::isGreaterThan()`, `CompoundType::isGreaterThanOrEqual()` now require [`PhpVersion`](https://apiref.phpstan.org/2.0.x/PHPStan.Php.PhpVersion.html) as argument.\n* Removed `ReflectionProvider::supportsAnonymousClasses()` (all reflection providers support anonymous classes)\n* Remove `ArrayType::generalizeKeys()`\n* Remove `ArrayType::count()`, use `Type::getArraySize()` instead\n* Remove `ArrayType::castToArrayKeyType()`, `Type::toArrayKey()` instead\n* Remove `UnionType::pickTypes()`, use `pickFromTypes()` instead\n* Remove `RegexArrayShapeMatcher::matchType()`, use `matchExpr()` instead\n* Remove unused `PHPStanTestCase::$useStaticReflectionProvider`\n* Remove `PHPStanTestCase::getReflectors()`, use `getReflector()` instead\n* Remove `ClassReflection::getFileNameWithPhpDocs()`, use `getFileName()` instead\n* Remove `AnalysisResult::getInternalErrors()`, use `getInternalErrorObjects()` instead\n* Remove `ConstantReflection::getValue()`, use `getValueExpr()` instead. To get `Type` from `Expr`, use `Scope::getType()` or `InitializerExprTypeResolver::getType()`\n* Remove `PropertyTag::getType()`, use `getReadableType()` / `getWritableType()` instead\n* Remove `GenericTypeVariableResolver`, use [`Type::getTemplateType()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_getTemplateType) instead\n* Rename `Type::isClassStringType()` to `Type::isClassString()`\n* Remove `Scope::isSpecified()`, use `hasExpressionType()` instead\n* Remove `ConstantArrayType::isEmpty()`, use `isIterableAtLeastOnce()->no()` instead\n* Remove `ConstantArrayType::getNextAutoIndex()`\n* Removed methods from `ConstantArrayType` - `getFirst*Type` and `getLast*Type`\n  * Use `getFirstIterable*Type` and `getLastIterable*Type` instead\n* Remove `ConstantArrayType::generalizeToArray()`\n* Remove `ConstantArrayType::findTypeAndMethodName()`, use `findTypeAndMethodNames()` instead\n* Remove `ConstantArrayType::removeLast()`, use [`Type::popArray()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_popArray) instead\n* Remove `ConstantArrayType::removeFirst()`, use [`Type::shiftArray()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_shiftArray) instead\n* Remove `ConstantArrayType::reverse()`, use [`Type::reverseArray()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_reverseArray) instead\n* Remove `ConstantArrayType::chunk()`, use [`Type::chunkArray()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_chunkArray) instead\n* Remove `ConstantArrayType::slice()`, use [`Type::sliceArray()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_sliceArray) instead\n* Made `TypeUtils` thinner by removing methods:\n  * Remove `TypeUtils::getArrays()` and `getAnyArrays()`, use [`Type::getArrays()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_getArrays) instead\n  * Remove `TypeUtils::getConstantArrays()` and `getOldConstantArrays()`, use [`Type::getConstantArrays()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_getConstantArrays) instead\n  * Remove `TypeUtils::getConstantStrings()`, use [`Type::getConstantStrings()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_getConstantStrings) instead\n  * Remove `TypeUtils::getConstantTypes()` and `getAnyConstantTypes()`, use [`Type::isConstantValue()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_isConstantValue) or [`Type::generalize()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_generalize)\n  * Remove `TypeUtils::generalizeType()`, use [`Type::generalize()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_generalize) instead\n  * Remove `TypeUtils::getDirectClassNames()`, use [`Type::getObjectClassNames()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_getObjectClassNames) instead\n  * Remove `TypeUtils::getConstantScalars()`, use [`Type::isConstantScalarValue()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_isConstantScalarValue) or [`Type::getConstantScalarTypes()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_getConstantScalarTypes) instead\n  * Remove `TypeUtils::getEnumCaseObjects()`, use [`Type::getEnumCases()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_getEnumCases) instead\n  * Remove `TypeUtils::containsCallable()`, use [`Type::isCallable()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_isCallable) instead\n* Removed `Scope::doNotTreatPhpDocTypesAsCertain()`, use `getNativeType()` instead\n* Parameter `$isList` in `ConstantArrayType` constructor can only be `TrinaryLogic`, no longer `bool`\n* Parameter `$nextAutoIndexes` in `ConstantArrayType` constructor can only be `non-empty-list<int>`, no longer `int`\n* Remove `ConstantType` interface, use [`Type::isConstantValue()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_isConstantValue) instead\n* `acceptsNamedArguments()` in `FunctionReflection`, `ExtendedMethodReflection` and `CallableParametersAcceptor` interfaces returns `TrinaryLogic` instead of `bool`\n* Remove `FunctionReflection::isFinal()`\n* [`Type::getProperty()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.Type.html#_getProperty) now returns [`ExtendedPropertyReflection`](https://apiref.phpstan.org/2.0.x/PHPStan.Reflection.ExtendedPropertyReflection.html)\n* Remove `__set_state()` on objects that should not be serialized in cache\n* Parameter `$selfClass` of [`TypehintHelper::decideTypeFromReflection()`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.TypehintHelper.html#_decideTypeFromReflection) no longer accepts `string`\n* `LevelsTestCase::dataTopics()` data provider made static\n* `PHPStan\\Node\\Printer\\Printer` no longer autowired as `PhpParser\\PrettyPrinter\\Standard`, use `PHPStan\\Node\\Printer\\Printer` in the typehint\n* Remove `Type::acceptsWithReason()`, `Type:accepts()` return type changed from `TrinaryLogic` to [`AcceptsResult`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.AcceptsResult.html)\n* Remove `CompoundType::isAcceptedWithReasonBy()`, `CompoundType::isAcceptedBy()` return type changed from `TrinaryLogic` to [`AcceptsResult`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.AcceptsResult.html)\nRemove `Type::isSuperTypeOfWithReason()`, `Type:isSuperTypeOf()` return type changed from `TrinaryLogic` to [`IsSuperTypeOfResult`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.IsSuperTypeOfResult.html)\n* Remove `CompoundType::isSubTypeOfWithReasonBy()`, `CompoundType::isSubTypeOf()` return type changed from `TrinaryLogic` to [`IsSuperTypeOfResult`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.IsSuperTypeOfResult.html)\n* Remove `TemplateType::isValidVarianceWithReason()`, changed `TemplateType::isValidVariance()` return type to [`IsSuperTypeOfResult`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.IsSuperTypeOfResult.html)\n* `RuleLevelHelper::accepts()` return type changed from `bool` to [`RuleLevelHelperAcceptsResult`](https://apiref.phpstan.org/2.0.x/PHPStan.Type.AcceptsResult.html)\n* Changes around `ClassConstantReflection`\n  * Class `ClassConstantReflection` removed from BC promise, renamed to `RealClassConstantReflection`\n  * Interface `ConstantReflection` renamed to `ClassConstantReflection`\n  * Added more methods around PHPDoc types and native types to the (new) `ClassConstantReflection`\n  * Interface `GlobalConstantReflection` renamed to `ConstantReflection`\n* Renamed interfaces and classes from `*WithPhpDocs` to `Extended*`\n  * `ParametersAcceptorWithPhpDocs` -> `ExtendedParametersAcceptor`\n  * `ParameterReflectionWithPhpDocs` -> `ExtendedParameterReflection`\n  * `FunctionVariantWithPhpDocs` -> `ExtendedFunctionVariant`\n* `ClassPropertyNode::getNativeType()` return type changed from AST node to `Type|null`\n* Class `PHPStan\\Node\\ClassMethod` (accessible from `ClassMethodsNode`) is no longer an AST node\n  * Call `PHPStan\\Node\\ClassMethod::getNode()` to access the original AST node\n"
        },
        {
          "name": "bootstrap.php",
          "type": "blob",
          "size": 4.458984375,
          "content": "<?php declare(strict_types = 1);\n\nnamespace PHPStan;\n\nuse Composer\\Autoload\\ClassLoader;\nuse function class_exists;\nuse const PHP_VERSION_ID;\n\nfinal class PharAutoloader\n{\n\t/** @var ClassLoader */\n\tprivate static $composerAutoloader;\n\n\t/** @var bool */\n\tprivate static $polyfillsLoaded = false;\n\n\tfinal public static function loadClass(string $class): void {\n\t\tif (!extension_loaded('phar') || defined('__PHPSTAN_RUNNING__')) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (strpos($class, '_PHPStan_') === 0) {\n\t\t\tif (!in_array('phar', stream_get_wrappers(), true)) {\n\t\t\t\tthrow new \\Exception('Phar wrapper is not registered. Please review your php.ini settings.');\n\t\t\t}\n\n\t\t\tif (self::$composerAutoloader === null) {\n\t\t\t\tself::$composerAutoloader = require 'phar://' . __DIR__ . '/phpstan.phar/vendor/autoload.php';\n\t\t\t\trequire_once 'phar://' . __DIR__ . '/phpstan.phar/vendor/jetbrains/phpstorm-stubs/PhpStormStubsMap.php';\n\t\t\t\trequire_once 'phar://' . __DIR__ . '/phpstan.phar/vendor/react/async/src/functions_include.php';\n\t\t\t\trequire_once 'phar://' . __DIR__ . '/phpstan.phar/vendor/react/promise/src/functions_include.php';\n\t\t\t}\n\t\t\tself::$composerAutoloader->loadClass($class);\n\n\t\t\treturn;\n\t\t}\n\t\tif (strpos($class, 'PHPStan\\\\') !== 0 || strpos($class, 'PHPStan\\\\PhpDocParser\\\\') === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!in_array('phar', stream_get_wrappers(), true)) {\n\t\t\tthrow new \\Exception('Phar wrapper is not registered. Please review your php.ini settings.');\n\t\t}\n\n\t\tif (!self::$polyfillsLoaded) {\n\t\t\tself::$polyfillsLoaded = true;\n\n\t\t\tif (\n\t\t\t\tPHP_VERSION_ID < 80000\n\t\t\t\t&& empty($GLOBALS['__composer_autoload_files']['a4a119a56e50fbb293281d9a48007e0e'])\n\t\t\t\t&& !class_exists(\\Symfony\\Polyfill\\Php80\\Php80::class, false)\n\t\t\t) {\n\t\t\t\t$GLOBALS['__composer_autoload_files']['a4a119a56e50fbb293281d9a48007e0e'] = true;\n\t\t\t\trequire_once 'phar://' . __DIR__ . '/phpstan.phar/vendor/symfony/polyfill-php80/Php80.php';\n\t\t\t\trequire_once 'phar://' . __DIR__ . '/phpstan.phar/vendor/symfony/polyfill-php80/bootstrap.php';\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tempty($GLOBALS['__composer_autoload_files']['0e6d7bf4a5811bfa5cf40c5ccd6fae6a'])\n\t\t\t\t&& !class_exists(\\Symfony\\Polyfill\\Mbstring\\Mbstring::class, false)\n\t\t\t) {\n\t\t\t\t$GLOBALS['__composer_autoload_files']['0e6d7bf4a5811bfa5cf40c5ccd6fae6a'] = true;\n\t\t\t\trequire_once 'phar://' . __DIR__ . '/phpstan.phar/vendor/symfony/polyfill-mbstring/Mbstring.php';\n\t\t\t\trequire_once 'phar://' . __DIR__ . '/phpstan.phar/vendor/symfony/polyfill-mbstring/bootstrap.php';\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tempty($GLOBALS['__composer_autoload_files']['e69f7f6ee287b969198c3c9d6777bd38'])\n\t\t\t\t&& !class_exists(\\Symfony\\Polyfill\\Intl\\Normalizer\\Normalizer::class, false)\n\t\t\t) {\n\t\t\t\t$GLOBALS['__composer_autoload_files']['e69f7f6ee287b969198c3c9d6777bd38'] = true;\n\t\t\t\trequire_once 'phar://' . __DIR__ . '/phpstan.phar/vendor/symfony/polyfill-intl-normalizer/Normalizer.php';\n\t\t\t\trequire_once 'phar://' . __DIR__ . '/phpstan.phar/vendor/symfony/polyfill-intl-normalizer/bootstrap.php';\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t!extension_loaded('intl')\n\t\t\t\t&& empty($GLOBALS['__composer_autoload_files']['8825ede83f2f289127722d4e842cf7e8'])\n\t\t\t\t&& !class_exists(\\Symfony\\Polyfill\\Intl\\Grapheme\\Grapheme::class, false)\n\t\t\t) {\n\t\t\t\t$GLOBALS['__composer_autoload_files']['8825ede83f2f289127722d4e842cf7e8'] = true;\n\t\t\t\trequire_once 'phar://' . __DIR__ . '/phpstan.phar/vendor/symfony/polyfill-intl-grapheme/Grapheme.php';\n\t\t\t\trequire_once 'phar://' . __DIR__ . '/phpstan.phar/vendor/symfony/polyfill-intl-grapheme/bootstrap.php';\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tPHP_VERSION_ID < 80100\n\t\t\t\t&& empty ($GLOBALS['__composer_autoload_files']['23c18046f52bef3eea034657bafda50f'])\n\t\t\t\t&& !class_exists(\\Symfony\\Polyfill\\Php81\\Php81::class, false)\n\t\t\t) {\n\t\t\t\t$GLOBALS['__composer_autoload_files']['23c18046f52bef3eea034657bafda50f'] = true;\n\t\t\t\trequire_once 'phar://' . __DIR__ . '/phpstan.phar/vendor/symfony/polyfill-php81/Php81.php';\n\t\t\t\trequire_once 'phar://' . __DIR__ . '/phpstan.phar/vendor/symfony/polyfill-php81/bootstrap.php';\n\t\t\t}\n\t\t}\n\n\t\t$filename = str_replace('\\\\', DIRECTORY_SEPARATOR, $class);\n\t\tif (strpos($class, 'PHPStan\\\\BetterReflection\\\\') === 0) {\n\t\t\t$filename = substr($filename, strlen('PHPStan\\\\BetterReflection\\\\'));\n\t\t\t$filepath = 'phar://' . __DIR__ . '/phpstan.phar/vendor/ondrejmirtes/better-reflection/src/' . $filename . '.php';\n\t\t} else {\n\t\t\t$filename = substr($filename, strlen('PHPStan\\\\'));\n\t\t\t$filepath = 'phar://' . __DIR__ . '/phpstan.phar/src/' . $filename . '.php';\n\t\t}\n\n\t\tif (!file_exists($filepath)) {\n\t\t\treturn;\n\t\t}\n\n\t\trequire $filepath;\n\t}\n}\n\nspl_autoload_register([PharAutoloader::class, 'loadClass']);\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.62890625,
          "content": "{\n\t\"name\": \"phpstan/phpstan\",\n\t\"description\": \"PHPStan - PHP Static Analysis Tool\",\n\t\"license\": [\"MIT\"],\n\t\"keywords\": [\"dev\", \"static analysis\"],\n\t\"require\": {\n\t\t\"php\": \"^7.4|^8.0\"\n\t},\n\t\"conflict\": {\n\t\t\"phpstan/phpstan-shim\": \"*\"\n\t},\n\t\"bin\": [\n\t\t\"phpstan\",\n\t\t\"phpstan.phar\"\n\t],\n\t\"autoload\": {\n\t\t\"files\": [\"bootstrap.php\"]\n\t},\n\t\"support\": {\n\t\t\"issues\": \"https://github.com/phpstan/phpstan/issues\",\n\t\t\"forum\": \"https://github.com/phpstan/phpstan/discussions\",\n\t\t\"source\": \"https://github.com/phpstan/phpstan-src\",\n\t\t\"docs\": \"https://phpstan.org/user-guide/getting-started\",\n\t\t\"security\": \"https://github.com/phpstan/phpstan/security/policy\"\n\t}\n}\n"
        },
        {
          "name": "conf",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "e2e",
          "type": "tree",
          "content": null
        },
        {
          "name": "identifier-extractor",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan",
          "type": "blob",
          "size": 0.15234375,
          "content": "#!/usr/bin/env php\n<?php\n\ndeclare (strict_types=1);\n\nPhar::loadPhar(__DIR__ . '/phpstan.phar', 'phpstan.phar');\n\nrequire 'phar://phpstan.phar/bin/phpstan';\n"
        },
        {
          "name": "phpstan.phar",
          "type": "blob",
          "size": 23183.361328125,
          "content": ""
        },
        {
          "name": "phpstan.phar.asc",
          "type": "blob",
          "size": 0.8134765625,
          "content": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEynwsejDI6OEnSoR2UcZzBf/C5cAFAmeCkLoACgkQUcZzBf/C\n5cAe3A/+MVE7u5L5xaB5NWbqBSGsNhkf+0xYjxQn8IvU7oHiVa9925v9/aly7hoX\nHIzWJnxl93KiGst3pyGMdCpyx+bDsg6X9FyNVdjtrtoNEVeSAyLlViu8kjcvkHvj\nCPKA7EWhx6g4wN5SxBLa9b3efLc8cfZqfZL/vKwsW2ulCl0u6T9nmsIBESyPnTdj\nFf38OX3grTUwwcvtT8CYkeHqKefMOsTbQKX28SE7f+XWJMvYcrO6ZyD8f9AOXx8P\nbBKihXr/hwpHN9XbD6br0N4QfpgdrkueJS9AQgSElUMt53d+FYVSat9+aRkWroVP\nFT00brTOcd1YM2YMZNxdVj3PYeCJiR2vdOeQ62rP17svWhC+XXh3145lTD29dPAP\n+tejd2SMhJfurqzGaCyhUxDSeLlOFAG5lPpty8F+g+Ju9qBR6Mhi+RxqClYp6pSh\nL0b5qC5DOcQbFcwVem5c5s/TkihdVooq+E3ETvcJhfAuVU/qBB/tsTVAsCSid8+h\n57p4sCkaUCcp0TYbeens6HCA7VaT8+SYjolAZwr0Au1g3GGwOXRyOBvDiH+WJxKw\nzqCabvlsaubZF+6v9SOK7y/vikSXCiZpyl2z2EEEUSAgyxqc2Z0Z7tObDqQSAQN2\nOlr1/hcmw2Eyjk0ukalljT0IFmoxA2fmXseK7eTASVJtio7q72Q=\n=cnva\n-----END PGP SIGNATURE-----\n"
        },
        {
          "name": "playground-api",
          "type": "tree",
          "content": null
        },
        {
          "name": "playground-runner",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}