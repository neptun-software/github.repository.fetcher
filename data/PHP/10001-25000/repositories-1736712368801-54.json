{
  "metadata": {
    "timestamp": 1736712368801,
    "page": 54,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "doctrine/instantiator",
      "stars": 10967,
      "defaultBranch": "2.0.x",
      "files": [
        {
          "name": ".doctrine-project.json",
          "type": "blob",
          "size": 1.1962890625,
          "content": "{\n    \"active\": true,\n    \"name\": \"Instantiator\",\n    \"slug\": \"instantiator\",\n    \"docsSlug\": \"doctrine-instantiator\",\n    \"codePath\": \"/src\",\n    \"versions\": [\n        {\n            \"name\": \"2.0\",\n            \"branchName\": \"2.0.x\",\n            \"slug\": \"2.0\",\n            \"aliases\": [\"latest\"],\n            \"maintained\": true,\n            \"current\": true\n        },\n        {\n            \"name\": \"1.5\",\n            \"branchName\": \"1.5.x\",\n            \"slug\": \"1.5\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"1.4\",\n            \"branchName\": \"1.4.x\",\n            \"slug\": \"1.4\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"1.3\",\n            \"branchName\": \"1.3.x\",\n            \"slug\": \"1.3\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"1.2\",\n            \"branchName\": \"1.2.x\",\n            \"slug\": \"1.2\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"1.1\",\n            \"branchName\": \"1.1.x\",\n            \"slug\": \"1.1\",\n            \"maintained\": false\n        },\n        {\n            \"name\": \"1.0\",\n            \"branchName\": \"1.0.x\",\n            \"slug\": \"1.0\",\n            \"maintained\": false\n        }\n    ]\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3974609375,
          "content": "/.github               export-ignore\n/tests                 export-ignore\n.doctrine-project.json export-ignore\n.gitattributes         export-ignore\n.gitignore             export-ignore\nphpbench.json          export-ignore\nphpcs.xml.dist         export-ignore\nphpmd.xml.dist         export-ignore\nphpstan.neon.dist      export-ignore\nphpunit.xml.dist       export-ignore\ncomposer.lock          export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.115234375,
          "content": "phpunit.xml\n/.phpunit.result.cache\nbuild\nvendor\n/composer.lock\ncoverage.clover\n/phpcs.xml\n/.phpcs-cache\n/phpstan.neon\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.0078125,
          "content": "# Contributing\n\n * Follow the [Doctrine Coding Standard](https://github.com/doctrine/coding-standard)\n * The project will follow strict [object calisthenics](http://www.slideshare.net/guilhermeblanco/object-calisthenics-applied-to-php)\n * Any contribution must provide tests for additional introduced conditions\n * Any un-confirmed issue needs a failing test case before being accepted\n * Pull requests must be sent from a new hotfix/feature branch, not from `master`.\n\n## Installation\n\nTo install the project and run the tests, you need to clone it first:\n\n```sh\n$ git clone git://github.com/doctrine/instantiator.git\n```\n\nYou will then need to run a composer installation:\n\n```sh\n$ cd Instantiator\n$ curl -s https://getcomposer.org/installer | php\n$ php composer.phar update\n```\n\n## Testing\n\nThe PHPUnit version to be used is the one installed as a dev- dependency via composer:\n\n```sh\n$ ./vendor/bin/phpunit\n```\n\nAccepted coverage for new contributions is 80%. Any contribution not satisfying this requirement \nwon't be merged.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03515625,
          "content": "Copyright (c) 2014 Doctrine Project\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.55078125,
          "content": "# Doctrine Instantiator\n\nThis library provides a way of avoiding usage of constructors when instantiating PHP classes.\n\n[![Build Status](https://travis-ci.org/doctrine/instantiator.svg?branch=master)](https://travis-ci.org/doctrine/instantiator)\n[![Code Coverage](https://codecov.io/gh/doctrine/instantiator/branch/master/graph/badge.svg)](https://codecov.io/gh/doctrine/instantiator/branch/master)\n[![Dependency Status](https://www.versioneye.com/package/php--doctrine--instantiator/badge.svg)](https://www.versioneye.com/package/php--doctrine--instantiator)\n\n[![Latest Stable Version](https://poser.pugx.org/doctrine/instantiator/v/stable.png)](https://packagist.org/packages/doctrine/instantiator)\n[![Latest Unstable Version](https://poser.pugx.org/doctrine/instantiator/v/unstable.png)](https://packagist.org/packages/doctrine/instantiator)\n\n## Installation\n\nThe suggested installation method is via [composer](https://getcomposer.org/):\n\n```sh\ncomposer require doctrine/instantiator\n```\n\n## Usage\n\nThe instantiator is able to create new instances of any class without using the constructor or any API of the class\nitself:\n\n```php\n$instantiator = new \\Doctrine\\Instantiator\\Instantiator();\n\n$instance = $instantiator->instantiate(\\My\\ClassName\\Here::class);\n```\n\n## Contributing\n\nPlease read the [CONTRIBUTING.md](CONTRIBUTING.md) contents if you wish to help out!\n\n## Credits\n\nThis library was migrated from [ocramius/instantiator](https://github.com/Ocramius/Instantiator), which\nhas been donated to the doctrine organization, and which is now deprecated in favour of this package.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.435546875,
          "content": "{\n    \"name\":              \"doctrine/instantiator\",\n    \"description\":       \"A small, lightweight utility to instantiate objects in PHP without invoking their constructors\",\n    \"type\":              \"library\",\n    \"license\":           \"MIT\",\n    \"homepage\":          \"https://www.doctrine-project.org/projects/instantiator.html\",\n    \"keywords\":          [\n        \"instantiate\",\n        \"constructor\"\n    ],\n    \"authors\": [\n        {\n            \"name\":     \"Marco Pivetta\",\n            \"email\":    \"ocramius@gmail.com\",\n            \"homepage\": \"https://ocramius.github.io/\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.1\"\n    },\n    \"require-dev\": {\n        \"ext-phar\":                  \"*\",\n        \"ext-pdo\":                   \"*\",\n        \"doctrine/coding-standard\":  \"^12\",\n        \"phpbench/phpbench\":         \"^1.2\",\n        \"phpstan/phpstan\":           \"^1.9.4\",\n        \"phpstan/phpstan-phpunit\":   \"^1.3\",\n        \"phpunit/phpunit\":           \"^10.5\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Doctrine\\\\Instantiator\\\\\": \"src/Doctrine/Instantiator/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-0\": {\n            \"DoctrineTest\\\\InstantiatorPerformance\\\\\": \"tests\",\n            \"DoctrineTest\\\\InstantiatorTest\\\\\": \"tests\",\n            \"DoctrineTest\\\\InstantiatorTestAsset\\\\\": \"tests\"\n        }\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"dealerdirect/phpcodesniffer-composer-installer\": true\n        }\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpbench.json",
          "type": "blob",
          "size": 0.1123046875,
          "content": "{\n    \"runner.bootstrap\": \"vendor/autoload.php\",\n    \"runner.path\": \"tests/DoctrineTest/InstantiatorPerformance\"\n}\n"
        },
        {
          "name": "phpcs.xml.dist",
          "type": "blob",
          "size": 1.3271484375,
          "content": "<?xml version=\"1.0\"?>\n<ruleset>\n    <arg name=\"basepath\" value=\".\"/>\n    <arg name=\"extensions\" value=\"php\"/>\n    <arg name=\"parallel\" value=\"80\"/>\n    <arg name=\"cache\" value=\".phpcs-cache\"/>\n    <arg name=\"colors\"/>\n\n    <!-- Ignore warnings, show progress of the run and show sniff names -->\n    <arg value=\"nps\"/>\n\n    <config name=\"php_version\" value=\"80100\"/>\n\n    <file>src</file>\n    <file>tests</file>\n\n    <rule ref=\"Doctrine\">\n        <exclude name=\"SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly.ReferencedGeneralException\"/>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming\">\n        <exclude-pattern>tests/DoctrineTest/InstantiatorTestAsset/AbstractClassAsset.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.Classes.SuperfluousExceptionNaming\">\n        <exclude-pattern>src/Doctrine/Instantiator/Exception/UnexpectedValueException.php</exclude-pattern>\n        <exclude-pattern>src/Doctrine/Instantiator/Exception/InvalidArgumentException.php</exclude-pattern>\n    </rule>\n\n    <rule ref=\"SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming\">\n        <exclude-pattern>src/Doctrine/Instantiator/Exception/ExceptionInterface.php</exclude-pattern>\n        <exclude-pattern>src/Doctrine/Instantiator/InstantiatorInterface.php</exclude-pattern>\n    </rule>\n</ruleset>\n"
        },
        {
          "name": "phpmd.xml.dist",
          "type": "blob",
          "size": 1.0595703125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<ruleset\n    name=\"Instantiator rules\"\n    xmlns=\"http://pmd.sf.net/ruleset/1.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd\"\n    xsi:noNamespaceSchemaLocation=\"http://pmd.sf.net/ruleset_xml_schema.xsd\"\n>\n    <rule ref=\"rulesets/cleancode.xml\">\n        <!-- static access is used for caching purposes -->\n        <exclude name=\"StaticAccess\"/>\n    </rule>\n    <rule ref=\"rulesets/codesize.xml\"/>\n    <rule ref=\"rulesets/controversial.xml\"/>\n    <rule ref=\"rulesets/design.xml\"/>\n    <rule ref=\"rulesets/naming.xml\"/>\n    <rule ref=\"rulesets/unusedcode.xml\"/>\n    <rule\n        name=\"NPathComplexity\"\n        message=\"The {0} {1}() has an NPath complexity of {2}. The configured NPath complexity threshold is {3}.\"\n        class=\"PHP_PMD_Rule_Design_NpathComplexity\"\n    >\n        <properties>\n            <property name=\"minimum\" description=\"The npath reporting threshold\" value=\"10\"/>\n        </properties>\n    </rule>\n</ruleset>\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.7255859375,
          "content": "includes:\n    - vendor/phpstan/phpstan-phpunit/extension.neon\n    - vendor/phpstan/phpstan-phpunit/rules.neon\n\nparameters:\n    level: max\n    phpVersion: 80200\n    paths:\n        - src\n        - tests\n\n    ignoreErrors:\n        # PHPStan is unable to infer the return type of unserialize() in this case.\n        -\n            message: '#Method Doctrine\\\\Instantiator\\\\Instantiator\\:\\:buildFactory\\(\\) should return callable\\(\\): T but returns Closure\\(\\): mixed\\.#'\n            path: 'src/Doctrine/Instantiator/Instantiator.php'\n\n        # dynamic properties confuse static analysis\n        -\n            message: '#Access to an undefined property object::\\$foo\\.#'\n            path: 'tests/DoctrineTest/InstantiatorTest/InstantiatorTest.php'\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.6962890625,
          "content": "<?xml version=\"1.0\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n    bootstrap=\"./vendor/autoload.php\"\n    colors=\"true\"\n    stopOnFailure=\"false\"\n    processIsolation=\"false\"\n    backupGlobals=\"false\"\n    cacheDirectory=\".phpunit.cache\">\n    <coverage includeUncoveredFiles=\"true\"/>\n    <php>\n        <ini name=\"error_reporting\" value=\"-1\"/>\n    </php>\n\n    <testsuite name=\"Doctrine\\Instantiator tests\">\n        <directory>./tests/DoctrineTest/InstantiatorTest</directory>\n    </testsuite>\n    <source>\n        <include>\n            <directory suffix=\".php\">./src</directory>\n        </include>\n    </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}