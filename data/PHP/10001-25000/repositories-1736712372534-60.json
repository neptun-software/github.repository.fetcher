{
  "metadata": {
    "timestamp": 1736712372534,
    "page": 60,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mockery/mockery",
      "stars": 10662,
      "defaultBranch": "1.6.x",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.29296875,
          "content": "# https://editorconfig.org\n\nroot = true\n\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.{yml,yaml}]\nindent_style = space\nindent_size = 2\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.462890625,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n*.md text diff=markdown\n*.sh text eol=lf\n/.editorconfig export-ignore\n/.gitattributes export-ignore\n/.github export-ignore\n/.gitignore export-ignore\n/docker export-ignore\n/e2e-test.sh export-ignore\n/ecs.php export-ignore\n/Makefile export-ignore\n/phive.xml export-ignore\n/phpunit.xml.dist export-ignore\n/psalm-baseline.xml export-ignore\n/psalm.xml.dist export-ignore\n/tests export-ignore\n/tools export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1865234375,
          "content": "*.DS_store\n*.sublime-project\n*~\n.cache/\n.idea/*\n.phpdoc/\n.phpunit.result.cache\nbuild/\ncomposer.phar\ndocs/api\nlibrary/Hamcrest/*\npearfarm.spec\nphpDocumentor.phar*\nphpunit.xml\ntest.php\nvendor/\n"
        },
        {
          "name": ".phpstorm.meta.php",
          "type": "blob",
          "size": 0.341796875,
          "content": "<?php\n\nnamespace PHPSTORM_META;\n\noverride(\\Mockery::mock(0), map([\"\" => \"@\"]));\noverride(\\Mockery::spy(0), map([\"\" => \"@\"]));\noverride(\\Mockery::namedMock(0), map([\"\" => \"@\"]));\noverride(\\Mockery::instanceMock(0), map([\"\" => \"@\"]));\noverride(\\mock(0), map([\"\" => \"@\"]));\noverride(\\spy(0), map([\"\" => \"@\"]));\noverride(\\namedMock(0), map([\"\" => \"@\"]));"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.611328125,
          "content": "# Read the Docs configuration file for Sphinx projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the OS, Python version and other tools we might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n\n# Build documentation in the \"docs/\" directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n\n# Build documentation in additional formats such as PDF and ePub\nformats: all\n\n# Build requirements for our documentation\n# See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n  install:\n    - requirements: docs/requirements.txt\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 21.39453125,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [1.6.12] - 2024-05-15\n\n### Changed\n\n- [1420: Update `psalm-baseline.xml` ](https://github.com/mockery/mockery/pull/1420)\n- [1419: Update e2e-test.sh](https://github.com/mockery/mockery/pull/1419)\n- [1413: Upgrade `phar` tools and `phive.xml` configuration](https://github.com/mockery/mockery/pull/1413)\n\n### Fixed\n\n- [1415: Fix mocking anonymous classes](https://github.com/mockery/mockery/pull/1415)\n- [1411: Mocking final classes reports unresolvable type by PHPStan](https://github.com/mockery/mockery/issues/1411)\n- [1410: Fix PHP Doc Comments](https://github.com/mockery/mockery/pull/1410)\n\n### Security\n\n- [1417: Bump `Jinja2` from `3.1.3` to `3.1.4` fix CVE-2024-34064](https://github.com/mockery/mockery/pull/1417)\n- [1412: Bump `idna` from `3.6` to `3.7` fix CVE-2024-3651](https://github.com/mockery/mockery/pull/1412)\n\n## [1.6.11] - 2024-03-21\n\n### Fixed\n\n- [1407: Fix constants map generics doc comments](https://github.com/mockery/mockery/pull/1407)\n- [1406: Fix reserved words used to name a class, interface or trait](https://github.com/mockery/mockery/pull/1406)\n- [1403: Fix regression - partial construction with trait methods](https://github.com/mockery/mockery/pull/1403)\n- [1401: Improve `Mockery::mock()` parameter type compatibility with array typehints](https://github.com/mockery/mockery/pull/1401)\n\n## [1.6.10] - 2024-03-19\n\n### Added\n\n- [1398: [PHP 8.4] Fixes for implicit nullability deprecation](https://github.com/mockery/mockery/pull/1398)\n\n### Fixed\n\n- [1397: Fix mock method $args parameter type](https://github.com/mockery/mockery/pull/1397)\n- [1396: Fix `1.6.8` release](https://github.com/mockery/mockery/pull/1396)\n\n## [1.6.9] - 2024-03-12\n\n- [1394: Revert v1.6.8 release](https://github.com/mockery/mockery/pull/1394)\n\n## [1.6.8] - 2024-03-12\n\n- [1393: Changelog v1.6.8](https://github.com/mockery/mockery/pull/1393)\n- [1392: Refactor remaining codebase](https://github.com/mockery/mockery/pull/1392)\n- [1391: Update actions to use Node 20](https://github.com/mockery/mockery/pull/1391)\n- [1390: Update `ReadTheDocs` dependencies](https://github.com/mockery/mockery/pull/1390)\n- [1389: Refactor `library/Mockery/Matcher/*`](https://github.com/mockery/mockery/pull/1389)\n- [1388: Refactor `library/Mockery/Loader/*`](https://github.com/mockery/mockery/pull/1388)\n- [1387: Refactor `library/Mockery/CountValidator/*`](https://github.com/mockery/mockery/pull/1387)\n- [1386: Add PHPUnit 10+ attributes](https://github.com/mockery/mockery/pull/1386)\n- [1385: Update composer dependencies and clean up](https://github.com/mockery/mockery/pull/1385)\n- [1384: Update `psalm-baseline.xml`](https://github.com/mockery/mockery/pull/1384)\n- [1383: Refactor `library/helpers.php`](https://github.com/mockery/mockery/pull/1383)\n- [1382: Refactor `library/Mockery/VerificationExpectation.php`](https://github.com/mockery/mockery/pull/1382)\n- [1381: Refactor `library/Mockery/VerificationDirector.php`](https://github.com/mockery/mockery/pull/1381)\n- [1380: Refactor `library/Mockery/QuickDefinitionsConfiguration.php`](https://github.com/mockery/mockery/pull/1380)\n- [1379: Refactor `library/Mockery/Undefined.php`](https://github.com/mockery/mockery/pull/1379)\n- [1378: Refactor `library/Mockery/Reflector.php`](https://github.com/mockery/mockery/pull/1378)\n- [1377: Refactor `library/Mockery/ReceivedMethodCalls.php`](https://github.com/mockery/mockery/pull/1377)\n- [1376: Refactor `library/Mockery.php`](https://github.com/mockery/mockery/pull/1376)\n- [1375: Refactor `library/Mockery/MockInterface.php`](https://github.com/mockery/mockery/pull/1375)\n- [1374: Refactor `library/Mockery/MethodCall.php`](https://github.com/mockery/mockery/pull/1374)\n- [1373: Refactor `library/Mockery/LegacyMockInterface.php`](https://github.com/mockery/mockery/pull/1373)\n- [1372: Refactor `library/Mockery/Instantiator.php`](https://github.com/mockery/mockery/pull/1372)\n- [1371: Refactor `library/Mockery/HigherOrderMessage.php`](https://github.com/mockery/mockery/pull/1371)\n- [1370: Refactor `library/Mockery/ExpectsHigherOrderMessage.php`](https://github.com/mockery/mockery/pull/1370)\n- [1369: Refactor `library/Mockery/ExpectationInterface.php`](https://github.com/mockery/mockery/pull/1369)\n- [1368: Refactor `library/Mockery/ExpectationDirector.php`](https://github.com/mockery/mockery/pull/1368)\n- [1367: Refactor `library/Mockery/Expectation.php`](https://github.com/mockery/mockery/pull/1367)\n- [1366: Refactor `library/Mockery/Exception.php`](https://github.com/mockery/mockery/pull/1366)\n- [1365: Refactor `library/Mockery/Container.php`](https://github.com/mockery/mockery/pull/1365)\n- [1364: Refactor `library/Mockery/Configuration.php`](https://github.com/mockery/mockery/pull/1364)\n- [1363: Refactor `library/Mockery/CompositeExpectation.php`](https://github.com/mockery/mockery/pull/1363)\n- [1362: Refactor `library/Mockery/ClosureWrapper.php`](https://github.com/mockery/mockery/pull/1362)\n- [1361: Refactor `library/Mockery.php`](https://github.com/mockery/mockery/pull/1361)\n- [1360: Refactor Container](https://github.com/mockery/mockery/pull/1360)\n- [1355: Fix the namespace in the SubsetTest class](https://github.com/mockery/mockery/pull/1355)\n- [1354: Add array-like objects support to hasKey/hasValue matchers](https://github.com/mockery/mockery/pull/1354)\n\n## [1.6.7] - 2023-12-09\n\n### Added\n\n- [#1338: Support PHPUnit constraints as matchers](https://github.com/mockery/mockery/pull/1338)\n- [#1336: Add factory methods for `IsEqual` and `IsSame` matchers](https://github.com/mockery/mockery/pull/1336)\n\n### Fixed\n\n- [#1346: Fix test namespaces](https://github.com/mockery/mockery/pull/1346)\n- [#1343: Update documentation default theme and build version](https://github.com/mockery/mockery/pull/1343)\n- [#1329: Prevent `shouldNotReceive` from getting overridden by invocation count methods](https://github.com/mockery/mockery/pull/1329)\n\n### Changed\n\n- [#1351: Update psalm-baseline.xml](https://github.com/mockery/mockery/pull/1351)\n- [#1350: Changelog v1.6.7](https://github.com/mockery/mockery/pull/1350)\n- [#1349: Cleanup](https://github.com/mockery/mockery/pull/1349)\n- [#1348: Update makefile](https://github.com/mockery/mockery/pull/1348)\n- [#1347: Bump phars dependencies](https://github.com/mockery/mockery/pull/1347)\n- [#1344: Disabled travis-ci and sensiolabs webhooks](https://github.com/mockery/mockery/issues/1344)\n- [#1342: Add `.readthedocs.yml` configuration](https://github.com/mockery/mockery/pull/1342)\n- [#1340: docs: Remove misplaced semicolumn from code snippet](https://github.com/mockery/mockery/pull/1340)\n\n## 1.6.6 (2023-08-08)\n\n- [#1327: Changelog v1.6.6](https://github.com/mockery/mockery/pull/1327)\n- [#1325: Keep the file that caused an error for inspection](https://github.com/mockery/mockery/pull/1325)\n- [#1324: Fix Regression - Replace `+` Array Union Operator with `array_merge`](https://github.com/mockery/mockery/pull/1324)\n\n## 1.6.5 (2023-08-05)\n\n- [#1322: Changelog v1.6.5](https://github.com/mockery/mockery/pull/1322)\n- [#1321: Autoload Test Fixtures Based on PHP Runtime Version](https://github.com/mockery/mockery/pull/1321)\n- [#1320: Clean up mocks on destruct](https://github.com/mockery/mockery/pull/1320)\n- [#1318: Fix misspelling in docs](https://github.com/mockery/mockery/pull/1318)\n- [#1316: Fix compatibility issues with PHP 7.3](https://github.com/mockery/mockery/pull/1316)\n- [#1315: Fix PHP 7.3 issues](https://github.com/mockery/mockery/issues/1315)\n- [#1314: Add Security Policy](https://github.com/mockery/mockery/pull/1314)\n- [#1313: Type declaration for `iterable|object`.](https://github.com/mockery/mockery/pull/1313)\n- [#1312: Mock disjunctive normal form types](https://github.com/mockery/mockery/pull/1312)\n- [#1299: Test PHP `8.3` language features](https://github.com/mockery/mockery/pull/1299)\n\n## 1.6.4 (2023-07-19)\n\n- [#1308: Changelog v1.6.4](https://github.com/mockery/mockery/pull/1308)\n- [#1307: Revert `src` to `library` for `1.6.x`](https://github.com/mockery/mockery/pull/1307)\n\n## 1.6.3 (2023-07-18)\n\n- [#1304: Remove `extra.branch-alias` and update composer information](https://github.com/mockery/mockery/pull/1304)\n- [#1303: Update `.gitattributes`](https://github.com/mockery/mockery/pull/1303)\n- [#1302: Changelog v1.6.3](https://github.com/mockery/mockery/pull/1302)\n- [#1301: Fix mocking classes with `new` initializers in method and attribute params on PHP 8.1](https://github.com/mockery/mockery/pull/1301)\n- [#1298: Update default repository branch to latest release branch](https://github.com/mockery/mockery/issues/1298)\n- [#1297: Update `Makefile` for contributors](https://github.com/mockery/mockery/pull/1297)\n- [#1294: Correct return types of Mock for phpstan](https://github.com/mockery/mockery/pull/1294)\n- [#1290: Rename directory `library` to `src`](https://github.com/mockery/mockery/pull/1290)\n- [#1288: Update codecov workflow](https://github.com/mockery/mockery/pull/1288)\n- [#1287: Update psalm configuration and workflow](https://github.com/mockery/mockery/pull/1287)\n- [#1286: Update phpunit workflow](https://github.com/mockery/mockery/pull/1286)\n- [#1285: Enforce the minimum required PHP version](https://github.com/mockery/mockery/pull/1285)\n- [#1283: Update license and copyright information](https://github.com/mockery/mockery/pull/1283)\n- [#1282: Create `COPYRIGHT.md` file](https://github.com/mockery/mockery/pull/1282)\n- [#1279: Bump `vimeo/psalm` from `5.9.0` to `5.12.0`](https://github.com/mockery/mockery/pull/1279)\n\n## 1.6.2 (2023-06-07)\n\n- [#1276: Add `IsEqual` Argument Matcher](https://github.com/mockery/mockery/pull/1276)\n- [#1275: Add `IsSame` Argument Matcher](https://github.com/mockery/mockery/pull/1275)\n- [#1274: Update composer branch alias](https://github.com/mockery/mockery/pull/1274)\n- [#1271: Support PHP 8.2 `true` Literal Type](https://github.com/mockery/mockery/pull/1271)\n- [#1270: Support PHP 8.0 `false` Literal Type](https://github.com/mockery/mockery/pull/1270)\n\n## 1.6.1 (2023-06-05)\n\n- [#1267 Drops support for PHP <7.4](https://github.com/mockery/mockery/pull/1267)\n- [#1192 Updated changelog for version 1.5.1 to include changes from #1180](https://github.com/mockery/mockery/pull/1192)\n- [#1196 Update example in README.md](https://github.com/mockery/mockery/pull/1196)\n- [#1199 Fix function parameter default enum value](https://github.com/mockery/mockery/pull/1199)\n- [#1205 Deal with null type in PHP8.2](https://github.com/mockery/mockery/pull/1205)\n- [#1208 Import MockeryTestCase fully qualified class name](https://github.com/mockery/mockery/pull/1208)\n- [#1210 Add support for target class attributes](https://github.com/mockery/mockery/pull/1210)\n- [#1212 docs: Add missing comma](https://github.com/mockery/mockery/pull/1212)\n- [#1216 Fixes code generation for intersection types](https://github.com/mockery/mockery/pull/1216)\n- [#1217 Add MockeryExceptionInterface](https://github.com/mockery/mockery/pull/1217)\n- [#1218 tidy: avoids require](https://github.com/mockery/mockery/pull/1218)\n- [#1222 Add .editorconfig](https://github.com/mockery/mockery/pull/1222)\n- [#1225 Switch to PSR-4 autoload](https://github.com/mockery/mockery/pull/1225)\n- [#1226 Refactoring risky tests](https://github.com/mockery/mockery/pull/1226)\n- [#1230 Add vimeo/psalm and psalm/plugin-phpunit](https://github.com/mockery/mockery/pull/1230)\n- [#1232 Split PHPUnit TestSuites for PHP 8.2](https://github.com/mockery/mockery/pull/1232)\n- [#1233 Bump actions/checkout to v3](https://github.com/mockery/mockery/pull/1233)\n- [#1234 Bump nick-invision/retry to v2](https://github.com/mockery/mockery/pull/1234)\n- [#1235 Setup Codecov for code coverage](https://github.com/mockery/mockery/pull/1235)\n- [#1236 Add Psalm CI Check](https://github.com/mockery/mockery/pull/1236)\n- [#1237 Unignore composer.lock file](https://github.com/mockery/mockery/pull/1237)\n- [#1239 Prevent CI run duplication](https://github.com/mockery/mockery/pull/1239)\n- [#1241 Add PHPUnit workflow for PHP 8.3](https://github.com/mockery/mockery/pull/1241)\n- [#1244 Improve ClassAttributesPass for Dynamic Properties](https://github.com/mockery/mockery/pull/1244)\n- [#1245 Deprecate hamcrest/hamcrest-php package](https://github.com/mockery/mockery/pull/1245)\n- [#1246 Add BUG_REPORT.yml Issue template](https://github.com/mockery/mockery/pull/1246)\n- [#1250 Deprecate PHP <=8.0](https://github.com/mockery/mockery/issues/1250)\n- [#1253 Prevent array to string conversion when serialising a Subset matcher](https://github.com/mockery/mockery/issues/1253)\n\n## 1.6.0 (2023-06-05) [DELETED]\n\nThis tag was deleted due to a mistake with the composer.json PHP version\nconstraint, see [#1266](https://github.com/mockery/mockery/issues/1266)\n\n## 1.3.6 (2022-09-07)\n\n- PHP 8.2 | Fix \"Use of \"parent\" in callables is deprecated\" notice #1169\n\n## 1.5.1 (2022-09-07)\n\n- [PHP 8.2] Various tests: explicitly declare properties #1170\n- [PHP 8.2] Fix \"Use of \"parent\" in callables is deprecated\" notice #1169\n- [PHP 8.1] Support intersection types #1164\n- Handle final `__toString` methods #1162\n- Only count assertions on expectations which can fail a test #1180\n\n## 1.5.0 (2022-01-20)\n\n- Override default call count expectations via expects() #1146\n- Mock methods with static return types #1157\n- Mock methods with mixed return type #1156\n- Mock classes with new in initializers on PHP 8.1 #1160\n- Removes redundant PHPUnitConstraint #1158\n\n## 1.4.4 (2021-09-13)\n\n- Fixes auto-generated return values #1144\n- Adds support for tentative types #1130\n- Fixes for PHP 8.1 Support (#1130 and #1140)\n- Add method that allows defining a set of arguments the mock should yield #1133\n- Added option to configure default matchers for objects `\\Mockery::getConfiguration()->setDefaultMatcher($class, $matcherClass)` #1120\n\n## 1.3.5 (2021-09-13)\n\n- Fix auto-generated return values with union types #1143\n- Adds support for tentative types #1130\n- Fixes for PHP 8.1 Support (#1130 and #1140)\n- Add method that allows defining a set of arguments the mock should yield #1133\n- Added option to configure default matchers for objects `\\Mockery::getConfiguration()->setDefaultMatcher($class, $matcherClass)` #1120\n\n## 1.4.3 (2021-02-24)\n\n- Fixes calls to fetchMock before initialisation #1113\n- Allow shouldIgnoreMissing() to behave in a recursive fashion #1097\n- Custom object formatters #766 (Needs Docs)\n- Fix crash on a union type including null #1106\n\n## 1.3.4 (2021-02-24)\n\n- Fixes calls to fetchMock before initialisation #1113\n- Fix crash on a union type including null #1106\n\n## 1.4.2 (2020-08-11)\n\n- Fix array to string conversion in ConstantsPass (#1086)\n- Fixed nullable PHP 8.0 union types (#1088, #1089)\n- Fixed support for PHP 8.0 parent type (#1088, #1089)\n- Fixed PHP 8.0 mixed type support (#1088, #1089)\n- Fixed PHP 8.0 union return types (#1088, #1089)\n\n## 1.4.1 (2020-07-09)\n\n- Allow quick definitions to use 'at least once' expectation\n  `\\Mockery::getConfiguration()->getQuickDefinitions()->shouldBeCalledAtLeastOnce(true)` (#1056)\n- Added provisional support for PHP 8.0 (#1068, #1072,#1079)\n- Fix mocking methods with iterable return type without specifying a return value (#1075)\n\n## 1.3.3 (2020-08-11)\n\n- Fix array to string conversion in ConstantsPass (#1086)\n- Fixed nullable PHP 8.0 union types (#1088)\n- Fixed support for PHP 8.0 parent type (#1088)\n- Fixed PHP 8.0 mixed type support (#1088)\n- Fixed PHP 8.0 union return types (#1088)\n\n## 1.3.2 (2020-07-09)\n\n- Fix mocking with anonymous classes (#1039)\n- Fix andAnyOthers() to properly match earlier expectations (#1051)\n- Added provisional support for PHP 8.0 (#1068, #1072,#1079)\n- Fix mocking methods with iterable return type without specifying a return value (#1075)\n\n## 1.4.0 (2020-05-19)\n\n- Fix mocking with anonymous classes (#1039)\n- Fix andAnyOthers() to properly match earlier expectations (#1051)\n- Drops support for PHP < 7.3 and PHPUnit < 8 (#1059)\n\n## 1.3.1 (2019-12-26)\n\n- Revert improved exception debugging due to BC breaks (#1032)\n\n## 1.3.0 (2019-11-24)\n\n- Added capture `Mockery::capture` convenience matcher (#1020)\n- Added `andReturnArg` to echo back an argument passed to a an expectation (#992)\n- Improved exception debugging (#1000)\n- Fixed `andSet` to not reuse properties between mock objects (#1012)\n\n## 1.2.4 (2019-09-30)\n\n- Fix a bug introduced with previous release, for empty method definition lists (#1009)\n\n## 1.2.3 (2019-08-07)\n\n- Allow mocking classes that have allows and expects methods (#868)\n- Allow passing thru __call method in all mock types (experimental) (#969)\n- Add support for `!` to blacklist methods (#959)\n- Added `withSomeOfArgs` to partial match a list of args (#967)\n- Fix chained demeter calls with type hint (#956)\n\n## 1.2.2 (2019-02-13)\n\n- Fix a BC breaking change for PHP 5.6/PHPUnit 5.7.27 (#947)\n\n## 1.2.1 (2019-02-07)\n\n- Support for PHPUnit 8 (#942)\n- Allow mocking static methods called on instance (#938)\n\n## 1.2.0 (2018-10-02)\n\n- Starts counting default expectations towards count (#910)\n- Adds workaround for some HHVM return types (#909)\n- Adds PhpStorm metadata support for autocomplete etc (#904)\n- Further attempts to support multiple PHPUnit versions (#903)\n- Allows setting constructor expectations on instance mocks (#900)\n- Adds workaround for HHVM memoization decorator (#893)\n- Adds experimental support for callable spys (#712)\n\n## 1.1.0 (2018-05-08)\n\n- Allows use of string method names in allows and expects (#794)\n- Finalises allows and expects syntax in API (#799)\n- Search for handlers in a case instensitive way (#801)\n- Deprecate allowMockingMethodsUnnecessarily (#808)\n- Fix risky tests (#769)\n- Fix namespace in TestListener (#812)\n- Fixed conflicting mock names (#813)\n- Clean elses (#819)\n- Updated protected method mocking exception message (#826)\n- Map of constants to mock (#829)\n- Simplify foreach with `in_array` function (#830)\n- Typehinted return value on Expectation#verify. (#832)\n- Fix shouldNotHaveReceived with HigherOrderMessage (#842)\n- Deprecates shouldDeferMissing (#839)\n- Adds support for return type hints in Demeter chains (#848)\n- Adds shouldNotReceive to composite expectation (#847)\n- Fix internal error when using --static-backup (#845)\n- Adds `andAnyOtherArgs` as an optional argument matcher (#860)\n- Fixes namespace qualifying with namespaced named mocks (#872)\n- Added possibility to add Constructor-Expections on hard dependencies, read: Mockery::mock('overload:...') (#781)\n\n## 1.0.0 (2017-09-06)\n\n- Destructors (`__destruct`) are stubbed out where it makes sense\n- Allow passing a closure argument to `withArgs()` to validate multiple arguments at once.\n- `Mockery\\Adapter\\Phpunit\\TestListener` has been rewritten because it\n  incorrectly marked some tests as risky. It will no longer verify mock\n  expectations but instead check that tests do that themselves. PHPUnit 6 is\n  required if you want to use this fail safe.\n- Removes SPL Class Loader\n- Removed object recorder feature\n- Bumped minimum PHP version to 5.6\n- `andThrow` will now throw anything `\\Throwable`\n- Adds `allows` and `expects` syntax\n- Adds optional global helpers for `mock`, `namedMock` and `spy`\n- Adds ability to create objects using traits\n- `Mockery\\Matcher\\MustBe` was deprecated\n- Marked `Mockery\\MockInterface` as internal\n- Subset matcher matches recursively\n- BC BREAK - Spies return `null` by default from ignored (non-mocked) methods with nullable return type\n- Removed extracting getter methods of object instances\n- BC BREAK - Remove implicit regex matching when trying to match string arguments, introduce `\\Mockery::pattern()` when regex matching is needed\n- Fix Mockery not getting closed in cases of failing test cases\n- Fix Mockery not setting properties on overloaded instance mocks\n- BC BREAK - Fix Mockery not trying default expectations if there is any concrete expectation\n- BC BREAK - Mockery's PHPUnit integration will mark a test as risky if it\n  thinks one it's exceptions has been swallowed in PHPUnit > 5.7.6. Use `$e->dismiss()` to dismiss.\n\n## 0.9.4 (XXXX-XX-XX)\n\n- `shouldIgnoreMissing` will respect global `allowMockingNonExistentMethods`\n  config\n- Some support for variadic parameters\n- Hamcrest is now a required dependency\n- Instance mocks now respect `shouldIgnoreMissing` call on control instance\n- This will be the *last version to support PHP 5.3*\n- Added `Mockery\\Adapter\\Phpunit\\MockeryPHPUnitIntegration` trait\n- Added `makePartial` to `Mockery\\MockInterface` as it was missing\n\n## 0.9.3 (2014-12-22)\n\n- Added a basic spy implementation\n- Added `Mockery\\Adapter\\Phpunit\\MockeryTestCase` for more reliable PHPUnit\n  integration\n\n## 0.9.2 (2014-09-03)\n\n- Some workarounds for the serialisation problems created by changes to PHP in 5.5.13, 5.4.29,\n  5.6.\n- Demeter chains attempt to reuse doubles as they see fit, so for foo->bar and\n  foo->baz, we'll attempt to use the same foo\n\n## 0.9.1 (2014-05-02)\n\n- Allow specifying consecutive exceptions to be thrown with `andThrowExceptions`\n- Allow specifying methods which can be mocked when using\n  `Mockery\\Configuration::allowMockingNonExistentMethods(false)` with\n  `Mockery\\MockInterface::shouldAllowMockingMethod($methodName)`\n- Added andReturnSelf method: `$mock->shouldReceive(\"foo\")->andReturnSelf()`\n- `shouldIgnoreMissing` now takes an optional value that will be return instead\n  of null, e.g. `$mock->shouldIgnoreMissing($mock)`\n\n## 0.9.0 (2014-02-05)\n\n- Allow mocking classes with final __wakeup() method\n- Quick definitions are now always `byDefault`\n- Allow mocking of protected methods with `shouldAllowMockingProtectedMethods`\n- Support official Hamcrest package\n- Generator completely rewritten\n- Easily create named mocks with namedMock\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.1787109375,
          "content": "# Contributing\n\n\nWe'd love you to help out with mockery and no contribution is too small.\n\n\n## Reporting Bugs\n\nIssues can be reported on the [issue tracker](https://github.com/mockery/mockery/issues). \nPlease try and report any bugs with a minimal reproducible example, it will make things easier for other\ncontributors and your problems will hopefully be resolved quickly.\n\n\n## Requesting Features\n\nWe're always interested to hear about your ideas and you can request features by\ncreating a ticket in the [issue tracker](https://github.com/mockery/mockery/issues). We can't always guarantee\nsomeone will jump on it straight away, but putting it out there to see if anyone\nelse is interested is a good idea.\n\nLikewise, if a feature you would like is already listed in\nthe issue tracker, add a :+1: so that other contributors know it's a feature\nthat would help others.\n\n\n## Contributing code and documentation\n\nWe loosely follow the\n[PSR-1](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md)\nand\n[PSR-2](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md) coding standards,\nbut we'll probably merge any code that looks close enough.\n\n* Fork the [repository](https://github.com/mockery/mockery) on GitHub\n* Add the code for your feature or bug\n* Add some tests for your feature or bug\n* Optionally, but preferably, write some documentation \n* Optionally, update the CHANGELOG.md file with your feature or\n  [BC](http://en.wikipedia.org/wiki/Backward_compatibility) break\n* Send a [Pull Request](https://help.github.com/articles/creating-a-pull-request) to the\n  correct target branch (see below)\n\nIf you have a big change or would like to discuss something, create an issue in\nthe [issue tracker](https://github.com/mockery/mockery/issues) or jump in to \\#mockery on freenode\n\n\nAny code you contribute must be licensed under the [BSD 3-Clause License](http://opensource.org/licenses/BSD-3-Clause).\n\n## Target Branch\n\nMockery may have several active branches at any one time and roughly follows a\n[Git Branching Model](https://igor.io/2013/10/21/git-branching-model.html).\nGenerally, if you're developing a new feature, you want to be targeting the\nmaster branch, if it's a bug fix, you want to be targeting a release branch,\ne.g. 0.8.\n\n\n## Testing Mockery\n\nTo run the unit tests for Mockery, clone the git repository, download Composer using\nthe instructions at [http://getcomposer.org/download/](http://getcomposer.org/download/),\nthen install the dependencies with `php /path/to/composer.phar install`.\n\nThis will install the required dev dependencies and create the\nautoload files required by the unit tests. You may run the `vendor/bin/phpunit` command\nto run the unit tests. If everything goes to plan, there will be no failed tests!\n\n\n## Debugging Mockery\n\nMockery and its code generation can be difficult to debug. A good start is to\nuse the `RequireLoader`, which will dump the code generated by mockery to a file\nbefore requiring it, rather than using eval. This will help with stack traces,\nand you will be able to open the mock class in your editor.\n\n``` php\n\n// tests/bootstrap.php\n\nMockery::setLoader(new Mockery\\Loader\\RequireLoader(sys_get_temp_dir()));\n\n```\n"
        },
        {
          "name": "COPYRIGHT.md",
          "type": "blob",
          "size": 0.9296875,
          "content": "# Copyright\n\n- Copyright (c) [2009](https://github.com/mockery/mockery/commit/1d96f88142abe804ab9e893a5f07933f63e9bff9), [Pádraic Brady](https://github.com/padraic) <padraic.brady@gmail.com>\n- Copyright (c) [2011](https://github.com/mockery/mockery/commit/94dbb63aab37c659f63ea6e34acc6958928b0f59), [Robert Basic](https://github.com/robertbasic) <robertbasic.com@gmail.com>\n- Copyright (c) [2012](https://github.com/mockery/mockery/commit/64e3ad6960eb3202b5b91b91a4ef1cf6252f0fef), [Dave Marshall](https://github.com/davedevelopment) <dave.marshall@atstsolutions.co.uk>\n- Copyright (c) [2013](https://github.com/mockery/mockery/commit/270ddd0bd051251e36a5688c52fc2638a097b110), [Graham Campbell](https://github.com/GrahamCampbell) <hello@gjcampbell.co.uk>\n- Copyright (c) [2017](https://github.com/mockery/mockery/commit/ba28b84c416b95924886bbd64a6a2f68e863536a), [Nathanael Esayeas](https://github.com/ghostwriter) <nathanael.esayeas@protonmail.com>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.5166015625,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2009-2023, Pádraic Brady <padraic.brady@gmail.com>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.7744140625,
          "content": ".PHONY: tests\ntests: test-73 test-83\n\nvendor/composer/installed.json: composer.json\n\tcomposer install\n\n.PHONY: deps\ndeps: vendor/composer/installed.json\n\n.PHONY: test\ntest: deps\n\tphp vendor/bin/phpunit\n\n.PHONY: apidocs\napidocs: docs/api/index.html\n\nphpDocumentor.phar:\n\twget https://github.com/phpDocumentor/phpDocumentor/releases/download/v3.3.1/phpDocumentor.phar\n\twget https://github.com/phpDocumentor/phpDocumentor/releases/download/v3.3.1/phpDocumentor.phar.asc\n\nlibrary_files=$(shell find library -name '*.php')\ndocs/api/index.html: vendor/composer/installed.json $(library_files) phpDocumentor.phar\n\tdocker run -it --rm -v $$PWD:/opt/mockery -w /opt/mockery ghcr.io/ghostwriter/php:8.1 php phpDocumentor.phar run -d library -t docs/api\n\n.PHONY: test-all\ntest-all: test-84 test-83 test-82 test-81 test-80 test-74 test-73\n\n.PHONY: test-73\ntest-73: deps\n\tdocker run -it --rm -v $$PWD:/opt/mockery -w /opt/mockery ghcr.io/ghostwriter/php:7.3 php vendor/bin/phpunit\n\n.PHONY: test-74\ntest-74: deps\n\tdocker run -it --rm -v $$PWD:/opt/mockery -w /opt/mockery ghcr.io/ghostwriter/php:7.4 php vendor/bin/phpunit\n\n.PHONY: test-80\ntest-80: deps\n\tdocker run -it --rm -v $$PWD:/opt/mockery -w /opt/mockery ghcr.io/ghostwriter/php:8.0 php vendor/bin/phpunit\n\n.PHONY: test-81\ntest-81: deps\n\tdocker run -it --rm -v $$PWD:/opt/mockery -w /opt/mockery ghcr.io/ghostwriter/php:8.1 php vendor/bin/phpunit\n\n.PHONY: test-82\ntest-82: deps\n\tdocker run -it --rm -v $$PWD:/opt/mockery -w /opt/mockery ghcr.io/ghostwriter/php:8.2 php vendor/bin/phpunit\n\n.PHONY: test-83\ntest-83: deps\n\tdocker run -it --rm -v $$PWD:/opt/mockery -w /opt/mockery ghcr.io/ghostwriter/php:8.3 php vendor/bin/phpunit\n\n.PHONY: test-84\ntest-84: deps\n\tdocker run -it --rm -v $$PWD:/opt/mockery -w /opt/mockery ghcr.io/ghostwriter/php:8.4-rc php vendor/bin/phpunit\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.333984375,
          "content": "Mockery\n=======\n\n[![Build Status](https://github.com/mockery/mockery/actions/workflows/tests.yml/badge.svg)](https://github.com/mockery/mockery/actions)\n[![Supported PHP Version](https://badgen.net/packagist/php/mockery/mockery?color=8892bf)](https://www.php.net/supported-versions)\n[![Code Coverage](https://codecov.io/gh/mockery/mockery/branch/1.6.x/graph/badge.svg?token=oxHwVM56bT)](https://codecov.io/gh/mockery/mockery)\n[![Type Coverage](https://shepherd.dev/github/mockery/mockery/coverage.svg)](https://shepherd.dev/github/mockery/mockery)\n[![Latest Stable Version](https://poser.pugx.org/mockery/mockery/v/stable.svg)](https://packagist.org/packages/mockery/mockery)\n[![Total Downloads](https://poser.pugx.org/mockery/mockery/downloads.svg)](https://packagist.org/packages/mockery/mockery)\n\nMockery is a simple yet flexible PHP mock object framework for use in unit testing\nwith PHPUnit, PHPSpec or any other testing framework. Its core goal is to offer a\ntest double framework with a succinct API capable of clearly defining all possible\nobject operations and interactions using a human readable Domain Specific Language\n(DSL). Designed as a drop in alternative to PHPUnit's phpunit-mock-objects library,\nMockery is easy to integrate with PHPUnit and can operate alongside\nphpunit-mock-objects without the World ending.\n\nMockery is released under a New BSD License.\n\n## Installation\n\nTo install Mockery, run the command below and you will get the latest\nversion\n\n```sh\ncomposer require --dev mockery/mockery\n```\n\n## Documentation\n\nIn older versions, this README file was the documentation for Mockery. Over time\nwe have improved this, and have created an extensive documentation for you. Please\nuse this README file as a starting point for Mockery, but do read the documentation\nto learn how to use Mockery.\n\nThe current version can be seen at [docs.mockery.io](http://docs.mockery.io).\n\n## PHPUnit Integration\n\nMockery ships with some helpers if you are using PHPUnit. You can extend the\n[`Mockery\\Adapter\\Phpunit\\MockeryTestCase`](library/Mockery/Adapter/Phpunit/MockeryTestCase.php)\nclass instead of `PHPUnit\\Framework\\TestCase`, or if you are already using a\ncustom base class for your tests, take a look at the traits available in the\n[`Mockery\\Adapter\\Phpunit`](library/Mockery/Adapter/Phpunit) namespace.\n\n## Test Doubles\n\nTest doubles (often called mocks) simulate the behaviour of real objects. They are\ncommonly utilised to offer test isolation, to stand in for objects which do not\nyet exist, or to allow for the exploratory design of class APIs without\nrequiring actual implementation up front.\n\nThe benefits of a test double framework are to allow for the flexible generation\nand configuration of test doubles. They allow the setting of expected method calls\nand/or return values using a flexible API which is capable of capturing every\npossible real object behaviour in way that is stated as close as possible to a\nnatural language description. Use the `Mockery::mock` method to create a test\ndouble.\n\n``` php\n$double = Mockery::mock();\n```\n\nIf you need Mockery to create a test double to satisfy a particular type hint,\nyou can pass the type to the `mock` method.\n\n``` php\nclass Book {}\n\ninterface BookRepository {\n    function find($id): Book;\n    function findAll(): array;\n    function add(Book $book): void;\n}\n\n$double = Mockery::mock(BookRepository::class);\n```\n\nA detailed explanation of creating and working with test doubles is given in the\ndocumentation, [Creating test doubles](http://docs.mockery.io/en/latest/reference/creating_test_doubles.html)\nsection.\n\n## Method Stubs 🎫\n\nA method stub is a mechanism for having your test double return canned responses\nto certain method calls. With stubs, you don't care how many times, if at all,\nthe method is called. Stubs are used to provide indirect input to the system\nunder test.\n\n``` php\n$double->allows()->find(123)->andReturns(new Book());\n\n$book = $double->find(123);\n```\n\nIf you have used Mockery before, you might see something new in the example\nabove &mdash; we created a method stub using `allows`, instead of the \"old\"\n`shouldReceive` syntax. This is a new feature of Mockery v1, but fear not,\nthe trusty ol' `shouldReceive` is still here.\n\nFor new users of Mockery, the above example can also be written as:\n\n``` php\n$double->shouldReceive('find')->with(123)->andReturn(new Book());\n$book = $double->find(123);\n```\n\nIf your stub doesn't require specific arguments, you can also use this shortcut\nfor setting up multiple calls at once:\n\n``` php\n$double->allows([\n    \"findAll\" => [new Book(), new Book()],\n]);\n```\n\nor\n\n``` php\n$double->shouldReceive('findAll')\n    ->andReturn([new Book(), new Book()]);\n```\n\nYou can also use this shortcut, which creates a double and sets up some stubs in\none call:\n\n``` php\n$double = Mockery::mock(BookRepository::class, [\n    \"findAll\" => [new Book(), new Book()],\n]);\n```\n\n## Method Call Expectations 📲\n\nA Method call expectation is a mechanism to allow you to verify that a\nparticular method has been called. You can specify the parameters and you can\nalso specify how many times you expect it to be called. Method call expectations\nare used to verify indirect output of the system under test.\n\n``` php\n$book = new Book();\n\n$double = Mockery::mock(BookRepository::class);\n$double->expects()->add($book);\n```\n\nDuring the test, Mockery accept calls to the `add` method as prescribed.\nAfter you have finished exercising the system under test, you need to\ntell Mockery to check that the method was called as expected, using the\n`Mockery::close` method. One way to do that is to add it to your `tearDown`\nmethod in PHPUnit.\n\n``` php\n\npublic function tearDown()\n{\n    Mockery::close();\n}\n```\n\nThe `expects()` method automatically sets up an expectation that the method call\n(and matching parameters) is called **once and once only**. You can choose to change\nthis if you are expecting more calls.\n\n``` php\n$double->expects()->add($book)->twice();\n```\n\nIf you have used Mockery before, you might see something new in the example\nabove &mdash; we created a method expectation using `expects`, instead of the \"old\"\n`shouldReceive` syntax. This is a new feature of Mockery v1, but same as with\n`allows` in the previous section, it can be written in the \"old\" style.\n\nFor new users of Mockery, the above example can also be written as:\n\n``` php\n$double->shouldReceive('find')\n    ->with(123)\n    ->once()\n    ->andReturn(new Book());\n$book = $double->find(123);\n```\n\nA detailed explanation of declaring expectations on method calls, please\nread the documentation, the [Expectation declarations](http://docs.mockery.io/en/latest/reference/expectations.html)\nsection. After that, you can also learn about the new `allows` and `expects` methods\nin the [Alternative shouldReceive syntax](http://docs.mockery.io/en/latest/reference/alternative_should_receive_syntax.html)\nsection.\n\nIt is worth mentioning that one way of setting up expectations is no better or worse\nthan the other. Under the hood, `allows` and `expects` are doing the same thing as\n`shouldReceive`, at times in \"less words\", and as such it comes to a personal preference\nof the programmer which way to use.\n\n## Test Spies 🕵️\n\nBy default, all test doubles created with the `Mockery::mock` method will only\naccept calls that they have been configured to `allow` or `expect` (or in other words,\ncalls that they `shouldReceive`). Sometimes we don't necessarily care about all of the\ncalls that are going to be made to an object. To facilitate this, we can tell Mockery\nto ignore any calls it has not been told to expect or allow. To do so, we can tell a\ntest double `shouldIgnoreMissing`, or we can create the double using the `Mocker::spy`\nshortcut.\n\n``` php\n// $double = Mockery::mock()->shouldIgnoreMissing();\n$double = Mockery::spy();\n\n$double->foo(); // null\n$double->bar(); // null\n```\n\nFurther to this, sometimes we want to have the object accept any call during the test execution\nand then verify the calls afterwards. For these purposes, we need our test\ndouble to act as a Spy. All mockery test doubles record the calls that are made\nto them for verification afterwards by default:\n\n``` php\n$double->baz(123);\n\n$double->shouldHaveReceived()->baz(123); // null\n$double->shouldHaveReceived()->baz(12345); // Uncaught Exception Mockery\\Exception\\InvalidCountException...\n```\n\nPlease refer to the [Spies](http://docs.mockery.io/en/latest/reference/spies.html) section\nof the documentation to learn more about the spies.\n\n## Utilities 🔌\n\n### Global Helpers\n\nMockery ships with a handful of global helper methods, you just need to ask\nMockery to declare them.\n\n``` php\nMockery::globalHelpers();\n\n$mock = mock(Some::class);\n$spy = spy(Some::class);\n\n$spy->shouldHaveReceived()\n    ->foo(anyArgs());\n```\n\nAll of the global helpers are wrapped in a `!function_exists` call to avoid\nconflicts. So if you already have a global function called `spy`, Mockery will\nsilently skip the declaring its own `spy` function.\n\n### Testing Traits\n\nAs Mockery ships with code generation capabilities, it was trivial to add\nfunctionality allowing users to create objects on the fly that use particular\ntraits. Any abstract methods defined by the trait will be created and can have\nexpectations or stubs configured like normal Test Doubles.\n\n``` php\ntrait Foo {\n    function foo() {\n        return $this->doFoo();\n    }\n\n    abstract function doFoo();\n}\n\n$double = Mockery::mock(Foo::class);\n$double->allows()->doFoo()->andReturns(123);\n$double->foo(); // int(123)\n```\n\n## Versioning\n\nThe Mockery team attempts to adhere to [Semantic Versioning](http://semver.org),\nhowever, some of Mockery's internals are considered private and will be open to\nchange at any time. Just because a class isn't final, or a method isn't marked\nprivate, does not mean it constitutes part of the API we guarantee under the\nversioning scheme.\n\n### Alternative Runtimes\n\nMockery 1.3 was the last version to support HHVM 3 and PHP 5. There is no support for HHVM 4+.\n\n## A new home for Mockery\n\n⚠️️ Update your remotes! Mockery has transferred to a new location. While it was once\nat `padraic/mockery`, it is now at `mockery/mockery`. While your\nexisting repositories will redirect transparently for any operations, take some\ntime to transition to the new URL.\n```sh\n$ git remote set-url upstream https://github.com/mockery/mockery.git\n```\nReplace `upstream` with the name of the remote you use locally; `upstream` is commonly\nused but you may be using something else. Run `git remote -v` to see what you're actually\nusing.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.3984375,
          "content": "# Security Policy\n\n## Supported Versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| `2.0.x`   | `yes` |\n| `1.6.x`   | `yes` |\n| `1.5.x`   | `yes` |\n| `<1.5.x` | `no` |\n\n## Reporting a Vulnerability\n\nTo report a security vulnerability, please [`Open a draft security advisory`](https://github.com/mockery/mockery/security/advisories/new) so we can coordinate the fix and disclosure.\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 3.75,
          "content": "{\n    \"name\": \"mockery/mockery\",\n    \"description\": \"Mockery is a simple yet flexible PHP mock object framework\",\n    \"license\": \"BSD-3-Clause\",\n    \"type\": \"library\",\n    \"keywords\": [\n        \"bdd\",\n        \"library\",\n        \"mock\",\n        \"mock objects\",\n        \"mockery\",\n        \"stub\",\n        \"tdd\",\n        \"test\",\n        \"test double\",\n        \"testing\"\n    ],\n    \"authors\": [\n        {\n            \"name\": \"Pádraic Brady\",\n            \"email\": \"padraic.brady@gmail.com\",\n            \"homepage\": \"https://github.com/padraic\",\n            \"role\": \"Author\"\n        },\n        {\n            \"name\": \"Dave Marshall\",\n            \"email\": \"dave.marshall@atstsolutions.co.uk\",\n            \"homepage\": \"https://davedevelopment.co.uk\",\n            \"role\": \"Developer\"\n        },\n        {\n            \"name\": \"Nathanael Esayeas\",\n            \"email\": \"nathanael.esayeas@protonmail.com\",\n            \"homepage\": \"https://github.com/ghostwriter\",\n            \"role\": \"Lead Developer\"\n        }\n    ],\n    \"homepage\": \"https://github.com/mockery/mockery\",\n    \"support\": {\n        \"issues\": \"https://github.com/mockery/mockery/issues\",\n        \"source\": \"https://github.com/mockery/mockery\",\n        \"docs\": \"https://docs.mockery.io/\",\n        \"rss\": \"https://github.com/mockery/mockery/releases.atom\",\n        \"security\": \"https://github.com/mockery/mockery/security/advisories\"\n    },\n    \"require\": {\n        \"php\": \">=7.3\",\n        \"lib-pcre\": \">=7.0\",\n        \"hamcrest/hamcrest-php\": \"^2.0.1\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^8.5.38 || ^9.6.21\",\n        \"symplify/easy-coding-standard\": \"^12.3.5\"\n    },\n    \"conflict\": {\n        \"phpunit/phpunit\": \"<8.0\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Mockery\\\\\": \"library/Mockery\"\n        },\n        \"files\": [\n            \"library/helpers.php\",\n            \"library/Mockery.php\"\n        ]\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests\"\n        },\n        \"exclude-from-classmap\": [\n            \"tests/Fixture\"\n        ],\n        \"files\": [\n            \"tests/Fixture/autoload.php\",\n            \"vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest.php\"\n        ]\n    },\n    \"config\": {\n        \"optimize-autoloader\": true,\n        \"platform\": {\n            \"php\": \"7.3.999\"\n        },\n        \"preferred-install\": \"dist\",\n        \"sort-packages\": true\n    },\n    \"scripts\": {\n        \"check\": [\n            \"@composer validate\",\n            \"@psalm:update\",\n            \"@test\"\n        ],\n        \"docs\": \"vendor/bin/phpdoc -d library -t docs/api\",\n        \"ecs\": [\n            \"@ecs:fix\",\n            \"@ecs:check\"\n        ],\n        \"ecs:check\": \"ecs check --clear-cache || true\",\n        \"ecs:fix\": \"ecs check --clear-cache --fix\",\n        \"phive\": [\n            \"tools/phive update --force-accept-unsigned\",\n            \"tools/phive purge\"\n        ],\n        \"phpunit\": \"vendor/bin/phpunit --do-not-cache-result --colors=always\",\n        \"phpunit:coverage\": \"@phpunit --coverage-clover=coverage.xml\",\n        \"phpunit:migrate\": \"@phpunit --migrate\",\n        \"psalm\": \"tools/psalm --no-cache\",\n        \"psalm:alter\": \"tools/psalm --no-cache --alter --allow-backwards-incompatible-changes=false --safe-types\",\n        \"psalm:baseline\": \"@psalm --no-diff --set-baseline=psalm-baseline.xml\",\n        \"psalm:dry-run\": \"@psalm:alter --issues=all --dry-run\",\n        \"psalm:fix\": \"@psalm:alter --issues=UnnecessaryVarAnnotation\",\n        \"psalm:security\": \"@psalm --no-diff --taint-analysis\",\n        \"psalm:shepherd\": \"@psalm --no-diff --shepherd --stats --output-format=github\",\n        \"psalm:update\": \"@psalm --no-diff --update-baseline=psalm-baseline.xml\",\n        \"test\": [\n            \"@phpunit --stop-on-defect\",\n            \"@psalm\",\n            \"@psalm:security\",\n            \"@psalm:dry-run\"\n        ]\n    }\n}\n"
        },
        {
          "name": "composer.lock",
          "type": "blob",
          "size": 66.1123046875,
          "content": "{\n    \"_readme\": [\n        \"This file locks the dependencies of your project to a known state\",\n        \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies\",\n        \"This file is @generated automatically\"\n    ],\n    \"content-hash\": \"ce6e3fb9680692a29a2d6d118099b15c\",\n    \"packages\": [\n        {\n            \"name\": \"hamcrest/hamcrest-php\",\n            \"version\": \"v2.0.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/hamcrest/hamcrest-php.git\",\n                \"reference\": \"8c3d0a3f6af734494ad8f6fbbee0ba92422859f3\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/hamcrest/hamcrest-php/zipball/8c3d0a3f6af734494ad8f6fbbee0ba92422859f3\",\n                \"reference\": \"8c3d0a3f6af734494ad8f6fbbee0ba92422859f3\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^5.3|^7.0|^8.0\"\n            },\n            \"replace\": {\n                \"cordoval/hamcrest-php\": \"*\",\n                \"davedevelopment/hamcrest-php\": \"*\",\n                \"kodova/hamcrest-php\": \"*\"\n            },\n            \"require-dev\": {\n                \"phpunit/php-file-iterator\": \"^1.4 || ^2.0\",\n                \"phpunit/phpunit\": \"^4.8.36 || ^5.7 || ^6.5 || ^7.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.1-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"hamcrest\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"description\": \"This is the PHP port of Hamcrest Matchers\",\n            \"keywords\": [\n                \"test\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/hamcrest/hamcrest-php/issues\",\n                \"source\": \"https://github.com/hamcrest/hamcrest-php/tree/v2.0.1\"\n            },\n            \"time\": \"2020-07-09T08:09:16+00:00\"\n        }\n    ],\n    \"packages-dev\": [\n        {\n            \"name\": \"doctrine/instantiator\",\n            \"version\": \"1.5.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/doctrine/instantiator.git\",\n                \"reference\": \"0a0fa9780f5d4e507415a065172d26a98d02047b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/doctrine/instantiator/zipball/0a0fa9780f5d4e507415a065172d26a98d02047b\",\n                \"reference\": \"0a0fa9780f5d4e507415a065172d26a98d02047b\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.1 || ^8.0\"\n            },\n            \"require-dev\": {\n                \"doctrine/coding-standard\": \"^9 || ^11\",\n                \"ext-pdo\": \"*\",\n                \"ext-phar\": \"*\",\n                \"phpbench/phpbench\": \"^0.16 || ^1\",\n                \"phpstan/phpstan\": \"^1.4\",\n                \"phpstan/phpstan-phpunit\": \"^1\",\n                \"phpunit/phpunit\": \"^7.5 || ^8.5 || ^9.5\",\n                \"vimeo/psalm\": \"^4.30 || ^5.4\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"psr-4\": {\n                    \"Doctrine\\\\Instantiator\\\\\": \"src/Doctrine/Instantiator/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Marco Pivetta\",\n                    \"email\": \"ocramius@gmail.com\",\n                    \"homepage\": \"https://ocramius.github.io/\"\n                }\n            ],\n            \"description\": \"A small, lightweight utility to instantiate objects in PHP without invoking their constructors\",\n            \"homepage\": \"https://www.doctrine-project.org/projects/instantiator.html\",\n            \"keywords\": [\n                \"constructor\",\n                \"instantiate\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/doctrine/instantiator/issues\",\n                \"source\": \"https://github.com/doctrine/instantiator/tree/1.5.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://www.doctrine-project.org/sponsorship.html\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://www.patreon.com/phpdoctrine\",\n                    \"type\": \"patreon\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/doctrine%2Finstantiator\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2022-12-30T00:15:36+00:00\"\n        },\n        {\n            \"name\": \"myclabs/deep-copy\",\n            \"version\": \"1.12.0\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/myclabs/DeepCopy.git\",\n                \"reference\": \"3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/myclabs/DeepCopy/zipball/3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c\",\n                \"reference\": \"3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.1 || ^8.0\"\n            },\n            \"conflict\": {\n                \"doctrine/collections\": \"<1.6.8\",\n                \"doctrine/common\": \"<2.13.3 || >=3 <3.2.2\"\n            },\n            \"require-dev\": {\n                \"doctrine/collections\": \"^1.6.8\",\n                \"doctrine/common\": \"^2.13.3 || ^3.2.2\",\n                \"phpspec/prophecy\": \"^1.10\",\n                \"phpunit/phpunit\": \"^7.5.20 || ^8.5.23 || ^9.5.13\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"src/DeepCopy/deep_copy.php\"\n                ],\n                \"psr-4\": {\n                    \"DeepCopy\\\\\": \"src/DeepCopy/\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"Create deep copies (clones) of your objects\",\n            \"keywords\": [\n                \"clone\",\n                \"copy\",\n                \"duplicate\",\n                \"object\",\n                \"object graph\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/myclabs/DeepCopy/issues\",\n                \"source\": \"https://github.com/myclabs/DeepCopy/tree/1.12.0\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/myclabs/deep-copy\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-06-12T14:39:25+00:00\"\n        },\n        {\n            \"name\": \"nikic/php-parser\",\n            \"version\": \"v4.19.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/nikic/PHP-Parser.git\",\n                \"reference\": \"715f4d25e225bc47b293a8b997fe6ce99bf987d2\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/nikic/PHP-Parser/zipball/715f4d25e225bc47b293a8b997fe6ce99bf987d2\",\n                \"reference\": \"715f4d25e225bc47b293a8b997fe6ce99bf987d2\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-tokenizer\": \"*\",\n                \"php\": \">=7.1\"\n            },\n            \"require-dev\": {\n                \"ircmaxell/php-yacc\": \"^0.0.7\",\n                \"phpunit/phpunit\": \"^7.0 || ^8.0 || ^9.0\"\n            },\n            \"bin\": [\n                \"bin/php-parse\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.9-dev\"\n                }\n            },\n            \"autoload\": {\n                \"psr-4\": {\n                    \"PhpParser\\\\\": \"lib/PhpParser\"\n                }\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Nikita Popov\"\n                }\n            ],\n            \"description\": \"A PHP parser written in PHP\",\n            \"keywords\": [\n                \"parser\",\n                \"php\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/nikic/PHP-Parser/issues\",\n                \"source\": \"https://github.com/nikic/PHP-Parser/tree/v4.19.4\"\n            },\n            \"time\": \"2024-09-29T15:01:53+00:00\"\n        },\n        {\n            \"name\": \"phar-io/manifest\",\n            \"version\": \"2.0.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phar-io/manifest.git\",\n                \"reference\": \"54750ef60c58e43759730615a392c31c80e23176\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phar-io/manifest/zipball/54750ef60c58e43759730615a392c31c80e23176\",\n                \"reference\": \"54750ef60c58e43759730615a392c31c80e23176\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-libxml\": \"*\",\n                \"ext-phar\": \"*\",\n                \"ext-xmlwriter\": \"*\",\n                \"phar-io/version\": \"^3.0.1\",\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Arne Blankerts\",\n                    \"email\": \"arne@blankerts.de\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Sebastian Heuer\",\n                    \"email\": \"sebastian@phpeople.de\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Component for reading phar.io manifest information from a PHP Archive (PHAR)\",\n            \"support\": {\n                \"issues\": \"https://github.com/phar-io/manifest/issues\",\n                \"source\": \"https://github.com/phar-io/manifest/tree/2.0.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/theseer\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-03T12:33:53+00:00\"\n        },\n        {\n            \"name\": \"phar-io/version\",\n            \"version\": \"3.2.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/phar-io/version.git\",\n                \"reference\": \"4f7fd7836c6f332bb2933569e566a0d6c4cbed74\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/phar-io/version/zipball/4f7fd7836c6f332bb2933569e566a0d6c4cbed74\",\n                \"reference\": \"4f7fd7836c6f332bb2933569e566a0d6c4cbed74\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Arne Blankerts\",\n                    \"email\": \"arne@blankerts.de\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Sebastian Heuer\",\n                    \"email\": \"sebastian@phpeople.de\",\n                    \"role\": \"Developer\"\n                },\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"Library for handling version information and constraints\",\n            \"support\": {\n                \"issues\": \"https://github.com/phar-io/version/issues\",\n                \"source\": \"https://github.com/phar-io/version/tree/3.2.1\"\n            },\n            \"time\": \"2022-02-21T01:04:05+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-code-coverage\",\n            \"version\": \"9.2.32\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-code-coverage.git\",\n                \"reference\": \"85402a822d1ecf1db1096959413d35e1c37cf1a5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/85402a822d1ecf1db1096959413d35e1c37cf1a5\",\n                \"reference\": \"85402a822d1ecf1db1096959413d35e1c37cf1a5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-libxml\": \"*\",\n                \"ext-xmlwriter\": \"*\",\n                \"nikic/php-parser\": \"^4.19.1 || ^5.1.0\",\n                \"php\": \">=7.3\",\n                \"phpunit/php-file-iterator\": \"^3.0.6\",\n                \"phpunit/php-text-template\": \"^2.0.4\",\n                \"sebastian/code-unit-reverse-lookup\": \"^2.0.3\",\n                \"sebastian/complexity\": \"^2.0.3\",\n                \"sebastian/environment\": \"^5.1.5\",\n                \"sebastian/lines-of-code\": \"^1.0.4\",\n                \"sebastian/version\": \"^3.0.2\",\n                \"theseer/tokenizer\": \"^1.2.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.6\"\n            },\n            \"suggest\": {\n                \"ext-pcov\": \"PHP extension that provides line coverage\",\n                \"ext-xdebug\": \"PHP extension that provides line coverage as well as branch and path coverage\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"9.2.x-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library that provides collection, processing, and rendering functionality for PHP code coverage information.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-code-coverage\",\n            \"keywords\": [\n                \"coverage\",\n                \"testing\",\n                \"xunit\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/php-code-coverage/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/php-code-coverage/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/php-code-coverage/tree/9.2.32\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-08-22T04:23:01+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-file-iterator\",\n            \"version\": \"3.0.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-file-iterator.git\",\n                \"reference\": \"cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf\",\n                \"reference\": \"cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"FilterIterator implementation that filters files based on a list of suffixes.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-file-iterator/\",\n            \"keywords\": [\n                \"filesystem\",\n                \"iterator\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/php-file-iterator/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/php-file-iterator/tree/3.0.6\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2021-12-02T12:48:52+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-invoker\",\n            \"version\": \"3.1.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-invoker.git\",\n                \"reference\": \"5a10147d0aaf65b58940a0b72f71c9ac0423cc67\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-invoker/zipball/5a10147d0aaf65b58940a0b72f71c9ac0423cc67\",\n                \"reference\": \"5a10147d0aaf65b58940a0b72f71c9ac0423cc67\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"ext-pcntl\": \"*\",\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"suggest\": {\n                \"ext-pcntl\": \"*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.1-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Invoke callables with a timeout\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-invoker/\",\n            \"keywords\": [\n                \"process\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/php-invoker/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/php-invoker/tree/3.1.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2020-09-28T05:58:55+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-text-template\",\n            \"version\": \"2.0.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-text-template.git\",\n                \"reference\": \"5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28\",\n                \"reference\": \"5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Simple template engine.\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-text-template/\",\n            \"keywords\": [\n                \"template\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/php-text-template/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/php-text-template/tree/2.0.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2020-10-26T05:33:50+00:00\"\n        },\n        {\n            \"name\": \"phpunit/php-timer\",\n            \"version\": \"5.0.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/php-timer.git\",\n                \"reference\": \"5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/php-timer/zipball/5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2\",\n                \"reference\": \"5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"5.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Utility class for timing\",\n            \"homepage\": \"https://github.com/sebastianbergmann/php-timer/\",\n            \"keywords\": [\n                \"timer\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/php-timer/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/php-timer/tree/5.0.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2020-10-26T13:16:10+00:00\"\n        },\n        {\n            \"name\": \"phpunit/phpunit\",\n            \"version\": \"9.6.21\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/phpunit.git\",\n                \"reference\": \"de6abf3b6f8dd955fac3caad3af7a9504e8c2ffa\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/phpunit/zipball/de6abf3b6f8dd955fac3caad3af7a9504e8c2ffa\",\n                \"reference\": \"de6abf3b6f8dd955fac3caad3af7a9504e8c2ffa\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"doctrine/instantiator\": \"^1.5.0 || ^2\",\n                \"ext-dom\": \"*\",\n                \"ext-json\": \"*\",\n                \"ext-libxml\": \"*\",\n                \"ext-mbstring\": \"*\",\n                \"ext-xml\": \"*\",\n                \"ext-xmlwriter\": \"*\",\n                \"myclabs/deep-copy\": \"^1.12.0\",\n                \"phar-io/manifest\": \"^2.0.4\",\n                \"phar-io/version\": \"^3.2.1\",\n                \"php\": \">=7.3\",\n                \"phpunit/php-code-coverage\": \"^9.2.32\",\n                \"phpunit/php-file-iterator\": \"^3.0.6\",\n                \"phpunit/php-invoker\": \"^3.1.1\",\n                \"phpunit/php-text-template\": \"^2.0.4\",\n                \"phpunit/php-timer\": \"^5.0.3\",\n                \"sebastian/cli-parser\": \"^1.0.2\",\n                \"sebastian/code-unit\": \"^1.0.8\",\n                \"sebastian/comparator\": \"^4.0.8\",\n                \"sebastian/diff\": \"^4.0.6\",\n                \"sebastian/environment\": \"^5.1.5\",\n                \"sebastian/exporter\": \"^4.0.6\",\n                \"sebastian/global-state\": \"^5.0.7\",\n                \"sebastian/object-enumerator\": \"^4.0.4\",\n                \"sebastian/resource-operations\": \"^3.0.4\",\n                \"sebastian/type\": \"^3.2.1\",\n                \"sebastian/version\": \"^3.0.2\"\n            },\n            \"suggest\": {\n                \"ext-soap\": \"To be able to generate mocks based on WSDL files\",\n                \"ext-xdebug\": \"PHP extension that provides line coverage as well as branch and path coverage\"\n            },\n            \"bin\": [\n                \"phpunit\"\n            ],\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"9.6-dev\"\n                }\n            },\n            \"autoload\": {\n                \"files\": [\n                    \"src/Framework/Assert/Functions.php\"\n                ],\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"The PHP Unit Testing framework.\",\n            \"homepage\": \"https://phpunit.de/\",\n            \"keywords\": [\n                \"phpunit\",\n                \"testing\",\n                \"xunit\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/phpunit/issues\",\n                \"security\": \"https://github.com/sebastianbergmann/phpunit/security/policy\",\n                \"source\": \"https://github.com/sebastianbergmann/phpunit/tree/9.6.21\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://phpunit.de/sponsors.html\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                },\n                {\n                    \"url\": \"https://tidelift.com/funding/github/packagist/phpunit/phpunit\",\n                    \"type\": \"tidelift\"\n                }\n            ],\n            \"time\": \"2024-09-19T10:50:18+00:00\"\n        },\n        {\n            \"name\": \"sebastian/cli-parser\",\n            \"version\": \"1.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/cli-parser.git\",\n                \"reference\": \"2b56bea83a09de3ac06bb18b92f068e60cc6f50b\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/cli-parser/zipball/2b56bea83a09de3ac06bb18b92f068e60cc6f50b\",\n                \"reference\": \"2b56bea83a09de3ac06bb18b92f068e60cc6f50b\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library for parsing CLI options\",\n            \"homepage\": \"https://github.com/sebastianbergmann/cli-parser\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/cli-parser/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/cli-parser/tree/1.0.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-02T06:27:43+00:00\"\n        },\n        {\n            \"name\": \"sebastian/code-unit\",\n            \"version\": \"1.0.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/code-unit.git\",\n                \"reference\": \"1fc9f64c0927627ef78ba436c9b17d967e68e120\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/code-unit/zipball/1fc9f64c0927627ef78ba436c9b17d967e68e120\",\n                \"reference\": \"1fc9f64c0927627ef78ba436c9b17d967e68e120\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Collection of value objects that represent the PHP code units\",\n            \"homepage\": \"https://github.com/sebastianbergmann/code-unit\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/code-unit/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/code-unit/tree/1.0.8\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2020-10-26T13:08:54+00:00\"\n        },\n        {\n            \"name\": \"sebastian/code-unit-reverse-lookup\",\n            \"version\": \"2.0.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup.git\",\n                \"reference\": \"ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5\",\n                \"reference\": \"ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Looks up which function or method a line of code belongs to\",\n            \"homepage\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup/\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/code-unit-reverse-lookup/tree/2.0.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2020-09-28T05:30:19+00:00\"\n        },\n        {\n            \"name\": \"sebastian/comparator\",\n            \"version\": \"4.0.8\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/comparator.git\",\n                \"reference\": \"fa0f136dd2334583309d32b62544682ee972b51a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/comparator/zipball/fa0f136dd2334583309d32b62544682ee972b51a\",\n                \"reference\": \"fa0f136dd2334583309d32b62544682ee972b51a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\",\n                \"sebastian/diff\": \"^4.0\",\n                \"sebastian/exporter\": \"^4.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                },\n                {\n                    \"name\": \"Jeff Welch\",\n                    \"email\": \"whatthejeff@gmail.com\"\n                },\n                {\n                    \"name\": \"Volker Dusch\",\n                    \"email\": \"github@wallbash.com\"\n                },\n                {\n                    \"name\": \"Bernhard Schussek\",\n                    \"email\": \"bschussek@2bepublished.at\"\n                }\n            ],\n            \"description\": \"Provides the functionality to compare PHP values for equality\",\n            \"homepage\": \"https://github.com/sebastianbergmann/comparator\",\n            \"keywords\": [\n                \"comparator\",\n                \"compare\",\n                \"equality\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/comparator/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/comparator/tree/4.0.8\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2022-09-14T12:41:17+00:00\"\n        },\n        {\n            \"name\": \"sebastian/complexity\",\n            \"version\": \"2.0.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/complexity.git\",\n                \"reference\": \"25f207c40d62b8b7aa32f5ab026c53561964053a\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/complexity/zipball/25f207c40d62b8b7aa32f5ab026c53561964053a\",\n                \"reference\": \"25f207c40d62b8b7aa32f5ab026c53561964053a\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"nikic/php-parser\": \"^4.18 || ^5.0\",\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library for calculating the complexity of PHP code units\",\n            \"homepage\": \"https://github.com/sebastianbergmann/complexity\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/complexity/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/complexity/tree/2.0.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2023-12-22T06:19:30+00:00\"\n        },\n        {\n            \"name\": \"sebastian/diff\",\n            \"version\": \"4.0.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/diff.git\",\n                \"reference\": \"ba01945089c3a293b01ba9badc29ad55b106b0bc\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/diff/zipball/ba01945089c3a293b01ba9badc29ad55b106b0bc\",\n                \"reference\": \"ba01945089c3a293b01ba9badc29ad55b106b0bc\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\",\n                \"symfony/process\": \"^4.2 || ^5\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                },\n                {\n                    \"name\": \"Kore Nordmann\",\n                    \"email\": \"mail@kore-nordmann.de\"\n                }\n            ],\n            \"description\": \"Diff implementation\",\n            \"homepage\": \"https://github.com/sebastianbergmann/diff\",\n            \"keywords\": [\n                \"diff\",\n                \"udiff\",\n                \"unidiff\",\n                \"unified diff\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/diff/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/diff/tree/4.0.6\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-02T06:30:58+00:00\"\n        },\n        {\n            \"name\": \"sebastian/environment\",\n            \"version\": \"5.1.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/environment.git\",\n                \"reference\": \"830c43a844f1f8d5b7a1f6d6076b784454d8b7ed\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/environment/zipball/830c43a844f1f8d5b7a1f6d6076b784454d8b7ed\",\n                \"reference\": \"830c43a844f1f8d5b7a1f6d6076b784454d8b7ed\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"suggest\": {\n                \"ext-posix\": \"*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"5.1-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Provides functionality to handle HHVM/PHP environments\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/environment\",\n            \"keywords\": [\n                \"Xdebug\",\n                \"environment\",\n                \"hhvm\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/environment/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/environment/tree/5.1.5\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2023-02-03T06:03:51+00:00\"\n        },\n        {\n            \"name\": \"sebastian/exporter\",\n            \"version\": \"4.0.6\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/exporter.git\",\n                \"reference\": \"78c00df8f170e02473b682df15bfcdacc3d32d72\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/exporter/zipball/78c00df8f170e02473b682df15bfcdacc3d32d72\",\n                \"reference\": \"78c00df8f170e02473b682df15bfcdacc3d32d72\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\",\n                \"sebastian/recursion-context\": \"^4.0\"\n            },\n            \"require-dev\": {\n                \"ext-mbstring\": \"*\",\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                },\n                {\n                    \"name\": \"Jeff Welch\",\n                    \"email\": \"whatthejeff@gmail.com\"\n                },\n                {\n                    \"name\": \"Volker Dusch\",\n                    \"email\": \"github@wallbash.com\"\n                },\n                {\n                    \"name\": \"Adam Harvey\",\n                    \"email\": \"aharvey@php.net\"\n                },\n                {\n                    \"name\": \"Bernhard Schussek\",\n                    \"email\": \"bschussek@gmail.com\"\n                }\n            ],\n            \"description\": \"Provides the functionality to export PHP variables for visualization\",\n            \"homepage\": \"https://www.github.com/sebastianbergmann/exporter\",\n            \"keywords\": [\n                \"export\",\n                \"exporter\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/exporter/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/exporter/tree/4.0.6\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-02T06:33:00+00:00\"\n        },\n        {\n            \"name\": \"sebastian/global-state\",\n            \"version\": \"5.0.7\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/global-state.git\",\n                \"reference\": \"bca7df1f32ee6fe93b4d4a9abbf69e13a4ada2c9\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/global-state/zipball/bca7df1f32ee6fe93b4d4a9abbf69e13a4ada2c9\",\n                \"reference\": \"bca7df1f32ee6fe93b4d4a9abbf69e13a4ada2c9\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\",\n                \"sebastian/object-reflector\": \"^2.0\",\n                \"sebastian/recursion-context\": \"^4.0\"\n            },\n            \"require-dev\": {\n                \"ext-dom\": \"*\",\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"suggest\": {\n                \"ext-uopz\": \"*\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"5.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Snapshotting of global state\",\n            \"homepage\": \"http://www.github.com/sebastianbergmann/global-state\",\n            \"keywords\": [\n                \"global state\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/global-state/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/global-state/tree/5.0.7\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-02T06:35:11+00:00\"\n        },\n        {\n            \"name\": \"sebastian/lines-of-code\",\n            \"version\": \"1.0.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/lines-of-code.git\",\n                \"reference\": \"e1e4a170560925c26d424b6a03aed157e7dcc5c5\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/lines-of-code/zipball/e1e4a170560925c26d424b6a03aed157e7dcc5c5\",\n                \"reference\": \"e1e4a170560925c26d424b6a03aed157e7dcc5c5\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"nikic/php-parser\": \"^4.18 || ^5.0\",\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"1.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library for counting the lines of code in PHP source code\",\n            \"homepage\": \"https://github.com/sebastianbergmann/lines-of-code\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/lines-of-code/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/lines-of-code/tree/1.0.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2023-12-22T06:20:34+00:00\"\n        },\n        {\n            \"name\": \"sebastian/object-enumerator\",\n            \"version\": \"4.0.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/object-enumerator.git\",\n                \"reference\": \"5c9eeac41b290a3712d88851518825ad78f45c71\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/5c9eeac41b290a3712d88851518825ad78f45c71\",\n                \"reference\": \"5c9eeac41b290a3712d88851518825ad78f45c71\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\",\n                \"sebastian/object-reflector\": \"^2.0\",\n                \"sebastian/recursion-context\": \"^4.0\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Traverses array structures and object graphs to enumerate all referenced objects\",\n            \"homepage\": \"https://github.com/sebastianbergmann/object-enumerator/\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/object-enumerator/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/object-enumerator/tree/4.0.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2020-10-26T13:12:34+00:00\"\n        },\n        {\n            \"name\": \"sebastian/object-reflector\",\n            \"version\": \"2.0.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/object-reflector.git\",\n                \"reference\": \"b4f479ebdbf63ac605d183ece17d8d7fe49c15c7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/b4f479ebdbf63ac605d183ece17d8d7fe49c15c7\",\n                \"reference\": \"b4f479ebdbf63ac605d183ece17d8d7fe49c15c7\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"2.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Allows reflection of object attributes, including inherited and non-public ones\",\n            \"homepage\": \"https://github.com/sebastianbergmann/object-reflector/\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/object-reflector/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/object-reflector/tree/2.0.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2020-10-26T13:14:26+00:00\"\n        },\n        {\n            \"name\": \"sebastian/recursion-context\",\n            \"version\": \"4.0.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/recursion-context.git\",\n                \"reference\": \"e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1\",\n                \"reference\": \"e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"4.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                },\n                {\n                    \"name\": \"Jeff Welch\",\n                    \"email\": \"whatthejeff@gmail.com\"\n                },\n                {\n                    \"name\": \"Adam Harvey\",\n                    \"email\": \"aharvey@php.net\"\n                }\n            ],\n            \"description\": \"Provides functionality to recursively process PHP variables\",\n            \"homepage\": \"https://github.com/sebastianbergmann/recursion-context\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/recursion-context/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/recursion-context/tree/4.0.5\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2023-02-03T06:07:39+00:00\"\n        },\n        {\n            \"name\": \"sebastian/resource-operations\",\n            \"version\": \"3.0.4\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/resource-operations.git\",\n                \"reference\": \"05d5692a7993ecccd56a03e40cd7e5b09b1d404e\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/05d5692a7993ecccd56a03e40cd7e5b09b1d404e\",\n                \"reference\": \"05d5692a7993ecccd56a03e40cd7e5b09b1d404e\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.0\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-main\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\"\n                }\n            ],\n            \"description\": \"Provides a list of PHP built-in functions that operate on resources\",\n            \"homepage\": \"https://www.github.com/sebastianbergmann/resource-operations\",\n            \"support\": {\n                \"source\": \"https://github.com/sebastianbergmann/resource-operations/tree/3.0.4\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-14T16:00:52+00:00\"\n        },\n        {\n            \"name\": \"sebastian/type\",\n            \"version\": \"3.2.1\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/type.git\",\n                \"reference\": \"75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/type/zipball/75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7\",\n                \"reference\": \"75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"require-dev\": {\n                \"phpunit/phpunit\": \"^9.5\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.2-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Collection of value objects that represent the types of the PHP type system\",\n            \"homepage\": \"https://github.com/sebastianbergmann/type\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/type/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/type/tree/3.2.1\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2023-02-03T06:13:03+00:00\"\n        },\n        {\n            \"name\": \"sebastian/version\",\n            \"version\": \"3.0.2\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/sebastianbergmann/version.git\",\n                \"reference\": \"c6c1022351a901512170118436c764e473f6de8c\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/sebastianbergmann/version/zipball/c6c1022351a901512170118436c764e473f6de8c\",\n                \"reference\": \"c6c1022351a901512170118436c764e473f6de8c\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.3\"\n            },\n            \"type\": \"library\",\n            \"extra\": {\n                \"branch-alias\": {\n                    \"dev-master\": \"3.0-dev\"\n                }\n            },\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Sebastian Bergmann\",\n                    \"email\": \"sebastian@phpunit.de\",\n                    \"role\": \"lead\"\n                }\n            ],\n            \"description\": \"Library that helps with managing the version number of Git-hosted PHP projects\",\n            \"homepage\": \"https://github.com/sebastianbergmann/version\",\n            \"support\": {\n                \"issues\": \"https://github.com/sebastianbergmann/version/issues\",\n                \"source\": \"https://github.com/sebastianbergmann/version/tree/3.0.2\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/sebastianbergmann\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2020-09-28T06:39:44+00:00\"\n        },\n        {\n            \"name\": \"symplify/easy-coding-standard\",\n            \"version\": \"12.3.5\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/easy-coding-standard/easy-coding-standard.git\",\n                \"reference\": \"0d7c2cfee3debdf11c12135e90d69d1d9f4eef03\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/easy-coding-standard/easy-coding-standard/zipball/0d7c2cfee3debdf11c12135e90d69d1d9f4eef03\",\n                \"reference\": \"0d7c2cfee3debdf11c12135e90d69d1d9f4eef03\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"php\": \">=7.2\"\n            },\n            \"conflict\": {\n                \"friendsofphp/php-cs-fixer\": \"<3.46\",\n                \"phpcsstandards/php_codesniffer\": \"<3.8\",\n                \"symplify/coding-standard\": \"<12.1\"\n            },\n            \"suggest\": {\n                \"ext-dom\": \"Needed to support checkstyle output format in class CheckstyleOutputFormatter\"\n            },\n            \"bin\": [\n                \"bin/ecs\"\n            ],\n            \"type\": \"library\",\n            \"autoload\": {\n                \"files\": [\n                    \"bootstrap.php\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"MIT\"\n            ],\n            \"description\": \"Use Coding Standard with 0-knowledge of PHP-CS-Fixer and PHP_CodeSniffer\",\n            \"keywords\": [\n                \"Code style\",\n                \"automation\",\n                \"fixer\",\n                \"static analysis\"\n            ],\n            \"support\": {\n                \"issues\": \"https://github.com/easy-coding-standard/easy-coding-standard/issues\",\n                \"source\": \"https://github.com/easy-coding-standard/easy-coding-standard/tree/12.3.5\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://www.paypal.me/rectorphp\",\n                    \"type\": \"custom\"\n                },\n                {\n                    \"url\": \"https://github.com/tomasvotruba\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-08-08T08:43:50+00:00\"\n        },\n        {\n            \"name\": \"theseer/tokenizer\",\n            \"version\": \"1.2.3\",\n            \"source\": {\n                \"type\": \"git\",\n                \"url\": \"https://github.com/theseer/tokenizer.git\",\n                \"reference\": \"737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2\"\n            },\n            \"dist\": {\n                \"type\": \"zip\",\n                \"url\": \"https://api.github.com/repos/theseer/tokenizer/zipball/737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2\",\n                \"reference\": \"737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2\",\n                \"shasum\": \"\"\n            },\n            \"require\": {\n                \"ext-dom\": \"*\",\n                \"ext-tokenizer\": \"*\",\n                \"ext-xmlwriter\": \"*\",\n                \"php\": \"^7.2 || ^8.0\"\n            },\n            \"type\": \"library\",\n            \"autoload\": {\n                \"classmap\": [\n                    \"src/\"\n                ]\n            },\n            \"notification-url\": \"https://packagist.org/downloads/\",\n            \"license\": [\n                \"BSD-3-Clause\"\n            ],\n            \"authors\": [\n                {\n                    \"name\": \"Arne Blankerts\",\n                    \"email\": \"arne@blankerts.de\",\n                    \"role\": \"Developer\"\n                }\n            ],\n            \"description\": \"A small library for converting tokenized PHP source code into XML and potentially other formats\",\n            \"support\": {\n                \"issues\": \"https://github.com/theseer/tokenizer/issues\",\n                \"source\": \"https://github.com/theseer/tokenizer/tree/1.2.3\"\n            },\n            \"funding\": [\n                {\n                    \"url\": \"https://github.com/theseer\",\n                    \"type\": \"github\"\n                }\n            ],\n            \"time\": \"2024-03-03T12:36:25+00:00\"\n        }\n    ],\n    \"aliases\": [],\n    \"minimum-stability\": \"stable\",\n    \"stability-flags\": [],\n    \"prefer-stable\": false,\n    \"prefer-lowest\": false,\n    \"platform\": {\n        \"php\": \">=7.3\",\n        \"lib-pcre\": \">=7.0\"\n    },\n    \"platform-dev\": [],\n    \"platform-overrides\": {\n        \"php\": \"7.3.999\"\n    },\n    \"plugin-api-version\": \"2.6.0\"\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "e2e-test.sh",
          "type": "blob",
          "size": 2.9609375,
          "content": "#!/bin/bash\n\nset -e\n# set -x\n\n#######################################################################################################################\n# This script runs semi end-to-end tests for Mockery.\n#\n# It clones the repositories listed in the `projects` array,\n# installs Mockery from the local filesystem,\n# and runs PHPUnit for each PHP version listed in the `php_versions` array.\n#\n# This is useful to test Mockery against different versions of other projects and frameworks.\n#\n#######################################################################################################################\n\nphp_versions=(\n    \"8.2\"\n    \"8.3\"\n)\n\nprojects=(\n    \"filp/whoops\"\n    \"thephpleague/glide\"\n    \"10up/wp_mock\"\n    \"laravel/framework\"\n)\n\nmockery_path=\"$(pwd)\"\n\nresources_path=\"$mockery_path/../mockery-resources\"\n\nmockery_branch=$(git -C \"$mockery_path\" rev-parse --abbrev-ref HEAD)\nmockery_sha=$(git -C \"$mockery_path\" rev-parse HEAD | cut -c1-8)\nmockery_version=\"dev-$mockery_branch#$mockery_sha\"\n\necho \"===> Running e2e tests\"\necho \"PHP versions: [ ${php_versions[*]} ]\"\necho \"Test Projects: [ ${projects[*]} ]\"\necho \" \"\necho \"Mockery branch: $mockery_branch\"\necho \"Mockery SHA: $mockery_sha\"\necho \"Mockery version: $mockery_version\"\necho \"Mockery path: $mockery_path\"\necho \"Resource path: $resources_path\"\necho \" \"\n\nrm -rf \"$resources_path\" || { echo \"Failed to remove directory $resources_path\"; exit 1; }\nmkdir -p \"$resources_path\" || { echo \"Failed to create directory $resources_path\"; exit 1; }\ncd \"$resources_path\" || { echo \"Failed to change directory to $resources_path\"; exit 1; }\n\nfor project in \"${projects[@]}\"\ndo\n    project_path=\"$resources_path/$project\"\n\n    if [ ! -d \"$project_path\" ]; then\n        echo \"Cloning $project to $project_path\\n\\n\"\n\n        git clone \"git@github.com:$project.git\" \"$project_path\" --depth=1 || { echo \"Failed to clone $project\"; exit 1; }\n    else\n        echo \"Pulling $project\"\n\n        git -C \"$project_path\" fetch --depth=1 || { echo \"Failed to fetch $project\"; exit 1; }\n\n        git -C \"$project_path\" pull --rebase --autostash || { echo \"Failed to pull $project\"; exit 1; }\n    fi\n\n    cd \"$project_path\" || { echo \"Failed to change directory to $project_path\"; exit 1; }\n\n    echo \"Installing Mockery version $mockery_version\"\n\n    for php_version in \"${php_versions[@]}\"\n    do\n        echo \"Running PHPUnit for PHP version $php_version\"\n\n        docker run -it --rm -v \"$mockery_path\":/opt/mockery -v \"$project_path\":/opt/workspace -w /opt/workspace ghcr.io/ghostwriter/php:\"$php_version\"-pcov sh -c \"composer config repositories.local '{\\\"type\\\": \\\"path\\\", \\\"url\\\": \\\"/opt/mockery\\\"}' && composer require 'mockery/mockery:$mockery_version' --with-dependencies --ignore-platform-reqs --no-scripts --no-plugins --dev --no-interaction && php /opt/workspace/vendor/bin/phpunit\" || { echo \"Failed to run PHPUnit for $project PHP version $php_version\"; exit 1; }\n    done\ndone\n\nrm -rf \"$resources_path\" || { echo \"Failed to remove directory $resources_path\"; exit 1; }\n"
        },
        {
          "name": "ecs.php",
          "type": "blob",
          "size": 10.7392578125,
          "content": "<?php\n\ndeclare(strict_types=1);\n\nuse PhpCsFixer\\Fixer\\Phpdoc\\GeneralPhpdocAnnotationRemoveFixer;\nuse PhpCsFixer\\Fixer\\Strict\\StrictComparisonFixer;\nuse PhpCsFixer\\Fixer\\ArrayNotation\\ArraySyntaxFixer;\nuse PhpCsFixer\\Fixer\\Casing\\ConstantCaseFixer;\nuse PhpCsFixer\\Fixer\\ClassNotation\\FinalClassFixer;\nuse PhpCsFixer\\Fixer\\ClassNotation\\OrderedClassElementsFixer;\nuse PhpCsFixer\\Fixer\\FunctionNotation\\NativeFunctionInvocationFixer;\nuse PhpCsFixer\\Fixer\\Import\\GlobalNamespaceImportFixer;\nuse PhpCsFixer\\Fixer\\Import\\OrderedImportsFixer;\nuse PhpCsFixer\\Fixer\\LanguageConstruct\\GetClassToClassKeywordFixer;\nuse PhpCsFixer\\Fixer\\Phpdoc\\PhpdocAlignFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitAssertNewNamesFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitAttributesFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitConstructFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitDataProviderNameFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitDataProviderReturnTypeFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitDataProviderStaticFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitDedicateAssertFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitDedicateAssertInternalTypeFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitExpectationFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitFqcnAnnotationFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitInternalClassFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitMethodCasingFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitMockFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitMockShortWillReturnFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitNamespacedFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitNoExpectationAnnotationFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitSetUpTearDownVisibilityFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitStrictFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitTestAnnotationFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitTestCaseStaticMethodCallsFixer;\nuse PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitTestClassRequiresCoversFixer;\nuse Symplify\\CodingStandard\\Fixer\\ArrayNotation\\ArrayListItemNewlineFixer;\nuse Symplify\\CodingStandard\\Fixer\\ArrayNotation\\ArrayOpenerAndCloserNewlineFixer;\nuse Symplify\\CodingStandard\\Fixer\\Commenting\\ParamReturnAndVarTagMalformsFixer;\nuse Symplify\\CodingStandard\\Fixer\\LineLength\\LineLengthFixer;\nuse Symplify\\CodingStandard\\Fixer\\Spacing\\MethodChainingNewlineFixer;\nuse Symplify\\CodingStandard\\Fixer\\Spacing\\SpaceAfterCommaHereNowDocFixer;\nuse Symplify\\CodingStandard\\Fixer\\Spacing\\StandaloneLinePromotedPropertyFixer;\nuse Symplify\\CodingStandard\\Fixer\\Strict\\BlankLineAfterStrictTypesFixer;\nuse Symplify\\EasyCodingStandard\\Config\\ECSConfig;\nuse Symplify\\EasyCodingStandard\\ValueObject\\Option;\n\n$cacheDirectory = __DIR__ . '/.cache/ecs';\n$cacheNamespace = \\str_replace(search: \\DIRECTORY_SEPARATOR, replace: '_', subject: $cacheDirectory);\n\nreturn ECSConfig::configure()\n                ->withCache(directory: $cacheDirectory, namespace: $cacheNamespace)\n                ->withPhpCsFixerSets(\n                    doctrineAnnotation: true,\n                    per: true,\n                    perCS: true,\n                    perCS10: true,\n                    perCS10Risky: true,\n                    perCS20: true,\n                    perCS20Risky: true,\n                    perCSRisky: true,\n                    perRisky: true,\n                    php54Migration: true,\n                    php56MigrationRisky: true,\n                    php70Migration: true,\n                    php70MigrationRisky: true,\n                    php71Migration: true,\n                    php71MigrationRisky: true,\n                    php73Migration: true,\n                    php74Migration: false,\n                    php74MigrationRisky: false,\n                    php80Migration: false,\n                    php80MigrationRisky: false,\n                    php81Migration: false,\n                    php82Migration: false,\n                    php83Migration: false,\n                    phpunit30MigrationRisky: true,\n                    phpunit32MigrationRisky: true,\n                    phpunit35MigrationRisky: true,\n                    phpunit43MigrationRisky: true,\n                    phpunit48MigrationRisky: true,\n                    phpunit50MigrationRisky: true,\n                    phpunit52MigrationRisky: true,\n                    phpunit54MigrationRisky: true,\n                    phpunit55MigrationRisky: true,\n                    phpunit56MigrationRisky: true,\n                    phpunit57MigrationRisky: true,\n                    phpunit60MigrationRisky: true,\n                    phpunit75MigrationRisky: true,\n                    phpunit84MigrationRisky: true,\n                    phpunit100MigrationRisky: true,\n                    psr1: true,\n                    psr2: true,\n                    psr12: true,\n                    psr12Risky: true,\n                    phpCsFixer: false,\n                    phpCsFixerRisky: false,\n                    symfony: false,\n                    symfonyRisky: false,\n                )\n                ->withPreparedSets(\n                    psr12: true,\n                    common: false,\n                    symplify: true,\n                    arrays: true,\n                    comments: true,\n                    docblocks: true,\n                    spaces: true,\n                    namespaces: true,\n                    controlStructures: true,\n                    phpunit: true,\n                    strict: true,\n                    cleanCode: true,\n                )\n                ->withConfiguredRule(NativeFunctionInvocationFixer::class, [\n                    'include' => ['@all'],\n                    'scope' => 'all',\n                ])\n                ->withConfiguredRule(\n                    checkerClass: GlobalNamespaceImportFixer::class,\n                    configuration: [\n                        'import_classes' => true,\n                        'import_constants' => true,\n                        'import_functions' => false,\n                    ]\n                )\n                ->withConfiguredRule(checkerClass: OrderedImportsFixer::class, configuration: [\n                    'imports_order' => ['class', 'const', 'function'],\n                ])\n\n                ->withConfiguredRule(checkerClass: PhpdocAlignFixer::class, configuration: [\n                    'tags' => ['method', 'param', 'property', 'return', 'throws', 'type', 'var'],\n                ])\n\n                ->withConfiguredRule(checkerClass: PhpUnitTestCaseStaticMethodCallsFixer::class, configuration: [\n                    'call_type' => 'self',\n                ])\n\n                ->withConfiguredRule(checkerClass: ArraySyntaxFixer::class, configuration: [\n                    'syntax' => 'short',\n                ])\n\n                ->withConfiguredRule(checkerClass: ConstantCaseFixer::class, configuration: [\n                    'case' => 'lower',\n                ])\n\n                ->withConfiguredRule(checkerClass: OrderedClassElementsFixer::class, configuration: [\n                    'case_sensitive' => true,\n                    'sort_algorithm' => 'alpha',\n                    'order' => [\n                        'use_trait',\n                        'case',\n                        'constant_public',\n                        'constant_protected',\n                        'constant_private',\n                        'property_public',\n                        'property_protected',\n                        'property_private',\n                        'construct',\n                        'destruct',\n                        'magic',\n                        'method:mockeryTestSetUp',\n                        'method:mockeryTestTearDown',\n                        'phpunit',\n                        'method_public',\n                        'method_protected',\n                        'method_private',\n                    ],\n                ])\n                ->withParallel()\n                ->withRootFiles()\n                ->withRules([\n                    PhpUnitAssertNewNamesFixer::class,\n                    PhpUnitConstructFixer::class,\n                    PhpUnitDataProviderNameFixer::class,\n                    PhpUnitDataProviderReturnTypeFixer::class,\n                    PhpUnitDataProviderStaticFixer::class,\n                    PhpUnitDedicateAssertFixer::class,\n                    PhpUnitDedicateAssertInternalTypeFixer::class,\n                    PhpUnitExpectationFixer::class,\n                    PhpUnitFqcnAnnotationFixer::class,\n                    //        PhpUnitInternalClassFixer::class,\n                    PhpUnitMethodCasingFixer::class,\n                    PhpUnitMockFixer::class,\n                    PhpUnitMockShortWillReturnFixer::class,\n                    PhpUnitNamespacedFixer::class,\n                    PhpUnitNoExpectationAnnotationFixer::class,\n                    PhpUnitSetUpTearDownVisibilityFixer::class,\n                    PhpUnitStrictFixer::class,\n                    FinalClassFixer::class,\n                    PhpUnitTestAnnotationFixer::class,\n\n                    //        PhpUnitTestClassRequiresCoversFixer::class,\n                    ParamReturnAndVarTagMalformsFixer::class,\n                    // arrays\n                    ArrayListItemNewlineFixer::class,\n                    ArrayOpenerAndCloserNewlineFixer::class,\n                    StandaloneLinePromotedPropertyFixer::class,\n                    // newlines\n                    SpaceAfterCommaHereNowDocFixer::class,\n                    BlankLineAfterStrictTypesFixer::class,\n                    LineLengthFixer::class,\n                ])\n                ->withConfiguredRule(\n                    GeneralPhpdocAnnotationRemoveFixer::class,\n                    [\n                        'annotations' => ['small', 'internal', 'coversDefaultClass1', 'coversNothing'],\n                    ]\n                )\n                ->withSkip(skip: [\n                    __DIR__ . '/library/Mockery/Mock.php',\n                    __DIR__ . '/tests/Fixture/*',\n                    PhpUnitTestClassRequiresCoversFixer::class,\n                    PhpUnitInternalClassFixer::class,\n                    MethodChainingNewlineFixer::class,\n                    GetClassToClassKeywordFixer::class,\n                    //        \\PhpCsFixer\\Fixer\\Phpdoc\\GeneralPhpdocAnnotationRemoveFixer::class,\n                    StrictComparisonFixer::class => [\n                        __DIR__ . '/library/Mockery/Matcher/IsEqual.php',\n                        __DIR__ . '/library/Mockery/Matcher/MustBe.php',\n                        __DIR__ . '/library/Mockery/Matcher/Subset.php',\n                        __DIR__ . '/library/Mockery/Generator/StringManipulation',\n                    ],\n                    // Enable later\n                    FinalClassFixer::class,\n                    PhpUnitAttributesFixer::class,\n                ])\n                ->withSpacing(indentation: Option::INDENTATION_SPACES, lineEnding: PHP_EOL)\n                ->withPaths(paths: [\n                    __DIR__ . '/tests',\n                    // __DIR__ . '/library',\n                ])\n    ;\n"
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "phive.xml",
          "type": "blob",
          "size": 0.5908203125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phive xmlns=\"https://phar.io/phive\">\n  <phar name=\"infection\" version=\"^0.29.6\" installed=\"0.29.6\" location=\"./tools/infection\" copy=\"true\"/>\n  <phar name=\"phar-io/phive\" version=\"^0.15.3\" installed=\"0.15.3\" location=\"./tools/phive\" copy=\"true\"/>\n  <phar name=\"phpdocumentor\" version=\"^3.5.3\" installed=\"3.5.3\" location=\"./tools/phpdocumentor\" copy=\"true\"/>\n  <phar name=\"phpunit\" version=\"^11.3.6\" installed=\"11.3.6\" location=\"./tools/phpunit\" copy=\"true\"/>\n  <phar name=\"psalm\" version=\"^5.26.1\" installed=\"5.26.1\" location=\"./tools/psalm\" copy=\"true\"/>\n</phive>\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 2.0244140625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n    xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    bootstrap=\"./tests/Bootstrap.php\"\n    cacheResult=\"false\"\n    forceCoversAnnotation=\"false\"\n    stopOnFailure=\"true\"\n    convertDeprecationsToExceptions=\"true\"\n    colors=\"true\"\n    verbose=\"true\"\n>\n    <coverage processUncoveredFiles=\"true\">\n        <include>\n            <directory suffix=\".php\">library</directory>\n        </include>\n        <exclude>\n            <directory>library/Mockery/Adapter/Phpunit/Legacy</directory>\n            <file>library/Mockery/Adapter/Phpunit/TestListener.php</file>\n            <file>library/Mockery/Adapter/Phpunit/MockeryPHPUnitIntegrationAssertPostConditions.php</file>\n            <file>library/Mockery/Adapter/Phpunit/MockeryTestCaseSetUp.php</file>\n        </exclude>\n        <report>\n            <html outputDirectory=\".cache/phpunit/coverage-html\"/>\n            <clover outputFile=\".cache/phpunit/clover.xml\"/>\n            <text outputFile=\".cache/phpunit/coverage.txt\"/>\n        </report>\n    </coverage>\n    <logging>\n        <junit outputFile=\".cache/phpunit/junit.xml\"/>\n    </logging>\n    <testsuites>\n        <testsuite name=\"default\">\n            <directory>tests</directory>\n            <exclude>tests/Unit/PHP*</exclude>\n            <exclude>tests/Fixture</exclude>\n        </testsuite>\n        <testsuite name=\"php\">\n            <directory phpVersion=\"7.3.0-dev\">tests/Unit/PHP73</directory>\n            <directory phpVersion=\"7.4.0-dev\">tests/Unit/PHP74</directory>\n            <directory phpVersion=\"8.0.0-dev\">tests/Unit/PHP80</directory>\n            <directory phpVersion=\"8.1.0-dev\">tests/Unit/PHP81</directory>\n            <directory phpVersion=\"8.2.0-dev\">tests/Unit/PHP82</directory>\n            <directory phpVersion=\"8.3.0-dev\">tests/Unit/PHP83</directory>\n            <directory phpVersion=\"8.4.0-dev\">tests/Unit/PHP84</directory>\n            <exclude>tests/Fixture</exclude>\n        </testsuite>\n    </testsuites>\n</phpunit>\n"
        },
        {
          "name": "psalm-baseline.xml",
          "type": "blob",
          "size": 268.291015625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<files psalm-version=\"5.26.1@d747f6500b38ac4f7dfc5edbcae6e4b637d7add0\">\n  <file src=\"library/Mockery.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[$demeterMockKey]]></code>\n      <code><![CDATA[$newMockName]]></code>\n    </ArgumentTypeCoercion>\n    <DeprecatedClass>\n      <code><![CDATA[MustBe]]></code>\n      <code><![CDATA[new MustBe($expected)]]></code>\n    </DeprecatedClass>\n    <DeprecatedMethod>\n      <code><![CDATA[self::builtInTypes()]]></code>\n    </DeprecatedMethod>\n    <DocblockTypeContradiction>\n      <code><![CDATA[self::$_config === null]]></code>\n      <code><![CDATA[self::$_generator === null]]></code>\n      <code><![CDATA[self::$_loader === null]]></code>\n    </DocblockTypeContradiction>\n    <InternalMethod>\n      <code><![CDATA[Reflector::isReservedWord($type)]]></code>\n    </InternalMethod>\n    <InvalidReturnStatement>\n      <code><![CDATA[$argument]]></code>\n      <code><![CDATA['...']]></code>\n      <code><![CDATA[self::getContainer()->mock(...$args)->shouldIgnoreMissing()]]></code>\n    </InvalidReturnStatement>\n    <InvalidReturnType>\n      <code><![CDATA[LegacyMockInterface&MockInterface&TSpy]]></code>\n      <code><![CDATA[TArray]]></code>\n    </InvalidReturnType>\n    <LessSpecificReturnStatement>\n      <code><![CDATA[$container->getMocks()[$demeterMockKey] ?? null]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[self::getContainer()->fetchMock($name)]]></code>\n      <code><![CDATA[self::getContainer()->mock(...$args)]]></code>\n    </LessSpecificReturnStatement>\n    <LessSpecificReturnType>\n      <code><![CDATA[array<string, mixed>]]></code>\n    </LessSpecificReturnType>\n    <MissingClassConstType>\n      <code><![CDATA[BLOCKS = 'Mockery_Forward_Blocks']]></code>\n    </MissingClassConstType>\n    <MissingClosureParamType>\n      <code><![CDATA[$argument]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$n]]></code>\n      <code><![CDATA[$nesting]]></code>\n      <code><![CDATA[$object]]></code>\n    </MissingClosureParamType>\n    <MissingClosureReturnType>\n      <code><![CDATA[static function ($argument) use (&$reference) {]]></code>\n      <code><![CDATA[static function ($method) use ($add) {]]></code>\n      <code><![CDATA[static function ($n) use ($mock) {]]></code>\n      <code><![CDATA[static function ($object, $nesting) {]]></code>\n    </MissingClosureReturnType>\n    <MissingReturnType>\n      <code><![CDATA[registerFileForCleanUp]]></code>\n      <code><![CDATA[setGenerator]]></code>\n      <code><![CDATA[setLoader]]></code>\n    </MissingReturnType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[getMethod]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mockery_teardown]]></code>\n    </MissingThrowsDocblock>\n    <MixedArgument>\n      <code><![CDATA[$expectations]]></code>\n      <code><![CDATA[$formatter($object, $nesting)]]></code>\n      <code><![CDATA[$nesting]]></code>\n      <code><![CDATA[$object]]></code>\n      <code><![CDATA[$value]]></code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code><![CDATA[$args]]></code>\n      <code><![CDATA[$args]]></code>\n      <code><![CDATA[$args]]></code>\n      <code><![CDATA[$formattedArguments]]></code>\n      <code><![CDATA[$k]]></code>\n    </MixedArgumentTypeCoercion>\n    <MixedArrayAssignment>\n      <code><![CDATA[$argument[$key]]]></code>\n      <code><![CDATA[$argument[$key]]]></code>\n    </MixedArrayAssignment>\n    <MixedArrayOffset>\n      <code><![CDATA[$argument[$key]]]></code>\n      <code><![CDATA[$argument[$key]]]></code>\n    </MixedArrayOffset>\n    <MixedAssignment>\n      <code><![CDATA[$arg]]></code>\n      <code><![CDATA[$argument]]></code>\n      <code><![CDATA[$cleanedProperties[$name]]]></code>\n      <code><![CDATA[$expectations]]></code>\n      <code><![CDATA[$formattedArguments[]]]></code>\n      <code><![CDATA[$key]]></code>\n      <code><![CDATA[$reference]]></code>\n      <code><![CDATA[$v]]></code>\n      <code><![CDATA[$value]]></code>\n      <code><![CDATA[$value]]></code>\n      <code><![CDATA[$value]]></code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code><![CDATA[ExpectationInterface]]></code>\n    </MixedInferredReturnType>\n    <MixedOperand>\n      <code><![CDATA[$argument]]></code>\n    </MixedOperand>\n    <MixedReturnStatement>\n      <code><![CDATA[$expectations]]></code>\n      <code><![CDATA[$expectations]]></code>\n    </MixedReturnStatement>\n    <MixedReturnTypeCoercion>\n      <code><![CDATA[LegacyMockInterface&MockInterface&TInstanceMock]]></code>\n      <code><![CDATA[LegacyMockInterface&MockInterface&TNamedMock]]></code>\n      <code><![CDATA[self::getContainer()->mock(...$args)]]></code>\n      <code><![CDATA[self::getContainer()->mock(...$args)]]></code>\n    </MixedReturnTypeCoercion>\n    <MoreSpecificReturnType>\n      <code><![CDATA[LegacyMockInterface&MockInterface]]></code>\n      <code><![CDATA[LegacyMockInterface&MockInterface&TMock]]></code>\n      <code><![CDATA[null|(LegacyMockInterface&MockInterface&TFetchMock)]]></code>\n      <code><![CDATA[null|(LegacyMockInterface&MockInterface&TMock)]]></code>\n    </MoreSpecificReturnType>\n    <NullableReturnStatement>\n      <code><![CDATA[$expectations]]></code>\n    </NullableReturnStatement>\n    <PossiblyInvalidArgument>\n      <code><![CDATA[$name]]></code>\n    </PossiblyInvalidArgument>\n    <PossiblyInvalidCast>\n      <code><![CDATA[$name]]></code>\n    </PossiblyInvalidCast>\n    <PossiblyNullPropertyAssignmentValue>\n      <code><![CDATA[null]]></code>\n    </PossiblyNullPropertyAssignmentValue>\n    <PossiblyNullReference>\n      <code><![CDATA[allows]]></code>\n      <code><![CDATA[mockery_getExpectationsFor]]></code>\n    </PossiblyNullReference>\n    <PossiblyUndefinedIntArrayOffset>\n      <code><![CDATA[$args[0]]]></code>\n    </PossiblyUndefinedIntArrayOffset>\n    <PossiblyUndefinedMethod>\n      <code><![CDATA[allows]]></code>\n    </PossiblyUndefinedMethod>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[andAnyOtherArgs]]></code>\n      <code><![CDATA[instanceMock]]></code>\n      <code><![CDATA[isBuiltInType]]></code>\n      <code><![CDATA[resetContainer]]></code>\n      <code><![CDATA[setContainer]]></code>\n      <code><![CDATA[setGenerator]]></code>\n    </PossiblyUnusedMethod>\n    <RedundantConditionGivenDocblockType>\n      <code><![CDATA[$parentMock !== null]]></code>\n    </RedundantConditionGivenDocblockType>\n    <RiskyTruthyFalsyComparison>\n      <code><![CDATA[\\strpos($fqn, '\\\\')]]></code>\n    </RiskyTruthyFalsyComparison>\n    <UnresolvableInclude>\n      <code><![CDATA[require $fileName]]></code>\n    </UnresolvableInclude>\n  </file>\n  <file src=\"library/Mockery/Adapter/Phpunit/MockeryPHPUnitIntegration.php\">\n    <InternalMethod>\n      <code><![CDATA[addToAssertionCount]]></code>\n    </InternalMethod>\n    <MissingPropertyType>\n      <code><![CDATA[$mockeryOpen]]></code>\n    </MissingPropertyType>\n    <MissingReturnType>\n      <code><![CDATA[addMockeryExpectationsToAssertionCount]]></code>\n      <code><![CDATA[checkMockeryExceptions]]></code>\n      <code><![CDATA[closeMockery]]></code>\n      <code><![CDATA[mockeryAssertPostConditions]]></code>\n      <code><![CDATA[purgeMockeryContainer]]></code>\n      <code><![CDATA[startMockery]]></code>\n    </MissingReturnType>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[purgeMockeryContainer]]></code>\n      <code><![CDATA[startMockery]]></code>\n    </PossiblyUnusedMethod>\n    <UndefinedAttributeClass>\n      <code><![CDATA[After]]></code>\n      <code><![CDATA[Before]]></code>\n    </UndefinedAttributeClass>\n    <UndefinedInterfaceMethod>\n      <code><![CDATA[dismissed]]></code>\n    </UndefinedInterfaceMethod>\n  </file>\n  <file src=\"library/Mockery/Adapter/Phpunit/MockeryPHPUnitIntegrationAssertPostConditions.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[protected function assertPostConditions(): void]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Adapter/Phpunit/MockeryTestCaseSetUp.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[protected function setUp(): void]]></code>\n      <code><![CDATA[protected function tearDown(): void]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Adapter/Phpunit/TestListener.php\">\n    <DeprecatedInterface>\n      <code><![CDATA[TestListener]]></code>\n    </DeprecatedInterface>\n    <DeprecatedTrait>\n      <code><![CDATA[TestListenerDefaultImplementation]]></code>\n    </DeprecatedTrait>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function endTest(Test $test, float $time): void]]></code>\n      <code><![CDATA[public function startTestSuite(TestSuite $suite): void]]></code>\n    </MissingOverrideAttribute>\n    <MissingPropertyType>\n      <code><![CDATA[$trait]]></code>\n    </MissingPropertyType>\n    <MixedMethodCall>\n      <code><![CDATA[endTest]]></code>\n      <code><![CDATA[startTestSuite]]></code>\n    </MixedMethodCall>\n  </file>\n  <file src=\"library/Mockery/Adapter/Phpunit/TestListenerTrait.php\">\n    <DeprecatedClass>\n      <code><![CDATA[Blacklist::addDirectory(dirname((new ReflectionClass(Mockery::class))->getFileName()))]]></code>\n      <code><![CDATA[Blacklist::class]]></code>\n      <code><![CDATA[new Blacklist()]]></code>\n    </DeprecatedClass>\n    <InternalClass>\n      <code><![CDATA[BaseTestRunner::STATUS_PASSED]]></code>\n      <code><![CDATA[new ExpectationFailedException(\n            sprintf(\n                \"Mockery's expectations have not been verified. Make sure that \\Mockery::close() is called at the end of the test. Consider using %s\\MockeryPHPUnitIntegration or extending %s\\MockeryTestCase.\",\n                __NAMESPACE__,\n                __NAMESPACE__\n            )\n        )]]></code>\n    </InternalClass>\n    <InternalMethod>\n      <code><![CDATA[addFailure]]></code>\n      <code><![CDATA[getTestResultObject]]></code>\n      <code><![CDATA[new ExpectationFailedException(\n            sprintf(\n                \"Mockery's expectations have not been verified. Make sure that \\Mockery::close() is called at the end of the test. Consider using %s\\MockeryPHPUnitIntegration or extending %s\\MockeryTestCase.\",\n                __NAMESPACE__,\n                __NAMESPACE__\n            )\n        )]]></code>\n    </InternalMethod>\n    <MissingReturnType>\n      <code><![CDATA[endTest]]></code>\n      <code><![CDATA[startTestSuite]]></code>\n    </MissingReturnType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[getBlacklistedDirectories]]></code>\n    </MissingThrowsDocblock>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[endTest]]></code>\n      <code><![CDATA[startTestSuite]]></code>\n    </PossiblyUnusedMethod>\n    <RedundantConditionGivenDocblockType>\n      <code><![CDATA[$result !== null]]></code>\n    </RedundantConditionGivenDocblockType>\n    <UndefinedPropertyAssignment>\n      <code><![CDATA[Blacklist::$blacklistedClassNames]]></code>\n    </UndefinedPropertyAssignment>\n    <UndefinedPropertyFetch>\n      <code><![CDATA[Blacklist::$blacklistedClassNames]]></code>\n    </UndefinedPropertyFetch>\n  </file>\n  <file src=\"library/Mockery/CompositeExpectation.php\">\n    <InvalidCast>\n      <code><![CDATA[$expectation]]></code>\n    </InvalidCast>\n    <InvalidPropertyAssignmentValue>\n      <code><![CDATA[$this->_expectations]]></code>\n    </InvalidPropertyAssignmentValue>\n    <InvalidReturnStatement>\n      <code><![CDATA[$first->getMock()]]></code>\n    </InvalidReturnStatement>\n    <InvalidReturnType>\n      <code><![CDATA[LegacyMockInterface&MockInterface]]></code>\n    </InvalidReturnType>\n    <LessSpecificReturnStatement>\n      <code><![CDATA[$first->getMock()->shouldNotReceive(...$args)]]></code>\n      <code><![CDATA[$first->getMock()->shouldReceive(...$args)]]></code>\n      <code><![CDATA[$this->andReturn(...$args)]]></code>\n    </LessSpecificReturnStatement>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function andReturn(...$args)]]></code>\n      <code><![CDATA[public function andReturns(...$args)]]></code>\n      <code><![CDATA[public function getMock()]]></code>\n      <code><![CDATA[public function getOrderNumber()]]></code>\n    </MissingOverrideAttribute>\n    <MixedArgument>\n      <code><![CDATA[$args]]></code>\n      <code><![CDATA[$args]]></code>\n    </MixedArgument>\n    <MoreSpecificReturnType>\n      <code><![CDATA[Expectation]]></code>\n      <code><![CDATA[Expectation]]></code>\n      <code><![CDATA[self]]></code>\n    </MoreSpecificReturnType>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[shouldNotReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n    </PossiblyUnusedMethod>\n  </file>\n  <file src=\"library/Mockery/Configuration.php\">\n    <MissingPropertyType>\n      <code><![CDATA[$_reflectionCacheEnabled]]></code>\n    </MissingPropertyType>\n    <MixedArgument>\n      <code><![CDATA[$type]]></code>\n      <code><![CDATA[Hamcrest_Matcher::class]]></code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code><![CDATA[$type]]></code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code><![CDATA[bool]]></code>\n    </MixedInferredReturnType>\n    <MixedReturnStatement>\n      <code><![CDATA[$this->_reflectionCacheEnabled]]></code>\n    </MixedReturnStatement>\n    <PossiblyUndefinedVariable>\n      <code><![CDATA[$classes]]></code>\n    </PossiblyUndefinedVariable>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[allowMockingMethodsUnnecessarily]]></code>\n      <code><![CDATA[disableReflectionCache]]></code>\n      <code><![CDATA[enableReflectionCache]]></code>\n      <code><![CDATA[getDefaultMatcher]]></code>\n      <code><![CDATA[getInternalClassMethodParamMap]]></code>\n      <code><![CDATA[mockingMethodsUnnecessarilyAllowed]]></code>\n      <code><![CDATA[resetInternalClassMethodParamMaps]]></code>\n      <code><![CDATA[setInternalClassMethodParamMap]]></code>\n    </PossiblyUnusedMethod>\n    <PropertyTypeCoercion>\n      <code><![CDATA[$this->_internalClassParamMap]]></code>\n      <code><![CDATA[$this->_internalClassParamMap]]></code>\n    </PropertyTypeCoercion>\n    <RedundantCastGivenDocblockType>\n      <code><![CDATA[(bool) $flag]]></code>\n      <code><![CDATA[(bool) $flag]]></code>\n    </RedundantCastGivenDocblockType>\n    <UndefinedClass>\n      <code><![CDATA[Hamcrest_Matcher]]></code>\n    </UndefinedClass>\n  </file>\n  <file src=\"library/Mockery/Container.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[$interfaces]]></code>\n      <code><![CDATA[$type]]></code>\n    </ArgumentTypeCoercion>\n    <DocblockTypeContradiction>\n      <code><![CDATA[$match === false]]></code>\n    </DocblockTypeContradiction>\n    <InvalidArgument>\n      <code><![CDATA[$argument]]></code>\n    </InvalidArgument>\n    <InvalidArrayOffset>\n      <code><![CDATA[$mocks[$index]]]></code>\n    </InvalidArrayOffset>\n    <InvalidCast>\n      <code><![CDATA[$argument]]></code>\n    </InvalidCast>\n    <InvalidPropertyAssignmentValue>\n      <code><![CDATA[$this->_mocks]]></code>\n      <code><![CDATA[$this->_mocks]]></code>\n    </InvalidPropertyAssignmentValue>\n    <InvalidReturnStatement>\n      <code><![CDATA[$this->_mocks[$reference] ?? null]]></code>\n    </InvalidReturnStatement>\n    <InvalidReturnType>\n      <code><![CDATA[null|(LegacyMockInterface&TFetchMock)|(MockInterface&TFetchMock)]]></code>\n    </InvalidReturnType>\n    <LessSpecificReturnStatement>\n      <code><![CDATA[$mock]]></code>\n    </LessSpecificReturnStatement>\n    <LessSpecificReturnType>\n      <code><![CDATA[array]]></code>\n    </LessSpecificReturnType>\n    <MissingClassConstType>\n      <code><![CDATA[BLOCKS = Mockery::BLOCKS]]></code>\n    </MissingClassConstType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[_getInstance]]></code>\n    </MissingThrowsDocblock>\n    <MixedArgument>\n      <code><![CDATA[$className]]></code>\n      <code><![CDATA[$constructorArgs]]></code>\n      <code><![CDATA[$mockConfiguration]]></code>\n      <code><![CDATA[$mockConfiguration]]></code>\n      <code><![CDATA[$mockDefinition]]></code>\n      <code><![CDATA[$quickDefinitions]]></code>\n      <code><![CDATA[$quickDefinitions]]></code>\n      <code><![CDATA[$quickDefinitions]]></code>\n      <code><![CDATA[$quickDefinitions]]></code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code><![CDATA[$argument]]></code>\n      <code><![CDATA[$argument]]></code>\n      <code><![CDATA[$arguments[]]]></code>\n      <code><![CDATA[$blocks]]></code>\n      <code><![CDATA[$className]]></code>\n      <code><![CDATA[$exception]]></code>\n      <code><![CDATA[$exceptions[]]]></code>\n      <code><![CDATA[$mockConfiguration]]></code>\n      <code><![CDATA[$mockDefinition]]></code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code><![CDATA[(LegacyMockInterface&TMockObject)|(MockInterface&TMockObject)]]></code>\n      <code><![CDATA[class-string<TMock>]]></code>\n    </MixedInferredReturnType>\n    <MixedMethodCall>\n      <code><![CDATA[addBlackListedMethod]]></code>\n      <code><![CDATA[addBlackListedMethods]]></code>\n      <code><![CDATA[getClassName]]></code>\n      <code><![CDATA[getMockConfiguration]]></code>\n      <code><![CDATA[mockery_init]]></code>\n      <code><![CDATA[new $internalMockName()]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[setMockOriginalDestructor]]></code>\n    </MixedMethodCall>\n    <MixedReturnStatement>\n      <code><![CDATA[$className]]></code>\n      <code><![CDATA[$className]]></code>\n      <code><![CDATA[$mocks[$index]]]></code>\n    </MixedReturnStatement>\n    <MixedReturnTypeCoercion>\n      <code><![CDATA[$exceptions]]></code>\n      <code><![CDATA[array<Throwable>]]></code>\n    </MixedReturnTypeCoercion>\n    <MoreSpecificReturnType>\n      <code><![CDATA[(TMock&MockInterface)|(TMock&LegacyMockInterface)]]></code>\n    </MoreSpecificReturnType>\n    <PossiblyUndefinedIntArrayOffset>\n      <code><![CDATA[$parts[1]]]></code>\n    </PossiblyUndefinedIntArrayOffset>\n    <PossiblyUndefinedMethod>\n      <code><![CDATA[mockery_thrownExceptions]]></code>\n    </PossiblyUndefinedMethod>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[instanceMock]]></code>\n      <code><![CDATA[mockery_allocateOrder]]></code>\n      <code><![CDATA[mockery_getCurrentOrder]]></code>\n      <code><![CDATA[mockery_getGroups]]></code>\n      <code><![CDATA[mockery_setGroup]]></code>\n    </PossiblyUnusedMethod>\n    <PossiblyUnusedReturnValue>\n      <code><![CDATA[int]]></code>\n    </PossiblyUnusedReturnValue>\n    <UndefinedInterfaceMethod>\n      <code><![CDATA[atLeast]]></code>\n      <code><![CDATA[byDefault]]></code>\n    </UndefinedInterfaceMethod>\n    <UndefinedMagicMethod>\n      <code><![CDATA[atLeast]]></code>\n      <code><![CDATA[byDefault]]></code>\n    </UndefinedMagicMethod>\n  </file>\n  <file src=\"library/Mockery/CountValidator/AtLeast.php\">\n    <InvalidOperand>\n      <code><![CDATA[$n]]></code>\n      <code><![CDATA[$this->_limit]]></code>\n    </InvalidOperand>\n    <InvalidReturnType>\n      <code><![CDATA[bool]]></code>\n    </InvalidReturnType>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function isEligible($n)]]></code>\n      <code><![CDATA[public function validate($n)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/CountValidator/AtMost.php\">\n    <InvalidOperand>\n      <code><![CDATA[$n]]></code>\n      <code><![CDATA[$this->_limit]]></code>\n    </InvalidOperand>\n    <InvalidReturnType>\n      <code><![CDATA[bool]]></code>\n    </InvalidReturnType>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function validate($n)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/CountValidator/CountValidatorAbstract.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[abstract public function validate($n);]]></code>\n      <code><![CDATA[public function isEligible($n)]]></code>\n    </MissingOverrideAttribute>\n    <PossiblyNullPropertyAssignmentValue>\n      <code><![CDATA[null]]></code>\n      <code><![CDATA[null]]></code>\n    </PossiblyNullPropertyAssignmentValue>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[__construct]]></code>\n    </PossiblyUnusedMethod>\n  </file>\n  <file src=\"library/Mockery/CountValidator/CountValidatorInterface.php\">\n    <PossiblyUnusedMethod>\n      <code><![CDATA[isEligible]]></code>\n      <code><![CDATA[validate]]></code>\n    </PossiblyUnusedMethod>\n  </file>\n  <file src=\"library/Mockery/CountValidator/Exact.php\">\n    <InvalidOperand>\n      <code><![CDATA[$n]]></code>\n      <code><![CDATA[$this->_limit]]></code>\n    </InvalidOperand>\n    <InvalidReturnType>\n      <code><![CDATA[bool]]></code>\n    </InvalidReturnType>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function validate($n)]]></code>\n    </MissingOverrideAttribute>\n    <PossiblyNullOperand>\n      <code><![CDATA[$this->_expectation->getExceptionMessage()]]></code>\n    </PossiblyNullOperand>\n    <RiskyTruthyFalsyComparison>\n      <code><![CDATA[$because]]></code>\n    </RiskyTruthyFalsyComparison>\n  </file>\n  <file src=\"library/Mockery/Exception/BadMethodCallException.php\">\n    <MissingReturnType>\n      <code><![CDATA[dismiss]]></code>\n    </MissingReturnType>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[dismissed]]></code>\n    </PossiblyUnusedMethod>\n  </file>\n  <file src=\"library/Mockery/Exception/InvalidArgumentException.php\">\n    <UnusedClass>\n      <code><![CDATA[InvalidArgumentException]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"library/Mockery/Exception/InvalidCountException.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[throw new RuntimeException('Illegal comparative for expected call counts set: ' . $comp);]]></code>\n    </MissingThrowsDocblock>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[getActualCount]]></code>\n      <code><![CDATA[getExpectedCount]]></code>\n      <code><![CDATA[getExpectedCountComparative]]></code>\n      <code><![CDATA[getMethodName]]></code>\n      <code><![CDATA[getMockName]]></code>\n    </PossiblyUnusedMethod>\n  </file>\n  <file src=\"library/Mockery/Exception/InvalidOrderException.php\">\n    <PossiblyUnusedMethod>\n      <code><![CDATA[getActualOrder]]></code>\n      <code><![CDATA[getExpectedOrder]]></code>\n      <code><![CDATA[getMethodName]]></code>\n      <code><![CDATA[getMockName]]></code>\n    </PossiblyUnusedMethod>\n  </file>\n  <file src=\"library/Mockery/Exception/NoMatchingExpectationException.php\">\n    <PossiblyUnusedMethod>\n      <code><![CDATA[getActualArguments]]></code>\n      <code><![CDATA[getMethodName]]></code>\n      <code><![CDATA[getMockName]]></code>\n    </PossiblyUnusedMethod>\n  </file>\n  <file src=\"library/Mockery/Expectation.php\">\n    <DocblockTypeContradiction>\n      <code><![CDATA[! is_int($index)]]></code>\n      <code><![CDATA[$group === null]]></code>\n      <code><![CDATA[$mock instanceof $mockClass]]></code>\n      <code><![CDATA[is_int($limit)]]></code>\n    </DocblockTypeContradiction>\n    <InvalidArgument>\n      <code><![CDATA[$argsOrClosure]]></code>\n    </InvalidArgument>\n    <InvalidOperand>\n      <code><![CDATA[$index]]></code>\n    </InvalidOperand>\n    <InvalidStringClass>\n      <code><![CDATA[new $exception($message, $code, $previous)]]></code>\n      <code><![CDATA[new $this->_countValidatorClass($this, $limit)]]></code>\n    </InvalidStringClass>\n    <LessSpecificReturnType>\n      <code><![CDATA[self]]></code>\n      <code><![CDATA[self]]></code>\n    </LessSpecificReturnType>\n    <MissingClassConstType>\n      <code><![CDATA[ERROR_ZERO_INVOCATION = 'shouldNotReceive(), never(), times(0) chaining additional invocation count methods has been deprecated and will throw an exception in a future version of Mockery']]></code>\n    </MissingClassConstType>\n    <MissingClosureParamType>\n      <code><![CDATA[$args]]></code>\n      <code><![CDATA[$args]]></code>\n    </MissingClosureParamType>\n    <MissingClosureReturnType>\n      <code><![CDATA[static function () use ($args) {]]></code>\n      <code><![CDATA[static function (...$args) use ($index) {]]></code>\n    </MissingClosureReturnType>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function andReturn(...$args)]]></code>\n      <code><![CDATA[public function andReturns(...$args)]]></code>\n      <code><![CDATA[public function getMock()]]></code>\n      <code><![CDATA[public function getOrderNumber()]]></code>\n    </MissingOverrideAttribute>\n    <MissingParamType>\n      <code><![CDATA[$code]]></code>\n      <code><![CDATA[$exception]]></code>\n      <code><![CDATA[$message]]></code>\n    </MissingParamType>\n    <MissingReturnType>\n      <code><![CDATA[andThrows]]></code>\n      <code><![CDATA[between]]></code>\n      <code><![CDATA[getName]]></code>\n    </MissingReturnType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[evaluate]]></code>\n      <code><![CDATA[evaluate]]></code>\n      <code><![CDATA[makeExpectationDefault]]></code>\n      <code><![CDATA[mockery_validateOrder]]></code>\n      <code><![CDATA[mockery_validateOrder]]></code>\n      <code><![CDATA[throw new Exception(\n                'Mock Objects not created from a loaded/existing class are incapable of passing method calls through to a parent class'\n            );]]></code>\n      <code><![CDATA[throw new InvalidArgumentException(\n                'Invalid argument index supplied. Index must be a non-negative integer.'\n            );]]></code>\n      <code><![CDATA[throw new InvalidArgumentException(sprintf(\n            'Call to %s with an invalid argument (%s), only array and closure are allowed',\n            __METHOD__,\n            $argsOrClosure\n        ));]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n    </MissingThrowsDocblock>\n    <MixedArgument>\n      <code><![CDATA[$args]]></code>\n      <code><![CDATA[$args]]></code>\n      <code><![CDATA[$args]]></code>\n      <code><![CDATA[$code]]></code>\n      <code><![CDATA[$exception]]></code>\n      <code><![CDATA[$groups]]></code>\n      <code><![CDATA[$message]]></code>\n      <code><![CDATA[$return]]></code>\n      <code><![CDATA[$this->getName()]]></code>\n      <code><![CDATA[$values]]></code>\n      <code><![CDATA[func_get_args()]]></code>\n      <code><![CDATA[func_get_args()]]></code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code><![CDATA[$firstCorrespondingKey]]></code>\n    </MixedArgumentTypeCoercion>\n    <MixedArrayAccess>\n      <code><![CDATA[$groups[$group]]]></code>\n    </MixedArrayAccess>\n    <MixedAssignment>\n      <code><![CDATA[$_arguments[$position]]]></code>\n      <code><![CDATA[$_arguments[$position]]]></code>\n      <code><![CDATA[$arg]]></code>\n      <code><![CDATA[$expectedArg]]></code>\n      <code><![CDATA[$expectedArg]]></code>\n      <code><![CDATA[$groups]]></code>\n      <code><![CDATA[$lastExpectedArgument]]></code>\n      <code><![CDATA[$newValidators[]]]></code>\n      <code><![CDATA[$result]]></code>\n      <code><![CDATA[$return]]></code>\n      <code><![CDATA[$validator]]></code>\n      <code><![CDATA[$validator]]></code>\n      <code><![CDATA[$validator]]></code>\n      <code><![CDATA[$value]]></code>\n      <code><![CDATA[$values]]></code>\n    </MixedAssignment>\n    <MixedClone>\n      <code><![CDATA[clone $validator]]></code>\n    </MixedClone>\n    <MixedFunctionCall>\n      <code><![CDATA[array_shift($this->_closureQueue)(...$args)]]></code>\n      <code><![CDATA[current($this->_closureQueue)(...$args)]]></code>\n    </MixedFunctionCall>\n    <MixedInferredReturnType>\n      <code><![CDATA[bool]]></code>\n      <code><![CDATA[int]]></code>\n    </MixedInferredReturnType>\n    <MixedMethodCall>\n      <code><![CDATA[isEligible]]></code>\n      <code><![CDATA[mockery_allocateOrder]]></code>\n      <code><![CDATA[mockery_allocateOrder]]></code>\n      <code><![CDATA[mockery_getGroups]]></code>\n      <code><![CDATA[mockery_setGroup]]></code>\n      <code><![CDATA[validate]]></code>\n    </MixedMethodCall>\n    <MixedReturnStatement>\n      <code><![CDATA[$groups[$group]]]></code>\n      <code><![CDATA[$ordering->mockery_allocateOrder()]]></code>\n      <code><![CDATA[$result]]></code>\n    </MixedReturnStatement>\n    <PossiblyFalseArgument>\n      <code><![CDATA[$firstCorrespondingKey]]></code>\n    </PossiblyFalseArgument>\n    <PossiblyInvalidFunctionCall>\n      <code><![CDATA[current($this->_closureQueue)(...$args)]]></code>\n    </PossiblyInvalidFunctionCall>\n    <PossiblyNullArgument>\n      <code><![CDATA[$group]]></code>\n      <code><![CDATA[$group]]></code>\n    </PossiblyNullArgument>\n    <PossiblyNullFunctionCall>\n      <code><![CDATA[array_shift($this->_closureQueue)(...$args)]]></code>\n    </PossiblyNullFunctionCall>\n    <PossiblyNullPropertyAssignmentValue>\n      <code><![CDATA[null]]></code>\n      <code><![CDATA[null]]></code>\n      <code><![CDATA[null]]></code>\n      <code><![CDATA[null]]></code>\n    </PossiblyNullPropertyAssignmentValue>\n    <PossiblyUndefinedMethod>\n      <code><![CDATA[mockery_isInstance]]></code>\n    </PossiblyUndefinedMethod>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[andReturnArg]]></code>\n      <code><![CDATA[andReturnFalse]]></code>\n      <code><![CDATA[andReturnNull]]></code>\n      <code><![CDATA[andReturnSelf]]></code>\n      <code><![CDATA[andReturnTrue]]></code>\n      <code><![CDATA[andReturnUndefined]]></code>\n      <code><![CDATA[andReturnUsing]]></code>\n      <code><![CDATA[andThrowExceptions]]></code>\n      <code><![CDATA[andThrows]]></code>\n      <code><![CDATA[andYield]]></code>\n      <code><![CDATA[because]]></code>\n      <code><![CDATA[between]]></code>\n      <code><![CDATA[byDefault]]></code>\n      <code><![CDATA[globally]]></code>\n      <code><![CDATA[isCallCountConstrained]]></code>\n      <code><![CDATA[isEligible]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[passthru]]></code>\n      <code><![CDATA[set]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[withSomeOfArgs]]></code>\n      <code><![CDATA[zeroOrMoreTimes]]></code>\n    </PossiblyUnusedMethod>\n    <PossiblyUnusedProperty>\n      <code><![CDATA[$_returnValue]]></code>\n    </PossiblyUnusedProperty>\n    <PossiblyUnusedReturnValue>\n      <code><![CDATA[mixed]]></code>\n      <code><![CDATA[self]]></code>\n    </PossiblyUnusedReturnValue>\n    <RedundantConditionGivenDocblockType>\n      <code><![CDATA[$argsOrClosure instanceof Closure]]></code>\n    </RedundantConditionGivenDocblockType>\n    <TooManyArguments>\n      <code><![CDATA[mockery_validateOrder]]></code>\n    </TooManyArguments>\n    <UndefinedClass>\n      <code><![CDATA[Hamcrest_Matcher]]></code>\n    </UndefinedClass>\n    <UndefinedInterfaceMethod>\n      <code><![CDATA[mockery_callSubjectMethod]]></code>\n      <code><![CDATA[mockery_returnValueForMethod]]></code>\n    </UndefinedInterfaceMethod>\n    <UnusedMethod>\n      <code><![CDATA[isAndAnyOtherArgumentsMatcher]]></code>\n    </UnusedMethod>\n  </file>\n  <file src=\"library/Mockery/ExpectationDirector.php\">\n    <MissingReturnType>\n      <code><![CDATA[addExpectation]]></code>\n    </MissingReturnType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[throw $exception;]]></code>\n    </MissingThrowsDocblock>\n    <MixedMethodCall>\n      <code><![CDATA[verifyCall]]></code>\n    </MixedMethodCall>\n    <PossiblyNullPropertyAssignmentValue>\n      <code><![CDATA[null]]></code>\n      <code><![CDATA[null]]></code>\n      <code><![CDATA[null]]></code>\n    </PossiblyNullPropertyAssignmentValue>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[call]]></code>\n      <code><![CDATA[getExpectationCount]]></code>\n      <code><![CDATA[verify]]></code>\n    </PossiblyUnusedMethod>\n    <PossiblyUnusedProperty>\n      <code><![CDATA[$_expectedOrder]]></code>\n    </PossiblyUnusedProperty>\n    <UndefinedInterfaceMethod>\n      <code><![CDATA[isCallCountConstrained]]></code>\n      <code><![CDATA[isEligible]]></code>\n      <code><![CDATA[matchArgs]]></code>\n      <code><![CDATA[matchArgs]]></code>\n      <code><![CDATA[verify]]></code>\n      <code><![CDATA[verify]]></code>\n    </UndefinedInterfaceMethod>\n  </file>\n  <file src=\"library/Mockery/ExpectationInterface.php\">\n    <PossiblyUnusedReturnValue>\n      <code><![CDATA[self]]></code>\n    </PossiblyUnusedReturnValue>\n  </file>\n  <file src=\"library/Mockery/ExpectsHigherOrderMessage.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function __call($method, $args)]]></code>\n    </MissingOverrideAttribute>\n    <MixedInferredReturnType>\n      <code><![CDATA[Expectation|ExpectationInterface|HigherOrderMessage]]></code>\n    </MixedInferredReturnType>\n    <MixedReturnStatement>\n      <code><![CDATA[$expectation->once()]]></code>\n    </MixedReturnStatement>\n    <UndefinedInterfaceMethod>\n      <code><![CDATA[once]]></code>\n    </UndefinedInterfaceMethod>\n    <UndefinedMagicMethod>\n      <code><![CDATA[once]]></code>\n    </UndefinedMagicMethod>\n  </file>\n  <file src=\"library/Mockery/Generator/CachingGenerator.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function generate(MockConfiguration $config)]]></code>\n    </MissingOverrideAttribute>\n    <MixedInferredReturnType>\n      <code><![CDATA[string]]></code>\n    </MixedInferredReturnType>\n    <MixedPropertyTypeCoercion>\n      <code><![CDATA[$this->cache]]></code>\n    </MixedPropertyTypeCoercion>\n    <MixedReturnStatement>\n      <code><![CDATA[$this->cache[$hash] = $this->generator->generate($config)]]></code>\n    </MixedReturnStatement>\n  </file>\n  <file src=\"library/Mockery/Generator/DefinedTargetClass.php\">\n    <LessSpecificReturnStatement>\n      <code><![CDATA[array_unique(\n            array_merge(\n                ['\\AllowDynamicProperties'],\n                array_map(\n                    static function (ReflectionAttribute $attribute): string {\n                        return '\\\\' . $attribute->getName();\n                    },\n                    $this->rfc->getAttributes()\n                )\n            )\n        )]]></code>\n    </LessSpecificReturnStatement>\n    <LessSpecificReturnType>\n      <code><![CDATA[string]]></code>\n    </LessSpecificReturnType>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function getAttributes()]]></code>\n      <code><![CDATA[public function getInterfaces()]]></code>\n      <code><![CDATA[public function getMethods()]]></code>\n      <code><![CDATA[public function getName()]]></code>\n      <code><![CDATA[public function getNamespaceName()]]></code>\n      <code><![CDATA[public function getShortName()]]></code>\n      <code><![CDATA[public function hasInternalAncestor()]]></code>\n      <code><![CDATA[public function implementsInterface($interface)]]></code>\n      <code><![CDATA[public function inNamespace()]]></code>\n      <code><![CDATA[public function isAbstract()]]></code>\n      <code><![CDATA[public function isFinal()]]></code>\n      <code><![CDATA[public static function factory($name, $alias = null)]]></code>\n    </MissingOverrideAttribute>\n    <MoreSpecificImplementedParamType>\n      <code><![CDATA[$interface]]></code>\n    </MoreSpecificImplementedParamType>\n    <MoreSpecificReturnType>\n      <code><![CDATA[list<class-string>]]></code>\n    </MoreSpecificReturnType>\n  </file>\n  <file src=\"library/Mockery/Generator/Generator.php\">\n    <MissingReturnType>\n      <code><![CDATA[generate]]></code>\n    </MissingReturnType>\n  </file>\n  <file src=\"library/Mockery/Generator/Method.php\">\n    <PossiblyUnusedMethod>\n      <code><![CDATA[__call]]></code>\n    </PossiblyUnusedMethod>\n  </file>\n  <file src=\"library/Mockery/Generator/MockConfiguration.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[$target]]></code>\n      <code><![CDATA[$target]]></code>\n      <code><![CDATA[$targetInterface]]></code>\n      <code><![CDATA[$targetTrait]]></code>\n      <code><![CDATA[$targets]]></code>\n      <code><![CDATA[$this->targetClassName]]></code>\n      <code><![CDATA['\\\\Iterator']]></code>\n      <code><![CDATA['\\\\IteratorAggregate']]></code>\n      <code><![CDATA['\\\\IteratorAggregate']]></code>\n    </ArgumentTypeCoercion>\n    <InvalidArgument>\n      <code><![CDATA[$targets]]></code>\n    </InvalidArgument>\n    <InvalidPropertyAssignmentValue>\n      <code><![CDATA[$this->targetTraits]]></code>\n      <code><![CDATA[array_unique($this->targetTraits)]]></code>\n    </InvalidPropertyAssignmentValue>\n    <LessSpecificReturnStatement>\n      <code><![CDATA[$this->allMethods = $methods]]></code>\n      <code><![CDATA[$this->targetInterfaces]]></code>\n      <code><![CDATA[$this->targetInterfaces = array_unique($this->targetInterfaces)]]></code>\n      <code><![CDATA[$this->targetTraits]]></code>\n      <code><![CDATA[$this->targetTraits]]></code>\n      <code><![CDATA[array_filter($methods, static function ($method) use ($whitelist) {\n                if ($method->isAbstract()) {\n                    return true;\n                }\n\n                return in_array(strtolower($method->getName()), $whitelist, true);\n            })]]></code>\n    </LessSpecificReturnStatement>\n    <MissingPropertyType>\n      <code><![CDATA[$blackListedMethods]]></code>\n      <code><![CDATA[$constantsMap]]></code>\n    </MissingPropertyType>\n    <MissingReturnType>\n      <code><![CDATA[addTarget]]></code>\n      <code><![CDATA[addTargetInterfaceName]]></code>\n      <code><![CDATA[addTargetTraitName]]></code>\n      <code><![CDATA[addTargets]]></code>\n      <code><![CDATA[setTargetClassName]]></code>\n      <code><![CDATA[setTargetObject]]></code>\n    </MissingReturnType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[throw new Exception(\n                    'The class ' . $this->targetClassName . ' is marked final and its methods'\n                    . ' cannot be replaced. Classes marked final can be passed in'\n                    . ' to \\Mockery::mock() as instantiated objects to create a'\n                    . ' partial mock, but only if the mock is not subject to type'\n                    . ' hinting checks.'\n                );]]></code>\n    </MissingThrowsDocblock>\n    <MixedArgument>\n      <code><![CDATA[$alias]]></code>\n      <code><![CDATA[$alias]]></code>\n      <code><![CDATA[$this->blackListedMethods]]></code>\n      <code><![CDATA[$this->constantsMap]]></code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code><![CDATA[$alias]]></code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code><![CDATA[array<string,scalar|array<scalar>>]]></code>\n      <code><![CDATA[array<string>]]></code>\n    </MixedInferredReturnType>\n    <MixedMethodCall>\n      <code><![CDATA[addPart]]></code>\n      <code><![CDATA[build]]></code>\n    </MixedMethodCall>\n    <MixedReturnStatement>\n      <code><![CDATA[$this->blackListedMethods]]></code>\n      <code><![CDATA[$this->constantsMap]]></code>\n    </MixedReturnStatement>\n    <MoreSpecificReturnType>\n      <code><![CDATA[list<Method>]]></code>\n      <code><![CDATA[list<Method>]]></code>\n      <code><![CDATA[list<TargetClassInterface>]]></code>\n      <code><![CDATA[list<TargetClassInterface>]]></code>\n    </MoreSpecificReturnType>\n    <PossiblyNullArgument>\n      <code><![CDATA[$this->getName()]]></code>\n      <code><![CDATA[$this->getName()]]></code>\n    </PossiblyNullArgument>\n    <PossiblyUndefinedIntArrayOffset>\n      <code><![CDATA[$params[1]]]></code>\n    </PossiblyUndefinedIntArrayOffset>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[getParameterOverrides]]></code>\n    </PossiblyUnusedMethod>\n    <PropertyTypeCoercion>\n      <code><![CDATA[$methods]]></code>\n    </PropertyTypeCoercion>\n  </file>\n  <file src=\"library/Mockery/Generator/MockConfigurationBuilder.php\">\n    <MissingParamType>\n      <code><![CDATA[$whiteListedMethod]]></code>\n    </MissingParamType>\n    <MissingReturnType>\n      <code><![CDATA[setInstanceMock]]></code>\n      <code><![CDATA[setMockOriginalDestructor]]></code>\n      <code><![CDATA[setName]]></code>\n    </MissingReturnType>\n    <MixedArgumentTypeCoercion>\n      <code><![CDATA[$this->constantsMap]]></code>\n      <code><![CDATA[$this->parameterOverrides]]></code>\n      <code><![CDATA[$this->targets]]></code>\n      <code><![CDATA[$this->whiteListedMethods]]></code>\n    </MixedArgumentTypeCoercion>\n    <MixedAssignment>\n      <code><![CDATA[$method]]></code>\n    </MixedAssignment>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[addBlackListedMethods]]></code>\n      <code><![CDATA[addWhiteListedMethods]]></code>\n      <code><![CDATA[setBlackListedMethods]]></code>\n      <code><![CDATA[setMockOriginalDestructor]]></code>\n      <code><![CDATA[setWhiteListedMethods]]></code>\n    </PossiblyUnusedMethod>\n    <PropertyNotSetInConstructor>\n      <code><![CDATA[$name]]></code>\n    </PropertyNotSetInConstructor>\n    <PropertyTypeCoercion>\n      <code><![CDATA[array_diff($this->blackListedMethods, $this->php7SemiReservedKeywords)]]></code>\n    </PropertyTypeCoercion>\n    <RedundantCastGivenDocblockType>\n      <code><![CDATA[(bool) $instanceMock]]></code>\n      <code><![CDATA[(bool) $mockDestructor]]></code>\n    </RedundantCastGivenDocblockType>\n  </file>\n  <file src=\"library/Mockery/Generator/MockDefinition.php\">\n    <InvalidNullableReturnType>\n      <code><![CDATA[string]]></code>\n    </InvalidNullableReturnType>\n    <NullableReturnStatement>\n      <code><![CDATA[$this->config->getName()]]></code>\n    </NullableReturnStatement>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[getConfig]]></code>\n    </PossiblyUnusedMethod>\n    <RiskyTruthyFalsyComparison>\n      <code><![CDATA[! $config->getName()]]></code>\n    </RiskyTruthyFalsyComparison>\n  </file>\n  <file src=\"library/Mockery/Generator/MockNameBuilder.php\">\n    <MissingReturnType>\n      <code><![CDATA[addPart]]></code>\n    </MissingReturnType>\n  </file>\n  <file src=\"library/Mockery/Generator/Parameter.php\">\n    <InvalidArgument>\n      <code><![CDATA[false]]></code>\n    </InvalidArgument>\n    <InvalidOperand>\n      <code><![CDATA[self::$parameterCounter++]]></code>\n    </InvalidOperand>\n    <InvalidReturnStatement>\n      <code><![CDATA[class_exists($typeHint) ? DefinedTargetClass::factory($typeHint, false) : null]]></code>\n    </InvalidReturnStatement>\n    <InvalidReturnType>\n      <code><![CDATA[null|ReflectionClass]]></code>\n    </InvalidReturnType>\n    <PossiblyNullArgument>\n      <code><![CDATA[$typeHint]]></code>\n    </PossiblyNullArgument>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[__call]]></code>\n      <code><![CDATA[getClass]]></code>\n      <code><![CDATA[getTypeHintAsString]]></code>\n    </PossiblyUnusedMethod>\n  </file>\n  <file src=\"library/Mockery/Generator/StringManipulation/Pass/AvoidMethodClashPass.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Generator/StringManipulation/Pass/CallTypeHintPass.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Generator/StringManipulation/Pass/ClassAttributesPass.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Generator/StringManipulation/Pass/ClassNamePass.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Generator/StringManipulation/Pass/ClassPass.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[$className]]></code>\n    </ArgumentTypeCoercion>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Generator/StringManipulation/Pass/ConstantsPass.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>\n    </MissingOverrideAttribute>\n    <MixedAssignment>\n      <code><![CDATA[$value]]></code>\n    </MixedAssignment>\n    <PossiblyInvalidIterator>\n      <code><![CDATA[$cm[$name]]]></code>\n    </PossiblyInvalidIterator>\n    <PossiblyNullArgument>\n      <code><![CDATA[$name]]></code>\n    </PossiblyNullArgument>\n  </file>\n  <file src=\"library/Mockery/Generator/StringManipulation/Pass/InstanceMockPass.php\">\n    <MissingClassConstType>\n      <code><![CDATA[INSTANCE_MOCK_CODE = <<<MOCK\n\n    protected \\$_mockery_ignoreVerification = true;\n\n    public function __construct()\n    {\n        \\$this->_mockery_ignoreVerification = false;\n        \\$associatedRealObject = \\Mockery::fetchMock(__CLASS__);\n\n        foreach (get_object_vars(\\$this) as \\$attr => \\$val) {\n            if (\\$attr !== \"_mockery_ignoreVerification\" && \\$attr !== \"_mockery_expectations\") {\n                \\$this->\\$attr = \\$associatedRealObject->\\$attr;\n            }\n        }\n\n        \\$directors = \\$associatedRealObject->mockery_getExpectations();\n        foreach (\\$directors as \\$method=>\\$director) {\n            // get the director method needed\n            \\$existingDirector = \\$this->mockery_getExpectationsFor(\\$method);\n            if (!\\$existingDirector) {\n                \\$existingDirector = new \\Mockery\\ExpectationDirector(\\$method, \\$this);\n                \\$this->mockery_setExpectationsFor(\\$method, \\$existingDirector);\n            }\n            \\$expectations = \\$director->getExpectations();\n            foreach (\\$expectations as \\$expectation) {\n                \\$clonedExpectation = clone \\$expectation;\n                \\$existingDirector->addExpectation(\\$clonedExpectation);\n            }\n            \\$defaultExpectations = \\$director->getDefaultExpectations();\n            foreach (array_reverse(\\$defaultExpectations) as \\$expectation) {\n                \\$clonedExpectation = clone \\$expectation;\n                \\$existingDirector->addExpectation(\\$clonedExpectation);\n                \\$existingDirector->makeExpectationDefault(\\$clonedExpectation);\n            }\n        }\n        \\Mockery::getContainer()->rememberMock(\\$this);\n\n        \\$this->_mockery_constructorCalled(func_get_args());\n    }\nMOCK]]></code>\n    </MissingClassConstType>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>\n    </MissingOverrideAttribute>\n    <MissingParamType>\n      <code><![CDATA[$class]]></code>\n      <code><![CDATA[$code]]></code>\n    </MissingParamType>\n    <MissingReturnType>\n      <code><![CDATA[appendToClass]]></code>\n    </MissingReturnType>\n    <MixedArgument>\n      <code><![CDATA[$class]]></code>\n      <code><![CDATA[$class]]></code>\n    </MixedArgument>\n    <MixedInferredReturnType>\n      <code><![CDATA[string]]></code>\n    </MixedInferredReturnType>\n    <MixedOperand>\n      <code><![CDATA[$code]]></code>\n    </MixedOperand>\n    <MixedReturnStatement>\n      <code><![CDATA[$this->appendToClass($code, static::INSTANCE_MOCK_CODE)]]></code>\n    </MixedReturnStatement>\n    <PossiblyFalseArgument>\n      <code><![CDATA[$lastBrace]]></code>\n    </PossiblyFalseArgument>\n  </file>\n  <file src=\"library/Mockery/Generator/StringManipulation/Pass/InterfacePass.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[$name]]></code>\n    </ArgumentTypeCoercion>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>\n    </MissingOverrideAttribute>\n    <MixedArgument>\n      <code><![CDATA[$i->getName()]]></code>\n    </MixedArgument>\n    <MixedMethodCall>\n      <code><![CDATA[getName]]></code>\n    </MixedMethodCall>\n    <MixedOperand>\n      <code><![CDATA[$code]]></code>\n    </MixedOperand>\n  </file>\n  <file src=\"library/Mockery/Generator/StringManipulation/Pass/MagicMethodTypeHintsPass.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[$this->getDeclarationRegex($method->getName())]]></code>\n      <code><![CDATA[$this->getDeclarationRegex($method->getName())]]></code>\n      <code><![CDATA[$this->getDeclarationRegex($method->getName())]]></code>\n    </ArgumentTypeCoercion>\n    <InvalidArgument>\n      <code><![CDATA[$code]]></code>\n      <code><![CDATA[$code]]></code>\n      <code><![CDATA[$code]]></code>\n      <code><![CDATA[$code]]></code>\n    </InvalidArgument>\n    <InvalidReturnStatement>\n      <code><![CDATA[$code]]></code>\n    </InvalidReturnStatement>\n    <InvalidReturnType>\n      <code><![CDATA[string]]></code>\n    </InvalidReturnType>\n    <LessSpecificReturnType>\n      <code><![CDATA[array]]></code>\n      <code><![CDATA[string]]></code>\n      <code><![CDATA[string]]></code>\n    </LessSpecificReturnType>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>\n    </MissingOverrideAttribute>\n    <MissingReturnType>\n      <code><![CDATA[renderTypeHint]]></code>\n    </MissingReturnType>\n    <MixedArgument>\n      <code><![CDATA[$method]]></code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$name]]></code>\n    </MixedAssignment>\n    <MixedOperand>\n      <code><![CDATA[$name]]></code>\n      <code><![CDATA[$this->renderTypeHint($parameter)]]></code>\n    </MixedOperand>\n    <PossiblyUndefinedIntArrayOffset>\n      <code><![CDATA[$matches[0]]]></code>\n    </PossiblyUndefinedIntArrayOffset>\n  </file>\n  <file src=\"library/Mockery/Generator/StringManipulation/Pass/MethodDefinitionPass.php\">\n    <InvalidCast>\n      <code><![CDATA[$param]]></code>\n    </InvalidCast>\n    <InvalidMethodCall>\n      <code><![CDATA[getName]]></code>\n      <code><![CDATA[isPassedByReference]]></code>\n    </InvalidMethodCall>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>\n    </MissingOverrideAttribute>\n    <MissingParamType>\n      <code><![CDATA[$class]]></code>\n      <code><![CDATA[$code]]></code>\n      <code><![CDATA[$config]]></code>\n      <code><![CDATA[$config]]></code>\n      <code><![CDATA[$method]]></code>\n    </MissingParamType>\n    <MissingReturnType>\n      <code><![CDATA[appendToClass]]></code>\n      <code><![CDATA[renderMethodBody]]></code>\n      <code><![CDATA[renderParams]]></code>\n      <code><![CDATA[renderReturnType]]></code>\n      <code><![CDATA[renderTypeHint]]></code>\n    </MissingReturnType>\n    <MixedArgument>\n      <code><![CDATA[$class]]></code>\n      <code><![CDATA[$class]]></code>\n      <code><![CDATA[$class->getName()]]></code>\n      <code><![CDATA[$method->getParameters()]]></code>\n      <code><![CDATA[$overrides[$class_name][$method->getName()]]]></code>\n      <code><![CDATA[$overrides[strtolower($class->getName())][$method->getName()]]]></code>\n    </MixedArgument>\n    <MixedArgumentTypeCoercion>\n      <code><![CDATA[$param]]></code>\n    </MixedArgumentTypeCoercion>\n    <MixedArrayAccess>\n      <code><![CDATA[$overrides[$class_name]]]></code>\n      <code><![CDATA[$overrides[$class_name][$method->getName()]]]></code>\n      <code><![CDATA[$overrides[strtolower($class->getName())]]]></code>\n      <code><![CDATA[$overrides[strtolower($class->getName())][$method->getName()]]]></code>\n    </MixedArrayAccess>\n    <MixedArrayOffset>\n      <code><![CDATA[$overrides[$class_name][$method->getName()]]]></code>\n      <code><![CDATA[$overrides[$class_name][$method->getName()]]]></code>\n    </MixedArrayOffset>\n    <MixedAssignment>\n      <code><![CDATA[$class]]></code>\n      <code><![CDATA[$code]]></code>\n      <code><![CDATA[$defaultValue]]></code>\n      <code><![CDATA[$overrides]]></code>\n      <code><![CDATA[$overrides]]></code>\n      <code><![CDATA[$paramDef]]></code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code><![CDATA[string]]></code>\n    </MixedInferredReturnType>\n    <MixedMethodCall>\n      <code><![CDATA[getDeclaringClass]]></code>\n      <code><![CDATA[getName]]></code>\n      <code><![CDATA[getName]]></code>\n      <code><![CDATA[getName]]></code>\n      <code><![CDATA[getParameterOverrides]]></code>\n      <code><![CDATA[getParameterOverrides]]></code>\n      <code><![CDATA[getParameters]]></code>\n      <code><![CDATA[getReturnType]]></code>\n      <code><![CDATA[isStatic]]></code>\n    </MixedMethodCall>\n    <MixedOperand>\n      <code><![CDATA[$code]]></code>\n      <code><![CDATA[$paramDef]]></code>\n      <code><![CDATA[$this->renderMethodBody($method, $config)]]></code>\n      <code><![CDATA[$this->renderParams($method, $config)]]></code>\n      <code><![CDATA[$this->renderReturnType($method)]]></code>\n    </MixedOperand>\n    <MixedReturnStatement>\n      <code><![CDATA[$code]]></code>\n    </MixedReturnStatement>\n    <PossiblyFalseArgument>\n      <code><![CDATA[$lastBrace]]></code>\n    </PossiblyFalseArgument>\n    <PossiblyUndefinedIntArrayOffset>\n      <code><![CDATA[$matches[1]]]></code>\n    </PossiblyUndefinedIntArrayOffset>\n    <RedundantIdentityWithTrue>\n      <code><![CDATA[$param->isDefaultValueAvailable() !== false]]></code>\n    </RedundantIdentityWithTrue>\n    <RiskyTruthyFalsyComparison>\n      <code><![CDATA[$type]]></code>\n    </RiskyTruthyFalsyComparison>\n    <TypeDoesNotContainType>\n      <code><![CDATA[strpos($param, '&') !== false]]></code>\n    </TypeDoesNotContainType>\n  </file>\n  <file src=\"library/Mockery/Generator/StringManipulation/Pass/RemoveBuiltinMethodsThatAreFinalPass.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>\n    </MissingOverrideAttribute>\n    <MissingPropertyType>\n      <code><![CDATA[$methods]]></code>\n    </MissingPropertyType>\n    <MixedArgument>\n      <code><![CDATA[$this->methods[$method->getName()]]]></code>\n    </MixedArgument>\n    <MixedArrayAccess>\n      <code><![CDATA[$this->methods[$method->getName()]]]></code>\n    </MixedArrayAccess>\n  </file>\n  <file src=\"library/Mockery/Generator/StringManipulation/Pass/RemoveDestructorPass.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Generator/StringManipulation/Pass/RemoveUnserializeForInternalSerializableClassesPass.php\">\n    <MissingClassConstType>\n      <code><![CDATA[DUMMY_METHOD_DEFINITION = 'public function unserialize(string $data): void {} ']]></code>\n      <code><![CDATA[DUMMY_METHOD_DEFINITION_LEGACY = 'public function unserialize($string) {} ']]></code>\n    </MissingClassConstType>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>\n    </MissingOverrideAttribute>\n    <MissingParamType>\n      <code><![CDATA[$class]]></code>\n      <code><![CDATA[$code]]></code>\n    </MissingParamType>\n    <MissingReturnType>\n      <code><![CDATA[appendToClass]]></code>\n    </MissingReturnType>\n    <MixedArgument>\n      <code><![CDATA[$class]]></code>\n      <code><![CDATA[$class]]></code>\n    </MixedArgument>\n    <MixedInferredReturnType>\n      <code><![CDATA[string]]></code>\n    </MixedInferredReturnType>\n    <MixedOperand>\n      <code><![CDATA[$code]]></code>\n    </MixedOperand>\n    <MixedReturnStatement>\n      <code><![CDATA[$this->appendToClass(\n            $code,\n            PHP_VERSION_ID < 80100 ? self::DUMMY_METHOD_DEFINITION_LEGACY : self::DUMMY_METHOD_DEFINITION\n        )]]></code>\n    </MixedReturnStatement>\n    <PossiblyFalseArgument>\n      <code><![CDATA[$lastBrace]]></code>\n    </PossiblyFalseArgument>\n  </file>\n  <file src=\"library/Mockery/Generator/StringManipulation/Pass/TraitPass.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function apply($code, MockConfiguration $config)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Generator/StringManipulationGenerator.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[$className]]></code>\n    </ArgumentTypeCoercion>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function generate(MockConfiguration $config)]]></code>\n    </MissingOverrideAttribute>\n    <MissingThrowsDocblock>\n      <code><![CDATA[new MockDefinition($namedConfig, $code)]]></code>\n    </MissingThrowsDocblock>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[addPass]]></code>\n    </PossiblyUnusedMethod>\n    <RiskyTruthyFalsyComparison>\n      <code><![CDATA[$config->getName()]]></code>\n    </RiskyTruthyFalsyComparison>\n    <UnsafeInstantiation>\n      <code><![CDATA[new static([\n            new CallTypeHintPass(),\n            new MagicMethodTypeHintsPass(),\n            new ClassPass(),\n            new TraitPass(),\n            new ClassNamePass(),\n            new InstanceMockPass(),\n            new InterfacePass(),\n            new AvoidMethodClashPass(),\n            new MethodDefinitionPass(),\n            new RemoveUnserializeForInternalSerializableClassesPass(),\n            new RemoveBuiltinMethodsThatAreFinalPass(),\n            new RemoveDestructorPass(),\n            new ConstantsPass(),\n            new ClassAttributesPass(),\n        ])]]></code>\n    </UnsafeInstantiation>\n  </file>\n  <file src=\"library/Mockery/Generator/TargetClassInterface.php\">\n    <PossiblyUnusedMethod>\n      <code><![CDATA[getShortName]]></code>\n      <code><![CDATA[inNamespace]]></code>\n      <code><![CDATA[isAbstract]]></code>\n    </PossiblyUnusedMethod>\n  </file>\n  <file src=\"library/Mockery/Generator/UndefinedTargetClass.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function getAttributes()]]></code>\n      <code><![CDATA[public function getInterfaces()]]></code>\n      <code><![CDATA[public function getMethods()]]></code>\n      <code><![CDATA[public function getName()]]></code>\n      <code><![CDATA[public function getNamespaceName()]]></code>\n      <code><![CDATA[public function getShortName()]]></code>\n      <code><![CDATA[public function hasInternalAncestor()]]></code>\n      <code><![CDATA[public function implementsInterface($interface)]]></code>\n      <code><![CDATA[public function inNamespace()]]></code>\n      <code><![CDATA[public function isAbstract()]]></code>\n      <code><![CDATA[public function isFinal()]]></code>\n      <code><![CDATA[public static function factory($name)]]></code>\n    </MissingOverrideAttribute>\n    <MoreSpecificImplementedParamType>\n      <code><![CDATA[$interface]]></code>\n    </MoreSpecificImplementedParamType>\n  </file>\n  <file src=\"library/Mockery/HigherOrderMessage.php\">\n    <MissingParamType>\n      <code><![CDATA[$method]]></code>\n    </MissingParamType>\n    <MixedAssignment>\n      <code><![CDATA[$expectation]]></code>\n      <code><![CDATA[$this->method]]></code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code><![CDATA[Expectation|ExpectationInterface|HigherOrderMessage]]></code>\n    </MixedInferredReturnType>\n    <MixedMethodCall>\n      <code><![CDATA[withArgs]]></code>\n    </MixedMethodCall>\n    <MixedReturnStatement>\n      <code><![CDATA[$expectation->withArgs($args)]]></code>\n      <code><![CDATA[$this->mock->{$this->method}($method, $args)]]></code>\n    </MixedReturnStatement>\n  </file>\n  <file src=\"library/Mockery/Instantiator.php\">\n    <LessSpecificReturnType>\n      <code><![CDATA[Closure]]></code>\n    </LessSpecificReturnType>\n    <MissingClosureReturnType>\n      <code><![CDATA[static function () use ($serializedString) {]]></code>\n    </MissingClosureReturnType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[attemptInstantiationViaUnSerialization]]></code>\n      <code><![CDATA[getReflectionClass]]></code>\n    </MissingThrowsDocblock>\n    <MixedArgument>\n      <code><![CDATA[static function ($code, $message, $file, $line) use ($reflectionClass, &$error): void {\n            $msg = sprintf(\n                'Could not produce an instance of \"%s\" via un-serialization, since an error was triggered in file \"%s\" at line \"%d\"',\n                $reflectionClass->getName(),\n                $file,\n                $line\n            );\n\n            $error = new UnexpectedValueException($msg, 0, new Exception($message, $code));\n        }]]></code>\n    </MixedArgument>\n    <MixedInferredReturnType>\n      <code><![CDATA[TClass]]></code>\n    </MixedInferredReturnType>\n    <MixedReturnStatement>\n      <code><![CDATA[$this->buildFactory($className)()]]></code>\n    </MixedReturnStatement>\n    <UndefinedVariable>\n      <code><![CDATA[$error]]></code>\n      <code><![CDATA[$error]]></code>\n    </UndefinedVariable>\n    <UnusedMethod>\n      <code><![CDATA[hasInternalAncestors]]></code>\n    </UnusedMethod>\n  </file>\n  <file src=\"library/Mockery/LegacyMockInterface.php\">\n    <InvalidParamDefault>\n      <code><![CDATA[string]]></code>\n      <code><![CDATA[string]]></code>\n    </InvalidParamDefault>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[mockery_allocateOrder]]></code>\n      <code><![CDATA[mockery_findExpectation]]></code>\n      <code><![CDATA[mockery_getCurrentOrder]]></code>\n      <code><![CDATA[mockery_getGroups]]></code>\n      <code><![CDATA[mockery_getMockableProperties]]></code>\n      <code><![CDATA[mockery_init]]></code>\n      <code><![CDATA[mockery_setGroup]]></code>\n      <code><![CDATA[shouldAllowMockingMethod]]></code>\n      <code><![CDATA[shouldAllowMockingProtectedMethods]]></code>\n      <code><![CDATA[shouldDeferMissing]]></code>\n    </PossiblyUnusedMethod>\n    <PossiblyUnusedReturnValue>\n      <code><![CDATA[int]]></code>\n      <code><![CDATA[null|ExpectationDirector]]></code>\n      <code><![CDATA[self]]></code>\n    </PossiblyUnusedReturnValue>\n  </file>\n  <file src=\"library/Mockery/Loader/EvalLoader.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function load(MockDefinition $definition)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Loader/RequireLoader.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function load(MockDefinition $definition)]]></code>\n    </MissingOverrideAttribute>\n    <RiskyTruthyFalsyComparison>\n      <code><![CDATA[glob($this->path . DIRECTORY_SEPARATOR . 'Mockery_*.php')]]></code>\n    </RiskyTruthyFalsyComparison>\n  </file>\n  <file src=\"library/Mockery/Matcher/AndAnyOtherArgs.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Matcher/Any.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Matcher/AnyArgs.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Matcher/AnyOf.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <InvalidArgument>\n      <code><![CDATA[$this->_expected]]></code>\n    </InvalidArgument>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Matcher/Closure.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <InvalidFunctionCall>\n      <code><![CDATA[($this->_expected)($actual)]]></code>\n    </InvalidFunctionCall>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Matcher/Contains.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n    <MixedArgumentTypeCoercion>\n      <code><![CDATA[$actual]]></code>\n    </MixedArgumentTypeCoercion>\n    <UndefinedClass>\n      <code><![CDATA[$this->_expected]]></code>\n      <code><![CDATA[$this->_expected]]></code>\n    </UndefinedClass>\n  </file>\n  <file src=\"library/Mockery/Matcher/Ducktype.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <InvalidArgument>\n      <code><![CDATA[$this->_expected]]></code>\n    </InvalidArgument>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n    <UndefinedClass>\n      <code><![CDATA[$this->_expected]]></code>\n    </UndefinedClass>\n  </file>\n  <file src=\"library/Mockery/Matcher/HasKey.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <InvalidArgument>\n      <code><![CDATA[$this->_expected]]></code>\n      <code><![CDATA[$this->_expected]]></code>\n    </InvalidArgument>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Matcher/HasValue.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <InvalidCast>\n      <code><![CDATA[$this->_expected]]></code>\n    </InvalidCast>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Matcher/IsEqual.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Matcher/IsSame.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Matcher/MatcherAbstract.php\">\n    <MixedPropertyTypeCoercion>\n      <code><![CDATA[$expected]]></code>\n    </MixedPropertyTypeCoercion>\n    <PossiblyNullPropertyAssignmentValue>\n      <code><![CDATA[null]]></code>\n    </PossiblyNullPropertyAssignmentValue>\n    <UndefinedDocblockClass>\n      <code><![CDATA[TExpected]]></code>\n      <code><![CDATA[protected $_expected = null;]]></code>\n    </UndefinedDocblockClass>\n  </file>\n  <file src=\"library/Mockery/Matcher/MultiArgumentClosure.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <InvalidFunctionCall>\n      <code><![CDATA[($this->_expected)(...$actual)]]></code>\n    </InvalidFunctionCall>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Matcher/MustBe.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Matcher/NoArgs.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n    <MixedArgumentTypeCoercion>\n      <code><![CDATA[$actual]]></code>\n    </MixedArgumentTypeCoercion>\n  </file>\n  <file src=\"library/Mockery/Matcher/Not.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Matcher/NotAnyOf.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n    <UndefinedClass>\n      <code><![CDATA[$this->_expected]]></code>\n    </UndefinedClass>\n  </file>\n  <file src=\"library/Mockery/Matcher/Pattern.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <InvalidArgument>\n      <code><![CDATA[$this->_expected]]></code>\n    </InvalidArgument>\n    <InvalidCast>\n      <code><![CDATA[$this->_expected]]></code>\n    </InvalidCast>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/Mockery/Matcher/Subset.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <InvalidOperand>\n      <code><![CDATA[$k]]></code>\n    </InvalidOperand>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n    <MissingPropertyType>\n      <code><![CDATA[$strict]]></code>\n    </MissingPropertyType>\n    <MixedAssignment>\n      <code><![CDATA[$v]]></code>\n    </MixedAssignment>\n    <UnsafeInstantiation>\n      <code><![CDATA[new static($expected, false)]]></code>\n      <code><![CDATA[new static($expected, true)]]></code>\n    </UnsafeInstantiation>\n  </file>\n  <file src=\"library/Mockery/Matcher/Type.php\">\n    <DeprecatedClass>\n      <code><![CDATA[MatcherAbstract]]></code>\n    </DeprecatedClass>\n    <DocblockTypeContradiction>\n      <code><![CDATA[$this->_expected === 'real']]></code>\n      <code><![CDATA[$this->_expected === 'real']]></code>\n    </DocblockTypeContradiction>\n    <InvalidArgument>\n      <code><![CDATA[$this->_expected]]></code>\n      <code><![CDATA[$this->_expected]]></code>\n    </InvalidArgument>\n    <InvalidCast>\n      <code><![CDATA[$this->_expected]]></code>\n    </InvalidCast>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function match(&$actual)]]></code>\n    </MissingOverrideAttribute>\n    <MixedInferredReturnType>\n      <code><![CDATA[bool]]></code>\n    </MixedInferredReturnType>\n    <MixedReturnStatement>\n      <code><![CDATA[$function($actual)]]></code>\n    </MixedReturnStatement>\n    <NoValue>\n      <code><![CDATA[$this->_expected]]></code>\n    </NoValue>\n    <PossiblyInvalidCast>\n      <code><![CDATA[$this->_expected]]></code>\n    </PossiblyInvalidCast>\n    <RedundantConditionGivenDocblockType>\n      <code><![CDATA['is_' . strtolower($this->_expected)]]></code>\n      <code><![CDATA[is_string($this->_expected)]]></code>\n    </RedundantConditionGivenDocblockType>\n    <TypeDoesNotContainType>\n      <code><![CDATA[function_exists($function)]]></code>\n    </TypeDoesNotContainType>\n  </file>\n  <file src=\"library/Mockery/MethodCall.php\">\n    <PossiblyUnusedMethod>\n      <code><![CDATA[getArgs]]></code>\n      <code><![CDATA[getMethod]]></code>\n    </PossiblyUnusedMethod>\n  </file>\n  <file src=\"library/Mockery/Mock.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[$returnType]]></code>\n      <code><![CDATA[$this->_mockery_parentClass]]></code>\n      <code><![CDATA[$this->_mockery_parentClass]]></code>\n      <code><![CDATA[$this->_mockery_parentClass]]></code>\n      <code><![CDATA[$this->_mockery_parentClass]]></code>\n    </ArgumentTypeCoercion>\n    <DocblockTypeContradiction>\n      <code><![CDATA[$method === null]]></code>\n      <code><![CDATA[$method === null]]></code>\n    </DocblockTypeContradiction>\n    <InvalidOperand>\n      <code><![CDATA[$order]]></code>\n      <code><![CDATA[$this->_mockery_currentOrder]]></code>\n    </InvalidOperand>\n    <InvalidReturnStatement>\n      <code><![CDATA[$director]]></code>\n      <code><![CDATA[new HigherOrderMessage($this, 'shouldHaveReceived')]]></code>\n      <code><![CDATA[new HigherOrderMessage($this, 'shouldNotHaveReceived')]]></code>\n    </InvalidReturnStatement>\n    <InvalidReturnType>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldNotHaveReceived]]></code>\n    </InvalidReturnType>\n    <LessSpecificImplementedReturnType>\n      <code><![CDATA[array]]></code>\n    </LessSpecificImplementedReturnType>\n    <MissingClosureParamType>\n      <code><![CDATA[$method]]></code>\n    </MissingClosureParamType>\n    <MissingClosureReturnType>\n      <code><![CDATA[static function ($method) {]]></code>\n      <code><![CDATA[static function () {]]></code>\n    </MissingClosureReturnType>\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function allows($something = [])]]></code>\n      <code><![CDATA[public function byDefault()]]></code>\n      <code><![CDATA[public function expects($something = null)]]></code>\n      <code><![CDATA[public function makePartial()]]></code>\n      <code><![CDATA[public function mockery_allocateOrder()]]></code>\n      <code><![CDATA[public function mockery_findExpectation($method, array $args)]]></code>\n      <code><![CDATA[public function mockery_getContainer()]]></code>\n      <code><![CDATA[public function mockery_getCurrentOrder()]]></code>\n      <code><![CDATA[public function mockery_getExpectationCount()]]></code>\n      <code><![CDATA[public function mockery_getExpectationsFor($method)]]></code>\n      <code><![CDATA[public function mockery_getGroups()]]></code>\n      <code><![CDATA[public function mockery_getMockableMethods()]]></code>\n      <code><![CDATA[public function mockery_getMockableProperties()]]></code>\n      <code><![CDATA[public function mockery_getName()]]></code>\n      <code><![CDATA[public function mockery_init(?Container $container = null, $partialObject = null, $instanceMock = true)]]></code>\n      <code><![CDATA[public function mockery_isAnonymous()]]></code>\n      <code><![CDATA[public function mockery_setCurrentOrder($order)]]></code>\n      <code><![CDATA[public function mockery_setExpectationsFor($method, ExpectationDirector $director)]]></code>\n      <code><![CDATA[public function mockery_setGroup($group, $order)]]></code>\n      <code><![CDATA[public function mockery_teardown()]]></code>\n      <code><![CDATA[public function mockery_validateOrder($method, $order)]]></code>\n      <code><![CDATA[public function mockery_verify()]]></code>\n      <code><![CDATA[public function shouldAllowMockingMethod($method)]]></code>\n      <code><![CDATA[public function shouldAllowMockingProtectedMethods()]]></code>\n      <code><![CDATA[public function shouldDeferMissing()]]></code>\n      <code><![CDATA[public function shouldHaveBeenCalled()]]></code>\n      <code><![CDATA[public function shouldHaveReceived($method = null, $args = null)]]></code>\n      <code><![CDATA[public function shouldIgnoreMissing($returnValue = null, $recursive = false)]]></code>\n      <code><![CDATA[public function shouldNotHaveBeenCalled(?array $args = null)]]></code>\n      <code><![CDATA[public function shouldNotHaveReceived($method = null, $args = null)]]></code>\n      <code><![CDATA[public function shouldNotReceive(...$methodNames)]]></code>\n      <code><![CDATA[public function shouldReceive(...$methodNames)]]></code>\n    </MissingOverrideAttribute>\n    <MissingParamType>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$name]]></code>\n      <code><![CDATA[$name]]></code>\n    </MissingParamType>\n    <MissingPropertyType>\n      <code><![CDATA[$_mockery_allowMockingProtectedMethods]]></code>\n      <code><![CDATA[$_mockery_instanceMock]]></code>\n      <code><![CDATA[$_mockery_receivedMethodCalls]]></code>\n    </MissingPropertyType>\n    <MissingReturnType>\n      <code><![CDATA[_mockery_constructorCalled]]></code>\n      <code><![CDATA[_mockery_findExpectedMethodHandler]]></code>\n      <code><![CDATA[_mockery_getReceivedMethodCalls]]></code>\n      <code><![CDATA[_mockery_handleMethodCall]]></code>\n      <code><![CDATA[_mockery_handleStaticMethodCall]]></code>\n      <code><![CDATA[asUndefined]]></code>\n      <code><![CDATA[hasMethodOverloadingInParentClass]]></code>\n      <code><![CDATA[mockery_getExpectations]]></code>\n      <code><![CDATA[mockery_getMethod]]></code>\n      <code><![CDATA[mockery_isInstance]]></code>\n    </MissingReturnType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[throw $bmce;]]></code>\n      <code><![CDATA[throw $e;]]></code>\n      <code><![CDATA[throw new BadMethodCallException(\n                'Static method ' . $associatedRealObject->mockery_getName() . '::' . $method\n                . '() does not exist on this mock object',\n                0,\n                $badMethodCallException\n            );]]></code>\n    </MissingThrowsDocblock>\n    <MixedArgument>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$name]]></code>\n      <code><![CDATA[$rm]]></code>\n      <code><![CDATA[$this->_mockery_getReceivedMethodCalls()]]></code>\n      <code><![CDATA[$this->_mockery_getReceivedMethodCalls()]]></code>\n    </MixedArgument>\n    <MixedArrayOffset>\n      <code><![CDATA[$this->_mockery_expectations[$method]]]></code>\n      <code><![CDATA[$this->_mockery_expectations[$method]]]></code>\n      <code><![CDATA[$this->_mockery_expectations[$method]]]></code>\n      <code><![CDATA[$this->_mockery_expectations[$method]]]></code>\n      <code><![CDATA[$this->_mockery_groups[$group]]]></code>\n    </MixedArrayOffset>\n    <MixedAssignment>\n      <code><![CDATA[$allowMockingProtectedMethods]]></code>\n      <code><![CDATA[$count]]></code>\n      <code><![CDATA[$director]]></code>\n      <code><![CDATA[$director]]></code>\n      <code><![CDATA[$director]]></code>\n      <code><![CDATA[$director]]></code>\n      <code><![CDATA[$exp]]></code>\n      <code><![CDATA[$exps]]></code>\n      <code><![CDATA[$handler]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$prototype]]></code>\n      <code><![CDATA[$returnValue]]></code>\n      <code><![CDATA[$rm]]></code>\n      <code><![CDATA[$rm]]></code>\n      <code><![CDATA[$rm]]></code>\n    </MixedAssignment>\n    <MixedInferredReturnType>\n      <code><![CDATA[ExpectationDirector|null]]></code>\n      <code><![CDATA[ExpectationInterface|Expectation|ExpectsHigherOrderMessage]]></code>\n      <code><![CDATA[Expectation|null]]></code>\n      <code><![CDATA[int]]></code>\n    </MixedInferredReturnType>\n    <MixedMethodCall>\n      <code><![CDATA[byDefault]]></code>\n      <code><![CDATA[call]]></code>\n      <code><![CDATA[findExpectation]]></code>\n      <code><![CDATA[getExpectationCount]]></code>\n      <code><![CDATA[getExpectations]]></code>\n      <code><![CDATA[getName]]></code>\n      <code><![CDATA[getName]]></code>\n      <code><![CDATA[getName]]></code>\n      <code><![CDATA[getName]]></code>\n      <code><![CDATA[getPrototype]]></code>\n      <code><![CDATA[isAbstract]]></code>\n      <code><![CDATA[isAbstract]]></code>\n      <code><![CDATA[isPrivate]]></code>\n      <code><![CDATA[isProtected]]></code>\n      <code><![CDATA[isProtected]]></code>\n      <code><![CDATA[isProtected]]></code>\n      <code><![CDATA[isPublic]]></code>\n      <code><![CDATA[isPublic]]></code>\n      <code><![CDATA[push]]></code>\n      <code><![CDATA[verify]]></code>\n    </MixedMethodCall>\n    <MixedOperand>\n      <code><![CDATA[$count]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n      <code><![CDATA[$method]]></code>\n    </MixedOperand>\n    <MixedReturnStatement>\n      <code><![CDATA[$count]]></code>\n      <code><![CDATA[$director->findExpectation($args)]]></code>\n      <code><![CDATA[$this->__call('__toString', [])]]></code>\n      <code><![CDATA[$this->_mockery_expectations[$method]]]></code>\n      <code><![CDATA[$this->shouldReceive($something)->once()]]></code>\n    </MixedReturnStatement>\n    <MixedReturnTypeCoercion>\n      <code><![CDATA[$this->_mockery_mockableMethods]]></code>\n      <code><![CDATA[string[]]]></code>\n    </MixedReturnTypeCoercion>\n    <NullableReturnStatement>\n      <code><![CDATA[null]]></code>\n    </NullableReturnStatement>\n    <PossiblyInvalidDocblockTag>\n      <code><![CDATA[@var array $args]]></code>\n      <code><![CDATA[@var string $method]]></code>\n      <code><![CDATA[@var string $method]]></code>\n      <code><![CDATA[@var string $method]]></code>\n    </PossiblyInvalidDocblockTag>\n    <PossiblyNullOperand>\n      <code><![CDATA[$this->_mockery_parentClass]]></code>\n      <code><![CDATA[$this->_mockery_parentClass]]></code>\n      <code><![CDATA[$this->_mockery_parentClass]]></code>\n      <code><![CDATA[$this->_mockery_parentClass]]></code>\n      <code><![CDATA[$this->_mockery_parentClass]]></code>\n    </PossiblyNullOperand>\n    <PossiblyNullPropertyAssignmentValue>\n      <code><![CDATA[null]]></code>\n      <code><![CDATA[null]]></code>\n      <code><![CDATA[null]]></code>\n    </PossiblyNullPropertyAssignmentValue>\n    <PossiblyNullReference>\n      <code><![CDATA[__call]]></code>\n      <code><![CDATA[mockery_getName]]></code>\n    </PossiblyNullReference>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[__callStatic]]></code>\n      <code><![CDATA[_mockery_constructorCalled]]></code>\n      <code><![CDATA[asUndefined]]></code>\n      <code><![CDATA[mockery_callSubjectMethod]]></code>\n      <code><![CDATA[mockery_getExpectations]]></code>\n      <code><![CDATA[mockery_isInstance]]></code>\n      <code><![CDATA[mockery_thrownExceptions]]></code>\n    </PossiblyUnusedMethod>\n    <PossiblyUnusedProperty>\n      <code><![CDATA[$_mockery_name]]></code>\n    </PossiblyUnusedProperty>\n    <PossiblyUnusedReturnValue>\n      <code><![CDATA[ExpectationDirector|null]]></code>\n    </PossiblyUnusedReturnValue>\n    <RedundantCondition>\n      <code><![CDATA[$i->getName() !== 'Stringable']]></code>\n    </RedundantCondition>\n    <RedundantConditionGivenDocblockType>\n      <code><![CDATA[!is_null($this->_mockery_partial)]]></code>\n      <code><![CDATA[$this->_mockery_partial !== null]]></code>\n    </RedundantConditionGivenDocblockType>\n    <RiskyTruthyFalsyComparison>\n      <code><![CDATA[!$this->_mockery_parentClass]]></code>\n      <code><![CDATA[$this->_mockery_parentClass]]></code>\n      <code><![CDATA[$this->_mockery_parentClass]]></code>\n      <code><![CDATA[$this->_mockery_parentClass]]></code>\n    </RiskyTruthyFalsyComparison>\n    <TooManyArguments>\n      <code><![CDATA[shouldIgnoreMissing]]></code>\n      <code><![CDATA[shouldIgnoreMissing]]></code>\n    </TooManyArguments>\n    <UndefinedInterfaceMethod>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[once]]></code>\n    </UndefinedInterfaceMethod>\n    <UndefinedMagicMethod>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[once]]></code>\n    </UndefinedMagicMethod>\n    <UndefinedThisPropertyFetch>\n      <code><![CDATA[$this->_mockery_ignoreVerification]]></code>\n    </UndefinedThisPropertyFetch>\n  </file>\n  <file src=\"library/Mockery/QuickDefinitionsConfiguration.php\">\n    <MissingClassConstType>\n      <code><![CDATA[QUICK_DEFINITIONS_MODE_DEFAULT_EXPECTATION = 'QUICK_DEFINITIONS_MODE_DEFAULT_EXPECTATION']]></code>\n      <code><![CDATA[QUICK_DEFINITIONS_MODE_MOCK_AT_LEAST_ONCE = 'QUICK_DEFINITIONS_MODE_MOCK_AT_LEAST_ONCE']]></code>\n    </MissingClassConstType>\n  </file>\n  <file src=\"library/Mockery/ReceivedMethodCalls.php\">\n    <MissingPropertyType>\n      <code><![CDATA[$methodCalls]]></code>\n    </MissingPropertyType>\n    <MissingReturnType>\n      <code><![CDATA[push]]></code>\n      <code><![CDATA[verify]]></code>\n    </MissingReturnType>\n    <MixedArgument>\n      <code><![CDATA[$methodCall->getArgs()]]></code>\n      <code><![CDATA[$methodCall->getArgs()]]></code>\n    </MixedArgument>\n    <MixedArrayAssignment>\n      <code><![CDATA[$this->methodCalls[]]]></code>\n    </MixedArrayAssignment>\n    <MixedAssignment>\n      <code><![CDATA[$methodCall]]></code>\n    </MixedAssignment>\n    <MixedMethodCall>\n      <code><![CDATA[getArgs]]></code>\n      <code><![CDATA[getArgs]]></code>\n      <code><![CDATA[getMethod]]></code>\n    </MixedMethodCall>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[push]]></code>\n    </PossiblyUnusedMethod>\n  </file>\n  <file src=\"library/Mockery/Reflector.php\">\n    <LessSpecificReturnType>\n      <code><![CDATA[string]]></code>\n      <code><![CDATA[string]]></code>\n    </LessSpecificReturnType>\n    <MissingClassConstType>\n      <code><![CDATA[BUILTIN_TYPES = ['array', 'bool', 'int', 'float', 'null', 'object', 'string']]]></code>\n      <code><![CDATA[ITERABLE = ['iterable']]]></code>\n      <code><![CDATA[RESERVED_WORDS = ['bool', 'true', 'false', 'float', 'int', 'iterable', 'mixed', 'never', 'null', 'object', 'string', 'void']]]></code>\n      <code><![CDATA[TRAVERSABLE_ARRAY = ['\\Traversable', 'array']]]></code>\n    </MissingClassConstType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[throw new InvalidArgumentException('Unknown ReflectionType: ' . get_debug_type($type));]]></code>\n    </MissingThrowsDocblock>\n    <MixedArgument>\n      <code><![CDATA[$typeHint]]></code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code><![CDATA[$typeHint]]></code>\n    </MixedAssignment>\n    <MixedReturnTypeCoercion>\n      <code><![CDATA[[\n                [\n                    'typeHint' => $typeHint,\n                    'isPrimitive' => in_array($typeHint, self::BUILTIN_TYPES, true),\n                ],\n            ]]]></code>\n      <code><![CDATA[list<array{typeHint:string,isPrimitive:bool}>]]></code>\n    </MixedReturnTypeCoercion>\n    <PossiblyNullArgument>\n      <code><![CDATA[$declaringClass]]></code>\n    </PossiblyNullArgument>\n    <RedundantCondition>\n      <code><![CDATA[! $type instanceof ReflectionType && method_exists($method, 'getTentativeReturnType')]]></code>\n      <code><![CDATA[! $type instanceof ReflectionType && method_exists($method, 'getTentativeReturnType')]]></code>\n    </RedundantCondition>\n    <UndefinedMethod>\n      <code><![CDATA[getName]]></code>\n      <code><![CDATA[isBuiltin]]></code>\n    </UndefinedMethod>\n  </file>\n  <file src=\"library/Mockery/Undefined.php\">\n    <PossiblyUnusedMethod>\n      <code><![CDATA[__call]]></code>\n    </PossiblyUnusedMethod>\n    <PossiblyUnusedParam>\n      <code><![CDATA[$args]]></code>\n      <code><![CDATA[$method]]></code>\n    </PossiblyUnusedParam>\n  </file>\n  <file src=\"library/Mockery/VerificationDirector.php\">\n    <MissingReturnType>\n      <code><![CDATA[verify]]></code>\n    </MissingReturnType>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[atLeast]]></code>\n      <code><![CDATA[atMost]]></code>\n      <code><![CDATA[between]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[withAnyArgs]]></code>\n      <code><![CDATA[withArgs]]></code>\n      <code><![CDATA[withNoArgs]]></code>\n    </PossiblyUnusedMethod>\n  </file>\n  <file src=\"library/Mockery/VerificationExpectation.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function __clone()]]></code>\n    </MissingOverrideAttribute>\n  </file>\n  <file src=\"library/helpers.php\">\n    <LessSpecificReturnType>\n      <code><![CDATA[((LegacyMockInterface&TMixed)|(MockInterface&TMixed))]]></code>\n      <code><![CDATA[((LegacyMockInterface&TMixed)|(MockInterface&TMixed))]]></code>\n      <code><![CDATA[LegacyMockInterface|MockInterface]]></code>\n    </LessSpecificReturnType>\n    <MixedArgumentTypeCoercion>\n      <code><![CDATA[$args]]></code>\n    </MixedArgumentTypeCoercion>\n  </file>\n  <file src=\"tests/Bootstrap.php\">\n    <ForbiddenCode>\n      <code><![CDATA[\\var_dump(\\func_get_args())]]></code>\n    </ForbiddenCode>\n    <LessSpecificReturnType>\n      <code><![CDATA[void]]></code>\n    </LessSpecificReturnType>\n    <MissingParamType>\n      <code><![CDATA[$path]]></code>\n    </MissingParamType>\n    <MissingReturnType>\n      <code><![CDATA[isAbsolutePath]]></code>\n    </MissingReturnType>\n    <MixedArgument>\n      <code><![CDATA[$path]]></code>\n    </MixedArgument>\n    <MixedArrayAccess>\n      <code><![CDATA[$path[0]]]></code>\n    </MixedArrayAccess>\n    <PossiblyUndefinedIntArrayOffset>\n      <code><![CDATA[$trace[1]]]></code>\n    </PossiblyUndefinedIntArrayOffset>\n    <RiskyTruthyFalsyComparison>\n      <code><![CDATA[\\getenv('COMPOSER_VENDOR_DIR')]]></code>\n    </RiskyTruthyFalsyComparison>\n    <TypeDoesNotContainType>\n      <code><![CDATA[$dev]]></code>\n      <code><![CDATA[$dev]]></code>\n    </TypeDoesNotContainType>\n    <UncaughtThrowInGlobalScope>\n      <code><![CDATA[throw new Exception(\n        'Please run \"php composer.phar install\" in root directory '\n        . 'to setup unit test dependencies before running the tests'\n    );]]></code>\n    </UncaughtThrowInGlobalScope>\n    <UnresolvableInclude>\n      <code><![CDATA[require_once $hamcrestPath]]></code>\n    </UnresolvableInclude>\n  </file>\n  <file src=\"tests/Unit/AbstractTestCase.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[$class]]></code>\n      <code><![CDATA[$exception]]></code>\n    </ArgumentTypeCoercion>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf($class, \\mock($class))]]></code>\n      <code><![CDATA[self::assertInstanceOf($class, \\mock($class))]]></code>\n      <code><![CDATA[self::assertInstanceOf($class, \\mock($class))]]></code>\n    </MissingThrowsDocblock>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[assertInvalidMock]]></code>\n      <code><![CDATA[assertValidMock]]></code>\n    </PossiblyUnusedMethod>\n  </file>\n  <file src=\"tests/Unit/Mockery/Adapter/Phpunit/MockeryPHPUnitIntegrationTest.php\">\n    <MixedAssignment>\n      <code><![CDATA[$test]]></code>\n      <code><![CDATA[$test]]></code>\n    </MixedAssignment>\n    <MixedMethodCall>\n      <code><![CDATA[finish]]></code>\n      <code><![CDATA[finish]]></code>\n      <code><![CDATA[markAsRisky]]></code>\n      <code><![CDATA[markAsRisky]]></code>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldNotHaveReceived]]></code>\n    </MixedMethodCall>\n    <UndefinedInterfaceMethod>\n      <code><![CDATA[foobar]]></code>\n      <code><![CDATA[foobar]]></code>\n    </UndefinedInterfaceMethod>\n    <UndefinedMethod>\n      <code><![CDATA[makePartial]]></code>\n      <code><![CDATA[makePartial]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[MockeryPHPUnitIntegrationTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/Adapter/Phpunit/PhpUnitConstraintExpectationTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::markTestSkipped('TODO: Constraint exception message')]]></code>\n      <code><![CDATA[self::markTestSkipped('TODO: Constraint exception message')]]></code>\n      <code><![CDATA[toString]]></code>\n    </MissingThrowsDocblock>\n    <MixedMethodCall>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n    </MixedMethodCall>\n    <UndefinedClass>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n    </UndefinedClass>\n    <UnusedClass>\n      <code><![CDATA[PhpUnitConstraintExpectationTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/Adapter/Phpunit/TestListenerTest.php\">\n    <DeprecatedClass>\n      <code><![CDATA[Blacklist::class]]></code>\n      <code><![CDATA[new Blacklist()]]></code>\n      <code><![CDATA[new Blacklist()]]></code>\n    </DeprecatedClass>\n    <DeprecatedMethod>\n      <code><![CDATA[addListener]]></code>\n    </DeprecatedMethod>\n    <InternalClass>\n      <code><![CDATA[new TestResult()]]></code>\n    </InternalClass>\n    <InternalMethod>\n      <code><![CDATA[addListener]]></code>\n      <code><![CDATA[new EmptyTestCase()]]></code>\n      <code><![CDATA[setTestResultObject]]></code>\n      <code><![CDATA[wasSuccessful]]></code>\n    </InternalMethod>\n    <MissingOverrideAttribute>\n      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>\n    </MissingOverrideAttribute>\n    <MissingPropertyType>\n      <code><![CDATA[$container]]></code>\n      <code><![CDATA[$listener]]></code>\n      <code><![CDATA[$test]]></code>\n      <code><![CDATA[$testResult]]></code>\n    </MissingPropertyType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[isBlacklisted]]></code>\n      <code><![CDATA[isBlacklisted]]></code>\n      <code><![CDATA[self::assertArrayNotHasKey(Mockery::class, Blacklist::$blacklistedClassNames)]]></code>\n      <code><![CDATA[self::assertArrayNotHasKey(Mockery::class, Blacklist::$blacklistedClassNames)]]></code>\n      <code><![CDATA[self::assertArrayNotHasKey(Mockery::class, Blacklist::$blacklistedClassNames)]]></code>\n      <code><![CDATA[self::assertFalse(\n                (new Blacklist())->isBlacklisted((new ReflectionClass(Mockery::class))->getFileName())\n            )]]></code>\n      <code><![CDATA[self::assertFalse(\n                (new Blacklist())->isBlacklisted((new ReflectionClass(Mockery::class))->getFileName())\n            )]]></code>\n      <code><![CDATA[self::assertFalse($this->testResult->wasSuccessful(), 'expected test result to indicate failure')]]></code>\n      <code><![CDATA[self::assertFalse($this->testResult->wasSuccessful(), 'expected test result to indicate failure')]]></code>\n      <code><![CDATA[self::assertSame(1, Blacklist::$blacklistedClassNames[Mockery::class])]]></code>\n      <code><![CDATA[self::assertSame(1, Blacklist::$blacklistedClassNames[Mockery::class])]]></code>\n      <code><![CDATA[self::assertTrue(\n                (new Blacklist())->isBlacklisted((new ReflectionClass(Mockery::class))->getFileName())\n            )]]></code>\n      <code><![CDATA[self::assertTrue(\n                (new Blacklist())->isBlacklisted((new ReflectionClass(Mockery::class))->getFileName())\n            )]]></code>\n      <code><![CDATA[self::assertTrue(\n            $this->testResult->wasSuccessful(),\n            'sanity check: empty test results should be considered successful'\n        )]]></code>\n      <code><![CDATA[self::assertTrue(\n            $this->testResult->wasSuccessful(),\n            'sanity check: empty test results should be considered successful'\n        )]]></code>\n      <code><![CDATA[self::assertTrue($this->testResult->wasSuccessful(), 'expected test result to indicate success')]]></code>\n      <code><![CDATA[self::assertTrue($this->testResult->wasSuccessful(), 'expected test result to indicate success')]]></code>\n    </MissingThrowsDocblock>\n    <MixedArgument>\n      <code><![CDATA[Blacklist::$blacklistedClassNames]]></code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n    </MixedAssignment>\n    <MixedMethodCall>\n      <code><![CDATA[addToAssertionCount]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[endTest]]></code>\n      <code><![CDATA[endTest]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mockery_getExpectationCount]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[wasSuccessful]]></code>\n      <code><![CDATA[wasSuccessful]]></code>\n    </MixedMethodCall>\n    <UndefinedPropertyFetch>\n      <code><![CDATA[Blacklist::$blacklistedClassNames]]></code>\n      <code><![CDATA[Blacklist::$blacklistedClassNames]]></code>\n    </UndefinedPropertyFetch>\n    <UnusedClass>\n      <code><![CDATA[TestListenerTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/AdhocTest.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>\n      <code><![CDATA[public function mockeryTestTearDown(): void]]></code>\n    </MissingOverrideAttribute>\n    <MissingPropertyType>\n      <code><![CDATA[$container]]></code>\n    </MissingPropertyType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertFalse(NameOfExistingClassWithDestructor::$isDestructorWasCalled)]]></code>\n      <code><![CDATA[self::assertFalse(NameOfExistingClassWithDestructor::$isDestructorWasCalled)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>\n      <code><![CDATA[self::assertInstanceOf(NameOfExistingClass::class, $m)]]></code>\n      <code><![CDATA[self::assertInstanceOf(NameOfExistingClass::class, $m)]]></code>\n      <code><![CDATA[self::assertInstanceOf(NameOfExistingClass::class, $m)]]></code>\n      <code><![CDATA[self::assertTrue(NameOfExistingClassWithDestructor::$isDestructorWasCalled)]]></code>\n      <code><![CDATA[self::assertTrue(NameOfExistingClassWithDestructor::$isDestructorWasCalled)]]></code>\n    </MissingThrowsDocblock>\n    <MixedMethodCall>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mockery_close]]></code>\n      <code><![CDATA[mockery_close]]></code>\n      <code><![CDATA[mockery_close]]></code>\n    </MixedMethodCall>\n    <RedundantCondition>\n      <code><![CDATA[assertFalse]]></code>\n    </RedundantCondition>\n    <UnusedClass>\n      <code><![CDATA[AdhocTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/AllowsExpectsSyntaxTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertSame('bar', $stub->foo())]]></code>\n      <code><![CDATA[self::assertSame('bar', $stub->foo())]]></code>\n      <code><![CDATA[self::assertSame('bar', $stub->foo())]]></code>\n      <code><![CDATA[self::assertSame('bar', $stub->foo())]]></code>\n      <code><![CDATA[self::assertSame('baz', $stub->bar())]]></code>\n      <code><![CDATA[self::assertSame('baz', $stub->bar())]]></code>\n      <code><![CDATA[self::assertSame(123, $mock->foo(456, 789))]]></code>\n      <code><![CDATA[self::assertSame(123, $mock->foo(456, 789))]]></code>\n      <code><![CDATA[self::assertSame(123, $mock->foo(456, 789))]]></code>\n      <code><![CDATA[self::assertSame(123, $mock->foo(456, 789))]]></code>\n      <code><![CDATA[self::assertSame(123, $stub->allows())]]></code>\n      <code><![CDATA[self::assertSame(123, $stub->allows())]]></code>\n      <code><![CDATA[self::assertSame(123, $stub->expects())]]></code>\n      <code><![CDATA[self::assertSame(123, $stub->expects())]]></code>\n      <code><![CDATA[self::assertSame(456, $stub->foo(123))]]></code>\n      <code><![CDATA[self::assertSame(456, $stub->foo(123))]]></code>\n    </MissingThrowsDocblock>\n    <MixedMethodCall>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturns]]></code>\n      <code><![CDATA[andReturns]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[withAnyArgs]]></code>\n    </MixedMethodCall>\n    <PossiblyUndefinedMethod>\n      <code><![CDATA[andReturns]]></code>\n    </PossiblyUndefinedMethod>\n    <TooManyArguments>\n      <code><![CDATA[andReturns]]></code>\n    </TooManyArguments>\n    <UndefinedInterfaceMethod>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n    </UndefinedInterfaceMethod>\n    <UndefinedMagicMethod>\n      <code><![CDATA[andReturns]]></code>\n      <code><![CDATA[andReturns]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n    </UndefinedMagicMethod>\n    <UndefinedMethod>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[AllowsExpectsSyntaxTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/CallableSpyTest.php\">\n    <InvalidFunctionCall>\n      <code><![CDATA[$spy()]]></code>\n      <code><![CDATA[$spy()]]></code>\n      <code><![CDATA[$spy()]]></code>\n      <code><![CDATA[$spy()]]></code>\n      <code><![CDATA[$spy()]]></code>\n      <code><![CDATA[$spy()]]></code>\n      <code><![CDATA[$spy()]]></code>\n      <code><![CDATA[$spy()]]></code>\n      <code><![CDATA[$spy()]]></code>\n      <code><![CDATA[$spy()]]></code>\n      <code><![CDATA[$spy()]]></code>\n      <code><![CDATA[$spy(123)]]></code>\n      <code><![CDATA[$spy(123)]]></code>\n      <code><![CDATA[$spy(123)]]></code>\n      <code><![CDATA[$spy(123)]]></code>\n      <code><![CDATA[$spy(123)]]></code>\n      <code><![CDATA[$spy(123)]]></code>\n      <code><![CDATA[$spy(123)]]></code>\n      <code><![CDATA[$spy(123)]]></code>\n      <code><![CDATA[$spy(123)]]></code>\n      <code><![CDATA[$spy(456)]]></code>\n    </InvalidFunctionCall>\n    <MissingClosureParamType>\n      <code><![CDATA[$number]]></code>\n    </MissingClosureParamType>\n    <MissingClosureReturnType>\n      <code><![CDATA[function ($number) {]]></code>\n    </MissingClosureReturnType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertSame(124, $spy(123))]]></code>\n      <code><![CDATA[self::assertSame(124, $spy(123))]]></code>\n    </MissingThrowsDocblock>\n    <MixedMethodCall>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n    </MixedMethodCall>\n    <MixedOperand>\n      <code><![CDATA[$number]]></code>\n    </MixedOperand>\n    <UndefinedInterfaceMethod>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n    </UndefinedInterfaceMethod>\n    <UnusedClass>\n      <code><![CDATA[CallableSpyTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/DefaultMatchersTest.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>\n      <code><![CDATA[public function mockeryTestTearDown(): void]]></code>\n    </MissingOverrideAttribute>\n    <MissingPropertyType>\n      <code><![CDATA[$mock]]></code>\n    </MissingPropertyType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[setDefaultMatcher]]></code>\n      <code><![CDATA[setDefaultMatcher]]></code>\n      <code><![CDATA[setDefaultMatcher]]></code>\n    </MissingThrowsDocblock>\n    <MixedMethodCall>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n    </MixedMethodCall>\n    <UnusedClass>\n      <code><![CDATA[DefaultMatchersTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/DemeterChainTest.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA['overload:mock1']]></code>\n      <code><![CDATA['overload:mock2']]></code>\n    </ArgumentTypeCoercion>\n    <DocblockTypeContradiction>\n      <code><![CDATA[assertSame]]></code>\n    </DocblockTypeContradiction>\n    <MissingOverrideAttribute>\n      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>\n      <code><![CDATA[public function mockeryTestTearDown(): void]]></code>\n    </MissingOverrideAttribute>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf(stdClass::class, $result)]]></code>\n      <code><![CDATA[self::assertInstanceOf(stdClass::class, $result)]]></code>\n      <code><![CDATA[self::assertInstanceOf(stdClass::class, $result)]]></code>\n      <code><![CDATA[self::assertSame($bar, $a->foo()->bar())]]></code>\n      <code><![CDATA[self::assertSame($bar, $a->foo()->bar())]]></code>\n      <code><![CDATA[self::assertSame($qux, $a->foo()->qux())]]></code>\n      <code><![CDATA[self::assertSame($qux, $a->foo()->qux())]]></code>\n      <code><![CDATA[self::assertSame('first', $this->mock->levelOne() ->levelTwo() ->getFirst())]]></code>\n      <code><![CDATA[self::assertSame('first', $this->mock->levelOne() ->levelTwo() ->getFirst())]]></code>\n      <code><![CDATA[self::assertSame('second', $this->mock->levelOne() ->levelTwo() ->getSecond())]]></code>\n      <code><![CDATA[self::assertSame('second', $this->mock->levelOne() ->levelTwo() ->getSecond())]]></code>\n      <code><![CDATA[self::assertSame('something', $this->mock->getElement() ->getFirst('parameter'))]]></code>\n      <code><![CDATA[self::assertSame('something', $this->mock->getElement() ->getFirst('parameter'))]]></code>\n      <code><![CDATA[self::assertSame('something', $this->mock->getElement() ->getFirst())]]></code>\n      <code><![CDATA[self::assertSame('something', $this->mock->getElement() ->getFirst())]]></code>\n      <code><![CDATA[self::assertSame('something', $this->mock->getElement() ->getFirst())]]></code>\n      <code><![CDATA[self::assertSame('something', $this->mock->getElement() ->getFirst())]]></code>\n      <code><![CDATA[self::assertSame('something', $this->mock->getElement()->getFirst())]]></code>\n      <code><![CDATA[self::assertSame('something', $this->mock->getElement()->getFirst())]]></code>\n      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getElement() ->getSecond('secondParameter'))]]></code>\n      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getElement() ->getSecond('secondParameter'))]]></code>\n      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getElement() ->getSecond())]]></code>\n      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getElement() ->getSecond())]]></code>\n      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getElement() ->getSecond())]]></code>\n      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getElement() ->getSecond())]]></code>\n      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getElement()->getFirst())]]></code>\n      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getElement()->getFirst())]]></code>\n      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getOtherElement() ->getSecond())]]></code>\n      <code><![CDATA[self::assertSame('somethingElse', $this->mock->getOtherElement() ->getSecond())]]></code>\n      <code><![CDATA[self::assertSame('somethingNew', $this->mock->getElement() ->getFirst())]]></code>\n      <code><![CDATA[self::assertSame('somethingNew', $this->mock->getElement() ->getFirst())]]></code>\n      <code><![CDATA[self::assertSame(1, mock1::select()->some()->data())]]></code>\n      <code><![CDATA[self::assertSame(1, mock1::select()->some()->data())]]></code>\n      <code><![CDATA[self::assertSame(2, mock1::select()->some()->other()->data())]]></code>\n      <code><![CDATA[self::assertSame(2, mock1::select()->some()->other()->data())]]></code>\n      <code><![CDATA[self::assertSame(3, mock2::select()->some()->data())]]></code>\n      <code><![CDATA[self::assertSame(3, mock2::select()->some()->data())]]></code>\n      <code><![CDATA[self::assertSame(4, mock2::select()->some()->other()->data())]]></code>\n      <code><![CDATA[self::assertSame(4, mock2::select()->some()->other()->data())]]></code>\n    </MissingThrowsDocblock>\n    <MixedMethodCall>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[getFirst]]></code>\n      <code><![CDATA[getFirst]]></code>\n      <code><![CDATA[getFirst]]></code>\n      <code><![CDATA[getFirst]]></code>\n      <code><![CDATA[getFirst]]></code>\n      <code><![CDATA[getFirst]]></code>\n      <code><![CDATA[getFirst]]></code>\n      <code><![CDATA[getFirst]]></code>\n      <code><![CDATA[getSecond]]></code>\n      <code><![CDATA[getSecond]]></code>\n      <code><![CDATA[getSecond]]></code>\n      <code><![CDATA[getSecond]]></code>\n      <code><![CDATA[getSecond]]></code>\n      <code><![CDATA[getSecond]]></code>\n      <code><![CDATA[levelTwo]]></code>\n      <code><![CDATA[levelTwo]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n    </MixedMethodCall>\n    <PropertyNotSetInConstructor>\n      <code><![CDATA[$mock]]></code>\n    </PropertyNotSetInConstructor>\n    <PropertyTypeCoercion>\n      <code><![CDATA[Mockery::mock()->shouldIgnoreMissing()]]></code>\n    </PropertyTypeCoercion>\n    <UndefinedClass>\n      <code><![CDATA[$mock1]]></code>\n      <code><![CDATA[$mock1]]></code>\n      <code><![CDATA[$mock2]]></code>\n      <code><![CDATA[$mock2]]></code>\n      <code><![CDATA[mock1]]></code>\n      <code><![CDATA[mock1]]></code>\n      <code><![CDATA[mock2]]></code>\n      <code><![CDATA[mock2]]></code>\n    </UndefinedClass>\n    <UndefinedInterfaceMethod>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n    </UndefinedInterfaceMethod>\n    <UndefinedMagicMethod>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[getElement]]></code>\n      <code><![CDATA[getElement]]></code>\n      <code><![CDATA[getElement]]></code>\n      <code><![CDATA[getElement]]></code>\n      <code><![CDATA[getElement]]></code>\n      <code><![CDATA[getElement]]></code>\n      <code><![CDATA[getElement]]></code>\n      <code><![CDATA[getElement]]></code>\n      <code><![CDATA[getElement]]></code>\n      <code><![CDATA[getElements]]></code>\n      <code><![CDATA[getElements]]></code>\n      <code><![CDATA[getOtherElement]]></code>\n      <code><![CDATA[levelOne]]></code>\n      <code><![CDATA[levelOne]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n    </UndefinedMagicMethod>\n    <UndefinedMethod>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[DemeterChainTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/ExpectationTest.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA['InvalidArgumentException']]></code>\n      <code><![CDATA['OutOfBoundsException']]></code>\n      <code><![CDATA['f']]></code>\n      <code><![CDATA[[\n            'foo' => 'rfoo',\n            'bar' => 'rbar',\n            'baz' => 'rbaz',\n        ]]]></code>\n    </ArgumentTypeCoercion>\n    <DocblockTypeContradiction>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n    </DocblockTypeContradiction>\n    <MissingClosureParamType>\n      <code><![CDATA[$arg]]></code>\n      <code><![CDATA[$arg]]></code>\n      <code><![CDATA[$arg]]></code>\n      <code><![CDATA[$argument]]></code>\n      <code><![CDATA[$even]]></code>\n      <code><![CDATA[$even]]></code>\n      <code><![CDATA[$even]]></code>\n      <code><![CDATA[$even]]></code>\n      <code><![CDATA[$even]]></code>\n      <code><![CDATA[$odd]]></code>\n      <code><![CDATA[$odd]]></code>\n      <code><![CDATA[$odd]]></code>\n      <code><![CDATA[$odd]]></code>\n      <code><![CDATA[$odd]]></code>\n      <code><![CDATA[$sum]]></code>\n      <code><![CDATA[$sum]]></code>\n      <code><![CDATA[$sum]]></code>\n      <code><![CDATA[$v]]></code>\n    </MissingClosureParamType>\n    <MissingClosureReturnType>\n      <code><![CDATA[function ($arg) {]]></code>\n      <code><![CDATA[function ($arg) {]]></code>\n      <code><![CDATA[function ($arg) {]]></code>\n      <code><![CDATA[function ($odd, $even) {]]></code>\n      <code><![CDATA[function ($odd, $even) {]]></code>\n      <code><![CDATA[function ($odd, $even, $sum = null) {]]></code>\n      <code><![CDATA[function ($odd, $even, $sum = null) {]]></code>\n      <code><![CDATA[function ($odd, $even, $sum = null) {]]></code>\n      <code><![CDATA[function ($v) {]]></code>\n    </MissingClosureReturnType>\n    <MissingOverrideAttribute>\n      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>\n      <code><![CDATA[public function mockeryTestTearDown(): void]]></code>\n    </MissingOverrideAttribute>\n    <MissingPropertyType>\n      <code><![CDATA[$mock]]></code>\n    </MissingPropertyType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[Mockery::self()]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[self::assertEmpty($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertEmpty($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertFalse($service->hasBookmarksTagged('php'))]]></code>\n      <code><![CDATA[self::assertFalse($service->hasBookmarksTagged('php'))]]></code>\n      <code><![CDATA[self::assertFalse($service->hasBookmarksTagged('php'))]]></code>\n      <code><![CDATA[self::assertFalse($service->hasBookmarksTagged('php'))]]></code>\n      <code><![CDATA[self::assertFalse($service->hasBookmarksTagged('php'))]]></code>\n      <code><![CDATA[self::assertFalse($service->hasBookmarksTagged('php'))]]></code>\n      <code><![CDATA[self::assertFalse($this->mock->foo())]]></code>\n      <code><![CDATA[self::assertFalse($this->mock->foo())]]></code>\n      <code><![CDATA[self::assertFalse($waterMock->mockery_isAnonymous())]]></code>\n      <code><![CDATA[self::assertFalse($waterMock->mockery_isAnonymous())]]></code>\n      <code><![CDATA[self::assertInstanceOf('InvalidArgumentException', $e, \"Wrong or no exception thrown: {$e->getMessage()}\")]]></code>\n      <code><![CDATA[self::assertInstanceOf('InvalidArgumentException', $e, \"Wrong or no exception thrown: {$e->getMessage()}\")]]></code>\n      <code><![CDATA[self::assertInstanceOf('InvalidArgumentException', $e, \"Wrong or no exception thrown: {$e->getMessage()}\")]]></code>\n      <code><![CDATA[self::assertInstanceOf('OutOfBoundsException', $e, \"Wrong or no exception thrown: {$e->getMessage()}\")]]></code>\n      <code><![CDATA[self::assertInstanceOf('OutOfBoundsException', $e, \"Wrong or no exception thrown: {$e->getMessage()}\")]]></code>\n      <code><![CDATA[self::assertInstanceOf('OutOfBoundsException', $e, \"Wrong or no exception thrown: {$e->getMessage()}\")]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $this->mock->shouldIgnoreMissing())]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $this->mock->shouldIgnoreMissing())]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $this->mock->shouldIgnoreMissing())]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $this->mock->shouldIgnoreMissing()->asUndefined())]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $this->mock->shouldIgnoreMissing()->asUndefined())]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $this->mock->shouldIgnoreMissing()->asUndefined())]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, \\mock('f')->byDefault())]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, \\mock('f')->byDefault())]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, \\mock('f')->byDefault())]]></code>\n      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->g(1, 2))]]></code>\n      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->g(1, 2))]]></code>\n      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->g(1, 2))]]></code>\n      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->g(1, 2)->a()->b()->c())]]></code>\n      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->g(1, 2)->a()->b()->c())]]></code>\n      <code><![CDATA[self::assertInstanceOf(Undefined::class, $this->mock->g(1, 2)->a()->b()->c())]]></code>\n      <code><![CDATA[self::assertIsString(\"{$this->mock->g()}\")]]></code>\n      <code><![CDATA[self::assertIsString(\"{$this->mock->g()}\")]]></code>\n      <code><![CDATA[self::assertIsString(\"{$this->mock}\")]]></code>\n      <code><![CDATA[self::assertIsString(\"{$this->mock}\")]]></code>\n      <code><![CDATA[self::assertLessThan($e->getOrderNumber(), $m->getOrderNumber())]]></code>\n      <code><![CDATA[self::assertLessThan($e->getOrderNumber(), $m->getOrderNumber())]]></code>\n      <code><![CDATA[self::assertLessThan($m->getOrderNumber(), $s->getOrderNumber())]]></code>\n      <code><![CDATA[self::assertLessThan($m->getOrderNumber(), $s->getOrderNumber())]]></code>\n      <code><![CDATA[self::assertNull($mock->foo())]]></code>\n      <code><![CDATA[self::assertNull($mock->foo())]]></code>\n      <code><![CDATA[self::assertNull($mock->foo())]]></code>\n      <code><![CDATA[self::assertNull($mock->foo())]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->bar)]]></code>\n      <code><![CDATA[self::assertNull($this->mock->foo('foo', [], new stdClass()))]]></code>\n      <code><![CDATA[self::assertNull($this->mock->foo('foo', [], new stdClass()))]]></code>\n      <code><![CDATA[self::assertNull($this->mock->foo())]]></code>\n      <code><![CDATA[self::assertNull($this->mock->foo())]]></code>\n      <code><![CDATA[self::assertNull($this->mock->foo())]]></code>\n      <code><![CDATA[self::assertNull($this->mock->foo())]]></code>\n      <code><![CDATA[self::assertNull($this->mock->foo(...$args))]]></code>\n      <code><![CDATA[self::assertNull($this->mock->foo(...$args))]]></code>\n      <code><![CDATA[self::assertNull($this->mock->foo(1))]]></code>\n      <code><![CDATA[self::assertNull($this->mock->foo(1))]]></code>\n      <code><![CDATA[self::assertNull($this->mock->g(1, 2))]]></code>\n      <code><![CDATA[self::assertNull($this->mock->g(1, 2))]]></code>\n      <code><![CDATA[self::assertSame(\n            \"[foo(['Spam' => 'Ham', 'Bar' => 'Baz', 0 => 'Bar', 1 => 'Baz', 2 => 'Bar', 3 => 'Baz', 4 => 'Bar', 5 => 'Baz', 6 => 'Bar', 7 => 'Baz', 8 => 'Bar', 9 => 'Baz', 10 => 'Bar', 11 => 'Baz', 12 => 'Bar', 13 => 'Baz', 14 => 'Bar', 15 => 'Baz', 16 => 'Bar', 17 => 'Baz', 18 => 'Bar', 19 => 'Baz', 20 => 'Bar', 21 => 'Baz', 22 => 'Bar', 23 => 'Baz', 24 => 'Bar', 25 => 'Baz', 26 => 'Bar', 27 => 'Baz', 28 => 'Bar', 29 => 'Baz', 30 => 'Bar', 31 => 'Baz', 32 => 'Bar', 33 => 'Baz', 34 => 'Bar', 35 => 'Baz', 36 => 'Bar', 37 => 'Baz', 38 => 'Bar', 39 => 'Baz', 40 => 'Bar', 41 => 'Baz', 42 => 'Bar', 43 => 'Baz', 44 => 'Bar', 45 => 'Baz', 46 => 'Baz', 47 => 'Bar', 48 => 'Baz', 49 => 'Bar', 50 => 'Baz', 51 => 'Bar', 52 => 'Baz', 53 => 'Bar', 54 => 'Baz', 55 => 'Bar', 56 => 'Baz', 57 => 'Baz', 58 => 'Bar', 59 => 'Baz', 60 => 'Bar', 61 => 'Baz', 62 => 'Bar', 63 => 'Baz', 64 => 'Bar', 65 => 'Baz', 66 => 'Bar', 67 => 'Baz', 68 => 'Baz', 69 => 'Bar', 70 => 'Baz', 71 => 'Bar', 72 => 'Baz', 73 => 'Bar', 74 => 'Baz', 7...])]\",\n            (string) $exp\n        )]]></code>\n      <code><![CDATA[self::assertSame(\n            \"[foo(['Spam' => 'Ham', 'Bar' => 'Baz', 0 => 'Bar', 1 => 'Baz', 2 => 'Bar', 3 => 'Baz', 4 => 'Bar', 5 => 'Baz', 6 => 'Bar', 7 => 'Baz', 8 => 'Bar', 9 => 'Baz', 10 => 'Bar', 11 => 'Baz', 12 => 'Bar', 13 => 'Baz', 14 => 'Bar', 15 => 'Baz', 16 => 'Bar', 17 => 'Baz', 18 => 'Bar', 19 => 'Baz', 20 => 'Bar', 21 => 'Baz', 22 => 'Bar', 23 => 'Baz', 24 => 'Bar', 25 => 'Baz', 26 => 'Bar', 27 => 'Baz', 28 => 'Bar', 29 => 'Baz', 30 => 'Bar', 31 => 'Baz', 32 => 'Bar', 33 => 'Baz', 34 => 'Bar', 35 => 'Baz', 36 => 'Bar', 37 => 'Baz', 38 => 'Bar', 39 => 'Baz', 40 => 'Bar', 41 => 'Baz', 42 => 'Bar', 43 => 'Baz', 44 => 'Bar', 45 => 'Baz', 46 => 'Baz', 47 => 'Bar', 48 => 'Baz', 49 => 'Bar', 50 => 'Baz', 51 => 'Bar', 52 => 'Baz', 53 => 'Bar', 54 => 'Baz', 55 => 'Bar', 56 => 'Baz', 57 => 'Baz', 58 => 'Bar', 59 => 'Baz', 60 => 'Bar', 61 => 'Baz', 62 => 'Bar', 63 => 'Baz', 64 => 'Bar', 65 => 'Baz', 66 => 'Bar', 67 => 'Baz', 68 => 'Baz', 69 => 'Bar', 70 => 'Baz', 71 => 'Bar', 72 => 'Baz', 73 => 'Bar', 74 => 'Baz', 7...])]\",\n            (string) $exp\n        )]]></code>\n      <code><![CDATA[self::assertSame(\"[foo(1, 'bar', object(stdClass), ['Spam' => 'Ham', 'Bar' => 'Baz'])]\", (string) $exp)]]></code>\n      <code><![CDATA[self::assertSame(\"[foo(1, 'bar', object(stdClass), ['Spam' => 'Ham', 'Bar' => 'Baz'])]\", (string) $exp)]]></code>\n      <code><![CDATA[self::assertSame(\"{$this->mock}\", 'dave')]]></code>\n      <code><![CDATA[self::assertSame(\"{$this->mock}\", 'dave')]]></code>\n      <code><![CDATA[self::assertSame($args[$index], $this->mock->foo(...$args))]]></code>\n      <code><![CDATA[self::assertSame($args[$index], $this->mock->foo(...$args))]]></code>\n      <code><![CDATA[self::assertSame($object, $temp)]]></code>\n      <code><![CDATA[self::assertSame($object, $temp)]]></code>\n      <code><![CDATA[self::assertSame($this->mock, $this->mock->a()->b())]]></code>\n      <code><![CDATA[self::assertSame($this->mock, $this->mock->a()->b())]]></code>\n      <code><![CDATA[self::assertSame($this->mock, $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame($this->mock, $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('123', $mock->foo('baz'))]]></code>\n      <code><![CDATA[self::assertSame('123', $mock->foo('baz'))]]></code>\n      <code><![CDATA[self::assertSame('123', $mock->foo('baz'))]]></code>\n      <code><![CDATA[self::assertSame('123', $mock->foo('baz'))]]></code>\n      <code><![CDATA[self::assertSame('456', $mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('456', $mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('Spam!', $demeter->doit())]]></code>\n      <code><![CDATA[self::assertSame('Spam!', $demeter->doit())]]></code>\n      <code><![CDATA[self::assertSame('Spam!', $demeter->doitWithArgs())]]></code>\n      <code><![CDATA[self::assertSame('Spam!', $demeter->doitWithArgs())]]></code>\n      <code><![CDATA[self::assertSame('[foo(1), bar(1)]', (string) $exp)]]></code>\n      <code><![CDATA[self::assertSame('[foo(1), bar(1)]', (string) $exp)]]></code>\n      <code><![CDATA[self::assertSame('a', $this->mock->foo('a'))]]></code>\n      <code><![CDATA[self::assertSame('a', $this->mock->foo('a'))]]></code>\n      <code><![CDATA[self::assertSame('b', $this->mock->foo('b'))]]></code>\n      <code><![CDATA[self::assertSame('b', $this->mock->foo('b'))]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->foo('baz'))]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->foo('baz'))]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->foo('qux'))]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->foo('qux'))]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->foo('qux'))]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->foo('qux'))]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->foo('qux'))]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->foo('qux'))]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('bar', $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('bar', $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('bar', $this->mock->foo(1))]]></code>\n      <code><![CDATA[self::assertSame('bar', $this->mock->foo(1))]]></code>\n      <code><![CDATA[self::assertSame('baz', $mockInstanceOne->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $mockInstanceOne->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->foo(2))]]></code>\n      <code><![CDATA[self::assertSame('baz', $this->mock->foo(2))]]></code>\n      <code><![CDATA[self::assertSame('bazz', $mockInstanceTwo->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazz', $mockInstanceTwo->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazzz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazzz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazzz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('bazzz', $this->mock->bar)]]></code>\n      <code><![CDATA[self::assertSame('blue', $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('blue', $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('first', $this->mock->foo(1))]]></code>\n      <code><![CDATA[self::assertSame('first', $this->mock->foo(1))]]></code>\n      <code><![CDATA[self::assertSame('first', $this->mock->foo(2))]]></code>\n      <code><![CDATA[self::assertSame('first', $this->mock->foo(2))]]></code>\n      <code><![CDATA[self::assertSame('foo', $e->getMessage())]]></code>\n      <code><![CDATA[self::assertSame('foo', $e->getMessage())]]></code>\n      <code><![CDATA[self::assertSame('foobar', $foo->foo($input))]]></code>\n      <code><![CDATA[self::assertSame('foobar', $foo->foo($input))]]></code>\n      <code><![CDATA[self::assertSame('foobar', $mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('foobar', $mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('green', $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('green', $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('infinity', $this->mock->foo(2))]]></code>\n      <code><![CDATA[self::assertSame('infinity', $this->mock->foo(2))]]></code>\n      <code><![CDATA[self::assertSame('infinity', $this->mock->foo(2))]]></code>\n      <code><![CDATA[self::assertSame('infinity', $this->mock->foo(2))]]></code>\n      <code><![CDATA[self::assertSame('infinity', $this->mock->foo(2))]]></code>\n      <code><![CDATA[self::assertSame('infinity', $this->mock->foo(2))]]></code>\n      <code><![CDATA[self::assertSame('newbar', $this->mock->foo('test'))]]></code>\n      <code><![CDATA[self::assertSame('newbar', $this->mock->foo('test'))]]></code>\n      <code><![CDATA[self::assertSame('rbar', $mock->bar())]]></code>\n      <code><![CDATA[self::assertSame('rbar', $mock->bar())]]></code>\n      <code><![CDATA[self::assertSame('rbaz', $mock->baz())]]></code>\n      <code><![CDATA[self::assertSame('rbaz', $mock->baz())]]></code>\n      <code><![CDATA[self::assertSame('second', $this->mock->foo(2))]]></code>\n      <code><![CDATA[self::assertSame('second', $this->mock->foo(2))]]></code>\n      <code><![CDATA[self::assertSame('second/third', $this->mock->foo(2))]]></code>\n      <code><![CDATA[self::assertSame('second/third', $this->mock->foo(2))]]></code>\n      <code><![CDATA[self::assertSame('second/third', $this->mock->foo(2))]]></code>\n      <code><![CDATA[self::assertSame('second/third', $this->mock->foo(2))]]></code>\n      <code><![CDATA[self::assertSame(1, $this->mock->a())]]></code>\n      <code><![CDATA[self::assertSame(1, $this->mock->a())]]></code>\n      <code><![CDATA[self::assertSame(1, $this->mock->foo('foo'))]]></code>\n      <code><![CDATA[self::assertSame(1, $this->mock->foo('foo'))]]></code>\n      <code><![CDATA[self::assertSame(1, $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame(1, $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame(1, $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame(1, $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame(10, $this->mock->foo(1))]]></code>\n      <code><![CDATA[self::assertSame(10, $this->mock->foo(1))]]></code>\n      <code><![CDATA[self::assertSame(2, $this->mock->foo('foo'))]]></code>\n      <code><![CDATA[self::assertSame(2, $this->mock->foo('foo'))]]></code>\n      <code><![CDATA[self::assertSame(2, $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame(2, $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame(20, $this->mock->bar(2))]]></code>\n      <code><![CDATA[self::assertSame(20, $this->mock->bar(2))]]></code>\n      <code><![CDATA[self::assertSame(3, $this->mock->foo('foo'))]]></code>\n      <code><![CDATA[self::assertSame(3, $this->mock->foo('foo'))]]></code>\n      <code><![CDATA[self::assertSame(3, $this->mock->foo('foo'))]]></code>\n      <code><![CDATA[self::assertSame(3, $this->mock->foo('foo'))]]></code>\n      <code><![CDATA[self::assertSame(3, $this->mock->foo('foo'))]]></code>\n      <code><![CDATA[self::assertSame(3, $this->mock->foo('foo'))]]></code>\n      <code><![CDATA[self::assertSame(3, $this->mock->foo('foo'))]]></code>\n      <code><![CDATA[self::assertSame(3, $this->mock->foo('foo'))]]></code>\n      <code><![CDATA[self::assertSame(3, $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame(3, $this->mock->foo())]]></code>\n      <code><![CDATA[self::assertSame(4, $temp)]]></code>\n      <code><![CDATA[self::assertSame(4, $temp)]]></code>\n      <code><![CDATA[self::assertSame(42, $mock->theAnswer())]]></code>\n      <code><![CDATA[self::assertSame(42, $mock->theAnswer())]]></code>\n      <code><![CDATA[self::assertSame(6, $this->mock->foo(5))]]></code>\n      <code><![CDATA[self::assertSame(6, $this->mock->foo(5))]]></code>\n      <code><![CDATA[self::assertSame([1, 2, 3], \\iterator_to_array($this->mock->foo()))]]></code>\n      <code><![CDATA[self::assertSame([1, 2, 3], \\iterator_to_array($this->mock->foo()))]]></code>\n      <code><![CDATA[self::assertTrue($mock->doFirst())]]></code>\n      <code><![CDATA[self::assertTrue($mock->doFirst())]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/1', 'some_tag1'))]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/1', 'some_tag1'))]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/1', 'some_tag1'))]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/1', 'some_tag1'))]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/1', 'some_tag1'))]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/1', 'some_tag1'))]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/2', 'some_tag2'))]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/2', 'some_tag2'))]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/2', 'some_tag2'))]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/2', 'some_tag2'))]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/2', 'some_tag2'))]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/2', 'some_tag2'))]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/3', 'some_tag3'))]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/3', 'some_tag3'))]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/3', 'some_tag3'))]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/3', 'some_tag3'))]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/3', 'some_tag3'))]]></code>\n      <code><![CDATA[self::assertTrue($service->addBookmark('http://example.com/3', 'some_tag3'))]]></code>\n      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>\n      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>\n      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>\n      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>\n      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>\n      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>\n      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>\n      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>\n      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>\n      <code><![CDATA[self::assertTrue($service->hasBookmarksTagged('php'))]]></code>\n      <code><![CDATA[self::assertTrue($service->login('user', 'pass'))]]></code>\n      <code><![CDATA[self::assertTrue($service->login('user', 'pass'))]]></code>\n      <code><![CDATA[self::assertTrue($service->login('user', 'pass'))]]></code>\n      <code><![CDATA[self::assertTrue($service->login('user', 'pass'))]]></code>\n      <code><![CDATA[self::assertTrue($service->login('user', 'pass'))]]></code>\n      <code><![CDATA[self::assertTrue($service->login('user', 'pass'))]]></code>\n      <code><![CDATA[self::assertTrue($this->mock->foo())]]></code>\n      <code><![CDATA[self::assertTrue($this->mock->foo())]]></code>\n    </MissingThrowsDocblock>\n    <MixedArgument>\n      <code><![CDATA[$this->mock->foo()]]></code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code><![CDATA[$e]]></code>\n      <code><![CDATA[$exp]]></code>\n      <code><![CDATA[$exp]]></code>\n      <code><![CDATA[$exp]]></code>\n      <code><![CDATA[$exp]]></code>\n      <code><![CDATA[$m]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$s]]></code>\n    </MixedAssignment>\n    <MixedMethodCall>\n      <code><![CDATA[a]]></code>\n      <code><![CDATA[a]]></code>\n      <code><![CDATA[a]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturnArg]]></code>\n      <code><![CDATA[andReturnArg]]></code>\n      <code><![CDATA[andReturnArg]]></code>\n      <code><![CDATA[andReturnArg]]></code>\n      <code><![CDATA[andReturnFalse]]></code>\n      <code><![CDATA[andReturnNull]]></code>\n      <code><![CDATA[andReturnNull]]></code>\n      <code><![CDATA[andReturnSelf]]></code>\n      <code><![CDATA[andReturnTrue]]></code>\n      <code><![CDATA[andReturnTrue]]></code>\n      <code><![CDATA[andReturnTrue]]></code>\n      <code><![CDATA[andReturnUndefined]]></code>\n      <code><![CDATA[andReturnUsing]]></code>\n      <code><![CDATA[andReturnValues]]></code>\n      <code><![CDATA[andReturns]]></code>\n      <code><![CDATA[andSet]]></code>\n      <code><![CDATA[andSet]]></code>\n      <code><![CDATA[andSet]]></code>\n      <code><![CDATA[andSet]]></code>\n      <code><![CDATA[andSet]]></code>\n      <code><![CDATA[andSet]]></code>\n      <code><![CDATA[andSet]]></code>\n      <code><![CDATA[andThrow]]></code>\n      <code><![CDATA[andThrow]]></code>\n      <code><![CDATA[andThrow]]></code>\n      <code><![CDATA[andThrow]]></code>\n      <code><![CDATA[andThrow]]></code>\n      <code><![CDATA[andThrow]]></code>\n      <code><![CDATA[andThrowExceptions]]></code>\n      <code><![CDATA[andThrowExceptions]]></code>\n      <code><![CDATA[andThrows]]></code>\n      <code><![CDATA[andYield]]></code>\n      <code><![CDATA[asUndefined]]></code>\n      <code><![CDATA[asUndefined]]></code>\n      <code><![CDATA[asUndefined]]></code>\n      <code><![CDATA[asUndefined]]></code>\n      <code><![CDATA[atLeast]]></code>\n      <code><![CDATA[atLeast]]></code>\n      <code><![CDATA[atLeast]]></code>\n      <code><![CDATA[atLeast]]></code>\n      <code><![CDATA[atLeast]]></code>\n      <code><![CDATA[atLeast]]></code>\n      <code><![CDATA[atMost]]></code>\n      <code><![CDATA[atMost]]></code>\n      <code><![CDATA[atMost]]></code>\n      <code><![CDATA[atMost]]></code>\n      <code><![CDATA[atMost]]></code>\n      <code><![CDATA[atMost]]></code>\n      <code><![CDATA[atMost]]></code>\n      <code><![CDATA[atleast]]></code>\n      <code><![CDATA[atleast]]></code>\n      <code><![CDATA[atleast]]></code>\n      <code><![CDATA[atleast]]></code>\n      <code><![CDATA[b]]></code>\n      <code><![CDATA[b]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[because]]></code>\n      <code><![CDATA[byDefault]]></code>\n      <code><![CDATA[byDefault]]></code>\n      <code><![CDATA[byDefault]]></code>\n      <code><![CDATA[byDefault]]></code>\n      <code><![CDATA[byDefault]]></code>\n      <code><![CDATA[byDefault]]></code>\n      <code><![CDATA[byDefault]]></code>\n      <code><![CDATA[byDefault]]></code>\n      <code><![CDATA[byDefault]]></code>\n      <code><![CDATA[byDefault]]></code>\n      <code><![CDATA[byDefault]]></code>\n      <code><![CDATA[byDefault]]></code>\n      <code><![CDATA[c]]></code>\n      <code><![CDATA[expects]]></code>\n      <code><![CDATA[expects]]></code>\n      <code><![CDATA[final]]></code>\n      <code><![CDATA[final]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[g]]></code>\n      <code><![CDATA[g]]></code>\n      <code><![CDATA[g]]></code>\n      <code><![CDATA[g]]></code>\n      <code><![CDATA[getOrderNumber]]></code>\n      <code><![CDATA[getOrderNumber]]></code>\n      <code><![CDATA[getOrderNumber]]></code>\n      <code><![CDATA[getOrderNumber]]></code>\n      <code><![CDATA[globally]]></code>\n      <code><![CDATA[globally]]></code>\n      <code><![CDATA[hasBookmarksTagged]]></code>\n      <code><![CDATA[hasBookmarksTagged]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[never]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[ordered]]></code>\n      <code><![CDATA[passthru]]></code>\n      <code><![CDATA[passthru]]></code>\n      <code><![CDATA[set]]></code>\n      <code><![CDATA[set]]></code>\n      <code><![CDATA[set]]></code>\n      <code><![CDATA[shouldIgnoreMissing]]></code>\n      <code><![CDATA[shouldIgnoreMissing]]></code>\n      <code><![CDATA[shouldIgnoreMissing]]></code>\n      <code><![CDATA[shouldIgnoreMissing]]></code>\n      <code><![CDATA[shouldIgnoreMissing]]></code>\n      <code><![CDATA[shouldIgnoreMissing]]></code>\n      <code><![CDATA[shouldIgnoreMissing]]></code>\n      <code><![CDATA[shouldIgnoreMissing]]></code>\n      <code><![CDATA[shouldNotReceive]]></code>\n      <code><![CDATA[shouldNotReceive]]></code>\n      <code><![CDATA[shouldNotReceive]]></code>\n      <code><![CDATA[shouldNotReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[start]]></code>\n      <code><![CDATA[start]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[withAnyArgs]]></code>\n      <code><![CDATA[withAnyArgs]]></code>\n      <code><![CDATA[withAnyArgs]]></code>\n      <code><![CDATA[withAnyArgs]]></code>\n      <code><![CDATA[withArgs]]></code>\n      <code><![CDATA[withArgs]]></code>\n      <code><![CDATA[withArgs]]></code>\n      <code><![CDATA[withArgs]]></code>\n      <code><![CDATA[withArgs]]></code>\n      <code><![CDATA[withArgs]]></code>\n      <code><![CDATA[withArgs]]></code>\n      <code><![CDATA[withArgs]]></code>\n      <code><![CDATA[withArgs]]></code>\n      <code><![CDATA[withArgs]]></code>\n      <code><![CDATA[withArgs]]></code>\n      <code><![CDATA[withArgs]]></code>\n      <code><![CDATA[withNoArgs]]></code>\n      <code><![CDATA[withNoArgs]]></code>\n      <code><![CDATA[withNoArgs]]></code>\n      <code><![CDATA[withNoArgs]]></code>\n      <code><![CDATA[withNoArgs]]></code>\n      <code><![CDATA[withNoArgs]]></code>\n      <code><![CDATA[withSomeOfArgs]]></code>\n      <code><![CDATA[withSomeOfArgs]]></code>\n      <code><![CDATA[withSomeOfArgs]]></code>\n      <code><![CDATA[zeroOrMoreTimes]]></code>\n      <code><![CDATA[zeroOrMoreTimes]]></code>\n    </MixedMethodCall>\n    <MixedOperand>\n      <code><![CDATA[$arg]]></code>\n      <code><![CDATA[$arg]]></code>\n      <code><![CDATA[$even]]></code>\n      <code><![CDATA[$even]]></code>\n      <code><![CDATA[$even]]></code>\n      <code><![CDATA[$even]]></code>\n      <code><![CDATA[$even]]></code>\n      <code><![CDATA[$odd]]></code>\n      <code><![CDATA[$odd]]></code>\n      <code><![CDATA[$odd]]></code>\n      <code><![CDATA[$odd]]></code>\n      <code><![CDATA[$odd]]></code>\n      <code><![CDATA[$odd]]></code>\n      <code><![CDATA[$odd]]></code>\n      <code><![CDATA[$odd]]></code>\n      <code><![CDATA[$v]]></code>\n    </MixedOperand>\n    <MixedPropertyAssignment>\n      <code><![CDATA[$this->mock]]></code>\n      <code><![CDATA[$this->mock]]></code>\n      <code><![CDATA[$this->mock]]></code>\n      <code><![CDATA[$this->mock]]></code>\n      <code><![CDATA[$this->mock]]></code>\n      <code><![CDATA[$this->mock]]></code>\n      <code><![CDATA[$this->mock]]></code>\n      <code><![CDATA[$this->mock]]></code>\n      <code><![CDATA[$this->mock]]></code>\n      <code><![CDATA[$this->mock]]></code>\n    </MixedPropertyAssignment>\n    <MixedPropertyFetch>\n      <code><![CDATA[$this->mock->bar]]></code>\n      <code><![CDATA[$this->mock->bar]]></code>\n      <code><![CDATA[$this->mock->bar]]></code>\n      <code><![CDATA[$this->mock->bar]]></code>\n      <code><![CDATA[$this->mock->bar]]></code>\n      <code><![CDATA[$this->mock->bar]]></code>\n      <code><![CDATA[$this->mock->bar]]></code>\n      <code><![CDATA[$this->mock->bar]]></code>\n    </MixedPropertyFetch>\n    <NoValue>\n      <code><![CDATA[$this->mock->bar]]></code>\n      <code><![CDATA[$this->mock->bar]]></code>\n    </NoValue>\n    <RedundantConditionGivenDocblockType>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n    </RedundantConditionGivenDocblockType>\n    <TooManyArguments>\n      <code><![CDATA[expectException]]></code>\n      <code><![CDATA[expectException]]></code>\n    </TooManyArguments>\n    <UndefinedClass>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock2]]></code>\n      <code><![CDATA[$mock2]]></code>\n      <code><![CDATA[$mock2]]></code>\n      <code><![CDATA[$mock2]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[$service]]></code>\n      <code><![CDATA[[\n            'foo' => 'rfoo',\n            'bar' => 'rbar',\n            'baz' => 'rbaz',\n        ]]]></code>\n      <code><![CDATA[\\mock('f')]]></code>\n      <code><![CDATA[\\mock('f')]]></code>\n    </UndefinedClass>\n    <UndefinedInterfaceMethod>\n      <code><![CDATA[addBookmark]]></code>\n      <code><![CDATA[addBookmark]]></code>\n      <code><![CDATA[addBookmark]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[baz]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[hasBookmarksTagged]]></code>\n      <code><![CDATA[hasBookmarksTagged]]></code>\n      <code><![CDATA[hasBookmarksTagged]]></code>\n      <code><![CDATA[login]]></code>\n      <code><![CDATA[mockery_isAnonymous]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[with]]></code>\n    </UndefinedInterfaceMethod>\n    <UndefinedMagicMethod>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[theAnswer]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[with]]></code>\n    </UndefinedMagicMethod>\n    <UndefinedMethod>\n      <code><![CDATA[makePartial]]></code>\n      <code><![CDATA[nonExistent]]></code>\n      <code><![CDATA[shouldIgnoreMissing]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n    </UndefinedMethod>\n    <UndefinedPropertyFetch>\n      <code><![CDATA[$mockInstanceOne->bar]]></code>\n      <code><![CDATA[$mockInstanceTwo->bar]]></code>\n    </UndefinedPropertyFetch>\n    <UnusedClass>\n      <code><![CDATA[ExpectationTest]]></code>\n    </UnusedClass>\n    <UnusedClosureParam>\n      <code><![CDATA[$argument]]></code>\n    </UnusedClosureParam>\n  </file>\n  <file src=\"tests/Unit/Mockery/Generator/DefinedTargetClassTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertFalse($target->hasInternalAncestor())]]></code>\n      <code><![CDATA[self::assertFalse($target->hasInternalAncestor())]]></code>\n      <code><![CDATA[self::assertTrue($target->hasInternalAncestor())]]></code>\n      <code><![CDATA[self::assertTrue($target->hasInternalAncestor())]]></code>\n      <code><![CDATA[self::assertTrue($target->hasInternalAncestor())]]></code>\n      <code><![CDATA[self::assertTrue($target->hasInternalAncestor())]]></code>\n    </MissingThrowsDocblock>\n    <UnusedClass>\n      <code><![CDATA[DefinedTargetClassTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/Generator/MockConfigurationBuilderTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertContains('__halt_compiler', $builder->getMockConfiguration()->getBlackListedMethods())]]></code>\n      <code><![CDATA[self::assertContains('__halt_compiler', $builder->getMockConfiguration()->getBlackListedMethods())]]></code>\n      <code><![CDATA[self::assertContains('__halt_compiler', $builder->getMockConfiguration()->getBlackListedMethods())]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>\n      <code><![CDATA[self::markTestSkipped('Need a builtin class with a method that is a reserved word')]]></code>\n      <code><![CDATA[self::markTestSkipped('Need a builtin class with a method that is a reserved word')]]></code>\n    </MissingThrowsDocblock>\n    <PossiblyUndefinedIntArrayOffset>\n      <code><![CDATA[$methods[0]]]></code>\n      <code><![CDATA[$methods[0]]]></code>\n    </PossiblyUndefinedIntArrayOffset>\n    <UnusedClass>\n      <code><![CDATA[MockConfigurationBuilderTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/Generator/StringManipulation/Pass/CallTypeHintPassTest.php\">\n    <InvalidArgument>\n      <code><![CDATA[[\n            'requiresCallStaticTypeHintRemoval' => true,\n        ]]]></code>\n      <code><![CDATA[[\n            'requiresCallTypeHintRemoval' => true,\n        ]]]></code>\n    </InvalidArgument>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, '__call($method, $args)'))]]></code>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, '__call($method, $args)'))]]></code>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, '__callStatic($method, $args)'))]]></code>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, '__callStatic($method, $args)'))]]></code>\n    </MissingThrowsDocblock>\n    <MixedArgument>\n      <code><![CDATA[$config]]></code>\n      <code><![CDATA[$config]]></code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code><![CDATA[$config]]></code>\n      <code><![CDATA[$config]]></code>\n    </MixedAssignment>\n    <UndefinedMethod>\n      <code><![CDATA[makePartial]]></code>\n      <code><![CDATA[makePartial]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[CallTypeHintPassTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/Generator/StringManipulation/Pass/ClassAttributesPassTest.php\">\n    <MissingClassConstType>\n      <code><![CDATA[CODE = 'namespace Mockery; class Mock {}']]></code>\n    </MissingClassConstType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertStringContainsString($expected, $code)]]></code>\n      <code><![CDATA[self::assertStringContainsString($expected, $code)]]></code>\n    </MissingThrowsDocblock>\n    <MixedMethodCall>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n    </MixedMethodCall>\n    <UndefinedMethod>\n      <code><![CDATA[expects]]></code>\n      <code><![CDATA[expects]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[ClassAttributesPassTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/Generator/StringManipulation/Pass/ClassNamePassTest.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>\n    </MissingOverrideAttribute>\n    <MissingPropertyType>\n      <code><![CDATA[$pass]]></code>\n    </MissingPropertyType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertFalse(\\mb_strpos($code, 'namespace Mockery;'))]]></code>\n      <code><![CDATA[self::assertFalse(\\mb_strpos($code, 'namespace Mockery;'))]]></code>\n      <code><![CDATA[self::assertFalse(\\mb_strpos($code, 'namespace Mockery;'))]]></code>\n      <code><![CDATA[self::assertFalse(\\mb_strpos($code, 'namespace Mockery;'))]]></code>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, 'class Dave'))]]></code>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, 'class Dave'))]]></code>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, 'namespace Dave;'))]]></code>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, 'namespace Dave;'))]]></code>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, 'namespace Dave;'))]]></code>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, 'namespace Dave;'))]]></code>\n    </MissingThrowsDocblock>\n    <MixedArgument>\n      <code><![CDATA[$code]]></code>\n      <code><![CDATA[$code]]></code>\n      <code><![CDATA[$code]]></code>\n      <code><![CDATA[$code]]></code>\n      <code><![CDATA[$code]]></code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code><![CDATA[$code]]></code>\n      <code><![CDATA[$code]]></code>\n      <code><![CDATA[$code]]></code>\n      <code><![CDATA[$code]]></code>\n    </MixedAssignment>\n    <MixedMethodCall>\n      <code><![CDATA[apply]]></code>\n      <code><![CDATA[apply]]></code>\n      <code><![CDATA[apply]]></code>\n      <code><![CDATA[apply]]></code>\n    </MixedMethodCall>\n    <UnusedClass>\n      <code><![CDATA[ClassNamePassTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/Generator/StringManipulation/Pass/ClassPassTest.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[['Testing\\TestClass']]]></code>\n    </ArgumentTypeCoercion>\n    <MissingOverrideAttribute>\n      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>\n    </MissingOverrideAttribute>\n    <MissingPropertyType>\n      <code><![CDATA[$pass]]></code>\n    </MissingPropertyType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, 'class Mock extends \\Testing\\TestClass implements MockInterface'))]]></code>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, 'class Mock extends \\Testing\\TestClass implements MockInterface'))]]></code>\n    </MissingThrowsDocblock>\n    <MixedArgument>\n      <code><![CDATA[$code]]></code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code><![CDATA[$code]]></code>\n    </MixedAssignment>\n    <MixedMethodCall>\n      <code><![CDATA[apply]]></code>\n    </MixedMethodCall>\n    <UndefinedClass>\n      <code><![CDATA[['Testing\\TestClass']]]></code>\n    </UndefinedClass>\n    <UnusedClass>\n      <code><![CDATA[ClassPassTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/Generator/StringManipulation/Pass/ConstantsPassTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, \"const FOO = 'test'\"))]]></code>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, \"const FOO = 'test'\"))]]></code>\n    </MissingThrowsDocblock>\n    <UnusedClass>\n      <code><![CDATA[ConstantsPassTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/Generator/StringManipulation/Pass/InstanceMockPassTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, 'protected $_mockery_ignoreVerification'))]]></code>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, 'protected $_mockery_ignoreVerification'))]]></code>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, 'public function __construct'))]]></code>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, 'public function __construct'))]]></code>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, 'this->_mockery_constructorCalled(func_get_args());'))]]></code>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, 'this->_mockery_constructorCalled(func_get_args());'))]]></code>\n    </MissingThrowsDocblock>\n    <UnusedClass>\n      <code><![CDATA[InstanceMockPassTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/Generator/StringManipulation/Pass/InterfacePassTest.php\">\n    <InvalidArgument>\n      <code><![CDATA[[\n                    'getName' => '\\Dave\\Dave',\n                ]]]></code>\n      <code><![CDATA[[\n                    'getName' => '\\Paddy\\Paddy',\n                ]]]></code>\n      <code><![CDATA[[\n            'getTargetInterfaces' => [\n                Mockery::mock([\n                    'getName' => '\\Dave\\Dave',\n                ]),\n                Mockery::mock([\n                    'getName' => '\\Paddy\\Paddy',\n                ]),\n            ],\n        ]]]></code>\n      <code><![CDATA[[\n            'getTargetInterfaces' => [],\n        ]]]></code>\n    </InvalidArgument>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, 'implements MockInterface, \\Dave\\Dave, \\Paddy\\Paddy'))]]></code>\n      <code><![CDATA[self::assertNotFalse(\\mb_strpos($code, 'implements MockInterface, \\Dave\\Dave, \\Paddy\\Paddy'))]]></code>\n      <code><![CDATA[self::assertSame(self::CODE, $code)]]></code>\n      <code><![CDATA[self::assertSame(self::CODE, $code)]]></code>\n    </MissingThrowsDocblock>\n    <UnusedClass>\n      <code><![CDATA[InterfacePassTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/GlobalHelpersTest.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[$className]]></code>\n    </ArgumentTypeCoercion>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf($className, $double)]]></code>\n      <code><![CDATA[self::assertInstanceOf($className, $double)]]></code>\n      <code><![CDATA[self::assertInstanceOf($className, $double)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>\n    </MissingThrowsDocblock>\n    <PossiblyUndefinedMethod>\n      <code><![CDATA[foo]]></code>\n    </PossiblyUndefinedMethod>\n    <UndefinedInterfaceMethod>\n      <code><![CDATA[foo]]></code>\n    </UndefinedInterfaceMethod>\n    <UnusedClass>\n      <code><![CDATA[GlobalHelpersTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/HamcrestExpectationTest.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>\n      <code><![CDATA[public function mockeryTestTearDown(): void]]></code>\n    </MissingOverrideAttribute>\n    <MissingPropertyType>\n      <code><![CDATA[$mock]]></code>\n    </MissingPropertyType>\n    <MixedMethodCall>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n    </MixedMethodCall>\n    <UnusedClass>\n      <code><![CDATA[HamcrestExpectationTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/Loader/EvalLoaderTest.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function getLoader(): Loader]]></code>\n    </MissingOverrideAttribute>\n    <UnusedClass>\n      <code><![CDATA[EvalLoaderTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/Loader/LoaderTestCase.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[new MockDefinition($config, $code)]]></code>\n      <code><![CDATA[self::assertTrue(\\class_exists($className))]]></code>\n      <code><![CDATA[self::assertTrue(\\class_exists($className))]]></code>\n    </MissingThrowsDocblock>\n    <PossiblyUnusedMethod>\n      <code><![CDATA[testLoad]]></code>\n    </PossiblyUnusedMethod>\n  </file>\n  <file src=\"tests/Unit/Mockery/Loader/RequireLoaderTest.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[public function getLoader(): Loader]]></code>\n    </MissingOverrideAttribute>\n    <UnusedClass>\n      <code><![CDATA[RequireLoaderTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/Matcher/HasKeyTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertFalse($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertFalse($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>\n    </MissingThrowsDocblock>\n    <UnusedClass>\n      <code><![CDATA[HasKeyTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/Matcher/HasValueTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertFalse($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertFalse($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>\n    </MissingThrowsDocblock>\n    <UnusedClass>\n      <code><![CDATA[HasValueTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/Matcher/IsEqualTest.php\">\n    <MissingParamType>\n      <code><![CDATA[$actual]]></code>\n      <code><![CDATA[$expected]]></code>\n    </MissingParamType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertTrue(Mockery::isEqual($expected)->match($actual))]]></code>\n      <code><![CDATA[self::assertTrue(Mockery::isEqual($expected)->match($actual))]]></code>\n    </MissingThrowsDocblock>\n    <UnusedClass>\n      <code><![CDATA[IsEqualTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/Matcher/IsSameTest.php\">\n    <MissingParamType>\n      <code><![CDATA[$actual]]></code>\n      <code><![CDATA[$expected]]></code>\n    </MissingParamType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertTrue(Mockery::isSame($expected)->match($actual))]]></code>\n      <code><![CDATA[self::assertTrue(Mockery::isSame($expected)->match($actual))]]></code>\n    </MissingThrowsDocblock>\n    <UnusedClass>\n      <code><![CDATA[IsSameTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/Matcher/SubsetTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertFalse($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertFalse($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertFalse($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertFalse($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>\n      <code><![CDATA[self::assertTrue($matcher->match($actual))]]></code>\n    </MissingThrowsDocblock>\n    <UnusedClass>\n      <code><![CDATA[SubsetTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/MockClassWithFinalToStringTest.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>\n      <code><![CDATA[protected function mockeryTestTearDown(): void]]></code>\n    </MissingOverrideAttribute>\n    <MissingPropertyType>\n      <code><![CDATA[$container]]></code>\n    </MissingPropertyType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf(TestWithFinalToString::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithFinalToString::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithFinalToString::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithFinalToString::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithFinalToString::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithFinalToString::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithNonFinalToString::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithNonFinalToString::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithNonFinalToString::class, $mock)]]></code>\n      <code><![CDATA[self::assertNotSame('bar', $mock->__toString())]]></code>\n      <code><![CDATA[self::assertNotSame('bar', $mock->__toString())]]></code>\n      <code><![CDATA[self::assertSame(TestWithFinalToString::class . '::__toString', $mock->__toString())]]></code>\n      <code><![CDATA[self::assertSame(TestWithFinalToString::class . '::__toString', $mock->__toString())]]></code>\n      <code><![CDATA[self::assertSame(TestWithFinalToString::class . '::__toString', $mock->__toString())]]></code>\n      <code><![CDATA[self::assertSame(TestWithFinalToString::class . '::__toString', $mock->__toString())]]></code>\n    </MissingThrowsDocblock>\n    <MixedAssignment>\n      <code><![CDATA[$mock]]></code>\n    </MixedAssignment>\n    <MixedMethodCall>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mockery_close]]></code>\n    </MixedMethodCall>\n    <UnusedClass>\n      <code><![CDATA[MockClassWithFinalToStringTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/MockClassWithIterableReturnTypeTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertSame([], $mock->returnIterable())]]></code>\n      <code><![CDATA[self::assertSame([], $mock->returnIterable())]]></code>\n    </MissingThrowsDocblock>\n    <UndefinedMethod>\n      <code><![CDATA[expects]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[MockClassWithIterableReturnTypeTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/MockClassWithMethodOverloadingTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloading::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloading::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloading::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloading::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloading::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloading::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloadingWithoutCall::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloadingWithoutCall::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithMethodOverloadingWithoutCall::class, $mock)]]></code>\n      <code><![CDATA[self::assertSame(1, $mock->thisIsRealMethod())]]></code>\n      <code><![CDATA[self::assertSame(1, $mock->thisIsRealMethod())]]></code>\n      <code><![CDATA[self::assertSame(42, $mock->theAnswer())]]></code>\n      <code><![CDATA[self::assertSame(42, $mock->theAnswer())]]></code>\n    </MissingThrowsDocblock>\n    <UndefinedMagicMethod>\n      <code><![CDATA[makePartial]]></code>\n      <code><![CDATA[makePartial]]></code>\n      <code><![CDATA[theAnswer]]></code>\n    </UndefinedMagicMethod>\n    <UndefinedMethod>\n      <code><![CDATA[makePartial]]></code>\n      <code><![CDATA[randomMethod]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[MockClassWithMethodOverloadingTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/MockClassWithUnknownTypeHintTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $mock)]]></code>\n    </MissingThrowsDocblock>\n    <UnusedClass>\n      <code><![CDATA[MockClassWithUnknownTypeHintTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/MockConfigurationTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertCount(1, $interfaces)]]></code>\n      <code><![CDATA[self::assertCount(1, $interfaces)]]></code>\n      <code><![CDATA[self::assertCount(1, $interfaces)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(1, $methods)]]></code>\n      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>\n      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>\n      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>\n      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>\n      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>\n      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>\n      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>\n      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>\n      <code><![CDATA[self::assertCount(2, $interfaces)]]></code>\n      <code><![CDATA[self::assertCount(2, $methods)]]></code>\n      <code><![CDATA[self::assertCount(2, $methods)]]></code>\n      <code><![CDATA[self::assertCount(2, $methods)]]></code>\n      <code><![CDATA[self::assertSame('bar', $methods[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame('bar', $methods[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame('bar', $methods[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame('bar', $methods[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame('bar', $methods[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame('bar', $methods[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame('foo', $methods[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame(Iterator::class, $interfaces[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame(Iterator::class, $interfaces[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame(IteratorAggregate::class, $first->getName())]]></code>\n      <code><![CDATA[self::assertSame(IteratorAggregate::class, $first->getName())]]></code>\n      <code><![CDATA[self::assertSame(IteratorAggregate::class, $interfaces[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame(IteratorAggregate::class, $interfaces[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame(IteratorAggregate::class, $interfaces[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame(IteratorAggregate::class, $interfaces[0]->getName())]]></code>\n      <code><![CDATA[self::assertSame(TestTraversableInterface2::class, $interfaces[1]->getName())]]></code>\n      <code><![CDATA[self::assertSame(TestTraversableInterface2::class, $interfaces[1]->getName())]]></code>\n      <code><![CDATA[self::assertSame(TestTraversableInterface3::class, $interfaces[1]->getName())]]></code>\n      <code><![CDATA[self::assertSame(TestTraversableInterface3::class, $interfaces[1]->getName())]]></code>\n      <code><![CDATA[self::assertSame(TestTraversableInterface::class, $interfaces[1]->getName())]]></code>\n      <code><![CDATA[self::assertSame(TestTraversableInterface::class, $interfaces[1]->getName())]]></code>\n    </MissingThrowsDocblock>\n    <PossiblyUndefinedIntArrayOffset>\n      <code><![CDATA[$interfaces[0]]]></code>\n      <code><![CDATA[$interfaces[0]]]></code>\n      <code><![CDATA[$interfaces[0]]]></code>\n      <code><![CDATA[$interfaces[1]]]></code>\n      <code><![CDATA[$interfaces[1]]]></code>\n      <code><![CDATA[$interfaces[1]]]></code>\n      <code><![CDATA[$methods[0]]]></code>\n      <code><![CDATA[$methods[0]]]></code>\n      <code><![CDATA[$methods[0]]]></code>\n      <code><![CDATA[$methods[0]]]></code>\n      <code><![CDATA[$methods[0]]]></code>\n      <code><![CDATA[$methods[0]]]></code>\n    </PossiblyUndefinedIntArrayOffset>\n    <UnusedClass>\n      <code><![CDATA[MockConfigurationTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/MockTest.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA['someClass']]></code>\n      <code><![CDATA['someClass']]></code>\n    </ArgumentTypeCoercion>\n    <DocblockTypeContradiction>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n      <code><![CDATA[assertSame]]></code>\n    </DocblockTypeContradiction>\n    <InaccessibleMethod>\n      <code><![CDATA[foo]]></code>\n    </InaccessibleMethod>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf(ErrorException::class, $errorException)]]></code>\n      <code><![CDATA[self::assertInstanceOf(ErrorException::class, $errorException)]]></code>\n      <code><![CDATA[self::assertInstanceOf(ErrorException::class, $errorException)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Exception::class, $errorException)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Exception::class, $errorException)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Exception::class, $errorException)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Exception::class, $exception)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Exception::class, $exception)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Exception::class, $exception)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m->shouldAllowMockingMethod('testFunction'))]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m->shouldAllowMockingMethod('testFunction'))]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m->shouldAllowMockingMethod('testFunction'))]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m->shouldAllowMockingProtectedMethods('testFunction'))]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m->shouldAllowMockingProtectedMethods('testFunction'))]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $m->shouldAllowMockingProtectedMethods('testFunction'))]]></code>\n      <code><![CDATA[self::assertNotSame('', (string) $mock)]]></code>\n      <code><![CDATA[self::assertNotSame('', (string) $mock)]]></code>\n      <code><![CDATA[self::assertNotSame('', (string) $mock)]]></code>\n      <code><![CDATA[self::assertNotSame('', (string) $mock)]]></code>\n      <code><![CDATA[self::assertNull($mock->bar())]]></code>\n      <code><![CDATA[self::assertNull($mock->bar())]]></code>\n      <code><![CDATA[self::assertNull($mock->foo())]]></code>\n      <code><![CDATA[self::assertNull($mock->foo())]]></code>\n      <code><![CDATA[self::assertNull($mock->foo())]]></code>\n      <code><![CDATA[self::assertNull($mock->foo())]]></code>\n      <code><![CDATA[self::assertNull($mock->nonExistentMethod())]]></code>\n      <code><![CDATA[self::assertNull($mock->nonExistentMethod())]]></code>\n      <code><![CDATA[self::assertNull($mock->nonExistingMethod())]]></code>\n      <code><![CDATA[self::assertNull($mock->nonExistingMethod())]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->bar())]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->bar())]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->bar())]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->bar())]]></code>\n      <code><![CDATA[self::assertSame('foo', (string) $mock)]]></code>\n      <code><![CDATA[self::assertSame('foo', (string) $mock)]]></code>\n      <code><![CDATA[self::assertSame('new_foo', $mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('new_foo', $mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('result', $mock->nonExistentMethod())]]></code>\n      <code><![CDATA[self::assertSame('result', $mock->nonExistentMethod())]]></code>\n      <code><![CDATA[self::assertSame(2, $mock->mockery_getExpectationCount())]]></code>\n      <code><![CDATA[self::assertSame(2, $mock->mockery_getExpectationCount())]]></code>\n      <code><![CDATA[self::assertSame(2, $mock->mockery_getExpectationCount())]]></code>\n      <code><![CDATA[self::assertSame(2, $mock->mockery_getExpectationCount())]]></code>\n      <code><![CDATA[self::assertSame(2, $mock->mockery_getExpectationCount())]]></code>\n      <code><![CDATA[self::assertSame(2, $mock->mockery_getExpectationCount())]]></code>\n      <code><![CDATA[self::assertTrue($m->foo())]]></code>\n      <code><![CDATA[self::assertTrue($m->foo())]]></code>\n      <code><![CDATA[self::assertTrue($m->test123())]]></code>\n      <code><![CDATA[self::assertTrue($m->test123())]]></code>\n      <code><![CDATA[self::assertTrue($m->testSomeNonExistentMethod())]]></code>\n      <code><![CDATA[self::assertTrue($m->testSomeNonExistentMethod())]]></code>\n      <code><![CDATA[self::assertTrue(\\method_exists($mock, '__toString'))]]></code>\n      <code><![CDATA[self::assertTrue(\\method_exists($mock, '__toString'))]]></code>\n    </MissingThrowsDocblock>\n    <MixedAssignment>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n    </MixedAssignment>\n    <MixedMethodCall>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[asUndefined]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[byDefault]]></code>\n      <code><![CDATA[byDefault]]></code>\n      <code><![CDATA[byDefault]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[nonExistentMethod]]></code>\n      <code><![CDATA[nonExistentMethod]]></code>\n      <code><![CDATA[nonExistentMethod]]></code>\n      <code><![CDATA[nonExistingMethod]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[passthru]]></code>\n      <code><![CDATA[passthru]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n    </MixedMethodCall>\n    <TooManyArguments>\n      <code><![CDATA[expectException]]></code>\n    </TooManyArguments>\n    <UndefinedClass>\n      <code><![CDATA[$m]]></code>\n      <code><![CDATA[$m]]></code>\n    </UndefinedClass>\n    <UndefinedInterfaceMethod>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[test123]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n    </UndefinedInterfaceMethod>\n    <UndefinedMagicMethod>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n    </UndefinedMagicMethod>\n    <UndefinedMethod>\n      <code><![CDATA[makePartial]]></code>\n      <code><![CDATA[shouldAllowMockingMethod]]></code>\n      <code><![CDATA[shouldAllowMockingProtectedMethods]]></code>\n      <code><![CDATA[shouldIgnoreMissing]]></code>\n      <code><![CDATA[shouldIgnoreMissing]]></code>\n      <code><![CDATA[shouldIgnoreMissing]]></code>\n      <code><![CDATA[shouldIgnoreMissing]]></code>\n      <code><![CDATA[shouldIgnoreMissing]]></code>\n      <code><![CDATA[shouldIgnoreMissing]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[testSomeNonExistentMethod]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[MockTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/MockeryCanMockClassesWithSemiReservedWordsTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertSame('foo', $mock->include())]]></code>\n      <code><![CDATA[self::assertSame('foo', $mock->include())]]></code>\n      <code><![CDATA[self::assertTrue(\\method_exists($mock, 'include'))]]></code>\n      <code><![CDATA[self::assertTrue(\\method_exists($mock, 'include'))]]></code>\n    </MissingThrowsDocblock>\n    <MixedMethodCall>\n      <code><![CDATA[andReturn]]></code>\n    </MixedMethodCall>\n    <RedundantCondition>\n      <code><![CDATA[assertTrue]]></code>\n    </RedundantCondition>\n    <UndefinedMethod>\n      <code><![CDATA[shouldReceive]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[MockeryCanMockClassesWithSemiReservedWordsTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/MockeryCanMockMultipleInterfacesWhichOverlapTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[self::assertInstanceOf(Evenement_EventEmitter::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Evenement_EventEmitter::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Evenement_EventEmitter::class, $mock)]]></code>\n    </MissingThrowsDocblock>\n    <UnusedClass>\n      <code><![CDATA[MockeryCanMockMultipleInterfacesWhichOverlapTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/MockingAllLowerCasedMethodsTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertSame($expected, $mock->userExpectsCamelCaseMethod())]]></code>\n      <code><![CDATA[self::assertSame($expected, $mock->userExpectsCamelCaseMethod())]]></code>\n    </MissingThrowsDocblock>\n    <MixedMethodCall>\n      <code><![CDATA[andReturn]]></code>\n    </MixedMethodCall>\n    <UndefinedMethod>\n      <code><![CDATA[shouldReceive]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[MockingAllLowerCasedMethodsTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/MockingClassConstantsTest.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA['overload:' . ClassWithConstants::class]]></code>\n    </ArgumentTypeCoercion>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertSame('baz', $mock::FOO)]]></code>\n      <code><![CDATA[self::assertSame('baz', $mock::FOO)]]></code>\n      <code><![CDATA[self::assertSame(2, $mock::X)]]></code>\n      <code><![CDATA[self::assertSame(2, $mock::X)]]></code>\n      <code><![CDATA[self::assertSame([\n            'qux' => 'daz',\n        ], $mock::BAZ)]]></code>\n      <code><![CDATA[self::assertSame([\n            'qux' => 'daz',\n        ], $mock::BAZ)]]></code>\n    </MissingThrowsDocblock>\n    <UnusedClass>\n      <code><![CDATA[MockingClassConstantsTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/MockingMethodsWithIterableTypeHintsTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf(MethodWithIterableTypeHints::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MethodWithIterableTypeHints::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MethodWithIterableTypeHints::class, $mock)]]></code>\n    </MissingThrowsDocblock>\n    <UnusedClass>\n      <code><![CDATA[MockingMethodsWithIterableTypeHintsTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/MockingMethodsWithMixedReturnTypeTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertSame('bar', $mock->foo()->bar())]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->foo()->bar())]]></code>\n    </MissingThrowsDocblock>\n    <MixedMethodCall>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[bar]]></code>\n    </MixedMethodCall>\n    <UndefinedInterfaceMethod>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n    </UndefinedInterfaceMethod>\n    <UnusedClass>\n      <code><![CDATA[MockingMethodsWithMixedReturnTypeTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/MockingMethodsWithNullableParametersTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf(MethodWithNullableTypedParameter::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MethodWithNullableTypedParameter::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MethodWithNullableTypedParameter::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MethodWithParametersWithDefaultValues::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MethodWithParametersWithDefaultValues::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MethodWithParametersWithDefaultValues::class, $mock)]]></code>\n    </MissingThrowsDocblock>\n    <UnusedClass>\n      <code><![CDATA[MockingMethodsWithNullableParametersTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/MockingNullableMethodsTest.php\">\n    <InternalMethod>\n      <code><![CDATA[new MethodWithNullableReturnType()]]></code>\n      <code><![CDATA[new MethodWithNullableReturnType()]]></code>\n      <code><![CDATA[new MethodWithNullableReturnType()]]></code>\n      <code><![CDATA[new MethodWithNullableReturnType()]]></code>\n    </InternalMethod>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertNull($double->nullableClass())]]></code>\n      <code><![CDATA[self::assertNull($double->nullableClass())]]></code>\n      <code><![CDATA[self::assertNull($double->nullableClass())]]></code>\n      <code><![CDATA[self::assertNull($double->nullableClass())]]></code>\n      <code><![CDATA[self::assertNull($double->nullableInt())]]></code>\n      <code><![CDATA[self::assertNull($double->nullableInt())]]></code>\n      <code><![CDATA[self::assertNull($double->nullableString())]]></code>\n      <code><![CDATA[self::assertNull($double->nullableString())]]></code>\n    </MissingThrowsDocblock>\n    <MixedMethodCall>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturnNull]]></code>\n      <code><![CDATA[andReturnNull]]></code>\n      <code><![CDATA[andReturnNull]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n    </MixedMethodCall>\n    <PropertyNotSetInConstructor>\n      <code><![CDATA[$container]]></code>\n    </PropertyNotSetInConstructor>\n    <UndefinedMethod>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[MockingNullableMethodsTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/MockingProtectedMethodsTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertNull($mock->foo())]]></code>\n      <code><![CDATA[self::assertNull($mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('abstractProtected', $mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('abstractProtected', $mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->bar())]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->bar())]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->bar())]]></code>\n      <code><![CDATA[self::assertSame('bar', $mock->bar())]]></code>\n      <code><![CDATA[self::assertSame('foobar', $mock->foobar())]]></code>\n      <code><![CDATA[self::assertSame('foobar', $mock->foobar())]]></code>\n      <code><![CDATA[self::assertSame('notbar', $mock->bar())]]></code>\n      <code><![CDATA[self::assertSame('notbar', $mock->bar())]]></code>\n      <code><![CDATA[self::assertSame('notbar', $mock->bar())]]></code>\n      <code><![CDATA[self::assertSame('notbar', $mock->bar())]]></code>\n    </MissingThrowsDocblock>\n    <MixedAssignment>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n    </MixedAssignment>\n    <MixedMethodCall>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[bar]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[shouldAllowMockingProtectedMethods]]></code>\n      <code><![CDATA[shouldAllowMockingProtectedMethods]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n    </MixedMethodCall>\n    <UndefinedClass>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[\\mock(TestWithProtectedMethods::class . '[protectedBar]')]]></code>\n    </UndefinedClass>\n    <UndefinedMethod>\n      <code><![CDATA[makePartial]]></code>\n      <code><![CDATA[makePartial]]></code>\n      <code><![CDATA[makePartial]]></code>\n      <code><![CDATA[makePartial]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[MockingProtectedMethodsTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/MockingStaticMethodsCalledObjectStyleTest.php\">\n    <InaccessibleMethod>\n      <code><![CDATA[protectedBar]]></code>\n    </InaccessibleMethod>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertTrue($mock->foo())]]></code>\n      <code><![CDATA[self::assertTrue($mock->foo())]]></code>\n      <code><![CDATA[self::assertTrue($mock->foo())]]></code>\n      <code><![CDATA[self::assertTrue($mock->foo())]]></code>\n      <code><![CDATA[self::assertTrue($mock->protectedBar())]]></code>\n      <code><![CDATA[self::assertTrue($mock->protectedBar())]]></code>\n    </MissingThrowsDocblock>\n    <MixedMethodCall>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n    </MixedMethodCall>\n    <UndefinedMethod>\n      <code><![CDATA[shouldAllowMockingProtectedMethods]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[MockingStaticMethodsCalledObjectStyleTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/MockingVariadicArgumentsTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertSame('notbar', $mock->foo())]]></code>\n      <code><![CDATA[self::assertSame('notbar', $mock->foo())]]></code>\n    </MissingThrowsDocblock>\n    <MixedMethodCall>\n      <code><![CDATA[andReturn]]></code>\n    </MixedMethodCall>\n    <UndefinedMethod>\n      <code><![CDATA[shouldReceive]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[MockingVariadicArgumentsTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/NamedMockTest.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA['\\Mockery\\Dave123']]></code>\n    </ArgumentTypeCoercion>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf('\\Mockery\\Dave123', $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf('\\Mockery\\Dave123', $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf('\\Mockery\\Dave123', $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(DateTime::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(DateTime::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(DateTime::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Habitat::class, $animal->habitat())]]></code>\n      <code><![CDATA[self::assertInstanceOf(Habitat::class, $animal->habitat())]]></code>\n      <code><![CDATA[self::assertInstanceOf(Habitat::class, $animal->habitat())]]></code>\n      <code><![CDATA[self::assertSame('dave', $mock->getDave())]]></code>\n      <code><![CDATA[self::assertSame('dave', $mock->getDave())]]></code>\n      <code><![CDATA[self::assertTrue($gardener->water($cactus))]]></code>\n      <code><![CDATA[self::assertTrue($gardener->water($cactus))]]></code>\n    </MissingThrowsDocblock>\n    <TypeDoesNotContainType>\n      <code><![CDATA[assertInstanceOf]]></code>\n    </TypeDoesNotContainType>\n    <UndefinedClass>\n      <code><![CDATA[$gardener]]></code>\n      <code><![CDATA['\\Mockery\\Dave123']]></code>\n    </UndefinedClass>\n    <UndefinedMagicMethod>\n      <code><![CDATA[andReturn]]></code>\n    </UndefinedMagicMethod>\n    <UndefinedMethod>\n      <code><![CDATA[getDave]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[NamedMockTest]]></code>\n    </UnusedClass>\n    <UnusedVariable>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n    </UnusedVariable>\n  </file>\n  <file src=\"tests/Unit/Mockery/ProxyMockingTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertSame(1, $mock->anyMethod())]]></code>\n      <code><![CDATA[self::assertSame(1, $mock->anyMethod())]]></code>\n      <code><![CDATA[self::assertSame(42, $mock->theAnswer())]]></code>\n      <code><![CDATA[self::assertSame(42, $mock->theAnswer())]]></code>\n    </MissingThrowsDocblock>\n    <UndefinedInterfaceMethod>\n      <code><![CDATA[anyMethod]]></code>\n      <code><![CDATA[theAnswer]]></code>\n    </UndefinedInterfaceMethod>\n    <UnusedClass>\n      <code><![CDATA[ProxyMockingTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/ReflectorTest.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA[$class]]></code>\n    </ArgumentTypeCoercion>\n    <InternalClass>\n      <code><![CDATA[Reflector::getTypeHint($refParam)]]></code>\n      <code><![CDATA[Reflector::isReservedWord($type)]]></code>\n    </InternalClass>\n    <InternalMethod>\n      <code><![CDATA[Reflector::getTypeHint($refParam)]]></code>\n      <code><![CDATA[Reflector::isReservedWord($type)]]></code>\n    </InternalMethod>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertSame($expectedTypeHint, Reflector::getTypeHint($refParam))]]></code>\n      <code><![CDATA[self::assertSame($expectedTypeHint, Reflector::getTypeHint($refParam))]]></code>\n      <code><![CDATA[self::assertTrue(Reflector::isReservedWord($type))]]></code>\n      <code><![CDATA[self::assertTrue(Reflector::isReservedWord($type))]]></code>\n    </MissingThrowsDocblock>\n    <PossiblyUndefinedIntArrayOffset>\n      <code><![CDATA[$refClass->getMethods()[0]]]></code>\n      <code><![CDATA[$refMethod->getParameters()[0]]]></code>\n    </PossiblyUndefinedIntArrayOffset>\n    <UnusedClass>\n      <code><![CDATA[ReflectorTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/SpyTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertSame(1, $spy->mockery_getExpectationCount())]]></code>\n      <code><![CDATA[self::assertSame(1, $spy->mockery_getExpectationCount())]]></code>\n      <code><![CDATA[self::assertSame(1, $spy->mockery_getExpectationCount())]]></code>\n      <code><![CDATA[self::assertSame(1, $spy->mockery_getExpectationCount())]]></code>\n    </MissingThrowsDocblock>\n    <TooFewArguments>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldNotHaveReceived]]></code>\n      <code><![CDATA[shouldNotHaveReceived]]></code>\n      <code><![CDATA[shouldNotHaveReceived]]></code>\n      <code><![CDATA[shouldNotHaveReceived]]></code>\n      <code><![CDATA[shouldNotHaveReceived]]></code>\n      <code><![CDATA[shouldNotHaveReceived]]></code>\n    </TooFewArguments>\n    <UndefinedInterfaceMethod>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[myMethod]]></code>\n      <code><![CDATA[myMethod]]></code>\n      <code><![CDATA[myMethod]]></code>\n      <code><![CDATA[myMethod]]></code>\n      <code><![CDATA[myMethod]]></code>\n      <code><![CDATA[myMethod]]></code>\n      <code><![CDATA[myMethod]]></code>\n      <code><![CDATA[myMethod]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[twice]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n      <code><![CDATA[with]]></code>\n    </UndefinedInterfaceMethod>\n    <UnusedClass>\n      <code><![CDATA[SpyTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/Mockery/TraitsTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertSame('bar', $trait->foo())]]></code>\n      <code><![CDATA[self::assertSame('bar', $trait->foo())]]></code>\n      <code><![CDATA[self::assertSame('bar', $trait->foo())]]></code>\n      <code><![CDATA[self::assertSame('bar', $trait->foo())]]></code>\n      <code><![CDATA[self::assertSame('baz', $trait->baz())]]></code>\n      <code><![CDATA[self::assertSame('baz', $trait->baz())]]></code>\n      <code><![CDATA[self::assertSame(123, $trait->baz())]]></code>\n      <code><![CDATA[self::assertSame(123, $trait->baz())]]></code>\n    </MissingThrowsDocblock>\n    <UndefinedClass>\n      <code><![CDATA[$trait]]></code>\n      <code><![CDATA[$trait]]></code>\n      <code><![CDATA[$trait]]></code>\n      <code><![CDATA[$trait]]></code>\n    </UndefinedClass>\n    <UnusedClass>\n      <code><![CDATA[TraitsTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/PHP73/MockClassWithFinalWakeupTest.php\">\n    <MissingOverrideAttribute>\n      <code><![CDATA[protected function mockeryTestSetUp(): void]]></code>\n      <code><![CDATA[protected function mockeryTestTearDown(): void]]></code>\n    </MissingOverrideAttribute>\n    <MissingPropertyType>\n      <code><![CDATA[$container]]></code>\n    </MissingPropertyType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf(SubclassWithFinalWakeup::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(SubclassWithFinalWakeup::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(SubclassWithFinalWakeup::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithFinalWakeup::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithFinalWakeup::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithFinalWakeup::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithNonFinalWakeup::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithNonFinalWakeup::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(TestWithNonFinalWakeup::class, $mock)]]></code>\n      <code><![CDATA[self::assertNull($mock->__wakeup())]]></code>\n      <code><![CDATA[self::assertNull($mock->__wakeup())]]></code>\n      <code><![CDATA[self::assertSame(TestWithFinalWakeup::class . '::__wakeup', $mock->__wakeup())]]></code>\n      <code><![CDATA[self::assertSame(TestWithFinalWakeup::class . '::__wakeup', $mock->__wakeup())]]></code>\n      <code><![CDATA[self::assertSame(TestWithFinalWakeup::class . '::__wakeup', $mock->__wakeup())]]></code>\n      <code><![CDATA[self::assertSame(TestWithFinalWakeup::class . '::__wakeup', $mock->__wakeup())]]></code>\n    </MissingThrowsDocblock>\n    <MixedAssignment>\n      <code><![CDATA[$mock]]></code>\n    </MixedAssignment>\n    <MixedMethodCall>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mock]]></code>\n      <code><![CDATA[mockery_close]]></code>\n    </MixedMethodCall>\n    <UnusedClass>\n      <code><![CDATA[MockClassWithFinalWakeupTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/PHP73/MockingOldStyleConstructorTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>\n      <code><![CDATA[self::assertInstanceOf(MockInterface::class, $double)]]></code>\n      <code><![CDATA[self::assertInstanceOf(OldStyleConstructor::class, $double)]]></code>\n      <code><![CDATA[self::assertInstanceOf(OldStyleConstructor::class, $double)]]></code>\n      <code><![CDATA[self::assertInstanceOf(OldStyleConstructor::class, $double)]]></code>\n    </MissingThrowsDocblock>\n    <UnusedClass>\n      <code><![CDATA[MockingOldStyleConstructorTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/PHP73/MockingVoidMethodsTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf(MethodWithVoidReturnType::class, \\mock(MethodWithVoidReturnType::class))]]></code>\n      <code><![CDATA[self::assertInstanceOf(MethodWithVoidReturnType::class, \\mock(MethodWithVoidReturnType::class))]]></code>\n      <code><![CDATA[self::assertInstanceOf(MethodWithVoidReturnType::class, \\mock(MethodWithVoidReturnType::class))]]></code>\n    </MissingThrowsDocblock>\n    <UndefinedMethod>\n      <code><![CDATA[expects]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[MockingVoidMethodsTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/PHP73/TestCase1328Test.php\">\n    <LessSpecificReturnType>\n      <code><![CDATA[void]]></code>\n      <code><![CDATA[void]]></code>\n    </LessSpecificReturnType>\n    <MixedMethodCall>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[times]]></code>\n    </MixedMethodCall>\n    <UndefinedMethod>\n      <code><![CDATA[shouldNotReceive]]></code>\n      <code><![CDATA[shouldNotReceive]]></code>\n      <code><![CDATA[shouldNotReceive]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[TestCase1328Test]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/PHP73/TestCase1404Test.php\">\n    <InvalidReturnType>\n      <code><![CDATA[Generator<string,list<string>>]]></code>\n    </InvalidReturnType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertSame($result, $dbConnection->query('sql')->fetchAll())]]></code>\n      <code><![CDATA[self::assertSame($result, $dbConnection->query('sql')->fetchAll())]]></code>\n      <code><![CDATA[self::assertSame($result, $dbConnection->query('sql')->fetchAll())]]></code>\n      <code><![CDATA[self::assertSame($result, $dbConnection->query('sql')->fetchAll())]]></code>\n      <code><![CDATA[self::assertSame($result, $dbConnection->query('sql')->fetchAll())]]></code>\n      <code><![CDATA[self::assertSame($result, $dbConnection->query('sql')->fetchAll())]]></code>\n      <code><![CDATA[self::assertSame($result, $dbConnection->query('sql')->fetchAll())]]></code>\n      <code><![CDATA[self::assertSame($result, $dbConnection->query('sql')->fetchAll())]]></code>\n    </MissingThrowsDocblock>\n    <MixedMethodCall>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[with]]></code>\n    </MixedMethodCall>\n    <UndefinedMethod>\n      <code><![CDATA[allows]]></code>\n      <code><![CDATA[expects]]></code>\n      <code><![CDATA[expects]]></code>\n      <code><![CDATA[expects]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[TestCase1404Test]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/PHP73/WithCustomFormatterExpectationTest.php\">\n    <MissingClosureParamType>\n      <code><![CDATA[$class]]></code>\n      <code><![CDATA[$nesting]]></code>\n      <code><![CDATA[$nesting]]></code>\n      <code><![CDATA[$nesting]]></code>\n      <code><![CDATA[$object]]></code>\n      <code><![CDATA[$object]]></code>\n    </MissingClosureParamType>\n    <MissingClosureReturnType>\n      <code><![CDATA[function ($class, $nesting) {]]></code>\n    </MissingClosureReturnType>\n    <MissingOverrideAttribute>\n      <code><![CDATA[protected function setUp(): void]]></code>\n    </MissingOverrideAttribute>\n    <MissingParamType>\n      <code><![CDATA[$expected]]></code>\n      <code><![CDATA[$obj]]></code>\n      <code><![CDATA[$object]]></code>\n      <code><![CDATA[$shouldContains]]></code>\n      <code><![CDATA[$shouldNotContains]]></code>\n    </MissingParamType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertSame($expected, $formatted ? $formatted['formatter'] : null)]]></code>\n      <code><![CDATA[self::assertSame($expected, $formatted ? $formatted['formatter'] : null)]]></code>\n    </MissingThrowsDocblock>\n    <MixedArgument>\n      <code><![CDATA[$containString]]></code>\n      <code><![CDATA[$containString]]></code>\n      <code><![CDATA[$object]]></code>\n    </MixedArgument>\n    <MixedArrayAccess>\n      <code><![CDATA[$formatted['formatter']]]></code>\n    </MixedArrayAccess>\n    <MixedAssignment>\n      <code><![CDATA[$containString]]></code>\n      <code><![CDATA[$containString]]></code>\n      <code><![CDATA[$formatted]]></code>\n    </MixedAssignment>\n    <MixedMethodCall>\n      <code><![CDATA[getArrayProperty]]></code>\n      <code><![CDATA[getArrayProperty]]></code>\n    </MixedMethodCall>\n    <MixedPropertyFetch>\n      <code><![CDATA[$object->stringProperty]]></code>\n      <code><![CDATA[$object->stringProperty]]></code>\n    </MixedPropertyFetch>\n    <UnusedClass>\n      <code><![CDATA[WithCustomFormatterExpectationTest]]></code>\n    </UnusedClass>\n    <UnusedClosureParam>\n      <code><![CDATA[$class]]></code>\n      <code><![CDATA[$nesting]]></code>\n      <code><![CDATA[$nesting]]></code>\n      <code><![CDATA[$nesting]]></code>\n    </UnusedClosureParam>\n  </file>\n  <file src=\"tests/Unit/PHP73/WithFormatterExpectationTest.php\">\n    <MissingParamType>\n      <code><![CDATA[$args]]></code>\n      <code><![CDATA[$expected]]></code>\n    </MissingParamType>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertSame($expected, Mockery::formatObjects($args))]]></code>\n      <code><![CDATA[self::assertSame($expected, Mockery::formatObjects($args))]]></code>\n      <code><![CDATA[self::assertSame(\\mb_strpos($string, 'Missing argument 1 for'), false)]]></code>\n      <code><![CDATA[self::assertSame(\\mb_strpos($string, 'Missing argument 1 for'), false)]]></code>\n      <code><![CDATA[self::assertSame(\\mb_strpos($string, 'excludedProperty'), false)]]></code>\n      <code><![CDATA[self::assertSame(\\mb_strpos($string, 'excludedProperty'), false)]]></code>\n      <code><![CDATA[self::assertSame(\\mb_strpos($string, 'getExcluded'), false)]]></code>\n      <code><![CDATA[self::assertSame(\\mb_strpos($string, 'getExcluded'), false)]]></code>\n    </MissingThrowsDocblock>\n    <MixedArgument>\n      <code><![CDATA[$args]]></code>\n    </MixedArgument>\n    <MixedMethodCall>\n      <code><![CDATA[with]]></code>\n    </MixedMethodCall>\n    <UndefinedMethod>\n      <code><![CDATA[shouldReceive]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[WithFormatterExpectationTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/PHP74/TestCase1132Test.php\">\n    <ArgumentTypeCoercion>\n      <code><![CDATA['TestCase1132']]></code>\n    </ArgumentTypeCoercion>\n    <MixedMethodCall>\n      <code><![CDATA[saveDummy]]></code>\n    </MixedMethodCall>\n    <UndefinedClass>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n    </UndefinedClass>\n    <UnusedClass>\n      <code><![CDATA[TestCase1132Test]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/PHP74/TestCase1402Test.php\">\n    <InvalidArgument>\n      <code><![CDATA[[1]]]></code>\n    </InvalidArgument>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertSame(2, $banana->test())]]></code>\n      <code><![CDATA[self::assertSame(2, $banana->test())]]></code>\n    </MissingThrowsDocblock>\n    <MixedAssignment>\n      <code><![CDATA[$banana]]></code>\n    </MixedAssignment>\n    <MixedMethodCall>\n      <code><![CDATA[allows]]></code>\n      <code><![CDATA[andReturns]]></code>\n      <code><![CDATA[test]]></code>\n    </MixedMethodCall>\n    <UndefinedMethod>\n      <code><![CDATA[makePartial]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[TestCase1402Test]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/PHP80/MockWithClosureAsLastArgumentTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf(PHP80TestInterface::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(PHP80TestInterface::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(PHP80TestInterface::class, $mock)]]></code>\n      <code><![CDATA[self::assertSame('#BlackLivesMatter', $mock->blm())]]></code>\n      <code><![CDATA[self::assertSame('#BlackLivesMatter', $mock->blm())]]></code>\n    </MissingThrowsDocblock>\n    <UndefinedInterfaceMethod>\n      <code><![CDATA[blm]]></code>\n    </UndefinedInterfaceMethod>\n    <UndefinedMagicMethod>\n      <code><![CDATA[andReturn]]></code>\n    </UndefinedMagicMethod>\n    <UnusedClass>\n      <code><![CDATA[MockWithClosureAsLastArgumentTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/PHP80/MockingMethodsWithStaticReturnTypeTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertSame($mock, $mock->returnType())]]></code>\n      <code><![CDATA[self::assertSame($mock, $mock->returnType())]]></code>\n    </MissingThrowsDocblock>\n    <UndefinedMethod>\n      <code><![CDATA[shouldReceive]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[MockingMethodsWithStaticReturnTypeTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/PHP80/Php80LanguageFeaturesTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf(Iterator::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Iterator::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Iterator::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(IteratorAggregate::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(IteratorAggregate::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(IteratorAggregate::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Traversable::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Traversable::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Traversable::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Traversable::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Traversable::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Traversable::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(stdClass::class, $mock->foo())]]></code>\n      <code><![CDATA[self::assertInstanceOf(stdClass::class, $mock->foo())]]></code>\n      <code><![CDATA[self::assertInstanceOf(stdClass::class, $mock->foo())]]></code>\n      <code><![CDATA[self::assertIsObject($mock->foo())]]></code>\n      <code><![CDATA[self::assertIsObject($mock->foo())]]></code>\n      <code><![CDATA[self::assertNotInstanceOf(Iterator::class, $mock)]]></code>\n      <code><![CDATA[self::assertNotInstanceOf(Iterator::class, $mock)]]></code>\n      <code><![CDATA[self::assertNotInstanceOf(Iterator::class, $mock)]]></code>\n      <code><![CDATA[self::assertNull($mock->foo())]]></code>\n      <code><![CDATA[self::assertNull($mock->foo())]]></code>\n    </MissingThrowsDocblock>\n    <MixedMethodCall>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[times]]></code>\n      <code><![CDATA[with]]></code>\n    </MixedMethodCall>\n    <RedundantCondition>\n      <code><![CDATA[assertIsObject]]></code>\n    </RedundantCondition>\n    <UndefinedMethod>\n      <code><![CDATA[allows]]></code>\n      <code><![CDATA[allows]]></code>\n      <code><![CDATA[allows]]></code>\n      <code><![CDATA[allows]]></code>\n      <code><![CDATA[allows]]></code>\n      <code><![CDATA[allows]]></code>\n      <code><![CDATA[allows]]></code>\n      <code><![CDATA[expects]]></code>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldHaveReceived]]></code>\n      <code><![CDATA[shouldHaveReceived]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[Php80LanguageFeaturesTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/PHP80/TestCase1414Test.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf($class::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf($class::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf($class::class, $mock)]]></code>\n    </MissingThrowsDocblock>\n    <UnusedClass>\n      <code><![CDATA[TestCase1414Test]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/PHP81/Php81LanguageFeaturesTest.php\">\n    <InvalidArgument>\n      <code><![CDATA[Mockery::mock(IntersectionTypeHelper1Interface::class)]]></code>\n    </InvalidArgument>\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf(ClassWithNewInInitializer::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(ClassWithNewInInitializer::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(ClassWithNewInInitializer::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(PDO::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(PDO::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(PDO::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Serializable::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Serializable::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Serializable::class, $mock)]]></code>\n      <code><![CDATA[self::assertNull($mock->getTimestamp())]]></code>\n      <code><![CDATA[self::assertNull($mock->getTimestamp())]]></code>\n      <code><![CDATA[self::assertSame('it works', (new HandlerClass())->doStuff($class))]]></code>\n      <code><![CDATA[self::assertSame('it works', (new HandlerClass())->doStuff($class))]]></code>\n      <code><![CDATA[self::assertSame(0, $mock->exec('select * from foo.bar'))]]></code>\n      <code><![CDATA[self::assertSame(0, $mock->exec('select * from foo.bar'))]]></code>\n      <code><![CDATA[self::assertSame(0, $mock->getTimestamp())]]></code>\n      <code><![CDATA[self::assertSame(0, $mock->getTimestamp())]]></code>\n      <code><![CDATA[self::assertSame(0.0, $mock->getTimestamp())]]></code>\n      <code><![CDATA[self::assertSame(0.0, $mock->getTimestamp())]]></code>\n      <code><![CDATA[self::assertSame(123, \\pcntl_wexitstatus($status))]]></code>\n      <code><![CDATA[self::assertSame(123, \\pcntl_wexitstatus($status))]]></code>\n      <code><![CDATA[self::assertSame(SimpleEnum::first, $mock->enum)]]></code>\n      <code><![CDATA[self::assertSame(SimpleEnum::first, $mock->enum)]]></code>\n      <code><![CDATA[self::markTestSkipped(\"Couldn't fork for exit test\")]]></code>\n      <code><![CDATA[self::markTestSkipped(\"Couldn't fork for exit test\")]]></code>\n    </MissingThrowsDocblock>\n    <MixedArgument>\n      <code><![CDATA[$class]]></code>\n    </MixedArgument>\n    <MixedAssignment>\n      <code><![CDATA[$class]]></code>\n      <code><![CDATA[$mock]]></code>\n      <code><![CDATA[$mock]]></code>\n    </MixedAssignment>\n    <MixedMethodCall>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[exits]]></code>\n      <code><![CDATA[foo]]></code>\n      <code><![CDATA[getMock]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[throws]]></code>\n      <code><![CDATA[with]]></code>\n    </MixedMethodCall>\n    <TypeDoesNotContainNull>\n      <code><![CDATA[assertNull]]></code>\n    </TypeDoesNotContainNull>\n    <UndefinedMethod>\n      <code><![CDATA[allows]]></code>\n      <code><![CDATA[expects]]></code>\n      <code><![CDATA[makePartial]]></code>\n      <code><![CDATA[makePartial]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n      <code><![CDATA[shouldReceive]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[Php81LanguageFeaturesTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/PHP82/Php82LanguageFeaturesTest.php\">\n    <InternalClass>\n      <code><![CDATA[Reflector::getTypeHint($refParam)]]></code>\n      <code><![CDATA[Reflector::getTypeHint($refParam)]]></code>\n      <code><![CDATA[Reflector::getTypeHint($refParam)]]></code>\n    </InternalClass>\n    <InternalMethod>\n      <code><![CDATA[Reflector::getTypeHint($refParam)]]></code>\n      <code><![CDATA[Reflector::getTypeHint($refParam)]]></code>\n      <code><![CDATA[Reflector::getTypeHint($refParam)]]></code>\n    </InternalMethod>\n    <MissingThrowsDocblock>\n      <code><![CDATA[getMethod]]></code>\n      <code><![CDATA[getMethod]]></code>\n      <code><![CDATA[self::assertFalse($mock->testFalseMethod())]]></code>\n      <code><![CDATA[self::assertFalse($mock->testFalseMethod())]]></code>\n      <code><![CDATA[self::assertInstanceOf(HasNullReturnType::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(HasNullReturnType::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(HasNullReturnType::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(HasReservedWordFalse::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(HasReservedWordFalse::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(HasReservedWordFalse::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(HasReservedWordTrue::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(HasReservedWordTrue::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(HasReservedWordTrue::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(ReflectionType::class, $expectedType)]]></code>\n      <code><![CDATA[self::assertInstanceOf(ReflectionType::class, $expectedType)]]></code>\n      <code><![CDATA[self::assertInstanceOf(ReflectionType::class, $expectedType)]]></code>\n      <code><![CDATA[self::assertInstanceOf(ReflectionType::class, $type)]]></code>\n      <code><![CDATA[self::assertInstanceOf(ReflectionType::class, $type)]]></code>\n      <code><![CDATA[self::assertInstanceOf(ReflectionType::class, $type)]]></code>\n      <code><![CDATA[self::assertSame($expectedType->__toString(), $type->__toString())]]></code>\n      <code><![CDATA[self::assertSame($expectedType->__toString(), $type->__toString())]]></code>\n      <code><![CDATA[self::assertSame($expectedType->__toString(), $type->__toString())]]></code>\n      <code><![CDATA[self::assertSame($expectedType->__toString(), $type->__toString())]]></code>\n      <code><![CDATA[self::assertSame('bar', $class->foo)]]></code>\n      <code><![CDATA[self::assertSame('bar', $class->foo)]]></code>\n      <code><![CDATA[self::assertSame('iterable|\\stdClass|string', Reflector::getTypeHint($refParam))]]></code>\n      <code><![CDATA[self::assertSame('iterable|\\stdClass|string', Reflector::getTypeHint($refParam))]]></code>\n      <code><![CDATA[self::assertSame('iterable|object', Reflector::getTypeHint($refParam))]]></code>\n      <code><![CDATA[self::assertSame('iterable|object', Reflector::getTypeHint($refParam))]]></code>\n      <code><![CDATA[self::assertSame('iterable|object|string', Reflector::getTypeHint($refParam))]]></code>\n      <code><![CDATA[self::assertSame('iterable|object|string', Reflector::getTypeHint($refParam))]]></code>\n      <code><![CDATA[self::assertTrue($mock->testTrueMethod())]]></code>\n      <code><![CDATA[self::assertTrue($mock->testTrueMethod())]]></code>\n    </MissingThrowsDocblock>\n    <MixedMethodCall>\n      <code><![CDATA[once]]></code>\n      <code><![CDATA[once]]></code>\n    </MixedMethodCall>\n    <PossiblyNullReference>\n      <code><![CDATA[__toString]]></code>\n      <code><![CDATA[__toString]]></code>\n    </PossiblyNullReference>\n    <PossiblyUndefinedIntArrayOffset>\n      <code><![CDATA[$expectedMethod\n            ->getParameters()[0]]]></code>\n      <code><![CDATA[$expectedReflectionClass->getMethods()[0]]]></code>\n      <code><![CDATA[$expectedReflectionClass->getMethods()[0]]]></code>\n      <code><![CDATA[$refClass->getMethods()[0]]]></code>\n      <code><![CDATA[$refClass->getMethods()[0]]]></code>\n      <code><![CDATA[$refClass->getMethods()[0]]]></code>\n      <code><![CDATA[$refMethod->getParameters()[0]]]></code>\n      <code><![CDATA[$refMethod->getParameters()[0]]]></code>\n      <code><![CDATA[$refMethod->getParameters()[0]]]></code>\n      <code><![CDATA[$reflectionClass->getMethod($expectedMethod->getName())\n            ->getParameters()[0]]]></code>\n    </PossiblyUndefinedIntArrayOffset>\n    <RedundantCondition>\n      <code><![CDATA[assertFalse]]></code>\n      <code><![CDATA[assertTrue]]></code>\n    </RedundantCondition>\n    <UndefinedClass>\n      <code><![CDATA[$class->foo]]></code>\n      <code><![CDATA[$class->foo]]></code>\n    </UndefinedClass>\n    <UndefinedMethod>\n      <code><![CDATA[expects]]></code>\n      <code><![CDATA[expects]]></code>\n    </UndefinedMethod>\n    <UnusedClass>\n      <code><![CDATA[Php82LanguageFeaturesTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/PHP82/TestCase1439Test.php\">\n    <MixedMethodCall>\n      <code><![CDATA[andReturn]]></code>\n      <code><![CDATA[withArgs]]></code>\n    </MixedMethodCall>\n    <UndefinedMagicMethod>\n      <code><![CDATA[expects]]></code>\n    </UndefinedMagicMethod>\n    <UnusedClass>\n      <code><![CDATA[TestCase1439Test]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/PHP83/Php83LanguageFeaturesTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf(Classes::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Classes::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Classes::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Interfaces::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Interfaces::class, $mock)]]></code>\n      <code><![CDATA[self::assertInstanceOf(Interfaces::class, $mock)]]></code>\n      <code><![CDATA[self::assertSame(ClassName::CONSTANT, $mock::CONSTANT)]]></code>\n      <code><![CDATA[self::assertSame(ClassName::CONSTANT, $mock::CONSTANT)]]></code>\n      <code><![CDATA[self::assertSame(ClassName::CONSTANT, $mock::{$constant})]]></code>\n      <code><![CDATA[self::assertSame(ClassName::CONSTANT, $mock::{$constant})]]></code>\n      <code><![CDATA[self::assertSame(ClassName::{$constant}, $mock::CONSTANT)]]></code>\n      <code><![CDATA[self::assertSame(ClassName::{$constant}, $mock::CONSTANT)]]></code>\n      <code><![CDATA[self::assertSame(ClassName::{$constant}, $mock::{$constant})]]></code>\n      <code><![CDATA[self::assertSame(ClassName::{$constant}, $mock::{$constant})]]></code>\n      <code><![CDATA[self::assertSame(Enums::FOO, $mock->foo())]]></code>\n      <code><![CDATA[self::assertSame(Enums::FOO, $mock->foo())]]></code>\n      <code><![CDATA[self::assertSame(Enums::FOO, $mock::BAR)]]></code>\n      <code><![CDATA[self::assertSame(Enums::FOO, $mock::BAR)]]></code>\n      <code><![CDATA[self::assertSame(Enums::FOO, $mock::BAR)]]></code>\n      <code><![CDATA[self::assertSame(Enums::FOO, $mock::BAR)]]></code>\n      <code><![CDATA[self::assertSame(Enums::FOO, $mock::BAR)]]></code>\n      <code><![CDATA[self::assertSame(Enums::FOO, $mock::BAR)]]></code>\n    </MissingThrowsDocblock>\n    <UndefinedClass>\n      <code><![CDATA[$mock]]></code>\n    </UndefinedClass>\n    <UnusedClass>\n      <code><![CDATA[Php83LanguageFeaturesTest]]></code>\n    </UnusedClass>\n  </file>\n  <file src=\"tests/Unit/PHP84/Php84LanguageFeaturesTest.php\">\n    <MissingThrowsDocblock>\n      <code><![CDATA[self::assertInstanceOf(stdClass::class, Mockery::mock(stdClass::class))]]></code>\n      <code><![CDATA[self::assertInstanceOf(stdClass::class, Mockery::mock(stdClass::class))]]></code>\n      <code><![CDATA[self::assertInstanceOf(stdClass::class, Mockery::mock(stdClass::class))]]></code>\n    </MissingThrowsDocblock>\n    <UnusedClass>\n      <code><![CDATA[Php84LanguageFeaturesTest]]></code>\n    </UnusedClass>\n  </file>\n</files>\n"
        },
        {
          "name": "psalm.xml.dist",
          "type": "blob",
          "size": 1.4453125,
          "content": "<?xml version=\"1.0\"?>\n<psalm\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"https://getpsalm.org/schema/config\"\n    xsi:schemaLocation=\"https://getpsalm.org/schema/config https://getpsalm.org/schema/config\"\n    autoloader=\"vendor/autoload.php\"\n    cacheDirectory=\".cache/psalm\"\n    checkForThrowsDocblock=\"true\"\n    checkForThrowsInGlobalScope=\"true\"\n    disableSuppressAll=\"true\"\n    ensureArrayIntOffsetsExist=\"true\"\n    ensureArrayStringOffsetsExist=\"true\"\n    ensureOverrideAttribute=\"true\"\n    errorBaseline=\"psalm-baseline.xml\"\n    errorLevel=\"1\"\n    findUnusedBaselineEntry=\"true\"\n    findUnusedCode=\"true\"\n    findUnusedPsalmSuppress=\"true\"\n    findUnusedVariablesAndParams=\"true\"\n    hideAllErrorsExceptPassedFiles=\"false\"\n    limitMethodComplexity=\"true\"\n    memoizeMethodCallResults=\"true\"\n    restrictReturnTypes=\"true\"\n    sealAllMethods=\"true\"\n    sealAllProperties=\"true\"\n    strictBinaryOperands=\"true\"\n    useDocblockPropertyTypes=\"true\"\n    usePhpDocMethodsWithoutMagicCall=\"true\"\n    usePhpDocPropertiesWithoutMagicCall=\"true\"\n    phpVersion=\"8.3\"\n>\n    <projectFiles>\n        <directory name=\"library\"/>\n        <directory name=\"tests\"/>\n        <ignoreFiles>\n            <directory name=\"tests/Fixture\"/>\n            <directory name=\"vendor\"/>\n            <file name=\"tests/Unit/Mockery/ContainerTest.php\"/>\n        </ignoreFiles>\n    </projectFiles>\n    <extraFiles>\n        <directory name=\"tests/Fixture\"/>\n    </extraFiles>\n</psalm>\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}