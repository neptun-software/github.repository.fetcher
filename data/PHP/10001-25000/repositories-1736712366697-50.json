{
  "metadata": {
    "timestamp": 1736712366697,
    "page": 50,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "walkor/workerman",
      "stars": 11234,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.19921875,
          "content": "/.gitattributes     export-ignore\n/.github/           export-ignore\n/.gitignore         export-ignore\n/phpunit.xml.dist   export-ignore\n/tests/             export-ignore\n/phpstan.neon.dist  export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.123046875,
          "content": "logs\n.buildpath\n.project\n.settings\n.idea\n.DS_Store\nvendor/\n/.vscode\ncomposer.lock\nphpunit.xml\n/phpstan.neon\n/*.pid\n/*.pid.lock"
        },
        {
          "name": "MIT-LICENSE.txt",
          "type": "blob",
          "size": 1.138671875,
          "content": "The MIT License\n\nCopyright (c) 2009-2025 walkor<walkor@workerman.net> and contributors (see https://github.com/walkor/workerman/contributors)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.48828125,
          "content": "# Workerman\n[![Gitter](https://badges.gitter.im/walkor/Workerman.svg)](https://gitter.im/walkor/Workerman?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)\n[![Latest Stable Version](https://poser.pugx.org/workerman/workerman/v/stable)](https://packagist.org/packages/workerman/workerman)\n[![Total Downloads](https://poser.pugx.org/workerman/workerman/downloads)](https://packagist.org/packages/workerman/workerman)\n[![Monthly Downloads](https://poser.pugx.org/workerman/workerman/d/monthly)](https://packagist.org/packages/workerman/workerman)\n[![Daily Downloads](https://poser.pugx.org/workerman/workerman/d/daily)](https://packagist.org/packages/workerman/workerman)\n[![License](https://poser.pugx.org/workerman/workerman/license)](https://packagist.org/packages/workerman/workerman)\n\n## What is it\nWorkerman is an asynchronous event-driven PHP framework with high performance to build fast and scalable network applications. \nWorkerman supports HTTP, Websocket, SSL and other custom protocols. \nWorkerman supports event extension.\n\n## Requires \nA POSIX compatible operating system (Linux, OSX, BSD)  \nPOSIX and PCNTL extensions required   \nEvent extension recommended for better performance  \n\n## Installation\n\n```\ncomposer require workerman/workerman\n```\n\n## Documentation\n\n[https://manual.workerman.net](https://manual.workerman.net)\n\n## Basic Usage\n\n### A websocket server \n```php\n<?php\n\nuse Workerman\\Worker;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n// Create a Websocket server\n$ws_worker = new Worker('websocket://0.0.0.0:2346');\n\n// Emitted when new connection come\n$ws_worker->onConnect = function ($connection) {\n    echo \"New connection\\n\";\n};\n\n// Emitted when data received\n$ws_worker->onMessage = function ($connection, $data) {\n    // Send hello $data\n    $connection->send('Hello ' . $data);\n};\n\n// Emitted when connection closed\n$ws_worker->onClose = function ($connection) {\n    echo \"Connection closed\\n\";\n};\n\n// Run worker\nWorker::runAll();\n```\n\n### An http server\n```php\nuse Workerman\\Worker;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n// #### http worker ####\n$http_worker = new Worker('http://0.0.0.0:2345');\n\n// 4 processes\n$http_worker->count = 4;\n\n// Emitted when data received\n$http_worker->onMessage = function ($connection, $request) {\n    //$request->get();\n    //$request->post();\n    //$request->header();\n    //$request->cookie();\n    //$request->session();\n    //$request->uri();\n    //$request->path();\n    //$request->method();\n\n    // Send data to client\n    $connection->send(\"Hello World\");\n};\n\n// Run all workers\nWorker::runAll();\n```\n\n### A tcp server\n```php\nuse Workerman\\Worker;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n// #### create socket and listen 1234 port ####\n$tcp_worker = new Worker('tcp://0.0.0.0:1234');\n\n// 4 processes\n$tcp_worker->count = 4;\n\n// Emitted when new connection come\n$tcp_worker->onConnect = function ($connection) {\n    echo \"New Connection\\n\";\n};\n\n// Emitted when data received\n$tcp_worker->onMessage = function ($connection, $data) {\n    // Send data to client\n    $connection->send(\"Hello $data \\n\");\n};\n\n// Emitted when connection is closed\n$tcp_worker->onClose = function ($connection) {\n    echo \"Connection closed\\n\";\n};\n\nWorker::runAll();\n```\n\n### Enable SSL\n```php\n<?php\n\nuse Workerman\\Worker;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n// SSL context.\n$context = [\n    'ssl' => [\n        'local_cert'  => '/your/path/of/server.pem',\n        'local_pk'    => '/your/path/of/server.key',\n        'verify_peer' => false,\n    ]\n];\n\n// Create a Websocket server with ssl context.\n$ws_worker = new Worker('websocket://0.0.0.0:2346', $context);\n\n// Enable SSL. WebSocket+SSL means that Secure WebSocket (wss://). \n// The similar approaches for Https etc.\n$ws_worker->transport = 'ssl';\n\n$ws_worker->onMessage = function ($connection, $data) {\n    // Send hello $data\n    $connection->send('Hello ' . $data);\n};\n\nWorker::runAll();\n```\n\n### Custom protocol\nProtocols/MyTextProtocol.php\n```php\n\nnamespace Protocols;\n\n/**\n * User defined protocol\n * Format Text+\"\\n\"\n */\nclass MyTextProtocol\n{\n    public static function input($recv_buffer)\n    {\n        // Find the position of the first occurrence of \"\\n\"\n        $pos = strpos($recv_buffer, \"\\n\");\n\n        // Not a complete package. Return 0 because the length of package can not be calculated\n        if ($pos === false) {\n            return 0;\n        }\n\n        // Return length of the package\n        return $pos + 1;\n    }\n\n    public static function decode($recv_buffer)\n    {\n        return trim($recv_buffer);\n    }\n\n    public static function encode($data)\n    {\n        return $data . \"\\n\";\n    }\n}\n```\n\n```php\nuse Workerman\\Worker;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n// #### MyTextProtocol worker ####\n$text_worker = new Worker('MyTextProtocol://0.0.0.0:5678');\n\n$text_worker->onConnect = function ($connection) {\n    echo \"New connection\\n\";\n};\n\n$text_worker->onMessage = function ($connection, $data) {\n    // Send data to client\n    $connection->send(\"Hello world\\n\");\n};\n\n$text_worker->onClose = function ($connection) {\n    echo \"Connection closed\\n\";\n};\n\n// Run all workers\nWorker::runAll();\n```\n\n### Timer\n```php\n\nuse Workerman\\Worker;\nuse Workerman\\Timer;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$task = new Worker();\n$task->onWorkerStart = function ($task) {\n    // 2.5 seconds\n    $time_interval = 2.5; \n    $timer_id = Timer::add($time_interval, function () {\n        echo \"Timer run\\n\";\n    });\n};\n\n// Run all workers\nWorker::runAll();\n```\n\n### AsyncTcpConnection (tcp/ws/text/frame etc...)\n```php\n\nuse Workerman\\Worker;\nuse Workerman\\Connection\\AsyncTcpConnection;\n\nrequire_once __DIR__ . '/vendor/autoload.php';\n\n$worker = new Worker();\n$worker->onWorkerStart = function () {\n    // Websocket protocol for client.\n    $ws_connection = new AsyncTcpConnection('ws://echo.websocket.org:80');\n    $ws_connection->onConnect = function ($connection) {\n        $connection->send('Hello');\n    };\n    $ws_connection->onMessage = function ($connection, $data) {\n        echo \"Recv: $data\\n\";\n    };\n    $ws_connection->onError = function ($connection, $code, $msg) {\n        echo \"Error: $msg\\n\";\n    };\n    $ws_connection->onClose = function ($connection) {\n        echo \"Connection closed\\n\";\n    };\n    $ws_connection->connect();\n};\n\nWorker::runAll();\n```\n\n\n\n#### Use HTTP proxy\n\n```php\n<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Workerman\\Connection\\AsyncTcpConnection;\n$worker = new \\Workerman\\Worker();\n$worker->onWorkerStart = function($worker){\n    echo '开始链接' . PHP_EOL;\n    $url = 'ws://stream.binance.com:9443/ws';\n    $con = new AsyncTcpConnection($url);\n    $con->transport = 'ssl';\n//    $con->proxySocks5 = '127.0.0.1:1080';\n    $con->proxyHttp = '127.0.0.1:25378';\n\n    $con->onConnect = function(AsyncTcpConnection $con) {\n        $ww = [\n            'id' => 1,\n            'method' => 'SUBSCRIBE',\n            'params' => [\n                \"btcusdt@aggTrade\",\n                \"btcusdt@depth\"\n            ]\n        ];\n        echo '链接成功';\n        $con->send(json_encode($ww));\n        echo 'ok';\n    };\n\n    $con->onMessage = function(AsyncTcpConnection $con, $data) {\n        echo $data;\n    };\n\n    $con->onClose = function (AsyncTcpConnection $con) {\n        echo 'onClose' . PHP_EOL;\n    };\n\n    $con->onError = function (AsyncTcpConnection $con, $code, $msg) {\n        echo \"error [ $code ] $msg\\n\";\n    };\n\n    $con->connect();\n};\n\\Workerman\\Worker::runAll();\n```\n\n\n\n#### Use Socks5 proxy\n\n```php\n<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Workerman\\Connection\\AsyncTcpConnection;\n$worker = new \\Workerman\\Worker();\n$worker->onWorkerStart = function($worker){\n    echo '开始链接' . PHP_EOL;\n    $url = 'ws://stream.binance.com:9443/ws';\n    $con = new AsyncTcpConnection($url);\n    $con->transport = 'ssl';\n    $con->proxySocks5 = '127.0.0.1:1080';\n//    $con->proxyHttp = '127.0.0.1:25378';\n\n    $con->onConnect = function(AsyncTcpConnection $con) {\n        $ww = [\n            'id' => 1,\n            'method' => 'SUBSCRIBE',\n            'params' => [\n                \"btcusdt@aggTrade\",\n                \"btcusdt@depth\"\n            ]\n        ];\n        echo '链接成功';\n        $con->send(json_encode($ww));\n        echo 'ok';\n    };\n\n    $con->onMessage = function(AsyncTcpConnection $con, $data) {\n        echo $data;\n    };\n\n    $con->onClose = function (AsyncTcpConnection $con) {\n        echo 'onClose' . PHP_EOL;\n    };\n\n    $con->onError = function (AsyncTcpConnection $con, $code, $msg) {\n        echo \"error [ $code ] $msg\\n\";\n    };\n\n    $con->connect();\n};\n\\Workerman\\Worker::runAll();\n\n```\n\n\n\nproxy supports TLS1.3, no Sniproxy channel\n\n\n\n## Available commands\n```php start.php start  ```  \n```php start.php start -d  ```  \n```php start.php status  ```  \n```php start.php status -d  ```  \n```php start.php connections```  \n```php start.php stop  ```  \n```php start.php stop -g  ```  \n```php start.php restart  ```  \n```php start.php reload  ```  \n```php start.php reload -g  ```\n\n# Benchmarks\nhttps://www.techempower.com/benchmarks/#section=data-r19&hw=ph&test=plaintext&l=zik073-1r\n\n\n\n### Supported by\n\n[![JetBrains logo.](https://resources.jetbrains.com/storage/products/company/brand/logos/jetbrains.svg)](https://jb.gg/OpenSourceSupport)\n\n\n## Other links with workerman\n\n[webman](https://github.com/walkor/webman)   \n[AdapterMan](https://github.com/joanhey/AdapterMan)\n\n## Donate\n<a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=UQGGS9UB35WWG\">PayPal</a>\n\n## LICENSE\n\nWorkerman is released under the [MIT license](https://github.com/walkor/workerman/blob/master/MIT-LICENSE.txt).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.0927734375,
          "content": "# Security Policy\n\n\n## Reporting a Vulnerability\n\nPlease contact by email walkor@workerman.net\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 1.51171875,
          "content": "{\n    \"name\": \"workerman/workerman\",\n    \"type\": \"library\",\n    \"keywords\": [\n        \"event-loop\",\n        \"asynchronous\",\n        \"http\",\n        \"framework\"\n    ],\n    \"homepage\": \"https://www.workerman.net\",\n    \"license\": \"MIT\",\n    \"description\": \"An asynchronous event driven PHP framework for easily building fast, scalable network applications.\",\n    \"authors\": [\n        {\n            \"name\": \"walkor\",\n            \"email\": \"walkor@workerman.net\",\n            \"homepage\": \"https://www.workerman.net\",\n            \"role\": \"Developer\"\n        }\n    ],\n    \"support\": {\n        \"email\": \"walkor@workerman.net\",\n        \"issues\": \"https://github.com/walkor/workerman/issues\",\n        \"forum\": \"https://www.workerman.net/questions\",\n        \"wiki\": \"https://www.workerman.net/doc/workerman/\",\n        \"source\": \"https://github.com/walkor/workerman\"\n    },\n    \"require\": {\n        \"php\": \">=8.1\",\n        \"ext-json\": \"*\"\n    },\n    \"suggest\": {\n        \"ext-event\": \"For better performance. \"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Workerman\\\\\": \"src\"\n        }\n    },\n    \"minimum-stability\": \"dev\",\n    \"conflict\": {\n        \"ext-swow\": \"<v1.0.0\"\n    },\n    \"require-dev\": {\n        \"pestphp/pest\": \"2.x-dev\",\n        \"mockery/mockery\": \"^1.6\",\n        \"guzzlehttp/guzzle\": \"^7.0\",\n        \"phpstan/phpstan\": \"1.11.x-dev\"\n    },\n    \"config\": {\n        \"allow-plugins\": {\n            \"pestphp/pest-plugin\": true\n        }\n    },\n    \"scripts\": {\n        \"analyze\": \"phpstan\",\n        \"test\": \"pest --colors=always\"\n    }\n}\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 1.61328125,
          "content": "parameters:\n\tlevel: 5\n\tpaths:\n\t\t- src\n\t\t- tests\n\tignoreErrors:\n\t    -\n\t        path: src/Events/Revolt.php\n\t        messages:\n\t            - '#Property Workerman\\\\Events\\\\Revolt::\\$driver has unknown class Revolt\\\\EventLoop\\\\Driver as its type.#'\n\t            - '#Call to static method getDriver\\(\\) on an unknown class Revolt\\\\EventLoop.#'\n\t            - '#Method Workerman\\\\Events\\\\Revolt::driver\\(\\) has invalid return type Revolt\\\\EventLoop\\\\Driver.#'\n\t            - '#Call to method .* on an unknown class Revolt\\\\EventLoop\\\\Driver.#'\n\t    -\n\t        path: src/Events/Swow.php\n\t        messages:\n\t            - '#Used function Swow\\\\Sync\\\\waitAll not found.#'\n\t            - '#Call to static method .* on an unknown class Swow\\\\.*.#'\n\t            - '#Function msleep not found.#'\n\t            - '#Function stream_poll_one not found.#'\n\t            - '#Caught class Swow\\\\SignalException not found.#'\n\t            - '#Function Swow\\\\Sync\\\\waitAll not found.#'\n\t            - '#Constant STREAM_POLLHUP not found.#'\n\t            - '#Constant STREAM_POLLIN not found.#'\n\t            - '#Constant STREAM_POLLNONE not found.#'\n\t            - '#Constant STREAM_POLLOUT not found.#'\n\t            - '#Property Workerman\\\\Events\\\\Swow::.* has unknown class Swow\\\\Coroutine as its type.#'\n\t    -\n\t        path: src/Events/Event.php\n\t        reportUnmatched: false\n\t        messages:\n\t            - '#Call to an undefined method EventBase::+.#'\n\t    - path: src/Timer.php\n\t      message: '#Call to static method getSuspension\\(\\) on an unknown class Revolt\\\\EventLoop.#'\n\t    - path: src/Worker.php\n\t      message: '#Constant LINE_VERSION_LENGTH not found.#'\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.5029296875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.1/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\"\n>\n  <testsuites>\n    <testsuite name=\"Test Suite\">\n      <directory suffix=\"Test.php\">./tests</directory>\n    </testsuite>\n  </testsuites>\n  <coverage/>\n  <source>\n    <include>\n      <directory suffix=\".php\">./src</directory>\n    </include>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}