{
  "metadata": {
    "timestamp": 1736712347919,
    "page": 13,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nikic/PHP-Parser",
      "stars": 17121,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1455078125,
          "content": "root = true\n\n[*.y]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.53125,
          "content": "/.github         export-ignore\n/doc             export-ignore\n/grammar         export-ignore\n/test            export-ignore\n/test_old        export-ignore\n/tools           export-ignore\n.editorconfig    export-ignore\n.gitattributes   export-ignore\n.gitignore       export-ignore\n.php-cs-fixer.dist.php  export-ignore\nMakefile         export-ignore\nCHANGELOG.md     export-ignore\nCONTRIBUTING.md  export-ignore\nphpstan-baseline.neon   export-ignore\nphpstan.neon.dist   export-ignore\nphpunit.xml.dist export-ignore\nUPGRADE-*.md     export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1044921875,
          "content": ".idea/\nvendor/\ncomposer.lock\ngrammar/kmyacc.exe\ngrammar/y.output\n.phpunit.result.cache\n.php-cs-fixer.cache\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 0.984375,
          "content": "<?php\n\n$finder = PhpCsFixer\\Finder::create()\n    ->exclude('PhpParser/Parser')\n    ->in(__DIR__ . '/lib')\n    ->in(__DIR__ . '/test')\n    ->in(__DIR__ . '/grammar')\n;\n\n$config = new PhpCsFixer\\Config();\nreturn $config->setRiskyAllowed(true)\n    ->setRules([\n        '@PSR12' => true,\n        // We use PSR12 with consistent brace placement.\n        'curly_braces_position' => [\n            'functions_opening_brace' => 'same_line',\n            'classes_opening_brace' => 'same_line',\n        ],\n        // declare(strict_types=1) on the same line as <?php.\n        'blank_line_after_opening_tag' => false,\n        'declare_strict_types' => true,\n        // Keep argument formatting for now.\n        'method_argument_space' => ['on_multiline' => 'ignore'],\n        'phpdoc_align' => ['align' => 'left'],\n        'phpdoc_trim' => true,\n        'no_empty_phpdoc' => true,\n        'no_superfluous_phpdoc_tags' => ['allow_mixed' => true],\n        'no_extra_blank_lines' => true,\n    ])\n    ->setFinder($finder)\n;\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 48.2216796875,
          "content": "Version 5.4.0 (2024-12-30)\n--------------------------\n\n### Added\n\n* Added `Property::isAbstract()` and `Property::isFinal()` methods.\n* Added `PropertyHook::isFinal()` method.\n* Emit an error if property hook is used on declaration with multiple properties.\n\n### Fixed\n\n* Make legacy class aliases compatible with classmap-authoritative autoloader.\n* `Param::isPromoted()` and `Param::isPublic()` now returns true for parameters that have property\n  hooks but no explicit visibility modifier.\n* `PropertyHook::getStmts()` now correctly desugars short `set` hooks. `set => $value` will be\n  expanded to `set { $this->propertyName = $value; }`. This requires the `propertyName` attribute\n  on the hook to be set, which is now also set by the parser. If the attribute is not set,\n  `getStmts()` will throw an error for short set hooks, as it is not possible to produce a correct\n  desugaring.\n\nVersion 5.3.1 (2024-10-08)\n--------------------------\n\n### Added\n\n* Added support for declaring functions with name `exit` or `die`, to allow their use in stubs.\n\nVersion 5.3.0 (2024-09-29)\n--------------------------\n\n### Added\n\n* Added `indent` option to pretty printer, which can be used to specify the indentation to use\n  (defaulting to four spaces). This also allows using tab indentation.\n\n### Fixed\n\n* Resolve names in `PropertyHook`s in the `NameResolver`.\n* Include the trailing semicolon inside `Stmt\\GroupUse` nodes, making them consistent with\n  `Stmt\\Use_` nodes.\n* Fixed indentation sometimes becoming negative in formatting-preserving pretty printer, resulting\n  in `ValueError`s.\n\nVersion 5.2.0 (2024-09-15)\n--------------------------\n\n### Added\n\n* [8.4] Added support for `__PROPERTY__` magic constant, represented using a\n  `Node\\Scalar\\MagicConst\\Property` node.\n* [8.4] Added support for property hooks, which are represented using a new `hooks` subnode on\n  `Node\\Stmt\\Property` and `Node\\Param`, which contains an array of `Node\\PropertyHook`.\n* [8.4] Added support for asymmetric visibility modifiers. Property `flags` can now hold the\n  additional bits `Modifiers::PUBLIC_SET`, `Modifiers::PROTECTED_SET` and `Modifiers::PRIVATE_SET`.\n* [8.4] Added support for generalized exit function. For backwards compatibility, exit without\n  argument or a single plain argument continues to use a `Node\\Expr\\Exit_` node. Otherwise (e.g.\n  if a named argument is used) it will be represented as a plain `Node\\Expr\\FuncCall`.\n* Added support for passing enum values to various builder methods, like `BuilderFactory::val()`.\n\n### Removed\n\n* Removed support for alternative array syntax `$array{0}` from the PHP 8 parser. It is still\n  supported by the PHP 7 parser. This is necessary in order to support property hooks.\n\nVersion 5.1.0 (2024-07-01)\n--------------------------\n\n### Added\n\n* [8.4] Added support for dereferencing `new` expressions without parentheses.\n\n### Fixed\n\n* Fixed redundant parentheses being added when pretty printing ternary expressions.\n\n### Changed\n\n* Made some phpdoc types more precise.\n\nVersion 5.0.2 (2024-03-05)\n--------------------------\n\n### Fixed\n\n* Fix handling of indentation on next line after opening PHP tag in formatting-preserving pretty\nprinter.\n\n### Changed\n\n* Avoid cyclic references in `Parser` objects. This means that no longer used parser objects are\n  immediately destroyed now, instead of requiring cycle GC.\n* Update `PhpVersion::getNewestSupported()` to report PHP 8.3 instead of PHP 8.2.\n\nVersion 5.0.1 (2024-02-21)\n--------------------------\n\n### Changed\n\n* Added check to detect use of PHP-Parser with libraries that define `T_*` compatibility tokens\n  with incorrect type (such as string instead of int). This would lead to `TypeError`s down the\n  line. Now an `Error` will be thrown early to indicate the problem.\n\nVersion 5.0.0 (2024-01-07)\n--------------------------\n\nSee UPGRADE-5.0 for detailed migration instructions.\n\n### Fixed\n\n* Fixed parent class of `PropertyItem` and `UseItem`.\n\nVersion 5.0.0-rc1 (2023-12-20)\n------------------------------\n\nSee UPGRADE-5.0 for detailed migration instructions.\n\n### Fixed\n\n* Fixed parsing of empty files.\n\n### Added\n\n* Added support for printing additional attributes (like `kind`) in `NodeDumper`.\n* Added `rawValue` attribute to `InterpolatedStringPart` and heredoc/nowdoc `String_`s, which\n  provides the original, unparsed value. It was previously only available for non-interpolated\n  single/double quoted strings.\n* Added `Stmt\\Block` to represent `{}` code blocks. Previously, such code blocks were flattened\n  into the parent statements array. `Stmt\\Block` will not be created for structures that are\n  typically used with code blocks, for example `if ($x) { $y; }` will be represented as previously,\n  while `if ($x) { { $x; } }` will have an extra `Stmt\\Block` wrapper.\n\n### Changed\n\n* Use visitor to assign comments. This fixes the long-standing issue where comments were assigned\n  to all nodes sharing a starting position. Now only the outer-most node will hold the comments.\n* Don't parse unicode escape sequences when targeting PHP < 7.0.\n* Improve NodeDumper performance for large dumps.\n\n### Removed\n\n* Removed `Stmt\\Throw_` node, use `Expr\\Throw_` inside `Stmt\\Expression` instead.\n* Removed `ParserFactory::create()`.\n\nVersion 5.0.0-beta1 (2023-09-17)\n--------------------------------\n\nSee UPGRADE-5.0 for detailed migration instructions.\n\n### Added\n\n* Visitors can now be passed directly to the `NodeTraverser` constructor. A separate call to\n  `addVisitor()` is no longer required.\n\n### Changed\n\n* The minimum host PHP version is now PHP 7.4. It is still possible to parse code from older\n  versions. Property types have been added where possible.\n* The `Lexer` no longer accepts options. `Lexer\\Emulative` only accepts a `PhpVersion`. The\n  `startLexing()`, `getTokens()` and `handleHaltCompiler()` methods have been removed. Instead,\n  there is a single method `tokenize()` returning the tokens.\n* The `Parser::getLexer()` method has been replaced by `Parser::getTokens()`.\n* Attribute handling has been moved from the lexer to the parser, and is no longer configurable.\n  The comments, startLine, endLine, startTokenPos, endTokenPos, startFilePos, and endFilePos\n  attributes will always be added.\n* The pretty printer now defaults to PHP 7.4 as the target version.\n* The pretty printer now indents heredoc/nowdoc strings if the target version is >= 7.3\n  (flexible heredoc/nowdoc).\n\n### Removed\n\n* The deprecated `Comment::getLine()`, `Comment::getTokenPos()` and `Comment::getFilePos()` methods\n  have been removed. Use `Comment::getStartLine()`, `Comment::getStartTokenPos()` and\n  `Comment::getStartFilePos()` instead.\n\n### Deprecated\n\n* The `Node::getLine()` method has been deprecated. Use `Node::getStartLine()` instead.\n\nVersion 5.0.0-alpha3 (2023-06-24)\n---------------------------------\n\nSee UPGRADE-5.0 for detailed migration instructions.\n\n### Added\n\n* [PHP 8.3] Added support for typed constants.\n* [PHP 8.3] Added support for readonly anonymous classes.\n* Added support for `NodeVisitor::REPLACE_WITH_NULL`.\n* Added support for CRLF newlines in the pretty printer, using the new `newline` option.\n\n### Changed\n\n* Use PHP 7.1 as the default target version for the pretty printer.\n* Print `else if { }` instead of `else { if { } }`.\n* The `leaveNode()` method on visitors is now invoked in reverse order of `enterNode()`.\n* Moved `NodeTraverser::REMOVE_NODE` etc. to `NodeVisitor::REMOVE_NODE`. The old constants are still\n  available for compatibility.\n* The `Name` subnode `parts` has been replaced by `name`, which stores the name as a string rather\n  than an array of parts separated by namespace separators. The `getParts()` method returns the old\n  representation.\n* No longer accept strings for types in Node constructors. Instead, either an `Identifier`, `Name`\n  or `ComplexType` must be passed.\n* `Comment::getReformattedText()` now normalizes CRLF newlines to LF newlines.\n\n### Fixed\n\n* Don't trim leading whitespace in formatting preserving printer.\n* Treat DEL as a label character in the formatting preserving printer depending on the targeted\n  PHP version.\n* Fix error reporting in emulative lexer without explicitly specified error handler.\n* Gracefully handle non-contiguous array indices in the `Differ`.\n\nVersion 5.0.0-alpha2 (2023-03-05)\n---------------------------------\n\nSee UPGRADE-5.0 for detailed migration instructions.\n\n### Added\n\n* [PHP 8.3] Added support for dynamic class constant fetch.\n* Added many additional type annotations. PhpStan is now used.\n* Added a fuzzing target for PHP-Fuzzer, which was how a lot of pretty printer bugs were found.\n* Added `isPromoted()`, `isPublic()`, `isProtected()`, `isPrivate()` and `isReadonly()` methods\n  on `Param`.\n* Added support for class constants in trait builder.\n* Added `PrettyPrinter` interface.\n* Added support for formatting preservation when toggling static modifiers.\n* The `php-parse` binary now accepts `-` as the file name, in which case it will read from stdin.\n\n### Fixed\n\n* The pretty printer now uses a more accurate treatment of unary operator precedence, and will only\n  wrap them in parentheses if required. This allowed fixing a number of other precedence related\n  bugs.\n* The pretty printer now respects the precedence of `clone`, `throw` and arrow functions.\n* The pretty printer no longer unconditionally wraps `yield` in parentheses, unless the target\n  version is set to older than PHP 7.0.\n* Fixed formatting preservation for alternative elseif/else syntax.\n* Fixed checks for when it is safe to print strings as heredoc/nowdoc to accommodate flexible\n  doc string semantics.\n* The pretty printer now prints parentheses around new/instanceof operands in all required\n  situations.\n* Similar, differences in allowed expressions on the LHS of `->` and `::` are now taken into account.\n* Fixed various cases where `\\r` at the end of a doc string could be incorrectly merged into a CRLF\n  sequence with a following `\\n`.\n* `__halt_compiler` is no longer recognized as a semi-reserved keyword, in line with PHP behavior.\n* `<?=` is no longer recognized as a semi-reserved keyword.\n* Fix handling of very large overflowing `\\u` escape sequences.\n\n### Removed\n\n* Removed deprecated `Error` constructor taking a line number instead of an attributes array.\n\nVersion 5.0.0-alpha1 (2022-09-04)\n---------------------------------\n\nSee UPGRADE-5.0 for detailed migration instructions.\n\n### Changed\n\n* PHP 7.1 is now required to run PHP-Parser.\n* Formatting of the standard pretty printer has been adjusted to match PSR-12 more closely.\n* The internal token representation now uses a `PhpParser\\Token` class, which is compatible with\n  PHP 8 token representation (`PhpToken`).\n* Destructuring is now always represented using `Expr\\List_` nodes, even if it uses `[]` syntax.\n* Renamed a number of node classes, and moved things that were not real expressions/statements\n  outside the `Expr`/`Stmt` hierarchy. Compatibility shims for the old names have been retained.\n\n### Added\n\n* Added `PhpVersion` class, which is accepted in a number of places (e.g. ParserFactory, Parser,\n  Lexer, PrettyPrinter) and gives more precise control over the PHP version being targeted.\n* Added PHP 8 parser though it only differs from the PHP 7 parser in concatenation precedence.\n* Added `Parser::getLexer()` method.\n* Added a `Modifiers` class, as a replacement for `Stmt\\Class_::MODIFIER_*`.\n* Added support for returning an array or `REMOVE_NODE` from `NodeVisitor::enterNode()`.\n\n### Removed\n\n* The PHP 5 parser has been removed. The PHP 7 parser has been adjusted to deal with PHP 5 code\n  more gracefully.\n\nVersion 4.15.1 (2022-09-04)\n---------------------------\n\n### Fixed\n\n* Fixed formatting preservation when adding *multiple* attributes to a class/method/etc that\n  previously had none. This fixes a regression in the 4.15.0 release.\n\nVersion 4.15.0 (2022-09-03)\n---------------------------\n\n### Added\n\n* PHP 8.2: Added support for `true` type.\n* PHP 8.2: Added support for DNF types.\n\n### Fixed\n\n* Support `readonly` as a function name.\n* Added `__serialize` and `__unserialize` to magic method list.\n* Fixed bounds check in `Name::slice()`.\n* Fixed formatting preservation when adding attributes to a class/method/etc that previously had none.\n\nVersion 4.14.0 (2022-05-31)\n---------------------------\n\n### Added\n\n* Added support for readonly classes.\n* Added `rawValue` attribute to `LNumber`, `DNumber` and `String_` nodes, which stores the unparsed\n  value of the literal (e.g. `\"1_000\"` rather than `1000`).\n\nVersion 4.13.2 (2021-11-30)\n---------------------------\n\n### Added\n\n* Added builders for enums and enum cases.\n\n### Fixed\n\n* NullsafeMethodCall now extends from CallLike.\n* The `namespacedName` property populated by the `NameResolver` is now declared on relevant nodes,\n  to avoid a dynamic property deprecation warning with PHP 8.2.\n\nVersion 4.13.1 (2021-11-03)\n---------------------------\n\n### Fixed\n\n* Support reserved keywords as enum cases.\n* Support array unpacking in constant expression evaluator.\n\nVersion 4.13.0 (2021-09-20)\n---------------------------\n\n### Added\n\n* [PHP 8.1] Added support for intersection types using a new `IntersectionType` node. Additionally\n  a `ComplexType` parent class for `NullableType`, `UnionType` and `IntersectionType` has been\n  added.\n* [PHP 8.1] Added support for explicit octal literals.\n* [PHP 8.1] Added support for first-class callables. These are represented using a call whose first\n  argument is a `VariadicPlaceholder`. The representation is intended to be forward-compatible with\n  partial function application, just like the PHP feature itself. Call nodes now extend from\n  `Expr\\CallLike`, which provides an `isFirstClassCallable()` method to determine whether a\n  placeholder id present. `getArgs()` can be used to assert that the call is not a first-class\n  callable and returns `Arg[]` rather than `array<Arg|VariadicPlaceholder>`.\n\n### Fixed\n\n* Multiple modifiers for promoted properties are now accepted. In particular this allows something\n  like `public readonly` for promoted properties.\n* Formatting-preserving pretty printing for comments in array literals has been fixed.\n\nVersion 4.12.0 (2021-07-21)\n---------------------------\n\n### Added\n\n* [PHP 8.1] Added support for readonly properties (through a new `MODIFIER_READONLY`).\n* [PHP 8.1] Added support for final class constants.\n\n### Fixed\n\n* Fixed compatibility with PHP 8.1. `&` tokens are now canonicalized to the\n  `T_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARG` and `T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG` tokens\n  used in PHP 8.1. This happens unconditionally, regardless of whether the emulative lexer is used.\n\nVersion 4.11.0 (2021-07-03)\n---------------------------\n\n### Added\n\n* `BuilderFactory::args()` now accepts named arguments.\n* `BuilderFactory::attribute()` has been added.\n* An `addAttribute()` method accepting an `Attribute` or `AttributeGroup` has been adde to all\n  builders that accept attributes, such as `Builder\\Class_`.\n\n### Fixed\n\n* `NameResolver` now handles enums.\n* `PrettyPrinter` now prints backing enum type.\n* Builder methods for types now property handle `never` type.\n\nVersion 4.10.5 (2021-05-03)\n---------------------------\n\n### Added\n\n* [PHP 8.1] Added support for enums. These are represented using the `Stmt\\Enum_` and\n  `Stmt\\EnumCase` nodes.\n* [PHP 8.1] Added support for never type. This type will now be returned as an `Identifier` rather\n  than `Name`.\n* Added `ClassConst` builder.\n\n### Changed\n\n* Non-UTF-8 code units in strings will now be hex-encoded.\n\n### Fixed\n\n* Fixed precedence of arrow functions.\n\nVersion 4.10.4 (2020-12-20)\n---------------------------\n\n### Fixed\n\n* Fixed position information for variable-variables (#741).\n* Fixed position information for traits/interfaces preceded by if statement (#738).\n\nVersion 4.10.3 (2020-12-03)\n---------------------------\n\n### Fixed\n\n* Fixed formatting-preserving pretty printing for `\"{$x}\"`.\n* Ternary expressions are now treated as non-associative in the pretty printer, in order to\n  generate code that is compatible with the parentheses requirement introduced in PHP 8.\n* Removed no longer necessary `error_clear_last()` call in lexer, which may interfere with fatal\n  error handlers if invoked during shutdown.\n\n\nVersion 4.10.2 (2020-09-26)\n------------------\n\n### Fixed\n\n* Fixed check for token emulation conflicts with other libraries.\n\nVersion 4.10.1 (2020-09-23)\n---------------------------\n\n### Added\n\n* Added support for recovering from a missing semicolon after a property or class constant\n  declaration.\n\n### Fixed\n\n* Fix spurious whitespace in formatting-preserving pretty printer when both removing and adding\n  elements at the start of a list.\n* Fix incorrect case-sensitivity in keyword token emulation.\n\nVersion 4.10.0 (2020-09-19)\n---------------------------\n\n### Added\n\n* [PHP 8.0] Added support for attributes. These are represented using a new `AttributeGroup` node\n  containing `Attribute` nodes. A new `attrGroups` subnode is available on all node types that\n  support attributes, i.e. `Stmt\\Class_`, `Stmt\\Trait_`, `Stmt\\Interface_`, `Stmt\\Function_`,\n  `Stmt\\ClassMethod`, `Stmt\\ClassConst`, `Stmt\\Property`, `Expr\\Closure`, `Expr\\ArrowFunction` and\n  `Param`.\n* [PHP 8.0] Added support for nullsafe properties inside interpolated strings, in line with an\n  upstream change.\n\n### Fixed\n\n* Improved compatibility with other libraries that use forward compatibility defines for PHP tokens.\n\nVersion 4.9.1 (2020-08-30)\n--------------------------\n\n### Added\n\n* Added support for removing the first element of a list to the formatting-preserving pretty\n  printer.\n\n### Fixed\n\n* Allow member modifiers as part of namespaced names. These were missed when support for other\n  keywords was added.\n\nVersion 4.9.0 (2020-08-18)\n--------------------------\n\n### Added\n\n* [PHP 8.0] Added support for named arguments, represented using a new `name` subnode on `Arg`.\n* [PHP 8.0] Added support for static return type, represented like a normal class return type.\n* [PHP 8.0] Added support for throw expression, represented using a new `Expr\\Throw_` node. For\n  backwards compatibility reasons, throw expressions in statement context continue to be\n  represented using `Stmt\\Throw_`.\n* [PHP 8.0] Added support for keywords as parts of namespaced names.\n\n### Fixed\n\n* Emit parentheses for class constant fetch with complex left-hand-side.\n* Emit parentheses for new/instanceof on complex class expression.\n\nVersion 4.8.0 (2020-08-09)\n--------------------------\n\n### Added\n\n* [PHP 8.0] Added support for nullsafe operator, represented using the new\n  `Expr\\NullsafePropertyFetch` and `Expr\\NullsafeMethodCall` nodes.\n* Added `phpVersion` option to the emulative lexer, which allows controlling the target version to\n  emulate (defaults to the latest available, currently PHP 8.0). This is useful to parse code that\n  uses reserved keywords from newer PHP versions as identifiers.\n\nVersion 4.7.0 (2020-07-25)\n--------------------------\n\n### Added\n\n* Add `ParentConnectingVisitor` and `NodeConnectingVisitor` classes.\n* [PHP 8.0] Added support for match expressions. These are represented using a new `Expr\\Match_`\n  containing `MatchArm`s.\n* [PHP 8.0] Added support for trailing comma in closure use lists.\n\n### Fixed\n\n* Fixed missing error for unterminated comment with trailing newline (#688).\n* Compatibility with PHP 8.0 has been restored: Namespaced names are now always represented by\n  `T_NAME_*` tokens, using emulationg on older PHP versions. Full support for reserved keywords\n  in namespaced names is not yet present.\n\nVersion 4.6.0 (2020-07-02)\n--------------------------\n\n### Added\n\n* [PHP 8.0] Added support for trailing commas in parameter lists.\n* [PHP 8.0] Added support for constructor promotion. The parameter visibility is stored in\n  `Node\\Param::$flags`.\n\n### Fixed\n\n* Comment tokens now always follow the PHP 8 interpretation, and do not include trailing\n  whitespace.\n* As a result of the previous change, some whitespace issues when inserting a statement into a\n  method containing only a comment, and using the formatting-preserving pretty printer, have been\n  resolved.\n\nVersion 4.5.0 (2020-06-03)\n--------------------------\n\n### Added\n\n* [PHP 8.0] Added support for the mixed type. This means `mixed` types are now parsed as an\n  `Identifier` rather than a `Name`.\n* [PHP 8.0] Added support for catching without capturing the exception. This means that\n  `Catch_::$var` may now be null.\n\nVersion 4.4.0 (2020-04-10)\n--------------------------\n\n### Added\n\n* Added support for passing union types in builders.\n* Added end line, token position and file position information for comments.\n* Added `getProperty()` method to `ClassLike` nodes.\n\n### Fixed\n\n* Fixed generation of invalid code when using the formatting preserving pretty printer, and\n  inserting code next to certain nop statements. The formatting is still ugly though.\n* `getDocComment()` no longer requires that the very last comment before a node be a doc comment.\n  There may not be non-doc comments between the doc comment and the declaration.\n* Allowed arbitrary expressions in `isset()` and `list()`, rather than just variables.\n  In particular, this allows `isset(($x))`, which is legal PHP code.\n* [PHP 8.0] Add support for [variable syntax tweaks RFC](https://wiki.php.net/rfc/variable_syntax_tweaks).\n\nVersion 4.3.0 (2019-11-08)\n--------------------------\n\n### Added\n\n* [PHP 8.0] Added support for union types using a new `UnionType` node.\n\nVersion 4.2.5 (2019-10-25)\n--------------------------\n\n### Changed\n\n* Tests and documentation are no longer included in source archives. They can still be accessed\n  by cloning the repository.\n* php-yacc is now used to generate the parser. This has no impact on users of the library.\n\nVersion 4.2.4 (2019-09-01)\n--------------------------\n\n### Added\n\n* Added getProperties(), getConstants() and getTraitUses() to ClassLike. (#629, #630)\n\n### Fixed\n\n* Fixed flexible heredoc emulation to check for digits after the end label. This synchronizes\n  behavior with the upcoming PHP 7.3.10 release.\n\nVersion 4.2.3 (2019-08-12)\n--------------------------\n\n### Added\n\n* [PHP 7.4] Add support for numeric literal separators. (#615)\n\n### Fixed\n\n* Fixed resolution of return types for arrow functions. (#613)\n* Fixed compatibility with PHP 7.4.\n\nVersion 4.2.2 (2019-05-25)\n--------------------------\n\n### Added\n\n* [PHP 7.4] Add support for arrow functions using a new `Expr\\ArrowFunction` node. (#602)\n* [PHP 7.4] Add support for array spreads, using a new `unpack` subnode on `ArrayItem`. (#609)\n* Added support for inserting into empty list nodes in the formatting preserving pretty printer.\n\n### Changed\n\n* `php-parse` will now print messages to stderr, so that stdout only contains the actual result of\n  the operation (such as a JSON dump). (#605)\n\n### Fixed\n\n* Fixed attribute assignment for zero-length nop statements, and a related assertion failure in\n  the formatting-preserving pretty printer. (#589)\n\nVersion 4.2.1 (2019-02-16)\n--------------------------\n\n### Added\n\n* [PHP 7.4] Add support for `??=` operator through a new `AssignOp\\Coalesce` node. (#575)\n\nVersion 4.2.0 (2019-01-12)\n--------------------------\n\n### Added\n\n* [PHP 7.4] Add support for typed properties through a new `type` subnode of `Stmt\\Property`.\n  Additionally `Builder\\Property` now has a `setType()` method. (#567)\n* Add `kind` attribute to `Cast\\Double_`, which allows to distinguish between `(float)`,\n  `(double)` and `(real)`. The form of the cast will be preserved by the pretty printer. (#565)\n\n### Fixed\n\n* Remove assertion when pretty printing anonymous class with a name (#554).\n\nVersion 4.1.1 (2018-12-26)\n--------------------------\n\n### Fixed\n\n* Fix \"undefined offset\" notice when parsing specific malformed code (#551).\n\n### Added\n\n* Support error recovery for missing return type (`function foo() : {}`) (#544).\n\nVersion 4.1.0 (2018-10-10)\n--------------------------\n\n### Added\n\n* Added support for PHP 7.3 flexible heredoc/nowdoc strings, completing support for PHP 7.3. There\n  are two caveats for this feature:\n   * In some rare, pathological cases flexible heredoc/nowdoc strings change the interpretation of\n     existing doc strings. PHP-Parser will now use the new interpretation.\n   * Flexible heredoc/nowdoc strings require special support from the lexer. Because this is not\n     available on PHP versions before 7.3, support has to be emulated. This emulation is not perfect\n     and some cases which we do not expect to occur in practice (such as flexible doc strings being\n     nested within each other through abuse of variable-variable interpolation syntax) may not be\n     recognized correctly.\n* Added `DONT_TRAVERSE_CURRENT_AND_CHILDREN` to `NodeTraverser` to skip both traversal of child\n  nodes, and prevent subsequent visitors from visiting the current node.\n\nVersion 4.0.4 (2018-09-18)\n--------------------------\n\n### Added\n\n* The following methods have been added to `BuilderFactory`:\n  * `useTrait()` (fluent builder)\n  * `traitUseAdaptation()` (fluent builder)\n  * `useFunction()` (fluent builder)\n  * `useConst()` (fluent builder)\n  * `var()`\n  * `propertyFetch()`\n  \n### Deprecated\n\n* `Builder\\Param::setTypeHint()` has been deprecated in favor of the newly introduced\n  `Builder\\Param::setType()`.\n\nVersion 4.0.3 (2018-07-15)\n--------------------------\n\n### Fixed\n\n* Fixed possible undefined offset notice in formatting-preserving printer. (#513)\n\n### Added\n\n* Improved error recovery inside arrays.\n* Preserve trailing comment inside classes. **Note:** This change is possibly BC breaking if your\n  code validates that classes can only contain certain statement types. After this change, classes\n  can also contain Nop statements, while this was not previously possible. (#509)\n\nVersion 4.0.2 (2018-06-03)\n--------------------------\n\n### Added\n\n* Improved error recovery inside classes.\n* Support error recovery for `foreach` without `as`.\n* Support error recovery for parameters without variable (`function (Type ) {}`).\n* Support error recovery for functions without body (`function ($foo)`).\n\nVersion 4.0.1 (2018-03-25)\n--------------------------\n\n### Added\n\n* [PHP 7.3] Added support for trailing commas in function calls.\n* [PHP 7.3] Added support for by-reference array destructuring. \n* Added checks to node traverser to prevent replacing a statement with an expression or vice versa.\n  This should prevent common mistakes in the implementation of node visitors.\n* Added the following methods to `BuilderFactory`, to simplify creation of expressions:\n  * `funcCall()`\n  * `methodCall()`\n  * `staticCall()`\n  * `new()`\n  * `constFetch()`\n  * `classConstFetch()`\n\nVersion 4.0.0 (2018-02-28)\n--------------------------\n\n* No significant code changes since the beta 1 release.\n\nVersion 4.0.0-beta1 (2018-01-27)\n--------------------------------\n\n### Fixed\n\n* In formatting-preserving pretty printer: Fixed indentation when inserting into lists. (#466)\n\n### Added\n\n* In formatting-preserving pretty printer: Improved formatting of elements inserted into multi-line\n  arrays.\n\n### Removed\n\n* The `Autoloader` class has been removed. It is now required to use the Composer autoloader.\n\nVersion 4.0.0-alpha3 (2017-12-26)\n---------------------------------\n\n### Fixed\n\n* In the formatting-preserving pretty printer:\n  * Fixed comment indentation.\n  * Fixed handling of inline HTML in the fallback case.\n  * Fixed insertion into list nodes that require creation of a code block.\n\n### Added\n\n* Added support for inserting at the start of list nodes in formatting-preserving pretty printer.\n\nVersion 4.0.0-alpha2 (2017-11-10)\n---------------------------------\n\n### Added\n\n* In the formatting-preserving pretty printer:\n  * Added support for changing modifiers.\n  * Added support for anonymous classes.\n  * Added support for removing from list nodes.\n  * Improved support for changing comments.\n* Added start token offsets to comments.\n\nVersion 4.0.0-alpha1 (2017-10-18)\n---------------------------------\n\n### Added\n\n* Added experimental support for format-preserving pretty-printing. In this mode formatting will be\n  preserved for parts of the code which have not been modified.\n* Added `replaceNodes` option to `NameResolver`, defaulting to true. If this option is disabled,\n  resolved names will be added as `resolvedName` attributes, instead of replacing the original\n  names.\n* Added `NodeFinder` class, which can be used to find nodes based on a callback or class name. This\n  is a utility to avoid custom node visitor implementations for simple search operations.\n* Added `ClassMethod::isMagic()` method.\n* Added `BuilderFactory` methods: `val()` method for creating an AST for a simple value, `concat()`\n  for creating concatenation trees, `args()` for preparing function arguments.\n* Added `NameContext` class, which encapsulates the `NameResolver` logic independently of the actual\n  AST traversal. This facilitates use in other context, such as class names in doc comments.\n  Additionally it provides an API for getting the shortest representation of a name.\n* Added `Node::setAttributes()` method.\n* Added `JsonDecoder`. This allows conversion JSON back into an AST.\n* Added `Name` methods `toLowerString()` and `isSpecialClassName()`.\n* Added `Identifier` and `VarLikeIdentifier` nodes, which are used in place of simple strings in\n  many places.\n* Added `getComments()`, `getStartLine()`, `getEndLine()`, `getStartTokenPos()`, `getEndTokenPos()`,\n  `getStartFilePos()` and `getEndFilePos()` methods to `Node`. These provide a more obvious access\n  point for the already existing attributes of the same name.\n* Added `ConstExprEvaluator` to evaluate constant expressions to PHP values.\n* Added `Expr\\BinaryOp::getOperatorSigil()`, returning `+` for `Expr\\BinaryOp\\Plus`, etc.\n\n### Changed\n\n* Many subnodes that previously held simple strings now use `Identifier` (or `VarLikeIdentifier`)\n  nodes. Please see the UPGRADE-4.0 file for an exhaustive list of affected nodes and some notes on\n  possible impact.\n* Expression statements (`expr;`) are now represented using a `Stmt\\Expression` node. Previously\n  these statements were directly represented as their constituent expression.\n* The `name` subnode of `Param` has been renamed to `var` and now contains a `Variable` rather than\n  a plain string.\n* The `name` subnode of `StaticVar` has been renamed to `var` and now contains a `Variable` rather\n  than a plain string.\n* The `var` subnode of `ClosureUse` now contains a `Variable` rather than a plain string.\n* The `var` subnode of `Catch` now contains a `Variable` rather than a plain string.\n* The `alias` subnode of `UseUse` is now `null` if no explicit alias is given. As such,\n  `use Foo\\Bar` and `use Foo\\Bar as Bar` are now represented differently. The `getAlias()` method\n  can be used to get the effective alias, even if it is not explicitly given.\n\n### Removed\n\n* Support for running on PHP 5 and HHVM has been removed. You can however still parse code of old\n  PHP versions (such as PHP 5.2), while running on PHP 7.\n* Removed `type` subnode on `Class`, `ClassMethod` and `Property` nodes. Use `flags` instead.\n* The `ClassConst::isStatic()` method has been removed. Constants cannot have a static modifier.\n* The `NodeTraverser` no longer accepts `false` as a return value from a `leaveNode()` method.\n  `NodeTraverser::REMOVE_NODE` should be returned instead.\n* The `Node::setLine()` method has been removed. If you really need to, you can use `setAttribute()`\n  instead.\n* The misspelled `Class_::VISIBILITY_MODIFER_MASK` constant has been dropped in favor of\n  `Class_::VISIBILITY_MODIFIER_MASK`.\n* The XML serializer has been removed. As such, the classes `Serializer\\XML`, and\n  `Unserializer\\XML`, as well as the interfaces `Serializer` and `Unserializer` no longer exist.\n* The `BuilderAbstract` class has been removed. It's functionality is moved into `BuilderHelpers`.\n  However, this is an internal class and should not be used directly.\n\nVersion 3.1.5 (2018-02-28)\n--------------------------\n\n### Fixed\n\n* Fixed duplicate comment assignment in switch statements. (#469)\n* Improve compatibility with PHP-Scoper. (#477)\n\nVersion 3.1.4 (2018-01-25)\n--------------------------\n\n### Fixed\n\n* Fixed pretty printing of `-(-$x)` and `+(+$x)`. (#459)\n\nVersion 3.1.3 (2017-12-26)\n--------------------------\n\n### Fixed\n\n* Improve compatibility with php-scoper, by supporting prefixed namespaces in\n  `NodeAbstract::getType()`.\n\nVersion 3.1.2 (2017-11-04)\n--------------------------\n\n### Fixed\n\n* Comments on empty blocks are now preserved on a `Stmt\\Nop` node. (#382)\n\n### Added\n\n* Added `kind` attribute for `Stmt\\Namespace_` node, which is one of `KIND_SEMICOLON` or\n  `KIND_BRACED`. (#417)\n* Added `setDocComment()` method to namespace builder. (#437)\n\nVersion 3.1.1 (2017-09-02)\n--------------------------\n\n### Fixed\n\n* Fixed syntax error on comment after brace-style namespace declaration. (#412)\n* Added support for TraitUse statements in trait builder. (#413)\n\nVersion 3.1.0 (2017-07-28)\n--------------------------\n\n### Added\n\n* [PHP 7.2] Added support for trailing comma in group use statements.\n* [PHP 7.2] Added support for `object` type. This means `object` types will now be represented as a\n  builtin type (a simple `\"object\"` string), rather than a class `Name`.\n\n### Fixed\n\n* Floating-point numbers are now printed correctly if the LC_NUMERIC locale uses a comma as decimal\n  separator.\n\n### Changed\n\n* `Name::$parts` is no longer deprecated.\n\nVersion 3.0.6 (2017-06-28)\n--------------------------\n\n### Fixed\n\n* Fixed the spelling of `Class_::VISIBILITY_MODIFIER_MASK`. The previous spelling of\n  `Class_::VISIBILITY_MODIFER_MASK` is preserved for backwards compatibility.\n* The pretty printing will now preserve comments inside array literals and function calls by\n  printing the array items / function arguments on separate lines. Array literals and functions that\n  do not contain comments are not affected.\n\n### Added\n\n* Added `Builder\\Param::makeVariadic()`.\n\n### Deprecated\n\n* The `Node::setLine()` method has been deprecated.\n\nVersion 3.0.5 (2017-03-05)\n--------------------------\n\n### Fixed\n\n* Name resolution of `NullableType`s is now performed earlier, so that a fully resolved signature is\n  available when a function is entered. (#360)\n* `Error` nodes are now considered empty, while previously they extended until the token where the\n  error occurred. This made some nodes larger than expected. (#359)\n* Fixed notices being thrown during error recovery in some situations. (#362)\n\nVersion 3.0.4 (2017-02-10)\n--------------------------\n\n### Fixed\n\n* Fixed some extensibility issues in pretty printer (`pUseType()` is now public and `pPrec()` calls\n  into `p()`, instead of directly dispatching to the type-specific printing method).\n* Fixed notice in `bin/php-parse` script.\n\n### Added\n\n* Error recovery from missing semicolons is now supported in more cases.\n* Error recovery from trailing commas in positions where PHP does not support them is now supported.\n\nVersion 3.0.3 (2017-02-03)\n--------------------------\n\n### Fixed\n\n* In `\"$foo[0]\"` the `0` is now parsed as an `LNumber` rather than `String`. (#325)\n* Ensure integers and floats are always pretty printed preserving semantics, even if the particular\n  value can only be manually constructed.\n* Throw a `LogicException` when trying to pretty-print an `Error` node. Previously this resulted in\n  an undefined method exception or fatal error.\n\n### Added\n\n* [PHP 7.1] Added support for negative interpolated offsets: `\"$foo[-1]\"`\n* Added `preserveOriginalNames` option to `NameResolver`. If this option is enabled, an\n  `originalName` attribute, containing the unresolved name, will be added to each resolved name.\n* Added `php-parse --with-positions` option, which dumps nodes with position information.\n\n### Deprecated\n\n* The XML serializer has been deprecated. In particular, the classes `Serializer\\XML`,\n  `Unserializer\\XML`, as well as the interfaces `Serializer` and `Unserializer` are deprecated.\n\nVersion 3.0.2 (2016-12-06)\n--------------------------\n\n### Fixed\n\n* Fixed name resolution of nullable types. (#324)\n* Fixed pretty-printing of nullable types.\n\nVersion 3.0.1 (2016-12-01)\n--------------------------\n\n### Fixed\n\n* Fixed handling of nested `list()`s: If the nested list was unkeyed, it was directly included in\n  the list items. If it was keyed, it was wrapped in `ArrayItem`. Now nested `List_` nodes are\n  always wrapped in `ArrayItem`s. (#321)\n\nVersion 3.0.0 (2016-11-30)\n--------------------------\n\n### Added\n\n* Added support for dumping node positions in the NodeDumper through the `dumpPositions` option.\n* Added error recovery support for `$`, `new`, `Foo::`.\n\nVersion 3.0.0-beta2 (2016-10-29)\n--------------------------------\n\nThis release primarily improves our support for error recovery.\n\n### Added\n\n* Added `Node::setDocComment()` method.\n* Added `Error::getMessageWithColumnInfo()` method.\n* Added support for recovery from lexer errors.\n* Added support for recovering from \"special\" errors (i.e. non-syntax parse errors).\n* Added precise location information for lexer errors.\n* Added `ErrorHandler` interface, and `ErrorHandler\\Throwing` and `ErrorHandler\\Collecting` as\n  specific implementations. These provide a general mechanism for handling error recovery.\n* Added optional `ErrorHandler` argument to `Parser::parse()`, `Lexer::startLexing()` and\n  `NameResolver::__construct()`.\n* The `NameResolver` now adds a `namespacedName` attribute on name nodes that cannot be statically\n  resolved (unqualified unaliased function or constant names in namespaces).\n\n### Fixed\n\n* Fixed attribute assignment for `GroupUse` prefix and variables in interpolated strings.\n\n### Changed\n\n* The constants on `NameTraverserInterface` have been moved into the `NameTraverser` class.\n* Due to the error handling changes, the `Parser` interface and `Lexer` API have changed.\n* The emulative lexer now directly postprocesses tokens, instead of using `~__EMU__~` sequences.\n  This changes the protected API of the lexer.\n* The `Name::slice()` method now returns `null` for empty slices, previously `new Name([])` was\n  used. `Name::concat()` now also supports concatenation with `null`.\n\n### Removed\n\n* Removed `Name::append()` and `Name::prepend()`. These mutable methods have been superseded by\n  the immutable `Name::concat()`.\n* Removed `Error::getRawLine()` and `Error::setRawLine()`. These methods have been superseded by\n  `Error::getStartLine()` and `Error::setStartLine()`.\n* Removed support for node cloning in the `NodeTraverser`.\n* Removed `$separator` argument from `Name::toString()`.\n* Removed `throw_on_error` parser option and `Parser::getErrors()` method. Use the `ErrorHandler`\n  mechanism instead.\n\nVersion 3.0.0-beta1 (2016-09-16)\n--------------------------------\n\n### Added\n\n* [7.1] Function/method and parameter builders now support PHP 7.1 type hints (void, iterable and\n  nullable types).\n* Nodes and Comments now implement `JsonSerializable`. The node kind is stored in a `nodeType`\n  property.\n* The `InlineHTML` node now has an `hasLeadingNewline` attribute, that specifies whether the\n  preceding closing tag contained a newline. The pretty printer honors this attribute.\n* Partial parsing of `$obj->` (with missing property name) is now supported in error recovery mode.\n* The error recovery mode is now exposed in the `php-parse` script through the `--with-recovery`\n  or `-r` flags.\n\nThe following changes are also part of PHP-Parser 2.1.1:\n\n* The PHP 7 parser will now generate a parse error for `$var =& new Obj` assignments.\n* Comments on free-standing code blocks will now be retained as comments on the first statement in\n  the code block.\n\nVersion 3.0.0-alpha1 (2016-07-25)\n---------------------------------\n\n### Added\n\n* [7.1] Added support for `void` and `iterable` types. These will now be represented as strings\n  (instead of `Name` instances) similar to other builtin types.\n* [7.1] Added support for class constant visibility. The `ClassConst` node now has a `flags` subnode\n  holding the visibility modifier, as well as `isPublic()`, `isProtected()` and `isPrivate()`\n  methods. The constructor changed to accept the additional subnode.\n* [7.1] Added support for nullable types. These are represented using a new `NullableType` node\n  with a single `type` subnode.\n* [7.1] Added support for short array destructuring syntax. This means that `Array` nodes may now\n  appear as the left-hand-side of assignments and foreach value targets. Additionally the array\n  items may now contain `null` values if elements are skipped.\n* [7.1] Added support for keys in list() destructuring. The `List` subnode `vars` has been renamed\n  to `items` and now contains `ArrayItem`s instead of plain variables.\n* [7.1] Added support for multi-catch. The `Catch` subnode `type` has been renamed to `types` and\n  is now an array of `Name`s.\n* `Name::slice()` now supports lengths and negative offsets. This brings it in line with\n  `array_slice()` functionality.\n\n### Changed\n\nDue to PHP 7.1 support additions described above, the node structure changed as follows:\n\n* `void` and `iterable` types are now stored as strings if the PHP 7 parser is used.\n* The `ClassConst` constructor changed to accept an additional `flags` subnode.\n* The `Array` subnode `items` may now contain `null` elements (destructuring).\n* The `List` subnode `vars` has been renamed to `items` and now contains `ArrayItem`s instead of\n  plain variables.\n* The `Catch` subnode `type` has been renamed to `types` and is now an array of `Name`s.\n\nAdditionally the following changes were made:\n\n* The `type` subnode on `Class`, `ClassMethod` and `Property` has been renamed to `flags`. The\n  `type` subnode has retained for backwards compatibility and is populated to the same value as\n  `flags`. However, writes to `type` will not update `flags`.\n* The `TryCatch` subnode `finallyStmts` has been replaced with a `finally` subnode that holds an\n  explicit `Finally` node. This allows for more accurate attribute assignment.\n* The `Trait` constructor now has the same form as the `Class` and `Interface` constructors: It\n  takes an array of subnodes. Unlike classes/interfaces, traits can only have a `stmts` subnode.\n* The `NodeDumper` now prints class/method/property/constant modifiers, as well as the include and\n  use type in a textual representation, instead of only showing the number.\n* All methods on `PrettyPrinter\\Standard` are now protected. Previously most of them were public.\n\n### Removed\n\n* Removed support for running on PHP 5.4. It is however still possible to parse PHP 5.2-5.4 code\n  while running on a newer version.\n* The deprecated `Comment::setLine()` and `Comment::setText()` methods have been removed.\n* The deprecated `Name::set()`, `Name::setFirst()` and `Name::setLast()` methods have been removed.\n\nVersion 2.1.1 (2016-09-16)\n--------------------------\n\n### Changed\n\n* The pretty printer will now escape all control characters in the range `\\x00-\\x1F` inside double\n  quoted strings. If no special escape sequence is available, an octal escape will be used.\n* The quality of the error recovery has been improved. In particular unterminated expressions should\n  be handled more gracefully.\n* The PHP 7 parser will now generate a parse error for `$var =& new Obj` assignments.\n* Comments on free-standing code blocks will no be retained as comments on the first statement in\n  the code block.\n\nVersion 2.1.0 (2016-04-19)\n--------------------------\n\n### Fixed\n\n* Properly support `B\"\"` strings (with uppercase `B`) in a number of places.\n* Fixed reformatting of indented parts in a certain non-standard comment style.\n\n### Added\n\n* Added `dumpComments` option to node dumper, to enable dumping of comments associated with nodes.\n* Added `Stmt\\Nop` node, that is used to collect comments located at the end of a block or at the\n  end of a file (without a following node with which they could otherwise be associated).\n* Added `kind` attribute to `Expr\\Exit` to distinguish between `exit` and `die`.\n* Added `kind` attribute to `Scalar\\LNumber` to distinguish between decimal, binary, octal and\n  hexadecimal numbers.\n* Added `kind` attribute to `Expr\\Array` to distinguish between `array()` and `[]`.\n* Added `kind` attribute to `Scalar\\String` and `Scalar\\Encapsed` to distinguish between\n  single-quoted, double-quoted, heredoc and nowdoc string.\n* Added `docLabel` attribute to `Scalar\\String` and `Scalar\\Encapsed`, if it is a heredoc or\n  nowdoc string.\n* Added start file offset information to `Comment` nodes.\n* Added `setReturnType()` method to function and method builders.\n* Added `-h` and `--help` options to `php-parse` script.\n\n### Changed\n\n* Invalid octal literals now throw a parse error in PHP 7 mode.\n* The pretty printer takes all the new attributes mentioned in the previous section into account.\n* The protected `AbstractPrettyPrinter::pComments()` method no longer returns a trailing newline.\n* The bundled autoloader supports library files being stored in a different directory than\n  `PhpParser` for easier downstream distribution.\n\n### Deprecated\n\n* The `Comment::setLine()` and `Comment::setText()` methods have been deprecated. Construct new\n  objects instead.\n\n### Removed\n\n* The internal (but public) method `Scalar\\LNumber::parse()` has been removed. A non-internal\n  `LNumber::fromString()` method has been added instead.\n\nVersion 2.0.1 (2016-02-28)\n--------------------------\n\n### Fixed\n\n* `declare() {}` and `declare();` are not semantically equivalent and will now result in different\n  ASTs. The format case will have an empty `stmts` array, while the latter will set `stmts` to\n  `null`.\n* Magic constants are now supported as semi-reserved keywords.\n* A shebang line like `#!/usr/bin/env php` is now allowed at the start of a namespaced file.\n  Previously this generated an exception.\n* The `prettyPrintFile()` method will not strip a trailing `?>` from the raw data that follows a\n  `__halt_compiler()` statement.\n* The `prettyPrintFile()` method will not strip an opening `<?php` if the file starts with a\n  comment followed by InlineHTML.\n\nVersion 2.0.0 (2015-12-04)\n--------------------------\n\n### Changed\n\n* String parts of encapsed strings are now represented using `Scalar\\EncapsStringPart` nodes.\n  Previously raw strings were used. This affects the `parts` child of `Scalar\\Encaps` and\n  `Expr\\ShellExec`. The change has been done to allow assignment of attributes to encapsed string\n  parts.\n\nVersion 2.0.0-beta1 (2015-10-21)\n--------------------------------\n\n### Fixed\n\n* Fixed issue with too many newlines being stripped at the end of heredoc/nowdoc strings in some\n  cases. (#227)\n\n### Changed\n\n* Update group use support to be in line with recent PHP 7.0 builds.\n* Renamed `php-parse.php` to `php-parse` and registered it as a composer bin.\n* Use composer PSR-4 autoloader instead of custom autoloader.\n* Specify phpunit as a dev dependency.\n\n### Added\n\n* Added `shortArraySyntax` option to pretty printer, to print all arrays using short syntax.\n\nVersion 2.0.0-alpha1 (2015-07-14)\n---------------------------------\n\nA more detailed description of backwards incompatible changes can be found in the\n[upgrading guide](UPGRADE-2.0.md).\n\n### Removed\n\n* Removed support for running on PHP 5.3. It is however still possible to parse PHP 5.2 and PHP 5.3\n  code while running on a newer version.\n* Removed legacy class name aliases. This includes the old non-namespaced class names and the old\n  names for classes that were renamed for PHP 7 compatibility.\n* Removed support for legacy node format. All nodes must have a `getSubNodeNames()` method now.\n\n### Added\n\n* Added support for remaining PHP 7 features that were not present in 1.x:\n  * Group use declarations. These are represented using `Stmt\\GroupUse` nodes. Furthermore a `type`\n    attribute was added to `Stmt\\UseUse` to handle mixed group use declarations.\n  * Uniform variable syntax.\n  * Generalized yield operator.\n  * Scalar type declarations. These are presented using `'bool'`, `'int'`, `'float'` and `'string'`\n    as the type. The PHP 5 parser also accepts these, however they'll be `Name` instances there.\n  * Unicode escape sequences.\n* Added `PhpParser\\ParserFactory` class, which should be used to create parser instances.\n* Added `Name::concat()` which concatenates two names.\n* Added `Name->slice()` which takes a subslice of a name.\n\n### Changed\n\n* `PhpParser\\Parser` is now an interface, implemented by `Parser\\Php5`, `Parser\\Php7` and\n  `Parser\\Multiple`. The `Multiple` parser will try multiple parsers, until one succeeds.\n* Token constants are now defined on `PhpParser\\Parser\\Tokens` rather than `PhpParser\\Parser`.\n* The `Name->set()`, `Name->append()`, `Name->prepend()` and `Name->setFirst()` methods are\n  deprecated in favor of `Name::concat()` and `Name->slice()`.\n* The `NodeTraverser` no longer clones nodes by default. The old behavior can be restored by\n  passing `true` to the constructor.\n* The constructor for `Scalar` nodes no longer has a default value. E.g. `new LNumber()` should now\n  be written as `new LNumber(0)`.\n\n---\n\n**This changelog only includes changes from the 2.0 series. For older changes see the\n[1.x series changelog](https://github.com/nikic/PHP-Parser/blob/1.x/CHANGELOG.md) and the\n[0.9 series changelog](https://github.com/nikic/PHP-Parser/blob/0.9/CHANGELOG.md).**\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.5244140625,
          "content": "## Coding Style\n\nThis project uses PSR-12 with consistent brace placement. This means that the opening brace is\nalways on the same line, even for class and method declarations.\n\n## Tools\n\nThis project uses PHP-CS-Fixer and PHPStan. You can invoke them using `make`:\n\n```shell\nmake php-cs-fixer\nmake phpstan\n```\n\n## Adding support for new PHP syntax\n\n1. If necessary, add emulation support for new tokens.\n   * Add a new subclass of `Lexer\\TokenEmulator`. Take inspiration from existing classes.\n   * Add the new class to the array in `Lexer\\Emulative`.\n   * Add tests for the emulation in `Lexer\\EmulativeTest`. You'll want to modify\n     `provideTestReplaceKeywords()` for new reserved keywords and `provideTestLexNewFeatures()` for\n     other emulations.\n2. Add any new node classes that are needed.\n3. Add support for the new syntax in `grammar/php.y`. Regenerate the parser by running\n   `php grammar/rebuildParsers.php`. Use `--debug` if there are conflicts.\n4. Add pretty-printing support by implementing a `pFooBar()` method in `PrettyPrinter\\Standard`.\n5. Add tests both in `test/code/parser` and `test/code/prettyPrinter`.\n6. Add support for formatting-preserving pretty-printing. This is done by modifying the data tables\n   at the end of `PrettyPrinterAbstract`. Add a test in `test/code/formatPreservation`.\n7. Does the new syntax feature namespaced names? If so, add support for name resolution in\n   `NodeVisitor\\NameResolver`. Test it in `NodeVisitor\\NameResolverTest`.\n8. Does the new syntax require any changes to builders? Is so, make them :)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.484375,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2011, Nikita Popov\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.1865234375,
          "content": ".PHONY: phpstan php-cs-fixer\n\ntools/vendor:\n\tcomposer install -d tools\n\nphpstan: tools/vendor\n\tphp tools/vendor/bin/phpstan\n\nphp-cs-fixer: tools/vendor\n\tphp tools/vendor/bin/php-cs-fixer fix\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.15625,
          "content": "PHP Parser\n==========\n\n[![Coverage Status](https://coveralls.io/repos/github/nikic/PHP-Parser/badge.svg?branch=master)](https://coveralls.io/github/nikic/PHP-Parser?branch=master)\n\nThis is a PHP parser written in PHP. Its purpose is to simplify static code analysis and\nmanipulation.\n\n[**Documentation for version 5.x**][doc_master] (current; for running on PHP >= 7.4; for parsing PHP 7.0 to PHP 8.4, with limited support for parsing PHP 5.x).\n\n[Documentation for version 4.x][doc_4_x] (supported; for running on PHP >= 7.0; for parsing PHP 5.2 to PHP 8.3).\n\nFeatures\n--------\n\nThe main features provided by this library are:\n\n * Parsing PHP 7, and PHP 8 code into an abstract syntax tree (AST).\n   * Invalid code can be parsed into a partial AST.\n   * The AST contains accurate location information.\n * Dumping the AST in human-readable form.\n * Converting an AST back to PHP code.\n   * Formatting can be preserved for partially changed ASTs.\n * Infrastructure to traverse and modify ASTs.\n * Resolution of namespaced names.\n * Evaluation of constant expressions.\n * Builders to simplify AST construction for code generation.\n * Converting an AST into JSON and back.\n\nQuick Start\n-----------\n\nInstall the library using [composer](https://getcomposer.org):\n\n    php composer.phar require nikic/php-parser\n\nParse some PHP code into an AST and dump the result in human-readable form:\n\n```php\n<?php\nuse PhpParser\\Error;\nuse PhpParser\\NodeDumper;\nuse PhpParser\\ParserFactory;\n\n$code = <<<'CODE'\n<?php\n\nfunction test($foo)\n{\n    var_dump($foo);\n}\nCODE;\n\n$parser = (new ParserFactory())->createForNewestSupportedVersion();\ntry {\n    $ast = $parser->parse($code);\n} catch (Error $error) {\n    echo \"Parse error: {$error->getMessage()}\\n\";\n    return;\n}\n\n$dumper = new NodeDumper;\necho $dumper->dump($ast) . \"\\n\";\n```\n\nThis dumps an AST looking something like this:\n\n```\narray(\n    0: Stmt_Function(\n        attrGroups: array(\n        )\n        byRef: false\n        name: Identifier(\n            name: test\n        )\n        params: array(\n            0: Param(\n                attrGroups: array(\n                )\n                flags: 0\n                type: null\n                byRef: false\n                variadic: false\n                var: Expr_Variable(\n                    name: foo\n                )\n                default: null\n            )\n        )\n        returnType: null\n        stmts: array(\n            0: Stmt_Expression(\n                expr: Expr_FuncCall(\n                    name: Name(\n                        name: var_dump\n                    )\n                    args: array(\n                        0: Arg(\n                            name: null\n                            value: Expr_Variable(\n                                name: foo\n                            )\n                            byRef: false\n                            unpack: false\n                        )\n                    )\n                )\n            )\n        )\n    )\n)\n```\n\nLet's traverse the AST and perform some kind of modification. For example, drop all function bodies:\n\n```php\nuse PhpParser\\Node;\nuse PhpParser\\Node\\Stmt\\Function_;\nuse PhpParser\\NodeTraverser;\nuse PhpParser\\NodeVisitorAbstract;\n\n$traverser = new NodeTraverser();\n$traverser->addVisitor(new class extends NodeVisitorAbstract {\n    public function enterNode(Node $node) {\n        if ($node instanceof Function_) {\n            // Clean out the function body\n            $node->stmts = [];\n        }\n    }\n});\n\n$ast = $traverser->traverse($ast);\necho $dumper->dump($ast) . \"\\n\";\n```\n\nThis gives us an AST where the `Function_::$stmts` are empty:\n\n```\narray(\n    0: Stmt_Function(\n        attrGroups: array(\n        )\n        byRef: false\n        name: Identifier(\n            name: test\n        )\n        params: array(\n            0: Param(\n                attrGroups: array(\n                )\n                type: null\n                byRef: false\n                variadic: false\n                var: Expr_Variable(\n                    name: foo\n                )\n                default: null\n            )\n        )\n        returnType: null\n        stmts: array(\n        )\n    )\n)\n```\n\nFinally, we can convert the new AST back to PHP code:\n\n```php\nuse PhpParser\\PrettyPrinter;\n\n$prettyPrinter = new PrettyPrinter\\Standard;\necho $prettyPrinter->prettyPrintFile($ast);\n```\n\nThis gives us our original code, minus the `var_dump()` call inside the function:\n\n```php\n<?php\n\nfunction test($foo)\n{\n}\n```\n\nFor a more comprehensive introduction, see the documentation.\n\nDocumentation\n-------------\n\n 1. [Introduction](doc/0_Introduction.markdown)\n 2. [Usage of basic components](doc/2_Usage_of_basic_components.markdown)\n\nComponent documentation:\n\n * [Walking the AST](doc/component/Walking_the_AST.markdown)\n   * Node visitors\n   * Modifying the AST from a visitor\n   * Short-circuiting traversals\n   * Interleaved visitors\n   * Simple node finding API\n   * Parent and sibling references\n * [Name resolution](doc/component/Name_resolution.markdown)\n   * Name resolver options\n   * Name resolution context\n * [Pretty printing](doc/component/Pretty_printing.markdown)\n   * Converting AST back to PHP code\n   * Customizing formatting\n   * Formatting-preserving code transformations\n * [AST builders](doc/component/AST_builders.markdown)\n   * Fluent builders for AST nodes\n * [Lexer](doc/component/Lexer.markdown)\n   * Emulation\n   * Tokens, positions and attributes\n * [Error handling](doc/component/Error_handling.markdown)\n   * Column information for errors\n   * Error recovery (parsing of syntactically incorrect code)\n * [Constant expression evaluation](doc/component/Constant_expression_evaluation.markdown)\n   * Evaluating constant/property/etc initializers\n   * Handling errors and unsupported expressions\n * [JSON representation](doc/component/JSON_representation.markdown)\n   * JSON encoding and decoding of ASTs\n * [Performance](doc/component/Performance.markdown)\n   * Disabling Xdebug\n   * Reusing objects\n   * Garbage collection impact\n * [Frequently asked questions](doc/component/FAQ.markdown)\n   * Parent and sibling references\n\n [doc_3_x]: https://github.com/nikic/PHP-Parser/tree/3.x/doc\n [doc_4_x]: https://github.com/nikic/PHP-Parser/tree/4.x/doc\n [doc_master]: https://github.com/nikic/PHP-Parser/tree/master/doc\n"
        },
        {
          "name": "UPGRADE-1.0.md",
          "type": "blob",
          "size": 4.6494140625,
          "content": "Upgrading from PHP-Parser 0.9 to 1.0\n====================================\n\n### PHP version requirements\n\nPHP-Parser now requires PHP 5.3 or newer to run. It is however still possible to *parse* PHP 5.2 source code, while\nrunning on a newer version.\n\n### Move to namespaced names\n\nThe library has been moved to use namespaces with the `PhpParser` vendor prefix. However, the old names using\nunderscores are still available as aliases, as such most code should continue running on the new version without\nfurther changes.\n\nOld (still works, but discouraged):\n\n```php\n$parser = new \\PHPParser_Parser(new \\PHPParser_Lexer_Emulative);\n$prettyPrinter = new \\PHPParser_PrettyPrinter_Default;\n```\n\nNew:\n\n```php\n$parser = new \\PhpParser\\Parser(new PhpParser\\Lexer\\Emulative);\n$prettyPrinter = new \\PhpParser\\PrettyPrinter\\Standard;\n```\n\nNote that the `PHPParser` prefix was changed to `PhpParser`. While PHP class names are technically case-insensitive,\nthe autoloader will not be able to load `PHPParser\\Parser` or other case variants.\n\nDue to conflicts with reserved keywords, some class names now end with an underscore, e.g. `PHPParser_Node_Stmt_Class`\nis now `PhpParser\\Node\\Stmt\\Class_`. (But as usual, the old name is still available.)\n\n### Changes to `Node::getType()`\n\nThe `Node::getType()` method continues to return names using underscores instead of namespace separators and also does\nnot contain the trailing underscore that may be present in the class name. As such its output will not change in many\ncases.\n\nHowever, some node classes have been moved to a different namespace or renamed, which will result in a different\n`Node::getType()` output:\n\n```\nExpr_AssignBitwiseAnd => Expr_AssignOp_BitwiseAnd\nExpr_AssignBitwiseOr  => Expr_AssignOp_BitwiseOr\nExpr_AssignBitwiseXor => Expr_AssignOp_BitwiseXor\nExpr_AssignConcat     => Expr_AssignOp_Concat\nExpr_AssignDiv        => Expr_AssignOp_Div\nExpr_AssignMinus      => Expr_AssignOp_Minus\nExpr_AssignMod        => Expr_AssignOp_Mod\nExpr_AssignMul        => Expr_AssignOp_Mul\nExpr_AssignPlus       => Expr_AssignOp_Plus\nExpr_AssignShiftLeft  => Expr_AssignOp_ShiftLeft\nExpr_AssignShiftRight => Expr_AssignOp_ShiftRight\n\nExpr_BitwiseAnd       => Expr_BinaryOp_BitwiseAnd\nExpr_BitwiseOr        => Expr_BinaryOp_BitwiseOr\nExpr_BitwiseXor       => Expr_BinaryOp_BitwiseXor\nExpr_BooleanAnd       => Expr_BinaryOp_BooleanAnd\nExpr_BooleanOr        => Expr_BinaryOp_BooleanOr\nExpr_Concat           => Expr_BinaryOp_Concat\nExpr_Div              => Expr_BinaryOp_Div\nExpr_Equal            => Expr_BinaryOp_Equal\nExpr_Greater          => Expr_BinaryOp_Greater\nExpr_GreaterOrEqual   => Expr_BinaryOp_GreaterOrEqual\nExpr_Identical        => Expr_BinaryOp_Identical\nExpr_LogicalAnd       => Expr_BinaryOp_LogicalAnd\nExpr_LogicalOr        => Expr_BinaryOp_LogicalOr\nExpr_LogicalXor       => Expr_BinaryOp_LogicalXor\nExpr_Minus            => Expr_BinaryOp_Minus\nExpr_Mod              => Expr_BinaryOp_Mod\nExpr_Mul              => Expr_BinaryOp_Mul\nExpr_NotEqual         => Expr_BinaryOp_NotEqual\nExpr_NotIdentical     => Expr_BinaryOp_NotIdentical\nExpr_Plus             => Expr_BinaryOp_Plus\nExpr_ShiftLeft        => Expr_BinaryOp_ShiftLeft\nExpr_ShiftRight       => Expr_BinaryOp_ShiftRight\nExpr_Smaller          => Expr_BinaryOp_Smaller\nExpr_SmallerOrEqual   => Expr_BinaryOp_SmallerOrEqual\n\nScalar_ClassConst     => Scalar_MagicConst_Class\nScalar_DirConst       => Scalar_MagicConst_Dir\nScalar_FileConst      => Scalar_MagicConst_File\nScalar_FuncConst      => Scalar_MagicConst_Function\nScalar_LineConst      => Scalar_MagicConst_Line\nScalar_MethodConst    => Scalar_MagicConst_Method\nScalar_NSConst        => Scalar_MagicConst_Namespace\nScalar_TraitConst     => Scalar_MagicConst_Trait\n```\n\nThese changes may affect custom pretty printers and code comparing the return value of `Node::getType()` to specific\nstrings.\n\n### Miscellaneous\n\n  * The classes `Template` and `TemplateLoader` have been removed. You should use some other [code generation][code_gen]\n    project built on top of PHP-Parser instead.\n\n  * The `PrettyPrinterAbstract::pStmts()` method now emits a leading newline if the statement list is not empty.\n    Custom pretty printers should remove the explicit newline before `pStmts()` calls.\n\n    Old:\n\n    ```php\n    public function pStmt_Trait(PHPParser_Node_Stmt_Trait $node) {\n        return 'trait ' . $node->name\n             . \"\\n\" . '{' . \"\\n\" . $this->pStmts($node->stmts) . \"\\n\" . '}';\n    }\n    ```\n\n    New:\n\n    ```php\n    public function pStmt_Trait(Stmt\\Trait_ $node) {\n        return 'trait ' . $node->name\n             . \"\\n\" . '{' . $this->pStmts($node->stmts) . \"\\n\" . '}';\n    }\n    ```\n\n  [code_gen]: https://github.com/nikic/PHP-Parser/wiki/Projects-using-the-PHP-Parser#code-generation"
        },
        {
          "name": "UPGRADE-2.0.md",
          "type": "blob",
          "size": 2.828125,
          "content": "Upgrading from PHP-Parser 1.x to 2.0\n====================================\n\n### PHP version requirements\n\nPHP-Parser now requires PHP 5.4 or newer to run. It is however still possible to *parse* PHP 5.2 and\nPHP 5.3 source code, while running on a newer version.\n\n### Creating a parser instance\n\nParser instances should now be created through the `ParserFactory`. Old direct instantiation code\nwill not work, because the parser class was renamed.\n\nOld:\n\n```php\nuse PhpParser\\Parser, PhpParser\\Lexer;\n$parser = new Parser(new Lexer\\Emulative);\n```\n\nNew:\n\n```php\nuse PhpParser\\ParserFactory;\n$parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);\n```\n\nThe first argument to `ParserFactory` determines how different PHP versions are handled. The\npossible values are:\n\n * `ParserFactory::PREFER_PHP7`: Try to parse code as PHP 7. If this fails, try to parse it as PHP 5.\n * `ParserFactory::PREFER_PHP5`: Try to parse code as PHP 5. If this fails, try to parse it as PHP 7.\n * `ParserFactory::ONLY_PHP7`: Parse code as PHP 7.\n * `ParserFactory::ONLY_PHP5`: Parse code as PHP 5.\n\nFor most practical purposes the difference between `PREFER_PHP7` and `PREFER_PHP5` is mainly whether\na scalar type hint like `string` will be stored as `'string'` (PHP 7) or as `new Name('string')`\n(PHP 5).\n\nTo use a custom lexer, pass it as the second argument to the `create()` method:\n\n```php\nuse PhpParser\\ParserFactory;\n$lexer = new MyLexer;\n$parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7, $lexer);\n```\n\n### Rename of the `PhpParser\\Parser` class\n\n`PhpParser\\Parser` is now an interface, which is implemented by `Parser\\Php5`, `Parser\\Php7` and\n`Parser\\Multiple`. Parser tokens are now defined in `Parser\\Tokens`. If you use the `ParserFactory`\ndescribed above to create your parser instance, these changes should have no further impact on you.\n\n### Removal of legacy aliases\n\nAll legacy aliases for classes have been removed. This includes the old non-namespaced `PHPParser_`\nclasses, as well as the classes that had to be renamed for PHP 7 support.\n\n### Deprecations\n\nThe `set()`, `setFirst()`, `append()` and `prepend()` methods of the `Node\\Name` class have been\ndeprecated. Instead `Name::concat()` and `Name->slice()` should be used.\n\n### Miscellaneous\n\n* The `NodeTraverser` no longer clones nodes by default. If you want to restore the old behavior,\n  pass `true` to the constructor.\n* The legacy node format has been removed. If you use custom nodes, they are now expected to\n  implement a `getSubNodeNames()` method.\n* The default value for `Scalar` node constructors was removed. This means that something like\n  `new LNumber()` should be replaced by `new LNumber(0)`.\n* String parts of encapsed strings are now represented using `Scalar\\EncapsStringPart` nodes, while\n  previously raw strings were used. This affects the `parts` child of `Scalar\\Encaps` and\n  `Expr\\ShellExec`."
        },
        {
          "name": "UPGRADE-3.0.md",
          "type": "blob",
          "size": 7.11328125,
          "content": "Upgrading from PHP-Parser 2.x to 3.0\n====================================\n\nThe backwards-incompatible changes in this release may be summarized as follows:\n\n * The specific details of the node representation have changed in some cases, primarily to\n   accommodate new PHP 7.1 features.\n * There have been significant changes to the error recovery implementation. This may affect you,\n   if you used the error recovery mode or have a custom lexer implementation.\n * A number of deprecated methods were removed.\n\n### PHP version requirements\n\nPHP-Parser now requires PHP 5.5 or newer to run. It is however still possible to *parse* PHP 5.2,\n5.3 and 5.4 source code, while running on a newer version.\n\n### Changes to the node structure\n\nThe following changes are likely to require code changes if the respective nodes are used:\n\n * The `List` subnode `vars` has been renamed to `items` and now contains `ArrayItem`s instead of\n   plain variables.\n * The `Catch` subnode `type` has been renamed to `types` and is now an array of `Name`s.\n * The `TryCatch` subnode `finallyStmts` has been replaced with a `finally` subnode that holds an\n   explicit `Finally` node.\n * The `type` subnode on `Class`, `ClassMethod` and `Property` has been renamed to `flags`. The\n   `type` subnode has retained for backwards compatibility and is populated to the same value as\n   `flags`. However, writes to `type` will not update `flags` and use of `type` is discouraged.\n\nThe following changes are unlikely to require code changes:\n\n * The `ClassConst` constructor changed to accept an additional `flags` subnode.\n * The `Trait` constructor now has the same form as the `Class` and `Interface` constructors: It\n   takes an array of subnodes. Unlike classes/interfaces, traits can only have a `stmts` subnode.\n * The `Array` subnode `items` may now contain `null` elements (due to destructuring).\n * `void` and `iterable` types are now stored as strings if the PHP 7 parser is used. Previously\n   these would have been represented as `Name` instances.\n\n### Changes to error recovery mode\n\nPreviously, error recovery mode was enabled by setting the `throwOnError` option to `false` when\ncreating the parser, while collected errors were retrieved using the `getErrors()` method:\n\n```php\n$lexer = ...;\n$parser = (new ParserFactory)->create(ParserFactor::ONLY_PHP7, $lexer, [\n    'throwOnError' => true,\n]);\n\n$stmts = $parser->parse($code);\n$errors = $parser->getErrors();\nif ($errors) {\n    handleErrors($errors);\n}\nprocessAst($stmts);\n```\n\nBoth the `throwOnError` option and the `getErrors()` method have been removed in PHP-Parser 3.0.\nInstead an instance of `ErrorHandler\\Collecting` should be passed to the `parse()` method:\n\n```php\n$lexer = ...;\n$parser = (new ParserFactory)->create(ParserFactor::ONLY_PHP7, $lexer);\n\n$errorHandler = new ErrorHandler\\Collecting;\n$stmts = $parser->parse($code, $errorHandler);\nif ($errorHandler->hasErrors()) {\n    handleErrors($errorHandler->getErrors());\n}\nprocessAst($stmts);\n```\n\n#### Multiple parser fallback in error recovery mode\n\nAs a result of this change, if a `Multiple` parser is used (e.g. through the `ParserFactory` using\n`PREFER_PHP7` or `PREFER_PHP5`), it will now return the result of the first *non-throwing* parse. As\nparsing never throws in error recovery mode, the result from the first parser will always be\nreturned.\n\nThe PHP 7 parser is a superset of the PHP 5 parser, with the exceptions that `=& new` and\n`global $$foo->bar` are not supported (other differences are in representation only). The PHP 7\nparser will be able to recover from the error in both cases. For this reason, this change will\nlikely pass unnoticed if you do not specifically test for this syntax.\n\nIt is possible to restore the precise previous behavior with the following code:\n\n```php\n$lexer = ...;\n$parser7 = new Parser\\Php7($lexer);\n$parser5 = new Parser\\Php5($lexer);\n\n$errors7 = new ErrorHandler\\Collecting();\n$stmts7 = $parser7->parse($code, $errors7);\nif ($errors7->hasErrors()) {\n    $errors5 = new ErrorHandler\\Collecting();\n    $stmts5 = $parser5->parse($code, $errors5);\n    if (!$errors5->hasErrors()) {\n        // If PHP 7 parse has errors but PHP 5 parse has no errors, use PHP 5 result\n        return [$stmts5, $errors5];\n    }\n}\n// If PHP 7 succeeds or both fail use PHP 7 result\nreturn [$stmts7, $errors7];\n```\n\n#### Error handling in the lexer\n\nIn order to support recovery from lexer errors, the signature of the `startLexing()` method changed\nto optionally accept an `ErrorHandler`:\n\n```php\n// OLD\npublic function startLexing($code);\n// NEW\npublic function startLexing($code, ErrorHandler $errorHandler = null);\n```\n\nIf you use a custom lexer with overridden `startLexing()` method, it needs to be changed to accept\nthe extra parameter. The value should be passed on to the parent method.\n\n#### Error checks in node constructors\n\nThe constructors of certain nodes used to contain additional checks for semantic errors, such as\ncreating a try block without either catch or finally. These checks have been moved from the node\nconstructors into the parser. This allows recovery from such errors, as well as representing the\nresulting (invalid) AST.\n\nThis means that certain error conditions are no longer checked for manually constructed nodes.\n\n### Removed methods, arguments, options\n\nThe following methods, arguments or options have been removed:\n\n * `Comment::setLine()`, `Comment::setText()`: Create new `Comment` instances instead.\n * `Name::set()`, `Name::setFirst()`, `Name::setLast()`, `Name::append()`, `Name::prepend()`:\n    Use `Name::concat()` in combination with `Name::slice()` instead.\n * `Error::getRawLine()`, `Error::setRawLine()`. Use `Error::getStartLine()` and\n   `Error::setStartLine()` instead.\n * `Parser::getErrors()`. Use `ErrorHandler\\Collecting` instead.\n * `$separator` argument of `Name::toString()`. Use `strtr()` instead, if you really need it.\n * `$cloneNodes` argument of `NodeTraverser::__construct()`. Explicitly clone nodes in the visitor\n   instead.\n * `throwOnError` parser option. Use `ErrorHandler\\Collecting` instead.\n\n### Miscellaneous\n\n * The `NameResolver` will now resolve unqualified function and constant names in the global\n   namespace into fully qualified names. For example `foo()` in the global namespace resolves to\n   `\\foo()`. For names where no static resolution is possible, a `namespacedName` attribute is\n   added now, containing the namespaced variant of the name.\n * All methods on `PrettyPrinter\\Standard` are now protected. Previously most of them were public.\n   The pretty printer should only be invoked using the `prettyPrint()`, `prettyPrintFile()` and\n   `prettyPrintExpr()` methods.\n * The node dumper now prints numeric values that act as enums/flags in a string representation.\n   If node dumper results are used in tests, updates may be needed to account for this.\n * The constants on `NameTraverserInterface` have been moved into the `NameTraverser` class.\n * The emulative lexer now directly postprocesses tokens, instead of using `~__EMU__~` sequences.\n   This changes the protected API of the emulative lexer.\n * The `Name::slice()` method now returns `null` for empty slices, previously `new Name([])` was\n   used. `Name::concat()` now also supports concatenation with `null`.\n"
        },
        {
          "name": "UPGRADE-4.0.md",
          "type": "blob",
          "size": 3.8603515625,
          "content": "Upgrading from PHP-Parser 3.x to 4.0\n====================================\n\n### PHP version requirements\n\nPHP-Parser now requires PHP 7.0 or newer to run. It is however still possible to *parse* PHP 5.2-5.6\nsource code, while running on a newer version.\n\nHHVM is no longer actively supported.\n\n### Changes to the node structure\n\n* Many subnodes that previously held simple strings now store `Identifier` nodes instead (or\n  `VarLikeIdentifier` nodes if they have form `$ident`). The constructors of the affected nodes will\n  automatically convert strings to `Identifier`s and `Identifier`s implement `__toString()`. As such\n  some code continues to work without changes, but anything using `is_string()`, type-strict\n  comparisons or strict-mode may require adjustment. The following is an exhaustive list of all\n  affected subnodes:\n\n   * `Const_::$name`\n   * `NullableType::$type` (for simple types)\n   * `Param::$type` (for simple types)\n   * `Expr\\ClassConstFetch::$name`\n   * `Expr\\Closure::$returnType` (for simple types)\n   * `Expr\\MethodCall::$name`\n   * `Expr\\PropertyFetch::$name`\n   * `Expr\\StaticCall::$name`\n   * `Expr\\StaticPropertyFetch::$name` (uses `VarLikeIdentifier`)\n   * `Stmt\\Class_::$name`\n   * `Stmt\\ClassMethod::$name`\n   * `Stmt\\ClassMethod::$returnType` (for simple types)\n   * `Stmt\\Function_::$name`\n   * `Stmt\\Function_::$returnType` (for simple types)\n   * `Stmt\\Goto_::$name`\n   * `Stmt\\Interface_::$name`\n   * `Stmt\\Label::$name`\n   * `Stmt\\PropertyProperty::$name` (uses `VarLikeIdentifier`)\n   * `Stmt\\TraitUseAdaptation\\Alias::$method`\n   * `Stmt\\TraitUseAdaptation\\Alias::$newName`\n   * `Stmt\\TraitUseAdaptation\\Precedence::$method`\n   * `Stmt\\Trait_::$name`\n   * `Stmt\\UseUse::$alias`\n\n* Expression statements (`expr;`) are now represented using a `Stmt\\Expression` node. Previously\n  these statements were directly represented as their constituent expression.\n* The `name` subnode of `Param` has been renamed to `var` and now contains a `Variable` rather than\n  a plain string.\n* The `name` subnode of `StaticVar` has been renamed to `var` and now contains a `Variable` rather\n  than a plain string.\n* The `var` subnode of `ClosureUse` now contains a `Variable` rather than a plain string.\n* The `var` subnode of `Catch_` now contains a `Variable` rather than a plain string.\n* The `alias` subnode of `UseUse` is now `null` if no explicit alias is given. As such,\n  `use Foo\\Bar` and `use Foo\\Bar as Bar` are now represented differently. The `getAlias()` method\n  can be used to get the effective alias, even if it is not explicitly given.\n\n### Miscellaneous\n\n* The indentation handling in the pretty printer has been changed (this is only relevant if you\n  extend the pretty printer). Previously indentation was automatic, and parts were excluded using\n  `pNoindent()`. Now no-indent is the default and newlines that require indentation should use\n  `$this->nl`.\n\n### Removed functionality\n\n* Removed `type` subnode on `Class_`, `ClassMethod` and `Property` nodes. Use `flags` instead.\n* The `ClassConst::isStatic()` method has been removed. Constants cannot have a static modifier.\n* The `NodeTraverser` no longer accepts `false` as a return value from a `leaveNode()` method.\n  `NodeTraverser::REMOVE_NODE` should be returned instead.\n* The `Node::setLine()` method has been removed. If you really need to, you can use `setAttribute()`\n  instead.\n* The misspelled `Class_::VISIBILITY_MODIFER_MASK` constant has been dropped in favor of\n  `Class_::VISIBILITY_MODIFIER_MASK`.\n* The XML serializer has been removed. As such, the classes `Serializer\\XML`, and\n  `Unserializer\\XML`, as well as the interfaces `Serializer` and `Unserializer` no longer exist.\n* The `BuilderAbstract` class has been removed. It's functionality is moved into `BuilderHelpers`.\n  However, this is an internal class and should not be used directly.\n* The `Autoloader` class has been removed in favor of relying on the Composer autoloader.\n"
        },
        {
          "name": "UPGRADE-5.0.md",
          "type": "blob",
          "size": 19.32421875,
          "content": "Upgrading from PHP-Parser 4.x to 5.0\n====================================\n\n### PHP version requirements\n\nPHP-Parser now requires PHP 7.4 or newer to run. It is however still possible to *parse* code for older versions, while running on a newer version.\n\n### PHP 5 parsing support\n\nThe dedicated parser for PHP 5 has been removed. The PHP 7 parser now accepts a `PhpVersion` argument, which can be used to improve compatibility with older PHP versions.\n\nIn particular, if an older `PhpVersion` is specified, then:\n\n * For versions before PHP 7.0, `$foo =& new Bar()` assignments are allowed without error.\n * For versions before PHP 7.0, invalid octal literals `089` are allowed without error.\n * For versions before PHP 7.0, unicode escape sequences `\\u{123}` in strings are not parsed.\n * Type hints are interpreted as a class `Name` or as a built-in `Identifier` depending on PHP\n   version, for example `int` is treated as a class name on PHP 5.6 and as a built-in on PHP 7.0.\n\nHowever, some aspects of PHP 5 parsing are no longer supported:\n\n * Some variables like `$$foo[0]` are valid in both PHP 5 and PHP 7, but have different interpretation. In that case, the PHP 7 AST will always be constructed (`($$foo)[0]` rather than `${$foo[0]}`).\n * Declarations of the form `global $$var[0]` are not supported in PHP 7 and will cause a parse error. In error recovery mode, it is possible to continue parsing after such declarations.\n * The PHP 7 parser will accept many constructs that are not valid in PHP 5. However, this was also true of the dedicated PHP 5 parser.\n\nThe following symbols are affected by this removal:\n\n * The `PhpParser\\Parser\\Php5` class has been removed.\n * The `PhpParser\\Parser\\Multiple` class has been removed. While not strictly related to PHP 5 support, this functionality is no longer useful without it.\n * The `PhpParser\\ParserFactory::ONLY_PHP5` and `PREFER_PHP5` options have been removed.\n\n### Changes to the parser factory\n\nThe `ParserFactory::create()` method has been removed in favor of three new methods that provide more fine-grained control over the PHP version being targeted:\n\n * `createForNewestSupportedVersion()`: Use this if you don't know the PHP version of the code you're parsing. It's better to assume a too new version than a too old one.\n * `createForHostVersion()`: Use this if you're parsing code for the PHP version you're running on.\n * `createForVersion()`: Use this if you know the PHP version of the code you want to parse.\n\nThe `createForNewestSupportedVersion()` and `creatForHostVersion()` are available since PHP-Parser 4.18.0, to allow libraries to support PHP-Parser 4 and 5 at the same time more easily.\n\nIn all cases, the PHP version is a fairly weak hint that is only used on a best-effort basis. The parser will usually accept code for newer versions if it does not have any backwards-compatibility implications.\n\nFor example, if you specify version `\"8.0\"`, then `class ReadOnly {}` is treated as a valid class declaration, while using `public readonly int $prop` will lead to a parse error. However, `final public const X = Y;` will be accepted in both cases.\n\n```php\nuse PhpParser\\ParserFactory;\nuse PhpParser\\PhpVersion;\n\n$factory = new ParserFactory();\n\n# Before\n$parser = $factory->create(ParserFactory::PREFER_PHP7);\n\n# After (this is roughly equivalent to PREFER_PHP7 behavior)\n$parser = $factory->createForNewestSupportedVersion();\n# Or\n$parser = $factory->createForHostVersion();\n\n# Before\n$parser = $factory->create(ParserFactory::ONLY_PHP5);\n# After (supported on a best-effort basis)\n$parser = $factory->createForVersion(PhpVersion::fromString(\"5.6\"));\n```\n\n### Changes to the throw representation\n\nPreviously, `throw` statements like `throw $e;` were represented using the `Stmt\\Throw_` class,\nwhile uses inside other expressions (such as `$x ?? throw $e`) used the `Expr\\Throw_` class.\n\nNow, `throw $e;` is represented as a `Stmt\\Expression` that contains an `Expr\\Throw_`. The\n`Stmt\\Throw_` class has been removed.\n\n```php\n# Code\nthrow $e;\n\n# Before\nStmt_Throw(\n    expr: Expr_Variable(\n        name: e\n    )\n)\n\n# After\nStmt_Expression(\n    expr: Expr_Throw(\n        expr: Expr_Variable(\n            name: e\n        )\n    )\n)\n```\n\n### Changes to the array destructuring representation\n\nPreviously, the `list($x) = $y` destructuring syntax was represented using a `Node\\Expr\\List_`\nnode, while `[$x] = $y` used a `Node\\Expr\\Array_` node, the same used for the creation (rather than\ndestructuring) of arrays.\n\nNow, destructuring is always represented using `Node\\Expr\\List_`. The `kind` attribute with value\n`Node\\Expr\\List_::KIND_LIST` or `Node\\Expr\\List_::KIND_ARRAY` specifies which syntax was actually\nused.\n\n```php\n# Code\n[$x] = $y;\n\n# Before\nExpr_Assign(\n   var: Expr_Array(\n       items: array(\n           0: Expr_ArrayItem(\n               key: null\n               value: Expr_Variable(\n                   name: x\n               )\n               byRef: false\n               unpack: false\n           )\n       )\n   )\n   expr: Expr_Variable(\n       name: y\n   )\n)\n\n# After\nExpr_Assign(\n   var: Expr_List(\n       items: array(\n           0: ArrayItem(\n               key: null\n               value: Expr_Variable(\n                   name: x\n               )\n               byRef: false\n               unpack: false\n           )\n       )\n   )\n   expr: Expr_Variable(\n       name: y\n   )\n)\n```\n\n### Changes to the name representation\n\nPreviously, `Name` nodes had a `parts` subnode, which stores an array of name parts, split by\nnamespace separators. Now, `Name` nodes instead have a `name` subnode, which stores a plain string.\n\nFor example, the name `Foo\\Bar` was previously represented by `Name(parts: ['Foo', 'Bar'])` and is\nnow represented by `Name(name: 'Foo\\Bar')` instead.\n\nIt is possible to convert the name to the previous representation using `$name->getParts()`. The\n`Name` constructor continues to accept both the string and the array representation.\n\nThe `Name::getParts()` method is available since PHP-Parser 4.16.0, to allow libraries to support\nPHP-Parser 4 and 5 at the same time more easily.\n\n### Changes to the block representation\n\nPreviously, code blocks `{ ... }` were always flattened into their parent statement list. For\nexample `while ($x) { $a; { $b; } $c; }` would produce the same node structure as\n`if ($x) { $a; $b; $c; }`, namely a `Stmt\\While_` node whose `stmts` subnode is an array of three\nstatements.\n\nNow, the nested `{ $b; }` block is represented using an explicit `Stmt\\Block` node. However, the\nouter `{ $a; { $b; } $c; }` block is still represented using a simple array in the `stmts` subnode.\n\n```php\n# Code\nwhile ($x) { $a; { $b; } $c; }\n\n# Before\nStmt_While(\n    cond: Expr_Variable(\n        name: x\n    )\n    stmts: array(\n        0: Stmt_Expression(\n            expr: Expr_Variable(\n                name: a\n            )\n        )\n        1: Stmt_Expression(\n            expr: Expr_Variable(\n                name: b\n            )\n        )\n        2: Stmt_Expression(\n            expr: Expr_Variable(\n                name: c\n            )\n        )\n    )\n)\n\n# After\nStmt_While(\n    cond: Expr_Variable(\n        name: x\n    )\n    stmts: array(\n        0: Stmt_Expression(\n            expr: Expr_Variable(\n                name: a\n            )\n        )\n        1: Stmt_Block(\n            stmts: array(\n                0: Stmt_Expression(\n                    expr: Expr_Variable(\n                        name: b\n                    )\n                )\n            )\n        )\n        2: Stmt_Expression(\n            expr: Expr_Variable(\n                name: c\n            )\n        )\n    )\n)\n```\n\n### Changes to comment assignment\n\nPreviously, comments were assigned to all nodes starting at the same position. Now they will be\nassigned to the outermost node only.\n\n```php\n# Code\n// Comment\n$a + $b;\n\n# Before\nStmt_Expression(\n    expr: Expr_BinaryOp_Plus(\n        left: Expr_Variable(\n            name: a\n            comments: array(\n                0: // Comment\n            )\n        )\n        right: Expr_Variable(\n            name: b\n        )\n        comments: array(\n            0: // Comment\n        )\n    )\n    comments: array(\n        0: // Comment\n    )\n)\n\n# After\nStmt_Expression(\n    expr: Expr_BinaryOp_Plus(\n        left: Expr_Variable(\n            name: a\n        )\n        right: Expr_Variable(\n            name: b\n        )\n    )\n    comments: array(\n        0: // Comment\n    )\n)\n```\n\n### Renamed nodes\n\nA number of AST nodes have been renamed or moved in the AST hierarchy:\n\n * `Node\\Scalar\\LNumber` is now `Node\\Scalar\\Int_`.\n * `Node\\Scalar\\DNumber` is now `Node\\Scalar\\Float_`.\n * `Node\\Scalar\\Encapsed` is now `Node\\Scalar\\InterpolatedString`.\n * `Node\\Scalar\\EncapsedStringPart` is now `Node\\InterpolatedStringPart` and no longer extends\n   `Node\\Scalar` or `Node\\Expr`.\n * `Node\\Expr\\ArrayItem` is now `Node\\ArrayItem` and no longer extends `Node\\Expr`.\n * `Node\\Expr\\ClosureUse` is now `Node\\ClosureUse` and no longer extends `Node\\Expr`.\n * `Node\\Stmt\\DeclareDeclare` is now `Node\\DeclareItem` and no longer extends `Node\\Stmt`.\n * `Node\\Stmt\\PropertyProperty` is now `Node\\PropertyItem` and no longer extends `Node\\Stmt`.\n * `Node\\Stmt\\StaticVar` is now `Node\\StaticVar` and no longer extends `Node\\Stmt`.\n * `Node\\Stmt\\UseUse` is now `Node\\UseItem` and no longer extends `Node\\Stmt`.\n\nThe old class names have been retained as aliases for backwards compatibility. However, the `Node::getType()` method will now always return the new name (e.g. `ClosureUse` instead of `Expr_ClosureUse`).\n\n### Modifiers\n\nModifier flags (as used by the `$flags` subnode of `Class_`, `ClassMethod`, `Property`, etc.) are now available as class constants on a separate `PhpParser\\Modifiers` class, instead of being part of `PhpParser\\Node\\Stmt\\Class_`, to make it clearer that these are used by many different nodes. The old constants are deprecated, but are still available.\n\n```php\nPhpParser\\Node\\Stmt\\Class_::MODIFIER_PUBLIC    -> PhpParser\\Modifiers::PUBLIC\nPhpParser\\Node\\Stmt\\Class_::MODIFIER_PROTECTED -> PhpParser\\Modifiers::PROTECTED\nPhpParser\\Node\\Stmt\\Class_::MODIFIER_PRIVATE   -> PhpParser\\Modifiers::PRIVATE\nPhpParser\\Node\\Stmt\\Class_::MODIFIER_STATIC    -> PhpParser\\Modifiers::STATIC\nPhpParser\\Node\\Stmt\\Class_::MODIFIER_ABSTRACT  -> PhpParser\\Modifiers::ABSTRACT\nPhpParser\\Node\\Stmt\\Class_::MODIFIER_FINAL     -> PhpParser\\Modifiers::FINAL\nPhpParser\\Node\\Stmt\\Class_::MODIFIER_READONLY  -> PhpParser\\Modifiers::READONLY\nPhpParser\\Node\\Stmt\\Class_::VISIBILITY_MODIFIER_MASK -> PhpParser\\Modifiers::VISIBILITY_MASK\n```\n\n### Changes to node constructors\n\nNode constructor arguments accepting types now longer accept plain strings. Either an `Identifier` or `Name` (or `ComplexType`) should be passed instead. This affects the following constructor arguments:\n\n* The `'returnType'` key of `$subNodes` argument of `Node\\Expr\\ArrowFunction`.\n* The `'returnType'` key of `$subNodes` argument of `Node\\Expr\\Closure`.\n* The `'returnType'` key of `$subNodes` argument of `Node\\Stmt\\ClassMethod`.\n* The `'returnType'` key of `$subNodes` argument of `Node\\Stmt\\Function_`.\n* The `$type` argument of `Node\\NullableType`.\n* The `$type` argument of `Node\\Param`.\n* The `$type` argument of `Node\\Stmt\\Property`.\n* The `$type` argument of `Node\\ClassConst`.\n\nTo follow the previous behavior, an `Identifier` should be passed, which indicates a built-in type.\n\n### Changes to the pretty printer\n\nA number of changes to the standard pretty printer have been made, to make it match contemporary coding style conventions (and in particular PSR-12). Options to restore the previous behavior are not provided, but it is possible to override the formatting methods (such as `pStmt_ClassMethod`) with your preferred formatting.\n\nReturn types are now formatted without a space before the `:`:\n\n```php\n# Before\nfunction test() : Type\n{\n}\n\n# After\nfunction test(): Type\n{\n}\n```\n\n`abstract` and `final` are now printed before visibility modifiers:\n\n```php\n# Before\npublic abstract function test();\n\n# After\nabstract public function test();\n```\n\nA space is now printed between `use` and the following `(` for closures:\n\n```php\n# Before\nfunction () use($var) {\n};\n\n# After\nfunction () use ($var) {\n};\n```\n\nBackslashes in single-quoted strings are now only printed if they are necessary:\n\n```php\n# Before\n'Foo\\\\Bar';\n'\\\\\\\\';\n\n# After\n'Foo\\Bar';\n'\\\\\\\\';\n```\n\n`else if` structures will now omit redundant parentheses:\n\n```php\n# Before\nelse {\n    if ($x) {\n        // ...\n    }\n}\n\n# After\nelse if ($x) {\n     // ...\n}\n```\n\nThe pretty printer now accepts a `phpVersion` option, which accepts a `PhpVersion` object and defaults to PHP 7.4. The pretty printer will make formatting choices to make the code valid for that version. It currently controls the following behavior:\n\n* For PHP >= 7.0 (default), short array syntax `[]` will be used by default. This does not affect nodes that specify an explicit array syntax using the `kind` attribute.\n* For PHP >= 7.0 (default), parentheses around `yield` expressions will only be printed when necessary. Previously, parentheses were always printed, even if `yield` was used as a statement.\n* For PHP >= 7.1 (default), the short array syntax `[]` will be used for destructuring by default (instead of `list()`). This does not affect nodes that specify an explicit syntax using the `kind` attribute.\n* For PHP >= 7.3 (default), a newline is no longer forced after heredoc/nowdoc strings, as the requirement for this has been removed with the introduction of flexible heredoc/nowdoc strings.\n* For PHP >= 7.3 (default), heredoc/nowdoc strings are now indented just like regular code. This was allowed with the introduction of flexible heredoc/nowdoc strings.\n\n### Changes to precedence handling in the pretty printer\n\nThe pretty printer now more accurately models operator precedence. Especially for unary operators, less unnecessary parentheses will be printed. Conversely, many bugs where semantically meaningful parentheses were omitted have been fixed.\n\nTo support these changes, precedence is now handled differently in the pretty printer. The internal `p()` method, which is used to recursively print nodes, now has the following signature:\n```php\nprotected function p(\n    Node $node, int $precedence = self::MAX_PRECEDENCE, int $lhsPrecedence = self::MAX_PRECEDENCE,\n    bool $parentFormatPreserved = false\n): string;\n```\n\nThe `$precedence` is the precedence of the direct parent operator (if any), while `$lhsPrecedence` is that precedence of the nearest binary operator on whose left-hand-side the node occurs. For unary operators, only the `$lhsPrecedence` is relevant.\n\nRecursive calls in pretty-printer methods should generally continue calling `p()` without additional parameters. However, pretty-printer methods for operators that participate in precedence resolution need to be adjusted. For example, typical implementations for operators look as follows now:\n\n```php\nprotected function pExpr_BinaryOp_Plus(\n    BinaryOp\\Plus $node, int $precedence, int $lhsPrecedence\n): string {\n    return $this->pInfixOp(\n        BinaryOp\\Plus::class, $node->left, ' + ', $node->right, $precedence, $lhsPrecedence);\n}\n\nprotected function pExpr_UnaryPlus(\n    Expr\\UnaryPlus $node, int $precedence, int $lhsPrecedence\n): string {\n    return $this->pPrefixOp(Expr\\UnaryPlus::class, '+', $node->expr, $precedence, $lhsPrecedence);\n}\n```\n\nThe new `$precedence` and `$lhsPrecedence` arguments need to be passed down to the `pInfixOp()`, `pPrefixOp()` and `pPostfixOp()` methods.\n\n### Changes to the node traverser\n\nIf there are multiple visitors, the node traverser will now call `leaveNode()` and `afterTraverse()` methods in the reverse order of the corresponding `enterNode()` and `beforeTraverse()` calls:\n\n```php\n# Before\n$visitor1->enterNode($node);\n$visitor2->enterNode($node);\n$visitor1->leaveNode($node);\n$visitor2->leaveNode($node);\n\n# After\n$visitor1->enterNode($node);\n$visitor2->enterNode($node);\n$visitor2->leaveNode($node);\n$visitor1->leaveNode($node);\n```\n\nAdditionally, the special `NodeVisitor` return values have been moved from `NodeTraverser` to `NodeVisitor`. The old names are deprecated, but still available.\n\n```php\nPhpParser\\NodeTraverser::REMOVE_NODE -> PhpParser\\NodeVisitor::REMOVE_NODE\nPhpParser\\NodeTraverser::DONT_TRAVERSE_CHILDREN -> PhpParser\\NodeVisitor::DONT_TRAVERSE_CHILDREN\nPhpParser\\NodeTraverser::DONT_TRAVERSE_CURRENT_AND_CHILDREN -> PhpParser\\NodeVisitor::DONT_TRAVERSE_CURRENT_AND_CHILDREN\nPhpParser\\NodeTraverser::STOP_TRAVERSAL -> PhpParser\\NodeVisitor::STOP_TRAVERSAL\n```\n\nVisitors can now also be passed directly to the `NodeTraverser` constructor:\n\n```php\n# Before (and still supported)\n$traverser = new NodeTraverser();\n$traverser->addVisitor(new NameResolver());\n\n# After\n$traverser = new NodeTraverser(new NameResolver());\n```\n\n### Changes to token representation\n\nTokens are now internally represented using the `PhpParser\\Token` class, which exposes the same base interface as\nthe `PhpToken` class introduced in PHP 8.0. On PHP 8.0 or newer, `PhpParser\\Token` extends from `PhpToken`, otherwise\nit extends from a polyfill implementation. The most important parts of the interface may be summarized as follows:\n\n```php\nclass Token {\n    public int $id;\n    public string $text;\n    public int $line;\n    public int $pos;\n\n    public function is(int|string|array $kind): bool;\n}\n```\n\nThe token array is now an array of `Token`s, rather than an array of arrays and strings.\nAdditionally, the token array is now terminated by a sentinel token with ID 0.\n\n### Changes to the lexer\n\nThe lexer API is reduced to a single `Lexer::tokenize()` method, which returns an array of tokens. The `startLexing()` and `getNextToken()` methods have been removed.\n\nResponsibility for determining start and end attributes for nodes has been moved from the lexer to the parser. The lexer no longer accepts an options array. The `usedAttributes` option has been removed without replacement, and the parser will now unconditionally add the `comments`, `startLine`, `endLine`, `startFilePos`, `endFilePos`, `startTokenPos` and `endTokenPos` attributes.\n\nThere should no longer be a need to directly interact with the `Lexer` for end users, as the `ParserFactory` will create an appropriate instance, and no additional configuration of the lexer is necessary. To use formatting-preserving pretty printing, the setup boilerplate changes as follows:\n\n```php\n# Before\n\n$lexer = new Lexer\\Emulative([\n    'usedAttributes' => [\n        'comments',\n        'startLine', 'endLine',\n        'startTokenPos', 'endTokenPos',\n    ],\n]);\n\n$parser = new Parser\\Php7($lexer);\n$oldStmts = $parser->parse($code);\n$oldTokens = $lexer->getTokens();\n\n$traverser = new NodeTraverser();\n$traverser->addVisitor(new NodeVisitor\\CloningVisitor());\n$newStmts = $traverser->traverse($oldStmts);\n\n# After\n\n$parser = (new ParserFactory())->createForNewestSupportedVersion();\n$oldStmts = $parser->parse($code);\n$oldTokens = $parser->getTokens();\n\n$traverser = new NodeTraverser(new NodeVisitor\\CloningVisitor());\n$newStmts = $traverser->traverse($oldStmts);\n```\n\n### Miscellaneous changes\n\n * The deprecated `Builder\\Param::setTypeHint()` method has been removed in favor of `Builder\\Param::setType()`.\n * The deprecated `Error` constructor taking a start line has been removed. Pass `['startLine' => $startLine]` attributes instead.\n * The deprecated `Comment::getLine()`, `Comment::getTokenPos()` and `Comment::getFilePos()` methods have been removed. Use `Comment::getStartLine()`, `Comment::getStartTokenPos()` and `Comment::getStartFilePos()` instead.\n * `Comment::getReformattedText()` now normalizes CRLF newlines to LF newlines.\n * The `Node::getLine()` method has been deprecated. Use `Node::getStartLine()` instead.\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 0.8232421875,
          "content": "{\n    \"name\": \"nikic/php-parser\",\n    \"type\": \"library\",\n    \"description\": \"A PHP parser written in PHP\",\n    \"keywords\": [\n        \"php\",\n        \"parser\"\n    ],\n    \"license\": \"BSD-3-Clause\",\n    \"authors\": [\n        {\n            \"name\": \"Nikita Popov\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=7.4\",\n        \"ext-tokenizer\": \"*\",\n        \"ext-json\": \"*\",\n        \"ext-ctype\": \"*\"\n    },\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^9.0\",\n        \"ircmaxell/php-yacc\": \"^0.0.7\"\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"5.0-dev\"\n        }\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"PhpParser\\\\\": \"lib/PhpParser\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"PhpParser\\\\\": \"test/PhpParser/\"\n        }\n    },\n    \"bin\": [\n        \"bin/php-parse\"\n    ]\n}\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "grammar",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpstan-baseline.neon",
          "type": "blob",
          "size": 9.1015625,
          "content": "parameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\Builder\\\\ClassConst\\:\\:__construct\\(\\) has parameter \\$value with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/Builder/ClassConst.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\Builder\\\\ClassConst\\:\\:addConst\\(\\) has parameter \\$value with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/Builder/ClassConst.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\BuilderFactory\\:\\:args\\(\\) has parameter \\$args with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/BuilderFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\BuilderFactory\\:\\:attribute\\(\\) has parameter \\$args with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/BuilderFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\BuilderFactory\\:\\:classConst\\(\\) has parameter \\$value with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/BuilderFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\BuilderFactory\\:\\:funcCall\\(\\) has parameter \\$args with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/BuilderFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\BuilderFactory\\:\\:methodCall\\(\\) has parameter \\$args with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/BuilderFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\BuilderFactory\\:\\:new\\(\\) has parameter \\$args with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/BuilderFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\BuilderFactory\\:\\:staticCall\\(\\) has parameter \\$args with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/BuilderFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\BuilderFactory\\:\\:val\\(\\) has parameter \\$value with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/BuilderFactory.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\BuilderHelpers\\:\\:normalizeValue\\(\\) has parameter \\$value with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/BuilderHelpers.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\ConstExprEvaluator\\:\\:evaluateArray\\(\\) return type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/ConstExprEvaluator.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\JsonDecoder\\:\\:decodeArray\\(\\) has parameter \\$array with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/JsonDecoder.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\JsonDecoder\\:\\:decodeArray\\(\\) return type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/JsonDecoder.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\JsonDecoder\\:\\:decodeComment\\(\\) has parameter \\$value with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/JsonDecoder.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\JsonDecoder\\:\\:decodeNode\\(\\) has parameter \\$value with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/JsonDecoder.php\n\n\t\t-\n\t\t\tmessage: '#^Call to function assert\\(\\) with false will always evaluate to false\\.$#'\n\t\t\tidentifier: function.impossibleType\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/Lexer/Emulative.php\n\n\t\t-\n\t\t\tmessage: '#^If condition is always false\\.$#'\n\t\t\tidentifier: if.alwaysFalse\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/Node/Expr/ArrayItem.php\n\n\t\t-\n\t\t\tmessage: '#^If condition is always false\\.$#'\n\t\t\tidentifier: if.alwaysFalse\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/Node/Expr/ClosureUse.php\n\n\t\t-\n\t\t\tmessage: '#^If condition is always false\\.$#'\n\t\t\tidentifier: if.alwaysFalse\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/Node/Scalar/DNumber.php\n\n\t\t-\n\t\t\tmessage: '#^If condition is always false\\.$#'\n\t\t\tidentifier: if.alwaysFalse\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/Node/Scalar/Encapsed.php\n\n\t\t-\n\t\t\tmessage: '#^If condition is always false\\.$#'\n\t\t\tidentifier: if.alwaysFalse\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/Node/Scalar/EncapsedStringPart.php\n\n\t\t-\n\t\t\tmessage: '#^If condition is always false\\.$#'\n\t\t\tidentifier: if.alwaysFalse\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/Node/Scalar/LNumber.php\n\n\t\t-\n\t\t\tmessage: '#^If condition is always false\\.$#'\n\t\t\tidentifier: if.alwaysFalse\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/Node/Stmt/DeclareDeclare.php\n\n\t\t-\n\t\t\tmessage: '#^If condition is always false\\.$#'\n\t\t\tidentifier: if.alwaysFalse\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/Node/Stmt/PropertyProperty.php\n\n\t\t-\n\t\t\tmessage: '#^If condition is always false\\.$#'\n\t\t\tidentifier: if.alwaysFalse\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/Node/Stmt/StaticVar.php\n\n\t\t-\n\t\t\tmessage: '#^If condition is always false\\.$#'\n\t\t\tidentifier: if.alwaysFalse\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/Node/Stmt/UseUse.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\NodeDumper\\:\\:__construct\\(\\) has parameter \\$options with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/NodeDumper.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\NodeDumper\\:\\:dump\\(\\) has parameter \\$node with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/NodeDumper.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\NodeTraverser\\:\\:traverseArray\\(\\) has parameter \\$nodes with no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/NodeTraverser.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\NodeTraverser\\:\\:traverseArray\\(\\) return type has no value type specified in iterable type array\\.$#'\n\t\t\tidentifier: missingType.iterableValue\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/NodeTraverser.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property PhpParser\\\\Node\\:\\:\\$attrGroups\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/NodeVisitor/NameResolver.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property PhpParser\\\\Node\\:\\:\\$name\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/NodeVisitor/NameResolver.php\n\n\t\t-\n\t\t\tmessage: '#^Access to an undefined property PhpParser\\\\Node\\:\\:\\$namespacedName\\.$#'\n\t\t\tidentifier: property.notFound\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/NodeVisitor/NameResolver.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\NodeVisitor\\\\NodeConnectingVisitor\\:\\:beforeTraverse\\(\\) should return array\\<PhpParser\\\\Node\\>\\|null but return statement is missing\\.$#'\n\t\t\tidentifier: return.missing\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/NodeVisitor/NodeConnectingVisitor.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\NodeVisitor\\\\NodeConnectingVisitor\\:\\:enterNode\\(\\) should return array\\<PhpParser\\\\Node\\>\\|int\\|PhpParser\\\\Node\\|null but return statement is missing\\.$#'\n\t\t\tidentifier: return.missing\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/NodeVisitor/NodeConnectingVisitor.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\NodeVisitor\\\\NodeConnectingVisitor\\:\\:leaveNode\\(\\) should return array\\<PhpParser\\\\Node\\>\\|int\\|PhpParser\\\\Node\\|null but return statement is missing\\.$#'\n\t\t\tidentifier: return.missing\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/NodeVisitor/NodeConnectingVisitor.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\NodeVisitor\\\\ParentConnectingVisitor\\:\\:beforeTraverse\\(\\) should return array\\<PhpParser\\\\Node\\>\\|null but return statement is missing\\.$#'\n\t\t\tidentifier: return.missing\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/NodeVisitor/ParentConnectingVisitor.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\NodeVisitor\\\\ParentConnectingVisitor\\:\\:enterNode\\(\\) should return array\\<PhpParser\\\\Node\\>\\|int\\|PhpParser\\\\Node\\|null but return statement is missing\\.$#'\n\t\t\tidentifier: return.missing\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/NodeVisitor/ParentConnectingVisitor.php\n\n\t\t-\n\t\t\tmessage: '#^Method PhpParser\\\\NodeVisitor\\\\ParentConnectingVisitor\\:\\:leaveNode\\(\\) should return array\\<PhpParser\\\\Node\\>\\|int\\|PhpParser\\\\Node\\|null but return statement is missing\\.$#'\n\t\t\tidentifier: return.missing\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/NodeVisitor/ParentConnectingVisitor.php\n\n\t\t-\n\t\t\tmessage: '#^Access to undefined constant static\\(PhpParser\\\\ParserAbstract\\)\\:\\:T_ECHO\\.$#'\n\t\t\tidentifier: classConstant.notFound\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/ParserAbstract.php\n\n\t\t-\n\t\t\tmessage: '#^Unary operation \"\\+\" on string results in an error\\.$#'\n\t\t\tidentifier: unaryOp.invalid\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/ParserAbstract.php\n\n\t\t-\n\t\t\tmessage: '#^Variable \\$action might not be defined\\.$#'\n\t\t\tidentifier: variable.undefined\n\t\t\tcount: 1\n\t\t\tpath: lib/PhpParser/ParserAbstract.php\n"
        },
        {
          "name": "phpstan.neon.dist",
          "type": "blob",
          "size": 0.123046875,
          "content": "includes:\n    - phpstan-baseline.neon\n\nparameters:\n    level: 6\n    paths:\n        - lib\n    treatPhpDocTypesAsCertain: false\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 0.658203125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"\n         backupGlobals=\"false\"\n         colors=\"true\"\n         convertDeprecationsToExceptions=\"true\"\n         beStrictAboutTestsThatDoNotTestAnything=\"false\"\n         bootstrap=\"./test/bootstrap.php\">\n    <testsuites>\n        <testsuite name=\"PHPParser Test Suite\">\n            <directory>./test/</directory>\n        </testsuite>\n    </testsuites>\n\n    <coverage>\n        <include>\n            <directory suffix=\".php\">./lib/PhpParser/</directory>\n        </include>\n    </coverage>\n</phpunit>\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_old",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}