{
  "metadata": {
    "timestamp": 1736712350194,
    "page": 16,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "briannesbitt/Carbon",
      "stars": 16606,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.228515625,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.yml]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.6669921875,
          "content": "/.editorconfig           export-ignore\n/.gitattributes          export-ignore\n/.gitignore              export-ignore\n/.multi-tester.yml       export-ignore\n/.php-cs-fixer.dist.php  export-ignore\n/.styleci.yml            export-ignore\n/.travis.yml             export-ignore\n/build.php               export-ignore\n/contributing.md         export-ignore\n/codecov.yml             export-ignore\n/phpdoc.php              export-ignore\n/phpmd.xml               export-ignore\n/phpstan.neon            export-ignore\n/phpunit.xml.dist        export-ignore\n/psalm.xml               export-ignore\n/.github                 export-ignore\n/tests                   export-ignore\n\n* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1787109375,
          "content": ".idea\n.vscode\n*.iml\n.php-cs-fixer.php\n.php-cs-fixer.cache\nvendor\ncomposer.phar\ncomposer.lock\ncoverage.xml\ncoverage\nphpunit.xml\nCarbon-*.zip\n*.phpunit.result.cache\n/nbproject/\n*.cache\n"
        },
        {
          "name": ".php-cs-fixer.dist.php",
          "type": "blob",
          "size": 2.9560546875,
          "content": "<?php\n\nuse PhpCsFixer\\Config;\nuse PhpCsFixer\\Finder;\n\n$header = <<<'EOF'\nThis file is part of the Carbon package.\n\n(c) Brian Nesbitt <brian@nesbot.com>\n\nFor the full copyright and license information, please view the LICENSE\nfile that was distributed with this source code.\nEOF;\n\n$rules = [\n    '@PSR2' => true,\n    '@PSR12' => true,\n    '@PHP71Migration' => true,\n    'array_syntax' => [\n        'syntax' => 'short',\n    ],\n    'blank_line_after_namespace' => true,\n    'blank_line_before_statement' => true,\n    'cast_spaces' => true,\n    'class_definition' => false,\n    'concat_space' => [\n        'spacing' => 'none',\n    ],\n    'ereg_to_preg' => true,\n    'general_phpdoc_tag_rename' => true,\n    'header_comment' => [\n        'comment_type' => 'PHPDoc',\n        'header' => $header,\n        'location' => 'after_declare_strict',\n        'separate' => 'both',\n    ],\n    'is_null' => true,\n    'line_ending' => true,\n    'modernize_types_casting' => true,\n    'native_function_invocation' => [\n        'include' => ['@compiler_optimized', 'app'],\n    ],\n    'no_blank_lines_after_phpdoc' => true,\n    'no_empty_phpdoc' => true,\n    'no_extra_blank_lines' => true,\n    'no_short_bool_cast' => true,\n    'no_unneeded_control_parentheses' => true,\n    'no_unused_imports' => true,\n    'no_whitespace_in_blank_line' => true,\n    'ordered_imports' => true,\n    'php_unit_method_casing' => [\n        'case' => 'camel_case',\n    ],\n    'php_unit_test_annotation' => [\n        'style' => 'prefix',\n    ],\n    'php_unit_test_case_static_method_calls' => [\n        'call_type' => 'this',\n    ],\n    'phpdoc_align' => [\n        'align' => 'vertical',\n        'tags' => [\n            'param',\n            'return',\n            'throws',\n            'type',\n            'var',\n        ],\n    ],\n    'phpdoc_indent' => true,\n    'phpdoc_inline_tag_normalizer' => true,\n    'phpdoc_no_access' => true,\n    'phpdoc_no_package' => true,\n    'phpdoc_order' => true,\n    'phpdoc_scalar' => true,\n    'phpdoc_separation' => true,\n    'phpdoc_tag_type' => [\n        'tags' => [\n            'inheritdoc' => 'inline',\n        ],\n    ],\n    'phpdoc_to_comment' => true,\n    'phpdoc_trim' => true,\n    'phpdoc_types' => true,\n    'phpdoc_var_without_name' => true,\n    'self_accessor' => true,\n    'single_quote' => true,\n    'space_after_semicolon' => true,\n    'standardize_not_equals' => true,\n    'ternary_operator_spaces' => true,\n    'trailing_comma_in_multiline' => true,\n    'trim_array_spaces' => true,\n    'unary_operator_spaces' => true,\n    'yoda_style' => [\n        'always_move_variable' => false,\n        'equal' => false,\n        'identical' => false,\n        'less_and_greater' => false,\n    ],\n];\n\nreturn (new Config())->setRules($rules)\n    ->setFinder(\n        Finder::create()\n            ->in(__DIR__)\n            ->notPath([\n                'src/Carbon/Doctrine/DateTimeImmutableType.php',\n                'src/Carbon/Doctrine/DateTimeType.php',\n            ]),\n    )\n    ->setUsingCache(true)\n    ->setRiskyAllowed(true);\n"
        },
        {
          "name": ".phpstorm.meta.php",
          "type": "blob",
          "size": 0.96875,
          "content": "<?php\nnamespace PHPSTORM_META {\n    registerArgumentsSet(\"date_units\", \"millenania\", \"millennium\", \"century\", \"centuries\", \"decade\", \"decades\", \"year\", \"years\", \"y\", \"yr\", \"yrs\", \"quarter\", \"quarters\", \"month\", \"months\", \"mo\", \"mos\", \"week\", \"weeks\", \"w\", \"day\", \"days\", \"d\", \"hour\", \"hours\", \"h\", \"minute\", \"minutes\", \"m\", \"second\", \"seconds\", \"s\", \"millisecond\", \"milliseconds\", \"milli\", \"ms\", \"microsecond\", \"microseconds\", \"micro\", \"µs\");\n    expectedArguments(\\Carbon\\Traits\\Units::add(), 0, argumentsSet(\"date_units\"));\n    expectedArguments(\\Carbon\\Traits\\Units::add(), 1, argumentsSet(\"date_units\"));\n    expectedArguments(\\Carbon\\CarbonInterface::add(), 0, argumentsSet(\"date_units\"));\n    expectedArguments(\\Carbon\\CarbonInterface::add(), 1, argumentsSet(\"date_units\"));\n\n    expectedArguments(\\Carbon\\CarbonInterface::getTimeFormatByPrecision(), 0, \"minute\", \"second\", \"m\", \"millisecond\", \"µ\", \"microsecond\", \"minutes\", \"seconds\", \"ms\", \"milliseconds\", \"µs\", \"microseconds\");\n}\n"
        },
        {
          "name": ".styleci.yml",
          "type": "blob",
          "size": 0.091796875,
          "content": "preset: psr2\n\n# Disabled, moved in .github/workflows/phpcs.yml\nfinder:\n  exclude:\n    - \"src\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.02734375,
          "content": "Copyright (C) Brian Nesbitt\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.php",
          "type": "blob",
          "size": 3.6025390625,
          "content": "<?php\n\n/**\n * This file is part of the Carbon package.\n *\n * (c) Brian Nesbitt <brian@nesbot.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nchdir(__DIR__);\n$currentBranch = 'master';\nif (preg_match('/On branch ([^\\n]+)\\n/', shell_exec('git status'), $match)) {\n    $currentBranch = $match[1];\n}\nshell_exec('git fetch --all --tags --prune');\n$remotes = explode(\"\\n\", trim(shell_exec('git remote')));\n$tagsCommand = \\count($remotes)\n    ? 'git ls-remote --tags '.(\\in_array('upstream', $remotes, true) ? 'upstream' : (\\in_array('origin', $remotes, true) ? 'origin' : $remotes[0]))\n    : 'git tag';\n$tags = array_map(function ($ref) {\n    $ref = explode('refs/tags/', $ref);\n\n    return $ref[1] ?? $ref[0];\n}, array_filter(explode(\"\\n\", trim(shell_exec($tagsCommand))), function ($ref) {\n    return substr($ref, -3) !== '^{}';\n}));\nusort($tags, 'version_compare');\n\n$tag = isset($argv[1]) && !\\in_array($argv[1], ['last', 'latest']) ? $argv[1] : end($tags);\n\nif (strtolower($tag) !== 'all') {\n    if (!\\in_array($tag, $tags, true)) {\n        echo \"Tag must be one of remote tags available:\\n\";\n        foreach ($tags as $_tag) {\n            echo \"  - $_tag\\n\";\n        }\n        echo \"\\\"$tag\\\" does not match.\\n\";\n\n        exit(1);\n    }\n\n    $tags = [$tag];\n}\n\nfunction getPhpLevel($tag)\n{\n    if (version_compare($tag, '2.0.0-dev', '<')) {\n        return '5.3.9';\n    }\n\n    if (version_compare($tag, '3.0.0-dev', '<')) {\n        return '7.1.8';\n    }\n\n    return '8.1.0';\n}\n\nforeach ($tags as $tag) {\n    $archive = \"Carbon-$tag.zip\";\n    if (isset($argv[2]) && $argv[2] === 'missing' && file_exists($archive)) {\n        continue;\n    }\n\n    $branch = \"build-$tag\";\n    shell_exec('git stash');\n    shell_exec(\"git branch -d $branch\");\n    shell_exec(\"git checkout tags/$tag -b $branch\");\n    $phpVersion = getPhpLevel($tag);\n    shell_exec(\"composer config platform.php $phpVersion\");\n    shell_exec('composer remove friendsofphp/php-cs-fixer --dev');\n    shell_exec('composer remove kylekatarnls/multi-tester --dev');\n    shell_exec('composer remove phpmd/phpmd --dev');\n    shell_exec('composer remove phpstan/phpstan --dev');\n    shell_exec('composer remove phpunit/phpunit --dev');\n    shell_exec('composer remove squizlabs/php_codesniffer --dev');\n    shell_exec('composer update --no-interaction --no-dev --optimize-autoloader');\n    $zip = new ZipArchive();\n\n    $zip->open($archive, ZipArchive::CREATE | ZipArchive::OVERWRITE);\n\n    foreach (['src', 'vendor', 'Carbon', 'lazy'] as $directory) {\n        if (is_dir($directory)) {\n            $directory = realpath($directory);\n            $base = \\dirname($directory);\n\n            $files = new RecursiveIteratorIterator(\n                new RecursiveDirectoryIterator($directory),\n                RecursiveIteratorIterator::LEAVES_ONLY,\n            );\n\n            foreach ($files as $name => $file) {\n                if (!$file->isDir()) {\n                    $filePath = $file->getRealPath();\n\n                    $zip->addFile($filePath, substr($filePath, \\strlen($base) + 1));\n                }\n            }\n        }\n    }\n\n    $autoload = 'autoload.php';\n    file_put_contents($autoload, \"<?php\\n\\n/**\\n * @version $tag\\n */\\n\\nrequire __DIR__.'/vendor/autoload.php';\\n\");\n    $zip->addFile($autoload, $autoload);\n    $zip->close();\n    unlink($autoload);\n\n    shell_exec('git checkout .');\n    shell_exec(\"git checkout $currentBranch\");\n    shell_exec(\"git branch -d $branch\");\n    shell_exec('git stash pop');\n    shell_exec('composer config platform.php 8.1.0');\n    shell_exec('composer update --no-interaction');\n}\n\nexit(0);\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.0146484375,
          "content": "comment: false\n"
        },
        {
          "name": "composer.json",
          "type": "blob",
          "size": 3.4931640625,
          "content": "{\n    \"name\": \"nesbot/carbon\",\n    \"description\": \"An API extension for DateTime that supports 281 different languages.\",\n    \"license\": \"MIT\",\n    \"type\": \"library\",\n    \"keywords\": [\n        \"date\",\n        \"time\",\n        \"DateTime\"\n    ],\n    \"authors\": [\n        {\n            \"name\": \"Brian Nesbitt\",\n            \"email\": \"brian@nesbot.com\",\n            \"homepage\": \"https://markido.com\"\n        },\n        {\n            \"name\": \"kylekatarnls\",\n            \"homepage\": \"https://github.com/kylekatarnls\"\n        }\n    ],\n    \"homepage\": \"https://carbon.nesbot.com\",\n    \"support\": {\n        \"issues\": \"https://github.com/CarbonPHP/carbon/issues\",\n        \"source\": \"https://github.com/CarbonPHP/carbon\",\n        \"docs\": \"https://carbon.nesbot.com/docs\"\n    },\n    \"funding\": [\n        {\n            \"url\": \"https://github.com/sponsors/kylekatarnls\",\n            \"type\": \"github\"\n        },\n        {\n            \"url\": \"https://tidelift.com/subscription/pkg/packagist-nesbot-carbon?utm_source=packagist-nesbot-carbon&utm_medium=referral&utm_campaign=readme\",\n            \"type\": \"tidelift\"\n        },\n        {\n            \"url\": \"https://opencollective.com/Carbon#sponsor\",\n            \"type\": \"opencollective\"\n        }\n    ],\n    \"require\": {\n        \"php\": \"^8.1\",\n        \"ext-json\": \"*\",\n        \"carbonphp/carbon-doctrine-types\": \"<100.0\",\n        \"psr/clock\": \"^1.0\",\n        \"symfony/clock\": \"^6.3 || ^7.0\",\n        \"symfony/polyfill-mbstring\": \"^1.0\",\n        \"symfony/translation\": \"^4.4.18 || ^5.2.1|| ^6.0 || ^7.0\"\n    },\n    \"require-dev\": {\n        \"doctrine/dbal\": \"^3.6.3 || ^4.0\",\n        \"doctrine/orm\": \"^2.15.2 || ^3.0\",\n        \"friendsofphp/php-cs-fixer\": \"^3.57.2\",\n        \"kylekatarnls/multi-tester\": \"^2.5.3\",\n        \"ondrejmirtes/better-reflection\": \"^6.25.0.4\",\n        \"phpmd/phpmd\": \"^2.15.0\",\n        \"phpstan/extension-installer\": \"^1.3.1\",\n        \"phpstan/phpstan\": \"^1.11.2\",\n        \"phpunit/phpunit\": \"^10.5.20\",\n        \"squizlabs/php_codesniffer\": \"^3.9.0\"\n    },\n    \"provide\": {\n        \"psr/clock-implementation\": \"1.0\"\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"autoload\": {\n        \"psr-4\": {\n            \"Carbon\\\\\": \"src/Carbon/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests/\"\n        },\n        \"files\": [\n            \"tests/Laravel/ServiceProvider.php\"\n        ]\n    },\n    \"bin\": [\n        \"bin/carbon\"\n    ],\n    \"config\": {\n        \"allow-plugins\": {\n            \"phpstan/extension-installer\": true,\n            \"composer/package-versions-deprecated\": true\n        },\n        \"process-timeout\": 0,\n        \"sort-packages\": true\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-master\": \"3.x-dev\",\n            \"dev-2.x\": \"2.x-dev\"\n        },\n        \"laravel\": {\n            \"providers\": [\n                \"Carbon\\\\Laravel\\\\ServiceProvider\"\n            ]\n        },\n        \"phpstan\": {\n            \"includes\": [\n                \"extension.neon\"\n            ]\n        }\n    },\n    \"scripts\": {\n        \"phpcs\": \"php-cs-fixer fix -v --diff --dry-run\",\n        \"phpdoc\": \"php phpdoc.php\",\n        \"phpmd\": \"phpmd src text /phpmd.xml\",\n        \"phpmd-test\": \"phpmd tests text /tests/phpmd-test.xml\",\n        \"phpstan\": \"phpstan analyse --configuration phpstan.neon\",\n        \"phpunit\": \"phpunit --verbose\",\n        \"style-check\": [\n            \"@phpcs\",\n            \"@phpstan\",\n            \"@phpmd\"\n        ],\n        \"test\": [\n            \"@phpunit\",\n            \"@style-check\"\n        ],\n        \"sponsors\": \"php sponsors.php\"\n    }\n}\n"
        },
        {
          "name": "contributing.md",
          "type": "blob",
          "size": 6.505859375,
          "content": "# Contributing to Carbon\n\n## Issue Contributions\n\nPlease report any security issue using [Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure.\nPlease don't disclose security bugs publicly until they have been handled by us.\n\nFor any other bug or issue, please click this link and follow the template:\n[Create new issue](https://github.com/briannesbitt/Carbon/issues/new)\n\nYou may think this template does not apply to your case but please think again. A long description will never be as\nclear as a code chunk with the output you expect from it (for either bug report or new features).\n\n## Code Contributions\n\n### Where to begin\n\nWe use the label **good first issue** to tag issues that could be a good fit for new contributors, see if there are such issues now following this link:\n\nhttps://github.com/briannesbitt/Carbon/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22\n\nElse, check the roadmap to see what we plan to do in next releases:\n\nhttps://github.com/briannesbitt/Carbon/issues/1681\n\n### Develop locally, then submit changes\n\nFork the [GitHub project](https://github.com/briannesbitt/Carbon) and download it locally:\n\n```shell\ngit clone https://github.com/<username>/Carbon.git\ncd Carbon\ngit remote add upstream https://github.com/briannesbitt/Carbon.git\n```\nReplace `<username>` with your GitHub username.\n\nThen, you can work on the master or create a specific branch for your development:\n\n```shell\ngit checkout -b my-feature-branch -t origin/master\n```\n\nYou can now edit the \"Carbon\" directory contents.\n\nBefore committing, please set your name and your e-mail (use the same e-mail address as in your GitHub account):\n\n```shell\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your.email.address@example.com\"\n```\n\nThe ```--global``` argument will apply this setting for all your git repositories, remove it to set only your Carbon\nfork with those settings.\n\nNow you can commit your modifications as you usually do with git:\n\n```shell\ngit add --all\ngit commit -m \"The commit message log\"\n```\n\nIf your patch fixes an open issue, please insert ```#``` immediately followed by the issue number:\n\n```shell\ngit commit -m \"#21 Fix this or that\"\n```\n\nUse git rebase (not git merge) to sync your work from time to time:\n\n```shell\ngit fetch origin\ngit rebase origin/master\n```\n\nPlease add some tests for bug fixes and features (so it will ensure next developments will not break your code),\nthen check all is right with phpunit:\n\nInstall PHP if you haven't yet, then install composer:\nhttps://getcomposer.org/download/\n\nUpdate dependencies:\n```\n./composer.phar update\n```\n\nOr if you installed composer globally:\n```\ncomposer update\n```\n\nThen call phpunit:\n```\n./vendor/bin/phpunit\n```\n\nMake sure all tests succeed before submitting your pull-request, else we will not be able to merge it.\n\nPush your work on your remote GitHub fork with:\n```\ngit push origin my-feature-branch\n```\n\nGo to https://github.com/yourusername/Carbon and select your feature branch. Click the 'Pull Request' button and fill\nout the form.\n\nWe will review it within a few days. And we thank you in advance for your help.\n\n## Versioning\n\n### Note about Semantic Versioning and breaking changes\n\nAs a developer, you must understand every change is a breaking change. What is a bug for someone\nis expected in someone else's workflow. The consequence of a change strongly depends on the usage.\n[Semantic Versioning](https://semver.org/) relies to public API. In PHP, the public API of a class is its public\nmethods. However, if you extend a class, you can access protected methods, then if you use reflexion, you can\naccess private methods. So anything can become a public API if you force it to be. That doesn't mean we should handle\nany possible usage, else we would have to publish a major release for each change and it would no longer make sense.\n\nSo before any complain about a breaking change, be warned, we do not guarantee a strict Semantic Versioning as you\nmay expect, we're following a pragmatic interpretation of Semantic Versioning that allows the software to evolve in a\nreliable way with reasonable maintenance effort.\n\nConcretely, we consider a change as breaking if it makes fail one of our unit test. We will do our best to avoid\nincompatibilities with libraries that extends Carbon classes (such as Laravel that is continuously tested thanks to\nTravis CI, [see the compatibility matrix](https://github.com/kylekatarnls/carbon-laravel/tree/master#carbon-1-dev-version-1next)).\n\nIf you're the owner of a library that strongly depends on Carbon, we recommend you to run unit tests daily requiring\n`\"nesbot/carbon\": \"dev-master\"` (for `^2`) or `\"nesbot/carbon\": \"dev-version-1.next\"` (for `^1`), this way you can\ndetect incompatibilities earlier and report it to us before we tag a release. We'll pay attention and try to fix it to\nmake update to next minor releases as soft as possible.\n\nWe reserve the right to publish emergency patches within 24 hours after a release if a tag that does not respect\nthis pattern would have been released despite our vigilance. In this very rare and particular case, we would mark the\ntag as broken on GitHub and backward compatibility would be based on previous stable tag.\n\nLast, you must understand that Carbon extends PHP natives classes, that means Carbon can be impacted by any change\nthat occurs in the date/time API of PHP. We watch new PHP versions and handle those changes as quickly as possible\nwhen detected, but as PHP does not follow the semantic versioning pattern, it basically means any releases (including\npatches) can have unexpected consequences on Carbon methods results.\n\n### Long term support\n\nTo benefit the better support, require Carbon using major version range (`^1` or `^2`). By requiring `1.26.*`,\n`~1.26.0` or limited range such as `>=1.20 <1.33`, you fall to low priority support (only security and critical issues\nwill be fixed), our prior support goes to next minor releases of each major version. It applies to bug fixes and\nlow-cost features. Other new features will only be added in the last stable release. At the opposite, we recommend you\nto restrain to a major number, as there is no compatibility guarantee from a major version to the next. It means\nrequiring `>=2`, as it allows any newer version, will probably leads to errors on releasing our next major version.\n\nOpen milestones can be patched if a minor bug is detected while if you're on a closed milestone, we'll more likely\nask you to update first to an open one. See currently open milestones: \n\nhttps://github.com/briannesbitt/Carbon/milestones\n"
        },
        {
          "name": "extension.neon",
          "type": "blob",
          "size": 0.1328125,
          "content": "services:\n    -\n        class: Carbon\\PHPStan\\MacroExtension\n        tags:\n            - phpstan.broker.methodsClassReflectionExtension\n"
        },
        {
          "name": "lazy",
          "type": "tree",
          "content": null
        },
        {
          "name": "phpdoc.php",
          "type": "blob",
          "size": 30.431640625,
          "content": "<?php\n\n/**\n * This file is part of the Carbon package.\n *\n * (c) Brian Nesbitt <brian@nesbot.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nuse Carbon\\Carbon;\nuse Carbon\\CarbonImmutable;\nuse Carbon\\CarbonInterface;\nuse Carbon\\Factory;\nuse Carbon\\FactoryImmutable;\n\n$tags = [\n    'property',\n    'property-read',\n    'property-write',\n    PHP_EOL,\n    'mode',\n    ['call', 'is'],\n    ['call', 'isDayOfWeek'],\n    ['call', 'isSameUnit'],\n    ['call', 'setUnit'],\n    ['call', 'addUnit'],\n    ['call', 'addUTCUnit'],\n    ['call', 'roundUnit'],\n    ['call', 'diffForHumans'],\n];\n$nativeMethods = [\n    'getOffset' => 'int',\n    'getTimestamp' => 'int',\n];\n$modes = [];\n$autoDocLines = [];\n$carbon = __DIR__.'/src/Carbon/Carbon.php';\n$immutable = __DIR__.'/src/Carbon/CarbonImmutable.php';\n$interface = __DIR__.'/src/Carbon/CarbonInterface.php';\n$phpLevel = 7.1;\nfile_put_contents($interface, preg_replace('/(\\/\\/ <methods[\\s\\S]*>)([\\s\\S]+)(<\\/methods>)/mU', \"$1\\n\\n    // $3\", file_get_contents($interface), 1));\nrequire_once __DIR__.'/vendor/autoload.php';\n$trait = __DIR__.'/src/Carbon/Traits/Date.php';\n$code = '';\n$overrideTyping = [\n    $carbon => [\n        // 'createFromImmutable' => ['static Carbon', 'DateTimeImmutable $dateTime', 'Create a new Carbon object from an immutable date.'],\n        // 'createFromFormat' => ['static static', 'string $format, string $time, DateTimeZone|string|false|null $timezone = null', 'Parse a string into a new Carbon object according to the specified format.'],\n        // '__set_state' => ['static static', 'array $array', 'https://php.net/manual/en/datetime.set-state.php'],\n    ],\n    $immutable => [\n        // 'createFromMutable' => ['static CarbonImmutable', 'DateTime $dateTime', 'Create a new CarbonImmutable object from an immutable date.'],\n        // 'createFromFormat' => ['static static', 'string $format, string $time, DateTimeZone|string|false|null $timezone = null', 'Parse a string into a new CarbonImmutable object according to the specified format.'],\n        // '__set_state' => ['static static', 'array $array', 'https://php.net/manual/en/datetime.set-state.php'],\n    ],\n];\n\nforeach (glob(__DIR__.'/src/Carbon/Traits/*.php') as $file) {\n    $code .= file_get_contents($file);\n}\n\nfunction unitName($unit)\n{\n    return match ($unit) {\n        'milli' => 'millisecond',\n        'micro' => 'microsecond',\n        default => $unit,\n    };\n}\n\nfunction pluralize($word)\n{\n    if (preg_match('/(millenni)um$/i', $word)) {\n        return preg_replace('/(millenni)um$/i', '$1a', $word);\n    }\n\n    return preg_replace('/(centur)y$/i', '$1ie', $word).'s';\n}\n\nfunction dumpValue($value)\n{\n    if ($value === null) {\n        return 'null';\n    }\n\n    if ($value === CarbonInterface::TRANSLATE_ALL) {\n        return 'CarbonInterface::TRANSLATE_ALL';\n    }\n\n    $value = preg_replace('/^array\\s*\\(\\s*\\)$/', '[]', var_export($value, true));\n    $value = preg_replace('/^array\\s*\\(([\\s\\S]+)\\)$/', '[$1]', $value);\n\n    return $value;\n}\n\nfunction cleanClassName($name)\n{\n    if ($name === 'CarbonInterval') {\n        throw new \\Exception('stop');\n    }\n\n    if (preg_match('/^[A-Z]/', $name)) {\n        $name = \"\\\\$name\";\n    }\n\n    if ($name === '\\\\Symfony\\\\Contracts\\\\Translation\\\\TranslatorInterface') {\n        return 'TranslatorInterface';\n    }\n\n    return preg_replace('/^\\\\\\\\(Date(?:Time(?:Immutable|Interface|Zone)?|Interval)|[a-z]*Exception|Closure)$/i', '$1', preg_replace('/^\\\\\\\\Carbon\\\\\\\\/', '', $name));\n}\n\nfunction dumpType(ReflectionType $type, bool $deep = true, bool $allowsNull = false): string\n{\n    if ($type instanceof ReflectionUnionType) {\n        return ($deep ? '(' : '').implode('|', array_map(\n            dumpType(...),\n            $type->getTypes(),\n        )).($deep ? ')' : '');\n    }\n\n    if ($type instanceof ReflectionIntersectionType) {\n        return ($deep ? '(' : '').implode('&', array_map(\n            dumpType(...),\n            $type->getTypes(),\n        )).($deep ? ')' : '');\n    }\n\n    $name = cleanClassName($type instanceof ReflectionNamedType ? $type->getName() : (string) $type);\n    $nullable = $allowsNull && $name !== 'mixed';\n\n    return (!$deep && $nullable ? '?' : '').\n        $name.\n        ($deep && $nullable ? '|null' : '');\n}\n\nfunction dumpParameter(string $method, ReflectionParameter $parameter): string\n{\n    global $defaultValues;\n\n    $name = $parameter->getName();\n    $output = '$'.$name;\n\n    if ($parameter->isVariadic()) {\n        $output = \"...$output\";\n    }\n\n    if ($parameter->hasType()) {\n        $output = dumpType($parameter->getType(), false, $parameter->allowsNull()).\" $output\";\n    }\n\n    if (isset($defaultValues[$method])) {\n        if (isset($defaultValues[$method][$name])) {\n            $output .= ' = '.dumpValue($defaultValues[$method][$name]);\n        }\n\n        return $output;\n    }\n\n    if ($parameter->isDefaultValueAvailable()) {\n        $output .= ' = '.dumpValue($parameter->getDefaultValue());\n    }\n\n    return $output;\n}\n\n$deprecated = [];\n\nforeach ($tags as $tag) {\n    if (\\is_array($tag)) {\n        [$tag, $pattern] = $tag;\n    }\n\n    $pattern ??= '\\S+';\n\n    if ($tag === PHP_EOL) {\n        $autoDocLines[] = '';\n\n        continue;\n    }\n\n    $unitOfUnit = [];\n    preg_match_all('/\\/\\/ @'.$tag.'\\s+(?<type>'.$pattern.')(?:\\s+\\$(?<name>\\S+)(?:[^\\S\\n](?<description>.*))?\\n|(?:[^\\S\\n](?<description2>.*))?\\n(?<comments>(?:[ \\t]+\\/\\/[^\\n]*\\n)*)[^\\']*\\'(?<name2>[^\\']+)\\')/', $code, $oneLine, PREG_SET_ORDER);\n    preg_match_all('/\\/\\* *@'.$tag.'\\s+(?<type>'.$pattern.') *\\*\\/[^\\']*\\'(?<name2>[^\\']+)\\'/', $code, $multiLine, PREG_SET_ORDER);\n\n    foreach ([...$oneLine, ...$multiLine] as $match) {\n        $vars = (object) $match;\n        $deprecation = null;\n\n        if (isset($vars->comments) && preg_match(\n            '`^[ \\t]+(//|/*|#)[ \\t]*@deprecated(?:\\s(?<deprecation>[\\s\\S]*))?$`',\n            $vars->comments,\n            $comments\n        )) {\n            ['deprecation' => $deprecation] = $comments;\n            $deprecation = preg_replace('/^\\s*(\\/\\/|#|\\*) {0,3}/m', '', trim($deprecation));\n\n            if (preg_match('/^(?:[a-z]+:[^\\n]+\\n)+$/', \"$deprecation\\n\")) {\n                $data = [];\n\n                foreach (explode(\"\\n\", $deprecation) as $line) {\n                    [$name, $value] = array_map('trim', explode(':', $line, 2));\n\n                    $data[$name] = $value;\n                }\n\n                $deprecation = $data;\n            } else {\n                $deprecation = ['reason' => $deprecation];\n            }\n        }\n\n        $vars->name = ($vars->name ?? null) ?: ($vars->name2 ?? '');\n        $vars->description = ($vars->description ?? null) ?: ($vars->description2 ?? '');\n\n        if ($tag === 'mode') {\n            $modes[$vars->type] ??= [];\n            $modes[$vars->type][] = $vars->name;\n\n            continue;\n        }\n\n        if ($tag === 'call') {\n            switch ($vars->type) {\n                case 'diffForHumans':\n                    foreach ($modes[$vars->type] as $mode) {\n                        $autoDocLines[] = [\n                            '@method',\n                            'string',\n                            \"$mode{$vars->name}DiffForHumans(DateTimeInterface \\$other = null, int \\$parts = 1)\",\n                            \"Get the difference ($mode format, '{$vars->name}' mode) in a human readable format in the current locale. (\\$other and \\$parts parameters can be swapped.)\",\n                        ];\n                    }\n\n                    break;\n\n                case 'isDayOfWeek':\n                    $autoDocLines[] = [\n                        '@method',\n                        'bool',\n                        'is'.ucFirst($vars->name).'()',\n                        'Checks if the instance day is '.unitName(strtolower($vars->name)).'.',\n                    ];\n\n                    break;\n\n                case 'is':\n                    $autoDocLines[] = [\n                        '@method',\n                        'bool',\n                        'is'.ucFirst($vars->name).'()',\n                        $vars->description,\n                    ];\n\n                    break;\n\n                case 'isSameUnit':\n                    $unit = $vars->name;\n                    $unitName = unitName($unit);\n                    $method = 'isSame'.ucFirst($unit);\n\n                    if (!method_exists(Carbon::class, $method)) {\n                        $autoDocLines[] = [\n                            '@method',\n                            'bool',\n                            $method.'(DateTimeInterface|string $date)',\n                            \"Checks if the given date is in the same $unitName as the instance. If null passed, compare to now (with the same timezone).\",\n                        ];\n                    }\n\n                    $autoDocLines[] = [\n                        '@method',\n                        'bool',\n                        'isCurrent'.ucFirst($unit).'()',\n                        \"Checks if the instance is in the same $unitName as the current moment.\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'bool',\n                        'isNext'.ucFirst($unit).'()',\n                        \"Checks if the instance is in the same $unitName as the current moment next $unitName.\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'bool',\n                        'isLast'.ucFirst($unit).'()',\n                        \"Checks if the instance is in the same $unitName as the current moment last $unitName.\",\n                    ];\n\n                    break;\n\n                case 'setUnit':\n                    $unit = $vars->name;\n                    $unitName = unitName($unit);\n                    $plUnit = pluralize($unit);\n                    $enums = $unitName === 'month' ? 'Month|' : '';\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        \"$plUnit({$enums}int \\$value)\",\n                        \"Set current instance $unitName to the given value.\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        \"$unit({$enums}int \\$value)\",\n                        \"Set current instance $unitName to the given value.\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        'set'.ucfirst($plUnit).\"({$enums}int \\$value)\",\n                        \"Set current instance $unitName to the given value.\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        'set'.ucfirst($unit).\"({$enums}int \\$value)\",\n                        \"Set current instance $unitName to the given value.\",\n                    ];\n\n                    break;\n\n                case 'addUnit':\n                    $unit = $vars->name;\n                    $unitName = unitName($unit);\n                    $plUnit = pluralize($unit);\n                    $plUnitName = pluralize($unitName);\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        'add'.ucFirst($plUnit).'(int|float $value = 1)',\n                        \"Add $plUnitName (the \\$value count passed in) to the instance (using date interval).\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        'add'.ucFirst($unit).'()',\n                        \"Add one $unitName to the instance (using date interval).\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        'sub'.ucFirst($plUnit).'(int|float $value = 1)',\n                        \"Sub $plUnitName (the \\$value count passed in) to the instance (using date interval).\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        'sub'.ucFirst($unit).'()',\n                        \"Sub one $unitName to the instance (using date interval).\",\n                    ];\n\n                    if (\\in_array($unit, [\n                        'month',\n                        'quarter',\n                        'year',\n                        'decade',\n                        'century',\n                        'millennium',\n                    ])) {\n                        $autoDocLines[] = [\n                            '@method',\n                            'self',\n                            'add'.ucFirst($plUnit).'WithOverflow(int|float $value = 1)',\n                            \"Add $plUnitName (the \\$value count passed in) to the instance (using date interval) with overflow explicitly allowed.\",\n                        ];\n                        $autoDocLines[] = [\n                            '@method',\n                            'self',\n                            'add'.ucFirst($unit).'WithOverflow()',\n                            \"Add one $unitName to the instance (using date interval) with overflow explicitly allowed.\",\n                        ];\n                        $autoDocLines[] = [\n                            '@method',\n                            'self',\n                            'sub'.ucFirst($plUnit).'WithOverflow(int|float $value = 1)',\n                            \"Sub $plUnitName (the \\$value count passed in) to the instance (using date interval) with overflow explicitly allowed.\",\n                        ];\n                        $autoDocLines[] = [\n                            '@method',\n                            'self',\n                            'sub'.ucFirst($unit).'WithOverflow()',\n                            \"Sub one $unitName to the instance (using date interval) with overflow explicitly allowed.\",\n                        ];\n\n                        foreach (['WithoutOverflow', 'WithNoOverflow', 'NoOverflow'] as $alias) {\n                            $autoDocLines[] = [\n                                '@method',\n                                'self',\n                                'add'.ucFirst($plUnit).\"$alias(int|float \\$value = 1)\",\n                                \"Add $plUnitName (the \\$value count passed in) to the instance (using date interval) with overflow explicitly forbidden.\",\n                            ];\n                            $autoDocLines[] = [\n                                '@method',\n                                'self',\n                                'add'.ucFirst($unit).\"$alias()\",\n                                \"Add one $unitName to the instance (using date interval) with overflow explicitly forbidden.\",\n                            ];\n                            $autoDocLines[] = [\n                                '@method',\n                                'self',\n                                'sub'.ucFirst($plUnit).\"$alias(int|float \\$value = 1)\",\n                                \"Sub $plUnitName (the \\$value count passed in) to the instance (using date interval) with overflow explicitly forbidden.\",\n                            ];\n                            $autoDocLines[] = [\n                                '@method',\n                                'self',\n                                'sub'.ucFirst($unit).\"$alias()\",\n                                \"Sub one $unitName to the instance (using date interval) with overflow explicitly forbidden.\",\n                            ];\n                        }\n\n                        break;\n                    }\n\n                    break;\n\n                case 'addUTCUnit':\n                    $unit = $vars->name;\n                    $unitName = unitName($unit);\n                    $plUnit = pluralize($unit);\n                    $plUnitName = pluralize($unitName);\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        'addUTC'.ucFirst($plUnit).'(int|float $value = 1)',\n                        \"Add $plUnitName (the \\$value count passed in) to the instance (using timestamp).\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        'addUTC'.ucFirst($unit).'()',\n                        \"Add one $unitName to the instance (using timestamp).\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        'subUTC'.ucFirst($plUnit).'(int|float $value = 1)',\n                        \"Sub $plUnitName (the \\$value count passed in) to the instance (using timestamp).\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        'subUTC'.ucFirst($unit).'()',\n                        \"Sub one $unitName to the instance (using timestamp).\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'CarbonPeriod',\n                        $plUnit.'Until($endDate = null, int|float $factor = 1)',\n                        \"Return an iterable period from current date to given end (string, DateTime or Carbon instance) for each $unitName or every X $plUnitName if a factor is given.\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'float',\n                        'diffInUTC'.ucFirst($plUnit).'(DateTimeInterface|string|null $date, bool $absolute = false)',\n                        \"Convert current and given date in UTC timezone and return a floating number of $plUnitName.\",\n                    ];\n\n                    break;\n\n                case 'roundUnit':\n                    $unit = $vars->name;\n                    $unitName = unitName($unit);\n                    $plUnit = pluralize($unit);\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        'round'.ucFirst($unit).'(float $precision = 1, string $function = \"round\")',\n                        \"Round the current instance $unitName with given precision using the given function.\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        'round'.ucFirst($plUnit).'(float $precision = 1, string $function = \"round\")',\n                        \"Round the current instance $unitName with given precision using the given function.\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        'floor'.ucFirst($unit).'(float $precision = 1)',\n                        \"Truncate the current instance $unitName with given precision.\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        'floor'.ucFirst($plUnit).'(float $precision = 1)',\n                        \"Truncate the current instance $unitName with given precision.\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        'ceil'.ucFirst($unit).'(float $precision = 1)',\n                        \"Ceil the current instance $unitName with given precision.\",\n                    ];\n                    $autoDocLines[] = [\n                        '@method',\n                        'self',\n                        'ceil'.ucFirst($plUnit).'(float $precision = 1)',\n                        \"Ceil the current instance $unitName with given precision.\",\n                    ];\n\n                    break;\n            }\n\n            continue;\n        }\n\n        $description = trim($vars->description);\n        $variable = $vars->name;\n\n        if (str_starts_with($description, '$')) {\n            [$variable, $description] = explode(' ', $description, 2);\n            $variable = ltrim($variable, '$');\n            $description = ltrim($description);\n        }\n\n        if ($deprecation !== null) {\n            $deprecated[$tag] = $deprecated[$tag] ?? [];\n            $deprecated[$tag][] = [\n                'deprecation' => $deprecation,\n                'type' => $vars->type,\n                'variable' => $variable,\n                'description' => $description ?: '',\n            ];\n\n            continue;\n        }\n\n        if (\n            \\in_array($tag, ['property', 'property-read'], true) &&\n            preg_match('/^[a-z]{2,}(?<operator>In|Of)[A-Z][a-z]+$/', $vars->name, $match)\n        ) {\n            $unitOfUnit[$vars->name] = [\n                '@'.($match['operator'] === 'Of' ? 'property' : 'property-read'),\n                $vars->type,\n                '$'.$variable,\n                $description ?: '',\n            ];\n\n            continue;\n        }\n\n        $autoDocLines[] = [\n            '@'.$tag,\n            $vars->type,\n            '$'.$variable,\n            $description ?: '',\n        ];\n    }\n\n    if ($tag === 'property') {\n        $units = ['microseconds', 'milliseconds', 'seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'quarters', 'years', 'decades', 'centuries', 'millennia'];\n\n        foreach ($units as $small) {\n            array_shift($units);\n\n            foreach ($units as $big) {\n                $singularSmall = Carbon::singularUnit($small);\n                $singularBig = Carbon::singularUnit($big);\n                $name = $singularSmall.'Of'.ucfirst($singularBig);\n                $unitOfUnit[$name] ??= [\n                    '@property',\n                    'int',\n                    '$'.$name,\n                    'The value of the '.$singularSmall.' starting from the beginning of the current '.$singularBig,\n                ];\n            }\n        }\n\n        ksort($unitOfUnit);\n\n        array_push($autoDocLines, ...array_values($unitOfUnit));\n    }\n\n    if ($tag === 'property-read') {\n        $units = ['microseconds', 'milliseconds', 'seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'quarters', 'years', 'decades', 'centuries', 'millennia'];\n\n        foreach ($units as $small) {\n            array_shift($units);\n\n            foreach ($units as $big) {\n                $singularSmall = Carbon::singularUnit($small);\n                $singularBig = Carbon::singularUnit($big);\n                $name = $small.'In'.ucfirst($singularBig);\n                $unitOfUnit[$name] ??= [\n                    '@property-read',\n                    'int',\n                    '$'.$name,\n                    'The number of '.$small.' contained in the current '.$singularBig,\n                ];\n            }\n        }\n\n        ksort($unitOfUnit);\n\n        array_push($autoDocLines, ...array_values($unitOfUnit));\n    }\n}\n\n$units = ['microseconds', 'milliseconds', 'seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'quarters', 'years', 'decades', 'centuries', 'millennia'];\n$unitOfUnit = [\n    'dayOfYear' => false,\n    'weeksInYear' => false,\n];\n\nforeach ($units as $small) {\n    array_shift($units);\n\n    foreach ($units as $big) {\n        $singularSmall = Carbon::singularUnit($small);\n        $singularBig = Carbon::singularUnit($big);\n        $name = $singularSmall.'Of'.ucfirst($singularBig);\n        $unitOfUnit[$name] ??= [\n            '@method',\n            'int|static',\n            $name.'(?int $'.$singularSmall.' = null)',\n            'Return the value of the '.$singularSmall.' starting from the beginning of the current '.$singularBig.' when called with no parameters, change the current '.$singularSmall.' when called with an integer value',\n        ];\n        $name = $small.'In'.ucfirst($singularBig);\n        $unitOfUnit[$name] ??= [\n            '@method',\n            'int',\n            $name.'()',\n            'Return the number of '.$small.' contained in the current '.$singularBig,\n        ];\n    }\n}\n\nksort($unitOfUnit);\n\narray_push($autoDocLines, ...array_values(array_filter($unitOfUnit)));\n\n$propertyTemplate = '\n    /**\n     * %description%\n     *\n     * @var %type%\n     *\n     * @deprecated %line1%\n     *             %line2%\n     */\n    public $%variable%;\n';\n\n$lineGlue = preg_replace('/^[\\s\\S]*%line1%([\\s\\S]*)%line2%[\\s\\S]*$/', '$1', $propertyTemplate);\n$propertyTemplate = preg_replace('/(%line1%[\\s\\S]*%line2%)/', '%deprecation%', $propertyTemplate);\n\nfunction compileDoc($autoDocLines, $file)\n{\n    $class = 'CarbonInterface';\n\n    if (preg_match('`[\\\\\\\\/](Carbon\\w*)\\.php$`', $file, $match)) {\n        $class = $match[1];\n    }\n\n    $autoDoc = '';\n    $columnsMaxLengths = [];\n\n    foreach ($autoDocLines as &$editableLine) {\n        if (\\is_array($editableLine)) {\n            if (($editableLine[1] ?? '') === 'self') {\n                $editableLine[1] = $class === 'Carbon' ? '$this' : $class;\n            }\n\n            foreach ($editableLine as $column => $text) {\n                $length = \\strlen($text);\n                $max = $columnsMaxLengths[$column] ?? 0;\n\n                if ($length > $max) {\n                    $columnsMaxLengths[$column] = $length;\n                }\n            }\n        }\n    }\n\n    foreach ($autoDocLines as $line) {\n        $autoDoc .= \"\\n *\";\n        if (\\is_string($line)) {\n            if (!empty($line)) {\n                $autoDoc .= \" $line\";\n            }\n\n            continue;\n        }\n\n        $computedLine = ' ';\n        foreach ($line as $column => $text) {\n            $computedLine .= str_pad($text, $columnsMaxLengths[$column] + 1, ' ', STR_PAD_RIGHT);\n        }\n\n        $autoDoc .= rtrim($computedLine);\n    }\n\n    return $autoDoc;\n}\n\n$files = new stdClass();\n\nforeach ([$trait, $carbon, $immutable, $interface] as $file) {\n    $content = file_get_contents($file);\n    $files->$file = preg_replace_callback('/(<autodoc[\\s\\S]*>)([\\s\\S]+)(<\\/autodoc>)/mU', function ($matches) use ($file, $autoDocLines, $overrideTyping) {\n        foreach (($overrideTyping[$file] ?? []) as $method => $line) {\n            $line[1] = $method.'('.$line[1].')';\n            array_unshift($line, '@method');\n            $autoDocLines[] = $line;\n        }\n\n        $autoDoc = compileDoc($autoDocLines, $file);\n\n        return $matches[1].\"\\n *$autoDoc\\n *\\n * \".$matches[3];\n    }, $content, 1);\n}\n\n$staticMethods = [];\n$staticImmutableMethods = [];\n$methods = '';\n$carbonMethods = get_class_methods(Carbon::class);\nsort($carbonMethods);\n\nfunction getMethodReturnType(ReflectionMethod $method): string\n{\n    $type = $method->getReturnType();\n    $type = $type ? dumpType($type, false, $type->allowsNull()) : null;\n\n    return $type ? ': '.$type : '';\n}\n\nforeach ($carbonMethods as $method) {\n    if (!method_exists(CarbonImmutable::class, $method) ||\n        method_exists(DateTimeInterface::class, $method) ||\n        \\in_array($method, ['diff', 'createFromInterface'], true)\n    ) {\n        continue;\n    }\n\n    $function = new ReflectionMethod(Carbon::class, $method);\n    $static = $function->isStatic() ? ' static' : '';\n    $parameters = implode(', ', array_map(function (ReflectionParameter $parameter) use ($method) {\n        return dumpParameter($method, $parameter);\n    }, $function->getParameters()));\n    $methodDocBlock = $function->getDocComment() ?: '';\n\n    if (!str_starts_with($method, '__') && $function->isStatic()) {\n        $doc = preg_replace('/^\\/\\*+\\n([\\s\\S]+)\\s*\\*\\//', '$1', $methodDocBlock);\n        $doc = preg_replace('/^\\s*\\*\\s?/m', '', $doc);\n        $doc = explode(\"\\n@\", $doc, 2);\n        $doc = preg_split('/(\\r\\n|\\r|\\n)/', trim($doc[0]));\n        $returnType = $function->getReturnType();\n\n        if ($returnType instanceof ReflectionType) {\n            $returnType = dumpType($returnType, false, $returnType->allowsNull());\n        }\n\n        if (!$returnType && preg_match('/\\*\\s*@returns?\\s+(\\S+)/', $methodDocBlock, $match)) {\n            $returnType = $match[1];\n        }\n\n        $returnType = str_replace('static|CarbonInterface', 'static', $returnType ?: 'static');\n        if (!method_exists(Factory::class, $method)) {\n            $staticMethods[] = [\n                '@method',\n                str_replace(['self', 'static'], 'Carbon', $returnType),\n                \"$method($parameters)\",\n                $doc[0],\n            ];\n\n            for ($i = 1; $i < \\count($doc); $i++) {\n                $staticMethods[] = ['', '', '', $doc[$i]];\n            }\n        }\n\n        if (!method_exists(FactoryImmutable::class, $method)) {\n            $staticImmutableMethods[] = [\n                '@method',\n                str_replace(['self', 'static'], 'CarbonImmutable', $returnType),\n                \"$method($parameters)\",\n                $doc[0],\n            ];\n\n            for ($i = 1; $i < \\count($doc); $i++) {\n                $staticImmutableMethods[] = ['', '', '', $doc[$i]];\n            }\n        }\n    }\n\n    $return = getMethodReturnType($function);\n\n    if (!empty($methodDocBlock)) {\n        $methodDocBlock = \"\\n    $methodDocBlock\";\n    } elseif (isset($nativeMethods[$method])) {\n        $link = strtolower($method);\n        $methodDocBlock = \"\\n    /**\\n\".\n            \"     * Calls DateTime::$method if mutable or DateTimeImmutable::$method else.\\n\".\n            \"     *\\n\".\n            \"     * @see https://php.net/manual/en/datetime.$link.php\\n\".\n            '     */';\n    }\n\n    if (str_contains($return, 'self') && $phpLevel < 7.4) {\n        $return = '';\n    }\n\n    if ($method === '__toString' && $phpLevel < 8) {\n        $return = '';\n    }\n\n    if (method_exists($function, 'getAttributes') && ($attributes = $function->getAttributes())) {\n        foreach ($attributes as $attribute) {\n            $methodDocBlock .= \"\\n    #[\".$attribute->getName().']';\n        }\n    }\n\n    $methods .= \"\\n$methodDocBlock\\n    public$static function $method($parameters)$return;\";\n}\n\n$files->$interface = strtr(preg_replace_callback(\n    '/(\\/\\/ <methods[\\s\\S]*>)([\\s\\S]+)(<\\/methods>)/mU',\n    static fn ($matches) => \"{$matches[1]}$methods\\n\\n    // {$matches[3]}\",\n    $files->$interface,\n    1,\n), [\n    '|CarbonInterface' => '|self',\n    'CarbonInterface::TRANSLATE_ALL' => 'self::TRANSLATE_ALL',\n]);\n\n$factories = [\n    __DIR__.'/src/Carbon/Factory.php' => $staticMethods,\n    __DIR__.'/src/Carbon/FactoryImmutable.php' => $staticImmutableMethods,\n];\n\nforeach ($factories as $file => $methods) {\n    $autoDoc = compileDoc($methods, $file);\n    $content = file_get_contents($file);\n    $files->$file = preg_replace_callback(\n        '/(<autodoc[\\s\\S]*>)([\\s\\S]+)(<\\/autodoc>)/mU',\n        static fn ($matches) => \"{$matches[1]}\\n *$autoDoc\\n *\\n * {$matches[3]}\",\n        $content,\n        1,\n    );\n}\n\nforeach ($files as $file => $contents) {\n    file_put_contents($file, $contents);\n}\n"
        },
        {
          "name": "phpmd.xml",
          "type": "blob",
          "size": 2.3681640625,
          "content": "<?xml version=\"1.0\"?>\n<ruleset\n    name=\"Mess detection rules for Carbon\"\n    xmlns=\"http://pmd.sf.net/ruleset/1.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://pmd.sf.net/ruleset/1.0.0\n             http://pmd.sf.net/ruleset_xml_schema.xsd\"\n    xsi:noNamespaceSchemaLocation=\"http://pmd.sf.net/ruleset_xml_schema.xsd\"\n>\n    <description>\n        Mess detection rules for Carbon\n    </description>\n    <rule ref=\"rulesets/codesize.xml\">\n        <exclude name=\"CyclomaticComplexity\" />\n        <exclude name=\"NPathComplexity\" />\n        <exclude name=\"ExcessiveMethodLength\" />\n        <exclude name=\"ExcessiveClassLength\" />\n        <exclude name=\"ExcessivePublicCount\" />\n        <exclude name=\"TooManyMethods\" />\n        <exclude name=\"TooManyPublicMethods\" />\n        <exclude name=\"ExcessiveClassComplexity\" />\n    </rule>\n    <rule ref=\"rulesets/cleancode.xml\">\n        <exclude name=\"BooleanArgumentFlag\" />\n        <exclude name=\"StaticAccess\" />\n        <exclude name=\"IfStatementAssignment\" />\n        <exclude name=\"UndefinedVariable\" />\n        <exclude name=\"ErrorControlOperator\" />\n    </rule>\n    <rule ref=\"rulesets/controversial.xml\" />\n    <rule ref=\"rulesets/design.xml\">\n        <exclude name=\"EvalExpression\" />\n        <exclude name=\"CouplingBetweenObjects\" />\n        <exclude name=\"CountInLoopExpression\" />\n        <exclude name=\"DevelopmentCodeFragment\" />\n    </rule>\n    <rule ref=\"rulesets/design.xml/DevelopmentCodeFragment\">\n        <properties>\n            <property name=\"ignore-namespaces\" value=\"true\" />\n        </properties>\n    </rule>\n    <rule ref=\"rulesets/naming.xml\">\n        <exclude name=\"ShortVariable\" />\n        <exclude name=\"LongVariable\" />\n        <exclude name=\"ShortMethodName\" />\n    </rule>\n    <rule ref=\"rulesets/naming.xml/ShortVariable\">\n        <properties>\n            <property name=\"exceptions\" value=\"ci,id,to,tz\" />\n        </properties>\n    </rule>\n    <rule ref=\"rulesets/naming.xml/LongVariable\">\n        <properties>\n            <property name=\"subtract-suffixes\" value=\"Enabled,Function,Factory,Timezone,FloorEnd,DiffOptions,FromTestNow\" />\n        </properties>\n    </rule>\n    <rule ref=\"rulesets/naming.xml/ShortMethodName\">\n        <properties>\n            <property name=\"exceptions\" value=\"eq,gt,is,lt,ne,to,tz\" />\n        </properties>\n    </rule>\n    <rule ref=\"rulesets/unusedcode.xml\" />\n</ruleset>\n"
        },
        {
          "name": "phpstan.neon",
          "type": "blob",
          "size": 6.7265625,
          "content": "parameters:\n    scanFiles:\n        - lazy/Carbon/MessageFormatter/MessageFormatterMapperStrongType.php\n        - lazy/Carbon/TranslatorStrongType.php\n        - lazy/Carbon/UnprotectedDatePeriod.php\n        - tests/Fixtures/DateMalformedIntervalStringException.php\n        - tests/Fixtures/DateMalformedStringException.php\n        - vendor/autoload.php\n    level: 3\n    paths:\n        - src\n        - tests\n    parallel:\n        processTimeout: 300.0\n    ignoreErrors:\n        - '#^Call to static method get\\(\\) on an unknown class Symfony\\\\Component\\\\Translation\\\\PluralizationRules\\.$#'\n        - '#^Call to an undefined static method#'\n        - '#^Call to an undefined method Carbon\\\\Carbon(Immutable)?::floatDiffIn([A-Za-z]+)\\(\\)\\.$#'\n        - '#^Call to an undefined method Carbon\\\\Carbon(Immutable)?::(diffInBusinessDays|diffInReal([A-Za-z]+))\\(\\)\\.$#'\n        - '#^Call to an undefined method Carbon\\\\Carbon(Immutable)?::(add|sub)Real([A-Za-z]+)\\(\\)\\.$#'\n        - '#^Unsafe usage of new static\\(\\)\\.$#'\n        - '#^Method Carbon\\\\Carbon(Interface|Immutable)?::(add|sub)[A-Z][A-Za-z]+\\(\\) invoked with 1 parameter, 0 required\\.$#'\n        - '#^Call to an undefined method Carbon\\\\Carbon(Interface|Immutable)?::(super|noThis|toAppTz|copyWithAppTz)\\(\\)\\.$#'\n        - '#^Call to an undefined method Carbon\\\\CarbonInterval::(multiply|andAgain|copyAndAgain)\\(\\)\\.$#'\n        - '#^Call to an undefined method Carbon\\\\CarbonPeriod::(oneMoreDay|copyOneMoreDay|endNextDay)\\(\\)\\.$#'\n        - '#should return (\\S*)(static|\\$this)\\(Carbon\\\\Carbon\\)(\\|null)? but returns Carbon\\\\Carbon(Interface)?(\\|null)?\\.$#'\n        - '#should return (\\S*)(static|\\$this)\\(Carbon\\\\CarbonImmutable\\)(\\|null)? but returns Carbon\\\\Carbon(Immutable|Interface)(\\|null)?\\.$#'\n        - '#should return (\\S*)\\$this\\(Carbon\\\\CarbonInterval\\)(\\|null)? but returns static\\(Carbon\\\\CarbonInterval\\)(\\|null)?\\.$#'\n        - '#should return (\\S*)static\\(Carbon\\\\CarbonInterval\\)(\\|null)? but returns Carbon\\\\CarbonInterval(\\|null)?\\.$#'\n        - '#^Call to an undefined method DateInterval::(spec|optimize)\\(\\)\\.$#'\n        - '#^Property Carbon\\\\Carbon::\\$timezone \\(Carbon\\\\CarbonTimeZone\\) does not accept string\\.$#'\n        - '#^Method class@anonymous/tests/Carbon/TestingAidsTest\\.php:\\d+::modify\\(\\) should return class@anonymous/tests/Carbon/TestingAidsTest\\.php:\\d+ but returns \\(?DateTimeImmutable#'\n        -\n            message: '#^Undefined variable: \\$this$#'\n            paths:\n                - src/Carbon/Traits/Mixin.php\n        -\n            message: '#^Variable \\$this in isset\\(\\) is never defined\\.$#'\n            paths:\n                - src/Carbon/Traits/Mixin.php\n        -\n            message: '#^Call to an undefined method Carbon\\\\Carbon::[a-zA-Z]+Of[a-zA-Z]+\\(\\)\\.$#'\n            paths:\n                - tests/Carbon/SettersTest.php\n        -\n            message: \"#^Property Carbon\\\\\\\\Carbon\\\\:\\\\:\\\\$month \\\\(int\\\\) does not accept Carbon\\\\\\\\Month\\\\:\\\\:February\\\\.$#\"\n            paths:\n                - tests/Carbon/SettersTest.php\n        -\n            message: '#^Access to an undefined property Carbon\\\\CarbonImmutable::\\$[a-zA-Z]+\\.$#'\n            paths:\n                - tests/CarbonImmutable/GettersTest.php\n        -\n            message: '#^Call to an undefined method Carbon\\\\CarbonImmutable::[a-zA-Z]+Of[a-zA-Z]+\\(\\)\\.$#'\n            paths:\n                - tests/CarbonImmutable/GettersTest.php\n        -\n            message: '#^Access to an undefined property Carbon\\\\CarbonInterval::\\$tz_?[Nn]ame\\.$#'\n            paths:\n                - tests/CarbonInterval/GettersTest.php\n                - tests/CarbonInterval/SettersTest.php\n        -\n            message: '#^Access to an undefined property Carbon\\\\CarbonPeriod::\\$(include)?(Start|End)Date\\.$#'\n            paths:\n                - tests/CarbonPeriod/GettersTest.php\n        -\n            message: '#^Access to protected property Carbon\\\\CarbonPeriod::\\$endDate\\.$#'\n            paths:\n                - tests/CarbonPeriod/GettersTest.php\n        -\n            message: '#^Cannot access property \\$locale on Carbon\\\\CarbonPeriod\\|string\\.$#'\n            paths:\n                - tests/CarbonPeriod/GettersTest.php\n        -\n            message: '#^Access to protected property Carbon\\\\CarbonPeriod::\\$startDate\\.$#'\n            paths:\n                - tests/CarbonPeriod/GettersTest.php\n        -\n            message: '#^Access to an undefined property Carbon\\\\CarbonPeriod::\\$locale\\.$#'\n            paths:\n                - tests/CarbonPeriod/GettersTest.php\n        -\n            message: '#^Parameter \\$foo of anonymous function has invalid type Tests\\\\Factory\\\\FooBar\\.#'\n            paths:\n                - tests/Factory/CallbackTest.php\n        -\n            message: '#^Call to an undefined method Tests\\\\Carbon(Immutable)?\\\\MacroTest::diffInYears\\(\\)\\.#'\n            paths:\n                - tests/Carbon/MacroTest.php\n                - tests/CarbonImmutable/MacroTest.php\n        -\n            message: '#^Call to an undefined method SubCarbon(Immutable)?::diffInDecades\\(\\)\\.#'\n            paths:\n                - tests/Carbon/MacroTest.php\n                - tests/CarbonImmutable/MacroTest.php\n        -\n            message: '#^Call to an undefined method Doctrine\\\\DBAL\\\\Types\\\\Type::requiresSQLCommentHint\\(\\)\\.#'\n            paths:\n                - tests/Doctrine/CarbonTypesTest.php\n        -\n            message: '#^Instantiated class Doctrine\\\\DBAL\\\\Platforms\\\\MySQL57Platform not found\\.#'\n            paths:\n                - tests/Doctrine/CarbonTypesTest.php\n        -\n            message: '#^Call to an undefined method Symfony\\\\Contracts\\\\Translation\\\\TranslatorInterface::getMessages\\(\\)\\.#'\n            paths:\n                - tests/CarbonInterval/ConstructTest.php\n        -\n            message: '#^Access to protected property Carbon\\\\CarbonPeriod::\\$dateInterval\\.#'\n            paths:\n                - tests/CarbonPeriod/CreateTest.php\n    excludePaths:\n        - '*/src/Carbon/CarbonPeriod.php'\n        - '*/src/Carbon/Laravel/ServiceProvider.php'\n        - '*/src/Carbon/TranslatorWeakType.php'\n        - '*/src/Carbon/PHPStan/*'\n        - '*/tests/Carbon/Fixtures/DumpCarbon.php'\n        - '*/tests/Carbon/LocalizationTest.php'\n        - '*/tests/Carbon/SerializationTest.php'\n        - '*/tests/Carbon/LastErrorTest.php'\n        - '*/tests/CarbonImmutable/LocalizationTest.php'\n        - '*/tests/CarbonImmutable/SetStateTest.php'\n        - '*/tests/CarbonImmutable/SerializationTest.php'\n        - '*/tests/CarbonImmutable/LastErrorTest.php'\n        - '*/tests/Laravel/*.php'\n        - '*/tests/Cli/*.php'\n        - '*/tests/Carbon/Fixtures/NoLocaleTranslator.php'\n        - '*/tests/CarbonPeriod/Fixtures/filters.php'\n        - '*/tests/Fixtures/dynamicInterval.php'\n        - '*/tests/PHPStan/*.php'\n        - '*/tests/PHPUnit/AssertObjectHasPropertyPolyfillTrait.php'\n"
        },
        {
          "name": "phpunit.xml.dist",
          "type": "blob",
          "size": 2.0380859375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/10.2/phpunit.xsd\"\n  bootstrap=\"tests/bootstrap.php\"\n  colors=\"true\"\n  cacheDirectory=\".phpunit.cache\"\n>\n  <coverage/>\n  <testsuites>\n    <testsuite name=\"carbon\">\n      <directory>tests/Carbon</directory>\n      <directory>tests/CommonTraits</directory>\n    </testsuite>\n    <testsuite name=\"immutable\">\n      <directory>tests/CarbonImmutable</directory>\n    </testsuite>\n    <testsuite name=\"interval\">\n      <directory>tests/CarbonInterval</directory>\n    </testsuite>\n    <testsuite name=\"period\">\n      <directory>tests/CarbonPeriod</directory>\n    </testsuite>\n    <testsuite name=\"timezone\">\n      <directory>tests/CarbonTimeZone</directory>\n    </testsuite>\n    <testsuite name=\"localization\">\n      <directory>tests/Localization</directory>\n    </testsuite>\n    <testsuite name=\"laravel\">\n      <directory>tests/Laravel</directory>\n    </testsuite>\n    <testsuite name=\"doctrine\">\n      <directory>tests/Doctrine</directory>\n    </testsuite>\n    <testsuite name=\"factory\">\n      <directory>tests/Factory</directory>\n    </testsuite>\n    <testsuite name=\"language\">\n      <directory>tests/Language</directory>\n    </testsuite>\n    <testsuite name=\"jenssegers\">\n      <directory>tests/Jenssegers</directory>\n    </testsuite>\n    <testsuite name=\"cli\">\n      <directory>tests/Cli</directory>\n    </testsuite>\n    <testsuite name=\"phpstan\">\n      <directory>tests/PHPStan</directory>\n    </testsuite>\n      <testsuite name=\"unit\">\n          <directory>tests/Unit</directory>\n      </testsuite>\n  </testsuites>\n  <php>\n    <ini name=\"max_execution_time\" value=\"0\"/>\n  </php>\n  <source>\n    <include>\n      <directory suffix=\".php\">src/Carbon</directory>\n    </include>\n    <exclude>\n      <file>src/Carbon/PHPStan/Macro.php</file>\n      <file>src/Carbon/Translator.php</file>\n      <file>src/Carbon/TranslatorStrongType.php</file>\n      <file>src/Carbon/TranslatorWeakType.php</file>\n    </exclude>\n  </source>\n</phpunit>\n"
        },
        {
          "name": "psalm.xml",
          "type": "blob",
          "size": 0.701171875,
          "content": "<?xml version=\"1.0\"?>\n<psalm\n    errorLevel=\"5\"\n    resolveFromConfigFile=\"true\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"https://getpsalm.org/schema/config\"\n    xsi:schemaLocation=\"https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd\"\n    findUnusedBaselineEntry=\"true\"\n    findUnusedCode=\"true\"\n>\n    <projectFiles>\n        <directory name=\"src\" />\n        <file name=\"lazy/Carbon/UnprotectedDatePeriod.php\" />\n        <file name=\"lazy/Carbon/TranslatorStrongType.php\" />\n        <file name=\"lazy/Carbon/MessageFormatter/MessageFormatterMapperStrongType.php\" />\n        <ignoreFiles>\n            <directory name=\"vendor\" />\n        </ignoreFiles>\n    </projectFiles>\n</psalm>\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 18.8427734375,
          "content": "# Carbon\n\n[![Latest Stable Version](https://img.shields.io/packagist/v/nesbot/carbon.svg?style=flat-square)](https://packagist.org/packages/nesbot/carbon)\n[![Total Downloads](https://img.shields.io/packagist/dt/nesbot/carbon.svg?style=flat-square)](https://packagist.org/packages/nesbot/carbon)\n[![GitHub Actions](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fbriannesbitt%2FCarbon%2Fbadge&style=flat-square&label=Build&logo=none)](https://github.com/CarbonPHP/carbon/actions)\n[![codecov.io](https://img.shields.io/codecov/c/github/briannesbitt/Carbon.svg?style=flat-square)](https://codecov.io/github/CarbonPHP/carbon/actions?branch=master)\n\nAn international PHP extension for DateTime. [https://carbon.nesbot.com](https://carbon.nesbot.com)\n\n> [!NOTE]  \n> We're migrating the repository from [briannesbitt/Carbon](https://github.com/briannesbitt/Carbon) to [CarbonPHP/carbon](https://github.com/CarbonPHP/carbon),\n> which means if you're looking specific issues/pull-requests, you may have to search both. No other impact as code on both will be kept up to date. \n\n```php\n<?php\n\nuse Carbon\\Carbon;\n\nprintf(\"Right now is %s\", Carbon::now()->toDateTimeString());\nprintf(\"Right now in Vancouver is %s\", Carbon::now('America/Vancouver'));  //implicit __toString()\n$tomorrow = Carbon::now()->addDay();\n$lastWeek = Carbon::now()->subWeek();\n\n$officialDate = Carbon::now()->toRfc2822String();\n\n$howOldAmI = Carbon::createFromDate(1975, 5, 21)->age;\n\n$noonTodayLondonTime = Carbon::createFromTime(12, 0, 0, 'Europe/London');\n\n$internetWillBlowUpOn = Carbon::create(2038, 01, 19, 3, 14, 7, 'GMT');\n\n// Don't really want this to happen so mock now\nCarbon::setTestNow(Carbon::createFromDate(2000, 1, 1));\n\n// comparisons are always done in UTC\nif (Carbon::now()->gte($internetWillBlowUpOn)) {\n    die();\n}\n\n// Phew! Return to normal behaviour\nCarbon::setTestNow();\n\nif (Carbon::now()->isWeekend()) {\n    echo 'Party!';\n}\n// Over 200 languages (and over 500 regional variants) supported:\necho Carbon::now()->subMinutes(2)->diffForHumans(); // '2 minutes ago'\necho Carbon::now()->subMinutes(2)->locale('zh_CN')->diffForHumans(); // '2分钟前'\necho Carbon::parse('2019-07-23 14:51')->isoFormat('LLLL'); // 'Tuesday, July 23, 2019 2:51 PM'\necho Carbon::parse('2019-07-23 14:51')->locale('fr_FR')->isoFormat('LLLL'); // 'mardi 23 juillet 2019 14:51'\n\n// ... but also does 'from now', 'after' and 'before'\n// rolling up to seconds, minutes, hours, days, months, years\n\n$daysSinceEpoch = Carbon::createFromTimestamp(0)->diffInDays(); // something such as:\n                                                                // 19817.6771\n$daysUntilInternetBlowUp = $internetWillBlowUpOn->diffInDays(); // Negative value since it's in the future:\n                                                                // -5037.4560\n\n// Without parameter, difference is calculated from now, but doing $a->diff($b)\n// it will count time from $a to $b.\nCarbon::createFromTimestamp(0)->diffInDays($internetWillBlowUpOn); // 24855.1348\n```\n\n## Installation\n\n### With Composer\n\n```\n$ composer require nesbot/carbon\n```\n\n```json\n{\n    \"require\": {\n        \"nesbot/carbon\": \"^3\"\n    }\n}\n```\n\n```php\n<?php\nrequire 'vendor/autoload.php';\n\nuse Carbon\\Carbon;\n\nprintf(\"Now: %s\", Carbon::now());\n```\n\n### Without Composer\n\nWhy are you not using [composer](https://getcomposer.org/)? Download the Carbon [latest release](https://github.com/briannesbitt/Carbon/releases) and put the contents of the ZIP archive into a directory in your project. Then require the file `autoload.php` to get all classes and dependencies loaded on need.\n\n```php\n<?php\nrequire 'path-to-Carbon-directory/autoload.php';\n\nuse Carbon\\Carbon;\n\nprintf(\"Now: %s\", Carbon::now());\n```\n\n## Documentation\n\n[https://carbon.nesbot.com/docs](https://carbon.nesbot.com/docs)\n\n## Security contact information\n\nTo report a security vulnerability, please use the\n[Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure.\n\n## Credits\n\n### Contributors\n\nThis project exists thanks to all the people who contribute. \n\n<a href=\"https://github.com/briannesbitt/Carbon/graphs/contributors\" target=\"_blank\"><img src=\"https://opencollective.com/Carbon/contributors.svg?width=890&button=false\" /></a>\n\n### Translators\n\n[Thanks to people helping us to translate Carbon in so many languages](https://carbon.nesbot.com/contribute/translators/)\n\n### Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website.\n\n<!-- <open-collective-sponsors> -->\n<a title=\"Онлайн казино 777 Україна\" href=\"https://777.ua/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Онлайн казино 777\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/7e572d50-1ce8-4d69-ae12-86cc80371373/ok-ua-777.png\" width=\"96\" height=\"96\"></a>\n<a title=\"Best non Gamstop sites in the UK\" href=\"https://uk.nongamstopcasinos.net/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Best non Gamstop sites in the UK\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/34e340b8-e1de-4932-8a76-1b3ce2ec7ee8/logo_white%20bg%20(8).png\" width=\"96\" height=\"96\"></a>\n<a title=\"Real Money Pokies\" href=\"https://nzcasino.creativefreedom.org.nz/real-money-pokies/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Real Money Pokies\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/cc24968d-70ae-463e-83e6-28b253145563/Creative_Freedom_dark_bg_logo.jpg\" width=\"96\" height=\"96\"></a>\n<a title=\"Non GamStop Bookies UK\" href=\"https://gb.nongamstopbookiesuk.com/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Non GamStop Bookies UK\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/43c5561c-8907-4ef7-a4ee-c6da054788b8/logo-site%20(3).jpg\" width=\"96\" height=\"96\"></a>\n<a title=\"#1 Guide To Online Gambling In Canada\" href=\"https://casinohex.org/canada/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"CasinoHex Canada\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/79fdbcc0-a997-11eb-abbc-25e48b63c6dc.jpg\" width=\"127.5\" height=\"96\"></a>\n<a title=\"Trusted last mile route planning and route optimization\" href=\"https://route4me.com/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Route4Me Route Planner\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/237386c3-48a2-47c6-97ac-5f888cdb4cda/Route4MeIconLogo.png\" width=\"96\" height=\"96\"></a>\n<a title=\"Onlinecasinosgr.com\" href=\"https://onlinecasinosgr.com/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Onlinecasinosgr.com\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/a9b971ee-db5f-4400-8c4b-76cf9bc35015/IMAGE%202024-06-14%2013%3A54%3A14.jpg\" width=\"96\" height=\"96\"></a>\n<a title=\"Онлайн казино та БК (ставки на спорт) в Україні\" href=\"https://betking.com.ua/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Betking\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/08587758-582c-4136-aba5-2519230960d3/betking.jpg\" width=\"96\" height=\"96\"></a>\n<a title=\"Ставки на спорт, БК в Україні\" href=\"https://betking.com.ua/sports-book/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Букмекер\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/065e61d2-f890-42db-b06c-8d40b39b2f0e/bk.jpg\" width=\"96\" height=\"96\"></a>\n<a title=\"Znajdź najlepsze zakłady bukmacherskie w Polsce w 2023 roku. Probukmacher.pl to Twoje kompendium wiedzy na temat bukmacherów!\" href=\"https://www.probukmacher.pl?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Probukmacher\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/caf50271-4560-4ffe-a434-ea15239168db/Screenshot_1.png\" width=\"133.5\" height=\"96\"></a>\n<a title=\"inkedin\" href=\"https://inkedin.com?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"inkedin\" src=\"https://logo.clearbit.com/inkedin.com\" width=\"64\" height=\"64\"></a>\n<a title=\"Актуальний та повносправний рейтинг онлайн казино України, ґрунтований на відгуках реальних гравців.\" href=\"https://uk.onlinecasino.in.ua/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Онлайн казино України\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/c0b4b090-eef8-11ec-9cb7-0527a205b226.png\" width=\"64\" height=\"64\"></a>\n<a title=\"OnlineCasinosSpelen\" href=\"https://onlinecasinosspelen.com?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"OnlineCasinosSpelen\" src=\"https://logo.clearbit.com/onlinecasinosspelen.com\" width=\"64\" height=\"64\"></a>\n<a title=\"Betwinner is an online bookmaker offering sports betting, casino games, and more.\" href=\"https://guidebook.betwinner.com/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Guidebook.BetWinner\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/82cab29a-7002-4924-83bf-2eecb03d07c4/0x0.png\" width=\"64\" height=\"64\"></a>\n<a title=\"Онлайн казино casino.ua\" href=\"https://casino.ua/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Онлайн казино casino.ua\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/32790ee6-245b-45bd-acf7-7a661fe2cf9f/logo.png\" width=\"64\" height=\"64\"></a>\n<a title=\"Every day we analyze dozens of casino operators, and find the best brands that accept payID\" href=\"https://payid-gambler.net/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"PayIDGambler\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/6277fad5-3cbd-4b48-be24-71c7c8019e1e/images.png\" width=\"64\" height=\"64\"></a>\n<a title=\"Нове ліцензоване українське онлайн казино\" href=\"https://vegas.ua?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Vegas\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/ba860b32-4f30-4194-9766-a62524337ea0/vegas.jpg\" width=\"64\" height=\"64\"></a>\n<a title=\"WildWinz online casino\" href=\"https://wildwinz.com?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"WildWinz\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/ccfcee7c-775c-4d43-ba23-3f0d2969497b/wildwinz.jpg\" width=\"64\" height=\"64\"></a>\n<a title=\"Casino-portugal.pt\" href=\"https://casino-portugal.pt/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Casino-portugal.pt\" src=\"https://logo.clearbit.com/casino-portugal.pt\" width=\"64\" height=\"64\"></a>\n<a title=\"Актуальний топ-рейтинг українських онлайн казино на гривні! Щоденне оновлення топу та унікальна система ранжування, основана на відгуках гравців!\" href=\"https://onlinecasino.in.ua/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Онлайн Казино Украины\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/8fdd8aa0-e273-11ec-a95e-d38fd331cabf.png\" width=\"64\" height=\"64\"></a>\n<a title=\"Entertainment\" href=\"https://www.nongamstopbets.com/casinos-not-on-gamstop/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Non-GamStop Bets UK\" src=\"https://logo.clearbit.com/nongamstopbets.com\" width=\"64\" height=\"64\"></a>\n<a title=\"Pin-Up\" href=\"https://www.c19.cl/resenas/casino-pin-up/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Pin-Up\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/ec92c1a5-f516-4886-aa8b-f96456512e2b/c19-casinos.png\" width=\"64\" height=\"64\"></a>\n<a title=\"Get professional support for Carbon\" href=\"https://tidelift.com/subscription/pkg/packagist-nesbot-carbon?utm_source=packagist-nesbot-carbon&amp;utm_medium=referral&amp;utm_campaign=docs\" target=\"_blank\"><img alt=\"Tidelift\" src=\"https://carbon.nesbot.com/docs/sponsors/tidelift-brand.png\" width=\"84\" height=\"42\"></a>\n<a title=\"Slots City® ➢ Лучшее лицензионно казино онлайн и оффлайн на гривны в Украине. 【 Более1500 игровых автоматов и слотов】✅ Официально и Безопасно\" href=\"https://slotscity.ua/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Slots City\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/d7e298c0-7abe-11ed-8553-230872f5e54d.png\" width=\"59\" height=\"42\"></a>\n<a title=\"casinorevisor.com\" href=\"https://casinorevisor.com/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"casinorevisor.com\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/a69e1789-9f2f-4b24-8b85-c1d4fcecde2f/200x200_white_bg%201.png\" width=\"42\" height=\"42\"></a>\n<a title=\"ігрові автомати беткінг\" href=\"https://betking.com.ua/games/all-slots/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Ігрові автомати\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/94601d07-3205-4c60-9c2d-9b8194dbefb7/skg-blue.png\" width=\"42\" height=\"42\"></a>\n<a title=\"Francisca\" href=\"https://opencollective.com/guest-5c52282f?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Francisca\" src=\"https://images.opencollective.com/guest-5c52282f/avatar/256.png\" width=\"42\" height=\"42\"></a>\n<a title=\"Porównanie kasyn online w Polsce. Darmowe automaty online.\" href=\"https://onlinekasyno-polis.pl/\" target=\"_blank\"><img alt=\"Online Kasyno Polis\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/12fe53d4-b2e4-4601-b9ea-7b652c414a38/274px%20274px-2.png\" width=\"42\" height=\"42\"></a>\n<a title=\"O‘zbekistondagi eng yaxshi onlayn kazinolarni topishni istaysizmi? Biz sizga ishonchli va xavfsiz qimor platformalarini taqdim etamiz\" href=\"https://winstar.life/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Onlayn Kazino\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/6275b2c0-18fe-4da8-9339-ab612481971e/flag-round-250.png\" width=\"42\" height=\"42\"></a>\n<a title=\"Slotozilla website\" href=\"https://www.slotozilla.com/nz/free-spins\" target=\"_blank\"><img alt=\"Slotozilla\" src=\"https://carbon.nesbot.com/docs/sponsors/slotozilla.png\" width=\"42\" height=\"42\"></a>\n<a title=\"Fortune Tiger\" href=\"https://fortune-tiger-br.com/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Fortune Tiger\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/88904f4a-f997-49e8-8fd4-5068acc85a98/fortune-tiger-slot-281-img-2.webp\" width=\"42\" height=\"42\"></a>\n<a title=\"Per tutte le ultime notizie sul gioco d&#039;azzardo Non AAMS, le recensioni e i bonus di iscrizione.\" href=\"https://casinononaams.online?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"casino non aams\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/c60b92d1-590c-48a5-9527-fb0909431a86/casino%20non%20aams%20icon.jpg\" width=\"42\" height=\"42\"></a>\n<a title=\"Credit Zaim\" href=\"https://creditzaim.com.ua/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Credit Zaim\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/a856ed4e-651d-47c9-aa7a-98059423b3a6/creditzaim_logo.png\" width=\"42\" height=\"42\"></a>\n<a title=\"Our expert team of consultants provides the support and guidance you need to claim the R&amp;D tax credits.\" href=\"https://rdtaxcredits.uk?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"R&amp;D Tax Credits UK\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/37df1ec2-aa54-4900-b194-f0951e94dfdb/r%26dtax%20credits%20uk%20-%20sq.png\" width=\"42\" height=\"42\"></a>\n<a title=\"Fehlermeldungen und Lösungen\" href=\"https://www.fehlerpro.de/?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"FehlerPRO\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/8d0c038e-8bf3-4269-a375-5b0ce7ed6adb/111.png\" width=\"42\" height=\"42\"></a>\n<a title=\"At Tokmax, we are dedicated to being the leading platform for enhancing TikTok engagement. Whether you&#039;re an emerging creator or an established influe\" href=\"https://tokmax.com?utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon\" target=\"_blank\"><img alt=\"Tokmax\" src=\"https://opencollective-production.s3.us-west-1.amazonaws.com/account-avatar/e599b6c9-f803-4672-8953-de41af36a30a/Final-10.webp\" width=\"42\" height=\"42\"></a><!-- </open-collective-sponsors> -->\n\n[[See all](https://carbon.nesbot.com/#sponsors)]\n[[Become a sponsor via OpenCollective](https://opencollective.com/Carbon#sponsor)]\n\n<a href=\"https://github.com/ssddanbrown\" target=\"_blank\"><img src=\"https://avatars.githubusercontent.com/u/8343178?s=128&v=4\" width=\"42\" height=\"42\"></a>\n\n[[Become a sponsor via GitHub](https://github.com/sponsors/kylekatarnls)]\n\n### Backers\n\nThank you to all our backers! 🙏\n\n<a href=\"https://opencollective.com/Carbon#backers\" target=\"_blank\"><img src=\"https://opencollective.com/Carbon/backers.svg?width=890&version=2023-06-08-07-12\"></a>\n\n[[Become a backer](https://opencollective.com/Carbon#backer)]\n\n## Carbon for enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of ``Carbon`` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/packagist-nesbot-carbon?utm_source=packagist-nesbot-carbon&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n"
        },
        {
          "name": "sponsors.php",
          "type": "blob",
          "size": 8.005859375,
          "content": "<?php\n\n/**\n * This file is part of the Carbon package.\n *\n * (c) Brian Nesbitt <brian@nesbot.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nuse Carbon\\CarbonImmutable;\n\nrequire_once __DIR__.'/vendor/autoload.php';\n\nfunction getMaxHistoryMonthsByAmount($amount): int\n{\n    if ($amount >= 50) {\n        return 6;\n    }\n\n    if ($amount >= 20) {\n        return 4;\n    }\n\n    return 2;\n}\n\nfunction getHtmlAttribute($rawValue): string\n{\n    return str_replace(\n        ['​', \"\\r\"],\n        '',\n        trim(htmlspecialchars((string) $rawValue), \"  \\n\\r\\t\\v\\0\"),\n    );\n}\n\nfunction getOpenCollectiveSponsors(): string\n{\n    $customSponsorImages = [\n        // For consistency and equity among sponsors, as of now, we kindly ask our sponsors\n        // to provide an image having a width/height ratio between 1/1 and 2/1.\n        // By default, we'll show the member picture from OpenCollective, and will resize it if bigger\n        // int(OpenCollective.MemberId) => ImageURL\n    ];\n\n    $members = json_decode(file_get_contents('https://opencollective.com/carbon/members/all.json'), true);\n    // Adding sponsors paying via other payment methods\n    $members[] = [\n        'MemberId' => 1,\n        'createdAt' => '2019-01-01 02:00',\n        'type' => 'ORGANIZATION',\n        'role' => 'BACKER',\n        'tier' => 'backer+',\n        'isActive' => true,\n        'totalAmountDonated' => 1000,\n        'currency' => 'USD',\n        'lastTransactionAt' => CarbonImmutable::now()->format('Y-m-d').' 02:00',\n        'lastTransactionAmount' => 25,\n        'profile' => 'https://tidelift.com/',\n        'name' => 'Tidelift',\n        'description' => 'Get professional support for Carbon',\n        'image' => 'https://carbon.nesbot.com/docs/sponsors/tidelift-brand.png',\n        'website' => 'https://tidelift.com/subscription/pkg/packagist-nesbot-carbon?utm_source=packagist-nesbot-carbon&utm_medium=referral&utm_campaign=docs',\n    ];\n    $members[] = [\n        'MemberId' => 2,\n        'createdAt' => '2024-11-14 02:00',\n        'type' => 'ORGANIZATION',\n        'role' => 'BACKER',\n        'tier' => 'backer+ yearly',\n        'isActive' => true,\n        'totalAmountDonated' => 170,\n        'currency' => 'USD',\n        'lastTransactionAt' => '2024-11-14 02:00',\n        'lastTransactionAmount' => 170,\n        'profile' => 'https://www.slotozilla.com/nz/free-spins',\n        'name' => 'Slotozilla',\n        'description' => 'Slotozilla website',\n        'image' => 'https://carbon.nesbot.com/docs/sponsors/slotozilla.png',\n        'website' => 'https://www.slotozilla.com/nz/free-spins',\n    ];\n\n    $list = array_filter($members, static fn (array $member): bool => $member['totalAmountDonated'] > 3 && $member['role'] !== 'HOST' && (\n        $member['totalAmountDonated'] > 100 ||\n        $member['lastTransactionAt'] > CarbonImmutable::now()\n            ->subMonthsNoOverflow(getMaxHistoryMonthsByAmount($member['lastTransactionAmount']))\n            ->format('Y-m-d h:i') ||\n        $member['isActive'] && $member['lastTransactionAmount'] >= 30\n    ));\n\n    $list = array_map(static function (array $member): array {\n        $createdAt = CarbonImmutable::parse($member['createdAt']);\n        $lastTransactionAt = CarbonImmutable::parse($member['lastTransactionAt']);\n\n        if ($createdAt->format('d H:i:s.u') > $lastTransactionAt->format('d H:i:s.u')) {\n            $createdAt = $createdAt\n                ->setDay($lastTransactionAt->day)\n                ->modify($lastTransactionAt->format('H:i:s.u'));\n        }\n\n        $isYearly = str_contains(strtolower($member['tier'] ?? ''), 'yearly');\n        $monthlyContribution = (float) (\n            ($isYearly && $lastTransactionAt > CarbonImmutable::parse('-1 year'))\n                ? ($member['lastTransactionAmount'] / 11.2) // 11.2 instead of 12 to include the discount for yearly subscription\n                : ($member['totalAmountDonated'] / ceil($createdAt->floatDiffInMonths()))\n        );\n\n        if (!$isYearly) {\n            if (\n                $lastTransactionAt->isAfter('last month') &&\n                $member['lastTransactionAmount'] > $monthlyContribution\n            ) {\n                $monthlyContribution = (float) $member['lastTransactionAmount'];\n            }\n\n            if ($lastTransactionAt->isBefore('-75 days')) {\n                $days = min(120, $lastTransactionAt->diffInDays('now') - 70);\n                $monthlyContribution *= 1 - $days / 240;\n            }\n        }\n\n        $yearlyContribution = (float) (\n            $isYearly\n                ? (12 * $monthlyContribution)\n                : ($member['totalAmountDonated'] / max(1, $createdAt->floatDiffInYears()))\n        );\n        $status = null;\n        $rank = 0;\n\n        if ($monthlyContribution > 29 || $yearlyContribution > 700) {\n            $status = 'sponsor';\n            $rank = 4;\n        } elseif ($monthlyContribution > 14.5 || $yearlyContribution > 500) {\n            $status = 'backerPlus';\n            $rank = 3;\n        } elseif ($monthlyContribution > 4.5 || $yearlyContribution > 80) {\n            $status = 'backer';\n            $rank = 2;\n        } elseif ($member['totalAmountDonated'] > 0) {\n            $status = 'helper';\n            $rank = 1;\n        }\n\n        return array_merge($member, [\n            'star' => ($monthlyContribution > 98 || $yearlyContribution > 800),\n            'status' => $status,\n            'rank' => $rank,\n            'monthlyContribution' => $monthlyContribution,\n            'yearlyContribution' => $yearlyContribution,\n        ]);\n    }, $list);\n\n    usort($list, static function (array $a, array $b): int {\n        return ($b['star'] <=> $a['star'])\n            ?: ($b['rank'] <=> $a['rank'])\n            ?: ($b['monthlyContribution'] <=> $a['monthlyContribution'])\n            ?: ($b['totalAmountDonated'] <=> $a['totalAmountDonated']);\n    });\n\n    $membersByUrl = [];\n    $output = '';\n\n    foreach ($list as $member) {\n        $url = $member['website'] ?? $member['profile'];\n\n        if (isset($membersByUrl[$url]) || !\\in_array($member['status'], ['sponsor', 'backerPlus'], true)) {\n            continue;\n        }\n\n        $membersByUrl[$url] = $member;\n        $href = htmlspecialchars($url);\n        $src = $customSponsorImages[$member['MemberId'] ?? ''] ?? $member['image'] ?? (strtr($member['profile'], ['https://opencollective.com/' => 'https://images.opencollective.com/']).'/avatar/256.png');\n        [$x, $y] = @getimagesize($src) ?: [0, 0];\n        $validImage = ($x && $y);\n        $src = $validImage ? htmlspecialchars($src) : 'https://opencollective.com/static/images/default-guest-logo.svg';\n        $height = match ($member['status']) {\n            'sponsor' => 64,\n            'backerPlus' => 42,\n            'backer' => 32,\n            default => 24,\n        };\n        $rel = match ($member['status']) {\n            'sponsor', 'backerPlus' => '',\n            default => ' rel=\"sponsored\"',\n        };\n\n        $width = min($height * 2, $validImage ? round($x * $height / $y) : $height);\n\n        if (!str_contains($href, 'utm_source') && !preg_match('/^https?:\\/\\/(?:www\\.)?(?:onlinekasyno-polis\\.pl|zonaminecraft\\.net|slotozilla\\.com)(\\/.*)?/', $href)) {\n            $href .= (!str_contains($href, '?') ? '?' : '&amp;').'utm_source=opencollective&amp;utm_medium=github&amp;utm_campaign=Carbon';\n        }\n\n        $title = getHtmlAttribute(($member['description'] ?? null) ?: $member['name']);\n        $alt = getHtmlAttribute($member['name']);\n\n        if ($member['star']) {\n            $width *= 1.5;\n            $height *= 1.5;\n        }\n\n        $output .= \"\\n\".'<a title=\"'.$title.'\" href=\"'.$href.'\" target=\"_blank\"'.$rel.'>'.\n            '<img alt=\"'.$alt.'\" src=\"'.$src.'\" width=\"'.$width.'\" height=\"'.$height.'\">'.\n            '</a>';\n    }\n\n    return $output;\n}\n\nfile_put_contents('readme.md', preg_replace_callback(\n    '/(<!-- <open-collective-sponsors> -->)[\\s\\S]+(<!-- <\\/open-collective-sponsors> -->)/',\n    static function (array $match): string {\n        return $match[1].getOpenCollectiveSponsors().$match[2];\n    },\n    file_get_contents('readme.md'),\n));\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}