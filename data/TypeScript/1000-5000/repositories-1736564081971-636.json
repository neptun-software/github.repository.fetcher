{
  "metadata": {
    "timestamp": 1736564081971,
    "page": 636,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "indiespirit/react-native-chart-kit",
      "stars": 2913,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".babelrc",
          "type": "blob",
          "size": 0.0380859375,
          "content": "{\n  \"presets\": [\"babel-preset-expo\"]\n}\n"
        },
        {
          "name": ".eslintrc.json",
          "type": "blob",
          "size": 0.0283203125,
          "content": "{\n  \"extends\": \"react-app\"\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0869140625,
          "content": "node_modules/\n.expo/\n.DS_Store\nnpm-debug.*\npackage-lock.json\n.idea\n.vscode\nyarn.lock\ndist"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.0478515625,
          "content": "node_modules/\n.expo/\nnpm-debug.*\n/promo\n.babelrc\n"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.001953125,
          "content": "{}"
        },
        {
          "name": ".watchmanconfig",
          "type": "blob",
          "size": 0.0029296875,
          "content": "{}\n"
        },
        {
          "name": "App.js",
          "type": "blob",
          "size": 10.1650390625,
          "content": "import \"babel-polyfill\";\n\nimport React from \"react\";\nimport { Dimensions, ScrollView, StatusBar, Text } from \"react-native\";\nimport FlashMessage, { showMessage } from \"react-native-flash-message\";\nimport ScrollableTabView from \"react-native-scrollable-tab-view\";\n\nimport {\n  contributionData,\n  data,\n  pieChartData,\n  progressChartData,\n  stackedBarGraphData\n} from \"./data\";\nimport {\n  BarChart,\n  ContributionGraph,\n  LineChart,\n  PieChart,\n  ProgressChart,\n  StackedBarChart\n} from \"./dist/\";\n\n// in Expo - swipe left to see the following styling, or create your own\nconst chartConfigs = [\n  {\n    backgroundColor: \"#000000\",\n    backgroundGradientFrom: \"#1E2923\",\n    backgroundGradientTo: \"#08130D\",\n    color: (opacity = 1) => `rgba(26, 255, 146, ${opacity})`,\n    style: {\n      borderRadius: 16\n    }\n  },\n  {\n    backgroundColor: \"#022173\",\n    backgroundGradientFrom: \"#022173\",\n    backgroundGradientTo: \"#1b3fa0\",\n    color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n    style: {\n      borderRadius: 16\n    },\n    propsForBackgroundLines: {\n      strokeDasharray: \"\" // solid background lines with no dashes\n    }\n  },\n  {\n    backgroundColor: \"#ffffff\",\n    backgroundGradientFrom: \"#ffffff\",\n    backgroundGradientTo: \"#ffffff\",\n    color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`\n  },\n  {\n    backgroundColor: \"#ffffff\",\n    backgroundGradientFrom: \"#ffffff\",\n    backgroundGradientTo: \"#ffffff\",\n    color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`\n  },\n  {\n    backgroundColor: \"#26872a\",\n    backgroundGradientFrom: \"#43a047\",\n    backgroundGradientTo: \"#66bb6a\",\n    color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n    style: {\n      borderRadius: 16\n    }\n  },\n  {\n    backgroundColor: \"#000000\",\n    backgroundGradientFrom: \"#000000\",\n    backgroundGradientTo: \"#000000\",\n    color: (opacity = 1) => `rgba(${255}, ${255}, ${255}, ${opacity})`\n  },\n  {\n    backgroundColor: \"#0091EA\",\n    backgroundGradientFrom: \"#0091EA\",\n    backgroundGradientTo: \"#0091EA\",\n    color: (opacity = 1) => `rgba(${255}, ${255}, ${255}, ${opacity})`\n  },\n  {\n    backgroundColor: \"#e26a00\",\n    backgroundGradientFrom: \"#fb8c00\",\n    backgroundGradientTo: \"#ffa726\",\n    color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n    style: {\n      borderRadius: 16\n    }\n  },\n  {\n    backgroundColor: \"#b90602\",\n    backgroundGradientFrom: \"#e53935\",\n    backgroundGradientTo: \"#ef5350\",\n    color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n    style: {\n      borderRadius: 16\n    }\n  },\n  {\n    backgroundColor: \"#ff3e03\",\n    backgroundGradientFrom: \"#ff3e03\",\n    backgroundGradientTo: \"#ff3e03\",\n    color: (opacity = 1) => `rgba(${0}, ${0}, ${0}, ${opacity})`\n  }\n];\n\nexport default class App extends React.Component {\n  renderTabBar() {\n    return <StatusBar hidden />;\n  }\n\n  render() {\n    const { width } = Dimensions.get(\"window\");\n    const height = 256;\n    return (\n      <ScrollableTabView renderTabBar={this.renderTabBar}>\n        {chartConfigs.map(chartConfig => {\n          const labelStyle = {\n            color: chartConfig.color(),\n            marginVertical: 10,\n            textAlign: \"center\",\n            fontSize: 16\n          };\n          const graphStyle = {\n            marginVertical: 8,\n            ...chartConfig.style\n          };\n          return (\n            <ScrollView\n              key={Math.random()}\n              style={{\n                backgroundColor: chartConfig.backgroundColor\n              }}\n            >\n              <Text style={labelStyle}>Bezier Line Chart</Text>\n              <LineChart\n                bezier\n                data={data}\n                width={width}\n                height={height}\n                yAxisLabel=\"$\"\n                yAxisSuffix=\"k\"\n                chartConfig={chartConfig}\n                style={graphStyle}\n                verticalLabelRotation={20}\n                onDataPointClick={({ value, getColor }) =>\n                  showMessage({\n                    message: `${value}`,\n                    description: \"You selected this value\",\n                    backgroundColor: getColor(0.9)\n                  })\n                }\n                formatXLabel={label => label.toUpperCase()}\n              />\n              <FlashMessage duration={1000} />\n              <Text style={labelStyle}>Progress Chart</Text>\n              <ProgressChart\n                data={progressChartData}\n                width={width}\n                height={height}\n                chartConfig={chartConfig}\n                style={graphStyle}\n                hideLegend={false}\n              />\n              <Text style={labelStyle}>Bar Graph</Text>\n              <BarChart\n                width={width}\n                height={height}\n                data={data}\n                yAxisLabel=\"$\"\n                chartConfig={chartConfig}\n                style={graphStyle}\n              />\n              <Text style={labelStyle}>Stacked Bar Graph</Text>\n              <StackedBarChart\n                style={graphStyle}\n                data={stackedBarGraphData}\n                width={width}\n                height={220}\n                chartConfig={chartConfig}\n              />\n              <Text style={labelStyle}>\n                Stacked Bar Graph with custom Y labels\n              </Text>\n              <StackedBarChart\n                style={graphStyle}\n                data={stackedBarGraphData}\n                width={width}\n                height={220}\n                chartConfig={chartConfig}\n                formatYLabel={input => {\n                  return +input * 2;\n                }}\n              />\n              <Text style={labelStyle}>Stacked Bar Graph Percentile</Text>\n              <StackedBarChart\n                style={graphStyle}\n                data={stackedBarGraphData}\n                width={width}\n                height={220}\n                chartConfig={chartConfig}\n                percentile\n              />\n              <Text style={labelStyle}>Pie Chart</Text>\n              <PieChart\n                data={pieChartData}\n                height={height}\n                width={width}\n                chartConfig={chartConfig}\n                accessor=\"population\"\n                style={graphStyle}\n                backgroundColor=\"transparent\"\n                paddingLeft=\"15\"\n              />\n              <Text style={labelStyle}>Line Chart</Text>\n              <LineChart\n                data={data}\n                width={width}\n                height={height}\n                yAxisLabel=\"$\"\n                chartConfig={chartConfig}\n                style={graphStyle}\n              />\n              <Text style={labelStyle}>Contribution Graph</Text>\n              <ContributionGraph\n                values={contributionData}\n                width={width}\n                height={height}\n                endDate={new Date(\"2016-05-01\")}\n                numDays={105}\n                chartConfig={chartConfig}\n                style={graphStyle}\n              />\n              <Text style={labelStyle}>Line Chart</Text>\n              <LineChart\n                data={data}\n                width={width}\n                height={height}\n                yAxisLabel=\"$\"\n                segments={5}\n                chartConfig={chartConfig}\n                style={graphStyle}\n                hidePointsAtIndex={[0, data.datasets[0].data.length - 1]}\n              />\n              <Text style={labelStyle}>\n                Line Chart with shadow background as line color\n              </Text>\n              <LineChart\n                bezier\n                data={data}\n                width={width}\n                height={height}\n                yAxisLabel=\"$\"\n                segments={5}\n                chartConfig={{\n                  ...chartConfig,\n                  useShadowColorFromDataset: true\n                }}\n                style={graphStyle}\n                hidePointsAtIndex={[0, data.datasets[0].data.length - 1]}\n              />\n\n              <Text style={labelStyle}>Scrollable Line Chart</Text>\n              <LineChart\n                data={{\n                  labels: [\n                    \"January\",\n                    \"February\",\n                    \"March\",\n                    \"April\",\n                    \"May\",\n                    \"June\"\n                  ],\n                  datasets: [\n                    {\n                      data: [\n                        Math.random() * 100,\n                        Math.random() * 100,\n                        Math.random() * 100,\n                        Math.random() * 100,\n                        Math.random() * 100,\n                        Math.random() * 100,\n                        Math.random() * 100\n                      ]\n                    }\n                  ]\n                }}\n                width={Dimensions.get(\"window\").width} // from react-native\n                height={220}\n                withInnerLines={false}\n                withDots={false}\n                withShadow={false}\n                withScrollableDot={true}\n                yAxisInterval={1} // optional, defaults to 1\n                chartConfig={{\n                  backgroundGradientFrom: \"#1F1F1F\",\n                  decimalPlaces: 2, // optional, defaults to 2dp\n                  color: (opacity = 1) => \"#FF5500\",\n                  labelColor: (opacity = 1) => \"#A0A0A0\",\n                  linejoinType: \"round\",\n\n                  scrollableDotFill: \"#fff\",\n                  scrollableDotRadius: 6,\n                  scrollableDotStrokeColor: \"#FF5500\",\n                  scrollableDotStrokeWidth: 3,\n\n                  scrollableInfoViewStyle: {\n                    justifyContent: \"center\",\n                    alignContent: \"center\",\n                    backgroundColor: \"#121212\",\n                    borderRadius: 2\n                  },\n                  scrollableInfoTextStyle: {\n                    color: \"#C4C4C4\",\n                    marginHorizontal: 4,\n                    flex: 1,\n                    textAlign: \"center\"\n                  },\n                  scrollableInfoSize: { width: 65, height: 30 },\n                  scrollableInfoOffset: 15\n                }}\n                style={{\n                  marginVertical: 8\n                }}\n              />\n            </ScrollView>\n          );\n        })}\n      </ScrollableTabView>\n    );\n  }\n}\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.8623046875,
          "content": "# Changelog\n\n## v6.11\n\n- added a prop to customize vertical labels heigh\n- use full width when legend is hidden in StackedBarChart\n- added custom Y labels in StackedBarChart\n\n## v6.8.0\n\n- use same colors in `ProgressChart` legend if `withCustomBarColorFromData` is set\n\n## v6.7.0\n\n- allowed usage of custom color for each bar on ProgressChart\n- allowed usage of custom color for each bar on BarChart\n- fixed to display the correct height bar even if changing the \"height\" of the props in StackedBar\n- added indexData prop for renderDotContent\n\n## v6.6.0\n\n- added `propsForVerticalLabels` and `propsForHorizontalLabels`\n\n## v6.5.0\n\n- added `StackedBarChart` `percentile` stacking\n\n## v6.4.1\n\n- added `PieChart` props `avoidFalseZero`\n\n## v6.4.0\n\n- `ProgressChart` updated to include a condition to divide width by 2 for x value\n\n## v6.2.0\n\n- added `withVerticalLines` and `withHorizontalLines` to `LineChart`\n\n## v6.1.0\n\n- added `scrollableInfoTextDecorator`\n\n## v6.0.0\n\n- Typescript rewrite\n\n## v5.6.1\n\n- fixed linear gradient issue due to `react-native-svg` lib update\n- added handling for datasets data is null to use last line coordinates\n- updated to Expo SDK 37 and add clarification on usage to README.md\n\n## v5.6.0\n\n- added `showValuesOnTopOfBars` prop to `BarChart`\n- fixed decimalPlaces being 0 and not applied in `BarChart`\n\n## v5.5.0\n\n- added `useShadowColorFromDataset` to `chartConfig` to make `LineChart` shadow same as line color\n\n## v5.4.2\n\n- fixed decimalPlaces not being sent with barChart\n\n## v5.4.0\n\n- added strokeWidth & radius as props for ProgressChart\n\n## v5.3.1\n\n- TS type fixes\n\n## v5.3.0\n\n- added missing ContributionGraph props\n- added `withScrollableDot` to LineChart and a whole bunch of props to `chartConfig`. New feature for Line Chart - scrollable dot. It allows to navigate through chart using gesture and see value at dot's current position.\n\n## v5.2.0\n\n- `propsForDots` added to `ChartConfig` interface\n\n## 5.1.1\n\n- add some safe default values in BarChart's `chartConfig` to avoid potential null pointers\n\n## 5.1.0\n\n- added a withDots property to each dataset in LineChart to disable dots on these lines\n- removed `prop-types`\n- added `onDayPress` to ContributionGraph\n\n## 5.0.0\n\n- made ContributionGraph opacity distribution even through range between the min and max values\n- added `getMonthLabel` to ContributionGraph\n- added `yAxisInterval` to LineChart, it allows you to skip vertical lines in the background\n- expaned StackedBarChart if it has no legend\n\n## 4.5.0\n\n- removed `.babelrc` from distribution\n- made decimalPlaces work for StackedBar Chart\n\n## 4.4.0\n\n- added ability to add custom segments on the Y-Axis\n- implemented barRadius config in BarChart\n- added showBarTops prop to BarChart\n\n## 4.3.0\n\n- added `barPercentage?: number; hideLegend: boolean;` props to StackedBarChart\n- added `barRadius` to chart config\n- added `renderDotContent` to LineChart\n\n## 4.2.0\n\n- line chart supports legend\n\n## 4.1.0\n\n- add `hideLegend` to ProgressChart\n\n## v4.0.0\n\n- patched a lot of indirect dependencies\n- improved ProgressChartProps types\n- added item index to some color calls\n- added an optional bottom padding to LineChart\n- POTENTIALLY BREAKING for typescript: added some typedefs to \"LineChart\", \"BarChart\", and \"StackedBarChart\". Also added some typedefs for styles.\n- corrected the line-chart & progress-chart wrong width calculation\n\n## v3.12.0\n\n- added `formatXLabel`, `formatYLabel`, and `getDotProps` to `LineChart`\n\n## v3.11.0\n\n- added optional props: `xAxisLabel`, `yAxisSuffix`, `yLabelsOffset`, `xLabelsOffset`, and `hidePointsAtIndex` to `LineChart`\n- added optional prop `withInnerLines` to `BarChart`\n- added optional `fillShadowGradient` color and `fillShadowGradientOpacity` to chart config for customizing the area under the data points in `LinChart` and `BarChart`\n\n## v3.10.0\n\n- added type for chart config\n- added props config for Dots in the line chart\n\n## v3.9.0\n\n- added propsForLabels to chartConfig\n- added labelColor to chartConfig as a shortcut for propsForLabels / fill\n\n## v3.8.0\n\n- added dot cx, cy in the onDataPointClick functions arguments\n- fixed for horizontal label position when there is only one data point and fromZero prop is true\n\n## v3.7.0\n\n- expose paddingTop and paddingRight via the style prop\n- style the chart background lines with chartConfig's propsForBackgroundLines\n\n## v3.6.0\n\n- added barPercentage property to chartConfig (by @dchirutac)\n- added dot color callback prop (by @stephenc222)\n- added bar chart label rotations (by @stephenc222)\n\n## v3.5.0\n\n- added `horizontalLabelRotation` and `verticalLabelRotation` props to `LineChart`\n\n## v3.4.0\n\n- added `chartConfig` `backgroundGradientFromOpacity` and `backgroundGradientToOpacity`\n\n## 3.3.0\n\n- added `index` to `onDataPointClick`\n\n## 3.2.0\n\n- added optional labels for ProgressChart\n\n## 3.1.0\n\n- added withVerticalLabels and withHorizontalLabels to LineChart, BarChart and StackedBarChart\n\n## 3.0.0\n\n- added typescript types\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2018 indiespirit\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 29.4912109375,
          "content": "If you're looking to **build a website or a cross-platform mobile app** – we will be happy to help you! Send a note to clients@ui1.io and we will be in touch with you shortly.\n\n![Chart Kit](https://i.imgur.com/Idp4WIX.jpg)\n\n[📲See example app](https://github.com/indiespirit/react-native-chart-kit-example)\n\nTo try the examples in Expo, please change `main` to `./node_modules/expo/AppEntry.js` in `package.json` before starting things with `expo run`. You'll need to have `expo-cli` installed via `npm install -g expo-cli`.\n\n# React Native Chart Kit Documentation\n\n## Import components\n\n1. `yarn add react-native-chart-kit`\n2. `yarn add react-native-svg` install peer dependencies\n3. Use with ES6 syntax to import components\n\n```js\nimport {\n  LineChart,\n  BarChart,\n  PieChart,\n  ProgressChart,\n  ContributionGraph,\n  StackedBarChart\n} from \"react-native-chart-kit\";\n```\n\n## Quick Example\n\n```jsx\n<View>\n  <Text>Bezier Line Chart</Text>\n  <LineChart\n    data={{\n      labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"],\n      datasets: [\n        {\n          data: [\n            Math.random() * 100,\n            Math.random() * 100,\n            Math.random() * 100,\n            Math.random() * 100,\n            Math.random() * 100,\n            Math.random() * 100\n          ]\n        }\n      ]\n    }}\n    width={Dimensions.get(\"window\").width} // from react-native\n    height={220}\n    yAxisLabel=\"$\"\n    yAxisSuffix=\"k\"\n    yAxisInterval={1} // optional, defaults to 1\n    chartConfig={{\n      backgroundColor: \"#e26a00\",\n      backgroundGradientFrom: \"#fb8c00\",\n      backgroundGradientTo: \"#ffa726\",\n      decimalPlaces: 2, // optional, defaults to 2dp\n      color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n      labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\n      style: {\n        borderRadius: 16\n      },\n      propsForDots: {\n        r: \"6\",\n        strokeWidth: \"2\",\n        stroke: \"#ffa726\"\n      }\n    }}\n    bezier\n    style={{\n      marginVertical: 8,\n      borderRadius: 16\n    }}\n  />\n</View>\n```\n\n## Chart style object\n\nDefine a chart style object with following properies as such:\n\n```js\nconst chartConfig = {\n  backgroundGradientFrom: \"#1E2923\",\n  backgroundGradientFromOpacity: 0,\n  backgroundGradientTo: \"#08130D\",\n  backgroundGradientToOpacity: 0.5,\n  color: (opacity = 1) => `rgba(26, 255, 146, ${opacity})`,\n  strokeWidth: 2, // optional, default 3\n  barPercentage: 0.5,\n  useShadowColorFromDataset: false // optional\n};\n```\n\n| Property                      | Type               | Description                                                                                                                          |\n| ----------------------------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------ |\n| backgroundGradientFrom        | string             | Defines the first color in the linear gradient of a chart's background                                                               |\n| backgroundGradientFromOpacity | Number             | Defines the first color opacity in the linear gradient of a chart's background                                                       |\n| backgroundGradientTo          | string             | Defines the second color in the linear gradient of a chart's background                                                              |\n| backgroundGradientToOpacity   | Number             | Defines the second color opacity in the linear gradient of a chart's background                                                      |\n| fillShadowGradientFrom        | string             | Defines the first color in the linear gradient of the area under data (can also be specified as `fillShadowGradient`)                |\n| fillShadowGradientFromOpacity | Number             | Defines the first color opacity in the linear gradient of the area under data (can also be specified as `fillShadowGradientOpacity`) |\n| fillShadowGradientFromOffset  | Number             | Defines the first color offset (0-1) in the linear gradient of the area under data                                                   |\n| fillShadowGradientTo          | string             | Defines the second color in the linear gradient of the area under data                                                               |\n| fillShadowGradientToOpacity   | Number             | Defines the second color opacity in the linear gradient of the area under data                                                       |\n| fillShadowGradientToOffset    | Number             | Defines the second color offset (0-1) in the linear gradient of the area under data                                                  |\n| useShadowColorFromDataset     | Boolean            | Defines the option to use color from dataset to each chart data. Default is false                                                    |\n| color                         | function => string | Defines the base color function that is used to calculate colors of labels and sectors used in a chart                               |\n| strokeWidth                   | Number             | Defines the base stroke width in a chart                                                                                             |\n| barPercentage                 | Number             | Defines the percent (0-1) of the available width each bar width in a chart                                                           |\n| barRadius                     | Number             | Defines the radius of each bar                                                                                                       |\n| propsForBackgroundLines       | props              | Override styles of the background lines, refer to react-native-svg's Line documentation                                              |\n| propsForLabels                | props              | Override styles of the labels, refer to react-native-svg's Text documentation                                                        |\n| propsForVerticalLabels        | props              | Override styles of vertical labels, refer to react-native-svg's Text documentation                                                   |\n| propsForHorizontalLabels      | props              | Override styles of horizontal labels, refer to react-native-svg's Text documentation                                                 |\n\n## Responsive charts\n\nTo render a responsive chart, use `Dimensions` react-native library to get the width of the screen of your device like such\n\n```js\nimport { Dimensions } from \"react-native\";\nconst screenWidth = Dimensions.get(\"window\").width;\n```\n\n## Line Chart\n\n![Line Chart](https://i.imgur.com/Wt26snd.jpg)\n\n```js\nconst data = {\n  labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"],\n  datasets: [\n    {\n      data: [20, 45, 28, 80, 99, 43],\n      color: (opacity = 1) => `rgba(134, 65, 244, ${opacity})`, // optional\n      strokeWidth: 2 // optional\n    }\n  ],\n  legend: [\"Rainy Days\"] // optional\n};\n```\n\n```jsx\n<LineChart\n  data={data}\n  width={screenWidth}\n  height={220}\n  chartConfig={chartConfig}\n/>\n```\n\n| Property                | Type                    | Description                                                                                                                                                                                                                    |\n| ----------------------- | ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| data                    | Object                  | Data for the chart - see example above                                                                                                                                                                                         |\n| width                   | Number                  | Width of the chart, use 'Dimensions' library to get the width of your screen for responsive                                                                                                                                    |\n| height                  | Number                  | Height of the chart                                                                                                                                                                                                            |\n| withDots                | boolean                 | Show dots on the line - default: True                                                                                                                                                                                          |\n| withShadow              | boolean                 | Show shadow for line - default: True                                                                                                                                                                                           |\n| withInnerLines          | boolean                 | Show inner dashed lines - default: True                                                                                                                                                                                        |\n| withOuterLines          | boolean                 | Show outer dashed lines - default: True                                                                                                                                                                                        |\n| withVerticalLines       | boolean                 | Show vertical lines - default: True                                                                                                                                                                                            |\n| withHorizontalLines     | boolean                 | Show horizontal lines - default: True                                                                                                                                                                                          |\n| withVerticalLabels      | boolean                 | Show vertical labels - default: True                                                                                                                                                                                           |\n| withHorizontalLabels    | boolean                 | Show horizontal labels - default: True                                                                                                                                                                                         |\n| fromZero                | boolean                 | Render charts from 0 not from the minimum value. - default: False                                                                                                                                                              |\n| yAxisLabel              | string                  | Prepend text to horizontal labels -- default: ''                                                                                                                                                                               |\n| yAxisSuffix             | string                  | Append text to horizontal labels -- default: ''                                                                                                                                                                                |\n| xAxisLabel              | string                  | Prepend text to vertical labels -- default: ''                                                                                                                                                                                 |\n| yAxisInterval           | string                  | Display y axis line every {x} input. -- default: 1                                                                                                                                                                             |\n| chartConfig             | Object                  | Configuration object for the chart, see example config object above                                                                                                                                                            |\n| decorator               | Function                | This function takes a [whole bunch](https://github.com/indiespirit/react-native-chart-kit/blob/master/src/line-chart/LineChart.tsx#L827) of stuff and can render extra elements, such as data point info or additional markup. |\n| onDataPointClick        | Function                | Callback that takes `{value, dataset, getColor}`                                                                                                                                                                               |\n| horizontalLabelRotation | number (degree)         | Rotation angle of the horizontal labels - default 0                                                                                                                                                                            |\n| verticalLabelRotation   | number (degree)         | Rotation angle of the vertical labels - default 0                                                                                                                                                                              |\n| getDotColor             | function => string      | Defines the dot color function that is used to calculate colors of dots in a line chart and takes `(dataPoint, dataPointIndex)`                                                                                                |\n| renderDotContent        | Function                | Render additional content for the dot. Takes `({x, y, index, indexData})` as arguments.                                                                                                                                        |\n| yLabelsOffset           | number                  | Offset for Y axis labels                                                                                                                                                                                                       |\n| xLabelsOffset           | number                  | Offset for X axis labels                                                                                                                                                                                                       |\n| hidePointsAtIndex       | number[]                | Indices of the data points you don't want to display                                                                                                                                                                           |\n| formatYLabel            | Function                | This function change the format of the display value of the Y label. Takes the Y value as argument and should return the desirable string.                                                                                     |\n| formatXLabel            | Function                | This function change the format of the display value of the X label. Takes the X value as argument and should return the desirable string.                                                                                     |\n| getDotProps             | (value, index) => props | This is an alternative to chartConfig's propsForDots                                                                                                                                                                           |\n| segments                | number                  | The amount of horizontal lines - default 4                                                                                                                                                                                     |\n\n## Bezier Line Chart\n\n![Line Chart](https://i.imgur.com/EnUiZZU.jpg)\n\n```jsx\n<LineChart\n  data={data}\n  width={screenWidth}\n  height={256}\n  verticalLabelRotation={30}\n  chartConfig={chartConfig}\n  bezier\n/>\n```\n\n| Property | Type    | Description                                           |\n| -------- | ------- | ----------------------------------------------------- |\n| bezier   | boolean | Add this prop to make the line chart smooth and curvy |\n\n## Progress Ring\n\n![Progress Chart](https://i.imgur.com/U4lkW0K.jpg)\n\n```js\n// each value represents a goal ring in Progress chart\nconst data = {\n  labels: [\"Swim\", \"Bike\", \"Run\"], // optional\n  data: [0.4, 0.6, 0.8]\n};\n```\n\n```jsx\n<ProgressChart\n  data={data}\n  width={screenWidth}\n  height={220}\n  strokeWidth={16}\n  radius={32}\n  chartConfig={chartConfig}\n  hideLegend={false}\n/>\n```\n\n| Property    | Type    | Description                                                                                 |\n| ----------- | ------- | ------------------------------------------------------------------------------------------- |\n| data        | Object  | Data for the chart - see example above                                                      |\n| width       | Number  | Width of the chart, use 'Dimensions' library to get the width of your screen for responsive |\n| height      | Number  | Height of the chart                                                                         |\n| strokeWidth | Number  | Width of the stroke of the chart - default: 16                                              |\n| radius      | Number  | Inner radius of the chart - default: 32                                                     |\n| chartConfig | Object  | Configuration object for the chart, see example config in the beginning of this file        |\n| hideLegend  | Boolean | Switch to hide chart legend (defaults to false)                                             |\n\n## Bar chart\n\n![Bat Chart](https://i.imgur.com/jVHEWiI.jpg)\n\n```js\nconst data = {\n  labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"],\n  datasets: [\n    {\n      data: [20, 45, 28, 80, 99, 43]\n    }\n  ]\n};\n```\n\n```jsx\n<BarChart\n  style={graphStyle}\n  data={data}\n  width={screenWidth}\n  height={220}\n  yAxisLabel=\"$\"\n  chartConfig={chartConfig}\n  verticalLabelRotation={30}\n/>\n```\n\n| Property                | Type            | Description                                                                                 |\n| ----------------------- | --------------- | ------------------------------------------------------------------------------------------- |\n| data                    | Object          | Data for the chart - see example above                                                      |\n| width                   | Number          | Width of the chart, use 'Dimensions' library to get the width of your screen for responsive |\n| height                  | Number          | Height of the chart                                                                         |\n| withVerticalLabels      | boolean         | Show vertical labels - default: True                                                        |\n| withHorizontalLabels    | boolean         | Show horizontal labels - default: True                                                      |\n| fromZero                | boolean         | Render charts from 0 not from the minimum value. - default: False                           |\n| withInnerLines          | boolean         | Show inner dashed lines - default: True                                                     |\n| yAxisLabel              | string          | Prepend text to horizontal labels -- default: ''                                            |\n| yAxisSuffix             | string          | Append text to horizontal labels -- default: ''                                             |\n| chartConfig             | Object          | Configuration object for the chart, see example config in the beginning of this file        |\n| horizontalLabelRotation | number (degree) | Rotation angle of the horizontal labels - default 0                                         |\n| verticalLabelRotation   | number (degree) | Rotation angle of the vertical labels - default 0                                           |\n| showBarTops             | boolean         | Show bar tops                                                                               |\n| showValuesOnTopOfBars   | boolean         | Show value above bars                                                                       |\n\n## StackedBar chart\n\n![StackedBar_Chart](https://imgur.com/JkBtxt8.jpg)\n\n```js\nconst data = {\n  labels: [\"Test1\", \"Test2\"],\n  legend: [\"L1\", \"L2\", \"L3\"],\n  data: [\n    [60, 60, 60],\n    [30, 30, 60]\n  ],\n  barColors: [\"#dfe4ea\", \"#ced6e0\", \"#a4b0be\"]\n};\n```\n\n```jsx\n<StackedBarChart\n  style={graphStyle}\n  data={data}\n  width={screenWidth}\n  height={220}\n  chartConfig={chartConfig}\n/>\n```\n\n| Property             | Type    | Description                                                                                 |\n| -------------------- | ------- | ------------------------------------------------------------------------------------------- |\n| data                 | Object  | Data for the chart - see example above                                                      |\n| width                | Number  | Width of the chart, use 'Dimensions' library to get the width of your screen for responsive |\n| height               | Number  | Height of the chart                                                                         |\n| withVerticalLabels   | boolean | Show vertical labels - default: True                                                        |\n| withHorizontalLabels | boolean | Show horizontal labels - default: True                                                      |\n| chartConfig          | Object  | Configuration object for the chart, see example config in the beginning of this file        |\n| barPercentage        | Number  | Defines the percent (0-1) of the available width each bar width in a chart                  |\n| showLegend           | boolean | Show legend - default: True                                                                 |\n\n## Pie chart\n\n![Pie Chart](https://i.imgur.com/JMz3obk.jpg)\n\n### Modified Pie Chart Screenshot\n\n![Pie Chart_modified](/src/piechart_modified.png)\n\n```js\nconst data = [\n  {\n    name: \"Seoul\",\n    population: 21500000,\n    color: \"rgba(131, 167, 234, 1)\",\n    legendFontColor: \"#7F7F7F\",\n    legendFontSize: 15\n  },\n  {\n    name: \"Toronto\",\n    population: 2800000,\n    color: \"#F00\",\n    legendFontColor: \"#7F7F7F\",\n    legendFontSize: 15\n  },\n  {\n    name: \"Beijing\",\n    population: 527612,\n    color: \"red\",\n    legendFontColor: \"#7F7F7F\",\n    legendFontSize: 15\n  },\n  {\n    name: \"New York\",\n    population: 8538000,\n    color: \"#ffffff\",\n    legendFontColor: \"#7F7F7F\",\n    legendFontSize: 15\n  },\n  {\n    name: \"Moscow\",\n    population: 11920000,\n    color: \"rgb(0, 0, 255)\",\n    legendFontColor: \"#7F7F7F\",\n    legendFontSize: 15\n  }\n];\n```\n\n```jsx\n<PieChart\n  data={data}\n  width={screenWidth}\n  height={220}\n  chartConfig={chartConfig}\n  accessor={\"population\"}\n  backgroundColor={\"transparent\"}\n  paddingLeft={\"15\"}\n  center={[10, 50]}\n  absolute\n/>\n```\n\n| Property       | Type    | Description                                                                                       |\n| -------------- | ------- | ------------------------------------------------------------------------------------------------- |\n| data           | Object  | Data for the chart - see example above                                                            |\n| width          | Number  | Width of the chart, use 'Dimensions' library to get the width of your screen for responsive       |\n| height         | Number  | Height of the chart                                                                               |\n| chartConfig    | Object  | Configuration object for the chart, see example config in the beginning of this file              |\n| accessor       | string  | Property in the `data` object from which the number values are taken                              |\n| bgColor        | string  | background color - if you want to set transparent, input `transparent` or `none`.                 |\n| paddingLeft    | string  | left padding of the pie chart                                                                     |\n| center         | array   | offset x and y coordinates to position the chart                                                  |\n| absolute       | boolean | shows the values as absolute numbers                                                              |\n| hasLegend      | boolean | Defaults to `true`, set it to `false` to remove the legend                                        |\n| avoidFalseZero | boolean | Defaults to `false`, set it to `true` to display a \"<1%\" instead of a rounded value equal to \"0%\" |\n\n## Contribution graph (heatmap)\n\n![Contribution Graph](https://i.imgur.com/NKURRt6.jpg)\n\nThis type of graph is often use to display a developer contribution activity. However, there many other use cases this graph is used when you need to visualize a frequency of a certain event over time.\n\n```js\nconst commitsData = [\n  { date: \"2017-01-02\", count: 1 },\n  { date: \"2017-01-03\", count: 2 },\n  { date: \"2017-01-04\", count: 3 },\n  { date: \"2017-01-05\", count: 4 },\n  { date: \"2017-01-06\", count: 5 },\n  { date: \"2017-01-30\", count: 2 },\n  { date: \"2017-01-31\", count: 3 },\n  { date: \"2017-03-01\", count: 2 },\n  { date: \"2017-04-02\", count: 4 },\n  { date: \"2017-03-05\", count: 2 },\n  { date: \"2017-02-30\", count: 4 }\n];\n```\n\n```jsx\n<ContributionGraph\n  values={commitsData}\n  endDate={new Date(\"2017-04-01\")}\n  numDays={105}\n  width={screenWidth}\n  height={220}\n  chartConfig={chartConfig}\n/>\n```\n\n| Property           | Type     | Description                                                                                 |\n| ------------------ | -------- | ------------------------------------------------------------------------------------------- |\n| data               | Object   | Data for the chart - see example above                                                      |\n| width              | Number   | Width of the chart, use 'Dimensions' library to get the width of your screen for responsive |\n| height             | Number   | Height of the chart                                                                         |\n| gutterSize         | Number   | Size of the gutters between the squares in the chart                                        |\n| squareSize         | Number   | Size of the squares in the chart                                                            |\n| horizontal         | boolean  | Should graph be laid out horizontally? Defaults to `true`                                   |\n| showMonthLabels    | boolean  | Should graph include labels for the months? Defaults to `true`                              |\n| showOutOfRangeDays | boolean  | Should graph be filled with squares, including days outside the range? Defaults to `false`  |\n| chartConfig        | Object   | Configuration object for the chart, see example config in the beginning of this file        |\n| accessor           | string   | Property in the `data` object from which the number values are taken; defaults to `count`   |\n| getMonthLabel      | function | Function which returns the label for each month, taking month index (0 - 11) as argument    |\n| onDayPress         | function | Callback invoked when the user clicks a day square on the chart; takes a value-item object  |\n\n## More styling\n\nEvery charts also accepts `style` props, which will be applied to parent `svg` or `View` component of each chart.\n\n## Abstract Chart\n\n`src/abstract-chart.js` is an extendable class which can be used to create your own charts!\n\nThe following methods are available:\n\n### renderHorizontalLines(config)\n\nRenders background horizontal lines like in the Line Chart and Bar Chart. Takes a config object with following properties:\n\n```js\n{\n  // width of your chart\n  width: Number,\n  // height of your chart\n  height: Number,\n  // how many lines to render\n  count: Number,\n  // top padding from the chart top edge\n  paddingTop: Number\n}\n```\n\n### renderVerticalLabels(config)\n\nRender background vertical lines. Takes a config object with following properties:\n\n```js\n{\n  // data needed to calculate the number of lines to render\n  data: Array,\n  // width of your chart\n  width: Number,\n  // height of your chart\n  height: Number,\n  paddingTop: Number,\n  paddingRight: Number\n}\n```\n\n### renderDefs(config)\n\nRender definitions of background and shadow gradients\n\n```js\n{\n  // width of your chart\n  width: Number,\n  // height of your chart\n  height: Number,\n  // first color of background gradient\n  backgroundGradientFrom: String,\n  // first color opacity of background gradient (0 - 1.0)\n  backgroundGradientFromOpacity: Number,\n  // second color of background gradient\n  backgroundGradientTo: String,\n  // second color opacity of background gradient (0 - 1.0)\n  backgroundGradientToOpacity: Number,\n}\n```\n\n## Compilation\n\nFor production use, the package is automatically compiled after installation, so that you can just install it with `npm` and use it out-of-the-box.\n\nTo transpile TypeScript into JavaScript for development purposes, you can use either run `npm run build` to compile once, or `npm run dev` to start compilation in watch mode, which will recompile the files on change.\n\n## More information\n\nThis library is built on top of the following open-source projects:\n\n- react-native-svg (https://github.com/react-native-community/react-native-svg)\n- paths-js (https://github.com/andreaferretti/paths-js)\n- react-native-calendar-heatmap (https://github.com/ayooby/react-native-calendar-heatmap)\n\n## Contribute\n\nSee the [contribution guide](contributing.md) and join [the contributors](https://github.com/indiespirit/react-native-chart-kit/graphs/contributors)!\n"
        },
        {
          "name": "app.json",
          "type": "blob",
          "size": 0.072265625,
          "content": "{\n  \"expo\": { \"sdkVersion\": \"37.0.0\", \"platforms\": [\"ios\", \"android\"] }\n}\n"
        },
        {
          "name": "contributing.md",
          "type": "blob",
          "size": 0.8583984375,
          "content": "# Contributing to React Native Chart Kit\n\n👍🎉 First off, thanks for taking the time to contribute! 🎉👍\n\nSuggestions and pull requests are highly encouraged! Have a look at the [open issues](https://github.com/indiespirit/react-native-chart-kit/issues).\n\n## Workflow\n\nFirst clone:\n\n```sh\ngit clone git@github.com:indiespirit/react-native-chart-kit.git\ncd react-native-chart-kit\nyarn install\n```\n\nIn order to run it, you are gonna have to flip values for \"main\" and \"_main\" in package json. This is nessesary because both npm and expo have a notion of a main file, but for npm it's the file that you run when you import this library in your app; and for expo it's the file that it uses to display the example app.\n\nDon't forget to flip it back before commiting.\n\n**After you update fix the package.json**\n\n```sh\nyarn start # And get you expo app ready on your phone\n```\n\n"
        },
        {
          "name": "data.js",
          "type": "blob",
          "size": 2.099609375,
          "content": "// Mock data object used for LineChart and BarChart\n\nconst data = {\n  labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"],\n  datasets: [\n    {\n      data: [-50, -20, -2, 86, 71, 100],\n      color: (opacity = 1) => `rgba(134, 65, 244, ${opacity})` // optional\n    },\n    {\n      data: [20, 10, 4, 56, 87, 90],\n      color: (opacity = 1) => `rgba(0, 255, 255, ${opacity})` // optional\n    },\n    {\n      data: [30, 90, 67, 54, 10, 2]\n    }\n  ],\n  legend: [\"Rainy Days\", \"Sunny Days\", \"Snowy Days\"] // optional\n};\n\n// Mock data object used for Contribution Graph\n\nconst contributionData = [\n  { date: \"2016-01-02\", count: 1 },\n  { date: \"2016-01-03\", count: 2 },\n  { date: \"2016-01-04\", count: 3 },\n  { date: \"2016-01-05\", count: 4 },\n  { date: \"2016-01-06\", count: 5 },\n  { date: \"2016-01-30\", count: 2 },\n  { date: \"2016-01-31\", count: 3 },\n  { date: \"2016-03-01\", count: 2 },\n  { date: \"2016-04-02\", count: 4 },\n  { date: \"2016-03-05\", count: 2 },\n  { date: \"2016-02-30\", count: 4 }\n];\n\n// Mock data object for Pie Chart\n\nconst pieChartData = [\n  {\n    name: \"Seoul\",\n    population: 21500000,\n    color: \"rgba(131, 167, 234, 1)\",\n    legendFontColor: \"#7F7F7F\",\n    legendFontSize: 15\n  },\n  {\n    name: \"Toronto\",\n    population: 2800000,\n    color: \"#F00\",\n    legendFontColor: \"#7F7F7F\",\n    legendFontSize: 15\n  },\n  {\n    name: \"Beijing\",\n    population: 527612,\n    color: \"red\",\n    legendFontColor: \"#7F7F7F\",\n    legendFontSize: 15\n  },\n  {\n    name: \"New York\",\n    population: 8538000,\n    color: \"#ffffff\",\n    legendFontColor: \"#7F7F7F\",\n    legendFontSize: 15\n  },\n  {\n    name: \"Moscow\",\n    population: 11920000,\n    color: \"rgb(0, 0, 255)\",\n    legendFontColor: \"#7F7F7F\",\n    legendFontSize: 15\n  }\n];\n\n// Mock data object for Progress\n\nconst progressChartData = {\n  labels: [\"Swim\", \"Bike\", \"Run\"], // optional\n  data: [0.2, 0.5, 0.3]\n};\n\nconst stackedBarGraphData = {\n  labels: [\"Test1\", \"Test2\"],\n  legend: [\"L1\", \"L2\", \"L3\"],\n  data: [[60, 60, 60], [30, 30, 60]],\n  barColors: [\"#dfe4ea\", \"#ced6e0\", \"#a4b0be\"]\n};\n\nexport {\n  data,\n  contributionData,\n  pieChartData,\n  progressChartData,\n  stackedBarGraphData\n};\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.4462890625,
          "content": "import AbstractChart from \"./src/abstract-chart\";\nimport LineChart from \"./src/line-chart\";\nimport BarChart from \"./src/bar-chart\";\nimport PieChart from \"./src/pie-chart\";\nimport ProgressChart from \"./src/progress-chart\";\nimport ContributionGraph from \"./src/contribution-graph\";\nimport StackedBarChart from \"./src/stackedbar-chart\";\n\nexport {\n  AbstractChart,\n  BarChart,\n  LineChart,\n  PieChart,\n  ProgressChart,\n  ContributionGraph,\n  StackedBarChart\n};\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.892578125,
          "content": "{\n  \"name\": \"react-native-chart-kit\",\n  \"version\": \"6.11.0\",\n  \"devDependencies\": {\n    \"@types/react-native\": \"^0.62.13\",\n    \"babel-eslint\": \"10.x\",\n    \"babel-plugin-module-resolver\": \"^3.1.1\",\n    \"babel-polyfill\": \"^6.26.0\",\n    \"eslint\": \"6.x\",\n    \"eslint-config-react-app\": \"^5.0.2\",\n    \"eslint-plugin-flowtype\": \"^4.3.0\",\n    \"eslint-plugin-import\": \"2.x\",\n    \"eslint-plugin-jsx-a11y\": \"6.x\",\n    \"eslint-plugin-react\": \"7.x\",\n    \"eslint-plugin-react-hooks\": \"1.x\",\n    \"expo\": \"^37.0.0\",\n    \"husky\": \"^3.0.7\",\n    \"jest-expo\": \"^37.0.0\",\n    \"prettier\": \"^1.18.2\",\n    \"pretty-quick\": \"^1.11.1\",\n    \"react\": \"16.9.0\",\n    \"react-native\": \"https://github.com/expo/react-native/archive/sdk-37.0.1.tar.gz\",\n    \"react-native-flash-message\": \"^0.1.10\",\n    \"react-native-scrollable-tab-view\": \"^1.0.0\",\n    \"react-native-svg\": \"11.0.1\",\n    \"react-test-renderer\": \"16.7.0\",\n    \"typescript\": \"^3.9.5\"\n  },\n  \"_main\": \"./node_modules/expo/AppEntry.js\",\n  \"main\": \"./dist/index.js\",\n  \"typings\": \"./dist/index.d.ts\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"scripts\": {\n    \"start\": \"expo start\",\n    \"eject\": \"expo eject\",\n    \"android\": \"expo start --android\",\n    \"ios\": \"expo start --ios\",\n    \"test\": \"jest\",\n    \"build\": \"tsc\",\n    \"dev\": \"tsc --watch\",\n    \"prepublish\": \"yarn build\",\n    \"prepare\": \"yarn build\"\n  },\n  \"jest\": {\n    \"preset\": \"jest-expo\"\n  },\n  \"peerDependencies\": {\n    \"react\": \"> 16.7.0\",\n    \"react-native\": \">= 0.50.0\",\n    \"react-native-svg\": \"> 6.4.1\"\n  },\n  \"dependencies\": {\n    \"lodash\": \"^4.17.13\",\n    \"paths-js\": \"^0.4.10\",\n    \"point-in-polygon\": \"^1.0.1\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"pretty-quick --staged\"\n    }\n  },\n  \"license\": \"MIT\",\n  \"homepage\": \"https://github.com/indiespirit/react-native-chart-kit\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/indiespirit/react-native-chart-kit\"\n  },\n  \"resolutions\": {\n    \"@types/react\": \"16.14.8\"\n  }\n}\n"
        },
        {
          "name": "promo",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.4775390625,
          "content": "{\n  \"compilerOptions\": {\n    \"lib\": [\n      \"es5\",\n      \"es6\",\n      \"es7\",\n      \"es2015\",\n      \"es2016\",\n      \"es2017\",\n      \"es2018\",\n      \"esnext\"\n    ],\n    \"target\": \"es5\",\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"rootDir\": \"./src\",\n    \"outDir\": \"./dist\",\n    \"declaration\": true,\n    \"declarationMap\": true,\n    \"inlineSourceMap\": true,\n    \"inlineSources\": true,\n    \"esModuleInterop\": true,\n    \"noErrorTruncation\": true,\n    \"jsx\": \"react-native\"\n  }\n}\n"
        }
      ]
    }
  ]
}