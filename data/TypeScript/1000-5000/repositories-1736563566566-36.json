{
  "metadata": {
    "timestamp": 1736563566566,
    "page": 36,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "javascriptdata/danfojs",
      "stars": 4825,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0634765625,
          "content": ".editorconfig\nnode_modules\ntest/fixtures/*\ntest/samples/*\n*.xlsx\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2705078125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at danfojs@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.26171875,
          "content": "# Contributing Guide\n\n### Contributing to danfojs\n\n**Table of contents:**\n\n* **TL:DR**\n* Where to start?\n* Working with the code\n  * Version control, Git, and GitHub\n  * Getting started with Git\n  * Forking\n  * Creating a development environment\n* Documentation Guidelines\n* Writing tests\n  * Using mocha\n  * Running the test suite\n* Contributing your changes to danfojs\n  * Committing your code\n  * Pushing your changes\n  * Review your code and finally, make the pull request\n* Danfojs internal (Brief)\n\n## TL:DR\n\nAll contributions, bug reports, bug fixes, documentation improvements, enhancements, and ideas are welcome.\n\nFor contributors familiar with open-source, below is a quick guide to setting up danfojs locally.\n\n```\ngit clone https://github.com/javascriptdata/danfojs.git\ncd danfojs\ngit checkout -b <your-branch-name>\n```\n\nThere are three main folders in the `src` folder, **danfojs-base**, **danfojs-browser,** and **danfojs-node**.&#x20;\n\nThe **danfojs-base** folder holds all shared classes, modules, and functions used by both danfojs-browser and danfojs-node. So features or bug fixes that work the same way in both versions will generally be done in the **danfojs-base** folder.&#x20;\n\n## Where to start?\n\nFor first-time contributors, you can find pending issues on the GitHub “issues” page. There are a number of issues listed and \"good first issue\" where you could start out. Once you’ve found an interesting issue, and have an improvement in mind, next thing is to set up your development environment.\n\n## Working with the code\n\nIf you have an issue you want to fix, an enhancement to add, or documentation to improve, you need to learn how to work with GitHub and the Danfojs code base.\n\n### **Version control, Git, and GitHub**\n\nDanfojs code is hosted on GitHub. To contribute you will need to sign up for a free GitHub account. We use Git for version control to allow many people to work together on this project.\n\nSome great resources for learning Git:\n\n* Official [GitHub pages](http://help.github.com).\n\n### **Getting started with Git**\n\nFind [Instructions](http://help.github.com/set-up-git-redirect) for installing git, setting up your SSH key, and configuring git. These steps need to be completed before you can work seamlessly between your local repository and GitHub.\n\n## **Forking the Danfojs repo**\n\nYou will need your own fork to work on the code. Go to the danfojs [project page](https://github.com/opensource9ja/danfojs) and hit the Fork button.\n\nNext, you will clone your fork to your local machine:\n\n```\ngit clone https://github.com/javascriptdata/danfojs.git\ncd danfojs\n```\n\nThis creates the directory danfojs and connects your repository to the upstream (main project) repository.\n\nSome Javascript features are supported both in the browser and node environment, and it is recommended to add features in the **danfojs-base** folder.&#x20;\n\nFor features that work differently or only in a specific environment, you can add them in the corresponding danfojs-node or danfojs-browser folder.&#x20;\n\n\n\n## **Creating a development environment**\n\nTo test out code changes, you’ll need to build danfojs, which requires a Nodejs environment.\n\n```python\ngit clone https://github.com/javascriptdata/danfojs.git\ncd danfojs\nyarn install ## automatically installs all required packages\nyarn test ##Runs test in both node and browser folder\n```\n\n> Now you can start adding features or fixing bugs!\n\n## Documentation Guidelines\n\nDocumentation helps clarify what a function or a method is doing. It also gives insight to users of the function or methods on what parameters to pass in and know what the function will return.\n\nSample documentation:\n\n```javascript\n /**\n * Add two series of the same length\n * @param {series1} series1 [Series]\n * @param {series2} series2 [Series]\n * @returns Series\n */\nfunction add_series(series1, series2){\n\n        ...................\n\n        return new Series()\n}\n```\n\nAnd for functions that contain more than two arguments, a keyword argument can be used. Parsing of keyword argument is also applicable to most of the methods in a class\n\n```javascript\n/**\n * Join two or more dataframe together along an axis\n * @param {kwargs} kwargs --> {\n *                      df_list: [Array of DataFrame],\n *                      axis : int {0 or 1},\n *                      by_column : String {name of a column},\n *                    }\n * @returns DataFrame \n */\nfunction join_df(kwargs){\n        ........\n\n        return DataFrame\n}\n```\n\n## **Writing tests**\n\nWe strongly encourage contributors to write tests for their code. Like many packages, Danfojs uses mocha.&#x20;\n\nAll tests should go into the tests subdirectory and placed in the corresponding module. The tests folder contains some current examples of tests, and we suggest looking to these for inspiration.\n\nBelow is the general Framework to write a test for each module.\n\n{% tabs %}\n{% tab title=\"JavaScript\" %}\n```javascript\nimport { assert } from \"chai\"\nimport { DataFrame } from '../../src/core/frame'\n\ndescribe(\"Name of the class|module\", function(){\n \n  it(\"name of the methods| expected result\",function(){\n    \n       //write your test code here\n       //use assert.{proprty} to test your code\n   })\n\n});\n```\n{% endtab %}\n{% endtabs %}\n\nFor a class with lots of methods.\n\n```python\nimport { assert } from \"chai\"\nimport { DataFrame } from '../../src/core/frame'\n\ndescribe(\"Name of the class|module\", function(){\n \n describe(\"method name 1\", function(){\n \n   it(\"expected result\",function(){\n     \n        //write your test code here\n        //use assert.{proprty} to test your code\n    })\n  })\n  \n  describe(\"method name 2\", function(){\n \n   it(\"expected result\",function(){\n     \n        //write your test code here\n        //use assert.{proprty} to test your code\n    })\n  })\n  .......\n});\n```\n\n**Example**: Let write a test, to test if the values in a dataframe are off a certain length. Assuming the method to obtain length is values\\_len()\n\n```javascript\nimport { assert } from \"chai\"\nimport { DataFrame } from '../../src/core/frame'\n\ndescribe(\"DataFrame\", function(){\n    \n  describe(\"value_len\", function(){\n \n   it(\"check dataframe length\",function(){\n     \n       let data = [[1,2],[4,5]]\n       let columns = [\"A\",\"B\"]\n       let df = new DataFrame(data,{columns: columns})\n       \n       let expected_result = 2\n       \n       assert.deepEqual(sf.value_len(), expected_result))\n       \n       \n    })\n  })\n\n});\n```\n\n### **Running the test case**\n\nTo run the test for the module you created,\n\n**1)** Open the package.json\n\n**2)** change the name of the test script to the file name you want to test.\n\n```python\n\"scripts\": {\n    \"test\": \"....... danfojs/tests/sub_directory_name/filename\",\n```\n\n**3)** run the test, in the danfojs directory terminal\n\n```python\nyarn test\n```\n\nLearn more about mocha [here](https://mochajs.org)\n\n## Contributing your changes to danfojs\n\n### **Committing your code**\n\nOnce you’ve made changes, you can see them by typing:\n\n```\ngit status\n```\n\nNext, you can track your changes using\n\n```\ngit add .\n```\n\nNext, you commit changes using:\n\n```\ngit commit -m \"Enter any commit message here\"\n```\n\n### **Pushing your changes**\n\nWhen you want your changes to appear publicly on your GitHub page, you can push to your forked repo with:\n\n```\ngit push\n```\n\n### Review your code and finally, make a pull request\n\nIf everything looks good, you are ready to make a pull request. A pull request is how code from a local repository becomes available to the GitHub community and can be reviewed and eventually merged into the master version. To submit a pull request:\n\n1. Navigate to your repository on GitHub\n2. Click on the Pull Request button\n3. Write a description of your changes in the Preview Discussion tab\n4. Click Send Pull Request.\n\nThis request then goes to the repository maintainers, and they will review the code and everything looks good, merge it with the master.\n\n**Hooray! You're now a contributor to danfojs. Now go bask in the euphoria!**\n\n## **Danfojs Internals**\n\nIn other to contribute to the code base of danfojs, there are some functions and properties provided to make implementation easy.\n\nThe folder **danfojs-base** contains the bulk of Danfojs modules, and these are simply extended or exported by the **danfojs-browser** and **danfojs-node** folders. The base class for Frames and Series is the NdFrame class which is found in the `danfojs-base/core/generic` file.&#x20;\n\n\n\n"
        },
        {
          "name": "LICENCE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) [2020] [danfo.js]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.3125,
          "content": "\n<div align=\"center\">\n  <img src=\"assets/logo.png\"><br>\n</div>\n\n-----------------\n\n## Danfojs: powerful javascript data analysis toolkit \n![Node.js CI](https://github.com/opensource9ja/danfojs/workflows/Node.js%20CI/badge.svg?branch=master)\n[![](https://data.jsdelivr.com/v1/package/npm/danfojs/badge?style=rounded)](https://www.jsdelivr.com/package/npm/danfojs)\n[![Coverage Status](https://coveralls.io/repos/github/opensource9ja/danfojs/badge.svg)](https://coveralls.io/github/opensource9ja/danfojs)\n![Twitter](https://img.shields.io/twitter/url?style=social&url=https%3A%2F%2Ftwitter.com%2FDanfoJs) \n<span class=\"badge-patreon\"><a href=\"https://www.patreon.com/bePatron?u=40496758\" title=\"Donate to this project using Patreon\"><img src=\"https://img.shields.io/badge/patreon-donate-yellow.svg\" alt=\"Patreon donate button\" /></a></span>\n\n## What is it?\n\n**Danfo.js** is a javascript package that provides fast, flexible, and expressive data\nstructures designed to make working with \"relational\" or \"labeled\" data both\neasy and intuitive. It is heavily inspired by [Pandas](https://pandas.pydata.org/pandas-docs/stable/) library, and provides a similar API. This means that users familiar with [Pandas](https://pandas.pydata.org/pandas-docs/stable/), can easily pick up danfo.js. \n\n## Main Features\n\n  - Danfo.js is fast and supports Tensorflow.js tensors out of the box. This means you can [convert Danfo data structure](https://danfo.jsdata.org/api-reference/dataframe/dataframe.tensor) to Tensors.\n  - Easy handling of [missing-data](https://danfo.jsdata.org/getting-started#missing-data) (represented as\n    `NaN`) in floating point as well as non-floating point data\n  - Size mutability: columns can be [inserted/deleted](https://danfo.jsdata.org/api-reference/dataframe#combining-comparing-joining-merging) from DataFrame\n  - Automatic and explicit [alignment](https://danfo.jsdata.org/api-reference/dataframe#reindexing-selection-label-manipulation): objects can\n    be explicitly aligned to a set of labels, or the user can simply\n    ignore the labels and let `Series`, `DataFrame`, etc. automatically\n    align the data for you in computations\n  - Powerful, flexible [groupby](https://danfo.jsdata.org/api-reference/groupby) functionality to perform\n    split-apply-combine operations on data sets, for both aggregating\n    and transforming data\n  - Make it easy to convert Arrays, JSONs, List or Objects, Tensors and \n    differently-indexed data structures\n    into DataFrame objects\n  - Intelligent label-based [slicing](https://danfo.jsdata.org/api-reference/dataframe/danfo.dataframe.loc), [fancy indexing](https://danfo.jsdata.org/api-reference/dataframe/danfo.dataframe.iloc), and [querying](https://danfo.jsdata.org/api-reference/dataframe/danfo.dataframe.query) of\n    large data sets\n  - Intuitive [merging](https://danfo.jsdata.org/api-reference/general-functions/danfo.merge) and [joining](https://danfo.jsdata.org/api-reference/general-functions/danfo.concat) data\n    sets\n  - Robust IO tools for loading data from [flat-files](https://danfo.jsdata.org/api-reference/input-output)\n    (CSV, Json, Excel).\n  - Powerful, flexible and intutive API for [plotting](https://danfo.jsdata.org/api-reference/plotting) DataFrames and Series interactively.\n  - [Timeseries](https://danfo.jsdata.org/api-reference/series#accessors)-specific functionality: date range\n    generation and date and time properties. \n  - Robust data preprocessing functions like [OneHotEncoders](https://danfo.jsdata.org/api-reference/general-functions/danfo.onehotencoder), [LabelEncoders](https://danfo.jsdata.org/api-reference/general-functions/danfo.labelencoder), and scalers like [StandardScaler](https://danfo.jsdata.org/api-reference/general-functions/danfo.standardscaler) and [MinMaxScaler](https://danfo.jsdata.org/api-reference/general-functions/danfo.minmaxscaler) are supported on DataFrame and Series\n\n\n## Installation\nThere are three ways to install and use Danfo.js in your application\n* For Nodejs applications, you can install the [__danfojs-node__]() version via package managers like yarn and/or npm:\n\n```bash\nnpm install danfojs-node\n\nor\n\nyarn add danfojs-node\n```\nFor client-side applications built with frameworks like React, Vue, Next.js, etc, you can install the [__danfojs__]() version:\n\n```bash\nnpm install danfojs\n\nor\n\nyarn add danfojs\n```\n\nFor use directly in HTML files, you can add the latest script tag from [JsDelivr](https://www.jsdelivr.com/package/npm/danfojs) to your HTML file:\n\n```html\n    <script src=\"https://cdn.jsdelivr.net/npm/danfojs@1.1.2/lib/bundle.js\"></script>\n```\nSee all available versions [here](https://www.jsdelivr.com/package/npm/danfojs)\n\n### Quick Examples\n* [Danfojs with HTML and vanilla JavaScript on CodePen](https://codepen.io/risingodegua/pen/bGpwyYW)\n* [Danfojs with React on Code Sandbox](https://codesandbox.io/s/using-danfojs-in-react-dwpv54?file=/src/App.js)\n* [Danfojs on ObservableHq](https://observablehq.com/@risingodegua/using-danfojs-on-observablehq)\n* [Danfojs in Nodejs on Replit](https://replit.com/@RisingOdegua/Danfojs-in-Nodejs)\n\n### Example Usage in the Browser\n```html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <script src=\"https://cdn.jsdelivr.net/npm/danfojs@1.1.2/lib/bundle.js\"></script>\n\n    <title>Document</title>\n  </head>\n\n  <body>\n    <div id=\"div1\"></div>\n    <div id=\"div2\"></div>\n    <div id=\"div3\"></div>\n\n    <script>\n\n      dfd.readCSV(\"https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv\")\n          .then(df => {\n\n              df['AAPL.Open'].plot(\"div1\").box() //makes a box plot\n\n              df.plot(\"div2\").table() //display csv as table\n\n              new_df = df.setIndex({ column: \"Date\", drop: true }); //resets the index to Date column\n              new_df.head().print() //\n              new_df.plot(\"div3\").line({\n                  config: {\n                      columns: [\"AAPL.Open\", \"AAPL.High\"]\n                  }\n              })  //makes a timeseries plot\n\n          }).catch(err => {\n              console.log(err);\n          })\n    </script>\n  </body>\n</html>\n\n```\n\nOutput in Browser:\n\n![](assets/browser-out.gif)\n\n### Example usage in Nodejs\n\n```javascript\nconst dfd = require(\"danfojs-node\");\n\nconst file_url =\n  \"https://web.stanford.edu/class/archive/cs/cs109/cs109.1166/stuff/titanic.csv\";\ndfd\n  .readCSV(file_url)\n  .then((df) => {\n    //prints the first five columns\n    df.head().print();\n\n    // Calculate descriptive statistics for all numerical columns\n    df.describe().print();\n\n    //prints the shape of the data\n    console.log(df.shape);\n\n    //prints all column names\n    console.log(df.columns);\n\n    // //prints the inferred dtypes of each column\n    df.ctypes.print();\n\n    //selecting a column by subsetting\n    df[\"Name\"].print();\n\n    //drop columns by names\n    let cols_2_remove = [\"Age\", \"Pclass\"];\n    let df_drop = df.drop({ columns: cols_2_remove, axis: 1 });\n    df_drop.print();\n\n    //select columns by dtypes\n    let str_cols = df_drop.selectDtypes([\"string\"]);\n    let num_cols = df_drop.selectDtypes([\"int32\", \"float32\"]);\n    str_cols.print();\n    num_cols.print();\n\n    //add new column to Dataframe\n\n    let new_vals = df[\"Fare\"].round(1);\n    df_drop.addColumn(\"fare_round\", new_vals, { inplace: true });\n    df_drop.print();\n\n    df_drop[\"fare_round\"].round(2).print(5);\n\n    //prints the number of occurence each value in the column\n    df_drop[\"Survived\"].valueCounts().print();\n\n    //print the last ten elementa of a DataFrame\n    df_drop.tail(10).print();\n\n    //prints the number of missing values in a DataFrame\n    df_drop.isNa().sum().print();\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n\n```\nOutput in Node Console:\n\n![](assets/node-rec.gif)\n## Notebook support\n* VsCode nodejs notebook extension now supports Danfo.js. See guide [here](https://marketplace.visualstudio.com/items?itemName=donjayamanne.typescript-notebook)\n* ObservableHQ Notebooks. See example notebook [here](https://observablehq.com/@risingodegua/using-danfojs-on-observablehq)\n\n#### [See the Official Getting Started Guide](https://danfo.jsdata.org/getting-started)\n\n## Documentation\nThe official documentation can be found [here](https://danfo.jsdata.org)\n\n## Danfo.js Official Book\n\nWe published a book titled \"Building Data Driven Applications with Danfo.js\". Read more about it [here](https://danfo.jsdata.org/building-data-driven-applications-with-danfo.js-book)\n\n## Discussion and Development\nDevelopment discussions take place [here](https://github.com/opensource9ja/danfojs/discussions). \n\n## Contributing to Danfo\nAll contributions, bug reports, bug fixes, documentation improvements, enhancements, and ideas are welcome. A detailed overview on how to contribute can be found in the [contributing guide](https://danfo.jsdata.org/contributing-guide).\n\n#### Licence [MIT](https://github.com/opensource9ja/danfojs/blob/master/LICENCE)\n\n#### Created by [Rising Odegua](https://github.com/risenW) and [Stephen Oni](https://github.com/steveoni)\n\n<a href=\"https://www.producthunt.com/posts/danfo-js?utm_source=badge-featured&utm_medium=badge&utm_souce=badge-danfo-js\" target=\"_blank\"><img src=\"https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=233871&theme=light\" alt=\"Danfo.js - Open Source JavaScript library for manipulating data. | Product Hunt Embed\" style=\"width: 250px; height: 54px;\" width=\"250px\" height=\"54px\" /></a>\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.5283203125,
          "content": "{\n    \"name\": \"danfo\",\n    \"version\": \"1.1.2\",\n    \"private\": true,\n    \"workspaces\": [\n        \"danfojs-node/**\",\n        \"danfojs-browser/**\"\n    ],\n    \"scripts\": {\n        \"install\": \"cd src/danfojs-base && yarn && cd ../danfojs-browser && yarn && cd ../danfojs-node && yarn\",\n        \"build\": \"cd src/danfojs-node && yarn build:clean && cd ../danfojs-browser && yarn build:clean\",\n        \"test\": \"cd src/danfojs-base && yarn && cd ../danfojs-node && yarn && yarn test:clean && cd ../danfojs-browser && yarn && yarn test:clean\"\n    }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "yarn.lock",
          "type": "blob",
          "size": 0.083984375,
          "content": "# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# yarn lockfile v1\n\n\n"
        }
      ]
    }
  ]
}