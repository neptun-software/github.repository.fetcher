{
  "metadata": {
    "timestamp": 1736564055448,
    "page": 603,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "exhibitionist-digital/ultra",
      "stars": 2991,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.21484375,
          "content": ".ultra\ndeno.lock\n.DS_Store\nNOTES.md\n*.png\n**/src/content\n\n# test fixture output\ntest/fixture/output\n\n# tools/dev.ts generated files\nexamples/*/deno.dev.json\nexamples/*/importMap.dev.json\n\n# Local Netlify folder\n.netlify\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.556640625,
          "content": "# Contributor Guidelines\n\n## Developer Setup\n\nThe easiest way to work on Ultra is to clone this repo and run the dev task. It\nwill ask you which example you would like to work on and start that example in\ndev mode, so it can be used to test and work on changes to the Ultra codebase\neasily.\n\n```\ndeno task dev\n```\n\n---\n\n## Development Standards\n\n### Pull Requests\n\nBefore submitting a PR make sure that the following commands are run without\nerror:\n\n```\ndeno fmt\ndeno lint\ndeno task test\n```\n\nNote that `deno fmt` needs to be run on any changes to markdown or other\nnon-source code files.\n\nThe name or description of a Pull Request should be prefixed (pre-appended) with\none of the following tokens (adapted from the\n[Conventional Commits standard](https://www.conventionalcommits.org/en/v1.0.0/)):\n\n1. **feat:** - PR is a new Ultra feature.\n2. **fix:** - PR is a bug fix.\n3. **doc:** - PR is a documentation change.\n4. **test:** - PR contains only unit and/or end-to-end tests.\n5. **chore:** - PR involves code cleanup or minor changes.\n6. **style:** - PR involves formatting or linting changes.\n7. **refactor:** - PR contains code refactoring.\n\nPlease note:\n\n- The prefix token must be followed by a colon (:).\n- Add an exclamation point (!) before the colon if the PR contains a breaking\n  change.\n- An optional one-word scope indicator may be added in parentheses prior to the\n  colon (and the '!' if used).s\n\nNote that a PR might contain code that covers a number of overlapping areas,\nsuch as one involving a new feature and containing tests. Select the prefix that\nencompasses the majority of the PR's code.\n\nAlthough not required, it is a good idea to prefix commit descriptions too.\n\nHere are some PR naming examples with a proper prefix ():\n\n```\nfeat: Add CSS compression\nfix: End-to-end test fixes\ndoc(contrib): Update contributor guidelines\nchore(build): Update Deno version\nrefactor!: Convert Ultra to Angular\n```\n\nNaming PRs in this fashion will help in the creation of release notes.\n\n### Coding Style\n\nOur coding style standard follows the\n[Deno style guide](https://deno.land/manual/contributing/style_guide.md) (DSG).\nPlease pay particular attention to the following style guide items:\n\n- JSDoc-style descriptions (C-style comments) should be added to all exported\n  functions (see\n  https://deno.land/manual/contributing/style_guide.md#use-jsdoc-for-exported-symbols).\n- Unit tests are required for each module and test names should be explicit (see\n  https://deno.land/manual/contributing/style_guide.md#each-module-should-come-with-a-test-module).\n- Top level functions should not use arrow syntax (See\n  https://deno.land/manual/contributing/style_guide.md#top-level-functions-should-not-use-arrow-syntax).\n- Exported functions should not have more than 2 arguments; put the rest into an\n  options object (see\n  https://deno.land/manual/contributing/style_guide.md#exported-functions-max-2-args-put-the-rest-into-an-options-object).\n- Export all interfaces that are used as parameters to an exported member (see\n  https://deno.land/manual/contributing/style_guide.md#export-all-interfaces-that-are-used-as-parameters-to-an-exported-member)\n\n---\n\n## Discord\n\nWhile we encourage new contributions, it's a good idea propose a code change or\nnew feature on [Discord](https://discord.gg/XDC5WxGHb2) before you start\ndevelopment.\n\n---\n\n## VSCode Configuration\n\nThis repo has VSCode editor configs to help when working on this project. They\nare found in the `.devcontainer` and `.vscode` folders.\n\nIf there is a simple config that doesn't conflict with other tooling and makes\nyour life easier, feel free to open a PR with it.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "MIT License\n\nCopyright (c) 2022 Exhibitionist Digital\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.990234375,
          "content": "<div align=\"center\">\n<br />\n<img src=\"https://raw.githubusercontent.com/exhibitionist-digital/ultra/main/examples/ultra-website/public/ultra.svg\" height=\"250\" />\n\n### Ultra 2.0\n\n#### Zero-Legacy Deno/React Suspense SSR Framework<sup>*</sup>\n\n[![Discord][discord-badge]][discord]\n![GitHub Workflow Status](https://github.com/exhibitionist-digital/ultra/actions/workflows/ci.yml/badge.svg)\n[![Deno module](https://shield.deno.dev/x/ultra)](https://deno.land/x/ultra)\n![Deno compatibility](https://shield.deno.dev/deno/^1.27.1)\n\n</div>\n\n\\* If you want to get very meta (not facebook), **Ultra** can be viewed as a\ntiny bridge to utilise native browser features üåê whilst using popular front-end\nlibraries. üß∞\n\n## üßô Start your journey\n\nHere's a basic **Ultra** project to set you on your way.\n\n```sh\ndeno run -A -r https://deno.land/x/ultra/create.ts\n```\n\n## ‚ú® What's new\n\n**Ultra** allows you to write web-apps which massively simplify your tool chain.\nYou write ESM, we ship ESM. Where we are going, there is no \"bundling\" (it feels\nso 2018 just saying that word).\n\n- Less opinionated, BYO routing, styling, data fetching, and head libraries\n- Support for much of the React ecosystem by custom server/client\n  controls<sup>**</sup>\n- Native import maps in browser ü§ñ\n- Localised import maps for production üî•\n- API routing\n- Overhaul of internal source code\n- Updated Deno Deploy support\n\n\\*\\* _Examples include (but not limited to) `react-query` `twind` `stitches`\n`react-router` `wouter` `mdx`_ **@__@**\n\n**Does Ultra _'ship JS'_?**\n\nYes, **Ultra** creates rich web applications which allow complex client-side\nrouting, allow components to persist through route changes (media players,\ninteractive elements, etc).\n\nOur goal is to both write _AND_ ship source code that works the same way on\nserver/runtime and client. We view the browser as more than just a \"target\".\nBrowser is life, and JavaScript is good.\n\n**Can I use TypeScript and/or JSX?**\n\nIf you want.\n\n**What native browser features should we all be using more?**\n\nUnbundled ESM, service workers, universal import maps, cascading style sheets.\n\n**Ultra always has been (and always will be) powered by the following\nhot-takes:**\n\n- **ESM** is non-negotiable in {currentYear}\n- **SSR** is non-negotiable in {currentYear}\n- Bundling is an **anti-pattern** in {currentYear}\n- **Data can be requested anywhere, and is accessible on the server, always**\n- **Lazy routing with dynamic imports** trumps FS routing\n- **Less magic** in tooling and frameworks is a good thing\n- **Simplify** your workflow and tech stack at all costs - life is too short\n- **Streams** are neat\n\n---\n\n### üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Community\n\nWe have the [Discord](https://discord.gg/XDC5WxGHb2). Come say 'sup.\n\n### üßü Contributions\n\nThe **Ultra** community welcomes outside contributions. See the\n[Contributor Guidelines](./CONTRIBUTING.md) for details.\n\n### ü¶• Wishlist\n\nHere some things we are interested in for the future of JS and/or Ultra:\n\n- React [ESM exports](https://github.com/facebook/react/issues/10021)\n- [AbTs: Anything but TypeScript](https://tc39.es/proposal-type-annotations)\n- Libraries supporting\n  [optimal JavaScript module design](https://jaydenseric.com/blog/optimal-javascript-module-design)\n- React [resources](https://github.com/reactjs/rfcs/pull/219) for streaming head\n  management\n- React [async/await support](https://github.com/reactjs/rfcs/pull/229)\n- [Native import maps](https://caniuse.com/import-maps) support in Safari and\n  Firefox\n- [Dynamic import](https://github.com/denoland/deploy_feedback/issues/1) support\n  on Deno Deploy\n- [Native CSS modules](https://css-tricks.com/css-modules-the-native-ones/)\n- More and better ESM CDNs\n\n**Thank you for going on this journey with us.**\n\n[docs-badge]: https://img.shields.io/github/v/release/exhibitionist-digital/ultra?label=Docs&logo=deno&color=000000&\n[docs]: https://ultrajs.dev/docs\n[discord-badge]: https://img.shields.io/discord/956480805088153620?logo=discord&label=Discord&color=000000&&logoColor=ffffff\n[discord]: https://discord.gg/XDC5WxGHb2\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.ts",
          "type": "blob",
          "size": 0.8193359375,
          "content": "import { crayon, outdent } from \"./lib/build/deps.ts\";\nimport type { BuildOptions, BuildPlugin } from \"./lib/build/types.ts\";\nimport { UltraBuilder } from \"./lib/build/ultra.ts\";\n\n/**\n * Re-export these types as convenience to build plugin authors\n */\nexport type { BuildPlugin };\n\nexport function createBuilder(options: Partial<BuildOptions>) {\n  return new UltraBuilder(options, (builder) => {\n    // deno-fmt-ignore\n    console.log(outdent`\\n\n      You can now deploy the \"${crayon.lightBlue(builder.context.output)}\" output directory to a platform of your choice.\n      Instructions for common deployment platforms can be found at ${crayon.green('https://ultrajs.dev/docs#deploying')}.\\n\n      Alternatively, you can cd into \"${crayon.lightBlue(builder.context.output)}\" and run: ${crayon.underline(\"deno task start\")}\n    `);\n  });\n}\n"
        },
        {
          "name": "create.ts",
          "type": "blob",
          "size": 2.4072265625,
          "content": "// IMPORTS\nimport { Config, Libraries } from \"./lib/create/common/config.ts\";\nimport { ask, confirm } from \"./lib/create/common/ask.ts\";\nimport { createUltraApp } from \"./lib/create/common/createUltraApp.ts\";\nimport { c, gradient } from \"./lib/create/common/styling.ts\";\n\n//INIT\n\nconsole.log(gradient(\n  `\n‚ñÑ‚Ä¢ ‚ñÑ‚ñå‚ñÑ‚ñÑ‚ñå  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ   ‚ñÑ‚ñÑ‚ñÑ¬∑ \n‚ñà‚ñ™‚ñà‚ñà‚ñå‚ñà‚ñà‚Ä¢  ‚Ä¢‚ñà‚ñà  ‚ñÄ‚ñÑ ‚ñà¬∑‚ñê‚ñà ‚ñÄ‚ñà \n‚ñà‚ñå‚ñê‚ñà‚ñå‚ñà‚ñà‚ñ™   ‚ñê‚ñà.‚ñ™‚ñê‚ñÄ‚ñÄ‚ñÑ ‚ñÑ‚ñà‚ñÄ‚ñÄ‚ñà \n‚ñê‚ñà‚ñÑ‚ñà‚ñå‚ñê‚ñà‚ñå‚ñê‚ñå ‚ñê‚ñà‚ñå¬∑‚ñê‚ñà‚Ä¢‚ñà‚ñå‚ñê‚ñà ‚ñ™‚ñê‚ñå\n ‚ñÄ‚ñÄ‚ñÄ .‚ñÄ‚ñÄ‚ñÄ  ‚ñÄ‚ñÄ‚ñÄ .‚ñÄ  ‚ñÄ ‚ñÄ  ‚ñÄ`,\n  .5,\n));\nconsole.log(`\n\\nWelcome to ${gradient(\"Ultra\")}\\n\nLet's get you setup with your new ${gradient(\"Ultra\")} project.\n`);\n\nconst projectName =\n  (await ask<string>(`\\nWhat is the name of your project?`)) ||\n  \"my-ultra-app\";\n\nconst useTypescript = await confirm(\"\\nDo you want to use TypeScript?\");\n\n// if arguments were provided, use them instead of asking the user\n\nif (Deno.args.length) {\n  // CONFIG GENERATION\n\n  const config: Config = {\n    ts: useTypescript,\n    name: projectName,\n    cwd: Deno.cwd(),\n    includes: Deno.args as Libraries[],\n  };\n\n  // FILE CREATION AND FORMATTING, will exit\n\n  await createUltraApp(config);\n}\n\n// or else, continue\nconst styleLibrary = await ask<Libraries>(\n  `\\nWhich css/style library do you want to use?\\n'${c(0, \"(0) None \")} ${\n    c(1, \"(1) Twind \")\n  } ${c(2, \"(2) Stitches \")}`,\n  [\"none\", \"twind\", \"stitches\"],\n);\n\nconst routingLibrary = await ask<Libraries>(\n  `\\nWhich routing library do you want to use?\\n${c(0, \"(0) None \")} ${\n    c(1, \"(1) React Router \")\n  } ${c(2, \"(2) Wouter \")}`,\n  [\"none\", \"react-router\", \"wouter\"],\n);\n\nconst headLibrary = await ask<Libraries>(\n  `\\nWhich head management library do you want to use?\\n${c(0, \"(0) None \")} ${\n    c(1, \"(1) React Helmet\")\n  }`,\n  [\"none\", \"react-helmet-async\"],\n);\n\nconst queryLibrary = await ask<Libraries>(\n  `\\nWhich query library do you want to use?\\n${c(0, \"(0) None\")} ${\n    c(1, \"(1) React Query\")\n  }`,\n  [\"none\", \"react-query\"],\n);\n\n// CONFIG GENERATION\n\nfunction parseImports() {\n  const imports = [\n    styleLibrary,\n    routingLibrary,\n    headLibrary,\n    queryLibrary,\n  ];\n  return imports as Libraries[];\n}\n\nconst config: Config = {\n  ts: useTypescript,\n  name: projectName,\n  cwd: Deno.cwd(),\n  includes: parseImports(),\n};\n\n// FILE CREATION AND FORMATTING, will exit\nawait createUltraApp(config);\n"
        },
        {
          "name": "deno.json",
          "type": "blob",
          "size": 1.2138671875,
          "content": "{\n  \"tasks\": {\n    \"dev\": \"deno run -A tools/dev.ts\",\n    \"test\": \"deno task test:unit && deno task test:fixture && deno task test:examples\",\n    \"test:unit\": \"deno test -A --reload ./test/unit\",\n    \"test:fixture\": \"deno run -A --reload ./test/fixture.ts\",\n    \"test:examples\": \"deno run -A --reload ./tools/test-examples.ts basic with-csr with-unocss with-wouter\",\n    \"version-bump:minor\": \"deno run -A tools/patch.ts --release=minor\",\n    \"version-bump:patch\": \"deno run -A tools/patch.ts --release=patch\"\n  },\n  \"lock\": false,\n  \"lint\": {\n    \"exclude\": [\n      \".deno-cache\"\n    ]\n  },\n  \"fmt\": {\n    \"exclude\": [\n      \".deno-cache\",\n      \"examples/**/.ultra\",\n      \"examples/**/importMap.dev.json\",\n      \"examples/**/deno.dev.json\",\n      \"examples/with-netlify-(WIP)/.netlify/*\",\n      \"examples/ultra-website/src/content/*\",\n      \"examples/with-mdx/src/content/*\",\n      \"test/fixture/output/*\"\n    ],\n    \"options\": {\n      \"indentWidth\": 2,\n      \"useTabs\": false,\n      \"singleQuote\": false\n    }\n  },\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsxdev\",\n    \"jsxImportSource\": \"react\",\n    \"lib\": [\n      \"deno.ns\",\n      \"dom\",\n      \"dom.iterable\",\n      \"dom.asynciterable\"\n    ]\n  },\n  \"importMap\": \"./importMap.dev.json\"\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "hooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "hydrate.js",
          "type": "blob",
          "size": 1.0224609375,
          "content": "import { createElement as h, startTransition, StrictMode } from \"react\";\nimport { hydrateRoot } from \"react-dom/client\";\n\n/**\n * @see https://caniuse.com/requestidlecallback\n */\nconst requestIdleCallbackUltra = (typeof self !== \"undefined\" &&\n  self.requestIdleCallback &&\n  self.requestIdleCallback.bind(window)) ||\n  function (cb) {\n    const start = Date.now();\n    return setTimeout(function () {\n      cb({\n        didTimeout: false,\n        timeRemaining() {\n          return Math.max(0, 50 - (Date.now() - start));\n        },\n      });\n    }, 1);\n  };\n\n/**\n * @param {Element | Document} container\n * @param {React.ReactNode} element\n * @param {import('react-dom/client').HydrationOptions} [options]\n */\nexport default function hydrate(container, element, options) {\n  requestIdleCallbackUltra(() => {\n    /**\n     * @see https://reactjs.org/docs/react-api.html#starttransition\n     */\n    startTransition(() => {\n      hydrateRoot(\n        container,\n        h(StrictMode, { children: element }),\n        options,\n      );\n    });\n  });\n}\n"
        },
        {
          "name": "importMap.dev.json",
          "type": "blob",
          "size": 2.466796875,
          "content": "{\n  \"imports\": {\n    \"react\": \"https://esm.sh/stable/react@18.2.0?dev\",\n    \"react/\": \"https://esm.sh/stable/react@18.2.0&dev/\",\n    \"react-dom\": \"https://esm.sh/stable/react-dom@18.2.0?external=react&dev\",\n    \"react-dom/\": \"https://esm.sh/stable/react-dom@18.2.0&external=react&dev/\",\n    \"react-router-dom\": \"https://esm.sh/v122/react-router-dom@6.3.0?external=react\",\n    \"react-router-dom/server\": \"https://esm.sh/v122/react-router-dom@6.3.0/server?external=react\",\n    \"preact\": \"https://esm.sh/v122/preact@10.11.0\",\n    \"preact/\": \"https://esm.sh/v122/preact@10.11.0/\",\n    \"wouter\": \"https://esm.sh/v122/wouter@2.10.0?external=react\",\n    \"wouter/static-location\": \"https://esm.sh/v122/wouter@2.10.0/static-location?external=wouter\",\n    \"@tanstack/react-query\": \"https://esm.sh/v122/@tanstack/react-query@4.13.0?external=react\",\n    \"@tanstack/react-query-devtools\": \"https://esm.sh/v122/@tanstack/react-query-devtools@4.13.0?external=react,@tanstack/react-query&dev\",\n    \"@trpc/server\": \"https://esm.sh/v122/@trpc/server@10.0.0\",\n    \"@trpc/server/\": \"https://esm.sh/v122/@trpc/server@10.0.0/\",\n    \"@trpc/client\": \"https://esm.sh/v122/*@trpc/client@10.0.0\",\n    \"@trpc/client/\": \"https://esm.sh/v122/*@trpc/client@10.0.0/\",\n    \"@trpc/react-query\": \"https://esm.sh/v122/*@trpc/react-query@10.0.0\",\n    \"zod\": \"https://deno.land/x/zod@v3.19.1/mod.ts\",\n    \"@mdx-js/run\": \"https://esm.sh/v122/@mdx-js/mdx@2.1.3/lib/run.js\",\n    \"@mdx-js/react\": \"https://esm.sh/v122/@mdx-js/react@2.1.3?external=react\",\n    \"@twind/core\": \"https://esm.sh/v122/@twind/core@1.0.1\",\n    \"@twind/preset-autoprefix\": \"https://esm.sh/v122/@twind/preset-autoprefix@1.0.1\",\n    \"@twind/preset-tailwind\": \"https://esm.sh/v122/*@twind/preset-tailwind@1.0.1\",\n    \"@emotion/react\": \"https://esm.sh/v122/@emotion/react@11.10.0?external=react\",\n    \"@emotion/styled\": \"https://esm.sh/v122/@emotion/styled@11.10.0?external=react,@emotion/react\",\n    \"@emotion/cache\": \"https://esm.sh/v122/@emotion/cache@11.10.0\",\n    \"@mui/material\": \"https://esm.sh/v122/@mui/material@5.10.3?bundle&external=react,@emotion/react,@emotion/styled\",\n    \"@mui/material/styles\": \"https://esm.sh/v122/@mui/material@5.10.3/styles\",\n    \"@mui/material/colors\": \"https://esm.sh/v122/@mui/material@5.10.3/colors\",\n    \"@stitches/react\": \"https://esm.sh/v122/@stitches/react@1.2.8?external=react\",\n    \"react-helmet-async\": \"https://esm.sh/v122/react-helmet-async@1.3.0?external=react\",\n    \"@ultra/qrcode/\": \"https://deno.land/x/qrcode@v2.0.0/\",\n    \"ultra/\": \"./\"\n  }\n}\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "server.ts",
          "type": "blob",
          "size": 0.1181640625,
          "content": "export { createRouter, createServer } from \"./lib/server.ts\";\nexport type { Context, StatusCode } from \"./lib/types.ts\";\n"
        },
        {
          "name": "stream.ts",
          "type": "blob",
          "size": 0.095703125,
          "content": "export {\n  createHeadInsertionTransformStream,\n  createTransformStream,\n} from \"./lib/stream.ts\";\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.ts",
          "type": "blob",
          "size": 0.107421875,
          "content": "/* Do not set this manually, run tools/patch.ts if releasing a new version */\nexport const VERSION = \"2.3.8\";\n"
        }
      ]
    }
  ]
}