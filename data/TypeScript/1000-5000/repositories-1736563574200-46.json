{
  "metadata": {
    "timestamp": 1736563574200,
    "page": 46,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/tsdoc",
      "stars": 4777,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 3.0205078125,
          "content": "# Prevent Git to auto detect text files and perform LF normalization.\n* -text\n\n# The item with `binary` is treated as binary file.\n# The item with `eol=lf` is converted to LF on checkin, back to LF on checkout.\n# The item with `eol=crlf` is converted to LF on checkin, back to CRLF on checkout.\n\n# To get full extension list in the repo, remove the node_modules folder and run the following PowerShell cmdlet.\n# PS> Get-ChildItem . -Recurse | Where-Object { -not $_.PSIsContainer } | ForEach-Object { $_.Extension.ToLower() } | Sort-Object | Get-Unique\n\n# If new extensions are added, please refresh the repo with the following commands.\n# Reference: https://git-scm.com/docs/gitattributes\n# > rm .git/index     # Remove the index to force Git to\n# > git reset         # re-scan the working directory\n# > git status        # Show files that will be normalized\n# > git add -u\n# > git add .gitattributes\n# > git commit -m \"Apply end-of-line normalization based on updated .gitattributes file\"\n\n*.aspx            text eol=crlf\n*.bowerrc         text eol=lf\n*.cmd             text eol=crlf\n*.command         text eol=lf\n*.config          text eol=crlf\n*.cs              text eol=crlf\n*.csproj          text eol=crlf\n*.css             text eol=crlf\n*.dll             binary\n*.editorconfig    text eol=lf\n*.eot             binary\n*.example         text eol=crlf\n*.exe             binary\n*.gif             binary\n*.gitattributes   text eol=lf\n*.gitignore       text eol=lf\n*.gitmodules      text eol=lf\n*.html            text eol=crlf\n*.ico             binary\n*.jpg             binary\n*.js              text eol=crlf\n*.json            text eol=crlf\n*.less            text eol=crlf\n*.map             text eol=lf\n*.md              text eol=crlf\n*.npmignore       text eol=lf\n*.png             binary\n*.ps1             text eol=crlf\n*.rels            text eol=crlf\n*.resx            text eol=crlf\n*.scss            text eol=crlf\n*.sln             text eol=crlf\n*.svg             text elf=lf\n*.ts              text eol=crlf\n*.tsx             text eol=crlf\n*.ttf             binary\n*.woff            binary\n*.wsp             binary\n*.xml             text eol=crlf\n\n# NPM \"bin\" scripts MUST have LF, or else the executable fails to run on Mac.\n# This fnmatch expression only matches files in a \"bin\" folder and without\n# a period in the filename.\n/*/*/bin/+([!.]) -text\n\n# Don't allow people to merge changes to these generated files, because the result\n# may be invalid.  You need to run \"rush update\" again.\npnpm-lock.yaml               merge=text\nshrinkwrap.yaml              merge=binary\nnpm-shrinkwrap.json          merge=binary\nyarn.lock                    merge=binary\n\n# Rush's JSON config files use JavaScript-style code comments.  The rule below prevents pedantic\n# syntax highlighters such as GitHub's from highlighting these comments as errors.  Your text editor\n# may also require a special configuration to allow comments in JSON.\n#\n# For more information, see this issue: https://github.com/microsoft/rushstack/issues/1088\n#\n*.json                       linguist-language=JSON-with-Comments\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.333984375,
          "content": "# Logs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Runtime data\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules\njspm_packages\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n\n# next.js build output\n.next\n\n# OS X temporary files\n.DS_Store\n\n# IntelliJ IDEA project files; if you want to commit IntelliJ settings, this recipe may be helpful:\n# https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n.idea/\n*.iml\n\n# Rush temporary files\ncommon/deploy/\ncommon/temp/\ncommon/autoinstallers/*/.npmrc\n**/.rush/temp/\n*.lock\n\n# Heft temporary files\n.cache\n.heft\n\n# Common toolchain intermediate files\ntemp\nlib\nlib-amd\nlib-es6\nlib-esnext\nlib-commonjs\ndist\n*.scss.ts\n*.sass.ts\n\n# Visual Studio Code\n.vscode\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 2.1171875,
          "content": "#-------------------------------------------------------------------------------------------------------------------\n# Keep this section in sync with .gitignore\n#-------------------------------------------------------------------------------------------------------------------\n\n# Logs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Runtime data\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n\n# next.js build output\n.next\n\n# OS X temporary files\n.DS_Store\n\n# Rush temporary files\ncommon/deploy/\ncommon/temp/\ncommon/autoinstallers/*/.npmrc\n**/.rush/temp/\n\n# Common toolchain intermediate files\ntemp\nlib\nlib-amd\nlib-es6\nlib-esnext\nlib-commonjs\ndist\n*.scss.ts\n*.sass.ts\n\n# Visual Studio Code\n.vscode\n\n# Heft\n*/.heft/build-cache/**\n*/.heft/temp/**\n\n#-------------------------------------------------------------------------------------------------------------------\n# Prettier-specific overrides\n#-------------------------------------------------------------------------------------------------------------------\n\n# Machine-egnerated files\ncommon/reviews\ncommon/changes\ncommon/scripts\ncommon/config/rush/browser-approved-packages.json\ncommon/config/rush/nonbrowser-approved-packages.json\nCHANGELOG.*\npnpm-lock.yaml\nbuild-tests/*/etc\ndist-dev\ndist-prod\n\n# We'll consider enabling this later; Prettier reformats code blocks, which affects end-user content\n*.md\n\n# Ignore .json files which may contain intentional syntax errors\n**/__tests__/assets/**/*.json\n"
        },
        {
          "name": ".prettierrc.js",
          "type": "blob",
          "size": 0.52734375,
          "content": "// Documentation for this file: https://prettier.io/docs/en/configuration.html\nmodule.exports = {\n  // We use a larger print width because Prettier's word-wrapping seems to be tuned\n  // for plain JavaScript without type annotations\n  printWidth: 110,\n\n  // Use .gitattributes to manage newlines\n  endOfLine: 'auto',\n\n  // Use single quotes instead of double quotes\n  singleQuote: true,\n\n  // For ES5, trailing commas cannot be used in function parameters; it is counterintuitive\n  // to use them for arrays only\n  trailingComma: 'none'\n};\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0693359375,
          "content": "Copyright (c) Microsoft Corporation. All rights reserved.\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.376953125,
          "content": "<table><tr><td>\n<a href=\"https://tsdoc.org\"><img src=\"https://tsdoc.org/images/site/tsdoc-open.svg\" width=\"300px\" /></a>\n<p align=\"center\"><a href=\"https://tsdoc.org/\">https://tsdoc.org/</a></p>\n</td></tr></table>\n\n[![#tsdoc chat room](https://img.shields.io/badge/zulip-join_chat-brightgreen.svg)](https://rushstack.zulipchat.com/#narrow/stream/266672-tsdoc) &nbsp; [![Build Status](https://dev.azure.com/RushStack/Gearbox%20GitHub%20Projects/_apis/build/status/tsdoc/TSDoc%20CI%20Build?branchName=main)](https://dev.azure.com/RushStack/Gearbox%20GitHub%20Projects/_build/latest?definitionId=5&branchName=main)\n\n\n## Documentation Links\n\n- [What is TSDoc?](https://tsdoc.org/) - project overview and roadmap\n- [Zulip chat room](https://rushstack.zulipchat.com/#narrow/stream/266672-tsdoc) - live help from other developers\n- [TSDoc tag reference](https://tsdoc.org/pages/tags/alpha/) - learn about syntax elements such as `@param`, `@remarks`, etc.\n- [TSDoc Playground](https://tsdoc.org/play) - interactive demo of the parser engine\n- [Contributing: Building the projects](https://tsdoc.org/pages/contributing/building/) - how to build and debug the projects in this repo\n- [Contributing: Submitting a PR](https://tsdoc.org/pages/contributing/pr_checklist/) - instructions for making a pull request\n\n\n## Projects in this monorepo\n\n| Folder | Version | Changelog | Description |\n| ------ | ------- | --------- | ------- |\n| [/api-demo](./api-demo/) | (local project) |  | Code samples illustrating how to use the **@microsoft/tsdoc** parser |\n| [/eslint-plugin](./eslint-plugin/) | [![npm version](https://badge.fury.io/js/eslint-plugin-tsdoc.svg)](https://badge.fury.io/js/eslint-plugin-tsdoc) | [changelog](./eslint-plugin/CHANGELOG.md) | [eslint-plugin-tsdoc](https://www.npmjs.com/package/eslint-plugin-tsdoc) plugin for ESLint|\n| [/playground](./playground/) | (local project) |  | Source code for the [TSDoc Playground](https://tsdoc.org/play) web app |\n| [/tsdoc](./tsdoc/) | [![npm version](https://badge.fury.io/js/%40microsoft%2Ftsdoc.svg)](https://badge.fury.io/js/%40microsoft%2Ftsdoc) | [changelog](./tsdoc/CHANGELOG.md) | [@microsoft/tsdoc](https://www.npmjs.com/package/@microsoft/tsdoc) parser library |\n| [/tsdoc-config](./tsdoc/) | [![npm version](https://badge.fury.io/js/%40microsoft%2Ftsdoc-config.svg)](https://badge.fury.io/js/%40microsoft%2Ftsdoc-config) | [changelog](./tsdoc-config/CHANGELOG.md) | [@microsoft/tsdoc-config](https://www.npmjs.com/package/@microsoft/tsdoc-config) loader for **tsdoc.json** |\n\n\n##  Contributor Notice\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.6923828125,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.8 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "api-demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "eslint-plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "playground",
          "type": "tree",
          "content": null
        },
        {
          "name": "rush.json",
          "type": "blob",
          "size": 19.9208984375,
          "content": "/**\n * This is the main configuration file for Rush.\n * For full documentation, please see https://rushjs.io\n */\n{\n  \"$schema\": \"https://developer.microsoft.com/json-schemas/rush/v5/rush.schema.json\",\n\n  /**\n   * (Required) This specifies the version of the Rush engine to be used in this repo.\n   * Rush's \"version selector\" feature ensures that the globally installed tool will\n   * behave like this release, regardless of which version is installed globally.\n   *\n   * The common/scripts/install-run-rush.js automation script also uses this version.\n   *\n   * NOTE: If you upgrade to a new major version of Rush, you should replace the \"v5\"\n   * path segment in the \"$schema\" field for all your Rush config files.  This will ensure\n   * correct error-underlining and tab-completion for editors such as VS Code.\n   */\n  \"rushVersion\": \"5.145.0-pr5009.2\",\n\n  /**\n   * The next field selects which package manager should be installed and determines its version.\n   * Rush installs its own local copy of the package manager to ensure that your build process\n   * is fully isolated from whatever tools are present in the local environment.\n   *\n   * Specify one of: \"pnpmVersion\", \"npmVersion\", or \"yarnVersion\".  See the Rush documentation\n   * for details about these alternatives.\n   */\n  \"pnpmVersion\": \"9.14.4\",\n\n  // \"npmVersion\": \"6.14.15\",\n  // \"yarnVersion\": \"1.9.4\",\n\n  /**\n   * Older releases of the Node.js engine may be missing features required by your system.\n   * Other releases may have bugs.  In particular, the \"latest\" version will not be a\n   * Long Term Support (LTS) version and is likely to have regressions.\n   *\n   * Specify a SemVer range to ensure developers use a Node.js version that is appropriate\n   * for your repo.\n   *\n   * LTS schedule: https://nodejs.org/en/about/releases/\n   * LTS versions: https://nodejs.org/en/download/releases/\n   */\n  \"nodeSupportedVersionRange\": \">=18.15.0 <19.0.0 || >=20.9.0 <21.0.0 || >=22.12.0 <23.0.0\",\n\n  /**\n   * If the version check above fails, Rush will display a message showing the current\n   * node version and the supported version range. You can use this setting to provide\n   * additional instructions that will display below the warning, if there's a specific\n   * tool or script you'd like the user to use to get in line with the expected version.\n   */\n  // \"nodeSupportedVersionInstructions\": \"Run 'nvs use' to switch to the expected node version.\",\n\n  /**\n   * Odd-numbered major versions of Node.js are experimental.  Even-numbered releases\n   * spend six months in a stabilization period before the first Long Term Support (LTS) version.\n   * For example, 8.9.0 was the first LTS version of Node.js 8.  Pre-LTS versions are not recommended\n   * for production usage because they frequently have bugs.  They may cause Rush itself\n   * to malfunction.\n   *\n   * Rush normally prints a warning if it detects a pre-LTS Node.js version.  If you are testing\n   * pre-LTS versions in preparation for supporting the first LTS version, you can use this setting\n   * to disable Rush's warning.\n   */\n  // \"suppressNodeLtsWarning\": false,\n\n  /**\n   * If you would like the version specifiers for your dependencies to be consistent, then\n   * uncomment this line. This is effectively similar to running \"rush check\" before any\n   * of the following commands:\n   *\n   *   rush install, rush update, rush link, rush version, rush publish\n   *\n   * In some cases you may want this turned on, but need to allow certain packages to use a different\n   * version. In those cases, you will need to add an entry to the \"allowedAlternativeVersions\"\n   * section of the common-versions.json.\n   */\n  \"ensureConsistentVersions\": true,\n\n  /**\n   * Large monorepos can become intimidating for newcomers if project folder paths don't follow\n   * a consistent and recognizable pattern.  When the system allows nested folder trees,\n   * we've found that teams will often use subfolders to create islands that isolate\n   * their work from others (\"shipping the org\").  This hinders collaboration and code sharing.\n   *\n   * The Rush developers recommend a \"category folder\" model, where buildable project folders\n   * must always be exactly two levels below the repo root.  The parent folder acts as the category.\n   * This provides a basic facility for grouping related projects (e.g. \"apps\", \"libraries\",\n   * \"tools\", \"prototypes\") while still encouraging teams to organize their projects into\n   * a unified taxonomy.  Limiting to 2 levels seems very restrictive at first, but if you have\n   * 20 categories and 20 projects in each category, this scheme can easily accommodate hundreds\n   * of projects.  In practice, you will find that the folder hierarchy needs to be rebalanced\n   * occasionally, but if that's painful, it's a warning sign that your development style may\n   * discourage refactoring.  Reorganizing the categories should be an enlightening discussion\n   * that brings people together, and maybe also identifies poor coding practices (e.g. file\n   * references that reach into other project's folders without using Node.js module resolution).\n   *\n   * The defaults are projectFolderMinDepth=1 and projectFolderMaxDepth=2.\n   *\n   * To remove these restrictions, you could set projectFolderMinDepth=1\n   * and set projectFolderMaxDepth to a large number.\n   */\n  // \"projectFolderMinDepth\": 2,\n  // \"projectFolderMaxDepth\": 2,\n\n  /**\n   * Today the npmjs.com registry enforces fairly strict naming rules for packages, but in the early\n   * days there was no standard and hardly any enforcement.  A few large legacy projects are still using\n   * nonstandard package names, and private registries sometimes allow it.  Set \"allowMostlyStandardPackageNames\"\n   * to true to relax Rush's enforcement of package names.  This allows upper case letters and in the future may\n   * relax other rules, however we want to minimize these exceptions.  Many popular tools use certain punctuation\n   * characters as delimiters, based on the assumption that they will never appear in a package name; thus if we relax\n   * the rules too much it is likely to cause very confusing malfunctions.\n   *\n   * The default value is false.\n   */\n  // \"allowMostlyStandardPackageNames\": true,\n\n  /**\n   * This feature helps you to review and approve new packages before they are introduced\n   * to your monorepo.  For example, you may be concerned about licensing, code quality,\n   * performance, or simply accumulating too many libraries with overlapping functionality.\n   * The approvals are tracked in two config files \"browser-approved-packages.json\"\n   * and \"nonbrowser-approved-packages.json\".  See the Rush documentation for details.\n   */\n  // \"approvedPackagesPolicy\": {\n  //   /**\n  //    * The review categories allow you to say for example \"This library is approved for usage\n  //    * in prototypes, but not in production code.\"\n  //    *\n  //    * Each project can be associated with one review category, by assigning the \"reviewCategory\" field\n  //    * in the \"projects\" section of rush.json.  The approval is then recorded in the files\n  //    * \"common/config/rush/browser-approved-packages.json\" and \"nonbrowser-approved-packages.json\"\n  //    * which are automatically generated during \"rush update\".\n  //    *\n  //    * Designate categories with whatever granularity is appropriate for your review process,\n  //    * or you could just have a single category called \"default\".\n  //    */\n  //   \"reviewCategories\": [\n  //     // Some example categories:\n  //     \"production\", // projects that ship to production\n  //     \"tools\",      // non-shipping projects that are part of the developer toolchain\n  //     \"prototypes\"  // experiments that should mostly be ignored by the review process\n  //   ],\n  //\n  //   /**\n  //    * A list of NPM package scopes that will be excluded from review.\n  //    * We recommend to exclude TypeScript typings (the \"@types\" scope), because\n  //    * if the underlying package was already approved, this would imply that the typings\n  //    * are also approved.\n  //    */\n  //   // \"ignoredNpmScopes\": [\"@types\"]\n  // },\n\n  /**\n   * If you use Git as your version control system, this section has some additional\n   * optional features you can use.\n   */\n  \"gitPolicy\": {\n    /**\n     * Work at a big company?  Tired of finding Git commits at work with unprofessional Git\n     * emails such as \"beer-lover@my-college.edu\"?  Rush can validate people's Git email address\n     * before they get started.\n     *\n     * Define a list of regular expressions describing allowable e-mail patterns for Git commits.\n     * They are case-insensitive anchored JavaScript RegExps.  Example: \".*@example\\.com\"\n     *\n     * IMPORTANT: Because these are regular expressions encoded as JSON string literals,\n     * RegExp escapes need two backslashes, and ordinary periods should be \"\\\\.\".\n     */\n    \"allowedEmailRegExps\": [\"[^@]+@users\\\\.noreply\\\\.github\\\\.com\"],\n\n    /**\n     * When Rush reports that the address is malformed, the notice can include an example\n     * of a recommended email.  Make sure it conforms to one of the allowedEmailRegExps\n     * expressions.\n     */\n    \"sampleEmail\": \"example@users.noreply.github.com\"\n\n    /**\n     * The commit message to use when committing changes during 'rush publish'.\n     *\n     * For example, if you want to prevent these commits from triggering a CI build,\n     * you might configure your system's trigger to look for a special string such as \"[skip-ci]\"\n     * in the commit message, and then customize Rush's message to contain that string.\n     */\n    // \"versionBumpCommitMessage\": \"Bump versions [skip ci]\",\n\n    /**\n     * The commit message to use when committing changes during 'rush version'.\n     *\n     * For example, if you want to prevent these commits from triggering a CI build,\n     * you might configure your system's trigger to look for a special string such as \"[skip-ci]\"\n     * in the commit message, and then customize Rush's message to contain that string.\n     */\n    // \"changeLogUpdateCommitMessage\": \"Update changelogs [skip ci]\",\n\n    /**\n     * The commit message to use when commiting changefiles during 'rush change --commit'\n     *\n     * If no commit message is set it will default to 'Rush change'\n     */\n    // \"changefilesCommitMessage\": \"Rush change\"\n  },\n\n  \"repository\": {\n    /**\n     * The URL of this Git repository, used by \"rush change\" to determine the base branch for your PR.\n     *\n     * The \"rush change\" command needs to determine which files are affected by your PR diff.\n     * If you merged or cherry-picked commits from the main branch into your PR branch, those commits\n     * should be excluded from this diff (since they belong to some other PR).  In order to do that,\n     * Rush needs to know where to find the base branch for your PR.  This information cannot be\n     * determined from Git alone, since the \"pull request\" feature is not a Git concept.  Ideally\n     * Rush would use a vendor-specific protocol to query the information from GitHub, Azure DevOps, etc.\n     * But to keep things simple, \"rush change\" simply assumes that your PR is against the \"main\" branch\n     * of the Git remote indicated by the repository.url setting in rush.json.  If you are working in\n     * a GitHub \"fork\" of the real repo, this setting will be different from the repository URL of your\n     * your PR branch, and in this situation \"rush change\" will also automatically invoke \"git fetch\"\n     * to retrieve the latest activity for the remote main branch.\n     */\n    \"url\": \"https://github.com/microsoft/tsdoc.git\",\n\n    /**\n     * The default branch name. This tells \"rush change\" which remote branch to compare against.\n     * The default value is \"main\"\n     */\n    \"defaultBranch\": \"main\"\n\n    /**\n     * The default remote. This tells \"rush change\" which remote to compare against if the remote URL is\n     * not set or if a remote matching the provided remote URL is not found.\n     */\n    // \"defaultRemote\": \"origin\"\n  },\n\n  /**\n   * Event hooks are customized script actions that Rush executes when specific events occur\n   */\n  \"eventHooks\": {\n    /**\n     * A list of shell commands to run before \"rush install\" or \"rush update\" starts installation\n     */\n    \"preRushInstall\": [\n      // \"common/scripts/pre-rush-install.js\"\n    ],\n\n    /**\n     * A list of shell commands to run after \"rush install\" or \"rush update\" finishes installation\n     */\n    \"postRushInstall\": [],\n\n    /**\n     * A list of shell commands to run before \"rush build\" or \"rush rebuild\" starts building\n     */\n    \"preRushBuild\": [],\n\n    /**\n     * A list of shell commands to run after \"rush build\" or \"rush rebuild\" finishes building\n     */\n    \"postRushBuild\": [],\n\n    /**\n     * A list of shell commands to run before the \"rushx\" command starts\n     */\n    \"preRushx\": [],\n\n    /**\n     * A list of shell commands to run after the \"rushx\" command finishes\n     */\n    \"postRushx\": []\n  },\n\n  /**\n   * Rush can collect anonymous telemetry about everyday developer activity such as\n   * success/failure of installs, builds, and other operations.  You can use this to identify\n   * problems with your toolchain or Rush itself.  THIS TELEMETRY IS NOT SHARED WITH MICROSOFT.\n   * It is written into JSON files in the common/temp folder.  It's up to you to write scripts\n   * that read these JSON files and do something with them.  These scripts are typically registered\n   * in the \"eventHooks\" section.\n   */\n  // \"telemetryEnabled\": false,\n\n  /**\n   * Allows creation of hotfix changes. This feature is experimental so it is disabled by default.\n   * If this is set, 'rush change' only allows a 'hotfix' change type to be specified. This change type\n   * will be used when publishing subsequent changes from the monorepo.\n   */\n  // \"hotfixChangeEnabled\": false,\n\n  /**\n   * This is an optional, but recommended, list of allowed tags that can be applied to Rush projects\n   * using the \"tags\" setting in this file.  This list is useful for preventing mistakes such as misspelling,\n   * and it also provides a centralized place to document your tags.  If \"allowedProjectTags\" list is\n   * not specified, then any valid tag is allowed.  A tag name must be one or more words\n   * separated by hyphens or slashes, where a word may contain lowercase ASCII letters, digits,\n   * \".\", and \"@\" characters.\n   */\n  // \"allowedProjectTags\": [ \"tools\", \"frontend-team\", \"1.0.0-release\" ],\n\n  /**\n   * (Required) This is the inventory of projects to be managed by Rush.\n   *\n   * Rush does not automatically scan for projects using wildcards, for a few reasons:\n   * 1. Depth-first scans are expensive, particularly when tools need to repeatedly collect the list.\n   * 2. On a caching CI machine, scans can accidentally pick up files left behind from a previous build.\n   * 3. It's useful to have a centralized inventory of all projects and their important metadata.\n   */\n  \"projects\": [\n    // {\n    //   /**\n    //    * The NPM package name of the project (must match package.json)\n    //    */\n    //   \"packageName\": \"my-app\",\n    //\n    //   /**\n    //    * The path to the project folder, relative to the rush.json config file.\n    //    */\n    //   \"projectFolder\": \"apps/my-app\",\n    //\n    //   /**\n    //    * This field is only used if \"subspacesEnabled\" is true in subspaces.json.\n    //    * It specifies the subspace that this project belongs to.  If omitted, then the\n    //    * project belongs to the \"default\" subspace.\n    //    */\n    //   // \"subspaceName\": \"my-subspace\",\n    //\n    //   /**\n    //    * An optional category for usage in the \"browser-approved-packages.json\"\n    //    * and \"nonbrowser-approved-packages.json\" files.  The value must be one of the\n    //    * strings from the \"reviewCategories\" defined above.\n    //    */\n    //   \"reviewCategory\": \"production\",\n    //\n    //   /**\n    //    * A list of Rush project names that are to be installed from NPM\n    //    * instead of linking to the local project.\n    //    *\n    //    * If a project's package.json specifies a dependency that is another Rush project\n    //    * in the monorepo workspace, normally Rush will locally link its folder instead of\n    //    * installing from NPM.  If you are using PNPM workspaces, this is indicated by\n    //    * a SemVer range such as \"workspace:^1.2.3\".  To prevent mistakes, Rush reports\n    //    * an error if the \"workspace:\" protocol is missing.\n    //    *\n    //    * Locally linking ensures that regressions are caught as early as possible and is\n    //    * a key benefit of monorepos.  However there are occasional situations where\n    //    * installing from NPM is needed.  A classic example is a cyclic dependency.\n    //    * Imagine three Rush projects: \"my-toolchain\" depends on \"my-tester\", which depends\n    //    * on \"my-library\".  Suppose that we add \"my-toolchain\" to the \"devDependencies\"\n    //    * of \"my-library\" so it can be built by our toolchain.  This cycle creates\n    //    * a problem -- Rush can't build a project using a not-yet-built dependency.\n    //    * We can solve it by adding \"my-toolchain\" to the \"decoupledLocalDependencies\"\n    //    * of \"my-library\", so it builds using the last published release.  Choose carefully\n    //    * which package to decouple; some choices are much easier to manage than others.\n    //    *\n    //    * (In older Rush releases, this setting was called \"cyclicDependencyProjects\".)\n    //    */\n    //   \"decoupledLocalDependencies\": [\n    //     // \"my-toolchain\"\n    //   ],\n    //\n    //   /**\n    //    * If true, then this project will be ignored by the \"rush check\" command.\n    //    * The default value is false.\n    //    */\n    //   // \"skipRushCheck\": false,\n    //\n    //   /**\n    //    * A flag indicating that changes to this project will be published to npm, which affects\n    //    * the Rush change and publish workflows. The default value is false.\n    //    * NOTE: \"versionPolicyName\" and \"shouldPublish\" are alternatives; you cannot specify them both.\n    //    */\n    //   // \"shouldPublish\": false,\n    //\n    //   /**\n    //    * Facilitates postprocessing of a project's files prior to publishing.\n    //    *\n    //    * If specified, the \"publishFolder\" is the relative path to a subfolder of the project folder.\n    //    * The \"rush publish\" command will publish the subfolder instead of the project folder.  The subfolder\n    //    * must contain its own package.json file, which is typically a build output.\n    //    */\n    //   // \"publishFolder\": \"temp/publish\",\n    //\n    //   /**\n    //    * An optional version policy associated with the project.  Version policies are defined\n    //    * in \"version-policies.json\" file.  See the \"rush publish\" documentation for more info.\n    //    * NOTE: \"versionPolicyName\" and \"shouldPublish\" are alternatives; you cannot specify them both.\n    //    */\n    //   // \"versionPolicyName\": \"\",\n    //\n    //   /**\n    //    * An optional set of custom tags that can be used to select this project.  For example,\n    //    * adding \"my-custom-tag\" will allow this project to be selected by the\n    //    * command \"rush list --only tag:my-custom-tag\".  The tag name must be one or more words\n    //    * separated by hyphens or slashes, where a word may contain lowercase ASCII letters, digits,\n    //    * \".\", and \"@\" characters.\n    //    */\n    //   // \"tags\": [ \"1.0.0-release\", \"frontend-team\" ]\n    // },\n    //\n    // {\n    //   \"packageName\": \"my-controls\",\n    //   \"projectFolder\": \"libraries/my-controls\",\n    //   \"reviewCategory\": \"production\",\n    //   \"tags\": [ \"frontend-team\" ]\n    // },\n    //\n    // {\n    //   \"packageName\": \"my-toolchain\",\n    //   \"projectFolder\": \"tools/my-toolchain\",\n    //   \"reviewCategory\": \"tools\",\n    //   \"tags\": [ \"tools\" ]\n    // }\n\n    {\n      \"packageName\": \"api-demo\",\n      \"projectFolder\": \"api-demo\"\n    },\n    {\n      \"packageName\": \"tsdoc-playground\",\n      \"projectFolder\": \"playground\"\n    },\n    {\n      \"packageName\": \"@microsoft/tsdoc\",\n      \"projectFolder\": \"tsdoc\",\n      \"shouldPublish\": true\n    },\n    {\n      \"packageName\": \"@microsoft/tsdoc-config\",\n      \"projectFolder\": \"tsdoc-config\",\n      \"shouldPublish\": true\n    },\n    {\n      \"packageName\": \"eslint-plugin-tsdoc\",\n      \"projectFolder\": \"eslint-plugin\",\n      \"shouldPublish\": true\n    }\n  ]\n}\n"
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsdoc-config",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsdoc",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}