{
  "metadata": {
    "timestamp": 1736564116723,
    "page": 680,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "callstack/react-native-pager-view",
      "stars": 2817,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintrc.js",
          "type": "blob",
          "size": 0.3173828125,
          "content": "module.exports = {\n  root: true,\n  extends: '@react-native',\n  globals: {\n    expect: true,\n    element: true,\n    by: true,\n    device: true,\n    beforeAll: true,\n    beforeEach: true,\n    describe: true,\n    it: true,\n    afterAll: true,\n    jest: true,\n    jasmine: true,\n    waitFor: true,\n    detoxCircus: true,\n  },\n};\n"
        },
        {
          "name": ".flowconfig",
          "type": "blob",
          "size": 2.193359375,
          "content": "[ignore]\n.*/node_modules/.*/*[.]android.js\n\n; Ignore \"BUCK\" generated dirs\n<PROJECT_ROOT>/\\.buckd/\n\n; Ignore polyfills\nnode_modules/react-native/Libraries/polyfills/.*\n\n; These should not be required directly\n; require from fbjs/lib instead: require('fbjs/lib/warning')\nnode_modules/warning/.*\n; Flow doesn't support platforms\n.*/Libraries/Utilities/LoadingView.js\n\n; Ignore metro\n.*/node_modules/metro/.*\n\n; Dependency of realm\n.*/node_modules/license-checker/.*\n\n[include]\n\n[libs]\nnode_modules/react-native/interface.js\nnode_modules/react-native/flow/\nnode_modules/react-navigation/flow/react-navigation.js\nflow-typed/.*\n\n[options]\nemoji=true\n\nesproposal.optional_chaining=enable\nesproposal.nullish_coalescing=enable\n\nmunge_underscores=true\n\n\nmodule.name_mapper='^react-native/\\(.*\\)$' -> '<PROJECT_ROOT>/node_modules/react-native/\\1'\nmodule.name_mapper='^@?[./a-zA-Z0-9$_-]+\\.\\(bmp\\|gif\\|jpg\\|jpeg\\|png\\|psd\\|svg\\|webp\\|m4v\\|mov\\|mp4\\|mpeg\\|mpg\\|webm\\|aac\\|aiff\\|caf\\|m4a\\|mp3\\|wav\\|html\\|pdf\\)$' -> '<PROJECT_ROOT>/node_modules/react-native/Libraries/Image/RelativeImageStub'\n# Support the library import in examples\nmodule.name_mapper='^\\@react-native-community/viewpager$' -> '<PROJECT_ROOT>/js/index.js'\n\nmodule.file_ext=.js\nmodule.file_ext=.jsx\nmodule.file_ext=.json\nmodule.file_ext=.native.js\nmodule.file_ext=.android.js\nmodule.file_ext=.ios.js\n\nsuppress_type=$FlowIssue\nsuppress_type=$FlowFixMe\nsuppress_type=$FlowFixMeProps\nsuppress_type=$FlowFixMeState\n\nsuppress_comment=\\\\(.\\\\|\\n\\\\)*\\\\$FlowFixMe\\\\($\\\\|[^(]\\\\|(\\\\(<VERSION>\\\\)? *\\\\(site=[a-z,_]*react_native[a-z,_]*\\\\)?)\\\\)\nsuppress_comment=\\\\(.\\\\|\\n\\\\)*\\\\$FlowIssue\\\\((\\\\(<VERSION>\\\\)? *\\\\(site=[a-z,_]*react_native[a-z,_]*\\\\)?)\\\\)?:? #[0-9]+\nsuppress_comment=\\\\(.\\\\|\\n\\\\)*\\\\$FlowFixedInNextDeploy\nsuppress_comment=\\\\(.\\\\|\\n\\\\)*\\\\$FlowExpectedError\n\n[lints]\nsketchy-null-number=warn\nsketchy-null-mixed=warn\nsketchy-number=warn\n# untyped-type-import=warn\nnonstrict-import=warn\n# deprecated-type=warn\nunsafe-getters-setters=warn\n# inexact-spread=warn\nunnecessary-invariant=warn\nsignature-verification-failure=warn\ndeprecated-utility=error\n\n[strict]\ndeprecated-type\nnonstrict-import\nsketchy-null\nunclear-type\nunsafe-getters-setters\nuntyped-import\nuntyped-type-import\n\n[version]\n0.122.0\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.015625,
          "content": "*.pbxproj -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.90234375,
          "content": "# OSX\n#\n.DS_Store\n\n# XDE\n.expo/\n\n# VSCode\n.vscode/\njsconfig.json\n\n# Xcode\n#\nbuild/\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata\n*.xccheckout\n*.moved-aside\nDerivedData\n*.hmap\n*.ipa\n*.xcuserstate\nproject.xcworkspace\n**/.xcode.env.local\n\n# Android/IJ\n#\n.idea\n.gradle\nlocal.properties\nandroid.iml\n\n# Cocoapods\n#\nexample/ios/Pods\n\n# node.js\n#\nnode_modules/\nnpm-debug.log\nyarn-debug.log\nyarn-error.log\n\n# Expo\n.expo/*\n\n# generated by bob\nlib/\n\n#e2e\ntest-butler-app.apk\nexample/vendor\n\n#Example\nexample/ios/Pods\nexample/vendor\n.lefthookrc\nlefthook.yml\n\n\n# Temporary files created by Metro to check the health of the file watcher\n.metro-health-check*\n\n# testing\n/coverage\n.cxx\nexample/ios/PagerViewExample.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist\n\n# Yarn\n.yarn/*\n!.yarn/patches\n!.yarn/plugins\n!.yarn/releases\n!.yarn/sdks\n!.yarn/versions\n"
        },
        {
          "name": ".prettierrc.js",
          "type": "blob",
          "size": 0.1240234375,
          "content": "module.exports = {\n    bracketSpacing: false,\n    jsxBracketSameLine: true,\n    singleQuote: true,\n    trailingComma: 'all',\n};"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 9.25390625,
          "content": "# Contributing\n\nWe want this community to be friendly and respectful to each other. Please follow it in all your interactions with the project.\n\n## Development workflow\n\nTo get started with the project, run `bun install` in the root directory to install the required dependencies for each package:\n\n```sh\nbun install\n```\n\n> While it's possible to use [`npm`](https://github.com/npm/cli) or [`yarn`](https://yarnpkg.com/cli), the tooling is built around [`bun`](https://bun.sh/), so you'll have an easier time if you use `bun` for development.\n\nWhile developing, you can run the [example app](/example/) to test your changes. Any changes you make in your library's JavaScript code will be reflected in the example app without a rebuild. If you change any native code, then you'll need to rebuild the example app.\n\nTo install dependencies and pods in example directory:\n\n```sh\nbun bootstrap\n```\n\nTo start the packager:\n\n```sh\nbun example:start\n```\n\nTo run the example app on Android:\n\n```sh\nbun example:android\n```\n\nTo run the example app on iOS:\n\n```sh\nbun example:ios\n```\n\n\nMake sure your code passes TypeScript and ESLint. Run the following to verify:\n\n```sh\nbun typescript\nbun lint\n```\n\nTo fix formatting errors, run the following:\n\n```sh\nbun lint --fix\n```\n\nRemember to add tests for your change if possible. Run the unit tests by:\n\n```sh\nbun test\n```\nTo edit the Objective-C files, open `example/ios/PagerViewExample.xcworkspace` in XCode and find the source files at `Pods > Development Pods > react-native-pager-view`.\n\nTo edit the Kotlin files, open `example/android` in Android studio and find the source files at `reactnativepagerview` under `Android`.\n### Commit message convention\n\nWe follow the [conventional commits specification](https://www.conventionalcommits.org/en) for our commit messages:\n\n- `fix`: bug fixes, e.g. fix crash due to deprecated method.\n- `feat`: new features, e.g. add new method to the module.\n- `refactor`: code refactor, e.g. migrate from class components to hooks.\n- `docs`: changes into documentation, e.g. add usage example for the module..\n- `test`: adding or updating tests, e.g. add integration tests using detox.\n- `chore`: tooling changes, e.g. change CI config.\n\nOur pre-commit hooks verify that your commit message matches this format when committing.\n\n### Linting and tests\n\n[ESLint](https://eslint.org/), [Prettier](https://prettier.io/), [TypeScript](https://www.typescriptlang.org/)\n\nWe use [TypeScript](https://www.typescriptlang.org/) for type checking, [ESLint](https://eslint.org/) with [Prettier](https://prettier.io/) for linting and formatting the code, and [Jest](https://jestjs.io/) for testing.\n\nOur pre-commit hooks verify that the linter and tests pass when committing.\n\n### Publishing to npm\n\nWe use [release-it](https://github.com/release-it/release-it) to make it easier to publish new versions. It handles common tasks like bumping version based on semver, creating tags and releases etc.\n\nTo publish new versions, run the following:\n\n```sh\nbun release\n```\n\n### Scripts\n\nThe `package.json` file contains various scripts for common tasks:\n\n- `bun bootstrap`: setup project by installing all dependencies and pods.\n- `bun typescript`: type-check files with TypeScript.\n- `bun lint`: lint files with ESLint.\n- `bun test`: run unit tests with Jest.\n- `bun example:start`: start the Metro server for the example app.\n- `bun example:android`: run the example app on Android.\n- `bun example:ios`: run the example app on iOS.\n- `bun example:android:release`: run the example app on Android in release mode.\n- `bun example:ios:release`: run the example app on iOS in release mode.\n\n### Sending a pull request\n\n> **Working on your first pull request?** You can learn how from this _free_ series: [How to Contribute to an Open Source Project on GitHub](https://app.egghead.io/playlists/how-to-contribute-to-an-open-source-project-on-github).\n\nWhen you're sending a pull request:\n\n- Prefer small pull requests focused on one change.\n- Verify that linters and tests are passing.\n- Review the documentation to make sure it looks good.\n- Follow the pull request template when opening a pull request.\n- For pull requests that change the API or implementation, discuss with maintainers first by opening an issue.\n\n## Code of Conduct\n\n### Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\n### Our Standards\n\nExamples of behavior that contributes to a positive environment for our community include:\n\n- Demonstrating empathy and kindness toward other people\n- Being respectful of differing opinions, viewpoints, and experiences\n- Giving and gracefully accepting constructive feedback\n- Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n- Focusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\n- The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n- Trolling, insulting or derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n- Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n### Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\n\n### Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\n\n### Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\n\n### Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n\n#### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n\n#### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of actions.\n\n**Consequence**: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n\n#### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including sustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n\n#### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the community.\n\n### Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 2.0,\navailable at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct enforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2021 Callstack\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MIGRATION.md",
          "type": "blob",
          "size": 0.5693359375,
          "content": "## Migration Guide\n\n# 5.x -> 6.x\nDue to some issues, support for the `transitionStyle` property, which was iOS only, has been dropped. In version **6.x** passing it will not have any effect.\n\n# 5.0.x -> 5.1.x\nBefore:\n```js\nimport ViewPager from '@react-native-community/viewpager'\nimport type { ViewPagerOnPageScrollEventData,ViewPagerOnPageSelectedEventData } from '@react-native-community/viewpager';\n```\n\nAfter:\n```js\nimport PagerView from 'react-native-pager-view';\nimport type { PagerViewOnPageScrollEventData, PagerViewOnPageSelectedEventData } from 'react-native-pager-view';\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.7763671875,
          "content": "# react-native-pager-view <img src=\"img/viewpager-logo.png\" alt=\"ViewPager\" width=\"24\" height=\"24\">\n\n[![npm package](https://badge.fury.io/js/react-native-pager-view.svg)](https://badge.fury.io/js/react-native-pager-view)\n[![Lean Core Extracted](https://img.shields.io/badge/Lean%20Core-Extracted-brightgreen.svg)](https://github.com/facebook/react-native/issues/23313)\n[![License](https://img.shields.io/github/license/callstack/react-native-pager-view?color=blue)](https://github.com/callstack/react-native-pager-view/blob/master/LICENSE)\n\n[![Lint](https://github.com/callstack/react-native-pager-view/actions/workflows/main.yml/badge.svg)](https://github.com/callstack/react-native-pager-view/actions/workflows/main.yml)\n[![iOS Build](https://github.com/callstack/react-native-pager-view/actions/workflows/ios.yml/badge.svg)](https://github.com/callstack/react-native-pager-view/actions/workflows/ios.yml)\n[![Android Build](https://github.com/callstack/react-native-pager-view/actions/workflows/android.yml/badge.svg)](https://github.com/callstack/react-native-pager-view/actions/workflows/android.yml)\n\nThis component allows the user to swipe left and right through pages of data. Under the hood it is using the native [Android ViewPager](https://developer.android.com/jetpack/androidx/releases/viewpager2) and the [iOS UIPageViewController](https://developer.apple.com/documentation/uikit/uipageviewcontroller) implementations. [See it in action!](https://github.com/callstack/react-native-pager-view#preview)\n\n<br/>\n<p align=\"center\">\n  <img src=\"img/vp-carousel.gif\" alt=\"ViewPager\" width=\"300\">\n</p>\n\n<br/>\n\n## Versions\n\n| 4.x        | 5.x and above |\n| ---------- | ------------- |\n| iOS        | iOS support   |\n| ViewPager1 | ViewPager2    |\n\n## Migration\n\nIn version **6.x** support for `transitionStyle` property has been dropped. More information [here](https://github.com/callstack/react-native-pager-view/blob/master/MIGRATION.md).\n\n`\"@react-native-community/viewpager\"` library has been changed to `react-native-pager-view`. Here you can find more information, how to migrate pager view to the latest [version](https://github.com/callstack/react-native-pager-view/blob/master/MIGRATION.md)\n\n## Getting started\nBun: \n\n`bun add react-native-pager-view`\n\nYarn:\n\n `yarn add react-native-pager-view`\n\n## Linking\n\n### >= 0.60\n\nAutolinking will just do the job.\n\n### < 0.60\n\n#### Mostly automatic\n\n`react-native link react-native-pager-view`\n\n#### Manual linking\n\n<details>\n<summary>Manually link the library on iOS</summary>\n</br>\n\nFollow the [instructions in the React Native documentation](https://facebook.github.io/react-native/img/linking-libraries-ios#manual-linking) to manually link the framework or link using [Cocoapods](https://cocoapods.org) by adding this to your `Podfile`:\n\n```ruby\npod 'react-native-pager-view', :path => '../node_modules/react-native-pager-view'\n```\n\n</details>\n\n<details>\n<summary>Manually link the library on Android</summary>\n</br>\nMake the following changes:\n\n#### `android/settings.gradle`\n\n```groovy\ninclude ':react-native-pager-view'\nproject(':react-native-pager-view').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-pager-view/android')\n```\n\n#### `android/app/build.gradle`\n\n```groovy\ndependencies {\n   ...\n   implementation project(':react-native-pager-view')\n}\n```\n\n#### `android/app/src/main/.../MainApplication.java`\n\nOn top, where imports are:\n\nAdd `import com.reactnativepagerview.PagerViewPackage;`\n\nAdd the `PagerViewPackage` class to your list of exported packages.\n\n```java\n@Override\nprotected List<ReactPackage> getPackages() {\n  return Arrays.<ReactPackage>asList(\n    new MainReactPackage(),\n    new PagerViewPackage()\n  );\n}\n```\n\n</details>\n\n## Usage\n\n```js\nimport React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\nimport PagerView from 'react-native-pager-view';\n\nconst MyPager = () => {\n  return (\n    <PagerView style={styles.pagerView} initialPage={0}>\n      <View key=\"1\">\n        <Text>First page</Text>\n      </View>\n      <View key=\"2\">\n        <Text>Second page</Text>\n      </View>\n    </PagerView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  pagerView: {\n    flex: 1,\n  },\n});\n```\n\n**Attention:** Note that you can only use `View` components as children of `PagerView` (cf. folder _/example_)\n. For Android if `View` has own children, set prop `collapsable` to false <https://reactnative.dev/docs/view#collapsable-android>, otherwise react-native might remove those children views and and its children will be rendered as separate pages\n\n## Advanced usage\n\nFor advanced usage please take a look into our [example project](https://github.com/callstack/react-native-pager-view/blob/master/example/src/BasicPagerViewExample.tsx)\n\n## API\n\n| Prop                                                                 |                                                                                                                             Description                                                                                                                             | Platform |\n| -------------------------------------------------------------------- | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------: |\n| `initialPage`                                                        |                                                                                                            Index of initial page that should be selected                                                                                                            |   both   |\n| `scrollEnabled: boolean`                                             |                                                                                                            Should pager view scroll, when scroll enabled                                                                                                            |   both   |\n| `onPageScroll: (e: PageScrollEvent) => void`                         |                                                    Executed when transitioning between pages (ether because the animation for the requested page has changed or when the user is swiping/dragging between pages)                                                    |   both   |\n| `onPageScrollStateChanged: (e: PageScrollStateChangedEvent) => void` |                                                                                                      Function called when the page scrolling state has changed                                                                                                      |   both   |\n| `onPageSelected: (e: PageSelectedEvent) => void`                     |                                                                                      This callback will be called once the ViewPager finishes navigating to the selected page                                                                                       |   both   |\n| `pageMargin: number`                                                 |                                                                                                                Blank space to be shown between pages                                                                                                                |   both   |\n| `keyboardDismissMode: ('none' / 'on-drag')`                          |                                                                                                Determines whether the keyboard gets dismissed in response to a drag                                                                                                 |   both   |\n| `orientation: Orientation`                                           |                                                                                       Set `horizontal` or `vertical` scrolling orientation (it does **not** work dynamically)                                                                                       |   both   |\n| `overScrollMode: OverScrollMode`                                     |                                                                              Used to override default value of overScroll mode. Can be `auto`, `always` or `never`. Defaults to `auto`                                                                              | Android  |\n| `offscreenPageLimit: number`                                         | Set the number of pages that should be retained to either side of the currently visible page(s). Pages beyond this limit will be recreated from the adapter when needed. Defaults to RecyclerView's caching strategy. The given value must either be larger than 0. | Android  |\n| `overdrag: boolean`                                                  |                                                                                   Allows for overscrolling after reaching the end or very beginning or pages. Defaults to `false`                                                                                   |   iOS    |\n| `layoutDirection: ('ltr' / 'rtl' / 'locale')`                        |                                                      Specifies layout direction. Use `ltr` or `rtl` to set explicitly or `locale` to deduce from the default language script of a locale. Defaults to `locale`                                                      |   both   |\n\n| Method                                     |                                                                                                         Description                                                                                                          | Platform |\n| ------------------------------------------ | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------: |\n| `setPage(index: number)`                   |                                                                      Function to scroll to a specific page in the PagerView. Invalid index is ignored.                                                                       |   both   |\n| `setPageWithoutAnimation(index: number)`   |                                                                      Function to scroll to a specific page in the PagerView. Invalid index is ignored.                                                                       |   both   |\n| `setScrollEnabled(scrollEnabled: boolean)` | A helper function to enable/disable scroll imperatively. The recommended way is using the scrollEnabled prop, however, there might be a case where a imperative solution is more useful (e.g. for not blocking an animation) |   both   |\n\n## Contributing\n\nSee the [contributing guide](CONTRIBUTING.md) to learn how to contribute to the repository and the development workflow.\n\n## Known Issues\n\n- `flex:1` does not work for child views, please use `width: '100%', height: '100%'` [instead](https://github.com/callstack/react-native-pager-view/issues/186#issuecomment-675320732)\n\n- [iOS]: In case of `UIViewControllerHierarchyInconsistency` error, please use below fix:\n\n```\nrequestAnimationFrame(() => refPagerView.current?.setPage(index));\n```\n\n## Preview\n\n### Android\n\n|                            horizontal                             |                                  vertical                                  |\n| :---------------------------------------------------------------: | :------------------------------------------------------------------------: |\n| <img src=\"img/android-viewpager.gif\" alt=\"ViewPager\" width=\"325\"> | <img src=\"img/android-viewpager-vertical.gif\" alt=\"ViewPager\" width=\"325\"> |\n\n### iOS\n\n|                              horizontal                              |                                vertical                                |\n| :------------------------------------------------------------------: | :--------------------------------------------------------------------: |\n| <img src=\"img/ios-viewpager-scroll.gif\" alt=\"ViewPager\" width=\"325\"> | <img src=\"img/ios-viewpager-vertical.gif\" alt=\"ViewPager\" width=\"325\"> |\n\n## Reanimated onPageScroll handler\n\nAn example can be found [here](https://github.com/callstack/react-native-pager-view/blob/master/example/src/ReanimatedOnPageScrollExample.tsx)\n\n#### Instructions\n\nTo attach reanimated handler with `onPageScroll` follow the below steps.\n\n```jsx\n// 1. Define the handler\nfunction usePageScrollHandler(handlers, dependencies) {\n  const { context, doDependenciesDiffer } = useHandler(handlers, dependencies);\n  const subscribeForEvents = ['onPageScroll'];\n\n  return useEvent(\n    (event) => {\n      'worklet';\n      const { onPageScroll } = handlers;\n      if (onPageScroll && event.eventName.endsWith('onPageScroll')) {\n        onPageScroll(event, context);\n      }\n    },\n    subscribeForEvents,\n    doDependenciesDiffer\n  );\n}\n\n// 2. Attach the event handler\nimport PagerView from 'react-native-pager-view';\nimport Animated from 'react-native-reanimated';\nconst AnimatedPagerView = Animated.createAnimatedComponent(PagerView);\n\nconst pageScrollHandler = usePageScrollHandler({\n  onPageScroll: (e) => {\n    'worklet';\n    offset.value = e.offset;\n    console.log(e.offset, e.position);\n  },\n});\n\n<AnimatedPagerView onPageScroll={pageScrollHandler} />;\n```\n\n## usePagerView Hook Usage\nThe `usePagerView` hook is a convenient way to manage the state and control the behavior of the `<PagerView />` component. It provides functions and variables to interact with the pager, such as navigating between pages and enabling/disabling scrolling.\n\nBelow is an example of how to use the usePager hook:\n\n```jsx\nexport function PagerHookExample() {\n  const { AnimatedPagerView, ref, ...rest } = usePagerView({ pagesAmount: 10 });\n  \n  return (\n    <SafeAreaView style={styles.container}>\n      <AnimatedPagerView\n        testID=\"pager-view\"\n        ref={ref}\n        style={styles.PagerView}\n        initialPage={0}\n        layoutDirection=\"ltr\"\n        overdrag={rest.overdragEnabled}\n        scrollEnabled={rest.scrollEnabled}\n        onPageScroll={rest.onPageScroll}\n        onPageSelected={rest.onPageSelected}\n        onPageScrollStateChanged={rest.onPageScrollStateChanged}\n        pageMargin={10}\n        orientation=\"horizontal\"\n      >\n        {useMemo(\n          () =>\n            rest.pages.map((_, index) => (\n              <View\n                testID=\"pager-view-content\"\n                key={index}\n                style={{\n                  flex: 1,\n                  backgroundColor: '#fdc08e',\n                  alignItems: 'center',\n                  padding: 20,\n                }}\n                collapsable={false}\n              >\n                <LikeCount />\n                <Text testID={`pageNumber${index}`}>\n                  {`page number ${index}`}\n                </Text>\n              </View>\n            )),\n          [rest.pages]\n        )}\n      </AnimatedPagerView>\n      <NavigationPanel {...rest} />\n    </SafeAreaView>\n  );\n}\n```\n### How the Example Works:\n\n- **Pager View Setup**: The `AnimatedPagerView` component wraps `PagerView` in React Native's animation capabilities. It accepts multiple props from the `usePager` hook, such as `overdragEnabled`, `scrollEnabled`, `onPageScroll`, `onPageSelected`, and others to manage pager behavior.\n\n- **Rendering Pages**: The pages are dynamically generated using the `rest.pages` array (initialized by `usePager`). The `useMemo` hook ensures the pages are only recomputed when necessary for performance reasons.\n\n### Conclusion\n\nThe `usePager` hook makes it easy to handle pagination with dynamic views. This example demonstrates how to set up a simple paginated interface where users can scroll through pages, interact with page elements, and control the pager with external navigation.\n\n\n## License\n\nMIT\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "babel.config.js",
          "type": "blob",
          "size": 0.0751953125,
          "content": "module.exports = {\n  presets: ['module:metro-react-native-babel-preset'],\n};\n"
        },
        {
          "name": "bun.lockb",
          "type": "blob",
          "size": 494.22265625,
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "ios",
          "type": "tree",
          "content": null
        },
        {
          "name": "maestro-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 3.96484375,
          "content": "{\n  \"name\": \"react-native-pager-view\",\n  \"version\": \"6.6.1\",\n  \"description\": \"React Native wrapper for Android and iOS ViewPager\",\n  \"main\": \"lib/commonjs/index\",\n  \"module\": \"lib/module/index\",\n  \"types\": \"lib/typescript/index.d.ts\",\n  \"react-native\": \"src/index\",\n  \"source\": \"src/index\",\n  \"files\": [\n    \"src\",\n    \"lib\",\n    \"android\",\n    \"ios\",\n    \"react-native-pager-view.podspec\",\n    \"!lib/typescript/example\",\n    \"!android/build\",\n    \"!ios/build\",\n    \"!**/__tests__\",\n    \"!**/__fixtures__\",\n    \"!**/__mocks__\"\n  ],\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"typescript\": \"tsc --noEmit\",\n    \"lint\": \"eslint \\\"**/*.{js,ts,tsx}\\\"\",\n    \"prepare\": \"bob build\",\n    \"release\": \"release-it\",\n    \"release:next\": \"release-it --npm.tag=next --preRelease=rc\",\n    \"bootstrap\": \"cd example; bun install && bun pods \",\n    \"bootstrap:no:pods\": \"bun install --cwd example\",\n    \"test:e2e:android\": \"bash ./scripts/run-maestro-tests.sh android\",\n    \"test:e2e:ios\": \"bash ./scripts/run-maestro-tests.sh ios\",\n    \"example:start\": \"cd example; bun start\",\n    \"example:android\": \"cd example; bun android\",\n    \"example:ios\": \"cd example; bun ios\",\n    \"example:android:release\": \"cd example;react-native run-android --mode \\\"Release\\\" --appId com.pagerviewexample\",\n    \"example:ios:release\": \"cd example;react-native run-ios --mode \\\"Release\\\" --simulator \\\"iPhone 15 (18.0)\\\"\"\n  },\n  \"keywords\": [\n    \"react-native\",\n    \"ios\",\n    \"android\"\n  ],\n  \"repository\": \"https://github.com/callstack/react-native-pager-view\",\n  \"author\": \"troZee <hello@callstack.com> (https://github.com/callstack)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/callstack/react-native-pager-view/issues\"\n  },\n  \"homepage\": \"https://github.com/callstack/react-native-pager-view#readme\",\n  \"publishConfig\": {\n    \"registry\": \"https://registry.npmjs.org/\"\n  },\n  \"devDependencies\": {\n    \"@babel/eslint-parser\": \"^7.20.0\",\n    \"@react-native/babel-preset\": \"0.76.3\",\n    \"@react-native/eslint-config\": \"0.76.3\",\n    \"@react-native/metro-config\": \"0.76.3\",\n    \"@react-native/typescript-config\": \"0.76.3\",\n    \"@react-native-community/cli\": \"15.0.1\",\n    \"@react-native-community/cli-platform-android\": \"15.0.1\",\n    \"@react-native-community/cli-platform-ios\": \"15.0.1\",\n    \"@release-it/conventional-changelog\": \"^2.0.0\",\n    \"@types/jest\": \"^29.5.12\",\n    \"@types/react\": \"^18.2.6\",\n    \"eslint\": \"^8.19.0\",\n    \"eslint-config-prettier\": \"^8.5.0\",\n    \"eslint-plugin-ft-flow\": \"^3.0.1\",\n    \"eslint-plugin-jest\": \"^28.9.0\",\n    \"eslint-plugin-prettier\": \"^4.0.0\",\n    \"jest\": \"^29.6.3\",\n    \"metro-react-native-babel-preset\": \"^0.77.0\",\n    \"prettier\": \"^2.4.1\",\n    \"react\": \"18.3.1\",\n    \"react-native\": \"0.76.3\",\n    \"react-native-builder-bob\": \"^0.18.3\",\n    \"release-it\": \"^14.2.2\",\n    \"typescript\": \"5.0.4\"\n  },\n  \"peerDependencies\": {\n    \"react\": \"*\",\n    \"react-native\": \"*\"\n  },\n  \"jest\": {\n    \"preset\": \"react-native\",\n    \"modulePathIgnorePatterns\": [\n      \"<rootDir>/example/node_modules\",\n      \"<rootDir>/lib/\"\n    ]\n  },\n  \"eslintConfig\": {\n    \"root\": true,\n    \"parser\": \"@babel/eslint-parser\",\n    \"extends\": [\n      \"@react-native-community\",\n      \"prettier\"\n    ],\n    \"rules\": {\n      \"prettier/prettier\": [\n        \"error\",\n        {\n          \"quoteProps\": \"consistent\",\n          \"singleQuote\": true,\n          \"tabWidth\": 2,\n          \"trailingComma\": \"es5\",\n          \"useTabs\": false\n        }\n      ]\n    }\n  },\n  \"eslintIgnore\": [\n    \"node_modules/\",\n    \"lib/\"\n  ],\n  \"prettier\": {\n    \"quoteProps\": \"consistent\",\n    \"singleQuote\": true,\n    \"tabWidth\": 2,\n    \"trailingComma\": \"es5\",\n    \"useTabs\": false\n  },\n  \"codegenConfig\": {\n    \"name\": \"pagerview\",\n    \"type\": \"components\",\n    \"jsSrcsDir\": \"src\",\n    \"android\": {\n      \"javaPackageName\": \"com.reactnativepagerview\"\n    }\n  },\n  \"react-native-builder-bob\": {\n    \"source\": \"src\",\n    \"output\": \"lib\",\n    \"targets\": [\n      \"commonjs\",\n      \"module\",\n      [\n        \"typescript\",\n        {\n          \"project\": \"tsconfig.build.json\"\n        }\n      ]\n    ]\n  }\n}\n"
        },
        {
          "name": "react-native-pager-view.podspec",
          "type": "blob",
          "size": 1.615234375,
          "content": "require \"json\"\n\npackage = JSON.parse(File.read(File.join(__dir__, \"package.json\")))\nfolly_compiler_flags = '-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1 -Wno-comma -Wno-shorten-64-to-32'\nnew_arch_enabled = ENV['RCT_NEW_ARCH_ENABLED'] == '1'\n\nPod::Spec.new do |s|\n  s.name         = \"react-native-pager-view\"\n  s.version      = package[\"version\"]\n  s.summary      = package[\"description\"]\n  s.homepage     = package[\"homepage\"]\n  s.license      = package[\"license\"]\n  s.authors      = package[\"author\"]\n\n  s.platforms    = { :ios => \"10.0\", :visionos => \"1.0\" }\n  s.source       = { :git => \"https://github.com/callstack/react-native-pager-view.git\", :tag => \"#{s.version}\" }\n\n  s.source_files = \"ios/**/*.{h,m,mm}\"\n\n  # install_modules_dependencies has been defined in RN 0.70\n  # This check ensure that the library can work on older versions of RN\n  if defined?(install_modules_dependencies)\n    install_modules_dependencies(s)\n  else\n    s.dependency \"React-Core\"\n\n    # Don't install the dependencies when we run `pod install` in the old architecture.\n    if new_arch_enabled then\n      s.compiler_flags = folly_compiler_flags + \" -DRCT_NEW_ARCH_ENABLED=1\"\n      s.pod_target_xcconfig    = {\n        \"HEADER_SEARCH_PATHS\" => \"\\\"$(PODS_ROOT)/boost\\\"\",\n        \"OTHER_CPLUSPLUSFLAGS\" => \"-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1\",\n        \"CLANG_CXX_LANGUAGE_STANDARD\" => \"c++17\"\n      }\n      s.dependency \"React-Codegen\"\n      s.dependency \"RCT-Folly\"\n      s.dependency \"RCTRequired\"\n      s.dependency \"RCTTypeSafety\"\n      s.dependency \"ReactCommon/turbomodule/core\"\n      s.dependency \"React-RCTFabric\"\n    end\n  end\nend\n"
        },
        {
          "name": "release-it.json",
          "type": "blob",
          "size": 0.296875,
          "content": "{\n  \"git\": {\n    \"commitMessage\": \"chore: release v${version}\",\n    \"tagName\": \"v${version}\"\n  },\n  \"npm\": {\n    \"publish\": true\n  },\n  \"github\": {\n    \"release\": true,\n    \"releaseName\": \"v${version}\"\n  },\n  \"plugins\": {\n    \"@release-it/conventional-changelog\": {\n      \"preset\": \"angular\"\n    }\n  }\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.build.json",
          "type": "blob",
          "size": 0.0546875,
          "content": "{\n  \"extends\": \"./tsconfig\",\n  \"exclude\": [\"example\"]\n}\n"
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.7119140625,
          "content": "{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"paths\": {\n      \"react-native-pager-view\": [\"./src/index\"]\n    },\n    \"allowUnreachableCode\": false,\n    \"allowUnusedLabels\": false,\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"jsx\": \"react\",\n    \"lib\": [\"esnext\"],\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"noFallthroughCasesInSwitch\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitUseStrict\": false,\n    \"noStrictGenericChecks\": false,\n    \"noUncheckedIndexedAccess\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"target\": \"esnext\"\n  },\n  \"exclude\": [\"example\"]\n}\n"
        }
      ]
    }
  ]
}