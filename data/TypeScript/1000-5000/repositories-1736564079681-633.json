{
  "metadata": {
    "timestamp": 1736564079681,
    "page": 633,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sequelize/sequelize-auto",
      "stars": 2914,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2685546875,
          "content": "# EditorConfig is awesome: http://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = false\ntrim_trailing_whitespace = true\n\n[{*.js,*.json,.esformatter,.eslintrc,*.yml}]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.015625,
          "content": "**/*{.,-}min.js\n"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 3.4794921875,
          "content": "parserOptions:\n  ecmaFeatures:\n    modules: true\n    jsx: true\n\nenv:\n  amd: true\n  browser: true\n  es6: true\n  es2017: true\n  jquery: true\n  node: true\n\n# http://eslint.org/docs/rules/\nrules:\n  # Possible Errors\n  comma-dangle: [1, never]\n  no-cond-assign: 1\n  no-console: 0\n  no-constant-condition: 1\n  no-control-regex: 1\n  no-debugger: 1\n  no-dupe-args: 1\n  no-dupe-keys: 1\n  no-duplicate-case: 1\n  no-empty: 1\n  no-empty-character-class: 1\n  no-ex-assign: 1\n  no-extra-boolean-cast: 1\n  no-extra-semi: 1\n  no-func-assign: 1\n  no-inner-declarations: [1, functions]\n  no-invalid-regexp: 1\n  no-irregular-whitespace: 1\n  no-negated-in-lhs: 1\n  no-obj-calls: 1\n  no-regex-spaces: 1\n  no-sparse-arrays: 1\n  no-unexpected-multiline: 1\n  use-isnan: 1\n  valid-jsdoc: 0\n  valid-typeof: 1\n\n  # Best Practices\n  block-scoped-var: 0\n  complexity: [1, 20]\n  consistent-return: 0\n  default-case: 0\n  dot-location: 0\n  dot-notation: 0\n  eqeqeq: 1\n  guard-for-in: 1\n  no-alert: 1\n  no-caller: 1\n  no-case-declarations: 1\n  no-div-regex: 1\n  no-else-return: 0\n  no-empty-pattern: 1\n  no-eq-null: 1\n  no-extend-native: 1\n  no-extra-bind: 1\n  no-fallthrough: 0\n  no-floating-decimal: 0\n  no-implicit-coercion: 0\n  no-implied-eval: 1\n  no-invalid-this: 0\n  no-iterator: 1\n  no-labels: 0\n  no-loop-func: 1\n  no-magic-number: 0\n  no-multi-spaces: 0\n  no-multi-str: 0\n  no-native-reassign: 1\n  no-new-func: 1\n  no-new-wrappers: 1\n  no-new: 1\n  no-octal-escape: 1\n  no-octal: 1\n  no-proto: 1\n  no-return-assign: 1\n  no-script-url: 1\n  no-self-compare: 1\n  no-sequences: 0\n  no-throw-literal: 0\n  no-unused-expressions: 0\n  no-useless-call: 1\n  no-useless-concat: 1\n  no-void: 1\n  no-warning-comments: 0\n  no-with: 1\n  radix: 1\n  vars-on-top: 0\n  wrap-iife: 1\n  yoda: 0\n\n  # Strict\n  strict: 0\n\n  # Variables\n  no-catch-shadow: 1\n  no-delete-var: 1\n  no-label-var: 1\n  no-shadow-restricted-names: 1\n  no-shadow: 0\n  no-undef-init: 1\n  no-undef: 0\n  no-undefined: 0\n  no-unused-vars: 0\n  no-use-before-define: 0\n\n  # Node.js and CommonJS\n  callback-return: 1\n  global-require: 1\n  handle-callback-err: 1\n  no-mixed-requires: 0\n  no-new-require: 0\n  no-path-concat: 1\n  no-process-exit: 1\n  no-sync: 0\n\n  # Stylistic Issues\n  array-bracket-spacing: 0\n  block-spacing: 0\n  brace-style: 0\n  camelcase: 0\n  comma-spacing: 0\n  comma-style: 0\n  computed-property-spacing: 0\n  eol-last: 0\n  func-names: 0\n  func-style: 0\n  id-length: 0\n  id-match: 0\n  indent: 0\n  jsx-quotes: 0\n  key-spacing: 0\n  linebreak-style: 0\n  lines-around-comment: 0\n  max-depth: 0\n  max-len: 0\n  max-nested-callbacks: 0\n  max-params: 0\n  max-statements: [2, 30]\n  new-cap: 0\n  new-parens: 0\n  newline-after-var: 0\n  no-array-constructor: 0\n  no-bitwise: 0\n  no-continue: 0\n  no-inline-comments: 0\n  no-lonely-if: 0\n  no-mixed-spaces-and-tabs: 0\n  no-multiple-empty-lines: 0\n  no-negated-condition: 0\n  no-nested-ternary: 0\n  no-new-object: 0\n  no-plusplus: 0\n  no-spaced-func: 0\n  no-ternary: 0\n  no-trailing-spaces: 0\n  no-underscore-dangle: 0\n  no-unneeded-ternary: 0\n  object-curly-spacing: 0\n  one-var: 0\n  operator-assignment: 0\n  operator-linebreak: 0\n  padded-blocks: 0\n  quotes: 0\n  require-jsdoc: 0\n  semi-spacing: 0\n  sort-vars: 0\n  wrap-regex: 0\n\n  # ECMAScript 6\n  arrow-body-style: 0\n  arrow-parens: 0\n  arrow-spacing: 0\n  constructor-super: 0\n  generator-star-spacing: 0\n  no-class-assign: 0\n  no-const-assign: 0\n  no-dupe-class-members: 0\n  no-this-before-super: 0\n  no-var: 0\n  prefer-arrow-callback: 0\n  prefer-const: 0\n  prefer-reflect: 0\n  prefer-spread: 0\n  prefer-template: 0\n  require-yield: 0\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.021484375,
          "content": "lib\ntypes\ntest/models/*.js\nsample/models/*\nsample/northwind.sqlite\nsample/*-ts.js\n**/*.js.map\n\n# Not checking this in\npackage-lock.json\n\n*.swp\n.idea\n.env\n.vscode\n.DS_STORE\nnode_modules\nnpm-debug.log\n*~\ndatabase.sqlite\n.nyc_output\ncoverage/\ncoverage-*/\n\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n.env.test\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 0.423828125,
          "content": "{\n    \"globals\": {\n        \"jasmine\": false,\n        \"spyOn\": false,\n        \"it\": false,\n        \"console\": false,\n        \"describe\": false,\n        \"expect\": false,\n        \"beforeEach\": false,\n        \"waits\": false,\n        \"waitsFor\": false,\n        \"runs\": false\n    },\n    \"camelcase\": true,\n    \"curly\": false,\n    \"forin\": true,\n    \"indent\": 2,\n    \"unused\": true,\n    \"asi\": true,\n    \"evil\": false,\n    \"laxcomma\": true\n}"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.0458984375,
          "content": "{\n  \"printWidth\": 120,\n  \"singleQuote\": true\n}\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.728515625,
          "content": "\nlanguage: node_js\n\nsudo: false\n\nnode_js:\n  - \"10\"\n\ncache:\n  directories:\n    - node_modules\n\nservices:\n  - postgresql\n  - mysql\n\nbefore_script:\n  - \"npm install -g sqlite3\"\n  - \"npm install -g mysql2\"\n  - \"npm install pg pg-hstore\"\n  - \"mysql -e 'create database sequelize_auto_test;'\"\n  - \"psql -c 'create database sequelize_auto_test;' -U postgres\"\n\nscript:\n  - \"npm run build\"\n  - \"npm run test-sqlite\"\n  - \"npm run test-postgres\"\n  - \"npm run test-mysql\"\n\nenv:\n  >\n  SQLITE_HOST=localhost SQLITE_USER=sequelize_auto \n  POSTGRES_NAME=sequelize_auto_test POSTGRES_USER=postgres POSTGRES_HOST=localhost POSTGRES_PORT=5432\n  MYSQL_NAME=sequelize_auto_test MYSQL_USER=travis MYSQL_HOST=localhost MYSQL_PORT=3306\n\nafter_success: npm run coveralls\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 12.41015625,
          "content": "# sequelize-auto change log\n\n## [0.8.7] - 2021-12-08\n\n* Don't write field comments for mssql, because it throws error in sequelize.sync() (#567)\n* Add `--noIndexes` option (#563)\n* Add `--indentation` command line option to control indent size (#561)\n* Append an underscore if model name is a reserved word (#562, #570)\n* Remove 'esmd' lang option and standardize 'useDefine' behavior\n* Remove dialect `canAliasPK` check for generating fieldnames. (#571) _This was a workaround to a sequelize bug that has been fixed._\n* TypeScript: fix syntax for HasOneCreateAssociationMixin\n* TypeScript: make field optional if `autoIncrement` instead of `primaryKey` (#572)\n* Fix case-senstive column name when querying views in mysql (#579)\n* Fix field comparison casing (#576)\n* TypeScript: Make timestamp fields not required for creation (#577)\n* Support mysql 'year' type (#575)\n\n## [0.8.6] - 2021-12-01\n\n * Add `useDefine` option to use `sequelize.define` instead of `init` (#559, #573)\n\n## [0.8.5] - 2021-10-18\n\n* Add kebab-case for caseFile (#552) (thanks @Ray0427)\n* Add logic to skip fields while generating (#557) (thanks @dpomerantz-jci)\n* Make case of \"alias\" properties match other properties (#539) (thanks @Genaker)\n* Remove Model type import (#554) (thanks @leonardo)\n* Allow Primary Key suffixes to be passed in, to be trimmed when creating property names (#558) (thanks @dpomerantz-jci)\n* Fix handling of default value functions (#493, #548)\n* Use const instead of var in init-models for ES6 (#555)\n\n## [0.8.4] - 2021-08-06\n\n* Fix `--noAlias` option to never write aliases except for many-to-many relations (#515)\n* Add `-l esmd` for  ES modules with \"define\" syntax instead of classes (#527) (thanks @retfah) (removed in 0.8.6 in favor of `--useDefine`)\n* Fix problem with `paranoid` not in output when additional.paranoid specified (#529)\n* Fix alias generation for column names that differ only by singular/plural (#533) (thanks @edwardmcarl)\n* Add Postgres types inet, cidr, macaddr and oid (#534)\n* Add TypeScript type for jsonb | json (#541) (thanks @HussainMehdi)\n* Fix TypeScript optional fields and CreationAttributes (#543 #546) (thanks @kurochin143)\n\n## [0.8.3] - 2021-05-15\n\n* Fix generation of alias in many-to-many (#521)\n* Add `--noInitModels` flag (#519)\n* Fix duplicate alias in many-to-many relationships (#520)\n* Fix erroneous many-to-many relationship with composite foreign keys (#525)\n* Add `--noAlias` option to avoid making alias for relationships (#515)\n* Add tests\n\n## [0.8.2] - 2021-03-31\n\n* TypeScript: fix imports when `esModuleInterop` is false (#498)\n* mssql: Make varchar(max) be DataTypes.TEXT (#508)\n* Fix name collision when plural and singular are the same (#509)\n* Fix missing associations (#510 and #512)\n* TypeScript: remove cast \"as typeof Model\" in belongsToMany, for compatibility with Sequelize 6.6.2 (#511)\n* mysql: Treat `tinyint(1)` as boolean (#514)\n* Update devDependencies\n\n## [0.8.1] - 2021-03-09\n\n* Allow password to be supplied from terminal (#503) (thanks @zypA13510)\n* Fix autoIncrement for SQLite (#504)\n* TypeScript: make field optional with \"?\" if it has a defaultValue (#505)\n* BREAKING CHANGE: command-line options always take precedence over config file options\n* BREAKING CHANGE: `tables` and `skipTables` options on command line are now space-separated (instead of comma-separated) lists\n* BREAKING CHANGE: drop support of **node** version less than **10**\n\n## [0.8.0] - 2021-02-25\n\n* Add alias name to belongsToMany associations (#500)\n* Fix `references` to remove `schema`, seems unnecessary (#501)\n* Let host, database, username, and password be set via config file (#482) (thanks @twastvedt)\n* Update dependencies\n\n## [0.7.11] - 2021-02-09\n\n* Fix precision & scale for mssql DECIMAL types\n* Write mssql NUMERIC as DECIMAL instead of DOUBLE (#496)\n* Fix ENUM datatype for mysql\n* Sort relations by [parent, child] in init-models.ts\n* Update README to show alias in associations\n\n## [0.7.10] - 2021-02-03\n\n* Fix explicit NULL default values in mssql (#491) (thanks @md-shah)\n* Fix relation alias uniqueness (#489)\n* Add handling for Postgres range types (#490)\n* Make `id` field primaryKey if no other primaryKey exists (#480)\n\n## [0.7.9] - 2021-01-29\n\n* Fix schema handling and case errors in relations\n* Fix generation of relationships for mysql (#488)\n* Fix CRLF line breaks in bin/sequelize-auto (#487, #475, #462)\n\n## [0.7.8] - 2021-01-23\n\n* Make information_schema queries uppercase for mssql (#486)\n* Move meta queries from dialect-options to dialect-specific files\n* Create relations based on properties and alias instead of model names (#483, #466)\n\n## [0.7.7] - 2021-01-16\n\n* Escape special characters in default value (#476) (thanks @divinebovine)\n* Quote strings in Postgres array default values (#474)\n* Support both Postgres and Mysql enums (#479) (thanks @JonathanWolfe)\n* Use `autoIncrementIdentity` for Postgres identity columns (#485) (thanks @AdamAld)\n\n## [0.7.6] - 2020-12-17\n\n* Fix postgres array of enum (#463)\n* Fix `init-models` for ES6 modules (#464) (thanks @djake)\n* Fix examples in README (#465) (thanks @brandomeniconi)\n* Fix bug parsing comments as field type (#471)\n* TypeScript - add missing create/remove/has association methods (#467) (thanks @mat813)\n* TypeScript - don't lowercase the enum values (#468) (thanks @JonathanWolfe)\n* TypeScript - get/set DATE and TIME types as `string` instead of `date` (#469) (thanks @JonathanWolfe)\n\n## [0.7.5] - 2020-12-05\n\n* Add `--singularize` option, to singularize model and file names from plural table names\n* TypeScript - add association `get/set/add/remove/has/count/create` mixing methods to TypeScript models (#453) (thanks @mat813)\n* TypeScript - Add TableId and TablePk to model definitions (#453) (thanks @mat813)\n* Fix autoIncrement for generated keys in Postgres (#459 and #460) (thanks @divinebovine)\n* Cast through class to `Model` instead of `any` (#454) (thanks @mat813)\n* Fix postgres enum types broken in 0.7.2 (#455)\n\n## [0.7.4] - 2020-12-01\n\n* TypeScript - only declare properties optional (with `?`) when field is nullable (#450) (thanks @mat813)\n* TypeScript - add the ModelCreationAttributes to the generated files (#451) (thanks @mat813)\n* TypeScript - add not-null assertions (with `!`) for fields\n* Put `belongsToMany` relationships first in init-models (#449)\n* Set `noWrite` = true when directory == false (#447)\n\n## [0.7.3] - 2020-11-29\n\n* Fix autoIncrement for non-key fields in Postgres (#446 and #448)\n* Remove obsolete dependencies `async` and `graceful-fs-extra`\n\n## [0.7.2] - 2020-11-19\n\n* Add enum support for TypeScript types (#443) (thanks @JonathanWolfe)\n* Make `init-modules` ts version compliant with `--isolatedModules` (#444) (thanks @JonathanWolfe).  This is a **BREAKING CHANGE** because `--lang ts` output now requires TypeScript >= 3.8\n* Fix geometry/geography types in Postgres (#445)\n\n## [0.7.1] - 2020-11-05\n\n* Fix `foreignKey` property in `belongsTo` (#369)\n* Add `belongsToMany` when junction has 2 foreign keys that are also primary keys (#34)\n\n## [0.7.0] - 2020-11-03\n\n* Add `belongsTo/hasOne/hasMany` to initModels (#34) (#61) (#65) (#82) (#215) (#369)\n* Add precision to DECIMAL, DOUBLE, and FLOAT types\n* Add element type to Postgres ARRAY data types and TypeScript definitions (#151)\n\n## [0.6.7] - 2020-11-01\n\n* Fix \"Assignment to constant\" error introduced in 0.6.6 (#440) (thanks @xuezier)\n* Add support for generating models from views, `--views` option (#77)\n\n## [0.6.6] - 2020-10-30\n\n* Add `indexes` to table options (#162)\n* **BREAKING CHANGE** Change es6/esm/ts flags to `lang` option\n* Add JSDoc commments to type declarations\n* Add DataTypes.UUIDV4 default for postgres (#155) (thanks @roytz)\n\n## [0.6.5] - 2020-10-26\n\n* Escape special chars in table comments (#439)\n* Map mysql longtext/mediumtext/tinytext to DataTypes.TEXT\n* Export SequelizeAuto types in npm package (#140)\n\n## [0.6.4] - 2020-10-15\n\n* Export attributes interface for TypeScript files\n* Generate `init-model.js` file for loading models into sequelize\n* Add support for mysql date & time precision (thanks @locene)\n* Infer timestamps flag based on presence of createdAt/updatedAt field in tables\n* Change default indentation to 2 spaces\n* Add sample app; see [sample](./sample) directory\n* Fix quoting of table names in sqlite foreign keys query\n\n## [0.6.3] - 2020-10-05\n\n* Fix TypeScript generation (thanks @sschwenker)\n\n## [0.6.2] - 2020-09-28\n\n* Fix #TABLE# placeholder left in ES6 output, issue #432 (thanks @fprijate)\n* Fix command line `config` arguments, issue #434 (thanks @fprijate)\n* Fix schema comparison when filtering tables, issue #431\n\n## [0.6.1] - 2020-09-21\n\n* Fix default values for Postres Array types, issue #426\n* Fix multi-field unique constraints, issue #347 and #408\n* Fix tableResult properties, PR #429\n* Fix quotes in datatype names, issue #100\n* Catch promise rejections in auto-builder\n\n## [0.6.0] - 2020-09-17\n\n* **BREAKING CHANGE**  Change API to Promises instead of callbacks\n* Rewrite source code in TypeScript, add build step\n* Fix default value for Postgres JSON types, issue #426\n* Omit sysdiagrams from mssql tables\n* Update dependencies\n\n## [0.5.4] - 2020-08-27\n\n* Fix handling case sensitive collation in MSSQL, issue #416 (thanks @karpikpl)\n* Fix missing autoIncrement attribute due to schema clash, issue #419 (thanks @marcelopc)\n* **BREAKING CHANGE** Separate options for controlling case of output objects: `caseModel`, `caseFile`, `caseProp`, issue #413\n* Remove eslint from model generation, move into generate test, issue #425\n* Remove test files from npm package, using \"files\" option instead of .npmignore, issue #418\n\n## [0.5.3] - 2020-07-21\n\n* Fix filtering by `tables`|`skipTables` broken in 0.5.1, issue #409\n* Improve validation of command-line arguments `-c`,`-a`, issue #146 #213 #241\n* Fix travis build\n\n## [0.5.2] - 2020-07-16\n\n* Fix quotes in comments, #190\n* Fix defaultValue for boolean and number types, #225 and #386\n* Fix default value for CURRENT_TIMESTAMP and mssql functions\n* Fix unique attribute, #169\n* Fix autoIncrement for sqlite, #209\n\n## [0.5.1] - 2020-07-10\n\n* Fix `export default` in esm output (thanks @vykuntaharsha)\n* Fix missing comma after `autoIncrement`\n* Don't output `comment` if empty\n* Add `hasTrigger` support #217 (thanks @joaoe)\n* Fix check constraints when gathering foreign key info for mssql (thanks @joaoe)\n* Fix mysql views generation #354 (thanks @joaoe)\n* Fix schema support, #348 #350 (thanks @joaoe and @dlredden)\n* Add tests for cross-schema foreign keys (thanks @dlredden)\n* Add tests for snake_case table names -> UpperCamelCase model names\n\n## [0.5.0] - 2020-07-03\n\n* Add UpperCamelCase option (thanks @marshalys)\n* Document existing camelCase option (thanks @murfett-au)\n* Fix postgres dialect foreign key query to support Postgres 12\n* Update compatibility to Sequelize v5 & v6 (thanks @createthis @mrbichel @naren7229)\n* Fix \"c.extra\" in mysql foreign keys query (thanks @bkolla-ft and @jeongjuwon)\n* Fix support for `double` type (thanks @wen911119)\n* Add support for `closeConnectionAutomatically` (thanks @allnulled)\n* Fix schema name join in mysql foreign keys query (thanks @yujunlong2000)\n* Add schema to generated files (thanks @THAlpha)\n* Add arg \"l\", output language, values es5|es6|esm|ts  (thanks @threem0126)\n* Add HSTORE data type (thanks @roytz)\n* Fix tedious warnings for trustServerCertificate and enableArithAbort\n* Fix support for mssql: nchar, nvarchar, money, varbinary types\n\n\n## [0.4.29] - 2017-10-23\n\n### Fixed\n\n* Sets DATEONLY for DATE types\n* Fix typescript, add missing option for camelcase filenames...\n* Fixes JSONB support\n* Fixes TIMESTAMP support\n\n## [0.4.28] - 2017-04-22\n\n### Fixed\n\n* Fixes for timestamps fields\n* Fixes current_time code error\n\n## [0.4.27] - 2017-04-05\n\n### Fixed\n\n* Fixes schema support\n\n## [0.4.26] - 2017-04-05\n\n### Fixed\n\n* The defaultValue is now escape'd\n* Boolean/Bit columns are now fixed for MSSQL\n\n### Added\n\n* Adds schema support for `postgres` with the `s` flag.\n\n## [0.4.25] - 2017-03-20\n\n### Added\n\n* Adds `unique` support for `postgres`, `mysql`, and `mariadb`.\n\n### Fixed\n\n* Fixes `foreign key` and `unique` columns.\n\n## [0.4.24] - 2017-03-20\n\n### Added\n\n* Adds support for `UNSIGNED` and `ZEROFILL` MySQL columns.\n\n## [0.4.23] - 2017-03-20\n\n### Fixed\n\n* Adds schema support for `postgres` databases.\n* Directory output is now fixed for commands containing a config file as well.\n* Default port number has been added for `postgres`.\n* Mssql should now properly identify `auto increment` and `foreign key` columns.\n\n## [0.4.22] - 2017-03-20\n\n### Fixed\n\n* Sqlite will now properly set the `storage` option to the `database` value if no `storage` option is set.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.4130859375,
          "content": "# Sequelize-Auto\n\n<!-- [![Greenkeeper badge](https://badges.greenkeeper.io/sequelize/sequelize-auto.svg)](https://greenkeeper.io/) -->\n\n[![Build Status](http://img.shields.io/travis/sequelize/sequelize-auto/master.svg)](https://travis-ci.org/sequelize/sequelize-auto) [![Build status](https://ci.appveyor.com/api/projects/status/bf9lb89rmpj6iveb?svg=true)](https://ci.appveyor.com/project/durango/sequelize-auto) [![Code Climate](https://codeclimate.com/github/sequelize/sequelize-auto/badges/gpa.svg)](https://codeclimate.com/github/sequelize/sequelize-auto) [![Test Coverage](https://codeclimate.com/github/sequelize/sequelize-auto/badges/coverage.svg)](https://codeclimate.com/github/sequelize/sequelize-auto/coverage)\n\nAutomatically generate models for [SequelizeJS](https://github.com/sequelize/sequelize) via the command line.\n\n## Install\n\n    npm install sequelize-auto\n\n## Prerequisites\n\nYou will need to install `sequelize`; it's no longer installed by `sequelize-auto`.\n\nYou will need to install the correct dialect binding before using sequelize-auto.\n\nDialect | Install\n---|---\nMySQL/MariaDB | `npm install sequelize mysql2`\nPostgres | `npm install sequelize pg pg-hstore`\nSqlite | `npm install sequelize sqlite3`\nMSSQL | `npm install sequelize tedious`\n\n\n## Usage\n\n    sequelize-auto -h <host> -d <database> -u <user> -x [password] -p [port]  --dialect [dialect] -c [/path/to/config] -o [/path/to/models] -t [tableName]\n```\nOptions:\n    --help               Show help                                   [boolean]\n    --version            Show version number                         [boolean]\n-h, --host               IP/Hostname for the database.                [string]\n-d, --database           Database name.                               [string]\n-u, --user               Username for database.                       [string]\n-x, --pass               Password for database. If specified without providing\n                          a password, it will be requested interactively from\n                          the terminal.\n-p, --port               Port number for database (not for sqlite). Ex:\n                          MySQL/MariaDB: 3306, Postgres: 5432, MSSQL: 1433\n                                                                      [number]\n-c, --config             Path to JSON file for Sequelize-Auto options and\n                          Sequelize's constructor \"options\" flag object as\n                          defined here:\n                          https://sequelize.org/api/v6/class/src/sequelize.js~sequelize#instance-constructor-constructor\n                                                                      [string]\n-o, --output             What directory to place the models.          [string]\n-e, --dialect            The dialect/engine that you're using: postgres,\n                          mysql, sqlite, mssql                         [string]\n-a, --additional         Path to JSON file containing model options (for all\n                          tables). See the options: https://sequelize.org/api/v6/class/src/model.js~model#static-method-init\n                                                                      [string]\n    --indentation        Number of spaces to indent                   [number]\n-t, --tables             Space-separated names of tables to import     [array]\n-T, --skipTables         Space-separated names of tables to skip       [array]\n--caseModel, --cm        Set case of model names: c|l|o|p|u\n                          c = camelCase\n                          l = lower_case\n                          o = original (default)\n                          p = PascalCase\n                          u = UPPER_CASE\n--caseProp, --cp         Set case of property names: c|l|o|p|u\n--caseFile, --cf         Set case of file names: c|l|o|p|u|k\n                          k = kebab-case\n--noAlias                Avoid creating alias `as` property in relations\n                                                                     [boolean]\n--noInitModels           Prevent writing the init-models file        [boolean]\n-n, --noWrite            Prevent writing the models to disk          [boolean]\n-s, --schema             Database schema from which to retrieve tables[string]\n-v, --views              Include database views in generated models  [boolean]\n-l, --lang               Language for Model output: es5|es6|esm|ts\n                          es5 = ES5 CJS modules (default)\n                          es6 = ES6 CJS modules\n                          esm = ES6 ESM modules\n                          ts = TypeScript                             [string]\n--useDefine              Use `sequelize.define` instead of `init` for es6|esm|ts\n--singularize, --sg      Singularize model and file names from plural table\n                          names                                      [boolean]\n```\n\n> On Windows, provide the path to sequelize-auto: `node_modules\\.bin\\sequelize-auto [args]`\n\n## Example\n\n    sequelize-auto -o \"./models\" -d sequelize_auto_test -h localhost -u my_username -p 5432 -x my_password -e postgres\n\nProduces a file/files such as `./models/User.js` which looks like:\n\n```js\nmodule.exports = function(sequelize, DataTypes) {\n  return sequelize.define('User', {\n    id: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true\n    },\n    username: {\n      type: DataTypes.STRING(20),\n      allowNull: true\n    },\n    aNumber: {\n      type: DataTypes.SMALLINT,\n      allowNull: true\n    },\n    dateAllowNullTrue: {\n      type: DataTypes.DATE,\n      allowNull: true\n    },\n    defaultValueBoolean: {\n      type: DataTypes.BOOLEAN,\n      allowNull: true,\n      defaultValue: true\n    }\n  }, {\n    tableName: 'User',\n  });\n};\n```\n\nSequelize-auto also generates an initialization file, `./models/init-models.js`, which contains the code to load each model definition into Sequelize:\n\n```js\nvar DataTypes = require(\"sequelize\").DataTypes;\nvar _User = require(\"./User\");\nvar _Product = require(\"./Product\");\n\nfunction initModels(sequelize) {\n  var User = _User(sequelize, DataTypes);\n  var Product = _Product(sequelize, DataTypes);\n\n  return {\n    User,\n    Product,\n  };\n}\nmodule.exports = { initModels };\n```\n\nThis makes it easy to import all your models into Sequelize by calling `initModels(sequelize)`.\n\n```js\nvar initModels = require(\"./models/init-models\");\n...\nvar models = initModels(sequelize);\n\nmodels.User.findAll({ where: { username: \"tony\" }}).then(...);\n```\n\nAlternatively, you can [Sequelize.import](http://docs.sequelizejs.com/en/latest/docs/models-definition/#import) each model (for Sequelize versions < 6), or `require` each file and call the returned function:\n\n```js\nvar User = require('path/to/user')(sequelize, DataTypes);\n```\n\n## ES6\n\nYou can use the `-l es6` option to create the model definition files as ES6 classes, or `-l esm` option to create ES6 modules.  Then you would `require` or `import` the classes and call the `init(sequelize, DataTypes)` method on each class.\n\n## TypeScript\n\nAdd `-l ts` to cli options or `lang: 'ts'` to programmatic options.  This will generate a TypeScript class in each model file, and an `init-model.ts` file\nto import and initialize all the classes.\n\n> Note that you need TypeScript **4.x** to compile the generated files.\n\nThe TypeScript model classes are created as described in the [Sequelize manual](https://sequelize.org/master/manual/typescript.html)\n\nExample model class, `order.ts`:\n\n```js\nimport Sequelize, { DataTypes, Model, Optional } from 'sequelize';\nimport type { Customer, CustomerId } from './customer';\nimport type { OrderItem, OrderItemId } from './order_item';\n\nexport interface OrderAttributes {\n  id: number;\n  orderDate: Date;\n  orderNumber?: string;\n  customerId: number;\n  totalAmount?: number;\n  status: 'PROCESSING' | 'SHIPPED' | 'UNKNOWN';\n}\n\nexport type OrderPk = \"id\";\nexport type OrderId = Order[OrderPk];\nexport type OrderCreationAttributes = Optional<OrderAttributes, OrderPk>;\n\nexport class Order extends Model<OrderAttributes, OrderCreationAttributes> implements OrderAttributes {\n  id!: number;\n  orderDate!: Date;\n  orderNumber?: string;\n  customerId!: number;\n  totalAmount?: number;\n  status!: 'PROCESSING' | 'SHIPPED' | 'UNKNOWN';\n\n  // Order belongsTo Customer via customerId\n  customer!: Customer;\n  getCustomer!: Sequelize.BelongsToGetAssociationMixin<Customer>;\n  setCustomer!: Sequelize.BelongsToSetAssociationMixin<Customer, CustomerId>;\n  createCustomer!: Sequelize.BelongsToCreateAssociationMixin<Customer>;\n  // Order hasMany OrderItem via orderId\n  orderItems!: OrderItem[];\n  getOrderItems!: Sequelize.HasManyGetAssociationsMixin<OrderItem>;\n  setOrderItems!: Sequelize.HasManySetAssociationsMixin<OrderItem, OrderItemId>;\n  addOrderItem!: Sequelize.HasManyAddAssociationMixin<OrderItem, OrderItemId>;\n  addOrderItems!: Sequelize.HasManyAddAssociationsMixin<OrderItem, OrderItemId>;\n  createOrderItem!: Sequelize.HasManyCreateAssociationMixin<OrderItem>;\n  removeOrderItem!: Sequelize.HasManyRemoveAssociationMixin<OrderItem, OrderItemId>;\n  removeOrderItems!: Sequelize.HasManyRemoveAssociationsMixin<OrderItem, OrderItemId>;\n  hasOrderItem!: Sequelize.HasManyHasAssociationMixin<OrderItem, OrderItemId>;\n  hasOrderItems!: Sequelize.HasManyHasAssociationsMixin<OrderItem, OrderItemId>;\n  countOrderItems!: Sequelize.HasManyCountAssociationsMixin;\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof Order {\n    Order.init({\n    id: {\n      autoIncrement: true,\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true\n    },\n    orderDate: {\n      type: DataTypes.DATE,\n      allowNull: false,\n      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),\n      field: 'OrderDate'\n    },\n    orderNumber: {\n      type: DataTypes.STRING(10),\n      allowNull: true,\n      field: 'OrderNumber'\n    },\n    customerId: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      references: {\n        model: 'customer',\n        key: 'Id'\n      },\n      field: 'CustomerId'\n    },\n    totalAmount: {\n      type: DataTypes.DECIMAL(12,2),\n      allowNull: true,\n      defaultValue: 0.00,\n      field: 'TotalAmount'\n    },\n    status: {\n      type: DataTypes.ENUM('PROCESSING','SHIPPED','UNKNOWN'),\n      allowNull: false,\n      defaultValue: \"UNKNOWN\",\n      field: 'Status'\n    }\n  }, {\n    sequelize,\n    tableName: 'order',\n    timestamps: false,\n  });\n  return Order;\n  }\n}\n```\n\nExample `init-models.ts`:\n\n```js\nimport { Sequelize } from \"sequelize\";\nimport { Customer, CustomerAttributes, CustomerCreationAttributes } from \"./customer\";\nimport { Order, OrderAttributes, OrderCreationAttributes } from \"./order\";\nimport { OrderItem, OrderItemAttributes, OrderItemCreationAttributes } from \"./order_item\";\nimport { Product, ProductAttributes, ProductCreationAttributes } from \"./product\";\nimport { Supplier, SupplierAttributes, SupplierCreationAttributes } from \"./supplier\";\n\nexport {\n  Customer, CustomerAttributes, CustomerCreationAttributes,\n  Order, OrderAttributes, OrderCreationAttributes,\n  OrderItem, OrderItemAttributes, OrderItemCreationAttributes,\n  Product, ProductAttributes, ProductCreationAttributes,\n  Supplier, SupplierAttributes, SupplierCreationAttributes,\n};\n\nexport function initModels(sequelize: Sequelize) {\n  Customer.initModel(sequelize);\n  Order.initModel(sequelize);\n  OrderItem.initModel(sequelize);\n  Product.initModel(sequelize);\n  Supplier.initModel(sequelize);\n\n  Order.belongsTo(Customer, { as: \"customer\", foreignKey: \"customerId\"});\n  Customer.hasMany(Order, { as: \"orders\", foreignKey: \"customerId\"});\n  OrderItem.belongsTo(Order, { as: \"order\", foreignKey: \"orderId\"});\n  Order.hasMany(OrderItem, { as: \"orderItems\", foreignKey: \"orderId\"});\n  OrderItem.belongsTo(Product, { as: \"product\", foreignKey: \"productId\"});\n  Product.hasMany(OrderItem, { as: \"orderItems\", foreignKey: \"productId\"});\n  Product.belongsTo(Supplier, { as: \"supplier\", foreignKey: \"supplierId\"});\n  Supplier.hasMany(Product, { as: \"products\", foreignKey: \"supplierId\"});\n\n  return {\n    Customer: Customer,\n    OrderItem: OrderItem,\n    Order: Order,\n    Product: Product,\n    Supplier: Supplier,\n  };\n}\n```\n\nModel usage in a TypeScript program:\n\n```js\n// Order is the sequelize Model class\n// OrderAttributes is the interface defining the fields\n// OrderCreationAttributes is the interface defining the fields when creating a new record\nimport { initModels, Order, OrderCreationAttributes } from \"./models/init-models\";\n\n// import models into sequelize instance\ninitModels(this.sequelize);\n\nconst myOrders = await Order.findAll({ where: { \"customerId\": cust.id }, include: ['customer'] });\n\nconst attr: OrderCreationAttributes = {\n  customerId: cust.id,\n  orderDate: new Date(),\n  orderNumber: \"ORD123\",\n  totalAmount: 223.45\n};\nconst newOrder = await Order.create(attr);\n```\n\n\n## Configuration options\n\nFor the `-c, --config` option, various JSON/configuration parameters are defined by Sequelize's `options` flag within the constructor. See the [Sequelize docs](https://sequelize.org/master/class/lib/sequelize.js~Sequelize.html#instance-constructor-constructor) for more info.\n\n## Programmatic API\n\n```js\nconst SequelizeAuto = require('sequelize-auto');\nconst auto = new SequelizeAuto('database', 'user', 'pass');\n\nauto.run().then(data => {\n  console.log(data.tables);      // table and field list\n  console.log(data.foreignKeys); // table foreign key list\n  console.log(data.indexes);     // table indexes\n  console.log(data.hasTriggerTables); // tables that have triggers\n  console.log(data.relations);   // relationships between models\n  console.log(data.text)         // text of generated models\n});\n```\n\nWith options:\n\n```js\nconst auto = new SequelizeAuto('database', 'user', 'pass', {\n    host: 'localhost',\n    dialect: 'mysql'|'mariadb'|'sqlite'|'postgres'|'mssql',\n    directory: './models', // where to write files\n    port: 'port',\n    caseModel: 'c', // convert snake_case column names to camelCase field names: user_id -> userId\n    caseFile: 'c', // file names created for each model use camelCase.js not snake_case.js\n    singularize: true, // convert plural table names to singular model names\n    additional: {\n        timestamps: false\n        // ...options added to each model\n    },\n    tables: ['table1', 'table2', 'myschema.table3'] // use all tables, if omitted\n    //...\n})\n```\n\nOr you can create the `sequelize` instance first, using a [connection string](https://sequelize.org/master/manual/getting-started.html#connecting-to-a-database),\nand then pass it to SequelizeAuto:\n```js\nconst SequelizeAuto = require('sequelize-auto');\nconst Sequelize = require('sequelize');\n\n// const sequelize = new Sequelize('sqlite::memory:');\nconst sequelize = new Sequelize('postgres://user:pass@example.com:5432/dbname');\nconst options = { caseFile: 'l', caseModel: 'p', caseProp: 'c' };\n\nconst auto = new SequelizeAuto(sequelize, null, null, options);\nauto.run();\n```\n\n## Resources\n\n - [Changelog](https://github.com/sequelize/sequelize-auto/blob/master/CHANGELOG.md)\n\n## Testing\n\nTo set up:\n\n1. Create an empty database called `sequelize_auto_test` on your database server (sqlite excepted)\n2. Create a `.env` file from `sample.env` and set your username/password/port etc.  The env is read by `test/config.js`\n3. Build the TypeScript from the `src` directory into the `lib` directory:\n\n    `npm run build`\n\nThen run one of the test commands below:\n\n    # mysql only\n    npm run test-mysql\n\n    # postgres only\n    npm run test-postgres\n\n    # mssql  only\n    npm run test-mssql\n\n    # sqlite only\n    npm run test-sqlite\n\nAlso see the [sample](https://github.com/sequelize/sequelize-auto/tree/master/sample) directory which has an example including database scripts, export script, and a sample app.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.5966796875,
          "content": "version: 1.0.{build}\n\nimage: Visual Studio 2015\n\nplatform:\n  - x64\n\nservices:\n  - mssql2016\n  - mysql\n  - postgresql96\n\nshallow_clone: true\n\ncache:\n  - node_modules\n\nenvironment:\n  MSSQL_NAME: sequelize_auto_test\n  MSSQL_USER: sa\n  MSSQL_PASS: Password12!\n  MSSQL_HOST: localhost\n  MSSQL_PORT: 1433\n  MYSQL_NAME: sequelize_auto_test\n  MYSQL_USER: root\n  MYSQL_PASS: Password12!\n  MYSQL_HOST: localhost\n  MYSQL_PORT: 3306\n  MYSQL_PWD: Password12!\n  POSTGRES_NAME: sequelize_auto_test\n  POSTGRES_USER: postgres\n  POSTGRES_PASS: Password12!\n  POSTGRES_HOST: localhost\n  POSTGRES_PORT: 5432\n  PGUSER: postgres\n  PGPASSWORD: Password12!\n\n  matrix:\n    - {NODE_VERSION: 10, DIALECT: mssql}\n\ninstall:\n  - ps: Install-Product node $env:NODE_VERSION x64\n  - npm install -g npm@6.10.3\n  - ps: |\n      $pkg = ConvertFrom-Json (Get-Content -Raw package.json)\n      $pkg.devDependencies.PSObject.Properties.Remove('sqlite3')\n      $pkg.devDependencies.PSObject.Properties.Remove('pg-native')\n      ConvertTo-Json $pkg | Out-File package.json -Encoding UTF8\n  - npm install\n\nbuild_script:\n  - npm run build\n\nbefore_test:\n  - ps: sqlcmd -S \"(local)\" -U \"sa\" -P \"Password12!\" -d \"master\" -Q \"CREATE DATABASE [sequelize_auto_test]; ALTER DATABASE [sequelize_auto_test] SET READ_COMMITTED_SNAPSHOT ON;\"\n  - '\"C:\\\\Program Files\\\\PostgreSQL\\\\9.6\\\\bin\\\\createdb\" sequelize_auto_test'\n  - '\"C:\\\\Program Files\\\\MySQL\\\\MySQL Server 5.7\\\\bin\\\\mysql\" -e \"create database sequelize_auto_test;\" --user=root'\n\ntest_script:\n  - node --version\n  - npm --version\n  - npm run test-mssql\n  - npm run test-mysql\n  - npm run test-postgres\n\nbranches:\n  only:\n    - master\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.json",
          "type": "blob",
          "size": 0.1376953125,
          "content": "{\n  \"dialect\": \"postgres\",\n  \"port\": 5432,\n  \"omitNull\": true,\n  \"additional\" : {\n  \t\"freezeTableName\" : true,\n  \t\"timestamps\" : false\n  }\n}\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.0380859375,
          "content": "module.exports = require('./lib/auto');"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.56640625,
          "content": "{\n  \"name\": \"sequelize-auto\",\n  \"version\": \"0.8.7\",\n  \"publishConfig\": {\n    \"tag\": \"latest\"\n  },\n  \"description\": \"Automatically generate bare sequelize models from your database.\",\n  \"main\": \"index.js\",\n  \"types\": \"types\",\n  \"keywords\": [\n    \"mysql\",\n    \"mssql\",\n    \"sqlite\",\n    \"postgres\",\n    \"sequelize\",\n    \"sequelizejs\",\n    \"generator\",\n    \"mapper\",\n    \"typescript\"\n  ],\n  \"files\": [\n    \"*.js\",\n    \"lib/**/*.js\",\n    \"types/**/*.ts\",\n    \"*.md\"\n  ],\n  \"bin\": {\n    \"sequelize-auto\": \"bin/sequelize-auto\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/sequelize/sequelize-auto.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/sequelize/sequelize-auto/issues\"\n  },\n  \"nyc\": {\n    \"exclude\": [\n      \"**/test/*\"\n    ]\n  },\n  \"scripts\": {\n    \"tsc\": \"tsc\",\n    \"clean\": \"rimraf lib && rimraf types && rimraf **/models && rimraf *.tgz\",\n    \"build\": \"npm run clean && tsc\",\n    \"prepack\": \"crlf --set=LF bin/sequelize-auto\",\n    \"test\": \"npm run test-mssql && npm run test-mysql && npm run test-postgres && npm run test-sqlite\",\n    \"test-postgres\": \"cross-env DEBUG='sequelize-auto:*' DIALECT=postgres nyc mocha\",\n    \"test-postgres-native\": \"cross-env DEBUG='sequelize-auto:*' DIALECT=postgres-native nyc mocha\",\n    \"test-mysql\": \"cross-env DEBUG='sequelize-auto:*' DIALECT=mysql nyc mocha\",\n    \"test-sqlite\": \"cross-env DEBUG='sequelize-auto:*' DIALECT=sqlite nyc mocha\",\n    \"test-mssql\": \"cross-env DEBUG='sequelize-auto:*' DIALECT=mssql nyc mocha\",\n    \"coveralls\": \"nyc report --reporter=text-lcov | coveralls\"\n  },\n  \"engines\": {\n    \"node\": \">= 10\"\n  },\n  \"author\": \"Steve Schmitt (https://github.com/steveschmitt)\",\n  \"contributors\": [\n    \"Daniel Durante <me@danieldurante.com>\",\n    \"Yuping Zuo (https://github.com/zypA13510)\"\n  ],\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"lodash\": \"^4.17.21\",\n    \"mkdirp\": \"^1.0.4\",\n    \"reserved-words\": \"^0.1.2\",\n    \"yargs\": \"^16.2.0\"\n  },\n  \"peerDependencies\": {\n    \"sequelize\": \">3.30.0\"\n  },\n  \"devDependencies\": {\n    \"@types/chai\": \"^4.2.17\",\n    \"@types/lodash\": \"^4.14.168\",\n    \"@types/mocha\": \"^8.2.2\",\n    \"@types/reserved-words\": \"0.1.0\",\n    \"chai\": \"^4.3.4\",\n    \"coveralls\": \"^3.1.0\",\n    \"crlf\": \"^1.1.1\",\n    \"cross-env\": \"^7.0.3\",\n    \"debug\": \"^4.3.1\",\n    \"dotenv\": \"^8.2.0\",\n    \"eslint\": \"^7.23.0\",\n    \"lcov-result-merger\": \"^3.1.0\",\n    \"mocha\": \"^8.3.2\",\n    \"mysql\": \"^2.18.1\",\n    \"mysql2\": \"^2.2.5\",\n    \"nyc\": \"^15.1.0\",\n    \"pg\": \"^8.5.1\",\n    \"pg-hstore\": \"^2.3.3\",\n    \"rimraf\": \"^3.0.2\",\n    \"sequelize\": \"^6.11\",\n    \"sqlite3\": \"5.0.2\",\n    \"tedious\": \"^11.0.6\",\n    \"typescript\": \"^4.2.3\"\n  }\n}\n"
        },
        {
          "name": "sample.env",
          "type": "blob",
          "size": 0.5703125,
          "content": "\n# *****************************************************\n#        Credentials used for running tests\n# *****************************************************\nMYSQL_NAME=sequelize_auto_test\nMYSQL_USER=sequelize_auto\nMYSQL_PASS=sequelize_auto\nMYSQL_HOST=localhost\nMYSQL_PORT=3306\n\nPOSTGRES_NAME=sequelize_auto_test\nPOSTGRES_USER=sequelize_auto\nPOSTGRES_PASS=sequelize_auto\nPOSTGRES_HOST=localhost\nPOSTGRES_PORT=5432\n\nSQLITE_HOST=localhost\nSQLITE_USER=sequelize_auto\n\nMSSQL_NAME=sequelize_auto_test\nMSSQL_USER=sequelize_auto\nMSSQL_PASS=sequelize_auto\nMSSQL_HOST=localhost\nMSSQL_PORT=1433\n"
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.578125,
          "content": "{\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"checkJs\": true,\n    \"strict\": true,\n    \"declaration\": true,\n    \"declarationDir\": \"types\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"noImplicitAny\": true,\n    \"esModuleInterop\": true,\n    \"outDir\": \"lib\",\n    \"preserveConstEnums\": true,\n    \"removeComments\": false,\n    \"sourceMap\": true,\n    \"target\": \"ES6\",\n    \"skipLibCheck\": true,\n    \"typeRoots\": [\n      \"node_modules/@types\"\n    ]\n  },\n  \"include\": [\n    \"src/**/*\"\n  ],\n  \"exclude\": [\n    \"node_modules\",\n    \"test\",\n    \"types\",\n    \"lib\",\n    \"scripts\"\n  ]\n}"
        },
        {
          "name": "tslint.json",
          "type": "blob",
          "size": 2.2587890625,
          "content": "{\n  \"rules\": {\n    \"arrow-return-shorthand\": true,\n    \"callable-types\": true,\n    \"class-name\": true,\n    \"comment-format\": [true, \"check-space\"],\n    \"curly\": true,\n    \"eofline\": true,\n    \"forin\": true,\n    \"import-blacklist\": [true],\n    \"import-spacing\": true,\n    \"indent\": [true, \"spaces\", 2],\n    \"interface-over-type-literal\": true,\n    \"label-position\": true,\n    \"max-line-length\": [true, 160],\n    \"member-access\": false,\n    \"no-arg\": true,\n    \"no-bitwise\": true,\n    \"no-console\": [true, \"debug\", \"info\", \"time\", \"timeEnd\", \"trace\"],\n    \"no-construct\": true,\n    \"no-debugger\": true,\n    \"no-duplicate-super\": true,\n    \"no-duplicate-variable\": true,\n    \"no-empty\": false,\n    \"no-empty-interface\": true,\n    \"no-eval\": true,\n    \"no-inferrable-types\": [true, \"ignore-params\"],\n    \"no-misused-new\": true,\n    \"no-non-null-assertion\": true,\n    \"no-shadowed-variable\": true,\n    \"no-string-literal\": false,\n    \"no-string-throw\": true,\n    \"no-switch-case-fall-through\": true,\n    \"no-trailing-whitespace\": true,\n    \"no-unnecessary-initializer\": true,\n    \"no-unused-expression\": true,\n    \"no-var-keyword\": true,\n    \"object-literal-sort-keys\": false,\n    \"one-line\": [\n      true,\n      \"check-open-brace\",\n      \"check-catch\",\n      \"check-else\",\n      \"check-whitespace\"\n    ],\n    \"prefer-const\": true,\n    \"quotemark\": [false, \"single\"],\n    \"radix\": true,\n    \"semicolon\": {\n      \"options\": [\n        \"always\"\n      ]\n    },\n    \"triple-equals\": [true, \"allow-null-check\"],\n    \"typedef-whitespace\": [\n      true,\n      {\n        \"call-signature\": \"nospace\",\n        \"index-signature\": \"nospace\",\n        \"parameter\": \"nospace\",\n        \"property-declaration\": \"nospace\",\n        \"variable-declaration\": \"nospace\"\n      }\n    ],\n    \"unified-signatures\": true,\n    \"variable-name\": false,\n    \"whitespace\": [\n      true,\n      \"check-branch\",\n      \"check-decl\",\n      \"check-operator\",\n      \"check-separator\",\n      \"check-type\"\n    ],\n\n    \"directive-selector\": [true, \"attribute\", \"sp\", \"camelCase\"],\n    \"component-selector\": [true, \"element\", \"sp\", \"kebab-case\"],\n    \"no-input-rename\": true,\n    \"no-output-rename\": true,\n    \"use-life-cycle-interface\": true,\n    \"use-pipe-transform-interface\": true,\n    \"component-class-suffix\": true,\n    \"directive-class-suffix\": true\n  }\n}\n"
        }
      ]
    }
  ]
}