{
  "metadata": {
    "timestamp": 1736563599097,
    "page": 75,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "turbulenz/turbulenz_engine",
      "stars": 4617,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2265625,
          "content": "# Virtual env\n/env/\nnode_modules\n\n# Compiled python files\n*.pyc\n*.pyo\n\n# JSLIB build files\njslib/\njslib-modular/\njslib-refcheck/\n.mkdir\n.tssyntaxcheck/\n\n# Temporary files\n*~\n.DS_Store\nTAGS\n\n# default local server folder\n/devserver/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.4345703125,
          "content": "[submodule \"external/definitelytyped\"]\n\tpath = external/definitelytyped\n\turl = git://github.com/borisyankov/DefinitelyTyped.git\n[submodule \"external/uglifyjs\"]\n\tpath = external/uglifyjs\n\turl = git://github.com/mishoo/UglifyJS.git\n[submodule \"external/tzbuild\"]\n\tpath = external/tzbuild\n\turl = git://github.com/turbulenz/turbulenz_build.git\n[submodule \"tools/NvTriStrip\"]\n\tpath = tools/NvTriStrip\n\turl = git://github.com/turbulenz/NvTriStrip.git\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 9.0439453125,
          "content": "[MASTER]\n\n# Specify a configuration file.\n#rcfile=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Profiled execution.\nprofile=no\n\n# Add <file or directory> to the black list. It should be a base name, not a\n# path. You may set this option multiple times.\nignore=ply\nignore=jsmin.py\nignore=pythonpackage.py\nignore=tests\nignore=websocket.py\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n\n[MESSAGES CONTROL]\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time.\n#enable=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifier separated by comma (,) or put this option\n# multiple time.\n\n# This is disabled on a case by case basis in the code.\n# W0703: Catch \"Exception\"\n# See: http://www.python.org/dev/peps/pep-0352/\n\n# I0011: Locally disabling %r\n# W0613: Unused argument %r Used when a function or method argument is not used.\n# E0611: No name %r in module %r Used when a name cannot be found in a module.\n# R0903: Too few public methods (%r/%r)\n# C0111: Missing docstring\n# W0142: Used * or ** magic\ndisable=C0111,I0011,W0613,E0611,R0903,W0142,R0801,W1401,C0326\n\n\n[REPORTS]\n\n# Set the output format. Available formats are text, parseable, colorized, msvs\n# (visual studio) and html\noutput-format=text\n\n# Include message's id in output\ninclude-ids=yes\n\n# Put messages in a separate file for each module / package specified on the\n# command line instead of printing them on stdout. Reports (if any) will be\n# written in a file name \"pylint_global.[txt|html]\".\nfiles-output=no\n\n# Tells whether to display a full report or only the messages\nreports=yes\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (R0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Add a comment according to your evaluation note. This is used by the global\n# evaluation report (R0004).\ncomment=no\n\n# Template used to display messages. This is a python new-style format string\n# used to format the massage information. See doc for all details\nmsg-template={path}:{line}: [{msg_id}({symbol}), {obj}] {msg}\n\n\n[VARIABLES]\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# A regular expression matching the beginning of the name of dummy variables\n# (i.e. not used).\ndummy-variables-rgx=_$|dummy\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n\n[BASIC]\n\n# Required attributes for module, separated by a comma\nrequired-attributes=\n\n# List of builtins function names that should not be used, separated by a comma\nbad-functions=map,filter,apply,input\n\n# Regular expression which should only match correct module names\nmodule-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n# Regular expression which should only match correct module level names\nconst-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n\n# Regular expression which should only match correct class names\nclass-rgx=[A-Z_][a-zA-Z0-9]+$\n\n# Regular expression which should only match correct function names\nfunction-rgx=[a-z_][a-z0-9_]{2,38}$\n\n# Regular expression which should only match correct method names\nmethod-rgx=[a-z_][a-z0-9_]{2,38}$\n\n# Regular expression which should only match correct instance attribute names\nattr-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression which should only match correct argument names\nargument-rgx=[a-z_][a-z0-9_]{2,30}|[a-z]|[a-z][0-9]$\n\n# Regular expression which should only match correct variable names\n# We allow single variable names \"a, b, c, ...\"\n# We allow numbered single variable names \"a1, a2, a3, ...\"\nvariable-rgx=[a-z_][a-z0-9_]{2,30}|[a-z]|[a-z][0-9]$\n\n# Regular expression which should only match correct attribute names in class\n# bodies\nclass-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n\n# Regular expression which should only match correct list comprehension /\n# generator expression variable names\ninlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$\n\n# Good variable names which should always be accepted, separated by a comma\n# urlpatterns - Django application url dispatcher variable\n# register - Django templatetag registration variable\ngood-names=i,j,k,ex,Run,_,urlpatterns,register,id\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=foo,bar,baz,toto,tutu,tata\n\n# Regular expression which should only match functions or classes name which do\n# not require a docstring\nno-docstring-rgx=__.*__\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n\n[FORMAT]\n\n# Maximum number of characters on a single line.\nmax-line-length=120\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Maximum number of lines in a module\nmax-module-lines=5000\n\n# String used as indentation unit. This is usually \" \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,XXX\n\n\n[SIMILARITIES]\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=10\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n\n[TYPECHECK]\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# List of classes names for which member attributes should not be checked\n# (useful for classes with attributes dynamically set).\nignored-classes=SQLObject\n\n# When zope mode is activated, add a predefined set of Zope acquired attributes\n# to generated-members.\nzope=no\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E0201 when accessed.\ngenerated-members=REQUEST,acl_users,aq_parent\n\n\n[VARIABLES]\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# A regular expression matching names used for dummy variables (i.e. not used).\n# Any variable ending in '_' is considered unused\ndummy-variables-rgx=_|[a-z_][a-z0-9_]{2,30}_$\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n\n[CLASSES]\n\n# List of interface methods to ignore, separated by a comma. This is used for\n# instance to not check methods defines in Zope's Interface base class.\nignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,__new__,setUp\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=mcs\n\n\n[DESIGN]\n\n# Maximum number of arguments for function / method\nmax-args=10\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore\nignored-argument-names=_.*\n\n# Maximum number of locals for function / method body\n# max-locals=20\nmax-locals=40\n\n# Maximum number of return / yield for function / method body\nmax-returns=10\n\n# Maximum number of branch for function / method body\nmax-branchs=100\nmax-branches=100\n\n# Maximum number of statements in function / method body\n#max-statements=100\nmax-statements=200\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=10\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=20\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=25\n\n\n[IMPORTS]\n\n# Deprecated modules which should not be used, separated by a comma\ndeprecated-modules=regsub,string,TERMIOS,Bastion,rexec\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled)\nimport-graph=\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled)\next-import-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled)\nint-import-graph=\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"Exception\"\novergeneral-exceptions=Exception\n"
        },
        {
          "name": ".tslintrc",
          "type": "blob",
          "size": 1.3310546875,
          "content": "{\n    \"rules\": {\n        \"class-name\": true,\n        \"curly\": true,\n        \"eofline\": true,\n        \"forin\": true,\n        \"indent\": [true, 4],\n        \"label-position\": true,\n        \"label-undefined\": true,\n        \"max-line-length\": [true, 120],\n        \"no-arg\": true,\n        \"no-bitwise\": true,\n        \"no-console\": [true,\n            \"debug\",\n            \"info\",\n            \"time\",\n            \"timeEnd\",\n            \"trace\"\n        ],\n        \"no-construct\": true,\n        \"no-debugger\": true,\n        \"no-duplicate-key\": true,\n        \"no-duplicate-variable\": true,\n        \"no-empty\": true,\n        \"no-eval\": true,\n        \"no-string-literal\": true,\n        \"no-trailing-comma\": true,\n        \"no-trailing-whitespace\": true,\n        \"no-unused-variable\": true,\n        \"no-unreachable\": true,\n        \"no-use-before-declare\": true,\n        \"one-line\": [false,\n            \"check-open-brace\",\n            \"check-catch\",\n            \"check-else\",\n            \"check-whitespace\"\n        ],\n        \"quotemark\": [false, \"double\"],\n        \"radix\": true,\n        \"semicolon\": true,\n        \"triple-equals\": [true, \"allow-null-check\"],\n        \"variable-name\": false,\n        \"whitespace\": [true,\n            \"check-branch\",\n            \"check-decl\",\n            \"check-operator\",\n            \"check-separator\",\n            \"check-type\"\n        ]\n    }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "\nCopyright (c) 2009-2014 Turbulenz Limited\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 6.896484375,
          "content": "BUILDDIR := external/tzbuild\nifeq (,$(wildcard $(BUILDDIR)/config.mk))\n  $(error Have you updated all submodules to include tzbuild?)\nendif\n\ninclude $(BUILDDIR)/config.mk\n\n# $(warning TARGET=$(TARGET))\n# $(warning TARGETNAME=$(TARGETNAME))\n# $(warning CONFIG=$(CONFIG))\n# $(warning MAKEFLAGS=$(MAKEFLAGS))\n# $(warning MAKECMDGOALS=$(MAKECMDGOALS))\n\n############################################################\n\nhelp:\n\t@echo \"\"\n\t@echo \"Usage:\"\n\t@echo \"\"\n\t@echo \"  make [<flags>] <targets>\"\n\t@echo \"\"\n\t@echo \"Targets:\"\n\t@echo \"\"\n\t@echo \"jslib\"\n\n############################################################\n# TSLIB build modules\n############################################################\n\nTSC := tsc\n\nMODULAR ?= 0\nREFCHECK ?= 0\nONESHOT ?= 0\n\nTS_MODULAR ?= $(MODULAR)\nTS_REFCHECK ?= $(REFCHECK)\nTS_ONESHOT ?= $(ONESHOT)\nTS_OUTPUT_DIR := jslib$(if $(filter $(MODULAR),1),-modular)\nTS_OUTPUT_DIR := $(TS_OUTPUT_DIR)$(if $(filter $(REFCHECK),1),-refcheck)\nTS_SRC_DIR := tslib\n\nifeq (win32,$(BUILDHOST))\n  CGFX2JSON ?= tools\\bin\\$(BUILDHOST)\\cgfx2json.exe\nelse\n  CGFX2JSON ?= tools/bin/$(BUILDHOST)/cgfx2json\nendif\nCGFX2JSONFLAGS := -j 4\n\n# platform\nplatform_src := $(TS_SRC_DIR)/base.d.ts $(TS_SRC_DIR)/turbulenz.d.ts\n\n# debug\ndebug_src := $(TS_SRC_DIR)/debug.ts\ndebug_deps := platform\n\n# vmath\nvmath_src := $(TS_SRC_DIR)/vmath.ts\nvmath_deps := platform debug\n\n# AABBTree\naabbtree_src := $(TS_SRC_DIR)/aabbtree.ts\naabbtree_deps := vmath debug\n\n# physics_canvas\nphysics_canvas_src := $(TS_SRC_DIR)/webgl/physicsdevice.ts\nphysics_canvas_deps := aabbtree vmath platform\nphysics_canvas_nodecls := 1\n\n# platform_canvas - everything in webgl except the physicsdevice\nplatform_canvas_src := \\\n  $(filter-out %physicsdevice.ts,$(wildcard $(TS_SRC_DIR)/webgl/*.ts))\nplatform_canvas_deps := vmath platform\nplatform_canvas_nodecls := 1\n\n# utilities\nutilities_src = $(addprefix $(TS_SRC_DIR)/, \\\n  observer.ts requesthandler.ts utilities.ts)\nutilities_deps := platform\n\n# servicestypes\nservicedatatypes_src := $(TS_SRC_DIR)/services/servicedatatypes.d.ts\n\n# services\nservices_src := $(wildcard $(TS_SRC_DIR)/services/*.ts)\nservices_deps := utilities debug servicedatatypes\n\n# tzdraw2d\ntzdraw2d_src := $(TS_SRC_DIR)/draw2d.ts assets/shaders/draw2D.cgfx\ntzdraw2d_deps = platform debug\n\n# physics2d\nphysics2d_src := $(TS_SRC_DIR)/physics2ddevice.ts $(TS_SRC_DIR)/boxtree.ts\nphysics2d_deps := platform debug\n\n# physics2ddebugdraw\nphysics2ddebugdraw_src := \\\n  $(TS_SRC_DIR)/physics2ddebugdraw.ts assets/shaders/debugphys2d.cgfx\nphysics2ddebugdraw_deps := physics2d\n\n# fontmanager\nfontmanager_src := $(TS_SRC_DIR)/fontmanager.ts\nfontmanager_deps := platform utilities debug\n\n# canvas\ncanvas_src := $(TS_SRC_DIR)/canvas.ts assets/shaders/canvas.cgfx\ncanvas_deps := platform fontmanager\n\n# svg\nsvg_src := $(TS_SRC_DIR)/svg.ts\nsvg_deps := canvas\n\n# spatialgrid\nspatialgrid_src := $(TS_SRC_DIR)/spatialgrid.ts\nspatialgrid_deps := debug\n\n# sparsegrid\nsparsegrid_src := $(TS_SRC_DIR)/sparsegrid.ts\nsparsegrid_deps := debug\n\n# jsengine_base\njsengine_base_src := $(addprefix $(TS_SRC_DIR)/, \\\n  assetcache.ts assettracker.ts camera.ts charactercontroller.ts \\\n  indexbuffermanager.ts soundmanager.ts texturemanager.ts \\\n  vertexbuffermanager.ts)\njsengine_base_deps := platform utilities debug\n\n# shadermanager\nshadermanager_src := $(TS_SRC_DIR)/shadermanager.ts assets/shaders/default.cgfx\nshadermanager_deps := jsengine_base\n\n# jsengine\njsengine_src := $(addprefix $(TS_SRC_DIR)/,                                   \\\n  animation.ts animationmanager.ts defaultrendering.ts effectmanager.ts       \\\n  material.ts geometry.ts light.ts mouseforces.ts physicsmanager.ts           \\\n  posteffects.ts renderingcommon.ts resourceloader.ts scene.ts scenenode.ts   \\\n  shadowmapping.ts cascadedshadows.ts                                         \\\n)\njsengine_deps := services aabbtree jsengine_base shadermanager\n\n# floor\nfloor_src := $(TS_SRC_DIR)/floor.ts assets/shaders/floor.cgfx\nfloor_deps := jsengine_base\n\n# loadingscreen\nloadingscreen_src := \\\n  $(TS_SRC_DIR)/loadingscreen.ts assets/shaders/loadingscreen.cgfx\nloadingscreen_deps := jsengine_base\n\n# textureeffects\ntextureeffects_src := \\\n  $(TS_SRC_DIR)/textureeffects.ts assets/shaders/textureeffects.cgfx\ntextureeffects_deps := jsengine_base\n\n# jsengine_simplerendering\njsengine_simplerendering_src := $(TS_SRC_DIR)/simplerendering.ts\njsengine_simplerendering_deps := jsengine\n\n# jsengine_deferredrendering\njsengine_deferredrendering_src := $(TS_SRC_DIR)/deferredrendering.ts\njsengine_deferredrendering_deps := jsengine\n\n# jsengine_forwardrendering\njsengine_forwardrendering_src := $(TS_SRC_DIR)/forwardrendering.ts\njsengine_forwardrendering_deps := jsengine\n\n# jsengine_debug\njsengine_debug_src := $(addprefix $(TS_SRC_DIR)/,                  \\\n  drawprimitives.ts debuggingtools.ts networklatencysimulator.ts   \\\n  scenedebugging.ts)                                               \\\n  $(wildcard $(TS_SRC_DIR)/dump*.ts)\njsengine_debug_deps := jsengine\n\n# capturedevices\ncapturedevices_src := tslib/capturegraphicsdevice.ts\ncapturedevices_deps := platform debug\n\n# particlesystem\nparticlesystem_src := tslib/particlesystem.ts  \\\n  assets/shaders/particles-copy.cgfx           \\\n  assets/shaders/particles-packer.cgfx         \\\n  assets/shaders/particles-sort.cgfx\nparticlesystem_deps := platform debug jsengine\n\nTSLIBS += platform debug vmath aabbtree physics_canvas platform_canvas        \\\n  utilities services tzdraw2d physics2d physics2ddebugdraw fontmanager canvas \\\n  jsengine_base shadermanager floor loadingscreen textureeffects jsengine     \\\n  jsengine_simplerendering jsengine_deferredrendering                         \\\n  jsengine_forwardrendering jsengine_debug capturedevices svg spatialgrid     \\\n  particlesystem sparsegrid\n\n# Check we haven't forgotten any tslib files\nifeq (macosx,$(TARGET))\n  all_ts_files := $(shell find tslib -iname '[^\\.]*.ts' | grep -v external)\n  all_ts_src_files := \\\n    $(TS_BASE_FILES) $(foreach tsl,$(TSLIBS),$($(tsl)_src))\n  forgotten_ts_files := $(filter-out $(all_ts_src_files),$(all_ts_files))\n  ifneq (,$(forgotten_ts_files))\n    $(error THESE FILES ARE NOT USED: $(forgotten_ts_files))\n  endif\nendif\n\n############################################################\n\n# Temporary hack to prevent C rules being included since they don't\n# work under pymake.\nifeq (jslib,$(MAKECMDGOALS))\n  APPS:=\n  LIBS:=\n  DLLS:=\nendif\n\n# EXT, LIBS, APPS are used to set up all build rules ...\ninclude $(BUILDDIR)/rules.mk\n\n############################################################\n# Single file with all code\n############################################################\n\nifeq (1,$(TS_MODULAR))\n\nUGLIFY := node $(BUILDDIR)/../uglifyjs/bin/uglifyjs\nAIO_ALL_INPUT := $(foreach t,$(TSLIBS),$(_$(t)_out_js))\nturbulenz-all-min.js : $(AIO_ALL_INPUT)\n\t$(CMDPREFIX)$(CAT) $^ | $(UGLIFY) -o $@\n\nAIO_ALL_DECLS := $(foreach t,$(TSLIBS),\t\t\t\\\n  $(if $($(t)_nodecls),,$(_$(t)_out_d_ts))\t\t\\\n)\nturbulenz-all.d.ts : $(AIO_ALL_DECLS)\n\t$(CAT) $^ > $@\n\n.PHONY: allinone\nallinone : turbulenz-all-min.js turbulenz-all.d.ts\n\nendif\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 43.8212890625,
          "content": "================\nTurbulenz Engine\n================\n\nTurbulenz is an HTML5 game engine and server-side APIs available in JavaScript and TypeScript for building and distributing 2D and 3D games that run on platforms that support HTML5 features such as modern browsers without the need for plugins.\n\n.. contents::\n    :local:\n\n\nExamples using the Turbulenz Engine\n===================================\n\nGames\n-----\n\n* `Polycraft <https://turbulenz.com/games/polycraft>`__ - 3D\n* `Save the day <https://turbulenz.com/games/save-the-day>`__ - 2D\n* `Denki Blocks! <https://turbulenz.com/games/denkiblocks>`__ - 2D\n* `Denki Word Quest <https://turbulenz.com/games/denkiwordquest>`__ - 2D\n* `Score Rush <https://turbulenz.com/games/scorerush>`__ - 2D\n* `Score Rush MP <https://turbulenz.com/games/scorerush-mp>`__ - multiplayer\n* `Space Ark <https://turbulenz.com/games/space-ark>`__ - 3D\n* `Apathy <http://apathy.plankhead.com/>`__ - `src <https://github.com/Zacqary/Apathy>`__ - 2D\n* Salty Dogs - `src <https://github.com/zacqary/salty-dogs>`__\n* `Gargantia Sky Courier <http://fly.gargantia.jp>`__ - `src <https://github.com/turbulenz/gargantia_editor>`__ - 3D\n\nApps\n----\n\n* Sample app - `src <apps/sampleapp/scripts/sampleappmain.js>`__\n* Touch, keyboard, mouse and pad controller input app - `src <apps/inputapp/tsscripts/inputapp>`__\n* Viewer - `src <apps/viewer/scripts/viewer.js>`__\n* Realtime multiplayer worm app - `src <apps/multiworm/tsscripts/worm>`__\n* Asynchronous turn based multiplayer tic-tac-toe app - `src <apps/tictactoe/tsscripts/tictactoe>`__\n\nPrototyping\n-----------\n\n* Prototyping basic app - `jsfiddle <http://jsfiddle.net/jamesaustin/WF47C/>`__\n* Prototyping sample app - `src <apps/protolibsampleapp/scripts/protolibsampleapp.js>`__\n* Prototyping template app - `src <apps/protolibtemplateapp/scripts/app.js>`__\n\nSamples\n-------\n\n* Setup:\n\n  * `Device Initialization <http://biz.turbulenz.com/sample_assets/device_initialization.canvas.release.html>`__ - `src <samples/tsscripts/templates/device_initialization.ts>`__\n  * `Basic Loop <http://biz.turbulenz.com/sample_assets/basic_loop.canvas.release.html>`__ - `src <samples/tsscripts/templates/basic_loop.ts>`__\n\n* 2D Rendering:\n\n  * `2D Canvas <http://biz.turbulenz.com/sample_assets/2dcanvas.canvas.release.html>`__ - `src <samples/tsscripts/templates/2dcanvas.ts>`__ - `jsfiddle <http://jsfiddle.net/jamesaustin/HRAw7/>`__\n  * `Draw2D <http://biz.turbulenz.com/sample_assets/draw2d.canvas.release.html>`__ - `src <samples/tsscripts/templates/draw2d.ts>`__\n  * `TextureEffects <http://biz.turbulenz.com/sample_assets/textureeffects.canvas.release.html>`__ - `src <samples/tsscripts/templates/textureeffects.ts>`__\n  * `Immediate Mode Rendering <http://biz.turbulenz.com/sample_assets/immediate_mode_rendering.canvas.release.html>`__ - `src <samples/tsscripts/templates/immediate_mode_rendering.ts>`__\n  * Loading - `src <samples/tsscripts/templates/loading.ts>`__\n  * SVG - `src <samples/tsscripts/templates/svg.ts>`__\n\n* 3D Rendering:\n\n  * `Camera <http://biz.turbulenz.com/sample_assets/camera.canvas.release.html>`__ - `src <samples/tsscripts/templates/camera.ts>`__\n  * `Material <http://biz.turbulenz.com/sample_assets/material.canvas.release.html>`__ - `src <samples/tsscripts/templates/material.ts>`__\n  * `Forward rendering <http://biz.turbulenz.com/sample_assets/forward_rendering.canvas.release.html>`__ - `src <samples/tsscripts/templates/forward_rendering.ts>`__\n  * `Morphing <http://biz.turbulenz.com/sample_assets/morphing.canvas.release.html>`__ - `src <samples/tsscripts/templates/morphing.ts>`__\n  * `Post effects <http://biz.turbulenz.com/sample_assets/postfx.canvas.release.html>`__ - `src <samples/tsscripts/templates/postfx.ts>`__\n  * `Particles <http://biz.turbulenz.com/sample_assets/particles.canvas.release.html>`__ - `src <samples/tsscripts/templates/particles.ts>`__\n  * Deferred Rendering - `src <samples/tsscripts/templates/deferred_rendering.ts>`__\n  * Load model - `src <samples/tsscripts/templates/load_model.ts>`__\n  * Scene loading - `src <samples/tsscripts/templates/scene_loading.ts>`__\n\n* Animation:\n\n  * `Animation <http://biz.turbulenz.com/sample_assets/animation.canvas.release.html>`__ - `src <samples/tsscripts/templates/animation.ts>`__\n  * `Multiple animations <http://biz.turbulenz.com/sample_assets/multiple_animations.canvas.release.html>`__ - `src <samples/tsscripts/templates/multiple_animations.ts>`__\n\n* 2D Physics:\n\n  * `2D Physics <http://biz.turbulenz.com/sample_assets/physics2d.canvas.release.html>`__ - `src <samples/tsscripts/templates/physics2d.ts>`__\n  * `2D Physics constraints <http://biz.turbulenz.com/sample_assets/physics2d_constraints.canvas.release.html>`__ - `src <samples/tsscripts/templates/physics2d_constraints.ts>`__\n  * `2D Physics callbacks <http://biz.turbulenz.com/sample_assets/physics2d_callbacks.canvas.release.html>`__ - `src <samples/tsscripts/templates/physics2d_callbacks.ts>`__\n\n* 3D Physics:\n\n  * `3D Physics <http://biz.turbulenz.com/sample_assets/physics.canvas.release.html>`__ - `src <samples/tsscripts/templates/physics.ts>`__\n  * `3D Physics <benchmark(http://biz.turbulenz.com/sample_assets/physics_benchmark.canvas.release.html>`__ - `src <samples/tsscripts/templates/physics_benchmark.ts>`__\n  * `3D Physics collision mesh <http://biz.turbulenz.com/sample_assets/physics_collisionmesh.canvas.release.html>`__ - `src <samples/tsscripts/templates/physics_collisionmesh.ts>`__\n  * 3D Physics constraints - `src <samples/tsscripts/templates/physics_constraints.ts>`__\n\n* Sound:\n\n  * `Sound <http://biz.turbulenz.com/sample_assets/sound.canvas.release.html>`__ - `src <samples/tsscripts/templates/sound.ts>`__\n\n* Video:\n\n  * `Video playback <http://biz.turbulenz.com/sample_assets/video.canvas.release.html>`__ - `src <samples/tsscripts/templates/video.ts>`__\n\n* Services:\n\n  * Leaderboards - `src <samples/tsscripts/templates/leaderboards.ts>`__\n  * Multichat - `src <samples/tsscripts/templates/multichat.ts>`__\n  * Payments - `src <samples/tsscripts/templates/payments.ts>`__\n  * Userdata - `src <samples/tsscripts/templates/userdata.ts>`__\n\nFeatures\n========\n\nLow-level API\n-------------\n\n**Graphics**\n\n- Simple shader-based immediate mode API:\n\n  - A Shader may contain multiple Techniques, either single or multi-pass.\n  - Once a shader Technique is set on the Device, the parameters required by the program code can be updated by a TechniqueParameter object:\n  - TechniqueParameter objects hold multiple references to Textures, TechniqueParameterBuffers or individual values.\n  - Multiple TechniqueParameters can be set on the Device at once.\n\n- Vertex buffers, Index buffers and Textures can be created, updated and destroyed dynamically.\n- Multiple Streams of Vertex buffers can be used at the same time.\n- Support for 1D, 2D, 3D and Cube textures: Any pixel format supported by the hardware.\n- Asynchronous resource loading: multiple resource files can be downloaded on the fly, JavaScript code will be notified when resource is available for usage.\n- Multiple image file formats: DDS, JPG, PNG and TGA.\n- Support for textures archives containing multiple image files: less flexibility than individual files but better for optimal bandwidth usage.\n- Occlusion queries:\n\n  - Number of pixels rendered can be queried for a section of rendering.\n  - Available in plugin mode only.\n\n- Fullscreen support (Supported platforms).\n- Take screenshot feature:\n- Video playback support:\n\n  - WebM, MP4.\n  - Render video as texture.\n  - Playback controls play, pause, stop, resume, rewind.\n\n**Math**\n\n- Math types:\n\n  - *Vector2* *Vector3*, *Vector4*\n  - *Matrix33*, *Matrix34*, *Matrix43*, *Matrix44*\n  - *Quaternion*, *QuatPos*\n  - *AABB*\n\n- Storage format optimized based on available support\n- Optimized operations support *destination parameters*, reducing object allocation.\n- Array to/from Math type conversion utilities.\n\n**Physics**\n\n**3D**\n\n- Easy-to-use efficient physics simulation.\n\n  - Optimized JavaScript implementation.\n  - In plugin mode, this is a lightweight wrapper around the Bullet Physics Library http://bulletphysics.org/wordpress/\n\n- Rigid bodies and collision objects: Plane, Box, Sphere, Capsule, Cylinder, Cone, Triangle Mesh, Convex Hull.\n- Constraints: Point to Point, Hinge, Cone Twist, 6DOF, Slider.\n- Ray and convex sweep queries: Returning closest point of impact and surface normal.\n- Character representation.\n\n  - For use with 1st/3rd person games.\n  - Includes properties for velocity, position, crouch, jump height, death, on ground.\n\n- Contact callbacks.\n\n  - Rigidbodies, characters, collision objects.\n  - Called on presolve, added, processed, removed.\n  - Filter responses by mask.\n  - Triggers with no collision response.\n\n**2D**\n\n- Efficient 2D physics simulation written specifically for JavaScript.\n- Shapes:\n\n  - Circle, Box, Rectangle, Regular Polygon, Custom Polygon.\n  - Create shapes as sensors.\n  - Shape grouping and mask interactions.\n\n- Collision detection:\n\n  - Sweep & Prune, Box Tree Broadphases.\n  - Utilities for Raytest, Signed Distance, Intersection, Contains Point, Sweep Test.\n\n- Simulation world:\n\n  - Multiple simulation groups.\n  - Optional gravity.\n  - Customisable simulation iterations.\n\n- Rigid body simulation: Dynamic, Static, Kinematic objects.\n- Materials: Elasticity, Static/Dynamic/Rolling Friction, Density.\n- Arbiters:\n\n  - Contact grouping.\n  - Contact information: Position, Penetration, Normal/Tangent Impulse\n\n- Constraints: Point to Point, Distance, Weld, Angle, Motor, Line, Pulley, Custom Constraint.\n- Debug rendering:\n\n  - Rigid Bodies, Constraints, Worlds, Lines, Curves, Rectangles, Circles, Spirals, Linear/Spiral Springs.\n  - Enabling and disabling of rendering types.\n  - Scaling for Draw2D viewport.\n\n**Sound**\n\n- Easy-to-use efficient wrapper of hardware audio features: Utilizes Web Audio, <Audio> tag, `OpenAL <http://connect.creativelabs.com/openal/default.aspx>`__ dependent on platform support.\n- 3D sound sources: Position, Direction, Velocity, Gain, Pitch, Loop.\n- Emulated 3D sound for stereo setups.\n- Asynchronous sound files loading: Multiple resource files can be downloaded on the fly, JavaScript code will be notified when resource is available for usage.\n- Uncompress audio dynamically.\n- Multiple sound file formats: OGG, WAV, MP3.\n- Supported query for platform capabilities: Load the best audio format for the platform.\n- Effect/Filter support: Reverb, Echo, Low Pass\n\n**Networking**\n\n- Bi-directional, full-duplex communications channels, over a TCP socket:\n\n  - Utilizes browser Websocket support.\n  - Efficient native implementation of WebSockets for platforms without support:\n\n    - http://en.wikipedia.org/wiki/WebSocket\n    - http://dev.w3.org/html5/websockets/\n\n- HTTP-compatible handshake so that HTTP servers can share their default HTTP and HTTPS ports (80 and 443) with a WebSocket server.\n- Support for secure connections as part of the standard.\n- Support for data compression with the extension `deflate-frame`.\n\n**Input**\n\n- Access to input types: Keyboard, Mouse, Xbox360 Pad, Joysticks, Wheels, Touch, Multi-touch\n- Asynchronous event system when state changes:\n\n  - JavaScript code is notified when input changes.\n  - Events for keydown, keyup, mousedown, mouseup, mousewheel, mousemove,\n    mouseover, mouseenter, mouseleave, paddown, padup, focus, blur, mouselocklost,\n    touchstart, touchend, touchmove, touchmove, touchenter, touchleave, touchcancel.\n\n- Additional mouse features: hiding/showing platform icon, locking/unlocking (supported platforms).\n- Language independent keymapping.\n\nHigh-level API\n--------------\n\n**Scene Graph**\n\n- Flexible JSON file format: Could describe either a whole scene or individual meshes.\n- Asynchronous loading of external references:\n\n  - If a scene contains references to external meshes they are all loaded in parallel and attached to the main scene when ready.\n  - Support for optimal reuse of same mesh on different locations.\n\n- Pluggable renderer system:\n\n  - Links between geometries, effects and materials are resolved at\n    runtime.\n  - Easy swap of multiple rendering techniques for same assets.\n\n- Geometry sharing: Geometry information can be optimally reused on multiple scene locations with different rendering effects.\n- Flexible scene hierarchy nodes: Lights, Geometries, Animation, Physics.\n- Visibility queries: Portals, Frustum, Overlapping Box.\n- Sorting and grouping: Visible nodes are sorted and grouped for optimal rendering: Opaque, Transparent, Decal.\n- Lazy evaluation of node updates.\n\n**Animation**\n\n- 3D animation for scene geometry.\n- Skeleton/Skinning animation.\n- Animation controllers:\n\n  - Interpolation, Overloaded Node, Reference, Transition, Blend, Mask, Pose, Skin, GPU Skin, Skinned Node.\n  - Controllers can be combined for desired effect.\n\n- Dynamically update scene data.\n\n**Resource Manager**\n\n- Asynchronous loading avoiding duplicates: Additional remapping layer for easy URL redirection.\n- Provide default resources if missing: Game can provide custom default resource to be used when a required one is missing or still loading.\n- Multiple managers for individual needs: Animations, Effects, Fonts, Shaders, Sounds, Textures.\n- Bandwidth and hardware scaling by selecting different assets and effects depending on machine and Internet connection performance.\n- Client-side asset cache for optimizing and reusing requests.\n\n**Server Requests**\n\n- HTTP & AJAX request functionality:\n\n  - Automatic retry and error handling.\n  - Cross-browser support.\n  - Encrypted API support.\n\n**Deferred Renderer**\n\n- Unlimited number of lights: Point, Spot, Directional, Ambient.\n- Texture based light falloff: Allows multi-colored lights and cheap fake shadows, for example the typical fan under a light source.\n- Materials with multiple texture maps: Specular color and intensity, Normal vector, Glow color, Alpha.\n- Pluggable post effects:\n\n  - Easy set-up for full screen post effects as part of the final deferred shading.\n  - Copy, Fade in, Modulate, Bicolor, Blend.\n\n- Exponential shadow maps:\n\n  - Reuse of texture shadow maps to save video memory.\n  - Gaussian blur for smooth results.\n  - Exponential depth information to avoid light bleeding.\n\n- Volumetric fog.\n- 4 weight GPU skinning.\n- UV animation.\n- Wireframe mode.\n- Callbacks for additional passes: decals, transparency, debug\n- Available in plugin mode only until draw buffers are added to WebGL http://www.khronos.org/registry/webgl/extensions/WEBGL_draw_buffers/\n\n**Forward Renderer**\n\n- Unlimited number of lights: Point, Spot, Directional, Ambient.\n- Texture based light falloff: Allows multi-colored lights and cheap fake shadows, for example the typical fan under a light source.\n- Materials with multiple texture maps: Specular color and intensity, Normal vector, Glow color, Alpha.\n- Pluggable post effects:\n\n  - Easy set-up for full screen post effects as part of the final\n    deferred shading.\n  - Copy, Fade in, Modulate, Bicolor, Blend.\n\n- Exponential shadow maps:\n\n  - Reuse of texture shadow maps to save video memory.\n  - Gaussian blur for smooth results.\n  - Exponential depth information to avoid light bleeding.\n\n- 4 weight GPU skinning.\n- UV animation.\n- Wireframe mode.\n- Callbacks for additional passes: decals, transparency, debug\n\n**Default Renderer**\n\n- Single point and ambient light.\n- Pixel-based lighting.\n- Materials with multiple texture maps: Specular color and intensity, Normal vector, Glow color, Alpha.\n- Optimzed for speed and compatibility on a wide range of hardware.\n- 4 weight GPU skinning.\n- UV animation.\n- Wireframe mode.\n- Callbacks for additional passes: decals, transparency, debug\n\n**Simple Renderer**\n\n- Single point and ambient light.\n- Vertex-based lighting.\n- Materials with multiple texture maps: Specular color and intensity, Normal vector, Glow color, Alpha.\n- Optimzed for speed and compatibility on a wide range of hardware.\n- 4 weight GPU skinning.\n- UV animation.\n- Wireframe mode.\n- Callbacks for additional passes: decals, transparency, debug\n\n**2D Rendering**\n\n**Draw2D**\n\n- 2D sprite-based renderer: Batches sprites for efficiency.\n- Draw modes:\n\n  - **Draw:** Draw object literal,\n  - **DrawRaw:** Draw buffer data,\n  - **DrawSprite:** Draw sprite reference.\n\n- Scalable viewport: Input coordinate mapping.\n- Sort modes: Immediate, Deferred, Texture.\n- Blend modes: Opaque, Additive, Alpha.\n- Custom shader support.\n- Render-to-target support.\n- Texture effects: Distort, Gaussian Blur, Bloom, Color, Grey Scale, Sepia, Negative, Saturation, Hue, Brightness, Contrast.\n- Recording performance data.\n\n**Canvas2D**\n\n- Accelerated implementation of `canvas 2D API <http://www.w3.org/html/wg/drafts/2dcontext/html5_canvas/>`__.\n- Runs on WebGL/OpenGL depending on platform.\n- SVG rendering.\n- Text rendering via FontManager.\n- For complete implementation see `canvas element specification <http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#the-canvas-element>`__\n\n**Utilities**\n\n- Allocation and management of graphics buffers: Vertex buffers, Index buffers.\n- API controlled JavaScript profiling:\n\n  - Per-function millisecond accuracy timing.\n  - Record top-down or bottom-up function trees.\n  - Calculate the time spent by an individual function or\n    the total spent by sub-functions.\n  - Identify the source file and line number of problematic areas.\n\n- Memory usage identification:\n\n  - Retrieve the object count of constructed object types.\n  - Take snapshots and compare memory fluctuations.\n\n- Encryption and decryption of server-side requests for TZO formats.\n- Debug utility with function stripping for performance:\n\n  - assert, log, abort.\n  - Complete stacktrace.\n  - Supports adding custom functions.\n\n- Network Simulator:\n\n  - Simulates latency and network behaviour.\n  - Client-side manipulation of multiplayer session messages.\n  - Simulates spikes in network traffic.\n\nTurbulenz Service API\n---------------------\n\n**Leaderboards**\n\n- Submitting/retrieving ranked friend/global leaderboards.\n- Sort by either higher or lower scores.\n- Infinitely scrollable scoreboards.\n- Friend's score notifications.\n- Aggregate scores.\n- Default score entries.\n\n**Badges**\n\n- Achievement system for awarding game progress.\n- Custom badge shape and design\n- Progression badges.\n- Achievement notification.\n\n**Payments**\n\n- Payments API: In game, On website, App stores.\n- Payment methods: Single purchase, Micro transactions.\n- Purchasable items: Ownable, Consumeable.\n\n**Userdata**\n\n- Per-user save game information.\n- Key-value pair data storage: Settings, Preferences, Personal items.\n\n**Userprofile**\n\n- Game player's profile information: Username, Display name, Language, Age, Country, Guest user.\n\n**Gameprofile**\n\n- Game status of a player:\n\n  - Viewable by other players a game.\n  - Custom field information decided by game.\n\n**Multiplayer**\n\n- Real-time session match-making between friends and public users.\n- Session creation/joining.\n- Multiplayer session invite and notification.\n\n**Datashares**\n\n- Shared key-value store for turn based games and user generated content.\n- Read only and read and write access.\n- Find other users public shares or filter by username.\n\n**Notifications**\n\n- Send delayed notifications to the current user.\n- Send instant notifications to other users.\n- Notification types: Email, website pop-up and in-game.\n\n**Metrics**\n\n- Custom event submission:\n\n  - Can be used to gather progress during game.\n  - Exportable from developer services.\n  - Events identifiable by custom key.\n  - Allows additional numerical data.\n\n**Bridge**\n\n- Bi-directional communication channel between game and webpage.\n- Allows messages to be exchanged.\n- Live updating: Badge progress, notifications, loading/saving status.\n\n**Utilities**\n\n- Mapping between game resources references and content distribution network.\n- Uniquely identifiable gamesession.\n- Service availability notification.\n\nWhat Are the Design Goals of the Turbulenz Engine\n=================================================\n\nThe main design goals of the Turbulenz Engine are performance, modularity and customizability. Users of the engine should be able to build any kind of game without limitations, in an efficient manner and with an end product that performs optimally when loading and during play.\n\nTo achieve this target the Turbulenz team followed these rules when writing code:\n\n**Modularity**\n\n- Users should be able to pick what they want and replace what they don't.\n- When possible new functionality should be orthogonal to existing one.\n\n**High performance**\n\n- Strict coding standards to keep code efficient.\n- Keep memory allocations to minimum, reuse existing objects or arrays whenever possible, use scratch pads, combine multiple separate objects into a single one.\n- Use most efficient storage for each data, Typed Arrays when possible.\n- Reduce function calls when possible: write functions that handle arrays of objects instead of loops that make a function call per element, games rarely do a single thing to a single object.\n- Be aware of performance differences between browsers.\n- Profile often.\n\n**Asynchronous loading**\n\n- No API should block waiting for a response from the server, avoid polling whenever possible, use callbacks or Promises, to notify of data availability.\n\n**Data driven**\n\n- The target should be to make the game a simple dumb player of data, all functionality defined by simple data files.\n\n**Simple well documented file formats**\n\n- Define simple, easy to create asset formats that can trivially be connected to any tool chain.\n\n**Scalability**\n\n- Design interfaces that can be implemented with different level of detail or quality settings in order to scale from mobile to desktops.\n\n**Power without control is nothing**\n\n- Make sure users can do exactly what they want, with a helper layer put on top if required, document performance implications at every level.\n\n**Fault tolerant**\n\n- The engine should keep going even if any type of asset fails to load. The application is able to provide sensible defaults for all asset types making it easier to stay productive and diagnose issues.\n\n**Fast loading**\n\n- Reduce amount of data to be downloaded, compress data efficiently.\n- Use the browser cache efficiently, use unique file names based on content and tell the browser to cache forever.\n\n**Maintainability**\n\n- Strict coding standards to keep code readable, easy to maintain and debug.\n- Write unit tests, samples and documentation for every new code path.\n\n**Targeted**\n\n- This is a game engine, for games.\n\n\nHistory\n=======\n\nThe Engine was created and is maintained by `Turbulenz Limited <http://biz.turbulenz.com>`__ and was open sourced\nin April 2013.\n\nThe latest release is 1.3.2 which is tagged in the repository or a tarball/zip can be can be downloaded from\n`here <https://github.com/turbulenz/turbulenz_engine/archive/release_1.3.2.tar.gz>`__\n\nA full history of changes can be found in the `Changelog <docs/source/changelog.rst>`__\n\n\nPre-Requisites\n==============\n\nThe pre-requisites for the open source version of the Turbulenz Engine allowing you to use the various\ncommands are\n\n- Python 2.7.x.\n\n  - For Windows we recommend a 32bit install of Python.\n  - If you have multiple Python versions installed e.g. 3.x you may need to run commands with ``python2.7``\n  - On Windows if you didn't add Python to your path in the installer you may need to run ``C:\\Python27\\python.exe``\n  You can check your version with\n  ::\n\n        $ python --version\n        Python 2.7.3\n\n- VirtualEnv - version 1.9.1 or higher recommended\n  You can check your version with\n  ::\n\n        $ virtualenv --version\n        1.9.1\n\n- UglifyJS, turbulenz_build, DefinitelyTyped and NvTriStrip which are included via Git submodules contained\n  within the Turbulenz Engine repository.\n\n- Additional Python packages which will be automatically installed during the initial environment creation\n  using a Python package manager.\n\nPre-requisites for building the tools cgfx2json and NvTriStrip via ``python manage.py tools``\n\n- Compiler Toolchain\n\n  - Windows : Any one of\n\n    - Microsoft Visual Studio 2008 with SP1\n    - Microsoft Visual Studio 2010\n    - Visual C++ 2010 Express\n    - Microsoft Visual Studio 2012 with update 2\n    - Microsoft Visual Studio Express 2012 for Windows Desktop with update 2\n\n  - Mac OSX : Xcode with the command line tools\n\n  - Linux : GCC 4.6.x or higher\n\n- `NVIDIA CgToolkit <https://developer.nvidia.com/cg-toolkit>`__ version 3.1 or higher. The repository\n  includes the binaries for Windows, if you're developing on Mac OSX or Linux please download and install it.\n\n- OpenGL development libraries, these are included on Windows and Mac OSX with the compiler toolchains. For\n  debian based linux distributions the libgl1-mesa-dev package will provide the required files (e.g. ``sudo\n  apt-get install libgl1-mesa-dev``), for other linux distributions find the package supplying GL/gl.h and libGL.so\n\n\nSetup Guide\n===========\n\nThere are two ways to get up and running with the Turbulenz Engine, you can downloaded a packaged fully QA'd\nsnapshot release from the `Turbulenz Hub <https://hub.turbulenz.com>`__. These installers are available for\nWindows, Mac OSX and Linux and will install all the required packages and dependencies to get started,\na full guide can be found at `<http://docs.turbulenz.com/installing.html>`__\n\n*Note: SDK versions prior to 0.26.0 were released under a non open source license.*\n\nIf you want to run with the latest version or would like to contribute to the open source project the steps for\ngetting setup are included below. Use of the open source repository is tested against Windows, Mac OSX and Linux\nbut may also work on other unix-like operating systems.\n\nSetup\n-----\n\n1. Clone the repository `<http://github.com/turbulenz/turbulenz_engine>`__ (or if you wish you can fork the repository\n   on GitHub and clone that). To clone the repository maintained by Turbulenz use\n   ::\n\n        $ git clone git://github.com/turbulenz/turbulenz_engine.git\n\n2. The Turbulenz Engine submodules the following technology in the external folder\n\n   + tzbuild: https://github.com/turbulenz/turbulenz_build\n   + DefinitelyTyped: https://github.com/borisyankov/DefinitelyTyped\n   + UglifyJS: https://github.com/mishoo/UglifyJS.git\n\n   Initialize the Git submodules with\n   ::\n\n        $ git submodule update --init\n\n3. Check you have the `pre-requisites`_ installed\n\n4. From the cloned repository create a VirtualEnv environment to install the required Python packages and NodeJS,\n   allowing you to use all the features of the Turbulenz Engine. Note if Python is not on your shell's path you\n   will need to specify the full path for this first command.\n   ::\n\n        $ python manage.py env\n\n5. Activate the environment in your shell.\n   ::\n\n        $ source env/bin/activate - for bash and similar shells\n        > env\\scripts\\activate.bat - for Windows\n\n6. If you want to move onto the API tutorial section next then your final command is to build the JavaScript sources\n   from the TypeScript sources. The next section will detail some of the additional actions you can perform or you\n   can move onto `Getting Started With The API`_\n   ::\n\n        $ python manage.py jslib\n\nWorking With The Open Source Project\n------------------------------------\n\nThe manage.py script at the top level of the repository provides a set of commands for managing the Engine, the\nscript should be run as ``python manage.py command`` on Windows but can usually be shortcut to ``./manage.py command``\non unix shells. Running the script with ``--help`` will give a list of commands available, most of these are\ndescribed below. All the commands other than the env command expect to have the VirtualEnv environment activated\nas described in the setup section.\n\n- **JavaScript Sources** - The Turbulenz Engine source is written in TypeScript. To generate the JavaScript version\n  of the engine source run the command\n  ::\n\n    $ python manage.py jslib\n\n- **Tools** - The Turbulenz Engine includes a number of Python tools which are installed during the env command.\n  In addition the Engine includes a CGFX shader conversion tool which can be built with the following command.\n  See the `pre-requisites`_ section for details of required compiler toolchains.\n  ::\n\n    $ python manage.py tools\n\n- **Documentation** - The Turbulenz Engine documentation is based on restructured text sources. To build the html\n  documentation run the command\n  ::\n\n    $ python manage.py docs\n\n- **Samples** - Various samples are included with the Turbulenz Engine. These can be built from their TypeScript\n  sources with the command below. This generates a set of html files, JavaScript and asset JSON files which can\n  be served with a web server such as the Turbulenz Local Development Server.\n  ::\n\n    $ python manage.py samples\n\n- **Applications** - The Turbulenz Engine project includes a few larger applications and some templates for building\n  your own application. These can be found in the apps folder, and can be built with the command\n  ::\n\n    $ python manage.py apps\n\n  You can also build individual apps by specifying their name e.g.\n  ::\n\n    $ python manage.py apps multiworm\n\n- **Command Line Tools** - Various command line tools for processing code and assets are installed as part of the\n  virtual environment. These are available at the command line e.g. running ``dae2json`` will execute the dae2json\n  tool used to convert Collada assets to a Turbulenz Engine JSON asset format. See the\n  `tools <http://docs.turbulenz.com/tools/index.html>`__ section in the documentation for more details on the tools.\n\n- **Local Development Server** - Setting up the environment also includes a locally hosted web server which can be\n  used for development of HTML5 games and applications. See the\n  `Local Server <https://github.com/turbulenz/turbulenz_local>`__ repository for more details.\n\n\nGetting Started With The API\n============================\n\nTo try the Turbulenz APIs requires only a text editor and a browser such as Google Chrome or Mozilla Firefox.\nCreate an HTML file with the following content and place it in the root of the Turbulenz directory::\n\n    <html>\n    <head>\n        <title>Turbulenz - API - Clear Screen Example</title>\n        <script src=\"jslib/debug.js\"></script>\n        <script src=\"jslib/webgl/turbulenzengine.js\"></script>\n        <script src=\"jslib/webgl/graphicsdevice.js\"></script>\n    </head>\n    <body>\n        <canvas id=\"canvas\" width=\"640px\" height=\"480px\"/>\n        <script>\n            TurbulenzEngine = WebGLTurbulenzEngine.create({\n                canvas: document.getElementById(\"canvas\")\n            });\n            var graphicsDevice = TurbulenzEngine.createGraphicsDevice({});\n\n            var bgColor = [1.0, 1.0, 0.0, 1.0];\n\n            function update() {\n                if (graphicsDevice.beginFrame()) {\n                    graphicsDevice.clear(bgColor, 1.0);\n                    graphicsDevice.endFrame();\n                }\n            }\n\n            TurbulenzEngine.setInterval(update, 1000 / 60);\n        </script>\n    </body>\n    </html>\n\nAfter defining a <canvas> element of 640x480 pixels, this code will create the TurbulenzEngine and request the GraphicDevice module.\nUsing an update function called at a frequency of 60fps, the GraphicsDevice will clear the screen yellow.\nTo run the example, open the HTML file in your browser.\nYou should see a yellow rectangle.\n\nTo use assets such as images you will need to host a HTML file and assets on a webserver.\nAny webserver will work, a quick way to try is to activate the Turbulenz environment in the root of the Turbulenz directory and run::\n\n    python -m SimpleHTTPServer\n\nThis command will host the contents of the Turbulenz directory on your machine as a webserver.\n\nTo demonstrate loading an asset you can try loading an image file and drawing it as a textured sprite using the Draw2D API.\nCreate another HTML file with the following content and also place it in the root of the Turbulenz directory::\n\n    <html>\n    <head>\n        <title>Turbulenz - API - Textured Sprite Example</title>\n        <script src=\"jslib/debug.js\"></script>\n        <script src=\"jslib/webgl/turbulenzengine.js\"></script>\n        <script src=\"jslib/webgl/graphicsdevice.js\"></script>\n        <script src=\"jslib/draw2d.js\"></script>\n    </head>\n    <body>\n        <canvas id=\"canvas\" width=\"640px\" height=\"480px\"/>\n        <script>\n            TurbulenzEngine = WebGLTurbulenzEngine.create({\n                canvas: document.getElementById(\"canvas\")\n            });\n            var graphicsDevice = TurbulenzEngine.createGraphicsDevice({});\n            var draw2D = Draw2D.create({\n                graphicsDevice: graphicsDevice\n            });\n\n            var bgColor = [1.0, 1.0, 0.0, 1.0];\n\n            var sprite = Draw2DSprite.create({\n                width: 100,\n                height: 100,\n                x: graphicsDevice.width / 2,\n                y: graphicsDevice.height / 2,\n                color: [1.0, 1.0, 1.0, 1.0],\n                rotation: Math.PI / 4\n            });\n\n            var texture = graphicsDevice.createTexture({\n                src: \"assets/textures/crate.jpg\",\n                mipmaps: true,\n                onload: function (texture)\n                {\n                    if (texture)\n                    {\n                        sprite.setTexture(texture);\n                        sprite.setTextureRectangle([0, 0, texture.width, texture.height]);\n                    }\n                }\n            });\n\n            var PI2 = Math.PI * 2;\n            var rotateAngle = PI2 / 360; // 1 deg per frame\n\n            function update() {\n\n                sprite.rotation += rotateAngle;\n                sprite.rotation %= PI2; // Wrap rotation at PI * 2\n\n                if (graphicsDevice.beginFrame()) {\n                    graphicsDevice.clear(bgColor, 1.0);\n\n                    draw2D.begin();\n                    draw2D.drawSprite(sprite);\n                    draw2D.end();\n\n                    graphicsDevice.endFrame();\n                }\n            }\n\n            TurbulenzEngine.setInterval(update, 1000 / 60);\n        </script>\n    </body>\n    </html>\n\nThis time, instead of opening the file in the browser, navigate your browser to *http://127.0.0.1:8000* or *http://localhost:8000* and select the HTML file you created.\nYou should see a spinning textured box in the middle of a yellow rectangle.\n\nThe next step is render a simple textured mesh in 3D.\nTo do this you will need to build some assets from their source files.\nMake sure you have run the *tools* command to build the tools for your platform::\n\n    $ python manage.py tools\n\n*Note: The requirements for building the tools is different per platform. See the* `Pre-Requisites`_ *section.*\n\nFor this example you should use the `Protolib <http://docs.turbulenz.com/protolib/protolib_api.html>`__ library, which is ideal for prototyping games using Turbulenz.\nYou will need these assets::\n\n    - models/duck.dae\n    - textures/duck.png\n    - textures/default_light.png\n    - shaders/shadowmapping.cgfx\n    - shaders/zonly.cgfx\n    - shaders/forwardrendering.cgfx\n    - shaders/forwardrenderingshadows.cgfx\n    - shaders/debug.cgfx\n    - shaders/font.cgfx\n    - shaders/simplesprite.cgfx\n    - fonts/opensans-8.fnt\n    - fonts/opensans-16.fnt\n    - fonts/opensans-32.fnt\n    - fonts/opensans-64.fnt\n    - fonts/opensans-128.fnt\n    - textures/opensans-8_0.png\n    - textures/opensans-16_0.png\n    - textures/opensans-32_0.png\n    - textures/opensans-64_0.png\n    - textures/opensans-128_0.png\n\nCopy this text into a file called \"deps.yaml\" and place it in the root of the Turbulenz directory.\nHaving built the tools you can now run this command with the Turbulenz environment activated::\n\n    $ python scripts/buildassets.py --root . --assets-path assets\n\nThis will build the assets listed in the deps.yaml and output a \"staticmax\" directory and \"mapping_table.json\" file containing the processed assets and a mapping to them for the webserver.\nWhen a library tries to request one of these files, it will be able to find it in the staticmax directory.\nNow you can create the mesh example HTML file and place it at the root of the Turbulenz directory::\n\n    <html>\n    <head>\n        <title>Turbulenz - API - Textured Mesh Example</title>\n        <script>\n            var TurbulenzEngine = {};\n        </script>\n        <script src=\"jslib/debug.js\"></script>\n        <script src=\"jslib/vmath.js\"></script>\n        <script src=\"jslib/webgl/turbulenzengine.js\"></script>\n        <script src=\"jslib/webgl/graphicsdevice.js\"></script>\n        <script src=\"jslib/webgl/inputdevice.js\"></script>\n        <script src=\"jslib/webgl/sounddevice.js\"></script>\n        <script src=\"jslib/webgl/mathdevice.js\"></script>\n\n        <script src=\"jslib/aabbtree.js\"></script>\n        <script src=\"jslib/assettracker.js\"></script>\n        <script src=\"jslib/camera.js\"></script>\n        <script src=\"jslib/draw2d.js\"></script>\n        <script src=\"jslib/effectmanager.js\"></script>\n        <script src=\"jslib/fontmanager.js\"></script>\n        <script src=\"jslib/forwardrendering.js\"></script>\n        <script src=\"jslib/geometry.js\"></script>\n        <script src=\"jslib/indexbuffermanager.js\"></script>\n        <script src=\"jslib/light.js\"></script>\n        <script src=\"jslib/loadingscreen.js\"></script>\n        <script src=\"jslib/material.js\"></script>\n        <script src=\"jslib/observer.js\"></script>\n        <script src=\"jslib/renderingcommon.js\"></script>\n        <script src=\"jslib/requesthandler.js\"></script>\n        <script src=\"jslib/resourceloader.js\"></script>\n        <script src=\"jslib/scene.js\"></script>\n        <script src=\"jslib/scenenode.js\"></script>\n        <script src=\"jslib/shadermanager.js\"></script>\n        <script src=\"jslib/shadowmapping.js\"></script>\n        <script src=\"jslib/soundmanager.js\"></script>\n        <script src=\"jslib/texturemanager.js\"></script>\n        <script src=\"jslib/utilities.js\"></script>\n        <script src=\"jslib/vertexbuffermanager.js\"></script>\n\n        <script src=\"jslib/services/turbulenzbridge.js\"></script>\n        <script src=\"jslib/services/turbulenzservices.js\"></script>\n        <script src=\"jslib/services/gamesession.js\"></script>\n        <script src=\"jslib/services/mappingtable.js\"></script>\n\n        <script src=\"protolib/duimanager.js\"></script>\n        <script src=\"protolib/jqueryextend.js\"></script>\n        <script src=\"protolib/simplesprite.js\"></script>\n        <script src=\"protolib/simplefonts.js\"></script>\n        <script src=\"protolib/simplesceneloader.js\"></script>\n        <script src=\"protolib/debugdraw.js\"></script>\n        <script src=\"protolib/sceneloader.js\"></script>\n        <script src=\"protolib/soundsourcemanager.js\"></script>\n        <script src=\"protolib/protolib.js\"></script>\n\n    </head>\n    <body>\n        <canvas id=\"canvas\" width=\"640px\" height=\"480px\"/>\n        <script>\n            TurbulenzEngine = WebGLTurbulenzEngine.create({\n                canvas: document.getElementById(\"canvas\")\n            });\n            var mathDevice = null;\n\n            var mesh = null;\n            var rotationMatrix = null;\n            var rotationAngleMatrix = null;\n\n            var protolib = Protolib.create({\n                onInitialized: function onIntializedFn(protolib)\n                {\n                    mathDevice = protolib.getMathDevice();\n                    protolib.setCameraPosition(mathDevice.v3Build(0, 1, -2));\n                    protolib.setCameraDirection(mathDevice.v3Build(0, 0, 1));\n                    protolib.setAmbientLightColor(mathDevice.v3Build(1, 1, 1));\n                    protolib.addPointLight({\n                        v3Position: mathDevice.v3Build(-1, 1, -1),\n                        v3Color: mathDevice.v3Build(1, 1, 1),\n                        radius: 10\n                    });\n                    mesh = protolib.loadMesh({\n                        mesh: \"models/duck.dae\"\n                    });\n                    rotationMatrix = mathDevice.m43BuildIdentity();\n                    rotationAngleMatrix = mathDevice.m43BuildIdentity();\n                    mathDevice.m43SetAxisRotation(rotationAngleMatrix,\n                                                  mathDevice.v3Build(0, 1, 0),\n                                                  (Math.PI * 2) / 360);\n                }\n            })\n\n            function update() {\n\n                if (protolib.beginFrame())\n                {\n                    if (mesh)\n                    {\n                        mesh.getRotationMatrix(rotationMatrix);\n                        mathDevice.m43Mul(rotationMatrix, rotationAngleMatrix, rotationMatrix);\n                        mesh.setRotationMatrix(rotationMatrix);\n                    }\n                    protolib.endFrame();\n                }\n            }\n\n            TurbulenzEngine.setInterval(update, 1000 / 60);\n        </script>\n    </body>\n    </html>\n\nThis file is quite similar to the previous examples, but it requires a few more Turbulenz libraries to run.\nThis time you should see a spinning duck with a yellow texture on a white background and lit by a static point light.\n\nFor more information on how to build your own assets see the `assets section <http://docs.turbulenz.com/starter/getting_started_guide.html#assets>`__ in the getting started guide.\n\nIf you would like to learn more or work through this example step-by-step (with troubleshooting hints), see the `Getting Started Guide <http://docs.turbulenz.com/starter/getting_started_guide.html>`__ in the documentation.\n\nFor more information on the various APIs, see the following links:\n\n* `Low-level API <http://docs.turbulenz.com/jslibrary_api/low_level_api.html>`__, `2D Physics API <http://docs.turbulenz.com/jslibrary_api/physics2d_api.html>`__, `3D Physics API <http://docs.turbulenz.com/jslibrary_api/physics3d_api.html>`__\n* `High-level API <http://docs.turbulenz.com/jslibrary_api/high_level_api.html>`__\n* `Turbulenz Services API <http://docs.turbulenz.com/turbulenz_services/index.html>`__\n* `Protolib API <http://docs.turbulenz.com/protolib/protolib_api.html>`__\n\n\nDocumentation\n=============\n\nFull documentation for the Turbulenz Engine can be found at `<http://docs.turbulenz.com/index.html>`__\n\nThis documentation is built from the source restructured text in the docs/source folder of the repository, the latest\nversion online is maintained from the latest release tag in the repository. If you wish to build up to date\ndocumentation follow the setup guide and the run the ``manage.py docs`` command, this will generate html docs in the\nbuild/docs/html folder.\n\n\nKnown Issues\n============\n\nThe following known issues exist with using the open source repository version of the Turbulenz Engine,\nadditional known issues also existing in the SDK releases of the engine can be found here\n`<http://docs.turbulenz.com/known_issues/index.html>`__\n\n* The application and JavaScript build process will currently fail if the repository is cloned to a path with\n  spaces in it.\n\n\nLicensing\n=========\n\nThe Turbulenz Engine is licensed under the `MIT license <LICENSE>`__\n\n\nContributing\n============\n\nOur contributors are listed `here <docs/source/contributors.rst>`__\n\nContributions are always encouraged whether they are small documentation tweaks, bug fixes or suggestions for larger\nchanges. You can check the `issues <http://github.com/turbulenz/turbulenz_engine/issues>`__ or `discussion forums\n<https://groups.google.com/group/turbulenz-engine-users>`_ first to see if anybody else is undertaking similar changes.\n\nIf you'd like to contribute any changes simply fork the project on Github and send us a pull request or send a Git\npatch to the discussion forums detailing the proposed changes. If accepted we'll add you to the list of contributors.\n\nWe include a .pylintrc file in the repository which allows you to check your code conforms to our standards. Our\ndocumentation is built from restructured text sources in the docs folder so please consider how your changes may affect\nthe documentation.\n\nNote: by contributing code to the Turbulenz Engine project in any form, including sending a pull request via Github,\na code fragment or patch via private email or public discussion groups, you agree to release your code under the\nterms of the MIT license that you can find in the `LICENSE <LICENSE>`__ file included in the source distribution.\n\n\nLinks\n=====\n\n| Turbulenz game site - `turbulenz.com <https://turbulenz.com>`__\n| Turbulenz developer service and SDK download - `hub.turbulenz.com <https://hub.turbulenz.com>`__\n| Documentation for this module and the SDK - `docs.turbulenz.com <http://docs.turbulenz.com>`__\n| About Turbulenz - `biz.turbulenz.com <http://biz.turbulenz.com>`__\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "manage.py",
          "type": "blob",
          "size": 24.419921875,
          "content": "#!/usr/bin/env python\n# Copyright (c) 2011-2014 Turbulenz Limited\n\n\"\"\"\nInit script for manipulating the Turbulenz Engine project.\n\"\"\"\nimport os\nimport sys\nimport re\nimport time\nimport os.path\nfrom glob import iglob\nfrom subprocess import call\nimport argparse\n\nfrom scripts import TURBULENZ_ENGINE_VERSION\nfrom scripts.utils import TURBULENZOS, TURBULENZROOT, PYTHON, ENV\nfrom scripts.utils import command_no_arguments, command_with_arguments, command_requires_env\nfrom scripts.utils import CalledProcessError, echo, log, warning, error, ok, sh, rmdir, rm, mkdir, cp\nfrom scripts.utils import check_documentation_links, find_devenv, check_compilers\n\n################################################################################\n\ndef _d3d11_cgfx2json_flags():\n    abspath = os.path.abspath\n    join = os.path.join\n    hlsl5_script = abspath(join('scripts', 'compile_hlsl5_shader.bat'))\n    hlsl4_script = abspath(join('scripts', 'compile_hlsl4_shader.bat'))\n    return [\n        \"--hlsl5\", \"%s,%s\" % (\"binary_hlsl5\", hlsl5_script),\n        \"--hlsl4\", \"%s,%s\" % (\"binary_hlsl4\", hlsl4_script),\n    ]\n\ndef _d3d9_cgfx2json_flags():\n    abspath = os.path.abspath\n    join = os.path.join\n    hlsl3_script = abspath(join('scripts', 'compile_hlsl3_shader.bat'))\n    return [ \"--hlsl3\", \"%s,%s\" % (\"binary_hlsl3\", hlsl3_script) ]\n\n################################################################################\n\n@command_no_arguments\ndef command_env():\n    if sys.version_info[1] != 7:\n        error('Turbulenz requires python 2.7')\n        return -1\n\n    env_dir = os.path.join(TURBULENZROOT, ENV)\n    if not os.path.isdir(env_dir):\n        if TURBULENZOS == 'win32':\n            sh('%s -m virtualenv --no-site-packages %s' % (sys.executable, env_dir))\n        else:\n            print \"PYTHON: %s\" % PYTHON\n            cmd = 'virtualenv -p %s --no-site-packages %s' % (PYTHON, env_dir)\n            print \"CMD: %s\" % cmd\n            sh(cmd, console=True)\n\n    if TURBULENZOS == 'win32':\n        env_bin = os.path.join(TURBULENZROOT, 'env', 'scripts')\n        activate_script = os.path.join(env_bin, 'activate.bat')\n        extra_path = 'set PATH=%PATH%;%VIRTUAL_ENV%\\\\..\\\\tools\\\\scripts\\n'\n    else:\n        env_bin = os.path.join(TURBULENZROOT, 'env', 'bin')\n        activate_script = os.path.join(env_bin, 'activate')\n        extra_path = 'export PATH=$PATH:$VIRTUAL_ENV/../tools/scripts\\n'\n\n    with open(activate_script, 'r+') as f:\n        activate_text = f.read()\n        if activate_text.find(extra_path) == -1:\n            # Seek is required here on Windows Python 2.x\n            f.seek(0, 2)\n            f.write(extra_path)\n\n    try:\n        check_compilers()\n    except EnvironmentError as e:\n        error(e)\n        exit(1)\n\n    def _easy_install(package):\n        cmd = [os.path.join(env_bin, 'easy_install'), '-Z', package]\n        sh(cmd)\n\n    _easy_install('simplejson>=2.1.5')\n    _easy_install('PyYAML>=3.10')\n\n    _easy_install('pylint==1.2.1')\n\n    _easy_install('roman>=1.4.0')\n    _easy_install('docutils>=0.9.1')\n    _easy_install('Sphinx>=1.1.3')\n\n    _easy_install('turbulenz_tools>=1.0.7')\n    _easy_install('turbulenz_local>=1.1.6')\n\n    cmd = [os.path.join(env_bin, 'python'),\n           os.path.join(TURBULENZROOT, 'scripts', 'install_nodejs.py'),\n           '--prefix', env_dir,\n           '--typescript']\n    if not TURBULENZOS in ['linux32', 'linux64']:\n        cmd.append('-f')\n    sh(cmd, console=True)\n\n    if TURBULENZOS == 'win32':\n        sh([os.path.join(env_bin, 'npm.cmd'), 'install', '-g', 'tslint@0.4.9'])\n    else:\n        sh([os.path.join(env_bin, 'npm'), 'install', '-g', 'tslint@0.4.9'])\n\n@command_no_arguments\ndef command_env_clean():\n    rmdir(os.path.join(TURBULENZROOT, ENV), False)\n\n#######################################################################################################################\n\n@command_requires_env\n@command_with_arguments\ndef command_jslib(options):\n\n    parser = argparse.ArgumentParser(description=\" Builds or cleans specified app(s), by name or path. If no app is\"\n                                     \" given, builds or cleans all the listed apps (except samples).\")\n    parser.add_argument('--clean', action='store_true', help=\"Clean jslib (completely removes directory!)\")\n    parser.add_argument('--outdir', default=None, help=\"Build jslib to an alternative directory\")\n    parser.add_argument('--closure', action='store_true', help=\"Verify the generated .js files with closure\")\n    parser.add_argument('-v', '--verbose', action='store_true', help=\"Verbose output\")\n    parser.add_argument('-j', type=int, default=_get_num_cpus() + 1, help=\"Up to N processes (default is num CPUS + 1)\")\n    parser.add_argument('--check', help=\"Syntax check the given file under tslib\")\n    parser.add_argument('--refcheck', action='store_true', help=\"Enable the reference checking build\")\n    parser.add_argument('-m', '--modular', action='store_true', help=\"Build modules only (in dependency order)\")\n    parser.add_argument('--crude', action='store_true', help=\"Build jslib only (no error checking)\")\n    parser.add_argument('--cgfx-flag', action='append', help=\"Flag for cgfx2json\")\n    parser.add_argument('--d3d11', action='store_true', help=\"Build D3D11 shaders\")\n    parser.add_argument('--d3d9', action='store_true', help=\"Build D3D9 shaders\")\n\n    args = parser.parse_args(options)\n\n    if args.modular:\n        mode = 'modular'\n    elif args.crude:\n        mode = 'crude'\n    else:\n        mode = 'all'\n\n    # Clean any make env vars in case we have been invoked from a\n    # parent make process.\n    os.environ['MAKEFLAGS'] = \"\"\n    os.environ['MFLAGS'] = \"\"\n\n    # Determine the make command line\n    cmd = \"%s -j %s\" % (_get_make_command(), args.j)\n\n    # Explicitly run make in the root of the engine folder\n    cmd += ' -C %s' % TURBULENZROOT\n\n    if args.outdir:\n        cmd += \" TZ_OUTPUT_DIR=%s\" % args.outdir\n    if args.verbose:\n        cmd += \" CMDVERBOSE=1\"\n    if args.closure:\n        cmd += \" VERIFY_CLOSURE=1\"\n\n    cgfx2json_flags = []\n    if args.d3d11:\n        cgfx2json_flags.extend(_d3d11_cgfx2json_flags())\n    if args.d3d9:\n        cgfx2json_flags.extend(_d3d9_cgfx2json_flags())\n    if args.cgfx_flag:\n        cgfx2json_flags.extend(args.cgfx_flag)\n    if 0 != len(cgfx2json_flags):\n        cmd += \" \\\"CGFX2JSONFLAGS=%s\\\"\" % \" \".join(cgfx2json_flags)\n\n    # If mode == \"all\", run the modular build, then crude\n    if \"all\" == mode:\n        if 0 != command_jslib(options + ['--modular']):\n            return 1\n        return command_jslib(options + [ '--crude' ])\n    elif \"modular\" == mode:\n        cmd += \" MODULAR=1\"\n    elif \"refcheck\" == mode:\n        cmd += \" REFCHECK=1\"\n    elif \"crude\" == mode:\n        cmd += \" ONESHOT=1\"\n\n    # Select the appropriate target based on whether we are syntax\n    # checking or doing a full build.\n    if args.check:\n        cmd += \" CHK_SOURCES=%s SYNTAX_CHECK_MODE=1 REFCHECK=1 check-syntax\" \\\n            % args.check\n    elif args.clean:\n        cmd += \" distclean_ts\"\n    else:\n        cmd += \" jslib\"\n\n    print \"BUILD CMD IS:\\n  %s\" % cmd\n\n    start_time = time.time()\n    retval = call(cmd, shell=True)\n    print \"BUILD TOOK: %.6f seconds\" % (time.time() - start_time)\n\n    if 0 != retval:\n        error(cmd)\n\n    return retval\n\n\n@command_requires_env\n@command_with_arguments\ndef command_jslib_clean(options):\n    command_jslib(['--clean'] + options)\n\ndef _get_num_cpus():\n    import multiprocessing\n    return multiprocessing.cpu_count()\n\ndef _get_make_command():\n    if TURBULENZOS in ['win32', 'win64']:\n        return os.path.join(TURBULENZROOT, 'external', 'gnumake-win32', '3.81', 'bin', 'make.exe')\n    return \"make\"\n\n#######################################################################################################################\n\n@command_no_arguments\ndef command_tools():\n    tools = os.path.normpath(os.path.join(TURBULENZROOT, 'tools'))\n    tools_bin = os.path.normpath(os.path.join(tools, 'bin', TURBULENZOS))\n    mkdir(tools_bin)\n\n    if TURBULENZOS == 'win32':\n        devenv, vs_version_name, msbuild = find_devenv()\n        if not devenv and not msbuild:\n            error('Could not find a valid install of Visual Studio')\n            return 1\n        if vs_version_name == '2008':\n            proj_postfix = '.vcproj'\n            sln_postfix = '.sln'\n            vs_version = '9.0'\n        elif vs_version_name == '2010':\n            proj_postfix = '-2010.vcxproj'\n            sln_postfix = '-2010.sln'\n            vs_version = '10.0'\n        elif vs_version_name == '2012':\n            proj_postfix = '-2012.vcxproj'\n            sln_postfix = '-2012.sln'\n            vs_version = '11.0'\n        elif vs_version_name == '2013':\n            proj_postfix = '-2013.vcxproj'\n            sln_postfix = '-2013.sln'\n            vs_version = '12.0'\n        if devenv:\n            base_cmd = [devenv, '/build', 'Release']\n        elif msbuild:\n            base_cmd = [msbuild, '/t:build', '/p:Configuration=Release',\n                        '/p:Platform=Win32', '/p:VisualStudioVersion=%s' % vs_version]\n\n        cgfx2json_proj = os.path.join(tools, 'cgfx2json', 'cgfx2json%s' % proj_postfix)\n        cmd = base_cmd + [cgfx2json_proj]\n        sh(cmd, console=True, shell=True)\n        cp('%s/cgfx2json/Release/cgfx2json.exe' % tools, tools_bin)\n        cp('%s/external/Cg/bin/cg.dll' % TURBULENZROOT, tools_bin)\n        cp('%s/external/Cg/bin/cgGL.dll' % TURBULENZROOT, tools_bin)\n\n        nvtristrip_sln = os.path.join(tools, 'NvTriStrip', 'NvTriStrip%s' % sln_postfix)\n        cmd = base_cmd + [nvtristrip_sln]\n        sh(cmd, console=True, shell=True)\n        cp('%s/NvTriStrip/NvTriStripper/bin/release/NvTriStripper.exe' % tools, tools_bin)\n\n    else:\n        sh('make', cwd=tools, console=True)\n        cp('%s/cgfx2json/bin/release/cgfx2json' % tools, tools_bin)\n        cp('%s/NvTriStrip/NvTriStripper/bin/release/NvTriStripper' % tools, tools_bin)\n\n\n@command_no_arguments\ndef command_tools_clean():\n    tools = os.path.normpath(os.path.join(TURBULENZROOT, 'tools'))\n    if TURBULENZOS == 'win32':\n        devenv, vs_version_name, msbuild = find_devenv()\n        if not devenv and not msbuild:\n            error('Could not find a valid install of Visual Studio')\n            return 1\n        if vs_version_name == '2008':\n            proj_postfix = '.vcproj'\n            sln_postfix = '.sln'\n            vs_version = '9.0'\n        elif vs_version_name == '2010':\n            proj_postfix = '-2010.vcxproj'\n            sln_postfix = '-2010.sln'\n            vs_version = '10.0'\n        elif vs_version_name == '2012':\n            proj_postfix = '-2012.vcxproj'\n            sln_postfix = '-2012.sln'\n            vs_version = '11.0'\n        elif vs_version_name == '2013':\n            proj_postfix = '-2013.vcxproj'\n            sln_postfix = '-2013.sln'\n            vs_version = '12.0'\n        if devenv:\n            base_cmd = [devenv, '/clean', 'Release']\n        elif msbuild:\n            base_cmd = [msbuild, '/t:clean', '/p:Configuration=Release',\n                        '/p:Platform=Win32', '/p:VisualStudioVersion=%s' % vs_version]\n\n        cgfx2json_proj = os.path.join(tools, 'cgfx2json', 'cgfx2json%s' % proj_postfix)\n        cmd = base_cmd + [cgfx2json_proj]\n        sh(cmd, console=True, shell=True)\n\n        nvtristrip_sln = os.path.join(tools, 'NvTriStrip', 'NvTriStrip%s' % sln_postfix)\n        cmd = base_cmd + [nvtristrip_sln]\n        sh(cmd, console=True, shell=True)\n    else:\n        sh('make clean', cwd=tools)\n\n#######################################################################################################################\n\n@command_requires_env\n@command_with_arguments\ndef command_apps(options):\n    app_dirs = ['samples',\n                'apps/inputapp',\n                'apps/multiworm',\n                'apps/sampleapp',\n                'apps/templateapp',\n                'apps/viewer',\n                'apps/tictactoe',\n                'apps/protolibsampleapp']\n    app_dirs = [os.path.join(TURBULENZROOT, p) for p in app_dirs]\n    all_apps = {}\n    for d in app_dirs:\n        all_apps[os.path.split(d)[1]] = d\n\n    parser = argparse.ArgumentParser(description=\" Builds or cleans specified app(s), by name or path. If no app is\"\n                                     \" given, builds or cleans all the listed apps (except samples).\")\n    parser.add_argument('--clean', action='store_true', help=\"Clean specified apps (same as apps-clean)\")\n    parser.add_argument('--refcheck', action='store_true', help=\"Build with reference checking\")\n    parser.add_argument('--verbose', action='store_true', help=\"Display verbose build output\")\n    parser.add_argument('--compactor', default='uglifyjs', help=\"Select a compactor for the code build\",\n                        choices=['uglifyjs', 'yui', 'closure', 'none'])\n    parser.add_argument('--mode', action='append', help=\"Add build mode (default canvas & canvas-debug)\",\n                        choices=['all', 'plugin', 'plugin-debug', 'canvas', 'canvas-debug'])\n    parser.add_argument('--assets-path', action='append', help=\"Specify additional asset root paths\")\n    parser.add_argument('app', default='all_apps', nargs='?', help=\"Select an individual app to build\")\n    parser.add_argument('--d3d11', action='store_true', help=\"Build shaders for d3d11\")\n    parser.add_argument('--d3d9', action='store_true', help=\"Build shaders for d3d11\")\n    parser.add_argument('--cgfx-flag', action='append',\n                        help=\"flag for cgfx2json\")\n    parser.add_argument('--options', nargs='*', help=\"Additional options to pass to the build process\")\n\n    args = parser.parse_args(options)\n\n    if args.app == 'all_apps':\n        # If no app given, build all apps except samples\n        apps = [app for app in all_apps.keys() if app != 'samples']\n    else:\n        if args.app not in all_apps and not os.path.exists(args.app):\n            print \"ERROR: app name not recognised: %s\" % args.app\n        apps = [args.app]\n\n    if not args.mode:\n        modes = ['canvas-debug', 'canvas']\n    elif 'all' in args.mode:\n        modes = ['all']\n    else:\n        modes = args.mode\n\n    if 'plugin-debug' in modes:\n        warning('**DEPRECATED** plugin-debug has been deprecated as a build mode. '\n                'Please use canvas-debug for debugging. Removing from list of modes.')\n        modes = [m for m in modes if m != 'plugin-debug']\n        if not modes:\n            error(\"No remaining modes to build.\")\n            return\n\n    options = ' '.join(args.options) if args.options else ''\n\n    asset_options = []\n    if args.cgfx_flag:\n        asset_options.extend([ '--cgfx-flag=%s' % c for c in args.cgfx_flag ])\n\n    if args.d3d11:\n        d3d11_flags = _d3d11_cgfx2json_flags()\n        asset_options.extend([ \"--cgfx-flag=%s\" % f for f in d3d11_flags ])\n    if args.d3d9:\n        d3d9_flags = _d3d9_cgfx2json_flags()\n        asset_options.extend([ \"--cgfx-flag=%s\" % f for f in d3d9_flags ])\n\n    start_time = time.time()\n\n    # Build / clean each app\n\n    for app in apps:\n        try:\n            app_dir = all_apps[app]\n        except KeyError:\n            app_dir = app\n        print \"APP: %s, DIR: %s, BUILDOPTIONS: %s\" \\\n            % (app, app_dir, options)\n\n        if args.clean:\n            for mode in modes:\n                cmd = _get_make_command() + \" -C \" + app_dir + \" clean\"\n                cmd += \" MODE=%s\" % mode\n                #cmd += \" BUILDVERBOSE=%d\" % args.verbose\n                cmd += \" CMDVERBOSE=%d\" % args.verbose\n                cmd += \" --no-print-directory\"\n                if 0 != call(cmd, shell=True):\n                    return 1\n\n            rmdir('%s/_build' % app_dir, False)\n            rmdir('%s/staticmax' % app_dir, False)\n            rm('%s/mapping_table.json' % app_dir, False)\n\n        elif args.refcheck:\n            make_cmd = \"%s -C %s jslib TS_REFCHECK=1 -j %s\" \\\n                % (_get_make_command(), app_dir, _get_num_cpus() + 1)\n            print \"BUILD CMD IS: %s\" % make_cmd\n            if 0 != call(make_cmd, shell=True):\n                return 1\n\n        else:\n            if 0 != command_jslib([]):\n                return 1\n\n            buildassets_cmd = ['python', os.path.join(TURBULENZROOT, 'scripts', 'buildassets.py')]\n            buildassets_cmd.extend(['--root', TURBULENZROOT])\n            buildassets_cmd.extend(asset_options)\n\n            # Add asset paths, start with user supplied paths, then app specific, then default assets\n            # Build assets searches the paths in order in the case of duplicate source names\n            if args.assets_path:\n                for p in args.assets_path:\n                    buildassets_cmd.extend(['--assets-path', p])\n            app_assets = os.path.abspath(os.path.join(app_dir, 'assets'))\n            if os.path.isdir(app_assets):\n                buildassets_cmd.extend(['--assets-path', app_assets])\n            buildassets_cmd.extend(['--assets-path', os.path.join(TURBULENZROOT, 'assets')])\n\n            if args.verbose:\n                buildassets_cmd.append('--verbose')\n\n            try:\n                sh(buildassets_cmd, cwd=app_dir, console=True)\n            except CalledProcessError as e:\n                return e.retcode\n\n            for mode in modes:\n                cmd = _get_make_command() + \" -C \" + app_dir + \" build\"\n                cmd += \" -j %d\" % (_get_num_cpus() + 1)\n                cmd += \" MODE=%s\" % mode\n                cmd += \" COMPACTOR=\" + args.compactor\n                #cmd += \" BUILDVERBOSE=%d\" % args.verbose\n                cmd += \" CMDVERBOSE=%d\" % args.verbose\n                cmd += \" --no-print-directory\"\n                if 0 != call(cmd, shell=True):\n                    return 1\n\n    print \"BUILD TOOK: %.6f seconds\" % (time.time() - start_time)\n\n\n@command_requires_env\n@command_with_arguments\ndef command_apps_clean(options):\n    command_apps(['--clean'] + (options or []))\n\n#######################################################################################################################\n\n@command_with_arguments\ndef command_samples(args):\n    command_apps(['samples'] + args)\n\n@command_no_arguments\ndef command_samples_clean():\n    command_apps(['samples', '--clean'])\n\n#######################################################################################################################\n\ndef _docs_build_command():\n    docs_version_opts = '-D version=%s -D release=%s-dev' % (TURBULENZ_ENGINE_VERSION, TURBULENZ_ENGINE_VERSION)\n    docs_src = os.path.join(TURBULENZROOT, 'docs', 'source')\n    docs_build = os.path.join(TURBULENZROOT, 'build', 'docs')\n    build_command = 'sphinx-build -b html -d ' + os.path.join(docs_build, 'doctrees') + ' ' + \\\n                    docs_version_opts + ' -c ' + docs_src + ' ' + docs_src + \\\n                    ' ' + os.path.join(docs_build, 'html')\n    return build_command\n\n@command_requires_env\ndef command_docs(args):\n    sh(_docs_build_command(), console=True)\n    echo('Docs built to build/docs/html/index.html')\n\n@command_no_arguments\ndef command_docs_clean():\n    rmdir(os.path.join(TURBULENZROOT, 'build', 'docs', 'doctrees'), False)\n    rmdir(os.path.join(TURBULENZROOT, 'build', 'docs'), False)\n\n@command_requires_env\n@command_no_arguments\ndef command_check_docs():\n    # clean the docs first to get all warnings\n    command_docs_clean()\n\n    build_fail_regex = re.compile('^.*ERROR.*$|^.*WARNING.*$|^.*SEVERE.*$|^.*Exception occurred.*$', re.MULTILINE)\n    result = 0\n\n    cmd = _docs_build_command()\n    log(cmd)\n    stdout = sh(cmd, wait=True, verbose=False)\n    errors = re.findall(build_fail_regex, stdout)\n    if len(errors) > 0:\n        for e in errors:\n            error(e)\n        result += 1\n        error('Build failed. Documentation contains errors or warnings.')\n\n    if result == 0:\n        ok('HTML build')\n        print 'Checking links'\n        result += check_documentation_links('build/docs')\n        if result == 0:\n            ok('docs links')\n\n    if result == 0:\n        ok('Documentation build succeeded')\n    else:\n        error('Documentation build failed')\n    return result\n\n\n@command_requires_env\n@command_with_arguments\ndef command_check_docs_links(args):\n    if len(args) == 0:\n        echo('Path argument required')\n        return 1\n    return check_documentation_links(args[0])\n\n#######################################################################################################################\n\n@command_requires_env\n@command_with_arguments\ndef command_check_ts(tsfiles=None):\n\n    # Run the basic reference checks by building the jslib\n    if 0 != command_jslib(['--refcheck']):\n        return 1\n\n    # Run tslint on all the typescript source\n    if TURBULENZOS == 'win32':\n        tslint = 'tslint.cmd -c .tslintrc -f '\n    else:\n        tslint = 'tslint -c .tslintrc -f '\n    tsfiles = tsfiles or ['tslib/*.ts']\n\n    files = []\n    for pattern in tsfiles:\n        for f in iglob(pattern):\n            files.append(f)\n\n    for f in files:\n        try:\n            sh('%s %s' % (tslint, f), verbose=False)\n            ok(f)\n        except CalledProcessError as e:\n            warning(f)\n            echo(e.output)\n\n    return 0\n\n@command_requires_env\n@command_with_arguments\ndef command_check_py(pyfiles=None):\n    def module_glob(pattern):\n        if '*' in pattern or '/' in pattern:\n            return iglob(pattern)\n        else:\n            return [pattern]\n\n    pylint = 'python -m pylint.lint --rcfile=.pylintrc -f text -r n'\n    pyfiles = pyfiles or ['*.py', 'scripts/*.py']\n\n    files = []\n    for pattern in pyfiles:\n        for p in module_glob(pattern):\n            files.append(p)\n\n    for f in files:\n        try:\n            sh('%s %s' % (pylint, f), verbose=False)\n            ok(f)\n        except CalledProcessError as e:\n            warning(f)\n            echo(e.output)\n\n\n#######################################################################################################################\n\n\ndef command_help(commands):\n    echo('Usage')\n    echo('=====')\n    echo('  %s command [options]\\n' % sys.argv[0])\n\n    for title, group in commands.iteritems():\n        echo('%s commands:' % title)\n        echo((len(title) + 10) * '-')\n        for command, (_, help_txt) in iter(sorted(group.iteritems())):\n            if len(command) > 24:\n                padding = '\\n%s' % (' ' * 26)\n            else:\n                padding = ' ' * (24 - len(command))\n\n            echo('  %s%s%s' % (command, padding, help_txt))\n        echo()\n    return 1\n\ndef main():\n    commands = {\n        'Environment setup': {\n            'env': (command_env, \"initialise the development environment\"),\n            'env-clean': (command_env_clean, \"clean the installed environment\")\n        },\n        'JavaScript build': {\n            'jslib' : (command_jslib, \"build jslib from TypeScript\"),\n            'jslib-clean' : (command_jslib_clean, \"clean jslib files built from TypeScript\")\n        },\n        'Application building': {\n            'samples': (command_samples, \"build the samples\"),\n            'samples-clean': (command_samples_clean, \"clean the samples\"),\n            'tools': (command_tools, \"build the tools (-h for options)\"),\n            'tools-clean': (command_tools_clean, \"clean the tools\"),\n            'apps': (command_apps, \"build or clean apps (-h for options)\"),\n            'apps-clean': (command_apps_clean, \"clean apps\"),\n        },\n        'Development': {\n            'docs': (command_docs, \"build the documentation\"),\n            'docs-clean': (command_docs_clean, \"clean the documentation\"),\n            'check-docs': (command_check_docs,\n                           \"build  the documentation and check for warnings or errors\"),\n            'check-docs-links': (command_check_docs_links,\n                                 \"check links in the documentation (requires build path e.g. 'builds/docs')\"),\n            'check-ts': (command_check_ts, \"check the JavaScript code \" \\\n                             \"generated by TypeScript compiler.\"),\n            'check-py': (command_check_py, \"check the Python source code\"),\n        }\n    }\n\n    if len(sys.argv) == 1:\n        command_help(commands)\n        return 1\n\n    command = sys.argv[1]\n    options = sys.argv[2:]\n\n    for command_group in commands.itervalues():\n        try:\n            command_fn, _ = command_group[command]\n        except KeyError:\n            pass\n        else:\n            try:\n                return command_fn(options)\n            except CalledProcessError as e:\n                error(str(e))\n                return e.retcode\n            except OSError as e:\n                error(str(e))\n                return e.errno\n            except KeyboardInterrupt as e:\n                error(str(e))\n            return 1\n\n    if command == '--list-commands':\n        for command_group in commands.itervalues():\n            for command in command_group.iterkeys():\n                echo(command)\n        return 0\n\n    command_help(commands)\n    return 1\n\nif __name__ == \"__main__\":\n    exit(main())\n"
        },
        {
          "name": "protolib",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "tslib",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}