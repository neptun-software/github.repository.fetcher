{
  "metadata": {
    "timestamp": 1736563979239,
    "page": 518,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rbuckton/reflect-metadata",
      "stars": 3223,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1103515625,
          "content": ".vscode/\nnode_modules/\ntest/**/*.js\ntest/**/*.js.map\nindex.d.mts\nno-conflict.d.mts\n*.js\n*.js.map\n*.mjs\n*.mjs.map\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.263671875,
          "content": ".vscode\r\nnode_modules\r\nout\r\ndocs\r\nspec\r\ntemp\r\ntest\r\ntypings\r\nbower.json\r\ngulpfile.js\r\nglobals.d.ts\r\nReflect.ts\r\nReflect.js.map\r\nReflectLite.ts\r\nReflectLite.js.map\r\nReflectNoConflict.ts\r\nReflectNoConflict.js.map\r\nspec.html\r\ntsconfig.json\r\ntsconfig-release.json\r\n.github\r\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.017578125,
          "content": "package-lock=false"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 0.09375,
          "content": "reflect-metadata is authored by:\r\n* Cy Brown\r\n* Oleh Dokuka\r\n* Ron Buckton\r\n* William Buchwalter"
        },
        {
          "name": "CopyrightNotice.txt",
          "type": "blob",
          "size": 0.814453125,
          "content": "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved. \r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \r\n \r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \r\nMERCHANTABLITY OR NON-INFRINGEMENT. \r\n \r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 8.9267578125,
          "content": "Apache License\n\nVersion 2.0, January 2004\n\nhttp://www.apache.org/licenses/ \n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of this License; and\n\nYou must cause any modified files to carry prominent notices stating that You changed the files; and\n\nYou must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\n\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.75,
          "content": "# Metadata Reflection API\n\nNOTE: Now that both [Decorators](https://github.com/tc39/proposal-decorators) and \n[Decorator Metadata](https://github.com/tc39/proposal-decorator-metadata) have achieved Stage 3 within TC39, the API\nproposed below is no longer being considered for standardization. However, this package will continue to support\nprojects that leverage TypeScript's legacy `--experimentalDecorators` option as some projects may not be able to migrate\nto use standard decorators.\n\n* [Detailed proposal][metadata-spec]\n\n## Installation\n\n```\nnpm install reflect-metadata\n```\n\n## Usage\n\n### ES Modules in NodeJS/Browser, TypeScript/Babel, Bundlers\n```ts\n// - Modifies global `Reflect` object (or defines one in ES5 runtimes).\n// - Supports ESM and CommonJS.\n// - Contains internal polyfills for `Map`, `Set`, and `WeakMap` for older runtimes.\nimport \"reflect-metadata\";\n\n// - Modifies global `Reflect` object (or defines one in ES5 runtimes).\n// - Supports ESM and CommonJS.\n// - Requires runtime support for `\"exports\"` in `package.json`.\n// - Does not include internal polyfills.\nimport \"reflect-metadata/lite\";\n```\n\n### CommonJS\n```ts\n// - Modifies global `Reflect` object (or defines one in ES5 runtimes).\n// - Contains internal polyfills for `Map`, `Set`, and `WeakMap` for older runtimes.\nrequire(\"reflect-metadata\");\n\n// - Modifies global `Reflect` object (or defines one in ES5 runtimes).\n// - Requires runtime support for `\"exports\"` in `package.json`.\n// - Does not include internal polyfills.\nrequire(\"reflect-metadata/lite\");\n```\n\n### In the Browser via `<script>`\n**HTML**\n```html\n<!-- Modifies global `Reflect` object (or defines one in ES5 runtimes). -->\n<!-- Contains internal polyfills for `Map`, `Set`, and `WeakMap` for older runtimes. -->\n<script src=\"path/to/reflect-metadata/Reflect.js\"></script>\n\n<!-- Modifies global `Reflect` object (or defines one in ES5 runtimes). -->\n<!-- Does not include internal polyfills. -->\n<script src=\"path/to/reflect-metadata/ReflectLite.js\"></script>\n```\n\n**Script**\n```js\n// - Makes types available in your editor.\n/// <reference path=\"path/to/reflect-metadata/standalone.d.ts\" />\n\n```\n\n## Background\n\n* Decorators add the ability to augment a class and its members as the class is defined, through a declarative syntax.\n* [Traceur][traceur] attaches annotations to a static property on the class.\n* Languages like C# (.NET), and Java support attributes or annotations that add metadata to types, along with a reflective API for reading metadata.\n\n## Goals\n\n* A number of use cases (Composition/Dependency Injection, Runtime Type Assertions, Reflection/Mirroring, Testing) want the ability to add additional metadata to a class in a consistent manner.\n* A consistent approach is needed for various tools and libraries to be able to reason over metadata.\n* Metadata-producing decorators (nee. \"Annotations\") need to be generally composable with mutating decorators.\n* Metadata should be available not only on an object but also through a Proxy, with related traps.\n* Defining new metadata-producing decorators should not be arduous or over-complex for a developer.\n* Metadata should be consistent with other language and runtime features of ECMAScript.\n\n## Syntax\n\n* Declarative definition of metadata:\n```JavaScript\nclass C {\n  @Reflect.metadata(metadataKey, metadataValue)\n  method() {\n  }\n}\n```\n\n* Imperative definition of metadata:\n```JavaScript\nReflect.defineMetadata(metadataKey, metadataValue, C.prototype, \"method\");\n```\n\n* Imperative introspection of metadata:\n```JavaScript\nlet obj = new C();\nlet metadataValue = Reflect.getMetadata(metadataKey, obj, \"method\");\n```\n\n## Semantics\n\n* Object has a new \\[\\[Metadata\\]\\] internal property that will contain a Map whose keys are property keys (or **undefined**) and whose values are Maps of metadata keys to metadata values.\n* Object will have a number of new internal methods for \\[\\[DefineOwnMetadata\\]\\], \\[\\[GetOwnMetadata\\]\\], \\[\\[HasOwnMetadata\\]\\], etc.\n  * These internal methods can be overridden by a Proxy to support additional traps.\n  * These internal methods will by default call a set of abstract operations to define and read metadata.\n* The Reflect object will expose the MOP operations to allow imperative access to metadata.\n* Metadata defined on class declaration *C* is stored in *C*.\\[\\[Metadata\\]\\], with **undefined** as the key.\n* Metadata defined on static members of class declaration *C* are stored in *C*.\\[\\[Metadata\\]\\], with the property key as the key.\n* Metadata defined on instance members of class declaration *C* are stored in *C*.prototype.\\[\\[Metadata\\]\\], with the property key as the key.\n\n## API\n\n```JavaScript\n// define metadata on an object or property\nReflect.defineMetadata(metadataKey, metadataValue, target);\nReflect.defineMetadata(metadataKey, metadataValue, target, propertyKey);\n\n// check for presence of a metadata key on the prototype chain of an object or property\nlet result = Reflect.hasMetadata(metadataKey, target);\nlet result = Reflect.hasMetadata(metadataKey, target, propertyKey);\n\n// check for presence of an own metadata key of an object or property\nlet result = Reflect.hasOwnMetadata(metadataKey, target);\nlet result = Reflect.hasOwnMetadata(metadataKey, target, propertyKey);\n\n// get metadata value of a metadata key on the prototype chain of an object or property\nlet result = Reflect.getMetadata(metadataKey, target);\nlet result = Reflect.getMetadata(metadataKey, target, propertyKey);\n\n// get metadata value of an own metadata key of an object or property\nlet result = Reflect.getOwnMetadata(metadataKey, target);\nlet result = Reflect.getOwnMetadata(metadataKey, target, propertyKey);\n\n// get all metadata keys on the prototype chain of an object or property\nlet result = Reflect.getMetadataKeys(target);\nlet result = Reflect.getMetadataKeys(target, propertyKey);\n\n// get all own metadata keys of an object or property\nlet result = Reflect.getOwnMetadataKeys(target);\nlet result = Reflect.getOwnMetadataKeys(target, propertyKey);\n\n// delete metadata from an object or property\nlet result = Reflect.deleteMetadata(metadataKey, target);\nlet result = Reflect.deleteMetadata(metadataKey, target, propertyKey);\n\n// apply metadata via a decorator to a constructor\n@Reflect.metadata(metadataKey, metadataValue)\nclass C {\n  // apply metadata via a decorator to a method (property)\n  @Reflect.metadata(metadataKey, metadataValue)\n  method() {\n  }\n}\n```\n\n## Alternatives\n\n* Use properties rather than a separate API.\n  * Obvious downside is that this can be a lot of code:\n```JavaScript\nfunction ParamTypes(...types) {\n  return (target, propertyKey) => {\n    const symParamTypes = Symbol.for(\"design:paramtypes\");\n    if (propertyKey === undefined) {\n      target[symParamTypes] = types;\n    }\n    else {\n      const symProperties = Symbol.for(\"design:properties\");\n      let properties, property;\n      if (Object.prototype.hasOwnProperty.call(target, symProperties)) {\n        properties = target[symProperties];\n      }\n      else {\n        properties = target[symProperties] = {};\n      }\n      if (Object.prototype.hasOwnProperty.call(properties, propertyKey)) {\n        property = properties[propertyKey];\n      }\n      else {\n        property = properties[propertyKey] = {};\n      }\n      property[symParamTypes] = types;\n    }\n  };\n}\n```\n\n## Notes\n* Though it may seem counterintuitive, the methods on Reflect place the parameters for the metadata key and metadata value before the target or property key. This is due to the fact that the property key is the only optional parameter in the argument list. This also makes the methods easier to curry with Function#bind. This also helps reduce the overall footprint and complexity of a metadata-producing decorator that could target both a class or a property:\n\n```JavaScript\nfunction ParamTypes(...types) {\n  // as propertyKey is effectively optional, its easier to use here\n  return (target, propertyKey) => { Reflect.defineMetadata(\"design:paramtypes\", types, target, propertyKey); }\n\n  // vs. having multiple overloads with the target and key in the front:\n  //\n  // return (target, propertyKey) => {\n  //    if (propertyKey === undefined) {\n  //      Reflect.defineMetadata(target, \"design:paramtypes\", types);\n  //    }\n  //    else {\n  //      Reflect.defineMetadata(target, propertyKey, \"design:paramtypes\", types);\n  //    }\n  // }\n  //\n  // vs. having a different methods for the class or a property:\n  //\n  // return (target, propertyKey) => {\n  //    if (propertyKey === undefined) {\n  //      Reflect.defineMetadata(target, \"design:paramtypes\", types);\n  //    }\n  //    else {\n  //      Reflect.definePropertyMetadata(target, propertyKey, \"design:paramtypes\", types);\n  //    }\n  // }\n}\n```\n\n* To enable experimental support for metadata decorators in your TypeScript project, you must add `\"experimentalDecorators\": true` to your tsconfig.json file.\n* To enable experimental support for auto-generated type metadata in your TypeScript project, you must add `\"emitDecoratorMetadata\": true` to your tsconfig.json file.\n  * Please note that auto-generated type metadata may have issues with circular or forward references for types.\n\n## Issues\n\n* A poorly written mutating decorator for a class constructor could cause metadata to become lost if the prototype chain is not maintained. Though, not maintaining the prototype chain in a mutating decorator for a class constructor would have other negative side effects as well. @rbuckton\n  * This is mitigated if the mutating decorator returns a class expression that extends from the target, or returns a proxy for the decorator. @rbuckton\n* Metadata for a method is attached to the class (or prototype) via the property key. It would not then be available if trying to read metadata on the function of the method (e.g. \"tearing-off\" the method from the class). @rbuckton\n\n[metadata-spec]: https://rbuckton.github.io/reflect-metadata\n[traceur]:       https://github.com/google/traceur-compiler"
        },
        {
          "name": "Reflect.ts",
          "type": "blob",
          "size": 91.0849609375,
          "content": "/*! *****************************************************************************\r\nCopyright (C) Microsoft. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nnamespace Reflect {\r\n    // Metadata Proposal\r\n    // https://rbuckton.github.io/reflect-metadata/\r\n\r\n    type HashMap<V> = Record<string, V>;\r\n\r\n    interface BufferLike {\r\n        [offset: number]: number;\r\n        length: number;\r\n    }\r\n\r\n    type MemberDecorator = (target: Object, propertyKey: string | symbol, descriptor?: PropertyDescriptor) => PropertyDescriptor | void;\r\n\r\n    declare const global: any;\r\n    declare const globalThis: any;\r\n    declare const crypto: Crypto;\r\n    declare const msCrypto: Crypto;\r\n\r\n    /**\r\n      * Applies a set of decorators to a target object.\r\n      * @param decorators An array of decorators.\r\n      * @param target The target object.\r\n      * @returns The result of applying the provided decorators.\r\n      * @remarks Decorators are applied in reverse order of their positions in the array.\r\n      * @example\r\n      *\r\n      *     class Example { }\r\n      *\r\n      *     // constructor\r\n      *     Example = Reflect.decorate(decoratorsArray, Example);\r\n      *\r\n      */\r\n    export declare function decorate(decorators: ClassDecorator[], target: Function): Function;\r\n\r\n    /**\r\n      * Applies a set of decorators to a property of a target object.\r\n      * @param decorators An array of decorators.\r\n      * @param target The target object.\r\n      * @param propertyKey The property key to decorate.\r\n      * @param attributes A property descriptor.\r\n      * @remarks Decorators are applied in reverse order.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod() { }\r\n      *         method() { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Object.defineProperty(Example, \"staticMethod\",\r\n      *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\r\n      *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\r\n      *\r\n      *     // method (on prototype)\r\n      *     Object.defineProperty(Example.prototype, \"method\",\r\n      *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\r\n      *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\r\n      *\r\n      */\r\n    export declare function decorate(decorators: (PropertyDecorator | MethodDecorator)[], target: any, propertyKey: string | symbol, attributes?: PropertyDescriptor | null): PropertyDescriptor | undefined;\r\n\r\n    /**\r\n      * Applies a set of decorators to a property of a target object.\r\n      * @param decorators An array of decorators.\r\n      * @param target The target object.\r\n      * @param propertyKey The property key to decorate.\r\n      * @param attributes A property descriptor.\r\n      * @remarks Decorators are applied in reverse order.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod() { }\r\n      *         method() { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Object.defineProperty(Example, \"staticMethod\",\r\n      *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\r\n      *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\r\n      *\r\n      *     // method (on prototype)\r\n      *     Object.defineProperty(Example.prototype, \"method\",\r\n      *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\r\n      *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\r\n      *\r\n      */\r\n    export declare function decorate(decorators: (PropertyDecorator | MethodDecorator)[], target: any, propertyKey: string | symbol, attributes: PropertyDescriptor): PropertyDescriptor;\r\n\r\n    /**\r\n      * A default metadata decorator factory that can be used on a class, class member, or parameter.\r\n      * @param metadataKey The key for the metadata entry.\r\n      * @param metadataValue The value for the metadata entry.\r\n      * @returns A decorator function.\r\n      * @remarks\r\n      * If `metadataKey` is already defined for the target and target key, the\r\n      * metadataValue for that key will be overwritten.\r\n      * @example\r\n      *\r\n      *     // constructor\r\n      *     @Reflect.metadata(key, value)\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // property (on constructor, TypeScript only)\r\n      *     class Example {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticProperty;\r\n      *     }\r\n      *\r\n      *     // property (on prototype, TypeScript only)\r\n      *     class Example {\r\n      *         @Reflect.metadata(key, value)\r\n      *         property;\r\n      *     }\r\n      *\r\n      *     // method (on constructor)\r\n      *     class Example {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticMethod() { }\r\n      *     }\r\n      *\r\n      *     // method (on prototype)\r\n      *     class Example {\r\n      *         @Reflect.metadata(key, value)\r\n      *         method() { }\r\n      *     }\r\n      *\r\n      */\r\n    export declare function metadata(metadataKey: any, metadataValue: any): { (target: Function): void; (target: any, propertyKey: string | symbol): void; };\r\n\r\n    /**\r\n      * Define a unique metadata entry on the target.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param metadataValue A value that contains attached metadata.\r\n      * @param target The target object on which to define metadata.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\r\n      *\r\n      *     // decorator factory as metadata-producing annotation.\r\n      *     function MyAnnotation(options): ClassDecorator {\r\n      *         return target => Reflect.defineMetadata(\"custom:annotation\", options, target);\r\n      *     }\r\n      *\r\n      */\r\n    export declare function defineMetadata(metadataKey: any, metadataValue: any, target: any): void;\r\n\r\n    /**\r\n      * Define a unique metadata entry on the target.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param metadataValue A value that contains attached metadata.\r\n      * @param target The target object on which to define metadata.\r\n      * @param propertyKey The property key for the target.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, Example.prototype, \"method\");\r\n      *\r\n      *     // decorator factory as metadata-producing annotation.\r\n      *     function MyAnnotation(options): PropertyDecorator {\r\n      *         return (target, key) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n      *     }\r\n      *\r\n      */\r\n    export declare function defineMetadata(metadataKey: any, metadataValue: any, target: any, propertyKey: string | symbol): void;\r\n\r\n    /**\r\n      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    export declare function hasMetadata(metadataKey: any, target: any): boolean;\r\n\r\n    /**\r\n      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function hasMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n    /**\r\n      * Gets a value indicating whether the target object has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    export declare function hasOwnMetadata(metadataKey: any, target: any): boolean;\r\n\r\n    /**\r\n      * Gets a value indicating whether the target object has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function hasOwnMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    export declare function getMetadata(metadataKey: any, target: any): any;\r\n\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function getMetadata(metadataKey: any, target: any, propertyKey: string | symbol): any;\r\n\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    export declare function getOwnMetadata(metadataKey: any, target: any): any;\r\n\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function getOwnMetadata(metadataKey: any, target: any, propertyKey: string | symbol): any;\r\n\r\n    /**\r\n      * Gets the metadata keys defined on the target object or its prototype chain.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadataKeys(Example);\r\n      *\r\n      */\r\n    export declare function getMetadataKeys(target: any): any[];\r\n\r\n    /**\r\n      * Gets the metadata keys defined on the target object or its prototype chain.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function getMetadataKeys(target: any, propertyKey: string | symbol): any[];\r\n\r\n    /**\r\n      * Gets the unique metadata keys defined on the target object.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadataKeys(Example);\r\n      *\r\n      */\r\n    export declare function getOwnMetadataKeys(target: any): any[];\r\n\r\n    /**\r\n      * Gets the unique metadata keys defined on the target object.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function getOwnMetadataKeys(target: any, propertyKey: string | symbol): any[];\r\n\r\n    /**\r\n      * Deletes the metadata entry from the target object with the provided key.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    export declare function deleteMetadata(metadataKey: any, target: any): boolean;\r\n\r\n    /**\r\n      * Deletes the metadata entry from the target object with the provided key.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function deleteMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n    (function (this: any, factory: (exporter: <K extends keyof typeof Reflect>(key: K, value: typeof Reflect[K]) => void, root: any) => void) {\r\n        const root =\r\n            typeof globalThis === \"object\" ? globalThis :\r\n            typeof global === \"object\" ? global :\r\n            typeof self === \"object\" ? self :\r\n            typeof this === \"object\" ? this :\r\n            sloppyModeThis();\r\n\r\n        let exporter = makeExporter(Reflect);\r\n        if (typeof root.Reflect !== \"undefined\") {\r\n            exporter = makeExporter(root.Reflect, exporter);\r\n        }\r\n\r\n        factory(exporter, root);\r\n\r\n        if (typeof root.Reflect === \"undefined\") {\r\n            root.Reflect = Reflect;\r\n        }\r\n\r\n        function makeExporter(target: typeof Reflect, previous?: <K extends keyof typeof Reflect>(key: K, value: typeof Reflect[K]) => void) {\r\n            return <K extends keyof typeof Reflect>(key: K, value: typeof Reflect[K]) => {\r\n                Object.defineProperty(target, key, { configurable: true, writable: true, value });\r\n                if (previous) previous(key, value);\r\n            };\r\n        }\r\n\r\n        function functionThis() {\r\n            try { return Function(\"return this;\")(); } catch (_) { }\r\n        }\r\n\r\n        function indirectEvalThis() {\r\n            try { return (void 0, eval)(\"(function() { return this; })()\"); } catch (_) { }\r\n        }\r\n\r\n        function sloppyModeThis() {\r\n            return functionThis() || indirectEvalThis();\r\n        }\r\n    })\r\n    (function (exporter, root) {\r\n        const hasOwn = Object.prototype.hasOwnProperty;\r\n\r\n        // feature test for Symbol support\r\n        const supportsSymbol = typeof Symbol === \"function\";\r\n        const toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\r\n        const iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\r\n        const supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\r\n        const supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\r\n        const downLevel = !supportsCreate && !supportsProto;\r\n\r\n        const HashMap = {\r\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\r\n            create: supportsCreate\r\n                ? <V>() => MakeDictionary(Object.create(null) as HashMap<V>)\r\n                : supportsProto\r\n                    ? <V>() => MakeDictionary({ __proto__: null as any } as HashMap<V>)\r\n                    : <V>() => MakeDictionary({} as HashMap<V>),\r\n\r\n            has: downLevel\r\n                ? <V>(map: HashMap<V>, key: string | number | symbol) => hasOwn.call(map, key)\r\n                : <V>(map: HashMap<V>, key: string | number | symbol) => key in map,\r\n\r\n            get: downLevel\r\n                ? <V>(map: HashMap<V>, key: string | number | symbol): V | undefined => hasOwn.call(map, key) ? map[key as string | number] : undefined\r\n                : <V>(map: HashMap<V>, key: string | number | symbol): V | undefined => map[key as string | number],\r\n        };\r\n\r\n        // Load global or shim versions of Map, Set, and WeakMap\r\n        const functionPrototype = Object.getPrototypeOf(Function);\r\n        const _Map: typeof Map = typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\r\n        const _Set: typeof Set = typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\r\n        const _WeakMap: typeof WeakMap = typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\r\n        const registrySymbol = supportsSymbol ? Symbol.for(\"@reflect-metadata:registry\") : undefined;\r\n        const metadataRegistry = GetOrCreateMetadataRegistry();\r\n        const metadataProvider = CreateMetadataProvider(metadataRegistry);\r\n\r\n        function decorate(decorators: ClassDecorator[], target: Function): Function;\r\n        function decorate(decorators: (PropertyDecorator | MethodDecorator)[], target: any, propertyKey: string | symbol, attributes?: PropertyDescriptor | null): PropertyDescriptor | undefined;\r\n        function decorate(decorators: (PropertyDecorator | MethodDecorator)[], target: any, propertyKey: string | symbol, attributes: PropertyDescriptor): PropertyDescriptor;\r\n\r\n        /**\r\n         * Applies a set of decorators to a property of a target object.\r\n         * @param decorators An array of decorators.\r\n         * @param target The target object.\r\n         * @param propertyKey (Optional) The property key to decorate.\r\n         * @param attributes (Optional) The property descriptor for the target key.\r\n         * @remarks Decorators are applied in reverse order.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     Example = Reflect.decorate(decoratorsArray, Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     Object.defineProperty(Example, \"staticMethod\",\r\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\r\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\r\n         *\r\n         *     // method (on prototype)\r\n         *     Object.defineProperty(Example.prototype, \"method\",\r\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\r\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\r\n         *\r\n         */\r\n        function decorate(decorators: (ClassDecorator | MemberDecorator)[], target: any, propertyKey?: string | symbol, attributes?: PropertyDescriptor | null): PropertyDescriptor | Function | undefined {\r\n            if (!IsUndefined(propertyKey)) {\r\n                if (!IsArray(decorators)) throw new TypeError();\r\n                if (!IsObject(target)) throw new TypeError();\r\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes)) throw new TypeError();\r\n                if (IsNull(attributes)) attributes = undefined;\r\n                propertyKey = ToPropertyKey(propertyKey);\r\n                return DecorateProperty(<MemberDecorator[]>decorators, target, propertyKey, attributes);\r\n            }\r\n            else {\r\n                if (!IsArray(decorators)) throw new TypeError();\r\n                if (!IsConstructor(target)) throw new TypeError();\r\n                return DecorateConstructor(<ClassDecorator[]>decorators, <Function>target);\r\n            }\r\n        }\r\n\r\n        exporter(\"decorate\", decorate);\r\n\r\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\r\n\r\n        /**\r\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\r\n         * @param metadataKey The key for the metadata entry.\r\n         * @param metadataValue The value for the metadata entry.\r\n         * @returns A decorator function.\r\n         * @remarks\r\n         * If `metadataKey` is already defined for the target and target key, the\r\n         * metadataValue for that key will be overwritten.\r\n         * @example\r\n         *\r\n         *     // constructor\r\n         *     @Reflect.metadata(key, value)\r\n         *     class Example {\r\n         *     }\r\n         *\r\n         *     // property (on constructor, TypeScript only)\r\n         *     class Example {\r\n         *         @Reflect.metadata(key, value)\r\n         *         static staticProperty;\r\n         *     }\r\n         *\r\n         *     // property (on prototype, TypeScript only)\r\n         *     class Example {\r\n         *         @Reflect.metadata(key, value)\r\n         *         property;\r\n         *     }\r\n         *\r\n         *     // method (on constructor)\r\n         *     class Example {\r\n         *         @Reflect.metadata(key, value)\r\n         *         static staticMethod() { }\r\n         *     }\r\n         *\r\n         *     // method (on prototype)\r\n         *     class Example {\r\n         *         @Reflect.metadata(key, value)\r\n         *         method() { }\r\n         *     }\r\n         *\r\n         */\r\n        function metadata(metadataKey: any, metadataValue: any) {\r\n            function decorator(target: Function): void;\r\n            function decorator(target: any, propertyKey: string | symbol): void;\r\n            function decorator(target: any, propertyKey?: string | symbol): void {\r\n                if (!IsObject(target)) throw new TypeError();\r\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey)) throw new TypeError();\r\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\r\n            }\r\n            return decorator;\r\n        }\r\n\r\n        exporter(\"metadata\", metadata);\r\n\r\n        // 4.1.3 Reflect.defineMetadata(metadataKey, metadataValue, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect.definemetadata\r\n\r\n        function defineMetadata(metadataKey: any, metadataValue: any, target: any): void;\r\n        function defineMetadata(metadataKey: any, metadataValue: any, target: any, propertyKey: string | symbol): void;\r\n\r\n        /**\r\n         * Define a unique metadata entry on the target.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param metadataValue A value that contains attached metadata.\r\n         * @param target The target object on which to define metadata.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\r\n         *\r\n         *     // decorator factory as metadata-producing annotation.\r\n         *     function MyAnnotation(options): Decorator {\r\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n         *     }\r\n         *\r\n         */\r\n        function defineMetadata(metadataKey: any, metadataValue: any, target: any, propertyKey?: string | symbol): void {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\r\n        }\r\n\r\n        exporter(\"defineMetadata\", defineMetadata);\r\n\r\n        // 4.1.4 Reflect.hasMetadata(metadataKey, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect.hasmetadata\r\n\r\n        function hasMetadata(metadataKey: any, target: any): boolean;\r\n        function hasMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n        /**\r\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function hasMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): boolean {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\r\n        }\r\n\r\n        exporter(\"hasMetadata\", hasMetadata);\r\n\r\n        // 4.1.5 Reflect.hasOwnMetadata(metadataKey, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-hasownmetadata\r\n\r\n        function hasOwnMetadata(metadataKey: any, target: any): boolean;\r\n        function hasOwnMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n        /**\r\n         * Gets a value indicating whether the target object has the provided metadata key defined.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function hasOwnMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): boolean {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\r\n        }\r\n\r\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\r\n\r\n        // 4.1.6 Reflect.getMetadata(metadataKey, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-getmetadata\r\n\r\n        function getMetadata(metadataKey: any, target: any): any;\r\n        function getMetadata(metadataKey: any, target: any, propertyKey: string | symbol): any;\r\n\r\n        /**\r\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function getMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): any {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\r\n        }\r\n\r\n        exporter(\"getMetadata\", getMetadata);\r\n\r\n        // 4.1.7 Reflect.getOwnMetadata(metadataKey, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-getownmetadata\r\n\r\n        function getOwnMetadata(metadataKey: any, target: any): any;\r\n        function getOwnMetadata(metadataKey: any, target: any, propertyKey: string | symbol): any;\r\n\r\n        /**\r\n         * Gets the metadata value for the provided metadata key on the target object.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function getOwnMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): any {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\r\n        }\r\n\r\n        exporter(\"getOwnMetadata\", getOwnMetadata);\r\n\r\n        // 4.1.8 Reflect.getMetadataKeys(target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-getmetadatakeys\r\n\r\n        function getMetadataKeys(target: any): any[];\r\n        function getMetadataKeys(target: any, propertyKey: string | symbol): any[];\r\n\r\n        /**\r\n         * Gets the metadata keys defined on the target object or its prototype chain.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns An array of unique metadata keys.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.getMetadataKeys(Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function getMetadataKeys(target: any, propertyKey?: string | symbol): any[] {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryMetadataKeys(target, propertyKey);\r\n        }\r\n\r\n        exporter(\"getMetadataKeys\", getMetadataKeys);\r\n\r\n        // 4.1.9 Reflect.getOwnMetadataKeys(target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-getownmetadata\r\n\r\n        function getOwnMetadataKeys(target: any): any[];\r\n        function getOwnMetadataKeys(target: any, propertyKey: string | symbol): any[];\r\n\r\n        /**\r\n         * Gets the unique metadata keys defined on the target object.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns An array of unique metadata keys.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.getOwnMetadataKeys(Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function getOwnMetadataKeys(target: any, propertyKey?: string | symbol): any[] {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\r\n        }\r\n\r\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\r\n\r\n        // 4.1.10 Reflect.deleteMetadata(metadataKey, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-deletemetadata\r\n\r\n        function deleteMetadata(metadataKey: any, target: any): boolean;\r\n        function deleteMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n        /**\r\n         * Deletes the metadata entry from the target object with the provided key.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function deleteMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): boolean {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            const provider = GetMetadataProvider(target, propertyKey, /*Create*/ false);\r\n            if (IsUndefined(provider)) return false;\r\n            return provider.OrdinaryDeleteMetadata(metadataKey, target, propertyKey);\r\n        }\r\n\r\n        exporter(\"deleteMetadata\", deleteMetadata);\r\n\r\n        function DecorateConstructor(decorators: ClassDecorator[], target: Function): Function {\r\n            for (let i = decorators.length - 1; i >= 0; --i) {\r\n                const decorator = decorators[i];\r\n                const decorated = decorator(target);\r\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\r\n                    if (!IsConstructor(decorated)) throw new TypeError();\r\n                    target = <Function>decorated;\r\n                }\r\n            }\r\n            return target;\r\n        }\r\n\r\n        function DecorateProperty(decorators: MemberDecorator[], target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor | undefined): PropertyDescriptor | undefined {\r\n            for (let i = decorators.length - 1; i >= 0; --i) {\r\n                const decorator = decorators[i];\r\n                const decorated = decorator(target, propertyKey, descriptor);\r\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\r\n                    if (!IsObject(decorated)) throw new TypeError();\r\n                    descriptor = <PropertyDescriptor>decorated;\r\n                }\r\n            }\r\n            return descriptor;\r\n        }\r\n\r\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\r\n        function OrdinaryHasMetadata(MetadataKey: any, O: any, P: string | symbol | undefined): boolean {\r\n            const hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n            if (hasOwn) return true;\r\n            const parent = OrdinaryGetPrototypeOf(O);\r\n            if (!IsNull(parent)) return OrdinaryHasMetadata(MetadataKey, parent, P);\r\n            return false;\r\n        }\r\n\r\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\r\n        function OrdinaryHasOwnMetadata(MetadataKey: any, O: any, P: string | symbol | undefined): boolean {\r\n            const provider = GetMetadataProvider(O, P, /*Create*/ false);\r\n            if (IsUndefined(provider)) return false;\r\n            return ToBoolean(provider.OrdinaryHasOwnMetadata(MetadataKey, O, P));\r\n        }\r\n\r\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\r\n        function OrdinaryGetMetadata(MetadataKey: any, O: any, P: string | symbol | undefined): any {\r\n            const hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n            if (hasOwn) return OrdinaryGetOwnMetadata(MetadataKey, O, P);\r\n            const parent = OrdinaryGetPrototypeOf(O);\r\n            if (!IsNull(parent)) return OrdinaryGetMetadata(MetadataKey, parent, P);\r\n            return undefined;\r\n        }\r\n\r\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\r\n        function OrdinaryGetOwnMetadata(MetadataKey: any, O: any, P: string | symbol | undefined): any {\r\n            const provider = GetMetadataProvider(O, P, /*Create*/ false);\r\n            if (IsUndefined(provider)) return;\r\n            return provider.OrdinaryGetOwnMetadata(MetadataKey, O, P);\r\n        }\r\n\r\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\r\n        function OrdinaryDefineOwnMetadata(MetadataKey: any, MetadataValue: any, O: any, P: string | symbol | undefined): void {\r\n            const provider = GetMetadataProvider(O, P, /*Create*/ true);\r\n            provider.OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P);\r\n        }\r\n\r\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\r\n        function OrdinaryMetadataKeys(O: any, P: string | symbol | undefined): any[] {\r\n            const ownKeys = OrdinaryOwnMetadataKeys(O, P);\r\n            const parent = OrdinaryGetPrototypeOf(O);\r\n            if (parent === null) return ownKeys;\r\n            const parentKeys = OrdinaryMetadataKeys(parent, P);\r\n            if (parentKeys.length <= 0) return ownKeys;\r\n            if (ownKeys.length <= 0) return parentKeys;\r\n            const set = new _Set<any>();\r\n            const keys: any[] = [];\r\n            for (const key of ownKeys) {\r\n                const hasKey = set.has(key);\r\n                if (!hasKey) {\r\n                    set.add(key);\r\n                    keys.push(key);\r\n                }\r\n            }\r\n            for (const key of parentKeys) {\r\n                const hasKey = set.has(key);\r\n                if (!hasKey) {\r\n                    set.add(key);\r\n                    keys.push(key);\r\n                }\r\n            }\r\n            return keys;\r\n        }\r\n\r\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\r\n        function OrdinaryOwnMetadataKeys(O: any, P: string | symbol | undefined): any[] {\r\n            const provider = GetMetadataProvider(O, P, /*create*/ false);\r\n            if (!provider) {\r\n                return [];\r\n            }\r\n            return provider.OrdinaryOwnMetadataKeys(O, P);\r\n        }\r\n\r\n        // 6 ECMAScript Data Types and Values\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\r\n        function Type(x: any): Tag {\r\n            if (x === null) return Tag.Null;\r\n            switch (typeof x) {\r\n                case \"undefined\": return Tag.Undefined;\r\n                case \"boolean\": return Tag.Boolean;\r\n                case \"string\": return Tag.String;\r\n                case \"symbol\": return Tag.Symbol;\r\n                case \"number\": return Tag.Number;\r\n                case \"object\": return x === null ? Tag.Null : Tag.Object;\r\n                default: return Tag.Object;\r\n            }\r\n        }\r\n\r\n        // 6.1 ECMAScript Language Types\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types\r\n        const enum Tag {\r\n            Undefined,\r\n            Null,\r\n            Boolean,\r\n            String,\r\n            Symbol,\r\n            Number,\r\n            Object\r\n        }\r\n\r\n        // 6.1.1 The Undefined Type\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\r\n        function IsUndefined(x: any): x is undefined {\r\n            return x === undefined;\r\n        }\r\n\r\n        // 6.1.2 The Null Type\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\r\n        function IsNull(x: any): x is null {\r\n            return x === null;\r\n        }\r\n\r\n        // 6.1.5 The Symbol Type\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\r\n        function IsSymbol(x: any): x is symbol {\r\n            return typeof x === \"symbol\";\r\n        }\r\n\r\n        // 6.1.7 The Object Type\r\n        // https://tc39.github.io/ecma262/#sec-object-type\r\n        function IsObject<T>(x: T | undefined | null | boolean | string | symbol | number): x is T {\r\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\r\n        }\r\n\r\n        // 7.1 Type Conversion\r\n        // https://tc39.github.io/ecma262/#sec-type-conversion\r\n\r\n        // 7.1.1 ToPrimitive(input [, PreferredType])\r\n        // https://tc39.github.io/ecma262/#sec-toprimitive\r\n        function ToPrimitive(input: any, PreferredType?: Tag): undefined | null | boolean | string | symbol | number {\r\n            switch (Type(input)) {\r\n                case Tag.Undefined: return input;\r\n                case Tag.Null: return input;\r\n                case Tag.Boolean: return input;\r\n                case Tag.String: return input;\r\n                case Tag.Symbol: return input;\r\n                case Tag.Number: return input;\r\n            }\r\n            const hint: \"string\" | \"number\" | \"default\" = PreferredType === Tag.String ? \"string\" : PreferredType === Tag.Number ? \"number\" : \"default\";\r\n            const exoticToPrim = GetMethod(input, toPrimitiveSymbol);\r\n            if (exoticToPrim !== undefined) {\r\n                const result = exoticToPrim.call(input, hint);\r\n                if (IsObject(result)) throw new TypeError();\r\n                return result;\r\n            }\r\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\r\n        }\r\n\r\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\r\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\r\n        function OrdinaryToPrimitive(O: any, hint: \"string\" | \"number\"): undefined | null | boolean | string | symbol | number {\r\n            if (hint === \"string\") {\r\n                const toString = O.toString;\r\n                if (IsCallable(toString)) {\r\n                    const result = toString.call(O);\r\n                    if (!IsObject(result)) return result;\r\n                }\r\n                const valueOf = O.valueOf;\r\n                if (IsCallable(valueOf)) {\r\n                    const result = valueOf.call(O);\r\n                    if (!IsObject(result)) return result;\r\n                }\r\n            }\r\n            else {\r\n                const valueOf = O.valueOf;\r\n                if (IsCallable(valueOf)) {\r\n                    const result = valueOf.call(O);\r\n                    if (!IsObject(result)) return result;\r\n                }\r\n                const toString = O.toString;\r\n                if (IsCallable(toString)) {\r\n                    const result = toString.call(O);\r\n                    if (!IsObject(result)) return result;\r\n                }\r\n            }\r\n            throw new TypeError();\r\n        }\r\n\r\n        // 7.1.2 ToBoolean(argument)\r\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\r\n        function ToBoolean(argument: any): boolean {\r\n            return !!argument;\r\n        }\r\n\r\n        // 7.1.12 ToString(argument)\r\n        // https://tc39.github.io/ecma262/#sec-tostring\r\n        function ToString(argument: any): string {\r\n            return \"\" + argument;\r\n        }\r\n\r\n        // 7.1.14 ToPropertyKey(argument)\r\n        // https://tc39.github.io/ecma262/#sec-topropertykey\r\n        function ToPropertyKey(argument: any): string | symbol {\r\n            const key = ToPrimitive(argument, Tag.String);\r\n            if (IsSymbol(key)) return key;\r\n            return ToString(key);\r\n        }\r\n\r\n        // 7.2 Testing and Comparison Operations\r\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\r\n\r\n        // 7.2.2 IsArray(argument)\r\n        // https://tc39.github.io/ecma262/#sec-isarray\r\n        function IsArray(argument: any): argument is any[] {\r\n            return Array.isArray\r\n                ? Array.isArray(argument)\r\n                : argument instanceof Object\r\n                    ? argument instanceof Array\r\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\r\n        }\r\n\r\n        // 7.2.3 IsCallable(argument)\r\n        // https://tc39.github.io/ecma262/#sec-iscallable\r\n        function IsCallable(argument: any): argument is Function {\r\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\r\n            return typeof argument === \"function\";\r\n        }\r\n\r\n        // 7.2.4 IsConstructor(argument)\r\n        // https://tc39.github.io/ecma262/#sec-isconstructor\r\n        function IsConstructor(argument: any): argument is Function {\r\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\r\n            return typeof argument === \"function\";\r\n        }\r\n\r\n        // 7.2.7 IsPropertyKey(argument)\r\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\r\n        function IsPropertyKey(argument: any): argument is string | symbol {\r\n            switch (Type(argument)) {\r\n                case Tag.String: return true;\r\n                case Tag.Symbol: return true;\r\n                default: return false;\r\n            }\r\n        }\r\n\r\n        function SameValueZero(x: any, y: any) {\r\n            return x === y || x !== x && y !== y;\r\n        }\r\n\r\n        // 7.3 Operations on Objects\r\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\r\n\r\n        // 7.3.9 GetMethod(V, P)\r\n        // https://tc39.github.io/ecma262/#sec-getmethod\r\n        function GetMethod(V: any, P: any): Function | undefined {\r\n            const func = V[P];\r\n            if (func === undefined || func === null) return undefined;\r\n            if (!IsCallable(func)) throw new TypeError();\r\n            return func;\r\n        }\r\n\r\n        // 7.4 Operations on Iterator Objects\r\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\r\n\r\n        function GetIterator<T>(obj: Iterable<T>): Iterator<T> {\r\n            const method = GetMethod(obj, iteratorSymbol);\r\n            if (!IsCallable(method)) throw new TypeError(); // from Call\r\n            const iterator = method.call(obj);\r\n            if (!IsObject(iterator)) throw new TypeError();\r\n            return iterator;\r\n        }\r\n\r\n        // 7.4.4 IteratorValue(iterResult)\r\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\r\n        function IteratorValue<T>(iterResult: __IteratorResult<T>): T {\r\n            return iterResult.value;\r\n        }\r\n\r\n        // 7.4.5 IteratorStep(iterator)\r\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\r\n        function IteratorStep<T>(iterator: Iterator<T>): __IteratorResult<T> | false {\r\n            const result = iterator.next();\r\n            return result.done ? false : result;\r\n        }\r\n\r\n        // 7.4.6 IteratorClose(iterator, completion)\r\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\r\n        function IteratorClose<T>(iterator: Iterator<T>) {\r\n            const f = iterator[\"return\"];\r\n            if (f) f.call(iterator);\r\n        }\r\n\r\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\r\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\r\n\r\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\r\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\r\n        function OrdinaryGetPrototypeOf(O: any): any {\r\n            const proto = Object.getPrototypeOf(O);\r\n            if (typeof O !== \"function\" || O === functionPrototype) return proto;\r\n\r\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\r\n            // Try to determine the superclass constructor. Compatible implementations\r\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\r\n            // or ensure each class has a valid `constructor` property on its prototype that\r\n            // points back to the constructor.\r\n\r\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\r\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\r\n            if (proto !== functionPrototype) return proto;\r\n\r\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\r\n            const prototype = O.prototype;\r\n            const prototypeProto = prototype && Object.getPrototypeOf(prototype);\r\n            if (prototypeProto == null || prototypeProto === Object.prototype) return proto;\r\n\r\n            // If the constructor was not a function, then we cannot determine the heritage.\r\n            const constructor = prototypeProto.constructor;\r\n            if (typeof constructor !== \"function\") return proto;\r\n\r\n            // If we have some kind of self-reference, then we cannot determine the heritage.\r\n            if (constructor === O) return proto;\r\n\r\n            // we have a pretty good guess at the heritage.\r\n            return constructor;\r\n        }\r\n\r\n        // Global metadata registry\r\n        // - Allows `import \"reflect-metadata\"` and `import \"reflect-metadata/no-conflict\"` to interoperate.\r\n        // - Uses isolated metadata if `Reflect` is frozen before the registry can be installed.\r\n\r\n        /**\r\n         * Creates a registry used to allow multiple `reflect-metadata` providers.\r\n         */\r\n        function CreateMetadataRegistry(): MetadataRegistry {\r\n            let fallback: MetadataProvider | undefined;\r\n            if (!IsUndefined(registrySymbol) &&\r\n                typeof root.Reflect !== \"undefined\" &&\r\n                !(registrySymbol in root.Reflect) &&\r\n                typeof root.Reflect.defineMetadata === \"function\") {\r\n                // interoperate with older version of `reflect-metadata` that did not support a registry.\r\n                fallback = CreateFallbackProvider(root.Reflect);\r\n            }\r\n\r\n            let first: MetadataProvider | undefined;\r\n            let second: MetadataProvider | undefined;\r\n            let rest: Set<MetadataProvider> | undefined;\r\n            const targetProviderMap = new _WeakMap<object, Map<string | symbol | undefined, MetadataProvider>>();\r\n            const registry: MetadataRegistry = {\r\n                registerProvider,\r\n                getProvider,\r\n                setProvider,\r\n            };\r\n            return registry;\r\n\r\n            function registerProvider(provider: MetadataProvider) {\r\n                if (!Object.isExtensible(registry)) {\r\n                    throw new Error(\"Cannot add provider to a frozen registry.\");\r\n                }\r\n                switch (true) {\r\n                    case fallback === provider: break;\r\n                    case IsUndefined(first): first = provider; break;\r\n                    case first === provider: break;\r\n                    case IsUndefined(second): second = provider; break;\r\n                    case second === provider: break;\r\n                    default:\r\n                        if (rest === undefined) rest = new _Set();\r\n                        rest.add(provider);\r\n                        break;\r\n                }\r\n            }\r\n\r\n            function getProviderNoCache(O: object, P: string | symbol | undefined) {\r\n                if (!IsUndefined(first)) {\r\n                    if (first.isProviderFor(O, P)) return first;\r\n                    if (!IsUndefined(second)) {\r\n                        if (second.isProviderFor(O, P)) return first;\r\n                        if (!IsUndefined(rest)) {\r\n                            const iterator = GetIterator(rest);\r\n                            while (true) {\r\n                                const next = IteratorStep(iterator);\r\n                                if (!next) {\r\n                                    return undefined;\r\n                                }\r\n                                const provider = IteratorValue(next);\r\n                                if (provider.isProviderFor(O, P)) {\r\n                                    IteratorClose(iterator);\r\n                                    return provider;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (!IsUndefined(fallback) && fallback.isProviderFor(O, P)) {\r\n                    return fallback;\r\n                }\r\n                return undefined;\r\n            }\r\n\r\n            function getProvider(O: object, P: string | symbol | undefined) {\r\n                let providerMap = targetProviderMap.get(O);\r\n                let provider: MetadataProvider | undefined;\r\n                if (!IsUndefined(providerMap)) {\r\n                    provider = providerMap.get(P);\r\n                }\r\n                if (!IsUndefined(provider)) {\r\n                    return provider;\r\n                }\r\n\r\n                provider = getProviderNoCache(O, P);\r\n                if (!IsUndefined(provider)) {\r\n                    if (IsUndefined(providerMap)) {\r\n                        providerMap = new _Map();\r\n                        targetProviderMap.set(O, providerMap);\r\n                    }\r\n                    providerMap.set(P, provider);\r\n                }\r\n                return provider;\r\n            }\r\n\r\n            function hasProvider(provider: MetadataProvider) {\r\n                if (IsUndefined(provider)) throw new TypeError();\r\n                return first === provider || second === provider || !IsUndefined(rest) && rest.has(provider);\r\n            }\r\n\r\n            function setProvider(O: object, P: string | symbol | undefined, provider: MetadataProvider) {\r\n                if (!hasProvider(provider)) {\r\n                    throw new Error(\"Metadata provider not registered.\");\r\n                }\r\n                const existingProvider = getProvider(O, P);\r\n                if (existingProvider !== provider) {\r\n                    if (!IsUndefined(existingProvider)) {\r\n                        return false;\r\n                    }\r\n                    let providerMap = targetProviderMap.get(O);\r\n                    if (IsUndefined(providerMap)) {\r\n                        providerMap = new _Map();\r\n                        targetProviderMap.set(O, providerMap);\r\n                    }\r\n                    providerMap.set(P, provider);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Gets or creates the shared registry of metadata providers.\r\n         */\r\n        function GetOrCreateMetadataRegistry(): MetadataRegistry {\r\n            let metadataRegistry: MetadataRegistry | undefined;\r\n            if (!IsUndefined(registrySymbol) && IsObject(root.Reflect) && Object.isExtensible(root.Reflect)) {\r\n                metadataRegistry = (root.Reflect as any)[registrySymbol] as MetadataRegistry | undefined;\r\n            }\r\n            if (IsUndefined(metadataRegistry)) {\r\n                metadataRegistry = CreateMetadataRegistry();\r\n            }\r\n            if (!IsUndefined(registrySymbol) && IsObject(root.Reflect) && Object.isExtensible(root.Reflect)) {\r\n                Object.defineProperty(root.Reflect, registrySymbol, {\r\n                    enumerable: false,\r\n                    configurable: false,\r\n                    writable: false,\r\n                    value: metadataRegistry\r\n                });\r\n            }\r\n            return metadataRegistry;\r\n        }\r\n\r\n        function CreateMetadataProvider(registry: MetadataRegistry): MetadataProvider {\r\n            // [[Metadata]] internal slot\r\n            // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\r\n            const metadata = new _WeakMap<any, Map<string | symbol | undefined, Map<any, any>>>();\r\n            const provider: MetadataProvider = {\r\n                isProviderFor(O, P) {\r\n                    const targetMetadata = metadata.get(O);\r\n                    if (IsUndefined(targetMetadata)) return false;\r\n                    return targetMetadata.has(P);\r\n                },\r\n                OrdinaryDefineOwnMetadata: OrdinaryDefineOwnMetadata,\r\n                OrdinaryHasOwnMetadata: OrdinaryHasOwnMetadata,\r\n                OrdinaryGetOwnMetadata: OrdinaryGetOwnMetadata,\r\n                OrdinaryOwnMetadataKeys: OrdinaryOwnMetadataKeys,\r\n                OrdinaryDeleteMetadata: OrdinaryDeleteMetadata,\r\n            };\r\n            metadataRegistry.registerProvider(provider);\r\n            return provider;\r\n\r\n            // 2.1.1 GetOrCreateMetadataMap(O, P, Create)\r\n            // https://rbuckton.github.io/reflect-metadata/#getorcreatemetadatamap\r\n            function GetOrCreateMetadataMap(O: object, P: string | symbol | undefined, Create: true): Map<any, any>;\r\n            function GetOrCreateMetadataMap(O: object, P: string | symbol | undefined, Create: false): Map<any, any> | undefined;\r\n            function GetOrCreateMetadataMap(O: object, P: string | symbol | undefined, Create: boolean) {\r\n                let targetMetadata = metadata.get(O);\r\n                let createdTargetMetadata = false;\r\n                if (IsUndefined(targetMetadata)) {\r\n                    if (!Create) return undefined;\r\n                    targetMetadata = new _Map<string | symbol | undefined, Map<any, any>>();\r\n                    metadata.set(O, targetMetadata);\r\n                    createdTargetMetadata = true;\r\n                }\r\n                let metadataMap = targetMetadata.get(P);\r\n                if (IsUndefined(metadataMap)) {\r\n                    if (!Create) return undefined;\r\n                    metadataMap = new _Map<any, any>();\r\n                    targetMetadata.set(P, metadataMap);\r\n                    if (!registry.setProvider(O, P, provider)) {\r\n                        targetMetadata.delete(P);\r\n                        if (createdTargetMetadata) {\r\n                            metadata.delete(O);\r\n                        }\r\n                        throw new Error(\"Wrong provider for target.\");\r\n                    }\r\n                }\r\n                return metadataMap;\r\n            }\r\n\r\n            // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\r\n            // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\r\n            function OrdinaryHasOwnMetadata(MetadataKey: any, O: object, P: string | symbol | undefined): boolean {\r\n                const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n                if (IsUndefined(metadataMap)) return false;\r\n                return ToBoolean(metadataMap.has(MetadataKey));\r\n            }\r\n\r\n            // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\r\n            // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\r\n            function OrdinaryGetOwnMetadata(MetadataKey: any, O: object, P: string | symbol | undefined): any {\r\n                const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n                if (IsUndefined(metadataMap)) return undefined;\r\n                return metadataMap.get(MetadataKey);\r\n            }\r\n\r\n            // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\r\n            // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\r\n            function OrdinaryDefineOwnMetadata(MetadataKey: any, MetadataValue: any, O: object, P: string | symbol | undefined): void {\r\n                const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\r\n                metadataMap.set(MetadataKey, MetadataValue);\r\n            }\r\n\r\n            // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\r\n            // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\r\n            function OrdinaryOwnMetadataKeys(O: any, P: string | symbol | undefined): any[] {\r\n                const keys: any[] = [];\r\n                const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n                if (IsUndefined(metadataMap)) return keys;\r\n                const keysObj = metadataMap.keys();\r\n                const iterator = GetIterator(keysObj);\r\n                let k = 0;\r\n                while (true) {\r\n                    const next = IteratorStep(iterator);\r\n                    if (!next) {\r\n                        keys.length = k;\r\n                        return keys;\r\n                    }\r\n                    const nextValue = IteratorValue(next);\r\n                    try {\r\n                        keys[k] = nextValue;\r\n                    }\r\n                    catch (e) {\r\n                        try {\r\n                            IteratorClose(iterator);\r\n                        }\r\n                        finally {\r\n                            throw e;\r\n                        }\r\n                    }\r\n                    k++;\r\n                }\r\n            }\r\n\r\n            function OrdinaryDeleteMetadata(MetadataKey: any, O: object, P: string | symbol | undefined): boolean {\r\n                const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n                if (IsUndefined(metadataMap)) return false;\r\n                if (!metadataMap.delete(MetadataKey)) return false;\r\n                if (metadataMap.size === 0) {\r\n                    const targetMetadata = metadata.get(O);\r\n                    if (!IsUndefined(targetMetadata)) {\r\n                        targetMetadata.delete(P);\r\n                        if (targetMetadata.size === 0) {\r\n                            metadata.delete(targetMetadata);\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        function CreateFallbackProvider(reflect: typeof Reflect): MetadataProvider {\r\n            const { defineMetadata, hasOwnMetadata, getOwnMetadata, getOwnMetadataKeys, deleteMetadata } = reflect;\r\n            const metadataOwner = new _WeakMap<object, Set<string | symbol | undefined>>();\r\n            const provider: MetadataProvider = {\r\n                isProviderFor(O, P) {\r\n                    let metadataPropertySet = metadataOwner.get(O);\r\n                    if (!IsUndefined(metadataPropertySet) && metadataPropertySet.has(P)) {\r\n                        return true;\r\n                    }\r\n                    if (getOwnMetadataKeys(O, P!).length) {\r\n                        if (IsUndefined(metadataPropertySet)) {\r\n                            metadataPropertySet = new _Set();\r\n                            metadataOwner.set(O, metadataPropertySet);\r\n                        }\r\n                        metadataPropertySet.add(P);\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                OrdinaryDefineOwnMetadata: defineMetadata,\r\n                OrdinaryHasOwnMetadata: hasOwnMetadata,\r\n                OrdinaryGetOwnMetadata: getOwnMetadata,\r\n                OrdinaryOwnMetadataKeys: getOwnMetadataKeys,\r\n                OrdinaryDeleteMetadata: deleteMetadata,\r\n            };\r\n            return provider;\r\n        }\r\n\r\n        function GetMetadataProvider(O: object, P: string | symbol | undefined, Create: true): MetadataProvider;\r\n        function GetMetadataProvider(O: object, P: string | symbol | undefined, Create: false): MetadataProvider | undefined;\r\n        /**\r\n         * Gets the metadata provider for an object. If the object has no metadata provider and this is for a create operation,\r\n         * then this module's metadata provider is assigned to the object.\r\n         */\r\n        function GetMetadataProvider(O: object, P: string | symbol | undefined, Create: boolean): MetadataProvider | undefined {\r\n            const registeredProvider = metadataRegistry.getProvider(O, P);\r\n            if (!IsUndefined(registeredProvider)) {\r\n                return registeredProvider;\r\n            }\r\n            if (Create) {\r\n                if (metadataRegistry.setProvider(O, P, metadataProvider)) {\r\n                    return metadataProvider;\r\n                }\r\n                throw new Error(\"Illegal state.\");\r\n            }\r\n            return undefined;\r\n        }\r\n\r\n        // naive Map shim\r\n        function CreateMapPolyfill(): MapConstructor {\r\n            const cacheSentinel = {};\r\n            const arraySentinel: any[] = [];\r\n\r\n            class MapIterator<K, V, R extends (K | V | [K, V])> implements IterableIterator<R> {\r\n                private _keys: K[];\r\n                private _values: V[];\r\n                private _index = 0;\r\n                private _selector: (key: K, value: V) => R;\r\n                constructor(keys: K[], values: V[], selector: (key: K, value: V) => R) {\r\n                    this._keys = keys;\r\n                    this._values = values;\r\n                    this._selector = selector;\r\n                }\r\n                \"@@iterator\"(): IterableIterator<R> { return this; }\r\n                [iteratorSymbol](): IterableIterator<R> { return this; }\r\n                next(): __IteratorResult<R> {\r\n                    const index = this._index;\r\n                    if (index >= 0 && index < this._keys.length) {\r\n                        const result = this._selector(this._keys[index], this._values[index]);\r\n                        if (index + 1 >= this._keys.length) {\r\n                            this._index = -1;\r\n                            this._keys = arraySentinel;\r\n                            this._values = arraySentinel;\r\n                        }\r\n                        else {\r\n                            this._index++;\r\n                        }\r\n                        return { value: result, done: false };\r\n                    }\r\n                    return { value: <never>undefined, done: true };\r\n                }\r\n                throw(error: any): __IteratorResult<R> {\r\n                    if (this._index >= 0) {\r\n                        this._index = -1;\r\n                        this._keys = arraySentinel;\r\n                        this._values = arraySentinel;\r\n                    }\r\n                    throw error;\r\n                }\r\n                return(value?: R): __IteratorResult<R> {\r\n                    if (this._index >= 0) {\r\n                        this._index = -1;\r\n                        this._keys = arraySentinel;\r\n                        this._values = arraySentinel;\r\n                    }\r\n                    return { value: <never>value, done: true };\r\n                }\r\n            }\r\n\r\n            interface MapIterator<K, V, R extends (K | V | [K, V])> {\r\n                [Symbol.iterator](): IterableIterator<R>;\r\n            }\r\n\r\n            class Map<K, V> {\r\n                private _keys: K[] = [];\r\n                private _values: (V | undefined)[] = [];\r\n                private _cacheKey: any = cacheSentinel;\r\n                private _cacheIndex = -2;\r\n                get size() { return this._keys.length; }\r\n                has(key: K): boolean { return this._find(key, /*insert*/ false) >= 0; }\r\n                get(key: K): V | undefined {\r\n                    const index = this._find(key, /*insert*/ false);\r\n                    return index >= 0 ? this._values[index] : undefined;\r\n                }\r\n                set(key: K, value: V): this {\r\n                    const index = this._find(key, /*insert*/ true);\r\n                    this._values[index] = value;\r\n                    return this;\r\n                }\r\n                delete(key: K): boolean {\r\n                    const index = this._find(key, /*insert*/ false);\r\n                    if (index >= 0) {\r\n                        const size = this._keys.length;\r\n                        for (let i = index + 1; i < size; i++) {\r\n                            this._keys[i - 1] = this._keys[i];\r\n                            this._values[i - 1] = this._values[i];\r\n                        }\r\n                        this._keys.length--;\r\n                        this._values.length--;\r\n                        if (SameValueZero(key, this._cacheKey)) {\r\n                            this._cacheKey = cacheSentinel;\r\n                            this._cacheIndex = -2;\r\n                        }\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n                clear(): void {\r\n                    this._keys.length = 0;\r\n                    this._values.length = 0;\r\n                    this._cacheKey = cacheSentinel;\r\n                    this._cacheIndex = -2;\r\n                }\r\n                keys() { return new MapIterator(this._keys, this._values, getKey); }\r\n                values() { return new MapIterator(this._keys, this._values, getValue); }\r\n                entries() { return new MapIterator(this._keys, this._values, getEntry); }\r\n                \"@@iterator\"() { return this.entries(); }\r\n                [iteratorSymbol]() { return this.entries(); }\r\n                private _find(key: K, insert?: boolean): number {\r\n                    if (!SameValueZero(this._cacheKey, key)) {\r\n                        this._cacheIndex = -1;\r\n                        for (let i = 0; i < this._keys.length; i++) {\r\n                            if (SameValueZero(this._keys[i], key)) {\r\n                                this._cacheIndex = i;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (this._cacheIndex < 0 && insert) {\r\n                        this._cacheIndex = this._keys.length;\r\n                        this._keys.push(key);\r\n                        this._values.push(undefined);\r\n                    }\r\n                    return this._cacheIndex;\r\n                }\r\n            }\r\n\r\n            interface Map<K, V> {\r\n                [Symbol.iterator](): IterableIterator<[K, V]>;\r\n            }\r\n\r\n            return Map;\r\n\r\n            function getKey<K, V>(key: K, _: V) {\r\n                return key;\r\n            }\r\n\r\n            function getValue<K, V>(_: K, value: V) {\r\n                return value;\r\n            }\r\n\r\n            function getEntry<K, V>(key: K, value: V) {\r\n                return [key, value] as [K, V];\r\n            }\r\n        }\r\n\r\n        // naive Set shim\r\n        function CreateSetPolyfill(): SetConstructor {\r\n            class Set<T> {\r\n                private _map = new _Map<any, any>();\r\n                get size() { return this._map.size; }\r\n                has(value: T): boolean { return this._map.has(value); }\r\n                add(value: T): Set<T> { return this._map.set(value, value), this; }\r\n                delete(value: T): boolean { return this._map.delete(value); }\r\n                clear(): void { this._map.clear(); }\r\n                keys() { return this._map.keys(); }\r\n                values() { return this._map.keys(); }\r\n                entries() { return this._map.entries(); }\r\n                \"@@iterator\"() { return this.keys(); }\r\n                [iteratorSymbol]() { return this.keys(); }\r\n            }\r\n            interface Set<T> {\r\n                [Symbol.iterator](): IterableIterator<T>;\r\n            }\r\n            return Set;\r\n        }\r\n\r\n        // naive WeakMap shim\r\n        function CreateWeakMapPolyfill(): WeakMapConstructor {\r\n            const UUID_SIZE = 16;\r\n            const keys = HashMap.create<boolean>();\r\n            const rootKey = CreateUniqueKey();\r\n            return class WeakMap<K, V> {\r\n                private _key = CreateUniqueKey();\r\n                has(target: K): boolean {\r\n                    const table = GetOrCreateWeakMapTable<K>(target, /*create*/ false);\r\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\r\n                }\r\n                get(target: K): V {\r\n                    const table = GetOrCreateWeakMapTable<K>(target, /*create*/ false);\r\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\r\n                }\r\n                set(target: K, value: V): WeakMap<K, V> {\r\n                    const table = GetOrCreateWeakMapTable<K>(target, /*create*/ true);\r\n                    table[this._key] = value;\r\n                    return this;\r\n                }\r\n                delete(target: K): boolean {\r\n                    const table = GetOrCreateWeakMapTable<K>(target, /*create*/ false);\r\n                    return table !== undefined ? delete table[this._key] : false;\r\n                }\r\n                clear(): void {\r\n                    // NOTE: not a real clear, just makes the previous data unreachable\r\n                    this._key = CreateUniqueKey();\r\n                }\r\n            };\r\n\r\n            function CreateUniqueKey(): string {\r\n                let key: string;\r\n                do key = \"@@WeakMap@@\" + CreateUUID();\r\n                while (HashMap.has(keys, key));\r\n                keys[key] = true;\r\n                return key;\r\n            }\r\n\r\n            function GetOrCreateWeakMapTable<K>(target: K, create: true): HashMap<any>;\r\n            function GetOrCreateWeakMapTable<K>(target: K, create: false): HashMap<any> | undefined;\r\n            function GetOrCreateWeakMapTable<K>(target: K, create: boolean): HashMap<any> | undefined {\r\n                if (!hasOwn.call(target, rootKey)) {\r\n                    if (!create) return undefined;\r\n                    Object.defineProperty(target, rootKey, { value: HashMap.create<any>() });\r\n                }\r\n                return (<any>target)[rootKey];\r\n            }\r\n\r\n            function FillRandomBytes(buffer: BufferLike, size: number): BufferLike {\r\n                for (let i = 0; i < size; ++i) buffer[i] = Math.random() * 0xff | 0;\r\n                return buffer;\r\n            }\r\n\r\n            function GenRandomBytes(size: number): BufferLike {\r\n                if (typeof Uint8Array === \"function\") {\r\n                    const array = new Uint8Array(size);\r\n                    if (typeof crypto !== \"undefined\") {\r\n                        crypto.getRandomValues(array);\r\n                    }\r\n                    else if (typeof msCrypto !== \"undefined\") {\r\n                        msCrypto.getRandomValues(array);\r\n                    }\r\n                    else {\r\n                        FillRandomBytes(array, size);\r\n                    }\r\n                    return array;\r\n                }\r\n                return FillRandomBytes(new Array(size), size);\r\n            }\r\n\r\n            function CreateUUID() {\r\n                const data = GenRandomBytes(UUID_SIZE);\r\n                // mark as random - RFC 4122 § 4.4\r\n                data[6] = data[6] & 0x4f | 0x40;\r\n                data[8] = data[8] & 0xbf | 0x80;\r\n                let result = \"\";\r\n                for (let offset = 0; offset < UUID_SIZE; ++offset) {\r\n                    const byte = data[offset];\r\n                    if (offset === 4 || offset === 6 || offset === 8) result += \"-\";\r\n                    if (byte < 16) result += \"0\";\r\n                    result += byte.toString(16).toLowerCase();\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n\r\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\r\n        function MakeDictionary<T>(obj: T): T {\r\n            (<any>obj).__ = undefined;\r\n            delete (<any>obj).__;\r\n            return obj;\r\n        }\r\n    });\r\n}\r\n"
        },
        {
          "name": "ReflectLite.ts",
          "type": "blob",
          "size": 78.4951171875,
          "content": "/*! *****************************************************************************\r\nCopyright (C) Microsoft. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nnamespace Reflect {\r\n    // Metadata Proposal\r\n    // https://rbuckton.github.io/reflect-metadata/\r\n\r\n    type MemberDecorator = (target: Object, propertyKey: string | symbol, descriptor?: PropertyDescriptor) => PropertyDescriptor | void;\r\n\r\n    declare const global: any;\r\n    declare const globalThis: any;\r\n    declare const self: any;\r\n\r\n    /**\r\n      * Applies a set of decorators to a target object.\r\n      * @param decorators An array of decorators.\r\n      * @param target The target object.\r\n      * @returns The result of applying the provided decorators.\r\n      * @remarks Decorators are applied in reverse order of their positions in the array.\r\n      * @example\r\n      *\r\n      *     class Example { }\r\n      *\r\n      *     // constructor\r\n      *     Example = Reflect.decorate(decoratorsArray, Example);\r\n      *\r\n      */\r\n    export declare function decorate(decorators: ClassDecorator[], target: Function): Function;\r\n\r\n    /**\r\n      * Applies a set of decorators to a property of a target object.\r\n      * @param decorators An array of decorators.\r\n      * @param target The target object.\r\n      * @param propertyKey The property key to decorate.\r\n      * @param attributes A property descriptor.\r\n      * @remarks Decorators are applied in reverse order.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod() { }\r\n      *         method() { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Object.defineProperty(Example, \"staticMethod\",\r\n      *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\r\n      *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\r\n      *\r\n      *     // method (on prototype)\r\n      *     Object.defineProperty(Example.prototype, \"method\",\r\n      *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\r\n      *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\r\n      *\r\n      */\r\n    export declare function decorate(decorators: (PropertyDecorator | MethodDecorator)[], target: any, propertyKey: string | symbol, attributes?: PropertyDescriptor | null): PropertyDescriptor | undefined;\r\n\r\n    /**\r\n      * Applies a set of decorators to a property of a target object.\r\n      * @param decorators An array of decorators.\r\n      * @param target The target object.\r\n      * @param propertyKey The property key to decorate.\r\n      * @param attributes A property descriptor.\r\n      * @remarks Decorators are applied in reverse order.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod() { }\r\n      *         method() { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Object.defineProperty(Example, \"staticMethod\",\r\n      *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\r\n      *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\r\n      *\r\n      *     // method (on prototype)\r\n      *     Object.defineProperty(Example.prototype, \"method\",\r\n      *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\r\n      *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\r\n      *\r\n      */\r\n    export declare function decorate(decorators: (PropertyDecorator | MethodDecorator)[], target: any, propertyKey: string | symbol, attributes: PropertyDescriptor): PropertyDescriptor;\r\n\r\n    /**\r\n      * A default metadata decorator factory that can be used on a class, class member, or parameter.\r\n      * @param metadataKey The key for the metadata entry.\r\n      * @param metadataValue The value for the metadata entry.\r\n      * @returns A decorator function.\r\n      * @remarks\r\n      * If `metadataKey` is already defined for the target and target key, the\r\n      * metadataValue for that key will be overwritten.\r\n      * @example\r\n      *\r\n      *     // constructor\r\n      *     @Reflect.metadata(key, value)\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // property (on constructor, TypeScript only)\r\n      *     class Example {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticProperty;\r\n      *     }\r\n      *\r\n      *     // property (on prototype, TypeScript only)\r\n      *     class Example {\r\n      *         @Reflect.metadata(key, value)\r\n      *         property;\r\n      *     }\r\n      *\r\n      *     // method (on constructor)\r\n      *     class Example {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticMethod() { }\r\n      *     }\r\n      *\r\n      *     // method (on prototype)\r\n      *     class Example {\r\n      *         @Reflect.metadata(key, value)\r\n      *         method() { }\r\n      *     }\r\n      *\r\n      */\r\n    export declare function metadata(metadataKey: any, metadataValue: any): { (target: Function): void; (target: any, propertyKey: string | symbol): void; };\r\n\r\n    /**\r\n      * Define a unique metadata entry on the target.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param metadataValue A value that contains attached metadata.\r\n      * @param target The target object on which to define metadata.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\r\n      *\r\n      *     // decorator factory as metadata-producing annotation.\r\n      *     function MyAnnotation(options): ClassDecorator {\r\n      *         return target => Reflect.defineMetadata(\"custom:annotation\", options, target);\r\n      *     }\r\n      *\r\n      */\r\n    export declare function defineMetadata(metadataKey: any, metadataValue: any, target: any): void;\r\n\r\n    /**\r\n      * Define a unique metadata entry on the target.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param metadataValue A value that contains attached metadata.\r\n      * @param target The target object on which to define metadata.\r\n      * @param propertyKey The property key for the target.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, Example.prototype, \"method\");\r\n      *\r\n      *     // decorator factory as metadata-producing annotation.\r\n      *     function MyAnnotation(options): PropertyDecorator {\r\n      *         return (target, key) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n      *     }\r\n      *\r\n      */\r\n    export declare function defineMetadata(metadataKey: any, metadataValue: any, target: any, propertyKey: string | symbol): void;\r\n\r\n    /**\r\n      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    export declare function hasMetadata(metadataKey: any, target: any): boolean;\r\n\r\n    /**\r\n      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function hasMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n    /**\r\n      * Gets a value indicating whether the target object has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    export declare function hasOwnMetadata(metadataKey: any, target: any): boolean;\r\n\r\n    /**\r\n      * Gets a value indicating whether the target object has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function hasOwnMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    export declare function getMetadata(metadataKey: any, target: any): any;\r\n\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function getMetadata(metadataKey: any, target: any, propertyKey: string | symbol): any;\r\n\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    export declare function getOwnMetadata(metadataKey: any, target: any): any;\r\n\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function getOwnMetadata(metadataKey: any, target: any, propertyKey: string | symbol): any;\r\n\r\n    /**\r\n      * Gets the metadata keys defined on the target object or its prototype chain.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadataKeys(Example);\r\n      *\r\n      */\r\n    export declare function getMetadataKeys(target: any): any[];\r\n\r\n    /**\r\n      * Gets the metadata keys defined on the target object or its prototype chain.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function getMetadataKeys(target: any, propertyKey: string | symbol): any[];\r\n\r\n    /**\r\n      * Gets the unique metadata keys defined on the target object.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadataKeys(Example);\r\n      *\r\n      */\r\n    export declare function getOwnMetadataKeys(target: any): any[];\r\n\r\n    /**\r\n      * Gets the unique metadata keys defined on the target object.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function getOwnMetadataKeys(target: any, propertyKey: string | symbol): any[];\r\n\r\n    /**\r\n      * Deletes the metadata entry from the target object with the provided key.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    export declare function deleteMetadata(metadataKey: any, target: any): boolean;\r\n\r\n    /**\r\n      * Deletes the metadata entry from the target object with the provided key.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    export declare function deleteMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n    (function (this: any, factory: (exporter: <K extends keyof typeof Reflect>(key: K, value: typeof Reflect[K]) => void, root: any) => void) {\r\n        const root =\r\n            typeof globalThis === \"object\" ? globalThis :\r\n            typeof global === \"object\" ? global :\r\n            typeof self === \"object\" ? self :\r\n            typeof this === \"object\" ? this :\r\n            sloppyModeThis();\r\n\r\n        let exporter = makeExporter(Reflect);\r\n        if (typeof root.Reflect !== \"undefined\") {\r\n            exporter = makeExporter(root.Reflect, exporter);\r\n        }\r\n\r\n        factory(exporter, root);\r\n\r\n        if (typeof root.Reflect === \"undefined\") {\r\n            root.Reflect = Reflect;\r\n        }\r\n\r\n        function makeExporter(target: typeof Reflect, previous?: <K extends keyof typeof Reflect>(key: K, value: typeof Reflect[K]) => void) {\r\n            return <K extends keyof typeof Reflect>(key: K, value: typeof Reflect[K]) => {\r\n                Object.defineProperty(target, key, { configurable: true, writable: true, value });\r\n                if (previous) previous(key, value);\r\n            };\r\n        }\r\n\r\n        function sloppyModeThis(): never {\r\n            throw new ReferenceError(\"globalThis could not be found. Please polyfill globalThis before loading this module.\");\r\n        }\r\n    })\r\n    (function (exporter, root) {\r\n        // feature test for Symbol support\r\n        const supportsSymbol = typeof Symbol === \"function\";\r\n        const toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : fail(\"Symbol.toPrimitive not found.\");\r\n        const iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : fail(\"Symbol.iterator not found.\");\r\n\r\n        // Load global or shim versions of Map, Set, and WeakMap\r\n        const functionPrototype = Object.getPrototypeOf(Function);\r\n        const _Map: typeof Map = typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : fail(\"A valid Map constructor could not be found.\");\r\n        const _Set: typeof Set = typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : fail(\"A valid Set constructor could not be found.\");\r\n        const _WeakMap: typeof WeakMap = typeof WeakMap === \"function\" ? WeakMap : fail(\"A valid WeakMap constructor could not be found.\");\r\n        const registrySymbol = supportsSymbol ? Symbol.for(\"@reflect-metadata:registry\") : undefined;\r\n        const metadataRegistry = GetOrCreateMetadataRegistry();\r\n        const metadataProvider = CreateMetadataProvider(metadataRegistry);\r\n\r\n        function decorate(decorators: ClassDecorator[], target: Function): Function;\r\n        function decorate(decorators: (PropertyDecorator | MethodDecorator)[], target: any, propertyKey: string | symbol, attributes?: PropertyDescriptor | null): PropertyDescriptor | undefined;\r\n        function decorate(decorators: (PropertyDecorator | MethodDecorator)[], target: any, propertyKey: string | symbol, attributes: PropertyDescriptor): PropertyDescriptor;\r\n\r\n        /**\r\n         * Applies a set of decorators to a property of a target object.\r\n         * @param decorators An array of decorators.\r\n         * @param target The target object.\r\n         * @param propertyKey (Optional) The property key to decorate.\r\n         * @param attributes (Optional) The property descriptor for the target key.\r\n         * @remarks Decorators are applied in reverse order.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     Example = Reflect.decorate(decoratorsArray, Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     Object.defineProperty(Example, \"staticMethod\",\r\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\r\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\r\n         *\r\n         *     // method (on prototype)\r\n         *     Object.defineProperty(Example.prototype, \"method\",\r\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\r\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\r\n         *\r\n         */\r\n        function decorate(decorators: (ClassDecorator | MemberDecorator)[], target: any, propertyKey?: string | symbol, attributes?: PropertyDescriptor | null): PropertyDescriptor | Function | undefined {\r\n            if (!IsUndefined(propertyKey)) {\r\n                if (!IsArray(decorators)) throw new TypeError();\r\n                if (!IsObject(target)) throw new TypeError();\r\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes)) throw new TypeError();\r\n                if (IsNull(attributes)) attributes = undefined;\r\n                propertyKey = ToPropertyKey(propertyKey);\r\n                return DecorateProperty(<MemberDecorator[]>decorators, target, propertyKey, attributes);\r\n            }\r\n            else {\r\n                if (!IsArray(decorators)) throw new TypeError();\r\n                if (!IsConstructor(target)) throw new TypeError();\r\n                return DecorateConstructor(<ClassDecorator[]>decorators, <Function>target);\r\n            }\r\n        }\r\n\r\n        exporter(\"decorate\", decorate);\r\n\r\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\r\n\r\n        /**\r\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\r\n         * @param metadataKey The key for the metadata entry.\r\n         * @param metadataValue The value for the metadata entry.\r\n         * @returns A decorator function.\r\n         * @remarks\r\n         * If `metadataKey` is already defined for the target and target key, the\r\n         * metadataValue for that key will be overwritten.\r\n         * @example\r\n         *\r\n         *     // constructor\r\n         *     @Reflect.metadata(key, value)\r\n         *     class Example {\r\n         *     }\r\n         *\r\n         *     // property (on constructor, TypeScript only)\r\n         *     class Example {\r\n         *         @Reflect.metadata(key, value)\r\n         *         static staticProperty;\r\n         *     }\r\n         *\r\n         *     // property (on prototype, TypeScript only)\r\n         *     class Example {\r\n         *         @Reflect.metadata(key, value)\r\n         *         property;\r\n         *     }\r\n         *\r\n         *     // method (on constructor)\r\n         *     class Example {\r\n         *         @Reflect.metadata(key, value)\r\n         *         static staticMethod() { }\r\n         *     }\r\n         *\r\n         *     // method (on prototype)\r\n         *     class Example {\r\n         *         @Reflect.metadata(key, value)\r\n         *         method() { }\r\n         *     }\r\n         *\r\n         */\r\n        function metadata(metadataKey: any, metadataValue: any) {\r\n            function decorator(target: Function): void;\r\n            function decorator(target: any, propertyKey: string | symbol): void;\r\n            function decorator(target: any, propertyKey?: string | symbol): void {\r\n                if (!IsObject(target)) throw new TypeError();\r\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey)) throw new TypeError();\r\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\r\n            }\r\n            return decorator;\r\n        }\r\n\r\n        exporter(\"metadata\", metadata);\r\n\r\n        // 4.1.3 Reflect.defineMetadata(metadataKey, metadataValue, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect.definemetadata\r\n\r\n        function defineMetadata(metadataKey: any, metadataValue: any, target: any): void;\r\n        function defineMetadata(metadataKey: any, metadataValue: any, target: any, propertyKey: string | symbol): void;\r\n\r\n        /**\r\n         * Define a unique metadata entry on the target.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param metadataValue A value that contains attached metadata.\r\n         * @param target The target object on which to define metadata.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\r\n         *\r\n         *     // decorator factory as metadata-producing annotation.\r\n         *     function MyAnnotation(options): Decorator {\r\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n         *     }\r\n         *\r\n         */\r\n        function defineMetadata(metadataKey: any, metadataValue: any, target: any, propertyKey?: string | symbol): void {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\r\n        }\r\n\r\n        exporter(\"defineMetadata\", defineMetadata);\r\n\r\n        // 4.1.4 Reflect.hasMetadata(metadataKey, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect.hasmetadata\r\n\r\n        function hasMetadata(metadataKey: any, target: any): boolean;\r\n        function hasMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n        /**\r\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function hasMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): boolean {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\r\n        }\r\n\r\n        exporter(\"hasMetadata\", hasMetadata);\r\n\r\n        // 4.1.5 Reflect.hasOwnMetadata(metadataKey, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-hasownmetadata\r\n\r\n        function hasOwnMetadata(metadataKey: any, target: any): boolean;\r\n        function hasOwnMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n        /**\r\n         * Gets a value indicating whether the target object has the provided metadata key defined.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function hasOwnMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): boolean {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\r\n        }\r\n\r\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\r\n\r\n        // 4.1.6 Reflect.getMetadata(metadataKey, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-getmetadata\r\n\r\n        function getMetadata(metadataKey: any, target: any): any;\r\n        function getMetadata(metadataKey: any, target: any, propertyKey: string | symbol): any;\r\n\r\n        /**\r\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function getMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): any {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\r\n        }\r\n\r\n        exporter(\"getMetadata\", getMetadata);\r\n\r\n        // 4.1.7 Reflect.getOwnMetadata(metadataKey, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-getownmetadata\r\n\r\n        function getOwnMetadata(metadataKey: any, target: any): any;\r\n        function getOwnMetadata(metadataKey: any, target: any, propertyKey: string | symbol): any;\r\n\r\n        /**\r\n         * Gets the metadata value for the provided metadata key on the target object.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function getOwnMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): any {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\r\n        }\r\n\r\n        exporter(\"getOwnMetadata\", getOwnMetadata);\r\n\r\n        // 4.1.8 Reflect.getMetadataKeys(target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-getmetadatakeys\r\n\r\n        function getMetadataKeys(target: any): any[];\r\n        function getMetadataKeys(target: any, propertyKey: string | symbol): any[];\r\n\r\n        /**\r\n         * Gets the metadata keys defined on the target object or its prototype chain.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns An array of unique metadata keys.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.getMetadataKeys(Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function getMetadataKeys(target: any, propertyKey?: string | symbol): any[] {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryMetadataKeys(target, propertyKey);\r\n        }\r\n\r\n        exporter(\"getMetadataKeys\", getMetadataKeys);\r\n\r\n        // 4.1.9 Reflect.getOwnMetadataKeys(target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-getownmetadata\r\n\r\n        function getOwnMetadataKeys(target: any): any[];\r\n        function getOwnMetadataKeys(target: any, propertyKey: string | symbol): any[];\r\n\r\n        /**\r\n         * Gets the unique metadata keys defined on the target object.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns An array of unique metadata keys.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.getOwnMetadataKeys(Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function getOwnMetadataKeys(target: any, propertyKey?: string | symbol): any[] {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\r\n        }\r\n\r\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\r\n\r\n        // 4.1.10 Reflect.deleteMetadata(metadataKey, target [, propertyKey])\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect-deletemetadata\r\n\r\n        function deleteMetadata(metadataKey: any, target: any): boolean;\r\n        function deleteMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n        /**\r\n         * Deletes the metadata entry from the target object with the provided key.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function deleteMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): boolean {\r\n            if (!IsObject(target)) throw new TypeError();\r\n            if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n            const provider = GetMetadataProvider(target, propertyKey, /*Create*/ false);\r\n            if (IsUndefined(provider)) return false;\r\n            return provider.OrdinaryDeleteMetadata(metadataKey, target, propertyKey);\r\n        }\r\n\r\n        exporter(\"deleteMetadata\", deleteMetadata);\r\n\r\n        function DecorateConstructor(decorators: ClassDecorator[], target: Function): Function {\r\n            for (let i = decorators.length - 1; i >= 0; --i) {\r\n                const decorator = decorators[i];\r\n                const decorated = decorator(target);\r\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\r\n                    if (!IsConstructor(decorated)) throw new TypeError();\r\n                    target = <Function>decorated;\r\n                }\r\n            }\r\n            return target;\r\n        }\r\n\r\n        function DecorateProperty(decorators: MemberDecorator[], target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor | undefined): PropertyDescriptor | undefined {\r\n            for (let i = decorators.length - 1; i >= 0; --i) {\r\n                const decorator = decorators[i];\r\n                const decorated = decorator(target, propertyKey, descriptor);\r\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\r\n                    if (!IsObject(decorated)) throw new TypeError();\r\n                    descriptor = <PropertyDescriptor>decorated;\r\n                }\r\n            }\r\n            return descriptor;\r\n        }\r\n\r\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\r\n        function OrdinaryHasMetadata(MetadataKey: any, O: any, P: string | symbol | undefined): boolean {\r\n            const hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n            if (hasOwn) return true;\r\n            const parent = OrdinaryGetPrototypeOf(O);\r\n            if (!IsNull(parent)) return OrdinaryHasMetadata(MetadataKey, parent, P);\r\n            return false;\r\n        }\r\n\r\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\r\n        function OrdinaryHasOwnMetadata(MetadataKey: any, O: any, P: string | symbol | undefined): boolean {\r\n            const provider = GetMetadataProvider(O, P, /*Create*/ false);\r\n            if (IsUndefined(provider)) return false;\r\n            return ToBoolean(provider.OrdinaryHasOwnMetadata(MetadataKey, O, P));\r\n        }\r\n\r\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\r\n        function OrdinaryGetMetadata(MetadataKey: any, O: any, P: string | symbol | undefined): any {\r\n            const hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n            if (hasOwn) return OrdinaryGetOwnMetadata(MetadataKey, O, P);\r\n            const parent = OrdinaryGetPrototypeOf(O);\r\n            if (!IsNull(parent)) return OrdinaryGetMetadata(MetadataKey, parent, P);\r\n            return undefined;\r\n        }\r\n\r\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\r\n        function OrdinaryGetOwnMetadata(MetadataKey: any, O: any, P: string | symbol | undefined): any {\r\n            const provider = GetMetadataProvider(O, P, /*Create*/ false);\r\n            if (IsUndefined(provider)) return;\r\n            return provider.OrdinaryGetOwnMetadata(MetadataKey, O, P);\r\n        }\r\n\r\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\r\n        function OrdinaryDefineOwnMetadata(MetadataKey: any, MetadataValue: any, O: any, P: string | symbol | undefined): void {\r\n            const provider = GetMetadataProvider(O, P, /*Create*/ true);\r\n            provider.OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P);\r\n        }\r\n\r\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\r\n        function OrdinaryMetadataKeys(O: any, P: string | symbol | undefined): any[] {\r\n            const ownKeys = OrdinaryOwnMetadataKeys(O, P);\r\n            const parent = OrdinaryGetPrototypeOf(O);\r\n            if (parent === null) return ownKeys;\r\n            const parentKeys = OrdinaryMetadataKeys(parent, P);\r\n            if (parentKeys.length <= 0) return ownKeys;\r\n            if (ownKeys.length <= 0) return parentKeys;\r\n            const set = new _Set<any>();\r\n            const keys: any[] = [];\r\n            for (const key of ownKeys) {\r\n                const hasKey = set.has(key);\r\n                if (!hasKey) {\r\n                    set.add(key);\r\n                    keys.push(key);\r\n                }\r\n            }\r\n            for (const key of parentKeys) {\r\n                const hasKey = set.has(key);\r\n                if (!hasKey) {\r\n                    set.add(key);\r\n                    keys.push(key);\r\n                }\r\n            }\r\n            return keys;\r\n        }\r\n\r\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\r\n        function OrdinaryOwnMetadataKeys(O: any, P: string | symbol | undefined): any[] {\r\n            const provider = GetMetadataProvider(O, P, /*create*/ false);\r\n            if (!provider) {\r\n                return [];\r\n            }\r\n            return provider.OrdinaryOwnMetadataKeys(O, P);\r\n        }\r\n\r\n        // 6 ECMAScript Data Types and Values\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\r\n        function Type(x: any): Tag {\r\n            if (x === null) return Tag.Null;\r\n            switch (typeof x) {\r\n                case \"undefined\": return Tag.Undefined;\r\n                case \"boolean\": return Tag.Boolean;\r\n                case \"string\": return Tag.String;\r\n                case \"symbol\": return Tag.Symbol;\r\n                case \"number\": return Tag.Number;\r\n                case \"object\": return x === null ? Tag.Null : Tag.Object;\r\n                default: return Tag.Object;\r\n            }\r\n        }\r\n\r\n        // 6.1 ECMAScript Language Types\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types\r\n        const enum Tag {\r\n            Undefined,\r\n            Null,\r\n            Boolean,\r\n            String,\r\n            Symbol,\r\n            Number,\r\n            Object\r\n        }\r\n\r\n        // 6.1.1 The Undefined Type\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\r\n        function IsUndefined(x: any): x is undefined {\r\n            return x === undefined;\r\n        }\r\n\r\n        // 6.1.2 The Null Type\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\r\n        function IsNull(x: any): x is null {\r\n            return x === null;\r\n        }\r\n\r\n        // 6.1.5 The Symbol Type\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\r\n        function IsSymbol(x: any): x is symbol {\r\n            return typeof x === \"symbol\";\r\n        }\r\n\r\n        // 6.1.7 The Object Type\r\n        // https://tc39.github.io/ecma262/#sec-object-type\r\n        function IsObject<T>(x: T | undefined | null | boolean | string | symbol | number): x is T {\r\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\r\n        }\r\n\r\n        // 7.1 Type Conversion\r\n        // https://tc39.github.io/ecma262/#sec-type-conversion\r\n\r\n        // 7.1.1 ToPrimitive(input [, PreferredType])\r\n        // https://tc39.github.io/ecma262/#sec-toprimitive\r\n        function ToPrimitive(input: any, PreferredType?: Tag): undefined | null | boolean | string | symbol | number {\r\n            switch (Type(input)) {\r\n                case Tag.Undefined: return input;\r\n                case Tag.Null: return input;\r\n                case Tag.Boolean: return input;\r\n                case Tag.String: return input;\r\n                case Tag.Symbol: return input;\r\n                case Tag.Number: return input;\r\n            }\r\n            const hint: \"string\" | \"number\" | \"default\" = PreferredType === Tag.String ? \"string\" : PreferredType === Tag.Number ? \"number\" : \"default\";\r\n            const exoticToPrim = GetMethod(input, toPrimitiveSymbol);\r\n            if (exoticToPrim !== undefined) {\r\n                const result = exoticToPrim.call(input, hint);\r\n                if (IsObject(result)) throw new TypeError();\r\n                return result;\r\n            }\r\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\r\n        }\r\n\r\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\r\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\r\n        function OrdinaryToPrimitive(O: any, hint: \"string\" | \"number\"): undefined | null | boolean | string | symbol | number {\r\n            if (hint === \"string\") {\r\n                const toString = O.toString;\r\n                if (IsCallable(toString)) {\r\n                    const result = toString.call(O);\r\n                    if (!IsObject(result)) return result;\r\n                }\r\n                const valueOf = O.valueOf;\r\n                if (IsCallable(valueOf)) {\r\n                    const result = valueOf.call(O);\r\n                    if (!IsObject(result)) return result;\r\n                }\r\n            }\r\n            else {\r\n                const valueOf = O.valueOf;\r\n                if (IsCallable(valueOf)) {\r\n                    const result = valueOf.call(O);\r\n                    if (!IsObject(result)) return result;\r\n                }\r\n                const toString = O.toString;\r\n                if (IsCallable(toString)) {\r\n                    const result = toString.call(O);\r\n                    if (!IsObject(result)) return result;\r\n                }\r\n            }\r\n            throw new TypeError();\r\n        }\r\n\r\n        // 7.1.2 ToBoolean(argument)\r\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\r\n        function ToBoolean(argument: any): boolean {\r\n            return !!argument;\r\n        }\r\n\r\n        // 7.1.12 ToString(argument)\r\n        // https://tc39.github.io/ecma262/#sec-tostring\r\n        function ToString(argument: any): string {\r\n            return \"\" + argument;\r\n        }\r\n\r\n        // 7.1.14 ToPropertyKey(argument)\r\n        // https://tc39.github.io/ecma262/#sec-topropertykey\r\n        function ToPropertyKey(argument: any): string | symbol {\r\n            const key = ToPrimitive(argument, Tag.String);\r\n            if (IsSymbol(key)) return key;\r\n            return ToString(key);\r\n        }\r\n\r\n        // 7.2 Testing and Comparison Operations\r\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\r\n\r\n        // 7.2.2 IsArray(argument)\r\n        // https://tc39.github.io/ecma262/#sec-isarray\r\n        function IsArray(argument: any): argument is any[] {\r\n            return Array.isArray\r\n                ? Array.isArray(argument)\r\n                : argument instanceof Object\r\n                    ? argument instanceof Array\r\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\r\n        }\r\n\r\n        // 7.2.3 IsCallable(argument)\r\n        // https://tc39.github.io/ecma262/#sec-iscallable\r\n        function IsCallable(argument: any): argument is Function {\r\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\r\n            return typeof argument === \"function\";\r\n        }\r\n\r\n        // 7.2.4 IsConstructor(argument)\r\n        // https://tc39.github.io/ecma262/#sec-isconstructor\r\n        function IsConstructor(argument: any): argument is Function {\r\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\r\n            return typeof argument === \"function\";\r\n        }\r\n\r\n        // 7.2.7 IsPropertyKey(argument)\r\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\r\n        function IsPropertyKey(argument: any): argument is string | symbol {\r\n            switch (Type(argument)) {\r\n                case Tag.String: return true;\r\n                case Tag.Symbol: return true;\r\n                default: return false;\r\n            }\r\n        }\r\n\r\n        // 7.3 Operations on Objects\r\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\r\n\r\n        // 7.3.9 GetMethod(V, P)\r\n        // https://tc39.github.io/ecma262/#sec-getmethod\r\n        function GetMethod(V: any, P: any): Function | undefined {\r\n            const func = V[P];\r\n            if (func === undefined || func === null) return undefined;\r\n            if (!IsCallable(func)) throw new TypeError();\r\n            return func;\r\n        }\r\n\r\n        // 7.4 Operations on Iterator Objects\r\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\r\n\r\n        function GetIterator<T>(obj: Iterable<T>): Iterator<T> {\r\n            const method = GetMethod(obj, iteratorSymbol);\r\n            if (!IsCallable(method)) throw new TypeError(); // from Call\r\n            const iterator = method.call(obj);\r\n            if (!IsObject(iterator)) throw new TypeError();\r\n            return iterator;\r\n        }\r\n\r\n        // 7.4.4 IteratorValue(iterResult)\r\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\r\n        function IteratorValue<T>(iterResult: __IteratorResult<T>): T {\r\n            return iterResult.value;\r\n        }\r\n\r\n        // 7.4.5 IteratorStep(iterator)\r\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\r\n        function IteratorStep<T>(iterator: Iterator<T>): __IteratorResult<T> | false {\r\n            const result = iterator.next();\r\n            return result.done ? false : result;\r\n        }\r\n\r\n        // 7.4.6 IteratorClose(iterator, completion)\r\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\r\n        function IteratorClose<T>(iterator: Iterator<T>) {\r\n            const f = iterator[\"return\"];\r\n            if (f) f.call(iterator);\r\n        }\r\n\r\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\r\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\r\n\r\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\r\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\r\n        function OrdinaryGetPrototypeOf(O: any): any {\r\n            const proto = Object.getPrototypeOf(O);\r\n            if (typeof O !== \"function\" || O === functionPrototype) return proto;\r\n\r\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\r\n            // Try to determine the superclass constructor. Compatible implementations\r\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\r\n            // or ensure each class has a valid `constructor` property on its prototype that\r\n            // points back to the constructor.\r\n\r\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\r\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\r\n            if (proto !== functionPrototype) return proto;\r\n\r\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\r\n            const prototype = O.prototype;\r\n            const prototypeProto = prototype && Object.getPrototypeOf(prototype);\r\n            if (prototypeProto == null || prototypeProto === Object.prototype) return proto;\r\n\r\n            // If the constructor was not a function, then we cannot determine the heritage.\r\n            const constructor = prototypeProto.constructor;\r\n            if (typeof constructor !== \"function\") return proto;\r\n\r\n            // If we have some kind of self-reference, then we cannot determine the heritage.\r\n            if (constructor === O) return proto;\r\n\r\n            // we have a pretty good guess at the heritage.\r\n            return constructor;\r\n        }\r\n\r\n        function fail(e: any): never {\r\n            throw e;\r\n        }\r\n\r\n        // Global metadata registry\r\n        // - Allows `import \"reflect-metadata\"` and `import \"reflect-metadata/no-conflict\"` to interoperate.\r\n        // - Uses isolated metadata if `Reflect` is frozen before the registry can be installed.\r\n\r\n        /**\r\n         * Creates a registry used to allow multiple `reflect-metadata` providers.\r\n         */\r\n        function CreateMetadataRegistry(): MetadataRegistry {\r\n            let fallback: MetadataProvider | undefined;\r\n            if (!IsUndefined(registrySymbol) &&\r\n                typeof root.Reflect !== \"undefined\" &&\r\n                !(registrySymbol in root.Reflect) &&\r\n                typeof root.Reflect.defineMetadata === \"function\") {\r\n                // interoperate with older version of `reflect-metadata` that did not support a registry.\r\n                fallback = CreateFallbackProvider(root.Reflect);\r\n            }\r\n        \r\n            let first: MetadataProvider | undefined;\r\n            let second: MetadataProvider | undefined;\r\n            let rest: Set<MetadataProvider> | undefined;\r\n            const targetProviderMap = new _WeakMap<object, Map<string | symbol | undefined, MetadataProvider>>();\r\n            const registry: MetadataRegistry = {\r\n                registerProvider,\r\n                getProvider,\r\n                setProvider,\r\n            };\r\n            return registry;\r\n\r\n            function registerProvider(provider: MetadataProvider) {\r\n                if (!Object.isExtensible(registry)) {\r\n                    throw new Error(\"Cannot add provider to a frozen registry.\");\r\n                }\r\n                switch (true) {\r\n                    case fallback === provider: break;\r\n                    case IsUndefined(first): first = provider; break;\r\n                    case first === provider: break;\r\n                    case IsUndefined(second): second = provider; break;\r\n                    case second === provider: break;\r\n                    default:\r\n                        if (rest === undefined) rest = new _Set();\r\n                        rest.add(provider);\r\n                        break;\r\n                }\r\n            }\r\n\r\n            function getProviderNoCache(O: object, P: string | symbol | undefined) {\r\n                if (!IsUndefined(first)) {\r\n                    if (first.isProviderFor(O, P)) return first;\r\n                    if (!IsUndefined(second)) {\r\n                        if (second.isProviderFor(O, P)) return first;\r\n                        if (!IsUndefined(rest)) {\r\n                            const iterator = GetIterator(rest);\r\n                            while (true) {\r\n                                const next = IteratorStep(iterator);\r\n                                if (!next) {\r\n                                    return undefined;\r\n                                }\r\n                                const provider = IteratorValue(next);\r\n                                if (provider.isProviderFor(O, P)) {\r\n                                    IteratorClose(iterator);\r\n                                    return provider;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (!IsUndefined(fallback) && fallback.isProviderFor(O, P)) {\r\n                    return fallback;\r\n                }\r\n                return undefined;\r\n            }\r\n\r\n            function getProvider(O: object, P: string | symbol | undefined) {\r\n                let providerMap = targetProviderMap.get(O);\r\n                let provider: MetadataProvider | undefined;\r\n                if (!IsUndefined(providerMap)) {\r\n                    provider = providerMap.get(P);\r\n                }\r\n                if (!IsUndefined(provider)) {\r\n                    return provider;\r\n                }\r\n\r\n                provider = getProviderNoCache(O, P);\r\n                if (!IsUndefined(provider)) {\r\n                    if (IsUndefined(providerMap)) {\r\n                        providerMap = new _Map();\r\n                        targetProviderMap.set(O, providerMap);\r\n                    }\r\n                    providerMap.set(P, provider);\r\n                }\r\n                return provider;\r\n            }\r\n\r\n            function hasProvider(provider: MetadataProvider) {\r\n                if (IsUndefined(provider)) throw new TypeError();\r\n                return first === provider || second === provider || !IsUndefined(rest) && rest.has(provider);\r\n            }\r\n\r\n            function setProvider(O: object, P: string | symbol | undefined, provider: MetadataProvider) {\r\n                if (!hasProvider(provider)) {\r\n                    throw new Error(\"Metadata provider not registered.\");\r\n                }\r\n                const existingProvider = getProvider(O, P);\r\n                if (existingProvider !== provider) {\r\n                    if (!IsUndefined(existingProvider)) {\r\n                        return false;\r\n                    }\r\n                    let providerMap = targetProviderMap.get(O);\r\n                    if (IsUndefined(providerMap)) {\r\n                        providerMap = new _Map();\r\n                        targetProviderMap.set(O, providerMap);\r\n                    }\r\n                    providerMap.set(P, provider);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Gets or creates the shared registry of metadata providers.\r\n         */\r\n        function GetOrCreateMetadataRegistry(): MetadataRegistry {\r\n            let metadataRegistry: MetadataRegistry | undefined;\r\n            if (!IsUndefined(registrySymbol) && IsObject(root.Reflect) && Object.isExtensible(root.Reflect)) {\r\n                metadataRegistry = (root.Reflect as any)[registrySymbol] as MetadataRegistry | undefined;\r\n            }\r\n            if (IsUndefined(metadataRegistry)) {\r\n                metadataRegistry = CreateMetadataRegistry();\r\n            }\r\n            if (!IsUndefined(registrySymbol) && IsObject(root.Reflect) && Object.isExtensible(root.Reflect)) {\r\n                Object.defineProperty(root.Reflect, registrySymbol, {\r\n                    enumerable: false,\r\n                    configurable: false,\r\n                    writable: false,\r\n                    value: metadataRegistry\r\n                });\r\n            }\r\n            return metadataRegistry;\r\n        }\r\n\r\n        function CreateMetadataProvider(registry: MetadataRegistry): MetadataProvider {\r\n            // [[Metadata]] internal slot\r\n            // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\r\n            const metadata = new _WeakMap<any, Map<string | symbol | undefined, Map<any, any>>>();\r\n            const provider: MetadataProvider = {\r\n                isProviderFor(O, P) {\r\n                    const targetMetadata = metadata.get(O);\r\n                    if (IsUndefined(targetMetadata)) return false;\r\n                    return targetMetadata.has(P);\r\n                },\r\n                OrdinaryDefineOwnMetadata: OrdinaryDefineOwnMetadata,\r\n                OrdinaryHasOwnMetadata: OrdinaryHasOwnMetadata,\r\n                OrdinaryGetOwnMetadata: OrdinaryGetOwnMetadata,\r\n                OrdinaryOwnMetadataKeys: OrdinaryOwnMetadataKeys,\r\n                OrdinaryDeleteMetadata: OrdinaryDeleteMetadata,\r\n            };\r\n            metadataRegistry.registerProvider(provider);\r\n            return provider;\r\n\r\n            // 2.1.1 GetOrCreateMetadataMap(O, P, Create)\r\n            // https://rbuckton.github.io/reflect-metadata/#getorcreatemetadatamap\r\n            function GetOrCreateMetadataMap(O: object, P: string | symbol | undefined, Create: true): Map<any, any>;\r\n            function GetOrCreateMetadataMap(O: object, P: string | symbol | undefined, Create: false): Map<any, any> | undefined;\r\n            function GetOrCreateMetadataMap(O: object, P: string | symbol | undefined, Create: boolean) {\r\n                let targetMetadata = metadata.get(O);\r\n                let createdTargetMetadata = false;\r\n                if (IsUndefined(targetMetadata)) {\r\n                    if (!Create) return undefined;\r\n                    targetMetadata = new _Map<string | symbol | undefined, Map<any, any>>();\r\n                    metadata.set(O, targetMetadata);\r\n                    createdTargetMetadata = true;\r\n                }\r\n                let metadataMap = targetMetadata.get(P);\r\n                if (IsUndefined(metadataMap)) {\r\n                    if (!Create) return undefined;\r\n                    metadataMap = new _Map<any, any>();\r\n                    targetMetadata.set(P, metadataMap);\r\n                    if (!registry.setProvider(O, P, provider)) {\r\n                        targetMetadata.delete(P);\r\n                        if (createdTargetMetadata) {\r\n                            metadata.delete(O);\r\n                        }\r\n                        throw new Error(\"Wrong provider for target.\");\r\n                    }\r\n                }\r\n                return metadataMap;\r\n            }\r\n\r\n            // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\r\n            // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\r\n            function OrdinaryHasOwnMetadata(MetadataKey: any, O: object, P: string | symbol | undefined): boolean {\r\n                const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n                if (IsUndefined(metadataMap)) return false;\r\n                return ToBoolean(metadataMap.has(MetadataKey));\r\n            }\r\n\r\n            // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\r\n            // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\r\n            function OrdinaryGetOwnMetadata(MetadataKey: any, O: object, P: string | symbol | undefined): any {\r\n                const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n                if (IsUndefined(metadataMap)) return undefined;\r\n                return metadataMap.get(MetadataKey);\r\n            }\r\n\r\n            // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\r\n            // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\r\n            function OrdinaryDefineOwnMetadata(MetadataKey: any, MetadataValue: any, O: object, P: string | symbol | undefined): void {\r\n                const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\r\n                metadataMap.set(MetadataKey, MetadataValue);\r\n            }\r\n\r\n            // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\r\n            // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\r\n            function OrdinaryOwnMetadataKeys(O: any, P: string | symbol | undefined): any[] {\r\n                const keys: any[] = [];\r\n                const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n                if (IsUndefined(metadataMap)) return keys;\r\n                const keysObj = metadataMap.keys();\r\n                const iterator = GetIterator(keysObj);\r\n                let k = 0;\r\n                while (true) {\r\n                    const next = IteratorStep(iterator);\r\n                    if (!next) {\r\n                        keys.length = k;\r\n                        return keys;\r\n                    }\r\n                    const nextValue = IteratorValue(next);\r\n                    try {\r\n                        keys[k] = nextValue;\r\n                    }\r\n                    catch (e) {\r\n                        try {\r\n                            IteratorClose(iterator);\r\n                        }\r\n                        finally {\r\n                            throw e;\r\n                        }\r\n                    }\r\n                    k++;\r\n                }\r\n            }\r\n\r\n            function OrdinaryDeleteMetadata(MetadataKey: any, O: object, P: string | symbol | undefined): boolean {\r\n                const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n                if (IsUndefined(metadataMap)) return false;\r\n                if (!metadataMap.delete(MetadataKey)) return false;\r\n                if (metadataMap.size === 0) {\r\n                    const targetMetadata = metadata.get(O);\r\n                    if (!IsUndefined(targetMetadata)) {\r\n                        targetMetadata.delete(P);\r\n                        if (targetMetadata.size === 0) {\r\n                            metadata.delete(targetMetadata);\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        function CreateFallbackProvider(reflect: typeof Reflect): MetadataProvider {\r\n            const { defineMetadata, hasOwnMetadata, getOwnMetadata, getOwnMetadataKeys, deleteMetadata } = reflect;\r\n            const metadataOwner = new _WeakMap<object, Set<string | symbol | undefined>>();\r\n            const provider: MetadataProvider = {\r\n                isProviderFor(O, P) {\r\n                    let metadataPropertySet = metadataOwner.get(O);\r\n                    if (!IsUndefined(metadataPropertySet) && metadataPropertySet.has(P)) {\r\n                        return true;\r\n                    }\r\n                    if (getOwnMetadataKeys(O, P!).length) {\r\n                        if (IsUndefined(metadataPropertySet)) {\r\n                            metadataPropertySet = new _Set();\r\n                            metadataOwner.set(O, metadataPropertySet);\r\n                        }\r\n                        metadataPropertySet.add(P);\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                },\r\n                OrdinaryDefineOwnMetadata: defineMetadata,\r\n                OrdinaryHasOwnMetadata: hasOwnMetadata,\r\n                OrdinaryGetOwnMetadata: getOwnMetadata,\r\n                OrdinaryOwnMetadataKeys: getOwnMetadataKeys,\r\n                OrdinaryDeleteMetadata: deleteMetadata,\r\n            };\r\n            return provider;\r\n        }\r\n\r\n        function GetMetadataProvider(O: object, P: string | symbol | undefined, Create: true): MetadataProvider;\r\n        function GetMetadataProvider(O: object, P: string | symbol | undefined, Create: false): MetadataProvider | undefined;\r\n        /**\r\n         * Gets the metadata provider for an object. If the object has no metadata provider and this is for a create operation,\r\n         * then this module's metadata provider is assigned to the object.\r\n         */\r\n        function GetMetadataProvider(O: object, P: string | symbol | undefined, Create: boolean): MetadataProvider | undefined {\r\n            const registeredProvider = metadataRegistry.getProvider(O, P);\r\n            if (!IsUndefined(registeredProvider)) {\r\n                return registeredProvider;\r\n            }\r\n            if (Create) {\r\n                if (metadataRegistry.setProvider(O, P, metadataProvider)) {\r\n                    return metadataProvider;\r\n                }\r\n                throw new Error(\"Illegal state.\");\r\n            }\r\n            return undefined;\r\n        }\r\n    });\r\n}\r\n"
        },
        {
          "name": "ReflectNoConflict.ts",
          "type": "blob",
          "size": 63.0341796875,
          "content": "/*! *****************************************************************************\r\nCopyright (C) Microsoft. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\n// Metadata Proposal\r\n// https://rbuckton.github.io/reflect-metadata/\r\n\r\ntype MemberDecorator = (target: Object, propertyKey: string | symbol, descriptor?: PropertyDescriptor) => PropertyDescriptor | void;\r\n\r\n// feature test for Symbol support\r\nconst supportsSymbol = typeof Symbol === \"function\";\r\nconst toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : fail(\"Symbol.toPrimitive not found.\");\r\nconst iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : fail(\"Symbol.iterator not found.\");\r\n\r\n// Load global or shim versions of Map, Set, and WeakMap\r\nconst functionPrototype = Object.getPrototypeOf(Function);\r\nconst _Map: typeof Map = typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : fail(\"A valid Map constructor could not be found.\");\r\nconst _Set: typeof Set = typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : fail(\"A valid Set constructor could not be found.\");\r\nconst _WeakMap: typeof WeakMap = typeof WeakMap === \"function\" ? WeakMap : fail(\"A valid WeakMap constructor could not be found.\");\r\nconst registrySymbol = supportsSymbol ? Symbol.for(\"@reflect-metadata:registry\") : undefined;\r\nconst metadataRegistry = GetOrCreateMetadataRegistry();\r\nconst metadataProvider = CreateMetadataProvider(metadataRegistry);\r\n\r\n/**\r\n * Applies a set of decorators to a target object.\r\n * @param decorators An array of decorators.\r\n * @param target The target object.\r\n * @returns The result of applying the provided decorators.\r\n * @remarks Decorators are applied in reverse order of their positions in the array.\r\n * @example\r\n *\r\n *     class Example { }\r\n *\r\n *     // constructor\r\n *     Example = Reflect.decorate(decoratorsArray, Example);\r\n *\r\n */\r\nexport function decorate(decorators: ClassDecorator[], target: Function): Function;\r\n\r\n/**\r\n * Applies a set of decorators to a property of a target object.\r\n * @param decorators An array of decorators.\r\n * @param target The target object.\r\n * @param propertyKey The property key to decorate.\r\n * @param attributes A property descriptor.\r\n * @remarks Decorators are applied in reverse order.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod() { }\r\n *         method() { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     Object.defineProperty(Example, \"staticMethod\",\r\n *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\r\n *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\r\n *\r\n *     // method (on prototype)\r\n *     Object.defineProperty(Example.prototype, \"method\",\r\n *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\r\n *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\r\n *\r\n */\r\nexport function decorate(decorators: (PropertyDecorator | MethodDecorator)[], target: any, propertyKey: string | symbol, attributes?: PropertyDescriptor | null): PropertyDescriptor | undefined;\r\n\r\n/**\r\n * Applies a set of decorators to a property of a target object.\r\n * @param decorators An array of decorators.\r\n * @param target The target object.\r\n * @param propertyKey The property key to decorate.\r\n * @param attributes A property descriptor.\r\n * @remarks Decorators are applied in reverse order.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod() { }\r\n *         method() { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     Object.defineProperty(Example, \"staticMethod\",\r\n *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\r\n *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\r\n *\r\n *     // method (on prototype)\r\n *     Object.defineProperty(Example.prototype, \"method\",\r\n *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\r\n *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\r\n *\r\n */\r\nexport function decorate(decorators: (PropertyDecorator | MethodDecorator)[], target: any, propertyKey: string | symbol, attributes: PropertyDescriptor): PropertyDescriptor;\r\n\r\n/**\r\n * Applies a set of decorators to a property of a target object.\r\n * @param decorators An array of decorators.\r\n * @param target The target object.\r\n * @param propertyKey (Optional) The property key to decorate.\r\n * @param attributes (Optional) The property descriptor for the target key.\r\n * @remarks Decorators are applied in reverse order.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         constructor(p) { }\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // constructor\r\n *     Example = Reflect.decorate(decoratorsArray, Example);\r\n *\r\n *     // property (on constructor)\r\n *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     Object.defineProperty(Example, \"staticMethod\",\r\n *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\r\n *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\r\n *\r\n *     // method (on prototype)\r\n *     Object.defineProperty(Example.prototype, \"method\",\r\n *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\r\n *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\r\n *\r\n */\r\nexport function decorate(decorators: (ClassDecorator | MemberDecorator)[], target: any, propertyKey?: string | symbol, attributes?: PropertyDescriptor | null): PropertyDescriptor | Function | undefined {\r\n    if (!IsUndefined(propertyKey)) {\r\n        if (!IsArray(decorators)) throw new TypeError();\r\n        if (!IsObject(target)) throw new TypeError();\r\n        if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes)) throw new TypeError();\r\n        if (IsNull(attributes)) attributes = undefined;\r\n        propertyKey = ToPropertyKey(propertyKey);\r\n        return DecorateProperty(<MemberDecorator[]>decorators, target, propertyKey, attributes);\r\n    }\r\n    else {\r\n        if (!IsArray(decorators)) throw new TypeError();\r\n        if (!IsConstructor(target)) throw new TypeError();\r\n        return DecorateConstructor(<ClassDecorator[]>decorators, <Function>target);\r\n    }\r\n}\r\n\r\n// 4.1.2 Reflect.metadata(metadataKey, metadataValue)\r\n// https://rbuckton.github.io/reflect-metadata/#reflect.metadata\r\n\r\n/**\r\n * A default metadata decorator factory that can be used on a class, class member, or parameter.\r\n * @param metadataKey The key for the metadata entry.\r\n * @param metadataValue The value for the metadata entry.\r\n * @returns A decorator function.\r\n * @remarks\r\n * If `metadataKey` is already defined for the target and target key, the\r\n * metadataValue for that key will be overwritten.\r\n * @example\r\n *\r\n *     // constructor\r\n *     @Reflect.metadata(key, value)\r\n *     class Example {\r\n *     }\r\n *\r\n *     // property (on constructor, TypeScript only)\r\n *     class Example {\r\n *         @Reflect.metadata(key, value)\r\n *         static staticProperty;\r\n *     }\r\n *\r\n *     // property (on prototype, TypeScript only)\r\n *     class Example {\r\n *         @Reflect.metadata(key, value)\r\n *         property;\r\n *     }\r\n *\r\n *     // method (on constructor)\r\n *     class Example {\r\n *         @Reflect.metadata(key, value)\r\n *         static staticMethod() { }\r\n *     }\r\n *\r\n *     // method (on prototype)\r\n *     class Example {\r\n *         @Reflect.metadata(key, value)\r\n *         method() { }\r\n *     }\r\n *\r\n */\r\nexport function metadata(metadataKey: any, metadataValue: any): { (target: Function): void; (target: any, propertyKey: string | symbol): void; } {\r\n    if (typeof Reflect !== \"undefined\" && typeof Reflect.metadata === \"function\" && Reflect.metadata !== metadata) {\r\n        return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n    function decorator(target: Function): void;\r\n    function decorator(target: any, propertyKey: string | symbol): void;\r\n    function decorator(target: any, propertyKey?: string | symbol): void {\r\n        if (!IsObject(target)) throw new TypeError();\r\n        if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey)) throw new TypeError();\r\n        OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\r\n    }\r\n    return decorator;\r\n}\r\n\r\n// 4.1.3 Reflect.defineMetadata(metadataKey, metadataValue, target [, propertyKey])\r\n// https://rbuckton.github.io/reflect-metadata/#reflect.definemetadata\r\n\r\n/**\r\n * Define a unique metadata entry on the target.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param metadataValue A value that contains attached metadata.\r\n * @param target The target object on which to define metadata.\r\n * @example\r\n *\r\n *     class Example {\r\n *     }\r\n *\r\n *     // constructor\r\n *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\r\n *\r\n *     // decorator factory as metadata-producing annotation.\r\n *     function MyAnnotation(options): ClassDecorator {\r\n *         return target => Reflect.defineMetadata(\"custom:annotation\", options, target);\r\n *     }\r\n *\r\n */\r\nexport function defineMetadata(metadataKey: any, metadataValue: any, target: any): void;\r\n\r\n/**\r\n * Define a unique metadata entry on the target.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param metadataValue A value that contains attached metadata.\r\n * @param target The target object on which to define metadata.\r\n * @param propertyKey The property key for the target.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     Reflect.defineMetadata(\"custom:annotation\", Number, Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     Reflect.defineMetadata(\"custom:annotation\", Number, Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     Reflect.defineMetadata(\"custom:annotation\", Number, Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     Reflect.defineMetadata(\"custom:annotation\", Number, Example.prototype, \"method\");\r\n *\r\n *     // decorator factory as metadata-producing annotation.\r\n *     function MyAnnotation(options): PropertyDecorator {\r\n *         return (target, key) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n *     }\r\n *\r\n */\r\nexport function defineMetadata(metadataKey: any, metadataValue: any, target: any, propertyKey: string | symbol): void;\r\n\r\n/**\r\n * Define a unique metadata entry on the target.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param metadataValue A value that contains attached metadata.\r\n * @param target The target object on which to define metadata.\r\n * @param propertyKey (Optional) The property key for the target.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         constructor(p) { }\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // constructor\r\n *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\r\n *\r\n *     // property (on constructor)\r\n *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\r\n *\r\n *     // decorator factory as metadata-producing annotation.\r\n *     function MyAnnotation(options): Decorator {\r\n *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n *     }\r\n *\r\n */\r\nexport function defineMetadata(metadataKey: any, metadataValue: any, target: any, propertyKey?: string | symbol): void {\r\n    if (!IsObject(target)) throw new TypeError();\r\n    if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n    return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\r\n}\r\n\r\n// 4.1.4 Reflect.hasMetadata(metadataKey, target [, propertyKey])\r\n// https://rbuckton.github.io/reflect-metadata/#reflect.hasmetadata\r\n\r\n/**\r\n * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n * @example\r\n *\r\n *     class Example {\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\r\n *\r\n */\r\nexport function hasMetadata(metadataKey: any, target: any): boolean;\r\n\r\n/**\r\n * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey The property key for the target.\r\n * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n *\r\n */\r\nexport function hasMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n/**\r\n * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey (Optional) The property key for the target.\r\n * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         constructor(p) { }\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n *\r\n */\r\nexport function hasMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): boolean {\r\n    if (!IsObject(target)) throw new TypeError();\r\n    if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n    return OrdinaryHasMetadata(metadataKey, target, propertyKey);\r\n}\r\n\r\n// 4.1.5 Reflect.hasOwnMetadata(metadataKey, target [, propertyKey])\r\n// https://rbuckton.github.io/reflect-metadata/#reflect-hasownmetadata\r\n\r\n/**\r\n * Gets a value indicating whether the target object has the provided metadata key defined.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n * @example\r\n *\r\n *     class Example {\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\r\n *\r\n */\r\nexport function hasOwnMetadata(metadataKey: any, target: any): boolean;\r\n\r\n/**\r\n * Gets a value indicating whether the target object has the provided metadata key defined.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey The property key for the target.\r\n * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n *\r\n */\r\nexport function hasOwnMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n/**\r\n * Gets a value indicating whether the target object has the provided metadata key defined.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey (Optional) The property key for the target.\r\n * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         constructor(p) { }\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n *\r\n */\r\nexport function hasOwnMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): boolean {\r\n    if (!IsObject(target)) throw new TypeError();\r\n    if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n    return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\r\n}\r\n\r\n// 4.1.6 Reflect.getMetadata(metadataKey, target [, propertyKey])\r\n// https://rbuckton.github.io/reflect-metadata/#reflect-getmetadata\r\n\r\n/**\r\n * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n * @example\r\n *\r\n *     class Example {\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.getMetadata(\"custom:annotation\", Example);\r\n *\r\n */\r\nexport function getMetadata(metadataKey: any, target: any): any;\r\n\r\n/**\r\n * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey The property key for the target.\r\n * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n *\r\n */\r\nexport function getMetadata(metadataKey: any, target: any, propertyKey: string | symbol): any;\r\n\r\n/**\r\n * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey (Optional) The property key for the target.\r\n * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         constructor(p) { }\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.getMetadata(\"custom:annotation\", Example);\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n *\r\n */\r\nexport function getMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): any {\r\n    if (!IsObject(target)) throw new TypeError();\r\n    if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n    return OrdinaryGetMetadata(metadataKey, target, propertyKey);\r\n}\r\n\r\n// 4.1.7 Reflect.getOwnMetadata(metadataKey, target [, propertyKey])\r\n// https://rbuckton.github.io/reflect-metadata/#reflect-getownmetadata\r\n\r\n/**\r\n * Gets the metadata value for the provided metadata key on the target object.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n * @example\r\n *\r\n *     class Example {\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\r\n *\r\n */\r\nexport function getOwnMetadata(metadataKey: any, target: any): any;\r\n\r\n/**\r\n * Gets the metadata value for the provided metadata key on the target object.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey The property key for the target.\r\n * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n *\r\n */\r\nexport function getOwnMetadata(metadataKey: any, target: any, propertyKey: string | symbol): any;\r\n\r\n/**\r\n * Gets the metadata value for the provided metadata key on the target object.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey (Optional) The property key for the target.\r\n * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         constructor(p) { }\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n *\r\n */\r\nexport function getOwnMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): any {\r\n    if (!IsObject(target)) throw new TypeError();\r\n    if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n    return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\r\n}\r\n\r\n// 4.1.8 Reflect.getMetadataKeys(target [, propertyKey])\r\n// https://rbuckton.github.io/reflect-metadata/#reflect-getmetadatakeys\r\n\r\n/**\r\n * Gets the metadata keys defined on the target object or its prototype chain.\r\n * @param target The target object on which the metadata is defined.\r\n * @returns An array of unique metadata keys.\r\n * @example\r\n *\r\n *     class Example {\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.getMetadataKeys(Example);\r\n *\r\n */\r\nexport function getMetadataKeys(target: any): any[];\r\n\r\n/**\r\n * Gets the metadata keys defined on the target object or its prototype chain.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey The property key for the target.\r\n * @returns An array of unique metadata keys.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\r\n *\r\n */\r\nexport function getMetadataKeys(target: any, propertyKey: string | symbol): any[];\r\n\r\n/**\r\n * Gets the metadata keys defined on the target object or its prototype chain.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey (Optional) The property key for the target.\r\n * @returns An array of unique metadata keys.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         constructor(p) { }\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.getMetadataKeys(Example);\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\r\n *\r\n */\r\nexport function getMetadataKeys(target: any, propertyKey?: string | symbol): any[] {\r\n    if (!IsObject(target)) throw new TypeError();\r\n    if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n    return OrdinaryMetadataKeys(target, propertyKey);\r\n}\r\n\r\n// 4.1.9 Reflect.getOwnMetadataKeys(target [, propertyKey])\r\n// https://rbuckton.github.io/reflect-metadata/#reflect-getownmetadata\r\n\r\n/**\r\n * Gets the unique metadata keys defined on the target object.\r\n * @param target The target object on which the metadata is defined.\r\n * @returns An array of unique metadata keys.\r\n * @example\r\n *\r\n *     class Example {\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.getOwnMetadataKeys(Example);\r\n *\r\n */\r\nexport function getOwnMetadataKeys(target: any): any[];\r\n\r\n/**\r\n * Gets the unique metadata keys defined on the target object.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey The property key for the target.\r\n * @returns An array of unique metadata keys.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\r\n *\r\n */\r\nexport function getOwnMetadataKeys(target: any, propertyKey: string | symbol): any[];\r\n\r\n/**\r\n * Gets the unique metadata keys defined on the target object.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey (Optional) The property key for the target.\r\n * @returns An array of unique metadata keys.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         constructor(p) { }\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.getOwnMetadataKeys(Example);\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\r\n *\r\n */\r\nexport function getOwnMetadataKeys(target: any, propertyKey?: string | symbol): any[] {\r\n    if (!IsObject(target)) throw new TypeError();\r\n    if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n    return OrdinaryOwnMetadataKeys(target, propertyKey);\r\n}\r\n\r\n// 4.1.10 Reflect.deleteMetadata(metadataKey, target [, propertyKey])\r\n// https://rbuckton.github.io/reflect-metadata/#reflect-deletemetadata\r\n\r\n/**\r\n * Deletes the metadata entry from the target object with the provided key.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n * @example\r\n *\r\n *     class Example {\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\r\n *\r\n */\r\nexport function deleteMetadata(metadataKey: any, target: any): boolean;\r\n\r\n/**\r\n * Deletes the metadata entry from the target object with the provided key.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey The property key for the target.\r\n * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n *\r\n */\r\nexport function deleteMetadata(metadataKey: any, target: any, propertyKey: string | symbol): boolean;\r\n\r\n/**\r\n * Deletes the metadata entry from the target object with the provided key.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey (Optional) The property key for the target.\r\n * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         constructor(p) { }\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n *\r\n */\r\nexport function deleteMetadata(metadataKey: any, target: any, propertyKey?: string | symbol): boolean {\r\n    if (!IsObject(target)) throw new TypeError();\r\n    if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\r\n    const provider = GetMetadataProvider(target, propertyKey, /*Create*/ false);\r\n    if (IsUndefined(provider)) return false;\r\n    return provider.OrdinaryDeleteMetadata(metadataKey, target, propertyKey);\r\n}\r\n\r\nfunction DecorateConstructor(decorators: ClassDecorator[], target: Function): Function {\r\n    for (let i = decorators.length - 1; i >= 0; --i) {\r\n        const decorator = decorators[i];\r\n        const decorated = decorator(target);\r\n        if (!IsUndefined(decorated) && !IsNull(decorated)) {\r\n            if (!IsConstructor(decorated)) throw new TypeError();\r\n            target = <Function>decorated;\r\n        }\r\n    }\r\n    return target;\r\n}\r\n\r\nfunction DecorateProperty(decorators: MemberDecorator[], target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor | undefined): PropertyDescriptor | undefined {\r\n    for (let i = decorators.length - 1; i >= 0; --i) {\r\n        const decorator = decorators[i];\r\n        const decorated = decorator(target, propertyKey, descriptor);\r\n        if (!IsUndefined(decorated) && !IsNull(decorated)) {\r\n            if (!IsObject(decorated)) throw new TypeError();\r\n            descriptor = <PropertyDescriptor>decorated;\r\n        }\r\n    }\r\n    return descriptor;\r\n}\r\n\r\n// 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\r\n// https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\r\nfunction OrdinaryHasMetadata(MetadataKey: any, O: any, P: string | symbol | undefined): boolean {\r\n    const hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n    if (hasOwn) return true;\r\n    const parent = OrdinaryGetPrototypeOf(O);\r\n    if (!IsNull(parent)) return OrdinaryHasMetadata(MetadataKey, parent, P);\r\n    return false;\r\n}\r\n\r\n// 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\r\n// https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\r\nfunction OrdinaryHasOwnMetadata(MetadataKey: any, O: any, P: string | symbol | undefined): boolean {\r\n    const provider = GetMetadataProvider(O, P, /*Create*/ false);\r\n    if (IsUndefined(provider)) return false;\r\n    return ToBoolean(provider.OrdinaryHasOwnMetadata(MetadataKey, O, P));\r\n}\r\n\r\n// 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\r\n// https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\r\nfunction OrdinaryGetMetadata(MetadataKey: any, O: any, P: string | symbol | undefined): any {\r\n    const hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n    if (hasOwn) return OrdinaryGetOwnMetadata(MetadataKey, O, P);\r\n    const parent = OrdinaryGetPrototypeOf(O);\r\n    if (!IsNull(parent)) return OrdinaryGetMetadata(MetadataKey, parent, P);\r\n    return undefined;\r\n}\r\n\r\n// 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\r\n// https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\r\nfunction OrdinaryGetOwnMetadata(MetadataKey: any, O: any, P: string | symbol | undefined): any {\r\n    const provider = GetMetadataProvider(O, P, /*Create*/ false);\r\n    if (IsUndefined(provider)) return;\r\n    return provider.OrdinaryGetOwnMetadata(MetadataKey, O, P);\r\n}\r\n\r\n// 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\r\n// https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\r\nfunction OrdinaryDefineOwnMetadata(MetadataKey: any, MetadataValue: any, O: any, P: string | symbol | undefined): void {\r\n    const provider = GetMetadataProvider(O, P, /*Create*/ true);\r\n    provider.OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P);\r\n}\r\n\r\n// 3.1.6.1 OrdinaryMetadataKeys(O, P)\r\n// https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\r\nfunction OrdinaryMetadataKeys(O: any, P: string | symbol | undefined): any[] {\r\n    const ownKeys = OrdinaryOwnMetadataKeys(O, P);\r\n    const parent = OrdinaryGetPrototypeOf(O);\r\n    if (parent === null) return ownKeys;\r\n    const parentKeys = OrdinaryMetadataKeys(parent, P);\r\n    if (parentKeys.length <= 0) return ownKeys;\r\n    if (ownKeys.length <= 0) return parentKeys;\r\n    const set = new _Set<any>();\r\n    const keys: any[] = [];\r\n    for (const key of ownKeys) {\r\n        const hasKey = set.has(key);\r\n        if (!hasKey) {\r\n            set.add(key);\r\n            keys.push(key);\r\n        }\r\n    }\r\n    for (const key of parentKeys) {\r\n        const hasKey = set.has(key);\r\n        if (!hasKey) {\r\n            set.add(key);\r\n            keys.push(key);\r\n        }\r\n    }\r\n    return keys;\r\n}\r\n\r\n// 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\r\n// https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\r\nfunction OrdinaryOwnMetadataKeys(O: any, P: string | symbol | undefined): any[] {\r\n    const provider = GetMetadataProvider(O, P, /*create*/ false);\r\n    if (!provider) {\r\n        return [];\r\n    }\r\n    return provider.OrdinaryOwnMetadataKeys(O, P);\r\n}\r\n\r\n// 6 ECMAScript Data Types and Values\r\n// https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\r\nfunction Type(x: any): Tag {\r\n    if (x === null) return Tag.Null;\r\n    switch (typeof x) {\r\n        case \"undefined\": return Tag.Undefined;\r\n        case \"boolean\": return Tag.Boolean;\r\n        case \"string\": return Tag.String;\r\n        case \"symbol\": return Tag.Symbol;\r\n        case \"number\": return Tag.Number;\r\n        case \"object\": return x === null ? Tag.Null : Tag.Object;\r\n        default: return Tag.Object;\r\n    }\r\n}\r\n\r\n// 6.1 ECMAScript Language Types\r\n// https://tc39.github.io/ecma262/#sec-ecmascript-language-types\r\nconst enum Tag {\r\n    Undefined,\r\n    Null,\r\n    Boolean,\r\n    String,\r\n    Symbol,\r\n    Number,\r\n    Object\r\n}\r\n\r\n// 6.1.1 The Undefined Type\r\n// https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\r\nfunction IsUndefined(x: any): x is undefined {\r\n    return x === undefined;\r\n}\r\n\r\n// 6.1.2 The Null Type\r\n// https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\r\nfunction IsNull(x: any): x is null {\r\n    return x === null;\r\n}\r\n\r\n// 6.1.5 The Symbol Type\r\n// https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\r\nfunction IsSymbol(x: any): x is symbol {\r\n    return typeof x === \"symbol\";\r\n}\r\n\r\n// 6.1.7 The Object Type\r\n// https://tc39.github.io/ecma262/#sec-object-type\r\nfunction IsObject<T>(x: T | undefined | null | boolean | string | symbol | number): x is T {\r\n    return typeof x === \"object\" ? x !== null : typeof x === \"function\";\r\n}\r\n\r\n// 7.1 Type Conversion\r\n// https://tc39.github.io/ecma262/#sec-type-conversion\r\n\r\n// 7.1.1 ToPrimitive(input [, PreferredType])\r\n// https://tc39.github.io/ecma262/#sec-toprimitive\r\nfunction ToPrimitive(input: any, PreferredType?: Tag): undefined | null | boolean | string | symbol | number {\r\n    switch (Type(input)) {\r\n        case Tag.Undefined: return input;\r\n        case Tag.Null: return input;\r\n        case Tag.Boolean: return input;\r\n        case Tag.String: return input;\r\n        case Tag.Symbol: return input;\r\n        case Tag.Number: return input;\r\n    }\r\n    const hint: \"string\" | \"number\" | \"default\" = PreferredType === Tag.String ? \"string\" : PreferredType === Tag.Number ? \"number\" : \"default\";\r\n    const exoticToPrim = GetMethod(input, toPrimitiveSymbol);\r\n    if (exoticToPrim !== undefined) {\r\n        const result = exoticToPrim.call(input, hint);\r\n        if (IsObject(result)) throw new TypeError();\r\n        return result;\r\n    }\r\n    return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\r\n}\r\n\r\n// 7.1.1.1 OrdinaryToPrimitive(O, hint)\r\n// https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\r\nfunction OrdinaryToPrimitive(O: any, hint: \"string\" | \"number\"): undefined | null | boolean | string | symbol | number {\r\n    if (hint === \"string\") {\r\n        const toString = O.toString;\r\n        if (IsCallable(toString)) {\r\n            const result = toString.call(O);\r\n            if (!IsObject(result)) return result;\r\n        }\r\n        const valueOf = O.valueOf;\r\n        if (IsCallable(valueOf)) {\r\n            const result = valueOf.call(O);\r\n            if (!IsObject(result)) return result;\r\n        }\r\n    }\r\n    else {\r\n        const valueOf = O.valueOf;\r\n        if (IsCallable(valueOf)) {\r\n            const result = valueOf.call(O);\r\n            if (!IsObject(result)) return result;\r\n        }\r\n        const toString = O.toString;\r\n        if (IsCallable(toString)) {\r\n            const result = toString.call(O);\r\n            if (!IsObject(result)) return result;\r\n        }\r\n    }\r\n    throw new TypeError();\r\n}\r\n\r\n// 7.1.2 ToBoolean(argument)\r\n// https://tc39.github.io/ecma262/2016/#sec-toboolean\r\nfunction ToBoolean(argument: any): boolean {\r\n    return !!argument;\r\n}\r\n\r\n// 7.1.12 ToString(argument)\r\n// https://tc39.github.io/ecma262/#sec-tostring\r\nfunction ToString(argument: any): string {\r\n    return \"\" + argument;\r\n}\r\n\r\n// 7.1.14 ToPropertyKey(argument)\r\n// https://tc39.github.io/ecma262/#sec-topropertykey\r\nfunction ToPropertyKey(argument: any): string | symbol {\r\n    const key = ToPrimitive(argument, Tag.String);\r\n    if (IsSymbol(key)) return key;\r\n    return ToString(key);\r\n}\r\n\r\n// 7.2 Testing and Comparison Operations\r\n// https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\r\n\r\n// 7.2.2 IsArray(argument)\r\n// https://tc39.github.io/ecma262/#sec-isarray\r\nfunction IsArray(argument: any): argument is any[] {\r\n    return Array.isArray\r\n        ? Array.isArray(argument)\r\n        : argument instanceof Object\r\n            ? argument instanceof Array\r\n            : Object.prototype.toString.call(argument) === \"[object Array]\";\r\n}\r\n\r\n// 7.2.3 IsCallable(argument)\r\n// https://tc39.github.io/ecma262/#sec-iscallable\r\nfunction IsCallable(argument: any): argument is Function {\r\n    // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\r\n    return typeof argument === \"function\";\r\n}\r\n\r\n// 7.2.4 IsConstructor(argument)\r\n// https://tc39.github.io/ecma262/#sec-isconstructor\r\nfunction IsConstructor(argument: any): argument is Function {\r\n    // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\r\n    return typeof argument === \"function\";\r\n}\r\n\r\n// 7.2.7 IsPropertyKey(argument)\r\n// https://tc39.github.io/ecma262/#sec-ispropertykey\r\nfunction IsPropertyKey(argument: any): argument is string | symbol {\r\n    switch (Type(argument)) {\r\n        case Tag.String: return true;\r\n        case Tag.Symbol: return true;\r\n        default: return false;\r\n    }\r\n}\r\n\r\n// 7.3 Operations on Objects\r\n// https://tc39.github.io/ecma262/#sec-operations-on-objects\r\n\r\n// 7.3.9 GetMethod(V, P)\r\n// https://tc39.github.io/ecma262/#sec-getmethod\r\nfunction GetMethod(V: any, P: any): Function | undefined {\r\n    const func = V[P];\r\n    if (func === undefined || func === null) return undefined;\r\n    if (!IsCallable(func)) throw new TypeError();\r\n    return func;\r\n}\r\n\r\n// 7.4 Operations on Iterator Objects\r\n// https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\r\n\r\nfunction GetIterator<T>(obj: Iterable<T>): Iterator<T> {\r\n    const method = GetMethod(obj, iteratorSymbol);\r\n    if (!IsCallable(method)) throw new TypeError(); // from Call\r\n    const iterator = method.call(obj);\r\n    if (!IsObject(iterator)) throw new TypeError();\r\n    return iterator;\r\n}\r\n\r\n// 7.4.4 IteratorValue(iterResult)\r\n// https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\r\nfunction IteratorValue<T>(iterResult: __IteratorResult<T>): T {\r\n    return iterResult.value;\r\n}\r\n\r\n// 7.4.5 IteratorStep(iterator)\r\n// https://tc39.github.io/ecma262/#sec-iteratorstep\r\nfunction IteratorStep<T>(iterator: Iterator<T>): __IteratorResult<T> | false {\r\n    const result = iterator.next();\r\n    return result.done ? false : result;\r\n}\r\n\r\n// 7.4.6 IteratorClose(iterator, completion)\r\n// https://tc39.github.io/ecma262/#sec-iteratorclose\r\nfunction IteratorClose<T>(iterator: Iterator<T>) {\r\n    const f = iterator[\"return\"];\r\n    if (f) f.call(iterator);\r\n}\r\n\r\n// 9.1 Ordinary Object Internal Methods and Internal Slots\r\n// https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\r\n\r\n// 9.1.1.1 OrdinaryGetPrototypeOf(O)\r\n// https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\r\nfunction OrdinaryGetPrototypeOf(O: any): any {\r\n    const proto = Object.getPrototypeOf(O);\r\n    if (typeof O !== \"function\" || O === functionPrototype) return proto;\r\n\r\n    // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\r\n    // Try to determine the superclass constructor. Compatible implementations\r\n    // must either set __proto__ on a subclass constructor to the superclass constructor,\r\n    // or ensure each class has a valid `constructor` property on its prototype that\r\n    // points back to the constructor.\r\n\r\n    // If this is not the same as Function.[[Prototype]], then this is definately inherited.\r\n    // This is the case when in ES6 or when using __proto__ in a compatible browser.\r\n    if (proto !== functionPrototype) return proto;\r\n\r\n    // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\r\n    const prototype = O.prototype;\r\n    const prototypeProto = prototype && Object.getPrototypeOf(prototype);\r\n    if (prototypeProto == null || prototypeProto === Object.prototype) return proto;\r\n\r\n    // If the constructor was not a function, then we cannot determine the heritage.\r\n    const constructor = prototypeProto.constructor;\r\n    if (typeof constructor !== \"function\") return proto;\r\n\r\n    // If we have some kind of self-reference, then we cannot determine the heritage.\r\n    if (constructor === O) return proto;\r\n\r\n    // we have a pretty good guess at the heritage.\r\n    return constructor;\r\n}\r\n\r\nfunction fail(e: any): never {\r\n    throw e;\r\n}\r\n\r\n// Global metadata registry\r\n// - Allows `import \"reflect-metadata\"` and `import \"reflect-metadata/no-conflict\"` to interoperate.\r\n// - Uses isolated metadata if `Reflect` is frozen before the registry can be installed.\r\n\r\n/**\r\n * Creates a registry used to allow multiple `reflect-metadata` providers.\r\n */\r\nfunction CreateMetadataRegistry(): MetadataRegistry {\r\n    let fallback: MetadataProvider | undefined;\r\n    if (!IsUndefined(registrySymbol) &&\r\n        typeof Reflect !== \"undefined\" &&\r\n        !(registrySymbol in Reflect) &&\r\n        typeof Reflect.defineMetadata === \"function\") {\r\n        // interoperate with older version of `reflect-metadata` that did not support a registry.\r\n        fallback = CreateFallbackProvider(Reflect);\r\n    }\r\n\r\n    let first: MetadataProvider | undefined;\r\n    let second: MetadataProvider | undefined;\r\n    let rest: Set<MetadataProvider> | undefined;\r\n    const targetProviderMap = new _WeakMap<object, Map<string | symbol | undefined, MetadataProvider>>();\r\n    const registry: MetadataRegistry = {\r\n        registerProvider,\r\n        getProvider,\r\n        setProvider,\r\n    };\r\n    return registry;\r\n\r\n    function registerProvider(provider: MetadataProvider) {\r\n        if (!Object.isExtensible(registry)) {\r\n            throw new Error(\"Cannot add provider to a frozen registry.\");\r\n        }\r\n        switch (true) {\r\n            case fallback === provider: break;\r\n            case IsUndefined(first): first = provider; break;\r\n            case first === provider: break;\r\n            case IsUndefined(second): second = provider; break;\r\n            case second === provider: break;\r\n            default:\r\n                if (rest === undefined) rest = new _Set();\r\n                rest.add(provider);\r\n                break;\r\n        }\r\n    }\r\n\r\n    function getProviderNoCache(O: object, P: string | symbol | undefined) {\r\n        if (!IsUndefined(first)) {\r\n            if (first.isProviderFor(O, P)) return first;\r\n            if (!IsUndefined(second)) {\r\n                if (second.isProviderFor(O, P)) return first;\r\n                if (!IsUndefined(rest)) {\r\n                    const iterator = GetIterator(rest);\r\n                    while (true) {\r\n                        const next = IteratorStep(iterator);\r\n                        if (!next) {\r\n                            return undefined;\r\n                        }\r\n                        const provider = IteratorValue(next);\r\n                        if (provider.isProviderFor(O, P)) {\r\n                            IteratorClose(iterator);\r\n                            return provider;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!IsUndefined(fallback) && fallback.isProviderFor(O, P)) {\r\n            return fallback;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    function getProvider(O: object, P: string | symbol | undefined) {\r\n        let providerMap = targetProviderMap.get(O);\r\n        let provider: MetadataProvider | undefined;\r\n        if (!IsUndefined(providerMap)) {\r\n            provider = providerMap.get(P);\r\n        }\r\n        if (!IsUndefined(provider)) {\r\n            return provider;\r\n        }\r\n\r\n        provider = getProviderNoCache(O, P);\r\n        if (!IsUndefined(provider)) {\r\n            if (IsUndefined(providerMap)) {\r\n                providerMap = new _Map();\r\n                targetProviderMap.set(O, providerMap);\r\n            }\r\n            providerMap.set(P, provider);\r\n        }\r\n        return provider;\r\n    }\r\n\r\n    function hasProvider(provider: MetadataProvider) {\r\n        if (IsUndefined(provider)) throw new TypeError();\r\n        return fallback === provider || first === provider || second === provider || !IsUndefined(rest) && rest.has(provider);\r\n    }\r\n\r\n    function setProvider(O: object, P: string | symbol | undefined, provider: MetadataProvider) {\r\n        if (!hasProvider(provider)) {\r\n            throw new Error(\"Metadata provider not registered.\");\r\n        }\r\n        const existingProvider = getProvider(O, P);\r\n        if (existingProvider !== provider) {\r\n            if (!IsUndefined(existingProvider)) {\r\n                return false;\r\n            }\r\n            let providerMap = targetProviderMap.get(O);\r\n            if (IsUndefined(providerMap)) {\r\n                providerMap = new _Map();\r\n                targetProviderMap.set(O, providerMap);\r\n            }\r\n            providerMap.set(P, provider);\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * Gets or creates the shared registry of metadata providers.\r\n */\r\nfunction GetOrCreateMetadataRegistry(): MetadataRegistry {\r\n    let metadataRegistry: MetadataRegistry | undefined;\r\n    if (!IsUndefined(registrySymbol) && IsObject(Reflect) && Object.isExtensible(Reflect)) {\r\n        metadataRegistry = (Reflect as any)[registrySymbol] as MetadataRegistry | undefined;\r\n    }\r\n    if (IsUndefined(metadataRegistry)) {\r\n        metadataRegistry = CreateMetadataRegistry();\r\n    }\r\n    if (!IsUndefined(registrySymbol) && IsObject(Reflect) && Object.isExtensible(Reflect)) {\r\n        Object.defineProperty(Reflect, registrySymbol, {\r\n            enumerable: false,\r\n            configurable: false,\r\n            writable: false,\r\n            value: metadataRegistry\r\n        });\r\n    }\r\n    return metadataRegistry;\r\n}\r\n\r\nfunction CreateMetadataProvider(registry: MetadataRegistry): MetadataProvider {\r\n    // [[Metadata]] internal slot\r\n    // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\r\n    const metadata = new _WeakMap<any, Map<string | symbol | undefined, Map<any, any>>>();\r\n    const provider: MetadataProvider = {\r\n        isProviderFor(O, P) {\r\n            const targetMetadata = metadata.get(O);\r\n            if (IsUndefined(targetMetadata)) return false;\r\n            return targetMetadata.has(P);\r\n        },\r\n        OrdinaryDefineOwnMetadata: OrdinaryDefineOwnMetadata,\r\n        OrdinaryHasOwnMetadata: OrdinaryHasOwnMetadata,\r\n        OrdinaryGetOwnMetadata: OrdinaryGetOwnMetadata,\r\n        OrdinaryOwnMetadataKeys: OrdinaryOwnMetadataKeys,\r\n        OrdinaryDeleteMetadata: OrdinaryDeleteMetadata,\r\n    };\r\n    metadataRegistry.registerProvider(provider);\r\n    return provider;\r\n\r\n    // 2.1.1 GetOrCreateMetadataMap(O, P, Create)\r\n    // https://rbuckton.github.io/reflect-metadata/#getorcreatemetadatamap\r\n    function GetOrCreateMetadataMap(O: object, P: string | symbol | undefined, Create: true): Map<any, any>;\r\n    function GetOrCreateMetadataMap(O: object, P: string | symbol | undefined, Create: false): Map<any, any> | undefined;\r\n    function GetOrCreateMetadataMap(O: object, P: string | symbol | undefined, Create: boolean) {\r\n        let targetMetadata = metadata.get(O);\r\n        let createdTargetMetadata = false;\r\n        if (IsUndefined(targetMetadata)) {\r\n            if (!Create) return undefined;\r\n            targetMetadata = new _Map<string | symbol | undefined, Map<any, any>>();\r\n            metadata.set(O, targetMetadata);\r\n            createdTargetMetadata = true;\r\n        }\r\n        let metadataMap = targetMetadata.get(P);\r\n        if (IsUndefined(metadataMap)) {\r\n            if (!Create) return undefined;\r\n            metadataMap = new _Map<any, any>();\r\n            targetMetadata.set(P, metadataMap);\r\n            if (!registry.setProvider(O, P, provider)) {\r\n                targetMetadata.delete(P);\r\n                if (createdTargetMetadata) {\r\n                    metadata.delete(O);\r\n                }\r\n                throw new Error(\"Wrong provider for target.\");\r\n            }\r\n        }\r\n        return metadataMap;\r\n    }\r\n\r\n    // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\r\n    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\r\n    function OrdinaryHasOwnMetadata(MetadataKey: any, O: object, P: string | symbol | undefined): boolean {\r\n        const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n        if (IsUndefined(metadataMap)) return false;\r\n        return ToBoolean(metadataMap.has(MetadataKey));\r\n    }\r\n\r\n    // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\r\n    // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\r\n    function OrdinaryGetOwnMetadata(MetadataKey: any, O: object, P: string | symbol | undefined): any {\r\n        const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n        if (IsUndefined(metadataMap)) return undefined;\r\n        return metadataMap.get(MetadataKey);\r\n    }\r\n\r\n    // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\r\n    // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\r\n    function OrdinaryDefineOwnMetadata(MetadataKey: any, MetadataValue: any, O: object, P: string | symbol | undefined): void {\r\n        const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\r\n        metadataMap.set(MetadataKey, MetadataValue);\r\n    }\r\n\r\n    // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\r\n    // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\r\n    function OrdinaryOwnMetadataKeys(O: any, P: string | symbol | undefined): any[] {\r\n        const keys: any[] = [];\r\n        const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n        if (IsUndefined(metadataMap)) return keys;\r\n        const keysObj = metadataMap.keys();\r\n        const iterator = GetIterator(keysObj);\r\n        let k = 0;\r\n        while (true) {\r\n            const next = IteratorStep(iterator);\r\n            if (!next) {\r\n                keys.length = k;\r\n                return keys;\r\n            }\r\n            const nextValue = IteratorValue(next);\r\n            try {\r\n                keys[k] = nextValue;\r\n            }\r\n            catch (e) {\r\n                try {\r\n                    IteratorClose(iterator);\r\n                }\r\n                finally {\r\n                    throw e;\r\n                }\r\n            }\r\n            k++;\r\n        }\r\n    }\r\n\r\n    function OrdinaryDeleteMetadata(MetadataKey: any, O: object, P: string | symbol | undefined): boolean {\r\n        const metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n        if (IsUndefined(metadataMap)) return false;\r\n        if (!metadataMap.delete(MetadataKey)) return false;\r\n        if (metadataMap.size === 0) {\r\n            const targetMetadata = metadata.get(O);\r\n            if (!IsUndefined(targetMetadata)) {\r\n                targetMetadata.delete(P);\r\n                if (targetMetadata.size === 0) {\r\n                    metadata.delete(targetMetadata);\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction CreateFallbackProvider(reflect: typeof Reflect): MetadataProvider {\r\n    const { defineMetadata, hasOwnMetadata, getOwnMetadata, getOwnMetadataKeys, deleteMetadata } = reflect;\r\n    const metadataOwner = new _WeakMap<object, Set<string | symbol | undefined>>();\r\n    const provider: MetadataProvider = {\r\n        isProviderFor(O, P) {\r\n            let metadataPropertySet = metadataOwner.get(O);\r\n            if (!IsUndefined(metadataPropertySet) && metadataPropertySet.has(P)) {\r\n                return true;\r\n            }\r\n            if (getOwnMetadataKeys(O, P!).length) {\r\n                if (IsUndefined(metadataPropertySet)) {\r\n                    metadataPropertySet = new _Set();\r\n                    metadataOwner.set(O, metadataPropertySet);\r\n                }\r\n                metadataPropertySet.add(P);\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        OrdinaryDefineOwnMetadata: defineMetadata,\r\n        OrdinaryHasOwnMetadata: hasOwnMetadata,\r\n        OrdinaryGetOwnMetadata: getOwnMetadata,\r\n        OrdinaryOwnMetadataKeys: getOwnMetadataKeys,\r\n        OrdinaryDeleteMetadata: deleteMetadata,\r\n    };\r\n    return provider;\r\n}\r\n\r\nfunction GetMetadataProvider(O: object, P: string | symbol | undefined, Create: true): MetadataProvider;\r\nfunction GetMetadataProvider(O: object, P: string | symbol | undefined, Create: false): MetadataProvider | undefined;\r\n/**\r\n * Gets the metadata provider for an object. If the object has no metadata provider and this is for a create operation,\r\n * then this module's metadata provider is assigned to the object.\r\n */\r\nfunction GetMetadataProvider(O: object, P: string | symbol | undefined, Create: boolean): MetadataProvider | undefined {\r\n    const registeredProvider = metadataRegistry.getProvider(O, P);\r\n    if (!IsUndefined(registeredProvider)) {\r\n        return registeredProvider;\r\n    }\r\n    if (Create) {\r\n        if (metadataRegistry.setProvider(O, P, metadataProvider)) {\r\n            return metadataProvider;\r\n        }\r\n        throw new Error(\"Illegal state.\");\r\n    }\r\n    return undefined;\r\n}\r\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "globals.d.ts",
          "type": "blob",
          "size": 3.6650390625,
          "content": "/*! *****************************************************************************\r\nCopyright (C) Microsoft. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\ninterface SymbolConstructor {\r\n    (description?: string): symbol;\r\n    for(key: string): symbol;\r\n    readonly iterator: symbol;\r\n    readonly toPrimitive: symbol;\r\n}\r\n\r\ndeclare var Symbol: SymbolConstructor;\r\n\r\ninterface Iterator<T> {\r\n    next(value?: any): __IteratorResult<T>;\r\n    throw?(value: any): __IteratorResult<T>;\r\n    return?(value?: T): __IteratorResult<T>;\r\n}\r\n\r\ntype __IteratorResult<T> = { value: T, done: false } | { value: never, done: true };\r\n\r\ninterface Iterable<T> {\r\n    [Symbol.iterator](): Iterator<T>;\r\n}\r\n\r\ninterface IterableIterator<T> extends Iterator<T> {\r\n    [Symbol.iterator](): IterableIterator<T>;\r\n}\r\n\r\ninterface Map<K, V> extends Iterable<[K, V]> {\r\n    readonly size: number;\r\n    has(key: K): boolean;\r\n    get(key: K): V;\r\n    set(key: K, value?: V): this;\r\n    delete(key: K): boolean;\r\n    clear(): void;\r\n    keys(): IterableIterator<K>;\r\n    values(): IterableIterator<V>;\r\n    entries(): IterableIterator<[K, V]>;\r\n}\r\n\r\ninterface MapConstructor {\r\n    new (): Map<any, any>;\r\n    new <K, V>(): Map<K, V>;\r\n    readonly prototype: Map<any, any>;\r\n}\r\n\r\ninterface Set<T> extends Iterable<T> {\r\n    readonly size: number;\r\n    has(value: T): boolean;\r\n    add(value: T): this;\r\n    delete(value: T): boolean;\r\n    clear(): void;\r\n    keys(): IterableIterator<T>;\r\n    values(): IterableIterator<T>;\r\n    entries(): IterableIterator<[T, T]>;\r\n}\r\n\r\ninterface SetConstructor {\r\n    new (): Set<any>;\r\n    new <T>(): Set<T>;\r\n    readonly prototype: Set<any>;\r\n}\r\n\r\ninterface WeakMap<K extends object, V> {\r\n    clear(): void;\r\n    delete(key: K): boolean;\r\n    get(key: K): V;\r\n    has(key: K): boolean;\r\n    set(key: K, value?: V): WeakMap<K, V>;\r\n}\r\n\r\ninterface WeakMapConstructor {\r\n    new (): WeakMap<any, any>;\r\n    new <K extends object, V>(): WeakMap<K, V>;\r\n    readonly prototype: WeakMap<object, any>;\r\n}\r\n\r\ndeclare var Map: MapConstructor;\r\ndeclare var Set: SetConstructor;\r\ndeclare var WeakMap: WeakMapConstructor;\r\n\r\n// NOTE: These are not actually global, just shared between the Reflect*.ts variants\r\n\r\ninterface MetadataRegistry {\r\n    registerProvider(provider: MetadataProvider): void;\r\n    getProvider(O: object, P: string | symbol | undefined): MetadataProvider | undefined;\r\n    setProvider(O: object, P: string | symbol | undefined, provider: MetadataProvider): boolean;\r\n}\r\n\r\ninterface MetadataProvider {\r\n    isProviderFor(O: object, P: string | symbol | undefined): boolean;\r\n    OrdinaryDefineOwnMetadata(MetadataKey: any, MetadataValue: any, O: object, P: string | symbol | undefined): void;\r\n    OrdinaryDeleteMetadata(MetadataKey: any, O: object, P: string | symbol | undefined): boolean;\r\n    OrdinaryHasOwnMetadata(MetadataKey: any, O: object, P: string | symbol | undefined): boolean;\r\n    OrdinaryGetOwnMetadata(MetadataKey: any, O: object, P: string | symbol | undefined): any;\r\n    OrdinaryOwnMetadataKeys(O: object, P: string | symbol | undefined): any[];\r\n}\r\n"
        },
        {
          "name": "gulpfile.js",
          "type": "blob",
          "size": 2.466796875,
          "content": "const gulp = require(\"gulp\");\r\nconst sequence = require(\"gulp-sequence\");\r\nconst del = require(\"del\");\r\nconst tsb = require(\"gulp-tsb\");\r\nconst mocha = require(\"gulp-mocha\");\r\nconst emu = require(\"gulp-emu\");\r\nconst rename = require(\"gulp-rename\");\r\nconst gls = require(\"gulp-live-server\");\r\n\r\nconst debugProject = tsb.create(\"tsconfig.json\");\r\nconst releaseProject = tsb.create(\"tsconfig-release.json\");\r\nconst tests = tsb.create(\"test/tsconfig.json\");\r\n\r\nlet project = debugProject;\r\n\r\ngulp.task(\"release\", () => { project = releaseProject; });\r\ngulp.task(\"clean\", () => del([\r\n    \"Reflect.js\",\r\n    \"Reflect.js.map\",\r\n    \"ReflectLite.js\",\r\n    \"ReflectLite.js.map\",\r\n    \"ReflectNoConflict.js\",\r\n    \"ReflectNoConflict.js.map\",\r\n    \"test/**/*.js\",\r\n    \"test/**/*.js.map\"\r\n]));\r\n\r\ngulp.task(\"build:reflect\", () => gulp\r\n    .src([\"globals.d.ts\", \"Reflect.ts\", \"ReflectLite.ts\", \"ReflectNoConflict.ts\"])\r\n    .pipe(project())\r\n    .pipe(gulp.dest(\".\")));\r\n\r\ngulp.task(\"build:tests\", () => gulp\r\n    .src([\"test/**/*.ts\"])\r\n    .pipe(tests())\r\n    .pipe(gulp.dest(\"test\")));\r\n\r\ngulp.task(\"build:spec\", () => gulp\r\n    .src([\"spec.html\"])\r\n    .pipe(emu({ js: \"ecmarkup.js\", css: \"ecmarkup.css\", biblio: true }))\r\n    .pipe(rename(path => {\r\n        if (path.basename === \"spec\" && path.extname === \".html\") {\r\n            path.basename = \"index\";\r\n        }\r\n    }))\r\n    .pipe(gulp.dest(\"docs\")));\r\n\r\ngulp.task(\"build\", [\"build:reflect\", \"build:tests\", \"build:spec\"]);\r\n\r\ngulp.task(\"test\", [\"build:reflect\", \"build:tests\"], () => {\r\n    console.log(\"Running tests...\");\r\n    return gulp\r\n        .src([\"test/**/*.js\"], { read: false })\r\n        .pipe(mocha({ reporter: \"dot\" }));\r\n});\r\n\r\ngulp.task(\"watch:reflect\", () => gulp.watch([\r\n    \"index.d.ts\",\r\n    \"no-conflict.d.ts\",\r\n    \"globals.d.ts\",\r\n    \"Reflect.ts\",\r\n    \"ReflectLite.ts\",\r\n    \"ReflectNoConflict.ts\",\r\n    \"tsconfig.json\",\r\n    \"test/**/*.ts\",\r\n    \"test/**/tsconfig.json\"\r\n], [\"test\"]));\r\ngulp.task(\"watch:spec\", () => gulp.watch([\"spec.html\"], [\"build:spec\"]));\r\ngulp.task(\"watch\", [\"watch:reflect\", \"watch:spec\"], () => {\r\n    const server = gls.static(\"docs\", 8080);\r\n    const promise = server.start();\r\n    gulp.watch([\"docs/**/*\"], file => server.notify(file));\r\n    return promise;\r\n});\r\n\r\ngulp.task(\"prepublish\", sequence(\"release\", \"clean\", \"test\"));\r\ngulp.task(\"reflect\", [\"build:reflect\"]);\r\ngulp.task(\"tests\", [\"build:tests\"]);\r\ngulp.task(\"spec\", [\"build:spec\"]);\r\ngulp.task(\"start\", [\"watch\"]);\r\ngulp.task(\"default\", [\"build\", \"test\"]);\r\n"
        },
        {
          "name": "index.d.ts",
          "type": "blob",
          "size": 22.1357421875,
          "content": "/*! *****************************************************************************\r\nCopyright (C) Microsoft. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\n// The \"reflect-metadata\" module has no imports or exports, but can be imported by modules to load the polyfill.\r\nexport { };\r\n\r\ndeclare global {\r\n    namespace Reflect {\r\n        /**\r\n          * Applies a set of decorators to a target object.\r\n          * @param decorators An array of decorators.\r\n          * @param target The target object.\r\n          * @returns The result of applying the provided decorators.\r\n          * @remarks Decorators are applied in reverse order of their positions in the array.\r\n          * @example\r\n          *\r\n          *     class Example { }\r\n          *\r\n          *     // constructor\r\n          *     Example = Reflect.decorate(decoratorsArray, Example);\r\n          *\r\n          */\r\n        function decorate(decorators: ClassDecorator[], target: Function): Function;\r\n        /**\r\n          * Applies a set of decorators to a property of a target object.\r\n          * @param decorators An array of decorators.\r\n          * @param target The target object.\r\n          * @param propertyKey The property key to decorate.\r\n          * @param attributes A property descriptor.\r\n          * @remarks Decorators are applied in reverse order.\r\n          * @example\r\n          *\r\n          *     class Example {\r\n          *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n          *         // static staticProperty;\r\n          *         // property;\r\n          *\r\n          *         static staticMethod() { }\r\n          *         method() { }\r\n          *     }\r\n          *\r\n          *     // property (on constructor)\r\n          *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\r\n          *\r\n          *     // property (on prototype)\r\n          *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\r\n          *\r\n          *     // method (on constructor)\r\n          *     Object.defineProperty(Example, \"staticMethod\",\r\n          *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\r\n          *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\r\n          *\r\n          *     // method (on prototype)\r\n          *     Object.defineProperty(Example.prototype, \"method\",\r\n          *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\r\n          *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\r\n          *\r\n          */\r\n        function decorate(decorators: (PropertyDecorator | MethodDecorator)[], target: Object, propertyKey: string | symbol, attributes?: PropertyDescriptor): PropertyDescriptor;\r\n        /**\r\n          * A default metadata decorator factory that can be used on a class, class member, or parameter.\r\n          * @param metadataKey The key for the metadata entry.\r\n          * @param metadataValue The value for the metadata entry.\r\n          * @returns A decorator function.\r\n          * @remarks\r\n          * If `metadataKey` is already defined for the target and target key, the\r\n          * metadataValue for that key will be overwritten.\r\n          * @example\r\n          *\r\n          *     // constructor\r\n          *     @Reflect.metadata(key, value)\r\n          *     class Example {\r\n          *     }\r\n          *\r\n          *     // property (on constructor, TypeScript only)\r\n          *     class Example {\r\n          *         @Reflect.metadata(key, value)\r\n          *         static staticProperty;\r\n          *     }\r\n          *\r\n          *     // property (on prototype, TypeScript only)\r\n          *     class Example {\r\n          *         @Reflect.metadata(key, value)\r\n          *         property;\r\n          *     }\r\n          *\r\n          *     // method (on constructor)\r\n          *     class Example {\r\n          *         @Reflect.metadata(key, value)\r\n          *         static staticMethod() { }\r\n          *     }\r\n          *\r\n          *     // method (on prototype)\r\n          *     class Example {\r\n          *         @Reflect.metadata(key, value)\r\n          *         method() { }\r\n          *     }\r\n          *\r\n          */\r\n        function metadata(metadataKey: any, metadataValue: any): {\r\n            (target: Function): void;\r\n            (target: Object, propertyKey: string | symbol): void;\r\n        };\r\n        /**\r\n          * Define a unique metadata entry on the target.\r\n          * @param metadataKey A key used to store and retrieve metadata.\r\n          * @param metadataValue A value that contains attached metadata.\r\n          * @param target The target object on which to define metadata.\r\n          * @example\r\n          *\r\n          *     class Example {\r\n          *     }\r\n          *\r\n          *     // constructor\r\n          *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\r\n          *\r\n          *     // decorator factory as metadata-producing annotation.\r\n          *     function MyAnnotation(options): ClassDecorator {\r\n          *         return target => Reflect.defineMetadata(\"custom:annotation\", options, target);\r\n          *     }\r\n          *\r\n          */\r\n        function defineMetadata(metadataKey: any, metadataValue: any, target: Object): void;\r\n        /**\r\n          * Define a unique metadata entry on the target.\r\n          * @param metadataKey A key used to store and retrieve metadata.\r\n          * @param metadataValue A value that contains attached metadata.\r\n          * @param target The target object on which to define metadata.\r\n          * @param propertyKey The property key for the target.\r\n          * @example\r\n          *\r\n          *     class Example {\r\n          *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n          *         // static staticProperty;\r\n          *         // property;\r\n          *\r\n          *         static staticMethod(p) { }\r\n          *         method(p) { }\r\n          *     }\r\n          *\r\n          *     // property (on constructor)\r\n          *     Reflect.defineMetadata(\"custom:annotation\", Number, Example, \"staticProperty\");\r\n          *\r\n          *     // property (on prototype)\r\n          *     Reflect.defineMetadata(\"custom:annotation\", Number, Example.prototype, \"property\");\r\n          *\r\n          *     // method (on constructor)\r\n          *     Reflect.defineMetadata(\"custom:annotation\", Number, Example, \"staticMethod\");\r\n          *\r\n          *     // method (on prototype)\r\n          *     Reflect.defineMetadata(\"custom:annotation\", Number, Example.prototype, \"method\");\r\n          *\r\n          *     // decorator factory as metadata-producing annotation.\r\n          *     function MyAnnotation(options): PropertyDecorator {\r\n          *         return (target, key) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n          *     }\r\n          *\r\n          */\r\n        function defineMetadata(metadataKey: any, metadataValue: any, target: Object, propertyKey: string | symbol): void;\r\n        /**\r\n          * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n          * @param metadataKey A key used to store and retrieve metadata.\r\n          * @param target The target object on which the metadata is defined.\r\n          * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n          * @example\r\n          *\r\n          *     class Example {\r\n          *     }\r\n          *\r\n          *     // constructor\r\n          *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\r\n          *\r\n          */\r\n        function hasMetadata(metadataKey: any, target: Object): boolean;\r\n        /**\r\n          * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n          * @param metadataKey A key used to store and retrieve metadata.\r\n          * @param target The target object on which the metadata is defined.\r\n          * @param propertyKey The property key for the target.\r\n          * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n          * @example\r\n          *\r\n          *     class Example {\r\n          *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n          *         // static staticProperty;\r\n          *         // property;\r\n          *\r\n          *         static staticMethod(p) { }\r\n          *         method(p) { }\r\n          *     }\r\n          *\r\n          *     // property (on constructor)\r\n          *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n          *\r\n          *     // property (on prototype)\r\n          *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n          *\r\n          *     // method (on constructor)\r\n          *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n          *\r\n          *     // method (on prototype)\r\n          *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n          *\r\n          */\r\n        function hasMetadata(metadataKey: any, target: Object, propertyKey: string | symbol): boolean;\r\n        /**\r\n          * Gets a value indicating whether the target object has the provided metadata key defined.\r\n          * @param metadataKey A key used to store and retrieve metadata.\r\n          * @param target The target object on which the metadata is defined.\r\n          * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n          * @example\r\n          *\r\n          *     class Example {\r\n          *     }\r\n          *\r\n          *     // constructor\r\n          *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\r\n          *\r\n          */\r\n        function hasOwnMetadata(metadataKey: any, target: Object): boolean;\r\n        /**\r\n          * Gets a value indicating whether the target object has the provided metadata key defined.\r\n          * @param metadataKey A key used to store and retrieve metadata.\r\n          * @param target The target object on which the metadata is defined.\r\n          * @param propertyKey The property key for the target.\r\n          * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n          * @example\r\n          *\r\n          *     class Example {\r\n          *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n          *         // static staticProperty;\r\n          *         // property;\r\n          *\r\n          *         static staticMethod(p) { }\r\n          *         method(p) { }\r\n          *     }\r\n          *\r\n          *     // property (on constructor)\r\n          *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n          *\r\n          *     // property (on prototype)\r\n          *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n          *\r\n          *     // method (on constructor)\r\n          *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n          *\r\n          *     // method (on prototype)\r\n          *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n          *\r\n          */\r\n        function hasOwnMetadata(metadataKey: any, target: Object, propertyKey: string | symbol): boolean;\r\n        /**\r\n          * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n          * @param metadataKey A key used to store and retrieve metadata.\r\n          * @param target The target object on which the metadata is defined.\r\n          * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n          * @example\r\n          *\r\n          *     class Example {\r\n          *     }\r\n          *\r\n          *     // constructor\r\n          *     result = Reflect.getMetadata(\"custom:annotation\", Example);\r\n          *\r\n          */\r\n        function getMetadata(metadataKey: any, target: Object): any;\r\n        /**\r\n          * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n          * @param metadataKey A key used to store and retrieve metadata.\r\n          * @param target The target object on which the metadata is defined.\r\n          * @param propertyKey The property key for the target.\r\n          * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n          * @example\r\n          *\r\n          *     class Example {\r\n          *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n          *         // static staticProperty;\r\n          *         // property;\r\n          *\r\n          *         static staticMethod(p) { }\r\n          *         method(p) { }\r\n          *     }\r\n          *\r\n          *     // property (on constructor)\r\n          *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n          *\r\n          *     // property (on prototype)\r\n          *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n          *\r\n          *     // method (on constructor)\r\n          *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n          *\r\n          *     // method (on prototype)\r\n          *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n          *\r\n          */\r\n        function getMetadata(metadataKey: any, target: Object, propertyKey: string | symbol): any;\r\n        /**\r\n          * Gets the metadata value for the provided metadata key on the target object.\r\n          * @param metadataKey A key used to store and retrieve metadata.\r\n          * @param target The target object on which the metadata is defined.\r\n          * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n          * @example\r\n          *\r\n          *     class Example {\r\n          *     }\r\n          *\r\n          *     // constructor\r\n          *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\r\n          *\r\n          */\r\n        function getOwnMetadata(metadataKey: any, target: Object): any;\r\n        /**\r\n          * Gets the metadata value for the provided metadata key on the target object.\r\n          * @param metadataKey A key used to store and retrieve metadata.\r\n          * @param target The target object on which the metadata is defined.\r\n          * @param propertyKey The property key for the target.\r\n          * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n          * @example\r\n          *\r\n          *     class Example {\r\n          *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n          *         // static staticProperty;\r\n          *         // property;\r\n          *\r\n          *         static staticMethod(p) { }\r\n          *         method(p) { }\r\n          *     }\r\n          *\r\n          *     // property (on constructor)\r\n          *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n          *\r\n          *     // property (on prototype)\r\n          *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n          *\r\n          *     // method (on constructor)\r\n          *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n          *\r\n          *     // method (on prototype)\r\n          *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n          *\r\n          */\r\n        function getOwnMetadata(metadataKey: any, target: Object, propertyKey: string | symbol): any;\r\n        /**\r\n          * Gets the metadata keys defined on the target object or its prototype chain.\r\n          * @param target The target object on which the metadata is defined.\r\n          * @returns An array of unique metadata keys.\r\n          * @example\r\n          *\r\n          *     class Example {\r\n          *     }\r\n          *\r\n          *     // constructor\r\n          *     result = Reflect.getMetadataKeys(Example);\r\n          *\r\n          */\r\n        function getMetadataKeys(target: Object): any[];\r\n        /**\r\n          * Gets the metadata keys defined on the target object or its prototype chain.\r\n          * @param target The target object on which the metadata is defined.\r\n          * @param propertyKey The property key for the target.\r\n          * @returns An array of unique metadata keys.\r\n          * @example\r\n          *\r\n          *     class Example {\r\n          *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n          *         // static staticProperty;\r\n          *         // property;\r\n          *\r\n          *         static staticMethod(p) { }\r\n          *         method(p) { }\r\n          *     }\r\n          *\r\n          *     // property (on constructor)\r\n          *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\r\n          *\r\n          *     // property (on prototype)\r\n          *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\r\n          *\r\n          *     // method (on constructor)\r\n          *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\r\n          *\r\n          *     // method (on prototype)\r\n          *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\r\n          *\r\n          */\r\n        function getMetadataKeys(target: Object, propertyKey: string | symbol): any[];\r\n        /**\r\n          * Gets the unique metadata keys defined on the target object.\r\n          * @param target The target object on which the metadata is defined.\r\n          * @returns An array of unique metadata keys.\r\n          * @example\r\n          *\r\n          *     class Example {\r\n          *     }\r\n          *\r\n          *     // constructor\r\n          *     result = Reflect.getOwnMetadataKeys(Example);\r\n          *\r\n          */\r\n        function getOwnMetadataKeys(target: Object): any[];\r\n        /**\r\n          * Gets the unique metadata keys defined on the target object.\r\n          * @param target The target object on which the metadata is defined.\r\n          * @param propertyKey The property key for the target.\r\n          * @returns An array of unique metadata keys.\r\n          * @example\r\n          *\r\n          *     class Example {\r\n          *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n          *         // static staticProperty;\r\n          *         // property;\r\n          *\r\n          *         static staticMethod(p) { }\r\n          *         method(p) { }\r\n          *     }\r\n          *\r\n          *     // property (on constructor)\r\n          *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\r\n          *\r\n          *     // property (on prototype)\r\n          *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\r\n          *\r\n          *     // method (on constructor)\r\n          *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\r\n          *\r\n          *     // method (on prototype)\r\n          *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\r\n          *\r\n          */\r\n        function getOwnMetadataKeys(target: Object, propertyKey: string | symbol): any[];\r\n        /**\r\n          * Deletes the metadata entry from the target object with the provided key.\r\n          * @param metadataKey A key used to store and retrieve metadata.\r\n          * @param target The target object on which the metadata is defined.\r\n          * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n          * @example\r\n          *\r\n          *     class Example {\r\n          *     }\r\n          *\r\n          *     // constructor\r\n          *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\r\n          *\r\n          */\r\n        function deleteMetadata(metadataKey: any, target: Object): boolean;\r\n        /**\r\n          * Deletes the metadata entry from the target object with the provided key.\r\n          * @param metadataKey A key used to store and retrieve metadata.\r\n          * @param target The target object on which the metadata is defined.\r\n          * @param propertyKey The property key for the target.\r\n          * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n          * @example\r\n          *\r\n          *     class Example {\r\n          *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n          *         // static staticProperty;\r\n          *         // property;\r\n          *\r\n          *         static staticMethod(p) { }\r\n          *         method(p) { }\r\n          *     }\r\n          *\r\n          *     // property (on constructor)\r\n          *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n          *\r\n          *     // property (on prototype)\r\n          *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n          *\r\n          *     // method (on constructor)\r\n          *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n          *\r\n          *     // method (on prototype)\r\n          *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n          *\r\n          */\r\n        function deleteMetadata(metadataKey: any, target: Object, propertyKey: string | symbol): boolean;\r\n    }\r\n}"
        },
        {
          "name": "no-conflict.d.ts",
          "type": "blob",
          "size": 18.15625,
          "content": "/*! *****************************************************************************\r\nCopyright (C) Microsoft. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\n/**\r\n * Applies a set of decorators to a target object.\r\n * @param decorators An array of decorators.\r\n * @param target The target object.\r\n * @returns The result of applying the provided decorators.\r\n * @remarks Decorators are applied in reverse order of their positions in the array.\r\n * @example\r\n *\r\n *     class Example { }\r\n *\r\n *     // constructor\r\n *     Example = Reflect.decorate(decoratorsArray, Example);\r\n *\r\n */\r\nexport declare function decorate(decorators: ClassDecorator[], target: Function): Function;\r\n/**\r\n * Applies a set of decorators to a property of a target object.\r\n * @param decorators An array of decorators.\r\n * @param target The target object.\r\n * @param propertyKey The property key to decorate.\r\n * @param attributes A property descriptor.\r\n * @remarks Decorators are applied in reverse order.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod() { }\r\n *         method() { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     Object.defineProperty(Example, \"staticMethod\",\r\n *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\r\n *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\r\n *\r\n *     // method (on prototype)\r\n *     Object.defineProperty(Example.prototype, \"method\",\r\n *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\r\n *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\r\n *\r\n */\r\nexport declare function decorate(decorators: (PropertyDecorator | MethodDecorator)[], target: Object, propertyKey: string | symbol, attributes?: PropertyDescriptor): PropertyDescriptor;\r\n/**\r\n * A default metadata decorator factory that can be used on a class, class member, or parameter.\r\n * @param metadataKey The key for the metadata entry.\r\n * @param metadataValue The value for the metadata entry.\r\n * @returns A decorator function.\r\n * @remarks\r\n * If `metadataKey` is already defined for the target and target key, the\r\n * metadataValue for that key will be overwritten.\r\n * @example\r\n *\r\n *     // constructor\r\n *     @Reflect.metadata(key, value)\r\n *     class Example {\r\n *     }\r\n *\r\n *     // property (on constructor, TypeScript only)\r\n *     class Example {\r\n *         @Reflect.metadata(key, value)\r\n *         static staticProperty;\r\n *     }\r\n *\r\n *     // property (on prototype, TypeScript only)\r\n *     class Example {\r\n *         @Reflect.metadata(key, value)\r\n *         property;\r\n *     }\r\n *\r\n *     // method (on constructor)\r\n *     class Example {\r\n *         @Reflect.metadata(key, value)\r\n *         static staticMethod() { }\r\n *     }\r\n *\r\n *     // method (on prototype)\r\n *     class Example {\r\n *         @Reflect.metadata(key, value)\r\n *         method() { }\r\n *     }\r\n *\r\n */\r\nexport declare function metadata(metadataKey: any, metadataValue: any): {\r\n    (target: Function): void;\r\n    (target: Object, propertyKey: string | symbol): void;\r\n};\r\n/**\r\n * Define a unique metadata entry on the target.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param metadataValue A value that contains attached metadata.\r\n * @param target The target object on which to define metadata.\r\n * @example\r\n *\r\n *     class Example {\r\n *     }\r\n *\r\n *     // constructor\r\n *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\r\n *\r\n *     // decorator factory as metadata-producing annotation.\r\n *     function MyAnnotation(options): ClassDecorator {\r\n *         return target => Reflect.defineMetadata(\"custom:annotation\", options, target);\r\n *     }\r\n *\r\n */\r\nexport declare function defineMetadata(metadataKey: any, metadataValue: any, target: Object): void;\r\n/**\r\n * Define a unique metadata entry on the target.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param metadataValue A value that contains attached metadata.\r\n * @param target The target object on which to define metadata.\r\n * @param propertyKey The property key for the target.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     Reflect.defineMetadata(\"custom:annotation\", Number, Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     Reflect.defineMetadata(\"custom:annotation\", Number, Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     Reflect.defineMetadata(\"custom:annotation\", Number, Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     Reflect.defineMetadata(\"custom:annotation\", Number, Example.prototype, \"method\");\r\n *\r\n *     // decorator factory as metadata-producing annotation.\r\n *     function MyAnnotation(options): PropertyDecorator {\r\n *         return (target, key) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n *     }\r\n *\r\n */\r\nexport declare function defineMetadata(metadataKey: any, metadataValue: any, target: Object, propertyKey: string | symbol): void;\r\n/**\r\n * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n * @example\r\n *\r\n *     class Example {\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\r\n *\r\n */\r\nexport declare function hasMetadata(metadataKey: any, target: Object): boolean;\r\n/**\r\n * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey The property key for the target.\r\n * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n *\r\n */\r\nexport declare function hasMetadata(metadataKey: any, target: Object, propertyKey: string | symbol): boolean;\r\n/**\r\n * Gets a value indicating whether the target object has the provided metadata key defined.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n * @example\r\n *\r\n *     class Example {\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\r\n *\r\n */\r\nexport declare function hasOwnMetadata(metadataKey: any, target: Object): boolean;\r\n/**\r\n * Gets a value indicating whether the target object has the provided metadata key defined.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey The property key for the target.\r\n * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n *\r\n */\r\nexport declare function hasOwnMetadata(metadataKey: any, target: Object, propertyKey: string | symbol): boolean;\r\n/**\r\n * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n * @example\r\n *\r\n *     class Example {\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.getMetadata(\"custom:annotation\", Example);\r\n *\r\n */\r\nexport declare function getMetadata(metadataKey: any, target: Object): any;\r\n/**\r\n * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey The property key for the target.\r\n * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n *\r\n */\r\nexport declare function getMetadata(metadataKey: any, target: Object, propertyKey: string | symbol): any;\r\n/**\r\n * Gets the metadata value for the provided metadata key on the target object.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n * @example\r\n *\r\n *     class Example {\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\r\n *\r\n */\r\nexport declare function getOwnMetadata(metadataKey: any, target: Object): any;\r\n/**\r\n * Gets the metadata value for the provided metadata key on the target object.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey The property key for the target.\r\n * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n *\r\n */\r\nexport declare function getOwnMetadata(metadataKey: any, target: Object, propertyKey: string | symbol): any;\r\n/**\r\n * Gets the metadata keys defined on the target object or its prototype chain.\r\n * @param target The target object on which the metadata is defined.\r\n * @returns An array of unique metadata keys.\r\n * @example\r\n *\r\n *     class Example {\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.getMetadataKeys(Example);\r\n *\r\n */\r\nexport declare function getMetadataKeys(target: Object): any[];\r\n/**\r\n * Gets the metadata keys defined on the target object or its prototype chain.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey The property key for the target.\r\n * @returns An array of unique metadata keys.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\r\n *\r\n */\r\nexport declare function getMetadataKeys(target: Object, propertyKey: string | symbol): any[];\r\n/**\r\n * Gets the unique metadata keys defined on the target object.\r\n * @param target The target object on which the metadata is defined.\r\n * @returns An array of unique metadata keys.\r\n * @example\r\n *\r\n *     class Example {\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.getOwnMetadataKeys(Example);\r\n *\r\n */\r\nexport declare function getOwnMetadataKeys(target: Object): any[];\r\n/**\r\n * Gets the unique metadata keys defined on the target object.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey The property key for the target.\r\n * @returns An array of unique metadata keys.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\r\n *\r\n */\r\nexport declare function getOwnMetadataKeys(target: Object, propertyKey: string | symbol): any[];\r\n/**\r\n * Deletes the metadata entry from the target object with the provided key.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n * @example\r\n *\r\n *     class Example {\r\n *     }\r\n *\r\n *     // constructor\r\n *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\r\n *\r\n */\r\nexport declare function deleteMetadata(metadataKey: any, target: Object): boolean;\r\n/**\r\n * Deletes the metadata entry from the target object with the provided key.\r\n * @param metadataKey A key used to store and retrieve metadata.\r\n * @param target The target object on which the metadata is defined.\r\n * @param propertyKey The property key for the target.\r\n * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n * @example\r\n *\r\n *     class Example {\r\n *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n *         // static staticProperty;\r\n *         // property;\r\n *\r\n *         static staticMethod(p) { }\r\n *         method(p) { }\r\n *     }\r\n *\r\n *     // property (on constructor)\r\n *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n *\r\n *     // property (on prototype)\r\n *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n *\r\n *     // method (on constructor)\r\n *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n *\r\n *     // method (on prototype)\r\n *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n *\r\n */\r\nexport declare function deleteMetadata(metadataKey: any, target: Object, propertyKey: string | symbol): boolean;\r\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.5966796875,
          "content": "{\n  \"name\": \"reflect-metadata\",\n  \"version\": \"0.2.2\",\n  \"description\": \"Polyfill for Metadata Reflection API\",\n  \"type\": \"commonjs\",\n  \"main\": \"Reflect.js\",\n  \"types\": \"index.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./Reflect.js\"\n    },\n    \"./lite\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./ReflectLite.js\"\n    },\n    \"./no-conflict\": {\n      \"types\": \"./no-conflict.d.ts\",\n      \"default\": \"./ReflectNoConflict.js\"\n    },\n    \"./Reflect\": \"./Reflect.js\",\n    \"./Reflect.js\": \"./Reflect.js\"\n  },\n  \"scripts\": {\n    \"prepublishOnly\": \"gulp prepublish\",\n    \"build\": \"gulp build\",\n    \"test\": \"gulp test\",\n    \"start\": \"gulp start\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/rbuckton/reflect-metadata.git\"\n  },\n  \"keywords\": [\n    \"decorator\",\n    \"metadata\",\n    \"javascript\",\n    \"reflect\"\n  ],\n  \"author\": {\n    \"name\": \"Ron Buckton\",\n    \"email\": \"ron.buckton@microsoft.com\",\n    \"url\": \"http://github.com/rbuckton\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/rbuckton/reflect-metadata/issues\"\n  },\n  \"homepage\": \"http://rbuckton.github.io/reflect-metadata\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"@types/chai\": \"^3.4.34\",\n    \"@types/mocha\": \"^2.2.34\",\n    \"@types/node\": \"^10.17.60\",\n    \"chai\": \"^3.5.0\",\n    \"del\": \"^2.2.2\",\n    \"ecmarkup\": \"^3.9.3\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-emu\": \"^1.1.0\",\n    \"gulp-live-server\": \"0.0.30\",\n    \"gulp-mocha\": \"^3.0.1\",\n    \"gulp-rename\": \"^1.2.2\",\n    \"gulp-sequence\": \"^0.4.6\",\n    \"gulp-tsb\": \"^2.0.3\",\n    \"mocha\": \"^3.2.0\",\n    \"typescript\": \"^2.1.4\"\n  }\n}\n"
        },
        {
          "name": "spec.html",
          "type": "blob",
          "size": 21.5888671875,
          "content": "﻿<!doctype html>\r\n<meta charset=\"utf8\">\r\n<title>Metadata Proposal - ECMAScript</title>\r\n<link rel=\"stylesheet\" href=\"ecmarkup.css\">\r\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css\">\r\n<script src=\"ecmarkup.js\"></script>\r\n<script>\r\n  if (location.hostname === 'rbuckton.github.io' && location.protocol !== 'https:') {\r\n    location.protocol = 'https:';\r\n  }\r\n</script>\r\n<pre class=metadata>\r\n  title: Metadata Proposal - ECMAScript\r\n  status: proposal\r\n  location: https://rbuckton.github.io/reflect-metadata\r\n  copyright: false\r\n  contributors: Ron Buckton\r\n</pre>\r\n\r\n<emu-intro id=\"introduction\">\r\n  <h1>Metadata Proposal - ECMAScript</h1>\r\n  <emu-note>A shim for this API can be found here: <a href=\"https://github.com/rbuckton/ReflectDecorators\">https://github.com/rbuckton/ReflectDecorators</a></emu-note>\r\n  <p>Proposal to add Metadata to ECMAScript.</p>\r\n</emu-intro>\r\n\r\n<emu-clause id=\"syntax\">\r\n  <h1>Syntax</h1>\r\n  <emu-note>This section is non-normative.</emu-note>\r\n  <pre><code class=\"javascript\">\r\n    // define metadata on an object or property\r\n    Reflect.defineMetadata(metadataKey, metadataValue, target);\r\n    Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey);\r\n\r\n    // check for presence of a metadata key on the prototype chain of an object or property\r\n    let result = Reflect.hasMetadata(metadataKey, target);\r\n    let result = Reflect.hasMetadata(metadataKey, target, propertyKey);\r\n\r\n    // check for presence of an own metadata key of an object or property\r\n    let result = Reflect.hasOwnMetadata(metadataKey, target);\r\n    let result = Reflect.hasOwnMetadata(metadataKey, target, propertyKey);\r\n\r\n    // get metadata value of a metadata key on the prototype chain of an object or property\r\n    let result = Reflect.getMetadata(metadataKey, target);\r\n    let result = Reflect.getMetadata(metadataKey, target, propertyKey);\r\n\r\n    // get metadata value of an own metadata key of an object or property\r\n    let result = Reflect.getOwnMetadata(metadataKey, target);\r\n    let result = Reflect.getOwnMetadata(metadataKey, target, propertyKey);\r\n\r\n    // get all metadata keys on the prototype chain of an object or property\r\n    let result = Reflect.getMetadataKeys(target);\r\n    let result = Reflect.getMetadataKeys(target, propertyKey);\r\n\r\n    // get all own metadata keys of an object or property\r\n    let result = Reflect.getOwnMetadataKeys(target);\r\n    let result = Reflect.getOwnMetadataKeys(target, propertyKey);\r\n\r\n    // delete metadata from an object or property\r\n    let result = Reflect.deleteMetadata(metadataKey, target);\r\n    let result = Reflect.deleteMetadata(metadataKey, target, propertyKey);\r\n\r\n    // apply metadata via a decorator to a constructor\r\n    @Reflect.metadata(metadataKey, metadataValue)\r\n    class C {\r\n      // apply metadata via a decorator to a method (property)\r\n      @Reflect.metadata(metadataKey, metadataValue)\r\n      method() {\r\n      }\r\n    }\r\n\r\n    // Design-time type annotations\r\n    function Type(type) { return Reflect.metadata(\"design:type\", type); }\r\n    function ParamTypes(...types) { return Reflect.metadata(\"design:paramtypes\", types); }\r\n    function ReturnType(type) { return Reflect.metadata(\"design:returntype\", type); }\r\n\r\n    // Decorator application\r\n    @ParamTypes(String, Number)\r\n    class C {\r\n      constructor(text, i) {\r\n      }\r\n\r\n      @Type(String)\r\n      get name() { return \"text\"; }\r\n\r\n      @Type(Function)\r\n      @ParamTypes(Number, Number)\r\n      @ReturnType(Number)\r\n      add(x, y) {\r\n        return x + y;\r\n      }\r\n    }\r\n\r\n    // Metadata introspection\r\n    let obj = new C(\"a\", 1);\r\n    let paramTypes = Reflect.getMetadata(\"design:paramtypes\", obj, \"add\"); // [Number, Number]\r\n  </code></pre>\r\n</emu-clause>\r\n\r\n<emu-clause id=\"abstract-operations\">\r\n  <h1>Abstract Operations</h1>\r\n  <emu-clause id=\"operations-on-objects\">\r\n    <h1>Operations on Objects</h1>\r\n    <emu-clause id=\"getorcreatemetadatamap\" aoid=\"GetOrCreateMetadataMap\">\r\n      <h1>GetOrCreateMetadataMap ( O, P, Create )</h1>\r\n      <p>When the abstract operation GetOrCreateMetadataMap is called with Object _O_, property key _P_, and Boolean _Create_ the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. Assert: _P_ is *undefined* or IsPropertyKey(_P_) is *true*.\r\n        2. Let _targetMetadata_ be the value of _O_'s [[Metadata]] internal slot.\r\n        3. If _targetMetadata_ is *undefined*, then\r\n          1. If _Create_ is *false*, return *undefined*.\r\n          2. Set _targetMetadata_ to be a newly created *Map* object.\r\n          3. Set the [[Metadata]] internal slot of _O_ to _targetMetadata_.\r\n        4. Let _metadataMap_ be ? Invoke(_targetMetadata_, `\"get\"`, _P_).\r\n        5. If _metadataMap_ is *undefined*, then\r\n          1. If _Create_ is *false*, return *undefined*.\r\n          2. Set _metadataMap_ to be a newly created *Map* object.\r\n          3. Perform ? Invoke(_targetMetadata_, `\"set\"`, _P_, _metadataMap_).\r\n        6. Return _metadataMap_.\r\n      </emu-alg>\r\n    </emu-clause>\r\n  </emu-clause>\r\n</emu-clause>\r\n\r\n<emu-clause id=\"ordinary-and-exotic-objects-behaviors\">\r\n  <h1>Ordinary and Exotic Objects Behaviors</h1>\r\n\r\n  <emu-clause id=\"ordinary-object-internal-methods-and-internal-slots\">\r\n    <h1>Ordinary Object Internal Methods and Internal Slots</h1>\r\n    <p>All ordinary objects have an internal slot called [[Metadata]]. The value of this internal slot is either *null* or a *Map* object and is used for storing metadata for an object.</p>\r\n    <emu-clause id=\"ordinary-object-internal-methods-and-internal-slots-hasmetadata\">\r\n      <h1>[[HasMetadata]] ( MetadataKey, P )</h1>\r\n      <p>When the [[HasMetadata]] internal method of _O_ is called with ECMAScript language value _MetadataKey_ and property key _P_, the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. Return ? OrdinaryHasMetadata(_MetadataKey_, _O_, _P_).\r\n      </emu-alg>\r\n      <emu-clause id=\"ordinaryhasmetadata\" aoid=\"OrdinaryHasMetadata\">\r\n        <h1>OrdinaryHasMetadata ( MetadataKey, O, P )</h1>\r\n        <p>When the abstract operation OrdinaryHasMetadata is called with ECMAScript language value _MetadataKey_, Object _O_, and property key _P_, the following steps are taken:</p>\r\n        <emu-alg>\r\n          1. Assert: _P_ is *undefined* or IsPropertyKey(_P_) is *true*.\r\n          2. Let _hasOwn_ be ? OrdinaryHasOwnMetadata(_MetadataKey_, _O_, _P_).\r\n          3. If _hasOwn_ is *true*, return *true*.\r\n          4. Let _parent_ be ? _O_.[[GetPrototypeOf]]().\r\n          5. If _parent_ is not *null*, Return ? _parent_.[[HasMetadata]](_MetadataKey_, _P_).\r\n          6. Return *false*.\r\n        </emu-alg>\r\n      </emu-clause>\r\n    </emu-clause>\r\n\r\n    <emu-clause id=\"ordinary-object-internal-methods-and-internal-slots-hasownmetadata\">\r\n      <h1>[[HasOwnMetadata]] ( MetadataKey, P )</h1>\r\n      <p>When the [[HasOwnMetadata]] internal method of _O_ is called with ECMAScript language value _MetadataKey_ and property key _P_, the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. Return ? OrdinaryHasOwnMetadata(_MetadataKey_, _O_, _P_).\r\n      </emu-alg>\r\n      <emu-clause id=\"ordinaryhasownmetadata\" aoid=\"OrdinaryHasOwnMetadata\">\r\n        <h1>OrdinaryHasOwnMetadata ( MetadataKey, O, P )</h1>\r\n        <p>When the abstract operation OrdinaryHasOwnMetadata is called with ECMAScript language value _MetadataKey_, Object _O_, and property key _P_, the following steps are taken:</p>\r\n        <emu-alg>\r\n          1. Assert: _P_ is *undefined* or IsPropertyKey(_P_) is *true*.\r\n          2. Let _metadataMap_ be ? GetOrCreateMetadataMap(_O_, _P_, *false*).\r\n          3. If _metadataMap_ is *undefined*, return *false*.\r\n          4. Return ? ToBoolean(? Invoke(_metadataMap_, `\"has\"`, _MetadataKey_)).\r\n        </emu-alg>\r\n      </emu-clause>\r\n    </emu-clause>\r\n\r\n    <emu-clause id=\"ordinary-object-internal-methods-and-internal-slots-getmetadata\">\r\n      <h1>[[GetMetadata]] ( MetadataKey, P )</h1>\r\n      <p>When the [[GetMatadata]] internal method of _O_ is called with ECMAScript language value _MetadataKey_ and property key _P_, the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. Return ? OrdinaryGetMetadata(_MetadataKey_, _O_, _P_).\r\n      </emu-alg>\r\n      <emu-clause id=\"ordinarygetmetadata\" aoid=\"OrdinaryGetMetadata\">\r\n        <h1>OrdinaryGetMetadata ( MetadataKey, O, P )</h1>\r\n        <p>When the abstract operation OrdinaryGetMetadata is called with ECMAScript language value _MetadataKey_, Object _O_, and property key _P_, the following steps are taken:</p>\r\n        <emu-alg>\r\n          1. Assert: _P_ is *undefined* or IsPropertyKey(_P_) is *true*.\r\n          2. Let _hasOwn_ be ? OrdinaryHasOwnMetadata(_MetadataKey_, _O_, _P_).\r\n          3. If _hasOwn_ is *true*, return ? OrdinaryGetOwnMetadata(_MetadataKey_, _O_, _P_).\r\n          4. Let _parent_ be ? _O_.[[GetPrototypeOf]]().\r\n          5. If _parent_ is not *null*, return ? _parent_.[[GetMetadata]](_MetadataKey_, _P_).\r\n          6. Return *undefined*.\r\n        </emu-alg>\r\n      </emu-clause>\r\n    </emu-clause>\r\n\r\n    <emu-clause id=\"ordinary-object-internal-methods-and-internal-slots-getownmetadata\">\r\n      <h1>[[GetOwnMetadata]] ( MetadataKey, P, ParamIndex )</h1>\r\n      <p>When the [[GetOwnMetadata]] internal method of _O_ is called with ECMAScript language value _MetadataKey_ and property key _P_, the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. Return ? OrdinaryGetOwnMetadata(_MetadataKey_, _O_, _P_).\r\n      </emu-alg>\r\n      <emu-clause id=\"ordinarygetownmetadata\" aoid=\"OrdinaryGetOwnMetadata\">\r\n        <h1>OrdinaryGetOwnMetadata ( MetadataKey, O, P )</h1>\r\n        <p>When the abstract operation OrdinaryGetOwnMetadata is called with ECMAScript language value _MetadataKey_, Object _O_, and property key _P_, the following steps are taken:</p>\r\n        <emu-alg>\r\n          1. Assert: _P_ is *undefined* or IsPropertyKey(_P_) is *true*.\r\n          2. Let _metadataMap_ be ? GetOrCreateMetadataMap(_O_, _P_, *false*).\r\n          3. If _metadataMap_ is *undefined*, return *undefined*.\r\n          4. Return ? Invoke(_metadataMap_, `\"get\"`, _MetadataKey_).\r\n        </emu-alg>\r\n      </emu-clause>\r\n    </emu-clause>\r\n\r\n    <emu-clause id=\"ordinary-object-internal-methods-and-internal-slots-defineownmetadata\">\r\n      <h1>[[DefineOwnMetadata]] ( MetadataKey, MetadataValue, P )</h1>\r\n      <p>When the [[DefineOwnMetadata]] internal method of _O_ is called with ECMAScript language value _MetadataKey_, ECMAScript language value _MetadataValue_, and property key _P_, the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. Return ? OrdinaryDefineOwnMetadata(_MetadataKey_, _MetadataValue_, _O_, _P_)\r\n      </emu-alg>\r\n      <emu-clause id=\"ordinarydefineownmetadata\" aoid=\"OrdinaryDefineOwnMetadata\">\r\n        <h1>OrdinaryDefineOwnMetadata ( MetadataKey, MetadataValue, O, P )</h1>\r\n        <p>When the abstract operation OrdinaryDefineOwnProperty is called with ECMAScript language value _MetadataKey_, ECMAScript language value _MetadataValue_, Object _O_, and property key _P_, the following steps are taken:</p>\r\n        <emu-alg>\r\n          1. Assert: _P_ is *undefined* or IsPropertyKey(_P_) is *true*.\r\n          2. Let _metadataMap_ be ? GetOrCreateMetadataMap(_O_, _P_, *true*).\r\n          3. Return ? Invoke(_metadataMap_, `\"set\"`, _MetadataKey_, _MetadataValue_).\r\n        </emu-alg>\r\n      </emu-clause>\r\n    </emu-clause>\r\n\r\n    <emu-clause id=\"ordinary-object-internal-methods-and-internal-slots-metadatakeys\">\r\n      <h1>[[MetadataKeys]] ( P )</h1>\r\n      <p>When the [[MetadataKeys]] internal method of _O_ is called with property key _P_ the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. Return ? OrdinaryMetadataKeys(_O_, _P_).\r\n      </emu-alg>\r\n      <emu-clause id=\"ordinarymetadatakeys\" aoid=\"OrdinaryMetadataKeys\">\r\n        <h1>OrdinaryMetadataKeys ( O, P )</h1>\r\n        <p>When the abstract operation OrdinaryMetadataKeys is called with Object _O_ and property key _P_ the following steps are taken:</p>\r\n        <emu-alg>\r\n          1. Assert: _P_ is *undefined* or IsPropertyKey(_P_) is *true*.\r\n          2. Let _ownKeys_ be ? OrdinaryOwnMetadataKeys(_O_, _P_).\r\n          3. Let _parent_ be ? _O_.[[GetPrototypeOf]]().\r\n          4. If _parent_ is *null*, then return _ownKeys_.\r\n          5. Let _parentKeys_ be ? _O_.[[OrdinaryMetadataKeys]](_P_).\r\n          6. Let _ownKeysLen_ = ? Get(_ownKeys_, \"length\").\r\n          7. If _ownKeysLen_ is *0*, return _parentKeys_.\r\n          8. Let _parentKeysLen_ = ? Get(_parentKeys_, \"length\").\r\n          9. If _parentKeysLen_ is *0*, return _ownKeys_.\r\n          10. Let _set_ be a newly created *Set* object.\r\n          11. Let _keys_ be ? ArrayCreate(0).\r\n          12. Let _k_ be *0*.\r\n          13. For each element _key_ of _ownKeys_\r\n            1. Let _hasKey_ be ? Invoke(_set_, `\"has\"`, _key_).\r\n            2. If _hasKey_ is *false*, then\r\n              1. Let _Pk_ be ! ToString(_k_).\r\n              2. Perform ? Invoke(_set_, \"add\", _key_).\r\n              3. Let _defineStatus_ be CreateDataProperty(_keys_, _Pk_, _key_).\r\n              4. Assert: _defineStatus_ is *true*.\r\n              5. Increase _k_ by *1*.\r\n          14. For each element _key_ of _parentKeys_\r\n            1. Let _hasKey_ be ? Invoke(_set_, `\"has\"`, _key_).\r\n            2. If _hasKey_ is *false*, then\r\n              1. Let _Pk_ be ! ToString(_k_).\r\n              2. Perform ? Invoke(_set_, `\"add\"`, _key_).\r\n              3. Let _defineStatus_ be CreateDataProperty(_keys_, _Pk_, _key_).\r\n              4. Assert: _defineStatus_ is *true*.\r\n              5. Increase _k_ by *1*.\r\n          15. Perform ? Set(_keys_, `\"length\"`, _k_).\r\n          16. return _keys_.\r\n        </emu-alg>\r\n      </emu-clause>\r\n    </emu-clause>\r\n\r\n    <emu-clause id=\"ordinary-object-internal-methods-and-internal-slots-ownmetadatakeys\">\r\n      <h1>[[OwnMetadataKeys]] ( P )</h1>\r\n      <p>When the [[OwnMetadataKeys]] internal method of _O_ is called with property key _P_ the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. Return OrdinaryOwnMetadataKeys(_O_, _P_).\r\n      </emu-alg>\r\n      <emu-clause id=\"ordinaryownmetadatakeys\" aoid=\"OrdinaryOwnMetadataKeys\">\r\n        <h1>OrdinaryOwnMetadataKeys ( O, P )</h1>\r\n        <p>When the abstract operation OrdinaryOwnMetadataKeys is called with Object _O_ and property key _P_ the following steps are taken:</p>\r\n        <emu-alg>\r\n          1. Assert: _P_ is *undefined* or IsPropertyKey(_P_) is *true*.\r\n          2. Let _keys_ be ? ArrayCreate(0).\r\n          3. Let _metadataMap_ be ? GetOrCreateMetadataMap(_O_, _P_, *false*).\r\n          4. If _metadataMap_ is *undefined*, return _keys_.\r\n          5. Let _keysObj_ be ? Invoke(_metadataMap_, `\"keys\"`).\r\n          6. Let _iterator_ be ? GetIterator(_keysObj_).\r\n          7. Let _k_ be *0*.\r\n          8. Repeat\r\n            1. Let _Pk_ be ! ToString(_k_).\r\n            2. Let _next_ be ? IteratorStep(_iterator_).\r\n            3. If _next_ is *false*, then\r\n              1. Let _setStatus_ be ? Set(_keys_, `\"length\"`, _k_, _true_).\r\n              2. Assert: _setStatus_ is *true*.\r\n              3. Return _keys_.\r\n            4. Let _nextValue_ be ? IteratorValue(_next_).\r\n            5. Let _defineStatus_ be CreateDataPropertyOrThrow(_keys_, _Pk_, _nextValue_).\r\n            6. If _defineStatus_ is an abrupt completion, return ? IteratorClose(_iterator_, _defineStatus_).\r\n            7. Increase _k_ by *1*.\r\n        </emu-alg>\r\n      </emu-clause>\r\n    </emu-clause>\r\n\r\n    <emu-clause id=\"ordinary-object-internal-methods-and-internal-slots-deletemetadata\">\r\n      <h1>[[DeleteMetadata]]( MetadataKey, P )</h1>\r\n      <p>When the [[DeleteMetadata]] internal method of _O_ is called with ECMAScript language value _MetadataKey_ and property key _P_ the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. Assert: _P_ is *undefined* or IsPropertyKey(_P_) is *true*.\r\n        2. Let _metadataMap_ be ? GetOrCreateMetadataMap(_O_, _P_, *false*).\r\n        4. If _metadataMap_ is *undefined*, return *false*.\r\n        5. Return ? Invoke(_metadataMap_, `\"delete\"`, _MetadataKey_).\r\n      </emu-alg>\r\n    </emu-clause>\r\n  </emu-clause>\r\n</emu-clause>\r\n\r\n<emu-clause id=\"reflection\">\r\n  <h1>Reflection</h1>\r\n  <emu-clause id=\"reflect\">\r\n    <h1>The Reflect Object</h1>\r\n    <p>This section contains amendments to the Reflect object.</p>\r\n    <emu-clause id=\"reflect-metadatadecoratorfunctions\">\r\n      <h1>Metadata Decorator Functions</h1>\r\n      <p>A metadata decorator function is an anonymous built-in function that has [[MetadataKey]] and [[MetadataValue]] internal slots.</p>\r\n      <p>When a metadata decorator function _F_ is called with arguments _target_ and _key_, the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. Assert: _F_ has a [[MetadataKey]] internal slot whose value is an ECMAScript language value, or *undefined*.\r\n        2. Assert: _F_ has a [[MetadataValue]] internal slot whose value is an ECMAScript language value, or *undefined*.\r\n        3. If Type(_target_) is not Object, throw a *TypeError* exception.\r\n        4. If _key_ is not *undefined* and IsPropertyKey(_key_) is *false*, throw a *TypeError* exception.\r\n        5. Let _metadataKey_ be the value of _F_'s [[MetadataKey]] internal slot.\r\n        6. Let _metadataValue_ be the value of _F_'s [[MetadataValue]] internal slot.\r\n        7. Perform ? _target_.[[DefineMetadata]](_metadataKey_, _metadataValue_, _target_, _key_).\r\n        8. Return *undefined*.\r\n      </emu-alg>\r\n    </emu-clause>\r\n\r\n    <emu-clause id=\"reflect.metadata\">\r\n      <h1>Reflect.metadata ( metadataKey, metadataValue )</h1>\r\n      <p>When the `metadata` function is called with arguments _metadataKey_ and _metadataValue_, the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. Let _decorator_ be a new built-in function object as defined in Metadata Decorator Functions.\r\n        2. Set the [[MetadataKey]] internal slot of _decorator_ to _metadataKey_.\r\n        3. Set the [[MetadataValue]] internal slot of _decorator_ to _metadataValue_.\r\n        4. Return _decorator_.\r\n      </emu-alg>\r\n    </emu-clause>\r\n\r\n    <emu-clause id=\"reflect.definemetadata\">\r\n      <h1>Reflect.defineMetadata ( metadataKey, metadataValue, target [, propertyKey] )</h1>\r\n      <p>When the `defineMetadata` function is called with arguments _metadataKey_, _metadataValue_, _target_, and _propertyKey_, the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. If Type(_target_) is not Object, throw a *TypeError* exception.\r\n        2. Return ? _target_.[[DefineMetadata]](_metadataKey_, _metadataValue_, _propertyKey_).\r\n      </emu-alg>\r\n    </emu-clause>\r\n\r\n    <emu-clause id=\"reflect.hasmetadata\">\r\n      <h1>Reflect.hasMetadata ( metadataKey, target [, propertyKey] )</h1>\r\n      <p>When the `hasMetadata` function is called with arguments _metadataKey_, _target_, and _propertyKey_, the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. If Type(_target_) is not Object, throw a *TypeError* exception.\r\n        2. Return ? _target_.[[HasMetadata]](_metadataKey_, _propertyKey_).\r\n      </emu-alg>\r\n    </emu-clause>\r\n\r\n    <emu-clause id=\"reflect.hasownmetadata\">\r\n      <h1>Reflect.hasOwnMetadata ( metadataKey, target [, propertyKey] )</h1>\r\n      <p>When the `hasOwnMetadata` function is called with arguments _metadataKey_, _target_, and _propertyKey_, the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. If Type(_target_) is not Object, throw a *TypeError* exception.\r\n        2. Return ? _target_.[[HasOwn]](_metadataKey_, _propertyKey_).\r\n      </emu-alg>\r\n    </emu-clause>\r\n\r\n    <emu-clause id=\"reflect.getmetadata\">\r\n      <h1>Reflect.getMetadata ( metadataKey, target [, propertyKey] )</h1>\r\n      <p>When the `getMetadata` function is called with arguments _metadataKey_, _target_, and _propertyKey_, the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. If Type(_target_) is not Object, throw a *TypeError* exception.\r\n        2. Return ? _target_.[[GetMetadata]](_metadataKey_, _propertyKey_).\r\n      </emu-alg>\r\n    </emu-clause>\r\n\r\n    <emu-clause id=\"reflect.getownmetadata\">\r\n      <h1>Reflect.getOwnMetadata ( metadataKey, target [, propertyKey] )</h1>\r\n      <p>When the `getOwnMetadata` function is called with arguments _metadataKey_, _target_, and _propertyKey_, the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. If Type(_target_) is not Object, throw a *TypeError* exception.\r\n        2. Return ? _target_.[[GetOwnMetadata]](_metadataKey_, _propertyKey_).\r\n      </emu-alg>\r\n    </emu-clause>\r\n\r\n    <emu-clause id=\"reflect.getmetadatakeys\">\r\n      <h1>Reflect.getMetadataKeys ( target [, propertyKey] )</h1>\r\n      <p>When the `getMetadataKeys` function is called with arguments _target_ and _propertyKey_, the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. If Type(_target_) is not Object, throw a *TypeError* exception.\r\n        2. Return ? _target_.[[GetMetadataKeys]](_propertyKey_).\r\n      </emu-alg>\r\n    </emu-clause>\r\n\r\n    <emu-clause id=\"reflect.getownmetadatakeys\">\r\n      <h1>Reflect.getOwnMetadataKeys ( target [, propertyKey] )</h1>\r\n      <p>When the `getOwnMetadataKeys` function is called with arguments _target_ and _propertyKey_, the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. If Type(_target_) is not Object, throw a *TypeError* exception.\r\n        2. Return ? _target_.[[GetOwnMetadataKeys]](_propertyKey_).\r\n      </emu-alg>\r\n    </emu-clause>\r\n\r\n    <emu-clause id=\"reflect.deletemetadata\">\r\n      <h1>Reflect.deleteMetadata ( metadataKey, target [, propertyKey] )</h1>\r\n      <p>When the `deleteMetadata` function is called with arguments _metadataKey_, _target_, and _propertyKey_, the following steps are taken:</p>\r\n      <emu-alg>\r\n        1. If Type(_target_) is not Object, throw a *TypeError* exception.\r\n        2. Return ? _target_.[[DeleteMetadata]](_metadataKey_, _propertyKey_).\r\n      </emu-alg>\r\n    </emu-clause>\r\n  </emu-clause>\r\n</emu-clause>\r\n"
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        },
        {
          "name": "standalone.d.ts",
          "type": "blob",
          "size": 20.1552734375,
          "content": "/*! *****************************************************************************\r\nCopyright (C) Microsoft. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\ndeclare namespace Reflect {\r\n    /**\r\n      * Applies a set of decorators to a target object.\r\n      * @param decorators An array of decorators.\r\n      * @param target The target object.\r\n      * @returns The result of applying the provided decorators.\r\n      * @remarks Decorators are applied in reverse order of their positions in the array.\r\n      * @example\r\n      *\r\n      *     class Example { }\r\n      *\r\n      *     // constructor\r\n      *     Example = Reflect.decorate(decoratorsArray, Example);\r\n      *\r\n      */\r\n    function decorate(decorators: ClassDecorator[], target: Function): Function;\r\n    /**\r\n      * Applies a set of decorators to a property of a target object.\r\n      * @param decorators An array of decorators.\r\n      * @param target The target object.\r\n      * @param propertyKey The property key to decorate.\r\n      * @param attributes A property descriptor.\r\n      * @remarks Decorators are applied in reverse order.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod() { }\r\n      *         method() { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Object.defineProperty(Example, \"staticMethod\",\r\n      *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\r\n      *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\r\n      *\r\n      *     // method (on prototype)\r\n      *     Object.defineProperty(Example.prototype, \"method\",\r\n      *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\r\n      *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\r\n      *\r\n      */\r\n    function decorate(decorators: (PropertyDecorator | MethodDecorator)[], target: Object, propertyKey: string | symbol, attributes?: PropertyDescriptor): PropertyDescriptor;\r\n    /**\r\n      * A default metadata decorator factory that can be used on a class, class member, or parameter.\r\n      * @param metadataKey The key for the metadata entry.\r\n      * @param metadataValue The value for the metadata entry.\r\n      * @returns A decorator function.\r\n      * @remarks\r\n      * If `metadataKey` is already defined for the target and target key, the\r\n      * metadataValue for that key will be overwritten.\r\n      * @example\r\n      *\r\n      *     // constructor\r\n      *     @Reflect.metadata(key, value)\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // property (on constructor, TypeScript only)\r\n      *     class Example {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticProperty;\r\n      *     }\r\n      *\r\n      *     // property (on prototype, TypeScript only)\r\n      *     class Example {\r\n      *         @Reflect.metadata(key, value)\r\n      *         property;\r\n      *     }\r\n      *\r\n      *     // method (on constructor)\r\n      *     class Example {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticMethod() { }\r\n      *     }\r\n      *\r\n      *     // method (on prototype)\r\n      *     class Example {\r\n      *         @Reflect.metadata(key, value)\r\n      *         method() { }\r\n      *     }\r\n      *\r\n      */\r\n    function metadata(metadataKey: any, metadataValue: any): {\r\n        (target: Function): void;\r\n        (target: Object, propertyKey: string | symbol): void;\r\n    };\r\n    /**\r\n      * Define a unique metadata entry on the target.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param metadataValue A value that contains attached metadata.\r\n      * @param target The target object on which to define metadata.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\r\n      *\r\n      *     // decorator factory as metadata-producing annotation.\r\n      *     function MyAnnotation(options): ClassDecorator {\r\n      *         return target => Reflect.defineMetadata(\"custom:annotation\", options, target);\r\n      *     }\r\n      *\r\n      */\r\n    function defineMetadata(metadataKey: any, metadataValue: any, target: Object): void;\r\n    /**\r\n      * Define a unique metadata entry on the target.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param metadataValue A value that contains attached metadata.\r\n      * @param target The target object on which to define metadata.\r\n      * @param propertyKey The property key for the target.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", Number, Example.prototype, \"method\");\r\n      *\r\n      *     // decorator factory as metadata-producing annotation.\r\n      *     function MyAnnotation(options): PropertyDecorator {\r\n      *         return (target, key) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n      *     }\r\n      *\r\n      */\r\n    function defineMetadata(metadataKey: any, metadataValue: any, target: Object, propertyKey: string | symbol): void;\r\n    /**\r\n      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    function hasMetadata(metadataKey: any, target: Object): boolean;\r\n    /**\r\n      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    function hasMetadata(metadataKey: any, target: Object, propertyKey: string | symbol): boolean;\r\n    /**\r\n      * Gets a value indicating whether the target object has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    function hasOwnMetadata(metadataKey: any, target: Object): boolean;\r\n    /**\r\n      * Gets a value indicating whether the target object has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    function hasOwnMetadata(metadataKey: any, target: Object, propertyKey: string | symbol): boolean;\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    function getMetadata(metadataKey: any, target: Object): any;\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    function getMetadata(metadataKey: any, target: Object, propertyKey: string | symbol): any;\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    function getOwnMetadata(metadataKey: any, target: Object): any;\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    function getOwnMetadata(metadataKey: any, target: Object, propertyKey: string | symbol): any;\r\n    /**\r\n      * Gets the metadata keys defined on the target object or its prototype chain.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadataKeys(Example);\r\n      *\r\n      */\r\n    function getMetadataKeys(target: Object): any[];\r\n    /**\r\n      * Gets the metadata keys defined on the target object or its prototype chain.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\r\n      *\r\n      */\r\n    function getMetadataKeys(target: Object, propertyKey: string | symbol): any[];\r\n    /**\r\n      * Gets the unique metadata keys defined on the target object.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadataKeys(Example);\r\n      *\r\n      */\r\n    function getOwnMetadataKeys(target: Object): any[];\r\n    /**\r\n      * Gets the unique metadata keys defined on the target object.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\r\n      *\r\n      */\r\n    function getOwnMetadataKeys(target: Object, propertyKey: string | symbol): any[];\r\n    /**\r\n      * Deletes the metadata entry from the target object with the provided key.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\r\n      *\r\n      */\r\n    function deleteMetadata(metadataKey: any, target: Object): boolean;\r\n    /**\r\n      * Deletes the metadata entry from the target object with the provided key.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param propertyKey The property key for the target.\r\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n      * @example\r\n      *\r\n      *     class Example {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n      *\r\n      */\r\n    function deleteMetadata(metadataKey: any, target: Object, propertyKey: string | symbol): boolean;\r\n}"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig-release.json",
          "type": "blob",
          "size": 0.412109375,
          "content": "{\r\n  \"compilerOptions\": {\r\n    \"target\": \"es5\",\r\n    \"module\": \"commonjs\",\r\n    \"newLine\": \"LF\",\r\n    \"sourceMap\": false,\r\n    \"strictNullChecks\": true,\r\n    \"noImplicitAny\": true,\r\n    \"noUnusedLocals\": true,\r\n    \"noUnusedParameters\": true,\r\n    \"noImplicitReturns\": true,\r\n    \"noImplicitThis\": true\r\n  },\r\n  \"files\": [\r\n    \"globals.d.ts\",\r\n    \"Reflect.ts\",\r\n    \"ReflectLite.ts\",\r\n    \"ReflectNoConflict.ts\",\r\n  ]\r\n}"
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.4111328125,
          "content": "{\r\n  \"compilerOptions\": {\r\n    \"target\": \"es5\",\r\n    \"module\": \"commonjs\",\r\n    \"newLine\": \"LF\",\r\n    \"sourceMap\": true,\r\n    \"strictNullChecks\": true,\r\n    \"noImplicitAny\": true,\r\n    \"noUnusedLocals\": true,\r\n    \"noUnusedParameters\": true,\r\n    \"noImplicitReturns\": true,\r\n    \"noImplicitThis\": true\r\n  },\r\n  \"files\": [\r\n    \"globals.d.ts\",\r\n    \"Reflect.ts\",\r\n    \"ReflectLite.ts\",\r\n    \"ReflectNoConflict.ts\",\r\n  ]\r\n}"
        }
      ]
    }
  ]
}