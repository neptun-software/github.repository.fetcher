{
  "metadata": {
    "timestamp": 1736564046538,
    "page": 592,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "NapNeko/NapCatQQ",
      "stars": 3025,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.595703125,
          "content": "# EditorConfig is awesome: https://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\nend_of_line = lf\ninsert_final_newline = true\n\n# Matches multiple files with brace expansion notation\n# Set default charset\ncharset = utf-8\n\n# 2 space indentation\n[*.{cjs,mjs,js,jsx,ts,tsx,css,scss,sass,html,json}]\nindent_style = space\nindent_size = 4\n\n[*.bat]\ncharset = latin1\n\n# Unfortunately, EditorConfig doesn't support space configuration inside import braces directly.\n# You'll need to rely on your linter/formatter like ESLint or Prettier for that.\n"
        },
        {
          "name": ".env.framework",
          "type": "blob",
          "size": 0.05859375,
          "content": "VITE_BUILD_TYPE = Production\nVITE_BUILD_PLATFORM = Framework"
        },
        {
          "name": ".env.shell",
          "type": "blob",
          "size": 0.0556640625,
          "content": "VITE_BUILD_TYPE = Production\nVITE_BUILD_PLATFORM = Shell\n"
        },
        {
          "name": ".env.universal",
          "type": "blob",
          "size": 0.05859375,
          "content": "VITE_BUILD_TYPE = Production\nVITE_BUILD_PLATFORM = Universal"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.19140625,
          "content": "# Develop\nnode_modules/\npackage-lock.json\npnpm-lock.yaml\nout/\ndist/\n/src/core.lib/common/\n/localdebug/\n\n# Editor\n.vscode/*\n!.vscode/extensions.json\n.idea/*\n\n# Build\n*.db\ncheckVersion.sh\nbun.lockb\n"
        },
        {
          "name": ".prettierrc.json",
          "type": "blob",
          "size": 0.193359375,
          "content": "{\n    \"trailingComma\": \"es5\",\n    \"tabWidth\": 4,\n    \"semi\": true,\n    \"singleQuote\": true,\n    \"bracketSpacing\": true,\n    \"arrowParens\": \"always\",\n    \"printWidth\": 120,\n    \"endOfLine\": \"auto\"\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1708984375,
          "content": "Limited Redistribution License for NapCat\n\nCopyright © 2024 Mlikiowa\n\n1. Usage and Reproduction:\n   - Unauthorized use, reproduction, modification, or distribution of this code is prohibited without explicit permission from the main author of the NapCat repository.\n   \n2. Redistribution:\n   - Redistribution of this code is permitted, provided that the full text of this license is included, and the source and copyright information is clearly stated.\n   - Minor modifications and extensions are allowed for redistribution purposes, but the modified code must not be publicly released.\n\n3. Non-Commercial Use:\n   - This code is not to be used for any commercial purposes.\n\n4. Additional Permissions:\n   - Any rights not explicitly addressed in this license must be requested from and granted by the main author of the NapCat repository.\n\n5. Disclaimer:\n   - This code is provided \"as is,\" without any express or implied warranties, including but not limited to the implied warranties of merchantability and fitness for a particular purpose. In no event shall the author be liable for any damages or other liability arising from, out of, or in connection with the use or distribution of this code.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.37109375,
          "content": "<div align=\"center\">\n  \n![NapCatQQ](https://socialify.git.ci/NapNeko/NapCatQQ/image?font=Jost&logo=https%3A%2F%2Fnapneko.github.io%2Fassets%2Fnewlogo.png&name=1&owner=1&pattern=Diagonal+Stripes&stargazers=1&theme=Auto)\n  \n</div>\n\n---\n## 欢迎回家\nNapCatQQ 是现代化的基于 NTQQ 的 Bot 协议端实现\n\n## 特性介绍\n- [x] **安装简单**：就算是笨蛋也能使用\n- [x] **性能友好**：就算是低内存也能使用\n- [x] **接口丰富**：就算是没有也能使用\n- [x] **稳定好用**：就算是被捉也能使用\n\n## 使用框架\n\n可前往 [Release](https://github.com/NapNeko/NapCatQQ/releases/) 页面下载最新版本\n\n**首次使用**请务必查看如下文档看使用教程\n\n### 文档地址\n\n[Cloudflare.Worker](https://doc.napneko.icu/)\n\n[Cloudflare.HKServer](https://napcat.napneko.icu/)\n\n[Github.IO](https://napneko.github.io/)\n\n[Cloudflare.Pages](https://napneko.pages.dev/)\n\n[Server.Other](https://docs.napcat.cyou/)\n\n[Qbot.News](https://neko.qbot.news)\n\n## 回家旅途\n[QQ Group#1](https://qm.qq.com/q/I6LU87a0Yq)\n\n[QQ Group#2](https://qm.qq.com/q/uqh4I87KoM)\n\n[Telegram](https://t.me/MelodicMoonlight)\n\n> QQ Group#2 准许Bot / Telegram与QQ Group#2 为新建Group\n\n## 性能设计/协议标准\nNapCat 已实现90％+的 OneBot / GoCQ 标准接口，并提供兼容性保留接口，其设计理念遵守 无数据库/异步优先/后台刷新 的性能思想。\n\n由此设计带来一系列好处，在开发中，获取群员列表通常小于50Ms，单条文本消息发送在320Ms以内，在1k+的群聊流畅运行，同时带来一些副作用，上报数据中大量使用Magic生成字段，消息Id无法持久，无法上报撤回消息原始内容。\n\nNapCat 在设计理念下遵守 OneBot 规范大多数要求并且积极改进，任何合理的标准化 Issue 与 Pr 将被接收。\n\n## 感谢他们\n感谢 [Lagrange](https://github.com/LagrangeDev/Lagrange.Core) 对本项目的大力支持 参考部分代码 已获授权\n\n感谢 Tencent Tdesign / Vue3 强力驱动 NapCat.WebUi\n\n不过最最重要的 还是需要感谢屏幕前的你哦~\n\n---\n\n## 特殊感谢\n[LLOneBot](https://github.com/LLOneBot/LLOneBot) 相关的开发曾参与本项目\n\n## 开源附加\n\n任何使用本仓库代码的地方，都应当严格遵守[本仓库开源许可](./LICENSE)。**此外，禁止任何项目未经仓库主作者授权二次分发或基于 NapCat 代码开发。**\n"
        },
        {
          "name": "eslint.config.mjs",
          "type": "blob",
          "size": 1.8388671875,
          "content": "import typescriptEslint from \"@typescript-eslint/eslint-plugin\";\nimport _import from \"eslint-plugin-import\";\nimport { fixupPluginRules } from \"@eslint/compat\";\nimport globals from \"globals\";\nimport tsParser from \"@typescript-eslint/parser\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport js from \"@eslint/js\";\nimport { FlatCompat } from \"@eslint/eslintrc\";\n\nconst filename = fileURLToPath(import.meta.url);\nconst dirname = path.dirname(filename);\nconst compat = new FlatCompat({\n    baseDirectory: dirname,\n    recommendedConfig: js.configs.recommended,\n    allConfig: js.configs.all\n});\n\nexport default [{\n    ignores: [\"src/core/proto/\"],\n}, ...compat.extends(\"eslint:recommended\", \"plugin:@typescript-eslint/recommended\"), {\n    plugins: {\n        \"@typescript-eslint\": typescriptEslint,\n        import: fixupPluginRules(_import),\n    },\n\n    languageOptions: {\n        globals: {\n            ...globals.browser,\n            ...globals.node,\n        },\n\n        parser: tsParser,\n        ecmaVersion: \"latest\",\n        sourceType: \"module\",\n    },\n\n    settings: {\n        \"import/parsers\": {\n            \"@typescript-eslint/parser\": [\".ts\"],\n        },\n\n        \"import/resolver\": {\n            typescript: {\n                alwaysTryTypes: true,\n            },\n        },\n    },\n\n    rules: {\n        indent: [\"error\", 4],\n        semi: [\"error\", \"always\"],\n        \"no-unused-vars\": \"off\",\n        \"no-async-promise-executor\": \"off\",\n        \"@typescript-eslint/no-explicit-any\": \"off\",\n        \"@typescript-eslint/no-unused-vars\": \"off\",\n        \"@typescript-eslint/no-var-requires\": \"off\",\n        \"object-curly-spacing\": [\"error\", \"always\"],\n    },\n}, {\n    files: [\"**/.eslintrc.{js,cjs}\"],\n\n    languageOptions: {\n        globals: {\n            ...globals.node,\n        },\n        ecmaVersion: 5,\n        sourceType: \"commonjs\",\n    },\n}];\n"
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "launcher",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 684.37890625,
          "content": null
        },
        {
          "name": "manifest.json",
          "type": "blob",
          "size": 0.5439453125,
          "content": "{\n  \"manifest_version\": 4,\n  \"type\": \"extension\",\n  \"name\": \"NapCatQQ\",\n  \"slug\": \"NapCat.Framework\",\n  \"description\": \"高性能的 OneBot 11 协议实现\",\n  \"version\": \"4.3.3\",\n  \"icon\": \"./logo.png\",\n  \"authors\": [\n    {\n      \"name\": \"NapNeko\",\n      \"link\": \"https://github.com/NapNeko\"\n    }\n  ],\n  \"repository\": {\n    \"repo\": \"NapNeko/NapCatQQ\",\n    \"branch\": \"main\"\n  },\n  \"platform\": [\n    \"win32\",\n    \"linux\",\n    \"darwin\"\n  ],\n  \"injects\": {\n    \"renderer\": \"./renderer.js\",\n    \"main\": \"./liteloader.cjs\",\n    \"preload\": \"./preload.cjs\"\n  }\n}\n"
        },
        {
          "name": "napcat.webui",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.1083984375,
          "content": "{\n  \"name\": \"napcat\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"version\": \"4.3.3\",\n  \"scripts\": {\n    \"build:universal\": \"npm run build:webui && vite build --mode universal || exit 1\",\n    \"build:framework\": \"npm run build:webui && vite build --mode framework || exit 1\",\n    \"build:shell\": \"npm run build:webui && vite build --mode shell || exit 1\",\n    \"build:webui\": \"cd napcat.webui && vite build\",\n    \"dev:universal\": \"vite build --mode universal\",\n    \"dev:framework\": \"vite build --mode framework\",\n    \"dev:shell\": \"vite build --mode shell\",\n    \"dev:webui\": \"cd napcat.webui && npm run webui:dev\",\n    \"lint\": \"eslint --fix src/**/*.{js,ts,vue}\",\n    \"depend\": \"cd dist && npm install --omit=dev\",\n    \"dev:depend\": \"npm i && cd napcat.webui && npm i\"\n  },\n  \"devDependencies\": {\n    \"esbuild\": \"0.24.0\",\n    \"@babel/preset-typescript\": \"^7.24.7\",\n    \"@eslint/compat\": \"^1.2.2\",\n    \"@eslint/eslintrc\": \"^3.1.0\",\n    \"@eslint/js\": \"^9.14.0\",\n    \"@log4js-node/log4js-api\": \"^1.0.2\",\n    \"@napneko/nap-proto-core\": \"^0.0.4\",\n    \"@rollup/plugin-typescript\": \"^12.1.2\",\n    \"@rollup/plugin-node-resolve\": \"^16.0.0\",\n    \"@types/cors\": \"^2.8.17\",\n    \"@sinclair/typebox\": \"^0.34.9\",\n    \"@types/express\": \"^5.0.0\",\n    \"@types/fluent-ffmpeg\": \"^2.1.24\",\n    \"@types/node\": \"^22.0.1\",\n    \"@types/qrcode-terminal\": \"^0.12.2\",\n    \"@types/ws\": \"^8.5.12\",\n    \"@typescript-eslint/eslint-plugin\": \"^8.3.0\",\n    \"@typescript-eslint/parser\": \"^8.3.0\",\n    \"ajv\": \"^8.13.0\",\n    \"async-mutex\": \"^0.5.0\",\n    \"commander\": \"^13.0.0\",\n    \"cors\": \"^2.8.5\",\n    \"eslint\": \"^9.14.0\",\n    \"eslint-import-resolver-typescript\": \"^3.6.1\",\n    \"eslint-plugin-import\": \"^2.29.1\",\n    \"fast-xml-parser\": \"^4.3.6\",\n    \"file-type\": \"^19.0.0\",\n    \"globals\": \"^15.12.0\",\n    \"image-size\": \"^1.1.1\",\n    \"typescript\": \"^5.3.3\",\n    \"typescript-eslint\": \"^8.13.0\",\n    \"vite\": \"^6.0.1\",\n    \"vite-plugin-cp\": \"^4.0.8\",\n    \"vite-tsconfig-paths\": \"^5.1.0\",\n    \"winston\": \"^3.17.0\"\n  },\n  \"dependencies\": {\n    \"express\": \"^5.0.0\",\n    \"fluent-ffmpeg\": \"^2.1.2\",\n    \"piscina\": \"^4.7.0\",\n    \"qrcode-terminal\": \"^0.12.0\",\n    \"silk-wasm\": \"^3.6.1\",\n    \"ws\": \"^8.18.0\"\n  }\n}\n"
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.9013671875,
          "content": "{\n    \"compilerOptions\": {\n        \"target\": \"ES2021\",\n        \"useDefineForClassFields\": true,\n        \"module\": \"ESNext\",\n        \"lib\": [\n            \"ES2021\",\n            \"DOM\",\n            \"DOM.Iterable\"\n        ],\n        \"skipLibCheck\": true,\n        \"moduleResolution\": \"Node\",\n        \"experimentalDecorators\": true,\n        \"allowImportingTsExtensions\": false,\n        \"allowSyntheticDefaultImports\": true,\n        \"resolveJsonModule\": true,\n        \"isolatedModules\": true,\n        \"noEmit\": true,\n        \"jsx\": \"preserve\",\n        \"strict\": true,\n        \"noUnusedLocals\": false,\n        \"noUnusedParameters\": false,\n        \"noFallthroughCasesInSwitch\": true,\n        \"sourceMap\": true,\n        \"paths\": {\n            \"@/*\": [\n                \"./src/*\"\n            ],\n            \"@webapi/*\": [\n                \"./src/webui/src/*\"\n            ],\n        }\n    },\n    \"include\": [\n        \"src/**/*.ts\"\n    ]\n}"
        },
        {
          "name": "vite.config.ts",
          "type": "blob",
          "size": 6.1845703125,
          "content": "import cp from 'vite-plugin-cp';\nimport { defineConfig, PluginOption, UserConfig } from 'vite';\nimport { resolve } from 'path';\nimport nodeResolve from '@rollup/plugin-node-resolve';\nimport { builtinModules } from 'module';\n//依赖排除\nconst external = ['silk-wasm', 'ws', 'express', 'qrcode-terminal', 'fluent-ffmpeg', 'piscina'];\nconst nodeModules = [...builtinModules, builtinModules.map((m) => `node:${m}`)].flat();\n\nlet startScripts: string[] | undefined = undefined;\nif (process.env.NAPCAT_BUILDSYS == 'linux') {\n    startScripts = [];\n} else if (process.env.NAPCAT_BUILDSYS == 'win32') {\n    startScripts = ['./script/KillQQ.bat'];\n} else {\n    startScripts = ['./script/KillQQ.bat'];\n}\n\nconst UniversalBaseConfigPlugin: PluginOption[] = [\n    cp({\n        targets: [\n            { src: './manifest.json', dest: 'dist' },\n            { src: './src/core/external/napcat.json', dest: 'dist/config/' },\n            { src: './src/native/packet', dest: 'dist/moehoo', flatten: false },\n            { src: './napcat.webui/dist/', dest: 'dist/static/', flatten: false },\n            { src: './src/framework/liteloader.cjs', dest: 'dist' },\n            { src: './src/framework/napcat.cjs', dest: 'dist' },\n            { src: './src/framework/preload.cjs', dest: 'dist' },\n            { src: './src/framework/renderer.js', dest: 'dist' },\n            { src: './package.json', dest: 'dist' },\n            { src: './logo.png', dest: 'dist' },\n            { src: './launcher/', dest: 'dist', flatten: true },\n            ...startScripts.map((startScript) => {\n                return { src: startScript, dest: 'dist' };\n            }),\n        ],\n    }),\n    nodeResolve(),\n];\n\nconst FrameworkBaseConfigPlugin: PluginOption[] = [\n    cp({\n        targets: [\n            { src: './manifest.json', dest: 'dist' },\n            { src: './src/core/external/napcat.json', dest: 'dist/config/' },\n            { src: './src/native/packet', dest: 'dist/moehoo', flatten: false },\n            { src: './napcat.webui/dist/', dest: 'dist/static/', flatten: false },\n            { src: './src/framework/liteloader.cjs', dest: 'dist' },\n            { src: './src/framework/napcat.cjs', dest: 'dist' },\n            { src: './src/framework/preload.cjs', dest: 'dist' },\n            { src: './src/framework/renderer.js', dest: 'dist' },\n            { src: './package.json', dest: 'dist' },\n            { src: './logo.png', dest: 'dist' },\n        ],\n    }),\n    nodeResolve(),\n];\n\n\nconst ShellBaseConfigPlugin: PluginOption[] = [\n    cp({\n        targets: [\n            { src: './src/native/packet', dest: 'dist/moehoo', flatten: false },\n            { src: './napcat.webui/dist/', dest: 'dist/static/', flatten: false },\n            { src: './src/core/external/napcat.json', dest: 'dist/config/' },\n            { src: './package.json', dest: 'dist' },\n            { src: './launcher/', dest: 'dist', flatten: true },\n            ...startScripts.map((startScript) => {\n                return { src: startScript, dest: 'dist' };\n            }),\n        ],\n    }),\n    nodeResolve(),\n];\nconst UniversalBaseConfig = () =>\n    defineConfig({\n        resolve: {\n            conditions: ['node', 'default'],\n            alias: {\n                '@/core': resolve(__dirname, './src/core'),\n                '@': resolve(__dirname, './src'),\n                './lib-cov/fluent-ffmpeg': './lib/fluent-ffmpeg',\n                '@webapi': resolve(__dirname, './src/webui/src'),\n            },\n        },\n        build: {\n            sourcemap: false,\n            target: 'esnext',\n            minify: false,\n            lib: {\n                entry: {\n                    napcat: 'src/universal/napcat.ts',\n                    'audio-worker': 'src/common/audio-worker.ts',\n                },\n                formats: ['es'],\n                fileName: (_, entryName) => `${entryName}.mjs`,\n            },\n            rollupOptions: {\n                external: [...nodeModules, ...external],\n            },\n        },\n    });\n\n\nconst ShellBaseConfig = () =>\n    defineConfig({\n        resolve: {\n            conditions: ['node', 'default'],\n            alias: {\n                '@/core': resolve(__dirname, './src/core'),\n                '@': resolve(__dirname, './src'),\n                './lib-cov/fluent-ffmpeg': './lib/fluent-ffmpeg',\n                '@webapi': resolve(__dirname, './src/webui/src'),\n            },\n        },\n        build: {\n            sourcemap: false,\n            target: 'esnext',\n            minify: false,\n            lib: {\n                entry: {\n                    napcat: 'src/shell/napcat.ts',\n                    'audio-worker': 'src/common/audio-worker.ts',\n                },\n                formats: ['es'],\n                fileName: (_, entryName) => `${entryName}.mjs`,\n            },\n            rollupOptions: {\n                external: [...nodeModules, ...external],\n            },\n        },\n    });\n\nconst FrameworkBaseConfig = () =>\n    defineConfig({\n        resolve: {\n            conditions: ['node', 'default'],\n            alias: {\n                '@/core': resolve(__dirname, './src/core'),\n                '@': resolve(__dirname, './src'),\n                './lib-cov/fluent-ffmpeg': './lib/fluent-ffmpeg',\n                '@webapi': resolve(__dirname, './src/webui/src'),\n            },\n        },\n        build: {\n            sourcemap: false,\n            target: 'esnext',\n            minify: false,\n            lib: {\n                entry: {\n                    napcat: 'src/framework/napcat.ts',\n                    'audio-worker': 'src/common/audio-worker.ts',\n                },\n                formats: ['es'],\n                fileName: (_, entryName) => `${entryName}.mjs`,\n            },\n            rollupOptions: {\n                external: [...nodeModules, ...external],\n            },\n        },\n    });\n\nexport default defineConfig(({ mode }): UserConfig => {\n    if (mode === 'shell') {\n        return {\n            ...ShellBaseConfig(),\n            plugins: [...ShellBaseConfigPlugin],\n        };\n    } else if (mode == 'universal') {\n        return {\n            ...UniversalBaseConfig(),\n            plugins: [...UniversalBaseConfigPlugin],\n        };\n    } else {\n        return {\n            ...FrameworkBaseConfig(),\n            plugins: [...FrameworkBaseConfigPlugin],\n        };\n    }\n});\n"
        }
      ]
    }
  ]
}