{
  "metadata": {
    "timestamp": 1736564021571,
    "page": 562,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "crawlab-team/artipub",
      "stars": 3086,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0283203125,
          "content": "**/node_modules\n./extensions\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2392578125,
          "content": "# http://editorconfig.org\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "/lambda/\n/scripts\n/config\n"
        },
        {
          "name": ".eslintrc.js",
          "type": "blob",
          "size": 0.1962890625,
          "content": "module.exports = {\n  extends: [require.resolve('@umijs/fabric/dist/eslint')],\n  globals: {\n    ANT_DESIGN_PRO_ONLY_DO_NOT_USE_IN_YOUR_PRODUCTION: true,\n    page: true,\n    REACT_APP_ENV: true,\n  },\n};\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1533203125,
          "content": "dist/js\nnode_modules\nlogs/\n.idea/\ntmp/\nyarn.lock\n.DS_Store\npackage-lock.json\n.umi/\ndist/\n.history\nfrontend/config/config.prod.ts\nbackend/src/config/.env.prod"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.001953125,
          "content": "*\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.802734375,
          "content": "## v0.1.4 (2019-10-12)\n\n#### Features / Enhancement\n- Integrated Wechat platform (very basic, still under development)\n- Tag selector for Juejin.\n\n#### Bug Fixes\n- Fixed failure to publish on Segmentfault issue. [#54](https://github.com/crawlab-team/artipub/issues/54)\n- Fixed unable to save URL in the Chrome extension. [#38](https://github.com/crawlab-team/artipub/issues/38)\n- Fixed web page style inconsistency when using the Chrome extension. [#37](https://github.com/crawlab-team/artipub/issues/37)\n- Fixed failure to publish on Jianshu issue. [#32](https://github.com/crawlab-team/artipub/issues/32)\n\n## v0.1.3 (2019-09-25)\n\n#### Features / Enhancement\n\n- Multi-Title Publish\n- Better Editor ([react-markdown-editor-lite](https://www.npmjs.com/package/react-markdown-editor-lite))\n- Cookie Login Status Validation\n- Better Documentation (README)\n- Platform Integration\n    - [V2ex](https://v2ex.com)\n\n#### Bug Fixes\n- Fixed missing MongoDB parameter `authenticationDatabase` issue.\n- Fixed failure to publish articles on Zhihu (actually published successfully). [#27](https://github.com/crawlab-team/artipub/issues/27)\n- Fixed missing HTML content issue. [#26](https://github.com/crawlab-team/artipub/issues/26) \n- Close `Chrome Browser Debug Mode` by default. [#22](https://github.com/crawlab-team/artipub/issues/22)\n\n## v0.1.2 (2019-09-20)\n\n#### Features / Enhancement\n\n- Article Edit\n- Article Publish\n- Article Stats \n- Login Helper\n- Platform Management\n- System Settings\n- Docker Deployment\n- NPM Package\n- Platform Integration\n    - [掘金](https://juejin.cn)\n    - [SegmentFault](https://segmentfault.com)\n    - [CSDN](https://csdn.net)\n    - [简书](https://jianshu.com)\n    - [知乎](https://zhihu.com)\n    - [开源中国](https://oschina.net)\n    - [今日头条](https://toutiao.com)\n    - [博客园](https://cnblogs.com)\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2958984375,
          "content": "FROM jelastic/nodejs:14.16.0-npm\nRUN yum install -y nginx && yum clean all\nWORKDIR /app\nADD ./frontend/dist /frontend\nADD ./backend ./docker_init.sh ./nginx /app/\nRUN cp /app/artipub.conf /etc/nginx/conf.d/artipub.conf\nRUN npm install \nRUN npm run build-nomap\n\nEXPOSE 3000 8000\nCMD /app/docker_init.sh\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.484375,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2019, Crawlab Team\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.283203125,
          "content": "![ArtiPub 内容创作者的搬运工,一处书写，随处可见](https://s3.ax1x.com/2021/02/19/yfhxKg.png)\n\n![](https://img.shields.io/github/release/crawlab-team/artipub)\n![](https://img.shields.io/github/last-commit/crawlab-team/artipub)\n![](https://img.shields.io/github/issues/crawlab-team/artipub)\n![](https://img.shields.io/docker/pulls/tikazyq/artipub?logo=docker)\n![](https://img.shields.io/npm/dw/artipub?logo=npm)\n![](https://img.shields.io/github/license/crawlab-team/artipub)\n\nArtiPub (Article Publisher 的简称，意为 \"文章发布者\") 是一款开源的一文多发平台，可以帮助文章作者将编写好的文章自动发布到掘金、SegmentFault、CSDN、知乎、开源中国等技术媒体平台，传播优质知识，获取最大的曝光度。ArtiPub 安装简单，提供了多种安装方式，可以一键安装使用，安装一般只要 5 分钟。\n\nArtiPub 目前支持文章编辑、文章发布、数据统计的功能，后期我们会加入存量文章导入、数据分析的功能，让您更好的管理、优化您的技术文章。此外，我们还会接入更多媒体渠道，真正做到让文章随处可阅。\n\n> ⚠️⚠️⚠️ **增加登录注册功能之后，mongodb表结构发生较大变化，前后不兼容，建议重命名mongodb库名以做备份，后端应用启动后会重新初始化 `artipub` 库，再迁移原来文章至新表**\n\n## Demo 地址\nhttp://121.41.169.182:8000/\n\n浏览器插件配置后端地址: http://121.41.169.182:3000\n\n> ⚠️⚠️⚠️ **目前使用的是免费MongoDB服务，只有512M空间，会不定期删除内容，请自行做好文章备份。**\n\n由于各个平台会不定期更新文章发布页面，所以部分平台可能会失效，没有那么及时更新支持。请勿发布垃圾文章，否则账号可能会被对应平台封禁。\n## 支持平台\n\n- [x] [掘金](https://juejin.cn)\n- [x] [SegmentFault](https://segmentfault.com)\n- [x] [CSDN](https://csdn.net)\n- [x] [简书](https://jianshu.com)\n- [x] [知乎](https://zhihu.com)\n- [x] [开源中国](https://oschina.net)\n- [x] [今日头条](https://toutiao.com)\n- [x] [博客园](https://cnblogs.com)\n- [ ] [微博](https://weibo.com)\n- [x] [百度百家号](https://baijiahao.baidu.com)\n- [x] [51CTO](https://blog.51cto.com)\n- [x] [开发者头条](https://toutiao.io)\n- [x] 微信公众号\n\n### git clone 备用地址\n如若github clone网络过慢，可使用如下同步更新的国内仓库。\n- https://gitee.com/tanliyuan/artipub.git\n- ![CODING](https://via.placeholder.com/13/f03c15/000000?text=+)[<span><strong>腾讯CODING</strong></span>](http://t.hk.uy/rtg): https://e.coding.net/tanliyuan/artipub/Artipub.git\n  \n## 预览截图\n\n#### 登录注册\n\n![](https://z3.ax1x.com/2021/03/31/cA31BT.md.png)\n\n#### 平台管理\n\n![平台管理](http://cdn.pic.mtianyan.cn/blog_img/20200930050955.png)\n\n#### 文章管理\n\n![](https://raw.githubusercontent.com/tikazyq/my-static-files/master/artipub/screenshots/artipub-article.png)\n\n#### 文章编辑\n\n![](https://raw.githubusercontent.com/tikazyq/my-static-files/master/artipub/screenshots/artipub-article-edit.png)\n\n#### 文章发布\n\n![](http://cdn.pic.mtianyan.cn/blog_img/20200930051030.png)\n\n#### Chrome 插件\n\n![](https://raw.githubusercontent.com/tikazyq/my-static-files/master/artipub/screenshots/artipub-extension.png)\n\n## 安装要求\n\n#### Docker 安装\n\n- Docker: 18.03\n- Docker Compose: 1.24.1\n\n#### NPM 或源码安装\n\n- MongoDB: 3.6+\n- NodeJS: 10+\n- NPM: > 5+ , < 7+\n\n## 安装方式\n\nArtiPub 提供 3 种安装方式如下。\n\n- [Docker](# 通过 Docker 安装) (大约 5 分钟): 适合对 Docker 有一定基础的开发者\n- [npm](# 通过 npm 包安装) (大约 3 分钟): 适合熟悉 Node.js 或 npm 的开发者\n- [源码](# 通过源码安装) (大约 5-10 分钟): 适合希望了解内核原理的开发者\n\n### 通过 Docker 安装\n\n通过 Docker，可以免去安装 MongoDB 的步骤，也是我们最推荐的安装方式。使用 Docker 安装 ArtiPub 前，请确保您安装了 Docker 以及 Docker Compose。docker运行 ArtiPub 有两种方式。\n\n- 通过 docker-compose.yaml 启动\n  \n适用于你本地之前没有运行 `mongodb` 容器。 在您的项目目录下创建 `docker-compose.yaml` 文件，输入如下内容。\n\n```yaml\nversion: \"3.3\"\nservices:\n  app:\n    image: \"tanliyuan123/artipub:1.2.0\"\n    environment:\n      MONGO_HOST: \"mongo\"\n      # MONGO_USERNAME: root\n      # MONGO_PASSWORD: example\n      ARTIPUB_API_ADDRESS: \"http://localhost:3000\" # 后端API地址，如果安装地址不在本机，请修改为协议+服务器IP地址+端口号（默认为3000）\n    ports:\n      - \"8000:8000\" # frontend\n      - \"3000:3000\" # backend\n    depends_on:\n      - mongo\n  mongo:\n    image: mongo:latest\n    restart: always\n    #volumes:\n    #  - \"E:\\\\mongodb:/data/db\"\n    ports:\n      - \"27017:27017\"\n```\n\n然后在命令行中输入如下命令。如果你想再次启动容器时上次内容不会被销毁，去掉 `volumes` 两行的注释，改成自己本地路径即可。\n\n```bash\ndocker-compose up\n```\n\n然后在浏览器中输入 `http://localhost:8000` 可以看到界面。\n\n注意⚠️，如果您的 Docker 宿主机不是本机，例如您用了 Docker Machine 或者 Docker 服务在其他机器上，您需要将环境变量 `ARTIPUB_API_ADDRESS` 改为宿主机 IP + 端口号（默认 3000）。然后，在浏览器输入 `http://< 宿主机 IP>:8000` 即可看到界面。\n\n  - 独立启动 artipub 镜像\n  \n  如果你本地已有启动的mongodb容器，不想用上面方式再起一个。其中 `goofy_ganguly` 为本地已启动的 mongodb 容器名, 替换成你本地的即可。\n\n  ```bash\n  docker run --rm -it --link goofy_ganguly  -p 3000:3000/tcp  -p 8000:8000/tcp  tanliyuan123/artipub:1.2.0\n  ```\n\n### 通过 npm 包安装\n\n如果您对 npm 熟悉，且已经有 MongoDB 的环境，这是最为快捷的方式。\n\n从0.1.6版本开始前后端分开打包.\n\n**安装 artipub-front 前端包**\n\n[artipub-front](frontend/README.md)\n\n**安装 artipub-backend 后端包**\n\n[artipub-backend](backend/README.md)\n\n安装 npm 包时，为了加速下载速度，可以加入 `--registry` 参数来设置镜像源（后面源码安装时也可以这样操作）\n\n```bash\nnpm install -g artipub-frontend --registry=https://registry.npm.taobao.org\n```\n\n\n成功运行后，在浏览器中输入 `http://localhost:8000` 可以看到界面。\n\n### 通过源码安装\n\n**克隆 Github Repo**\n\n```bash\ngit clone https://github.com/crawlab-team/artipub\n```\n\n**安装 npm 包**\n\n```bash\ncd artipub/frontend\nnpm install\n\ncd artipub/backend\nnpm install\n```\n\n**启动前端**\n\n```bash\n//frontend 目录下\nnpm run dev\n```\n\n**启动后端**\n\n```bash\n//backend 目录下\nnpm run dev\n\n\n\n//运行prod 需先全局安装pm2\nnpm i pm2 -g\nnpm run prod\n```\n\n**配置数据库**\n\n数据库的配置在 `backend/src/config.ts` 中，可以按情况配置。\n\n**配置后端 API 地址**\n\n如果您部署的服务不在本机，需要在 `frontend/src/constants.ts` 中将 `apiEndpoint` 改成对应的 IP 地址 + 端口。\n\n## 原理\n\n利用了爬虫技术将文章发布到各大平台。ArtiPub 的爬虫是用了 Google 开发的自动化测试工具 Puppeteer，这个工具不仅可以获取需要有 ajax 动态内容的数据，还可以来做一些模拟操作，类似于 Selenium，但更强大。如何进行登陆操作呢？其实 ArtiPub 是通过 Chrome 插件获取了用户登陆信息（Cookie），将 Cookie 注入到 Puppeteer 操作的 Chromium 浏览器中，然后浏览器就可以正常登陆网站进行发文操作了。Cookie 是保存在用户自己搭建的 MongoDB 数据库里，不对外暴露，因此很安全。\n\n下图是 ArtiPub 的架构示意图：\n\n![img](https://deppwang.oss-cn-beijing.aliyuncs.com/blog/2020-04-11-112006.png)\n\n架构原理简介如下：\n\n- 后端（Backend）是整个架构的中枢，负责给前端交换数据、储存读取数据库、控制爬虫、收集 Cookie 等；\n- Chrome 插件（Chrome Extension）只负责从网站（Sites）获取 Cookie；\n- 爬虫（Spiders）被后端控制，负责在网站上发布文章和抓取数据；\n- 数据库（MongoDB）负责储存数据；\n- 前端（Frontend）是一个 React 应用，是 Ant Design Pro 改造而来的。\n\n## 为什么创建 ArtiPub\n\n程序员和技术人员常常会写技术文章和博客，用作技术分享、产品分享或提供咨询等等。技术博主通常需要在多个媒体渠道发布文章，例如掘金、SegmentFault、CSDN、知乎、简书、微信公众号等等，以求最大的关注度。但是，发布文章到这么多平台费时费神，需要不断地复制粘贴；同时，作者想查看阅读数时还需要来回切换各个网站来进行统计。这非常不方便。ArtiPub 主要就是为了来解决上述这些问题的。\n\n市面上已经存在一文多发平台了，例如 OpenWrite，为何还要创建 ArtiPub 呢？或许其他一文多发平台也是一个替代方案，但它们要求用户将自己的账户信息例如 Cookie 或账号密码上传到对方服务器，这很不安全，一旦平台发生问题，自己的账户信息会遭到泄漏。虽然我相信一般平台不会恶意操作用户的账户，但如果出现误操作，您的账户隐私将遭到泄漏，平台上的财产也可能遭到损坏，有这样的风险需要考虑。ArtiPub 不要求用户上传账户信息，所有账户信息全部保存在用户自己的数据库里，因此规避了这个安全风险。\n\n另外，由于 ArtiPub 是开源的，JS 源码也比较易于理解，可扩展性很强，用户如果有其他平台的接入需求，完全可以更改源码来实现自己的需求，不用等待平台更新。开发组也将持续开发 ArtiPub，将其打造得更实用和易用。\n\n\n## 贡献代码\n\n非常欢迎优秀的开发者来贡献 ArtiPub。在提 Pull Request 之前，请首先阅读源码，了解原理和架构。如果不懂的可以加作者微信 tikazyq1 注明 ArtiPub。\n\n## 社区\n\n如果您觉得 ArtiPub 对您有帮助，请扫描下方群二维码，如果群满，请加作者微信 tikazyq1 并注明 \"ArtiPub\"，作者会将你拉入群。\n\n<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/tikazyq/my-static-files/master/artipub/wechat-group.jpg\" height=\"360\">\n    <img src=\"https://raw.githubusercontent.com/tikazyq/my-static-files/master/artipub/wechat-profile.jpg\" height=\"360\">\n</p>\n"
        },
        {
          "name": "backend",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yaml",
          "type": "blob",
          "size": 0.56640625,
          "content": "version: \"3.3\"\nservices:\n  app:\n    image: \"tanliyuan123/artipub:1.3.0\"\n    environment:\n      MONGO_HOST: \"mongo\"\n      # MONGO_USERNAME: root\n      # MONGO_PASSWORD: example\n      ARTIPUB_API_ADDRESS: \"http://localhost:3000\" # 后端API地址，如果安装地址不在本机，请修改为协议+服务器IP地址+端口号（默认为3000）\n    ports:\n      - \"8000:8000\" # frontend\n      - \"3000:3000\" # backend\n    depends_on:\n      - mongo\n  mongo:\n    image: mongo:latest\n    restart: always\n    #volumes:\n    #  - \"E:\\\\mongodb:/data/db\"\n    ports:\n      - \"27017:27017\"\n"
        },
        {
          "name": "docker_init.sh",
          "type": "blob",
          "size": 0.2705078125,
          "content": "#!/bin/bash\n\n# replace original url to new one\nif [ \"${ARTIPUB_API_ADDRESS}\" = \"\" ];\nthen\n\t:\nelse\n\tjspath=`ls /frontend/umi.*.js`\n\tsed -i \"s?http://localhost:3000?${ARTIPUB_API_ADDRESS}?g\" ${jspath}\nfi\n\n# start frontend\nnginx -s stop | true\nnginx\n\n# start backend\nnpm run prod\n"
        },
        {
          "name": "extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "frontend",
          "type": "tree",
          "content": null
        },
        {
          "name": "nginx",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}