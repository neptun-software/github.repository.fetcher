{
  "metadata": {
    "timestamp": 1736563838102,
    "page": 356,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mozilla/shumway",
      "stars": 3673,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.30078125,
          "content": "*~\n.DS_Store\n.idea/*\n\nsrc/avm2/generated/\n\nsrc/avm2/bin/node_modules\n\nsrc/avm2/tests/**/*.abc\n\nsrc/avm2/utils/asc.jar\nsrc/avm2/utils/avmshell\nsrc/avm2/utils/js\n\nsrc/avm1/tests/\n\nsrc/flash/playerglobal*\nsrc/flash/classes/\n\nnode_modules/\n\nbuild/\n*.tmp\n*.run\ntest_swf_avm2.baseline\ntest/arch/swfs\nbaseline.json\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.271484375,
          "content": "language: node_js\nnode_js:\n  - \"0.10\"\n\nbefore_script:\n  - npm update -g npm\n  - npm install grunt-cli\n  - sudo apt-get update -qq\n  - sudo apt-get install libc6:i386 libgcc1:i386 libstdc++6:i386\n  - sudo apt-get install parallel\n\nnotifications:\n  irc: \"irc.mozilla.org#shumway\"\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.6240234375,
          "content": "This is an (incomplete) list of people who have contributed to the\ncodebase which lives in this repository. If you make a contribution\nhere, you may add your name and, optionally, email address in the\nappropriate place.\n\nAndreas Gal <gal@mozilla.com>\nTobias Schneider <tschneider@mozilla.com>\nMichael Bebenita <mbebenita@mozilla.com>\nDavid Flanagan <dflanagan@mozilla.com>\nShu-yu Guo <sguo@mozilla.com>\nYury Delendik <ydelendik@mozilla.com>\nJasper St. Pierre <jstpierre@mecheye.net>\nCodrut Stancu <lstancu@uci.edu>\nJeff Dyer\nTill Schneidereit <tschneidereit@mozilla.com>\nJet Villegas <jet@mozilla.com>\nClaus Wahlers <cwahlers@mozilla.com>\n"
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 43.9033203125,
          "content": "/*\n * Copyright 2013 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nmodule.exports = function(grunt) {\n\n  var VERSION_BASELINE = '2bbdb5ce0db7796b';\n  var VERSION_BASE = '0.11.';\n\n  // require it at the top and pass in the grunt instance\n  require('time-grunt')(grunt);\n\n  // work around a grunt bug where color output is written to non-tty output\n  if (!process.stdout.isTTY) {\n      grunt.option(\"color\", false);\n  }\n\n  var tscCommand = 'node ./node_modules/typescript/bin/tsc.js';\n  var commonArguments = tscCommand + ' --target ES5 --sourcemap -d --out build/ts/';\n\n  var defaultBrowserManifestFile = './resources/browser_manifests/browser_manifest.json';\n  var defaultTestsManifestFile = 'test_manifest.json';\n\n  var parallelArgs = ['bundle', 'threads', 'sha1', 'rebuild', 'tests', 'bundle',\n                      'noPrompts'].filter(function (s) {\n    return grunt.option(s) !== undefined;\n  }).map(function (s) {\n    return '--' + s + '=' + grunt.option(s);\n  });\n\n  function expandFilePattern(pattern) {\n    return '\"' + grunt.file.expand(pattern).join('\" \"') + '\"'\n  }\n\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    tslint: {\n      options: {\n        configuration: grunt.file.readJSON(\"tslint.json\")\n      },\n      all: ['src/base/**/*.ts', 'src/flash/**/*.ts', 'src/avm2/**/*.ts'] // TODO: Add more directories.\n    },\n    exec: {\n      build_web: {\n        cmd: 'make -C web/ build'\n      },\n      build_extension: {\n        cmd: 'make -C extension/firefox/ build'\n      },\n      build_mozcentral: {\n        cmd: 'make -C extension/mozcentral/ build'\n      },\n      build_base_ts: {\n        cmd: commonArguments + 'base.js src/base/references.ts'\n      },\n      build_tools_ts: {\n        cmd: commonArguments + 'tools.js src/tools/references.ts'\n      },\n      build_swf_ts: {\n        cmd: commonArguments + 'swf.js src/swf/references.ts'\n      },\n      build_avm2_ts: {\n        cmd: commonArguments + 'avm2.js src/avm2/references.ts'\n      },\n      build_avm2_tests: {\n        cmd: 'make -C test/avm2/'\n      },\n      build_avm1_ts: {\n        cmd: commonArguments + 'avm1.js src/avm1/references.ts'\n      },\n      build_gfx_ts: {\n        cmd: commonArguments + 'gfx.js src/gfx/references.ts'\n      },\n      build_gfx_base_ts: {\n        cmd: commonArguments + 'gfx-base.js src/gfx/references-base.ts'\n      },\n      build_flash_ts: {\n        cmd: commonArguments + 'flash.js src/flash/references.ts'\n      },\n      build_player_ts: {\n        cmd: commonArguments + 'player.js src/player/references.ts'\n      },\n      build_shell_ts: {\n        cmd: tscCommand + ' --target ES5 --sourcemap --out build/ts/shell.js src/shell/references.ts'\n      },\n      build_playerglobal: {\n        cmd: 'node build.js -t ' + (+grunt.option('threads') || 9) +\n                                   (grunt.option('sha1') ? ' -s' : '') +\n                                   (grunt.option('rebuild') ? ' -r' : ''),\n        cwd: 'utils/playerglobal-builder'\n      },\n      build_playerglobal_single: {\n        cmd: 'node single.js',\n        cwd: 'utils/playerglobal-builder'\n      },\n      debug_server: {\n        cmd: 'node examples/inspector/debug/server.js'\n      },\n      perf: {\n        cmd: '\"utils/jsshell/js\" build/ts/shell.js -x -g ' +\n               (grunt.option('verbose') ? '-v ' : '') +\n          (grunt.option('tests') || expandFilePattern('test/perf/pass/*.js'))\n      },\n      \"gfx-test\": {\n        cmd: '\"utils/jsshell/js\" build/ts/shell.js -x -g ' +\n               (grunt.option('verbose') ? '-v ' : '') +\n          (grunt.option('tests') || expandFilePattern('test/gfx/pass/*.js'))\n      },\n      // Greps for errors.\n      warn: {\n        maxBuffer: Infinity,\n        cmd: 'find -L build/test -name \"*.run\" | xargs cat | grep \"Not Implemented\\\\|Uncaught VM-internal\\\\|FAILED\\\\|EXCEPTED\";'\n      },\n      warn_spell: {\n        // TODO: Add more files.\n        cmd: 'node utils/spell/spell.js build/ts/flash.js build/ts/avm2.js'\n      },\n      lint_success: {\n        cmd: 'echo \"SUCCESS: no lint errors\"'\n      },\n      // Run all tests from shumway.txt in one instance of Shumway and save the output in |test/avm2/shumway.run|.\n      test_avm2_shumway: {\n        maxBuffer: Infinity,\n        cmd: 'mkdir -p build/test/avm2; ' +\n             'cat test/avm2/shumway.txt | xargs utils/jsshell/js build/ts/shell.js -x -det --printABCFileName > build/test/test_avm2_shumway.run; ' +\n             // Run all tests from shumway.txt each in many instances of Tamarin and save the output in |test/avm2/shumway.baseline|.\n             // Between each run, emit the test name as \"::: test :::\" so it's easy to identify where things go wrong.\n             'rm test/test_avm2_shumway.baseline; cat test/avm2/shumway.txt | grep -v @ | xargs -L 1 -I \\'{}\\' sh -c \\'echo \"::: {} :::\" >> test/test_avm2_shumway.baseline; utils/tamarin-redux/bin/shell/avmshell {} >> test/test_avm2_shumway.baseline;\\'; ' +\n             // Diff results.\n             'diff test/test_avm2_shumway.baseline build/test/test_avm2_shumway.run'\n      },\n      // Runs tamarin acceptance tests and tests against the current baseline. If you get more tests to pass, update the baseline.\n      test_avm2_acceptance: {\n        maxBuffer: Infinity,\n        cmd: 'mkdir -p build/test; ' +\n             'utils/jsshell/js build/ts/shell.js -x -det -v test/avm2/acceptance.json | tee build/test/test_avm2_acceptance_stdout.run | node test/avm2/count_totals.js | tee build/test/test_avm2_acceptance.run && ' +\n             'diff test/test_avm2_acceptance.baseline build/test/test_avm2_acceptance.run'\n      },\n      // Runs the pypy tests and tests against the current baseline. If you get more tests to pass, update the baseline.\n      test_avm2_pypy: {\n        maxBuffer: Infinity,\n        cmd: 'mkdir -p build/test; ' +\n             'find -L test/avm2/pypy -name \"*.abc\" | xargs -I {} utils/jsshell/js build/ts/shell.js -x -det -v {} | tee build/test/test_avm2_pypy.run &&' +\n             'diff test/test_avm2_pypy.baseline build/test/test_avm2_pypy.run'\n      },\n      // Runs archive SWFs and tests against the current baseline. If you get more tests to pass, update the baseline.\n      // TODO: We need to pass the -k flag to parallel to keep the output in the right order, do what once we're ready\n      // to make this part of grunt gate.\n      test_arch: {\n        maxBuffer: Infinity,\n        cmd: 'mkdir -p build/test/; ' +\n             'find -L test/arch/swfs -name \"*.swf\" | parallel --gnu -X -N1 utils/jsshell/js build/ts/shell.js -x -det -fc 10 {} | tee build/test_arch.run;' +\n             'echo \"Output saved to build/test_arch.run, at some point create a baseline and stick to it.\"'\n          // 'diff test/arch/arch.baseline build/test/arch/arch.run'\n      },\n      // Runs SWFs and tests against the current baseline. If you get more tests to pass, update the baseline.\n      test_swf: {\n        maxBuffer: Infinity,\n        cmd: 'find -L test/swf -name \"*.swf\" | parallel -k --gnu -X -N1 utils/jsshell/js build/ts/shell.js -x -det -fc 10 {} | LC_ALL=C sort > build/test/test_swf.run && ' +\n             'diff test/test_swf.baseline build/test/test_swf.run'\n      },\n      // Runs SWF trace tests.\n      test_trace: {\n        maxBuffer: Infinity,\n        cmd: 'node test/trace_test_run.js -j ' + (+grunt.option('threads') || 6)\n      },\n      // Runs SWF (AVM1) swfdec trace tests.\n      test_trace_swfdec: {\n        maxBuffer: Infinity,\n        cmd: 'node test/trace_test_run.js -j ' + (+grunt.option('threads') || 6) +\n             ' -m test/swfdec_test_manifest.json'\n      },\n      test_avm2_ats: {\n        maxBuffer: Infinity,\n        cmd: 'mkdir -p build/test; ' +\n             'cat test/ats/test_swf_avm2.txt | parallel -k --gnu -X -N50 utils/jsshell/js build/ts/shell.js -x -det -fc 10 {} > build/test/test_avm2_ats.run; ' +\n             'if [ ! -f \"test/test_avm2_ats.baseline\" ]; then echo \"Creating Baseline\"; cp build/test/test_avm2_ats.run test/test_avm2_ats.baseline; fi;' +\n             'diff test/test_avm2_ats.baseline build/test/test_avm2_ats.run;'\n      },\n      // Run this to make sure the SWF parser still works.\n      test_avm2_ats_parse: {\n        maxBuffer: Infinity,\n        cmd: 'cat test/ats/test_swf_avm2.txt | parallel --gnu -X -N50 utils/jsshell/js build/ts/shell.js -p -v' +\n             (grunt.option('verbose') ? '-v ' : '') + ' {}'\n      },\n      test_unit: {\n        cmd: '\"utils/jsshell/js\" build/ts/shell.js -x -g ' +\n             (grunt.option('verbose') ? '-v ' : '') +\n             (grunt.option('tests') || expandFilePattern('test/unit/pass/*.js'))\n      },\n      test_swf_avm2_all: {\n        maxBuffer: Infinity,\n        cmd: 'mongo ats --eval \\'db.swfs.find({\"parse_result.uses_avm1\": false}).forEach(function (x) { print(\"test/ats/swfs/\" + x.file); })\\' | parallel --gnu -k -X -N10 --timeout 200% utils/jsshell/js build/ts/shell.js -x -det -fc 10 {} | tee test/ats/test_swf_avm2_all.run;'\n      },\n      test_swf_all: {\n        maxBuffer: Infinity,\n        cmd: 'mongo ats --eval \\'db.swfs.find({}).forEach(function (x) { print(\"test/ats/swfs/\" + x.file); })\\' | parallel --gnu -k -X -N10 --timeout 200% utils/jsshell/js build/ts/shell.js -x -det -fc 10 {} | tee test/ats/test_swf_all.run;'\n      },\n      test_swf_ads: {\n        maxBuffer: Infinity,\n        cmd: 'mongo ats --eval \\'db.swfs.find({\"parse_result.file_size\":{$lt:204800},ad_result:{$ne:null}}).forEach(function (x) { print(\"test/ats/swfs/\" + x.file); })\\' | parallel --gnu -k -X -N10 --timeout 200% utils/jsshell/js build/ts/shell.js -x -det -fc 10 {} | tee test/ats/test_swf_ads.run;'\n      },\n      test_mock: {\n        maxBuffer: Infinity,\n        cmd: 'mkdir -p build/test;' +\n             'utils/jsshell/js build/ts/shell.js -x -det test/mock/jwplayer.js examples/jwplayer/jwplayer.flash.swf -fc 10 > build/test/test_mock.run;' +\n             'diff test/test_mock.baseline build/test/test_mock.run;'\n      },\n      bench_avm2: {\n        maxBuffer: Infinity,\n        cmd: 'find -L test/avm2/jsbench -name \"*.abc\" | xargs utils/jsshell/js build/ts/shell.js -x --printABCFileName'\n      },\n      perf_avm2_acceptance: {\n        maxBuffer: Infinity,\n        cmd: 'utils/jsshell/js build/ts/shell.js -x -det -r --porcelain test/avm2/acceptance.json > /dev/null 2>&1'\n      },\n      // Parses all ABCs in the acceptance suite. This is useful to run if you've made changes to the parser.\n      trace_avm2_acceptance_parse: {\n        maxBuffer: Infinity,\n        cmd: 'find -L test/avm2/acceptance -name \"*.abc\" | parallel -k --gnu -X -N50 utils/jsshell/js build/ts/shell.js -d -v {}'\n      },\n      tracetest_fuzz: {\n        cmd: 'node test/trace_test_run.js -j ' + (+grunt.option('threads') || 6) +\n                                        ' -m test/test_manifest_fuzz.json'\n      },\n      instrument: {\n        cmd: function(path) {\n          var targetPath = path.replace(\".swf\", \".instrumented.swf\");\n          console.info(\"Instrumenting \" + path + \" (\" + targetPath + \"), this may take a while if the file is large.\");\n          return 'swfmill swf2xml ' + path + ' | xsltproc utils/instrument-swf.xslt - | swfmill xml2swf stdin ' + targetPath;\n        }\n      },\n      install_js_travis: {\n        cmd: \"make -C utils/ install-js\"\n      },\n      install_avmshell_travis: {\n        cmd: \"make -C utils/ install-avmshell\"\n      },\n      install_swfdec_travis: {\n        cmd: \"make -C utils/ install-swfdec || echo 'Ignoring the error'\"\n      },\n      versions_travis: {\n        cmd: \"parallel --gnu --version; utils/jsshell/js --version; utils/tamarin-redux/bin/shell/avmshell -Dversion;\"\n      },\n      install_mongo: {\n        cmd: \"npm install mongojs@0.18.1\"\n      },\n      start_ats_db: {\n        cmd: \"test -e /tmp/ats.pid || mongod --dbpath test/ats/db --fork --logpath test/ats/db/log --pidfilepath /tmp/ats.pid || rm /tmp/ats.pid\"\n      },\n      stop_ats_db: {\n        cmd: \"test -e /tmp/ats.pid && kill $(cat /tmp/ats.pid); rm /tmp/ats.pid\"\n      },\n      ats_parsetest: {\n        cmd: \"parallel --will-cite node run.js --task parse ::: 0 1 2 3 4 5 6 7 8 9 a b c d e f\",\n        cwd: \"test/ats\"\n      },\n      restartless: {\n        cmd: 'make restartless PROFILE=\"' + (grunt.option('profile') || '') + '\"',\n        cwd: \"extension/firefox\"\n      }\n    },\n    parallel: {\n      test: {\n        options: {\n          grunt: true\n        },\n        tasks: [\n          'exec:test_avm2_shumway',\n          'exec:test_avm2_acceptance',\n          'exec:test_swf',\n          'exec:test_avm2_ats',\n          'exec:test_unit',\n          'exec:test_trace',\n          'exec:test_mock'\n        ]\n      },\n      base: {\n        tasks: [\n          { args: ['generate-version'], grunt: true },\n          { args: ['buildlibs'], grunt: true },\n          { args: ['exec:build_base_ts'].concat(parallelArgs), grunt: true },\n        ]\n      },\n      playerglobal: {\n        tasks: [\n          { args: ['exec:build_playerglobal'].concat(parallelArgs), grunt: true },\n        ]\n      },\n      tier2: {\n        options: {\n          grunt: true\n        },\n        tasks: [\n          'exec:build_gfx_ts',\n          'exec:build_swf_ts',\n          'exec:build_avm2_ts'\n        ]\n      },\n      natives: {\n        tasks: [\n          { args: ['exec:build_playerglobal'].concat(parallelArgs), grunt: true },\n          { args: ['exec:build_flash_ts'].concat(parallelArgs), grunt: true },\n          { args: ['exec:build_avm1_ts'].concat(parallelArgs), grunt: true }\n        ]\n      },\n      avm1: {\n        tasks: [\n          { args: ['exec:build_avm1_ts'].concat(parallelArgs), grunt: true }\n        ]\n      },\n      flash: {\n        tasks: [\n          { args: ['exec:build_playerglobal'].concat(parallelArgs), grunt: true },\n          { args: ['exec:build_flash_ts'].concat(parallelArgs), grunt: true }\n        ]\n      }\n    },\n    watch: {\n      web: {\n        files: 'extension/firefox/**/*',\n        tasks: ['build-web']\n      },\n      extension: {\n        files: 'extension/firefox/**/*',\n        tasks: ['build-extension']\n      },\n      base: {\n        files: 'src/base/**/*',\n        tasks: ['exec:build_base_ts']\n      },\n      playerglobal: {\n        files: ['src/flash/**/*.as',\n                'utils/playerglobal-builder/manifest.json'],\n        tasks: ['exec:build_playerglobal']\n      },\n      swf_ts: {\n        files: ['src/swf/**/*.ts'],\n        tasks: ['exec:build_swf_ts']\n      },\n      flash_ts: {\n        files: ['src/avm2/**/*.ts',\n                'src/flash/**/*.ts'],\n        tasks: ['exec:build_flash_ts']\n      },\n      gfx_base_ts: {\n        files: ['src/gfx/**/*.ts'],\n        tasks: ['exec:build_gfx_base_ts']\n      },\n      gfx_ts: {\n        files: ['src/gfx/**/*.ts'],\n        tasks: ['exec:build_gfx_ts']\n      },\n      avm2_ts: {\n        files: ['src/avm2/**/*.ts'],\n        tasks: ['exec:build_avm2_ts']\n      },\n      avm1_ts: {\n        files: ['src/avm1/*.ts'],\n        tasks: ['exec:build_avm1_ts']\n      },\n      player_ts: {\n        files: ['src/flash/**/*.ts',\n        \t\t    'src/player/**/*.ts'],\n        tasks: ['exec:build_player_ts']\n      },\n      tools_ts: {\n        files: ['src/tools/**/*.ts'],\n        tasks: ['exec:build_tools_ts']\n      },\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-tslint');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.loadNpmTasks('grunt-exec');\n  grunt.loadNpmTasks('grunt-parallel');\n\n  grunt.registerTask('lint', ['tslint:all', 'exec:lint_success']);\n\n  grunt.registerTask('update-refs', function  () {\n    var updateRefs = require('./utils/update-flash-refs.js').updateRefs;\n    updateRefs('examples/inspector/inspector.gfx.html', {gfx: true});\n    updateRefs('examples/xlsimport/index.html', {gfx: true, player: true});\n    updateRefs('examples/inspector/inspector.player.html', {player: true});\n    updateRefs('src/shell/shell.ts', {player: true, onlyIncludes: true});\n  });\n  grunt.registerTask('update-flash-refs', ['update-refs']); // TODO deprecated\n\n  grunt.registerTask('buildlibs', function() {\n    var outputDir = 'build/libs/';\n    grunt.file.mkdir(outputDir);\n    var done = this.async();\n    var buildLibs = require('./src/libs/buildlibs.js').buildLibs;\n    buildLibs(outputDir, false, null, function () {\n      done();\n    });\n  });\n  grunt.registerTask('copy_relooper', function() {\n    grunt.file.copy('src/avm2/compiler/relooper/relooper.js', 'build/libs/relooper.js');\n  });\n  grunt.registerTask('bundles', function () {\n    var outputDir = 'build/bundles/';\n    grunt.file.mkdir(outputDir);\n    var packageRefs = require('./utils/update-flash-refs.js').packageRefs;\n    var license = grunt.file.read('./src/license.js');\n    packageRefs(['gfx'], outputDir + 'shumway.gfx.js', license);\n    packageRefs(['player'], outputDir + 'shumway.player.js', license);\n  });\n\n  grunt.registerTask('merge-modules', function () {\n    mergeModules(\"build/bundles/shumway.player.js\");\n    mergeModules(\"build/bundles/shumway.gfx.js\");\n  });\n\n  function mergeModules(path) {\n    var mergeModules = require('typescript-module-merger').mergeModulesInFile;\n    grunt.file.write(path, mergeModules(path, !!grunt.option('verbose')));\n  }\n\n  function runClosure(jsFiles, output, warnings, done) {\n    // This needs a special build of closure that has SHUMWAY_OPTIMIZATIONS.\n    var closureCmd = 'java';\n    var closureArgs = ['-jar', 'utils/closure.jar',\n      '--define', 'release=true',\n      '--compilation_level', 'SHUMWAY_OPTIMIZATIONS',\n      '--language_in', 'ECMASCRIPT5'];\n    if (!warnings) {\n      closureArgs.push('--warning_level', 'QUIET');\n    }\n    closureArgs = closureArgs.concat(jsFiles).concat(['--js_output_file', output]);\n    console.log('Running closure for ' + jsFiles.join(', ') + ' ...');\n    grunt.util.spawn({\n      cmd: closureCmd,\n      args: closureArgs,\n      opts: { stdio: 'inherit' }\n    }, function (error, result) {\n      if (error || result.code) {\n        done(false);\n        return;\n      }\n      console.log('Closure output is created at ' + output);\n      done(true);\n    });\n  }\n\n  function runClosureTasks(tasks, warnings, done) {\n    var i = 0;\n    (function runNextTask() {\n      if (i < tasks.length) {\n        var task = tasks[i++];\n        runClosure([task[0]], task[1], warnings, function (success) {\n          if (!success) {\n            done(false);\n            return;\n          }\n          runNextTask();\n        });\n      } else {\n        done(true);\n      }\n    })();\n  }\n\n  grunt.registerTask('ensure-build-folder', function() {\n    grunt.file.mkdir('build');\n  });\n\n  grunt.registerTask('ensure-test-folder', function() {\n    grunt.file.mkdir('build/test');\n  });\n\n  grunt.registerTask('closure-bundles', function () {\n    var inputDir = 'build/bundles/';\n    var outputDir = 'build/bundles-cc/';\n    grunt.file.mkdir(outputDir);\n\n    runClosureTasks([\n      [inputDir + 'shumway.gfx.js', outputDir + 'shumway.gfx.js'],\n      [inputDir + 'shumway.player.js', outputDir + 'shumway.player.js']\n    ], !!grunt.option('verbose'), this.async());\n  });\n\n  grunt.registerTask('closure', function () {\n    runClosure([\n      \"build/ts/base.js\",\n      \"build/ts/tools.js\",\n      \"build/ts/avm2.js\",\n      \"build/ts/flash.js\",\n      \"build/ts/avm1.js\",\n      \"build/ts/gfx-base.js\",\n      \"build/ts/gfx.js\",\n      \"build/ts/player.js\"\n    ], \"build/shumway.cc.js\", true, this.async());\n  });\n\n  grunt.registerTask('closure-all', function () {\n    var outputDir = 'build/ts-cc/';\n    grunt.file.mkdir(outputDir);\n    runClosureTasks([\n      [\"build/ts/base.js\", outputDir + \"base.js\"],\n      [\"build/ts/tools.js\", outputDir + \"tools.js\"],\n      [\"build/ts/avm2.js\", outputDir + \"avm2.js\"],\n      [\"build/ts/flash.js\", outputDir + \"flash.js\"],\n      [\"build/ts/avm1.js\", outputDir + \"avm1.js\"],\n      [\"build/ts/gfx-base.js\", outputDir + \"gfx-base.js\"],\n      [\"build/ts/gfx.js\", outputDir + \"gfx.js\"],\n      [\"build/ts/player.js\", outputDir + \"player.js\"]\n    ], true, this.async());\n  });\n\n  grunt.registerTask('server', function () {\n    function isLogFileRequest(path) {\n      if (path.indexOf('/logs/') !== 0) {\n        return false;\n      }\n      return /^\\/logs\\/\\w+\\.(txt|log)$/i.test(path);\n    }\n    grunt.file.mkdir('build/logs/');\n    var WebServer = require('./test/webserver.js').WebServer;\n    var done = this.async();\n    var server = new WebServer();\n    if (grunt.option('host')) {\n      server.host = grunt.option('host');\n    }\n    if (grunt.option('port')) {\n      server.port = +grunt.option('port');\n    }\n    if (grunt.option('port_ssl')) {\n      server.port_ssl = +grunt.option('port_ssl');\n    }\n    var url = require('url'), fs = require('fs');\n    server.hooks['POST'].push(function (req, res) {\n      var parsedUrl = url.parse(req.url, true);\n      var pathname = parsedUrl.pathname;\n      if (!isLogFileRequest(pathname)) {\n        return false;\n      }\n      var filename = 'build' + pathname;\n      var body = '';\n      req.on('data', function (data) {\n        body += data;\n      });\n      req.on('end', function () {\n        fs.appendFile(filename, body, function () {\n          res.writeHead(204, {'Content-Type': 'text/plain'});\n          res.end();\n        });\n      });\n      return true;\n    });\n    server.hooks['DELETE'].push(function (req, res) {\n      var parsedUrl = url.parse(req.url, true);\n      var pathname = parsedUrl.pathname;\n      if (!isLogFileRequest(pathname)) {\n        return false;\n      }\n      var filename = 'build' + pathname;\n      fs.unlink(filename, function () {\n        res.writeHead(204, {'Content-Type': 'text/plain'});\n        res.end();\n      });\n      return true;\n    });\n    server.start();\n  });\n\n  grunt.registerTask('reftest', function () {\n    if (grunt.file.exists('test/tmp')) {\n      throw new Error('The test/tmp/ folder exists from the previous makeref attempt. ' +\n        'You may want to copy those images to test/refs/. Remove test/tmp/ to proceed with reftest.')\n    }\n    if (!grunt.option('browserManifestFile') && !grunt.file.exists('test', defaultBrowserManifestFile)) {\n      throw new Error('Browser manifest file is not found at test/' + defaultBrowserManifestFile + '. Create one using the examples at test/resources/browser_manifests/.');\n    }\n    var browserManifestFile = grunt.option('browserManifestFile') || defaultBrowserManifestFile;\n    var testManifestFile = grunt.option('manifestFile') || defaultTestsManifestFile;\n    var done = this.async();\n    var params = [];\n    if (grunt.option('extension')) {\n      params.push('--extension');\n    }\n    if (grunt.option('noPrompts')) {\n      params.push('--noPrompts');\n    }\n    grunt.util.spawn({\n      cmd: 'node',\n      args: ['test.js', '--reftest', '--browserManifestFile=' + browserManifestFile,\n             '--manifestFile=' + testManifestFile].concat(params),\n      opts: { cwd: 'test', stdio: 'inherit' }\n    }, function () {\n      done();\n    });\n  });\n  \n  grunt.registerTask('reftest-extension', function () {\n    grunt.option('extension', true);\n    grunt.task.run('firefox', 'reftest');\n  });\n\n  grunt.registerTask('reftest-swfdec', function () {\n    if (grunt.file.exists('test/tmp')) {\n      throw new Error('The test/tmp/ folder exists from the previous makeref attempt. ' +\n        'You may want to copy those images to test/refs/. Remove test/tmp/ to proceed with reftest.')\n    }\n    if (!grunt.option('browserManifestFile') && !grunt.file.exists('test', defaultBrowserManifestFile)) {\n      throw new Error('Browser manifest file is not found at test/' + defaultBrowserManifestFile + '. Create one using the examples at test/resources/browser_manifests/.');\n    }\n    var browserManifestFile = grunt.option('browserManifestFile') || defaultBrowserManifestFile;\n    var testManifestFile = 'swfdec_reftest_manifest.json';\n    var done = this.async();\n    var params = [];\n    if (grunt.option('extension')) {\n      params.push('--extension');\n    }\n    if (grunt.option('noPrompts')) {\n      params.push('--noPrompts');\n    }\n    grunt.util.spawn({\n      cmd: 'node',\n      args: ['test.js', '--browserManifestFile=' + browserManifestFile,\n          '--manifestFile=' + testManifestFile].concat(params),\n      opts: { cwd: 'test', stdio: 'inherit' }\n    }, function () {\n      done();\n    });\n  });\n\n  grunt.registerTask('makeref', function () {\n    if (!grunt.option('browserManifestFile') && !grunt.file.exists('test', defaultBrowserManifestFile)) {\n      throw new Error('Browser manifest file is not found at test/' + defaultBrowserManifestFile + '. Create one using the examples at test/resources/browser_manifests/.');\n    }\n    var browserManifestFile = grunt.option('browserManifestFile') || defaultBrowserManifestFile;\n    var done = this.async();\n    var params = [];\n    if (grunt.option('extension')) {\n      params.push('--extension');\n    }\n    if (grunt.option('noPrompts')) {\n      params.push('--noPrompts');\n    }\n    grunt.util.spawn({\n      cmd: 'node',\n      args: ['test.js', '-m', '--browserManifestFile=' + browserManifestFile].concat(params),\n      opts: { cwd: 'test', stdio: 'inherit'}}, function () {\n      done();\n    });\n  });\n\n  grunt.registerTask('shell-package', function () {\n    var outputDir = 'build/shell';\n    grunt.file.mkdir(outputDir);\n    var path = require('path');\n\n    grunt.file.copy('build/libs/builtin.abc', outputDir + '/build/libs/builtin.abc');\n    grunt.file.copy('build/libs/shell.abc', outputDir + '/build/libs/shell.abc');\n    grunt.file.copy('build/playerglobal/playerglobal.abcs', outputDir + '/build/playerglobal/playerglobal.abcs');\n    grunt.file.copy('build/playerglobal/playerglobal.json', outputDir + '/build/playerglobal/playerglobal.json');\n    grunt.file.copy('build/libs/relooper.js', outputDir + '/build/libs/relooper.js');\n    grunt.file.expand('build/ts/*.js').forEach(function (file) {\n      grunt.file.copy(file, outputDir + '/build/ts/' + path.basename(file));\n    });\n    grunt.file.expand('build/bundles/*.js').forEach(function (file) {\n      grunt.file.copy(file, outputDir + '/build/bundles/' + path.basename(file));\n    });\n    grunt.file.expand('build/bundles-cc/*.js').forEach(function (file) {\n      grunt.file.copy(file, outputDir + '/build/bundles-cc/' + path.basename(file));\n    });\n    grunt.file.copy('src/shell/shell-node.js', outputDir + '/src/shell/shell-node.js');\n    grunt.file.copy('build/version/version.txt', outputDir + '/version.txt');\n    grunt.file.copy('LICENSE', outputDir + '/LICENSE');\n\n    var waitFor = 0, done = this.async();\n    grunt.file.expand('src/shell/runners/run-*').forEach(function (file) {\n      var dest = outputDir + '/bin/' + path.basename(file);\n      grunt.file.copy(file, dest);\n      waitFor++;\n      grunt.util.spawn({cmd: 'chmod', args: ['+x', dest]}, function () {\n        waitFor--;\n        if (waitFor === 0) {\n          done();\n        }\n      });\n    });\n    if (waitFor === 0) {\n      done();\n    }\n  });\n\n  grunt.registerTask('tracetest', ['exec:test_trace']);\n  grunt.registerTask('tracetest-swfdec', ['exec:test_trace_swfdec']);\n\n  grunt.registerTask('watch-playerglobal', ['exec:build_playerglobal', 'watch:playerglobal']);\n  grunt.registerTask('watch-base', ['exec:build_base_ts', 'watch:base']);\n  grunt.registerTask('watch-avm2', ['exec:build_avm2_ts', 'watch:avm2_ts']);\n  grunt.registerTask('watch-swf', ['exec:build_swf_ts', 'watch:swf_ts']);\n  grunt.registerTask('watch-flash', ['exec:build_flash_ts', 'watch:flash_ts']);\n  grunt.registerTask('watch-player', ['exec:build_player_ts', 'watch:player_ts']);\n  grunt.registerTask('watch-gfx', ['exec:build_gfx_base_ts', 'exec:build_gfx_ts', 'watch:gfx_ts']);\n  grunt.registerTask('watch-tools', ['exec:build_tools_ts', 'watch:tools_ts']);\n\n  // temporary make/python calls based on grunt-exec\n  grunt.registerTask('build-playerglobal', ['exec:build_playerglobal']);\n  grunt.registerTask('playerglobal', ['exec:build_playerglobal']);\n  grunt.registerTask('playerglobal-single', ['exec:build_playerglobal_single']);\n\n  grunt.registerTask('base', ['exec:build_base_ts', 'test-quick']);\n  grunt.registerTask('swf', ['exec:build_swf_ts', 'test-quick']);\n  grunt.registerTask('flash', ['parallel:flash', 'test-quick']);\n  grunt.registerTask('avm1', ['parallel:avm1', 'test-quick']);\n  grunt.registerTask('player', ['exec:build_player_ts', 'test-quick']);\n  grunt.registerTask('shell', ['exec:build_shell_ts', 'test-quick']);\n  grunt.registerTask('tools', ['exec:build_tools_ts', 'test-quick']);\n  grunt.registerTask('avm2', ['exec:build_avm2_ts', 'copy_relooper', 'test-quick']);\n  grunt.registerTask('gfx', ['exec:build_gfx_base_ts', 'exec:build_gfx_ts', 'test-quick']);\n  grunt.registerTask('gfx-base', ['exec:build_gfx_base_ts']);\n  grunt.registerTask('perf', ['exec:perf']);\n  grunt.registerTask('gfx-test', ['exec:gfx-test']);\n  grunt.registerTask('build', \"Builds all modules.\", [\n    'ensure-build-folder',\n    'parallel:base',\n    'parallel:playerglobal',\n    'exec:build_tools_ts',\n    'exec:build_gfx_base_ts',\n    'parallel:tier2',\n    'copy_relooper',\n    'parallel:natives',\n    'exec:build_player_ts',\n    'exec:build_shell_ts',\n    'bundles',\n    'merge-modules'\n  ]);\n  grunt.registerTask('shu', [\n    'build',\n    'gate'\n  ]);\n  grunt.registerTask('travis', \"Makes sure your local build will succeed on travis.\", [\n    'exec:install_js_travis',\n    'exec:install_avmshell_travis',\n    // 'exec:versions_travis', AVMShell exits with 1 for some reason.\n    'build',\n\n    //'gate'\n    'exec:test_avm2_shumway',\n    'exec:test_avm2_acceptance',\n    // 'exec:test_avm2_pypy',\n    // 'exec:test_arch',\n    'exec:test_swf',\n    'exec:test_trace',\n    'exec:install_swfdec_travis',\n    'exec:test_trace_swfdec',\n    //'exec:test_avm2_ats',\n    //'exec:test_avm2_ats_parse',\n    'exec:test_unit',\n    'exec:test_mock'\n  ]);\n  grunt.registerTask('gate', \"Run this before checking in any code.\", [\n    'ensure-test-folder',\n    // 'tslint:all', // Annoyingly slow, and not very useful most of the time.\n    // 'closure', REDUX: Temporarily commented out.\n    'parallel:test',\n    'warn'\n  ]);\n\n  grunt.registerTask('warn', \"Run this before checking in any code to report warnings.\", [\n    'exec:warn_spell',\n    'exec:warn'\n  ]);\n\n  grunt.registerTask('perf-gate', \"Run this before checking in any code to make sure you don't regress performance.\", [\n    'exec:perf_avm2_acceptance'\n  ]);\n  // Quick sanity test that runs after a module is compiled.\n  grunt.registerTask('test-quick', [\n    'exec:test_unit'\n  ]);\n  // Runs all tests.\n  grunt.registerTask('test', [\n    'exec:test_avm2_shumway',\n    'exec:test_avm2_acceptance',\n    // 'exec:test_avm2_pypy',\n    // 'exec:test_arch',\n    'exec:test_swf',\n    'exec:test_trace',\n    // 'exec:test_trace_swfdec', // Takes too long.\n    'exec:test_avm2_ats',\n    'exec:test_avm2_ats_parse',\n    'exec:test_unit'\n  ]);\n  grunt.registerTask('mozcentralshu', [\n    'mozcentralbaseline',\n    'mozcentral',\n    'mozcentraldiff'\n  ]);\n  grunt.registerTask('mozcentralbaseline', function () {\n    if (!grunt.option('baseline')) {\n      throw new Error('--baseline parameter is not specified.');\n    }\n    var baseline = grunt.option('baseline');\n    var BASELINE_DIR = 'build/mozcentralbaseline';\n    grunt.file.delete(BASELINE_DIR, {force: true});\n    grunt.file.mkdir(BASELINE_DIR);\n    var done = this.async();\n    var gitClone = function () {\n      grunt.util.spawn({\n        cmd: 'git',\n        args: ['clone', '../..', '.'],\n        opts: { cwd: BASELINE_DIR, stdio: 'inherit'}}, function (error) {\n          if (error) {\n            done(error);\n            return;\n          }\n          gitCheckout();\n        });\n    };\n    var gitCheckout = function () {\n      grunt.util.spawn({\n        cmd: 'git',\n        args: ['checkout', baseline],\n        opts: { cwd: BASELINE_DIR, stdio: 'inherit'}}, function (error) {\n        if (error) {\n          done(error);\n          return;\n        }\n        bootstrap();\n      });\n    };\n    var bootstrap = function () {\n      grunt.util.spawn({\n        cmd: 'make',\n        args: ['link-utils', 'BASE=../..'],\n        opts: { cwd: BASELINE_DIR, stdio: 'inherit'}}, function (error) {\n        if (error) {\n          done(error);\n          return;\n        }\n        build();\n      });\n    };\n    var build = function () {\n      grunt.util.spawn({\n        grunt: true,\n        args: ['mozcentral'],\n        opts: { cwd: BASELINE_DIR, stdio: 'inherit'}}, function (error) {\n        if (error) {\n          done(error);\n          return;\n        }\n        done();\n      });\n    };\n\n    gitClone();\n  });\n  grunt.registerTask('mozcentraldiff', function () {\n    var BASELINE_BUILD_DIR = 'build/mozcentralbaseline/build/mozcentral';\n    if (!grunt.file.exists(BASELINE_BUILD_DIR)) {\n      throw new Error('mozcentralbaseline was not run.');\n    }\n    var NON_DELTA_BINARIES = [\n      'browser/extensions/shumway/content/libs/builtin.abc',\n      'browser/extensions/shumway/content/playerglobal/playerglobal.abcs'\n    ];\n    var MOZCENTRAL_DIR = 'build/mozcentral';\n    var DIFF_DIR = 'build/mozcentraldiff';\n    grunt.file.delete(DIFF_DIR, {force: true});\n    grunt.file.mkdir(DIFF_DIR);\n    var done = this.async();\n    var rsync = function () {\n      grunt.util.spawn({\n        cmd: 'rsync',\n        args: ['-r'].concat(grunt.file.expand(BASELINE_BUILD_DIR + '/*'), [DIFF_DIR]),\n        opts: { stdio: 'inherit' }}, function (error) {\n        if (error) {\n          done(error);\n          return;\n        }\n        fixNonDelta(0);\n      });\n    };\n    // HACK to avoid 'delta' for 'GIT binary patch'\n    var fixNonDelta = function (index) {\n      if (index >= NON_DELTA_BINARIES.length) {\n        gitCommit();\n        return;\n      }\n      var nonDelta = NON_DELTA_BINARIES[index];\n      grunt.util.spawn({\n        cmd: 'diff',\n        args: [DIFF_DIR + '/' + nonDelta, MOZCENTRAL_DIR + '/' + nonDelta]\n      }, function (error, result, code) {\n        if (code === 2) {\n          // ... we need to truncate the file\n          grunt.file.write(DIFF_DIR + '/' + nonDelta, '');\n        } else if (error) {\n          console.log(code);\n          done(error);\n          return;\n        }\n        fixNonDelta(index + 1);\n      });\n    };\n    var gitCommit = function () {\n      grunt.util.spawn({\n        cmd: 'git',\n        args: ['init'],\n        opts: { cwd: DIFF_DIR, stdio: 'inherit'}}, function (error) {\n        if (error) {\n          done(error);\n          return;\n        }\n        grunt.util.spawn({\n          cmd: 'git',\n          args: ['add', '*'],\n          opts: { cwd: DIFF_DIR, stdio: 'inherit'}}, function (error) {\n          if (error) {\n            done(error);\n            return;\n          }\n          grunt.util.spawn({\n            cmd: 'git',\n            args: ['commit', '--message=baseline'],\n            opts: { cwd: DIFF_DIR, stdio: 'inherit'}}, function (error) {\n            if (error) {\n              done(error);\n              return;\n            }\n            refresh();\n          });\n        });\n      });\n    };\n    var refresh = function () {\n      grunt.util.spawn({\n        cmd: 'rsync',\n        args: ['-rc', '--delete'].concat(grunt.file.expand(MOZCENTRAL_DIR + '/*'), [DIFF_DIR]),\n        opts: { stdio: 'inherit'}}, function (error) {\n        if (error) {\n          done(error);\n          return;\n        }\n        gitDiff();\n      });\n    };\n    var gitDiff = function () {\n      grunt.util.spawn({\n        cmd: 'git',\n        args: ['add', '--all'],\n        opts: { cwd: DIFF_DIR, stdio: 'inherit'}}, function (error) {\n        if (error) {\n          done(error);\n          return;\n        }\n        var diffOutput = require('fs').openSync('build/mozcentral.diff', 'w');\n        grunt.util.spawn({\n          cmd: 'git',\n          args: ['diff', '--binary', '--cached', '--unified=8'],\n          opts: { cwd: DIFF_DIR, stdio: [null, diffOutput, null]}}, function (error, result, code) {\n          if (error) {\n            done(error);\n            return;\n          }\n          done();\n        });\n      });\n    };\n\n    rsync();\n  });\n  grunt.registerTask('generate-version', function () {\n    function generateFiles() {\n      console.log('Generating version files for ' + version + ' (' + sha + ')');\n      grunt.file.write(outputDir + '/version.json',\n        JSON.stringify({version: version, sha: sha}));\n      grunt.file.write(outputDir + '/version.txt', version + '\\n' + sha + '\\n');\n      grunt.file.write(outputDir + '/version.ts',\n        'module Shumway {\\n  export var version = \\'' + version + '\\';\\n' +\n        '  export var build = \\'' + sha + '\\';\\n}\\n');\n      grunt.file.write(outputDir + '/version.js',\n          'var Shumway;\\n(function (Shumway) {\\n' +\n          '  Shumway.version = \\'' + version + '\\';\\n' +\n          '  Shumway.build = \\'' + sha + '\\';\\n' +\n          '})(Shumway || (Shumway = {}));\\n');\n    }\n\n    function getDefaultVersion() {\n      var d = new Date();\n      return d.getFullYear() * 100000000 + (d.getMonth() + 1) * 1000000 +\n             d.getDate() * 10000 + d.getHours() * 100 + d.getMinutes()\n    }\n\n    var version = getDefaultVersion(), sha = 'unknown';\n\n    var outputDir = 'build/version';\n    grunt.file.mkdir(outputDir);\n\n    var done = this.async();\n    grunt.util.spawn({\n      cmd: 'git',\n      args: ['log', '--format=oneline', VERSION_BASELINE + '..']\n    }, function (error, result, code) {\n      if (code) {\n        generateFiles();\n        done('Error code ' + code + ': ' + error);\n        return;\n      }\n      version = VERSION_BASE + (String(result).split(/\\n/g).length);\n      grunt.util.spawn({\n        cmd: 'git',\n        args: ['log', '--format=%h', '-n', '1']\n      }, function (error, result, code) {\n        if (code) {\n          generateFiles();\n          done('Error code ' + code + ': ' + error);\n          return;\n        }\n        sha = String(result);\n        generateFiles();\n        done();\n      });\n    });\n  });\n  grunt.registerTask('shuobject-package', function () {\n    var outputDir = 'build/shuobject';\n    grunt.file.mkdir(outputDir);\n    var path = require('path');\n\n    grunt.file.copy('build/libs/builtin.abc', outputDir + '/build/libs/builtin.abc');\n    grunt.file.copy('build/playerglobal/playerglobal.abcs', outputDir + '/build/playerglobal/playerglobal.abcs');\n    grunt.file.copy('build/playerglobal/playerglobal.json', outputDir + '/build/playerglobal/playerglobal.json');\n    grunt.file.copy('build/libs/relooper.js', outputDir + '/build/libs/relooper.js');\n    grunt.file.expand('build/bundles-cc/*.js').forEach(function (file) {  // TODO closure bundles\n      grunt.file.copy(file, outputDir + '/build/bundles/' + path.basename(file));\n    });\n    grunt.file.expand('web/iframe/*').forEach(function (file) {\n      grunt.file.copy(file, outputDir + '/iframe/' + path.basename(file));\n    });\n    grunt.file.copy('extension/shuobject/shuobject.js', outputDir + '/shuobject.js');\n    grunt.file.expand('extension/shuobject/examples/*').forEach(function (file) {\n      grunt.file.copy(file, outputDir + '/examples/' + path.basename(file));\n    });\n    grunt.file.copy('web/demo.swf', outputDir + '/examples/demo.swf');\n    grunt.file.copy('examples/external/externalinterface/avm2.swf', outputDir + '/examples/external_interface.swf');\n\n    grunt.file.copy('build/version/version.txt', outputDir + '/version.txt');\n    grunt.file.copy('LICENSE', outputDir + '/LICENSE');\n    grunt.file.copy('LICENSE-OFL.txt', outputDir + '/LICENSE-OFL.txt');\n    grunt.file.copy('README-LICENSE.txt', outputDir + '/README-LICENSE.txt');\n  });\n\n  function copyFilesUsingPattern(src, dest, callback) {\n    var path = require('path');\n    grunt.file.expand(src).forEach(function (file) {\n      var p = path.join(dest, path.basename(file));\n      grunt.file.copy(file, p);\n      if (callback) {\n        callback(p);\n      }\n    });\n  }\n\n  grunt.registerTask('dist-package', function() {\n    var done = this.async();\n    var outputDir = 'build/dist';\n    var repoURL = 'https://github.com/mozilla/shumway-dist';\n\n    var path = require('path');\n    var fs = require('fs');\n    var versionJSON = JSON.parse(fs.readFileSync('build/version/version.json'));\n\n    function prepareFiles(done) {\n      grunt.file.copy('build/libs/builtin.abc', outputDir + '/build/libs/builtin.abc');\n      grunt.file.copy('build/playerglobal/playerglobal.abcs', outputDir + '/build/playerglobal/playerglobal.abcs');\n      grunt.file.copy('build/playerglobal/playerglobal.json', outputDir + '/build/playerglobal/playerglobal.json');\n      grunt.file.copy('build/libs/relooper.js', outputDir + '/build/libs/relooper.js');\n      copyFilesUsingPattern('build/bundles-cc/*.js', outputDir + '/build/bundles');\n\n      // shuobject packaging\n      copyFilesUsingPattern('web/iframe/*', outputDir + '/iframe');\n      grunt.file.copy('extension/shuobject/shuobject.js', outputDir + '/shuobject.js');\n      grunt.file.copy('src/compatibility.js', outputDir + '/src/compatibility.js');\n\n      // shell packaging\n      grunt.file.copy('build/ts/shell.js', outputDir + '/build/ts/shell.js');\n      fs.writeFileSync(outputDir + '/build/ts/shell.conf', 'dist');\n      grunt.file.copy('src/shell/shell-node.js', outputDir + '/src/shell/shell-node.js');\n\n      var waitFor = 1;\n      copyFilesUsingPattern('src/shell/runners/run-*', outputDir + '/bin', function (dest) {\n        waitFor++;\n        grunt.util.spawn({cmd: 'chmod', args: ['+x', dest]}, function () {\n          waitFor--;\n          if (waitFor === 0) {\n            done();\n          }\n        });\n      });\n\n      // manifests\n      var packageJSON = {\n        \"name\": \"shumway-dist\",\n        \"version\": versionJSON.version,\n        \"description\": \"Generic build of Mozilla's Shumway library.\",\n        \"keywords\": [\n          \"Mozilla\",\n          \"Shumway\"\n        ],\n        \"homepage\": \"http://mozilla.github.io/shumway/\",\n        \"bugs\": \"https://github.com/mozilla/shumway/issues\",\n        \"license\": \"Apache-2.0\",\n        \"repository\": {\n          \"type\": \"git\",\n          \"url\": \"https://github.com/mozilla/shumway-dist\"\n        }\n      };\n      fs.writeFileSync(outputDir + '/package.json', JSON.stringify(packageJSON, null, 2));\n      var bowerJSON = {\n        \"name\": \"shumway-dist\",\n        \"version\": versionJSON.version,\n        \"main\": [\n          \"shuobject.js\"\n        ],\n        \"ignore\": [],\n        \"keywords\": [\n          \"Mozilla\",\n          \"Shumway\"\n        ]\n      };\n      fs.writeFileSync(outputDir + '/bower.json', JSON.stringify(bowerJSON, null, 2));\n\n      grunt.file.copy('build/version/version.txt', outputDir + '/version.txt');\n      grunt.file.copy('LICENSE', outputDir + '/LICENSE');\n      grunt.file.copy('utils/dist/README.md', outputDir + '/README.md');\n\n      if (--waitFor === 0) {\n        done();\n      }\n    }\n\n    function addCommitMessages(done) {\n      var message = 'Shumway version ' + versionJSON.version;\n      var tag = 'v' + versionJSON.version;\n      grunt.util.spawn({cmd: 'git', args: ['add', '--all'], opts: {cwd: outputDir}}, function (error) {\n        grunt.util.spawn({cmd: 'git', args: ['commit', '-am', message], opts: {cwd: outputDir}}, function () {\n          grunt.util.spawn({cmd: 'git', args: ['tag', '-a', tag, '-m', message], opts: {cwd: outputDir}}, function () {\n            done();\n          });\n        });\n      });\n    }\n\n    grunt.file.delete(outputDir);\n    grunt.file.mkdir(outputDir);\n\n    grunt.util.spawn({cmd: 'git', args: ['clone', '--depth', '1', repoURL, outputDir]}, function () {\n      prepareFiles(function () {\n        addCommitMessages(function () {\n          console.info();\n          console.info('Done. Push with');\n          console.info('  cd ' + outputDir + '; git push --tags ' + repoURL + ' master');\n          console.info();\n\n          done();\n        });\n      });\n    });\n  });\n\n  grunt.registerTask('clean', function () {\n    var filesToRemove = [\n      'build', // Deletes entire 'build' folder!\n      'test/tmp/',\n      'test/*.log',\n      'test/avm2/*.tmp'\n    ];\n    filesToRemove.forEach(function (files) {\n      grunt.file.expand(files).forEach(function (file) {\n        grunt.file.delete(file);\n      });\n    });\n  });\n\n  grunt.registerTask('firefox', ['build', 'closure-bundles', 'exec:build_extension']);\n  grunt.registerTask('mozcentral', ['build', 'closure-bundles', 'exec:build_mozcentral']);\n  grunt.registerTask('web', ['build', 'closure-bundles', 'exec:build_extension', 'shell-package', 'shuobject-package', 'exec:build_web']);\n  grunt.registerTask('dist', ['build', 'closure-bundles', 'dist-package']);\n};\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.9365234375,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n"
        },
        {
          "name": "LICENSE-OFL.txt",
          "type": "blob",
          "size": 4.03125,
          "content": "-----------------------------------------------------------\nSIL OPEN FONT LICENSE Version 1.1 - 26 February 2007\n-----------------------------------------------------------\n\nPREAMBLE\nThe goals of the Open Font License (OFL) are to stimulate worldwide\ndevelopment of collaborative font projects, to support the font\ncreation efforts of academic and linguistic communities, and to\nprovide a free and open framework in which fonts may be shared and\nimproved in partnership with others.\n\nThe OFL allows the licensed fonts to be used, studied, modified and\nredistributed freely as long as they are not sold by themselves. The\nfonts, including any derivative works, can be bundled, embedded,\nredistributed and/or sold with any software provided that any reserved\nnames are not used by derivative works. The fonts and derivatives,\nhowever, cannot be released under any other type of license. The\nrequirement for fonts to remain under this license does not apply to\nany document created using the fonts or their derivatives.\n\nDEFINITIONS\n\"Font Software\" refers to the set of files released by the Copyright\nHolder(s) under this license and clearly marked as such. This may\ninclude source files, build scripts and documentation.\n\n\"Reserved Font Name\" refers to any names specified as such after the\ncopyright statement(s).\n\n\"Original Version\" refers to the collection of Font Software\ncomponents as distributed by the Copyright Holder(s).\n\n\"Modified Version\" refers to any derivative made by adding to,\ndeleting, or substituting -- in part or in whole -- any of the\ncomponents of the Original Version, by changing formats or by porting\nthe Font Software to a new environment.\n\n\"Author\" refers to any designer, engineer, programmer, technical\nwriter or other person who contributed to the Font Software.\n\nPERMISSION & CONDITIONS\nPermission is hereby granted, free of charge, to any person obtaining\na copy of the Font Software, to use, study, copy, merge, embed,\nmodify, redistribute, and sell modified and unmodified copies of the\nFont Software, subject to the following conditions:\n\n1) Neither the Font Software nor any of its individual components, in\nOriginal or Modified Versions, may be sold by itself.\n\n2) Original or Modified Versions of the Font Software may be bundled,\nredistributed and/or sold with any software, provided that each copy\ncontains the above copyright notice and this license. These can be\nincluded either as stand-alone text files, human-readable headers or\nin the appropriate machine-readable metadata fields within text or\nbinary files as long as those fields can be easily viewed by the user.\n\n3) No Modified Version of the Font Software may use the Reserved Font\nName(s) unless explicit written permission is granted by the\ncorresponding Copyright Holder. This restriction only applies to the\nprimary font name as presented to the users.\n\n4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font\nSoftware shall not be used to promote, endorse or advertise any\nModified Version, except to acknowledge the contribution(s) of the\nCopyright Holder(s) and the Author(s) or with their explicit written\npermission.\n\n5) The Font Software, modified or unmodified, in part or in whole,\nmust be distributed entirely under this license, and must not be\ndistributed under any other license. The requirement for fonts to\nremain under this license does not apply to any document created using\nthe Font Software.\n\nTERMINATION\nThis license becomes null and void if any of the above conditions are\nnot met.\n\nDISCLAIMER\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\nOF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE\nCOPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nINCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\nDAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM\nOTHER DEALINGS IN THE FONT SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.8408203125,
          "content": "# Copyright 2013 Mozilla Foundation\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ndefault:\n\t@echo \"run: make [check-system|bootstrap|install-utils|install-libs|\"\n\t@echo \"           build-playerglobal|build-extension|build-web|build-libs|\"\n\t@echo \"           run-tamarin-tests|run-tamarin-sanity-tests|test-avm2|\"\n\t@echo \"           reftest|makeref|update-flash-refs|build-tamarin-tests|\"\n\t@echo \"           install-avmshell|install-tamarin-src|link-utils]\"\n\ncheck-system:\n\techo \"Checking the presence of grunt-cli...\"\n\tgrunt --version\n\techo \"Checking the presence of java...\"\n\tjava -version\n\techo \"Checking the presence of node...\"\n\tnode -v\n\tif node -v | grep -e \"v0\\\\.[0-7]\\\\.\" ; then \\\n\t  echo \"node 0.8+\"; exit 1; \\\n\tfi\n\techo \"The environment is good\"\n\nbootstrap: check-system install-libs install-utils show-welcome\n\ninstall-libs:\n\tgit submodule init\n\tgit submodule update\n\ninstall-utils: check-system\n\tnpm install\n\tmake -C utils/ install-avmshell install-js\n\ninstall-avmshell:\n\tmake -C utils/ install-avmshell\n\ninstall-tamarin-src: check-system\n\techo \"Checking the presence of mercurial...\"\n\thg --version\n\tmake -C utils/ install-tamarin-src install-tamarin-tests\n\nBASE ?= $(error ERROR: Specify BASE that points to the Shumway folder with installed utils)\n\nlink-utils:\n\tcp -R $(BASE)/node_modules .\n\tln -s $(BASE)/utils/tamarin-redux $(BASE)/utils/jsshell $(BASE)/utils/swfdec utils/\n\tln -s $(BASE)/test/ats/swfs test/ats/swfs\n\nclone-build:\n\tcp -R $(BASE)/build .\n\nrun-tamarin-sanity-tests:\n\tmake -C utils/ run-tamarin-sanity-tests\n\nrun-tamarin-tests:\n\tmake -C utils/ run-tamarin-tests\n\nshow-welcome:\n\techo \"Everything's in order, now run \\`grunt build\\` to compile.\"\n\nbuild-libs:\n\tgrunt shu\n\nbuild-playerglobal:\n\tmake -C utils/ build-playerglobal\n\nbuild-extension:\n\tgrunt firefox\n\nbuild-web:\n\tgrunt web\n\nMXMLC_FLAGS ?= -static-link-runtime-shared-libraries\nMXMLC = ./utils/flex_sdk/bin/mxmlc $(MXMLC_FLAGS)\n%.swf: %.as\n\t$(MXMLC) $<\n\nupdate-flash-refs:\n\tgrunt update-flash-refs\n\ntest-avm2:\n\tgrunt exec:test_avm2_quick\n\nreftest:\n\tgrunt reftest\n\nmakeref:\n\tgrunt makeref\n\nreftest-swfdec:\n\tgrunt reftest-swfdec\n\nlint:\n\tgrunt tslint:all\n\nserver:\n\tgrunt server\n\n.PHONY: check-system install-libs install-utils build-tamarin-tests \\\n        build-playerglobal build-extension build-web default \\\n        reftest makeref check-browser-manifest test-avm2 \\\n        link-utils clone-build bootstrap show-welcome\n\n"
        },
        {
          "name": "README-LICENSE.txt",
          "type": "blob",
          "size": 0.2431640625,
          "content": "The Shumway source code and resources are licensed under the Apache License,\nVersion 2.0. See LICENSE for details.\n\nThe Adobe Blank 2 font as used by Shumway is licensed under the SIL Open Font\nLicense, Version 1.1. See LICENSE-OFL.txt for details.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.0029296875,
          "content": "[![Build Status](https://travis-ci.org/mozilla/shumway.svg?branch=master)](https://travis-ci.org/mozilla/shumway)\n\n# Shumway\n\nShumway is an HTML5 technology experiment that explores building a faithful\nand efficient renderer for the SWF file format without native code\nassistance.\n\nShumway is community-driven and supported by Mozilla. Our goal is to\ncreate a general-purpose, web standards-based platform for parsing and\nrendering SWFs. Integration with Firefox is a possibility if the experiment\nproves successful.\n\n# Getting started\n\n### Online demo\n\nFor an online demo, visit:\n\n+ http://mozilla.github.io/shumway/examples/racing/\n+ Or see all the demos at http://mozilla.github.io/shumway/\n\n### Extension\n\nInstall the Firefox extension: http://mozilla.github.io/shumway/extension/firefox/shumway.xpi\n\nThis development extension should be quite stable but still might break from time to time.\nAlso, note that the development extension is updated on every merge and by default Firefox will\nauto-update extensions on a daily basis (you can change this through the \n`extensions.update.interval` option in `about:config`, time is in seconds).\n\nTo build the Firefox extension: use `grunt firefox`.\n\n## Contributing\n\n### Development\n[See the wiki](https://github.com/mozilla/shumway/wiki).\n\nIf you don't want to hack on the project or have little spare time, __you still\ncan help!__ Just install the Firefox extension, test it on SWFs in the wild,\nand report any problems or unimplemented features.\n\nOur GitHub contributors so far:\n\n+ https://github.com/mozilla/shumway/contributors\n\nYou can add your name to it! :)\n\nThe easiest way to get started is to [grep for TODOs](https://github.com/mozilla/shumway/search?q=TODO&ref=cmdform) and implement them.\n\n# Additional resources\n\nTalk to us on IRC:\n\n+ #shumway on irc.mozilla.org\n\nPost on our mailing list:\n\n+ dev-shumway@lists.mozilla.org\n\nSubscribe either using lists.mozilla.org or Google Groups: \n  \n+ https://lists.mozilla.org/listinfo/dev-shumway\n+ http://groups.google.com/group/mozilla.dev.shumway\n"
        },
        {
          "name": "diff_test",
          "type": "blob",
          "size": 0.240234375,
          "content": "#! /usr/bin/env bash\n\njava -jar utils/asc.jar -md -import build/libs/builtin.abc $1.as\n\njs build/ts/shell.js -x -bl $1.abc -w ri\n\ncolordiff -s -W 150 -y --difftype=diffy <(js build/ts/shell.js -x -bl $1.abc) <(utils/avmshell/mac/avmshell $1.abc)\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extension",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.9697265625,
          "content": "{\n  \"name\": \"shumway\",\n  \"version\": \"0.7.0\",\n  \"devDependencies\": {\n    \"typescript\": \"1.5.3\",\n    \"grunt\": \"~0.4.2\",\n    \"tslint\": \"2.0.1\",\n    \"grunt-tslint\": \"2.0.0\",\n    \"grunt-exec\": \"~0.4.2\",\n    \"grunt-contrib-watch\": \"~0.5.3\",\n    \"grunt-parallel\": \"~0.3.1\",\n    \"time-grunt\": \"1.1.0\",\n    \"temp\": \"0.5.0\",\n    \"yargs\": \"~1.2.1\",\n    \"typescript-module-merger\": \"0.1\"\n  },\n  \"description\": \"Shumway is an HTML5 technology experiment that explores building a faithful and efficient renderer for the SWF file format without native code assistance.\",\n  \"main\": \"Gruntfile.js\",\n  \"directories\": {\n    \"example\": \"examples\",\n    \"test\": \"test\"\n  },\n  \"scripts\": {\n    \"test\": \"grunt travis --verbose\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mozilla/shumway.git\"\n  },\n  \"author\": \"Mozilla Research\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mozilla/shumway/issues\"\n  },\n  \"dependencies\": {\n    \"fast-html-parser\": \"^1.0.0\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "traceLogging",
          "type": "tree",
          "content": null
        },
        {
          "name": "tslint.json",
          "type": "blob",
          "size": 1.1767578125,
          "content": "{\n  \"rules\": {\n    \"class-name\": true,\n    \"curly\": false,\n    \"eofline\": true,\n    \"forin\": false,\n    \"label-position\": true,\n    \"label-undefined\": true,\n    \"max-line-length\": [false, 140],\n    \"no-arg\": true,\n    \"no-bitwise\": false,\n    \"no-console\": [true,\n        \"debug\",\n        \"info\",\n        \"time\",\n        \"timeEnd\",\n        \"trace\"\n    ],\n    \"no-construct\": true,\n    \"no-debugger\": true,\n    \"no-duplicate-key\": true,\n    \"no-duplicate-variable\": false,\n    \"no-empty\": true,\n    \"no-eval\": true,\n    \"no-string-literal\": false,\n    \"no-switch-case-fall-through\": false,\n    \"no-trailing-comma\": true,\n    \"no-trailing-whitespace\": false,\n    \"no-unused-expression\": false,\n    \"no-unused-variable\": false,\n    \"no-unreachable\": true,\n    \"no-use-before-declare\": false,\n    \"one-line\": [true,\n        \"check-catch\",\n        \"check-else\",\n        \"check-whitespace\"\n    ],\n    \"quotemark\": [false, \"double\"],\n    \"radix\": false,\n    \"semicolon\": true,\n    \"triple-equals\": [false, \"allow-null-check\"],\n    \"variable-name\": false,\n    \"whitespace\": [false,\n        \"check-branch\",\n        \"check-decl\",\n        \"check-operator\",\n        \"check-separator\",\n        \"check-type\"\n    ]\n  }\n}"
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}