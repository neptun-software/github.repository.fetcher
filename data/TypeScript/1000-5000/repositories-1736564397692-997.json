{
  "metadata": {
    "timestamp": 1736564397692,
    "page": 997,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjEwMDA=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cdk-patterns/serverless",
      "stars": 2297,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.8798828125,
          "content": "!jest.config.js\n*.d.ts\nnode_modules\n.DS_Store\n\n# Intellij\n.idea\n\n# CDK asset staging directory\n.cdk.staging\ncdk.out\n.parcel-cache\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.283203125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at @cdkpatterns on twitter via dm. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.8779296875,
          "content": "# How To Contribute\nThis repo is designed to be a collection of aws serverless architecture patterns built with cdk. That means it should\neventually hold a cdk version of all patterns presented by AWS heros. If you want to contribute that is amazing and I will work through the process with you.\n\nThere are three different types of contribution today:\n1. A brand new pattern\n2. Add a new language implementation for an existing pattern\n3. Converting Lambda Fns to CDK Language\n\n## Adding a Brand New Pattern\nThis is where you have an implementation you want to share with the world that isn't currently in the codebase. Alternatively you may have seen someone talk about a pattern somewhere and you want to code it yourself to learn but not waste the code.\n\n**Note** All patterns need to be in at least TypeScript and Python before I announce them but you can contribute the pattern in any CDK supported language and I will port it to Python/TS then announce\n\nContribution Steps:\n\n1. Find a pattern that you want to share\n2. Open an issue on this repo stating that you want to add this pattern so other people don't duplicate effort. Include links to arch pics in the issue\n3. Branch the repo into your own personal github account\n4. Build your pattern, make sure you add unit tests and a useful level of documentation including a simple arch diagram. If possible please try and link the pattern to the AWS Well Architected Framework in the readme and link to external sources for more info. Please also make sure you credit the original creator of the pattern, this is not about stealing content.\n5. If it is TypeScript, make sure your pattern has the npm run deploy task added\n6. Open up a pull request and start the merge discussion!\n\n## Adding a new language for an existing pattern\nToday all patterns are in TypeScript/Python with some in .Net and Java. If you want to add any supported CDK language for any pattern my only ask is keep it the exact same logically as the TypeScript version (usually the base reference). Also try not to be super opinionated about the implementation itself, I try to keep my personal opinions out of the patterns so that when engineers pick one up for the first time there is no cognitive burden working out my coding style.\n\nContribution Steps:\n\n1. Open an issue stating what you want to do\n2. Branch the repo into your own personal github account\n3. Add your new language implementation\n4. Open up a pr\n\n## Converting Lambda Fns to CDK Language\nThis would be a big help and is a great way to get started contributing. When a pattern launches typically I build it in TypeScript and then port it over to Python. In order to reduce bugs at launch I typically reuse the JS Lambda Fn in the Python version then slowly refactor over time to full Python. If you spot one of these JS functions in a Python pattern and want to convert it to Python it is small enough that you could just do it and open a Pull Request\n"
        },
        {
          "name": "EXTERNAL_PATTERNS.md",
          "type": "blob",
          "size": 2.3076171875,
          "content": "<img src=\"img/cdkpatterns_logo.png\" width=\"450\" />\n\n## External Patterns\n\n### AWS Examples\n\n#### [Building enterprise applications using Amazon DynamoDB, AWS Lambda, and Go](https://github.com/aws-samples/aws-dynamodb-enterprise-application/blob/master/README.md) by Geoffroy Rollat\n\n\nFound via this [tweet](https://twitter.com/danilop/status/1222856997751656449)\n* [Tutorial](https://aws.amazon.com/blogs/database/building-enterprise-applications-using-amazon-dynamodb-aws-lambda-and-golang/)\n* [GitHub Repo](https://github.com/aws-samples/aws-dynamodb-enterprise-application)\n\n![Architecture](https://raw.githubusercontent.com/cdk-patterns/serverless/master/img/building-enterprise-architecture.jpg)\n\n#### [Designing Cloud Native Microservices on AWS (via DDD/EventStormingWorkshop)](https://github.com/aws-samples/designing-cloud-native-microservices-on-aws) by [Kim Kao](https://twitter.com/YiKaiKao)\n> Introduce a fluent way to design cloud native microservices via EventStorming workshop, this is a hands-on workshop. Contains such topics: DDD, Event storming, Specification by example. Including the AWS product : Serverless Lambda , DynamoDB, Fargate, CloudWatch.\n\n* [Tutorial / Github](https://github.com/aws-samples/designing-cloud-native-microservices-on-aws)\n\n![Architecture](img/Coffeeshop-architecture.png)\n\n### Sebastian Müller ([@sbstjn](https://twitter.com/sbstjn), [@superluminario](https://twitter.com/superluminario))\n\n> Full-featured example project based on [create-react-app](https://create-react-app.dev/) with server-side rendering and continuous deployment.\n\n#### [React SPA with server-side rendering on AWS Lambda](https://github.com/sbstjn/cra-serverless/blob/master/README.md)\n\nFound via this [tweet](https://twitter.com/sbstjn/status/1225811582061621250?s=20) and [this](https://twitter.com/superluminario/status/1225779586161684480).\n\n* [Tutorial (English)](https://sbstjn.com/serverless-create-react-app-server-side-rendering-ssr-lamda.html)\n* [Tutorial (German)](https://superluminar.io/2020/02/07/react-spa-und-server-side-rendering-ssr-mit-aws-lambda-cloudfront-und-dem-cdk/)\n* [GitHub Repo](https://github.com/sbstjn/cra-serverless/blob/master/README.md)\n\n#### Architecture (English)\n\n![Architecture](img/serverless-ssr-react-lambda-en.png)\n\n#### Architecture (German)\n\n![Architecture](img/serverless-ssr-react-lambda-de.png)"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2020 cdk-patterns\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 28.5791015625,
          "content": "<img src=\"img/cdkpatterns_logo.png\" width=\"450\" />\n\nThis is intended to be a repo containing all of the official AWS Serverless architecture patterns built with AWS CDK for developers to use.\n\nFollow [@CdkPatterns](https://twitter.com/cdkpatterns) for live discussion / new pattern announcements. I plan to add a new pattern weekly so check back regularly!\n\nYou can also check out our [Deconstructing CDKPatterns](https://www.youtube.com/channel/UCuR3jnWEnxx1G2axUMVaogg) YouTube channel for in depth walk throughs of the patterns.\n\nNote, this is maintained by [@nideveloper](https://twitter.com/nideveloper) not AWS. For my motivation, please read this [blog post](https://www.mattcoulter.com/blog/post/2)\n\n## New to AWS CDK?\n\n* To learn more visit the [AWS getting started guide](https://docs.aws.amazon.com/cdk/latest/guide/getting_started.html)\n* To do a workshop on CDK visit [cdkworkshop.com](https://cdkworkshop.com)\n* Visit the [Hey CDK &quot;How To&quot; series](https://garbe.io/blog/2019/09/11/hey-cdk-how-to-migrate/) for some detailed answers\n* Check out [Awesome CDK](https://github.com/eladb/awesome-cdk) for a curated list of awesome projects related to CDK\n\n## Pattern Usage\nAll patterns are available in Typescript and Python so pick your favourite language! Note the Typescript patterns all include unit tests but right now I have not seen a standard python testing approach\n\nYou can always clone this repo which contains every pattern in python/typescript but if you just want a single pattern in one language follow these steps:\n\n### 1) Choose your pattern\nBrowse the \"Grouped Alphabetically\" patterns list below or run:\n\n```bash\nnpx cdkp list\n```\n\n### 2) Download Pattern In Python or Typescript CDK\n>Something to be aware of is that the Python version may reuse the JS lambdas from the TypeScript version. This is to reduce the amount of development effort when creating these patterns. It means at launch the TypeScript and Python patterns are effectively identical when deployed but you get the choice of Python or TypeScript for the CDK implementation.\n>\n>I will look to refactor the Python patterns slowly to full Python after initial launch. If you want to help with this effort, pull requests are always welcome!\n<details>\n  <summary>TypeScript</summary>\n  <br />\n  All Patterns support the same commands so you can just run:\n  <br />\n  \n ```bash\nnpx cdkp init {pattern-name}\ncd {pattern-name}\nnpm run test\n# requires you to be using cloud9 or have ran aws configure to setup your local credentials\nnpm run deploy \n```\n</details>\n<details>\n  <summary>Python</summary>\n  <br />\n  The CDK CLI is still installed via npm so make sure you have the latest version of node installed or the npx commands will fail. Then you can just run:\n  <br />\n  \n  ```bash\nnpx cdkp init {pattern-name} --lang=python\ncd {pattern-name}\n\n# create a virtual env and install your dependencies\npython -m venv .env\nsource .env/bin/activate\npip install -r requirements.txt\n\n# test everything is working by outputting the cloudformation\nnpx cdk synth\n# requires you to be using cloud9 or have ran aws configure to setup your local credentials\nnpx cdk deploy\n```\n</details>\n\n## Patterns\n\n[The Filter Pattern By Component Used Page](https://www.serverless-patterns.co.uk/patterns/) allows you to filter patterns by a serverless component e.g. Lambda or API Gateway HTTP API visit, otherwise:\n\n<details>\n  <summary>\n    Grouped Alphabetically\n  </summary>\n\n  #### [Polly](/polly/README.md)\n  Use Amazon Polly to translate text to speech from inside a Lambda Function. You can also take advantage of Amazon Translate to change the language of the spoken text\n\n  ![Architecture](polly/img/overview.png)\n\n  <br /><hr /><br />\n\n  #### Single Page Application S3 Website Deploy\n  These are built using https://www.npmjs.com/package/cdk-spa-deploy and allow you to deploy a website in as little as 5 lines of CDK code.\n\n  * [S3 Angular Deploy ](/s3-angular-website/README.md)\n  * [S3 React Deploy ](/s3-react-website/README.md)\n\n  ![Architecture](https://raw.githubusercontent.com/cdk-patterns/serverless/master/s3-angular-website/img/architecture.PNG)\n\n  <br /><hr /><br />\n\n  #### [The Alexa Skill](/the-alexa-skill/README.md)  \n  Deploy an Alexa Skill backed by a Lambda Function and a DynamoDB Table.\n\n  ![Architecture](the-alexa-skill/img/arch.png)\n\n  <br /><hr /><br />\n\n  #### [The Basic MQ](/the-basic-mq/README.md)  \n  In this example we have private Amazon MQ brokers behind an internet-facing network load balancer endpoint using a subdomain.\n\n  ![Architecture](the-basic-mq/img/the-basic-mq-arch.png)\n\n  <br /><hr /><br />\n\n  #### [The Big Fan](/the-big-fan/README.md)  \n  You can integrate API Gateway directly with SNS and then add some resiliency by integrating your event consumers via sqs and message filtering.\n\n  ![Architecture](the-big-fan/img/the-big-fan-arch.png)\n\n  <br /><hr /><br />\n\n  #### [The CloudWatch Dashboard](/the-cloudwatch-dashboard/README.md)  \n  Build and deploy a well architected CloudWatch dashboard with alerts for the simple webservice pattern\n\n  ![Architecture](the-cloudwatch-dashboard/img/arch2.png)\n\n  <br /><hr /><br />\n\n  #### [The Destined Lambda](/the-destined-lambda/README.md)\n  This is a stock implementation of Lambda Destinations with Amazon EventBridge\n  \n  You can decouple your event driven architectures with EventBridge rules and now you can strip the custom EventBridge code from your Lambda functions with Lambda Destinations.\n\n  ![Architecture](the-destined-lambda/img/arch.png)\n\n  <br /><hr /><br />\n\n  #### [The Dynamo Streamer](/the-dynamo-streamer/README.md)\n  This was taken from this [Tweet](https://twitter.com/edjgeek/status/1220227872511496192?s=20)<br />\n  \n  You can integrate API Gateway directly with DynamoDB and that way your systems can be more resilient! &quot;Code is a liability&quot; so less lambda functions, less liability\n\n  ![Architecture](https://raw.githubusercontent.com/cdk-patterns/serverless/master/the-dynamo-streamer/img/arch.jpg)\n\n  <br /><hr /><br />\n\n  #### [The EFS Lambda](/the-efs-lambda/README.md)\n  This was taken from this [Blogpost](https://aws.amazon.com/blogs/aws/new-a-shared-file-system-for-your-lambda-functions/)<br />\n\n  You can now attach an EFS File System to your Lambda Function for persistence between executions or across different Functions <br /><br />\n\n  ![Architecture](the-efs-lambda/img/arch2.png)\n\n  <br /><hr /><br />\n\n  #### [The EventBridge ATM](/the-eventbridge-atm/README.md)\n  This was taken from this [Blogpost](https://aws.amazon.com/blogs/compute/integrating-amazon-eventbridge-into-your-serverless-applications/)<br />\n\n  You can easily create routing rules in EventBridge to send the same event to multiple sources based on conditions. This example shows you how<br /><br />\n\n  ![Architecture](the-eventbridge-atm/img/amazon-eventbridge-custom-application-2.png)\n\n  <br /><hr /><br />\n\n  #### [The EventBridge Circuit Breaker](/the-eventbridge-circuit-breaker/README.md)\n  Integrate with unreliable external services? Build a circuit breaker and handle the risk <br />\n  ![Architecture](the-eventbridge-circuit-breaker/img/arch2.PNG)\n\n  <br /><hr /><br />\n\n  #### [The EventBridge ETL](/the-eventbridge-etl/README.md)\n  Build a fully serverless CSV to DynamoDB pipeline <br />\n  ![Architecture](the-eventbridge-etl/img/arch.png)\n\n  <br /><hr /><br />\n\n  #### [The Lambda Circuit Breaker](/the-lambda-circuit-breaker/README.md)\n  Deploy Gunnar Grosch's circuitbreaker-lambda inside a reference architecture\n\n  ![Architecture](the-lambda-circuit-breaker/img/arch.png)\n\n  <br /><hr /><br />\n\n  #### [The Lambda Power Tuner](/the-lambda-power-tuner/README.md)\n  Use the Lambda Power Tuner state machine to work out the optimum configuration settings for your Lambda Function\n\n  ![Architecture](the-lambda-power-tuner/img/arch.png)\n\n  <br /><hr /><br />\n\n  #### [The Lambda Trilogy](the-lambda-trilogy/README.md)\n  See the 3 states of Lambda in action (Single Purpose Function, Fat Lambda and Lambda-lith)\n  ![Architecture](the-lambda-trilogy/img/arch2.png)\n\n  <br /><hr /><br />\n\n  #### [The Media Live Stream](the-media-live-stream/README.md)\n  This is an example of how to deploy a Serverless environment to stream live event content.\n  ![Architecture](the-media-live-stream/img/the-media-live-stream.png)\n\n  <br /><hr /><br />\n\n  #### [The Predictive Lambda](the-predictive-lambda/README.md)\n  Deploy a custom Python ML model inside a Docker container running on AWS Lambda\n  ![Architecture](the-predictive-lambda/img/arch_with_cdkp.png)\n\n  <br /><hr /><br />\n\n  #### [The RDS Proxy](the-rds-proxy/README.md)\n  Use RDS Proxy to protect a MySQL RDS Instance from the massively scalable Lambda Function querying it\n  ![Architecture](the-rds-proxy/img/arch_overview.png)\n\n  <br /><hr /><br />\n\n  #### [The Saga Step Function](the-saga-stepfunction/README.md)\n  A mechanism for handling distributed transactions within your system.\n  ![Architecture](the-saga-stepfunction/img/arch.png)\n\n  <br /><hr /><br />\n\n  #### [The Scalable Webhook](/the-scalable-webhook/README.md)\n  Need to integrate a non serverless resource like RDS with a serverless one like Lambda? This is your pattern <br /><br />\n  ![Architecture](https://raw.githubusercontent.com/cdk-patterns/serverless/master/the-scalable-webhook/img/architecture.png)\n\n  <br /><hr /><br />\n\n  #### [The Scheduled Lambda](/the-scheduled-lambda/README.md)\n  Use EventBridge to trigger a Lambda Fuction on a schedule <br /><br />\n  ![Architecture](the-scheduled-lambda/img/the-scheduled-lambda.png)\n\n  <br /><hr /><br />\n\n  #### [The Simple GraphQL Service](/the-simple-graphql-service/README.md)\n  Simple graphQL service built with [AppSync](https://aws.amazon.com/appsync/)<br /><br />\n  ![Architecture](the-simple-graphql-service/img/architecture.png)\n\n  <br /><hr /><br />\n\n  #### [The Simple Webservice](/the-simple-webservice/README.md)\n  The most basic pattern on cdkpatterns, the start of most peoples serverless journey <br /><br />\n  ![Architecture](https://raw.githubusercontent.com/cdk-patterns/serverless/master/the-simple-webservice/img/architecture.png)\n\n  <br /><hr /><br />\n\n  #### [The State Machine](/the-state-machine/README.md)\n  Have complex orchestration logic in your application? Build a state machine <br />\n  ![Architecture](the-state-machine/img/the-state-machine-arch-overview.png)\n\n  <br /><hr /><br />\n\n  #### [The WAF API Gateway](/the-waf-apigateway/README.md)\n  This is a cdk stack to deploy a simple API gateway, and attach a WAF (Web Application Firewall) <br />\n  ![Architecture](the-waf-apigateway/img/the-waf-apigateway.png)\n\n  <br /><hr /><br />\n\n  #### [The X-Ray Tracer](the-xray-tracer/README.md)\n  Learn about using AWS X-Ray for tracing events through your system. This pattern has X-Ray enabled on API Gateway, Lambda, DynamoDB, External HTTP calls, SNS and SQS\n  \n  ![Architecture](the-xray-tracer/img/arch_notitle.png)\n\n  <br /><hr /><br />\n\n</details>\n<details>\n  <summary>\n    Grouped By Pattern Creator\n  </summary>\n  <br />\n  \n  * [Alex Casalboni](#alex-casalboni)\n  * [Andrew Frazer](#andrew-frazer)\n  * [Ariadna Sanchez](#ariadna-sanchez)\n  * [Chris Plankey](#chris-plankey)\n  * [Christian Mueller](#christian-mueller)\n  * [Danilo Poccia](#danilo-poccia)\n  * [Eric Johnson](#eric-johnson)\n  * [Gerald Stewart](#gerald-stewart)\n  * [Gunnar Grosch](#gunnar-grosch)\n  * [Heitor Lessa](#heitor-lessa)\n  * [Hervé Nivon](#hervé-nivon)\n  * [James Beswick](#james-beswick)\n  * [Jeremy Daly](#jeremy-daly)\n  * [Joppe Pelzer](#joppe-pelzer)\n  * [Leandro Damascena](#leandro-damascena)\n  * [Matt Coulter](#matt-coulter)\n  * [Thorsten Hoeger](#thorsten-hoeger)\n  * [Vyas Sarangapani](#vyas-sarangapani)\n  * [Wallace Printz](#wallace-printz)\n  * [Yan Cui](#yan-cui)\n\n  ### Alex Casalboni\n  <img src=\"img/dev_profiles/alex_casalboni.jpg\" width=\"120\" alt=\"Alex Casalboni profile pic\" /><br />\n\n  Musician, Traveler, Software Engineer from Italy. Developer Advocate at @AWS_Italy<br />\n\n  Twitter - [@alex_casalboni](https://twitter.com/alex_casalboni)<br />\n\n  #### [The Lambda Power Tuner](/the-lambda-power-tuner/README.md)\n  Use the Lambda Power Tuner state machine to work out the optimum configuration settings for your Lambda Function\n\n  ![Architecture](the-lambda-power-tuner/img/arch.png)\n\n  <br /><hr /><br />\n\n  ### Andrew Frazer\n  <img src=\"img/dev_profiles/andrew_frazer.jpeg\" width=\"120\" alt=\"Andrew Frazer profile pic\" /><br />\n\n  Github - [@mrpackethead](https://github.com/mrpackethead)<br />\n\n  #### [The WAF API Gateway](/the-waf-apigateway/README.md)\n  This is a cdk stack to deploy a simple API gateway, and attach a WAF (Web Application Firewall) <br />\n  ![Architecture](the-waf-apigateway/img/the-waf-apigateway.png)\n\n  <br /><hr /><br />\n\n  ### Ariadna Sanchez\n  <img src=\"img/dev_profiles/ariadna-sanchez.jpg\" width=\"120\" alt=\"Ariadna Sanchez profile pic\" /><br />\n\n  Ariadna Sanchez is a Research Scientist investigating the application of DL/ML technologies in the area of text-to-speech. After completing a bachelor’s in Audiovisual Systems Engineering, she received her MSc in Speech and Language Processing from University of Edinburgh in 2018. She has previously worked as an intern in NLP and TTS. During her time at University, she focused on TTS and signal processing, especially in the dysarthria field. She has experience in Signal Processing, Deep Learning, NLP, Speech and Image Processing. In her free time, Ariadna likes playing the violin, reading books and playing games.<br />\n\n  #### [Polly](/polly/README.md)  \n  Use Amazon Polly to translate text to speech from inside a Lambda Function. You can also take advantage of Amazon Translate to change the language of the spoken text\n\n  ![Architecture](polly/img/overview.png)\n\n  <br /><hr /><br />\n\n  ### Chris Plankey\n  <img src=\"img/dev_profiles/chris_plankey.png\" width=\"120\" alt=\"Chris Plankey profile pic\" /><br />\n\n  CTO of MaverickApp.io, AWS Portsmouth User Group Co-Organizer and AWS Community Builder.<br />\n\n  Github - [@cplankey](https://github.com/cplankey) <br />\n  Twitter - [@serverlesschris](https://twitter.com/serverlesschris) <br />\n\n  #### [The Alexa Skill](/the-alexa-skill/README.md)  \n  Deploy an Alexa Skill backed by a Lambda Function and a DynamoDB Table.\n\n  ![Architecture](the-alexa-skill/img/arch.png)\n\n  <br /><hr /><br />\n\n  ### Christian Mueller\n  <img src=\"img/dev_profiles/christian_mueller.jpeg\" width=\"120\" alt=\"Christian Mueller profile pic\" /><br />\n\n  Solutions Architect @ AWS & Apache Member @ ASF<br />\n\n  Github - [@muellerc](https://github.com/muellerc) <br />\n\n  #### [The Basic MQ](/the-basic-mq/README.md)  \n  In this example we have private Amazon MQ brokers behind an internet-facing network load balancer endpoint using a subdomain.\n  ![Architecture](the-basic-mq/img/the-basic-mq-arch.png)\n\n  <br /><hr /><br />\n\n  ### Danilo Poccia\n  <img src=\"img/dev_profiles/danilo_poccia.jpg\" width=\"120\" alt=\"Danilo Poccia profile pic\" /><br />\n\n  Chief Evangelist (EMEA) @AWSCloud. Mostly Serverless, IoT, AI/ML. Few pics. Some music. My opinions. Complexity is a science. http://pronoun.is/he<br />\n\n  Twitter - [@danilop](https://twitter.com/danilop)<br />\n\n  #### [The EFS Lambda](/the-efs-lambda/README.md)\n  This was taken from this [Blogpost](https://aws.amazon.com/blogs/aws/new-a-shared-file-system-for-your-lambda-functions/)<br />\n\n  You can now attach an EFS File System to your Lambda Function for persistence between executions or across different Functions <br /><br />\n\n  ![Architecture](the-efs-lambda/img/arch2.png)\n\n  <br /><hr /><br />\n\n  ### Eric Johnson\n  <img src=\"img/dev_profiles/eric_johnson.png\" width=\"120\" alt=\"Eric Johnson profile pic\" /><br />\n\n  Christian, husband, dad of 5, musician, Senior Developer Advocate - Serverless for @AWScloud. Opinions are my own. #Serverless #ServerlessForEveryone<br />\n\n  Twitter - [@edjgeek](https://twitter.com/edjgeek)<br />\n  Youtube - [bit.ly/edjgeek](https://bit.ly/edjgeek)<br />\n\n  #### [The Dynamo Streamer](/the-dynamo-streamer/README.md)\n  This was taken from this [Tweet](https://twitter.com/edjgeek/status/1220227872511496192?s=20)<br />\n  \n  You can integrate API Gateway directly with DynamoDB and that way your systems can be more resilient! &quot;Code is a liability&quot; so less lambda functions, less liability\n\n  ![Architecture](https://raw.githubusercontent.com/cdk-patterns/serverless/master/the-dynamo-streamer/img/arch.jpg)\n\n  <br /><hr /><br />\n\n  ### Gerald Stewart\n  <img src=\"img/dev_profiles/gerald_stewart.jpg\" width=\"120\" alt=\"Gerald Stewart profile pic\" /><br />\n\n  Software Engineer @Liberty_IT<br />\n\n  Twitter - [@_gerald20](https://twitter.com/_gerald20)<br />\n\n  #### [The Scheduled Lambda](/the-scheduled-lambda/README.md)\n  Use EventBridge to trigger a Lambda Fuction on a schedule <br /><br />\n\n  ![Architecture](the-scheduled-lambda/img/the-scheduled-lambda.png)\n\n  <br /><hr /><br />\n\n  ### Gunnar Grosch\n  <img src=\"img/dev_profiles/gunnar_grosch.jpg\" width=\"120\" alt=\"Gunnar Grosch profile pic\" /><br />\n\n  Senior Developer Advocate @awscloud<br />\n\n  Twitter - [@GunnarGrosch](https://twitter.com/GunnarGrosch)<br />\n  Blog - [grosch.se](https://grosch.se/)<br />\n\n  #### [The Lambda Circuit Breaker](/the-lambda-circuit-breaker/README.md)\n  Deploy Gunnar Grosch's circuitbreaker-lambda inside a reference architecture\n\n  ![Architecture](the-lambda-circuit-breaker/img/arch.png)\n\n\n  <br /><hr /><br />\n\n  ### Heitor Lessa\n  <img src=\"img/dev_profiles/heitor_lessa.png\" width=\"120\" alt=\"Heitor Lessa profile pic\" /><br />\n\n  Principal Serverless Lead, Well-Architected @ AWS<br />\n\n  Twitter - [@heitor_lessa](https://twitter.com/heitor_lessa)<br />\n\n  #### [The Big Fan](/the-big-fan/README.md)  \n  You can integrate API Gateway directly with SNS and then add some resiliency by integrating your event consumers via sqs and message filtering.\n\n  ![Architecture](the-big-fan/img/the-big-fan-arch.png)\n\n  #### [The Saga Step Function](the-saga-stepfunction/README.md)\n  A mechanism for handling distributed transactions within your system.\n  ![Architecture](the-saga-stepfunction/img/arch.png)\n\n  <br /><hr /><br />\n\n  ### Hervé Nivon\n  <img src=\"img/dev_profiles/herve_nivon.jpg\" width=\"120\" alt=\"Hervé Nivon profile pic\" /><br />\n\n  Startup Solutions Architect @AWScloud ★ Founder ★ Focus on #Innovation, #Cloud, #Startup, #AI ★ #Geek, #Curious & #Epicurean ★<br />\n\n  Twitter - [@hervenivon](https://twitter.com/hervenivon) <br />\n  Github - [@hervenivon](https://github.com/hervenivon/aws-experiments-data-ingestion-and-analytics) <br />\n\n  #### [The EventBridge ETL](/the-eventbridge-etl/README.md)\n  Build a fully serverless CSV to DynamoDB pipeline <br />\n  ![Architecture](the-eventbridge-etl/img/arch.png)\n\n  <br /><hr /><br />\n\n  ### James Beswick\n  <img src=\"img/dev_profiles/james_beswick.png\" width=\"120\" alt=\"James Beswick profile pic\" /><br />\n\n  ☁️🥑 Dev Advocate @AWScloud Serverless<br />\n\n  Twitter - [@jbesw](https://twitter.com/jbesw) <br />\n  Blog - [medium.com/@jbesw](https://medium.com/@jbesw)<br />\n\n  #### [The EventBridge ATM](/the-eventbridge-atm/README.md)\n  This was taken from this [Blogpost](https://aws.amazon.com/blogs/compute/integrating-amazon-eventbridge-into-your-serverless-applications/)<br />\n\n  You can easily create routing rules in EventBridge to send the same event to multiple sources based on conditions. This example shows you how<br /><br />\n\n  ![Architecture](the-eventbridge-atm/img/amazon-eventbridge-custom-application-2.png)\n\n  <br /><hr /><br />\n\n  ### Jeremy Daly\n  <img src=\"img/dev_profiles/jeremy_daly.png\" width=\"120\" alt=\"jeremy daly profile pic\" /><br />\n\n  AWS Serverless Hero/🥑 & host of @ServerlessChats. I build web & open source stuff, blog, speak, and publish http://OffByNone.io every week. CTO @AlertMeNews.<br />\n\n  Twitter - [@jeremy_daly](https://twitter.com/jeremy_daly) <br />\n  Blog - [jeremydaly.com](https://www.jeremydaly.com/) <br />\n\n  These patterns are from https://www.jeremydaly.com/serverless-microservice-patterns-for-aws/\n\n  #### [The Lambda Trilogy](the-lambda-trilogy/README.md)\n  See the 3 states of Lambda in action (Single Purpose Function, Fat Lambda and Lambda-lith)\n  ![Architecture](the-lambda-trilogy/img/arch2.png)\n\n  #### [The Simple Webservice](/the-simple-webservice/README.md)\n  The most basic pattern on cdkpatterns, the start of most peoples serverless journey <br /><br />\n  ![Architecture](https://raw.githubusercontent.com/cdk-patterns/serverless/master/the-simple-webservice/img/architecture.png)\n\n  #### [The Scalable Webhook](/the-scalable-webhook/README.md)\n  Need to integrate a non serverless resource like RDS with a serverless one like Lambda? This is your pattern <br /><br />\n  ![Architecture](https://raw.githubusercontent.com/cdk-patterns/serverless/master/the-scalable-webhook/img/architecture.png)\n\n  #### [The State Machine](/the-state-machine/README.md)\n  Have complex orchestration logic in your application? Build a state machine <br />\n  ![Architecture](the-state-machine/img/the-state-machine-arch-overview.png)\n\n  #### [The EventBridge Circuit Breaker](/the-eventbridge-circuit-breaker/README.md)\n  Integrate with unreliable external services? Build a circuit breaker and handle the risk <br />\n  ![Architecture](the-eventbridge-circuit-breaker/img/arch2.PNG)\n\n  <br /><hr /><br />\n\n  ### Joppe Pelzer\n  <img src=\"img/dev_profiles/joppe-pelzer.jpg\" width=\"120\" alt=\"Joppe Pelzer profile pic\" /><br />\n\n  Joppe Pelzer is a Language Engineer working on text-to-speech for English and building style voices. With bachelor’s degrees in linguistics and Scandinavian languages, she graduated from Edinburgh University with an MSc in Speech and Language Processing in 2018. During her masters she focused on the text-to-speech front end, building and expanding upon multilingual G2P models, and has gained experience with NLP, Speech recognition and Deep Learning. Outside of work, she likes to draw, play games, and spend time in nature.<br />\n\n  #### [Polly](/polly/README.md)  \n  Use Amazon Polly to translate text to speech from inside a Lambda Function. You can also take advantage of Amazon Translate to change the language of the spoken text\n\n  ![Architecture](polly/img/overview.png)\n\n  <br /><hr /><br />\n\n  ### Leandro Damascena\n  <img src=\"img/dev_profiles/leandro-damascena.jpg\" width=\"120\" alt=\"Leandro Damascena profile pic\" /><br />\n\n  Cloud Solutions Architect, Writer http://leandrodamascena.medium.com and Open-source enthusiast.<br />\n\n  #### [The Media Live Stream](the-media-live-stream/README.md)\n  This is an example of how to deploy a Serverless environment to stream live event content.\n  ![Architecture](the-media-live-stream/img/the-media-live-stream.png)\n\n  <br /><hr /><br />\n\n  ### Matt Coulter\n  <img src=\"img/dev_profiles/nideveloper.png\" width=\"120\" alt=\"nideveloper profile pic\" /><br />\n\n  Software Architect, working for @Liberty_IT in Belfast. Passionate about #Serverless, #AWS, @cdkpatterns, #TCO, CI/CD and #TrunkBasedDev.<br />\n\n  Twitter - [@nideveloper](https://twitter.com/nideveloper) <br />\n  Blog - [mattcoulter.com](https://www.mattcoulter.com) <br />\n  \n  #### Single Page Application S3 Website Deploy\n  These are built using https://www.npmjs.com/package/cdk-spa-deploy and allow you to deploy a website in as little as 5 lines of CDK code.\n\n  * [S3 Angular Deploy ](/s3-angular-website/README.md)\n  * [S3 React Deploy ](/s3-react-website/README.md)\n\n  ![Architecture](https://raw.githubusercontent.com/cdk-patterns/serverless/master/s3-angular-website/img/architecture.PNG)\n\n  #### [The CloudWatch Dashboard](/the-cloudwatch-dashboard/README.md)  \n  Build and deploy a well architected CloudWatch dashboard with alerts for the simple webservice pattern\n\n  ![Architecture](the-cloudwatch-dashboard/img/arch2.png)\n\n  #### [The Destined Lambda](/the-destined-lambda/README.md)\n  This is a stock implementation of Lambda Destinations with Amazon EventBridge\n  \n  You can decouple your event driven architectures with EventBridge rules and now you can strip the custom EventBridge code from your Lambda functions with Lambda Destinations.\n\n  ![Architecture](the-destined-lambda/img/arch.png)\n\n  #### [The Predictive Lambda](the-predictive-lambda/README.md)\n\n  Deploy a custom Python ML model inside a Docker container running on AWS Lambda\n  \n  ![Architecture](the-predictive-lambda/img/arch_with_cdkp.png)\n\n  #### [The RDS Proxy](the-rds-proxy/README.md)\n  Use RDS Proxy to protect a MySQL RDS Instance from the massively scalable Lambda Function querying it\n  \n  ![Architecture](the-rds-proxy/img/arch_overview.png)\n\n\n  #### [The X-Ray Tracer](the-xray-tracer/README.md)\n  Learn about using AWS X-Ray for tracing events through your system. This pattern has X-Ray enabled on API Gateway, Lambda, DynamoDB, External HTTP calls, SNS and SQS\n  \n  ![Architecture](the-xray-tracer/img/arch_notitle.png)\n\n  <br /><hr /><br />\n\n  ### Thorsten Hoeger\n  <img src=\"img/dev_profiles/thorsten-hoeger.png\" width=\"120\" alt=\"Thorsten Hoeger profile pic\" /><br />\n\n  Cloud Evangelist, CEO @ Taimos GmbH [@taimosgmbh](https://twitter.com/taimosgmbh) - [AWS Community Hero](http://aws.amazon.com/de/heroes/) - AWS, Alexa, Serverless, Gemeinderat [@fw_reichenbach](https://twitter.com/fw_reichenbach)<br />\n\n  Twitter - [@hoegertn](https://twitter.com/hoegertn) <br />\n  LinkTree - [@hoegertn](https://linktr.ee/hoegertn) <br />\n\n  #### [The Simple GraphQL Service](/the-simple-graphql-service/README.md)\n  Simple graphQL service built with [AppSync](https://aws.amazon.com/appsync/)<br /><br />\n  ![Architecture](the-simple-graphql-service/img/architecture.png)\n\n  ### Vyas Sarangapani\n  <img src=\"img/dev_profiles/vyas_sarangapani.jpg\" width=\"120\" alt=\"Vyas Sarangapani profile pic\" /><br />\n\n  Software Developer, SAP Cloud Applications Architect, Block chain Evangelist, Marathoner, Ultra Runner, Information Junkie, Ambivert<br />\n\n  Twitter - [@madladvyas](https://twitter.com/madladvyas) <br />\n  Medium - [@svyasrao22](https://medium.com/@svyasrao22) <br />\n\n  #### [The EventBridge ETL](/the-eventbridge-etl/README.md)\n  Build a fully serverless CSV to DynamoDB pipeline <br />\n  ![Architecture](the-eventbridge-etl/img/arch.png)\n\n  ### Wallace Printz\n  <img src=\"img/dev_profiles/wallace_printz.jpeg\" width=\"120\" alt=\"Wallace Printz profile pic\" /><br />\n\n  Wallace Printz is a Senior Solutions Architect based in Austin, Texas. He helps customers across Texas transform their businesses in the cloud. He has a background in Semiconductors, R&D, and Machine Learning.<br />\n\n  Twitter - [@WallacePrintz](https://twitter.com/WallacePrintz) <br />\n  Github - [@WPrintz](https://github.com/WPrintz) <br />\n\n  #### [The Basic MQ](/the-basic-mq/README.md)  \n  In this example we have private Amazon MQ brokers behind an internet-facing network load balancer endpoint using a subdomain.\n  ![Architecture](the-basic-mq/img/the-basic-mq-arch.png)\n\n  ### Yan Cui\n  <img src=\"img/dev_profiles/yan_cui.png\" width=\"120\" alt=\"Yan Cui profile pic\" /><br />\n\n  AWS Serverless Hero | Independent Consultant | Author | Trainer | Speaker | Developer Advocate at [@Lumigo](https://twitter.com/Lumigo) | Teacher of [@LearnLambda](https://twitter.com/LearnLambda) | Host of [@RealWorldSls](https://twitter.com/RealWorldSls)\n\n  Twitter - [@theburningmonk](https://twitter.com/theburningmonk) <br />\n  Blog - [theburningmonk.com](https://theburningmonk.com/) <br />\n\n  #### [The Lambda Trilogy](the-lambda-trilogy/README.md)\n  See the 3 states of Lambda in action (Single Purpose Function, Fat Lambda and Lambda-lith)\n  ![Architecture](the-lambda-trilogy/img/arch2.png)\n\n  #### [The Saga Step Function](the-saga-stepfunction/README.md)\n  A mechanism for handling distributed transactions within your system.\n  ![Architecture](the-saga-stepfunction/img/arch.png)\n\n</details>\n\n## Serverless Well Architected Pattern Matcher\n\nThe [AWS Well-Architected](https://aws.amazon.com/architecture/well-architected/) Framework helps you understand the pros and cons of\ndecisions you make while building systems on AWS. By using the Framework, you will\nlearn architectural best practices for designing and operating reliable, secure, efficient,\nand cost-effective systems in the cloud. It provides a way for you to consistently\nmeasure your architectures against best practices and identify areas for improvement.\nWe believe that having well-architected systems greatly increases the likelihood of\nbusiness success.\n\n[Serverless Lens Whitepaper](https://d1.awsstatic.com/whitepapers/architecture/AWS-Serverless-Applications-Lens.pdf) <br />\n[Well Architected Whitepaper](http://d0.awsstatic.com/whitepapers/architecture/AWS_Well-Architected_Framework.pdf)\n\nFor patterns matched with their best practices from the relevant AWS Well Architected pillar please visit:\n\n### [The Well Architected Pattern Matcher](https://www.serverless-patterns.co.uk/patterns/well-architected/)\n\n## External Patterns\n\n[External Patterns Page](EXTERNAL_PATTERNS.md)\n\n## Contributing\nI hope for this to be something the whole cdk community contributes to so feel free to fork this repo and open up a pull request. For full details see our [Contributing Guidelines](CONTRIBUTING.md)\n"
        },
        {
          "name": "build-python.sh",
          "type": "blob",
          "size": 1.0166015625,
          "content": "function getCDKVersion() {\n    version=\"1.60.0\"\n    \n    readarray -t requirements <<<\"$(<requirements.txt)\"\n     for requirement in \"${requirements[@]}\"\n       do\n          if [[ \"$requirement\" == aws-cdk.* ]]; then\n            IFS='==' read -a fields <<<\"$requirement\"\n            version=${fields[2]}\n            break;\n          fi\n       done\n       \n    echo $version\n}\n\nreadarray -t patterns < <(jq -r '.[] | keys | .[]' info.json);\nfor pattern in \"${patterns[@]}\"\ndo\n   cd $pattern/python;\n   if test -f \"requirements.txt\"; then\n     #we want to build with the version of cdk defined in requirements.txt\n     version=$(getCDKVersion)\n     python3 -m venv .env;\n     source .env/bin/activate;\n     pip3 install -r requirements.txt;\n     readarray -t stacks < <(npx -q cdk@${version} ls)\n     if [[ \"${#stacks[@]}\" == 0 ]]; then\n       exit 1\n     fi\n     for stack in \"${stacks[@]}\"\n       do\n          echo \"npx cdk synth $stack\";\n          npx cdk@${version} synth \"$stack\";\n       done    \n     deactivate\n   fi\n   cd ../../;\ndone\n"
        },
        {
          "name": "build-typescript.sh",
          "type": "blob",
          "size": 0.1689453125,
          "content": "set -e\nreadarray -t arr < <(jq -r '.[] | keys | .[]' info.json);\nfor i in \"${arr[@]}\"\ndo\n   cd $i/typescript;\n   npm i;\n   npm run build;\n   npm run test;\n   cd ../../;\ndone"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "info.json",
          "type": "blob",
          "size": 1.9912109375,
          "content": "{\n    \"patterns\": {\n        \"polly\": {\n            \"prodReady\": false\n        },\n        \"s3-angular-website\": {\n            \"prodReady\": false\n        },\n        \"s3-react-website\": {\n            \"prodReady\": false\n        },\n        \"the-alexa-skill\": {\n            \"prodReady\": false\n        },\n        \"the-basic-mq\": {\n            \"prodReady\": false\n        },\n        \"the-big-fan\": {\n            \"prodReady\": false\n        },\n        \"the-cloudwatch-dashboard\": {\n            \"prodReady\": false\n        },\n        \"the-destined-lambda\": {\n            \"prodReady\": false\n        },\n        \"the-dynamo-streamer\": {\n            \"prodReady\": false\n        },\n        \"the-efs-lambda\": {\n            \"prodReady\": false\n        },\n        \"the-eventbridge-atm\": {\n            \"prodReady\": false\n        },\n        \"the-eventbridge-circuit-breaker\": {\n            \"prodReady\": false\n        },\n        \"the-eventbridge-etl\": {\n            \"prodReady\": false\n        },\n        \"the-lambda-circuit-breaker\": {\n            \"prodReady\": false\n        },\n        \"the-lambda-power-tuner\": {\n            \"prodReady\": false\n        },\n        \"the-lambda-trilogy\": {\n            \"prodReady\": false\n        },\n        \"the-media-live-stream\": {\n            \"prodReady\": false\n        },\n        \"the-predictive-lambda\": {\n            \"prodReady\": false\n        },\n        \"the-rds-proxy\": {\n            \"prodReady\": false\n        },\n        \"the-saga-stepfunction\": {\n            \"prodReady\": false\n        },\n        \"the-scalable-webhook\": {\n            \"prodReady\": false\n        },\n        \"the-scheduled-lambda\": {\n            \"prodReady\": false\n        },\n        \"the-simple-graphql-service\": {\n            \"prodReady\": false\n        },\n        \"the-simple-webservice\": {\n            \"prodReady\": false\n        },\n        \"the-state-machine\": {\n            \"prodReady\": false\n        },\n        \"the-waf-apigateway\": {\n            \"prodReady\": false\n        },\n        \"the-xray-tracer\": {\n            \"prodReady\": false\n        }\n    }\n}"
        },
        {
          "name": "polly",
          "type": "tree",
          "content": null
        },
        {
          "name": "s3-angular-website",
          "type": "tree",
          "content": null
        },
        {
          "name": "s3-react-website",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-alexa-skill",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-basic-mq",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-big-fan",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-cloudwatch-dashboard",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-destined-lambda",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-dynamo-streamer",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-efs-lambda",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-eventbridge-atm",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-eventbridge-circuit-breaker",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-eventbridge-etl",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-lambda-circuit-breaker",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-lambda-power-tuner",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-lambda-trilogy",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-media-live-stream",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-predictive-lambda",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-rds-proxy",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-saga-stepfunction",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-scalable-webhook",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-scheduled-lambda",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-simple-graphql-service",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-simple-webservice",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-state-machine",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-waf-apigateway",
          "type": "tree",
          "content": null
        },
        {
          "name": "the-xray-tracer",
          "type": "tree",
          "content": null
        },
        {
          "name": "update-python.sh",
          "type": "blob",
          "size": 0.83984375,
          "content": "readarray -t patterns < <(jq -r '.[] | keys | .[]' info.json);\n\npythonPackage=aws-cdk.core;\nversion=$(curl -Ls https://pypi.org/pypi/$pythonPackage/json | jq -r .info.version)\necho \"latest version is $version\"\n\nfor pattern in \"${patterns[@]}\"\ndo\n   cd $pattern/python;\n   if test -f \"requirements.txt\"; then\n     echo \"updating $pattern\"\n     #initialize empty array for new requirements\n     updatedReqs=()\n     readarray -t requirements <<<\"$(<requirements.txt)\"\n     for requirement in \"${requirements[@]}\"\n       do\n          if [[ \"$requirement\" == aws-cdk.* ]]; then\n            IFS='==' read -a fields <<<\"$requirement\"\n            updatedReqs+=(\"${fields[0]}==$version\")\n          else updatedReqs+=(\"$requirement\")\n          fi\n       done\n     var=$( IFS=$'\\n'; echo \"${updatedReqs[*]}\" )\n     echo \"$var\" >| requirements.txt\n   fi\n   cd ../../;\ndone"
        },
        {
          "name": "update-typescript.sh",
          "type": "blob",
          "size": 0.2236328125,
          "content": "set -e\nreadarray -t arr < <(jq -r '.[] | keys | .[]' info.json);\nfor i in \"${arr[@]}\"\ndo\n   cd $i/typescript;\n   rm -rf node_modules\n   npx npm-check-updates -u\n   npm i --package-lock-only\n   echo \"$i updated\"\n   cd ../../;\ndone"
        }
      ]
    }
  ]
}