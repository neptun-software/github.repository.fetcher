{
  "metadata": {
    "timestamp": 1736563888435,
    "page": 409,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/azure-pipelines-tasks",
      "stars": 3520,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".CodeQL.yml",
          "type": "blob",
          "size": 0.9716796875,
          "content": "path_classifiers:\n  test:\n    # Note: use only forward slash / as a path separator.\n    # *  Matches any sequence of characters except a forward slash.\n    # ** Matches any sequence of characters, including a forward slash. \n    # This wildcard must either be surrounded by forward slash symbols, or used as the first segment of a path. \n    # It matches zero or more whole directory segments. There is no need to use a wildcard at the end of a directory path because all sub-directories are automatically matched. \n    # That is, /anything/ matches the anything directory and all its subdirectories.\n    # Always enclose the expression in double quotes if it includes *.\n    - Tests\n    - Tests-Legacy\n    - \"Tasks/**/Tests\"\n\n  # The default behavior is to tag all files created during the\n  # build as `generated`. Results are hidden for generated code. You can tag \n  # further files as being generated by adding them to the `generated` section.\n  generated:\n    - _generated\n    - _download\n"
        },
        {
          "name": ".gdn",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.9013671875,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n*           text=auto\n\n# Shell scripts should always use line feed not crlf\n*.sh text eol=lf\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following\n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n*.js         text\n*.json       text\n*.resjson    text\n*.htm        text\n*.html       text\n*.xml        text\n*.txt        text\n*.ini        text\n*.inc        text\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n*.png     binary\n*.jpg     binary\n*.jpeg    binary\n*.gif     binary\n*.ico     binary\n*.mov     binary\n*.mp4     binary\n*.mp3     binary\n*.flv     binary\n*.fla     binary\n*.swf     binary\n*.gz      binary\n*.zip     binary\n*.7z      binary\n*.ttf     binary\n*.svg     binary\n\n###############################################################################\n# diff behavior for common document formats\n#\n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the\n# entries below.\n###############################################################################\n*.doc   diff=astextplain\n*.DOC   diff=astextplain\n*.docx  diff=astextplain\n*.DOCX  diff=astextplain\n*.dot   diff=astextplain\n*.DOT   diff=astextplain\n*.pdf   diff=astextplain\n*.PDF   diff=astextplain\n*.rtf   diff=astextplain\n*.RTF   diff=astextplain"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.3505859375,
          "content": "node_modules/\n_temp/\n.vscode\n.DS_Store\ngulp-tsc-tmp-*\n.gulp-tsc-tmp-*\n\n[Tt]asks/**/*.js\n[Tt]ests/**/*.js\n!**/mock_node_modules/**/*.js\n.taskkey\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n.vs/\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\nx64/\nbuild/**/*\n!**/data/**/build/**/*.*\nbld/\n[Bb]in/\n[Oo]bj/\ntemp/\n_common/\n_build/\n_download/\n_package/\n_test/\n_working/\n_gendocs/\n\n# Roslyn cache directories\n*.ide/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n#NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n!_generated/PublishTestResultsV1_Node20/Tests/data/a.log\n!_generated/PublishTestResultsV1_Node20/Tests/data/b.log\n!_generated/PublishTestResultsV1_Node20/Tests/data/rec/a.log\n!_generated/PublishTestResultsV1_Node20/Tests/data/rec/b.log\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n## TODO: Comment the next line if you want to checkin your\n## web deploy settings but do note that will include unencrypted\n## passwords\n#*.pubxml\n\n# NuGet Packages Directory\npackages/*\n## TODO: If the tool you use requires repositories.config\n## uncomment the next line\n#!packages/repositories.config\n\n# Enable \"build/\" folder in the NuGet Packages folder since\n# NuGet packages use it for MSBuild targets.\n# This line needs to be after the ignore of the build folder\n# (and the packages folder if the line above has been uncommented)\n!packages/build/\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\n# sql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# LightSwitch generated files\nGeneratedArtifacts/\n_Pvt_Extensions/\nModelManifest.xml\n/Package\nLoadTest.code-workspace\n.idea/\n.nyc_output/\n_dotnetsdk/\n\n# BuildConfigGen files\nFilesOverriddenForConfigGoHereREADME.txt\n\n_generated_local/\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.1240234375,
          "content": "registry=https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/\n\nalways-auth=true"
        },
        {
          "name": ".nycrc.json",
          "type": "blob",
          "size": 0.42578125,
          "content": "{\n  \"cache\": false,\n  \"produceSourceMap\": false,\n  \"sourceMap\": false,\n  \"exclude\": [\n    \"**/Tests/**\",\n    \"**/*.d.ts\",\n    \"**/*.spec.*\",\n    \"**/*.test.*\",\n    \"**/*.mock.*\",\n    \"**/test/**\",\n    \"**/tests/**\",\n    \"**/node_modules/**\"\n  ],\n  \"watermarks\": {\n    \"lines\": [60, 80],\n    \"functions\": [60, 80],\n    \"branches\": [60, 80],\n    \"statements\": [60, 80]\n  },\n  \"reporter\": [\n    \"text\",\n    \"json\",\n    \"json-summary\"\n  ]\n}"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.1787109375,
          "content": "trailingComma: \"none\"\nsingleQuote: true\nprintWidth: 160\ntabWidth: 2\nsemi: true\nquoteProps: \"as-needed\"\nbracketSpacing: true\narrowParens: \"avoid\"\nproseWrap: \"preserve\"\nendOfLine: \"lf\"\n"
        },
        {
          "name": "BuildConfigGen",
          "type": "tree",
          "content": null
        },
        {
          "name": "Compress-Tasks.ps1",
          "type": "blob",
          "size": 1.2158203125,
          "content": "[CmdletBinding()]\nparam(\n    [Parameter(Mandatory = $true)]\n    [string]$SourceRoot,\n\n    [Parameter(Mandatory = $true)]\n    [string]$TargetPath,\n\n    [switch]$Individually)\n\n$ErrorActionPreference = 'Stop'\nAdd-Type -Assembly 'System.IO.Compression.FileSystem'\nif ($Individually) {\n    # Create the target root directory.\n    if (!(Test-Path -LiteralPath $TargetPath -PathType Container)) {\n        $null = New-Item -Path $TargetPath -ItemType Directory\n    }\n\n    # Create each task zip.\n    Get-ChildItem -LiteralPath $SourceRoot |\n        ForEach-Object {\n            $sourceDir = $_.FullName\n            $targetDir = [System.IO.Path]::Combine($TargetPath, $_.Name)\n            Write-Host \"Compressing $($_.Name)\"\n            $null = New-Item -Path $targetDir -ItemType Directory\n            [System.IO.Compression.ZipFile]::CreateFromDirectory($sourceDir, \"$targetDir\\task.zip\")\n        }\n} else {\n    # Create the target directory.\n    $targetDir = [System.IO.Path]::GetDirectoryName($TargetPath)\n    if (!(Test-Path -LiteralPath $targetDir -PathType Container)) {\n        $null = New-Item -Path $targetDir -ItemType Directory\n    }\n\n    # Create the zip.\n    [System.IO.Compression.ZipFile]::CreateFromDirectory($SourceRoot, $TargetPath)\n}"
        },
        {
          "name": "DEPRECATION.md",
          "type": "blob",
          "size": 1.080078125,
          "content": "# Introduction\nCreation: 18-05-2023\n\nThis page is prepared to list the ADO tasks that are no longer supported or maintained and are marked as deprecated. These tasks were found under https://github.com/microsoft/azure-pipelines-tasks.\nThe tasks listed below will be marked deprecated, and a banner will be placed 90 days prior to removal.\nIn addition to that, as a part of consistency and security improvements, we've started to remove these tasks from this repository.\n\n# Deprecated Tasks (latest update: 18-05-2023)\n\n| Task Name                    | Removal PR                                              | Deprecated Date                                            |\n| -------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------- |\n| AzureMonitorAlertsV0           | [PR](https://github.com/microsoft/azure-pipelines-tasks/pull/18311) |     09-2019                                                                |\n\n[refer https://github.com/microsoft/azure-pipelines-tasks/blob/master/README.md]\n"
        },
        {
          "name": "Expand-Tasks.ps1",
          "type": "blob",
          "size": 0.470703125,
          "content": "[CmdletBinding()]\nparam(\n    [Parameter(Mandatory = $true)]\n    [string]$ZipPath,\n\n    [Parameter(Mandatory = $true)]\n    [string]$TargetPath)\n\n$ErrorActionPreference = 'Stop'\nAdd-Type -Assembly 'System.IO.Compression.FileSystem'\n\n# Create the target directory.\nif (!(Test-Path -LiteralPath $TargetPath -PathType Container)) {\n    $null = New-Item -Path $TargetPath -ItemType Directory\n}\n\n# Create the zip.\n[System.IO.Compression.ZipFile]::ExtractToDirectory($ZipPath, $TargetPath)\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.060546875,
          "content": "The MIT License (MIT)\nCopyright (c) 2014 Microsoft Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.1123046875,
          "content": "# Azure Pipelines Tasks\n![Tasks](/taskbanner.png \"Tasks\")\n\n## Overview\nThis repo contains the tasks that are provided out-of-the-box with Azure Pipelines and Team Foundation Server.\n\nThis provides open examples on how we write tasks which will help you write other tasks which can be uploaded to your account or server.  See **Writing Tasks** below.\nCheck Deprecation.md file for the list of task which are no longer supported.\n\n## Status\n|   | Build & Test |\n|---|:-----:|\n|![Win](docs/res/win_med.png) **Windows**|[![Build & Test][win-build-badge]][win-build]| \n|![macOS](docs/res/apple_med.png) **macOS**|[![Build & Test][macOS-build-badge]][macOS-build]| \n|![Linux](docs/res/linux_med.png) **Linux**|[![Build & Test][linux-build-badge]][linux-build]|\n\n[win-build-badge]: https://dev.azure.com/mseng/PipelineTools/_apis/build/status/azure-pipelines-tasks.ci-windows\n[win-build]: https://dev.azure.com/mseng/PipelineTools/_build/latest?definitionId=7634\n\n[macOS-build-badge]: https://dev.azure.com/mseng/PipelineTools/_apis/build/status/azure-pipelines-tasks.ci-macos\n[macOS-build]: https://dev.azure.com/mseng/PipelineTools/_build/latest?definitionId=7635\n\n[linux-build-badge]: https://dev.azure.com/mseng/PipelineTools/_apis/build/status/azure-pipelines-tasks.ci-linux\n[linux-build]: https://dev.azure.com/mseng/PipelineTools/_build/latest?definitionId=7636\n\n## How to Use Tasks\n\nSee the documentation for [Continuous integration and deployment](https://aka.ms/tfbuild).\n\n## Writing Tasks\n\nIf you need custom functionality in your build/release, it is usually simpler to use the existing script running tasks such as the PowerShell or Bash tasks.  Writing a new task may be appropriate if you need deeper integration or reusability in many build definitions\n\nTasks are simply tool runners.  They know how to run MSBuild, VSTest, etc... in a first class way and handle return codes, how to treat std/err out, and how to write timeline records based on expected output.  They also get access to credentials to write back to TFS/Azure Pipelines. \n\nFor uploading custom tasks to Azure Pipelines use the [TFS Cross Platform Command Line utility](https://github.com/Microsoft/tfs-cli).\n\nTasks can also be deployed with an Azure DevOps extension. See [this tutorial](https://docs.microsoft.com/en-us/vsts/extend/develop/add-build-task) for how to write a custom task and package it inside an extension.\n\n## Contributing\n\nThis project welcomes [contributions and suggestions](docs/contribute.md).\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n## Issues\n\nWe accept issue reports both here (file a GitHub issue) and in [Developer Community](https://developercommunity.visualstudio.com/spaces/21/index.html).\n\nDo you think there might be a security issue? Have you been phished or identified a security vulnerability? Please don't report it here - let us know by sending an email to secure@microsoft.com.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.6923828125,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.7 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "Tasks",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests-Legacy",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "_generated",
          "type": "tree",
          "content": null
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 7.3125,
          "content": "# This Yaml Document has been converted by ESAI Yaml Pipeline Conversion Tool.\n# This pipeline will be extended to the OneESPT template\n\ntrigger:\n- master\n- releases/*\n\nresources:\n  repositories:\n  - repository: AzureDevOps\n    type: git\n    name: AzureDevOps/AzureDevOps\n\n  - repository: 1ESPipelineTemplates\n    type: git\n    name: 1ESPipelineTemplates/1ESPipelineTemplates\n    ref: refs/tags/release\n\nparameters:\n- name: task_name\n  displayName: Task Name (List of tasks to build (e.g. BashV3 [, AzureCLIV1]))\n  type: string\n  default: TaskNameVN\n- name: deploy_all_tasks\n  displayName: Build all tasks for deployment\n  type: boolean\n  default: false\n- name: enableCodeQL\n  displayName: Enable CodeQL for run\n  type: boolean\n  default: false\n- name: includeLocalPackagesBuildConfig\n  displayName: Flag to update LocalPackages buildconfig (for testing, this will be made  default later)\n  type: boolean\n  default: false # note: keep in sync with ci\\ci-test-tasks\\canary-tests-v2.yml\n- name: skip_tests\n  displayName: skipTests (Not for production use)\n  type: boolean\n  default: false\n- name: publishToDistributedTaskTest\n  displayName: Publish to test feed (DistributedTasks-test), for infrastucture testing\n  type: boolean\n  default: false  \n\nvariables:\n- name: currentDate\n  value: $[ format('{0:yyyy}{0:MM}{0:dd}', pipeline.startTime) ]\n- name: taskName\n  value: ${{ parameters.task_name }}\n- name: taskNameIsSet\n  value: ${{ not(eq(parameters.task_name, 'TaskNameVN')) }}\n- name: runCodeQl\n  value: ${{ eq(parameters.enableCodeQL, true) }}\n- name: system.debug\n  value: true\n- name: includeLocalPackagesBuildConfigParameter\n  ${{ if eq(parameters.includeLocalPackagesBuildConfig, true) }}:\n    value: '--includeLocalPackagesBuildConfig'\n  ${{ else }}:\n    value: ''\n- name: IncludeLocalPackagesBuildConfigTest\n  ${{ if eq(parameters.includeLocalPackagesBuildConfig, true) }}:\n    value: '1'\n  ${{ else }}:\n    value: ''\n- name: tasksSkipTests\n  ${{ if eq(parameters.skip_tests, true) }}:\n    value: 'true'\n  ${{ else }}:\n    value: 'false'\n- name: DEPLOY_ALL_TASKSVAR\n  ${{ if eq(parameters.deploy_all_tasks, true) }}:\n    value: 'true'\n  ${{ else }}:\n    value: 'false'\n\nextends:\n  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates\n  parameters:\n    settings:\n      skipBuildTagsForGitHubPullRequests: true\n    featureFlags:\n      autoBaseline: false\n    sdl:\n      sbom:\n        enabled: false\n      baseline:\n        baselineSet: default\n        baselineFile: $(Build.SourcesDirectory)/.gdn/.gdnbaselines\n      sourceAnalysisPool:\n        name: 1ES-ABTT-Shared-Pool\n        image: abtt-windows-2022\n        os: windows\n      sourceRepositoriesToScan: \n        exclude: \n          - repository: AzureDevOps\n          - repository: ConfigChange\n    customBuildTags:\n    - ES365AIMigrationTooling\n    stages:\n    - stage: main\n      jobs:\n      # All tasks on Windows\n      - job: build_all_windows\n        displayName: Build all tasks (Windows)\n        condition: eq(variables.os, 'Windows_NT')\n        timeoutInMinutes: 1440 # AntiMalware takes 3 hours to scan tasks.zip\n        pool:\n          name: 1ES-ABTT-Shared-Pool\n          image: abtt-windows-2022\n          os: windows\n        templateContext:\n          outputs:\n            - output: buildArtifacts\n              displayName: 'Publish package artifact'\n              condition: >\n                and(\n                  succeeded(),\n                  ne(variables['build.reason'], 'PullRequest'),\n                  ne(variables['numTasks'], 0)\n                )\n              PathtoPublish: _package/tasks.zip\n              ArtifactName: package\n        steps:\n        - template: /ci/build-all-steps.yml@self\n          parameters:\n            os: Windows_NT\n\n      # Publish\n      - job: publish\n        displayName: Publish\n        timeoutInMinutes: 360\n        dependsOn:\n        - build_all_windows\n        condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'))\n        pool:\n          name: 1ES-ABTT-Shared-Pool\n          image: abtt-windows-2022\n          os: windows\n        templateContext:\n          outputs:\n          - output: buildArtifacts\n            displayName: 'Publish per task NuGet package artifact'\n            PathtoPublish: _package/nuget-packages\n            ArtifactName: IndividualNuGetPackages\n        steps:\n        - template: /ci/publish-steps.yml@self\n\n      # Courtesy Push\n      - job: courtesy_push\n        displayName: Courtesy Push\n        timeoutInMinutes: 180\n        pool:\n          name: 1ES-ABTT-Shared-Pool\n          image: abtt-windows-2022\n          os: windows\n        dependsOn:\n        - publish\n        condition: |\n          and(\n            succeeded(),\n            eq(variables['COURTESY_PUSH'], 'true'),\n            or(\n              eq(variables['build.reason'], 'Schedule'),\n              and(\n                eq(variables['build.reason'], 'Manual'),\n                eq(variables['FORCE_COURTESY_PUSH'], 'true')\n              )\n            )\n          )\n        templateContext:\n          outputs:\n          - output: nuget\n            packagesToPush:  '$(Build.SourcesDirectory)/IndividualNugetPackagesDownloaded/IndividualNugetPackages/*/*.nupkg'\n            packageParentPath: '$(Build.SourcesDirectory)'\n            ${{ if eq(parameters.publishToDistributedTaskTest, true) }}:\n              publishVstsFeed: 'c86767d8-af79-4303-a7e6-21da0ba435e2/9d34d871-8032-4e10-a34a-c7a01e125865'\n            ${{ else }}:\n              publishVstsFeed: 'c86767d8-af79-4303-a7e6-21da0ba435e2/e10d0795-57cd-4d7f-904e-5f39703cb096'\n            nuGetFeedType: internal\n            displayName: Push Nuget package\n            allowPackageConflicts: $(COURTESY_PUSH)\n        steps:\n        - checkout: AzureDevOps\n          fetchDepth: 1\n          persistCredentials: true\n        - checkout: self\n        - template: /ci/courtesy-push.yml@self\n\n      - job: build_all_tasks_for_deployments\n        displayName: Build all tasks for deployments (Windows)\n        dependsOn:\n        - courtesy_push\n        - build_all_windows\n        condition: succeeded()\n        timeoutInMinutes: 360\n        pool:\n          name: 1ES-ABTT-Shared-Pool\n          image: abtt-windows-2022\n          os: windows\n        variables:\n          task_pattern: $[dependencies.build_all_windows.outputs['getTaskPattern.task_pattern']]\n        templateContext:\n          outputs:\n          - output: buildArtifacts\n            displayName: 'Publish package artifact'\n            PathtoPublish: _package/tasks.zip\n            ArtifactName: allTasks\n        steps:\n        - template: /ci/build-all-tasks.yml@self\n          parameters:\n            deploy_all_tasks: ${{ parameters.deploy_all_tasks }}\n\n      # All tasks on Linux\n      - job: build_all_linux\n        displayName: Build all tasks (Linux)\n        condition: eq(variables.os, 'Linux')\n        timeoutInMinutes: 360\n        pool:\n          name: 1ES-ABTT-Shared-Pool\n          image: abtt-ubuntu-2204\n          os: linux\n        steps:\n        - template: /ci/build-all-steps.yml@self\n          parameters:\n            os: Linux\n\n      # All tasks on macOS\n      - job: build_all_darwin\n        displayName: Build all tasks (macOS)\n        condition: eq(variables.os, 'Darwin')\n        timeoutInMinutes: 360\n        pool:\n          name: Azure Pipelines\n          image: macos-14\n          os: macOS\n        steps:\n        - template: /ci/build-all-steps.yml@self\n          parameters:\n            os: Darwin\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "common-npm-packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "definitions",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate-third-party-notice.js",
          "type": "blob",
          "size": 7.68359375,
          "content": "/**\n * Run from the root of the vsts-tasks repo.\n * Usage: `node generate-third-party-notice.js <task name>`\n *\n * NOTE: delete node_modules and build the task before running this script!\n * Otherwise, you may pick up old dependencies that are no longer needed.\n *\n * TODO: Make this part of the script\n */\n\n'use strict';\n\nconst fs = require('fs');\nconst os = require('os');\nconst path = require('path');\n\nlet verboseLogging = false;\n\nfunction isThisRepo(url) {\n    return url === 'git+https://github.com/Microsoft/azure-pipelines-tasks.git'\n        || url ==='git+ssh://git@github.com/Microsoft/azure-pipelines-tasks.git';\n}\n\nconst log = {\n    info(message) {\n        if (verboseLogging) {\n            console.log(`[INFO] ${message}`);\n        }\n    },\n    warning(message) {\n        console.log(`[WARNING] ${message}`);\n    },\n    error(message) {\n        console.error(`[ERROR] ${message}`)\n    }\n};\n\n/** Log `label: ${value}` and pass the value through. */\nfunction trace(label, value) {\n    log.info(`${label}: ${value}`);\n    return value;\n}\n\n/**\n * Read `packagePath`'s package.json and deserialize it.\n * @param packagePath Absolute path to the NPM package\n * @returns Package manifest information parsed from the package's package.json\n */\nfunction readPackageJson(packagePath) {\n    log.info(`Reading the package.json for ${packagePath} ...`);\n    const contents = fs.readFileSync(path.join(packagePath, 'package.json'), { encoding: 'utf-8' });\n    return JSON.parse(contents);\n}\n\n/**\n * Get the name of the file containing the license for `packagePath`.\n * @param packagePath Absolute path to the NPM package\n * @returns Absolute path to the license file, or `null` if the license file can't be found\n */\nfunction findLicense(packagePath) {\n    log.info(`Finding the license for ${packagePath}`);\n    const children = fs.readdirSync(packagePath);\n    const licenseNames = [\n        'LICENSE',\n        'LICENSE.md',\n        'LICENSE.txt'\n    ].map(x => x.toLowerCase());\n\n    const candidates = children.filter(x => licenseNames.includes(x.toLowerCase()));\n    if (candidates.length === 0) {\n        return null;\n    } else {\n        if (candidates.length > 1) {\n            log.warning(`Found multiple license files for ${packagePath}: ${candidates.join(', ')}`);\n        }\n        return trace('Found license', path.join(packagePath, candidates[0]));\n    }\n}\n\n/**\n * Scan the contents of the 'node_modules' directory for license information.\n * @param modulesRoot NPM package installation directory to scan\n * @returns Iterable of objects: `name` x `url` x `licenseText`\n */\nfunction* collectLicenseInfo(modulesRoot) {\n    const packagePaths = fs.readdirSync(modulesRoot).map(x => path.join(modulesRoot, x));\n    for (const absolutePath of packagePaths) {\n        log.info(`Collecting license information from ${absolutePath} ...`);\n\n        const basename = path.basename(absolutePath);\n        if (basename.startsWith('@')) {\n            // This is a scoped package: recurse into children\n            yield* collectLicenseInfo(absolutePath);\n            continue;\n        }\n\n        const parentDir = path.basename(path.dirname(absolutePath));\n        const isScopedPackage = parentDir.startsWith('@');\n\n        const name = (() => {\n            if (isScopedPackage) {\n                // \"scoped package\" -- parent directory is part of name (e.g. @types/node, @sinonjs/formatio)\n                return `${parentDir}/${basename}`;\n            } else {\n                return basename;\n            }\n        })();\n\n        if (name === '.bin') {\n            continue;\n        }\n\n        const manifest = readPackageJson(absolutePath);\n        const url = manifest.repository ? manifest.repository.url : null;\n        if (!url) {\n            log.warning(`Could not find a repository URL for ${absolutePath}`);\n        }\n\n        // Don't add license info for packages in this repo (such as those in Common)\n        if (isThisRepo(url)) {\n            continue;\n        }\n\n        const license = findLicense(absolutePath);\n        const licenseText = license ? fs.readFileSync(license, { encoding: 'utf-8' }) : null;\n        if (!licenseText) {\n            log.warning(`Could not find a license for ${absolutePath}`);\n        }\n\n        yield {\n            name: name,\n            url: url || 'NO URL FOUND',\n            licenseText: licenseText || 'NO LICENSE FOUND'\n        };\n\n        // See if this package has its own `node_modules` directory\n        const child_packages = path.join(absolutePath, 'node_modules');\n        if (fs.existsSync(child_packages)) {\n            yield* collectLicenseInfo(child_packages);\n        }\n    }\n}\n\n/** Generate the third party notice line-by-line. */\nfunction* thirdPartyNotice(taskName, licenseInfo) {\n    // Preamble\n    yield '';\n    yield 'THIRD-PARTY SOFTWARE NOTICES AND INFORMATION';\n    yield 'Do Not Translate or Localize';\n    yield '';\n    yield `This Azure DevOps extension (${taskName}) is based on or incorporates material from the projects listed below (Third Party IP). The original copyright notice and the license under which Microsoft received such Third Party IP, are set forth below. Such licenses and notices are provided for informational purposes only. Microsoft licenses the Third Party IP to you under the licensing terms for the Azure DevOps extension. Microsoft reserves all other rights not expressly granted under this agreement, whether by implication, estoppel or otherwise.`;\n    yield '';\n\n    // Enumerated modules\n    let num = 1;\n    for (const item of licenseInfo) {\n        if (item.url) {\n            yield `${num}.\\t${item.name} (${item.url})`;\n        } else {\n            yield `${num}.\\t${item.name}`;\n        }\n        num += 1;\n    }\n\n    yield '';\n    yield '';\n\n    // Module licenses\n    for (const item of licenseInfo) {\n        yield `%% ${item.name} NOTICES, INFORMATION, AND LICENSE BEGIN HERE`;\n        yield '=========================================';\n        yield item.licenseText.trim();\n        yield '=========================================';\n        yield `END OF ${item.name} NOTICES, INFORMATION, AND LICENSE`;\n        yield '';\n    }\n}\n\nfunction writeLines(writeStream, lines) {\n    const writeLine = (line) => {\n        writeStream.write(line);\n        writeStream.write(os.EOL);\n    };\n\n    for (const line of lines) {\n        writeLine(line);\n    }\n}\n\n/** Join zero or more iterables into a single iterable. */\nfunction* chain(...iterables) {\n    for (const it of iterables) {\n        yield* it;\n    }\n}\n\nfunction main(args) {\n    try {\n        if (!args || args.length < 2) {\n            throw new Error(`Usage: node generate-third-party-notice.js <task name> [--verbose]`);\n        }\n\n        if (args.includes('--verbose')) {\n            verboseLogging = true;\n        }\n\n        const taskName = args[2];\n        const taskPath = path.join(__dirname, 'Tasks', taskName);\n        trace('task path', taskPath);\n\n        const nodeModuleDir = path.join(taskPath, 'node_modules');\n        const testsNodeModuleDir = path.join(taskPath, 'Tests', 'node_modules');\n        const licenseInfo = chain(\n            collectLicenseInfo(nodeModuleDir),\n            fs.existsSync(testsNodeModuleDir) ? collectLicenseInfo(testsNodeModuleDir) : []);\n\n        function compareStrings(a, b) {\n            if (a < b) {\n                return -1;\n            } else if (a > b) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n\n        const sortedLicenseInfo = Array.from(licenseInfo).sort((x, y) => compareStrings(x.name, y.name));\n\n        const writeStream = fs.createWriteStream(path.join(taskPath, 'ThirdPartyNotice.txt'));\n        writeLines(writeStream, thirdPartyNotice(taskName, sortedLicenseInfo));\n        writeStream.end();\n    } catch (e) {\n        log.error(e.message);\n    }\n}\n\nmain(process.argv);\n"
        },
        {
          "name": "globalversion.txt",
          "type": "blob",
          "size": 0.0048828125,
          "content": "249.4"
        },
        {
          "name": "issue-rules.yml",
          "type": "blob",
          "size": 12.384765625,
          "content": "\n# primary rules\nrules:\n# Area: AppCenter\n- valueFor: '**Enter Task Name**'\n  contains: 'AppCenter'\n  addLabels: ['Area: AppCenter']\n# Area: Artifacts\n- valueFor: '**Enter Task Name**'\n  contains: 'DownloadPackage'\n  addLabels: ['Area: Artifacts']\n- valueFor: '**Enter Task Name**'\n  contains: 'MavenAuthenticate'\n  addLabels: ['Area: Artifacts']\n- valueFor: '**Enter Task Name**'\n  contains: 'Nuget'\n  addLabels: ['Area: Artifacts']\n- valueFor: '**Enter Task Name**'\n  contains: 'Npm'\n  addLabels: ['Area: Artifacts']  \n- valueFor: '**Enter Task Name**'\n  contains: 'NpmAuthenticate'\n  addLabels: ['Area: Artifacts']\n- valueFor: '**Enter Task Name**'\n  contains: 'UniversalPackage'\n  addLabels: ['Area: Artifacts']\n- valueFor: '**Enter Task Name**'\n  contains: 'NuGetCommand'\n  addLabels: ['Area: Artifacts']\n- valueFor: '**Enter Task Name**'\n  contains: 'NuGetToolInstaller'\n  addLabels: ['Area: Artifacts']\n# Area: Build\n- valueFor: '**Enter Task Name**'\n  contains: 'VSBuild'\n  addLabels: ['Area: Build']\n- valueFor: '**Enter Task Name**'\n  contains: 'MSBuild'\n  addLabels: ['Area: ABTT']\n- valueFor: '**Enter Task Name**'\n  contains: 'DownloadSecureFile'\n  addLabels: ['Area: Build']\n# Area: Core\n- valueFor: '**Enter Task Name**'\n  contains: 'CopyFilesV'\n  addLabels: ['Area: Core']\n- valueFor: '**Enter Task Name**'\n  contains: 'DeleteFiles'\n  addLabels: ['Area: Core']\n- valueFor: '**Enter Task Name**'\n  contains: 'Curl'\n  addLabels: ['Area: Core']\n- valueFor: '**Enter Task Name**'\n  contains: 'FTPUpload'\n  addLabels: ['Area: Core']\n- valueFor: '**Enter Task Name**'\n  contains: 'ExtractFiles'\n  addLabels: ['Area: Core']\n# Area: CrossPlatform\n- valueFor: '**Enter Task Name**'\n  contains: 'CocoaPods'\n  addLabels: ['Area: CrossPlatform']\n  assign: ['leantk']\n- valueFor: '**Enter Task Name**'\n  contains: 'PublishBuildArtifact'\n  addLabels: ['Area: CrossPlatform']\n- valueFor: '**Enter Task Name**'\n  contains: 'Python'\n  addLabels: ['Area: CrossPlatform']\n  assign: ['leantk']\n- valueFor: '**Enter Task Name**'\n  contains: 'PyPI'\n  addLabels: ['Area: CrossPlatform']\n  assign: ['leantk']  \n- valueFor: '**Enter Task Name**'\n  contains: 'XamarinAndroid'\n  addLabels: ['Task: XamarinAndroid']\n- valueFor: '**Enter Task Name**'\n  contains: 'XamariniOS'\n  addLabels: ['Task: XamariniOS']  \n# Area: Release\n- valueFor: '**Enter Task Name**'\n  contains: 'AzureCli'\n  addLabels: ['Area: Release']\n  assign: ['rvairavelu']\n- valueFor: '**Enter Task Name**'\n  contains: 'ACRTask'\n  addLabels: ['Area: Release']\n- valueFor: '**Enter Task Name**'\n  contains: 'AzureResourceGroupDeployment'\n  addLabels: ['Area: Release']\n- valueFor: '**Enter Task Name**'\n  contains: 'FileTransform'\n  addLabels: ['Area: Release']\n- valueFor: '**Enter Task Name**'\n  contains: 'ResourceGroup'\n  addLabels: ['Area: Release']\n  assign: ['rvairavelu']\n- valueFor: '**Enter Task Name**'\n  contains: 'Vmss'\n  addLabels: ['Area: Release']\n  assign: ['bishal-pdmsft']\n- valueFor: '**Enter Task Name**'\n  contains: 'DotNetCore'\n  addLabels: ['Area: Release']\n  assign: ['rvairavelu']\n- valueFor: '**Enter Task Name**'\n  contains: 'UseDotNet'\n  addLabels: ['Area: Release']\n  assign: ['rvairavelu']\n- valueFor: '**Enter Task Name**'\n  contains: 'Go'\n  addLabels: ['Area: Release']\n  assign: ['rvairavelu']\n- valueFor: '**Enter Task Name**'\n  contains: 'Packer'\n  addLabels: ['Area: Release']\n  assign: ['bishal-pdmsft']\n- valueFor: '**Enter Task Name**'\n  contains: 'ServiceFabric'\n  addLabels: ['Area: Release']\n  assign: ['rvairavelu']\n- valueFor: '**Enter Task Name**'\n  contains: 'IoTEdge'\n  addLabels: ['Area: Release']\n  assign: ['marianan']\n- valueFor: '**Enter Task Name**'\n  contains: 'GithubRelease'\n  addLabels: ['Area: Release']\n  assign: ['prativen']\n- valueFor: '**Enter Task Name**'\n  contains: 'BuildArtifacts'\n  addLabels: ['Area: Release']\n  assign: ['Lovakumar']\n- valueFor: '**Enter Task Name**'\n  contains: 'FileshareArtifacts'\n  addLabels: ['Area: Release']\n  assign: ['Lovakumar']\n- valueFor: '**Enter Task Name**'\n  contains: 'DownloadGitHub'\n  addLabels: ['Area: Release']\n  assign: ['Lovakumar']\n- valueFor: '**Enter Task Name**'\n  contains: 'JenkinsDownload'\n  addLabels: ['Area: Release']\n  assign: ['Lovakumar']\n- valueFor: '**Enter Task Name**'\n  contains: 'KeyVault'\n  addLabels: ['Area: Release']\n  assign: ['prativen']\n- valueFor: '**Enter Task Name**'\n  contains: 'AzureMonitorV'\n  addLabels: ['Area: Release']\n  assign: ['ammohant']\n- valueFor: '**Enter Task Name**'\n  contains: 'AzurePolicy'\n  addLabels: ['Area: Release']\n  assign: ['ammohant']\n- valueFor: '**Enter Task Name**'\n  contains: 'Docker'\n  addLabels: ['Area: Release']\n  assign: ['ammohant']\n- valueFor: '**Enter Task Name**'\n  contains: 'Helm'\n  addLabels: ['Area: Release']\n  assign: ['ammohant']\n- valueFor: '**Enter Task Name**'\n  contains: 'Kubectl'\n  addLabels: ['Area: Release']\n  assign: ['ammohant']\n- valueFor: '**Enter Task Name**'\n  contains: 'Kubernetes'\n  addLabels: ['Area: Release']\n  assign: ['ammohant']\n- valueFor: '**Enter Task Name**'\n  contains: 'Duffle'\n  addLabels: ['Area: Release']\n  assign: ['ammohant']\n- valueFor: '**Enter Task Name**'\n  contains: 'Delay'\n  addLabels: ['Area: Release']\n  assign: ['ammohant']\n- valueFor: '**Enter Task Name**'\n  contains: 'InvokeRestApi'\n  addLabels: ['Area: Release']\n  assign: ['ammohant']\n- valueFor: '**Enter Task Name**'\n  contains: 'QueryWorkItems'\n  addLabels: ['Area: Release']\n  assign: ['ammohant']\n- valueFor: '**Enter Task Name**'\n  contains: 'AzureServiceBus'\n  addLabels: ['Area: Release']\n  assign: ['ammohant']\n- valueFor: '**Enter Task Name**'\n  contains: 'ManualIntervention'\n  addLabels: ['Area: Release']\n  assign: ['ammohant']\n- valueFor: '**Enter Task Name**'\n  contains: 'AzureCloud'\n  addLabels: ['Area: Release','Task: AzureCloudPowerShellDeployment']\n  assign: ['nadesu']\n- valueFor: '**Enter Task Name**'\n  contains: 'AppService'\n  addLabels: ['Area: Release','Task: AzureAppService']\n  assign: ['nadesu']\n- valueFor: '**Enter Task Name**'\n  contains: 'AzureRmWebApp'\n  addLabels: ['Area: Release','Task: AzureRmWebAppDeployment']\n  assign: ['nadesu']\n- valueFor: '**Enter Task Name**'\n  contains: 'Azure App Service deploy'\n  addLabels: ['Area: Release','Task: AzureRmWebAppDeployment']\n  assign: ['nadesu']\n- valueFor: '**Enter Task Name**'\n  contains: 'AzureWebApp'\n  addLabels: ['Area: Release','Task: AzureWebApp']\n  assign: ['nadesu']\n- valueFor: '**Enter Task Name**'\n  contains: 'FileTransform'\n  addLabels: ['Area: Release','Task: FileTransform']\n  assign: ['nadesu']\n- valueFor: '**Enter Task Name**'\n  contains: 'AzureFunction'\n  addLabels: ['Area: Release','Task: AzureFunction']\n  assign: ['nadesu']\n- valueFor: '**Enter Task Name**'\n  contains: 'AzureFileCopy'\n  addLabels: ['Area: Release','Task: AzureFileCopy']\n  assign: ['nadesu']\n- valueFor: '**Enter Task Name**'\n  contains: 'AzurePowerShell'\n  addLabels: ['Area: Release','Task: AzurePowerShell']\n  assign: ['nadesu']\n- valueFor: '**Enter Task Name**'\n  contains: 'PowerShellOnTarget'\n  addLabels: ['Area: Release','Task: PowerShellOnTargetMachines']\n  assign: ['nadesu']\n- valueFor: '**Enter Task Name**'\n  contains: 'AzureNLB'\n  addLabels: ['Area: Release','Task: AzureNLBManagement']\n  assign: ['nadesu']\n- valueFor: '**Enter Task Name**'\n  contains: 'Sql'\n  addLabels: ['Area: Release','Task: SqlDacpacDeployment']\n  assign: ['nadesu']\n- valueFor: '**Enter Task Name**'\n  contains: 'Mysql'\n  addLabels: ['Area: Release','Task: MysqlDeployment']\n  assign: ['nadesu']\n- valueFor: '**Enter Task Name**'\n  contains: 'MonitorAlerts'\n  addLabels: ['Area: Release','Task: AzureMonitorAlerts']\n  assign: ['nadesu']\n- valueFor: '**Enter Task Name**'\n  contains: 'Chef'\n  addLabels: ['Area: Release','Task: Chef']\n  assign: ['nadesu']\n- valueFor: '**Enter Task Name**'\n  contains: 'IISWeb'\n  addLabels: ['Area: Release','Task: IISWeb']\n  assign: ['nadesu']\n- valueFor: '**Enter Task Name**'\n  contains: 'WindowsMachine'\n  addLabels: ['Area: Release','Task: WindowsMachineFileCopy']\n  assign: ['nadesu']\n- valueFor: '**Enter Task Name**'\n  contains: 'Azure'\n  addLabels: ['Area: Release','environment:need-to-triage']\n  assign: ['nadesu']\n# Area: PipelineCaching\n- valueFor: '**Enter Task Name**'\n  contains: 'Cache'\n  addLabels: ['Area: PipelineCaching']\n  assign: ['johnterickson']\n\n# Area: Test\n- valueFor: '**Enter Task Name**'\n  contains: 'VSTest'\n  addLabels: ['Area: Test']\n  assign: ['phanikmmsft']\n- valueFor: '**Enter Task Name**'\n  contains: 'PublishTest'\n  addLabels: ['Area: TestManagement']\n  assign: ['shailesh-sk']\n  \n# Area: ArtifactsPackages\n- valueFor: '**Enter Task Name**'\n  contains: 'TwineAuthenticate'\n  addLabels: ['Area: ArtifactsPackages']\n  \n# Area: ArtifactsCore\n- valueFor: '**Enter Task Name**'\n  contains: 'DownloadPipelineArtifact'\n  addLabels: ['Area: ArtifactsCore']\n- valueFor: '**Enter Task Name**'\n  contains: 'PublishPipelineArtifact'\n  addLabels: ['Area: ArtifactsCore']\n- valueFor: '**Enter Task Name**'\n  contains: 'PublishSymbols'\n  addLabels: ['Area: ArtifactsCore']\n  \n# Area: Artifacts\n- valueFor: '**Enter Task Name**'\n  contains: 'Gulp'\n  addLabels: ['Area: Artifacts']\n  \n# Area: CodeCoverage\n- valueFor: '**Enter Task Name**'\n  contains: 'PublishCodeCoverageResults'\n  addLabels: ['Area: CodeCoverage']\n\n# Area: ABTT\n- valueFor: '**Enter Task Name**'\n  contains: 'JavaToolInstaller'\n  addLabels: ['Area: ABTT', 'Task: JavaToolInstaller']\n- valueFor: '**Enter Task Name**'\n  contains: 'CMake'\n  addLabels: ['Area: ABTT', 'Task: CMake', 'triage']\n- valueFor: '**Enter Task Name**'\n  contains: 'XCode'\n  addLabels: ['Area: ABTT', 'Task: Xcode', 'triage']     \n- valueFor: '**Enter Task Name**'\n  contains: 'Xamarin'\n  addLabels: ['Area: ABTT', 'triage']\n- valueFor: '**Enter Task Name**'\n  contains: 'PowerShellV2'\n  addLabels: ['Area: ABTT', 'Task: PowerShell', 'triage']\n- valueFor: '**Enter Task Name**'\n  contains: 'SSH'\n  addLabels: ['Area: ABTT', 'triage']\n- valueFor: '**Enter Task Name**'\n  contains: 'CopyFilesOverSSH'\n  addLabels: ['Area: ABTT', 'Task: CopyFilesOverSSH', 'triage']\n- valueFor: '**Enter Task Name**'\n  contains: 'InstallSSH'\n  addLabels: ['Area: ABTT', 'Task: InstallSSHKey', 'triage']\n- valueFor: '**Enter Task Name**'\n  contains: 'Gradle'\n  addLabels: ['Area: ABTT', 'Task: Gradle', 'triage']\n- valueFor: '**Enter Task Name**'\n  contains: 'Maven'\n  addLabels: ['Area: ABTT', 'Task: Maven', 'triage']\n- valueFor: '**Enter Task Name**'\n  contains: 'Android'\n  addLabels: ['Area: ABTT', 'triage']\n- valueFor: '**Enter Task Name**'\n  contains: 'AndroidSigning'\n  addLabels: ['Area: ABTT', 'Task: AndroidSigning']\n- valueFor: '**Enter Task Name**'\n  contains: 'Bash'\n  addLabels: ['Area: ABTT', 'Task: Bash', 'triage']\n- valueFor: '**Enter Task Name**'\n  contains: 'ShellScript'\n  addLabels: ['Area: ABTT', 'Task: Bash', 'triage']\n- valueFor: '**Enter Task Name**'\n  contains: 'Batch'\n  addLabels: ['Area: ABTT']\n- valueFor: '**Enter Task Name**'\n  contains: 'CmdLine'\n  addLabels: ['Area: ABTT']\n# Types\n- valueFor: '*Type*'\n  contains: Feature\n  addLabels: ['enhancement']\n- valueFor: '*Type*'\n  contains: Bug\n  addLabels: ['bug']\n- valueFor: '*Type*'\n  contains: Question\n  addLabels: ['question']  \n\n# runs if first set had no matches\n# add likely teams to look at based on text searches\nnomatches:\n- contains: 'Xcode' \n  addLabels: ['Area: ABTT', 'Task: Xcode', 'triage']\n- contains: 'Bash' \n  addLabels: ['Area: ABTT', 'Task: Bash', 'triage']\n- contains: 'Nuget' \n  addLabels: ['Area: Artifacts']\n- contains: 'Npm' \n  addLabels: ['Area: Artifacts']\n- contains: 'Docker' \n  addLabels: ['Area: Release']  \n- contains: 'Azure'\n  addLabels: ['Area: Release']\n\n# always runs after rules.  look for missing or invalid sets of tags\ntags:\n- noneIn: ['bug', 'enhancement', 'question', 'DTS']\n  addLabels: ['triage']\n- noneMatch: '\\s*Area:\\s*([^]*)'\n  addLabels: ['route']\n\npathMappings:\n- path: 'AzureDevOps\\Pipelines\\Pipelines Platform'\n  labels: ['Area: Core']\n- path: 'AzureDevOps\\Pipelines\\Application'\n  labels: ['Area: Build']\n- path: 'AzureDevOps\\Pipelines\\Integration'\n  labels: ['Area: CrossPlatform']\n- path: 'AzureDevOps\\Artifacts'\n  labels: ['Area: Artifacts', 'Area: ArtifactsCore', 'Area: ArtifactsPackages', 'Area: PipelineArtifact', 'Area: PipelineCaching', 'Area: Symbols']\n- path: 'AzureDevOps\\Pipelines\\Pipelines CD and RM\\RM-Service'\n  labels: ['Area: Release', 'Area: AzureAppService']\n- path: 'AzureDevOps\\Testing\\Test Management and Reporting'\n  labels: ['Area: Test', 'Area: TestManagement', 'Area: CodeCoverage']\n# TODO - AppCenter owned by teams in AzureDevOps org - probably nothing to be done, worth thinking about\n# - path: \n#   labels: ['Area: AppCenter']\n"
        },
        {
          "name": "issue_template.md",
          "type": "blob",
          "size": 1.49609375,
          "content": "## Note  \nIssues in this repo are for tracking bugs, feature requests and questions for the tasks in this repo \n\nFor a list:  \nhttps://github.com/Microsoft/azure-pipelines-tasks/tree/master/Tasks\n\nIf you have an issue or request for the Azure Pipelines service, use developer community instead:  \n\nhttps://developercommunity.visualstudio.com/spaces/21/index.html )\n\n## Required Information\n\nEntering this information will route you directly to the right team and expedite traction.\n\n**Question, Bug, or Feature?**  \n*Type*: here\n\n**Enter Task Name**: here  \n\nlist here (V# not needed):  \nhttps://github.com/Microsoft/azure-pipelines-tasks/tree/master/Tasks\n\n## Environment\n- Server - Azure Pipelines or TFS on-premises?\n    \n    - If using TFS on-premises, provide the version: \n    \n    - If using Azure Pipelines, provide the account name, team project name, build definition name/build number: \n\n\n- Agent - Hosted or Private: \n    \n    - If using Hosted agent, provide agent queue name:\n\n    - If using private agent, provide the OS of the machine running the agent and the agent version: \n\n## Issue Description\n\n[Include task name(s), screenshots and any other relevant details]\n\n### Task logs\n\n[Enable debug logging and please provide the zip file containing all the logs for a speedy resolution]\n\n## Troubleshooting\nCheckout how to troubleshoot failures and collect debug logs: https://docs.microsoft.com/en-us/vsts/build-release/actions/troubleshooting\n\n### Error logs\n\n[Insert error from the logs here for a quick overview]\n"
        },
        {
          "name": "make-options.json",
          "type": "blob",
          "size": 17.857421875,
          "content": "{\n    \"tasks\": [\n        \"AndroidSigningV2\",\n        \"AndroidSigningV3\",\n        \"ANTV1\",\n        \"AppCenterDistributeV1\",\n        \"AppCenterDistributeV2\",\n        \"AppCenterDistributeV3\",\n        \"AppCenterTestV1\",\n        \"ArchiveFilesV2\",\n        \"AzureAppConfigurationImportV10\",\n        \"AzureAppConfigurationExportV10\",\n        \"AzureAppConfigurationSnapshotV1\",\n        \"AzureAppServiceManageV0\",\n        \"AzureAppServiceSettingsV1\",\n        \"AzureCLIV1\",\n        \"AzureCLIV2\",\n        \"AzureCloudPowerShellDeploymentV1\",\n        \"AzureCloudPowerShellDeploymentV2\",\n        \"AzureContainerAppsV0\",\n        \"AzureContainerAppsV1\",\n        \"AzureFileCopyV1\",\n        \"AzureFileCopyV2\",\n        \"AzureFileCopyV3\",\n        \"AzureFileCopyV4\",\n        \"AzureFileCopyV5\",\n        \"AzureFileCopyV6\",\n        \"AzureFunctionAppV1\",\n        \"AzureFunctionAppV2\",\n        \"AzureFunctionAppContainerV1\",\n        \"AzureFunctionOnKubernetesV0\",\n        \"AzureFunctionOnKubernetesV1\",\n        \"AzureFunctionV1\",\n        \"AzureIoTEdgeV2\",\n        \"AzureKeyVaultV1\",\n        \"AzureKeyVaultV2\",\n        \"AzureMonitorV0\",\n        \"AzureMonitorV1\",\n        \"AzureMysqlDeploymentV1\",\n        \"AzureNLBManagementV1\",\n        \"AzurePolicyV0\",\n        \"AzurePowerShellV2\",\n        \"AzurePowerShellV3\",\n        \"AzurePowerShellV4\",\n        \"AzurePowerShellV5\",\n        \"AzureResourceGroupDeploymentV2\",\n        \"AzureResourceManagerTemplateDeploymentV3\",\n        \"AzureRmWebAppDeploymentV3\",\n        \"AzureRmWebAppDeploymentV4\",\n        \"AzureSpringCloudV0\",\n        \"AzureStaticWebAppV0\",\n        \"AzureWebAppV1\",\n        \"AzureWebAppContainerV1\",\n        \"AzureVmssDeploymentV0\",\n        \"AzureVmssDeploymentV1\",\n        \"BashV3\",\n        \"BatchScriptV1\",\n        \"CacheBetaV0\",\n        \"CacheBetaV1\",\n        \"CacheV2\",\n        \"CargoAuthenticateV0\",\n        \"ChefV1\",\n        \"ChefKnifeV1\",\n        \"CMakeV1\",\n        \"CmdLineV2\",\n        \"CocoaPodsV0\",\n        \"CondaAuthenticateV0\",\n        \"CondaEnvironmentV0\",\n        \"CondaEnvironmentV1\",\n        \"ContainerStructureTestV0\",\n        \"ContainerBuildV0\",\n        \"CopyFilesV2\",\n        \"CopyFilesOverSSHV0\",\n        \"CUrlUploaderV2\",\n        \"DecryptFileV1\",\n        \"DelayV1\",\n        \"DeleteFilesV1\",\n        \"DeployVisualStudioTestAgentV2\",\n        \"DockerV0\",\n        \"DockerV1\",\n        \"DockerV2\",\n        \"DockerComposeV0\",\n        \"DockerComposeV1\",\n        \"DockerInstallerV0\",\n        \"DotNetCoreCLIV2\",\n        \"DotNetCoreInstallerV0\",\n        \"DotNetCoreInstallerV1\",\n        \"DownloadBuildArtifactsV0\",\n        \"DownloadBuildArtifactsV1\",\n        \"DownloadFileshareArtifactsV1\",\n        \"DownloadGitHubNugetPackageV1\",\n        \"DownloadGitHubNpmPackageV1\",\n        \"DownloadGitHubReleaseV0\",\n        \"DownloadPackageV0\",\n        \"DownloadPackageV1\",\n        \"DownloadPipelineArtifactV0\",\n        \"DownloadPipelineArtifactV1\",\n        \"DownloadPipelineArtifactV2\",\n        \"DownloadSecureFileV1\",\n        \"DuffleInstallerV0\",\n        \"ExtractFilesV1\",\n        \"FileTransformV1\",\n        \"FileTransformV2\",\n        \"FtpUploadV1\",\n        \"FtpUploadV2\",\n        \"FuncToolsInstallerV0\",\n        \"GitHubCommentV0\",\n        \"GitHubReleaseV0\",\n        \"GitHubReleaseV1\",\n        \"GoV0\",\n        \"GoToolV0\",\n        \"GradleV2\",\n        \"GradleV3\",\n        \"GruntV0\",\n        \"GulpV0\",\n        \"GulpV1\",\n        \"HelmDeployV0\",\n        \"HelmDeployV1\",\n        \"HelmInstallerV0\",\n        \"HelmInstallerV1\",\n        \"IISWebAppDeployment\",\n        \"IISWebAppDeploymentOnMachineGroupV0\",\n        \"IISWebAppManagementOnMachineGroupV0\",\n        \"InstallAppleCertificateV2\",\n        \"InstallAppleProvisioningProfileV1\",\n        \"InstallSSHKeyV0\",\n        \"InvokeRestApiV1\",\n        \"JavaToolInstallerV0\",\n        \"JavaToolInstallerV1\",\n        \"JenkinsDownloadArtifactsV1\",\n        \"JenkinsDownloadArtifactsV2\",\n        \"JenkinsQueueJobV2\",\n        \"KubectlInstallerV0\",\n        \"KubeloginInstallerV0\",\n        \"KubernetesV0\",\n        \"KubernetesV1\",\n        \"KubernetesManifestV0\",\n        \"KubernetesManifestV1\",\n        \"ManualInterventionV8\",\n        \"ManualValidationV0\",\n        \"ManualValidationV1\",\n        \"MavenAuthenticateV0\",\n        \"MavenV2\",\n        \"MavenV3\",\n        \"MavenV4\",\n        \"MSBuildV1\",\n        \"MysqlDeploymentOnMachineGroupV1\",\n        \"NodeTaskRunnerInstallerV0\",\n        \"NodeToolV0\",\n        \"NotationV0\",\n        \"NpmV0\",\n        \"NpmV1\",\n        \"NpmAuthenticateV0\",\n        \"NuGetAuthenticateV0\",\n        \"NuGetAuthenticateV1\",\n        \"NuGetInstallerV0\",\n        \"NuGetV0\",\n        \"NuGetCommandV2\",\n        \"NuGetPackagerV0\",\n        \"NuGetPublisherV0\",\n        \"NuGetRestoreV1\",\n        \"NuGetToolInstallerV0\",\n        \"NuGetToolInstallerV1\",\n        \"OpenPolicyAgentInstallerV0\",\n        \"PackerBuildV0\",\n        \"PackerBuildV1\",\n        \"PipAuthenticateV0\",\n        \"PipAuthenticateV1\",\n        \"PowerShellV2\",\n        \"PowerShellOnTargetMachinesV3\",\n        \"PublishBuildArtifactsV1\",\n        \"PublishCodeCoverageResultsV1\",\n        \"PublishCodeCoverageResultsV2\",\n        \"PublishPipelineArtifactV0\",\n        \"PublishPipelineArtifactV1\",\n        \"PublishPipelineMetadataV0\",\n        \"PublishSymbolsV2\",\n        \"PublishTestResultsV1\",\n        \"PublishTestResultsV2\",\n        \"PublishToAzureServiceBusV1\",\n        \"PublishToAzureServiceBusV2\",\n        \"PythonScriptV0\",\n        \"QueryWorkItemsV0\",\n        \"QuickPerfTestV1\",\n        \"ReviewAppV0\",\n        \"RunJMeterLoadTestV1\",\n        \"RunLoadTestV1\",\n        \"ServiceFabricComposeDeployV0\",\n        \"ServiceFabricDeployV1\",\n        \"ServiceFabricPowerShellV1\",\n        \"ServiceFabricUpdateManifestsV2\",\n        \"SqlAzureDacpacDeploymentV1\",\n        \"SqlDacpacDeploymentOnMachineGroupV0\",\n        \"SqlServerDacpacDeployment\",\n        \"ShellScriptV2\",\n        \"SshV0\",\n        \"TwineAuthenticateV0\",\n        \"TwineAuthenticateV1\",\n        \"UniversalPackagesV0\",\n        \"UseDotNetV2\",\n        \"UseNodeV1\",\n        \"UsePythonVersionV0\",\n        \"UseRubyVersionV0\",\n        \"VSBuildV1\",\n        \"VsTestV1\",\n        \"VsTestV2\",\n        \"VsTestV3\",\n        \"VsTestPlatformToolInstallerV1\",\n        \"WindowsMachineFileCopyV1\",\n        \"WindowsMachineFileCopyV2\",\n        \"XamarinAndroidV1\",\n        \"XamariniOSV2\",\n        \"XamarinTestCloudV1\",\n        \"XcodeV5\"\n    ],\n    \"taskResources\": [\n        \"*.ps1\",\n        \"*.psd1\",\n        \"*.psm1\",\n        \"*.sh\",\n        \"*.txt\",\n        \"icon.png\",\n        \"icon.svg\",\n        \"module.json\",\n        \"node_modules\",\n        \"package.json\",\n        \"Strings\",\n        \"task.json\",\n        \"task.loc.json\",\n        \"Tests\"\n    ],\n    \"Node20\": [\n        \"AndroidSigningV2\",\n        \"AndroidSigningV3\",\n        \"AzureTestPlanV0\",\n        \"ANTV1\",\n        \"ArchiveFilesV2\",\n        \"BashV3\",\n        \"CMakeV1\",\n        \"CmdLineV2\",\n        \"CocoaPodsV0\",\n        \"CopyFilesOverSSHV0\",\n        \"CUrlUploaderV2\",\n        \"DecryptFileV1\",\n        \"DownloadSecureFileV1\",\n        \"ExtractFilesV1\",\n        \"FtpUploadV1\",\n        \"GruntV0\",\n        \"GulpV0\",\n        \"GulpV1\",\n        \"MavenV3\",\n        \"NodeTaskRunnerInstallerV0\",\n        \"PublishBuildArtifactsV1\",\n        \"FtpUploadV2\",\n        \"MSBuildV1\",\n        \"NodeToolV0\",\n        \"PowerShellV2\",\n        \"PythonScriptV0\",\n        \"ShellScriptV2\",\n        \"SshV0\",\n        \"UseNodeV1\",\n        \"XcodeV5\",\n        \"InstallAppleCertificateV2\",\n        \"InstallAppleProvisioningProfileV1\",\n        \"InstallSSHKeyV0\",\n        \"JavaToolInstallerV0\",\n        \"JenkinsQueueJobV2\",\n        \"MavenV4\",\n        \"UsePythonVersionV0\",\n        \"UseRubyVersionV0\",\n        \"XamarinAndroidV1\",\n        \"CondaEnvironmentV0\",\n        \"CondaEnvironmentV1\",\n        \"OpenPolicyAgentInstallerV0\"\n    ],\n    \"Node20_229_1\": [\n        \"CargoAuthenticateV0\",\n        \"CondaAuthenticateV0\",\n        \"DownloadPackageV0\",\n        \"DownloadPackageV1\",\n        \"MavenAuthenticateV0\",\n        \"NpmV0\",\n        \"NpmV1\",\n        \"NpmAuthenticateV0\",\n        \"NuGetV0\",\n        \"NuGetCommandV2\",\n        \"NuGetAuthenticateV1\",\n        \"NuGetInstallerV0\",\n        \"NuGetPublisherV0\",\n        \"NuGetRestoreV1\",\n        \"NuGetToolInstallerV0\",\n        \"NuGetToolInstallerV1\",\n        \"PipAuthenticateV0\",\n        \"PipAuthenticateV1\",\n        \"TwineAuthenticateV0\",\n        \"TwineAuthenticateV1\",\n        \"UniversalPackagesV0\"\n    ],\n    \"Node20_229_2\": [\n        \"AzureAppServiceManageV0\",\n        \"AzureAppServiceSettingsV1\",\n        \"AzureCLIV1\",\n        \"AzureCLIV2\",\n        \"AzureFileCopyV2\",\n        \"AzureFileCopyV3\",\n        \"AzureFileCopyV4\",\n        \"AzureFileCopyV5\",\n        \"AzureFileCopyV6\",\n        \"AzureFunctionAppContainerV1\",\n        \"AzureFunctionOnKubernetesV0\",\n        \"AzureFunctionOnKubernetesV1\",\n        \"AzureKeyVaultV1\",\n        \"AzureKeyVaultV2\",\n        \"AzureResourceGroupDeploymentV2\",\n        \"AzureResourceManagerTemplateDeploymentV3\",\n        \"AzureMysqlDeploymentV1\",\n        \"AzureNLBManagementV1\",\n        \"AzureRmWebAppDeploymentV3\",\n        \"AzureRmWebAppDeploymentV4\",\n        \"AzurePowerShellV4\",\n        \"AzurePowerShellV5\",\n        \"AzureWebAppV1\",\n        \"AzureWebAppContainerV1\",\n        \"ContainerBuildV0\",\n        \"DockerV0\",\n        \"DockerV1\",\n        \"DockerV2\",\n        \"DockerComposeV0\",\n        \"DockerInstallerV0\",\n        \"DotNetCoreCLIV2\",\n        \"GradleV2\",\n        \"GradleV3\",\n        \"KubernetesV0\",\n        \"XamariniOSV2\"\n    ],\n    \"Node20_229_3\": [\n        \"DotNetCoreInstallerV0\",\n        \"DotNetCoreInstallerV1\",\n        \"DownloadBuildArtifactsV0\",\n        \"DownloadFileshareArtifactsV1\",\n        \"DownloadGitHubNpmPackageV1\",\n        \"DownloadGitHubNugetPackageV1\",\n        \"DownloadGitHubReleaseV0\",\n        \"DuffleInstallerV0\",\n        \"FileTransformV1\",\n        \"FileTransformV2\",\n        \"FuncToolsInstallerV0\",\n        \"GitHubReleaseV0\",\n        \"GitHubReleaseV1\",\n        \"GoV0\",\n        \"GoToolV0\",\n        \"HelmDeployV0\",\n        \"HelmDeployV1\",\n        \"HelmInstallerV0\",\n        \"HelmInstallerV1\",\n        \"IISWebAppDeploymentOnMachineGroupV0\",\n        \"JenkinsDownloadArtifactsV1\",\n        \"JenkinsDownloadArtifactsV2\",\n        \"KubeloginInstallerV0\",\n        \"KubectlInstallerV0\",\n        \"KubernetesV1\",\n        \"KubernetesManifestV0\",\n        \"KubernetesManifestV1\",\n        \"MysqlDeploymentOnMachineGroupV1\",\n        \"UseDotNetV2\",\n        \"PublishPipelineMetadataV0\"\n    ],\n    \"Node20_229_4\": [\n        \"VsTestPlatformToolInstallerV1\",\n        \"ContainerStructureTestV0\",\n        \"PublishCodeCoverageResultsV1\",\n        \"PublishCodeCoverageResultsV2\",\n        \"VsTestV2\",\n        \"VsTestV3\"\n    ],\n    \"Node20_229_5\": [\n        \"AzureSpringCloudV0\"\n    ],\n    \"Node20_229_6\": [\n        \"AzureVmssDeploymentV0\",\n        \"AzureVmssDeploymentV1\",\n        \"PackerBuildV0\",\n        \"PackerBuildV1\"\n    ],\n    \"Node20_229_7\": [\n        \"AppCenterDistributeV1\",\n        \"AppCenterDistributeV2\",\n        \"AppCenterDistributeV3\",\n        \"AppCenterTestV1\"\n    ],\n    \"Node20_229_8\": [\n        \"AzureStaticWebAppV0\"\n    ],\n    \"Node20_229_9\": [\n        \"AzureFunctionAppV1\",\n        \"AzureFunctionAppV2\"\n    ],\n    \"Node20_229_10\": [\n        \"AzureContainerAppsV0\",\n        \"AzureContainerAppsV1\"\n    ],\n    \"Node20_229_11\": [\n        \"AzureIoTEdgeV2\"\n    ],\n    \"Node20_229_12\": [\n        \"GitHubCommentV0\",\n        \"ReviewAppV0\"\n    ],\n    \"Node20_229_13\": [\n        \"PublishTestResultsV1\",\n        \"PublishTestResultsV2\"\n    ],\n    \"Node20_229_14\": [\n        \"PublishSymbolsV2\",\n        \"JavaToolInstallerV1\"\n    ],\n    \"wif_242\": [\n        \"PipAuthenticateV1\",\n        \"CargoAuthenticateV0\",\n        \"NpmAuthenticateV0\",\n        \"CondaAuthenticateV0\",\n        \"NuGetAuthenticateV1\",\n        \"MavenAuthenticateV0\",\n        \"TwineAuthenticateV1\"\n    ],\n    \"LocalPackages\": [\n        \"AndroidSigningV2\",\n        \"AndroidSigningV3\",\n        \"ANTV1\",\n        \"Not compiling yet: AppCenterDistributeV1\",\n        \"Not compiling yet: AppCenterDistributeV2\",\n        \"AppCenterDistributeV3\",\n        \"AppCenterTestV1\",\n        \"ArchiveFilesV2\",\n        \"AzureAppConfigurationImportV10\",\n        \"AzureAppConfigurationSnapshotV1\",\n        \"AzureAppConfigurationExportV10\",\n        \"AzureAppServiceManageV0\",\n        \"AzureAppServiceSettingsV1\",\n        \"Not compiling yet: AzureCLIV1\",\n        \"Not compiling yet: AzureCLIV2\",\n        \"AzureCloudPowerShellDeploymentV1\",\n        \"AzureCloudPowerShellDeploymentV2\",\n        \"Not compiling yet: AzureContainerAppsV0\",\n        \"Not compiling yet: AzureContainerAppsV1\",\n        \"AzureFileCopyV1\",\n        \"AzureFileCopyV2\",\n        \"AzureFileCopyV3\",\n        \"AzureFileCopyV4\",\n        \"AzureFileCopyV5\",\n        \"AzureFileCopyV6\",\n        \"AzureFunctionAppContainerV1\",\n        \"AzureFunctionAppV1\",\n        \"AzureFunctionAppV2\",\n        \"AzureFunctionOnKubernetesV0\",\n        \"AzureFunctionOnKubernetesV1\",\n        \"Not compiling yet: AzureIoTEdgeV2\",\n        \"AzureKeyVaultV1\",\n        \"AzureKeyVaultV2\",\n        \"AzureMysqlDeploymentV1\",\n        \"Not compiling yet: AzureNLBManagementV1\",\n        \"AzurePowerShellV2\",\n        \"AzurePowerShellV3\",\n        \"AzurePowerShellV4\",\n        \"AzurePowerShellV5\",\n        \"Not compiling yet: AzureResourceGroupDeploymentV2\",\n        \"Not compiling yet: AzureResourceManagerTemplateDeploymentV3\",\n        \"AzureRmWebAppDeploymentV3\",\n        \"Not compiling yet: AzureRmWebAppDeploymentV4\",\n        \"Not compiling yet: AzureSpringCloudV0\",\n        \"AzureStaticWebAppV0\",\n        \"AzureTestPlanV0\",\n        \"AzureVmssDeploymentV0\",\n        \"AzureWebAppContainerV1\",\n        \"AzureWebAppV1\",\n        \"BashV3\",\n        \"CargoAuthenticateV0\",\n        \"ChefKnifeV1\",\n        \"ChefV1\",\n        \"CMakeV1\",\n        \"CmdLineV2\",\n        \"CocoaPodsV0\",\n        \"CondaAuthenticateV0\",\n        \"CondaEnvironmentV0\",\n        \"CondaEnvironmentV1\",\n        \"ContainerBuildV0\",\n        \"ContainerStructureTestV0\",\n        \"CopyFilesOverSSHV0\",\n        \"Not compiling yet: CopyFilesV2\",\n        \"CUrlUploaderV2\",\n        \"DecryptFileV1\",\n        \"DeleteFilesV1\",\n        \"DockerComposeV0\",\n        \"DockerComposeV1\",\n        \"DockerInstallerV0\",\n        \"DockerV0\",\n        \"DockerV1\",\n        \"DockerV2\",\n        \"Not compiling yet: DotNetCoreCLIV2\",\n        \"DotNetCoreInstallerV0\",\n        \"DotNetCoreInstallerV1\",\n        \"Not compiling yet: DownloadBuildArtifactsV0\",\n        \"DownloadFileshareArtifactsV1\",\n        \"DownloadGitHubNpmPackageV1\",\n        \"Not compiling yet: DownloadGitHubNugetPackageV1\",\n        \"Not compiling yet: DownloadGitHubReleaseV0\",\n        \"Not compiling yet: DownloadPackageV0\",\n        \"Not compiling yet: DownloadPackageV1\",\n        \"DownloadSecureFileV1\",\n        \"DuffleInstallerV0\",\n        \"ExtractFilesV1\",\n        \"Not compiling yet: FileTransformV1\",\n        \"Not compiling yet: FileTransformV2\",\n        \"FtpUploadV1\",\n        \"FtpUploadV2\",\n        \"FuncToolsInstallerV0\",\n        \"GitHubCommentV0\",\n        \"Not compiling yet: GitHubReleaseV0\",\n        \"Not compiling yet: GitHubReleaseV1\",\n        \"GoToolV0\",\n        \"GoV0\",\n        \"GradleV2\",\n        \"GradleV3\",\n        \"GruntV0\",\n        \"GulpV0\",\n        \"GulpV1\",\n        \"HelmDeployV0\",\n        \"HelmDeployV1\",\n        \"HelmInstallerV0\",\n        \"HelmInstallerV1\",\n        \"IISWebAppDeployment\",\n        \"Not compiling yet: IISWebAppDeploymentOnMachineGroupV0\",\n        \"IISWebAppManagementOnMachineGroupV0\",\n        \"InstallAppleCertificateV2\",\n        \"InstallAppleProvisioningProfileV1\",\n        \"InstallSSHKeyV0\",\n        \"Not compiling yet: JavaToolInstallerV0\",\n        \"Not compiling yet: JenkinsDownloadArtifactsV1\",\n        \"JenkinsQueueJobV2\",\n        \"KubectlInstallerV0\",\n        \"Not compiling yet: KubeloginInstallerV0\",\n        \"Not compiling yet: KubernetesManifestV0\",\n        \"KubernetesManifestV1\",\n        \"Not compiling yet: KubernetesV0\",\n        \"KubernetesV1\",\n        \"MavenAuthenticateV0\",\n        \"MavenV2\",\n        \"MavenV3\",\n        \"MavenV4\",\n        \"MSBuildV1\",\n        \"Not compiling yet: MysqlDeploymentOnMachineGroupV1\",\n        \"NodeTaskRunnerInstallerV0\",\n        \"NodeToolV0\",\n        \"NotationV0\",\n        \"NpmAuthenticateV0\",\n        \"Not compiling yet: NpmV0\",\n        \"Not compiling yet: NpmV1\",\n        \"Not compiling yet: NuGetAuthenticateV0\",\n        \"NuGetAuthenticateV1\",\n        \"Not compiling yet: NuGetCommandV2\",\n        \"Not compiling yet: NuGetInstallerV0\",\n        \"Not compiling yet: NuGetPublisherV0\",\n        \"Not compiling yet: NuGetRestoreV1\",\n        \"Not compiling yet: NuGetToolInstallerV0\",\n        \"Not compiling yet (task): NuGetToolInstallerV1\",\n        \"Not compiling yet: NuGetV0\",\n        \"Not compiling yet: OpenPolicyAgentInstallerV0\",\n        \"Not compiling yet: PackerBuildV0\",\n        \"Not compiling yet: PackerBuildV1\",\n        \"PipAuthenticateV0\",\n        \"PipAuthenticateV1\",\n        \"PowerShellOnTargetMachinesV1\",\n        \"PowerShellOnTargetMachinesV2\",\n        \"PowerShellOnTargetMachinesV3\",\n        \"PowerShellV2\",\n        \"Not compiling yet: PublishBuildArtifactsV1\",\n        \"Not compiling yet: PublishCodeCoverageResultsV1\",\n        \"PublishCodeCoverageResultsV2\",\n        \"Not compiling yet: PublishPipelineMetadataV0\",\n        \"Not compiling yet: PublishSymbolsV2\",\n        \"Not compiling yet: PublishTestResultsV1\",\n        \"Not compiling yet: PublishTestResultsV2\",\n        \"PyPIPublisherV0\",\n        \"PythonScriptV0\",\n        \"QuickPerfTestV1\",\n        \"ReviewAppV0\",\n        \"RunJMeterLoadTestV1\",\n        \"RunLoadTestV1\",\n        \"ServiceFabricComposeDeployV0\",\n        \"ServiceFabricDeployV1\",\n        \"ServiceFabricPowerShellV1\",\n        \"ServiceFabricUpdateManifestsV2\",\n        \"ShellScriptV2\",\n        \"SqlAzureDacpacDeploymentV1\",\n        \"SqlDacpacDeploymentOnMachineGroupV0\",\n        \"SqlServerDacpacDeployment\",\n        \"SshV0\",\n        \"TwineAuthenticateV0\",\n        \"TwineAuthenticateV1\",\n        \"UniversalPackagesV0\",\n        \"UseDotNetV2\",\n        \"UseNodeV1\",\n        \"UsePythonVersionV0\",\n        \"UseRubyVersionV0\",\n        \"VSBuildV1\",\n        \"Not compiling yet: VsTestPlatformToolInstallerV1\",\n        \"VsTestV1\",\n        \"VsTestV2\",\n        \"VsTestV3\",\n        \"WindowsMachineFileCopyV1\",\n        \"WindowsMachineFileCopyV2\",\n        \"XamarinAndroidV1\",\n        \"XamariniOSV2\",\n        \"XamarinTestCloudV1\",\n        \"XcodeV5\"\n    ]\n}\n"
        },
        {
          "name": "make-util.js",
          "type": "blob",
          "size": 75.4736328125,
          "content": "var check = require('validator').default;\nvar fs = require('fs');\nvar makeOptions = require('./make-options.json');\nvar minimatch = require('minimatch');\nvar ncp = require('child_process');\nvar os = require('os');\nvar path = require('path');\nvar process = require('process');\nvar semver = require('semver');\nvar shell = require('shelljs');\nconst { XMLParser } = require(\"fast-xml-parser\");\nconst Downloader = require(\"nodejs-file-downloader\");\n\n// global paths\nvar repoPath = __dirname;\nvar downloadPath = path.join(repoPath, '_download');\n\n// list of .NET culture names\nvar cultureNames = ['cs', 'de', 'es', 'fr', 'it', 'ja', 'ko', 'pl', 'pt-BR', 'ru', 'tr', 'zh-Hans', 'zh-Hant'];\n\nvar allowedTypescriptVersions = ['4.0.2', '4.9.5', '5.1.6'];\n\n//------------------------------------------------------------------------------\n// shell functions\n//------------------------------------------------------------------------------\nvar shellAssert = function () {\n    var errMsg = shell.error();\n    if (errMsg) {\n        throw new Error(errMsg.toString());\n    }\n}\n\nvar cd = function (dir) {\n    var cwd = process.cwd();\n    if (cwd != dir) {\n        console.log('');\n        console.log(`> cd ${path.relative(cwd, dir)}`);\n        shell.cd(dir);\n        shellAssert();\n    }\n}\nexports.cd = cd;\n\nvar cp = function (options, source, dest) {\n    if (dest) {\n        shell.cp(options, source, dest);\n    }\n    else {\n        shell.cp(options, source);\n    }\n\n    shellAssert();\n}\nexports.cp = cp;\n\nvar mkdir = function (options, target) {\n    if (target) {\n        shell.mkdir(options, target);\n    }\n    else {\n        shell.mkdir(options);\n    }\n\n    shellAssert();\n}\nexports.mkdir = mkdir;\n\nvar rm = function (options, target) {\n    if (target) {\n        shell.rm(options, target);\n    }\n    else {\n        shell.rm(options);\n    }\n\n    shellAssert();\n}\nexports.rm = rm;\n\nvar test = function (options, p) {\n    var result = shell.test(options, p);\n    shellAssert();\n    return result;\n}\nexports.test = test;\n//------------------------------------------------------------------------------\n\nvar assert = function (value, name) {\n    if (!value) {\n        throw new Error('\"' + name + '\" cannot be null or empty.');\n    }\n}\nexports.assert = assert;\n\nvar banner = function (message, noBracket) {\n    console.log();\n    if (!noBracket) {\n        console.log('------------------------------------------------------------');\n    }\n    console.log(message);\n    if (!noBracket) {\n        console.log('------------------------------------------------------------');\n    }\n}\nexports.banner = banner;\n\nvar rp = function (relPath) {\n    return path.join(shell.pwd() + '', relPath);\n}\nexports.rp = rp;\n\nvar fail = function (message) {\n    console.error('ERROR: ' + message);\n    process.exit(1);\n}\nexports.fail = fail;\n\nvar ensureExists = function (checkPath) {\n    assert(checkPath, 'checkPath');\n    var exists = test('-d', checkPath) || test('-f', checkPath);\n\n    if (!exists) {\n        fail(checkPath + ' does not exist');\n    }\n}\nexports.ensureExists = ensureExists;\n\nvar pathExists = function (checkPath) {\n    return test('-d', checkPath) || test('-f', checkPath);\n}\nexports.pathExists = pathExists;\n\n/**\n * Given a module path, gets the info used for generating a pack file\n */\nvar getCommonPackInfo = function (modOutDir) {\n    // assert the module has a package.json\n    var packageJsonPath = path.join(modOutDir, 'package.json');\n    if (!test('-f', packageJsonPath)) {\n        fail(`Common module package.json does not exist: '${packageJsonPath}'`);\n    }\n\n    // assert the package name and version\n    var packageJson = JSON.parse(fs.readFileSync(packageJsonPath));\n    if (!packageJson || !packageJson.name || !packageJson.version) {\n        fail(`The common module's package.json must define a name and version: ${packageJsonPath}`);\n    }\n\n    var packFileName = `${packageJson.name}-${packageJson.version}.tgz`;\n    return {\n        \"packageName\": packageJson.name,\n        \"packFilePath\": path.join(path.dirname(modOutDir), packFileName)\n    };\n}\nexports.getCommonPackInfo = getCommonPackInfo;\n\nvar buildNodeTask = function (taskPath, outDir, isServerBuild) {\n    var originalDir = shell.pwd().toString();\n    cd(taskPath);\n    var packageJsonPath = rp('package.json');\n    var overrideTscPath;\n    if (test('-f', packageJsonPath)) {\n        // verify no dev dependencies\n        // we allow only two dev dependencies: typescript and @tsconfig/node10\n        var packageJson = JSON.parse(fs.readFileSync(packageJsonPath).toString());\n        var devDeps = packageJson.devDependencies ? Object.keys(packageJson.devDependencies).length : 0;\n        if (devDeps === 1 && packageJson.devDependencies['typescript'] || (devDeps === 2 && packageJson.devDependencies['typescript'] && packageJson.devDependencies['@tsconfig/node10'])) {\n            var version = packageJson.devDependencies['typescript'];\n            if (!allowedTypescriptVersions.includes(version)) {\n                fail(`The package.json specifies a different TS version (${version}) that the allowed versions: ${allowedTypescriptVersions}. Offending package.json: ${packageJsonPath}`);\n            }\n            overrideTscPath = path.join(taskPath, \"node_modules\", \"typescript\");\n            console.log(`Detected Typescript version: ${version}`);\n        } else if (devDeps >= 1) {\n            fail('The package.json should not contain dev dependencies other than typescript. Move the dev dependencies into a package.json file under the Tests sub-folder. Offending package.json: ' + packageJsonPath);\n        }\n        if (isServerBuild) {\n            run('npm ci');\n        } else {\n            run('npm install');\n        }\n    }\n\n    if (test('-f', rp(path.join('Tests', 'package.json')))) {\n        cd(rp('Tests'));\n        if (isServerBuild) {\n            run('npm ci');\n        } else {\n            run('npm install');\n        }\n        cd(taskPath);\n    }\n\n    // Use the tsc version supplied by the task if it is available, otherwise use the global default.\n    if (overrideTscPath) {\n        var tscExec = path.join(overrideTscPath, \"bin\", \"tsc\");\n        run(\"node \" + tscExec + ' --outDir \"' + outDir + '\" --rootDir \"' + taskPath + '\"');\n        // Don't include typescript in node_modules\n        rm(\"-rf\", overrideTscPath);\n    } else {\n        run('tsc --outDir \"' + outDir + '\" --rootDir \"' + taskPath + '\"');\n    }\n\n    cd(originalDir);\n}\nexports.buildNodeTask = buildNodeTask;\n\nvar copyTaskResources = function (taskMake, srcPath, destPath) {\n    assert(taskMake, 'taskMake');\n    assert(srcPath, 'srcPath');\n    assert(destPath, 'destPath');\n\n    // copy the globally defined set of default task resources\n    var toCopy = makeOptions['taskResources'];\n    toCopy.forEach(function (item) {\n        matchCopy(item, srcPath, destPath, { noRecurse: true, matchBase: true });\n    });\n\n    // copy the locally defined set of resources\n    if (taskMake.hasOwnProperty('cp')) {\n        copyGroups(taskMake.cp, srcPath, destPath);\n    }\n\n    // remove the locally defined set of resources\n    if (taskMake.hasOwnProperty('rm')) {\n        removeGroups(taskMake.rm, destPath);\n    }\n}\nexports.copyTaskResources = copyTaskResources;\n\nvar matchFind = function (pattern, root, options) {\n    assert(pattern, 'pattern');\n    assert(root, 'root');\n\n    // create a copy of the options\n    var clone = {};\n    Object.keys(options || {}).forEach(function (key) {\n        clone[key] = options[key];\n    });\n    options = clone;\n\n    // determine whether to recurse\n    var noRecurse = options.hasOwnProperty('noRecurse') && options.noRecurse;\n    delete options.noRecurse;\n\n    // normalize first, so we can substring later\n    root = path.resolve(root);\n\n    // determine the list of items\n    var items;\n    if (noRecurse) {\n        items = fs.readdirSync(root)\n            .map(function (name) {\n                return path.join(root, name);\n            });\n    }\n    else {\n        items = shell.find(root)\n            .filter(function (item) { // filter out the root folder\n                return path.normalize(item) != root;\n            });\n    }\n\n    return minimatch.match(items, pattern, options);\n}\nexports.matchFind = matchFind;\n\nvar matchCopy = function (pattern, sourceRoot, destRoot, options) {\n    assert(pattern, 'pattern');\n    assert(sourceRoot, 'sourceRoot');\n    assert(destRoot, 'destRoot');\n\n    console.log(`copying ${pattern}`);\n\n    // normalize first, so we can substring later\n    sourceRoot = path.resolve(sourceRoot);\n    destRoot = path.resolve(destRoot);\n\n    matchFind(pattern, sourceRoot, options)\n        .forEach(function (item) {\n            // create the dest dir based on the relative item path\n            var relative = item.substring(sourceRoot.length + 1);\n            assert(relative, 'relative'); // should always be filterd out by matchFind\n            var dest = path.dirname(path.join(destRoot, relative));\n            mkdir('-p', dest);\n\n            cp('-Rf', item, dest + '/');\n        });\n}\nexports.matchCopy = matchCopy;\n\nvar run = function (cl, inheritStreams, noHeader, throwOnError) {\n    if (!noHeader) {\n        console.log();\n        console.log('> ' + cl);\n    }\n\n    var options = {\n        stdio: inheritStreams ? 'inherit' : 'pipe'\n    };\n    var rc = 0;\n    var output;\n    try {\n        output = ncp.execSync(cl, options);\n    }\n    catch (err) {\n        if (!inheritStreams) {\n            console.error(err.output ? err.output.toString() : err.message);\n        }\n\n        if(throwOnError)\n        {\n            throw new Error('Failed to run: ' + cl + ' exit code: ' + err.status);\n        }else{\n            process.exit(1);\n        }\n    }\n\n    return (output || '').toString().trim();\n}\nexports.run = run;\n\n\nvar ensureTool = function (name, versionArgs, validate) {\n    console.log(name + ' tool:');\n    var toolPath = shell.which(name);\n    if (!toolPath) {\n        fail(name + ' not found.  might need to run npm install');\n    }\n\n    if (versionArgs) {\n        var result = shell.exec(name + ' ' + versionArgs);\n        if (typeof validate == 'string') {\n            if (result.stdout.trim() != validate) {\n                fail('expected version: ' + validate);\n            }\n        }\n        else {\n            validate(result.stdout.trim());\n        }\n    }\n\n    console.log(toolPath + '');\n}\nexports.ensureTool = ensureTool;\n\nvar installNodeAsync = async function (nodeVersion) {\n    const versions = {\n        20: 'v20.17.0',\n        16: 'v16.20.2',\n        14: 'v14.10.1',\n        10: 'v10.24.1',\n        6: 'v6.10.3',\n        5: 'v5.10.1',\n    };\n\n    if (!nodeVersion) {\n        nodeVersion = versions[20];\n    } else {\n        if (!versions[nodeVersion]) {\n            fail(`Unexpected node version '${nodeVersion}'. Supported versions: ${Object.keys(versions).join(', ')}`);\n        };\n        nodeVersion = versions[nodeVersion];\n    }\n\n    if (nodeVersion === run('node -v')) {\n        console.log('skipping node install for tests since correct version is running');\n        return;\n    }\n\n    // determine the platform\n    var platform = os.platform();\n    if (platform != 'darwin' && platform != 'linux' && platform != 'win32') {\n        throw new Error('Unexpected platform: ' + platform);\n    }\n\n    var nodeUrl = 'https://nodejs.org/dist';\n    switch (platform) {\n        case 'darwin':\n            var nodeArchivePath = await downloadArchiveAsync(nodeUrl + '/' + nodeVersion + '/node-' + nodeVersion + '-darwin-x64.tar.gz');\n            addPath(path.join(nodeArchivePath, 'node-' + nodeVersion + '-darwin-x64', 'bin'));\n            break;\n        case 'linux':\n            var nodeArchivePath = await downloadArchiveAsync(nodeUrl + '/' + nodeVersion + '/node-' + nodeVersion + '-linux-x64.tar.gz');\n            addPath(path.join(nodeArchivePath, 'node-' + nodeVersion + '-linux-x64', 'bin'));\n            break;\n        case 'win32':\n            var nodeArchivePath = await downloadArchiveAsync(nodeUrl + '/' + nodeVersion + '/node-' + nodeVersion + '-win-x64.zip');\n            addPath(path.join(nodeArchivePath, 'node-' + nodeVersion + '-win-x64'));\n            break;\n    }\n}\nexports.installNodeAsync = installNodeAsync;\n\nvar downloadFileAsync = async function (url) {\n    // validate parameters\n    if (!url) {\n        throw new Error('Parameter \"url\" must be set.');\n    }\n\n    // skip if already downloaded\n    const scrubbedUrl = url.replace(/[/\\:?]/g, '_');\n    const targetPath = path.join(downloadPath, 'file', scrubbedUrl);\n    const marker = targetPath + '.completed';\n    if (test('-f', marker)) {\n        console.log('File already exists: ' + targetPath);\n        return targetPath;\n    }\n\n    console.log('Downloading file: ' + url);\n    // delete any previous partial attempt\n    if (test('-f', targetPath)) {\n        rm('-f', targetPath);\n    }\n\n    // download the file\n    mkdir('-p', path.join(downloadPath, 'file'));\n    const downloader = new Downloader({\n        url: url,\n        directory: path.join(downloadPath, 'file'),\n        fileName: scrubbedUrl,\n        maxAttempts: 3,\n        timeout: 60000,\n        onProgress: function (percentage, chunk, remainingSize) {\n            // check that we run inside pipeline\n            if (process.env['AGENT_TEMPDIRECTORY']) {\n                console.log(`##vso[task.setprogress value=${percentage};]Downloading file: ${scrubbedUrl}`)\n            }\n        },\n    });\n\n\n    const { filePath } = await downloader.download(); // Downloader.download() resolves with some useful properties.\n    fs.writeFileSync(marker, '');\n    return filePath;\n}\nexports.downloadFileAsync = downloadFileAsync;\n\nvar downloadArchiveAsync = async function (url, omitExtensionCheck) {\n    // validate parameters\n    if (!url) {\n        throw new Error('Parameter \"url\" must be set.');\n    }\n\n    var isZip;\n    var isTargz;\n    if (omitExtensionCheck) {\n        isZip = true;\n    }\n    else {\n        if (url.match(/\\.zip$/)) {\n            isZip = true;\n        }\n        else if (url.match(/\\.tar\\.gz$/) && (process.platform == 'darwin' || process.platform == 'linux')) {\n            isTargz = true;\n        }\n        else {\n            throw new Error('Unexpected archive extension');\n        }\n    }\n\n    // skip if already downloaded and extracted\n    var scrubbedUrl = url.replace(/[/\\:?]/g, '_');\n\n    var crypto = require('crypto');\n    var newScrubbedUrl = crypto.createHash('sha256').update(scrubbedUrl).digest('hex');\n\n    var targetPath = path.join(downloadPath, 'archive', newScrubbedUrl);\n    var marker = targetPath + '.completed';\n    if (!test('-f', marker)) {\n        // download the archive\n        var archivePath = await downloadFileAsync(url);\n        console.log('Extracting archive: ' + url);\n\n        // delete any previously attempted extraction directory\n        if (test('-d', targetPath)) {\n            rm('-rf', targetPath);\n        }\n\n        // extract\n        mkdir('-p', targetPath);\n        if (isZip) {\n            if (process.platform == 'win32') {\n                let escapedFile = archivePath.replace(/'/g, \"''\").replace(/\"|\\n|\\r/g, ''); // double-up single quotes, remove double quotes and newlines\n                let escapedDest = targetPath.replace(/'/g, \"''\").replace(/\"|\\n|\\r/g, '');\n\n                let command = `$ErrorActionPreference = 'Stop' ; try { Add-Type -AssemblyName System.IO.Compression.FileSystem } catch { } ; [System.IO.Compression.ZipFile]::ExtractToDirectory('${escapedFile}', '${escapedDest}')`;\n                run(`powershell -Command \"${command}\"`);\n            } else {\n                run(`unzip ${archivePath} -d ${targetPath}`);\n            }\n        }\n        else if (isTargz) {\n            var originalCwd = process.cwd();\n            cd(targetPath);\n            try {\n                run(`tar -xzf \"${archivePath}\"`);\n            }\n            finally {\n                cd(originalCwd);\n            }\n        }\n\n        // write the completed marker\n        fs.writeFileSync(marker, '');\n    }\n\n    return targetPath;\n}\nexports.downloadArchiveAsync = downloadArchiveAsync;\n\nvar copyGroup = function (group, sourceRoot, destRoot) {\n    // example structure to copy a single file:\n    // {\n    //   \"source\": \"foo.dll\"\n    // }\n    //\n    // example structure to copy an array of files/folders to a relative directory:\n    // {\n    //   \"source\": [\n    //     \"foo.dll\",\n    //     \"bar\",\n    //   ],\n    //   \"dest\": \"baz/\",\n    //   \"options\": \"-R\"\n    // }\n    //\n    // example to multiply the copy by .NET culture names supported by TFS:\n    // {\n    //   \"source\": \"<CULTURE_NAME>/foo.dll\",\n    //   \"dest\": \"<CULTURE_NAME>/\"\n    // }\n    //\n\n    // validate parameters\n    assert(group, 'group');\n    assert(group.source, 'group.source');\n    if (typeof group.source == 'object') {\n        assert(group.source.length, 'group.source.length');\n        group.source.forEach(function (s) {\n            assert(s, 'group.source[i]');\n        });\n    }\n\n    assert(sourceRoot, 'sourceRoot');\n    assert(destRoot, 'destRoot');\n\n    // multiply by culture name (recursive call to self)\n    if (group.dest && group.dest.indexOf('<CULTURE_NAME>') >= 0) {\n        var missingCultures = [];\n        cultureNames.forEach(function (cultureName) {\n            try {\n                // culture names do not contain any JSON-special characters, so this is OK (albeit a hack)\n                var localizedGroupJson = JSON.stringify(group).replace(/<CULTURE_NAME>/g, cultureName);\n                copyGroup(JSON.parse(localizedGroupJson), sourceRoot, destRoot);\n            }\n            catch (err) {\n                missingCultures.push(cultureName);\n            }\n        });\n\n        // some cultures might not be present in certain dlls of TFS so just log and ignore\n        // fail in case none were present, as this indicates programmer error (or should not be copied at all)\n        if (missingCultures.length == cultureNames.length) {\n            throw new Error('Could not find a single culture even though make was instructed to copy them.');\n        }\n        if (missingCultures.length > 0) {\n            console.log('The following culture names could not be loaded as they do not exist: ' + missingCultures);\n        }\n\n        return;\n    }\n\n    // build the source array\n    var source = typeof group.source == 'string' ? [group.source] : group.source;\n    source = source.map(function (val) { // root the paths\n        return path.join(sourceRoot, val);\n    });\n\n    // create the destination directory\n    var dest = group.dest ? path.join(destRoot, group.dest) : destRoot + '/';\n    dest = path.normalize(dest);\n    mkdir('-p', dest);\n\n    // copy the files\n    if (group.hasOwnProperty('options') && group.options) {\n        cp(group.options, source, dest);\n    }\n    else {\n        cp(source, dest);\n    }\n}\n\nvar copyGroups = function (groups, sourceRoot, destRoot) {\n    assert(groups, 'groups');\n    assert(groups.length, 'groups.length');\n    groups.forEach(function (group) {\n        copyGroup(group, sourceRoot, destRoot);\n    })\n}\nexports.copyGroups = copyGroups;\n\nvar removeGroup = function (group, pathRoot) {\n    // example structure to remove an array of files/folders:\n    // {\n    //   \"items\": [\n    //     \"foo.dll\",\n    //     \"bar\",\n    //   ],\n    //   \"options\": \"-R\"\n    // }\n\n    // validate parameters\n    assert(group, 'group');\n    assert(group.items, 'group.items');\n    if (typeof group.items != 'object') {\n        throw new Error('Expected group.items to be an array');\n    } else {\n        assert(group.items.length, 'group.items.length');\n        group.items.forEach(function (p) {\n            assert(p, 'group.items[i]');\n        });\n    }\n\n    assert(group.options, 'group.options');\n    assert(pathRoot, 'pathRoot');\n\n    // build the rooted items array\n    var rootedItems = group.items.map(function (val) { // root the paths\n        return path.join(pathRoot, val);\n    });\n\n    // remove the items\n    rm(group.options, rootedItems);\n}\n\nvar removeGroups = function (groups, pathRoot) {\n    assert(groups, 'groups');\n    assert(groups.length, 'groups.length');\n    groups.forEach(function (group) {\n        removeGroup(group, pathRoot);\n    })\n}\nexports.removeGroups = removeGroups;\n\nvar addPath = function (directory) {\n    console.log('');\n    console.log(`> prepending PATH ${directory}`);\n\n    var separator;\n    if (os.platform() == 'win32') {\n        separator = ';';\n    }\n    else {\n        separator = ':';\n    }\n\n    var existing = process.env['PATH'];\n    if (existing) {\n        // move directory to top\n        if (existing.indexOf(directory) !== -1) {\n            existing = existing.replace(directory + separator, '');\n        }\n        process.env['PATH'] = directory + separator + existing;\n    }\n    else {\n        process.env['PATH'] = directory;\n    }\n}\nexports.addPath = addPath;\n\nvar getExternalsAsync = async function (externals, destRoot) {\n    assert(externals, 'externals');\n    assert(destRoot, 'destRoot');\n\n    // .zip files\n    if (externals.hasOwnProperty('archivePackages')) {\n        var archivePackages = externals.archivePackages;\n        for (const archive of archivePackages) {\n            assert(archive.url, 'archive.url');\n            assert(archive.dest, 'archive.dest');\n\n            // download and extract the archive package\n            var archiveSource = await downloadArchiveAsync(archive.url);\n\n            // copy the files\n            var archiveDest = path.join(destRoot, archive.dest);\n            mkdir('-p', archiveDest);\n            cp('-R', path.join(archiveSource, '*'), archiveDest);\n        }\n    }\n\n    // external NuGet V2 packages\n    if (externals.hasOwnProperty('nugetv2')) {\n        var nugetPackages = externals.nugetv2;\n        for (const package of nugetPackages) {\n            // validate the structure of the data\n            assert(package.name, 'package.name');\n            assert(package.version, 'package.version');\n            assert(package.repository, 'package.repository');\n            assert(package.cp, 'package.cp');\n            assert(package.cp, 'package.cp.length');\n\n            // download and extract the NuGet V2 package\n            var url = package.repository.replace(/\\/$/, '') + '/package/' + package.name + '/' + package.version;\n            var packageSource = await downloadArchiveAsync(url, /*omitExtensionCheck*/true);\n\n            // If nuget doesn't find specific package version, it will download the latest.\n            // We can't specify nuget to fail such request, so we need at least to check version post-factum.\n            const parser = new XMLParser();\n\n            const nuspecPath = path.join(packageSource, package.name + '.nuspec');\n            const nuspecXml = fs.readFileSync(nuspecPath);\n            const nuspec = parser.parse(nuspecXml);\n\n            const nuspecVersion = nuspec && nuspec.package && nuspec.package.metadata && nuspec.package.metadata.version;\n            if (nuspecVersion !== package.version) {\n                fail(`Expected version '${package.version}' but got '${nuspecVersion}' for nuget package '${package.name}'`);\n            }\n\n            // copy specific files\n            copyGroups(package.cp, packageSource, destRoot);\n        }\n    }\n\n    // for any file type that has to be shipped with task\n    if (externals.hasOwnProperty('files')) {\n        var files = externals.files;\n        for (const file of files) {\n            assert(file.url, 'file.url');\n            assert(file.dest, 'file.dest');\n\n            // download the file from url\n            var fileSource = await downloadFileAsync(file.url);\n            // copy the files\n            var fileDest = path.join(destRoot, file.dest);\n            mkdir('-p', path.dirname(fileDest));\n            cp(fileSource, fileDest);\n        }\n    }\n}\nexports.getExternalsAsync = getExternalsAsync;\n\n//------------------------------------------------------------------------------\n// task.json functions\n//------------------------------------------------------------------------------\nvar fileToJson = function (file) {\n    var jsonFromFile = JSON.parse(fs.readFileSync(file).toString());\n    return jsonFromFile;\n}\nexports.fileToJson = fileToJson;\n\nvar createResjson = function (task, taskPath) {\n    console.log(`createResjson ${taskPath}`);\n\n    var resources = {};\n    if (task.hasOwnProperty('friendlyName')) {\n        resources['loc.friendlyName'] = task.friendlyName;\n    }\n\n    if (task.hasOwnProperty('helpMarkDown')) {\n        resources['loc.helpMarkDown'] = task.helpMarkDown;\n    }\n\n    if (task.hasOwnProperty('description')) {\n        resources['loc.description'] = task.description;\n    }\n\n    if (task.hasOwnProperty('instanceNameFormat')) {\n        resources['loc.instanceNameFormat'] = task.instanceNameFormat;\n    }\n\n    if (task.hasOwnProperty('releaseNotes')) {\n        resources['loc.releaseNotes'] = task.releaseNotes;\n    }\n\n    if (task.hasOwnProperty('groups')) {\n        task.groups.forEach(function (group) {\n            if (group.hasOwnProperty('name')) {\n                resources['loc.group.displayName.' + group.name] = group.displayName;\n            }\n        });\n    }\n\n    if (task.hasOwnProperty('inputs')) {\n        task.inputs.forEach(function (input) {\n            if (input.hasOwnProperty('name')) {\n                resources['loc.input.label.' + input.name] = input.label;\n\n                if (input.hasOwnProperty('helpMarkDown') && input.helpMarkDown) {\n                    resources['loc.input.help.' + input.name] = input.helpMarkDown;\n                }\n            }\n        });\n    }\n\n    if (task.hasOwnProperty('messages')) {\n        Object.keys(task.messages).forEach(function (key) {\n            resources['loc.messages.' + key] = task.messages[key];\n        });\n    }\n\n    var resjsonPath = path.join(taskPath, 'Strings', 'resources.resjson', 'en-US', 'resources.resjson');\n    mkdir('-p', path.dirname(resjsonPath));\n    var resjsonContent = JSON.stringify(resources, null, 2);\n    if (process.platform == 'win32') {\n        resjsonContent = resjsonContent.replace(/\\n/g, os.EOL);\n    }\n    fs.writeFileSync(resjsonPath, resjsonContent);\n};\nexports.createResjson = createResjson;\n\nvar createTaskLocJson = function (taskPath) {\n    var taskJsonPath = path.join(taskPath, 'task.json');\n    var taskLoc = JSON.parse(fs.readFileSync(taskJsonPath));\n    taskLoc.friendlyName = 'ms-resource:loc.friendlyName';\n    taskLoc.helpMarkDown = 'ms-resource:loc.helpMarkDown';\n    taskLoc.description = 'ms-resource:loc.description';\n    taskLoc.instanceNameFormat = 'ms-resource:loc.instanceNameFormat';\n    if (taskLoc.hasOwnProperty('releaseNotes')) {\n        taskLoc.releaseNotes = 'ms-resource:loc.releaseNotes';\n    }\n\n    if (taskLoc.hasOwnProperty('groups')) {\n        taskLoc.groups.forEach(function (group) {\n            if (group.hasOwnProperty('name')) {\n                group.displayName = 'ms-resource:loc.group.displayName.' + group.name;\n            }\n        });\n    }\n\n    if (taskLoc.hasOwnProperty('inputs')) {\n        taskLoc.inputs.forEach(function (input) {\n            if (input.hasOwnProperty('name')) {\n                input.label = 'ms-resource:loc.input.label.' + input.name;\n\n                if (input.hasOwnProperty('helpMarkDown') && input.helpMarkDown) {\n                    input.helpMarkDown = 'ms-resource:loc.input.help.' + input.name;\n                }\n            }\n        });\n    }\n\n    if (taskLoc.hasOwnProperty('messages')) {\n        Object.keys(taskLoc.messages).forEach(function (key) {\n            taskLoc.messages[key] = 'ms-resource:loc.messages.' + key;\n        });\n    }\n\n    var taskLocContent = JSON.stringify(taskLoc, null, 2);\n    if (process.platform == 'win32') {\n        taskLocContent = taskLocContent.replace(/\\n/g, os.EOL);\n    }\n    fs.writeFileSync(path.join(taskPath, 'task.loc.json'), taskLocContent);\n};\nexports.createTaskLocJson = createTaskLocJson;\n\n// Validates the structure of a task.json file.\nvar validateTask = function (task) {\n    if (!task.id || !check.isUUID(task.id)) {\n        fail('id is a required guid');\n    };\n\n    if (!task.name || !check.isAlphanumeric(task.name)) {\n        fail('name is a required alphanumeric string');\n    }\n\n    if (!task.friendlyName || !check.isLength(task.friendlyName, 1, 40)) {\n        fail('friendlyName is a required string <= 40 chars');\n    }\n\n    if (!task.instanceNameFormat) {\n        fail('instanceNameFormat is required');\n    }\n};\nexports.validateTask = validateTask;\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Generate docs functions\n//------------------------------------------------------------------------------\n// Outputs a YAML snippet file for the specified task.\nvar createYamlSnippetFile = function (taskJson, docsDir, yamlOutputFilename) {\n    var outFilePath = path.join(docsDir, yamlOutputFilename);\n    fs.writeFileSync(outFilePath, getTaskYaml(taskJson));\n}\nexports.createYamlSnippetFile = createYamlSnippetFile;\n\nvar createMarkdownDocFile = function(taskJson, taskJsonPath, docsDir, mdDocOutputFilename) {\n    var outFilePath = path.join(docsDir, taskJson.category.toLowerCase(), mdDocOutputFilename);\n    if (!test('-e', path.dirname(outFilePath))) {\n        fs.mkdirSync(path.dirname(outFilePath));\n        fs.mkdirSync(path.join(path.dirname(outFilePath), '_img'));\n    }\n\n    var iconPath = path.join(path.dirname(taskJsonPath), 'icon.png');\n    if (test('-f', iconPath)) {\n        var docIconPath = path.join(path.dirname(outFilePath), '_img', cleanString(taskJson.name).toLowerCase() + '.png');\n        fs.copyFileSync(iconPath, docIconPath);\n    }\n\n    fs.writeFileSync(outFilePath, getTaskMarkdownDoc(taskJson, mdDocOutputFilename));\n}\nexports.createMarkdownDocFile = createMarkdownDocFile;\n\n// Returns a copy of the specified string with its first letter as a lowercase letter.\n// Example: 'NachoLibre' -> 'nachoLibre'\nfunction camelize(str) {\n    return str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function(match, index) {\n        return index == 0 ? match.toLowerCase() : match.toUpperCase();\n    });\n}\n\nvar getAliasOrNameForInputName = function(inputs, inputName) {\n    var returnInputName = inputName;\n    inputs.forEach(function(input) {\n        if (input.name == inputName) {\n            if (input.aliases && input.aliases.length > 0) {\n                returnInputName = input.aliases[0];\n            }\n            else {\n                returnInputName = input.name;\n            }\n        }\n    });\n    return camelize(returnInputName);\n};\n\nvar getInputAliasOrName = function(input) {\n    var returnInputName;\n    if (input.aliases && input.aliases.length > 0) {\n        returnInputName = input.aliases[0];\n    }\n    else {\n        returnInputName = input.name;\n    }\n    return camelize(returnInputName);\n};\n\nvar cleanString = function(str) {\n    if (str) {\n        return str\n            .replace(/\\r/g, '')\n            .replace(/\\n/g, '')\n            .replace(/\\\"/g, '');\n    }\n    else {\n        return str;\n    }\n}\n\nvar getTaskMarkdownDoc = function(taskJson, mdDocOutputFilename) {\n    var taskMarkdown = '';\n\n    taskMarkdown += '---' + os.EOL;\n    taskMarkdown += 'title: ' + cleanString(taskJson.friendlyName) + os.EOL;\n    taskMarkdown += 'description: ' + cleanString(taskJson.description) + os.EOL;\n    taskMarkdown += 'ms.topic: reference' + os.EOL;\n    taskMarkdown += 'ms.prod: devops' + os.EOL;\n    taskMarkdown += 'ms.technology: devops-cicd' + os.EOL;\n    taskMarkdown += 'ms.assetid: ' + taskJson.id + os.EOL;\n    taskMarkdown += 'ms.manager: ' + os.userInfo().username + os.EOL;\n    taskMarkdown += 'ms.author: ' + os.userInfo().username + os.EOL;\n    taskMarkdown += 'ms.date: ' +\n                    new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit', day: '2-digit'}).format(new Date()) +\n                    os.EOL;\n    taskMarkdown += 'monikerRange: \\'vsts\\'' + os.EOL;\n    taskMarkdown += '---' + os.EOL + os.EOL;\n\n    taskMarkdown += '# ' + cleanString(taskJson.category) + ': ' + cleanString(taskJson.friendlyName) + os.EOL + os.EOL;\n    taskMarkdown += '![](_img/' + cleanString(taskJson.name).toLowerCase() + '.png) ' + cleanString(taskJson.description) + os.EOL + os.EOL;\n\n    taskMarkdown += '::: moniker range=\"> tfs-2018\"' + os.EOL + os.EOL;\n    taskMarkdown += '## YAML snippet' + os.EOL + os.EOL;\n    taskMarkdown += '[!INCLUDE [temp](../_shared/yaml/' + mdDocOutputFilename + ')]' + os.EOL + os.EOL;\n    taskMarkdown += '::: moniker-end' + os.EOL + os.EOL;\n\n    taskMarkdown += '## Arguments' + os.EOL + os.EOL;\n    taskMarkdown += '<table><thead><tr><th>Argument</th><th>Description</th></tr></thead>' + os.EOL;\n    taskJson.inputs.forEach(function(input) {\n        var requiredOrNot = input.required ? 'Required' : 'Optional';\n        var label = cleanString(input.label);\n        var description = input.helpMarkDown; // Do not clean white space from descriptions\n        taskMarkdown += '<tr><td>' + label + '</td><td>(' + requiredOrNot + ') ' + description + '</td></tr>' + os.EOL;\n    });\n\n    taskMarkdown += '[!INCLUDE [temp](../_shared/control-options-arguments.md)]' + os.EOL;\n    taskMarkdown += '</table>' + os.EOL + os.EOL;\n\n    taskMarkdown += '## Q&A' + os.EOL + os.EOL;\n    taskMarkdown += '<!-- BEGINSECTION class=\"md-qanda\" -->' + os.EOL + os.EOL;\n    taskMarkdown += '<!-- ENDSECTION -->' + os.EOL;\n\n    return taskMarkdown;\n}\n\nvar getTaskYaml = function(taskJson) {\n    var taskYaml = '';\n    taskYaml += '```YAML' + os.EOL;\n    taskYaml += '# ' + cleanString(taskJson.friendlyName) + os.EOL;\n    taskYaml += '# ' + cleanString(taskJson.description) + os.EOL;\n    taskYaml += '- task: ' + taskJson.name + '@' + taskJson.version.Major + os.EOL;\n    taskYaml += '  inputs:' + os.EOL;\n\n    taskJson.inputs.forEach(function(input) {\n        // Is the input required?\n        var requiredOrNot = input.required ? '' : '# Optional';\n        if (input.required && input.visibleRule && input.visibleRule.length > 0) {\n            var spaceIndex = input.visibleRule.indexOf(' ');\n            var visibleRuleInputName = input.visibleRule.substring(0, spaceIndex);\n            var visibleRuleInputNameCamel = camelize(visibleRuleInputName);\n            requiredOrNot += '# Required when ' + camelize(input.visibleRule)\n            .replace(/ = /g, ' == ')\n            .replace(visibleRuleInputNameCamel, getAliasOrNameForInputName(taskJson.inputs, visibleRuleInputName));\n        }\n\n        // Does the input have a default value?\n        var isDefaultValueAvailable = input.defaultValue && (input.defaultValue.length > 0 || input.type == 'boolean');\n        var defaultValue = isDefaultValueAvailable ? input.defaultValue.toString() : null;\n\n        // Comment out the input?\n        if (!input.required ||\n            (input.required && isDefaultValueAvailable) ||\n            (input.visibleRule && input.visibleRule.length > 0)) {\n            taskYaml += '    #';\n        }\n        else {\n            taskYaml += '    ';\n        }\n\n        // Append input name\n        taskYaml += getInputAliasOrName(input) + ': ';\n\n        // Append default value\n        if (defaultValue) {\n            if (input.type == 'boolean') {\n                taskYaml += cleanString(defaultValue) + ' ';\n            }\n            else {\n                taskYaml += '\\'' + cleanString(defaultValue) + '\\' ';\n            }\n        }\n\n        // Append required or optional\n        taskYaml += requiredOrNot;\n\n        // Append options?\n        if (input.options) {\n            var isFirstOption = true;\n            Object.keys(input.options).forEach(function(key) {\n                if (isFirstOption) {\n                    taskYaml += (input.required ? '# ' : '. ') + 'Options: ' + camelize(cleanString(key));\n                    isFirstOption = false;\n                }\n                else {\n                    taskYaml += ', ' + camelize(cleanString(key));\n                }\n            });\n        }\n\n        // Append end-of-line for the input\n        taskYaml += os.EOL;\n    });\n\n    // Append endings\n    taskYaml += '```' + os.EOL;\n\n    return taskYaml;\n};\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// package functions\n//------------------------------------------------------------------------------\nvar linkNonAggregatedLayoutContent = function (sourceRoot, destRoot, metadataOnly) {\n    assert(sourceRoot, 'sourceRoot');\n    assert(destRoot, 'destRoot');\n    var metadataFileNames = ['TASK.JSON', 'TASK.LOC.JSON', 'STRINGS', 'ICON.PNG'];\n    // process each file/folder within the source root\n    fs.readdirSync(sourceRoot).forEach(function (itemName) {\n        var taskSourcePath = path.join(sourceRoot, itemName);\n        var taskDestPath = path.join(destRoot, itemName);\n\n        // skip the Common folder and skip files\n        if (itemName == 'Common' || !fs.statSync(taskSourcePath).isDirectory()) {\n            return;\n        }\n\n        mkdir('-p', taskDestPath);\n\n        // process each file/folder within each task folder\n        fs.readdirSync(taskSourcePath).forEach(function (itemName) {\n            // skip the Tests folder\n            if (itemName == 'Tests') {\n                return;\n            }\n\n            // when metadataOnly=true, skip non-metadata items\n            if (metadataOnly && metadataFileNames.indexOf(itemName.toUpperCase()) < 0) {\n                return;\n            }\n\n            // create a junction point for directories, hardlink files\n            var itemSourcePath = path.join(taskSourcePath, itemName);\n            var itemDestPath = path.join(taskDestPath, itemName);\n            if (fs.statSync(itemSourcePath).isDirectory()) {\n                fs.symlinkSync(itemSourcePath, itemDestPath, 'junction');\n            }\n            else {\n                fs.linkSync(itemSourcePath, itemDestPath);\n            }\n        });\n    });\n}\n\nvar linkAggregatedLayoutContent = function (sourceRoot, destRoot, release, commit, taskDestMap) {\n    assert(sourceRoot, 'sourceRoot');\n    assert(destRoot, 'destRoot');\n    assert(commit, 'commit');\n    console.log();\n    console.log(`> Linking ${path.basename(sourceRoot)}`);\n    mkdir('-p', destRoot);\n\n    // process each file/folder within the non-aggregated layout\n    fs.readdirSync(sourceRoot).forEach(function (itemName) {\n        // skip files\n        var taskSourcePath = path.join(sourceRoot, itemName);\n        if (!fs.statSync(taskSourcePath).isDirectory()) {\n            return;\n        }\n\n        // load the source task.json\n        var sourceTask = JSON.parse(fs.readFileSync(path.join(taskSourcePath, 'task.json')));\n        if (typeof sourceTask.version.Major != 'number' ||\n            typeof sourceTask.version.Minor != 'number' ||\n            typeof sourceTask.version.Patch != 'number') {\n\n            fail(`Expected task.version.Major/Minor/Patch to be numbers (${taskSourcePath})`);\n        }\n\n        // determine the dest folder based on the major version\n        assert(sourceTask.id, 'sourceTask.id');\n        var taskDestKey = sourceTask.id + '@' + sourceTask.version.Major;\n        var taskDestPath = taskDestMap[taskDestKey];\n        if (!taskDestPath) {\n            taskDestPath = path.join(destRoot, itemName + `__v${sourceTask.version.Major}`);\n            taskDestMap[taskDestKey] = taskDestPath;\n        }\n\n        if (test('-e', taskDestPath)) {\n            // validate that a newer minor+patch does not exist in an older release\n            // (newer releases should be linked first)\n            var destTask = JSON.parse(fs.readFileSync(path.join(taskDestPath, 'task.json')));\n            var sourceVersion = `${sourceTask.version.Major}.${sourceTask.version.Minor}.${sourceTask.version.Patch}`;\n            var destVersion = `${destTask.version.Major}.${destTask.version.Minor}.${destTask.version.Patch}`;\n            if (semver.gt(sourceVersion, destVersion)) {\n                fail(`Expected minor+patch version for task already in the aggregate layout, to be greater or equal than non-aggregated layout being merged. Source task: ${taskSourcePath}`);\n            }\n        }\n        else {\n            // create a junction point\n            fs.symlinkSync(taskSourcePath, taskDestPath, 'junction');\n\n            // write a human-friendly metadata file\n            fs.writeFileSync(taskDestPath + (release ? `_m${release}` : '') + `_${commit}`, '');\n        }\n    });\n}\n\nvar getNonAggregatedLayout = function (packagePath, release, commit) {\n    assert(packagePath, 'packagePath');\n    assert(release, 'release');\n    assert(commit, 'commit');\n\n    // validate the zip is in the cache\n    var localappdata = process.env.LOCALAPPDATA;\n    assert(localappdata, 'LOCALAPPDATA');\n    var zipPath = path.join(localappdata, 'vsts-tasks', `non-aggregated-tasks_m${release}_${commit}.zip`);\n    var markerPath = `${zipPath}.completed`;\n    if (!test('-f', markerPath)) {\n        fail(`Non-aggregated layout for m${release} (${commit}) not found in the cache. Publish the latest m${release} and then try again.`);\n    }\n\n    // extract\n    console.log();\n    console.log(`> Expanding ${path.basename(zipPath)}`);\n    var destPath = path.join(packagePath, `non-aggregated-layout-m${release}`);\n    run(`powershell.exe -NoLogo -Sta -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -Command \"& '${path.join(__dirname, 'Expand-Tasks.ps1')}' -ZipPath '${zipPath}' -TargetPath '${destPath}'\"`, /*inheritStreams:*/false, /*noHeader*/true);\n\n    return destPath;\n}\n\nvar getRefs = function () {\n    console.log();\n    console.log('> Getting branch/commit info')\n    var info = {};\n    var branch;\n    if (process.env.TF_BUILD) {\n        // during CI agent checks out a commit, not a branch.\n        // $(build.sourceBranch) indicates the branch name, e.g. releases/m108\n        branch = process.env.BUILD_SOURCEBRANCH;\n    }\n    else {\n        // assumes user has checked out a branch. this is a fairly safe assumption.\n        // this code only runs during \"package\" and \"publish\" build targets, which\n        // is not typically run locally.\n        branch = run('git symbolic-ref HEAD', /*inheritStreams*/false, /*noHeader*/true);\n    }\n\n    assert(branch, 'branch');\n    var commit = run('git rev-parse --short=8 HEAD', /*inheritStreams*/false, /*noHeader*/true);\n    var release;\n    if (branch.match(/^(refs\\/heads\\/)?releases\\/m[0-9]+$/)) {\n        release = parseInt(branch.split('/').pop().substr(1));\n    }\n\n    // get the ref info for HEAD\n    var info = {\n        head: {\n            branch: branch,  // e.g. refs/heads/releases/m108\n            commit: commit,  // leading 8 chars only\n            release: release // e.g. 108 or undefined if not a release branch\n        },\n        releases: {}\n    };\n\n    // get the ref info for each release branch within range\n    run('git branch --list --remotes \"origin/releases/m*\"', /*inheritStreams*/false, /*noHeader*/true)\n        .split('\\n')\n        .forEach(function (branch) {\n            branch = branch.trim();\n            if (!branch.match(/^origin\\/releases\\/m[0-9]+$/)) {\n                return;\n            }\n\n            var release = parseInt(branch.split('/').pop().substr(1));\n\n            // filter out releases less than 108 and greater than HEAD\n            if (release < 108 ||\n                release > (info.head.release || 999)) {\n\n                return;\n            }\n\n            branch = 'refs/remotes/' + branch;\n            var commit = run(`git rev-parse --short=8 \"${branch}\"`, /*inheritStreams*/false, /*noHeader*/true);\n            info.releases[release] = {\n                branch: branch,\n                commit: commit,\n                release: release\n            };\n        });\n\n    return info;\n}\nexports.getRefs = getRefs;\n\nvar compressTasks = function (sourceRoot, destPath, individually) {\n    assert(sourceRoot, 'sourceRoot');\n    assert(destPath, 'destPath');\n    run(`powershell.exe -NoLogo -Sta -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -Command \"& '${path.join(__dirname, 'Compress-Tasks.ps1')}' -SourceRoot '${sourceRoot}' -TargetPath '${destPath}' -Individually:${individually ? '$true' : '$false'}\"`, /*inheritStreams:*/true, /*noHeader*/true);\n}\nexports.compressTasks = compressTasks;\n\nvar createNonAggregatedZip = function (buildPath, packagePath) {\n    console.log();\n    console.log('> Creating non aggregate zip');\n    assert(buildPath, 'buildPath');\n    assert(packagePath, 'packagePath');\n\n    // build the layout for the nested task zips\n    console.log();\n    console.log('> Linking content for nested task zips');\n    var nestedZipsContentPath = path.join(packagePath, 'nested-zips-layout');\n    linkNonAggregatedLayoutContent(buildPath, nestedZipsContentPath, /*metadataOnly*/false);\n\n    // create the nested task zips (part of the non-aggregated tasks layout)\n    console.log();\n    console.log('> Creating nested task zips (content for non-aggregated tasks layout)');\n    var nonAggregatedLayoutPath = path.join(packagePath, 'non-aggregated-layout');\n    compressTasks(nestedZipsContentPath, nonAggregatedLayoutPath, /*individually:*/true);\n\n    // link the task metadata into the non-aggregated tasks layout\n    console.log();\n    console.log('> Linking metadata content for non-aggregated tasks layout');\n    linkNonAggregatedLayoutContent(buildPath, nonAggregatedLayoutPath, /*metadataOnly*/true);\n\n    // mark the layout with a version number.\n    // servicing supports both this new format and the legacy layout format as well.\n    fs.writeFileSync(path.join(nonAggregatedLayoutPath, 'layout-version.txt'), '2');\n\n    // create the non-aggregated tasks zip\n    console.log();\n    console.log('> Zipping non-aggregated tasks layout');\n    var nonAggregatedZipPath = path.join(packagePath, 'non-aggregated-tasks.zip');\n    compressTasks(nonAggregatedLayoutPath, nonAggregatedZipPath);\n\n    return nonAggregatedLayoutPath;\n}\nexports.createNonAggregatedZip = createNonAggregatedZip;\n\n/**\n * Create a NuGet package per task. This function assumes the tasks are already laid out on disk.\n *\n * When running locally, layoutPath is something like: _package\\non-aggregated-layout\n * Within this folder we have one of these folders per task:\n *  /CmdLineV2\n *      /Strings\n *      /task.json\n *      /task.loc.json\n *      /task.zip\n *\n * Within the function we create an artifacts folder, this is what gets uploaded when we are done.\n * The contents look something like:\n * /artifacts\n *  /AndroidSigningV2\n *      /Mseng.MS.TF.DistributedTask.Tasks.AndroidSigningV2.2.135.0.nupkg\n *  /AnotherTask\n *      /Mseng.MS.TF.DistributedTask.Tasks.AnotherTaskV1.1.0.0.nupkg\n *  /servicing.xml * Convenience file. Generates all XML to update servicing configuration for tasks.\n *  /unified_deps.xml * Convenience file. Generates all XML to update unified dependencies file.\n *\n * @param {*} packagePath Path of _packages folder.\n * @param {*} layoutPath Path that has task layouts.\n */\nvar createNugetPackagePerTask = function (packagePath, /*nonAggregatedLayoutPath*/layoutPath) {\n    console.log();\n    console.log('> Creating NuGet package per task')\n\n    // create folder for _package\\task-zips\n    // Inside this folder we have one folder per task that contains the task.zip.\n    // It also has layout-version.txt and the nuspec file for the task.\n    // This folder is what we create the nupkg from.\n    console.log();\n    console.log('> Creating task zips folder');\n    var tasksZipsPath = path.join(packagePath, 'task-zips');\n    mkdir('-p', tasksZipsPath);\n\n    // _package\\nuget-packages\n    // This is the final state of the task content and what is published as a build artifact.\n    console.log();\n    console.log('> Creating artifacts folder');\n    var nugetPackagesPath = path.join(packagePath, \"nuget-packages\");\n    mkdir('-p', nugetPackagesPath);\n\n    console.log();\n    console.log('> Zipping task folders')\n\n    // maintain package references that we need to add to unified dependencies\n    var unifiedDepsContent = [];\n\n    // maintain xml content for adding packages to servicing configuration\n    var servicingXmlContent = [];\n\n    // iterate all the tasks\n    fs.readdirSync(layoutPath)\n        .forEach(function (taskFolderName) {\n            // The non-aggregated-layout folder has a layout-version in it, skip when we hit it.\n            if (taskFolderName === 'layout-version.txt') {\n                return;\n            }\n\n            var taskLayoutPath = path.join(layoutPath, taskFolderName);\n            var taskJsonPath = path.join(taskLayoutPath, 'task.json');\n            var taskJsonContents = JSON.parse(fs.readFileSync(taskJsonPath));\n            var taskVersion = taskJsonContents.version.Major + '.' + taskJsonContents.version.Minor + '.' + taskJsonContents.version.Patch;\n            var taskName = taskJsonContents.name;\n\n            // Create the full task name so we don't need to rely on the folder name.\n            var fullTaskName = `Mseng.MS.TF.DistributedTask.Tasks.${taskName}V${taskJsonContents.version.Major}`;\n            if (taskJsonContents.hasOwnProperty('_buildConfigMapping')) { \n                for (let i in taskJsonContents._buildConfigMapping) {\n                    if (taskJsonContents._buildConfigMapping[i] === taskVersion && i.toLocaleLowerCase() !== 'default') {\n                        // take only first part of the name\n                        var postfix = i.split('-')[0];\n                        fullTaskName = fullTaskName + `_${postfix}`;\n                        break;\n                    }\n                }\n            }\n            // Create xml entry for UnifiedDependencies\n            unifiedDepsContent.push(`  <package id=\"${fullTaskName}\" version=\"${taskVersion}\" availableAtDeployTime=\"true\" />`);\n\n            // Create xml entry that we need to configure servicing file\n            servicingXmlContent.push(getServicingXmlContent(taskFolderName, fullTaskName, taskVersion));\n\n            // Create a matching folder inside taskZipsPath\n            var taskZipPath = path.join(tasksZipsPath, taskFolderName);\n            mkdir('-p', taskZipPath);\n            console.log('root task folder: ' + taskZipPath);\n\n            // Following NuGet conventions, we want the NuGet content to go inside a content folder\n            // Our task.zip and layout-version.txt will go inside the content folder\n            var nugetContentPath = path.join(taskZipPath, 'content');\n            mkdir('-p', nugetContentPath);\n\n            // hard link task.zip from layout to nuget contents\n            var layoutZipPath = path.join(taskLayoutPath, 'task.zip');\n            var nugetContentsZipPath = path.join(nugetContentPath, 'task.zip');\n            fs.linkSync(layoutZipPath, nugetContentsZipPath);\n\n            // Write layout version file. This will help us if we change the structure of the individual NuGet packages in the future.\n            fs.writeFileSync(path.join(nugetContentPath, 'layout-version.txt'), '3');\n\n            // Create the nuspec file and nupkg\n            var taskNuspecPath = createNuspecFile(taskZipPath, fullTaskName, taskVersion);\n            createNuGetPackage(nugetPackagesPath, taskFolderName, taskNuspecPath, taskZipPath);\n        });\n\n    console.log();\n\n    // Write file that has XML for unified dependencies, makes it easier to setup that file.\n    console.log('> Generating XML dependencies for UnifiedDependencies');\n    var depsContentPath = path.join(nugetPackagesPath, 'unified_deps.xml');\n    fs.writeFileSync(depsContentPath, unifiedDepsContent.sort(function (a, b) { return a.toLowerCase().localeCompare(b.toLowerCase()); }).join(os.EOL));\n\n    // Write file that has XML for servicing, makes it easier to setup that file.\n    console.log('> Generating XML dependencies for Servicing');\n    var servicingContentPath = path.join(nugetPackagesPath, 'servicing.xml');\n    fs.writeFileSync(servicingContentPath, servicingXmlContent.sort(function (a, b) { return a.toLowerCase().localeCompare(b.toLowerCase()); }).join(''));\n}\nexports.createNugetPackagePerTask = createNugetPackagePerTask;\n\n\n/**\n * Create xml content for servicing.\n *\n * e.g. -\n * <Directory Path=\"[ServicingDir]Tasks\\Individual\\AndroidSigningV2\\\">\n *   <File Origin=\"nuget://Mseng.MS.TF.DistributedTask.Tasks.AndroidSigningV2/*\" />\n * </Directory>\n *\n * @param {*} taskFolderName\n * @param {*} fullTaskName\n * @param {*} taskVersion\n */\nvar getServicingXmlContent = function (taskFolderName, fullTaskName, taskVersion) {\n    var servicingXmlContent = '';\n\n    servicingXmlContent += `  <Directory Path=\"[ServicingDir]Tasks\\\\Individual\\\\${taskFolderName}\\\\\">` + os.EOL;\n    servicingXmlContent += `    <File Origin=\"nuget://${fullTaskName}/*\" />` + os.EOL;\n    servicingXmlContent += `  </Directory>` + os.EOL;\n\n    return servicingXmlContent;\n}\n\n/**\n * Create .nuspec file for a task.\n *\n * @param {*} taskLayoutPath Layout path for the specific task we are creating nuspec for\n * @param {*} fullTaskName Full name of the task. e.g. - Mseng.MS.TF.DistributedTask.Tasks.AzureCLIV1\n * @param {*} taskVersion Version of the task. e.g. - 1.132.0\n * @returns Path of the nuspec file that was created.\n */\nvar createNuspecFile = function (taskLayoutPath, fullTaskName, taskVersion) {\n    console.log('> Creating nuspec file');\n\n    var contents = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' + os.EOL;\n    contents += '<package xmlns=\"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\">' + os.EOL;\n    contents += '   <metadata>' + os.EOL;\n    contents += '      <id>' + fullTaskName + '</id>' + os.EOL;\n    contents += '      <version>' + taskVersion + '</version>' + os.EOL;\n    contents += '      <authors>bigbldt</authors>' + os.EOL;\n    contents += '      <owners>bigbldt,Microsoft</owners>' + os.EOL;\n    contents += '      <requireLicenseAcceptance>false</requireLicenseAcceptance>' + os.EOL;\n    contents += '      <description>For VSS internal use only</description>' + os.EOL;\n    contents += '      <tags>VSSInternal</tags>' + os.EOL;\n    contents += '   </metadata>' + os.EOL;\n    contents += '</package>' + os.EOL;\n\n    var taskNuspecPath = path.join(taskLayoutPath, fullTaskName + '.nuspec');\n    console.log('taskNuspecPath: ' + taskNuspecPath);\n    fs.writeFileSync(taskNuspecPath, contents);\n\n    return taskNuspecPath;\n}\n\n/**\n * Create .nupkg for a specific task.\n * @param {*} publishPath Root path to publish tasks.\n * @param {*} taskFolderName Folder name for the task we want to create a NuGet package for. e.g - AzurePowerShellV3\n * @param {*} taskNuspecPath Path to existing Nuspec file. This is inside the layout folder for the task. e.g - _package\\per-task-layout\\AzureCLIV1\\Mseng.MS.TF.DistributedTask.Tasks.AzureCLIV1.nuspec\n * @param {*} taskLayoutPath Path where contents of a specific task are laid out on disk.\n * @returns Publish folder for the task.\n */\nvar createNuGetPackage = function (publishPath, taskFolderName, taskNuspecPath, taskLayoutPath) {\n    console.log('> Creating nuget package for task ' + taskFolderName);\n\n    var taskPublishFolder = path.join(publishPath, taskFolderName);\n    fs.mkdirSync(taskPublishFolder);\n    process.chdir(taskPublishFolder);\n\n    console.log('task nuspec path: ' + taskNuspecPath);\n    console.log('base path: ' + taskLayoutPath)\n    run(`nuget pack \"${taskNuspecPath}\" -BasePath \"${taskLayoutPath}\" -NoDefaultExcludes`, /*inheritStreams:*/ true);\n\n    return taskPublishFolder;\n}\n\n\n// Rename task folders that are created from the aggregate. Allows NuGet generation from aggregate using same process as normal.\n// [stfrance]: remove this once we have fully migrated to nuget package per task.\nvar renameFoldersFromAggregate = function renameFoldersFromAggregate(pathWithLegacyFolders) {\n    // Rename folders\n    fs.readdirSync(pathWithLegacyFolders)\n        .forEach(function (taskFolderName) {\n            if (taskFolderName.charAt(taskFolderName.length-1) === taskFolderName.charAt(taskFolderName.length-3)\n                && taskFolderName.charAt(taskFolderName.length-2) === taskFolderName.charAt(taskFolderName.length-4))\n            {\n                var currentPath = path.join(pathWithLegacyFolders, taskFolderName);\n                var newPath = path.join(pathWithLegacyFolders, taskFolderName.substring(0, taskFolderName.length - 2));\n\n                fs.renameSync(currentPath, newPath);\n            }\n\n            var currentPath = path.join(pathWithLegacyFolders, taskFolderName);\n            if (taskFolderName.indexOf('__') !== -1) {\n                var s = taskFolderName.split('__');\n                var newFolderName = s[0] + s[1].toUpperCase();\n                var newPath = path.join(pathWithLegacyFolders, newFolderName);\n\n                fs.renameSync(currentPath, newPath);\n            }\n        });\n}\nexports.renameFoldersFromAggregate = renameFoldersFromAggregate;\n\n// Use the main layout process on Task folders that were extracted from the aggregate.\n// This is what we use to seed packaging with older major versions.\n// [stfrance]: remove this once we have fully migrated to nuget package per task.\nvar generatePerTaskForLegacyPackages = function generatePerTaskForLegacyPackages(pathWithLegacyFolders) {\n    // Generate NuGet package per task for legacy packages.\n    var legacyPath = path.join(__dirname, '_packageLegacy');\n    if (test('-d', legacyPath)) {\n        rm('-rf', legacyPath);\n    }\n\n    createNugetPackagePerTask(legacyPath, pathWithLegacyFolders);\n}\nexports.generatePerTaskForLegacyPackages = generatePerTaskForLegacyPackages;\n\n// TODO: Do we need to fix this?\nvar createHotfixLayout = function (packagePath, taskName) {\n    assert(packagePath, 'packagePath');\n    assert(taskName, 'taskName');\n    console.log();\n    console.log(`> Creating hotfix layout for task '${taskName}'`);\n\n    var branch = null;\n    if (process.env.TF_BUILD) {\n        // during CI agent checks out a commit, not a branch.\n        // $(build.sourceBranch) indicates the branch name, e.g. releases/m108\n        branch = process.env.BUILD_SOURCEBRANCH;\n    }\n    else {\n        // assumes user has checked out a branch. this is a fairly safe assumption.\n        // this code only runs during \"package\" and \"publish\" build targets, which\n        // is not typically run locally.\n        branch = run('git symbolic-ref HEAD', /*inheritStreams*/false, /*noHeader*/true);\n    }\n\n    var commitInfo = run('git log -1 --format=oneline', /*inheritStreams*/false, /*noHeader*/true);\n\n    // create the script\n    var hotfixPath = path.join(packagePath, 'hotfix');\n    mkdir('-p', hotfixPath);\n    var scriptPath = path.join(hotfixPath, `${taskName}.ps1`);\n    var scriptContent = '# Hotfix created from branch: ' + branch + os.EOL;\n    scriptContent += '# Commit: ' + commitInfo + os.EOL;\n    scriptContent += '$ErrorActionPreference=\\'Stop\\'' + os.EOL;\n    scriptContent += 'Update-DistributedTaskDefinitions -TaskZip $PSScriptRoot\\\\tasks.zip' + os.EOL;\n    fs.writeFileSync(scriptPath, scriptContent);\n\n    // link the non-aggregated tasks zip\n    var zipSourcePath = path.join(packagePath, 'non-aggregated-tasks.zip');\n    var zipDestPath = path.join(hotfixPath, 'tasks.zip');\n    cp(zipSourcePath, zipDestPath);\n}\nexports.createHotfixLayout = createHotfixLayout;\n\nvar createAggregatedZip = function (packagePath) {\n    assert(packagePath, 'packagePath');\n\n    // get branch/commit info\n    var refs = getRefs();\n\n    // initialize the aggregated layout\n    // mark the layout with a version number.\n    // servicing supports both this new format and the legacy layout format as well.\n    console.log();\n    console.log('> Creating aggregated layout');\n    var aggregatedLayoutPath = path.join(packagePath, 'aggregated-layout');\n    mkdir('-p', aggregatedLayoutPath);\n    fs.writeFileSync(path.join(aggregatedLayoutPath, 'layout-version.txt'), '2');\n\n    // track task GUID + major version -> destination path\n    // task directory names can change between different release branches\n    var taskDestMap = {};\n\n    // link the tasks from the non-aggregated layout into the aggregated layout\n    var nonAggregatedLayoutPath = path.join(packagePath, 'non-aggregated-layout');\n    linkAggregatedLayoutContent(nonAggregatedLayoutPath, aggregatedLayoutPath, /*release:*/'', /*commit:*/refs.head.commit, taskDestMap);\n\n    // link the tasks from previous releases into the aggregated layout\n    Object.keys(refs.releases)\n        .sort()\n        .reverse()\n        .forEach(function (release) {\n            // skip the current release (already covered by current build)\n            if (release == refs.head.release) {\n                return;\n            }\n\n            var commit = refs.releases[release].commit;\n            var releaseLayout = getNonAggregatedLayout(packagePath, release, commit);\n            linkAggregatedLayoutContent(releaseLayout, aggregatedLayoutPath, /*release:*/release, /*commit:*/commit, taskDestMap);\n        });\n\n    // validate task uniqueness within the layout based on task GUID + major version\n    var majorVersions = {};\n    fs.readdirSync(aggregatedLayoutPath) // walk each item in the aggregate layout\n        .forEach(function (itemName) {\n            var itemPath = path.join(aggregatedLayoutPath, itemName);\n            if (!fs.statSync(itemPath).isDirectory()) { // skip files\n                return;\n            }\n\n            // load the task.json\n            var taskPath = path.join(itemPath, 'task.json');\n            var task = JSON.parse(fs.readFileSync(taskPath));\n            if (typeof task.version.Major != 'number') {\n                fail(`Expected task.version.Major/Minor/Patch to be a number (${taskPath})`);\n            }\n\n            assert(task.id, `task.id (${taskPath})`);\n            if (typeof task.id != 'string') {\n                fail(`Expected id to be a string (${taskPath})`);\n            }\n\n            // validate GUID + Major version is unique\n            var key = task.id + task.version.Major;\n            if (majorVersions[key]) {\n                fail(`Tasks GUID + Major version must be unique within the aggregated layout. Task 1: ${majorVersions[key]}; task 2: ${taskPath}`);\n            }\n\n            majorVersions[key] = taskPath;\n        });\n\n    // create the aggregated tasks zip\n    console.log();\n    console.log('> Zipping aggregated tasks layout');\n    var aggregatedZipPath = path.join(packagePath, 'pack-source', 'contents', 'Microsoft.TeamFoundation.Build.Tasks.zip');\n    mkdir('-p', path.dirname(aggregatedZipPath));\n    compressTasks(aggregatedLayoutPath, aggregatedZipPath);\n}\nexports.createAggregatedZip = createAggregatedZip;\n\nvar storeNonAggregatedZip = function (zipPath, release, commit) {\n    assert(zipPath, 'zipPath');\n    ensureExists(zipPath);\n    assert(release, 'release');\n    assert(commit, 'commit');\n\n    console.log();\n    console.log(`> Storing non-aggregated zip (m${release} ${commit})`);\n\n    // determine the destination dir\n    var localappdata = process.env.LOCALAPPDATA;\n    assert(localappdata, 'LOCALAPPDATA');\n    var destDir = path.join(localappdata, 'vsts-tasks');\n    mkdir('-p', destDir);\n\n    // remove old packages for same release branch\n    rm(path.join(destDir, `non-aggregated-tasks_m${release}_*`))\n\n    // copy the zip\n    var destZip = path.join(destDir, `non-aggregated-tasks_m${release}_${commit}.zip`);\n    cp(zipPath, destZip);\n\n    // write the completed marker file\n    var destMarker = `${destZip}.completed`;\n    fs.writeFileSync(destMarker, '');\n}\nexports.storeNonAggregatedZip = storeNonAggregatedZip;\n\nconst getTaskNodeVersion = function(buildPath, taskName) {\n    const nodes = new Set();\n    const taskJsonPath = path.join(buildPath, taskName, \"task.json\");\n    if (!fs.existsSync(taskJsonPath)) {\n        console.warn('Unable to find task.json, defaulting to use Node 10');\n        nodes.add(10);\n        return Array.from(nodes);\n    }\n\n    const taskJsonContents = fs.readFileSync(taskJsonPath, { encoding: 'utf-8' });\n    const taskJson = JSON.parse(taskJsonContents);\n\n    const executors = ['execution', 'prejobexecution', 'postjobexecution'];\n    for (const executor of executors) {\n        if (!taskJson[executor]) continue;\n\n        for (const key of Object.keys(taskJson[executor])) {\n            const currExecutor = key.toLocaleLowerCase();\n            if (!currExecutor.startsWith('node')) continue;\n            const version = currExecutor.replace('node', '');\n            nodes.add(parseInt(version) || 20);\n        }\n    }\n\n    if (nodes.size) {\n        return Array.from(nodes);\n    }\n\n    console.warn('Unable to determine execution type from task.json, defaulting to use Node 10 taskName=' + taskName);\n    nodes.add(10);\n    return Array.from(nodes);\n}\nexports.getTaskNodeVersion = getTaskNodeVersion;\n\n/**\n * \n * @param {String} buildPath - Path to the build folder\n * @param {String} taskName - Name of the task\n * @returns { Boolean } true if the task is a node task\n */\nvar isNodeTask = function(buildPath, taskName) {\n    const taskJsonPath = path.join(buildPath, taskName, \"task.json\");\n    if (!fs.existsSync(taskJsonPath)) return false;\n    \n    const taskJsonContents = fs.readFileSync(taskJsonPath, { encoding: 'utf-8' });\n    const taskJson = JSON.parse(taskJsonContents);\n    const execution = ['execution', 'prejobexecution','postjobexecution']\n        .map(key => taskJson[key]);\n    \n    for (const executors of execution) {\n        if (!executors) continue;\n        for (const key of Object.keys(executors)) {\n            const executor = key.toLocaleLowerCase();\n            if (executor.startsWith('node')) return true;\n        }\n    }\n\n    return false;\n}\nexports.isNodeTask = isNodeTask;\n\n//------------------------------------------------------------------------------\n\nfunction renameCodeCoverageOutput(coveragePath, taskName) {\n    if (!coveragePath) return;\n    try {\n        if (fs.existsSync(coveragePath)) {\n            if (fs.existsSync(path.join(coveragePath, \"coverage-final.json\"))) {\n                fs.renameSync(path.join(coveragePath, \"coverage-final.json\"), path.join(coveragePath, `${taskName}-coverage.json`));\n            }\n            if (fs.existsSync(path.join(coveragePath, \"coverage-summary.json\"))) {\n                fs.renameSync(path.join(coveragePath, \"coverage-summary.json\"), path.join(coveragePath, `${taskName}-coverage-summary.json`));\n            }\n        }\n    } catch (e) {\n        console.log(e)\n    }\n}\nexports.renameCodeCoverageOutput = renameCodeCoverageOutput;\n//------------------------------------------------------------------------------\n// codegen functions\n//------------------------------------------------------------------------------\n\n/**\n * Ensure Pre-reqs for buildConfigGen (e.g. dotnet)\n * @param {String} baseConfigToolPath base build config tool path\n */\nvar ensureBuildConfigGeneratorPrereqs = function (baseConfigToolPath) {\n    var configToolBuildUtility = \"\";\n\n    if (os.platform() === 'win32') {\n        configToolBuildUtility = path.join(baseConfigToolPath, \"dev.cmd\");\n    } else {\n        configToolBuildUtility = path.join(baseConfigToolPath, \"dev.sh\");\n    }\n\n    const dotnetSdkVersion = \"8.0.100\";\n    const dotnetInstallationDirectory = path.resolve(baseConfigToolPath, \"_dotnetsdk\", dotnetSdkVersion);\n\n    // build configToolBuildUtility if needed.  (up-to-date check will skip build if not needed)\n    run(`${configToolBuildUtility} ${baseConfigToolPath} ${dotnetInstallationDirectory} ${dotnetSdkVersion}`, true);\n    addPath(dotnetInstallationDirectory);\n};\nexports.ensureBuildConfigGeneratorPrereqs = ensureBuildConfigGeneratorPrereqs;\n\n/**\n * Function to validate or write generated tasks\n * @param {String} baseConfigToolPath Path to generating program\n * @param {Array} taskList  Array with allowed tasks\n * @param {Object} makeOptions Object with all tasks\n * @param {Boolean} writeUpdates Write Updates (false to validateOnly)\n * @param {Number} sprintNumber Sprint number option to pass in the BuildConfigGenerator tool\n * @param {String} debugAgentDir When set to local agent root directory, the BuildConfigGenerator tool will generate launch configurations for the task(s)\n * @param {Boolean} includeLocalPackagesBuildConfig When set to true, generate LocalPackages BuildConfig\n */\nvar processGeneratedTasks = function(baseConfigToolPath, taskList, makeOptions, writeUpdates, sprintNumber, debugAgentDir, includeLocalPackagesBuildConfig) {\n    if (!makeOptions) fail(\"makeOptions is not defined\");\n    if (sprintNumber && !Number.isInteger(sprintNumber)) fail(\"Sprint is not a number\");\n\n    var tasks = taskList.join('|')\n    ensureBuildConfigGeneratorPrereqs(baseConfigToolPath);\n    var programPath = `dotnet run --project \"${baseConfigToolPath}/BuildConfigGen.csproj\" -- `\n\n    const args = [\n        \"--task\",\n        `\"${tasks}\"`\n    ];\n\n    if (sprintNumber) {\n        args.push(\"--current-sprint\");\n        args.push(sprintNumber);\n    }\n    \n    var writeUpdateArg = \"\";\n    if(writeUpdates)\n    {\n        writeUpdateArg += \" --write-updates\";\n    }\n\n    if(includeLocalPackagesBuildConfig)\n    {\n        writeUpdateArg += \" --include-local-packages-build-config\";        \n    }\n\n    var debugAgentDirArg = \"\";\n    if(debugAgentDir) {\n        debugAgentDirArg += ` --debug-agent-dir ${debugAgentDir}`;\n    }\n\n    banner(`Validating: tasks ${tasks} \\n`);\n    run(`${programPath} ${args.join(' ')} ${writeUpdateArg} ${debugAgentDirArg}`, true);\n\n}\nexports.processGeneratedTasks = processGeneratedTasks;\n\n/**\n * Function to merge all tasks under a build config into base tasks.\n * @param {String} buildConfig that selected to merge\n */\nvar mergeBuildConfigIntoBaseTasks = function(buildConfig) {\n    var makeOptionsPath = path.join(__dirname, 'make-options.json');\n    var makeOptions = fileToJson(makeOptionsPath);\n    if (!makeOptions) fail(\"makeOptions is not defined\");\n    const AllTasksToMerge = makeOptions[buildConfig];\n    const TasksfailedToMerge = [];\n\n    const match = buildConfig.match(/^([a-zA-Z]+[0-9]+)_\\d+(_\\d+)?$/);\n    var surfixBuildConfig = match ? match[1] : buildConfig;\n\n    if (AllTasksToMerge && Array.isArray(AllTasksToMerge)) {\n        AllTasksToMerge.forEach(taskName => {\n            var generatedTaskPath = path.join(__dirname, '_generated', `${taskName}_${surfixBuildConfig}`);\n            var generatedDefaultTaskPath = path.join(__dirname, '_generated', taskName)\n            var versionmapFilePath = path.join(__dirname, '_generated', `${taskName}.versionmap.txt`);\n            var baseTaskPath = path.join(__dirname, 'Tasks', taskName);\n            var buildConfigTaskPath = path.join(baseTaskPath, '_buildConfigs', surfixBuildConfig);\n\n            if (!fs.existsSync(generatedTaskPath) || !fs.statSync(generatedTaskPath).isDirectory() || !fs.existsSync(versionmapFilePath)) {\n                console.log(`Invalid generated task path ${generatedTaskPath} or invalid ${taskName}.versionmap.txt file ${versionmapFilePath}\\n`);\n                TasksfailedToMerge.push(taskName);\n            } else {\n                banner(`Merging ${generatedTaskPath} into base task...`);\n\n                // Copy generated task to base task, delete generated files\n                cp('-rf', generatedTaskPath + \"/*\", baseTaskPath);\n                cp('-rf', generatedTaskPath + \"/.npmrc\", baseTaskPath);\n                console.log(`Copied ${generatedTaskPath} to ${baseTaskPath}`);\n                rm(\"-rf\", buildConfigTaskPath);\n                console.log(`Deleted ${buildConfigTaskPath} folder`);\n                rm(\"-rf\", generatedTaskPath);\n                console.log(`Deleted ${generatedTaskPath} folder`);\n                rm(\"-rf\", generatedDefaultTaskPath);\n                console.log(`Deleted ${generatedDefaultTaskPath} folder`);\n                rm(\"-rf\", versionmapFilePath);\n                console.log(`Deleted ${versionmapFilePath} file`);\n\n                // Remove _buildConfigMapping section in task.json and task-loc.json\n                var taskJsonPath = path.join(baseTaskPath, 'task.json');\n                var taskJson = JSON.parse(fs.readFileSync(taskJsonPath));\n                var taskLocJsonPath = path.join(baseTaskPath, 'task.loc.json');\n                var taskLocJson = JSON.parse(fs.readFileSync(taskLocJsonPath));\n                if (taskJson && taskJson[\"_buildConfigMapping\"]) {\n                    delete taskJson[\"_buildConfigMapping\"];\n                }\n                if (taskLocJson && taskLocJson[\"_buildConfigMapping\"]) {\n                    delete taskLocJson[\"_buildConfigMapping\"];\n                }\n                fs.writeFileSync(taskJsonPath, JSON.stringify(taskJson, null, 2));\n                fs.writeFileSync(taskLocJsonPath, JSON.stringify(taskLocJson, null, 2));\n                console.log(`Updated task.json and task-loc.json files under ${baseTaskPath}`);\n                console.log(`${generatedTaskPath} was merged into ${baseTaskPath}\\n`);\n            }\n        });\n    } else {\n        fail(`Invalid configuration for ${buildConfig}.`);\n    }\n\n    // Update make-options.json\n    if (TasksfailedToMerge.length > 0) {\n        console.log('The following tasks failed to merge into base tasks: ' + TasksfailedToMerge);\n        makeOptions[buildConfig] = makeOptions[buildConfig].filter(item =>\n            TasksfailedToMerge.includes(item)\n        );\n    } else {\n        delete makeOptions[buildConfig];\n    }\n    fs.writeFileSync(makeOptionsPath, JSON.stringify(makeOptions, null, 4));\n    console.log(\"Updated make-options.json file\");\n}\nexports.mergeBuildConfigIntoBaseTasks = mergeBuildConfigIntoBaseTasks;\n\n/**\n * Wrapper for buildTask function which compares diff between source and generated tasks\n * @param {Function} originalFunction - Original buildTask function\n * @param {string} basicGenTaskPath - path to generated folder\n * @param {boolean} callGenTaskDuringBuild - if false, the sync step will be skipped\n * @returns {Function} - wrapped buildTask function which compares diff between source and generated tasks\n * and copy files from generated to source if needed\n */\nfunction syncGeneratedFilesWrapper(originalFunction, basicGenTaskPath, basicGenTaskPathLocal, includeLocalPackagesBuildConfig, callGenTaskDuringBuild = false) {\n    const runtimeChangedFiles = [\"package.json\", \"package-lock.json\", \"npm-shrinkwrap.json\"];\n\n    if (!originalFunction || originalFunction instanceof Function === false) throw Error('originalFunction is not defined');\n    // If the task is building on the ci, we don't want to sync files\n    if (callGenTaskDuringBuild === false) return originalFunction;\n\n    return async function(taskName, ...args) {\n        await originalFunction.apply(this, [taskName, ...args]);\n\n        var genTaskPath = path.join(basicGenTaskPath, taskName);\n\n        if (includeLocalPackagesBuildConfig && !fs.existsSync(genTaskPath)) {\n            genTaskPath = path.join(basicGenTaskPathLocal, taskName);\n        };\n\n        // if it's not a generated task, we don't need to sync files\n        if (!fs.existsSync(genTaskPath)){\n            return;\n        }\n\n        const [ baseTaskName, config ] = taskName.split(\"_\");\n        const copyCandidates = shell.find(genTaskPath)\n            .filter(function (item) { \n                // ignore node_modules\n                if (item.indexOf(\"node_modules\") !== -1) return false\n                // ignore everything except package.json, package-lock.json, npm-shrinkwrap.json\n                if (!runtimeChangedFiles.some((pattern) => item.indexOf(pattern) !== -1)) return false;\n                \n                return true;\n            });\n\n        copyCandidates.forEach((candidatePath) => {\n            const relativePath = path.relative(genTaskPath, candidatePath);\n            let dest = path.join(__dirname, 'Tasks', baseTaskName, relativePath);\n            \n            if (config) {  \n                if(config===\"LocalPackages\"){\n                    dest = path.join(__dirname, '_generated', '_buildConfigs', baseTaskName, config, relativePath);\n                }else{\n                    dest = path.join(__dirname, 'Tasks', baseTaskName, '_buildConfigs', config, relativePath);\n                }\n            }\n            \n            // update Tasks/[task]/_buildConfigs/[configs]/package.json, etc if it already exists, unless it's package-lock.json/npm-shrinkwrap.json. (we need to update package-lock.json as the server build uses npm ci which requires package-lock.json to be in sync with package.json)\n            const isPackageLock = path.basename(dest).toLowerCase() == \"package-lock.json\";\n            const isNpmShrinkWrap = path.basename(dest).toLowerCase() == \"npm-shrinkwrap.json\";\n\n            if(fs.existsSync(dest) || isPackageLock || isNpmShrinkWrap)\n            {\n                const folderPath = path.dirname(dest);\n                if (!fs.existsSync(folderPath)) {\n                    console.log(`Creating folder ${folderPath}`);\n                    shell.mkdir('-p', folderPath);\n                }\n\n                console.log(`Copying ${candidatePath} to ${dest}`);\n                fs.copyFileSync(candidatePath, dest);\n            }\n        });\n    }\n}\n\nexports.syncGeneratedFilesWrapper = syncGeneratedFilesWrapper;\n\n//------------------------------------------------------------------------------\n"
        },
        {
          "name": "make.js",
          "type": "blob",
          "size": 44.49609375,
          "content": "// parse command line options\nvar argv = require('minimist')(process.argv.slice(2));\n\nif (process.env.IncludeLocalPackagesBuildConfigTest === \"1\") {\n    argv.includeLocalPackagesBuildConfig=true;\n}\n\n// modules\nvar fs = require('fs');\nvar os = require('os');\nvar path = require('path');\nvar semver = require('semver');\nvar util = require('./make-util');\nvar admzip = require('adm-zip');\n\n// util functions\nvar cd = util.cd;\nvar cp = util.cp;\nvar mkdir = util.mkdir;\nvar rm = util.rm;\nvar test = util.test;\nvar run = util.run;\nvar banner = util.banner;\nvar rp = util.rp;\nvar fail = util.fail;\nvar ensureExists = util.ensureExists;\nvar pathExists = util.pathExists;\nvar buildNodeTask = util.buildNodeTask;\nvar addPath = util.addPath;\nvar copyTaskResources = util.copyTaskResources;\nvar matchFind = util.matchFind;\nvar matchCopy = util.matchCopy;\nvar ensureTool = util.ensureTool;\nvar assert = util.assert;\nvar getExternalsAsync = util.getExternalsAsync;\nvar createResjson = util.createResjson;\nvar createTaskLocJson = util.createTaskLocJson;\nvar validateTask = util.validateTask;\nvar fileToJson = util.fileToJson;\nvar createYamlSnippetFile = util.createYamlSnippetFile;\nvar createMarkdownDocFile = util.createMarkdownDocFile;\nvar getTaskNodeVersion = util.getTaskNodeVersion;\nvar writeUpdatedsFromGenTasks = false;\n\n// global paths\nvar buildPath = path.join(__dirname, '_build');\nvar buildTasksPath = path.join(__dirname, '_build', 'Tasks');\nvar buildTestsPath = path.join(__dirname, '_build', 'Tests');\nvar buildTasksCommonPath = path.join(__dirname, '_build', 'Tasks', 'Common');\nvar testsLegacyPath = path.join(__dirname, 'Tests-Legacy');\nvar tasksPath = path.join(__dirname, 'Tasks');\nvar testsPath = path.join(__dirname, 'Tests');\nvar testPath = path.join(__dirname, '_test');\nvar legacyTestTasksPath = path.join(__dirname, '_test', 'Tasks');\nvar testTestsLegacyPath = path.join(__dirname, '_test', 'Tests-Legacy');\nvar binPath = path.join(__dirname, 'node_modules', '.bin');\nvar makeOptionsPath = path.join(__dirname, 'make-options.json');\nvar gendocsPath = path.join(__dirname, '_gendocs');\nvar packagePath = path.join(__dirname, '_package');\nvar coverageTasksPath = path.join(buildPath, 'coverage');\nvar baseConfigToolPath = path.join(__dirname, 'BuildConfigGen');\nvar genTaskPath = path.join(__dirname, '_generated');\nvar genTaskPathLocal = path.join(__dirname, '_generated_local');\nvar genTaskCommonPath = path.join(__dirname, '_generated', 'Common');\nvar genTaskCommonPathLocal = path.join(__dirname, '_generated_local', 'Common');\nvar taskLibPath = path.join(__dirname, 'task-lib/node');\nvar tasksCommonPath = path.join(__dirname, 'tasks-common');\n\nvar CLI = {};\n\n// node min version\nvar minNodeVer = '10.24.1';\nif (semver.lt(process.versions.node, minNodeVer)) {\n    fail('requires node >= ' + minNodeVer + '.  installed: ' + process.versions.node);\n}\n\n// Node 14 is supported by the build system, but not currently by the agent. Block it for now\nvar supportedNodeTargets = [\"Node\", \"Node10\"/*, \"Node14\"*/];\nvar node10Version = '10.24.1';\nvar node20Version = '20.17.0';\n\n// add node modules .bin to the path so we can dictate version of tsc etc...\nif (!test('-d', binPath)) {\n    fail('node modules bin not found.  ensure npm install has been run.');\n}\naddPath(binPath);\n\n// resolve list of tasks\nvar taskList;\nif (argv.task) {\n    // find using --task parameter\n    taskList = matchFind(argv.task, tasksPath, { noRecurse: true, matchBase: true })\n        .map(function (item) {\n            return path.basename(item);\n        });\n\n    // If base tasks was not found, try to find the task in the _generated tasks folder\n    if (taskList.length == 0 && fs.existsSync(genTaskPath)) {\n        taskList = matchFind(argv.task, genTaskPath, { noRecurse: true, matchBase: true })\n            .map(function (item) {\n                return path.basename(item);\n            });\n    }\n\n    if (!taskList.length) {\n        fail('Unable to find any tasks matching pattern ' + argv.task);\n    }\n} else {\n    // load the default list\n    taskList = fileToJson(makeOptionsPath).tasks;\n\n    if (argv.skipToTask)\n    {\n        var skipToTaskIndex = taskList.indexOf(argv.skipToTask);\n\n        if (skipToTaskIndex==-1)\n        {\n            fail('argv.skipToTask (' + argv.skipToTask + ') not found');\n        }\n\n        taskList = taskList.slice(skipToTaskIndex);\n    }\n}\n\n// set the runner options. should either be empty or a comma delimited list of test runners.\n// for example: ts OR ts,ps\n//\n// note, currently the ts runner igores this setting and will always run.\nprocess.env['TASK_TEST_RUNNER'] = argv.runner || '';\n\nfunction getTaskList(taskList, includeLocalPackagesBuildConfig) {\n    let tasksToBuild = taskList;\n\n    if (!fs.existsSync(genTaskPath)) return tasksToBuild;\n\n    var generatedTaskFolders = fs.readdirSync(genTaskPath);\n\n    if(includeLocalPackagesBuildConfig)\n    {\n        if(fs.existsSync(genTaskPathLocal))\n        {\n            generatedTaskFolders = generatedTaskFolders.concat(fs.readdirSync(genTaskPathLocal));\n        }\n    }\n\n    generatedTaskFolders = generatedTaskFolders.filter((taskName) => {\n            return !taskName.endsWith(\".versionmap.txt\") \n                && (\n                        (((includeLocalPackagesBuildConfig && fs.existsSync(path.join(genTaskPath, taskName))) || !includeLocalPackagesBuildConfig) && fs.statSync(path.join(genTaskPath, taskName)).isDirectory()) \n                        || (includeLocalPackagesBuildConfig && fs.statSync(path.join(genTaskPathLocal, taskName)).isDirectory())\n                );\n        });\n\n    taskList.forEach((taskName) => {\n        generatedTaskFolders.forEach((generatedTaskName) => {\n            if (taskName !== generatedTaskName && generatedTaskName.startsWith(taskName)) {\n                tasksToBuild.push(generatedTaskName);\n            }\n        });\n    });\n\n    return tasksToBuild.sort();\n}\n\nfunction ensureBuildTasksAndRemoveTestPath() {\n    if (!fs.existsSync(buildTasksPath)) {\n        mkdir('-p', buildTasksPath);\n    }\n    rm('-Rf', testPath);\n};\n\nCLI.clean = function() {\n    rm('-Rf', buildPath);\n    ensureBuildTasksAndRemoveTestPath();\n};\n\n\n//\n// Generate documentation (currently only YAML snippets)\n// ex: node make.js gendocs\n// ex: node make.js gendocs --task ShellScript\n//\nCLI.gendocs = function() {\n    rm('-Rf', gendocsPath);\n    mkdir('-p', gendocsPath);\n    console.log();\n    console.log('> generating docs');\n\n    taskList.forEach(function(taskName) {\n        var taskPath = path.join(tasksPath, taskName);\n        ensureExists(taskPath);\n\n        // load the task.json\n        var taskJsonPath = path.join(taskPath, 'task.json');\n        if (test('-f', taskJsonPath)) {\n            var taskDef = fileToJson(taskJsonPath);\n            validateTask(taskDef);\n\n            // create YAML snippet Markdown\n            var yamlOutputFilename = taskName + '.md';\n            createYamlSnippetFile(taskDef, gendocsPath, yamlOutputFilename);\n\n            // create Markdown documentation file\n            var mdDocOutputFilename = taskName + '.md';\n            createMarkdownDocFile(taskDef, taskJsonPath, gendocsPath, mdDocOutputFilename);\n        }\n    });\n\n    banner('Generating docs successful', true);\n}\n\n//\n// ex: node make.js build\n// ex: node make.js build --task ShellScript\n//\nCLI.build = async function(/** @type {{ task: string }} */ argv) \n{\n    if (process.env.TF_BUILD) {\n        fail('Please use serverBuild for CI builds for proper validation');\n    }\n\n    writeUpdatedsFromGenTasks = true;\n    await CLI.serverBuild(argv);\n}\n\nCLI.buildandtest = async function (/** @type {{ task: string }} */ argv) {\n    await CLI.build(argv);\n    await CLI.test(argv);\n}\n\nCLI.serverBuild = async function(/** @type {{ task: string }} */ argv) {\n    ensureBuildTasksAndRemoveTestPath();\n    ensureTool('tsc', '--version', 'Version 4.0.2');\n    ensureTool('npm', '--version', function (output) {\n        if (semver.lt(output, '5.6.0')) {\n            fail('Expected 5.6.0 or higher. To fix, run: npm install -g npm');\n        }\n    });\n\n    // Need to validate generated tasks first\n    if (!argv.skipPrebuildSteps)\n    {\n        const makeOptions = fileToJson(makeOptionsPath);\n\n        // Verify generated files across tasks are up-to-date\n        util.processGeneratedTasks(baseConfigToolPath, taskList, makeOptions, writeUpdatedsFromGenTasks, argv.sprint, argv['debug-agent-dir'], argv.includeLocalPackagesBuildConfig);\n    }\n\n    if (argv.includeLocalPackagesBuildConfig)\n    {\n        if (!argv.skipPrebuildSteps)\n        {\n            // temp: clone for now prior to merging these as subtrees\n            if (!test('-d', 'task-lib')) {\n                run(\"git clone https://github.com/microsoft/azure-pipelines-task-lib task-lib\");\n            }\n\n            if (!test('-d', 'tasks-common')) {\n                run(\"git clone https://github.com/microsoft/azure-pipelines-tasks-common-packages tasks-common\");\n            }\n\n            cd(taskLibPath);\n            run(\"git checkout dev/merlynop/mockfix\");\n            run(\"git pull\");\n\n            cd(tasksCommonPath);\n            run(\"git pull\");\n            // end temp\n\n            // build task-lib\n            cd(taskLibPath);\n            run(\"npm install\", /*inheritStreams:*/true);\n            run(\"node make.js build\", /*inheritStreams:*/true);\n\n            \n            await util.installNodeAsync('20');\n            // build task-lib\n            cd(tasksCommonPath);\n            run(\"npm install\", /*inheritStreams:*/true);\n            run(\"node make.js --build\", /*inheritStreams:*/true);\n        }\n    }\n\n    const allTasks = getTaskList(taskList, argv.includeLocalPackagesBuildConfig);\n\n    // Wrap build function  to store files that changes after the build \n    const buildTaskWrapped = util.syncGeneratedFilesWrapper(buildTaskAsync, genTaskPath, genTaskPathLocal, argv.includeLocalPackagesBuildConfig, writeUpdatedsFromGenTasks);\n    const { allTasksNode20, allTasksDefault } = allTasks.\n        reduce((res, taskName) => {\n            if (getNodeVersion(taskName, argv.includeLocalPackagesBuildConfig) == 20) {\n                res.allTasksNode20.push(taskName)\n            } else {\n                res.allTasksDefault.push(taskName)\n            }\n\n            return res;\n        }, {allTasksNode20: [], allTasksDefault: []})\n    \n    if (allTasksNode20.length > 0) {\n        await util.installNodeAsync('20');\n        ensureTool('node', '--version', `v${node20Version}`);\n        for (const taskName of allTasksNode20) {\n            await buildTaskWrapped(taskName, allTasksNode20.length, 20, !writeUpdatedsFromGenTasks);\n        }\n    } \n    if (allTasksDefault.length > 0) {\n       await util.installNodeAsync('10');\n        ensureTool('node', '--version', `v${node10Version}`);\n        for (const taskName of allTasksDefault) {\n            await buildTaskWrapped(taskName, allTasksNode20.length, 10, !writeUpdatedsFromGenTasks);\n        }\n    }\n\n    // Remove Commons from _generated folder as it is not required\n    if (fs.existsSync(genTaskCommonPath)) {\n        rm('-Rf', genTaskCommonPath);\n    }\n\n    if (fs.existsSync(genTaskCommonPathLocal))\n    {\n        rm('-Rf', genTaskCommonPathLocal);\n    }\n\n    banner('Build successful', true);\n}\n\nfunction getNodeVersion (taskName, includeLocalPackagesBuildConfig) {\n    let taskPath = tasksPath;\n    // if task exists inside gen folder prefere it\n    if (fs.existsSync(path.join(genTaskPath, taskName))) {\n        taskPath = genTaskPath;\n    } \n    else if(includeLocalPackagesBuildConfig)\n    {\n        if(fs.existsSync(path.join(genTaskPathLocal, taskName)))\n        {\n            taskPath = genTaskPathLocal;\n        }\n    }\n\n    // get node runner from task.json\n    const handlers = getTaskNodeVersion(taskPath, taskName);\n    if (handlers.includes(20)) return 20;\n\n    return 10;\n}\n\nasync function buildTaskAsync(taskName, taskListLength, nodeVersion, isServerBuild = false) {\n    let isGeneratedTask = false;\n    banner(`Building task ${taskName} using Node.js ${nodeVersion}`);\n    const removeNodeModules = taskListLength > 1;\n\n    // If we have the task in generated folder, prefer to build from there and add all generated tasks which starts with task name\n    var taskPath = path.join(genTaskPath, taskName);\n    var localTaskPath = path.join(genTaskPathLocal, taskName);\n    if (fs.existsSync(taskPath)) {\n        // Need to add all tasks which starts with task name\n        console.log('Found generated task: ' + taskName);\n        isGeneratedTask = true;\n    } \n    else if (argv.includeLocalPackagesBuildConfig && fs.existsSync(localTaskPath))\n    {\n        console.log('Found local generated task: ' + taskName);\n        isGeneratedTask = true;\n        taskPath = localTaskPath;\n    } \n    else \n    {\n        taskPath = path.join(tasksPath, taskName);\n    }\n\n    ensureExists(taskPath);\n\n    // load the task.json\n    var outDir;\n    var shouldBuildNode = test('-f', path.join(taskPath, 'tsconfig.json'));\n    var taskJsonPath = path.join(taskPath, 'task.json');\n    if (test('-f', taskJsonPath)) {\n        var taskDef = fileToJson(taskJsonPath);\n        validateTask(taskDef);\n\n        // fixup the outDir (required for relative pathing in legacy L0 tests)\n        outDir = path.join(buildTasksPath, taskName);\n\n        if(fs.existsSync(outDir))\n        {\n            console.log('Remove existing outDir: ' + outDir);\n            rm('-rf', outDir);\n        }\n\n        // create loc files\n        createTaskLocJson(taskPath);\n        createResjson(taskDef, taskPath);\n\n        // determine the type of task\n        shouldBuildNode = shouldBuildNode || supportedNodeTargets.some(node => taskDef.execution.hasOwnProperty(node));\n    } else {\n        outDir = path.join(buildTasksPath, path.basename(taskPath));\n    }\n\n    mkdir('-p', outDir);\n\n    // get externals\n    var taskMakePath = path.join(taskPath, 'make.json');\n    var taskMake = test('-f', taskMakePath) ? fileToJson(taskMakePath) : {};\n    if (taskMake.hasOwnProperty('externals')) {\n        console.log('');\n        console.log('> getting task externals');\n        await getExternalsAsync(taskMake.externals, outDir);\n    }\n\n    //--------------------------------\n    // Common: build, copy, install\n    //--------------------------------\n    var commonPacks = [];\n    if (taskMake.hasOwnProperty('common')) {\n        var common = taskMake['common'];\n\n        for (const mod of common) {\n            var modPath = path.join(taskPath, mod['module']);\n            var modName = path.basename(modPath);\n            var modOutDir = path.join(buildTasksCommonPath, modName);\n\n            if (!test('-d', modOutDir)) {\n                banner('Building module ' + modPath, true);\n\n                // Ensure that Common folder exists for _generated or _generated_local tasks, otherwise copy it from Tasks folder\n                if (!fs.existsSync(genTaskCommonPath) && isGeneratedTask) {\n                    cp('-Rf', path.resolve(tasksPath, \"Common\"), genTaskCommonPath);\n                }\n                \n                if(argv.includeLocalPackagesBuildConfig)\n                {\n                    if (!fs.existsSync(genTaskCommonPathLocal) && isGeneratedTask) {\n                        cp('-Rf', path.resolve(tasksPath, \"Common\"), genTaskCommonPathLocal);\n                    }\n                }   \n\n                mkdir('-p', modOutDir);\n\n                // create loc files\n                var modJsonPath = path.join(modPath, 'module.json');\n                if (test('-f', modJsonPath)) {\n                    createResjson(fileToJson(modJsonPath), modPath);\n                }\n\n                // npm install and compile\n                if ((mod.type === 'node' && mod.compile == true) || test('-f', path.join(modPath, 'tsconfig.json'))) {\n                    buildNodeTask(modPath, modOutDir, isServerBuild);\n                }\n\n                // copy default resources and any additional resources defined in the module's make.json\n                console.log();\n                console.log('> copying module resources');\n                var modMakePath = path.join(modPath, 'make.json');\n                var modMake = test('-f', modMakePath) ? fileToJson(modMakePath) : {};\n                copyTaskResources(modMake, modPath, modOutDir);\n\n                // get externals\n                if (modMake.hasOwnProperty('externals')) {\n                    console.log('');\n                    console.log('> getting module externals');\n                    await getExternalsAsync(modMake.externals, modOutDir);\n                }\n\n                if (mod.type === 'node' && mod.compile == true || test('-f', path.join(modPath, 'package.json'))) {\n                    var commonPack = util.getCommonPackInfo(modOutDir);\n\n                    // assert the pack file does not already exist (name should be unique)\n                    if (test('-f', commonPack.packFilePath)) {\n                        fail(`Pack file already exists: ${commonPack.packFilePath}`);\n                    }\n\n                    // pack the Node module. a pack file is required for dedupe.\n                    // installing from a folder creates a symlink, and does not dedupe.\n                    cd(path.dirname(modOutDir));\n                    run(`npm pack ./${path.basename(modOutDir)}`);\n                }\n            }\n\n            // store the npm pack file info\n            if (mod.type === 'node' && mod.compile == true) {\n                commonPacks.push(util.getCommonPackInfo(modOutDir));\n            // copy ps module resources to the task output dir\n            } else if (mod.type === 'ps') {\n                console.log();\n                console.log('> copying ps module to task');\n                var dest;\n                if (mod.hasOwnProperty('dest')) {\n                    dest = path.join(outDir, mod.dest, modName);\n                } else {\n                    dest = path.join(outDir, 'ps_modules', modName);\n                }\n\n                matchCopy('!Tests', modOutDir, dest, { noRecurse: true, matchBase: true });\n            }\n        }\n\n        // npm install the common modules to the task dir\n        if (commonPacks.length) {\n            cd(taskPath);\n            var installPaths = commonPacks.map(function (commonPack) {\n                return `file:${path.relative(taskPath, commonPack.packFilePath)}`;\n            });\n            run(`npm install --save-exact ${installPaths.join(' ')}`);\n        }\n    }\n\n    // build Node task\n    if (shouldBuildNode) {\n        buildNodeTask(taskPath, outDir, isServerBuild);\n    }\n\n    // remove the hashes for the common packages, they change every build\n    if (commonPacks.length) {\n        var lockFilePath = path.join(taskPath, 'package-lock.json');\n        if (!test('-f', lockFilePath)) {\n            lockFilePath = path.join(taskPath, 'npm-shrinkwrap.json');\n        }\n        var packageLock = fileToJson(lockFilePath);\n        var dependencies = packageLock.dependencies || packageLock.packages;\n        Object.keys(dependencies).forEach(function (dependencyName) {\n            commonPacks.forEach(function (commonPack) {\n                if (dependencyName == commonPack.packageName || dependencyName == `node_modules/${commonPack.packageName}`) {\n                    delete dependencies[dependencyName].integrity;\n                }\n            });\n        });\n        fs.writeFileSync(lockFilePath, JSON.stringify(packageLock, null, '  '));\n    }\n\n    // copy default resources and any additional resources defined in the task's make.json\n    console.log();\n    console.log('> copying task resources');\n    copyTaskResources(taskMake, taskPath, outDir);\n\n    if (removeNodeModules) {\n        const taskNodeModulesPath = path.join(taskPath, 'node_modules');\n\n        if (fs.existsSync(taskNodeModulesPath)) {\n            console.log('\\n> removing node modules');\n            rm('-Rf', taskNodeModulesPath);\n        }\n\n        const taskTestsNodeModulesPath = path.join(taskPath, 'Tests', 'node_modules');\n\n        if (fs.existsSync(taskTestsNodeModulesPath)) {\n            console.log('\\n> removing task tests node modules');\n            rm('-Rf', taskTestsNodeModulesPath);\n        }\n    }\n\n    // remove duplicated task libs node modules from build tasks.\n    var buildTasksNodeModules = path.join(buildTasksPath, taskName, 'node_modules');\n    var duplicateTaskLibPaths = [\n        'azure-pipelines-tasks-java-common', 'azure-pipelines-tasks-codecoverage-tools', 'azure-pipelines-tasks-codeanalysis-common',\n        'azure-pipelines-tool-lib', 'azure-pipelines-tasks-utility-common', 'azure-pipelines-tasks-packaging-common', 'artifact-engine',\n        'azure-pipelines-tasks-azure-arm-rest'\n    ];\n    for (var duplicateTaskPath of duplicateTaskLibPaths) {\n        const buildTasksDuplicateNodeModules = path.join(buildTasksNodeModules, duplicateTaskPath, 'node_modules', 'azure-pipelines-task-lib');\n        if (fs.existsSync(buildTasksDuplicateNodeModules)) {\n            console.log(`\\n> removing duplicated task-lib node modules in ${buildTasksDuplicateNodeModules}`);\n            rm('-Rf', buildTasksDuplicateNodeModules);\n        }\n    }\n}\n\n//\n// will run tests for the scope of tasks being built\n// npm test\n// node make.js test\n// node make.js test --task ShellScript --suite L0\n//\nCLI.test = async function(/** @type {{ suite: string; node: string; task: string }} */ argv) {\n    var minIstanbulVersion = '20';\n    ensureTool('tsc', '--version', 'Version 4.0.2');\n    ensureTool('mocha', '--version', '6.2.3');\n\n    process.env['SYSTEM_DEBUG'] = 'true';\n\n    // build the general tests and ps test infra\n    rm('-Rf', buildTestsPath);\n    mkdir('-p', path.join(buildTestsPath));\n    cd(testsPath);\n    run(`tsc --rootDir ${testsPath} --outDir ${buildTestsPath}`);\n    console.log();\n    console.log('> copying ps test lib resources');\n    mkdir('-p', path.join(buildTestsPath, 'lib'));\n    matchCopy(path.join('**', '@(*.ps1|*.psm1)'), path.join(testsPath, 'lib'), path.join(buildTestsPath, 'lib'));\n\n    var suiteType = argv.suite || 'L0';\n    async function runTaskTests(taskName, results) {\n        banner('Testing: ' + taskName);\n        // find the tests\n        var nodeVersions = argv.node ? new Array(argv.node) : [Math.max(...getTaskNodeVersion(buildTasksPath, taskName))];\n        var pattern1 = path.join(buildTasksPath, taskName, 'Tests', suiteType + '.js');\n        var pattern2 = path.join(buildTasksPath, 'Common', taskName, 'Tests', suiteType + '.js');\n        var taskPath = path.join('**', '_build', 'Tasks', taskName, \"**\", \"*.js\").replace(/\\\\/g, '/');\n        var isNodeTask = util.isNodeTask(buildTasksPath, taskName);\n\n        var isReportWasFormed = false;\n        var testsSpec = [];\n\n        if (fs.existsSync(pattern1)) {\n            testsSpec.push(pattern1);\n        }\n        if (fs.existsSync(pattern2)) {\n            testsSpec.push(pattern2);\n        }\n\n        if (testsSpec.length == 0) {\n            console.warn(`Unable to find tests using the following patterns: ${JSON.stringify([pattern1, pattern2])}`);\n            return;\n        }\n\n        for (let nodeVersion of nodeVersions) {\n            try {\n                nodeVersion = String(nodeVersion);\n                banner('Run Mocha Suits for node ' + nodeVersion);\n                // setup the version of node to run the tests\n                await util.installNodeAsync(nodeVersion);\n\n\n                if (isNodeTask && !isReportWasFormed && nodeVersion >= 10) {\n                    run('nyc --all -n ' + taskPath + ' --report-dir ' + coverageTasksPath + ' mocha ' + testsSpec.join(' '), /*inheritStreams:*/true, /*noHeader*/ false,  /*throwOnError*/ true);\n                    util.renameCodeCoverageOutput(coverageTasksPath, taskName);\n                    isReportWasFormed = true;\n                }\n                else {\n                    run('mocha ' + testsSpec.join(' '), /*inheritStreams:*/true, /*noHeader*/ false,  /*throwOnError*/ true);\n                }\n            }  catch (e) {\n                console.error(e);\n                results.push({ taskName: taskName, result: `NodeVersion: ${nodeVersion} Error: ${e}` });\n            }\n        }\n    }\n\n    const results = [];\n\n    // Run tests for each task that exists\n    const allTasks = getTaskList(taskList, argv.includeLocalPackagesBuildConfig);\n\n    for (const taskName of allTasks) {\n        var taskPath = path.join(buildTasksPath, taskName);\n        if (fs.existsSync(taskPath)) {\n            await runTaskTests(taskName, results);\n        }\n    };\n\n    if (!argv.task) {\n        banner('Running common library tests');\n        var commonLibPattern = path.join(buildTasksPath, 'Common', '*', 'Tests', suiteType + '.js');\n        var specs = [];\n        if (matchFind(commonLibPattern, buildTasksPath).length > 0) {\n            specs.push(commonLibPattern);\n        }\n        if (specs.length > 0) {\n            // setup the version of node to run the tests\n            await util.installNodeAsync(argv.node);\n            try{\n                run('mocha ' + specs.join(' '), /*inheritStreams:*/true, /*noHeader*/ false,  /*throwOnError*/ true);\n            }catch(e){\n                console.error(e);\n                results.push({ taskName: 'commonLibraryTests', result: `NodeVersion: ${nodeVersion} Error: ${error.message}` });\n            }\n        } else {\n            console.warn(\"No common library tests found\");\n        }\n    }\n\n    // Run common tests\n    banner('Running common tests');\n    var commonPattern = path.join(buildTestsPath, suiteType + '.js');\n    var specs = matchFind(commonPattern, buildTestsPath, { noRecurse: true });\n    if (specs.length > 0) {\n        // setup the version of node to run the tests\n        await util.installNodeAsync(argv.node);\n        try\n        {\n            run('mocha ' + specs.join(' '), /*inheritStreams:*/true, /*noHeader*/ false,  /*throwOnError*/ true);\n        }catch(e){\n            console.error(e);\n            results.push({ taskName: 'common tests', result: `NodeVersion: ${nodeVersion} Error: ${error.message}` });\n        }\n    } else {\n        console.warn(\"No common tests found\");\n    }\n\n    try {\n        // Installing node version 10 to run code coverage report, since common library tests run under node 6,\n        // which is incompatible with nyc\n        await util.installNodeAsync(minIstanbulVersion);\n        util.rm(path.join(coverageTasksPath, '*coverage-summary.json'));\n        util.run(`nyc merge ${coverageTasksPath} ${path.join(coverageTasksPath, 'mergedcoverage.json')}`, true);\n        util.rm(path.join(coverageTasksPath, '*-coverage.json'));\n        util.run(`nyc report -t ${coverageTasksPath} --report-dir ${coverageTasksPath} --reporter=cobertura`, true);\n        util.rm(path.join(coverageTasksPath, 'mergedcoverage.json'));\n    } catch (e) {\n        console.log('Error while generating coverage report')\n    }\n\n    var hasErrors = false;\n    results.forEach(({ taskName, result }) => {\n        hasErrors = true;\n        console.log(`Task: ${taskName}, Result: ${result}`);\n    });    \n\n    if (hasErrors) {\n        console.log('Errors occurred during tests');\n        process.exit(1);\n    }\n}\n\n//\n// node make.js testLegacy\n// node make.js testLegacy --suite L0/XCode\n//\n\nCLI.testLegacy = async function(/** @type {{ suite: string; node: string; task: string }} */ argv) {\n    ensureTool('tsc', '--version', 'Version 4.0.2');\n    ensureTool('mocha', '--version', '6.2.3');\n\n    if (argv.suite) {\n        fail('The \"suite\" parameter has been deprecated. Use the \"task\" parameter instead.');\n    }\n\n    // clean\n    console.log('removing _test');\n    rm('-Rf', testPath);\n\n    // copy the L0 source files for each task; copy the layout for each task\n    console.log();\n    console.log('> copying tasks');\n    taskList.forEach(function (taskName) {\n        var testCopySource = path.join(testsLegacyPath, 'L0', taskName);\n        // copy the L0 source files if exist\n        if (test('-e', testCopySource)) {\n            console.log('copying ' + taskName);\n            var testCopyDest = path.join(testTestsLegacyPath, 'L0', taskName);\n            matchCopy('*', testCopySource, testCopyDest, { noRecurse: true, matchBase: true });\n\n            // copy the task layout\n            var taskCopySource = path.join(buildTasksPath, taskName);\n            var taskCopyDest = path.join(legacyTestTasksPath, taskName);\n            matchCopy('*', taskCopySource, taskCopyDest, { noRecurse: true, matchBase: true });\n        }\n\n        // copy each common-module L0 source files if exist\n        var taskMakePath = path.join(tasksPath, taskName, 'make.json');\n        var taskMake = test('-f', taskMakePath) ? fileToJson(taskMakePath) : {};\n        if (taskMake.hasOwnProperty('common')) {\n            var common = taskMake['common'];\n            common.forEach(function(mod) {\n                // copy the common-module L0 source files if exist and not already copied\n                var modName = path.basename(mod['module']);\n                console.log('copying ' + modName);\n                var modTestCopySource = path.join(testsLegacyPath, 'L0', `Common-${modName}`);\n                var modTestCopyDest = path.join(testTestsLegacyPath, 'L0', `Common-${modName}`);\n                if (test('-e', modTestCopySource) && !test('-e', modTestCopyDest)) {\n                    matchCopy('*', modTestCopySource, modTestCopyDest, { noRecurse: true, matchBase: true });\n                }\n                var modCopySource = path.join(buildTasksCommonPath, modName);\n                var modCopyDest = path.join(legacyTestTasksPath, 'Common', modName);\n                if (test('-e', modCopySource) && !test('-e', modCopyDest)) {\n                    // copy the common module layout\n                    matchCopy('*', modCopySource, modCopyDest, { noRecurse: true, matchBase: true });\n                }\n            });\n        }\n    });\n\n    // short-circuit if no tests\n    if (!test('-e', testTestsLegacyPath)) {\n        banner('no legacy tests found', true);\n        return;\n    }\n\n    // copy the legacy test infra\n    console.log();\n    console.log('> copying legacy test infra');\n    matchCopy('@(definitions|lib|tsconfig.json)', testsLegacyPath, testTestsLegacyPath, { noRecurse: true, matchBase: true });\n\n    // copy the lib tests when running all legacy tests\n    if (!argv.task) {\n        matchCopy('*', path.join(testsLegacyPath, 'L0', 'lib'), path.join(testTestsLegacyPath, 'L0', 'lib'), { noRecurse: true, matchBase: true });\n    }\n\n    // compile legacy L0 and lib\n    cd(testTestsLegacyPath);\n    run('tsc --rootDir ' + testTestsLegacyPath);\n\n    // create a test temp dir - used by the task runner to copy each task to an isolated dir\n    var tempDir = path.join(testTestsLegacyPath, 'Temp');\n    process.env['TASK_TEST_TEMP'] = tempDir;\n    mkdir('-p', tempDir);\n\n    // suite paths\n    var testsSpec = matchFind(path.join('**', '_suite.js'), path.join(testTestsLegacyPath, 'L0'));\n    if (!testsSpec.length) {\n        fail(`Unable to find tests using the pattern: ${path.join('**', '_suite.js')}`);\n    }\n\n    // setup the version of node to run the tests\n    await util.installNodeAsync(argv.node);\n\n    // mocha doesn't always return a non-zero exit code on test failure. when only\n    // a single suite fails during a run that contains multiple suites, mocha does\n    // not appear to always return non-zero. as a workaround, the following code\n    // creates a wrapper suite with an \"after\" hook. in the after hook, the state\n    // of the runnable context is analyzed to determine whether any tests failed.\n    // if any tests failed, log a ##vso command to fail the build.\n    var testsSpecPath = ''\n    var testsSpecPath = path.join(testTestsLegacyPath, 'testsSpec.js');\n    var contents = 'var __suite_to_run;' + os.EOL;\n    contents += 'describe(\\'Legacy L0\\', function (__outer_done) {' + os.EOL;\n    contents += '    after(function (done) {' + os.EOL;\n    contents += '        var failedCount = 0;' + os.EOL;\n    contents += '        var suites = [ this._runnable.parent ];' + os.EOL;\n    contents += '        while (suites.length) {' + os.EOL;\n    contents += '            var s = suites.pop();' + os.EOL;\n    contents += '            suites = suites.concat(s.suites); // push nested suites' + os.EOL;\n    contents += '            failedCount += s.tests.filter(function (test) { return test.state != \"passed\" }).length;' + os.EOL;\n    contents += '        }' + os.EOL;\n    contents += '' + os.EOL;\n    contents += '        if (failedCount && process.env.TF_BUILD) {' + os.EOL;\n    contents += '            console.log(\"##vso[task.logissue type=error]\" + failedCount + \" test(s) failed\");' + os.EOL;\n    contents += '            console.log(\"##vso[task.complete result=Failed]\" + failedCount + \" test(s) failed\");' + os.EOL;\n    contents += '        }' + os.EOL;\n    contents += '' + os.EOL;\n    contents += '        done();' + os.EOL;\n    contents += '    });' + os.EOL;\n    testsSpec.forEach(function (itemPath) {\n        contents += `    __suite_to_run = require(${JSON.stringify(itemPath)});` + os.EOL;\n    });\n    contents += '});' + os.EOL;\n    fs.writeFileSync(testsSpecPath, contents);\n    run('mocha ' + testsSpecPath, /*inheritStreams:*/true);\n}\n\n//\n// node make.js package\n// This will take the built tasks and create the files we need to publish them.\n//\nCLI.package = function() {\n    banner('Starting package process...')\n\n    // START LOCAL CONFIG\n    // console.log('> Cleaning packge path');\n    // rm('-Rf', packagePath);\n    // TODO: Only need this when we run locally\n    //var layoutPath = util.createNonAggregatedZip(buildPath, packagePath);\n    // END LOCAL CONFIG\n    // Note: The local section above is needed when running layout locally due to discrepancies between local build and\n    //       slicing in CI. This will get cleaned up after we fully roll out and go to build only changed.\n\n    var layoutPath = path.join(packagePath, 'milestone-layout');\n    util.createNugetPackagePerTask(packagePath, layoutPath);\n}\n\n// used by CI that does official publish\nCLI.publish = function(/** @type {{ server: string; task: string }} */ argv) {\n    var server = argv.server;\n    assert(server, 'server');\n\n    // if task specified, skip\n    if (argv.task) {\n        banner('Task parameter specified. Skipping publish.');\n        return;\n    }\n\n    // get the branch/commit info\n    var refs = util.getRefs();\n\n    // test whether to publish the non-aggregated tasks zip\n    // skip if not the tip of a release branch\n    var release = refs.head.release;\n    var commit = refs.head.commit;\n    if (!release ||\n        !refs.releases[release] ||\n        commit != refs.releases[release].commit) {\n\n        // warn not publishing the non-aggregated\n        console.log(`##vso[task.logissue type=warning]Skipping publish for non-aggregated tasks zip. HEAD is not the tip of a release branch.`);\n    } else {\n        // store the non-aggregated tasks zip\n        var nonAggregatedZipPath = path.join(packagePath, 'non-aggregated-tasks.zip');\n        util.storeNonAggregatedZip(nonAggregatedZipPath, release, commit);\n    }\n\n    // resolve the nupkg path\n    var nupkgFile;\n    var nupkgDir = path.join(packagePath, 'pack-target');\n    if (!test('-d', nupkgDir)) {\n        fail('nupkg directory does not exist');\n    }\n\n    var fileNames = fs.readdirSync(nupkgDir);\n    if (fileNames.length != 1) {\n        fail('Expected exactly one file under ' + nupkgDir);\n    }\n\n    nupkgFile = path.join(nupkgDir, fileNames[0]);\n\n    // publish the package\n    ensureTool('nuget3.exe');\n    run(`nuget3.exe push ${nupkgFile} -Source ${server} -apikey Skyrise`);\n}\n\n\nvar agentPluginTaskNames = ['Cache', 'CacheBeta', 'DownloadPipelineArtifact', 'PublishPipelineArtifact'];\n// used to bump the patch version in task.json files\nCLI.bump = function() {\n    verifyAllAgentPluginTasksAreInSkipList();\n\n    taskList.forEach(function (taskName) {\n        // load files\n        var taskJsonPath = path.join(tasksPath, taskName, 'task.json');\n        var taskJson = JSON.parse(fs.readFileSync(taskJsonPath));\n\n        var taskLocJsonPath = path.join(tasksPath, taskName, 'task.loc.json');\n        var taskLocJson = JSON.parse(fs.readFileSync(taskLocJsonPath));\n\n        // skip agent plugin tasks\n        if(agentPluginTaskNames.indexOf(taskJson.name) > -1) {\n            return;\n        }\n\n        if (typeof taskJson.version.Patch != 'number') {\n            fail(`Error processing '${taskName}'. version.Patch should be a number.`);\n        }\n\n        taskJson.version.Patch = taskJson.version.Patch + 1;\n        taskLocJson.version.Patch = taskLocJson.version.Patch + 1;\n\n        const taskJsonStringified = JSON.stringify(taskJson, null, 2).replace(/(\\n|\\r\\n)/g, os.EOL);\n        fs.writeFileSync(taskJsonPath, taskJsonStringified);\n        const taskLocJsonStringified = JSON.stringify(taskLocJson, null, 2).replace(/(\\n|\\r\\n)/g, os.EOL);\n        fs.writeFileSync(taskLocJsonPath, taskLocJsonStringified);\n\n        // Check that task.loc and task.loc.json versions match\n        if ((taskJson.version.Major !== taskLocJson.version.Major) ||\n            (taskJson.version.Minor !== taskLocJson.version.Minor) ||\n            (taskJson.version.Patch !== taskLocJson.version.Patch)) {\n            console.log(`versions dont match for task '${taskName}', task json: ${JSON.stringify(taskJson.version)} task loc json: ${JSON.stringify(taskLocJson.version)}`);\n        }\n    });\n}\n\nCLI.getCommonDeps = function() {\n    var first = true;\n    var totalReferencesToCommonPackages = 0;\n    var commonCounts = {};\n    taskList.forEach(function (taskName) {\n        var commonDependencies = [];\n        var packageJsonPath = path.join(tasksPath, taskName, 'package.json');\n\n        if (fs.existsSync(packageJsonPath)) {\n            var packageJson = JSON.parse(fs.readFileSync(packageJsonPath));\n\n            if (first)\n            {\n                Object.values(packageJson.dependencies).forEach(function (v) {\n                    if (v.indexOf('Tasks/Common') !== -1)\n                    {\n                        var depName = v\n                            .replace('file:../../_build/Tasks/Common/', '')\n                            .replace('-0.1.0.tgz', '')\n                            .replace('-1.0.0.tgz', '')\n                            .replace('-1.0.1.tgz', '')\n                            .replace('-1.0.2.tgz', '')\n                            .replace('-1.1.0.tgz', '')\n                            .replace('-2.0.0.tgz', '')\n\n                        commonDependencies.push(depName);\n\n                        totalReferencesToCommonPackages++;\n\n                        if (commonCounts[depName]) {\n                            commonCounts[depName]++;\n                        } else {\n                            commonCounts[depName] = 1;\n                        }\n                    }\n                });\n            }\n        }\n\n        if (commonDependencies.length > 0)\n        {\n            console.log('----- ' + taskName + ' (' + commonDependencies.length + ') -----');\n\n            commonDependencies.forEach(function (dep) {\n                console.log(dep);\n            });\n        }\n    });\n\n    console.log('');\n    console.log('##### ##### ##### #####');\n    console.log('totalReferencesToCommonPackages: ' + totalReferencesToCommonPackages);\n    console.log('');\n\n    Object.keys(commonCounts).forEach(function (k) {\n        console.log(k + ': ' + commonCounts[k]);\n    });\n}\n\nfunction verifyAllAgentPluginTasksAreInSkipList() {\n    var missingTaskNames = [];\n\n    taskList.forEach(function (taskName) {\n        // load files\n        var taskJsonPath = path.join(tasksPath, taskName, 'task.json');\n        var taskJson = JSON.parse(fs.readFileSync(taskJsonPath));\n\n        if (taskJson.execution && taskJson.execution.AgentPlugin) {\n            if (agentPluginTaskNames.indexOf(taskJson.name) === -1 && missingTaskNames.indexOf(taskJson.name) === -1) {\n                missingTaskNames.push(taskJson.name);\n            }\n        }\n    });\n\n    if (missingTaskNames.length > 0) {\n        fail('The following tasks must be added to agentPluginTaskNames: ' + JSON.stringify(missingTaskNames));\n    }\n}\n\n// Merge all tasks in a build config to base tasks\n// e.g node make.js mergeBuildConfig --config Node20_225\n// This will 'merge' all tasks under build config Node20_225 into base tasks.\n// 1. Copy generated task to base task, delete generated files in  _generated/Task_Node20 and Tasks/taskname/_buildConfig/Node20.\n// 2. Update versionmap.txt file.\n// 3. Remove _buildConfigMapping section in task.json and task-loc.json\n// 4. Update the buildConfig section in make-option.json.  \nCLI.mergeBuildConfig = function(/** @type {{ config: string }} */ argv) {\n    var config = argv.config\n    banner(`Merging all tasks under ${config} build config into base tasks...`);\n    util.mergeBuildConfigIntoBaseTasks(config);\n}\n\n// Generate sprintly zip\n// This methods generate a zip file that contains the tip of all task major versions for the last sprint\n// Use:\n//   node make.js gensprintlyzip --sprint=m153 --outputdir=E:\\testing\\ --depxmlpath=C:\\Users\\stfrance\\Desktop\\tempdeps.xml\n//\n// Result:\n//   azure-pipelines.firstpartytasks.m153.zip\n//\n// The generated zip can be uploaded to an account using tfx cli and it will install all of the tasks contained in the zip.\n// The zip should be uploaded to the azure-pipelines-tasks repository\n//\n// Process:\n//\n//  We create a workspace folder to do all of our work in. This is created in the output directory. output-dir/workspace-GUID\n//  Inside here, we first create a package file based on the packages we want to download.\n//  Then nuget restore, then get zips, then create zip.\nCLI.gensprintlyzip = function(/** @type {{ sprint: string; outputdir: string; depxmlpath: string }} */ argv) {\n    var sprint = argv.sprint;\n    var outputDirectory = argv.outputdir;\n    var dependenciesXmlFilePath = argv.depxmlpath;\n    var taskFeedUrl = 'https://mseng.pkgs.visualstudio.com/_packaging/Codex-Deps/nuget/v3/index.json';\n\n    console.log('# Creating sprintly zip.');\n\n    console.log('\\n# Loading tasks from dependencies file.');\n    var dependencies = fs.readFileSync(dependenciesXmlFilePath, 'utf8');\n\n    var dependenciesArr = dependencies.split('\\n');\n    console.log(`Found ${dependenciesArr.length} dependencies.`);\n\n    var taskDependencies = [];\n    var taskStringArr = [];\n\n    dependenciesArr.forEach(function (currentDep) {\n        if (currentDep.indexOf('Mseng.MS.TF.DistributedTask.Tasks.') === -1) {\n            return;\n        }\n\n        taskStringArr.push(currentDep);\n\n        var depDetails = currentDep.split(\"\\\"\");\n        var name = depDetails[1];\n        var version = depDetails[3];\n\n        taskDependencies.push({ 'name': name, 'version': version });\n    });\n\n    console.log(`Found ${taskDependencies.length} task dependencies.`);\n\n    console.log('\\n# Downloading task nuget packages.');\n\n    var tempWorkspaceDirectory = `${outputDirectory}\\\\workspace-${Math.floor(Math.random() * 1000000000)}`;\n    console.log(`Creating temporary workspace directory ${tempWorkspaceDirectory}`);\n\n    fs.mkdirSync(tempWorkspaceDirectory);\n\n    console.log('Writing packages.config file');\n\n    var packagesConfigPath = `${tempWorkspaceDirectory}\\\\packages.config`;\n    var packagesConfigContent = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n';\n    packagesConfigContent += '<packages>\\n';\n\n    taskStringArr.forEach(function (taskString) {\n        packagesConfigContent += taskString;\n    });\n\n    packagesConfigContent += '</packages>';\n\n    fs.writeFileSync(packagesConfigPath, packagesConfigContent);\n    console.log(`Completed writing packages.json file. ${packagesConfigPath}`);\n\n    console.log('\\n# Restoring NuGet packages.');\n    run(`nuget restore ${tempWorkspaceDirectory} -source \"${taskFeedUrl}\" -packagesdirectory ${tempWorkspaceDirectory}\\\\packages`);\n    console.log('Restoring NuGet packages complete.');\n\n    console.log(`\\n# Creating sprintly zip.`);\n\n    var sprintlyZipContentsPath = `${tempWorkspaceDirectory}\\\\sprintly-zip`;\n    fs.mkdirSync(sprintlyZipContentsPath);\n\n    console.log('Sprintly zip folder created.');\n\n    console.log('Copying task zip files to sprintly zip folder.');\n    taskDependencies.forEach(function (taskDependency) {\n        var nameAndVersion = `${taskDependency.name}.${taskDependency.version}`;\n        var src = `${tempWorkspaceDirectory}\\\\packages\\\\${nameAndVersion}\\\\content\\\\task.zip`; // workspace-735475103\\packages\\Mseng.MS.TF.DistributedTask.Tasks.AndroidBuildV1.1.0.16\\content\\task.zip\n        var dest = `${sprintlyZipContentsPath}\\\\${nameAndVersion}.zip`; // workspace-735475103\\sprintly-zip\\\n\n        fs.copyFileSync(src, dest);\n    });\n    console.log('Copying task zip files to sprintly zip folder complete.');\n\n    console.log('Creating sprintly zip file from folder.');\n\n    var sprintlyZipPath = `${outputDirectory}azure-pipelines.firstpartytasks.${sprint}.zip`;\n\n    var zip = new admzip();\n    zip.addLocalFolder(sprintlyZipContentsPath);\n    zip.writeZip(sprintlyZipPath);\n\n    console.log('Creating sprintly zip file from folder complete.');\n    console.log('\\n# Cleaning up folders');\n    console.log(`Deleting temporary workspace directory ${tempWorkspaceDirectory}`);\n    rm('-Rf', tempWorkspaceDirectory);\n\n    console.log('\\n# Completed creating sprintly zip.');\n}\n\nvar command  = argv._[0];\n\nif (typeof CLI[command] !== 'function') {\n  fail(`Invalid CLI command: \"${command}\"\\r\\nValid commands: ${Object.keys(CLI).join(', ')}`);\n}\n\nCLI[command](argv);\n"
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 118.365234375,
          "content": "{\n  \"name\": \"Agent.Tasks\",\n  \"version\": \"0.6.0\",\n  \"lockfileVersion\": 1,\n  \"requires\": true,\n  \"dependencies\": {\n    \"@ampproject/remapping\": {\n      \"version\": \"2.3.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@ampproject/remapping/-/remapping-2.3.0.tgz\",\n      \"integrity\": \"sha1-7UQbb6YAByUgzhi0PSyMyMrsx/Q=\",\n      \"dev\": true,\n      \"requires\": {\n        \"@jridgewell/gen-mapping\": \"^0.3.5\",\n        \"@jridgewell/trace-mapping\": \"^0.3.24\"\n      }\n    },\n    \"@babel/code-frame\": {\n      \"version\": \"7.26.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@babel/code-frame/-/code-frame-7.26.2.tgz\",\n      \"integrity\": \"sha1-S1+rl9MzOO/5FiNQVfDrwh5XOoU=\",\n      \"dev\": true,\n      \"requires\": {\n        \"@babel/helper-validator-identifier\": \"^7.25.9\",\n        \"js-tokens\": \"^4.0.0\",\n        \"picocolors\": \"^1.0.0\"\n      }\n    },\n    \"@babel/compat-data\": {\n      \"version\": \"7.26.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@babel/compat-data/-/compat-data-7.26.2.tgz\",\n      \"integrity\": \"sha1-J4trE2ZFV96VuPNbkNlnhYULtW4=\",\n      \"dev\": true\n    },\n    \"@babel/core\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@babel/core/-/core-7.26.0.tgz\",\n      \"integrity\": \"sha1-14tgI8yPMRTM8EnrIZYT90p0e0A=\",\n      \"dev\": true,\n      \"requires\": {\n        \"@ampproject/remapping\": \"^2.2.0\",\n        \"@babel/code-frame\": \"^7.26.0\",\n        \"@babel/generator\": \"^7.26.0\",\n        \"@babel/helper-compilation-targets\": \"^7.25.9\",\n        \"@babel/helper-module-transforms\": \"^7.26.0\",\n        \"@babel/helpers\": \"^7.26.0\",\n        \"@babel/parser\": \"^7.26.0\",\n        \"@babel/template\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\",\n        \"@babel/types\": \"^7.26.0\",\n        \"convert-source-map\": \"^2.0.0\",\n        \"debug\": \"^4.1.0\",\n        \"gensync\": \"^1.0.0-beta.2\",\n        \"json5\": \"^2.2.3\",\n        \"semver\": \"^6.3.1\"\n      },\n      \"dependencies\": {\n        \"convert-source-map\": {\n          \"version\": \"2.0.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/convert-source-map/-/convert-source-map-2.0.0.tgz\",\n          \"integrity\": \"sha1-S1YPZJ/E6RjdCrdc9JYei8iC2Co=\",\n          \"dev\": true\n        },\n        \"semver\": {\n          \"version\": \"6.3.1\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/semver/-/semver-6.3.1.tgz\",\n          \"integrity\": \"sha1-VW0u+GiRRuRtzqS/3QlfNDTf/LQ=\",\n          \"dev\": true\n        }\n      }\n    },\n    \"@babel/generator\": {\n      \"version\": \"7.26.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@babel/generator/-/generator-7.26.2.tgz\",\n      \"integrity\": \"sha1-h7dYE77IeRYhDl4Bk5pMgj1rt08=\",\n      \"dev\": true,\n      \"requires\": {\n        \"@babel/parser\": \"^7.26.2\",\n        \"@babel/types\": \"^7.26.0\",\n        \"@jridgewell/gen-mapping\": \"^0.3.5\",\n        \"@jridgewell/trace-mapping\": \"^0.3.25\",\n        \"jsesc\": \"^3.0.2\"\n      }\n    },\n    \"@babel/helper-compilation-targets\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@babel/helper-compilation-targets/-/helper-compilation-targets-7.25.9.tgz\",\n      \"integrity\": \"sha1-Va8CXONlvjzcDBweVsavYXzoiHU=\",\n      \"dev\": true,\n      \"requires\": {\n        \"@babel/compat-data\": \"^7.25.9\",\n        \"@babel/helper-validator-option\": \"^7.25.9\",\n        \"browserslist\": \"^4.24.0\",\n        \"lru-cache\": \"^5.1.1\",\n        \"semver\": \"^6.3.1\"\n      },\n      \"dependencies\": {\n        \"semver\": {\n          \"version\": \"6.3.1\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/semver/-/semver-6.3.1.tgz\",\n          \"integrity\": \"sha1-VW0u+GiRRuRtzqS/3QlfNDTf/LQ=\",\n          \"dev\": true\n        }\n      }\n    },\n    \"@babel/helper-module-imports\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@babel/helper-module-imports/-/helper-module-imports-7.25.9.tgz\",\n      \"integrity\": \"sha1-5/jSBgLr2/nrvqCgdR+w8qQUFxU=\",\n      \"dev\": true,\n      \"requires\": {\n        \"@babel/traverse\": \"^7.25.9\",\n        \"@babel/types\": \"^7.25.9\"\n      }\n    },\n    \"@babel/helper-module-transforms\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@babel/helper-module-transforms/-/helper-module-transforms-7.26.0.tgz\",\n      \"integrity\": \"sha1-jOVOydWSaV5Y2EzYhLe1xqL97q4=\",\n      \"dev\": true,\n      \"requires\": {\n        \"@babel/helper-module-imports\": \"^7.25.9\",\n        \"@babel/helper-validator-identifier\": \"^7.25.9\",\n        \"@babel/traverse\": \"^7.25.9\"\n      }\n    },\n    \"@babel/helper-string-parser\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@babel/helper-string-parser/-/helper-string-parser-7.25.9.tgz\",\n      \"integrity\": \"sha1-Gqu3Lucu01eJtLvK08ooYs5hTow=\",\n      \"dev\": true\n    },\n    \"@babel/helper-validator-identifier\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.9.tgz\",\n      \"integrity\": \"sha1-JLZOLD7HzTs8VHcpuNFocfIsvcc=\",\n      \"dev\": true\n    },\n    \"@babel/helper-validator-option\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@babel/helper-validator-option/-/helper-validator-option-7.25.9.tgz\",\n      \"integrity\": \"sha1-huRb2KSat+A/J2V3+WF5ZT1B2nI=\",\n      \"dev\": true\n    },\n    \"@babel/helpers\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@babel/helpers/-/helpers-7.26.0.tgz\",\n      \"integrity\": \"sha1-MOYh8eulqkX+b0ho0ukVTYhBGaQ=\",\n      \"dev\": true,\n      \"requires\": {\n        \"@babel/template\": \"^7.25.9\",\n        \"@babel/types\": \"^7.26.0\"\n      }\n    },\n    \"@babel/parser\": {\n      \"version\": \"7.26.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@babel/parser/-/parser-7.26.2.tgz\",\n      \"integrity\": \"sha1-/XtvSHz+oJiJVX711O65/5pavRE=\",\n      \"dev\": true,\n      \"requires\": {\n        \"@babel/types\": \"^7.26.0\"\n      }\n    },\n    \"@babel/template\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@babel/template/-/template-7.25.9.tgz\",\n      \"integrity\": \"sha1-7LYtgaim9dxf6Kv8OQH8Ut3xUBY=\",\n      \"dev\": true,\n      \"requires\": {\n        \"@babel/code-frame\": \"^7.25.9\",\n        \"@babel/parser\": \"^7.25.9\",\n        \"@babel/types\": \"^7.25.9\"\n      }\n    },\n    \"@babel/traverse\": {\n      \"version\": \"7.25.9\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@babel/traverse/-/traverse-7.25.9.tgz\",\n      \"integrity\": \"sha1-pQ+P5J5/afU95b6n5BPNNcXhPIQ=\",\n      \"dev\": true,\n      \"requires\": {\n        \"@babel/code-frame\": \"^7.25.9\",\n        \"@babel/generator\": \"^7.25.9\",\n        \"@babel/parser\": \"^7.25.9\",\n        \"@babel/template\": \"^7.25.9\",\n        \"@babel/types\": \"^7.25.9\",\n        \"debug\": \"^4.3.1\",\n        \"globals\": \"^11.1.0\"\n      }\n    },\n    \"@babel/types\": {\n      \"version\": \"7.26.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@babel/types/-/types-7.26.0.tgz\",\n      \"integrity\": \"sha1-3qvQjWt1O8jg8Zj4cJ+1deMXdP8=\",\n      \"dev\": true,\n      \"requires\": {\n        \"@babel/helper-string-parser\": \"^7.25.9\",\n        \"@babel/helper-validator-identifier\": \"^7.25.9\"\n      }\n    },\n    \"@istanbuljs/load-nyc-config\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz\",\n      \"integrity\": \"sha1-/T2x1Z7PfPEh6AZQu4ZxL5tV7O0=\",\n      \"dev\": true,\n      \"requires\": {\n        \"camelcase\": \"^5.3.1\",\n        \"find-up\": \"^4.1.0\",\n        \"get-package-type\": \"^0.1.0\",\n        \"js-yaml\": \"^3.13.1\",\n        \"resolve-from\": \"^5.0.0\"\n      },\n      \"dependencies\": {\n        \"find-up\": {\n          \"version\": \"4.1.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/find-up/-/find-up-4.1.0.tgz\",\n          \"integrity\": \"sha1-l6/n1s3AvFkoWEt8jXsW6KmqXRk=\",\n          \"dev\": true,\n          \"requires\": {\n            \"locate-path\": \"^5.0.0\",\n            \"path-exists\": \"^4.0.0\"\n          }\n        },\n        \"locate-path\": {\n          \"version\": \"5.0.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/locate-path/-/locate-path-5.0.0.tgz\",\n          \"integrity\": \"sha1-Gvujlq/WdqbUJQTQpno6frn2KqA=\",\n          \"dev\": true,\n          \"requires\": {\n            \"p-locate\": \"^4.1.0\"\n          }\n        },\n        \"p-locate\": {\n          \"version\": \"4.1.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/p-locate/-/p-locate-4.1.0.tgz\",\n          \"integrity\": \"sha1-o0KLtwiLOmApL2aRkni3wpetTwc=\",\n          \"dev\": true,\n          \"requires\": {\n            \"p-limit\": \"^2.2.0\"\n          }\n        },\n        \"path-exists\": {\n          \"version\": \"4.0.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/path-exists/-/path-exists-4.0.0.tgz\",\n          \"integrity\": \"sha1-UTvb4tO5XXdi6METfvoZXGxhtbM=\",\n          \"dev\": true\n        }\n      }\n    },\n    \"@istanbuljs/schema\": {\n      \"version\": \"0.1.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@istanbuljs/schema/-/schema-0.1.3.tgz\",\n      \"integrity\": \"sha1-5F44TkuOwWvOL9kDr3hFD2v37Jg=\",\n      \"dev\": true\n    },\n    \"@jridgewell/gen-mapping\": {\n      \"version\": \"0.3.5\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@jridgewell/gen-mapping/-/gen-mapping-0.3.5.tgz\",\n      \"integrity\": \"sha1-3M5q/3S99trRqVgCtpsEovyx+zY=\",\n      \"dev\": true,\n      \"requires\": {\n        \"@jridgewell/set-array\": \"^1.2.1\",\n        \"@jridgewell/sourcemap-codec\": \"^1.4.10\",\n        \"@jridgewell/trace-mapping\": \"^0.3.24\"\n      }\n    },\n    \"@jridgewell/resolve-uri\": {\n      \"version\": \"3.1.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz\",\n      \"integrity\": \"sha1-eg7mAfYPmaIMfHxf8MgDiMEYm9Y=\",\n      \"dev\": true\n    },\n    \"@jridgewell/set-array\": {\n      \"version\": \"1.2.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@jridgewell/set-array/-/set-array-1.2.1.tgz\",\n      \"integrity\": \"sha1-VY+2Ry7RakyFC4iVMOazZDjEkoA=\",\n      \"dev\": true\n    },\n    \"@jridgewell/sourcemap-codec\": {\n      \"version\": \"1.5.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz\",\n      \"integrity\": \"sha1-MYi8snOkFLDSFf0ipYVAuYm5QJo=\",\n      \"dev\": true\n    },\n    \"@jridgewell/trace-mapping\": {\n      \"version\": \"0.3.25\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz\",\n      \"integrity\": \"sha1-FfGQ6YiV8/wjJ27hS8drZ1wuUPA=\",\n      \"dev\": true,\n      \"requires\": {\n        \"@jridgewell/resolve-uri\": \"^3.1.0\",\n        \"@jridgewell/sourcemap-codec\": \"^1.4.14\"\n      }\n    },\n    \"adm-zip\": {\n      \"version\": \"0.4.13\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/adm-zip/-/adm-zip-0.4.13.tgz\",\n      \"integrity\": \"sha1-WX4vjMNnIVHhMH0+lc3bx1ZyMUo=\",\n      \"dev\": true\n    },\n    \"agent-base\": {\n      \"version\": \"6.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/agent-base/-/agent-base-6.0.2.tgz\",\n      \"integrity\": \"sha1-Sf/1hXfP7j83F2/qtMIuAPhtf3c=\",\n      \"requires\": {\n        \"debug\": \"4\"\n      }\n    },\n    \"aggregate-error\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/aggregate-error/-/aggregate-error-3.1.0.tgz\",\n      \"integrity\": \"sha1-kmcP9Q9TWb23o+DUDQ7DDFc3aHo=\",\n      \"dev\": true,\n      \"requires\": {\n        \"clean-stack\": \"^2.0.0\",\n        \"indent-string\": \"^4.0.0\"\n      }\n    },\n    \"ansi-colors\": {\n      \"version\": \"3.2.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/ansi-colors/-/ansi-colors-3.2.3.tgz\",\n      \"integrity\": \"sha1-V9NbhoboUeLMBMQD8cACA5dqGBM=\",\n      \"dev\": true\n    },\n    \"ansi-regex\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/ansi-regex/-/ansi-regex-3.0.1.tgz\",\n      \"integrity\": \"sha1-Ej1keekq1FrYl9QFTjx8p9tJROE=\",\n      \"dev\": true\n    },\n    \"ansi-styles\": {\n      \"version\": \"3.2.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/ansi-styles/-/ansi-styles-3.2.1.tgz\",\n      \"integrity\": \"sha1-QfuyAkPlCxK+DwS43tvwdSDOhB0=\",\n      \"dev\": true,\n      \"requires\": {\n        \"color-convert\": \"^1.9.0\"\n      }\n    },\n    \"append-transform\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/append-transform/-/append-transform-2.0.0.tgz\",\n      \"integrity\": \"sha1-mdnSnHs4OR5vQo0ozhNlUfC3fhI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"default-require-extensions\": \"^3.0.0\"\n      }\n    },\n    \"archy\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/archy/-/archy-1.0.0.tgz\",\n      \"integrity\": \"sha1-+cjBN1fMHde8N5rHeyxipcKGjEA=\",\n      \"dev\": true\n    },\n    \"argparse\": {\n      \"version\": \"1.0.10\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/argparse/-/argparse-1.0.10.tgz\",\n      \"integrity\": \"sha1-vNZ5HqWuCXJeF+WtmIE0zUCz2RE=\",\n      \"dev\": true,\n      \"requires\": {\n        \"sprintf-js\": \"~1.0.2\"\n      }\n    },\n    \"array-buffer-byte-length\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/array-buffer-byte-length/-/array-buffer-byte-length-1.0.1.tgz\",\n      \"integrity\": \"sha1-HlWD7BZ2NUCieuUu7Zn/iZIjVo8=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.5\",\n        \"is-array-buffer\": \"^3.0.4\"\n      }\n    },\n    \"array.prototype.reduce\": {\n      \"version\": \"1.0.7\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/array.prototype.reduce/-/array.prototype.reduce-1.0.7.tgz\",\n      \"integrity\": \"sha1-aq3C+ZWvKcuIfrhm2YHchatvfcc=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"define-properties\": \"^1.2.1\",\n        \"es-abstract\": \"^1.23.2\",\n        \"es-array-method-boxes-properly\": \"^1.0.0\",\n        \"es-errors\": \"^1.3.0\",\n        \"es-object-atoms\": \"^1.0.0\",\n        \"is-string\": \"^1.0.7\"\n      }\n    },\n    \"arraybuffer.prototype.slice\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.3.tgz\",\n      \"integrity\": \"sha1-CXly9CVeQbw0JeN9w/ZCHPmu/eY=\",\n      \"dev\": true,\n      \"requires\": {\n        \"array-buffer-byte-length\": \"^1.0.1\",\n        \"call-bind\": \"^1.0.5\",\n        \"define-properties\": \"^1.2.1\",\n        \"es-abstract\": \"^1.22.3\",\n        \"es-errors\": \"^1.2.1\",\n        \"get-intrinsic\": \"^1.2.3\",\n        \"is-array-buffer\": \"^3.0.4\",\n        \"is-shared-array-buffer\": \"^1.0.2\"\n      }\n    },\n    \"available-typed-arrays\": {\n      \"version\": \"1.0.7\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz\",\n      \"integrity\": \"sha1-pcw3XWoDwu/IelU/PgsVIt7xSEY=\",\n      \"dev\": true,\n      \"requires\": {\n        \"possible-typed-array-names\": \"^1.0.0\"\n      }\n    },\n    \"azure-devops-node-api\": {\n      \"version\": \"12.5.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/azure-devops-node-api/-/azure-devops-node-api-12.5.0.tgz\",\n      \"integrity\": \"sha1-OLnv18WsdDVP5Ojb5CaX2wuOhaU=\",\n      \"dev\": true,\n      \"requires\": {\n        \"tunnel\": \"0.0.6\",\n        \"typed-rest-client\": \"^1.8.4\"\n      }\n    },\n    \"balanced-match\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/balanced-match/-/balanced-match-1.0.2.tgz\",\n      \"integrity\": \"sha1-6D46fj8wCzTLnYf2FfoMvzV2kO4=\",\n      \"dev\": true\n    },\n    \"brace-expansion\": {\n      \"version\": \"1.1.11\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/brace-expansion/-/brace-expansion-1.1.11.tgz\",\n      \"integrity\": \"sha1-PH/L9SnYcibz0vUrlm/1Jx60Qd0=\",\n      \"dev\": true,\n      \"requires\": {\n        \"balanced-match\": \"^1.0.0\",\n        \"concat-map\": \"0.0.1\"\n      }\n    },\n    \"browser-stdout\": {\n      \"version\": \"1.3.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/browser-stdout/-/browser-stdout-1.3.1.tgz\",\n      \"integrity\": \"sha1-uqVZ7hTO1zRSIputcyZGfGH6vWA=\",\n      \"dev\": true\n    },\n    \"browserslist\": {\n      \"version\": \"4.24.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/browserslist/-/browserslist-4.24.2.tgz\",\n      \"integrity\": \"sha1-9YRbyRBp29Ve6J+vmCLh2IXRZYA=\",\n      \"dev\": true,\n      \"requires\": {\n        \"caniuse-lite\": \"^1.0.30001669\",\n        \"electron-to-chromium\": \"^1.5.41\",\n        \"node-releases\": \"^2.0.18\",\n        \"update-browserslist-db\": \"^1.1.1\"\n      }\n    },\n    \"caching-transform\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/caching-transform/-/caching-transform-4.0.0.tgz\",\n      \"integrity\": \"sha1-ANKXpCBtceIWPDnq/6gVesBlHw8=\",\n      \"dev\": true,\n      \"requires\": {\n        \"hasha\": \"^5.0.0\",\n        \"make-dir\": \"^3.0.0\",\n        \"package-hash\": \"^4.0.0\",\n        \"write-file-atomic\": \"^3.0.0\"\n      }\n    },\n    \"call-bind\": {\n      \"version\": \"1.0.7\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/call-bind/-/call-bind-1.0.7.tgz\",\n      \"integrity\": \"sha1-BgFlmcQMVkmMGHadJzC+JCtvo7k=\",\n      \"dev\": true,\n      \"requires\": {\n        \"es-define-property\": \"^1.0.0\",\n        \"es-errors\": \"^1.3.0\",\n        \"function-bind\": \"^1.1.2\",\n        \"get-intrinsic\": \"^1.2.4\",\n        \"set-function-length\": \"^1.2.1\"\n      }\n    },\n    \"camelcase\": {\n      \"version\": \"5.3.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/camelcase/-/camelcase-5.3.1.tgz\",\n      \"integrity\": \"sha1-48mzFWnhBoEd8kL3FXJaH0xJQyA=\",\n      \"dev\": true\n    },\n    \"caniuse-lite\": {\n      \"version\": \"1.0.30001686\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/caniuse-lite/-/caniuse-lite-1.0.30001686.tgz\",\n      \"integrity\": \"sha1-DgS42Q3odTGI6TyZidVssZ2QJnA=\",\n      \"dev\": true\n    },\n    \"chalk\": {\n      \"version\": \"2.4.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/chalk/-/chalk-2.4.2.tgz\",\n      \"integrity\": \"sha1-zUJUFnelQzPPVBpJEIwUMrRMlCQ=\",\n      \"dev\": true,\n      \"requires\": {\n        \"ansi-styles\": \"^3.2.1\",\n        \"escape-string-regexp\": \"^1.0.5\",\n        \"supports-color\": \"^5.3.0\"\n      },\n      \"dependencies\": {\n        \"supports-color\": {\n          \"version\": \"5.5.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/supports-color/-/supports-color-5.5.0.tgz\",\n          \"integrity\": \"sha1-4uaaRKyHcveKHsCzW2id9lMO/I8=\",\n          \"dev\": true,\n          \"requires\": {\n            \"has-flag\": \"^3.0.0\"\n          }\n        }\n      }\n    },\n    \"clean-stack\": {\n      \"version\": \"2.2.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/clean-stack/-/clean-stack-2.2.0.tgz\",\n      \"integrity\": \"sha1-7oRy27Ep5yezHooQpCfe6d/kAIs=\",\n      \"dev\": true\n    },\n    \"cliui\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/cliui/-/cliui-5.0.0.tgz\",\n      \"integrity\": \"sha1-3u/P2y6AB4SqNPRvoI4GhRx7u8U=\",\n      \"dev\": true,\n      \"requires\": {\n        \"string-width\": \"^3.1.0\",\n        \"strip-ansi\": \"^5.2.0\",\n        \"wrap-ansi\": \"^5.1.0\"\n      },\n      \"dependencies\": {\n        \"ansi-regex\": {\n          \"version\": \"4.1.1\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/ansi-regex/-/ansi-regex-4.1.1.tgz\",\n          \"integrity\": \"sha1-Fk2qyHqy1vbbOimHXi0XZlgtq+0=\",\n          \"dev\": true\n        },\n        \"string-width\": {\n          \"version\": \"3.1.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/string-width/-/string-width-3.1.0.tgz\",\n          \"integrity\": \"sha1-InZ74htirxCBV0MG9prFG2IgOWE=\",\n          \"dev\": true,\n          \"requires\": {\n            \"emoji-regex\": \"^7.0.1\",\n            \"is-fullwidth-code-point\": \"^2.0.0\",\n            \"strip-ansi\": \"^5.1.0\"\n          }\n        },\n        \"strip-ansi\": {\n          \"version\": \"5.2.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/strip-ansi/-/strip-ansi-5.2.0.tgz\",\n          \"integrity\": \"sha1-jJpTb+tq/JYr36WxBKUJHBrZwK4=\",\n          \"dev\": true,\n          \"requires\": {\n            \"ansi-regex\": \"^4.1.0\"\n          }\n        }\n      }\n    },\n    \"color-convert\": {\n      \"version\": \"1.9.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/color-convert/-/color-convert-1.9.3.tgz\",\n      \"integrity\": \"sha1-u3GFBpDh8TZWfeYp0tVHHe2kweg=\",\n      \"dev\": true,\n      \"requires\": {\n        \"color-name\": \"1.1.3\"\n      }\n    },\n    \"color-name\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/color-name/-/color-name-1.1.3.tgz\",\n      \"integrity\": \"sha1-p9BVi9icQveV3UIyj3QIMcpTvCU=\",\n      \"dev\": true\n    },\n    \"commondir\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/commondir/-/commondir-1.0.1.tgz\",\n      \"integrity\": \"sha1-3dgA2gxmEnOTzKWVDqloo6rxJTs=\",\n      \"dev\": true\n    },\n    \"concat-map\": {\n      \"version\": \"0.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/concat-map/-/concat-map-0.0.1.tgz\",\n      \"integrity\": \"sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=\",\n      \"dev\": true\n    },\n    \"convert-source-map\": {\n      \"version\": \"1.9.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/convert-source-map/-/convert-source-map-1.9.0.tgz\",\n      \"integrity\": \"sha1-f6rmI1P7QhM2bQypg1jSLoNosF8=\",\n      \"dev\": true\n    },\n    \"cross-spawn\": {\n      \"version\": \"7.0.6\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/cross-spawn/-/cross-spawn-7.0.6.tgz\",\n      \"integrity\": \"sha1-ilj+ePANzXDDcEUXWd+/rwPo7p8=\",\n      \"dev\": true,\n      \"requires\": {\n        \"path-key\": \"^3.1.0\",\n        \"shebang-command\": \"^2.0.0\",\n        \"which\": \"^2.0.1\"\n      },\n      \"dependencies\": {\n        \"which\": {\n          \"version\": \"2.0.2\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/which/-/which-2.0.2.tgz\",\n          \"integrity\": \"sha1-fGqN0KY2oDJ+ELWckobu6T8/UbE=\",\n          \"dev\": true,\n          \"requires\": {\n            \"isexe\": \"^2.0.0\"\n          }\n        }\n      }\n    },\n    \"data-view-buffer\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/data-view-buffer/-/data-view-buffer-1.0.1.tgz\",\n      \"integrity\": \"sha1-jqYybv7Bei5CYgaW5nHX1ai8ZrI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.6\",\n        \"es-errors\": \"^1.3.0\",\n        \"is-data-view\": \"^1.0.1\"\n      }\n    },\n    \"data-view-byte-length\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/data-view-byte-length/-/data-view-byte-length-1.0.1.tgz\",\n      \"integrity\": \"sha1-kHIcqV/ygGd+t5N0n84QETR2aeI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"es-errors\": \"^1.3.0\",\n        \"is-data-view\": \"^1.0.1\"\n      }\n    },\n    \"data-view-byte-offset\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/data-view-byte-offset/-/data-view-byte-offset-1.0.0.tgz\",\n      \"integrity\": \"sha1-Xgu/tIKO0tG5tADNin0Rm8oP8Yo=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.6\",\n        \"es-errors\": \"^1.3.0\",\n        \"is-data-view\": \"^1.0.1\"\n      }\n    },\n    \"debug\": {\n      \"version\": \"4.3.7\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/debug/-/debug-4.3.7.tgz\",\n      \"integrity\": \"sha1-h5RbQVGgEddtlaGY1xEchlw2ClI=\",\n      \"requires\": {\n        \"ms\": \"^2.1.3\"\n      }\n    },\n    \"decamelize\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/decamelize/-/decamelize-1.2.0.tgz\",\n      \"integrity\": \"sha1-9lNNFRSCabIDUue+4m9QH5oZEpA=\",\n      \"dev\": true\n    },\n    \"default-require-extensions\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/default-require-extensions/-/default-require-extensions-3.0.1.tgz\",\n      \"integrity\": \"sha1-v64A/urq2mjCriVsYlQPYLgGJb0=\",\n      \"dev\": true,\n      \"requires\": {\n        \"strip-bom\": \"^4.0.0\"\n      }\n    },\n    \"define-data-property\": {\n      \"version\": \"1.1.4\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/define-data-property/-/define-data-property-1.1.4.tgz\",\n      \"integrity\": \"sha1-iU3BQbt9MGCuQ2b2oBB+aPvkjF4=\",\n      \"dev\": true,\n      \"requires\": {\n        \"es-define-property\": \"^1.0.0\",\n        \"es-errors\": \"^1.3.0\",\n        \"gopd\": \"^1.0.1\"\n      }\n    },\n    \"define-properties\": {\n      \"version\": \"1.2.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/define-properties/-/define-properties-1.2.1.tgz\",\n      \"integrity\": \"sha1-EHgcxhbrlRqAoDS6/Kpzd/avK2w=\",\n      \"dev\": true,\n      \"requires\": {\n        \"define-data-property\": \"^1.0.1\",\n        \"has-property-descriptors\": \"^1.0.0\",\n        \"object-keys\": \"^1.1.1\"\n      }\n    },\n    \"diff\": {\n      \"version\": \"3.5.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/diff/-/diff-3.5.0.tgz\",\n      \"integrity\": \"sha1-gAwN0eCov7yVg1wgKtIg/jF+WhI=\",\n      \"dev\": true\n    },\n    \"electron-to-chromium\": {\n      \"version\": \"1.5.68\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/electron-to-chromium/-/electron-to-chromium-1.5.68.tgz\",\n      \"integrity\": \"sha1-T0a+TUZe8A4hANVVe2b0r3Djzmw=\",\n      \"dev\": true\n    },\n    \"emoji-regex\": {\n      \"version\": \"7.0.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/emoji-regex/-/emoji-regex-7.0.3.tgz\",\n      \"integrity\": \"sha1-kzoEBShgyF6DwSJHnEdIqOTHIVY=\",\n      \"dev\": true\n    },\n    \"es-abstract\": {\n      \"version\": \"1.23.5\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/es-abstract/-/es-abstract-1.23.5.tgz\",\n      \"integrity\": \"sha1-9FmaSUbVftRnUV7RDk8VconNUvs=\",\n      \"dev\": true,\n      \"requires\": {\n        \"array-buffer-byte-length\": \"^1.0.1\",\n        \"arraybuffer.prototype.slice\": \"^1.0.3\",\n        \"available-typed-arrays\": \"^1.0.7\",\n        \"call-bind\": \"^1.0.7\",\n        \"data-view-buffer\": \"^1.0.1\",\n        \"data-view-byte-length\": \"^1.0.1\",\n        \"data-view-byte-offset\": \"^1.0.0\",\n        \"es-define-property\": \"^1.0.0\",\n        \"es-errors\": \"^1.3.0\",\n        \"es-object-atoms\": \"^1.0.0\",\n        \"es-set-tostringtag\": \"^2.0.3\",\n        \"es-to-primitive\": \"^1.2.1\",\n        \"function.prototype.name\": \"^1.1.6\",\n        \"get-intrinsic\": \"^1.2.4\",\n        \"get-symbol-description\": \"^1.0.2\",\n        \"globalthis\": \"^1.0.4\",\n        \"gopd\": \"^1.0.1\",\n        \"has-property-descriptors\": \"^1.0.2\",\n        \"has-proto\": \"^1.0.3\",\n        \"has-symbols\": \"^1.0.3\",\n        \"hasown\": \"^2.0.2\",\n        \"internal-slot\": \"^1.0.7\",\n        \"is-array-buffer\": \"^3.0.4\",\n        \"is-callable\": \"^1.2.7\",\n        \"is-data-view\": \"^1.0.1\",\n        \"is-negative-zero\": \"^2.0.3\",\n        \"is-regex\": \"^1.1.4\",\n        \"is-shared-array-buffer\": \"^1.0.3\",\n        \"is-string\": \"^1.0.7\",\n        \"is-typed-array\": \"^1.1.13\",\n        \"is-weakref\": \"^1.0.2\",\n        \"object-inspect\": \"^1.13.3\",\n        \"object-keys\": \"^1.1.1\",\n        \"object.assign\": \"^4.1.5\",\n        \"regexp.prototype.flags\": \"^1.5.3\",\n        \"safe-array-concat\": \"^1.1.2\",\n        \"safe-regex-test\": \"^1.0.3\",\n        \"string.prototype.trim\": \"^1.2.9\",\n        \"string.prototype.trimend\": \"^1.0.8\",\n        \"string.prototype.trimstart\": \"^1.0.8\",\n        \"typed-array-buffer\": \"^1.0.2\",\n        \"typed-array-byte-length\": \"^1.0.1\",\n        \"typed-array-byte-offset\": \"^1.0.2\",\n        \"typed-array-length\": \"^1.0.6\",\n        \"unbox-primitive\": \"^1.0.2\",\n        \"which-typed-array\": \"^1.1.15\"\n      },\n      \"dependencies\": {\n        \"object.assign\": {\n          \"version\": \"4.1.5\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/object.assign/-/object.assign-4.1.5.tgz\",\n          \"integrity\": \"sha1-OoM/mrf9uA/J6NIwDIA9IW2P27A=\",\n          \"dev\": true,\n          \"requires\": {\n            \"call-bind\": \"^1.0.5\",\n            \"define-properties\": \"^1.2.1\",\n            \"has-symbols\": \"^1.0.3\",\n            \"object-keys\": \"^1.1.1\"\n          }\n        }\n      }\n    },\n    \"es-array-method-boxes-properly\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/es-array-method-boxes-properly/-/es-array-method-boxes-properly-1.0.0.tgz\",\n      \"integrity\": \"sha1-hz8+hEGN5O4Zxb51KZCy5EcY0J4=\",\n      \"dev\": true\n    },\n    \"es-define-property\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/es-define-property/-/es-define-property-1.0.0.tgz\",\n      \"integrity\": \"sha1-x/rvvf+LJpbPX0aSHt+3fMS6OEU=\",\n      \"dev\": true,\n      \"requires\": {\n        \"get-intrinsic\": \"^1.2.4\"\n      }\n    },\n    \"es-errors\": {\n      \"version\": \"1.3.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/es-errors/-/es-errors-1.3.0.tgz\",\n      \"integrity\": \"sha1-BfdaJdq5jk+x3NXhRywFRtUFfI8=\",\n      \"dev\": true\n    },\n    \"es-object-atoms\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/es-object-atoms/-/es-object-atoms-1.0.0.tgz\",\n      \"integrity\": \"sha1-3bVc1HrC4kBwEmC8Ko4x7LZD2UE=\",\n      \"dev\": true,\n      \"requires\": {\n        \"es-errors\": \"^1.3.0\"\n      }\n    },\n    \"es-set-tostringtag\": {\n      \"version\": \"2.0.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/es-set-tostringtag/-/es-set-tostringtag-2.0.3.tgz\",\n      \"integrity\": \"sha1-i7YPCkQMLkKBliQoQ41YVFrzl3c=\",\n      \"dev\": true,\n      \"requires\": {\n        \"get-intrinsic\": \"^1.2.4\",\n        \"has-tostringtag\": \"^1.0.2\",\n        \"hasown\": \"^2.0.1\"\n      }\n    },\n    \"es-to-primitive\": {\n      \"version\": \"1.3.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/es-to-primitive/-/es-to-primitive-1.3.0.tgz\",\n      \"integrity\": \"sha1-lsicgsxJ/YeUokg1uj4f+H8hThg=\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-callable\": \"^1.2.7\",\n        \"is-date-object\": \"^1.0.5\",\n        \"is-symbol\": \"^1.0.4\"\n      }\n    },\n    \"es6-error\": {\n      \"version\": \"4.1.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/es6-error/-/es6-error-4.1.1.tgz\",\n      \"integrity\": \"sha1-njr0B0Wd7tR+mpH5uIWoTrBcVh0=\",\n      \"dev\": true\n    },\n    \"escalade\": {\n      \"version\": \"3.2.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/escalade/-/escalade-3.2.0.tgz\",\n      \"integrity\": \"sha1-ARo/aYVroYnf+n3I/M6Z0qh5A+U=\",\n      \"dev\": true\n    },\n    \"escape-string-regexp\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz\",\n      \"integrity\": \"sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=\",\n      \"dev\": true\n    },\n    \"esprima\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/esprima/-/esprima-4.0.1.tgz\",\n      \"integrity\": \"sha1-E7BM2z5sXRnfkatph6hpVhmwqnE=\",\n      \"dev\": true\n    },\n    \"fast-xml-parser\": {\n      \"version\": \"4.5.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/fast-xml-parser/-/fast-xml-parser-4.5.0.tgz\",\n      \"integrity\": \"sha1-KIK30BpoJd/fkJY48t4CVjUd7zc=\",\n      \"dev\": true,\n      \"requires\": {\n        \"strnum\": \"^1.0.5\"\n      }\n    },\n    \"find-cache-dir\": {\n      \"version\": \"3.3.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/find-cache-dir/-/find-cache-dir-3.3.2.tgz\",\n      \"integrity\": \"sha1-swxbbv8HMHMa6pu9nb7L2AJW1ks=\",\n      \"dev\": true,\n      \"requires\": {\n        \"commondir\": \"^1.0.1\",\n        \"make-dir\": \"^3.0.2\",\n        \"pkg-dir\": \"^4.1.0\"\n      }\n    },\n    \"find-up\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/find-up/-/find-up-3.0.0.tgz\",\n      \"integrity\": \"sha1-SRafHXmTQwZG2mHsxa41XCHJe3M=\",\n      \"dev\": true,\n      \"requires\": {\n        \"locate-path\": \"^3.0.0\"\n      }\n    },\n    \"flat\": {\n      \"version\": \"4.1.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/flat/-/flat-4.1.1.tgz\",\n      \"integrity\": \"sha1-o5IFnMOCiB/5hkL12k3eCpWfMJs=\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-buffer\": \"~2.0.3\"\n      }\n    },\n    \"follow-redirects\": {\n      \"version\": \"1.15.9\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/follow-redirects/-/follow-redirects-1.15.9.tgz\",\n      \"integrity\": \"sha1-pgT6EORDv5jKlCKNnuvMLoosjuE=\",\n      \"dev\": true\n    },\n    \"for-each\": {\n      \"version\": \"0.3.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/for-each/-/for-each-0.3.3.tgz\",\n      \"integrity\": \"sha1-abRH6IoKXTLD5whPPxcQA0shN24=\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-callable\": \"^1.1.3\"\n      }\n    },\n    \"foreground-child\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/foreground-child/-/foreground-child-2.0.0.tgz\",\n      \"integrity\": \"sha1-cbMoAMnxWqjy+D9Ka9m/812GGlM=\",\n      \"dev\": true,\n      \"requires\": {\n        \"cross-spawn\": \"^7.0.0\",\n        \"signal-exit\": \"^3.0.2\"\n      }\n    },\n    \"fromentries\": {\n      \"version\": \"1.3.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/fromentries/-/fromentries-1.3.2.tgz\",\n      \"integrity\": \"sha1-5LymgIgWv4+TtSdQ8RJ/Wm/Ybjo=\",\n      \"dev\": true\n    },\n    \"fs.realpath\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/fs.realpath/-/fs.realpath-1.0.0.tgz\",\n      \"integrity\": \"sha1-FQStJSMVjKpA20onh8sBQRmU6k8=\",\n      \"dev\": true\n    },\n    \"function-bind\": {\n      \"version\": \"1.1.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/function-bind/-/function-bind-1.1.2.tgz\",\n      \"integrity\": \"sha1-LALYZNl/PqbIgwxGTL0Rq26rehw=\",\n      \"dev\": true\n    },\n    \"function.prototype.name\": {\n      \"version\": \"1.1.6\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/function.prototype.name/-/function.prototype.name-1.1.6.tgz\",\n      \"integrity\": \"sha1-zfMVt9kO53pMbuIWw8M2LaB1M/0=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.2\",\n        \"define-properties\": \"^1.2.0\",\n        \"es-abstract\": \"^1.22.1\",\n        \"functions-have-names\": \"^1.2.3\"\n      }\n    },\n    \"functions-have-names\": {\n      \"version\": \"1.2.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/functions-have-names/-/functions-have-names-1.2.3.tgz\",\n      \"integrity\": \"sha1-BAT+TuK6L2B/Dg7DyAuumUEzuDQ=\",\n      \"dev\": true\n    },\n    \"gensync\": {\n      \"version\": \"1.0.0-beta.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/gensync/-/gensync-1.0.0-beta.2.tgz\",\n      \"integrity\": \"sha1-MqbudsPX9S1GsrGuXZP+qFgKJeA=\",\n      \"dev\": true\n    },\n    \"get-caller-file\": {\n      \"version\": \"2.0.5\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/get-caller-file/-/get-caller-file-2.0.5.tgz\",\n      \"integrity\": \"sha1-T5RBKoLbMvNuOwuXQfipf+sDH34=\",\n      \"dev\": true\n    },\n    \"get-intrinsic\": {\n      \"version\": \"1.2.4\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/get-intrinsic/-/get-intrinsic-1.2.4.tgz\",\n      \"integrity\": \"sha1-44X1pLUifUScPqu60FSU7wq76t0=\",\n      \"dev\": true,\n      \"requires\": {\n        \"es-errors\": \"^1.3.0\",\n        \"function-bind\": \"^1.1.2\",\n        \"has-proto\": \"^1.0.1\",\n        \"has-symbols\": \"^1.0.3\",\n        \"hasown\": \"^2.0.0\"\n      }\n    },\n    \"get-package-type\": {\n      \"version\": \"0.1.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/get-package-type/-/get-package-type-0.1.0.tgz\",\n      \"integrity\": \"sha1-jeLYA8/0TfO8bEVuZmizbDkm4Ro=\",\n      \"dev\": true\n    },\n    \"get-symbol-description\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/get-symbol-description/-/get-symbol-description-1.0.2.tgz\",\n      \"integrity\": \"sha1-UzdE1aogrKTgecjl2vf9RCAoIfU=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.5\",\n        \"es-errors\": \"^1.3.0\",\n        \"get-intrinsic\": \"^1.2.4\"\n      }\n    },\n    \"glob\": {\n      \"version\": \"7.1.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/glob/-/glob-7.1.3.tgz\",\n      \"integrity\": \"sha1-OWCDLT8VdBCDQtr9OmezMsCWnfE=\",\n      \"dev\": true,\n      \"requires\": {\n        \"fs.realpath\": \"^1.0.0\",\n        \"inflight\": \"^1.0.4\",\n        \"inherits\": \"2\",\n        \"minimatch\": \"^3.0.4\",\n        \"once\": \"^1.3.0\",\n        \"path-is-absolute\": \"^1.0.0\"\n      },\n      \"dependencies\": {\n        \"minimatch\": {\n          \"version\": \"3.1.2\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/minimatch/-/minimatch-3.1.2.tgz\",\n          \"integrity\": \"sha1-Gc0ZS/0+Qo8EmnCBfAONiatL41s=\",\n          \"dev\": true,\n          \"requires\": {\n            \"brace-expansion\": \"^1.1.7\"\n          }\n        }\n      }\n    },\n    \"globals\": {\n      \"version\": \"11.12.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/globals/-/globals-11.12.0.tgz\",\n      \"integrity\": \"sha1-q4eVM4hooLq9hSV1gBjCp+uVxC4=\",\n      \"dev\": true\n    },\n    \"globalthis\": {\n      \"version\": \"1.0.4\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/globalthis/-/globalthis-1.0.4.tgz\",\n      \"integrity\": \"sha1-dDDtOpddl7+1m8zkH1yruvplEjY=\",\n      \"dev\": true,\n      \"requires\": {\n        \"define-properties\": \"^1.2.1\",\n        \"gopd\": \"^1.0.1\"\n      }\n    },\n    \"gopd\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/gopd/-/gopd-1.1.0.tgz\",\n      \"integrity\": \"sha1-348IOcLUjK78MqAlpJKU05YGyRI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"get-intrinsic\": \"^1.2.4\"\n      }\n    },\n    \"graceful-fs\": {\n      \"version\": \"4.2.11\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/graceful-fs/-/graceful-fs-4.2.11.tgz\",\n      \"integrity\": \"sha1-QYPk6L8Iu24Fu7L30uDI9xLKQOM=\",\n      \"dev\": true\n    },\n    \"growl\": {\n      \"version\": \"1.10.5\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/growl/-/growl-1.10.5.tgz\",\n      \"integrity\": \"sha1-8nNdwig2dPpnR4sQGBBZNVw2nl4=\",\n      \"dev\": true\n    },\n    \"has-bigints\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/has-bigints/-/has-bigints-1.0.2.tgz\",\n      \"integrity\": \"sha1-CHG9Pj1RYm9soJZmaLo11WAtbqo=\",\n      \"dev\": true\n    },\n    \"has-flag\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/has-flag/-/has-flag-3.0.0.tgz\",\n      \"integrity\": \"sha1-tdRU3CGZriJWmfNGfloH87lVuv0=\",\n      \"dev\": true\n    },\n    \"has-property-descriptors\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz\",\n      \"integrity\": \"sha1-lj7X0HHce/XwhMW/vg0bYiJYaFQ=\",\n      \"dev\": true,\n      \"requires\": {\n        \"es-define-property\": \"^1.0.0\"\n      }\n    },\n    \"has-proto\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/has-proto/-/has-proto-1.1.0.tgz\",\n      \"integrity\": \"sha1-3rEElMu+iAm84WijuWH0KWn17UM=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\"\n      }\n    },\n    \"has-symbols\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/has-symbols/-/has-symbols-1.1.0.tgz\",\n      \"integrity\": \"sha1-/JxqeDoISVHQuXH+EBjegTcHozg=\",\n      \"dev\": true\n    },\n    \"has-tostringtag\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/has-tostringtag/-/has-tostringtag-1.0.2.tgz\",\n      \"integrity\": \"sha1-LNxC1AvvLltO6rfAGnPFTOerWrw=\",\n      \"dev\": true,\n      \"requires\": {\n        \"has-symbols\": \"^1.0.3\"\n      }\n    },\n    \"hasha\": {\n      \"version\": \"5.2.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/hasha/-/hasha-5.2.2.tgz\",\n      \"integrity\": \"sha1-pIR3mJs7MnrqPAT1MJbYFtl1IqE=\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-stream\": \"^2.0.0\",\n        \"type-fest\": \"^0.8.0\"\n      }\n    },\n    \"hasown\": {\n      \"version\": \"2.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/hasown/-/hasown-2.0.2.tgz\",\n      \"integrity\": \"sha1-AD6vkb563DcuhOxZ3DclLO24AAM=\",\n      \"dev\": true,\n      \"requires\": {\n        \"function-bind\": \"^1.1.2\"\n      }\n    },\n    \"he\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/he/-/he-1.2.0.tgz\",\n      \"integrity\": \"sha1-hK5l+n6vsWX922FWauFLrwVmTw8=\",\n      \"dev\": true\n    },\n    \"html-escaper\": {\n      \"version\": \"2.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/html-escaper/-/html-escaper-2.0.2.tgz\",\n      \"integrity\": \"sha1-39YAJ9o2o238viNiYsAKWCJoFFM=\",\n      \"dev\": true\n    },\n    \"https-proxy-agent\": {\n      \"version\": \"5.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz\",\n      \"integrity\": \"sha1-xZ7yJKBP6LdU89sAY6Jeow0ABdY=\",\n      \"dev\": true,\n      \"requires\": {\n        \"agent-base\": \"6\",\n        \"debug\": \"4\"\n      }\n    },\n    \"imurmurhash\": {\n      \"version\": \"0.1.4\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/imurmurhash/-/imurmurhash-0.1.4.tgz\",\n      \"integrity\": \"sha1-khi5srkoojixPcT7a21XbyMUU+o=\",\n      \"dev\": true\n    },\n    \"indent-string\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/indent-string/-/indent-string-4.0.0.tgz\",\n      \"integrity\": \"sha1-Yk+PRJfWGbLZdoUx1Y9BIoVNclE=\",\n      \"dev\": true\n    },\n    \"inflight\": {\n      \"version\": \"1.0.6\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/inflight/-/inflight-1.0.6.tgz\",\n      \"integrity\": \"sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=\",\n      \"dev\": true,\n      \"requires\": {\n        \"once\": \"^1.3.0\",\n        \"wrappy\": \"1\"\n      }\n    },\n    \"inherits\": {\n      \"version\": \"2.0.4\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/inherits/-/inherits-2.0.4.tgz\",\n      \"integrity\": \"sha1-D6LGT5MpF8NDOg3tVTY6rjdBa3w=\",\n      \"dev\": true\n    },\n    \"internal-slot\": {\n      \"version\": \"1.0.7\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/internal-slot/-/internal-slot-1.0.7.tgz\",\n      \"integrity\": \"sha1-wG3Mo+2HQkmIEAewpVI7FyoZCAI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"es-errors\": \"^1.3.0\",\n        \"hasown\": \"^2.0.0\",\n        \"side-channel\": \"^1.0.4\"\n      }\n    },\n    \"interpret\": {\n      \"version\": \"1.4.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/interpret/-/interpret-1.4.0.tgz\",\n      \"integrity\": \"sha1-Zlq4vE2iendKQFhOgS4+D6RbGh4=\",\n      \"dev\": true\n    },\n    \"is-array-buffer\": {\n      \"version\": \"3.0.4\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-array-buffer/-/is-array-buffer-3.0.4.tgz\",\n      \"integrity\": \"sha1-eh+Ss9Ye3SvGXSTxMFMOqT1/rpg=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.2\",\n        \"get-intrinsic\": \"^1.2.1\"\n      }\n    },\n    \"is-async-function\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-async-function/-/is-async-function-2.0.0.tgz\",\n      \"integrity\": \"sha1-jkQY79Pl06brsBZMBe9a+2mqlkY=\",\n      \"dev\": true,\n      \"requires\": {\n        \"has-tostringtag\": \"^1.0.0\"\n      }\n    },\n    \"is-bigint\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-bigint/-/is-bigint-1.1.0.tgz\",\n      \"integrity\": \"sha1-3aejRF31ekJYPbQihoLrp8QXBnI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"has-bigints\": \"^1.0.2\"\n      }\n    },\n    \"is-boolean-object\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-boolean-object/-/is-boolean-object-1.2.0.tgz\",\n      \"integrity\": \"sha1-l0NkHoCmLAlLWUHFu3kdZqiOSXo=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"has-tostringtag\": \"^1.0.2\"\n      }\n    },\n    \"is-buffer\": {\n      \"version\": \"2.0.5\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-buffer/-/is-buffer-2.0.5.tgz\",\n      \"integrity\": \"sha1-68JS5ADSL/jXf6CYiIIaJKZYwZE=\",\n      \"dev\": true\n    },\n    \"is-callable\": {\n      \"version\": \"1.2.7\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-callable/-/is-callable-1.2.7.tgz\",\n      \"integrity\": \"sha1-O8KoXqdC2eNiBdys3XLKH9xRsFU=\",\n      \"dev\": true\n    },\n    \"is-core-module\": {\n      \"version\": \"2.15.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-core-module/-/is-core-module-2.15.1.tgz\",\n      \"integrity\": \"sha1-pzY6Jb7pQv76sN4Tv2qjcsgtzDc=\",\n      \"dev\": true,\n      \"requires\": {\n        \"hasown\": \"^2.0.2\"\n      }\n    },\n    \"is-data-view\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-data-view/-/is-data-view-1.0.1.tgz\",\n      \"integrity\": \"sha1-S006URtw89wm1CwDypylFdhHdZ8=\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-typed-array\": \"^1.1.13\"\n      }\n    },\n    \"is-date-object\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-date-object/-/is-date-object-1.0.5.tgz\",\n      \"integrity\": \"sha1-CEHVU25yTCVZe/bqYuG9OCmN8x8=\",\n      \"dev\": true,\n      \"requires\": {\n        \"has-tostringtag\": \"^1.0.0\"\n      }\n    },\n    \"is-finalizationregistry\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-finalizationregistry/-/is-finalizationregistry-1.1.0.tgz\",\n      \"integrity\": \"sha1-10p9DF81eONKIHKeaSAuV41JXcI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\"\n      }\n    },\n    \"is-fullwidth-code-point\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz\",\n      \"integrity\": \"sha1-o7MKXE8ZkYMWeqq5O+764937ZU8=\",\n      \"dev\": true\n    },\n    \"is-generator-function\": {\n      \"version\": \"1.0.10\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-generator-function/-/is-generator-function-1.0.10.tgz\",\n      \"integrity\": \"sha1-8VWLrxrBfg3up8BBXEODUf8rPHI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"has-tostringtag\": \"^1.0.0\"\n      }\n    },\n    \"is-map\": {\n      \"version\": \"2.0.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-map/-/is-map-2.0.3.tgz\",\n      \"integrity\": \"sha1-7elrf+HicLPERl46RlZYdkkm1i4=\",\n      \"dev\": true\n    },\n    \"is-negative-zero\": {\n      \"version\": \"2.0.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-negative-zero/-/is-negative-zero-2.0.3.tgz\",\n      \"integrity\": \"sha1-ztkDoCespjgbd3pXQwadc3akl0c=\",\n      \"dev\": true\n    },\n    \"is-number-object\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-number-object/-/is-number-object-1.1.0.tgz\",\n      \"integrity\": \"sha1-WoZ+nsw9KU3adA2fEng1hXr36wU=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"has-tostringtag\": \"^1.0.2\"\n      }\n    },\n    \"is-regex\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-regex/-/is-regex-1.2.0.tgz\",\n      \"integrity\": \"sha1-QbnSZufrdFExLGTvw36KfUUwd88=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"gopd\": \"^1.1.0\",\n        \"has-tostringtag\": \"^1.0.2\",\n        \"hasown\": \"^2.0.2\"\n      }\n    },\n    \"is-set\": {\n      \"version\": \"2.0.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-set/-/is-set-2.0.3.tgz\",\n      \"integrity\": \"sha1-irIJ6kJGCBQTct7W4MsgDvHZ0B0=\",\n      \"dev\": true\n    },\n    \"is-shared-array-buffer\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-shared-array-buffer/-/is-shared-array-buffer-1.0.3.tgz\",\n      \"integrity\": \"sha1-Ejfxy6BZzbYkMdN43MN9loAYFog=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\"\n      }\n    },\n    \"is-stream\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-stream/-/is-stream-2.0.1.tgz\",\n      \"integrity\": \"sha1-+sHj1TuXrVqdCunO8jifWBClwHc=\",\n      \"dev\": true\n    },\n    \"is-string\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-string/-/is-string-1.1.0.tgz\",\n      \"integrity\": \"sha1-jLg8XVcxG/gFi8bI2ylHEWQdpF0=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"has-tostringtag\": \"^1.0.2\"\n      }\n    },\n    \"is-symbol\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-symbol/-/is-symbol-1.1.0.tgz\",\n      \"integrity\": \"sha1-rpk4MKVtR4GIbTn58KRrPom3tgs=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"has-symbols\": \"^1.0.3\",\n        \"safe-regex-test\": \"^1.0.3\"\n      }\n    },\n    \"is-typed-array\": {\n      \"version\": \"1.1.13\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-typed-array/-/is-typed-array-1.1.13.tgz\",\n      \"integrity\": \"sha1-1sXKVt9iM0lZMi19fdHMpQ3r4ik=\",\n      \"dev\": true,\n      \"requires\": {\n        \"which-typed-array\": \"^1.1.14\"\n      }\n    },\n    \"is-typedarray\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-typedarray/-/is-typedarray-1.0.0.tgz\",\n      \"integrity\": \"sha1-5HnICFjfDBsR3dppQPlgEfzaSpo=\",\n      \"dev\": true\n    },\n    \"is-weakmap\": {\n      \"version\": \"2.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-weakmap/-/is-weakmap-2.0.2.tgz\",\n      \"integrity\": \"sha1-v3JhXWSd/l9pkHnFS4PkfRrhnP0=\",\n      \"dev\": true\n    },\n    \"is-weakref\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-weakref/-/is-weakref-1.0.2.tgz\",\n      \"integrity\": \"sha1-lSnzg6kzggXol2XgOS78LxAPBvI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.2\"\n      }\n    },\n    \"is-weakset\": {\n      \"version\": \"2.0.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-weakset/-/is-weakset-2.0.3.tgz\",\n      \"integrity\": \"sha1-6AFRnfjAxD4S/yg07q2E7J5iQAc=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"get-intrinsic\": \"^1.2.4\"\n      }\n    },\n    \"is-windows\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-windows/-/is-windows-1.0.2.tgz\",\n      \"integrity\": \"sha1-0YUOuXkezRjmGCzhKjDzlmNLsZ0=\",\n      \"dev\": true\n    },\n    \"isarray\": {\n      \"version\": \"2.0.5\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/isarray/-/isarray-2.0.5.tgz\",\n      \"integrity\": \"sha1-ivHkwSISRMxiRZ+vOJQNTmRKVyM=\",\n      \"dev\": true\n    },\n    \"isexe\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/isexe/-/isexe-2.0.0.tgz\",\n      \"integrity\": \"sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=\",\n      \"dev\": true\n    },\n    \"istanbul-lib-coverage\": {\n      \"version\": \"3.2.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz\",\n      \"integrity\": \"sha1-LRZsSwZE1Do58Ev2wu3R5YXzF1Y=\",\n      \"dev\": true\n    },\n    \"istanbul-lib-hook\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/istanbul-lib-hook/-/istanbul-lib-hook-3.0.0.tgz\",\n      \"integrity\": \"sha1-j4TJQ0iIzGsdCp1wkqdtI56/DMY=\",\n      \"dev\": true,\n      \"requires\": {\n        \"append-transform\": \"^2.0.0\"\n      }\n    },\n    \"istanbul-lib-instrument\": {\n      \"version\": \"4.0.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/istanbul-lib-instrument/-/istanbul-lib-instrument-4.0.3.tgz\",\n      \"integrity\": \"sha1-hzxv/4l0UBGCIndGlqPyiQLXfB0=\",\n      \"dev\": true,\n      \"requires\": {\n        \"@babel/core\": \"^7.7.5\",\n        \"@istanbuljs/schema\": \"^0.1.2\",\n        \"istanbul-lib-coverage\": \"^3.0.0\",\n        \"semver\": \"^6.3.0\"\n      },\n      \"dependencies\": {\n        \"semver\": {\n          \"version\": \"6.3.1\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/semver/-/semver-6.3.1.tgz\",\n          \"integrity\": \"sha1-VW0u+GiRRuRtzqS/3QlfNDTf/LQ=\",\n          \"dev\": true\n        }\n      }\n    },\n    \"istanbul-lib-processinfo\": {\n      \"version\": \"2.0.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/istanbul-lib-processinfo/-/istanbul-lib-processinfo-2.0.3.tgz\",\n      \"integrity\": \"sha1-Nm1FTNDct+tuDkGTeOYAcshiYWk=\",\n      \"dev\": true,\n      \"requires\": {\n        \"archy\": \"^1.0.0\",\n        \"cross-spawn\": \"^7.0.3\",\n        \"istanbul-lib-coverage\": \"^3.2.0\",\n        \"p-map\": \"^3.0.0\",\n        \"rimraf\": \"^3.0.0\",\n        \"uuid\": \"^8.3.2\"\n      },\n      \"dependencies\": {\n        \"uuid\": {\n          \"version\": \"8.3.2\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/uuid/-/uuid-8.3.2.tgz\",\n          \"integrity\": \"sha1-gNW1ztJxu5r2xEXyGhoExgbO++I=\",\n          \"dev\": true\n        }\n      }\n    },\n    \"istanbul-lib-report\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz\",\n      \"integrity\": \"sha1-kIMFusmlvRdaxqdEier9D8JEWn0=\",\n      \"dev\": true,\n      \"requires\": {\n        \"istanbul-lib-coverage\": \"^3.0.0\",\n        \"make-dir\": \"^4.0.0\",\n        \"supports-color\": \"^7.1.0\"\n      },\n      \"dependencies\": {\n        \"has-flag\": {\n          \"version\": \"4.0.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/has-flag/-/has-flag-4.0.0.tgz\",\n          \"integrity\": \"sha1-lEdx/ZyByBJlxNaUGGDaBrtZR5s=\",\n          \"dev\": true\n        },\n        \"make-dir\": {\n          \"version\": \"4.0.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/make-dir/-/make-dir-4.0.0.tgz\",\n          \"integrity\": \"sha1-w8IwencSd82WODBfkVwprnQbYU4=\",\n          \"dev\": true,\n          \"requires\": {\n            \"semver\": \"^7.5.3\"\n          }\n        },\n        \"semver\": {\n          \"version\": \"7.6.3\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/semver/-/semver-7.6.3.tgz\",\n          \"integrity\": \"sha1-mA97VVC8F1+03AlAMIVif56zMUM=\",\n          \"dev\": true\n        },\n        \"supports-color\": {\n          \"version\": \"7.2.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/supports-color/-/supports-color-7.2.0.tgz\",\n          \"integrity\": \"sha1-G33NyzK4E4gBs+R4umpRyqiWSNo=\",\n          \"dev\": true,\n          \"requires\": {\n            \"has-flag\": \"^4.0.0\"\n          }\n        }\n      }\n    },\n    \"istanbul-lib-source-maps\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz\",\n      \"integrity\": \"sha1-iV86cJ/PujTG3lpCk5Ai8+Q1hVE=\",\n      \"dev\": true,\n      \"requires\": {\n        \"debug\": \"^4.1.1\",\n        \"istanbul-lib-coverage\": \"^3.0.0\",\n        \"source-map\": \"^0.6.1\"\n      }\n    },\n    \"istanbul-reports\": {\n      \"version\": \"3.1.7\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/istanbul-reports/-/istanbul-reports-3.1.7.tgz\",\n      \"integrity\": \"sha1-2u0SueHcpRjhXAVuHlN+dBKA+gs=\",\n      \"dev\": true,\n      \"requires\": {\n        \"html-escaper\": \"^2.0.0\",\n        \"istanbul-lib-report\": \"^3.0.0\"\n      }\n    },\n    \"js-tokens\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/js-tokens/-/js-tokens-4.0.0.tgz\",\n      \"integrity\": \"sha1-GSA/tZmR35jjoocFDUZHzerzJJk=\",\n      \"dev\": true\n    },\n    \"js-yaml\": {\n      \"version\": \"3.14.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/js-yaml/-/js-yaml-3.14.1.tgz\",\n      \"integrity\": \"sha1-2ugS/bOCX6MGYJqHFzg8UMNqBTc=\",\n      \"dev\": true,\n      \"requires\": {\n        \"argparse\": \"^1.0.7\",\n        \"esprima\": \"^4.0.0\"\n      }\n    },\n    \"jsesc\": {\n      \"version\": \"3.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/jsesc/-/jsesc-3.0.2.tgz\",\n      \"integrity\": \"sha1-u4sJpll7pCZCXy5KByRcPQC5ND4=\",\n      \"dev\": true\n    },\n    \"json5\": {\n      \"version\": \"2.2.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/json5/-/json5-2.2.3.tgz\",\n      \"integrity\": \"sha1-eM1vGhm9wStz21rQxh79ZsHikoM=\",\n      \"dev\": true\n    },\n    \"locate-path\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/locate-path/-/locate-path-3.0.0.tgz\",\n      \"integrity\": \"sha1-2+w7OrdZdYBxtY/ln8QYca8hQA4=\",\n      \"dev\": true,\n      \"requires\": {\n        \"p-locate\": \"^3.0.0\",\n        \"path-exists\": \"^3.0.0\"\n      }\n    },\n    \"lodash\": {\n      \"version\": \"4.17.21\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/lodash/-/lodash-4.17.21.tgz\",\n      \"integrity\": \"sha1-Z5WRxWTDv/quhFTPCz3zcMPWkRw=\",\n      \"dev\": true\n    },\n    \"lodash.flattendeep\": {\n      \"version\": \"4.4.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/lodash.flattendeep/-/lodash.flattendeep-4.4.0.tgz\",\n      \"integrity\": \"sha1-+wMJF/hqMTTlvJvsDWngAT3f7bI=\",\n      \"dev\": true\n    },\n    \"log-symbols\": {\n      \"version\": \"2.2.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/log-symbols/-/log-symbols-2.2.0.tgz\",\n      \"integrity\": \"sha1-V0Dhxdbw39pK2TI7UzIQfva0xAo=\",\n      \"dev\": true,\n      \"requires\": {\n        \"chalk\": \"^2.0.1\"\n      }\n    },\n    \"lru-cache\": {\n      \"version\": \"5.1.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/lru-cache/-/lru-cache-5.1.1.tgz\",\n      \"integrity\": \"sha1-HaJ+ZxAnGUdpXa9oSOhH8B2EuSA=\",\n      \"dev\": true,\n      \"requires\": {\n        \"yallist\": \"^3.0.2\"\n      }\n    },\n    \"make-dir\": {\n      \"version\": \"3.1.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/make-dir/-/make-dir-3.1.0.tgz\",\n      \"integrity\": \"sha1-QV6WcEazp/HRhSd9hKpYIDcmoT8=\",\n      \"dev\": true,\n      \"requires\": {\n        \"semver\": \"^6.0.0\"\n      },\n      \"dependencies\": {\n        \"semver\": {\n          \"version\": \"6.3.1\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/semver/-/semver-6.3.1.tgz\",\n          \"integrity\": \"sha1-VW0u+GiRRuRtzqS/3QlfNDTf/LQ=\",\n          \"dev\": true\n        }\n      }\n    },\n    \"mime-db\": {\n      \"version\": \"1.52.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/mime-db/-/mime-db-1.52.0.tgz\",\n      \"integrity\": \"sha1-u6vNwChZ9JhzAchW4zh85exDv3A=\",\n      \"dev\": true\n    },\n    \"mime-types\": {\n      \"version\": \"2.1.35\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/mime-types/-/mime-types-2.1.35.tgz\",\n      \"integrity\": \"sha1-OBqHG2KnNEUGYK497uRIE/cNlZo=\",\n      \"dev\": true,\n      \"requires\": {\n        \"mime-db\": \"1.52.0\"\n      }\n    },\n    \"minimatch\": {\n      \"version\": \"3.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/minimatch/-/minimatch-3.0.2.tgz\",\n      \"integrity\": \"sha1-DzmKcwDqRB6cNIyD2Yq4ydv5xAo=\",\n      \"dev\": true,\n      \"requires\": {\n        \"brace-expansion\": \"^1.0.0\"\n      }\n    },\n    \"minimist\": {\n      \"version\": \"1.2.8\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/minimist/-/minimist-1.2.8.tgz\",\n      \"integrity\": \"sha1-waRk52kzAuCCoHXO4MBXdBrEdyw=\",\n      \"dev\": true\n    },\n    \"mkdirp\": {\n      \"version\": \"0.5.4\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/mkdirp/-/mkdirp-0.5.4.tgz\",\n      \"integrity\": \"sha1-/QFQSmeX7Fyb6B/0PSBJYe1kpRI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"minimist\": \"^1.2.5\"\n      }\n    },\n    \"mocha\": {\n      \"version\": \"6.2.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/mocha/-/mocha-6.2.3.tgz\",\n      \"integrity\": \"sha1-5khDIYHYuZOTQQISZkRQpMHjGRI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"ansi-colors\": \"3.2.3\",\n        \"browser-stdout\": \"1.3.1\",\n        \"debug\": \"3.2.6\",\n        \"diff\": \"3.5.0\",\n        \"escape-string-regexp\": \"1.0.5\",\n        \"find-up\": \"3.0.0\",\n        \"glob\": \"7.1.3\",\n        \"growl\": \"1.10.5\",\n        \"he\": \"1.2.0\",\n        \"js-yaml\": \"3.13.1\",\n        \"log-symbols\": \"2.2.0\",\n        \"minimatch\": \"3.0.4\",\n        \"mkdirp\": \"0.5.4\",\n        \"ms\": \"2.1.1\",\n        \"node-environment-flags\": \"1.0.5\",\n        \"object.assign\": \"4.1.0\",\n        \"strip-json-comments\": \"2.0.1\",\n        \"supports-color\": \"6.0.0\",\n        \"which\": \"1.3.1\",\n        \"wide-align\": \"1.1.3\",\n        \"yargs\": \"13.3.2\",\n        \"yargs-parser\": \"13.1.2\",\n        \"yargs-unparser\": \"1.6.0\"\n      },\n      \"dependencies\": {\n        \"debug\": {\n          \"version\": \"3.2.6\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/debug/-/debug-3.2.6.tgz\",\n          \"integrity\": \"sha1-6D0X3hbYp++3cX7b5fsQE17uYps=\",\n          \"dev\": true,\n          \"requires\": {\n            \"ms\": \"^2.1.1\"\n          }\n        },\n        \"js-yaml\": {\n          \"version\": \"3.13.1\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/js-yaml/-/js-yaml-3.13.1.tgz\",\n          \"integrity\": \"sha1-r/FRswv9+o5J4F2iLnQV6d+jeEc=\",\n          \"dev\": true,\n          \"requires\": {\n            \"argparse\": \"^1.0.7\",\n            \"esprima\": \"^4.0.0\"\n          }\n        },\n        \"minimatch\": {\n          \"version\": \"3.0.4\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/minimatch/-/minimatch-3.0.4.tgz\",\n          \"integrity\": \"sha1-UWbihkV/AzBgZL5Ul+jbsMPTIIM=\",\n          \"dev\": true,\n          \"requires\": {\n            \"brace-expansion\": \"^1.1.7\"\n          }\n        },\n        \"ms\": {\n          \"version\": \"2.1.1\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/ms/-/ms-2.1.1.tgz\",\n          \"integrity\": \"sha1-MKWGTrPrsKZvLr5tcnrwagnYbgo=\",\n          \"dev\": true\n        }\n      }\n    },\n    \"ms\": {\n      \"version\": \"2.1.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/ms/-/ms-2.1.3.tgz\",\n      \"integrity\": \"sha1-V0yBOM4dK1hh8LRFedut1gxmFbI=\"\n    },\n    \"node-environment-flags\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/node-environment-flags/-/node-environment-flags-1.0.5.tgz\",\n      \"integrity\": \"sha1-+pMCdfW/Xa4YjWGSsktMi7rD12o=\",\n      \"dev\": true,\n      \"requires\": {\n        \"object.getownpropertydescriptors\": \"^2.0.3\",\n        \"semver\": \"^5.7.0\"\n      }\n    },\n    \"node-fetch\": {\n      \"version\": \"2.6.11\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/node-fetch/-/node-fetch-2.6.11.tgz\",\n      \"integrity\": \"sha1-zef8cd7vMTHvgKc4kZ+Znm7f/yU=\",\n      \"dev\": true,\n      \"requires\": {\n        \"whatwg-url\": \"^5.0.0\"\n      }\n    },\n    \"node-preload\": {\n      \"version\": \"0.2.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/node-preload/-/node-preload-0.2.1.tgz\",\n      \"integrity\": \"sha1-wDBDuzJ/QXoY/uerfuV7QIoUQwE=\",\n      \"dev\": true,\n      \"requires\": {\n        \"process-on-spawn\": \"^1.0.0\"\n      }\n    },\n    \"node-releases\": {\n      \"version\": \"2.0.18\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/node-releases/-/node-releases-2.0.18.tgz\",\n      \"integrity\": \"sha1-8BDo014v6NaylE8D9wIT7O3Eyj8=\",\n      \"dev\": true\n    },\n    \"node-uuid\": {\n      \"version\": \"1.4.6\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/node-uuid/-/node-uuid-1.4.6.tgz\",\n      \"integrity\": \"sha1-apYy9GNSJDyE0vRVNNYUwL3L6vI=\",\n      \"dev\": true\n    },\n    \"nodejs-file-downloader\": {\n      \"version\": \"4.13.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/nodejs-file-downloader/-/nodejs-file-downloader-4.13.0.tgz\",\n      \"integrity\": \"sha1-2ofDAIHeX/TouGQGLJjN7APmatA=\",\n      \"dev\": true,\n      \"requires\": {\n        \"follow-redirects\": \"^1.15.6\",\n        \"https-proxy-agent\": \"^5.0.0\",\n        \"mime-types\": \"^2.1.27\",\n        \"sanitize-filename\": \"^1.6.3\"\n      }\n    },\n    \"nyc\": {\n      \"version\": \"15.1.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/nyc/-/nyc-15.1.0.tgz\",\n      \"integrity\": \"sha1-EzXa4S3ch7biSdWhmUykva6nXwI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"@istanbuljs/load-nyc-config\": \"^1.0.0\",\n        \"@istanbuljs/schema\": \"^0.1.2\",\n        \"caching-transform\": \"^4.0.0\",\n        \"convert-source-map\": \"^1.7.0\",\n        \"decamelize\": \"^1.2.0\",\n        \"find-cache-dir\": \"^3.2.0\",\n        \"find-up\": \"^4.1.0\",\n        \"foreground-child\": \"^2.0.0\",\n        \"get-package-type\": \"^0.1.0\",\n        \"glob\": \"^7.1.6\",\n        \"istanbul-lib-coverage\": \"^3.0.0\",\n        \"istanbul-lib-hook\": \"^3.0.0\",\n        \"istanbul-lib-instrument\": \"^4.0.0\",\n        \"istanbul-lib-processinfo\": \"^2.0.2\",\n        \"istanbul-lib-report\": \"^3.0.0\",\n        \"istanbul-lib-source-maps\": \"^4.0.0\",\n        \"istanbul-reports\": \"^3.0.2\",\n        \"make-dir\": \"^3.0.0\",\n        \"node-preload\": \"^0.2.1\",\n        \"p-map\": \"^3.0.0\",\n        \"process-on-spawn\": \"^1.0.0\",\n        \"resolve-from\": \"^5.0.0\",\n        \"rimraf\": \"^3.0.0\",\n        \"signal-exit\": \"^3.0.2\",\n        \"spawn-wrap\": \"^2.0.0\",\n        \"test-exclude\": \"^6.0.0\",\n        \"yargs\": \"^15.0.2\"\n      },\n      \"dependencies\": {\n        \"ansi-regex\": {\n          \"version\": \"5.0.1\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/ansi-regex/-/ansi-regex-5.0.1.tgz\",\n          \"integrity\": \"sha1-CCyyyJyf6GWaMRpTvWpNxTAdswQ=\",\n          \"dev\": true\n        },\n        \"ansi-styles\": {\n          \"version\": \"4.3.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/ansi-styles/-/ansi-styles-4.3.0.tgz\",\n          \"integrity\": \"sha1-7dgDYornHATIWuegkG7a00tkiTc=\",\n          \"dev\": true,\n          \"requires\": {\n            \"color-convert\": \"^2.0.1\"\n          }\n        },\n        \"cliui\": {\n          \"version\": \"6.0.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/cliui/-/cliui-6.0.0.tgz\",\n          \"integrity\": \"sha1-UR1wLAxOQcoVbX0OlgIfI+EyJbE=\",\n          \"dev\": true,\n          \"requires\": {\n            \"string-width\": \"^4.2.0\",\n            \"strip-ansi\": \"^6.0.0\",\n            \"wrap-ansi\": \"^6.2.0\"\n          }\n        },\n        \"color-convert\": {\n          \"version\": \"2.0.1\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/color-convert/-/color-convert-2.0.1.tgz\",\n          \"integrity\": \"sha1-ctOmjVmMm9s68q0ehPIdiWq9TeM=\",\n          \"dev\": true,\n          \"requires\": {\n            \"color-name\": \"~1.1.4\"\n          }\n        },\n        \"color-name\": {\n          \"version\": \"1.1.4\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/color-name/-/color-name-1.1.4.tgz\",\n          \"integrity\": \"sha1-wqCah6y95pVD3m9j+jmVyCbFNqI=\",\n          \"dev\": true\n        },\n        \"emoji-regex\": {\n          \"version\": \"8.0.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/emoji-regex/-/emoji-regex-8.0.0.tgz\",\n          \"integrity\": \"sha1-6Bj9ac5cz8tARZT4QpY79TFkzDc=\",\n          \"dev\": true\n        },\n        \"find-up\": {\n          \"version\": \"4.1.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/find-up/-/find-up-4.1.0.tgz\",\n          \"integrity\": \"sha1-l6/n1s3AvFkoWEt8jXsW6KmqXRk=\",\n          \"dev\": true,\n          \"requires\": {\n            \"locate-path\": \"^5.0.0\",\n            \"path-exists\": \"^4.0.0\"\n          }\n        },\n        \"glob\": {\n          \"version\": \"7.2.3\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/glob/-/glob-7.2.3.tgz\",\n          \"integrity\": \"sha1-uN8PuAK7+o6JvR2Ti04WV47UTys=\",\n          \"dev\": true,\n          \"requires\": {\n            \"fs.realpath\": \"^1.0.0\",\n            \"inflight\": \"^1.0.4\",\n            \"inherits\": \"2\",\n            \"minimatch\": \"^3.1.1\",\n            \"once\": \"^1.3.0\",\n            \"path-is-absolute\": \"^1.0.0\"\n          }\n        },\n        \"is-fullwidth-code-point\": {\n          \"version\": \"3.0.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz\",\n          \"integrity\": \"sha1-8Rb4Bk/pCz94RKOJl8C3UFEmnx0=\",\n          \"dev\": true\n        },\n        \"locate-path\": {\n          \"version\": \"5.0.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/locate-path/-/locate-path-5.0.0.tgz\",\n          \"integrity\": \"sha1-Gvujlq/WdqbUJQTQpno6frn2KqA=\",\n          \"dev\": true,\n          \"requires\": {\n            \"p-locate\": \"^4.1.0\"\n          }\n        },\n        \"minimatch\": {\n          \"version\": \"3.1.2\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/minimatch/-/minimatch-3.1.2.tgz\",\n          \"integrity\": \"sha1-Gc0ZS/0+Qo8EmnCBfAONiatL41s=\",\n          \"dev\": true,\n          \"requires\": {\n            \"brace-expansion\": \"^1.1.7\"\n          }\n        },\n        \"p-locate\": {\n          \"version\": \"4.1.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/p-locate/-/p-locate-4.1.0.tgz\",\n          \"integrity\": \"sha1-o0KLtwiLOmApL2aRkni3wpetTwc=\",\n          \"dev\": true,\n          \"requires\": {\n            \"p-limit\": \"^2.2.0\"\n          }\n        },\n        \"path-exists\": {\n          \"version\": \"4.0.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/path-exists/-/path-exists-4.0.0.tgz\",\n          \"integrity\": \"sha1-UTvb4tO5XXdi6METfvoZXGxhtbM=\",\n          \"dev\": true\n        },\n        \"string-width\": {\n          \"version\": \"4.2.3\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/string-width/-/string-width-4.2.3.tgz\",\n          \"integrity\": \"sha1-JpxxF9J7Ba0uU2gwqOyJXvnG0BA=\",\n          \"dev\": true,\n          \"requires\": {\n            \"emoji-regex\": \"^8.0.0\",\n            \"is-fullwidth-code-point\": \"^3.0.0\",\n            \"strip-ansi\": \"^6.0.1\"\n          }\n        },\n        \"strip-ansi\": {\n          \"version\": \"6.0.1\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/strip-ansi/-/strip-ansi-6.0.1.tgz\",\n          \"integrity\": \"sha1-nibGPTD1NEPpSJSVshBdN7Z6hdk=\",\n          \"dev\": true,\n          \"requires\": {\n            \"ansi-regex\": \"^5.0.1\"\n          }\n        },\n        \"wrap-ansi\": {\n          \"version\": \"6.2.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/wrap-ansi/-/wrap-ansi-6.2.0.tgz\",\n          \"integrity\": \"sha1-6Tk7oHEC5skaOyIUePAlfNKFblM=\",\n          \"dev\": true,\n          \"requires\": {\n            \"ansi-styles\": \"^4.0.0\",\n            \"string-width\": \"^4.1.0\",\n            \"strip-ansi\": \"^6.0.0\"\n          }\n        },\n        \"yargs\": {\n          \"version\": \"15.4.1\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/yargs/-/yargs-15.4.1.tgz\",\n          \"integrity\": \"sha1-DYehbeAa7p2L7Cv7909nhRcw9Pg=\",\n          \"dev\": true,\n          \"requires\": {\n            \"cliui\": \"^6.0.0\",\n            \"decamelize\": \"^1.2.0\",\n            \"find-up\": \"^4.1.0\",\n            \"get-caller-file\": \"^2.0.1\",\n            \"require-directory\": \"^2.1.1\",\n            \"require-main-filename\": \"^2.0.0\",\n            \"set-blocking\": \"^2.0.0\",\n            \"string-width\": \"^4.2.0\",\n            \"which-module\": \"^2.0.0\",\n            \"y18n\": \"^4.0.0\",\n            \"yargs-parser\": \"^18.1.2\"\n          }\n        },\n        \"yargs-parser\": {\n          \"version\": \"18.1.3\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/yargs-parser/-/yargs-parser-18.1.3.tgz\",\n          \"integrity\": \"sha1-vmjEl1xrKr9GkjawyHA2L6sJp7A=\",\n          \"dev\": true,\n          \"requires\": {\n            \"camelcase\": \"^5.0.0\",\n            \"decamelize\": \"^1.2.0\"\n          }\n        }\n      }\n    },\n    \"object-inspect\": {\n      \"version\": \"1.13.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/object-inspect/-/object-inspect-1.13.3.tgz\",\n      \"integrity\": \"sha1-8UwYPeURMCQ9bRiuFJN1/1DqSIo=\",\n      \"dev\": true\n    },\n    \"object-keys\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/object-keys/-/object-keys-1.1.1.tgz\",\n      \"integrity\": \"sha1-HEfyct8nfzsdrwYWd9nILiMixg4=\",\n      \"dev\": true\n    },\n    \"object.assign\": {\n      \"version\": \"4.1.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/object.assign/-/object.assign-4.1.0.tgz\",\n      \"integrity\": \"sha1-lovxEA15Vrs8oIbwBvhGs7xACNo=\",\n      \"dev\": true,\n      \"requires\": {\n        \"define-properties\": \"^1.1.2\",\n        \"function-bind\": \"^1.1.1\",\n        \"has-symbols\": \"^1.0.0\",\n        \"object-keys\": \"^1.0.11\"\n      }\n    },\n    \"object.getownpropertydescriptors\": {\n      \"version\": \"2.1.8\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/object.getownpropertydescriptors/-/object.getownpropertydescriptors-2.1.8.tgz\",\n      \"integrity\": \"sha1-Lx/gYG7Bp2WBVMzU9yhQT2lmeSM=\",\n      \"dev\": true,\n      \"requires\": {\n        \"array.prototype.reduce\": \"^1.0.6\",\n        \"call-bind\": \"^1.0.7\",\n        \"define-properties\": \"^1.2.1\",\n        \"es-abstract\": \"^1.23.2\",\n        \"es-object-atoms\": \"^1.0.0\",\n        \"gopd\": \"^1.0.1\",\n        \"safe-array-concat\": \"^1.1.2\"\n      }\n    },\n    \"once\": {\n      \"version\": \"1.4.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/once/-/once-1.4.0.tgz\",\n      \"integrity\": \"sha1-WDsap3WWHUsROsF9nFC6753Xa9E=\",\n      \"dev\": true,\n      \"requires\": {\n        \"wrappy\": \"1\"\n      }\n    },\n    \"p-limit\": {\n      \"version\": \"2.3.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/p-limit/-/p-limit-2.3.0.tgz\",\n      \"integrity\": \"sha1-PdM8ZHohT9//2DWTPrCG2g3CHbE=\",\n      \"dev\": true,\n      \"requires\": {\n        \"p-try\": \"^2.0.0\"\n      }\n    },\n    \"p-locate\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/p-locate/-/p-locate-3.0.0.tgz\",\n      \"integrity\": \"sha1-Mi1poFwCZLJZl9n0DNiokasAZKQ=\",\n      \"dev\": true,\n      \"requires\": {\n        \"p-limit\": \"^2.0.0\"\n      }\n    },\n    \"p-map\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/p-map/-/p-map-3.0.0.tgz\",\n      \"integrity\": \"sha1-1wTZr4orpoTiYA2aIVmD1BQal50=\",\n      \"dev\": true,\n      \"requires\": {\n        \"aggregate-error\": \"^3.0.0\"\n      }\n    },\n    \"p-try\": {\n      \"version\": \"2.2.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/p-try/-/p-try-2.2.0.tgz\",\n      \"integrity\": \"sha1-yyhoVA4xPWHeWPr741zpAE1VQOY=\",\n      \"dev\": true\n    },\n    \"package-hash\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/package-hash/-/package-hash-4.0.0.tgz\",\n      \"integrity\": \"sha1-NTf2VGZew8w4gnOH/JBMFjxU9QY=\",\n      \"dev\": true,\n      \"requires\": {\n        \"graceful-fs\": \"^4.1.15\",\n        \"hasha\": \"^5.0.0\",\n        \"lodash.flattendeep\": \"^4.4.0\",\n        \"release-zalgo\": \"^1.0.0\"\n      }\n    },\n    \"path-exists\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/path-exists/-/path-exists-3.0.0.tgz\",\n      \"integrity\": \"sha1-zg6+ql94yxiSXqfYENe1mwEP1RU=\",\n      \"dev\": true\n    },\n    \"path-is-absolute\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\n      \"integrity\": \"sha1-F0uSaHNVNP+8es5r9TpanhtcX18=\",\n      \"dev\": true\n    },\n    \"path-key\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/path-key/-/path-key-3.1.1.tgz\",\n      \"integrity\": \"sha1-WB9q3mWMu6ZaDTOA3ndTKVBU83U=\",\n      \"dev\": true\n    },\n    \"path-parse\": {\n      \"version\": \"1.0.7\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/path-parse/-/path-parse-1.0.7.tgz\",\n      \"integrity\": \"sha1-+8EUtgykKzDZ2vWFjkvWi77bZzU=\",\n      \"dev\": true\n    },\n    \"picocolors\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/picocolors/-/picocolors-1.1.1.tgz\",\n      \"integrity\": \"sha1-PTIa8+q5ObCDyPkpodEs2oHCa2s=\",\n      \"dev\": true\n    },\n    \"pkg-dir\": {\n      \"version\": \"4.2.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/pkg-dir/-/pkg-dir-4.2.0.tgz\",\n      \"integrity\": \"sha1-8JkTPfft5CLoHR2ESCcO6z5CYfM=\",\n      \"dev\": true,\n      \"requires\": {\n        \"find-up\": \"^4.0.0\"\n      },\n      \"dependencies\": {\n        \"find-up\": {\n          \"version\": \"4.1.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/find-up/-/find-up-4.1.0.tgz\",\n          \"integrity\": \"sha1-l6/n1s3AvFkoWEt8jXsW6KmqXRk=\",\n          \"dev\": true,\n          \"requires\": {\n            \"locate-path\": \"^5.0.0\",\n            \"path-exists\": \"^4.0.0\"\n          }\n        },\n        \"locate-path\": {\n          \"version\": \"5.0.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/locate-path/-/locate-path-5.0.0.tgz\",\n          \"integrity\": \"sha1-Gvujlq/WdqbUJQTQpno6frn2KqA=\",\n          \"dev\": true,\n          \"requires\": {\n            \"p-locate\": \"^4.1.0\"\n          }\n        },\n        \"p-locate\": {\n          \"version\": \"4.1.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/p-locate/-/p-locate-4.1.0.tgz\",\n          \"integrity\": \"sha1-o0KLtwiLOmApL2aRkni3wpetTwc=\",\n          \"dev\": true,\n          \"requires\": {\n            \"p-limit\": \"^2.2.0\"\n          }\n        },\n        \"path-exists\": {\n          \"version\": \"4.0.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/path-exists/-/path-exists-4.0.0.tgz\",\n          \"integrity\": \"sha1-UTvb4tO5XXdi6METfvoZXGxhtbM=\",\n          \"dev\": true\n        }\n      }\n    },\n    \"possible-typed-array-names\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/possible-typed-array-names/-/possible-typed-array-names-1.0.0.tgz\",\n      \"integrity\": \"sha1-ibtjxvraLD6QrcSmR77us5zHv48=\",\n      \"dev\": true\n    },\n    \"process-on-spawn\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/process-on-spawn/-/process-on-spawn-1.1.0.tgz\",\n      \"integrity\": \"sha1-nVmZuoezvwqKywUyLWny9apPt2M=\",\n      \"dev\": true,\n      \"requires\": {\n        \"fromentries\": \"^1.2.0\"\n      }\n    },\n    \"q\": {\n      \"version\": \"1.4.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/q/-/q-1.4.1.tgz\",\n      \"integrity\": \"sha1-VXBbzZPF82c1MMLCy8DCs63cKG4=\",\n      \"dev\": true\n    },\n    \"qs\": {\n      \"version\": \"6.13.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/qs/-/qs-6.13.1.tgz\",\n      \"integrity\": \"sha1-POX8cr06gXG4XJm5PGXdILfRsW4=\",\n      \"dev\": true,\n      \"requires\": {\n        \"side-channel\": \"^1.0.6\"\n      }\n    },\n    \"rechoir\": {\n      \"version\": \"0.6.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/rechoir/-/rechoir-0.6.2.tgz\",\n      \"integrity\": \"sha1-hSBLVNuoLVdC4oyWdW70OvUOM4Q=\",\n      \"dev\": true,\n      \"requires\": {\n        \"resolve\": \"^1.1.6\"\n      }\n    },\n    \"reflect.getprototypeof\": {\n      \"version\": \"1.0.7\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/reflect.getprototypeof/-/reflect.getprototypeof-1.0.7.tgz\",\n      \"integrity\": \"sha1-BDEbM6G3E8pet7Wu2ZUKhkgYWOU=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"define-properties\": \"^1.2.1\",\n        \"es-abstract\": \"^1.23.5\",\n        \"es-errors\": \"^1.3.0\",\n        \"get-intrinsic\": \"^1.2.4\",\n        \"gopd\": \"^1.0.1\",\n        \"which-builtin-type\": \"^1.1.4\"\n      }\n    },\n    \"regexp.prototype.flags\": {\n      \"version\": \"1.5.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/regexp.prototype.flags/-/regexp.prototype.flags-1.5.3.tgz\",\n      \"integrity\": \"sha1-s65AsdJJm4NQqyw/5u84RdOpb0I=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"define-properties\": \"^1.2.1\",\n        \"es-errors\": \"^1.3.0\",\n        \"set-function-name\": \"^2.0.2\"\n      }\n    },\n    \"release-zalgo\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/release-zalgo/-/release-zalgo-1.0.0.tgz\",\n      \"integrity\": \"sha1-CXALflB0Mpc5Mw5TXFqQ+2eFFzA=\",\n      \"dev\": true,\n      \"requires\": {\n        \"es6-error\": \"^4.0.1\"\n      }\n    },\n    \"require-directory\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/require-directory/-/require-directory-2.1.1.tgz\",\n      \"integrity\": \"sha1-jGStX9MNqxyXbiNE/+f3kqam30I=\",\n      \"dev\": true\n    },\n    \"require-main-filename\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/require-main-filename/-/require-main-filename-2.0.0.tgz\",\n      \"integrity\": \"sha1-0LMp7MfMD2Fkn2IhW+aa9UqomJs=\",\n      \"dev\": true\n    },\n    \"resolve\": {\n      \"version\": \"1.22.8\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/resolve/-/resolve-1.22.8.tgz\",\n      \"integrity\": \"sha1-tsh6nyqgbfq1Lj1wrIzeMh+lpI0=\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-core-module\": \"^2.13.0\",\n        \"path-parse\": \"^1.0.7\",\n        \"supports-preserve-symlinks-flag\": \"^1.0.0\"\n      }\n    },\n    \"resolve-from\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/resolve-from/-/resolve-from-5.0.0.tgz\",\n      \"integrity\": \"sha1-w1IlhD3493bfIcV1V7wIfp39/Gk=\",\n      \"dev\": true\n    },\n    \"rimraf\": {\n      \"version\": \"3.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/rimraf/-/rimraf-3.0.2.tgz\",\n      \"integrity\": \"sha1-8aVAK6YiCtUswSgrrBrjqkn9Bho=\",\n      \"dev\": true,\n      \"requires\": {\n        \"glob\": \"^7.1.3\"\n      }\n    },\n    \"safe-array-concat\": {\n      \"version\": \"1.1.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/safe-array-concat/-/safe-array-concat-1.1.2.tgz\",\n      \"integrity\": \"sha1-gdd+4MTouGNjUifHISeN1STCDts=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"get-intrinsic\": \"^1.2.4\",\n        \"has-symbols\": \"^1.0.3\",\n        \"isarray\": \"^2.0.5\"\n      }\n    },\n    \"safe-regex-test\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/safe-regex-test/-/safe-regex-test-1.0.3.tgz\",\n      \"integrity\": \"sha1-pbTA8G4KtQ6iw5XBTYNxIykkw3c=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.6\",\n        \"es-errors\": \"^1.3.0\",\n        \"is-regex\": \"^1.1.4\"\n      }\n    },\n    \"sanitize-filename\": {\n      \"version\": \"1.6.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/sanitize-filename/-/sanitize-filename-1.6.3.tgz\",\n      \"integrity\": \"sha1-dV69dSBFkxl34wsgJdNA18kJA3g=\",\n      \"dev\": true,\n      \"requires\": {\n        \"truncate-utf8-bytes\": \"^1.0.0\"\n      }\n    },\n    \"semver\": {\n      \"version\": \"5.7.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/semver/-/semver-5.7.2.tgz\",\n      \"integrity\": \"sha1-SNVdtzfDKHzUg14X+hP+rOHEHvg=\",\n      \"dev\": true\n    },\n    \"set-blocking\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/set-blocking/-/set-blocking-2.0.0.tgz\",\n      \"integrity\": \"sha1-BF+XgtARrppoA93TgrJDkrPYkPc=\",\n      \"dev\": true\n    },\n    \"set-function-length\": {\n      \"version\": \"1.2.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/set-function-length/-/set-function-length-1.2.2.tgz\",\n      \"integrity\": \"sha1-qscjFBmOrtl1z3eyw7a4gGleVEk=\",\n      \"dev\": true,\n      \"requires\": {\n        \"define-data-property\": \"^1.1.4\",\n        \"es-errors\": \"^1.3.0\",\n        \"function-bind\": \"^1.1.2\",\n        \"get-intrinsic\": \"^1.2.4\",\n        \"gopd\": \"^1.0.1\",\n        \"has-property-descriptors\": \"^1.0.2\"\n      }\n    },\n    \"set-function-name\": {\n      \"version\": \"2.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/set-function-name/-/set-function-name-2.0.2.tgz\",\n      \"integrity\": \"sha1-FqcFxaDcL15jjKltiozU4cK5CYU=\",\n      \"dev\": true,\n      \"requires\": {\n        \"define-data-property\": \"^1.1.4\",\n        \"es-errors\": \"^1.3.0\",\n        \"functions-have-names\": \"^1.2.3\",\n        \"has-property-descriptors\": \"^1.0.2\"\n      }\n    },\n    \"shebang-command\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/shebang-command/-/shebang-command-2.0.0.tgz\",\n      \"integrity\": \"sha1-zNCvT4g1+9wmW4JGGq8MNmY/NOo=\",\n      \"dev\": true,\n      \"requires\": {\n        \"shebang-regex\": \"^3.0.0\"\n      }\n    },\n    \"shebang-regex\": {\n      \"version\": \"3.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/shebang-regex/-/shebang-regex-3.0.0.tgz\",\n      \"integrity\": \"sha1-rhbxZE2HPsrYQ7AwexQzYtTEIXI=\",\n      \"dev\": true\n    },\n    \"shelljs\": {\n      \"version\": \"0.8.5\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/shelljs/-/shelljs-0.8.5.tgz\",\n      \"integrity\": \"sha1-3gVUCNg2G+1mxmnS8ABTjO2O4gw=\",\n      \"dev\": true,\n      \"requires\": {\n        \"glob\": \"^7.0.0\",\n        \"interpret\": \"^1.0.0\",\n        \"rechoir\": \"^0.6.2\"\n      }\n    },\n    \"side-channel\": {\n      \"version\": \"1.0.6\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/side-channel/-/side-channel-1.0.6.tgz\",\n      \"integrity\": \"sha1-q9Jft80kuvRUZkBrEJa3gxySFfI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"es-errors\": \"^1.3.0\",\n        \"get-intrinsic\": \"^1.2.4\",\n        \"object-inspect\": \"^1.13.1\"\n      }\n    },\n    \"signal-exit\": {\n      \"version\": \"3.0.7\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/signal-exit/-/signal-exit-3.0.7.tgz\",\n      \"integrity\": \"sha1-qaF2f4r4QVURTqq9c/mSc8j1mtk=\",\n      \"dev\": true\n    },\n    \"source-map\": {\n      \"version\": \"0.6.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/source-map/-/source-map-0.6.1.tgz\",\n      \"integrity\": \"sha1-dHIq8y6WFOnCh6jQu95IteLxomM=\",\n      \"dev\": true\n    },\n    \"spawn-wrap\": {\n      \"version\": \"2.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/spawn-wrap/-/spawn-wrap-2.0.0.tgz\",\n      \"integrity\": \"sha1-EDaFuLj5t5dxMYgnqnhlCmENRX4=\",\n      \"dev\": true,\n      \"requires\": {\n        \"foreground-child\": \"^2.0.0\",\n        \"is-windows\": \"^1.0.2\",\n        \"make-dir\": \"^3.0.0\",\n        \"rimraf\": \"^3.0.0\",\n        \"signal-exit\": \"^3.0.2\",\n        \"which\": \"^2.0.1\"\n      },\n      \"dependencies\": {\n        \"which\": {\n          \"version\": \"2.0.2\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/which/-/which-2.0.2.tgz\",\n          \"integrity\": \"sha1-fGqN0KY2oDJ+ELWckobu6T8/UbE=\",\n          \"dev\": true,\n          \"requires\": {\n            \"isexe\": \"^2.0.0\"\n          }\n        }\n      }\n    },\n    \"sprintf-js\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/sprintf-js/-/sprintf-js-1.0.3.tgz\",\n      \"integrity\": \"sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw=\",\n      \"dev\": true\n    },\n    \"string-width\": {\n      \"version\": \"2.1.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/string-width/-/string-width-2.1.1.tgz\",\n      \"integrity\": \"sha1-q5Pyeo3BPSjKyBXEYhQ6bZASrp4=\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-fullwidth-code-point\": \"^2.0.0\",\n        \"strip-ansi\": \"^4.0.0\"\n      }\n    },\n    \"string.prototype.trim\": {\n      \"version\": \"1.2.9\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/string.prototype.trim/-/string.prototype.trim-1.2.9.tgz\",\n      \"integrity\": \"sha1-tvoybXLSx4tt8C93Wcc/j2J0+qQ=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"define-properties\": \"^1.2.1\",\n        \"es-abstract\": \"^1.23.0\",\n        \"es-object-atoms\": \"^1.0.0\"\n      }\n    },\n    \"string.prototype.trimend\": {\n      \"version\": \"1.0.8\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/string.prototype.trimend/-/string.prototype.trimend-1.0.8.tgz\",\n      \"integrity\": \"sha1-NlG4UTcZ6Kn0jefy93ZAsmZSsik=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"define-properties\": \"^1.2.1\",\n        \"es-object-atoms\": \"^1.0.0\"\n      }\n    },\n    \"string.prototype.trimstart\": {\n      \"version\": \"1.0.8\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz\",\n      \"integrity\": \"sha1-fug03ajHwX7/MRhHK7Nb/tqjTd4=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"define-properties\": \"^1.2.1\",\n        \"es-object-atoms\": \"^1.0.0\"\n      }\n    },\n    \"strip-ansi\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/strip-ansi/-/strip-ansi-4.0.0.tgz\",\n      \"integrity\": \"sha1-qEeQIusaw2iocTibY1JixQXuNo8=\",\n      \"dev\": true,\n      \"requires\": {\n        \"ansi-regex\": \"^3.0.0\"\n      }\n    },\n    \"strip-bom\": {\n      \"version\": \"4.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/strip-bom/-/strip-bom-4.0.0.tgz\",\n      \"integrity\": \"sha1-nDUFwdtFvO3KPZz3oW9cWqOQGHg=\",\n      \"dev\": true\n    },\n    \"strip-json-comments\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/strip-json-comments/-/strip-json-comments-2.0.1.tgz\",\n      \"integrity\": \"sha1-PFMZQukIwml8DsNEhYwobHygpgo=\",\n      \"dev\": true\n    },\n    \"strnum\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/strnum/-/strnum-1.0.5.tgz\",\n      \"integrity\": \"sha1-XE6Cn+Fa1P8NIMPbWsl7c8mwcts=\",\n      \"dev\": true\n    },\n    \"supports-color\": {\n      \"version\": \"6.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/supports-color/-/supports-color-6.0.0.tgz\",\n      \"integrity\": \"sha1-ds/nQs8fQbubHCmtAwaMBbTA5Ao=\",\n      \"dev\": true,\n      \"requires\": {\n        \"has-flag\": \"^3.0.0\"\n      }\n    },\n    \"supports-preserve-symlinks-flag\": {\n      \"version\": \"1.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz\",\n      \"integrity\": \"sha1-btpL00SjyUrqN21MwxvHcxEDngk=\",\n      \"dev\": true\n    },\n    \"test-exclude\": {\n      \"version\": \"6.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/test-exclude/-/test-exclude-6.0.0.tgz\",\n      \"integrity\": \"sha1-BKhphmHYBepvopO2y55jrARO8V4=\",\n      \"dev\": true,\n      \"requires\": {\n        \"@istanbuljs/schema\": \"^0.1.2\",\n        \"glob\": \"^7.1.4\",\n        \"minimatch\": \"^3.0.4\"\n      },\n      \"dependencies\": {\n        \"glob\": {\n          \"version\": \"7.2.3\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/glob/-/glob-7.2.3.tgz\",\n          \"integrity\": \"sha1-uN8PuAK7+o6JvR2Ti04WV47UTys=\",\n          \"dev\": true,\n          \"requires\": {\n            \"fs.realpath\": \"^1.0.0\",\n            \"inflight\": \"^1.0.4\",\n            \"inherits\": \"2\",\n            \"minimatch\": \"^3.1.1\",\n            \"once\": \"^1.3.0\",\n            \"path-is-absolute\": \"^1.0.0\"\n          }\n        },\n        \"minimatch\": {\n          \"version\": \"3.1.2\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/minimatch/-/minimatch-3.1.2.tgz\",\n          \"integrity\": \"sha1-Gc0ZS/0+Qo8EmnCBfAONiatL41s=\",\n          \"dev\": true,\n          \"requires\": {\n            \"brace-expansion\": \"^1.1.7\"\n          }\n        }\n      }\n    },\n    \"tr46\": {\n      \"version\": \"0.0.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/tr46/-/tr46-0.0.3.tgz\",\n      \"integrity\": \"sha1-gYT9NH2snNwYWZLzpmIuFLnZq2o=\",\n      \"dev\": true\n    },\n    \"truncate-utf8-bytes\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/truncate-utf8-bytes/-/truncate-utf8-bytes-1.0.2.tgz\",\n      \"integrity\": \"sha1-QFkjkJWS1W94pYGENLC3hInKXys=\",\n      \"dev\": true,\n      \"requires\": {\n        \"utf8-byte-length\": \"^1.0.1\"\n      }\n    },\n    \"tunnel\": {\n      \"version\": \"0.0.6\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/tunnel/-/tunnel-0.0.6.tgz\",\n      \"integrity\": \"sha1-cvExSzSlsZLbASMk3yzFh8pH+Sw=\",\n      \"dev\": true\n    },\n    \"type-fest\": {\n      \"version\": \"0.8.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/type-fest/-/type-fest-0.8.1.tgz\",\n      \"integrity\": \"sha1-CeJJ696FHTseSNJ8EFREZn8XuD0=\",\n      \"dev\": true\n    },\n    \"typed-array-buffer\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/typed-array-buffer/-/typed-array-buffer-1.0.2.tgz\",\n      \"integrity\": \"sha1-GGfF2Dsg/LXM8yZJ5eL8dCRHT/M=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"es-errors\": \"^1.3.0\",\n        \"is-typed-array\": \"^1.1.13\"\n      }\n    },\n    \"typed-array-byte-length\": {\n      \"version\": \"1.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/typed-array-byte-length/-/typed-array-byte-length-1.0.1.tgz\",\n      \"integrity\": \"sha1-2Sly08/5mj+i52Wij83A8did7Gc=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"for-each\": \"^0.3.3\",\n        \"gopd\": \"^1.0.1\",\n        \"has-proto\": \"^1.0.3\",\n        \"is-typed-array\": \"^1.1.13\"\n      }\n    },\n    \"typed-array-byte-offset\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/typed-array-byte-offset/-/typed-array-byte-offset-1.0.3.tgz\",\n      \"integrity\": \"sha1-P6nyJWdwDMhqr4ah5xdvdLWWAPI=\",\n      \"dev\": true,\n      \"requires\": {\n        \"available-typed-arrays\": \"^1.0.7\",\n        \"call-bind\": \"^1.0.7\",\n        \"for-each\": \"^0.3.3\",\n        \"gopd\": \"^1.0.1\",\n        \"has-proto\": \"^1.0.3\",\n        \"is-typed-array\": \"^1.1.13\",\n        \"reflect.getprototypeof\": \"^1.0.6\"\n      }\n    },\n    \"typed-array-length\": {\n      \"version\": \"1.0.7\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/typed-array-length/-/typed-array-length-1.0.7.tgz\",\n      \"integrity\": \"sha1-7k3v+YS2S+HhGLDejJyHfVznPT0=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"for-each\": \"^0.3.3\",\n        \"gopd\": \"^1.0.1\",\n        \"is-typed-array\": \"^1.1.13\",\n        \"possible-typed-array-names\": \"^1.0.0\",\n        \"reflect.getprototypeof\": \"^1.0.6\"\n      }\n    },\n    \"typed-rest-client\": {\n      \"version\": \"1.8.11\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/typed-rest-client/-/typed-rest-client-1.8.11.tgz\",\n      \"integrity\": \"sha1-aQbwLjyR6NhRV58lWr8P1ggAoE0=\",\n      \"dev\": true,\n      \"requires\": {\n        \"qs\": \"^6.9.1\",\n        \"tunnel\": \"0.0.6\",\n        \"underscore\": \"^1.12.1\"\n      }\n    },\n    \"typedarray-to-buffer\": {\n      \"version\": \"3.1.5\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/typedarray-to-buffer/-/typedarray-to-buffer-3.1.5.tgz\",\n      \"integrity\": \"sha1-qX7nqf9CaRufeD/xvFES/j/KkIA=\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-typedarray\": \"^1.0.0\"\n      }\n    },\n    \"typescript\": {\n      \"version\": \"4.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/typescript/-/typescript-4.0.2.tgz\",\n      \"integrity\": \"sha1-fqfIh3fHI8aB4zv3mIvl0AjQWsI=\",\n      \"dev\": true\n    },\n    \"unbox-primitive\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/unbox-primitive/-/unbox-primitive-1.0.2.tgz\",\n      \"integrity\": \"sha1-KQMgIQV9Xmzb0IxRKcIm3/jtb54=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.2\",\n        \"has-bigints\": \"^1.0.2\",\n        \"has-symbols\": \"^1.0.3\",\n        \"which-boxed-primitive\": \"^1.0.2\"\n      }\n    },\n    \"underscore\": {\n      \"version\": \"1.13.7\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/underscore/-/underscore-1.13.7.tgz\",\n      \"integrity\": \"sha1-lw4zljr5p92iKPF+voOZ5fvmOhA=\",\n      \"dev\": true\n    },\n    \"update-browserslist-db\": {\n      \"version\": \"1.1.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/update-browserslist-db/-/update-browserslist-db-1.1.1.tgz\",\n      \"integrity\": \"sha1-gIRvuh156CVH+2YfjRQeCUV1X+U=\",\n      \"dev\": true,\n      \"requires\": {\n        \"escalade\": \"^3.2.0\",\n        \"picocolors\": \"^1.1.0\"\n      }\n    },\n    \"utf8-byte-length\": {\n      \"version\": \"1.0.5\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/utf8-byte-length/-/utf8-byte-length-1.0.5.tgz\",\n      \"integrity\": \"sha1-+fY5ENFVNu4rLV3UZlOJcV6sXB4=\",\n      \"dev\": true\n    },\n    \"validator\": {\n      \"version\": \"13.12.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/validator/-/validator-13.12.0.tgz\",\n      \"integrity\": \"sha1-fXjna6hVBNo/7k/Rkis4WRTUs18=\",\n      \"dev\": true\n    },\n    \"webidl-conversions\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/webidl-conversions/-/webidl-conversions-3.0.1.tgz\",\n      \"integrity\": \"sha1-JFNCdeKnvGvnvIZhHMFq4KVlSHE=\",\n      \"dev\": true\n    },\n    \"whatwg-url\": {\n      \"version\": \"5.0.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/whatwg-url/-/whatwg-url-5.0.0.tgz\",\n      \"integrity\": \"sha1-lmRU6HZUYuN2RNNib2dCzotwll0=\",\n      \"dev\": true,\n      \"requires\": {\n        \"tr46\": \"~0.0.3\",\n        \"webidl-conversions\": \"^3.0.0\"\n      }\n    },\n    \"which\": {\n      \"version\": \"1.3.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/which/-/which-1.3.1.tgz\",\n      \"integrity\": \"sha1-pFBD1U9YBTFtqNYvn1CRjT2nCwo=\",\n      \"dev\": true,\n      \"requires\": {\n        \"isexe\": \"^2.0.0\"\n      }\n    },\n    \"which-boxed-primitive\": {\n      \"version\": \"1.1.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/which-boxed-primitive/-/which-boxed-primitive-1.1.0.tgz\",\n      \"integrity\": \"sha1-LYUNbErDe5VEGmeJDhnz/ai2xtk=\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-bigint\": \"^1.1.0\",\n        \"is-boolean-object\": \"^1.2.0\",\n        \"is-number-object\": \"^1.1.0\",\n        \"is-string\": \"^1.1.0\",\n        \"is-symbol\": \"^1.1.0\"\n      }\n    },\n    \"which-builtin-type\": {\n      \"version\": \"1.2.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/which-builtin-type/-/which-builtin-type-1.2.0.tgz\",\n      \"integrity\": \"sha1-WAQqyWAteKbRF8foETSd8SaLpjw=\",\n      \"dev\": true,\n      \"requires\": {\n        \"call-bind\": \"^1.0.7\",\n        \"function.prototype.name\": \"^1.1.6\",\n        \"has-tostringtag\": \"^1.0.2\",\n        \"is-async-function\": \"^2.0.0\",\n        \"is-date-object\": \"^1.0.5\",\n        \"is-finalizationregistry\": \"^1.1.0\",\n        \"is-generator-function\": \"^1.0.10\",\n        \"is-regex\": \"^1.1.4\",\n        \"is-weakref\": \"^1.0.2\",\n        \"isarray\": \"^2.0.5\",\n        \"which-boxed-primitive\": \"^1.0.2\",\n        \"which-collection\": \"^1.0.2\",\n        \"which-typed-array\": \"^1.1.15\"\n      }\n    },\n    \"which-collection\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/which-collection/-/which-collection-1.0.2.tgz\",\n      \"integrity\": \"sha1-Yn73YkOSChB+fOjpYZHevksWwqA=\",\n      \"dev\": true,\n      \"requires\": {\n        \"is-map\": \"^2.0.3\",\n        \"is-set\": \"^2.0.3\",\n        \"is-weakmap\": \"^2.0.2\",\n        \"is-weakset\": \"^2.0.3\"\n      }\n    },\n    \"which-module\": {\n      \"version\": \"2.0.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/which-module/-/which-module-2.0.1.tgz\",\n      \"integrity\": \"sha1-d2sf412Qrr6Z6KwV6yQJM4mkpAk=\",\n      \"dev\": true\n    },\n    \"which-typed-array\": {\n      \"version\": \"1.1.16\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/which-typed-array/-/which-typed-array-1.1.16.tgz\",\n      \"integrity\": \"sha1-2020KcRwb+yi8BZ3oUQnjkqMIWs=\",\n      \"dev\": true,\n      \"requires\": {\n        \"available-typed-arrays\": \"^1.0.7\",\n        \"call-bind\": \"^1.0.7\",\n        \"for-each\": \"^0.3.3\",\n        \"gopd\": \"^1.0.1\",\n        \"has-tostringtag\": \"^1.0.2\"\n      }\n    },\n    \"wide-align\": {\n      \"version\": \"1.1.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/wide-align/-/wide-align-1.1.3.tgz\",\n      \"integrity\": \"sha1-rgdOa9wMFKQx6ATmJFScYzsABFc=\",\n      \"dev\": true,\n      \"requires\": {\n        \"string-width\": \"^1.0.2 || 2\"\n      }\n    },\n    \"wrap-ansi\": {\n      \"version\": \"5.1.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/wrap-ansi/-/wrap-ansi-5.1.0.tgz\",\n      \"integrity\": \"sha1-H9H2cjXVttD+54EFYAG/tpTAOwk=\",\n      \"dev\": true,\n      \"requires\": {\n        \"ansi-styles\": \"^3.2.0\",\n        \"string-width\": \"^3.0.0\",\n        \"strip-ansi\": \"^5.0.0\"\n      },\n      \"dependencies\": {\n        \"ansi-regex\": {\n          \"version\": \"4.1.1\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/ansi-regex/-/ansi-regex-4.1.1.tgz\",\n          \"integrity\": \"sha1-Fk2qyHqy1vbbOimHXi0XZlgtq+0=\",\n          \"dev\": true\n        },\n        \"string-width\": {\n          \"version\": \"3.1.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/string-width/-/string-width-3.1.0.tgz\",\n          \"integrity\": \"sha1-InZ74htirxCBV0MG9prFG2IgOWE=\",\n          \"dev\": true,\n          \"requires\": {\n            \"emoji-regex\": \"^7.0.1\",\n            \"is-fullwidth-code-point\": \"^2.0.0\",\n            \"strip-ansi\": \"^5.1.0\"\n          }\n        },\n        \"strip-ansi\": {\n          \"version\": \"5.2.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/strip-ansi/-/strip-ansi-5.2.0.tgz\",\n          \"integrity\": \"sha1-jJpTb+tq/JYr36WxBKUJHBrZwK4=\",\n          \"dev\": true,\n          \"requires\": {\n            \"ansi-regex\": \"^4.1.0\"\n          }\n        }\n      }\n    },\n    \"wrappy\": {\n      \"version\": \"1.0.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/wrappy/-/wrappy-1.0.2.tgz\",\n      \"integrity\": \"sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=\",\n      \"dev\": true\n    },\n    \"write-file-atomic\": {\n      \"version\": \"3.0.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/write-file-atomic/-/write-file-atomic-3.0.3.tgz\",\n      \"integrity\": \"sha1-Vr1cWlxwSBzRnFcb05q5ZaXeVug=\",\n      \"dev\": true,\n      \"requires\": {\n        \"imurmurhash\": \"^0.1.4\",\n        \"is-typedarray\": \"^1.0.0\",\n        \"signal-exit\": \"^3.0.2\",\n        \"typedarray-to-buffer\": \"^3.1.5\"\n      }\n    },\n    \"y18n\": {\n      \"version\": \"4.0.3\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/y18n/-/y18n-4.0.3.tgz\",\n      \"integrity\": \"sha1-tfJZyCzW4zaSHv17/Yv1YN6e7t8=\",\n      \"dev\": true\n    },\n    \"yallist\": {\n      \"version\": \"3.1.1\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/yallist/-/yallist-3.1.1.tgz\",\n      \"integrity\": \"sha1-27fa+b/YusmrRev2ArjLrQ1dCP0=\",\n      \"dev\": true\n    },\n    \"yargs\": {\n      \"version\": \"13.3.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/yargs/-/yargs-13.3.2.tgz\",\n      \"integrity\": \"sha1-rX/+/sGqWVZayRX4Lcyzipwxot0=\",\n      \"dev\": true,\n      \"requires\": {\n        \"cliui\": \"^5.0.0\",\n        \"find-up\": \"^3.0.0\",\n        \"get-caller-file\": \"^2.0.1\",\n        \"require-directory\": \"^2.1.1\",\n        \"require-main-filename\": \"^2.0.0\",\n        \"set-blocking\": \"^2.0.0\",\n        \"string-width\": \"^3.0.0\",\n        \"which-module\": \"^2.0.0\",\n        \"y18n\": \"^4.0.0\",\n        \"yargs-parser\": \"^13.1.2\"\n      },\n      \"dependencies\": {\n        \"ansi-regex\": {\n          \"version\": \"4.1.1\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/ansi-regex/-/ansi-regex-4.1.1.tgz\",\n          \"integrity\": \"sha1-Fk2qyHqy1vbbOimHXi0XZlgtq+0=\",\n          \"dev\": true\n        },\n        \"string-width\": {\n          \"version\": \"3.1.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/string-width/-/string-width-3.1.0.tgz\",\n          \"integrity\": \"sha1-InZ74htirxCBV0MG9prFG2IgOWE=\",\n          \"dev\": true,\n          \"requires\": {\n            \"emoji-regex\": \"^7.0.1\",\n            \"is-fullwidth-code-point\": \"^2.0.0\",\n            \"strip-ansi\": \"^5.1.0\"\n          }\n        },\n        \"strip-ansi\": {\n          \"version\": \"5.2.0\",\n          \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/strip-ansi/-/strip-ansi-5.2.0.tgz\",\n          \"integrity\": \"sha1-jJpTb+tq/JYr36WxBKUJHBrZwK4=\",\n          \"dev\": true,\n          \"requires\": {\n            \"ansi-regex\": \"^4.1.0\"\n          }\n        }\n      }\n    },\n    \"yargs-parser\": {\n      \"version\": \"13.1.2\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/yargs-parser/-/yargs-parser-13.1.2.tgz\",\n      \"integrity\": \"sha1-Ew8JcC667vJlDVTObj5XBvek+zg=\",\n      \"dev\": true,\n      \"requires\": {\n        \"camelcase\": \"^5.0.0\",\n        \"decamelize\": \"^1.2.0\"\n      }\n    },\n    \"yargs-unparser\": {\n      \"version\": \"1.6.0\",\n      \"resolved\": \"https://pkgs.dev.azure.com/mseng/PipelineTools/_packaging/PipelineTools_PublicPackages/npm/registry/yargs-unparser/-/yargs-unparser-1.6.0.tgz\",\n      \"integrity\": \"sha1-7yXCx2n/a9CeSw+dfGBfsnhG6p8=\",\n      \"dev\": true,\n      \"requires\": {\n        \"flat\": \"^4.1.0\",\n        \"lodash\": \"^4.17.15\",\n        \"yargs\": \"^13.3.0\"\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.34375,
          "content": "{\n  \"name\": \"Agent.Tasks\",\n  \"version\": \"0.6.0\",\n  \"description\": \"Tasks for the Azure Pipelines build system\",\n  \"main\": \"make.js\",\n  \"directories\": {\n    \"doc\": \"docs\"\n  },\n  \"scripts\": {\n    \"build\": \"node make.js build\",\n    \"bump\": \"node make.js bump\",\n    \"gensprintly\": \"node make.js gensprintlyzip\",\n    \"test\": \"node make.js test\",\n    \"testLegacy\": \"node make.js testLegacy\",\n    \"package\": \"node make.js package\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/Microsoft/azure-pipelines-tasks\"\n  },\n  \"keywords\": [\n    \"Azure\",\n    \"Pipelines\",\n    \"build\",\n    \"tasks\"\n  ],\n  \"author\": \"Microsoft Corporation\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/Microsoft/azure-pipelines-tasks/issues\"\n  },\n  \"homepage\": \"https://github.com/Microsoft/azure-pipelines-tasks\",\n  \"devDependencies\": {\n    \"adm-zip\": \"0.4.13\",\n    \"azure-devops-node-api\": \"^12.2.0\",\n    \"fast-xml-parser\": \"^4.3.6\",\n    \"js-yaml\": \"^3.13.1\",\n    \"minimatch\": \"3.0.2\",\n    \"minimist\": \"^1.2.8\",\n    \"mocha\": \"^6.2.3\",\n    \"node-fetch\": \"2.6.11\",\n    \"node-uuid\": \"1.4.6\",\n    \"nodejs-file-downloader\": \"^4.11.1\",\n    \"nyc\": \"^15.1.0\",\n    \"q\": \"1.4.1\",\n    \"semver\": \"5.7.2\",\n    \"shelljs\": \"^0.8.5\",\n    \"typed-rest-client\": \"^1.8.9\",\n    \"typescript\": \"4.0.2\",\n    \"validator\": \"^13.7.0\"\n  },\n  \"dependencies\": {\n    \"agent-base\": \"^6.0.2\"\n  }\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "taskbanner.png",
          "type": "blob",
          "size": 22.4970703125,
          "content": null
        },
        {
          "name": "tasks.png",
          "type": "blob",
          "size": 177.8857421875,
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.0859375,
          "content": "{\n    \"compilerOptions\": {\n        \"target\": \"ES6\",\n        \"module\": \"commonjs\"\n    }\n}"
        },
        {
          "name": "tslint.json",
          "type": "blob",
          "size": 6.109375,
          "content": "{\n  \"rules\": {\n    \"react-a11y-aria-unsupported-elements\": true,\n    \"react-a11y-event-has-role\": true,\n    \"react-a11y-image-button-has-alt\": true,\n    \"react-a11y-img-has-alt\": true,\n    \"react-a11y-props\": true,\n    \"react-a11y-role-has-required-aria-props\": true,\n    \"react-a11y-role\": true,\n    \"react-a11y-role-supports-aria-props\": true,\n    \"react-a11y-tabindex-no-positive\": true,\n    \"react-a11y-proptypes\": true,\n    \"align\": [false],\n    \"arrow-parens\": false,\n    \"ban\": false,\n    \"chai-prefer-contains-to-index-of\": true,\n    \"chai-vague-errors\": true,\n    \"class-name\": true,\n    \"comment-format\": [false],\n    \"curly\": true,\n    \"eofline\": false,\n    \"export-name\": true,\n    \"forin\": true,\n    \"function-name\": true,\n    \"import-name\": true,\n    \"indent\": [\n      true,\n      \"spaces\"\n    ],\n    \"interface-name\": [false],\n    \"jquery-deferred-must-complete\": true,\n    \"jsdoc-format\": false,\n    \"label-position\": true,\n    \"max-file-line-count\": [false],\n    \"max-func-body-length\": [\n      true,\n      100,\n      {\n        \"ignore-parameters-to-function-regex\": \"describe\"\n      }\n    ],\n    \"max-line-length\": [\n      true,\n      1400\n    ],\n    \"member-access\": true,\n    \"member-ordering\": [false],\n    \"missing-jsdoc\": true,\n    \"missing-optional-annotation\": true,\n    \"mocha-avoid-only\": true,\n    \"mocha-no-side-effect-code\": true,\n    \"mocha-unneeded-done\": true,\n    \"new-parens\": true,\n    \"no-angle-bracket-type-assertion\": false,\n    \"no-any\": false,\n    \"no-arg\": true,\n    \"no-backbone-get-set-outside-model\": true,\n    \"no-banned-terms\": true,\n    \"no-bitwise\": true,\n    \"no-conditional-assignment\": true,\n    \"no-consecutive-blank-lines\": [true],\n    \"no-console\": [\n      true,\n      \"debug\",\n      \"info\",\n      \"time\",\n      \"timeEnd\",\n      \"trace\"\n    ],\n    \"no-constant-condition\": true,\n    \"no-construct\": true,\n    \"no-control-regex\": true,\n    \"no-cookies\": true,\n    \"no-debugger\": true,\n    \"no-default-export\": true,\n    \"no-delete-expression\": true,\n    \"no-disable-auto-sanitization\": true,\n    \"no-document-domain\": true,\n    \"no-document-write\": true,\n    \"no-duplicate-case\": true,\n    \"no-duplicate-parameter-names\": true,\n    \"no-duplicate-variable\": true,\n    \"no-empty\": true,\n    \"no-empty-interfaces\": true,\n    \"no-empty-line-after-opening-brace\": false,\n    \"no-eval\": true,\n    \"no-exec-script\": true,\n    \"no-for-in\": true,\n    \"no-for-in-array\": false,\n    \"no-function-constructor-with-string-args\": true,\n    \"no-function-expression\": true,\n    \"no-http-string\": [\n      true,\n      \"http://www.example.com/?.*\",\n      \"http://www.examples.com/?.*\"\n    ],\n    \"no-increment-decrement\": true,\n    \"no-inferrable-types\": [false],\n    \"no-inner-html\": true,\n    \"no-internal-module\": false,\n    \"no-invalid-regexp\": true,\n    \"no-invalid-this\": true,\n    \"no-jquery-raw-elements\": true,\n    \"no-mergeable-namespace\": false,\n    \"no-missing-visibility-modifiers\": true,\n    \"no-multiline-string\": true,\n    \"no-multiple-var-decl\": true,\n    \"no-namespace\": false,\n    \"no-null-keyword\": false,\n    \"no-octal-literal\": true,\n    \"no-reference\": true,\n    \"no-regex-spaces\": true,\n    \"no-require-imports\": true,\n    \"no-reserved-keywords\": true,\n    \"no-shadowed-variable\": false,\n    \"no-single-line-block-comment\": true,\n    \"no-sparse-arrays\": true,\n    \"no-stateless-class\": true,\n    \"no-string-based-set-immediate\": true,\n    \"no-string-based-set-interval\": true,\n    \"no-string-based-set-timeout\": true,\n    \"no-string-literal\": true,\n    \"no-suspicious-comment\": true,\n    \"no-switch-case-fall-through\": true,\n    \"no-trailing-whitespace\": true,\n    \"no-typeof-undefined\": true,\n    \"no-unnecessary-bind\": true,\n    \"no-unnecessary-field-initialization\": true,\n    \"no-unnecessary-local-variable\": true,\n    \"no-unnecessary-override\": true,\n    \"no-unnecessary-semicolons\": true,\n    \"no-unsupported-browser-code\": false,\n    \"no-unsafe-finally\": true,\n    \"no-unused-expression\": true,\n    \"no-unused-imports\": false,\n    \"no-unused-new\": true,\n    \"no-use-before-declare\": true,\n    \"no-var-keyword\": true,\n    \"no-var-requires\": true,\n    \"no-var-self\": true,\n    \"no-with-statement\": true,\n    \"object-literal-sort-keys\": false,\n    \"object-literal-key-quotes\": [\n      false,\n      \"as-needed\"\n    ],\n    \"one-line\": [\n      true,\n      \"check-open-brace\",\n      \"check-catch\",\n      \"check-else\",\n      \"check-whitespace\"\n    ],\n    \"one-variable-per-declaration\": [true],\n    \"only-arrow-functions\": [false],\n    \"ordered-imports\": [false],\n    \"prefer-array-literal\": true,\n    \"prefer-const\": true,\n    \"prefer-type-cast\": true,\n    \"promise-must-complete\": true,\n    \"quotemark\": [\n      true,\n      \"single\"\n    ],\n    \"radix\": false,\n    \"react-a11y-titles\": true,\n    \"react-iframe-missing-sandbox\": true,\n    \"react-no-dangerous-html\": true,\n    \"react-this-binding-issue\": true,\n    \"react-tsx-curly-spacing\": true,\n    \"react-unused-props-and-state\": true,\n    \"restrict-plus-operands\": false,\n    \"semicolon\": [true, \"ignore-bound-class-methods\"],\n    \"switch-default\": false,\n    \"trailing-comma\": [\n      true,\n      {\n        \"singleline\": \"never\",\n        \"multiline\": \"never\"\n      }\n    ],\n    \"triple-equals\": [\n      true,\n      \"allow-null-check\"\n    ],\n    \"typedef\": [\n      true,\n      \"parameter\",\n      \"property-declaration\",\n      \"member-variable-declaration\"\n    ],\n    \"typedef-whitespace\": [false],\n    \"underscore-consistent-invocation\": true,\n    \"use-isnan\": true,\n    \"use-named-parameter\": true,\n    \"valid-typeof\": true,\n    \"variable-name\": true,\n    \"whitespace\": [\n      true,\n      \"check-branch\",\n      \"check-decl\",\n      \"check-operator\",\n      \"check-separator\",\n      \"check-type\"\n    ],\n    \"react-a11y-lang\": true,\n    \"react-a11y-meta\": true,\n    \"react-a11y-anchors\": true,\n    \"react-anchor-blank-noopener\": true,\n    \"insecure-random\": true,\n    \"possible-timing-attack\": true,\n    \"non-literal-require\": true,\n    \"adjacent-overload-signatures\": false,\n    \"array-type\": [false],\n    \"completed-docs\": [false],\n    \"cyclomatic-complexity\": [false],\n    \"file-header\": [false],\n    \"max-classes-per-file\": [false],\n    \"no-parameter-properties\": false,\n    \"object-literal-shorthand\": false,\n    \"prefer-for-of\": false\n  }\n}"
        }
      ]
    }
  ]
}