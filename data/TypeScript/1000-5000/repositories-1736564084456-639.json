{
  "metadata": {
    "timestamp": 1736564084456,
    "page": 639,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dotnet/try",
      "stars": 2911,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 1.24609375,
          "content": "\n[*.{c,c++,cc,cp,cpp,cu,cuh,cxx,h,hh,hpp,hxx,inc,inl,ino,ipp,mpp,proto,tpp}]\nindent_style=tab\nindent_size=tab\ntab_width=4\n\n[*.{asax,ascx,aspx,cs,cshtml,css,htm,html,js,jsx,master,razor,skin,ts,tsx,vb,xaml,xamlx,xoml}]\nindent_style=space\nindent_size=4\ntab_width=4\n\n[*.{appxmanifest,build,config,csproj,dbml,discomap,dtd,json,jsproj,lsproj,njsproj,nuspec,proj,props,resjson,resw,resx,StyleCop,targets,tasks,vbproj,xml,xsd}]\nindent_style=space\nindent_size=2\ntab_width=2\n\n[*]\n\n# Microsoft .NET properties\ncsharp_new_line_before_members_in_object_initializers=false\ncsharp_preferred_modifier_order=public, private, protected, internal, new, abstract, virtual, sealed, override, static, readonly, extern, unsafe, volatile, async:suggestion\ncsharp_style_var_elsewhere=true:hint\ncsharp_style_var_for_built_in_types=true:hint\ncsharp_style_var_when_type_is_apparent=true:hint\ndotnet_style_predefined_type_for_locals_parameters_members=true:hint\ndotnet_style_predefined_type_for_member_access=true:hint\ndotnet_style_qualification_for_event=false:warning\ndotnet_style_qualification_for_field=false:warning\ndotnet_style_qualification_for_method=false:warning\ndotnet_style_qualification_for_property=false:warning\ndotnet_style_require_accessibility_modifiers=for_non_interface_members:hint\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 6.62890625,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.rsuser\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n.trydotnet-*\n.dotnet/\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Mono auto generated files\nmono_crash.*\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\n[Aa][Rr][Mm]/\n[Aa][Rr][Mm]64/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n.packages\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_h.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*_wpftmp.csproj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n*.ncrunch*.user\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# NuGet Symbol Packages\n*.snupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n*.appxbundle\n*.appxupload\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!?*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n*- [Bb]ackup.rdl\n*- [Bb]ackup ([0-9]).rdl\n*- [Bb]ackup ([0-9][0-9]).rdl\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# CodeRush personal settings\n.cr/personal\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\n# tools/**\n# !tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n# Local History for Visual Studio\n.localhistory/\n\n# BeatPulse healthcheck temp database\nhealthchecksdb\n\n# Backup folder for Package Reference Convert tool in Visual Studio 2017\nMigrationBackup/\n\nwwwroot/api/\n\nwwwroot/client/\n\nMLS\\.Agent/wwwroot/api/\n\nMLS\\.Agent/wwwroot/client/\n\nMLS\\.Agent/wwwroot/css/\n\n*.trx\n\n\nMicrosoft\\.DotNet\\.Try\\.js/\\.rpt2_cache/\n\nMicrosoft\\.DotNet\\.Try\\.js/dist/\n\ndocs/\\.ionide/\n\n\\.ionide/\n\n\n.ipynb_checkpoints/\n\n#Backup files\n*.bak\nNotebookExamples/*/Samples/housing.csv\n\nsrc/microsoft-trydotnet-editor/test-results/\n\nsrc/microsoft-trydotnet-editor/dist/\n\nsrc/microsoft-trydotnet-editor/simulatorGenerator/\n\nsrc/microsoft-trydotnet-editor/lib/\n\nsrc/microsoft-trydotnet/test-results/\n\nsrc/microsoft-trydotnet/dist/\n\nsrc/microsoft-trydotnet/simulatorGenerator/\n\nsrc/microsoft-trydotnet/lib/\n\nsrc/Microsoft.TryDotNet/wwwroot/api/\n\nsrc/Microsoft.TryDotNet/wwwroot/css/trydotnet.css\n\nsrc/microsoft-learn-mock/dist/\n\nsrc/microsoft-learn-mock/site/index.js\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.251953125,
          "content": "# Code of Conduct\n\nThis project has adopted the code of conduct defined by the Contributor Covenant\nto clarify expected behavior in our community.\nFor more information, see the [.NET Foundation Code of Conduct](https://dotnetfoundation.org/code-of-conduct).\n"
        },
        {
          "name": "Developer-guide.ipynb",
          "type": "blob",
          "size": 51.1376953125,
          "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Prerequisites\\n\",\n    \"\\n\",\n    \"In order to build Try .NET, you'll need the following installed:\\n\",\n    \"\\n\",\n    \"* The [.NET 8 SDK](https://learn.microsoft.com/en-us/dotnet/core/install/).\\n\",\n    \"* The LTS version of [Node.js](https://nodejs.org/en/download).\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# 1: [Optional] Build .NET Interactive\\n\",\n    \"\\n\",\n    \"The core functionality in Try .NET is the .NET Interactive repo, which contains the `CSharpProjectKernel` that powers Try .NET's compilation and language services. \\n\",\n    \"\\n\",\n    \"* If you're making changes in that layer, then you'll need to build the .NET Interactive packages locally. \\n\",\n    \"\\n\",\n    \"* If not, skip to step 2.1.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 1.1: Clone, build, and pack .NET Interactive\\n\",\n    \"\\n\",\n    \"First, make sure you have the [.NET Interactive repo](https://github.com/dotnet/interactive) forked and cloned. Set the path to the repo root in the following cell. \\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"dotnet_interactive\": {\n     \"language\": \"pwsh\"\n    },\n    \"polyglot_notebook\": {\n     \"kernelName\": \"pwsh\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"$dotnetInteractiveRepoPath = Read-Host -Prompt \\\"Enter the path to the root of your dotnet/interactive clone\\\"\\n\",\n    \"$dotnetInteractiveRepoPath\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Follow the instructions to build .NET Interactive in the [developer guide](https://github.com/dotnet/interactive/blob/main/DEVELOPER-GUIDE.md). \\n\",\n    \"\\n\",\n    \"You don't need to set up a local build of the Polyglot Notebooks extension to work on Try .NET.\\n\",\n    \"\\n\",\n    \"The following script will build the project and copy the generated packages to C:\\\\temp\\\\packages\\\\ which will be be used a NuGet package source when building Try .NET.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"dotnet_interactive\": {\n     \"language\": \"pwsh\"\n    },\n    \"polyglot_notebook\": {\n     \"kernelName\": \"pwsh\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"Invoke-Expression \\\"$dotnetInteractiveRepoPath\\\\repack.ps1\\\"\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 1.2: Update Microsoft.DotNet.Interactive.CSharpProject version used by Try .NET\\n\",\n    \"\\n\",\n    \"This step only needs to be done if you're changing code from the .NET Interactive repo.\\n\",\n    \"\\n\",\n    \"This step modifies NuGet.config to reference the local package source where .NET Interactive packages build in Step 1.* should be found.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"dotnet_interactive\": {\n     \"language\": \"pwsh\"\n    },\n    \"polyglot_notebook\": {\n     \"kernelName\": \"pwsh\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"$tryDotnetRepoPath = Get-Location\\n\",\n    \"\\n\",\n    \"$nugetConfigPath = Join-Path $tryDotnetRepoPath 'NuGet.config'\\n\",\n    \"[xml]$nugetConfig = Get-Content $nugetConfigPath\\n\",\n    \"\\n\",\n    \"$newPackageSource = $nugetConfig.CreateElement(\\\"add\\\")\\n\",\n    \"$newPackageSource.SetAttribute(\\\"key\\\", \\\"LocalDevPackages\\\")\\n\",\n    \"$newPackageSource.SetAttribute(\\\"value\\\", \\\"C:\\\\temp\\\\packages\\\")\\n\",\n    \"\\n\",\n    \"$packageSourcesNode = $nugetConfig.SelectSingleNode('configuration/packageSources')\\n\",\n    \"$packageSourcesNode.AppendChild($newPackageSource) > $null\\n\",\n    \"\\n\",\n    \"$packageMappingNode = $nugetConfig.CreateElement(\\\"packageSource\\\")\\n\",\n    \"$packageMappingNode.SetAttribute(\\\"key\\\", \\\"LocalDevPackages\\\")\\n\",\n    \"$packageNode = $nugetConfig.CreateElement(\\\"package\\\")\\n\",\n    \"$packageNode.SetAttribute(\\\"pattern\\\", \\\"*\\\")\\n\",\n    \"$packageMappingNode.AppendChild($packageNode) > $null\\n\",\n    \"\\n\",\n    \"$packageSourcesNode = $nugetConfig.SelectSingleNode('configuration/packageSourceMapping')\\n\",\n    \"$packageSourcesNode.AppendChild($packageMappingNode) > $null\\n\",\n    \"\\n\",\n    \"$nugetConfig.Save($nugetConfigPath)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Next, update the referenced version of the package.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"dotnet_interactive\": {\n     \"language\": \"pwsh\"\n    },\n    \"polyglot_notebook\": {\n     \"kernelName\": \"pwsh\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"# Define the path to the Directory.Packages.props file\\n\",\n    \"$packagesPropsPath = \\\"$tryDotnetRepoPath\\\\Directory.Packages.props\\\"\\n\",\n    \"\\n\",\n    \"# Load the XML content of the Directory.Packages.props file\\n\",\n    \"[xml]$packagesProps = Get-Content $packagesPropsPath\\n\",\n    \"\\n\",\n    \"# Define the namespace to handle the default namespace in the document\\n\",\n    \"$namespaceManager = New-Object System.Xml.XmlNamespaceManager($packagesProps.NameTable)\\n\",\n    \"$namespaceManager.AddNamespace(\\\"msb\\\", \\\"http://schemas.microsoft.com/developer/msbuild/2003\\\")\\n\",\n    \"\\n\",\n    \"# Ensure that the ItemGroup element exists\\n\",\n    \"$itemGroup = $packagesProps.SelectSingleNode(\\\"msb:Project/msb:ItemGroup\\\", $namespaceManager)\\n\",\n    \"if ($itemGroup -eq $null) {\\n\",\n    \"    $itemGroup = $packagesProps.CreateElement(\\\"ItemGroup\\\", $namespaceManager.LookupNamespace(\\\"msb\\\"))\\n\",\n    \"    $packagesProps.DocumentElement.AppendChild($itemGroup)\\n\",\n    \"}\\n\",\n    \"\\n\",\n    \"# Check if the PackageVersion element for the package already exists\\n\",\n    \"$packageRef = $itemGroup.SelectSingleNode(\\\"msb:PackageVersion[@Include='Microsoft.DotNet.Interactive.CSharpProject']\\\", $namespaceManager)\\n\",\n    \"\\n\",\n    \"if ($packageRef -eq $null) {\\n\",\n    \"    # If the package reference doesn't exist, create it\\n\",\n    \"    $newPackageRef = $packagesProps.CreateElement(\\\"PackageVersion\\\", $namespaceManager.LookupNamespace(\\\"msb\\\"))\\n\",\n    \"    $newPackageRef.SetAttribute(\\\"Include\\\", \\\"Microsoft.DotNet.Interactive.CSharpProject\\\")\\n\",\n    \"    $newPackageRef.SetAttribute(\\\"Version\\\", \\\"2.0.0\\\")\\n\",\n    \"    $itemGroup.AppendChild($newPackageRef)\\n\",\n    \"} else {\\n\",\n    \"    # If it exists, just update the version\\n\",\n    \"    $packageRef.SetAttribute(\\\"Version\\\", \\\"2.0.0\\\")\\n\",\n    \"}\\n\",\n    \"\\n\",\n    \"# Save the changes back to the Directory.Packages.props file\\n\",\n    \"$packagesProps.Save($packagesPropsPath)\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 2.1: Build Try .NET\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"dotnet_interactive\": {\n     \"language\": \"pwsh\"\n    },\n    \"polyglot_notebook\": {\n     \"kernelName\": \"pwsh\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"$tryDotnetRepoPath = Get-Location\\n\",\n    \"\\n\",\n    \"$tryDotNetProjectFilePath=\\\"$tryDotnetRepoPath\\\\src\\\\Microsoft.TryDotNet\\\\Microsoft.TryDotNet.csproj\\\"\\n\",\n    \"$mockMsLearnServerPath=\\\"$tryDotnetRepoPath\\\\src\\\\microsoft-learn-mock\\\"\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"First, build the client pieces, which includes the `trydotnet.js` library.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"dotnet_interactive\": {\n     \"language\": \"pwsh\"\n    },\n    \"polyglot_notebook\": {\n     \"kernelName\": \"pwsh\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"if ($IsWindows) {\\n\",\n    \"    Invoke-Expression \\\"$tryDotnetRepoPath\\\\build-js.cmd\\\"\\n\",\n    \"} else {\\n\",\n    \"    Invoke-Expression \\\"$tryDotnetRepoPath/build-js.sh\\\"\\n\",\n    \"}\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Next, build the Try .NET service.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"dotnet_interactive\": {\n     \"language\": \"pwsh\"\n    },\n    \"polyglot_notebook\": {\n     \"kernelName\": \"pwsh\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"dotnet build -c Debug $tryDotnetRepoPath\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 2.2: Start the Try .NET service\\n\",\n    \"\\n\",\n    \"This launches the Try .NET web service. It will launch in a separate terminal window. Closing that window will stop the server.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"dotnet_interactive\": {\n     \"language\": \"pwsh\"\n    },\n    \"polyglot_notebook\": {\n     \"kernelName\": \"pwsh\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"Start-Process pwsh -ArgumentList \\\"-c dotnet run --no-build --project ${tryDotNetProjectFilePath} --launch-profile TryDotNet-Development\\\"\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 2.3: Verify Try .NET by running Peaky tests\"\n   ]\n  },\n  {\n   \"attachments\": {\n    \"image.png\": {\n     \"image/png\": \"\"\n    }\n   },\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"When the server is up and running, you should see something like this:\\n\",\n    \"\\n\",\n    \"![image.png](attachment:image.png)\\n\",\n    \"\\n\",\n    \"You can now verify basic (server-side) functionality by running the embedded [Peaky](https://github.com/PeakyTests/Peaky) tests.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"dotnet_interactive\": {\n     \"language\": \"csharp\"\n    },\n    \"polyglot_notebook\": {\n     \"kernelName\": \"csharp\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#r \\\"nuget:Peaky.Client\\\"\\n\",\n    \"\\n\",\n    \"using Peaky.Client;\\n\",\n    \"using System.Net.Http;\\n\",\n    \"\\n\",\n    \"var peakyClient = new PeakyClient(new Uri(\\\"https://localhost:7061/tests\\\"));\\n\",\n    \"\\n\",\n    \"var tests = (await peakyClient.GetTestsAsync()).Where(t => t.Tags.Any(tag => tag == \\\"self\\\"));\\n\",\n    \"\\n\",\n    \"foreach (var test in tests)\\n\",\n    \"{\\n\",\n    \"    var result = await test.GetResultAsync();\\n\",\n    \"    result.Display();\\n\",\n    \"}\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 2.4: Build the MS Learn mock server\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"dotnet_interactive\": {\n     \"language\": \"pwsh\"\n    },\n    \"polyglot_notebook\": {\n     \"kernelName\": \"pwsh\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"Set-Location -Path $mockMsLearnServerPath\\n\",\n    \"npm ci\\n\",\n    \"npm run buildProd\\n\",\n    \"Set-Location $tryDotnetRepoPath\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 2.5: Launch the MS Learn mock server\\n\",\n    \"\\n\",\n    \"This site hosts the Try .NET IFRAME and provides controls so you can see if things are working. It will launch in a separate terminal window. Closing that window will stop the server.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"dotnet_interactive\": {\n     \"language\": \"pwsh\"\n    },\n    \"polyglot_notebook\": {\n     \"kernelName\": \"pwsh\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"Set-Location -Path $mockMsLearnServerPath\\n\",\n    \"\\n\",\n    \"Start-Process pwsh -ArgumentList \\\"-c npx http-server -p 7063\\\"\\n\",\n    \"\\n\",\n    \"Set-Location $tryDotnetRepoPath\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 2.6: Open the MS Learn mock site and interact with Try .NET\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"dotnet_interactive\": {\n     \"language\": \"pwsh\"\n    },\n    \"polyglot_notebook\": {\n     \"kernelName\": \"pwsh\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"Start-Process \\\"http://127.0.0.1:7063/site/DocsHost.html?trydotnetUrl=https://localhost:7061/api/trydotnet.min.js&trydotnetOrigin=https://localhost:7061/\\\"\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Try .NET / Microsoft Learn flow diagram\\n\",\n    \"\\n\",\n    \"The diagram available through the link below provides a comprehensive view of the interaction between the Try .NET service and a host page (e.g., learn.microsoft.com).\\n\",\n    \"\\n\",\n    \"https://github.com/dotnet/interactive/tree/main/src/Microsoft.DotNet.Interactive.CSharpProject#try-net--microsoft-learn-flow\\n\",\n    \"\\n\",\n    \"The core of Try .NET is powered by the `CSharpProjectKernel`, which does most of the work powering the Try .NET service.\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \".NET (C#)\",\n   \"language\": \"C#\",\n   \"name\": \".net-csharp\"\n  },\n  \"language_info\": {\n   \"name\": \"polyglot-notebook\"\n  },\n  \"polyglot_notebook\": {\n   \"kernelInfo\": {\n    \"defaultKernelName\": \"csharp\",\n    \"items\": [\n     {\n      \"aliases\": [],\n      \"languageName\": \"csharp\",\n      \"name\": \"csharp\"\n     }\n    ]\n   }\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
        },
        {
          "name": "Directory.Build.props",
          "type": "blob",
          "size": 1.4453125,
          "content": "<Project>\n\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.DotNet.Arcade.Sdk\" Condition=\"'$(DisableArcade)' != '1'\" />\n  <Import Project=\"eng\\targets\\Settings.props\" />\n  <Import Project=\"eng\\targets\\NuGet.targets\" />\n\n  <PropertyGroup>\n    <!-- Always use shipping version instead of dummy version -->\n    <DotNetUseShippingVersions>true</DotNetUseShippingVersions>\n    <!-- private repo, don't do source-link -->\n    <DeterministicSourcePaths>false</DeterministicSourcePaths>\n    <EnableSourceLink>false</EnableSourceLink>\n    <PublishWindowsPdb>false</PublishWindowsPdb>\n    \n    <!-- NuGet: A stable release of a package should not have a prerelease dependency. -->\n    <NoWarn>$(NoWarn);NU5104</NoWarn>\n  </PropertyGroup>\n\n  <PropertyGroup>\n   <!-- These properties are needed so that version number can be same for MLS.Agent.Tools and the libraries that depend on it -->  \n    <NewtonsoftJsonVersion>13.0.3 </NewtonsoftJsonVersion>\n    <PocketLoggerVersion>0.3.0</PocketLoggerVersion>\n    <SystemDiagnosticsProcessVersion>4.3.0</SystemDiagnosticsProcessVersion>\n    <SystemReactiveVersion>4.3.2</SystemReactiveVersion>\n    <SystemRuntimeExtensionsVersion>4.3.0</SystemRuntimeExtensionsVersion>\n    <MicrosoftCodeAnalysisCommonVersion>4.5.0</MicrosoftCodeAnalysisCommonVersion>\n    <MicrosoftCodeAnalysisWorkspacesCommonVersion>4.5.0</MicrosoftCodeAnalysisWorkspacesCommonVersion>\n    <SystemDrawingCommonVersion>7.0.0</SystemDrawingCommonVersion>\n  </PropertyGroup>\n</Project>\n"
        },
        {
          "name": "Directory.Build.targets",
          "type": "blob",
          "size": 0.4345703125,
          "content": "<Project>\n\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.DotNet.Arcade.Sdk\" Condition=\"'$(DisableArcade)' != '1'\" />\n\n  <!-- Consolidate FSharp package versions -->\n  <ItemGroup>\n    <PackageReference Update=\"FSharp.Core\" Version=\"7.0.200\" />\n    <PackageReference Update=\"FSharp.Compiler.Service\" Version=\"43.7.200\" />\n  </ItemGroup>\n\n  <Import Project=\"eng\\targets\\Versions.targets\" Condition=\"'$(UseStableVersion)' == 'true'\" />\n\n</Project>\n"
        },
        {
          "name": "Directory.Packages.props",
          "type": "blob",
          "size": 2.263671875,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <PropertyGroup>\n    <ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageVersion Include=\"Assent\" Version=\"2.3.2\" />\n    <PackageVersion Include=\"coverlet.collector\" Version=\"6.0.0\" />\n    <PackageVersion Include=\"FluentAssertions\" Version=\"6.12.0\" />\n    <PackageVersion Include=\"Microsoft.AspNetCore.Components.WebAssembly.DevServer\" Version=\"8.0.3\" />\n    <PackageVersion Include=\"Microsoft.AspNetCore.Components.WebAssembly.Server\" Version=\"8.0.3\" />\n    <PackageVersion Include=\"Microsoft.AspNetCore.Components.WebAssembly\" Version=\"8.0.3\" />\n    <PackageVersion Include=\"Microsoft.AspNetCore.Mvc.Testing\" Version=\"8.0.3\" />\n    <PackageVersion Include=\"Microsoft.DotNet.Interactive.CSharpProject\" Version=\"1.0.0-beta.24312.2\" />\n    <PackageVersion Include=\"Microsoft.Playwright\" Version=\"1.42.0\" />\n    <PackageVersion Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\n    <PackageVersion Include=\"peaky.client\" Version=\"4.0.79\" />\n    <PackageVersion Include=\"peaky.xunit\" Version=\"4.0.79\" />\n    <PackageVersion Include=\"Peaky\" Version=\"4.0.83-beta\" />\n    <PackageVersion Include=\"Pocket.Disposable\" Version=\"1.2.0\" />\n    <PackageVersion Include=\"PocketLogger.For.Xunit\" Version=\"0.9.0\" />\n    <PackageVersion Include=\"PocketLogger.Subscribe\" Version=\"0.9.0\" />\n    <PackageVersion Include=\"PocketLogger\" Version=\"0.9.0\" />\n    <PackageVersion Include=\"Serilog.Sinks.RollingFileAlternate\" Version=\"2.0.9\" />\n    <PackageVersion Include=\"Serilog\" Version=\"3.1.1\" />\n    <PackageVersion Include=\"System.CommandLine\" Version=\"2.0.0-beta4.22272.1\" />\n    <PackageVersion Include=\"System.Drawing.Common\" Version=\"8.0.4\" />\n    <PackageVersion Include=\"System.Net.Http\" Version=\"4.3.4\" />\n    <PackageVersion Include=\"System.Reactive\" Version=\"6.0.0\" />\n    <PackageVersion Include=\"System.Security.Cryptography.X509Certificates\" Version=\"4.3.2\" />\n    <PackageVersion Include=\"xunit.runner.visualstudio\" Version=\"2.5.7\" />\n    <PackageVersion Include=\"xunit\" Version=\"2.7.0\" />\n  </ItemGroup>\n  <ItemGroup Condition=\"'$(DisableArcade)' == '1'\">\n    <PackageVersion Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.9.0\" />\n  </ItemGroup>\n</Project>"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.201171875,
          "content": "FROM mcr.microsoft.com/dotnet/sdk:8.0-cbl-mariner2.0 AS build-env\nWORKDIR /App\n\n# Copy everything\nCOPY . ./\n\n# Make sure we run bash\nCMD [\"bash\"]\n\n# Make sure we get all the updates and tools we need to build\nRUN tdnf install gawk -y\n# This is Node v16.  For 18, use nodejs18.\nRUN tdnf install nodejs -y\nRUN tdnf clean all\n\n# Build javascript library\nRUN /App/build-js.sh\n\n# Restore\nRUN dotnet restore --configfile /App/NuGet.config /App/TryDotNet.sln\n\n# Build and publish a release\nRUN dotnet publish -c Release -o out /App/src/Microsoft.TryDotNet\n\n# Build runtime image\nFROM mcr.microsoft.com/dotnet/sdk:8.0-cbl-mariner2.0\nARG TRY_DOT_NET_BUILD_ID\nWORKDIR /App\n\n# Make sure we run bash\nCMD [\"bash\"]\n\n# Make sure we get all the tools we need\nRUN tdnf install procps -y\nRUN tdnf clean all\n\n# Copy from build image\nCOPY --from=build-env /App/out .\n\n# Set up to run and expose app on port 80\nEXPOSE 80\nENV ASPNETCORE_URLS=http://*:80/\n\n# This is a workaround for the fact that the Try .NET website is not yet container-aware\nENV TRY_DOT_NET_REQUEST_SCHEME=https\nENV TRY_DOT_NET_BUILD_ID=$TRY_DOT_NET_BUILD_ID\nENV TRY_DOT_NET_MANUAL_BUILD_ID=2 \n\n# Run the Microsoft.TryDotNet website\nENTRYPOINT [\"dotnet\", \"Microsoft.TryDotNet.dll\"]\n"
        },
        {
          "name": "DotNetTry.md",
          "type": "blob",
          "size": 1.81640625,
          "content": "# Try .NET <img src =\"https://user-images.githubusercontent.com/2546640/56708992-deee8780-66ec-11e9-9991-eb85abb1d10a.png\" width=\"80px\" alt=\"dotnet bot in space\" align =\"right\">\n|| [**Basics**](#basics) • [**Experiences**](#experiences) || [**Setup**](#setup) • [**Getting Started**](#getting-started) || [**Samples**](https://github.com/dotnet/try-samples) ||\n\n![Try_.NET Enabled](https://img.shields.io/badge/Try_.NET-Enabled-501078.svg)\n\n[![Build Status](https://dev.azure.com/dnceng-public/public/_apis/build/status/dotnet/try/try-ci?branchName=main)](https://dev.azure.com/dnceng-public/public/_build?definitionId=62&branchName=main)\n\n**What is Try .NET?**: Try .NET is an interactive documentation generator for .NET Core.\n\n## Experiences\n Use Try .NET to create executable C# snippets for your websites, or interactive markdown files that users can run on their machine.\n\n### Online, powered by Blazor\n\nMicrosoft Learn uses Try .NET to create interactive documentation. Users can run and edit code all in the browser.\n\n_**Please Note**: At the moment, the Try .NET online experience only works with C# documentation._\n\n<img src =\"https://user-images.githubusercontent.com/2546640/57144765-c850cc00-6d8f-11e9-982d-50d2b6dc3591.gif\" width = \"80%\">\n\n### Interactive .NET documentation\n\nTry .NET enables .NET developers to create interactive markdown files.\nTo make your markdown files interactive, you will need to use [.NET Core 3.0 SDK](https://dotnet.microsoft.com/download/dotnet-core/3.0), the dotnet try global tool and [Visual Studio](https://visualstudio.microsoft.com/) / [VS Code](https://code.visualstudio.com/) (or any other editor of your choice).\n\n<img src =\"https://user-images.githubusercontent.com/2546640/57158389-47a2c780-6db1-11e9-96ad-8c6e9ab52853.png\" width = \"80%\">\n\nTo get started follow [setup](DotNetTryLocal.md) instructions\n"
        },
        {
          "name": "DotNetTryLocal.md",
          "type": "blob",
          "size": 2.5771484375,
          "content": "# Getting started with dotnet try \n## Setup\nBefore you get can started creating interactive documentation, you will need to install the following: \n\n- The [.NET Core 3.0 SDK](https://dotnet.microsoft.com/download/dotnet-core/3.0) \n- The [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1) \n- The [dotnet try](https://www.nuget.org/packages/Microsoft.dotnet-try/)  global tool\n\nUpdating to the latest version of the tool is easy. Run the following command:\n\n```console\n> dotnet tool update -g Microsoft.dotnet-try\n```\n\n## Installing preview builds from `master`\n\nTo install the latest preview build from master, first uninstall the existing version of the tool:\n\n```console\n> dotnet tool uninstall -g Microsoft.dotnet-try\n```\nThen, install from the preview package feed:\n\n```console\n> dotnet tool install -g --add-source \"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json\" Microsoft.dotnet-try\n```\n\n## Getting Started\n\nYou can get started using either one of the options below. \n\n### Option1: `dotnet try demo` \n\n- Create a new folder.\n- `cd` to your new folder.\n- Run command `dotnet try demo` : This will load our interactive dotnet try getting started tutorial. \n\nThe tutorials below work you through the following:\n\n- Creating a new Try .NET project.\n- Display interactive snippets using C# regions.\n- Creating Sessions\n- Verifying your projects: `dotnet try verify` a compiler for your documentation.\n- Passing Arguments\n- Using read only snippets\n\n### Option 2: Starting from scratch.\n1. Go to the terminal and create a folder called `mydoc`.\n2. `cd` to the `mydoc` folder and create a new console app with the following command:\n\n```console\n> dotnet new console -o myApp\n```\nThis will create a console app with the files `myApp.csproj` and `Program.cs`.\n\n3. Open the `mydoc` folder in Visual Studio Code. \n\n4. Create a file called `doc.md`. Inside that file, add some text and a code fence:\n\n````markdown\n# My Interactive Document:\n\n```cs --source-file ./myApp/Program.cs --project ./myApp/myApp.csproj\n```\n````\n5. Now, navigate to the `mydoc` folder in your console and run the following command:\n```console\n     > dotnet try\n```\nYou have created your first C# interactive developer experience. You should now be able to run your console app and see the result in the browser. \n\n### Option 3: Explore our [samples repo](https://github.com/dotnet/try-samples). \n- Clone the [dotnet/try-samples](https://github.com/dotnet/try-samples) repo.\n- Follow the quick steps listed [here](https://github.com/dotnet/try-samples#basics) to get started.\n\nReturn to [README.md](README.md)\n"
        },
        {
          "name": "License.txt",
          "type": "blob",
          "size": 1.080078125,
          "content": "The MIT License (MIT)\n\nCopyright (c) Microsoft Corporation.\nAll rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "NuGet.config",
          "type": "blob",
          "size": 1.318359375,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <solution>\n    <add key=\"disableSourceControlIntegration\" value=\"true\" />\n  </solution>\n  <packageSources>\n    <clear />\n    <add key=\"dotnet-public\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public/nuget/v3/index.json\" />\n    <add key=\"dotnet-eng\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json\" />\n    <add key=\"dotnet-tools\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json\" />\n    <add key=\"dotnet-libraries\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-libraries/nuget/v3/index.json\" />\n    <add key=\"dotnet5\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5/nuget/v3/index.json\" />\n    <add key=\"MachineLearning\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/MachineLearning/nuget/v3/index.json\" />\n  </packageSources>\n  <disabledPackageSources>\n    <clear />\n  </disabledPackageSources>\n  <packageSourceMapping>\n    <packageSource key=\"dotnet-public\">\n      <package pattern=\"*\" />\n    </packageSource>\n    <packageSource key=\"dotnet-tools\">\n      <package pattern=\"*\" />\n    </packageSource>\n    <packageSource key=\"dotnet-eng\">\n      <package pattern=\"*\" />\n    </packageSource>\n  </packageSourceMapping>\n</configuration>\n"
        },
        {
          "name": "PeakyTests.ipynb",
          "type": "blob",
          "size": 1.8876953125,
          "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"dotnet_interactive\": {\n     \"language\": \"csharp\"\n    },\n    \"polyglot_notebook\": {\n     \"kernelName\": \"csharp\"\n    },\n    \"vscode\": {\n     \"languageId\": \"polyglot-notebook\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"#r \\\"nuget:Peaky.Client\\\"\\n\",\n    \"\\n\",\n    \"using Peaky.Client;\\n\",\n    \"using System.Net.Http;\\n\",\n    \"\\n\",\n    \"// var peakyClient = new PeakyClient(new Uri(\\\"https://localhost:7061/tests\\\"));\\n\",\n    \"var peakyClient = new PeakyClient(new Uri(\\\"https://try-ppe.dot.net/tests\\\"));\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"dotnet_interactive\": {\n     \"language\": \"csharp\"\n    },\n    \"polyglot_notebook\": {\n     \"kernelName\": \"csharp\"\n    },\n    \"vscode\": {\n     \"languageId\": \"polyglot-notebook\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"var tests = (await peakyClient.GetTestsAsync(   )) \\n\",\n    \"    .Where(t => t.Tags.Any(tag => tag == \\\"self\\\"))\\n\",\n    \"    ;\\n\",\n    \"tests.Display();\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"dotnet_interactive\": {\n     \"language\": \"csharp\"\n    },\n    \"polyglot_notebook\": {\n     \"kernelName\": \"csharp\"\n    },\n    \"vscode\": {\n     \"languageId\": \"polyglot-notebook\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"foreach (var test in tests)\\n\",\n    \"{\\n\",\n    \"    var result = await test.GetResultAsync();\\n\",\n    \"    result.Display();\\n\",\n    \"}\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"dotnet_interactive\": {\n     \"language\": \"csharp\"\n    },\n    \"polyglot_notebook\": {\n     \"kernelName\": \"csharp\"\n    },\n    \"vscode\": {\n     \"languageId\": \"polyglot-notebook\"\n    }\n   },\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"language_info\": {\n   \"name\": \"python\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.1845703125,
          "content": "# Try .NET <img src =\"https://user-images.githubusercontent.com/2546640/56708992-deee8780-66ec-11e9-9991-eb85abb1d10a.png\" width=\"80px\" alt=\"dotnet bot in space\" align =\"right\">\n|| [**Contribution Guidelines**](#contribution-guidelines) || [**Table of contents**](#table-of-contents) || [**Customers & Partners**](#customers--partners) ||\n\n![Try_.NET Enabled](https://img.shields.io/badge/Try_.NET-Enabled-501078.svg)\n\n\n[![Build Status](https://dev.azure.com/dnceng-public/public/_apis/build/status/dotnet/try/try-ci?branchName=main)](https://dev.azure.com/dnceng-public/public/_build?definitionId=62&branchName=main)\n\n## Welcome to the Try .NET repo.\n\nTry .NET provides developers and content authors with tools to create interactive experiences.\n\nThere are two different Try .NET interactive experiences:\n* The web experience powered by Blazor (as seen on [Microsoft Learn](https://learn.microsoft.com/dotnet/csharp/tour-of-csharp/tutorials/hello-world))\n* Interactive documentation with Markdown for .NET Core with the [dotnet try global tool](DotNetTry.md).\n\n### Online, powered by Blazor\n\nMicrosoft Learn uses Try .NET to create interactive documentation. Users can run and edit code all in the browser.\n\n_**Please Note**: At the moment, the Try .NET online (`trydotnet.js API`) is currently only used internally at Microsoft as seen on Learn and [.NET page](https://dotnet.microsoft.com/learn/dotnet/in-browser-tutorial/1)._\n\n<img src =\"https://user-images.githubusercontent.com/2546640/57144765-c850cc00-6d8f-11e9-982d-50d2b6dc3591.gif\" width = \"80%\">\n\n### Interactive .NET Core documentation with the `dotnet try` global tool\n\nTry .NET enables .NET developers to create interactive markdown files.\nTo make your markdown files interactive, you will need the [.NET Core 3.0 SDK](https://dotnet.microsoft.com/download/dotnet-core/3.0), the `dotnet try` global tool and [Visual Studio](https://visualstudio.microsoft.com/) / [VS Code](https://code.visualstudio.com/) (or any other editor of your choice).\n\n<img src =\"https://user-images.githubusercontent.com/2546640/57158389-47a2c780-6db1-11e9-96ad-8c6e9ab52853.png\" width = \"80%\">\n\n## Table of Contents\n- [Getting Started with Try .NET](DotNetTryLocal.md): Interactive documentation generator for .NET Core.\n\n\n## Contribution Guidelines\n\nAs we are still in the early stages of our development, we are unable to take any feature PRs at the moment, but we intend to do so in the future.\nIf you find an issue or have a feature suggestion, please open an [issue](https://github.com/dotnet/try/issues/new/choose). And if you have any feature suggestions, please submit them using the \"community suggestions\" label.\n\n## Customers & Partners\n\n**Microsoft Learn**\n\nMicrosoft Learn uses [Try .NET](https://learn.microsoft.com/dotnet/csharp/tour-of-csharp/tutorials/hello-world) to create interactive documentation. Users can run and edit .NET code in the browser.\n\n## Community Showcase\n\n**NCache Live by Alachisoft**\n\n[NCache Live](https://www.alachisoft.com/blogs/try-ncache-anywhere-anytime-with-ncache-live/) uses [Try .NET](https://learn.microsoft.com/dotnet/csharp/tour-of-csharp/tutorials/hello-world) to let the user experience NCache APIs with the help of executable and editable .NET code in the browser."
        },
        {
          "name": "TryDotNet.sln",
          "type": "blob",
          "size": 4.3505859375,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.1.32228.430\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{77B0B387-FEA7-4FBC-AC04-76CB4A16F758}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"tests\", \"tests\", \"{AC4DCFB8-D55F-4B1C-8B74-5517831CB65E}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Microsoft.TryDotNet\", \"src\\Microsoft.TryDotNet\\Microsoft.TryDotNet.csproj\", \"{FDB0E498-AF5C-44B5-93DD-CA77BB26D195}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Microsoft.TryDotNet.Tests\", \"src\\Microsoft.TryDotNet.Tests\\Microsoft.TryDotNet.Tests.csproj\", \"{37A560A7-8A96-400C-A12E-98248EDD1C29}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Microsoft.TryDotNet.WasmRunner\", \"src\\Microsoft.TryDotNet.WasmRunner\\Microsoft.TryDotNet.WasmRunner.csproj\", \"{4D0D85BE-2427-4D8A-86CD-C4C0991794EF}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Microsoft.TryDotNet.SimulatorGenerator\", \"src\\Microsoft.TryDotNet.SimulatorGenerator\\Microsoft.TryDotNet.SimulatorGenerator.csproj\", \"{8630032F-C2A1-4A76-928A-2C828804765B}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Microsoft.TryDotNet.IntegrationTests\", \"src\\Microsoft.TryDotNet.IntegrationTests\\Microsoft.TryDotNet.IntegrationTests.csproj\", \"{C8F85960-8E0B-404D-8E73-6C7EEBF727BB}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{8D0F8011-2504-432D-BA70-3D92656747D3}\"\n\tProjectSection(SolutionItems) = preProject\n\t\tazure-pipelines-CI.yml = azure-pipelines-CI.yml\n\t\tazure-pipelines.yml = azure-pipelines.yml\n\t\tDirectory.Packages.props = Directory.Packages.props\n\t\tDockerfile = Dockerfile\n\t\tglobal.json = global.json\n\tEndProjectSection\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{FDB0E498-AF5C-44B5-93DD-CA77BB26D195}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{FDB0E498-AF5C-44B5-93DD-CA77BB26D195}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{FDB0E498-AF5C-44B5-93DD-CA77BB26D195}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{FDB0E498-AF5C-44B5-93DD-CA77BB26D195}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{37A560A7-8A96-400C-A12E-98248EDD1C29}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{37A560A7-8A96-400C-A12E-98248EDD1C29}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{37A560A7-8A96-400C-A12E-98248EDD1C29}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{37A560A7-8A96-400C-A12E-98248EDD1C29}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{4D0D85BE-2427-4D8A-86CD-C4C0991794EF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{4D0D85BE-2427-4D8A-86CD-C4C0991794EF}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{4D0D85BE-2427-4D8A-86CD-C4C0991794EF}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{4D0D85BE-2427-4D8A-86CD-C4C0991794EF}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{8630032F-C2A1-4A76-928A-2C828804765B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{8630032F-C2A1-4A76-928A-2C828804765B}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{8630032F-C2A1-4A76-928A-2C828804765B}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{8630032F-C2A1-4A76-928A-2C828804765B}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{C8F85960-8E0B-404D-8E73-6C7EEBF727BB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{C8F85960-8E0B-404D-8E73-6C7EEBF727BB}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{C8F85960-8E0B-404D-8E73-6C7EEBF727BB}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{C8F85960-8E0B-404D-8E73-6C7EEBF727BB}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{FDB0E498-AF5C-44B5-93DD-CA77BB26D195} = {77B0B387-FEA7-4FBC-AC04-76CB4A16F758}\n\t\t{37A560A7-8A96-400C-A12E-98248EDD1C29} = {AC4DCFB8-D55F-4B1C-8B74-5517831CB65E}\n\t\t{4D0D85BE-2427-4D8A-86CD-C4C0991794EF} = {77B0B387-FEA7-4FBC-AC04-76CB4A16F758}\n\t\t{8630032F-C2A1-4A76-928A-2C828804765B} = {77B0B387-FEA7-4FBC-AC04-76CB4A16F758}\n\t\t{C8F85960-8E0B-404D-8E73-6C7EEBF727BB} = {AC4DCFB8-D55F-4B1C-8B74-5517831CB65E}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {1D7DA1F1-417C-4A1F-9D78-05D3BF24D31C}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "TryDotNet.v3.ncrunchsolution",
          "type": "blob",
          "size": 0.259765625,
          "content": "﻿<SolutionConfiguration>\n  <Settings>\n    <AllowParallelTestExecution>True</AllowParallelTestExecution>\n    <EnableRDI>True</EnableRDI>\n    <RdiConfigured>True</RdiConfigured>\n    <SolutionConfigured>True</SolutionConfigured>\n  </Settings>\n</SolutionConfiguration>"
        },
        {
          "name": "azure-pipelines-CI.yml",
          "type": "blob",
          "size": 7.201171875,
          "content": "# azure-pipelines-CI.yml\nparameters:\n- name: SkipTests\n  displayName: Skip Tests\n  type: boolean\n  default: false\n\n# CI and PR triggers\ntrigger:\n- main\n- feature/*\n- release/*\npr:\n- main\n- feature/*\n- release/*\n\nresources:\n  repositories:\n  - repository: 1esPipelines\n    type: git\n    name: 1ESPipelineTemplates/1ESPipelineTemplates\n    ref: refs/tags/release\n\nvariables:\n- template: /eng/common/templates/variables/pool-providers.yml@self\n- template: /eng/templates/variables-template.yml@self\n- name: additionalWindowsArgs\n  value: ''\n- name: additionalLinuxArgs\n  value: ''\n\nextends:\n  # The pipeline extends the 1ES PT which will inject different SDL and compliance tasks.\n  # For non-production pipelines, use \"Unofficial\" as defined below.\n  # For productions pipelines, use \"Official\".\n  template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines\n  parameters:\n    # Update the pool with your team's 1ES hosted pool.\n    pool:\n      name: $(DncEngInternalBuildPool)  # Name of your hosted pool\n      image: 1es-windows-2022  # Name of the image in your pool. If not specified, first image of the pool is used\n      os: windows  # OS of the image. This value cannot be a variable. Allowed values: windows, linux, macOS\n\n    # Build Tags\n    customBuildTags:\n    - TryDotNet\n    - $(Build.BuildNumber)\n\n    sdl:\n      git:\n        longpaths: true\n      tsa:\n        enabled: true\n        config:\n          repositoryName: 'dotnet-try'\n          codebaseName: 'dotnet-try'\n          instanceUrl: 'https://devdiv.visualstudio.com/'\n          projectName: 'DEVDIV'\n          iterationPath: 'DevDiv\\\\Future Backlog'\n          areaPath: 'DevDiv\\\\NET Developer Experience\\\\VS Testing\\\\Interactive'\n          notificationAliases: ['dotnetInteractive@microsoft.com']\n          serviceTreeID: 'ab4d58de-beb3-4714-866c-1b46a48ea002'\n          allTools: true\n      policheck:\n        enabled: true\n\n    stages:\n    - stage: build\n      displayName: Build and Test\n      jobs:\n      - template: /eng/common/templates-official/jobs/jobs.yml@self\n        parameters:\n          enableMicrobuild: true\n          enablePublishBuildArtifacts: true\n          enablePublishTestResults: true\n          enablePublishBuildAssets: true\n          enablePublishUsingPipelines: $(_PublishUsingPipelines)\n          jobs:\n          - job: Windows_NT\n            pool:\n              # TODO: Can we use latest or equivalent?\n              name: $(DncEngInternalBuildPool)\n              demands: ImageOverride -equals 1es-windows-2022\n              os: windows\n            templateContext:\n              # This enables SDL scanning to be run once across all artifacts\n              outputParentDirectory: $(Build.SourcesDirectory)/artifacts\n              outputs:\n              - output: pipelineArtifact\n                targetPath: $(Build.SourcesDirectory)/artifacts\n                artifactName: Windows_artifacts\n                displayName: Publish Windows artifacts\n                condition: always()\n\n            variables:\n            - name: TRYDOTNET_PREBUILDS_PATH\n              value: $(Build.SourcesDirectory)\\artifacts\\trydotnet-prebuilds   \n            - name: POCKETLOGGER_LOG_PATH\n              value: $(Build.SourcesDirectory)\\artifacts\\logs\\pocketlogger.log\n            - name: RunIntegrationTests\n              value: true\n            # Enable signing for internal, non-PR builds\n            - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:\n              - group: DotNet-Symbol-Server-Pats\n              - name: _SignType\n                value: Real\n              - name: _DotNetPublishToBlobFeed\n                value: false\n              - name: _BuildArgs\n                value: /p:SignType=$(_SignType)\n                      /p:DotNetSignType=$(_SignType)\n                      /p:MicroBuild_SigningEnabled=true\n                      /p:OverridePackageSource=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\n                      /p:TeamName=$(_TeamName)\n                      /p:DotNetPublishToBlobFeed=false\n                      /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)\n                      /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory)\n                      /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)\n                      /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)\n                      /p:OfficialBuildId=$(BUILD.BUILDNUMBER)\n            # else\n            - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:\n              - name: _SignType\n                value: Test\n              - name: _BuildArgs\n                value: /p:SignType=$(_SignType)\n            steps:\n            - template: /eng/templates/build-and-test-job-windows-templates.yml@self\n              parameters:\n                buildConfig: $(_BuildConfig)\n                skipTests: $(SkipTests)\n                buildArgs: $(_BuildArgs)\n                additionalArgs: $(additionalWindowsArgs)\n\n      - template: /eng/common/templates-official/jobs/jobs.yml@self\n        parameters:\n          enableMicrobuild: true\n          enablePublishBuildArtifacts: true\n          enablePublishTestResults: true\n          enablePublishBuildAssets: false\n          enablePublishUsingPipelines: false\n          jobs:\n          - job: Linux\n            pool:\n              name: $(DncEngInternalBuildPool)\n              os: linux\n              demands: ImageOverride -equals 1es-mariner-2\n            templateContext:\n              # This enables SDL scanning to be run once across all artifacts\n              outputParentDirectory: $(Build.SourcesDirectory)/artifacts\n              outputs:\n              - output: pipelineArtifact\n                targetPath: $(Build.SourcesDirectory)/artifacts\n                artifactName: Linux_artifacts\n                displayName: Publish Linux artifacts\n                condition: always()\n            variables:\n            - name: TRYDOTNET_PREBUILDS_PATH\n              value: $(Build.SourcesDirectory)/artifacts/trydotnet-prebuilds   \n            - name: POCKETLOGGER_LOG_PATH\n              value: $(Build.SourcesDirectory)/artifacts/logs/pocketlogger.log\n            # Enable signing for internal, non-PR builds\n            - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:\n              - name: _SignType\n                value: Test\n              - name: _BuildArgs\n                value: /p:SignType=$(_SignType)\n                  /p:DotNetSignType=$(_SignType)\n                  /p:OverridePackageSource=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\n                  /p:TeamName=$(_TeamName)\n                  /p:OfficialBuildId=$(BUILD.BUILDNUMBER)\n            # else\n            - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:\n              - name: _SignType\n                value: Test\n              - name: _BuildArgs\n                value: /p:SignType=$(_SignType)\n            steps:\n            - template: /eng/templates/build-and-test-job-linux-templates.yml@self\n          parameters:\n            buildConfig: $(_BuildConfig)\n            skipTests: $(SkipTests)\n            additionalArgs: $(additionalLinuxArgs)\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 6.2900390625,
          "content": "# azure-pipelines.yml\nparameters:\n- name: SkipTests\n  displayName: Skip Tests\n  type: boolean\n  default: false\n\n# CI and PR triggers\ntrigger:\n- main\n- feature/*\n- release/*\npr:\n- main\n- feature/*\n- release/*\n\nvariables:\n  - template: /eng/templates/variables-template.yml@self\n  - name: system.debug\n    value: true\n  - name: additionalWindowsArgs\n    value: '--diag $(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)/diag.txt -p:m=1'\n  - name: additionalLinuxArgs\n    value: '--diag $(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)/diag.txt'\n\nstages:\n- stage: build\n  displayName: Build and Test\n  jobs:\n  - template: /eng/common/templates/jobs/jobs.yml\n    parameters:\n      enableMicrobuild: true\n      enablePublishBuildArtifacts: true\n      enablePublishTestResults: true\n      enablePublishBuildAssets: true\n      enablePublishUsingPipelines: $(_PublishUsingPipelines)\n      jobs:\n      - job: Windows_NT\n        pool:\n          ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:\n            name: NetCore-Public\n            demands: ImageOverride -equals windows.vs2022.amd64.open\n          ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:\n            name: NetCore1ESPool-Internal\n            demands: ImageOverride -equals windows.vs2022.amd64\n        variables:\n        - name: RunIntegrationTests\n          value: true\n        - name: TRYDOTNET_PREBUILDS_PATH\n          value: $(Build.SourcesDirectory)\\artifacts\\trydotnet-prebuilds          \n        - name: POCKETLOGGER_LOG_PATH\n          value: $(Build.SourcesDirectory)\\artifacts\\logs\\pocketlogger.log  \n        # Enable signing for internal, non-PR builds\n        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:\n          - group: DotNet-Symbol-Server-Pats\n          - name: _SignType\n            value: Real\n          - name: _DotNetPublishToBlobFeed\n            value: false\n          - name: _BuildArgs\n            value: /p:SignType=$(_SignType)\n                   /p:DotNetSignType=$(_SignType)\n                   /p:MicroBuild_SigningEnabled=true\n                   /p:OverridePackageSource=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\n                   /p:TeamName=$(_TeamName)\n                   /p:DotNetPublishToBlobFeed=false\n                   /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)\n                   /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory)\n                   /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)\n                   /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)\n                   /p:OfficialBuildId=$(BUILD.BUILDNUMBER)\n        # else\n        - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:\n          - name: _SignType\n            value: Test\n          - name: _BuildArgs\n            value: /p:SignType=$(_SignType)\n        steps:\n        - template: /eng/templates/build-and-test-job-windows-templates.yml@self\n          parameters:\n            buildConfig: $(_BuildConfig)\n            skipTests: $(SkipTests)\n            buildArgs: $(_BuildArgs)\n            additionalArgs: $(additionalWindowsArgs)\n\n        - task: PublishBuildArtifacts@1\n          displayName: Publish Windows artifacts\n          inputs:\n            pathToPublish: $(Build.SourcesDirectory)/artifacts/\n            artifactName: Windows_artifacts\n            artifactType: container\n          condition: always()\n\n  - template: /eng/common/templates/jobs/jobs.yml\n    parameters:\n      enableMicrobuild: true\n      enablePublishBuildArtifacts: true\n      enablePublishTestResults: true\n      enablePublishBuildAssets: false\n      enablePublishUsingPipelines: false\n      jobs:\n      - job: Linux\n        pool:\n          vmImage: ubuntu-20.04\n        variables:\n        - name: TRYDOTNET_PREBUILDS_PATH\n          value: $(Build.SourcesDirectory)/artifacts/trydotnet-prebuilds   \n        - name: POCKETLOGGER_LOG_PATH\n          value: $(Build.SourcesDirectory)/artifacts/logs/pocketlogger.log\n        # Enable signing for internal, non-PR builds\n        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:\n          - name: _SignType\n            value: Test\n          - name: _BuildArgs\n            value: /p:SignType=$(_SignType)\n              /p:DotNetSignType=$(_SignType)\n              /p:OverridePackageSource=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json\n              /p:TeamName=$(_TeamName)\n              /p:OfficialBuildId=$(BUILD.BUILDNUMBER)\n        # else\n        - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:\n          - name: _SignType\n            value: Test\n          - name: _BuildArgs\n            value: /p:SignType=$(_SignType)\n        steps:\n        - template: /eng/templates/build-and-test-job-linux-templates.yml@self\n          parameters:\n            buildConfig: $(_BuildConfig)\n            skipTests: $(SkipTests)\n            additionalArgs: $(additionalLinuxArgs)\n\n        - task: PublishBuildArtifacts@1\n          displayName: Publish Linux artifacts\n          inputs:\n            pathToPublish: $(Build.SourcesDirectory)/artifacts/\n            artifactName: Linux_artifacts\n            artifactType: container\n          condition: always()\n\n#---------------------------------------------------------------------------------------------------------------------#\n#                                                    Post Build                                                       #\n#---------------------------------------------------------------------------------------------------------------------#\n- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:\n  - template: eng/common/templates/post-build/post-build.yml\n    parameters:\n      publishingInfraVersion: 3\n      # Symbol validation is not entirely reliable as of yet, so should be turned off until https://github.com/dotnet/arcade/issues/2871 is resolved.\n      enableSymbolValidation: false\n      # SourceLink improperly looks for generated files.  See https://github.com/dotnet/arcade/issues/3069\n      enableSourceLinkValidation: false\n"
        },
        {
          "name": "build-integration.cmd",
          "type": "blob",
          "size": 0.2509765625,
          "content": "@echo off\npowershell -noprofile -executionPolicy RemoteSigned -file \"%~dp0eng\\build.ps1\" -noDotnet %*\ntaskkill /F /IM dotnet.exe\nrmdir /s /q \".\\src\\Microsoft.TryDotNet.IntegrationTests\\bin\"\nrmdir /s /q \".\\artifacts\\bin\\Microsoft.TryDotNet.IntegrationTests\"\n"
        },
        {
          "name": "build-js.cmd",
          "type": "blob",
          "size": 0.099609375,
          "content": "@echo off\npowershell -noprofile -executionPolicy RemoteSigned -file \"%~dp0eng\\build.ps1\" -noDotnet %*\n"
        },
        {
          "name": "build-js.sh",
          "type": "blob",
          "size": 0.4951171875,
          "content": "#!/usr/bin/env bash\n\nsource=\"${BASH_SOURCE[0]}\"\n\n# resolve $SOURCE until the file is no longer a symlink\nwhile [[ -h $source ]]; do\n  scriptroot=\"$( cd -P \"$( dirname \"$source\" )\" && pwd )\"\n  source=\"$(readlink \"$source\")\"\n\n  # if $source was a relative symlink, we need to resolve it relative to the path where \n  # the symlink file was located\n  [[ $source != /* ]] && source=\"$scriptroot/$source\"\ndone\nscriptroot=\"$( cd -P \"$( dirname \"$source\" )\" && pwd)\"\n\n. \"$scriptroot/eng/build.sh\" --no-dotnet \"$@\"\n"
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 0.1171875,
          "content": "@echo off \npowershell -noprofile -executionPolicy RemoteSigned -file \"%~dp0eng\\build.ps1\" -build -restore -binaryLog %*\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.5126953125,
          "content": "#!/usr/bin/env bash\n\nsource=\"${BASH_SOURCE[0]}\"\n\n# resolve $SOURCE until the file is no longer a symlink\nwhile [[ -h $source ]]; do\n  scriptroot=\"$( cd -P \"$( dirname \"$source\" )\" && pwd )\"\n  source=\"$(readlink \"$source\")\"\n\n  # if $source was a relative symlink, we need to resolve it relative to the path where \n  # the symlink file was located\n  [[ $source != /* ]] && source=\"$scriptroot/$source\"\ndone\nscriptroot=\"$( cd -P \"$( dirname \"$source\" )\" && pwd)\"\n\n. \"$scriptroot/eng/build.sh\" --build --restore --binaryLog \"$@\"\n"
        },
        {
          "name": "eng",
          "type": "tree",
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.2578125,
          "content": "{\n  \"sdk\": {\n    \"version\": \"8.0.204\",\n    \"allowPrerelease\": true,\n    \"rollForward\": \"latestMinor\"\n  },\n  \"tools\": {\n    \"dotnet\": \"8.0.204\",\n    \"rollForward\": \"latestMinor\"\n  },\n  \"msbuild-sdks\": {\n    \"Microsoft.DotNet.Arcade.Sdk\": \"8.0.0-beta.24270.4\"\n  }\n}\n"
        },
        {
          "name": "restore.cmd",
          "type": "blob",
          "size": 0.109375,
          "content": "@echo off\npowershell -noprofile -executionPolicy RemoteSigned -file \"%~dp0eng\\build.ps1\" -restore -binaryLog %*\n"
        },
        {
          "name": "restore.sh",
          "type": "blob",
          "size": 0.5048828125,
          "content": "#!/usr/bin/env bash\n\nsource=\"${BASH_SOURCE[0]}\"\n\n# resolve $SOURCE until the file is no longer a symlink\nwhile [[ -h $source ]]; do\n  scriptroot=\"$( cd -P \"$( dirname \"$source\" )\" && pwd )\"\n  source=\"$(readlink \"$source\")\"\n\n  # if $source was a relative symlink, we need to resolve it relative to the path where \n  # the symlink file was located\n  [[ $source != /* ]] && source=\"$scriptroot/$source\"\ndone\nscriptroot=\"$( cd -P \"$( dirname \"$source\" )\" && pwd)\"\n\n. \"$scriptroot/eng/build.sh\" --restore --binaryLog \"$@\"\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 0.501953125,
          "content": "#!/usr/bin/env bash\n\nsource=\"${BASH_SOURCE[0]}\"\n\n# resolve $SOURCE until the file is no longer a symlink\nwhile [[ -h $source ]]; do\n  scriptroot=\"$( cd -P \"$( dirname \"$source\" )\" && pwd )\"\n  source=\"$(readlink \"$source\")\"\n\n  # if $source was a relative symlink, we need to resolve it relative to the path where \n  # the symlink file was located\n  [[ $source != /* ]] && source=\"$scriptroot/$source\"\ndone\nscriptroot=\"$( cd -P \"$( dirname \"$source\" )\" && pwd)\"\n\n. \"$scriptroot/eng/build.sh\" --test --binaryLog \"$@\"\n"
        }
      ]
    }
  ]
}