{
  "metadata": {
    "timestamp": 1736564112409,
    "page": 673,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "silverbulletmd/silverbullet",
      "stars": 2829,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.00390625,
          "content": ".git"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.19921875,
          "content": ".env\n.DS_Store\ndist_client_bundle\ndist_plug_bundle\ndist\n*.js.map\nwebsite_build\n/index.json\n.idea\ndeno.lock\nfly.toml\nenv.sh\nnode_modules\n*.db*\ntest_space\nsilverbullet\ndeploy.json\n*.generated\ntmp_playground"
        },
        {
          "name": ".gitpod.Dockerfile",
          "type": "blob",
          "size": 0.3564453125,
          "content": "FROM gitpod/workspace-full:latest\n\nRUN curl -fsSL https://deno.land/x/install/install.sh | sh -s v2.1.4\nRUN /home/gitpod/.deno/bin/deno completions bash > /home/gitpod/.bashrc.d/90-deno && \\\n    echo 'export DENO_INSTALL=\"/home/gitpod/.deno\"' >> /home/gitpod/.bashrc.d/90-deno && \\\n    echo 'export PATH=\"$DENO_INSTALL/bin:$PATH\"' >> /home/gitpod/.bashrc.d/90-deno\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.6279296875,
          "content": "image:\n  file: .gitpod.Dockerfile\n\nports:\n  - port: 3000\n    name: Silverbullet\n    onOpen: open-browser\n    visibility: public\n\ngithub:\n  prebuilds:\n    master: true\n    pullRequests: true\n\ntasks:\n  - name: Setup\n    init: |\n      deno task build\n      deno task install\n      gp sync-done setup\n  - name: Server watcher\n    init: |\n      gp sync-await setup\n      mkdir pages\n    command: deno task watch-server pages\n  - name: Web watcher\n    init: gp sync-await setup\n    command: deno task watch-web\n  - name: Plug watcher\n    init: gp sync-await setup\n    command: deno task watch-plugs\n\nvscode:\n  extensions:\n    - denoland.vscode-deno\n"
        },
        {
          "name": ".helix",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.01953125,
          "content": "website/CHANGELOG.md"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.783203125,
          "content": "FROM denoland/deno:debian-2.1.4\n\n# The volume that will keep the space data\n\n# Either create a volume:\n#   docker volume create myspace\n# Then bind-mount it when running the container with the -v flag, e.g.:\n#   docker run -v myspace:/space -p3000:3000 -it zefhemel/silverbullet\n# Or simply mount an existing folder into the container:\n#   docker run -v /path/to/my/folder:/space -p3000:3000 -it zefhemel/silverbullet\n\nVOLUME /space\n\n# Accept TARGETARCH as argument\nARG TARGETARCH\n\n# Adding tini manually, as it's not included anymore in the new baseimage\nENV TINI_VERSION v0.19.0\nADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-${TARGETARCH} /tini\n\n# Make sure the deno user has access to the space volume\nRUN mkdir -p -m 777 /space \\\n    && chmod +x /tini \\\n    && apt update \\\n    && apt install -y git ssh-client \\\n    && echo \"**** cleanup ****\" \\\n    && apt-get -y autoremove \\\n    && apt-get clean  \\\n    && mkdir -p /deno-dir \\\n    && chmod 777 /deno-dir \\\n    && rm -rf \\\n    /tmp/* \\\n    /var/lib/apt/lists/* \\\n    /var/tmp/* \\\n    /var/log/* \\\n    /usr/share/man\n\n\n# Expose port 3000\n# Port map this when running, e.g. with -p 3002:3000 (where 3002 is the host port)\nEXPOSE 3000\n\n# Always binding to this IP, otherwise the server wouldn't be available\nENV SB_HOSTNAME 0.0.0.0\nENV SB_FOLDER /space\n\n# Copy the bundled version of silverbullet into the container\nADD ./dist/silverbullet.js /silverbullet.js\n# Precache any remaining dependencies\nRUN deno cache /silverbullet.js\n\n# As well as the docker-entrypoint.sh script\nADD ./docker-entrypoint.sh /docker-entrypoint.sh\n\n# Run the server, allowing to pass in additional argument at run time, e.g.\n#   docker run -p 3002:3000 -v myspace:/space -it zefhemel/silverbullet --user me:letmein\nENTRYPOINT [\"/tini\", \"--\", \"/docker-entrypoint.sh\"]\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.025390625,
          "content": "Copyright 2022, Zef Hemel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.25,
          "content": "# SilverBullet\nSilverBullet is a note-taking application optimized for people with a [hacker mindset](https://en.wikipedia.org/wiki/Hacker). We all take notes. There’s a million note taking applications out there. [Literally](https://www.noteapps.ca/). Wouldn’t it be nice to have one where your notes are _more_ than plain text files? Where your notes essentially become a _database_ that you can query; that you can build custom knowledge applications on top of? A _hackable notebook_, if you will?\n\nThis is what SilverBullet aims to be.\n\nAbsolutely. You use SilverBullet to quickly jot things down. It’s a notes app after all. However, this is just the beginning. Gradually, you start to annotate your notes using [Frontmatter](https://silverbullet.md/Frontmatter). You realize: “Hey, this note represents a _person_, let me [tag](https://silverbullet.md/Tags) it as such.” Before you know it, you’re turning your notes into [Objects](https://silverbullet.md/Objects). Then you learn that in SilverBullet you can [Live Query](https://silverbullet.md/Live%20Queries) these objects. Your queries grow into reusable [Templates](https://silverbullet.md/Templates) written using a powerful [Template Language](https://silverbullet.md/Template%20Language). You find more and more uses of these templates, for instance to create [new pages](https://silverbullet.md/Page%20Templates), or [widgets](https://silverbullet.md/Live%20Template%20Widgets) automatically added to your pages.\n\nAnd then, before you know it — you realize you’re effectively building applications in your notes app. [End-User Programming](https://silverbullet.md/End-User%20Programming), y’all. It’s cool.\n\nYou may have been told there is _no such thing_ as a [silver bullet](https://en.wikipedia.org/wiki/Silver_bullet).\n\nYou were told wrong.\n\n[![Introduction to SilverBullet](http://img.youtube.com/vi/8btx9HeuZ4s/0.jpg)](https://www.youtube.com/watch?v=8btx9HeuZ4s)\n\n## Features\nSilverBullet...\n* Runs in any modern browser (including on mobile) as a PWA in two Client Modes (_online_ and _synced_ mode), where the _synced mode_ enables **100% offline operation**, keeping a copy of content in the browser, syncing back to the server when a network connection is available.\n* Provides an enjoyable markdown writing experience with a clean UI, rendering text using Live Preview, further **reducing visual noise** while still providing direct access to the underlying markdown syntax.\n* Supports wiki-style **page linking** using the `[[page link]]` syntax. Incoming links are indexed and appear as “Linked Mentions” at the bottom of the pages linked to thereby providing _bi-directional linking_.\n* Optimized for **keyboard-based operation**:\n  * Quickly navigate between pages using the **page switcher** (triggered with `Cmd-k` on Mac or `Ctrl-k` on Linux and Windows).\n  * Run commands via their keyboard shortcuts or the **command palette** (triggered with `Cmd-/` or `Ctrl-/` on Linux and Windows).\n  * Use Slash Commands to perform common text editing operations.\n* Provides a platform for [end-user programming](https://www.inkandswitch.com/end-user-programming/) through its support for Objects, Live Queries and Live Templates.\n* Robust extension mechanism using [plugs](https://silverbullet.md/Plugs).\n* **Self-hosted**: you own your data. All content is stored as plain files in a folder on disk. Back up, sync, edit, publish, script with any additional tools you like.\n* SilverBullet is [open source, MIT licensed](https://opensource.org/license/MIT) software.\n\n## Installing SilverBullet\nCheck out the [instructions](https://silverbullet.md/Install).\n\n## Developing SilverBullet\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/silverbulletmd/silverbullet)\n\nSilverBullet is written in [TypeScript](https://www.typescriptlang.org/) and\nbuilt on top of the excellent [CodeMirror 6](https://codemirror.net/) editor\ncomponent. Additional UI is built using [Preact](https://preactjs.com).\n[ESBuild]([https://parceljs.org/](https://esbuild.github.io)) is used to build both the front-end and\nback-end bundles. The server backend runs as a HTTP server on Deno using and is written using [Hono](https://hono.dev).\n\nTo prepare the initial web and plug build run:\n\n```shell\ndeno task build\n```\n\nTo symlink `silverbullet` to your locally checked-out version, run:\n\n```shell\ndeno task install\n```\n\nYou can then run the server in “watch mode” (automatically restarting when you\nchange source files) with:\n\n```shell\ndeno task watch-server <PATH-TO-YOUR-SPACE>\n```\n\nAfter this initial build, it's convenient to run three commands in parallel (in\nseparate terminals):\n\n```shell\ndeno task watch-web\ndeno task watch-server <PATH-TO-YOUR-SPACE>\ndeno task watch-plugs\n```\n\nTo typecheck the entire codebase (recommended before submitting PR):\n```shell\ndeno task check\n```\n\nTo run unit tests:\n```shell\ndeno task test\n```\n\n## Feedback\n\nIf you (hypothetically) find bugs or have feature requests, post them in\n[our issue tracker](https://github.com/silverbulletmd/silverbullet/issues).\nWould you like to contribute?\n[Check out the code](https://github.com/silverbulletmd/silverbullet), and the\nissue tracker as well for ideas on what to work on.\nAlso be sure to check out our [Discourse community](https://community.silverbullet.md).\n"
        },
        {
          "name": "build_bundle.ts",
          "type": "blob",
          "size": 0.8193359375,
          "content": "import { denoPlugins } from \"@luca/esbuild-deno-loader\";\nimport * as esbuild from \"esbuild\";\n\nawait Deno.mkdir(\"dist\", { recursive: true });\nawait esbuild.build({\n  entryPoints: {\n    silverbullet: \"silverbullet.ts\",\n  },\n  outdir: \"dist\",\n  format: \"esm\",\n  absWorkingDir: Deno.cwd(),\n  bundle: true,\n  treeShaking: true,\n  sourcemap: false,\n  logLevel: \"error\",\n  minify: true,\n  external: [\n    \"https://deno.land/std@*\",\n  ],\n  plugins: denoPlugins({\n    configPath: new URL(\"./deno.json\", import.meta.url).pathname,\n  }),\n});\nconst bundleJs = await Deno.readTextFile(\"dist/silverbullet.js\");\n// Patch output JS with import.meta.main override to avoid ESBuild CLI handling\nawait Deno.writeTextFile(\n  \"dist/silverbullet.js\",\n  \"import.meta.main = false;\\n\" + bundleJs,\n);\nconsole.log(\"Output in dist/silverbullet.js\");\nesbuild.stop();\n"
        },
        {
          "name": "build_plugs.ts",
          "type": "blob",
          "size": 0.9404296875,
          "content": "import * as path from \"@std/path\";\nimport * as esbuild from \"esbuild\";\nimport { compileManifests } from \"./cmd/compile.ts\";\nimport { builtinPlugNames } from \"./plugs/builtin_plugs.ts\";\nimport { parseArgs } from \"@std/cli/parse-args\";\nimport { fileURLToPath } from \"node:url\";\n\nif (import.meta.main) {\n  const args = parseArgs(Deno.args, {\n    boolean: [\"debug\", \"watch\", \"reload\", \"info\"],\n    alias: { w: \"watch\" },\n  });\n\n  const manifests = builtinPlugNames.map((name) =>\n    `./plugs/${name}/${name}.plug.yaml`\n  );\n\n  const targetDir = path.join(\"dist_plug_bundle\", \"_plug\");\n  Deno.mkdirSync(targetDir, { recursive: true });\n  Deno.mkdirSync(\"dist\", { recursive: true });\n\n  // Build the other plugs\n  await compileManifests(\n    manifests,\n    targetDir,\n    args.watch,\n    {\n      debug: args.debug,\n      reload: args.reload,\n      info: args.info,\n      configPath: fileURLToPath(new URL(\"deno.json\", import.meta.url)),\n    },\n  );\n  esbuild.stop();\n}\n"
        },
        {
          "name": "build_web.ts",
          "type": "blob",
          "size": 3.7548828125,
          "content": "import { copy } from \"@std/fs\";\nimport { fileURLToPath } from \"node:url\";\n\nimport sass from \"denosass\";\nimport { bundleFolder } from \"./lib/asset_bundle/builder.ts\";\n\nimport { parseArgs } from \"@std/cli/parse-args\";\nimport { patchDenoLibJS } from \"./cmd/compile.ts\";\nimport { denoPlugins } from \"@luca/esbuild-deno-loader\";\nimport * as esbuild from \"esbuild\";\n\nexport async function bundleAll(\n  watch: boolean,\n): Promise<void> {\n  let building = false;\n  await buildCopyBundleAssets();\n  let timer;\n  if (watch) {\n    const watcher = Deno.watchFs([\"web\", \"dist_plug_bundle\"]);\n    for await (const _event of watcher) {\n      if (timer) {\n        clearTimeout(timer);\n      }\n      timer = setTimeout(() => {\n        console.log(\"Change detected, rebuilding...\");\n        if (building) {\n          return;\n        }\n        building = true;\n        buildCopyBundleAssets().finally(() => {\n          building = false;\n        });\n      }, 1000);\n    }\n  }\n}\n\nexport async function copyAssets(dist: string) {\n  await Deno.mkdir(dist, { recursive: true });\n  await copy(\"web/fonts\", `${dist}`, { overwrite: true });\n  await copy(\"web/index.html\", `${dist}/index.html`, {\n    overwrite: true,\n  });\n  await copy(\"web/auth.html\", `${dist}/auth.html`, {\n    overwrite: true,\n  });\n  await copy(\"web/images/favicon.png\", `${dist}/favicon.png`, {\n    overwrite: true,\n  });\n  await copy(\"web/images/logo.png\", `${dist}/logo.png`, {\n    overwrite: true,\n  });\n  await copy(\"web/images/logo-dock.png\", `${dist}/logo-dock.png`, {\n    overwrite: true,\n  });\n  await copy(\"web/manifest.json\", `${dist}/manifest.json`, {\n    overwrite: true,\n  });\n  const compiler = sass(\n    Deno.readTextFileSync(\"web/styles/main.scss\"),\n    {\n      load_paths: [\"web/styles\"],\n    },\n  );\n  await Deno.writeTextFile(\n    `${dist}/main.css`,\n    compiler.to_string(\"expanded\") as string,\n  );\n\n  // HACK: Patch the JS by removing an invalid regex\n  let bundleJs = await Deno.readTextFile(`${dist}/client.js`);\n  bundleJs = patchDenoLibJS(bundleJs);\n  await Deno.writeTextFile(`${dist}/client.js`, bundleJs);\n}\nasync function buildCopyBundleAssets() {\n  await Deno.mkdir(\"dist_client_bundle\", { recursive: true });\n  await Deno.mkdir(\"dist_plug_bundle\", { recursive: true });\n\n  await bundleFolder(\n    \"dist_plug_bundle\",\n    \"dist/plug_asset_bundle.json\",\n  );\n\n  console.log(\"Now ESBuilding the client and service workers...\");\n\n  const result = await esbuild.build({\n    entryPoints: [\n      {\n        in: \"web/boot.ts\",\n        out: \".client/client\",\n      },\n      {\n        in: \"web/service_worker.ts\",\n        out: \"service_worker\",\n      },\n    ],\n    outdir: \"dist_client_bundle\",\n    absWorkingDir: Deno.cwd(),\n    bundle: true,\n    treeShaking: true,\n    sourcemap: \"linked\",\n    minify: true,\n    jsxFactory: \"h\",\n    // metafile: true,\n    jsx: \"automatic\",\n    jsxFragment: \"Fragment\",\n    jsxImportSource: \"https://esm.sh/preact@10.23.1\",\n    plugins: denoPlugins({\n      configPath: fileURLToPath(new URL(\"./deno.json\", import.meta.url)),\n    }),\n  });\n\n  if (result.metafile) {\n    const text = await esbuild.analyzeMetafile(result.metafile!);\n    console.log(\"Bundle info\", text);\n  }\n\n  // Patch the service_worker {{CACHE_NAME}}\n  let swCode = await Deno.readTextFile(\"dist_client_bundle/service_worker.js\");\n  swCode = swCode.replaceAll(\"{{CACHE_NAME}}\", `cache-${Date.now()}`);\n  await Deno.writeTextFile(\"dist_client_bundle/service_worker.js\", swCode);\n\n  await copyAssets(\"dist_client_bundle/.client\");\n  await bundleFolder(\"dist_client_bundle\", \"dist/client_asset_bundle.json\");\n\n  console.log(\"Built!\");\n}\n\nif (import.meta.main) {\n  const args = parseArgs(Deno.args, {\n    boolean: [\"watch\"],\n    alias: { w: \"watch\" },\n    default: {\n      watch: false,\n    },\n  });\n  await bundleAll(args.watch);\n  if (!args.watch) {\n    esbuild.stop();\n  }\n}\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "deno.json",
          "type": "blob",
          "size": 10.5537109375,
          "content": "{\n  \"name\": \"@silverbulletmd/silverbullet\",\n  \"version\": \"0.10.1\",\n  \"exports\": {\n    \"./syscall\": \"./plug-api/syscall.ts\",\n    \"./syscalls\": \"./plug-api/syscalls.ts\",\n    \"./types\": \"./plug-api/types.ts\",\n    \"./lib/json\": \"./plug-api/lib/json.ts\",\n    \"./lib/tree\": \"./plug-api/lib/tree.ts\",\n    \"./lib/attribute\": \"./plug-api/lib/attribute.ts\",\n    \"./lib/parse_query\": \"./plug-api/lib/parse_query.ts\",\n    \"./lib/page_ref\": \"./plug-api/lib/page_ref.ts\",\n    \"./lib/resolve\": \"./plug-api/lib/resolve.ts\",\n    \"./lib/query_expression\": \"./plug-api/lib/query_expression.ts\",\n    \"./lib/yaml_page\": \"./plug-api/lib/yaml_page.ts\",\n    \"./lib/query\": \"./plug-api/lib/query.ts\",\n    \"./lib/frontmatter\": \"./plug-api/lib/frontmatter.ts\",\n    \"./lib/markdown\": \"./plug-api/lib/markdown.ts\",\n    \"./lib/tags\": \"./plug-api/lib/tags.ts\",\n    \"./type/config\": \"./type/config.ts\",\n    \"./type/rpc\": \"./type/rpc.ts\",\n    \"./type/client\": \"./type/client.ts\"\n  },\n  \"publish\": {\n    \"exclude\": [\n      \"website\",\n      \"CHANGELOG.md\"\n    ]\n  },\n  \"tasks\": {\n    \"clean\": \"rm -rf dist dist_client_bundle dist_plug_bundle website_build\",\n    \"deep-clean-mac\": \"rm -f deno.lock && rm -rf $HOME/Library/Caches/deno && deno task clean\",\n\n    \"install\": \"deno install -g -f --unstable-kv --unstable-worker-options -A --import-map deno.json silverbullet.ts\",\n\n    \"check\": \"find . -name '*.ts*' | xargs deno check\",\n    \"lint\": \"deno lint\",\n    \"fmt\": \"deno fmt\",\n    \"test\": \"deno test -A --unstable-kv  --unstable-worker-options\",\n    \"bench\": \"deno bench\",\n\n    \"build\": \"deno run -A build_plugs.ts && deno run -A build_web.ts\",\n    \"plugs\": \"deno run -A build_plugs.ts\",\n    \"server\": \"deno run -A --unstable-kv --unstable-worker-options --check silverbullet.ts\",\n    \"generate\": \"./scripts/generate.sh\",\n\n    \"watch-web\": \"deno run -A --check build_web.ts --watch\",\n    \"watch-server\": \"deno run -A --unstable-kv  --unstable-worker-options --check --watch silverbullet.ts\",\n    \"watch-plugs\": \"deno run -A --check build_plugs.ts -w\",\n\n    \"bundle\": \"deno run -A build_bundle.ts\",\n\n    \"compile\": \"deno task bundle && deno compile -A --unstable-kv --unstable-worker-options -o silverbullet dist/silverbullet.js\",\n    \"server:dist:linux-x86_64\": \"deno task bundle && deno compile -A --unstable-kv --unstable-worker-options --target x86_64-unknown-linux-gnu -o silverbullet dist/silverbullet.js && zip silverbullet-server-linux-x86_64.zip silverbullet\",\n    \"server:dist:linux-aarch64\": \"deno task bundle && deno compile -A --unstable-kv --unstable-worker-options --target aarch64-unknown-linux-gnu -o silverbullet dist/silverbullet.js && zip silverbullet-server-linux-aarch64 silverbullet\",\n    \"server:dist:darwin-x86_64\": \"deno task bundle && deno compile -A --unstable-kv  --unstable-worker-options --target x86_64-apple-darwin -o silverbullet dist/silverbullet.js && zip silverbullet-server-darwin-x86_64.zip silverbullet\",\n    \"server:dist:darwin-aarch64\": \"deno task bundle && deno compile -A --unstable-kv --unstable-worker-options --target aarch64-apple-darwin -o silverbullet dist/silverbullet.js  && zip silverbullet-server-darwin-aarch64.zip silverbullet\",\n    \"server:dist:windows-x86_64\": \"deno task bundle && deno compile -A --unstable-kv --unstable-worker-options --target x86_64-pc-windows-msvc -o silverbullet.exe dist/silverbullet.js && zip silverbullet-server-windows-x86_64.zip silverbullet.exe\"\n  },\n  \"lint\": {\n    \"exclude\": [\n      \"dist\",\n      \"dist_client_bundle\",\n      \"dist_plug_bundle\",\n      \"cmd/test_space\",\n      \"cmd/test/test_space\"\n    ],\n    \"rules\": {\n      \"exclude\": [\"no-explicit-any\", \"no-slow-types\"]\n    }\n  },\n  \"fmt\": {\n    \"exclude\": [\n      \"dist*\",\n      \"website\",\n      \"website_build\",\n      \"test_space\",\n      \"**/*.md\",\n      \"**/*.js\",\n      \"**/*.json\"\n    ]\n  },\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"dom.iterable\", \"dom.asynciterable\", \"deno.ns\"],\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"https://esm.sh/preact@10.23.1\"\n  },\n  \"imports\": {\n    \"@cliffy/command\": \"jsr:@cliffy/command@^1.0.0-rc.7\",\n    \"@silverbulletmd/silverbullet/syscall\": \"./plug-api/syscall.ts\",\n    \"@silverbulletmd/silverbullet/syscalls\": \"./plug-api/syscalls.ts\",\n    \"@silverbulletmd/silverbullet/types\": \"./plug-api/types.ts\",\n    \"@silverbulletmd/silverbullet/lib/json\": \"./plug-api/lib/json.ts\",\n    \"@silverbulletmd/silverbullet/lib/tree\": \"./plug-api/lib/tree.ts\",\n    \"@silverbulletmd/silverbullet/lib/attribute\": \"./plug-api/lib/attribute.ts\",\n    \"@silverbulletmd/silverbullet/lib/parse_query\": \"./plug-api/lib/parse_query.ts\",\n    \"@silverbulletmd/silverbullet/lib/page_ref\": \"./plug-api/lib/page_ref.ts\",\n    \"@silverbulletmd/silverbullet/lib/resolve\": \"./plug-api/lib/resolve.ts\",\n    \"@silverbulletmd/silverbullet/lib/query_expression\": \"./plug-api/lib/query_expression.ts\",\n    \"@silverbulletmd/silverbullet/lib/yaml_page\": \"./plug-api/lib/yaml_page.ts\",\n    \"@silverbulletmd/silverbullet/lib/native_fetch\": \"./plug-api/lib/native_fetch.ts\",\n    \"@silverbulletmd/silverbullet/lib/query\": \"./plug-api/lib/query.ts\",\n    \"@silverbulletmd/silverbullet/lib/frontmatter\": \"./plug-api/lib/frontmatter.ts\",\n    \"@silverbulletmd/silverbullet/lib/markdown\": \"./plug-api/lib/markdown.ts\",\n    \"@silverbulletmd/silverbullet/lib/tags\": \"./plug-api/lib/tags.ts\",\n    \"@silverbulletmd/silverbullet/type/config\": \"./type/config.ts\",\n    \"@silverbulletmd/silverbullet/type/rpc\": \"./type/rpc.ts\",\n    \"@silverbulletmd/silverbullet/type/client\": \"./type/client.ts\",\n    \"$common/\": \"./common/\",\n    \"$lib/\": \"./lib/\",\n    \"@codemirror/autocomplete\": \"https://esm.sh/@codemirror/autocomplete@6.18.1?external=@codemirror/state,@codemirror/commands,@lezer/common,@codemirror/view,@codemirror/language&target=es2022\",\n    \"@codemirror/commands\": \"https://esm.sh/@codemirror/commands@6.7.0?external=@codemirror/state,@codemirror/view,@codemirror/language,@lezer/common&target=es2022\",\n    \"@codemirror/lang-css\": \"https://esm.sh/@codemirror/lang-css@6.3.0?external=@codemirror/language,@codemirror/autocomplete,@codemirror/state,@lezer/common,@lezer/css&target=es2022\",\n    \"@codemirror/lang-html\": \"https://esm.sh/@codemirror/lang-html@6.4.9?external=@codemirror/language,@codemirror/autocomplete,@codemirror/lang-css,@codemirror/state,@lezer/lr,@lezer/html,@codemirror/lang-javascript,@codemirror/view&target=es2022\",\n    \"@codemirror/lang-javascript\": \"https://esm.sh/@codemirror/lang-javascript@6.2.2?external=@codemirror/language,@codemirror/autocomplete,@codemirror/view,@codemirror/state,@codemirror/lint,@lezer/common,@lezer/lr,@lezer/javascript,@codemirror/commands&target=es2022\",\n    \"@codemirror/lang-markdown\": \"https://esm.sh/@codemirror/lang-markdown@6.3.0?external=@codemirror/state,@lezer/common,@codemirror/language,@lezer/markdown,@codemirror/view,@lezer/highlight,@codemirror/lang-html,@codemirror/autocomplete&target=es2022\",\n    \"@codemirror/language\": \"https://esm.sh/@codemirror/language@6.10.3?external=@codemirror/state,@lezer/common,@lezer/lr,@codemirror/view,@lezer/highlight,style-mod&target=es2022\",\n    \"@codemirror/legacy-modes/\": \"https://esm.sh/@codemirror/legacy-modes@6.4.0/\",\n    \"@codemirror/lint\": \"https://esm.sh/@codemirror/lint@6.8.2?external=@codemirror/state,@codemirror/view,@lezer/common,crelt&target=es2022\",\n    \"@codemirror/search\": \"https://esm.sh/@codemirror/search@6.5.6?external=@codemirror/state,@codemirror/view,crelt&target=es2022\",\n    \"@codemirror/state\": \"https://esm.sh/@codemirror/state@6.4.1&target=es2022\",\n    \"@codemirror/view\": \"https://esm.sh/@codemirror/view@6.34.1?external=@codemirror/state,@lezer/common,style-mod&target=es2022\",\n    \"@js-temporal/polyfill\": \"https://esm.sh/@js-temporal/polyfill@0.4.4\",\n    \"@lezer/common\": \"https://esm.sh/@lezer/common@1.2.2&target=es2022\",\n    \"@lezer/css\": \"https://esm.sh/@lezer/css@1.1.9?external=@lezer/lr,@lezer/highlight\",\n    \"@lezer/highlight\": \"https://esm.sh/@lezer/highlight@1.2.1?external=@lezer/common,@lezer/lr&target=es2022\",\n    \"@lezer/html\": \"https://esm.sh/@lezer/html@1.3.10?external=@lezer/common,@lezer/lr,@lezer/highlight&target=es2022\",\n    \"@lezer/javascript\": \"https://esm.sh/@lezer/javascript@1.4.19?external=@lezer/common,@codemirror/language,@lezer/highlight,@lezer/lr&target=es2022\",\n    \"@lezer/lr\": \"https://esm.sh/@lezer/lr@1.4.2?external=@lezer/common&target=es2022\",\n    \"@lezer/markdown\": \"https://esm.sh/@lezer/markdown@1.3.1?external=@lezer/common,@codemirror/language,@lezer/highlight,@lezer/lr&target=es2022\",\n    \"@luca/esbuild-deno-loader\": \"jsr:@luca/esbuild-deno-loader@^0.10.3\",\n    \"@replit/codemirror-lang-nix\": \"https://esm.sh/@replit/codemirror-lang-nix@6.0.1?external=@codemirror/language,@codemirror/autocomplete,@codemirror/state,@lezer/highlight,@lezer/lr&target=es2022\",\n    \"@replit/codemirror-vim\": \"https://esm.sh/@replit/codemirror-vim@6.2.1?external=@codemirror/state,@codemirror/language,@codemirror/view,@codemirror/search,@codemirror/commands\",\n    \"@std/assert\": \"jsr:@std/assert@^1.0.1\",\n    \"@std/cli\": \"jsr:@std/cli@^1.0.1\",\n    \"@std/fs\": \"jsr:@std/fs@^1.0.0\",\n    \"@std/io\": \"jsr:@std/io@^0.224.3\",\n    \"@std/io/read-all\": \"jsr:@std/io@^0.224.3/read-all\",\n    \"@std/path\": \"jsr:@std/path@^1.0.2\",\n    \"@std/testing\": \"jsr:@std/testing@^0.225.3\",\n    \"@std/yaml\": \"jsr:@std/yaml@^1.0.5\",\n    \"crelt\": \"https://esm.sh/crelt@1.0.6\",\n    \"denosass\": \"https://deno.land/x/denosass@1.0.6/mod.ts\",\n    \"djwt\": \"https://deno.land/x/djwt@v3.0.2/mod.ts\",\n    \"esbuild\": \"https://deno.land/x/esbuild@v0.20.2/mod.js\",\n    \"fake-indexeddb/\": \"https://esm.sh/fake-indexeddb@4.0.2/\",\n    \"fast-diff\": \"https://esm.sh/fast-diff@1.3.0\",\n    \"fuse\": \"https://deno.land/x/fuse@v6.4.1/dist/fuse.esm.min.js\",\n    \"gitignore-parser\": \"https://esm.sh/gitignore-parser@0.0.2\",\n    \"hono/\": \"https://deno.land/x/hono@v3.12.2/\",\n    \"js-yaml\": \"https://esm.sh/js-yaml@4.1.0\",\n    \"mimetypes\": \"https://deno.land/x/mimetypes@v1.0.0/mod.ts\",\n    \"porter-stemmer\": \"https://esm.sh/porter-stemmer@0.9.1\",\n    \"preact\": \"https://esm.sh/preact@10.23.1\",\n    \"preact-feather\": \"https://esm.sh/preact-feather@4.2.1?external=preact\",\n    \"preact-feather/types\": \"https://esm.sh/preact-feather@4.2.1/dist/types?external=preact\",\n    \"preact/\": \"https://esm.sh/preact@10.23.1/\",\n    \"react-icons/md\": \"https://deno.land/x/react_icons_md@1.0.9/mod.ts\",\n    \"react-icons/md/\": \"https://deno.land/x/react_icons_md@1.0.9/ico/\",\n    \"react-icons/types\": \"https://deno.land/x/react_icons@1.0.9/mod.ts\",\n    \"s3_lite_client/\": \"https://deno.land/x/s3_lite_client@0.4.0/\",\n    \"style-mod\": \"https://esm.sh/style-mod@4.1.2?target=es2022\",\n    \"turndown\": \"https://esm.sh/turndown@7.2.0?target=es2022\",\n    \"ajv\": \"https://esm.sh/ajv@8.17.1?target=es2022\",\n    \"turndown-plugin-gfm\": \"https://esm.sh/@joplin/turndown-plugin-gfm@1.0.56?target=es2022\"\n  }\n}\n"
        },
        {
          "name": "docker-entrypoint.sh",
          "type": "blob",
          "size": 1.3447265625,
          "content": "#!/bin/bash -e\n\n# Check if UID and GID are passed as environment variables, if not, extract from the space folder owner\nif [ -z \"$PUID\" ] && [ \"$UID\" == \"0\" ] ; then\n    # Get the UID of the folder owner\n    PUID=$(stat -c \"%u\" \"$SB_FOLDER\")\n    echo \"Will run SilverBullet with UID $PUID, inferred from the owner of $SB_FOLDER (set PUID environment variable to override)\"\nfi\nif [ -z \"$PGID\" ]; then\n    # Get the GID of the folder owner\n    PGID=$(stat -c \"%g\" \"$SB_FOLDER\")\nfi\n\nif [ \"$PUID\" == \"0\" ] || [ \"$UID\" != \"0\" ]; then\n    # Will run SilverBullet as default user\n    deno run -A --unstable-kv --unstable-worker-options /silverbullet.js $@\nelse\n    # Create silverbullet user and group ad-hoc mapped to PUID and PGID\n    getent group $PGID &> /dev/null || groupadd -g $PGID silverbullet\n    getent passwd $PUID &> /dev/null || useradd -M -u $PUID -g $PGID silverbullet\n    # And make sure /deno-dir (Deno cache) is accessible\n    chown -R $PUID:$PGID /deno-dir\n    args=\"$@\"\n    # And run via su as requested PUID, usually this will be 'silverbullet' but if a user with this idea already exists, we will use that\n    USERNAME=$(getent passwd $PUID | cut -d \":\" -f 1)\n    echo \"Running SilverBullet as $USERNAME (configured as PUID $PUID and PGID $PGID)\"\n    su $USERNAME -s /bin/bash -c \"deno run -A --unstable-kv --unstable-worker-options /silverbullet.js $args\"\nfi\n\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 0.8740234375,
          "content": "#!/bin/sh\n\nset -e\n\nif ! command -v unzip >/dev/null; then\n\techo \"Error: unzip is required to install SilverBullet.\" 1>&2\n\texit 1\nfi\n\ncase $(uname -sm) in\n\"Darwin x86_64\") target=\"darwin-x86_64\" ;;\n\"Darwin arm64\") target=\"darwin-aarch64\" ;;\n\"Linux arm64\") target=\"linux-aarch64\" ;;\n*) target=\"linux-x86_64\" ;;\nesac\n\necho \"Installing for $target\"\n\nif [ $# -eq 0 ]; then\n\tsb_uri=\"https://github.com/silverbulletmd/silverbullet/releases/latest/download/silverbullet-server-${target}.zip\"\nelse\n\tsb_uri=\"https://github.com/silverbulletmd/silverbullet/releases/download/${1}/silverbullet-server-${target}.zip\"\nfi\nexe=silverbullet\nbin_dir=.\n\ncurl --fail --location --progress-bar --output \"$exe.zip\" \"$sb_uri\"\nunzip -d \"$bin_dir\" -o \"$exe.zip\"\nchmod +x \"$exe\"\nrm \"$exe.zip\"\n\necho \"SilverBullet server was installed successfully to $bin, run it directly via ./$exe or move it to a more convenient place.\""
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "netlify.toml",
          "type": "blob",
          "size": 0.0712890625,
          "content": "[build]\npublish = \"website_build\"\ncommand = \"./scripts/build_website.sh\"\n"
        },
        {
          "name": "plug-api",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugs",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "silverbullet.ts",
          "type": "blob",
          "size": 3.126953125,
          "content": "import.meta.main = false;\nimport { Command } from \"@cliffy/command\";\n\nimport { version } from \"./version.ts\";\n\nimport { upgradeCommand } from \"./cmd/upgrade.ts\";\nimport { versionCommand } from \"./cmd/version.ts\";\nimport { serveCommand } from \"./cmd/server.ts\";\nimport { plugCompileCommand } from \"./cmd/plug_compile.ts\";\nimport { plugRunCommand } from \"./cmd/plug_run.ts\";\nimport { syncCommand } from \"./cmd/sync.ts\";\n\n// Unhandled rejection, let's not crash\nglobalThis.addEventListener(\"unhandledrejection\", (event) => {\n  console.error(\"Unhandled rejection:\", event);\n  event.preventDefault();\n});\n\nawait new Command()\n  .name(\"silverbullet\")\n  .description(\"Note taking for knowledge hackers\")\n  .version(version)\n  .helpOption(false)\n  .usage(\"<options> <folder> | <command> (see below)\")\n  // Main command\n  .arguments(\"[folder:string]\")\n  .option(\n    \"-L, --hostname <hostname:string>\",\n    \"Hostname or address to listen on\",\n  )\n  .option(\"-p, --port <port:number>\", \"Port to listen on\")\n  .option(\n    \"--user <user:string>\",\n    \"'username:password' combo for authentication\",\n  )\n  .option(\n    \"--cert <certFile:string>\",\n    \"Path to TLS certificate\",\n  )\n  .option(\n    \"--key <keyFile:string>\",\n    \"Path to TLS key\",\n  )\n  .option(\n    \"--sync-only\",\n    \"Run the server as a pure space (file) store only without any backend processing (this disables 'online mode' in the client)\",\n  )\n  .option(\n    \"--reindex\",\n    \"Reindex space on startup\",\n  )\n  .option(\n    \"--db <db:string>\",\n    \"Path to database file\",\n  )\n  .action(serveCommand)\n  // plug:compile\n  .command(\"plug:compile\")\n  .description(\"Bundle (compile) one or more plug manifests\")\n  .arguments(\"<...name.plug.yaml:string>\")\n  .option(\"--debug\", \"Do not minifiy code\", { default: false })\n  .option(\"--info\", \"Print out size info per function\", {\n    default: false,\n  })\n  .option(\"--watch, -w [type:boolean]\", \"Watch for changes and rebuild\", {\n    default: false,\n  })\n  .option(\n    \"--dist <path:string>\",\n    \"Folder to put the resulting .plug.json file into\",\n    { default: \".\" },\n  )\n  .option(\"--importmap <path:string>\", \"Path to import map file to use\")\n  .option(\"-c, --config <path:string>\", \"Path to deno.json file to use\")\n  .option(\"--runtimeUrl <url:string>\", \"URL to worker_runtime.ts to use\")\n  .action(plugCompileCommand)\n  // plug:run\n  .command(\"plug:run\")\n  .description(\"Run a PlugOS function from the CLI\")\n  .arguments(\"<spacePath> [function] [...args:string]\")\n  .option(\n    \"-L, --hostname <hostname:string>\",\n    \"Hostname or address to listen on\",\n  )\n  .option(\"-p, --port <port:number>\", \"Port to listen on\")\n  .action(plugRunCommand)\n  // upgrade\n  .command(\"upgrade\")\n  .description(\"Upgrade SilverBullet\")\n  .action(upgradeCommand)\n  // sync\n  .command(\"sync\")\n  .description(\"Synchronize two spaces\")\n  .option(\n    \"--snapshot <snapshot:string>\",\n    \"Path to state file to use\",\n  )\n  .option(\n    \"--wipe-secondary\",\n    \"Wipe secondary and perform a full sync\",\n  )\n  .arguments(\"<primary:string> <secondary:string>\")\n  .action(syncCommand)\n  // version\n  .command(\"version\")\n  .description(\"Get current version\")\n  .action(versionCommand)\n  .parse(Deno.args);\n\nDeno.exit(0);\n"
        },
        {
          "name": "type",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.ts",
          "type": "blob",
          "size": 0.0322265625,
          "content": "export const version = \"0.10.1\";\n"
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}