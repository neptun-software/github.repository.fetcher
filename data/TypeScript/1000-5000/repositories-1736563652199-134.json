{
  "metadata": {
    "timestamp": 1736563652199,
    "page": 134,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "electron-vite/electron-vite-vue",
      "stars": 4423,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3056640625,
          "content": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\npnpm-debug.log*\nlerna-debug.log*\n\nnode_modules\ndist\ndist-ssr\ndist-electron\nrelease\n*.local\n\n# Editor directories and files\n.vscode/.debug.env\n.idea\n.DS_Store\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\n\n# lockfile\npackage-lock.json\npnpm-lock.yaml\nyarn.lock"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.22265625,
          "content": "# For electron-builder\n# https://github.com/electron-userland/electron-builder/issues/6289#issuecomment-1042620422\nshamefully-hoist=true\n\n# For China üá®üá≥ developers\n# electron_mirror=https://npmmirror.com/mirrors/electron/\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.1162109375,
          "content": "## 2022-10-03\n\n[v2.1.0](https://github.com/electron-vite/electron-vite-vue/pull/267)\n\n- `vite-electron-plugin` is Fast, and WYSIWYG. üå±\n- last-commit: db2e830 v2.1.0: use `vite-electron-plugin` instead `vite-plugin-electron`\n\n## 2022-06-04\n\n[v2.0.0](https://github.com/electron-vite/electron-vite-vue/pull/156)\n\n- üññ Based on the `vue-ts` template created by `npm create vite`, integrate `vite-plugin-electron`\n- ‚ö°Ô∏è More simplify, is in line with Vite project structure\n- last-commit: a15028a (HEAD -> main) feat: hoist `process.env`\n\n## 2022-01-30\n\n[v1.0.0](https://github.com/electron-vite/electron-vite-vue/releases/tag/v1.0.0)\n\n- ‚ö°Ô∏è Main„ÄÅRenderer„ÄÅpreload, all built with vite\n\n## 2022-01-27\n- Refactor the scripts part.\n- Remove `configs` directory.\n\n## 2021-11-11\n- Refactor the project. Use vite.config.ts build `Main-process`, `Preload-script` and `Renderer-process` alternative rollup.\n- Scenic `Vue>=3.2.13`, `@vue/compiler-sfc` is no longer necessary.\n- If you prefer Rollup, Use rollup branch.\n\n```bash\nError: @vitejs/plugin-vue requires vue (>=3.2.13) or @vue/compiler-sfc to be present in the dependency tree.\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2023 ËçâÈûãÊ≤°Âè∑\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.8955078125,
          "content": "# electron-vite-vue\n\nü•≥ Really simple `Electron` + `Vue` + `Vite` boilerplate.\n\n<!-- [![awesome-vite](https://awesome.re/mentioned-badge.svg)](https://github.com/vitejs/awesome-vite) -->\n<!-- [![Netlify Status](https://api.netlify.com/api/v1/badges/ae3863e3-1aec-4eb1-8f9f-1890af56929d/deploy-status)](https://app.netlify.com/sites/electron-vite/deploys) -->\n<!-- [![GitHub license](https://img.shields.io/github/license/caoxiemeihao/electron-vite-vue)](https://github.com/electron-vite/electron-vite-vue/blob/main/LICENSE) -->\n<!-- [![GitHub stars](https://img.shields.io/github/stars/caoxiemeihao/electron-vite-vue?color=fa6470)](https://github.com/electron-vite/electron-vite-vue) -->\n<!-- [![GitHub forks](https://img.shields.io/github/forks/caoxiemeihao/electron-vite-vue)](https://github.com/electron-vite/electron-vite-vue) -->\n[![GitHub Build](https://github.com/electron-vite/electron-vite-vue/actions/workflows/build.yml/badge.svg)](https://github.com/electron-vite/electron-vite-vue/actions/workflows/build.yml)\n[![GitHub Discord](https://img.shields.io/badge/chat-discord-blue?logo=discord)](https://discord.gg/sRqjYpEAUK)\n\n## Features\n\nüì¶ Out of the box  \nüéØ Based on the official [template-vue-ts](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-vue-ts), less invasive  \nüå± Extensible, really simple directory structure  \nüí™ Support using Node.js API in Electron-Renderer  \nüî© Support C/C++ native addons  \nüñ• It's easy to implement multiple windows  \n\n## Quick Setup\n\n```sh\n# clone the project\ngit clone https://github.com/electron-vite/electron-vite-vue.git\n\n# enter the project directory\ncd electron-vite-vue\n\n# install dependency\nnpm install\n\n# develop\nnpm run dev\n```\n\n## Debug\n\n![electron-vite-react-debug.gif](https://github.com/electron-vite/electron-vite-react/blob/main/electron-vite-react-debug.gif?raw=true)\n\n## Directory\n\n```diff\n+ ‚îú‚îÄ‚î¨ electron\n+ ‚îÇ ‚îú‚îÄ‚î¨ main\n+ ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ index.ts    entry of Electron-Main\n+ ‚îÇ ‚îî‚îÄ‚î¨ preload\n+ ‚îÇ   ‚îî‚îÄ‚îÄ index.ts    entry of Preload-Scripts\n  ‚îú‚îÄ‚î¨ src\n  ‚îÇ ‚îî‚îÄ‚îÄ main.ts       entry of Electron-Renderer\n  ‚îú‚îÄ‚îÄ index.html\n  ‚îú‚îÄ‚îÄ package.json\n  ‚îî‚îÄ‚îÄ vite.config.ts\n```\n\n<!--\n## Be aware\n\nüö® By default, this template integrates Node.js in the Renderer process. If you don't need it, you just remove the option below. [Because it will modify the default config of Vite](https://github.com/electron-vite/vite-plugin-electron-renderer#config-presets-opinionated).\n\n```diff\n# vite.config.ts\n\nexport default {\n  plugins: [\n-   // Use Node.js API in the Renderer-process\n-   renderer({\n-     nodeIntegration: true,\n-   }),\n  ],\n}\n```\n-->\n\n## FAQ\n\n- [C/C++ addons, Node.js modules - Pre-Bundling](https://github.com/electron-vite/vite-plugin-electron-renderer#dependency-pre-bundling)\n- [dependencies vs devDependencies](https://github.com/electron-vite/vite-plugin-electron-renderer#dependencies-vs-devdependencies)\n"
        },
        {
          "name": "electron-builder.json5",
          "type": "blob",
          "size": 0.9375,
          "content": "// @see https://www.electron.build/configuration/configuration\n{\n  \"$schema\": \"https://raw.githubusercontent.com/electron-userland/electron-builder/master/packages/app-builder-lib/scheme.json\",\n  \"appId\": \"YourAppID\",\n  \"asar\": true,\n  \"productName\": \"YourAppName\",\n  \"directories\": {\n    \"output\": \"release/${version}\"\n  },\n  \"files\": [\n    \"dist\",\n    \"dist-electron\"\n  ],\n  \"mac\": {\n    \"target\": [\n      \"dmg\"\n    ],\n    \"artifactName\": \"${productName}-Mac-${version}-Installer.${ext}\"\n  },\n  \"win\": {\n    \"target\": [\n      {\n        \"target\": \"nsis\",\n        \"arch\": [\n          \"x64\"\n        ]\n      }\n    ],\n    \"artifactName\": \"${productName}-Windows-${version}-Setup.${ext}\"\n  },\n  \"nsis\": {\n    \"oneClick\": false,\n    \"perMachine\": false,\n    \"allowToChangeInstallationDirectory\": true,\n    \"deleteAppDataOnUninstall\": false\n  },\n  \"linux\": {\n    \"target\": [\n      \"AppImage\"\n    ],\n    \"artifactName\": \"${productName}-Linux-${version}.${ext}\"\n  }\n}\n"
        },
        {
          "name": "electron-vite-vue.gif",
          "type": "blob",
          "size": 3391.7578125,
          "content": null
        },
        {
          "name": "electron",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 0.4521484375,
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/logo.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' 'unsafe-inline';\" />\n    <title>Electron + Vite + Vue</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script type=\"module\" src=\"/src/main.ts\"></script>\n  </body>\n</html>\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.8740234375,
          "content": "{\n  \"name\": \"electron-vue-vite\",\n  \"version\": \"28.1.0\",\n  \"main\": \"dist-electron/main/index.js\",\n  \"description\": \"Really simple Electron + Vue + Vite boilerplate.\",\n  \"author\": \"ËçâÈûãÊ≤°Âè∑ <308487730@qq.com>\",\n  \"license\": \"MIT\",\n  \"private\": true,\n  \"keywords\": [\n    \"electron\",\n    \"rollup\",\n    \"vite\",\n    \"vue3\",\n    \"vue\"\n  ],\n  \"debug\": {\n    \"env\": {\n      \"VITE_DEV_SERVER_URL\": \"http://127.0.0.1:3344/\"\n    }\n  },\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vue-tsc --noEmit && vite build && electron-builder\",\n    \"preview\": \"vite preview\"\n  },\n  \"devDependencies\": {\n    \"@vitejs/plugin-vue\": \"^5.0.4\",\n    \"electron\": \"^29.1.1\",\n    \"electron-builder\": \"^24.13.3\",\n    \"typescript\": \"^5.4.2\",\n    \"vite\": \"^5.1.5\",\n    \"vite-plugin-electron\": \"^0.28.4\",\n    \"vite-plugin-electron-renderer\": \"^0.14.5\",\n    \"vue\": \"^3.4.21\",\n    \"vue-tsc\": \"^2.0.6\"\n  }\n}\n"
        },
        {
          "name": "public",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.4287109375,
          "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"useDefineForClassFields\": true,\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Node\",\n    \"strict\": true,\n    \"jsx\": \"preserve\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"esModuleInterop\": true,\n    \"lib\": [\"ESNext\", \"DOM\"],\n    \"skipLibCheck\": true,\n    \"noEmit\": true\n  },\n  \"include\": [\"src\"],\n  \"references\": [\n    { \"path\": \"./tsconfig.node.json\" }\n  ]\n}\n"
        },
        {
          "name": "tsconfig.node.json",
          "type": "blob",
          "size": 0.2373046875,
          "content": "{\n  \"compilerOptions\": {\n    \"composite\": true,\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Node\",\n    \"resolveJsonModule\": true,\n    \"allowSyntheticDefaultImports\": true\n  },\n  \"include\": [\"vite.config.ts\", \"package.json\", \"electron\"]\n}\n"
        },
        {
          "name": "vite.config.flat.txt",
          "type": "blob",
          "size": 2.55078125,
          "content": "import { rmSync } from 'node:fs'\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport electron from 'vite-plugin-electron'\nimport renderer from 'vite-plugin-electron-renderer'\nimport pkg from './package.json'\n\n// https://vitejs.dev/config/\nexport default defineConfig(({ command }) => {\n  rmSync('dist-electron', { recursive: true, force: true })\n\n  const isServe = command === 'serve'\n  const isBuild = command === 'build'\n  const sourcemap = isServe || !!process.env.VSCODE_DEBUG\n\n  return {\n    plugins: [\n      vue(),\n      electron([\n        {\n          // Main process entry file of the Electron App.\n          entry: 'electron/main/index.ts',\n          onstart({ startup }) {\n            if (process.env.VSCODE_DEBUG) {\n              console.log(/* For `.vscode/.debug.script.mjs` */'[startup] Electron App')\n            } else {\n              startup()\n            }\n          },\n          vite: {\n            build: {\n              sourcemap,\n              minify: isBuild,\n              outDir: 'dist-electron/main',\n              rollupOptions: {\n                // Some third-party Node.js libraries may not be built correctly by Vite, especially `C/C++` addons, \n                // we can use `external` to exclude them to ensure they work correctly.\n                // Others need to put them in `dependencies` to ensure they are collected into `app.asar` after the app is built.\n                // Of course, this is not absolute, just this way is relatively simple. :)\n                external: Object.keys('dependencies' in pkg ? pkg.dependencies : {}),\n              },\n            },\n          },\n        },\n        {\n          entry: 'electron/preload/index.ts',\n          onstart({ reload }) {\n            // Notify the Renderer process to reload the page when the Preload scripts build is complete, \n            // instead of restarting the entire Electron App.\n            reload()\n          },\n          vite: {\n            build: {\n              sourcemap: sourcemap ? 'inline' : undefined, // #332\n              minify: isBuild,\n              outDir: 'dist-electron/preload',\n              rollupOptions: {\n                external: Object.keys('dependencies' in pkg ? pkg.dependencies : {}),\n              },\n            },\n          },\n        }\n      ]),\n      // Use Node.js API in the Renderer process\n      renderer(),\n    ],\n    server: process.env.VSCODE_DEBUG && (() => {\n      const url = new URL(pkg.debug.env.VITE_DEV_SERVER_URL)\n      return {\n        host: url.hostname,\n        port: +url.port,\n      }\n    })(),\n    clearScreen: false,\n  }\n})\n"
        },
        {
          "name": "vite.config.ts",
          "type": "blob",
          "size": 2.6640625,
          "content": "import fs from 'node:fs'\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport electron from 'vite-plugin-electron/simple'\nimport pkg from './package.json'\n\n// https://vitejs.dev/config/\nexport default defineConfig(({ command }) => {\n  fs.rmSync('dist-electron', { recursive: true, force: true })\n\n  const isServe = command === 'serve'\n  const isBuild = command === 'build'\n  const sourcemap = isServe || !!process.env.VSCODE_DEBUG\n\n  return {\n    plugins: [\n      vue(),\n      electron({\n        main: {\n          // Shortcut of `build.lib.entry`\n          entry: 'electron/main/index.ts',\n          onstart({ startup }) {\n            if (process.env.VSCODE_DEBUG) {\n              console.log(/* For `.vscode/.debug.script.mjs` */'[startup] Electron App')\n            } else {\n              startup()\n            }\n          },\n          vite: {\n            build: {\n              sourcemap,\n              minify: isBuild,\n              outDir: 'dist-electron/main',\n              rollupOptions: {\n                // Some third-party Node.js libraries may not be built correctly by Vite, especially `C/C++` addons, \n                // we can use `external` to exclude them to ensure they work correctly.\n                // Others need to put them in `dependencies` to ensure they are collected into `app.asar` after the app is built.\n                // Of course, this is not absolute, just this way is relatively simple. :)\n                external: Object.keys('dependencies' in pkg ? pkg.dependencies : {}),\n              },\n            },\n          },\n        },\n        preload: {\n          // Shortcut of `build.rollupOptions.input`.\n          // Preload scripts may contain Web assets, so use the `build.rollupOptions.input` instead `build.lib.entry`.\n          input: 'electron/preload/index.ts',\n          vite: {\n            build: {\n              sourcemap: sourcemap ? 'inline' : undefined, // #332\n              minify: isBuild,\n              outDir: 'dist-electron/preload',\n              rollupOptions: {\n                external: Object.keys('dependencies' in pkg ? pkg.dependencies : {}),\n              },\n            },\n          },\n        },\n        // Ployfill the Electron and Node.js API for Renderer process.\n        // If you want use Node.js in Renderer process, the `nodeIntegration` needs to be enabled in the Main process.\n        // See üëâ https://github.com/electron-vite/vite-plugin-electron-renderer\n        renderer: {},\n      }),\n    ],\n    server: process.env.VSCODE_DEBUG && (() => {\n      const url = new URL(pkg.debug.env.VITE_DEV_SERVER_URL)\n      return {\n        host: url.hostname,\n        port: +url.port,\n      }\n    })(),\n    clearScreen: false,\n  }\n})\n"
        }
      ]
    }
  ]
}