{
  "metadata": {
    "timestamp": 1736563577828,
    "page": 50,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "samchon/typia",
      "stars": 4751,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintrc.cjs",
          "type": "blob",
          "size": 1.158203125,
          "content": "module.exports = {\n  root: true,\n  plugins: [\"@typescript-eslint\"],\n  extends: [\"plugin:@typescript-eslint/recommended\"],\n  parser: \"@typescript-eslint/parser\",\n  parserOptions: {\n    project: [\"tsconfig.json\", \"test/tsconfig.json\", \"benchmark/tsconfig.json\"],\n  },\n  ignorePatterns: [\"bin\", \"website\", \"lib/**/*.d.ts\", \"node_modules\"],\n  overrides: [\n    {\n      files: [\"benchmark/**/*.ts\", \"src/**/*.ts\", \"test/**/*.ts\"],\n      rules: {\n        \"@typescript-eslint/ban-types\": \"off\",\n        \"@typescript-eslint/consistent-type-definitions\": \"off\",\n        \"@typescript-eslint/no-duplicate-imports\": \"error\",\n        \"@typescript-eslint/no-empty-function\": \"off\",\n        \"@typescript-eslint/no-empty-interface\": \"off\",\n        \"@typescript-eslint/no-explicit-any\": \"off\",\n        \"@typescript-eslint/no-inferrable-types\": \"off\",\n        \"@typescript-eslint/no-namespace\": \"off\",\n        \"@typescript-eslint/no-non-null-assertion\": \"off\",\n        \"@typescript-eslint/no-unused-vars\": \"off\",\n        \"@typescript-eslint/no-var-requires\": \"off\",\n        \"@typescript-eslint/no-floating-promises\": \"error\",\n        \"@typescript-eslint/prefer-as-const\": \"error\",\n      },\n    },\n  ],\n};\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.11328125,
          "content": "bin/\n!/bin\nlib/\nnode_modules/\n\npackages/typescript-json/src/\npackage-lock.json\npnpm-lock.yaml\nbun.lockb\n\n*.log\n*.tgz"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.0693359375,
          "content": "lib\nnode_modules\n\ntest/features/generate/input/generate_assert_clone.ts"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.36328125,
          "content": "\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n[INSERT CONTACT METHOD].\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\n[https://www.contributor-covenant.org/version/2/0/code_of_conduct.html][v2.0].\n\nCommunity Impact Guidelines were inspired by \n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available \nat [https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.0]: https://www.contributor-covenant.org/version/2/0/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.9833984375,
          "content": "# Contribution Guide\n## To Publish an issue\nThanks for your advise. Before publishing an issue, please check some components.\n\n### 1. Search for duplicates\nBefore publishing an issue, please check whether the duplicated issue exists or not.\n\n  - [Ordinary Issues](https://github.com/samchon/typia/issues)\n\n### 2. Did you find a bug?\nWhen you reporting a bug, then please write about those items:\n\n  - What version you're using\n  - If possible, give me an isolated way to reproduce the behavior.\n  - The behavior your expect to see, and the actual behavior.\n\n### 3. Do you have a suggestion?\nI always welcome your suggestion. When you publishing a suggestion, then please write such items: \n\n  - A description of the problem you're trying to solve.\n  - An overview of the suggested solution.\n  - Examples of how the suggestion would work in various places.\n    - Code examples showing the expected behavior.\n\n\n\n\n## Contributing Code\n\n### Project Structure\n```\ntypia/\n├── src/                      # Source code\n│   ├── executable/           # CLI commands\n│   ├── factories/           # Factory classes\n│   ├── functional/          # Functional utilities\n│   ├── programmers/         # Code generators\n│   ├── schemas/            # Schema definitions\n│   ├── tags/               # Tag implementations\n│   ├── transformers/       # Code transformers\n│   ├── typings/            # Type definitions\n│   └── utils/              # Utility functions\n├── test/                    # Test files\n├── benchmark/               # Benchmarking code\n├── website/                 # Documentation website\n└── packages/                # Sub-packages\n```\n\n### Naming Conventions\n- **Files**: Use camelCase for regular files (e.g., `jsonMetadata.ts`)\n- **Classes**: Use PascalCase (e.g., `TypeGuardError`, `MetadataFactory`)\n- **Interfaces**: Prefix with 'I' (e.g., `IValidation`, `IRandomGenerator`)\n- **Type aliases**: Use PascalCase (e.g., `Primitive`, `Resolved`)\n- **Functions**: Use camelCase (e.g., `stringify`, `validate`)\n- **Constants**: Use UPPER_SNAKE_CASE for global constants\n- **Variables**: Use camelCase\n- **Test files**: Prefix with `test_` (e.g., `test_stringify_object_recursive`)\n\n\n### Test your code\nBefore sending a pull request, please test your new code. Please run the following commands:\n\n```bash\n# COMPILE\nnpm run build\n\n# PREPARE\nnpm run test:generate\n\n# DO TEST\nnpm run test\n```\n\nIf you succeeded to compile, but failed to pass the test-automation, then *debug* the test-automation module. I've configured the `.vscode/launch.json`. You just run the `VSCode` and click the `Start Debugging` button or press `F5` key. By the *debugging*, find the reason why the *test* is failed and fix it.\n\n### Adding a Test\nIf you want to add a testing-logic, then goto the `src/test` directory. It's the directory containing the test-automation module. Declare some functions starting from the prefix `test_`. Then, they will be called after the next testing.\n\nNote that, the special functions starting from the prefix `test_` must be `export`ed. They also must return one of them:\n  - `void`\n  - `Promise<void>`\n\nWhen you detect an error, then throw exception such below:\n\n```typescript\nimport typia from \"typia\"\nimport { RandomGenerator } from \"typia/lib/utils/RandomGenerator\";\n\nexport function test_stringify_object_recursive(): void\n{\n    const department: IDepartment = {\n        name: RandomGenerator.string(),\n        parent: {\n            name: RandomGenerator.string(),\n            parent: {\n                name: RandomGenerator.string(),\n                parent: null\n            }\n        }\n    };\n\n    const json: string = typia.json.stringify<IDepartment>(department);\n    const expected: string = JSON.stringify(department);\n\n    if (json !== expected)\n        throw new Error(\"Bug on typia.json.stringify(): failed to understand the recursive object.\");\n}\n\ninterface IDepartment\n{\n    name: string;\n    parent: IDepartment | null;\n}\n```\n\n\n\n## Sending a Pull Request\nThanks for your contributing. Before sending a pull request to me, please check those components.\n\n### 1. Include enough descriptions\nWhen you send a pull request, please include a description, of what your change intends to do, on the content. Title, make it clear and simple such below:\n\n  - Refactor features\n  - Fix #17\n  - Add tests for #28\n\n### 2. Include adequate tests\nAs I've mentioned in the `Contributing Code` section, your PR should pass the test-automation module. If your PR includes *new features* that have not being handled in the ordinary test-automation module, then also update *add the testing unit* please.\n\nIf there're some specific reasons that could not pass the test-automation (not error but *intended*), then please update the ordinary test-automation module or write the reasons on your PR content and *const me update the test-automation module*.\n\n\n\n\n## References\nI've referenced contribution guidance of the TypeScript.\n  - https://github.com/Microsoft/TypeScript/blob/master/CONTRIBUTING.md"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2022 Jeongho Nam\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.884765625,
          "content": "# Typia\n![Typia Logo](https://typia.io/logo.png)\n\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/samchon/typia/blob/master/LICENSE)\n[![NPM Version](https://img.shields.io/npm/v/typia.svg)](https://www.npmjs.com/package/typia)\n[![NPM Downloads](https://img.shields.io/npm/dm/typia.svg)](https://www.npmjs.com/package/typia)\n[![Build Status](https://github.com/samchon/typia/workflows/build/badge.svg)](https://github.com/samchon/typia/actions?query=workflow%3Abuild)\n[![Guide Documents](https://img.shields.io/badge/guide-documents-forestgreen)](https://typia.io/docs/)\n[![Gurubase](https://img.shields.io/badge/Gurubase-Ask%20Typia%20Guru-006BFF)](https://gurubase.io/g/typia)\n[![Discord Badge](https://img.shields.io/badge/discord-samchon-d91965?style=flat&labelColor=5866f2&logo=discord&logoColor=white&link=https://discord.gg/E94XhzrUCZ)](https://discord.gg/E94XhzrUCZ)\n\n```typescript\n// RUNTIME VALIDATORS\nexport function is<T>(input: unknown): input is T; // returns boolean\nexport function assert<T>(input: unknown): T; // throws TypeGuardError\nexport function assertGuard<T>(input: unknown): asserts input is T;\nexport function validate<T>(input: unknown): IValidation<T>; // detailed\n\n// JSON FUNCTIONS\nexport namespace json {\n  export function application<T>(): IJsonApplication; // JSON schema\n  export function assertParse<T>(input: string): T; // type safe parser\n  export function assertStringify<T>(input: T): string; // safe and faster\n}\n\n// LLM FUNCTION CALLING SCHEMA\nexport namespace llm {\n  // application schema from a class or interface type\n  export function application<App, Model>(): ILlmApplication<Model>;\n  // structured output\n  export function parameters<P, Moodel>(): ILlmSchema.IParameters<Model>; \n  export function schema<T, Model>(): ILlmSchema<Model>; // type schema\n}\n\n// PROTOCOL BUFFER\nexport namespace protobuf {\n  export function message<T>(): string; // Protocol Buffer message\n  export function assertDecode<T>(buffer: Uint8Array): T; // safe decoder\n  export function assertEncode<T>(input: T): Uint8Array; // safe encoder\n}\n\n// RANDOM GENERATOR\nexport function random<T>(g?: Partial<IRandomGenerator>): T;\n```\n\n`typia` is a transformer library supporting below features:\n\n  - Super-fast Runtime Validators\n  - Enhanced JSON schema and serde functions\n  - LLM function calling schema and structured output\n  - Protocol Buffer encoder and decoder\n  - Random data generator\n\n> [!NOTE]\n>\n> - **Only one line** required, with pure TypeScript type\n> - Runtime validator is **20,000x faster** than `class-validator`\n> - JSON serialization is **200x faster** than `class-transformer`\n\n\n\n\n## Transformation\nIf you call `typia` function, it would be compiled like below.\n\nThis is the key concept of `typia`, transforming TypeScript type to a runtime function. The `typia.is<T>()` function is transformed to a dedicated type checker by analyzing the target type `T` in the compilation level.\n\nThis feature enables developers to ensure type safety in their applications, leveraging TypeScript's static typing while also providing runtime validation. Instead of defining additional schemas, you can simply utilize the pure TypeScript type itself.\n\n```typescript\n//----\n// examples/checkString.ts\n//----\nimport typia, { tags } from \"typia\";\nexport const checkString = typia.createIs<string>();\n\n//----\n// examples/checkUUID.js\n//----\nimport typia from \"typia\";\nexport const checkString = (() => {\n  return (input) => \"string\" === typeof input;\n})();\n```\n\n\n\n## Sponsors\nThanks for your support.\n\nYour donation encourages `typia` development.\n\nAlso, `typia` is re-distributing half of donations to core contributors of `typia`.\n\n  - [`nonara/ts-patch`](https://github.com/nonara/ts-patch)\n  - [`ryoppippi/unplugin-typia`](https://github.com/ryoppippi/unplugin-typia)\n\n[![Sponsers](https://opencollective.com/typia/badge.svg?avatarHeight=75&width=600)](https://opencollective.com/typia)\n\n\n\n\n## Playground\nYou can experience how typia works by [playground website](https://typia.io/playground):\n\n  - 💻 https://typia.io/playground\n\n\n\n\n## Guide Documents\nCheck out the document in the [website](https://typia.io/docs/):\n\n### 🏠 Home\n  - [Introduction](https://typia.io/docs/)\n  - [Setup](https://typia.io/docs/setup/)\n  - [Pure TypeScript](https://typia.io/docs/pure/)\n  \n### 📖 Features\n  - Runtime Validators\n    - [`assert()` function](https://typia.io/docs/validators/assert/)\n    - [`is()` function](https://typia.io/docs/validators/is/)\n    - [`validate()` function](https://typia.io/docs/validators/validate/)\n    - [Functional Module](https://typia.io/docs/validators/functional)\n    - [Special Tags](https://typia.io/docs/validators/tags/)\n  - Enhanced JSON\n    - [JSON Schema](https://typia.io/docs/json/schema/)\n    - [`stringify()` functions](https://typia.io/docs/json/stringify/)\n    - [`parse()` functions](https://typia.io/docs/json/parse/)\n  - LLM Function Calling\n    - [`application()` function](https://typia.io/docs/llm/application/)\n    - [`parameters()` function](https://typia.io/docs/llm/parameters/)\n    - [`schema()` function](https://typia.io/docs/llm/schema/)\n    - [Documentation Strategy](https://typia.io/docs/llm/strategy/)\n  - Protocol Buffer\n    - [Message Schema](https://typia.io/docs/protobuf/message)\n    - [`decode()` functions](https://typia.io/docs/protobuf/decode/)\n    - [`encode()` functions](https://typia.io/docs/protobuf/encode/)\n  - [Random Generator](https://typia.io/docs/random/)\n  - [Miscellaneous](https://typia.io/docs/misc/)\n\n### 🔗 Appendix\n  - [API Documents](https://typia.io/api)\n  - Utillization Cases\n    - [NestJS](https://typia.io/docs/utilization/nestjs/)\n    - [Prisma](https://typia.io/docs/utilization/prisma/)\n    - [tRPC](https://typia.io/docs/utilization/trpc/)\n  - [⇲ Benchmark Result](https://github.com/samchon/typia/tree/master/benchmark/results/11th%20Gen%20Intel(R)%20Core(TM)%20i5-1135G7%20%40%202.40GHz)\n  - [⇲ `dev.to` Articles](https://dev.to/samchon/series/22474)\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "deploy",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.9404296875,
          "content": "{\n  \"name\": \"typia\",\n  \"version\": \"7.5.1\",\n  \"description\": \"Superfast runtime validators with only one line\",\n  \"main\": \"lib/index.js\",\n  \"typings\": \"lib/index.d.ts\",\n  \"module\": \"lib/index.mjs\",\n  \"bin\": {\n    \"typia\": \"./lib/executable/typia.js\"\n  },\n  \"tsp\": {\n    \"tscOptions\": {\n      \"parseAllJsDoc\": true\n    }\n  },\n  \"scripts\": {\n    \"test\": \"ts-node deploy --tag test\",\n    \"test:bun\": \"bun run deploy/bun.ts\",\n    \"test:template\": \"npm run --tag test --template\",\n    \"-------------------------------------------------\": \"\",\n    \"build\": \"rimraf lib && tsc && rollup -c\",\n    \"dev\": \"rimraf lib && tsc --watch\",\n    \"dev:errors\": \"tsc --project tsconfig.errors.json --watch\",\n    \"eslint\": \"eslint ./**/*.ts\",\n    \"eslint:fix\": \"eslint ./**/*.ts --fix\",\n    \"prettier\": \"prettier src --write\",\n    \"------------------------------------------------\": \"\",\n    \"package:latest\": \"ts-node deploy --tag latest\",\n    \"package:next\": \"ts-node deploy --tag next\",\n    \"package:patch\": \"ts-node deploy --tag patch\",\n    \"package:deprecate\": \"npm deprecate typescript-json \\\"Renamed to typia\\\"\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/samchon/typia\"\n  },\n  \"author\": \"Jeongho Nam\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/samchon/typia/issues\"\n  },\n  \"homepage\": \"https://typia.io\",\n  \"dependencies\": {\n    \"@samchon/openapi\": \"^2.3.1\",\n    \"commander\": \"^10.0.0\",\n    \"comment-json\": \"^4.2.3\",\n    \"inquirer\": \"^8.2.5\",\n    \"package-manager-detector\": \"^0.2.0\",\n    \"randexp\": \"^0.5.3\"\n  },\n  \"peerDependencies\": {\n    \"typescript\": \">=4.8.0 <5.8.0\",\n    \"@samchon/openapi\": \">=2.3.0 <3.0.0\"\n  },\n  \"devDependencies\": {\n    \"@rollup/plugin-commonjs\": \"^26.0.1\",\n    \"@rollup/plugin-node-resolve\": \"^15.2.3\",\n    \"@rollup/plugin-typescript\": \"^11.1.6\",\n    \"@trivago/prettier-plugin-sort-imports\": \"^4.3.0\",\n    \"@types/inquirer\": \"^8.2.5\",\n    \"@types/node\": \"^18.15.12\",\n    \"@types/ts-expose-internals\": \"npm:ts-expose-internals@5.5.4\",\n    \"@typescript-eslint/eslint-plugin\": \"^7.1.1\",\n    \"@typescript-eslint/parser\": \"^7.1.1\",\n    \"chalk\": \"^4.0.0\",\n    \"prettier\": \"^3.2.5\",\n    \"rimraf\": \"^5.0.5\",\n    \"rollup\": \"^4.18.0\",\n    \"suppress-warnings\": \"^1.0.2\",\n    \"ts-node\": \"^10.9.2\",\n    \"typescript\": \"~5.7.2\"\n  },\n  \"stackblitz\": {\n    \"startCommand\": \"npm install && npm run test\"\n  },\n  \"sideEffects\": false,\n  \"files\": [\n    \"LICENSE\",\n    \"README.md\",\n    \"package.json\",\n    \"lib\",\n    \"src\"\n  ],\n  \"keywords\": [\n    \"fast\",\n    \"json\",\n    \"stringify\",\n    \"typescript\",\n    \"transform\",\n    \"ajv\",\n    \"io-ts\",\n    \"zod\",\n    \"schema\",\n    \"json-schema\",\n    \"generator\",\n    \"assert\",\n    \"clone\",\n    \"is\",\n    \"validate\",\n    \"equal\",\n    \"runtime\",\n    \"type\",\n    \"typebox\",\n    \"checker\",\n    \"validator\",\n    \"safe\",\n    \"parse\",\n    \"prune\",\n    \"random\",\n    \"protobuf\",\n    \"llm\",\n    \"llm-function-calling\",\n    \"structured-output\",\n    \"openai\",\n    \"chatgpt\",\n    \"claude\",\n    \"gemini\",\n    \"llama\"\n  ],\n  \"private\": true\n}"
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "prettier.config.js",
          "type": "blob",
          "size": 0.57421875,
          "content": "module.exports = {\n  parser: \"typescript\",\n  printWidth: 80,\n  semi: true,\n  tabWidth: 2,\n  trailingComma: \"all\",\n  plugins: [require.resolve(\"@trivago/prettier-plugin-sort-imports\")],\n  importOrder: [\n    \"<THIRD_PARTY_MODULES>\",\n    \"(.*)factories/(.*)$\",\n    \"(.*)functional/(.*)$\",\n    \"(.*)(metadata|schemas)/(.*)$\",\n    \"(.*)programmers/(.*)$\",\n    \"(.*)transformers/(.*)$\",\n    \"(.*)typings/(.*)$\",\n    \"(.*)utils/(.*)$\",\n    \"^[./]\",\n  ],\n  importOrderSeparation: true,\n  importOrderSortSpecifiers: true,\n  importOrderParserPlugins: [\"decorators-legacy\", \"typescript\", \"jsx\"],\n};\n"
        },
        {
          "name": "rollup.config.js",
          "type": "blob",
          "size": 1.17578125,
          "content": "const path = require(\"path\");\nconst typescript = require(\"@rollup/plugin-typescript\");\nconst nodeResolve = require(\"@rollup/plugin-node-resolve\");\nconst commomnjs = require(\"@rollup/plugin-commonjs\");\n\nmodule.exports = {\n  input: \"./src/index.ts\",\n  output: {\n    dir: \"./lib\",\n    format: \"esm\",\n    sourcemap: true,\n    entryFileNames: (chunkInfo) => {\n      const ext = `mjs`;\n      const externalDir = `_external`;\n      const nodeModulesDir = `node_modules`;\n      if (chunkInfo.name.includes(nodeModulesDir)) {\n        /** replace / to _ and the last part of the path is the file name */\n        const nameSplit = chunkInfo.name.split(\"/\");\n        const chunkName = path.join(\n          externalDir,\n          nameSplit.slice(0, -1).join(\"_\"),\n          nameSplit.at(-1),\n        );\n        console.table({\n          before: chunkInfo.name,\n          after: chunkName,\n        });\n        return `${chunkName}.${ext}`;\n      }\n      return `[name].${ext}`;\n    },\n    // preserveModules: true,\n    // preserveModulesRoot: \"src\",\n  },\n  plugins: [\n    nodeResolve(),\n    commomnjs(),\n    typescript({\n      tsconfig: \"tsconfig.json\",\n      module: \"ESNext\",\n      target: \"ESNext\",\n    }),\n  ],\n};\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-error",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-esm",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.errors.json",
          "type": "blob",
          "size": 0.109375,
          "content": "{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./errors/node_modules/typia/lib\",\n  },\n}"
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 10.7548828125,
          "content": "{\n  \"compilerOptions\": {\n    /* Visit https://aka.ms/tsconfig.json to read more about this file */\n\n    /* Projects */\n    // \"incremental\": true,                              /* Enable incremental compilation */\n    // \"composite\": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */\n    // \"tsBuildInfoFile\": \"./\",                          /* Specify the folder for .tsbuildinfo incremental compilation files. */\n    // \"disableSourceOfProjectReferenceRedirect\": true,  /* Disable preferring source files instead of declaration files when referencing composite projects */\n    // \"disableSolutionSearching\": true,                 /* Opt a project out of multi-project reference checking when editing. */\n    // \"disableReferencedProjectLoad\": true,             /* Reduce the number of projects loaded automatically by TypeScript. */\n\n    /* Language and Environment */\n    \"target\": \"ES2015\",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */\n    \"lib\": [\n      \"DOM\",\n      \"ES2020\"\n    ],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */\n    // \"jsx\": \"preserve\",                                /* Specify what JSX code is generated. */\n    \"experimentalDecorators\": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */\n    \"emitDecoratorMetadata\": true,                    /* Emit design-type metadata for decorated declarations in source files. */\n    // \"jsxFactory\": \"\",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */\n    // \"jsxFragmentFactory\": \"\",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */\n    // \"jsxImportSource\": \"\",                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */\n    // \"reactNamespace\": \"\",                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */\n    // \"noLib\": true,                                    /* Disable including any library files, including the default lib.d.ts. */\n    // \"useDefineForClassFields\": true,                  /* Emit ECMAScript-standard-compliant class fields. */\n\n    /* Modules */\n    \"module\": \"commonjs\",                                /* Specify what module code is generated. */\n    // \"rootDir\": \"./\",                                  /* Specify the root folder within your source files. */\n    // \"moduleResolution\": \"node\",                       /* Specify how TypeScript looks up a file from a given module specifier. */\n    // \"baseUrl\": \"./\",                                  /* Specify the base directory to resolve non-relative module names. */\n    // \"paths\": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */\n    // \"rootDirs\": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */\n    // \"typeRoots\": [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */\n    // \"types\": [],                                      /* Specify type package names to be included without being referenced in a source file. */\n    // \"allowUmdGlobalAccess\": true,                     /* Allow accessing UMD globals from modules. */\n    // \"resolveJsonModule\": true,                        /* Enable importing .json files */\n    // \"noResolve\": true,                                /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */\n\n    /* JavaScript Support */\n    // \"allowJs\": true,                                  /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */\n    // \"checkJs\": true,                                  /* Enable error reporting in type-checked JavaScript files. */\n    // \"maxNodeModuleJsDepth\": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */\n\n    /* Emit */\n    \"declaration\": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */\n    // \"declarationMap\": true,                           /* Create sourcemaps for d.ts files. */\n    // \"emitDeclarationOnly\": true,                      /* Only output d.ts files and not JavaScript files. */\n    \"sourceMap\": true,                                /* Create source map files for emitted JavaScript files. */\n    // \"outFile\": \"./\",                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */\n    \"outDir\": \"./lib\",                                   /* Specify an output folder for all emitted files. */\n    // \"removeComments\": true,                           /* Disable emitting comments. */\n    // \"noEmit\": true,                                   /* Disable emitting files from a compilation. */\n    // \"importHelpers\": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */\n    // \"importsNotUsedAsValues\": \"remove\",               /* Specify emit/checking behavior for imports that are only used for types */\n    \"downlevelIteration\": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */\n    // \"sourceRoot\": \"\",                                 /* Specify the root path for debuggers to find the reference source code. */\n    // \"mapRoot\": \"\",                                    /* Specify the location where debugger should locate map files instead of generated locations. */\n    // \"inlineSourceMap\": true,                          /* Include sourcemap files inside the emitted JavaScript. */\n    // \"inlineSources\": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */\n    // \"emitBOM\": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */\n    \"newLine\": \"lf\",                                /* Set the newline character for emitting files. */\n    \"stripInternal\": true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */\n    // \"noEmitHelpers\": true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */\n    // \"noEmitOnError\": true,                            /* Disable emitting files if any type checking errors are reported. */\n    // \"preserveConstEnums\": true,                       /* Disable erasing `const enum` declarations in generated code. */\n    // \"declarationDir\": \"./\",                           /* Specify the output directory for generated declaration files. */\n    // \"preserveValueImports\": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */\n\n    /* Interop Constraints */\n    // \"isolatedModules\": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */\n    // \"allowSyntheticDefaultImports\": true,             /* Allow 'import x from y' when a module doesn't have a default export. */\n    \"esModuleInterop\": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */\n    // \"preserveSymlinks\": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */\n    \"forceConsistentCasingInFileNames\": true,            /* Ensure that casing is correct in imports. */\n\n    /* Type Checking */\n    \"strict\": true,                                      /* Enable all strict type-checking options. */\n    \"noImplicitAny\": true,                            /* Enable error reporting for expressions and declarations with an implied `any` type.. */\n    \"strictNullChecks\": true,                         /* When type checking, take into account `null` and `undefined`. */\n    \"strictFunctionTypes\": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */\n    \"strictBindCallApply\": true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */\n    \"strictPropertyInitialization\": true,             /* Check for class properties that are declared but not set in the constructor. */\n    \"noImplicitThis\": true,                           /* Enable error reporting when `this` is given the type `any`. */\n    \"useUnknownInCatchVariables\": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */\n    \"alwaysStrict\": true,                             /* Ensure 'use strict' is always emitted. */\n    \"noUnusedLocals\": true,                           /* Enable error reporting when a local variables aren't read. */\n    \"noUnusedParameters\": true,                       /* Raise an error when a function parameter isn't read */\n    // \"exactOptionalPropertyTypes\": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */\n    \"noImplicitReturns\": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */\n    \"noFallthroughCasesInSwitch\": true,               /* Enable error reporting for fallthrough cases in switch statements. */\n    \"noUncheckedIndexedAccess\": true,                 /* Include 'undefined' in index signature results */\n    \"noImplicitOverride\": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */\n    // \"noPropertyAccessFromIndexSignature\": true,       /* Enforces using indexed accessors for keys declared using an indexed type */\n    // \"allowUnusedLabels\": true,                        /* Disable error reporting for unused labels. */\n    // \"allowUnreachableCode\": true,                     /* Disable error reporting for unreachable code. */\n\n    /* Completeness */\n    // \"skipDefaultLibCheck\": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */\n    \"skipLibCheck\": true                                 /* Skip type checking all .d.ts files. */\n  },\n  \"include\": [\"src\"],\n  \"exclude\": [\"src/cli\"]\n}\n"
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}