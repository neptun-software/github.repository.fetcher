{
  "metadata": {
    "timestamp": 1736563991717,
    "page": 532,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Dhravya/cloudflare-saas-stack",
      "stars": 3187,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cursorrules",
          "type": "blob",
          "size": 2.22265625,
          "content": "\n  You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI, Tailwind CSS and DrizzleORM.\n\n  You are also excellent at Cloudflare developer tools like D1 serverless database and KV. You can suggest usage of new tools (changes in wrangler.toml file) to add more primitives like:\n  - R2: File storage\n  - KV: Key-value storage\n  - AI: AI multimodal inference \n  - others primitives in `wrangler.toml`\n\n  In the terminal, you are also an expert at suggesting wrangler commands.\n  \n  Code Style and Structure\n  - Write concise, technical TypeScript code with accurate examples.\n  - Use functional and declarative programming patterns; avoid classes.\n  - Prefer iteration and modularization over code duplication.\n  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).\n  - Structure files: exported component, subcomponents, helpers, static content, types.\n  \n  Naming Conventions\n  - Use lowercase with dashes for directories (e.g., components/auth-wizard).\n  - Favor named exports for components.\n  \n  TypeScript Usage\n  - Use TypeScript for all code; prefer interfaces over types.\n  - Avoid enums; use maps instead.\n  - Use functional components with TypeScript interfaces.\n  \n  Syntax and Formatting\n  - Use the \"function\" keyword for pure functions.\n  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.\n  - Use declarative JSX.\n  \n  UI and Styling\n  - Use Shadcn UI, Radix, and Tailwind for components and styling.\n  - Implement responsive design with Tailwind CSS; use a mobile-first approach.\n  \n  Performance Optimization\n  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).\n  - Wrap client components in Suspense with fallback.\n  - Use dynamic loading for non-critical components.\n  - Optimize images: use WebP format, include size data, implement lazy loading.\n  \n  Key Conventions\n  - Use 'nuqs' for URL search parameter state management.\n  - Optimize Web Vitals (LCP, CLS, FID).\n  - Limit 'use client':\n    - Favor server components and Next.js SSR.\n    - Use only for Web API access in small components.\n    - Avoid for data fetching or state management.\n  \n  Follow Next.js docs for Data Fetching, Rendering, and Routing.\n  "
        },
        {
          "name": ".env.example",
          "type": "blob",
          "size": 0.146484375,
          "content": "# variables for running drizzle-kit on your production database\n# bun run db:migrate:prod\nCLOUDFLARE_D1_ACCOUNT_ID=\nDATABASE=\nCLOUDFLARE_D1_API_TOKEN="
        },
        {
          "name": ".eslintrc.json",
          "type": "blob",
          "size": 0.1533203125,
          "content": "{\n  \"extends\": [\n    \"next/core-web-vitals\",\n    \"plugin:eslint-plugin-next-on-pages/recommended\"\n  ],\n  \"plugins\": [\n    \"eslint-plugin-next-on-pages\"\n  ]\n}"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4462890625,
          "content": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\nbun.lockb\n.env\n*.env\n*.vars\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n.yarn/install-state.gz\n\n# testing\n/coverage\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# local env files\n.env*.local\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\n\n# wrangler files\n.wrangler\n.dev.vars\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.01953125,
          "content": "# ðŸš€ Full-Stack Cloudflare SaaS Kit\n\n**_Build and deploy scalable products on Cloudflare with ease._**\n\nAn opinionated, batteries-included starter kit for quickly building and deploying SaaS products on Cloudflare. This is a [Next.js](https://nextjs.org/) project bootstrapped with [`c3`](https://developers.cloudflare.com/pages/get-started/c3).\n\nThis is the same stack used to build [Supermemory.ai](https://Supermemory.ai) which is open source at [git.new/memory](https://git.new/memory)\n\nSupermemory now has 20k+ users and it runs on $5/month. safe to say, it's _very_ effective.\n\n## The stack includes:\n\n- [Next.js](https://nextjs.org/) for frontend\n- [TailwindCSS](https://tailwindcss.com/) for styling\n- [Drizzle ORM](https://orm.drizzle.team/) for database access\n- [NextAuth](https://next-auth.js.org/) for authentication\n- [Cloudflare D1](https://www.cloudflare.com/developer-platform/d1/) for serverless databases\n- [Cloudflare Pages](https://pages.cloudflare.com/) for hosting\n- [ShadcnUI](https://shadcn.com/) as the component library\n\n## Getting Started\n\n1. Make sure that you have [Wrangler](https://developers.cloudflare.com/workers/wrangler/install-and-update/#installupdate-wrangler) installed. And also that you have logged in with `wrangler login` (You'll need a Cloudflare account)\n\n2. Clone the repository and install dependencies:\n   ```bash\n   git clone https://github.com/Dhravya/cloudflare-saas-stack\n   cd cloudflare-saas-stack\n   npm i -g bun\n   bun install\n   bun run setup\n   ```\n\n3. Run the development server:\n   ```bash\n   bun run dev\n   ```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\n## Cloudflare Integration\n\nBesides the `dev` script, `c3` has added extra scripts for Cloudflare Pages integration:\n- `pages:build`: Build the application for Pages using [`@cloudflare/next-on-pages`](https://github.com/cloudflare/next-on-pages) CLI\n- `preview`: Locally preview your Pages application using [Wrangler](https://developers.cloudflare.com/workers/wrangler/) CLI\n- `deploy`: Deploy your Pages application using Wrangler CLI\n- `cf-typegen`: Generate typescript types for Cloudflare env.\n\n> __Note:__ While the `dev` script is optimal for local development, you should preview your Pages application periodically to ensure it works properly in the Pages environment.\n\n## Bindings\n\nCloudflare [Bindings](https://developers.cloudflare.com/pages/functions/bindings/) allow you to interact with Cloudflare Platform resources. You can use bindings during development, local preview, and in the deployed application.\n\nFor detailed instructions on setting up bindings, refer to the Cloudflare documentation.\n\n## Database Migrations\nQuick explaination of D1 set up:\n- D1 is a serverless database that follows SQLite convention.\n- Within Cloudflare pages and workers, you can directly query d1 with [client api](https://developers.cloudflare.com/d1/build-with-d1/d1-client-api/) exposed by bindings (eg. `env.BINDING`)\n- You can also query d1 via [rest api](https://developers.cloudflare.com/api/operations/cloudflare-d1-create-database)\n- Locally, wrangler auto generates sqlite files at `.wrangler/state/v3/d1` after `bun run dev`.\n- Local dev environment (`bun run dev`) interact with [local d1 session](https://developers.cloudflare.com/d1/build-with-d1/local-development/#start-a-local-development-session), which is based on some SQlite files located at `.wrangler/state/v3/d1`.\n- In dev mode (`bun run db:<migrate or studio>:dev`), Drizzle-kit (migrate and studio) directly modifies these files as regular SQlite db. While `bun run db:<migrate or studio>:prod` use d1-http driver to interact with remote d1 via rest api. Therefore we need to set env var at `.env.example`\n\nTo generate migrations files:\n- `bun run db:generate`\n\nTo apply database migrations:\n- For development: `bun run db:migrate:dev`\n- For production: `bun run db:migrate:prd`\n\nTo inspect database:\n- For local database `bun run db:studio:dev`\n- For remote database `bun run db:studio:prod`\n\n## Cloudflare R2 Bucket CORS / File Upload\n\nDon't forget to add the CORS policy to the R2 bucket. The CORS policy should look like this:\n\n```json\n[\n  {\n    \"AllowedOrigins\": [\n      \"http://localhost:3000\",\n      \"https://your-domain.com\"\n    ],\n    \"AllowedMethods\": [\n      \"GET\",\n      \"PUT\"\n    ],\n    \"AllowedHeaders\": [\n      \"Content-Type\"\n    ],\n    \"ExposeHeaders\": [\n      \"ETag\"\n    ]\n  }\n]\n```\n\nYou can now even set up object upload.\n\n## Manual Setup\n\nIf you prefer manual setup:\n\n1. Create a Cloudflare account and install Wrangler CLI.\n2. Create a D1 database: `bunx wrangler d1 create ${dbName}`\n3. Create a `.dev.vars` file in the project root with your Google OAuth credentials and NextAuth secret.\n   1. `AUTH_SECRET`, generate by command `openssl rand -base64 32` or `bunx auth secret`\n   2. `AUTH_GOOGLE_ID` and `AUTH_GOOGLE_SECRET` for google oauth.\n      1. First create [OAuth consent screen](https://console.cloud.google.com/apis/credentials/consent). Tips: no wait time if you skip logo upload.\n      2. Create [credential](https://console.cloud.google.com/apis/credentials). Put `https://your-domain` and `http://localhost:3000` at \"Authorized JavaScript origins\". Put `https://your-domain/api/auth/callback/google` and `http://localhost:3000/api/auth/callback/google` at \"Authorized redirect URIs\".\n4. Generate db migration files: `bun run db:generate`\n5. Run local migration: `bunx wrangler d1 execute ${dbName} --local --file=migrations/0000_setup.sql` or using drizzle `bun run db:migrate:dev`\n6. Run remote migration: `bunx wrangler d1 execute ${dbName} --remote --file=migrations/0000_setup.sql` or using drizzle `bun run db:migrate:prod`\n7. Start development server: `bun run dev`\n8. Deploy: `bun run deploy`\n\n## The Beauty of This Stack\n\n- Fully scalable and composable\n- No environment variables needed (use `env.DB`, `env.KV`, `env.Queue`, `env.AI`, etc.)\n- Powerful tools like Wrangler for database management and migrations\n- Cost-effective scaling (e.g., $5/month for multiple high-traffic projects)\n\nJust change your Cloudflare account ID in the project settings, and you're good to go!\n\n"
        },
        {
          "name": "bun.lockb",
          "type": "blob",
          "size": 299.91015625,
          "content": null
        },
        {
          "name": "cf-env.d.ts",
          "type": "blob",
          "size": 0.1064453125,
          "content": "declare global {\n\tnamespace NodeJS {\n\t\tinterface ProcessEnv extends CloudflareEnv {\n\t\t}\n\t}\n}\n\nexport type {};"
        },
        {
          "name": "components.json",
          "type": "blob",
          "size": 0.4111328125,
          "content": "{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"new-york\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"src/app/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  }\n}"
        },
        {
          "name": "drizzle.config.ts",
          "type": "blob",
          "size": 0.9853515625,
          "content": "import { defineConfig } from \"drizzle-kit\";\nimport fs from \"node:fs\";\nimport path from \"node:path\";\n\nfunction getLocalD1DB() {\n  try {\n    const basePath = path.resolve(\".wrangler\");\n    const dbFile = fs\n      .readdirSync(basePath, { encoding: \"utf-8\", recursive: true })\n      .find((f) => f.endsWith(\".sqlite\"));\n\n    if (!dbFile) {\n      throw new Error(`.sqlite file not found in ${basePath}`);\n    }\n\n    const url = path.resolve(basePath, dbFile);\n    return url;\n  } catch (err) {\n    console.log(`Error  ${err}`);\n  }\n}\n\nexport default defineConfig({\n  dialect: \"sqlite\",\n  schema: \"./src/server/db/schema.ts\",\n  out: \"./drizzle\",\n  ...(process.env.NODE_ENV === \"production\"\n    ? {\n        driver: \"d1-http\",\n        dbCredentials: {\n          accountId: process.env.CLOUDFLARE_D1_ACCOUNT_ID,\n          databaseId: process.env.DATABASE,\n          token: process.env.CLOUDFLARE_D1_API_TOKEN,\n        },\n      }\n    : {\n        dbCredentials: {\n          url: getLocalD1DB(),\n        },\n      }),\n});"
        },
        {
          "name": "drizzle",
          "type": "tree",
          "content": null
        },
        {
          "name": "env.d.ts",
          "type": "blob",
          "size": 0.2041015625,
          "content": "// Generated by Wrangler on Wed Sep 04 2024 11:25:36 GMT-0700 (Mountain Standard Time)\n// by running `wrangler types --env-interface CloudflareEnv env.d.ts`\n\ninterface CloudflareEnv {\n\tDATABASE: D1Database;\n}\n"
        },
        {
          "name": "next.config.mjs",
          "type": "blob",
          "size": 0.513671875,
          "content": "import { setupDevPlatform } from '@cloudflare/next-on-pages/next-dev';\n\n// Here we use the @cloudflare/next-on-pages next-dev module to allow us to use bindings during local development\n// (when running the application with `next dev`), for more information see:\n// https://github.com/cloudflare/next-on-pages/blob/main/internal-packages/next-dev/README.md\nif (process.env.NODE_ENV === 'development') {\n  await setupDevPlatform();\n}\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {};\n\nexport default nextConfig;\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.7470703125,
          "content": "{\n  \"name\": \"cloudflare-saas-stack\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"pages:build\": \"bunx @cloudflare/next-on-pages\",\n    \"preview\": \"bun pages:build && wrangler pages dev\",\n    \"deploy\": \"bun pages:build && wrangler pages deploy\",\n    \"cf-typegen\": \"wrangler types --env-interface CloudflareEnv env.d.ts\",\n    \"setup\": \"bun run scripts/setup.ts\",\n    \"db:generate\": \"drizzle-kit generate\",\n    \"db:migrate:dev\": \"drizzle-kit migrate\",\n    \"db:migrate:prod\": \"NODE_ENV=production drizzle-kit migrate\",\n    \"db:studio:dev\": \"drizzle-kit studio\",\n    \"db:studio:prod\": \"NODE_ENV=production drizzle-kit studio\"\n  },\n  \"dependencies\": {\n    \"@auth/drizzle-adapter\": \"^1.4.2\",\n    \"@clack/prompts\": \"^0.7.0\",\n    \"@iarna/toml\": \"^2.2.5\",\n    \"@libsql/client\": \"^0.10.0\",\n    \"@radix-ui/react-icons\": \"^1.3.0\",\n    \"@radix-ui/react-slot\": \"^1.1.0\",\n    \"@t3-oss/env-nextjs\": \"^0.11.1\",\n    \"class-variance-authority\": \"^0.7.0\",\n    \"clsx\": \"^2.1.1\",\n    \"drizzle-kit\": \"^0.24.2\",\n    \"drizzle-orm\": \"^0.33.0\",\n    \"lucide-react\": \"^0.438.0\",\n    \"next\": \"14.2.5\",\n    \"next-auth\": \"^5.0.0-beta.20\",\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"tailwind-merge\": \"^2.5.2\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"zod\": \"^3.23.8\"\n  },\n  \"devDependencies\": {\n    \"@cloudflare/next-on-pages\": \"1\",\n    \"@cloudflare/workers-types\": \"^4.20240903.0\",\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"eslint\": \"^8\",\n    \"eslint-config-next\": \"14.2.5\",\n    \"eslint-plugin-next-on-pages\": \"^1.13.2\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"typescript\": \"^5\",\n    \"vercel\": \"^37.3.0\",\n    \"wrangler\": \"^3.74.0\"\n  }\n}"
        },
        {
          "name": "postcss.config.mjs",
          "type": "blob",
          "size": 0.1318359375,
          "content": "/** @type {import('postcss-load-config').Config} */\nconst config = {\n  plugins: {\n    tailwindcss: {},\n  },\n};\n\nexport default config;\n"
        },
        {
          "name": "public",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tailwind.config.ts",
          "type": "blob",
          "size": 1.8134765625,
          "content": "import type { Config } from \"tailwindcss\";\n\nconst config: Config = {\n    darkMode: [\"class\"],\n    content: [\n    \"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/app/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n  \textend: {\n  \t\tbackgroundImage: {\n  \t\t\t'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',\n  \t\t\t'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))'\n  \t\t},\n  \t\tborderRadius: {\n  \t\t\tlg: 'var(--radius)',\n  \t\t\tmd: 'calc(var(--radius) - 2px)',\n  \t\t\tsm: 'calc(var(--radius) - 4px)'\n  \t\t},\n  \t\tcolors: {\n  \t\t\tbackground: 'hsl(var(--background))',\n  \t\t\tforeground: 'hsl(var(--foreground))',\n  \t\t\tcard: {\n  \t\t\t\tDEFAULT: 'hsl(var(--card))',\n  \t\t\t\tforeground: 'hsl(var(--card-foreground))'\n  \t\t\t},\n  \t\t\tpopover: {\n  \t\t\t\tDEFAULT: 'hsl(var(--popover))',\n  \t\t\t\tforeground: 'hsl(var(--popover-foreground))'\n  \t\t\t},\n  \t\t\tprimary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--primary))',\n  \t\t\t\tforeground: 'hsl(var(--primary-foreground))'\n  \t\t\t},\n  \t\t\tsecondary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--secondary))',\n  \t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\n  \t\t\t},\n  \t\t\tmuted: {\n  \t\t\t\tDEFAULT: 'hsl(var(--muted))',\n  \t\t\t\tforeground: 'hsl(var(--muted-foreground))'\n  \t\t\t},\n  \t\t\taccent: {\n  \t\t\t\tDEFAULT: 'hsl(var(--accent))',\n  \t\t\t\tforeground: 'hsl(var(--accent-foreground))'\n  \t\t\t},\n  \t\t\tdestructive: {\n  \t\t\t\tDEFAULT: 'hsl(var(--destructive))',\n  \t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\n  \t\t\t},\n  \t\t\tborder: 'hsl(var(--border))',\n  \t\t\tinput: 'hsl(var(--input))',\n  \t\t\tring: 'hsl(var(--ring))',\n  \t\t\tchart: {\n  \t\t\t\t'1': 'hsl(var(--chart-1))',\n  \t\t\t\t'2': 'hsl(var(--chart-2))',\n  \t\t\t\t'3': 'hsl(var(--chart-3))',\n  \t\t\t\t'4': 'hsl(var(--chart-4))',\n  \t\t\t\t'5': 'hsl(var(--chart-5))'\n  \t\t\t}\n  \t\t}\n  \t}\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n};\nexport default config;\n"
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.6318359375,
          "content": "{\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    },\n    \"types\": [\n        \"@cloudflare/workers-types/2023-07-01\"\n    ]\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n"
        },
        {
          "name": "wrangler.toml",
          "type": "blob",
          "size": 0.310546875,
          "content": "name = \"cloudflare-saas-stack\"\ncompatibility_date = \"2024-09-03\"\ncompatibility_flags = [ \"nodejs_compat\" ]\npages_build_output_dir = \".vercel/output/static\"\n\n[placement]\nmode = \"smart\"\n\n[[d1_databases]]\nbinding = \"DATABASE\"\ndatabase_name = \"cloudflare-saas-stack-db\"\ndatabase_id = \"294b2613-5f3c-40e5-b32b-bbe664bd9696\""
        }
      ]
    }
  ]
}