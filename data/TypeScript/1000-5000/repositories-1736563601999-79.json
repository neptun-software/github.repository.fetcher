{
  "metadata": {
    "timestamp": 1736563601999,
    "page": 79,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hustcc/echarts-for-react",
      "stars": 4595,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".commitlintrc.js",
          "type": "blob",
          "size": 0.2353515625,
          "content": "module.exports = {\n  extends: ['@commitlint/config-angular'],\n  rules: {\n    'type-enum': [\n      2,\n      'always',\n      ['build', 'chore', 'ci', 'docs', 'feat', 'fix', 'perf', 'refactor', 'revert', 'style', 'test', 'wip'],\n    ],\n  },\n};\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.36328125,
          "content": "# EditorConfig is awesome: http://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\nend_of_line = lf\ncharset = utf-8\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nindent_style = space\nindent_size  = 2\n\n[Makefile]\nindent_style = tab\nindent_size  = 1\n\n[*.md]\ntrim_trailing_whitespace = false"
        },
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.029296875,
          "content": "node_modules\ndist/\ntest\nbuild/"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 1.35546875,
          "content": "{\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n    \"plugin:@typescript-eslint/eslint-recommended\",\n    \"prettier\"\n  ],\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\"prettier\", \"@typescript-eslint\", \"import\"],\n  \"parserOptions\": {\n    \"ecmaVersion\": 6,\n    \"sourceType\": \"module\",\n    \"impliedStrict\": true\n  },\n  \"rules\": {\n    \"no-sparse-arrays\": 0,\n    \"no-self-assign\": 0,\n    \"no-unused-vars\": 0, // @typescript-eslint/no-unused-vars\n    \"no-inner-declarations\": 0,\n    \"prettier/prettier\": 2,\n    \"@typescript-eslint/no-unused-vars\": 1,\n    \"@typescript-eslint/no-non-null-assertion\": 0,\n    \"@typescript-eslint/no-explicit-any\": 0,\n    \"@typescript-eslint/no-use-before-define\": [2, { \"functions\": false }],\n    \"@typescript-eslint/ban-ts-ignore\": 0,\n    \"@typescript-eslint/interface-name-prefix\": 0,\n    \"@typescript-eslint/no-empty-interface\": 0,\n    \"@typescript-eslint/camelcase\": 0,\n    \"@typescript-eslint/no-inferrable-types\": 0,\n    \"@typescript-eslint/explicit-function-return-type\": 0,\n    \"@typescript-eslint/type-annotation-spacing\": 0,\n    \"@typescript-eslint/no-empty-function\": 0,\n    \"@typescript-eslint/explicit-module-boundary-types\": \"off\",\n    \"@typescript-eslint/ban-types\": \"off\",\n    \"no-undef\": 0,\n    \"@typescript-eslint/no-var-requires\": 0,\n    \"import/order\": 0,\n    \"import/no-default-export\": 0\n  }\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0380859375,
          "content": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# lock\npackage-lock.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\nyarn.lock\n\n# Typescript v1 declaration files\ntypings/\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n\npublic\nbuild\ndist\ntemp\n.DS_Store\n.idea\n.cache\ndemos/assets/screenshots\n/lib\n/esm\n/dist\n\n*.sw*\n*.un~\n\n.vscode\n/stats.json\n.umi\n.umi-production\n"
        },
        {
          "name": ".lintmdrc",
          "type": "blob",
          "size": 0.041015625,
          "content": "{\n  \"rules\": {\n    \"no-long-code\": 1\n  }\n}"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.02734375,
          "content": "stats.json\n.cache\ndist\n.umi\n"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.1611328125,
          "content": "{\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"trailingComma\": \"es5\",\n  \"bracketSpacing\": true,\n  \"printWidth\": 120,\n  \"arrowParens\": \"always\",\n  \"endOfLine\": \"auto\"\n}\n"
        },
        {
          "name": ".umirc.js",
          "type": "blob",
          "size": 1.0517578125,
          "content": "import { defineConfig } from 'dumi';\n\nexport default defineConfig({\n  mode: 'site',\n  title: '\\b',\n  base: '/',\n  exportStatic: {},\n  publicPath: process.env.NODE_ENV === 'production' ? '/echarts-for-react/' : '/',\n  base: process.env.NODE_ENV === 'production' ? '/echarts-for-react/' : '/',\n  logo: 'https://cdn.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/logo.png?_v_=20200710_1',\n  styles: [\n    '.__dumi-default-navbar-logo:not([data-plaintext]) { padding-left: 200px!important; }',\n    '.echarts-for-react.class_1 { height: 400px!important; }',\n    '.echarts-for-react.class_2 { height: 500px!important; }',\n  ],\n  navs: [\n    null,\n    { title: 'G2Plot', path: 'https://github.com/antvis/G2Plot' },\n    { title: '在线文档', path: 'https://github.com/hustcc/echarts-for-react' },\n    { title: 'GitHub', path: 'https://github.com/hustcc/echarts-for-react' },\n  ],\n  analytics: {\n    // Google Analytics 代码，配置后会启用\n    ga: 'G-T1MYFFZ6TL',\n    baidu: 'df880ba684fa4f42e9e672abeef0e34b',\n  },\n  // more config: https://d.umijs.org/config\n});"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2018 AntV team\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do { so, subject } to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.048828125,
          "content": "# echarts-for-react\n\nThe simplest, and the best React wrapper for [Apache ECharts](https://github.com/apache/incubator-echarts). \n\n[![npm](https://img.shields.io/npm/v/echarts-for-react.svg)](https://www.npmjs.com/package/echarts-for-react)\n[![Build Status](https://github.com/hustcc/echarts-for-react/workflows/build/badge.svg?branch=master)](https://github.com/hustcc/echarts-for-react/actions?query=workflow%3Abuild)\n[![Coverage](https://img.shields.io/coveralls/hustcc/echarts-for-react/master.svg)](https://coveralls.io/github/hustcc/echarts-for-react)\n[![NPM downloads](https://img.shields.io/npm/dm/echarts-for-react.svg)](https://www.npmjs.com/package/echarts-for-react)\n[![License](https://img.shields.io/npm/l/echarts-for-react.svg)](https://www.npmjs.com/package/echarts-for-react)\n![ECharts Ver](https://img.shields.io/badge/echarts-%5E3.0.0%20%7C%7C%20%5E4.0.0%20%7C%7C%20%5E5.0.0-blue.svg)\n![React Ver](https://img.shields.io/badge/React-%20%5E15.0.0%20%7C%7C%20%20%5E16.0.0%20%7C%7C%20%20%5E17.0.0-blue.svg)\n\n\n## Install\n\n```bach\n$ npm install --save echarts-for-react\n\n# `echarts` is the peerDependence of `echarts-for-react`, you can install echarts with your own version.\n$ npm install --save echarts\n```\n\nThen use it.\n\n```ts\nimport ReactECharts from 'echarts-for-react';\n\n// render echarts option.\n<ReactECharts option={this.getOption()} />\n```\n\nYou can run website.\n\n```bash\n$ git clone git@github.com:hustcc/echarts-for-react.git\n\n$ npm install\n\n$ npm start\n```\n\nThen open [http://127.0.0.1:8081/](http://127.0.0.1:8081/) in your browser. or see [https://git.hust.cc/echarts-for-react/](https://git.hust.cc/echarts-for-react/) which is deploy on gh-pages.\n\n\n## Usage\n\nCode of a simple demo code showed below. For more example can see: [https://git.hust.cc/echarts-for-react/](https://git.hust.cc/echarts-for-react/)\n\n```ts\nimport React from 'react';\nimport ReactECharts from 'echarts-for-react';  // or var ReactECharts = require('echarts-for-react');\n\n<ReactECharts\n  option={this.getOption()}\n  notMerge={true}\n  lazyUpdate={true}\n  theme={\"theme_name\"}\n  onChartReady={this.onChartReadyCallback}\n  onEvents={EventsDict}\n  opts={}\n/>\n```\n\nImport ECharts.js modules manually to reduce bundle size\n\n**With Echarts.js v5:**\n\n```ts\nimport React from 'react';\n// import the core library.\nimport ReactEChartsCore from 'echarts-for-react/lib/core';\n// Import the echarts core module, which provides the necessary interfaces for using echarts.\nimport * as echarts from 'echarts/core';\n// Import charts, all with Chart suffix\nimport {\n  // LineChart,\n  BarChart,\n  // PieChart,\n  // ScatterChart,\n  // RadarChart,\n  // MapChart,\n  // TreeChart,\n  // TreemapChart,\n  // GraphChart,\n  // GaugeChart,\n  // FunnelChart,\n  // ParallelChart,\n  // SankeyChart,\n  // BoxplotChart,\n  // CandlestickChart,\n  // EffectScatterChart,\n  // LinesChart,\n  // HeatmapChart,\n  // PictorialBarChart,\n  // ThemeRiverChart,\n  // SunburstChart,\n  // CustomChart,\n} from 'echarts/charts';\n// import components, all suffixed with Component\nimport {\n  // GridSimpleComponent,\n  GridComponent,\n  // PolarComponent,\n  // RadarComponent,\n  // GeoComponent,\n  // SingleAxisComponent,\n  // ParallelComponent,\n  // CalendarComponent,\n  // GraphicComponent,\n  // ToolboxComponent,\n  TooltipComponent,\n  // AxisPointerComponent,\n  // BrushComponent,\n  TitleComponent,\n  // TimelineComponent,\n  // MarkPointComponent,\n  // MarkLineComponent,\n  // MarkAreaComponent,\n  // LegendComponent,\n  // LegendScrollComponent,\n  // LegendPlainComponent,\n  // DataZoomComponent,\n  // DataZoomInsideComponent,\n  // DataZoomSliderComponent,\n  // VisualMapComponent,\n  // VisualMapContinuousComponent,\n  // VisualMapPiecewiseComponent,\n  // AriaComponent,\n  // TransformComponent,\n  DatasetComponent,\n} from 'echarts/components';\n// Import renderer, note that introducing the CanvasRenderer or SVGRenderer is a required step\nimport {\n  CanvasRenderer,\n  // SVGRenderer,\n} from 'echarts/renderers';\n\n// Register the required components\necharts.use(\n  [TitleComponent, TooltipComponent, GridComponent, BarChart, CanvasRenderer]\n);\n\n// The usage of ReactEChartsCore are same with above.\n<ReactEChartsCore\n  echarts={echarts}\n  option={this.getOption()}\n  notMerge={true}\n  lazyUpdate={true}\n  theme={\"theme_name\"}\n  onChartReady={this.onChartReadyCallback}\n  onEvents={EventsDict}\n  opts={}\n/>\n```\n\n**With Echarts.js v3 or v4:**\n\n```ts\nimport React from 'react';\n// import the core library.\nimport ReactEChartsCore from 'echarts-for-react/lib/core';\n\n// then import echarts modules those you have used manually.\nimport echarts from 'echarts/lib/echarts';\n// import 'echarts/lib/chart/line';\nimport 'echarts/lib/chart/bar';\n// import 'echarts/lib/chart/pie';\n// import 'echarts/lib/chart/scatter';\n// import 'echarts/lib/chart/radar';\n\n// import 'echarts/lib/chart/map';\n// import 'echarts/lib/chart/treemap';\n// import 'echarts/lib/chart/graph';\n// import 'echarts/lib/chart/gauge';\n// import 'echarts/lib/chart/funnel';\n// import 'echarts/lib/chart/parallel';\n// import 'echarts/lib/chart/sankey';\n// import 'echarts/lib/chart/boxplot';\n// import 'echarts/lib/chart/candlestick';\n// import 'echarts/lib/chart/effectScatter';\n// import 'echarts/lib/chart/lines';\n// import 'echarts/lib/chart/heatmap';\n\n// import 'echarts/lib/component/graphic';\n// import 'echarts/lib/component/grid';\n// import 'echarts/lib/component/legend';\nimport 'echarts/lib/component/tooltip';\n// import 'echarts/lib/component/polar';\n// import 'echarts/lib/component/geo';\n// import 'echarts/lib/component/parallel';\n// import 'echarts/lib/component/singleAxis';\n// import 'echarts/lib/component/brush';\n\nimport 'echarts/lib/component/title';\n\n// import 'echarts/lib/component/dataZoom';\n// import 'echarts/lib/component/visualMap';\n\n// import 'echarts/lib/component/markPoint';\n// import 'echarts/lib/component/markLine';\n// import 'echarts/lib/component/markArea';\n\n// import 'echarts/lib/component/timeline';\n// import 'echarts/lib/component/toolbox';\n\n// import 'zrender/lib/vml/vml';\n\n// The usage of ReactEChartsCore are same with above.\n<ReactEChartsCore\n  echarts={echarts}\n  option={this.getOption()}\n  notMerge={true}\n  lazyUpdate={true}\n  theme={\"theme_name\"}\n  onChartReady={this.onChartReadyCallback}\n  onEvents={EventsDict}\n  opts={}\n/>\n```\n\nFor **Next.js** user, code transpilation is needed.\n\n```js\n// next.config.js\nconst withTM = require(\"next-transpile-modules\")([\"echarts\", \"zrender\"]);\n\nmodule.exports = withTM({})\n```\n\n## Props of Component\n\n - **`option`** (required, object)\n\nthe echarts option config, can see [https://echarts.apache.org/option.html#title](https://echarts.apache.org/option.html#title).\n\n - **`notMerge`** (optional, object)\n\nwhen `setOption`, not merge the data, default is `false`. See [https://echarts.apache.org/api.html#echartsInstance.setOption](https://echarts.apache.org/api.html#echartsInstance.setOption).\n\n - **`replaceMerge`** (optional, string | string[])\n\nwhen `setOption`, default is `null`. See [https://echarts.apache.org/api.html#echartsInstance.setOption](https://echarts.apache.org/api.html#echartsInstance.setOption).\n\n - **`lazyUpdate`** (optional, object)\n\nwhen `setOption`, lazy update the data, default is `false`. See [https://echarts.apache.org/api.html#echartsInstance.setOption](https://echarts.apache.org/api.html#echartsInstance.setOption).\n\n - **`style`** (optional, object)\n\nthe `style` of echarts div. `object`, default is {height: '300px'}.\n\n - **`className`** (optional, string)\n\nthe `class` of echarts div. you can setting the css style of charts by class name.\n\n - **`theme`** (optional, string)\n\nthe `theme` of echarts. `string`, should `registerTheme` before use it (theme object format: [https://github.com/ecomfe/echarts/blob/master/theme/dark.js](https://github.com/ecomfe/echarts/blob/master/theme/dark.js)). e.g.\n\n```ts\n// import echarts\nimport echarts from 'echarts';\n...\n// register theme object\necharts.registerTheme('my_theme', {\n  backgroundColor: '#f4cccc'\n});\n...\n// render the echarts use option `theme`\n<ReactECharts\n  option={this.getOption()}\n  style={{height: '300px', width: '100%'}}\n  className='echarts-for-echarts'\n  theme='my_theme' />\n```\n\n - **`onChartReady`** (optional, function)\n\nwhen the chart is ready, will callback the function with the `echarts object` as it's paramter.\n\n - **`loadingOption`** (optional, object)\n\nthe echarts loading option config, can see [https://echarts.apache.org/api.html#echartsInstance.showLoading](https://echarts.apache.org/api.html#echartsInstance.showLoading).\n\n - **`showLoading`** (optional, bool, default: false)\n\n`bool`, when the chart is rendering, show the loading mask.\n\n - **`onEvents`** (optional, array(string=>function) )\n\nbinding the echarts event, will callback with the `echarts event object`, and `the echart object` as it's paramters. e.g:\n\n```ts\nconst onEvents = {\n  'click': this.onChartClick,\n  'legendselectchanged': this.onChartLegendselectchanged\n}\n...\n<ReactECharts\n  option={this.getOption()}\n  style={{ height: '300px', width: '100%' }}\n  onEvents={onEvents}\n/>\n```\nfor more event key name, see: [https://echarts.apache.org/api.html#events](https://echarts.apache.org/api.html#events)\n\n - **`opts`** (optional, object)\n\nthe `opts` of echarts. `object`, will be used when initial echarts instance by `echarts.init`. Document [here](https://echarts.apache.org/api.html#echarts.init).\n\n```ts\n<ReactECharts\n  option={this.getOption()}\n  style={{ height: '300px' }}\n  opts={{renderer: 'svg'}} // use svg to render the chart.\n/>\n```\n\n- **`autoResize`** (optional, boolean)\n\ndecide whether to trigger `this.resize` when window resize. default is `true`.\n\n\n## Component API & Echarts API\n\nthe Component only has `one API` named `getEchartsInstance`.\n\n - **`getEchartsInstance()`** : get the echarts instance object, then you can use any `API of echarts`.\n\nfor example:\n\n```ts\n// render the echarts component below with rel\n<ReactECharts\n  ref={(e) => { this.echartRef = e; }}\n  option={this.getOption()}\n/>\n\n// then get the `ReactECharts` use this.echarts_react\n\nconst echartInstance = this.echartRef.getEchartsInstance();\n// then you can use any API of echarts.\nconst base64 = echartInstance.getDataURL();\n```\n\n**About API of echarts, can see** [https://echarts.apache.org/api.html#echartsInstance](https://echarts.apache.org/api.html#echartsInstance).\n\nYou can use the API to do:\n\n1. `binding / unbinding` event.\n2. `dynamic charts` with dynamic data.\n3. get the echarts dom / dataURL / base64, save the chart to png.\n4. `release` the charts.\n\n\n## FAQ\n\n### How to render the chart with svg when using echarts 4.x\n\nUse the props `opts` of component with `renderer = 'svg'`. For example:\n\n\n```ts\n<ReactECharts\n  option={this.getOption()}\n  style={{height: '300px'}}\n  opts={{renderer: 'svg'}} // use svg to render the chart.\n/>\n```\n\n### How to resolve Error `Component series.scatter3D not exists. Load it first.`\n\nInstall and import [`echarts-gl`](https://www.npmjs.com/package/echarts-gl) module when you want to create a [GL instance](https://www.echartsjs.com/examples/zh/index.html#chart-type-globe)\n\n```sh\nnpm install --save echarts-gl\n```\n\n```ts\nimport 'echarts-gl'\nimport ReactECharts from \"echarts-for-react\";\n\n<ReactECharts\n  option={GL_OPTION}\n/>\n```\n\n\n## LICENSE\n\nMIT@[hustcc](https://github.com/hustcc).\n"
        },
        {
          "name": "__tests__",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 3.0986328125,
          "content": "{\n  \"name\": \"echarts-for-react\",\n  \"version\": \"3.0.2\",\n  \"description\": \" Apache Echarts components for React.\",\n  \"main\": \"lib/index.js\",\n  \"module\": \"esm/index.js\",\n  \"types\": \"lib/index.d.ts\",\n  \"files\": [\n    \"lib\",\n    \"esm\",\n    \"src\"\n  ],\n  \"scripts\": {\n    \"docs:dev\": \"NODE_ENV=development dumi dev\",\n    \"docs:build\": \"NODE_ENV=production dumi build\",\n    \"docs:deploy\": \"rimraf dist && npm run docs:build && gh-pages -d dist\",\n    \"start\": \"npm run docs:dev\",\n    \"lint\": \"eslint src __tests__ && prettier src __tests__ --check\",\n    \"fix\": \"eslint src __tests__ --fix && prettier src __tests__ --write\",\n    \"clean\": \"rimraf lib esm dist\",\n    \"test\": \"jest\",\n    \"lib\": \"run-p lib:*\",\n    \"lib:cjs\": \"tsc -p tsconfig.json --target ES5 --module commonjs --outDir lib\",\n    \"lib:esm\": \"tsc -p tsconfig.json --target ES5 --module ESNext --outDir esm\",\n    \"build\": \"npm run clean && npm run test && npm run lib\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/hustcc/echarts-for-react.git\"\n  },\n  \"keywords\": [\n    \"react\",\n    \"component\",\n    \"echarts-react\",\n    \"echarts\",\n    \"react-echarts\",\n    \"chart\",\n    \"charts\",\n    \"graph\",\n    \"react-component\"\n  ],\n  \"author\": \"hustcc (http://github.com/hustcc)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/hustcc/echarts-for-react/issues\"\n  },\n  \"homepage\": \"https://github.com/hustcc/echarts-for-react\",\n  \"devDependencies\": {\n    \"@commitlint/cli\": \"^12.0.0\",\n    \"@commitlint/config-angular\": \"^12.0.0\",\n    \"@types/jest\": \"^26.0.20\",\n    \"@types/node\": \"^14.14.31\",\n    \"@types/react\": \"^17.0.2\",\n    \"@typescript-eslint/eslint-plugin\": \"^4.15.2\",\n    \"@typescript-eslint/parser\": \"^4.15.2\",\n    \"cross-env\": \"^7.0.3\",\n    \"dumi\": \"^1.1.6\",\n    \"dumi-theme-default\": \"^1.0.6\",\n    \"echarts\": \"^5.0.2\",\n    \"echarts-gl\": \"^2.0.2\",\n    \"eslint\": \"^7.20.0\",\n    \"eslint-config-prettier\": \"^8.1.0\",\n    \"eslint-plugin-import\": \"^2.22.1\",\n    \"eslint-plugin-prettier\": \"^3.3.1\",\n    \"gh-pages\": \"^3.1.0\",\n    \"husky\": \"^5.1.1\",\n    \"jest\": \"^26.6.3\",\n    \"jest-canvas-mock\": \"^2.3.1\",\n    \"jest-electron\": \"^0.1.11\",\n    \"lint-md-cli\": \"^0.1.2\",\n    \"lint-staged\": \"^10.5.4\",\n    \"lodash.clonedeep\": \"^4.5.0\",\n    \"miz\": \"^1.0.1\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"prettier\": \"^2.2.1\",\n    \"rimraf\": \"^3.0.2\",\n    \"ts-jest\": \"^26.5.2\",\n    \"ts-loader\": \"^8.0.17\",\n    \"typescript\": \"^4.2.2\"\n  },\n  \"dependencies\": {\n    \"size-sensor\": \"^1.0.1\",\n    \"fast-deep-equal\": \"^3.1.3\"\n  },\n  \"peerDependencies\": {\n    \"react\": \"^15.0.0 || >=16.0.0\",\n    \"echarts\": \"^3.0.0 || ^4.0.0 || ^5.0.0\"\n  },\n  \"jest\": {\n    \"runner\": \"jest-electron/runner\",\n    \"testEnvironment\": \"jest-electron/environment\",\n    \"preset\": \"ts-jest\",\n    \"collectCoverage\": true,\n    \"collectCoverageFrom\": [\n      \"src/**/*.ts\",\n      \"!**/node_modules/**\",\n      \"!**/vendor/**\"\n    ],\n    \"testRegex\": \"/__tests__/.*-spec\\\\.tsx?$\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\",\n      \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\"\n    }\n  },\n  \"lint-staged\": {\n    \"*.ts\": [\n      \"eslint --fix\",\n      \"prettier --write\"\n    ],\n    \"*.md\": [\n      \"lint-md --fix\"\n    ]\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.4609375,
          "content": "{\n  \"compilerOptions\": {\n    \"jsx\": \"react\",\n    \"module\": \"commonjs\",\n    \"sourceMap\": true,\n    \"inlineSources\": true,\n    \"target\": \"es5\",\n    \"outDir\": \"lib\",\n    \"declaration\": true,\n    \"importHelpers\": true,\n    \"moduleResolution\": \"node\",\n    \"allowSyntheticDefaultImports\": true,\n    \"esModuleInterop\": true,\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"lib\": [\"esnext\", \"dom\"],\n    \"types\": [\"jest\", \"react\", \"node\"]\n  },\n  \"include\": [\"src\"]\n}\n"
        }
      ]
    }
  ]
}