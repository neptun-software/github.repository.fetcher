{
  "metadata": {
    "timestamp": 1736564367213,
    "page": 958,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "aisuda/amis-editor-demo",
      "stars": 2355,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9375,
          "content": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# TypeScript v1 declaration files\ntypings/\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n\n# next.js build output\n.next\n\ngh-pages\n/public\n.DS_Store\n\npackage-lock.json"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.3466796875,
          "content": "{\n  \"printWidth\": 80,\n  \"tabWidth\": 2,\n  \"useTabs\": false,\n  \"singleQuote\": true,\n  \"semi\": true,\n  \"trailingComma\": \"none\",\n  \"bracketSpacing\": false,\n  \"quoteProps\": \"consistent\",\n  \"arrowParens\": \"avoid\",\n  \"jsxBracketSameLine\": false,\n  \"overrides\": [\n    {\n      \"files\": [\"fis-conf.js\"],\n      \"options\": {\n        \"tabWidth\": 4\n      }\n    }\n  ]\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.90625,
          "content": "# amis-editor-demo\n\namis 可视化编辑器, 在线体验：https://aisuda.github.io/amis-editor-demo\n\n要使用编辑器必须熟悉 React，如果不了解建议使用[速搭](https://aisuda.baidu.com/)。\n\n## 本地运行这个项目\n\n1. `npm i` 安装依赖\n3. `npm run dev` 等编译完成后本地打开页面看效果。\n\n## 历史版本预览地址\n1. [6.7.0(2024.08.06)](https://aisuda.github.io/amis-editor-demo/demo-6.7.0/index.html)\n2. [6.0.0(2023.12.29)](https://aisuda.github.io/amis-editor-demo/demo-6.0.0/index.html)\n3. [5.6.2(2023.10.31)](https://aisuda.github.io/amis-editor-demo/demo-5.6.2/index.html)\n4. [5.6.1(2023.09.28) history模式](https://aisuda.github.io/amis-editor-demo/demo-5.6.1-v2/index.html)\n5. [5.6.1(2023.09.28)](https://aisuda.github.io/amis-editor-demo/demo-5.6.1/index.html)\n6. [5.4.1(2023.06.09)](https://aisuda.github.io/amis-editor-demo/demo-5.4.1/index.html)\n7. [4.1.0-beta.28(2022.05.27)](https://aisuda.github.io/amis-editor-demo/demo-4.1.0-beta.28/index.html)\n8. [4.0.2-beta.10(2022.02.23)](https://aisuda.github.io/amis-editor-demo/demo-4.0.2-beta.10/index.html)\n9. [3.3.5(2021-08-12)](https://aisuda.github.io/amis-editor-demo/demo-3.3.5/index.html)\n\n\n## 在其他项目中使用 amis-editor\n\n```\nnpm i amis-editor\n```\n\n使用 方法\n\n```jsx\nimport {Editor} from 'amis-editor';\n\n\nrender() {\n  return (\n    <Editor\n      {...props}\n    />\n  )\n}\n```\n\n属性说明：\n\n-   `value: any` 值，amis 的 json 配置。\n-   `onChange: (value: any) => void`。 当编辑器修改的时候会触发。\n-   `preview?: boolean` 是否为预览状态。\n-   `autoFocus?: boolean` 是否自动聚焦第一个可编辑的组件。\n-   `plugins` 插件类集合\n\n## 扩充自定义编辑器（旧版）\n\n如何扩充 amis 渲染器，请前往[如何注册自定义类型](https://baidu.github.io/amis/docs/start/custom#%E6%B3%A8%E5%86%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B)，这里主要介绍如何把自定义的组件加入到编辑器里面来。\n\n示例：\n\n-   ./renderer/MyRenderer.tsx\n-   ./editor/MyRenderer.tsx\n\n首先，注册自定义组件的时候需要设置一个 `name` 属性，这个属性值应该是唯一的。后续注册编辑器是靠这个关联。\n\n如本仓库中示例，name 值为 `my-renderer`。\n\n```tsx\n@Renderer({\n    test: /\\bmy-renderer$/,\n    name: 'my-renderer'\n})\nexport default class MyRenderer extends React.Component<MyRendererProps> {\n    static defaultProps = {\n        target: 'world'\n    };\n\n    render() {\n        const {target} = this.props;\n\n        return <p>Hello {target}!</p>;\n    }\n}\n```\n\n然后开始注册编辑器。\n\n```tsx\nimport {RendererEditor, BasicEditor} from 'amis-editor';\n\n@RendererEditor('my-renderer', {\n    name: '自定义渲染器',\n    description: '这只是个示例',\n    // docLink: '/docs/renderers/Nav',\n    type: 'my-renderer', // 这个在 scaffold 没设置的时候有用。\n    previewSchema: {\n        // 用来生成预览图的\n        type: 'my-renderer',\n        target: 'demo'\n    },\n    scaffold: {\n        // 拖入组件里面时的初始数据\n        type: 'my-renderer',\n        target: '233'\n    }\n})\nexport default class MyRendererEditor extends BasicEditor {\n    tipName = '自定义组件';\n    settingsSchema = {\n        title: '自定义组件配置',\n        body: [\n            {\n                type: 'tabs',\n                tabsMode: 'line',\n                className: 'm-t-n-xs',\n                contentClassName: 'no-border p-l-none p-r-none',\n                tabs: [\n                    {\n                        title: '常规',\n                        controls: [\n                            {\n                                name: 'target',\n                                label: 'Target',\n                                type: 'text'\n                            }\n                        ]\n                    },\n\n                    {\n                        title: '外观',\n                        controls: []\n                    }\n                ]\n            }\n        ]\n    };\n}\n```\n\n然后直接看效果吧 https://github.com/fex-team/amis-editor 这里面插入的时候选择输入 my-renderer 然后就可以插入自定义的组件了。\n\n## 扩充自定义编辑器（新版）\n\namis-editor 重构了一版，之前定义注册自定义组件的方式也能用，但是已经标记了 `deprecated`，新的添加自定义编辑器的方式有两种。\n\n1. registerEditorPlugin 注册全局插件。\n2. 不注册，但是调用 `<Editor>` 的时候时候通过 `plugins` 属性传入。\n\n效果都一样，重点还是怎么写个 Plugin，示例：\n\n```tsx\nimport {BasePlugin} from 'amis-editor';\n\nexport class MyRendererPlugin extends BasePlugin {\n    rendererName = 'my-renderer';\n\n    // 暂时只支持这个，配置后会开启代码编辑器\n    $schema = '/schemas/UnkownSchema.json';\n\n    // 用来配置名称和描述\n    name = '自定义渲染器';\n    description = '这只是个示例';\n\n    // tag，决定会在哪个 tab 下面显示的\n    tags = ['自定义', '表单项'];\n\n    // 图标\n    icon = 'fa fa-user';\n\n    // 用来生成预览图的\n    previewSchema = {\n        type: 'my-renderer',\n        target: 'demo'\n    };\n\n    // 拖入组件里面时的初始数据\n    scaffold = {\n        type: 'my-renderer',\n        target: '233'\n    };\n\n    // 右侧面板相关\n    panelTitle = '自定义组件';\n    panelControls = [\n        {\n            type: 'tabs',\n            tabsMode: 'line',\n            className: 'm-t-n-xs',\n            contentClassName: 'no-border p-l-none p-r-none',\n            tabs: [\n                {\n                    title: '常规',\n                    controls: [\n                        {\n                            name: 'target',\n                            label: 'Target',\n                            type: 'text'\n                        }\n                    ]\n                },\n\n                {\n                    title: '外观',\n                    controls: []\n                }\n            ]\n        }\n    ];\n}\n```\n\n定义好 plugin 后，可以有两种方式启用。\n\n```tsx\n// 方式 1，注册默认插件，所有编辑器实例都会自动实例话。\nimport {registerEditorPlugin} from 'amis-editor';\n\nregisterEditorPlugin(MyRendererPlugin);\n\n// 方式2，只让某些编辑器启用\n() => <Editor plugins={[MyRendererPlugin]} />;\n```\n\n前面的示例只做了简单的说明，可用属性还有, 具体还是先看 npm 包里面的 .d.ts 文件吧，后面再补充更详细的文档。\n\n```tsx\nexport interface PluginEventListener {\n    onActive?: (event: PluginEvent<ActiveEventContext>) => void;\n\n    /**\n     * 事件，当有配置项插入前调用。通过 event.preventDefault() 可以干预。\n     */\n    beforeInsert?: (event: PluginEvent<InsertEventContext>) => false | void;\n    afterInsert?: (event: PluginEvent<InsertEventContext>) => void;\n\n    /**\n     * 面板里面编辑修改的事件。\n     */\n    beforeUpdate?: (event: PluginEvent<ChangeEventContext>) => false | void;\n    afterUpdate?: (event: PluginEvent<ChangeEventContext>) => void;\n\n    /**\n     * 更新渲染器，或者右键粘贴配置。\n     */\n    beforeReplace?: (event: PluginEvent<ReplaceEventContext>) => false | void;\n    afterReplace?: (event: PluginEvent<ReplaceEventContext>) => void;\n\n    /**\n     * 移动节点的时候触发，包括上移，下移\n     */\n    beforeMove?: (event: PluginEvent<MoveEventContext>) => false | void;\n    aftterMove?: (event: PluginEvent<MoveEventContext>) => void;\n\n    /**\n     * 删除的时候触发\n     */\n    beforeDelete?: (event: PluginEvent<BaseEventContext>) => false | void;\n    afterDelete?: (event: PluginEvent<BaseEventContext>) => void;\n\n    beforeResolveEditorInfo?: (event: PluginEvent<RendererInfoResolveEventContext>) => false | void;\n    afterResolveEditorInfo?: (event: PluginEvent<RendererInfoResolveEventContext>) => void;\n\n    beforeResolveJsonSchema?: (event: PluginEvent<RendererJSONSchemaResolveEventContext>) => false | void;\n    afterResolveJsonSchema?: (event: PluginEvent<RendererJSONSchemaResolveEventContext>) => void;\n\n    onDndAccept?: (event: PluginEvent<DragEventContext>) => false | void;\n\n    onBuildPanels?: (event: PluginEvent<BuildPanelEventContext>) => void;\n\n    onBuildContextMenus?: (event: PluginEvent<ContextMenuEventContext>) => void;\n\n    onPreventClick?: (event: PluginEvent<PreventClickEventContext>) => false | void;\n}\n\n/**\n * 插件的 interface 定义\n */\nexport interface PluginInterface extends Partial<BasicRendererInfo>, Partial<BasicSubRenderInfo>, PluginEventListener {\n    readonly manager: EditorManager;\n\n    order?: number;\n\n    /**\n     * 渲染器的名字，关联后不用自己实现 getRendererInfo 了。\n     */\n    rendererName?: string;\n\n    /**\n     * 默认的配置面板信息\n     */\n    panelIcon?: string;\n    panelTitle?: string;\n    panelControls?: Array<any>;\n    panelDefinitions?: any;\n    panelApi?: any;\n    panelSubmitOnChange?: boolean;\n    panelControlsCreator?: (context: BaseEventContext) => Array<any>;\n\n    /**\n     * 返回渲染器信息。不是每个插件都需要。\n     */\n    getRendererInfo?: (context: RendererInfoResolveEventContext) => BasicRendererInfo | void;\n\n    /**\n     * 生成节点的 JSON Schema 的 uri 地址。\n     */\n    buildJSONSchema?: (context: RendererJSONSchemaResolveEventContext) => void | string;\n\n    /**\n     * 构建右上角功能按钮集合\n     */\n    buildEditorToolbar?: (context: BaseEventContext, toolbars: Array<BasicToolbarItem>) => void;\n\n    /**\n     * 构建右键菜单项\n     */\n    buildEditorContextMenu?: (context: ContextMenuEventContext, menus: Array<ContextMenuItem>) => void;\n\n    /**\n     * 构建编辑器面板。\n     */\n    buildEditorPanel?: (context: BaseEventContext, panels: Array<BasicPanelItem>) => void;\n\n    /**\n     * 构建子渲染器信息集合。\n     */\n    buildSubRenderers?: (\n        context: RendererEventContext,\n        subRenderers: Array<SubRendererInfo>,\n        renderers: Array<RendererConfig>\n    ) => BasicSubRenderInfo | Array<BasicSubRenderInfo> | void;\n}\n```\n\n"
        },
        {
          "name": "amis.config.js",
          "type": "blob",
          "size": 2.7607421875,
          "content": "'use strict';\nconst path = require('path');\nconst MonacoWebpackPlugin = require('monaco-editor-webpack-plugin');\n// 统一路径解析\nfunction resolve(dir) {\n  return path.resolve(__dirname, dir);\n}\n\n// 包括生产和开发的环境配置信息\nmodule.exports = {\n  webpack: {\n    // webpack的resolve配置\n    resolve: {\n      // 用于配置webpack在尝试过程中用到的后缀列表\n      extensions: ['.js', '.jsx', '.ts', '.tsx','.esm.js', '.umd.js', '.min.js', '.json', '.mjs'],\n      alias: {\n        '@': resolve('src'),\n        // $function: resolve('src/function'),\n        // $utils: resolve('src/utils'),\n      },\n      // conditionNames: ['require']\n    },\n    createDeclaration: false, // 打包时是否创建ts声明文件\n    ignoreNodeModules: false, // 打包时是否忽略 node_modules\n    allowList: [], // ignoreNodeModules为true时生效\n    externals: ['react/jsx-runtime'],\n    projectDir: ['src'],\n    template: resolve('./src/index.html'), // 使用自己的html模板\n    // cssLoaderUrl: true,\n    // cssLoaderUrlDir: 'editor/fontawesome-free',\n    moduleRules: [], // 用于配置自定义loaders\n    plugins: [], // 用于配置自定义plugins\n  },\n  dev: {\n    entry: { // 本地调试模式的入口\n      index: './src/index.tsx',\n    },\n    // 用于开启本地调试模式的相关配置信息\n    NODE_ENV: 'development',\n    ignoreNodeModules: false, // 打包时是否忽略 node_modules\n    port: 80,\n    autoOpenBrowser: true,\n    assetsPublicPath: '/', // 设置静态资源的引用路径（根域名+路径）\n    assetsSubDirectory: '',\n    hostname: 'localhost',\n    cssSourceMap: false,\n    closeHotReload: false, // 是否关闭热更新\n    closeEditorClient: true, // 是否关闭自动注入editor\n    proxyTable: {\n      /**\n       * 将含有'/apiTest'路径的api代理到'http://api-test.com.cn'上，\n       * 详细使用见 https://www.webpackjs.com/configuration/dev-server/#devserver-proxy\n       */\n      '/apiTest': {\n        target: 'http://api-test.com.cn', // 不支持跨域的接口根地址\n        ws: true,\n        changeOrigin: true,\n      },\n    }\n  },\n  build: {\n    entry: { // webpack构建入口\n      index: './src/index.tsx',\n      // editor:  './src/mobile.tsx'\n    },\n    // 用于构建生产环境代码的相关配置信息\n    NODE_ENV: 'production',\n    assetsRoot: resolve('./demo-6.7.0'), // 打包后的文件绝对路径（物理路径）\n    assetsPublicPath: 'https://aisuda.github.io/amis-editor-demo/demo-6.7.0/', // 设置静态资源的引用路径（根域名+路径）\n    assetsSubDirectory: '', // 资源引用二级路径\n    productionSourceMap: false,\n    productionGzip: false,\n    productionGzipExtensions: ['js', 'css', 'json'],\n    plugins: [new MonacoWebpackPlugin()],\n    bundleAnalyzerReport: false,\n  }\n};\n"
        },
        {
          "name": "demo-3.3.5",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo-4.0.2-beta.10",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo-4.1.0-beta.28",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo-5.4.1",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo-5.6.1-v2",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo-5.6.1",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo-5.6.2",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo-6.0.0",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo-6.7.0",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 1.1123046875,
          "content": "<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"format-detection\" content=\"telephone=no\"/> <meta name=\"viewport\" content=\"initial-scale=1,user-scalable=no,width=device-width,viewport-fit=cover\"> <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"> <title>amis-editor Demo</title> <link rel=\"stylesheet\" href=\"https://bce.bdstatic.com/iconfont/iconfont.css\"/> <link rel=\"stylesheet\" href=\"https://unpkg.com/animate.css@4.1.1/animate.min.css\"/> <link data-react-helmet=\"true\" rel=\"shortcut icon\" href=\"https://avatars.githubusercontent.com/u/78204817?s=200&v=4\"/> <link href=\"https://aisuda.github.io/amis-editor-demo/demo-6.7.0/css/vendor.7e7c5fae.css\" rel=\"stylesheet\"><link href=\"https://aisuda.github.io/amis-editor-demo/demo-6.7.0/css/index.b5761050.css\" rel=\"stylesheet\"></head> <body> <div id=\"root\"></div> <script defer src=\"https://aisuda.github.io/amis-editor-demo/demo-6.7.0/scripts/chunk/vendor.19148c9b.js\"></script><script defer src=\"https://aisuda.github.io/amis-editor-demo/demo-6.7.0/scripts/chunk/index.4150717e.js\"></script></body> </html> "
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.552734375,
          "content": "{\n  \"name\": \"amis-editor-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"amis 可视化编辑器\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"dev\": \"amis dev\",\n    \"build\": \"amis build\",\n    \"format\": \"prettier --write \\\"src/**/**/*.{js,jsx,ts,tsx,vue,scss,json}\\\"\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/aisuda/amis-editor-demo.git\"\n  },\n  \"keywords\": [\n    \"amis\",\n    \"editor\"\n  ],\n  \"author\": \"fex\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/aisuda/amis-editor-demo/issues\"\n  },\n  \"homepage\": \"https://github.com/aisuda/amis-editor-demo#readme\",\n  \"dependencies\": {\n    \"@fortawesome/fontawesome-free\": \"^5.15.3\",\n    \"amis\": \"6.7.0\",\n    \"amis-core\": \"6.7.0\",\n    \"amis-formula\": \"6.7.0\",\n    \"amis-ui\": \"6.7.0\",\n    \"amis-editor\": \"6.7.0\",\n    \"amis-editor-core\": \"6.7.0\",\n    \"axios\": \"0.21.1\",\n    \"copy-to-clipboard\": \"^3.2.0\",\n    \"mobx\": \"4.15.7\",\n    \"mobx-react\": \"6.3.1\",\n    \"mobx-state-tree\": \"3.17.3\",\n    \"qs\": \"6.5.3\",\n    \"react\": \"^16.14.0\",\n    \"react-dom\": \"^16.14.0\",\n    \"react-hook-form\": \"^7.39.3\",\n    \"react-router\": \"5.0.1\",\n    \"react-router-dom\": \"5.0.1\"\n  },\n  \"devDependencies\": {\n    \"@types/lodash\": \"^4.14.123\",\n    \"@types/node\": \"^11.13.8\",\n    \"@types/qs\": \"^6.5.3\",\n    \"@types/react\": \"^16.9.0\",\n    \"@types/react-dom\": \"^16.9.0\",\n    \"@types/react-router\": \"5.0.1\",\n    \"@types/react-router-dom\": \"^5.3.3\",\n    \"acorn\": \"^8.8.2\",\n    \"amis-widget-cli\": \"^3.2.0\",\n    \"monaco-editor-webpack-plugin\": \"6.0.0\",\n    \"prettier\": \"^2.2.1\",\n    \"sass\": \"^1.63.4\",\n    \"typescript\": \"^4.5.5\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.56640625,
          "content": "{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"target\": \"esnext\",\n    \"lib\": [\"es6\", \"dom\"],\n    \"sourceMap\": true,\n    \"jsx\": \"react\",\n    \"moduleResolution\": \"node\",\n    \"rootDir\": \"./src\",\n    \"noImplicitReturns\": true,\n    \"noImplicitThis\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"typeRoots\": [\"./node_modules/@types\", \"./typings\"]\n  },\n  \"include\": [\"**/*\"],\n  \"exclude\": [\n    \"node_modules\"\n  ],\n  \"types\": [\"typePatches\"]\n}\n"
        }
      ]
    }
  ]
}