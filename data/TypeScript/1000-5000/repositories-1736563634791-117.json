{
  "metadata": {
    "timestamp": 1736563634791,
    "page": 117,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebook/memlab",
      "stars": 4469,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2197265625,
          "content": "**.js.map\n**.ts.map\n**/tsconfig.tsbuildinfo\n.DS_Store\n.yarnrc\n.idea\n/chrome\n/data\n/dist/\n/dist/packages\n/tmp\nlerna-debug.log\nbuild.log\nnode_modules\npackage-lock.json\npackage-oss.json\npackages/**/dist\nyarn-error.log\nyarn.lock\n"
        },
        {
          "name": ".nvmrc",
          "type": "blob",
          "size": 0.0087890625,
          "content": "v16.14.2\n"
        },
        {
          "name": ".watchmanconfig",
          "type": "blob",
          "size": 0.0029296875,
          "content": "{}\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.4580078125,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\nThis Code of Conduct also applies outside the project spaces when there is a\nreasonable belief that an individual's behavior may have a negative impact on\nthe project or its community.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at <opensource-conduct@fb.com>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.2177734375,
          "content": "# Contributing to memlab\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Pull Requests\nWe actively welcome your pull requests.\n\n1. Fork the repo and create your branch from `main`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints.\n6. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## License\nBy contributing to memlab, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0625,
          "content": "MIT License\n\nCopyright (c) Meta Platforms, Inc. and affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.6123046875,
          "content": "<h1 align=\"center\">\n  <a href=\"https://facebook.github.io/memlab/\">MemLab</a>\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://github.com/facebook/memlab/blob/master/LICENSE\">\n    <img alt=\"Licensed under the MIT License\" src=\"https://img.shields.io/badge/License-MIT-blue.svg\"/>\n  </a>\n  <a href=\"https://github.com/facebook/memlab/blob/main/CONTRIBUTING.md\">\n    <img alt=\"PR's Welcome\" src=\"https://img.shields.io/badge/PRs%20-welcome-brightgreen.svg\"/>\n  </a>\n  <a href=\"https://www.npmjs.com/package/memlab?activeTab=readme\">\n    <img alt=\"npm version\" src=\"https://img.shields.io/npm/v/memlab.svg?style=flat\"/>\n  </a>\n</p>\n\nmemlab is an end-to-end testing and analysis framework for identifying\nJavaScript memory leaks and optimization opportunities.\n\n**Online Resources:** [[Website and Demo](https://facebook.github.io/memlab)] | [[Documentation](https://facebook.github.io/memlab/docs/intro)] | [[Meta Engineering Blog Post](https://engineering.fb.com/2022/09/12/open-source/memlab/)]\n\nFeatures:\n\n- **Browser memory leak detection** - Write test scenarios with the Puppeteer\n  API, and memlab will automatically compare JavaScript heap snapshots, filter\n  out memory leaks, and aggregate the results\n- **Object-oriented heap traversing API** - Supports the creation of\n  self-defined memory leak detector, and enables programmatic analysis JS heap\n  snapshots taken from Chromium-based browsers, Node.js, Electron.js, and Hermes\n- **Memory CLI toolbox** - Built-in toolbox and APIs for finding memory\n  optimization opportunities (not necessarily just memory leaks)\n- **Memory assertions in Node.js** - Enables unit tests or running node.js\n  programs to take a heap snapshot of their own state, perform self memory\n  checking, or write advanced memory assertions\n\n## CLI Usage\n\nInstall the CLI\n\n```bash\nnpm install -g memlab\n```\n\n### Find Memory Leaks\n\nTo find memory leaks in Google Maps, you can create a\n[scenario file](https://facebook.github.io/memlab/docs/api/interfaces/core_src.IScenario) defining how\nto interact with the Google Maps, let's name it `test-google-maps.js`:\n\n```javascript\n// initial page load url: Google Maps\nfunction url() {\n  return 'https://www.google.com/maps/@37.386427,-122.0428214,11z';\n}\n\n// action where we want to detect memory leaks: click the Hotels button\nasync function action(page) {\n  // puppeteer page API\n  await page.click('text/Hotels');\n}\n\n// action where we want to go back to the step before: click clear search\nasync function back(page) {\n  // puppeteer page API\n  await page.click('[aria-label=\"Close\"]');\n}\n\nmodule.exports = {action, back, url};\n```\n\nNow run memlab with the scenario file, memlab will interact with\nthe web page and detect memory leaks with built-in leak detectors:\n\n```bash\nmemlab run --scenario test-google-maps.js\n```\n\nmemlab will print memory leak results showing one representative\nretainer trace for each cluster of leaked objects.\n\n**Retainer traces**: This is the result from\n[an example website](https://facebook.github.io/memlab/docs/guides/guides-find-leaks),\nthe retainer trace is an object reference chain from the GC root to a leaked\nobject. The trace shows why and how a leaked object is still kept alive in\nmemory. Breaking the reference chain means the leaked object will no longer\nbe reachable from the GC root, and therefore can be garbage collected.\nBy following the leak trace one step at a time, you will be able to find\na reference that should be set to null (but it wasn't due to a bug).\n\n```bash\nMemLab found 46 leak(s)\n--Similar leaks in this run: 4--\n--Retained size of leaked objects: 8.3MB--\n[Window] (native) @35847 [8.3MB]\n  --20 (element)--->  [InternalNode] (native) @130981728 [8.3MB]\n  --8 (element)--->  [InternalNode] (native) @130980288 [8.3MB]\n  --1 (element)--->  [EventListener] (native) @131009888 [8.3MB]\n  --1 (element)--->  [V8EventListener] (native) @224808192 [8.3MB]\n  --1 (element)--->  [eventHandler] (closure) @168079 [8.3MB]\n  --context (internal)--->  [<function scope>] (object) @181905 [8.3MB]\n  --bigArray (variable)--->  [Array] (object) @182925 [8.3MB]\n  --elements (internal)--->  [(object elements)] (array) @182929 [8.3MB]\n...\n```\n\nTo get readable trace, the web site under test needs to serve non-minified code (or at least minified code\nwith readable variables, function name, and property names on objects).\n\nAlternatively, you can debug the leak by loading the heap snapshot taken by memlab (saved in `$(memlab get-default-work-dir)/data/cur`)\nin Chrome DevTool and search for the leaked object ID (`@182929`).\n\n**View Retainer Trace Interactively**\n\nView memory issues detected by memlab based on a single JavaScript\nheap snapshot taken from Chromium, Hermes, memlab, or any node.js\nor Electron.js program:\n\n```bash\nmemlab view-heap --snapshot <PATH TO .heapsnapshot FILE>\n```\n\nYou can optionally specify a specific heap object with the object's id: `--node-id @28173` to pinpoint a specific object.\n\n![heap-view](./website/static/img/heap-view.png)\n\n**Self-defined leak detector**: If you want to use a self-defined leak detector, add a `leakFilter` callback\n([doc](https://facebook.github.io/memlab/docs/api/interfaces/core_src.IScenario/#-optional-leakfilter-leakfiltercallback))\nin the scenario file. `leakFilter` will be called for every unreleased heap\nobject (`node`) allocated by the target interaction.\n\n```javascript\nfunction leakFilter(node, heap) {\n  // ... your leak detector logic\n  // return true to mark the node as a memory leak\n}\n```\n\n`heap` is the graph representation of the final JavaScript heap snapshot.\nFor more details, view the\n[doc site](https://facebook.github.io/memlab/docs/api/interfaces/core_src.IHeapSnapshot).\n\n### Heap Analysis and Investigation\n\nView which object keeps growing in size during interaction in the previous run:\n\n```bash\nmemlab analyze unbound-object\n```\n\nAnalyze pre-fetched V8/hermes `.heapsnapshot` files:\n\n```bash\nmemlab analyze unbound-object --snapshot-dir <DIR_OF_SNAPSHOT_FILES>\n```\n\nUse `memlab analyze` to view all built-in memory analyses.\nFor extension, view the [doc site](https://facebook.github.io/memlab).\n\nView retainer trace of a particular object:\n\n```bash\nmemlab trace --node-id <HEAP_OBJECT_ID>\n```\n\nUse `memlab help` to view all CLI commands.\n\n## APIs\n\nUse the `memlab` npm package to start a E2E run in browser and detect memory leaks.\n\n```javascript\nconst memlab = require('memlab');\n\nconst scenario = {\n  // initial page load url\n  url: () => 'https://www.google.com/maps/@37.386427,-122.0428214,11z',\n\n  // action where we want to detect memory leaks\n  action: async page => await page.click('text/Hotels'),\n\n  // action where we want to go back to the step before\n  back: async page => await page.click('[aria-label=\"Close\"]'),\n};\nmemlab.run({scenario});\n```\n\n## Memory Assertions\n\nmemlab makes it possible to enable a unit test or running node.js program\nto take a heap snapshot of its own state, and write advanced memory assertions:\n\n```typescript\n// save as example.test.ts\nimport type {IHeapSnapshot, Nullable} from '@memlab/core';\nimport {config, takeNodeMinimalHeap} from '@memlab/core';\n\nclass TestObject {\n  public arr1 = [1, 2, 3];\n  public arr2 = ['1', '2', '3'];\n}\n\ntest('memory test with heap assertion', async () => {\n  config.muteConsole = true; // no console output\n\n  let obj: Nullable<TestObject> = new TestObject();\n  // get a heap snapshot of the current program state\n  let heap: IHeapSnapshot = await takeNodeMinimalHeap();\n\n  // call some function that may add references to obj\n  rabbitHole(obj);\n\n  expect(heap.hasObjectWithClassName('TestObject')).toBe(true);\n  obj = null;\n\n  heap = await takeNodeMinimalHeap();\n  // if rabbitHole does not have any side effect that\n  // adds new references to obj, then obj can be GCed\n  expect(heap.hasObjectWithClassName('TestObject')).toBe(false);\n}, 30000);\n```\n\nFor other APIs check out the\n[API documentation](https://facebook.github.io/memlab/docs/api/interfaces/core_src.IHeapSnapshot#hasobjectwithclassnameclassname).\n\n## Development\n\nUse node version 16 or above. To build on Windows, please use Git Bash.\n\nFirst build the project as follows:\n\n```bash\nnpm install\nnpm run build\n```\n\nThen keep this helper script running to ensure that local changes are picked up\nand compiled automatically during development:\n\n```bash\nnpm run dev\n```\n\nNOTE: To run the memlab cli locally, make sure to prefix the memlab command with\nnpx from within the memlab repo e.g. `npx memlab`\n\nRun tests:\n\n```bash\nnpm run test\n```\n\n## License\n\nmemlab is MIT licensed, as found in the [LICENSE](LICENSE) file.\n\n## Contributing\n\nCheck our [contributing guide](CONTRIBUTING.md) to learn about how to\ncontribute to the project.\n\n## Code of Conduct\n\nCheck our [Code Of Conduct](CODE_OF_CONDUCT.md) to learn more about our\ncontributor standards and expectations.\n"
        },
        {
          "name": "docs",
          "type": "blob",
          "size": 0.01171875,
          "content": "website/docs"
        },
        {
          "name": "jest.config.js",
          "type": "blob",
          "size": 0.400390625,
          "content": "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @oncall web_perf_infra\n */\n\nconst config = {\n  verbose: true,\n  testRegex: '((.*/)?__tests__/.*)(\\\\.test|\\\\.spec)\\\\.(js|jsx)?$',\n  maxConcurrency: 1,\n  testEnvironment: 'node',\n};\n\nmodule.exports = config;\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.5107421875,
          "content": "{\n  \"name\": \"@memlab/monorepo\",\n  \"private\": true,\n  \"version\": \"1.0.0\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"ansi\": \"^0.3.1\",\n    \"babar\": \"^0.2.0\",\n    \"blessed\": \"^0.1.81\",\n    \"chalk\": \"^4.0.0\",\n    \"fs-extra\": \"^4.0.2\",\n    \"minimist\": \"^1.2.0\",\n    \"puppeteer\": \"^22.12.1\",\n    \"string-width\": \"^4.2.0\",\n    \"util.promisify\": \"^1.1.1\",\n    \"xvfb\": \"^0.4.0\"\n  },\n  \"devDependencies\": {\n    \"@types/blessed\": \"^0.1.19\",\n    \"@types/fs-extra\": \"^9.0.3\",\n    \"@types/jest\": \"^27.4.1\",\n    \"@types/minimist\": \"^1.2.2\",\n    \"@types/node\": \"^12.16.3\",\n    \"jest\": \"^29.6.2\",\n    \"typescript\": \"^4.6.3\"\n  },\n  \"scripts\": {\n    \"dev\": \"tsc -b -w\",\n    \"build\": \"npm run clean && npm run build-pkg --workspaces\",\n    \"pub\": \"npm run publish-patch --workspaces\",\n    \"clean\": \"npm run clean-pkg --workspaces && rm -rf ./website/build\",\n    \"memlab\": \"node packages/cli/dist/runner.js\",\n    \"test\": \"npm run test-pkg --workspaces --if-present\",\n    \"build-pkg\": \"npm run error\",\n    \"clean-pkg\": \"npm run error\",\n    \"test-pkg\": \"npm run error\",\n    \"publish-patch\": \"npm run error\",\n    \"error\": \"echo 'upgrade node.js to version 16.0.0 or above. Consider using nvm.'; exit 1\"\n  },\n  \"devEngines\": {\n    \"node\": \"18.x || 19.x || 20.x\",\n    \"npm\": \"7.x || 8.x || 9.x || 10.x\"\n  },\n  \"engines\": {\n    \"node\": \"18.x || 19.x || 20.x\",\n    \"npm\": \"7.x || 8.x || 9.x || 10.x\"\n  },\n  \"workspaces\": [\n    \"./packages/core\",\n    \"./packages/e2e\",\n    \"./packages/heap-analysis\",\n    \"./packages/api\",\n    \"./packages/cli\",\n    \"./packages/memlab\"\n  ]\n}\n"
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.base.json",
          "type": "blob",
          "size": 0.82421875,
          "content": "{\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\",\n    \"allowJs\": true,\n    \"module\": \"commonjs\",\n    \"esModuleInterop\": true,\n    \"target\": \"es6\",\n    \"composite\": true,\n    \"declaration\": true,\n    \"declarationMap\": true,\n    \"incremental\": true,\n    \"strict\": true,\n    \"strictPropertyInitialization\": false,\n    \"noEmitOnError\": true,\n    \"types\": [\"node\", \"jest\"],\n    \"paths\": {\n      \"@memlab/core\": [\"./packages/core/src/\"],\n      \"@memlab/e2e\": [\"./packages/e2e/src/\"],\n      \"@memlab/api\": [\"./packages/api/src/\"],\n      \"@memlab/cli\": [\"./packages/cli/src/\"],\n      \"@memlab/heap-analysis\": [\"./packages/heap-analysis/src/\"],\n      \"@memlab/memlab\": [\"./packages/memlab/src/\"]\n    }\n  },\n  \"include\": [\"./src\", \"./packages/**/src\", \"./node_modules/@types/puppeteer/index.d.ts\"],\n  \"exclude\": [\"./node_modules\", \"./packages/**/dist\"]\n}\n"
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.251953125,
          "content": "{\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./packages/core\" },\n    { \"path\": \"./packages/e2e\" },\n    { \"path\": \"./packages/heap-analysis\" },\n    { \"path\": \"./packages/api\" },\n    { \"path\": \"./packages/cli\" },\n    { \"path\": \"./packages/memlab\" }\n  ]\n}\n"
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}