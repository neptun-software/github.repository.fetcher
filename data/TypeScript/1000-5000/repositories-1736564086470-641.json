{
  "metadata": {
    "timestamp": 1736564086470,
    "page": 641,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "t3-oss/t3-env",
      "stars": 2902,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".changeset",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.103515625,
          "content": "node_modules\ndist\n\n.astro\n.next\n.nuxt\n.output\n.turbo\n.vercel\n.DS_Store\n\nenv.d.ts\nnext-env.d.ts\n**/.vscode\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "MIT License\n\nCopyright (c) 2023 Julius Marminge\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.1787109375,
          "content": "# Typesafe Envs made Simple\n\nDeploying your app with invalid environment variables is a hassle. This package helps you to avoid that.\n\n## Installation\n\n> [!NOTE]\n>\n>This is an ESM only package that requires a tsconfig with a module resolution that can read package.json#exports (`NodeNext` if transpiling with `tsc`, `Bundler` if using a bundler).\n\n```bash\n# Core package, no framework specific features\npnpm add @t3-oss/env-core zod\n# or, with options preconfigured for Next.js\npnpm add @t3-oss/env-nextjs zod\n```\n\n> Currently only supports Zod (which you'll need to install separately). Bring your own validation library is on the roadmap.\n\n## Usage\n\n> For full documentation, see https://env.t3.gg\n\nThis package supports the full power of Zod, meaning you can use `transforms` and `default` values.\n\n### Define your schema\n\n```ts\n// src/env.mjs\nimport { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /*\n   * Serverside Environment variables, not available on the client.\n   * Will throw if you access these variables on the client.\n   */\n  server: {\n    DATABASE_URL: z.string().url(),\n    OPEN_AI_API_KEY: z.string().min(1),\n  },\n  /*\n   * Environment variables available on the client (and server).\n   *\n   * ðŸ’¡ You'll get type errors if these are not prefixed with NEXT_PUBLIC_.\n   */\n  client: {\n    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: z.string().min(1),\n  },\n  /*\n   * Due to how Next.js bundles environment variables on Edge and Client,\n   * we need to manually destructure them to make sure all are included in bundle.\n   *\n   * ðŸ’¡ You'll get type errors if not all variables from `server` & `client` are included here.\n   */\n  runtimeEnv: {\n    DATABASE_URL: process.env.DATABASE_URL,\n    OPEN_AI_API_KEY: process.env.OPEN_AI_API_KEY,\n    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:\n      process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY,\n  },\n});\n```\n\n### Use the schema in your app with autocompletion and type inference\n\n```ts\n// src/app/hello/route.ts\nimport { env } from \"../env.mjs\";\n\nexport const GET = (req: Request) => {\n  const DATABASE_URL = env.DATABASE_URL;\n  // use it...\n};\n```\n\n## Roadmap\n\n- [ ] Bring your own validation library - currently only supports Zod.\n"
        },
        {
          "name": "biome.json",
          "type": "blob",
          "size": 0.8330078125,
          "content": "{\n  \"$schema\": \"https://biomejs.dev/schemas/1.5.3/schema.json\",\n  \"organizeImports\": {\n    \"enabled\": true\n  },\n  \"formatter\": {\n    \"enabled\": true,\n    \"indentWidth\": 2,\n    \"indentStyle\": \"space\"\n  },\n  \"linter\": {\n    \"enabled\": true,\n    \"rules\": {\n      \"recommended\": true,\n      \"a11y\": {\n        \"noSvgWithoutTitle\": \"off\",\n        \"useButtonType\": \"off\",\n        \"useAltText\": \"off\"\n      },\n      \"complexity\": {\n        \"noBannedTypes\": \"off\"\n      },\n      \"style\": {\n        \"useImportType\": \"error\",\n        \"useExportType\": \"error\"\n      }\n    }\n  },\n  \"overrides\": [\n    {\n      \"include\": [\"**/*.test.ts\"],\n      \"linter\": {\n        \"rules\": {\n          \"suspicious\": {\n            \"noExplicitAny\": \"off\"\n          }\n        }\n      }\n    }\n  ],\n  \"vcs\": {\n    \"enabled\": true,\n    \"clientKind\": \"git\",\n    \"useIgnoreFile\": true\n  }\n}\n"
        },
        {
          "name": "bun.lockb",
          "type": "blob",
          "size": 611.1328125,
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.642578125,
          "content": "{\n  \"name\": \"@t3-oss/env-root\",\n  \"packageManager\": \"bun@1.0.25\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"workspaces\": [\"docs\", \"examples/*\", \"packages/*\"],\n  \"scripts\": {\n    \"build\": \"turbo build --filter @t3-oss/env*\",\n    \"dev\": \"turbo watch dev --filter @t3-oss/env*\",\n    \"lint\": \"biome check .\",\n    \"lint:fix\": \"biome check . --apply\",\n    \"test\": \"turbo test\",\n    \"typecheck\": \"turbo typecheck\"\n  },\n  \"dependencies\": {\n    \"@biomejs/biome\": \"1.6.4\",\n    \"@changesets/changelog-github\": \"^0.5.0\",\n    \"@changesets/cli\": \"^2.27.1\",\n    \"@types/bun\": \"^1.0.12\",\n    \"expect-type\": \"^0.19.0\",\n    \"turbo\": \"canary\",\n    \"typescript\": \"^5.4.5\"\n  }\n}\n"
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "replace-workspace-protocol.ts",
          "type": "blob",
          "size": 0.5556640625,
          "content": "/// <reference types=\"bun-types\" />\nexport const MODULE = true;\n\ndeclare module \"bun\" {\n  interface BunFile {\n    // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n    json(): Promise<any>;\n  }\n}\n\n/**\n * Hack to replace the workspace protocol with the actual version\n */\n\nconst corePkg = await Bun.file(\"../core/package.json\").json();\nconst version = corePkg.version;\n\nconst workspacePkg = await Bun.file(\"package.json\").json();\nworkspacePkg.dependencies[\"@t3-oss/env-core\"] = version;\nawait Bun.write(\"package.json\", JSON.stringify(workspacePkg, null, 2));\n"
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.5908203125,
          "content": "{\n  \"compilerOptions\": {\n    /* Base Options: */\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"target\": \"es2022\",\n    \"allowJs\": true,\n    \"resolveJsonModule\": true,\n    \"moduleDetection\": \"force\",\n    \"isolatedModules\": true,\n\n    /* Strictness */\n    \"strict\": true,\n    // \"noUncheckedIndexedAccess\": true,\n    \"checkJs\": true,\n\n    /* Bundled projects */\n    \"lib\": [\"dom\", \"dom.iterable\", \"ES2022\"],\n    \"noEmit\": true,\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"jsx\": \"preserve\",\n    \"incremental\": true\n  },\n  \"include\": [\"*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n"
        },
        {
          "name": "turbo.json",
          "type": "blob",
          "size": 0.53125,
          "content": "{\n  \"$schema\": \"https://turborepo.org/schema.json\",\n  \"experimentalUI\": true,\n  \"pipeline\": {\n    \"topo\": {\n      \"dependsOn\": [\"^topo\"]\n    },\n    \"dev\": {\n      \"cache\": false,\n      \"persistent\": true\n    },\n    \"build\": {\n      \"dependsOn\": [\"^build\"],\n      \"outputs\": [\"dist/**\", \".next/**\", \".nuxt\"]\n    },\n    \"lint\": { \"cache\": false },\n    \"lint:fix\": { \"cache\": false },\n    \"test\": {\n      \"dependsOn\": [\"build\"],\n      \"outputs\": []\n    },\n    \"typecheck\": {\n      \"dependsOn\": [\"^topo\", \"^build\"],\n      \"outputs\": []\n    }\n  }\n}\n"
        }
      ]
    }
  ]
}