{
  "metadata": {
    "timestamp": 1736563625500,
    "page": 106,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "auth0/express-jwt",
      "stars": 4491,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 0.3330078125,
          "content": "\n{\n  \"root\": true,\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\n    \"@typescript-eslint\"\n  ],\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/eslint-recommended\",\n    \"plugin:@typescript-eslint/recommended\"\n  ],\n  \"rules\": {\n    \"@typescript-eslint/no-namespace\": \"off\"\n  },\n  \"ignorePatterns\": [\"*.js\"]\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.048828125,
          "content": ".DS_Store\nnode_modules/*\ndist/*\npackage-lock.json\n"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.0390625,
          "content": "{\n  \"tabWidth\": 2,\n  \"useTabs\": false\n}\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.078125,
          "content": "language: \"node_js\"\nbefore_install: npm i -g npm@2\nnode_js:\n  - 8\n  - 10\n  - 12\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 8.7353515625,
          "content": "# Change Log\n\nAll notable changes to this project will be documented in this file starting from version **v4.0.0**.\nThis project adheres to [Semantic Versioning](http://semver.org/).\n\n## 8.3.0 - 2023-01-04\n\n- requestProperty support for nested properties ([bbd3606ce68da2602733d6e4ac32564570753ca1](https://github.com/auth0/express-jwt/commit/bbd3606ce68da2602733d6e4ac32564570753ca1))\n- Update Typescript instructions in Readme.MD ([3c1d5cf8a08a6afbcfc78640b8cdb26fac8002ca](https://github.com/auth0/express-jwt/commit/3c1d5cf8a08a6afbcfc78640b8cdb26fac8002ca))\n\n## 8.2.1 - 2022-12-26\n\n- add secret rotation example in readme. close #310 ([0000a44ed58aac97798007af19b0324f28acc436](https://github.com/auth0/express-jwt/commit/0000a44ed58aac97798007af19b0324f28acc436)), closes [#310](https://github.com/auth0/express-jwt/issues/310)\n- update @types/jsonwebtoken and fix deps in package-lock ([2322a9b67a5b5c716f953a53a0bb4bbc696d0a11](https://github.com/auth0/express-jwt/commit/2322a9b67a5b5c716f953a53a0bb4bbc696d0a11))\n\n## 8.2.0 - 2022-12-22\n\n- add an optional handler for expired tokens. closes #6048 ([ca6c90ccbb4b61b91f417a5dfa56f0b931b81528](https://github.com/auth0/express-jwt/commit/ca6c90ccbb4b61b91f417a5dfa56f0b931b81528)), closes [#6048](https://github.com/auth0/express-jwt/issues/6048)\n\n## 8.1.0 - 2022-12-22\n\n- update type to match jwks-rsa ([bcad8af9cad82b3777cc38d1c05864a35f82bc53](https://github.com/auth0/express-jwt/commit/bcad8af9cad82b3777cc38d1c05864a35f82bc53))\n- feat: export middleware options type. closes #308 ([25a30f0d50c02cc75ab17b09f3592e76e09f9666](https://github.com/auth0/express-jwt/commit/25a30f0d50c02cc75ab17b09f3592e76e09f9666)), closes [#308](https://github.com/auth0/express-jwt/issues/308)\n\n## 8.0.0 - 2022-12-22\n\n- Upgrade jsonwebtoken to v9. https://github.com/advisories/GHSA-27h2-hvpr-p74q .\n\n## 7.7.3 - 2022-05-30\n\n- Fix tsc build error for express-unless ([e1fe1d264bc5363e008d23fea9d8c5d2ac0d8198](https://github.com/auth0/express-jwt/commit/e1fe1d264bc5363e008d23fea9d8c5d2ac0d8198))\n- Remove esModuleInterop and fix assert import in tests ([9ccf0cfd6aaa4cc61fce2f8ccdb961c4b0358201](https://github.com/auth0/express-jwt/commit/9ccf0cfd6aaa4cc61fce2f8ccdb961c4b0358201))\n\n## 7.7.2 - 2022-05-19\n\n- fix instaceof comparison for UnauthorizedError. closes #292 ([6c87fe401ecba868feda1ffa530082c7c539321a](https://github.com/auth0/express-jwt/commit/6c87fe401ecba868feda1ffa530082c7c539321a)), closes [#292](https://github.com/auth0/express-jwt/issues/292)\n- update changelog ([b1344fa7f6f9dd3d27115a9107b3ef4323733895](https://github.com/auth0/express-jwt/commit/b1344fa7f6f9dd3d27115a9107b3ef4323733895))\n\n## 7.7.1 - 2022-05-13\n\n- fix readme and package-lock ([7a02ca76c5d7842cfa8b256dcc89dcef1ffbcdc1](https://github.com/auth0/express-jwt/commit/7a02ca76c5d7842cfa8b256dcc89dcef1ffbcdc1))\n- build(deps): required runtime types ([f3f5af5c214241b4f92b91c49db8586ec20e4526](https://github.com/auth0/express-jwt/commit/f3f5af5c214241b4f92b91c49db8586ec20e4526))\n- docs: fix tiny typo ([07e771857489b6344a8dc457069d040a76e84230](https://github.com/auth0/express-jwt/commit/07e771857489b6344a8dc457069d040a76e84230))\n\n## 7.7.0 - 2022-05-06\n\n- deprecate ExpressJwtRequest in favor of Request with optional auth, closes #284 ([de169def56f98f4237741aa6755d0c5e248bd561](https://github.com/auth0/express-jwt/commit/de169def56f98f4237741aa6755d0c5e248bd561)), closes [#284](https://github.com/auth0/express-jwt/issues/284)\n\n## 7.6.2 - 2022-05-02\n\n- remove undefined from algorhitms fix #285 ([587238bd0ad7a59f784daf9f626b9bf9abc7e029](https://github.com/auth0/express-jwt/commit/587238bd0ad7a59f784daf9f626b9bf9abc7e029)), closes [#285](https://github.com/auth0/express-jwt/issues/285)\n\n## 7.6.1 - 2022-05-02\n\n- add note about @types/jsonwebtoken in readme ([03c8419d6fc78c9029a7b474d3aede7f94e80121](https://github.com/auth0/express-jwt/commit/03c8419d6fc78c9029a7b474d3aede7f94e80121))\n- make algorithms a required parameter in types. closes #285 ([097a1df0d7ba511afce9578e4cf45bca2589b253](https://github.com/auth0/express-jwt/commit/097a1df0d7ba511afce9578e4cf45bca2589b253)), closes [#285](https://github.com/auth0/express-jwt/issues/285)\n- update changelog ([9d0f02debb7a3db83edbc9f9b4b6d46993e6a4f4](https://github.com/auth0/express-jwt/commit/9d0f02debb7a3db83edbc9f9b4b6d46993e6a4f4))\n\n## 7.6.0 - 2022-05-02\n\n- add ExpressJwtRequestUnrequired to the readme ([3890f53f87b0a84dccaafd8de5a43d3c1dfeae89](https://github.com/auth0/express-jwt/commit/3890f53f87b0a84dccaafd8de5a43d3c1dfeae89))\n- add SecretCallback[Long] back for backward compatibility ([c24078e285908cad1c2ac0e63482a75ebf7d7328](https://github.com/auth0/express-jwt/commit/c24078e285908cad1c2ac0e63482a75ebf7d7328))\n- update changelog ([d3a8e80dec3a6c261f840ad763487a16a47bbc4b](https://github.com/auth0/express-jwt/commit/d3a8e80dec3a6c261f840ad763487a16a47bbc4b))\n\n## 7.5.2 - 2022-04-27\n\n- export another type for credentialsRequired: false / ExpressJwtRequestUnrequired ([1bdb6f3d0cc5f61b7a7b097f700d20cb337d4bef](https://github.com/auth0/express-jwt/commit/1bdb6f3d0cc5f61b7a7b097f700d20cb337d4bef))\n\n## 7.5.1 - 2022-04-27\n\n- make req.auth optional in the ExpressJwtRequest type ([496fda4a0a20292ca70055b6ab8fdf50414ffa2b](https://github.com/auth0/express-jwt/commit/496fda4a0a20292ca70055b6ab8fdf50414ffa2b))\n- update changelog ([727b57ddfec1f1c5ee4e16cb335ad1ae5a3c131f](https://github.com/auth0/express-jwt/commit/727b57ddfec1f1c5ee4e16cb335ad1ae5a3c131f))\n\n## 7.5.0 - 2022-04-25\n\n- export TokenGetter ([eb7479b834fb0e052ffad4279394ce353bb13770](https://github.com/auth0/express-jwt/commit/eb7479b834fb0e052ffad4279394ce353bb13770))\n- improve readme and some types. Closes #283 ([1a67f69c8781179d3ce7e5f3de8ece40d31c1772](https://github.com/auth0/express-jwt/commit/1a67f69c8781179d3ce7e5f3de8ece40d31c1772)), closes [#283](https://github.com/auth0/express-jwt/issues/283)\n- restore requestProperty ([bf143d07497046b3e7921d3dd4bcbc18e2daeb67](https://github.com/auth0/express-jwt/commit/bf143d07497046b3e7921d3dd4bcbc18e2daeb67))\n\n## 7.4.3 - 2022-04-21\n\n- improve readme ([bd2515bec698604c645decd5be93e4f401263662](https://github.com/auth0/express-jwt/commit/bd2515bec698604c645decd5be93e4f401263662))\n\n## 7.4.2 - 2022-04-20\n\n- include '/dist' in package, closes #280 ([cf2665d5581e76ed5742e7c2f34b8d05f91cfd18](https://github.com/auth0/express-jwt/commit/cf2665d5581e76ed5742e7c2f34b8d05f91cfd18)), closes [#280](https://github.com/auth0/express-jwt/issues/280)\n\n## 7.4.1 - 2022-04-20\n\n- fix readme definition for revoked and secret callbacks ([9015cf729cfbbf1b28a9646cccbf26d523dce1de](https://github.com/auth0/express-jwt/commit/9015cf729cfbbf1b28a9646cccbf26d523dce1de))\n- update changelog ([05d7a78baaf76a2a881a95666b0ec7349729d957](https://github.com/auth0/express-jwt/commit/05d7a78baaf76a2a881a95666b0ec7349729d957))\n\n## 7.4.0 - 2022-04-20\n\n- handle authorization header in cors when is upper cased. fixes #180, #173 ([ab0ee806416e3a5a48ef8a1017a298e1a666b17a](https://github.com/auth0/express-jwt/commit/ab0ee806416e3a5a48ef8a1017a298e1a666b17a)), closes [#180](https://github.com/auth0/express-jwt/issues/180) [#173](https://github.com/auth0/express-jwt/issues/173)\n\n## 7.3.0 - 2022-04-20\n\n- add support for capital Authorization header. closes #200 ([6c0698b513e11ff1d4b152e070a627f5092be801](https://github.com/auth0/express-jwt/commit/6c0698b513e11ff1d4b152e070a627f5092be801)), closes [#200](https://github.com/auth0/express-jwt/issues/200)\n\n## 7.2.0 - 2022-04-20\n\n- Add example on how to enable jwt for specific path ([280511342522f11a90da93187a44af1a1b3cf5eb](https://github.com/auth0/express-jwt/commit/280511342522f11a90da93187a44af1a1b3cf5eb))\n- Fix link to auth0.com ([b04cb9dea9a9fb2dc999a8dbf30ba6f204f50d15](https://github.com/auth0/express-jwt/commit/b04cb9dea9a9fb2dc999a8dbf30ba6f204f50d15))\n- remove travis badge ([a854342c28f7186ec70e298124b4d650a26767b2](https://github.com/auth0/express-jwt/commit/a854342c28f7186ec70e298124b4d650a26767b2))\n- Update docs to continue error handling on mismatch ([627b358d07b19d299964a5ef18a772db9b6426e2](https://github.com/auth0/express-jwt/commit/627b358d07b19d299964a5ef18a772db9b6426e2))\n- Update README.md ([8d7af267189a49f42b88807d236647bd7398fde3](https://github.com/auth0/express-jwt/commit/8d7af267189a49f42b88807d236647bd7398fde3))\n\n## 7.1.0 - 2022-04-20\n\n- add support for async, closes #249 ([72236ec1cfb0e7847351c83908be1d84141e30f1](https://github.com/auth0/express-jwt/commit/72236ec1cfb0e7847351c83908be1d84141e30f1)), closes [#249](https://github.com/auth0/express-jwt/issues/249)\n- update changelog ([cb50ed43b2de9ae9be8643e7834640fa912ef367](https://github.com/auth0/express-jwt/commit/cb50ed43b2de9ae9be8643e7834640fa912ef367))\n\n## 7.0.0 - 2022-04-20\n\n- Convert the project to typescript and improve typescript ([2b43ccb7252f2cc2fb3c2655a252fd7ae58ce0dd](https://github.com/auth0/express-jwt/commit/2b43ccb7252f2cc2fb3c2655a252fd7ae58ce0dd))\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0908203125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Auth0, Inc. <support@auth0.com> (http://auth0.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.978515625,
          "content": "# express-jwt\n\nThis module provides Express middleware for validating JWTs ([JSON Web Tokens](https://jwt.io)) through the [jsonwebtoken](https://github.com/auth0/node-jsonwebtoken/) module. The decoded JWT payload is available on the request object.\n\n## Install\n\n```\n$ npm install express-jwt\n```\n\n## API\n\n`expressjwt(options)`\n\nOptions has the following parameters:\n\n- `secret: jwt.Secret | GetVerificationKey` (required): The secret as a string or a function to retrieve the secret.\n- `getToken?: TokenGetter` (optional): A function that receives the express `Request` and returns the token, by default it looks in the `Authorization` header.\n- `isRevoked?: IsRevoked` (optional): A function to verify if a token is revoked.\n- `onExpired?: ExpirationHandler` (optional): A function to handle expired tokens.\n- `credentialsRequired?: boolean` (optional): If its false, continue to the next middleware if the request does not contain a token instead of failing, defaults to true.\n- `requestProperty?: string` (optional): Name of the property in the request object where the payload is set. Default to `req.auth`.\n- Plus... all the options available in the [jsonwebtoken verify function](https://github.com/auth0/node-jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback).\n\nThe available functions have the following interface:\n\n- `GetVerificationKey = (req: express.Request, token: jwt.Jwt | undefined) => Promise<jwt.Secret>;`\n- `IsRevoked = (req: express.Request, token: jwt.Jwt | undefined) => Promise<boolean>;`\n- `TokenGetter = (req: express.Request) => string | Promise<string> | undefined;`\n\n## Usage\n\nBasic usage using an HS256 secret:\n\n```javascript\nvar { expressjwt: jwt } = require(\"express-jwt\");\n// or ES6\n// import { expressjwt, ExpressJwtRequest } from \"express-jwt\";\n\napp.get(\n  \"/protected\",\n  jwt({ secret: \"shhhhhhared-secret\", algorithms: [\"HS256\"] }),\n  function (req, res) {\n    if (!req.auth.admin) return res.sendStatus(401);\n    res.sendStatus(200);\n  }\n);\n```\n\nThe decoded JWT payload is available on the request via the `auth` property.\n\n> The default behavior of the module is to extract the JWT from the `Authorization` header as an [OAuth2 Bearer token](https://oauth.net/2/bearer-tokens/).\n\n### Required Parameters\n\nThe `algorithms` parameter is required to prevent potential downgrade attacks when providing third party libraries as **secrets**.\n\n:warning: **Do not mix symmetric and asymmetric (ie HS256/RS256) algorithms**: Mixing algorithms without further validation can potentially result in downgrade vulnerabilities.\n\n```javascript\njwt({\n  secret: \"shhhhhhared-secret\",\n  algorithms: [\"HS256\"],\n  //algorithms: ['RS256']\n});\n```\n\n### Additional Options\n\nYou can specify audience and/or issuer as well, which is highly recommended for security purposes:\n\n```javascript\njwt({\n  secret: \"shhhhhhared-secret\",\n  audience: \"http://myapi/protected\",\n  issuer: \"http://issuer\",\n  algorithms: [\"HS256\"],\n});\n```\n\n> If the JWT has an expiration (`exp`), it will be checked.\n\nIf you are using a base64 URL-encoded secret, pass a `Buffer` with `base64` encoding as the secret instead of a string:\n\n```javascript\njwt({\n  secret: Buffer.from(\"shhhhhhared-secret\", \"base64\"),\n  algorithms: [\"RS256\"],\n});\n```\n\nTo only protect specific paths (e.g. beginning with `/api`), use [express router](https://expressjs.com/en/4x/api.html#app.use) call `use`, like so:\n\n```javascript\napp.use(\"/api\", jwt({ secret: \"shhhhhhared-secret\", algorithms: [\"HS256\"] }));\n```\n\nOr, the other way around, if you want to make some paths unprotected, call `unless` like so.\n\n```javascript\napp.use(\n  jwt({\n    secret: \"shhhhhhared-secret\",\n    algorithms: [\"HS256\"],\n  }).unless({ path: [\"/token\"] })\n);\n```\n\nThis is especially useful when applying to multiple routes. In the example above, `path` can be a string, a regexp, or an array of any of those.\n\n> For more details on the `.unless` syntax including additional options, please see [express-unless](https://github.com/jfromaniello/express-unless).\n\nThis module also support tokens signed with public/private key pairs. Instead of a secret, you can specify a Buffer with the public key\n\n```javascript\nvar publicKey = fs.readFileSync(\"/path/to/public.pub\");\njwt({ secret: publicKey, algorithms: [\"RS256\"] });\n```\n\n### Customizing Token Location\n\nA custom function for extracting the token from a request can be specified with\nthe `getToken` option. This is useful if you need to pass the token through a\nquery parameter or a cookie. You can throw an error in this function and it will\nbe handled by `express-jwt`.\n\n```javascript\napp.use(\n  jwt({\n    secret: \"hello world !\",\n    algorithms: [\"HS256\"],\n    credentialsRequired: false,\n    getToken: function fromHeaderOrQuerystring(req) {\n      if (\n        req.headers.authorization &&\n        req.headers.authorization.split(\" \")[0] === \"Bearer\"\n      ) {\n        return req.headers.authorization.split(\" \")[1];\n      } else if (req.query && req.query.token) {\n        return req.query.token;\n      }\n      return null;\n    },\n  })\n);\n```\n\n### Retrieve key dynamically\n\nIf you need to obtain the key dynamically from other sources, you can pass a function in the `secret` parameter with the following parameters:\n\n- `req` (`Object`) - The express `request` object.\n- `token` (`Object`) - An object with the JWT payload and headers.\n\nFor example, if the secret varies based on the [issuer](http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#issDef):\n\n```javascript\nvar jwt = require(\"express-jwt\");\nvar data = require(\"./data\");\nvar utilities = require(\"./utilities\");\n\nvar getSecret = async function (req, token) {\n  const issuer = token.payload.iss;\n  const tenant = await data.getTenantByIdentifier(issuer);\n  if (!tenant) {\n    throw new Error(\"missing_secret\");\n  }\n  return utilities.decrypt(tenant.secret);\n};\n\napp.get(\n  \"/protected\",\n  jwt({ secret: getSecret, algorithms: [\"HS256\"] }),\n  function (req, res) {\n    if (!req.auth.admin) return res.sendStatus(401);\n    res.sendStatus(200);\n  }\n);\n```\n\n### Secret rotation\n\nThe getSecret callback could also be used in cases where the same issuer might issue tokens with different keys at certain point:\n\n```js\nvar getSecret = async function (req, token) {\n  const { iss } = token.payload;\n  const { kid } = token.header;\n  // get the verification key by a given key-id and issuer.\n  return verificationKey;\n};\n```\n\n### Revoked tokens\n\nIt is possible that some tokens will need to be revoked so they cannot be used any longer. You can provide a function as the `isRevoked` option. The signature of the function is `function(req, payload, done)`:\n\n- `req` (`Object`) - The express `request` object.\n- `token` (`Object`) - An object with the JWT payload and headers.\n\nFor example, if the `(iss, jti)` claim pair is used to identify a JWT:\n\n```javascript\nconst jwt = require(\"express-jwt\");\nconst data = require(\"./data\");\n\nconst isRevokedCallback = async (req, token) => {\n  const issuer = token.payload.iss;\n  const tokenId = token.payload.jti;\n  const token = await data.getRevokedToken(issuer, tokenId);\n  return token !== \"undefined\";\n};\n\napp.get(\n  \"/protected\",\n  jwt({\n    secret: \"shhhhhhared-secret\",\n    algorithms: [\"HS256\"],\n    isRevoked: isRevokedCallback,\n  }),\n  function (req, res) {\n    if (!req.auth.admin) return res.sendStatus(401);\n    res.sendStatus(200);\n  }\n);\n```\n\n### Handling expired tokens\n\nYou can handle expired tokens as follows:\n\n```javascript\n  jwt({\n    secret: \"shhhhhhared-secret\",\n    algorithms: [\"HS256\"],\n    onExpired: async (req, err) => {\n      if (new Date() - err.inner.expiredAt < 5000) { return;}\n      throw err;\n    },,\n  })\n```\n\n### Error handling\n\nThe default behavior is to throw an error when the token is invalid, so you can add your custom logic to manage unauthorized access as follows:\n\n```javascript\napp.use(function (err, req, res, next) {\n  if (err.name === \"UnauthorizedError\") {\n    res.status(401).send(\"invalid token...\");\n  } else {\n    next(err);\n  }\n});\n```\n\nYou might want to use this module to identify registered users while still providing access to unregistered users. You can do this by using the option `credentialsRequired`:\n\n```javascript\napp.use(\n  jwt({\n    secret: \"hello world !\",\n    algorithms: [\"HS256\"],\n    credentialsRequired: false,\n  })\n);\n```\n\n## Typescript\n\nA `Request` type is provided from `express-jwt`, which extends `express.Request` with the `auth` property. It could be aliased, like how `JWTRequest` is below.\n\n```typescript\nimport { expressjwt, Request as JWTRequest } from \"express-jwt\";\n\napp.get(\n  \"/protected\",\n  expressjwt({ secret: \"shhhhhhared-secret\", algorithms: [\"HS256\"] }),\n  function (req: JWTRequest, res: express.Response) {\n    if (!req.auth?.admin) return res.sendStatus(401);\n    res.sendStatus(200);\n  }\n);\n```\n\n## Migration from v6\n\n1. The middleware function is now available as a named import rather than a default one: import { expressjwt } from 'express-jwt'\n2. The decoded JWT payload is now available as req.auth rather than req.user\n3. The `secret` function had `(req, header, payload, cb)`, now it can return a promise and receives `(req, token)`. `token` has `header` and `payload`.\n4. The `isRevoked` function had `(req, payload, cb)`, now it can return a promise and receives `(req, token)`. `token` has `header` and `payload`.\n\n## Related Modules\n\n- [jsonwebtoken](https://github.com/auth0/node-jsonwebtoken) — JSON Web Token sign and verification\n- [express-jwt-permissions](https://github.com/MichielDeMey/express-jwt-permissions) - Permissions middleware for JWT tokens\n\n## Tests\n\n```\n$ npm install\n$ npm test\n```\n\n## Contributors\n\nCheck them out [here](https://github.com/auth0/express-jwt/graphs/contributors)\n\n## Issue Reporting\n\nIf you have found a bug or if you have a feature request, please report them at this repository issues section. Please do not report security vulnerabilities on the public GitHub issue tracker. The [Responsible Disclosure Program](https://auth0.com/whitehat) details the procedure for disclosing security issues.\n\n## Author\n\n[Auth0](https://auth0.com)\n\n## License\n\nThis project is licensed under the MIT license. See the [LICENSE](LICENSE) file for more info.\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "opslevel.yml",
          "type": "blob",
          "size": 0.064453125,
          "content": "---\nversion: 1\nrepository:\n  owner: iam_protocols\n  tier:\n  tags:\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.38671875,
          "content": "{\n  \"name\": \"express-jwt\",\n  \"version\": \"8.5.1\",\n  \"description\": \"JWT authentication middleware.\",\n  \"keywords\": [\n    \"auth\",\n    \"authn\",\n    \"authentication\",\n    \"authz\",\n    \"authorization\",\n    \"http\",\n    \"jwt\",\n    \"token\",\n    \"oauth\",\n    \"express\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/auth0/express-jwt.git\"\n  },\n  \"bugs\": {\n    \"url\": \"http://github.com/auth0/express-jwt/issues\"\n  },\n  \"author\": {\n    \"name\": \"Matias Woloski\",\n    \"email\": \"matias@auth0.com\",\n    \"url\": \"https://www.auth0.com/\"\n  },\n  \"license\": \"MIT\",\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"files\": [\n    \"README.md\",\n    \"/dist\"\n  ],\n  \"dependencies\": {\n    \"@types/jsonwebtoken\": \"^9\",\n    \"express-unless\": \"^2.1.3\",\n    \"jsonwebtoken\": \"^9.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/express\": \"^4.17.16\",\n    \"@types/mocha\": \"^9.1.0\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.15.0\",\n    \"@typescript-eslint/parser\": \"^5.15.0\",\n    \"conventional-changelog\": \"^3.1.25\",\n    \"eslint\": \"^8.11.0\",\n    \"express\": \"^4.17.3\",\n    \"mocha\": \"^10.2.0\",\n    \"prettier\": \"^2.6.0\",\n    \"ts-node\": \"^10.7.0\",\n    \"typescript\": \"^4.6.2\"\n  },\n  \"engines\": {\n    \"node\": \">= 8.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"rm -rf dist ; tsc\",\n    \"prepare\": \"npm run build\",\n    \"test\": \"mocha --reporter spec --require ts-node/register test/**\",\n    \"lint\": \"eslint --fix --ext .ts ./src\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.18359375,
          "content": "{\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\",\n    \"allowJs\": true,\n    \"target\": \"es5\",\n    \"declaration\": true,\n    \"esModuleInterop\": false\n  },\n  \"include\": [\n    \"./src/**/*\"\n  ]\n}\n"
        }
      ]
    }
  ]
}