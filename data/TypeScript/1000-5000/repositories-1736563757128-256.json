{
  "metadata": {
    "timestamp": 1736563757128,
    "page": 256,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cosmiconfig/cosmiconfig",
      "stars": 3976,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.076171875,
          "content": ".eslintrc.js\nnode_modules\ncoverage\ndist\npackage-lock.json\ntsconfig.tsbuildinfo"
        },
        {
          "name": ".eslintrc.js",
          "type": "blob",
          "size": 5.4990234375,
          "content": "'use strict';\n\n// first node 8.x LTS release\nconst supportedNodeVersion = '8.9';\nconst allExtensions = ['.js', '.jsx', '.ts', '.tsx', '.mjs', '.json'];\n\nmodule.exports = {\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    sourceType: 'module',\n    project: './tsconfig.base.json',\n  },\n  extends: [\n    'eslint-config-davidtheclark-node',\n    'plugin:@typescript-eslint/eslint-recommended',\n    'plugin:@typescript-eslint/recommended',\n    // This is making an annoying amount of unnecessary noise.\n    // If anybody would like to turn it back on, PR welcome.\n    // 'plugin:@typescript-eslint/recommended-requiring-type-checking',\n    'plugin:import/errors',\n    'plugin:import/warnings',\n    'plugin:import/typescript',\n    'plugin:vitest/recommended',\n    'prettier',\n  ],\n  plugins: ['vitest', '@typescript-eslint', 'import'],\n  rules: {\n    'no-var': 'off',\n    'prefer-const': 'off',\n    'prefer-arrow-callback': 'off',\n    'func-names': ['error', 'always'],\n    'prefer-template': 'error',\n    'no-prototype-builtins': 'error',\n    'no-use-before-define': 'off',\n    'object-shorthand': [\n      'error',\n      'always',\n      { avoidExplicitReturnArrows: true },\n    ],\n\n    /**\n     * eslint-plugin-typescript\n     */\n    '@typescript-eslint/explicit-function-return-type': [\n      'error',\n      {\n        allowTypedFunctionExpressions: true,\n      },\n    ],\n    '@typescript-eslint/no-use-before-define': 'off',\n    '@typescript-eslint/array-type': ['error', { default: 'generic' }],\n\n    // requires type information rules\n    '@typescript-eslint/await-thenable': 'error',\n    '@typescript-eslint/no-floating-promises': 'error',\n    '@typescript-eslint/no-for-in-array': 'error',\n    '@typescript-eslint/no-unnecessary-qualifier': 'error',\n    '@typescript-eslint/no-unnecessary-type-assertion': 'error',\n    '@typescript-eslint/prefer-includes': 'error',\n    '@typescript-eslint/prefer-namespace-keyword': 'error',\n    // '@typescript-eslint/prefer-readonly': 'error',\n    '@typescript-eslint/prefer-regexp-exec': 'error',\n    '@typescript-eslint/prefer-string-starts-ends-with': 'error',\n    '@typescript-eslint/promise-function-async': ['error', { allowAny: true }],\n    '@typescript-eslint/require-array-sort-compare': 'error',\n    '@typescript-eslint/restrict-plus-operands': 'error',\n    // '@typescript-eslint/strict-boolean-expressions': 'error',\n    '@typescript-eslint/unbound-method': 'error',\n\n    // rules not in recommended\n    '@typescript-eslint/ban-ts-ignore': 'off', // maybe enable?\n    '@typescript-eslint/member-ordering': 'off', // maybe enable?\n    '@typescript-eslint/no-empty-function': 'error',\n    '@typescript-eslint/no-extraneous-class': 'error',\n    '@typescript-eslint/no-require-imports': 'error',\n    '@typescript-eslint/no-this-alias': 'error',\n    '@typescript-eslint/no-useless-constructor': 'error',\n    '@typescript-eslint/prefer-for-of': 'error',\n    '@typescript-eslint/prefer-function-type': 'error',\n    '@typescript-eslint/unified-signatures': 'error',\n\n    /**\n     * eslint-plugin-node\n     */\n    'node/no-unpublished-require': 'off',\n    'node/no-unsupported-features': 'off',\n    'node/no-unsupported-features/es-builtins': 'off',\n    'node/no-unsupported-features/es-syntax': 'off',\n    'node/no-unsupported-features/node-builtins': 'off',\n    // Redundant with import/no-extraneous-dependencies\n    'node/no-extraneous-import': 'off',\n    'node/no-extraneous-require': 'off',\n    // Redundant with import/no-unresolved\n    'node/no-missing-import': 'off',\n    'node/no-missing-require': 'off',\n\n    /**\n     * eslint-plugin-import\n     */\n    'import/no-default-export': 'error',\n    'import/no-named-export': 'off',\n    'import/prefer-default-export': 'off',\n\n    /**\n     * eslint-plugin-vitest\n     */\n    'vitest/consistent-test-it': ['error', { fn: 'test' }],\n    'vitest/valid-title': 'error',\n    'vitest/no-done-callback': 'error',\n    // Many tests make assertions indirectly in a way the plugin\n    // does not understand.\n    'vitest/expect-expect': 'off',\n    // This is more performant.\n    '@typescript-eslint/return-await': ['error', 'always'],\n    // No bikeshedding.\n    'arrow-parens': ['error', 'always'],\n  },\n  settings: {\n    node: {\n      convertPath: {\n        'src/**/*.{js,ts}': ['^src/(.+?)\\\\.(js|ts)$', 'dist/$1.js'],\n        'src/**/.*.{js,ts}': ['^src/(.+?)\\\\.(js|ts)$', 'dist/$1.js'],\n      },\n      tryExtensions: allExtensions,\n    },\n    'import/resolver': {\n      node: {\n        extensions: allExtensions,\n      },\n      typescript: {},\n    },\n    'import/extensions': allExtensions,\n  },\n  overrides: [\n    {\n      files: ['*.test.{js,ts}', '.*.test.{js,ts}'],\n      rules: {\n        '@typescript-eslint/ban-ts-comment': 'off',\n        '@typescript-eslint/no-var-requires': 'off',\n        '@typescript-eslint/no-require-imports': 'off',\n        '@typescript-eslint/explicit-function-return-type': 'off',\n        '@typescript-eslint/no-explicit-any': 'off',\n      },\n    },\n    {\n      files: ['*.js', '.*.js'],\n      excludedFiles: ['*/**', '*/.**'],\n      parserOptions: {\n        sourceType: 'script',\n      },\n      rules: {\n        strict: ['error', 'safe'],\n\n        'node/no-unpublished-require': 'off',\n        'node/no-unsupported-features/es-builtins': [\n          'error',\n          { version: supportedNodeVersion },\n        ],\n        'node/no-unsupported-features/es-syntax': [\n          'error',\n          { version: supportedNodeVersion },\n        ],\n        'node/no-unsupported-features/node-builtins': [\n          'error',\n          { version: supportedNodeVersion },\n        ],\n      },\n    },\n  ],\n};\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.064453125,
          "content": "node_modules\ncoverage\ndist\npackage-lock.json\ntsconfig.tsbuildinfo\n"
        },
        {
          "name": ".husky",
          "type": "tree",
          "content": null
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.076171875,
          "content": ".eslintrc.js\nnode_modules\ncoverage\ndist\npackage-lock.json\ntsconfig.tsbuildinfo"
        },
        {
          "name": ".prettierrc.cjs",
          "type": "blob",
          "size": 0.1220703125,
          "content": "module.exports = {\n  trailingComma: 'all',\n  arrowParens: 'always',\n  singleQuote: true,\n  printWidth: 80,\n  tabWidth: 2,\n};\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 12.2626953125,
          "content": "# Changelog\n\n## 9.0.0\n\n- Added `searchStrategy` option:\n  - The `none` value means that cosmiconfig does not traverse any directories upwards.\n    - **Breaking change:** This is the default value if you don't pass a `stopDir` option, which means that cosmiconfig no longer traverses directories by default, and instead just looks in the current working directory.\n      - If you want to achieve maximum backwards compatibility without adding an explicit `stopDir`, add the `searchStrategy: 'global'` option.\n  - The `project` value means that cosmiconfig traverses upwards until it finds a `package.json` (or `.yaml`) file.\n  - The `global` value means that cosmiconfig traverses upwards until the passed `stopDir`, or your home directory if no `stopDir` is given.\n- **Breaking change:** Meta config files (i.e. `config.js` and similar) are not looked for in the current working directory anymore. Instead, it looks in the `.config` subfolder.\n- **Breaking change:** When defining `searchPlaces` in a meta config file, the tool-defined `searchPlaces` are merged into this. Users may specify `mergeSearchPlaces: false` to disable this.\n- Added support for a special `$import` key which will import another configuration file\n  - The imported file will act as a base file - all properties from that file will be applied to the configuration, but can be overridden by the importing file\n  - For more information, read the [import section of the README](README.md#imports)\n- Added searching in OS conventional folders (XDG compatible on Linux, %APPDATA% on Windows, Library/Preferences on macOS) for `searchStrategy: 'global'`\n- Fixed crash when trying to load a file that is not readable due to file system permissions\n- Fixed wrong ERR_REQUIRE_ESM error being thrown when there is an issue loading an ESM file\n\n## 8.3.6\n\n- Ignore search place if accessing it causes ENOTDIR (i.e. if access of a subpath of a file is attempted)\n\n## 8.3.5\n\n- Fixed regression in transform option\n\n## 8.3.4\n\n- Fixed crash in older node versions\n\n## 8.3.3\n\n- Added back node 14 compat to package.json\n\n## 8.3.2\n\n- Fixed some issues with TypeScript config loading\n\n## 8.3.1\n\n- Fixed crash when `stopDir` was given but undefined\n\n## 8.3.0\n\n- Add support for TypeScript configuration files\n\n## 8.2.0\n\n- Add support for ECMAScript modules (ESM) to the [*asynchronous* API](./README.md#asynchronous-api). End users running Node versions that support ESM can provide `.mjs` files, or `.js` files whose nearest parent `package.json` file contains `\"type\": \"module\"`.\n  - `${moduleName}rc.mjs` and `${moduleName}.config.mjs` are included in the default `searchPlaces` of the asynchronous API.\n  - The [synchronous API](./README.md#synchronous-api) does not support ECMAScript modules, so does not look for `.mjs` files.\n  - To learn more, read [\"Loading JS modules\"](./README.md#loading-js-modules).\n\n## 8.1.3\n\n- Fixed: existence of meta config breaking default loaders\n\n## 8.1.2\n\n- Fixed: generation of TypeScript types going to the wrong output path\n\n## 8.1.1\n\n- Fixed: meta config overriding original options completely (now merges correctly)\n\n## 8.1.0\n\n- Added: always look at `.config.{yml,yaml,json,js,cjs}` file to configure cosmiconfig itself, and look for tool configuration in it using `packageProp` (similar to package.json)\n  - For more info on this, look at the [end user configuration section of the README](README.md#usage-for-end-users)\n\n## 8.0.0\n\n**No major breaking changes!** We dropped support for Node 10 and 12 -- which you're probably not using. And we swapped out the YAML parser -- which you probably won't notice.\n\n- **Breaking change:** Drop support for Node 10 and 12.\n\n- **Breaking change:** Use npm package [js-yaml](https://www.npmjs.com/package/js-yaml) to parse YAML instead of npm package [yaml](https://www.npmjs.com/package/yaml).\n\n- Added: Loader errors now include the path of the file that was tried to be loaded.\n\n## 7.1.0\n\n- Added: Additional default `searchPlaces` within a .config subdirectory (without leading dot in the file name)\n\n## 7.0.1\n\n- Fixed: If there was a directory that had the same name as a search place (e.g. \"package.json\"), we would try to read it as a file, which would cause an exception.\n\n## 7.0.0\n\n- **Breaking change:** Add `${moduleName}rc.cjs` and `${moduleName}.config.cjs` to the default `searchPlaces`, to support users of `\"type\": \"module\"` in recent versions of Node.\n- **Breaking change:** Drop support for Node 8. Now requires Node 10+.\n\n## 6.0.0\n\n- **Breaking change:** The package now has named exports. See examples below.\n\n- **Breaking change:** Separate async and sync APIs, accessible from different named exports. If you used `explorer.searchSync()` or `explorer.loadSync()`, you'll now create a sync explorer with `cosmiconfigSync()`, then use `explorerSync.search()` and `explorerSync.load()`.\n\n  ```js\n  // OLD: cosmiconfig v5\n  import cosmiconfig from 'cosmiconfig';\n\n  const explorer = cosmiconfig('example');\n  const searchAsyncResult = await explorer.search();\n  const loadAsyncResult = await explorer.load('./file/to/load');\n  const searchSyncResult = explorer.searchSync();\n  const loadSyncResult = explorer.loadSync('./file/to/load');\n\n  // NEW: cosmiconfig v6\n  import { cosmiconfig, cosmiconfigSync } from 'cosmiconfig';\n\n  const explorer = cosmiconfig('example');\n  const searchAsyncResult = await explorer.search();\n  const loadAsyncResult = await explorer.load('./file/to/load');\n\n  const explorerSync = cosmiconfigSync('example');\n  const searchSyncResult = explorerSync.search();\n  const loadSyncResult = explorerSync.load('./file/to/load');\n  ```\n\n- **Breaking change:** Remove support for Node 4 and 6. Requires Node 8+.\n\n- **Breaking change:** Use npm package [yaml](https://www.npmjs.com/package/yaml) to parse YAML instead of npm package [js-yaml](https://www.npmjs.com/package/js-yaml).\n\n- **Breaking change:** Remove `cosmiconfig.loaders` and add named export `defaultLoaders` that exports the default loaders used for each extension.\n\n  ```js\n  import { defaultLoaders } from 'cosmiconfig';\n\n  console.log(Object.entries(defaultLoaders));\n  // [\n  //   [ '.js', [Function: loadJs] ],\n  //   [ '.json', [Function: loadJson] ],\n  //   [ '.yaml', [Function: loadYaml] ],\n  //   [ '.yml', [Function: loadYaml] ],\n  //   [ 'noExt', [Function: loadYaml] ]\n  // ]\n  ```\n\n- Migrate from Flowtype to Typescript.\n\n- Lazy load all default loaders.\n\n## 5.2.1\n\n- Chore: Upgrade `js-yaml` to avoid npm audit warning.\n\n## 5.2.0\n\n- Added: `packageProp` values can be arrays of strings, to allow for property names that include periods. (This was possible before, but not documented or deliberately supported.)\n- Chore: Replaced the `lodash.get` dependency with a locally defined function.\n- Chore: Upgrade `js-yaml` to avoid npm audit warning.\n\n## 5.1.0\n\n- Added: `packageProp` values can include periods to describe paths to nested objects within `package.json`.\n\n## 5.0.7\n\n- Fixed: JS loader bypasses Node's `require` cache, fixing a bug where updates to `.js` config files would not load even when Cosmiconfig was told not to cache.\n\n## 5.0.6\n\n- Fixed: Better error message if the end user tries an extension Cosmiconfig is not configured to understand.\n\n## 5.0.5\n\n- Fixed: `load` and `loadSync` work with paths relative to `process.cwd()`.\n\n## 5.0.4\n\n- Fixed: `rc` files with `.js` extensions included in default `searchPlaces`.\n\n## 5.0.3\n\n- Docs: Minor corrections to documentation. *Released to update package documentation on npm*.\n\n## 5.0.2\n\n- Fixed: Allow `searchSync` and `loadSync` to load JS configuration files whose export is a Promise.\n\n## 5.0.1\n\nThe API has been completely revamped to increase clarity and enable a very wide range of new usage. **Please read the readme for all the details.**\n\nWhile the defaults remain just as useful as before — and you can still pass no options at all — now you can also do all kinds of wild and crazy things.\n\n- The `loaders` option allows you specify custom functions to derive config objects from files. Your loader functions could parse ES2015 modules or TypeScript, JSON5, even INI or XML. Whatever suits you.\n- The `searchPlaces` option allows you to specify exactly where cosmiconfig looks within each directory it searches.\n- The combination of `loaders` and `searchPlaces` means that you should be able to load pretty much any kind of configuration file you want, from wherever you want it to look.\n\nAdditionally, the overloaded `load()` function has been split up into several clear and focused functions:\n\n- `search()` now searches up the directory tree, and `load()` loads a configuration file that you don't need to search for.\n- The `sync` option has been replaced with separate synchronous functions: `searchSync()` and `loadSync()`.\n- `clearFileCache()` and `clearDirectoryCache()` have been renamed to `clearLoadCache()` and `clearSearchPath()` respectively.\n\nMore details:\n\n- The default JS loader uses `require`, instead of `require-from-string`. So you *could* use `require` hooks to control the loading of JS files (e.g. pass them through esm or Babel). In most cases it is probably preferable to use a custom loader.\n- The options `rc`, `js`, and `rcExtensions` have all been removed. You can accomplish the same and more with `searchPlaces`.\n- The default `searchPlaces` include `rc` files with extensions, e.g. `.thingrc.json`, `.thingrc.yaml`, `.thingrc.yml`. This is the equivalent of switching the default value of the old `rcExtensions` option to `true`.\n- The option `rcStrictJson` has been removed. To get the same effect, you can specify `noExt: cosmiconfig.loadJson` in your `loaders` object.\n- `packageProp` no longer accepts `false`. If you don't want to look in `package.json`, write a `searchPlaces` array that does not include it.\n- By default, empty files are ignored by `search()`. The new option `ignoreEmptySearchPlaces` allows you to load them, instead, in case you want to do something with empty files.\n- The option `configPath` has been removed. Just pass your filepaths directory to `load()`.\n- Removed the `format` option. Formats are now all handled via the file extensions specified in `loaders`.\n\n(If you're wondering with happened to 5.0.0 ... it was a silly publishing mistake.)\n\n## 4.0.0\n\n- Licensing improvement: updated `parse-json` from `3.0.0` to `4.0.0`(see [sindresorhus/parse-json#12][parse-json-pr-12]).\n- Changed: error message format for `JSON` parse errors(see [#101][pr-101]). If you were relying on the format of JSON-parsing error messages, this will be a breaking change for you.\n- Changed: set default for `searchPath` as `process.cwd()` in `explorer.load`.\n\n## 3.1.0\n\n- Added: infer format based on filePath\n\n## 3.0.1\n\n- Fixed: memory leak due to bug in `require-from-string`.\n- Added: for JSON files, append position to end of error message.\n\n## 3.0.0\n\n- Removed: support for loading config path using the `--config` flag. cosmiconfig will not parse command line arguments. Your application can parse command line arguments and pass them to cosmiconfig.\n- Removed: `argv` config option.\n- Removed: support for Node versions &lt; 4.\n- Added: `sync` option.\n- Fixed: Throw a clear error on getting empty config file.\n- Fixed: when a `options.configPath` is `package.json`, return the package prop, not the entire JSON file.\n\n## 2.2.2\n\n- Fixed: `options.configPath` and `--config` flag are respected.\n\n## 2.2.0, 2.2.1\n\n- 2.2.0 included a number of improvements but somehow broke stylelint. The changes were reverted in 2.2.1, to be restored later.\n\n## 2.1.3\n\n- Licensing improvement: switched from `json-parse-helpfulerror` to `parse-json`.\n\n## 2.1.2\n\n- Fixed: bug where an `ENOENT` error would be thrown is `searchPath` referenced a non-existent file.\n- Fixed: JSON parsing errors in Node v7.\n\n## 2.1.1\n\n- Fixed: swapped `graceful-fs` for regular `fs`, fixing a garbage collection problem.\n\n## 2.1.0\n\n- Added: Node 0.12 support.\n\n## 2.0.2\n\n- Fixed: Node version specified in `package.json`.\n\n## 2.0.1\n\n- Fixed: no more infinite loop in Windows.\n\n## 2.0.0\n\n- Changed: module now creates cosmiconfig instances with `load` methods (see README).\n- Added: caching (enabled by the change above).\n- Removed: support for Node versions &lt;4.\n\n## 1.1.0\n\n- Add `rcExtensions` option.\n\n## 1.0.2\n\n- Fix handling of `require()`'s within JS module configs.\n\n## 1.0.1\n\n- Switch Promise implementation to pinkie-promise.\n\n## 1.0.0\n\n- Initial release.\n\n[parse-json-pr-12]: https://github.com/sindresorhus/parse-json/pull/12\n\n[pr-101]: https://github.com/cosmiconfig/cosmiconfig/pull/101\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.3837890625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n- Demonstrating empathy and kindness toward other people\n- Being respectful of differing opinions, viewpoints, and experiences\n- Giving and gracefully accepting constructive feedback\n- Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n- Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n- The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n- Trolling, insulting or derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n- Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n<https://github.com/cosmiconfig/cosmiconfig>. All complaints will be reviewed and\ninvestigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n\n[Mozilla CoC]: https://github.com/mozilla/diversity\n\n[FAQ]: https://www.contributor-covenant.org/faq\n\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 David Clark\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 26.9775390625,
          "content": "# cosmiconfig\n\n[![codecov](https://codecov.io/gh/cosmiconfig/cosmiconfig/branch/main/graph/badge.svg)](https://codecov.io/gh/cosmiconfig/cosmiconfig)\n\nCosmiconfig searches for and loads configuration for your program.\n\nIt features smart defaults based on conventional expectations in the JavaScript ecosystem.\nBut it's also flexible enough to search wherever you'd like to search, and load whatever you'd like to load.\n\nBy default, Cosmiconfig will check the current directory for the following:\n\n- a `package.json` property\n- a JSON or YAML, extensionless \"rc file\"\n- an \"rc file\" with the extensions `.json`, `.yaml`, `.yml`, `.js`, `.ts`, `.mjs`, or `.cjs`\n- any of the above two inside a `.config` subdirectory\n- a `.config.js`, `.config.ts`, `.config.mjs`, or `.config.cjs` file\n\nFor example, if your module's name is \"myapp\", cosmiconfig will search up the directory tree for configuration in the following places:\n\n- a `myapp` property in `package.json`\n- a `.myapprc` file in JSON or YAML format\n- a `.myapprc.json`, `.myapprc.yaml`, `.myapprc.yml`, `.myapprc.js`, `.myapprc.ts`, `.myapprc.mjs`, or `.myapprc.cjs` file\n- a `myapprc`, `myapprc.json`, `myapprc.yaml`, `myapprc.yml`, `myapprc.js`, `myapprc.ts`, `myapprc.mjs`, or `myapprc.cjs` file inside a `.config` subdirectory\n- a `myapp.config.js`, `myapp.config.ts`, `myapp.config.mjs`, or `myapp.config.cjs` file\n\nOptionally, you can tell it to search up the directory tree using [search strategies],\nchecking each of these places in each directory, until it finds some acceptable configuration (or hits the home directory).\n\n## Table of contents\n\n- [Installation](#installation)\n- [Usage for tooling developers](#usage-for-tooling-developers)\n- [Result](#result)\n- [Asynchronous API](#asynchronous-api)\n  - [cosmiconfig()](#cosmiconfig-1)\n  - [explorer.search()](#explorersearch)\n  - [explorer.load()](#explorerload)\n  - [explorer.clearLoadCache()](#explorerclearloadcache)\n  - [explorer.clearSearchCache()](#explorerclearsearchcache)\n  - [explorer.clearCaches()](#explorerclearcaches)\n- [Synchronous API](#synchronous-api)\n  - [cosmiconfigSync()](#cosmiconfigsync)\n  - [explorerSync.search()](#explorersyncsearch)\n  - [explorerSync.load()](#explorersyncload)\n  - [explorerSync.clearLoadCache()](#explorersyncclearloadcache)\n  - [explorerSync.clearSearchCache()](#explorersyncclearsearchcache)\n  - [explorerSync.clearCaches()](#explorersyncclearcaches)\n- [cosmiconfigOptions](#cosmiconfigoptions)\n  - [searchStrategy](#searchstrategy)\n  - [searchPlaces](#searchplaces)\n  - [loaders](#loaders)\n  - [packageProp](#packageprop)\n  - [stopDir](#stopdir)\n  - [cache](#cache)\n  - [transform](#transform)\n  - [ignoreEmptySearchPlaces](#ignoreemptysearchplaces)\n- [Loading JS modules](#loading-js-modules)\n- [Caching](#caching)\n- [Differences from rc](#differences-from-rc)\n- [Usage for end users](#usage-for-end-users)\n  - [Imports](#imports)\n- [Contributing & Development](#contributing--development)\n\n## Installation\n\n```\nnpm install cosmiconfig\n```\n\nTested in Node 14+.\n\n## Usage for tooling developers\n\n*If you are an end user (i.e. a user of a tool that uses cosmiconfig, like `prettier` or `stylelint`),\nyou can skip down to [the end user section](#usage-for-end-users).*\n\nCreate a Cosmiconfig explorer, then either `search` for or directly `load` a configuration file.\n\n```js\nconst { cosmiconfig, cosmiconfigSync } = require('cosmiconfig');\n// ...\nconst explorer = cosmiconfig(moduleName);\n\n// Search for a configuration by walking up directories.\n// See documentation for search, below.\nexplorer.search()\n  .then((result) => {\n    // result.config is the parsed configuration object.\n    // result.filepath is the path to the config file that was found.\n    // result.isEmpty is true if there was nothing to parse in the config file.\n  })\n  .catch((error) => {\n    // Do something constructive.\n  });\n\n// Load a configuration directly when you know where it should be.\n// The result object is the same as for search.\n// See documentation for load, below.\nexplorer.load(pathToConfig).then(/* ... */);\n\n// You can also search and load synchronously.\nconst explorerSync = cosmiconfigSync(moduleName);\n\nconst searchedFor = explorerSync.search();\nconst loaded = explorerSync.load(pathToConfig);\n```\n\n## Result\n\nThe result object you get from `search` or `load` has the following properties:\n\n- **config:** The parsed configuration object. `undefined` if the file is empty.\n- **filepath:** The path to the configuration file that was found.\n- **isEmpty:** `true` if the configuration file is empty. This property will not be present if the configuration file is not empty.\n\n## Asynchronous API\n\n### cosmiconfig()\n\n```js\nconst { cosmiconfig } = require('cosmiconfig');\nconst explorer = cosmiconfig(moduleName, /* optional */ cosmiconfigOptions)\n```\n\nCreates a cosmiconfig instance (\"explorer\") configured according to the arguments, and initializes its caches.\n\n#### moduleName\n\nType: `string`. **Required.**\n\nYour module name. This is used to create the default [`searchPlaces`] and [`packageProp`].\n\nIf your [`searchPlaces`] value will include files, as it does by default (e.g. `${moduleName}rc`), your `moduleName` must consist of characters allowed in filenames. That means you should not copy scoped package names, such as `@my-org/my-package`, directly into `moduleName`.\n\n**[`cosmiconfigOptions`] are documented below.**\nYou may not need them, and should first read about the functions you'll use.\n\n### explorer.search()\n\n```js\nexplorer.search([searchFrom]).then(result => { /* ... */ })\n```\n\nSearches for a configuration file. Returns a Promise that resolves with a [result] or with `null`, if no configuration file is found.\n\nYou can do the same thing synchronously with [`explorerSync.search()`].\n\nLet's say your module name is `goldengrahams` so you initialized with `const explorer = cosmiconfig('goldengrahams');`.\nHere's how your default [`search()`] will work:\n\n- Starting from `process.cwd()` (or some other directory defined by the `searchFrom` argument to [`search()`]), look for configuration objects in the following places:\n  1. A `goldengrahams` property in a `package.json` file.\n  2. A `.goldengrahamsrc` file with JSON or YAML syntax.\n  3. A `.goldengrahamsrc.json`, `.goldengrahamsrc.yaml`, `.goldengrahamsrc.yml`, `.goldengrahamsrc.js`, `.goldengrahamsrc.ts`, `.goldengrahamsrc.mjs`, or `.goldengrahamsrc.cjs` file. (To learn more about how JS files are loaded, see [\"Loading JS modules\"].)\n  4. A `goldengrahamsrc`, `goldengrahamsrc.json`, `goldengrahamsrc.yaml`, `goldengrahamsrc.yml`, `goldengrahamsrc.js`, `goldengrahamsrc.ts`, `goldengrahamsrc.mjs`, or `goldengrahamsrc.cjs` file in the `.config` subdirectory.\n  5. A `goldengrahams.config.js`, `goldengrahams.config.ts`, `goldengrahams.config.mjs`, or `goldengrahams.config.cjs` file. (To learn more about how JS files are loaded, see [\"Loading JS modules\"].)\n- If none of those searches reveal a configuration object, continue depending on the current search strategy:\n  - If it's `none` (which is the default if you don't specify a [`stopDir`] option), stop here and return/resolve with `null`.\n  - If it's `global` (which is the default if you specify a [`stopDir`] option), move up one directory level and try again,\n    recursing until arriving at the configured [`stopDir`] option, which defaults to the user's home directory.\n    - After arriving at the [`stopDir`], the global configuration directory (as defined by [`env-paths`] without prefix) is also checked,\n      looking at the files `config`, `config.json`, `config.yaml`, `config.yml`, `config.js`, `config.ts`, `config.cjs`, and `config.mjs`\n      in the directory `~/.config/goldengrahams/` (on Linux; see [`env-paths`] documentation for other OSs).\n  - If it's `project`, check whether a `package.json` file is present in the current directory, and if not,\n    move up one directory level and try again, recursing until there is one.\n- If at any point a parsable configuration is found, the [`search()`] Promise resolves with its [result] \\(or, with [`explorerSync.search()`], the [result] is returned).\n- If no configuration object is found, the [`search()`] Promise resolves with `null` (or, with [`explorerSync.search()`], `null` is returned).\n- If a configuration object is found *but is malformed* (causing a parsing error), the [`search()`] Promise rejects with that error (so you should `.catch()` it). (Or, with [`explorerSync.search()`], the error is thrown.)\n\n**If you know exactly where your configuration file should be, you can use [`load()`], instead.**\n\n**The search process is highly customizable.**\nUse the cosmiconfig options [`searchPlaces`] and [`loaders`] to precisely define where you want to look for configurations and how you want to load them.\n\n#### searchFrom\n\nType: `string`.\nDefault: `process.cwd()`.\n\nA filename.\n[`search()`] will start its search here.\n\nIf the value is a directory, that's where the search starts.\nIf it's a file, the search starts in that file's directory.\n\n### explorer.load()\n\n```js\nexplorer.load(loadPath).then(result => { /* ... */ })\n```\n\nLoads a configuration file. Returns a Promise that resolves with a [result] or rejects with an error (if the file does not exist or cannot be loaded).\n\nUse `load` if you already know where the configuration file is and you just need to load it.\n\n```js\nexplorer.load('load/this/file.json'); // Tries to load load/this/file.json.\n```\n\nIf you load a `package.json` file, the result will be derived from whatever property is specified as your [`packageProp`].\n`package.yaml` will work as well if you specify these file names in your [`searchPlaces`]. \n\nYou can do the same thing synchronously with [`explorerSync.load()`].\n\n### explorer.clearLoadCache()\n\nClears the cache used in [`load()`].\n\n### explorer.clearSearchCache()\n\nClears the cache used in [`search()`].\n\n### explorer.clearCaches()\n\nPerforms both [`clearLoadCache()`] and [`clearSearchCache()`].\n\n## Synchronous API\n\n### cosmiconfigSync()\n\n```js\nconst { cosmiconfigSync } = require('cosmiconfig');\nconst explorerSync = cosmiconfigSync(moduleName, /* optional */ cosmiconfigOptions)\n```\n\nCreates a *synchronous* cosmiconfig instance (\"explorerSync\") configured according to the arguments, and initializes its caches.\n\nSee [`cosmiconfig()`](#cosmiconfig-1).\n\n### explorerSync.search()\n\n```js\nconst result = explorerSync.search([searchFrom]);\n```\n\nSynchronous version of [`explorer.search()`].\n\nReturns a [result] or `null`.\n\n### explorerSync.load()\n\n```js\nconst result = explorerSync.load(loadPath);\n```\n\nSynchronous version of [`explorer.load()`].\n\nReturns a [result].\n\n### explorerSync.clearLoadCache()\n\nClears the cache used in [`load()`].\n\n### explorerSync.clearSearchCache()\n\nClears the cache used in [`search()`].\n\n### explorerSync.clearCaches()\n\nPerforms both [`clearLoadCache()`] and [`clearSearchCache()`].\n\n## cosmiconfigOptions\n\nType: `Object`.\n\nPossible options are documented below.\n\n### searchStrategy\n\nType: `string`\nDefault: `global` if [`stopDir`] is specified, `none` otherwise.\n\nThe strategy that should be used to determine which directories to check for configuration files.\n\n- `none`: Only checks in the current working directory.\n- `project`: Starts in the current working directory, traversing upwards until a `package.{json,yaml}` file is found.\n- `global`: Starts in the current working directory, traversing upwards until the configured [`stopDir`]\n  (or the current user's home directory if none is given). Then, if no configuration is found, also look in the\n  operating system's default configuration directory (according to [`env-paths`] without prefix),\n  where a different set of file names is checked:\n\n```js\n[\n  `config`,\n  `config.json`,\n  `config.yaml`,\n  `config.yml`,\n  `config.js`,\n  `config.ts`,\n  `config.cjs`,\n  `config.mjs`\n]\n```\n\n### searchPlaces\n\nType: `Array<string>`.\nDefault: See below.\n\nAn array of places that [`search()`] will check in each directory as it moves up the directory tree.\nEach place is relative to the directory being searched, and the places are checked in the specified order.\n\n**Default `searchPlaces`:**\n\nFor the [asynchronous API](#asynchronous-api), these are the default `searchPlaces`:\n\n```js\n[\n  'package.json',\n  `.${moduleName}rc`,\n  `.${moduleName}rc.json`,\n  `.${moduleName}rc.yaml`,\n  `.${moduleName}rc.yml`,\n  `.${moduleName}rc.js`,\n  `.${moduleName}rc.ts`,\n  `.${moduleName}rc.mjs`,\n  `.${moduleName}rc.cjs`,\n  `.config/${moduleName}rc`,\n  `.config/${moduleName}rc.json`,\n  `.config/${moduleName}rc.yaml`,\n  `.config/${moduleName}rc.yml`,\n  `.config/${moduleName}rc.js`,\n  `.config/${moduleName}rc.ts`,\n  `.config/${moduleName}rc.mjs`,\n  `.config/${moduleName}rc.cjs`,\n  `${moduleName}.config.js`,\n  `${moduleName}.config.ts`,\n  `${moduleName}.config.mjs`,\n  `${moduleName}.config.cjs`,\n];\n```\n\nFor the [synchronous API](#synchronous-api), the only difference is that `.mjs` files are not included. See [\"Loading JS modules\"] for more information.\n\nCreate your own array to search more, fewer, or altogether different places.\n\nEvery item in `searchPlaces` needs to have a loader in [`loaders`] that corresponds to its extension.\n(Common extensions are covered by default loaders.)\nRead more about [`loaders`] below.\n\n`package.json` is a special value: When it is included in `searchPlaces`, Cosmiconfig will always parse it as JSON and load a property within it, not the whole file.\nThat property is defined with the [`packageProp`] option, and defaults to your module name.\n\n`package.yaml` (used by pnpm) works the same way.\n\nExamples, with a module named `porgy`:\n\n```js\n// Disallow extensions on rc files:\n['package.json', '.porgyrc', 'porgy.config.js']\n```\n\n```js\n// Limit the options dramatically:\n['package.json', '.porgyrc']\n```\n\n```js\n// Maybe you want to look for a wide variety of JS flavors:\n[\n  'porgy.config.js',\n  'porgy.config.mjs',\n  'porgy.config.ts',\n  'porgy.config.coffee'\n]\n// ^^ You will need to designate a custom loader to tell\n// Cosmiconfig how to handle `.coffee` files.\n```\n\n```js\n// Look within a .config/ subdirectory of every searched directory:\n[\n  'package.json',\n  '.porgyrc',\n  '.config/.porgyrc',\n  '.porgyrc.json',\n  '.config/.porgyrc.json'\n]\n```\n\n### loaders\n\nType: `Object`.\nDefault: See below.\n\nAn object that maps extensions to the loader functions responsible for loading and parsing files with those extensions.\n\nCosmiconfig exposes its default loaders on the named export `defaultLoaders` and `defaultLoadersSync`.\n\n**Default `loaders`:**\n\n```js\nconst { defaultLoaders, defaultLoadersSync } = require('cosmiconfig');\n\nconsole.log(Object.entries(defaultLoaders));\n// [\n//   [ '.mjs', [Function: loadJs] ],\n//   [ '.cjs', [Function: loadJs] ],\n//   [ '.js', [Function: loadJs] ],\n//   [ '.ts', [Function: loadTs] ],\n//   [ '.json', [Function: loadJson] ],\n//   [ '.yaml', [Function: loadYaml] ],\n//   [ '.yml', [Function: loadYaml] ],\n//   [ 'noExt', [Function: loadYaml] ]\n// ]\n\nconsole.log(Object.entries(defaultLoadersSync));\n// [\n//   [ '.cjs', [Function: loadJsSync] ],\n//   [ '.js', [Function: loadJsSync] ],\n//   [ '.ts', [Function: loadTsSync] ],\n//   [ '.json', [Function: loadJson] ],\n//   [ '.yaml', [Function: loadYaml] ],\n//   [ '.yml', [Function: loadYaml] ],\n//   [ 'noExt', [Function: loadYaml] ]\n// ]\n```\n\n(YAML is a superset of JSON; which means YAML parsers can parse JSON; which is how extensionless files can be either YAML *or* JSON with only one parser.)\n\n**If you provide a `loaders` object, your object will be *merged* with the defaults.**\nSo you can override one or two without having to override them all.\n\n**Keys in `loaders`** are extensions (starting with a period), or `noExt` to specify the loader for files *without* extensions, like `.myapprc`.\n\n**Values in `loaders`** are a loader function (described below) whose values are loader functions.\n\n**The most common use case for custom loaders value is to load extensionless `rc` files as strict JSON**, instead of JSON *or* YAML (the default).\nTo accomplish that, provide the following `loaders` value:\n\n```js\n{\n  noExt: defaultLoaders['.json'];\n}\n```\n\nIf you want to load files that are not handled by the loader functions Cosmiconfig exposes, you can write a custom loader function or use one from NPM if it exists.\n\n**Use cases for custom loader function:**\n\n- Allow configuration syntaxes that aren't handled by Cosmiconfig's defaults, like JSON5, INI, or XML.\n- Parse JS files with Babel before deriving the configuration.\n\n**Custom loader functions** have the following signature:\n\n```ts\n// Sync\ntype SyncLoader = (filepath: string, content: string) => Object | null\n\n// Async\ntype AsyncLoader = (filepath: string, content: string) => Object | null | Promise<Object | null>\n```\n\nCosmiconfig reads the file when it checks whether the file exists, so it will provide you with both the file's path and its content.\nDo whatever you need to, and return either a configuration object or `null` (or, for async-only loaders, a Promise that resolves with one of those).\n`null` indicates that no real configuration was found and the search should continue.\n\nA few things to note:\n\n- If you use a custom loader, be aware of whether it's sync or async: you cannot use async customer loaders with the sync API ([`cosmiconfigSync()`]).\n- **Special JS syntax can also be handled by using a `require` hook**, because `defaultLoaders['.js']` just uses `require`.\n  Whether you use custom loaders or a `require` hook is up to you.\n\nExamples:\n\n```js\n// Allow JSON5 syntax:\ncosmiconfig('foo', {\n  loaders: {\n    '.json': json5Loader\n  }\n});\n\n// Allow a special configuration syntax of your own creation:\ncosmiconfig('foo', {\n  loaders: {\n    '.special': specialLoader\n  }\n});\n\n// Allow many flavors of JS, using custom loaders:\ncosmiconfig('foo', {\n  loaders: {\n    '.coffee': coffeeScriptLoader\n  }\n});\n\n// Allow many flavors of JS but rely on require hooks:\ncosmiconfig('foo', {\n  loaders: {\n    '.coffee': defaultLoaders['.js']\n  }\n});\n```\n\n### packageProp\n\nType: `string | Array<string>`.\nDefault: `` `${moduleName}` ``.\n\nName of the property in `package.json` (or `package.yaml`) to look for.\n\nUse a period-delimited string or an array of strings to describe a path to nested properties.\n\nFor example, the value `'configs.myPackage'` or `['configs', 'myPackage']` will get you the `\"myPackage\"` value in a `package.json` like this:\n\n```json\n{\n  \"configs\": {\n    \"myPackage\": {\"option\":  \"value\"}\n  }\n}\n```\n\nIf nested property names within the path include periods, you need to use an array of strings. For example, the value `['configs', 'foo.bar', 'baz']` will get you the `\"baz\"` value in a `package.json` like this:\n\n```json\n{\n  \"configs\": {\n    \"foo.bar\": {\n      \"baz\": {\"option\":  \"value\"}\n    }\n  }\n}\n```\n\nIf a string includes period but corresponds to a top-level property name, it will not be interpreted as a period-delimited path. For example, the value `'one.two'` will get you the `\"three\"` value in a `package.json` like this:\n\n```json\n{\n  \"one.two\": \"three\",\n  \"one\": {\n    \"two\": \"four\"\n  }\n}\n```\n\n### stopDir\n\nType: `string`.\nDefault: Absolute path to your home directory.\n\nDirectory where the search will stop.\n\n### cache\n\nType: `boolean`.\nDefault: `true`.\n\nIf `false`, no caches will be used.\nRead more about [\"Caching\"](#caching) below.\n\n### transform\n\nType: `(Result) => Promise<Result> | Result`.\n\nA function that transforms the parsed configuration. Receives the [result].\n\nIf using [`search()`] or [`load()`] \\(which are async), the transform function can return the transformed result or return a Promise that resolves with the transformed result.\nIf using `cosmiconfigSync`, [`search()`] or [`load()`], the function must be synchronous and return the transformed result.\n\nThe reason you might use this option — instead of simply applying your transform function some other way — is that *the transformed result will be cached*. If your transformation involves additional filesystem I/O or other potentially slow processing, you can use this option to avoid repeating those steps every time a given configuration is searched or loaded.\n\n### ignoreEmptySearchPlaces\n\nType: `boolean`.\nDefault: `true`.\n\nBy default, if [`search()`] encounters an empty file (containing nothing but whitespace) in one of the [`searchPlaces`], it will ignore the empty file and move on.\nIf you'd like to load empty configuration files, instead, set this option to `false`.\n\nWhy might you want to load empty configuration files?\nIf you want to throw an error, or if an empty configuration file means something to your program.\n\n## Loading JS modules\n\nYour end users can provide JS configuration files as ECMAScript modules (ESM) under the following conditions:\n\n- You (the cosmiconfig user) use cosmiconfig's [asynchronous API](#asynchronous-api).\n- Your end user runs a version of Node that supports ESM ([>=12.17.0](https://nodejs.org/en/blog/release/v12.17.0/), or earlier with the `--experimental-modules` flag).\n- Your end user provides an `.mjs` configuration file, or a `.js` file whose nearest parent `package.json` file contains `\"type\": \"module\"`. (See [Node's method for determining a file's module system](https://nodejs.org/api/packages.html#packages_determining_module_system).)\n\nWith cosmiconfig's [asynchronous API](#asynchronous-api), the default [`searchPlaces`] include `.js`, `.ts`, `.mjs`, and `.cjs` files. Cosmiconfig loads all these file types with the [dynamic `import` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#dynamic_imports).\n\nWith the [synchronous API](#synchronous-api), JS configuration files are always treated as CommonJS, and `.mjs` files are ignored, because there is no synchronous API for the dynamic `import` function.\n\n## Caching\n\nAs of v2, cosmiconfig uses caching to reduce the need for repetitious reading of the filesystem or expensive transforms. Every new cosmiconfig instance (created with `cosmiconfig()`) has its own caches.\n\nTo avoid or work around caching, you can do the following:\n\n- Set the `cosmiconfig` option [`cache`] to `false`.\n- Use the cache-clearing methods [`clearLoadCache()`], [`clearSearchCache()`], and [`clearCaches()`].\n- Create separate instances of cosmiconfig (separate \"explorers\").\n\n## Differences from [rc](https://github.com/dominictarr/rc)\n\n[rc](https://github.com/dominictarr/rc) serves its focused purpose well. cosmiconfig differs in a few key ways — making it more useful for some projects, less useful for others:\n\n- Looks for configuration in some different places: in a `package.json` property, an rc file, a `.config.js` file, and rc files with extensions.\n- Built-in support for JSON, YAML, and CommonJS formats.\n- Stops at the first configuration found, instead of finding all that can be found up the directory tree and merging them automatically.\n- Options.\n- Asynchronous by default (though can be run synchronously).\n\n## Usage for end users\n\nWhen configuring a tool, you can use multiple file formats and put these in multiple places.\n\nUsually, a tool would mention this in its own README file,\nbut by default, these are the following places, where `{NAME}` represents the name of the tool:\n\n```\npackage.json\n.{NAME}rc\n.{NAME}rc.json\n.{NAME}rc.yaml\n.{NAME}rc.yml\n.{NAME}rc.js\n.{NAME}rc.ts\n.{NAME}rc.cjs\n.config/{NAME}rc\n.config/{NAME}rc.json\n.config/{NAME}rc.yaml\n.config/{NAME}rc.yml\n.config/{NAME}rc.js\n.config/{NAME}rc.ts\n.config/{NAME}rc.mjs\n.config/{NAME}rc.cjs\n{NAME}.config.js\n{NAME}.config.ts\n{NAME}.config.mjs\n{NAME}.config.cjs\n```\n\nThe contents of these files are defined by the tool.\nFor example, you can configure prettier to enforce semicolons at the end of the line\nusing a file named `.config/prettierrc.yml`:\n\n```yaml\nsemi: true\n```\n\nAdditionally, you have the option to put a property named after the tool in your `package.json` file,\nwith the contents of that property being the same as the file contents. To use the same example as above:\n\n```json\n{\n  \"name\": \"your-project\",\n  \"dependencies\": {},\n  \"prettier\": {\n    \"semi\": true\n  }\n}\n```\n\nThis has the advantage that you can put the configuration of all tools\n(at least the ones that use cosmiconfig) in one file.\n\nYou can also add a `cosmiconfig` key within your `package.json` file or create one of the following files\nto configure `cosmiconfig` itself:\n\n```\n.config/config.json\n.config/config.yaml\n.config/config.yml\n.config/config.js\n.config/config.ts\n.config/config.cjs\n```\n\nThe following properties are currently actively supported in these places:\n\n```yaml\ncosmiconfig:\n  # adds places where configuration files are being searched\n  searchPlaces:\n    - .config/{name}.yml\n  # to enforce a custom naming convention and format, don't merge the above with the tool-defined search places\n  # (`true` is the default setting)\n  mergeSearchPlaces: false\n```\n\n> **Note:** technically, you can overwrite all options described in [cosmiconfigOptions](#cosmiconfigoptions) here,\n> but everything not listed above should be used at your own risk, as it has not been tested explicitly.\n> The only exceptions to this are the `loaders` property, which is explicitly not supported at this time,\n> and the `searchStrategy` property, which is intentionally disallowed.\n\nYou can also add more root properties outside the `cosmiconfig` property\nto configure your tools, entirely eliminating the need to look for additional configuration files:\n\n```yaml\ncosmiconfig:\n  searchPlaces: []\n\nprettier:\n  semi: true\n```\n\n### Imports\n\nWherever you put your configuration (the package.json file, a root config file or a package-specific config file),\nyou can use the special `$import` key to import another file as a base.\n\nFor example, you can import from an npm package (in this example, `@foocorp/config`).\n\n`.prettierrc.base.yml` in said npm package could define some company-wide defaults:\n\n```yaml\nprintWidth: 120\nsemi: true\ntabWidth: 2\n```\n\nAnd then, the `.prettierrc.yml` file in the project itself would just reference that file,\noptionally overriding the defaults with project-specific settings:\n\n```yaml\n$import: node_modules/@foocorp/config/.prettierrc.base.yml\n# we want more space!\nprintWidth: 200\n```\n\nIt is possible to import multiple base files by specifying an array of paths,\nwhich will be processed in declaration order;\nthat means that the last entry will win if there are conflicting properties.\n\nIt is also possible to import file formats other than the importing format\nas long as they are supported by the loaders specified by the developer of the tool you're configuring. \n\n```yaml\n$import: [first.yml, second.json, third.config.js]\n```\n\n## Contributing & Development\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md). By participating in this project you agree to abide by its terms.\n\nAnd please do participate!\n\n[result]: #result\n\n[`load()`]: #explorerload\n\n[`search()`]: #explorersearch\n\n[`clearloadcache()`]: #explorerclearloadcache\n\n[`clearsearchcache()`]: #explorerclearsearchcache\n\n[`cosmiconfig()`]: #cosmiconfig\n\n[`cosmiconfigSync()`]: #cosmiconfigsync\n\n[`clearcaches()`]: #explorerclearcaches\n\n[`packageprop`]: #packageprop\n\n[`cache`]: #cache\n\n[`stopdir`]: #stopdir\n\n[`searchplaces`]: #searchplaces\n\n[`loaders`]: #loaders\n\n[`cosmiconfigoptions`]: #cosmiconfigoptions\n\n[`explorerSync.search()`]: #explorersyncsearch\n\n[`explorerSync.load()`]: #explorersyncload\n\n[`explorer.search()`]: #explorersearch\n\n[`explorer.load()`]: #explorerload\n\n[\"Loading JS modules\"]: #loading-js-modules\n\n[`env-paths`]: https://github.com/sindresorhus/env-paths\n\n[search strategies]: #searchstrategy\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.0146484375,
          "content": "comment: false\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.951171875,
          "content": "{\n  \"name\": \"cosmiconfig\",\n  \"version\": \"9.0.0\",\n  \"description\": \"Find and load configuration from a package.json property, rc file, TypeScript module, and more!\",\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"files\": [\n    \"dist\",\n    \"!dist/**/*.map\"\n  ],\n  \"scripts\": {\n    \"clean\": \"git clean -Xdf -e '!node_modules' .\",\n    \"build\": \"npm run build:tsc\",\n    \"build:tsc\": \"cross-env NODE_ENV=production tsc -b\",\n    \"dev\": \"npm run build:tsc -- --watch\",\n    \"lint\": \"eslint --ext .js,.ts .\",\n    \"lint:fix\": \"eslint --ext .js,.ts . --fix\",\n    \"lint:md\": \"remark-preset-davidtheclark\",\n    \"format\": \"prettier \\\"**/*.{js,ts,json,yml,yaml}\\\" --write\",\n    \"format:md\": \"remark-preset-davidtheclark --format\",\n    \"format:check\": \"prettier \\\"**/*.{js,ts,json,yml,yaml}\\\" --check\",\n    \"test\": \"vitest run --coverage\",\n    \"test:watch\": \"vitest\",\n    \"check:all\": \"npm run test && npm run lint && npm run format:check\",\n    \"prepublishOnly\": \"npm run check:all && npm run build\",\n    \"prepare\": \"husky install\"\n  },\n  \"lint-staged\": {\n    \"*.{js,ts}\": [\n      \"eslint --fix\",\n      \"prettier --write\"\n    ],\n    \"*.{json,yml,yaml}\": [\n      \"prettier --write\"\n    ],\n    \"*.md\": [\n      \"remark-preset-davidtheclark\",\n      \"remark-preset-davidtheclark --format\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/cosmiconfig/cosmiconfig.git\"\n  },\n  \"keywords\": [\n    \"load\",\n    \"configuration\",\n    \"config\"\n  ],\n  \"author\": \"Daniel Fischer <daniel@d-fischer.dev>\",\n  \"contributors\": [\n    \"Randolf J <jrandolf@google.com>\",\n    \"David Clark <david.dave.clark@gmail.com>\",\n    \"Bogdan Chadkin <trysound@yandex.ru>\",\n    \"Suhas Karanth <sudo.suhas@gmail.com>\"\n  ],\n  \"funding\": \"https://github.com/sponsors/d-fischer\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/cosmiconfig/cosmiconfig/issues\"\n  },\n  \"homepage\": \"https://github.com/cosmiconfig/cosmiconfig#readme\",\n  \"peerDependencies\": {\n    \"typescript\": \">=4.9.5\"\n  },\n  \"peerDependenciesMeta\": {\n    \"typescript\": {\n      \"optional\": true\n    }\n  },\n  \"dependencies\": {\n    \"env-paths\": \"^2.2.1\",\n    \"import-fresh\": \"^3.3.0\",\n    \"js-yaml\": \"^4.1.0\",\n    \"parse-json\": \"^5.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/js-yaml\": \"^4.0.5\",\n    \"@types/node\": \"^14\",\n    \"@types/parse-json\": \"^4.0.0\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.5.0\",\n    \"@typescript-eslint/parser\": \"^6.5.0\",\n    \"@vitest/coverage-istanbul\": \"^0.34.3\",\n    \"cross-env\": \"^7.0.3\",\n    \"eslint\": \"^8.48.0\",\n    \"eslint-config-davidtheclark-node\": \"^0.2.2\",\n    \"eslint-config-prettier\": \"^9.0.0\",\n    \"eslint-import-resolver-typescript\": \"^3.6.0\",\n    \"eslint-plugin-import\": \"^2.28.1\",\n    \"eslint-plugin-node\": \"^11.1.0\",\n    \"eslint-plugin-vitest\": \"^0.2.8\",\n    \"husky\": \"^8.0.3\",\n    \"lint-staged\": \"^14.0.1\",\n    \"parent-module\": \"^3.0.0\",\n    \"prettier\": \"^3.0.3\",\n    \"remark-preset-davidtheclark\": \"^0.12.0\",\n    \"typescript\": \"^5.2.2\",\n    \"vitest\": \"^0.34.3\"\n  },\n  \"engines\": {\n    \"node\": \">=14\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.base.json",
          "type": "blob",
          "size": 0.677734375,
          "content": "{\n  \"compilerOptions\": {\n    \"allowJs\": true,\n    \"alwaysStrict\": true,\n    \"checkJs\": true,\n    \"composite\": true,\n    \"declaration\": true,\n    \"declarationMap\": true,\n    \"esModuleInterop\": true,\n    \"incremental\": true,\n    \"module\": \"NodeNext\",\n    \"moduleResolution\": \"NodeNext\",\n    \"noFallthroughCasesInSwitch\": true,\n    \"noImplicitOverride\": true,\n    \"noImplicitReturns\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"noUncheckedIndexedAccess\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"sourceMap\": true,\n    \"strict\": true,\n    \"target\": \"ES2022\",\n    \"skipLibCheck\": true,\n\n    // XXX: Enable.\n    \"useUnknownInCatchVariables\": false\n  }\n}\n"
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.16015625,
          "content": "{\n  \"extends\": \"./tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"rootDir\": \"./src\",\n    \"outDir\": \"./dist\",\n    \"stripInternal\": true\n  },\n  \"include\": [\"src\"]\n}\n"
        },
        {
          "name": "vite.config.ts",
          "type": "blob",
          "size": 0.517578125,
          "content": "import { defineConfig } from 'vitest/config';\n\nconst vitestConfig = defineConfig({\n  test: {\n    threads: false,\n    environment: 'node',\n    restoreMocks: true,\n    mockReset: true,\n    includeSource: ['src/**/*.{js,ts}'],\n    coverage: {\n      provider: 'istanbul',\n      reporter: ['text', 'html', 'lcov'],\n      include: ['src/**/*.{js,ts}'],\n      branches: 100,\n      functions: 100,\n      lines: 100,\n      statements: 100,\n    },\n  },\n});\n\n// eslint-disable-next-line import/no-default-export\nexport default vitestConfig;\n"
        }
      ]
    }
  ]
}