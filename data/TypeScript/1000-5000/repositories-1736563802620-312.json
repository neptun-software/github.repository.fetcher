{
  "metadata": {
    "timestamp": 1736563802620,
    "page": 312,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sindresorhus/ow",
      "stars": 3816,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1708984375,
          "content": "root = true\n\n[*]\nindent_style = tab\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.yml]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.052734375,
          "content": "node_modules\nyarn.lock\n.nyc_output\ncoverage\ndist\ndocs\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": "dev-only.js",
          "type": "blob",
          "size": 0.2138671875,
          "content": "let ow;\nif (process.env.NODE_ENV === 'production') {\n\tconst shim = new Proxy((() => {}), {\n\t\tget: () => shim,\n\t\tapply: () => shim,\n\t});\n\n\tow = shim;\n} else {\n\tow = await import('./dist/index.js');\n}\n\nexport default ow;\n"
        },
        {
          "name": "example.js",
          "type": "blob",
          "size": 0.2509765625,
          "content": "import ow from './dist/index.js'\n\nconst logError = fn => {\n\ttry {\n\t\tfn();\n\t} catch (error) {\n\t\tconsole.log(error.message);\n\t}\n};\n\nconst fn = input => {\n\tow(input, ow.string.minLength(10));\n};\n\nlogError(() => {\n\tfn(10);\n});\n\nlogError(() => {\n\tfn('foo');\n});\n"
        },
        {
          "name": "license",
          "type": "blob",
          "size": 1.0908203125,
          "content": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.421875,
          "content": "{\n\t\"name\": \"ow\",\n\t\"version\": \"2.0.0\",\n\t\"description\": \"Function argument validation for humans\",\n\t\"license\": \"MIT\",\n\t\"repository\": \"sindresorhus/ow\",\n\t\"funding\": \"https://github.com/sponsors/sindresorhus\",\n\t\"author\": {\n\t\t\"name\": \"Sindre Sorhus\",\n\t\t\"email\": \"sindresorhus@gmail.com\",\n\t\t\"url\": \"https://sindresorhus.com\"\n\t},\n\t\"type\": \"module\",\n\t\"exports\": {\n\t\t\".\": {\n\t\t\t\"types\": \"./dist/index.d.ts\",\n\t\t\t\"default\": \"./dist/index.js\"\n\t\t},\n\t\t\"./dev-only\": {\n\t\t\t\"types\": \"./dist/index.d.ts\",\n\t\t\t\"default\": \"./dev-only.js\"\n\t\t}\n\t},\n\t\"sideEffects\": false,\n\t\"engines\": {\n\t\t\"node\": \">=18\"\n\t},\n\t\"scripts\": {\n\t\t\"test\": \"xo && NODE_OPTIONS='--import=tsx/esm' c8 ava\",\n\t\t\"docs\": \"typedoc source/index.ts\",\n\t\t\"build\": \"del-cli dist && tsc\",\n\t\t\"prepare\": \"npm run build\",\n\t\t\"postpublish\": \"npm run docs && gh-pages --dist docs --no-history --message \\\"Deploy documentation\\\"\",\n\t\t\"example\": \"npm run build && node example.js\"\n\t},\n\t\"files\": [\n\t\t\"dist\",\n\t\t\"dev-only.js\"\n\t],\n\t\"keywords\": [\n\t\t\"type\",\n\t\t\"types\",\n\t\t\"check\",\n\t\t\"checking\",\n\t\t\"guard\",\n\t\t\"guards\",\n\t\t\"assert\",\n\t\t\"assertion\",\n\t\t\"predicate\",\n\t\t\"predicates\",\n\t\t\"is\",\n\t\t\"validate\",\n\t\t\"validation\",\n\t\t\"utility\",\n\t\t\"util\",\n\t\t\"typeof\",\n\t\t\"instanceof\",\n\t\t\"object\"\n\t],\n\t\"dependencies\": {\n\t\t\"@sindresorhus/is\": \"^6.3.0\",\n\t\t\"callsites\": \"^4.1.0\",\n\t\t\"dot-prop\": \"^8.0.2\",\n\t\t\"environment\": \"^1.0.0\",\n\t\t\"fast-equals\": \"^5.0.1\",\n\t\t\"is-identifier\": \"^1.0.0\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@sindresorhus/tsconfig\": \"^5.0.0\",\n\t\t\"@types/node\": \"^20.12.8\",\n\t\t\"ava\": \"^6.1.2\",\n\t\t\"c8\": \"^9.1.0\",\n\t\t\"del-cli\": \"^5.1.0\",\n\t\t\"expect-type\": \"^0.19.0\",\n\t\t\"gh-pages\": \"^6.1.1\",\n\t\t\"tsx\": \"^4.9.1\",\n\t\t\"typedoc\": \"^0.25.13\",\n\t\t\"typescript\": \"^5.4.5\",\n\t\t\"xo\": \"^0.58.0\"\n\t},\n\t\"browser\": {\n\t\t\"./dist/utils/infer-label.js\": \"./dist/utils/infer-label.browser.js\"\n\t},\n\t\"xo\": {\n\t\t\"ignores\": [\n\t\t\t\"example.js\",\n\t\t\t\"dev-only.js\",\n\t\t\t\"source/utils/infer-label.browser.ts\"\n\t\t],\n\t\t\"rules\": {\n\t\t\t\"no-useless-return\": \"off\",\n\t\t\t\"@typescript-eslint/explicit-function-return-type\": \"error\",\n\t\t\t\"@typescript-eslint/ban-types\": \"off\",\n\t\t\t\"@typescript-eslint/no-explicit-any\": \"off\",\n\t\t\t\"@typescript-eslint/no-empty-function\": \"off\",\n\t\t\t\"@typescript-eslint/restrict-template-expressions\": \"off\",\n\t\t\t\"@typescript-eslint/no-unsafe-return\": \"off\",\n\t\t\t\"@typescript-eslint/no-unsafe-argument\": \"off\"\n\t\t}\n\t},\n\t\"ava\": {\n\t\t\"files\": [\n\t\t\t\"test/**\",\n\t\t\t\"!test/fixtures/**\"\n\t\t],\n\t\t\"extensions\": {\n\t\t\t\"ts\": \"module\"\n\t\t},\n\t\t\"workerThreads\": false\n\t},\n\t\"c8\": {\n\t\t\"reporter\": [\n\t\t\t\"text\",\n\t\t\t\"lcov\"\n\t\t]\n\t}\n}\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 7.337890625,
          "content": "<p align=\"center\">\n\t<img src=\"media/logo.png\" width=\"300\">\n\t<br>\n\t<br>\n</p>\n\n[![Coverage Status](https://codecov.io/gh/sindresorhus/ow/branch/main/graph/badge.svg)](https://codecov.io/gh/sindresorhus/ow)\n\n> Function argument validation for humans\n\nFor schema validation, I recommend [`zod`](https://github.com/colinhacks/zod).\n\n## Highlights\n\n- Expressive chainable API\n- Lots of built-in validations\n- Supports custom validations\n- Automatic label inference in Node.js\n- Written in TypeScript\n\n## Install\n\n```sh\nnpm install ow\n```\n\n## Usage\n\n```ts\nimport ow from 'ow';\n\nconst unicorn = input => {\n\tow(input, ow.string.minLength(5));\n\n\t// â€¦\n};\n\nunicorn(3);\n//=> ArgumentError: Expected `input` to be of type `string` but received type `number`\n\nunicorn('yo');\n//=> ArgumentError: Expected string `input` to have a minimum length of `5`, got `yo`\n```\n\nWe can also match the shape of an object.\n\n```ts\nimport ow from 'ow';\n\nconst unicorn = {\n\trainbow: 'ðŸŒˆ',\n\tstars: {\n\t\tvalue: 'ðŸŒŸ'\n\t}\n};\n\now(unicorn, ow.object.exactShape({\n\trainbow: ow.string,\n\tstars: {\n\t\tvalue: ow.number\n\t}\n}));\n//=> ArgumentError: Expected property `stars.value` to be of type `number` but received type `string` in object `unicorn`\n```\n\n***Note:*** If you intend on using `ow` for development purposes only, use `import ow from 'ow/dev-only'` instead of the usual `import ow from 'ow'`, and run the bundler with `NODE_ENV` set to `production` (e.g. `$ NODE_ENV=\"production\" parcel build index.js`). This will make `ow` automatically export a shim when running in production, which should result in a significantly lower bundle size.\n\n## API\n\n[Complete API documentation](https://sindresorhus.com/ow/)\n\nOw includes TypeScript type guards, so using it will narrow the type of previously-unknown values.\n\n```ts\nfunction (input: unknown) {\n\tinput.slice(0, 3) // Error, Property 'slice' does not exist on type 'unknown'\n\n\tow(input, ow.string)\n\n\tinput.slice(0, 3) // OK\n}\n```\n\n### ow(value, predicate)\n\nTest if `value` matches the provided `predicate`. Throws an `ArgumentError` if the test fails.\n\n### ow(value, label, predicate)\n\nTest if `value` matches the provided `predicate`. Throws an `ArgumentError` with the specified `label` if the test fails.\n\nThe `label` is automatically inferred in Node.js but you can override it by passing in a value for `label`. The automatic label inference doesn't work in the browser.\n\n### ow.isValid(value, predicate)\n\nReturns `true` if the value matches the predicate, otherwise returns `false`.\n\n### ow.create(predicate)\n\nCreate a reusable validator.\n\n```ts\nconst checkPassword = ow.create(ow.string.minLength(6));\n\nconst password = 'foo';\n\ncheckPassword(password);\n//=> ArgumentError: Expected string `password` to have a minimum length of `6`, got `foo`\n```\n\n### ow.create(label, predicate)\n\nCreate a reusable validator with a specific `label`.\n\n```ts\nconst checkPassword = ow.create('password', ow.string.minLength(6));\n\ncheckPassword('foo');\n//=> ArgumentError: Expected string `password` to have a minimum length of `6`, got `foo`\n```\n\n### ow.any(...predicate[])\n\nReturns a predicate that verifies if the value matches at least one of the given predicates.\n\n```ts\now('foo', ow.any(ow.string.maxLength(3), ow.number));\n```\n\n### ow.optional.{type}\n\nMakes the predicate optional. An optional predicate means that it doesn't fail if the value is `undefined`.\n\n```ts\now(1, ow.optional.number);\n\now(undefined, ow.optional.number);\n```\n\n### ow.{type}\n\nAll the below types return a predicate. Every predicate has some extra operators that you can use to test the value even more fine-grained.\n\n[Predicate docs.](https://sindresorhus.com/ow/types/Predicates.html)\n\n#### Primitives\n\n- `undefined`\n- `null`\n- `string`\n- `number`\n- `boolean`\n- `symbol`\n\n#### Built-in types\n\n- `array`\n- `function`\n- `buffer`\n- `object`\n- `regExp`\n- `date`\n- `error`\n- `promise`\n- `map`\n- `set`\n- `weakMap`\n- `weakSet`\n\n#### Typed arrays\n\n- `int8Array`\n- `uint8Array`\n- `uint8ClampedArray`\n- `int16Array`\n- `uint16Array`\n- `int32Array`\n- `uint32Array`\n- `float32Array`\n- `float64Array`\n\n#### Structured data\n\n- `arrayBuffer`\n- `dataView`\n- `sharedArrayBuffer`\n\n#### Miscellaneous\n\n- `nan`\n- `nullOrUndefined`\n- `iterable`\n- `typedArray`\n\n### Predicates\n\nThe following predicates are available on every type.\n\n#### not\n\nInverts the following predicate.\n\n```ts\now(1, ow.number.not.infinite);\n\now('', ow.string.not.empty);\n//=> ArgumentError: Expected string to not be empty, got ``\n```\n\n#### is(fn)\n\nUse a custom validation function. Return `true` if the value matches the validation, return `false` if it doesn't.\n\n```ts\now(1, ow.number.is(x => x < 10));\n\now(1, ow.number.is(x => x > 10));\n//=> ArgumentError: Expected `1` to pass custom validation function\n```\n\nInstead of returning `false`, you can also return a custom error message which results in a failure.\n\n```ts\nconst greaterThan = (max: number, x: number) => {\n\treturn x > max || `Expected \\`${x}\\` to be greater than \\`${max}\\``;\n};\n\now(5, ow.number.is(x => greaterThan(10, x)));\n//=> ArgumentError: Expected `5` to be greater than `10`\n```\n\n#### validate(fn)\n\nUse a custom validation object. The difference with `is` is that the function should return a validation object, which allows more flexibility.\n\n```ts\now(1, ow.number.validate(value => ({\n\tvalidator: value > 10,\n\tmessage: `Expected value to be greater than 10, got ${value}`\n})));\n//=> ArgumentError: (number) Expected value to be greater than 10, got 1\n```\n\nYou can also pass in a function as `message` value which accepts the label as argument.\n\n```ts\now(1, 'input', ow.number.validate(value => ({\n\tvalidator: value > 10,\n\tmessage: label => `Expected ${label} to be greater than 10, got ${value}`\n})));\n//=> ArgumentError: Expected number `input` to be greater than 10, got 1\n```\n\n#### message(string | fn)\n\nProvide a custom message:\n\n```ts\now('ðŸŒˆ', 'unicorn', ow.string.equals('ðŸ¦„').message('Expected unicorn, got rainbow'));\n//=> ArgumentError: Expected unicorn, got rainbow\n```\n\nYou can also pass in a function which receives the value as the first parameter and the label as the second parameter and is expected to return the message.\n\n```ts\now('ðŸŒˆ', ow.string.minLength(5).message((value, label) => `Expected ${label}, to have a minimum length of 5, got \\`${value}\\``));\n//=> ArgumentError: Expected string, to be have a minimum length of 5, got `ðŸŒˆ`\n```\n\nIt's also possible to add a separate message per validation:\n\n```ts\now(\n\t'1234',\n\tow.string\n\t\t.minLength(5).message((value, label) => `Expected ${label}, to be have a minimum length of 5, got \\`${value}\\``)\n\t\t.url.message('This is no url')\n);\n//=> ArgumentError: Expected string, to be have a minimum length of 5, got `1234`\n\now(\n\t'12345',\n\tow.string\n\t\t.minLength(5).message((value, label) => `Expected ${label}, to be have a minimum length of 5, got \\`${value}\\``)\n\t\t.url.message('This is no url')\n);\n//=> ArgumentError: This is no url\n```\n\nThis can be useful for creating your own reusable validators which can be extracted to a separate npm package.\n\n### TypeScript\n\n**Requires TypeScript 4.7 or later.**\n\nOw includes a type utility that lets you to extract a TypeScript type from the given predicate.\n\n```ts\nimport ow, {Infer} from 'ow';\n\nconst userPredicate = ow.object.exactShape({\n\tname: ow.string\n});\n\ntype User = Infer<typeof userPredicate>;\n```\n\n## Related\n\n- [@sindresorhus/is](https://github.com/sindresorhus/is) - Type check values\n- [ngx-ow](https://github.com/SamVerschueren/ngx-ow) - Angular form validation on steroids\n"
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.2216796875,
          "content": "{\n\t\"extends\": \"@sindresorhus/tsconfig\",\n\t\"compilerOptions\": {\n\t\t\"outDir\": \"dist\"\n\t},\n\t\"include\": [\n\t\t\"source\"\n\t],\n\t\"typedocOptions\": {\n\t\t\"out\": \"docs\",\n\t\t\"excludePrivate\": true,\n\t\t\"hideGenerator\": true,\n\t\t\"media\": \"media\"\n\t}\n}\n"
        }
      ]
    }
  ]
}