{
  "metadata": {
    "timestamp": 1736564296378,
    "page": 882,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zce/caz",
      "stars": 2463,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3173828125,
          "content": "# For more information about the properties used in\n# this file, please see the EditorConfig documentation:\n# https://editorconfig.org/\n\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.095703125,
          "content": ".DS_Store\n\nnode_modules\n\n/dist\n\n/coverage\n/test/.temp\n\npackage-lock.json\npnpm-lock.yaml\nyarn.lock\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.94140625,
          "content": "# Changelog\n\n## [1.1.0] - 2022-04-19\n\n- feat: add socks proxy support\n\n## [1.0.0] - 2022-03-24\n\n- zero dependencies by tsup\n- node v14.14.0 required\n- auto install template dependencies\n- support native esm\n- upgrade all dependencies\n- refactor test\n- chore: minify output dist\n- docs: chinese docs\n- fix: dts output\n\n## [0.8.2] - 2022-01-20\n\n- fix: output types.d.ts\n\n## [0.8.1] - 2021-09-22\n\n- fix: temp pin adm-zip 0.5.5 (cthackers/adm-zip#389)\n\n## [0.8.0] - 2021-08-14\n\n- feat: support path-based branch name (#62)\n- fix: mini template replace regex\n\n## [0.7.0] - 2021-07-26\n\n- feat: ensure local template dir exists (#55)\n- chore: upgrade node version requirements\n\n## [0.6.0] - 2021-04-02\n\n- feat: debug mode for output error details\n- feat: allow cli options override prompts\n\n## [0.5.1] - 2021-03-21\n\n- fix: update npm scripts\n\n## [0.5.0] - 2021-03-21\n\n- ci: update ci config\n\n## [0.4.0] - 2021-03-20\n\n- ci: remove travis ci\n- chore: remove meaningless comments\n- chore: remove useless dependencies\n\n## [0.3.0] - 2021-03-17\n\n- feat: using adm-zip instead extract-zip\n\n## [0.2.1] - 2021-01-29\n\n- fix: remove license initial value\n\n## [0.2.0] - 2021-01-29\n\n- feat: license prompt default value\n- chore: update license year\n- chore: update deps\n\n## [0.1.5] - 2020-12-10\n\n- chore: downgrade node-fetch to 2.x (#142)\n\n## [0.1.4] - 2020-12-04\n\n- chore: update deps\n- docs: update docs\n\n## [0.1.3] - 2020-08-16\n\n- feat: using self built api instead github api\n\n## [0.1.2] - 2020-08-14\n\n- feat: setup after inquire\n- fix: extract zip strip\n\n## [0.1.1] - 2020-08-09\n\n- fix: skip binary files when rendering templates (#5)\n- chore: update dependency ora to v5.0.0\n\n## [0.1.0] - 2020-08-02\n\n- chore: initial release\n\n## [0.0.0] - 2020-07-14\n\n- feat: initial commit\n\n<!-- http://keepachangelog.com/ -->\n\n[1.1.0]: https://github.com/zce/caz/compare/v1.0.0...v1.1.0\n[1.0.0]: https://github.com/zce/caz/compare/v0.8.2...v1.0.0\n[0.8.2]: https://github.com/zce/caz/compare/v0.8.1...v0.8.2\n[0.8.1]: https://github.com/zce/caz/compare/v0.8.0...v0.8.1\n[0.8.0]: https://github.com/zce/caz/compare/v0.7.0...v0.8.0\n[0.7.0]: https://github.com/zce/caz/compare/v0.6.0...v0.7.0\n[0.6.0]: https://github.com/zce/caz/compare/v0.5.1...v0.6.0\n[0.5.1]: https://github.com/zce/caz/compare/v0.5.0...v0.5.1\n[0.5.0]: https://github.com/zce/caz/compare/v0.4.0...v0.5.0\n[0.4.0]: https://github.com/zce/caz/compare/v0.3.0...v0.4.0\n[0.3.0]: https://github.com/zce/caz/compare/v0.2.1...v0.3.0\n[0.2.1]: https://github.com/zce/caz/compare/v0.2.0...v0.2.1\n[0.2.0]: https://github.com/zce/caz/compare/v0.1.5...v0.2.0\n[0.1.5]: https://github.com/zce/caz/compare/v0.1.4...v0.1.5\n[0.1.4]: https://github.com/zce/caz/compare/v0.1.3...v0.1.4\n[0.1.3]: https://github.com/zce/caz/compare/v0.1.2...v0.1.3\n[0.1.2]: https://github.com/zce/caz/compare/v0.1.1...v0.1.2\n[0.1.1]: https://github.com/zce/caz/compare/v0.1.0...v0.1.1\n[0.1.0]: https://github.com/zce/caz/compare/v0.0.0-alpha.2...v0.1.0\n[0.0.0]: https://github.com/zce/caz/releases/tag/v0.0.0-alpha.2\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.072265625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2023 zce <w@zce.me> (https://zce.me)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.7861328125,
          "content": "<div align=\"center\">\n  <a href=\"https://github.com/zce/caz\"><img src=\"docs/caz.png\" alt=\"CAZ\"></a>\n  <p>A simple yet powerful template-based Scaffolding tools for my personal productivity.</p>\n  <p>\n    <a href=\"https://github.com/zce/caz/actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/zce/caz/main.yml\" alt=\"Build Status\"></a>\n    <a href=\"https://codecov.io/gh/zce/caz\"><img src=\"https://img.shields.io/codecov/c/github/zce/caz\" alt=\"Coverage Status\"></a>\n    <a href=\"https://github.com/zce/caz/blob/master/LICENSE\"><img src=\"https://img.shields.io/github/license/zce/caz\" alt=\"License\"></a>\n    <a href=\"https://npm.im/caz\"><img src=\"https://img.shields.io/npm/v/caz\" alt=\"NPM Version\"></a>\n    <a href=\"https://npm.im/caz\"><img src=\"https://img.shields.io/node/v/caz\" alt=\"Node Version\"></a>\n    <br>\n    <a href=\"https://standardjs.com\"><img src=\"https://img.shields.io/badge/code_style-standard-brightgreen\" alt=\"Code Style\"></a>\n    <a href=\"https://npm.im/caz\"><img src=\"https://img.shields.io/npm/dm/caz\" alt=\"NPM Downloads\"></a>\n    <a href=\"https://packagephobia.com/result?p=caz\"><img src=\"https://packagephobia.com/badge?p=caz\" alt=\"Install Size\"></a>\n    <a href=\"https://github.com/zce/caz\"><img src=\"https://img.shields.io/github/repo-size/zce/caz\" alt=\"Repo Size\"></a>\n    <a href=\"https://github.com/zce/caz\"><img src=\"https://img.shields.io/librariesio/github/zce/caz\" alt=\"Dependencies Status\"></a>\n  </p>\n</div>\n\n<br>\n\n**English** | [简体中文](README.zh-CN.md)\n\n## Introduction\n\nCAZ (**C**reate **A**pp **Z**en)\n\nIt's a a simple template-based Scaffolding tools for my personal productivity, inspired by [Yeoman](https://yeoman.io) &amp; [Vue CLI 2](https://npm.im/vue-cli) &amp; etc.\n\n- pronounced: [[kæz]](http://dict.youdao.com/dictvoice?audio=caz) 📷 ✌\n- written: CAZ / caz\n\n_For more introduction, please refer to the [How it works](#how-it-works)._\n\n### Features\n\n- Easy to use\n- Light-weight\n- Still powerful\n- High efficiency\n- Zero dependencies\n- Template-based\n- Configurable\n- Extensible\n- TypeScript\n- Use modern API\n\n> I'll give you specific reasons later.\n\n## Table of Contents\n\n- [Introduction](#introduction)\n  - [Features](#features)\n- [Getting Started](#getting-started)\n  - [Prerequisites](#prerequisites)\n  - [Installation](#installation)\n  - [Quick Start](#quick-start)\n- [Recipes](#recipes)\n  - [GitHub Repo Templates](#github-repo-templates)\n  - [Local Templates](#local-templates)\n  - [Remote ZIP Templates](#remote-zip-templates)\n  - [Offline Mode](#offline-mode)\n  - [Prompts Override](#prompts-override)\n  - [Debug Mode](#debug-mode)\n  - [List Available Templates](#list-available-templates)\n- [Official Templates](#official-templates)\n- [Advanced](#advanced)\n  - [Configuration](#configuration)\n  - [Create Your Template](#create-your-template)\n  - [Create Your Scaffold](#create-your-scaffold)\n- [References](#references)\n- [Motivation](#motivation)\n- [About](#about)\n  - [How It Works](#how-it-works)\n  - [Built With](#built-with)\n- [Roadmap](#roadmap)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Getting Started\n\n### Prerequisites\n\n- [Node.js](https://nodejs.org) (>= 16.x required, >= 18.x preferred)\n- [npm](https://www.npmjs.com) (>= 7.x) or [pnpm](https://pnpm.io) (>= 6.x) or [yarn](https://yarnpkg.com) (>= 1.22)\n- [Git](https://git-scm.com) (>= 2.0)\n\n### Installation\n\n```shell\n# install it globally\n$ npm install -g caz\n\n# or yarn\n$ yarn global add caz\n```\n\n### Quick Start\n\nCreate new project from a template.\n\n```shell\n$ caz <template> [project] [-f|--force] [-o|--offline]\n\n# caz with an official template\n$ caz <template> [project]\n\n# caz with a github repo\n$ caz <owner>/<repo> [project]\n```\n\nIf you only use it occasionally, I recommend that you use `npx` to run `caz` directly.\n\n```shell\n$ npx caz <template> [project] [-f|--force] [-o|--offline]\n```\n\n#### Options\n\n- `-f, --force`: Overwrite if the target exists\n- `-o, --offline`: Try to use an offline template\n\n## Recipes\n\n### GitHub Repo Templates\n\n```shell\n$ caz nm my-project\n```\n\nThe above command pulls the template from [caz-templates/nm](https://github.com/caz-templates/nm), then prompts for some information according to the configuration of this template, and generate the project at `./my-project`.\n\n```shell\n$ caz nm#typescript my-project\n```\n\nBy running this command, CAZ will pulls the template from `typescript` branch of [caz-templates/nm](https://github.com/caz-templates/nm).\n\n#### Use Custom templates\n\n```shell\n$ caz zce/nm my-project\n```\n\nThe above command pulls the template from [zce/nm](https://github.com/zce/nm). This means that you can also pull templates from your public GitHub repository.\n\n**Public repository is necessary.**\n\n### Local Templates\n\nInstead of a GitHub repo, you can also use a template on your local file system.\n\ne.g.\n\n```shell\n$ caz ~/local/template my-project\n```\n\nThe above command use the template from `~/local/template`.\n\n### Remote ZIP Templates\n\nInstead of a GitHub repo, you can also use a template with a zip file uri.\n\ne.g.\n\n```shell\n$ caz https://cdn.zce.me/boilerplate.zip my-project\n```\n\nThe above command will download & extract template from `https://cdn.zce.me/boilerplate.zip`.\n\n### Offline Mode\n\n```shell\n$ caz nm my-project --offline\n```\n\nBy running this command, CAZ will try to find a cached version of `nm` template or download from GitHub if it's not yet cached.\n\n### Prompts Override\n\nCAZ allows you to specify prompt response answers through cli parameters.\n\n```shell\n$ caz minima my-project --name my-proj\n```\n\nBy running this command, you don't have to answer the next `name` prompts.\n\n### Debug Mode\n\n```shell\n$ caz nm my-project --debug\n```\n\n`--debug` parameter will open the debug mode.\n\nIn debug mode, once an exception occurs, the exception details will be automatically output. This is very helpful in finding errors in the template.\n\n### List Available Templates\n\nShow all available templates:\n\n```shell\n$ caz list [owner] [-j|--json] [-s|--short]\n```\n\n#### Arguments\n\n- `[owner]`: GitHub orgs or user slug, default: `'caz-templates'`\n\n#### Options\n\n- `-j, --json`: Output with json format\n- `-s, --short`: Output with short format\n\n## Official Templates\n\nCurrent available templates list:\n\n- [template](https://github.com/caz-templates/template) - for creating [caz](https://github.com/zce/caz) templates.\n- [nm](https://github.com/caz-templates/nm) - for creating [node](https://nodejs.org) modules.\n- [vercel](https://github.com/caz-templates/vercel) - for creating [vercel](https://vercel.com) apps.\n- [react](https://github.com/caz-templates/react) - for creating modern [react](https://reactjs.org) apps.\n- [vue](https://github.com/caz-templates/vue) - for creating modern [vue.js](https://vuejs.org) apps.\n- [vite](https://github.com/caz-templates/vite) - for creating vue.js apps powered by [vite](https://github.com/vitejs/vite).\n- [electron](https://github.com/caz-templates/electron) - :construction: for creating [electron](https://electronjs.org) apps.\n- [mp](https://github.com/caz-templates/mp) - :construction: for creating wechat [mini-programs](https://developers.weixin.qq.com/miniprogram/dev/framework).\n- [jekyll](https://github.com/caz-templates/jekyll) - :construction: for creating [jekyll](https://jekyllrb.com) site.\n- [x-pages](https://github.com/caz-templates/x-pages) - for creating [x-pages](https://github.com/zce/x-pages) static site.\n\nMaybe more: https://github.com/caz-templates\n\n> You can also run `$ caz list` to see all available official templates in real time.\n\n**All templates are currently hosted on GitHub, Chinese users can [use the mirror](#mirror-for-chinese) on coding.net.**\n\n## Advanced\n\n### Configuration\n\nCAZ will read the configuration file in `~/.cazrc`, default config:\n\n```ini\n; template download registry\n; {owner} & {name} & {branch} will eventually be replaced by the corresponding value.\nregistry = https://github.com/{owner}/{name}/archive/{branch}.zip\n; template offlicial organization name\nofficial = caz-templates\n; default template branch name\nbranch = master\n```\n\nThis means that you can customize the configuration by modifying the configuration file.\n\nFor example, in your `~/.cazrc`:\n\n```ini\nregistry = https://gitlab.com/{owner}/{name}/archive/{branch}.zip\nofficial = faker\nbranch = main\n```\n\nThen run the following command:\n\n```shell\n$ caz nm my-project\n```\n\nThe above command will download & extract template from `https://gitlab.com/faker/nm/archive/main.zip`.\n\n#### Mirror for Chinese\n\nDue to network limitations, the template download may time out, you can consider using the mirror repository I configured on [coding.net](https://coding.net).\n\n`~/.cazrc`:\n\n```ini\nregistry = https://zce.coding.net/p/{owner}/d/{name}/git/archive/{branch}\nofficial = caz\n```\n\n#### Socks Proxy\n\nCAZ supports socks proxy config.\n\n`~/.cazrc`:\n\n```ini\nproxy = socks5://127.0.0.1:1080\n```\n\nor environment variable:\n\n```shell\n$ ALL_PROXY=socks5://127.0.0.1:1080 caz nm my-project\n```\n\n### Create Your Template\n\n```shell\n$ caz template my-template\n```\n\nThe above command will pulls the template from [caz-templates/template](https://github.com/caz-templates/template), and help you create your own CAZ template.\n\nTo create and distribute your own template, please refer to the [How to create template](docs/create-template.md).\n\n> Maybe fork an official template is also a good decision.\n\n### Create Your Scaffold\n\n```shell\n# install it locally\n$ npm install caz\n\n# or yarn\n$ yarn add caz\n```\n\nwith ESM and async/await:\n\n```javascript\nimport caz from 'caz'\n\ntry {\n  const template = 'nm'\n  // project path (relative cwd or full path)\n  const project = 'my-project'\n  const options = { force: false, offline: false }\n  // scaffolding by caz...\n  await caz(template, project, options)\n  // success created my-project by nm template\n} catch (e) {\n  // error handling\n  console.error(e)\n}\n```\n\nor with CommonJS and Promise:\n\n```javascript\nconst { default: caz } = require('caz')\n\nconst template = 'nm'\n// project path (relative cwd or full path)\nconst project = 'my-project'\nconst options = { force: false, offline: false }\n// scaffolding by caz...\ncaz(template, project, options)\n  .then(() => {\n    // success created my-project by nm template\n  })\n  .catch(e => {\n    // error handling\n    console.error(e)\n  })\n```\n\nThis means that you can develop your own scaffolding module based on it.\n\nTo create and distribute your own scaffolding tools, please refer to the [How to create scaffolding tools based on CAZ](docs/create-scaffold.md).\n\n## References\n\n<!-- API Docs -->\n\n### caz(template, project?, options?)\n\nCreate new project from a template\n\n#### template\n\n- Type: `string`\n- Details: template name, it can also be a template folder path\n\n#### project\n\n- Type: `string`\n- Details: project name, it can also be a project folder path\n- Default: `'.'`\n\n#### options\n\n- Type: `object`\n- Details: options & prompts override\n- Default: `{}`\n\n##### force\n\n- Type: `boolean`\n- Details: overwrite if the target exists\n- Default: `false`\n\n##### offline\n\n- Type: `boolean`\n- Details: try to use an offline template\n- Default: `false`\n\n##### [key: string]\n\n- Type: `any`\n- Details: cli options to override prompts\n\n## Motivation\n\n👉 🛠 ⚙\n\nJoking: I want to make wheels ;P\n\nThe real reason is that I think I need a scaffolding tool that is more suitable for my personal productivity. The existing tools have more or less certain limitations because of their different starting points.\n\nNothing else.\n\n## Concepts\n\n### How It Works\n\n![Scaffolding flow](https://user-images.githubusercontent.com/6166576/88473012-d4ecb180-cf4b-11ea-968a-5508c6f84502.png)\n\n> P.S. The picture is from the Internet, but I have forgotten the specific source, sorry to the author.\n\n#### Main Workflow\n\nThe [core code](src/index.ts) is based on the middleware mechanism provided by [zce/mwa](https://github.com/zce/mwa).\n\nThe following middleware will be executed sequentially.\n\n1. [confirm](src/confirm.ts) - Confirm destination by [prompts](https://github.com/terkelg/prompts).\n2. [resolve](src/resolve.ts) - Resolve template from remote or local filesystem.\n3. [load](src/load.ts) - Install template dependencies, load template config by `require`.\n4. [inquire](src/inquire.ts) - Inquire template prompts by [prompts](https://github.com/terkelg/prompts).\n5. [setup](src/setup.ts) - Only apply template setup hook function.\n6. [prepare](src/prepare.ts) - Filter out unnecessary files and prepare all files to be generated.\n7. [rename](src/rename.ts) - Rename each file if the filename contains interpolations.\n8. [render](src/render.ts) - Render the contents of each file if template.\n9. [emit](src/emit.ts) - Emit files to destination.\n10. [install](src/install.ts) - Execute `npm | yarn | pnpm install` command if necessary.\n11. [init](src/init.ts) - Execute `git init && git add && git commit` command if necessary.\n12. [complete](src/complete.ts) - Only apply template complete hook function.\n\n### Built With\n\n- [adm-zip](https://github.com/cthackers/adm-zip) - A Javascript implementation of zip for nodejs. Allows user to create or extract zip files both in memory or to/from disk\n- [cac](https://github.com/cacjs/cac) - Simple yet powerful framework for building command-line apps.\n- [env-paths](https://github.com/sindresorhus/env-paths) - Get paths for storing things like data, config, cache, etc\n- [fast-glob](https://github.com/mrmlnc/fast-glob) - It's a very fast and efficient glob library for Node.js\n- [ini](https://github.com/npm/ini) - An ini encoder/decoder for node\n- [lodash](https://github.com/lodash/lodash) - Lodash modular utilities.\n- [node-fetch](https://github.com/node-fetch/node-fetch) - A light-weight module that brings Fetch API to node.js\n- [ora](https://github.com/sindresorhus/ora) - Elegant terminal spinner\n- [prompts](https://github.com/terkelg/promptss) - Lightweight, beautiful and user-friendly prompts\n- [semver](https://github.com/npm/node-semver) - The semantic version parser used by npm.\n- [validate-npm-package-name](https://github.com/npm/validate-npm-package-name) - Give me a string and I'll tell you if it's a valid npm package name\n\n## Roadmap\n\nThe following are the features I want to achieve or are under development:\n\n- [ ] config command\n- [ ] cache command\n- [ ] all lifecycle hooks\n- [ ] console output (colorful & verbose)\n- [ ] more and more official templates\n\nSee the [open issues](https://github.com/zce/caz/issues) for a list of proposed features (and known issues).\n\n## Contributing\n\n1. **Fork** it on GitHub!\n2. **Clone** the fork to your own machine.\n3. **Checkout** your feature branch: `git checkout -b my-awesome-feature`\n4. **Commit** your changes to your own branch: `git commit -am 'Add some feature'`\n5. **Push** your work back up to your fork: `git push -u origin my-awesome-feature`\n6. Submit a **Pull Request** so that we can review your changes.\n\n> **NOTE**: Be sure to merge the latest from \"upstream\" before making a pull request!\n\n## License\n\nDistributed under the MIT License. See [LICENSE](LICENSE) for more information. &copy; [汪磊](https://zce.me)\n\n<!-- Acknowledgements -->\n"
        },
        {
          "name": "README.zh-CN.md",
          "type": "blob",
          "size": 14.7470703125,
          "content": "<div align=\"center\">\n  <a href=\"https://github.com/zce/caz\"><img src=\"docs/caz.png\" alt=\"CAZ\"></a>\n  <p>一个基于模板机制、简单而又强大的脚手架工具，用于提升我个人生产力。</p>\n  <p>\n    <a href=\"https://github.com/zce/caz/actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/zce/caz/main.yml\" alt=\"构建状态\"></a>\n    <a href=\"https://codecov.io/gh/zce/caz\"><img src=\"https://img.shields.io/codecov/c/github/zce/caz\" alt=\"测试覆盖率\"></a>\n    <a href=\"https://github.com/zce/caz/blob/master/LICENSE\"><img src=\"https://img.shields.io/github/license/zce/caz\" alt=\"许可证\"></a>\n    <a href=\"https://npm.im/caz\"><img src=\"https://img.shields.io/npm/v/caz\" alt=\"NPM 版本\"></a>\n    <a href=\"https://npm.im/caz\"><img src=\"https://img.shields.io/node/v/caz\" alt=\"Node 版本要求\"></a>\n    <br>\n    <a href=\"https://standardjs.com\"><img src=\"https://img.shields.io/badge/code_style-standard-brightgreen\" alt=\"代码风格\"></a>\n    <a href=\"https://npm.im/caz\"><img src=\"https://img.shields.io/npm/dm/caz\" alt=\"NPM 下载量\"></a>\n    <a href=\"https://packagephobia.com/result?p=caz\"><img src=\"https://packagephobia.com/badge?p=caz\" alt=\"安装包体积\"></a>\n    <a href=\"https://github.com/zce/caz\"><img src=\"https://img.shields.io/github/repo-size/zce/caz\" alt=\"仓库体积\"></a>\n    <a href=\"https://github.com/zce/caz\"><img src=\"https://img.shields.io/librariesio/github/zce/caz\" alt=\"依赖状态\"></a>\n  </p>\n</div>\n\n<br>\n\n**简体中文** | [English](README.md)\n\n## 简介\n\nCAZ (**C**reate **A**pp **Z**en)\n\n这是一个基于模板机制、简单而强大的脚手架工具，用于提升我个人生产力，受启发于 [Yeoman](https://yeoman.io)、[Vue CLI 2](https://npm.im/vue-cli) 等项目。\n\n- 读作：[[kæz]](http://dict.youdao.com/dictvoice?audio=caz) 📷 ✌\n- 写作：CAZ / caz\n\n_更多介绍，请阅读[它如何工作](#如何工作)。_\n\n### 特性\n\n- 简单易用\n- 轻量化\n- 依然强大\n- 高工作效率\n- 零生产依赖\n- 基于模板\n- 可配置\n- 可扩展\n- 使用 TypeScript\n- 使用现代化的 API\n\n> 稍后我会给出具体的理由。\n\n## 目录\n\n- [简介](#简介)\n  - [特性](#特性)\n- [起步](#起步)\n  - [环境准备](#环境准备)\n  - [安装](#安装)\n  - [快速起步](#快速起步)\n- [配方](#配方)\n  - [GitHub 仓库模板](#gitHub-仓库模板)\n  - [本地模板](#本地模板)\n  - [远程压缩包模板](#远程压缩包模板)\n  - [离线模式](#离线模式)\n  - [命令行参数](#命令行参数)\n  - [调试模式](#调试模式)\n  - [列出可用模板](#列出可用模板)\n- [官方模板](#官方模板)\n- [高级](#高级)\n  - [配置选项](#配置选项)\n  - [创建你的模板](#创建你的模板)\n  - [创建你的脚手架](#创建你的脚手架)\n- [参考资料](#参考资料)\n- [开发动机](#开发动机)\n- [概念](#概念)\n  - [如何工作](#如何工作)\n  - [用到什么](#用到什么)\n- [路线图](#路线图)\n- [参与贡献](#参与贡献)\n- [许可证](#许可证)\n\n## 起步\n\n### 环境准备\n\n- [Node.js](https://nodejs.org) (必须 >= 16.x, >= 18.x 更佳)\n- [npm](https://www.npmjs.com) (>= 7.x) 或 [pnpm](https://pnpm.io) (>= 6.x) 或 [yarn](https://yarnpkg.com) (>= 1.22)\n- [Git](https://git-scm.com) (>= 2.0)\n\n### 安装\n\n```shell\n# 全局安装\n$ npm install -g caz\n\n# 或者使用 yarn 安装\n$ yarn global add caz\n```\n\n### 快速起步\n\n使用模板创建一个新项目。\n\n```shell\n$ caz <template> [project] [-f|--force] [-o|--offline]\n\n# 使用官方模板\n$ caz <template> [project]\n\n# 使用 GitHub 仓库（自定义模板）\n$ caz <owner>/<repo> [project]\n```\n\n如果您只是偶尔使用它，我建议您使用 `npx` 直接运行 `caz`。\n\n```shell\n$ npx caz <template> [project] [-f|--force] [-o|--offline]\n```\n\n#### 选项\n\n- `-f, --force`: 如果目标存在就覆盖掉\n- `-o, --offline`: 尝试使用本地离线缓存模板\n\n## 配方\n\n### GitHub 仓库模板\n\n```shell\n$ caz nm my-project\n```\n\n此命令会从 [caz-templates/nm](https://github.com/caz-templates/nm) 拉取模板，然后根据模板的配置，询问你一些问题，最后生成项目在 `./my-project`。\n\n```shell\n$ caz nm#typescript my-project\n```\n\n运行此命令，CAZ 将从 [caz-templates/nm](https://github.com/caz-templates/nm) 的 `typescript` 分支拉取模板。\n\n#### 使用自定义模板\n\n```shell\n$ caz zce/nm my-project\n```\n\n此命令会从 [zce/nm](https://github.com/zce/nm) 拉取模板。这意味着你也可以从你的公开 GitHub 仓库拉取模板。\n\n**注意：模板必须使用公开的仓库。**\n\n### 本地模板\n\n你也可以使用本地文件系统的模板。\n\n例如：\n\n```shell\n$ caz ~/local/template my-project\n```\n\n以上命令将使用 `~/local/template` 文件夹作为模板。\n\n### 远程压缩包模板\n\n你也可以使用 zip 压缩包的模板。\n\n例如：\n\n```shell\n$ caz https://cdn.zce.me/boilerplate.zip my-project\n```\n\n以上命令将从 `https://cdn.zce.me/boilerplate.zip` 下载并解压模板。\n\n### 离线模式\n\n```shell\n$ caz nm my-project --offline\n```\n\n运行以上命令，CAZ 将尝试从缓存中找到 `nm` 模板，如果找不到该模板的缓存，它仍将自动从 GitHub 下载。\n\n### 命令行参数\n\nCAZ 允许你通过命令行参数来指定提示问题的答案。\n\n```shell\n$ caz minima my-project --name my-proj\n```\n\n运行以上命令，你就不用再回答接下来 `name` 的问题了。\n\n### 调试模式\n\n```shell\n$ caz nm my-project --debug\n```\n\n`--debug` 参数将打开调试模式。\n\n在调试模式下，一旦发生异常，命令行将自动输出异常详细信息。这对于查找模板中的错误非常有帮助。\n\n### 列出可用模版\n\n显示全部可用的模板：\n\n```shell\n$ caz list [owner] [-j|--json] [-s|--short]\n```\n\n#### 参数\n\n- `[owner]`: GitHub 组织或用户的别名, 默认值：`'caz-templates'`\n\n#### 选项\n\n- `-j, --json`: 以 JSON 格式输出\n- `-s, --short`: 以精简格式输出\n\n## 官方模板\n\n目前 CAZ 可用的官方模板有：\n\n- [template](https://github.com/caz-templates/template) - 用来创建 [CAZ](https://github.com/zce/caz) 的模板\n- [nm](https://github.com/caz-templates/nm) - 用来创建 [Node](https://nodejs.org) 模块\n- [vercel](https://github.com/caz-templates/vercel) - 用来创建 [Vercel](https://vercel.com) 应用\n- [react](https://github.com/caz-templates/react) - 用来创建现代化 [React](https://reactjs.org) 应用\n- [vue](https://github.com/caz-templates/vue) - 用来创建现代化 [Vue.js](https://vuejs.org) 应用\n- [vite](https://github.com/caz-templates/vite) - 用来创建基于 [Vite](https://github.com/vitejs/vite) 的 Vue.js 应用\n- [electron](https://github.com/caz-templates/electron) - :construction: 用来创建 [Electron](https://electronjs.org) 应用\n- [mp](https://github.com/caz-templates/mp) - :construction: 用来创建[微信小程序](https://developers.weixin.qq.com/miniprogram/dev/framework)\n- [jekyll](https://github.com/caz-templates/jekyll) - :construction: 用来创建 [Jekyll](https://jekyllrb.com) 站点\n- [x-pages](https://github.com/caz-templates/x-pages) - 用来创建 [X-Pages](https://github.com/zce/x-pages) 静态站点\n\n可能还有更多：https://github.com/caz-templates\n\n> 你也可以通过运行 `$ caz list` 命令来实时列出所有官方模板。\n\n**目前所有模板都托管在 GitHub 上，中国用户可以[使用在 coding.net 上镜像](#中国用户镜像)。**\n\n## 高级\n\n### 配置选项\n\nCAZ 将会读取 `~/.cazrc` 配置文件，默认配置：\n\n```ini\n; 模板下载地址\n; {owner} & {name} & {branch} 最终将被相应的值替换。\nregistry = https://github.com/{owner}/{name}/archive/{branch}.zip\n; 模板缺省 owner 的值，可以理解为官方名称\nofficial = caz-templates\n; 缺省的模板分支名称\nbranch = master\n```\n\n这就意味着你可以通过修改配置文件来自定义配置。\n\n例如，你的 `~/.cazrc`：\n\n```ini\nregistry = https://gitlab.com/{owner}/{name}/archive/{branch}.zip\nofficial = faker\nbranch = main\n```\n\n然后运行以下命令：\n\n```shell\n$ caz nm my-project\n```\n\n这样就会从 `https://gitlab.com/faker/nm/archive/main.zip` 下载模板。\n\n#### 中国用户镜像\n\n由于网络限制，很多时候下载 GitHub 上的模板都会超时，你可以考虑使用我在 [coding.net](https://coding.net) 上镜像的模板。\n\n`~/.cazrc`:\n\n```ini\nregistry = https://zce.coding.net/p/{owner}/d/{name}/git/archive/{branch}\nofficial = caz\n```\n\n#### 请求代理\n\nCAZ 支持网络请求代理配置。\n\n`~/.cazrc`:\n\n```ini\nproxy = socks5://127.0.0.1:1080\n```\n\n或者在使用环境变量:\n\n```shell\n$ ALL_PROXY=socks5://127.0.0.1:1080 caz nm my-project\n```\n\n### 创建你的模板\n\n```shell\n$ caz template my-template\n```\n\n以上命令会从 [caz-templates/template](https://github.com/caz-templates/template) 下载模板，并帮你创建你自己的 CAZ 模板。\n\n创建并发布模板，详细可以请参考 [如何创建模板](docs/create-template.zh-CN.md)。\n\n> 也许 fork 一个官方模板是一个更好的决定。\n\n### 创建你的脚手架\n\n```shell\n# 本地安装 caz 模块\n$ npm install caz\n\n# 或者使用 yarn 安装\n$ yarn add caz\n```\n\n以 ESM 和 async/await 的方式使用：\n\n```javascript\nimport caz from 'caz'\n\ntry {\n  const template = 'nm'\n  // project path (relative cwd or full path)\n  const project = 'my-project'\n  const options = { force: false, offline: false }\n  // scaffolding by caz...\n  await caz(template, project, options)\n  // success created my-project by nm template\n} catch (e) {\n  // error handling\n  console.error(e)\n}\n```\n\n或者使用 CommonJS 和 Promise 的方式：\n\n```javascript\nconst { default: caz } = require('caz')\n\nconst template = 'nm'\n// project path (relative cwd or full path)\nconst project = 'my-project'\nconst options = { force: false, offline: false }\n// scaffolding by caz...\ncaz(template, project, options)\n  .then(() => {\n    // success created my-project by nm template\n  })\n  .catch(e => {\n    // error handling\n    console.error(e)\n  })\n```\n\n这也就意味着你可以基于 CAZ 模块开发自己的脚手架工具。\n\n创建并发布脚手架工具，详细可以请参考 [如何创建脚手架工具](docs/create-scaffold.zh-CN.md)。\n\n## 参考资料\n\n<!-- API Docs -->\n\n### caz(template, project?, options?)\n\n使用指定模板创建一个新项目\n\n#### template\n\n- 类型：`string`\n- 描述：模板名称，也可以是模板文件夹路径\n\n#### project\n\n- 类型：`string`\n- 描述：项目名称，也可以是项目文件夹路径\n- 默认值：`'.'`\n\n#### options\n\n- 类型：`object`\n- 描述：选项参数 & 预设询问结果\n- 默认值：`{}`\n\n##### force\n\n- 类型：`boolean`\n- 描述：如果目标路径已存在就强制覆盖\n- 默认值：`false`\n\n##### offline\n\n- 类型：`boolean`\n- 描述：尝试使用离线模板\n- 默认值：`false`\n\n##### [key: string]\n\n- 类型：`any`\n- 描述：命令行参数覆盖问题答案\n\n## 开发动机\n\n👉 🛠 ⚙\n\n开个玩笑：我就是想造个轮子 ;P\n\n真实的原因是因为我觉得我需要一个更适合我的个人生产力的脚手架工具：简洁、强大、高效。现存的工具因为出发点的不同，都或多或少有一定的局限性。\n\n再无其他\n\n## 概念\n\n### 如何工作\n\n![脚手架工作流程](https://user-images.githubusercontent.com/6166576/88473012-d4ecb180-cf4b-11ea-968a-5508c6f84502.png)\n\n> P.S. 图片来自互联网，但是我没有记住具体来源，这里对愿作者说声抱歉。\n\n#### 主要的工作流程\n\n[核心代码](src/index.ts) 是基于 [zce/mwa](https://github.com/zce/mwa) 项目提供的中间件机制。\n\n以下中间件将按顺序依次执行：\n\n1. [confirm](src/confirm.ts) - 使用 [prompts](https://github.com/terkelg/prompts) 确认目标路径可用。\n2. [resolve](src/resolve.ts) - 从远程或者本地磁盘中找到模板。\n3. [load](src/load.ts) - 自动安装模板依赖项，使用 `require` 加载模板的配置文件。\n4. [inquire](src/inquire.ts) - 使用 [prompts](https://github.com/terkelg/prompts) 询问用户模板所需要的问题。\n5. [setup](src/setup.ts) - 只是调用模板中定义的 `setup` 钩子函数。\n6. [prepare](src/prepare.ts) - 过滤掉不需要的文件，并读取全部将要输出的文件内容。\n7. [rename](src/rename.ts) - 如果文件名中包含插值表达式就重命名文件（替换文件名中的变量）。\n8. [render](src/render.ts) - 如果文件是一个模板文件就渲染文件内容（替换文件内容中的变量）。\n9. [emit](src/emit.ts) - 将每一个文件内容输出写入到目标路径。\n10. [install](src/install.ts) - 如果需要的话，执行 `npm | yarn | pnpm install`。\n11. [init](src/init.ts) - 如果需要的话，执行 `git init && git add && git commit`。\n12. [complete](src/complete.ts) - 只是调用模板中定义的 `complete` 钩子函数。\n\n### 用到什么\n\n- [adm-zip](https://github.com/cthackers/adm-zip) - 一个 JavaScript 实现的 zip 文件压缩解压缩的库，支持内存和磁盘上的压缩解压缩。\n- [cac](https://github.com/cacjs/cac) - 简单而强大的命令行工具框架。\n- [env-paths](https://github.com/sindresorhus/env-paths) - 获取系统存储路径，例如数据、配置、缓存等。\n- [fast-glob](https://github.com/mrmlnc/fast-glob) - 非常快的和非常高效的 glob 库，用于 Node.js\n- [ini](https://github.com/npm/ini) - 一个 Node.js 的 ini 文件解析器。\n- [lodash](https://github.com/lodash/lodash) - Lodash 工具库。\n- [node-fetch](https://github.com/node-fetch/node-fetch) - 一个 Node.js 的 fetch API 的封装。\n- [ora](https://github.com/sindresorhus/ora) - 强大的终端加载动画。\n- [prompts](https://github.com/terkelg/promptss) - 轻量级，美观的和用户友好的提示。\n- [semver](https://github.com/npm/node-semver) - 一个 Node.js 的 semver 库。\n- [validate-npm-package-name](https://github.com/npm/validate-npm-package-name) - 一个 Node.js 的 npm 包名验证器。\n\n## 路线图\n\n以下是我想要实现或者正在开发的功能：\n\n- [ ] config 命令\n- [ ] cache 命令\n- [ ] 全部生命周期钩子\n- [ ] 静默控制台输出 & 彩色控制台输出\n- [ ] 越来越多的官方模板\n\n也可以查看 [打开的 Issues](https://github.com/zce/caz/issues) 中有关建议功能（和已知问题）的列表。\n\n## 参与贡献\n\n1. **Fork** 一个仓库在 GitHub 上!\n2. **Clone** 你复刻的仓库到你本地机器上\n3. **Checkout** 一个特性分支：`git checkout -b my-awesome-feature`\n4. **Commit** 你的修改到你自己的分支上：`git commit -am 'Add some feature'`\n5. **Push** 你的修改到你复刻的仓库中：`git push -u origin my-awesome-feature`\n6. 提交一个 **Pull Request** 让我可以看到你的修改\n\n> **提示**: 请确保尝试合并你的修改之前已经拉取了上游最新的代码。\n\n## 许可证\n\n基于 MIT 协议开源，有关详细信息请查看 [LICENSE](LICENSE) 文件。&copy; [汪磊](https://zce.me)\n\n<!-- Acknowledgements -->\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.046875,
          "content": "{\n  \"name\": \"caz\",\n  \"version\": \"2.0.0\",\n  \"description\": \"A simple yet powerful template-based Scaffolding tools.\",\n  \"keywords\": [\n    \"productivity\",\n    \"scaffolding\",\n    \"boilerplate\",\n    \"generator\",\n    \"starter-kit\",\n    \"templates\",\n    \"template\",\n    \"caz\",\n    \"cli\",\n    \"zce\"\n  ],\n  \"homepage\": \"https://github.com/zce/caz#readme\",\n  \"bugs\": {\n    \"url\": \"https://github.com/zce/caz/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/zce/caz.git\"\n  },\n  \"license\": \"MIT\",\n  \"author\": {\n    \"name\": \"zce\",\n    \"email\": \"w@zce.me\",\n    \"url\": \"https://zce.me\"\n  },\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"bin\": \"dist/cli.js\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"scripts\": {\n    \"build\": \"tsup\",\n    \"lint\": \"ts-standard\",\n    \"test\": \"vitest run\",\n    \"prepare\": \"husky install .github/husky\"\n  },\n  \"tsup\": {\n    \"entry\": [\n      \"src/index.ts\",\n      \"src/cli.ts\"\n    ],\n    \"clean\": true,\n    \"minify\": false,\n    \"splitting\": true,\n    \"dts\": {\n      \"entry\": \"src/index.ts\",\n      \"resolve\": true\n    }\n  },\n  \"commitlint\": {\n    \"extends\": [\n      \"@commitlint/config-conventional\"\n    ]\n  },\n  \"lint-staged\": {\n    \"*.{ts,js}\": \"ts-standard --fix\"\n  },\n  \"renovate\": {\n    \"extends\": [\n      \"zce\"\n    ]\n  },\n  \"devDependencies\": {\n    \"@commitlint/cli\": \"17.7.1\",\n    \"@commitlint/config-conventional\": \"17.7.0\",\n    \"@types/adm-zip\": \"0.5.1\",\n    \"@types/ini\": \"1.3.31\",\n    \"@types/lodash\": \"4.14.198\",\n    \"@types/node\": \"20.11.22\",\n    \"@types/semver\": \"7.5.2\",\n    \"@types/validate-npm-package-name\": \"4.0.0\",\n    \"adm-zip\": \"0.5.10\",\n    \"cac\": \"6.7.14\",\n    \"env-paths\": \"3.0.0\",\n    \"fast-glob\": \"3.3.1\",\n    \"husky\": \"8.0.3\",\n    \"ini\": \"4.1.1\",\n    \"lint-staged\": \"15.2.4\",\n    \"lodash\": \"4.17.21\",\n    \"node-fetch\": \"3.3.2\",\n    \"ora\": \"7.0.1\",\n    \"prompts\": \"2.4.2\",\n    \"semver\": \"7.5.4\",\n    \"socks-proxy-agent\": \"8.0.2\",\n    \"ts-standard\": \"12.0.2\",\n    \"tsup\": \"7.2.0\",\n    \"typescript\": \"5.2.2\",\n    \"validate-npm-package-name\": \"5.0.0\",\n    \"vitest\": \"0.34.4\"\n  },\n  \"engines\": {\n    \"node\": \">=16\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.1318359375,
          "content": "{\n  \"compilerOptions\": {\n    \"target\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true,\n    \"strict\": true\n  }\n}\n"
        },
        {
          "name": "types.d.ts",
          "type": "blob",
          "size": 4.845703125,
          "content": "/**\n * PackageJson declaration type.\n * for import package.js as ESM without having to participate in compilation\n * declarations.d.ts\n */\n\ndeclare module '*/package.json' {\n  export const name: string\n  export const version: string\n}\n\ndeclare module 'prompts' {\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/prompts/index.d.ts\n  import { Readable, Writable } from 'stream'\n\n  export = prompts\n\n  interface Color {\n    (x: string | number): string\n    (): Kleur\n  }\n\n  interface Kleur {\n    // Colors\n    black: Color\n    red: Color\n    green: Color\n    yellow: Color\n    blue: Color\n    magenta: Color\n    cyan: Color\n    white: Color\n    gray: Color\n    grey: Color\n\n    // Backgrounds\n    bgBlack: Color\n    bgRed: Color\n    bgGreen: Color\n    bgYellow: Color\n    bgBlue: Color\n    bgMagenta: Color\n    bgCyan: Color\n    bgWhite: Color\n\n    // Modifiers\n    reset: Color\n    bold: Color\n    dim: Color\n    italic: Color\n    underline: Color\n    inverse: Color\n    hidden: Color\n    strikethrough: Color\n  }\n\n  function prompts<T extends string = string> (\n    questions: prompts.PromptObject<T> | Array<prompts.PromptObject<T>>,\n    options?: prompts.Options\n  ): Promise<prompts.Answers<T>>\n\n  namespace prompts {\n    // Circular reference from prompts\n    const prompt: any\n\n    function inject (arr: readonly any[]): void\n\n    namespace inject {\n      const prototype: {}\n    }\n\n    function override (obj: { [key: string]: any }): void\n\n    namespace override {\n      const prototype: {}\n    }\n\n    namespace prompts {\n      function autocomplete (args: PromptObject): any\n\n      function confirm (args: PromptObject): void\n\n      function date (args: PromptObject): any\n\n      function invisible (args: PromptObject): any\n\n      function list (args: PromptObject): any\n\n      function multiselect (args: PromptObject): any\n\n      function number (args: PromptObject): void\n\n      function password (args: PromptObject): any\n\n      function select (args: PromptObject): void\n\n      function text (args: PromptObject): void\n\n      function toggle (args: PromptObject): void\n    }\n\n    // Based upon: https://github.com/terkelg/prompts/blob/d7d2c37a0009e3235b2e88a7d5cdbb114ac271b2/lib/elements/select.js#L29\n    interface Choice {\n      title: string\n      value?: any\n      disabled?: boolean | undefined\n      selected?: boolean | undefined\n      description?: string | undefined\n    }\n\n    interface Options {\n      onSubmit?:\n      | ((prompt: PromptObject, answer: any, answers: any[]) => void)\n      | undefined\n      onCancel?: ((prompt: PromptObject, answers: any) => void) | undefined\n    }\n\n    interface PromptObject<T extends string = string> {\n      type: PromptType | Falsy | PrevCaller<T, PromptType | Falsy>\n      name: ValueOrFunc<T>\n      message?: ValueOrFunc<string> | undefined\n      initial?:\n      | InitialReturnValue\n      | PrevCaller<T, InitialReturnValue | Promise<InitialReturnValue>>\n      | undefined\n      style?: string | PrevCaller<T, string | Falsy> | undefined\n      format?: PrevCaller<T, void> | undefined\n      validate?:\n      | PrevCaller<T, boolean | string | Promise<boolean | string>>\n      | undefined\n      onState?: PrevCaller<T, void> | undefined\n      onRender?: ((kleur: Kleur) => void) | undefined\n      min?: number | PrevCaller<T, number | Falsy> | undefined\n      max?: number | PrevCaller<T, number | Falsy> | undefined\n      float?: boolean | PrevCaller<T, boolean | Falsy> | undefined\n      round?: number | PrevCaller<T, number | Falsy> | undefined\n      instructions?: string | boolean | undefined\n      increment?: number | PrevCaller<T, number | Falsy> | undefined\n      separator?: string | PrevCaller<T, string | Falsy> | undefined\n      active?: string | PrevCaller<T, string | Falsy> | undefined\n      inactive?: string | PrevCaller<T, string | Falsy> | undefined\n      choices?: Choice[] | PrevCaller<T, Choice[] | Falsy> | undefined\n      hint?: string | PrevCaller<T, string | Falsy> | undefined\n      warn?: string | PrevCaller<T, string | Falsy> | undefined\n      suggest?: ((input: any, choices: Choice[]) => Promise<any>) | undefined\n      limit?: number | PrevCaller<T, number | Falsy> | undefined\n      mask?: string | PrevCaller<T, string | Falsy> | undefined\n      stdout?: Writable | undefined\n      stdin?: Readable | undefined\n    }\n\n    type Answers<T extends string> = { [id in T]: any }\n\n    type PrevCaller<T extends string, R = T> = (\n      prev: any,\n      values: Answers<T>,\n      prompt: PromptObject\n    ) => R\n\n    type Falsy = false | null | undefined\n\n    type PromptType =\n      | 'text'\n      | 'password'\n      | 'invisible'\n      | 'number'\n      | 'confirm'\n      | 'list'\n      | 'toggle'\n      | 'select'\n      | 'multiselect'\n      | 'autocomplete'\n      | 'date'\n      | 'autocompleteMultiselect'\n\n    type ValueOrFunc<T extends string> = T | PrevCaller<T>\n\n    type InitialReturnValue = string | number | boolean | Date\n  }\n}\n"
        }
      ]
    }
  ]
}