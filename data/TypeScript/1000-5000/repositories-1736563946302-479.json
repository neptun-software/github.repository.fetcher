{
  "metadata": {
    "timestamp": 1736563946302,
    "page": 479,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ondras/my-mind",
      "stars": 3310,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0166015625,
          "content": "node_modules\n.js\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013-2019 Ondrej Zara\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.4892578125,
          "content": "MAKEOPTS := \"-r\"\nTSC := npm exec -- tsc\nLESSC := npm exec -- lessc\nESBUILD := npm exec -- esbuild\n\nJS := .js\nFLAG := $(JS)/.tsflag\nAPP := my-mind.js\nSTYLE := my-mind.css map.css\n\nall: $(APP) $(STYLE)\n\n%.css: css/*.less\n\t$(LESSC) css/$*.less > $@\n\n$(APP): $(FLAG)\n\t$(ESBUILD) --bundle $(JS)/$(APP) > $@\n\n$(FLAG): $(shell find src -type f)\n\t$(TSC) -p src\n\ttouch $@\n\nwatch: all\n\twhile inotifywait -e MODIFY -r src css ; do $(MAKE) $^ ; done\n\nclean:\n\trm -rf $(JS) $(APP) $(STYLE)\n\n.PHONY: all clean watch\n"
        },
        {
          "name": "PRIVACY.txt",
          "type": "blob",
          "size": 0.5771484375,
          "content": "Privacy Policy\n==============\n\nThis application can be configured to use Google Drive as a storage option for Mind Map design files. If you decide to do so, please note that My Mind will have a theoretical access to all your Google Drive files.\n\nThis application, however, only saves/loads those files that are explicitely requested by the user via My Mind's User Interface.\n\nThis application is not accessing, reading, writing, modifying or deleting other kinds of data. In particular, user data and metadata (information about the user logged into the Google ecosystem) is never accessed.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.8212890625,
          "content": "# My Mind\n\n![Screenshot](screenshot.png)\n\nMy Mind is a web application for creating and managing Mind maps. It is free to use and you can fork its source code. It is distributed under the terms of the MIT license.\n\nNew to Mind maps? They are useful, aesthetic and cool! Read more about these special diagrams in [the Wikipedia article](https://en.wikipedia.org/wiki/Mind_map).\n\n* [Official web page](https://my-mind.github.io/)\n* [Sample mind map](https://my-mind.github.io/?map=examples/features.mymind) showcasing many features\n* [News / Changelog](https://github.com/ondras/my-mind/wiki/News)\n* [Documentation](https://github.com/ondras/my-mind/wiki)\n* <a target=\"_blank\" href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=3340079\"><img src=\"https://www.paypal.com/en_GB/i/btn/btn_donate_LG.gif\" alt=\"Donate\" title=\"Donate to support further development\" /></a>\n\n## Installation\nNote: there is also an online version, which can be found at [my-mind.github.io](https://my-mind.github.io/)\n\n* Download the zip by clicking [here](https://github.com/ondras/my-mind/archive/refs/heads/master.zip) and extract the archive, or clone the repository using git\n* Put the app somewhere where it is accessible via your local webserver\n  * Open it using a `http://localhost` URL\n  * ~~Open index.html in your webbrowser~~ currently not working\n* Done! If need be, you can find the manual [here](https://github.com/ondras/my-mind/wiki)\n\n## Contributing\n\nDo you want to participate?\n\n* Found a bug? [Open an issue.](https://github.com/ondras/my-mind/issues)\n* Not sure how to do stuff? [Check the docs.](https://github.com/ondras/my-mind/wiki)\n* Have a feature request? [Open an issue.](https://github.com/ondras/my-mind/issues)\n* Have an improvement? [Submit a pull request.](https://github.com/ondras/my-mind/pulls)\n\n## License\n[MIT](LICENSE.txt)\n"
        },
        {
          "name": "css",
          "type": "tree",
          "content": null
        },
        {
          "name": "editor.html",
          "type": "blob",
          "size": 2.900390625,
          "content": "<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width,user-scalable=no,initial-scale=1.0\" />\n    <title></title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://unpkg.com/pell/dist/pell.min.css\">\n    <style>\n        body {\n            margin: 0;\n            padding: 0;\n        }\n\n        main {\n            height: 100vh;\n            display: flex;\n            flex-direction: column;\n        }\n\n        .pell-content {\n            flex: auto;\n        }\n\n    </style>\n</head>\n<body>\n    <main></main>\n    <script src=\"https://unpkg.com/pell\"></script>\n    <script>\n\n        var sendMessage = function(action, value) {\n            window.parent.postMessage({\n                action: action,\n                value: value\n            }, '*');\n        };\n\n        window.addEventListener(\"message\", function(e) {\n            if (e.data && e.data.action) {\n                switch (e.data.action) {\n                    case \"setContent\":\n                        window.editor.content.innerHTML = e.data.value;\n                        break;\n\n                    case \"getContent\":\n                        sendMessage('setContent', window.editor.content.innerHTML);\n                        break;\n                }\n            }\n        }, false);\n\n            window.editor = window.pell.init({\n                element: document.querySelector(\"main\"),\n                onChange(html) {\n                    sendMessage(\"setContent\", html);\n                },\n                defaultParagraphSeparator: 'div',\n                styleWithCSS: false,\n                actions: [\n                    'bold',\n                    'italic',\n                    'underline',\n                    'strikethrough',\n                    'heading1',\n                    'heading2',\n                    'paragraph',\n                    'quote',\n                    'olist',\n                    'ulist',\n                    'code',\n                    'line',\n                    {\n                        name: 'link',\n                        result: function() {\n                            const url = window.prompt('Enter the link URL');\n                            if (url) {\n                                window.pell.exec('createLink', url);\n                            }\n                        }\n                    },\n                    {\n                        name: 'close',\n                        icon: 'Close',\n                        title: 'Close Notes',\n                        result: function() {\n                            sendMessage('closeEditor', true);\n                        }\n                    }\n                ],\n                classes: {\n                    actionbar: 'pell-actionbar',\n                    button: 'pell-button',\n                    content: 'pell-content',\n                    selected: 'pell-button-selected'\n                }\n            })\n    </script>\n</body>\n</html>"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "favicon.ico",
          "type": "blob",
          "size": 33.875,
          "content": null
        },
        {
          "name": "github.png",
          "type": "blob",
          "size": 1.673828125,
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 57.2060546875,
          "content": "<!doctype html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width,user-scalable=no,initial-scale=1.0\" />\n\t\t<title>My Mind</title>\n\t\t<link rel=\"icon\" href=\"favicon.ico\" />\n\n\t\t<link rel=\"stylesheet\" href=\"my-mind.css\" />\n\t\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\n\t\t<base target=\"_blank\" />\n\n\t</head>\n\t<body>\n\t\t<main>\n\t\t\t<div id=\"tip\">This app's internals have been recently overhauled &ndash; report any <a href=\"https://github.com/ondras/my-mind/issues\">issues</a> you encounter! For more tips/news, follow <a href=\"https://twitter.com/my_mind_app\">@my_mind_app</a>.</div>\n<!--\t\t\t<div id=\"tip\">Type <code>:screenshot --selector svg</code> in Firefox Console to save the Map as an image! For more tips/news, follow <a href=\"https://twitter.com/my_mind_app\">@my_mind_app</a>.</div> -->\n<!--\t\t\t<div id=\"tip\">Press ‘Tab’ to Insert Child, ‘Enter’ to Insert Sibling Node. For more tips/news, follow <a href=\"https://twitter.com/my_mind_app\">@my_mind_app</a>.</div> -->\n\t\t</main>\n\n\t\t<div id=\"ui\" class=\"pane\">\n\t\t\t<h3>My Mind</h3>\n\n\t\t\t<div class=\"scrollable\">\n\n\t\t\t<p class=\"row\">\n\t\t\t\t<button data-command=\"new\" title=\"New\"><img src=\"img/new.png\" alt=\"New\" /></button>\n\t\t\t\t<button data-command=\"load\" title=\"Open\"><img src=\"img/open.png\" alt=\"Open\" /></button>\n\t\t\t\t<button data-command=\"save\" title=\"Save\"><img src=\"img/save.png\" alt=\"Save\" /></button>\n\t\t\t\t<button data-command=\"save-as\" title=\"Save as\"><img src=\"img/save-as.png\" alt=\"Save as\" /></button>\n\t\t\t</p>\n\n\t\t\t<p>\n\t\t\t\t<label><span>Layout</span>\n\t\t\t\t<select id=\"layout\">\n\t\t\t\t\t<option value=\"\">(Inherit)</option>\n\t\t\t\t</select></label>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<label><span>Shape</span>\n\t\t\t\t<select id=\"shape\">\n\t\t\t\t\t<option value=\"\">(Automatic)</option>\n\t\t\t\t</select></label>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<label><span>Value</span>\n\t\t\t\t<select id=\"value\">\n\t\t\t\t\t<option value=\"\">(None)</option>\n\t\t\t\t\t<option value=\"num\">Number</option>\n\t\t\t\t\t<optgroup label=\"Formula\">\n\t\t\t\t\t\t<option value=\"sum\">Sum</option>\n\t\t\t\t\t\t<option value=\"avg\">Average</option>\n\t\t\t\t\t\t<option value=\"min\">Minimum</option>\n\t\t\t\t\t\t<option value=\"max\">Maximum</option>\n\t\t\t\t\t</optgroup>\n\t\t\t\t</select></label>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<label><span>Status</span>\n\t\t\t\t<select id=\"status\">\n\t\t\t\t\t<option value=\"\">None</option>\n\t\t\t\t\t<option value=\"yes\">Yes</option>\n\t\t\t\t\t<option value=\"no\">No</option>\n\t\t\t\t\t<option value=\"computed\">Autocompute</option>\n\t\t\t\t</select></label>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<span>Item color</span>\n\t\t\t\t<span id=\"color\" class=\"color-picker\">\n\t\t\t\t\t<a data-color=\"\" title=\"Inherit\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#000\" title=\"Black\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#e33\" title=\"Red\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#fa3\" title=\"Orange\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#f1c40f\" title=\"Yellow 2\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#dd3\" title=\"Yellow\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#bfff00\" title=\"Light Green\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#3e3\" title=\"Green\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#33e\" title=\"Blue\" href=\"#\"></a>\n                    \t\t\t<a data-color=\"#2980b9\" title=\"Blue 2\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#3dd\" title=\"Cyan\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#d3d\" title=\"Magenta\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#9b59b6\" title=\"Magenta 2\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#660066\" title=\"Purple\" href=\"#\"></a>\n\t\t\t\t</span>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<span>Text color</span>\n\t\t\t\t<span id=\"text-color\" class=\"color-picker\">\n\t\t\t\t\t<a data-color=\"\" title=\"Inherit\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#000\" title=\"Black\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#e33\" title=\"Red\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#fa3\" title=\"Orange\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#f1c40f\" title=\"Yellow 2\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#dd3\" title=\"Yellow\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#bfff00\" title=\"Light Green\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#3e3\" title=\"Green\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#33e\" title=\"Blue\" href=\"#\"></a>\n                    \t\t\t<a data-color=\"#2980b9\" title=\"Blue 2\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#3dd\" title=\"Cyan\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#d3d\" title=\"Magenta\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#9b59b6\" title=\"Magenta 2\" href=\"#\"></a>\n\t\t\t\t\t<a data-color=\"#660066\" title=\"Purple\" href=\"#\"></a>\n\t\t\t\t</span>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\t<label><span>Icons</span>\n\t\t\t\t<select id=\"icons\">\n\t\t\t\t\t<option value=''>None</option>\n\t\t\t\t\t<option value='fa-500px'>&#xf26e; 500px</option>\n\t\t\t\t\t<option value='fa-address-book'>&#xf2b9; address-book</option>\n\t\t\t\t\t<option value='fa-address-book-o'>&#xf2ba; address-book-o</option>\n\t\t\t\t\t<option value='fa-address-card'>&#xf2bb; address-card</option>\n\t\t\t\t\t<option value='fa-address-card-o'>&#xf2bc; address-card-o</option>\n\t\t\t\t\t<option value='fa-adjust'>&#xf042; adjust</option>\n\t\t\t\t\t<option value='fa-adn'>&#xf170; adn</option>\n\t\t\t\t\t<option value='fa-align-center'>&#xf037; align-center</option>\n\t\t\t\t\t<option value='fa-align-justify'>&#xf039; align-justify</option>\n\t\t\t\t\t<option value='fa-align-left'>&#xf036; align-left</option>\n\t\t\t\t\t<option value='fa-align-right'>&#xf038; align-right</option>\n\t\t\t\t\t<option value='fa-amazon'>&#xf270; amazon</option>\n\t\t\t\t\t<option value='fa-ambulance'>&#xf0f9; ambulance</option>\n\t\t\t\t\t<option value='fa-american-sign-language-interpreting'>&#xf2a3; american-sign-language-interpreting</option>\n\t\t\t\t\t<option value='fa-anchor'>&#xf13d; anchor</option>\n\t\t\t\t\t<option value='fa-android'>&#xf17b; android</option>\n\t\t\t\t\t<option value='fa-angellist'>&#xf209; angellist</option>\n\t\t\t\t\t<option value='fa-angle-double-down'>&#xf103; angle-double-down</option>\n\t\t\t\t\t<option value='fa-angle-double-left'>&#xf100; angle-double-left</option>\n\t\t\t\t\t<option value='fa-angle-double-right'>&#xf101; angle-double-right</option>\n\t\t\t\t\t<option value='fa-angle-double-up'>&#xf102; angle-double-up</option>\n\t\t\t\t\t<option value='fa-angle-down'>&#xf107; angle-down</option>\n\t\t\t\t\t<option value='fa-angle-left'>&#xf104; angle-left</option>\n\t\t\t\t\t<option value='fa-angle-right'>&#xf105; angle-right</option>\n\t\t\t\t\t<option value='fa-angle-up'>&#xf106; angle-up</option>\n\t\t\t\t\t<option value='fa-apple'>&#xf179; apple</option>\n\t\t\t\t\t<option value='fa-archive'>&#xf187; archive</option>\n\t\t\t\t\t<option value='fa-area-chart'>&#xf1fe; area-chart</option>\n\t\t\t\t\t<option value='fa-arrow-circle-down'>&#xf0ab; arrow-circle-down</option>\n\t\t\t\t\t<option value='fa-arrow-circle-left'>&#xf0a8; arrow-circle-left</option>\n\t\t\t\t\t<option value='fa-arrow-circle-o-down'>&#xf01a; arrow-circle-o-down</option>\n\t\t\t\t\t<option value='fa-arrow-circle-o-left'>&#xf190; arrow-circle-o-left</option>\n\t\t\t\t\t<option value='fa-arrow-circle-o-right'>&#xf18e; arrow-circle-o-right</option>\n\t\t\t\t\t<option value='fa-arrow-circle-o-up'>&#xf01b; arrow-circle-o-up</option>\n\t\t\t\t\t<option value='fa-arrow-circle-right'>&#xf0a9; arrow-circle-right</option>\n\t\t\t\t\t<option value='fa-arrow-circle-up'>&#xf0aa; arrow-circle-up</option>\n\t\t\t\t\t<option value='fa-arrow-down'>&#xf063; arrow-down</option>\n\t\t\t\t\t<option value='fa-arrow-left'>&#xf060; arrow-left</option>\n\t\t\t\t\t<option value='fa-arrow-right'>&#xf061; arrow-right</option>\n\t\t\t\t\t<option value='fa-arrow-up'>&#xf062; arrow-up</option>\n\t\t\t\t\t<option value='fa-arrows'>&#xf047; arrows</option>\n\t\t\t\t\t<option value='fa-arrows-alt'>&#xf0b2; arrows-alt</option>\n\t\t\t\t\t<option value='fa-arrows-h'>&#xf07e; arrows-h</option>\n\t\t\t\t\t<option value='fa-arrows-v'>&#xf07d; arrows-v</option>\n\t\t\t\t\t<option value='fa-asl-interpreting'>&#xf2a3; asl-interpreting</option>\n\t\t\t\t\t<option value='fa-assistive-listening-systems'>&#xf2a2; assistive-listening-systems</option>\n\t\t\t\t\t<option value='fa-asterisk'>&#xf069; asterisk</option>\n\t\t\t\t\t<option value='fa-at'>&#xf1fa; at</option>\n\t\t\t\t\t<option value='fa-audio-description'>&#xf29e; audio-description</option>\n\t\t\t\t\t<option value='fa-automobile'>&#xf1b9; automobile</option>\n\t\t\t\t\t<option value='fa-backward'>&#xf04a; backward</option>\n\t\t\t\t\t<option value='fa-balance-scale'>&#xf24e; balance-scale</option>\n\t\t\t\t\t<option value='fa-ban'>&#xf05e; ban</option>\n\t\t\t\t\t<option value='fa-bandcamp'>&#xf2d5; bandcamp</option>\n\t\t\t\t\t<option value='fa-bank'>&#xf19c; bank</option>\n\t\t\t\t\t<option value='fa-bar-chart'>&#xf080; bar-chart</option>\n\t\t\t\t\t<option value='fa-bar-chart-o'>&#xf080; bar-chart-o</option>\n\t\t\t\t\t<option value='fa-barcode'>&#xf02a; barcode</option>\n\t\t\t\t\t<option value='fa-bars'>&#xf0c9; bars</option>\n\t\t\t\t\t<option value='fa-bath'>&#xf2cd; bath</option>\n\t\t\t\t\t<option value='fa-bathtub'>&#xf2cd; bathtub</option>\n\t\t\t\t\t<option value='fa-battery'>&#xf240; battery</option>\n\t\t\t\t\t<option value='fa-battery-0'>&#xf244; battery-0</option>\n\t\t\t\t\t<option value='fa-battery-1'>&#xf243; battery-1</option>\n\t\t\t\t\t<option value='fa-battery-2'>&#xf242; battery-2</option>\n\t\t\t\t\t<option value='fa-battery-3'>&#xf241; battery-3</option>\n\t\t\t\t\t<option value='fa-battery-4'>&#xf240; battery-4</option>\n\t\t\t\t\t<option value='fa-battery-empty'>&#xf244; battery-empty</option>\n\t\t\t\t\t<option value='fa-battery-full'>&#xf240; battery-full</option>\n\t\t\t\t\t<option value='fa-battery-half'>&#xf242; battery-half</option>\n\t\t\t\t\t<option value='fa-battery-quarter'>&#xf243; battery-quarter</option>\n\t\t\t\t\t<option value='fa-battery-three-quarters'>&#xf241; battery-three-quarters</option>\n\t\t\t\t\t<option value='fa-bed'>&#xf236; bed</option>\n\t\t\t\t\t<option value='fa-beer'>&#xf0fc; beer</option>\n\t\t\t\t\t<option value='fa-behance'>&#xf1b4; behance</option>\n\t\t\t\t\t<option value='fa-behance-square'>&#xf1b5; behance-square</option>\n\t\t\t\t\t<option value='fa-bell'>&#xf0f3; bell</option>\n\t\t\t\t\t<option value='fa-bell-o'>&#xf0a2; bell-o</option>\n\t\t\t\t\t<option value='fa-bell-slash'>&#xf1f6; bell-slash</option>\n\t\t\t\t\t<option value='fa-bell-slash-o'>&#xf1f7; bell-slash-o</option>\n\t\t\t\t\t<option value='fa-bicycle'>&#xf206; bicycle</option>\n\t\t\t\t\t<option value='fa-binoculars'>&#xf1e5; binoculars</option>\n\t\t\t\t\t<option value='fa-birthday-cake'>&#xf1fd; birthday-cake</option>\n\t\t\t\t\t<option value='fa-bitbucket'>&#xf171; bitbucket</option>\n\t\t\t\t\t<option value='fa-bitbucket-square'>&#xf172; bitbucket-square</option>\n\t\t\t\t\t<option value='fa-bitcoin'>&#xf15a; bitcoin</option>\n\t\t\t\t\t<option value='fa-black-tie'>&#xf27e; black-tie</option>\n\t\t\t\t\t<option value='fa-blind'>&#xf29d; blind</option>\n\t\t\t\t\t<option value='fa-bluetooth'>&#xf293; bluetooth</option>\n\t\t\t\t\t<option value='fa-bluetooth-b'>&#xf294; bluetooth-b</option>\n\t\t\t\t\t<option value='fa-bold'>&#xf032; bold</option>\n\t\t\t\t\t<option value='fa-bolt'>&#xf0e7; bolt</option>\n\t\t\t\t\t<option value='fa-bomb'>&#xf1e2; bomb</option>\n\t\t\t\t\t<option value='fa-book'>&#xf02d; book</option>\n\t\t\t\t\t<option value='fa-bookmark'>&#xf02e; bookmark</option>\n\t\t\t\t\t<option value='fa-bookmark-o'>&#xf097; bookmark-o</option>\n\t\t\t\t\t<option value='fa-braille'>&#xf2a1; braille</option>\n\t\t\t\t\t<option value='fa-briefcase'>&#xf0b1; briefcase</option>\n\t\t\t\t\t<option value='fa-btc'>&#xf15a; btc</option>\n\t\t\t\t\t<option value='fa-bug'>&#xf188; bug</option>\n\t\t\t\t\t<option value='fa-building'>&#xf1ad; building</option>\n\t\t\t\t\t<option value='fa-building-o'>&#xf0f7; building-o</option>\n\t\t\t\t\t<option value='fa-bullhorn'>&#xf0a1; bullhorn</option>\n\t\t\t\t\t<option value='fa-bullseye'>&#xf140; bullseye</option>\n\t\t\t\t\t<option value='fa-bus'>&#xf207; bus</option>\n\t\t\t\t\t<option value='fa-buysellads'>&#xf20d; buysellads</option>\n\t\t\t\t\t<option value='fa-cab'>&#xf1ba; cab</option>\n\t\t\t\t\t<option value='fa-calculator'>&#xf1ec; calculator</option>\n\t\t\t\t\t<option value='fa-calendar'>&#xf073; calendar</option>\n\t\t\t\t\t<option value='fa-calendar-check-o'>&#xf274; calendar-check-o</option>\n\t\t\t\t\t<option value='fa-calendar-minus-o'>&#xf272; calendar-minus-o</option>\n\t\t\t\t\t<option value='fa-calendar-o'>&#xf133; calendar-o</option>\n\t\t\t\t\t<option value='fa-calendar-plus-o'>&#xf271; calendar-plus-o</option>\n\t\t\t\t\t<option value='fa-calendar-times-o'>&#xf273; calendar-times-o</option>\n\t\t\t\t\t<option value='fa-camera'>&#xf030; camera</option>\n\t\t\t\t\t<option value='fa-camera-retro'>&#xf083; camera-retro</option>\n\t\t\t\t\t<option value='fa-car'>&#xf1b9; car</option>\n\t\t\t\t\t<option value='fa-caret-down'>&#xf0d7; caret-down</option>\n\t\t\t\t\t<option value='fa-caret-left'>&#xf0d9; caret-left</option>\n\t\t\t\t\t<option value='fa-caret-right'>&#xf0da; caret-right</option>\n\t\t\t\t\t<option value='fa-caret-square-o-down'>&#xf150; caret-square-o-down</option>\n\t\t\t\t\t<option value='fa-caret-square-o-left'>&#xf191; caret-square-o-left</option>\n\t\t\t\t\t<option value='fa-caret-square-o-right'>&#xf152; caret-square-o-right</option>\n\t\t\t\t\t<option value='fa-caret-square-o-up'>&#xf151; caret-square-o-up</option>\n\t\t\t\t\t<option value='fa-caret-up'>&#xf0d8; caret-up</option>\n\t\t\t\t\t<option value='fa-cart-arrow-down'>&#xf218; cart-arrow-down</option>\n\t\t\t\t\t<option value='fa-cart-plus'>&#xf217; cart-plus</option>\n\t\t\t\t\t<option value='fa-cc'>&#xf20a; cc</option>\n\t\t\t\t\t<option value='fa-cc-amex'>&#xf1f3; cc-amex</option>\n\t\t\t\t\t<option value='fa-cc-diners-club'>&#xf24c; cc-diners-club</option>\n\t\t\t\t\t<option value='fa-cc-discover'>&#xf1f2; cc-discover</option>\n\t\t\t\t\t<option value='fa-cc-jcb'>&#xf24b; cc-jcb</option>\n\t\t\t\t\t<option value='fa-cc-mastercard'>&#xf1f1; cc-mastercard</option>\n\t\t\t\t\t<option value='fa-cc-paypal'>&#xf1f4; cc-paypal</option>\n\t\t\t\t\t<option value='fa-cc-stripe'>&#xf1f5; cc-stripe</option>\n\t\t\t\t\t<option value='fa-cc-visa'>&#xf1f0; cc-visa</option>\n\t\t\t\t\t<option value='fa-certificate'>&#xf0a3; certificate</option>\n\t\t\t\t\t<option value='fa-chain'>&#xf0c1; chain</option>\n\t\t\t\t\t<option value='fa-chain-broken'>&#xf127; chain-broken</option>\n\t\t\t\t\t<option value='fa-check'>&#xf00c; check</option>\n\t\t\t\t\t<option value='fa-check-circle'>&#xf058; check-circle</option>\n\t\t\t\t\t<option value='fa-check-circle-o'>&#xf05d; check-circle-o</option>\n\t\t\t\t\t<option value='fa-check-square'>&#xf14a; check-square</option>\n\t\t\t\t\t<option value='fa-check-square-o'>&#xf046; check-square-o</option>\n\t\t\t\t\t<option value='fa-chevron-circle-down'>&#xf13a; chevron-circle-down</option>\n\t\t\t\t\t<option value='fa-chevron-circle-left'>&#xf137; chevron-circle-left</option>\n\t\t\t\t\t<option value='fa-chevron-circle-right'>&#xf138; chevron-circle-right</option>\n\t\t\t\t\t<option value='fa-chevron-circle-up'>&#xf139; chevron-circle-up</option>\n\t\t\t\t\t<option value='fa-chevron-down'>&#xf078; chevron-down</option>\n\t\t\t\t\t<option value='fa-chevron-left'>&#xf053; chevron-left</option>\n\t\t\t\t\t<option value='fa-chevron-right'>&#xf054; chevron-right</option>\n\t\t\t\t\t<option value='fa-chevron-up'>&#xf077; chevron-up</option>\n\t\t\t\t\t<option value='fa-child'>&#xf1ae; child</option>\n\t\t\t\t\t<option value='fa-chrome'>&#xf268; chrome</option>\n\t\t\t\t\t<option value='fa-circle'>&#xf111; circle</option>\n\t\t\t\t\t<option value='fa-circle-o'>&#xf10c; circle-o</option>\n\t\t\t\t\t<option value='fa-circle-o-notch'>&#xf1ce; circle-o-notch</option>\n\t\t\t\t\t<option value='fa-circle-thin'>&#xf1db; circle-thin</option>\n\t\t\t\t\t<option value='fa-clipboard'>&#xf0ea; clipboard</option>\n\t\t\t\t\t<option value='fa-clock-o'>&#xf017; clock-o</option>\n\t\t\t\t\t<option value='fa-clone'>&#xf24d; clone</option>\n\t\t\t\t\t<option value='fa-close'>&#xf00d; close</option>\n\t\t\t\t\t<option value='fa-cloud'>&#xf0c2; cloud</option>\n\t\t\t\t\t<option value='fa-cloud-download'>&#xf0ed; cloud-download</option>\n\t\t\t\t\t<option value='fa-cloud-upload'>&#xf0ee; cloud-upload</option>\n\t\t\t\t\t<option value='fa-cny'>&#xf157; cny</option>\n\t\t\t\t\t<option value='fa-code'>&#xf121; code</option>\n\t\t\t\t\t<option value='fa-code-fork'>&#xf126; code-fork</option>\n\t\t\t\t\t<option value='fa-codepen'>&#xf1cb; codepen</option>\n\t\t\t\t\t<option value='fa-codiepie'>&#xf284; codiepie</option>\n\t\t\t\t\t<option value='fa-coffee'>&#xf0f4; coffee</option>\n\t\t\t\t\t<option value='fa-cog'>&#xf013; cog</option>\n\t\t\t\t\t<option value='fa-cogs'>&#xf085; cogs</option>\n\t\t\t\t\t<option value='fa-columns'>&#xf0db; columns</option>\n\t\t\t\t\t<option value='fa-comment'>&#xf075; comment</option>\n\t\t\t\t\t<option value='fa-comment-o'>&#xf0e5; comment-o</option>\n\t\t\t\t\t<option value='fa-commenting'>&#xf27a; commenting</option>\n\t\t\t\t\t<option value='fa-commenting-o'>&#xf27b; commenting-o</option>\n\t\t\t\t\t<option value='fa-comments'>&#xf086; comments</option>\n\t\t\t\t\t<option value='fa-comments-o'>&#xf0e6; comments-o</option>\n\t\t\t\t\t<option value='fa-compass'>&#xf14e; compass</option>\n\t\t\t\t\t<option value='fa-compress'>&#xf066; compress</option>\n\t\t\t\t\t<option value='fa-connectdevelop'>&#xf20e; connectdevelop</option>\n\t\t\t\t\t<option value='fa-contao'>&#xf26d; contao</option>\n\t\t\t\t\t<option value='fa-copy'>&#xf0c5; copy</option>\n\t\t\t\t\t<option value='fa-copyright'>&#xf1f9; copyright</option>\n\t\t\t\t\t<option value='fa-creative-commons'>&#xf25e; creative-commons</option>\n\t\t\t\t\t<option value='fa-credit-card'>&#xf09d; credit-card</option>\n\t\t\t\t\t<option value='fa-credit-card-alt'>&#xf283; credit-card-alt</option>\n\t\t\t\t\t<option value='fa-crop'>&#xf125; crop</option>\n\t\t\t\t\t<option value='fa-crosshairs'>&#xf05b; crosshairs</option>\n\t\t\t\t\t<option value='fa-css3'>&#xf13c; css3</option>\n\t\t\t\t\t<option value='fa-cube'>&#xf1b2; cube</option>\n\t\t\t\t\t<option value='fa-cubes'>&#xf1b3; cubes</option>\n\t\t\t\t\t<option value='fa-cut'>&#xf0c4; cut</option>\n\t\t\t\t\t<option value='fa-cutlery'>&#xf0f5; cutlery</option>\n\t\t\t\t\t<option value='fa-dashboard'>&#xf0e4; dashboard</option>\n\t\t\t\t\t<option value='fa-dashcube'>&#xf210; dashcube</option>\n\t\t\t\t\t<option value='fa-database'>&#xf1c0; database</option>\n\t\t\t\t\t<option value='fa-deaf'>&#xf2a4; deaf</option>\n\t\t\t\t\t<option value='fa-deafness'>&#xf2a4; deafness</option>\n\t\t\t\t\t<option value='fa-dedent'>&#xf03b; dedent</option>\n\t\t\t\t\t<option value='fa-delicious'>&#xf1a5; delicious</option>\n\t\t\t\t\t<option value='fa-desktop'>&#xf108; desktop</option>\n\t\t\t\t\t<option value='fa-deviantart'>&#xf1bd; deviantart</option>\n\t\t\t\t\t<option value='fa-diamond'>&#xf219; diamond</option>\n\t\t\t\t\t<option value='fa-digg'>&#xf1a6; digg</option>\n\t\t\t\t\t<option value='fa-dollar'>&#xf155; dollar</option>\n\t\t\t\t\t<option value='fa-dot-circle-o'>&#xf192; dot-circle-o</option>\n\t\t\t\t\t<option value='fa-download'>&#xf019; download</option>\n\t\t\t\t\t<option value='fa-dribbble'>&#xf17d; dribbble</option>\n\t\t\t\t\t<option value='fa-drivers-license'>&#xf2c2; drivers-license</option>\n\t\t\t\t\t<option value='fa-drivers-license-o'>&#xf2c3; drivers-license-o</option>\n\t\t\t\t\t<option value='fa-dropbox'>&#xf16b; dropbox</option>\n\t\t\t\t\t<option value='fa-drupal'>&#xf1a9; drupal</option>\n\t\t\t\t\t<option value='fa-edge'>&#xf282; edge</option>\n\t\t\t\t\t<option value='fa-edit'>&#xf044; edit</option>\n\t\t\t\t\t<option value='fa-eercast'>&#xf2da; eercast</option>\n\t\t\t\t\t<option value='fa-eject'>&#xf052; eject</option>\n\t\t\t\t\t<option value='fa-ellipsis-h'>&#xf141; ellipsis-h</option>\n\t\t\t\t\t<option value='fa-ellipsis-v'>&#xf142; ellipsis-v</option>\n\t\t\t\t\t<option value='fa-empire'>&#xf1d1; empire</option>\n\t\t\t\t\t<option value='fa-envelope'>&#xf0e0; envelope</option>\n\t\t\t\t\t<option value='fa-envelope-o'>&#xf003; envelope-o</option>\n\t\t\t\t\t<option value='fa-envelope-open'>&#xf2b6; envelope-open</option>\n\t\t\t\t\t<option value='fa-envelope-open-o'>&#xf2b7; envelope-open-o</option>\n\t\t\t\t\t<option value='fa-envelope-square'>&#xf199; envelope-square</option>\n\t\t\t\t\t<option value='fa-envira'>&#xf299; envira</option>\n\t\t\t\t\t<option value='fa-eraser'>&#xf12d; eraser</option>\n\t\t\t\t\t<option value='fa-etsy'>&#xf2d7; etsy</option>\n\t\t\t\t\t<option value='fa-eur'>&#xf153; eur</option>\n\t\t\t\t\t<option value='fa-euro'>&#xf153; euro</option>\n\t\t\t\t\t<option value='fa-exchange'>&#xf0ec; exchange</option>\n\t\t\t\t\t<option value='fa-exclamation'>&#xf12a; exclamation</option>\n\t\t\t\t\t<option value='fa-exclamation-circle'>&#xf06a; exclamation-circle</option>\n\t\t\t\t\t<option value='fa-exclamation-triangle'>&#xf071; exclamation-triangle</option>\n\t\t\t\t\t<option value='fa-expand'>&#xf065; expand</option>\n\t\t\t\t\t<option value='fa-expeditedssl'>&#xf23e; expeditedssl</option>\n\t\t\t\t\t<option value='fa-external-link'>&#xf08e; external-link</option>\n\t\t\t\t\t<option value='fa-external-link-square'>&#xf14c; external-link-square</option>\n\t\t\t\t\t<option value='fa-eye'>&#xf06e; eye</option>\n\t\t\t\t\t<option value='fa-eye-slash'>&#xf070; eye-slash</option>\n\t\t\t\t\t<option value='fa-eyedropper'>&#xf1fb; eyedropper</option>\n\t\t\t\t\t<option value='fa-fa'>&#xf2b4; fa</option>\n\t\t\t\t\t<option value='fa-facebook'>&#xf09a; facebook</option>\n\t\t\t\t\t<option value='fa-facebook-f'>&#xf09a; facebook-f</option>\n\t\t\t\t\t<option value='fa-facebook-official'>&#xf230; facebook-official</option>\n\t\t\t\t\t<option value='fa-facebook-square'>&#xf082; facebook-square</option>\n\t\t\t\t\t<option value='fa-fast-backward'>&#xf049; fast-backward</option>\n\t\t\t\t\t<option value='fa-fast-forward'>&#xf050; fast-forward</option>\n\t\t\t\t\t<option value='fa-fax'>&#xf1ac; fax</option>\n\t\t\t\t\t<option value='fa-feed'>&#xf09e; feed</option>\n\t\t\t\t\t<option value='fa-female'>&#xf182; female</option>\n\t\t\t\t\t<option value='fa-fighter-jet'>&#xf0fb; fighter-jet</option>\n\t\t\t\t\t<option value='fa-file'>&#xf15b; file</option>\n\t\t\t\t\t<option value='fa-file-archive-o'>&#xf1c6; file-archive-o</option>\n\t\t\t\t\t<option value='fa-file-audio-o'>&#xf1c7; file-audio-o</option>\n\t\t\t\t\t<option value='fa-file-code-o'>&#xf1c9; file-code-o</option>\n\t\t\t\t\t<option value='fa-file-excel-o'>&#xf1c3; file-excel-o</option>\n\t\t\t\t\t<option value='fa-file-image-o'>&#xf1c5; file-image-o</option>\n\t\t\t\t\t<option value='fa-file-movie-o'>&#xf1c8; file-movie-o</option>\n\t\t\t\t\t<option value='fa-file-o'>&#xf016; file-o</option>\n\t\t\t\t\t<option value='fa-file-pdf-o'>&#xf1c1; file-pdf-o</option>\n\t\t\t\t\t<option value='fa-file-photo-o'>&#xf1c5; file-photo-o</option>\n\t\t\t\t\t<option value='fa-file-picture-o'>&#xf1c5; file-picture-o</option>\n\t\t\t\t\t<option value='fa-file-powerpoint-o'>&#xf1c4; file-powerpoint-o</option>\n\t\t\t\t\t<option value='fa-file-sound-o'>&#xf1c7; file-sound-o</option>\n\t\t\t\t\t<option value='fa-file-text'>&#xf15c; file-text</option>\n\t\t\t\t\t<option value='fa-file-text-o'>&#xf0f6; file-text-o</option>\n\t\t\t\t\t<option value='fa-file-video-o'>&#xf1c8; file-video-o</option>\n\t\t\t\t\t<option value='fa-file-word-o'>&#xf1c2; file-word-o</option>\n\t\t\t\t\t<option value='fa-file-zip-o'>&#xf1c6; file-zip-o</option>\n\t\t\t\t\t<option value='fa-files-o'>&#xf0c5; files-o</option>\n\t\t\t\t\t<option value='fa-film'>&#xf008; film</option>\n\t\t\t\t\t<option value='fa-filter'>&#xf0b0; filter</option>\n\t\t\t\t\t<option value='fa-fire'>&#xf06d; fire</option>\n\t\t\t\t\t<option value='fa-fire-extinguisher'>&#xf134; fire-extinguisher</option>\n\t\t\t\t\t<option value='fa-firefox'>&#xf269; firefox</option>\n\t\t\t\t\t<option value='fa-first-order'>&#xf2b0; first-order</option>\n\t\t\t\t\t<option value='fa-flag'>&#xf024; flag</option>\n\t\t\t\t\t<option value='fa-flag-checkered'>&#xf11e; flag-checkered</option>\n\t\t\t\t\t<option value='fa-flag-o'>&#xf11d; flag-o</option>\n\t\t\t\t\t<option value='fa-flash'>&#xf0e7; flash</option>\n\t\t\t\t\t<option value='fa-flask'>&#xf0c3; flask</option>\n\t\t\t\t\t<option value='fa-flickr'>&#xf16e; flickr</option>\n\t\t\t\t\t<option value='fa-floppy-o'>&#xf0c7; floppy-o</option>\n\t\t\t\t\t<option value='fa-folder'>&#xf07b; folder</option>\n\t\t\t\t\t<option value='fa-folder-o'>&#xf114; folder-o</option>\n\t\t\t\t\t<option value='fa-folder-open'>&#xf07c; folder-open</option>\n\t\t\t\t\t<option value='fa-folder-open-o'>&#xf115; folder-open-o</option>\n\t\t\t\t\t<option value='fa-font'>&#xf031; font</option>\n\t\t\t\t\t<option value='fa-font-awesome'>&#xf2b4; font-awesome</option>\n\t\t\t\t\t<option value='fa-fonticons'>&#xf280; fonticons</option>\n\t\t\t\t\t<option value='fa-fort-awesome'>&#xf286; fort-awesome</option>\n\t\t\t\t\t<option value='fa-forumbee'>&#xf211; forumbee</option>\n\t\t\t\t\t<option value='fa-forward'>&#xf04e; forward</option>\n\t\t\t\t\t<option value='fa-foursquare'>&#xf180; foursquare</option>\n\t\t\t\t\t<option value='fa-free-code-camp'>&#xf2c5; free-code-camp</option>\n\t\t\t\t\t<option value='fa-frown-o'>&#xf119; frown-o</option>\n\t\t\t\t\t<option value='fa-futbol-o'>&#xf1e3; futbol-o</option>\n\t\t\t\t\t<option value='fa-gamepad'>&#xf11b; gamepad</option>\n\t\t\t\t\t<option value='fa-gavel'>&#xf0e3; gavel</option>\n\t\t\t\t\t<option value='fa-gbp'>&#xf154; gbp</option>\n\t\t\t\t\t<option value='fa-ge'>&#xf1d1; ge</option>\n\t\t\t\t\t<option value='fa-gear'>&#xf013; gear</option>\n\t\t\t\t\t<option value='fa-gears'>&#xf085; gears</option>\n\t\t\t\t\t<option value='fa-genderless'>&#xf22d; genderless</option>\n\t\t\t\t\t<option value='fa-get-pocket'>&#xf265; get-pocket</option>\n\t\t\t\t\t<option value='fa-gg'>&#xf260; gg</option>\n\t\t\t\t\t<option value='fa-gg-circle'>&#xf261; gg-circle</option>\n\t\t\t\t\t<option value='fa-gift'>&#xf06b; gift</option>\n\t\t\t\t\t<option value='fa-git'>&#xf1d3; git</option>\n\t\t\t\t\t<option value='fa-git-square'>&#xf1d2; git-square</option>\n\t\t\t\t\t<option value='fa-github'>&#xf09b; github</option>\n\t\t\t\t\t<option value='fa-github-alt'>&#xf113; github-alt</option>\n\t\t\t\t\t<option value='fa-github-square'>&#xf092; github-square</option>\n\t\t\t\t\t<option value='fa-gitlab'>&#xf296; gitlab</option>\n\t\t\t\t\t<option value='fa-gittip'>&#xf184; gittip</option>\n\t\t\t\t\t<option value='fa-glass'>&#xf000; glass</option>\n\t\t\t\t\t<option value='fa-glide'>&#xf2a5; glide</option>\n\t\t\t\t\t<option value='fa-glide-g'>&#xf2a6; glide-g</option>\n\t\t\t\t\t<option value='fa-globe'>&#xf0ac; globe</option>\n\t\t\t\t\t<option value='fa-google'>&#xf1a0; google</option>\n\t\t\t\t\t<option value='fa-google-plus'>&#xf0d5; google-plus</option>\n\t\t\t\t\t<option value='fa-google-plus-circle'>&#xf2b3; google-plus-circle</option>\n\t\t\t\t\t<option value='fa-google-plus-official'>&#xf2b3; google-plus-official</option>\n\t\t\t\t\t<option value='fa-google-plus-square'>&#xf0d4; google-plus-square</option>\n\t\t\t\t\t<option value='fa-google-wallet'>&#xf1ee; google-wallet</option>\n\t\t\t\t\t<option value='fa-graduation-cap'>&#xf19d; graduation-cap</option>\n\t\t\t\t\t<option value='fa-gratipay'>&#xf184; gratipay</option>\n\t\t\t\t\t<option value='fa-grav'>&#xf2d6; grav</option>\n\t\t\t\t\t<option value='fa-group'>&#xf0c0; group</option>\n\t\t\t\t\t<option value='fa-h-square'>&#xf0fd; h-square</option>\n\t\t\t\t\t<option value='fa-hacker-news'>&#xf1d4; hacker-news</option>\n\t\t\t\t\t<option value='fa-hand-grab-o'>&#xf255; hand-grab-o</option>\n\t\t\t\t\t<option value='fa-hand-lizard-o'>&#xf258; hand-lizard-o</option>\n\t\t\t\t\t<option value='fa-hand-o-down'>&#xf0a7; hand-o-down</option>\n\t\t\t\t\t<option value='fa-hand-o-left'>&#xf0a5; hand-o-left</option>\n\t\t\t\t\t<option value='fa-hand-o-right'>&#xf0a4; hand-o-right</option>\n\t\t\t\t\t<option value='fa-hand-o-up'>&#xf0a6; hand-o-up</option>\n\t\t\t\t\t<option value='fa-hand-paper-o'>&#xf256; hand-paper-o</option>\n\t\t\t\t\t<option value='fa-hand-peace-o'>&#xf25b; hand-peace-o</option>\n\t\t\t\t\t<option value='fa-hand-pointer-o'>&#xf25a; hand-pointer-o</option>\n\t\t\t\t\t<option value='fa-hand-rock-o'>&#xf255; hand-rock-o</option>\n\t\t\t\t\t<option value='fa-hand-scissors-o'>&#xf257; hand-scissors-o</option>\n\t\t\t\t\t<option value='fa-hand-spock-o'>&#xf259; hand-spock-o</option>\n\t\t\t\t\t<option value='fa-hand-stop-o'>&#xf256; hand-stop-o</option>\n\t\t\t\t\t<option value='fa-handshake-o'>&#xf2b5; handshake-o</option>\n\t\t\t\t\t<option value='fa-hard-of-hearing'>&#xf2a4; hard-of-hearing</option>\n\t\t\t\t\t<option value='fa-hashtag'>&#xf292; hashtag</option>\n\t\t\t\t\t<option value='fa-hdd-o'>&#xf0a0; hdd-o</option>\n\t\t\t\t\t<option value='fa-header'>&#xf1dc; header</option>\n\t\t\t\t\t<option value='fa-headphones'>&#xf025; headphones</option>\n\t\t\t\t\t<option value='fa-heart'>&#xf004; heart</option>\n\t\t\t\t\t<option value='fa-heart-o'>&#xf08a; heart-o</option>\n\t\t\t\t\t<option value='fa-heartbeat'>&#xf21e; heartbeat</option>\n\t\t\t\t\t<option value='fa-history'>&#xf1da; history</option>\n\t\t\t\t\t<option value='fa-home'>&#xf015; home</option>\n\t\t\t\t\t<option value='fa-hospital-o'>&#xf0f8; hospital-o</option>\n\t\t\t\t\t<option value='fa-hotel'>&#xf236; hotel</option>\n\t\t\t\t\t<option value='fa-hourglass'>&#xf254; hourglass</option>\n\t\t\t\t\t<option value='fa-hourglass-1'>&#xf251; hourglass-1</option>\n\t\t\t\t\t<option value='fa-hourglass-2'>&#xf252; hourglass-2</option>\n\t\t\t\t\t<option value='fa-hourglass-3'>&#xf253; hourglass-3</option>\n\t\t\t\t\t<option value='fa-hourglass-end'>&#xf253; hourglass-end</option>\n\t\t\t\t\t<option value='fa-hourglass-half'>&#xf252; hourglass-half</option>\n\t\t\t\t\t<option value='fa-hourglass-o'>&#xf250; hourglass-o</option>\n\t\t\t\t\t<option value='fa-hourglass-start'>&#xf251; hourglass-start</option>\n\t\t\t\t\t<option value='fa-houzz'>&#xf27c; houzz</option>\n\t\t\t\t\t<option value='fa-html5'>&#xf13b; html5</option>\n\t\t\t\t\t<option value='fa-i-cursor'>&#xf246; i-cursor</option>\n\t\t\t\t\t<option value='fa-id-badge'>&#xf2c1; id-badge</option>\n\t\t\t\t\t<option value='fa-id-card'>&#xf2c2; id-card</option>\n\t\t\t\t\t<option value='fa-id-card-o'>&#xf2c3; id-card-o</option>\n\t\t\t\t\t<option value='fa-ils'>&#xf20b; ils</option>\n\t\t\t\t\t<option value='fa-image'>&#xf03e; image</option>\n\t\t\t\t\t<option value='fa-imdb'>&#xf2d8; imdb</option>\n\t\t\t\t\t<option value='fa-inbox'>&#xf01c; inbox</option>\n\t\t\t\t\t<option value='fa-indent'>&#xf03c; indent</option>\n\t\t\t\t\t<option value='fa-industry'>&#xf275; industry</option>\n\t\t\t\t\t<option value='fa-info'>&#xf129; info</option>\n\t\t\t\t\t<option value='fa-info-circle'>&#xf05a; info-circle</option>\n\t\t\t\t\t<option value='fa-inr'>&#xf156; inr</option>\n\t\t\t\t\t<option value='fa-instagram'>&#xf16d; instagram</option>\n\t\t\t\t\t<option value='fa-institution'>&#xf19c; institution</option>\n\t\t\t\t\t<option value='fa-internet-explorer'>&#xf26b; internet-explorer</option>\n\t\t\t\t\t<option value='fa-intersex'>&#xf224; intersex</option>\n\t\t\t\t\t<option value='fa-ioxhost'>&#xf208; ioxhost</option>\n\t\t\t\t\t<option value='fa-italic'>&#xf033; italic</option>\n\t\t\t\t\t<option value='fa-joomla'>&#xf1aa; joomla</option>\n\t\t\t\t\t<option value='fa-jpy'>&#xf157; jpy</option>\n\t\t\t\t\t<option value='fa-jsfiddle'>&#xf1cc; jsfiddle</option>\n\t\t\t\t\t<option value='fa-key'>&#xf084; key</option>\n\t\t\t\t\t<option value='fa-keyboard-o'>&#xf11c; keyboard-o</option>\n\t\t\t\t\t<option value='fa-krw'>&#xf159; krw</option>\n\t\t\t\t\t<option value='fa-language'>&#xf1ab; language</option>\n\t\t\t\t\t<option value='fa-laptop'>&#xf109; laptop</option>\n\t\t\t\t\t<option value='fa-lastfm'>&#xf202; lastfm</option>\n\t\t\t\t\t<option value='fa-lastfm-square'>&#xf203; lastfm-square</option>\n\t\t\t\t\t<option value='fa-leaf'>&#xf06c; leaf</option>\n\t\t\t\t\t<option value='fa-leanpub'>&#xf212; leanpub</option>\n\t\t\t\t\t<option value='fa-legal'>&#xf0e3; legal</option>\n\t\t\t\t\t<option value='fa-lemon-o'>&#xf094; lemon-o</option>\n\t\t\t\t\t<option value='fa-level-down'>&#xf149; level-down</option>\n\t\t\t\t\t<option value='fa-level-up'>&#xf148; level-up</option>\n\t\t\t\t\t<option value='fa-life-bouy'>&#xf1cd; life-bouy</option>\n\t\t\t\t\t<option value='fa-life-buoy'>&#xf1cd; life-buoy</option>\n\t\t\t\t\t<option value='fa-life-ring'>&#xf1cd; life-ring</option>\n\t\t\t\t\t<option value='fa-life-saver'>&#xf1cd; life-saver</option>\n\t\t\t\t\t<option value='fa-lightbulb-o'>&#xf0eb; lightbulb-o</option>\n\t\t\t\t\t<option value='fa-line-chart'>&#xf201; line-chart</option>\n\t\t\t\t\t<option value='fa-link'>&#xf0c1; link</option>\n\t\t\t\t\t<option value='fa-linkedin'>&#xf0e1; linkedin</option>\n\t\t\t\t\t<option value='fa-linkedin-square'>&#xf08c; linkedin-square</option>\n\t\t\t\t\t<option value='fa-linode'>&#xf2b8; linode</option>\n\t\t\t\t\t<option value='fa-linux'>&#xf17c; linux</option>\n\t\t\t\t\t<option value='fa-list'>&#xf03a; list</option>\n\t\t\t\t\t<option value='fa-list-alt'>&#xf022; list-alt</option>\n\t\t\t\t\t<option value='fa-list-ol'>&#xf0cb; list-ol</option>\n\t\t\t\t\t<option value='fa-list-ul'>&#xf0ca; list-ul</option>\n\t\t\t\t\t<option value='fa-location-arrow'>&#xf124; location-arrow</option>\n\t\t\t\t\t<option value='fa-lock'>&#xf023; lock</option>\n\t\t\t\t\t<option value='fa-long-arrow-down'>&#xf175; long-arrow-down</option>\n\t\t\t\t\t<option value='fa-long-arrow-left'>&#xf177; long-arrow-left</option>\n\t\t\t\t\t<option value='fa-long-arrow-right'>&#xf178; long-arrow-right</option>\n\t\t\t\t\t<option value='fa-long-arrow-up'>&#xf176; long-arrow-up</option>\n\t\t\t\t\t<option value='fa-low-vision'>&#xf2a8; low-vision</option>\n\t\t\t\t\t<option value='fa-magic'>&#xf0d0; magic</option>\n\t\t\t\t\t<option value='fa-magnet'>&#xf076; magnet</option>\n\t\t\t\t\t<option value='fa-mail-forward'>&#xf064; mail-forward</option>\n\t\t\t\t\t<option value='fa-mail-reply'>&#xf112; mail-reply</option>\n\t\t\t\t\t<option value='fa-mail-reply-all'>&#xf122; mail-reply-all</option>\n\t\t\t\t\t<option value='fa-male'>&#xf183; male</option>\n\t\t\t\t\t<option value='fa-map'>&#xf279; map</option>\n\t\t\t\t\t<option value='fa-map-marker'>&#xf041; map-marker</option>\n\t\t\t\t\t<option value='fa-map-o'>&#xf278; map-o</option>\n\t\t\t\t\t<option value='fa-map-pin'>&#xf276; map-pin</option>\n\t\t\t\t\t<option value='fa-map-signs'>&#xf277; map-signs</option>\n\t\t\t\t\t<option value='fa-mars'>&#xf222; mars</option>\n\t\t\t\t\t<option value='fa-mars-double'>&#xf227; mars-double</option>\n\t\t\t\t\t<option value='fa-mars-stroke'>&#xf229; mars-stroke</option>\n\t\t\t\t\t<option value='fa-mars-stroke-h'>&#xf22b; mars-stroke-h</option>\n\t\t\t\t\t<option value='fa-mars-stroke-v'>&#xf22a; mars-stroke-v</option>\n\t\t\t\t\t<option value='fa-maxcdn'>&#xf136; maxcdn</option>\n\t\t\t\t\t<option value='fa-meanpath'>&#xf20c; meanpath</option>\n\t\t\t\t\t<option value='fa-medium'>&#xf23a; medium</option>\n\t\t\t\t\t<option value='fa-medkit'>&#xf0fa; medkit</option>\n\t\t\t\t\t<option value='fa-meetup'>&#xf2e0; meetup</option>\n\t\t\t\t\t<option value='fa-meh-o'>&#xf11a; meh-o</option>\n\t\t\t\t\t<option value='fa-mercury'>&#xf223; mercury</option>\n\t\t\t\t\t<option value='fa-microchip'>&#xf2db; microchip</option>\n\t\t\t\t\t<option value='fa-microphone'>&#xf130; microphone</option>\n\t\t\t\t\t<option value='fa-microphone-slash'>&#xf131; microphone-slash</option>\n\t\t\t\t\t<option value='fa-minus'>&#xf068; minus</option>\n\t\t\t\t\t<option value='fa-minus-circle'>&#xf056; minus-circle</option>\n\t\t\t\t\t<option value='fa-minus-square'>&#xf146; minus-square</option>\n\t\t\t\t\t<option value='fa-minus-square-o'>&#xf147; minus-square-o</option>\n\t\t\t\t\t<option value='fa-mixcloud'>&#xf289; mixcloud</option>\n\t\t\t\t\t<option value='fa-mobile'>&#xf10b; mobile</option>\n\t\t\t\t\t<option value='fa-mobile-phone'>&#xf10b; mobile-phone</option>\n\t\t\t\t\t<option value='fa-modx'>&#xf285; modx</option>\n\t\t\t\t\t<option value='fa-money'>&#xf0d6; money</option>\n\t\t\t\t\t<option value='fa-moon-o'>&#xf186; moon-o</option>\n\t\t\t\t\t<option value='fa-mortar-board'>&#xf19d; mortar-board</option>\n\t\t\t\t\t<option value='fa-motorcycle'>&#xf21c; motorcycle</option>\n\t\t\t\t\t<option value='fa-mouse-pointer'>&#xf245; mouse-pointer</option>\n\t\t\t\t\t<option value='fa-music'>&#xf001; music</option>\n\t\t\t\t\t<option value='fa-navicon'>&#xf0c9; navicon</option>\n\t\t\t\t\t<option value='fa-neuter'>&#xf22c; neuter</option>\n\t\t\t\t\t<option value='fa-newspaper-o'>&#xf1ea; newspaper-o</option>\n\t\t\t\t\t<option value='fa-object-group'>&#xf247; object-group</option>\n\t\t\t\t\t<option value='fa-object-ungroup'>&#xf248; object-ungroup</option>\n\t\t\t\t\t<option value='fa-odnoklassniki'>&#xf263; odnoklassniki</option>\n\t\t\t\t\t<option value='fa-odnoklassniki-square'>&#xf264; odnoklassniki-square</option>\n\t\t\t\t\t<option value='fa-opencart'>&#xf23d; opencart</option>\n\t\t\t\t\t<option value='fa-openid'>&#xf19b; openid</option>\n\t\t\t\t\t<option value='fa-opera'>&#xf26a; opera</option>\n\t\t\t\t\t<option value='fa-optin-monster'>&#xf23c; optin-monster</option>\n\t\t\t\t\t<option value='fa-outdent'>&#xf03b; outdent</option>\n\t\t\t\t\t<option value='fa-pagelines'>&#xf18c; pagelines</option>\n\t\t\t\t\t<option value='fa-paint-brush'>&#xf1fc; paint-brush</option>\n\t\t\t\t\t<option value='fa-paper-plane'>&#xf1d8; paper-plane</option>\n\t\t\t\t\t<option value='fa-paper-plane-o'>&#xf1d9; paper-plane-o</option>\n\t\t\t\t\t<option value='fa-paperclip'>&#xf0c6; paperclip</option>\n\t\t\t\t\t<option value='fa-paragraph'>&#xf1dd; paragraph</option>\n\t\t\t\t\t<option value='fa-paste'>&#xf0ea; paste</option>\n\t\t\t\t\t<option value='fa-pause'>&#xf04c; pause</option>\n\t\t\t\t\t<option value='fa-pause-circle'>&#xf28b; pause-circle</option>\n\t\t\t\t\t<option value='fa-pause-circle-o'>&#xf28c; pause-circle-o</option>\n\t\t\t\t\t<option value='fa-paw'>&#xf1b0; paw</option>\n\t\t\t\t\t<option value='fa-paypal'>&#xf1ed; paypal</option>\n\t\t\t\t\t<option value='fa-pencil'>&#xf040; pencil</option>\n\t\t\t\t\t<option value='fa-pencil-square'>&#xf14b; pencil-square</option>\n\t\t\t\t\t<option value='fa-pencil-square-o'>&#xf044; pencil-square-o</option>\n\t\t\t\t\t<option value='fa-percent'>&#xf295; percent</option>\n\t\t\t\t\t<option value='fa-phone'>&#xf095; phone</option>\n\t\t\t\t\t<option value='fa-phone-square'>&#xf098; phone-square</option>\n\t\t\t\t\t<option value='fa-photo'>&#xf03e; photo</option>\n\t\t\t\t\t<option value='fa-picture-o'>&#xf03e; picture-o</option>\n\t\t\t\t\t<option value='fa-pie-chart'>&#xf200; pie-chart</option>\n\t\t\t\t\t<option value='fa-pied-piper'>&#xf2ae; pied-piper</option>\n\t\t\t\t\t<option value='fa-pied-piper-alt'>&#xf1a8; pied-piper-alt</option>\n\t\t\t\t\t<option value='fa-pied-piper-pp'>&#xf1a7; pied-piper-pp</option>\n\t\t\t\t\t<option value='fa-pinterest'>&#xf0d2; pinterest</option>\n\t\t\t\t\t<option value='fa-pinterest-p'>&#xf231; pinterest-p</option>\n\t\t\t\t\t<option value='fa-pinterest-square'>&#xf0d3; pinterest-square</option>\n\t\t\t\t\t<option value='fa-plane'>&#xf072; plane</option>\n\t\t\t\t\t<option value='fa-play'>&#xf04b; play</option>\n\t\t\t\t\t<option value='fa-play-circle'>&#xf144; play-circle</option>\n\t\t\t\t\t<option value='fa-play-circle-o'>&#xf01d; play-circle-o</option>\n\t\t\t\t\t<option value='fa-plug'>&#xf1e6; plug</option>\n\t\t\t\t\t<option value='fa-plus'>&#xf067; plus</option>\n\t\t\t\t\t<option value='fa-plus-circle'>&#xf055; plus-circle</option>\n\t\t\t\t\t<option value='fa-plus-square'>&#xf0fe; plus-square</option>\n\t\t\t\t\t<option value='fa-plus-square-o'>&#xf196; plus-square-o</option>\n\t\t\t\t\t<option value='fa-podcast'>&#xf2ce; podcast</option>\n\t\t\t\t\t<option value='fa-power-off'>&#xf011; power-off</option>\n\t\t\t\t\t<option value='fa-print'>&#xf02f; print</option>\n\t\t\t\t\t<option value='fa-product-hunt'>&#xf288; product-hunt</option>\n\t\t\t\t\t<option value='fa-puzzle-piece'>&#xf12e; puzzle-piece</option>\n\t\t\t\t\t<option value='fa-qq'>&#xf1d6; qq</option>\n\t\t\t\t\t<option value='fa-qrcode'>&#xf029; qrcode</option>\n\t\t\t\t\t<option value='fa-question'>&#xf128; question</option>\n\t\t\t\t\t<option value='fa-question-circle'>&#xf059; question-circle</option>\n\t\t\t\t\t<option value='fa-question-circle-o'>&#xf29c; question-circle-o</option>\n\t\t\t\t\t<option value='fa-quora'>&#xf2c4; quora</option>\n\t\t\t\t\t<option value='fa-quote-left'>&#xf10d; quote-left</option>\n\t\t\t\t\t<option value='fa-quote-right'>&#xf10e; quote-right</option>\n\t\t\t\t\t<option value='fa-ra'>&#xf1d0; ra</option>\n\t\t\t\t\t<option value='fa-random'>&#xf074; random</option>\n\t\t\t\t\t<option value='fa-ravelry'>&#xf2d9; ravelry</option>\n\t\t\t\t\t<option value='fa-rebel'>&#xf1d0; rebel</option>\n\t\t\t\t\t<option value='fa-recycle'>&#xf1b8; recycle</option>\n\t\t\t\t\t<option value='fa-reddit'>&#xf1a1; reddit</option>\n\t\t\t\t\t<option value='fa-reddit-alien'>&#xf281; reddit-alien</option>\n\t\t\t\t\t<option value='fa-reddit-square'>&#xf1a2; reddit-square</option>\n\t\t\t\t\t<option value='fa-refresh'>&#xf021; refresh</option>\n\t\t\t\t\t<option value='fa-registered'>&#xf25d; registered</option>\n\t\t\t\t\t<option value='fa-remove'>&#xf00d; remove</option>\n\t\t\t\t\t<option value='fa-renren'>&#xf18b; renren</option>\n\t\t\t\t\t<option value='fa-reorder'>&#xf0c9; reorder</option>\n\t\t\t\t\t<option value='fa-repeat'>&#xf01e; repeat</option>\n\t\t\t\t\t<option value='fa-reply'>&#xf112; reply</option>\n\t\t\t\t\t<option value='fa-reply-all'>&#xf122; reply-all</option>\n\t\t\t\t\t<option value='fa-resistance'>&#xf1d0; resistance</option>\n\t\t\t\t\t<option value='fa-retweet'>&#xf079; retweet</option>\n\t\t\t\t\t<option value='fa-rmb'>&#xf157; rmb</option>\n\t\t\t\t\t<option value='fa-road'>&#xf018; road</option>\n\t\t\t\t\t<option value='fa-rocket'>&#xf135; rocket</option>\n\t\t\t\t\t<option value='fa-rotate-left'>&#xf0e2; rotate-left</option>\n\t\t\t\t\t<option value='fa-rotate-right'>&#xf01e; rotate-right</option>\n\t\t\t\t\t<option value='fa-rouble'>&#xf158; rouble</option>\n\t\t\t\t\t<option value='fa-rss'>&#xf09e; rss</option>\n\t\t\t\t\t<option value='fa-rss-square'>&#xf143; rss-square</option>\n\t\t\t\t\t<option value='fa-rub'>&#xf158; rub</option>\n\t\t\t\t\t<option value='fa-ruble'>&#xf158; ruble</option>\n\t\t\t\t\t<option value='fa-rupee'>&#xf156; rupee</option>\n\t\t\t\t\t<option value='fa-s15'>&#xf2cd; s15</option>\n\t\t\t\t\t<option value='fa-safari'>&#xf267; safari</option>\n\t\t\t\t\t<option value='fa-save'>&#xf0c7; save</option>\n\t\t\t\t\t<option value='fa-scissors'>&#xf0c4; scissors</option>\n\t\t\t\t\t<option value='fa-scribd'>&#xf28a; scribd</option>\n\t\t\t\t\t<option value='fa-search'>&#xf002; search</option>\n\t\t\t\t\t<option value='fa-search-minus'>&#xf010; search-minus</option>\n\t\t\t\t\t<option value='fa-search-plus'>&#xf00e; search-plus</option>\n\t\t\t\t\t<option value='fa-sellsy'>&#xf213; sellsy</option>\n\t\t\t\t\t<option value='fa-send'>&#xf1d8; send</option>\n\t\t\t\t\t<option value='fa-send-o'>&#xf1d9; send-o</option>\n\t\t\t\t\t<option value='fa-server'>&#xf233; server</option>\n\t\t\t\t\t<option value='fa-share'>&#xf064; share</option>\n\t\t\t\t\t<option value='fa-share-alt'>&#xf1e0; share-alt</option>\n\t\t\t\t\t<option value='fa-share-alt-square'>&#xf1e1; share-alt-square</option>\n\t\t\t\t\t<option value='fa-share-square'>&#xf14d; share-square</option>\n\t\t\t\t\t<option value='fa-share-square-o'>&#xf045; share-square-o</option>\n\t\t\t\t\t<option value='fa-shekel'>&#xf20b; shekel</option>\n\t\t\t\t\t<option value='fa-sheqel'>&#xf20b; sheqel</option>\n\t\t\t\t\t<option value='fa-shield'>&#xf132; shield</option>\n\t\t\t\t\t<option value='fa-ship'>&#xf21a; ship</option>\n\t\t\t\t\t<option value='fa-shirtsinbulk'>&#xf214; shirtsinbulk</option>\n\t\t\t\t\t<option value='fa-shopping-bag'>&#xf290; shopping-bag</option>\n\t\t\t\t\t<option value='fa-shopping-basket'>&#xf291; shopping-basket</option>\n\t\t\t\t\t<option value='fa-shopping-cart'>&#xf07a; shopping-cart</option>\n\t\t\t\t\t<option value='fa-shower'>&#xf2cc; shower</option>\n\t\t\t\t\t<option value='fa-sign-in'>&#xf090; sign-in</option>\n\t\t\t\t\t<option value='fa-sign-language'>&#xf2a7; sign-language</option>\n\t\t\t\t\t<option value='fa-sign-out'>&#xf08b; sign-out</option>\n\t\t\t\t\t<option value='fa-signal'>&#xf012; signal</option>\n\t\t\t\t\t<option value='fa-signing'>&#xf2a7; signing</option>\n\t\t\t\t\t<option value='fa-simplybuilt'>&#xf215; simplybuilt</option>\n\t\t\t\t\t<option value='fa-sitemap'>&#xf0e8; sitemap</option>\n\t\t\t\t\t<option value='fa-skyatlas'>&#xf216; skyatlas</option>\n\t\t\t\t\t<option value='fa-skype'>&#xf17e; skype</option>\n\t\t\t\t\t<option value='fa-slack'>&#xf198; slack</option>\n\t\t\t\t\t<option value='fa-sliders'>&#xf1de; sliders</option>\n\t\t\t\t\t<option value='fa-slideshare'>&#xf1e7; slideshare</option>\n\t\t\t\t\t<option value='fa-smile-o'>&#xf118; smile-o</option>\n\t\t\t\t\t<option value='fa-snapchat'>&#xf2ab; snapchat</option>\n\t\t\t\t\t<option value='fa-snapchat-ghost'>&#xf2ac; snapchat-ghost</option>\n\t\t\t\t\t<option value='fa-snapchat-square'>&#xf2ad; snapchat-square</option>\n\t\t\t\t\t<option value='fa-snowflake-o'>&#xf2dc; snowflake-o</option>\n\t\t\t\t\t<option value='fa-soccer-ball-o'>&#xf1e3; soccer-ball-o</option>\n\t\t\t\t\t<option value='fa-sort'>&#xf0dc; sort</option>\n\t\t\t\t\t<option value='fa-sort-alpha-asc'>&#xf15d; sort-alpha-asc</option>\n\t\t\t\t\t<option value='fa-sort-alpha-desc'>&#xf15e; sort-alpha-desc</option>\n\t\t\t\t\t<option value='fa-sort-amount-asc'>&#xf160; sort-amount-asc</option>\n\t\t\t\t\t<option value='fa-sort-amount-desc'>&#xf161; sort-amount-desc</option>\n\t\t\t\t\t<option value='fa-sort-asc'>&#xf0de; sort-asc</option>\n\t\t\t\t\t<option value='fa-sort-desc'>&#xf0dd; sort-desc</option>\n\t\t\t\t\t<option value='fa-sort-down'>&#xf0dd; sort-down</option>\n\t\t\t\t\t<option value='fa-sort-numeric-asc'>&#xf162; sort-numeric-asc</option>\n\t\t\t\t\t<option value='fa-sort-numeric-desc'>&#xf163; sort-numeric-desc</option>\n\t\t\t\t\t<option value='fa-sort-up'>&#xf0de; sort-up</option>\n\t\t\t\t\t<option value='fa-soundcloud'>&#xf1be; soundcloud</option>\n\t\t\t\t\t<option value='fa-space-shuttle'>&#xf197; space-shuttle</option>\n\t\t\t\t\t<option value='fa-spinner'>&#xf110; spinner</option>\n\t\t\t\t\t<option value='fa-spoon'>&#xf1b1; spoon</option>\n\t\t\t\t\t<option value='fa-spotify'>&#xf1bc; spotify</option>\n\t\t\t\t\t<option value='fa-square'>&#xf0c8; square</option>\n\t\t\t\t\t<option value='fa-square-o'>&#xf096; square-o</option>\n\t\t\t\t\t<option value='fa-stack-exchange'>&#xf18d; stack-exchange</option>\n\t\t\t\t\t<option value='fa-stack-overflow'>&#xf16c; stack-overflow</option>\n\t\t\t\t\t<option value='fa-star'>&#xf005; star</option>\n\t\t\t\t\t<option value='fa-star-half'>&#xf089; star-half</option>\n\t\t\t\t\t<option value='fa-star-half-empty'>&#xf123; star-half-empty</option>\n\t\t\t\t\t<option value='fa-star-half-full'>&#xf123; star-half-full</option>\n\t\t\t\t\t<option value='fa-star-half-o'>&#xf123; star-half-o</option>\n\t\t\t\t\t<option value='fa-star-o'>&#xf006; star-o</option>\n\t\t\t\t\t<option value='fa-steam'>&#xf1b6; steam</option>\n\t\t\t\t\t<option value='fa-steam-square'>&#xf1b7; steam-square</option>\n\t\t\t\t\t<option value='fa-step-backward'>&#xf048; step-backward</option>\n\t\t\t\t\t<option value='fa-step-forward'>&#xf051; step-forward</option>\n\t\t\t\t\t<option value='fa-stethoscope'>&#xf0f1; stethoscope</option>\n\t\t\t\t\t<option value='fa-sticky-note'>&#xf249; sticky-note</option>\n\t\t\t\t\t<option value='fa-sticky-note-o'>&#xf24a; sticky-note-o</option>\n\t\t\t\t\t<option value='fa-stop'>&#xf04d; stop</option>\n\t\t\t\t\t<option value='fa-stop-circle'>&#xf28d; stop-circle</option>\n\t\t\t\t\t<option value='fa-stop-circle-o'>&#xf28e; stop-circle-o</option>\n\t\t\t\t\t<option value='fa-street-view'>&#xf21d; street-view</option>\n\t\t\t\t\t<option value='fa-strikethrough'>&#xf0cc; strikethrough</option>\n\t\t\t\t\t<option value='fa-stumbleupon'>&#xf1a4; stumbleupon</option>\n\t\t\t\t\t<option value='fa-stumbleupon-circle'>&#xf1a3; stumbleupon-circle</option>\n\t\t\t\t\t<option value='fa-subscript'>&#xf12c; subscript</option>\n\t\t\t\t\t<option value='fa-subway'>&#xf239; subway</option>\n\t\t\t\t\t<option value='fa-suitcase'>&#xf0f2; suitcase</option>\n\t\t\t\t\t<option value='fa-sun-o'>&#xf185; sun-o</option>\n\t\t\t\t\t<option value='fa-superpowers'>&#xf2dd; superpowers</option>\n\t\t\t\t\t<option value='fa-superscript'>&#xf12b; superscript</option>\n\t\t\t\t\t<option value='fa-support'>&#xf1cd; support</option>\n\t\t\t\t\t<option value='fa-table'>&#xf0ce; table</option>\n\t\t\t\t\t<option value='fa-tablet'>&#xf10a; tablet</option>\n\t\t\t\t\t<option value='fa-tachometer'>&#xf0e4; tachometer</option>\n\t\t\t\t\t<option value='fa-tag'>&#xf02b; tag</option>\n\t\t\t\t\t<option value='fa-tags'>&#xf02c; tags</option>\n\t\t\t\t\t<option value='fa-tasks'>&#xf0ae; tasks</option>\n\t\t\t\t\t<option value='fa-taxi'>&#xf1ba; taxi</option>\n\t\t\t\t\t<option value='fa-telegram'>&#xf2c6; telegram</option>\n\t\t\t\t\t<option value='fa-television'>&#xf26c; television</option>\n\t\t\t\t\t<option value='fa-tencent-weibo'>&#xf1d5; tencent-weibo</option>\n\t\t\t\t\t<option value='fa-terminal'>&#xf120; terminal</option>\n\t\t\t\t\t<option value='fa-text-height'>&#xf034; text-height</option>\n\t\t\t\t\t<option value='fa-text-width'>&#xf035; text-width</option>\n\t\t\t\t\t<option value='fa-th'>&#xf00a; th</option>\n\t\t\t\t\t<option value='fa-th-large'>&#xf009; th-large</option>\n\t\t\t\t\t<option value='fa-th-list'>&#xf00b; th-list</option>\n\t\t\t\t\t<option value='fa-themeisle'>&#xf2b2; themeisle</option>\n\t\t\t\t\t<option value='fa-thermometer'>&#xf2c7; thermometer</option>\n\t\t\t\t\t<option value='fa-thermometer-0'>&#xf2cb; thermometer-0</option>\n\t\t\t\t\t<option value='fa-thermometer-1'>&#xf2ca; thermometer-1</option>\n\t\t\t\t\t<option value='fa-thermometer-2'>&#xf2c9; thermometer-2</option>\n\t\t\t\t\t<option value='fa-thermometer-3'>&#xf2c8; thermometer-3</option>\n\t\t\t\t\t<option value='fa-thermometer-4'>&#xf2c7; thermometer-4</option>\n\t\t\t\t\t<option value='fa-thermometer-empty'>&#xf2cb; thermometer-empty</option>\n\t\t\t\t\t<option value='fa-thermometer-full'>&#xf2c7; thermometer-full</option>\n\t\t\t\t\t<option value='fa-thermometer-half'>&#xf2c9; thermometer-half</option>\n\t\t\t\t\t<option value='fa-thermometer-quarter'>&#xf2ca; thermometer-quarter</option>\n\t\t\t\t\t<option value='fa-thermometer-three-quarters'>&#xf2c8; thermometer-three-quarters</option>\n\t\t\t\t\t<option value='fa-thumb-tack'>&#xf08d; thumb-tack</option>\n\t\t\t\t\t<option value='fa-thumbs-down'>&#xf165; thumbs-down</option>\n\t\t\t\t\t<option value='fa-thumbs-o-down'>&#xf088; thumbs-o-down</option>\n\t\t\t\t\t<option value='fa-thumbs-o-up'>&#xf087; thumbs-o-up</option>\n\t\t\t\t\t<option value='fa-thumbs-up'>&#xf164; thumbs-up</option>\n\t\t\t\t\t<option value='fa-ticket'>&#xf145; ticket</option>\n\t\t\t\t\t<option value='fa-times'>&#xf00d; times</option>\n\t\t\t\t\t<option value='fa-times-circle'>&#xf057; times-circle</option>\n\t\t\t\t\t<option value='fa-times-circle-o'>&#xf05c; times-circle-o</option>\n\t\t\t\t\t<option value='fa-times-rectangle'>&#xf2d3; times-rectangle</option>\n\t\t\t\t\t<option value='fa-times-rectangle-o'>&#xf2d4; times-rectangle-o</option>\n\t\t\t\t\t<option value='fa-tint'>&#xf043; tint</option>\n\t\t\t\t\t<option value='fa-toggle-down'>&#xf150; toggle-down</option>\n\t\t\t\t\t<option value='fa-toggle-left'>&#xf191; toggle-left</option>\n\t\t\t\t\t<option value='fa-toggle-off'>&#xf204; toggle-off</option>\n\t\t\t\t\t<option value='fa-toggle-on'>&#xf205; toggle-on</option>\n\t\t\t\t\t<option value='fa-toggle-right'>&#xf152; toggle-right</option>\n\t\t\t\t\t<option value='fa-toggle-up'>&#xf151; toggle-up</option>\n\t\t\t\t\t<option value='fa-trademark'>&#xf25c; trademark</option>\n\t\t\t\t\t<option value='fa-train'>&#xf238; train</option>\n\t\t\t\t\t<option value='fa-transgender'>&#xf224; transgender</option>\n\t\t\t\t\t<option value='fa-transgender-alt'>&#xf225; transgender-alt</option>\n\t\t\t\t\t<option value='fa-trash'>&#xf1f8; trash</option>\n\t\t\t\t\t<option value='fa-trash-o'>&#xf014; trash-o</option>\n\t\t\t\t\t<option value='fa-tree'>&#xf1bb; tree</option>\n\t\t\t\t\t<option value='fa-trello'>&#xf181; trello</option>\n\t\t\t\t\t<option value='fa-tripadvisor'>&#xf262; tripadvisor</option>\n\t\t\t\t\t<option value='fa-trophy'>&#xf091; trophy</option>\n\t\t\t\t\t<option value='fa-truck'>&#xf0d1; truck</option>\n\t\t\t\t\t<option value='fa-try'>&#xf195; try</option>\n\t\t\t\t\t<option value='fa-tty'>&#xf1e4; tty</option>\n\t\t\t\t\t<option value='fa-tumblr'>&#xf173; tumblr</option>\n\t\t\t\t\t<option value='fa-tumblr-square'>&#xf174; tumblr-square</option>\n\t\t\t\t\t<option value='fa-turkish-lira'>&#xf195; turkish-lira</option>\n\t\t\t\t\t<option value='fa-tv'>&#xf26c; tv</option>\n\t\t\t\t\t<option value='fa-twitch'>&#xf1e8; twitch</option>\n\t\t\t\t\t<option value='fa-twitter'>&#xf099; twitter</option>\n\t\t\t\t\t<option value='fa-twitter-square'>&#xf081; twitter-square</option>\n\t\t\t\t\t<option value='fa-umbrella'>&#xf0e9; umbrella</option>\n\t\t\t\t\t<option value='fa-underline'>&#xf0cd; underline</option>\n\t\t\t\t\t<option value='fa-undo'>&#xf0e2; undo</option>\n\t\t\t\t\t<option value='fa-universal-access'>&#xf29a; universal-access</option>\n\t\t\t\t\t<option value='fa-university'>&#xf19c; university</option>\n\t\t\t\t\t<option value='fa-unlink'>&#xf127; unlink</option>\n\t\t\t\t\t<option value='fa-unlock'>&#xf09c; unlock</option>\n\t\t\t\t\t<option value='fa-unlock-alt'>&#xf13e; unlock-alt</option>\n\t\t\t\t\t<option value='fa-unsorted'>&#xf0dc; unsorted</option>\n\t\t\t\t\t<option value='fa-upload'>&#xf093; upload</option>\n\t\t\t\t\t<option value='fa-usb'>&#xf287; usb</option>\n\t\t\t\t\t<option value='fa-usd'>&#xf155; usd</option>\n\t\t\t\t\t<option value='fa-user'>&#xf007; user</option>\n\t\t\t\t\t<option value='fa-user-circle'>&#xf2bd; user-circle</option>\n\t\t\t\t\t<option value='fa-user-circle-o'>&#xf2be; user-circle-o</option>\n\t\t\t\t\t<option value='fa-user-md'>&#xf0f0; user-md</option>\n\t\t\t\t\t<option value='fa-user-o'>&#xf2c0; user-o</option>\n\t\t\t\t\t<option value='fa-user-plus'>&#xf234; user-plus</option>\n\t\t\t\t\t<option value='fa-user-secret'>&#xf21b; user-secret</option>\n\t\t\t\t\t<option value='fa-user-times'>&#xf235; user-times</option>\n\t\t\t\t\t<option value='fa-users'>&#xf0c0; users</option>\n\t\t\t\t\t<option value='fa-vcard'>&#xf2bb; vcard</option>\n\t\t\t\t\t<option value='fa-vcard-o'>&#xf2bc; vcard-o</option>\n\t\t\t\t\t<option value='fa-venus'>&#xf221; venus</option>\n\t\t\t\t\t<option value='fa-venus-double'>&#xf226; venus-double</option>\n\t\t\t\t\t<option value='fa-venus-mars'>&#xf228; venus-mars</option>\n\t\t\t\t\t<option value='fa-viacoin'>&#xf237; viacoin</option>\n\t\t\t\t\t<option value='fa-viadeo'>&#xf2a9; viadeo</option>\n\t\t\t\t\t<option value='fa-viadeo-square'>&#xf2aa; viadeo-square</option>\n\t\t\t\t\t<option value='fa-video-camera'>&#xf03d; video-camera</option>\n\t\t\t\t\t<option value='fa-vimeo'>&#xf27d; vimeo</option>\n\t\t\t\t\t<option value='fa-vimeo-square'>&#xf194; vimeo-square</option>\n\t\t\t\t\t<option value='fa-vine'>&#xf1ca; vine</option>\n\t\t\t\t\t<option value='fa-vk'>&#xf189; vk</option>\n\t\t\t\t\t<option value='fa-volume-control-phone'>&#xf2a0; volume-control-phone</option>\n\t\t\t\t\t<option value='fa-volume-down'>&#xf027; volume-down</option>\n\t\t\t\t\t<option value='fa-volume-off'>&#xf026; volume-off</option>\n\t\t\t\t\t<option value='fa-volume-up'>&#xf028; volume-up</option>\n\t\t\t\t\t<option value='fa-warning'>&#xf071; warning</option>\n\t\t\t\t\t<option value='fa-wechat'>&#xf1d7; wechat</option>\n\t\t\t\t\t<option value='fa-weibo'>&#xf18a; weibo</option>\n\t\t\t\t\t<option value='fa-weixin'>&#xf1d7; weixin</option>\n\t\t\t\t\t<option value='fa-whatsapp'>&#xf232; whatsapp</option>\n\t\t\t\t\t<option value='fa-wheelchair'>&#xf193; wheelchair</option>\n\t\t\t\t\t<option value='fa-wheelchair-alt'>&#xf29b; wheelchair-alt</option>\n\t\t\t\t\t<option value='fa-wifi'>&#xf1eb; wifi</option>\n\t\t\t\t\t<option value='fa-wikipedia-w'>&#xf266; wikipedia-w</option>\n\t\t\t\t\t<option value='fa-window-close'>&#xf2d3; window-close</option>\n\t\t\t\t\t<option value='fa-window-close-o'>&#xf2d4; window-close-o</option>\n\t\t\t\t\t<option value='fa-window-maximize'>&#xf2d0; window-maximize</option>\n\t\t\t\t\t<option value='fa-window-minimize'>&#xf2d1; window-minimize</option>\n\t\t\t\t\t<option value='fa-window-restore'>&#xf2d2; window-restore</option>\n\t\t\t\t\t<option value='fa-windows'>&#xf17a; windows</option>\n\t\t\t\t\t<option value='fa-won'>&#xf159; won</option>\n\t\t\t\t\t<option value='fa-wordpress'>&#xf19a; wordpress</option>\n\t\t\t\t\t<option value='fa-wpbeginner'>&#xf297; wpbeginner</option>\n\t\t\t\t\t<option value='fa-wpexplorer'>&#xf2de; wpexplorer</option>\n\t\t\t\t\t<option value='fa-wpforms'>&#xf298; wpforms</option>\n\t\t\t\t\t<option value='fa-wrench'>&#xf0ad; wrench</option>\n\t\t\t\t\t<option value='fa-xing'>&#xf168; xing</option>\n\t\t\t\t\t<option value='fa-xing-square'>&#xf169; xing-square</option>\n\t\t\t\t\t<option value='fa-y-combinator'>&#xf23b; y-combinator</option>\n\t\t\t\t\t<option value='fa-y-combinator-square'>&#xf1d4; y-combinator-square</option>\n\t\t\t\t\t<option value='fa-yahoo'>&#xf19e; yahoo</option>\n\t\t\t\t\t<option value='fa-yc'>&#xf23b; yc</option>\n\t\t\t\t\t<option value='fa-yc-square'>&#xf1d4; yc-square</option>\n\t\t\t\t\t<option value='fa-yelp'>&#xf1e9; yelp</option>\n\t\t\t\t\t<option value='fa-yen'>&#xf157; yen</option>\n\t\t\t\t\t<option value='fa-yoast'>&#xf2b1; yoast</option>\n\t\t\t\t\t<option value='fa-youtube'>&#xf167; youtube</option>\n\t\t\t\t\t<option value='fa-youtube-play'>&#xf16a; youtube-play</option>\n\t\t\t\t\t<option value='fa-youtube-square'>&#xf166; youtube-square</option>\n\t\t\t\t</select></label>\n\t\t\t</p>\n\n\t\t\t</div>\n\n\t\t\t<footer>\n\t\t\t\t<a href=\"https://my-mind.github.io/PRIVACY.txt\">Privacy policy</a>\n\t\t\t\t<a href=\"https://github.com/ondras/my-mind\" title=\"GitHub project page\"><img src=\"github.png\" alt=\"GitHub project page\" /></a>\n\t\t\t</footer>\n\n\t\t\t<button id=\"toggle\" title=\"Toggle UI\"></button>\n\t\t\t<button data-command=\"help\" title=\"Help\"><img src=\"img/help.png\" alt=\"Help\" /></button>\n\t\t\t<button data-command=\"notes\" title=\"Notes\"><img src=\"img/notes.png\" alt=\"Notes\" /></button>\n\t\t\t<img id=\"throbber\" src=\"img/throbber.gif\" />\n\t\t</div>\n\n\n\t\t<div id=\"io\" class=\"pane\" hidden>\n\t\t\t<h3></h3>\n\t\t\t<p>\n\t\t\t\t<label><span>Storage</span>\n\t\t\t\t<select id=\"backend\"></select></label>\n\t\t\t</p>\n\n\t\t\t<div id=\"file\">\n\t\t\t\t<p class=\"desc\">Local files are suitable for loading/saving files from other mindmapping applications.</p>\n\t\t\t\t<p data-for=\"save\">\n\t\t\t\t\t<label><span>Format</span>\n\t\t\t\t\t<select class=\"format\"></select></label>\n\t\t\t\t</p>\n\t\t\t\t<p class=\"row\" data-for=\"save load\">\n\t\t\t\t\t<button class=\"go\"></button><button class=\"cancel\">Cancel</button>\n\t\t\t\t</p>\n\t\t\t</div>\n\n\t\t\t<div id=\"image\">\n\t\t\t\t<p class=\"desc\">Export your design as an image.</p>\n\t\t\t\t<p data-for=\"save\">\n\t\t\t\t\t<label><span>Format</span>\n\t\t\t\t\t<select class=\"format\">\n\t\t\t\t\t\t<option value=\"png\">PNG</option>\n\t\t\t\t\t\t<option value=\"svg\">SVG</option>\n\t\t\t\t\t</select></label>\n\t\t\t\t</p>\n\t\t\t\t<p class=\"row\">\n\t\t\t\t\t<button class=\"go\"></button><button class=\"cancel\">Cancel</button>\n\t\t\t\t</p>\n\t\t\t</div>\n\n\t\t\t<div id=\"local\">\n\t\t\t\t<p class=\"desc\">Your browser's localStorage can handle many mind maps and creates a permalink, but this URL cannot be shared.</p>\n\t\t\t\t<p data-for=\"load\">\n\t\t\t\t\t<label><span>Saved maps</span>\n\t\t\t\t\t<select class=\"list\"></select></label>\n\t\t\t\t</p>\n\t\t\t\t<p class=\"row\" data-for=\"save load\">\n\t\t\t\t\t<button class=\"go\"></button><button class=\"cancel\">Cancel</button>\n\t\t\t\t</p>\n\t\t\t\t<p class=\"row\" data-for=\"load\">\n\t\t\t\t\t<button class=\"remove\">Delete</button>\n\t\t\t\t</p>\n\t\t\t</div>\n\n\t\t\t<div id=\"firebase\">\n\t\t\t\t<p class=\"desc\">Firebase offers real-time synchronization for true multi-user collaboration.</p>\n\t\t\t\t<p data-for=\"save load\">\n\t\t\t\t\t<label><span>Server</span>\n\t\t\t\t\t<input type=\"text\" class=\"server\" /></label>\n\t\t\t\t</p>\n\t\t\t\t<p data-for=\"save load\">\n\t\t\t\t\t<label><span>Auth</span>\n\t\t\t\t\t<select class=\"auth\">\n\t\t\t\t\t\t<option value=\"\">(None)</option>\n\t\t\t\t\t\t<option value=\"facebook\">Facebook</option>\n\t\t\t\t\t\t<option value=\"twitter\">Twitter</option>\n\t\t\t\t\t\t<option value=\"github\">GitHub</option>\n\t\t\t\t\t\t<option value=\"google\">Google</option>\n\t\t\t\t\t</select></label>\n\t\t\t\t</p>\n\t\t\t\t<p data-for=\"load\">\n\t\t\t\t\t<label><span>Saved maps</span>\n\t\t\t\t\t<select class=\"list\"></select></label>\n\t\t\t\t</p>\n\t\t\t\t<p class=\"row\" data-for=\"save load\">\n\t\t\t\t\t<button class=\"go\"></button><button class=\"cancel\">Cancel</button>\n\t\t\t\t</p>\n\t\t\t\t<p class=\"row\" data-for=\"load\">\n\t\t\t\t\t<button class=\"remove\">Delete</button>\n\t\t\t\t</p>\n\t\t\t</div>\n\n\t\t\t<div id=\"webdav\">\n\t\t\t\t<p class=\"desc\">Use this to access a generic DAV-like REST API.</p>\n\t\t\t\t<p data-for=\"save load\">\n\t\t\t\t\t<label><span>URL</span>\n\t\t\t\t\t<input type=\"text\" class=\"url\" /></label>\n\t\t\t\t</p>\n\t\t\t\t<p class=\"row\" data-for=\"save load\">\n\t\t\t\t\t<button class=\"go\"></button><button class=\"cancel\">Cancel</button>\n\t\t\t\t</p>\n\t\t\t</div>\n\n\t\t\t<div id=\"gdrive\">\n\t\t\t\t<p class=\"desc\">Maps stored in Google Drive have a permalink URL and can be shared with other users, if you allow this by setting proper permissions (inside Google Drive itself).</p>\n\t\t\t\t<p data-for=\"save\">\n\t\t\t\t\t<label><span>Format</span>\n\t\t\t\t\t<select class=\"format\"></select></label>\n\t\t\t\t</p>\n\t\t\t\t<p class=\"row\" data-for=\"save load\">\n\t\t\t\t\t<button class=\"go\"></button><button class=\"cancel\">Cancel</button>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div id=\"help\" class=\"pane\" hidden>\n\t\t\t<h3>Help</h3>\n\n\t\t\t<p>Navigation</p>\n\t\t\t<table class=\"navigation\"></table>\n\n\t\t\t<p>Manipulation</p>\n\t\t\t<table class=\"manipulation\"></table>\n\n\t\t\t<p>Editing</p>\n\t\t\t<table class=\"editing\"></table>\n\n\t\t\t<p>Other</p>\n\t\t\t<table class=\"other\"></table>\n\t\t</div>\n\n\t\t<div id=\"notes\" class=\"pane\" hidden>\n\t\t\t<h3>Topic Notes</h3>\n\t\t\t<iframe sandbox=\"allow-scripts\" src=\"editor.html\"></iframe>\n\t\t</div>\n\n\t\t<div id=\"context-menu\">\n\t\t\t<button data-command=\"notes\"></button>\n\t\t\t<span></span>\n\t\t\t<button data-command=\"insert-child\"></button>\n\t\t\t<button data-command=\"insert-sibling\"></button>\n\t\t\t<button data-command=\"delete\"></button>\n\t\t\t<span></span>\n\t\t\t<button data-command=\"edit\"></button>\n\t\t\t<button data-command=\"value\"></button>\n\t\t\t<span></span>\n\t\t\t<button data-command=\"undo\"></button>\n\t\t\t<button data-command=\"redo\"></button>\n\t\t\t<button data-command=\"center\"></button>\n\t\t</div>\n\n\t\t<script src=\"https://www.gstatic.com/firebasejs/5.5.2/firebase-app.js\"></script>\n\t\t<script src=\"https://www.gstatic.com/firebasejs/5.5.2/firebase-database.js\"></script>\n\t\t<script src=\"https://www.gstatic.com/firebasejs/5.5.2/firebase-auth.js\"></script>\n\n\t\t<script src=\"my-mind.js\"></script>\n\n\t\t<script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-383250-18\"></script>\n\t\t<script>\n\t\t  window.dataLayer = window.dataLayer || [];\n\t\t  function gtag(){dataLayer.push(arguments);}\n\t\t  gtag(\"js\", new Date());\n\t\t  gtag(\"config\", \"UA-383250-18\");\n\t\t</script>\n\t</body>\n</html>\n"
        },
        {
          "name": "logo",
          "type": "tree",
          "content": null
        },
        {
          "name": "map.css",
          "type": "blob",
          "size": 81.583984375,
          "content": "* {\n  font-family: source sans pro, sans-serif;\n}\nsvg > .item > foreignObject > .content {\n  font-weight: bold;\n  border-width: 2px;\n  font-size: 140%;\n}\nsvg > .item > .toggle {\n  display: none;\n}\nsvg > .item > .item > foreignObject > .content {\n  border-width: 2px;\n  font-size: 120%;\n}\n.item .cut {\n  opacity: 0.5;\n}\n.item .icon {\n  font-size: x-large;\n}\n.item foreignObject {\n  overflow: visible;\n}\n.item .content {\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  white-space: nowrap;\n  cursor: pointer;\n}\n.item .content > * {\n  flex: none;\n}\n.item.collapsed .item {\n  display: none;\n}\n.item .text {\n  text-align: center;\n  min-width: 0.5em;\n  min-height: 1.3em;\n  line-height: 1.3em;\n  outline: none;\n}\n.item .value {\n  opacity: 0.7;\n}\n.item .value:not(:empty)::before {\n  content: \"(\";\n}\n.item .value:not(:empty)::after {\n  content: \")\";\n}\n.item .status {\n  font-size: 150%;\n  line-height: 1;\n}\n.item .status.yes::after {\n  content: \"✔\";\n  color: #0f0;\n}\n.item .status.no::after {\n  content: \"✘\";\n  color: #f00;\n}\n.item .toggle {\n  cursor: pointer;\n}\n.item .toggle:not(:hover) {\n  opacity: 0.7;\n}\n.item .toggle circle {\n  stroke: #00f;\n  fill: #88f;\n}\n.item .toggle path {\n  stroke: #fff;\n  stroke-width: 2;\n}\n.item .notes {\n  width: 16px;\n  height: 16px;\n  background: url(\"../img/notes-indicator.png\") right center no-repeat;\n  position: absolute;\n  top: -8px;\n  right: 0;\n  opacity: 0.4;\n}\n.item:not(.current):not(.collapsed) > .toggle {\n  display: none;\n}\n.item.current > foreignObject > .content {\n  background-color: rgba(255, 255, 187, 0.9);\n}\n[data-shape=box] > foreignObject > .content {\n  padding: 0.15em 0.4em;\n  background-color: #fff;\n  border: 1px solid #666;\n  border-radius: 3px;\n}\n[data-shape=ellipse] > foreignObject > .content {\n  background-color: #fff;\n  border: 1px solid #666;\n  border-radius: 50%;\n  padding: 0.5em 1em;\n}\n[data-align=left] > foreignObject > .content > :not(.text):not(.notes) {\n  margin-right: 0.3em;\n}\n[data-align=right] > foreignObject > .content {\n  flex-direction: row-reverse;\n}\n[data-align=right] > foreignObject > .content > :not(.text):not(.notes) {\n  margin-left: 0.3em;\n}\n@font-face {\n  font-family: source sans pro;\n  src: url(data:application/font-woff;base64,) format('woff');\n  font-weight: normal;\n  font-style: normal;\n}\n"
        },
        {
          "name": "my-mind.css",
          "type": "blob",
          "size": 83.9404296875,
          "content": "* {\n  font-family: source sans pro, sans-serif;\n}\nhtml,\nbody {\n  margin: 0;\n  overflow: hidden;\n  height: 100%;\n  background-color: #eed;\n  -webkit-user-select: none;\n}\n[contenteditable] {\n  -webkit-user-select: auto;\n}\nsvg {\n  position: absolute;\n  overflow: visible;\n}\nmain {\n  position: relative;\n}\nbutton:not(:disabled) {\n  cursor: pointer;\n}\n.ghost {\n  position: absolute !important;\n  opacity: 0.5;\n  z-index: 1;\n}\n#tip {\n  position: absolute;\n  z-index: 1;\n  left: 10px;\n  bottom: 5px;\n}\n#tip::before {\n  content: \"Tip: \";\n}\n#tip code {\n  padding: 0 4px;\n  border-radius: 4px;\n  background-color: rgba(0, 0, 0, 0.1);\n}\n@font-face {\n  font-family: source sans pro;\n  src: url(data:application/font-woff;base64,) format('woff');\n  font-weight: normal;\n  font-style: normal;\n}\n.pane {\n  position: fixed;\n  right: 0;\n  top: 0;\n  height: 100%;\n  background-color: #fff;\n  width: 200px;\n  box-shadow: 0 0 3px #666;\n  -webkit-transition: -webkit-transform 500ms;\n  transition: transform 500ms;\n}\n.pane[hidden] {\n  display: block;\n  -webkit-transform: translate(100%, 0);\n  transform: translate(100%, 0);\n}\n.pane #throbber {\n  position: absolute;\n  top: 50px;\n  left: -60px;\n}\n.pane h3 {\n  background-color: #34495e;\n  color: #fff;\n  padding: 0.2em 0;\n  margin: 0;\n  text-transform: capitalize;\n  text-align: center;\n}\n.pane select,\n.pane input {\n  background-color: transparent;\n  border: 1px solid rgba(50, 70, 90, 0.5);\n  font-size: 13px;\n  border-radius: 4px;\n  padding: 4px;\n  box-sizing: border-box;\n  -webkit-font-smoothing: subpixel-antialiased;\n  transition: all 250ms linear;\n  width: 100%;\n}\n.pane select:hover,\n.pane input:hover,\n.pane select:focus,\n.pane input:focus {\n  border-color: #32465a;\n}\n.pane p {\n  margin: 8px 16px;\n}\n.pane p.desc {\n  font-size: 13px;\n}\n.pane p.row:not([hidden]) {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n}\n.pane label span {\n  text-transform: uppercase;\n  font-size: 80%;\n}\n.pane#ui {\n  display: flex;\n  flex-direction: column;\n}\n.pane#ui .scrollable {\n  flex: auto;\n  overflow: auto;\n}\n.pane#ui button {\n  border: none;\n  padding: 0;\n  background-color: transparent;\n  width: 32px;\n}\n.pane#ui button img {\n  display: block;\n}\n.pane#ui button[data-command=help] {\n  position: absolute;\n  left: -50px;\n  top: 5px;\n}\n.pane#ui button[data-command=notes] {\n  position: absolute;\n  left: -90px;\n  top: 5px;\n}\n.pane#ui #toggle {\n  position: absolute;\n  left: -20px;\n  top: 48%;\n  width: 35px;\n  height: 35px;\n  padding: 0 0 0 2px;\n  text-align: left;\n  border: none;\n  background-color: #fff;\n  box-shadow: -3px 0 3px -2px #666;\n  line-height: 8px;\n  border-radius: 50%;\n}\n.pane#ui #toggle::after {\n  content: \"→\";\n  font-weight: bold;\n  font-size: 22px;\n}\n.pane#ui[hidden] #toggle::after {\n  content: \"←\";\n}\n.pane#ui .color-picker {\n  display: flex;\n  flex-direction: row;\n}\n.pane#ui .color-picker [data-color] {\n  width: 14px;\n  height: 14px;\n  border-radius: 3px;\n  margin-right: 2px;\n  border: 1px solid transparent;\n}\n.pane#ui .color-picker [data-color]:hover,\n.pane#ui .color-picker [data-color]:first-child {\n  border-color: #000;\n}\n.pane#ui #icons {\n  font-size: inherit;\n}\n.pane#ui #icons,\n.pane#ui #icons option {\n  font-family: FontAwesome;\n}\n.pane#ui footer {\n  display: flex;\n  flex-direction: row;\n  padding: 6px 8px;\n  align-items: flex-end;\n  justify-content: space-between;\n}\n.pane#ui footer img {\n  display: block;\n}\n.pane#help {\n  overflow-y: auto;\n  right: auto;\n  left: 0;\n  background-color: rgba(255, 255, 255, 0.7);\n  width: 250px;\n}\n.pane#help[hidden] {\n  transform: translate(-100%, 0);\n}\n.pane#help p {\n  text-transform: uppercase;\n  font-size: 80%;\n}\n.pane#help table {\n  width: 100%;\n  border-collapse: collapse;\n  font-size: 80%;\n}\n.pane#help table td:first-child {\n  padding-left: 16px;\n}\n.pane#help table td:last-child {\n  text-align: right;\n  padding-right: 16px;\n}\n.pane#io button {\n  width: 45%;\n}\n.pane#io button.go {\n  font-weight: bold;\n}\n.pane#notes {\n  width: 50%;\n  display: flex;\n  flex-direction: column;\n}\n.pane#notes iframe {\n  border: 0;\n  width: 100%;\n  flex: auto;\n}\n#context-menu {\n  position: absolute;\n  border: 1px solid #666;\n  background-color: #fff;\n  box-shadow: 0 0 3px #666;\n  flex-direction: column;\n  width: 130px;\n}\n#context-menu:not([hidden]) {\n  display: flex;\n}\n#context-menu button {\n  background-color: transparent;\n  border: none;\n  margin: 0;\n  padding: 3px 6px;\n  font-size: 15px;\n  text-align: left;\n}\n#context-menu button:hover {\n  font-weight: bold;\n}\n#context-menu span {\n  border-top: 1px solid #666;\n  margin-top: 4px;\n  padding-top: 4px;\n}\n@media print {\n  .pane,\n  #toggle,\n  #tip {\n    display: none;\n  }\n  main > .item {\n    position: static;\n  }\n}\n"
        },
        {
          "name": "my-mind.js",
          "type": "blob",
          "size": 125.09375,
          "content": "(() => {\n  var __defProp = Object.defineProperty;\n  var __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\n  var __export = (target, all2) => {\n    __markAsModule(target);\n    for (var name in all2)\n      __defProp(target, name, { get: all2[name], enumerable: true });\n  };\n\n  // .js/html.js\n  function node(name, attrs) {\n    let node11 = document.createElement(name);\n    Object.assign(node11, attrs);\n    return node11;\n  }\n\n  // .js/svg.js\n  var NS = \"http://www.w3.org/2000/svg\";\n  function node2(name, attrs) {\n    let node11 = document.createElementNS(NS, name);\n    for (let attr in attrs) {\n      node11.setAttribute(attr, attrs[attr]);\n    }\n    return node11;\n  }\n  function group() {\n    return node2(\"g\");\n  }\n  function foreignObject() {\n    let fo = node2(\"foreignObject\");\n    fo.setAttribute(\"width\", \"1\");\n    fo.setAttribute(\"height\", \"1\");\n    return fo;\n  }\n\n  // .js/pubsub.js\n  var subscribers = new Map();\n  function publish(message, publisher, data) {\n    let subs = subscribers.get(message) || [];\n    subs.forEach((sub) => {\n      if (typeof sub == \"function\") {\n        sub(message, publisher, data);\n      } else {\n        sub.handleMessage(message, publisher, data);\n      }\n    });\n  }\n  function subscribe(message, subscriber) {\n    if (!subscribers.has(message)) {\n      subscribers.set(message, []);\n    }\n    let subs = subscribers.get(message) || [];\n    let index2 = subs.indexOf(subscriber);\n    if (index2 == -1) {\n      subs.push(subscriber);\n    }\n  }\n  function unsubscribe(message, subscriber) {\n    let subs = subscribers.get(message) || [];\n    let index2 = subs.indexOf(subscriber);\n    if (index2 > -1) {\n      subs.splice(index2, 1);\n    }\n  }\n\n  // .js/history.js\n  var index = 0;\n  var actions = [];\n  function reset() {\n    index = 0;\n    actions = [];\n  }\n  function push(action2) {\n    if (index < actions.length) {\n      actions.splice(index, actions.length - index);\n    }\n    actions.push(action2);\n    index++;\n  }\n  function back() {\n    actions[--index].undo();\n  }\n  function forward() {\n    actions[index++].do();\n  }\n  function canBack() {\n    return !!index;\n  }\n  function canForward() {\n    return index != actions.length;\n  }\n\n  // .js/ui/help.js\n  var help_exports = {};\n  __export(help_exports, {\n    close: () => close,\n    init: () => init,\n    toggle: () => toggle\n  });\n  var node3 = document.querySelector(\"#help\");\n  var MAP = {\n    \"Enter\": \"\\u21A9\",\n    \"Space\": \"Spacebar\",\n    \"ArrowLeft\": \"\\u2190\",\n    \"ArrowUp\": \"\\u2191\",\n    \"ArrowRight\": \"\\u2192\",\n    \"ArrowDown\": \"\\u2193\",\n    \"-\": \"\\u2212\"\n  };\n  function toggle() {\n    node3.hidden = !node3.hidden;\n  }\n  function init() {\n    let t = node3.querySelector(\".navigation\");\n    buildRow(t, \"pan\");\n    buildRow(t, \"select\");\n    buildRow(t, \"select-root\");\n    buildRow(t, \"select-parent\");\n    buildRow(t, \"center\");\n    buildRow(t, \"zoom-in\", \"zoom-out\");\n    buildRow(t, \"fold\");\n    t = node3.querySelector(\".manipulation\");\n    buildRow(t, \"insert-sibling\");\n    buildRow(t, \"insert-child\");\n    buildRow(t, \"swap\");\n    buildRow(t, \"side\");\n    buildRow(t, \"delete\");\n    t = node3.querySelector(\".editing\");\n    buildRow(t, \"value\");\n    buildRow(t, \"yes\", \"no\", \"computed\");\n    buildRow(t, \"edit\");\n    buildRow(t, \"newline\");\n    buildRow(t, \"bold\");\n    buildRow(t, \"italic\");\n    buildRow(t, \"underline\");\n    buildRow(t, \"strikethrough\");\n    t = node3.querySelector(\".other\");\n    buildRow(t, \"undo\", \"redo\");\n    buildRow(t, \"save\");\n    buildRow(t, \"save-as\");\n    buildRow(t, \"load\");\n    buildRow(t, \"help\");\n    buildRow(t, \"notes\");\n    buildRow(t, \"ui\");\n  }\n  function buildRow(table, ...commandNames) {\n    var row = table.insertRow(-1);\n    let labels = [];\n    let keys = [];\n    commandNames.forEach((name) => {\n      let command = repo.get(name);\n      if (!command) {\n        console.warn(name);\n        return;\n      }\n      labels.push(command.label);\n      keys = keys.concat(command.keys.map(formatKey));\n    });\n    row.insertCell(-1).textContent = labels.join(\"/\");\n    row.insertCell(-1).textContent = keys.join(\"/\");\n  }\n  function formatKey(key) {\n    var str = \"\";\n    if (key.ctrlKey) {\n      str += \"Ctrl+\";\n    }\n    if (key.altKey) {\n      str += \"Alt+\";\n    }\n    if (key.shiftKey) {\n      str += \"Shift+\";\n    }\n    if (key.key) {\n      let ch = key.key;\n      str += MAP[ch] || ch.toUpperCase();\n    }\n    if (key.code) {\n      let code = key.code;\n      if (code.startsWith(\"Key\")) {\n        str += code.substring(3);\n      } else {\n        str += MAP[code] || code;\n      }\n    }\n    return str;\n  }\n  function close() {\n    node3.hidden = true;\n  }\n\n  // .js/ui/notes.js\n  var notes_exports = {};\n  __export(notes_exports, {\n    close: () => close2,\n    init: () => init2,\n    toggle: () => toggle2\n  });\n  var node4 = document.querySelector(\"#notes\");\n  var iframe = node4.querySelector(\"iframe\");\n  function toggle2() {\n    node4.hidden = !node4.hidden;\n  }\n  function close2() {\n    if (node4.hidden) {\n      return;\n    }\n    node4.hidden = true;\n  }\n  function onMessage(e) {\n    if (!e.data || !e.data.action) {\n      return;\n    }\n    switch (e.data.action) {\n      case \"setContent\":\n        currentItem.notes = e.data.value.trim();\n        break;\n      case \"closeEditor\":\n        close2();\n        break;\n    }\n  }\n  function init2() {\n    subscribe(\"item-select\", (_message, publisher) => {\n      iframe.contentWindow && iframe.contentWindow.postMessage({\n        action: \"setContent\",\n        value: publisher.notes\n      }, \"*\");\n    });\n    window.addEventListener(\"message\", onMessage);\n  }\n\n  // .js/ui/color.js\n  var color_exports = {};\n  __export(color_exports, {\n    init: () => init3\n  });\n\n  // .js/action.js\n  var Action = class {\n    do() {\n    }\n    undo() {\n    }\n  };\n  var Multi = class extends Action {\n    constructor(actions13) {\n      super();\n      this.actions = actions13;\n    }\n    do() {\n      this.actions.forEach((action2) => action2.do());\n    }\n    undo() {\n      this.actions.slice().reverse().forEach((action2) => action2.undo());\n    }\n  };\n  var InsertNewItem = class extends Action {\n    constructor(parent, index2) {\n      super();\n      this.parent = parent;\n      this.index = index2;\n      this.item = new Item();\n    }\n    do() {\n      this.parent.collapsed = false;\n      this.parent.insertChild(this.item, this.index);\n      selectItem(this.item);\n    }\n    undo() {\n      this.parent.removeChild(this.item);\n      selectItem(this.parent);\n    }\n  };\n  var AppendItem = class extends Action {\n    constructor(parent, item) {\n      super();\n      this.parent = parent;\n      this.item = item;\n    }\n    do() {\n      this.parent.insertChild(this.item);\n      selectItem(this.item);\n    }\n    undo() {\n      this.parent.removeChild(this.item);\n      selectItem(this.parent);\n    }\n  };\n  var RemoveItem = class extends Action {\n    constructor(item) {\n      super();\n      this.item = item;\n      this.parent = item.parent;\n      this.index = this.parent.children.indexOf(this.item);\n    }\n    do() {\n      this.parent.removeChild(this.item);\n      selectItem(this.parent);\n    }\n    undo() {\n      this.parent.insertChild(this.item, this.index);\n      selectItem(this.item);\n    }\n  };\n  var MoveItem = class extends Action {\n    constructor(item, newParent, newIndex, newSide = null) {\n      super();\n      this.item = item;\n      this.newParent = newParent;\n      this.newIndex = newIndex;\n      this.newSide = newSide;\n      this.oldParent = item.parent;\n      this.oldIndex = this.oldParent.children.indexOf(item);\n      this.oldSide = item.side;\n    }\n    do() {\n      const { item, newParent, newIndex, newSide } = this;\n      item.side = newSide;\n      if (newIndex === void 0) {\n        newParent.insertChild(item);\n      } else {\n        newParent.insertChild(item, newIndex);\n      }\n      selectItem(item);\n    }\n    undo() {\n      const { item, oldSide, oldIndex, oldParent, newParent } = this;\n      item.side = oldSide;\n      oldParent.insertChild(item, oldIndex);\n      selectItem(newParent);\n    }\n  };\n  var Swap = class extends Action {\n    constructor(item, diff) {\n      super();\n      this.item = item;\n      this.parent = item.parent;\n      let children = this.parent.children;\n      let sibling = this.parent.resolvedLayout.pickSibling(item, diff);\n      this.sourceIndex = children.indexOf(item);\n      this.targetIndex = children.indexOf(sibling);\n    }\n    do() {\n      this.parent.insertChild(this.item, this.targetIndex);\n    }\n    undo() {\n      this.parent.insertChild(this.item, this.sourceIndex);\n    }\n  };\n  var SetLayout = class extends Action {\n    constructor(item, layout) {\n      super();\n      this.item = item;\n      this.layout = layout;\n      this.oldLayout = item.layout;\n    }\n    do() {\n      this.item.layout = this.layout;\n    }\n    undo() {\n      this.item.layout = this.oldLayout;\n    }\n  };\n  var SetShape = class extends Action {\n    constructor(item, shape) {\n      super();\n      this.item = item;\n      this.shape = shape;\n      this.oldShape = item.shape;\n    }\n    do() {\n      this.item.shape = this.shape;\n    }\n    undo() {\n      this.item.shape = this.oldShape;\n    }\n  };\n  var SetColor = class extends Action {\n    constructor(item, color) {\n      super();\n      this.item = item;\n      this.color = color;\n      this.oldColor = item.color;\n    }\n    do() {\n      this.item.color = this.color;\n    }\n    undo() {\n      this.item.color = this.oldColor;\n    }\n  };\n  var SetTextColor = class extends Action {\n    constructor(item, textColor) {\n      super();\n      this.item = item;\n      this.textColor = textColor;\n      this.oldTextColor = item.textColor;\n    }\n    do() {\n      this.item.textColor = this.textColor;\n    }\n    undo() {\n      this.item.textColor = this.oldTextColor;\n    }\n  };\n  var SetText = class extends Action {\n    constructor(item, text) {\n      super();\n      this.item = item;\n      this.text = text;\n      this.oldText = item.text;\n      this.oldValue = item.value;\n    }\n    do() {\n      this.item.text = this.text;\n      let numText = Number(this.text);\n      if (String(numText) == this.text) {\n        this.item.value = numText;\n      }\n    }\n    undo() {\n      this.item.text = this.oldText;\n      this.item.value = this.oldValue;\n    }\n  };\n  var SetValue = class extends Action {\n    constructor(item, value) {\n      super();\n      this.item = item;\n      this.value = value;\n      this.oldValue = item.value;\n    }\n    do() {\n      this.item.value = this.value;\n    }\n    undo() {\n      this.item.value = this.oldValue;\n    }\n  };\n  var SetStatus = class extends Action {\n    constructor(item, status) {\n      super();\n      this.item = item;\n      this.status = status;\n      this.oldStatus = item.status;\n    }\n    do() {\n      this.item.status = this.status;\n    }\n    undo() {\n      this.item.status = this.oldStatus;\n    }\n  };\n  var SetIcon = class extends Action {\n    constructor(item, icon) {\n      super();\n      this.item = item;\n      this.icon = icon;\n      this.oldIcon = item.icon;\n    }\n    do() {\n      this.item.icon = this.icon;\n    }\n    undo() {\n      this.item.icon = this.oldIcon;\n    }\n  };\n  var SetSide = class extends Action {\n    constructor(item, side) {\n      super();\n      this.item = item;\n      this.side = side;\n      this.oldSide = item.side;\n    }\n    do() {\n      this.item.side = this.side;\n      this.item.update({ children: true });\n    }\n    undo() {\n      this.item.side = this.oldSide;\n      this.item.update({ children: true });\n    }\n  };\n\n  // .js/ui/color.js\n  var node5 = document.querySelector(\"#color\");\n  function init3() {\n    node5.addEventListener(\"click\", onClick);\n    [...node5.querySelectorAll(\"[data-color]\")].forEach((item) => {\n      item.style.backgroundColor = item.dataset.color;\n    });\n  }\n  function onClick(e) {\n    e.preventDefault();\n    let color = e.target.dataset.color || \"\";\n    let action2 = new SetColor(currentItem, color);\n    action(action2);\n  }\n\n  // .js/ui/text-color.js\n  var text_color_exports = {};\n  __export(text_color_exports, {\n    init: () => init4\n  });\n  var node6 = document.querySelector(\"#text-color\");\n  function init4() {\n    node6.addEventListener(\"click\", onClick2);\n    [...node6.querySelectorAll(\"[data-color]\")].forEach((item) => {\n      item.style.backgroundColor = item.dataset.color;\n    });\n  }\n  function onClick2(e) {\n    e.preventDefault();\n    let color = e.target.dataset.color || \"\";\n    let action2 = new SetTextColor(currentItem, color);\n    action(action2);\n  }\n\n  // .js/ui/value.js\n  var value_exports = {};\n  __export(value_exports, {\n    init: () => init5,\n    update: () => update\n  });\n  var select = document.querySelector(\"#value\");\n  function init5() {\n    select.addEventListener(\"change\", onChange);\n  }\n  function update() {\n    let value = currentItem.value;\n    if (value === null) {\n      value = \"\";\n    }\n    if (typeof value == \"number\") {\n      value = \"num\";\n    }\n    select.value = value;\n  }\n  function onChange() {\n    let value = select.value;\n    if (value == \"num\") {\n      repo.get(\"value\").execute();\n    } else {\n      let action2 = new SetValue(currentItem, value || null);\n      action(action2);\n    }\n  }\n\n  // .js/ui/layout.js\n  var layout_exports = {};\n  __export(layout_exports, {\n    init: () => init6,\n    update: () => update2\n  });\n\n  // .js/layout/layout.js\n  var OPPOSITE = {\n    left: \"right\",\n    right: \"left\",\n    top: \"bottom\",\n    bottom: \"top\"\n  };\n  var Layout = class {\n    constructor(id, label, childDirection = \"right\") {\n      this.id = id;\n      this.label = label;\n      this.childDirection = childDirection;\n      this.SPACING_CHILD = 4;\n      repo2.set(this.id, this);\n    }\n    get option() {\n      return new Option(this.label, this.id);\n    }\n    getChildDirection(_child) {\n      return this.childDirection;\n    }\n    computeAlignment(item) {\n      let direction = item.isRoot ? this.childDirection : item.parent.resolvedLayout.getChildDirection(item);\n      if (direction == \"left\") {\n        return \"right\";\n      }\n      return \"left\";\n    }\n    pick(item, dir) {\n      if (!item.collapsed) {\n        var children = item.children;\n        for (var i = 0; i < children.length; i++) {\n          var child = children[i];\n          if (this.getChildDirection(child) == dir) {\n            return child;\n          }\n        }\n      }\n      if (item.isRoot) {\n        return item;\n      }\n      let childItem = item;\n      var parentLayout = childItem.parent.resolvedLayout;\n      var thisChildDirection = parentLayout.getChildDirection(item);\n      if (thisChildDirection == dir) {\n        return childItem;\n      } else if (thisChildDirection == OPPOSITE[dir]) {\n        return childItem.parent;\n      } else {\n        return parentLayout.pickSibling(childItem, dir == \"left\" || dir == \"top\" ? -1 : 1);\n      }\n    }\n    pickSibling(item, dir) {\n      if (item.isRoot) {\n        return item;\n      }\n      var children = item.parent.children;\n      var index2 = children.indexOf(item);\n      index2 += dir;\n      index2 = (index2 + children.length) % children.length;\n      return children[index2];\n    }\n    positionToggle(item, point) {\n      item.dom.toggle.setAttribute(\"transform\", `translate(${point.map(Math.round)})`);\n    }\n    getChildAnchor(item, side) {\n      let { position, contentPosition, contentSize } = item;\n      if (side == \"left\" || side == \"right\") {\n        var pos = position[0] + contentPosition[0];\n        if (side == \"left\") {\n          pos += contentSize[0];\n        }\n      } else {\n        var pos = position[1] + contentPosition[1];\n        if (side == \"top\") {\n          pos += contentSize[1];\n        }\n      }\n      return pos;\n    }\n    computeChildrenBBox(children, childIndex) {\n      let bbox = [0, 0];\n      var rankIndex = (childIndex + 1) % 2;\n      children.forEach((child) => {\n        const { size } = child;\n        bbox[rankIndex] = Math.max(bbox[rankIndex], size[rankIndex]);\n        bbox[childIndex] += size[childIndex];\n      });\n      if (children.length > 1) {\n        bbox[childIndex] += this.SPACING_CHILD * (children.length - 1);\n      }\n      return bbox;\n    }\n  };\n  var repo2 = new Map();\n\n  // .js/layout/graph.js\n  var SPACING_RANK = 16;\n  var R = SPACING_RANK / 2;\n  var GraphLayout = class extends Layout {\n    update(item) {\n      let totalHeight = this.layoutItem(item, this.childDirection);\n      if (this.childDirection == \"left\" || this.childDirection == \"right\") {\n        this.drawLinesHorizontal(item, this.childDirection);\n      } else {\n        this.drawLinesVertical(item, this.childDirection, totalHeight);\n      }\n    }\n    layoutItem(item, rankDirection) {\n      const { contentSize, children } = item;\n      let rankIndex = rankDirection == \"left\" || rankDirection == \"right\" ? 0 : 1;\n      let childIndex = (rankIndex + 1) % 2;\n      let rankSize = contentSize[rankIndex];\n      let childSize = contentSize[childIndex];\n      if (!item.collapsed && children.length > 0) {\n        let bbox = this.computeChildrenBBox(children, childIndex);\n        rankSize += bbox[rankIndex] + SPACING_RANK;\n        childSize = Math.max(childSize, bbox[childIndex]);\n        let offset = [0, 0];\n        if (rankDirection == \"right\") {\n          offset[0] = contentSize[0] + SPACING_RANK;\n        }\n        if (rankDirection == \"bottom\") {\n          offset[1] = contentSize[1] + SPACING_RANK;\n        }\n        offset[childIndex] = Math.round((childSize - bbox[childIndex]) / 2);\n        this.layoutChildren(children, rankDirection, offset, bbox);\n      }\n      let labelPos = 0;\n      if (rankDirection == \"left\") {\n        labelPos = rankSize - contentSize[0];\n      }\n      if (rankDirection == \"top\") {\n        labelPos = rankSize - contentSize[1];\n      }\n      let contentPosition = [Math.round((childSize - contentSize[childIndex]) / 2), labelPos];\n      if (rankIndex == 0) {\n        contentPosition = contentPosition.reverse();\n      }\n      item.contentPosition = contentPosition;\n      return rankIndex == 0 ? childSize : rankSize;\n    }\n    layoutChildren(children, rankDirection, offset, bbox) {\n      var rankIndex = rankDirection == \"left\" || rankDirection == \"right\" ? 0 : 1;\n      var childIndex = (rankIndex + 1) % 2;\n      children.forEach((child) => {\n        const { size } = child;\n        if (rankDirection == \"left\") {\n          offset[0] = bbox[0] - size[0];\n        }\n        if (rankDirection == \"top\") {\n          offset[1] = bbox[1] - size[1];\n        }\n        child.position = offset;\n        offset[childIndex] += size[childIndex] + this.SPACING_CHILD;\n      });\n      return bbox;\n    }\n    drawLinesHorizontal(item, side) {\n      const { contentPosition, contentSize, resolvedShape, resolvedColor, children, dom } = item;\n      if (children.length == 0) {\n        return;\n      }\n      const dirModifier = side == \"right\" ? 1 : -1;\n      let itemAnchor = [\n        contentPosition[0] + (side == \"right\" ? contentSize[0] : 0) + dirModifier * 0.5,\n        resolvedShape.getVerticalAnchor(item)\n      ];\n      let cross = [\n        itemAnchor[0] + dirModifier * R,\n        itemAnchor[1]\n      ];\n      this.positionToggle(item, cross);\n      if (item.collapsed) {\n        return;\n      }\n      let d = [];\n      if (children.length == 1) {\n        var child = children[0];\n        const { position, resolvedShape: resolvedShape2 } = child;\n        let childAnchor = [\n          this.getChildAnchor(child, side),\n          resolvedShape2.getVerticalAnchor(child) + position[1]\n        ];\n        let midX = (itemAnchor[0] + childAnchor[0]) / 2;\n        d.push(`M ${itemAnchor}`, `C ${[midX, itemAnchor[1]]} ${[midX, childAnchor[1]]} ${childAnchor}`);\n        let path2 = node2(\"path\", { d: d.join(\" \"), stroke: resolvedColor, fill: \"none\" });\n        dom.connectors.append(path2);\n        return;\n      }\n      d.push(`M ${itemAnchor}`, `L ${cross}`);\n      const firstChild = children[0];\n      const lastChild = children[children.length - 1];\n      const cornerEndX = cross[0] + dirModifier * R;\n      const sweep = dirModifier > 0 ? 0 : 1;\n      let firstAnchor = [\n        this.getChildAnchor(firstChild, side),\n        firstChild.resolvedShape.getVerticalAnchor(firstChild) + firstChild.position[1]\n      ];\n      let lastAnchor = [\n        this.getChildAnchor(lastChild, side),\n        lastChild.resolvedShape.getVerticalAnchor(lastChild) + lastChild.position[1]\n      ];\n      d.push(`M ${firstAnchor}`, `L ${cornerEndX} ${firstAnchor[1]}`, `A ${R} ${R} 0 0 ${sweep} ${cross[0]} ${firstAnchor[1] + R}`, `L ${cross[0]} ${lastAnchor[1] - R}`, `A ${R} ${R} 0 0 ${sweep} ${cornerEndX} ${lastAnchor[1]}`, `L ${lastAnchor}`);\n      for (let i = 1; i < children.length - 1; i++) {\n        const c = children[i];\n        const y = c.resolvedShape.getVerticalAnchor(c) + c.position[1];\n        let lineStart = [cross[0], y];\n        let childAnchor = [this.getChildAnchor(c, side), y];\n        d.push(`M ${lineStart}`, `L ${childAnchor}`);\n      }\n      let path = node2(\"path\", { d: d.join(\" \"), stroke: resolvedColor, fill: \"none\" });\n      dom.connectors.append(path);\n    }\n    drawLinesVertical(item, side, totalHeight) {\n      const { contentSize, resolvedShape, resolvedColor, children, dom } = item;\n      if (children.length == 0) {\n        return;\n      }\n      const dirModifier = side == \"bottom\" ? 1 : -1;\n      let itemAnchor = [\n        resolvedShape.getHorizontalAnchor(item),\n        side == \"bottom\" ? resolvedShape.getVerticalAnchor(item) : totalHeight - contentSize[1]\n      ];\n      let cross = [\n        itemAnchor[0],\n        (side == \"bottom\" ? contentSize[1] : itemAnchor[1]) + (R * dirModifier + 0.5)\n      ];\n      this.positionToggle(item, cross);\n      if (item.collapsed) {\n        return;\n      }\n      let d = [];\n      d.push(`M ${itemAnchor}`, `L ${cross}`);\n      if (children.length == 1) {\n        let child = children[0];\n        let childAnchor = [cross[0], this.getChildAnchor(child, side)];\n        d.push(`M ${cross}`, `L ${childAnchor}`);\n        let path2 = node2(\"path\", { d: d.join(\" \"), stroke: resolvedColor, fill: \"none\" });\n        dom.connectors.append(path2);\n        return;\n      }\n      const firstChild = children[0];\n      const lastChild = children[children.length - 1];\n      const cornerEndY = cross[1] + dirModifier * R;\n      const sweep = dirModifier > 0 ? 1 : 0;\n      let firstAnchor = [\n        firstChild.resolvedShape.getHorizontalAnchor(firstChild) + firstChild.position[0],\n        this.getChildAnchor(firstChild, side)\n      ];\n      let lastAnchor = [\n        lastChild.resolvedShape.getHorizontalAnchor(lastChild) + lastChild.position[0],\n        this.getChildAnchor(lastChild, side)\n      ];\n      d.push(`M ${firstAnchor}`, `L ${firstAnchor[0]} ${cornerEndY}`, `A ${R} ${R} 0 0 ${sweep} ${firstAnchor[0] + R} ${cross[1]}`, `L ${lastAnchor[0] - R} ${cross[1]}`, `A ${R} ${R} 0 0 ${sweep} ${lastAnchor[0]} ${cornerEndY}`, `L ${lastAnchor}`);\n      for (var i = 1; i < children.length - 1; i++) {\n        const c = children[i];\n        const x = c.resolvedShape.getHorizontalAnchor(c) + c.position[0];\n        let lineStart = [x, cross[1]];\n        let childAnchor = [x, this.getChildAnchor(c, side)];\n        d.push(`M ${lineStart}`, `L ${childAnchor}`);\n      }\n      let path = node2(\"path\", { d: d.join(\" \"), stroke: resolvedColor, fill: \"none\" });\n      dom.connectors.append(path);\n    }\n  };\n  new GraphLayout(\"graph-bottom\", \"Bottom\", \"bottom\");\n  new GraphLayout(\"graph-top\", \"Top\", \"top\");\n  new GraphLayout(\"graph-left\", \"Left\", \"left\");\n  new GraphLayout(\"graph-right\", \"Right\", \"right\");\n\n  // .js/layout/tree.js\n  var SPACING_RANK2 = 32;\n  var R2 = SPACING_RANK2 / 4;\n  var LINE_OFFSET = SPACING_RANK2 / 2;\n  var TreeLayout = class extends Layout {\n    update(item) {\n      let totalWidth = this.layoutItem(item, this.childDirection);\n      this.drawLines(item, this.childDirection, totalWidth);\n    }\n    layoutItem(item, rankDirection) {\n      const { contentSize, children } = item;\n      let rankSize = contentSize[0];\n      if (!item.collapsed && children.length > 0) {\n        let bbox = this.computeChildrenBBox(children, 1);\n        rankSize = Math.max(rankSize, bbox[0] + SPACING_RANK2);\n        let offset = [SPACING_RANK2, contentSize[1] + this.SPACING_CHILD];\n        if (rankDirection == \"left\") {\n          offset[0] = rankSize - bbox[0] - SPACING_RANK2;\n        }\n        this.layoutChildren(children, rankDirection, offset, bbox);\n      }\n      let labelPos = 0;\n      if (rankDirection == \"left\") {\n        labelPos = rankSize - contentSize[0];\n      }\n      item.contentPosition = [labelPos, 0];\n      return rankSize;\n    }\n    layoutChildren(children, rankDirection, offset, bbox) {\n      children.forEach((child) => {\n        const { size } = child;\n        let left = offset[0];\n        if (rankDirection == \"left\") {\n          left += bbox[0] - size[0];\n        }\n        child.position = [left, offset[1]];\n        offset[1] += size[1] + this.SPACING_CHILD;\n      });\n    }\n    drawLines(item, direction, totalWidth) {\n      const { resolvedShape, resolvedColor, children, dom } = item;\n      const dirModifier = direction == \"right\" ? 1 : -1;\n      const lineX = (direction == \"left\" ? totalWidth - LINE_OFFSET : LINE_OFFSET) + 0.5;\n      const toggleDistance = TOGGLE_SIZE + 2;\n      let pointAnchor = [\n        lineX,\n        resolvedShape.getVerticalAnchor(item)\n      ];\n      this.positionToggle(item, [pointAnchor[0], pointAnchor[1] + toggleDistance]);\n      if (children.length == 0 || item.collapsed) {\n        return;\n      }\n      let lastChild = children[children.length - 1];\n      let lineEnd = [\n        lineX,\n        lastChild.resolvedShape.getVerticalAnchor(lastChild) + lastChild.position[1] - R2\n      ];\n      let d = [`M ${pointAnchor}`, `L ${lineEnd}`];\n      let sweep = dirModifier > 0 ? 0 : 1;\n      children.forEach((child) => {\n        const { resolvedShape: resolvedShape2, position } = child;\n        const y = resolvedShape2.getVerticalAnchor(child) + position[1];\n        d.push(`M ${lineX} ${y - R2}`, `A ${R2} ${R2} 0 0 ${sweep} ${lineX + dirModifier * R2} ${y}`, `L ${this.getChildAnchor(child, direction)} ${y}`);\n      });\n      let path = node2(\"path\", { d: d.join(\" \"), stroke: resolvedColor, fill: \"none\" });\n      dom.connectors.append(path);\n    }\n  };\n  new TreeLayout(\"tree-left\", \"Left\", \"left\");\n  new TreeLayout(\"tree-right\", \"Right\", \"right\");\n\n  // .js/layout/map.js\n  var MapLayout = class extends GraphLayout {\n    constructor() {\n      super(...arguments);\n      this.LINE_THICKNESS = 8;\n    }\n    update(item) {\n      if (item.isRoot) {\n        this.layoutRoot(item);\n      } else {\n        var side = this.getChildDirection(item);\n        repo2.get(`graph-${side}`).update(item);\n      }\n    }\n    getChildDirection(child) {\n      while (!child.parent.isRoot) {\n        child = child.parent;\n      }\n      let side = child.side;\n      if (side) {\n        return side;\n      }\n      let counts = { left: 0, right: 0 };\n      child.parent.children.forEach((sibling) => {\n        let side2 = sibling.side;\n        if (!side2) {\n          side2 = counts.right > counts.left ? \"left\" : \"right\";\n          sibling.side = side2;\n        }\n        counts[side2]++;\n      });\n      return child.side;\n    }\n    pickSibling(item, dir) {\n      if (item.isRoot) {\n        return item;\n      }\n      const parent = item.parent;\n      var children = parent.children;\n      if (parent.isRoot) {\n        var side = this.getChildDirection(item);\n        children = children.filter((child) => this.getChildDirection(child) == side);\n      }\n      var index2 = children.indexOf(item);\n      index2 += dir;\n      index2 = (index2 + children.length) % children.length;\n      return children[index2];\n    }\n    layoutRoot(item) {\n      const { children, contentSize } = item;\n      let childrenLeft = [];\n      let childrenRight = [];\n      let contentPosition = [0, 0];\n      children.forEach((child) => {\n        var side = this.getChildDirection(child);\n        if (side == \"left\") {\n          childrenLeft.push(child);\n        } else {\n          childrenRight.push(child);\n        }\n      });\n      let bboxLeft = this.computeChildrenBBox(childrenLeft, 1);\n      let bboxRight = this.computeChildrenBBox(childrenRight, 1);\n      let height = Math.max(bboxLeft[1], bboxRight[1], contentSize[1]);\n      let left = 0;\n      this.layoutChildren(childrenLeft, \"left\", [left, Math.round((height - bboxLeft[1]) / 2)], bboxLeft);\n      left += bboxLeft[0];\n      if (childrenLeft.length) {\n        left += SPACING_RANK;\n      }\n      contentPosition[0] = left;\n      left += contentSize[0];\n      if (childrenRight.length) {\n        left += SPACING_RANK;\n      }\n      this.layoutChildren(childrenRight, \"right\", [left, Math.round((height - bboxRight[1]) / 2)], bboxRight);\n      left += bboxRight[0];\n      contentPosition[1] = Math.round((height - contentSize[1]) / 2);\n      item.contentPosition = contentPosition;\n      this.drawRootConnectors(item, \"left\", childrenLeft);\n      this.drawRootConnectors(item, \"right\", childrenRight);\n    }\n    drawRootConnectors(item, direction, children) {\n      if (children.length == 0 || item.collapsed) {\n        return;\n      }\n      const { contentSize, contentPosition, resolvedShape, dom } = item;\n      let x1 = contentPosition[0] + contentSize[0] / 2;\n      let y1 = resolvedShape.getVerticalAnchor(item);\n      const half = this.LINE_THICKNESS / 2;\n      let paths = children.map((child) => {\n        const { resolvedColor, resolvedShape: resolvedShape2, position } = child;\n        let x2 = this.getChildAnchor(child, direction);\n        let y2 = resolvedShape2.getVerticalAnchor(child) + position[1];\n        let angle = Math.atan2(y2 - y1, x2 - x1) + Math.PI / 2;\n        let dx = Math.cos(angle) * half;\n        let dy = Math.sin(angle) * half;\n        let d = [\n          `M ${x1 - dx} ${y1 - dy}`,\n          `Q ${(x2 + x1) / 2} ${y2} ${x2} ${y2}`,\n          `Q ${(x2 + x1) / 2} ${y2} ${x1 + dx} ${y1 + dy}`,\n          `Z`\n        ];\n        let attrs = {\n          d: d.join(\" \"),\n          fill: resolvedColor,\n          stroke: resolvedColor\n        };\n        return node2(\"path\", attrs);\n      });\n      dom.connectors.append(...paths);\n    }\n  };\n  new MapLayout(\"map\", \"Map\");\n\n  // .js/ui/layout.js\n  var select2 = document.querySelector(\"#layout\");\n  function init6() {\n    let layout = repo2.get(\"map\");\n    select2.append(layout.option);\n    let label = buildGroup(\"Graph\");\n    let graphOptions = [\"right\", \"left\", \"bottom\", \"top\"].map((name) => {\n      return repo2.get(`graph-${name}`).option;\n    });\n    label.append(...graphOptions);\n    label = buildGroup(\"Tree\");\n    let treeOptions = [\"right\", \"left\"].map((name) => {\n      return repo2.get(`tree-${name}`).option;\n    });\n    label.append(...treeOptions);\n    select2.addEventListener(\"change\", onChange2);\n  }\n  function update2() {\n    var value = \"\";\n    var layout = currentItem.layout;\n    if (layout) {\n      value = layout.id;\n    }\n    select2.value = value;\n    getOption(\"\").disabled = currentItem.isRoot;\n    getOption(\"map\").disabled = !currentItem.isRoot;\n  }\n  function onChange2() {\n    let layout = repo2.get(select2.value);\n    var action2 = new SetLayout(currentItem, layout);\n    action(action2);\n  }\n  function getOption(value) {\n    return select2.querySelector(`option[value=\"${value}\"]`);\n  }\n  function buildGroup(label) {\n    let node11 = document.createElement(\"optgroup\");\n    node11.label = label;\n    select2.append(node11);\n    return node11;\n  }\n\n  // .js/ui/icon.js\n  var icon_exports = {};\n  __export(icon_exports, {\n    init: () => init7,\n    update: () => update3\n  });\n  var select3 = document.querySelector(\"#icons\");\n  function init7() {\n    select3.addEventListener(\"change\", onChange3);\n  }\n  function update3() {\n    select3.value = currentItem.icon || \"\";\n  }\n  function onChange3() {\n    let action2 = new SetIcon(currentItem, select3.value);\n    action(action2);\n  }\n\n  // .js/ui/shape.js\n  var shape_exports = {};\n  __export(shape_exports, {\n    init: () => init8,\n    update: () => update4\n  });\n\n  // .js/shape/shape.js\n  var VERTICAL_OFFSET = 0.5;\n  var Shape = class {\n    constructor(id, label) {\n      this.id = id;\n      this.label = label;\n      repo3.set(this.id, this);\n    }\n    get option() {\n      return new Option(this.label, this.id);\n    }\n    update(item) {\n      item.dom.content.style.borderColor = item.resolvedColor;\n    }\n    getHorizontalAnchor(item) {\n      const { contentPosition, contentSize } = item;\n      return Math.round(contentPosition[0] + contentSize[0] / 2) + 0.5;\n    }\n    getVerticalAnchor(item) {\n      const { contentPosition, contentSize } = item;\n      return contentPosition[1] + Math.round(contentSize[1] * VERTICAL_OFFSET) + 0.5;\n    }\n  };\n  var repo3 = new Map();\n\n  // .js/shape/box.js\n  var Box = class extends Shape {\n    constructor() {\n      super(\"box\", \"Box\");\n    }\n  };\n  new Box();\n\n  // .js/shape/ellipse.js\n  var Ellipse = class extends Shape {\n    constructor() {\n      super(\"ellipse\", \"Ellipse\");\n    }\n  };\n  new Ellipse();\n\n  // .js/shape/underline.js\n  var VERTICAL_OFFSET2 = -4;\n  var Underline = class extends Shape {\n    constructor() {\n      super(\"underline\", \"Underline\");\n    }\n    update(item) {\n      const { contentPosition, resolvedColor, contentSize, dom } = item;\n      let left = contentPosition[0];\n      let right = left + contentSize[0];\n      let top = this.getVerticalAnchor(item);\n      let d = [\n        `M ${left} ${top}`,\n        `L ${right} ${top}`\n      ];\n      let path = node2(\"path\", { d: d.join(\" \"), stroke: resolvedColor, fill: \"none\" });\n      dom.connectors.append(path);\n    }\n    getVerticalAnchor(item) {\n      const { contentPosition, contentSize } = item;\n      return contentPosition[1] + contentSize[1] + VERTICAL_OFFSET2 + 0.5;\n    }\n  };\n  new Underline();\n\n  // .js/ui/shape.js\n  var select4 = document.querySelector(\"#shape\");\n  function init8() {\n    repo3.forEach((shape) => select4.append(shape.option));\n    select4.addEventListener(\"change\", onChange4);\n  }\n  function update4() {\n    let value = \"\";\n    let shape = currentItem.shape;\n    if (shape) {\n      value = shape.id;\n    }\n    select4.value = value;\n  }\n  function onChange4() {\n    let shape = repo3.get(select4.value);\n    let action2 = new SetShape(currentItem, shape);\n    action(action2);\n  }\n\n  // .js/ui/status.js\n  var status_exports = {};\n  __export(status_exports, {\n    init: () => init9,\n    update: () => update5\n  });\n  var select5 = document.querySelector(\"#status\");\n  var STATUS_MAP = {\n    \"yes\": true,\n    \"no\": false,\n    \"\": null\n  };\n  function statusToString(status) {\n    for (let key in STATUS_MAP) {\n      if (STATUS_MAP[key] === status) {\n        return key;\n      }\n    }\n    return String(status);\n  }\n  function stringToStatus(str) {\n    return str in STATUS_MAP ? STATUS_MAP[str] : str;\n  }\n  function init9() {\n    select5.addEventListener(\"change\", onChange5);\n  }\n  function update5() {\n    select5.value = statusToString(currentItem.status);\n  }\n  function onChange5() {\n    let status = stringToStatus(select5.value);\n    let action2 = new SetStatus(currentItem, status);\n    action(action2);\n  }\n\n  // .js/ui/tip.js\n  var tip_exports = {};\n  __export(tip_exports, {\n    init: () => init10\n  });\n  var node7 = document.querySelector(\"#tip\");\n  function init10() {\n    node7.addEventListener(\"click\", hide);\n    subscribe(\"command-child\", hide);\n    subscribe(\"command-sibling\", hide);\n  }\n  function hide() {\n    unsubscribe(\"command-child\", hide);\n    unsubscribe(\"command-sibling\", hide);\n    node7.removeEventListener(\"click\", hide);\n    node7.hidden = true;\n  }\n\n  // .js/ui/io.js\n  var io_exports = {};\n  __export(io_exports, {\n    hide: () => hide2,\n    init: () => init11,\n    isActive: () => isActive,\n    quickSave: () => quickSave,\n    restore: () => restore,\n    show: () => show\n  });\n\n  // .js/ui/backend/backend.js\n  var BackendUI = class {\n    constructor(backend, label) {\n      this.backend = backend;\n      this.label = label;\n      this.mode = \"load\";\n      repo4.set(this.id, this);\n      this.prefix = `mm.app.${this.id}`;\n      const { go, cancel } = this;\n      cancel.addEventListener(\"click\", (_) => hide2());\n      go.addEventListener(\"click\", (_) => this.submit());\n    }\n    get id() {\n      return this.backend.id;\n    }\n    get node() {\n      return document.querySelector(`#${this.id}`);\n    }\n    get cancel() {\n      return this.node.querySelector(\".cancel\");\n    }\n    get go() {\n      return this.node.querySelector(\".go\");\n    }\n    get option() {\n      return new Option(this.label, this.id);\n    }\n    reset() {\n      this.backend.reset();\n    }\n    setState(_data) {\n    }\n    getState() {\n      return {};\n    }\n    show(mode2) {\n      this.mode = mode2;\n      const { go, node: node11 } = this;\n      go.textContent = mode2.charAt(0).toUpperCase() + mode2.substring(1);\n      [...node11.querySelectorAll(\"[data-for]\")].forEach((node12) => node12.hidden = true);\n      [...node11.querySelectorAll(`[data-for~=${mode2}]`)].forEach((node12) => node12.hidden = false);\n      go.focus();\n    }\n    saveDone() {\n      setThrobber(false);\n      publish(\"save-done\", this);\n    }\n    loadDone(json) {\n      setThrobber(false);\n      try {\n        showMap(Map2.fromJSON(json));\n        publish(\"load-done\", this);\n      } catch (e) {\n        this.error(e);\n      }\n    }\n    error(e) {\n      setThrobber(false);\n      let message = e instanceof Error ? e.message : e;\n      alert(`IO error: ${message}`);\n    }\n    submit() {\n      switch (this.mode) {\n        case \"save\":\n          this.save();\n          break;\n        case \"load\":\n          this.load();\n          break;\n      }\n    }\n  };\n  var repo4 = new Map();\n  function buildList(list, select7) {\n    let data = [];\n    for (let id in list) {\n      data.push({ id, name: list[id] });\n    }\n    data.sort((a, b) => a.name.localeCompare(b.name));\n    let options = data.map((item) => new Option(item.name, item.id));\n    select7.append(...options);\n  }\n\n  // .js/backend/backend.js\n  var Backend = class {\n    constructor(id) {\n      this.id = id;\n      repo5.set(id, this);\n    }\n    reset() {\n    }\n  };\n  var repo5 = new Map();\n\n  // .js/backend/local.js\n  var Local = class extends Backend {\n    constructor() {\n      super(\"local\");\n      this.prefix = \"mm.map\";\n    }\n    save(data, id, name) {\n      localStorage.setItem(`${this.prefix}.${id}`, data);\n      let names = this.list();\n      names[id] = name;\n      localStorage.setItem(`${this.prefix}.names`, JSON.stringify(names));\n    }\n    load(id) {\n      let data = localStorage.getItem(`${this.prefix}.${id}`);\n      if (!data) {\n        throw new Error(\"There is no such saved map\");\n      }\n      return data;\n    }\n    remove(id) {\n      localStorage.removeItem(`${this.prefix}.${id}`);\n      let names = this.list();\n      delete names[id];\n      localStorage.setItem(`${this.prefix}.names`, JSON.stringify(names));\n    }\n    list() {\n      try {\n        let data = localStorage.getItem(`${this.prefix}.names`) || \"{}\";\n        return JSON.parse(data);\n      } catch (e) {\n        return {};\n      }\n    }\n  };\n\n  // .js/format/format.js\n  var Format = class {\n    constructor(id, label) {\n      this.id = id;\n      this.label = label;\n      repo6.set(id, this);\n    }\n    get option() {\n      return new Option(this.label, this.id);\n    }\n  };\n  var repo6 = new Map();\n  function getByProperty(property, value) {\n    let filtered = [...repo6.values()].filter((format) => format[property] == value);\n    return filtered[0] || null;\n  }\n  function getByName(name) {\n    let index2 = name.lastIndexOf(\".\");\n    if (index2 == -1) {\n      return null;\n    }\n    let extension = name.substring(index2 + 1).toLowerCase();\n    return getByProperty(\"extension\", extension);\n  }\n  function getByMime(mime) {\n    return getByProperty(\"mime\", mime);\n  }\n  function nl2br(str) {\n    return str.replace(/\\n/g, \"<br/>\");\n  }\n  function br2nl(str) {\n    return str.replace(/<br\\s*\\/?>/g, \"\\n\");\n  }\n\n  // .js/ui/backend/local.js\n  var LocalUI = class extends BackendUI {\n    constructor() {\n      super(new Local(), \"Browser storage\");\n      this.remove.addEventListener(\"click\", (_) => {\n        var id = this.list.value;\n        if (!id) {\n          return;\n        }\n        this.backend.remove(id);\n        this.show(this.mode);\n      });\n    }\n    get list() {\n      return this.node.querySelector(\".list\");\n    }\n    get remove() {\n      return this.node.querySelector(\".remove\");\n    }\n    show(mode2) {\n      super.show(mode2);\n      const { go, remove, list } = this;\n      go.disabled = false;\n      if (mode2 == \"load\") {\n        let stored = this.backend.list();\n        list.innerHTML = \"\";\n        if (Object.keys(stored).length) {\n          go.disabled = false;\n          remove.disabled = false;\n          buildList(stored, this.list);\n        } else {\n          this.go.disabled = true;\n          this.remove.disabled = true;\n          let o = document.createElement(\"option\");\n          o.innerHTML = \"(no maps saved)\";\n          this.list.append(o);\n        }\n      }\n    }\n    setState(data) {\n      this.load(data.id);\n    }\n    getState() {\n      let data = {\n        b: this.id,\n        id: currentMap.id\n      };\n      return data;\n    }\n    save() {\n      let json = currentMap.toJSON();\n      let data = repo6.get(\"native\").to(json);\n      try {\n        this.backend.save(data, currentMap.id, currentMap.name);\n        this.saveDone();\n      } catch (e) {\n        this.error(e);\n      }\n    }\n    load(id = this.list.value) {\n      try {\n        let data = this.backend.load(id);\n        var json = repo6.get(\"native\").from(data);\n        this.loadDone(json);\n      } catch (e) {\n        this.error(e);\n      }\n    }\n  };\n\n  // .js/backend/file.js\n  var File = class extends Backend {\n    constructor() {\n      super(\"file\");\n      this.input = document.createElement(\"input\");\n    }\n    save(data, name) {\n      let link = document.createElement(\"a\");\n      link.download = name;\n      link.href = \"data:text/plain;base64,\" + btoa(unescape(encodeURIComponent(data)));\n      document.body.append(link);\n      link.click();\n      link.remove();\n    }\n    load() {\n      const { input } = this;\n      input.type = \"file\";\n      return new Promise((resolve, reject) => {\n        input.onchange = (_) => {\n          let file = input.files[0];\n          if (!file) {\n            return;\n          }\n          var reader = new FileReader();\n          reader.onload = function() {\n            resolve({ data: reader.result, name: file.name });\n          };\n          reader.onerror = function() {\n            reject(reader.error);\n          };\n          reader.readAsText(file);\n        };\n        input.click();\n      });\n    }\n  };\n\n  // .js/format/native.js\n  var Native = class extends Format {\n    constructor() {\n      super(\"native\", \"Native (JSON)\");\n      this.extension = \"mymind\";\n      this.mime = \"application/vnd.mymind+json\";\n    }\n    to(data) {\n      return JSON.stringify(data, null, \"\t\") + \"\\n\";\n    }\n    from(data) {\n      return JSON.parse(data);\n    }\n  };\n\n  // .js/format/freemind.js\n  var Native2 = class extends Format {\n    constructor(id = \"freemind\", label = \"FreeMind\") {\n      super(id, label);\n      this.extension = \"mm\";\n      this.mime = \"application/x-freemind\";\n    }\n    to(data) {\n      var doc = document.implementation.createDocument(null, null, null);\n      var map = doc.createElement(\"map\");\n      map.setAttribute(\"version\", \"1.0.1\");\n      map.appendChild(this.serializeItem(doc, data.root));\n      doc.appendChild(map);\n      var serializer = new XMLSerializer();\n      return serializer.serializeToString(doc);\n    }\n    from(data) {\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(data, \"application/xml\");\n      if (doc.documentElement.nodeName.toLowerCase() == \"parsererror\") {\n        throw new Error(doc.documentElement.textContent || \"\");\n      }\n      var root = doc.documentElement.getElementsByTagName(\"node\")[0];\n      if (!root) {\n        throw new Error(\"No root node found\");\n      }\n      var json = {\n        root: this.parseNode(root, { shape: \"underline\" })\n      };\n      json.root.layout = \"map\";\n      json.root.shape = \"ellipse\";\n      return json;\n    }\n    serializeItem(doc, json) {\n      var elm = this.serializeAttributes(doc, json);\n      (json.children || []).forEach((child) => {\n        elm.appendChild(this.serializeItem(doc, child));\n      });\n      return elm;\n    }\n    serializeAttributes(doc, json) {\n      var elm = doc.createElement(\"node\");\n      elm.setAttribute(\"TEXT\", br2nl(json.text));\n      json.id && elm.setAttribute(\"ID\", json.id);\n      if (json.side) {\n        elm.setAttribute(\"POSITION\", json.side);\n      }\n      if (json.shape == \"box\") {\n        elm.setAttribute(\"STYLE\", \"bubble\");\n      }\n      if (json.collapsed) {\n        elm.setAttribute(\"FOLDED\", \"true\");\n      }\n      if (json.notes) {\n        var notesElm = doc.createElement(\"richcontent\");\n        notesElm.setAttribute(\"TYPE\", \"NOTE\");\n        notesElm.appendChild(doc.createCDATASection(\"<html><head></head><body>\" + json.notes + \"</body></html>\"));\n        elm.appendChild(notesElm);\n      }\n      return elm;\n    }\n    parseNode(node11, parent) {\n      var json = this.parseAttributes(node11, parent);\n      for (var i = 0; i < node11.childNodes.length; i++) {\n        var child = node11.childNodes[i];\n        if (child instanceof Element && child.nodeName.toLowerCase() == \"node\") {\n          json.children.push(this.parseNode(child, json));\n        }\n      }\n      return json;\n    }\n    parseAttributes(node11, parent) {\n      var json = {\n        children: [],\n        text: nl2br(node11.getAttribute(\"TEXT\") || \"\"),\n        id: node11.getAttribute(\"ID\")\n      };\n      var position = node11.getAttribute(\"POSITION\");\n      if (position) {\n        json.side = position;\n      }\n      var style = node11.getAttribute(\"STYLE\");\n      if (style == \"bubble\") {\n        json.shape = \"box\";\n      } else {\n        json.shape = parent.shape;\n      }\n      if (node11.getAttribute(\"FOLDED\") == \"true\") {\n        json.collapsed = 1;\n      }\n      var children = node11.children;\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        switch (child.nodeName.toLowerCase()) {\n          case \"richcontent\":\n            if (child.getAttribute(\"TYPE\") == \"NOTE\") {\n              var body = child.querySelector(\"body > *\");\n              if (body) {\n                var serializer = new XMLSerializer();\n                json.notes = serializer.serializeToString(body).trim();\n              }\n            }\n            break;\n          case \"font\":\n            if (child.getAttribute(\"ITALIC\") == \"true\") {\n              json.text = \"<i>\" + json.text + \"</i>\";\n            }\n            if (child.getAttribute(\"BOLD\") == \"true\") {\n              json.text = \"<b>\" + json.text + \"</b>\";\n            }\n            break;\n        }\n      }\n      return json;\n    }\n  };\n\n  // .js/format/mma.js\n  var MMA = class extends Native2 {\n    constructor() {\n      super(\"mma\", \"Mind Map Architect\");\n      this.extension = \"mma\";\n      this.serializeAttributes = function(doc, json) {\n        var elm = doc.createElement(\"node\");\n        elm.setAttribute(\"title\", br2nl(json.text));\n        elm.setAttribute(\"expand\", json.collapsed ? \"false\" : \"true\");\n        if (json.side) {\n          elm.setAttribute(\"direction\", json.side == \"left\" ? \"0\" : \"1\");\n        }\n        if (json.color) {\n          var parts = json.color.match(/^#(.)(.)(.)$/);\n          var r = new Array(5).join(parts[1]);\n          var g = new Array(5).join(parts[2]);\n          var b = new Array(5).join(parts[3]);\n          elm.setAttribute(\"color\", \"#\" + [r, g, b].join(\"\"));\n        }\n        if (json.icon) {\n          elm.setAttribute(\"icon\", json.icon);\n        }\n        return elm;\n      };\n    }\n    parseAttributes(node11, parent) {\n      var json = {\n        children: [],\n        text: nl2br(node11.getAttribute(\"title\") || \"\"),\n        shape: \"box\"\n      };\n      if (node11.getAttribute(\"expand\") == \"false\") {\n        json.collapsed = 1;\n      }\n      var direction = node11.getAttribute(\"direction\");\n      if (direction == \"0\") {\n        json.side = \"left\";\n      }\n      if (direction == \"1\") {\n        json.side = \"right\";\n      }\n      var color = node11.getAttribute(\"color\");\n      if (color) {\n        var re = color.match(/^#(....)(....)(....)$/);\n        if (re) {\n          let parts = re.slice(1).map((str) => parseInt(str, 16) >> 8).map((num) => Math.round(num / 17)).map((num) => num.toString(16));\n          json.color = \"#\" + parts.join(\"\");\n        }\n      }\n      json.icon = node11.getAttribute(\"icon\") || \"\";\n      return json;\n    }\n  };\n\n  // .js/format/mup.js\n  var Native3 = class extends Format {\n    constructor() {\n      super(\"mup\", \"MindMup\");\n      this.extension = \"mup\";\n    }\n    to(data) {\n      var root = MMtoMup(data.root);\n      return JSON.stringify(root, null, 2);\n    }\n    from(data) {\n      var source = JSON.parse(data);\n      var root = MupToMM(source);\n      root.layout = \"map\";\n      return { root };\n    }\n  };\n  function MupToMM(item) {\n    var json = {\n      text: nl2br(item.title),\n      id: item.id,\n      shape: \"box\",\n      icon: item.icon\n    };\n    if (item.attr && item.attr.style && item.attr.style.background) {\n      json.color = item.attr.style.background;\n    }\n    if (item.attr && item.attr.collapsed) {\n      json.collapsed = 1;\n    }\n    if (item.ideas) {\n      var data = [];\n      for (var key in item.ideas) {\n        var child = MupToMM(item.ideas[key]);\n        var num = parseFloat(key);\n        child.side = num < 0 ? \"left\" : \"right\";\n        data.push({\n          child,\n          num\n        });\n      }\n      data.sort(function(a, b) {\n        return a.num - b.num;\n      });\n      json.children = data.map((item2) => item2.child);\n    }\n    return json;\n  }\n  function MMtoMup(item, side) {\n    var result = {\n      id: item.id,\n      title: br2nl(item.text),\n      icon: item.icon,\n      attr: {}\n    };\n    if (item.color) {\n      result.attr.style = { background: item.color };\n    }\n    if (item.collapsed) {\n      result.attr.collapsed = true;\n    }\n    if (item.children) {\n      result.ideas = {};\n      for (var i = 0; i < item.children.length; i++) {\n        var child = item.children[i];\n        var childSide = side || child.side;\n        var key = i + 1;\n        if (childSide == \"left\") {\n          key *= -1;\n        }\n        result.ideas[key] = MMtoMup(child, childSide);\n      }\n    }\n    return result;\n  }\n\n  // .js/format/plaintext.js\n  var Plaintext = class extends Format {\n    constructor() {\n      super(\"plaintext\", \"Plain text\");\n      this.extension = \"txt\";\n      this.mime = \"application/vnd.mymind+txt\";\n    }\n    to(data) {\n      return serializeItem(\"root\" in data ? data.root : data);\n    }\n    from(data) {\n      var lines = data.split(\"\\n\").filter(function(line) {\n        return line.match(/\\S/);\n      });\n      var items = parseItems(lines);\n      let result;\n      if (items.length == 1) {\n        result = {\n          root: items[0]\n        };\n      } else {\n        result = {\n          root: {\n            text: \"\",\n            children: items\n          }\n        };\n      }\n      result.root.layout = \"map\";\n      return result;\n    }\n  };\n  function serializeItem(item, depth = 0) {\n    var lines = (item.children || []).map((child) => {\n      return serializeItem(child, depth + 1);\n    });\n    var prefix = new Array(depth + 1).join(\"\t\");\n    lines.unshift(prefix + item.text.replace(/\\n/g, \"\"));\n    return lines.join(\"\\n\") + (depth ? \"\" : \"\\n\");\n  }\n  function parseItems(lines) {\n    let items = [];\n    if (!lines.length) {\n      return items;\n    }\n    var firstPrefix = parsePrefix(lines[0]);\n    let currentItem2 = null;\n    let childLines = [];\n    var convertChildLinesToChildren = function() {\n      if (!currentItem2 || !childLines.length) {\n        return;\n      }\n      var children = parseItems(childLines);\n      if (children.length) {\n        currentItem2.children = children;\n      }\n      childLines = [];\n    };\n    lines.forEach((line) => {\n      if (parsePrefix(line) == firstPrefix) {\n        convertChildLinesToChildren();\n        currentItem2 = { text: line.match(/^\\s*(.*)/)[1] };\n        items.push(currentItem2);\n      } else {\n        childLines.push(line);\n      }\n    });\n    convertChildLinesToChildren();\n    return items;\n  }\n  function parsePrefix(line) {\n    return line.match(/^\\s*/)[0];\n  }\n\n  // .js/ui/format-select.js\n  var all = [Native, Native2, MMA, Native3, Plaintext].map((ctor) => new ctor());\n  function fill(select7) {\n    let nodes = all.map((bui) => bui.option);\n    select7.append(...nodes);\n  }\n\n  // .js/ui/backend/file.js\n  var FileUI = class extends BackendUI {\n    constructor() {\n      super(new File(), \"File\");\n      fill(this.format);\n      this.format.value = localStorage.getItem(this.prefix + \"format\") || \"native\";\n    }\n    get format() {\n      return this.node.querySelector(\".format\");\n    }\n    show(mode2) {\n      super.show(mode2);\n      this.go.textContent = mode2 == \"save\" ? \"Save\" : \"Browse\";\n    }\n    save() {\n      let format = repo6.get(this.format.value);\n      var json = currentMap.toJSON();\n      var data = format.to(json);\n      var name = currentMap.name + \".\" + format.extension;\n      try {\n        this.backend.save(data, name);\n        this.saveDone();\n      } catch (e) {\n        this.error(e);\n      }\n    }\n    async load() {\n      try {\n        let data = await this.backend.load();\n        let format = getByName(data.name) || repo6.get(\"native\");\n        let json = format.from(data.data);\n        this.loadDone(json);\n      } catch (e) {\n        this.error(e);\n      }\n    }\n    submit() {\n      localStorage.setItem(`${this.prefix}.format`, this.format.value);\n      super.submit();\n    }\n  };\n\n  // .js/backend/webdav.js\n  var WebDAV = class extends Backend {\n    constructor() {\n      super(\"webdav\");\n    }\n    save(data, url) {\n      return this.request(\"PUT\", url, data);\n    }\n    load(url) {\n      return this.request(\"GET\", url);\n    }\n    async request(method, url, data) {\n      let init20 = {\n        method,\n        credentials: \"include\"\n      };\n      if (data) {\n        init20.body = data;\n      }\n      let response = await fetch(url, init20);\n      let text = await response.text();\n      if (response.ok) {\n        return text;\n      } else {\n        throw new Error(`HTTP/${response.status}\n\n${text}`);\n      }\n    }\n  };\n\n  // .js/ui/backend/webdav.js\n  var WebDAVUI = class extends BackendUI {\n    constructor() {\n      super(new WebDAV(), \"Generic WebDAV\");\n      this.current = \"\";\n      this.url.value = localStorage.getItem(`${this.prefix}.url`) || \"\";\n    }\n    get url() {\n      return this.node.querySelector(\".url\");\n    }\n    getState() {\n      let data = { url: this.current };\n      return data;\n    }\n    setState(data) {\n      this.load(data.url);\n    }\n    async save() {\n      setThrobber(true);\n      var map = currentMap;\n      var url = this.url.value;\n      localStorage.setItem(`${this.prefix}.url`, url);\n      if (url.match(/\\.mymind$/)) {\n      } else {\n        if (url.charAt(url.length - 1) != \"/\") {\n          url += \"/\";\n        }\n        url += `${map.name}.${repo6.get(\"native\").extension}`;\n      }\n      this.current = url;\n      let json = map.toJSON();\n      let data = repo6.get(\"native\").to(json);\n      try {\n        await this.backend.save(data, url);\n        this.saveDone();\n      } catch (e) {\n        this.error(e);\n      }\n    }\n    async load(url = this.url.value) {\n      this.current = url;\n      setThrobber(true);\n      var lastIndex = url.lastIndexOf(\"/\");\n      this.url.value = url.substring(0, lastIndex);\n      localStorage.setItem(`${this.prefix}.url`, this.url.value);\n      try {\n        let data = await this.backend.load(url);\n        let json = repo6.get(\"native\").from(data);\n        this.loadDone(json);\n      } catch (e) {\n        this.error(e);\n      }\n    }\n  };\n\n  // .js/backend/image.js\n  var ImageBackend = class extends Backend {\n    constructor() {\n      super(\"image\");\n    }\n    async save(format) {\n      const serializer = new XMLSerializer();\n      const encoder = new TextEncoder();\n      let xmlStr = serializer.serializeToString(currentMap.node);\n      let encoded = encoder.encode(xmlStr);\n      let byteString = [...encoded].map((byte) => String.fromCharCode(byte)).join(\"\");\n      let base64 = btoa(byteString);\n      let svgUrl = `data:image/svg+xml;base64,${base64}`;\n      switch (format) {\n        case \"svg\":\n          return svgUrl;\n        case \"png\":\n          let img = await waitForImageLoad(svgUrl);\n          let canvas = document.createElement(\"canvas\");\n          canvas.width = img.width;\n          canvas.height = img.height;\n          canvas.getContext(\"2d\").drawImage(img, 0, 0);\n          return new Promise((resolve) => {\n            canvas.toBlob((blob) => resolve(URL.createObjectURL(blob)), \"image/png\");\n          });\n          break;\n      }\n    }\n    download(href) {\n      let link = document.createElement(\"a\");\n      link.download = currentMap.name;\n      link.href = href;\n      link.click();\n    }\n  };\n  async function waitForImageLoad(src) {\n    let img = new Image();\n    img.src = src;\n    return new Promise((resolve) => {\n      img.onload = () => resolve(img);\n    });\n  }\n\n  // .js/ui/backend/image.js\n  var ImageUI = class extends BackendUI {\n    constructor() {\n      super(new ImageBackend(), \"Image\");\n    }\n    get format() {\n      return this.node.querySelector(\".format\");\n    }\n    async save() {\n      let url = await this.backend.save(this.format.value);\n      this.backend.download(url);\n    }\n    load() {\n    }\n  };\n\n  // .js/backend/gdrive.js\n  var SCOPE = \"https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.install\";\n  var CLIENT_ID = \"767837575056-h87qmlhmhb3djhaaqta5gv2v3koa9hii.apps.googleusercontent.com\";\n  var API_KEY = \"AIzaSyCzu1qVxlgufneOYpBgDJXN6Z9SNVcHYWM\";\n  var GDrive = class extends Backend {\n    constructor() {\n      super(\"gdrive\");\n      this.fileId = null;\n    }\n    reset() {\n      this.fileId = null;\n    }\n    async save(data, name, mime) {\n      await connect();\n      this.fileId = await this.send(data, name, mime);\n    }\n    send(data, name, mime) {\n      var path = \"/upload/drive/v2/files\";\n      var method = \"POST\";\n      if (this.fileId) {\n        path += \"/\" + this.fileId;\n        method = \"PUT\";\n      }\n      var boundary = \"b\" + Math.random();\n      var delimiter = \"--\" + boundary;\n      var body = [\n        delimiter,\n        \"Content-Type: application/json\",\n        \"\",\n        JSON.stringify({ title: name }),\n        delimiter,\n        \"Content-Type: \" + mime,\n        \"\",\n        data,\n        delimiter + \"--\"\n      ].join(\"\\r\\n\");\n      var request = gapi.client.request({\n        path,\n        method,\n        headers: {\n          \"Content-Type\": \"multipart/mixed; boundary='\" + boundary + \"'\"\n        },\n        body\n      });\n      return new Promise((resolve, reject) => {\n        request.execute((response) => {\n          if (!response) {\n            reject(new Error(\"Failed to upload to Google Drive\"));\n          } else if (response.error) {\n            reject(response.error);\n          } else {\n            resolve(response.id);\n          }\n        });\n      });\n    }\n    async load(id) {\n      await connect();\n      this.fileId = id;\n      var request = gapi.client.request({\n        path: \"/drive/v2/files/\" + this.fileId,\n        method: \"GET\"\n      });\n      return new Promise((resolve, reject) => {\n        request.execute(async (response) => {\n          if (!response || !response.id) {\n            return reject(response && response.error || new Error(\"Failed to download file\"));\n          }\n          let headers = { \"Authentication\": \"Bearer \" + gapi.auth.getToken().access_token };\n          let r = await fetch(`https://www.googleapis.com/drive/v2/files/${response.id}?alt=media`, { headers });\n          let data = await r.text();\n          if (r.status != 200) {\n            return reject(data);\n          }\n          resolve({ data, name: response.title, mime: response.mimeType });\n        });\n      });\n    }\n    async pick() {\n      await connect();\n      var token = gapi.auth.getToken();\n      var mimeTypes = [\"application/json; charset=UTF-8\", \"application/json\"];\n      [...repo6.values()].forEach((format) => {\n        if (format.mime) {\n          mimeTypes.unshift(format.mime);\n        }\n      });\n      var view = new google.picker.DocsView(google.picker.ViewId.DOCS).setMimeTypes(mimeTypes.join(\",\")).setMode(google.picker.DocsViewMode.LIST);\n      return new Promise((resolve) => {\n        let picker = new google.picker.PickerBuilder().enableFeature(google.picker.Feature.NAV_HIDDEN).addView(view).setOAuthToken(token.access_token).setDeveloperKey(API_KEY).setCallback((data) => {\n          switch (data[google.picker.Response.ACTION]) {\n            case google.picker.Action.PICKED:\n              var doc = data[google.picker.Response.DOCUMENTS][0];\n              resolve(doc.id);\n              break;\n            case google.picker.Action.CANCEL:\n              resolve(null);\n              break;\n          }\n        }).build();\n        picker.setVisible(true);\n      });\n    }\n  };\n  async function connect() {\n    if (\"gapi\" in window && gapi.auth.getToken()) {\n      return;\n    } else {\n      await loadGapi();\n      return auth();\n    }\n  }\n  function loadGapi() {\n    if (\"gapi\" in window) {\n      return;\n    }\n    let script = document.createElement(\"script\");\n    let name = (\"cb\" + Math.random()).replace(\".\", \"\");\n    script.src = \"https://apis.google.com/js/client:picker.js?onload=\" + name;\n    document.body.append(script);\n    return new Promise((resolve) => window[name] = resolve);\n  }\n  async function auth(forceUI = false) {\n    return new Promise((resolve, reject) => {\n      gapi.auth.authorize({\n        \"client_id\": CLIENT_ID,\n        \"scope\": SCOPE,\n        \"immediate\": !forceUI\n      }, async (token) => {\n        if (token && !token.error) {\n          resolve();\n        } else if (!forceUI) {\n          try {\n            await auth(true);\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        } else {\n          reject(token && token.error || new Error(\"Failed to authorize with Google\"));\n        }\n      });\n    });\n  }\n\n  // .js/ui/backend/gdrive.js\n  var GDriveUI = class extends BackendUI {\n    constructor() {\n      super(new GDrive(), \"Google Drive\");\n      fill(this.format);\n      this.format.value = localStorage.getItem(`${this.prefix}.format`) || \"native\";\n    }\n    get format() {\n      return this.node.querySelector(\".format\");\n    }\n    async save() {\n      setThrobber(true);\n      let format = repo6.get(this.format.value);\n      let json = currentMap.toJSON();\n      let data = format.to(json);\n      let name = currentMap.name;\n      let mime = \"text/plain\";\n      if (format.mime) {\n        mime = format.mime;\n      } else {\n        name += \".\" + format.extension;\n      }\n      try {\n        await this.backend.save(data, name, mime);\n        this.saveDone();\n      } catch (e) {\n        this.error(e);\n      }\n    }\n    async load() {\n      setThrobber(true);\n      try {\n        let id = await this.backend.pick();\n        this.picked(id);\n      } catch (e) {\n        this.error(e);\n      }\n    }\n    async picked(id) {\n      setThrobber(false);\n      if (!id) {\n        return;\n      }\n      setThrobber(true);\n      try {\n        let data = await this.backend.load(id);\n        let format = getByMime(data.mime) || getByName(data.name) || repo6.get(\"native\");\n        let json = format.from(data.data);\n        this.loadDone(json);\n      } catch (e) {\n        this.error(e);\n      }\n    }\n    setState(data) {\n      this.picked(data.id);\n    }\n    getState() {\n      let data = {\n        b: this.id,\n        id: this.backend.fileId\n      };\n      return data;\n    }\n  };\n\n  // .js/backend/firebase.js\n  var Firebase = class extends Backend {\n    constructor() {\n      super(\"firebase\");\n      this.current = {\n        id: null,\n        name: null,\n        data: null\n      };\n    }\n    connect(server, auth2) {\n      var config = {\n        apiKey: \"AIzaSyBO_6uCK8pHjoz1c9htVwZi6Skpm8o4LtQ\",\n        authDomain: \"my-mind.firebaseapp.com\",\n        databaseURL: \"https://\" + server + \".firebaseio.com\",\n        projectId: \"firebase-my-mind\",\n        storageBucket: \"firebase-my-mind.appspot.com\",\n        messagingSenderId: \"666556281676\"\n      };\n      firebase.initializeApp(config);\n      this.ref = firebase.database().ref();\n      this.ref.child(\"names\").on(\"value\", (snap) => {\n        publish(\"firebase-list\", this, snap.val() || {});\n      }, this);\n      if (auth2) {\n        return this.login(auth2);\n      }\n    }\n    save(data, id, name) {\n      this.ref.child(\"names/\" + id).set(name);\n      return new Promise((resolve, reject) => {\n        this.ref.child(\"data/\" + id).set(data, (err) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n            this.listenStart(data, id);\n          }\n        });\n      });\n    }\n    load(id) {\n      return new Promise((resolve, reject) => {\n        this.ref.child(\"data/\" + id).once(\"value\", (snap) => {\n          var data = snap.val();\n          if (data) {\n            resolve(data);\n            this.listenStart(data, id);\n          } else {\n            reject(new Error(\"There is no such saved map\"));\n          }\n        });\n      });\n    }\n    remove(id) {\n      this.ref.child(\"names/\" + id).remove();\n      return new Promise((resolve, reject) => {\n        this.ref.child(\"data/\" + id).remove((err) => {\n          err ? reject(err) : resolve();\n        });\n      });\n    }\n    reset() {\n      this.listenStop();\n    }\n    mergeWith(data, name) {\n      let id = this.current.id;\n      if (name != this.current.name) {\n        this.current.name = name;\n        this.ref.child(\"names/\" + id).set(name);\n      }\n      var dataRef = this.ref.child(\"data/\" + id);\n      var oldData = this.current.data;\n      this.listenStop();\n      this.recursiveRefMerge(dataRef, oldData, data);\n      this.listenStart(data, id);\n    }\n    recursiveRefMerge(ref, oldData, newData) {\n      let updateObject = {};\n      if (newData instanceof Array) {\n        for (var i = 0; i < newData.length; i++) {\n          var newValue = newData[i];\n          if (!(i in oldData)) {\n            updateObject[i] = newValue;\n          } else if (typeof newValue == \"object\") {\n            this.recursiveRefMerge(ref.child(i), oldData[i], newValue);\n          } else if (newValue !== oldData[i]) {\n            updateObject[i] = newValue;\n          }\n        }\n        for (var i = newData.length; i < oldData.length; i++) {\n          updateObject[i] = null;\n        }\n      } else {\n        for (var p in newData) {\n          var newValue = newData[p];\n          if (!(p in oldData)) {\n            updateObject[p] = newValue;\n          } else if (typeof newValue == \"object\") {\n            this.recursiveRefMerge(ref.child(p), oldData[p], newValue);\n          } else if (newValue !== oldData[p]) {\n            updateObject[p] = newValue;\n          }\n        }\n        for (var p in oldData) {\n          if (!(p in newData)) {\n            updateObject[p] = null;\n          }\n        }\n      }\n      if (Object.keys(updateObject).length) {\n        ref.update(updateObject);\n      }\n    }\n    listenStart(data, id) {\n      if (this.current.id && this.current.id == id) {\n        return;\n      }\n      this.listenStop();\n      this.current.id = id;\n      this.current.data = data;\n      this.ref.child(\"data/\" + id).on(\"value\", this.onValueChange, this);\n    }\n    listenStop() {\n      if (!this.current.id) {\n        return;\n      }\n      this.ref.child(\"data/\" + this.current.id).off(\"value\");\n      this.current.id = null;\n      this.current.name = null;\n      this.current.data = null;\n    }\n    onValueChange(snap) {\n      this.current.data = snap.val();\n      clearTimeout(this.changeTimeout);\n      this.changeTimeout = setTimeout(() => {\n        publish(\"firebase-change\", this, this.current.data);\n      }, 200);\n    }\n    async login(type) {\n      var provider;\n      switch (type) {\n        case \"github\":\n          provider = new firebase.auth.GithubAuthProvider();\n          break;\n        case \"facebook\":\n          provider = new firebase.auth.FacebookAuthProvider();\n          break;\n        case \"twitter\":\n          provider = new firebase.auth.TwitterAuthProvider();\n          break;\n        case \"google\":\n          provider = new firebase.auth.GoogleAuthProvider();\n          break;\n      }\n      let result = await firebase.auth().signInWithPopup(provider);\n      return result.user;\n    }\n  };\n\n  // .js/ui/backend/firebase.js\n  var FirebaseUI = class extends BackendUI {\n    constructor() {\n      super(new Firebase(), \"Firebase\");\n      this.online = false;\n      const { server, auth: auth2, remove, go } = this;\n      server.value = localStorage.getItem(`${this.prefix}.server`) || \"my-mind\";\n      auth2.value = localStorage.getItem(`${this.prefix}.auth`) || \"\";\n      go.disabled = false;\n      remove.addEventListener(\"click\", async (_) => {\n        var id = this.list.value;\n        if (!id) {\n          return;\n        }\n        setThrobber(true);\n        try {\n          await this.backend.remove(id);\n          setThrobber(false);\n        } catch (e) {\n          this.error(e);\n        }\n      });\n      subscribe(\"firebase-list\", this);\n      subscribe(\"firebase-change\", this);\n    }\n    get auth() {\n      return this.node.querySelector(\".auth\");\n    }\n    get server() {\n      return this.node.querySelector(\".server\");\n    }\n    get remove() {\n      return this.node.querySelector(\".remove\");\n    }\n    get list() {\n      return this.node.querySelector(\".list\");\n    }\n    async setState(data) {\n      try {\n        await this.connect(data.s, data.a);\n        this.load(data.id);\n      } catch (e) {\n        this.error(e);\n      }\n    }\n    getState() {\n      var data = {\n        id: currentMap.id,\n        b: this.id,\n        s: this.server.value\n      };\n      if (this.auth.value) {\n        data.a = this.auth.value;\n      }\n      return data;\n    }\n    show(mode2) {\n      super.show(mode2);\n      this.sync();\n    }\n    handleMessage(message, _publisher, data) {\n      switch (message) {\n        case \"firebase-list\":\n          this.list.innerHTML = \"\";\n          if (Object.keys(data).length) {\n            buildList(data, this.list);\n          } else {\n            var o = document.createElement(\"option\");\n            o.innerHTML = \"(no maps saved)\";\n            this.list.appendChild(o);\n          }\n          this.sync();\n          break;\n        case \"firebase-change\":\n          if (data) {\n            unsubscribe(\"item-change\", this);\n            currentMap.mergeWith(data);\n            subscribe(\"item-change\", this);\n          } else {\n            console.log(\"remote data disappeared\");\n          }\n          break;\n        case \"item-change\":\n          clearTimeout(this.itemChangeTimeout);\n          this.itemChangeTimeout = setTimeout(() => this.onItemChange(), 200);\n          break;\n      }\n    }\n    reset() {\n      this.backend.reset();\n      unsubscribe(\"item-change\", this);\n    }\n    onItemChange() {\n      var map = currentMap;\n      this.backend.mergeWith(map.toJSON(), map.name);\n    }\n    submit() {\n      if (!this.online) {\n        this.connect(this.server.value, this.auth.value);\n        return;\n      }\n      super.submit();\n    }\n    async save() {\n      setThrobber(true);\n      var map = currentMap;\n      try {\n        await this.backend.save(map.toJSON(), map.id, map.name);\n        this.saveDone();\n        subscribe(\"item-change\", this);\n      } catch (e) {\n        this.error(e);\n      }\n    }\n    async load(id = this.list.value) {\n      setThrobber(true);\n      try {\n        let data = await this.backend.load(id);\n        this.loadDone(data);\n        subscribe(\"item-change\", this);\n      } catch (e) {\n        this.error(e);\n      }\n    }\n    async connect(server, auth2) {\n      this.server.value = server;\n      this.auth.value = auth2 || \"\";\n      this.server.disabled = true;\n      this.auth.disabled = true;\n      localStorage.setItem(`${this.prefix}.server`, server);\n      localStorage.setItem(`${this.prefix}.auth`, auth2 || \"\");\n      this.go.disabled = true;\n      setThrobber(true);\n      await this.backend.connect(server, auth2);\n      setThrobber(false);\n      this.online = true;\n      this.sync();\n    }\n    sync() {\n      if (!this.online) {\n        this.go.textContent = \"Connect\";\n        return;\n      }\n      this.go.disabled = false;\n      if (this.mode == \"load\" && !this.list.value) {\n        this.go.disabled = true;\n      }\n      this.go.textContent = this.mode.charAt(0).toUpperCase() + this.mode.substring(1);\n    }\n  };\n\n  // .js/ui/io.js\n  var currentMode = \"load\";\n  var currentBackend = null;\n  var node8 = document.querySelector(\"#io\");\n  var select6 = node8.querySelector(\"#backend\");\n  var PREFIX = \"mm.app\";\n  function isActive() {\n    return node8.contains(document.activeElement);\n  }\n  function init11() {\n    [LocalUI, FirebaseUI, GDriveUI, FileUI, WebDAVUI, ImageUI].forEach((ctor) => {\n      let bui = new ctor();\n      select6.append(bui.option);\n    });\n    select6.value = localStorage.getItem(`${PREFIX}.backend`) || \"file\";\n    select6.addEventListener(\"change\", syncBackend);\n    subscribe(\"map-new\", (_) => setCurrentBackend(null));\n    subscribe(\"save-done\", onDone);\n    subscribe(\"load-done\", onDone);\n  }\n  function onDone(_message, publisher) {\n    hide2();\n    setCurrentBackend(publisher);\n  }\n  function restore() {\n    let parts = {};\n    location.search.substring(1).split(\"&\").forEach((item) => {\n      let keyvalue = item.split(\"=\").map(decodeURIComponent);\n      parts[keyvalue[0]] = keyvalue[1];\n    });\n    if (\"map\" in parts) {\n      parts.url = parts.map;\n    }\n    if (\"url\" in parts && !(\"b\" in parts)) {\n      parts.b = \"webdav\";\n    }\n    let backend = repo4.get(parts.b);\n    if (backend) {\n      backend.setState(parts);\n      return;\n    }\n    if (parts.state) {\n      try {\n        var state = JSON.parse(parts.state);\n        if (state.action == \"open\") {\n          state = {\n            b: \"gdrive\",\n            id: state.ids[0]\n          };\n          repo4.get(\"gdrive\").setState(state);\n        } else {\n          history.replaceState(null, \"\", \".\");\n        }\n      } catch (e) {\n      }\n      return;\n    }\n    setThrobber(false);\n  }\n  function show(mode2) {\n    currentMode = mode2;\n    node8.hidden = false;\n    node8.querySelector(\"h3\").textContent = mode2;\n    syncBackend();\n  }\n  function hide2() {\n    node8.hidden = true;\n  }\n  function quickSave() {\n    if (currentBackend) {\n      currentBackend.save();\n    } else {\n      show(\"save\");\n    }\n  }\n  function syncBackend() {\n    [...node8.querySelectorAll(\"div[id]\")].forEach((node11) => node11.hidden = true);\n    node8.querySelector(`#${select6.value}`).hidden = false;\n    repo4.get(select6.value).show(currentMode);\n  }\n  function setCurrentBackend(backend) {\n    if (currentBackend && currentBackend != backend) {\n      currentBackend.reset();\n    }\n    if (backend) {\n      localStorage.setItem(`${PREFIX}.backend`, backend.id);\n    }\n    currentBackend = backend;\n    try {\n      updateURL();\n    } catch (e) {\n    }\n  }\n  function updateURL() {\n    let data = currentBackend && currentBackend.getState();\n    if (!data) {\n      history.replaceState(null, \"\", \".\");\n    } else {\n      let arr = Object.entries(data).map((pair) => pair.map(encodeURIComponent).join(\"=\"));\n      history.replaceState(null, \"\", \"?\" + arr.join(\"&\"));\n    }\n  }\n\n  // .js/ui/context-menu.js\n  var node9 = document.querySelector(\"#context-menu\");\n  var port;\n  function init12(port_) {\n    port = port_;\n    [...node9.querySelectorAll(\"[data-command]\")].forEach((button) => {\n      let commandName = button.dataset.command;\n      button.textContent = repo.get(commandName).label;\n    });\n    port.addEventListener(\"mousedown\", handleEvent);\n    node9.addEventListener(\"mousedown\", handleEvent);\n    close3();\n  }\n  function open(point) {\n    node9.hidden = false;\n    let w = node9.offsetWidth;\n    let h = node9.offsetHeight;\n    let left = point[0];\n    let top = point[1];\n    if (left > port.offsetWidth / 2) {\n      left -= w;\n    }\n    if (top > port.offsetHeight / 2) {\n      top -= h;\n    }\n    node9.style.left = `${left}px`;\n    node9.style.top = `${top}px`;\n  }\n  function handleEvent(e) {\n    if (e.currentTarget != node9) {\n      close3();\n      return;\n    }\n    e.stopPropagation();\n    e.preventDefault();\n    let commandName = e.target.dataset.command;\n    if (!commandName) {\n      return;\n    }\n    let command = repo.get(commandName);\n    if (!command.isValid) {\n      return;\n    }\n    command.execute();\n    close3();\n  }\n  function close3() {\n    node9.hidden = true;\n  }\n\n  // .js/ui/ui.js\n  var node10 = document.querySelector(\"#ui\");\n  function isActive2() {\n    return node10.contains(document.activeElement) || isActive();\n  }\n  function toggle3() {\n    node10.hidden = !node10.hidden;\n    publish(\"ui-change\");\n  }\n  function getWidth() {\n    return node10.hidden ? 0 : node10.offsetWidth;\n  }\n  function update6() {\n    [layout_exports, shape_exports, icon_exports, value_exports, status_exports].forEach((ui5) => ui5.update());\n  }\n  function onClick3(e) {\n    let target = e.target;\n    if (target == node10.querySelector(\"#toggle\")) {\n      toggle3();\n      return;\n    }\n    let current2 = target;\n    while (true) {\n      let command = current2.dataset.command;\n      if (command) {\n        repo.get(command).execute();\n        return;\n      }\n      if (current2.parentNode instanceof Element) {\n        current2 = current2.parentNode;\n      } else {\n        return;\n      }\n    }\n  }\n  function init13(port4) {\n    [\n      layout_exports,\n      shape_exports,\n      icon_exports,\n      value_exports,\n      status_exports,\n      color_exports,\n      text_color_exports,\n      help_exports,\n      tip_exports,\n      notes_exports,\n      io_exports\n    ].forEach((ui5) => ui5.init());\n    init12(port4);\n    subscribe(\"item-select\", update6);\n    subscribe(\"item-change\", (_message, publisher) => {\n      if (publisher == currentItem) {\n        update6();\n      }\n    });\n    node10.addEventListener(\"click\", onClick3);\n    restore();\n  }\n\n  // .js/command/command.js\n  var PAN_AMOUNT = 15;\n  function isMac() {\n    return !!navigator.platform.match(/mac/i);\n  }\n  var repo = new Map();\n  var Command = class {\n    constructor(id, label) {\n      this.label = label;\n      this.editMode = false;\n      repo.set(id, this);\n    }\n    get isValid() {\n      return this.editMode === null || this.editMode == editing;\n    }\n  };\n  new class Notes extends Command {\n    constructor() {\n      super(\"notes\", \"Notes\");\n      this.keys = [{ code: \"KeyM\", ctrlKey: true }];\n    }\n    execute() {\n      toggle2();\n    }\n  }();\n  new class Undo extends Command {\n    constructor() {\n      super(\"undo\", \"Undo\");\n      this.keys = [{ code: \"KeyZ\", ctrlKey: true }];\n    }\n    get isValid() {\n      return super.isValid && canBack();\n    }\n    execute() {\n      back();\n    }\n  }();\n  new class Redo extends Command {\n    constructor() {\n      super(\"redo\", \"Redo\");\n      this.keys = [{ code: \"KeyY\", ctrlKey: true }];\n    }\n    get isValid() {\n      return super.isValid && canForward();\n    }\n    execute() {\n      forward();\n    }\n  }();\n  new class InsertSibling extends Command {\n    constructor() {\n      super(\"insert-sibling\", \"Insert a sibling\");\n      this.keys = [{ code: \"Enter\" }];\n    }\n    execute() {\n      let item = currentItem;\n      let action2;\n      if (item.isRoot) {\n        action2 = new InsertNewItem(item, item.children.length);\n      } else {\n        let parent = item.parent;\n        let index2 = parent.children.indexOf(item);\n        action2 = new InsertNewItem(parent, index2 + 1);\n      }\n      action(action2);\n      repo.get(\"edit\").execute();\n      publish(\"command-sibling\");\n    }\n  }();\n  new class InsertChild extends Command {\n    constructor() {\n      super(\"insert-child\", \"Insert a child\");\n      this.keys = [\n        { code: \"Tab\", ctrlKey: false },\n        { code: \"Insert\" }\n      ];\n    }\n    execute() {\n      let item = currentItem;\n      let action2 = new InsertNewItem(item, item.children.length);\n      action(action2);\n      repo.get(\"edit\").execute();\n      publish(\"command-child\");\n    }\n  }();\n  new class Delete extends Command {\n    constructor() {\n      super(\"delete\", \"Delete an item\");\n      this.keys = [{ code: isMac() ? \"Backspace\" : \"Delete\" }];\n    }\n    get isValid() {\n      return super.isValid && !currentItem.isRoot;\n    }\n    execute() {\n      let action2 = new RemoveItem(currentItem);\n      action(action2);\n    }\n  }();\n  new class Swap2 extends Command {\n    constructor() {\n      super(\"swap\", \"Swap sibling\");\n      this.keys = [\n        { code: \"ArrowUp\", ctrlKey: true },\n        { code: \"ArrowDown\", ctrlKey: true }\n      ];\n    }\n    execute(e) {\n      let current2 = currentItem;\n      if (current2.isRoot || current2.parent.children.length < 2) {\n        return;\n      }\n      let diff = e.code == \"ArrowUp\" ? -1 : 1;\n      let action2 = new Swap(current2, diff);\n      action(action2);\n    }\n  }();\n  new class SetSide2 extends Command {\n    constructor() {\n      super(\"side\", \"Change side\");\n      this.keys = [\n        { code: \"ArrowLeft\", ctrlKey: true },\n        { code: \"ArrowRight\", ctrlKey: true }\n      ];\n    }\n    execute(e) {\n      let current2 = currentItem;\n      if (current2.isRoot || !current2.parent.isRoot) {\n        return;\n      }\n      let side = e.code == \"ArrowLeft\" ? \"left\" : \"right\";\n      let action2 = new SetSide(currentItem, side);\n      action(action2);\n    }\n  }();\n  new class Save extends Command {\n    constructor() {\n      super(\"save\", \"Save map\");\n      this.keys = [{ code: \"KeyS\", ctrlKey: true, shiftKey: false }];\n    }\n    execute() {\n      quickSave();\n    }\n  }();\n  new class SaveAs extends Command {\n    constructor() {\n      super(\"save-as\", \"Save as\\u2026\");\n      this.keys = [{ code: \"KeyS\", ctrlKey: true, shiftKey: true }];\n    }\n    execute() {\n      show(\"save\");\n    }\n  }();\n  new class Load extends Command {\n    constructor() {\n      super(\"load\", \"Load map\");\n      this.keys = [{ code: \"KeyO\", ctrlKey: true }];\n    }\n    execute() {\n      show(\"load\");\n    }\n  }();\n  new class Center extends Command {\n    constructor() {\n      super(\"center\", \"Center map\");\n      this.keys = [{ code: \"End\" }];\n    }\n    execute() {\n      currentMap.center();\n    }\n  }();\n  new class New extends Command {\n    constructor() {\n      super(\"new\", \"New map\");\n      this.keys = [{ code: \"KeyN\", ctrlKey: true }];\n    }\n    execute() {\n      if (!confirm(\"Throw away your current map and start a new one?\")) {\n        return;\n      }\n      showMap(new Map2());\n      publish(\"map-new\", this);\n    }\n  }();\n  new class ZoomIn extends Command {\n    constructor() {\n      super(\"zoom-in\", \"Zoom in\");\n      this.keys = [{ key: \"+\" }];\n    }\n    execute() {\n      currentMap.adjustFontSize(1);\n    }\n  }();\n  new class ZoomOut extends Command {\n    constructor() {\n      super(\"zoom-out\", \"Zoom out\");\n      this.keys = [{ key: \"-\" }];\n    }\n    execute() {\n      currentMap.adjustFontSize(-1);\n    }\n  }();\n  new class Help extends Command {\n    constructor() {\n      super(\"help\", \"Show/hide help\");\n      this.keys = [{ key: \"?\" }];\n    }\n    execute() {\n      toggle();\n    }\n  }();\n  new class UI extends Command {\n    constructor() {\n      super(\"ui\", \"Show/hide UI\");\n      this.keys = [{ key: \"*\" }];\n    }\n    execute() {\n      toggle3();\n    }\n  }();\n  new class Pan extends Command {\n    constructor() {\n      super(\"pan\", \"Pan the map\");\n      this.keys = [\n        { code: \"KeyW\", ctrlKey: false, altKey: false, metaKey: false },\n        { code: \"KeyA\", ctrlKey: false, altKey: false, metaKey: false },\n        { code: \"KeyS\", ctrlKey: false, altKey: false, metaKey: false },\n        { code: \"KeyD\", ctrlKey: false, altKey: false, metaKey: false }\n      ];\n      this.codes = [];\n    }\n    execute(e) {\n      const { code } = e;\n      var index2 = this.codes.indexOf(code);\n      if (index2 > -1) {\n        return;\n      }\n      if (!this.codes.length) {\n        window.addEventListener(\"keyup\", this);\n        this.interval = setInterval(() => this.step(), 50);\n      }\n      this.codes.push(code);\n      this.step();\n    }\n    step() {\n      const dirs = {\n        \"KeyW\": [0, 1],\n        \"KeyA\": [1, 0],\n        \"KeyS\": [0, -1],\n        \"KeyD\": [-1, 0]\n      };\n      let offset = [0, 0];\n      this.codes.forEach((code) => {\n        offset[0] += dirs[code][0] * PAN_AMOUNT;\n        offset[1] += dirs[code][1] * PAN_AMOUNT;\n      });\n      currentMap.moveBy(offset);\n    }\n    handleEvent(e) {\n      const { code } = e;\n      var index2 = this.codes.indexOf(code);\n      if (index2 > -1) {\n        this.codes.splice(index2, 1);\n        if (!this.codes.length) {\n          window.removeEventListener(\"keyup\", this);\n          clearInterval(this.interval);\n        }\n      }\n    }\n  }();\n  new class Fold extends Command {\n    constructor() {\n      super(\"fold\", \"Fold/Unfold\");\n      this.keys = [{ key: \"f\", ctrlKey: false }];\n    }\n    execute() {\n      let item = currentItem;\n      item.collapsed = !item.collapsed;\n      currentMap.ensureItemVisibility(item);\n    }\n  }();\n\n  // .js/item.js\n  var TOGGLE_SIZE = 6;\n  var UPDATE_OPTIONS = {\n    parent: true,\n    children: false\n  };\n  var Item = class {\n    constructor() {\n      this._id = generateId();\n      this._parent = null;\n      this._collapsed = false;\n      this._icon = \"\";\n      this._notes = \"\";\n      this._color = \"\";\n      this._textColor = \"\";\n      this._value = null;\n      this._status = null;\n      this._side = null;\n      this._shape = null;\n      this._layout = null;\n      this.originalText = \"\";\n      this.dom = {\n        node: group(),\n        connectors: group(),\n        content: node(\"div\"),\n        notes: node(\"div\"),\n        status: node(\"span\"),\n        icon: node(\"span\"),\n        value: node(\"span\"),\n        text: node(\"div\"),\n        toggle: buildToggle()\n      };\n      this.children = [];\n      const { dom } = this;\n      dom.node.classList.add(\"item\");\n      dom.content.classList.add(\"content\");\n      dom.notes.classList.add(\"notes\");\n      dom.status.classList.add(\"status\");\n      dom.icon.classList.add(\"icon\");\n      dom.value.classList.add(\"value\");\n      dom.text.classList.add(\"text\");\n      dom.icon.classList.add(\"icon\");\n      this.notes = \"\";\n      let fo = foreignObject();\n      dom.node.append(dom.connectors, fo);\n      fo.append(dom.content);\n      dom.content.append(dom.status, dom.value, dom.icon, dom.text, dom.notes);\n      dom.toggle.addEventListener(\"click\", (_) => {\n        this.collapsed = !this.collapsed;\n        selectItem(this);\n      });\n      this.updateToggle();\n    }\n    static fromJSON(data) {\n      return new this().fromJSON(data);\n    }\n    get id() {\n      return this._id;\n    }\n    get parent() {\n      return this._parent;\n    }\n    set parent(parent) {\n      this._parent = parent;\n      this.update({ children: true });\n    }\n    get size() {\n      const bbox = this.dom.node.getBBox();\n      return [bbox.width, bbox.height];\n    }\n    get position() {\n      const { node: node11 } = this.dom;\n      const transform = node11.getAttribute(\"transform\");\n      return transform.match(/\\d+/g).map(Number);\n    }\n    set position(position) {\n      const { node: node11 } = this.dom;\n      const transform = `translate(${position.join(\" \")})`;\n      node11.setAttribute(\"transform\", transform);\n    }\n    get contentSize() {\n      const { content } = this.dom;\n      const fo = content.parentNode;\n      return [fo.getAttribute(\"width\"), fo.getAttribute(\"height\")].map(Number);\n    }\n    get contentPosition() {\n      const { content } = this.dom;\n      const fo = content.parentNode;\n      return [fo.getAttribute(\"x\"), fo.getAttribute(\"y\")].map(Number);\n    }\n    set contentPosition(position) {\n      const { content } = this.dom;\n      const fo = content.parentNode;\n      fo.setAttribute(\"x\", String(position[0]));\n      fo.setAttribute(\"y\", String(position[1]));\n    }\n    toJSON() {\n      let data = {\n        id: this.id,\n        text: this.text,\n        notes: this.notes\n      };\n      if (this._side) {\n        data.side = this._side;\n      }\n      if (this._color) {\n        data.color = this._color;\n      }\n      if (this._textColor) {\n        data.textColor = this._textColor;\n      }\n      if (this._icon) {\n        data.icon = this._icon;\n      }\n      if (this._value !== null) {\n        data.value = this._value;\n      }\n      if (this._status !== null) {\n        data.status = this._status;\n      }\n      if (this._layout) {\n        data.layout = this._layout.id;\n      }\n      if (this._shape) {\n        data.shape = this._shape.id;\n      }\n      if (this._collapsed) {\n        data.collapsed = true;\n      }\n      if (this.children.length) {\n        data.children = this.children.map((child) => child.toJSON());\n      }\n      return data;\n    }\n    fromJSON(data) {\n      this.text = data.text;\n      if (data.id) {\n        this._id = data.id;\n      }\n      if (data.notes) {\n        this.notes = data.notes;\n      }\n      if (data.side) {\n        this._side = data.side;\n      }\n      if (data.color) {\n        this._color = data.color;\n      }\n      if (data.textColor) {\n        this._textColor = data.textColor;\n      }\n      if (data.icon) {\n        this._icon = data.icon;\n      }\n      if (data.value !== void 0) {\n        this._value = data.value;\n      }\n      if (data.status !== void 0) {\n        if (data.status == \"yes\") {\n          this._status = true;\n        } else if (data.status == \"no\") {\n          this._status = false;\n        } else {\n          this._status = data.status;\n        }\n      }\n      if (data.collapsed) {\n        this.collapsed = !!data.collapsed;\n      }\n      if (data.layout) {\n        this._layout = repo2.get(data.layout);\n      }\n      if (data.shape) {\n        this.shape = repo3.get(data.shape);\n      }\n      (data.children || []).forEach((child) => {\n        this.insertChild(Item.fromJSON(child));\n      });\n      return this;\n    }\n    mergeWith(data) {\n      var dirty = 0;\n      if (this.text != data.text && !this.dom.text.contentEditable) {\n        this.text = data.text;\n      }\n      if (this._side != data.side) {\n        this._side = data.side || null;\n        dirty = 1;\n      }\n      if (this._color != data.color) {\n        this._color = data.color || \"\";\n        dirty = 2;\n      }\n      if (this._textColor != data.textColor) {\n        this._textColor = data.textColor || \"\";\n        dirty = 2;\n      }\n      if (this._icon != data.icon) {\n        this._icon = data.icon || \"\";\n        dirty = 1;\n      }\n      if (this._value != data.value) {\n        this._value = data.value || null;\n        dirty = 1;\n      }\n      if (this._status != data.status) {\n        this._status = data.status;\n        dirty = 1;\n      }\n      if (this._collapsed != !!data.collapsed) {\n        this.collapsed = !!data.collapsed;\n      }\n      let ourShapeId = this._shape ? this._shape.id : null;\n      if (ourShapeId != data.shape) {\n        this._shape = data.shape ? repo3.get(data.shape) : null;\n        dirty = 1;\n      }\n      let ourLayoutId = this._layout ? this._layout.id : null;\n      if (ourLayoutId != data.layout) {\n        this._layout = data.layout ? repo2.get(data.layout) : null;\n        dirty = 2;\n      }\n      (data.children || []).forEach((child, index2) => {\n        if (index2 >= this.children.length) {\n          this.insertChild(Item.fromJSON(child));\n        } else {\n          var myChild = this.children[index2];\n          if (myChild.id == child.id) {\n            myChild.mergeWith(child);\n          } else {\n            this.removeChild(this.children[index2]);\n            this.insertChild(Item.fromJSON(child), index2);\n          }\n        }\n      });\n      let newLength = (data.children || []).length;\n      while (this.children.length > newLength) {\n        this.removeChild(this.children[this.children.length - 1]);\n      }\n      if (dirty == 1) {\n        this.update({ children: false });\n      }\n      if (dirty == 2) {\n        this.update({ children: true });\n      }\n    }\n    clone() {\n      var data = this.toJSON();\n      var removeId = function(obj) {\n        delete obj.id;\n        obj.children && obj.children.forEach(removeId);\n      };\n      removeId(data);\n      return Item.fromJSON(data);\n    }\n    select() {\n      this.dom.node.classList.add(\"current\");\n      publish(\"item-select\", this);\n    }\n    deselect() {\n      this.dom.node.classList.remove(\"current\");\n    }\n    update(options = {}) {\n      options = Object.assign({}, UPDATE_OPTIONS, options);\n      const { map, children, parent } = this;\n      if (!map || !map.isVisible) {\n        return;\n      }\n      if (options.children) {\n        let childUpdateOptions = { parent: false, children: true };\n        children.forEach((child) => child.update(childUpdateOptions));\n      }\n      publish(\"item-change\", this);\n      this.updateStatus();\n      this.updateIcon();\n      this.updateValue();\n      const { resolvedLayout, resolvedShape, dom } = this;\n      const { content, node: node11, connectors } = dom;\n      dom.text.style.color = this.resolvedTextColor;\n      node11.dataset.shape = resolvedShape.id;\n      node11.dataset.align = resolvedLayout.computeAlignment(this);\n      let fo = content.parentNode;\n      let size = [\n        Math.max(content.offsetWidth, content.scrollWidth),\n        Math.max(content.offsetHeight, content.scrollHeight)\n      ];\n      fo.setAttribute(\"width\", String(size[0]));\n      fo.setAttribute(\"height\", String(size[1]));\n      connectors.innerHTML = \"\";\n      resolvedLayout.update(this);\n      resolvedShape.update(this);\n      if (options.parent && parent) {\n        parent.update({ children: false });\n      }\n    }\n    get text() {\n      return this.dom.text.innerHTML;\n    }\n    set text(text) {\n      this.dom.text.innerHTML = text;\n      findLinks(this.dom.text);\n      this.update();\n    }\n    get notes() {\n      return this._notes;\n    }\n    set notes(notes3) {\n      this._notes = notes3;\n      this.dom.notes.hidden = !notes3;\n    }\n    get collapsed() {\n      return this._collapsed;\n    }\n    set collapsed(collapsed) {\n      this._collapsed = collapsed;\n      this.updateToggle();\n      let children = !collapsed;\n      this.update({ children });\n    }\n    get value() {\n      return this._value;\n    }\n    set value(value) {\n      this._value = value;\n      this.update();\n    }\n    get resolvedValue() {\n      const value = this._value;\n      if (typeof value == \"number\") {\n        return value;\n      }\n      let childValues = this.children.map((child) => child.resolvedValue);\n      switch (value) {\n        case \"max\":\n          return Math.max(...childValues);\n          break;\n        case \"min\":\n          return Math.min(...childValues);\n          break;\n        case \"sum\":\n          return childValues.reduce((prev, cur) => prev + cur, 0);\n          break;\n        case \"avg\":\n          var sum = childValues.reduce((prev, cur) => prev + cur, 0);\n          return childValues.length ? sum / childValues.length : 0;\n          break;\n        default:\n          return 0;\n          break;\n      }\n    }\n    get status() {\n      return this._status;\n    }\n    set status(status) {\n      this._status = status;\n      this.update();\n    }\n    get resolvedStatus() {\n      let status = this._status;\n      if (status == \"computed\") {\n        return this.children.every((child) => {\n          return child.resolvedStatus !== false;\n        });\n      } else {\n        return status;\n      }\n    }\n    get icon() {\n      return this._icon;\n    }\n    set icon(icon) {\n      this._icon = icon;\n      this.update();\n    }\n    get side() {\n      return this._side;\n    }\n    set side(side) {\n      this._side = side;\n    }\n    get color() {\n      return this._color;\n    }\n    set color(color) {\n      this._color = color;\n      this.update({ children: true });\n    }\n    get resolvedColor() {\n      if (this._color) {\n        return this._color;\n      }\n      const { parent } = this;\n      if (parent instanceof Item) {\n        return parent.resolvedColor;\n      }\n      return COLOR;\n    }\n    get textColor() {\n      return this._textColor;\n    }\n    set textColor(textColor) {\n      this._textColor = textColor;\n      this.update({ children: true });\n    }\n    get resolvedTextColor() {\n      if (this._textColor) {\n        return this._textColor;\n      }\n      const { parent } = this;\n      if (parent instanceof Item) {\n        return parent.resolvedTextColor;\n      }\n      return \"\";\n    }\n    get layout() {\n      return this._layout;\n    }\n    set layout(layout) {\n      this._layout = layout;\n      this.update({ children: true });\n    }\n    get resolvedLayout() {\n      if (this._layout) {\n        return this._layout;\n      }\n      const { parent } = this;\n      if (!(parent instanceof Item)) {\n        throw new Error(\"Non-connected item does not have layout\");\n      }\n      return parent.resolvedLayout;\n    }\n    get shape() {\n      return this._shape;\n    }\n    set shape(shape) {\n      this._shape = shape;\n      this.update();\n    }\n    get resolvedShape() {\n      if (this._shape) {\n        return this._shape;\n      }\n      let depth = 0;\n      let node11 = this;\n      while (!node11.isRoot) {\n        depth++;\n        node11 = node11.parent;\n      }\n      switch (depth) {\n        case 0:\n          return repo3.get(\"ellipse\");\n        case 1:\n          return repo3.get(\"box\");\n        default:\n          return repo3.get(\"underline\");\n      }\n    }\n    get map() {\n      let item = this.parent;\n      while (item) {\n        if (item instanceof Map2) {\n          return item;\n        }\n        item = item.parent;\n      }\n      return null;\n    }\n    get isRoot() {\n      return this.parent instanceof Map2;\n    }\n    insertChild(child, index2) {\n      if (!child) {\n        child = new Item();\n      } else if (child.parent && child.parent instanceof Item) {\n        child.parent.removeChild(child);\n      }\n      if (!this.children.length) {\n        this.dom.node.appendChild(this.dom.toggle);\n      }\n      if (index2 === void 0) {\n        index2 = this.children.length;\n      }\n      var next = null;\n      if (index2 < this.children.length) {\n        next = this.children[index2].dom.node;\n      }\n      this.dom.node.insertBefore(child.dom.node, next);\n      this.children.splice(index2, 0, child);\n      child.parent = this;\n    }\n    removeChild(child) {\n      var index2 = this.children.indexOf(child);\n      this.children.splice(index2, 1);\n      child.dom.node.remove();\n      child.parent = null;\n      !this.children.length && this.dom.toggle.remove();\n      this.update();\n    }\n    startEditing() {\n      this.originalText = this.text;\n      this.dom.text.contentEditable = \"true\";\n      this.dom.text.focus();\n      document.execCommand(\"styleWithCSS\", false, \"false\");\n      this.dom.text.addEventListener(\"input\", this);\n      this.dom.text.addEventListener(\"keydown\", this);\n      this.dom.text.addEventListener(\"blur\", this);\n    }\n    stopEditing() {\n      this.dom.text.removeEventListener(\"input\", this);\n      this.dom.text.removeEventListener(\"keydown\", this);\n      this.dom.text.removeEventListener(\"blur\", this);\n      this.dom.text.blur();\n      this.dom.text.contentEditable = \"false\";\n      let result = this.dom.text.innerHTML;\n      this.dom.text.innerHTML = this.originalText;\n      this.originalText = \"\";\n      this.update();\n      return result;\n    }\n    handleEvent(e) {\n      switch (e.type) {\n        case \"input\":\n          this.update();\n          this.map.ensureItemVisibility(this);\n          break;\n        case \"keydown\":\n          if (e.code == \"Tab\") {\n            e.preventDefault();\n          }\n          break;\n        case \"blur\":\n          repo.get(\"finish\").execute();\n          break;\n      }\n    }\n    updateStatus() {\n      const { resolvedStatus, dom } = this;\n      dom.status.className = \"status\";\n      dom.status.hidden = false;\n      switch (resolvedStatus) {\n        case true:\n          dom.status.classList.add(\"yes\");\n          break;\n        case false:\n          dom.status.classList.add(\"no\");\n          break;\n        default:\n          dom.status.hidden = true;\n          break;\n      }\n    }\n    updateIcon() {\n      var icon = this._icon;\n      this.dom.icon.className = \"icon\";\n      this.dom.icon.hidden = !icon;\n      if (icon) {\n        this.dom.icon.classList.add(\"fa\");\n        this.dom.icon.classList.add(icon);\n      }\n    }\n    updateValue() {\n      const { dom, _value } = this;\n      if (_value === null) {\n        dom.value.hidden = true;\n        return;\n      }\n      dom.value.hidden = false;\n      if (typeof _value == \"number\") {\n        dom.value.textContent = String(_value);\n      } else {\n        let resolved = this.resolvedValue;\n        dom.value.textContent = String(Math.round(resolved) == resolved ? resolved : resolved.toFixed(3));\n      }\n    }\n    updateToggle() {\n      const { node: node11, toggle: toggle4 } = this.dom;\n      node11.classList.toggle(\"collapsed\", this._collapsed);\n      toggle4.querySelector(\"path\").setAttribute(\"d\", this._collapsed ? D_PLUS : D_MINUS);\n    }\n  };\n  function findLinks(node11) {\n    let children = [...node11.childNodes];\n    for (let i = 0; i < children.length; i++) {\n      let child = children[i];\n      if (child instanceof Element) {\n        if (child.nodeName.toLowerCase() == \"a\") {\n          continue;\n        }\n        findLinks(child);\n      }\n      if (child instanceof Text) {\n        let str = child.nodeValue;\n        let result = str.match(RE);\n        if (!result) {\n          continue;\n        }\n        let before = str.substring(0, result.index);\n        let after = str.substring(result.index + result[0].length);\n        var link = document.createElement(\"a\");\n        link.innerHTML = link.href = result[0];\n        if (before) {\n          node11.insertBefore(document.createTextNode(before), child);\n        }\n        node11.insertBefore(link, child);\n        if (after) {\n          child.nodeValue = after;\n          i--;\n        } else {\n          child.remove();\n        }\n      }\n    }\n  }\n  function generateId() {\n    let str = \"\";\n    for (var i = 0; i < 8; i++) {\n      let code = Math.floor(Math.random() * 26);\n      str += String.fromCharCode(\"a\".charCodeAt(0) + code);\n    }\n    return str;\n  }\n  var D_MINUS = `M ${-(TOGGLE_SIZE - 2)} 0 L ${TOGGLE_SIZE - 2} 0`;\n  var D_PLUS = `${D_MINUS} M 0 ${-(TOGGLE_SIZE - 2)} L 0 ${TOGGLE_SIZE - 2}`;\n  function buildToggle() {\n    const circleAttrs = { \"cx\": \"0\", \"cy\": \"0\", \"r\": String(TOGGLE_SIZE) };\n    let g = group();\n    g.classList.add(\"toggle\");\n    g.append(node2(\"circle\", circleAttrs), node2(\"path\"));\n    return g;\n  }\n  var COLOR = \"#999\";\n  var RE = /\\b(([a-z][\\w-]+:\\/\\/\\w)|(([\\w-]+\\.){2,}[a-z][\\w-]+)|([\\w-]+\\.[a-z][\\w-]+\\/))[^\\s]*([^\\s,.;:?!<>\\(\\)\\[\\]'\"])?($|\\b)/i;\n\n  // .js/map.js\n  var css = \"\";\n  var UPDATE_OPTIONS2 = {\n    children: true\n  };\n  var Map2 = class {\n    constructor(options) {\n      this.node = node2(\"svg\");\n      this.style = node(\"style\");\n      this.position = [0, 0];\n      this.fontSize = 15;\n      let resolvedOptions = Object.assign({\n        root: \"My Mind Map\",\n        layout: repo2.get(\"map\")\n      }, options);\n      this.style.textContent = css;\n      this.node.style.fontSize = `${this.fontSize}px`;\n      let root = new Item();\n      root.text = resolvedOptions.root;\n      root.layout = resolvedOptions.layout;\n      this.root = root;\n    }\n    static fromJSON(data) {\n      return new this().fromJSON(data);\n    }\n    toJSON() {\n      let data = {\n        root: this._root.toJSON()\n      };\n      return data;\n    }\n    fromJSON(data) {\n      this.root = Item.fromJSON(data.root);\n      return this;\n    }\n    get root() {\n      return this._root;\n    }\n    set root(root) {\n      const { node: node11, style } = this;\n      this._root = root;\n      node11.innerHTML = \"\";\n      node11.append(root.dom.node, style);\n      root.parent = this;\n    }\n    adjustFontSize(diff) {\n      this.fontSize = Math.max(8, this.fontSize + 2 * diff);\n      this.node.style.fontSize = `${this.fontSize}px`;\n      this.update();\n      this.ensureItemVisibility(currentItem);\n    }\n    mergeWith(data) {\n      let ids = [];\n      var current2 = currentItem;\n      var node11 = current2;\n      while (true) {\n        ids.push(node11.id);\n        if (node11.parent == this) {\n          break;\n        }\n        node11 = node11.parent;\n      }\n      this._root.mergeWith(data.root);\n      if (current2.map) {\n        let node12 = current2;\n        let hidden = false;\n        while (true) {\n          if (node12.parent == this) {\n            break;\n          }\n          node12 = node12.parent;\n          if (node12.collapsed) {\n            hidden = true;\n          }\n        }\n        if (!hidden) {\n          return;\n        }\n      }\n      editing && stopEditing();\n      var idMap = {};\n      var scan = function(item) {\n        idMap[item.id] = item;\n        item.children.forEach(scan);\n      };\n      scan(this._root);\n      while (ids.length) {\n        var id = ids.shift();\n        if (id in idMap) {\n          selectItem(idMap[id]);\n          return;\n        }\n      }\n    }\n    get isVisible() {\n      return !!this.node.parentNode;\n    }\n    update(options) {\n      options = Object.assign({}, UPDATE_OPTIONS2, options);\n      options.children && this._root.update({ parent: false, children: true });\n      const { node: node11 } = this;\n      const { size } = this._root;\n      node11.setAttribute(\"width\", String(size[0]));\n      node11.setAttribute(\"height\", String(size[1]));\n    }\n    show(where) {\n      where.append(this.node);\n      this.update();\n      this.center();\n      selectItem(this._root);\n    }\n    hide() {\n      this.node.remove();\n    }\n    center() {\n      let { size } = this._root;\n      let parent = this.node.parentNode;\n      let position = [\n        (parent.offsetWidth - size[0]) / 2,\n        (parent.offsetHeight - size[1]) / 2\n      ].map(Math.round);\n      this.moveTo(position);\n    }\n    moveBy(diff) {\n      let position = this.position.map((p, i) => p + diff[i]);\n      return this.moveTo(position);\n    }\n    getClosestItem(point) {\n      let all2 = [];\n      function scan(item) {\n        let rect = item.dom.content.getBoundingClientRect();\n        let dx = rect.left + rect.width / 2 - point[0];\n        let dy = rect.top + rect.height / 2 - point[1];\n        let distance = dx * dx + dy * dy;\n        all2.push({ dx, dy, item, distance });\n        if (!item.collapsed) {\n          item.children.forEach(scan);\n        }\n      }\n      scan(this._root);\n      all2.sort((a, b) => a.distance - b.distance);\n      return all2[0];\n    }\n    getItemFor(node11) {\n      let content = node11.closest(\".content\");\n      if (!content) {\n        return;\n      }\n      function scanForContent(item) {\n        if (item.dom.content == content) {\n          return item;\n        }\n        for (let child of item.children) {\n          let found = scanForContent(child);\n          if (found) {\n            return found;\n          }\n        }\n      }\n      return scanForContent(this._root);\n    }\n    ensureItemVisibility(item) {\n      const padding = 10;\n      let itemRect = item.dom.content.getBoundingClientRect();\n      var parentRect = this.node.parentNode.getBoundingClientRect();\n      var delta = [0, 0];\n      var dx = parentRect.left - itemRect.left + padding;\n      if (dx > 0) {\n        delta[0] = dx;\n      }\n      var dx = parentRect.right - itemRect.right - padding;\n      if (dx < 0) {\n        delta[0] = dx;\n      }\n      var dy = parentRect.top - itemRect.top + padding;\n      if (dy > 0) {\n        delta[1] = dy;\n      }\n      var dy = parentRect.bottom - itemRect.bottom - padding;\n      if (dy < 0) {\n        delta[1] = dy;\n      }\n      if (delta[0] || delta[1]) {\n        this.moveBy(delta);\n      }\n    }\n    get name() {\n      let name = this._root.text;\n      return br2nl(name).replace(/\\n/g, \" \").replace(/<.*?>/g, \"\").trim();\n    }\n    get id() {\n      return this._root.id;\n    }\n    pick(item, direction) {\n      let candidates = [];\n      var currentRect = item.dom.content.getBoundingClientRect();\n      this.getPickCandidates(currentRect, this._root, direction, candidates);\n      if (!candidates.length) {\n        return item;\n      }\n      candidates.sort((a, b) => a.dist - b.dist);\n      return candidates[0].item;\n    }\n    getPickCandidates(currentRect, item, direction, candidates) {\n      if (!item.collapsed) {\n        item.children.forEach((child) => {\n          this.getPickCandidates(currentRect, child, direction, candidates);\n        });\n      }\n      var node11 = item.dom.content;\n      var rect = node11.getBoundingClientRect();\n      if (direction == \"left\" || direction == \"right\") {\n        var x1 = currentRect.left + currentRect.width / 2;\n        var x2 = rect.left + rect.width / 2;\n        if (direction == \"left\" && x2 > x1) {\n          return;\n        }\n        if (direction == \"right\" && x2 < x1) {\n          return;\n        }\n        var diff1 = currentRect.top - rect.bottom;\n        var diff2 = rect.top - currentRect.bottom;\n        var dist = Math.abs(x2 - x1);\n      } else {\n        var y1 = currentRect.top + currentRect.height / 2;\n        var y2 = rect.top + rect.height / 2;\n        if (direction == \"top\" && y2 > y1) {\n          return;\n        }\n        if (direction == \"bottom\" && y2 < y1) {\n          return;\n        }\n        var diff1 = currentRect.left - rect.right;\n        var diff2 = rect.left - currentRect.right;\n        var dist = Math.abs(y2 - y1);\n      }\n      var diff = Math.max(diff1, diff2);\n      if (diff > 0) {\n        return;\n      }\n      if (!dist || dist < diff) {\n        return;\n      }\n      candidates.push({ item, dist });\n    }\n    moveTo(point) {\n      this.position = point;\n      this.node.style.left = `${point[0]}px`;\n      this.node.style.top = `${point[1]}px`;\n    }\n  };\n  async function init14() {\n    let response = await fetch(\"map.css\");\n    css = await response.text();\n  }\n\n  // .js/keyboard.js\n  function handleEvent2(e) {\n    if (isActive2()) {\n      return;\n    }\n    let command = [...repo.values()].find((command2) => {\n      if (!command2.isValid) {\n        return false;\n      }\n      return command2.keys.find((key) => keyOK(key, e));\n    });\n    if (command) {\n      e.preventDefault();\n      command.execute(e);\n    }\n  }\n  function init15() {\n    window.addEventListener(\"keydown\", handleEvent2);\n  }\n  function keyOK(key, e) {\n    return Object.entries(key).every(([key2, value]) => e[key2] == value);\n  }\n\n  // .js/mouse.js\n  var TOUCH_DELAY = 500;\n  var SHADOW_OFFSET = 5;\n  var touchContextTimeout;\n  var current = {\n    mode: \"\",\n    cursor: [],\n    item: null,\n    ghost: null,\n    ghostPosition: [],\n    previousDragState: null\n  };\n  var port2;\n  function init16(port_) {\n    port2 = port_;\n    port2.addEventListener(\"touchstart\", onDragStart);\n    port2.addEventListener(\"mousedown\", onDragStart);\n    port2.addEventListener(\"click\", (e) => {\n      let item = currentMap.getItemFor(e.target);\n      if (editing && item == currentItem) {\n        return;\n      }\n      item && selectItem(item);\n    });\n    port2.addEventListener(\"dblclick\", (e) => {\n      let item = currentMap.getItemFor(e.target);\n      item && repo.get(\"edit\").execute();\n    });\n    port2.addEventListener(\"wheel\", (e) => {\n      const { deltaY } = e;\n      if (!deltaY) {\n        return;\n      }\n      let dir = deltaY > 0 ? -1 : 1;\n      currentMap.adjustFontSize(dir);\n    });\n    port2.addEventListener(\"contextmenu\", (e) => {\n      onDragEnd(e);\n      e.preventDefault();\n      let item = currentMap.getItemFor(e.target);\n      item && selectItem(item);\n      open([e.clientX, e.clientY]);\n    });\n  }\n  function onDragStart(e) {\n    let point = eventToPoint(e);\n    if (!point) {\n      return;\n    }\n    let item = currentMap.getItemFor(e.target);\n    if (editing) {\n      if (item == currentItem) {\n        return;\n      }\n      repo.get(\"finish\").execute();\n    }\n    document.activeElement.blur();\n    current.cursor = point;\n    if (item && !item.isRoot) {\n      current.mode = \"drag\";\n      current.item = item;\n    } else {\n      current.mode = \"pan\";\n      port2.style.cursor = \"move\";\n    }\n    if (e.type == \"mousedown\") {\n      e.preventDefault();\n      port2.addEventListener(\"mousemove\", onDragMove);\n      port2.addEventListener(\"mouseup\", onDragEnd);\n    }\n    if (e.type == \"touchstart\") {\n      touchContextTimeout = setTimeout(function() {\n        item && selectItem(item);\n        open(point);\n      }, TOUCH_DELAY);\n      port2.addEventListener(\"touchmove\", onDragMove);\n      port2.addEventListener(\"touchend\", onDragEnd);\n    }\n  }\n  function onDragMove(e) {\n    let point = eventToPoint(e);\n    if (!point) {\n      return;\n    }\n    clearTimeout(touchContextTimeout);\n    e.preventDefault();\n    let delta = [\n      point[0] - current.cursor[0],\n      point[1] - current.cursor[1]\n    ];\n    current.cursor = point;\n    switch (current.mode) {\n      case \"drag\":\n        if (!current.ghost) {\n          port2.style.cursor = \"move\";\n          buildGhost(current.item);\n        }\n        moveGhost(delta);\n        let state = computeDragState();\n        visualizeDragState(state);\n        break;\n      case \"pan\":\n        currentMap.moveBy(delta);\n        break;\n    }\n  }\n  function onDragEnd(_e) {\n    clearTimeout(touchContextTimeout);\n    port2.style.cursor = \"\";\n    port2.removeEventListener(\"mousemove\", onDragMove);\n    port2.removeEventListener(\"mouseup\", onDragEnd);\n    const { mode: mode2, ghost } = current;\n    if (mode2 == \"pan\") {\n      return;\n    }\n    if (ghost) {\n      let state = computeDragState();\n      finishDragDrop(state);\n      ghost.remove();\n      current.ghost = null;\n    }\n    current.item = null;\n  }\n  function buildGhost(item) {\n    const { content } = item.dom;\n    let ghost = content.cloneNode(true);\n    ghost.classList.add(\"ghost\");\n    port2.append(ghost);\n    let rect = content.getBoundingClientRect();\n    current.ghost = ghost;\n    current.ghostPosition = [rect.left, rect.top];\n  }\n  function moveGhost(delta) {\n    let { ghostPosition } = current;\n    let ghost = current.ghost;\n    ghostPosition[0] += delta[0];\n    ghostPosition[1] += delta[1];\n    ghost.style.left = `${ghostPosition[0]}px`;\n    ghost.style.top = `${ghostPosition[1]}px`;\n  }\n  function finishDragDrop(state) {\n    visualizeDragState(null);\n    const { target, result, direction } = state;\n    let action2;\n    switch (result) {\n      case \"append\":\n        action2 = new MoveItem(current.item, target);\n        break;\n      case \"sibling\":\n        let targetChildItem = target;\n        let index2 = targetChildItem.parent.children.indexOf(targetChildItem);\n        let targetIndex = index2 + (direction == \"right\" || direction == \"bottom\" ? 1 : 0);\n        action2 = new MoveItem(current.item, targetChildItem.parent, targetIndex, targetChildItem.side);\n        break;\n      default:\n        return;\n        break;\n    }\n    action(action2);\n  }\n  function computeDragState() {\n    let rect = current.ghost.getBoundingClientRect();\n    let point = [rect.left + rect.width / 2, rect.top + rect.height / 2];\n    let closest = currentMap.getClosestItem(point);\n    let target = closest.item;\n    let state = {\n      result: \"\",\n      target,\n      direction: \"left\"\n    };\n    let tmp = target;\n    while (!tmp.isRoot) {\n      if (tmp == current.item) {\n        return state;\n      }\n      tmp = tmp.parent;\n    }\n    let itemContentSize = current.item.contentSize;\n    let targetContentSize = target.contentSize;\n    const w = Math.max(itemContentSize[0], targetContentSize[0]);\n    const h = Math.max(itemContentSize[1], targetContentSize[1]);\n    if (target.isRoot) {\n      state.result = \"append\";\n    } else if (Math.abs(closest.dx) < w && Math.abs(closest.dy) < h) {\n      state.result = \"append\";\n    } else {\n      state.result = \"sibling\";\n      let childDirection = target.parent.resolvedLayout.getChildDirection(target);\n      if (childDirection == \"left\" || childDirection == \"right\") {\n        state.direction = closest.dy < 0 ? \"bottom\" : \"top\";\n      } else {\n        state.direction = closest.dx < 0 ? \"right\" : \"left\";\n      }\n    }\n    return state;\n  }\n  function visualizeDragState(state) {\n    let { previousDragState } = current;\n    if (previousDragState && state && previousDragState.target == state.target && previousDragState.result == state.result) {\n      return;\n    }\n    if (previousDragState) {\n      previousDragState.target.dom.content.style.boxShadow = \"\";\n    }\n    if (!state) {\n      return;\n    }\n    let x = 0, y = 0;\n    if (state.result == \"sibling\") {\n      if (state.direction == \"left\") {\n        x = -1;\n      }\n      if (state.direction == \"right\") {\n        x = 1;\n      }\n      if (state.direction == \"top\") {\n        y = -1;\n      }\n      if (state.direction == \"bottom\") {\n        y = 1;\n      }\n    }\n    let spread = x || y ? -2 : 2;\n    state.target.dom.content.style.boxShadow = `${x * SHADOW_OFFSET}px ${y * SHADOW_OFFSET}px 2px ${spread}px #000`;\n    current.previousDragState = state;\n  }\n  function eventToPoint(e) {\n    if (\"touches\" in e) {\n      if (e.touches.length > 1) {\n        return null;\n      }\n      return [e.touches[0].clientX, e.touches[0].clientY];\n    } else {\n      return [e.clientX, e.clientY];\n    }\n  }\n\n  // .js/clipboard.js\n  var storedItem = null;\n  var mode = \"\";\n  function init17() {\n    document.body.addEventListener(\"cut\", onCopyCut);\n    document.body.addEventListener(\"copy\", onCopyCut);\n    document.body.addEventListener(\"paste\", onPaste);\n  }\n  function onCopyCut(e) {\n    if (isActive2() || editing) {\n      return;\n    }\n    e.preventDefault();\n    endCut();\n    switch (e.type) {\n      case \"copy\":\n        storedItem = currentItem.clone();\n        break;\n      case \"cut\":\n        storedItem = currentItem;\n        storedItem.dom.node.classList.add(\"cut\");\n        break;\n      default:\n        return;\n    }\n    let json = storedItem.toJSON();\n    let plaintext = repo6.get(\"plaintext\").to(json);\n    e.clipboardData.setData(\"text/plain\", plaintext);\n    mode = e.type;\n  }\n  function onPaste(e) {\n    if (isActive2() || editing) {\n      return;\n    }\n    e.preventDefault();\n    let pasted = e.clipboardData.getData(\"text/plain\");\n    if (!pasted) {\n      return;\n    }\n    if (storedItem && pasted == repo6.get(\"plaintext\").to(storedItem.toJSON())) {\n      pasteItem(storedItem, currentItem);\n    } else {\n      pastePlaintext(pasted, currentItem);\n    }\n    endCut();\n  }\n  function pasteItem(sourceItem, targetItem) {\n    let action2;\n    switch (mode) {\n      case \"cut\":\n        if (sourceItem == targetItem || sourceItem.parent == targetItem) {\n          return;\n        }\n        let item = targetItem;\n        while (true) {\n          if (item == sourceItem) {\n            return;\n          }\n          if (item.parent instanceof Map2) {\n            break;\n          }\n          item = item.parent;\n        }\n        action2 = new MoveItem(sourceItem, targetItem);\n        action(action2);\n        break;\n      case \"copy\":\n        action2 = new AppendItem(targetItem, sourceItem.clone());\n        action(action2);\n        break;\n    }\n  }\n  function pastePlaintext(plaintext, targetItem) {\n    let json = repo6.get(\"plaintext\").from(plaintext);\n    let map = Map2.fromJSON(json);\n    let root = map.root;\n    if (root.text) {\n      let action2 = new AppendItem(targetItem, root);\n      action(action2);\n    } else {\n      let subactions = root.children.map((item) => new AppendItem(targetItem, item));\n      let action2 = new Multi(subactions);\n      action(action2);\n    }\n  }\n  function endCut() {\n    if (mode != \"cut\") {\n      return;\n    }\n    storedItem.dom.node.classList.remove(\"cut\");\n    storedItem = null;\n    mode = \"\";\n  }\n\n  // .js/title.js\n  function onItemChange(_message, publisher) {\n    if (publisher.isRoot && publisher.map == currentMap) {\n      document.title = currentMap.name + \" :: My Mind\";\n    }\n  }\n  function init18() {\n    subscribe(\"item-change\", onItemChange);\n  }\n\n  // .js/command/select.js\n  new class Select extends Command {\n    constructor() {\n      super(\"select\", \"Move selection\");\n      this.keys = [\n        { code: \"ArrowLeft\", ctrlKey: false },\n        { code: \"ArrowUp\", ctrlKey: false },\n        { code: \"ArrowRight\", ctrlKey: false },\n        { code: \"ArrowDown\", ctrlKey: false }\n      ];\n    }\n    execute(e) {\n      let dirs = {\n        \"ArrowLeft\": \"left\",\n        \"ArrowUp\": \"top\",\n        \"ArrowRight\": \"right\",\n        \"ArrowDown\": \"bottom\"\n      };\n      let dir = dirs[e.code];\n      let layout = currentItem.resolvedLayout;\n      let item = layout.pick(currentItem, dir);\n      selectItem(item);\n    }\n  }();\n  new class SelectRoot extends Command {\n    constructor() {\n      super(\"select-root\", \"Select root\");\n      this.keys = [{ code: \"Home\" }];\n    }\n    execute() {\n      let item = currentItem;\n      while (!item.isRoot) {\n        item = item.parent;\n      }\n      selectItem(item);\n    }\n  }();\n  if (!isMac()) {\n    new class SelectParent extends Command {\n      constructor() {\n        super(\"select-parent\", \"Select parent\");\n        this.keys = [{ code: \"Backspace\" }];\n      }\n      execute() {\n        if (currentItem.isRoot) {\n          return;\n        }\n        selectItem(currentItem.parent);\n      }\n    }();\n  }\n\n  // .js/command/edit.js\n  new class Edit extends Command {\n    constructor() {\n      super(\"edit\", \"Edit item\");\n      this.keys = [\n        { code: \"Space\" },\n        { code: \"F2\" }\n      ];\n    }\n    execute() {\n      startEditing();\n    }\n  }();\n  new class Finish extends Command {\n    constructor() {\n      super(\"finish\", \"Finish editing\");\n      this.keys = [{ code: \"Enter\", altKey: false, ctrlKey: false, shiftKey: false }];\n      this.editMode = true;\n    }\n    execute() {\n      let text = stopEditing();\n      let action2;\n      if (text) {\n        action2 = new SetText(currentItem, text);\n      } else {\n        action2 = new RemoveItem(currentItem);\n      }\n      action(action2);\n    }\n  }();\n  new class Newline extends Command {\n    constructor() {\n      super(\"newline\", \"Line break\");\n      this.keys = [\n        { code: \"Enter\", shiftKey: true },\n        { code: \"Enter\", ctrlKey: true }\n      ];\n      this.editMode = true;\n    }\n    execute() {\n      let range = getSelection().getRangeAt(0);\n      let br = document.createElement(\"br\");\n      range.insertNode(br);\n      range.setStartAfter(br);\n      currentItem.update({ parent: true, children: true });\n    }\n  }();\n  new class Cancel extends Command {\n    constructor() {\n      super(\"cancel\", \"Cancel\");\n      this.keys = [{ code: \"Escape\" }];\n      this.editMode = null;\n    }\n    execute() {\n      if (editing) {\n        stopEditing();\n        var oldText = currentItem.text;\n        if (!oldText) {\n          var action2 = new RemoveItem(currentItem);\n          action(action2);\n        }\n      } else {\n        close2();\n        close();\n        hide2();\n      }\n    }\n  }();\n  var Style = class extends Command {\n    constructor() {\n      super(...arguments);\n      this.editMode = null;\n    }\n    execute() {\n      if (editing) {\n        document.execCommand(this.command, false);\n      } else {\n        repo.get(\"edit\").execute();\n        let selection = getSelection();\n        let range = selection.getRangeAt(0);\n        range.selectNodeContents(currentItem.dom.text);\n        selection.removeAllRanges();\n        selection.addRange(range);\n        this.execute();\n        repo.get(\"finish\").execute();\n      }\n    }\n  };\n  new class Bold extends Style {\n    constructor() {\n      super(\"bold\", \"Bold\");\n      this.keys = [{ code: \"KeyB\", ctrlKey: true }];\n      this.command = \"bold\";\n    }\n  }();\n  new class Underline2 extends Style {\n    constructor() {\n      super(\"underline\", \"Underline\");\n      this.keys = [{ code: \"KeyU\", ctrlKey: true }];\n      this.command = \"underline\";\n    }\n  }();\n  new class Italic extends Style {\n    constructor() {\n      super(\"italic\", \"Italic\");\n      this.keys = [{ code: \"KeyI\", ctrlKey: true }];\n      this.command = \"italic\";\n    }\n  }();\n  new class Strikethrough extends Style {\n    constructor() {\n      super(\"strikethrough\", \"Strike-through\");\n      this.keys = [{ code: \"KeyS\", ctrlKey: true }];\n      this.command = \"strikeThrough\";\n    }\n  }();\n  new class Value extends Command {\n    constructor() {\n      super(\"value\", \"Set value\");\n      this.keys = [{ key: \"v\", ctrlKey: false, metaKey: false }];\n    }\n    execute() {\n      let item = currentItem;\n      let oldValue = item.value;\n      let newValue = prompt(\"Set item value\", String(oldValue));\n      if (newValue == null) {\n        return;\n      }\n      if (!newValue.length) {\n        newValue = null;\n      }\n      let numValue = Number(newValue);\n      let action2 = new SetValue(item, isNaN(numValue) ? newValue : numValue);\n      action(action2);\n    }\n  }();\n  new class Yes extends Command {\n    constructor() {\n      super(\"yes\", \"Yes\");\n      this.keys = [{ key: \"y\", ctrlKey: false }];\n    }\n    execute() {\n      let item = currentItem;\n      let status = item.status === true ? null : true;\n      let action2 = new SetStatus(item, status);\n      action(action2);\n    }\n  }();\n  new class No extends Command {\n    constructor() {\n      super(\"no\", \"No\");\n      this.keys = [{ key: \"n\", ctrlKey: false }];\n    }\n    execute() {\n      let item = currentItem;\n      let status = item.status === false ? null : false;\n      let action2 = new SetStatus(item, status);\n      action(action2);\n    }\n  }();\n  new class Computed extends Command {\n    constructor() {\n      super(\"computed\", \"Computed\");\n      this.keys = [{ key: \"c\", ctrlKey: false, metaKey: false }];\n    }\n    execute() {\n      let item = currentItem;\n      let status = item.status == \"computed\" ? null : \"computed\";\n      let action2 = new SetStatus(item, status);\n      action(action2);\n    }\n  }();\n\n  // .js/my-mind.js\n  var port3 = document.querySelector(\"main\");\n  var throbber = document.querySelector(\"#throbber\");\n  var currentMap;\n  var currentItem;\n  var editing = false;\n  function showMap(map) {\n    currentMap && currentMap.hide();\n    reset();\n    currentMap = map;\n    currentMap.show(port3);\n  }\n  function action(action2) {\n    push(action2);\n    action2.do();\n  }\n  function selectItem(item) {\n    if (currentItem && currentItem != item) {\n      if (editing) {\n        repo.get(\"finish\").execute();\n      }\n      currentItem.deselect();\n    }\n    currentItem = item;\n    currentItem.select();\n    currentMap.ensureItemVisibility(currentItem);\n  }\n  function setThrobber(visible) {\n    throbber.hidden = !visible;\n  }\n  function startEditing() {\n    editing = true;\n    currentItem.startEditing();\n  }\n  function stopEditing() {\n    editing = false;\n    return currentItem.stopEditing();\n  }\n  async function init19() {\n    await init14();\n    subscribe(\"ui-change\", syncPort);\n    window.addEventListener(\"resize\", syncPort);\n    window.addEventListener(\"beforeunload\", (e) => {\n      e.preventDefault();\n      return \"\";\n    });\n    init17();\n    init15();\n    init16(port3);\n    init18();\n    init13(port3);\n    syncPort();\n    showMap(new Map2());\n  }\n  function syncPort() {\n    let portSize = [window.innerWidth - getWidth(), window.innerHeight];\n    port3.style.width = portSize[0] + \"px\";\n    port3.style.height = portSize[1] + \"px\";\n    currentMap && currentMap.ensureItemVisibility(currentItem);\n  }\n  init19();\n})();\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.103515625,
          "content": "{\n  \"devDependencies\": {\n    \"esbuild\": \"^0.13.7\",\n    \"less\": \"^4.1.2\",\n    \"typescript\": \"^4.4.4\"\n  }\n}\n"
        },
        {
          "name": "screenshot.png",
          "type": "blob",
          "size": 89.85546875,
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}