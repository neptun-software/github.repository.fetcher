{
  "metadata": {
    "timestamp": 1736564747532,
    "page": 437,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "torokmark/design_patterns_in_typescript",
      "stars": 5244,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0185546875,
          "content": "\n\n*.js\n*.swp\n*.log\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2017 Márk Török\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.05859375,
          "content": "# Design Patterns in TypeScript #\n\nHere are the implementations of the following design patterns in TypeScript:\n\n### Creational ###\n\n* [Singleton](https://github.com/torokmark/design_patterns_in_typescript/tree/master/singleton)\n* [Abstract Factory](https://github.com/torokmark/design_patterns_in_typescript/tree/master/abstract_factory)\n* [Factory Method](https://github.com/torokmark/design_patterns_in_typescript/tree/master/factory_method)\n* [Builder](https://github.com/torokmark/design_patterns_in_typescript/tree/master/builder)\n* [Prototype](https://github.com/torokmark/design_patterns_in_typescript/tree/master/prototype)\n\n\n### Structural Patterns ###\n\n* [Adapter](https://github.com/torokmark/design_patterns_in_typescript/tree/master/adapter)\n* [Bridge](https://github.com/torokmark/design_patterns_in_typescript/tree/master/bridge)\n* [Composite](https://github.com/torokmark/design_patterns_in_typescript/tree/master/composite)\n* [Decorator](https://github.com/torokmark/design_patterns_in_typescript/tree/master/decorator)\n* [Facade](https://github.com/torokmark/design_patterns_in_typescript/tree/master/facade)\n* [Flyweight](https://github.com/torokmark/design_patterns_in_typescript/tree/master/flyweight)\n* [Proxy](https://github.com/torokmark/design_patterns_in_typescript/tree/master/proxy)\n\n\n### Behavioral Patterns ###\n\n* [Chain of Responsibility](https://github.com/torokmark/design_patterns_in_typescript/tree/master/chain_of_responsibility)\n* [Command](https://github.com/torokmark/design_patterns_in_typescript/tree/master/command)\n* [Interpreter](https://github.com/torokmark/design_patterns_in_typescript/tree/master/interpreter)\n* [Iterator](https://github.com/torokmark/design_patterns_in_typescript/tree/master/iterator)\n* [Mediator](https://github.com/torokmark/design_patterns_in_typescript/tree/master/mediator)\n* [Memento](https://github.com/torokmark/design_patterns_in_typescript/tree/master/memento)\n* [Observer](https://github.com/torokmark/design_patterns_in_typescript/tree/master/observer)\n* [State](https://github.com/torokmark/design_patterns_in_typescript/tree/master/state)\n* [Strategy](https://github.com/torokmark/design_patterns_in_typescript/tree/master/strategy)\n* [Template Method](https://github.com/torokmark/design_patterns_in_typescript/tree/master/template_method)\n* [Visitor](https://github.com/torokmark/design_patterns_in_typescript/tree/master/visitor)\n\n## Compile the project\n\n```\n$ git clone https://github.com/torokmark/design_patterns_in_typescript.git\n$ cd design_patterns_in_typescript\n$ tsc\n```\n\nThere is a `tsconfig.json` file in the root directory which is responsible for the compiler options.\n\nAs it is set the default target is Ecmascript5 now.\n\nAny additional options come here.\n\nBy default the output is a `patterns.js` file.\n\n\nTo compile only one pattern, use the following command.\n\n```\n$ cd design_patterns_in_typescript/visitor\n$ tsc --target ES5 --module system --outFile visitor.js visitor.ts\n```\n\n## Execute the project\n\nAfter the compilation of the project, a `patterns.js` is generated by default.\nExecuting the file is:\n\n```\nnode patterns.js\n```\n"
        },
        {
          "name": "abstract_factory",
          "type": "tree",
          "content": null
        },
        {
          "name": "adapter",
          "type": "tree",
          "content": null
        },
        {
          "name": "bridge",
          "type": "tree",
          "content": null
        },
        {
          "name": "builder",
          "type": "tree",
          "content": null
        },
        {
          "name": "chain_of_responsibility",
          "type": "tree",
          "content": null
        },
        {
          "name": "command",
          "type": "tree",
          "content": null
        },
        {
          "name": "composite",
          "type": "tree",
          "content": null
        },
        {
          "name": "decorator",
          "type": "tree",
          "content": null
        },
        {
          "name": "facade",
          "type": "tree",
          "content": null
        },
        {
          "name": "factory_method",
          "type": "tree",
          "content": null
        },
        {
          "name": "flyweight",
          "type": "tree",
          "content": null
        },
        {
          "name": "interpreter",
          "type": "tree",
          "content": null
        },
        {
          "name": "iterator",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.ts",
          "type": "blob",
          "size": 3.3876953125,
          "content": "/// <reference path=\"singleton/demo.ts\" />\n/// <reference path=\"abstract_factory/demo.ts\" />\n/// <reference path=\"factory_method/demo.ts\" />\n/// <reference path=\"builder/demo.ts\" />\n/// <reference path=\"prototype/demo.ts\" />\n/// <reference path=\"adapter/demo.ts\" />\n/// <reference path=\"bridge/demo.ts\" />\n/// <reference path=\"composite/demo.ts\" />\n/// <reference path=\"decorator/demo.ts\" />\n/// <reference path=\"facade/demo.ts\" />\n/// <reference path=\"flyweight/demo.ts\" />\n/// <reference path=\"proxy/demo.ts\" />\n/// <reference path=\"chain_of_responsibility/demo.ts\" />\n/// <reference path=\"command/demo.ts\" />\n/// <reference path=\"interpreter/demo.ts\" />\n/// <reference path=\"iterator/demo.ts\" />\n/// <reference path=\"mediator/demo.ts\" />\n/// <reference path=\"memento/demo.ts\" />\n/// <reference path=\"observer/demo.ts\" />\n/// <reference path=\"state/demo.ts\" />\n/// <reference path=\"strategy/demo.ts\" />\n/// <reference path=\"template_method/demo.ts\" />\n/// <reference path=\"visitor/demo.ts\" />\n//\n//\n//\ndeclare var require : (moduleId : string) => any;\ndeclare var process : any;\n\nvar readline = require('readline');\n\nnamespace Patterns {\n\n\n\tfunction printMenu() : void {\n\t\tvar menu =\t\"= Creational Patterns == \\n\" +\n\t\t\t\t\t\"  1: Singleton \\n\" +\n\t\t\t\t\t\"  2: Abstract factory \\n\" +\n\t\t\t\t\t\"  3: Factory method \\n\" +\n\t\t\t\t\t\"  4: Builder \\n\" +\n\t\t\t\t\t\"  5: Prototype \\n\\n\" +\n\t\t\t\t\t\"= Structural Patterns == \\n\" +\n\t\t\t\t\t\"  6: Adapter \\n\" +\n\t\t\t\t\t\"  7: Bridge \\n\" +\n\t\t\t\t\t\"  8: Composite \\n\" +\n\t\t\t\t\t\"  9: Decorator \\n\" +\n\t\t\t\t\t\" 10: Facade \\n\" +\n\t\t\t\t\t\" 11: Flyweight \\n\" +\n\t\t\t\t\t\" 12: Proxy \\n\\n\" +\n\t\t\t\t\t\"= Behavioral Patterns == \\n\" +\n\t\t\t\t\t\" 13: Chain of responsibility \\n\" +\n\t\t\t\t\t\" 14: Command \\n\" +\n\t\t\t\t\t\" 15: Interpreter \\n\" +\n\t\t\t\t\t\" 16: Iterator \\n\" +\n\t\t\t\t\t\" 17: Mediator \\n\" +\n\t\t\t\t\t\" 18: Memento \\n\" +\n\t\t\t\t\t\" 19: Observer \\n\" +\n\t\t\t\t\t\" 20: State \\n\" +\n\t\t\t\t\t\" 21: Strategy \\n\" +\n\t\t\t\t\t\" 22: Template method \\n\" +\n\t\t\t\t\t\" 23: Visitor \\n\";\n\n\n\t\tconsole.log(\"\\n\\n\");\n\t\tconsole.log(\"==== Choose one pattern to demonstrate ====\");\n\t\tconsole.log(\"\\n\");\n\t\tconsole.log(menu);\n\t}\n\n\texport function menu() : void {\n\t\tvar rl = readline.createInterface({\n\t\t\t\t\tinput: process.stdin,\n\t\t\t\t\toutput: process.stdout\n\t\t\t});\n\n\t\tprintMenu();\n\t   \trl.question(\"Which pattern would you like to check?   \", function(answer) {\n\t\t\tswitch(+answer) {\n\t\t\t\tcase 1 : show(SingletonPattern); break;\n\t\t\t\tcase 2 : show(AbstractFactoryPattern); break;\n\t\t\t\tcase 3 : show(FactoryMethodPattern); break;\n\t\t\t\tcase 4 : show(BuilderPattern); break;\n\t\t\t\tcase 5 : show(PrototypePattern); break;\n\t\t\t\tcase 6 : show(AdapterPattern); break;\n\t\t\t\tcase 7 : show(BridgePattern); break;\n\t\t\t\tcase 8 : show(CompositePattern); break;\n\t\t\t\tcase 9 : show(DecoratorPattern); break;\n\t\t\t\tcase 10 : show(FacadePattern); break;\n\t\t\t\tcase 11 : show(FlyweightPattern); break;\n\t\t\t\tcase 12 : show(ProxyPattern); break;\n\t\t\t\tcase 13 : show(ChainOfResponsibilityPattern); break;\n\t\t\t\tcase 14 : show(CommandPattern); break;\n\t\t\t\tcase 15 : show(InterpreterPattern); break;\n\t\t\t\tcase 16 : show(IteratorPattern); break;\n\t\t\t\tcase 17 : show(MediatorPattern); break;\n\t\t\t\tcase 18 : show(MementoPattern); break;\n\t\t\t\tcase 19 : show(ObserverPattern); break;\n\t\t\t\tcase 20 : show(StatePattern); break;\n\t\t\t\tcase 21 : show(StrategyPattern); break;\n\t\t\t\tcase 22 : show(TemplateMethodPattern); break;\n\t\t\t\tcase 23 : show(VisitorPattern); break;\n\t\t\t\tdefault : break;\n\t\t\t}\n\t\t\trl.close();\n\t\t});\n\t}\n\n\tfunction show(Pattern : any) : void {\n\t\tPattern.Demo.show();\n\t}\n}\n\nPatterns.menu();\n"
        },
        {
          "name": "mediator",
          "type": "tree",
          "content": null
        },
        {
          "name": "memento",
          "type": "tree",
          "content": null
        },
        {
          "name": "observer",
          "type": "tree",
          "content": null
        },
        {
          "name": "prototype",
          "type": "tree",
          "content": null
        },
        {
          "name": "proxy",
          "type": "tree",
          "content": null
        },
        {
          "name": "singleton",
          "type": "tree",
          "content": null
        },
        {
          "name": "state",
          "type": "tree",
          "content": null
        },
        {
          "name": "strategy",
          "type": "tree",
          "content": null
        },
        {
          "name": "template_method",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 1.3564453125,
          "content": "{\n    \"compilerOptions\": {\n        \"module\": \"system\",\n        \"target\": \"ES5\",\n        \"noImplicitAny\": false,\n        \"sourceMap\": false,\n\t\t\"outFile\": \"patterns.js\"\n    },\n\t\"files\": [\n\t\t\"main.ts\",\n\t\t\"abstract_factory/abstractFactory.ts\",\n\t\t\"abstract_factory/demo.ts\",\n\t\t\"adapter/adapter.ts\",\n\t\t\"adapter/demo.ts\",\n\t\t\"bridge/bridge.ts\",\n\t\t\"bridge/demo.ts\",\n\t\t\"builder/builder.ts\",\n\t\t\"builder/demo.ts\",\n\t\t\"chain_of_responsibility/chainOfResponsibility.ts\",\n\t\t\"chain_of_responsibility/demo.ts\",\n\t\t\"command/command.ts\",\n\t\t\"command/demo.ts\",\n\t\t\"composite/composite.ts\",\n\t\t\"composite/demo.ts\",\n\t\t\"decorator/decorator.ts\",\n\t\t\"decorator/demo.ts\",\n\t\t\"facade/facade.ts\",\n\t\t\"facade/demo.ts\",\n\t\t\"factory_method/factoryMethod.ts\",\n\t\t\"factory_method/demo.ts\",\n\t\t\"flyweight/flyweight.ts\",\n\t\t\"flyweight/demo.ts\",\n\t\t\"interpreter/interpreter.ts\",\n\t\t\"interpreter/demo.ts\",\n\t\t\"mediator/mediator.ts\",\n\t\t\"mediator/demo.ts\",\n\t\t\"iterator/iterator.ts\",\n\t\t\"iterator/demo.ts\",\n\t\t\"memento/memento.ts\",\n\t\t\"memento/demo.ts\",\n\t\t\"observer/observer.ts\",\n\t\t\"observer/demo.ts\",\n\t\t\"prototype/prototype.ts\",\n\t\t\"prototype/demo.ts\",\n\t\t\"proxy/proxy.ts\",\n\t\t\"proxy/demo.ts\",\n\t\t\"singleton/singleton.ts\",\n\t\t\"singleton/demo.ts\",\n\t\t\"state/state.ts\",\n\t\t\"state/demo.ts\",\n\t\t\"strategy/strategy.ts\",\n\t\t\"strategy/demo.ts\",\n\t\t\"template_method/templateMethod.ts\",\n\t\t\"template_method/demo.ts\",\n\t\t\"visitor/visitor.ts\",\n\t\t\"visitor/demo.ts\"\n\t]\n}\n"
        },
        {
          "name": "visitor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}