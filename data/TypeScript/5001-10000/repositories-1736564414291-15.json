{
  "metadata": {
    "timestamp": 1736564414291,
    "page": 15,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sindresorhus/pageres",
      "stars": 9684,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1708984375,
          "content": "root = true\n\n[*]\nindent_style = tab\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.yml]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.04296875,
          "content": "* text=auto eol=lf\n*.psd binary\n*.ai binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0625,
          "content": "node_modules\nyarn.lock\n.nyc_output\ncoverage\ndist\nlocalhost*.png\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": "code-of-conduct.md",
          "type": "blob",
          "size": 5.1015625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nsindresorhus@gmail.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "contributing.md",
          "type": "blob",
          "size": 0.1884765625,
          "content": "# Contributing to Pageres\n\nPlease note that this project is released with a [Contributor Code of Conduct](code-of-conduct.md). By participating in this project you agree to abide by its terms.\n"
        },
        {
          "name": "example.js",
          "type": "blob",
          "size": 0.3642578125,
          "content": "import Pageres from './dist/index.js';\n\nawait new Pageres({delay: 2})\n\t.source('https://github.com/sindresorhus/pageres', ['480x320', '1024x768'], {crop: true})\n\t.source('https://sindresorhus.com', ['1280x1024', '1920x1080'])\n\t.source('data:text/html,<h1>Awesome!</h1>', ['1024x768'])\n\t.destination('screenshots')\n\t.run();\n\nconsole.log('Finished generating screenshots!');\n"
        },
        {
          "name": "license",
          "type": "blob",
          "size": 1.0908203125,
          "content": "MIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.666015625,
          "content": "{\n\t\"name\": \"pageres\",\n\t\"version\": \"8.1.0\",\n\t\"description\": \"Capture website screenshots\",\n\t\"license\": \"MIT\",\n\t\"repository\": \"sindresorhus/pageres\",\n\t\"funding\": \"https://github.com/sponsors/sindresorhus\",\n\t\"author\": {\n\t\t\"name\": \"Sindre Sorhus\",\n\t\t\"email\": \"sindresorhus@gmail.com\",\n\t\t\"url\": \"https://sindresorhus.com\"\n\t},\n\t\"type\": \"module\",\n\t\"exports\": {\n\t\t\"types\": \"./dist/index.d.ts\",\n\t\t\"default\": \"./dist/index.js\"\n\t},\n\t\"sideEffects\": false,\n\t\"engines\": {\n\t\t\"node\": \">=18\"\n\t},\n\t\"scripts\": {\n\t\t\"test\": \"xo && tsc --noEmit && nyc ava\",\n\t\t\"release\": \"np\",\n\t\t\"build\": \"del-cli dist && tsc\",\n\t\t\"prepare\": \"npm run build\"\n\t},\n\t\"files\": [\n\t\t\"dist\"\n\t],\n\t\"keywords\": [\n\t\t\"page\",\n\t\t\"website\",\n\t\t\"site\",\n\t\t\"web\",\n\t\t\"url\",\n\t\t\"resolution\",\n\t\t\"size\",\n\t\t\"screenshot\",\n\t\t\"screenshots\",\n\t\t\"screengrab\",\n\t\t\"screen\",\n\t\t\"snapshot\",\n\t\t\"shot\",\n\t\t\"responsive\",\n\t\t\"gulpfriendly\",\n\t\t\"puppeteer\",\n\t\t\"chrome\",\n\t\t\"image\",\n\t\t\"svg\",\n\t\t\"render\",\n\t\t\"html\",\n\t\t\"headless\",\n\t\t\"capture\",\n\t\t\"pic\",\n\t\t\"picture\",\n\t\t\"png\",\n\t\t\"jpg\",\n\t\t\"jpeg\"\n\t],\n\t\"dependencies\": {\n\t\t\"array-differ\": \"^4.0.0\",\n\t\t\"array-uniq\": \"^3.0.0\",\n\t\t\"capture-website\": \"^4.1.0\",\n\t\t\"date-fns\": \"^3.6.0\",\n\t\t\"filenamify\": \"^6.0.0\",\n\t\t\"filenamify-url\": \"^3.1.0\",\n\t\t\"get-res\": \"^3.0.0\",\n\t\t\"lodash.template\": \"^4.5.0\",\n\t\t\"log-symbols\": \"^6.0.0\",\n\t\t\"make-dir\": \"^5.0.0\",\n\t\t\"p-map\": \"^7.0.2\",\n\t\t\"p-memoize\": \"^7.1.1\",\n\t\t\"plur\": \"^5.1.0\",\n\t\t\"type-fest\": \"^4.23.0\",\n\t\t\"unused-filename\": \"^4.0.1\",\n\t\t\"viewport-list\": \"^5.1.1\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@sindresorhus/tsconfig\": \"^6.0.0\",\n\t\t\"@types/cookie\": \"^0.6.0\",\n\t\t\"@types/get-res\": \"^3.0.3\",\n\t\t\"@types/lodash.template\": \"^4.5.3\",\n\t\t\"@types/node\": \"^20.14.12\",\n\t\t\"@types/png.js\": \"^0.2.3\",\n\t\t\"@types/sinon\": \"^17.0.3\",\n\t\t\"@types/viewport-list\": \"^5.1.3\",\n\t\t\"ava\": \"^6.1.3\",\n\t\t\"cookie\": \"^0.6.0\",\n\t\t\"del-cli\": \"^5.1.0\",\n\t\t\"file-type\": \"^19.3.0\",\n\t\t\"get-port\": \"^7.1.0\",\n\t\t\"image-dimensions\": \"^2.3.0\",\n\t\t\"nyc\": \"^17.0.0\",\n\t\t\"path-exists\": \"^5.0.0\",\n\t\t\"pify\": \"^6.1.0\",\n\t\t\"png.js\": \"^0.2.1\",\n\t\t\"sinon\": \"^18.0.0\",\n\t\t\"ts-node\": \"^10.9.2\",\n\t\t\"typescript\": \"^5.5.4\",\n\t\t\"xo\": \"^0.59.2\"\n\t},\n\t\"ava\": {\n\t\t\"workerThreads\": false,\n\t\t\"extensions\": {\n\t\t\t\"ts\": \"module\"\n\t\t},\n\t\t\"nodeArguments\": [\n\t\t\t\"--loader=ts-node/esm\"\n\t\t]\n\t},\n\t\"xo\": {\n\t\t\"parserOptions\": {\n\t\t\t\"project\": \"./test/tsconfig.json\"\n\t\t},\n\t\t\"rules\": {\n\t\t\t\"no-await-in-loop\": \"off\",\n\t\t\t\"@typescript-eslint/no-unused-vars\": \"off\",\n\t\t\t\"@typescript-eslint/no-unsafe-assignment\": \"off\",\n\t\t\t\"@typescript-eslint/no-unsafe-return\": \"off\",\n\t\t\t\"@typescript-eslint/no-unsafe-call\": \"off\",\n\t\t\t\"unicorn/prefer-event-target\": \"off\",\n\t\t\t\"n/file-extension-in-import\": \"off\",\n\t\t\t\"@typescript-eslint/no-unsafe-argument\": \"off\"\n\t\t}\n\t},\n\t\"nyc\": {\n\t\t\"reporter\": [\n\t\t\t\"text\",\n\t\t\t\"lcov\"\n\t\t],\n\t\t\"extension\": [\n\t\t\t\".ts\"\n\t\t]\n\t}\n}\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 6.2890625,
          "content": "# ![pageres](media/promo.png)\n\n[![Coverage Status](https://codecov.io/gh/sindresorhus/pageres/branch/main/graph/badge.svg)](https://codecov.io/gh/sindresorhus/pageres)\n[![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo)\n\nCapture screenshots of websites in various resolutions. A good way to make sure your websites are responsive. It's speedy and generates 100 screenshots from 10 different websites in just over a minute. It can also be used to render SVG images.\n\n*See [pageres-cli](https://github.com/sindresorhus/pageres-cli) for the command-line tool.*\n\n## Install\n\n```sh\nnpm install pageres\n```\n\nNote to Linux users: If you get a \"No usable sandbox!\" error, you need to enable [system sandboxing](https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md#setting-up-chrome-linux-sandbox).\n\n## Usage\n\n```js\nimport Pageres from 'pageres';\n\nawait new Pageres({delay: 2})\n\t.source('https://github.com/sindresorhus/pageres', ['480x320', '1024x768'], {crop: true})\n\t.source('https://sindresorhus.com', ['1280x1024', '1920x1080'])\n\t.source('data:text/html,<h1>Awesome!</h1>', ['1024x768'])\n\t.destination('screenshots')\n\t.run();\n\nconsole.log('Finished generating screenshots!');\n```\n\n## API\n\n### Pageres(options?)\n\n#### options\n\nType: `object`\n\n##### delay\n\nType: `number` *(Seconds)*\\\nDefault: `0`\n\nDelay capturing the screenshot.\n\nUseful when the site does things after load that you want to capture.\n\n##### timeout\n\nType: `number` *(Seconds)*\\\nDefault: `60`\n\nNumber of seconds after which the request is aborted.\n\n##### crop\n\nType: `boolean`\\\nDefault: `false`\n\nCrop to the set height.\n\n##### css\n\nType: `string`\n\nApply custom CSS to the webpage. Specify some CSS or the path to a CSS file.\n\n##### script\n\nType: `string`\n\nApply custom JavaScript to the webpage. Specify some JavaScript or the path to a file.\n\n##### cookies\n\nType: `Array<string | object>`\n\nA string with the same format as a [browser cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies) or [an object](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagesetcookiecookies).\n\nTip: Go to the website you want a cookie for and [copy-paste it from DevTools](https://stackoverflow.com/a/24961735/64949).\n\n##### filename\n\nType: `string`\\\nDefault: `'<%= url %>-<%= size %><%= crop %>'`\n\nDefine a customized filename using [Lo-Dash templates](https://lodash.com/docs#template).\\\nFor example: `<%= date %> - <%= url %>-<%= size %><%= crop %>`.\n\nAvailable variables:\n\n- `url`: The URL in [slugified](https://github.com/sindresorhus/filenamify-url) form, eg. `http://yeoman.io/blog/` becomes `yeoman.io!blog`\n- `size`: Specified size, eg. `1024x1000`\n- `width`: Width of the specified size, eg. `1024`\n- `height`: Height of the specified size, eg. `1000`\n- `crop`: Outputs `-cropped` when the crop option is true\n- `date`: The current date (YYYY-MM-DD), eg. 2015-05-18\n- `time`: The current time (HH-mm-ss), eg. 21-15-11\n\n##### incrementalName\n\nType: `boolean`\\\nDefault: `false`\n\nWhen a file exists, append an incremental number.\n\n##### selector\n\nType: `string`\n\nCapture a specific DOM element matching a CSS selector.\n\n##### hide\n\nType: `string[]`\n\nHide an array of DOM elements matching CSS selectors.\n\n##### username\n\nType: `string`\n\nUsername for authenticating with HTTP auth.\n\n##### password\n\nType: `string`\n\nPassword for authenticating with HTTP auth.\n\n##### scale\n\nType: `number`\\\nDefault: `1`\n\nScale webpage `n` times.\n\n##### format\n\nType: `string`\\\nDefault: `png`\\\nValues: `'png' | 'jpg'`\n\nImage format.\n\n##### userAgent\n\nType: `string`\n\nCustom user agent.\n\n##### headers\n\nType: `object`\n\nCustom HTTP request headers.\n\n##### transparent\n\nType: `boolean`\\\nDefault: `false`\n\nSet background color to `transparent` instead of `white` if no background is set.\n\n##### darkMode\n\nType: `boolean`\\\nDefault: `false`\n\nEmulate preference of dark color scheme.\n\n##### launchOptions\n\nType: `object`\\\nDefault: `{}`\n\nOptions passed to [`puppeteer.launch()`](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#puppeteerlaunchoptions).\n\n##### beforeScreenshot\n\nType: `Function`\n\nThe specified function is called right before the screenshot is captured, as well as before any bounding rectangle is calculated as part of `options.element`. It receives the Puppeteer [`Page` instance](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#class-page) as the first argument and the [`browser` instance](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#class-browser) as the second argument. This gives you a lot of power to do custom stuff. The function can be async.\n\nNote: Make sure to not call `page.close()` or `browser.close()`.\n\n```js\nimport Pageres from 'pageres';\n\nawait new Pageres({\n\tdelay: 2,\n\tbeforeScreenshot: async (page, browser) => {\n\t\tawait checkSomething();\n\t\tawait page.click('#activate-button');\n\t\tawait page.waitForSelector('.finished');\n\t}\n})\n\t.source('https://github.com/sindresorhus/pageres', ['480x320', '1024x768', 'iphone 5s'], {crop: true})\n\t.destination('screenshots')\n\t.run();\n\nconsole.log('Finished generating screenshots!');\n```\n\n### pageres.source(url, sizes, options?)\n\nAdd a page to screenshot.\n\n#### url\n\n*Required*\\\nType: `string`\n\nURL or local path to the website you want to screenshot. You can also use a data URI.\n\n#### sizes\n\n*Required*\\\nType: `string[]`\n\nUse a `<width>x<height>` notation or a keyword.\n\nA keyword is a version of a device from [this list](https://github.com/kevva/viewport-list/blob/master/data.json).\n\nYou can also pass in the `w3counter` keyword to use the ten most popular resolutions from [w3counter](http://www.w3counter.com/globalstats.php).\n\n#### options\n\nType: `object`\n\nOptions set here will take precedence over the ones set in the constructor.\n\n### pageres.destination(directory)\n\nSet the destination directory.\n\n#### directory\n\nType: `string`\n\n### pageres.run()\n\nRun pageres.\n\nReturns `Promise<Uint8Array[]>`.\n\n## Task runners\n\nCheck out [grunt-pageres](https://github.com/sindresorhus/grunt-pageres) if you're using Grunt.\n\nFor Gulp and Broccoli, just use the API directly. No need for a wrapper plugin.\n\n## Built with Pageres\n\n- [Break Shot](https://github.com/victorferraz/break-shot) - Desktop app for capturing screenshots of responsive websites.\n\n## Related\n\n- [capture-website](https://github.com/sindresorhus/capture-website) - A different take on screenshotting websites\n"
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.2275390625,
          "content": "{\n\t\"extends\": \"@sindresorhus/tsconfig\",\n\t\"compilerOptions\": {\n\t\t\"outDir\": \"dist\",\n\t\t\"isolatedModules\": true\n\t},\n\t\"include\": [\n\t\t\"source\"\n\t],\n\t\"ts-node\": {\n\t\t\"transpileOnly\": true,\n\t\t\"files\": true,\n\t\t\"experimentalResolver\": true\n\t}\n}\n"
        }
      ]
    }
  ]
}