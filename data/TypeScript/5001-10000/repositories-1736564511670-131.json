{
  "metadata": {
    "timestamp": 1736564511670,
    "page": 131,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "leptonai/search_with_lepton",
      "stars": 7934,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.328125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n\n# Web related\n\n# dependencies\nnode_modules/\n/.pnp\n.pnp.js\n.yarn/install-state.gz\n\n# testing\n/coverage\n\n# next.js\n.next/\n/out/\n\n# production\n/build\n/ui\n\n# misc\n.DS_Store\n.idea\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# local env files\n.env*.local\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.79296875,
          "content": "<div align=\"center\">\n<h1 align=\"center\">Search with Lepton</h1>\nBuild your own conversational search engine using less than 500 lines of code.\n<br/>\n<a href=\"https://search.lepton.run/\" target=\"_blank\"> Live Demo </a>\n<br/>\n<img width=\"70%\" src=\"https://github.com/leptonai/search_with_lepton/assets/1506722/845d7057-02cd-404e-bbc7-60f4bae89680\">\n</div>\n\n\n## Features\n- Built-in support for LLM\n- Built-in support for search engine\n- Customizable pretty UI interface\n- Shareable, cached search results\n\n## Setup Search Engine API\nThere are two default supported search engines: Bing and Google.\n \n### Bing Search\nTo use the Bing Web Search API, please visit [this link](https://www.microsoft.com/en-us/bing/apis/bing-web-search-api) to obtain your Bing subscription key.\n\n### Google Search\nYou have three options for Google Search: you can use the [SearchApi Google Search API](https://www.searchapi.io/) from SearchApi, [Serper Google Search API](https://www.serper.dev) from Serper, or opt for the [Programmable Search Engine](https://developers.google.com/custom-search) provided by Google.\n\n## Setup LLM and KV\n\n> [!NOTE]\n> We recommend using the built-in llm and kv functions with Lepton. \n> Running the following commands to set up them automatically.\n\n```shell\npip install -U leptonai openai && lep login\n```\n\n## Obtain Your Lepton AI Workspace Token\nYou can copy your workspace toke from the Lepton AI Dashboard &rarr; Settings &rarr; Tokens.\n\n\n## Build\n\n1. Set Bing subscription key\n```shell\nexport BING_SEARCH_V7_SUBSCRIPTION_KEY=YOUR_BING_SUBSCRIPTION_KEY\n```\n2. Set Lepton AI workspace token\n```shell\nexport LEPTON_WORKSPACE_TOKEN=YOUR_LEPTON_WORKSPACE_TOKEN\n```\n3. Build web\n```shell\ncd web && npm install && npm run build\n```\n4. Run server\n```shell\nBACKEND=BING python search_with_lepton.py\n```\n\nFor Google Search using SearchApi:\n```shell\nexport SEARCHAPI_API_KEY=YOUR_SEARCHAPI_API_KEY\nBACKEND=SEARCHAPI python search_with_lepton.py\n```\n\nFor Google Search using Serper:\n```shell\nexport SERPER_SEARCH_API_KEY=YOUR_SERPER_API_KEY\nBACKEND=SERPER python search_with_lepton.py\n```\n\nFor Google Search using Programmable Search Engine:\n```shell\nexport GOOGLE_SEARCH_API_KEY=YOUR_GOOGLE_SEARCH_API_KEY\nexport GOOGLE_SEARCH_CX=YOUR_GOOGLE_SEARCH_ENGINE_ID\nBACKEND=GOOGLE python search_with_lepton.py\n```\n\n\n\n## Deploy\n\nYou can deploy this to Lepton AI with one click:\n\n[![Deploy with Lepton AI](https://github.com/leptonai/search_with_lepton/assets/1506722/bbd40afa-69ee-4acb-8974-d060880a183a)](https://dashboard.lepton.ai/workspace-redirect/explore/detail/search-by-lepton)\n\nYou can also deploy your own version via\n\n```shell\nlep photon run -n search-with-lepton-modified -m search_with_lepton.py --env BACKEND=BING --env BING_SEARCH_V7_SUBSCRIPTION_KEY=YOUR_BING_SUBSCRIPTION_KEY\n```\n\nLearn more about `lep photon` [here](https://www.lepton.ai/docs).\n"
        },
        {
          "name": "lepton_template",
          "type": "tree",
          "content": null
        },
        {
          "name": "search_with_lepton.py",
          "type": "blob",
          "size": 26.005859375,
          "content": "import concurrent.futures\nimport glob\nimport json\nimport os\nimport re\nimport threading\nimport requests\nimport traceback\nfrom typing import Annotated, List, Generator, Optional\n\nfrom fastapi import HTTPException\nfrom fastapi.responses import HTMLResponse, StreamingResponse, RedirectResponse\nimport httpx\nfrom loguru import logger\n\nimport leptonai\nfrom leptonai import Client\nfrom leptonai.kv import KV\nfrom leptonai.photon import Photon, StaticFiles\nfrom leptonai.photon.types import to_bool\nfrom leptonai.api.v0.workspace import WorkspaceInfoLocalRecord\nfrom leptonai.util import tool\n\n################################################################################\n# Constant values for the RAG model.\n################################################################################\n\n# Search engine related. You don't really need to change this.\nBING_SEARCH_V7_ENDPOINT = \"https://api.bing.microsoft.com/v7.0/search\"\nBING_MKT = \"en-US\"\nGOOGLE_SEARCH_ENDPOINT = \"https://customsearch.googleapis.com/customsearch/v1\"\nSERPER_SEARCH_ENDPOINT = \"https://google.serper.dev/search\"\nSEARCHAPI_SEARCH_ENDPOINT = \"https://www.searchapi.io/api/v1/search\"\n\n# Specify the number of references from the search engine you want to use.\n# 8 is usually a good number.\nREFERENCE_COUNT = 8\n\n# Specify the default timeout for the search engine. If the search engine\n# does not respond within this time, we will return an error.\nDEFAULT_SEARCH_ENGINE_TIMEOUT = 5\n\n\n# If the user did not provide a query, we will use this default query.\n_default_query = \"Who said 'live long and prosper'?\"\n\n# This is really the most important part of the rag model. It gives instructions\n# to the model on how to generate the answer. Of course, different models may\n# behave differently, and we haven't tuned the prompt to make it optimal - this\n# is left to you, application creators, as an open problem.\n_rag_query_text = \"\"\"\nYou are a large language AI assistant built by Lepton AI. You are given a user question, and please write clean, concise and accurate answer to the question. You will be given a set of related contexts to the question, each starting with a reference number like [[citation:x]], where x is a number. Please use the context and cite the context at the end of each sentence if applicable.\n\nYour answer must be correct, accurate and written by an expert using an unbiased and professional tone. Please limit to 1024 tokens. Do not give any information that is not related to the question, and do not repeat. Say \"information is missing on\" followed by the related topic, if the given context do not provide sufficient information.\n\nPlease cite the contexts with the reference numbers, in the format [citation:x]. If a sentence comes from multiple contexts, please list all applicable citations, like [citation:3][citation:5]. Other than code and specific names and citations, your answer must be written in the same language as the question.\n\nHere are the set of contexts:\n\n{context}\n\nRemember, don't blindly repeat the contexts verbatim. And here is the user question:\n\"\"\"\n\n# A set of stop words to use - this is not a complete set, and you may want to\n# add more given your observation.\nstop_words = [\n    \"<|im_end|>\",\n    \"[End]\",\n    \"[end]\",\n    \"\\nReferences:\\n\",\n    \"\\nSources:\\n\",\n    \"End.\",\n]\n\n# This is the prompt that asks the model to generate related questions to the\n# original question and the contexts.\n# Ideally, one want to include both the original question and the answer from the\n# model, but we are not doing that here: if we need to wait for the answer, then\n# the generation of the related questions will usually have to start only after\n# the whole answer is generated. This creates a noticeable delay in the response\n# time. As a result, and as you will see in the code, we will be sending out two\n# consecutive requests to the model: one for the answer, and one for the related\n# questions. This is not ideal, but it is a good tradeoff between response time\n# and quality.\n_more_questions_prompt = \"\"\"\nYou are a helpful assistant that helps the user to ask related questions, based on user's original question and the related contexts. Please identify worthwhile topics that can be follow-ups, and write questions no longer than 20 words each. Please make sure that specifics, like events, names, locations, are included in follow up questions so they can be asked standalone. For example, if the original question asks about \"the Manhattan project\", in the follow up question, do not just say \"the project\", but use the full name \"the Manhattan project\". Your related questions must be in the same language as the original question.\n\nHere are the contexts of the question:\n\n{context}\n\nRemember, based on the original question and related contexts, suggest three such further questions. Do NOT repeat the original question. Each related question should be no longer than 20 words. Here is the original question:\n\"\"\"\n\n\ndef search_with_bing(query: str, subscription_key: str):\n    \"\"\"\n    Search with bing and return the contexts.\n    \"\"\"\n    params = {\"q\": query, \"mkt\": BING_MKT}\n    response = requests.get(\n        BING_SEARCH_V7_ENDPOINT,\n        headers={\"Ocp-Apim-Subscription-Key\": subscription_key},\n        params=params,\n        timeout=DEFAULT_SEARCH_ENGINE_TIMEOUT,\n    )\n    if not response.ok:\n        logger.error(f\"{response.status_code} {response.text}\")\n        raise HTTPException(response.status_code, \"Search engine error.\")\n    json_content = response.json()\n    try:\n        contexts = json_content[\"webPages\"][\"value\"][:REFERENCE_COUNT]\n    except KeyError:\n        logger.error(f\"Error encountered: {json_content}\")\n        return []\n    return contexts\n\n\ndef search_with_google(query: str, subscription_key: str, cx: str):\n    \"\"\"\n    Search with google and return the contexts.\n    \"\"\"\n    params = {\n        \"key\": subscription_key,\n        \"cx\": cx,\n        \"q\": query,\n        \"num\": REFERENCE_COUNT,\n    }\n    response = requests.get(\n        GOOGLE_SEARCH_ENDPOINT, params=params, timeout=DEFAULT_SEARCH_ENGINE_TIMEOUT\n    )\n    if not response.ok:\n        logger.error(f\"{response.status_code} {response.text}\")\n        raise HTTPException(response.status_code, \"Search engine error.\")\n    json_content = response.json()\n    try:\n        contexts = json_content[\"items\"][:REFERENCE_COUNT]\n    except KeyError:\n        logger.error(f\"Error encountered: {json_content}\")\n        return []\n    return contexts\n\n\ndef search_with_serper(query: str, subscription_key: str):\n    \"\"\"\n    Search with serper and return the contexts.\n    \"\"\"\n    payload = json.dumps({\n        \"q\": query,\n        \"num\": (\n            REFERENCE_COUNT\n            if REFERENCE_COUNT % 10 == 0\n            else (REFERENCE_COUNT // 10 + 1) * 10\n        ),\n    })\n    headers = {\"X-API-KEY\": subscription_key, \"Content-Type\": \"application/json\"}\n    logger.info(\n        f\"{payload} {headers} {subscription_key} {query} {SERPER_SEARCH_ENDPOINT}\"\n    )\n    response = requests.post(\n        SERPER_SEARCH_ENDPOINT,\n        headers=headers,\n        data=payload,\n        timeout=DEFAULT_SEARCH_ENGINE_TIMEOUT,\n    )\n    if not response.ok:\n        logger.error(f\"{response.status_code} {response.text}\")\n        raise HTTPException(response.status_code, \"Search engine error.\")\n    json_content = response.json()\n    try:\n        # convert to the same format as bing/google\n        contexts = []\n        if json_content.get(\"knowledgeGraph\"):\n            url = json_content[\"knowledgeGraph\"].get(\"descriptionUrl\") or json_content[\"knowledgeGraph\"].get(\"website\")\n            snippet = json_content[\"knowledgeGraph\"].get(\"description\")\n            if url and snippet:\n                contexts.append({\n                    \"name\": json_content[\"knowledgeGraph\"].get(\"title\",\"\"),\n                    \"url\": url,\n                    \"snippet\": snippet\n                })\n        if json_content.get(\"answerBox\"):\n            url = json_content[\"answerBox\"].get(\"url\")\n            snippet = json_content[\"answerBox\"].get(\"snippet\") or json_content[\"answerBox\"].get(\"answer\")\n            if url and snippet:\n                contexts.append({\n                    \"name\": json_content[\"answerBox\"].get(\"title\",\"\"),\n                    \"url\": url,\n                    \"snippet\": snippet\n                })\n        contexts += [\n            {\"name\": c[\"title\"], \"url\": c[\"link\"], \"snippet\": c.get(\"snippet\",\"\")}\n            for c in json_content[\"organic\"]\n        ]\n        return contexts[:REFERENCE_COUNT]\n    except KeyError:\n        logger.error(f\"Error encountered: {json_content}\")\n        return []\n\ndef search_with_searchapi(query: str, subscription_key: str):\n    \"\"\"\n    Search with SearchApi.io and return the contexts.\n    \"\"\"\n    payload = {\n        \"q\": query,\n        \"engine\": \"google\",\n        \"num\": (\n            REFERENCE_COUNT\n            if REFERENCE_COUNT % 10 == 0\n            else (REFERENCE_COUNT // 10 + 1) * 10\n        ),\n    }\n    headers = {\"Authorization\": f\"Bearer {subscription_key}\", \"Content-Type\": \"application/json\"}\n    logger.info(\n        f\"{payload} {headers} {subscription_key} {query} {SEARCHAPI_SEARCH_ENDPOINT}\"\n    )\n    response = requests.get(\n        SEARCHAPI_SEARCH_ENDPOINT,\n        headers=headers,\n        params=payload,\n        timeout=30,\n    )\n    if not response.ok:\n        logger.error(f\"{response.status_code} {response.text}\")\n        raise HTTPException(response.status_code, \"Search engine error.\")\n    json_content = response.json()\n    try:\n        # convert to the same format as bing/google\n        contexts = []\n\n        if json_content.get(\"answer_box\"):\n            if json_content[\"answer_box\"].get(\"organic_result\"):\n                title = json_content[\"answer_box\"].get(\"organic_result\").get(\"title\", \"\")\n                url = json_content[\"answer_box\"].get(\"organic_result\").get(\"link\", \"\")\n            if json_content[\"answer_box\"].get(\"type\") == \"population_graph\":\n                title = json_content[\"answer_box\"].get(\"place\", \"\")\n                url = json_content[\"answer_box\"].get(\"explore_more_link\", \"\")\n\n            title = json_content[\"answer_box\"].get(\"title\", \"\")\n            url = json_content[\"answer_box\"].get(\"link\")\n            snippet =  json_content[\"answer_box\"].get(\"answer\") or json_content[\"answer_box\"].get(\"snippet\")\n\n            if url and snippet:\n                contexts.append({\n                    \"name\": title,\n                    \"url\": url,\n                    \"snippet\": snippet\n                })\n\n        if json_content.get(\"knowledge_graph\"):\n            if json_content[\"knowledge_graph\"].get(\"source\"):\n                url = json_content[\"knowledge_graph\"].get(\"source\").get(\"link\", \"\")\n\n            url = json_content[\"knowledge_graph\"].get(\"website\", \"\")\n            snippet = json_content[\"knowledge_graph\"].get(\"description\")\n\n            if url and snippet:\n                contexts.append({\n                    \"name\": json_content[\"knowledge_graph\"].get(\"title\", \"\"),\n                    \"url\": url,\n                    \"snippet\": snippet\n                })\n\n        contexts += [\n            {\"name\": c[\"title\"], \"url\": c[\"link\"], \"snippet\": c.get(\"snippet\", \"\")}\n            for c in json_content[\"organic_results\"]\n        ]\n        \n        if json_content.get(\"related_questions\"):\n            for question in json_content[\"related_questions\"]:\n                if question.get(\"source\"):\n                    url = question.get(\"source\").get(\"link\", \"\")\n                else:\n                    url = \"\"  \n                    \n                snippet = question.get(\"answer\", \"\")\n\n                if url and snippet:\n                    contexts.append({\n                        \"name\": question.get(\"question\", \"\"),\n                        \"url\": url,\n                        \"snippet\": snippet\n                    })\n\n        return contexts[:REFERENCE_COUNT]\n    except KeyError:\n        logger.error(f\"Error encountered: {json_content}\")\n        return []\n\nclass RAG(Photon):\n    \"\"\"\n    Retrieval-Augmented Generation Demo from Lepton AI.\n\n    This is a minimal example to show how to build a RAG engine with Lepton AI.\n    It uses search engine to obtain results based on user queries, and then uses\n    LLM models to generate the answer as well as related questions. The results\n    are then stored in a KV so that it can be retrieved later.\n    \"\"\"\n\n    requirement_dependency = [\n        \"openai\",  # for openai client usage.\n    ]\n\n    extra_files = glob.glob(\"ui/**/*\", recursive=True)\n\n    deployment_template = {\n        # All actual computations are carried out via remote apis, so\n        # we will use a cpu.small instance which is already enough for most of\n        # the work.\n        \"resource_shape\": \"cpu.small\",\n        # You most likely don't need to change this.\n        \"env\": {\n            # Choose the backend. Currently, we support BING and GOOGLE. For\n            # simplicity, in this demo, if you specify the backend as LEPTON,\n            # we will use the hosted serverless version of lepton search api\n            # at https://search-api.lepton.run/ to do the search and RAG, which\n            # runs the same code (slightly modified and might contain improvements)\n            # as this demo.\n            \"BACKEND\": \"LEPTON\",\n            # If you are using google, specify the search cx.\n            \"GOOGLE_SEARCH_CX\": \"\",\n            # Specify the LLM model you are going to use.\n            \"LLM_MODEL\": \"mixtral-8x7b\",\n            # For all the search queries and results, we will use the Lepton KV to\n            # store them so that we can retrieve them later. Specify the name of the\n            # KV here.\n            \"KV_NAME\": \"search-with-lepton\",\n            # If set to true, will generate related questions. Otherwise, will not.\n            \"RELATED_QUESTIONS\": \"true\",\n            # On the lepton platform, allow web access when you are logged in.\n            \"LEPTON_ENABLE_AUTH_BY_COOKIE\": \"true\",\n        },\n        # Secrets you need to have: search api subscription key, and lepton\n        # workspace token to query lepton's llama models.\n        \"secret\": [\n            # If you use BING, you need to specify the subscription key. Otherwise\n            # it is not needed.\n            \"BING_SEARCH_V7_SUBSCRIPTION_KEY\",\n            # If you use GOOGLE, you need to specify the search api key. Note that\n            # you should also specify the cx in the env.\n            \"GOOGLE_SEARCH_API_KEY\",\n            # If you use Serper, you need to specify the search api key.\n            \"SERPER_SEARCH_API_KEY\",\n            # If you use SearchApi, you need to specify the search api key.\n            \"SEARCHAPI_API_KEY\",\n            # You need to specify the workspace token to query lepton's LLM models.\n            \"LEPTON_WORKSPACE_TOKEN\",\n        ],\n    }\n\n    # It's just a bunch of api calls, so our own deployment can be made massively\n    # concurrent.\n    handler_max_concurrency = 16\n\n    def local_client(self):\n        \"\"\"\n        Gets a thread-local client, so in case openai clients are not thread safe,\n        each thread will have its own client.\n        \"\"\"\n        import openai\n\n        thread_local = threading.local()\n        try:\n            return thread_local.client\n        except AttributeError:\n            thread_local.client = openai.OpenAI(\n                base_url=f\"https://{self.model}.lepton.run/api/v1/\",\n                api_key=os.environ.get(\"LEPTON_WORKSPACE_TOKEN\")\n                or WorkspaceInfoLocalRecord.get_current_workspace_token(),\n                # We will set the connect timeout to be 10 seconds, and read/write\n                # timeout to be 120 seconds, in case the inference server is\n                # overloaded.\n                timeout=httpx.Timeout(connect=10, read=120, write=120, pool=10),\n            )\n            return thread_local.client\n\n    def init(self):\n        \"\"\"\n        Initializes photon configs.\n        \"\"\"\n        # First, log in to the workspace.\n        leptonai.api.v0.workspace.login()\n        self.backend = os.environ[\"BACKEND\"].upper()\n        if self.backend == \"LEPTON\":\n            self.leptonsearch_client = Client(\n                \"https://search-api.lepton.run/\",\n                token=os.environ.get(\"LEPTON_WORKSPACE_TOKEN\")\n                or WorkspaceInfoLocalRecord.get_current_workspace_token(),\n                stream=True,\n                timeout=httpx.Timeout(connect=10, read=120, write=120, pool=10),\n            )\n        elif self.backend == \"BING\":\n            self.search_api_key = os.environ[\"BING_SEARCH_V7_SUBSCRIPTION_KEY\"]\n            self.search_function = lambda query: search_with_bing(\n                query,\n                self.search_api_key,\n            )\n        elif self.backend == \"GOOGLE\":\n            self.search_api_key = os.environ[\"GOOGLE_SEARCH_API_KEY\"]\n            self.search_function = lambda query: search_with_google(\n                query,\n                self.search_api_key,\n                os.environ[\"GOOGLE_SEARCH_CX\"],\n            )\n        elif self.backend == \"SERPER\":\n            self.search_api_key = os.environ[\"SERPER_SEARCH_API_KEY\"]\n            self.search_function = lambda query: search_with_serper(\n                query,\n                self.search_api_key,\n            )\n        elif self.backend == \"SEARCHAPI\":\n            self.search_api_key = os.environ[\"SEARCHAPI_API_KEY\"]\n            self.search_function = lambda query: search_with_searchapi(\n                query,\n                self.search_api_key,\n            )\n        else:\n            raise RuntimeError(\"Backend must be LEPTON, BING, GOOGLE, SERPER or SEARCHAPI.\")\n        self.model = os.environ[\"LLM_MODEL\"]\n        # An executor to carry out async tasks, such as uploading to KV.\n        self.executor = concurrent.futures.ThreadPoolExecutor(\n            max_workers=self.handler_max_concurrency * 2\n        )\n        # Create the KV to store the search results.\n        logger.info(\"Creating KV. May take a while for the first time.\")\n        self.kv = KV(\n            os.environ[\"KV_NAME\"], create_if_not_exists=True, error_if_exists=False\n        )\n        # whether we should generate related questions.\n        self.should_do_related_questions = to_bool(os.environ[\"RELATED_QUESTIONS\"])\n\n    def get_related_questions(self, query, contexts):\n        \"\"\"\n        Gets related questions based on the query and context.\n        \"\"\"\n\n        def ask_related_questions(\n            questions: Annotated[\n                List[str],\n                [(\n                    \"question\",\n                    Annotated[\n                        str, \"related question to the original question and context.\"\n                    ],\n                )],\n            ]\n        ):\n            \"\"\"\n            ask further questions that are related to the input and output.\n            \"\"\"\n            pass\n\n        try:\n            response = self.local_client().chat.completions.create(\n                model=self.model,\n                messages=[\n                    {\n                        \"role\": \"system\",\n                        \"content\": _more_questions_prompt.format(\n                            context=\"\\n\\n\".join([c[\"snippet\"] for c in contexts])\n                        ),\n                    },\n                    {\n                        \"role\": \"user\",\n                        \"content\": query,\n                    },\n                ],\n                tools=[{\n                    \"type\": \"function\",\n                    \"function\": tool.get_tools_spec(ask_related_questions),\n                }],\n                max_tokens=512,\n            )\n            related = response.choices[0].message.tool_calls[0].function.arguments\n            if isinstance(related, str):\n                related = json.loads(related)\n            logger.trace(f\"Related questions: {related}\")\n            return related[\"questions\"][:5]\n        except Exception as e:\n            # For any exceptions, we will just return an empty list.\n            logger.error(\n                \"encountered error while generating related questions:\"\n                f\" {e}\\n{traceback.format_exc()}\"\n            )\n            return []\n\n    def _raw_stream_response(\n        self, contexts, llm_response, related_questions_future\n    ) -> Generator[str, None, None]:\n        \"\"\"\n        A generator that yields the raw stream response. You do not need to call\n        this directly. Instead, use the stream_and_upload_to_kv which will also\n        upload the response to KV.\n        \"\"\"\n        # First, yield the contexts.\n        yield json.dumps(contexts)\n        yield \"\\n\\n__LLM_RESPONSE__\\n\\n\"\n        # Second, yield the llm response.\n        if not contexts:\n            # Prepend a warning to the user\n            yield (\n                \"(The search engine returned nothing for this query. Please take the\"\n                \" answer with a grain of salt.)\\n\\n\"\n            )\n        for chunk in llm_response:\n            if chunk.choices:\n                yield chunk.choices[0].delta.content or \"\"\n        # Third, yield the related questions. If any error happens, we will just\n        # return an empty list.\n        if related_questions_future is not None:\n            related_questions = related_questions_future.result()\n            try:\n                result = json.dumps(related_questions)\n            except Exception as e:\n                logger.error(f\"encountered error: {e}\\n{traceback.format_exc()}\")\n                result = \"[]\"\n            yield \"\\n\\n__RELATED_QUESTIONS__\\n\\n\"\n            yield result\n\n    def stream_and_upload_to_kv(\n        self, contexts, llm_response, related_questions_future, search_uuid\n    ) -> Generator[str, None, None]:\n        \"\"\"\n        Streams the result and uploads to KV.\n        \"\"\"\n        # First, stream and yield the results.\n        all_yielded_results = []\n        for result in self._raw_stream_response(\n            contexts, llm_response, related_questions_future\n        ):\n            all_yielded_results.append(result)\n            yield result\n        # Second, upload to KV. Note that if uploading to KV fails, we will silently\n        # ignore it, because we don't want to affect the user experience.\n        _ = self.executor.submit(self.kv.put, search_uuid, \"\".join(all_yielded_results))\n\n    @Photon.handler(method=\"POST\", path=\"/query\")\n    def query_function(\n        self,\n        query: str,\n        search_uuid: str,\n        generate_related_questions: Optional[bool] = True,\n    ) -> StreamingResponse:\n        \"\"\"\n        Query the search engine and returns the response.\n\n        The query can have the following fields:\n            - query: the user query.\n            - search_uuid: a uuid that is used to store or retrieve the search result. If\n                the uuid does not exist, generate and write to the kv. If the kv\n                fails, we generate regardless, in favor of availability. If the uuid\n                exists, return the stored result.\n            - generate_related_questions: if set to false, will not generate related\n                questions. Otherwise, will depend on the environment variable\n                RELATED_QUESTIONS. Default: true.\n        \"\"\"\n        # Note that, if uuid exists, we don't check if the stored query is the same\n        # as the current query, and simply return the stored result. This is to enable\n        # the user to share a searched link to others and have others see the same result.\n        if search_uuid:\n            try:\n                result = self.kv.get(search_uuid)\n\n                def str_to_generator(result: str) -> Generator[str, None, None]:\n                    yield result\n\n                return StreamingResponse(str_to_generator(result))\n            except KeyError:\n                logger.info(f\"Key {search_uuid} not found, will generate again.\")\n            except Exception as e:\n                logger.error(\n                    f\"KV error: {e}\\n{traceback.format_exc()}, will generate again.\"\n                )\n        else:\n            raise HTTPException(status_code=400, detail=\"search_uuid must be provided.\")\n\n        if self.backend == \"LEPTON\":\n            # delegate to the lepton search api.\n            result = self.leptonsearch_client.query(\n                query=query,\n                search_uuid=search_uuid,\n                generate_related_questions=generate_related_questions,\n            )\n            return StreamingResponse(content=result, media_type=\"text/html\")\n\n        # First, do a search query.\n        query = query or _default_query\n        # Basic attack protection: remove \"[INST]\" or \"[/INST]\" from the query\n        query = re.sub(r\"\\[/?INST\\]\", \"\", query)\n        contexts = self.search_function(query)\n\n        system_prompt = _rag_query_text.format(\n            context=\"\\n\\n\".join(\n                [f\"[[citation:{i+1}]] {c['snippet']}\" for i, c in enumerate(contexts)]\n            )\n        )\n        try:\n            client = self.local_client()\n            llm_response = client.chat.completions.create(\n                model=self.model,\n                messages=[\n                    {\"role\": \"system\", \"content\": system_prompt},\n                    {\"role\": \"user\", \"content\": query},\n                ],\n                max_tokens=1024,\n                stop=stop_words,\n                stream=True,\n                temperature=0.9,\n            )\n            if self.should_do_related_questions and generate_related_questions:\n                # While the answer is being generated, we can start generating\n                # related questions as a future.\n                related_questions_future = self.executor.submit(\n                    self.get_related_questions, query, contexts\n                )\n            else:\n                related_questions_future = None\n        except Exception as e:\n            logger.error(f\"encountered error: {e}\\n{traceback.format_exc()}\")\n            return HTMLResponse(\"Internal server error.\", 503)\n\n        return StreamingResponse(\n            self.stream_and_upload_to_kv(\n                contexts, llm_response, related_questions_future, search_uuid\n            ),\n            media_type=\"text/html\",\n        )\n\n    @Photon.handler(mount=True)\n    def ui(self):\n        return StaticFiles(directory=\"ui\")\n\n    @Photon.handler(method=\"GET\", path=\"/\")\n    def index(self) -> RedirectResponse:\n        \"\"\"\n        Redirects \"/\" to the ui page.\n        \"\"\"\n        return RedirectResponse(url=\"/ui/index.html\")\n\n\nif __name__ == \"__main__\":\n    rag = RAG()\n    rag.launch()\n"
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}