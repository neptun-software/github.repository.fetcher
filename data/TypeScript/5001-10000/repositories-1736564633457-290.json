{
  "metadata": {
    "timestamp": 1736564633457,
    "page": 290,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "prisma/prisma-examples",
      "stars": 6218,
      "defaultBranch": "latest",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1435546875,
          "content": "root = true\n\n[*]\ncharset = utf-8\nindent_style = space\nindent_size = 2\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4912109375,
          "content": "# This gitignore file is used only internally for this repository,\n# you should not use this in your own projects. Instead, navigate into\n# an example folder and use the folder as the project root (it also contains a\n# projects-specific .gitignore).\n\nnode_modules/\nyarn-error.log/\nvendor/\ntmp/\ndist/\n.DS_Store\n.idea\ntmp-resolvers\npackage-lock.json\nflow-typed\nyarn.lock\norm/**/migrations/\nmisc/**/migrations/\ndatabases/**/migrations/\nexperimental/**/*.db\n.next\n.vscode/\n.nuxt\ndev.db\n*.env*\n!.env.example\n"
        },
        {
          "name": ".nvmrc",
          "type": "blob",
          "size": 0.0126953125,
          "content": "lts/hydrogen\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.009765625,
          "content": "*.mdx\n*.md"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.0673828125,
          "content": "{\n  \"semi\": false,\n  \"singleQuote\": true,\n  \"trailingComma\": \"all\"\n}\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.0859375,
          "content": "# Contribution Guidelines\n\n## Commit messages\n\nPlease use [conventional commits](https://www.conventionalcommits.org) (also known as _semantic commits_) to ensure consistent and descriptive commit messages when submitting PRs.\n\n## General guidelines\n\nEvery example should follow a number of guidelines.\n\n### Example guidelines\n\n- Simple and minimal instead of complex and production-ready\n- Focus on one specific Prisma use case\n- Easily extensible\n\n### README guidelines\n\n- Clear instructions that end with a running example\n- Include instructions how to _use_ the running example\n\n## Example structure\n\nFor each language, there should be one example that shows how to:\n\n- use Prisma client in a **script**\n- build a **GraphQL server** using Prisma client\n- build a **GraphQL server** using Prisma client **with authentication and permissions**\n- build a **GraphQL server** using Prisma client **with realtime GraphQL subscriptions**\n- build a **REST API** with Prisma client\n- build a **CLI** application with Prisma client\n\nThe schemas and developed APIs should be consistent across languages. This enables easier testing of the examples. The domain for all applications (except the CLI app) is a simple blogging application.\n<!--\nHere's an overview of the used datamodels and APIs:\n\n### Script\n\n<details><summary>View datamodel</summary>\n\n`datamodel.prisma`:\n\n```graphql\ntype User {\n  id: ID! @id\n  email: String! @unique\n  name: String\n  posts: [Post!]!\n}\n\ntype Post {\n  id: ID! @id\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  published: Boolean! @default(value: \"false\")\n  title: String!\n  content: String\n  author: User!\n}\n```\n\n</details>\n\n### GraphQL server\n\n<details><summary>View datamodel and GraphQL schema</summary>\n\n`datamodel.prisma`:\n\n```graphql\ntype User {\n  id: ID! @id\n  email: String! @unique\n  name: String\n  posts: [Post!]!\n}\n\ntype Post {\n  id: ID! @id\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  published: Boolean! @default(value: \"false\")\n  title: String!\n  content: String\n  author: User!\n}\n```\n\n`schema.graphql`:\n\n```graphql\nscalar DateTime\n\ntype Query {\n  feed: [Post!]!\n  filterPosts(searchString: String): [Post!]!\n  post(id: ID!): Post\n}\n\ntype Mutation {\n  signupUser(email: String!, name: String): User!\n  createDraft(title: String!, content: String, authorEmail: String!): Post!\n  deletePost(id: ID!): Post\n  publish(id: ID!): Post\n}\n\ntype Post {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  published: Boolean!\n  title: String!\n  content: String\n  author: User!\n}\n\ntype User {\n  id: ID!\n  email: String!\n  name: String\n  posts: [Post!]!\n}\n```\n\n</details>\n\n### GraphQL server with authentication and permissions\n\n<details><summary>View datamodel and GraphQL schema</summary>\n\n`datamodel.prisma`:\n\n```graphql\ntype Post {\n  id: ID! @id\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  published: Boolean! @default(value: \"false\")\n  title: String!\n  content: String\n  author: User!\n}\n\ntype User {\n  id: ID! @id\n  email: String! @unique\n  password: String!\n  name: String\n  posts: [Post!]!\n}\n```\n\n`schema.graphql`:\n\n```graphql\nscalar DateTime\n\ntype Query {\n  me: User\n  feed: [Post!]!\n  filterPosts(searchString: String): [Post!]!\n  post(id: ID!): Post\n}\n\ntype Mutation {\n  createDraft(title: String!, content: String): Post!\n  deletePost(id: ID!): Post\n  publish(id: ID!): Post\n  signup(email: String!, password: String!, name: String): AuthPayload!\n  login(email: String!, password: String!): AuthPayload!\n}\n\ntype AuthPayload {\n  token: String!\n  user: User!\n}\n\ntype Post {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  published: Boolean!\n  title: String!\n  content: String\n  author: User!\n}\n\ntype User {\n  id: ID!\n  email: String!\n  name: String\n  posts: [Post!]!\n}\n```\n\n</details>\n\n### GraphQL server with realtime GraphQL subscriptions\n\n<details><summary>View datamodel and GraphQL schema</summary>\n\n`datamodel.prisma`:\n\n```graphql\ntype Post {\n  id: ID! @id\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  published: Boolean! @default(value: \"false\")\n  title: String!\n  content: String\n}\n```\n\n`schema.graphql`:\n\n```graphql\nscalar DateTime\n\ntype Query {\n  feed: [Post!]!\n  filterPosts(searchString: String): [Post!]!\n  post(id: ID!): Post\n}\n\ntype Mutation {\n  createDraft(title: String!, content: String): Post!\n  deletePost(id: ID!): Post\n  publish(id: ID!): Post\n}\n\ntype Subscription {\n  posts: Post\n}\n\ntype Post {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  published: Boolean!\n  title: String!\n  content: String\n}\n```\n\n</details>\n\n### REST API\n\n<details><summary>View datamodel and API operations</summary>\n\n`datamodel.prisma`:\n\n```graphql\ntype User {\n  id: ID! @id\n  email: String! @unique\n  name: String\n  posts: [Post!]!\n}\n\ntype Post {\n  id: ID! @id\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  published: Boolean! @default(value: \"false\")\n  title: String!\n  content: String\n  author: User!\n}\n```\n\n### API\n\n#### `GET`\n\n- `/post/:id`: Fetch a single post by its `id`\n- `/feed`: Fetch all _published_ posts\n- `/filterPosts?searchString={searchString}`: Filter posts by `title` or `content`\n\n#### `POST`\n\n- `/post`: Create a new post\n  - Body:\n    - `title: String` (required): The title of the post\n    - `content: String` (optional): The content of the post\n    - `authorEmail: String` (required): The email of the user that creates the post\n- `/user`: Create a new user\n  - Body:\n    - `email: String` (required): The email address of the user\n    - `name: String` (optional): The name of the user\n\n#### `PUT`\n\n- `/publish/:id`: Publish a post by its `id`\n\n#### `DELETE`\n\n- `/post/:id`: Delete a post by its `id`\n\n\n</details>\n\n\n### CLI TODO app\n\n<details><summary>View datamodel</summary>\n\n`datamodel.prisma`:\n\n```graphql\ntype Todo {\n  id: ID! @id\n  title: String! @unique\n  createdAt: DateTime!\n}\n```\n\n</details> -->\n\n## Ways to contribute\n\n### Adding a missing example\n\nThe easiest way to contribute is by adding a missing example. Check [this](https://github.com/prisma/prisma-examples/issues/311) GitHub issue to see which examples are currently missing. When adding a new example, please use the suggested [example structure](#example-structure).\n\n### Adding a new example\n\nBefore submitting a PR for a new example, please first open an issue that explains the idea of the example and specifies what it will look like (e.g. how the Prisma datamodel will be defined or what kind of API will be built). It'll then be discussed in the issue whether your example is going to be added to the collection. To accelerate the process, you can ping @nikolasburk in the public [Prisma Discord](https://pris.ly/discord).\n\nOnce approved, you can add your example to [list of missing examples](https://github.com/prisma/prisma-examples/issues/311) and start implementing it.\n\n### Improving an existing example\n\nIf you find a bug in an example, please feel free to open an issue or submit a PR so the bug gets fixed. If you want to make structural changes to an existing example (e.g. changing the datamodel or the API operations), please open an issue about this first where the changes can be discussed. To accelerate the process, you can ping @nikolasburk in the public [Prisma Discord](https://pris.ly/discord).\n\nOnce approved, you can go ahead and implement the changes.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.3056640625,
          "content": "<br />\n\n<div align=\"center\">\n  <h1>Prisma Examples</h1>\n  <p><h3 align=\"center\">Ready-to-run Prisma example projects 🚀</h3></p>\n  <a href=\"https://www.prisma.io/\">Website</a>\n  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n  <a href=\"https://www.prisma.io/docs/\">Docs</a>\n  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n  <a href=\"https://www.prisma.io/blog\">Blog</a>\n  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n  <a href=\"https://pris.ly/discord/\">Discord</a>\n  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n  <a href=\"https://twitter.com/prisma\">Twitter</a>\n  <span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n  <a href=\"https://www.youtube.com/watch?v=0RhtQgIs-TE&list=PLn2e1F9Rfr6k9PnR_figWOcSHgc_erDr5&index=1\">Demo videos</a>\n</div>\n\n<hr>\n\n<div align=\"center\">\n\n[![test](https://github.com/prisma/prisma-examples/workflows/test/badge.svg?branch=latest)](https://github.com/prisma/prisma-examples/actions?query=workflow%3Atest+branch%3Alatest)\n\n[View full CI status](#ci-status)\n\n</div>\n\n<hr>\n\nThis repository contains a number of ready-to-run example projects demonstrating various use cases of Prisma. Pick an example and follow the instructions in the corresponding README.\n\nYou can also find links to [real-world and production ready examples](#real-world--production-ready-example-projects-with-prisma) further below in this README.\n\nAre you missing an example? Please feel free to [open an issue](https://github.com/prisma/prisma-examples/issues/new) (read the [contribution guidelines](./CONTRIBUTING.md) for more info).\n\n<!-- Please keep the absolute URLs so it's easier to copy&paste to prisma/prisma/README.md  -->\n\n## Prisma Accelerate\n\nThe [`accelerate`](./accelerate) folder contains examples of projects using [Prisma Accelerate](https://www.prisma.io/data-platform/accelerate) for connection pooling and global caching.\n\n| Demo                                            | Description                                                                |\n| ----------------------------------------------- | -------------------------------------------------------------------------- |\n| [`nextjs-starter`](./accelerate/nextjs-starter) | A Next.js project using Prisma Accelerate's caching and connection pooling |\n| [`svelte-starter`](./accelerate/svelte-starter/) | A SvelteKit project using Prisma Accelerate's caching and connection pooling |\n| [`solidstart-starter`](./accelerate/solidstart-starter/) | A Solidstart project using Prisma Accelerate's caching and connection pooling |\n| [`remix-starter`](./accelerate/remix-starter/) | A Remix project using Prisma Accelerate's caching and connection pooling |\n| [`nuxt-starter`](./accelerate/nuxtjs-starter/) | A Nuxt.js project using Prisma Accelerate's caching and connection pooling |\n| [`astro-starter`](./accelerate/astro-starter/) | An Astro project using Prisma Accelerate's caching and connection pooling |\n\n## Prisma Pulse\n\nThe [`pulse`](./pulse) folder contains examples of projects using [Prisma Pulse](https://www.prisma.io/data-platform/pulse) to listen to real-time database change events.\n\n| Demo                                                                     | Description                                                              |\n| ------------------------------------------------------------------------ | ------------------------------------------------------------------------ |\n| [`starter`](./pulse/starter)                                             | A Prisma Pulse starter app                                               |\n| [`email-with-resend`](./pulse/email-with-resend)                         | An example app to send emails to new users using Prisma Pulse and Resend |\n| [`fullstack-leaderboard`](./pulse/fullstack-leaderboard)                 | A live leaderboard (built with Next.js)                                  |\n| [`fullstack-simple-chat`](./pulse/fullstack-simple-chat)                 | A simple chat app (built with Next.js & Express)                         |\n| [`product-search-with-typesense`](./pulse/product-search-with-typesense) | A cron job that syncs data into Typesense (built with Hono.js)           |\n| [`data-sync-with-bigquery`](./pulse/data-sync-with-bigquery)             | A script that automatically syncs data into Google BigQuery              |\n\n## Prisma Optimize\n\nThe [`optimize`](./optimize) folder contains examples of projects using [Prisma Optimize](https://www.prisma.io/data-platform/optimize) to identify and improve the performance of slow queries.\n\n| Demo                                                                     | Description                                                              |\n| ------------------------------------------------------------------------ | ------------------------------------------------------------------------ |\n| [`starter`](./optimize/starter)                                             | A Prisma Optimize starter app                                               |\n| [`optimize-excessive-rows`](./optimize/optimize-excessive-rows)                         | An example app demonstrating the \"Excessive number of rows returned\" recommendation provided by Optimize. |\n| [`optimize-full-table-scan`](./optimize/optimize-full-table-scan)                 | An example app demonstrating the \"Full table scans caused by `LIKE` operations\" recommendation provided by Optimize.                                |\n| [`optimize-unindexed-column`](./optimize/optimize-unindexed-column)                 | An example app demonstrating the \"Query filtering on an unindexed column\" recommendation provided by Optimize.                     |\n\n## Prisma ORM\n\n### Fullstack\n\n| Demo                                                                   | Description                                                              |\n| ---------------------------------------------------------------------- | ------------------------------------------------------------------------ |\n| [`nextjs-api-routes`](https://github.com/prisma/prisma-examples/tree/latest/orm/nextjs-api-routes)           | [Next.js](https://nextjs.org/) app with a REST API (using [Next.js API routes](https://nextjs.org/docs/api-routes/introduction))                                                                     |\n| [`nextjs-graphql`](https://github.com/prisma/prisma-examples/tree/latest/orm/nextjs-graphql)                           | [Next.js](https://nextjs.org/) app with a GraphQL API (using [Apollo Server](https://github.com/apollographql/apollo-server) and [GraphQL Nexus](https://github.com/graphql-nexus/nexus))            |                                                                                                                                       |\n| [`nextjs-trpc`](https://github.com/prisma/prisma-examples/tree/latest/orm/nextjs-trpc)                                 | [Next.js](https://nextjs.org/) app with [tRPC ](https://trpc.io/)                                                                                                                                    |\n| [`nuxt`](https://github.com/prisma/prisma-examples/tree/latest/orm/nuxt)                                 | [Nuxt.js](https://nuxt.com/) app with a REST API                                                                                                                                                     |\n| [`sveltekit`](https://github.com/prisma/prisma-examples/tree/latest/orm/sveltekit)                                     | [SvelteKit](https://kit.svelte.dev/) app using SvelteKit's [actions](https://kit.svelte.dev/docs/form-actions) and [load](https://kit.svelte.dev/docs/form-actions#loading-data) functions           |     | [SvelteKit](https://kit.svelte.dev/) app using SvelteKit's [actions](https://kit.svelte.dev/docs/form-actions) and [load](https://kit.svelte.dev/docs/form-actions#loading-data) functions |\n| [`remix`](https://github.com/prisma/prisma-examples/tree/latest/orm/remix)                                             | [Remix](https://remix.run/) app                                                                                                                                                                      |\n| [`nuxt-prisma-module`](https://github.com/prisma/prisma-examples/tree/latest/orm/nuxt-prisma-module)                                             | A nuxt example app using the [Prisma Nuxt module](https://github.com/prisma/nuxt-prisma)                                                                                                                                                                     |\n\n### Backend only\n\n| Demo                                                                                                                      | Description                                                                                                                                                                                       |\n| :------------------------------------------------------------------------------------------------------------------------ | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| [`graphql-auth`](https://github.com/prisma/prisma-examples/tree/latest/orm/graphql-auth)                           | GraphQL server with email-password authentication & permissions                                                                                                                                   |\n| [`graphql-sdl-first`](https://github.com/prisma/prisma-examples/tree/latest/orm/graphql-sdl-first)                 | GraphQL server based on [GraphQL Yoga](https://the-guild.dev/graphql/yoga-server)                                                                                                                 |\n| [`graphql-subscriptions`](https://github.com/prisma/prisma-examples/tree/latest/orm/graphql-subscriptions)          | GraphQL server with realtime subscriptions based on [`apollo-server`](https://www.apollographql.com/docs/apollo-server/) and [Nexus Schema](https://github.com/graphql-nexus/schema)              |\n| [`graphql-typegraphql`](https://github.com/prisma/prisma-examples/tree/latest/orm/graphql-typegraphql)             | GraphQL server based on [`@apollo/server`](https://www.apollographql.com/docs/apollo-server) and [TypeGraphQL](https://github.com/MichalLytek/type-graphql)                                       |\n| [`graphql-typegraphql-crud`](https://github.com/prisma/prisma-examples/tree/latest/orm/graphql-typegraphql-crud)   | CRUD GraphQL API based on [`@apollo/server`](https://www.apollographql.com/docs/apollo-server) and [TypeGraphQL](https://github.com/MichalLytek/type-graphql)                                     |\n| [`fastify-graphql`](https://github.com/prisma/prisma-examples/tree/latest/orm/fastify-graphql)                     | GraphQL server based on [Fastify](https://fastify.io/), [Mercurius](https://mercurius.dev/), and the SDL-first approach of [`graphql-tools`](https://www.graphql-tools.com/docs/generate-schema/) |\n| [`fastify-graphql-sdl-first`](https://github.com/prisma/prisma-examples/tree/latest/orm/fastify-graphql-sdl-first) | GraphQL server based on [Fastify](https://fastify.io/), [Mercurius](https://mercurius.dev/), and the SDL-first approach of [`graphql-tools`](https://www.graphql-tools.com/docs/generate-schema/) |\n| [`hapi-graphql`](https://github.com/prisma/prisma-examples/tree/latest/orm/hapi-graphql)                           | GraphQL server based on [Hapi](https://hapi.dev/) and [Nexus Schema](https://github.com/graphql-nexus/schema)                                                                                     |\n| [`hapi-graphql-sdl-first`](https://github.com/prisma/prisma-examples/tree/latest/orm/hapi-graphql-sdl-first)       | GraphQL server based on [Hapi](https://hapi.dev/) and the SDL-first approach of [Apollo Server Integration for Hapi](https://www.npmjs.com/package/@as-integrations/hapi)                         |\n| [`nest-graphql`](https://github.com/prisma/prisma-examples/tree/latest/orm/nest-graphql)                       | GraphQL server based on [NestJS](https://nestjs.com/) (code-first)                                                                                                                                |\n| [`nest-graphql-sdl-first`](https://github.com/prisma/prisma-examples/tree/latest/orm/nest-graphql-sdl-first)   | GraphQL server based on [NestJS](https://nestjs.com/) and the SDL-first approach of [`graphql-tools`](https://www.apollographql.com/docs/graphql-tools/)                                          |\n| [`graphql`](https://github.com/prisma/prisma-examples/tree/latest/orm/graphql)                                     | GraphQL server based on [GraphQL Yoga](https://the-guild.dev/graphql/yoga-server) and [Pothos](https://pothos-graphql.dev/)                                                                       |\n| [`graphql-nexus`](https://github.com/prisma/prisma-examples/tree/latest/orm/graphql-nexus)                         | GraphQL server based on [`@apollo/server`](https://www.apollographql.com/docs/apollo-server) and [Nexus Schema](https://github.com/graphql-nexus/schema)                                          |\n| [`grpc`](https://github.com/prisma/prisma-examples/tree/latest/orm/grpc)                                           | gRPC API including runnable client scripts for testing                                                                                                                                            |\n| [`postgis-express`](https://github.com/prisma/prisma-examples/tree/latest/orm/postgis-express)                     | Demo of spatial queries using [Postgis](http://postgis.net/) and [Express](https://expressjs.com/)                                                                                                |\n| [`express`](https://github.com/prisma/prisma-examples/tree/latest/orm/express)                           | REST API with [Express](https://expressjs.com/)                                                                                                                                                   |\n| [`fastify`](https://github.com/prisma/prisma-examples/tree/latest/orm/fastify)                           | REST API with [Fastify](https://www.fastify.io/)                                                                                                                                                  |\n| [`koa`](https://github.com/prisma/prisma-examples/tree/latest/orm/koa)                                   | REST API with [Koa](https://koajs.com/)                                                                                                                                                           |\n| [`hapi`](https://github.com/prisma/prisma-examples/tree/latest/orm/hapi)                                 | REST API with [hapi](https://hapi.dev/)                                                                                                                                                           |\n| [`nest`](https://github.com/prisma/prisma-examples/tree/latest/orm/nest)     | REST API with [NestJS](https://docs.nestjs.com/)                                                                                                                                                  |\n| [`script`](https://github.com/prisma/prisma-examples/tree/latest/orm/script)                                       | Usage of Prisma Client JS in a TypeScript script                                                                                                                                                  |\n| [`testing-express`](https://github.com/prisma/prisma-examples/tree/latest/orm/testing-express)                     | Demo of integration tests with [Jest](https://jestjs.io/), [Supertest](https://github.com/visionmedia/supertest) and [Express](https://expressjs.com/)                                            |                                              |\n\n## Deployment platforms\n\nThe projects in the [`deployment-platforms`](./deployment-platforms) directory show what \"Prisma Client\"-based deployment setups look like for various deployment providers. Learn more about [deployment](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/deployment) in the Prisma documentation.\n\n## Real-world & production-ready example projects with Prisma\n\n- [Inbox Zero](https://github.com/elie222/inbox-zero): Open source email management tools to reach inbox zero fast\n- [NextCRM](https://github.com/pdovhomilja/nextcrm-app): An open-source Customer Relationship Management system (CRM)\n- [Papermark](https://github.com/mfts/papermark/): An open-source DocSend alternative with built-in analytics and custom domains\n- [Hoppscotch](https://github.com/hoppscotch/hoppscotch): An open-source API development ecosystem\n- [FeastQR](https://github.com/jakubczarnowski/FeastQR): An open-source SaaS online menu system for restaurants\n- [Formbricks](https://github.com/formbricks/formbricks): An open-source survey and experience management tool\n- [OpenformStack](https://github.com/naveennaidu/OpenformStack): An open-source form backend that allows you to collect form submissions without writing any backend code\n- [Documenso](https://documenso.com/): An open-source alternative to Docusign\n- [abby](https://github.com/tryabby/abby): An open-source feature flag, remote config and A/B testing platform for developers\n- [ghostfolio](https://ghostfol.io/en/start): An open-source dashboard for your personal finances\n- [revert](https://www.revert.dev/): An open-source unified API to build B2B product integrations\n- [Scholarsome](https://scholarsome.com/): An interactive, studying system\n- [Dittofeed](https://www.dittofeed.com): An open-source customer engagement; intuitive marketing tools that scale\n- [Trigger.dev](https://trigger.dev/): Effortless automation built for developers (Zapier alternative)\n- [Webstudio](https://github.com/webstudio-is/webstudio-designer): A NoCode visual design tool for building apps and websites\n- [Dyrector](https://github.com/dyrector-io/dyrectorio): A self-hosted container management platform\n- [reduced.to](https://github.com/origranot/reduced.to): An open-source link shortener\n- [Linen](https://github.com/Linen-dev/linen.dev): An open-source alternative to Slack and Discord with lots of great features\n- [Coolify](https://github.com/coollabsio/coolify): An open-source & self-hostable Heroku / Netlify alternative\n- [Dub.co](https://dub.co): An open-source link management platform for modern marketing teams\n- [Umami](https://github.com/mikecao/umami): A simple, fast, privacy-focused alternative to Google Analytics\n- [Rallly](https://github.com/lukevella/rallly): A self-hostable doodle poll alternative (based on Next.js, tRPC, and TailwindCSS)\n- [Typebot](https://github.com/baptisteArno/typebot.io): A conversational form builder that you can self-host\n- [Cal.com](https://github.com/calcom/cal.com): An open-source alternative to Calendly (calender-based event scheduling service)\n- [Beam](https://github.com/planetscale/beam): A simple tool that allows members to write posts to share across your organization (based on Next.js)\n- [Dundring](https://github.com/sivertschou/dundring): An in-browser training application created to control and track you training with a smart bike trainer\n- [Expense.fyi](https://github.com/gokulkrishh/expense.fyi): A tool for tracking and managing expenses\n- [Letterpad](https://github.com/letterpad/letterpad): A publishing platform for creatives\n- [Teable](https://github.com/teableio/teable): A no-code real-time database built on Postgres with a simple interface for enterprise-level app development.\n<hr>\n\n## Starter kits\n\n- [T3 Stack](https://create.t3.gg/): Starter kit based on Next.js, TypeScript, tRPC, Prisma, Tailwind CSS, and NextAuth.js.\n- [Indie Stack](https://github.com/remix-run/indie-stack): Remix Stack for deploying to Fly with SQLite, authentication, testing, linting, and formatting.\n- [Blues Stack](https://github.com/remix-run/blues-stack): Remix Stack for deploying to Fly with PostgreSQL, authentication, testing, linting, and formatting.\n- [NestJS Prisma Starter](https://github.com/notiz-dev/nestjs-prisma-starter): NestJS, Prisma, and authentication starter template.\n- [Supastarter](https://supastarter.dev/): Full-stack SaaS starter kit using Next.js/Nuxt.js/SvelteKit and Prisma with authentication, emails, payment, testing, linting, and formatting.\n- [Saas Kit Prisma](https://github.com/Saas-Starter-Kit/Saas-Kit-prisma): Full-stack SaaS starter kit using React.js, Next.js, TypeScript, Tailwind, Shadcn, Stripe, NextAuth, Prisma, Postgres, and Playwright.\n- [Saas Kit Prisma by BoxyHQ](https://github.com/boxyhq/saas-starter-kit): An open-source enterprise SaaS starter kit using Prisma ORM.\n- [NextReady](https://nextready.dev): A ready-to-use Next.js boilerplate with Prisma, TypeScript, Tailwind CSS, and more.\n\n## Badges\n\n[![Made with Prisma](http://made-with.prisma.io/dark.svg)](https://prisma.io) [![Made with Prisma](http://made-with.prisma.io/indigo.svg)](https://prisma.io)\n\nBuilt something awesome with Prisma? 🌟 Show it off with these [badges](https://github.com/prisma/presskit?tab=readme-ov-file#badges), perfect for your readme or website.\n\n```\n[![Made with Prisma](http://made-with.prisma.io/dark.svg)](https://prisma.io)\n```\n\n```\n[![Made with Prisma](http://made-with.prisma.io/indigo.svg)](https://prisma.io)\n```\n\n## Security\n\nIf you have a security issue to report, please contact us at [security@prisma.io](mailto:security@prisma.io?subject=[GitHub]%20Prisma%202%20Security%20Report%20Examples)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.1259765625,
          "content": "# Security Policy\n\nIf you have a security issue to report, please contact us at [security@prisma.io](mailto:security@prisma.io).\n"
        },
        {
          "name": "accelerate",
          "type": "tree",
          "content": null
        },
        {
          "name": "databases",
          "type": "tree",
          "content": null
        },
        {
          "name": "deployment-platforms",
          "type": "tree",
          "content": null
        },
        {
          "name": "optimize",
          "type": "tree",
          "content": null
        },
        {
          "name": "orm",
          "type": "tree",
          "content": null
        },
        {
          "name": "pulse",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}