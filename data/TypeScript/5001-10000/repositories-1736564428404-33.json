{
  "metadata": {
    "timestamp": 1736564428404,
    "page": 33,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Project-DARC/DARC",
      "stars": 9335,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2353515625,
          "content": "node_modules\n.env\ncoverage\ncoverage.json\ntypechain\ntypechain-types\n\n# Hardhat files\ncache\nartifacts\n\n# Docusaurus files\ndarc-docs/.docusaurus\n\n# Idea files\n.idea/\n\n# Darc docs Compiled output\ndarc-docs/build\ndarc-docs/static/api\ndarc-js/dist"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 4.103515625,
          "content": "Business Source License 1.1\n\nLicense text copyright (c) 2017 MariaDB Corporation Ab, All Rights Reserved.\n\"Business Source License\" is a trademark of MariaDB Corporation Ab.\n\n-----------------------------------------------------------------------------\n\nParameters\n\nLicensor:             DARC Team\n\nLicensed Work:        DARC\n\nAdditional Use Grant: TBA\n\nChange Date:          The earlier of 2038-01-01 or a date specified at\n                      TBA\n\nChange License:       GNU General Public License v3.0 or later\n\n-----------------------------------------------------------------------------\n\nTerms\n\nThe Licensor hereby grants you the right to copy, modify, create derivative\nworks, redistribute, and make non-production use of the Licensed Work. The\nLicensor may make an Additional Use Grant, above, permitting limited\nproduction use.\n\nEffective on the Change Date, or the fourth anniversary of the first publicly\navailable distribution of a specific version of the Licensed Work under this\nLicense, whichever comes first, the Licensor hereby grants you rights under\nthe terms of the Change License, and the rights granted in the paragraph\nabove terminate.\n\nIf your use of the Licensed Work does not comply with the requirements\ncurrently in effect as described in this License, you must purchase a\ncommercial license from the Licensor, its affiliated entities, or authorized\nresellers, or you must refrain from using the Licensed Work.\n\nAll copies of the original and modified Licensed Work, and derivative works\nof the Licensed Work, are subject to this License. This License applies\nseparately for each version of the Licensed Work and the Change Date may vary\nfor each version of the Licensed Work released by Licensor.\n\nYou must conspicuously display this License on each original or modified copy\nof the Licensed Work. If you receive the Licensed Work in original or\nmodified form from a third party, the terms and conditions set forth in this\nLicense apply to your use of that work.\n\nAny use of the Licensed Work in violation of this License will automatically\nterminate your rights under this License for the current and all other\nversions of the Licensed Work.\n\nThis License does not grant you any right in any trademark or logo of\nLicensor or its affiliates (provided that you may use a trademark or logo of\nLicensor as expressly required by this License).\n\nTO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON\nAN \"AS IS\" BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,\nEXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND\nTITLE.\n\nMariaDB hereby grants you permission to use this License’s text to license\nyour works, and to refer to it using the trademark \"Business Source License\",\nas long as you comply with the Covenants of Licensor below.\n\n-----------------------------------------------------------------------------\n\nCovenants of Licensor\n\nIn consideration of the right to use this License’s text and the \"Business\nSource License\" name and trademark, Licensor covenants to MariaDB, and to all\nother recipients of the licensed work to be provided by Licensor:\n\n1. To specify as the Change License the GPL Version 2.0 or any later version,\n   or a license that is compatible with GPL Version 2.0 or a later version,\n   where \"compatible\" means that software provided under the Change License can\n   be included in a program with software provided under GPL Version 2.0 or a\n   later version. Licensor may specify additional Change Licenses without\n   limitation.\n\n2. To either: (a) specify an additional grant of rights to use that does not\n   impose any additional restriction on the right granted in this License, as\n   the Additional Use Grant; or (b) insert the text \"None\".\n\n3. To specify a Change Date.\n\n4. Not to modify this License in any other way.\n\n-----------------------------------------------------------------------------\n\nNotice\n\nThe Business Source License (this document, or the \"License\") is not an Open\nSource license. However, the Licensed Work will eventually be made available\nunder an Open Source License, as stated in this License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 23.958984375,
          "content": "# Decentralized Autonomous Regulated Company (DARC)\n\nWelcome to the official repository for the Decentralized Autonomous Regulated Company (DARC) project. DARC is a project\nthat aims to create a decentralized autonomous company that is regulated by a plugin system based on commercial laws.\nThe project is currently in the early stages of development and is not yet ready for production use.\n\nEnglish | [简体中文](./README_cn.md) | [日本語](./README_ja.md)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=project-darc/darc&type=Date)](https://star-history.com/#project-darc/darc&Date)\n\n\n## Join our community\n\nTelegram: [https://t.me/projectdarc](https://t.me/projectdarc)\nDiscord: [https://discord.gg/QzKbTHVgGG](https://discord.gg/QzKbTHVgGG)\n\n## Whitepaper\n\nEnglish: [darc-whitepaper.pdf](https://github.com/Project-DARC/DARC-whitepaper/blob/release/darc-whitepaper.pdf)\n\nChinese(中文版): [darc-whitepaper-cn.pdf](https://github.com/Project-DARC/DARC-whitepaper/blob/release/darc-whitepaper-cn.pdf)\n\n## What is DARC?\n\nDecentralized Autonomous Regulated Company (DARC) is a company virtual machine that can be compiled and deployed to\nEVM-compatible blockchains with following features:\n\n- **Multi-level tokens**, each level token can be used as common stock, preferred stock, convertible bonds, board of\n  directors, product tokens, non-fungible tokens (NFT), with different prices, voting power and dividend power, which\n  are defined by the company's plugin(law) system.\n- **Program** composed of a series of DARC instructions that include managing tokens, dividends, voting, legislation,\n  purchasing, withdrawing cash, and other company operations.\n- **Dividend Mechanism** for distributing dividends to token holders according to certain rules.\n- **Plugin-as-a-Law**.The plugin system serves as the by-law or commercial contract that supervises all operations. All\n  company operations need to be approved by the plugin system or corresponding voting process.\n\n## By-Law Script\n\nBy-law script is a JavaScript-like programming language that is used to define the company's commercial rules and\noperations on DARC. For example:\n\n```javascript\nmint_tokens(   // mint token operation\n    [addr1, addr2, addr3],   // token address\n    [0, 0, 0],   // token class \n    [500, 300, 200]  // number of tokens\n);\n\npay_cash(100000000, 0, 1); // pay 0.1 ETH as purchase\n\ntransfer_tokens(   // transfer token operation\n    [addr1, addr2, addr3],   // token address\n    [0, 0, 0],   // token class \n    [100, 100, 200]  // number of tokens\n);\n\nadd_withdraw_cash(10000000);  // add 0.01 ETH to withdraw balance\n\nwithdraw_cash_to(  // withdraw cash from my account to other address\n    [addr4, addr5],       // withdraw cash to addr4, addr5\n    [10000000, 10000000]  // withdraw amount 0.01 ETH, 0.01 ETH\n);\n\n\n```\n\nAbove By-law Script will be transpiled via code generator and sent to corresponding DARC VM contract. The DARC will\nexecute the program if the plugin system approves. To add plugin and voting rules to the DARC, we can simple compose the\nplugin conditions and voting rules, then send them via operation `add_voting_rule()`, `add_and_enable_plugins()`\nor `add_plugins()`, and they will be deployed and effective immediately if the current plugin system approves the\noperation.\n\nHere is a quick example, assume we need to limit the transfer of tokens by major shareholders (>25%) by asking the board\nof directors for an all-hand vote (assuming 5 tokens in total), and it requires 100% approval (5 out of 5) in 1 hour. We\ncan add a new plugin and corresponding voting rule to the DARC VM contract:\n\n```javascript\nadd_voting_rule(  // add a voting rule (as index 5)\n    [\n        {\n            voting_class: [1], // voting token class: 1, level-1 token owners (board of directors) are required to vote\n            approve_percentage: 99,  // 99% voting power is required to approve\n            voting_duration: 3600,  // voting duration: 1 hour (3600 seconds)\n            execute_duration: 3600,  // pending duration for execution: 1 hour (3600 seconds)\n            is_absolute_majority: true,  // absolute majority is required, not relative majority\n        }\n    ]\n)\n\nadd_and_enable_plugins(   // add and enable plugins (as index 7)\n    [\n        {\n            condition:  // define the condition:\n                (operation == \"transfer_tokens\")   // if operation is transfer_tokens\n                & (operator_total_voting_power_percentage > 25),  // and addr1's voting power > 25%\n            return_type: voting_needed,  // return type: requires a vote\n            return_level: 100,  // priority: 100\n            votingRuleIndex: 5 // voting rule index 5 (ask board of directors to vote and must 100% approve)\n            note: \"100% Approval is needed by board members to transfer tokens by major shareholders (>25%)\"\n            is_before_operation: false,  // check the plugin after the operation is executed in sandbox\n        }\n    ]\n)\n```\n\nAfter above By-Law Script is executed, the DARC VM contract will add a new plugin and voting rule, and the plugin will\nbe effective immediately (if there exists any voting procedure related to `add_voting_rule()`\nand `add_and_enable_plugins()`, the plugin will be effective after the voting process is approved). If the\noperator (`addr1`) tries to transfer tokens to addr2, the plugin will check the condition and return `voting_needed` to\nthe DARC VM contract, and the DARC VM contract will ask the board of directors (level-1 token owners) to vote. If the\nboard of directors approves the operation, the operation will be executed in the sandbox, otherwise the operation will\nbe rejected. For example, if there are 3 voting rules are triggerd, the voting operation will be:\n\n```javascript\nvote([true, true, true])\n```\n\nIf the voting process is approved by the existing voting rules and plugins, the new program will be approved to execute\nin the next execution pending duration (1 hour in this example), and the program owner or any other members can execute\nthe program in the next 1 hour, or the program will be ignored and removed from the pending list.\n\n## \"Plugin-as-a-Law\"\n\nThe law of DARC is defined in below pseudo-code:\n\n```javascript\nif (plugin_condition == true) {\n    plugin_decision = allows / denies / requires a vote\n}\n```\n\nEach plugin contains a condition expression tree and a corresponding decision (return type). When the condition tree is\nevaluated to true while the program is submitted before running, the plugin will make a decision by allows, denies or\nrequires a vote. For example:\n\n### Example 1: Anti-Dilutive shares\n\nAnti-Dilutive shares is a basic mechanism to prevent the company (including DAO and other on-chain \"tokenomics\") from\nissuing too many shares and dilute the ownership of the existing shareholders. In DARC, the company and early-stage\ninvestors can define a law of \"anti-dilutive shares\", and the law can be abolished by certain process.\n\n***Law 1 (Anti-Dilutive Shares): Shareholder X should always holds 10% of the total stock.***\n\n*Design of Plugin: If operation is minting new level-0 tokens, plugin should check the state of token ownerships, X\nshould always keep a minimum total voting power of 10%, as well as dividend power of 10% after executing the operation*\n\nIn By-law script, we can define the plugin with following conditions:\n\n```javascript\n// define X's address\nconst x_addr = \"0x1234567890123456789012345678901234567890\";\n\n// define the plugin\nconst anti_delutive = {\n\n    // define the trigger condition\n    condition:\n        ((operation == \"mint_tokens\")             // if operator is minting new tokens\n            | (operation == \"pay_to_mint_tokens\"))   // or operator is paying to mint new tokens\n        &                                          // and        \n        ((total_voting_power_percentage(x) < 10)    // X's total voting power < 10%\n            | (total_dividend_power_percentage(x) < 10)),   // or X's total dividend power < 10%\n\n    // define the decision: reject the operation\n    return_type: NO,\n\n    // define the priority: 100\n    return_level: 100,\n\n    // check the plugin after the operation is executed in sandbox\n    is_before_operation: false,\n}\n```\n\nSince it checks the state of token ownerships, the plugin should be executed after the operation is executed inside the\nDARC's sandbox. If the plugin's condition is evaluated to true, the plugin will deny the operation after executing in\nthe sandbox, and the operation will be rejected to be executed in the real environment. Otherwise, \"minting new tokens\"\nwill be allowed to execute.\n\nWhen this plugin is added to the DARC, the operator (the author of current program) must mint extra tokens to\naddress `x_addr` to satisfy the **Law 1** above, otherwise it will be rejected. For example, the DARC has only one level\nof tokens (level 0, voting power = 1, dividend power = 1), the stock ownerships are:\n\n| ShareHolders | Number of tokens | Percentage |\n|--------------|------------------|------------|\n| CEO          | 400              | 40%        |\n| CTO          | 300              | 30%        |\n| CFO          | 200              | 20%        |\n| VC X         | 100              | 10%        |\n| **Total**    | **1000**         | **100%**   |\n\nIf the operator want to mint 200 tokens and issue them to VC Y, the operator must mint 20 tokens to address `x_addr` to\nsatisfy the **Law 1** above, otherwise the operation will be rejected. Here is a sample investment program by VC Y:\n\n```javascript\npay_cash(1000000000000)  // pay 1000 ETH to the DARC\nmint_tokens(20, 0, x_addr)  // mint 20 level-0 tokens to address x_addr\nmint_tokens(180, 0, y_addr)  // mint 180 level-0 tokens to address y_addr\nadd_and_enable_plugin([new_law_1, new_law_2, new_law_3])  // investment laws by VC Y\n```\n\nAfter the operation, the stock ownerships are:\n\n| ShareHolders | Number of tokens | Percentage |\n|--------------|------------------|------------|\n| CEO          | 400              | 33.33%     |\n| CTO          | 300              | 25%        |\n| CFO          | 200              | 16.67%     |\n| VC X         | 120              | 10%        |\n| VC Y         | 180              | 15%        |\n| **Total**    | **1200**         | 100%       |\n\nAlso another plugin should be added to the DARC to define the legislation of the \"Abolish Law 1\":\n\n***Law 1.1(Law 1 Appendix): Both Law 1 and Law 1 Appendix (current Law) can be abolished if and only if the operator is\nX***\n\n*Design of Plugin: If operation is \"disable_plugins\", and the plugin that to be disabled is with `id == 1` or `id == 2`,\nand the operator is not X, then the plugin should reject the operation (assume the anti dilutive law index is 1, and the\nappendix law index is 2, both are before-operation plugins)*\n\n```javascript\nconst law_1_appendix = {\n\n    // define the trigger condition\n    condition:\n        (operation == \"disable_plugins\")\n        & ((disable_after_op_plugin_id == 1) | (disable_after_op_plugin_id == 2))\n        & (operator != x_addr),\n\n    // define the decision\n    return_type: no,\n\n    // define the priority\n    return_level: 100,\n\n    // reject the operation before sandbox\n    is_before_operation: true,\n}\n```\n\n### Example 2: Bet-on Agreement/Valuation-Adjustment Mechanism(VAM) Agreement\n\n***Law2: If total revenue < 1000 ETH by 2035/01/01, shareholder X can take over 75% of total voting power and 90% of\ndividend power.***\n\n*Design of Plugin: After executing in sandbox, check the following conditions:*\n\n- *timestamp >= 2035/01/01*\n\n- *revenue since 2000/01/01 < 1000 ETH*\n\n- *operation is \"mint_tokens\"*\n\n- *total voting power of x <= 75%*\n\n- *the dividend power of x <= 90%*\n\n*then the plugin should approve the operation*\n\nIn By-law script, we can define the above plugin as following:\n\n```javascript\nconst bet_on_2 = {\n\n    // define the trigger condition\n    condition:\n        (timestamp >= toTimestamp('2035/01/01')) &\n        (revenue_since(946706400) < 1000000000000) & // 1000000000000 Gwei = 1000 ETH\n        (operation == \"mint_tokens\") &\n        (total_voting_power_percentage(x) < 75) &\n        (total_dividend_power_percentage(x) < 90),\n\n    // define the decision\n    return_type: yes,\n\n    // define the priority\n    return_level: 100,\n\n    // approve the operation after executing in sandbox\n    is_before_operation: false,\n}\n```\n\n### Example 3: Employee Payroll\n\n***Law 3: The payroll for employees with role level X should be 10 ETH per month.***\n\n*Design of Plugin: If operation is \"add withdrawable cash\", the amount is less than or equals to 10 ETH, and the last\noperation was at least 30 days, then this operation should be approved and skip sandbox check*\n\nIn By-law script, we can define the plugin with following conditions (for example, level X = 2 can withdraw 10 ETH per\n30 days):\n\n```javascript\nconst payroll_law_level_2 = {\n    condition:\n        (operation == \"add_withdrawable_cash\") &   // operation is \"add withdrawable cash\"\n        (member_role_level == 2) &   // the operator address is in role level 2\n\n        // add cash by < every 30 days = 2592000 seconds\n        (operator_last_operation_window(\"add_withdrawable_cash\") >= 2592000) &\n        // each time add < 10000000000 Gwei = 10 ETH to the account\n        (add_withdrawable_cash_amount <= 10000000000),\n\n    // approve the operation and skip sandbox check\n    return_type: yes_and_skip_sandbox,\n    return_level: 1\n    is_before_operation: true,\n}\n```\n\nWith the plugin above, the operator can add withdrawable cash to the employee's account with amount less than or equals\nto 10 ETH, and the last operation was at least 30 days. The plugin will approve the operation and skip the sandbox\ncheck. When the employee address is disable, removed from role level X, or other plugins with higher priority deny the\noperation, these operations will be rejected.\n\n### Example 4: Voting and legislation\n\nFor daily operations, the board of directors can be defined as a group of addresses, and the voting mechanism can be\nused to make decisions. For example, let's design the voting mechanism for the following scenario:\n\n1. Any address X with more than 10% total voting power can be added to the board by minting 1 token (level 2, board\n   voting token), if and only if the behavior is approved by 2/3 of all the board members (voting rule 1).\n\n```javascript\nconst add_board_member = {\n    condition:\n        (operation == \"mint_tokens\") &   // operation is \"mint_tokens\"\n        (mint_tokens_level == 2) &  // the token level is 2\n        (mint_tokens_amount == 1) &  // the amount is 1\n        (operator_total_voting_power_percentage >= 10),   // the operator address holds at least 10% of the total voting power\n    return_type: voting_needed,\n    voting_rule: 1,  // Under the voting rule 1, the operation will be approved if and only if 2/3 of all the board members approve the operation\n    return_level: 100,\n    is_before_operation: false, // make the decision after executing in sandbox\n}\n```\n\n2. Any operator with more than 7% of all voting power can submit `enable_plugins()` , and it needs to be approved by\n   100% of all the board members. Each operator can try to activate plugin per 10 days.\n\n```javascript\nconst enable_plugin = {\n    condition:\n        (operation == \"enable_plugins\") &   // operation is \"enable_plugins\"\n        (operator_total_voting_power_percentage >= 7) &   // the operator address holds at least 7% of the total voting power\n        (operator_last_operation_window(\"enable_plugin\") >= 864000),  // each operator can try to enable plugins once per 864000 seconds (10 days)\n\n    return_type: voting_needed,\n    voting_rule: 2,  // Under the voting rule 2, the operation will be approved if and only if 100% of all the board members approve the operation\n    return_level: 100,\n    is_before_operation: false, // make the decision after executing in sandbox\n}\n```\n\n3. To disable plugins 2,3 and 4, the operator needs to hold at least 20% of total voting power, and the operation needs\n   to be approved by 70% of all common stock token(level-0) voters as relative majority(voting rule 2). For each member\n   of DARC, this operation can be executed once per 15 days (1296000 seconds).\n\n```javascript\nconst disable_2_3_4 = {\n    condition:\n        (operation == \"disable_plugins\") &   // operation is \"disable_plugins\"\n        (\n            disable_after_op_plugin_id == 2\n            | disable_after_op_plugin_id == 3\n            | disable_after_op_plugin_id == 4\n        ) &  // disable after operation plugins 2,3 and 4\n        (operator_total_voting_power_percentage >= 20) &   // the operator address holds at least 20% of the total voting power\n        (operator_last_operation_window(\"disable_plugins\") >= 1296000),  // each operator can try to disable plugins once per 1296000 seconds (15 days)\n    return_type: voting_needed,\n    voting_rule: 3,  // Under the voting rule 3, the operation will be approved if and only if 70% of all the common stock holders approve the operation\n    is_before_operation: false, // make the decision after sandbox check\n}\n```\n\n### Example 5: Multi-level Tokens: Product tokens and Non-fungible tokens\n\nHere is an example of how to design a token with different levels of voting power and dividend power. The voting power\nand dividend power are used to calculate the voting power and dividend power of each token holder. Here is the table of\nthe token levels:\n\n| Level | Token                            | Voting Power | Dividend Power | Total Supply |\n|-------|----------------------------------|--------------|----------------|--------------|\n| 0     | Level-0 Common Stock             | 1            | 1              | 100,000      |\n| 1     | Level-1 Stock                    | 20           | 1              | 10,000       |\n| 2     | Board of Directors               | 1            | 0              | 5            |\n| 3     | Executives                       | 1            | 0              | 5            |\n| 4     | Non-Voting Shares                | 0            | 1              | 200,000      |\n| 5     | Product Token A (0.01 ETH/token) | 0            | 0              | ∞            |\n| 6     | Product Token B (10 ETH/token)   | 0            | 0              | ∞            |\n| 7     | Non-Fungible Token #1            | 0            | 0              | 1            |\n| 8     | Non-Fungible Token #2            | 0            | 0              | 1            |\n| 9     | Non-Fungible Token #3            | 0            | 0              | 1            |\n| 10    | Non-Fungible Token #4            | 0            | 0              | 1            |\n| 11    | Non-Fungible Token #5            | 0            | 0              | 1            |\n| ...   | ...                              | ...          | ...            | ...          |\n\nTo pay for service or prochase for products, customers can use `pay_cash()` to pay for the service directly, or\nuse `pay_to_mint_tokens()` as a payment method and receive product tokens/NFTs.\n\nHere is an example about how to define \"Product Token A\" and \"NFT\" price and total supply.\n\n```javascript\nconst product_token_A_price_law = {\n    condition:\n        (operation == \"pay_to_mint_tokens\") &   // operation is \"pay_to_mint_tokens\"\n        (pay_to_mint_tokens_level == 5) &  // the token level is 5\n        (pay_to_mint_price_per_token >= 10000000000000000),   // price per token >= 0.01 ETH = 10000000000000000 wei\n\n    return_type: yes_and_skip_sandbox,  // approve the operation and skip sandbox check\n    return_level: 1,\n    is_before_operation: true, // approve the operation and skip sandbox check\n}\n\nconst NFT_price_law = {\n    condition:\n        (operation == \"pay_to_mint_tokens\") &   // operation is \"pay_to_mint_tokens\"\n        (pay_to_mint_tokens_level >= 7) &  // the token level is 7 or higher\n        (pay_to_mint_token_amount == 1) &  // only allow to mint 1 token at a time\n        (pay_to_mint_current_level_total_supply == 0) &  // current total supply is 0\n        (pay_to_mint_price_per_token >= 10000000000000000000),   // price per token >= 10 ETH = 10000000000000000000 wei\n\n    return_type: yes_and_skip_sandbox,  // approve the operation and skip sandbox check\n    return_level: 1,\n    is_before_operation: true, // approve the operation and skip sandbox check\n}\n```\n\n### Example 6: Lock dividend yield rate for 5 years\n\nThe dividend mechanism is designed to distribute dividends to token holders under certain rules:\n\n1. For each `X` purchase transactions, take Y‱ of the total income as the dividendable cash\n2. The `offer_dividend()` operation can be called, which will distribute the dividendable cash to token holders'\n   dividend withdraw balance\n3. The amount of dividends per token holder (X) is calculated by the following\n   formula: `dividend_X = dividendable_cash * dividend_power(X) / total_dividend_power`\n4. After the `offer_dividend()` operation is called, the dividendable cash and dividendable transaction counter will be\n   set to 0, and the dividend withdraw balance of each token holder will be increased by `dividend_X`\n\nTo make sure the dividend yield rate is stable, we can add a plugin to the DARC to lock the dividend yield rate for 5\nyears by limiting the `set_parameters()` function.\n\n***Law 6: The dividend yield rate should be locked > 500‱ (5%) before 2030-01-01.***\n\n```javascript\nconst dividend_yield_rate_law = {\n    condition:\n        (operation == \"set_parameters\") &  // operation is \"set_parameters\"\n        (set_parameters_key == \"dividendPermyriadPerTransaction\") &  // the key is \"dividend_yield_rate\"\n        (set_parameters_value < 500) &  // the value is < 500‱ (5%)\n        (timestamp < 1893477600),  // the timestamp < unix timestamp  2030-01-01 00:00:00 (UTC) \n\n    return_type: no,  // reject the operation\n    return_level: 1,\n    is_before_operation: true, // reject the operation and skip sandbox check\n}\n```\n\n### Example 7: Investment program package\n\nHere is an unofficial example program of **Simple agreement for future equity (SAFE)**, a common investment contract by\na VC firm:\n\n1. The VC firm will pay 1000 ETH (1000000000000 Gwei) cash to the DARC as investment\n2. The VC firm will be granted 100,000,000 level-0 tokens (common stock) and 1 level-2 token (board of members)\n3. The VC firm will be granted the right to disable plugins 5, 6, 7\n4. The VC firm will be granted the right to enable plugins 8, 9, 10, 11\n5. The VC firm will be granted the right to change its role to level-5 (majority shareholder level)\n6. It's recommended to sign and scan a PDF document to record the agreement, upload the PDF document to IPFS, and add\n   the IPFS hash `QmcpxHN3a5HYnPurtuDs3jDfDSg1LPDe2KVBUG4RifcSbC` to the DARC permanent storage array. This can help the\n   emergency agent to verify and fix DARC technical issues if needed.\n\n```javascript\nconst vc_addr = \"0x1234567890123456789012345678901234567890\";  // define my address\n\npay_cash(1000000000000, 0, 1);  // pay 1000 ETH = 1000000000000 Gwei cash\n\nmint_token([vc_addr], [100000000], [0]);  // mint 100,000,000 level-0 tokens (common stock) to VC firm\n\nmint_token([vc_addr], [1], [2]);  // mint a single 2-level token (board of members) to VC firm\n\ndisable_plugins([5, 6, 7], [false, false, false]) // disable previes after-operation plugins 5, 6, 7\n\nenable_plugins([8, 9, 10, 11], [false, false, false, false]) // enable new added plugins 8, 9, 10, which were added before this program\n\nchange_member_role(vc_addr, 5);  // change the role of VC firm to level-5 (majority shareholder level)\n\n/** Finally, sign and scan a SAFE document,\n * upload and pin on IPFS, and add the IPFS hash value to the DARC\n * just in case if DARC needs emergency agent to take over the DARC\n */\nadd_storage(['QmcpxHN3a5HYnPurtuDs3jDfDSg1LPDe2KVBUG4RifcSbC']);\n```\n\n## Building the source\n\nSince Hardhat and OpenZeppelin are used, the project can be built using the following commands:\n\n1. Install dependencies\n\n   We recommend that you use `pnpm` instead of `npm`, but `npm` can also work.\n\n   `pnpm` is a newer package manager that has some advantages over npm. It is faster, more efficient, and disk-space\n   friendly.\n\n    ```shell\n    cd darc-protocol\n    npm install\n    ```\n\n2. Compile the contracts\n\n    ```shell\n    npx hardhat compile\n    ```\n\n3. Run the Darc test network\n\n    ```shell\n    npm run node\n    ```\n\n4. Test contracts\n\n    ```shell\n    npx hardhat test\n    REPORT_GAS=true npm run test\n    ```\n\n5. Deploy contracts\n\n    ```shell\n    npm run deploy\n    ```\n"
        },
        {
          "name": "README_cn.md",
          "type": "blob",
          "size": 23.3681640625,
          "content": "# Decentralized Autonomous Regulated Company (DARC) 去中心化的自动监管公司\n\n这是 Decentralized Autonomous Regulated Company (DARC) 项目的官方代码库。DARC\n是一个项目，旨在创建一个去中心化的自动监管公司，该公司由基于商业法律的插件系统监管。该项目目前处于早期开发阶段，尚未准备好用于生产环境。\n\n[English](./README.md) | 简体中文 | [日本語](./README_ja.md)\n\n## 加入社区\n\nTelegram: [https://t.me/projectdarc](https://t.me/projectdarc)\n\n## 什么是 DARC?\n\nDecentralized Autonomous Regulated Company (去中心化的自动监管公司，英文简称DARC) 是一个公司模型的虚拟机，可以编译部署到任何\nEVM （以太坊虚拟机）兼容的区块链公链上，具有以下特点：\n\n- **多级代币（Multi-level tokens）**,\n  每个级别的代币可以用作通用股份、优先股、特权股、债券、股票期权、董事会、商品代币、非同质化代币（NFT）等等。以上所有代币均可以有不同的价格、投票权和分红权，并且是由公司的插件系统（即法律）来定义；\n- **执行程序（Program）** ，每个执行程序是由一系列的 DARC 指令组成的，包括管理代币、分红、投票、提交法律、提款、购买和其他公司日常操作；\n- **分红机制（Dividend Mechanism）**，根据已有的法律协议和参数，为代币持有者提供分红；\n- **插件即法律（Plugin-as-a-Law）**，插件系统就是 DARC 的公司章程与合约，监督和管理公司所有日常操作。所有公司操作需要经过插件系统，或插件系统定义的投票程序的批准后，才能成功执行。\n\n## By-Law Script（章程语言）\n\nBy-law Script（章程语言）是一个类似于 JavaScript 语法的编程语言，可以用来定义公司的章程、规则、合约和 DARC 上的公司管理操作。例如：\n\n```javascript\nmint_tokens(   // 铸造代币\n    [addr1, addr2, addr3],   // 铸造代币发往的地址\n    [0, 0, 0],   // 代币等级\n    [500, 300, 200]  // 铸造代币数量\n);\n\npay_cash(100000000, 0, 1); // 支付 0.1 ETH 作为客户采购\n\ntransfer_tokens(   // 转让代币\n    [addr1, addr2, addr3],   // 代币转让的目标地址\n    [0, 0, 0],   // 代币等级\n    [100, 100, 200]  // 代币数量\n);\n\nadd_withdraw_cash(10000000);  // 申请 0.01 ETH 的提款\n\nwithdraw_cash_to(  // 把我的账户中的 ETH 提款到对应地址\n    [addr4, addr5],       // 提款地址\n    [10000000, 10000000]  // 提款金额： 0.01 ETH, 0.01 ETH\n);\n\n\n```\n\n以上 By-law Script 代码将被转译并解释运行在 DARC 虚拟机的智能合约上。如果以上代码全部被 DARC\n插件系统批准，那么将会被执行。如果有任何一条指令被插件系统拒绝，那么整个程序（Program）操作都会被拒绝。\n\n如果需要添加插件和投票规则，我们可以简单地写成插件和投票规则，并且通过 `add_voting_rule()` 或 `add_and_enable_plugins()`\n或 `add_plugins()` 操作来发送到 DARC 虚拟机的智能合约上，如果当前的插件系统批准了这些操作，那么这些插件和投票规则将会被部署并立即生效。\n\n下面是一个简单快速的例子。假设我们需要限制大股东（>25%）的代币转让，需要董事会进行全体投票（假设总共5票），并且需要 1 小时内\n100% 的投票通过（5票中必须有5票投票通过）。我们可以通过添加一个新的插件和相应的投票规则到 DARC 虚拟机的智能合约上：\n\n```javascript\nadd_voting_rule(  // 新增投票规则(序号为 5)\n    [\n        {\n            voting_class: [1], // 投票代币等级：1级代币，即公司董事会被要求投票\n            approve_percentage: 99,  // 投票通过需要 >= 99% 的投票权通过\n            voting_duration: 3600,  // 投票时常：1 小时\n            execute_duration: 3600,  // 投票通过后，执行操作的时常：1 小时\n            is_absolute_majority: true,  // 绝对多数投票制（而不是相对多数制）\n        }\n    ]\n);\n\nadd_and_enable_plugins(  // 新增插件并立即生效\n    [\n        {\n            condition: // 定义插件生效条件\n                (operation == \"transfer_tokens\")   // 如果是代币转让操作\n                & (operator_total_voting_power_percentage > 25), // 并且操作者地址的投票权 > 25%\n            return_type: voting_needed,  // 返回类型：需要投票\n            return_level: 100,  // 优先级：100\n            votingRuleIndex: 5 // 使用投票规则序号为 5 的投票规则（即 100% 的董事会成员们必须投票通过）\n            note: \"100% Approval is needed by board members to transfer tokens by major shareholders (>25%)\"\n            is_before_operation: false,  // 是否在沙箱（sandbox）试运行之前检查执行：否（这个插件要求在沙箱（sandbox）试运行之后检查执行）\n        }\n    ]\n);\n```\n\n执行以上的 By-law Script 程序后，DARC VM 合约将添加一个新的插件和投票规则，并且插件将立即生效（如果存在与 add_voting_rule()\n和 add_and_enable_plugins() 相关的任何投票程序，则插件将在投票流程通过后生效）。如果操作员（addr1）尝试将代币转移给\naddr2，插件将检查条件并返回 voting_needed 给 DARC VM 合约，DARC VM\n合约将要求董事会（一级代币所有者）进行投票。如果董事会批准该操作，则该操作将在沙盒中执行，否则该操作将被拒绝。例如，如果触发了3个投票规则，则投票操作将是：\n\n```javascript\nvote([true, true, true])\n```\n\n如果现有的投票规则和插件批准了投票过程，则新程序将被批准在下一个执行等待期（例如1小时）内执行，程序所有者或任何其他成员可以在下一个1小时内执行该程序，否则该程序将被忽略并从待处理列表中移除。\n\n## “插件即法律”（\"Plugin-as-a-Law\"）\n\n在 DARC 中，法律是由以下伪代码来定义的：\n\n```javascript\nif (插件条件 == true) {\n    插件决定 = 批准 / 拒绝 / 等待投票\n}\n```\n\n每个插件中，都包含一个条件树（condition expression\ntree）和一个决策（返回类型）。当在程序（Program）运行之前提交程序时，如果条件树被评估为真(true)，则插件将做出决策：允许、拒绝或要求进行投票。例如：\n\n### 例1: 反稀释股权\n\n在公司法律中，反稀释股份是一个基本机制，可以防止公司（也包括 DAO 和其他链上的“代币经济学”）发行过多的股份，从而稀释削弱掉现有股东们的股权和利益。在\nDARC 中，公司和早期投资者们可以定义一个“反稀释股份”的法律，并且同时制定一个特定的流程来在适当时候废除掉这条法律。\n\n***法律条款1 (反稀释股权法): 股东X应当永久持有该公司的10%股份***\n\n*插件设计思路: 如果操作者（operation）增发了0级代币（公司普通股），则插件应该检查代币的持有者（token\nownerships），X应该永远保持10%的总投票权和10%的分红权*\n\n在 By-law Script 的语法中，我们可以如下定义这个条件和法律:\n\n```javascript\n// 定义 X 的地址\nconst x_addr = \"0x1234567890123456789012345678901234567890\";\n\n// 定义插件\nconst anti_delutive = {\n\n    // 定义出发条件\n    condition:\n        ((operation == \"mint_tokens\")             // 如果正在“增发代币”\n            | (operation == \"pay_to_mint_tokens\"))   // 或者正在“付费增发代币”\n        &                                          // 并且       \n        ((total_voting_power_percentage(x) < 10)    // X的总投票权 < 10%\n            | (total_dividend_power_percentage(x) < 10)),   // 或者 X的总分红权 < 10%\n\n    // 定义插件决策：否决该操作\n    return_type: NO,\n\n    // 定义优先级：100\n    return_level: 100,\n\n    // 是否在沙箱（sandbox）试运行之前检查执行：否（这个插件要求在沙箱试运行之后检查执行）\n    is_before_operation: false,\n};\n```\n\n由于这个插件需要检查代币所有权的状态，因此应该在 DARC\n沙盒中执行操作后执行插件。如果插件的条件被评估为真，则当这个程序（Program）在沙箱（sandbox）执行后会被拒绝，并且该操作将被拒绝在真实环境中执行。否则，将允许“铸造新代币”执行。\n\n当将此插件添加到 DARC 中时，操作员（operator，也就是当前程序的提交者）必须铸造额外的代币并将其发送到 x_addr 地址，以满足上述的\n**法律条款1**，否则操作将被拒绝。例如，DARC 只有一级代币（级别 0，投票权 = 1，红利权 = 1），股权情况如下：\n\n| 股东     | 持股数量     | 百分比      |\n|--------|----------|----------|\n| CEO    | 400      | 40%      |\n| CTO    | 300      | 30%      |\n| CFO    | 200      | 20%      |\n| VC X   | 100      | 10%      |\n| **总共** | **1000** | **100%** |\n\n如果操作员想要铸造 200 个代币并将它们发放给 VC Y，则操作员必须铸造 20 个代币并将它们发送到 x_addr 地址，以满足上述的*\n*法律条款1**，否则该操作将被拒绝。以下是 VC Y 提供的示例投资方案：\n\n```javascript\npay_cash(1000000000000)  // 支付 1000 ETH 给 DARC\nmint_tokens(20, 0, x_addr)  // 增发 20 个 0 级代币给 x_addr\nmint_tokens(180, 0, y_addr)  // 增发 180 个 0 级代币给 y_addr\nadd_and_enable_plugin([new_law_1, new_law_2, new_law_3])  // VC Y 提出了新的法律\n```\n\n在以上操作后，股权情况如下：:\n\n| 股东     | 持股数量     | 百分比    |\n|--------|----------|--------|\n| CEO    | 400      | 33.33% |\n| CTO    | 300      | 25%    |\n| CFO    | 200      | 16.67% |\n| VC X   | 120      | 10%    |\n| VC Y   | 180      | 15%    |\n| **总共** | **1200** | 100%   |\n\n与此同时，另一个插件也应该添加到 DARC 中，以定义“废除法律1”的法律流程：\n\n***法律条款1.1 (法律条款1附录): 如果废除法律1和法律1附录（当前的法律），当且仅当操作者是 X***\n\n*插件设计思路: 如果操作是“disable_plugins”，并且企图被废除的法律条款序号是 `id == 1` 或者 `id == 2`，并且操作者不是\nX，则插件应该拒绝该操作（假设反稀释法律索引为 1，法律1附录索引为 2，两者都是在操作之前的插件）*\n\n```javascript\nconst law_1_appendix = {\n\n    // 定义法律触发条件\n    condition:\n        (operation == \"disable_plugins\")\n        & ((disable_after_op_plugin_id == 1) | (disable_after_op_plugin_id == 2))\n        & (operator != x_addr),\n\n    // 定义插件决策\n    return_type: no,\n\n    // 定义优先级\n    return_level: 100,\n\n    // 在沙箱试运行之前检查执行：是\n    is_before_operation: true,\n};\n```\n\n### 例2: 对赌协议（Bet-on Agreement，或者称为Valuation-Adjustment Mechanism(VAM) Agreement）\n\n***法律条文2: 如果在2035年1月1日之前，总共营收（revenue）少于1000 ETH，那么股东X可以获得超过75%的投票权和90%的分红权***\n\n***Law2: If total revenue < 1000 ETH by 2035/01/01, shareholder X can take over 75% of total voting power and 90% of\ndividend power.***\n\n*插件设计思路：在沙箱（sandbox）操作之后，检查以下条件：*\n\n- *时间戳（timestamp）>= 2035/01/01*\n\n- *自 2000/01/01 起的总收入 < 1000 ETH*\n\n- *操作为 \"mint_tokens\"*\n\n- *x 的总投票权 <= 75%*\n\n- *x 的红利权 <= 90%*\n\n*那么插件应该批准该操作*\n\n在 By-law 脚本中，我们可以定义上述插件如下：\n\n```javascript\nconst bet_on_2 = {\n\n    // 定义该插件的触发条件\n    condition:\n        (timestamp >= toTimestamp('2035/01/01')) &\n        (revenue_since(946706400) < 1000000000000) & // 1000000000000 Gwei = 1000 ETH\n        (operation == \"mint_tokens\") &\n        (total_voting_power_percentage(x) < 75) &\n        (total_dividend_power_percentage(x) < 90),\n\n    // 定义最终决策\n    return_type: yes,\n\n    // 定义优先级\n    return_level: 100,\n\n    // 在沙箱试运行之后检查执行：是\n    is_before_operation: false,\n}\n```\n\n### 例3: 员工工资\n\n***法律条文3: 对于级别为 X 的员工，每个月可以领 10 ETH 现金作为工资***\n\n*插件设计思路：如果操作是“添加可提款现金”，并且添加现金数量少于 10 ETH，并且该地址操作员（operator）上次操作在 30\n天之前，那么这个操作应该在沙箱（sandbox）运行之前直接批准，并且跳过沙箱检查*\n\n在 By-law Script 程序中，我们可以定义具有以下条件的插件（例如，级别 X = 2 可以每 30 天提取 10 ETH）：\n\n```javascript\nconst payroll_law_level_2 = {\n    condition:\n        (operation == \"add_withdrawable_cash\") &   // 操作指令是 \"add withdrawable cash\"\n        (member_role_level == 2) &   // operator 操作程序的作者是级别为 2 的成员\n\n        // 并且操作员上次执行 “add_withdrawable_cash” 的时间是 30 天 = 2592000 秒\n        (operator_last_operation_window(\"add_withdrawable_cash\") >= 2592000) &\n        // 并且本次添加金额 < 10000000000 Gwei = 10 ETH\n        (add_withdrawable_cash_amount <= 10000000000),\n    return_type: yes_and_skip_sandbox,\n    return_level: 1\n    is_before_operation: true, //在沙箱检查之前直接允许\n}\n```\n\n使用上述插件，操作员（即员工）可以将可提取现金添加到员工帐户中，金额小于或等于 10 ETH，上一个操作至少在 30\n天之前。插件将批准操作并跳过沙盒检查。当员工地址被禁用、从角色级别 X 中删除或其他优先级更高的插件拒绝操作时，这些操作将被拒绝。\n\n### 例4: 投票与立法\n\n\"对于日常运营，董事会可以定义为一组地址，并使用投票机制做出决策。例如，让我们为以下情景设计投票机制：\n\n1. 对于拥有超过10％总投票权的地址X，能通过铸造1个代币（代币级别为2，也就是董事会投票代币）的方式，添加到董事会，但前提是该行为经过董事会三分之二成员的批准（即依据投票规则1进行投票）。\n\n```javascript\nconst add_board_member = {\n    condition:\n        (operation == \"mint_tokens\") &   // 操作等于 \"增发代币\"\n        (mint_tokens_level == 2) &  // 增发代币级别为2\n        (mint_tokens_amount == 1) &  // 增发数量为1\n        (operator_total_voting_power_percentage >= 10),   // 操作者拥有的总投票权大于等于10%\n\n    // 插件决策：需要投票\n    return_type: voting_needed,\n    voting_rule: 1,  // 在决策投票规则1下，超过2/3的董事会成员批准该操作，则该操作被批准\n    return_level: 100,\n    is_before_operation: false, // 沙箱检查之后才进行投票\n}\n```\n\n2. 任何持有超过所有投票权7%的用户地址，都可以提交`enable_plugins()`指令，但需要获得所有董事会成员100%的批准。每个用户可以每隔10天尝试使用这条指令一次。\n\n```javascript\nconst enable_plugin = {\n    condition:\n        (operation == \"enable_plugins\") &   // 操作是 \"enable_plugins()\"\n        (operator_total_voting_power_percentage >= 7) &   // 该用户拥有的总投票权大于等于7%\n        (operator_last_operation_window(\"enable_plugin\") >= 864000),  //每个用户可以每 864000 seconds (10 days) 天尝试一次\n\n    return_type: voting_needed,\n    voting_rule: 2,  // 在投票规则2下，超过所有董事会成员的100%批准该操作，则该操作被批准\n    return_level: 100,\n    is_before_operation: false, // 沙箱检查之后才进行投票\n}\n```\n\n3. 要禁用插件2、3和4，程序操作者需要持有总投票权的至少20%，并且操作需要获得所有普通股代币（级别为0的代币）所有投票人的70%的相对多数（投票规则2）批准。对于DARC的每个成员，该操作每15天（1296000秒）可以执行一次。\n\n```javascript\nconst disable_2_3_4 = {\n    condition:\n        (operation == \"disable_plugins\") &   // 发起操作是 \"disable_plugins\"\n        (\n            disable_after_op_plugin_id == 2\n            | disable_after_op_plugin_id == 3\n            | disable_after_op_plugin_id == 4\n        ) &  // 废除插件2、3 或者 4\n        (operator_total_voting_power_percentage >= 20) &   // 操作者拥有的总投票权大于等于20%\n        (operator_last_operation_window(\"disable_plugins\") >= 1296000),  // 每个用户可以每 1296000 seconds (15 days) 天尝试一次\n    return_type: voting_needed,\n    voting_rule: 3,  // 在投票规则3下，超过所有普通股代币（级别为0的代币）所有投票人的70%的相对多数批准该操作，则该操作被批准\n    is_before_operation: false, // 沙箱检查之后才进行投票\n}\n```\n\n### 例5: 多级代币：商品代币和非同质化代币（NFT）\n\n以下是如何设计一个拥有不同投票和分红权力级别的代币的示例。投票权(voting power)和分红权(dividend power)\n用于计算每个代币持有者的投票权和分红权。以下是一个代币级别的表格：\n\n| 等级  | 代币                                   | 投票权 | 分红权 | 总币供应量   |\n|-----|--------------------------------------|-----|-----|---------|\n| 0   | 0级普通股份（Level-0 Common Stock）         | 1   | 1   | 100,000 |\n| 1   | 1级特别表决权股份（Level-1 Stock）             | 20  | 1   | 10,000  |\n| 2   | 董事会成员票（Board of Directors）           | 1   | 0   | 5       |\n| 3   | 行政人员投票权（Executives）                  | 1   | 0   | 5       |\n| 4   | 非投票股份（Non-Voting Shares）             | 0   | 1   | 200,000 |\n| 5   | 商品代币A（Product Token A） 价格是0.01 ETH/个 | 0   | 0   | ∞       |\n| 5   | 商品代币B（Product Token B） 价格是 10 ETH/个  | 0   | 0   | ∞       |\n| 7   | Non-Fungible Token #1                | 0   | 0   | 1       |\n| 8   | Non-Fungible Token #2                | 0   | 0   | 1       |\n| 9   | Non-Fungible Token #3                | 0   | 0   | 1       |\n| 10  | Non-Fungible Token #4                | 0   | 0   | 1       |\n| 11  | Non-Fungible Token #5                | 0   | 0   | 1       |\n| ... | ...                                  | ... | ... | ...     |\n\n为了支付服务或购买产品，客户可以使用`pay_cash()`直接支付服务费用，或使用 `pay_to_mint_tokens()`作为支付方式并获得商品代币/非同质化代币（NFT）。\n\n这里给一个简单的例子，来定义同质化商品代币A以及NFT的价格法则和总代币供应量。\n\n```javascript\nconst product_token_A_price_law = {\n    condition:\n        (operation == \"pay_to_mint_tokens\") &   // 操作指令是 \"pay_to_mint_tokens\"\n        (pay_to_mint_tokens_level == 5) &  // 代币级别是5\n        (pay_to_mint_price_per_token >= 10000000000000000),   // 每个代币价格 >= 0.01 ETH = 10000000000000000 wei\n\n    return_type: yes_and_skip_sandbox,  // 准许操作并跳过沙箱检查\n    return_level: 1,\n    is_before_operation: true, // 在沙箱运行检查前执行本插件\n}\n\nconst NFT_price_law = {\n    condition:\n        (operation == \"pay_to_mint_tokens\") &   // 操作指令是 \"pay_to_mint_tokens\"\n        (pay_to_mint_tokens_level >= 7) &  // 代币级别是7或者更高\n        (pay_to_mint_token_amount == 1) &  // 代币只能一次性付费铸造一个\n        (pay_to_mint_current_level_total_supply == 0) &  // 目前总代币供应量为0\n        (pay_to_mint_price_per_token >= 10000000000000000000),   // 每枚代币价格 >= 10 ETH = 10000000000000000000 wei\n\n    return_type: yes_and_skip_sandbox,  // 准许操作并跳过沙箱检查\n    return_level: 1,\n    is_before_operation: true, // 在沙箱运行检查前执行本插件\n}\n```\n\n### 例6: 在 5 年内锁定分红比率\n\n股息机制是根据一定规则向代币持有者分配股息的设计：\n\n每进行 X 笔购买交易，将总收入的 Y‱ 设为可分配股息的现金\n可以调用 offer_dividend() 操作，将可分配股息的现金分配给代币持有者的股息提取余额\n每个代币持有者（X）的股息金额计算公式如下：dividend_X = dividendable_cash * dividend_power(X) / total_dividend_power\n在调用 offer_dividend() 操作后，可分配股息的现金和可分配股息交易计数器将被设置为0，并且每个代币持有者的股息提取余额将增加\ndividend_X\n为了确保股息收益率稳定，我们可以添加一个插件到 DARC 中，通过限制 set_parameters() 函数来锁定股息收益率5年。\n\n***法律条文6: 在 2030-01-01 之前，本实体的收入分红比率必须保持 > 500‱ (5%) 以上***\n\n```javascript\nconst dividend_yield_rate_law = {\n    condition:\n        (operation == \"set_parameters\") &  // 操作指令是 \"set_parameters\"\n        (set_parameters_key == \"dividendPermyriadPerTransaction\") &  // 设置参数的键值为 \"dividend_yield_rate\"\n        (set_parameters_value < 500) &  // the value is < 500‱ (5%)\n        (timestamp < 1893477600),  // 时间戳小于 < unix timestamp  2030-01-01 00:00:00 (UTC) \n\n    return_type: no,  // 拒绝这个操作\n    return_level: 1,\n    is_before_operation: true, // 在进入沙箱检查前执行本插件\n}\n```\n\n### 例7: 一个投资计划项目\n\n这里提供一个非正式的**未来股权简单协议（Simple agreement for future equity，或者简称SAFE）**\n。这种协议经常被风险投资机构用来当作投资合同:\n\n1. 本 VC 同意支付 1000 ETH (1000000000000 Gwei) 现金作为投资\n2. 本 VC 将会获得 100,000,000 枚 level-0 代币 (普通股份) 和 1 枚 level-2 代币 (作为董事会成员投票权代币)\n3. 本 VC 将会被允许批准废除已有的 5, 6, 7 三条法律\n4. 本 VC 将会被允许批准提交 8, 9, 10, 11 四条法律，并当即生效\n5. 本 VC 将会被允许在公司名录概念中加入为 5 级成员权限 (主要大股东成员权限)\n6. 我们通常建议扫描并签字一份电子版的文字 PDF 文档，作为本次交易的记录，上传这份 PDF 文档到 IPFS 上面，并且把 IPFS 对应的\n   hash value `QmcpxHN3a5HYnPurtuDs3jDfDSg1LPDe2KVBUG4RifcSbC` 加入到 DARC 的永久存储数组中。这样可以帮助紧急代理人（Emergency\n   Agent）在需要的时候，验证并修复 DARC 技术问题。\n\n```javascript\nconst vc_addr = \"0x1234567890123456789012345678901234567890\";  // 定义 VC 地址\n\npay_cash(1000000000000, 0, 1);  // 支付 1000 ETH = 1000000000000 Gwei cash\n\nmint_token([vc_addr], [100000000], [0]);  // 增发 100,000,000 level-0 tokens (common stock) 给 VC\n\nmint_token([vc_addr], [1], [2]);  // 增发一枚 2-level token (董事会成员) 给 VC\n\ndisable_plugins([5, 6, 7], [false, false, false]) // 取消合同 5, 6, 7\n\nenable_plugins([8, 9, 10, 11], [false, false, false, false]) // 增加合同 8, 9, 10, 11\n\nchange_member_role(vc_addr, 5);  // 把 VC 加入到公司名录概念中，作为 5 级成员权限 (主要大股东成员权限)\n\n// 把 PDF 文档的 IPFS hash 加入到 DARC 的永久存储数组中\nadd_storage(['QmcpxHN3a5HYnPurtuDs3jDfDSg1LPDe2KVBUG4RifcSbC']);\n```\n\n## 编译源代码\n\n由于本项目使用了 Hardhat 和 Openzeppelin，所以你需要安装 Node.js 和 npm。然后执行以下命令：\n\n1. 安装依赖\n\n   我们建议您使用 `pnpm` 而不是 `npm`，但 `npm` 也可以工作。  \n   `pnpm` 是一个较新的包管理器，相较于 npm 具有一些优势。它更快、更高效，并且节省磁盘空间。\n\n    ```shell\n    cd darc-protocol\n    npm install\n    ```\n\n2. 编译智能合约\n\n    ```shell\n    npx hardhat compile\n    ```\n\n3. 运行 Darc 测试网络\n    ```shell\n    npm run node\n    ```\n\n4. 测试合约\n\n     ```shell\n    npm run test\n    REPORT_GAS=true npm run test\n     ```\n\n5. 部署合约\n    ```shell\n    npm run deploy\n    ```\n"
        },
        {
          "name": "README_ja.md",
          "type": "blob",
          "size": 27.2060546875,
          "content": "# Decentralized Autonomous Regulated Company (DARC)\n\nDecentralized Autonomous Regulated Company (DARC) プロジェクトの公式リポジトリへようこそ。DARC は、\n商法に基づくプラグインシステムによって規制される分散型自律企業の創設を目指すプロジェクトである。\nこのプロジェクトは現在、開発の初期段階にあり、まだ生産に使用できる段階ではありません。\n\n[English](./README.md) | [简体中文](./README_cn.md) | 日本語\n\n## コミュニティに参加\n\nTelegram: [https://t.me/projectdarc](https://t.me/projectdarc)\n\n## DARC とは?\n\nDecentralized Autonomous Regulated Company (DARC) は、EVM 互換のブロックチェーンにコンパイルしてデプロイできる企業仮想マシンで、次のような特徴があります:\n\n- **Multi-level tokens** 各レベルのトークンは、普通株式、優先株式、転換社債、取締役会、製品トークン、非可菌トークン（NFT）として使用することができ、価格、議決権、配当権は会社のプラグイン（法）システムによって定義されます。\n- **Program** トークンの管理、配当、投票、立法、購入、現金の引き出し、その他の企業運営を含む一連のDARC指示で構成される。\n- **Dividend Mechanism** 一定の規則に従ってトークン保有者に配当金を分配する。\n- **Plugin-as-a-Law** プラグインシステムは、すべてのオペレーションを監督する規約や商業契約の役割を果たす。\n  会社の運営はすべて、プラグインシステムまたはそれに対応する投票プロセスによって承認される必要がある。\n\n## By-Law Script\n\nBy-law Script は JavaScript のようなプログラミング言語であり、DARC 上での会社の商業ルールやオペレーションを定義するために使用されます。例えば:\n\n```javascript\nmint_tokens(   // ミントのトークン操作\n    [addr1, addr2, addr3],   // トークンアドレス\n    [0, 0, 0],   // トークンクラス\n    [500, 300, 200]  // トークン数\n);\n\npay_cash(100000000, 0, 1); // 0.1 ETH を購入代金として支払う\n\ntransfer_tokens(   // 転送トークン操作\n    [addr1, addr2, addr3],   // トークンアドレス\n    [0, 0, 0],   // トークンクラス\n    [100, 100, 200]  // トークン数\n);\n\nadd_withdraw_cash(10000000);  // 0.01 ETH を引き出し残高に追加する\n\nwithdraw_cash_to(  // 自分の口座から他のアドレスに現金を引き出す\n    [addr4, addr5],       // 現金を addr4、addr5 に引き出す\n    [10000000, 10000000]  // 引き出し額 0.01 ETH, 0.01 ETH\n);\n\n\n```\n\n上記付則のスクリプトはコードジェネレーターで変換され、対応する DARC の VM 契約に送られます。プラグインシステムが承認すれば、DARC はプログラムを実行します。\nDARC にプラグインと投票ルールを追加するには、単純にプラグイン条件と投票ルールを組み合わせ `add_voting_rule()`、`add_and_enable_plugins()`、`add_plugins()` の操作で送信します\nそして、現在のプラグインシステムがその操作を承認すれば、即座にデプロイされ、有効になる。\n\nここで簡単な例を挙げます。取締役会にオールハンド投票（全部で 5 つのトークンを想定）を求めることで、大株主（25％ 以上）によるトークンの譲渡を制限する必要があり、1 時間以内に 100％ の承認（5 人中 5 人）が必要だとします。\nDARC VM 契約に新しいプラグインと対応する投票ルールを追加することができます:\n\n```javascript\nadd_voting_rule(  // 投票ルールを追加する（インデックス 5 として）\n    [\n        {\n            voting_class: [1], // 投票トークンクラス: 1、レベル 1 のトークン所有者（取締役会）には投票義務がある\n            approve_percentage: 99,  // 承認には 99％ の議決権が必要\n            voting_duration: 3600,  // 投票時間: 1 時間（3600 秒）\n            execute_duration: 3600,  // 実行保留期間: 1 時間（3600 秒）\n            is_absolute_majority: true,  // 相対多数ではなく絶対多数が必要\n        }\n    ]\n)\n\nadd_and_enable_plugins(   // プラグインの追加と有効化（インデックス 7 と同様）\n    [\n        {\n            condition:  // 条件を定義する:\n                (operation == \"transfer_tokens\")   // 操作が transfer_tokens の場合\n                & (operator_total_voting_power_percentage > 25),  // かつ addr1 の議決権 >25\n            return_type: voting_needed,  // 戻り値の型: 要投票\n            return_level: 100,  // 優先度: 100\n            votingRuleIndex: 5 // 投票規則インデックス 5（取締役会に投票を依頼し、100％ 賛成しなければならない）\n            note: \"100% Approval is needed by board members to transfer tokens by major shareholders (>25%)\"\n            is_before_operation: false,  // サンドボックス内で操作が実行された後、プラグインをチェックする\n        }\n    ]\n)\n```\n\n上記のBy-Lawスクリプトが実行されると、DARC VMコントラクトは新しいプラグインと投票規則を追加し、プラグインは直ちに有効となる\n（`add_voting_rule()` と `add_and_enable_plugins()` に関連する投票手続きが存在する場合、プラグインは投票手続きが承認された後に有効となる）。\nオペレータ(`addr1`)が addr2 にトークンを転送しようとすると、プラグインはその条件をチェックして `voting_needed` を DARC VM 契約に返し、\nDARC VM 契約は理事会(レベル 1 のトークン所有者)に投票を依頼する。理事会が承認すれば、サンドボックス内で作戦が実行され、そうでなければ作戦は却下される。\n例えば、3 つの投票ルールがトリガーされた場合、投票操作は次のようになる:\n\n```javascript\nvote([true, true, true])\n```\n\n投票プロセスが既存の投票ルールとプラグインによって承認された場合、新しいプログラムは次の実行保留期間（この例では 1 時間）\nでの実行が承認され、プログラム所有者または他のメンバーは次の1時間以内にプログラムを実行することができます。\n\n## \"Plugin-as-a-Law\"\n\nDARC の法的規定は以下の擬似コードで定義される:\n\n```javascript\nif (plugin_condition == true) {\n    plugin_decision = allows / denies / requires a vote\n}\n```\n\n各プラグインには、条件式ツリーと対応するデシジョン（戻り値の型）が含まれる。実行前にプログラムがサブミットされている間に\n条件ツリーが真と評価されると、プラグインは許可、拒否、または投票を要求する決定を下す。例えば:\n\n### 例 1: 希薄化防止株式\n\n希薄化防止株式とは、企業（DAO や他のオンチェーン「トークノミクス」を含む）が株式を発行しすぎて、既存株主の所有権が希薄化するのを防ぐための基本的な仕組みである。\nDARC では、企業とアーリーステージの投資家は \"反希薄化株式\" の法的規定を定義することができ、一定のプロセスを経て法的規定を廃止することができる。\n\n***法的規定 1 (希薄化防止株式): 株主 X は常に全株式の 10％ を保有しているはずである。***\n\n*プラグインの設計: オペレーションが新しいレベル 0 トークンを鋳造する場合、プラグインはトークンの所有者の状態をチェックし、\nX はオペレーション実行後、常に 10％ の総議決権および 10％ の配当権を最低限維持すべきである。*\n\nBy-Law script では、以下の条件でプラグインを定義することができる:\n\n```javascript\n// X のアドレスを定義する\nconst x_addr = \"0x1234567890123456789012345678901234567890\";\n\n// プラグインを定義する\nconst anti_delutive = {\n\n    // トリガー条件を定義する\n    condition:\n        ((operation == \"mint_tokens\")             // オペレータが新しいトークンをミントしている場合\n            | (operation == \"pay_to_mint_tokens\"))   // またはオペレータが新しいトークンをミントするために支払っている\n        &                                          // 及び\n        ((total_voting_power_percentage(x) < 10)    // X の総議決権 <10\n            | (total_dividend_power_percentage(x) < 10)),   // または X の配当総額 <10\n\n    // 決断の定義: 操作の拒否\n    return_type: NO,\n\n    // 優先順位の定義: 100\n    return_level: 100,\n\n    // サンドボックス内で操作が実行された後、プラグインをチェックする\n    is_before_operation: false,\n}\n```\n\nこのプラグインはトークン所有権の状態をチェックするため、DARCのサンドボックス内で操作が実行された後に実行されなければならない。\nプラグインの条件がtrueと評価された場合、プラグインはサンドボックス内で実行した後に操作を拒否し、実際の環境での実行は拒否されます。\nそうでなければ、\"minting new tokens\" の実行が許可される。\n\nこのプラグインが DARC に追加された場合、オペレーター（現在のプログラムの作者）は、上記の**法的規定 1** を満たすために、アドレス `x_addr` に余分なトークンを追加しなければならない。\n例えば、DARC には 1 つのレベルのトークンしかなく（レベル 0、議決権 = 1、配当権 = 1）、株式の所有権は次のとおりである:\n\n| 株式所有者     | トークン数         | 比率       |\n|--------------|------------------|------------|\n| CEO          | 400              | 40%        |\n| CTO          | 300              | 30%        |\n| CFO          | 200              | 20%        |\n| VC X         | 100              | 10%        |\n| **合計**     | **1000**         | **100%**   |\n\nオペレータが 200 トークンをミントして VC Y に発行したい場合、上記の**法的規定 1** を満たすために、オペレータはアドレス `x_addr` に 20 トークンを鋳造しなければならない。\n以下は VC Y による投資プログラムのサンプルである:\n\n```javascript\npay_cash(1000000000000)  // DARC に 1000 ETH を支払う\nmint_tokens(20, 0, x_addr)  // レベル 0 トークン 20 個をアドレスx_addr にミントする\nmint_tokens(180, 0, y_addr)  // レベル 0 トークン 180 個をアドレスy_addr にミントする\nadd_and_enable_plugin([new_law_1, new_law_2, new_law_3])  // VC Yによる投資法\n```\n\n手術後、株式の所有権は次のようになる:\n\n| 株式所有者     | トークン数         | 比率       |\n|--------------|------------------|------------|\n| CEO          | 400              | 33.33%     |\n| CTO          | 300              | 25%        |\n| CFO          | 200              | 16.67%     |\n| VC X         | 120              | 10%        |\n| VC Y         | 180              | 15%        |\n| **合計**     | **1200**         | 100%       |\n\nまた、\"廃止法 1\"の立法を定義するために、DARC に別のプラグインを追加すべきである:\n\n***法的規定 1.1(法的規定 1 Appendix): 法的規定 1 と法則付則 1（現行法的規定）の両方が廃止できるのは、オペレータが X である場合に限られる***\n\n*プラグインの設計: 操作が \"disable_plugins\" で、無効にするプラグインが `id == 1` または `id == 2` で、操作者が X でない場合、プラグインは操作を拒否するはずです（希釈防止法のインデックスが 1、付録法のインデックスが 2 で、どちらも操作前のプラグインであると仮定します）*\n\n```javascript\nconst law_1_appendix = {\n\n    // トリガー条件を定義する\n    condition:\n        (operation == \"disable_plugins\")\n        & ((disable_after_op_plugin_id == 1) | (disable_after_op_plugin_id == 2))\n        & (operator != x_addr),\n\n    // 決断の定義\n    return_type: no,\n\n    // 優先度の定義\n    return_level: 100,\n\n    // サンドボックスの前に操作を拒否する\n    is_before_operation: true,\n}\n```\n\n### 例 2: ベットオン契約／評価調整メカニズム（VAM）契約\n\n***法的規定: 2035年1月1日までに総収入が 1000 ETH 未満であれば、株主 X は総議決権の 75％、配当権の 90％ を握ることができる。***\n\n*プラグインの設計: サンドボックス内で実行した後、以下の条件をチェックする:*\n\n- *タイムスタンプ >= 2035/01/01*\n\n- *2000年1月1日以降の収入 < 1000 ETH*\n\n- *操作は \"mint_tokens\"*\n\n- *X の総議決権 <= 75%*\n\n- *x の配当力 <= 90%*\n\n*その場合、プラグインはその操作を承認しなければならない*\n\nBy-law script では、上記のプラグインを次のように定義できる:\n\n```javascript\nconst bet_on_2 = {\n\n    // トリガー条件を定義する\n    condition:\n        (timestamp >= toTimestamp('2035/01/01')) &\n        (revenue_since(946706400) < 1000000000000) & // 1000000000000 Gwei = 1000 ETH\n        (operation == \"mint_tokens\") &\n        (total_voting_power_percentage(x) < 75) &\n        (total_dividend_power_percentage(x) < 90),\n\n    // 決断の定義\n    return_type: yes,\n\n    // 優先度の定義\n    return_level: 100,\n\n    // サンドボックスで実行後、操作を承認する\n    is_before_operation: false,\n}\n```\n\n### 例 3: 従業員給与計算\n\n***法的規定 3: ロールレベル X の従業員の給与は月 10 ETH でなければならない。***\n\n*プラグインの設計: 操作が \"add withdrawable cash\" であり、金額が 10 ETH 以下であり、最後の操作が少なくとも 30 日前である場合、この操作は承認され、サンドボックスのチェックをスキップする必要があります*\n\nBy-law script では、以下の条件でプラグインを定義することができます（例えば、レベル X = 2 は、30 日あたり 10 ETH を引き出すことができます）:\n\n```javascript\nconst payroll_law_level_2 = {\n    condition:\n        (operation == \"add_withdrawable_cash\") &   // 操作は \"add withdrawable cash\"\n        (member_role_level == 2) &   // オペレータアドレスがロールレベル  2である\n\n        // 現金を加える < 30 日ごとに = 2592000 秒\n        (operator_last_operation_window(\"add_withdrawable_cash\") >= 2592000) &\n        // 毎回 < 10000000000 Gwei = 10 ETH を口座に追加する\n        (add_withdrawable_cash_amount <= 10000000000),\n\n    // 操作を承認し、サンドボックスチェックをスキップする\n    return_type: yes_and_skip_sandbox,\n    return_level: 1\n    is_before_operation: true,\n}\n```\n\n上記のプラグインを使用すると、オペレータは従業員のアカウントに 10 ETH 以下の金額で引き出し可能な現金を追加することができます。\nプラグインは操作を承認し、サンドボックスチェックをスキップします。従業員アドレスが無効化された場合、ロールレベル X から削除された場合、\nまたは優先順位の高い他のプラグインが操作を拒否した場合、これらの操作は拒否されます。\n\n### 例 4: 投票と法案\n\n日常業務では、取締役会をアドレスのグループとして定義し、議決権行使メカニズムを使って意思決定を行うことができる。\n例えば、次のようなシナリオで投票メカニズムを設計する:\n\n1. 総議決権の 10％ 以上を持つアドレス X は、全理事会メンバーの 2/3 がその行動を承認した場合に限り、\n   1 トークン（レベル 2、理事会投票トークン）を鋳造することで理事会に加えることができる（投票ルール 1）。\n\n```javascript\nconst add_board_member = {\n    condition:\n        (operation == \"mint_tokens\") &   // 操作は \"mint_tokens\"\n        (mint_tokens_level == 2) &  // トークンレベルは 2\n        (mint_tokens_amount == 1) &  // 量は 1\n        (operator_total_voting_power_percentage >= 10),   // 事業者の住所が総議決権の 10% 以上を保有すること\n    return_type: voting_needed,\n    voting_rule: 1,  // 議決権行使ルール 1 では、全取締役の 2/3 以上の賛成があった場合にのみ承認される\n    return_level: 100,\n    is_before_operation: false, // サンドボックスで実行した後に判断する\n}\n```\n\n2. 全投票数の 7% 以上の投票権を持つ運営者は、`enable_plugins()` を提出することができ、全理事の 100% の承認を得る必要があります。\n   各オペレータは 10 日ごとにプラグインの有効化を試みることができる。\n\n```javascript\nconst enable_plugin = {\n    condition:\n        (operation == \"enable_plugins\") &   // 操作は \"enable_plugins\"\n        (operator_total_voting_power_percentage >= 7) &   // 事業者の住所が総議決権の 7％ 以上を保有していること\n        (operator_last_operation_window(\"enable_plugin\") >= 864000),  // 各オペレーターは、864000 秒（10 日間）に一度、プラグインを有効にしようとすることができます\n\n    return_type: voting_needed,\n    voting_rule: 2,  // 議決権行使ルール 2 では、全理事会メンバーの 100％ が承認した場合にのみ、その事業が承認される\n    return_level: 100,\n    is_before_operation: false, // サンドボックスで実行した後に判断する\n}\n```\n\n3. プラグイン 2,3,4 を無効化するためには、運営者が総議決権の 20% 以上を保有し、かつ、相対多数決（議決権行使ルール 2）として\n   全普通株式トークン（レベル 0）投票者の 70% の賛成を得る必要がある。DARC の各メンバーについて、この操作は 15 日（1296000 秒）に 1 回実行できる。\n\n```javascript\nconst disable_2_3_4 = {\n    condition:\n        (operation == \"disable_plugins\") &   // 操作は \"disable_plugins\"\n        (\n            disable_after_op_plugin_id == 2\n            | disable_after_op_plugin_id == 3\n            | disable_after_op_plugin_id == 4\n        ) &  // プラグイン 2,3,4 を操作後に無効にする\n        (operator_total_voting_power_percentage >= 20) &   // 事業者の住所が総議決権の 20% 以上を保有すること\n        (operator_last_operation_window(\"disable_plugins\") >= 1296000),  // 各オペレーターは 1296000 秒（15 日間）に一度、プラグインの無効化を試みることができる\n    return_type: voting_needed,\n    voting_rule: 3,  // 議決権行使ルール 3 では、全普通株式保有者の 70％ が賛成した場合にのみ、本運用が承認される\n    is_before_operation: false, // サンドボックスチェック後に決断を下す\n}\n```\n\n### 例 5: マルチレベルトークン: 製品トークンと非代替性トークン\n\n以下は、議決権と配当権のレベルが異なるトークンの設計方法の例である。議決権および配当権は、各トークンホルダーの議決権および配当権を計算するために使用される。\n以下はトークンレベルの表である:\n\n| レベル | トークン                            | 投票権        | 配当力          | 総供給量       |\n|-------|------------------------------------|--------------|----------------|--------------|\n| 0     | レベル0 普通株式                     | 1            | 1              | 100,000      |\n| 1     | レベル1株式                         | 20           | 1              | 10,000       |\n| 2     | 取締役会                            | 1            | 0              | 5            |\n| 3     | 経営陣                              | 1            | 0              | 5            |\n| 4     | 無議決権株式                         | 0            | 1              | 200,000      |\n| 5     | プロダクトトークン A (0.01 ETH/token) | 0            | 0              | ∞            |\n| 6     | プロダクトトークン B (10 ETH/token)   | 0            | 0              | ∞            |\n| 7     | Non-Fungible Token #1              | 0            | 0              | 1            |\n| 8     | Non-Fungible Token #2              | 0            | 0              | 1            |\n| 9     | Non-Fungible Token #3              | 0            | 0              | 1            |\n| 10    | Non-Fungible Token #4              | 0            | 0              | 1            |\n| 11    | Non-Fungible Token #5              | 0            | 0              | 1            |\n| ...   | ...                                | ...          | ...            | ...          |\n\nサービス料金の支払いや商品の購入には、`pay_cash()` を使って直接支払うか、`pay_to_mint_tokens()` を支払い方法として使い、商品トークン/NFT を受け取ることができる。\n\n以下は、\"Product Token A\" と \"NFT\" の価格と総供給量を定義する方法の例である。\n\n```javascript\nconst product_token_A_price_law = {\n    condition:\n        (operation == \"pay_to_mint_tokens\") &   // 操作は \"pay_to_mint_tokens\"\n        (pay_to_mint_tokens_level == 5) &  // トークンレベルは 5\n        (pay_to_mint_price_per_token >= 10000000000000000),   // トークン1個あたりの価格 >= 0.01 ETH = 1000000000000 wei\n\n    return_type: yes_and_skip_sandbox,  // 操作を承認し、サンドボックスチェックをスキップする\n    return_level: 1,\n    is_before_operation: true, // 操作を承認し、サンドボックスチェックをスキップする\n}\n\nconst NFT_price_law = {\n    condition:\n        (operation == \"pay_to_mint_tokens\") &   // 操作は \"pay_to_mint_tokens\"\n        (pay_to_mint_tokens_level >= 7) &  // トークンレベルが 7 以上\n        (pay_to_mint_token_amount == 1) &  // 一度に 1 トークンしかミントできない\n        (pay_to_mint_current_level_total_supply == 0) &  // 現在の総供給量は 0\n        (pay_to_mint_price_per_token >= 10000000000000000000),   // トークン 1 個あたりの価格 >= 10 ETH = 1000000000000000 wei\n\n    return_type: yes_and_skip_sandbox,  // 操作を承認し、サンドボックスチェックをスキップする\n    return_level: 1,\n    is_before_operation: true, // 操作を承認し、サンドボックスチェックをスキップする\n}\n```\n\n### 例 6: 配当利回りを 5 年間固定\n\n配当メカニズムは、一定のルールの下でトークン保有者に配当を分配するように設計されている:\n\n1. 各 `X` の購入取引について、総収入の Y‱ を配当可能な現金とする\n2. `offer_dividend()` オペレーションを呼び出すことで、配当可能な現金をトークン保有者の配当引き出し残高に分配することができる\n3. トークン保有者一人当たりの配当額（X）は、以下の式で計算される: `dividend_X = dividendable_cash * dividend_power(X) / total_dividend_power`\n4. `offer_dividend()` が呼ばれた後、配当可能な現金と配当可能な取引のカウンタは 0 になり、各トークンホルダーの配当引き出し残高は `dividend_X` だけ増加する\n\n配当利回りが安定していることを確認するために、DARC にプラグインを追加し、`set_parameters()` 関数を制限することで、配当利回りを 5 年間固定することができます\n\n***法的規定 6: 配当利回りは2030年1月1日までに 500‱（5％）以上に固定される必要がある。***\n\n```javascript\nconst dividend_yield_rate_law = {\n    condition:\n        (operation == \"set_parameters\") &  // 操作は \"set_parameters\"\n        (set_parameters_key == \"dividendPermyriadPerTransaction\") &  // キーは \"dividend_yield_rate\"\n        (set_parameters_value < 500) &  // 値が< 500‱ (5%)\n        (timestamp < 1893477600),  // タイムスタンプ < unix タイムスタンプ 2030-01-01 00:00:00 (UTC)\n\n    return_type: no,  // 操作を拒否する\n    return_level: 1,\n    is_before_operation: true, // 操作を拒否し、サンドボックスチェックをスキップする\n}\n```\n\n### 例 7: 投資プログラムパッケージ\n\n以下は、VC による一般的な投資契約である **Simple agreement for future equity (SAFE)** の非公式なプログラム例である:\n\n1. VC は 1000 ETH（10000000000 Gwei）の現金を投資として DARC に支払う\n2. VC は、100,000,000 レベル 0 トークン（普通株式）と 1 レベル 2 トークン（取締役会）を付与される\n3. VC は、プラグイン 5、6、7 を無効にする権利を有する\n4. VC には、プラグイン 8、9、10、11 を有効にする権利が与えられる\n5. VC には、その役割をレベル 5（大株主レベル）に変更する権利が与えられる\n6. 契約を記録するために PDF 文書に署名してスキャンし、PDF 文書を IPFS にアップロードし、IPFS ハッシュ `QmcpxHN3a5HYnPurtuDs3jDfDSg1LPDe2KVBUG4RifcSbC`\n   を DARC パーマネントストレージ配列に追加することを推奨する。\n   これは、必要に応じて緊急エージェントが DARC の技術的問題を検証し、修正するのに役立つ。\n\n```javascript\nconst vc_addr = \"0x1234567890123456789012345678901234567890\";  // 自分のアドレスを定義する\n\npay_cash(1000000000000, 0, 1);  // 1000 ETH = 1000000000000 Gwei cash を支払う\n\nmint_token([vc_addr], [100000000], [0]);  // 100,000,000 レベル 0 トークン（普通株）を VC ファームにミントする\n\nmint_token([vc_addr], [1], [2]);  // 2 レベルのトークン（役員会）を 1 つ VC ファームにミントする\n\ndisable_plugins([5, 6, 7], [false, false, false]) // 操作後のプラグイン 5、6、7 を無効にする\n\nenable_plugins([8, 9, 10, 11], [false, false, false, false]) // このプログラム以前に追加されたプラグイン 8、9、10 を有効にする\n\nchange_member_role(vc_addr, 5);  // VC の役割をレベル 5（大株主レベル）に変更する\n\n/** 最後に、DARC が DARC を引き継ぐために緊急エージェントを必要とする場合に備え、\n * SAFE 文書に署名し、スキャンし、IPFS にアップロードし、ピンを立て、\n * IPFS のハッシュ値を DARC に追加する\n */\nadd_storage(['QmcpxHN3a5HYnPurtuDs3jDfDSg1LPDe2KVBUG4RifcSbC']);\n```\n\n## ソースのビルド\n\nHardhat と OpenZeppelin を使用しているので、プロジェクトは以下のコマンドでビルドできます:\n\n1. 依存関係のインストール\n\n   `npm` の代わりに `pnpm` を使うことを推奨しますが、`npm` でも動作します。\n\n   `pnpm` は新しいパッケージマネージャーで、npm よりも優れている点がいくつかある。より速く、より効率的で、ディスクスペースに優しいです。\n\n    ```shell\n    cd darc-protocol\n    npm install\n    ```\n\n2. コントラクトのコンパイル\n\n    ```shell\n    npx hardhat compile\n    ```\n\n3. Darc テストネットワークの実行\n\n    ```shell\n    npm run node\n    ```\n\n4. コントラクトのテスト\n\n    ```shell\n    npx hardhat test\n    REPORT_GAS=true npm run test\n    ```\n\n5. コントラクトのデプロイ\n\n    ```shell\n    npm run deploy\n    ```\n"
        },
        {
          "name": "darc-docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "darc-js",
          "type": "tree",
          "content": null
        },
        {
          "name": "darc-protocol",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}