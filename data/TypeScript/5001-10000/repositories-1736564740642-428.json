{
  "metadata": {
    "timestamp": 1736564740642,
    "page": 428,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Flipkart/recyclerlistview",
      "stars": 5291,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.53125,
          "content": "# Built application files\n*.apk\n*.ap_\n\n# Files for the ART/Dalvik VM\n*.dex\n\n# Java class files\n*.class\n\n# Generated files\nbin/\ngen/\nout/\n\n# Gradle files\n.gradle/\nbuild/\n\n# Local configuration file (sdk path, etc)\nlocal.properties\n\n# Proguard folder generated by Eclipse\nproguard/\n\n# Log Files\n*.log\n\n# Android Studio Navigation editor temp files\n.navigation/\n\n# Android Studio captures folder\ncaptures/\n\n# Intellij\n*.iml\n.idea/\n\n# Distribution\ndist/\n\n# Keystore files\n*.jks\n\nnode_modules/\nyarn.lock\npackage-lock.json\n\n#npm release config\n.npmrc"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.08203125,
          "content": "node_modules/\nsamples/\nscripts/\n.idea/\n.babelrc\n.travis.yml\npackage-lock.json\n.npmrc"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.0791015625,
          "content": "# RecyclerListView\n\n[![npm version](https://img.shields.io/npm/v/recyclerlistview.svg)](https://www.npmjs.com/package/recyclerlistview)\n[![appveyor](https://ci.appveyor.com/api/projects/status/uwnp3r49127esj7k/branch/master?svg=true)](https://ci.appveyor.com/project/naqvitalha/recyclerlistview/branch/master)\n[![License](https://img.shields.io/badge/License-Apache%202.0-brightgreen.svg)](https://opensource.org/licenses/Apache-2.0)\n\nIf this project has helped you out, please support us with a star :star2:.\n\nThis is a high performance listview for React Native and Web with support for complex layouts. JS only with no native dependencies, inspired by both RecyclerView on Android\nand UICollectionView on iOS.\n\n`npm install --save recyclerlistview`\n\nFor latest beta:  \n`npm install --save recyclerlistview@beta`\n\n* **[Overview and features](#overview-and-features)**\n* **[Why?](#why)**\n* **[Demo](#demo)**\n* **[Props](#props)**\n* **[Typescript](#typescript)**\n* **[Guides](#guides)**\n* **[License](#license)**\n* **[Contact us](#contact-us)**\n\nNote: Documentation will be upgraded soon, for now check code comments for clarity and exploring features. This component is actively tested with React Native Web as well.\n\n\n## Overview and features\nRecyclerListView uses \"cell recycling\" to reuse views that are no longer visible to render items instead of creating new view objects. Creation of objects\nis very expensive and comes with a memory overhead which means as you scroll through the list the memory footprint keeps going up. Releasing invisible items off\nmemory is another technique but that leads to creation of even more objects and lot of garbage collections. Recycling is the best way to render infinite lists\nthat does not compromise performance or memory efficiency.\n\nApart from all performance benefits RecyclerListView comes with great features out of the box:\n- Cross Platform, works on Web\n- Supports staggered grid layouts\n- Supports variable height items even if dimensions cannot be predetermined (prop - `forceNonDeterministicRendering`)\n- Instant layout switching like going from GridView to ListView and vice versa\n- End reach detections\n- Horizontal Mode\n- Viewability Events\n- Initial render offset/index support\n- Footer support\n- Reflow support on container size change with first visible item preservation\n- Scroll position preservation\n- Window scrolling support for web\n- (New) ItemAnimator interface added, customize to your will how RLV handles layout changes. Allows you to modify animations that move cells. You can do things like smoothly move an item to a new position when height of one of the cells has changed.\n- (New) Stable Id support, ability to associate a stable id with an item. Will enable beautiful add/remove animations and optimize re-renders when DataProvider is updated.\n- (New) Sticky recycler items that stick to either the top or bottom.\n\n## Why?\n\nRecyclerListView was built with performance in mind which means no blanks while quick scrolls or frame drops.\nRecyclerListView encourages you to have deterministic heights for items you need to render. This does not mean that you need to have all items of same height and stuff, all you need\nis a way to look at the data and compute height upfront so that RecyclerListView can compute layout in one pass rather than waiting for the draw to happen.\nYou can still do all sorts of GridViews and ListViews with different types of items which are all recycled in optimal ways. Type based recycling is very easy\nto do and comes out of the box.\n\nIn case you cannot determine heights of items in advance just set `forceNonDeterministicRendering` prop to true on RecyclerListView. Now, it will treat given dimensions as estimates and let items resize. Try to give good estimates to improve experience.\n\n\n## Demo\n\n**Production Flipkart Grocery Demo Video (or try the app):** https://youtu.be/6YqEqP3MmoU  \n**Infinite Loading/View Change (Expo):** https://snack.expo.io/@naqvitalha/rlv-demo  \n**Mixed ViewTypes:** https://snack.expo.io/B1GYad52b  \n**extendedState,stableIDs and ItemAnimator (Expo):** https://snack.expo.io/@arunreddy10/19bb8e  \n**Sample project:** https://github.com/naqvitalha/travelMate  \n**Web Sample (Using RNW):** https://codesandbox.io/s/k54j2zx977, https://jolly-engelbart-8ff0d0.netlify.com/  \n**Context Preservation Sample:** https://github.com/naqvitalha/recyclerlistview-context-preservation-demo\n\n**Other Video:** https://www.youtube.com/watch?v=Tnv4HMmPgMc\n\n[![Watch Video](https://img.youtube.com/vi/Tnv4HMmPgMc/0.jpg)](https://www.youtube.com/watch?v=Tnv4HMmPgMc)\n\n## Props\n\n| Prop | Required | Params Type | Description |\n| --- | --- | --- | --- |\n| layoutProvider | Yes | BaseLayoutProvider | Constructor function that defines the layout (height / width) of each element |\n| dataProvider | Yes | DataProvider | Constructor function the defines the data for each element |\n| contextProvider | No | ContextProvider | Used to maintain scroll position in case view gets destroyed, which often happens with back navigation |\n| rowRenderer | Yes | (type: string \\| number, data: any, index: number) => JSX.Element \\| JSX.Element[] \\| null | Method that returns react component to be rendered. You get the type, data, index and extendedState of the view in the callback | \n| initialOffset | No | number | Initial offset you want to start rendering from; This is very useful if you want to maintain scroll context across pages. | \n| renderAheadOffset | No | number | specify how many pixels in advance you want views to be rendered. Increasing this value can help reduce blanks (if any). However, keeping this as low as possible should be the intent. Higher values also increase re-render compute |\n| isHorizontal | No | boolean | If true, the list will operate horizontally rather than vertically | \n| onScroll | No | rawEvent: ScrollEvent, offsetX: number, offsetY: number) => void | On scroll callback function that executes as a user scrolls |\n| onRecreate | No | (params: OnRecreateParams) => void | callback function that gets executed when recreating the recycler view from context provider |\n| externalScrollView | No | { new (props: ScrollViewDefaultProps): BaseScrollView } | Use this to pass your on implementation of BaseScrollView |\n| onEndReached | No | () => void | Callback function executed when the end of the view is hit (minus onEndThreshold if defined) |\n| onEndReachedThreshold | No | number | Specify how many pixels in advance for the onEndReached callback |\n| onEndReachedThresholdRelative | No | number | Specify how far from the end (in units of visible length of the list) the bottom edge of the list must be from the end of the content to trigger the onEndReached callback |\n| onVisibleIndicesChanged | No | TOnItemStatusChanged | Provides visible index; helpful in sending impression events |\n| onVisibleIndexesChanged | No | TOnItemStatusChanged | (Deprecated in 2.0 beta) Provides visible index; helpful in sending impression events |\n| renderFooter | No | () => JSX.Element \\| JSX.Element[] \\| null | Provide this method if you want to render a footer. Helpful in showing a loader while doing incremental loads |\n| initialRenderIndex | No | number | Specify the initial item index you want rendering to start from. Preferred over initialOffset if both specified |\n| scrollThrottle | No | number |iOS only; Scroll throttle duration |\n| canChangeSize | No | boolean | Specify if size can change |\n| distanceFromWindow | No | number | **(Depricated)** Use `applyWindowCorrection()` API with `windowShift`. **[Usage?](#applywindowcorrection-usage)** |\n| applyWindowCorrection | No | (offset: number, windowCorrection: WindowCorrection) => void | (Enhancement/replacement to `distanceFromWindow` API) Allows updation of the visible windowBounds to based on correctional values passed. User can specify **windowShift**; in case entire RecyclerListWindow needs to shift down/up, **startCorrection**; in case when top window bound needs to be shifted for e.x. top window bound to be shifted down is a content overlapping the top edge of RecyclerListView, **endCorrection**: to alter bottom window bound for a similar use-case. **[Usage?](#applywindowcorrection-usage)** |\n| useWindowScroll | No | boolean | Web only; Layout Elements in window instead of a scrollable div |\n| disableRecycling | No | boolean | Turns off recycling |\n| forceNonDeterministicRendering | No | boolean | Default is false; if enabled dimensions provided in layout provider will not be strictly enforced. Use this if item dimensions cannot be accurately determined |\n| extendedState | No | object | In some cases the data passed at row level may not contain all the info that the item depends upon, you can keep all other info outside and pass it down via this prop. Changing this object will cause everything to re-render. Make sure you don't change it often to ensure performance. Re-renders are heavy. |\n| itemAnimator | No | ItemAnimator | Enables animating RecyclerListView item cells (shift, add, remove, etc) |\n| style | No | object | To pass down style to inner ScrollView |\n| scrollViewProps | No | object | For all props that need to be proxied to inner/external scrollview. Put them in an object and they'll be spread and passed down. |\n| layoutSize | No | Dimension | Will prevent the initial empty render required to compute the size of the listview and use these dimensions to render list items in the first render itself. This is useful for cases such as server side rendering. The prop canChangeSize has to be set to true if the size can be changed after rendering. Note that this is not the scroll view size and is used solely for layouting. |\n| onItemLayout | No | number | A callback function that is executed when an item of the recyclerListView (at an index) has been layout. This can also be used as a proxy to itemsRendered kind of callbacks. |\n| windowCorrectionConfig | No | object | Used to specify is window correction config and whether it should be applied to some scroll events |\n\nFor full feature set have a look at prop definitions of [RecyclerListView](https://github.com/Flipkart/recyclerlistview/blob/21049cc89ad606ec9fe8ea045dc73732ff29eac9/src/core/RecyclerListView.tsx#L540-L634)\n(bottom of the file). All `ScrollView` features like `RefreshControl` also work out of the box.\n\n### applyWindowCorrection usage\n\n`applyWindowCorrection` is used to alter the visible window bounds of the RecyclerListView dynamically. The windowCorrection of RecyclerListView along with the current scroll offset are exposed to the user. The `windowCorrection` object consists of 3 numeric values:\n - `windowShift`        - Direct replacement of `distanceFromWindow` parameter. Window shift is the offset value by which the RecyclerListView as a whole is displaced within the StickyContainer, use this param to specify how far away the first list item is from window top. This value corrects the scroll offsets for StickyObjects as well as RecyclerListView.\n - `startCorrection`    - startCorrection is used to specify the shift in the top visible window bound, with which user can receive the correct Sticky header instance even when an external factor like CoordinatorLayout toolbar. \n - `endCorrection`      - endCorrection is used to specify the shift in the bottom visible window bound, with which user can receive correct Sticky Footer instance when an external factor like bottom app bar is changing the visible view bound.\n\nAs seen in the example below\n\n![Alt Text](/docs/images/getWindowCorrection_demo.gif)\n\n## Typescript\n\nTypescript works out of the box. The only execption is with the inherited Scrollview props. In order for Typescript to work with inherited Scrollview props, you must place said inherited Scrollview props within the scrollViewProps prop.\n\n```javascript\n<RecyclerListView\n  rowRenderer={this.rowRenderer}\n  dataProvider={queue}\n  layoutProvider={this.layoutProvider}\n  onScroll={this.checkRefetch}\n  renderFooter={this.renderFooter}\n  scrollViewProps={{\n    refreshControl: (\n      <RefreshControl\n        refreshing={loading}\n        onRefresh={async () => {\n          this.setState({ loading: true });\n          analytics.logEvent('Event_Stagg_pull_to_refresh');\n          await refetchQueue();\n          this.setState({ loading: false });\n        }}\n      />\n    )\n  }}\n/>\n```\n\n## Guides\n* **[Sample Code](https://github.com/Flipkart/recyclerlistview/tree/master/docs/guides/samplecode)**\n* **[Performance](https://github.com/Flipkart/recyclerlistview/tree/master/docs/guides/performance)**\n* **[Sticky Guide](https://github.com/Flipkart/recyclerlistview/tree/master/docs/guides/sticky)**\n* **Web Support:** Works with React Native Web out of the box. For use with ReactJS start importing from `recyclerlistview/web` e.g., `import { RecyclerListView } from \"recyclerlistview/web\"`. Use aliases if you want to preserve import path. Only platform specific code is part of the build so, no unnecessary code will ship with your app.\n* **Polyfills Needed:** `requestAnimationFrame`, `ResizeObserver`\n\n## License\n**[Apache v2.0](https://github.com/Flipkart/recyclerlistview/blob/master/LICENSE.md)**\n\n## Contact Us\nPlease open issues for any bugs that you encounter. You can reach out to me on twitter [@naqvitalha](https://www.twitter.com/naqvitalha) or, write to cross-platform@flipkart.com for any questions that\nyou might have.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.1865234375,
          "content": "environment:\n  nodejs_version: \"14\"\n\ninstall:\n  - ps: Install-Product node $env:nodejs_version\n  - npm install\n\ntest_script:\n  - node --version\n  - npm --version\n  - npm run build\n\nbuild: off"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.5087890625,
          "content": "{\n  \"name\": \"recyclerlistview\",\n  \"version\": \"4.2.1\",\n  \"description\": \"The listview that you need and deserve. It was built for performance, uses cell recycling to achieve smooth scrolling.\",\n  \"main\": \"dist/reactnative/index.js\",\n  \"types\": \"dist/reactnative/index.d.ts\",\n  \"scripts\": {\n    \"build\": \"sh scripts/build.sh\",\n    \"clean\": \"sh scripts/clean.sh\",\n    \"release\": \"sh scripts/publish-latest.sh\",\n    \"release-beta\": \"sh scripts/publish-beta.sh\",\n    \"release-local\": \"sh scripts/publish-local.sh\"\n  },\n  \"keywords\": [\n    \"react-native\",\n    \"recyclerview\",\n    \"listview\",\n    \"flatlist-alternative\",\n    \"flatlist\",\n    \"60fps\",\n    \"cross-platform\",\n    \"web\",\n    \"react-native-web\",\n    \"performance\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/Flipkart/recyclerlistview\"\n  },\n  \"author\": \"naqvitalha <naqvitalha@gmail.com>\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/Flipkart/recyclerlistview/issues\"\n  },\n  \"homepage\": \"https://github.com/Flipkart/recyclerlistview\",\n  \"dependencies\": {\n    \"lodash.debounce\": \"4.0.8\",\n    \"prop-types\": \"15.8.1\",\n    \"ts-object-utils\": \"0.0.5\"\n  },\n  \"peerDependencies\": {\n    \"react\": \">= 15.2.1\",\n    \"react-native\": \">= 0.30.0\"\n  },\n  \"devDependencies\": {\n    \"@types/lodash.debounce\": \"4.0.8\",\n    \"@types/prop-types\": \"15.5.2\",\n    \"@types/react\": \"16.4.7\",\n    \"@types/react-native\": \"0.49.5\",\n    \"@types/resize-observer-browser\": \"0.1.7\",\n    \"file-directives\": \"1.4.6\",\n    \"tslint\": \"5.11.0\",\n    \"typescript\": \"4.9.5\"\n  }\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "sticky",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.51171875,
          "content": "{\n  \"compilerOptions\": {\n    \"lib\": [\"es6\", \"dom\"], // target Node.js(v6)\n    \"types\": [\"react\", \"react-native\", \"resize-observer-browser\"],\n    \"module\": \"commonjs\", // export compatibility\n    \"target\": \"es5\", // target Node.js(v6)\n    \"moduleResolution\": \"node\", // target Node.js(v6)\n    \"declaration\": true, // generate TypeScript definitions\n    \"rootDir\": \"src\",\n    \"strict\": true,\n    \"noImplicitReturns\": true,\n    \"removeComments\": false,\n    \"jsx\": \"react\",\n    \"sourceMap\": true,\n    \"skipLibCheck\": true\n  }\n}\n"
        },
        {
          "name": "tslint.json",
          "type": "blob",
          "size": 0.5810546875,
          "content": "{\n    \"extends\": [\n        \"tslint:recommended\"\n    ],\n    \"rules\": {\n        \"max-line-length\": {\n            \"options\": [\n                160\n            ]\n        },\n        \"typedef\": [\n            true,\n            \"call-signature\",\n            \"property-declaration\"\n        ],\n        \"max-classes-per-file\":false,\n        \"typeof-compare\": true,\n        \"interface-name\": false,\n        \"variable-name\": false,\n        \"comment-format\": false,\n        \"no-bitwise\": false,\n        \"member-access\": true,\n        \"ordered-imports\": false,\n        \"object-literal-sort-keys\": false\n    }\n}"
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}