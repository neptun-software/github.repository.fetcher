{
  "metadata": {
    "timestamp": 1736564746706,
    "page": 436,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/BosqueLanguage",
      "stars": 5250,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4326171875,
          "content": "impl/build/include/win/z3/bin/* filter=lfs diff=lfs merge=lfs -text\nimpl/build/include/win/mimalloc/bin/* filter=lfs diff=lfs merge=lfs -text\nimpl/build/include/macos/z3/bin/* filter=lfs diff=lfs merge=lfs -text\nimpl/build/include/macos/mimalloc/bin/* filter=lfs diff=lfs merge=lfs -text\nimpl/build/include/linux/z3/bin/* filter=lfs diff=lfs merge=lfs -text\n*.gif filter=lfs diff=lfs merge=lfs -text\n*.pptx filter=lfs diff=lfs merge=lfs -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0654296875,
          "content": "impl/node_modules/\n**/.vscode/\n\n**/.DS_Store\n\n**/output/*\n**/*.pdb\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.669921875,
          "content": "# Contributing to BosqueLanguage\n\nWe want to make contributing to this project as easy as possible, whether it's:\n\n- Reporting a bug\n- Discussing the current state of the code\n- Submitting a fix\n- Proposing new features\n\n# How Do I Submit A (Good) Bug Report?\n\nExplain the problem and include additional details to help maintainers reproduce the problem:\n\n- Check if the same, or a similar issue has already been reported.\n- Use a clear and descriptive title for the issue to identify the problem.\n- Describe the exact steps which reproduce the problem in as many details as possible.\n- Provide specific examples to demonstrate the steps.\n- Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior.\n- Explain which behavior you expected to see instead and why.\n- Include screenshots and animated GIFs which show you following the described steps and clearly demonstrate the problem.\n- If the problem wasn't triggered by a specific action, describe what you were doing before the problem happened and share more information.\n\n# How Do I Submit A (Good) Pull Request?\n\nThe process described here has several goals:\n\n- Maintain BosqueLanguage's quality.\n- Fix problems that are important to users.\n- Enable a sustainable system for BosqueLanguage's maintainers to review contributions.\n\n# If you are willing to contribute to BosqueLanguage project, you are awesome! Just follow the steps below:\n\n- Fork it!\n- Make a local clone of this repository.\n- Switch to the directory: cd BosqueLanguage\n- Create your new branch: git checkout -b feature name\n- Make necessary changes to the source code\n- Add changes to git index by using git add --all .\n- Commit your changes: git commit -am 'Added new feature'\n- Push to the branch: git push\n- Submit a new pull request üòÑ\n\nThis project welcomes contributions and suggestions. Most contributions require you to\nagree to a Contributor License Agreement (CLA) declaring that you have the right to,\nand actually do, grant us the rights to use your contribution. For details, visit\nhttps://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need\nto provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the\ninstructions provided by the bot. You will only need to do this once across all repositories using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\nor contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.1552734375,
          "content": "    Bosque Language\n\n    MIT License\n\n    Copyright (c) Microsoft Corporation. All rights reserved.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.177734375,
          "content": "# Bosque Programming Language\r\n\r\n**This repository is archived and active development of the Bosque Language is moving to an external open-source repository under @BosqueLanguage ([github repo is here](https://github.com/BosqueLanguage/BosqueCore))!**\r\n\r\n[![Licensed under the MIT License](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/Microsoft/BosqueLanguage/blob/master/LICENSE.txt)\r\n[![PR's Welcome](https://img.shields.io/badge/PRs%20-welcome-brightgreen.svg)](#contribute)\r\n[![Build Health](https://img.shields.io/github/workflow/status/microsoft/BosqueLanguage/nodeci)](https://github.com/microsoft/BosqueLanguage/actions) \r\n\r\n\r\n# The Bosque Project\r\n\r\nThe Bosque Programming Language project is a ground up language & tooling co-design effort focused on is investigating the theoretical and the practical implications of:\r\n\r\n1. Explicitly designing a code intermediate representation language (bytecode) that enables deep automated code reasoning and the deployment of next-generation development tools, compilers, and runtime systems.\r\n2. Leveraging the power of the intermediate representation to provide a programming language that is both easily accessible to modern developers and that provides a rich set of useful language features for developing high reliability & high performance applications.\r\n3. Taking a cloud-development first perspective on programming to address emerging challenges as we move into a distributed cloud development model based around serverless and microservice architectures.\r\n\r\nThe **_Bosque Language_** is a novel hybrid of functional programming language semantics and an ergonomic block & assignment-based syntax. This allows developers to organize code into familiar/natural blocks and compositions while, simultaneously, benefiting from the correctness and simplicity of a functional programming model (see code examples below). The language also provides a range of ergonomic features for writing high reliability code, such as Typed Strings, unit typedecls for primitives, and first-class assertions/pre-post conditions/invariants.\r\n\r\nThe **_Bosque Testing Framework_** provides a built-in unit testing system, a powerful new SMT powered property-based testing system, and the ability to symbolically search for errors that can be triggered by user inputs in the entrypoints to the program (see the `bosque` command section below). These tests and checks can find compact debuggable inputs that trigger and error or failing test and, in many cases, can also prove that there will never be a case with a ‚Äúsmall repro‚Äù that triggers the error! \r\n\r\nThe **_Bosque Runtime_** is a novel _pathology free_ design that focuses on predictable latency, pauses, and 99th percentile behavior. This starts with a new garbage collector that is guaranteed to never need a stop-the-world collection, that only uses live-heap + a small constant in memory to run, and (will eventually) supports background external defragmentation! Beyond the GC behavior the runtime design excludes pathological regex behavior, dynamic execution bailout overload, and catastrophic amortized operation behaviors such as repeated rehashing (instead using slower but stable log time persistent structures). \r\n\r\nThe **_Bosque API Types_** provide a way to specify an application interface in a clean manner that is independent of the specifics of the Bosque type system. This enables the auto-generation of input validation and encoding logic. We currently support a universal JSON encoding but more efficient representations are possible. This design ensures that Bosque APIs can easily be integrated into polyglot systems (e.g. microservice architectures) or integrated into existing codebases (e.g. Node.js or C++). \r\n\r\nThe **_Bosque Package Manager_** (see the `bosque` command section) provides a centralized way to organize, test, and build an application ‚Äì either as a standalone command or to integrate into other applications via JSON APIs. This manager is designed to take advantage of the checking capabilities of Bosque and will enable developers to (1) test against imported code using auto-generated mocks and (2) check that package updates do not (intentionally or maliciously) change the package behavior, introduce new data outputs, or expose sensitive data to unintended outputs!\r\n\r\n\r\n# Documentation\r\n\r\nSmall samples of code and unique Bosque tooling are below in the [Code Snippets](#Code-Snippets) and [Tooling](#Tooling) sections. A rundown of notable and/or unique features in the Bosque language is provided on the [Language Highlights](docs/language/highlights.md) page and complete documenation for the language and standard libraries are on the [Language](docs/language/overview.md) and [Libraries](docs/libraries/overview.md) doc pages respectively.\r\n\r\nDetailed Documentation, Tutorials, and Technical Information:\r\n* [Language Highlights](docs/language/highlights.md)\r\n* [Language Docs](docs/language/overview.md)\r\n* [Library Docs](docs/libraries/overview.md)\r\n* [Runtime and GC Docs](docs/runtime/overview.md)\r\n* Tooling -- !TODO!\r\n* Checkers -- !TODO!\r\n* Tutorials - _Coming Eventually!_\r\n* [Technical Papers](docs/papers/publist.md)\r\n* [Contribution guidelines](CONTRIBUTING.md)\r\n\r\n## Code Snippets\r\n\r\n**Add 2 numbers:**\r\n\r\n```none\r\nfunction add2(x: Nat, y: Nat): Nat {\r\n    return x + y;\r\n}\r\n\r\nadd2(2, 3)     //5\r\nadd2(x=2, y=3) //5\r\nadd2(y=2, 5)   //7\r\n```\r\n\r\n**All positive check using rest parameters and lambda:**\r\n\r\n```none\r\nfunction allPositive(...args: List<Int>): Bool {\r\n    return args.allOf(fn(x) => x >= 0i);\r\n}\r\n\r\nallPositive(1, 3, 4) //true\r\n```\r\n\r\n**Tuples and Records:**\r\n\r\n```none\r\nfunction doit(tup: [Int, Bool], rec: {f: String, g: Int}): Int {\r\n    return tup.0 + rec.g;\r\n}\r\n\r\ndoit([1, false], {f=\"ok\", g=3}) //4\r\n```\r\n\r\n**Sign (with default argument):**\r\n\r\n```none\r\nfunction sign(x?: Int=0i): Int {\r\n    var y: Int;\r\n\r\n    if(x == 0i) {\r\n        y = 0i;\r\n    }\r\n    else {\r\n        y = (x > 0i) ? 1i : -1i;\r\n    }\r\n\r\n    return y;\r\n}\r\n\r\nsign(5i)    //1\r\nsign(-5i)   //-1\r\nsign()     //0\r\n```\r\n\r\n**Nominal Types Data Invariants:**\r\n\r\n```\r\nconcept WithName {\r\n    invariant $name !== \"\";\r\n\r\n    field name: String;\r\n}\r\n\r\nconcept Greeting {\r\n    abstract method sayHello(): String;\r\n\r\n    virtual method sayGoodbye(): String {\r\n        return \"goodbye\";\r\n    }\r\n}\r\n\r\nentity GenericGreeting provides Greeting {\r\n    const instance: GenericGreeting = GenericGreeting{};\r\n\r\n    override method sayHello(): String {\r\n        return \"hello world\";\r\n    }\r\n}\r\n\r\nentity NamedGreeting provides WithName, Greeting {\r\n    override method sayHello(): String {\r\n        return String::concat(\"hello \", this.name);\r\n    }\r\n}\r\n\r\nGenericGreeting{}.sayHello()          //\"hello world\"\r\nGenericGreeting::instance.sayHello()  //\"hello world\"\r\n\r\nNamedGreeting{}.sayHello()           //type error no value provided for \"name\" field\r\nNamedGreeting{name=\"\"}.sayHello()    //invariant error\r\nNamedGreeting{\"bob\"}.sayHello()      //\"hello bob\"\r\n```\r\n\r\n**(Algebraic Data Types)++ and Union Types**\r\n```\r\ndatatype BoolOp provides APIType using {\r\n    line: Nat\r\n} of\r\nLConst { val: Bool }\r\n| NotOp { arg: BoolOp }\r\n| AndOp { larg: BoolOp, rarg: BoolOp }\r\n| OrOp { larg: BoolOp, rarg: BoolOp }\r\n& {\r\n    recursive method evaluate(): Bool {\r\n        match(this) {\r\n            LConst                  => return this.val;\r\n            | NotOp                 => return !this.arg.evaluate[recursive]();\r\n            | AndOp{_, larg, rarg} => return larg.evaluate[recursive]() && rarg.evaluate[recursive]();\r\n            | OrOp{_, larg, rarg}  => return larg.evaluate[recursive]() || rarg.evaluate[recursive]();\r\n        }\r\n    } \r\n}\r\n\r\nAndOp{2, LConst{1, true}, LConst{1, false}}.evaluate[recursive]() //false\r\nOrOp{2, LConst{1, true}, LConst{1, false}}.evaluate[recursive]()  //true\r\n\r\nfunction printType(x: Bool | Int | String | None ): String {\r\n    return match(x) {|\r\n        Bool     => \"b\"\r\n        | Int    => \"i\"\r\n        | String => \"s\"\r\n        | _        => \"n\"\r\n    |};\r\n}\r\n\r\nprintType(1.0f) //type error\r\nprintType(true) //\"b\"\r\nprintType(none) //\"n\"\r\n\r\n```\r\n\r\n**Validated and Typed Strings:**\r\n```\r\ntypedecl ZipcodeUS = /[0-9]{5}(-[0-9]{4})?/;\r\ntypedecl CSSpt = /[0-9]+pt/;\r\n\r\nfunction is3pt(s1: StringOf<CSSpt>): Bool {\r\n    return s1.value() === \"3pt\";\r\n}\r\n\r\nZipcodeUS::accepts(\"98052-0000\") //true\r\nZipcodeUS::accepts(\"1234\")       //false\r\n\r\nis3pt(\"12\")              //type error not a StringOf<CSSpt>\r\nis3pt('98052'_ZipcodeUS) //type error not a StringOf<CSSpt>\r\n\r\nis3pt('3pt'_CSSpt) //true\r\nis3pt('4pt'_CSSpt) //false\r\n```\r\n\r\n```\r\nentity StatusCode provides Parsable {\r\n    field code: Int;\r\n    field name: String;\r\n\r\n    function parse(name: String): Result<StatusCode, String> {\r\n        return switch(name) {|\r\n            \"IO\"        => ok(StatusCode{1, name})\r\n            | \"Network\" => ok(StatusCode{2, name})\r\n            | _         => err(\"Unknown code\")\r\n        |};\r\n    }\r\n\r\n    function accepts(name: String): Bool {\r\n        return name === \"IO\" || name === \"Network\";\r\n    }\r\n}\r\n\r\nfunction isIOCode(s: DataString<StatusCode>): Bool {\r\n    return s === 'IO'_StatusCode;\r\n}\r\n\r\nisIOCode(\"IO\");               //type error not a DataString<StatusCode>\r\nisIOCode('Input'_StatusCode)  //type error not a valid StatusCode string\r\nStatusCode::parse(\"Input\") //runtime error not a valid StatusCode string\r\n\r\nisIOCode('Network'_StatusCode)               //false\r\nisIOCode('IO'_StatusCode)                    //true\r\n\r\nlet ec: StatusCode = StatusCode{'IO'};\r\nassert(ec.code == 1i); //true\r\n```\r\n\r\n**Numeric Types**\r\n\r\n```\r\ntypedecl¬†Fahrenheit¬†=¬†Int;\r\ntypedecl¬†Celsius¬†=¬†Int;\r\n\r\ntypedecl¬†Percentage¬†=¬†Nat¬†&¬†{\r\n¬†¬†¬†¬†invariant¬†$value¬†<=¬†100n;\r\n}\r\n\r\n32_Fahrenheit + 0_Celsius //type error different numeric types\r\n101_Percentage            //invariant error\r\n\r\nfunction isFreezing(temp: Celsius): Bool {\r\n    return temp <= 0_Celsius;\r\n}\r\n\r\nisFreezing(5)          //type error not a celsius number\r\nisFreezing(5_Celsius)  //false\r\nisFreezing(-5_Celsius) //true\r\n\r\n```\r\n<!-- \r\n## API Types\r\n\r\nBosque is designed to integrate easily into existing codebases and the fundamentally polyglot world of service based cloud applications. To support this Bosque uses the concept of *API Types*. These are a set of Bosque types that can be:\r\n1. Encoded and understood independently of (most) details of the Bosque type system or operational semantics.\r\n2. Efficiently serialized/deserialized in a language agnostic manner -- the default is JSON.\r\n3. Have auto-generated validation and structured generator code produced from the type signature.\r\n\r\nMost primitive types are valid APITypes including the exptected `None`, `Bool`, `Nat`, `Int`, `String`, `DateTime`, `UUID`, etc. The structured type `StringOf<T>` is also an APIType and both `DataString<T>` and `DataBuffer<T>` are also valid APITypes when the underlying type is as well. Lifting is applied to `typedecl` declared types, Tuples, Records, `List<T>`, `Map<K, V>`, `Option<T>`, and `Result<T, E>`. Arbitrary `entity` and `concept` types can also be declared as APITypes by having them `provide` the concept `APIType` and when all fields are publicly visible APITypes. \r\n\r\nA function can be exported from the application in a `.bsqapi` file (see info on the `bosque` command) using the `entrypoint` annotation and ensuring that it consumes and returns APITypes. These functions can be run from the command line using the `bosque run` command and providing the arguments as a JSON list or the code can be compiled for integration into other applications with JSON as the foreign-function interface. -->\r\n\r\n# The `bosque` Command \r\n\r\nThe `bosque` command is the primary tool for building, testing, and managing bosque packages and applications. The bosque command can be run on sets of files _or_, preferably, used in conjunction with Bosque packages which are defined with a `package.json` format.\r\n\r\n## Calculator Example\r\n\r\nTo illustrate how packages and the `bosque` command work we have a simple calculator app in the `impl/src/test/apps/readme_calc/` directory (along with more interesting tic-tac-toe and rental apps). \r\n\r\nThis directory contains a `package.json` file which defines the package. As expected it has required name/version/description/license fields. The next part of the package definition, the `src` entry, is a list of source files (or globs) that make up the core logic of the application. Finally, we define two sets of files (or globs) that define the `entrypoints` of the application that will be exposed to consumers and a set of `testfiles` that can be used for unit-testing and property-based symbolic checking.\r\n\r\n### Calculator Source Code, Entrypoints, and Test Definitions\r\n\r\nThe source code file, `calc_impl.bsq`, for the calculator has two simple function implementation (`sign` and `abs`):\r\n\r\n```\r\nnamespace Main;\r\n\r\nfunction abs_impl(arg: BigInt): BigInt {\r\n    var res = arg;\r\n\r\n    if(arg < 0I) {\r\n        res = -arg;\r\n    }\r\n   \r\n    return res;\r\n}\r\n\r\nfunction sign_impl(arg: BigInt): BigInt {\r\n    return arg > 0I ? 1I : -1I;\r\n}\r\n```\r\n\r\nThese functions are used, along with some direct implementations, to create the external API surface of the package (defined in the `entrypoints` files with a `.bsqapi` extension). The calculator exports several functions including `div` which uses a `Result` to handle the case of division by zero and uses the pre/post features of the Bosque language (`ensures`) to document the behavior of the `abs` and `sign` methods for the clients of this package.\r\n\r\n```\r\nnamespace Main;\r\n\r\n//More entrypoint functions ...\r\n\r\nentrypoint function div(arg1: BigInt, arg2: BigInt): Result<BigInt> {\r\n    if(arg2 == 0I) {\r\n        return err();\r\n    }\r\n    else {\r\n        return ok(arg1 / arg2);\r\n    }\r\n}\r\n\r\nentrypoint function abs(arg: BigInt): BigInt \r\n    ensures $return == arg || $return == -arg;\r\n    ensures $return >= 0I;\r\n{\r\n    return abs_impl(arg);\r\n}\r\n\r\nentrypoint function sign(arg: BigInt): BigInt \r\n    ensures $return == 1I || $return == -1I;\r\n{\r\n    return sign_impl(arg);\r\n}\r\n```\r\n\r\n### **The `run` Action**\r\n\r\nThe `run` action in the `bosque` command provides a simple interface for invoking the entrypoints from a command line using JSON values. The syntax `run [package.json] [--entrypoint Namespace::function]` will load the code/api specified in the package (default `./package.json`) and find/run the specified function (default `Main::main`). The arguments can be provided on the command line, `--args [...]`, or via stdin. The image blow shows how to execute the `div` and `sign` APIs. \r\n\r\n![](resources/images/readme/CalcRun.gif)\r\n\r\n### **The `test` Action**\r\n\r\nThe `test` action handles running unit-tests and property-tests defined in the `testfiles` (with a `.bsqtest` extension). All functions that are declared as `chktest` functions will be run. Functions with 0 arguments are physically executed while functions with arguments are treated as parametric property tests and checked with the SMT solver for _small_ inputs that may violate the desired property (i.e. the test returns false).\r\n\r\n```\r\nnamespace Main;\r\n\r\nchktest function abs_neg(): Bool {\r\n    return abs_impl(-3I) == 3I;\r\n}\r\n\r\nchktest function sign_pos(): Bool {\r\n    return sign_impl(5I) > 0I;\r\n}\r\n\r\nchktest function sign_neg(): Bool {\r\n    return sign_impl(-4I) < 0I;\r\n}\r\n\r\nchktest function sign_neg_is_minus1(x: BigInt): Bool \r\n    requires x < 0I;\r\n{\r\n    return sign_impl(x) == -1I;\r\n}\r\n\r\nchktest function sign_pos_is_1(x: BigInt): Bool \r\n    requires x >= 0I;\r\n{\r\n    return sign_impl(x) == 1I;\r\n}\r\n```\r\n\r\n![](resources/images/readme/CalcTest.gif)\r\n\r\nRunning the `test` action as shown results in 3 tests being identified as unit-tests and physically executed with 2 tests being identified as parametric property tests and checked symbolically. In this app all 3 of the unit-tests pass and the symbolic checker is able to prove that one of the property tests is satisfied for all (small) inputs. However, the other property test does have a violating input, namely when `x` is `0` when the function `sign_impl` evaluates to `-1` but the expected property is that the sign should be `1`. \r\n\r\n### **The `apptest` Action**\r\n\r\nThe `apptest` action takes the power of the symbolic checker that Bosque provides and applies it to possible runtime errors, assertion failures, pre/post conditions, and invariants that may be triggered by a client calling an API provided in the package `entrypoints`. Running the `apptest` command takes each entrypoint function and checks all possible errors reachable to either (1) find a small repro input that triggers the error or (2) prove that no such small input exists.\r\n\r\n![](resources/images/readme/CalcAppTest.gif)\r\n\r\nThis results in 2 checks of postconditions, for `sign` and `abs`, and one check for a possible div-by-zero in the `div` entrypoint. In all three cases the checker is able to prove that there is no input that can trigger any of these errors or violate any of the post-conditions!\r\n\r\nThe other apps have more interesting code, tests, and errors to experiment with as well.\r\n\r\n# Installing the Bosque Language (Development)\r\n\r\nIn order to install/build the project the following are needed:\r\n\r\n- 64 bit Operating System\r\n- The LTS version of [node.js](https://nodejs.org/en/download/) ( According to your OS )\r\n- Typescript (install with: `npm i typescript -g`)\r\n- Git and [git-lfs](https://git-lfs.github.com/) setup\r\n- A C++ compiler -- by default `clang` on Linux/Mac and `cl.exe` on Windows\r\n\r\n**Note: If you are running examples from the \"Learn Bosque Programming\" book please use the [LearnBosqueProgramming](https://github.com/microsoft/BosqueLanguage/tree/LearnBosqueProgramming) branch which is sync'd with the version of code used in the book.**\r\n\r\n### Build & Test\r\n\r\nThe `impl` directory contains the reference implementation parser, type checker, interpreter, and command line runner. In this directory, build and test the Bosque reference implementation with:\r\n\r\n```none\r\nnpm install && npm test\r\n```\r\n\r\nThe Z3 theorem prover is provided as a binary dependency in the repo via git LFS. To ensure these are present you will need to have [git-lfs](https://git-lfs.github.com/) installed, run `git lfs install` to setup the needed hooks, and pull. \r\n\r\n### Visual Studio Code Integration\r\n\r\nThis repository provides basic [Visual Studio Code](https://code.visualstudio.com/) IDE support for the Bosque language (currently limited to syntax and brace highlighting). The installation requires manually copying the full `bosque-language-tools/` folder into your user `.vscode/extensions/` directory and restarting VSCode.\r\n\r\n## Contribute\r\n\r\nThis project welcomes community contributions.\r\n\r\n* [Submit bugs](https://github.com/Microsoft/BosqueLanguage/issues) and help us verify fixes.\r\n* [Submit pull requests](https://github.com/Microsoft/BosqueLanguage/pulls) for bug fixes and features and discuss existing proposals.\r\n* Chat about the [@BosqueLanguage](https://twitter.com/BosqueLanguage) (or [#BosqueLanguage](https://twitter.com/hashtag/BosqueLanguage)) on Twitter.\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\r\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\r\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\r\n\r\nPlease refer to [Contribution Guidelines](CONTRIBUTING.md) for more details.\r\n\r\n## License\r\n\r\nCode licensed under the [MIT License](LICENSE.txt).\r\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.6923828125,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.7 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). \n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "bosque-language-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "impl",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}