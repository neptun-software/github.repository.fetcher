{
  "metadata": {
    "timestamp": 1736564783015,
    "page": 479,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "makenotion/notion-sdk-js",
      "stars": 5018,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cspell.json",
          "type": "blob",
          "size": 0.69140625,
          "content": "// cSpell Settings\n{\n  // Version of the setting file.  Always 0.1\n  \"version\": \"0.1\",\n  // language - current active spelling language\n  \"language\": \"en\",\n  // words - list of words to be always considered correct\n  \"words\": [\n    \"notionhq\",\n    \"strikethrough\",\n    \"makenotion\",\n    \"sendgrid\",\n    \"blackmad\",\n    \"octokit\",\n    \"printf\",\n    \"is_toggleable\"\n  ],\n  // flagWords - list of words to be always considered incorrect\n  // This is useful for offensive words and common spelling errors.\n  // For example \"hte\" should be \"the\"\n  \"flagWords\": [\"hte\"],\n  \"ignorePaths\": [\n    \"package.json\",\n    \"package-lock.json\",\n    \"node_modules/**\",\n    \"examples/**/node_modules/**\",\n    \"build/**\"\n  ]\n}\n"
        },
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.0068359375,
          "content": "/build\n"
        },
        {
          "name": ".eslintrc.js",
          "type": "blob",
          "size": 0.6533203125,
          "content": "/* eslint-env node */\n\nmodule.exports = {\n  root: true,\n  parser: \"@typescript-eslint/parser\",\n  plugins: [\"@typescript-eslint\"],\n  extends: [\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/eslint-recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n  ],\n  env: {\n    node: true,\n    commonjs: true,\n  },\n  rules: {\n    \"@typescript-eslint/no-unused-vars\": [\n      \"error\",\n      {\n        args: \"all\",\n        argsIgnorePattern: \"^_\",\n        // Allow assertion types.\n        varsIgnorePattern: \"^_assert\",\n        caughtErrors: \"none\",\n        ignoreRestSiblings: true,\n      },\n    ],\n    \"no-mixed-spaces-and-tabs\": [\"error\", \"smart-tabs\"],\n  },\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1220703125,
          "content": "node_modules\n\npackage-lock.json\n/build\n\n/examples/**/node_modules\n/examples/**/package-lock.json\n/examples/**/.env\n\n.vscode\n\n"
        },
        {
          "name": ".nvmrc",
          "type": "blob",
          "size": 0.01171875,
          "content": "lts/fermium\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.0205078125,
          "content": "build\n.github/**/*.md"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.0908203125,
          "content": "{\n  \"arrowParens\": \"avoid\",\n  \"semi\": false,\n  \"trailingComma\": \"es5\",\n  \"endOfLine\": \"lf\"\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0322265625,
          "content": "Copyright 2021 Notion Labs, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.2216796875,
          "content": "<div align=\"center\">\n\t<h1>Notion SDK for JavaScript</h1>\n\t<p>\n\t\t<b>A simple and easy to use client for the <a href=\"https://developers.notion.com\">Notion API</a></b>\n\t</p>\n\t<br>\n</div>\n\n![Build status](https://github.com/makenotion/notion-sdk-js/actions/workflows/ci.yml/badge.svg)\n[![npm version](https://badge.fury.io/js/%40notionhq%2Fclient.svg)](https://www.npmjs.com/package/@notionhq/client)\n\n## Installation\n\n```\nnpm install @notionhq/client\n```\n\n## Usage\n\n> Use Notion's [Getting Started Guide](https://developers.notion.com/docs/getting-started) to get set up to use Notion's API.\n\nImport and initialize a client using an **integration token** or an OAuth **access token**.\n\n```js\nconst { Client } = require(\"@notionhq/client\")\n\n// Initializing a client\nconst notion = new Client({\n  auth: process.env.NOTION_TOKEN,\n})\n```\n\nMake a request to any Notion API endpoint.\n\n> See the complete list of endpoints in the [API reference](https://developers.notion.com/reference).\n\n```js\n;(async () => {\n  const listUsersResponse = await notion.users.list({})\n})()\n```\n\nEach method returns a `Promise` which resolves the response.\n\n```js\nconsole.log(listUsersResponse)\n```\n\n```\n{\n  results: [\n    {\n      object: 'user',\n      id: 'd40e767c-d7af-4b18-a86d-55c61f1e39a4',\n      type: 'person',\n      person: {\n        email: 'avo@example.org',\n      },\n      name: 'Avocado Lovelace',\n      avatar_url: 'https://secure.notion-static.com/e6a352a8-8381-44d0-a1dc-9ed80e62b53d.jpg',\n    },\n    ...\n  ]\n}\n```\n\nEndpoint parameters are grouped into a single object. You don't need to remember which parameters go in the path, query, or body.\n\n```js\nconst myPage = await notion.databases.query({\n  database_id: \"897e5a76-ae52-4b48-9fdf-e71f5945d1af\",\n  filter: {\n    property: \"Landmark\",\n    rich_text: {\n      contains: \"Bridge\",\n    },\n  },\n})\n```\n\n### Handling errors\n\nIf the API returns an unsuccessful response, the returned `Promise` rejects with a `APIResponseError`.\n\nThe error contains properties from the response, and the most helpful is `code`. You can compare `code` to the values in the `APIErrorCode` object to avoid misspelling error codes.\n\n```js\nconst { Client, APIErrorCode } = require(\"@notionhq/client\")\n\ntry {\n  const notion = new Client({ auth: process.env.NOTION_TOKEN })\n  const myPage = await notion.databases.query({\n    database_id: databaseId,\n    filter: {\n      property: \"Landmark\",\n      rich_text: {\n        contains: \"Bridge\",\n      },\n    },\n  })\n} catch (error) {\n  if (error.code === APIErrorCode.ObjectNotFound) {\n    //\n    // For example: handle by asking the user to select a different database\n    //\n  } else {\n    // Other error handling code\n    console.error(error)\n  }\n}\n```\n\n### Logging\n\nThe client emits useful information to a logger. By default, it only emits warnings and errors.\n\nIf you're debugging an application, and would like the client to log response bodies, set the `logLevel` option to `LogLevel.DEBUG`.\n\n```js\nconst { Client, LogLevel } = require(\"@notionhq/client\")\n\nconst notion = new Client({\n  auth: process.env.NOTION_TOKEN,\n  logLevel: LogLevel.DEBUG,\n})\n```\n\nYou may also set a custom `logger` to emit logs to a destination other than `stdout`. A custom logger is a function which is called with 3 parameters: `logLevel`, `message`, and `extraInfo`. The custom logger should not return a value.\n\n### Client options\n\nThe `Client` supports the following options on initialization. These options are all keys in the single constructor parameter.\n\n| Option      | Default value              | Type         | Description                                                                                                                                                  |\n| ----------- | -------------------------- | ------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `auth`      | `undefined`                | `string`     | Bearer token for authentication. If left undefined, the `auth` parameter should be set on each request.                                                      |\n| `logLevel`  | `LogLevel.WARN`            | `LogLevel`   | Verbosity of logs the instance will produce. By default, logs are written to `stdout`.                                                                       |\n| `timeoutMs` | `60_000`                   | `number`     | Number of milliseconds to wait before emitting a `RequestTimeoutError`                                                                                       |\n| `baseUrl`   | `\"https://api.notion.com\"` | `string`     | The root URL for sending API requests. This can be changed to test with a mock server.                                                                       |\n| `logger`    | Log to console             | `Logger`     | A custom logging function. This function is only called when the client emits a log that is equal or greater severity than `logLevel`.                       |\n| `agent`     | Default node agent         | `http.Agent` | Used to control creation of TCP sockets. A common use is to proxy requests with [`https-proxy-agent`](https://github.com/TooTallNate/node-https-proxy-agent) |\n\n### TypeScript\n\nThis package contains type definitions for all request parameters and responses,\nas well as some useful sub-objects from those entities.\n\nBecause errors in TypeScript start with type `any` or `unknown`, you should use\nthe `isNotionClientError` type guard to handle them in a type-safe way. Each\n`NotionClientError` type is uniquely identified by its `error.code`. Codes in\nthe `APIErrorCode` enum are returned from the server. Codes in the\n`ClientErrorCode` enum are produced on the client.\n\n```ts\ntry {\n  const response = await notion.databases.query({\n    /* ... */\n  })\n} catch (error: unknown) {\n  if (isNotionClientError(error)) {\n    // error is now strongly typed to NotionClientError\n    switch (error.code) {\n      case ClientErrorCode.RequestTimeout:\n        // ...\n        break\n      case APIErrorCode.ObjectNotFound:\n        // ...\n        break\n      case APIErrorCode.Unauthorized:\n        // ...\n        break\n      // ...\n      default:\n        // you could even take advantage of exhaustiveness checking\n        assertNever(error.code)\n    }\n  }\n}\n```\n\n#### Type guards\n\nThere are several [type guards](https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types)\nprovided to distinguish between full and partial API responses.\n\n| Type guard function    | Purpose                                                                                |\n| ---------------------- | -------------------------------------------------------------------------------------- |\n| `isFullPage`           | Determine whether an object is a full `PageObjectResponse`                             |\n| `isFullBlock`          | Determine whether an object is a full `BlockObjectResponse`                            |\n| `isFullDatabase`       | Determine whether an object is a full `DatabaseObjectResponse`                         |\n| `isFullPageOrDatabase` | Determine whether an object is a full `PageObjectResponse` or `DatabaseObjectResponse` |\n| `isFullUser`           | Determine whether an object is a full `UserObjectResponse`                             |\n| `isFullComment`        | Determine whether an object is a full `CommentObjectResponse`                          |\n\nHere is an example of using a type guard:\n\n```typescript\nconst fullOrPartialPages = await notion.databases.query({\n  database_id: \"897e5a76-ae52-4b48-9fdf-e71f5945d1af\",\n})\nfor (const page of fullOrPartialPages.results) {\n  if (!isFullPageOrDatabase(page)) {\n    continue\n  }\n  // The page variable has been narrowed from\n  //      PageObjectResponse | PartialPageObjectResponse | DatabaseObjectResponse | PartialDatabaseObjectResponse\n  // to\n  //      PageObjectResponse | DatabaseObjectResponse.\n  console.log(\"Created at:\", page.created_time)\n}\n```\n\n### Utility functions\n\nThis package also exports a few utility functions that are helpful for dealing with\nany of our paginated APIs.\n\n#### `iteratePaginatedAPI(listFn, firstPageArgs)`\n\nThis utility turns any paginated API into an async iterator.\n\n**Parameters:**\n\n- `listFn`: Any function on the Notion client that represents a paginated API (i.e. accepts\n  `start_cursor`.) Example: `notion.blocks.children.list`.\n- `firstPageArgs`: Arguments that should be passed to the API on the first and subsequent calls\n  to the API, for example a `block_id`.\n\n**Returns:**\n\nAn [async iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols)\nover results from the API.\n\n**Example:**\n\n```javascript\nfor await (const block of iteratePaginatedAPI(notion.blocks.children.list, {\n  block_id: parentBlockId,\n})) {\n  // Do something with block.\n}\n```\n\n#### `collectPaginatedAPI(listFn, firstPageArgs)`\n\nThis utility accepts the same arguments as `iteratePaginatedAPI`, but collects\nthe results into an in-memory array.\n\nBefore using this utility, check that the data you are dealing with is\nsmall enough to fit in memory.\n\n**Parameters:**\n\n- `listFn`: Any function on the Notion client that represents a paginated API (i.e. accepts\n  `start_cursor`.) Example: `notion.blocks.children.list`.\n- `firstPageArgs`: Arguments that should be passed to the API on the first and subsequent calls\n  to the API, for example a `block_id`.\n\n**Returns:**\n\nAn array with results from the API.\n\n**Example:**\n\n```javascript\nconst blocks = await collectPaginatedAPI(notion.blocks.children.list, {\n  block_id: parentBlockId,\n})\n// Do something with blocks.\n```\n\n## Requirements\n\nThis package supports the following minimum versions:\n\n- Runtime: `node >= 12`\n- Type definitions (optional): `typescript >= 4.5`\n\nEarlier versions may still work, but we encourage people building new applications to upgrade to the current stable.\n\n## Getting help\n\nIf you want to submit a feature request for Notion's API, or are experiencing any issues with the API platform, please email us at `developers@makenotion.com`.\n\nTo report issues with the SDK, it is possible to [submit an issue](https://github.com/makenotion/notion-sdk-js/issues) to this repo. However, we don't monitor these issues very closely. We recommend you reach out to us at `developers@makenotion.com` instead.\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "jest.config.js",
          "type": "blob",
          "size": 0.130859375,
          "content": "/** @type {import('ts-jest/dist/types').InitialOptionsTsJest} */\nmodule.exports = {\n  preset: \"ts-jest\",\n  testEnvironment: \"node\",\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.533203125,
          "content": "{\n  \"name\": \"@notionhq/client\",\n  \"version\": \"2.2.15\",\n  \"description\": \"A simple and easy to use client for the Notion API\",\n  \"engines\": {\n    \"node\": \">=12\"\n  },\n  \"homepage\": \"https://developers.notion.com/docs/getting-started\",\n  \"bugs\": {\n    \"url\": \"https://github.com/makenotion/notion-sdk-js/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/makenotion/notion-sdk-js/\"\n  },\n  \"keywords\": [\n    \"notion\",\n    \"notionapi\",\n    \"rest\",\n    \"notion-api\"\n  ],\n  \"main\": \"./build/src\",\n  \"types\": \"./build/src/index.d.ts\",\n  \"scripts\": {\n    \"prepare\": \"npm run build\",\n    \"prepublishOnly\": \"npm run checkLoggedIn && npm run lint && npm run test\",\n    \"build\": \"tsc\",\n    \"prettier\": \"prettier --write .\",\n    \"lint\": \"prettier --check . && eslint . --ext .ts && cspell '**/*' \",\n    \"test\": \"jest ./test\",\n    \"check-links\": \"git ls-files | grep md$ | xargs -n 1 markdown-link-check\",\n    \"prebuild\": \"npm run clean\",\n    \"clean\": \"rm -rf ./build\",\n    \"checkLoggedIn\": \"./scripts/verifyLoggedIn.sh\"\n  },\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"build/package.json\",\n    \"build/src/**\"\n  ],\n  \"dependencies\": {\n    \"@types/node-fetch\": \"^2.5.10\",\n    \"node-fetch\": \"^2.6.1\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"^28.1.4\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.39.0\",\n    \"@typescript-eslint/parser\": \"^5.39.0\",\n    \"cspell\": \"^5.4.1\",\n    \"eslint\": \"^7.24.0\",\n    \"jest\": \"^28.1.2\",\n    \"markdown-link-check\": \"^3.8.7\",\n    \"prettier\": \"^2.8.8\",\n    \"ts-jest\": \"^28.0.5\",\n    \"typescript\": \"^4.8.4\"\n  }\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 1.212890625,
          "content": "{\n  \"compilerOptions\": {\n    /* Visit https://aka.ms/tsconfig.json to read more about this file */\n    // Recommended Node options have been incorporated from https://github.com/tsconfig/bases/blob/master/bases/node14.json\n\n    // Node LTS Fermium (14.x) has mostly complete support for ES2019 (as reported by https://node.green/)\n    \"target\": \"ES2019\",\n    \"module\": \"commonjs\",\n    // \"esModuleInterop\": true,\n\n    // Overrides default in order to remove \"dom\" because this package shouldn't assume the presence of browser APIs\n    \"lib\": [\"ES2019\"],\n\n    // Emit location\n    \"outDir\": \"build\",\n\n    // Emit sourcemaps\n    \"declarationMap\": true,\n    \"sourceMap\": true,\n    \"inlineSources\": true,\n\n    // Emit type definitions\n    \"declaration\": true,\n\n    // Strict mode\n    \"strict\": true,\n\n    // Allow import package.json\n    \"resolveJsonModule\": true,\n\n    // Linter style rules\n    \"noUnusedLocals\": false, // Disabled because we use eslint for this.\n    \"noUnusedParameters\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noUncheckedIndexedAccess\": true,\n    \"noPropertyAccessFromIndexSignature\": true,\n    \"forceConsistentCasingInFileNames\": true\n  },\n\n  \"include\": [\"src/**/*\", \"test/**/*\"]\n}\n"
        }
      ]
    }
  ]
}