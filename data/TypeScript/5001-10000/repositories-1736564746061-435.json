{
  "metadata": {
    "timestamp": 1736564746061,
    "page": 435,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "alephjs/aleph.js",
      "stars": 5257,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.037109375,
          "content": ".DS_Store\ndeno.lock\nexamples/*/output\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.3447265625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, caste, color, religion, or sexual\nidentity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall\n  community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of\n  any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address,\n  without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at i@jex.me.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of\nactions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or permanent\nban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the\ncommunity.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.724609375,
          "content": "# Contributing to Aleph.js\n\nWelcome, and thank you for taking time in contributing to Aleph.js! You can contribute to Aleph.js in different ways:\n\n- Submit new features\n- Report and fix bugs\n- Review code\n- Improve our [documentation](https://github.com/alephjs/alephjs.org)\n\n## Development Setup\n\nYou will need [Deno](https://deno.land/) 1.20+.\n\n1. Fork this repository to your own GitHub account.\n2. Clone the repository to your local device.\n3. Create a new branch `git checkout -b BRANCH_NAME`.\n4. Change code then run the examples.\n5. [Push your branch to Github after all tests passed.](#Testing)\n6. Make a [pull request](https://github.com/alephjs/aleph.js/pulls).\n7. Merge to master branch by our maintainers.\n\n### Run The Examples\n\n```bash\n# Run the example app in development mode\ndeno run -A dev.ts examples/$APP/server.ts\n\n# Run the example app in production mode\ndeno run -A examples/$APP/server.ts\n\n# Optimize the application (bundling, ssg, etc.)\ndeno run -A examples/$APP/server.ts --build\n```\n\n**Examples**: https://github.com/alephjs/aleph.js/tree/main/examples\n\n## Testing\n\nYou can run all the testings by the following command:\n\n```bash\ndeno test -A\n```\n\n## Project Structure\n\n- **/examples** examples to get started\n- **/framework**\n  - **core** framework framework core\n  - **react** framework framework for React\n- **/server** server core of Aleph.js\n- **/shared** shared libraries\n- **/tests** unit/integration testings\n\n## Code Style We Followed\n\n- Double quote for string\n- Ends with semicolon\n- 2 spaces indent\n- Types everything\n- Order the imports\n- Remove unused code\n- Format code before commit\n\n```bash\ndeno fmt **/*.{ts,tsx}\n```\n\n## Code of Conduct\n\nAll contributors are expected to follow our [Code of Conduct](CODE_OF_CONDUCT.md).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0673828125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2020-2022 The Aleph.js authors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.86328125,
          "content": "[![Aleph.js: The Full-stack Framework in Deno.](.github/poster.svg)](https://alephjs.org)\n\n<p>\n  <a href=\"https://discord.gg/pWGdS7sAqD\"><img src=\"https://img.shields.io/discord/775256646821085215?color=%23008181&label=Chat&labelColor=%23111&logo=discord&logoColor=%23aaaaaa\" alt=\"Chat\"></a>\n  <a href=\"https://twitter.com/intent/follow?screen_name=alephjs\"><img src=\"https://img.shields.io/twitter/follow/alephjs?style=social\" alt=\"Twitter\"></a>\n</p>\n\n> ⚠️ Not yet 1.0. Many things are subject to change. Documentation is lacking in many places. Try it out and give us\n> feedback!\n\nSome demo apps deployed to [Deno Deploy](https://deno.com/deploy) with the new architecture:\n\n- React App: https://aleph-hello.deno.dev/\n- REST API: https://aleph-api.deno.dev/\n- React 18 Suspense SSR: https://aleph-suspense-ssr.deno.dev/\n- UnoCSS(tailwind): https://aleph-unocss.deno.dev/\n- Monaco Editor: https://aleph-monaco-editor.deno.dev/\n- Yew SSR: https://aleph-yew.deno.dev/\n- Github OAuth Middleware: https://aleph-github-oauth.deno.dev/\n\n> **Source code**: https://github.com/alephjs/aleph.js/tree/main/examples\n\n## Real-world Apps\n\n- Deno Deploy: https://dash.deno.com\n- Meet Me: https://meet-me.deno.dev ([source](https://github.com/denoland/meet-me))\n\n## Get started\n\nInitialize a new project, you can pick a start template with `--template` flag, available templates:\n`[react, react-mdx, api, yew]`\n\n```bash\ndeno run -A -r https://alephjs.org/init.ts\n```\n\nafter `init`, you can run the app with deno tasks:\n\n```bash\n# go to the app root created by the `init`\ncd APPDIR\n\n# run the app in devlopment mode\ndeno task dev\n\n# run the app in production mode\ndeno task start\n```\n\n## Documentation\n\n> The new docs site is working in progress: https://aleph.deno.dev\n> ([PR](https://github.com/alephjs/alephjs.org/pull/58)). You can join the Aleph.js\n> [Discord](https://discord.com/invite/pWGdS7sAqD) to get helps.\n"
        },
        {
          "name": "deno.json",
          "type": "blob",
          "size": 0.9873046875,
          "content": "{\n  \"compilerOptions\": {\n    \"lib\": [\n      \"dom\",\n      \"dom.iterable\",\n      \"dom.extras\",\n      \"deno.ns\"\n    ],\n    \"types\": [\n      \"./types.d.ts\"\n    ],\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"https://esm.sh/v126/react@18.2.0\"\n  },\n  \"importMap\": \"./import_map.json\",\n  \"fmt\": {\n    \"options\": {\n      \"lineWidth\": 120\n    },\n    \"files\": {\n      \"exclude\": [\n        \".vscode\",\n        \"LICENSE\",\n        \"CODE_OF_CONDUCT.md\",\n        \"examples/yew-app/pkg\",\n        \"examples/yew-app/target\",\n        \"examples/with-unocss/yew-app/pkg\",\n        \"examples/with-unocss/yew-app/target\",\n        \"examples/leptos-app/pkg\",\n        \"examples/leptos-app/target\",\n        \"examples/with-unocss/leptos-app/pkg\",\n        \"examples/with-unocss/leptos-app/target\"\n      ]\n    }\n  },\n  \"lint\": {\n    \"files\": {\n      \"exclude\": [\n        \"examples/yew-app/pkg\",\n        \"examples/with-unocss/yew-app/pkg\",\n        \"examples/leptos-app/pkg\",\n        \"examples/with-unocss/leptos-app/pkg\"\n      ]\n    }\n  }\n}\n"
        },
        {
          "name": "dev.ts",
          "type": "blob",
          "size": 0.078125,
          "content": "import dev from \"./server/dev.ts\";\n\nif (import.meta.main) {\n  dev(Deno.args);\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "framework",
          "type": "tree",
          "content": null
        },
        {
          "name": "import_map.json",
          "type": "blob",
          "size": 0.763671875,
          "content": "{\n  \"imports\": {\n    \"std/\": \"https://deno.land/std@0.180.0/\",\n    \"aleph/\": \"./\",\n    \"aleph/server\": \"./server/mod.ts\",\n    \"aleph/dev\": \"./server/dev.ts\",\n    \"aleph/plugins/deploy\": \"./plugins/deploy.ts\",\n    \"aleph/plugins/unocss\": \"./plugins/unocss.ts\",\n    \"aleph/plugins/mdx\": \"./plugins/mdx.ts\",\n    \"aleph/react\": \"./framework/react/mod.ts\",\n    \"aleph/plugins/react\": \"./framework/react/plugin.ts\",\n    \"@unocss/core\": \"https://esm.sh/v126/@unocss/core@0.50.6\",\n    \"@unocss/preset-uno\": \"https://esm.sh/v126/@unocss/preset-uno@0.50.6\",\n    \"react\": \"https://esm.sh/v126/react@18.2.0\",\n    \"react-dom\": \"https://esm.sh/v126/react-dom@18.2.0\",\n    \"react-dom/\": \"https://esm.sh/v126/react-dom@18.2.0/\",\n    \"@mdx-js/react\": \"https://esm.sh/v126/@mdx-js/react@2.3.0\"\n  }\n}\n"
        },
        {
          "name": "init.ts",
          "type": "blob",
          "size": 10.837890625,
          "content": "/** @format */\n\nimport { Untar } from \"https://deno.land/std@0.192.0/archive/untar.ts\";\nimport { parse } from \"https://deno.land/std@0.192.0/flags/mod.ts\";\nimport { blue, bold, cyan, dim, green, red } from \"https://deno.land/std@0.192.0/fmt/colors.ts\";\nimport { copy as copyDir } from \"https://deno.land/std@0.192.0/fs/copy.ts\";\nimport { copy } from \"https://deno.land/std@0.192.0/streams/copy.ts\";\nimport { readerFromStreamReader } from \"https://deno.land/std@0.192.0/streams/reader_from_stream_reader.ts\";\nimport { ensureDir } from \"https://deno.land/std@0.192.0/fs/ensure_dir.ts\";\nimport { basename, join } from \"https://deno.land/std@0.192.0/path/mod.ts\";\n\nconst templates = [\"react\", \"react-mdx\", \"yew\", \"leptos\", \"api\"];\n\nconst rsApps = [\"yew\", \"leptos\"];\n\nconst unocssApps = [\"react\", \"yew\", \"leptos\"];\n\nconst versions = {\n  react: \"18.2.0\",\n};\n\ntype Options = {\n  template?: string;\n};\n\nexport default async function init(nameArg?: string, options?: Options) {\n  let { template } = options || {};\n\n  // get and check the project name\n  const name = nameArg ?? (await ask(\"Project Name:\"));\n  if (!name) {\n    console.error(`${red(\"!\")} Please entry project name.`);\n    Deno.exit(1);\n  }\n\n  if (template && !templates.includes(template)) {\n    console.error(\n      `${red(\"!\")} Invalid template name ${\n        red(\n          template,\n        )\n      }, must be one of [${blue(templates.join(\",\"))}]`,\n    );\n    Deno.exit(1);\n  }\n\n  // check the dir is clean\n  if (\n    !(await isFolderEmpty(Deno.cwd(), name)) &&\n    !(await confirm(`Folder ${blue(name)} already exists, continue?`))\n  ) {\n    Deno.exit(1);\n  }\n\n  if (!template) {\n    const answer = await ask(\n      [\n        \"Select a framework:\",\n        ...templates.map(\n          (name, i) =>\n            `  ${\n              bold(\n                (i + 1).toString(),\n              )\n            }. ${getTemplateDisplayName(name)}`,\n        ),\n        dim(`[1-${templates.length}]`),\n      ].join(\"\\n\"),\n    );\n    const n = parseInt(answer);\n    if (!isNaN(n) && n > 0 && n <= templates.length) {\n      template = templates[n - 1];\n    } else {\n      console.error(\n        `${red(\"!\")} Please entry ${cyan(`[1-${templates.length}]`)}.`,\n      );\n      Deno.exit(1);\n    }\n  }\n\n  const appDir = join(Deno.cwd(), name);\n  const withUnocss = unocssApps.includes(template!) &&\n    (await confirm(\"Use Atomic CSS (powered by Unocss)?\"));\n  const withVscode = await confirm(\n    \"Initialize VS Code workspace configuration?\",\n  );\n  const deploy = !rsApps.includes(template) ? await confirm(\"Deploy to Deno Deploy?\") : false;\n  const isRsApp = rsApps.includes(template);\n\n  let alephPkgUri: string;\n  if (import.meta.url.startsWith(\"file://\")) {\n    const src = `examples/${withUnocss ? \"with-unocss/\" : \"\"}${template}-app/`;\n    await copyDir(src, name);\n    alephPkgUri = \"..\";\n  } else {\n    console.log(\n      `${dim(\"↓\")} Downloading template(${\n        blue(\n          template!,\n        )\n      }), this might take a moment...`,\n    );\n    const res = await fetch(\n      \"https://cdn.deno.land/aleph/meta/versions.json\",\n    );\n    if (res.status !== 200) {\n      console.error(await res.text());\n      Deno.exit(1);\n    }\n    const { latest: VERSION } = await res.json();\n    const repo = \"alephjs/aleph.js\";\n    const resp = await fetch(\n      `https://codeload.github.com/${repo}/tar.gz/refs/tags/${VERSION}`,\n    );\n    if (resp.status !== 200) {\n      console.error(await resp.text());\n      Deno.exit(1);\n    }\n    // deno-lint-ignore ban-ts-comment\n    // @ts-ignore\n    const gz = new DecompressionStream(\"gzip\");\n    const entryList = new Untar(\n      readerFromStreamReader(\n        resp.body!.pipeThrough<Uint8Array>(gz).getReader(),\n      ),\n    );\n    const prefix = `${basename(repo)}-${VERSION}/examples/${withUnocss ? \"with-unocss/\" : \"\"}${template}-app/`;\n    for await (const entry of entryList) {\n      if (\n        entry.fileName.startsWith(prefix) &&\n        !entry.fileName.endsWith(\"/README.md\")\n      ) {\n        const fp = join(appDir, trimPrefix(entry.fileName, prefix));\n        if (entry.type === \"directory\") {\n          await ensureDir(fp);\n          continue;\n        }\n        const file = await Deno.open(fp, { write: true, create: true });\n        await copy(entry, file);\n      }\n    }\n    alephPkgUri = `https://deno.land/x/aleph@${VERSION}`;\n  }\n\n  const serverCode = await Deno.readTextFile(join(appDir, \"server.ts\"));\n  if (!isRsApp && !deploy) {\n    await Deno.writeTextFile(\n      join(appDir, \"server.ts\"),\n      serverCode\n        .replace('import modules from \"./routes/_export.ts\";\\n', \"\")\n        .replace('import denoDeploy from \"aleph/plugins/deploy\";\\n', \"\")\n        .replace(\n          \"    denoDeploy({ moduleMain: import.meta.url, modules }),\\n\",\n          \"\",\n        )\n        .replace(\"    denoDeploy({ modules }),\\n\", \"\"),\n    );\n    await Deno.remove(join(appDir, \"routes/_export.ts\"));\n  } else {\n    await Deno.writeTextFile(\n      join(appDir, \"server.ts\"),\n      serverCode.replace(\n        \"denoDeploy({ moduleMain: import.meta.url, modules })\",\n        \"denoDeploy({ modules })\",\n      ),\n    );\n  }\n\n  const res = await fetch(\"https://esm.sh/status.json\");\n  if (res.status !== 200) {\n    console.error(await res.text());\n    Deno.exit(1);\n  }\n  const { version: ESM_VERSION } = await res.json();\n  const denoConfig = {\n    compilerOptions: {\n      lib: [\"dom\", \"dom.iterable\", \"dom.extras\", \"deno.ns\"],\n      types: [`${alephPkgUri}/types.d.ts`],\n    },\n    importMap: \"import_map.json\",\n    tasks: {\n      dev: (await existsFile(join(appDir, \"dev.ts\"))) ? \"deno run -A dev.ts\" : `deno run -A ${alephPkgUri}/dev.ts`,\n      start: \"deno run -A server.ts\",\n      build: \"deno run -A server.ts --build\",\n      \"esm:add\": `deno run -A https://esm.sh/v${ESM_VERSION} add`,\n      \"esm:update\": `deno run -A https://esm.sh/v${ESM_VERSION} update`,\n      \"esm:remove\": `deno run -A https://esm.sh/v${ESM_VERSION} remove`,\n    },\n  };\n  const importMap = {\n    imports: {\n      \"~/\": \"./\",\n      \"std/\": \"https://deno.land/std@0.180.0/\",\n      \"aleph/\": `${alephPkgUri}/`,\n      \"aleph/server\": `${alephPkgUri}/server/mod.ts`,\n      \"aleph/dev\": `${alephPkgUri}/server/dev.ts`,\n    } as Record<string, string>,\n    scopes: {},\n  };\n  if (deploy) {\n    Object.assign(importMap.imports, {\n      \"aleph/plugins/deploy\": `${alephPkgUri}/plugins/deploy.ts`,\n    });\n  }\n  if (withUnocss) {\n    Object.assign(importMap.imports, {\n      \"aleph/plugins/unocss\": `${alephPkgUri}/plugins/unocss.ts`,\n      \"@unocss/core\": `https://esm.sh/v${ESM_VERSION}/@unocss/core@0.50.6`,\n      \"@unocss/preset-uno\": `https://esm.sh/v${ESM_VERSION}/@unocss/preset-uno@0.50.6`,\n    });\n  }\n  switch (template) {\n    case \"react-mdx\":\n      Object.assign(importMap.imports, {\n        \"aleph/plugins/mdx\": `${alephPkgUri}/plugins/mdx.ts`,\n        \"@mdx-js/react\": `https://esm.sh/v${ESM_VERSION}/@mdx-js/react@2.3.0`,\n      });\n    /* falls through */\n    case \"react\": {\n      Object.assign(denoConfig.compilerOptions, {\n        jsx: \"react-jsx\",\n        jsxImportSource: `https://esm.sh/v${ESM_VERSION}/react@${versions.react}`,\n      });\n      Object.assign(importMap.imports, {\n        \"aleph/react\": `${alephPkgUri}/framework/react/mod.ts`,\n        \"aleph/plugins/react\": `${alephPkgUri}/framework/react/plugin.ts`,\n        react: `https://esm.sh/v${ESM_VERSION}/react@${versions.react}`,\n        \"react-dom\": `https://esm.sh/v${ESM_VERSION}/react-dom@${versions.react}`,\n        \"react-dom/\": `https://esm.sh/v${ESM_VERSION}/react-dom@${versions.react}/`,\n      });\n      break;\n    }\n  }\n\n  await ensureDir(appDir);\n  await Promise.all([\n    Deno.writeTextFile(\n      join(appDir, \"deno.json\"),\n      JSON.stringify(denoConfig, undefined, 2),\n    ),\n    Deno.writeTextFile(\n      join(appDir, \"import_map.json\"),\n      JSON.stringify(importMap, undefined, 2),\n    ),\n  ]);\n\n  if (withVscode) {\n    const settings = {\n      \"deno.enable\": true,\n      \"deno.lint\": true,\n      \"deno.config\": \"./deno.json\",\n    };\n    await ensureDir(join(appDir, \".vscode\"));\n    await Deno.writeTextFile(\n      join(appDir, \".vscode\", \"settings.json\"),\n      JSON.stringify(settings, undefined, 2),\n    );\n  }\n\n  await Deno.run({\n    cmd: [Deno.execPath(), \"cache\", \"--no-lock\", \"server.ts\"],\n    cwd: appDir,\n    stderr: \"inherit\",\n    stdout: \"inherit\",\n  }).status();\n\n  console.log(\n    [\n      \"\",\n      green(\"▲ Aleph.js is ready to go!\"),\n      \"\",\n      `${dim(\"$\")} cd ${name}`,\n      `${dim(\"$\")} deno task dev    ${\n        dim(\n          \"# Start the server in `development` mode\",\n        )\n      }`,\n      `${dim(\"$\")} deno task start  ${\n        dim(\n          \"# Start the server in `production` mode\",\n        )\n      }`,\n      `${dim(\"$\")} deno task build  ${\n        dim(\n          \"# Build & Optimize the app (bundling, SSG, etc.)\",\n        )\n      }`,\n      \"\",\n      `Docs: ${cyan(\"https://alephjs.org/docs\")}`,\n      `Bugs: ${cyan(\"https://github.com/alephjs/aleph.js/issues\")}`,\n      \"\",\n    ].join(\"\\n\"),\n  );\n  Deno.exit(0);\n}\n\nasync function isFolderEmpty(root: string, name: string): Promise<boolean> {\n  const dir = join(root, name);\n  if (await existsFile(dir)) {\n    throw new Error(`Folder ${name} already exists as a file.`);\n  }\n  if (await existsDir(dir)) {\n    for await (const file of Deno.readDir(dir)) {\n      if (file.name !== \".DS_Store\") {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nasync function ask(question = \":\") {\n  await Deno.stdout.write(\n    new TextEncoder().encode(cyan(\"? \") + question + \" \"),\n  );\n  const buf = new Uint8Array(1024);\n  const n = <number> await Deno.stdin.read(buf);\n  const answer = new TextDecoder().decode(buf.subarray(0, n));\n  return answer.trim();\n}\n\nasync function confirm(question = \"are you sure?\") {\n  let a: string;\n  // deno-lint-ignore no-empty\n  while (!/^(y|n|)$/i.test(a = await ask(question + dim(\" [y/N]\")))) {}\n  return a.toLowerCase() === \"y\";\n}\n\nfunction trimPrefix(s: string, prefix: string): string {\n  if (prefix !== \"\" && s.startsWith(prefix)) {\n    return s.slice(prefix.length);\n  }\n  return s;\n}\n\nfunction getTemplateDisplayName(name: string) {\n  if (name === \"api\") {\n    return \"REST API\";\n  }\n  if (name === \"react-mdx\") {\n    return \"React with MDX\";\n  }\n  return name.at(0)?.toUpperCase() + name.slice(1);\n}\n\n/** Check whether or not the given path exists as a directory. */\nexport async function existsDir(path: string): Promise<boolean> {\n  try {\n    const stat = await Deno.lstat(path);\n    return stat.isDirectory;\n  } catch (err) {\n    if (err instanceof Deno.errors.NotFound) {\n      return false;\n    }\n    throw err;\n  }\n}\n\n/** Check whether or not the given path exists as regular file. */\nexport async function existsFile(path: string): Promise<boolean> {\n  try {\n    const stat = await Deno.lstat(path);\n    return stat.isFile;\n  } catch (err) {\n    if (err instanceof Deno.errors.NotFound) {\n      return false;\n    }\n    throw err;\n  }\n}\n\nif (import.meta.main) {\n  const { _: args, ...options } = parse(Deno.args);\n  await init(args[0] as string | undefined, options);\n}\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "shared",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "types.d.ts",
          "type": "blob",
          "size": 0.751953125,
          "content": "type CTX = import(\"./server/types.ts\").Context;\n// deno-lint-ignore no-empty-interface\ndeclare interface Context extends CTX {}\n\n/** The Middleare for Aleph server. */\ndeclare interface Middleware {\n  /** The middleware name. */\n  readonly name?: string;\n  /** The middleware fetch method. */\n  fetch(request: Request, context: Context): Promise<Response> | Response;\n}\n\ndeclare interface ImportMeta {\n  /** Aleph.js HMR `hot` API. */\n  readonly hot?: {\n    readonly data: Record<string, unknown>;\n    accept<T = Record<string, unknown>>(callback?: (module: T) => void): void;\n    decline(): void;\n    dispose: (callback: (data: Record<string, unknown>) => void) => void;\n    invalidate(): void;\n    watchFile(filename: string, callback: () => void): () => void;\n  };\n}\n"
        },
        {
          "name": "version.ts",
          "type": "blob",
          "size": 0.185546875,
          "content": "/** `VERSION` managed by https://deno.land/x/publish */\nexport const VERSION = \"1.0.0-beta.44\";\n\n/** The flag indicates that the version is canary version. */\nexport const isCanary = false;\n"
        }
      ]
    }
  ]
}