{
  "metadata": {
    "timestamp": 1736564677107,
    "page": 345,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "konvajs/react-konva",
      "stars": 5842,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.150390625,
          "content": "examples/*/bundle.js\nnode_modules\nnpm-debug.log\ntest/tests.bundle.js\n.DS_Store\n.idea\n.lock\nlib\nes\ntest-build\n.parcel-cache\ndist\npackage-lock.json\n.vscode\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.11328125,
          "content": "language: node_js\nnode_js:\n  - '6.11'\nscript:\n  - npm run build && npm test\nsudo: required\naddons:\n  chrome: stable\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2017 Anton Lavrenov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.2978515625,
          "content": "# React Konva\n\n[![Financial Contributors on Open Collective](https://opencollective.com/konva/all/badge.svg?label=financial+contributors)](https://opencollective.com/konva)\n[![npm version](https://badge.fury.io/js/react-konva.svg)](http://badge.fury.io/js/react-konva)\n[![Build Status](https://github.com/konvajs/react-konva/actions/workflows/test.yml/badge.svg)](https://github.com/konvajs/react-konva/actions/workflows/test.ym)\n\n![ReactKonva Logo](https://cloud.githubusercontent.com/assets/1443320/12193428/3bda2fcc-b623-11e5-8319-b1ccfc95eaec.png)\n\nReact Konva is a JavaScript library for drawing complex canvas graphics using\n[React](http://facebook.github.io/react/).\n\nIt provides declarative and reactive bindings to the\n[Konva Framework](http://konvajs.github.io/).\n\n# [OPEN DEMO](https://codesandbox.io/s/5m3nwp787x)\n\nAn attempt to make [React](http://facebook.github.io/react/) work with the HTML5\ncanvas library. The goal is to have similar declarative markup as normal React\nand to have similar data-flow model.\n\n**At the current moment, `react-konva` is not supported in React Native environment.**\n\nCurrently you can use all `Konva` components as React components and all `Konva`\nevents are supported on them in same way as normal browser events are supported.\n\n## Installation\n\n```bash\nnpm install react-konva konva --save\n```\n\n## [Tutorials and Documentation](https://konvajs.github.io/docs/react/)\n\n## Example\n\n```javascript\nimport React, { useState } from 'react';\nimport { render } from 'react-dom';\nimport { Stage, Layer, Rect, Text } from 'react-konva';\nimport Konva from 'konva';\n\nconst ColoredRect = () => {\n  const [color, setColor] = useState('green');\n\n  const handleClick = () => {\n    setColor(Konva.Util.getRandomColor());\n  };\n\n  return (\n    <Rect\n      x={20}\n      y={20}\n      width={50}\n      height={50}\n      fill={color}\n      shadowBlur={5}\n      onClick={handleClick}\n    />\n  );\n};\n\nconst App = () => {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Text text=\"Try click on rect\" />\n        <ColoredRect />\n      </Layer>\n    </Stage>\n  );\n};\n\nrender(<App />, document.getElementById('root'));\n```\n\nTo get more info about `Konva` you can read\n[Konva Overview](http://konvajs.github.io/docs/overview.html).\n\n**Actually you don't need to learn `react-konva`. Just learn `Konva` framework, you will understand how to use `react-konva`**\n\n## Core API\n\n`react-konva` supports all shapes, that `Konva` supports with the same names, and also it supports all the same events like `click`, `touchmove`, `dragend`, etc with \"on\" prefix like `onClick`, `onTouchMove`, `onDragEnd`.\n\n### Getting reference to Konva objects\n\nTo get reference of `Konva` instance of a node you can use `ref` property.\n\n```javascript\nimport React, { useEffect, useRef } from 'react';\n\nconst MyShape = () => {\n  const circleRef = useRef();\n\n  useEffect(() => {\n    // log Konva.Circle instance\n    console.log(circleRef.current);\n  }, []);\n\n  return <Circle ref={circleRef} radius={50} fill=\"black\" />;\n};\n```\n\n### Strict mode\n\nBy default `react-konva` works in \"non-strict\" mode. If you changed a property **manually** (or by user action like `drag&drop`) properties of the node will be not matched with properties from `render()`. `react-konva` updates ONLY properties changed in `render()`.\n\nIn strict mode `react-konva` will update all properties of the nodes to the values that you provided in `render()` function, no matter changed they or not.\n\nYou should decide what mode is better in your actual use case.\n\nTo enable strict mode globally you can do this:\n\n```javascript\nimport { useStrictMode } from 'react-konva';\n\nuseStrictMode(true);\n```\n\nOr you can enable it only for some components:\n\n```javascript\n<Rect width={50} height={50} fill=\"black\" _useStrictMode />\n```\n\nTake a look into this example:\n\n```javascript\nimport { Circle } from 'react-konva';\nimport Konva from 'konva';\n\nconst Shape = () => {\n  const [color, setColor] = React.useState();\n\n  return (\n    <Circle\n      x={0}\n      y={0}\n      draggable\n      radius={50}\n      fill={color}\n      onDragEnd={() => {\n        setColor(Konva.Util.getRandomColor());\n      }}\n    />\n  );\n};\n```\n\nThe circle is `draggable` and it changes its color on `dragend` event. In `strict` mode position of the node will be reset back to `{x: 0, y: 0}` (as we defined in render). But in `non-strict` mode the circle will keep its position, because `x` and `y` are not changed in render.\n\n### Minimal bundle\n\nBy default `react-konva` imports full `Konva` version. With all the shapes and all filters. To minimize bundle size you can use minimal core version of `react-konva`:\n\n```javascript\n// load minimal version of 'react-konva`\nimport { Stage, Layer, Rect } from 'react-konva/lib/ReactKonvaCore';\n\n// minimal version has NO support for core shapes and filters\n// if you want import a shape into Konva namespace you can just do this:\nimport 'konva/lib/shapes/Rect';\n```\n\nDemo: [https://codesandbox.io/s/6l97wny44z](https://codesandbox.io/s/6l97wny44z)\n\n## Usage with Next.js\n\nNote: `react-konva` is designed to work in the client-side. On the server side, it will render just empty div. So it doesn't make much sense to use react-konva for server-side rendering. In Next.js you may have issue like\n\n> Module not found: Can't resolve 'canvas'\n\nWhy do we see this error? `canvas` module is used for canvas rendering in Node.JS environment. `konva` library will use it there, but it doesn't have this dependency explicitly.\n\nHow to solver this issue? There are two approaches:\n\n### Approach 1: manually install canvas module\n\nYou can install `canvas` module manually.\n\n```bash\nnpm install canvas@next\n```\n\nThe solution will solve the issue, but it will have unnecessary dependency on `canvas` module which may increase build time a little bit.\n\n### Approach 2: Use dynamic import\n\nNext.js docs: https://nextjs.org/docs/pages/building-your-application/optimizing/lazy-loading\n\nWith this approach your canvas component will be loaded on the client-side only. So you will not have any issues with server-side rendering. Also `next.js` will automatically understand that it doesn't need to load `canvas` module, because it is used for server-side rendering only.\n\n#### Step 1 - Create canvas component\n\nYou need to define your canvas components somewhere in your `components` folder.\n\n**It must be placed outside of `pages` or `app` folder (because they are used for server rendering).**\n\nYour `components/canvas.js` file may look like this:\n\n```js\nimport { Stage, Layer, Circle } from 'react-konva';\n\nfunction Canvas(props) {\n  return (\n    <Stage width={window.innerWidth} height={window.innerHeight}>\n      <Layer>\n        <Circle x={200} y={100} radius={50} fill=\"green\" />\n      </Layer>\n    </Stage>\n  );\n}\n\nexport default Canvas;\n```\n\n#### Step 2 - Use dynamic import\n\nThen you can use it in your page. Notice, it is imported to have `'use client';`.\n\n```js\n'use client';\nimport dynamic from 'next/dynamic';\n\nconst Canvas = dynamic(() => import('../components/canvas'), {\n  ssr: false,\n});\n\nexport default function Page(props) {\n  return <Canvas />;\n}\n```\n\n#### Step 3 - Setup next.config.js\n\nIn some versions of next.js you may need to set up `next.config.js` to make it work:\n\n```js\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  webpack: (config) => {\n    config.externals = [...config.externals, { canvas: 'canvas' }]; // required to make Konva & react-konva work\n    return config;\n  },\n};\n\nmodule.exports = nextConfig;\n```\n\n### Usage with React Context\n\n**Note: this section may be not relevant, because this issue was fixed in `react-konva@18.2.2`. So context should work by default.**\n\nDue to a [known issue](https://github.com/facebook/react/issues/13336) with React, Contexts are not accessible by children of the react-konva `Stage` component. If you need to subscribe to a context from within the `Stage`, you need to \"bridge\" the context by creating a `Provider` as a child of the `Stage`. For more info, see [this discussion](https://github.com/konvajs/react-konva/issues/188#issuecomment-478302062) and this [react-redux demo](https://github.com/konvajs/react-konva/issues/311#issuecomment-454411007). Here is an example of bridging the context ([live demo](https://codesandbox.io/s/ykqw8r4r21)):\n\n```js\nimport React, { Component } from 'react';\nimport Konva from 'konva';\nimport { render } from 'react-dom';\nimport { Stage, Layer, Rect } from 'react-konva';\n\nconst ThemeContext = React.createContext('red');\n\nconst ThemedRect = () => {\n  const value = React.useContext(ThemeContext);\n  return (\n    <Rect x={20} y={50} width={100} height={100} fill={value} shadowBlur={10} />\n  );\n};\n\nconst Canvas = () => {\n  return (\n    <ThemeContext.Consumer>\n      {(value) => (\n        <Stage width={window.innerWidth} height={window.innerHeight}>\n          <ThemeContext.Provider value={value}>\n            <Layer>\n              <ThemedRect />\n            </Layer>\n          </ThemeContext.Provider>\n        </Stage>\n      )}\n    </ThemeContext.Consumer>\n  );\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <ThemeContext.Provider value=\"blue\">\n        <Canvas />\n      </ThemeContext.Provider>\n    );\n  }\n}\n```\n\n## Comparisons\n\n### react-konva vs react-canvas\n\n[react-canvas](https://github.com/Flipboard/react-canvas) is a completely\ndifferent react plugin. It allows you to draw DOM-like objects (images, texts)\non canvas element in very performant way. It is NOT about drawing graphics, but\nreact-konva is exactly for drawing complex graphics on `<canvas>` element from\nReact.\n\n### react-konva vs react-art\n\n[react-art](https://github.com/reactjs/react-art) allows you to draw graphics on\na page. It also supports SVG for output. But it has no support of events of\nshapes.\n\n### react-konva vs vanilla canvas\n\nVanilla canvas is faster because when you use `react-konva` you have two layers of abstractions. Konva framework is on top of canvas and React is on top of Konva.\nDepending on the use case this approach can be slow.\nThe purpose of `react-konva` is to reduce the complexity of the application and use well-known declarative way for drawing on canvas.\n\n## [CHANGELOG](https://github.com/konvajs/react-konva/releases)\n\n**Note: you can find a lot of demos and examples of using Konva there:\n[http://konvajs.github.io/](http://konvajs.github.io/). Really, just go there and take a look what Konva can do for you. You will be able to do the same with `react-konva` too.**\n\n```\n\n```\n"
        },
        {
          "name": "ReactKonvaCore.d.ts",
          "type": "blob",
          "size": 5.287109375,
          "content": "// special file for minimal import\nimport * as React from 'react';\nimport * as ReactReconciler from 'react-reconciler'\nimport Konva from 'konva';\n\nexport interface KonvaNodeEvents {\n  onMouseOver?(evt: Konva.KonvaEventObject<MouseEvent>): void;\n  onMouseMove?(evt: Konva.KonvaEventObject<MouseEvent>): void;\n  onMouseOut?(evt: Konva.KonvaEventObject<MouseEvent>): void;\n  onMouseEnter?(evt: Konva.KonvaEventObject<MouseEvent>): void;\n  onMouseLeave?(evt: Konva.KonvaEventObject<MouseEvent>): void;\n  onMouseDown?(evt: Konva.KonvaEventObject<MouseEvent>): void;\n  onMouseUp?(evt: Konva.KonvaEventObject<MouseEvent>): void;\n  onWheel?(evt: Konva.KonvaEventObject<WheelEvent>): void;\n  onClick?(evt: Konva.KonvaEventObject<MouseEvent>): void;\n  onDblClick?(evt: Konva.KonvaEventObject<MouseEvent>): void;\n  onTouchStart?(evt: Konva.KonvaEventObject<TouchEvent>): void;\n  onTouchMove?(evt: Konva.KonvaEventObject<TouchEvent>): void;\n  onTouchEnd?(evt: Konva.KonvaEventObject<TouchEvent>): void;\n  onTap?(evt: Konva.KonvaEventObject<Event>): void;\n  onDblTap?(evt: Konva.KonvaEventObject<Event>): void;\n  onDragStart?(evt: Konva.KonvaEventObject<DragEvent>): void;\n  onDragMove?(evt: Konva.KonvaEventObject<DragEvent>): void;\n  onDragEnd?(evt: Konva.KonvaEventObject<DragEvent>): void;\n  onTransform?(evt: Konva.KonvaEventObject<Event>): void;\n  onTransformStart?(evt: Konva.KonvaEventObject<Event>): void;\n  onTransformEnd?(evt: Konva.KonvaEventObject<Event>): void;\n  onContextMenu?(evt: Konva.KonvaEventObject<PointerEvent>): void;\n  onPointerDown?(evt: Konva.KonvaEventObject<PointerEvent>): void;\n  onPointerMove?(evt: Konva.KonvaEventObject<PointerEvent>): void;\n  onPointerUp?(evt: Konva.KonvaEventObject<PointerEvent>): void;\n  onPointerCancel?(evt: Konva.KonvaEventObject<PointerEvent>): void;\n  onPointerEnter?(evt: Konva.KonvaEventObject<PointerEvent>): void;\n  onPointerLeave?(evt: Konva.KonvaEventObject<PointerEvent>): void;\n  onPointerOver?(evt: Konva.KonvaEventObject<PointerEvent>): void;\n  onPointerOut?(evt: Konva.KonvaEventObject<PointerEvent>): void;\n  onPointerClick?(evt: Konva.KonvaEventObject<PointerEvent>): void;\n  onPointerDblClick?(evt: Konva.KonvaEventObject<PointerEvent>): void;\n  onGotPointerCapture?(evt: Konva.KonvaEventObject<PointerEvent>): void;\n  onLostPointerCapture?(evt: Konva.KonvaEventObject<PointerEvent>): void;\n}\n\nexport interface KonvaNodeComponent<\n  Node extends Konva.Node,\n  Props = Konva.NodeConfig\n  // We use React.ClassAttributes to fake the 'ref' attribute. This will ensure\n  // consumers get the proper 'Node' type in 'ref' instead of the wrapper\n  // component type.\n> extends React.FC<Props & KonvaNodeEvents & React.ClassAttributes<Node>> {\n  getPublicInstance(): Node;\n  getNativeNode(): Node;\n  // putEventListener(type: string, listener: Function): void;\n  // handleEvent(event: Event): void;\n}\n\nexport interface StageProps\n  extends Konva.NodeConfig,\n    KonvaNodeEvents,\n    Pick<\n      React.HTMLAttributes<HTMLDivElement>,\n      'className' | 'role' | 'style' | 'tabIndex' | 'title'\n    > {}\n\n// Stage is the only real class because the others are stubs that only know how\n// to be rendered when they are under stage. Since there is no real backing\n// class and are in reality are a string literal we don't want users to actually\n// try and use them as a type. By defining them as a variable with an interface\n// consumers will not be able to use the values as a type or constructor.\n// The down side to this approach, is that typescript thinks the type is a\n// function, but if the user tries to call it a runtime exception will occur.\n\nexport var Stage: KonvaNodeComponent<Konva.Stage, StageProps>;\nexport var Layer: KonvaNodeComponent<Konva.Layer, Konva.LayerConfig>;\nexport var FastLayer: KonvaNodeComponent<Konva.FastLayer, Konva.LayerConfig>;\nexport var Group: KonvaNodeComponent<Konva.Group, Konva.GroupConfig>;\nexport var Label: KonvaNodeComponent<Konva.Label, Konva.LabelConfig>;\n\n/** Shapes */\nexport var Rect: KonvaNodeComponent<Konva.Rect, Konva.RectConfig>;\nexport var Circle: KonvaNodeComponent<Konva.Circle, Konva.CircleConfig>;\nexport var Ellipse: KonvaNodeComponent<Konva.Ellipse, Konva.EllipseConfig>;\nexport var Wedge: KonvaNodeComponent<Konva.Wedge, Konva.WedgeConfig>;\nexport var Transformer: KonvaNodeComponent<\n  Konva.Transformer,\n  Konva.TransformerConfig\n>;\nexport var Line: KonvaNodeComponent<Konva.Line, Konva.LineConfig>;\nexport var Sprite: KonvaNodeComponent<Konva.Sprite, Konva.SpriteConfig>;\nexport var Image: KonvaNodeComponent<Konva.Image, Konva.ImageConfig>;\nexport var Text: KonvaNodeComponent<Konva.Text, Konva.TextConfig>;\nexport var TextPath: KonvaNodeComponent<Konva.TextPath, Konva.TextPathConfig>;\nexport var Star: KonvaNodeComponent<Konva.Star, Konva.StarConfig>;\nexport var Ring: KonvaNodeComponent<Konva.Ring, Konva.RingConfig>;\nexport var Arc: KonvaNodeComponent<Konva.Arc, Konva.ArcConfig>;\nexport var Tag: KonvaNodeComponent<Konva.Tag, Konva.TagConfig>;\nexport var Path: KonvaNodeComponent<Konva.Path, Konva.PathConfig>;\nexport var RegularPolygon: KonvaNodeComponent<\n  Konva.RegularPolygon,\n  Konva.RegularPolygonConfig\n>;\nexport var Arrow: KonvaNodeComponent<Konva.Arrow, Konva.ArrowConfig>;\nexport var Shape: KonvaNodeComponent<Konva.Shape, Konva.ShapeConfig>;\n\nexport var useStrictMode: (useStrictMode: boolean) => void;\nexport var KonvaRenderer: ReactReconciler.Reconciler<any, any, any, any, any>"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.2939453125,
          "content": "{\n  \"license\": \"MIT\",\n  \"name\": \"react-konva\",\n  \"description\": \"React binding to canvas element via Konva framework\",\n  \"version\": \"19.0.2\",\n  \"keywords\": [\n    \"react\",\n    \"canvas\",\n    \"jsx\",\n    \"konva\"\n  ],\n  \"bugs\": \"https://github.com/konvajs/react-konva/issues\",\n  \"main\": \"lib/ReactKonva.js\",\n  \"module\": \"es/ReactKonva.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:konvajs/react-konva.git\"\n  },\n  \"dependencies\": {\n    \"@types/react-reconciler\": \"^0.28.8\",\n    \"its-fine\": \"^1.2.5\",\n    \"scheduler\": \"0.25.0\",\n    \"react-reconciler\": \"0.31.0\"\n  },\n  \"targets\": {\n    \"none\": {}\n  },\n  \"funding\": [\n    {\n      \"type\": \"patreon\",\n      \"url\": \"https://www.patreon.com/lavrton\"\n    },\n    {\n      \"type\": \"opencollective\",\n      \"url\": \"https://opencollective.com/konva\"\n    },\n    {\n      \"type\": \"github\",\n      \"url\": \"https://github.com/sponsors/lavrton\"\n    }\n  ],\n  \"peerDependencies\": {\n    \"konva\": \"^8.0.1 || ^7.2.5 || ^9.0.0\",\n    \"react\": \"^18.3.1 || ^19.0.0\",\n    \"react-dom\": \"^18.3.1 || ^19.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/chai\": \"^5.0.1\",\n    \"@types/mocha\": \"^10.0.10\",\n    \"@types/react\": \"19.0.1\",\n    \"assert\": \"^2.1.0\",\n    \"chai\": \"5.1.2\",\n    \"konva\": \"^9.3.16\",\n    \"mocha-headless-chrome\": \"^4.0.0\",\n    \"parcel\": \"^2.13.2\",\n    \"process\": \"^0.11.10\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\",\n    \"sinon\": \"^19.0.2\",\n    \"timers-browserify\": \"^2.0.12\",\n    \"typescript\": \"^5.7.2\",\n    \"use-image\": \"^1.1.1\",\n    \"util\": \"^0.12.5\"\n  },\n  \"scripts\": {\n    \"build\": \"tsc -outDir ./es &&  tsc -module commonjs -outDir ./lib && cp ./ReactKonvaCore.d.ts ./lib && cp ./ReactKonvaCore.d.ts ./es\",\n    \"test:typings\": \"tsc --noEmit\",\n    \"preversion\": \"npm test\",\n    \"version\": \"npm run build\",\n    \"postversion\": \"\",\n    \"test\": \"NODE_ENV=test npm run test:build && mocha-headless-chrome -f ./test-build/unit-tests.html -a disable-web-security && npm run test:typings\",\n    \"test:build\": \"rm -rf ./.parcel-cache && NODE_ENV=test parcel build ./test/unit-tests.html --dist-dir test-build --target none --public-url ./ --no-source-maps\",\n    \"test:watch\": \"NODE_ENV=test rm -rf ./parcel-cache && parcel serve ./test/unit-tests.html\"\n  },\n  \"typings\": \"react-konva.d.ts\",\n  \"files\": [\n    \"README.md\",\n    \"lib\",\n    \"es\",\n    \"react-konva.d.ts\",\n    \"ReactKonvaCore.d.ts\"\n  ]\n}\n"
        },
        {
          "name": "react-konva.d.ts",
          "type": "blob",
          "size": 0.033203125,
          "content": "export * from './ReactKonvaCore';\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.287109375,
          "content": "{\n  \"compilerOptions\": {\n    \"strict\": false,\n    \"target\": \"ES2020\",\n    \"moduleResolution\": \"node\",\n    \"allowSyntheticDefaultImports\": true,\n    \"esModuleInterop\": true,\n    \"jsx\": \"react\",\n    \"skipLibCheck\": true\n  },\n  \"include\": [\"./src/**/*\"],\n  \"files\": [\n    \"react-konva.d.ts\"\n  ]\n}\n"
        }
      ]
    }
  ]
}