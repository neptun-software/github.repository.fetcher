{
  "metadata": {
    "timestamp": 1736565052049,
    "page": 301,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "elysiajs/elysia",
      "stars": 11049,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".eslintrc.json",
          "type": "blob",
          "size": 0.833984375,
          "content": "{\n\t\"env\": {\n\t\t\"browser\": true,\n\t\t\"es2021\": true\n\t},\n\t\"extends\": [\n\t\t\"eslint:recommended\",\n\t\t\"plugin:@typescript-eslint/recommended\",\n\t\t\"plugin:sonarjs/recommended\"\n\t],\n\t\"parser\": \"@typescript-eslint/parser\",\n\t\"parserOptions\": {\n\t\t\"ecmaVersion\": \"latest\",\n\t\t\"sourceType\": \"module\"\n\t},\n\t\"plugins\": [\"@typescript-eslint\", \"sonarjs\"],\n\t\"rules\": {\n\t\t\"@typescript-eslint/ban-types\": \"off\",\n\t\t\"@typescript-eslint/no-explicit-any\": \"off\",\n\t\t\"no-mixed-spaces-and-tabs\": \"off\",\n\t\t\"@typescript-eslint/no-non-null-assertion\": \"off\",\n\t\t\"@typescript-eslint/no-extra-semi\": \"off\",\n\t\t\"@typescript-eslint/ban-ts-comment\": \"off\",\n\t\t\"@typescript-eslint/no-namespace\": \"off\",\n\t\t\"no-case-declarations\": \"off\",\n\t\t\"no-extra-semi\": \"off\",\n\t\t\"sonarjs/cognitive-complexity\": \"off\",\n\t\t\"sonarjs/no-all-duplicated-branches\": \"off\"\n\t},\n\t\"ignorePatterns\": [\"example/*\", \"test/**/*\"]\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0927734375,
          "content": ".DS_Store\n\nnode_modules\nbuild\ndump.rdb\ndist\ntrace\n.scannerwork\n*.tsbuildinfo\n.wrangler\n.elysia\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.375,
          "content": ".git\n.gitignore\n.github\n.prettierrc\n.eslintrc.js\n.eslint.json\n.swc.cjs.swcrc\n.swc.esm.swcrc\n.swcrc\n.husky\n.eslintrc.json\n\nbun.lockb\nnode_modules\ntsconfig.json\nCHANGELOG.md\n\nexample\ntests\ntest\ndocs\nsrc\n.DS_Store\ntest\ntsconfig.cjs.json\ntsconfig.dts.json\ntsconfig.esm.json\ntsconfig.test.json\ntsconfig.test.tsbuildinfo\n\nCONTRIBUTING.md\nCODE_OF_CONDUCT.md\ntrace\n\nbuild.ts\n.scannerwork\nsrc\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.080078125,
          "content": "enable-pre-post-scripts=true\nregistry=https://registry.npmjs.org\nalways-auth=true\n"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.0986328125,
          "content": "{\n\t\"useTabs\": true,\n\t\"tabWidth\": 4,\n\t\"semi\": false,\n\t\"singleQuote\": true,\n\t\"trailingComma\": \"none\"\n}\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 72.6181640625,
          "content": "# 1.2.11\nFeature:\n- Compressed lifecycle event\n- Lazily build radix tree for dynamic router\n\n# 1.2.10 - 5 Jan 2025\nFeature:\n- add shorthand property for macro function\n\nImprovement:\n- use `deuri` instead of `fast-decode-uri-component`\n- [#985](https://github.com/elysiajs/elysia/issues/985) MaybeEmpty and Nullable should have options args\n\nBug fix:\n- Macro function doesn't inherits local/scoped derive and resolve in type-level\n\n# 1.2.9 - 28 Dec 2024\nBug fix:\n- Resolve macro unintentionally return instead of assign new context\n\n# 1.2.8 - 27 Dec 2024\nBug fix:\n- [#966](https://github.com/elysiajs/elysia/issues/966) generic error somehow return 200\n\n# 1.2.7 - 27 Dec 2024\nBug fix:\n- macro doesn't work with guard\n- [#981](https://github.com/elysiajs/elysia/issues/981) unable to deference schema, create default, and coerce value\n- [#966](https://github.com/elysiajs/elysia/issues/966) `error`'s value return as-if when thrown\n- [#964](https://github.com/elysiajs/elysia/issues/964) InvalidCookieSignature errors are not caught by onError\n- [#952](https://github.com/elysiajs/elysia/issues/952) onAfterResponse does not provide mapped response value unless aot is disabled\n- `mapResponse.response` is `{}` if no response schema is provided\n- Response doesn't reconcile when handler return `Response` is used with `mapResponse`\n- `onError` now accepts `error` as `number` when `Elysia.error` is thrown (but not returned)\n\n# 1.2.6 - 25 Dec 2024\nBug fix:\n- mapResponse with onError caused compilation error\n\n# 1.2.5 - 25 Dec 2024\nBug fix:\n- define universal/file in package export\n\n# 1.2.4 - 25 Dec 2024\nBug fix:\n- performance regression from eager access abortSignal\n\n# 1.2.3 - 25 Dec 2024\nBug fix:\n- [#973](https://github.com/elysiajs/elysia/issues/973) Parsing malformed body results in `UNKNOWN`-Error instead of `ParseError`\n- [#971](https://github.com/elysiajs/elysia/issues/971) remove top level import, use dynamic import instead\n- [#969](https://github.com/elysiajs/elysia/issues/969) Invalid context on `.onStart`, `.onStop`\n- [#965](https://github.com/elysiajs/elysia/issues/965) [Composer] failed to generate optimized handler. Unexpected identifier 'mapCompactResponse'\n- [#962](https://github.com/elysiajs/elysia/pull/962) fix schema default value when AOT is of\n- decorator name with space is not working\n\n# 1.2.2 - 24 Dec 2024\nBug fix:\n- conditional import and require\n\n# 1.2.1 - 23 Dec 2024\nBug fix:\n- conditional import for fs\n- object macro parameter maybe array\n- optional return for macro\n\n# 1.2.0 - 23 Dec 2024\nFeature:\n- Commitment to Universal Runtime Support\n    - Node Adapter\n    - Web Standard Adapter\n    - Bun Adapter\n    - Universal Utilities\n- Name parser\n- Add resolve support to Macro\n- Improve WebSocket\n    - Support ping, pong and latest Bun feature\n    - Match type declaration with Bun\n    - Support for return, yield\n    - Match Context type\n    - Performance Improvement\n        - Entire rewrite\n        - bind over getter return\n- Infer 422 validation\n- Compilation minification\n- Validation Stuff\n    - t.MaybeArray\n- Typebox Module & Nested model\n    - Inline module\n\nImprovement:\n- Memory Usage\n    - [Internal] Register loosePath in compilation process to reduce memory usage and reduce registration time from O(2n) to O(n)\n- Try to accept and coerce different version of Elysia plugin\n- Event Listener now infers path parameter automatically based on scope\n- Add ‘scoped’ to bulk `as` for casting type to ‘scoped’ similar to ‘plugin’\n\nChange:\n- Update `cookie` to 1.0.1\n- Update TypeBox to 0.33\n- `content-length` now accept number\n\nBreaking Change:\n- [Internal] Remove router internal property static.http.staticHandlers\n- [Internal] Router history compile now link with history composed\n\n# 1.1.27 - 23 Dec 2024\nBug fix:\n- [#963](https://github.com/elysiajs/elysia/pull/963) array parser on query string when AOT is off\n- [#961](https://github.com/elysiajs/elysia/pull/961) literal handler when AOT is off\n\n# 1.1.26 - 4 Dev 2024\nBug fix:\n- [#907](https://github.com/elysiajs/elysia/issues/907), [#872](https://github.com/elysiajs/elysia/issues/872), [#926](https://github.com/elysiajs/elysia/issues/926) BooleanString is not behave correctly if property is not provided\n- [#929](https://github.com/elysiajs/elysia/issues/929) Non-ASCII characters cause querystring index to be incorrectly slice\n- [#912](https://github.com/elysiajs/elysia/issues/912) handle JavaScript date numeric offset\n\n# 1.1.25 - 14 Nov 2024\nBug fix:\n- [#908](https://github.com/elysiajs/elysia/pull/908) boolean-string converted to string\n- [#905](https://github.com/elysiajs/elysia/pull/905) avoid response normailization side effects\n\nChange:\n- don't minify identifiers in bun bundle\n\n# 1.1.24 - 31 Oct 2024\nSecurity:\n- [#891](https://github.com/elysiajs/elysia/pull/891) Upgrade Cookie to 0.7.x to fix CVE-2024-47764\n\nBug fix:\n- [#885](https://github.com/elysiajs/elysia/pull/885) unwrap transform errors\n- [#903](https://github.com/elysiajs/elysia/pull/903) typebox object schemas without properties key\n\n# 1.1.23 - 22 Oct 2024\nBug fix:\n- Handle object with `.then` even if it's not promise (looking at you, Drizzle)\n\n# 1.1.22 - 13 Oct 2024\nBug fix:\n- Fix `set-cookie` to resent if value is accessed even without set\n\n# 1.1.21 - 13 Oct 2024\nImprovement:\n- infer 200 response from handle if not specified\n\n# 1.1.20 - 10 Oct 2024\nBug fix:\n- merge guard and not specified hook responses status\n\n# 1.1.19 - 7 Oct 2024\nBug fix:\n- unable to return `error` from derive/resolve\n\n# 1.1.18 - 4 Oct 2024\nBreaking change:\n- remove automatic conversion of 1-level deep object with file field to formdata\n\t- migration: wrap a response with `formdata`\n- (internal): remove `ELYSIA_RESPONSE` symbol\n- (internal) `error` now use `class ElysiaCustomStatusResponse` instead of plain object\n\nImprovement:\n- Optimize `object type` response mapping performance\n\n# 1.1.17 - 29 Sep 2024\nChange:\n- Coerce number to numeric on body root automatically\n- Coerce boolean to booleanString on body root automatically\n\nBug fix:\n- [#838](https://github.com/elysiajs/elysia/issues/838) invalid `onAfterResponse` typing\n- [#855](https://github.com/elysiajs/elysia/issues/855) Validation with Numeric & Number options doesn't work\n- [#843](https://github.com/elysiajs/elysia/issues/843) Resolve does not work with aot: false\n\n# 1.1.16 - 23 Sep 2024\nBug fix:\n- separate between `createStaticHandler` and `createNativeStaticHandler` for maintainability\n- performance degradation using inline fetch on text static response and file\n\n# 1.1.15 - 23 Sep 2024\nBug fix:\n- `createStaticResponse` unintentionally mutate `set.headers`\n\n# 1.1.14 - 23 Sep 2024\nFeature:\n- add auto-completion to `Content-Type` headers\n\nBug fix:\n- exclude file from Bun native static response until Bun support\n- set 'text/plain' for string if no content-type is set for native static response\n\n# 1.1.13 - 18 Sep 2024\nFeature:\n- [#813](https://github.com/elysiajs/elysia/pull/813) allow UnionEnum to get readonly array by @BleedingDev\n\nBug fix:\n- [#830](https://github.com/elysiajs/elysia/issues/830) Incorrect type for ws.publish\n- [#827](https://github.com/elysiajs/elysia/issues/827) returning a response is forcing application/json content-type\n- [#821](https://github.com/elysiajs/elysia/issues/821) handle \"+\" in query with validation\n- [#820](https://github.com/elysiajs/elysia/issues/820) params in hooks inside prefixed groups are incorrectly typed never\n- [#819](https://github.com/elysiajs/elysia/issues/819) setting cookie attribute before value cause cookie attribute to not be set\n- [#810](https://github.com/elysiajs/elysia/issues/810) wrong inference of response in afterResponse, includes status code\n\n# 1.1.12 - 4 Sep 2024\nFeature:\n- setup provenance publish\n- [#808](https://github.com/elysiajs/elysia/pull/808) add UnionEnum type with JSON schema enum usage\n- [#807](https://github.com/elysiajs/elysia/pull/807) add closeActiveConnections to Elysia.stop()\n\nBug fix:\n- [#808](https://github.com/elysiajs/elysia/pull/808) ArrayString type cast as Object instead of Array\n- config.nativeStaticResponse is not defined\n\n# 1.1.11 - 1 Sep 2024\nFeature:\n- native Bun static response\n\t- can be disabled by setting `app.config.nativeStaticResponse = false`\n- [#93](https://github.com/elysiajs/elysia/issues/93) export TypeSystemPolicy\n- [#752](https://github.com/elysiajs/elysia/issues/752) tye coercion on dynamic mode\n\nBug fix:\n- [#332](https://github.com/elysiajs/elysia/issues/332) mount() does not preserve body when fetching through http server\n- Using as('plugin') cast cause derive key to be unknown\n\n# 1.1.10 30 Aug 2024\nBug fix:\n- incorrect named export 'fasti-querystring' to 'fast-querystring'\n\n# 1.1.9 - 28 Aug 2024\nChange:\n- getter fields no longer stringified to JSON by default on returning response\n\nBug fix:\n- [#796](https://github.com/elysiajs/elysia/issues/796) ValueClone: Unable to clone value after 1.1.8 update\n- [#795](https://github.com/elysiajs/elysia/issues/795) Broken Dates after 1.1.8 update\n- [#793](https://github.com/elysiajs/elysia/issues/793) Unable to delete property. t.File()\n\n# 1.1.8 - 27 Aug 2024\nFeature:\n- [#748](https://github.com/elysiajs/elysia/issues/748) add standardHostname config\n\nBug fix:\n- [#787](https://github.com/elysiajs/elysia/issues/787) [#789](https://github.com/elysiajs/elysia/issues/789) [#737](https://github.com/elysiajs/elysia/issues/737) Unexpected TypeError on NODE_ENV=production in mapValueError\n- [#793](https://github.com/elysiajs/elysia/issues/793) unable to delete property t.File()\n- [#780](https://github.com/elysiajs/elysia/issues/780) error from sending empty body multipart/form-data\n- [#779](https://github.com/elysiajs/elysia/issues/779) custom errors thrown in onRequest are not usable when caught in onError\n- [#771](https://github.com/elysiajs/elysia/issues/771) error from body-parser when sent Content-Type header without body\n- [#679](https://github.com/elysiajs/elysia/issues/679) plugin registered by async inline function don't work\n- [#670](https://github.com/elysiajs/elysia/issues/670) support for classes and getter fields\n\n# 1.1.7 - 19 Aug 2024\nBug fix:\n- `parseQuery` is not parsing array on body\n\nChange:\n- rename `parseQuery` to `parseQueryFromURL`\n- export fast-querystring.js path\n\n# 1.1.6 - 12 Aug 2024\nFeature:\n- [#763](https://github.com/elysiajs/elysia/pull/763) add hide in detail to hide route from OpenAPI/swagger\n- add streaming support for fetch proxy\n\nBug fix:\n- [#776](https://github.com/elysiajs/elysia/issues/776) custom errors throw in onRequest do not get proper code set in onError\n\n# 1.1.5 - 2 Aug 2024\nFeature:\n- refactor fastQuerystring using switch and bitwise flag\n\nBug fix:\n- sucrose: invalid separateFunction on minified async function\n- [#758](https://github.com/elysiajs/elysia/issues/758) guard doesn't apply cookie schema\n\n# 1.1.4 - 23 Jul 2024\nFeature:\n- [#718](https://github.com/elysiajs/elysia/pull/718) implement normalization support for class instances with getter functions\n\nBug fix:\n- removeColonAlias accidentally slice -2 end index for last parameter\n- [#726](https://github.com/elysiajs/elysia/pull/726) lazy instantiation of `stringToStructureCoercions`\n- [#750](https://github.com/elysiajs/elysia/issues/750) Cookie: Right side of assignment cannot be destructured\n- [#749](https://github.com/elysiajs/elysia/issues/749) Query params following an array query are parsed as array items\n- [#751](https://github.com/elysiajs/elysia/issues/751) Dynamic mode response failed if null or undefined value is returned\n- [#741](https://github.com/elysiajs/elysia/issues/741) stream stringify object\n\n# 1.1.3 - 17 Jul 2024\nChange:\n- sucrose: exact inference name\n- use `mapResponse` instead of `mapCompactResponse` for stream\n\t- [#727](https://github.com/elysiajs/elysia/issues/727)\n- defers first stream execution before returning response\n\t- [#729](https://github.com/elysiajs/elysia/issues/729)\n- [#722](https://github.com/elysiajs/elysia/issues/722) derive context is not passed to onError\n\nBug fix:\n- `onError` with scope not being able to infer context type\n\n# 1.1.2 - 16 Jul 2024\nBug fix:\n- [#724](https://github.com/elysiajs/elysia/issues/724), [bun#12594](https://github.com/oven-sh/bun/issues/12594) sucrose: possibly fix `bun build --compile` not being able to infer first, and last context parameter\n- derive is being override by resolve in certain function\n\t- [#722](https://github.com/elysiajs/elysia/issues/722) Type error with global `app.derive` followed by onError\n- params on `onError` is now `{ [key in string]: string }` instead of `never`\n- [#721](https://github.com/elysiajs/elysia/issues/721) unexpected isContextPassToFunction: minified whitespace of arrow function causing inaccurate separateFunction\n\n# 1.1.1 - 16 Jul 2024\nBreaking Change:\n- parse query as `string` instead of `string | string[]` unless specified\n\n# 1.1.0 - 16 Jul 2024\nFeature:\n- Trace v2\n- Normalization is on by default\n- Data type coercion\n- Guard as, bulk as cast\n- Response status coercion\n- Optional path parameter\n- Generator response stream\n\nBreaking Change:\n- Parse value as string for all validators unless explicitly specified.\n    - See [50a5d92](https://github.com/elysiajs/elysia/commit/50a5d92ea3212c5f95f94552e4cb7d31b2c253ad), [44bf279](https://github.com/elysiajs/elysia/commit/44bf279c3752c6909533d19c83b24413d19d27fa).\n    - Remove objects auto-parsing in query unless explicitly specified via query\n   \t- Except query string as defined in RFC 3986, TLDR; query string could be either string or array of string.\n- Rename `onResponse` to `onAfterResponse`\n- [Internal] Remove $passthrough in favor of toResponse\n- [Internal] UnwrapRoute type now always resolve with status code\n\nImprovement:\n- Add auto-complete for `set.headers`\n- Add `server` property\n- `onError` supports array function\n- Parse query object with and without schema\n- Sucrose: improve isContextPassToFunction, and extractMainParameter stability\n- Add `replaceSchemaType`\n- Add `route` to `context`\n- Optimize recursive MacroToProperty type\n- Parse query array and object\n- Optimize code path for `composeGeneralHandler`\n- Add debug report on compiler panic\n- Reduce memory usage of route registration ~36% on large codebase\n    - Reduce compilation code path\n    - Remove trace inference\n    - Reduce router compilation code path\n    - removing route handler compilation cache (st${index}, stc${index})\n- Add undefined union to cookie in case if cookie is not present\n- Optimize response status resolve type inference\n\nChange:\n- Deprecated `ObjectString` for parsing array\n- Using `Cookie<unknown>` instead of `Cookie<any>` if schema is not defined\n- Remove prototype poluation from hook\n- remove static analysis for query name\n- remove query replace '+' in favor removing static query analysis\n- mapResponse is now called in error event\n- reconcilation decorator in type level\n\nBug fix:\n- Normalize headers accidentally use query validator check instead\n- `onError` missing trace symbol\n- Headers validator compilation is not cached\n- Deduplicate macro propagation\n- Websocket in nested group now work\n- Error response is not check unless successful status code is provided\n\n# 1.0.27 - 2 Jul 2024\nBug fix:\n- [#640](https://github.com/elysiajs/elysia/issues/640) Unable to access root level macros in plugins\n- [#606](https://github.com/elysiajs/elysia/issues/606) Object encoding in query parameters\n\n# 1.0.26 - 30 Jun 2024\nBug fix:\n- mapResponse is not called on beforeHandle, and afterHandle\n\n# 1.0.25 - 21 Jun 2024\nBug fix:\n- type is resolved as `File` if `@types/bun` is not installed when using with Eden Treaty\n\n# 1.0.24 - 18 Jun 2024\nBug fix:\n- `derive`, `resolve` support void return\n- [#677](https://github.com/elysiajs/elysia/issues/677) Query params validation for array of string fail\n\n# 1.0.23 - 9 Jun 2024\nFeature:\n- add `toResponse` for mapping custom response\n- [#606](https://github.com/elysiajs/elysia/issues/606) Object encoding in query parameters\n\nBug fix:\n- [#654](https://github.com/elysiajs/elysia/pull/654) set correct normalization behavior for addtional properties\n- [#649](https://github.com/elysiajs/elysia/pull/649) cookie decode value might be null\n- [#664](https://github.com/elysiajs/elysia/issues/664) \"default\" option is not being applied on validation\n- [#656](https://github.com/elysiajs/elysia/issues/656) ctx.query doesn't work in some case\n    - set forceDynamicQuery to true by default\n- [#658](https://github.com/elysiajs/elysia/issues/658) aot does not recognize the use of ctx.body within a try catch\n- [#630](https://github.com/elysiajs/elysia/issues/630) accessing ctx.query directly breaks the object\n\n# 1.0.22 - 23 May 2024\nBreaking Change:\n- set default cookie path to `/`\n\nFeature:\n- add `form` utility for returning explicit formdata\n- add object with image to return as `formdata`\n\nBug fix:\n- return `Bun.file` by specifying `t.File()` and `t.Object({ any: t.File() })` as a response\n\n# 1.0.21 - 21 May 2024\nBreaking Change:\n- `t.type({ error })` now accepts `(error: ({ type, validator, value, errors }) => unknown)` instead of `(error: (type, validator, value) => unknown)`\n\nImprovement:\n- `t.type({ error })` accepts `string | number | boolean | Object` instead of `string`\n- `t.type({ error })` return `string | number | boolean | Object | void` instead of `string`\n- add `errors: ValueError[]` to `t.type({ error({ errors }) {} })`\n\nBug fix:\n- [#644](https://github.com/elysiajs/elysia/issues/644) redirect doesn't work with `aot: false`\n- [#641](https://github.com/elysiajs/elysia/issues/641) cookie schema validation doesn't work with `aot: true`\n- [#615](https://github.com/elysiajs/elysia/issues/615) highlight derive and resolve when using `onError`\n\n# 1.0.20 - 13 May 2024\nBug fix:\n- macro is not inherits inside group\n\n# 1.0.19 - 13 May 2024\nBug fix:\n- remove set.clone spread operator for mapping Response\n\n# 1.0.18 - 11 May 2024\nFeature:\n- add support for partitioned cookie\n\nBug fix:\n- recursive MacroToProperty type on unknown macro\n\n# 1.0.17 - 9 May 2024\nImprovement:\n- add context.url to get full URL string (including query)\n- reduce query parsing instruction\n\n# 1.0.16 - 2 May 2024\nBug fix:\n- [ratelimit#28](https://github.com/rayriffy/elysia-rate-limit/issues/28) trace hang when using server-timing with rate-limit plugin\n\n# 1.0.15 - 27 Apr 2024\nFeature:\n- add `redirect` function to `Context`\n\nImprovement:\n- sucrose: remove unreachable query bracket check, reduce bracket instruction\n- sucrose: query accessor keyword check at initialization instead of in loop\n- sucrose: remove accessor check\n- sucrose: skip query check for immediate return\n\nChange:\n- sucrose: add `isArrowReturn` to `separateFunction`\n- sucrose: skip inference queries check if `query` is not found\n\nChange:\n- allow custom parser when `type` is specified\n- add `contentType` to context\n- soft deprecate `contentType` as 2nd `parse` parameter\n\nBug fix:\n- [#622](https://github.com/elysiajs/elysia/issues/622) sucrose: mistake cookie for query\n- duplicate format found\n- using `parse`, `type`, `body` generate invalid syntax\n\n# 1.0.14 - 22 Apr 2024\nImprovement:\n- [#596](https://github.com/elysiajs/elysia/pull/596) account for 20x response status schemas for type safety\n\nBug fix:\n- [#615](https://github.com/elysiajs/elysia/issues/615)\n- [588](https://github.com/elysiajs/elysia/issues/588) separate async derive/resolve function doesn't get await\n- primitive thrown result in invalid type\n\n# 1.0.12 - 5 Apr 2024\nImprovement:\n- export `InferContext` and `InferHandler`\n\nBug fix:\n- remove accidental `console.log` in `compile`\n\n# 1.0.12 - 5 Apr 2024\nFeature:\n- add `InferContext`\n\nBug fix:\n- returning null with response validation cause error\n\n# 1.0.11 - 2 Apr 2024\nBug fix:\n- possibly fix for \"Duplicate type kind 'Files' detected\"\n- add ajv-formats\n- [#562](https://github.com/elysiajs/elysia/pull/575) %26 (&) to be interpreted as & (query separator)\n\n# 1.0.10 - 30 Mar 2024\nBug fix:\n- [ServerTiming#1](https://github.com/elysiajs/elysia-server-timing/issues/1) late beforeHandle on set trace inference doesn't produce exit instruction\n\n# 1.0.9 - 25 Mar 2024\nFeature:\n- `Elysia.config.detail` constructor\n- shorthand `Elysia.tags` to constructor, `LocalHook`\n- guard inherits detail\n\nBug fix:\n- inference link on `precompile: false` creating unnecessary instruction\n\n# 1.0.8 - 25 Mar 2024\nFeature:\n- [#562](https://github.com/elysiajs/elysia/pull/562) add `normalize` config\n\nImprovement:\n- Scope cookie instruction to route level instead of global config\n- [#557](https://github.com/elysiajs/elysia/pull/557) cache tsc buildinfo for running faster\n- [#551](https://github.com/elysiajs/elysia/pull/551) use AnyElysia instead of inline Elysia<any>\n\nBug fix:\n- [#564](https://github.com/elysiajs/elysia/pull/564) Fixing \"ReadableStream is locked\"\n- [#552](https://github.com/elysiajs/elysia/pull/552) fix: shift promise in PromiseGroup even when rejected\n\n# 1.0.7 - 20 Mar 2024\nFeature:\n- add Elysia.propagate to propagate hook type from 'local' to 'scoped'\n\nImprovement:\n- remove function.$elysia\n- remove function extension\n\nBug fix:\n- duplicate macro call\n- [#548](https://github.com/elysiajs/elysia/issues/548) additional case for \"accessing all query params using property name (ctx.query) doesn't work anymore\"\n- [#599](https://github.com/elysiajs/elysia/issues/559) plugin with scoped settings not functioning correctly\n\n# 1.0.6 - 20 Mar 2024\nBug fix:\n- inline function doesn't propagate correctly on type level\n\n# 1.0.5 - 19 Mar 2024\nImprovement:\n- using regex for date pattern matching before using new Date validation\n- using tsc to emit declaration file instead of tsup\n- add `mapResponse` to MacroManager\n\nBug fix:\n- Ephemeral and Volatile type isn't recognize by MacroManager\n- inline guard cookie doesn't apply to local instance\n\n# 1.0.4 - 18 Mar 2024\nImprovement:\n- resolve, derive soundness\n\n# 1.0.3 - 18 Mar 2024\nImprovement:\n- Reduce instruction for static resource\n\nBug fix:\n- Fix returning mulitple status code using `error` doesn't accept the response\n\n# 1.0.2 - 18 Mar 2024\nFeature:\n- add `scoped` support for `derive` and `resolve`\n\nImprovement:\n- Type soundness\n- type inference performance improvement\n\n# 1.0.1 - 18 Mar 2024\nImprovement:\n- `mapHandler` now check passthrough once instead of twice\n- exclude return type of`ELYSIA_RESPONSE` type from `derive` and `resolve`\n- throw error if `error` is return in `derive` and `resolve`\n- handle `return error` on `transform`\n- [#502](https://github.com/elysiajs/elysia/pull/502) merge response schema from parent scope\n\nBug fix:\n- explicit `type: 'json'` with body schema throw unexpected `body.Check` is not a function\n- [#549](https://github.com/elysiajs/elysia/pull/549) await the .modules of nested Elysia instances\n- [#548](https://github.com/elysiajs/elysia/issues/548) Accessing all query params using property name (ctx.query) doesn't work anymore\n\n# 1.0.0 - 16 Mar 2024\nImprovement:\n- fine-grained reactive cookie\n- using single source of truth for cookie\n- macro support for websocket\n- add `mapResolve`\n- add `{ as: 'global' | 'scoped' | 'local' }` to lifecycle event\n- add ephemeral type\n- inline `error` to handler\n- inline `error` has auto-completion and type checking based on status code\n- handler now check return type of `error` based on status code\n- utility `Elysia._types` for types inference\n- [#495](https://github.com/elysiajs/elysia/issues/495) Provide user friendly error for failed parse\n- handler now infers return type for error status for Treaty\n- `t.Date` now allow stringified date\n- improves type test case\n- add test case for all life-cycle\n- resolve, mapResolve, derive, mapDerive use ephemeral type to scope down accurately\n- inference query dynamic variable\n\nBreaking Change:\n- [#513](https://github.com/elysiajs/elysia/issues/513) lifecycle is now local first\n\nChange:\n- group private API property\n- move `Elysia.routes` to `Elysia.router.history`\n- detect possible json before return\n- unknown response now return as-is instead of JSON.stringify()\n- change Elysia validation error to JSON instead of string\n- static content evalute hook JIT instead of AOT\n\nBug fix:\n- [#466](https://github.com/elysiajs/elysia/issues/466) Async Derive leaks request context to other requests if `aot: true`\n- [#505](https://github.com/elysiajs/elysia/issues/505) Empty ObjectString missing validation inside query schema\n- [#503](https://github.com/elysiajs/elysia/issues/503) Beta: undefined class when using decorate and derive\n- onStop callback called twice when calling .stop\n- mapDerive now resolve to `Singleton['derive']` instead of `Singleton['store']`\n- `ValidationError` doesn't return `content-type` as `application/json`\n- validate `error(status, value)` validate per status\n- derive/resolve always scoped to Global\n- duplicated onError call if not handled\n- [#516](https://github.com/elysiajs/elysia/issues/516) server timing breaks beforeHandle guards\n- cookie.remove() doesn't set correct cookie path\n\n# 0.8.17 - 12 Feb 2024\nFeature:\n- [#474](https://github.com/elysiajs/elysia/pull/474) Numeric Cookie with length >= 16 cant be parsed to number\n- [#476](https://github.com/elysiajs/elysia/pull/476) Using a query key that contains a hyphen or a dot raises a SyntaxError\n- [#460](https://github.com/elysiajs/elysia/pull/460)\n    - [#458](https://github.com/elysiajs/elysia/pull/458) Multiple scoped plugins do not register routes\n    - [#457](https://github.com/elysiajs/elysia/pull/457) Elysia arguments scoped and prefix do not work at the same time\n\nChange:\n- [#472](https://github.com/elysiajs/elysia/pull/472) Move documentation issue template to documentation repository\n\n# 0.8.16 - 6 Feb 2024\nFeature:\n- [#448](https://github.com/elysiajs/elysia/pull/448) BooleanString - @bogeychan\n\nBug fix:\n- [#451](https://github.com/elysiajs/elysia/pull/464) handle spread operator use on possible null or undefined\n- [#460](https://github.com/elysiajs/elysia/pull/460)\n    - [#457](https://github.com/elysiajs/elysia/pull/457) scoped plugin instances now respect the prefix property\n    - [#458](https://github.com/elysiajs/elysia/pull/458) adding a second scoped plugin does not unmount the route handler of a previously added scoped instance anymore.\n\n# 0.8.15 - 30 Jan 2024\nBug fix:\n- [#451](https://github.com/elysiajs/elysia/issues/451) macro does not run when it should (macro deduplication)\n- [#450](https://github.com/elysiajs/elysia/issues/450) Local hook parse doesn't get executed with `aot: false`\n\n# 0.8.14 - 26 Jan 2024\nBug fix:\n- types are missing in `exports.*`\n- [#441](https://github.com/elysiajs/elysia/issues/441) Vite doesn't get bundle without main\n\n# 0.8.13 - 26 Jan 2024\nBug fix:\n- types is not import\n- bun build regression on export * from '@sinclair/typebox/system'\n- update memoirist to use mjs\n\n# 0.8.12 - 26 Jan 2024\nChange:\n- using .mjs for es module\n\n# 0.8.11 - 26 Jan 2024\nChange:\n- using tsup instead of swc\n- [#441](https://github.com/elysiajs/elysia/issues/441) remove nanoid, using web crypto randomInt instead\n\nBug fix:\n- [#446](https://github.com/elysiajs/elysia/pull/446) numeric string check to use Number instead of parseInt\n- [#445](https://github.com/elysiajs/elysia/pull/445) empty body custom response when set.headers is empty\n\n# 0.8.10 - 24 Jan 2024\nBug fix:\n- [#440](https://github.com/elysiajs/elysia/pull/440) query params with + sign did not get converted\n- [#433](https://github.com/elysiajs/elysia/pull/433) remove crypto, unblock vite bundling, cloudflare worker support\n- [#422](https://github.com/elysiajs/elysia/pull/422) add check for instanceof if constructor.name doesn't match\n\n# 0.8.9 - 11 Jan 2024\nBug fix:\n- macro panic\n\n# 0.8.8. - 2 Jan 2024\nBug fix:\n- Add TypeBox back to Bun bundle\n\n# 0.8.7 - 1 Jan 2024\nImprovement:\n- [#385](https://github.com/elysiajs/elysia/issues/385) If error is instanceof Response, respond with it\n\nBug fix:\n- onRequest doesn't early return\n- handle thrown error function\n- [#373](https://github.com/elysiajs/elysia/issues/373) cookie is not set when File is return\n- [#379](https://github.com/elysiajs/elysia/issues/379) WebSocket: Sending a space character ' ' receives 0\n- [#317](https://github.com/elysiajs/elysia/issues/317) Exclude TypeBox from bundling\n\n# 0.8.6. - 29 Dec 2023\nBug fix:\n- body without default value thrown Object.assign error\n\n# 0.8.5. - 27 Dec 2023\nBug fix:\n- Bun entry point\n\n# 0.8.4. - 27 Dec 2023\nBug fix:\n- macro caused an Object.entries cannot be undefined\n- `mapResponse` and `afterHandle` missing decorators\n\n# 0.8.3. - 23 Dec 2023\nBug fix:\n- add early return on `isContextPassToFunction` for static content to prevent invalid regex\n\n# 0.8.2 - 23 Dec 2023\nBug fix:\n- `ctx.path` and `ctx.qi` is missing when using `onRequest`\n\n# 0.8.1 - 23 Dec 2023\nBug fix:\n- `be` is undefined when using `afterResponse` with `mapResponse`\n\n# 0.8.0 - 23 Dec 2023\nFeature:\n- `headers` initialization function\n- macro\n- static content\n- default property\n- error function\n- add stack trace to plugin checksum configurable by `config.analytic` (default to false)\n- new life-cycle\n    - `resolve`: derive after validation\n    - `mapResponse`: custom response mapping\n\nImprovement:\n- lazy query reference\n- add content-range header to `File` and `Blob` by default if etag is not used\n- update TypeBox to 0.32\n- override lifecycle response of `be` and `af`\n\nBreaking Change:\n- `afterHandle` no longer early return\n\nChange:\n- change validation response to JSON\n- differentiate derive from `decorator['request']` as `decorator['derive']`\n- `derive` now don't show infer type in onRequest\n\nBug fix:\n- remove `headers`, `path` from `PreContext`\n- remove `derive` from `PreContext`\n- Elysia type doesn't output custom `error`\n- `onStart` doesn't reflect server\n\n# 0.7.31 - 9 Dec 2023\nImprovement:\n- [#345](https://github.com/elysiajs/elysia/pull/345) add font to `SchemaOptions`\n- Update `@types/cookie` to `^0.6.0`\n\nBug fix:\n- [#338](https://github.com/elysiajs/elysia/pull/338) guard sandbox did not inherit global config.\n- [#330](https://github.com/elysiajs/elysia/pull/330) preserve query params for mounted handler\n- [#332](https://github.com/elysiajs/elysia/pull/332) reexport TSchema from typebox\n- [#319](https://github.com/elysiajs/elysia/pull/319) TypeBox Ref error when using Elysia.group()\n\n# 0.7.30 - 5 Dec 2023\nBug fix:\n- Emergency release override latest beta\n\n# 0.7.29 - 19 Nov 2023\nBug fix:\n- WebSocket params conflict with defined type\n- Inherits status code on custom error\n\n# 0.7.28 - 16 Nov 2023\nChore:\n- Update `cookie` to `0.6.0`\n\nBug fix:\n- [#314](https://github.com/elysiajs/elysia/pull/314) Unable to dereference schema with 'undefined' when using t.Ref\n\n# 0.7.27 - 16 Nov 2023\nBug fix:\n- [#312](https://github.com/elysiajs/elysia/issues/312) default params type suggestion for WebSocket\n- [#310](https://github.com/elysiajs/elysia/issues/310) Preserve original hostname when using `.mount()`\n- [#309](https://github.com/elysiajs/elysia/issues/309) t.RegExp doesn't work due to requiring default value\n- [#308](https://github.com/elysiajs/elysia/issues/308) t.Numeric should not convert empty string to 0\n- [#305](https://github.com/elysiajs/elysia/issues/305) Elysia({ scoped: true }) should still expose defined routes on type level\n- [#304](https://github.com/elysiajs/elysia/issues/304) Using a hook/guard/schema with a handler function and request without body results in a \"Unexpected end of JSON input\"-error\n- [#299](https://github.com/elysiajs/elysia/issues/299) Missing request.path parameter in .onRequest\n- [#289](https://github.com/elysiajs/elysia/issues/289) Ability to localize TypeBox errors\n- [#272](https://github.com/elysiajs/elysia/issues/272) onError handler has error property as undefined on Cloudflare Workers\n- [#210](https://github.com/elysiajs/elysia/issues/210) t.Numeric not validating properly\n- [#188](https://github.com/elysiajs/elysia/issues/188) Status codes of the error classes don't match the response through onError\n- [#140](https://github.com/elysiajs/elysia/issues/140) plugin hierarchy messes up derive function in child plugin\n- [#27](https://github.com/elysiajs/elysia/issues/27) Websocket definition in groups\n\n# 0.7.26 - 15 Nov 2023\nBug fix:\n- duplicated lifecycle event if using function plugin async\n\n# 0.7.25 - 14 Nov 2023\nBug fix:\n- Leaked type from `guard` callback and `group guard`\n\n# 0.7.24 - 8 Nov 2023\nBug fix:\n- add `ReadableStream` to response mapping to `mapResponse`\n\n# 0.7.23 - 8 Nov 2023\nBug fix:\n- Send `exit` status on early return with trace set\n\n# 0.7.22 - 8 Nov 2023\nChange:\n- Rewrite `trace`\n\nBug fix:\n- trace not awaiting multiple trace process\n- trace hang on early `beforeHandle` return\n- `afterHandle` with `trace.afterHandle` AoT cause duplicate value header\n\n# 0.7.21 - 27 Oct 2023\nBug fix:\n- [#281](https://github.com/elysiajs/elysia/pull/281) add cookie.remove options\n- add `await traceDone` to early return\n\n# 0.7.20 - 26 Oct 2023\nBug fix:\n- `trace` is stuck when inherits to plugin\n\nImprovement:\n- add unit test for `mapCompactResponse`, `Passthrough`\n\n# 0.7.19 - 25 Oct 2023\nBug fix:\n- add `$passthrough` for `mapCompactResponse`\n\n# 0.7.18 - 24 Oct 2023\nFeature:\n- add map handler for `ReadableStream`\n- add `$passthrough` for custom property for response mapping\n\nBug fix:\n- `.route` accept `string[]` instead of `string`\n\nChange:\n- remove `ElyEden`\n\n# 0.7.17 - 15 Oct 2023\nFeature:\n- add `ElyEden`\n- re-add `id` to websocket\n\nBug fix:\n- [#255](https://github.com/elysiajs/elysia/issues/255) removeCookie sends HTTP-Header that is ignored by the Browser\n- [#263](https://github.com/elysiajs/elysia/issues/263) http and websocket on same route\n- [#269](https://github.com/elysiajs/elysia/pull/269) Correct handling of Buffer object\n\n# 0.7.16 - 10 Oct 2023\nImprovement:\n- `t.Cookie` cookie option type\n- [#253](https://github.com/elysiajs/elysia/pull/253) platform agnostic cookie\n- Decorator like `state`, `decorate` and `derive`, doesn't apply to WebSocket `data`\n- re-export `Static` from\n\n# 0.7.15 - 26 Sep 2023\nChange:\n- Update TypeBox to 0.31.17\n- [#218](https://github.com/elysiajs/elysia/pull/218) Fix [#213](https://github.com/elysiajs/elysia/pull/213) prepend async redefined routes (partial fix)\n- Using set `onRequest` doesn't set headers and status on empty error handler\n\n# 0.7.14 - 26 Sep 2023\nBug fix:\n- Make `t.Files` parameter optional\n- model remap now using `TSchema` instead of literal type for creating type abstraction\n\n# 0.7.13 - 25 Sep 2023\nImprovement:\n- Using listener instead of microtick to handle `trace.set`\n- Set default cookie path to '/'\n\nBug fix:\n- Duplicate group path when hook is provided\n\n# 0.7.12 - 23 Sep 2023\nBug fix:\n- Handle cookie expire time\n- Set default value of config.cookie.path to '/'\n\n# 0.7.11 - 23 Sep 2023\nImprovement:\n- Skip cookie validation if schema is empty object\n\nBug fix:\n- Accept cookie property from constructor when schema is not defined\n\n# 0.7.10 - 23 Sep 2023\nBug fix:\n- handle FFI object in deepMerge, fix Prisma\n\n# 0.7.9 - 23 Sep 2023\nBug fix:\n- async instance cause config to be undefined\n\n# 0.7.8 - 23 Sep 2023\nBug fix:\n- async instance cause type conflict\n\n# 0.7.7 - 22 Sep 2023\nBug fix:\n- [#210](https://github.com/elysiajs/elysia/issues/210) `t.Numeric` allowing plain `String`\n- `t.ObjectString` allowing plain `String`\n- [#209](https://github.com/elysiajs/elysia/issues/209) `t.MaybeEmpty` tolerate `null` and `undefined`\n- [#205](https://github.com/elysiajs/elysia/issues/205) WebSocket routes not working in plugins\n- [#195](https://github.com/elysiajs/elysia/pull/195), [#201](https://github.com/elysiajs/elysia/pull/201) allow WebSocket destructuring\n\n# 0.7.6 - 21 Sep 2023\nBug fix:\n- Separate return type by status\n\n# 0.7.5 - 21 Sep 2023\nBug fix:\n- inject derive to `GraceHandler`\n\n# 0.7.4 - 21 Sep 2023\nBug fix:\n- check for class-like object\n- add `GraceHandler` to access both `app` and `context`\n\n# 0.7.3 - 21 Sep 2023\nBug fix:\n- resolve 200 by default when type is not provided\n\n# 0.7.2 - 20 Sep 2023\nBug fix:\n- decorator and store is resolved as `undefined` in `onError` hook\n- deepMerge with Module object\n- Retain comment in `.d.ts`\n\n# 0.7.1 - 20 Sep 2023\nBug Fix:\n- Class property is removed when calling deepMerge\n\n# 0.7.0 - 20 Sep 2023\nFeature:\n- rewrite type\n- rewrite Web Socket\n- add mapper method\n- add affix, prefix, suffix\n- trace\n- typeBox.Transfom\n- rewrite Type.ElysiaMeta to use TypeBox.Transform\n- new type:\n    - t.Cookie\n    - t.ObjectString\n    - t.MaybeEmpty\n    - t.Nullable\n- add `Context` to `onError`\n- lifecycle hook now accept array function\n- true encapsulation scope\n\nImprovement:\n- static Code Analysis now support rest parameter\n- breakdown dynamic router into single pipeline instead of inlining to static router to reduce memory usage\n- set `t.File` and `t.Files` to `File` instead of `Blob`\n- skip class instance merging\n- handle `UnknownContextPassToFunction`\n- [#157](https://github.com/elysiajs/elysia/pull/179) WebSocket - added unit tests and fixed example & api by @bogeychan\n- [#179](https://github.com/elysiajs/elysia/pull/179) add github action to run bun test by @arthurfiorette\n\nBreaking Change:\n- remove `ws` plugin, migrate to core\n- rename `addError` to `error`\n\nChange:\n- using single findDynamicRoute instead of inlining to static map\n- remove `mergician`\n- remove array routes due to problem with TypeScript\n\nBug fix:\n- strictly validate response by default\n- `t.Numeric` not working on headers / query / params\n- `t.Optional(t.Object({ [name]: t.Numeric }))` causing error\n- add null check before converting `Numeric`\n- inherits store to instance plugin\n- handle class overlapping\n- [#187](https://github.com/elysiajs/elysia/pull/187) InternalServerError message fixed to \"INTERNAL_SERVER_ERROR\" instead of \"NOT_FOUND\" by @bogeychan\n- [#167](https://github.com/elysiajs/elysia/pull/167) mapEarlyResponse with aot on after handle\n\n# 0.6.24 - 18 Sep 2023\nFeature:\n- [#149](https://github.com/elysiajs/elysia/pulls/149) support additional status codes in redirects\n\nImprovement:\n- [#157](https://github.com/elysiajs/elysia/pulls/157) added unit tests and fixed example & api\n\nBug fix:\n- [#167](https://github.com/elysiajs/elysia/pulls/167) mapEarlyResponse with aot on after handle\n- [#160](https://github.com/elysiajs/elysia/pulls/160) typo in test suite name\n- [#152](https://github.com/elysiajs/elysia/pulls/152) bad code in Internal server error class\n\n# 0.6.23 - 12 Sep 2023\nBug fix:\n- Maximum callstack for duplicated deep class / object\n- [#121](https://github.com/elysiajs/elysia/issues/121) Cannot use PrismaClient in .decorate or .state\n\n# 0.6.22 - 11 Sep 2023\nBug fix:\n- Remove `const` and `RemoveDeepWritable` from decorate to allow function call\n\n# 0.6.21 - 10 Sep 2023\nFeature:\n- [#112](https://github.com/elysiajs/elysia/issues/112) Route arrays\n\n# 0.6.20 - 9 Sep 2023\nBug fix:\n- [#107](https://github.com/elysiajs/elysia/issues/107) Elysia handler local hooks not recognizing registered errors on app instance\n\n# 0.6.19 - 7 Sep 2023\nBug fix:\n- Inherits state and error from plugin instance\n\n# 0.6.18 - 5 Sep 2023\nImprovement:\n- Automatically parse File to `Files` if set\n\n# 0.6.17 - 4 Sep 2023\nBug fix:\n- [#98](https://github.com/elysiajs/elysia/issues/98) Add context.set.cookie to accept array of string\n- [#92](https://github.com/elysiajs/elysia/pull/92) WebSocket beforeHandle unable to access plugins / state / derive's\n\n# 0.6.16 - 1 Sep 2023\nBug fix:\n- inherits `onError` lifecycle from plugin instance\n\n# 0.6.15 - 31 Aug 2023\nBug fix:\n- inherits `set` if `Response` is returned\n\n# 0.6.14 - 28 Aug 2023\nBug fix:\n- deduplicate plugin via global model\n- duplicated life-cycle\n- top-down plugin deduplication\n- plugin life-cycle leak on new model\n- add `Elysia.scope` to contain lifecycle, store, and decorators\n\n# 0.6.13 - 28 Aug 2023\nBug fix:\n- make this.server.reload optional to make Node compatability work\n- duplicate path name when using prefix config with group\n- don't filter local event inside new plugin model group\n- Remove post.handler in return\n\n# 0.6.12 - 26 Aug 2023\nBug fix:\n- Make this.server.reload optional to make Node compatability work\n\n# 0.6.11 - 16 Aug 2023\nBug fix:\n- [#86](https://github.com/elysiajs/elysia/issues/86) Group prefix repeating on inline function callback\n- [#88](https://github.com/elysiajs/elysia/issues/88), onResponse hooks validation return non 400\n\n# 0.6.10 - 13 Aug 2023\nBug fix:\n- Query is set to pathname when ? not presented in dynamic mode\n\n# 0.6.9 - 11 Aug 2023\nBug fix:\n- Derive not working on dynamic mode\n\n# 0.6.8 - 11 Aug 2023\nBug fix:\n- append routes on dynamic mode\n\n# 0.6.7 - 11 Aug 2023\nBug fix:\n- use: Plugin type inference\n\n# 0.6.6 - 11 Aug 2023\nBug fix:\n- Collide Elysia.prefix on other methods\n\n# 0.6.5 - 11 Aug 2023\nBug fix:\n- Collide Elysia.prefix type\n\n# 0.6.4 - 11 Aug 2023\nBug fix:\n- Collide Elysia.prefix type\n- Add skip group with prefix instance see [#85](https://github.com/elysiajs/elysia/pull/85)\n\n# 0.6.3 - 8 Aug 2023\nBug fix:\n- resolve .code and [ERROR_CODE]\n\n# 0.6.2 - 8 Aug 2023\nChange:\n- Add **ErrorCode** symbol\n\nBug fix:\n- Inline guard hook\n- Error code not handled\n- Set default query to {} when presented\n\n# 0.6.1 - 6 Aug 2023\nImprovement:\n- Drop usage of `node:process` to support Cloudflare Worker\n\n# 0.6.0 - 6 Aug 2023\nFeature:\n- Introducing Dynamic Mode (aot: false)\n- Introducing `.mount`\n- Introducing `.error` for handling Strict Error Type\n- Plugin checksum for plugin deduplication\n- Add `.onResponse`\n\nImprovement:\n- TypeBox 0.30\n- AfterHandle now automatically maps the value\n- Using Bun Build for targeting Bun\n- Support Cloudflare worker with Dynamic Mode (and ENV)\n\nChange:\n- Moved registerSchemaPath to @elysiajs/swagger\n\n# 0.6.0-alpha.4\nFeature:\n- Add `addError` to declaratively add Error to scope\n- Add `afterHandle` now can return a literal value instead of limited to only `Response`\n\n# 0.6.0-alpha.3 - 29 Jul 2023\nFeature:\n- Introduce `.mount`\n- Add dynamic mode for TypeBox\n- Add $elysiaChecksum to deduplicate lifecycle event\n- Add $elysiaHookType to differentiate between global and local hook in `use`\n\nFix:\n- Deduplication of plugin's lifecycle (see $elysiaHookType)\n\nChange:\n- Using Bun Build for target Bun\n\nBreaking Change:\n- [Internal] refactored `getSchemaValidator`, `getResponseSchemaValidator` to named parameters\n- [Internal] moved `registerSchemaPath` to `@elysiajs/swagger`\n\n# 0.6.0-alpha.2\nFeature:\n- [Internal] Add qi (queryIndex) to context\n- Add `error` field to Elysia type system for adding custom error message\n\n# 0.6.0-alpha.1\nFeature:\n- [Internal] Add support for accessing composedHandler via routes\n\n# 0.6.0-alpha.0\nFeature:\n- Dynamic mode for Cloudflare Worker\n- Support for registering custom error code\n- Using `loosePath` (by default), and add `config.strictPath\n- Support for setting basePath\n- Recursive path typing\n\nImprovement:\n- Slighty improve type checking speed\n\nBug Fix:\n- recursive schema collision causing infinite type\n\nBreaking Change:\n- Remove Elysia Symbol (Internal)\n\n# 0.5.25 - 25 Jul 2023\nBug fix:\n- ws resolve type to undefined instead of unknown cause unexpected type mismatched when not provided\n\n# 0.5.24 - 22 Jul 2023\nBug fix:\n- [#68](https://github.com/elysiajs/elysia/issues/68) invalid path params when using numeric\n\n# 0.5.23 - 20 Jul 2023\nBug fix:\n- [#68](https://github.com/elysiajs/elysia/issues/68) invalid optional query params when using numeric\n\n# 0.5.22 - 9 Jul 2023\nBug fix:\n- update onAfterHandle to be Response only\n\n# 0.5.20 - 23 Jun 2023\nBug fix:\n- async fn on Static Code Analysis\n\n# 0.5.19 - 19 Jun 2023\nBug fix:\n- optimize `ws` plugin type\n\n# 0.5.18 - 11 Jun 2023\nBug fix:\n- `mapEarlyResponse` is missing on request\n\n# 0.5.17 - 7 Jun 2023\nImprovement:\n- Respect explicit body type first\n- `mapCompactResponse` on `null` or `undefined` type\n\nBug fix:\n- Mapped unioned type on Static Code Analysis\n- `form` is `undefined` when using parsing `formData`\n\n# 0.5.16 - 5 Jun 2023\nImprovement:\n- Respect inner scope of lifecycle first\n- Add type support for local `afterHandle`\n\nBug fix:\n- `onAfterHandler` cause response to mutate on void\n\n# 0.5.15 - 4 Jun 2023\nImprovement:\n- Map CommonJS module in package.json\n\n# 0.5.14 - 4 June 2023\nImprovement:\n- Using tsc to compile CommonJS instead of SWC to support `module.exports` syntax\n\n# 0.5.13 - 4 June 2023\nBug fix:\n- Add loosen type for onError's code for defying custom error status\n\n# 0.5.12 - 3 June 2023\nBug fix:\n- Multiple onRequest cause error\n\n# 0.5.11 - 31 May 2023\nImprovement:\n- Experimental basic support for Static Code Analysis in Nodejs\n\n# 0.5.10 - 31 May 2023\nBug fix:\n- h is undefined when using headers in Node environment\n- Update Memoirist to 0.1.4 to support full CommonJS\n\n# 0.5.9 - 30 May 2023\nImprovement:\n- Add content-type support for 'none', 'arrayBuffer' / 'application/octet-stream'\n- Add type support type registration of wildcard params\n- Add support for 'config.basePath'\n\n# 0.5.8 - 27 May 2023\nImprovement:\n- Add support for returning a class instance\n\n# 0.5.7 - 25 May 2023\nBug fix:\n- Bun is undefined on other runtime\n\n# 0.5.6 - 25 May 2023\nImprovement:\n- Using `new Response` instead of factory `Response.json`\n\n# 0.5.5 - 25 May 2023\nImprovement:\n- Using request.json() to handle application/json body instead of JSON.parse(await c.text())\n\n# 0.5.4 - 25 May 2023\nImprovement:\n- Add Static Code Analysis for conditional try-catch\n- Reduce usage of method to accessor\n\n# 0.5.3 - 22 May 2023\nImprovement:\n- Add `mapCompactResponse` for static code analysis\n- Using `constructor.name` to inline object mapping\n- Using single assignment for URL destructuring\n- Using default map for dynamic route to remove static map label and break\n\nBug fix:\n- Web Socket context.headers is empty [Elysia#46](https://github.com/elysiajs/elysia/issues/46)\n\n# 0.5.2 - 16 May 2023\nImprovement:\n- Static Code Analysis for fallback route\n\nBug fix:\n- Remove constant generic from `state` to be mutable\n\n# 0.5.1 - 16 May 2023\nBug fix:\n- Syntax error if multiple numeric type is set\n- Prevent fallthrough behavior of switch map\n\n# 0.5.0 - 15 May 2023\nImprovement:\n- Add CommonJS support for running Elysia with Node adapter\n- Remove manual fragment mapping to speed up path extraction\n- Inline validator in `composeHandler` to improve performance\n- Use one time context assignment\n- Add support for lazy context injection via Static Code Analysis\n- Ensure response non nullability\n- Add unioned body validator check\n- Set default object handler to inherits\n- Using `constructor.name` mapping instead of `instanceof` to improve speed\n- Add dedicated error constructor to improve performance\n- Conditional literal fn for checking onRequest iteration\n- improve WebSocket type\n\nBug fix:\n- Possible\n\nBreaking Change:\n- Rename `innerHandle` to `fetch`\n    - to migrate: rename `.innerHandle` to `fetch`\n- Rename `.setModel` to `.model`\n    - to migrate: rename `setModel` to `model`\n- Remove `hook.schema` to `hook`\n    - to migrate: remove schema and curly brace `schema.type`:\n    ```ts\n    // from\n    app.post('/', ({ body }) => body, {\n        schema: {\n            body: t.Object({\n                username: t.String()\n            })\n        }\n    })\n\n    // to\n    app.post('/', ({ body }) => body, {\n        body: t.Object({\n            username: t.String()\n        })\n    })\n    ```\n- remove `mapPathnameRegex` (internal)\n\n# 0.5.0-beta.8 - 15 May 2023\nBug fix:\n- it recompile on async\n\n# 0.5.0-beta.7 15 May 2023\nBug fix:\n- detect promise on parse\n- using swc to compile to commonjs\n\n# 0.5.0-beta.6 - 15 May 2023\nImprovement:\n- Improve merge schema type\n\n# 0.5.0-beta.5 - 15 May 2023\nBug fix:\n- Add support for ALL method for dynamic path\n- Add support for parser in pre-compiled body\n\n# 0.5.0-beta.4 - 15 May 2023\nBug fix:\n- Use Memoirist instead of Raikiri in ws\n\n# 0.5.0-beta.3 - 15 May 2023\nImprovement:\n- Static Code Analysis on derive\n\n# 0.5.0-beta.2 - 14 May 2023\nImprovement:\n- Re-compile on lazy modules\n\n# 0.5.0-beta.1 - 14 May 2023\nImprovement:\n- Merge nested schema type\n\n# 0.4.14 - 2 May 2023\nFix:\n- set default object handler to inherits\n\n# 0.4.13 - 28 Apr 2023\nFix:\n- emergency override experimental version\n\n# 0.4.12 - 26 Apr 2023\nFix:\n- CatchResponse to return 200 status code by default when using Eden Treaty\n\n# 0.4.11 - 26 Apr 2023\nFix:\n- response schema doesn't unwrap response type\n\n# 0.4.10 - 25 Apr 2023\nFix:\n- Update Raikiri stability\n\n# 0.4.9 - 21 Apr 2023\nImprovement:\n- Add support for `parse` in websocket [#33](https://github.com/elysiajs/elysia/pull/33)\n\nFix:\n- Inherits out-of-order `onError` life cycle in nested group\n- Update Raikiri to 0.1.2 to handle mangled part\n\n# 0.4.8 - 18 Apr 2023\nFix:\n- Fix LocalHandler doesn't check single type response\n\n# 0.4.7 - 18 Apr 2023\nImprovement:\n- Update Raikiri to ^1.1.0\n\n# 0.4.6 - 10 Apr 2023\nImprovement:\n- perf: add static route main class\n- perf: reduce `ComposedHandler` to function instead of nested object\n\nFix:\n- `group` and `guard` shouldn't decorate a request on type-level (acceptable on run-time level for shared memory)\n\n# 0.4.5 - 6 Apr 2023\nFix:\n- Using default value check for `set.status` instead truthy value\n\n# 0.4.4 - 6 Apr 2023\nImprovement:\n- using `isNotEmpty` for `mapResponse`\n- pre check if `set.headers['Set-Cookie']` is array before converting to headers\n- using `mapPathnameAndQueryRegEx.exec(request.url)` instead of `request.url.match(mapPathnameAndQueryRegEx)`\n\n# 0.4.3 - 31 Mar 2023\nFix:\n- Scoped decorators\n\n# 0.4.2 - 31 Mar 2023\nImprovement:\n- Use constructor name for faster handler matching\n- Map Promise\n\n# 0.4.1 - 31 Mar 2023\nFix:\n- remove type module from package.json\n\n# 0.4.0 - 30 Mar 2023\nFeature:\n- Ahead of Time compilation\n- TypeBox 0.26\n- Validate response per status instead of union\n- Add `if` for conditional route\n- Custom Validation Error\n\nImprovement:\n- Update TypeBox to 0.26.8\n- Inline a declaration for response type\n- Refactor some type for faster response\n- Use Typebox `Error().First()` instead of iteration\n- Add `innerHandle` for returning an actual response (for benchmark)\n\nBreaking Change:\n- Separate `.fn` to `@elysiajs/fn`\n\n# 0.3.2 - 26 Mar 2023\nFix:\n- child to inhertis WebSocket plugin (https://github.com/elysiajs/elysia/issues/27)\n- multiple status response does not work with the group (https://github.com/elysiajs/elysia/issues/28)\n\n# 0.3.1 - 17 Mar 2023\nFix:\n- Wildcard fallback of Raikiri\n\n# 0.3.0 - 17 Mar 2023\nFeature:\n- Elysia Fn\n- Suport `multipart/form-data`\n- `t.File` and `t.Files` for file validation\n- `schema.content` for specifying content type\n\nImprovement:\n- Add string format: 'email', 'uuid', 'date', 'date-time'\n- Update @sinclair/typebox to 0.25.24\n- Update Raikiri to 0.2.0-beta.0 (ei)\n- Add file upload test thanks to #21 (@amirrezamahyari)\n- Pre compile lowercase method for Eden\n- Reduce complex instruction for most Elysia types\n- Change store type to `unknown`\n- Compile `ElysiaRoute` type to literal\n- Optimize type compliation, type inference and auto-completion\n- Improve type compilation speed\n- Improve TypeScript inference between plugin registration\n- Optimize TypeScript inference size\n- Context creation optimization\n- Use Raikiri router by default\n- Remove unused function\n- Refactor `registerSchemaPath` to support OpenAPI 3.0.3\n- Add `error` inference for Eden\n- Mark `@sinclair/typebox` as optional `peerDenpendencies`\n\nFix:\n- Raikiri 0.2 thrown error on not found\n- Union response with `t.File` is not working\n- Definitions isn't defined on Swagger\n- details are missing on group plugin\n- group plugin, isn't unable to compile schema\n- group is not exportable because EXPOSED is a private property\n- Multiple cookies doesn't set `content-type` to `application/json`\n- `EXPOSED` is not export when using `fn.permission`\n- Missing merged return type for `.ws`\n- Missing nanoid\n- context side-effects\n- `t.Files` in swagger is referring to single file\n- Eden response type is unknown\n- Unable to type `setModel` inference definition via Eden\n- Handle error thrown in non permission function\n- Exported variable has or is using name 'SCHEMA' from external module\n- Exported variable has or is using name 'DEFS' from external module\n- Possible errors for building Elysia app with `declaration: true` in `tsconfig.json`\n\nBreaking Change:\n- Rename `inject` to `derive`\n- Depreacate `ElysiaRoute`, changed to inline\n- Remove `derive`\n- Update from OpenAPI 2.x to OpenAPI 3.0.3\n- Move context.store[SYMBOL] to meta[SYMBOL]\n\n# 0.3.0-rc.9 - 16 Mar 2023\nImprovement:\n- Add string format: 'email', 'uuid', 'date', 'date-time'\n\n# 0.3.0-rc.8 - 16 Mar 2023\nFix:\n- Raikiri 0.2 thrown error on not found\n\n# 0.3.0-rc.7 - 16 Mar 2023\nImprovement:\n- Update @sinclair/typebox to 0.25.24\n- Update Raikiri to 0.2.0-beta.0 (ei)\n- Add file upload test thanks to #21 (@amirrezamahyari)\n\n# 0.3.0-rc.6 - 10 Mar 2023\nFix:\n- Union response with `t.File` is not working\n\n# 0.3.0-rc.5 - 10 Mar 2023\nFix:\n- Definitions isn't defined on Swagger\n- details are missing on group plugin\n- group plugin, isn't unable to compile schema\n- group is not exportable because EXPOSED is a private property\n\n# 0.3.0-rc.4 - 9 Mar 2023\nFix:\n- console.log while using cookie\n\n# 0.3.0-rc.3 - 9 Mar 2023\nBreaking Change:\n- Rename `inject` to `derive`\n\nFix:\n- Multiple cookies doesn't set `content-type` to `application/json`\n- `EXPOSED` is not export when using `fn.permission`\n\n# 0.3.0-rc.2 - 7 Mar 2023\nFix:\n- Missing merged return type for `.ws`\n\n# 0.3.0-rc.1 - 7 Mar 2023\nFix:\n- Missing nanoid\n\n# 0.3.0-beta.6 - 4 Mar 2023\nFix:\n- context side-effects\n\n# 0.3.0-beta.5 - 1 Mar 2023\nImprovement:\n- Pre compile lowercase method for Eden\n\n# 0.3.0-beta.3 - 27 Feb 2023\nImprovement:\n- ~33% faster for compiling type inference\n- Reduce complex instruction for most Elysia types\n- Change store type to `unknown`\n\nFix:\n- `t.Files` in swagger is referring to single file\n- Eden response type is unknown\n\n# 0.3.0-beta.2 - 27 Feb 2023\nImprovement:\n- Compile `ElysiaRoute` type to literal\n- Optimize type compliation, type inference and auto-completion\n- Improve type compilation speed by ~3x\n\nFix:\n- Unable to type `setModel` inference definition via Eden\n\nBreaking Change:\n- Depreacate `ElysiaRoute`, changed to inline\n\n# 0.3.0-beta.1 - 25 Feb 2023\nFix:\n- Handle error thrown in non permission function\n\n# 0.3.0-beta.0 - 25 Feb 2023\nFeature:\n- Elysia Fn\n- Suport `multipart/form-data`\n- `t.File` and `t.Files` for file validation\n- `schema.content` for specifying content type\n\nImprovement:\n- Improve TypeScript inference between plugin registration\n- Optimize TypeScript inference size\n- Context creation optimization\n- Use Raikiri router by default\n- Remove unused function\n- Refactor `registerSchemaPath` to support OpenAPI 3.0.3\n- Add `error` inference for Eden\n- Mark `@sinclair/typebox` as optional `peerDenpendencies`\n\nFix:\n- Exported variable has or is using name 'SCHEMA' from external module\n- Exported variable has or is using name 'DEFS' from external module\n- Possible errors for building Elysia app with `declaration: true` in `tsconfig.json`\n\nBreaking Change:\n- Remove `derive`\n- Update from OpenAPI 2.x to OpenAPI 3.0.3\n- Move context.store[SYMBOL] to meta[SYMBOL]\n\n# 0.2.9 - 20 Feb 2023\nBug fix:\n- `group` doesn't inherits `onError`\n\n# 0.2.8 - 20 Feb 2023\nBug fix:\n- `group` doesn't inherits `onError`\n\n# 0.2.7 - 15 Feb 2023\nImprovement:\n- Remove `bind(this)`\n\n# 0.2.6 - 10 Feb 2023\nFeature:\n- Add supports for multiple cookie\n\n# 0.2.5 - 1 Feb 2023\nImprovement:\n- Minor optimization\n\n# 0.2.4 - 1 Feb 2023\nImprovement:\n- Using SWC to bundle and minification\n- Minor optimization\n\n# 0.2.3 - 30 Jan 2023\nImprovement:\n- Update Raikiri to 0.0.0-beta.4\n\nChange:\n- Remove strictPath option and enabled by default\n\n# 0.2.2 - 30 Jan 2023\nImprovement:\n- Migrate from @medley/router to Raikiri\n- Minor optimization\n\n# 0.2.0-rc.1 - 24 Jan 2023\nImprovement:\n- Map OpenAPI's schema detail on response\n- Fix Type instantiation is excessively deep and possibly infinite\n- Improve TypeScript inference time by removing recursive type in generic\n- Inferred body is never instead of unknown\n\n# 0.2.0-rc.0 - 23 Jan 2023\nFeature:\n- Add support for reference model via `.model`\n- Add support for OpenAPI's `definitions` field\n\n# 0.2.0-beta.2 - 22 Jan 2023\nFeature:\n- Add support for custom openapi field using `schema.detail`\n- Add support for custom code for `response`\n\nImprovement:\n- Unioned status type for response\n- Optimize TypeScript inference performance\n\n# 0.2.0-beta.1 - 22 Jan 2023\nBreaking Change:\n- `onParse` now accepts `(context: PreContext, contentType: string)` instead of `(request: Request, contentType: string)`\n    - To migrate, add `.request` to context to access `Request`\n\nFeature:\n- `onRequest` and `onParse` now can access `PreContext`\n- Support `application/x-www-form-urlencoded` by default\n\nImprovement:\n- body parser now parse `content-type` with extra attribute eg. `application/json;charset=utf-8`\n\n# 0.2.0-beta.0 - 17 Jan 2023\nFeature:\n- Support for Async / lazy-load plugin\n\nImprovement:\n- Decode URI parameter path parameter\n- Handle union type correctly\n\n# 0.1.3 - 12 Jan 2023\nImprovement:\n- Validate `Response` object\n- Union type inference on response\n\n# 0.1.2 - 31 Dec 2022\nBug fix:\n- onRequest doesn't run in `group` and `guard`\n\n# 0.1.1 - 28 Dec 2022\nImprovement:\n- Parse encoded URI on querystring\n- Exclude URI fragment from querystring\n- Blasphemy hack for updating Elysia server using `--hot`\n- Exclude fragment on `getPath`\n\n# 0.1.0 - 24 Dec 2022\n[[Reburn](https://youtu.be/xVPDszGmTgg?t=1139)] is the first *stable* beta release for Elysia.\n\nHappy Christmas, wishing you happy tonight as we release the first stable release of Elysia.\n\nWith this API is now stabilized, and Elysia will focus on growing its ecosystem and plugins for common patterns.\n\n## Eden\nIntroducing [Eden](https://elysiajs.com/plugins/eden.html), a fully type-safe client for Elysia server like tRPC.\n\nA 600 bytes client for Elysia server, no code generation need, creating a fully type-safe, and auto-complete for both client and server.\n\nSee Eden in action [on Twitter](https://twitter.com/saltyAom/status/1602362204799438848?s=20&t=yqyxaNx_W0MNK9u3wnaK3g)\n\n## The fastest\nWith a lot effort put into micro-optimization and re-architecture, Elysia is the fastest Bun web framework benchmarked on 24 December 2022, outperformed 2/3 category put into test.\n\nSee benchmark results at [Bun http benchmark](https://github.com/SaltyAom/bun-http-framework-benchmark)\n\n## Improved Documentation\nElysia now have an improved documentation at [elysiajs.com](https://elysiajs.com).\n\nNow with a proper landing page, searchable content, and revised content put into.\n\n## Afterward\nMerry Christmas, and happy new year.\n\nAs 0.1 released, we recommended to give Elysia a try and build stuff with it.\n\nWith the wonderful tools, we are happy to looking forward to see what wonderful software will you build.\n\n---\n\n> Fly away, let me fly away\n> Never hide in dark\n> Head on, start a riot\n> Fly away, defying fate in my way\n> Crush it\n> Make it!\n> Feel\n> My\n> Heart!\n\n# 0.1.0.rc.10 - 21 Dec 2022\nChange:\n- Remove cjs format as Bun can import ESM from CJS\n- Remove comment on build file, rely on .t.ds instead\n\n# 0.1.0.rc.9 - 19 Dec 2022\nChange:\n- Support plugins which use `getPath`, and `mapQuery` on 0.1.0-rc.6\n\n# 0.1.0.rc.8 - 16 Dec 2022\nImprovement:\n- Infers type from `group`, and `guard`\n\nChange:\n- `Elysia.handle` now only accept valid `URL`\n\n# 0.1.0.rc.7 - 15 Dec 2022\nImprovement:\n- Minor optimization\n- `Router.register` now returns type\n- Inline default bodyParser\n\n# 0.1.0.rc.6 - 13 Dec 2022\nFix:\n- `.listen` object is now optional\n\n# 0.1.0.rc.5 - 13 Dec 2022\nBreaking Change:\n- `onError` change its type:\n```typescript\n// Previously\nonError: (error: Error, code: ErrorCode)\n\n// Now\nonError: (params: {\n    error: Error\n    code: ErrorCode\n    set: Context['set']\n}) => any\n```\n\nTo migrate, add curly brace to `onError` parameters.\n\n- `onRequest` change its type:\n```typescript\n// Previously\nonRequest: (request: Request, store: Instance['Store']) => any\n\n// Now\nonRequest: (params: {\n    request: Request,\n    store: Instance['store']\n    set: Context['set']\n})\n```\nTo migrate, add curly brace to `onRequest` parameters.\n\nFeature:\n- Manual patch for [bun#1435](https://github.com/oven-sh/bun/issues/1435), and unblock test suite for error handler.\n\n# 0.1.0.rc.4 - 12 Dec 2022\nFix:\n- Remove `console.log` for '*'\n\n# 0.1.0.rc.3 - 12 Dec 2022\nFeature:\n- Strict type for `SCHEMA`\n- Infered type parameters for `SCHEMA`\n\nFix:\n- Auto prefix path with `/` for non\n- Fallback catch all route for registered parameter\n\n# 0.1.0.rc.2 - 8 Dec 2022\nFix:\n- skip body parsing for 'HEAD'\n- missing response status on some error\n- compatability for cjs\n- add main fields for Bundlephobia supports\n- add declaration file for both esm and cjs\n- ship `src` for TypeScript support with `declare global`\n\n# 0.1.0.rc.1 - 6 Dec 2022\nStabilized API\n\nFeature:\n- add header access to context via `context.header`\n\nBreaking Change:\n- rename `schema.header` to `schema.headers`\n\n# 0.0.0-experimental.55 - 1 Dec 2022\nBug fix:\n- `inject` now accept `Context`\n\n# 0.0.0-experimental.54 - 1 Dec 2022\nFeature:\n- `derive` to creating derive state\n- `inject` to decorate method based on context\n\n# 0.0.0-experimental.53 - 24 Nov 2022\nFeature:\n- `.all` for registering path with any method\n\nImprovement:\n- `getSchemaValidator` now infer output type to be reusable with `@kingworldjs/trpc`\n\nBug fix:\n- `handler.hooks` is undefined on 404\n\n# 0.0.0-experimental.52 - 23 Nov 2022\nImprovement:\n- Decorators is now lazily allocate\n- `.serve` now accept numberic string as port for convenient with `process.env`\n\n# 0.0.0-experimental.51 - 22 Nov 2022\n[[Just Right Slow]](https://youtu.be/z7nN7ryqU28) introduce breaking major changes of KingWorld, specific on a plugin system.\n\nPreviously, we define plugin by accepting 2 parameters, `KingWorld` and `Config` like this:\n```typescript\nconst plugin = (app: KingWorld, config) => app\n\nnew KingWorld().use(plugin, {\n    // Provide some config here\n})\n```\n\nHowever, this has flaw by the design because:\n- No support for async plugin\n- No generic for type inference\n- Not possible to accept 3...n parameters (if need)\n- Hard/heavy work to get type inference\n\nTo fix all of the problem above, KingWorld now accept only one parameter.\n\nA callback which return KingWorld Instance, but accept anything before that.\n```typescript\nconst plugin = (config) => (app: KingWorld) => app\n\nnew KingWorld().use(plugin({\n    // provide some config here\n}))\n```\n\nThis is a workaround just like the way to register async plugin before exp.51, we accept any parameters in a function which return callback of a KingWorld instance.\n\nThis open a new possibility, plugin can now be async, generic type is now possible.\n\nMore over that, decorate can now accept any parameters as it doesn't really affect any performance or any real restriction.\n\nWhich means that something like this is now possible.\n```typescript\nconst a = <Name extends string = string>(name: Name) => (app: KingWorld) => app.decorate(name, {\n    hi: () => 'hi'\n})\n\nnew KingWorld()\n    .use(a('customName'))\n    // Retrieve generic from plugin, not possible before exp.51\n    .get({ customName } => customName.hi())\n```\n\nThis lead to even more safe with type safety, as you can now use any generic as you would like.\n\nThe first plugin to leverage this feature is [jwt](https://github.com/saltyaom/kingworld-jwt) which can introduce jwt function with custom namespace which is type safe.\n\nChange:\n- new `decorators` property for assigning fast `Context`\n\n# 0.0.0-experimental.50 - 21 Nov 2022\nImprovement:\n- Faster router.find performance\n- Faster query map performance\n- Early return on not found\n- Better type for `router`\n\nChange:\n- Remove `storeFactory` from router\n\n# 0.0.0-experimental.49 - 19 Nov 2022\nBug fix:\n- Conditionally return header in response\n\n# 0.0.0-experimental.48 - 18 Nov 2022\nBug fix:\n- Import Context as non-default\n- TypeScript's type not infering Context\n\n# 0.0.0-experimental.47 - 18 Nov 2022\nBug fix:\n- Remove `export default Context` as it's a type\n- Import Context as non-default\n\n# 0.0.0-experimental.46 - 18 Nov 2022\nBug fix:\n- Add custom response to `Blob`\n\n# 0.0.0-experimental.45 - 18 Nov 2022\nBug fix:\n- Set default HTTP status to 200 (https://github.com/oven-sh/bun/issues/1523)\n\n# 0.0.0-experimental.44 - 18 Nov 2022\nImprovement:\n- Faster object iteration for setting headers\n- `KingWorld` config now accept `Serve` including `SSL`\n\nChange:\n- Use direct comparison for falsey value\n\n# 0.0.0-experimental.42 - 13 Nov 2022\nBug fix:\n- Router doesn't handle part which start with the same letter\n\n# 0.0.0-experimental.41 - 9 Nov 2022\nChange:\n- Internal schema now use correct OpenAPI type (KingWorld need CORRECTION 💢💢)\n\n# 0.0.0-experimental.40 - 9 Nov 2022\nBreaking Change:\n- `Context` is now `interface` (non-constructable)\n- `responseHeaders`, `status`, `redirect` is now replaced with `set`\n    - To migrate:\n    ```typescript\n    // From\n    app.get('/', ({ responseHeaders, status, redirect }) => {\n        responseHeaders['server'] = 'KingWorld'\n        status(401)\n        redirect('/')\n    })\n\n    // To\n    app.get('/', ({ set }) => {\n        set.headers['server'] = 'KingWorld'\n        set.status = 401\n        set.redirect = '/'\n    })\n    ```\n\nImprovement:\n- Global `.schema` now infer type for handler\n- Add JSDocs for main method with example\n- `.listen` now accept `Bun.Server` as a callback function\n- Response support for `FileBlob`\n\n# 0.0.0-experimental.39 - 8 Nov 2022\nBreaking Change:\n- `method` is changed to `route`\n\nImprovement:\n- `LocalHook` now prefers the nearest type instead of the merge\n- Merge the nearest schema first\n- add `contentType` as a second parameter for `BodyParser`\n\nBug fix:\n- Correct type for `after handle`\n- Fix infinite cycling infer type for `Handler`\n\n# 0.0.0-experimental.38 - 7 Nov 2022\nBug fix:\n- Correct type for `afterHandle`\n\n# 0.0.0-experimental.37 - 6 Nov 2022\n[[Sage]](https://youtu.be/rgM5VGYToQQ) is one of the major experimental releases and breaking changes of KingWorld.\n\nThe major improvement of Sage is that it provides almost (if not) full support for TypeScript and type inference.\n\n## Type Inference\nKingWorld has a complex type of system. It's built with the DRY principle in mind, to reduce the developer's workload.\n\nThat's why KingWorld tries to type everything at its best, inferring type from your code into TypeScript's type.\n\nFor example, writing schema with nested `guard` is instructed with type and validation.\nThis ensures that your type will always be valid no matter what, and inferring type to your IDE automatically.\n![FgqOZUYVUAAVv6a](https://user-images.githubusercontent.com/35027979/200132497-63d68331-cf96-4e12-9f4d-b6a8d142eb69.jpg)\n\nYou can even type `response` to make your that you didn't leak any important data by forgetting to update the response when you're doing a migration.\n\n## Validator\nKingWorld's validator now replaced `zod`, and `ajv` with `@sinclair/typebox`.\n\nWith the new validator, validation is now faster than the previous version by 188x if you're using zod, and 4.1x if you're using ajv adapter.\n\nWith Edge Computing in mind, refactoring to new validate dropped the unused packages and reduced size by 181.2KB.\nTo give you an idea, KingWorld without a validator is around 10KB (non-gzipped).\n\nMemory usage is also reduced by almost half by changing the validator.\n###### According to M1 Max running `example/simple.ts`, running exp.36 uses 24MB of memory while exp.37 use 12MB of memory\n\nThis greatly improves the performance of KingWorld in a long run.\n\n## Changelog\nBreaking Change:\n- Replace `zod`, `zod-to-json-schema`, `ajv`, with `@sinclair/typebox`\n\nImprovement:\n- `use` now accept any non `KingWorld<{}, any>`\n- `use` now combine typed between current instance and plugin\n- `use` now auto infer type if function is inline\n- `LocalHook` can now infer `params` type from path string\n\nChange:\n- `TypedSchema` is now replaced with `Instance['schema']`\n\n# 0.0.0-experimental.36 - 4 Nov 2022\nBreaking Change:\n- `AfterRequestHandle` now accept (`Context`, `Response`) instead of `(Response, Context)`\n\nImprovement:\n- `.guard` now combine global and local recursively\n- `.use` now inherits schema\n\n# 0.0.0-experimental.35 - 3 Nov 2022\nBug fix:\n- Remove `console.log` on failed validation\n\n# 0.0.0-experimental.34 - 3 Nov 2022\nImprovement:\n- Add Ajv 8.11.0\n- Error log for validation is updated to `instancePath`\n\n# 0.0.0-experimental.33 - 3 Nov 2022\nFeature:\n- `.schema` for global schema validation\n- `.start`, `.stop` and accept `KingWorld<Instance>` as first parameter\n\nImprovement:\n- `.guard` now auto infer type from schema to `Handler`\n- scoped `.guard` now inherits hook\n- `NewInstance` now inherits `InheritSchema`\n\nBug fix:\n- Rename `afterHandle` to `onAfterHandle` to match naming convention\n- Make `afterHandle` in `RegisterHook` optional\n- Internal type conversion between `Hook`, `LocalHook`\n\n# 0.0.0-experimental.32 - 2 Nov 2022\nFeature:\n- add `afterHandle` hook\n\nImprovement:\n- Using `WithArray<T>` to reduce redundant type\n\nBug fix:\n- `beforeHandle` hook doesn't accept array\n\n# 0.0.0-experimental.31 - 2 Nov 2022\nBug fix:\n- Add `zod` by default\n\n# 0.0.0-experimental.30 - 2 Nov 2022\nBug fix:\n- Add `zod-to-json-schema` by default\n\n# 0.0.0-experimental.29 - 2 Nov 2022\n[Regulus]\n\nThis version introduces rework for internal architecture. Refine, and unify the structure of how KingWorld works internally.\n\nAlthough many refactoring might require, I can assure you that this is for the greater good, as the API refinement lay down a solid structure for the future of KingWorld.\n\nThanks to API refinement, this version also introduced a lot of new interesting features, and many APIs simplified.\n\nNotable improvements and new features:\n- Define Schema, auto-infer type, and validation\n- Simplifying Handler's generic\n- Unifying Life Cycle into one property\n- Custom Error handler, and body-parser\n- Before start/stop and clean up effect\n\n# 0.0.0-experimental.28 - 30 Oct 2022\nHappy halloween.\n\nThis version named [GHOST FOOD] is one of the big improvement for KingWorld, I have been working on lately.\nIt has a lot of feature change for better performance, and introduce lots of deprecation.\n\nBe sure to follow the migration section in `Breaking Change`.\n\nFeature:\n- Auto infer type from `plugin` after merging with `use`\n- `decorate` to extends `Context` method\n- add `addParser`, for custom handler for parsing body\n\nBreaking Change:\n- Moved `store` into `context.store`\n    - To migrate:\n    ```typescript\n    // From\n    app.get(({}, store) => store.a)\n\n    // To\n    app.get(({ store }) => store.a)\n    ```\n\n- `ref`, and `refFn` is now removed\n- Remove `Plugin` type, simplified Plugin type declaration\n    - To migrate:\n    ```typescript\n    // From\n    import type { Plugin } from 'kingworld'\n    const a: Plugin = (app) => app\n\n    // To\n    import type { KingWorld } from 'kingworld'\n    const a = (app: KingWorld) => app\n    ```\n\n- Migrate `Header` to `Record<string, unknown>`\n    - To migrate:\n    ```typescript\n    app.get(\"/\", ({ responseHeader }) => {\n        // From\n        responseHeader.append('X-Powered-By', 'KingWorld')\n\n        // To\n        responseHeader['X-Powered-By', 'KingWorld']\n\n        return \"KingWorld\"\n    })\n    ```\n\nChange:\n- Store is now globally mutable\n\nImprovement:\n- Faster header initialization\n- Faster hook initialization\n\n# 0.0.0-experimental.27 - 23 Sep 2022\nFeature:\n- Add `config.strictPath` for handling strict path\n\n# 0.0.0-experimental.26 - 10 Sep 2022\nImprovement:\n- Improve `clone` performance\n- Inline `ref` value\n- Using object to store internal route\n\nBug fix:\n- 404 on absolute path\n\n# 0.0.0-experimental.25 - 9 Sep 2022\nFeature:\n- Auto infer typed for `params`, `state`, `ref`\n- `onRequest` now accept async function\n- `refFn` syntax sugar for adding fn as reference instead of `() => () => value`\n\nImprovement:\n- Switch from `@saltyaom/trek-router` to `@medley/router`\n- Using `clone` instead of flatten object\n- Refactor path fn for inline cache\n- Refactor `Context` to class\n\nBug fix:\n- `.ref()` throw error when accept function\n\n# 0.0.0-experimental.24 - 21 Aug 2022\nChange:\n- optimized for `await`\n\n# 0.0.0-experimental.23 - 21 Aug 2022\nFeature:\n- Initialial config is now available, starting with `bodyLimit` config for limiting body size\n\nBreaking Change:\n- `ctx.body` is now a literal value instead of `Promise`\n    - To migrate, simply remove `await`\n\nChange:\n- `default` now accept `Handler` instead of `EmptyHandler`\n\nBug fix:\n- Default Error response now return `responseHeaders`\n- Possibly fixed parsing body error benchmark\n\n# 0.0.0-experimental.22 - 19 Aug 2022\nBreaking Change:\n- context.body is now deprecated, use request.text() or request.json() instead\n\nImprovement:\n- Using reference header to increase json response speed\n- Remove `body` getter, setter\n\nChange:\n- Using `instanceof` to early return `Response`\n\n# 0.0.0-experimental.21 - 14 Aug 2022\nBreaking Change:\n- `context.headers` now return `Header` instead of `Record<string, string>`\n\nFeature:\n- Add status function to `Context`\n- `handle` now accept `number | Serve`\n- Remove `querystring` to support native Cloudflare Worker\n- Using raw headers check to parse `body` type\n\n# 0.0.0-experimental.20 - 13 Aug 2022\nFeature:\n- Handle error as response\n\n# 0.0.0-experimental.19 - 13 Aug 2022\nChange:\n- Use Array Spread instead of concat as it's faster by 475%\n- Update to @saltyaom/trek-router 0.0.7 as it's faster by 10%\n- Use array.length instead of array[0] as it's faster by 4%\n\n# 0.0.0-experimental.18 - 8 Aug 2022\nChange:\n- With lazy initialization, KingWorld is faster by 15% (tested on 14' M1 Max)\n- Micro optimization\n- Remove `set` from headers\n\n# 0.0.0-experimental.17 - 15 Jul 2022\nChange:\n- Remove dependencies: `fluent-json-schema`, `fluent-schema-validator`\n- Update `@saltyaom/trek-router` to `0.0.2`\n\n# 0.0.0-experimental.16 - 15 Jul 2022\nBreaking Change:\n- Move `hook.schema` to separate plugin, [@kingworldjs/schema](https://github.com/saltyaom/kingworld-schema)\n    - To migrate, simply move all `hook.schema` to `preHandler` instead\n\nChange:\n- Rename type `ParsedRequest` to `Context`\n- Exposed `#addHandler` to `_addHandler`\n\n# 0.0.0-experimental.15 - 14 Jul 2022\nBreaking Change:\n- Rename `context.responseHeader` to `context.responseHeaders`\n- Change type of `responseHeaders` to `Header` instead of `Record<string, string>`\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.1552734375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our community include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address, without their explicit permission\n* Contacting individual members, contributors, or leaders privately, outside designated community mechanisms, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Enforcement Responsibilities\n\nMaintaners are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\n\nMainteiners have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the maintainers. All complaints will be reviewed and investigated promptly and fairly.\n\nAll maintainers are obligated to respect the privacy and security of the reporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from maintainers, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of actions.\n\n**Consequence**: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including sustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 2.0, available at <https://www.contributor-covenant.org/version/2/0/code_of_conduct.html>.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct enforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at <https://www.contributor-covenant.org/faq>. Translations are available at <https://www.contributor-covenant.org/translations>.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.0185546875,
          "content": "# Welcome to Elysia.js contributing guide\n\nThank you for investing your time in contributing to Elysia.js! Any contribution you make will be amazing :sparkles:.\n\nRead our [Code of Conduct](./CODE_OF_CONDUCT.md) to keep our community approachable and respectable.\n\nIn this guide you will get an overview of the contribution workflow from opening an issue, creating a PR, reviewing, and merging the PR.\n\n## Setup Local Development Environment\n\nThe Elysia.js repo is using [bun](https://bun.sh). Make sure you have the [latest version of bun](https://github.com/oven-sh/bun/releases) installed in your system. To run Elysia.js locally:\n\n1. Clone this repository\n\n2. In the root of this project, run `bun install` to install all of the necessary dependencies\n\n3. To run the development version, run `bun run dev`\n\n### Unit Testing\n\nIn Elysia.js, all of the test files are located inside the [`test/`](test/) directory. Unit testing are powered by [bun's test](https://github.com/oven-sh/bun/tree/main/packages/bun-internal-test).\n\n-   `bun test` to run all the test inside the [`test/`](test/) directory\n\n-   `bun test test/<test-file>.ts` to run a specific test\n\n## Pull Request Guidelines\n\n-   Checkout a topic branch from a base branch (e.g. `main`), and merge back against that branch.\n\n-   If adding a new feature:\n\n    -   Add accompanying test case if possible.\n\n    -   Provide a convincing reason to add this feature. Ideally, you should open a suggestion issue first, and have it approved before working on it.\n\n-   If fixing a bug:\n\n    -   If you are resolving a special issue, please add the issues number in the PR's description.\n\n    -   Provide a detailed description of the bug in the PR. Live demo preferred.\n\n    -   Add appropriate test coverage if applicable.\n\n-   It's OK to have multiple small commits as you work on the PR. GitHub can automatically squash them before merging.\n\n## Thanks :purple_heart:\n\nThanks for all your contributions and efforts towards improving Elysia.js. We thank you for being part of our :sparkles: community :sparkles:!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0234375,
          "content": "Copyright 2022 saltyAom\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.466796875,
          "content": "<br>\n<p align=center>\n <img src=https://github.com/elysiajs/elysia/assets/35027979/2aa06df7-9acf-46fb-9cbc-3d218dee43ac alt=\"ElysiaJS logo with word ElysiaJS on the left\" width=480 />\n</p>\n\n<p align=center>Ergonomic Framework for Humans</p>\n\n<p align=center>\n    <a href=https://elysiajs.com>Documentation</a> | <a href=https://discord.gg/eaFJ2KDJck>Discord</a> | <a href=https://github.com/sponsors/SaltyAom>Sponsors</a>\n</p>\n\nTypeScript framework supercharged by Bun with End-to-End Type Safety, unified type system, and outstanding developer experience\n\n```bash\nbun create elysia app\n```\n\n![Elysia feature sheet including 18x faster than Express based on Techempower benchmark, Frontend RPC Connector, Advance TypeScript type, unified type single source of truth of type TypeScript runtime and documentation all at once, Made of Productivity focus on developer experience, powered by Bun, WinterCG Compliance, Fully type safe GraphQL (same author with GraphQL Mobius), documentation in one line, End-to-end type safety move fast and break nothing like tRPC, strong ecosystem most popular Bun native Web Framework](https://github.com/elysiajs/elysia/assets/35027979/d4b184ca-a622-434d-bb06-06c3110726af)\n\n## Documentation\nThe documentation is available on [elysiajs.com](https://elysiajs.com).\n\n## Contributing\nSee [Contributing Guide](CONTRIBUTING.md) and please follow our [Code of Conduct](CODE_OF_CONDUCT.md).\n\n## Discord\nCome join the [Discord community channel~](https://discord.gg/eaFJ2KDJck)\n"
        },
        {
          "name": "build.ts",
          "type": "blob",
          "size": 1.8447265625,
          "content": "import { $ } from 'bun'\nimport { build, type Options } from 'tsup'\n\nconst tsupConfig: Options = {\n\tentry: ['src/**/*.ts'],\n\tsplitting: false,\n\tsourcemap: false,\n\tclean: true,\n\tbundle: false,\n\tminify: false\n\t// outExtension() {\n\t// \treturn {\n\t// \t\tjs: '.js'\n\t// \t}\n\t// }\n} satisfies Options\n\nawait Promise.all([\n\t// ? tsup esm\n\tbuild({\n\t\toutDir: 'dist',\n\t\tformat: 'esm',\n\t\ttarget: 'node20',\n\t\tcjsInterop: false,\n\t\t...tsupConfig\n\t}),\n\t// ? tsup cjs\n\tbuild({\n\t\toutDir: 'dist/cjs',\n\t\tformat: 'cjs',\n\t\ttarget: 'node20',\n\t\t// dts: true,\n\t\t...tsupConfig\n\t})\n])\n\n// ? Fix mjs import\nconst glob = new Bun.Glob('./dist/**/*.mjs')\n\nfor await (const entry of glob.scan('.')) {\n\tconst content = await Bun.file(entry).text()\n\n\tawait Bun.write(\n\t\tentry,\n\t\tcontent\n\t\t\t.replace(\n\t\t\t\t// Named import\n\t\t\t\t/(import|export)\\s*\\{([a-zA-Z0-9_,\\s$]*)\\}\\s*from\\s*['\"]([a-zA-Z0-9./-]*[./][a-zA-Z0-9./-]*)['\"]/g,\n\t\t\t\t'$1{$2}from\"$3.mjs\"'\n\t\t\t)\n\t\t\t.replace(\n\t\t\t\t// Default import\n\t\t\t\t/(import|export) ([a-zA-Z0-9_$]+) from\\s*['\"]([a-zA-Z0-9./-]*[./][a-zA-Z0-9./-]*)['\"]/g,\n\t\t\t\t'$1 $2 from\"$3.mjs\"'\n\t\t\t)\n\t)\n\n\t// await fs.writeFile(\n\t// \tentry,\n\t// \t(await fs.readFile(entry))\n\t// \t\t.toString()\n\t// \t\t.replaceAll(/require\\(\"(.+)\\.js\"\\);/g, 'require(\"$1.cjs\");'),\n\t// );\n}\n\nawait $`tsc --project tsconfig.dts.json`\n\nawait Bun.build({\n\tentrypoints: ['./src/index.ts'],\n\toutdir: './dist/bun',\n\tminify: {\n\t\twhitespace: true,\n\t\tsyntax: true,\n\t\tidentifiers: false\n\t},\n\ttarget: 'bun',\n\tsourcemap: 'external',\n\texternal: [\n\t\t'@sinclair/typebox',\n\t\t'cookie',\n\t\t'fast-decode-uri-component',\n\t\t'memoirist'\n\t]\n})\n\nawait Promise.all([\n\t$`cp dist/*.d.ts dist/cjs`,\n\t$`cp dist/ws/*.d.ts dist/cjs/ws/`\n])\n\nawait $`cp dist/index*.d.ts dist/bun`\n\n// const fsMjs = Bun.file('dist/universal/fs.mjs')\n// const fsMjsContent = await fsMjs.text()\n// Bun.write(fsMjs, fsMjsContent.replace(`require(\"fs\")`, `await import(\"fs\")`))\n\nprocess.exit()\n"
        },
        {
          "name": "bun.lockb",
          "type": "blob",
          "size": 94.7841796875,
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 5.4140625,
          "content": "{\n\t\"name\": \"elysia\",\n\t\"description\": \"Ergonomic Framework for Human\",\n\t\"version\": \"1.2.11-exp.1\",\n\t\"author\": {\n\t\t\"name\": \"saltyAom\",\n\t\t\"url\": \"https://github.com/SaltyAom\",\n\t\t\"email\": \"saltyaom@gmail.com\"\n\t},\n\t\"main\": \"./dist/cjs/index.js\",\n\t\"module\": \"./dist/index.mjs\",\n\t\"types\": \"./dist/index.d.ts\",\n\t\"exports\": {\n\t\t\"./package.json\": \"./package.json\",\n\t\t\".\": {\n\t\t\t\"types\": \"./dist/index.d.ts\",\n\t\t\t\"bun\": \"./dist/bun/index.js\",\n\t\t\t\"import\": \"./dist/index.mjs\",\n\t\t\t\"require\": \"./dist/cjs/index.js\"\n\t\t},\n\t\t\"./ws\": {\n\t\t\t\"types\": \"./dist/ws/index.d.ts\",\n\t\t\t\"import\": \"./dist/ws/index.mjs\",\n\t\t\t\"require\": \"./dist/cjs/ws/index.js\"\n\t\t},\n\t\t\"./ws/types\": {\n\t\t\t\"types\": \"./dist/ws/types.d.ts\",\n\t\t\t\"import\": \"./dist/ws/types.mjs\",\n\t\t\t\"require\": \"./dist/cjs/ws/types.js\"\n\t\t},\n\t\t\"./ws/bun\": {\n\t\t\t\"types\": \"./dist/ws/bun.d.ts\",\n\t\t\t\"import\": \"./dist/ws/bun.mjs\",\n\t\t\t\"require\": \"./dist/cjs/ws/bun.js\"\n\t\t},\n\t\t\"./compose\": {\n\t\t\t\"types\": \"./dist/compose.d.ts\",\n\t\t\t\"import\": \"./dist/compose.mjs\",\n\t\t\t\"require\": \"./dist/cjs/compose.js\"\n\t\t},\n\t\t\"./context\": {\n\t\t\t\"types\": \"./dist/context.d.ts\",\n\t\t\t\"import\": \"./dist/context.mjs\",\n\t\t\t\"require\": \"./dist/cjs/context.js\"\n\t\t},\n\t\t\"./cookies\": {\n\t\t\t\"types\": \"./dist/cookies.d.ts\",\n\t\t\t\"import\": \"./dist/cookies.mjs\",\n\t\t\t\"require\": \"./dist/cjs/cookies.js\"\n\t\t},\n\t\t\"./error\": {\n\t\t\t\"types\": \"./dist/error.d.ts\",\n\t\t\t\"import\": \"./dist/error.mjs\",\n\t\t\t\"require\": \"./dist/cjs/error.js\"\n\t\t},\n\t\t\"./sucrose\": {\n\t\t\t\"types\": \"./dist/sucrose.d.ts\",\n\t\t\t\"import\": \"./dist/sucrose.mjs\",\n\t\t\t\"require\": \"./dist/cjs/sucrose.js\"\n\t\t},\n\t\t\"./trace\": {\n\t\t\t\"types\": \"./dist/trace.d.ts\",\n\t\t\t\"import\": \"./dist/trace.mjs\",\n\t\t\t\"require\": \"./dist/cjs/trace.js\"\n\t\t},\n\t\t\"./type-system\": {\n\t\t\t\"types\": \"./dist/type-system.d.ts\",\n\t\t\t\"import\": \"./dist/type-system.mjs\",\n\t\t\t\"require\": \"./dist/cjs/type-system.js\"\n\t\t},\n\t\t\"./types\": {\n\t\t\t\"types\": \"./dist/types.d.ts\",\n\t\t\t\"import\": \"./dist/types.mjs\",\n\t\t\t\"require\": \"./dist/cjs/types.js\"\n\t\t},\n\t\t\"./utils\": {\n\t\t\t\"types\": \"./dist/utils.d.ts\",\n\t\t\t\"import\": \"./dist/utils.mjs\",\n\t\t\t\"require\": \"./dist/cjs/utils.js\"\n\t\t},\n\t\t\"./fast-querystring\": {\n\t\t\t\"types\": \"./dist/fast-querystring.d.ts\",\n\t\t\t\"import\": \"./dist/fast-querystring.mjs\",\n\t\t\t\"require\": \"./dist/cjs/fast-querystring.js\"\n\t\t},\n\t\t\"./deuri\": {\n\t\t\t\"types\": \"./dist/deuri.d.ts\",\n\t\t\t\"import\": \"./dist/deuri.mjs\",\n\t\t\t\"require\": \"./dist/cjs/deuri.js\"\n\t\t},\n\t\t\"./adapter\": {\n\t\t\t\"types\": \"./dist/adapter/index.d.ts\",\n\t\t\t\"import\": \"./dist/adapter/index.mjs\",\n\t\t\t\"require\": \"./dist/cjs/adapter/index.js\"\n\t\t},\n\t\t\"./adapter/bun\": {\n\t\t\t\"types\": \"./dist/adapter/bun/index.d.ts\",\n\t\t\t\"import\": \"./dist/adapter/bun/index.mjs\",\n\t\t\t\"require\": \"./dist/cjs/adapter/bun/index.js\"\n\t\t},\n\t\t\"./adapter/bun/handler\": {\n\t\t\t\"types\": \"./dist/adapter/bun/handler.d.ts\",\n\t\t\t\"import\": \"./dist/adapter/bun/handler.mjs\",\n\t\t\t\"require\": \"./dist/cjs/adapter/bun/handler.js\"\n\t\t},\n\t\t\"./adapter/web-standard\": {\n\t\t\t\"types\": \"./dist/adapter/web-standard/index.d.ts\",\n\t\t\t\"import\": \"./dist/adapter/web-standard/index.mjs\",\n\t\t\t\"require\": \"./dist/cjs/adapter/web-standard/index.js\"\n\t\t},\n\t\t\"./adapter/web-standard/handler\": {\n\t\t\t\"types\": \"./dist/adapter/web-standard/handler.d.ts\",\n\t\t\t\"import\": \"./dist/adapter/web-standard/handler.mjs\",\n\t\t\t\"require\": \"./dist/cjs/adapter/web-standard/handler.js\"\n\t\t},\n\t\t\"./universal\": {\n\t\t\t\"types\": \"./dist/universal/index.d.ts\",\n\t\t\t\"import\": \"./dist/universal/index.mjs\",\n\t\t\t\"require\": \"./dist/cjs/universal/index.js\"\n\t\t},\n\t\t\"./universal/server\": {\n\t\t\t\"types\": \"./dist/universal/server.d.ts\",\n\t\t\t\"import\": \"./dist/universal/server.mjs\",\n\t\t\t\"require\": \"./dist/cjs/universal/server.js\"\n\t\t},\n\t\t\"./universal/env\": {\n\t\t\t\"types\": \"./dist/universal/env.d.ts\",\n\t\t\t\"import\": \"./dist/universal/env.mjs\",\n\t\t\t\"require\": \"./dist/cjs/universal/env.js\"\n\t\t},\n\t\t\"./universal/file\": {\n\t\t\t\"types\": \"./dist/universal/file.d.ts\",\n\t\t\t\"import\": \"./dist/universal/file.mjs\",\n\t\t\t\"require\": \"./dist/cjs/universal/file.js\"\n\t\t}\n\t},\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://github.com/elysiajs/elysia\"\n\t},\n\t\"bugs\": \"https://github.com/elysiajs/elysia/issues\",\n\t\"homepage\": \"https://github.com/elysiajs/elysia\",\n\t\"keywords\": [\n\t\t\"bun\",\n\t\t\"http\",\n\t\t\"web\",\n\t\t\"server\"\n\t],\n\t\"license\": \"MIT\",\n\t\"scripts\": {\n\t\t\"test\": \"npm run test:functionality && npm run test:types\",\n\t\t\"test:functionality\": \"bun test && bun run test:imports && npm run test:node\",\n\t\t\"test:imports\": \"bun run ./test/type-system/import.ts\",\n\t\t\"test:types\": \"tsc --project tsconfig.test.json\",\n\t\t\"test:node\": \"npm install --prefix ./test/node/cjs/ && npm install --prefix ./test/node/esm/ && node ./test/node/cjs/index.js && node ./test/node/esm/index.js && bun dist/bun/index.js\",\n\t\t\"dev\": \"bun run --watch example/a.ts\",\n\t\t\"build\": \"rm -rf dist && bun build.ts\",\n\t\t\"release\": \"npm run build && npm run test && npm publish\"\n\t},\n\t\"dependencies\": {\n\t\t\"@sinclair/typebox\": \"^0.34.13\",\n\t\t\"cookie\": \"^1.0.2\",\n\t\t\"memoirist\": \"^0.3.0\",\n\t\t\"openapi-types\": \"^12.1.3\"\n\t},\n\t\"devDependencies\": {\n\t\t\"@types/benchmark\": \"^2.1.5\",\n\t\t\"@types/bun\": \"^1.1.2\",\n\t\t\"@types/cookie\": \"^1.0.0\",\n\t\t\"@typescript-eslint/eslint-plugin\": \"^6.17.0\",\n\t\t\"@typescript-eslint/parser\": \"^6.17.0\",\n\t\t\"benchmark\": \"^2.1.4\",\n\t\t\"eslint\": \"^8.49.0\",\n\t\t\"eslint-plugin-security\": \"^2.1.0\",\n\t\t\"eslint-plugin-sonarjs\": \"^0.23.0\",\n\t\t\"expect-type\": \"^0.16.0\",\n\t\t\"prettier\": \"^3.3.3\",\n\t\t\"tsup\": \"^8.3.5\",\n\t\t\"typescript\": \"^5.7.2\"\n\t},\n\t\"peerDependencies\": {\n\t\t\"@sinclair/typebox\": \">= 0.34.0\",\n\t\t\"openapi-types\": \">= 12.0.0\",\n\t\t\"typescript\": \">= 5.0.0\"\n\t},\n\t\"peerDependenciesMeta\": {\n\t\t\"openapi-types\": {\n\t\t\t\"optional\": true\n\t\t},\n\t\t\"typescript\": {\n\t\t\t\"optional\": true\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.dts.json",
          "type": "blob",
          "size": 11.1630859375,
          "content": "{\n  \"compilerOptions\": {\n    \"preserveSymlinks\": true,\n    /* Visit https://aka.ms/tsconfig to read more about this file */\n\n    /* Projects */\n    // \"incremental\": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */\n    // \"composite\": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */\n    // \"tsBuildInfoFile\": \"./.tsbuildinfo\",              /* Specify the path to .tsbuildinfo incremental compilation file. */\n    // \"disableSourceOfProjectReferenceRedirect\": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */\n    // \"disableSolutionSearching\": true,                 /* Opt a project out of multi-project reference checking when editing. */\n    // \"disableReferencedProjectLoad\": true,             /* Reduce the number of projects loaded automatically by TypeScript. */\n\n    /* Language and Environment */\n    \"target\": \"ES2021\",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */\n    \"lib\": [\"ESNext\"],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */\n    // \"jsx\": \"preserve\",                                /* Specify what JSX code is generated. */\n    // \"experimentalDecorators\": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */\n    // \"emitDecoratorMetadata\": true,                    /* Emit design-type metadata for decorated declarations in source files. */\n    // \"jsxFactory\": \"\",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */\n    // \"jsxFragmentFactory\": \"\",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */\n    // \"jsxImportSource\": \"\",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */\n    // \"reactNamespace\": \"\",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */\n    // \"noLib\": true,                                    /* Disable including any library files, including the default lib.d.ts. */\n    // \"useDefineForClassFields\": true,                  /* Emit ECMAScript-standard-compliant class fields. */\n    // \"moduleDetection\": \"auto\",                        /* Control what method is used to detect module-format JS files. */\n\n    /* Modules */\n    \"module\": \"ES2022\",                                /* Specify what module code is generated. */\n    \"rootDir\": \"./src\",                                  /* Specify the root folder within your source files. */\n    \"moduleResolution\": \"node\",                       /* Specify how TypeScript looks up a file from a given module specifier. */\n    // \"baseUrl\": \"./src\",                                  /* Specify the base directory to resolve non-relative module names. */\n    // \"paths\": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */\n    // \"rootDirs\": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */\n    // \"typeRoots\": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */\n    // \"types\": [\"bun-types\"],                                      /* Specify type package names to be included without being referenced in a source file. */\n    // \"allowUmdGlobalAccess\": true,                     /* Allow accessing UMD globals from modules. */\n    // \"moduleSuffixes\": [],                             /* List of file name suffixes to search when resolving a module. */\n    \"resolveJsonModule\": true,                        /* Enable importing .json files. */\n    // \"noResolve\": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */\n\n    /* JavaScript Support */\n    // \"allowJs\": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */\n    // \"checkJs\": true,                                  /* Enable error reporting in type-checked JavaScript files. */\n    // \"maxNodeModuleJsDepth\": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */\n\n    /* Emit */\n    \"declaration\": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */\n    // \"declarationMap\": true,                           /* Create sourcemaps for d.ts files. */\n    \"emitDeclarationOnly\": true,                      /* Only output d.ts files and not JavaScript files. */\n    // \"sourceMap\": true,                                /* Create source map files for emitted JavaScript files. */\n    // \"outFile\": \"./\",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */\n    \"outDir\": \"./dist\",                                   /* Specify an output folder for all emitted files. */\n    // \"removeComments\": true,                           /* Disable emitting comments. */\n    // \"noEmit\": true,                                   /* Disable emitting files from a compilation. */\n    // \"importHelpers\": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */\n    // \"importsNotUsedAsValues\": \"remove\",               /* Specify emit/checking behavior for imports that are only used for types. */\n    // \"downlevelIteration\": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */\n    // \"sourceRoot\": \"\",                                 /* Specify the root path for debuggers to find the reference source code. */\n    // \"mapRoot\": \"\",                                    /* Specify the location where debugger should locate map files instead of generated locations. */\n    // \"inlineSourceMap\": true,                          /* Include sourcemap files inside the emitted JavaScript. */\n    // \"inlineSources\": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */\n    // \"emitBOM\": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */\n    // \"newLine\": \"crlf\",                                /* Set the newline character for emitting files. */\n    // \"stripInternal\": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */\n    // \"noEmitHelpers\": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */\n    // \"noEmitOnError\": true,                            /* Disable emitting files if any type checking errors are reported. */\n    // \"preserveConstEnums\": true,                       /* Disable erasing 'const enum' declarations in generated code. */\n    // \"declarationDir\": \"./\",                           /* Specify the output directory for generated declaration files. */\n    // \"preserveValueImports\": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */\n\n    /* Interop Constraints */\n    // \"isolatedModules\": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */\n    \"allowSyntheticDefaultImports\": true,             /* Allow 'import x from y' when a module doesn't have a default export. */\n    \"esModuleInterop\": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */\n    // \"preserveSymlinks\": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */\n    \"forceConsistentCasingInFileNames\": true,            /* Ensure that casing is correct in imports. */\n\n    /* Type Checking */\n    \"strict\": true,                                      /* Enable all strict type-checking options. */\n    // \"noImplicitAny\": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */\n    // \"strictNullChecks\": true,                         /* When type checking, take into account 'null' and 'undefined'. */\n    // \"strictFunctionTypes\": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */\n    // \"strictBindCallApply\": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */\n    // \"strictPropertyInitialization\": true,             /* Check for class properties that are declared but not set in the constructor. */\n    // \"noImplicitThis\": true,                           /* Enable error reporting when 'this' is given the type 'any'. */\n    // \"useUnknownInCatchVariables\": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */\n    // \"alwaysStrict\": true,                             /* Ensure 'use strict' is always emitted. */\n    // \"noUnusedLocals\": true,                           /* Enable error reporting when local variables aren't read. */\n    // \"noUnusedParameters\": true,                       /* Raise an error when a function parameter isn't read. */\n    // \"exactOptionalPropertyTypes\": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */\n    // \"noImplicitReturns\": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */\n    // \"noFallthroughCasesInSwitch\": true,               /* Enable error reporting for fallthrough cases in switch statements. */\n    // \"noUncheckedIndexedAccess\": true,                 /* Add 'undefined' to a type when accessed using an index. */\n    // \"noImplicitOverride\": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */\n    // \"noPropertyAccessFromIndexSignature\": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */\n    // \"allowUnusedLabels\": true,                        /* Disable error reporting for unused labels. */\n    // \"allowUnreachableCode\": true,                     /* Disable error reporting for unreachable code. */\n\n    /* Completeness */\n    // \"skipDefaultLibCheck\": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */\n    \"skipLibCheck\": true,                                 /* Skip type checking all .d.ts files. */\n  },\n  \"exclude\": [\"node_modules\", \"test\", \"example\", \"dist\", \"build.ts\"]\n  // \"include\": [\"src/**/*\"]\n}\n"
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 11.1650390625,
          "content": "{\n  \"compilerOptions\": {\n    \"resolveJsonModule\": true,\n    \"preserveSymlinks\": true,\n    /* Visit https://aka.ms/tsconfig to read more about this file */\n\n    /* Projects */\n    // \"incremental\": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */\n    // \"composite\": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */\n    // \"tsBuildInfoFile\": \"./.tsbuildinfo\",              /* Specify the path to .tsbuildinfo incremental compilation file. */\n    // \"disableSourceOfProjectReferenceRedirect\": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */\n    // \"disableSolutionSearching\": true,                 /* Opt a project out of multi-project reference checking when editing. */\n    // \"disableReferencedProjectLoad\": true,             /* Reduce the number of projects loaded automatically by TypeScript. */\n\n    /* Language and Environment */\n    \"target\": \"ES2021\",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */\n    \"lib\": [\"ESNext\"],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */\n    // \"jsx\": \"preserve\",                                /* Specify what JSX code is generated. */\n    // \"experimentalDecorators\": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */\n    // \"emitDecoratorMetadata\": true,                    /* Emit design-type metadata for decorated declarations in source files. */\n    // \"jsxFactory\": \"\",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */\n    // \"jsxFragmentFactory\": \"\",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */\n    // \"jsxImportSource\": \"\",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */\n    // \"reactNamespace\": \"\",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */\n    // \"noLib\": true,                                    /* Disable including any library files, including the default lib.d.ts. */\n    // \"useDefineForClassFields\": true,                  /* Emit ECMAScript-standard-compliant class fields. */\n    // \"moduleDetection\": \"auto\",                        /* Control what method is used to detect module-format JS files. */\n\n    /* Modules */\n    \"module\": \"ESNext\",                                /* Specify what module code is generated. */\n    // \"rootDir\": \"./src\",                                  /* Specify the root folder within your source files. */\n    \"moduleResolution\": \"node\",                       /* Specify how TypeScript looks up a file from a given module specifier. */\n    // \"baseUrl\": \"./src\",                                  /* Specify the base directory to resolve non-relative module names. */\n    // \"paths\": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */\n    // \"rootDirs\": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */\n    // \"typeRoots\": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */\n    // \"types\": [\"bun-types\"],                                      /* Specify type package names to be included without being referenced in a source file. */\n    // \"allowUmdGlobalAccess\": true,                     /* Allow accessing UMD globals from modules. */\n    // \"moduleSuffixes\": [],                             /* List of file name suffixes to search when resolving a module. */\n    // \"resolveJsonModule\": true,                        /* Enable importing .json files. */\n    // \"noResolve\": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */\n\n    /* JavaScript Support */\n    // \"allowJs\": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */\n    // \"checkJs\": true,                                  /* Enable error reporting in type-checked JavaScript files. */\n    // \"maxNodeModuleJsDepth\": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */\n\n    /* Emit */\n    \"declaration\": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */\n    // \"declarationMap\": true,                           /* Create sourcemaps for d.ts files. */\n    // \"emitDeclarationOnly\": true,                      /* Only output d.ts files and not JavaScript files. */\n    // \"sourceMap\": true,                                /* Create source map files for emitted JavaScript files. */\n    // \"outFile\": \"./\",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */\n    // \"outDir\": \"./dist\",                                   /* Specify an output folder for all emitted files. */\n    // \"removeComments\": true,                           /* Disable emitting comments. */\n    \"noEmit\": true,                                   /* Disable emitting files from a compilation. */\n    // \"importHelpers\": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */\n    // \"importsNotUsedAsValues\": \"remove\",               /* Specify emit/checking behavior for imports that are only used for types. */\n    // \"downlevelIteration\": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */\n    // r\"sourceRoot\": \"\",                                 /* Specify the root path for debuggers to find the reference source code. */\n    // \"mapRoot\": \"\",                                    /* Specify the location where debugger should locate map files instead of generated locations. */\n    // \"inlineSourceMap\": true,                          /* Include sourcemap files inside the emitted JavaScript. */\n    // \"inlineSources\": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */\n    // \"emitBOM\": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */\n    // \"newLine\": \"crlf\",                                /* Set the newline character for emitting files. */\n    // \"stripInternal\": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */\n    // \"noEmitHelpers\": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */\n    // \"noEmitOnError\": true,                            /* Disable emitting files if any type checking errors are reported. */\n    // \"preserveConstEnums\": true,                       /* Disable erasing 'const enum' declarations in generated code. */\n    // \"declarationDir\": \"./\",                           /* Specify the output directory for generated declaration files. */\n    // \"preserveValueImports\": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */\n\n    /* Interop Constraints */\n    // \"isolatedModules\": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */\n    \"allowSyntheticDefaultImports\": true,             /* Allow 'import x from y' when a module doesn't have a default export. */\n    \"esModuleInterop\": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */\n    // \"preserveSymlinks\": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */\n    \"forceConsistentCasingInFileNames\": true,            /* Ensure that casing is correct in imports. */\n\n    /* Type Checking */\n    \"strict\": true,                                      /* Enable all strict type-checking options. */\n    // \"noImplicitAny\": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */\n    // \"strictNullChecks\": true,                         /* When type checking, take into account 'null' and 'undefined'. */\n    // \"strictFunctionTypes\": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */\n    // \"strictBindCallApply\": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */\n    // \"strictPropertyInitialization\": true,             /* Check for class properties that are declared but not set in the constructor. */\n    // \"noImplicitThis\": true,                           /* Enable error reporting when 'this' is given the type 'any'. */\n    // \"useUnknownInCatchVariables\": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */\n    // \"alwaysStrict\": true,                             /* Ensure 'use strict' is always emitted. */\n    // \"noUnusedLocals\": true,                           /* Enable error reporting when local variables aren't read. */\n    // \"noUnusedParameters\": true,                       /* Raise an error when a function parameter isn't read. */\n    // \"exactOptionalPropertyTypes\": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */\n    // \"noImplicitReturns\": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */\n    // \"noFallthroughCasesInSwitch\": true,               /* Enable error reporting for fallthrough cases in switch statements. */\n    // \"noUncheckedIndexedAccess\": true,                 /* Add 'undefined' to a type when accessed using an index. */\n    // \"noImplicitOverride\": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */\n    // \"noPropertyAccessFromIndexSignature\": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */\n    // \"allowUnusedLabels\": true,                        /* Disable error reporting for unused labels. */\n    // \"allowUnreachableCode\": true,                     /* Disable error reporting for unreachable code. */\n\n    /* Completeness */\n    // \"skipDefaultLibCheck\": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */\n    \"skipLibCheck\": true,                                 /* Skip type checking all .d.ts files. */\n  },\n  \"exclude\": [\"node_modules\"]\n  // \"include\": [\"src/**/*\"]\n}\n"
        },
        {
          "name": "tsconfig.test.json",
          "type": "blob",
          "size": 11.134765625,
          "content": "{\n  \"compilerOptions\": {\n    \"preserveSymlinks\": true,\n    /* Visit https://aka.ms/tsconfig to read more about this file */\n\n    /* Projects */\n    \"incremental\": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */\n    // \"composite\": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */\n    // \"tsBuildInfoFile\": \"./.tsbuildinfo\",              /* Specify the path to .tsbuildinfo incremental compilation file. */\n    // \"disableSourceOfProjectReferenceRedirect\": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */\n    // \"disableSolutionSearching\": true,                 /* Opt a project out of multi-project reference checking when editing. */\n    // \"disableReferencedProjectLoad\": true,             /* Reduce the number of projects loaded automatically by TypeScript. */\n\n    /* Language and Environment */\n    \"target\": \"ES2020\",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */\n    \"lib\": [\"ESNext\"],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */\n    // \"jsx\": \"preserve\",                                /* Specify what JSX code is generated. */\n    // \"experimentalDecorators\": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */\n    // \"emitDecoratorMetadata\": true,                    /* Emit design-type metadata for decorated declarations in source files. */\n    // \"jsxFactory\": \"\",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */\n    // \"jsxFragmentFactory\": \"\",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */\n    // \"jsxImportSource\": \"\",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */\n    // \"reactNamespace\": \"\",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */\n    // \"noLib\": true,                                    /* Disable including any library files, including the default lib.d.ts. */\n    // \"useDefineForClassFields\": true,                  /* Emit ECMAScript-standard-compliant class fields. */\n    // \"moduleDetection\": \"auto\",                        /* Control what method is used to detect module-format JS files. */\n\n    /* Modules */\n    \"module\": \"ES2022\",                                /* Specify what module code is generated. */\n    // \"rootDir\": \"./src\",                                  /* Specify the root folder within your source files. */\n    \"moduleResolution\": \"node\",                       /* Specify how TypeScript looks up a file from a given module specifier. */\n    // \"baseUrl\": \"./src\",                                  /* Specify the base directory to resolve non-relative module names. */\n    // \"paths\": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */\n    // \"rootDirs\": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */\n    // \"typeRoots\": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */\n    \"types\": [\"@types/bun\"],                                      /* Specify type package names to be included without being referenced in a source file. */\n    // \"allowUmdGlobalAccess\": true,                     /* Allow accessing UMD globals from modules. */\n    // \"moduleSuffixes\": [],                             /* List of file name suffixes to search when resolving a module. */\n    \"resolveJsonModule\": true,                        /* Enable importing .json files. */\n    // \"noResolve\": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */\n\n    /* JavaScript Support */\n    // \"allowJs\": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */\n    // \"checkJs\": true,                                  /* Enable error reporting in type-checked JavaScript files. */\n    // \"maxNodeModuleJsDepth\": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */\n\n    /* Emit */\n    // \"declaration\": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */\n    // \"declarationMap\": true,                           /* Create sourcemaps for d.ts files. */\n    // \"emitDeclarationOnly\": true,                      /* Only output d.ts files and not JavaScript files. */\n    // \"sourceMap\": true,                                /* Create source map files for emitted JavaScript files. */\n    // \"outFile\": \"./\",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */\n    // \"outDir\": \"./dist\",                                   /* Specify an output folder for all emitted files. */\n    // \"removeComments\": true,                           /* Disable emitting comments. */\n    \"noEmit\": true,                                   /* Disable emitting files from a compilation. */\n    // \"importHelpers\": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */\n    // \"importsNotUsedAsValues\": \"remove\",               /* Specify emit/checking behavior for imports that are only used for types. */\n    // \"downlevelIteration\": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */\n    // r\"sourceRoot\": \"\",                                 /* Specify the root path for debuggers to find the reference source code. */\n    // \"mapRoot\": \"\",                                    /* Specify the location where debugger should locate map files instead of generated locations. */\n    // \"inlineSourceMap\": true,                          /* Include sourcemap files inside the emitted JavaScript. */\n    // \"inlineSources\": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */\n    // \"emitBOM\": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */\n    // \"newLine\": \"crlf\",                                /* Set the newline character for emitting files. */\n    // \"stripInternal\": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */\n    // \"noEmitHelpers\": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */\n    // \"noEmitOnError\": true,                            /* Disable emitting files if any type checking errors are reported. */\n    // \"preserveConstEnums\": true,                       /* Disable erasing 'const enum' declarations in generated code. */\n    // \"declarationDir\": \"./\",                           /* Specify the output directory for generated declaration files. */\n    // \"preserveValueImports\": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */\n\n    /* Interop Constraints */\n    // \"isolatedModules\": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */\n    \"allowSyntheticDefaultImports\": true,             /* Allow 'import x from y' when a module doesn't have a default export. */\n    \"esModuleInterop\": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */\n    // \"preserveSymlinks\": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */\n    \"forceConsistentCasingInFileNames\": true,            /* Ensure that casing is correct in imports. */\n\n    /* Type Checking */\n    \"strict\": true,                                      /* Enable all strict type-checking options. */\n    // \"noImplicitAny\": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */\n    // \"strictNullChecks\": true,                         /* When type checking, take into account 'null' and 'undefined'. */\n    // \"strictFunctionTypes\": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */\n    // \"strictBindCallApply\": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */\n    // \"strictPropertyInitialization\": true,             /* Check for class properties that are declared but not set in the constructor. */\n    // \"noImplicitThis\": true,                           /* Enable error reporting when 'this' is given the type 'any'. */\n    // \"useUnknownInCatchVariables\": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */\n    // \"alwaysStrict\": true,                             /* Ensure 'use strict' is always emitted. */\n    // \"noUnusedLocals\": true,                           /* Enable error reporting when local variables aren't read. */\n    // \"noUnusedParameters\": true,                       /* Raise an error when a function parameter isn't read. */\n    // \"exactOptionalPropertyTypes\": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */\n    // \"noImplicitReturns\": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */\n    // \"noFallthroughCasesInSwitch\": true,               /* Enable error reporting for fallthrough cases in switch statements. */\n    // \"noUncheckedIndexedAccess\": true,                 /* Add 'undefined' to a type when accessed using an index. */\n    // \"noImplicitOverride\": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */\n    // \"noPropertyAccessFromIndexSignature\": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */\n    // \"allowUnusedLabels\": true,                        /* Disable error reporting for unused labels. */\n    // \"allowUnreachableCode\": true,                     /* Disable error reporting for unreachable code. */\n\n    /* Completeness */\n    // \"skipDefaultLibCheck\": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */\n    \"skipLibCheck\": true,                                 /* Skip type checking all .d.ts files. */\n  },\n  \"exclude\": [\"node_modules\"],\n  \"include\": [\"test/types/**/*\"]\n}\n"
        }
      ]
    }
  ]
}