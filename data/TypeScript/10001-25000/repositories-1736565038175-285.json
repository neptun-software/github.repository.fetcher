{
  "metadata": {
    "timestamp": 1736565038175,
    "page": 285,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mediar-ai/screenpipe",
      "stars": 11503,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".cursorignore",
          "type": "blob",
          "size": 0.24609375,
          "content": "# Add directories or file patterns to ignore during indexing (e.g. foo/ or *.csv)\ndata/\n\nscreenpipe-app-tauri/public \nscreenpipe-app-tauri/src-tauri/capabilities\nscreenpipe-app-tauri/src-tauri/gen\nmodels/\n\n\npackage-lock.json\nbun.lockb\npnpm-lock.yaml\n\n\n"
        },
        {
          "name": ".cursorrules",
          "type": "blob",
          "size": 1.4169921875,
          "content": "Rules:\n- Coding: screenpipe is an open source positive sum endeavour that is a bridge between dull context-free AI and context aware super intelligence, this bridge is a lib, and CLI, that record screens & mics 24/7, extract OCR & STT, save to local db, connect to AI, do magic, it's written in Rust + Tauri and we write plugins (pipes) in TS + Bun. the Rust CLI is embedded as a sidecar in Tauri. it works on macos, windows, linux\n- Coding: always keep my style black and white, with some nerdy style and fonts pixelated / scientific style\n- Coding: do not remove @ts-ignore except if i explicitly ask you\n- Coding: always use lower case for logging stuff or UI\n- Coding: Rust: always use anyhow error, tokio instead of std stuff, avoid mutex if you can, prefer channels, write code easy to read for humans, fast for machines\n- Coding: when i ask to give me the full code it means FULL, no fucking // rest of the code comments GIVE ME THE FULL CODE\n- Coding: if it seems like you lack some context about a niche lib just ask me to provide the source code and i will (instead of providing a bad answer)\n- Coding: NextJS: make sure to use tailwind, typescript, shadcn, lucide, magicui, and framer-motion to make UIs amazing\n- Coding: Make sure to escape html thing like quotes etc properly. Only when necessary\n- Coding: When writing react or html code make sure to use thing like &apos; instead of \". Only when necessary (e.g inside quote themselves)\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.55078125,
          "content": "# Set Rust as primary\n*.rs linguist-detectable=true\n*.rs linguist-language=Rust\n\n# Set TypeScript as secondary but still detected\n*.ts linguist-detectable=true\n*.ts linguist-language=TypeScript\n\n# Ignore build outputs and vendored code\ndist/* linguist-vendored\ntarget/* linguist-vendored\nnode_modules/* linguist-vendored\n\n# Ignore documentation\n*.md linguist-documentation\n*.txt linguist-documentation\n\n# Ignore configuration files\n*.toml linguist-detectable=false\n*.json linguist-detectable=false\n*.yaml linguist-detectable=false\n*.yml linguist-detectable=false \n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.478515625,
          "content": "# Binaries for programs and examples\n*.exe\n*.exe~\n*.dll\n*.dylib\n*.so\n\n# Test binary, built with `cargo test`\n*.test\n\n# Rust/Cargo specific files\n*target\n*Cargo.lock\n\n# IDE specific files\n.idea/\n.vscode/\n*.rs.bk\n\n# act cli\n.secrets\n\n# db \ndata/ \ntext_json/\n\nsrc-tauri/deno-*\n\n# Tauri signing key\ntauri_key_louis.key\npnpm-lock.yaml\n\n.DS_Store\n\n# Ignore onnxruntime-win-x64-gpu libraries\nonnxruntime-win-x64-gpu*/\n\n# ignore environment variables\n.env\n\n# JavaScript stuff\nnode_modules/\n\n\ncn \n\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 13.779296875,
          "content": "# contributing to screen pipe\n\nfirst off, thank you for considering contributing to screen pipe! it's people like you that make screen pipe such a great tool. we're looking for developers who want to create paid pipes, with the potential to easily make $1000/m. let's [schedule a call](https://cal.com/louis030195/screenpipe) to get you onboarded.\n\nbtw, we prefer that you don't contribute if you are not using or will use the product and is just there for bounties, thank you.\n\n## getting started\n\nbefore you begin:\n- try to run the [pre-built app](https://docs.screenpi.pe) to get familiar with the project\n- familiarize yourself with the project structure and architecture.\n\n## installation and build guide\n\n### macos\n\n1. **install dependencies**:\n   ```bash\n   curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n   brew install pkg-config ffmpeg jq cmake wget\n   ```\n\n2. **install bun cli**:\n   ```bash\n   curl -fsSL https://bun.sh/install | bash\n   ```\n\n3. **clone the repository**:\n   ```bash\n   git clone https://github.com/mediar-ai/screenpipe\n   cd screenpipe\n   ```\n\n4. **build the project**:\n   ```bash\n   cargo build --release --features metal\n   ```\n\n5. **run screenpipe**:\n   ```bash\n   ./target/release/screenpipe\n   ```\n\n6. **build the desktop app**:\n   ```bash\n   cd screenpipe-app-tauri\n   bun install\n   bun scripts/pre_build.js\n   bun tauri build\n   ```\n\n### windows\n\n1. **install winget (Prerequisite)**:\n   - Before proceeding with the other installations, make sure you have `winget` installed. You can download and install it by following this guide: [Install winget](https://winget.pro/winget-install-powershell/).\n\n2. **install required tools**:\n   ```powershell\n   winget install -e --id Microsoft.VisualStudio.2022.BuildTools\n   winget install -e --id Rustlang.Rustup\n   winget install -e --id LLVM.LLVM\n   winget install -e --id Kitware.CMake\n   winget install -e --id GnuWin32.UnZip\n   winget install -e --id Git.Git\n   winget install -e --id JernejSimoncic.Wget\n   winget install -e --id 7zip.7zip\n   irm https://bun.sh/install.ps1 | iex\n   ```\n\n3. **clone and setup vcpkg**:\n   ```powershell\n   cd C:\\dev\n   $env:DEV_DIR = $(pwd)\n   git clone https://github.com/microsoft/vcpkg.git\n   cd vcpkg\n   ./bootstrap-vcpkg.bat -disableMetrics\n   ./vcpkg.exe integrate install --disable-metrics\n   ./vcpkg.exe install ffmpeg:x64-windows\n   ```\n\n4. **set environment variables**:\n   ```powershell\n   [System.Environment]::SetEnvironmentVariable('PKG_CONFIG_PATH', \"$env:DEV_DIR\\vcpkg\\packages\\ffmpeg_x64-windows\\lib\\pkgconfig\", 'User')\n   [System.Environment]::SetEnvironmentVariable('VCPKG_ROOT', \"$env:DEV_DIR\\vcpkg\", 'User')\n   [System.Environment]::SetEnvironmentVariable('LIBCLANG_PATH', 'C:\\Program Files\\LLVM\\bin', 'User')\n   [System.Environment]::SetEnvironmentVariable('PATH', \"$([System.Environment]::GetEnvironmentVariable('PATH', 'User'));C:\\Program Files (x86)\\GnuWin32\\bin\", 'User')\n   ```\n\n5. **setup Intel OpenMP DLLs**:\n   - Ensure Python and `pip` are installed before running the script.\n   \n   ```powershell\n   # Define the target directory where Intel OpenMP DLLs will be copied \n   $mkl_dir = (pwd).Path + \"\\screenpipe-app-tauri\\src-tauri\\mkl\"\n   New-Item -ItemType Directory -Force -Path $mkl_dir | Out-Null\n\n   python -m pip install --upgrade pip\n   $temp_dir = \"temp_omp\"\n   New-Item -ItemType Directory -Force -Path $temp_dir | Out-Null\n\n   Write-Host \"Installing Intel OpenMP...\"\n   python -m pip install intel-openmp --target $temp_dir\n\n   Write-Host \"Copying DLL files...\"\n   Get-ChildItem -Path $temp_dir -Recurse -Filter \"*.dll\" | ForEach-Object {\n       Write-Host \"Copying $_\"\n       Copy-Item $_.FullName -Destination $mkl_dir -Force\n   }\n   # Clean up the temporary directory\n   Remove-Item -Path $temp_dir -Recurse -Force\n   ```\n\n6. **clone and build**:\n   ```powershell\n   git clone https://github.com/mediar-ai/screenpipe\n   cd screenpipe\n   cargo build --release\n   cd screenpipe-app-tauri\n   bun install\n   bun scripts/pre_build.js\n   bun tauri build\n   ```\n\n### linux\n\n1. **install dependencies**:\n   ```bash\n   sudo apt-get install -y g++ ffmpeg tesseract-ocr cmake libavformat-dev libavfilter-dev libavdevice-dev libssl-dev libtesseract-dev libxdo-dev libsdl2-dev libclang-dev libxtst-dev\n   curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n   ```\n\n2. **install bun cli**:\n   ```bash\n   curl -fsSL https://bun.sh/install | bash\n   ```\n\n3. **clone and build**:\n   ```bash\n   git clone https://github.com/mediar-ai/screenpipe\n   cd screenpipe\n   cargo build --release\n   ```\n\n4. **run the application**:\n   ```bash\n   ./target/release/screenpipe\n   ```\n\n5. **build the desktop app**:\n   ```bash\n   cd screenpipe-app-tauri\n   bun install\n   bun scripts/pre_build.js\n   bun tauri build\n   ```\n\n## how can i contribute?\n\n### reporting bugs\n\nthis section guides you through submitting a bug report for screen pipe. following these guidelines helps maintainers and the community understand your report, reproduce the behavior, and find related reports.\n\n- use a clear and descriptive title for the issue to identify the problem.\n- describe the exact steps which reproduce the problem in as many details as possible.\n- provide specific examples to demonstrate the steps.\n\n### suggesting enhancements\n\nthis section guides you through submitting an enhancement suggestion for screen pipe, including completely new features and minor improvements to existing functionality.\n\n- use a clear and descriptive title for the issue to identify the suggestion.\n- provide a step-by-step description of the suggested enhancement in as many details as possible.\n- explain why this enhancement would be useful to most screen pipe users.\n\n### pull requests\n\n- fill in the required template\n- do not include issue numbers in the pr title\n- include screenshots and animated gifs in your pull request whenever possible.\n- follow the rust styleguides.\n- end all files with a newline.\n\n## styleguides\n\n### git commit messages\n\n- use the present tense (\"add feature\" not \"added feature\")\n- use the imperative mood (\"move cursor to...\" not \"moves cursor to...\")\n- limit the first line to 72 characters or less\n- reference issues and pull requests liberally after the first line\n\n### rust styleguide\n\nall rust code must adhere to [rust style guide](https://github.com/rust-lang/rust/tree/4f2f477fded0a47b21ed3f6aeddeafa5db8bf518/src/doc/style-guide/src).\n\nwe follow [this](https://doc.rust-lang.org/cargo/guide/project-layout.html) folder structure.\n\n## additional notes\n\n### try to keep files small (under 600 lines of code)\n\nAI is quite bad when files are big, we should try to keep small so we move faster (also it's nice for humans too 🤓)\n\n### principles \n\n- **user fanatic: focus on building what people want and bring maximum value.**\n- concurrency: channels > mutexes/locks\n- simplicity: avoid premature optimization. write code that is easy for humans to read, fast for machines to execute. less is more. optimise for less code, less files, less dependencies, less complexity.\n- production: we're building real products, not python toy that grow to 150k stars and die prematurely and never leave localhost, thank you.\n- focus: avoid feature creep. focus on the core functionality and build upon it. focus on the user and their needs.\n- use numbers: if you can't measure it, you can't improve it.\n- avoid oop: prefer functional programming.\n- positive-sum: we're all going to win, it is a multiplayer, positive sum game. (that escalated quickly)\n\n### issue and pull request labels\n\nthis section lists the labels we use to help us track and manage issues and pull requests.\n\n* `bug` - issues that are bugs.\n* `enhancement` - issues that are feature requests.\n* `documentation` - issues or pull requests related to documentation.\n* `good first issue` - good for newcomers.\n\n## building\n\n```bash\ncargo build --release --features metal # or cuda, depending on your computer's NPU\n```\n\n## running tests\n\nbefore submitting a pull request, run all the tests to ensure nothing has broken:\n\n```bash\ncargo test\n# on macos you need to set DYLD_LIBRARY_PATH for apple native OCR tests to run\nDYLD_LIBRARY_PATH=$(pwd)/screenpipe-vision/lib cargo test\n```\n\nyou can add env var to `.vscode/settings.json`:\n\n```json\n{\n    \"terminal.integrated.env.osx\": {\n        \"DYLD_LIBRARY_PATH\": \"$(pwd)/screenpipe-vision/lib\"\n    }\n}\n```\n\nthis is @louis030195 whole `.vscode/settings.json` file:\n\n```json\n{\n    \"rust-analyzer.server.extraEnv\": {\n        \"PKG_CONFIG_ALLOW_SYSTEM_LIBS\": \"1\",\n        \"PKG_CONFIG_ALLOW_SYSTEM_CFLAGS\": \"1\",\n        \"PKG_CONFIG_PATH\": \"/opt/homebrew/lib/pkgconfig:/opt/homebrew/share/pkgconfig\",\n        \"PATH\": \"/usr/bin:/opt/homebrew/bin:${env:PATH}\",\n        \"DYLD_LIBRARY_PATH\": \"${workspaceFolder}/screenpipe-vision/lib:${env:DYLD_LIBRARY_PATH}\"\n    },\n    \"rust-analyzer.cargo.extraEnv\": {\n        \"PKG_CONFIG_ALLOW_SYSTEM_LIBS\": \"1\",\n        \"PKG_CONFIG_ALLOW_SYSTEM_CFLAGS\": \"1\",\n        \"PKG_CONFIG_PATH\": \"/opt/homebrew/lib/pkgconfig:/opt/homebrew/share/pkgconfig\",\n        \"PATH\": \"/usr/bin:/opt/homebrew/bin:${env:PATH}\",\n        \"DYLD_LIBRARY_PATH\": \"${workspaceFolder}/screenpipe-vision/lib:${env:DYLD_LIBRARY_PATH}\"\n    },\n    // add env to integrated terminal\n    \"terminal.integrated.env.osx\": {\n        \"DYLD_LIBRARY_PATH\": \"${workspaceFolder}/screenpipe-vision/lib:${env:DYLD_LIBRARY_PATH}\",\n        \"SCREENPIPE_APP_DEV\": \"true\",\n    },\n    \"rust-analyzer.cargo.features\": [\n        \"pipes\"\n    ],\n    \"rust-analyzer.cargo.runBuildScripts\": true,\n    \"rust-analyzer.checkOnSave.command\": \"clippy\",\n    \"rust-analyzer.checkOnSave.extraArgs\": [\n        \"--features\",\n        \"pipes\"\n    ],\n    \"rust-analyzer.cargo.allFeatures\": false,\n    \"rust-analyzer.cargo.noDefaultFeatures\": false\n}\n```\n\n## other hacks\n\n### running dev + prod in the same time\n\none command i keep using to avoid having to kill my main \"production\" process is:\n\n```bash\n./target/release/screenpipe --port 3035 --data-dir /tmp/sp\n```\n\nit will avoid conflicts with the port and avoid conflicts with the data dir\n\nespecially useful if you've done new database migrations and want to avoid breaking your previous months of data :)\n\non macos the /tmp dir keeps being cleaned up by the system fyi\n\n### debugging github action\n\nssh into the runner:\n\n```yaml\n- name: Setup tmate session # HACK\n  if: matrix.platform == 'windows-latest'\n  uses: mxschmitt/action-tmate@v3\n```\n\nrun locally: https://github.com/nektos/act\n\n### debugging memory errors\n\n```bash\nRUSTFLAGS=\"-Z sanitizer=address\" cargo run --bin screenpipe\n# or\nRUSTFLAGS=\"-Z sanitizer=leak\" cargo run --bin screenpipe\n```\n\nfor performance monitoring, you can use the following command:\n\n```bash\ncargo install cargo-instruments\n# tracking leaks over 60 minutes time limit\ncargo instruments -t Leaks --bin screenpipe --features metal --time-limit 600000 --open\n```\n\nthen open the file in `target/release/instruments` using xcode -> open developer tool -> instruments.\n\n### benchmarks\n\n```\ncargo bench\n```\n\n[check benchmark visuals](https://mediar-ai.github.io/screenpipe/dev/bench/)\n\n### creating new migrations\n\n```bash\ncargo install sqlx-cli\nsqlx migrate add <migration_name>\n```\n\n### fixing database migration issues\n\nif you encounter errors with missing migrations (e.g., `migration XXXXXXXXXX was previously applied but is missing`), you can fix it by removing the problematic migration from the SQLite database:\n\n```bash\n# remove specific migration\nsqlite3 ~/.screenpipe/db.sqlite \"DELETE FROM _sqlx_migrations WHERE version = XXXXXXXXXX;\"\n\n# verify migrations\nsqlite3 ~/.screenpipe/db.sqlite \"SELECT * FROM _sqlx_migrations;\"\n\n# if issues persist, you can take the nuclear approach:\n# 1. backup your database\ncp ~/.screenpipe/db.sqlite ~/.screenpipe/db.sqlite.backup\n\n# 2. reset migrations table\nsqlite3 ~/.screenpipe/db.sqlite \"DROP TABLE _sqlx_migrations;\"\n```\n\n### set up azure ubuntu vm with display & audio\n\n```bash\n# Set variables\nRG_NAME=\"my-avd-rgg\"\nLOCATION=\"westus2\" \nVM_NAME=\"ubuntu-avd\"\nIMAGE=\"Canonical:0001-com-ubuntu-server-jammy:22_04-lts-gen2:latest\"\nVM_SIZE=\"Standard_D2s_v3\"  \n\n# Create resource group\naz group create --name $RG_NAME --location $LOCATION\n\n# Create VM\naz vm create \\\n  --resource-group $RG_NAME \\\n  --name $VM_NAME \\\n  --image $IMAGE \\\n  --admin-username azureuser \\\n  --generate-ssh-keys \\\n  --size $VM_SIZE\n\n# Enable RDP\naz vm open-port --port 3389 --resource-group $RG_NAME --name $VM_NAME\n\n# Install xrdp, audio, and desktop environment\naz vm run-command invoke \\\n  --resource-group $RG_NAME \\\n  --name $VM_NAME \\\n  --command-id RunShellScript \\\n  --scripts \"\n    sudo apt update && sudo apt install -y xrdp ubuntu-desktop pulseaudio\n    sudo systemctl enable xrdp\n    sudo adduser xrdp ssl-cert\n    echo 'startxfce4' | sudo tee /etc/xrdp/startwm.sh\n    sudo systemctl restart xrdp\n    sudo ufw allow 3389/tcp\n  \"\n\n# Enable audio redirection\naz vm run-command invoke \\\n  --resource-group $RG_NAME \\\n  --name $VM_NAME \\\n  --command-id RunShellScript \\\n  --scripts \"\n    echo 'load-module module-native-protocol-tcp auth-anonymous=1' | sudo tee -a /etc/pulse/default.pa\n    sudo systemctl restart pulseaudio\n  \"\n\n# Get IP address\nIP=$(az vm list-ip-addresses --resource-group $RG_NAME --name $VM_NAME --output table | grep -oE \"\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b\" | head -1)\n\n# Now you can open Microsoft Remote Desktop and use the IP in new PC to connect to it\n\n# RDP into the VM\nssh azureuser@$IP\n\n# Forwarding port to local \nssh -L 13389:localhost:3389 azureuser@$IP\n\n# Changing password\naz vm user update \\\n  --resource-group $RG_NAME \\\n  --name $VM_NAME \\\n  --username azureuser \\\n  --password <new-password>\n```\n\nnow you can either dev screenpipe on linux or run screenpipe in the cloud that record your local macos. make sure to configure microsoft remote desktop to forward audio\n\n## join the community\n\nsay 👋 in our [public discord channel](https://discord.gg/du9ebuw7uq). we discuss how to bring this lib to production, help each other with contributions, personal projects or just hang out ☕.\n\nthank you for contributing to screen pipe! 🎉\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.537109375,
          "content": "[workspace]\nmembers = [\n    \"screenpipe-core\",\n    \"screenpipe-vision\",\n    \"screenpipe-audio\",\n    \"screenpipe-server\",\n    \"screenpipe-integrations\",\n    \"screenpipe-actions\",\n]\nexclude = [\n    \"screenpipe-app-tauri/src-tauri\"\n]\nresolver = \"2\"\n\n\n[workspace.package]\nversion = \"0.2.26\"\nauthors = [\"louis030195 <hi@louis030195.com>\"]\ndescription = \"\"\nrepository = \"https://github.com/mediar-ai/screenpipe\"\nlicense = \"MIT OR Apache-2.0\"\nedition = \"2021\"\n\n[workspace.dependencies]\n# AI\ncandle = { package = \"candle-core\", version = \"0.7.2\" }\ncandle-nn = { package = \"candle-nn\", version = \"0.7.2\" }\ncandle-transformers = { package = \"candle-transformers\", version = \"0.7.2\" }\ntokenizers = \"0.20.0\"\nhf-hub = { version = \"0.3.2\", git = \"https://github.com/neo773/hf-hub\", features = [\n    \"native-tls\",\n] }\nlog = \"0.4\"\ntracing = \"0.1.40\"\ntracing-subscriber = { version = \"0.3.18\", features = [\"env-filter\"] }\ntracing-appender = { version = \"0.2.3\" }\ntokio = { version = \"1.15\", features = [\"full\", \"tracing\"] }\ncrossbeam = \"0.8.4\"\nimage = \"0.25\"\nreqwest = { version = \"0.11\", features = [\"blocking\", \"multipart\", \"json\"] }\ncriterion = { version = \"0.5.1\", features = [\"async_tokio\"] }\nvcpkg = \"0.2\"\ncc = \"1.0\"\n\nonce_cell = \"1.20.2\"\n\n[patch.crates-io]\n# enables chinese mirror (hf is banned in china) and native-tls\nhf-hub = { git = \"https://github.com/neo773/hf-hub\", features = [\"native-tls\"] }\n\n[workspace.metadata.vcpkg]\ngit = \"https://github.com/microsoft/vcpkg\"\nrev = \"2023.04.15\"\ndynamic = true\n\n[profile.release]\ncodegen-units = 1\nlto = true\nopt-level = \"s\"\nstrip = true\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2024 louis030195\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README-zh_CN.md",
          "type": "blob",
          "size": 4.888671875,
          "content": "<p align=\"center\">\n   <a href =\"https://screenpi.pe\">\n      <img src=\"https://github.com/user-attachments/assets/d3b1de26-c3c0-4c84-b9c4-b03213b97a30\" alt=\"logo\" width=\"200\">\n   </a>\n</p>\n\n<p align=\"center\">\n   <a href=\"README.md\">English</a> | <a href=\"README-zh_CN.md\">简体中文</a>\n</p>\n\n<!-- ScreenPipe 标题和副标题 -->\n<p align=\"center\" style=\"font-family: 'Press Start 2P', monospace;\">\n   <h1 align=\"center\">[ screenpipe ]</h1>\n   <p align=\"center\">一个获取所有用户桌面数据的API（本地、跨平台、全天候、屏幕、语音、键盘、鼠标、摄像头录制）</p>\n   <p align=\"center\">沙盒化的JS插件系统，键盘和鼠标控制</p>\n</p>\n\n<!-- 标语 -->\n<p align=\"center\" style=\"font-family: monospace;\">\n   <code>[ 一次记录一个像素的现实 ]</code>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://screenpi.pe\" target=\"_blank\">\n        <img src=\"https://img.shields.io/badge/下载-桌面应用-blue?style=for-the-badge\" alt=\"下载桌面应用\">\n    </a>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://www.youtube.com/@mediar_ai\" target=\"_blank\">\n       <img alt=\"YouTube频道订阅者\" src=\"https://img.shields.io/youtube/channel/subscribers/UCwjkpAsb70_mENKvy7hT5bw\">\n    </a>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://discord.gg/dU9EBuw7Uq\">\n        <img src=\"https://img.shields.io/discord/823813159592001537?color=5865F2&logo=discord&logoColor=white&style=flat-square\" alt=\"加入Discord\">\n    </a>\n   <a href=\"https://twitter.com/screen_pipe\"><img alt=\"X账号\" src=\"https://img.shields.io/twitter/url/https/twitter.com/diffuserslib.svg?style=social&label=关注%20%40screen_pipe\"></a>\n   <a href=\"https://console.algora.io/org/mediar-ai/bounties?status=completed\">\n       <img src=\"https://img.shields.io/endpoint?url=https%3A%2F%2Fconsole.algora.io%2Fapi%2Fshields%2Fmediar-ai%2Fbounties%3Fstatus%3Dcompleted\" alt=\"已完成的赏金\">\n   </a>\n   <a href=\"https://console.algora.io/org/mediar-ai/bounties?status=open\">\n       <img src=\"https://img.shields.io/endpoint?url=https%3A%2F%2Fconsole.algora.io%2Fapi%2Fshields%2Fmediar-ai%2Fbounties%3Fstatus%3Dopen\" alt=\"开放的赏金\">\n   </a>\n</p>\n\n---\n\n*新闻* 🔥\n- [2024/12] pipe商店stripe集成：开发者用几行JS代码构建酷炫功能并获得被动收入（已有Loom pipe、LinkedIn代理等）\n- [2024/11] [screenpipe再次成为GitHub趋势榜第一](https://x.com/louis030195/status/1859628763425931479)\n- [2024/10] screenpipe获得[Founders, Inc](https://f.inc/)支持\n- [2024/09] [screenpipe登上GitHub趋势榜第一并登上Hacker News！](https://x.com/louis030195/status/1840859691754344483)\n- [2024/08] 现在任何人都可以通过应用界面基于GitHub仓库/目录[创建、分享、安装pipes](https://docs.screenpi.pe/docs/plugins)（插件）\n- [2024/08] 我们正在进行赏金计划！为screenpipe做贡献并赚钱，[查看issues](https://github.com/mediar-ai/screenpipe/issues)\n- [2024/08] 我们发布了Apple和Windows原生OCR\n- [2024/07] 🎁 screenpipe在AGI House赢得Friends（AI项链）黑客马拉松（即将推出集成）\n- [2024/07] **我们刚刚发布了桌面应用！[立即下载！](https://screenpi.pe)**\n\n---\n\n# 工作原理\n\n我们每天都在更新，欢迎提出建议、报告bug、[提供反馈](mailto:louis@screenpi.pe?subject=Screenpipe%20反馈&body=我想使用Screenpipe来...%0D%0A%0D%0A我遇到的问题是...%0D%0A%0D%0A我们也可以通过视频通话交流，预约时间：https://cal.com/louis030195/screenpipe)。\n\n![diagram](./content/diagram2.png)\n\n![image](https://github.com/user-attachments/assets/da5b8583-550f-4a1f-b211-058e7869bc91)\n\n# 为什么要用？\n\n每一秒不记录都是AGI缺失的上下文\n\n## 开始使用\n\nmacOS, Linux:\n\n```bash\nbrew install screenpipe\n```\n\nWindows:\n\n```bash\nirm https://raw.githubusercontent.com/mediar-ai/screenpipe/main/install.ps1 | iex\n```\n\n然后运行：\n\n```bash\nscreenpipe\n```\n\n- [获取桌面应用](https://screenpi.pe/)\n- [文档和源码构建](https://docs.screenpi.pe/docs/getting-started)\n\n## 创建插件\n\n```bash\nbunx @screenpipe/create-pipe@latest\n```\n\nscreenpipe有一个名为\"pipe\"的插件系统，允许你在Rust代码的沙盒环境中运行代码，[了解更多](https://docs.screenpi.pe/docs/plugins)\n\n## Star历史\n\n![Star History Nov 24 2024](https://github.com/user-attachments/assets/c7e4de14-0771-4bbb-9a4c-7f2102a1a6cd)\n\n## 贡献\n\n欢迎贡献！如果你想贡献，请阅读[CONTRIBUTING.md](CONTRIBUTING.md)。\n\n   <a href=\"https://console.algora.io/org/mediar-ai/bounties?status=completed\">\n       <img src=\"https://img.shields.io/endpoint?url=https%3A%2F%2Fconsole.algora.io%2Fapi%2Fshields%2Fmediar-ai%2Fbounties%3Fstatus%3Dcompleted\" alt=\"已完成的赏金\">\n   </a>\n   <a href=\"https://console.algora.io/org/mediar-ai/bounties?status=open\">\n       <img src=\"https://img.shields.io/endpoint?url=https%3A%2F%2Fconsole.algora.io%2Fapi%2Fshields%2Fmediar-ai%2Fbounties%3Fstatus%3Dopen\" alt=\"开放的赏金\">\n   </a>\n</p> \n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.6923828125,
          "content": "<p align=\"center\">\n   <a href=\"README.md\">English</a> | <a href=\"README-zh_CN.md\">简体中文</a>\n</p>\n\n<p align=\"center\">\n   <a href =\"https://screenpi.pe\">\n      <img src=\"https://github.com/user-attachments/assets/d3b1de26-c3c0-4c84-b9c4-b03213b97a30\" alt=\"logo\" width=\"200\">\n   </a>\n</p>\n\n\n\n<!-- ScreenPipe Title and Subtitle -->\n<p align=\"center\" style=\"font-family: 'Press Start 2P', monospace;\">\n   <h1 align=\"center\">[ screenpipe ]</h1>\n   <p align=\"center\">library & platform to build, distribute, monetize ai apps that have the full context (like rewind, granola, etc.)</p>\n   <p align=\"center\">open source | 100% local | dev friendly | 24/7 screen, mic, keyboard recording and control</p>\n</p>\n\n<!-- Slogan -->\n<p align=\"center\" style=\"font-family: monospace;\">\n   <code>[ recording reality, one pixel at a time ]</code>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://screenpi.pe\" target=\"_blank\">\n        <img src=\"https://img.shields.io/badge/Download%20The-Desktop%20App-blue?style=for-the-badge\" alt=\"Download the Desktop App\">\n    </a>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://www.youtube.com/@mediar_ai\" target=\"_blank\">\n       <img alt=\"YouTube Channel Subscribers\" src=\"https://img.shields.io/youtube/channel/subscribers/UCwjkpAsb70_mENKvy7hT5bw\">\n    </a>\n</p>\n\n\n<p align=\"center\">\n    <a href=\"https://discord.gg/dU9EBuw7Uq\">\n        <img src=\"https://img.shields.io/discord/823813159592001537?color=5865F2&logo=discord&logoColor=white&style=flat-square\" alt=\"Join us on Discord\">\n    </a>\n   <a href=\"https://twitter.com/screen_pipe\"><img alt=\"X account\" src=\"https://img.shields.io/twitter/url/https/twitter.com/diffuserslib.svg?style=social&label=Follow%20%40screen_pipe\"></a>\n   <a href=\"https://console.algora.io/org/mediar-ai/bounties?status=completed\">\n       <img src=\"https://img.shields.io/endpoint?url=https%3A%2F%2Fconsole.algora.io%2Fapi%2Fshields%2Fmediar-ai%2Fbounties%3Fstatus%3Dcompleted\" alt=\"Rewarded Bounties\">\n   </a>\n   <a href=\"https://console.algora.io/org/mediar-ai/bounties?status=open\">\n       <img src=\"https://img.shields.io/endpoint?url=https%3A%2F%2Fconsole.algora.io%2Fapi%2Fshields%2Fmediar-ai%2Fbounties%3Fstatus%3Dopen\" alt=\"Open Bounties\">\n   </a>\n</p>\n\n<p align=\"center\">\n   \n<img width=\"1312\" alt=\"Screenshot 2024-12-11 at 1 39 09 PM\" src=\"https://github.com/user-attachments/assets/26b2986d-01aa-43de-acf0-375a72752894\" />\n<img width=\"1312\" alt=\"Screenshot 2024-12-16 at 2 39 32 PM\" src=\"https://github.com/user-attachments/assets/0da6e948-4fa2-48ab-b18c-d8fbd1246261\" />\n\n<img width=\"1142\" alt=\"Screenshot 2024-12-16 at 12 39 18 PM\" src=\"https://github.com/user-attachments/assets/5b6f7015-b522-4894-a0d7-d91d648895f5\" />\n<img width=\"1312\" alt=\"Screenshot 2024-12-11 at 1 39 09 PM\" src=\"https://github.com/user-attachments/assets/08f1d8bd-803e-4cc5-8b8f-ad33bfebfd7e\" />\n\n\n\n\n---\n\n*news* 🔥\n- [2024/12] pipe store stripe integration: devs build cool shit - few lines of JS and make passive income (available Reddit agent, LinkedIn agent, Timeline ...)\n- [2024/11] [screenpipe is number 1 github trending repo (again)](https://x.com/louis030195/status/1859628763425931479)\n- [2024/10] screenpipe has been backed by [Founders, Inc](https://f.inc/)\n- [2024/09] [screenpipe is number 1 github trending repo & on hackernews!](https://x.com/louis030195/status/1840859691754344483)\n- [2024/08] anyone can now [create, share, install pipes](https://docs.screenpi.pe/docs/plugins) (plugins) from the app interface based on a github repo/dir\n- [2024/08] we're running bounties! contribute to screenpipe & make money, [check issues](https://github.com/mediar-ai/screenpipe/issues)\n- [2024/08] we released Apple & Windows Native OCR.\n- [2024/07] 🎁 screenpipe won Friends (the AI necklace) hackathon at AGI House (integrations soon)\n- [2024/07] **we just launched the desktop app! [Download now!](https://screenpi.pe)**\n\n---\n\n# how it works?\n\n- we record everything 24/7, 100% locally, uses 10% CPU, 4 GB ram, 15 gb/m\n- we index it into an api\n- dev build ai apps w user's full context, desktop native, nextjs, publish, monetize\n\n<img src=\"./content/diagram2.png\" width=\"800\" />\n\n<img src=\"https://github.com/user-attachments/assets/da5b8583-550f-4a1f-b211-058e7869bc91\" width=\"400\" />\n\n\n\n# why?\n\n1. context is the dark matter of intelligence\n2. every second you are not recording is a missing context for AGI\n\n## get started\n\nmacos, linux:\n\n```bash\ncurl -fsSL raw.githubusercontent.com/mediar-ai/screenpipe/main/install.sh | sh\n```\n\nor on windows\n\n```bash\nirm https://raw.githubusercontent.com/mediar-ai/screenpipe/main/install.ps1 | iex\n```\n\nthen\n\n```bash\nscreenpipe\n```\n\nmake sure to allow permissions on macos (screen, mic)\n\n- [get the desktop app](https://screenpi.pe/)\n- [docs & build from source](https://docs.screenpi.pe/docs/getting-started)\n\n## create plugins\n\n```bash\nbunx @screenpipe/create-pipe@latest\n```\n\nscreenpipe has a plugin system called \"pipe\" which lets you create desktop app in nextjs in a sandboxed environment within our Rust code, [read more](https://docs.screenpi.pe/docs/plugins)\n\n## star history\n\n![Star History Nov 24 2024](https://github.com/user-attachments/assets/c7e4de14-0771-4bbb-9a4c-7f2102a1a6cd)\n\n\n## contributing\n\ncontributions are welcome! if you'd like to contribute, please read [CONTRIBUTING.md](CONTRIBUTING.md).\n\n   <a href=\"https://console.algora.io/org/mediar-ai/bounties?status=completed\">\n       <img src=\"https://img.shields.io/endpoint?url=https%3A%2F%2Fconsole.algora.io%2Fapi%2Fshields%2Fmediar-ai%2Fbounties%3Fstatus%3Dcompleted\" alt=\"Rewarded Bounties\">\n   </a>\n   <a href=\"https://console.algora.io/org/mediar-ai/bounties?status=open\">\n       <img src=\"https://img.shields.io/endpoint?url=https%3A%2F%2Fconsole.algora.io%2Fapi%2Fshields%2Fmediar-ai%2Fbounties%3Fstatus%3Dopen\" alt=\"Open Bounties\">\n   </a>\n"
        },
        {
          "name": "content",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.ps1",
          "type": "blob",
          "size": 4.5029296875,
          "content": "Write-Host \"installing screenpipe...\"\n\ntry {\n    # Get latest version\n    $releases = Invoke-RestMethod \"https://api.github.com/repos/mediar-ai/screenpipe/releases\"\n    $latestRelease = $releases | Where-Object { -not $_.prerelease } | Select-Object -First 1\n    if (-not $latestRelease) {\n        throw \"no releases found\"\n    }\n    \n    # Find the Windows asset\n    $asset = $latestRelease.assets | Where-Object { $_.name -like \"*-x86_64-pc-windows-msvc.zip\" } | Select-Object -First 1\n    if (-not $asset) {\n        throw \"no Windows release found in version $($latestRelease.tag_name)\"\n    }\n    \n    $url = $asset.browser_download_url\n    \n    $installDir = \"$env:USERPROFILE\\screenpipe\"\n    $tempZip = \"$env:TEMP\\screenpipe.zip\"\n\n    # Download and extract\n    Write-Host \"downloading latest version ($($latestRelease.tag_name)) from $url...\"\n    Invoke-WebRequest -Uri $url -OutFile $tempZip\n    \n    # Create install directory if it doesn't exist\n    if (!(Test-Path $installDir)) {\n        New-Item -ItemType Directory -Path $installDir | Out-Null\n    }\n\n    Write-Host \"extracting...\"\n    Expand-Archive -Path $tempZip -DestinationPath $installDir -Force\n\n    # Add to PATH if not already there\n    $currentPath = [Environment]::GetEnvironmentVariable(\"Path\", \"User\")\n    if ($currentPath -notlike \"*$installDir\\bin*\") {\n        [Environment]::SetEnvironmentVariable(\"Path\", \"$currentPath;$installDir\\bin\", \"User\")\n        $env:Path = [Environment]::GetEnvironmentVariable(\"Path\", \"User\")\n    }\n\n    # Verify installation\n    $binPath = Join-Path $installDir \"bin\\screenpipe.exe\"\n    if (!(Test-Path $binPath)) {\n        throw \"screenpipe.exe not found in $binPath after installation\"\n    }\n\n    # Cleanup\n    Remove-Item $tempZip -Force\n\n    # Install bun\n    Write-Host \"installing bun...\"\n    powershell -c \"irm bun.sh/install.ps1|iex\"\n\n    Write-Host @\"\n\n███████╗ ██████╗██████╗ ███████╗███████╗███╗   ██╗██████╗ ██╗██████╗ ███████╗\n██╔════╝██╔════╝██╔══██╗██╔════╝██╔════╝████╗  ██║██╔══██╗██║██╔══██╗██╔════╝\n███████╗██║     ██████╔╝█████╗  █████╗  ██╔██╗ ██║█████╔╝██║██████╔╝█████╗  \n╚════██║██║     ██╔══██╗██╔══╝  ██╔══╝  ██║╚██╗██║██╔═══╝ ██║██╔═══╝ ██╔══╝  \n███████║╚██████╗██║  ██║███████╗███████╗██║ ╚████║██║     ██║██║     ███████╗\n╚══════╝ ╚═════╝╚═╝  ╚═╝╚══════╝╚══════╝╚═╝  ╚═══╝╚═╝     ╚═╝╚═╝     ╚══════╝\n\"@\n\n    Write-Host \"installation complete! 🚀\"\n    Write-Host \"to get started:\"\n    Write-Host \"1. restart your terminal\"\n    Write-Host \"2. run: screenpipe\"\n    Write-Host \"\"\n    Write-Host \"╭──────────────────────────────────────────╮\"\n    Write-Host \"│  join our discord:                       │\"\n    Write-Host \"│  --> https://discord.gg/dU9EBuw7Uq       │\"\n    Write-Host \"│                                          │\"\n    Write-Host \"│  check the docs:                         │\"\n    Write-Host \"│  --> https://docs.screenpi.pe            │\"\n    Write-Host \"╰──────────────────────────────────────────╯\"\n\n    try {\n        $postHogData = @{\n            api_key = \"phc_Bt8GoTBPgkCpDrbaIZzJIEYt0CrJjhBiuLaBck1clce\"\n            event = \"cli_install\"\n            properties = @{\n                distinct_id = $env:COMPUTERNAME\n                version = $latestRelease.tag_name\n                os = \"windows\"\n                arch = \"x86_64\"\n        }\n    } | ConvertTo-Json\n        Invoke-RestMethod -Uri \"https://eu.i.posthog.com/capture/\" -Method Post -Body $postHogData -ContentType \"application/json\"\n    } catch {\n        # Silently continue if tracking fails\n    }\n\n} catch {\n    Write-Host \"installation failed: $($_.Exception.Message)\" -ForegroundColor Red\n    exit 1\n}\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 10.4248046875,
          "content": "#!/bin/sh\n\n# Function to detect OS and architecture\nget_os_arch() {\n    os=$(uname -s | tr '[:upper:]' '[:lower:]')\n    arch=$(uname -m)\n\n    case \"$arch\" in\n    x86_64) arch=\"x86_64\" ;;\n    aarch64 | arm64)\n        # Only allow arm64 on macOS\n        if [ \"$os\" != \"darwin\" ]; then\n            echo >&2 \"error: arm64/aarch64 is only supported on macOS\"\n            exit 1\n        fi\n        arch=\"aarch64\"\n        ;;\n    *)\n        echo >&2 \"error: unsupported architecture: $arch\"\n        exit 1\n        ;;\n    esac\n\n    case \"$os\" in\n    darwin)\n        echo \"apple-darwin\" \"$arch\"\n        ;;\n    linux)\n        # Block Linux arm64\n        if [ \"$arch\" = \"aarch64\" ]; then\n            echo >&2 \"error: Linux arm64/aarch64 is not supported yet\"\n            exit 1\n        fi\n        echo \"unknown-linux-gnu\" \"$arch\"\n        ;;\n    *)\n        echo >&2 \"error: unsupported operating system: $os\"\n        exit 1\n        ;;\n    esac\n}\n\necho \"fetching latest version from github...\"\nLATEST_RELEASE=$(curl -s https://api.github.com/repos/mediar-ai/screenpipe/releases/latest)\n# Extract version using grep and sed for cross-platform compatibility\nVERSION=$(echo \"$LATEST_RELEASE\" | grep -o '\"tag_name\": *\"v[^\"]*\"' | sed 's/.*\"v\\([^\"]*\\)\".*/\\1/')\nif [ -z \"$VERSION\" ]; then\n    echo \"failed to fetch latest version\"\n    exit 1\nfi\n\necho \"latest version: $VERSION\"\n\nif ! OS_ARCH=$(get_os_arch); then\n    # get_os_arch already printed the error message\n    exit 1\nfi\n\nos=$(echo \"$OS_ARCH\" | cut -d' ' -f1)\narch=$(echo \"$OS_ARCH\" | cut -d' ' -f2)\n\nFILENAME=\"screenpipe-${VERSION}-${arch}-${os}.tar.gz\"\nURL=\"https://github.com/mediar-ai/screenpipe/releases/download/v${VERSION}/${FILENAME}\"\n\nTMP_DIR=$(mktemp -d)\ncd \"$TMP_DIR\" || exit 1\n\n# Check dependencies on Linux\nif [ \"$os\" = \"unknown-linux-gnu\" ]; then\n    # Check for required libraries\n    NEED_ALSA=0\n    NEED_FFMPEG=0\n\n    if ! ldconfig -p | grep -q \"libasound.so.2\" >/dev/null 2>&1; then\n        NEED_ALSA=1\n    fi\n    if ! command -v ffmpeg >/dev/null 2>&1; then\n        NEED_FFMPEG=1\n    fi\n\n    # Install missing dependencies based on package manager\n    if [ $NEED_ALSA -eq 1 ] || [ $NEED_FFMPEG -eq 1 ]; then\n        if command -v apt-get >/dev/null 2>&1; then\n            # Ubuntu/Debian\n            PKGS=\"\"\n            [ $NEED_ALSA -eq 1 ] && PKGS=\"$PKGS libasound2-dev\" && echo \"installing libasound2-dev...\"\n            [ $NEED_FFMPEG -eq 1 ] && PKGS=\"$PKGS ffmpeg\" && echo \"installing ffmpeg...\"\n            sudo apt-get install -qq -y $PKGS >/dev/null 2>&1\n        elif command -v dnf >/dev/null 2>&1; then\n            # Fedora/RHEL\n            PKGS=\"\"\n            [ $NEED_ALSA -eq 1 ] && PKGS=\"$PKGS alsa-lib\" && echo \"installing alsa-lib...\"\n            [ $NEED_FFMPEG -eq 1 ] && PKGS=\"$PKGS ffmpeg\" && echo \"installing ffmpeg...\"\n            sudo dnf install -q -y $PKGS >/dev/null 2>&1\n        elif command -v pacman >/dev/null 2>&1; then\n            # Arch Linux\n            PKGS=\"\"\n            [ $NEED_ALSA -eq 1 ] && PKGS=\"$PKGS alsa-lib\" && echo \"installing alsa-lib...\"\n            [ $NEED_FFMPEG -eq 1 ] && PKGS=\"$PKGS ffmpeg\" && echo \"installing ffmpeg...\"\n            sudo pacman -S --noconfirm --quiet $PKGS >/dev/null 2>&1\n        elif command -v zypper >/dev/null 2>&1; then\n            # OpenSUSE\n            PKGS=\"\"\n            [ $NEED_ALSA -eq 1 ] && PKGS=\"$PKGS alsa-lib\" && echo \"installing alsa-lib...\"\n            [ $NEED_FFMPEG -eq 1 ] && PKGS=\"$PKGS ffmpeg\" && echo \"installing ffmpeg...\"\n            sudo zypper --quiet --non-interactive install $PKGS >/dev/null 2>&1\n        fi\n    fi\nfi\n\n# Check macOS dependencies\nif [ \"$(uname)\" = \"Darwin\" ]; then\n    # Check if Xcode tools are installed\n    xcode-select -p &>/dev/null\n    if [ $? -ne 0 ]; then\n        echo \"command line tools for xcode not found. installing from softwareupdate…\"\n        touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress\n        PROD=$(softwareupdate -l | grep \"\\*.*Command Line\" | tail -n 1 | sed 's/^[^C]* //')\n        softwareupdate -i \"$PROD\" --verbose\n    else\n        echo \"command line tools for xcode have been installed.\"\n    fi\n\n    # Check if ffmpeg is installed\n    if ! command -v ffmpeg >/dev/null 2>&1; then\n        echo \"installing ffmpeg...\"\n\n        if [ \"$arch\" = \"aarch64\" ]; then\n            FFMPEG_URL=\"https://ffmpeg.martin-riedl.de/redirect/latest/macos/arm64/release/ffmpeg.zip\"\n        else\n            FFMPEG_URL=\"https://ffmpeg.martin-riedl.de/redirect/latest/macos/amd64/release/ffmpeg.zip\"\n        fi\n\n        echo \"downloading ffmpeg from: $FFMPEG_URL\"\n        if ! curl -sL \"$FFMPEG_URL\" -o ffmpeg.zip; then\n            echo \"failed to download ffmpeg\"\n            exit 1\n        fi\n\n        if ! unzip -q ffmpeg.zip; then\n            echo \"failed to extract ffmpeg\"\n            exit 1\n        fi\n        rm ffmpeg.zip\n\n        # Verify code signing on macOS\n        echo \"verifying code signature...\"\n        if ! codesign -v ./ffmpeg 2>/dev/null; then\n            echo \"warning: binary is not signed or signature is invalid\"\n            read -p \"do you want to continue anyway? (y/N) \" -n 1 -r\n            echo\n            if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n                echo \"installation aborted\"\n                exit 1\n            fi\n        fi\n\n        # Verify the binary runs and check version\n        echo \"verifying binary...\"\n        if ! FFMPEG_VERSION=$(./ffmpeg -version | head -n1); then\n            echo \"binary verification failed\"\n            exit 1\n        fi\n        echo \"detected version: $FFMPEG_VERSION\"\n\n        # Move to local bin\n        mkdir -p \"$HOME/.local/bin\"\n        mv ffmpeg \"$HOME/.local/bin/\"\n        chmod +x \"$HOME/.local/bin/ffmpeg\"\n\n        # Remove quarantine attribute\n        xattr -d com.apple.quarantine \"$HOME/.local/bin/ffmpeg\" 2>/dev/null || true\n\n        echo \"ffmpeg installed successfully\"\n    fi\nfi\n\n# Install Bun if not present\nif ! command -v bun >/dev/null 2>&1; then\n    echo \"installing bun...\"\n    if [ \"$(uname)\" = \"Darwin\" ] || [ \"$os\" = \"unknown-linux-gnu\" ]; then\n        curl -fsSL https://bun.sh/install | bash\n        \n        # Source the updated profile to make bun available\n        if [ -f \"$HOME/.bashrc\" ]; then\n            . \"$HOME/.bashrc\"\n        elif [ -f \"$HOME/.zshrc\" ]; then\n            . \"$HOME/.zshrc\"\n        fi\n        \n        echo \"bun installed successfully\"\n    else\n        echo \"error: unsupported operating system for bun installation\"\n        exit 1\n    fi\nfi\n\necho \"downloading screenpipe v${VERSION} for ${arch}-${os}...\"\n\n# Add debug output for download\necho \"downloading from url: $URL\"\nif ! curl -sL \"$URL\" -o \"$FILENAME\"; then\n    echo \"download failed\"\n    exit 1\nfi\n\n# Verify download\nif ! gzip -t \"$FILENAME\" 2>/dev/null; then\n    echo \"downloaded file is not in valid gzip format\"\n    exit 1\nfi\n\necho \"extracting...\"\nif ! tar xzf \"$FILENAME\"; then\n    echo \"extraction failed\"\n    exit 1\nfi\n\necho \"installing...\"\nINSTALL_DIR=\"$HOME/.local/screenpipe\"\n\n# Remove existing installation\nrm -rf \"$INSTALL_DIR\"\n\n# Create install directory\nif ! mkdir -p \"$INSTALL_DIR/screenpipe-vision/lib\"; then\n    echo \"Failed to create install directory\"\n    exit 1\nfi\n\n\n# Copy binary\nif ! cp bin/screenpipe \"$INSTALL_DIR/\"; then\n    echo \"Failed to copy binary\"\n    exit 1\nfi\n\n# Remove quarantine attributes on macOS\nif [ \"$(uname)\" = \"Darwin\" ]; then\n    echo \"removing quarantine attributes...\"\n    xattr -r -d com.apple.quarantine \"$INSTALL_DIR\" 2>/dev/null || true\nfi\n\n# Create symlink in user's bin directory\nmkdir -p \"$HOME/.local/bin\"\nif ! ln -sf \"$INSTALL_DIR/screenpipe\" \"$HOME/.local/bin/screenpipe\"; then\n    echo \"Failed to create symlink\"\n    exit 1\nfi\n\necho \"adding ~/.local/bin to path...\"\n\n# Detect shell and update appropriate config file\nSHELL_CONFIG=\"\"\ncase \"$SHELL\" in\n    */zsh)\n        SHELL_CONFIG=\"$HOME/.zshrc\"\n        ;;\n    */bash)\n        SHELL_CONFIG=\"$HOME/.bashrc\"\n        ;;\nesac\n\necho \"shell_config: $SHELL_CONFIG\"\n\nif [ -n \"$SHELL_CONFIG\" ]; then\n    echo \"\" >>\"$SHELL_CONFIG\"\n    echo 'export PATH=\"$HOME/.local/bin:$PATH\"' >>\"$SHELL_CONFIG\"\n    echo \"Please restart your terminal or run: source $SHELL_CONFIG\"\nelse\n    echo \"Please add ~/.local/bin to your PATH manually\"\nfi\n\n# Cleanup\ncd || exit 1\nrm -rf \"$TMP_DIR\"\n\necho \"\n███████╗ ██████╗██████╗ ███████╗███████╗███╗   ██╗██████╗ ██╗██████╗ ███████╗\n██╔════╝██╔════╝██╔══██╗██╔════╝██╔════╝████╗  ██║██╔══██╗██║██╔══██╗██╔════╝\n███████╗██║     ██████╔╝█████╗  █████╗  ██╔██╗ ██║██████╔╝██║██████╔╝█████╗  \n╚════██║██║     ██╔══██╗██╔══╝  ██╔══╝  ██║╚██╗██║██╔═══╝ ██║██╔═══╝ ██╔══╝  \n███████║╚██████╗██║  ██║███████╗███████╗██║ ╚████║██║     ██║██║     ███████╗\n╚══════╝ ╚═════╝╚═╝  ╚═╝╚══════╝╚══════╝╚═╝  ╚═══╝╚═╝     ╚═╝╚═╝     ╚══════╝\n\"\n\necho \"installation complete! 🚀\"\necho \"to get started:\"\necho \"1. restart your terminal or run: source $SHELL_CONFIG\"\necho \"2. run: screenpipe\"\necho \"3. allow permissions on macos (screen, mic) if needed\"\necho \"\"\necho \"╭──────────────────────────────────────────╮\"\necho \"│  join our discord:                       │\"\necho \"│  --> https://discord.gg/dU9EBuw7Uq       │\"\necho \"│                                          │\"\necho \"│  check the docs:                         │\"\necho \"│  --> https://docs.screenpi.pe            │\"\necho \"╰──────────────────────────────────────────╯\"\n\ncurl -sL -X POST https://eu.i.posthog.com/capture/ \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"api_key\": \"phc_Bt8GoTBPgkCpDrbaIZzJIEYt0CrJjhBiuLaBck1clce\",\n    \"event\": \"cli_install\",\n    \"properties\": {\n      \"distinct_id\": \"'$(hostname)'\",\n      \"version\": \"'$VERSION'\",\n      \"os\": \"'$os'\",\n      \"arch\": \"'$arch'\"\n    }\n  }' >/dev/null 2>&1 || true\n\n\n"
        },
        {
          "name": "pipes",
          "type": "tree",
          "content": null
        },
        {
          "name": "screenpipe-actions",
          "type": "tree",
          "content": null
        },
        {
          "name": "screenpipe-app-tauri",
          "type": "tree",
          "content": null
        },
        {
          "name": "screenpipe-audio",
          "type": "tree",
          "content": null
        },
        {
          "name": "screenpipe-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "screenpipe-integrations",
          "type": "tree",
          "content": null
        },
        {
          "name": "screenpipe-js",
          "type": "tree",
          "content": null
        },
        {
          "name": "screenpipe-server",
          "type": "tree",
          "content": null
        },
        {
          "name": "screenpipe-vision",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}