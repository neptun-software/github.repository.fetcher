{
  "metadata": {
    "timestamp": 1736564841305,
    "page": 63,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "blakeblackshear/frigate",
      "stars": 20224,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".cspell",
          "type": "tree",
          "content": null
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1142578125,
          "content": "README.md\ndocs/\n.gitignore\ndebug\nconfig/\n*.pyc\n.git\ncore\n*.mp4\n*.jpg\n*.db\n*.ts\n\nweb/dist/\nweb/node_modules/\nweb/.npm\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2265625,
          "content": ".DS_Store\n__pycache__\n.mypy_cache\n*.swp\ndebug\n.vscode/*\n!.vscode/launch.json\nconfig/*\n!config/*.example\nmodels\n*.mp4\n*.db\n*.csv\nfrigate/version.py\nweb/build\nweb/node_modules\nweb/coverage\ncore\n!/web/**/*.ts\n.idea/*\n.ipynb_checkpoints"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 17.64453125,
          "content": "[MASTER]\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code.\nextension-pkg-whitelist=\n\n# Specify a score threshold to be exceeded before program exits with error.\nfail-under=10.0\n\n# Add files or directories to the blacklist. They should be base names, not\n# paths.\nignore=CVS\n\n# Add files or directories matching the regex patterns to the blacklist. The\n# regex matches against base names, not paths.\nignore-patterns=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the\n# number of processors available to use.\njobs=1\n\n# Control the amount of potential inferred values when inferring a single\n# object. This can help the performance when dealing with large functions or\n# complex, nested conditions.\nlimit-inference-results=100\n\n# List of plugins (as comma separated values of python module names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# When enabled, pylint would attempt to guess common misconfiguration and emit\n# user-friendly hints instead of false-positive error messages.\nsuggestion-mode=yes\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED.\nconfidence=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once). You can also use \"--disable=all\" to\n# disable everything first and then reenable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use \"--disable=all --enable=classes\n# --disable=W\".\ndisable=print-statement,\n        parameter-unpacking,\n        unpacking-in-except,\n        old-raise-syntax,\n        backtick,\n        long-suffix,\n        old-ne-operator,\n        old-octal-literal,\n        import-star-module-level,\n        non-ascii-bytes-literal,\n        raw-checker-failed,\n        bad-inline-option,\n        locally-disabled,\n        file-ignored,\n        suppressed-message,\n        useless-suppression,\n        deprecated-pragma,\n        use-symbolic-message-instead,\n        apply-builtin,\n        basestring-builtin,\n        buffer-builtin,\n        cmp-builtin,\n        coerce-builtin,\n        execfile-builtin,\n        file-builtin,\n        long-builtin,\n        raw_input-builtin,\n        reduce-builtin,\n        standarderror-builtin,\n        unicode-builtin,\n        xrange-builtin,\n        coerce-method,\n        delslice-method,\n        getslice-method,\n        setslice-method,\n        no-absolute-import,\n        old-division,\n        dict-iter-method,\n        dict-view-method,\n        next-method-called,\n        metaclass-assignment,\n        indexing-exception,\n        raising-string,\n        reload-builtin,\n        oct-method,\n        hex-method,\n        nonzero-method,\n        cmp-method,\n        input-builtin,\n        round-builtin,\n        intern-builtin,\n        unichr-builtin,\n        map-builtin-not-iterating,\n        zip-builtin-not-iterating,\n        range-builtin-not-iterating,\n        filter-builtin-not-iterating,\n        using-cmp-argument,\n        eq-without-hash,\n        div-method,\n        idiv-method,\n        rdiv-method,\n        exception-message-attribute,\n        invalid-str-codec,\n        sys-max-int,\n        bad-python3-import,\n        deprecated-string-function,\n        deprecated-str-translate-call,\n        deprecated-itertools-function,\n        deprecated-types-field,\n        next-method-defined,\n        dict-items-not-iterating,\n        dict-keys-not-iterating,\n        dict-values-not-iterating,\n        deprecated-operator-function,\n        deprecated-urllib-function,\n        xreadlines-attribute,\n        deprecated-sys-function,\n        exception-escape,\n        comprehension-escape\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\nenable=c-extension-no-member\n\n\n[REPORTS]\n\n# Python expression which should return a score less than or equal to 10. You\n# have access to the variables 'error', 'warning', 'refactor', and 'convention'\n# which contain the number of messages in each category, as well as 'statement'\n# which is the total number of statements analyzed. This score is used by the\n# global evaluation report (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details.\n#msg-template=\n\n# Set the output format. Available formats are text, parseable, colorized, json\n# and msvs (visual studio). You can also give a reporter class, e.g.\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Tells whether to display a full report or only the messages.\nreports=no\n\n# Activate the evaluation score.\nscore=yes\n\n\n[REFACTORING]\n\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=5\n\n# Complete name of functions that never returns. When checking for\n# inconsistent-return-statements if a never returning function is called then\n# it will be considered as an explicit return statement and no message will be\n# printed.\nnever-returning-functions=sys.exit\n\n\n[SPELLING]\n\n# Limits count of emitted suggestions for spelling mistakes.\nmax-spelling-suggestions=4\n\n# Spelling dictionary name. Available dictionaries: none. To make it work,\n# install the python-enchant package.\nspelling-dict=\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains the private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to the private dictionary (see the\n# --spelling-private-dict-file option) instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[TYPECHECK]\n\n# List of decorators that produce context managers, such as\n# contextlib.contextmanager. Add to this list to register other decorators that\n# produce valid context managers.\ncontextmanager-decorators=contextlib.contextmanager\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# Tells whether to warn about missing members when the owner of the attribute\n# is inferred to be None.\nignore-none=yes\n\n# This flag controls whether pylint should warn about no-member and similar\n# checks whenever an opaque object is returned when inferring. The inference\n# can return multiple potential results while evaluating a Python object, but\n# some branches might not be evaluated, which results in partial inference. In\n# that case, it might be useful to still emit no-member and other checks for\n# the rest of the inferred objects.\nignore-on-opaque-inference=yes\n\n# List of class names for which member attributes should not be checked (useful\n# for classes with dynamically set attributes). This supports the use of\n# qualified names.\nignored-classes=optparse.Values,thread._local,_thread._local\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis). It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=\n\n# Show a hint with possible names when a member name was not found. The aspect\n# of finding the hint is based on edit distance.\nmissing-member-hint=yes\n\n# The minimum edit distance a name should have in order to be considered a\n# similar match for a missing member name.\nmissing-member-hint-distance=1\n\n# The total number of similar names that should be taken in consideration when\n# showing a hint for a missing member.\nmissing-member-max-choices=1\n\n# List of decorators that change the signature of a decorated function.\nsignature-mutators=\n\n\n[STRING]\n\n# This flag controls whether inconsistent-quotes generates a warning when the\n# character used as a quote delimiter is used inconsistently within a module.\ncheck-quote-consistency=no\n\n# This flag controls whether the implicit-str-concat should generate a warning\n# on implicit string concatenation in sequences defined over several lines.\ncheck-str-concat-over-line-jumps=no\n\n\n[FORMAT]\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Number of spaces of indent required inside a hanging or continued line.\nindent-after-paren=4\n\n# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n# Maximum number of characters on a single line.\nmax-line-length=100\n\n# Maximum number of lines in a module.\nmax-module-lines=1000\n\n# Allow the body of a class to be on the same line as the declaration if body\n# contains single statement.\nsingle-line-class-stmt=no\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=no\n\n\n[SIMILARITIES]\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,\n      XXX,\n      TODO\n\n# Regular expression of note tags to take in consideration.\n#notes-rgx=\n\n\n[BASIC]\n\n# Naming style matching correct argument names.\nargument-naming-style=snake_case\n\n# Regular expression matching correct argument names. Overrides argument-\n# naming-style.\n#argument-rgx=\n\n# Naming style matching correct attribute names.\nattr-naming-style=snake_case\n\n# Regular expression matching correct attribute names. Overrides attr-naming-\n# style.\n#attr-rgx=\n\n# Bad variable names which should always be refused, separated by a comma.\nbad-names=foo,\n          bar,\n          baz,\n          toto,\n          tutu,\n          tata\n\n# Bad variable names regexes, separated by a comma. If names match any regex,\n# they will always be refused\nbad-names-rgxs=\n\n# Naming style matching correct class attribute names.\nclass-attribute-naming-style=any\n\n# Regular expression matching correct class attribute names. Overrides class-\n# attribute-naming-style.\n#class-attribute-rgx=\n\n# Naming style matching correct class names.\nclass-naming-style=PascalCase\n\n# Regular expression matching correct class names. Overrides class-naming-\n# style.\n#class-rgx=\n\n# Naming style matching correct constant names.\nconst-naming-style=UPPER_CASE\n\n# Regular expression matching correct constant names. Overrides const-naming-\n# style.\n#const-rgx=\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n# Naming style matching correct function names.\nfunction-naming-style=snake_case\n\n# Regular expression matching correct function names. Overrides function-\n# naming-style.\n#function-rgx=\n\n# Good variable names which should always be accepted, separated by a comma.\ngood-names=i,\n           j,\n           k,\n           ex,\n           Run,\n           _\n\n# Good variable names regexes, separated by a comma. If names match any regex,\n# they will always be accepted\ngood-names-rgxs=\n\n# Include a hint for the correct naming format with invalid-name.\ninclude-naming-hint=no\n\n# Naming style matching correct inline iteration names.\ninlinevar-naming-style=any\n\n# Regular expression matching correct inline iteration names. Overrides\n# inlinevar-naming-style.\n#inlinevar-rgx=\n\n# Naming style matching correct method names.\nmethod-naming-style=snake_case\n\n# Regular expression matching correct method names. Overrides method-naming-\n# style.\n#method-rgx=\n\n# Naming style matching correct module names.\nmodule-naming-style=snake_case\n\n# Regular expression matching correct module names. Overrides module-naming-\n# style.\n#module-rgx=\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=^_\n\n# List of decorators that produce properties, such as abc.abstractproperty. Add\n# to this list to register other decorators that produce valid properties.\n# These decorators are taken in consideration only for invalid-name.\nproperty-classes=abc.abstractproperty\n\n# Naming style matching correct variable names.\nvariable-naming-style=snake_case\n\n# Regular expression matching correct variable names. Overrides variable-\n# naming-style.\n#variable-rgx=\n\n\n[VARIABLES]\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid defining new builtins when possible.\nadditional-builtins=\n\n# Tells whether unused global variables should be treated as a violation.\nallow-global-unused-variables=yes\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,\n          _cb\n\n# A regular expression matching the name of dummy variables (i.e. expected to\n# not be used).\ndummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore.\nignored-argument-names=_.*|^ignored_|^unused_\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io\n\n\n[LOGGING]\n\n# The type of string formatting that logging methods do. `old` means using %\n# formatting, `new` is for `{}` formatting.\nlogging-format-style=fstr\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format.\nlogging-modules=logging\n\n\n[DESIGN]\n\n# Maximum number of arguments for function / method.\nmax-args=5\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Maximum number of boolean expressions in an if statement (see R0916).\nmax-bool-expr=5\n\n# Maximum number of branch for function / method body.\nmax-branches=12\n\n# Maximum number of locals for function / method body.\nmax-locals=15\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n# Maximum number of return / yield for function / method body.\nmax-returns=6\n\n# Maximum number of statements in function / method body.\nmax-statements=50\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,\n                      __new__,\n                      setUp,\n                      __post_init__\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,\n                  _fields,\n                  _replace,\n                  _source,\n                  _make\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=cls\n\n\n[IMPORTS]\n\n# List of modules that can be imported at any level, not just the top level\n# one.\nallow-any-import-level=\n\n# Allow wildcard imports from modules that define __all__.\nallow-wildcard-with-all=no\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=no\n\n# Deprecated modules which should not be used, separated by a comma.\ndeprecated-modules=optparse,tkinter.tix\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled).\next-import-graph=\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled).\nimport-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled).\nint-import-graph=\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=enchant\n\n# Couples of modules and preferred modules, separated by a comma.\npreferred-modules=\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"BaseException, Exception\".\novergeneral-exceptions=BaseException,\n                       Exception\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.232421875,
          "content": "# Community-supported boards\n/docker/tensorrt/ @madsciencetist @NateMeyer\n/docker/tensorrt/*arm64* @madsciencetist\n/docker/tensorrt/*jetson* @madsciencetist\n/docker/rockchip/ @MarcA711\n/docker/rocm/ @harakas\n/docker/hailo8l/ @spanner3003\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05078125,
          "content": "The MIT License\n\nCopyright (c) 2020 Blake Blackshear\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.548828125,
          "content": "default_target: local\n\nCOMMIT_HASH := $(shell git log -1 --pretty=format:\"%h\"|tail -1)\nVERSION = 0.15.0\nIMAGE_REPO ?= ghcr.io/blakeblackshear/frigate\nGITHUB_REF_NAME ?= $(shell git rev-parse --abbrev-ref HEAD)\nBOARDS= #Initialized empty\n\ninclude docker/*/*.mk\n\nbuild-boards: $(BOARDS:%=build-%)\n\npush-boards: $(BOARDS:%=push-%)\n\nversion:\n\techo 'VERSION = \"$(VERSION)-$(COMMIT_HASH)\"' > frigate/version.py\n\nlocal: version\n\tdocker buildx build --target=frigate --file docker/main/Dockerfile . \\\n\t\t--tag frigate:latest \\\n\t\t--load\n\namd64:\n\tdocker buildx build --target=frigate --file docker/main/Dockerfile . \\\n\t\t--tag $(IMAGE_REPO):$(VERSION)-$(COMMIT_HASH) \\\n\t\t--platform linux/amd64\n\narm64:\n\tdocker buildx build --target=frigate --file docker/main/Dockerfile . \\\n\t\t--tag $(IMAGE_REPO):$(VERSION)-$(COMMIT_HASH) \\\n\t\t--platform linux/arm64\n\nbuild: version amd64 arm64\n\tdocker buildx build --target=frigate --file docker/main/Dockerfile . \\\n\t\t--tag $(IMAGE_REPO):$(VERSION)-$(COMMIT_HASH) \\\n\t\t--platform linux/arm64/v8,linux/amd64\n\npush: push-boards\n\tdocker buildx build --target=frigate --file docker/main/Dockerfile . \\\n\t\t--tag $(IMAGE_REPO):${GITHUB_REF_NAME}-$(COMMIT_HASH) \\\n\t\t--platform linux/arm64/v8,linux/amd64 \\\n\t\t--push\n\nrun: local\n\tdocker run --rm --publish=5000:5000 --volume=${PWD}/config:/config frigate:latest\n\nrun_tests: local\n\tdocker run --rm --workdir=/opt/frigate --entrypoint= frigate:latest \\\n\t\tpython3 -u -m unittest\n\tdocker run --rm --workdir=/opt/frigate --entrypoint= frigate:latest \\\n\t\tpython3 -u -m mypy --config-file frigate/mypy.ini frigate\n\n.PHONY: run_tests\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.26953125,
          "content": "<p align=\"center\">\n  <img align=\"center\" alt=\"logo\" src=\"docs/static/img/frigate.png\">\n</p>\n\n# Frigate - NVR With Realtime Object Detection for IP Cameras\n\nA complete and local NVR designed for [Home Assistant](https://www.home-assistant.io) with AI object detection. Uses OpenCV and Tensorflow to perform realtime object detection locally for IP cameras.\n\nUse of a [Google Coral Accelerator](https://coral.ai/products/) is optional, but highly recommended. The Coral will outperform even the best CPUs and can process 100+ FPS with very little overhead.\n\n- Tight integration with Home Assistant via a [custom component](https://github.com/blakeblackshear/frigate-hass-integration)\n- Designed to minimize resource use and maximize performance by only looking for objects when and where it is necessary\n- Leverages multiprocessing heavily with an emphasis on realtime over processing every frame\n- Uses a very low overhead motion detection to determine where to run object detection\n- Object detection with TensorFlow runs in separate processes for maximum FPS\n- Communicates over MQTT for easy integration into other systems\n- Records video with retention settings based on detected objects\n- 24/7 recording\n- Re-streaming via RTSP to reduce the number of connections to your camera\n- WebRTC & MSE support for low-latency live view\n\n## Documentation\n\nView the documentation at https://docs.frigate.video\n\n## Donations\n\nIf you would like to make a donation to support development, please use [Github Sponsors](https://github.com/sponsors/blakeblackshear).\n\n## Screenshots\n\n### Live dashboard\n<div>\n<img width=\"800\" alt=\"Live dashboard\" src=\"https://github.com/blakeblackshear/frigate/assets/569905/5e713cb9-9db5-41dc-947a-6937c3bc376e\">\n</div>\n\n### Streamlined review workflow\n<div>\n<img width=\"800\" alt=\"Streamlined review workflow\" src=\"https://github.com/blakeblackshear/frigate/assets/569905/6fed96e8-3b18-40e5-9ddc-31e6f3c9f2ff\">\n</div>\n\n### Multi-camera scrubbing\n<div>\n<img width=\"800\" alt=\"Multi-camera scrubbing\" src=\"https://github.com/blakeblackshear/frigate/assets/569905/d6788a15-0eeb-4427-a8d4-80b93cae3d74\">\n</div>\n\n### Built-in mask and zone editor\n<div>\n<img width=\"800\" alt=\"Multi-camera scrubbing\" src=\"https://github.com/blakeblackshear/frigate/assets/569905/d7885fc3-bfe6-452f-b7d0-d957cb3e31f5\">\n</div>\n"
        },
        {
          "name": "audio-labelmap.txt",
          "type": "blob",
          "size": 4.8486328125,
          "content": "speech\nspeech\nspeech\nspeech\nbabbling\nspeech\nyell\nbellow\nwhoop\nyell\nyell\nyell\nwhispering\nlaughter\nlaughter\nlaughter\nsnicker\nlaughter\nlaughter\ncrying\ncrying\ncrying\nyell\nsigh\nsinging\nchoir\nsodeling\nchant\nmantra\nchild_singing\nsynthetic_singing\nrapping\nhumming\ngroan\ngrunt\nwhistling\nbreathing\nwheeze\nsnoring\ngasp\npant\nsnort\ncough\nthroat_clearing\nsneeze\nsniff\nrun\nshuffle\nfootsteps\nchewing\nbiting\ngargling\nstomach_rumble\nburping\nhiccup\nfart\nhands\nfinger_snapping\nclapping\nheartbeat\nheart_murmur\ncheering\napplause\nchatter\ncrowd\nspeech\nchildren_playing\nanimal\npets\ndog\nbark\nyip\nhowl\nbow-wow\ngrowling\nwhimper_dog\ncat\npurr\nmeow\nhiss\ncaterwaul\nlivestock\nhorse\nclip-clop\nneigh\ncattle\nmoo\ncowbell\npig\noink\ngoat\nbleat\nsheep\nfowl\nchicken\ncluck\ncock-a-doodle-doo\nturkey\ngobble\nduck\nquack\ngoose\nhonk\nwild_animals\nroaring_cats\nroar\nbird\nchird\nchirp\nsquawk\npigeon\ncoo\ncrow\ncaw\nowl\nhoot\nflapping_wings\ndogs\nrats\nmouse\npatter\ninsect\ncricket\nmosquito\nfly\nbuzz\nbuzz\nfrog\ncroak\nsnake\nrattle\nwhale_vocalization\nmusic\nmusical_instrument\nplucked_string_instrument\nguitar\nelectric_guitar\nbass_guitar\nacoustic_guitar\nsteel_guitar\ntapping\nstrum\nbanjo\nsitar\nmandolin\nzither\nukulele\nkeyboard\npiano\nelectric_piano\norgan\nelectronic_organ\nhammond_organ\nsynthesizer\nsampler\nharpsichord\npercussion\ndrum_kit\ndrum_machine\ndrum\nsnare_drum\nrimshot\ndrum_roll\nbass_drum\ntimpani\ntabla\ncymbal\nhi-hat\nwood_block\ntambourine\nrattle\nmaraca\ngong\ntubular_bells\nmallet_percussion\nmarimba\nglockenspiel\nvibraphone\nsteelpan\norchestra\nbrass_instrument\nfrench_horn\ntrumpet\ntrombone\nbowed_string_instrument\nstring_section\nviolin\npizzicato\ncello\ndouble_bass\nwind_instrument\nflute\nsaxophone\nclarinet\nharp\nbell\nchurch_bell\njingle_bell\nbicycle_bell\ntuning_fork\nchime\nwind_chime\nchange_ringing\nharmonica\naccordion\nbagpipes\ndidgeridoo\nshofar\ntheremin\nsinging_bowl\nscratching\npop_music\nhip_hop_music\nbeatboxing\nrock_music\nheavy_metal\npunk_rock\ngrunge\nprogressive_rock\nrock_and_roll\npsychedelic_rock\nrhythm_and_blues\nsoul_music\nreggae\ncountry\nswing_music\nbluegrass\nfunk\nfolk_music\nmiddle_eastern_music\njazz\ndisco\nclassical_music\nopera\nelectronic_music\nhouse_music\ntechno\ndubstep\ndrum_and_bass\nelectronica\nelectronic_dance_music\nambient_music\ntrance_music\nmusic_of_latin_america\nsalsa_music\nflamenco\nblues\nmusic_for_children\nnew-age_music\nvocal_music\na_capella\nmusic_of_africa\nafrobeat\nchristian_music\ngospel_music\nmusic_of_asia\ncarnatic_music\nmusic_of_bollywood\nska\ntraditional_music\nindependent_music\nsong\nbackground_music\ntheme_music\njingle\nsoundtrack_music\nlullaby\nvideo_game_music\nchristmas_music\ndance_music\nwedding_music\nhappy_music\nsad_music\ntender_music\nexciting_music\nangry_music\nscary_music\nwind\nrustling_leaves\nwind_noise\nthunderstorm\nthunder\nwater\nrain\nraindrop\nrain_on_surface\nstream\nwaterfall\nocean\nwaves\nsteam\ngurgling\nfire\ncrackle\nvehicle\nboat\nsailboat\nrowboat\nmotorboat\nship\nmotor_vehicle\ncar\nhonk\ntoot\ncar_alarm\npower_windows\nskidding\ntire_squeal\ncar_passing_by\nrace_car\ntruck\nair_brake\nair_horn\nreversing_beeps\nice_cream_truck\nbus\nemergency_vehicle\npolice_car\nambulance\nfire_engine\nmotorcycle\ntraffic_noise\nrail_transport\ntrain\ntrain_whistle\ntrain_horn\nrailroad_car\ntrain_wheels_squealing\nsubway\naircraft\naircraft_engine\njet_engine\npropeller\nhelicopter\nfixed-wing_aircraft\nbicycle\nskateboard\nengine\nlight_engine\ndental_drill's_drill\nlawn_mower\nchainsaw\nmedium_engine\nheavy_engine\nengine_knocking\nengine_starting\nidling\naccelerating\ndoor\ndoorbell\nding-dong\nsliding_door\nslam\nknock\ntap\nsqueak\ncupboard_open_or_close\ndrawer_open_or_close\ndishes\ncutlery\nchopping\nfrying\nmicrowave_oven\nblender\nwater_tap\nsink\nbathtub\nhair_dryer\ntoilet_flush\ntoothbrush\nelectric_toothbrush\nvacuum_cleaner\nzipper\nkeys_jangling\ncoin\nscissors\nelectric_shaver\nshuffling_cards\ntyping\ntypewriter\ncomputer_keyboard\nwriting\nalarm\ntelephone\ntelephone_bell_ringing\nringtone\ntelephone_dialing\ndial_tone\nbusy_signal\nalarm_clock\nsiren\ncivil_defense_siren\nbuzzer\nsmoke_detector\nfire_alarm\nfoghorn\nwhistle\nsteam_whistle\nmechanisms\nratchet\nclock\ntick\ntick-tock\ngears\npulleys\nsewing_machine\nmechanical_fan\nair_conditioning\ncash_register\nprinter\ncamera\nsingle-lens_reflex_camera\ntools\nhammer\njackhammer\nsawing\nfiling\nsanding\npower_tool\ndrill\nexplosion\ngunshot\nmachine_gun\nfusillade\nartillery_fire\ncap_gun\nfireworks\nfirecracker\nburst\neruption\nboom\nwood\nchop\nsplinter\ncrack\nglass\nchink\nshatter\nliquid\nsplash\nslosh\nsquish\ndrip\npour\ntrickle\ngush\nfill\nspray\npump\nstir\nboiling\nsonar\narrow\nwhoosh\nthump\nthunk\nelectronic_tuner\neffects_unit\nchorus_effect\nbasketball_bounce\nbang\nslap\nwhack\nsmash\nbreaking\nbouncing\nwhip\nflap\nscratch\nscrape\nrub\nroll\ncrushing\ncrumpling\ntearing\nbeep\nping\nding\nclang\nsqueal\ncreak\nrustle\nwhir\nclatter\nsizzle\nclicking\nclickety-clack\nrumble\nplop\njingle\nhum\nzing\nboing\ncrunch\nsilence\nsine_wave\nharmonic\nchirp_tone\nsound_effect\npulse\ninside\ninside\ninside\noutside\noutside\nreverberation\necho\nnoise\nenvironmental_noise\nstatic\nmains_hum\ndistortion\nsidetone\ncacophony\nwhite_noise\npink_noise\nthrobbing\nvibration\ntelevision\nradio\nfield_recording\n"
        },
        {
          "name": "benchmark.py",
          "type": "blob",
          "size": 3.0888671875,
          "content": "import datetime\nimport multiprocessing as mp\nfrom statistics import mean\n\nimport numpy as np\n\nimport frigate.util as util\nfrom frigate.config import DetectorTypeEnum\nfrom frigate.object_detection import (\n    ObjectDetectProcess,\n    RemoteObjectDetector,\n    load_labels,\n)\n\nmy_frame = np.expand_dims(np.full((300, 300, 3), 1, np.uint8), axis=0)\nlabels = load_labels(\"/labelmap.txt\")\n\n######\n# Minimal same process runner\n######\n# object_detector = LocalObjectDetector()\n# tensor_input = np.expand_dims(np.full((300,300,3), 0, np.uint8), axis=0)\n\n# start = datetime.datetime.now().timestamp()\n\n# frame_times = []\n# for x in range(0, 1000):\n#   start_frame = datetime.datetime.now().timestamp()\n\n#   tensor_input[:] = my_frame\n#   detections = object_detector.detect_raw(tensor_input)\n#   parsed_detections = []\n#   for d in detections:\n#       if d[1] < 0.4:\n#           break\n#       parsed_detections.append((\n#           labels[int(d[0])],\n#           float(d[1]),\n#           (d[2], d[3], d[4], d[5])\n#       ))\n#   frame_times.append(datetime.datetime.now().timestamp()-start_frame)\n\n# duration = datetime.datetime.now().timestamp()-start\n# print(f\"Processed for {duration:.2f} seconds.\")\n# print(f\"Average frame processing time: {mean(frame_times)*1000:.2f}ms\")\n\n\ndef start(id, num_detections, detection_queue, event):\n    object_detector = RemoteObjectDetector(\n        str(id), \"/labelmap.txt\", detection_queue, event\n    )\n    start = datetime.datetime.now().timestamp()\n\n    frame_times = []\n    for x in range(0, num_detections):\n        start_frame = datetime.datetime.now().timestamp()\n        object_detector.detect(my_frame)\n        frame_times.append(datetime.datetime.now().timestamp() - start_frame)\n\n    duration = datetime.datetime.now().timestamp() - start\n    object_detector.cleanup()\n    print(f\"{id} - Processed for {duration:.2f} seconds.\")\n    print(f\"{id} - FPS: {object_detector.fps.eps():.2f}\")\n    print(f\"{id} - Average frame processing time: {mean(frame_times)*1000:.2f}ms\")\n\n\n######\n# Separate process runner\n######\n# event = mp.Event()\n# detection_queue = mp.Queue()\n# edgetpu_process = EdgeTPUProcess(detection_queue, {'1': event}, 'usb:0')\n\n# start(1, 1000, edgetpu_process.detection_queue, event)\n# print(f\"Average raw inference speed: {edgetpu_process.avg_inference_speed.value*1000:.2f}ms\")\n\n####\n# Multiple camera processes\n####\ncamera_processes = []\n\nevents = {}\nfor x in range(0, 10):\n    events[str(x)] = mp.Event()\ndetection_queue = mp.Queue()\nedgetpu_process_1 = ObjectDetectProcess(\n    detection_queue, events, DetectorTypeEnum.edgetpu, \"usb:0\"\n)\nedgetpu_process_2 = ObjectDetectProcess(\n    detection_queue, events, DetectorTypeEnum.edgetpu, \"usb:1\"\n)\n\nfor x in range(0, 10):\n    camera_process = util.Process(\n        target=start, args=(x, 300, detection_queue, events[str(x)])\n    )\n    camera_process.daemon = True\n    camera_processes.append(camera_process)\n\nstart_time = datetime.datetime.now().timestamp()\n\nfor p in camera_processes:\n    p.start()\n\nfor p in camera_processes:\n    p.join()\n\nduration = datetime.datetime.now().timestamp() - start_time\nprint(f\"Total - Processed for {duration:.2f} seconds.\")\n"
        },
        {
          "name": "benchmark_motion.py",
          "type": "blob",
          "size": 3.7509765625,
          "content": "import datetime\nimport multiprocessing as mp\nimport os\n\nimport cv2\nimport numpy as np\n\nfrom frigate.config import MotionConfig\nfrom frigate.motion.improved_motion import ImprovedMotionDetector\nfrom frigate.util import create_mask\n\n# get info on the video\n# cap = cv2.VideoCapture(\"debug/front_cam_2023_05_23_08_41__2023_05_23_08_43.mp4\")\n# cap = cv2.VideoCapture(\"debug/motion_test_clips/rain_1.mp4\")\ncap = cv2.VideoCapture(\"debug/motion_test_clips/lawn_mower_night_1.mp4\")\n# cap = cv2.VideoCapture(\"airport.mp4\")\nwidth = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))\nheight = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))\nfps = cap.get(cv2.CAP_PROP_FPS)\nframe_shape = (height, width, 3)\n# Nick back:\n# \"1280,0,1280,316,1170,216,1146,126,1016,127,979,82,839,0\",\n# \"310,350,300,402,224,405,241,354\",\n# \"378,0,375,26,0,23,0,0\",\n# Front door:\n# \"1080,0,1080,339,1010,280,1020,169,777,163,452,170,318,299,191,365,186,417,139,470,108,516,40,530,0,514,0,0\",\n# \"336,833,438,1024,346,1093,103,1052,24,814\",\n# Back\n# \"1855,0,1851,100,1289,96,1105,161,1045,119,890,121,890,0\",\n# \"505,95,506,138,388,153,384,114\",\n# \"689,72,689,122,549,134,547,89\",\n# \"261,134,264,176,169,195,167,158\",\n# \"145,159,146,202,70,220,65,183\",\n\nmask = create_mask(\n    (height, width),\n    [\n        \"1080,0,1080,339,1010,280,1020,169,777,163,452,170,318,299,191,365,186,417,139,470,108,516,40,530,0,514,0,0\",\n        \"336,833,438,1024,346,1093,103,1052,24,814\",\n    ],\n)\n\n# create the motion config\nmotion_config_1 = MotionConfig()\nmotion_config_1.mask = np.zeros((height, width), np.uint8)\nmotion_config_1.mask[:] = mask\n# motion_config_1.improve_contrast = 1\nmotion_config_1.frame_height = 150\n# motion_config_1.frame_alpha = 0.02\n# motion_config_1.threshold = 30\n# motion_config_1.contour_area = 10\n\nmotion_config_2 = MotionConfig()\nmotion_config_2.mask = np.zeros((height, width), np.uint8)\nmotion_config_2.mask[:] = mask\n# motion_config_2.improve_contrast = 1\nmotion_config_2.frame_height = 150\n# motion_config_2.frame_alpha = 0.01\nmotion_config_2.threshold = 20\n# motion_config.contour_area = 10\n\nsave_images = True\n\nimproved_motion_detector_1 = ImprovedMotionDetector(\n    frame_shape=frame_shape,\n    config=motion_config_1,\n    fps=fps,\n    improve_contrast=mp.Value(\"i\", motion_config_1.improve_contrast),\n    threshold=mp.Value(\"i\", motion_config_1.threshold),\n    contour_area=mp.Value(\"i\", motion_config_1.contour_area),\n    name=\"default\",\n)\nimproved_motion_detector_1.save_images = save_images\n\nimproved_motion_detector_2 = ImprovedMotionDetector(\n    frame_shape=frame_shape,\n    config=motion_config_2,\n    fps=fps,\n    improve_contrast=mp.Value(\"i\", motion_config_2.improve_contrast),\n    threshold=mp.Value(\"i\", motion_config_2.threshold),\n    contour_area=mp.Value(\"i\", motion_config_2.contour_area),\n    name=\"compare\",\n)\nimproved_motion_detector_2.save_images = save_images\n\n# read and process frames\nret, frame = cap.read()\nframe_counter = 1\nwhile ret:\n    yuv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2YUV_I420)\n\n    start_frame = datetime.datetime.now().timestamp()\n    improved_motion_detector_1.detect(yuv_frame)\n\n    start_frame = datetime.datetime.now().timestamp()\n    improved_motion_detector_2.detect(yuv_frame)\n\n    default_frame = f\"debug/frames/default-{frame_counter}.jpg\"\n    compare_frame = f\"debug/frames/compare-{frame_counter}.jpg\"\n    if os.path.exists(default_frame) and os.path.exists(compare_frame):\n        images = [\n            cv2.imread(default_frame),\n            cv2.imread(compare_frame),\n        ]\n\n        cv2.imwrite(\n            f\"debug/frames/all-{frame_counter}.jpg\",\n            cv2.vconcat(images)\n            if frame_shape[0] > frame_shape[1]\n            else cv2.hconcat(images),\n        )\n        os.unlink(default_frame)\n        os.unlink(compare_frame)\n    frame_counter += 1\n\n    ret, frame = cap.read()\n\ncap.release()\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "cspell.json",
          "type": "blob",
          "size": 0.4033203125,
          "content": "{\n  \"version\": \"0.2\",\n  \"ignorePaths\": [\n    \"Dockerfile\",\n    \"Dockerfile.*\",\n    \"CMakeLists.txt\",\n    \"*.db\",\n    \"node_modules\",\n    \"__pycache__\",\n    \"dist\",\n    \"/audio-labelmap.txt\"\n  ],\n  \"language\": \"en\",\n  \"dictionaryDefinitions\": [\n    {\n      \"name\": \"frigate-dictionary\",\n      \"path\": \"./.cspell/frigate-dictionary.txt\",\n      \"addWords\": true\n    }\n  ],\n  \"dictionaries\": [\"frigate-dictionary\"]\n}\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 1.146484375,
          "content": "version: \"3\"\nservices:\n  devcontainer:\n    container_name: frigate-devcontainer\n    # add groups from host for render, plugdev, video\n    group_add:\n      - \"109\" # render\n      - \"110\" # render\n      - \"44\"  # video\n      - \"46\"  # plugdev\n    shm_size: \"256mb\"\n    build:\n      context: .\n      dockerfile: docker/main/Dockerfile\n      # Use target devcontainer-trt for TensorRT dev\n      target: devcontainer\n    ## Uncomment this block for nvidia gpu support\n    # deploy:\n    #       resources:\n    #           reservations:\n    #               devices:\n    #                   - driver: nvidia\n    #                     count: 1\n    #                     capabilities: [gpu]\n    environment:\n      YOLO_MODELS: \"\"\n    devices:\n      - /dev/bus/usb:/dev/bus/usb\n      # - /dev/dri:/dev/dri # for intel hwaccel, needs to be updated for your hardware\n    volumes:\n      - .:/workspace/frigate:cached\n      - ./web/dist:/opt/frigate/web:cached\n      - /etc/localtime:/etc/localtime:ro\n      - ./config:/config\n      - ./debug:/media/frigate\n      - /dev/bus/usb:/dev/bus/usb\n  mqtt:\n    container_name: mqtt\n    image: eclipse-mosquitto:1.6\n    ports:\n      - \"1883:1883\"\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "frigate",
          "type": "tree",
          "content": null
        },
        {
          "name": "labelmap.txt",
          "type": "blob",
          "size": 1.029296875,
          "content": "0  person\n1  bicycle\n2  car\n3  motorcycle\n4  airplane\n5  bus\n6  train\n7  car\n8  boat\n9  traffic light\n10  fire hydrant\n11  street sign\n12  stop sign\n13  parking meter\n14  bench\n15  bird\n16  cat\n17  dog\n18  horse\n19  sheep\n20  cow\n21  elephant\n22  bear\n23  zebra\n24  giraffe\n25  hat\n26  backpack\n27  umbrella\n28  shoe\n29  eye glasses\n30  handbag\n31  tie\n32  suitcase\n33  frisbee\n34  skis\n35  snowboard\n36  sports ball\n37  kite\n38  baseball bat\n39  baseball glove\n40  skateboard\n41  surfboard\n42  tennis racket\n43  bottle\n44  plate\n45  wine glass\n46  cup\n47  fork\n48  knife\n49  spoon\n50  bowl\n51  banana\n52  apple\n53  sandwich\n54  orange\n55  broccoli\n56  carrot\n57  hot dog\n58  pizza\n59  donut\n60  cake\n61  chair\n62  couch\n63  potted plant\n64  bed\n65  mirror\n66  dining table\n67  window\n68  desk\n69  toilet\n70  door\n71  tv\n72  laptop\n73  mouse\n74  remote\n75  keyboard\n76  cell phone\n77  microwave\n78  oven\n79  toaster\n80  sink\n81  refrigerator\n82  blender\n83  book\n84  clock\n85  vase\n86  scissors\n87  teddy bear\n88  hair drier\n89  toothbrush\n90  hair brush"
        },
        {
          "name": "migrations",
          "type": "tree",
          "content": null
        },
        {
          "name": "netlify.toml",
          "type": "blob",
          "size": 0.1123046875,
          "content": "[build]\n  base = \"docs/\"\n  publish = \"build\"\n  command = \"npm run build\"\n  environment = { NODE_VERSION = \"20\" }\n\n\n"
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 0.083984375,
          "content": "{\n  \"name\": \"frigate\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {}\n}\n"
        },
        {
          "name": "process_clip.py",
          "type": "blob",
          "size": 9.8125,
          "content": "import csv\nimport json\nimport logging\nimport multiprocessing as mp\nimport os\nimport subprocess as sp\nimport sys\n\nimport click\nimport cv2\nimport numpy as np\n\nsys.path.append(\"/workspace/frigate\")\n\nfrom frigate.config import FrigateConfig  # noqa: E402\nfrom frigate.motion import MotionDetector  # noqa: E402\nfrom frigate.object_detection import LocalObjectDetector  # noqa: E402\nfrom frigate.object_processing import CameraState  # noqa: E402\nfrom frigate.track.centroid_tracker import CentroidTracker  # noqa: E402\nfrom frigate.util import (  # noqa: E402\n    EventsPerSecond,\n    SharedMemoryFrameManager,\n    draw_box_with_label,\n)\nfrom frigate.video import (  # noqa: E402\n    capture_frames,\n    process_frames,\n    start_or_restart_ffmpeg,\n)\n\nlogging.basicConfig(level=logging.DEBUG)\n\nlogger = logging.getLogger(__name__)\n\n\ndef get_frame_shape(source):\n    ffprobe_cmd = [\n        \"ffprobe\",\n        \"-v\",\n        \"panic\",\n        \"-show_error\",\n        \"-show_streams\",\n        \"-of\",\n        \"json\",\n        source,\n    ]\n    p = sp.run(ffprobe_cmd, capture_output=True)\n    info = json.loads(p.stdout)\n\n    video_info = [s for s in info[\"streams\"] if s[\"codec_type\"] == \"video\"][0]\n\n    if video_info[\"height\"] != 0 and video_info[\"width\"] != 0:\n        return (video_info[\"height\"], video_info[\"width\"], 3)\n\n    # fallback to using opencv if ffprobe didn't succeed\n    video = cv2.VideoCapture(source)\n    ret, frame = video.read()\n    frame_shape = frame.shape\n    video.release()\n    return frame_shape\n\n\nclass ProcessClip:\n    def __init__(self, clip_path, frame_shape, config: FrigateConfig):\n        self.clip_path = clip_path\n        self.camera_name = \"camera\"\n        self.config = config\n        self.camera_config = self.config.cameras[\"camera\"]\n        self.frame_shape = self.camera_config.frame_shape\n        self.ffmpeg_cmd = [\n            c[\"cmd\"] for c in self.camera_config.ffmpeg_cmds if \"detect\" in c[\"roles\"]\n        ][0]\n        self.frame_manager = SharedMemoryFrameManager()\n        self.frame_queue = mp.Queue()\n        self.detected_objects_queue = mp.Queue()\n        self.camera_state = CameraState(self.camera_name, config, self.frame_manager)\n\n    def load_frames(self):\n        fps = EventsPerSecond()\n        skipped_fps = EventsPerSecond()\n        current_frame = mp.Value(\"d\", 0.0)\n        frame_size = (\n            self.camera_config.frame_shape_yuv[0]\n            * self.camera_config.frame_shape_yuv[1]\n        )\n        ffmpeg_process = start_or_restart_ffmpeg(\n            self.ffmpeg_cmd, logger, sp.DEVNULL, frame_size\n        )\n        capture_frames(\n            ffmpeg_process,\n            self.camera_name,\n            self.camera_config.frame_shape_yuv,\n            self.frame_manager,\n            self.frame_queue,\n            fps,\n            skipped_fps,\n            current_frame,\n        )\n        ffmpeg_process.wait()\n        ffmpeg_process.communicate()\n\n    def process_frames(\n        self, object_detector, objects_to_track=[\"person\"], object_filters={}\n    ):\n        mask = np.zeros((self.frame_shape[0], self.frame_shape[1], 1), np.uint8)\n        mask[:] = 255\n        motion_detector = MotionDetector(self.frame_shape, self.camera_config.motion)\n        motion_detector.save_images = False\n\n        object_tracker = CentroidTracker(self.camera_config.detect)\n        process_info = {\n            \"process_fps\": mp.Value(\"d\", 0.0),\n            \"detection_fps\": mp.Value(\"d\", 0.0),\n            \"detection_frame\": mp.Value(\"d\", 0.0),\n        }\n\n        detection_enabled = mp.Value(\"d\", 1)\n        motion_enabled = mp.Value(\"d\", True)\n        stop_event = mp.Event()\n\n        process_frames(\n            self.camera_name,\n            self.frame_queue,\n            self.frame_shape,\n            self.config.model,\n            self.camera_config.detect,\n            self.frame_manager,\n            motion_detector,\n            object_detector,\n            object_tracker,\n            self.detected_objects_queue,\n            process_info,\n            objects_to_track,\n            object_filters,\n            detection_enabled,\n            motion_enabled,\n            stop_event,\n            exit_on_empty=True,\n        )\n\n    def stats(self, debug_path=None):\n        total_regions = 0\n        total_motion_boxes = 0\n        object_ids = set()\n        total_frames = 0\n\n        while not self.detected_objects_queue.empty():\n            (\n                camera_name,\n                frame_time,\n                current_tracked_objects,\n                motion_boxes,\n                regions,\n            ) = self.detected_objects_queue.get()\n\n            if debug_path:\n                self.save_debug_frame(\n                    debug_path, frame_time, current_tracked_objects.values()\n                )\n\n            self.camera_state.update(\n                frame_time, current_tracked_objects, motion_boxes, regions\n            )\n            total_regions += len(regions)\n            total_motion_boxes += len(motion_boxes)\n            top_score = 0\n            for id, obj in self.camera_state.tracked_objects.items():\n                if not obj.false_positive:\n                    object_ids.add(id)\n                    if obj.top_score > top_score:\n                        top_score = obj.top_score\n\n            total_frames += 1\n\n            self.frame_manager.delete(self.camera_state.previous_frame_id)\n\n        return {\n            \"total_regions\": total_regions,\n            \"total_motion_boxes\": total_motion_boxes,\n            \"true_positive_objects\": len(object_ids),\n            \"total_frames\": total_frames,\n            \"top_score\": top_score,\n        }\n\n    def save_debug_frame(self, debug_path, frame_time, tracked_objects):\n        current_frame = cv2.cvtColor(\n            self.frame_manager.get(\n                f\"{self.camera_name}{frame_time}\", self.camera_config.frame_shape_yuv\n            ),\n            cv2.COLOR_YUV2BGR_I420,\n        )\n        # draw the bounding boxes on the frame\n        for obj in tracked_objects:\n            thickness = 2\n            color = (0, 0, 175)\n            if obj[\"frame_time\"] != frame_time:\n                thickness = 1\n                color = (255, 0, 0)\n            else:\n                color = (255, 255, 0)\n\n            # draw the bounding boxes on the frame\n            box = obj[\"box\"]\n            draw_box_with_label(\n                current_frame,\n                box[0],\n                box[1],\n                box[2],\n                box[3],\n                obj[\"id\"],\n                f\"{int(obj['score']*100)}% {int(obj['area'])}\",\n                thickness=thickness,\n                color=color,\n            )\n            # draw the regions on the frame\n            region = obj[\"region\"]\n            draw_box_with_label(\n                current_frame,\n                region[0],\n                region[1],\n                region[2],\n                region[3],\n                \"region\",\n                \"\",\n                thickness=1,\n                color=(0, 255, 0),\n            )\n\n        cv2.imwrite(\n            f\"{os.path.join(debug_path, os.path.basename(self.clip_path))}.{int(frame_time*1000000)}.jpg\",\n            current_frame,\n        )\n\n\n@click.command()\n@click.option(\"-p\", \"--path\", required=True, help=\"Path to clip or directory to test.\")\n@click.option(\"-l\", \"--label\", default=\"person\", help=\"Label name to detect.\")\n@click.option(\"-o\", \"--output\", default=None, help=\"File to save csv of data\")\n@click.option(\"--debug-path\", default=None, help=\"Path to output frames for debugging.\")\ndef process(path, label, output, debug_path):\n    clips = []\n    if os.path.isdir(path):\n        files = os.listdir(path)\n        files.sort()\n        clips = [os.path.join(path, file) for file in files]\n    elif os.path.isfile(path):\n        clips.append(path)\n\n    json_config = {\n        \"mqtt\": {\"enabled\": False},\n        \"detectors\": {\"coral\": {\"type\": \"edgetpu\", \"device\": \"usb\"}},\n        \"cameras\": {\n            \"camera\": {\n                \"ffmpeg\": {\n                    \"inputs\": [\n                        {\n                            \"path\": \"path.mp4\",\n                            \"global_args\": \"-hide_banner\",\n                            \"input_args\": \"-loglevel info\",\n                            \"roles\": [\"detect\"],\n                        }\n                    ]\n                },\n                \"record\": {\"enabled\": False},\n            }\n        },\n    }\n\n    object_detector = LocalObjectDetector(labels=\"/labelmap.txt\")\n\n    results = []\n    for c in clips:\n        logger.info(c)\n        frame_shape = get_frame_shape(c)\n\n        json_config[\"cameras\"][\"camera\"][\"detect\"] = {\n            \"height\": frame_shape[0],\n            \"width\": frame_shape[1],\n        }\n        json_config[\"cameras\"][\"camera\"][\"ffmpeg\"][\"inputs\"][0][\"path\"] = c\n\n        frigate_config = FrigateConfig(**json_config)\n        process_clip = ProcessClip(c, frame_shape, frigate_config)\n        process_clip.load_frames()\n        process_clip.process_frames(object_detector, objects_to_track=[label])\n\n        results.append((c, process_clip.stats(debug_path)))\n\n    positive_count = sum(\n        1 for result in results if result[1][\"true_positive_objects\"] > 0\n    )\n    print(\n        f\"Objects were detected in {positive_count}/{len(results)}({positive_count/len(results)*100:.2f}%) clip(s).\"\n    )\n\n    if output:\n        # now we will open a file for writing\n        data_file = open(output, \"w\")\n\n        # create the csv writer object\n        csv_writer = csv.writer(data_file)\n\n        # Counter variable used for writing\n        # headers to the CSV file\n        count = 0\n\n        for result in results:\n            if count == 0:\n                # Writing headers of CSV file\n                header = [\"file\"] + list(result[1].keys())\n                csv_writer.writerow(header)\n                count += 1\n\n            # Writing data of CSV file\n            csv_writer.writerow([result[0]] + list(result[1].values()))\n\n        data_file.close()\n\n\nif __name__ == \"__main__\":\n    process()\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.0634765625,
          "content": "[tool.ruff]\nignore = [\"E501\",\"E711\",\"E712\"]\nextend-select = [\"I\"]"
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}