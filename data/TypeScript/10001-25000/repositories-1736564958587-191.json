{
  "metadata": {
    "timestamp": 1736564958587,
    "page": 191,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/brotli",
      "stars": 13714,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bazelignore",
          "type": "blob",
          "size": 0.060546875,
          "content": "# Exclude Bazel roots (workspaces)\nc/fuzz\ngo\njava\njs\nresearch\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.64453125,
          "content": "# http://editorconfig.org\n# Consistent coding style across different editors.\n\n# Top-most file\nroot = true\n\n# Global styles:\n#   - indent 2 spaces\n#   - add final new line\n#   - trim trailing whitespace\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n# BUILD:\n#   - indent 4 spaces\n[BUILD]\nindent_size = 4\n\n# Makefile:\n#   - indent 1 tab\n[Makefile]\nindent_size = tab\nindent_style = tab\n\n# Markdown:\n#   - indent 4 spaces\n#   - trailing whitespace is significant\n[*.md]\nindent_size = 4\ntrim_trailing_whitespace = false\n\n# Python\n#   - indent 4 spaces\n[*.py]\nindent_size = 4\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.1435546875,
          "content": "tests/testdata/* binary\n\n# Exclude everything\n**/** export-ignore\n\n# Add top-level files\n.bazelignore !export-ignore\nBUILD.bazel !export-ignore\nCHANGELOG.md !export-ignore\nCMakeLists.txt !export-ignore\nCONTRIBUTING.md !export-ignore\nLICENSE !export-ignore\nMANIFEST.in !export-ignore\nREADME !export-ignore\nREADME.md !export-ignore\nSECURITY.md !export-ignore\nsetup.cfg !export-ignore\nsetup.py !export-ignore\nWORKSPACE.bazel !export-ignore\n\n# Add sources\nc !export-ignore\nc/** !export-ignore\nc/common/dictionary.bin* export-ignore\nc/fuzz export-ignore\n\n# Add man pages\ndocs !export-ignore\ndocs/** !export-ignore\ndocs/brotli-comparison-study-2015-09-22.pdf export-ignore\n\n# Add python bindings + tests\npython !export-ignore\npython/** !export-ignore\n\n# Add more build files.\nscripts !export-ignore\nscripts/download_testdata.sh !export-ignore\nscripts/libbrotli*.pc.in !export-ignore\n\n# Add testdata\ntests !export-ignore\ntests/*.sh !export-ignore\ntests/*.cmake !export-ignore\ntests/testdata !export-ignore\ntests/testdata/empty !export-ignore\ntests/testdata/empty.compressed !export-ignore\ntests/testdata/ukkonooa !export-ignore\ntests/testdata/ukkonooa.compressed !export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.146484375,
          "content": "# C\n*.d\n*.o\n*.obj\nbin/\nbuildfiles/\n**/obj/\ndist/\n**/bazel-*\n\n# Python\n__pycache__/\n*.py[cod]\n*.so\n*.egg-info/\n\n# Tests\n*.txt.uncompressed\n*.br\n*.unbr\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 2.619140625,
          "content": "# Description:\n#   Brotli is a generic-purpose lossless compression algorithm.\n\npackage(\n    default_visibility = [\"//visibility:public\"],\n)\n\nlicenses([\"notice\"])  # MIT\n\nexports_files([\"LICENSE\"])\n\nconfig_setting(\n    name = \"clang-cl\",\n    flag_values = {\n        \"@bazel_tools//tools/cpp:compiler\": \"clang-cl\",\n    },\n    visibility = [\"//visibility:public\"],\n)\n\nconfig_setting(\n    name = \"msvc\",\n    flag_values = {\n        \"@bazel_tools//tools/cpp:compiler\": \"msvc-cl\",\n    },\n    visibility = [\"//visibility:public\"],\n)\n\nSTRICT_C_OPTIONS = select({\n    \":msvc\": [],\n    \":clang-cl\": [\n        \"/W4\",\n        \"-Wconversion\",\n        \"-Wlong-long\",\n        \"-Wmissing-declarations\",\n        \"-Wmissing-prototypes\",\n        \"-Wno-strict-aliasing\",\n        \"-Wshadow\",\n        \"-Wsign-compare\",\n        \"-Wno-sign-conversion\",\n    ],\n    \"//conditions:default\": [\n        \"--pedantic-errors\",\n        \"-Wall\",\n        \"-Wconversion\",\n        \"-Werror\",\n        \"-Wextra\",\n        \"-Wlong-long\",\n        \"-Wmissing-declarations\",\n        \"-Wmissing-prototypes\",\n        \"-Wno-strict-aliasing\",\n        \"-Wshadow\",\n        \"-Wsign-compare\",\n    ],\n})\n\nfilegroup(\n    name = \"public_headers\",\n    srcs = glob([\"c/include/brotli/*.h\"]),\n)\n\nfilegroup(\n    name = \"common_headers\",\n    srcs = glob([\"c/common/*.h\"]),\n)\n\nfilegroup(\n    name = \"common_sources\",\n    srcs = glob([\"c/common/*.c\"]),\n)\n\nfilegroup(\n    name = \"dec_headers\",\n    srcs = glob([\"c/dec/*.h\"]),\n)\n\nfilegroup(\n    name = \"dec_sources\",\n    srcs = glob([\"c/dec/*.c\"]),\n)\n\nfilegroup(\n    name = \"enc_headers\",\n    srcs = glob([\"c/enc/*.h\"]),\n)\n\nfilegroup(\n    name = \"enc_sources\",\n    srcs = glob([\"c/enc/*.c\"]),\n)\n\ncc_library(\n    name = \"brotli_inc\",\n    hdrs = [\":public_headers\"],\n    copts = STRICT_C_OPTIONS,\n    strip_include_prefix = \"c/include\",\n)\n\ncc_library(\n    name = \"brotlicommon\",\n    srcs = [\":common_sources\"],\n    hdrs = [\":common_headers\"],\n    copts = STRICT_C_OPTIONS,\n    deps = [\":brotli_inc\"],\n)\n\ncc_library(\n    name = \"brotlidec\",\n    srcs = [\":dec_sources\"],\n    hdrs = [\":dec_headers\"],\n    copts = STRICT_C_OPTIONS,\n    deps = [\":brotlicommon\"],\n)\n\ncc_library(\n    name = \"brotlienc\",\n    srcs = [\":enc_sources\"],\n    hdrs = [\":enc_headers\"],\n    copts = STRICT_C_OPTIONS,\n    linkopts = select({\n        \":clang-cl\": [],\n        \":msvc\": [],\n        \"//conditions:default\": [\"-lm\"],\n    }),\n    deps = [\":brotlicommon\"],\n)\n\ncc_binary(\n    name = \"brotli\",\n    srcs = [\"c/tools/brotli.c\"],\n    copts = STRICT_C_OPTIONS,\n    linkstatic = 1,\n    deps = [\n        \":brotlidec\",\n        \":brotlienc\",\n    ],\n)\n\nfilegroup(\n    name = \"dictionary\",\n    srcs = [\"c/common/dictionary.bin\"],\n)\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.5439453125,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Unreleased\n\n## [1.1.0] - 2023-08-28\n\n### Added\n - decoder: `BrotliDecoderAttachDictionary`\n - decoder: `BrotliDecoderOnFinish` callback behind `BROTLI_REPORTING`\n - decoder: `BrotliDecoderSetMetadataCallbacks`\n - encoder: `BrotliEncoderPrepareDictionary`,\n            `BrotliEncoderDestroyPreparedDictionary`,\n            `BrotliEncoderAttachPreparedDictionary`\n - decoder: `BrotliEncoderOnFinish` callback behind `BROTLI_REPORTING`\n - common: `BrotliSharedDictionaryCreateInstance`,\n           `BrotliSharedDictionaryDestroyInstance`,\n           `BrotliSharedDictionaryAttach`\n - CLI: `--dictionary` option\n - java: encoder wrapper: `Parameters.mode`\n - java: `Brotli{Input|Output}Stream.attachDictionary`\n - java: wrapper: partial byte array input\n - typescript: decoder (transpiled from Java)\n\n### Removed\n - build: `BROTLI_BUILD_PORTABLE` option\n\n### Fixed\n - java: JNI decoder failed sometimes on power of 2 payloads\n\n### Improved\n - java / js: smaller decoder footprint\n - decoder: faster decoding\n - encoder: faster encoding\n - encoder: smaller stack frames\n\n\n## [1.0.9] - 2020-08-27\n\nRe-release of 1.0.8.\n\n\n## [1.0.8] - 2020-08-27\n\n### SECURITY\n - CVE-2020-8927: potential overflow when input chunk is >2GiB\n\n### Added\n - encoder: `BROTLI_PARAM_STREAM_OFFSET`\n\n### Improved\n - CLI: better reporting\n - CLI: workaround for \"lying feof\"\n - java: faster decoding\n - java: support \"large window\"\n - encoder: use less memory\n - release: filter sources for the tarball\n\n\n## [1.0.7] - 2018-10-23\n\n### Improved\n - decoder: faster decoding on ARM CPU\n\n\n## [1.0.6] - 2018-09-13\n\n### Fixed\n - build: AutoMake and CMake build\n - java: JDK 8<->9 incompatibility\n\n\n## [1.0.5] - 2018-06-27\n\n### Added\n - scripts: extraction of static dictionary from RFC\n\n### Improved\n - encoder: better compression at quality 1\n - encoder: better compression with \"large window\"\n\n\n## [1.0.4] - 2018-03-29\n\n### Added\n - encoder: `BROTLI_PARAM_NPOSTFIX`, `BROTLI_PARAM_NDIRECT`\n - CLI: `--large_window` option\n\n### Improved\n - encoder: better compression\n\n\n## [1.0.3] - 2018-03-02\n\n### Added\n - decoder: `BROTLI_DECODER_PARAM_LARGE_WINDOW` enum\n - encoder: `BROTLI_PARAM_LARGE_WINDOW` enum\n - java: `BrotliInputStream.setEager`\n\n### Fixed\n - build: AutoMake build in some environments\n - encoder: fix one-shot q=10 1-byte input compression\n\n### Improved\n - encoder: better font compression\n\n\n## [1.0.2] - 2017-11-28\n\n### Added\n - build: AutoMake\n - research: better dictionary generators\n\n\n## [1.0.1] - 2017-09-22\n\n### Changed\n - clarifications in `README.md`\n\n\n## [1.0.0] - 2017-09-20\n\n### Added\n - decoder: `BrotliDecoderSetParameter`\n - csharp: decoder (transpiled from Java)\n - java: JNI wrappers\n - javascript: decoder (transpiled from Java)\n - python: streaming decompression\n - research: dictionary generator\n\n### Changed\n - CLI: rename `bro` to `brotli`\n\n### Removed\n - decoder: `BrotliDecoderSetCustomDictionary`\n - encoder: `BrotliEncoderSetCustomDictionary`\n\n### Improved\n - java: faster decoding\n - encoder: faster compression\n\n\n## [0.6.0] - 2017-04-10\n\n### Added\n - CLI: `--no-copy-stat option\n - java: pure java decoder\n - build: fuzzers\n - research: `brotlidump` tool to explore brotli streams\n - go: wrapper\n\n### Removed\n - decoder: API with plain `Brotli` prefix\n\n### Deprecated\n - encoder: `BrotliEncoderInputBlockSize`, `BrotliEncoderCopyInputToRingBuffer`,\n            `BrotliEncoderWriteData`\n\n### Improved\n - encoder: faster compression\n - encoder: denser compression\n - decoder: faster decompression\n - python: release GIL\n - python: use zero-copy API\n\n\n## [0.5.2] - 2016-08-11\n\n### Added\n - common: `BROTLI_BOOL`, `BROTLI_TRUE`, `BROTLI_FALSE`\n - decoder: API with `BrotliDecoder` prefix instead of plain `Brotli`\n - build: Bazel, CMake\n\n### Deprecated\n - decoder: API with plain `Brotli` prefix\n\n### Changed\n - boolean argument / result types are re-branded as `BROTLI_BOOL`\n\n### Improved\n - build: reduced amount of warnings in various build environments\n - encoder: faster compression\n - encoder: lower memory usage\n\n\n## [0.5.0] - 2016-06-15\n\n### Added\n - common: library has been assembled from shared parts of decoder and encoder\n - encoder: C API\n\n### Removed\n - encoder: C++ API\n\n\n## [0.4.0] - 2016-06-14\n\n### Added\n - encoder: faster compression modes (quality 0 and 1)\n - decoder: `BrotliGetErrorCode`, `BrotliErrorString` and\n            `BROTLI_ERROR_CODES_LIST`\n\n### Removed\n - decoder: deprecated streaming API (using `BrotliInput`)\n\n### Fixed\n - decoder: possible pointer underflow\n\n### Improved\n - encoder: faster compression\n\n\n## [0.3.0] - 2015-12-22\n\n### LICENSE\nLicense have been upgraded to more permissive MIT.\n\n### Added\n - CLI: `--window` option\n - `tools/version.h` file\n - decoder: low level streaming API\n - decoder: custom memory manager API\n\n### Deprecated\n - decoder: streaming API using `BrotliInput` struct\n\n### Fixed\n - decoder: processing of uncompressed blocks\n - encoder: possible division by zero\n\n### Improved\n - encoder: faster decompression\n - build: more portable builds for various CPU architectures\n\n\n## [0.2.0] - 2015-09-01\n\n### Added\n - CLI: `--verbose` and `--repeat` options\n\n### Fixed\n - decoder: processing of uncompressed blocks\n - encoder: block stitching on quality 10 / 11\n\n### Improved\n - build: CI/CD integration\n - build: better test coverage\n - encoder: better compression of UTF-8 content\n - encoder: faster decompression\n\n\n## [0.1.0] - 2015-08-11\n\nInitial release.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 12.6669921875,
          "content": "# Available CMake versions:\n#  - Ubuntu  20.04 LTS   : 3.16.3\n#  - Solaris 11.4 SRU 15 : 3.15\ncmake_minimum_required(VERSION 3.15)\n\n# Since this project's version is loaded from other files, this policy\n# will help suppress the warning generated by cmake.\n# This policy is set because we can't provide \"VERSION\" in \"project\" command.\n# Use `cmake --help-policy CMP0048` for more information.\ncmake_policy(SET CMP0048 NEW)\nproject(brotli C)\n\noption(BUILD_SHARED_LIBS \"Build shared libraries\" ON)\nset(BROTLI_BUILD_TOOLS ON CACHE BOOL \"Build/install CLI tools\")\n\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  message(STATUS \"Setting build type to Release as none was specified.\")\n  set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"Choose the type of build\" FORCE)\nelse()\n  message(STATUS \"Build type is '${CMAKE_BUILD_TYPE}'\")\nendif()\n\ninclude(CheckCSourceCompiles)\ncheck_c_source_compiles(\n  \"#if defined(__EMSCRIPTEN__)\n   int main() {return 0;}\n   #endif\"\n  BROTLI_EMSCRIPTEN\n)\nif (BROTLI_EMSCRIPTEN)\n  message(\"-- Compiler is EMSCRIPTEN\")\nelse()\n  message(\"-- Compiler is not EMSCRIPTEN\")\nendif()\n\n# If Brotli is being bundled in another project, we don't want to\n# install anything.  However, we want to let people override this, so\n# we'll use the BROTLI_BUNDLED_MODE variable to let them do that; just\n# set it to OFF in your project before you add_subdirectory(brotli).\nget_directory_property(BROTLI_PARENT_DIRECTORY PARENT_DIRECTORY)\nif(NOT DEFINED BROTLI_BUNDLED_MODE)\n  # Bundled mode hasn't been set one way or the other, set the default\n  # depending on whether or not we are the top-level project.\n  if(BROTLI_PARENT_DIRECTORY)\n    set(BROTLI_BUNDLED_MODE ON)\n  else()\n    set(BROTLI_BUNDLED_MODE OFF)\n  endif()\nendif()\nmark_as_advanced(BROTLI_BUNDLED_MODE)\n\ninclude(GNUInstallDirs)\n\n# Reads macro from .h file; it is expected to be a single-line define.\nfunction(read_macro PATH MACRO OUTPUT)\n  file(STRINGS ${PATH} _line REGEX \"^#define +${MACRO} +(.+)$\")\n  string(REGEX REPLACE \"^#define +${MACRO} +(.+)$\" \"\\\\1\" _val \"${_line}\")\n  set(${OUTPUT} ${_val} PARENT_SCOPE)\nendfunction(read_macro)\n\n# Version information\nread_macro(\"c/common/version.h\" \"BROTLI_VERSION_MAJOR\" BROTLI_VERSION_MAJOR)\nread_macro(\"c/common/version.h\" \"BROTLI_VERSION_MINOR\" BROTLI_VERSION_MINOR)\nread_macro(\"c/common/version.h\" \"BROTLI_VERSION_PATCH\" BROTLI_VERSION_PATCH)\nset(BROTLI_VERSION \"${BROTLI_VERSION_MAJOR}.${BROTLI_VERSION_MINOR}.${BROTLI_VERSION_PATCH}\")\nmark_as_advanced(BROTLI_VERSION BROTLI_VERSION_MAJOR BROTLI_VERSION_MINOR BROTLI_VERSION_PATCH)\n\n# ABI Version information\nread_macro(\"c/common/version.h\" \"BROTLI_ABI_CURRENT\" BROTLI_ABI_CURRENT)\nread_macro(\"c/common/version.h\" \"BROTLI_ABI_REVISION\" BROTLI_ABI_REVISION)\nread_macro(\"c/common/version.h\" \"BROTLI_ABI_AGE\" BROTLI_ABI_AGE)\nmath(EXPR BROTLI_ABI_COMPATIBILITY \"${BROTLI_ABI_CURRENT} - ${BROTLI_ABI_AGE}\")\nmark_as_advanced(BROTLI_ABI_CURRENT BROTLI_ABI_REVISION BROTLI_ABI_AGE BROTLI_ABI_COMPATIBILITY)\n\nif (ENABLE_SANITIZER)\n  set(CMAKE_C_FLAGS \" ${CMAKE_C_FLAGS} -fsanitize=${ENABLE_SANITIZER}\")\n  set(CMAKE_CXX_FLAGS \" ${CMAKE_CXX_FLAGS} -fsanitize=${ENABLE_SANITIZER}\")\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=${ENABLE_SANITIZER}\")\nendif ()\n\ninclude(CheckLibraryExists)\nset(LIBM_LIBRARY)\nCHECK_LIBRARY_EXISTS(m log2 \"\" HAVE_LIB_M)\nif(HAVE_LIB_M)\n  set(LIBM_LIBRARY \"m\")\nendif()\n\nset(BROTLI_INCLUDE_DIRS \"${CMAKE_CURRENT_SOURCE_DIR}/c/include\")\nmark_as_advanced(BROTLI_INCLUDE_DIRS)\n\nset(BROTLI_LIBRARIES_CORE brotlienc brotlidec brotlicommon)\nset(BROTLI_LIBRARIES ${BROTLI_LIBRARIES_CORE} ${LIBM_LIBRARY})\nmark_as_advanced(BROTLI_LIBRARIES)\n\nif(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n  add_definitions(-DOS_LINUX)\nelseif(${CMAKE_SYSTEM_NAME} MATCHES \"FreeBSD\")\n  add_definitions(-DOS_FREEBSD)\nelseif(${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n  add_definitions(-DOS_MACOSX)\n  set(CMAKE_MACOS_RPATH TRUE)\n  set(CMAKE_INSTALL_NAME_DIR \"${CMAKE_INSTALL_FULL_LIBDIR}\")\nendif()\n\nif(BROTLI_EMSCRIPTEN)\n  set(BUILD_SHARED_LIBS OFF)\nendif()\n\nfile(GLOB_RECURSE BROTLI_COMMON_SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} c/common/*.c)\nadd_library(brotlicommon ${BROTLI_COMMON_SOURCES})\n\nfile(GLOB_RECURSE BROTLI_DEC_SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} c/dec/*.c)\nadd_library(brotlidec ${BROTLI_DEC_SOURCES})\n\nfile(GLOB_RECURSE BROTLI_ENC_SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} c/enc/*.c)\nadd_library(brotlienc ${BROTLI_ENC_SOURCES})\n\n# Older CMake versions does not understand INCLUDE_DIRECTORIES property.\ninclude_directories(${BROTLI_INCLUDE_DIRS})\n\nif(BUILD_SHARED_LIBS)\n  foreach(lib ${BROTLI_LIBRARIES_CORE})\n    target_compile_definitions(${lib} PUBLIC \"BROTLI_SHARED_COMPILATION\" )\n    string(TOUPPER \"${lib}\" LIB)\n    set_target_properties (${lib} PROPERTIES DEFINE_SYMBOL \"${LIB}_SHARED_COMPILATION\")\n  endforeach()\nendif()\n\nforeach(lib ${BROTLI_LIBRARIES_CORE})\n  target_link_libraries(${lib} ${LIBM_LIBRARY})\n  set_property(TARGET ${lib} APPEND PROPERTY INCLUDE_DIRECTORIES ${BROTLI_INCLUDE_DIRS})\n  set_target_properties(${lib} PROPERTIES\n    VERSION \"${BROTLI_ABI_COMPATIBILITY}.${BROTLI_ABI_AGE}.${BROTLI_ABI_REVISION}\"\n    SOVERSION \"${BROTLI_ABI_COMPATIBILITY}\")\n  if(NOT BROTLI_EMSCRIPTEN)\n    set_target_properties(${lib} PROPERTIES POSITION_INDEPENDENT_CODE TRUE)\n  endif()\n  set_property(TARGET ${lib} APPEND PROPERTY INTERFACE_INCLUDE_DIRECTORIES \"$<BUILD_INTERFACE:${BROTLI_INCLUDE_DIRS}>\")\nendforeach()\n\nif(NOT BROTLI_EMSCRIPTEN)\n  target_link_libraries(brotlidec brotlicommon)\n  target_link_libraries(brotlienc brotlicommon)\nendif()\n\n# For projects stuck on older versions of CMake, this will set the\n# BROTLI_INCLUDE_DIRS and BROTLI_LIBRARIES variables so they still\n# have a relatively easy way to use Brotli:\n#\n#   include_directories(${BROTLI_INCLUDE_DIRS})\n#   target_link_libraries(foo ${BROTLI_LIBRARIES})\nif(BROTLI_PARENT_DIRECTORY)\n  set(BROTLI_INCLUDE_DIRS \"${BROTLI_INCLUDE_DIRS}\" PARENT_SCOPE)\n  set(BROTLI_LIBRARIES \"${BROTLI_LIBRARIES}\" PARENT_SCOPE)\nendif()\n\n# Build the brotli executable\nif(BROTLI_BUILD_TOOLS)\n  add_executable(brotli c/tools/brotli.c)\n  target_link_libraries(brotli ${BROTLI_LIBRARIES})\nendif()\n\n# Installation\nif(NOT BROTLI_BUNDLED_MODE)\n  if (BROTLI_BUILD_TOOLS)\n    install(\n      TARGETS brotli\n      RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n    )\n  endif()\n\n  install(\n    TARGETS ${BROTLI_LIBRARIES_CORE}\n    ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n    LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n    RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n  )\n\n  install(\n    DIRECTORY ${BROTLI_INCLUDE_DIRS}/brotli\n    DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n  )\nendif()  # BROTLI_BUNDLED_MODE\n\n# Tests\n\n# Integration tests, those depend on `brotli` binary\nif(NOT BROTLI_DISABLE_TESTS AND BROTLI_BUILD_TOOLS)\n  # If we're targeting Windows but not running on Windows, we need Wine\n  # to run the tests...\n  if(WIN32 AND NOT CMAKE_HOST_WIN32)\n    find_program(BROTLI_WRAPPER NAMES wine)\n\n    if(NOT BROTLI_WRAPPER)\n      message(STATUS \"wine not found, disabling tests\")\n      set(BROTLI_DISABLE_TESTS TRUE)\n    endif()\n  endif()\n  # If our compiler is a cross-compiler that we know about (arm/aarch64),\n  # then we need to use qemu to execute the tests.\n  if (\"${CMAKE_C_COMPILER}\" MATCHES \"^.*/arm-linux-gnueabihf-.*$\")\n    message(STATUS \"Detected arm-linux-gnueabihf cross-compilation\")\n    set(BROTLI_WRAPPER \"qemu-arm\")\n    set(BROTLI_WRAPPER_LD_PREFIX \"/usr/arm-linux-gnueabihf\")\n  endif()\n\n  if (\"${CMAKE_C_COMPILER}\" MATCHES \"^.*/arm-linux-gnueabi-.*$\")\n    message(STATUS \"Detected arm-linux-gnueabi cross-compilation\")\n    set(BROTLI_WRAPPER \"qemu-arm\")\n    set(BROTLI_WRAPPER_LD_PREFIX \"/usr/arm-linux-gnueabi\")\n  endif()\n\n  if (\"${CMAKE_C_COMPILER}\" MATCHES \"^.*/aarch64-linux-gnu-.*$\")\n    message(STATUS \"Detected aarch64-linux-gnu cross-compilation\")\n    set(BROTLI_WRAPPER \"qemu-aarch64\")\n    set(BROTLI_WRAPPER_LD_PREFIX \"/usr/aarch64-linux-gnu\")\n  endif()\n\n  include(CTest)\n  enable_testing()\n\n  set(ROUNDTRIP_INPUTS\n    tests/testdata/alice29.txt\n    tests/testdata/asyoulik.txt\n    tests/testdata/lcet10.txt\n    tests/testdata/plrabn12.txt\n    c/enc/encode.c\n    c/common/dictionary.h\n    c/dec/decode.c)\n\n  foreach(INPUT ${ROUNDTRIP_INPUTS})\n    get_filename_component(OUTPUT_NAME \"${INPUT}\" NAME)\n\n    set(OUTPUT_FILE \"${CMAKE_CURRENT_BINARY_DIR}/${OUTPUT_NAME}\")\n    set(INPUT_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/${INPUT}\")\n\n    if (EXISTS \"${INPUT_FILE}\")\n      foreach(quality 1 6 9 11)\n        add_test(NAME \"${BROTLI_TEST_PREFIX}roundtrip/${INPUT}/${quality}\"\n          COMMAND \"${CMAKE_COMMAND}\"\n            -DBROTLI_WRAPPER=${BROTLI_WRAPPER}\n            -DBROTLI_WRAPPER_LD_PREFIX=${BROTLI_WRAPPER_LD_PREFIX}\n            -DBROTLI_CLI=$<TARGET_FILE:brotli>\n            -DQUALITY=${quality}\n            -DINPUT=${INPUT_FILE}\n            -DOUTPUT=${OUTPUT_FILE}.${quality}\n            -P ${CMAKE_CURRENT_SOURCE_DIR}/tests/run-roundtrip-test.cmake)\n      endforeach()\n    else()\n      message(NOTICE \"Test file ${INPUT} does not exist; OK on tarball builds; consider running scripts/download_testdata.sh before configuring.\")\n    endif()\n  endforeach()\n\n  file(GLOB_RECURSE\n    COMPATIBILITY_INPUTS\n    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}\n    tests/testdata/*.compressed*)\n\n  foreach(INPUT ${COMPATIBILITY_INPUTS})\n    add_test(NAME \"${BROTLI_TEST_PREFIX}compatibility/${INPUT}\"\n      COMMAND \"${CMAKE_COMMAND}\"\n        -DBROTLI_WRAPPER=${BROTLI_WRAPPER}\n        -DBROTLI_WRAPPER_LD_PREFIX=${BROTLI_WRAPPER_LD_PREFIX}\n        -DBROTLI_CLI=$<TARGET_FILE:brotli>\n        -DINPUT=${CMAKE_CURRENT_SOURCE_DIR}/${INPUT}\n        -P ${CMAKE_CURRENT_SOURCE_DIR}/tests/run-compatibility-test.cmake)\n  endforeach()\nendif()  # BROTLI_DISABLE_TESTS\n\n# Generate a pkg-config files\n\nfunction(generate_pkg_config_path outvar path)\n  string(LENGTH \"${path}\" path_length)\n\n  set(path_args ${ARGV})\n  list(REMOVE_AT path_args 0 1)\n  list(LENGTH path_args path_args_remaining)\n\n  set(\"${outvar}\" \"${path}\")\n\n  while(path_args_remaining GREATER 1)\n    list(GET path_args 0 name)\n    list(GET path_args 1 value)\n\n    get_filename_component(value_full \"${value}\" ABSOLUTE)\n    string(LENGTH \"${value}\" value_length)\n\n    if(path_length EQUAL value_length AND path STREQUAL value)\n      set(\"${outvar}\" \"\\${${name}}\")\n      break()\n    elseif(path_length GREATER value_length)\n      # We might be in a subdirectory of the value, but we have to be\n      # careful about a prefix matching but not being a subdirectory\n      # (for example, /usr/lib64 is not a subdirectory of /usr/lib).\n      # We'll do this by making sure the next character is a directory\n      # separator.\n      string(SUBSTRING \"${path}\" ${value_length} 1 sep)\n      if(sep STREQUAL \"/\")\n        string(SUBSTRING \"${path}\" 0 ${value_length} s)\n        if(s STREQUAL value)\n          string(SUBSTRING \"${path}\" \"${value_length}\" -1 suffix)\n          set(\"${outvar}\" \"\\${${name}}${suffix}\")\n          break()\n        endif()\n      endif()\n    endif()\n\n    list(REMOVE_AT path_args 0 1)\n    list(LENGTH path_args path_args_remaining)\n  endwhile()\n\n  set(\"${outvar}\" \"${${outvar}}\" PARENT_SCOPE)\nendfunction(generate_pkg_config_path)\n\nfunction(transform_pc_file INPUT_FILE OUTPUT_FILE VERSION)\n  file(READ ${INPUT_FILE} TEXT)\n\n  set(PREFIX \"${CMAKE_INSTALL_PREFIX}\")\n  string(REGEX REPLACE \"@prefix@\" \"${PREFIX}\" TEXT ${TEXT})\n  string(REGEX REPLACE \"@exec_prefix@\" \"${PREFIX}\" TEXT ${TEXT})\n\n  generate_pkg_config_path(LIBDIR \"${CMAKE_INSTALL_FULL_LIBDIR}\" prefix \"${PREFIX}\")\n  string(REGEX REPLACE \"@libdir@\" \"${LIBDIR}\" TEXT ${TEXT})\n\n  generate_pkg_config_path(INCLUDEDIR \"${CMAKE_INSTALL_FULL_INCLUDEDIR}\" prefix \"${PREFIX}\")\n  string(REGEX REPLACE \"@includedir@\" \"${INCLUDEDIR}\" TEXT ${TEXT})\n\n  string(REGEX REPLACE \"@PACKAGE_VERSION@\" \"${VERSION}\" TEXT ${TEXT})\n\n  file(WRITE ${OUTPUT_FILE} ${TEXT})\nendfunction()\n\ntransform_pc_file(\"scripts/libbrotlicommon.pc.in\" \"${CMAKE_CURRENT_BINARY_DIR}/libbrotlicommon.pc\" \"${BROTLI_VERSION}\")\n\ntransform_pc_file(\"scripts/libbrotlidec.pc.in\" \"${CMAKE_CURRENT_BINARY_DIR}/libbrotlidec.pc\" \"${BROTLI_VERSION}\")\n\ntransform_pc_file(\"scripts/libbrotlienc.pc.in\" \"${CMAKE_CURRENT_BINARY_DIR}/libbrotlienc.pc\" \"${BROTLI_VERSION}\")\n\nif(NOT BROTLI_BUNDLED_MODE)\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/libbrotlicommon.pc\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/libbrotlidec.pc\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/libbrotlienc.pc\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\nendif()  # BROTLI_BUNDLED_MODE\n\nif (BROTLI_BUILD_TOOLS)\n  install(FILES \"docs/brotli.1\"\n    DESTINATION \"${CMAKE_INSTALL_FULL_MANDIR}/man1\")\nendif()\n\ninstall(FILES docs/constants.h.3 docs/decode.h.3 docs/encode.h.3 docs/types.h.3\n  DESTINATION \"${CMAKE_INSTALL_FULL_MANDIR}/man3\")\n\nif (ENABLE_COVERAGE STREQUAL \"yes\")\n  setup_target_for_coverage(coverage test coverage)\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.5947265625,
          "content": "Want to contribute? Great! First, read this page (including the small print at\nthe end).\n\n### Before you contribute\nBefore we can use your code, you must sign the\n[Google Individual Contributor License Agreement]\n(https://cla.developers.google.com/about/google-individual)\n(CLA), which you can do online. The CLA is necessary mainly because you own the\ncopyright to your changes, even after your contribution becomes part of our\ncodebase, so we need your permission to use and distribute your code. We also\nneed to be sure of various other things—for instance that you'll tell us if you\nknow that your code infringes on other people's patents. You don't have to sign\nthe CLA until after you've submitted your code for review and a member has\napproved it, but you must do it before we can put your code into our codebase.\nBefore you start working on a larger contribution, you should get in touch with\nus first through the issue tracker with your idea so that we can help out and\npossibly guide you. Coordinating up front makes it much easier to avoid\nfrustration later on.\n\n### Code reviews\nAll submissions, including submissions by project members, require review. We\nuse Github pull requests for this purpose.\n\n### Code style\nCode should follow applicable formatting and style guides described in\n[Google Style Guides](https://google.github.io/styleguide/). C code should be\nC89 compatible.\n\n### The small print\nContributions made by corporations are covered by a different agreement than\nthe one above, the [Software Grant and Corporate Contributor License Agreement]\n(https://cla.developers.google.com/about/google-corporate).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "Copyright (c) 2009, 2010, 2013-2016 by the Brotli Authors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.3994140625,
          "content": "include CONTRIBUTING.md\ninclude c/common/*.c\ninclude c/common/*.h\ninclude c/dec/*.c\ninclude c/dec/*.h\ninclude c/enc/*.c\ninclude c/enc/*.h\ninclude c/include/brotli/*.h\ninclude LICENSE\ninclude MANIFEST.in\ninclude python/_brotli.cc\ninclude python/bro.py\ninclude python/brotli.py\ninclude python/README.md\ninclude python/tests/*\ninclude README.md\ninclude setup.py\ninclude tests/testdata/*\ninclude c/tools/brotli.c\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 0.287109375,
          "content": "# Copyright 2025 The Brotli Authors. All rights reserved.\n#\n# Distributed under MIT license.\n# See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n\n\"\"\"Brotli reference implementation\"\"\"\n\nmodule(\n    name = \"brotli\",\n    version = \"1.1.0\",\n    repo_name = \"org_brotli\",\n)\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 0.63671875,
          "content": "BROTLI DATA COMPRESSION LIBRARY\n\nBrotli is a generic-purpose lossless compression algorithm that compresses data\nusing a combination of a modern variant of the LZ77 algorithm, Huffman coding\nand 2nd order context modeling, with a compression ratio comparable to the best\ncurrently available general-purpose compression methods. It is similar in speed\nwith deflate but offers more dense compression.\n\nThe specification of the Brotli Compressed Data Format is defined in RFC 7932\nhttps://tools.ietf.org/html/rfc7932\n\nBrotli is open-sourced under the MIT License, see the LICENSE file.\n\nBrotli mailing list:\nhttps://groups.google.com/forum/#!forum/brotli\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.0029296875,
          "content": "<p align=\"center\">\n  <img src=\"https://github.com/google/brotli/actions/workflows/build_test.yml/badge.svg\" alt=\"GitHub Actions Build Status\" href=\"https://github.com/google/brotli/actions?query=branch%3Amaster\">\n  <img src=\"https://oss-fuzz-build-logs.storage.googleapis.com/badges/brotli.svg\" alt=\"Fuzzing Status\" href=\"https://oss-fuzz-build-logs.storage.googleapis.com/index.html#brotli\">\n</p>\n<p align=\"center\"><img src=\"https://brotli.org/brotli.svg\" alt=\"Brotli\" width=\"64\"></p>\n\n### Introduction\n\nBrotli is a generic-purpose lossless compression algorithm that compresses data\nusing a combination of a modern variant of the LZ77 algorithm, Huffman coding\nand 2nd order context modeling, with a compression ratio comparable to the best\ncurrently available general-purpose compression methods. It is similar in speed\nwith deflate but offers more dense compression.\n\nThe specification of the Brotli Compressed Data Format is defined in [RFC 7932](https://tools.ietf.org/html/rfc7932).\n\nBrotli is open-sourced under the MIT License, see the LICENSE file.\n\n> **Please note:** brotli is a \"stream\" format; it does not contain\n> meta-information, like checksums or uncompresssed data length. It is possible\n> to modify \"raw\" ranges of the compressed stream and the decoder will not\n> notice that.\n\n### Build instructions\n\n#### Vcpkg\n\nYou can download and install brotli using the [vcpkg](https://github.com/Microsoft/vcpkg/) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install brotli\n\nThe brotli port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n#### Bazel\n\nSee [Bazel](http://www.bazel.build/)\n\n#### CMake\n\nThe basic commands to build and install brotli are:\n\n    $ mkdir out && cd out\n    $ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./installed ..\n    $ cmake --build . --config Release --target install\n\nYou can use other [CMake](https://cmake.org/) configuration.\n\n#### Python\n\nTo install the latest release of the Python module, run the following:\n\n    $ pip install brotli\n\nTo install the tip-of-the-tree version, run:\n\n    $ pip install --upgrade git+https://github.com/google/brotli\n\nSee the [Python readme](python/README.md) for more details on installing\nfrom source, development, and testing.\n\n### Contributing\n\nWe glad to answer/library related questions in\n[brotli mailing list](https://groups.google.com/forum/#!forum/brotli).\n\nRegular issues / feature requests should be reported in\n[issue tracker](https://github.com/google/brotli/issues).\n\nFor reporting vulnerability please read [SECURITY](SECURITY.md).\n\nFor contributing changes please read [CONTRIBUTING](CONTRIBUTING.md).\n\n### Benchmarks\n* [Squash Compression Benchmark](https://quixdb.github.io/squash-benchmark/) / [Unstable Squash Compression Benchmark](https://quixdb.github.io/squash-benchmark/unstable/)\n* [Large Text Compression Benchmark](http://mattmahoney.net/dc/text.html)\n* [Lzturbo Benchmark](https://sites.google.com/site/powturbo/home/benchmark)\n\n### Related projects\n> **Disclaimer:** Brotli authors take no responsibility for the third party projects mentioned in this section.\n\nIndependent [decoder](https://github.com/madler/brotli) implementation by Mark Adler, based entirely on format specification.\n\nJavaScript port of brotli [decoder](https://github.com/devongovett/brotli.js). Could be used directly via `npm install brotli`\n\nHand ported [decoder / encoder](https://github.com/dominikhlbg/BrotliHaxe) in haxe by Dominik Homberger. Output source code: JavaScript, PHP, Python, Java and C#\n\n7Zip [plugin](https://github.com/mcmilk/7-Zip-Zstd)\n\nDart [native bindings](https://github.com/thosakwe/brotli)\n\nDart compression framework with [fast FFI-based Brotli implementation](https://pub.dev/documentation/es_compression/latest/brotli/brotli-library.html) with ready-to-use prebuilt binaries for Win/Linux/Mac\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.306640625,
          "content": "### Reporting\n\nTo report a security issue, please use [https://g.co/vulnz](https://g.co/vulnz).\nWe use g.co/vulnz for our intake, and do coordination and disclosure here on\nGitHub (including using GitHub Security Advisory). The Google Security Team will\nrespond within 5 working days of your report on g.co/vulnz.\n"
        },
        {
          "name": "c",
          "type": "tree",
          "content": null
        },
        {
          "name": "csharp",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fetch-spec",
          "type": "tree",
          "content": null
        },
        {
          "name": "go",
          "type": "tree",
          "content": null
        },
        {
          "name": "java",
          "type": "tree",
          "content": null
        },
        {
          "name": "js",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.0791015625,
          "content": "[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n"
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "research",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0517578125,
          "content": "[build]\nbuild_base=bin\n\n[yapf]\nbased_on_style=google\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 9.07421875,
          "content": "# Copyright 2015 The Brotli Authors. All rights reserved.\n#\n# Distributed under MIT license.\n# See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n\nimport os\nimport platform\nimport re\nimport unittest\n\ntry:\n    from setuptools import Extension\n    from setuptools import setup\nexcept:\n    from distutils.core import Extension\n    from distutils.core import setup\nfrom distutils.command.build_ext import build_ext\nfrom distutils import errors\nfrom distutils import dep_util\nfrom distutils import log\n\n\nCURR_DIR = os.path.abspath(os.path.dirname(os.path.realpath(__file__)))\n\n\ndef read_define(path, macro):\n  \"\"\" Return macro value from the given file. \"\"\"\n  with open(path, 'r') as f:\n    for line in f:\n      m = re.match(rf'#define\\s{macro}\\s+(.+)', line)\n      if m:\n        return m.group(1)\n  return ''\n\n\ndef get_version():\n  \"\"\" Return library version string from 'common/version.h' file. \"\"\"\n  version_file_path = os.path.join(CURR_DIR, 'c', 'common', 'version.h')\n  major = read_define(version_file_path, 'BROTLI_VERSION_MAJOR')\n  minor = read_define(version_file_path, 'BROTLI_VERSION_MINOR')\n  patch = read_define(version_file_path, 'BROTLI_VERSION_PATCH')\n  if not major or not minor or not patch:\n    return ''\n  return f'{major}.{minor}.{patch}'\n\n\ndef get_test_suite():\n  test_loader = unittest.TestLoader()\n  test_suite = test_loader.discover('python', pattern='*_test.py')\n  return test_suite\n\n\nclass BuildExt(build_ext):\n\n  def get_source_files(self):\n    filenames = build_ext.get_source_files(self)\n    for ext in self.extensions:\n      filenames.extend(ext.depends)\n    return filenames\n\n  def build_extension(self, ext):\n    if ext.sources is None or not isinstance(ext.sources, (list, tuple)):\n      raise errors.DistutilsSetupError(\n        \"in 'ext_modules' option (extension '%s'), \"\n        \"'sources' must be present and must be \"\n        \"a list of source filenames\" % ext.name)\n\n    ext_path = self.get_ext_fullpath(ext.name)\n    depends = ext.sources + ext.depends\n    if not (self.force or dep_util.newer_group(depends, ext_path, 'newer')):\n      log.debug(\"skipping '%s' extension (up-to-date)\", ext.name)\n      return\n    else:\n      log.info(\"building '%s' extension\", ext.name)\n\n    c_sources = []\n    for source in ext.sources:\n      if source.endswith('.c'):\n        c_sources.append(source)\n    extra_args = ext.extra_compile_args or []\n\n    objects = []\n\n    macros = ext.define_macros[:]\n    if platform.system() == 'Darwin':\n      macros.append(('OS_MACOSX', '1'))\n    elif self.compiler.compiler_type == 'mingw32':\n      # On Windows Python 2.7, pyconfig.h defines \"hypot\" as \"_hypot\",\n      # This clashes with GCC's cmath, and causes compilation errors when\n      # building under MinGW: http://bugs.python.org/issue11566\n      macros.append(('_hypot', 'hypot'))\n    for undef in ext.undef_macros:\n      macros.append((undef,))\n\n    objs = self.compiler.compile(\n        c_sources,\n        output_dir=self.build_temp,\n        macros=macros,\n        include_dirs=ext.include_dirs,\n        debug=self.debug,\n        extra_postargs=extra_args,\n        depends=ext.depends)\n    objects.extend(objs)\n\n    self._built_objects = objects[:]\n    if ext.extra_objects:\n      objects.extend(ext.extra_objects)\n    extra_args = ext.extra_link_args or []\n    # when using GCC on Windows, we statically link libgcc and libstdc++,\n    # so that we don't need to package extra DLLs\n    if self.compiler.compiler_type == 'mingw32':\n        extra_args.extend(['-static-libgcc', '-static-libstdc++'])\n\n    ext_path = self.get_ext_fullpath(ext.name)\n    # Detect target language, if not provided\n    language = ext.language or self.compiler.detect_language(c_sources)\n\n    self.compiler.link_shared_object(\n        objects,\n        ext_path,\n        libraries=self.get_libraries(ext),\n        library_dirs=ext.library_dirs,\n        runtime_library_dirs=ext.runtime_library_dirs,\n        extra_postargs=extra_args,\n        export_symbols=self.get_export_symbols(ext),\n        debug=self.debug,\n        build_temp=self.build_temp,\n        target_lang=language)\n\n\nNAME = 'Brotli'\n\nVERSION = get_version()\n\nURL = 'https://github.com/google/brotli'\n\nDESCRIPTION = 'Python bindings for the Brotli compression library'\n\nAUTHOR = 'The Brotli Authors'\n\nLICENSE = 'MIT'\n\nPLATFORMS = ['Posix', 'MacOS X', 'Windows']\n\nCLASSIFIERS = [\n    'Development Status :: 4 - Beta',\n    'Environment :: Console',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: MIT License',\n    'Operating System :: MacOS :: MacOS X',\n    'Operating System :: Microsoft :: Windows',\n    'Operating System :: POSIX :: Linux',\n    'Programming Language :: C',\n    'Programming Language :: C++',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 2',\n    'Programming Language :: Python :: 2.7',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Unix Shell',\n    'Topic :: Software Development :: Libraries',\n    'Topic :: Software Development :: Libraries :: Python Modules',\n    'Topic :: System :: Archiving',\n    'Topic :: System :: Archiving :: Compression',\n    'Topic :: Text Processing :: Fonts',\n    'Topic :: Utilities',\n]\n\nPACKAGE_DIR = {'': 'python'}\n\nPY_MODULES = ['brotli']\n\nEXT_MODULES = [\n    Extension(\n        '_brotli',\n        sources=[\n            'python/_brotli.c',\n            'c/common/constants.c',\n            'c/common/context.c',\n            'c/common/dictionary.c',\n            'c/common/platform.c',\n            'c/common/shared_dictionary.c',\n            'c/common/transform.c',\n            'c/dec/bit_reader.c',\n            'c/dec/decode.c',\n            'c/dec/huffman.c',\n            'c/dec/state.c',\n            'c/enc/backward_references.c',\n            'c/enc/backward_references_hq.c',\n            'c/enc/bit_cost.c',\n            'c/enc/block_splitter.c',\n            'c/enc/brotli_bit_stream.c',\n            'c/enc/cluster.c',\n            'c/enc/command.c',\n            'c/enc/compound_dictionary.c',\n            'c/enc/compress_fragment.c',\n            'c/enc/compress_fragment_two_pass.c',\n            'c/enc/dictionary_hash.c',\n            'c/enc/encode.c',\n            'c/enc/encoder_dict.c',\n            'c/enc/entropy_encode.c',\n            'c/enc/fast_log.c',\n            'c/enc/histogram.c',\n            'c/enc/literal_cost.c',\n            'c/enc/memory.c',\n            'c/enc/metablock.c',\n            'c/enc/static_dict.c',\n            'c/enc/utf8_util.c',\n        ],\n        depends=[\n            'c/common/constants.h',\n            'c/common/context.h',\n            'c/common/dictionary.h',\n            'c/common/platform.h',\n            'c/common/shared_dictionary_internal.h',\n            'c/common/transform.h',\n            'c/common/version.h',\n            'c/dec/bit_reader.h',\n            'c/dec/huffman.h',\n            'c/dec/prefix.h',\n            'c/dec/state.h',\n            'c/enc/backward_references.h',\n            'c/enc/backward_references_hq.h',\n            'c/enc/backward_references_inc.h',\n            'c/enc/bit_cost.h',\n            'c/enc/bit_cost_inc.h',\n            'c/enc/block_encoder_inc.h',\n            'c/enc/block_splitter.h',\n            'c/enc/block_splitter_inc.h',\n            'c/enc/brotli_bit_stream.h',\n            'c/enc/cluster.h',\n            'c/enc/cluster_inc.h',\n            'c/enc/command.h',\n            'c/enc/compound_dictionary.h',\n            'c/enc/compress_fragment.h',\n            'c/enc/compress_fragment_two_pass.h',\n            'c/enc/dictionary_hash.h',\n            'c/enc/encoder_dict.h',\n            'c/enc/entropy_encode.h',\n            'c/enc/entropy_encode_static.h',\n            'c/enc/fast_log.h',\n            'c/enc/find_match_length.h',\n            'c/enc/hash.h',\n            'c/enc/hash_composite_inc.h',\n            'c/enc/hash_forgetful_chain_inc.h',\n            'c/enc/hash_longest_match64_inc.h',\n            'c/enc/hash_longest_match_inc.h',\n            'c/enc/hash_longest_match_quickly_inc.h',\n            'c/enc/hash_rolling_inc.h',\n            'c/enc/hash_to_binary_tree_inc.h',\n            'c/enc/histogram.h',\n            'c/enc/histogram_inc.h',\n            'c/enc/literal_cost.h',\n            'c/enc/memory.h',\n            'c/enc/metablock.h',\n            'c/enc/metablock_inc.h',\n            'c/enc/params.h',\n            'c/enc/prefix.h',\n            'c/enc/quality.h',\n            'c/enc/ringbuffer.h',\n            'c/enc/static_dict.h',\n            'c/enc/static_dict_lut.h',\n            'c/enc/utf8_util.h',\n            'c/enc/write_bits.h',\n        ],\n        include_dirs=[\n            'c/include',\n        ]),\n]\n\nTEST_SUITE = 'setup.get_test_suite'\n\nCMD_CLASS = {\n    'build_ext': BuildExt,\n}\n\nwith open(\"README.md\", \"r\") as f:\n    README = f.read()\n\nsetup(\n    name=NAME,\n    description=DESCRIPTION,\n    long_description=README,\n    long_description_content_type=\"text/markdown\",\n    version=VERSION,\n    url=URL,\n    author=AUTHOR,\n    license=LICENSE,\n    platforms=PLATFORMS,\n    classifiers=CLASSIFIERS,\n    package_dir=PACKAGE_DIR,\n    py_modules=PY_MODULES,\n    ext_modules=EXT_MODULES,\n    test_suite=TEST_SUITE,\n    cmdclass=CMD_CLASS)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}