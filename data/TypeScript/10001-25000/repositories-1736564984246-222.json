{
  "metadata": {
    "timestamp": 1736564984246,
    "page": 222,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Tencent/omi",
      "stars": 13096,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.021484375,
          "content": "*.js linguist-vendored"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.267578125,
          "content": "# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\npnpm-debug.log*\nlerna-debug.log*\nnode_modules\ndist\n*.local\n# Editor directories and files\n.vscode/*\n!.vscode/extensions.json\n.idea\n.DS_Store\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\nbuild\ncoverage\npackage.lock.json"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.9921875,
          "content": "Tencent is pleased to support the open source community by making Omi available.\nCopyright (C) 2018 THL A29 Limited, a Tencent company. All rights reserved.\nIf you have downloaded a copy of the Omi binary from Tencent, please note that the Omi binary is licensed under the MIT License.\nIf you have downloaded a copy of the Omi source code from Tencent, please note that Omi source code is licensed under the MIT License, except for the third-party components listed below which are subject to different license terms. Your integration of Omi into your own projects may require compliance with the MIT License, as well as the other licenses applicable to the third-party components included within Omi.\nA copy of the MIT License is included in this file.\n\n## Open Source Software Licensed Under the MIT License:\n\npreact v8.2.7\nCopyright (c) 2017 Jason Miller\n\nconstruct-style-sheets-polyfill v3.0.1\nCopyright (c) 2018 alshakero\n\nweakmap-polyfill v2.0.4\nCopyright (c) 2015-2021 polygonplanet\n\n## The MIT License (MIT)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.CN.md",
          "type": "blob",
          "size": 12.7177734375,
          "content": "[English](./README.md) | 简体中文 \n\n<p align=\"center\"><img src=\"https://omijs.github.io/home/assets/logo.svg\" alt=\"omi\" width=\"100\"/></p>\n<h2 align=\"center\">Omi - Web Components 框架</h2>\n\n- 📶 信号 **Signal** 驱动的响应式编程，[reactive-signal](https://github.com/Tencent/omi/tree/master/packages/reactive-signal)强力驱动\n- 🧱 [TDesign Web 组件](https://github.com/TDesignOteam/tdesign-web-components) \n- ⚡ **微小的**尺寸，**极速的**性能\n- 💗 [目标 100+ 模板](https://omi.cdn-go.cn/templates/latest/) & [OMI 模板源码](https://github.com/Tencent/omi/tree/master/packages/omi-templates)\n- 🐲 [OMI Form](https://omi.cdn-go.cn/form/latest/docs/) & [OMI Form 游乐场](https://omi.cdn-go.cn/form/latest/play/) & [Lucide Omi 图标](https://github.com/omijs/lucide-omi)\n- 🌐 你要的一切都有: **Web Components**, **JSX**, Function Components, Router, Suspense, Directive, Tailwindcss...\n- 💒 使用 **Constructable Stylesheets** 轻松管理和共享样式\n\n```tsx\nimport { render, signal, tag, Component, h } from 'omi'\n\nconst count = signal(0)\n\nfunction add() {\n  count.value++\n}\n\nfunction sub() {\n  count.value--\n}\n\n@tag('counter-demo')\nexport class CounterDemo extends Component {\n  static css = 'span { color: red; }'\n\n  render() {\n    return (\n      <>\n        <button onClick={sub}>-</button>\n        <span>{count.value}</span>\n        <button onClick={add}>+</button>\n      </>\n    )\n  }\n}\n```\n\n使用该组件:\n\n```tsx\nimport { h } from 'omi'\nimport './counter-demo'\n\nrender(<counter-demo />, document.body)\n\n// 或者\nimport { CounterDemo, Other } from './counter-demo'\n// 当需要导入其他东西的时候，防止被 tree shaking\nrender(<CounterDemo />, document.body)\n\n// 或者\ndocument.body.appendChild(document.createElement('counter-demo'))\n```\n\n## 安装\n\n```bash\nnpm i omi\n```\n\n快速创建 Omi + Vite + TS/JS 项目：\n\n```bash\n$ npx omi-cli init my-app    # 或者创建js项目: npx omi-cli init-js my-app\n$ cd my-app           \n$ npm start           # develop\n$ npm run build       # release\n```\n\n快速创建 Omi + **Router** + **Signal** + **Suspense** + **Tailwindcss** + Vite + TS 项目：\n\n```bash\n$ npx omi-cli init-spa my-app  \n$ cd my-app           \n$ npm start           # develop\n$ npm run build       # release\n```\n\n### 包\n\n- 核心包\n  - [`omi`](https://github.com/Tencent/omi/tree/master/packages/omi) - Omi 框架的实现代码。\n  - [`omi-form`](https://github.com/Tencent/omi/tree/master/packages/omi-form) - 强大易用且跨框架的表单解决方案。\n  - [`lucide-omi`](https://github.com/omijs/lucide-omi) - Lucide 的 Omi 图标集合。\n  - [`omiu`](https://github.com/Tencent/omi/tree/master/packages/omiu) - 希望打造最好的 web 组件。\n  - [`omi-router`](https://github.com/Tencent/omi/tree/master/packages/omi-router) - 创建单页应用。\n  - [`omi-cli`](https://github.com/omijs/cli) - 快速创建 Omi + Vite + TS/JS 项目。\n- 入门套件 (未发布到 npm)\n  - [`omi-elements`](https://github.com/Tencent/omi/tree/master/packages/omi-elements) - 官方推出 Tailwind Omi 套件。\n  - [`omi-starter-spa`](https://github.com/Tencent/omi/tree/master/packages/omi-starter-spa) - 快速创建单页应用(SPA)，内置了 Omi + OmiRouter + Tailwindcss + TypeScript + Vite + Prettier。\n  - [`omi-starter-ts`](https://github.com/Tencent/omi/tree/master/packages/omi-starter-ts) - 基于 Vite + Omi + TypeScript 的模板。\n  - [`omi-starter-tailwind`](https://github.com/Tencent/omi/tree/master/packages/omi-starter-tailwind) - 基于 Vite + Omi + TypeScript + Tailwindcss 的模板。\n  - [`omi-starter-js`](https://github.com/Tencent/omi/tree/master/packages/omi-starter-js) - 基于 Vite + Omi + JavaScript 的模板。\n  - [`omi-vue`](https://github.com/Tencent/omi/tree/master/packages/omi-vue) - Vue SFC + Vite + OMI + OMI-WeUI.\n- 组件\n  - [`omi-weui`](https://github.com/Tencent/omi/tree/master/packages/omi-weui) - Omi 版本的 WeUI。\n  - [`omi-auto-animate`](https://github.com/Tencent/omi/tree/master/packages/omi-auto-animate) - Omi 版本的 @formkit/auto-animate。\n  - [`omi-suspense`](https://github.com/Tencent/omi/tree/master/packages/omi-suspense) - 处理异步依赖。\n- 指令  \n  - [`omi-transition`](https://github.com/Tencent/omi/tree/master/packages/omi-transition) - 提供进入和离开动画。\n  - [`omi-ripple`](https://github.com/Tencent/omi/tree/master/packages/omi-ripple) - 用于为用户界面元素添加涟漪（ripple）效果。当用户与元素交互（例如点击按钮）时，涟漪效果会从交互点开始扩散开来。\n- 综合性例子 (未发布到 npm)\n  - [`snake-game-2tier`](https://github.com/Tencent/omi/tree/master/packages/snake-game-2tier) - 基于 Omi `Signal` class 两层架构的贪吃蛇游戏。\n  - [`snake-game-3tier`](https://github.com/Tencent/omi/tree/master/packages/snake-game-3tier) - 基于 Omi 响应是函数三层架构的贪吃蛇游戏。\n  - [`omi-tutorial`](https://github.com/omijs/tutorial) - Omi 官方教程源代码。\n\n**如果你想帮助项目发展，可以先简单地与同行分享!**\n\n- [Share via Dev.to](<https://dev.to/new?prefill=---%0Atitle%3A%20Omi%20-%20Web%20Components%20Framework%0A---- %20Home%3A%20%5Bomijs.org%5D(http%3A%2F%2Fomijs.org%2F)%20Github%3A%5Bhttps%3A%2F%2Fgithub.com%2FTencent%2Fomi%5D(https%3A%2F%2Fgithub.com%2FTencent%2Fomi)%0A-%20%F0%9F%93%B6%20**Signal**-driven%20reactive%20programming%0A-%20%F0%9F%8E%89%20%5BTailwind%20Element%20Omi%20UI%20KIT%5D(https%3A%2F%2Fomi.cdn-go.cn%2Felements%2Flatest%2F)%0A-%20%E2%9A%A1%20**Tiny**%20size%2C%20**Fast**%20performance%0A-%20%F0%9F%8C%90%20Everything%20you%20need%3A%20**Web%20Components**%2C%20**JSX**%2C%20Router%2C%20Suspense%2C%20Directive%2C%20Tailwindcss...%0A-%20%F0%9F%92%AF%20Both%20**object**%20oriented%20programming(OOP)%20and%20**data**%20oriented%20programming(DOP)%20are%20supported%0A-%20%F0%9F%92%92%20Harness%20**Constructable%20Stylesheets**%20to%20easily%20manage%20and%20share%20styles>)\n- [Share via Twitter](https://twitter.com/intent/tweet?text=Web%20Components%20Framework%20%F0%9F%8E%89http%3A%2F%2Fomijs.org%2F%0A%0A%20Everything%20you%20need%3A%20Web%20Components%2C%20JSX%2C%20Router%2C%20Suspense%2C%20Directive%2C%20Tailwindcss...%20%0A%0A%20Tailwind%20Element%20Omi%20UI%20KIT%3E%20%F0%9F%92%AFhttps%3A%2F%2Fomi.cdn-go.cn%2Felements%2Flatest%2F)\n- [Share via Facebook](https://www.facebook.com/sharer/sharer.php?u=http%3A//omijs.org)\n- [Share via LinkedIn](http://www.linkedin.com/shareArticle?url=http%3A%2F%2Fomijs.org%2F)\n- [Share via Pinterest](https://www.pinterest.com/pin/create/button?url=http://omijs.org/&media=https://repository-images.githubusercontent.com/36606437/66abfcfb-096b-4c9d-a290-77165213e605&description=Omi-Web%20Componnets%20Framework)\n- [Share via Reddit](https://reddit.com/submit?url=http://omijs.org/&title=web%20components%20framework)\n- [Share via StumbleUpon](https://www.stumbleupon.com/submit?url=http://omijs.org/&title=web%20components%20framework)\n- [Share via Vkontakte](https://vk.com/share.php?url=http://omijs.org/)\n- [Share via Weibo](https://service.weibo.com/share/share.php?url=https://omijs.org/&title=web%20components%20framework)\n- [Share via Hackernews](https://news.ycombinator.com/submitlink?u=http://omijs.org/&t=web%20components%20framework)\n\n多谢！\n\n## 使用\n\n### TodoApp 使用响应式函数\n\n> 数据驱动编程\n\n在数据驱动编程中，我们将重点放在数据本身和对数据的操作上，而不是数据所在的对象或数据结构。这种编程范式强调的是数据的变化和流动，以及如何响应这些变化。基于响应式函数的 TodoApp 就是一个很好的例子，它使用了响应式编程的概念，当数据（即待办事项列表）发生变化时，UI 会自动更新以反映这些变化。\n\n\n```tsx\nimport { render, signal, computed, tag, Component, h } from 'omi'\n\nconst todos = signal([\n  { text: 'Learn OMI', completed: true },\n  { text: 'Learn Web Components', completed: false },\n  { text: 'Learn JSX', completed: false },\n  { text: 'Learn Signal', completed: false }\n])\n\nconst completedCount = computed(() => {\n  return todos.value.filter(todo => todo.completed).length\n})\n\nconst newItem = signal('')\n\nfunction addTodo() {\n  // api a，不会重新创建数组\n  todos.value.push({ text: newItem.value, completed: false })\n  todos.update() // 非值类型的数据更新需要手动调用 update 方法\n\n  // api b, 和上面的 api a 效果一样，但是会创建新的数组\n  // todos.value = [...todos.value, { text: newItem.value, completed: false }]\n\n  newItem.value = '' // 值类型的数据更新需会自动 update\n}\n\nfunction removeTodo(index: number) {\n  todos.value.splice(index, 1)\n  todos.update() // 非值类型的数据更新需要手动调用 update 方法\n}\n\n@tag('todo-list')\nclass TodoList extends Component {\n  onInput = (event: Event) => {\n    const target = event.target as HTMLInputElement\n    newItem.value = target.value\n  }\n\n  render() {\n    return (\n      <>\n        <input type=\"text\" value={newItem.value} onInput={this.onInput} />\n        <button onClick={addTodo}>Add</button>\n        <ul>\n          {todos.value.map((todo, index) => {\n            return (\n              <li>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onInput={() => {\n                      todo.completed = !todo.completed\n                      todos.update()\n                    }}\n                  />\n                  {todo.completed ? <s>{todo.text}</s> : todo.text}\n                </label>\n                {' '}\n                <button onClick={() => removeTodo(index)}>❌</button>\n              </li>\n            )\n          })}\n        </ul>\n        <p>Completed count: {completedCount.value}</p>\n      </>\n    )\n  }\n}\n\nrender(<todo-list />, document.body)\n```\n\n\n## 自动导入 h\n\nvite.config.js:\n\n```tsx\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  esbuild: {\n    jsxInject: \"import { h } from 'omi'\",\n    jsxFactory: \"h\",\n    jsxFragment: \"h.f\"\n  }\n})\n```\n\n你可以在构建时候注入代码，这样就不用手动导出 `h`。\n\n## 定义跨框架组件\n\n在 Vue 中使用 Omi component 例子如下:\n\n![](./assets/omi-vue.gif)\n\nmy-counter.tsx:\n\n```tsx\nimport { tag, Component, h, bind } from 'omi'\n\n@tag('my-counter')\nclass MyCounter extends Component<{ count: number }> {\n  static props = {\n    count: {\n      type: Number,\n      default: 0,\n      changed(newValue, oldValue) {\n        this.setState({ count: newValue })\n      }\n    }\n  }\n\n  state = {\n    count: 1\n  }\n\n  @bind\n  sub() {\n    this.setState({ count: this.state.count - 1 })\n    this.fire('change', this.state.count)\n  }\n\n  @bind\n  add() {\n    this.setState({ count: this.state.count + 1 })\n    this.fire('change', this.state.count)\n  }\n\n  render() {\n    return (\n      <>\n        <button onClick={this.sub}>-</button>\n        <span>{this.state.count}</span>\n        <button onClick={this.add}>+</button>\n      </>\n    )\n  }\n}\n```\n\n### 在 Vue3 中使用\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n// 导入 omi 组件\nimport './my-counter'\n\ndefineProps({\n  msg: String,\n})\n\nconst count = ref(0)\n\nconst change = (e) => {\n  count.value = e.detail\n}\n\n</script>\n\n<template>\n  <h1>{{ msg }}</h1>\n\n  <my-counter @change=\"change\" :count=\"count\" />\n  <p>\n    【Omi】 \n  </p>\n\n  <div class=\"card\">\n    <button type=\"button\" @click=\"count++\">count is {{ count }}</button>\n    <p>\n     【Vue】 \n    </p>\n  </div>\n\n</template>\n```\n\n如果在 omi 组件中使用:\n\n```ts\nthis.fire('count-change', this.state.count)\n```\n\n在 vue 中使用组件监听事件如下:\n\n```html\n<my-counter @count-change=\"change\" :count=\"count\" />\n```\n\n\n### 在 React 中使用\n\n```tsx\nimport { useState, useRef, useEffect } from 'react'\nimport useEventListener from '@use-it/event-listener'\nimport './my-counter'\n\nfunction App() {\n  const [count, setCount] = useState(100)\n  const myCounterRef = useRef(null)\n\n  useEffect(() => {\n    const counter = myCounterRef.current\n    if (counter) {\n      const handleChange = (evt) => {\n        setCount(evt.detail)\n      }\n      counter.addEventListener('change', handleChange)\n      return () => {\n        counter.removeEventListener('change', handleChange)\n      }\n    }\n  }, [])\n\n  return (\n    <>\n      <h1>Omi + React</h1>\n      <my-counter count={count} ref={myCounterRef}></my-counter>\n      <div className=\"card\">\n        <button onClick={() => setCount((count) => count + 1)}>\n          count is {count}\n        </button>\n      </div>\n    </>\n  )\n}\n\nexport default App\n```\n\n## 贡献者\n\n<a href=\"https://github.com/Tencent/omi/graphs/contributors\">\n  <img src=\"./assets/contributors.png\" />\n</a>\n\n## License\n\nMIT © Tencent\n\n\n\n  <!-- - [`tdesign-omi`](https://github.com/omijs/tdesign) - `[进行中...]`基于 TDesign 和 Omi 的跨框架 组件 集合。 [点击这里预览一下](https://omijs.github.io/tdesign/) -->\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.462890625,
          "content": "English | [简体中文](./README.CN.md) \n\n<p align=\"center\"><img src=\"https://omijs.github.io/home/assets/logo.svg\" alt=\"omi\" width=\"100\"/></p>\n<h2 align=\"center\">Omi - Web Components Framework</h2>\n\n- 📶 **Signal**-driven reactive programming by [reactive-signal](https://github.com/Tencent/omi/tree/master/packages/reactive-signal)\n- 🧱 [TDesign Web Components](https://github.com/TDesignOteam/tdesign-web-components) \n- 💗 [100+ OMI Templates](https://omi.cdn-go.cn/templates/latest/) & [OMI Templates Source Code](https://github.com/Tencent/omi/tree/master/packages/omi-templates)\n- 🐲 [OMI Form](https://omi.cdn-go.cn/form/latest/docs/) & [OMI Form Playground](https://omi.cdn-go.cn/form/latest/play/) & [Lucide Omi Icons](https://github.com/omijs/lucide-omi)\n- ⚡ **Tiny** size, **Fast** performance\n- 🌐 Everything you need: **Web Components**, **JSX**, Function Components, Router, Suspense, Directive, Tailwindcss...\n- 💒 Harness **Constructable Stylesheets** to easily manage and share styles\n\n```tsx\nimport { render, signal, tag, Component, h } from 'omi'\n\nconst count = signal(0)\n\nfunction add() {\n  count.value++\n}\n\nfunction sub() {\n  count.value--\n}\n\n@tag('counter-demo')\nexport class CounterDemo extends Component {\n  static css = 'span { color: red; }'\n\n  render() {\n    return (\n      <>\n        <button onClick={sub}>-</button>\n        <span>{count.value}</span>\n        <button onClick={add}>+</button>\n      </>\n    )\n  }\n}\n```\n\nUse this component:\n\n```tsx\nimport { h } from 'omi'\nimport './counter-demo'\n\nrender(<counter-demo />, document.body)\n\n// or \nimport { CounterDemo, Other } from './counter-demo'\n// Prevent tree Shaking when importing other things\nrender(<CounterDemo />, document.body)\n\n// or\ndocument.body.appendChild(document.createElement('counter-demo'))\n```\n\n## Install \n\n```bash\nnpm i omi\n```\n\nTo quickly create an Omi + Vite + TS/JS project:\n\n```bash\n$ npx omi-cli init my-app    # or create js project by: npx omi-cli init-js my-app\n$ cd my-app           \n$ npm start           # develop\n$ npm run build       # release\n```\n\nTo quickly create an Omi + **Router** + **Signal** + **Suspense** + **Tailwindcss** + Vite + TS project:\n\n```bash\n$ npx omi-cli init-spa my-app  \n$ cd my-app           \n$ npm start           # develop\n$ npm run build       # release\n```\n\n### Packages\n\n- Core packages\n  - [`omi`](https://github.com/Tencent/omi/tree/master/packages/omi) - Implementation of omi framework.\n  - [`omi-form`](https://github.com/Tencent/omi/tree/master/packages/omi-form) - Powerful, simple and cross frameworks form solution.\n  - [`lucide-omi`](https://github.com/omijs/lucide-omi) - Lucide icon collection for omi.\n  - [`omiu`](https://github.com/Tencent/omi/tree/master/packages/omiu) - Hope to create the best web components. For example, the powerful [vchart](https://visactor.io/vchart) and [vtable](https://visactor.io/vtable)\n  - [`omi-router`](https://github.com/Tencent/omi/tree/master/packages/omi-router) - Create SPA of omi framework.\n  - [`omi-cli`](https://github.com/omijs/cli) - To quickly create an Omi + Vite + TS/JS project.\n- Starter kits (not published to npm)\n  - [`omi-elements`](https://github.com/Tencent/omi/tree/master/packages/omi-elements) - Tailwind Element Omi UI KIT.\n  - [`omi-starter-spa`](https://github.com/Tencent/omi/tree/master/packages/omi-starter-spa) - A starter repo for building single page app using Omi + OmiRouter + Tailwindcss + TypeScript + Vite + Prettier.\n  - [`omi-starter-ts`](https://github.com/Tencent/omi/tree/master/packages/omi-starter-ts) - A starter repo for building web app or reusable components using Omi in TypeScript base on Vite.\n  - [`omi-starter-tailwind`](https://github.com/Tencent/omi/tree/master/packages/omi-starter-tailwind) - A starter repo for building web app or reusable components using Omi + Tailwindcss + TypeScript + Vite.\n  - [`omi-starter-js`](https://github.com/Tencent/omi/tree/master/packages/omi-starter-js) - A starter repo for building web app or reusable components using Omi in JavaScript base on Vite.\n  - [`omi-vue`](https://github.com/Tencent/omi/tree/master/packages/omi-vue) - Vue SFC + Vite + OMI + OMI-WeUI.\n- Components\n  - [`omi-weui`](https://github.com/Tencent/omi/tree/master/packages/omi-weui) - WeUI Components of omi.\n  - [`omi-auto-animate`](https://github.com/Tencent/omi/tree/master/packages/omi-auto-animate) - Omi version of @formkit/auto-animate.\n  - [`omi-suspense`](https://github.com/Tencent/omi/tree/master/packages/omi-suspense) - Handling asynchronous dependencies.\n- Directives  \n  - [`omi-transition`](https://github.com/Tencent/omi/tree/master/packages/omi-transition) - Applying animations when an component is entering and leaving the DOM.\n  - [`omi-ripple`](https://github.com/Tencent/omi/tree/master/packages/omi-ripple) - A lightweight component for adding ripple effects to user interface elements.\n- Examples (not published to npm)\n  - [`snake-game-2tier`](https://github.com/Tencent/omi/tree/master/packages/snake-game-2tier) - SNake Game with `Signal` class\n  - [`snake-game-3tier`](https://github.com/Tencent/omi/tree/master/packages/snake-game-3tier) - SNake Game with reactivity functions\n  - [`omi-tutorial`](https://github.com/omijs/tutorial) - Source code of omi tutorial.\n\n\n**If you want to help the project grow, start by simply sharing it with your peers!**\n\n- [Share via Dev.to](<https://dev.to/new?prefill=---%0Atitle%3A%20Omi%20-%20Web%20Components%20Framework%0A---- %20Home%3A%20%5Bomijs.org%5D(http%3A%2F%2Fomijs.org%2F)%20Github%3A%5Bhttps%3A%2F%2Fgithub.com%2FTencent%2Fomi%5D(https%3A%2F%2Fgithub.com%2FTencent%2Fomi)%0A-%20%F0%9F%93%B6%20**Signal**-driven%20reactive%20programming%0A-%20%F0%9F%8E%89%20%5BTailwind%20Element%20Omi%20UI%20KIT%5D(https%3A%2F%2Fomi.cdn-go.cn%2Felements%2Flatest%2F)%0A-%20%E2%9A%A1%20**Tiny**%20size%2C%20**Fast**%20performance%0A-%20%F0%9F%8C%90%20Everything%20you%20need%3A%20**Web%20Components**%2C%20**JSX**%2C%20Router%2C%20Suspense%2C%20Directive%2C%20Tailwindcss...%0A-%20%F0%9F%92%AF%20Both%20**object**%20oriented%20programming(OOP)%20and%20**data**%20oriented%20programming(DOP)%20are%20supported%0A-%20%F0%9F%92%92%20Harness%20**Constructable%20Stylesheets**%20to%20easily%20manage%20and%20share%20styles>)\n- [Share via Twitter](https://twitter.com/intent/tweet?text=Web%20Components%20Framework%20%F0%9F%8E%89http%3A%2F%2Fomijs.org%2F%0A%0A%20Everything%20you%20need%3A%20Web%20Components%2C%20JSX%2C%20Router%2C%20Suspense%2C%20Directive%2C%20Tailwindcss...%20%0A%0A%20Tailwind%20Element%20Omi%20UI%20KIT%3E%20%F0%9F%92%AFhttps%3A%2F%2Fomi.cdn-go.cn%2Felements%2Flatest%2F)\n- [Share via Facebook](https://www.facebook.com/sharer/sharer.php?u=http%3A//omijs.org)\n- [Share via LinkedIn](http://www.linkedin.com/shareArticle?url=http%3A%2F%2Fomijs.org%2F)\n- [Share via Pinterest](https://www.pinterest.com/pin/create/button?url=http://omijs.org/&media=https://repository-images.githubusercontent.com/36606437/66abfcfb-096b-4c9d-a290-77165213e605&description=Omi-Web%20Componnets%20Framework)\n- [Share via Reddit](https://reddit.com/submit?url=http://omijs.org/&title=web%20components%20framework)\n- [Share via StumbleUpon](https://www.stumbleupon.com/submit?url=http://omijs.org/&title=web%20components%20framework)\n- [Share via Vkontakte](https://vk.com/share.php?url=http://omijs.org/)\n- [Share via Weibo](https://service.weibo.com/share/share.php?url=https://omijs.org/&title=web%20components%20framework)\n- [Share via Hackernews](https://news.ycombinator.com/submitlink?u=http://omijs.org/&t=web%20components%20framework)\n\nThank you!\n\n\n## Usage\n\n### TodoApp with reactivity functions\n\n> Data oriented programming \n\nIn data-oriented programming, the focus is on the data itself and the operations on the data, rather than the objects or data structures that hold the data. This programming paradigm emphasizes the change and flow of data, and how to respond to these changes. The TodoApp with reactivity functions is a good example of this, using the concepts of reactive programming, where the UI automatically updates to reflect changes in the data (i.e., the to-do list).\n\n\n```tsx\nimport { render, signal, computed, tag, Component, h } from 'omi'\n\nconst todos = signal([\n  { text: 'Learn OMI', completed: true },\n  { text: 'Learn Web Components', completed: false },\n  { text: 'Learn JSX', completed: false },\n  { text: 'Learn Signal', completed: false }\n])\n\nconst completedCount = computed(() => {\n  return todos.value.filter(todo => todo.completed).length\n})\n\nconst newItem = signal('')\n\nfunction addTodo() {\n  // api a\n  todos.value.push({ text: newItem.value, completed: false })\n  todos.update() // Trigger UI auto update\n  \n  // api b, same as api a\n  // todos.value = [...todos.value, { text: newItem.value, completed: false }]\n\n  newItem.value = '' // Changing the value type can automatically update the UI\n}\n\nfunction removeTodo(index: number) {\n  todos.value.splice(index, 1)\n  todos.update() // Trigger UI auto update\n}\n\n@tag('todo-list')\nclass TodoList extends Component {\n  onInput = (event: Event) => {\n    const target = event.target as HTMLInputElement\n    newItem.value = target.value\n  }\n\n  render() {\n    return (\n      <>\n        <input type=\"text\" value={newItem.value} onInput={this.onInput} />\n        <button onClick={addTodo}>Add</button>\n        <ul>\n          {todos.value.map((todo, index) => {\n            return (\n              <li>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onInput={() => {\n                      todo.completed = !todo.completed\n                      todos.update() // Trigger UI auto update\n                    }}\n                  />\n                  {todo.completed ? <s>{todo.text}</s> : todo.text}\n                </label>\n                {' '}\n                <button onClick={() => removeTodo(index)}>❌</button>\n              </li>\n            )\n          })}\n        </ul>\n        <p>Completed count: {completedCount.value}</p>\n      </>\n    )\n  }\n}\n\nrender(<todo-list />, document.body)\n```\n\n## Auto Import h\n\nvite.config.js:\n\n```tsx\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  esbuild: {\n    jsxInject: \"import { h } from 'omi'\",\n    jsxFactory: \"h\",\n    jsxFragment: \"h.f\"\n  }\n})\n```\n\nYou can inject code during construction, so you don't have to manually export `h`.\n\n<!-- ## With Twind\n\n```tsx\nimport { Component, define, h } from 'omi'\n\nimport install from '@twind/with-web-components'\nimport { defineConfig } from '@twind/core'\nimport presetAutoprefix from '@twind/preset-autoprefix'\nimport presetTailwind from '@twind/preset-tailwind'\nconst withTwind = install(defineConfig({\n  presets: [presetAutoprefix(), presetTailwind()],\n}))\n\ndefine('my-app', class extends withTwind(Component) {\n  render() {\n    return <h1 class=\"text-3xl font-bold underline\">Hello world!</h1>\n  }\n})\n``` -->\n\n## Define Cross Framework Component\n\nThe case of using Omi component in Vue is as follows:\n\n![](./assets/omi-vue.gif)\n\nmy-counter.tsx:\n\n```tsx\nimport { tag, Component, h, bind } from 'omi'\n\n@tag('my-counter')\nclass MyCounter extends Component {\n  static props = {\n    count: {\n      type: Number,\n      default: 0,\n      changed(newValue, oldValue) {\n        this.state.count = newValue\n        this.update()\n      }\n    }\n  }\n\n  state = {\n    count: null\n  }\n\n  install() {\n    this.state.count = this.props.count\n  }\n\n  @bind\n  sub() {\n    this.state.count--\n    this.update()\n    this.fire('change', this.state.count)\n  }\n\n  @bind\n  add() {\n    this.state.count++\n    this.update()\n    this.fire('change', this.state.count)\n  }\n\n  render() {\n    return (\n      <>\n        <button onClick={this.sub}>-</button>\n        <span>{this.state.count}</span>\n        <button onClick={this.add}>+</button>\n      </>\n    )\n  }\n}\n```\n\n### Using in Vue3\n\n```vue\n<script setup>\nimport { ref } from 'vue'\n// import omi component\nimport './my-counter'\n\ndefineProps({\n  msg: String,\n})\n\nconst count = ref(0)\n\nconst change = (e) => {\n  count.value = e.detail\n}\n\n</script>\n\n<template>\n  <h1>{{ msg }}</h1>\n\n  <my-counter @change=\"change\" :count=\"count\" />\n  <p>\n    【Omi】 \n  </p>\n\n  <div class=\"card\">\n    <button type=\"button\" @click=\"count++\">count is {{ count }}</button>\n    <p>\n     【Vue】 \n    </p>\n  </div>\n\n</template>\n```\n\nIf you `fire` the `count-change` in an Omi component:\n\n```ts\nthis.fire('count-change', this.state.count)\n```\n\nTo use the component and listen for events in Vue:\n\n```html\n<my-counter @count-change=\"change\" :count=\"count\" />\n```\n\n### Using in React\n\n```tsx\nimport { useState, useRef, useEffect } from 'react'\nimport useEventListener from '@use-it/event-listener'\nimport './my-counter'\n\nfunction App() {\n  const [count, setCount] = useState(100)\n  const myCounterRef = useRef(null)\n\n  useEffect(() => {\n    const counter = myCounterRef.current\n    if (counter) {\n      const handleChange = (evt) => {\n        setCount(evt.detail)\n      }\n      counter.addEventListener('change', handleChange)\n      return () => {\n        counter.removeEventListener('change', handleChange)\n      }\n    }\n  }, [])\n\n  return (\n    <>\n      <h1>Omi + React</h1>\n      <my-counter count={count} ref={myCounterRef}></my-counter>\n      <div className=\"card\">\n        <button onClick={() => setCount((count) => count + 1)}>\n          count is {count}\n        </button>\n      </div>\n    </>\n  )\n}\n\nexport default App\n```\n\n## Contributors\n\n<a href=\"https://github.com/Tencent/omi/graphs/contributors\">\n  <img src=\"./assets/contributors.png\" />\n</a>\n\n## License\n\nMIT © Tencent\n\n\n  <!-- - [`tdesign-omi`](https://github.com/omijs/tdesign) - `[in progress...]`Cross framework components based on tdesign. [Preview](https://omijs.github.io/tdesign/) -->"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "package-lock.json",
          "type": "blob",
          "size": 1.5361328125,
          "content": "{\n  \"name\": \"omi\",\n  \"lockfileVersion\": 3,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"dependencies\": {\n        \"omi\": \"^7.6.17\"\n      }\n    },\n    \"node_modules/construct-style-sheets-polyfill\": {\n      \"version\": \"3.0.1\",\n      \"resolved\": \"https://registry.npmmirror.com/construct-style-sheets-polyfill/-/construct-style-sheets-polyfill-3.0.1.tgz\",\n      \"integrity\": \"sha512-vyAiTcS3i29IxjzJ12K2MGUUBYgrF69p6fKD+8ZPRLFhwTtuaxXLpazl4Yw4FITsQXwUMrh8juI1bOHWYjzkwA==\",\n      \"engines\": {\n        \"npm\": \">=7\"\n      }\n    },\n    \"node_modules/omi\": {\n      \"version\": \"7.6.17\",\n      \"resolved\": \"https://registry.npmmirror.com/omi/-/omi-7.6.17.tgz\",\n      \"integrity\": \"sha512-7WFWWp1+IjHogHVfsZuLFR2npQHLX/eR9kr+o/OwhIkSqkKqiwy+1daUYzgDM6fGxgrkiRve7VCe8ceYa43W0g==\",\n      \"dependencies\": {\n        \"construct-style-sheets-polyfill\": \"3.0.1\",\n        \"reactive-signal\": \"^1.0.3\",\n        \"weakmap-polyfill\": \"2.0.4\"\n      }\n    },\n    \"node_modules/reactive-signal\": {\n      \"version\": \"1.0.3\",\n      \"resolved\": \"https://registry.npmmirror.com/reactive-signal/-/reactive-signal-1.0.3.tgz\",\n      \"integrity\": \"sha512-UlbIDgdkreGW0QFdrxCsVQNcPkiv+aOT4bWIF3inHb4jZlBdvRCZtgO9Ie5ayFxlnjetQg1QvRhg5PlGKSxZEA==\"\n    },\n    \"node_modules/weakmap-polyfill\": {\n      \"version\": \"2.0.4\",\n      \"resolved\": \"https://registry.npmmirror.com/weakmap-polyfill/-/weakmap-polyfill-2.0.4.tgz\",\n      \"integrity\": \"sha512-ZzxBf288iALJseijWelmECm/1x7ZwQn3sMYIkDr2VvZp7r6SEKuT8D0O9Wiq6L9Nl5mazrOMcmiZE/2NCenaxw==\",\n      \"engines\": {\n        \"node\": \">=8.10.0\"\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.0478515625,
          "content": "{\n  \"dependencies\": {\n    \"omi\": \"^7.6.17\"\n  }\n}\n"
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}