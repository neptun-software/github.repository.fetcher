{
  "metadata": {
    "timestamp": 1736565128466,
    "page": 47,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chatchat-space/Langchain-Chatchat",
      "stars": 32876,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.525390625,
          "content": "*.yaml\n*.json\n*.log\n*.log.*\n*.bak\n/libs/chatchat-server/chatchat/data/*\n!/libs/chatchat-server/chatchat/data/knowledge_base/samples\n/libs/chatchat-server/chatchat/data/knowledge_base/samples/vector_store\n!/libs/chatchat-server/chatchat/data/nltk_data\nconfig/\n.vscode/\n\n# below are standard python ignore files\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\nPipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\npoetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n.idea/\n.pytest_cache\n.DS_Store\n\n# Test File\ntest.py\n\n\n/knowledge_base/samples/content/202311-D平台项目工作大纲参数，人员中间库表结构说明V1.1(1).docx\n/knowledge_base/samples/content/imi_temeplate.txt\nchatchat/data\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.181640625,
          "content": "[submodule \"knowledge_base/samples/content/wiki\"]\n\tpath = chatchat/chatchat/data/knowledge_base/samples/content/wiki\n\turl = https://github.com/chatchat-space/Langchain-Chatchat.wiki.git\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0869140625,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2024 LangChain-Chatchat Team\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.2490234375,
          "content": "![](docs/img/logo-long-chatchat-trans-v2.png)\n<a href=\"https://trendshift.io/repositories/329\" target=\"_blank\"><img src=\"https://trendshift.io/api/badge/repositories/329\" alt=\"chatchat-space%2FLangchain-Chatchat | Trendshift\" style=\"width: 250px; height: 55px;\" width=\"250\" height=\"55\"/></a>\n\n[![pypi badge](https://img.shields.io/pypi/v/langchain-chatchat.svg)](https://shields.io/)\n[![Generic badge](https://img.shields.io/badge/python-3.8%7C3.9%7C3.10%7C3.11-blue.svg)](https://pypi.org/project/pypiserver/)\n\n🌍 [READ THIS IN ENGLISH](README_en.md)\n\n📃 **LangChain-Chatchat** (原 Langchain-ChatGLM)\n\n基于 ChatGLM 等大语言模型与 Langchain 等应用框架实现，开源、可离线部署的 RAG 与 Agent 应用项目。\n\n---\n\n## 目录\n\n* [概述](README.md#概述)\n* [功能介绍](README.md#功能介绍)\n    * [0.3.x 功能一览](README.md#03x-版本功能一览)\n    * [已支持的模型推理框架与模型](README.md#已支持的模型部署框架与模型)\n* [快速上手](README.md#快速上手)\n    * [pip 安装部署](README.md#pip-安装部署)\n    * [源码安装部署/开发部署](README.md#源码安装部署开发部署)\n    * [Docker 部署](README.md#docker-部署)\n* [项目里程碑](README.md#项目里程碑)\n* [联系我们](README.md#联系我们)\n\n## 概述\n\n🤖️ 一种利用 [langchain](https://github.com/langchain-ai/langchain)\n思想实现的基于本地知识库的问答应用，目标期望建立一套对中文场景与开源模型支持友好、可离线运行的知识库问答解决方案。\n\n💡 受 [GanymedeNil](https://github.com/GanymedeNil) 的项目 [document.ai](https://github.com/GanymedeNil/document.ai)\n和 [AlexZhangji](https://github.com/AlexZhangji)\n创建的 [ChatGLM-6B Pull Request](https://github.com/THUDM/ChatGLM-6B/pull/216)\n启发，建立了全流程可使用开源模型实现的本地知识库问答应用。本项目的最新版本中可使用 [Xinference](https://github.com/xorbitsai/inference)、[Ollama](https://github.com/ollama/ollama)\n等框架接入 [GLM-4-Chat](https://github.com/THUDM/GLM-4)、 [Qwen2-Instruct](https://github.com/QwenLM/Qwen2)、 [Llama3](https://github.com/meta-llama/llama3)\n等模型，依托于 [langchain](https://github.com/langchain-ai/langchain)\n框架支持通过基于 [FastAPI](https://github.com/tiangolo/fastapi) 提供的 API\n调用服务，或使用基于 [Streamlit](https://github.com/streamlit/streamlit) 的 WebUI 进行操作。\n\n![](docs/img/langchain_chatchat_0.3.0.png)\n\n✅ 本项目支持市面上主流的开源 LLM、 Embedding 模型与向量数据库，可实现全部使用**开源**模型**离线私有部署**。与此同时，本项目也支持\nOpenAI GPT API 的调用，并将在后续持续扩充对各类模型及模型 API 的接入。\n\n⛓️ 本项目实现原理如下图所示，过程包括加载文件 -> 读取文本 -> 文本分割 -> 文本向量化 -> 问句向量化 ->\n在文本向量中匹配出与问句向量最相似的 `top k`个 -> 匹配出的文本作为上下文和问题一起添加到 `prompt`中 -> 提交给 `LLM`生成回答。\n\n📺 [原理介绍视频](https://www.bilibili.com/video/BV13M4y1e7cN/?share_source=copy_web&vd_source=e6c5aafe684f30fbe41925d61ca6d514)\n\n![实现原理图](docs/img/langchain+chatglm.png)\n\n从文档处理角度来看，实现流程如下：\n\n![实现原理图2](docs/img/langchain+chatglm2.png)\n\n🚩 本项目未涉及微调、训练过程，但可利用微调或训练对本项目效果进行优化。\n\n🌐 [AutoDL 镜像](https://www.codewithgpu.com/i/chatchat-space/Langchain-Chatchat/Langchain-Chatchat) 中 `0.3.0`\n版本所使用代码已更新至本项目 `v0.3.0` 版本。\n\n🐳 Docker 镜像将会在近期更新。\n\n🧑‍💻 如果你想对本项目做出贡献，欢迎移步[开发指南](docs/contributing/README_dev.md) 获取更多开发部署相关信息。\n\n## 功能介绍\n\n### 0.3.x 版本功能一览\n\n| 功能        | 0.2.x                            | 0.3.x                                                               |\n|-----------|----------------------------------|---------------------------------------------------------------------|\n| 模型接入      | 本地：fastchat<br>在线：XXXModelWorker | 本地：model_provider,支持大部分主流模型加载框架<br>在线：oneapi<br>所有模型接入均兼容openai sdk |\n| Agent     | ❌不稳定                             | ✅针对ChatGLM3和Qwen进行优化,Agent能力显著提升                                    ||\n| LLM对话     | ✅                                | ✅                                                                   ||\n| 知识库对话     | ✅                                | ✅                                                                   ||\n| 搜索引擎对话    | ✅                                | ✅                                                                   ||\n| 文件对话      | ✅仅向量检索                           | ✅统一为File RAG功能,支持BM25+KNN等多种检索方式                                    ||\n| 数据库对话     | ❌                                | ✅                                                                   ||\n| 多模态图片对话     | ❌                                | ✅  推荐使用 qwen-vl-chat                   ||\n| ARXIV文献对话 | ❌                                | ✅                                                                   ||\n| Wolfram对话 | ❌                                | ✅                                                                   ||\n| 文生图       | ❌                                | ✅                                                                   ||\n| 本地知识库管理   | ✅                                | ✅                                                                   ||\n| WEBUI     | ✅                                | ✅更好的多会话支持,自定义系统提示词...                                               |\n\n0.3.x 版本的核心功能由 Agent 实现,但用户也可以手动实现工具调用:\n\n|操作方式|实现的功能|适用场景|\n|-------|---------|-------|\n|选中\"启用Agent\",选择多个工具|由LLM自动进行工具调用|使用ChatGLM3/Qwen或在线API等具备Agent能力的模型|\n|选中\"启用Agent\",选择单个工具|LLM仅解析工具参数|使用的模型Agent能力一般,不能很好的选择工具<br>想手动选择功能|\n|不选中\"启用Agent\",选择单个工具|不使用Agent功能的情况下,手动填入参数进行工具调用|使用的模型不具备Agent能力|\n|不选中任何工具，上传一个图片|图片对话|使用 qwen-vl-chat 等多模态模型|\n\n更多功能和更新请实际部署体验.\n\n### 已支持的模型部署框架与模型\n\n本项目中已经支持市面上主流的如 [GLM-4-Chat](https://github.com/THUDM/GLM-4)\n与 [Qwen2-Instruct](https://github.com/QwenLM/Qwen2) 等新近开源大语言模型和 Embedding\n模型，这些模型需要用户自行启动模型部署框架后，通过修改配置信息接入项目，本项目已支持的本地模型部署框架如下：\n\n| 模型部署框架             | Xinference                                                                               | LocalAI                                                    | Ollama                                                                         | FastChat                                                                             |\n|--------------------|------------------------------------------------------------------------------------------|------------------------------------------------------------|--------------------------------------------------------------------------------|--------------------------------------------------------------------------------------|\n| OpenAI API 接口对齐    | ✅                                                                                        | ✅                                                          | ✅                                                                              | ✅                                                                                    |\n| 加速推理引擎             | GPTQ, GGML, vLLM, TensorRT, mlx                                                          | GPTQ, GGML, vLLM, TensorRT                                 | GGUF, GGML                                                                     | vLLM                                                                                 |\n| 接入模型类型             | LLM, Embedding, Rerank, Text-to-Image, Vision, Audio                                     | LLM, Embedding, Rerank, Text-to-Image, Vision, Audio       | LLM, Text-to-Image, Vision                                                     | LLM, Vision                                                                          |\n| Function Call      | ✅                                                                                        | ✅                                                          | ✅                                                                              | /                                                                                    |\n| 更多平台支持(CPU, Metal) | ✅                                                                                        | ✅                                                          | ✅                                                                              | ✅                                                                                    |\n| 异构                 | ✅                                                                                        | ✅                                                          | /                                                                              | /                                                                                    |\n| 集群                 | ✅                                                                                        | ✅                                                          | /                                                                              | /                                                                                    |\n| 操作文档链接             | [Xinference 文档](https://inference.readthedocs.io/zh-cn/latest/models/builtin/index.html) | [LocalAI 文档](https://localai.io/model-compatibility/)      | [Ollama 文档](https://github.com/ollama/ollama?tab=readme-ov-file#model-library) | [FastChat 文档](https://github.com/lm-sys/FastChat#install)                            |\n| 可用模型               | [Xinference 已支持模型](https://inference.readthedocs.io/en/latest/models/builtin/index.html) | [LocalAI 已支持模型](https://localai.io/model-compatibility/#/) | [Ollama 已支持模型](https://ollama.com/library#/)                                   | [FastChat 已支持模型](https://github.com/lm-sys/FastChat/blob/main/docs/model_support.md) |\n\n除上述本地模型加载框架外，项目中也为可接入在线 API 的 [One API](https://github.com/songquanpeng/one-api)\n框架接入提供了支持，支持包括 [OpenAI ChatGPT](https://platform.openai.com/docs/guides/gpt/chat-completions-api)、[Azure OpenAI API](https://learn.microsoft.com/en-us/azure/ai-services/openai/reference)、[Anthropic Claude](https://anthropic.com/)、[智谱清言](https://bigmodel.cn/)、[百川](https://platform.baichuan-ai.com/)\n等常用在线 API 的接入使用。\n\n> [!Note]\n> 关于 Xinference 加载本地模型:\n> Xinference 内置模型会自动下载,如果想让它加载本机下载好的模型,可以在启动 Xinference 服务后,到项目 tools/model_loaders\n> 目录下执行 `streamlit run xinference_manager.py`,按照页面提示为指定模型设置本地路径即可.\n\n## 快速上手\n\n### pip 安装部署\n\n#### 0. 软硬件要求\n\n💡 软件方面，本项目已支持在 Python 3.8-3.11 环境中进行使用，并已在 Windows、macOS、Linux 操作系统中进行测试。\n\n💻 硬件方面，因 0.3.0 版本已修改为支持不同模型部署框架接入，因此可在 CPU、GPU、NPU、MPS 等不同硬件条件下使用。\n\n#### 1. 安装 Langchain-Chatchat\n\n从 0.3.0 版本起，Langchain-Chatchat 提供以 Python 库形式的安装方式，具体安装请执行：\n\n```shell\npip install langchain-chatchat -U\n```\n\n> [!important]\n> 为确保所使用的 Python 库为最新版，建议使用官方 Pypi 源或清华源。\n\n> [!Note]\n> 因模型部署框架 Xinference 接入 Langchain-Chatchat 时需要额外安装对应的 Python 依赖库，因此如需搭配 Xinference\n> 框架使用时，建议使用如下安装方式：\n> ```shell\n> pip install \"langchain-chatchat[xinference]\" -U\n> ```\n\n#### 2. 模型推理框架并加载模型\n\n从 0.3.0 版本起，Langchain-Chatchat 不再根据用户输入的本地模型路径直接进行模型加载，涉及到的模型种类包括\nLLM、Embedding、Reranker\n及后续会提供支持的多模态模型等，均改为支持市面常见的各大模型推理框架接入，如 [Xinference](https://github.com/xorbitsai/inference)、[Ollama](https://github.com/ollama/ollama)、[LocalAI](https://github.com/mudler/LocalAI)、[FastChat](https://github.com/lm-sys/FastChat)、[One API](https://github.com/songquanpeng/one-api)\n等。\n\n因此，请确认在启动 Langchain-Chatchat 项目前，首先进行模型推理框架的运行，并加载所需使用的模型。\n\n这里以 Xinference 举例,\n请参考 [Xinference文档](https://inference.readthedocs.io/zh-cn/latest/getting_started/installation.html) 进行框架部署与模型加载。\n\n> [!WARNING]  \n> 为避免依赖冲突，请将 Langchain-Chatchat 和模型部署框架如 Xinference 等放在不同的 Python 虚拟环境中, 比如 conda, venv,\n> virtualenv 等。\n\n#### 3. 初始化项目配置与数据目录\n\n从 0.3.1 版本起，Langchain-Chatchat 使用本地 `yaml` 文件的方式进行配置，用户可以直接查看并修改其中的内容，服务器会自动更新无需重启。\n\n1. 设置 Chatchat 存储配置文件和数据文件的根目录（可选）\n\n```shell\n# on linux or macos\nexport CHATCHAT_ROOT=/path/to/chatchat_data\n\n# on windows\nset CHATCHAT_ROOT=/path/to/chatchat_data\n```\n\n若不设置该环境变量，则自动使用当前目录。\n\n2. 执行初始化\n\n```shell\nchatchat init\n```\n\n该命令会执行以下操作：\n\n- 创建所有需要的数据目录\n- 复制 samples 知识库内容\n- 生成默认 `yaml` 配置文件\n\n3. 修改配置文件\n\n- 配置模型（model_settings.yaml）  \n  需要根据步骤 **2. 模型推理框架并加载模型**\n  中选用的模型推理框架与加载的模型进行模型接入配置，具体参考 `model_settings.yaml` 中的注释。主要修改以下内容：\n  ```yaml\n  # 默认选用的 LLM 名称\n   DEFAULT_LLM_MODEL: qwen1.5-chat\n\n   # 默认选用的 Embedding 名称\n   DEFAULT_EMBEDDING_MODEL: bge-large-zh-v1.5\n\n  # 将 `LLM_MODEL_CONFIG` 中 `llm_model, action_model` 的键改成对应的 LLM 模型\n  # 在 `MODEL_PLATFORMS` 中修改对应模型平台信息\n  ```\n- 配置知识库路径（basic_settings.yaml）（可选）  \n  默认知识库位于 `CHATCHAT_ROOT/data/knowledge_base`，如果你想把知识库放在不同的位置，或者想连接现有的知识库，可以在这里修改对应目录即可。\n  ```yaml\n  # 知识库默认存储路径\n   KB_ROOT_PATH: D:\\chatchat-test\\data\\knowledge_base\n\n   # 数据库默认存储路径。如果使用sqlite，可以直接修改DB_ROOT_PATH；如果使用其它数据库，请直接修改SQLALCHEMY_DATABASE_URI。\n   DB_ROOT_PATH: D:\\chatchat-test\\data\\knowledge_base\\info.db\n\n   # 知识库信息数据库连接URI\n   SQLALCHEMY_DATABASE_URI: sqlite:///D:\\chatchat-test\\data\\knowledge_base\\info.db\n  ```\n- 配置知识库（kb_settings.yaml）（可选）\n\n  默认使用 `FAISS` 知识库，如果想连接其它类型的知识库，可以修改 `DEFAULT_VS_TYPE` 和 `kbs_config`。\n\n#### 4. 初始化知识库\n\n> [!WARNING]  \n> 进行知识库初始化前，请确保已经启动模型推理框架及对应 `embedding` 模型，且已按照上述**步骤3**完成模型接入配置。\n\n```shell\nchatchat kb -r\n```\n\n更多功能可以查看 `chatchat kb --help`\n\n出现以下日志即为成功:\n\n```text \n\n----------------------------------------------------------------------------------------------------\n知识库名称      ：samples\n知识库类型      ：faiss\n向量模型：      ：bge-large-zh-v1.5\n知识库路径      ：/root/anaconda3/envs/chatchat/lib/python3.11/site-packages/chatchat/data/knowledge_base/samples\n文件总数量      ：47\n入库文件数      ：42\n知识条目数      ：740\n用时            ：0:02:29.701002\n----------------------------------------------------------------------------------------------------\n\n总计用时        ：0:02:33.414425\n\n```\n\n> [!Note]\n> 知识库初始化的常见问题\n>\n> <details>\n>\n> ##### 1. Windows 下重建知识库或添加知识文件时卡住不动\n> 此问题常出现于新建虚拟环境中，可以通过以下方式确认：\n>\n> `from unstructured.partition.auto import partition`\n>\n> 如果该语句卡住无法执行，可以执行以下命令：\n> ```shell\n> pip uninstall python-magic-bin\n> # check the version of the uninstalled package\n> pip install 'python-magic-bin=={version}'\n> ```\n> 然后按照本节指引重新创建知识库即可。\n>\n> </details>\n\n#### 5. 启动项目\n\n```shell\nchatchat start -a\n```\n\n出现以下界面即为启动成功:\n\n![WebUI界面](docs/img/langchain_chatchat_webui.png)\n\n> [!WARNING]  \n> 由于 chatchat 配置默认监听地址 `DEFAULT_BIND_HOST` 为 127.0.0.1, 所以无法通过其他 ip 进行访问。\n>\n> 如需通过机器ip 进行访问(如 Linux 系统), 需要到 `basic_settings.yaml` 中将监听地址修改为 0.0.0.0。\n> </details>\n\n### 其它配置\n\n1. 数据库对话配置请移步这里 [数据库对话配置说明](docs/install/README_text2sql.md)\n\n\n### 源码安装部署/开发部署\n\n源码安装部署请参考 [开发指南](docs/contributing/README_dev.md)\n\n### Docker 部署\n\n```shell\ndocker pull chatimage/chatchat:0.3.1.3-93e2c87-20240829\n\ndocker pull ccr.ccs.tencentyun.com/langchain-chatchat/chatchat:0.3.1.3-93e2c87-20240829 # 国内镜像\n```\n\n> [!important]\n> 强烈建议: 使用 docker-compose 部署, 具体参考 [README_docker](docs/install/README_docker.md)\n\n### 旧版本迁移\n\n* 0.3.x 结构改变很大,强烈建议您按照文档重新部署. 以下指南不保证100%兼容和成功. 记得提前备份重要数据!\n\n- 首先按照 `安装部署` 中的步骤配置运行环境，修改配置文件\n- 将 0.2.x 项目的 knowledge_base 目录拷贝到配置的 `DATA` 目录下\n\n---\n\n## 项目里程碑\n\n+ `2023年4月`: `Langchain-ChatGLM 0.1.0` 发布，支持基于 ChatGLM-6B 模型的本地知识库问答。\n+ `2023年8月`: `Langchain-ChatGLM` 改名为 `Langchain-Chatchat`，发布 `0.2.0` 版本，使用 `fastchat` 作为模型加载方案，支持更多的模型和数据库。\n+ `2023年10月`: `Langchain-Chatchat 0.2.5` 发布，推出 Agent 内容，开源项目在`Founder Park & Zhipu AI & Zilliz`\n  举办的黑客马拉松获得三等奖。\n+ `2023年12月`: `Langchain-Chatchat` 开源项目获得超过 **20K** stars.\n+ `2024年6月`: `Langchain-Chatchat 0.3.0` 发布，带来全新项目架构。\n\n+ 🔥 让我们一起期待未来 Chatchat 的故事 ···\n\n---\n\n## 协议\n\n本项目代码遵循 [Apache-2.0](LICENSE) 协议。\n\n## 联系我们\n\n### Telegram\n\n[![Telegram](https://img.shields.io/badge/Telegram-2CA5E0?style=for-the-badge&logo=telegram&logoColor=white \"langchain-chatchat\")](https://t.me/+RjliQ3jnJ1YyN2E9)\n\n### 项目交流群\n\n<img src=\"docs/img/qr_code_117_2.jpg\" alt=\"二维码\" width=\"300\" />\n\n🎉 Langchain-Chatchat 项目微信交流群，如果你也对本项目感兴趣，欢迎加入群聊参与讨论交流。\n\n### 公众号\n\n<img src=\"docs/img/official_wechat_mp_account.png\" alt=\"二维码\" width=\"300\" />\n\n🎉 Langchain-Chatchat 项目官方公众号，欢迎扫码关注。\n\n## 引用\n\n如果本项目有帮助到您的研究，请引用我们：\n\n```\n@software{langchain_chatchat,\n    title        = {{langchain-chatchat}},\n    author       = {Liu, Qian and Song, Jinke, and Huang, Zhiguo, and Zhang, Yuxuan, and glide-the, and liunux4odoo},\n    year         = 2024,\n    journal      = {GitHub repository},\n    publisher    = {GitHub},\n    howpublished = {\\url{https://github.com/chatchat-space/Langchain-Chatchat}}\n}\n```\n"
        },
        {
          "name": "README_en.md",
          "type": "blob",
          "size": 26.666015625,
          "content": "![](docs/img/logo-long-chatchat-trans-v2.png)\n\n[![pypi badge](https://img.shields.io/pypi/v/langchain-chatchat.svg)](https://shields.io/)\n[![Generic badge](https://img.shields.io/badge/python-3.8%7C3.9%7C3.10%7C3.11-blue.svg)](https://pypi.org/project/pypiserver/)\n\n🌍 [READ THIS IN CHINESE](README.md)\n\n📃 **LangChain-Chatchat** (formerly Langchain-ChatGLM)\n\nAn open-source, offline-deployable RAG and Agent application project based on large language models like ChatGLM and\napplication frameworks like Langchain.\n\n---\n\n## Contents\n\n* [Overview](README_en.md#Overview)\n* [Features](README_en.md#What-Does-Langchain-Chatchat-Offer)\n* [Quick Start](README_en.md#Quick-Start)\n    * [Installation](README_en.md#Installation)\n* [Contact Us](README_en.md#Contact-Us)\n\n## Overview\n\n🤖️ A question-answering application based on local knowledge bases using\nthe [langchain](https://github.com/langchain-ai/langchain) concept. The goal is to create a friendly and\noffline-operable knowledge base Q&A solution that supports Chinese scenarios and open-source models.\n\n💡 Inspired by [GanymedeNil](https://github.com/GanymedeNil)'s\nproject [document.ai](https://github.com/GanymedeNil/document.ai) and [AlexZhangji](https://github.com/AlexZhangji)'\ns [ChatGLM-6B Pull Request](https://github.com/THUDM/ChatGLM-6B/pull/216), this project aims to establish a local\nknowledge base Q&A application fully utilizing open-source models. The latest version of the project\nuses [FastChat](https://github.com/lm-sys/FastChat) to integrate models like Vicuna, Alpaca, LLaMA, Koala, and RWKV,\nleveraging the [langchain](https://github.com/langchain-ai/langchain) framework to support API calls provided\nby [FastAPI](https://github.com/tiangolo/fastapi) or operations using a WebUI based\non [Streamlit](https://github.com/streamlit/streamlit).\n\n![](docs/img/langchain_chatchat_0.3.0.png)\n\n✅ This project supports mainstream open-source LLMs, embedding models, and vector databases, allowing full **open-source\n** model **offline private deployment**. Additionally, the project supports OpenAI GPT API\ncalls and will continue to expand access to various models and model APIs.\n\n⛓️ The implementation principle of this project is as shown below, including loading files -> reading text -> text\nsegmentation -> text vectorization -> question vectorization -> matching the `top k` most similar text vectors with the\nquestion vector -> adding the matched text as context along with the question to the `prompt` -> submitting to the `LLM`\nfor generating answers.\n\n📺 [Introduction Video](https://www.bilibili.com/video/BV13M4y1e7cN/?share_source=copy_web&vd_source=e6c5aafe684f30fbe41925d61ca6d514)\n\n![Implementation Diagram](docs/img/langchain+chatglm.png)\n\nFrom the document processing perspective, the implementation process is as follows:\n\n![Implementation Diagram 2](docs/img/langchain+chatglm2.png)\n\n🚩 This project does not involve fine-tuning or training processes but can utilize fine-tuning or training to optimize\nthe project's performance.\n\n🌐 The `0.3.0` version code used in\nthe [AutoDL Mirror](https://www.codewithgpu.com/i/chatchat-space/Langchain-Chatchat/Langchain-Chatchat) has been updated\nto version `v0.3.0` of this project.\n\n🐳 Docker images will be updated soon.\n\n🧑‍💻 If you want to contribute to this project, please refer to the [Developer Guide](docs/contributing/README_dev.md)\nfor more information on development and deployment.\n\n## What Does Langchain-Chatchat Offer\n\n### Features of Version 0.3.x\n\n| Features                        | 0.2.x                                     | 0.3.x                                                                                                                                                   |\n|---------------------------------|-------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Model Integration               | Local: fastchat<br>Online: XXXModelWorker | Local: model_provider, supports most mainstream model loading frameworks<br>Online: oneapi<br>All model integrations are compatible with the openai sdk |\n| Agent                           | ❌ Unstable                                | ✅ Optimized for ChatGLM3 and QWen, significantly enhanced Agent capabilities                                                                            ||\n| LLM Conversations               | ✅                                         | ✅                                                                                                                                                       ||\n| Knowledge Base Conversations    | ✅                                         | ✅                                                                                                                                                       ||\n| Search Engine Conversations     | ✅                                         | ✅                                                                                                                                                       ||\n| File Conversations              | ✅ Only vector search                      | ✅ Unified as File RAG feature, supports BM25+KNN and other retrieval methods                                                                            ||\n| Database Conversations          | ❌                                         | ✅                                                                                                                                                       ||\n| ARXIV Document Conversations    | ❌                                         | ✅                                                                                                                                                       ||\n| Wolfram Conversations           | ❌                                         | ✅                                                                                                                                                       ||\n| Text-to-Image                   | ❌                                         | ✅                                                                                                                                                       ||\n| Local Knowledge Base Management | ✅                                         | ✅                                                                                                                                                       ||\n| WEBUI                           | ✅                                         | ✅ Better multi-session support, custom system prompts...                                                                                                |\n\nThe core functionality of 0.3.x is implemented by Agent, but users can also manually perform tool calls:\n|Operation Method|Function Implemented|Applicable Scenario|\n|----------------|--------------------|-------------------|\n|Select \"Enable Agent\", choose multiple tools|Automatic tool calls by LLM|Using models with Agent capabilities like\nChatGLM3/Qwen or online APIs|\n|Select \"Enable Agent\", choose a single tool|LLM only parses tool parameters|Using models with general Agent\ncapabilities, unable to choose tools well<br>Want to manually select functions|\n|Do not select \"Enable Agent\", choose a single tool|Manually fill in parameters for tool calls without using Agent\nfunction|Using models without Agent capabilities|\n\nMore features and updates can be experienced in the actual deployment.\n\n### Supported Model Deployment Frameworks and Models\n\nThis project already supports mainstream models on the market, such as [GLM-4-Chat](https://github.com/THUDM/GLM-4)\nand [Qwen2-Instruct](https://github.com/QwenLM/Qwen2), among the latest open-source large language models and embedding\nmodels. Users need to start the model deployment framework and load the required models by modifying the configuration\ninformation. The supported local model deployment frameworks in this project are as follows:\n\n| Model Deployment Framework         | Xinference                                                                                          | LocalAI                                                               | Ollama                                                                                    | FastChat                                                                                        |\n|------------------------------------|-----------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------|-------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------|\n| Aligned with OpenAI API            | ✅                                                                                                   | ✅                                                                     | ✅                                                                                         | ✅                                                                                               |\n| Accelerated Inference Engine       | GPTQ, GGML, vLLM, TensorRT                                                                          | GPTQ, GGML, vLLM, TensorRT                                            | GGUF, GGML                                                                                | vLLM                                                                                            |\n| Model Types Supported              | LLM, Embedding, Rerank, Text-to-Image, Vision, Audio                                                | LLM, Embedding, Rerank, Text-to-Image, Vision, Audio                  | LLM, Text-to-Image, Vision                                                                | LLM, Vision                                                                                     |\n| Function Call                      | ✅                                                                                                   | ✅                                                                     | ✅                                                                                         | /                                                                                               |\n| More Platform Support (CPU, Metal) | ✅                                                                                                   | ✅                                                                     | ✅                                                                                         | ✅                                                                                               |\n| Heterogeneous                      | ✅                                                                                                   | ✅                                                                     | /                                                                                         | /                                                                                               |\n| Cluster                            | ✅                                                                                                   | ✅                                                                     | /                                                                                         | /                                                                                               |\n| Documentation Link                 | [Xinference Documentation](https://inference.readthedocs.io/zh-cn/latest/models/builtin/index.html) | [LocalAI Documentation](https://localai.io/model-compatibility/)      | [Ollama Documentation](https://github.com/ollama/ollama?tab=readme-ov-file#model-library) | [FastChat Documentation](https://github.com/lm-sys/FastChat#install)                            |\n| Available Models                   | [Xinference Supported Models](https://inference.readthedocs.io/en/latest/models/builtin/index.html) | [LocalAI Supported Models](https://localai.io/model-compatibility/#/) | [Ollama Supported Models](https://ollama.com/library#)                                    | [FastChat Supported Models](https://github.com/lm-sys/FastChat/blob/main/docs/model_support.md) |\n\nIn addition to the above local model loading frameworks, the project also supports\nthe [One API](https://github.com/songquanpeng/one-api) framework for integrating online APIs, supporting commonly used\nonline APIs such\nas [OpenAI ChatGPT](https://platform.openai.com/docs/guides/gpt/chat-completions-api), [Azure OpenAI API](https://learn.microsoft.com/en-us/azure/ai-services/openai/reference), [Anthropic Claude](https://anthropic.com/), [Zhipu Qingyan](https://bigmodel.cn/),\nand [Baichuan](https://platform.baichuan-ai.com/).\n\n> [!Note]\n> Regarding Xinference loading local models:\n> Xinference built-in models will automatically download. To load locally downloaded models, you can\n> execute `streamlit run xinference_manager.py` in the tools/model_loaders directory of the project after starting the\n> Xinference service and set the local path for the specified model as prompted on the page.\n\n## Quick Start\n\n### Installation\n\n#### 0. Software and Hardware Requirements\n\n💡 On the software side, this project supports Python 3.8-3.11 environments and has been tested on Windows, macOS, and\nLinux operating systems.\n\n💻 On the hardware side, as version 0.3.0 has been modified to support integration with different model deployment\nframeworks, it can be used under various hardware conditions such as CPU, GPU, NPU, and MPS.\n\n#### 1. Install Langchain-Chatchat\n\nStarting from version 0.3.0, Langchain-Chatchat provides installation in the form of a Python library. Execute the\nfollowing command for installation:\n\n```shell\npip install langchain-chatchat -U\n```\n\n[!Note]\n> Since the model deployment framework Xinference requires additional Python dependencies when integrated with\n> Langchain-Chatchat, it is recommended to use the following installation method if you want to use it with the\n> Xinference\n> framework:\n> ```shell\n> pip install \"langchain-chatchat[xinference]\" -U\n> ```\n\n2. Model Inference Framework and Load Models\n\n2. Model Inference Framework and Load Models\n\nStarting from version 0.3.0, Langchain-Chatchat no longer directly loads models based on the local model path entered by\nusers. The involved model types include LLM, Embedding, Reranker, and the multi-modal models to be supported in the\nfuture. Instead, it supports integration with mainstream model inference frameworks such\nas [Xinference](https://github.com/xorbitsai/inference), [Ollama](https://github.com/ollama/ollama), [LocalAI](https://github.com/mudler/LocalAI), [FastChat](https://github.com/lm-sys/FastChat)\nand [One API](https://github.com/songquanpeng/one-api).\n\nTherefore, please ensure to run the model inference framework and load the required models before starting\nLangchain-Chatchat.\n\nHere is an example of Xinference. Please refer to\nthe [Xinference Document](https://inference.readthedocs.io/zh-cn/latest/getting_started/installation.html) for framework\ndeployment and model loading.\n\n> [!WARNING]  \n> To avoid dependency conflicts, place Langchain-Chatchat and model deployment frameworks like Xinference in different\n> Python virtual environments, such as conda, venv, virtualenv, etc.\n\n#### 3. View and Modify Langchain-Chatchat Configuration\n\nStarting from version 0.3.0, Langchain-Chatchat no longer modifies the configuration through local files but uses\ncommand-line methods and will add configuration item modification pages in future versions.\n\nThe following introduces how to view and modify the configuration.\n\n##### 3.1 View chatchat-config Command Help\n\nEnter the following command to view the optional configuration types:\n\n```shell\nchatchat-config --help\n```\n\nYou will get the following response:\n\n```text \nUsage: chatchat-config [OPTIONS] COMMAND [ARGS]...\n\n  指令` chatchat-config` 工作空间配置\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  basic   基础配置\n  kb      知识库配置\n  model   模型配置\n  server  服务配置\n```\n\nYou can choose the required configuration type based on the above commands. For example, to view or\nmodify `basic configuration`, you can enter the following command to get help information:\n\n```shell\nchatchat-config basic --help\n```\n\nYou will get the following response:\n\n```text\nUsage: chatchat-config basic [OPTIONS]\n\n  基础配置\n\nOptions:\n  --verbose [true|false]  是否开启详细日志\n  --data TEXT             初始化数据存放路径，注意：目录会清空重建\n  --format TEXT           日志格式\n  --clear                 清除配置\n  --show                  显示配置\n  --help                  Show this message and exit.\n```\n\n##### 3.2 Use chatchat-config to Modify Corresponding Configuration Parameters\n\nTo modify the `default llm` model in `model configuration`, you can execute the following command to view the\nconfiguration item names:\n\n```shell\nchatchat-config basic --show\n```\n\nIf no configuration item modification is made, the default configuration is as follows:\n\n```text \n{\n    \"log_verbose\": false,\n    \"CHATCHAT_ROOT\": \"/root/anaconda3/envs/chatchat/lib/python3.11/site-packages/chatchat\",\n    \"DATA_PATH\": \"/root/anaconda3/envs/chatchat/lib/python3.11/site-packages/chatchat/data\",\n    \"IMG_DIR\": \"/root/anaconda3/envs/chatchat/lib/python3.11/site-packages/chatchat/img\",\n    \"NLTK_DATA_PATH\": \"/root/anaconda3/envs/chatchat/lib/python3.11/site-packages/chatchat/data/nltk_data\",\n    \"LOG_FORMAT\": \"%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s\",\n    \"LOG_PATH\": \"/root/anaconda3/envs/chatchat/lib/python3.11/site-packages/chatchat/data/logs\",\n    \"MEDIA_PATH\": \"/root/anaconda3/envs/chatchat/lib/python3.11/site-packages/chatchat/data/media\",\n    \"BASE_TEMP_DIR\": \"/root/anaconda3/envs/chatchat/lib/python3.11/site-packages/chatchat/data/temp\",\n    \"class_name\": \"ConfigBasic\"\n}\n```\n\n##### 3.3 Use chatchat-config to Modify Corresponding Configuration Parameters\n\nTo modify the default `llm model` in `model configuration`, you can execute the following command to view the\nconfiguration item names:\n\n```shell\nchatchat-config model --help\n```\n\nYou will get:\n\n```text \nUsage: chatchat-config model [OPTIONS]\n\n  模型配置\n\nOptions:\n  --default_llm_model TEXT        默认llm模型\n  --default_embedding_model TEXT  默认embedding模型\n  --agent_model TEXT              agent模型\n  --history_len INTEGER           历史长度\n  --max_tokens INTEGER            最大tokens\n  --temperature FLOAT             温度\n  --support_agent_models TEXT     支持的agent模型\n  --set_model_platforms TEXT      模型平台配置 as a JSON string.\n  --set_tool_config TEXT          工具配置项  as a JSON string.\n  --clear                         清除配置\n  --show                          显示配置\n  --help                          Show this message and exit.\n```\n\nFirst, view the current `model configuration` parameters:\n\n```shell\nchatchat-config model --show\n```\n\nYou will get:\n\n```text \n{\n    \"DEFAULT_LLM_MODEL\": \"glm4-chat\",\n    \"DEFAULT_EMBEDDING_MODEL\": \"bge-large-zh-v1.5\",\n    \"Agent_MODEL\": null,\n    \"HISTORY_LEN\": 3,\n    \"MAX_TOKENS\": null,\n    \"TEMPERATURE\": 0.7,\n    ...\n    \"class_name\": \"ConfigModel\"\n}\n```\n\nTo modify the `default llm` model to `qwen2-instruct`, execute:\n\n```shell\nchatchat-config model --default_llm_model qwen2-instruct\n```\n\nFor more configuration modification help, refer to  [README.md](libs/chatchat-server/README.md)\n\n4. Custom Model Integration Configuration\n\nAfter completing the above project configuration item viewing and modification, proceed to step 2. Model Inference\nFramework and Load Models and select the model inference framework and loaded models. Model inference frameworks include\n[Xinference](https://github.com/xorbitsai/inference),[Ollama](https://github.com/ollama/ollama),[LocalAI](https://github.com/mudler/LocalAI),[FastChat](https://github.com/lm-sys/FastChat)\nand [One API](https://github.com/songquanpeng/one-api), supporting new Chinese open-source models\nlike [GLM-4-Chat](https://github.com/THUDM/GLM-4) and [Qwen2-Instruct](https://github.com/QwenLM/Qwen2)\n\nIf you already have an address with the capability of an OpenAI endpoint, you can directly configure it in\nMODEL_PLATFORMS as follows:\n\n```text\nchatchat-config model --set_model_platforms TEXT      Configure model platforms as a JSON string.\n```\n\n- `platform_name` can be arbitrarily filled, just ensure it is unique.\n- `platform_type` might be used in the future for functional distinctions based on platform types, so it should match\n  the platform_name.\n- List the models deployed on the framework in the corresponding list. Different frameworks can load models with the\n  same name, and the project will automatically balance the load.\n- Set up the model\n\n```shell\n$ chatchat-config model --set_model_platforms \"[{\n    \\\"platform_name\\\": \\\"xinference\\\",\n    \\\"platform_type\\\": \\\"xinference\\\",\n    \\\"api_base_url\\\": \\\"http://127.0.0.1:9997/v1\\\",\n    \\\"api_key\\\": \\\"EMPT\\\",\n    \\\"api_concurrencies\\\": 5,\n    \\\"llm_models\\\": [\n        \\\"autodl-tmp-glm-4-9b-chat\\\"\n    ],\n    \\\"embed_models\\\": [\n        \\\"bge-large-zh-v1.5\\\"\n    ],\n    \\\"image_models\\\": [],\n    \\\"reranking_models\\\": [],\n    \\\"speech2text_models\\\": [],\n    \\\"tts_models\\\": []\n}]\"\n```\n\n#### 5. Initialize Knowledge Base\n\n> [!WARNING]\n> Before initializing the knowledge base, ensure that the model inference framework and corresponding embedding model\n> are\n> running, and complete the model integration configuration as described in steps 3 and 4.\n\n```shell\ncd # Return to the original directory\nchatchat-kb -r\n```\n\nSpecify text-embedding model for initialization (if needed):\n\n```\ncd # Return to the original directory\nchatchat-kb -r --embed-model=text-embedding-3-smal\n```\n\nSuccessful output will be:\n\n```text \n\n----------------------------------------------------------------------------------------------------\n知识库名称      ：samples\n知识库类型      ：faiss\n向量模型：      ：bge-large-zh-v1.5\n知识库路径      ：/root/anaconda3/envs/chatchat/lib/python3.11/site-packages/chatchat/data/knowledge_base/samples\n文件总数量      ：47\n入库文件数      ：42\n知识条目数      ：740\n用时            ：0:02:29.701002\n----------------------------------------------------------------------------------------------------\n\n总计用时        ：0:02:33.414425\n\n```\n\nThe knowledge base path is in the knowledge_base directory under the path pointed by the *DATA_PATH* variable in\nstep `3.2`:\n\n```shell\n(chatchat) [root@VM-centos ~]#  ls /root/anaconda3/envs/chatchat/lib/python3.11/site-packages/chatchat/data/knowledge_base/samples/vector_store\nbge-large-zh-v1.5  text-embedding-3-small\n```\n\n##### Frequently asked questions\n\n##### 1. Stuck when rebuilding the knowledge base or adding knowledge files under Windows\n\nThis issue often occurs in newly created virtual environments and can be confirmed through the following methods:\n\n`from unstructured.partition.auto import partition`\n\nIf the statement gets stuck and cannot be executed, the following command can be executed:\n\n```shell\npip uninstall python-magic-bin\n# check the version of the uninstalled package\npip install 'python-magic-bin=={version}'\n```\n\nThen follow the instructions in this section to recreate the knowledge base.\n\n#### 6. Start the Project\n\n```shell\nchatchat -a\n```\n\nSuccessful startup output:\n\n![WebUI](docs/img/langchain_chatchat_webui.png)\n\n> [!WARNING]\n> As the `DEFAULT_BIND_HOST` of the chatchat-config server configuration is set to `127.0.0.1` by default, it cannot be\n> accessed through other IPs.\n>\n> To modify, refer to the following method:\n> <details>\n> <summary>Instructions</summary>\n>\n> ```shell\n> chatchat-config server --show\n> ```\n> You will get:\n> ```text \n> {\n>     \"HTTPX_DEFAULT_TIMEOUT\": 300.0,\n>     \"OPEN_CROSS_DOMAIN\": true,\n>     \"DEFAULT_BIND_HOST\": \"127.0.0.1\",\n>     \"WEBUI_SERVER_PORT\": 8501,\n>     \"API_SERVER_PORT\": 7861,\n>     \"WEBUI_SERVER\": {\n>         \"host\": \"127.0.0.1\",\n>         \"port\": 8501\n>     },\n>     \"API_SERVER\": {\n>         \"host\": \"127.0.0.1\",\n>         \"port\": 7861\n>     },\n>     \"class_name\": \"ConfigServer\"\n> }\n> ```\n> To access via the machine's IP (such as in a Linux system), change the listening address to `0.0.0.0`.\n> ```shell\n> chatchat-config server --default_bind_host=0.0.0.0\n> ```\n> You will get:\n> ```text \n> {\n>     \"HTTPX_DEFAULT_TIMEOUT\": 300.0,\n>     \"OPEN_CROSS_DOMAIN\": true,\n>     \"DEFAULT_BIND_HOST\": \"0.0.0.0\",\n>     \"WEBUI_SERVER_PORT\": 8501,\n>     \"API_SERVER_PORT\": 7861,\n>     \"WEBUI_SERVER\": {\n>         \"host\": \"0.0.0.0\",\n>         \"port\": 8501\n>     },\n>     \"API_SERVER\": {\n>         \"host\": \"0.0.0.0\",\n>         \"port\": 7861\n>     },\n>     \"class_name\": \"ConfigServer\"\n> }\n> ```\n> </details>\n\n### Migration from Older Versions\n\n* The structure of 0.3.x has changed significantly, it is strongly recommended to redeploy according to the\n  documentation.\n  The following guide does not guarantee 100% compatibility and success. Remember to backup important data in advance!\n\n- First configure the operating environment according to the steps in `Installation`.\n- Configure `DATA` and other options.\n- Copy the knowledge_base directory of the 0.2.x project to the configured `DATA` directory.\n\n---\n\n## License\n\nThe code of this project follows the [Apache-2.0](LICENSE) agreement.\n\n## Project Milestones\n\n+ `April 2023`: `Langchain-ChatGLM 0.1.0` released, supporting local knowledge base question and answer based on\n  ChatGLM-6B model.\n+ `August 2023`: `Langchain-ChatGLM` renamed to `Langchain-Chatchat`, released `0.2.0` version, using `fastchat` as\n  model loading solution, supporting more models and databases.\n+ `October 2023`: `Langchain-Chatchat 0.2.5` released, launching Agent content, open source project won the third prize\n  in the hackathon held by `Founder Park & ​​Zhipu AI & Zilliz`.\n+ `December 2023`: `Langchain-Chatchat` open source project received more than **20K** stars.\n+ `June 2024`: `Langchain-Chatchat 0.3.0` released, bringing a new project architecture.\n\n+ 🔥 Let us look forward to the future story of Chatchat ···\n\n## Contact Us\n\n### Telegram\n\n[![Telegram](https://img.shields.io/badge/Telegram-2CA5E0?style=for-the-badge&logo=telegram&logoColor=white \"langchain-chatchat\")](https://t.me/+RjliQ3jnJ1YyN2E9)\n\n### Project Exchange Group\n\n<img src=\"docs/img/qr_code_109.jpg\" alt=\"二维码\" width=\"300\" />\n\n🎉 Langchain-Chatchat project WeChat exchange group, if you are also interested in this project, welcome to join the\ngroup chat to participate in the discussion.\n\n### Official Account\n\n<img src=\"docs/img/official_wechat_mp_account.png\" alt=\"二维码\" width=\"300\" />\n\n🎉 Langchain-Chatchat project official public account, welcome to scan the code to follow.\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "frontend",
          "type": "tree",
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "markdown_docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "poetry.toml",
          "type": "blob",
          "size": 0.1015625,
          "content": "[virtualenvs]\nin-project = true\n\n[plugins.pypi_mirror]\nurl = \"https://pypi.tuna.tsinghua.edu.cn/simple\"\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.3037109375,
          "content": "[tool.poetry]\nname = \"Chatchat\"\nversion = \"0.3.0\"\ndescription = \"Langchain-Chatchat\"\nauthors = [\"chatchat\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\nrepository = \"https://github.com/chatchat-space/Langchain-Chatchat.git\"\npackage-mode = false\n\n[tool.poetry.dependencies]\npython = \">=3.8.1,<3.12,!=3.9.7\"\n\n\n[tool.ruff]\nextend-include = [\"*.ipynb\"]\nextend-exclude = [\n    \"docs/docs/expression_language/why.ipynb\"  # TODO: look into why linter errors\n]\n\n[tool.ruff.lint.per-file-ignores]\n\"**/{cookbook,docs}/*\" = [\n    \"E402\",  # allow imports to appear anywhere in docs\n    \"F401\",  # allow \"imported but unused\" example code\n    \"F811\",  # allow re-importing the same module, so that cells can stay independent\n    \"F841\",  # allow assignments to variables that are never read -- it's example code\n]\n\n# These files were failing the listed rules at the time ruff was adopted for notebooks.\n# Don't require them to change at once, though we should look into them eventually.\n\"cookbook/gymnasium_agent_simulation.ipynb\" = [\"F821\"]\n\"docs/docs/integrations/document_loaders/tensorflow_datasets.ipynb\" = [\"F821\"]\n\n[tool.poetry.plugins.dotenv]\nignore = \"false\"\ndotenv = \"dotenv:plugin\"\n\n\n# https://python-poetry.org/docs/repositories/\n[[tool.poetry.source]]\nname = \"tsinghua\"\nurl = \"https://pypi.tuna.tsinghua.edu.cn/simple/\"\npriority = \"primary\"\n"
        },
        {
          "name": "release.py",
          "type": "blob",
          "size": 1.513671875,
          "content": "import os\nimport subprocess\nimport re\n\ndef get_latest_tag():\n    output = subprocess.check_output(['git', 'tag'])\n    tags = output.decode('utf-8').split('\\n')[:-1]\n    latest_tag = sorted(tags, key=lambda t: tuple(map(int, re.match(r'v(\\d+)\\.(\\d+)\\.(\\d+)', t).groups())))[-1]\n    return latest_tag\n\ndef update_version_number(latest_tag, increment):\n    major, minor, patch = map(int, re.match(r'v(\\d+)\\.(\\d+)\\.(\\d+)', latest_tag).groups())\n    if increment == 'X':\n        major += 1\n        minor, patch = 0, 0\n    elif increment == 'Y':\n        minor += 1\n        patch = 0\n    elif increment == 'Z':\n        patch += 1\n    new_version = f\"v{major}.{minor}.{patch}\"\n    return new_version\n\ndef main():\n    print(\"当前最近的Git标签：\")\n    latest_tag = get_latest_tag()\n    print(latest_tag)\n\n    print(\"请选择要递增的版本号部分（X, Y, Z）：\")\n    increment = input().upper()\n\n    while increment not in ['X', 'Y', 'Z']:\n        print(\"输入错误，请输入X, Y或Z：\")\n        increment = input().upper()\n\n    new_version = update_version_number(latest_tag, increment)\n    print(f\"新的版本号为：{new_version}\")\n\n    print(\"确认更新版本号并推送到远程仓库？（y/n）\")\n    confirmation = input().lower()\n\n    if confirmation == 'y':\n        subprocess.run(['git', 'tag', new_version])\n        subprocess.run(['git', 'push', 'origin', new_version])\n        print(\"新版本号已创建并推送到远程仓库。\")\n    else:\n        print(\"操作已取消。\")\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}