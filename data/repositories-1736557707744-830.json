{
  "metadata": {
    "timestamp": 1736557707744,
    "page": 830,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tinygrad/tinygrad",
      "stars": 27457,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.78,
          "content": "__pycache__\n.venv/\n.venv-*/\n.vscode\n.DS_Store\nnotebooks\n.*.swp\n.*.swo\n*.pyc\n*.so\n*.txt\nbuild\n/dist\n*.egg-info\n/env\na.out\nboxes.jpg\npandecode.dump\nvertex.bin\nrecognize*\n.idea\n*.prof\nextra/disassemblers/applegpu\nextra/datasets/cifar-10-python.tar.gz\nextra/datasets/librispeech/\nextra/datasets/imagenet/\nextra/datasets/wiki/\nextra/datasets/kits19\nextra/datasets/kits19/\nextra/datasets/squad/\nextra/datasets/img_align_celeba*\nextra/datasets/open-images-v6-mlperf\nextra/datasets/kits/\nextra/datasets/COCO/\nextra/datasets/audio*\nextra/weights\nvenv\nexamples/**/net.*[js,json]\nexamples/**/*.safetensors\nnode_modules\npackage.json\npackage-lock.json\ntemp\n*.csv\n.coverage\ncoverage.xml\nhtmlcov\noutputs_yolov8\nwandb\nmodel.safetensors\nquickstart.py\n.hypothesis\nweights\n*.lprof\ncomgr_*\n*.pkl\nsite/\nmaster_schedule.py\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.44,
          "content": "# on Windows -- $env:SKIP=\"tests,example\"\nrepos:\n  - repo: local\n    hooks:\n      - id: ruff\n        name: ruff\n        entry: python3 -m ruff check .\n        language: system\n        always_run: true\n        pass_filenames: false\n      - id: tiny\n        name: tiny tests\n        entry: python3 -m pytest test/test_tiny.py\n        language: system\n        always_run: true\n        pass_filenames: false\n      - id: mypy\n        name: mypy\n        entry: python3 -m mypy tinygrad/ --strict-equality\n        language: system\n        always_run: true\n        pass_filenames: false\n      - id: devicetests\n        name: select GPU tests\n        entry: env GPU=1 PYTHONPATH=\".\" python3 -m pytest test/test_uops.py test/test_search.py\n        language: system\n        always_run: true\n        pass_filenames: false\n      - id: tests\n        name: subset of tests\n        entry: env PYTHONPATH=\".\" python3 -m pytest -n=4 test/unit/ test/test_ops.py test/test_dtype.py test/test_schedule.py test/test_assign.py test/test_symbolic_shapetracker.py\n        language: system\n        always_run: true\n        pass_filenames: false\n      - id: example\n        name: multi device tests\n        entry: python3 test/external/external_test_example.py\n        language: system\n        always_run: true\n        pass_filenames: false\n      - id: pylint\n        name: pylint\n        entry: python3 -m pylint tinygrad/\n        language: system\n        always_run: true\n        pass_filenames: false"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 14.46,
          "content": "[MASTER]\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code\nextension-pkg-whitelist=scipy,cereal.messaging.messaging_pyx,PyQt5,av\n\n# Add files or directories to the blacklist. They should be base names, not\n# paths.\nignore=CVS,autogen,msm_kgsl.py,runtime\n\n# Add files or directories matching the regex patterns to the blacklist. The\n# regex matches against base names, not paths.\nignore-patterns=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Use multiple processes to speed up Pylint.\njobs=4\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# Specify a configuration file.\n#rcfile=\n\n# When enabled, pylint would attempt to guess common misconfiguration and emit\n# user-friendly hints instead of false-positive error messages\nsuggestion-mode=yes\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\nconfidence=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once).You can also use \"--disable=all\" to\n# disable everything first and then reenable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use\"--disable=all --enable=classes\n# --disable=W\"\ndisable=C,R,W0613,W0511,W0212,W0201,W0106,W0603,W0621,W0703,W1201,W1203,E1136,W1514,E1101,W0221,W0105,E0401,abstract-method\n# E1101 for function binding\n# W0221 for Function class\n# W0105 for comment strings\n# E0401 for missing imports\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\nenable=c-extension-no-member,use-a-generator, no-else-return\n\n\n[REPORTS]\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details\n#msg-template=\n\n# Set the output format. Available formats are text, parseable, colorized, json\n# and msvs (visual studio).You can also give a reporter class, eg\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Tells whether to display a full report or only the messages\nreports=no\n\n# Activate the evaluation score.\nscore=yes\n\n\n[REFACTORING]\n\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=5\n\n# Complete name of functions that never returns. When checking for\n# inconsistent-return-statements if a never returning function is called then\n# it will be considered as an explicit return statement and no message will be\n# printed.\nnever-returning-functions=optparse.Values,sys.exit\n\n\n[LOGGING]\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format\nlogging-modules=logging\n\n\n[SPELLING]\n\n# Limits count of emitted suggestions for spelling mistakes\nmax-spelling-suggestions=4\n\n# Spelling dictionary name. Available dictionaries: none. To make it working\n# install python-enchant package.\nspelling-dict=\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to indicated private dictionary in\n# --spelling-private-dict-file option instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,\n      XXX,\n      TODO\n\n\n[SIMILARITIES]\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n\n[TYPECHECK]\n\n# List of decorators that produce context managers, such as\n# contextlib.contextmanager. Add to this list to register other decorators that\n# produce valid context managers.\ncontextmanager-decorators=contextlib.contextmanager\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=capnp.* cereal.* pygame.* zmq.* setproctitle.* smbus2.* usb1.* serial.* cv2.* ft4222.* carla.*\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# This flag controls whether pylint should warn about no-member and similar\n# checks whenever an opaque object is returned when inferring. The inference\n# can return multiple potential results while evaluating a Python object, but\n# some branches might not be evaluated, which results in partial inference. In\n# that case, it might be useful to still emit no-member and other checks for\n# the rest of the inferred objects.\nignore-on-opaque-inference=yes\n\n# List of class names for which member attributes should not be checked (useful\n# for classes with dynamically set attributes). This supports the use of\n# qualified names.\nignored-classes=optparse.Values,thread._local,_thread._local\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis. It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=flask setproctitle usb1 flask.ext.socketio smbus2 usb1.*\n\n# Show a hint with possible names when a member name was not found. The aspect\n# of finding the hint is based on edit distance.\nmissing-member-hint=yes\n\n# The minimum edit distance a name should have in order to be considered a\n# similar match for a missing member name.\nmissing-member-hint-distance=1\n\n# The total number of similar names that should be taken in consideration when\n# showing a hint for a missing member.\nmissing-member-max-choices=1\n\n\n[VARIABLES]\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n# Tells whether unused global variables should be treated as a violation.\nallow-global-unused-variables=yes\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,\n          _cb\n\n# A regular expression matching the name of dummy variables (i.e. expectedly\n# not used).\ndummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore\nignored-argument-names=_.*|^ignored_|^unused_\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=six.moves,past.builtins,future.builtins\n\n\n[FORMAT]\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Number of spaces of indent required inside a hanging  or continued line.\nindent-after-paren=4\n\n# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='  '\n\n# Maximum number of characters on a single line.\nmax-line-length=150\n\n# Maximum number of lines in a module\nmax-module-lines=1000\n\n# Allow the body of a class to be on the same line as the declaration if body\n# contains single statement.\nsingle-line-class-stmt=no\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=no\n\n\n[BASIC]\n\n# Naming style matching correct argument names\nargument-naming-style=snake_case\n\n# Regular expression matching correct argument names. Overrides argument-\n# naming-style\n#argument-rgx=\n\n# Naming style matching correct attribute names\nattr-naming-style=snake_case\n\n# Regular expression matching correct attribute names. Overrides attr-naming-\n# style\n#attr-rgx=\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=foo,\n          bar,\n          baz,\n          toto,\n          tutu,\n          tata\n\n# Naming style matching correct class attribute names\nclass-attribute-naming-style=any\n\n# Regular expression matching correct class attribute names. Overrides class-\n# attribute-naming-style\n#class-attribute-rgx=\n\n# Naming style matching correct class names\nclass-naming-style=PascalCase\n\n# Regular expression matching correct class names. Overrides class-naming-style\n#class-rgx=\n\n# Naming style matching correct constant names\nconst-naming-style=UPPER_CASE\n\n# Regular expression matching correct constant names. Overrides const-naming-\n# style\n#const-rgx=\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n# Naming style matching correct function names\nfunction-naming-style=snake_case\n\n# Regular expression matching correct function names. Overrides function-\n# naming-style\n#function-rgx=\n\n# Good variable names which should always be accepted, separated by a comma\ngood-names=i,\n           j,\n           k,\n           ex,\n           Run,\n           _\n\n# Include a hint for the correct naming format with invalid-name\ninclude-naming-hint=no\n\n# Naming style matching correct inline iteration names\ninlinevar-naming-style=any\n\n# Regular expression matching correct inline iteration names. Overrides\n# inlinevar-naming-style\n#inlinevar-rgx=\n\n# Naming style matching correct method names\nmethod-naming-style=snake_case\n\n# Regular expression matching correct method names. Overrides method-naming-\n# style\n#method-rgx=\n\n# Naming style matching correct module names\nmodule-naming-style=snake_case\n\n# Regular expression matching correct module names. Overrides module-naming-\n# style\n#module-rgx=\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=^_\n\n# List of decorators that produce properties, such as abc.abstractproperty. Add\n# to this list to register other decorators that produce valid properties.\nproperty-classes=abc.abstractproperty\n\n# Naming style matching correct variable names\nvariable-naming-style=snake_case\n\n# Regular expression matching correct variable names. Overrides variable-\n# naming-style\n#variable-rgx=\n\n\n[DESIGN]\n\n# Maximum number of arguments for function / method\nmax-args=5\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Maximum number of boolean expressions in a if statement\nmax-bool-expr=5\n\n# Maximum number of branch for function / method body\nmax-branches=12\n\n# Maximum number of locals for function / method body\nmax-locals=15\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n# Maximum number of return / yield for function / method body\nmax-returns=6\n\n# Maximum number of statements in function / method body\nmax-statements=50\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,\n                      __new__,\n                      setUp\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,\n                  _fields,\n                  _replace,\n                  _source,\n                  _make\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=mcs\n\n\n[IMPORTS]\n\n# Allow wildcard imports from modules that define __all__.\nallow-wildcard-with-all=no\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=no\n\n# Deprecated modules which should not be used, separated by a comma\ndeprecated-modules=regsub,\n                   TERMIOS,\n                   Bastion,\n                   rexec\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled)\next-import-graph=\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled)\nimport-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled)\nint-import-graph=\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=enchant\n\n[STRING]\n\n# This flag controls whether the implicit-str-concat should generate a warning\n# on implicit string concatenation in sequences defined over several lines.\ncheck-str-concat-over-line-jumps=yes\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"Exception\"\novergeneral-exceptions=builtins.Exception\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03,
          "content": "Copyright (c) 2024, the tiny corp\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.48,
          "content": "<div align=\"center\">\n\n<picture>\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"/docs/logo_tiny_light.svg\">\n  <img alt=\"tiny corp logo\" src=\"/docs/logo_tiny_dark.svg\" width=\"50%\" height=\"50%\">\n</picture>\n\ntinygrad: For something between [PyTorch](https://github.com/pytorch/pytorch) and [karpathy/micrograd](https://github.com/karpathy/micrograd). Maintained by [tiny corp](https://tinygrad.org).\n\n<h3>\n\n[Homepage](https://github.com/tinygrad/tinygrad) | [Documentation](https://docs.tinygrad.org/) | [Discord](https://discord.gg/ZjZadyC7PK)\n\n</h3>\n\n[![GitHub Repo stars](https://img.shields.io/github/stars/tinygrad/tinygrad)](https://github.com/tinygrad/tinygrad/stargazers)\n[![Unit Tests](https://github.com/tinygrad/tinygrad/actions/workflows/test.yml/badge.svg)](https://github.com/tinygrad/tinygrad/actions/workflows/test.yml)\n[![Discord](https://img.shields.io/discord/1068976834382925865)](https://discord.gg/ZjZadyC7PK)\n\n</div>\n\n---\n\nThis may not be the best deep learning framework, but it is a deep learning framework.\n\nDue to its extreme simplicity, it aims to be the easiest framework to add new accelerators to, with support for both inference and training. If XLA is CISC, tinygrad is RISC.\n\ntinygrad is still alpha software, but we [raised some money](https://geohot.github.io/blog/jekyll/update/2023/05/24/the-tiny-corp-raised-5M.html) to make it good. Someday, we will tape out chips.\n\n## Features\n\n### LLaMA and Stable Diffusion\n\ntinygrad can run [LLaMA](/docs/showcase.md#llama) and [Stable Diffusion](/docs/showcase.md#stable-diffusion)!\n\n### Laziness\n\nTry a matmul. See how, despite the style, it is fused into one kernel with the power of laziness.\n\n```sh\nDEBUG=3 python3 -c \"from tinygrad import Tensor;\nN = 1024; a, b = Tensor.rand(N, N), Tensor.rand(N, N);\nc = (a.reshape(N, 1, N) * b.T.reshape(1, N, N)).sum(axis=2);\nprint((c.numpy() - (a.numpy() @ b.numpy())).mean())\"\n```\n\nAnd we can change `DEBUG` to `4` to see the generated code.\n\n### Neural networks\n\nAs it turns out, 90% of what you need for neural networks are a decent autograd/tensor library.\nThrow in an optimizer, a data loader, and some compute, and you have all you need.\n\n```python\nfrom tinygrad import Tensor, nn\n\nclass LinearNet:\n  def __init__(self):\n    self.l1 = Tensor.kaiming_uniform(784, 128)\n    self.l2 = Tensor.kaiming_uniform(128, 10)\n  def __call__(self, x:Tensor) -> Tensor:\n    return x.flatten(1).dot(self.l1).relu().dot(self.l2)\n\nmodel = LinearNet()\noptim = nn.optim.Adam([model.l1, model.l2], lr=0.001)\n\nx, y = Tensor.rand(4, 1, 28, 28), Tensor([2,4,3,7])  # replace with real mnist dataloader\n\nwith Tensor.train():\n  for i in range(10):\n    optim.zero_grad()\n    loss = model(x).sparse_categorical_crossentropy(y).backward()\n    optim.step()\n    print(i, loss.item())\n```\n\nSee [examples/beautiful_mnist.py](examples/beautiful_mnist.py) for the full version that gets 98% in ~5 seconds\n\n## Accelerators\n\ntinygrad already supports numerous accelerators, including:\n\n- [x] [GPU (OpenCL)](tinygrad/runtime/ops_gpu.py)\n- [x] [CLANG (C Code)](tinygrad/runtime/ops_clang.py)\n- [x] [LLVM](tinygrad/runtime/ops_llvm.py)\n- [x] [METAL](tinygrad/runtime/ops_metal.py)\n- [x] [CUDA](tinygrad/runtime/ops_cuda.py)\n- [x] [AMD](tinygrad/runtime/ops_amd.py)\n- [x] [NV](tinygrad/runtime/ops_nv.py)\n- [x] [QCOM](tinygrad/runtime/ops_qcom.py)\n- [x] [WEBGPU](tinygrad/runtime/ops_webgpu.py)\n\nAnd it is easy to add more! Your accelerator of choice only needs to support a total of ~25 low level ops.\n\nTo check default accelerator run: `python3 -c \"from tinygrad import Device; print(Device.DEFAULT)\"`\n\n## Installation\n\nThe current recommended way to install tinygrad is from source.\n\n### From source\n\n```sh\ngit clone https://github.com/tinygrad/tinygrad.git\ncd tinygrad\npython3 -m pip install -e .\n```\n\n### Direct (master)\n\n```sh\npython3 -m pip install git+https://github.com/tinygrad/tinygrad.git\n```\n\n## Documentation\n\nDocumentation along with a quick start guide can be found on the [docs website](https://docs.tinygrad.org/) built from the [docs/](/docs) directory.\n\n### Quick example comparing to PyTorch\n\n```python\nfrom tinygrad import Tensor\n\nx = Tensor.eye(3, requires_grad=True)\ny = Tensor([[2.0,0,-2.0]], requires_grad=True)\nz = y.matmul(x).sum()\nz.backward()\n\nprint(x.grad.tolist())  # dz/dx\nprint(y.grad.tolist())  # dz/dy\n```\n\nThe same thing but in PyTorch:\n```python\nimport torch\n\nx = torch.eye(3, requires_grad=True)\ny = torch.tensor([[2.0,0,-2.0]], requires_grad=True)\nz = y.matmul(x).sum()\nz.backward()\n\nprint(x.grad.tolist())  # dz/dx\nprint(y.grad.tolist())  # dz/dy\n```\n\n## Contributing\n\nThere has been a lot of interest in tinygrad lately. Following these guidelines will help your PR get accepted.\n\nWe'll start with what will get your PR closed with a pointer to this section:\n\n- No code golf! While low line count is a guiding light of this project, anything that remotely looks like code golf will be closed. The true goal is reducing complexity and increasing readability, and deleting `\\n`s does nothing to help with that.\n- All docs and whitespace changes will be closed unless you are a well-known contributor. The people writing the docs should be those who know the codebase the absolute best. People who have not demonstrated that shouldn't be messing with docs. Whitespace changes are both useless *and* carry a risk of introducing bugs.\n- Anything you claim is a \"speedup\" must be benchmarked. In general, the goal is simplicity, so even if your PR makes things marginally faster, you have to consider the tradeoff with maintainablity and readablity.\n- In general, the code outside the core `tinygrad/` folder is not well tested, so unless the current code there is broken, you shouldn't be changing it.\n- If your PR looks \"complex\", is a big diff, or adds lots of lines, it won't be reviewed or merged. Consider breaking it up into smaller PRs that are individually clear wins. A common pattern I see is prerequisite refactors before adding new functionality. If you can (cleanly) refactor to the point that the feature is a 3 line change, this is great, and something easy for us to review.\n\nNow, what we want:\n\n- Bug fixes (with a regression test) are great! This library isn't 1.0 yet, so if you stumble upon a bug, fix it, write a test, and submit a PR, this is valuable work.\n- Solving bounties! tinygrad [offers cash bounties](https://docs.google.com/spreadsheets/d/1WKHbT-7KOgjEawq5h5Ic1qUWzpfAzuD_J06N1JwOCGs/edit?usp=sharing) for certain improvements to the library. All new code should be high quality and well tested.\n- Features. However, if you are adding a feature, consider the line tradeoff. If it's 3 lines, there's less of a bar of usefulness it has to meet over something that's 30 or 300 lines. All features must have regression tests. In general with no other constraints, your feature's API should match torch or numpy.\n- Refactors that are clear wins. In general, if your refactor isn't a clear win it will be closed. But some refactors are amazing! Think about readability in a deep core sense. A whitespace change or moving a few functions around is useless, but if you realize that two 100 line functions can actually use the same 110 line function with arguments while also improving readability, this is a big win. Refactors should pass [process replay](#process-replay-tests).\n- Tests/fuzzers. If you can add tests that are non brittle, they are welcome. We have some fuzzers in here too, and there's a plethora of bugs that can be found with them and by improving them. Finding bugs, even writing broken tests (that should pass) with `@unittest.expectedFailure` is great. This is how we make progress.\n- Dead code removal from core `tinygrad/` folder. We don't care about the code in extra, but removing dead code from the core library is great. Less for new people to read and be confused by.\n\n### Running tests\n\nYou should install the pre-commit hooks with `pre-commit install`. This will run the linter, mypy, and a subset of the tests on every commit.\n\nFor more examples on how to run the full test suite please refer to the [CI workflow](.github/workflows/test.yml).\n\nSome examples of running tests locally:\n```sh\npython3 -m pip install -e '.[testing]'  # install extra deps for testing\npython3 test/test_ops.py                # just the ops tests\npython3 -m pytest test/                 # whole test suite\n```\n\n#### Process replay tests\n\n[Process replay](https://github.com/tinygrad/tinygrad/blob/master/test/external/process_replay/README.md) compares your PR's generated kernels against master. If your PR is a refactor or speedup without any expected behavior change, It should include [pr] in the pull request title.\n"
        },
        {
          "name": "autogen_stubs.sh",
          "type": "blob",
          "size": 14.8,
          "content": "#!/bin/bash -e\n\n# setup instructions for clang2py\nif [[ ! $(clang2py -V) ]]; then\n  pushd .\n  cd /tmp\n  sudo apt-get install -y --no-install-recommends clang\n  pip install --upgrade pip setuptools\n  pip install clang==14.0.6\n  git clone https://github.com/nimlgen/ctypeslib.git\n  cd ctypeslib\n  pip install --user .\n  clang2py -V\n  popd\nfi\n\nBASE=tinygrad/runtime/autogen/\n\nfixup() {\n  sed -i '1s/^/# mypy: ignore-errors\\n/' $1\n  sed -i 's/ *$//' $1\n  grep FIXME_STUB $1 || true\n}\n\npatch_dlopen() {\n  path=$1; shift\n  name=$1; shift\n  cat <<EOF | sed -i \"/import ctypes.*/r /dev/stdin\" $path\nPATHS_TO_TRY = [\n$(for p in \"$@\"; do echo \"  $p,\"; done)\n]\ndef _try_dlopen_$name():\n  library = ctypes.util.find_library(\"$name\")\n  if library: return ctypes.CDLL(library)\n  for candidate in PATHS_TO_TRY:\n    try: return ctypes.CDLL(candidate)\n    except OSError: pass\n  raise RuntimeError(\"library $name not found\")\nEOF\n}\n\ngenerate_opencl() {\n  clang2py /usr/include/CL/cl.h -o $BASE/opencl.py -l /usr/lib/x86_64-linux-gnu/libOpenCL.so.1 -k cdefstum\n  fixup $BASE/opencl.py\n  # hot patches\n  sed -i \"s\\import ctypes\\import ctypes, ctypes.util\\g\" $BASE/opencl.py\n  sed -i \"s\\ctypes.CDLL('/usr/lib/x86_64-linux-gnu/libOpenCL.so.1')\\ctypes.CDLL(ctypes.util.find_library('OpenCL'))\\g\" $BASE/opencl.py\n  python3 -c \"import tinygrad.runtime.autogen.opencl\"\n}\n\ngenerate_hip() {\n  clang2py /opt/rocm/include/hip/hip_ext.h /opt/rocm/include/hip/hiprtc.h \\\n  /opt/rocm/include/hip/hip_runtime_api.h /opt/rocm/include/hip/driver_types.h \\\n  --clang-args=\"-D__HIP_PLATFORM_AMD__ -I/opt/rocm/include -x c++\" -o $BASE/hip.py -l /opt/rocm/lib/libamdhip64.so\n  echo \"hipDeviceProp_t = hipDeviceProp_tR0600\" >> $BASE/hip.py\n  echo \"hipGetDeviceProperties = hipGetDevicePropertiesR0600\" >> $BASE/hip.py\n  fixup $BASE/hip.py\n  # we can trust HIP is always at /opt/rocm/lib\n  #sed -i \"s\\import ctypes\\import ctypes, ctypes.util\\g\" $BASE/hip.py\n  #sed -i \"s\\ctypes.CDLL('/opt/rocm/lib/libhiprtc.so')\\ctypes.CDLL(ctypes.util.find_library('hiprtc'))\\g\" $BASE/hip.py\n  #sed -i \"s\\ctypes.CDLL('/opt/rocm/lib/libamdhip64.so')\\ctypes.CDLL(ctypes.util.find_library('amdhip64'))\\g\" $BASE/hip.py\n  sed -i \"s\\import ctypes\\import ctypes, os\\g\" $BASE/hip.py\n  sed -i \"s\\'/opt/rocm/\\os.getenv('ROCM_PATH', '/opt/rocm/')+'/\\g\" $BASE/hip.py\n  python3 -c \"import tinygrad.runtime.autogen.hip\"\n}\n\ngenerate_comgr() {\n  clang2py /opt/rocm/include/amd_comgr/amd_comgr.h \\\n  --clang-args=\"-D__HIP_PLATFORM_AMD__ -I/opt/rocm/include -x c++\" -o $BASE/comgr.py -l /opt/rocm/lib/libamd_comgr.so\n  fixup $BASE/comgr.py\n  sed -i \"s\\import ctypes\\import ctypes, ctypes.util, os\\g\" $BASE/comgr.py\n  patch_dlopen $BASE/comgr.py amd_comgr \"'/opt/rocm/lib/libamd_comgr.so'\" \"os.getenv('ROCM_PATH', '')+'/lib/libamd_comgr.so'\" \"'/usr/local/lib/libamd_comgr.dylib'\" \"'/opt/homebrew/lib/libamd_comgr.dylib'\"\n  sed -i \"s\\ctypes.CDLL('/opt/rocm/lib/libamd_comgr.so')\\_try_dlopen_amd_comgr()\\g\" $BASE/comgr.py\n  python3 -c \"import tinygrad.runtime.autogen.comgr\"\n}\n\ngenerate_kfd() {\n  clang2py /usr/include/linux/kfd_ioctl.h -o $BASE/kfd.py -k cdefstum\n\n  fixup $BASE/kfd.py\n  sed -i \"s\\import ctypes\\import ctypes, os\\g\" $BASE/kfd.py\n  sed -i \"s\\import fcntl, functools\\import functools\" $BASE/kfd.py\n  sed -i \"s\\import ctypes,os\\a from tinygrad.runtime.support import HWInterface\\g\" $BASE/kfd.py\n  sed -i \"s\\def _do_ioctl(__idir, __base, __nr, __user_struct, __fd, **kwargs):\\def _do_ioctl(__idir, __base, __nr, __user_struct, __fd:HWInterface, **kwargs):\\g\" $BASE/kfd.py\n  sed -i \"s\\fcntl.ioctl(__fd, (__idir<<30)\\__fd.ioctl((__idir<<30)\\g\" $BASE/kfd.py\n  python3 -c \"import tinygrad.runtime.autogen.kfd\"\n}\n\ngenerate_cuda() {\n  clang2py /usr/include/cuda.h -o $BASE/cuda.py -l /usr/lib/x86_64-linux-gnu/libcuda.so\n  sed -i \"s\\import ctypes\\import ctypes, ctypes.util\\g\" $BASE/cuda.py\n  sed -i \"s\\ctypes.CDLL('/usr/lib/x86_64-linux-gnu/libcuda.so')\\ctypes.CDLL(ctypes.util.find_library('cuda'))\\g\" $BASE/cuda.py\n  fixup $BASE/cuda.py\n  python3 -c \"import tinygrad.runtime.autogen.cuda\"\n}\n\ngenerate_nvrtc() {\n  clang2py /usr/local/cuda/include/nvrtc.h /usr/local/cuda/include/nvJitLink.h -o $BASE/nvrtc.py -l /usr/local/cuda/lib64/libnvrtc.so -l /usr/local/cuda/lib64/libnvJitLink.so\n  sed -i \"s\\import ctypes\\import ctypes, ctypes.util\\g\" $BASE/nvrtc.py\n  sed -i \"s\\ctypes.CDLL('/usr/local/cuda/lib64/libnvrtc.so')\\ctypes.CDLL(ctypes.util.find_library('nvrtc'))\\g\" $BASE/nvrtc.py\n  sed -i \"s\\ctypes.CDLL('/usr/local/cuda/lib64/libnvJitLink.so')\\ctypes.CDLL(ctypes.util.find_library('nvJitLink'))\\g\" $BASE/nvrtc.py\n  fixup $BASE/nvrtc.py\n  python3 -c \"import tinygrad.runtime.autogen.nvrtc\"\n}\n\ngenerate_nv() {\n  NVKERN_COMMIT_HASH=d6b75a34094b0f56c2ccadf14e5d0bd515ed1ab6\n  NVKERN_SRC=/tmp/open-gpu-kernel-modules-$NVKERN_COMMIT_HASH\n  if [ ! -d \"$NVKERN_SRC\" ]; then\n    git clone https://github.com/tinygrad/open-gpu-kernel-modules $NVKERN_SRC\n    pushd .\n    cd $NVKERN_SRC\n    git reset --hard $NVKERN_COMMIT_HASH\n    popd\n  fi\n\n  clang2py -k cdefstum \\\n    extra/nv_gpu_driver/clc6c0qmd.h \\\n    $NVKERN_SRC/src/common/sdk/nvidia/inc/class/cl0080.h \\\n    $NVKERN_SRC/src/common/sdk/nvidia/inc/class/cl2080_notification.h \\\n    $NVKERN_SRC/src/common/sdk/nvidia/inc/class/clc56f.h \\\n    $NVKERN_SRC/src/common/sdk/nvidia/inc/class/clc56f.h \\\n    $NVKERN_SRC/src/common/sdk/nvidia/inc/class/clc56f.h \\\n    $NVKERN_SRC/src/common/sdk/nvidia/inc/class/cl83de.h \\\n    $NVKERN_SRC/src/nvidia/generated/g_allclasses.h \\\n    $NVKERN_SRC/src/common/sdk/nvidia/inc/class/clc6c0.h \\\n    $NVKERN_SRC/kernel-open/nvidia-uvm/clc6b5.h \\\n    $NVKERN_SRC/kernel-open/nvidia-uvm/uvm_ioctl.h \\\n    $NVKERN_SRC/kernel-open/nvidia-uvm/uvm_linux_ioctl.h \\\n    $NVKERN_SRC/kernel-open/nvidia-uvm/hwref/ampere/ga100/dev_fault.h \\\n    $NVKERN_SRC/src/nvidia/arch/nvalloc/unix/include/nv_escape.h \\\n    $NVKERN_SRC/src/nvidia/arch/nvalloc/unix/include/nv-ioctl.h \\\n    $NVKERN_SRC/src/nvidia/arch/nvalloc/unix/include/nv-ioctl-numbers.h \\\n    $NVKERN_SRC/src/nvidia/arch/nvalloc/unix/include/nv-ioctl-numa.h \\\n    $NVKERN_SRC/src/nvidia/arch/nvalloc/unix/include/nv-unix-nvos-params-wrappers.h \\\n    $NVKERN_SRC/src/common/sdk/nvidia/inc/alloc/alloc_channel.h \\\n    $NVKERN_SRC/src/common/sdk/nvidia/inc/nvos.h \\\n    $NVKERN_SRC/src/common/sdk/nvidia/inc/ctrl/ctrl0000/*.h \\\n    $NVKERN_SRC/src/common/sdk/nvidia/inc/ctrl/ctrl0080/*.h \\\n    $NVKERN_SRC/src/common/sdk/nvidia/inc/ctrl/ctrl2080/*.h \\\n    $NVKERN_SRC/src/common/sdk/nvidia/inc/ctrl/ctrl83de/*.h \\\n    $NVKERN_SRC/src/common/sdk/nvidia/inc/ctrl/ctrlc36f.h \\\n    $NVKERN_SRC/src/common/sdk/nvidia/inc/ctrl/ctrlcb33.h \\\n    $NVKERN_SRC/src/common/sdk/nvidia/inc/ctrl/ctrla06c.h \\\n    --clang-args=\"-include $NVKERN_SRC/src/common/sdk/nvidia/inc/nvtypes.h -I$NVKERN_SRC/src/common/inc -I$NVKERN_SRC/kernel-open/nvidia-uvm -I$NVKERN_SRC/kernel-open/common/inc -I$NVKERN_SRC/src/common/sdk/nvidia/inc -I$NVKERN_SRC/src/nvidia/arch/nvalloc/unix/include -I$NVKERN_SRC/src/common/sdk/nvidia/inc/ctrl\" \\\n    -o $BASE/nv_gpu.py\n  fixup $BASE/nv_gpu.py\n  sed -i \"s\\(0000000001)\\1\\g\" $BASE/nv_gpu.py\n  sed -i \"s\\import ctypes\\import ctypes, os\\g\" $BASE/nv_gpu.py\n  sed -i 's/#\\?\\s\\([A-Za-z0-9_]\\+\\) = MW ( \\([0-9]\\+\\) : \\([0-9]\\+\\) )/\\1 = (\\2 , \\3)/' $BASE/nv_gpu.py # NVC6C0_QMDV03_00 processing\n  sed -i 's/#\\sdef NVC6C0_QMD\\([A-Za-z0-9_()]\\+\\):/def NVC6C0_QMD\\1:/' $BASE/nv_gpu.py\n  sed -i 's/#\\s*return MW(\\([0-9i()*+]\\+\\):\\([0-9i()*+]\\+\\))/    return (\\1 , \\2)/' $BASE/nv_gpu.py\n  sed -i 's/#\\?\\s*\\(.*\\)\\s*=\\s*\\(NV\\)\\?BIT\\(32\\)\\?\\s*(\\s*\\([0-9]\\+\\)\\s*)/\\1 = (1 << \\4)/' $BASE/nv_gpu.py # name = BIT(x) -> name = (1 << x)\n  sed -i \"s/UVM_\\([A-Za-z0-9_]\\+\\) = \\['i', '(', '\\([0-9]\\+\\)', ')'\\]/UVM_\\1 = \\2/\" $BASE/nv_gpu.py # UVM_name = ['i', '(', '<num>', ')'] -> UVM_name = <num>\n\n  # Parse status codes\n  sed -n '1i\\\nnv_status_codes = {}\n/^NV_STATUS_CODE/ { s/^NV_STATUS_CODE(\\([^,]*\\), *\\([^,]*\\), *\"\\([^\"]*\\)\") *.*$/\\1 = \\2\\nnv_status_codes[\\1] = \"\\3\"/; p }' $NVKERN_SRC/src/common/sdk/nvidia/inc/nvstatuscodes.h >> $BASE/nv_gpu.py\n\n  python3 -c \"import tinygrad.runtime.autogen.nv_gpu\"\n}\n\ngenerate_amd() {\n  # clang2py broken when pass -x c++ to prev headers\n  clang2py -k cdefstum \\\n    extra/hip_gpu_driver/sdma_registers.h \\\n    extra/hip_gpu_driver/nvd.h \\\n    extra/hip_gpu_driver/kfd_pm4_headers_ai.h \\\n    extra/hip_gpu_driver/soc21_enum.h \\\n    extra/hip_gpu_driver/sdma_v6_0_0_pkt_open.h \\\n    extra/hip_gpu_driver/gc_11_0_0_offset.h \\\n    extra/hip_gpu_driver/gc_10_3_0_offset.h \\\n    --clang-args=\"-I/opt/rocm/include -x c++\" \\\n    -o $BASE/amd_gpu.py\n\n  fixup $BASE/amd_gpu.py\n  sed -i \"s\\import ctypes\\import ctypes, os\\g\" $BASE/amd_gpu.py\n  python3 -c \"import tinygrad.runtime.autogen.amd_gpu\"\n}\n\ngenerate_hsa() {\n  clang2py \\\n    /opt/rocm/include/hsa/hsa.h \\\n    /opt/rocm/include/hsa/hsa_ext_amd.h \\\n    /opt/rocm/include/hsa/amd_hsa_signal.h \\\n    /opt/rocm/include/hsa/amd_hsa_queue.h \\\n    /opt/rocm/include/hsa/amd_hsa_kernel_code.h \\\n    /opt/rocm/include/hsa/hsa_ext_finalize.h /opt/rocm/include/hsa/hsa_ext_image.h \\\n    /opt/rocm/include/hsa/hsa_ven_amd_aqlprofile.h \\\n    --clang-args=\"-I/opt/rocm/include\" \\\n    -o $BASE/hsa.py -l /opt/rocm/lib/libhsa-runtime64.so\n\n  fixup $BASE/hsa.py\n  sed -i \"s\\import ctypes\\import ctypes, ctypes.util, os\\g\" $BASE/hsa.py\n  sed -i \"s\\ctypes.CDLL('/opt/rocm/lib/libhsa-runtime64.so')\\ctypes.CDLL(os.getenv('ROCM_PATH')+'/lib/libhsa-runtime64.so' if os.getenv('ROCM_PATH') else ctypes.util.find_library('hsa-runtime64'))\\g\" $BASE/hsa.py\n  python3 -c \"import tinygrad.runtime.autogen.hsa\"\n}\n\ngenerate_io_uring() {\n  clang2py -k cdefstum \\\n    /usr/include/liburing.h \\\n    /usr/include/linux/io_uring.h \\\n    -o $BASE/io_uring.py\n\n  sed -r '/^#define __NR_io_uring/ s/^#define __(NR_io_uring[^ ]+) (.*)$/\\1 = \\2/; t; d' /usr/include/asm-generic/unistd.h >> $BASE/io_uring.py # io_uring syscalls numbers\n  fixup $BASE/io_uring.py\n}\n\ngenerate_libc() {\n  clang2py -k cdefstum \\\n    $(dpkg -L libc6-dev | grep sys/mman.h) \\\n    $(dpkg -L libc6-dev | grep sys/syscall.h) \\\n    /usr/include/elf.h \\\n    /usr/include/unistd.h \\\n    -o $BASE/libc.py\n\n  sed -i \"s\\import ctypes\\import ctypes, ctypes.util, os\\g\" $BASE/libc.py\n  sed -i \"s\\FIXME_STUB\\libc\\g\" $BASE/libc.py\n  sed -i \"s\\FunctionFactoryStub()\\None if (libc_path := ctypes.util.find_library('c')) is None else ctypes.CDLL(libc_path)\\g\" $BASE/libc.py\n\n  fixup $BASE/libc.py\n}\n\ngenerate_kgsl() {\n  clang2py extra/qcom_gpu_driver/msm_kgsl.h -o $BASE/kgsl.py -k cdefstum\n  fixup $BASE/kgsl.py\n  sed -i \"s\\import ctypes\\import ctypes, os\\g\" $BASE/kgsl.py\n  sed -nE 's/#define ([A-Za-z0-9_]+)_SHIFT\\s*[^\\S\\r\\n]*[0-9]*$/def \\1(val): return (val << \\1_SHIFT) \\& \\1_MASK/p' extra/qcom_gpu_driver/msm_kgsl.h >> $BASE/kgsl.py\n  python3 -c \"import tinygrad.runtime.autogen.kgsl\"\n}\n\ngenerate_adreno() {\n  clang2py extra/qcom_gpu_driver/a6xx.xml.h -o $BASE/adreno.py -k cestum\n  sed -nE 's/#define ([A-Za-z0-9_]+)__SHIFT\\s*[^\\S\\r\\n]*[0-9]*$/def \\1(val): return (val << \\1__SHIFT) \\& \\1__MASK/p' extra/qcom_gpu_driver/a6xx.xml.h >> $BASE/adreno.py\n  fixup $BASE/adreno.py\n  sed -i \"s\\import ctypes\\import ctypes, os\\g\" $BASE/adreno.py\n  python3 -c \"import tinygrad.runtime.autogen.adreno\"\n}\n\ngenerate_qcom() {\n  clang2py -k cdefstum \\\n    extra/dsp/include/ion.h \\\n    extra/dsp/include/msm_ion.h \\\n    extra/dsp/include/adsprpc_shared.h \\\n    extra/dsp/include/remote_default.h \\\n    extra/dsp/include/apps_std.h \\\n    -o $BASE/qcom_dsp.py\n\n  fixup $BASE/qcom_dsp.py\n  python3 -c \"import tinygrad.runtime.autogen.qcom_dsp\"\n}\n\ngenerate_pciaccess() {\n  clang2py -k cdefstum \\\n    /usr/include/pciaccess.h \\\n    /usr/include/linux/pci_regs.h \\\n    -l /usr/lib/x86_64-linux-gnu/libpciaccess.so \\\n    -o $BASE/libpciaccess.py\n  sed -i \"s\\import ctypes\\import ctypes, os\\g\" $BASE/libpciaccess.py\n  fixup $BASE/libpciaccess.py\n  sed -i \"s/ctypes\\.CDLL('\\([^']*\\)')/ctypes.CDLL('\\1') if os.path.exists('\\1') else None/g\" $BASE/libpciaccess.py\n}\n\ngenerate_vfio() {\n  clang2py -k cdefstum \\\n    /usr/include/linux/vfio.h \\\n    -o $BASE/vfio.py\n  fixup $BASE/vfio.py\n  sed -i \"s\\import ctypes\\import ctypes, os\\g\" $BASE/vfio.py\n  sed -i \"s\\import fcntl, functools\\import functools\" $BASE/vfio.py\n  sed -i \"s\\import ctypes,os\\a from tinygrad.runtime.support import HWInterface\\g\" $BASE/vfio.py\n  sed -i \"s\\fcntl.ioctl(__fd, (__idir<<30)\\return __fd.ioctl((__idir<<30)\\g\" $BASE/vfio.py\n}\n\ngenerate_am() {\n  clang2py -k cdefstum \\\n    extra/amdpci/headers/v11_structs.h \\\n    extra/amdpci/headers/amdgpu_vm.h \\\n    extra/amdpci/headers/discovery.h \\\n    extra/amdpci/headers/amdgpu_ucode.h \\\n    extra/amdpci/headers/soc21_enum.h \\\n    extra/amdpci/headers/psp_gfx_if.h \\\n    extra/amdpci/headers/amdgpu_psp.h \\\n    extra/amdpci/headers/amdgpu_irq.h \\\n    extra/amdpci/headers/amdgpu_doorbell.h \\\n    extra/amdpci/headers/soc15_ih_clientid.h \\\n    -o $BASE/am/am.py\n  fixup $BASE/am/am.py\n\n  clang2py -k cdefstum \\\n    extra/amdpci/headers/mp_13_0_0_offset.h \\\n    extra/amdpci/headers/mp_13_0_0_sh_mask.h \\\n    -o $BASE/am/mp_13_0_0.py\n  fixup $BASE/am/mp_13_0_0.py\n\n  clang2py -k cdefstum \\\n    extra/amdpci/headers/mp_11_0_offset.h \\\n    extra/amdpci/headers/mp_11_0_sh_mask.h \\\n    -o $BASE/am/mp_11_0.py\n  fixup $BASE/am/mp_11_0.py\n\n  clang2py -k cdefstum \\\n    extra/amdpci/headers/gc_11_0_0_offset.h \\\n    extra/amdpci/headers/gc_11_0_0_sh_mask.h \\\n    -o $BASE/am/gc_11_0_0.py\n  fixup $BASE/am/gc_11_0_0.py\n\n  clang2py -k cdefstum \\\n    extra/amdpci/headers/mmhub_3_0_0_offset.h \\\n    extra/amdpci/headers/mmhub_3_0_0_sh_mask.h \\\n    -o $BASE/am/mmhub_3_0_0.py\n  fixup $BASE/am/mmhub_3_0_0.py\n\n  clang2py -k cdefstum \\\n    extra/amdpci/headers/nbio_4_3_0_offset.h \\\n    extra/amdpci/headers/nbio_4_3_0_sh_mask.h \\\n    -o $BASE/am/nbio_4_3_0.py\n  fixup $BASE/am/nbio_4_3_0.py\n\n  clang2py -k cdefstum \\\n    extra/amdpci/headers/osssys_6_0_0_offset.h \\\n    extra/amdpci/headers/osssys_6_0_0_sh_mask.h \\\n    -o $BASE/am/osssys_6_0_0.py\n  fixup $BASE/am/osssys_6_0_0.py\n\n  clang2py -k cdefstum \\\n    extra/amdpci/headers/smu_v13_0_0_ppsmc.h \\\n    extra/amdpci/headers/smu13_driver_if_v13_0_0.h \\\n    extra/amdpci/headers/amdgpu_smu.h \\\n    -o $BASE/am/smu_v13_0_0.py\n  fixup $BASE/am/smu_v13_0_0.py\n}\n\nif [ \"$1\" == \"opencl\" ]; then generate_opencl\nelif [ \"$1\" == \"hip\" ]; then generate_hip\nelif [ \"$1\" == \"comgr\" ]; then generate_comgr\nelif [ \"$1\" == \"cuda\" ]; then generate_cuda\nelif [ \"$1\" == \"nvrtc\" ]; then generate_nvrtc\nelif [ \"$1\" == \"hsa\" ]; then generate_hsa\nelif [ \"$1\" == \"kfd\" ]; then generate_kfd\nelif [ \"$1\" == \"nv\" ]; then generate_nv\nelif [ \"$1\" == \"amd\" ]; then generate_amd\nelif [ \"$1\" == \"am\" ]; then generate_am\nelif [ \"$1\" == \"qcom\" ]; then generate_qcom\nelif [ \"$1\" == \"io_uring\" ]; then generate_io_uring\nelif [ \"$1\" == \"libc\" ]; then generate_libc\nelif [ \"$1\" == \"kgsl\" ]; then generate_kgsl\nelif [ \"$1\" == \"adreno\" ]; then generate_adreno\nelif [ \"$1\" == \"pci\" ]; then generate_pciaccess\nelif [ \"$1\" == \"vfio\" ]; then generate_vfio\nelif [ \"$1\" == \"all\" ]; then generate_opencl; generate_hip; generate_comgr; generate_cuda; generate_nvrtc; generate_hsa; generate_kfd; generate_nv; generate_amd; generate_io_uring; generate_libc; generate_am\nelse echo \"usage: $0 <type>\"\nfi\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "eslint.config.mjs",
          "type": "blob",
          "size": 0.31,
          "content": "import globals from \"globals\";\nimport pluginJs from \"@eslint/js\";\nimport pluginHtml from \"eslint-plugin-html\";\n\nexport default [\n  {files: [\"**/*.html\"], plugins: {html: pluginHtml}, rules:{\"max-len\": [\"error\", {\"code\": 150}]}},\n  {languageOptions: {globals: globals.browser}},\n  pluginJs.configs.recommended,\n];\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extra",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 3.48,
          "content": "# pip install mkdocs mkdocs-material mkdocstrings[python]\nsite_name: tinygrad docs\nsite_url: https://docs.tinygrad.org/\nrepo_url: https://github.com/tinygrad/tinygrad/\nnav:\n- Home:\n  - index.md\n  - Quickstart: quickstart.md\n  - Showcase: showcase.md\n  - MNIST Tutorial: mnist.md\n  - API Reference:\n    - Tensor:\n      - tensor/index.md\n      - Properties: tensor/properties.md\n      - Creation: tensor/creation.md\n      - Movement: tensor/movement.md\n      - Elementwise: tensor/elementwise.md\n      - Complex Ops: tensor/ops.md\n    - dtypes: dtypes.md\n    - nn (Neural Networks): nn.md\n    - Environment Variables: env_vars.md\n    - Runtime: runtime.md\n  - Developer:\n    - Intro: developer/developer.md\n    - Function (autodiff): developer/function.md\n    - UOp: developer/uop.md\n    - Runtime:\n      - developer/runtime.md\n      - HCQ: developer/hcq.md\n  - tinybox: tinybox.md\n#- tinygrad: reference/\n\n#extra_css:\n#- css/tinygrad.css\n\nvalidation:\n  links:\n    anchors: warn\n\nmarkdown_extensions:\n- attr_list\n- admonition\n- callouts\n- footnotes\n- pymdownx.details\n- pymdownx.emoji:\n    emoji_index: !!python/name:material.extensions.emoji.twemoji\n    emoji_generator: !!python/name:material.extensions.emoji.to_svg\n- pymdownx.highlight:\n    pygments_lang_class: true\n- pymdownx.inlinehilite:\n    style_plain_text: python\n- pymdownx.magiclink\n- pymdownx.snippets:\n    base_path: [!relative $config_dir]\n    check_paths: true\n- pymdownx.superfences\n- pymdownx.tabbed:\n    alternate_style: true\n    slugify: !!python/object/apply:pymdownx.slugs.slugify\n      kwds:\n        case: lower\n- pymdownx.tasklist:\n    custom_checkbox: true\n- pymdownx.tilde\n- toc:\n    permalink: \"¤\"\n\ntheme:\n  name: material\n  logo: logo_tiny_dark.svg\n  favicon: favicon.svg\n  features:\n  - announce.dismiss\n  - content.action.edit\n  - content.action.view\n  - content.code.annotate\n  - content.code.copy\n  - content.tooltips\n  - navigation.footer\n  - navigation.indexes\n  - navigation.sections\n  - navigation.expand\n  - navigation.top\n  - navigation.path\n  - search.highlight\n  - search.suggest\n  - toc.follow\n  - toc.integrate\n  palette:\n    scheme: slate\n    primary: black\n    accent: lime\n  palette:\n    - media: \"(prefers-color-scheme)\"\n      accent: lime\n      primary: black\n      toggle:\n        icon: material/brightness-auto\n        name: Switch to light mode\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default\n      accent: lime\n      primary: black\n      toggle:\n        icon: material/brightness-7\n        name: Switch to dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      accent: lime\n      primary: black\n      toggle:\n        icon: material/brightness-4\n        name: Switch to system preference\nplugins:\n- search\n- mkdocstrings:\n    handlers:\n      python:\n        import:\n        - https://docs.python.org/3/objects.inv\n        paths: [tinygrad]\n        options:\n          docstring_options:\n            ignore_init_summary: true\n          docstring_section_style: list\n          filters: [\"!^_\"]\n          heading_level: 3\n          inherited_members: false\n          merge_init_into_class: true\n          separate_signature: true\n          show_root_heading: true\n          show_root_full_path: false\n          show_signature_annotations: true\n          show_symbol_type_heading: true\n          show_symbol_type_toc: true\n          show_source: true\n          signature_crossrefs: true\n          summary: true\n- markdown-exec\n#- gen-files:\n#    scripts:\n#      - docs/gen_ref_pages.py\n#- literate-nav:\n#    nav_file: SUMMARY.md\n"
        },
        {
          "name": "mypy.ini",
          "type": "blob",
          "size": 0.28,
          "content": "[mypy]\nwarn_unused_configs = True\nfiles = tinygrad\nignore_missing_imports = True\ncheck_untyped_defs = True\nexplicit_package_bases = True\nwarn_unreachable = True\nwarn_redundant_casts = True\n# NOTE: had to comment this out to make mypy pass on both CI and OSX\n#warn_unused_ignores = True\n"
        },
        {
          "name": "ruff.toml",
          "type": "blob",
          "size": 1.19,
          "content": "indent-width = 2\npreview = true\ntarget-version = \"py310\"\n\nlint.select = [\n  \"F\",  # Pyflakes\n  \"W6\",\n  \"E71\",\n  \"E72\",\n  \"E112\",   # no-indented-block\n  \"E113\",   # unexpected-indentation\n  # \"E124\",\n  \"E203\",   # whitespace-before-punctuation\n  \"E272\",   # multiple-spaces-before-keyword\n  \"E275\",   # missing-whitespace-after-keyword\n  \"E303\",   # too-many-blank-lines\n  \"E304\",   # blank-line-after-decorator\n  \"E501\",   # line-too-long\n  # \"E502\",\n  \"E702\",   # multiple-statements-on-one-line-semicolon\n  \"E703\",   # useless-semicolon\n  \"E731\",   # lambda-assignment\n  \"W191\",   # tab-indentation\n  \"W291\",   # trailing-whitespace\n  \"W293\",   # blank-line-with-whitespace\n  \"UP039\",  # unnecessary-class-parentheses\n  \"C416\",   # unnecessary-comprehension\n  \"RET506\", # superfluous-else-raise\n  \"RET507\", # superfluous-else-continue\n  \"A\",      # builtin-variable-shadowing, builtin-argument-shadowing, builtin-attribute-shadowing\n  \"SIM105\", # suppressible-exception\n  \"FURB110\",# if-exp-instead-of-or-operator\n  \"RUF018\", # assignment-in-assert\n]\n\nline-length = 150\n\nexclude = [\n  \"docs/\",\n  \"examples/\",\n  \"extra/\",\n  \"tinygrad/runtime/autogen\",\n  \"test/external/mlperf_resnet\",\n  \"test/external/mlperf_unet3d\",\n]\n"
        },
        {
          "name": "serve_docs.sh",
          "type": "blob",
          "size": 0.04,
          "content": "#!/bin/bash\nmkdocs serve -w tinygrad/\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.35,
          "content": "#!/usr/bin/env python3\n\nfrom pathlib import Path\nfrom setuptools import setup\n\ndirectory = Path(__file__).resolve().parent\nwith open(directory / 'README.md', encoding='utf-8') as f:\n  long_description = f.read()\n\nsetup(name='tinygrad',\n      version='0.10.0',\n      description='You like pytorch? You like micrograd? You love tinygrad! <3',\n      author='George Hotz',\n      license='MIT',\n      long_description=long_description,\n      long_description_content_type='text/markdown',\n      packages = ['tinygrad', 'tinygrad.runtime.autogen', 'tinygrad.codegen', 'tinygrad.nn', 'tinygrad.renderer', 'tinygrad.engine',\n                  'tinygrad.runtime', 'tinygrad.runtime.support', 'tinygrad.runtime.support.am', 'tinygrad.runtime.graph', 'tinygrad.shape'],\n      package_data = {'tinygrad': ['py.typed']},\n      classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\"\n      ],\n      install_requires=[],\n      python_requires='>=3.10',\n      extras_require={\n        'llvm': [\"llvmlite\"],\n        'arm': [\"unicorn\"],\n        'triton': [\"triton-nightly>=2.1.0.dev20231014192330\"],\n        'linting': [\n            \"pylint\",\n            \"mypy==1.13.0\",\n            \"typing-extensions\",\n            \"pre-commit\",\n            \"ruff\",\n            \"types-tqdm\",\n        ],\n        #'mlperf': [\"mlperf-logging @ git+https://github.com/mlperf/logging.git@4.1.0-rc3\"],\n        'testing': [\n            \"numpy\",\n            \"torch\",\n            \"jax\",\n            \"pillow\",\n            \"pytest\",\n            \"pytest-xdist\",\n            \"onnx==1.16.0\",\n            \"onnx2torch\",\n            \"opencv-python\",\n            \"tabulate\",\n            \"tqdm\",\n            \"safetensors\",\n            \"transformers\",\n            \"sentencepiece\",\n            \"tiktoken\",\n            \"blobfile\",\n            \"librosa\",\n            \"networkx\",\n            \"hypothesis\",\n            \"nibabel\",\n            \"bottle\",\n            \"ggml-python\",\n            \"capstone\"\n        ],\n        'webgpu': [\"wgpu\"],\n        'docs': [\n            \"mkdocs\",\n            \"mkdocs-material\",\n            \"mkdocstrings[python]\",\n            \"markdown-callouts\",\n            \"markdown-exec[ansi]\",\n            \"black\",\n            \"numpy\",\n        ],\n        'testing_tf': [\n            \"tensorflow==2.15.1\",\n            \"tensorflow_addons\",\n        ]\n      },\n      include_package_data=True)\n"
        },
        {
          "name": "sz.py",
          "type": "blob",
          "size": 3.51,
          "content": "#!/usr/bin/env python3\nimport os, sys\nimport token\nimport tokenize\nimport itertools\nfrom tabulate import tabulate\n\nTOKEN_WHITELIST = [token.OP, token.NAME, token.NUMBER, token.STRING]\n\ndef is_docstring(t):\n  return t.type == token.STRING and t.string.startswith('\"\"\"') and t.line.strip().startswith('\"\"\"')\n\ndef gen_stats(base_path=\".\"):\n  table = []\n  for path, _, files in os.walk(os.path.join(base_path, \"tinygrad\")):\n    for name in files:\n      if not name.endswith(\".py\"): continue\n      if 'tinygrad/runtime/autogen' in path.replace('\\\\', '/'): continue\n      filepath = os.path.join(path, name)\n      relfilepath = os.path.relpath(filepath, base_path).replace('\\\\', '/')\n      with tokenize.open(filepath) as file_:\n        tokens = [t for t in tokenize.generate_tokens(file_.readline) if t.type in TOKEN_WHITELIST and not is_docstring(t)]\n        token_count, line_count = len(tokens), len(set([x for t in tokens for x in range(t.start[0], t.end[0]+1)]))\n        if line_count > 0: table.append([relfilepath, line_count, token_count/line_count])\n  return table\n\ndef gen_diff(table_old, table_new):\n  table = []\n  files_new = set([x[0] for x in table_new])\n  files_old = set([x[0] for x in table_old])\n  added, deleted, unchanged = files_new - files_old, files_old - files_new, files_new & files_old\n  if added:\n    for file in added:\n      file_stat = [stats for stats in table_new if file in stats]\n      table.append([file_stat[0][0], file_stat[0][1], file_stat[0][1]-0, file_stat[0][2], file_stat[0][2]-0])\n  if deleted:\n    for file in deleted:\n      file_stat = [stats for stats in table_old if file in stats]\n      table.append([file_stat[0][0], 0, 0 - file_stat[0][1], 0, 0-file_stat[0][2]])\n  if unchanged:\n    for file in unchanged:\n      file_stat_old = [stats for stats in table_old if file in stats]\n      file_stat_new = [stats for stats in table_new if file in stats]\n      if file_stat_new[0][1]-file_stat_old[0][1] != 0 or file_stat_new[0][2]-file_stat_old[0][2] != 0:\n        table.append([file_stat_new[0][0], file_stat_new[0][1], file_stat_new[0][1]-file_stat_old[0][1], file_stat_new[0][2],\n                      file_stat_new[0][2]-file_stat_old[0][2]])\n  return table\n\ndef display_diff(diff): return \"+\"+str(diff) if diff > 0 else str(diff)\n\nif __name__ == \"__main__\":\n  if len(sys.argv) == 3:\n    headers = [\"Name\", \"Lines\", \"Diff\", \"Tokens/Line\", \"Diff\"]\n    table = gen_diff(gen_stats(sys.argv[1]), gen_stats(sys.argv[2]))\n  elif len(sys.argv) == 2:\n    headers = [\"Name\", \"Lines\", \"Tokens/Line\"]\n    table = gen_stats(sys.argv[1])\n  else:\n    headers = [\"Name\", \"Lines\", \"Tokens/Line\"]\n    table = gen_stats(\".\")\n\n  if table:\n    if len(sys.argv) == 3:\n      print(\"### Changes\")\n      print(\"```\")\n      print(tabulate([headers] + sorted(table, key=lambda x: -x[1]), headers=\"firstrow\", intfmt=(..., \"d\", \"+d\"),\n                     floatfmt=(..., ..., ..., \".1f\", \"+.1f\"))+\"\\n\")\n      print(f\"\\ntotal lines changes: {display_diff(sum([x[2] for x in table]))}\")\n      print(\"```\")\n    else:\n      print(tabulate([headers] + sorted(table, key=lambda x: -x[1]), headers=\"firstrow\", floatfmt=\".1f\")+\"\\n\")\n      for dir_name, group in itertools.groupby(sorted([(x[0].rsplit(\"/\", 1)[0], x[1], x[2]) for x in table]), key=lambda x:x[0]):\n        print(f\"{dir_name:30s} : {sum([x[1] for x in group]):6d}\")\n      total_lines = sum([x[1] for x in table])\n      print(f\"\\ntotal line count: {total_lines}\")\n      max_line_count = int(os.getenv(\"MAX_LINE_COUNT\", \"-1\"))\n      assert max_line_count == -1 or total_lines <= max_line_count, f\"OVER {max_line_count} LINES\"\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_driven_development.sh",
          "type": "blob",
          "size": 0.3,
          "content": "#!/bin/bash\npython3 test/external/process_replay/reset.py\nRUN_PROCESS_REPLAY=1 pytest -n auto test/test_tiny.py test/test_uop_graph.py test/test_ops.py test/test_linearizer.py\nwhile true; do\n  if python3 test/test_tiny.py; then\n    PYTHONPATH=\".\" python3 test/external/process_replay/process_replay.py\n  fi\ndone"
        },
        {
          "name": "tinygrad",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}