{
  "metadata": {
    "timestamp": 1736557260538,
    "page": 128,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pallets/flask",
      "stars": 68529,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.23,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 4\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nend_of_line = lf\ncharset = utf-8\nmax_line_length = 88\n\n[*.{css,html,js,json,jsx,scss,ts,tsx,yaml,yml}]\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.09,
          "content": ".idea/\n.vscode/\n.venv*/\nvenv*/\n__pycache__/\ndist/\n.coverage*\nhtmlcov/\n.tox/\ndocs/_build/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.36,
          "content": "repos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.7.3\n    hooks:\n      - id: ruff\n      - id: ruff-format\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: check-merge-conflict\n      - id: debug-statements\n      - id: fix-byte-order-marker\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.2,
          "content": "version: 2\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: '3.12'\npython:\n  install:\n    - requirements: requirements/docs.txt\n    - method: pip\n      path: .\nsphinx:\n  builder: dirhtml\n  fail_on_warning: true\n"
        },
        {
          "name": "CHANGES.rst",
          "type": "blob",
          "size": 69.26,
          "content": "Version 3.2.0\n-------------\n\nUnreleased\n\n-   Remove previously deprecated code: ``__version__``. :pr:`5648`\n\n\nVersion 3.1.1\n-------------\n\nUnreleased\n\n-   Fix type hint for `cli_runner.invoke`. :issue:`5645`\n\n\nVersion 3.1.0\n-------------\n\nReleased 2024-11-13\n\n-   Drop support for Python 3.8. :pr:`5623`\n-   Update minimum dependency versions to latest feature releases.\n    Werkzeug >= 3.1, ItsDangerous >= 2.2, Blinker >= 1.9. :pr:`5624,5633`\n-   Provide a configuration option to control automatic option\n    responses. :pr:`5496`\n-   ``Flask.open_resource``/``open_instance_resource`` and\n    ``Blueprint.open_resource`` take an ``encoding`` parameter to use when\n    opening in text mode. It defaults to ``utf-8``. :issue:`5504`\n-   ``Request.max_content_length`` can be customized per-request instead of only\n    through the ``MAX_CONTENT_LENGTH`` config. Added\n    ``MAX_FORM_MEMORY_SIZE`` and ``MAX_FORM_PARTS`` config. Added documentation\n    about resource limits to the security page. :issue:`5625`\n-   Add support for the ``Partitioned`` cookie attribute (CHIPS), with the\n    ``SESSION_COOKIE_PARTITIONED`` config. :issue:`5472`\n-   ``-e path`` takes precedence over default ``.env`` and ``.flaskenv`` files.\n    ``load_dotenv`` loads default files in addition to a path unless\n    ``load_defaults=False`` is passed. :issue:`5628`\n-   Support key rotation with the ``SECRET_KEY_FALLBACKS`` config, a list of old\n    secret keys that can still be used for unsigning. Extensions will need to\n    add support. :issue:`5621`\n-   Fix how setting ``host_matching=True`` or ``subdomain_matching=False``\n    interacts with ``SERVER_NAME``. Setting ``SERVER_NAME`` no longer restricts\n    requests to only that domain. :issue:`5553`\n-   ``Request.trusted_hosts`` is checked during routing, and can be set through\n    the ``TRUSTED_HOSTS`` config. :issue:`5636`\n\n\nVersion 3.0.3\n-------------\n\nReleased 2024-04-07\n\n-   The default ``hashlib.sha1`` may not be available in FIPS builds. Don't\n    access it at import time so the developer has time to change the default.\n    :issue:`5448`\n-   Don't initialize the ``cli`` attribute in the sansio scaffold, but rather in\n    the ``Flask`` concrete class. :pr:`5270`\n\n\nVersion 3.0.2\n-------------\n\nReleased 2024-02-03\n\n-   Correct type for ``jinja_loader`` property. :issue:`5388`\n-   Fix error with ``--extra-files`` and ``--exclude-patterns`` CLI options.\n    :issue:`5391`\n\n\nVersion 3.0.1\n-------------\n\nReleased 2024-01-18\n\n-   Correct type for ``path`` argument to ``send_file``. :issue:`5336`\n-   Fix a typo in an error message for the ``flask run --key`` option. :pr:`5344`\n-   Session data is untagged without relying on the built-in ``json.loads``\n    ``object_hook``. This allows other JSON providers that don't implement that.\n    :issue:`5381`\n-   Address more type findings when using mypy strict mode. :pr:`5383`\n\n\nVersion 3.0.0\n-------------\n\nReleased 2023-09-30\n\n-   Remove previously deprecated code. :pr:`5223`\n-   Deprecate the ``__version__`` attribute. Use feature detection, or\n    ``importlib.metadata.version(\"flask\")``, instead. :issue:`5230`\n-   Restructure the code such that the Flask (app) and Blueprint\n    classes have Sans-IO bases. :pr:`5127`\n-   Allow self as an argument to url_for. :pr:`5264`\n-   Require Werkzeug >= 3.0.0.\n\n\nVersion 2.3.3\n-------------\n\nReleased 2023-08-21\n\n-   Python 3.12 compatibility.\n-   Require Werkzeug >= 2.3.7.\n-   Use ``flit_core`` instead of ``setuptools`` as build backend.\n-   Refactor how an app's root and instance paths are determined. :issue:`5160`\n\n\nVersion 2.3.2\n-------------\n\nReleased 2023-05-01\n\n-   Set ``Vary: Cookie`` header when the session is accessed, modified, or refreshed.\n-   Update Werkzeug requirement to >=2.3.3 to apply recent bug fixes.\n\n\nVersion 2.3.1\n-------------\n\nReleased 2023-04-25\n\n-   Restore deprecated ``from flask import Markup``. :issue:`5084`\n\n\nVersion 2.3.0\n-------------\n\nReleased 2023-04-25\n\n-   Drop support for Python 3.7. :pr:`5072`\n-   Update minimum requirements to the latest versions: Werkzeug>=2.3.0, Jinja2>3.1.2,\n    itsdangerous>=2.1.2, click>=8.1.3.\n-   Remove previously deprecated code. :pr:`4995`\n\n    -   The ``push`` and ``pop`` methods of the deprecated ``_app_ctx_stack`` and\n        ``_request_ctx_stack`` objects are removed. ``top`` still exists to give\n        extensions more time to update, but it will be removed.\n    -   The ``FLASK_ENV`` environment variable, ``ENV`` config key, and ``app.env``\n        property are removed.\n    -   The ``session_cookie_name``, ``send_file_max_age_default``, ``use_x_sendfile``,\n        ``propagate_exceptions``, and ``templates_auto_reload`` properties on ``app``\n        are removed.\n    -   The ``JSON_AS_ASCII``, ``JSON_SORT_KEYS``, ``JSONIFY_MIMETYPE``, and\n        ``JSONIFY_PRETTYPRINT_REGULAR`` config keys are removed.\n    -   The ``app.before_first_request`` and ``bp.before_app_first_request`` decorators\n        are removed.\n    -   ``json_encoder`` and ``json_decoder`` attributes on app and blueprint, and the\n        corresponding ``json.JSONEncoder`` and ``JSONDecoder`` classes, are removed.\n    -   The ``json.htmlsafe_dumps`` and ``htmlsafe_dump`` functions are removed.\n    -   Calling setup methods on blueprints after registration is an error instead of a\n        warning. :pr:`4997`\n\n-   Importing ``escape`` and ``Markup`` from ``flask`` is deprecated. Import them\n    directly from ``markupsafe`` instead. :pr:`4996`\n-   The ``app.got_first_request`` property is deprecated. :pr:`4997`\n-   The ``locked_cached_property`` decorator is deprecated. Use a lock inside the\n    decorated function if locking is needed. :issue:`4993`\n-   Signals are always available. ``blinker>=1.6.2`` is a required dependency. The\n    ``signals_available`` attribute is deprecated. :issue:`5056`\n-   Signals support ``async`` subscriber functions. :pr:`5049`\n-   Remove uses of locks that could cause requests to block each other very briefly.\n    :issue:`4993`\n-   Use modern packaging metadata with ``pyproject.toml`` instead of ``setup.cfg``.\n    :pr:`4947`\n-   Ensure subdomains are applied with nested blueprints. :issue:`4834`\n-   ``config.from_file`` can use ``text=False`` to indicate that the parser wants a\n    binary file instead. :issue:`4989`\n-   If a blueprint is created with an empty name it raises a ``ValueError``.\n    :issue:`5010`\n-   ``SESSION_COOKIE_DOMAIN`` does not fall back to ``SERVER_NAME``. The default is not\n    to set the domain, which modern browsers interpret as an exact match rather than\n    a subdomain match. Warnings about ``localhost`` and IP addresses are also removed.\n    :issue:`5051`\n-   The ``routes`` command shows each rule's ``subdomain`` or ``host`` when domain\n    matching is in use. :issue:`5004`\n-   Use postponed evaluation of annotations. :pr:`5071`\n\n\nVersion 2.2.5\n-------------\n\nReleased 2023-05-02\n\n-   Update for compatibility with Werkzeug 2.3.3.\n-   Set ``Vary: Cookie`` header when the session is accessed, modified, or refreshed.\n\n\nVersion 2.2.4\n-------------\n\nReleased 2023-04-25\n\n-   Update for compatibility with Werkzeug 2.3.\n\n\nVersion 2.2.3\n-------------\n\nReleased 2023-02-15\n\n-   Autoescape is enabled by default for ``.svg`` template files. :issue:`4831`\n-   Fix the type of ``template_folder`` to accept ``pathlib.Path``. :issue:`4892`\n-   Add ``--debug`` option to the ``flask run`` command. :issue:`4777`\n\n\nVersion 2.2.2\n-------------\n\nReleased 2022-08-08\n\n-   Update Werkzeug dependency to >= 2.2.2. This includes fixes related\n    to the new faster router, header parsing, and the development\n    server. :pr:`4754`\n-   Fix the default value for ``app.env`` to be ``\"production\"``. This\n    attribute remains deprecated. :issue:`4740`\n\n\nVersion 2.2.1\n-------------\n\nReleased 2022-08-03\n\n-   Setting or accessing ``json_encoder`` or ``json_decoder`` raises a\n    deprecation warning. :issue:`4732`\n\n\nVersion 2.2.0\n-------------\n\nReleased 2022-08-01\n\n-   Remove previously deprecated code. :pr:`4667`\n\n    -   Old names for some ``send_file`` parameters have been removed.\n        ``download_name`` replaces ``attachment_filename``, ``max_age``\n        replaces ``cache_timeout``, and ``etag`` replaces ``add_etags``.\n        Additionally, ``path`` replaces ``filename`` in\n        ``send_from_directory``.\n    -   The ``RequestContext.g`` property returning ``AppContext.g`` is\n        removed.\n\n-   Update Werkzeug dependency to >= 2.2.\n-   The app and request contexts are managed using Python context vars\n    directly rather than Werkzeug's ``LocalStack``. This should result\n    in better performance and memory use. :pr:`4682`\n\n    -   Extension maintainers, be aware that ``_app_ctx_stack.top``\n        and ``_request_ctx_stack.top`` are deprecated. Store data on\n        ``g`` instead using a unique prefix, like\n        ``g._extension_name_attr``.\n\n-   The ``FLASK_ENV`` environment variable and ``app.env`` attribute are\n    deprecated, removing the distinction between development and debug\n    mode. Debug mode should be controlled directly using the ``--debug``\n    option or ``app.run(debug=True)``. :issue:`4714`\n-   Some attributes that proxied config keys on ``app`` are deprecated:\n    ``session_cookie_name``, ``send_file_max_age_default``,\n    ``use_x_sendfile``, ``propagate_exceptions``, and\n    ``templates_auto_reload``. Use the relevant config keys instead.\n    :issue:`4716`\n-   Add new customization points to the ``Flask`` app object for many\n    previously global behaviors.\n\n    -   ``flask.url_for`` will call ``app.url_for``. :issue:`4568`\n    -   ``flask.abort`` will call ``app.aborter``.\n        ``Flask.aborter_class`` and ``Flask.make_aborter`` can be used\n        to customize this aborter. :issue:`4567`\n    -   ``flask.redirect`` will call ``app.redirect``. :issue:`4569`\n    -   ``flask.json`` is an instance of ``JSONProvider``. A different\n        provider can be set to use a different JSON library.\n        ``flask.jsonify`` will call ``app.json.response``, other\n        functions in ``flask.json`` will call corresponding functions in\n        ``app.json``. :pr:`4692`\n\n-   JSON configuration is moved to attributes on the default\n    ``app.json`` provider. ``JSON_AS_ASCII``, ``JSON_SORT_KEYS``,\n    ``JSONIFY_MIMETYPE``, and ``JSONIFY_PRETTYPRINT_REGULAR`` are\n    deprecated. :pr:`4692`\n-   Setting custom ``json_encoder`` and ``json_decoder`` classes on the\n    app or a blueprint, and the corresponding ``json.JSONEncoder`` and\n    ``JSONDecoder`` classes, are deprecated. JSON behavior can now be\n    overridden using the ``app.json`` provider interface. :pr:`4692`\n-   ``json.htmlsafe_dumps`` and ``json.htmlsafe_dump`` are deprecated,\n    the function is built-in to Jinja now. :pr:`4692`\n-   Refactor ``register_error_handler`` to consolidate error checking.\n    Rewrite some error messages to be more consistent. :issue:`4559`\n-   Use Blueprint decorators and functions intended for setup after\n    registering the blueprint will show a warning. In the next version,\n    this will become an error just like the application setup methods.\n    :issue:`4571`\n-   ``before_first_request`` is deprecated. Run setup code when creating\n    the application instead. :issue:`4605`\n-   Added the ``View.init_every_request`` class attribute. If a view\n    subclass sets this to ``False``, the view will not create a new\n    instance on every request. :issue:`2520`.\n-   A ``flask.cli.FlaskGroup`` Click group can be nested as a\n    sub-command in a custom CLI. :issue:`3263`\n-   Add ``--app`` and ``--debug`` options to the ``flask`` CLI, instead\n    of requiring that they are set through environment variables.\n    :issue:`2836`\n-   Add ``--env-file`` option to the ``flask`` CLI. This allows\n    specifying a dotenv file to load in addition to ``.env`` and\n    ``.flaskenv``. :issue:`3108`\n-   It is no longer required to decorate custom CLI commands on\n    ``app.cli`` or ``blueprint.cli`` with ``@with_appcontext``, an app\n    context will already be active at that point. :issue:`2410`\n-   ``SessionInterface.get_expiration_time`` uses a timezone-aware\n    value. :pr:`4645`\n-   View functions can return generators directly instead of wrapping\n    them in a ``Response``. :pr:`4629`\n-   Add ``stream_template`` and ``stream_template_string`` functions to\n    render a template as a stream of pieces. :pr:`4629`\n-   A new implementation of context preservation during debugging and\n    testing. :pr:`4666`\n\n    -   ``request``, ``g``, and other context-locals point to the\n        correct data when running code in the interactive debugger\n        console. :issue:`2836`\n    -   Teardown functions are always run at the end of the request,\n        even if the context is preserved. They are also run after the\n        preserved context is popped.\n    -   ``stream_with_context`` preserves context separately from a\n        ``with client`` block. It will be cleaned up when\n        ``response.get_data()`` or ``response.close()`` is called.\n\n-   Allow returning a list from a view function, to convert it to a\n    JSON response like a dict is. :issue:`4672`\n-   When type checking, allow ``TypedDict`` to be returned from view\n    functions. :pr:`4695`\n-   Remove the ``--eager-loading/--lazy-loading`` options from the\n    ``flask run`` command. The app is always eager loaded the first\n    time, then lazily loaded in the reloader. The reloader always prints\n    errors immediately but continues serving. Remove the internal\n    ``DispatchingApp`` middleware used by the previous implementation.\n    :issue:`4715`\n\n\nVersion 2.1.3\n-------------\n\nReleased 2022-07-13\n\n-   Inline some optional imports that are only used for certain CLI\n    commands. :pr:`4606`\n-   Relax type annotation for ``after_request`` functions. :issue:`4600`\n-   ``instance_path`` for namespace packages uses the path closest to\n    the imported submodule. :issue:`4610`\n-   Clearer error message when ``render_template`` and\n    ``render_template_string`` are used outside an application context.\n    :pr:`4693`\n\n\nVersion 2.1.2\n-------------\n\nReleased 2022-04-28\n\n-   Fix type annotation for ``json.loads``, it accepts str or bytes.\n    :issue:`4519`\n-   The ``--cert`` and ``--key`` options on ``flask run`` can be given\n    in either order. :issue:`4459`\n\n\nVersion 2.1.1\n-------------\n\nReleased on 2022-03-30\n\n-   Set the minimum required version of importlib_metadata to 3.6.0,\n    which is required on Python < 3.10. :issue:`4502`\n\n\nVersion 2.1.0\n-------------\n\nReleased 2022-03-28\n\n-   Drop support for Python 3.6. :pr:`4335`\n-   Update Click dependency to >= 8.0. :pr:`4008`\n-   Remove previously deprecated code. :pr:`4337`\n\n    -   The CLI does not pass ``script_info`` to app factory functions.\n    -   ``config.from_json`` is replaced by\n        ``config.from_file(name, load=json.load)``.\n    -   ``json`` functions no longer take an ``encoding`` parameter.\n    -   ``safe_join`` is removed, use ``werkzeug.utils.safe_join``\n        instead.\n    -   ``total_seconds`` is removed, use ``timedelta.total_seconds``\n        instead.\n    -   The same blueprint cannot be registered with the same name. Use\n        ``name=`` when registering to specify a unique name.\n    -   The test client's ``as_tuple`` parameter is removed. Use\n        ``response.request.environ`` instead. :pr:`4417`\n\n-   Some parameters in ``send_file`` and ``send_from_directory`` were\n    renamed in 2.0. The deprecation period for the old names is extended\n    to 2.2. Be sure to test with deprecation warnings visible.\n\n    -   ``attachment_filename`` is renamed to ``download_name``.\n    -   ``cache_timeout`` is renamed to ``max_age``.\n    -   ``add_etags`` is renamed to ``etag``.\n    -   ``filename`` is renamed to ``path``.\n\n-   The ``RequestContext.g`` property is deprecated. Use ``g`` directly\n    or ``AppContext.g`` instead. :issue:`3898`\n-   ``copy_current_request_context`` can decorate async functions.\n    :pr:`4303`\n-   The CLI uses ``importlib.metadata`` instead of ``pkg_resources`` to\n    load command entry points. :issue:`4419`\n-   Overriding ``FlaskClient.open`` will not cause an error on redirect.\n    :issue:`3396`\n-   Add an ``--exclude-patterns`` option to the ``flask run`` CLI\n    command to specify patterns that will be ignored by the reloader.\n    :issue:`4188`\n-   When using lazy loading (the default with the debugger), the Click\n    context from the ``flask run`` command remains available in the\n    loader thread. :issue:`4460`\n-   Deleting the session cookie uses the ``httponly`` flag.\n    :issue:`4485`\n-   Relax typing for ``errorhandler`` to allow the user to use more\n    precise types and decorate the same function multiple times.\n    :issue:`4095, 4295, 4297`\n-   Fix typing for ``__exit__`` methods for better compatibility with\n    ``ExitStack``. :issue:`4474`\n-   From Werkzeug, for redirect responses the ``Location`` header URL\n    will remain relative, and exclude the scheme and domain, by default.\n    :pr:`4496`\n-   Add ``Config.from_prefixed_env()`` to load config values from\n    environment variables that start with ``FLASK_`` or another prefix.\n    This parses values as JSON by default, and allows setting keys in\n    nested dicts. :pr:`4479`\n\n\nVersion 2.0.3\n-------------\n\nReleased 2022-02-14\n\n-   The test client's ``as_tuple`` parameter is deprecated and will be\n    removed in Werkzeug 2.1. It is now also deprecated in Flask, to be\n    removed in Flask 2.1, while remaining compatible with both in\n    2.0.x. Use ``response.request.environ`` instead. :pr:`4341`\n-   Fix type annotation for ``errorhandler`` decorator. :issue:`4295`\n-   Revert a change to the CLI that caused it to hide ``ImportError``\n    tracebacks when importing the application. :issue:`4307`\n-   ``app.json_encoder`` and ``json_decoder`` are only passed to\n    ``dumps`` and ``loads`` if they have custom behavior. This improves\n    performance, mainly on PyPy. :issue:`4349`\n-   Clearer error message when ``after_this_request`` is used outside a\n    request context. :issue:`4333`\n\n\nVersion 2.0.2\n-------------\n\nReleased 2021-10-04\n\n-   Fix type annotation for ``teardown_*`` methods. :issue:`4093`\n-   Fix type annotation for ``before_request`` and ``before_app_request``\n    decorators. :issue:`4104`\n-   Fixed the issue where typing requires template global\n    decorators to accept functions with no arguments. :issue:`4098`\n-   Support View and MethodView instances with async handlers. :issue:`4112`\n-   Enhance typing of ``app.errorhandler`` decorator. :issue:`4095`\n-   Fix registering a blueprint twice with differing names. :issue:`4124`\n-   Fix the type of ``static_folder`` to accept ``pathlib.Path``.\n    :issue:`4150`\n-   ``jsonify`` handles ``decimal.Decimal`` by encoding to ``str``.\n    :issue:`4157`\n-   Correctly handle raising deferred errors in CLI lazy loading.\n    :issue:`4096`\n-   The CLI loader handles ``**kwargs`` in a ``create_app`` function.\n    :issue:`4170`\n-   Fix the order of ``before_request`` and other callbacks that trigger\n    before the view returns. They are called from the app down to the\n    closest nested blueprint. :issue:`4229`\n\n\nVersion 2.0.1\n-------------\n\nReleased 2021-05-21\n\n-   Re-add the ``filename`` parameter in ``send_from_directory``. The\n    ``filename`` parameter has been renamed to ``path``, the old name\n    is deprecated. :pr:`4019`\n-   Mark top-level names as exported so type checking understands\n    imports in user projects. :issue:`4024`\n-   Fix type annotation for ``g`` and inform mypy that it is a namespace\n    object that has arbitrary attributes. :issue:`4020`\n-   Fix some types that weren't available in Python 3.6.0. :issue:`4040`\n-   Improve typing for ``send_file``, ``send_from_directory``, and\n    ``get_send_file_max_age``. :issue:`4044`, :pr:`4026`\n-   Show an error when a blueprint name contains a dot. The ``.`` has\n    special meaning, it is used to separate (nested) blueprint names and\n    the endpoint name. :issue:`4041`\n-   Combine URL prefixes when nesting blueprints that were created with\n    a ``url_prefix`` value. :issue:`4037`\n-   Revert a change to the order that URL matching was done. The\n    URL is again matched after the session is loaded, so the session is\n    available in custom URL converters. :issue:`4053`\n-   Re-add deprecated ``Config.from_json``, which was accidentally\n    removed early. :issue:`4078`\n-   Improve typing for some functions using ``Callable`` in their type\n    signatures, focusing on decorator factories. :issue:`4060`\n-   Nested blueprints are registered with their dotted name. This allows\n    different blueprints with the same name to be nested at different\n    locations. :issue:`4069`\n-   ``register_blueprint`` takes a ``name`` option to change the\n    (pre-dotted) name the blueprint is registered with. This allows the\n    same blueprint to be registered multiple times with unique names for\n    ``url_for``. Registering the same blueprint with the same name\n    multiple times is deprecated. :issue:`1091`\n-   Improve typing for ``stream_with_context``. :issue:`4052`\n\n\nVersion 2.0.0\n-------------\n\nReleased 2021-05-11\n\n-   Drop support for Python 2 and 3.5.\n-   Bump minimum versions of other Pallets projects: Werkzeug >= 2,\n    Jinja2 >= 3, MarkupSafe >= 2, ItsDangerous >= 2, Click >= 8. Be sure\n    to check the change logs for each project. For better compatibility\n    with other applications (e.g. Celery) that still require Click 7,\n    there is no hard dependency on Click 8 yet, but using Click 7 will\n    trigger a DeprecationWarning and Flask 2.1 will depend on Click 8.\n-   JSON support no longer uses simplejson. To use another JSON module,\n    override ``app.json_encoder`` and ``json_decoder``. :issue:`3555`\n-   The ``encoding`` option to JSON functions is deprecated. :pr:`3562`\n-   Passing ``script_info`` to app factory functions is deprecated. This\n    was not portable outside the ``flask`` command. Use\n    ``click.get_current_context().obj`` if it's needed. :issue:`3552`\n-   The CLI shows better error messages when the app failed to load\n    when looking up commands. :issue:`2741`\n-   Add ``SessionInterface.get_cookie_name`` to allow setting the\n    session cookie name dynamically. :pr:`3369`\n-   Add ``Config.from_file`` to load config using arbitrary file\n    loaders, such as ``toml.load`` or ``json.load``.\n    ``Config.from_json`` is deprecated in favor of this. :pr:`3398`\n-   The ``flask run`` command will only defer errors on reload. Errors\n    present during the initial call will cause the server to exit with\n    the traceback immediately. :issue:`3431`\n-   ``send_file`` raises a ``ValueError`` when passed an ``io`` object\n    in text mode. Previously, it would respond with 200 OK and an empty\n    file. :issue:`3358`\n-   When using ad-hoc certificates, check for the cryptography library\n    instead of PyOpenSSL. :pr:`3492`\n-   When specifying a factory function with ``FLASK_APP``, keyword\n    argument can be passed. :issue:`3553`\n-   When loading a ``.env`` or ``.flaskenv`` file, the current working\n    directory is no longer changed to the location of the file.\n    :pr:`3560`\n-   When returning a ``(response, headers)`` tuple from a view, the\n    headers replace rather than extend existing headers on the response.\n    For example, this allows setting the ``Content-Type`` for\n    ``jsonify()``. Use ``response.headers.extend()`` if extending is\n    desired. :issue:`3628`\n-   The ``Scaffold`` class provides a common API for the ``Flask`` and\n    ``Blueprint`` classes. ``Blueprint`` information is stored in\n    attributes just like ``Flask``, rather than opaque lambda functions.\n    This is intended to improve consistency and maintainability.\n    :issue:`3215`\n-   Include ``samesite`` and ``secure`` options when removing the\n    session cookie. :pr:`3726`\n-   Support passing a ``pathlib.Path`` to ``static_folder``. :pr:`3579`\n-   ``send_file`` and ``send_from_directory`` are wrappers around the\n    implementations in ``werkzeug.utils``. :pr:`3828`\n-   Some ``send_file`` parameters have been renamed, the old names are\n    deprecated. ``attachment_filename`` is renamed to ``download_name``.\n    ``cache_timeout`` is renamed to ``max_age``. ``add_etags`` is\n    renamed to ``etag``. :pr:`3828, 3883`\n-   ``send_file`` passes ``download_name`` even if\n    ``as_attachment=False`` by using ``Content-Disposition: inline``.\n    :pr:`3828`\n-   ``send_file`` sets ``conditional=True`` and ``max_age=None`` by\n    default. ``Cache-Control`` is set to ``no-cache`` if ``max_age`` is\n    not set, otherwise ``public``. This tells browsers to validate\n    conditional requests instead of using a timed cache. :pr:`3828`\n-   ``helpers.safe_join`` is deprecated. Use\n    ``werkzeug.utils.safe_join`` instead. :pr:`3828`\n-   The request context does route matching before opening the session.\n    This could allow a session interface to change behavior based on\n    ``request.endpoint``. :issue:`3776`\n-   Use Jinja's implementation of the ``|tojson`` filter. :issue:`3881`\n-   Add route decorators for common HTTP methods. For example,\n    ``@app.post(\"/login\")`` is a shortcut for\n    ``@app.route(\"/login\", methods=[\"POST\"])``. :pr:`3907`\n-   Support async views, error handlers, before and after request, and\n    teardown functions. :pr:`3412`\n-   Support nesting blueprints. :issue:`593, 1548`, :pr:`3923`\n-   Set the default encoding to \"UTF-8\" when loading ``.env`` and\n    ``.flaskenv`` files to allow to use non-ASCII characters. :issue:`3931`\n-   ``flask shell`` sets up tab and history completion like the default\n    ``python`` shell if ``readline`` is installed. :issue:`3941`\n-   ``helpers.total_seconds()`` is deprecated. Use\n    ``timedelta.total_seconds()`` instead. :pr:`3962`\n-   Add type hinting. :pr:`3973`.\n\n\nVersion 1.1.4\n-------------\n\nReleased 2021-05-13\n\n-   Update ``static_folder`` to use ``_compat.fspath`` instead of\n    ``os.fspath`` to continue supporting Python < 3.6 :issue:`4050`\n\n\nVersion 1.1.3\n-------------\n\nReleased 2021-05-13\n\n-   Set maximum versions of Werkzeug, Jinja, Click, and ItsDangerous.\n    :issue:`4043`\n-   Re-add support for passing a ``pathlib.Path`` for ``static_folder``.\n    :pr:`3579`\n\n\nVersion 1.1.2\n-------------\n\nReleased 2020-04-03\n\n-   Work around an issue when running the ``flask`` command with an\n    external debugger on Windows. :issue:`3297`\n-   The static route will not catch all URLs if the ``Flask``\n    ``static_folder`` argument ends with a slash. :issue:`3452`\n\n\nVersion 1.1.1\n-------------\n\nReleased 2019-07-08\n\n-   The ``flask.json_available`` flag was added back for compatibility\n    with some extensions. It will raise a deprecation warning when used,\n    and will be removed in version 2.0.0. :issue:`3288`\n\n\nVersion 1.1.0\n-------------\n\nReleased 2019-07-04\n\n-   Bump minimum Werkzeug version to >= 0.15.\n-   Drop support for Python 3.4.\n-   Error handlers for ``InternalServerError`` or ``500`` will always be\n    passed an instance of ``InternalServerError``. If they are invoked\n    due to an unhandled exception, that original exception is now\n    available as ``e.original_exception`` rather than being passed\n    directly to the handler. The same is true if the handler is for the\n    base ``HTTPException``. This makes error handler behavior more\n    consistent. :pr:`3266`\n\n    -   ``Flask.finalize_request`` is called for all unhandled\n        exceptions even if there is no ``500`` error handler.\n\n-   ``Flask.logger`` takes the same name as ``Flask.name`` (the value\n    passed as ``Flask(import_name)``. This reverts 1.0's behavior of\n    always logging to ``\"flask.app\"``, in order to support multiple apps\n    in the same process. A warning will be shown if old configuration is\n    detected that needs to be moved. :issue:`2866`\n-   ``RequestContext.copy`` includes the current session object in the\n    request context copy. This prevents ``session`` pointing to an\n    out-of-date object. :issue:`2935`\n-   Using built-in RequestContext, unprintable Unicode characters in\n    Host header will result in a HTTP 400 response and not HTTP 500 as\n    previously. :pr:`2994`\n-   ``send_file`` supports ``PathLike`` objects as described in\n    :pep:`519`, to support ``pathlib`` in Python 3. :pr:`3059`\n-   ``send_file`` supports ``BytesIO`` partial content.\n    :issue:`2957`\n-   ``open_resource`` accepts the \"rt\" file mode. This still does the\n    same thing as \"r\". :issue:`3163`\n-   The ``MethodView.methods`` attribute set in a base class is used by\n    subclasses. :issue:`3138`\n-   ``Flask.jinja_options`` is a ``dict`` instead of an\n    ``ImmutableDict`` to allow easier configuration. Changes must still\n    be made before creating the environment. :pr:`3190`\n-   Flask's ``JSONMixin`` for the request and response wrappers was\n    moved into Werkzeug. Use Werkzeug's version with Flask-specific\n    support. This bumps the Werkzeug dependency to >= 0.15.\n    :issue:`3125`\n-   The ``flask`` command entry point is simplified to take advantage\n    of Werkzeug 0.15's better reloader support. This bumps the Werkzeug\n    dependency to >= 0.15. :issue:`3022`\n-   Support ``static_url_path`` that ends with a forward slash.\n    :issue:`3134`\n-   Support empty ``static_folder`` without requiring setting an empty\n    ``static_url_path`` as well. :pr:`3124`\n-   ``jsonify`` supports ``dataclass`` objects. :pr:`3195`\n-   Allow customizing the ``Flask.url_map_class`` used for routing.\n    :pr:`3069`\n-   The development server port can be set to 0, which tells the OS to\n    pick an available port. :issue:`2926`\n-   The return value from ``cli.load_dotenv`` is more consistent with\n    the documentation. It will return ``False`` if python-dotenv is not\n    installed, or if the given path isn't a file. :issue:`2937`\n-   Signaling support has a stub for the ``connect_via`` method when\n    the Blinker library is not installed. :pr:`3208`\n-   Add an ``--extra-files`` option to the ``flask run`` CLI command to\n    specify extra files that will trigger the reloader on change.\n    :issue:`2897`\n-   Allow returning a dictionary from a view function. Similar to how\n    returning a string will produce a ``text/html`` response, returning\n    a dict will call ``jsonify`` to produce a ``application/json``\n    response. :pr:`3111`\n-   Blueprints have a ``cli`` Click group like ``app.cli``. CLI commands\n    registered with a blueprint will be available as a group under the\n    ``flask`` command. :issue:`1357`.\n-   When using the test client as a context manager (``with client:``),\n    all preserved request contexts are popped when the block exits,\n    ensuring nested contexts are cleaned up correctly. :pr:`3157`\n-   Show a better error message when the view return type is not\n    supported. :issue:`3214`\n-   ``flask.testing.make_test_environ_builder()`` has been deprecated in\n    favour of a new class ``flask.testing.EnvironBuilder``. :pr:`3232`\n-   The ``flask run`` command no longer fails if Python is not built\n    with SSL support. Using the ``--cert`` option will show an\n    appropriate error message. :issue:`3211`\n-   URL matching now occurs after the request context is pushed, rather\n    than when it's created. This allows custom URL converters to access\n    the app and request contexts, such as to query a database for an id.\n    :issue:`3088`\n\n\nVersion 1.0.4\n-------------\n\nReleased 2019-07-04\n\n-   The key information for ``BadRequestKeyError`` is no longer cleared\n    outside debug mode, so error handlers can still access it. This\n    requires upgrading to Werkzeug 0.15.5. :issue:`3249`\n-   ``send_file`` url quotes the \":\" and \"/\" characters for more\n    compatible UTF-8 filename support in some browsers. :issue:`3074`\n-   Fixes for :pep:`451` import loaders and pytest 5.x. :issue:`3275`\n-   Show message about dotenv on stderr instead of stdout. :issue:`3285`\n\n\nVersion 1.0.3\n-------------\n\nReleased 2019-05-17\n\n-   ``send_file`` encodes filenames as ASCII instead of Latin-1\n    (ISO-8859-1). This fixes compatibility with Gunicorn, which is\n    stricter about header encodings than :pep:`3333`. :issue:`2766`\n-   Allow custom CLIs using ``FlaskGroup`` to set the debug flag without\n    it always being overwritten based on environment variables.\n    :pr:`2765`\n-   ``flask --version`` outputs Werkzeug's version and simplifies the\n    Python version. :pr:`2825`\n-   ``send_file`` handles an ``attachment_filename`` that is a native\n    Python 2 string (bytes) with UTF-8 coded bytes. :issue:`2933`\n-   A catch-all error handler registered for ``HTTPException`` will not\n    handle ``RoutingException``, which is used internally during\n    routing. This fixes the unexpected behavior that had been introduced\n    in 1.0. :pr:`2986`\n-   Passing the ``json`` argument to ``app.test_client`` does not\n    push/pop an extra app context. :issue:`2900`\n\n\nVersion 1.0.2\n-------------\n\nReleased 2018-05-02\n\n-   Fix more backwards compatibility issues with merging slashes between\n    a blueprint prefix and route. :pr:`2748`\n-   Fix error with ``flask routes`` command when there are no routes.\n    :issue:`2751`\n\n\nVersion 1.0.1\n-------------\n\nReleased 2018-04-29\n\n-   Fix registering partials (with no ``__name__``) as view functions.\n    :pr:`2730`\n-   Don't treat lists returned from view functions the same as tuples.\n    Only tuples are interpreted as response data. :issue:`2736`\n-   Extra slashes between a blueprint's ``url_prefix`` and a route URL\n    are merged. This fixes some backwards compatibility issues with the\n    change in 1.0. :issue:`2731`, :issue:`2742`\n-   Only trap ``BadRequestKeyError`` errors in debug mode, not all\n    ``BadRequest`` errors. This allows ``abort(400)`` to continue\n    working as expected. :issue:`2735`\n-   The ``FLASK_SKIP_DOTENV`` environment variable can be set to ``1``\n    to skip automatically loading dotenv files. :issue:`2722`\n\n\nVersion 1.0\n-----------\n\nReleased 2018-04-26\n\n-   Python 2.6 and 3.3 are no longer supported.\n-   Bump minimum dependency versions to the latest stable versions:\n    Werkzeug >= 0.14, Jinja >= 2.10, itsdangerous >= 0.24, Click >= 5.1.\n    :issue:`2586`\n-   Skip ``app.run`` when a Flask application is run from the command\n    line. This avoids some behavior that was confusing to debug.\n-   Change the default for ``JSONIFY_PRETTYPRINT_REGULAR`` to\n    ``False``. ``~json.jsonify`` returns a compact format by default,\n    and an indented format in debug mode. :pr:`2193`\n-   ``Flask.__init__`` accepts the ``host_matching`` argument and sets\n    it on ``Flask.url_map``. :issue:`1559`\n-   ``Flask.__init__`` accepts the ``static_host`` argument and passes\n    it as the ``host`` argument when defining the static route.\n    :issue:`1559`\n-   ``send_file`` supports Unicode in ``attachment_filename``.\n    :pr:`2223`\n-   Pass ``_scheme`` argument from ``url_for`` to\n    ``Flask.handle_url_build_error``. :pr:`2017`\n-   ``Flask.add_url_rule`` accepts the ``provide_automatic_options``\n    argument to disable adding the ``OPTIONS`` method. :pr:`1489`\n-   ``MethodView`` subclasses inherit method handlers from base classes.\n    :pr:`1936`\n-   Errors caused while opening the session at the beginning of the\n    request are handled by the app's error handlers. :pr:`2254`\n-   Blueprints gained ``Blueprint.json_encoder`` and\n    ``Blueprint.json_decoder`` attributes to override the app's\n    encoder and decoder. :pr:`1898`\n-   ``Flask.make_response`` raises ``TypeError`` instead of\n    ``ValueError`` for bad response types. The error messages have been\n    improved to describe why the type is invalid. :pr:`2256`\n-   Add ``routes`` CLI command to output routes registered on the\n    application. :pr:`2259`\n-   Show warning when session cookie domain is a bare hostname or an IP\n    address, as these may not behave properly in some browsers, such as\n    Chrome. :pr:`2282`\n-   Allow IP address as exact session cookie domain. :pr:`2282`\n-   ``SESSION_COOKIE_DOMAIN`` is set if it is detected through\n    ``SERVER_NAME``. :pr:`2282`\n-   Auto-detect zero-argument app factory called ``create_app`` or\n    ``make_app`` from ``FLASK_APP``. :pr:`2297`\n-   Factory functions are not required to take a ``script_info``\n    parameter to work with the ``flask`` command. If they take a single\n    parameter or a parameter named ``script_info``, the ``ScriptInfo``\n    object will be passed. :pr:`2319`\n-   ``FLASK_APP`` can be set to an app factory, with arguments if\n    needed, for example ``FLASK_APP=myproject.app:create_app('dev')``.\n    :pr:`2326`\n-   ``FLASK_APP`` can point to local packages that are not installed in\n    editable mode, although ``pip install -e`` is still preferred.\n    :pr:`2414`\n-   The ``View`` class attribute\n    ``View.provide_automatic_options`` is set in ``View.as_view``, to be\n    detected by ``Flask.add_url_rule``. :pr:`2316`\n-   Error handling will try handlers registered for ``blueprint, code``,\n    ``app, code``, ``blueprint, exception``, ``app, exception``.\n    :pr:`2314`\n-   ``Cookie`` is added to the response's ``Vary`` header if the session\n    is accessed at all during the request (and not deleted). :pr:`2288`\n-   ``Flask.test_request_context`` accepts ``subdomain`` and\n    ``url_scheme`` arguments for use when building the base URL.\n    :pr:`1621`\n-   Set ``APPLICATION_ROOT`` to ``'/'`` by default. This was already the\n    implicit default when it was set to ``None``.\n-   ``TRAP_BAD_REQUEST_ERRORS`` is enabled by default in debug mode.\n    ``BadRequestKeyError`` has a message with the bad key in debug mode\n    instead of the generic bad request message. :pr:`2348`\n-   Allow registering new tags with ``TaggedJSONSerializer`` to support\n    storing other types in the session cookie. :pr:`2352`\n-   Only open the session if the request has not been pushed onto the\n    context stack yet. This allows ``stream_with_context`` generators to\n    access the same session that the containing view uses. :pr:`2354`\n-   Add ``json`` keyword argument for the test client request methods.\n    This will dump the given object as JSON and set the appropriate\n    content type. :pr:`2358`\n-   Extract JSON handling to a mixin applied to both the ``Request`` and\n    ``Response`` classes. This adds the ``Response.is_json`` and\n    ``Response.get_json`` methods to the response to make testing JSON\n    response much easier. :pr:`2358`\n-   Removed error handler caching because it caused unexpected results\n    for some exception inheritance hierarchies. Register handlers\n    explicitly for each exception if you want to avoid traversing the\n    MRO. :pr:`2362`\n-   Fix incorrect JSON encoding of aware, non-UTC datetimes. :pr:`2374`\n-   Template auto reloading will honor debug mode even if\n    ``Flask.jinja_env`` was already accessed. :pr:`2373`\n-   The following old deprecated code was removed. :issue:`2385`\n\n    -   ``flask.ext`` - import extensions directly by their name instead\n        of through the ``flask.ext`` namespace. For example,\n        ``import flask.ext.sqlalchemy`` becomes\n        ``import flask_sqlalchemy``.\n    -   ``Flask.init_jinja_globals`` - extend\n        ``Flask.create_jinja_environment`` instead.\n    -   ``Flask.error_handlers`` - tracked by\n        ``Flask.error_handler_spec``, use ``Flask.errorhandler``\n        to register handlers.\n    -   ``Flask.request_globals_class`` - use\n        ``Flask.app_ctx_globals_class`` instead.\n    -   ``Flask.static_path`` - use ``Flask.static_url_path`` instead.\n    -   ``Request.module`` - use ``Request.blueprint`` instead.\n\n-   The ``Request.json`` property is no longer deprecated. :issue:`1421`\n-   Support passing a ``EnvironBuilder`` or ``dict`` to\n    ``test_client.open``. :pr:`2412`\n-   The ``flask`` command and ``Flask.run`` will load environment\n    variables from ``.env`` and ``.flaskenv`` files if python-dotenv is\n    installed. :pr:`2416`\n-   When passing a full URL to the test client, the scheme in the URL is\n    used instead of ``PREFERRED_URL_SCHEME``. :pr:`2430`\n-   ``Flask.logger`` has been simplified. ``LOGGER_NAME`` and\n    ``LOGGER_HANDLER_POLICY`` config was removed. The logger is always\n    named ``flask.app``. The level is only set on first access, it\n    doesn't check ``Flask.debug`` each time. Only one format is used,\n    not different ones depending on ``Flask.debug``. No handlers are\n    removed, and a handler is only added if no handlers are already\n    configured. :pr:`2436`\n-   Blueprint view function names may not contain dots. :pr:`2450`\n-   Fix a ``ValueError`` caused by invalid ``Range`` requests in some\n    cases. :issue:`2526`\n-   The development server uses threads by default. :pr:`2529`\n-   Loading config files with ``silent=True`` will ignore ``ENOTDIR``\n    errors. :pr:`2581`\n-   Pass ``--cert`` and ``--key`` options to ``flask run`` to run the\n    development server over HTTPS. :pr:`2606`\n-   Added ``SESSION_COOKIE_SAMESITE`` to control the ``SameSite``\n    attribute on the session cookie. :pr:`2607`\n-   Added ``Flask.test_cli_runner`` to create a Click runner that can\n    invoke Flask CLI commands for testing. :pr:`2636`\n-   Subdomain matching is disabled by default and setting\n    ``SERVER_NAME`` does not implicitly enable it. It can be enabled by\n    passing ``subdomain_matching=True`` to the ``Flask`` constructor.\n    :pr:`2635`\n-   A single trailing slash is stripped from the blueprint\n    ``url_prefix`` when it is registered with the app. :pr:`2629`\n-   ``Request.get_json`` doesn't cache the result if parsing fails when\n    ``silent`` is true. :issue:`2651`\n-   ``Request.get_json`` no longer accepts arbitrary encodings. Incoming\n    JSON should be encoded using UTF-8 per :rfc:`8259`, but Flask will\n    autodetect UTF-8, -16, or -32. :pr:`2691`\n-   Added ``MAX_COOKIE_SIZE`` and ``Response.max_cookie_size`` to\n    control when Werkzeug warns about large cookies that browsers may\n    ignore. :pr:`2693`\n-   Updated documentation theme to make docs look better in small\n    windows. :pr:`2709`\n-   Rewrote the tutorial docs and example project to take a more\n    structured approach to help new users avoid common pitfalls.\n    :pr:`2676`\n\n\nVersion 0.12.5\n--------------\n\nReleased 2020-02-10\n\n-   Pin Werkzeug to < 1.0.0. :issue:`3497`\n\n\nVersion 0.12.4\n--------------\n\nReleased 2018-04-29\n\n-   Repackage 0.12.3 to fix package layout issue. :issue:`2728`\n\n\nVersion 0.12.3\n--------------\n\nReleased 2018-04-26\n\n-   ``Request.get_json`` no longer accepts arbitrary encodings.\n    Incoming JSON should be encoded using UTF-8 per :rfc:`8259`, but\n    Flask will autodetect UTF-8, -16, or -32. :issue:`2692`\n-   Fix a Python warning about imports when using ``python -m flask``.\n    :issue:`2666`\n-   Fix a ``ValueError`` caused by invalid ``Range`` requests in some\n    cases.\n\n\nVersion 0.12.2\n--------------\n\nReleased 2017-05-16\n\n-   Fix a bug in ``safe_join`` on Windows.\n\n\nVersion 0.12.1\n--------------\n\nReleased 2017-03-31\n\n-   Prevent ``flask run`` from showing a ``NoAppException`` when an\n    ``ImportError`` occurs within the imported application module.\n-   Fix encoding behavior of ``app.config.from_pyfile`` for Python 3.\n    :issue:`2118`\n-   Use the ``SERVER_NAME`` config if it is present as default values\n    for ``app.run``. :issue:`2109`, :pr:`2152`\n-   Call ``ctx.auto_pop`` with the exception object instead of ``None``,\n    in the event that a ``BaseException`` such as ``KeyboardInterrupt``\n    is raised in a request handler.\n\n\nVersion 0.12\n------------\n\nReleased 2016-12-21, codename Punsch\n\n-   The cli command now responds to ``--version``.\n-   Mimetype guessing and ETag generation for file-like objects in\n    ``send_file`` has been removed. :issue:`104`, :pr`1849`\n-   Mimetype guessing in ``send_file`` now fails loudly and doesn't fall\n    back to ``application/octet-stream``. :pr:`1988`\n-   Make ``flask.safe_join`` able to join multiple paths like\n    ``os.path.join`` :pr:`1730`\n-   Revert a behavior change that made the dev server crash instead of\n    returning an Internal Server Error. :pr:`2006`\n-   Correctly invoke response handlers for both regular request\n    dispatching as well as error handlers.\n-   Disable logger propagation by default for the app logger.\n-   Add support for range requests in ``send_file``.\n-   ``app.test_client`` includes preset default environment, which can\n    now be directly set, instead of per ``client.get``.\n-   Fix crash when running under PyPy3. :pr:`1814`\n\n\nVersion 0.11.1\n--------------\n\nReleased 2016-06-07\n\n-   Fixed a bug that prevented ``FLASK_APP=foobar/__init__.py`` from\n    working. :pr:`1872`\n\n\nVersion 0.11\n------------\n\nReleased 2016-05-29, codename Absinthe\n\n-   Added support to serializing top-level arrays to ``jsonify``. This\n    introduces a security risk in ancient browsers.\n-   Added before_render_template signal.\n-   Added ``**kwargs`` to ``Flask.test_client`` to support passing\n    additional keyword arguments to the constructor of\n    ``Flask.test_client_class``.\n-   Added ``SESSION_REFRESH_EACH_REQUEST`` config key that controls the\n    set-cookie behavior. If set to ``True`` a permanent session will be\n    refreshed each request and get their lifetime extended, if set to\n    ``False`` it will only be modified if the session actually modifies.\n    Non permanent sessions are not affected by this and will always\n    expire if the browser window closes.\n-   Made Flask support custom JSON mimetypes for incoming data.\n-   Added support for returning tuples in the form ``(response,\n    headers)`` from a view function.\n-   Added ``Config.from_json``.\n-   Added ``Flask.config_class``.\n-   Added ``Config.get_namespace``.\n-   Templates are no longer automatically reloaded outside of debug\n    mode. This can be configured with the new ``TEMPLATES_AUTO_RELOAD``\n    config key.\n-   Added a workaround for a limitation in Python 3.3's namespace\n    loader.\n-   Added support for explicit root paths when using Python 3.3's\n    namespace packages.\n-   Added ``flask`` and the ``flask.cli`` module to start the\n    local debug server through the click CLI system. This is recommended\n    over the old ``flask.run()`` method as it works faster and more\n    reliable due to a different design and also replaces\n    ``Flask-Script``.\n-   Error handlers that match specific classes are now checked first,\n    thereby allowing catching exceptions that are subclasses of HTTP\n    exceptions (in ``werkzeug.exceptions``). This makes it possible for\n    an extension author to create exceptions that will by default result\n    in the HTTP error of their choosing, but may be caught with a custom\n    error handler if desired.\n-   Added ``Config.from_mapping``.\n-   Flask will now log by default even if debug is disabled. The log\n    format is now hardcoded but the default log handling can be disabled\n    through the ``LOGGER_HANDLER_POLICY`` configuration key.\n-   Removed deprecated module functionality.\n-   Added the ``EXPLAIN_TEMPLATE_LOADING`` config flag which when\n    enabled will instruct Flask to explain how it locates templates.\n    This should help users debug when the wrong templates are loaded.\n-   Enforce blueprint handling in the order they were registered for\n    template loading.\n-   Ported test suite to py.test.\n-   Deprecated ``request.json`` in favour of ``request.get_json()``.\n-   Add \"pretty\" and \"compressed\" separators definitions in jsonify()\n    method. Reduces JSON response size when\n    ``JSONIFY_PRETTYPRINT_REGULAR=False`` by removing unnecessary white\n    space included by default after separators.\n-   JSON responses are now terminated with a newline character, because\n    it is a convention that UNIX text files end with a newline and some\n    clients don't deal well when this newline is missing. :pr:`1262`\n-   The automatically provided ``OPTIONS`` method is now correctly\n    disabled if the user registered an overriding rule with the\n    lowercase-version ``options``. :issue:`1288`\n-   ``flask.json.jsonify`` now supports the ``datetime.date`` type.\n    :pr:`1326`\n-   Don't leak exception info of already caught exceptions to context\n    teardown handlers. :pr:`1393`\n-   Allow custom Jinja environment subclasses. :pr:`1422`\n-   Updated extension dev guidelines.\n-   ``flask.g`` now has ``pop()`` and ``setdefault`` methods.\n-   Turn on autoescape for ``flask.templating.render_template_string``\n    by default. :pr:`1515`\n-   ``flask.ext`` is now deprecated. :pr:`1484`\n-   ``send_from_directory`` now raises BadRequest if the filename is\n    invalid on the server OS. :pr:`1763`\n-   Added the ``JSONIFY_MIMETYPE`` configuration variable. :pr:`1728`\n-   Exceptions during teardown handling will no longer leave bad\n    application contexts lingering around.\n-   Fixed broken ``test_appcontext_signals()`` test case.\n-   Raise an ``AttributeError`` in ``helpers.find_package`` with a\n    useful message explaining why it is raised when a :pep:`302` import\n    hook is used without an ``is_package()`` method.\n-   Fixed an issue causing exceptions raised before entering a request\n    or app context to be passed to teardown handlers.\n-   Fixed an issue with query parameters getting removed from requests\n    in the test client when absolute URLs were requested.\n-   Made ``@before_first_request`` into a decorator as intended.\n-   Fixed an etags bug when sending a file streams with a name.\n-   Fixed ``send_from_directory`` not expanding to the application root\n    path correctly.\n-   Changed logic of before first request handlers to flip the flag\n    after invoking. This will allow some uses that are potentially\n    dangerous but should probably be permitted.\n-   Fixed Python 3 bug when a handler from\n    ``app.url_build_error_handlers`` reraises the ``BuildError``.\n\n\nVersion 0.10.1\n--------------\n\nReleased 2013-06-14\n\n-   Fixed an issue where ``|tojson`` was not quoting single quotes which\n    made the filter not work properly in HTML attributes. Now it's\n    possible to use that filter in single quoted attributes. This should\n    make using that filter with angular.js easier.\n-   Added support for byte strings back to the session system. This\n    broke compatibility with the common case of people putting binary\n    data for token verification into the session.\n-   Fixed an issue where registering the same method twice for the same\n    endpoint would trigger an exception incorrectly.\n\n\nVersion 0.10\n------------\n\nReleased 2013-06-13, codename Limoncello\n\n-   Changed default cookie serialization format from pickle to JSON to\n    limit the impact an attacker can do if the secret key leaks.\n-   Added ``template_test`` methods in addition to the already existing\n    ``template_filter`` method family.\n-   Added ``template_global`` methods in addition to the already\n    existing ``template_filter`` method family.\n-   Set the content-length header for x-sendfile.\n-   ``tojson`` filter now does not escape script blocks in HTML5\n    parsers.\n-   ``tojson`` used in templates is now safe by default. This was\n    allowed due to the different escaping behavior.\n-   Flask will now raise an error if you attempt to register a new\n    function on an already used endpoint.\n-   Added wrapper module around simplejson and added default\n    serialization of datetime objects. This allows much easier\n    customization of how JSON is handled by Flask or any Flask\n    extension.\n-   Removed deprecated internal ``flask.session`` module alias. Use\n    ``flask.sessions`` instead to get the session module. This is not to\n    be confused with ``flask.session`` the session proxy.\n-   Templates can now be rendered without request context. The behavior\n    is slightly different as the ``request``, ``session`` and ``g``\n    objects will not be available and blueprint's context processors are\n    not called.\n-   The config object is now available to the template as a real global\n    and not through a context processor which makes it available even in\n    imported templates by default.\n-   Added an option to generate non-ascii encoded JSON which should\n    result in less bytes being transmitted over the network. It's\n    disabled by default to not cause confusion with existing libraries\n    that might expect ``flask.json.dumps`` to return bytes by default.\n-   ``flask.g`` is now stored on the app context instead of the request\n    context.\n-   ``flask.g`` now gained a ``get()`` method for not erroring out on\n    non existing items.\n-   ``flask.g`` now can be used with the ``in`` operator to see what's\n    defined and it now is iterable and will yield all attributes stored.\n-   ``flask.Flask.request_globals_class`` got renamed to\n    ``flask.Flask.app_ctx_globals_class`` which is a better name to what\n    it does since 0.10.\n-   ``request``, ``session`` and ``g`` are now also added as proxies to\n    the template context which makes them available in imported\n    templates. One has to be very careful with those though because\n    usage outside of macros might cause caching.\n-   Flask will no longer invoke the wrong error handlers if a proxy\n    exception is passed through.\n-   Added a workaround for chrome's cookies in localhost not working as\n    intended with domain names.\n-   Changed logic for picking defaults for cookie values from sessions\n    to work better with Google Chrome.\n-   Added ``message_flashed`` signal that simplifies flashing testing.\n-   Added support for copying of request contexts for better working\n    with greenlets.\n-   Removed custom JSON HTTP exception subclasses. If you were relying\n    on them you can reintroduce them again yourself trivially. Using\n    them however is strongly discouraged as the interface was flawed.\n-   Python requirements changed: requiring Python 2.6 or 2.7 now to\n    prepare for Python 3.3 port.\n-   Changed how the teardown system is informed about exceptions. This\n    is now more reliable in case something handles an exception halfway\n    through the error handling process.\n-   Request context preservation in debug mode now keeps the exception\n    information around which means that teardown handlers are able to\n    distinguish error from success cases.\n-   Added the ``JSONIFY_PRETTYPRINT_REGULAR`` configuration variable.\n-   Flask now orders JSON keys by default to not trash HTTP caches due\n    to different hash seeds between different workers.\n-   Added ``appcontext_pushed`` and ``appcontext_popped`` signals.\n-   The builtin run method now takes the ``SERVER_NAME`` into account\n    when picking the default port to run on.\n-   Added ``flask.request.get_json()`` as a replacement for the old\n    ``flask.request.json`` property.\n\n\nVersion 0.9\n-----------\n\nReleased 2012-07-01, codename Campari\n\n-   The ``Request.on_json_loading_failed`` now returns a JSON formatted\n    response by default.\n-   The ``url_for`` function now can generate anchors to the generated\n    links.\n-   The ``url_for`` function now can also explicitly generate URL rules\n    specific to a given HTTP method.\n-   Logger now only returns the debug log setting if it was not set\n    explicitly.\n-   Unregister a circular dependency between the WSGI environment and\n    the request object when shutting down the request. This means that\n    environ ``werkzeug.request`` will be ``None`` after the response was\n    returned to the WSGI server but has the advantage that the garbage\n    collector is not needed on CPython to tear down the request unless\n    the user created circular dependencies themselves.\n-   Session is now stored after callbacks so that if the session payload\n    is stored in the session you can still modify it in an after request\n    callback.\n-   The ``Flask`` class will avoid importing the provided import name if\n    it can (the required first parameter), to benefit tools which build\n    Flask instances programmatically. The Flask class will fall back to\n    using import on systems with custom module hooks, e.g. Google App\n    Engine, or when the import name is inside a zip archive (usually an\n    egg) prior to Python 2.7.\n-   Blueprints now have a decorator to add custom template filters\n    application wide, ``Blueprint.app_template_filter``.\n-   The Flask and Blueprint classes now have a non-decorator method for\n    adding custom template filters application wide,\n    ``Flask.add_template_filter`` and\n    ``Blueprint.add_app_template_filter``.\n-   The ``get_flashed_messages`` function now allows rendering flashed\n    message categories in separate blocks, through a ``category_filter``\n    argument.\n-   The ``Flask.run`` method now accepts ``None`` for ``host`` and\n    ``port`` arguments, using default values when ``None``. This allows\n    for calling run using configuration values, e.g.\n    ``app.run(app.config.get('MYHOST'), app.config.get('MYPORT'))``,\n    with proper behavior whether or not a config file is provided.\n-   The ``render_template`` method now accepts a either an iterable of\n    template names or a single template name. Previously, it only\n    accepted a single template name. On an iterable, the first template\n    found is rendered.\n-   Added ``Flask.app_context`` which works very similar to the request\n    context but only provides access to the current application. This\n    also adds support for URL generation without an active request\n    context.\n-   View functions can now return a tuple with the first instance being\n    an instance of ``Response``. This allows for returning\n    ``jsonify(error=\"error msg\"), 400`` from a view function.\n-   ``Flask`` and ``Blueprint`` now provide a ``get_send_file_max_age``\n    hook for subclasses to override behavior of serving static files\n    from Flask when using ``Flask.send_static_file`` (used for the\n    default static file handler) and ``helpers.send_file``. This hook is\n    provided a filename, which for example allows changing cache\n    controls by file extension. The default max-age for ``send_file``\n    and static files can be configured through a new\n    ``SEND_FILE_MAX_AGE_DEFAULT`` configuration variable, which is used\n    in the default ``get_send_file_max_age`` implementation.\n-   Fixed an assumption in sessions implementation which could break\n    message flashing on sessions implementations which use external\n    storage.\n-   Changed the behavior of tuple return values from functions. They are\n    no longer arguments to the response object, they now have a defined\n    meaning.\n-   Added ``Flask.request_globals_class`` to allow a specific class to\n    be used on creation of the ``g`` instance of each request.\n-   Added ``required_methods`` attribute to view functions to force-add\n    methods on registration.\n-   Added ``flask.after_this_request``.\n-   Added ``flask.stream_with_context`` and the ability to push contexts\n    multiple times without producing unexpected behavior.\n\n\nVersion 0.8.1\n-------------\n\nReleased 2012-07-01\n\n-   Fixed an issue with the undocumented ``flask.session`` module to not\n    work properly on Python 2.5. It should not be used but did cause\n    some problems for package managers.\n\n\nVersion 0.8\n-----------\n\nReleased 2011-09-29, codename Rakija\n\n-   Refactored session support into a session interface so that the\n    implementation of the sessions can be changed without having to\n    override the Flask class.\n-   Empty session cookies are now deleted properly automatically.\n-   View functions can now opt out of getting the automatic OPTIONS\n    implementation.\n-   HTTP exceptions and Bad Request errors can now be trapped so that\n    they show up normally in the traceback.\n-   Flask in debug mode is now detecting some common problems and tries\n    to warn you about them.\n-   Flask in debug mode will now complain with an assertion error if a\n    view was attached after the first request was handled. This gives\n    earlier feedback when users forget to import view code ahead of\n    time.\n-   Added the ability to register callbacks that are only triggered once\n    at the beginning of the first request with\n    ``Flask.before_first_request``.\n-   Malformed JSON data will now trigger a bad request HTTP exception\n    instead of a value error which usually would result in a 500\n    internal server error if not handled. This is a backwards\n    incompatible change.\n-   Applications now not only have a root path where the resources and\n    modules are located but also an instance path which is the\n    designated place to drop files that are modified at runtime (uploads\n    etc.). Also this is conceptually only instance depending and outside\n    version control so it's the perfect place to put configuration files\n    etc.\n-   Added the ``APPLICATION_ROOT`` configuration variable.\n-   Implemented ``TestClient.session_transaction`` to easily modify\n    sessions from the test environment.\n-   Refactored test client internally. The ``APPLICATION_ROOT``\n    configuration variable as well as ``SERVER_NAME`` are now properly\n    used by the test client as defaults.\n-   Added ``View.decorators`` to support simpler decorating of pluggable\n    (class-based) views.\n-   Fixed an issue where the test client if used with the \"with\"\n    statement did not trigger the execution of the teardown handlers.\n-   Added finer control over the session cookie parameters.\n-   HEAD requests to a method view now automatically dispatch to the\n    ``get`` method if no handler was implemented.\n-   Implemented the virtual ``flask.ext`` package to import extensions\n    from.\n-   The context preservation on exceptions is now an integral component\n    of Flask itself and no longer of the test client. This cleaned up\n    some internal logic and lowers the odds of runaway request contexts\n    in unittests.\n-   Fixed the Jinja2 environment's ``list_templates`` method not\n    returning the correct names when blueprints or modules were\n    involved.\n\n\nVersion 0.7.2\n-------------\n\nReleased 2011-07-06\n\n-   Fixed an issue with URL processors not properly working on\n    blueprints.\n\n\nVersion 0.7.1\n-------------\n\nReleased 2011-06-29\n\n-   Added missing future import that broke 2.5 compatibility.\n-   Fixed an infinite redirect issue with blueprints.\n\n\nVersion 0.7\n-----------\n\nReleased 2011-06-28, codename Grappa\n\n-   Added ``Flask.make_default_options_response`` which can be used by\n    subclasses to alter the default behavior for ``OPTIONS`` responses.\n-   Unbound locals now raise a proper ``RuntimeError`` instead of an\n    ``AttributeError``.\n-   Mimetype guessing and etag support based on file objects is now\n    deprecated for ``send_file`` because it was unreliable. Pass\n    filenames instead or attach your own etags and provide a proper\n    mimetype by hand.\n-   Static file handling for modules now requires the name of the static\n    folder to be supplied explicitly. The previous autodetection was not\n    reliable and caused issues on Google's App Engine. Until 1.0 the old\n    behavior will continue to work but issue dependency warnings.\n-   Fixed a problem for Flask to run on jython.\n-   Added a ``PROPAGATE_EXCEPTIONS`` configuration variable that can be\n    used to flip the setting of exception propagation which previously\n    was linked to ``DEBUG`` alone and is now linked to either ``DEBUG``\n    or ``TESTING``.\n-   Flask no longer internally depends on rules being added through the\n    ``add_url_rule`` function and can now also accept regular werkzeug\n    rules added to the url map.\n-   Added an ``endpoint`` method to the flask application object which\n    allows one to register a callback to an arbitrary endpoint with a\n    decorator.\n-   Use Last-Modified for static file sending instead of Date which was\n    incorrectly introduced in 0.6.\n-   Added ``create_jinja_loader`` to override the loader creation\n    process.\n-   Implemented a silent flag for ``config.from_pyfile``.\n-   Added ``teardown_request`` decorator, for functions that should run\n    at the end of a request regardless of whether an exception occurred.\n    Also the behavior for ``after_request`` was changed. It's now no\n    longer executed when an exception is raised.\n-   Implemented ``has_request_context``.\n-   Deprecated ``init_jinja_globals``. Override the\n    ``Flask.create_jinja_environment`` method instead to achieve the\n    same functionality.\n-   Added ``safe_join``.\n-   The automatic JSON request data unpacking now looks at the charset\n    mimetype parameter.\n-   Don't modify the session on ``get_flashed_messages`` if there are no\n    messages in the session.\n-   ``before_request`` handlers are now able to abort requests with\n    errors.\n-   It is not possible to define user exception handlers. That way you\n    can provide custom error messages from a central hub for certain\n    errors that might occur during request processing (for instance\n    database connection errors, timeouts from remote resources etc.).\n-   Blueprints can provide blueprint specific error handlers.\n-   Implemented generic class-based views.\n\n\nVersion 0.6.1\n-------------\n\nReleased 2010-12-31\n\n-   Fixed an issue where the default ``OPTIONS`` response was not\n    exposing all valid methods in the ``Allow`` header.\n-   Jinja2 template loading syntax now allows \"./\" in front of a\n    template load path. Previously this caused issues with module\n    setups.\n-   Fixed an issue where the subdomain setting for modules was ignored\n    for the static folder.\n-   Fixed a security problem that allowed clients to download arbitrary\n    files if the host server was a windows based operating system and\n    the client uses backslashes to escape the directory the files where\n    exposed from.\n\n\nVersion 0.6\n-----------\n\nReleased 2010-07-27, codename Whisky\n\n-   After request functions are now called in reverse order of\n    registration.\n-   OPTIONS is now automatically implemented by Flask unless the\n    application explicitly adds 'OPTIONS' as method to the URL rule. In\n    this case no automatic OPTIONS handling kicks in.\n-   Static rules are now even in place if there is no static folder for\n    the module. This was implemented to aid GAE which will remove the\n    static folder if it's part of a mapping in the .yml file.\n-   ``Flask.config`` is now available in the templates as ``config``.\n-   Context processors will no longer override values passed directly to\n    the render function.\n-   Added the ability to limit the incoming request data with the new\n    ``MAX_CONTENT_LENGTH`` configuration value.\n-   The endpoint for the ``Module.add_url_rule`` method is now optional\n    to be consistent with the function of the same name on the\n    application object.\n-   Added a ``make_response`` function that simplifies creating response\n    object instances in views.\n-   Added signalling support based on blinker. This feature is currently\n    optional and supposed to be used by extensions and applications. If\n    you want to use it, make sure to have ``blinker`` installed.\n-   Refactored the way URL adapters are created. This process is now\n    fully customizable with the ``Flask.create_url_adapter`` method.\n-   Modules can now register for a subdomain instead of just an URL\n    prefix. This makes it possible to bind a whole module to a\n    configurable subdomain.\n\n\nVersion 0.5.2\n-------------\n\nReleased 2010-07-15\n\n-   Fixed another issue with loading templates from directories when\n    modules were used.\n\n\nVersion 0.5.1\n-------------\n\nReleased 2010-07-06\n\n-   Fixes an issue with template loading from directories when modules\n    where used.\n\n\nVersion 0.5\n-----------\n\nReleased 2010-07-06, codename Calvados\n\n-   Fixed a bug with subdomains that was caused by the inability to\n    specify the server name. The server name can now be set with the\n    ``SERVER_NAME`` config key. This key is now also used to set the\n    session cookie cross-subdomain wide.\n-   Autoescaping is no longer active for all templates. Instead it is\n    only active for ``.html``, ``.htm``, ``.xml`` and ``.xhtml``. Inside\n    templates this behavior can be changed with the ``autoescape`` tag.\n-   Refactored Flask internally. It now consists of more than a single\n    file.\n-   ``send_file`` now emits etags and has the ability to do conditional\n    responses builtin.\n-   (temporarily) dropped support for zipped applications. This was a\n    rarely used feature and led to some confusing behavior.\n-   Added support for per-package template and static-file directories.\n-   Removed support for ``create_jinja_loader`` which is no longer used\n    in 0.5 due to the improved module support.\n-   Added a helper function to expose files from any directory.\n\n\nVersion 0.4\n-----------\n\nReleased 2010-06-18, codename Rakia\n\n-   Added the ability to register application wide error handlers from\n    modules.\n-   ``Flask.after_request`` handlers are now also invoked if the request\n    dies with an exception and an error handling page kicks in.\n-   Test client has not the ability to preserve the request context for\n    a little longer. This can also be used to trigger custom requests\n    that do not pop the request stack for testing.\n-   Because the Python standard library caches loggers, the name of the\n    logger is configurable now to better support unittests.\n-   Added ``TESTING`` switch that can activate unittesting helpers.\n-   The logger switches to ``DEBUG`` mode now if debug is enabled.\n\n\nVersion 0.3.1\n-------------\n\nReleased 2010-05-28\n\n-   Fixed a error reporting bug with ``Config.from_envvar``.\n-   Removed some unused code.\n-   Release does no longer include development leftover files (.git\n    folder for themes, built documentation in zip and pdf file and some\n    .pyc files)\n\n\nVersion 0.3\n-----------\n\nReleased 2010-05-28, codename Schnaps\n\n-   Added support for categories for flashed messages.\n-   The application now configures a ``logging.Handler`` and will log\n    request handling exceptions to that logger when not in debug mode.\n    This makes it possible to receive mails on server errors for\n    example.\n-   Added support for context binding that does not require the use of\n    the with statement for playing in the console.\n-   The request context is now available within the with statement\n    making it possible to further push the request context or pop it.\n-   Added support for configurations.\n\n\nVersion 0.2\n-----------\n\nReleased 2010-05-12, codename J?germeister\n\n-   Various bugfixes\n-   Integrated JSON support\n-   Added ``get_template_attribute`` helper function.\n-   ``Flask.add_url_rule`` can now also register a view function.\n-   Refactored internal request dispatching.\n-   Server listens on 127.0.0.1 by default now to fix issues with\n    chrome.\n-   Added external URL support.\n-   Added support for ``send_file``.\n-   Module support and internal request handling refactoring to better\n    support pluggable applications.\n-   Sessions can be set to be permanent now on a per-session basis.\n-   Better error reporting on missing secret keys.\n-   Added support for Google Appengine.\n\n\nVersion 0.1\n-----------\n\nReleased 2010-04-16\n\n-   First public preview release.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.44,
          "content": "Copyright 2010 Pallets\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n1.  Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n2.  Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\n3.  Neither the name of the copyright holder nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.45,
          "content": "# Flask\n\nFlask is a lightweight [WSGI] web application framework. It is designed\nto make getting started quick and easy, with the ability to scale up to\ncomplex applications. It began as a simple wrapper around [Werkzeug]\nand [Jinja], and has become one of the most popular Python web\napplication frameworks.\n\nFlask offers suggestions, but doesn't enforce any dependencies or\nproject layout. It is up to the developer to choose the tools and\nlibraries they want to use. There are many extensions provided by the\ncommunity that make adding new functionality easy.\n\n[WSGI]: https://wsgi.readthedocs.io/\n[Werkzeug]: https://werkzeug.palletsprojects.com/\n[Jinja]: https://jinja.palletsprojects.com/\n\n## A Simple Example\n\n```python\n# save this as app.py\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello, World!\"\n```\n\n```\n$ flask run\n  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n```\n\n## Donate\n\nThe Pallets organization develops and supports Flask and the libraries\nit uses. In order to grow the community of contributors and users, and\nallow the maintainers to devote more time to the projects, [please\ndonate today].\n\n[please donate today]: https://palletsprojects.com/donate\n\n## Contributing\n\nSee our [detailed contributing documentation][contrib] for many ways to\ncontribute, including reporting issues, requesting features, asking or answering\nquestions, and making PRs.\n\n[contrib]: https://palletsprojects.com/contributing/\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.64,
          "content": "[project]\nname = \"Flask\"\nversion = \"3.2.0.dev\"\ndescription = \"A simple framework for building complex web applications.\"\nreadme = \"README.md\"\nlicense = {file = \"LICENSE.txt\"}\nmaintainers = [{name = \"Pallets\", email = \"contact@palletsprojects.com\"}]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Environment :: Web Environment\",\n    \"Framework :: Flask\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: BSD License\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n    \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n    \"Topic :: Internet :: WWW/HTTP :: WSGI\",\n    \"Topic :: Internet :: WWW/HTTP :: WSGI :: Application\",\n    \"Topic :: Software Development :: Libraries :: Application Frameworks\",\n    \"Typing :: Typed\",\n]\nrequires-python = \">=3.9\"\ndependencies = [\n    \"Werkzeug>=3.1\",\n    \"Jinja2>=3.1.2\",\n    \"itsdangerous>=2.2\",\n    \"click>=8.1.3\",\n    \"blinker>=1.9\",\n    \"importlib-metadata>=3.6; python_version < '3.10'\",\n]\n\n[project.urls]\nDonate = \"https://palletsprojects.com/donate\"\nDocumentation = \"https://flask.palletsprojects.com/\"\nChanges = \"https://flask.palletsprojects.com/changes/\"\nSource = \"https://github.com/pallets/flask/\"\nChat = \"https://discord.gg/pallets\"\n\n[project.optional-dependencies]\nasync = [\"asgiref>=3.2\"]\ndotenv = [\"python-dotenv\"]\n\n[project.scripts]\nflask = \"flask.cli:main\"\n\n[build-system]\nrequires = [\"flit_core<4\"]\nbuild-backend = \"flit_core.buildapi\"\n\n[tool.flit.module]\nname = \"flask\"\n\n[tool.flit.sdist]\ninclude = [\n    \"docs/\",\n    \"examples/\",\n    \"requirements/\",\n    \"tests/\",\n    \"CHANGES.rst\",\n    \"CONTRIBUTING.rst\",\n    \"tox.ini\",\n]\nexclude = [\n    \"docs/_build/\",\n]\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\nfilterwarnings = [\n    \"error\",\n]\n\n[tool.coverage.run]\nbranch = true\nsource = [\"flask\", \"tests\"]\n\n[tool.coverage.paths]\nsource = [\"src\", \"*/site-packages\"]\n\n[tool.mypy]\npython_version = \"3.9\"\nfiles = [\"src/flask\", \"tests/type_check\"]\nshow_error_codes = true\npretty = true\nstrict = true\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"asgiref.*\",\n    \"dotenv.*\",\n    \"cryptography.*\",\n    \"importlib_metadata\",\n]\nignore_missing_imports = true\n\n[tool.pyright]\npythonVersion = \"3.9\"\ninclude = [\"src/flask\", \"tests/type_check\"]\ntypeCheckingMode = \"basic\"\n\n[tool.ruff]\nsrc = [\"src\"]\nfix = true\nshow-fixes = true\noutput-format = \"full\"\n\n[tool.ruff.lint]\nselect = [\n    \"B\",  # flake8-bugbear\n    \"E\",  # pycodestyle error\n    \"F\",  # pyflakes\n    \"I\",  # isort\n    \"UP\",  # pyupgrade\n    \"W\",  # pycodestyle warning\n]\n\n[tool.ruff.lint.isort]\nforce-single-line = true\norder-by-type = false\n\n[tool.gha-update]\ntag-only = [\n    \"slsa-framework/slsa-github-generator\",\n]\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.31,
          "content": "[tox]\nenvlist =\n    py3{13,12,11,10,9}\n    pypy310\n    py313-min\n    py39-dev\n    style\n    typing\n    docs\nskip_missing_interpreters = true\n\n[testenv]\npackage = wheel\nwheel_build_env = .pkg\nenvtmpdir = {toxworkdir}/tmp/{envname}\nconstrain_package_deps = true\nuse_frozen_constraints = true\ndeps =\n    -r requirements/tests.txt\n    min: -r requirements/tests-min.txt\n    dev: -r requirements/tests-dev.txt\ncommands = pytest -v --tb=short --basetemp={envtmpdir} {posargs}\n\n[testenv:style]\ndeps = pre-commit\nskip_install = true\ncommands = pre-commit run --all-files\n\n[testenv:typing]\ndeps = -r requirements/typing.txt\ncommands =\n    mypy\n    pyright\n\n[testenv:docs]\ndeps = -r requirements/docs.txt\ncommands = sphinx-build -E -W -b dirhtml docs docs/_build/dirhtml\n\n[testenv:update-actions]\nlabels = update\ndeps = gha-update\nskip_install = true\ncommands = gha-update\n\n[testenv:update-pre_commit]\nlabels = update\ndeps = pre-commit\nskip_install = true\ncommands = pre-commit autoupdate -j4\n\n[testenv:update-requirements]\nlabels = update\ndeps = pip-tools\nskip_install = true\nchange_dir = requirements\ncommands =\n    pip-compile build.in -q {posargs:-U}\n    pip-compile docs.in -q {posargs:-U}\n    pip-compile tests.in -q {posargs:-U}\n    pip-compile tests-min.in -q\n    pip-compile typing.in -q {posargs:-U}\n    pip-compile dev.in -q {posargs:-U}\n"
        }
      ]
    }
  ]
}