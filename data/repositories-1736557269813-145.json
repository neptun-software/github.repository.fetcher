{
  "metadata": {
    "timestamp": 1736557269813,
    "page": 145,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "protocolbuffers/protobuf",
      "stars": 66253,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".bazelignore",
          "type": "blob",
          "size": 0.01,
          "content": "_build/\n"
        },
        {
          "name": ".bazeliskrc",
          "type": "blob",
          "size": 0.02,
          "content": "USE_BAZEL_VERSION=7.1.2\n"
        },
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 1.7,
          "content": "build --cxxopt=-std=c++17 --host_cxxopt=-std=c++17\n\n# TODO: ErrorProne's SelfAssertions are violated in protobuf's test\nbuild --javacopt=-Xep:SelfAssertion:WARN\n\n# This flag works around some issues with Rust linking.\nbuild --@rules_rust//rust/settings:experimental_use_cc_common_link=True\n\nbuild:dbg --compilation_mode=dbg\n\nbuild:opt --compilation_mode=opt\n\nbuild:san-common --config=dbg --strip=never --copt=-O0 --copt=-fno-omit-frame-pointer\n\nbuild:asan --config=san-common --copt=-fsanitize=address --linkopt=-fsanitize=address\n# ASAN hits ODR violations with shared linkage due to rules_proto.\nbuild:asan --dynamic_mode=off\n\nbuild:msan --config=san-common --copt=-fsanitize=memory --linkopt=-fsanitize=memory\nbuild:msan --copt=-fsanitize-memory-track-origins\nbuild:msan --copt=-fsanitize-memory-use-after-dtor\nbuild:msan --action_env=MSAN_OPTIONS=poison_in_dtor=1\n\nbuild:tsan --config=san-common --copt=-fsanitize=thread --linkopt=-fsanitize=thread\n\nbuild:ubsan --config=san-common --copt=-fsanitize=undefined --linkopt=-fsanitize=undefined\nbuild:ubsan --action_env=UBSAN_OPTIONS=halt_on_error=1:print_stacktrace=1\n# Workaround for the fact that Bazel links with $CC, not $CXX\n# https://github.com/bazelbuild/bazel/issues/11122#issuecomment-613746748\nbuild:ubsan --copt=-fno-sanitize=function --copt=-fno-sanitize=vptr\n# Abseil passes nullptr to memcmp with 0 size\nbuild:ubsan --copt=-fno-sanitize=nonnull-attribute\n\n# TODO: migrate all dependencies from WORKSPACE to MODULE.bazel\n# https://github.com/protocolbuffers/protobuf/issues/14313\ncommon --noenable_bzlmod\n\n# Important: this flag ensures that we remain compliant with the C++ layering\n# check.\nbuild --features=layering_check\n\ncommon --repo_env=BAZEL_NO_APPLE_CPP_TOOLCHAIN=1\n"
        },
        {
          "name": ".bcr",
          "type": "tree",
          "content": null
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.07,
          "content": "BasedOnStyle: Google\nDerivePointerAlignment: false\nPointerAlignment: Left\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.32,
          "content": "# CMake-generated files\n.ninja_deps\n.ninja_logs\ncmake/protobuf/*.cmake\ncmake_install.cmake\nCMakeCache.txt\nCTestTestfile.cmake\nCMakeFiles/*\nTesting/Temporary/*\n\n/core\n/protoc\n/test_plugin\n/tests\n/lite-test\n/protoc-*.*\n\n# downloaded files\n/gmock\n\n# in-tree configure-generated files\n/config.h\nconfig.log\nconfig.status\n\nlibtool\nprotobuf-lite.pc\nprotobuf.pc\n.deps\nstamp-h1\n\n# in-tree build products\n*.o\n*.lo\n*.la\n*.so\n*.a\n\n.dirstamp\n\nany_test.pb.*\nmap*unittest.pb.*\nunittest*.pb.*\nsrc/google/protobuf/compiler/cpp/test*.pb.*\nsrc/google/protobuf/util/**/*.pb.cc\nsrc/google/protobuf/util/**/*.pb.h\n\n*.pyc\n*.egg-info\n*_pb2.py\npython/**/*.egg\npython/.eggs/\npython/.tox\npython/build/\npython/docs/_build/\n\nsrc/js_embed\n\n# vim generated\n*.swp\n*~\n\n# Generated test scaffolding\nsrc/no_warning_test.cc\nsrc/no-warning-test\nsrc/protobuf*-test\nsrc/test_plugin\nsrc/testzip.*\nsrc/zcg*zip\nar-lib\n\ntest-driver\ncompile\n\nsrc/**/*.log\nsrc/**/*.trs\n\n# JavaBuild output.\njava/**/target\njava/.idea\njava/**/*.iml\n\n# Windows native output.\ncmake/build\nbuild_msvc\n# Directories suggested by cmake/README.md\n/debug/\n/solution/\n/release/\n\n# NuGet packages: we want the repository configuration, but not the\n# packages themselves.\n/csharp/src/packages/*/\n\n# OS X's Finder creates these for state about opened windows/etc.\n**/.DS_Store\n\n# Cocoapods artifacts\n# Podfile.lock and the workspace file are tracked, to ease deleting them. That's\n# needed to trigger \"pod install\" to rerun the preinstall commands.\nPods/\n\n# Conformance test output\nconformance/.libs/\nconformance/com/\nconformance/conformance-cpp\nconformance/conformance-csharp\nconformance/conformance-java\nconformance/conformance-objc\nconformance/conformance-test-runner\nconformance/conformance.pb.cc\nconformance/conformance.pb.h\nconformance/Conformance.pbobjc.h\nconformance/Conformance.pbobjc.m\nconformance/conformance_pb.js\nconformance/conformance_pb.rb\nconformance/core\nconformance/failing_tests.txt\nconformance/google/\nconformance/google-protobuf/\nconformance/javac_middleman\nconformance/lite/\nconformance/nonexistent_tests.txt\nconformance/protoc_middleman\nconformance/succeeding_tests.txt\nconformance/Conformance/\nconformance/GPBMetadata/\nconformance/Google/\nconformance/Protobuf_test_messages/\nconformance/conformance-php\nconformance/conformance-php-c\nconformance/*.class\n\n# php test output\ncomposer.lock\nphp/.phpunit.result.cache\nphp/tests/.phpunit.result.cache\nphp/tests/generated/\nphp/tests/old_protoc\nphp/tests/phpunit-9.phar\nphp/tests/protobuf/\nphp/tests/core\nphp/tests/vgcore*\nphp/tests/multirequest.result\nphp/tests/nohup.out\nphp/tests/.phpunit.result.cache\nphp/tests/phpunit-*\nphp/ext/google/protobuf/.libs/\nphp/ext/google/protobuf/Makefile.fragments\nphp/ext/google/protobuf/Makefile.global\nphp/ext/google/protobuf/Makefile.objects\nphp/ext/google/protobuf/acinclude.m4\nphp/ext/google/protobuf/build/\nphp/ext/google/protobuf/bundled_php.c\nphp/ext/google/protobuf/config.h\nphp/ext/google/protobuf/config.h.in~\nphp/ext/google/protobuf/config.nice\nphp/ext/google/protobuf/configure.ac\nphp/ext/google/protobuf/configure.in\nphp/ext/google/protobuf/mkinstalldirs\nphp/ext/google/protobuf/run-tests.php\nphp/ext/google/protobuf/third_party/\nvendor/\n\n# Ignore the bazel symlinks\n/bazel-*\n\n# ruby test output\nruby/tests/basic_test_pb.rb\nruby/tests/basic_test_proto2_pb.rb\nruby/tests/generated_code_pb.rb\nruby/tests/test_import_pb.rb\nruby/tests/test_ruby_package_pb.rb\nruby/tests/generated_code_proto2_pb.rb\nruby/tests/multi_level_nesting_test_pb.rb\nruby/tests/service_test_pb.rb\nruby/tests/test_import_proto2_pb.rb\nruby/tests/test_ruby_package_proto2_pb.rb\nruby/tests/basic_test_features_pb.rb\nruby/tests/generated_code_editions_pb.rb\nruby/tests/repeated_field_test_pb.rb\nruby/tests/stress_pb.rb\nruby/tests/utf8_pb.rb\nruby/compatibility_tests/v3.0.0/protoc\nruby/compatibility_tests/v3.0.0/tests/generated_code_pb.rb\nruby/compatibility_tests/v3.0.0/tests/test_import_pb.rb\nruby/Gemfile.lock\n\n# IntelliJ CLion Config files and build output\ncmake/.idea\ncmake/cmake-build-debug/\n\n# Common build subdirectories.\n.build/\n_build/\n\n# Visual Studio 2017\n.vs\n\n# Visual Studio Code\n/.vscode/\n\n# IntelliJ\n.idea\n*.iml\n\n# Eclipse\n**/.settings\n**/.project\n**/.classpath\n\n# BenchmarkDotNet\nBenchmarkDotNet.Artifacts/\n\n# Clangd uses these common ephemeral files\n.cache\ncompile_commands.json\n\n# Ignore GHA NodeJS files\n.github/**/node_modules/\n\n# Ignore Bzlmod lock file until it is more stable\nMODULE.bazel.lock\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": null
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.51,
          "content": "# .readthedocs.yml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\nsphinx:\n  configuration: python/docs/conf.py\n  fail_on_warning: false\n\n# Setup build requirements for docs.\n# Use conda so that we can install the latest libprotobuf package without\n# having to build from scratch just for docs builds.\nconda:\n  environment: python/docs/environment.yml\n\npython:\n  version: 3.8\n  install:\n    - method: setuptools\n      path: python\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 17.33,
          "content": "# Bazel (https://bazel.build/) BUILD file for Protobuf.\n\nload(\"@rules_cc//cc:defs.bzl\", \"cc_binary\", \"cc_library\")\nload(\"@rules_license//rules:license.bzl\", \"license\")\nload(\"@rules_pkg//pkg:mappings.bzl\", \"pkg_files\", \"strip_prefix\")\nload(\"//bazel:cc_proto_library.bzl\", \"cc_proto_library\")\nload(\"//bazel:java_lite_proto_library.bzl\", \"java_lite_proto_library\")\nload(\"//bazel:java_proto_library.bzl\", \"java_proto_library\")\nload(\"//bazel:proto_library.bzl\", \"proto_library\")\nload(\"//bazel/toolchains:proto_lang_toolchain.bzl\", \"proto_lang_toolchain\")\nload(\"//build_defs:cpp_opts.bzl\", \"COPTS\", \"LINK_OPTS\")\nload(\":protobuf.bzl\", \"internal_objc_proto_library\", \"internal_php_proto_library\", \"internal_py_proto_library\")\n\nlicenses([\"notice\"])\n\nexports_files([\n    \"LICENSE\",\n    \"PrivacyInfo.xcprivacy\",\n])\n\nlicense(\n    name = \"license\",\n    package_name = \"protobuf\",\n    license_text = \":LICENSE\",\n)\n\nexports_files(\n    [\"MODULE.bazel\"],\n    visibility = [\"//cmake:__pkg__\"],\n)\n\n################################################################################\n# Well Known Types Proto Library Rules\n#\n# https://developers.google.com/protocol-buffers/docs/reference/google.protobuf\n################################################################################\n# These proto_library rules can be used with one of the language specific proto\n# library rules i.e. java_proto_library:\n#\n# java_proto_library(\n#   name = \"any_java_proto\",\n#   deps = [\"@protobuf//:any_proto\"],\n# )\n################################################################################\n\nalias(\n    name = \"any_proto\",\n    actual = \"//src/google/protobuf:any_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"api_proto\",\n    actual = \"//src/google/protobuf:api_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"duration_proto\",\n    actual = \"//src/google/protobuf:duration_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"empty_proto\",\n    actual = \"//src/google/protobuf:empty_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"field_mask_proto\",\n    actual = \"//src/google/protobuf:field_mask_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"source_context_proto\",\n    actual = \"//src/google/protobuf:source_context_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"struct_proto\",\n    actual = \"//src/google/protobuf:struct_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"timestamp_proto\",\n    actual = \"//src/google/protobuf:timestamp_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"type_proto\",\n    actual = \"//src/google/protobuf:type_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"wrappers_proto\",\n    actual = \"//src/google/protobuf:wrappers_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\n# C++ targets for the well-known types\n\nalias(\n    name = \"any_cc_proto\",\n    actual = \"//src/google/protobuf:any_cc_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"api_cc_proto\",\n    actual = \"//src/google/protobuf:api_cc_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"duration_cc_proto\",\n    actual = \"//src/google/protobuf:duration_cc_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"empty_cc_proto\",\n    actual = \"//src/google/protobuf:empty_cc_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"field_mask_cc_proto\",\n    actual = \"//src/google/protobuf:field_mask_cc_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"source_context_cc_proto\",\n    actual = \"//src/google/protobuf:source_context_cc_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"struct_cc_proto\",\n    actual = \"//src/google/protobuf:struct_cc_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"timestamp_cc_proto\",\n    actual = \"//src/google/protobuf:timestamp_cc_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"type_cc_proto\",\n    actual = \"//src/google/protobuf:type_cc_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"wrappers_cc_proto\",\n    actual = \"//src/google/protobuf:wrappers_cc_proto\",\n    visibility = [\"//visibility:public\"],\n)\n\n# Source files: these are aliases to a filegroup, not a `proto_library`.\n#\n# (This is _probably_ not what you want.)\nalias(\n    name = \"lite_well_known_protos\",\n    actual = \"//src/google/protobuf:well_known_type_protos\",  # filegroup\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"well_known_type_protos\",\n    actual = \"//src/google/protobuf:well_known_type_protos\",  # filegroup\n    visibility = [\"//visibility:public\"],\n)\n\n# Built-in runtime protos: these are part of protobuf's internal\n# implementation, but are not Well-Known Types.\n\nalias(\n    name = \"descriptor_proto\",\n    actual = \"//src/google/protobuf:descriptor_proto\",  # proto_library\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"descriptor_proto_srcs\",\n    actual = \"//src/google/protobuf:descriptor_proto_srcs\",  # filegroup\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"compiler_plugin_proto\",\n    actual = \"//src/google/protobuf/compiler:plugin_proto\",  # proto_library\n    visibility = [\"//visibility:public\"],\n)\n\ncc_library(\n    name = \"cc_wkt_protos\",\n    deprecation = \"Only for backward compatibility. Do not use.\",\n    visibility = [\"//visibility:public\"],\n)\n\n# Source protos that are typically part of the protobuf runtime.\n#\n# DEPRECATED: Prefer :well_known_type_protos for the Well-Known Types\n# (https://developers.google.com/protocol-buffers/docs/reference/google.protobuf)\n# or :descriptor_proto(_srcs) for descriptor.proto (source), or\n# :compiler_plugin_proto for compiler/plugin.proto.\nfilegroup(\n    name = \"well_known_protos\",\n    srcs = [\n        \":descriptor_proto_srcs\",\n        \":well_known_type_protos\",\n        \"//src/google/protobuf/compiler:plugin.proto\",\n    ],\n    deprecation = \"Prefer :well_known_type_protos instead.\",\n    visibility = [\"//visibility:public\"],\n)\n\n################################################################################\n# Protocol Buffers Compiler\n################################################################################\n\nalias(\n    name = \"protoc_lib\",\n    actual = \"//src/google/protobuf/compiler:protoc_lib\",\n    visibility = [\"//visibility:public\"],\n)\n\ncc_binary(\n    name = \"protoc\",\n    copts = COPTS,\n    linkopts = LINK_OPTS,\n    visibility = [\"//visibility:public\"],\n    deps = [\"//src/google/protobuf/compiler:protoc_lib\"],\n)\n\ncc_binary(\n    name = \"protoc_static\",\n    copts = COPTS,\n    features = select({\n        # This isn't possible on mac because there is no static library for lcrt0.o\n        \"@platforms//os:osx\": [],\n        \"//build_defs:config_osx\": [],\n        # When cross-compiling we need to statically link all C++ libraries.\n        \"//conditions:default\": [\"fully_static_link\"],\n    }),\n    linkopts = LINK_OPTS,\n    visibility = [\"//visibility:public\"],\n    deps = [\"//src/google/protobuf/compiler:protoc_lib\"],\n)\n\n################################################################################\n# C++ runtime\n################################################################################\n\n# Expose the runtime for the proto_lang_toolchain so that it can also be used in\n# a user-defined proto_lang_toolchain.\nalias(\n    name = \"protobuf\",\n    actual = \"//src/google/protobuf:protobuf_layering_check_legacy\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"protobuf_nowkt\",\n    actual = \"//src/google/protobuf\",\n    deprecation = \"Use //:protobuf instead\",\n    visibility = [\"//visibility:public\"],\n)\n\n# The \"lite\" runtime works for .proto files that specify the option:\n#     optimize_for = LITE_RUNTIME;\n#\n# The lite runtime does not include the `Reflection` APIs (including\n# `Descriptor` and related types) or Well-Known Types.\n#\n# See also:\n#     https://developers.google.com/protocol-buffers/docs/reference/cpp-generated#message\n#     https://developers.google.com/protocol-buffers/docs/reference/google.protobuf\nalias(\n    name = \"protobuf_lite\",\n    actual = \"//src/google/protobuf:protobuf_lite\",\n    visibility = [\"//visibility:public\"],\n)\n\n# This provides just the header files for use in projects that need to build\n# shared libraries for dynamic loading. This target is available until Bazel\n# adds native support for such use cases.\n# TODO: Remove this target once the support gets added to Bazel.\nalias(\n    name = \"protobuf_headers\",\n    actual = \"//src/google/protobuf:protobuf_headers\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"json\",\n    actual = \"//src/google/protobuf/json\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"delimited_message_util\",\n    actual = \"//src/google/protobuf/util:delimited_message_util\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"differencer\",\n    actual = \"//src/google/protobuf/util:differencer\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"field_mask_util\",\n    actual = \"//src/google/protobuf/util:field_mask_util\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"json_util\",\n    actual = \"//src/google/protobuf/util:json_util\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"time_util\",\n    actual = \"//src/google/protobuf/util:time_util\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"type_resolver\",\n    actual = \"//src/google/protobuf/util:type_resolver\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"cpp_features_proto\",\n    actual = \"//src/google/protobuf:cpp_features_proto\",  # proto_library\n    visibility = [\"//visibility:public\"],\n)\n\n################################################################################\n# Java support\n################################################################################\n\nalias(\n    name = \"protobuf_java\",\n    actual = \"//java/core\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"protobuf_javalite\",\n    actual = \"//java/lite\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"protobuf_java_util\",\n    actual = \"//java/util\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"java_toolchain\",\n    actual = \"//java/core:toolchain\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"javalite_toolchain\",\n    actual = \"//java/lite:toolchain\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"java_features_proto\",\n    actual = \"//java/core:java_features_proto\",  # proto_library\n    visibility = [\"//visibility:public\"],\n)\n\n################################################################################\n# Python support\n################################################################################\n\nalias(\n    name = \"protobuf_python\",\n    actual = \"//python:protobuf_python\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"python_srcs\",\n    actual = \"//python:python_srcs\",\n    visibility = [\"//python:__subpackages__\"],\n)\n\nalias(\n    name = \"python_test_srcs\",\n    actual = \"//python:python_test_srcs\",\n    visibility = [\"//python:__subpackages__\"],\n)\n\nalias(\n    name = \"well_known_types_py_pb2\",\n    actual = \"//python:well_known_types_py_pb2\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"python_common_test_protos\",\n    actual = \"//python:python_common_test_protos\",\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"python_specific_test_protos\",\n    actual = \"//python:python_specific_test_protos\",\n    visibility = [\"//visibility:public\"],\n)\n\nproto_lang_toolchain(\n    name = \"cc_toolchain\",\n    blacklisted_protos = [\n        \"//:compiler_plugin_proto\",\n        \"//:cpp_features_proto\",\n        \"//:descriptor_proto\",\n    ],\n    command_line = \"--cpp_out=$(OUT)\",\n    runtime = \"//src/google/protobuf\",\n    visibility = [\"//visibility:public\"],\n)\n\n################################################################################\n# Objective-C support\n################################################################################\n\nalias(\n    name = \"objectivec\",\n    actual = \"//objectivec\",\n    tags = [\"manual\"],\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"protobuf_objc\",\n    actual = \"//objectivec\",\n    tags = [\"manual\"],\n    visibility = [\"//visibility:public\"],\n)\n\n################################################################################\n# Rust support\n################################################################################\n\nalias(\n    name = \"protobuf_rust\",\n    actual = \"//rust:protobuf\",\n    visibility = [\"//visibility:public\"],\n)\n\n################################################################################\n# Test protos\n################################################################################\n\nalias(\n    name = \"lite_test_proto_srcs\",\n    actual = \"//src/google/protobuf:lite_test_proto_srcs\",  # proto_library\n    visibility = [\"//:__subpackages__\"],\n)\n\nalias(\n    name = \"lite_test_protos\",\n    actual = \"//src/google/protobuf:lite_test_protos\",  # proto_library\n    visibility = [\"//:__subpackages__\"],\n)\n\nalias(\n    name = \"test_proto_srcs\",\n    actual = \"//src/google/protobuf:test_proto_srcs\",  # filegroup\n    visibility = [\"//:__subpackages__\"],\n)\n\nalias(\n    name = \"test_proto_editions_srcs\",\n    actual = \"//src/google/protobuf:test_proto_editions_srcs\",  # filegroup\n    visibility = [\"//:__subpackages__\"],\n)\n\nalias(\n    name = \"test_protos\",\n    actual = \"//src/google/protobuf:test_protos\",  # proto_library\n    visibility = [\"//:__subpackages__\"],\n)\n\n# Validate generated proto source inputs:\n\ngenrule(\n    name = \"generated_protos\",\n    testonly = 1,\n    srcs = [\"//src/google/protobuf:test_proto_srcs\"],\n    outs = [\"unittest_gen_import.proto\"],\n    cmd = \"cat src/google/protobuf/unittest_import.proto > $@\",\n)\n\nproto_library(\n    name = \"generated_protos_proto\",\n    testonly = 1,\n    srcs = [\":generated_protos\"],\n    deps = [\"//src/google/protobuf:generic_test_protos\"],\n)\n\ninternal_py_proto_library(\n    name = \"generated_protos_py\",\n    testonly = 1,\n    srcs = [\":generated_protos\"],\n    default_runtime = \"\",\n    protoc = \":protoc\",\n    deps = [\"//python:python_common_test_protos\"],\n)\n\n################################################################################\n# Conformance tests\n################################################################################\n\ncc_proto_library(\n    name = \"test_messages_proto2_cc_proto\",\n    visibility = [\n        \"//conformance:__pkg__\",\n        \"//src:__subpackages__\",\n    ],\n    deps = [\"//src/google/protobuf:test_messages_proto2_proto\"],\n)\n\ncc_proto_library(\n    name = \"test_messages_proto3_cc_proto\",\n    visibility = [\n        \"//conformance:__pkg__\",\n        \"//src:__subpackages__\",\n    ],\n    deps = [\"//src/google/protobuf:test_messages_proto3_proto\"],\n)\n\njava_proto_library(\n    name = \"test_messages_proto2_java_proto\",\n    visibility = [\n        \"//conformance:__pkg__\",\n        \"//java:__subpackages__\",\n    ],\n    deps = [\"//src/google/protobuf:test_messages_proto2_proto\"],\n)\n\njava_proto_library(\n    name = \"test_messages_proto3_java_proto\",\n    visibility = [\n        \"//conformance:__pkg__\",\n        \"//java:__subpackages__\",\n    ],\n    deps = [\"//src/google/protobuf:test_messages_proto3_proto\"],\n)\n\njava_lite_proto_library(\n    name = \"test_messages_proto2_java_proto_lite\",\n    visibility = [\n        \"//conformance:__pkg__\",\n        \"//java:__subpackages__\",\n    ],\n    deps = [\"//src/google/protobuf:test_messages_proto2_proto\"],\n)\n\njava_lite_proto_library(\n    name = \"test_messages_proto3_java_proto_lite\",\n    visibility = [\n        \"//conformance:__pkg__\",\n        \"//java:__subpackages__\",\n    ],\n    deps = [\"//src/google/protobuf:test_messages_proto3_proto\"],\n)\n\ninternal_objc_proto_library(\n    name = \"test_messages_proto2_objc_proto\",\n    testonly = 1,\n    srcs = [\"//src/google/protobuf:test_messages_proto2.proto\"],\n    includes = [\"src/google/protobuf\"],\n    visibility = [\n        \"//conformance:__pkg__\",\n        \"//objectivec:__subpackages__\",\n    ],\n)\n\ninternal_objc_proto_library(\n    name = \"test_messages_proto3_objc_proto\",\n    testonly = 1,\n    srcs = [\"//src/google/protobuf:test_messages_proto3.proto\"],\n    includes = [\n        \"src/google/protobuf\",\n        # The above must come first.\n        \"src\",\n    ],\n    proto_deps = [\":well_known_protos\"],\n    visibility = [\n        \"//conformance:__pkg__\",\n        \"//objectivec:__subpackages__\",\n    ],\n)\n\ninternal_php_proto_library(\n    name = \"test_messages_proto3_php_proto\",\n    testonly = 1,\n    srcs = [\"//src/google/protobuf:test_messages_proto3.proto\"],\n    outs = [\n        \"GPBMetadata/TestMessagesProto3.php\",\n        \"Protobuf_test_messages/Proto3/EnumOnlyProto3.php\",\n        \"Protobuf_test_messages/Proto3/EnumOnlyProto3/PBBool.php\",\n        \"Protobuf_test_messages/Proto3/ForeignEnum.php\",\n        \"Protobuf_test_messages/Proto3/ForeignMessage.php\",\n        \"Protobuf_test_messages/Proto3/NullHypothesisProto3.php\",\n        \"Protobuf_test_messages/Proto3/TestAllTypesProto3.php\",\n        \"Protobuf_test_messages/Proto3/TestAllTypesProto3/AliasedEnum.php\",\n        \"Protobuf_test_messages/Proto3/TestAllTypesProto3/NestedEnum.php\",\n        \"Protobuf_test_messages/Proto3/TestAllTypesProto3/NestedMessage.php\",\n    ],\n    includes = [\n        \"src/google/protobuf\",\n        # The above must come first.\n        \"src\",\n    ],\n    proto_deps = [\":well_known_protos\"],\n    visibility = [\n        \"//conformance:__pkg__\",\n        \"//php:__subpackages__\",\n    ],\n)\n\nfilegroup(\n    name = \"bzl_srcs\",\n    srcs = glob([\"**/*.bzl\"]),\n    visibility = [\"//visibility:public\"],\n)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 13.03,
          "content": "# Minimum CMake required. If available, accept the policy-controlled behavior up\n# to 3.26.\ncmake_minimum_required(VERSION 3.16...3.26)\n\n# Revert to old behavior for MSVC debug symbols.\nif(POLICY CMP0141)\n  cmake_policy(SET CMP0141 OLD)\nendif()\n\nif(protobuf_VERBOSE)\n  message(STATUS \"Protocol Buffers Configuring...\")\nendif()\n\n# Project\nproject(protobuf C CXX)\n\nif(protobuf_DEPRECATED_CMAKE_SUBDIRECTORY_USAGE)\n  if(CMAKE_PROJECT_NAME STREQUAL \"protobuf\")\n    get_filename_component(CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)\n  endif()\n  get_filename_component(CMAKE_CURRENT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\n  get_filename_component(PROJECT_SOURCE_DIR ${PROJECT_SOURCE_DIR} DIRECTORY)\n  get_filename_component(protobuf_SOURCE_DIR ${protobuf_SOURCE_DIR} DIRECTORY)\nendif()\n\n# Options\noption(protobuf_INSTALL \"Install protobuf binaries and files\" ON)\noption(protobuf_BUILD_TESTS \"Build tests\" ON)\noption(protobuf_BUILD_CONFORMANCE \"Build conformance tests\" OFF)\noption(protobuf_BUILD_EXAMPLES \"Build examples\" OFF)\noption(protobuf_BUILD_PROTOBUF_BINARIES \"Build protobuf libraries and protoc compiler\" ON)\noption(protobuf_BUILD_PROTOC_BINARIES \"Build libprotoc and protoc compiler\" ON)\noption(protobuf_BUILD_LIBPROTOC \"Build libprotoc\" OFF)\noption(protobuf_BUILD_LIBUPB \"Build libupb\" ON)\noption(protobuf_DISABLE_RTTI \"Remove runtime type information in the binaries\" OFF)\noption(protobuf_TEST_XML_OUTDIR \"Output directory for XML logs from tests.\" \"\")\noption(protobuf_ALLOW_CCACHE \"Adjust build flags to allow for ccache support.\" OFF)\noption(protobuf_FORCE_FETCH_DEPENDENCIES \"Force all dependencies to be downloaded from GitHub.  Local installations will be ignored.\" OFF)\noption(protobuf_LOCAL_DEPENDENCIES_ONLY \"Prevent downloading any dependencies from GitHub. If this option is set, the dependency must be available locally as an installed package.\" OFF)\n\n# We support Unity (Jumbo) builds best-effort.\noption(protobuf_USE_UNITY_BUILD \"Enable Unity (Jumbo) build for\" OFF)\nif (BUILD_SHARED_LIBS)\n  set(protobuf_BUILD_SHARED_LIBS_DEFAULT ON)\nelse (BUILD_SHARED_LIBS)\n  set(protobuf_BUILD_SHARED_LIBS_DEFAULT OFF)\nendif (BUILD_SHARED_LIBS)\noption(protobuf_BUILD_SHARED_LIBS \"Build Shared Libraries\" ${protobuf_BUILD_SHARED_LIBS_DEFAULT})\ninclude(CMakeDependentOption)\ncmake_dependent_option(protobuf_MSVC_STATIC_RUNTIME \"Link static runtime libraries\" ON\n  \"NOT protobuf_BUILD_SHARED_LIBS\" OFF)\nset(protobuf_WITH_ZLIB_DEFAULT ON)\noption(protobuf_WITH_ZLIB \"Build with zlib support\" ${protobuf_WITH_ZLIB_DEFAULT})\nset(protobuf_DEBUG_POSTFIX \"d\"\n  CACHE STRING \"Default debug postfix\")\nmark_as_advanced(protobuf_DEBUG_POSTFIX)\n\nif(WITH_PROTOC)\n  set(protobuf_PROTOC_EXE protoc)\n  set(protobuf_BUILD_PROTOC_BINARIES OFF)\n  add_executable(protoc IMPORTED GLOBAL)\n  add_executable(protobuf::protoc ALIAS protoc)\n  set_property(TARGET protoc PROPERTY IMPORTED_LOCATION ${WITH_PROTOC})\nendif()\n\n# User options\ninclude(${protobuf_SOURCE_DIR}/cmake/protobuf-options.cmake)\n\nif (protobuf_BUILD_SHARED_LIBS)\n  # This is necessary for linking in Abseil.\n  set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\n  # Build Abseil as shared libraries to avoid ODR violations.\n  set(BUILD_SHARED_LIBS ON)\n\n  # Output directory is correct by default for most build setups. However, when\n  # building Protobuf as a DLL, it is important to have the DLL in the same\n  # directory as the executable using it. Thus, we put all binaries in a single\n  # /bin directory.\n  if (MSVC)\n    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n    set(CMAKE_PDB_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n  endif ()\nendif ()\n\n# Version metadata\nset(protobuf_VERSION_STRING \"5.30.0\")\nset(protobuf_DESCRIPTION \"Protocol Buffers\")\nset(protobuf_CONTACT \"protobuf@googlegroups.com\")\n\n# Overrides for option dependencies\nif (protobuf_BUILD_PROTOC_BINARIES OR protobuf_BUILD_TESTS)\n  set(protobuf_BUILD_LIBPROTOC ON)\nendif ()\nif (NOT protobuf_BUILD_PROTOBUF_BINARIES)\n  set(protobuf_INSTALL OFF)\nendif()\n# Parse version tweaks\nset(protobuf_VERSION_REGEX \"^([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)([-]rc[-]|\\\\.)?([0-9]*)$\")\nstring(REGEX REPLACE     \"${protobuf_VERSION_REGEX}\" \"\\\\1\"\n  protobuf_VERSION_MAJOR \"${protobuf_VERSION_STRING}\")\nstring(REGEX REPLACE     \"${protobuf_VERSION_REGEX}\" \"\\\\2\"\n  protobuf_VERSION_MINOR \"${protobuf_VERSION_STRING}\")\nstring(REGEX REPLACE     \"${protobuf_VERSION_REGEX}\" \"\\\\3\"\n  protobuf_VERSION_PATCH \"${protobuf_VERSION_STRING}\")\nstring(REGEX REPLACE     \"${protobuf_VERSION_REGEX}\" \"\\\\5\"\n  protobuf_VERSION_PRERELEASE \"${protobuf_VERSION_STRING}\")\n\nif (protobuf_FORCE_FETCH_DEPENDENCIES AND protobuf_LOCAL_DEPENDENCIES_ONLY)\n  message(FATAL_ERROR \"Conflicting options protobuf_FORCE_FETCH_DEPENDENCIES and protobuf_LOCAL_DEPENDENCIES_ONLY both set\")\nendif()\n\n# Package version\nset(protobuf_VERSION\n  \"${protobuf_VERSION_MINOR}.${protobuf_VERSION_PATCH}\")\n\nif(protobuf_VERSION_PRERELEASE)\n  message(STATUS \"${protobuf_VERSION_PRERELEASE}\")\n  set(protobuf_VERSION \"${protobuf_VERSION}.${protobuf_VERSION_PRERELEASE}\")\nelse()\n  set(protobuf_VERSION \"${protobuf_VERSION}.0\")\nendif()\nmessage(STATUS \"protobuf version: ${protobuf_VERSION}\")\n\nif(protobuf_VERBOSE)\n  message(STATUS \"Configuration script parsing status [\")\n  message(STATUS \"  Description : ${protobuf_DESCRIPTION}\")\n  message(STATUS \"  Version     : ${protobuf_VERSION} (${protobuf_VERSION_STRING})\")\n  message(STATUS \"  Contact     : ${protobuf_CONTACT}\")\n  message(STATUS \"]\")\nendif()\n\nfile(WRITE ${CMAKE_CURRENT_BINARY_DIR}/cmaketest.map\n\"{\n  global:\n    main;\n  local:\n    *;\n};\")\n# CheckLinkerFlag module available in CMake >=3.18.\nif(${CMAKE_VERSION} VERSION_GREATER 3.18 OR ${CMAKE_VERSION} VERSION_EQUAL 3.18)\n  include(CheckLinkerFlag)\n  check_linker_flag(CXX -Wl,--version-script=${CMAKE_CURRENT_BINARY_DIR}/cmaketest.map protobuf_HAVE_LD_VERSION_SCRIPT)\nelse()\n  include(CheckCXXSourceCompiles)\n  set(OLD_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})\n  set(CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS} -Wl,--version-script=${CMAKE_CURRENT_BINARY_DIR}/cmaketest.map)\n  check_cxx_source_compiles(\"\n    int main() {\n      return 0;\n    }\n  \" protobuf_HAVE_LD_VERSION_SCRIPT)\n  set(CMAKE_REQUIRED_FLAGS ${OLD_CMAKE_REQUIRED_FLAGS})\nendif()\nfile(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/cmaketest.map)\n\nfind_package(Threads REQUIRED)\n\nset(_protobuf_FIND_ZLIB)\nif (protobuf_WITH_ZLIB)\n  find_package(ZLIB)\n  if (ZLIB_FOUND)\n    set(HAVE_ZLIB 1)\n    # FindZLIB module define ZLIB_INCLUDE_DIRS variable\n    # Set ZLIB_INCLUDE_DIRECTORIES for compatible\n    set(ZLIB_INCLUDE_DIRECTORIES ${ZLIB_INCLUDE_DIRECTORIES} ${ZLIB_INCLUDE_DIRS})\n    # Using imported target if exists\n    if (TARGET ZLIB::ZLIB)\n      set(ZLIB_LIBRARIES ZLIB::ZLIB)\n      set(_protobuf_FIND_ZLIB \"if(NOT ZLIB_FOUND)\\n  find_package(ZLIB)\\nendif()\")\n    endif (TARGET ZLIB::ZLIB)\n  else (ZLIB_FOUND)\n    set(HAVE_ZLIB 0)\n    # Explicitly set these to empty (override NOT_FOUND) so cmake doesn't\n    # complain when we use them later.\n    set(ZLIB_INCLUDE_DIRECTORIES)\n    set(ZLIB_LIBRARIES)\n  endif (ZLIB_FOUND)\nendif (protobuf_WITH_ZLIB)\n\n# We need to link with libatomic on systems that do not have builtin atomics, or\n# don't have builtin support for 8 byte atomics\nset(protobuf_LINK_LIBATOMIC false)\nif (NOT MSVC)\n  include(CheckCXXSourceCompiles)\n  set(OLD_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})\n  set(CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS} -std=c++17)\n  check_cxx_source_compiles(\"\n    #include <atomic>\n    int main() {\n      return static_cast<int>(std::atomic<int64_t>{});\n    }\n  \" protobuf_HAVE_BUILTIN_ATOMICS)\n  if (NOT protobuf_HAVE_BUILTIN_ATOMICS)\n    set(protobuf_LINK_LIBATOMIC true)\n  endif (NOT protobuf_HAVE_BUILTIN_ATOMICS)\n  set(CMAKE_REQUIRED_FLAGS ${OLD_CMAKE_REQUIRED_FLAGS})\nendif (NOT MSVC)\n\nif (protobuf_BUILD_SHARED_LIBS)\n  set(protobuf_SHARED_OR_STATIC \"SHARED\")\nelse (protobuf_BUILD_SHARED_LIBS)\n  set(protobuf_SHARED_OR_STATIC \"STATIC\")\n  set(ABSL_MSVC_STATIC_RUNTIME ON)\n  if (protobuf_MSVC_STATIC_RUNTIME)\n      set(CMAKE_MSVC_RUNTIME_LIBRARY MultiThreaded$<$<CONFIG:Debug>:Debug>)\n  else()\n      set(CMAKE_MSVC_RUNTIME_LIBRARY MultiThreaded$<$<CONFIG:Debug>:Debug>DLL)\n  endif()\nendif (protobuf_BUILD_SHARED_LIBS)\n\n# Export all symbols on Windows when building shared libraries\nSET(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\n\nif (MSVC)\n  string(REPLACE \"/\" \"\\\\\" PROTOBUF_SOURCE_WIN32_PATH ${protobuf_SOURCE_DIR})\n  string(REPLACE \"/\" \"\\\\\" PROTOBUF_BINARY_WIN32_PATH ${protobuf_BINARY_DIR})\n  string(REPLACE \".\" \",\"  protobuf_RC_FILEVERSION \"${protobuf_VERSION}\")\n\n  if (protobuf_ALLOW_CCACHE)\n    # In order to support ccache, we need to remove the /Zi option because it\n    # puts debug symbols into separate pdb files (which in incompatible with\n    # ccache).  This can be replaced with /Z7 to preserve debug symbols, which\n    # embeds debug symbols into the object files instead of creating a separate\n    # pdb file, which isn't currently supported by ccache.  However, this bloats\n    # the ccache size by about a factor of 2x, making it very expensive in CI.\n    # Instead, we strip debug symbols to reduce this overhead.\n    foreach(v\n        CMAKE_C_FLAGS_DEBUG\n        CMAKE_CXX_FLAGS_DEBUG\n        CMAKE_C_FLAGS_RELWITHDEBINFO\n        CMAKE_CXX_FLAGS_RELWITHDEBINFO\n        )\n      string(REGEX REPLACE \"[-/]Z[iI7]\" \"/DEBUG:NONE\" ${v} \"${${v}}\")\n    endforeach()\n  endif()\n\n  # Suppress linker warnings about files with no symbols defined.\n  string(APPEND CMAKE_STATIC_LINKER_FLAGS \" /ignore:4221\")\n\n  # use English language (0x409) in resource compiler\n  string(APPEND CMAKE_RC_FLAGS \" -l0x409\")\n\n  # Generate the version.rc file used elsewhere.\n  configure_file(${protobuf_SOURCE_DIR}/cmake/version.rc.in ${CMAKE_CURRENT_BINARY_DIR}/version.rc @ONLY)\n  set(protobuf_version_rc_file ${CMAKE_CURRENT_BINARY_DIR}/version.rc)\n\n  # Add the \"lib\" prefix for generated .lib outputs.\n  set(LIB_PREFIX lib)\nelse (MSVC)\n  # No version.rc file.\n  set(protobuf_version_rc_file)\n\n  # When building with \"make\", \"lib\" prefix will be added automatically by\n  # the build tool.\n  set(LIB_PREFIX)\nendif (MSVC)\n\ninclude_directories(\n  ${ZLIB_INCLUDE_DIRECTORIES}\n  ${protobuf_BINARY_DIR}\n  # Support #include-ing other top-level directories, i.e. upb_generator.\n  ${protobuf_SOURCE_DIR}\n  ${protobuf_BINARY_DIR}/src\n  ${protobuf_SOURCE_DIR}/src)\n\nif (protobuf_BUILD_TESTS)\n  include(${protobuf_SOURCE_DIR}/cmake/gtest.cmake)\nendif (protobuf_BUILD_TESTS)\n\ninclude(${protobuf_SOURCE_DIR}/cmake/abseil-cpp.cmake)\n\nif (protobuf_BUILD_PROTOBUF_BINARIES)\n  include(${protobuf_SOURCE_DIR}/cmake/utf8_range.cmake)\n  include(${protobuf_SOURCE_DIR}/cmake/libprotobuf-lite.cmake)\n  if (NOT DEFINED protobuf_LIB_PROTOBUF_LITE)\n    set(protobuf_LIB_PROTOBUF_LITE libprotobuf-lite)\n  endif ()\n  include(${protobuf_SOURCE_DIR}/cmake/libprotobuf.cmake)\n  if (NOT DEFINED protobuf_LIB_PROTOBUF)\n    set(protobuf_LIB_PROTOBUF libprotobuf)\n  endif ()\n  if (protobuf_BUILD_LIBPROTOC)\n    include(${protobuf_SOURCE_DIR}/cmake/libprotoc.cmake)\n    if (NOT DEFINED protobuf_LIB_PROTOC)\n      set(protobuf_LIB_PROTOC libprotoc)\n    endif ()\n  endif ()\n  if (protobuf_BUILD_LIBUPB)\n    include(${protobuf_SOURCE_DIR}/cmake/libupb.cmake)\n    if (NOT DEFINED protobuf_LIB_UPB)\n      set(protobuf_LIB_UPB libupb)\n    endif ()\n    include(${protobuf_SOURCE_DIR}/cmake/upb_generators.cmake)\n  endif ()\n  if (protobuf_BUILD_PROTOC_BINARIES)\n    include(${protobuf_SOURCE_DIR}/cmake/protoc.cmake)\n    if (NOT DEFINED protobuf_PROTOC_EXE)\n      set(protobuf_PROTOC_EXE protoc)\n    endif ()\n  endif ()\nelse ()\n  find_package(Protobuf NO_MODULE)\n  if (Protobuf_FOUND)\n    set(protobuf_PROTOC_EXE protobuf::protoc)\n    set(protobuf_LIB_PROTOC protobuf::libprotoc)\n    set(protobuf_LIB_PROTOBUF protobuf::libprotobuf)\n    set(protobuf_LIB_PROTOBUF_LITE protobuf::libprotobuf-lite)\n    set(protobuf_LIB_UPB protobuf::libupb)\n    message(STATUS \"CMake installation of Protobuf found.\")\n  endif ()\nendif ()\n\n# Ensure we have a protoc executable and protobuf libraries if we need one\nif (protobuf_BUILD_TESTS OR protobuf_BUILD_CONFORMANCE OR protobuf_BUILD_EXAMPLES)\n  if (NOT DEFINED protobuf_PROTOC_EXE)\n    find_program(protobuf_PROTOC_EXE protoc REQUIRED)\n    message(STATUS \"Found system ${protobuf_PROTOC_EXE}.\")\n  endif ()\n  if(protobuf_VERBOSE)\n    message(STATUS \"Using protoc : ${protobuf_PROTOC_EXE}\")\n    message(STATUS \"Using libprotobuf : ${protobuf_LIB_PROTOBUF}\")\n    message(STATUS \"Using libprotobuf-lite : ${protobuf_LIB_PROTOBUF_LITE}\")\n    message(STATUS \"Using libprotoc : ${protobuf_LIB_PROTOC}\")\n    message(STATUS \"Using libupb : ${protobuf_LIB_UPB}\")\n  endif(protobuf_VERBOSE)\nendif ()\n\nif (protobuf_BUILD_TESTS)\n  enable_testing()\n  include(${protobuf_SOURCE_DIR}/cmake/tests.cmake)\nendif (protobuf_BUILD_TESTS)\n\nif (protobuf_BUILD_CONFORMANCE)\n  include(${protobuf_SOURCE_DIR}/cmake/conformance.cmake)\nendif (protobuf_BUILD_CONFORMANCE)\n\nif (protobuf_INSTALL)\n  include(${protobuf_SOURCE_DIR}/cmake/install.cmake)\nendif (protobuf_INSTALL)\n\nif (protobuf_BUILD_EXAMPLES)\n  include(${protobuf_SOURCE_DIR}/cmake/examples.cmake)\nendif (protobuf_BUILD_EXAMPLES)\n\nif(protobuf_VERBOSE)\n  message(STATUS \"Protocol Buffers Configuring done\")\nendif(protobuf_VERBOSE)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.14,
          "content": "This project is governed by\n[Protobuf's Code of Conduct](https://github.com/protocolbuffers/.github/blob/main/profile/CODE_OF_CONDUCT.md).\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.72,
          "content": "# Contributing to Protocol Buffers\n\nWe welcome some types of contributions to protocol buffers. This doc describes the\nprocess to contribute patches to protobuf and the general guidelines we\nexpect contributors to follow.\n\n## What We Accept\n\n* Bug fixes with unit tests demonstrating the problem are very welcome.\n  We also appreciate bug reports, even when they don't come with a patch.\n  Bug fixes without tests are usually not accepted.\n* New APIs and features with adequate test coverage and documentation\n  may be accepted if they do not compromise backwards \n  compatibility. However there's a fairly high bar of usefulness a new public\n  method must clear before it will be accepted. Features that are fine in \n  isolation are often rejected because they don't have enough impact to justify the \n  conceptual burden and ongoing maintenance cost. It's best to file an issue \n  and get agreement from maintainers on the value of a new feature before\n  working on a PR.\n* Performance optimizations may be accepted if they have convincing benchmarks that demonstrate \n  an improvement and they do not significantly increase complexity.  \n* Changes to existing APIs are almost never accepted. Stability and\n  backwards compatibility are paramount. In the unlikely event a breaking change \n  is required, it must usually be implemented in google3 first. \n* Changes to the wire and text formats are never accepted. Any breaking change\n  to these formats would have to be implemented as a completely new format.\n  We cannot begin generating protos that cannot be parsed by existing code.\n\n## Before You Start\n\nWe accept patches in the form of github pull requests. If you are new to\ngithub, please read [How to create github pull requests](https://help.github.com/articles/about-pull-requests/)\nfirst.\n\n### Contributor License Agreements\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution,\nthis simply gives us permission to use and redistribute your contributions\nas part of the project.\n\n* If you are an individual writing original source code and you're sure you\n  own the intellectual property, then you'll need to sign an [individual CLA](https://cla.developers.google.com/about/google-individual?csw=1).\n* If you work for a company that wants to allow you to contribute your work,\n  then you'll need to sign a [corporate CLA](https://cla.developers.google.com/about/google-corporate?csw=1).\n\n### Coding Style\n\nThis project follows [Google’s Coding Style Guides](https://github.com/google/styleguide).\nBefore sending out your pull request, please familiarize yourself with the\ncorresponding style guides and make sure the proposed code change is style\nconforming.\n\n## Contributing Process\n\nMost pull requests should go to the main branch and the change will be\nincluded in the next major/minor version release (e.g., 3.6.0 release). If you\nneed to include a bug fix in a patch release (e.g., 3.5.2), make sure it’s\nalready merged to main, and then create a pull request cherry-picking the\ncommits from main branch to the release branch (e.g., branch 3.5.x).\n\nFor each pull request, a protobuf team member will be assigned to review the\npull request. For minor cleanups, the pull request may be merged right away\nafter an initial review. For larger changes, you will likely receive multiple\nrounds of comments and it may take some time to complete. We will try to keep\nour response time within 7-days but if you don’t get any response in a few\ndays, feel free to comment on the threads to get our attention. We also expect\nyou to respond to our comments within a reasonable amount of time. If we don’t\nhear from you for 2 weeks or longer, we may close the pull request. You can\nstill send the pull request again once you have time to work on it.\n\nOnce a pull request is merged, we will take care of the rest and get it into\nthe final release.\n\n## Pull Request Guidelines\n\n* If you are a Googler, it is preferable to first create an internal CL and\n  have it reviewed and submitted. The code propagation process will deliver the\n  change to GitHub.\n* Create small PRs that are narrowly focused on addressing a single concern.\n  We often receive PRs that are trying to fix several things at a time, but if\n  only one fix is considered acceptable, nothing gets merged and both author's\n  & reviewer's time is wasted. Create more PRs to address different concerns and\n  everyone will be happy.\n* For speculative changes, consider opening an issue and discussing it first.\n  If you are suggesting a behavioral or API change, make sure you get explicit\n  support from a protobuf team member before sending us the pull request.\n* Provide a good PR description as a record of what change is being made and\n  why it was made. Link to a GitHub issue if it exists.\n* Don't fix code style and formatting unless you are already changing that\n  line to address an issue. PRs with irrelevant changes won't be merged. If\n  you do want to fix formatting or style, do that in a separate PR.\n* Unless your PR is trivial, you should expect there will be reviewer comments\n  that you'll need to address before merging. We expect you to be reasonably\n  responsive to those comments, otherwise the PR will be closed after 2-3 weeks\n  of inactivity.\n* Maintain clean commit history and use meaningful commit messages. PRs with\n  messy commit history are difficult to review and won't be merged. Use rebase\n  -i upstream/main to curate your commit history and/or to bring in latest\n  changes from main (but avoid rebasing in the middle of a code review).\n* Keep your PR up to date with upstream/main (if there are merge conflicts,\n  we can't really merge your change).\n* All tests need to be passing before your change can be merged. We recommend\n  you run tests locally before creating your PR to catch breakages early on.\n  Ultimately, the green signal will be provided by our testing infrastructure.\n  The reviewer will help you if there are test failures that seem not related\n  to the change you are making.\n\n## Reviewer Guidelines\n\n* Make sure that all tests are passing before approval.\n* Apply the \"release notes: yes\" label if the pull request's description should\n  be included in the next release (e.g., any new feature / bug fix).\n  Apply the \"release notes: no\" label if the pull request's description should\n  not be included in the next release (e.g., refactoring changes that does not\n  change behavior, integration from Google internal, updating tests, etc.).\n* Apply the appropriate language label (e.g., C++, Java, Python, etc.) to the\n  pull request. This will make it easier to identify which languages the pull\n  request affects, allowing us to better identify appropriate reviewer, create\n  a better release note, and make it easier to identify issues in the future.\n"
        },
        {
          "name": "CONTRIBUTORS.txt",
          "type": "blob",
          "size": 3.99,
          "content": "This file contains a list of people who have made large contributions\nto the public version of Protocol Buffers.\n\nOriginal Protocol Buffers design and implementation:\n  Sanjay Ghemawat <sanjay@google.com>\n  Jeff Dean <jeff@google.com>\n  Daniel Dulitz <daniel@google.com>\n  Craig Silverstein\n  Paul Haahr <haahr@google.com>\n  Corey Anderson <corin@google.com>\n  (and many others)\n\nProto2 C++ and Java primary author:\n  Kenton Varda <kenton@google.com>\n\nProto2 Python primary authors:\n  Will Robinson <robinson@google.com>\n  Petar Petrov <petar@google.com>\n\nJava Nano primary authors:\n  Brian Duff <bduff@google.com>\n  Tom Chao <chaot@google.com>\n  Max Cai <maxtroy@google.com>\n  Ulas Kirazci <ulas@google.com>\n\nLarge code contributions:\n  Jason Hsueh <jasonh@google.com>\n  Joseph Schorr <jschorr@google.com>\n  Wenbo Zhu <wenboz@google.com>\n\nLarge quantity of code reviews:\n  Scott Bruce <sbruce@google.com>\n  Frank Yellin\n  Neal Norwitz <nnorwitz@google.com>\n  Jeffrey Yasskin <jyasskin@google.com>\n  Ambrose Feinstein <ambrose@google.com>\n\nDocumentation:\n  Lisa Carey <lcarey@google.com>\n\nMaven packaging:\n  Gregory Kick <gak@google.com>\n\nPatch contributors:\n  Kevin Ko <kevin.s.ko@gmail.com>\n    * Small patch to handle trailing slashes in --proto_path flag.\n  Johan Euphrosine <proppy@aminche.com>\n    * Small patch to fix Python CallMethod().\n  Ulrich Kunitz <kune@deine-taler.de>\n    * Small optimizations to Python serialization.\n  Leandro Lucarella <llucax@gmail.com>\n    * VI syntax highlighting tweaks.\n    * Fix compiler to not make output executable.\n  Dilip Joseph <dilip.antony.joseph@gmail.com>\n    * Heuristic detection of sub-messages when printing unknown fields in\n      text format.\n  Brian Atkinson <nairb774@gmail.com>\n    * Added @Override annotation to generated Java code where appropriate.\n  Vincent Choinière <Choiniere.Vincent@hydro.qc.ca>\n    * Tru64 support.\n  Monty Taylor <monty.taylor@gmail.com>\n    * Solaris 10 + Sun Studio fixes.\n  Alek Storm <alek.storm@gmail.com>\n    * Slicing support for repeated scalar fields for the Python API.\n  Oleg Smolsky <oleg.smolsky@gmail.com>\n    * MS Visual Studio error format option.\n    * Detect unordered_map in stl_hash.m4.\n  Brian Olson <brianolson@google.com>\n    * gzip/zlib I/O support.\n  Michael Poole <mdpoole@troilus.org>\n    * Fixed warnings about generated constructors not explicitly initializing\n      all fields (only present with certain compiler settings).\n    * Added generation of field number constants.\n  Wink Saville <wink@google.com>\n    * Fixed initialization ordering problem in logging code.\n  Will Pierce <willp@nuclei.com>\n    * Small patch improving performance of in Python serialization.\n  Alexandre Vassalotti <alexandre@peadrop.com>\n    * Emacs mode for Protocol Buffers (editors/protobuf-mode.el).\n  Scott Stafford <scott.stafford@gmail.com>\n    * Added Swap(), SwapElements(), and RemoveLast() to Reflection interface.\n  Alexander Melnikov <alm@sibmail.ru>\n    * HPUX support.\n  Oliver Jowett <oliver.jowett@gmail.com>\n    * Detect whether zlib is new enough in configure script.\n    * Fixes for Solaris 10 32/64-bit confusion.\n  Evan Jones <evanj@mit.edu>\n    * Optimize Java serialization code when writing a small message to a stream.\n    * Optimize Java serialization of strings so that UTF-8 encoding happens only\n      once per string per serialization call.\n    * Clean up some Java warnings.\n    * Fix bug with permanent callbacks that delete themselves when run.\n  Michael Kucharski <m.kucharski@gmail.com>\n    * Added CodedInputStream.getTotalBytesRead().\n  Kacper Kowalik <xarthisius.kk@gmail.com>\n    * Fixed m4/acx_pthread.m4 problem for some Linux distributions.\n  William Orr <will@worrbase.com>\n    * Fixed detection of sched_yield on Solaris.\n    * Added atomicops for Solaris\n  Andrew Paprocki <andrew@ishiboo.com>\n    * Fixed minor IBM xlC compiler build issues\n    * Added atomicops for AIX (POWER)\n  Nipunn Koorapati <nipunn1313@gmail.com>\n    * Provide a type alias field ValueType on EnumTypeWrapper\n    * Match service argument names to abstract interface\n\n\n"
        },
        {
          "name": "Cargo.bazel.lock",
          "type": "blob",
          "size": 26.54,
          "content": "{\n  \"checksum\": \"422d164988d36886ae9aef8b60e233d67aac121356b66f1452c469f912cc0148\",\n  \"crates\": {\n    \"aho-corasick 1.1.2\": {\n      \"name\": \"aho-corasick\",\n      \"version\": \"1.1.2\",\n      \"package_url\": \"https://github.com/BurntSushi/aho-corasick\",\n      \"repository\": {\n        \"Http\": {\n          \"url\": \"https://static.crates.io/crates/aho-corasick/1.1.2/download\",\n          \"sha256\": \"b2969dcb958b36655471fc61f7e416fa76033bdd4bfed0678d8fee1e2d07a1f0\"\n        }\n      },\n      \"targets\": [\n        {\n          \"Library\": {\n            \"crate_name\": \"aho_corasick\",\n            \"crate_root\": \"src/lib.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        }\n      ],\n      \"library_target_name\": \"aho_corasick\",\n      \"common_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"crate_features\": {\n          \"common\": [\n            \"default\",\n            \"perf-literal\",\n            \"std\"\n          ],\n          \"selects\": {}\n        },\n        \"deps\": {\n          \"common\": [\n            {\n              \"id\": \"memchr 2.6.4\",\n              \"target\": \"memchr\"\n            }\n          ],\n          \"selects\": {}\n        },\n        \"edition\": \"2021\",\n        \"version\": \"1.1.2\"\n      },\n      \"license\": \"Unlicense OR MIT\",\n      \"license_ids\": [\n        \"MIT\",\n        \"Unlicense\"\n      ],\n      \"license_file\": \"LICENSE-MIT\"\n    },\n    \"autocfg 1.1.0\": {\n      \"name\": \"autocfg\",\n      \"version\": \"1.1.0\",\n      \"package_url\": \"https://github.com/cuviper/autocfg\",\n      \"repository\": {\n        \"Http\": {\n          \"url\": \"https://static.crates.io/crates/autocfg/1.1.0/download\",\n          \"sha256\": \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n        }\n      },\n      \"targets\": [\n        {\n          \"Library\": {\n            \"crate_name\": \"autocfg\",\n            \"crate_root\": \"src/lib.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        }\n      ],\n      \"library_target_name\": \"autocfg\",\n      \"common_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"edition\": \"2015\",\n        \"version\": \"1.1.0\"\n      },\n      \"license\": \"Apache-2.0 OR MIT\",\n      \"license_ids\": [\n        \"Apache-2.0\",\n        \"MIT\"\n      ],\n      \"license_file\": \"LICENSE-APACHE\"\n    },\n    \"direct-cargo-bazel-deps 0.0.1\": {\n      \"name\": \"direct-cargo-bazel-deps\",\n      \"version\": \"0.0.1\",\n      \"package_url\": null,\n      \"repository\": null,\n      \"targets\": [\n        {\n          \"Library\": {\n            \"crate_name\": \"direct_cargo_bazel_deps\",\n            \"crate_root\": \".direct_cargo_bazel_deps.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        }\n      ],\n      \"library_target_name\": \"direct_cargo_bazel_deps\",\n      \"common_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"deps\": {\n          \"common\": [\n            {\n              \"id\": \"googletest 0.12.0\",\n              \"target\": \"googletest\"\n            }\n          ],\n          \"selects\": {}\n        },\n        \"edition\": \"2018\",\n        \"proc_macro_deps\": {\n          \"common\": [\n            {\n              \"id\": \"paste 1.0.14\",\n              \"target\": \"paste\"\n            }\n          ],\n          \"selects\": {}\n        },\n        \"version\": \"0.0.1\"\n      },\n      \"license\": null,\n      \"license_ids\": [],\n      \"license_file\": null\n    },\n    \"googletest 0.12.0\": {\n      \"name\": \"googletest\",\n      \"version\": \"0.12.0\",\n      \"package_url\": \"https://github.com/google/googletest-rust\",\n      \"repository\": {\n        \"Git\": {\n          \"remote\": \"https://github.com/google/googletest-rust\",\n          \"commitish\": {\n            \"Rev\": \"b407f3b5774defb8917d714bfb7af485e117d621\"\n          },\n          \"strip_prefix\": \"googletest\"\n        }\n      },\n      \"targets\": [\n        {\n          \"Library\": {\n            \"crate_name\": \"googletest\",\n            \"crate_root\": \"src/lib.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        }\n      ],\n      \"library_target_name\": \"googletest\",\n      \"common_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"deps\": {\n          \"common\": [\n            {\n              \"id\": \"num-traits 0.2.17\",\n              \"target\": \"num_traits\"\n            },\n            {\n              \"id\": \"regex 1.10.0\",\n              \"target\": \"regex\"\n            }\n          ],\n          \"selects\": {}\n        },\n        \"edition\": \"2021\",\n        \"proc_macro_deps\": {\n          \"common\": [\n            {\n              \"id\": \"googletest_macro 0.12.0\",\n              \"target\": \"googletest_macro\"\n            },\n            {\n              \"id\": \"rustversion 1.0.14\",\n              \"target\": \"rustversion\"\n            }\n          ],\n          \"selects\": {}\n        },\n        \"version\": \"0.12.0\"\n      },\n      \"license\": \"Apache-2.0\",\n      \"license_ids\": [\n        \"Apache-2.0\"\n      ],\n      \"license_file\": \"LICENSE\"\n    },\n    \"googletest_macro 0.12.0\": {\n      \"name\": \"googletest_macro\",\n      \"version\": \"0.12.0\",\n      \"package_url\": \"https://github.com/google/googletest-rust\",\n      \"repository\": {\n        \"Git\": {\n          \"remote\": \"https://github.com/google/googletest-rust\",\n          \"commitish\": {\n            \"Rev\": \"b407f3b5774defb8917d714bfb7af485e117d621\"\n          },\n          \"strip_prefix\": \"googletest_macro\"\n        }\n      },\n      \"targets\": [\n        {\n          \"ProcMacro\": {\n            \"crate_name\": \"googletest_macro\",\n            \"crate_root\": \"src/lib.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        }\n      ],\n      \"library_target_name\": \"googletest_macro\",\n      \"common_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"deps\": {\n          \"common\": [\n            {\n              \"id\": \"quote 1.0.33\",\n              \"target\": \"quote\"\n            },\n            {\n              \"id\": \"syn 2.0.43\",\n              \"target\": \"syn\"\n            }\n          ],\n          \"selects\": {}\n        },\n        \"edition\": \"2021\",\n        \"version\": \"0.12.0\"\n      },\n      \"license\": \"Apache-2.0\",\n      \"license_ids\": [\n        \"Apache-2.0\"\n      ],\n      \"license_file\": \"LICENSE\"\n    },\n    \"memchr 2.6.4\": {\n      \"name\": \"memchr\",\n      \"version\": \"2.6.4\",\n      \"package_url\": \"https://github.com/BurntSushi/memchr\",\n      \"repository\": {\n        \"Http\": {\n          \"url\": \"https://static.crates.io/crates/memchr/2.6.4/download\",\n          \"sha256\": \"f665ee40bc4a3c5590afb1e9677db74a508659dfd71e126420da8274909a0167\"\n        }\n      },\n      \"targets\": [\n        {\n          \"Library\": {\n            \"crate_name\": \"memchr\",\n            \"crate_root\": \"src/lib.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        }\n      ],\n      \"library_target_name\": \"memchr\",\n      \"common_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"crate_features\": {\n          \"common\": [\n            \"alloc\",\n            \"default\",\n            \"std\"\n          ],\n          \"selects\": {}\n        },\n        \"edition\": \"2021\",\n        \"version\": \"2.6.4\"\n      },\n      \"license\": \"Unlicense OR MIT\",\n      \"license_ids\": [\n        \"MIT\",\n        \"Unlicense\"\n      ],\n      \"license_file\": \"LICENSE-MIT\"\n    },\n    \"num-traits 0.2.17\": {\n      \"name\": \"num-traits\",\n      \"version\": \"0.2.17\",\n      \"package_url\": \"https://github.com/rust-num/num-traits\",\n      \"repository\": {\n        \"Http\": {\n          \"url\": \"https://static.crates.io/crates/num-traits/0.2.17/download\",\n          \"sha256\": \"39e3200413f237f41ab11ad6d161bc7239c84dcb631773ccd7de3dfe4b5c267c\"\n        }\n      },\n      \"targets\": [\n        {\n          \"Library\": {\n            \"crate_name\": \"num_traits\",\n            \"crate_root\": \"src/lib.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        },\n        {\n          \"BuildScript\": {\n            \"crate_name\": \"build_script_build\",\n            \"crate_root\": \"build.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        }\n      ],\n      \"library_target_name\": \"num_traits\",\n      \"common_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"crate_features\": {\n          \"common\": [\n            \"default\",\n            \"std\"\n          ],\n          \"selects\": {}\n        },\n        \"deps\": {\n          \"common\": [\n            {\n              \"id\": \"num-traits 0.2.17\",\n              \"target\": \"build_script_build\"\n            }\n          ],\n          \"selects\": {}\n        },\n        \"edition\": \"2018\",\n        \"version\": \"0.2.17\"\n      },\n      \"build_script_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"data_glob\": [\n          \"**\"\n        ],\n        \"deps\": {\n          \"common\": [\n            {\n              \"id\": \"autocfg 1.1.0\",\n              \"target\": \"autocfg\"\n            }\n          ],\n          \"selects\": {}\n        }\n      },\n      \"license\": \"MIT OR Apache-2.0\",\n      \"license_ids\": [\n        \"Apache-2.0\",\n        \"MIT\"\n      ],\n      \"license_file\": \"LICENSE-APACHE\"\n    },\n    \"paste 1.0.14\": {\n      \"name\": \"paste\",\n      \"version\": \"1.0.14\",\n      \"package_url\": \"https://github.com/dtolnay/paste\",\n      \"repository\": {\n        \"Http\": {\n          \"url\": \"https://static.crates.io/crates/paste/1.0.14/download\",\n          \"sha256\": \"de3145af08024dea9fa9914f381a17b8fc6034dfb00f3a84013f7ff43f29ed4c\"\n        }\n      },\n      \"targets\": [\n        {\n          \"ProcMacro\": {\n            \"crate_name\": \"paste\",\n            \"crate_root\": \"src/lib.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        },\n        {\n          \"BuildScript\": {\n            \"crate_name\": \"build_script_build\",\n            \"crate_root\": \"build.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        }\n      ],\n      \"library_target_name\": \"paste\",\n      \"common_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"deps\": {\n          \"common\": [\n            {\n              \"id\": \"paste 1.0.14\",\n              \"target\": \"build_script_build\"\n            }\n          ],\n          \"selects\": {}\n        },\n        \"edition\": \"2018\",\n        \"version\": \"1.0.14\"\n      },\n      \"build_script_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"data_glob\": [\n          \"**\"\n        ]\n      },\n      \"license\": \"MIT OR Apache-2.0\",\n      \"license_ids\": [\n        \"Apache-2.0\",\n        \"MIT\"\n      ],\n      \"license_file\": \"LICENSE-APACHE\"\n    },\n    \"proc-macro2 1.0.69\": {\n      \"name\": \"proc-macro2\",\n      \"version\": \"1.0.69\",\n      \"package_url\": \"https://github.com/dtolnay/proc-macro2\",\n      \"repository\": {\n        \"Http\": {\n          \"url\": \"https://static.crates.io/crates/proc-macro2/1.0.69/download\",\n          \"sha256\": \"134c189feb4956b20f6f547d2cf727d4c0fe06722b20a0eec87ed445a97f92da\"\n        }\n      },\n      \"targets\": [\n        {\n          \"Library\": {\n            \"crate_name\": \"proc_macro2\",\n            \"crate_root\": \"src/lib.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        },\n        {\n          \"BuildScript\": {\n            \"crate_name\": \"build_script_build\",\n            \"crate_root\": \"build.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        }\n      ],\n      \"library_target_name\": \"proc_macro2\",\n      \"common_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"crate_features\": {\n          \"common\": [\n            \"proc-macro\"\n          ],\n          \"selects\": {}\n        },\n        \"deps\": {\n          \"common\": [\n            {\n              \"id\": \"proc-macro2 1.0.69\",\n              \"target\": \"build_script_build\"\n            },\n            {\n              \"id\": \"unicode-ident 1.0.12\",\n              \"target\": \"unicode_ident\"\n            }\n          ],\n          \"selects\": {}\n        },\n        \"edition\": \"2021\",\n        \"version\": \"1.0.69\"\n      },\n      \"build_script_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"data_glob\": [\n          \"**\"\n        ]\n      },\n      \"license\": \"MIT OR Apache-2.0\",\n      \"license_ids\": [\n        \"Apache-2.0\",\n        \"MIT\"\n      ],\n      \"license_file\": \"LICENSE-APACHE\"\n    },\n    \"quote 1.0.33\": {\n      \"name\": \"quote\",\n      \"version\": \"1.0.33\",\n      \"package_url\": \"https://github.com/dtolnay/quote\",\n      \"repository\": {\n        \"Http\": {\n          \"url\": \"https://static.crates.io/crates/quote/1.0.33/download\",\n          \"sha256\": \"5267fca4496028628a95160fc423a33e8b2e6af8a5302579e322e4b520293cae\"\n        }\n      },\n      \"targets\": [\n        {\n          \"Library\": {\n            \"crate_name\": \"quote\",\n            \"crate_root\": \"src/lib.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        }\n      ],\n      \"library_target_name\": \"quote\",\n      \"common_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"crate_features\": {\n          \"common\": [\n            \"default\",\n            \"proc-macro\"\n          ],\n          \"selects\": {}\n        },\n        \"deps\": {\n          \"common\": [\n            {\n              \"id\": \"proc-macro2 1.0.69\",\n              \"target\": \"proc_macro2\"\n            }\n          ],\n          \"selects\": {}\n        },\n        \"edition\": \"2018\",\n        \"version\": \"1.0.33\"\n      },\n      \"license\": \"MIT OR Apache-2.0\",\n      \"license_ids\": [\n        \"Apache-2.0\",\n        \"MIT\"\n      ],\n      \"license_file\": \"LICENSE-APACHE\"\n    },\n    \"regex 1.10.0\": {\n      \"name\": \"regex\",\n      \"version\": \"1.10.0\",\n      \"package_url\": \"https://github.com/rust-lang/regex\",\n      \"repository\": {\n        \"Http\": {\n          \"url\": \"https://static.crates.io/crates/regex/1.10.0/download\",\n          \"sha256\": \"d119d7c7ca818f8a53c300863d4f87566aac09943aef5b355bb83969dae75d87\"\n        }\n      },\n      \"targets\": [\n        {\n          \"Library\": {\n            \"crate_name\": \"regex\",\n            \"crate_root\": \"src/lib.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        }\n      ],\n      \"library_target_name\": \"regex\",\n      \"common_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"crate_features\": {\n          \"common\": [\n            \"default\",\n            \"perf\",\n            \"perf-backtrack\",\n            \"perf-cache\",\n            \"perf-dfa\",\n            \"perf-inline\",\n            \"perf-literal\",\n            \"perf-onepass\",\n            \"std\",\n            \"unicode\",\n            \"unicode-age\",\n            \"unicode-bool\",\n            \"unicode-case\",\n            \"unicode-gencat\",\n            \"unicode-perl\",\n            \"unicode-script\",\n            \"unicode-segment\"\n          ],\n          \"selects\": {}\n        },\n        \"deps\": {\n          \"common\": [\n            {\n              \"id\": \"aho-corasick 1.1.2\",\n              \"target\": \"aho_corasick\"\n            },\n            {\n              \"id\": \"memchr 2.6.4\",\n              \"target\": \"memchr\"\n            },\n            {\n              \"id\": \"regex-automata 0.4.1\",\n              \"target\": \"regex_automata\"\n            },\n            {\n              \"id\": \"regex-syntax 0.8.1\",\n              \"target\": \"regex_syntax\"\n            }\n          ],\n          \"selects\": {}\n        },\n        \"edition\": \"2021\",\n        \"version\": \"1.10.0\"\n      },\n      \"license\": \"MIT OR Apache-2.0\",\n      \"license_ids\": [\n        \"Apache-2.0\",\n        \"MIT\"\n      ],\n      \"license_file\": \"LICENSE-APACHE\"\n    },\n    \"regex-automata 0.4.1\": {\n      \"name\": \"regex-automata\",\n      \"version\": \"0.4.1\",\n      \"package_url\": \"https://github.com/rust-lang/regex/tree/master/regex-automata\",\n      \"repository\": {\n        \"Http\": {\n          \"url\": \"https://static.crates.io/crates/regex-automata/0.4.1/download\",\n          \"sha256\": \"465c6fc0621e4abc4187a2bda0937bfd4f722c2730b29562e19689ea796c9a4b\"\n        }\n      },\n      \"targets\": [\n        {\n          \"Library\": {\n            \"crate_name\": \"regex_automata\",\n            \"crate_root\": \"src/lib.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        }\n      ],\n      \"library_target_name\": \"regex_automata\",\n      \"common_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"crate_features\": {\n          \"common\": [\n            \"alloc\",\n            \"dfa-onepass\",\n            \"hybrid\",\n            \"meta\",\n            \"nfa-backtrack\",\n            \"nfa-pikevm\",\n            \"nfa-thompson\",\n            \"perf-inline\",\n            \"perf-literal\",\n            \"perf-literal-multisubstring\",\n            \"perf-literal-substring\",\n            \"std\",\n            \"syntax\",\n            \"unicode\",\n            \"unicode-age\",\n            \"unicode-bool\",\n            \"unicode-case\",\n            \"unicode-gencat\",\n            \"unicode-perl\",\n            \"unicode-script\",\n            \"unicode-segment\",\n            \"unicode-word-boundary\"\n          ],\n          \"selects\": {}\n        },\n        \"deps\": {\n          \"common\": [\n            {\n              \"id\": \"aho-corasick 1.1.2\",\n              \"target\": \"aho_corasick\"\n            },\n            {\n              \"id\": \"memchr 2.6.4\",\n              \"target\": \"memchr\"\n            },\n            {\n              \"id\": \"regex-syntax 0.8.1\",\n              \"target\": \"regex_syntax\"\n            }\n          ],\n          \"selects\": {}\n        },\n        \"edition\": \"2021\",\n        \"version\": \"0.4.1\"\n      },\n      \"license\": \"MIT OR Apache-2.0\",\n      \"license_ids\": [\n        \"Apache-2.0\",\n        \"MIT\"\n      ],\n      \"license_file\": \"LICENSE-APACHE\"\n    },\n    \"regex-syntax 0.8.1\": {\n      \"name\": \"regex-syntax\",\n      \"version\": \"0.8.1\",\n      \"package_url\": \"https://github.com/rust-lang/regex/tree/master/regex-syntax\",\n      \"repository\": {\n        \"Http\": {\n          \"url\": \"https://static.crates.io/crates/regex-syntax/0.8.1/download\",\n          \"sha256\": \"56d84fdd47036b038fc80dd333d10b6aab10d5d31f4a366e20014def75328d33\"\n        }\n      },\n      \"targets\": [\n        {\n          \"Library\": {\n            \"crate_name\": \"regex_syntax\",\n            \"crate_root\": \"src/lib.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        }\n      ],\n      \"library_target_name\": \"regex_syntax\",\n      \"common_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"crate_features\": {\n          \"common\": [\n            \"default\",\n            \"std\",\n            \"unicode\",\n            \"unicode-age\",\n            \"unicode-bool\",\n            \"unicode-case\",\n            \"unicode-gencat\",\n            \"unicode-perl\",\n            \"unicode-script\",\n            \"unicode-segment\"\n          ],\n          \"selects\": {}\n        },\n        \"edition\": \"2021\",\n        \"version\": \"0.8.1\"\n      },\n      \"license\": \"MIT OR Apache-2.0\",\n      \"license_ids\": [\n        \"Apache-2.0\",\n        \"MIT\"\n      ],\n      \"license_file\": \"LICENSE-APACHE\"\n    },\n    \"rustversion 1.0.14\": {\n      \"name\": \"rustversion\",\n      \"version\": \"1.0.14\",\n      \"package_url\": \"https://github.com/dtolnay/rustversion\",\n      \"repository\": {\n        \"Http\": {\n          \"url\": \"https://static.crates.io/crates/rustversion/1.0.14/download\",\n          \"sha256\": \"7ffc183a10b4478d04cbbbfc96d0873219d962dd5accaff2ffbd4ceb7df837f4\"\n        }\n      },\n      \"targets\": [\n        {\n          \"ProcMacro\": {\n            \"crate_name\": \"rustversion\",\n            \"crate_root\": \"src/lib.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        },\n        {\n          \"BuildScript\": {\n            \"crate_name\": \"build_script_build\",\n            \"crate_root\": \"build/build.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        }\n      ],\n      \"library_target_name\": \"rustversion\",\n      \"common_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"deps\": {\n          \"common\": [\n            {\n              \"id\": \"rustversion 1.0.14\",\n              \"target\": \"build_script_build\"\n            }\n          ],\n          \"selects\": {}\n        },\n        \"edition\": \"2018\",\n        \"version\": \"1.0.14\"\n      },\n      \"build_script_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"data_glob\": [\n          \"**\"\n        ]\n      },\n      \"license\": \"MIT OR Apache-2.0\",\n      \"license_ids\": [\n        \"Apache-2.0\",\n        \"MIT\"\n      ],\n      \"license_file\": \"LICENSE-APACHE\"\n    },\n    \"syn 2.0.43\": {\n      \"name\": \"syn\",\n      \"version\": \"2.0.43\",\n      \"package_url\": \"https://github.com/dtolnay/syn\",\n      \"repository\": {\n        \"Http\": {\n          \"url\": \"https://static.crates.io/crates/syn/2.0.43/download\",\n          \"sha256\": \"ee659fb5f3d355364e1f3e5bc10fb82068efbf824a1e9d1c9504244a6469ad53\"\n        }\n      },\n      \"targets\": [\n        {\n          \"Library\": {\n            \"crate_name\": \"syn\",\n            \"crate_root\": \"src/lib.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        }\n      ],\n      \"library_target_name\": \"syn\",\n      \"common_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"crate_features\": {\n          \"common\": [\n            \"clone-impls\",\n            \"default\",\n            \"derive\",\n            \"full\",\n            \"parsing\",\n            \"printing\",\n            \"proc-macro\",\n            \"quote\"\n          ],\n          \"selects\": {}\n        },\n        \"deps\": {\n          \"common\": [\n            {\n              \"id\": \"proc-macro2 1.0.69\",\n              \"target\": \"proc_macro2\"\n            },\n            {\n              \"id\": \"quote 1.0.33\",\n              \"target\": \"quote\"\n            },\n            {\n              \"id\": \"unicode-ident 1.0.12\",\n              \"target\": \"unicode_ident\"\n            }\n          ],\n          \"selects\": {}\n        },\n        \"edition\": \"2021\",\n        \"version\": \"2.0.43\"\n      },\n      \"license\": \"MIT OR Apache-2.0\",\n      \"license_ids\": [\n        \"Apache-2.0\",\n        \"MIT\"\n      ],\n      \"license_file\": \"LICENSE-APACHE\"\n    },\n    \"unicode-ident 1.0.12\": {\n      \"name\": \"unicode-ident\",\n      \"version\": \"1.0.12\",\n      \"package_url\": \"https://github.com/dtolnay/unicode-ident\",\n      \"repository\": {\n        \"Http\": {\n          \"url\": \"https://static.crates.io/crates/unicode-ident/1.0.12/download\",\n          \"sha256\": \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n        }\n      },\n      \"targets\": [\n        {\n          \"Library\": {\n            \"crate_name\": \"unicode_ident\",\n            \"crate_root\": \"src/lib.rs\",\n            \"srcs\": {\n              \"allow_empty\": true,\n              \"include\": [\n                \"**/*.rs\"\n              ]\n            }\n          }\n        }\n      ],\n      \"library_target_name\": \"unicode_ident\",\n      \"common_attrs\": {\n        \"compile_data_glob\": [\n          \"**\"\n        ],\n        \"edition\": \"2018\",\n        \"version\": \"1.0.12\"\n      },\n      \"license\": \"(MIT OR Apache-2.0) AND Unicode-DFS-2016\",\n      \"license_ids\": [\n        \"Apache-2.0\",\n        \"MIT\",\n        \"Unicode-DFS-2016\"\n      ],\n      \"license_file\": \"LICENSE-APACHE\"\n    }\n  },\n  \"binary_crates\": [],\n  \"workspace_members\": {\n    \"direct-cargo-bazel-deps 0.0.1\": \"\"\n  },\n  \"conditions\": {\n    \"aarch64-apple-darwin\": [\n      \"aarch64-apple-darwin\"\n    ],\n    \"aarch64-apple-ios\": [\n      \"aarch64-apple-ios\"\n    ],\n    \"aarch64-apple-ios-sim\": [\n      \"aarch64-apple-ios-sim\"\n    ],\n    \"aarch64-linux-android\": [\n      \"aarch64-linux-android\"\n    ],\n    \"aarch64-pc-windows-msvc\": [\n      \"aarch64-pc-windows-msvc\"\n    ],\n    \"aarch64-unknown-fuchsia\": [\n      \"aarch64-unknown-fuchsia\"\n    ],\n    \"aarch64-unknown-linux-gnu\": [\n      \"aarch64-unknown-linux-gnu\"\n    ],\n    \"aarch64-unknown-nixos-gnu\": [\n      \"aarch64-unknown-nixos-gnu\"\n    ],\n    \"aarch64-unknown-nto-qnx710\": [\n      \"aarch64-unknown-nto-qnx710\"\n    ],\n    \"arm-unknown-linux-gnueabi\": [\n      \"arm-unknown-linux-gnueabi\"\n    ],\n    \"armv7-linux-androideabi\": [\n      \"armv7-linux-androideabi\"\n    ],\n    \"armv7-unknown-linux-gnueabi\": [\n      \"armv7-unknown-linux-gnueabi\"\n    ],\n    \"i686-apple-darwin\": [\n      \"i686-apple-darwin\"\n    ],\n    \"i686-linux-android\": [\n      \"i686-linux-android\"\n    ],\n    \"i686-pc-windows-msvc\": [\n      \"i686-pc-windows-msvc\"\n    ],\n    \"i686-unknown-freebsd\": [\n      \"i686-unknown-freebsd\"\n    ],\n    \"i686-unknown-linux-gnu\": [\n      \"i686-unknown-linux-gnu\"\n    ],\n    \"powerpc-unknown-linux-gnu\": [\n      \"powerpc-unknown-linux-gnu\"\n    ],\n    \"riscv32imc-unknown-none-elf\": [\n      \"riscv32imc-unknown-none-elf\"\n    ],\n    \"riscv64gc-unknown-none-elf\": [\n      \"riscv64gc-unknown-none-elf\"\n    ],\n    \"s390x-unknown-linux-gnu\": [\n      \"s390x-unknown-linux-gnu\"\n    ],\n    \"thumbv7em-none-eabi\": [\n      \"thumbv7em-none-eabi\"\n    ],\n    \"thumbv8m.main-none-eabi\": [\n      \"thumbv8m.main-none-eabi\"\n    ],\n    \"wasm32-unknown-unknown\": [\n      \"wasm32-unknown-unknown\"\n    ],\n    \"wasm32-wasi\": [\n      \"wasm32-wasi\"\n    ],\n    \"wasm32-wasip1\": [\n      \"wasm32-wasip1\"\n    ],\n    \"x86_64-apple-darwin\": [\n      \"x86_64-apple-darwin\"\n    ],\n    \"x86_64-apple-ios\": [\n      \"x86_64-apple-ios\"\n    ],\n    \"x86_64-linux-android\": [\n      \"x86_64-linux-android\"\n    ],\n    \"x86_64-pc-windows-msvc\": [\n      \"x86_64-pc-windows-msvc\"\n    ],\n    \"x86_64-unknown-freebsd\": [\n      \"x86_64-unknown-freebsd\"\n    ],\n    \"x86_64-unknown-fuchsia\": [\n      \"x86_64-unknown-fuchsia\"\n    ],\n    \"x86_64-unknown-linux-gnu\": [\n      \"x86_64-unknown-linux-gnu\"\n    ],\n    \"x86_64-unknown-nixos-gnu\": [\n      \"x86_64-unknown-nixos-gnu\"\n    ],\n    \"x86_64-unknown-none\": [\n      \"x86_64-unknown-none\"\n    ]\n  },\n  \"direct_deps\": [\n    \"googletest 0.12.0\",\n    \"paste 1.0.14\"\n  ],\n  \"direct_dev_deps\": []\n}\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 3.5,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b2969dcb958b36655471fc61f7e416fa76033bdd4bfed0678d8fee1e2d07a1f0\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n\n[[package]]\nname = \"direct-cargo-bazel-deps\"\nversion = \"0.0.1\"\ndependencies = [\n \"googletest\",\n \"paste\",\n]\n\n[[package]]\nname = \"googletest\"\nversion = \"0.12.0\"\nsource = \"git+https://github.com/google/googletest-rust?rev=b407f3b5774defb8917d714bfb7af485e117d621#b407f3b5774defb8917d714bfb7af485e117d621\"\ndependencies = [\n \"googletest_macro\",\n \"num-traits\",\n \"regex\",\n \"rustversion\",\n]\n\n[[package]]\nname = \"googletest_macro\"\nversion = \"0.12.0\"\nsource = \"git+https://github.com/google/googletest-rust?rev=b407f3b5774defb8917d714bfb7af485e117d621#b407f3b5774defb8917d714bfb7af485e117d621\"\ndependencies = [\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f665ee40bc4a3c5590afb1e9677db74a508659dfd71e126420da8274909a0167\"\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"39e3200413f237f41ab11ad6d161bc7239c84dcb631773ccd7de3dfe4b5c267c\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"de3145af08024dea9fa9914f381a17b8fc6034dfb00f3a84013f7ff43f29ed4c\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"134c189feb4956b20f6f547d2cf727d4c0fe06722b20a0eec87ed445a97f92da\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.33\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5267fca4496028628a95160fc423a33e8b2e6af8a5302579e322e4b520293cae\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d119d7c7ca818f8a53c300863d4f87566aac09943aef5b355bb83969dae75d87\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"465c6fc0621e4abc4187a2bda0937bfd4f722c2730b29562e19689ea796c9a4b\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56d84fdd47036b038fc80dd333d10b6aab10d5d31f4a366e20014def75328d33\"\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ffc183a10b4478d04cbbbfc96d0873219d962dd5accaff2ffbd4ceb7df837f4\"\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.43\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee659fb5f3d355364e1f3e5bc10fb82068efbf824a1e9d1c9504244a6469ad53\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.69,
          "content": "Copyright 2008 Google Inc.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n    * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nCode generated by the Protocol Buffer compiler is owned by the owner\nof the input file used when generating it.  This code is not\nstandalone and requires a support library to be linked with it.  This\nsupport library is itself covered by the above license.\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 4.05,
          "content": "# TODO: migrate all dependencies from WORKSPACE to MODULE.bazel\n# https://github.com/protocolbuffers/protobuf/issues/14313\n\nmodule(\n    name = \"protobuf\",\n    version = \"30.0-dev\",  # Automatically updated on release\n    compatibility_level = 1,\n    repo_name = \"com_google_protobuf\",\n)\n\n# LOWER BOUND dependency versions.\n# Bzlmod follows MVS:\n# https://bazel.build/versions/6.0.0/build/bzlmod#version-resolution\n# Thus the highest version in their module graph is resolved.\nbazel_dep(name = \"abseil-cpp\", version = \"20240722.0\", repo_name = \"com_google_absl\")\nbazel_dep(name = \"bazel_skylib\", version = \"1.7.0\")\nbazel_dep(name = \"jsoncpp\", version = \"1.9.6\")\nbazel_dep(name = \"apple_support\", version = \"1.15.1\", repo_name = \"build_bazel_apple_support\")\nbazel_dep(name = \"rules_cc\", version = \"0.0.16\")\nbazel_dep(name = \"rules_fuzzing\", version = \"0.5.2\")\nbazel_dep(name = \"rules_java\", version = \"8.3.2\")\nbazel_dep(name = \"rules_jvm_external\", version = \"6.3\")\nbazel_dep(name = \"rules_kotlin\", version = \"1.9.6\")\nbazel_dep(name = \"rules_license\", version = \"1.0.0\")\nbazel_dep(name = \"rules_pkg\", version = \"1.0.1\")\nbazel_dep(name = \"rules_python\", version = \"0.28.0\")\nbazel_dep(name = \"rules_rust\", version = \"0.51.0\")\nbazel_dep(name = \"platforms\", version = \"0.0.8\")\nbazel_dep(name = \"zlib\", version = \"1.3.1\")\nbazel_dep(name = \"bazel_features\", version = \"1.17.0\", repo_name = \"proto_bazel_features\")\nbazel_dep(\n    name = \"rules_shell\",\n    version = \"0.2.0\",\n)\n\n# Proto toolchains\nregister_toolchains(\"//bazel/private/toolchains:all\")\n\nSUPPORTED_PYTHON_VERSIONS = [\n    \"3.9\",\n    \"3.10\",\n    \"3.11\",\n    \"3.12\",\n]\n\npython = use_extension(\"@rules_python//python/extensions:python.bzl\", \"python\")\n\n[\n    python.toolchain(\n        is_default = python_version == SUPPORTED_PYTHON_VERSIONS[-1],\n        python_version = python_version,\n    )\n    for python_version in SUPPORTED_PYTHON_VERSIONS\n]\n\nuse_repo(\n    python,\n    system_python = \"python_{}\".format(SUPPORTED_PYTHON_VERSIONS[-1].replace(\".\", \"_\")),\n)\n\npip = use_extension(\"@rules_python//python/extensions:pip.bzl\", \"pip\", dev_dependency = True)\n\n[\n    pip.parse(\n        hub_name = \"pip_deps\",\n        python_version = python_version,\n        requirements_lock = \"//python:requirements.txt\",\n    )\n    for python_version in SUPPORTED_PYTHON_VERSIONS\n]\n\nuse_repo(pip, \"pip_deps\")\n\ncrate = use_extension(\"@rules_rust//crate_universe:extension.bzl\", \"crate\", dev_dependency = True)\ncrate.spec(\n    package = \"googletest\",\n    version = \">0.0.0\",\n)\ncrate.spec(\n    package = \"paste\",\n    version = \">=1\",\n)\ncrate.from_specs()\nuse_repo(crate, crate_index = \"crates\")\n\nmaven = use_extension(\"@rules_jvm_external//:extensions.bzl\", \"maven\", dev_dependency = True)\nmaven.install(\n    name = \"protobuf_maven\",\n    artifacts = [\n        \"com.google.caliper:caliper:1.0-beta-3\",\n        \"com.google.code.findbugs:jsr305:3.0.2\",\n        \"com.google.code.gson:gson:2.8.9\",\n        \"com.google.errorprone:error_prone_annotations:2.5.1\",\n        \"com.google.j2objc:j2objc-annotations:2.8\",\n        \"com.google.guava:guava:32.0.1-jre\",\n        \"com.google.guava:guava-testlib:32.0.1-jre\",\n        \"com.google.testparameterinjector:test-parameter-injector:1.18\",\n        \"com.google.truth:truth:1.1.2\",\n        \"junit:junit:4.13.2\",\n        \"org.mockito:mockito-core:4.3.1\",\n        \"biz.aQute.bnd:biz.aQute.bndlib:6.4.0\",\n        \"info.picocli:picocli:4.6.3\",\n    ],\n    repositories = [\n        \"https://repo1.maven.org/maven2\",\n        \"https://repo.maven.apache.org/maven2\",\n    ],\n)\nuse_repo(maven, \"protobuf_maven\")\n\n# Development dependencies\nbazel_dep(name = \"googletest\", version = \"1.14.0\", dev_dependency = True, repo_name = \"com_google_googletest\")\nbazel_dep(name = \"rules_buf\", version = \"0.3.0\", dev_dependency = True)\nbazel_dep(name = \"rules_testing\", version = \"0.6.0\", dev_dependency = True)\nbazel_dep(\n    name = \"abseil-py\",\n    version = \"2.1.0\",\n    dev_dependency = True,\n    repo_name = \"com_google_absl_py\",\n)\n\n# rules_proto are needed for @com_google_protobuf_v25.0 used in //compatibility/... tests\nbazel_dep(name = \"rules_proto\", version = \"4.0.0\", dev_dependency = True)\n"
        },
        {
          "name": "PrivacyInfo.xcprivacy",
          "type": "blob",
          "size": 0.36,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>NSPrivacyTracking</key>\n\t<false/>\n\t<key>NSPrivacyTrackingDomains</key>\n\t<array/>\n\t<key>NSPrivacyCollectedDataTypes</key>\n\t<array/>\n\t<key>NSPrivacyAccessedAPITypes</key>\n\t<array/>\n</dict>\n</plist>\n"
        },
        {
          "name": "Protobuf.podspec",
          "type": "blob",
          "size": 2.48,
          "content": "# This file describes to Cocoapods how to integrate the Objective-C runtime into a dependent\n# project.\n# Despite this file being specific to Objective-C, it needs to be on the root of the repository.\n# Otherwise, Cocoapods gives trouble like not picking up the license file correctly, or not letting\n# dependent projects use the :git notation to refer to the library.\nPod::Spec.new do |s|\n  s.name     = 'Protobuf'\n  s.version  = '4.30.0'\n  s.summary  = 'Protocol Buffers v.3 runtime library for Objective-C.'\n  s.homepage = 'https://github.com/protocolbuffers/protobuf'\n  s.license  = 'BSD-3-Clause'\n  s.authors  = { 'The Protocol Buffers contributors' => 'protobuf@googlegroups.com' }\n\n  # Ensure developers won't hit CocoaPods/CocoaPods#11402 with the resource\n  # bundle for the privacy manifest.\n  s.cocoapods_version = '>= 1.12.0'\n\n  s.source = { :git => 'https://github.com/protocolbuffers/protobuf.git',\n               :tag => \"v#{s.version}\" }\n\n  s.source_files = 'objectivec/*.{h,m,swift}'\n  # The following would cause duplicate symbol definitions. GPBProtocolBuffers is expected to be\n  # left out, as it's an umbrella implementation file.\n  s.exclude_files = 'objectivec/GPBProtocolBuffers.m'\n\n  # Now that there is a Swift source file, set a version.\n  s.swift_version = '5.0'\n\n  s.resource_bundle = {\n    \"Protobuf_Privacy\" => \"PrivacyInfo.xcprivacy\"\n  }\n\n  # Set a CPP symbol so the code knows to use framework imports.\n  s.user_target_xcconfig = { 'GCC_PREPROCESSOR_DEFINITIONS' => '$(inherited) GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS=1' }\n  s.pod_target_xcconfig = { 'GCC_PREPROCESSOR_DEFINITIONS' => '$(inherited) GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS=1' }\n\n  s.ios.deployment_target = '15.0'\n  s.osx.deployment_target = '11.0'\n  # The following are best-effort / community supported, and are not covered by\n  # our official support policies: https://protobuf.dev/support/version-support/\n  s.tvos.deployment_target = '12.0'\n  s.watchos.deployment_target = '6.0'\n  s.visionos.deployment_target = '1.0'\n  s.requires_arc = false\n\n  # The unittest need the generate sources from the testing related .proto\n  # files. So to add a `test_spec`, there would also need to be something like a\n  # `script_phases` to generate them, but there would also need to be a way to\n  # ensure `protoc` had be built. Another option would be to move to a model\n  # where the needed files are always generated and checked in. Neither of these\n  # seem that great at the moment, so the tests have *not* been wired into here\n  # at this time.\nend\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.8,
          "content": "Protocol Buffers - Google's data interchange format\n===================================================\n\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/protocolbuffers/protobuf/badge)](https://securityscorecards.dev/viewer/?uri=github.com/protocolbuffers/protobuf)\n\nCopyright 2023 Google LLC\n\nOverview\n--------\n\nProtocol Buffers (a.k.a., protobuf) are Google's language-neutral,\nplatform-neutral, extensible mechanism for serializing structured data. You\ncan learn more about it in [protobuf's documentation](https://protobuf.dev).\n\nThis README file contains protobuf installation instructions. To install\nprotobuf, you need to install the protocol compiler (used to compile .proto\nfiles) and the protobuf runtime for your chosen programming language.\n\nWorking With Protobuf Source Code\n---------------------------------\n\nMost users will find working from\n[supported releases](https://github.com/protocolbuffers/protobuf/releases) to be\nthe easiest path.\n\nIf you choose to work from the head revision of the main branch your build will\noccasionally be broken by source-incompatible changes and insufficiently-tested\n(and therefore broken) behavior.\n\nIf you are using C++ or otherwise need to build protobuf from source as a part\nof your project, you should pin to a release commit on a release branch.\n\nThis is because even release branches can experience some instability in between\nrelease commits.\n\n### Bazel with Bzlmod\n\nProtobuf supports\n[Bzlmod](https://bazel.build/external/module) with Bazel 7 +.\nUsers should specify a dependency on protobuf in their MODULE.bazel file as\nfollows.\n\n```\nbazel_dep(name = \"protobuf\", version = <VERSION>)\n```\n\nUsers can optionally override the repo name, such as for compatibility with\nWORKSPACE.\n\n```\nbazel_dep(name = \"protobuf\", version = <VERSION>, repo_name = \"com_google_protobuf\")\n```\n\n### Bazel with WORKSPACE\n\nUsers can also add the following to their legacy\n[WORKSPACE](https://bazel.build/external/overview#workspace-system) file.\n\nNote that the `protobuf_extra_deps.bzl` is added in the `v30.x` release.\n\n```\nhttp_archive(\n    name = \"com_google_protobuf\",\n    strip_prefix = \"protobuf-VERSION\",\n    sha256 = ...,\n    url = ...,\n)\n\nload(\"@com_google_protobuf//:protobuf_deps.bzl\", \"protobuf_deps\")\n\nprotobuf_deps()\n\nload(\"@com_google_protobuf//:protobuf_extra_deps.bzl\", \"protobuf_extra_deps\")\n\nprotobuf_extra_deps();\n```\n\nProtobuf Compiler Installation\n------------------------------\n\nThe protobuf compiler is written in C++. If you are using C++, please follow\nthe [C++ Installation Instructions](src/README.md) to install protoc along\nwith the C++ runtime.\n\nFor non-C++ users, the simplest way to install the protocol compiler is to\ndownload a pre-built binary from our [GitHub release page](https://github.com/protocolbuffers/protobuf/releases).\n\nIn the downloads section of each release, you can find pre-built binaries in\nzip packages: `protoc-$VERSION-$PLATFORM.zip`. It contains the protoc binary\nas well as a set of standard `.proto` files distributed along with protobuf.\n\nIf you are looking for an old version that is not available in the release\npage, check out the [Maven repository](https://repo1.maven.org/maven2/com/google/protobuf/protoc/).\n\nThese pre-built binaries are only provided for released versions. If you want\nto use the github main version at HEAD, or you need to modify protobuf code,\nor you are using C++, it's recommended to build your own protoc binary from\nsource.\n\nIf you would like to build protoc binary from source, see the [C++ Installation Instructions](src/README.md).\n\nProtobuf Runtime Installation\n-----------------------------\n\nProtobuf supports several different programming languages. For each programming\nlanguage, you can find instructions in the corresponding source directory about\nhow to install protobuf runtime for that specific language:\n\n| Language                             | Source                                                      |\n|--------------------------------------|-------------------------------------------------------------|\n| C++ (include C++ runtime and protoc) | [src](src)                                                  |\n| Java                                 | [java](java)                                                |\n| Python                               | [python](python)                                            |\n| Objective-C                          | [objectivec](objectivec)                                    |\n| C#                                   | [csharp](csharp)                                            |\n| Ruby                                 | [ruby](ruby)                                                |\n| Go                                   | [protocolbuffers/protobuf-go](https://github.com/protocolbuffers/protobuf-go)|\n| PHP                                  | [php](php)                                                  |\n| Dart                                 | [dart-lang/protobuf](https://github.com/dart-lang/protobuf) |\n| JavaScript                           | [protocolbuffers/protobuf-javascript](https://github.com/protocolbuffers/protobuf-javascript)|\n\nQuick Start\n-----------\n\nThe best way to learn how to use protobuf is to follow the [tutorials in our\ndeveloper guide](https://protobuf.dev/getting-started).\n\nIf you want to learn from code examples, take a look at the examples in the\n[examples](examples) directory.\n\nDocumentation\n-------------\n\nThe complete documentation is available at the [Protocol Buffers doc site](https://protobuf.dev).\n\nSupport Policy\n--------------\n\nRead about our [version support policy](https://protobuf.dev/version-support/)\nto stay current on support timeframes for the language libraries.\n\nDeveloper Community\n-------------------\n\nTo be alerted to upcoming changes in Protocol Buffers and connect with protobuf developers and users,\n[join the Google Group](https://groups.google.com/g/protobuf).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.17,
          "content": "To report security concerns or vulnerabilities within protobuf, please use\nGoogle's official channel for reporting these.\n\nhttps://www.google.com/appserve/security-bugs/m2/new\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 9,
          "content": "workspace(name = \"com_google_protobuf\")\n\n# An explicit self-reference to work around changes in Bazel 7.0\n# See https://github.com/bazelbuild/bazel/issues/19973#issuecomment-1787814450\n# buildifier: disable=duplicated-name\nlocal_repository(\n    name = \"com_google_protobuf\",\n    path = \".\",\n)\n\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nlocal_repository(\n    name = \"com_google_protobuf_examples\",\n    path = \"examples\",\n)\n\n# Load common dependencies first to ensure we use the correct version\nload(\"//:protobuf_deps.bzl\", \"PROTOBUF_MAVEN_ARTIFACTS\", \"protobuf_deps\")\n\nprotobuf_deps()\n\nload(\"//:protobuf_extra_deps.bzl\", \"protobuf_extra_deps\")\n\nprotobuf_extra_deps()\n\nload(\"@bazel_features//:deps.bzl\", \"bazel_features_deps\")\n\nbazel_features_deps()\n\nload(\"@rules_python//python:repositories.bzl\", \"py_repositories\")\n\npy_repositories()\n\nload(\"@rules_python//python/pip_install:repositories.bzl\", \"pip_install_dependencies\")\n\npip_install_dependencies()\n\n# Bazel platform rules.\nhttp_archive(\n    name = \"platforms\",\n    sha256 = \"3a561c99e7bdbe9173aa653fd579fe849f1d8d67395780ab4770b1f381431d51\",\n    urls = [\n        \"https://mirror.bazel.build/github.com/bazelbuild/platforms/releases/download/0.0.7/platforms-0.0.7.tar.gz\",\n        \"https://github.com/bazelbuild/platforms/releases/download/0.0.7/platforms-0.0.7.tar.gz\",\n    ],\n)\n\nhttp_archive(\n    name = \"com_google_googletest\",\n    sha256 = \"7315acb6bf10e99f332c8a43f00d5fbb1ee6ca48c52f6b936991b216c586aaad\",\n    strip_prefix = \"googletest-1.15.0\",\n    urls = [\n        \"https://github.com/google/googletest/releases/download/v1.15.0/googletest-1.15.0.tar.gz\",  # 2024-07-15\n    ],\n)\n\nload(\"@com_google_googletest//:googletest_deps.bzl\", \"googletest_deps\")\n\ngoogletest_deps()\n\nload(\"@rules_jvm_external//:repositories.bzl\", \"rules_jvm_external_deps\")\n\nrules_jvm_external_deps()\n\nload(\"@rules_jvm_external//:setup.bzl\", \"rules_jvm_external_setup\")\n\nrules_jvm_external_setup()\n\nload(\"@rules_jvm_external//:defs.bzl\", \"maven_install\")\n\nmaven_install(\n    name = \"protobuf_maven\",\n    artifacts = PROTOBUF_MAVEN_ARTIFACTS,\n    # For updating instructions, see:\n    # https://github.com/bazelbuild/rules_jvm_external#updating-maven_installjson\n    maven_install_json = \"//:maven_install.json\",\n    repositories = [\n        \"https://repo1.maven.org/maven2\",\n        \"https://repo.maven.apache.org/maven2\",\n    ],\n)\n\nload(\"@protobuf_maven//:defs.bzl\", \"pinned_maven_install\")\n\npinned_maven_install()\n\n# For `cc_proto_blacklist_test` and `build_test`.\nload(\"@bazel_skylib//:workspace.bzl\", \"bazel_skylib_workspace\")\n\nbazel_skylib_workspace()\n\nload(\"@rules_pkg//:deps.bzl\", \"rules_pkg_dependencies\")\n\nrules_pkg_dependencies()\n\nload(\"@build_bazel_rules_apple//apple:repositories.bzl\", \"apple_rules_dependencies\")\n\napple_rules_dependencies()\n\nload(\"@build_bazel_apple_support//lib:repositories.bzl\", \"apple_support_dependencies\")\n\napple_support_dependencies()\n\nload(\"@rules_java//java:repositories.bzl\", \"rules_java_dependencies\", \"rules_java_toolchains\")\n\nrules_java_dependencies()\n\nrules_java_toolchains()\n\nload(\"@rules_cc//cc:repositories.bzl\", \"rules_cc_dependencies\")\n\nrules_cc_dependencies()\n\n# For `kt_jvm_library`\nload(\"@rules_kotlin//kotlin:repositories.bzl\", \"kotlin_repositories\")\n\nkotlin_repositories()\n\nload(\"@rules_kotlin//kotlin:core.bzl\", \"kt_register_toolchains\")\n\nkt_register_toolchains()\n\nhttp_archive(\n    name = \"rules_ruby\",\n    integrity = \"sha256-Lh/xxR6WsKJnS92sYkpJDBtdS6DNrCbi0kuUxBffG6E=\",\n    strip_prefix = \"rules_ruby-588d9dd40487277e2560ece09fe310d7c0ecb4a6\",\n    urls = [\n        \"https://github.com/protocolbuffers/rules_ruby/archive/588d9dd40487277e2560ece09fe310d7c0ecb4a6.zip\",\n    ],\n)\n\nload(\"@rules_ruby//ruby:defs.bzl\", \"ruby_runtime\")\n\nruby_runtime(\"system_ruby\")\n\nregister_toolchains(\"@system_ruby//:toolchain\")\n\n# Uncomment pairs of ruby_runtime() + register_toolchain() calls below to enable\n# local JRuby testing. Do not submit the changes (due to impact on test duration\n# for non JRuby builds due to downloading JRuby SDKs).\n#ruby_runtime(\"jruby-9.2\")\n#\n#register_toolchains(\"@jruby-9.2//:toolchain\")\n#\n#ruby_runtime(\"jruby-9.3\")\n#\n#register_toolchains(\"@jruby-9.3//:toolchain\")\n\nload(\"@system_ruby//:bundle.bzl\", \"ruby_bundle\")\n\nruby_bundle(\n    name = \"protobuf_bundle\",\n    srcs = [\"//ruby:google-protobuf.gemspec\"],\n    gemfile = \"//ruby:Gemfile\",\n)\n\nhttp_archive(\n    name = \"lua\",\n    build_file = \"//python/dist:lua.BUILD\",\n    sha256 = \"b9e2e4aad6789b3b63a056d442f7b39f0ecfca3ae0f1fc0ae4e9614401b69f4b\",\n    strip_prefix = \"lua-5.2.4\",\n    urls = [\n        \"https://mirror.bazel.build/www.lua.org/ftp/lua-5.2.4.tar.gz\",\n        \"https://www.lua.org/ftp/lua-5.2.4.tar.gz\",\n    ],\n)\n\nhttp_archive(\n    name = \"com_github_google_benchmark\",\n    sha256 = \"62e2f2e6d8a744d67e4bbc212fcfd06647080de4253c97ad5c6749e09faf2cb0\",\n    strip_prefix = \"benchmark-0baacde3618ca617da95375e0af13ce1baadea47\",\n    urls = [\"https://github.com/google/benchmark/archive/0baacde3618ca617da95375e0af13ce1baadea47.zip\"],\n)\n\nhttp_archive(\n    name = \"com_google_googleapis\",\n    build_file = \"//benchmarks:BUILD.googleapis\",\n    patch_cmds = [\"find google -type f -name BUILD.bazel -delete\"],\n    sha256 = \"d986023c3d8d2e1b161e9361366669cac9fb97c2a07e656c2548aca389248bb4\",\n    strip_prefix = \"googleapis-d81d0b9e6993d6ab425dff4d7c3d05fb2e59fa57\",\n    urls = [\"https://github.com/googleapis/googleapis/archive/d81d0b9e6993d6ab425dff4d7c3d05fb2e59fa57.zip\"],\n)\n\nload(\"@system_python//:pip.bzl\", \"pip_parse\")\n\npip_parse(\n    name = \"pip_deps\",\n    requirements = \"//python:requirements.txt\",\n)\n\nload(\"@pip_deps//:requirements.bzl\", \"install_deps\")\n\ninstall_deps()\n\nhttp_archive(\n    name = \"com_google_absl_py\",\n    sha256 = \"8a3d0830e4eb4f66c4fa907c06edf6ce1c719ced811a12e26d9d3162f8471758\",\n    strip_prefix = \"abseil-py-2.1.0\",\n    urls = [\n        \"https://github.com/abseil/abseil-py/archive/refs/tags/v2.1.0.tar.gz\",\n    ],\n)\n\nhttp_archive(\n    name = \"rules_fuzzing\",\n    patch_args = [\"-p1\"],\n    patches = [\"//third_party:rules_fuzzing.patch\"],\n    sha256 = \"77206c54b71f4dd5335123a6ff2a8ea688eca5378d34b4838114dff71652cf26\",\n    strip_prefix = \"rules_fuzzing-0.5.1\",\n    urls = [\"https://github.com/bazelbuild/rules_fuzzing/releases/download/v0.5.1/rules_fuzzing-0.5.1.zip\"],\n)\n\nload(\"@rules_fuzzing//fuzzing:repositories.bzl\", \"rules_fuzzing_dependencies\")\n\nrules_fuzzing_dependencies()\n\nload(\"@rules_fuzzing//fuzzing:init.bzl\", \"rules_fuzzing_init\")\n\nrules_fuzzing_init()\n\nload(\"@fuzzing_py_deps//:requirements.bzl\", fuzzing_py_deps_install_deps = \"install_deps\")\n\nfuzzing_py_deps_install_deps()\n\nhttp_archive(\n    name = \"rules_rust\",\n    integrity = \"sha256-r09Wyq5QqZpov845sUG1Cd1oVIyCBLmKt6HK/JTVuwI=\",\n    urls = [\"https://github.com/bazelbuild/rules_rust/releases/download/0.54.1/rules_rust-v0.54.1.tar.gz\"],\n)\n\nload(\"@rules_rust//rust:repositories.bzl\", \"rules_rust_dependencies\", \"rust_register_toolchains\")\n\nrules_rust_dependencies()\n\nrust_register_toolchains(edition = \"2021\")\n\nload(\"@rules_rust//crate_universe:defs.bzl\", \"crate\", \"crates_repository\")\n\n# to repin, invoke `CARGO_BAZEL_REPIN=1 bazel sync --only=crate_index`\ncrates_repository(\n    name = \"crate_index\",\n    cargo_lockfile = \"//:Cargo.lock\",\n    lockfile = \"//:Cargo.bazel.lock\",\n    packages = {\n        \"googletest\": crate.spec(\n            git = \"https://github.com/google/googletest-rust\",\n            rev = \"b407f3b5774defb8917d714bfb7af485e117d621\",\n        ),\n        \"paste\": crate.spec(\n            version = \">=1\",\n        ),\n    },\n)\n\nload(\"@crate_index//:defs.bzl\", \"crate_repositories\")\n\ncrate_repositories()\n\n# For testing runtime against old gencode from a previous major version.\nhttp_archive(\n    name = \"com_google_protobuf_v25.0\",\n    integrity = \"sha256-e+7ZxRHWMs/3wirACU3Xcg5VAVMDnV2n4Fm8zrSIR0o=\",\n    strip_prefix = \"protobuf-25.0\",\n    url = \"https://github.com/protocolbuffers/protobuf/releases/download/v25.0/protobuf-25.0.tar.gz\",\n)\n\n# Needed as a dependency of @com_google_protobuf_v25.0\nload(\"@com_google_protobuf_v25.0//:protobuf_deps.bzl\", protobuf_v25_deps = \"protobuf_deps\")\n\nprotobuf_v25_deps()\n\nhttp_archive(\n    name = \"rules_testing\",\n    sha256 = \"02c62574631876a4e3b02a1820cb51167bb9cdcdea2381b2fa9d9b8b11c407c4\",\n    strip_prefix = \"rules_testing-0.6.0\",\n    url = \"https://github.com/bazelbuild/rules_testing/releases/download/v0.6.0/rules_testing-v0.6.0.tar.gz\",\n)\n\n# For checking breaking changes to well-known types from the previous release version.\nload(\"//:protobuf_version.bzl\", \"PROTOBUF_PREVIOUS_RELEASE\")\n\nhttp_archive(\n    name = \"com_google_protobuf_previous_release\",\n    strip_prefix = \"protobuf-\" + PROTOBUF_PREVIOUS_RELEASE,\n    url = \"https://github.com/protocolbuffers/protobuf/releases/download/v{0}/protobuf-{0}.tar.gz\".format(PROTOBUF_PREVIOUS_RELEASE),\n)\n\nhttp_archive(\n    name = \"rules_buf\",\n    integrity = \"sha256-Hr64Q/CaYr0E3ptAjEOgdZd1yc+cBjp7OG1wzuf3DIs=\",\n    strip_prefix = \"rules_buf-0.3.0\",\n    urls = [\n        \"https://github.com/bufbuild/rules_buf/archive/refs/tags/v0.3.0.zip\",\n    ],\n)\n\nload(\"@rules_buf//buf:repositories.bzl\", \"rules_buf_dependencies\", \"rules_buf_toolchains\")\n\nrules_buf_dependencies()\n\nrules_buf_toolchains(version = \"v1.32.1\")\n"
        },
        {
          "name": "WORKSPACE.bzlmod",
          "type": "blob",
          "size": 1.83,
          "content": "# This is a WORKSPACE file used by bzlmod in combination with MODULE.bazel.\n# It's used for a gradual migration and it should be empty.\n# Don't remove this file. If the file doesn't exist, bzlmod falls back to WORKSPACE file.\n\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\n# TODO: either replace rules_ruby with a maintained version on BCR\n# or use bzlmod extensions to depend on this specific repo\nhttp_archive(\n    name = \"rules_ruby\",\n    urls = [\n      \"https://github.com/protocolbuffers/rules_ruby/archive/588d9dd40487277e2560ece09fe310d7c0ecb4a6.zip\"\n    ],\n    strip_prefix = \"rules_ruby-588d9dd40487277e2560ece09fe310d7c0ecb4a6\",\n    integrity = \"sha256-Lh/xxR6WsKJnS92sYkpJDBtdS6DNrCbi0kuUxBffG6E=\",\n)\n\nload(\"@rules_ruby//ruby:defs.bzl\", \"ruby_runtime\")\n\nruby_runtime(\"system_ruby\")\n\nregister_toolchains(\"@system_ruby//:toolchain\")\n\n# Following are just needed to run conformance tests, not really needed to support them via MODULE.bazel\n\n# For testing runtime against old gencode from a previous major version.\nhttp_archive(\n    name = \"com_google_protobuf_v25.0\",\n    integrity = \"sha256-e+7ZxRHWMs/3wirACU3Xcg5VAVMDnV2n4Fm8zrSIR0o=\",\n    strip_prefix = \"protobuf-25.0\",\n    url = \"https://github.com/protocolbuffers/protobuf/releases/download/v25.0/protobuf-25.0.tar.gz\",\n)\n\n# Needed as a dependency of @com_google_protobuf_v25.0\nload(\"@com_google_protobuf_v25.0//:protobuf_deps.bzl\", protobuf_v25_deps=\"protobuf_deps\")\nprotobuf_v25_deps()\n\n\n# Needed for checking breaking changes from the previous release version.\nload(\"//:protobuf_version.bzl\", \"PROTOBUF_PREVIOUS_RELEASE\")\n\nhttp_archive(\n    name = \"com_google_protobuf_previous_release\",\n    strip_prefix = \"protobuf-\" + PROTOBUF_PREVIOUS_RELEASE,\n    url = \"https://github.com/protocolbuffers/protobuf/releases/download/v{0}/protobuf-{0}.tar.gz\".format(PROTOBUF_PREVIOUS_RELEASE),\n)\n"
        },
        {
          "name": "appveyor.bat",
          "type": "blob",
          "size": 1.41,
          "content": "setlocal\n\nIF %platform%==MinGW GOTO build_mingw\nIF %language%==cpp GOTO build_cpp\nIF %language%==csharp GOTO build_csharp\n\necho Unsupported language %language% and platform %platform%. Exiting.\ngoto :error\n\n:build_mingw\necho Building MinGW\nset PATH=C:\\mingw-w64\\x86_64-7.2.0-posix-seh-rt_v5-rev1\\mingw64\\bin;%PATH:C:\\Program Files\\Git\\usr\\bin;=%\nmkdir build_mingw\ncd build_mingw\ncmake -G \"%generator%\" -Dprotobuf_BUILD_SHARED_LIBS=%BUILD_DLL% -Dprotobuf_UNICODE=%UNICODE% -Dprotobuf_BUILD_TESTS=0 ../cmake\nmingw32-make -j8 all || goto error\nrem cd %configuration%\nrem tests.exe || goto error\ngoto :EOF\n\n:build_cpp\necho Building C++\nmkdir build_msvc\ncd build_msvc\ncmake -G \"%generator%\" -Dprotobuf_BUILD_SHARED_LIBS=%BUILD_DLL% -Dprotobuf_UNICODE=%UNICODE% ../cmake\nmsbuild protobuf.sln /p:Platform=%vcplatform% /logger:\"C:\\Program Files\\AppVeyor\\BuildAgent\\Appveyor.MSBuildLogger.dll\" || goto error\ncd %configuration%\ntests.exe || goto error\ngoto :EOF\n\n:build_csharp\necho Building C#\ncd csharp\\src\nREM The platform environment variable is implicitly used by msbuild;\nREM we don't want it.\nset platform=\ndotnet restore\ndotnet build -c %configuration% || goto error\n\necho Testing C#\ndotnet test -c %configuration% -f net6.0 Google.Protobuf.Test\\Google.Protobuf.Test.csproj || goto error\ndotnet test -c %configuration% -f net462 Google.Protobuf.Test\\Google.Protobuf.Test.csproj || goto error\n\ngoto :EOF\n\n:error\necho Failed!\nEXIT /b %ERRORLEVEL%\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.14,
          "content": "configuration:\n  - Debug\n\nenvironment:\n  matrix:\n    # Only test few combinations: \"Visual Studio 2017 (15) + Win64/MinGW + Debug + DLL\". We can\n    # test more combinations but AppVeyor just takes too long to finish (each\n    # combination takes ~15mins).\n    - platform: MinGW\n      language: cpp\n      image: Visual Studio 2017\n\n    - platform: Win64\n      language: cpp\n      image: Visual Studio 2017\n      BUILD_DLL: ON\n      UNICODE: ON\n\n    - platform: Win64\n      language: cpp\n      image: Visual Studio 2017\n      BUILD_DLL: OFF\n      UNICODE: ON\n\n    - platform: Win64\n      language: csharp\n      image: Visual Studio 2017\n\n# Our build scripts run tests automatically; we don't want AppVeyor\n# to try to detect them itself.\ntest: off\n\ninstall:\n  - git submodule update --init --recursive\n\nbefore_build:\n  - if %platform%==MinGW set generator=MinGW Makefiles\n  - if %platform%==Win32 set generator=Visual Studio 15\n  - if %platform%==Win64 set generator=Visual Studio 15 Win64\n  - if %platform%==Win32 set vcplatform=Win32\n  - if %platform%==Win64 set vcplatform=x64\n\nbuild_script:\n  - CALL appveyor.bat\n\nskip_commits:\n  message: /.*\\[skip appveyor\\].*/\n"
        },
        {
          "name": "bazel",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_defs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "compatibility",
          "type": "tree",
          "content": null
        },
        {
          "name": "conformance",
          "type": "tree",
          "content": null
        },
        {
          "name": "csharp",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "editions",
          "type": "tree",
          "content": null
        },
        {
          "name": "editors",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fix_permissions.sh",
          "type": "blob",
          "size": 0.14,
          "content": "#!/bin/bash\nfor file in $(find . -type f); do\n  if [ \"$(head -c 2 $file)\" == \"#!\" ]; then\n    chmod u+x $file\n  else\n    chmod a-x $file\n  fi\ndone\n"
        },
        {
          "name": "generate_descriptor_proto.sh",
          "type": "blob",
          "size": 3.22,
          "content": "#!/usr/bin/env bash\n\n# Run this script to regenerate descriptor.pb.{h,cc} after the protocol\n# compiler changes.  Since these files are compiled into the protocol compiler\n# itself, they cannot be generated automatically by a make rule.  \"make check\"\n# will fail if these files do not match what the protocol compiler would\n# generate.\n#\n# HINT:  Flags passed to generate_descriptor_proto.sh will be passed directly\n#   to bazel when building protoc.  This is particularly useful for passing\n#   -j4 to run 4 jobs simultaneously.\n\nif test ! -e src/google/protobuf/stubs/common.h; then\n  cat >&2 << __EOF__\nCould not find source code.  Make sure you are running this script from the\nroot of the distribution tree.\n__EOF__\n  exit 1\nfi\n\ncd src\n\ndeclare -a RUNTIME_PROTO_FILES=(\\\n  google/protobuf/any.proto \\\n  google/protobuf/api.proto \\\n  google/protobuf/cpp_features.proto \\\n  google/protobuf/descriptor.proto \\\n  google/protobuf/duration.proto \\\n  google/protobuf/empty.proto \\\n  google/protobuf/field_mask.proto \\\n  google/protobuf/source_context.proto \\\n  google/protobuf/struct.proto \\\n  google/protobuf/timestamp.proto \\\n  google/protobuf/type.proto \\\n  google/protobuf/wrappers.proto)\n\ndeclare -a COMPILER_PROTO_FILES=(\\\n  google/protobuf/compiler/plugin.proto)\n\nCORE_PROTO_IS_CORRECT=0\nPROCESS_ROUND=1\nBOOTSTRAP_PROTOC=\"\"\nwhile [ $# -gt 0 ]; do\n  case $1 in\n    --bootstrap_protoc)\n      BOOTSTRAP_PROTOC=$2\n      shift 2\n      ;;\n    *)\n      break\n      ;;\n  esac\n  shift\ndone\nTMP=$(mktemp -d)\necho \"Updating descriptor protos...\"\nwhile [ $CORE_PROTO_IS_CORRECT -ne 1 ]\ndo\n  echo \"Round $PROCESS_ROUND\"\n  CORE_PROTO_IS_CORRECT=1\n\n  if [ \"$BOOTSTRAP_PROTOC\" != \"\" ]; then\n    PROTOC=$BOOTSTRAP_PROTOC\n    BOOTSTRAP_PROTOC=\"\"\n  else\n    ${BAZEL:-bazel} ${BAZEL_STARTUP_FLAGS:-} build $@ //:protoc ${BAZEL_FLAGS:-}\n    if test $? -ne 0; then\n      echo \"Failed to build protoc.\"\n      exit 1\n    fi\n    PROTOC=\"../bazel-bin/protoc\"\n  fi\n\n  $PROTOC --cpp_out=dllexport_decl=PROTOBUF_EXPORT:$TMP ${RUNTIME_PROTO_FILES[@]} && \\\n  $PROTOC --cpp_out=dllexport_decl=PROTOC_EXPORT:$TMP ${COMPILER_PROTO_FILES[@]}\n\n  for PROTO_FILE in ${RUNTIME_PROTO_FILES[@]} ${COMPILER_PROTO_FILES[@]}; do\n    BASE_NAME=${PROTO_FILE%.*}\n    diff ${BASE_NAME}.pb.h $TMP/${BASE_NAME}.pb.h > /dev/null\n    if test $? -ne 0; then\n      CORE_PROTO_IS_CORRECT=0\n    fi\n    diff ${BASE_NAME}.pb.cc $TMP/${BASE_NAME}.pb.cc > /dev/null\n    if test $? -ne 0; then\n      CORE_PROTO_IS_CORRECT=0\n    fi\n  done\n\n  # Only override the output if the files are different to avoid re-compilation\n  # of the protoc.\n  if [ $CORE_PROTO_IS_CORRECT -ne 1 ]; then\n    for PROTO_FILE in ${RUNTIME_PROTO_FILES[@]} ${COMPILER_PROTO_FILES[@]}; do\n      BASE_NAME=${PROTO_FILE%.*}\n      mv $TMP/${BASE_NAME}.pb.h ${BASE_NAME}.pb.h\n      mv $TMP/${BASE_NAME}.pb.cc ${BASE_NAME}.pb.cc\n    done\n  fi\n\n  PROCESS_ROUND=$((PROCESS_ROUND + 1))\ndone\ncd ..\n\nif test -x objectivec/generate_well_known_types.sh; then\n  echo \"Generating messages for objc.\"\n  objectivec/generate_well_known_types.sh $@\nfi\n\nif test -x csharp/generate_protos.sh; then\n  echo \"Generating messages for C#.\"\n  csharp/generate_protos.sh $@\nfi\n\nif test -x php/generate_descriptor_protos.sh; then\n  echo \"Generating messages for PHP.\"\n  php/generate_descriptor_protos.sh $@\nfi\n"
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.08,
          "content": "﻿{\n  \"sdk\": {\n    \"version\": \"6.0.100\",\n    \"rollForward\": \"latestMinor\"\n  }\n}\n"
        },
        {
          "name": "go",
          "type": "tree",
          "content": null
        },
        {
          "name": "google3_export_generated_files.sh",
          "type": "blob",
          "size": 0.97,
          "content": "#!/bin/bash\n\n# This script updates all our generated files and exports them to a given\n# directory.  This is intended to simplify the process of updating these from\n# google3.  After copybara generates a branch for testings, run the following\n# from a git clone:\n#   git fetch --all\n#   git checkout upstream/<copybara branch>\n#   ./google3_export_generated_files <ldap>/<citc_workspace>\n#\n# Note: this is a temporary script and won't be needed once we automatically\n# update these.\n\nset -ex\n\nOUTPUT_PATH=/google/src/cloud/$1/google3/third_party/protobuf/github\n\nupdate_staleness() {\n  TARGET_DIR=$1\n  TARGET=$2\n  GEN_PATH=$3\n  GEN_FILES=${@:4}\n  bazel build //$TARGET_DIR:$TARGET\n  bazel-bin/$TARGET_DIR/$TARGET --fix\n  for file in $GEN_FILES; do\n    cp $GEN_PATH/$file $OUTPUT_PATH/$GEN_PATH/\n  done\n}\n\nupdate_staleness ruby/ext/google/protobuf_c test_amalgamation_staleness ruby/ext/google/protobuf_c ruby-upb.*\nupdate_staleness php test_amalgamation_staleness php/ext/google/protobuf php-upb.*\n"
        },
        {
          "name": "hpb",
          "type": "tree",
          "content": null
        },
        {
          "name": "hpb_generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "java",
          "type": "tree",
          "content": null
        },
        {
          "name": "lua",
          "type": "tree",
          "content": null
        },
        {
          "name": "maven_install.json",
          "type": "blob",
          "size": 47.6,
          "content": "{\n  \"__AUTOGENERATED_FILE_DO_NOT_MODIFY_THIS_FILE_MANUALLY\": \"THERE_IS_NO_DATA_ONLY_ZUUL\",\n  \"__INPUT_ARTIFACTS_HASH\": 30376387,\n  \"__RESOLVED_ARTIFACTS_HASH\": 52907685,\n  \"conflict_resolution\": {\n    \"com.google.errorprone:error_prone_annotations:2.5.1\": \"com.google.errorprone:error_prone_annotations:2.18.0\"\n  },\n  \"artifacts\": {\n    \"biz.aQute.bnd:biz.aQute.bnd.util\": {\n      \"shasums\": {\n        \"jar\": \"65b5bd4a0fab16812f1800c98ff74a038f37a38bfe899af382efed4efdc1e3e1\"\n      },\n      \"version\": \"6.4.0\"\n    },\n    \"biz.aQute.bnd:biz.aQute.bndlib\": {\n      \"shasums\": {\n        \"jar\": \"357145074872f9dbf67e629fcd237e6152707e575d735df4535282f9f588d2d8\"\n      },\n      \"version\": \"6.4.0\"\n    },\n    \"com.google.auto.value:auto-value-annotations\": {\n      \"shasums\": {\n        \"jar\": \"37ec09b47d7ed35a99d13927db5c86fc9071f620f943ead5d757144698310852\"\n      },\n      \"version\": \"1.8.1\"\n    },\n    \"com.google.caliper:caliper\": {\n      \"shasums\": {\n        \"jar\": \"d54e1bfdbe9359a79e175c217b8d472555cf20da9c5c0a18bdb1ea7db979ed8e\"\n      },\n      \"version\": \"1.0-beta-3\"\n    },\n    \"com.google.caliper:caliper-api\": {\n      \"shasums\": {\n        \"jar\": \"374f0c6c0c1f8784cb69d885e1dcbb7498c34ca20369e0597264568530642928\"\n      },\n      \"version\": \"1.0-beta-3\"\n    },\n    \"com.google.caliper:caliper-core\": {\n      \"shasums\": {\n        \"jar\": \"514deac8f8b09dd4262733e0a4406a333208c899dc7ea726b03600b9bb94f192\"\n      },\n      \"version\": \"1.0-beta-3\"\n    },\n    \"com.google.caliper:caliper-runner\": {\n      \"shasums\": {\n        \"jar\": \"3ab58890aa01343361adedf859500d280f67813df0cedfcd165b169533b9b1fa\"\n      },\n      \"version\": \"1.0-beta-3\"\n    },\n    \"com.google.caliper:caliper-util\": {\n      \"shasums\": {\n        \"jar\": \"6e9af500c7020450dfdb5003d09501d512d395f431c54c7ee8f79e712463fe66\"\n      },\n      \"version\": \"1.0-beta-3\"\n    },\n    \"com.google.caliper:caliper-worker\": {\n      \"shasums\": {\n        \"jar\": \"315d8e51df1f60551645a0e3bf2c504d2c79762f688e6f728eb9d1d9cd9a491b\"\n      },\n      \"version\": \"1.0-beta-3\"\n    },\n    \"com.google.caliper:caliper-worker-jvm\": {\n      \"shasums\": {\n        \"jar\": \"e14e1ecfdf939c82abdb902105be41ff3f83c18cb968116232015f2662d065a4\"\n      },\n      \"version\": \"1.0-beta-3\"\n    },\n    \"com.google.code.findbugs:jsr305\": {\n      \"shasums\": {\n        \"jar\": \"766ad2a0783f2687962c8ad74ceecc38a28b9f72a2d085ee438b7813e928d0c7\"\n      },\n      \"version\": \"3.0.2\"\n    },\n    \"com.google.code.gson:gson\": {\n      \"shasums\": {\n        \"jar\": \"d3999291855de495c94c743761b8ab5176cfeabe281a5ab0d8e8d45326fd703e\"\n      },\n      \"version\": \"2.8.9\"\n    },\n    \"com.google.code.java-allocation-instrumenter:java-allocation-instrumenter\": {\n      \"shasums\": {\n        \"jar\": \"1ef5535a8bd41cf3072469f381b9ee6ab28275311a7499f53d6e52adf976fef0\"\n      },\n      \"version\": \"3.3.0\"\n    },\n    \"com.google.dagger:dagger\": {\n      \"shasums\": {\n        \"jar\": \"329d4340f24c4f5717af016c097e90668bfea2a5376e6aa9964b01cef3fd241a\"\n      },\n      \"version\": \"2.22.1\"\n    },\n    \"com.google.dagger:dagger-producers\": {\n      \"shasums\": {\n        \"jar\": \"f834a0082014213a68ff06a0f048d750178d02196c58b0b15beb367d32b97e35\"\n      },\n      \"version\": \"2.22.1\"\n    },\n    \"com.google.errorprone:error_prone_annotations\": {\n      \"shasums\": {\n        \"jar\": \"9e6814cb71816988a4fd1b07a993a8f21bb7058d522c162b1de849e19bea54ae\"\n      },\n      \"version\": \"2.18.0\"\n    },\n    \"com.google.guava:failureaccess\": {\n      \"shasums\": {\n        \"jar\": \"a171ee4c734dd2da837e4b16be9df4661afab72a41adaf31eb84dfdaf936ca26\"\n      },\n      \"version\": \"1.0.1\"\n    },\n    \"com.google.guava:guava\": {\n      \"shasums\": {\n        \"jar\": \"bd7fa227591fb8509677d0d1122cf95158f3b8a9f45653f58281d879f6dc48c5\"\n      },\n      \"version\": \"32.0.1-jre\"\n    },\n    \"com.google.guava:guava-testlib\": {\n      \"shasums\": {\n        \"jar\": \"c97511849a5e085280f106df2b059566febd280b118d33d6a9e068d238100b63\"\n      },\n      \"version\": \"32.0.1-jre\"\n    },\n    \"com.google.guava:listenablefuture\": {\n      \"shasums\": {\n        \"jar\": \"b372a037d4230aa57fbeffdef30fd6123f9c0c2db85d0aced00c91b974f33f99\"\n      },\n      \"version\": \"9999.0-empty-to-avoid-conflict-with-guava\"\n    },\n    \"com.google.j2objc:j2objc-annotations\": {\n      \"shasums\": {\n        \"jar\": \"f02a95fa1a5e95edb3ed859fd0fb7df709d121a35290eff8b74dce2ab7f4d6ed\"\n      },\n      \"version\": \"2.8\"\n    },\n    \"com.google.testparameterinjector:test-parameter-injector\": {\n      \"shasums\": {\n        \"jar\": \"e5a7c649c54c412049908247ca5e25fe6921d746849c6017a84dc6044237a4b4\"\n      },\n      \"version\": \"1.18\"\n    },\n    \"com.google.truth:truth\": {\n      \"shasums\": {\n        \"jar\": \"a85e03b8b6ae8780f060cfded9500a3d1b5f52808f99a2ea6da9c683313c7518\"\n      },\n      \"version\": \"1.1.2\"\n    },\n    \"com.squareup.okhttp:okhttp\": {\n      \"shasums\": {\n        \"jar\": \"88ac9fd1bb51f82bcc664cc1eb9c225c90dc4389d660231b4cc737bebfe7d0aa\"\n      },\n      \"version\": \"2.7.5\"\n    },\n    \"com.squareup.okio:okio\": {\n      \"shasums\": {\n        \"jar\": \"114bdc1f47338a68bcbc95abf2f5cdc72beeec91812f2fcd7b521c1937876266\"\n      },\n      \"version\": \"1.6.0\"\n    },\n    \"com.sun.jersey:jersey-client\": {\n      \"shasums\": {\n        \"jar\": \"639c825c5db580f8115bf49ffc893093526d2ed1079fbc929b6a5fbd0b2eda40\"\n      },\n      \"version\": \"1.19.4\"\n    },\n    \"com.sun.jersey:jersey-core\": {\n      \"shasums\": {\n        \"jar\": \"64b03198e0264849d0fc341857ebcc9c882b1909a2dc35a0972fe7d901b826e5\"\n      },\n      \"version\": \"1.19.4\"\n    },\n    \"info.picocli:picocli\": {\n      \"shasums\": {\n        \"jar\": \"b0a5159e926de8084ff066025142270443533656bc599b8bb31d14d11fd138a4\"\n      },\n      \"version\": \"4.6.3\"\n    },\n    \"javax.annotation:javax.annotation-api\": {\n      \"shasums\": {\n        \"jar\": \"e04ba5195bcd555dc95650f7cc614d151e4bcd52d29a10b8aa2197f3ab89ab9b\"\n      },\n      \"version\": \"1.3.2\"\n    },\n    \"javax.inject:javax.inject\": {\n      \"shasums\": {\n        \"jar\": \"91c77044a50c481636c32d916fd89c9118a72195390452c81065080f957de7ff\"\n      },\n      \"version\": \"1\"\n    },\n    \"javax.ws.rs:jsr311-api\": {\n      \"shasums\": {\n        \"jar\": \"ab1534b73b5fa055808e6598a5e73b599ccda28c3159c3c0908977809422ee4a\"\n      },\n      \"version\": \"1.1.1\"\n    },\n    \"joda-time:joda-time\": {\n      \"shasums\": {\n        \"jar\": \"dd8e7c92185a678d1b7b933f31209b6203c8ffa91e9880475a1be0346b9617e3\"\n      },\n      \"version\": \"2.10.10\"\n    },\n    \"junit:junit\": {\n      \"shasums\": {\n        \"jar\": \"8e495b634469d64fb8acfa3495a065cbacc8a0fff55ce1e31007be4c16dc57d3\"\n      },\n      \"version\": \"4.13.2\"\n    },\n    \"net.bytebuddy:byte-buddy\": {\n      \"shasums\": {\n        \"jar\": \"d2e46555699e70361b5471a7e142f9c67855bba6907a285177ebd8ad973775d8\"\n      },\n      \"version\": \"1.12.7\"\n    },\n    \"net.bytebuddy:byte-buddy-agent\": {\n      \"shasums\": {\n        \"jar\": \"73d84bb6e8e8980e674d796a29063f510ceb527c6f8c912a08a13e236be05c71\"\n      },\n      \"version\": \"1.12.7\"\n    },\n    \"org.checkerframework:checker-compat-qual\": {\n      \"shasums\": {\n        \"jar\": \"d76b9afea61c7c082908023f0cbc1427fab9abd2df915c8b8a3e7a509bccbc6d\"\n      },\n      \"version\": \"2.5.3\"\n    },\n    \"org.checkerframework:checker-qual\": {\n      \"shasums\": {\n        \"jar\": \"e316255bbfcd9fe50d165314b85abb2b33cb2a66a93c491db648e498a82c2de1\"\n      },\n      \"version\": \"3.33.0\"\n    },\n    \"org.hamcrest:hamcrest-core\": {\n      \"shasums\": {\n        \"jar\": \"66fdef91e9739348df7a096aa384a5685f4e875584cce89386a7a47251c4d8e9\"\n      },\n      \"version\": \"1.3\"\n    },\n    \"org.mockito:mockito-core\": {\n      \"shasums\": {\n        \"jar\": \"148de2c6928365db29443ca12d35c930d9f481172b934fdd801d1cb1409ea83a\"\n      },\n      \"version\": \"4.3.1\"\n    },\n    \"org.objenesis:objenesis\": {\n      \"shasums\": {\n        \"jar\": \"03d960bd5aef03c653eb000413ada15eb77cdd2b8e4448886edf5692805e35f3\"\n      },\n      \"version\": \"3.2\"\n    },\n    \"org.osgi:org.osgi.dto\": {\n      \"shasums\": {\n        \"jar\": \"cb75f3c7e48e5a31a31df22e26873346f5bf659e2dcab2369e031e4850d2ff43\"\n      },\n      \"version\": \"1.0.0\"\n    },\n    \"org.osgi:org.osgi.framework\": {\n      \"shasums\": {\n        \"jar\": \"ec194b7871af27681716ff05259319a5c3c9b9727e8000e9e832499b93484b4e\"\n      },\n      \"version\": \"1.8.0\"\n    },\n    \"org.osgi:org.osgi.resource\": {\n      \"shasums\": {\n        \"jar\": \"81fc50f1f1d38a4af28e131907d4afe213249aab05060484edca0e60c4af9b4a\"\n      },\n      \"version\": \"1.0.0\"\n    },\n    \"org.osgi:org.osgi.service.log\": {\n      \"shasums\": {\n        \"jar\": \"ff6710c4856d32684cf3ebdc45248f41036ff734f2b03bbc08c4609a61fecfa0\"\n      },\n      \"version\": \"1.3.0\"\n    },\n    \"org.osgi:org.osgi.service.repository\": {\n      \"shasums\": {\n        \"jar\": \"c5553e95b459529192433486d4c4cc22ff45a2eae4968484f9f717319264a532\"\n      },\n      \"version\": \"1.1.0\"\n    },\n    \"org.osgi:org.osgi.util.function\": {\n      \"shasums\": {\n        \"jar\": \"208819c7c71690c15a6bb8b187474e7f9d0147946b680182a62b9f222ae014ec\"\n      },\n      \"version\": \"1.2.0\"\n    },\n    \"org.osgi:org.osgi.util.promise\": {\n      \"shasums\": {\n        \"jar\": \"fef86e64f584d012a16a0306160764f6179663b90988a226c4641b920f3a4b36\"\n      },\n      \"version\": \"1.2.0\"\n    },\n    \"org.osgi:org.osgi.util.tracker\": {\n      \"shasums\": {\n        \"jar\": \"7d78c2cc9bcb6421c24f17aa097866ce8d9115c219a4f8d6cc753bc4dfb97efa\"\n      },\n      \"version\": \"1.5.4\"\n    },\n    \"org.osgi:osgi.annotation\": {\n      \"shasums\": {\n        \"jar\": \"a0e8a4c362bd3600812f37b0ea45fba966c7bc049d01fed56a09ecc74082759e\"\n      },\n      \"version\": \"8.0.1\"\n    },\n    \"org.ow2.asm:asm\": {\n      \"shasums\": {\n        \"jar\": \"0df97574914aee92fd349d0cb4e00f3345d45b2c239e0bb50f0a90ead47888e0\"\n      },\n      \"version\": \"9.0\"\n    },\n    \"org.ow2.asm:asm-analysis\": {\n      \"shasums\": {\n        \"jar\": \"be922aae60ff1ff1768e8e6544a38a7f92bd0a6d6b0b9791f94955d1bd453de2\"\n      },\n      \"version\": \"7.2\"\n    },\n    \"org.ow2.asm:asm-commons\": {\n      \"shasums\": {\n        \"jar\": \"0e86b8b179c5fb223d1a880a0ff4960b6978223984b94e62e71135f2d8ea3558\"\n      },\n      \"version\": \"7.2\"\n    },\n    \"org.ow2.asm:asm-tree\": {\n      \"shasums\": {\n        \"jar\": \"c063f5a67fa03cdc9bd79fd1c2ea6816cc4a19473ecdfbd9e9153b408c6f2656\"\n      },\n      \"version\": \"7.2\"\n    },\n    \"org.ow2.asm:asm-util\": {\n      \"shasums\": {\n        \"jar\": \"6e24913b021ffacfe8e7e053d6e0ccc731941148cfa078d4f1ed3d96904530f8\"\n      },\n      \"version\": \"7.2\"\n    },\n    \"org.slf4j:slf4j-api\": {\n      \"shasums\": {\n        \"jar\": \"18c4a0095d5c1da6b817592e767bb23d29dd2f560ad74df75ff3961dbde25b79\"\n      },\n      \"version\": \"1.7.25\"\n    },\n    \"org.yaml:snakeyaml\": {\n      \"shasums\": {\n        \"jar\": \"880c9d896e4b74a06c549c15ca496450165d6909fa15d7e662bee8f6a66d7afa\"\n      },\n      \"version\": \"2.0\"\n    }\n  },\n  \"dependencies\": {\n    \"biz.aQute.bnd:biz.aQute.bndlib\": [\n      \"biz.aQute.bnd:biz.aQute.bnd.util\",\n      \"org.osgi:org.osgi.dto\",\n      \"org.osgi:org.osgi.framework\",\n      \"org.osgi:org.osgi.resource\",\n      \"org.osgi:org.osgi.service.log\",\n      \"org.osgi:org.osgi.service.repository\",\n      \"org.osgi:org.osgi.util.function\",\n      \"org.osgi:org.osgi.util.promise\",\n      \"org.osgi:org.osgi.util.tracker\",\n      \"org.slf4j:slf4j-api\"\n    ],\n    \"com.google.caliper:caliper\": [\n      \"com.google.caliper:caliper-core\",\n      \"com.google.caliper:caliper-runner\",\n      \"com.google.caliper:caliper-worker-jvm\",\n      \"com.google.code.java-allocation-instrumenter:java-allocation-instrumenter\",\n      \"com.google.dagger:dagger\",\n      \"com.google.guava:guava\",\n      \"com.sun.jersey:jersey-client\"\n    ],\n    \"com.google.caliper:caliper-api\": [\n      \"com.google.guava:guava\",\n      \"joda-time:joda-time\"\n    ],\n    \"com.google.caliper:caliper-core\": [\n      \"com.google.auto.value:auto-value-annotations\",\n      \"com.google.caliper:caliper-api\",\n      \"com.google.caliper:caliper-util\",\n      \"com.google.dagger:dagger\",\n      \"com.google.guava:guava\",\n      \"com.squareup.okhttp:okhttp\",\n      \"joda-time:joda-time\"\n    ],\n    \"com.google.caliper:caliper-runner\": [\n      \"com.google.caliper:caliper-api\",\n      \"com.google.caliper:caliper-core\",\n      \"com.google.caliper:caliper-util\",\n      \"com.google.dagger:dagger\",\n      \"com.google.dagger:dagger-producers\",\n      \"com.google.guava:guava\",\n      \"com.squareup.okhttp:okhttp\",\n      \"joda-time:joda-time\"\n    ],\n    \"com.google.caliper:caliper-util\": [\n      \"com.google.code.gson:gson\",\n      \"com.google.dagger:dagger\",\n      \"com.google.guava:guava\",\n      \"joda-time:joda-time\"\n    ],\n    \"com.google.caliper:caliper-worker\": [\n      \"com.google.caliper:caliper-api\",\n      \"com.google.caliper:caliper-core\",\n      \"com.google.caliper:caliper-util\",\n      \"com.google.dagger:dagger\",\n      \"com.google.guava:guava\",\n      \"com.squareup.okhttp:okhttp\",\n      \"joda-time:joda-time\"\n    ],\n    \"com.google.caliper:caliper-worker-jvm\": [\n      \"com.google.caliper:caliper-core\",\n      \"com.google.caliper:caliper-worker\",\n      \"com.google.code.java-allocation-instrumenter:java-allocation-instrumenter\",\n      \"com.google.dagger:dagger\",\n      \"com.google.guava:guava\",\n      \"com.sun.jersey:jersey-client\"\n    ],\n    \"com.google.code.java-allocation-instrumenter:java-allocation-instrumenter\": [\n      \"com.google.guava:guava\",\n      \"javax.annotation:javax.annotation-api\",\n      \"org.ow2.asm:asm\",\n      \"org.ow2.asm:asm-analysis\",\n      \"org.ow2.asm:asm-commons\",\n      \"org.ow2.asm:asm-tree\",\n      \"org.ow2.asm:asm-util\"\n    ],\n    \"com.google.dagger:dagger\": [\"javax.inject:javax.inject\"],\n    \"com.google.dagger:dagger-producers\": [\n      \"com.google.dagger:dagger\",\n      \"com.google.guava:guava\",\n      \"javax.inject:javax.inject\",\n      \"org.checkerframework:checker-compat-qual\"\n    ],\n    \"com.google.guava:guava\": [\n      \"com.google.code.findbugs:jsr305\",\n      \"com.google.errorprone:error_prone_annotations\",\n      \"com.google.guava:failureaccess\",\n      \"com.google.guava:listenablefuture\",\n      \"com.google.j2objc:j2objc-annotations\",\n      \"org.checkerframework:checker-qual\"\n    ],\n    \"com.google.guava:guava-testlib\": [\n      \"com.google.code.findbugs:jsr305\",\n      \"com.google.errorprone:error_prone_annotations\",\n      \"com.google.guava:guava\",\n      \"com.google.j2objc:j2objc-annotations\",\n      \"junit:junit\",\n      \"org.checkerframework:checker-qual\"\n    ],\n    \"com.google.testparameterinjector:test-parameter-injector\": [\n      \"com.google.auto.value:auto-value-annotations\",\n      \"com.google.code.findbugs:jsr305\",\n      \"com.google.guava:guava\",\n      \"junit:junit\",\n      \"org.yaml:snakeyaml\"\n    ],\n    \"com.google.truth:truth\": [\n      \"com.google.auto.value:auto-value-annotations\",\n      \"com.google.errorprone:error_prone_annotations\",\n      \"com.google.guava:guava\",\n      \"junit:junit\",\n      \"org.checkerframework:checker-qual\",\n      \"org.ow2.asm:asm\"\n    ],\n    \"com.squareup.okhttp:okhttp\": [\"com.squareup.okio:okio\"],\n    \"com.sun.jersey:jersey-client\": [\"com.sun.jersey:jersey-core\"],\n    \"com.sun.jersey:jersey-core\": [\"javax.ws.rs:jsr311-api\"],\n    \"junit:junit\": [\"org.hamcrest:hamcrest-core\"],\n    \"org.mockito:mockito-core\": [\n      \"net.bytebuddy:byte-buddy\",\n      \"net.bytebuddy:byte-buddy-agent\",\n      \"org.objenesis:objenesis\"\n    ],\n    \"org.osgi:org.osgi.util.function\": [\"org.osgi:osgi.annotation\"],\n    \"org.osgi:org.osgi.util.promise\": [\n      \"org.osgi:org.osgi.util.function\",\n      \"org.osgi:osgi.annotation\"\n    ],\n    \"org.osgi:org.osgi.util.tracker\": [\"org.osgi:osgi.annotation\"],\n    \"org.ow2.asm:asm-analysis\": [\"org.ow2.asm:asm-tree\"],\n    \"org.ow2.asm:asm-commons\": [\n      \"org.ow2.asm:asm\",\n      \"org.ow2.asm:asm-analysis\",\n      \"org.ow2.asm:asm-tree\"\n    ],\n    \"org.ow2.asm:asm-tree\": [\"org.ow2.asm:asm\"],\n    \"org.ow2.asm:asm-util\": [\n      \"org.ow2.asm:asm\",\n      \"org.ow2.asm:asm-analysis\",\n      \"org.ow2.asm:asm-tree\"\n    ]\n  },\n  \"packages\": {\n    \"biz.aQute.bnd:biz.aQute.bnd.util\": [\n      \"aQute.bnd.classfile\",\n      \"aQute.bnd.classfile.builder\",\n      \"aQute.bnd.classfile.preview\",\n      \"aQute.bnd.exceptions\",\n      \"aQute.bnd.memoize\",\n      \"aQute.bnd.result\",\n      \"aQute.bnd.signatures\",\n      \"aQute.bnd.stream\",\n      \"aQute.bnd.unmodifiable\",\n      \"aQute.lib.io\",\n      \"aQute.lib.stringrover\",\n      \"aQute.libg.glob\"\n    ],\n    \"biz.aQute.bnd:biz.aQute.bndlib\": [\n      \"aQute.bnd.annotation\",\n      \"aQute.bnd.annotation.baseline\",\n      \"aQute.bnd.annotation.component\",\n      \"aQute.bnd.annotation.headers\",\n      \"aQute.bnd.annotation.jpms\",\n      \"aQute.bnd.annotation.licenses\",\n      \"aQute.bnd.annotation.metatype\",\n      \"aQute.bnd.annotation.plugin\",\n      \"aQute.bnd.annotation.service\",\n      \"aQute.bnd.annotation.spi\",\n      \"aQute.bnd.annotation.xml\",\n      \"aQute.bnd.apiguardian.api\",\n      \"aQute.bnd.aspectj.plugin\",\n      \"aQute.bnd.build\",\n      \"aQute.bnd.build.api\",\n      \"aQute.bnd.build.model\",\n      \"aQute.bnd.build.model.clauses\",\n      \"aQute.bnd.build.model.conversions\",\n      \"aQute.bnd.buildtool\",\n      \"aQute.bnd.bundle.annotations\",\n      \"aQute.bnd.cdi\",\n      \"aQute.bnd.classindex\",\n      \"aQute.bnd.compatibility\",\n      \"aQute.bnd.component\",\n      \"aQute.bnd.component.annotations\",\n      \"aQute.bnd.component.error\",\n      \"aQute.bnd.connection.settings\",\n      \"aQute.bnd.differ\",\n      \"aQute.bnd.exporter.executable\",\n      \"aQute.bnd.exporter.runbundles\",\n      \"aQute.bnd.filerepo\",\n      \"aQute.bnd.header\",\n      \"aQute.bnd.help\",\n      \"aQute.bnd.help.instructions\",\n      \"aQute.bnd.http\",\n      \"aQute.bnd.junit\",\n      \"aQute.bnd.make\",\n      \"aQute.bnd.make.calltree\",\n      \"aQute.bnd.make.component\",\n      \"aQute.bnd.make.coverage\",\n      \"aQute.bnd.make.metatype\",\n      \"aQute.bnd.maven\",\n      \"aQute.bnd.maven.support\",\n      \"aQute.bnd.metatype\",\n      \"aQute.bnd.metatype.annotations\",\n      \"aQute.bnd.obr\",\n      \"aQute.bnd.osgi\",\n      \"aQute.bnd.osgi.eclipse\",\n      \"aQute.bnd.osgi.repository\",\n      \"aQute.bnd.osgi.resource\",\n      \"aQute.bnd.plugin.ant\",\n      \"aQute.bnd.plugin.eclipse\",\n      \"aQute.bnd.plugin.git\",\n      \"aQute.bnd.plugin.gradle\",\n      \"aQute.bnd.plugin.jpms\",\n      \"aQute.bnd.plugin.maven\",\n      \"aQute.bnd.plugin.spi\",\n      \"aQute.bnd.print\",\n      \"aQute.bnd.properties\",\n      \"aQute.bnd.remoteworkspace.client\",\n      \"aQute.bnd.remoteworkspace.server\",\n      \"aQute.bnd.resource.repository\",\n      \"aQute.bnd.service\",\n      \"aQute.bnd.service.action\",\n      \"aQute.bnd.service.classparser\",\n      \"aQute.bnd.service.clipboard\",\n      \"aQute.bnd.service.diff\",\n      \"aQute.bnd.service.export\",\n      \"aQute.bnd.service.extension\",\n      \"aQute.bnd.service.externalplugin\",\n      \"aQute.bnd.service.generate\",\n      \"aQute.bnd.service.library\",\n      \"aQute.bnd.service.lifecycle\",\n      \"aQute.bnd.service.maven\",\n      \"aQute.bnd.service.message\",\n      \"aQute.bnd.service.progress\",\n      \"aQute.bnd.service.release\",\n      \"aQute.bnd.service.remotelaunch\",\n      \"aQute.bnd.service.remoteworkspace\",\n      \"aQute.bnd.service.reporter\",\n      \"aQute.bnd.service.repository\",\n      \"aQute.bnd.service.resolve.hook\",\n      \"aQute.bnd.service.specifications\",\n      \"aQute.bnd.service.url\",\n      \"aQute.bnd.service.verifier\",\n      \"aQute.bnd.signing\",\n      \"aQute.bnd.url\",\n      \"aQute.bnd.util.dto\",\n      \"aQute.bnd.util.home\",\n      \"aQute.bnd.util.repository\",\n      \"aQute.bnd.version\",\n      \"aQute.bnd.version.maven\",\n      \"aQute.bnd.xmlattribute\",\n      \"aQute.lib.aspects\",\n      \"aQute.lib.base64\",\n      \"aQute.lib.collections\",\n      \"aQute.lib.concurrent.serial\",\n      \"aQute.lib.concurrentinit\",\n      \"aQute.lib.converter\",\n      \"aQute.lib.date\",\n      \"aQute.lib.deployer\",\n      \"aQute.lib.fileset\",\n      \"aQute.lib.filter\",\n      \"aQute.lib.formatter\",\n      \"aQute.lib.hex\",\n      \"aQute.lib.hierarchy\",\n      \"aQute.lib.io\",\n      \"aQute.lib.json\",\n      \"aQute.lib.link\",\n      \"aQute.lib.manifest\",\n      \"aQute.lib.mavenpasswordobfuscator\",\n      \"aQute.lib.persistentmap\",\n      \"aQute.lib.redirect\",\n      \"aQute.lib.settings\",\n      \"aQute.lib.specinterface\",\n      \"aQute.lib.spring\",\n      \"aQute.lib.stringrover\",\n      \"aQute.lib.strings\",\n      \"aQute.lib.tag\",\n      \"aQute.lib.utf8properties\",\n      \"aQute.lib.watcher\",\n      \"aQute.lib.xml\",\n      \"aQute.lib.xpath\",\n      \"aQute.lib.zip\",\n      \"aQute.libg.command\",\n      \"aQute.libg.cryptography\",\n      \"aQute.libg.filelock\",\n      \"aQute.libg.generics\",\n      \"aQute.libg.glob\",\n      \"aQute.libg.gzip\",\n      \"aQute.libg.ints\",\n      \"aQute.libg.map\",\n      \"aQute.libg.qtokens\",\n      \"aQute.libg.reporter\",\n      \"aQute.libg.reporter.slf4j\",\n      \"aQute.libg.sed\",\n      \"aQute.libg.tuple\",\n      \"aQute.libg.uri\",\n      \"aQute.service.reporter\"\n    ],\n    \"com.google.auto.value:auto-value-annotations\": [\n      \"com.google.auto.value\",\n      \"com.google.auto.value.extension.memoized\",\n      \"com.google.auto.value.extension.serializable\",\n      \"com.google.auto.value.extension.toprettystring\"\n    ],\n    \"com.google.caliper:caliper\": [\n      \"com.google.caliper.runner\",\n      \"com.google.caliper.runner.instrument\",\n      \"com.google.caliper.runner.resultprocessor\"\n    ],\n    \"com.google.caliper:caliper-api\": [\n      \"com.google.caliper\",\n      \"com.google.caliper.api\",\n      \"com.google.caliper.model\"\n    ],\n    \"com.google.caliper:caliper-core\": [\n      \"com.google.caliper.bridge\",\n      \"com.google.caliper.core\",\n      \"com.google.caliper.memory\"\n    ],\n    \"com.google.caliper:caliper-runner\": [\n      \"com.google.caliper.runner\",\n      \"com.google.caliper.runner.config\",\n      \"com.google.caliper.runner.experiment\",\n      \"com.google.caliper.runner.instrument\",\n      \"com.google.caliper.runner.options\",\n      \"com.google.caliper.runner.resultprocessor\",\n      \"com.google.caliper.runner.server\",\n      \"com.google.caliper.runner.target\",\n      \"com.google.caliper.runner.worker\",\n      \"com.google.caliper.runner.worker.dryrun\",\n      \"com.google.caliper.runner.worker.targetinfo\",\n      \"com.google.caliper.runner.worker.trial\"\n    ],\n    \"com.google.caliper:caliper-util\": [\n      \"com.google.caliper.json\",\n      \"com.google.caliper.util\"\n    ],\n    \"com.google.caliper:caliper-worker\": [\n      \"com.google.caliper.worker\",\n      \"com.google.caliper.worker.connection\",\n      \"com.google.caliper.worker.handler\",\n      \"com.google.caliper.worker.instrument\"\n    ],\n    \"com.google.caliper:caliper-worker-jvm\": [\"com.google.caliper.worker\"],\n    \"com.google.code.findbugs:jsr305\": [\n      \"javax.annotation\",\n      \"javax.annotation.concurrent\",\n      \"javax.annotation.meta\"\n    ],\n    \"com.google.code.gson:gson\": [\n      \"com.google.gson\",\n      \"com.google.gson.annotations\",\n      \"com.google.gson.internal\",\n      \"com.google.gson.internal.bind\",\n      \"com.google.gson.internal.bind.util\",\n      \"com.google.gson.internal.reflect\",\n      \"com.google.gson.internal.sql\",\n      \"com.google.gson.reflect\",\n      \"com.google.gson.stream\"\n    ],\n    \"com.google.code.java-allocation-instrumenter:java-allocation-instrumenter\": [\n      \"com.google.monitoring.runtime.instrumentation\",\n      \"com.google.monitoring.runtime.instrumentation.asm\",\n      \"com.google.monitoring.runtime.instrumentation.asm.commons\",\n      \"com.google.monitoring.runtime.instrumentation.asm.signature\",\n      \"com.google.monitoring.runtime.instrumentation.asm.tree\",\n      \"com.google.monitoring.runtime.instrumentation.asm.tree.analysis\",\n      \"com.google.monitoring.runtime.instrumentation.asm.util\",\n      \"com.google.monitoring.runtime.instrumentation.checker.nullness.compatqual\",\n      \"com.google.monitoring.runtime.instrumentation.common.annotations\",\n      \"com.google.monitoring.runtime.instrumentation.common.base\",\n      \"com.google.monitoring.runtime.instrumentation.common.base.internal\",\n      \"com.google.monitoring.runtime.instrumentation.common.cache\",\n      \"com.google.monitoring.runtime.instrumentation.common.collect\",\n      \"com.google.monitoring.runtime.instrumentation.common.escape\",\n      \"com.google.monitoring.runtime.instrumentation.common.eventbus\",\n      \"com.google.monitoring.runtime.instrumentation.common.graph\",\n      \"com.google.monitoring.runtime.instrumentation.common.hash\",\n      \"com.google.monitoring.runtime.instrumentation.common.html\",\n      \"com.google.monitoring.runtime.instrumentation.common.io\",\n      \"com.google.monitoring.runtime.instrumentation.common.math\",\n      \"com.google.monitoring.runtime.instrumentation.common.net\",\n      \"com.google.monitoring.runtime.instrumentation.common.primitives\",\n      \"com.google.monitoring.runtime.instrumentation.common.reflect\",\n      \"com.google.monitoring.runtime.instrumentation.common.util.concurrent\",\n      \"com.google.monitoring.runtime.instrumentation.common.xml\",\n      \"com.google.monitoring.runtime.instrumentation.errorprone.annotations\",\n      \"com.google.monitoring.runtime.instrumentation.errorprone.annotations.concurrent\",\n      \"com.google.monitoring.runtime.instrumentation.j2objc.annotations\",\n      \"com.google.thirdparty.publicsuffix\"\n    ],\n    \"com.google.dagger:dagger\": [\n      \"dagger\",\n      \"dagger.internal\",\n      \"dagger.multibindings\"\n    ],\n    \"com.google.dagger:dagger-producers\": [\n      \"dagger.producers\",\n      \"dagger.producers.internal\",\n      \"dagger.producers.monitoring\",\n      \"dagger.producers.monitoring.internal\"\n    ],\n    \"com.google.errorprone:error_prone_annotations\": [\n      \"com.google.errorprone.annotations\",\n      \"com.google.errorprone.annotations.concurrent\"\n    ],\n    \"com.google.guava:failureaccess\": [\n      \"com.google.common.util.concurrent.internal\"\n    ],\n    \"com.google.guava:guava\": [\n      \"com.google.common.annotations\",\n      \"com.google.common.base\",\n      \"com.google.common.base.internal\",\n      \"com.google.common.cache\",\n      \"com.google.common.collect\",\n      \"com.google.common.escape\",\n      \"com.google.common.eventbus\",\n      \"com.google.common.graph\",\n      \"com.google.common.hash\",\n      \"com.google.common.html\",\n      \"com.google.common.io\",\n      \"com.google.common.math\",\n      \"com.google.common.net\",\n      \"com.google.common.primitives\",\n      \"com.google.common.reflect\",\n      \"com.google.common.util.concurrent\",\n      \"com.google.common.xml\",\n      \"com.google.thirdparty.publicsuffix\"\n    ],\n    \"com.google.guava:guava-testlib\": [\n      \"com.google.common.collect.testing\",\n      \"com.google.common.collect.testing.features\",\n      \"com.google.common.collect.testing.google\",\n      \"com.google.common.collect.testing.suites\",\n      \"com.google.common.collect.testing.testers\",\n      \"com.google.common.escape.testing\",\n      \"com.google.common.testing\",\n      \"com.google.common.util.concurrent.testing\"\n    ],\n    \"com.google.j2objc:j2objc-annotations\": [\"com.google.j2objc.annotations\"],\n    \"com.google.testparameterinjector:test-parameter-injector\": [\n      \"com.google.testing.junit.testparameterinjector\"\n    ],\n    \"com.google.truth:truth\": [\"com.google.common.truth\"],\n    \"com.squareup.okhttp:okhttp\": [\n      \"com.squareup.okhttp\",\n      \"com.squareup.okhttp.internal\",\n      \"com.squareup.okhttp.internal.framed\",\n      \"com.squareup.okhttp.internal.http\",\n      \"com.squareup.okhttp.internal.io\",\n      \"com.squareup.okhttp.internal.tls\"\n    ],\n    \"com.squareup.okio:okio\": [\"okio\"],\n    \"com.sun.jersey:jersey-client\": [\n      \"com.sun.jersey.api.client\",\n      \"com.sun.jersey.api.client.async\",\n      \"com.sun.jersey.api.client.config\",\n      \"com.sun.jersey.api.client.filter\",\n      \"com.sun.jersey.client.impl\",\n      \"com.sun.jersey.client.impl.async\",\n      \"com.sun.jersey.client.proxy\",\n      \"com.sun.jersey.client.urlconnection\",\n      \"com.sun.ws.rs.ext\"\n    ],\n    \"com.sun.jersey:jersey-core\": [\n      \"com.sun.jersey.api.provider.jaxb\",\n      \"com.sun.jersey.api.representation\",\n      \"com.sun.jersey.api.uri\",\n      \"com.sun.jersey.core.header\",\n      \"com.sun.jersey.core.header.reader\",\n      \"com.sun.jersey.core.impl.provider.entity\",\n      \"com.sun.jersey.core.impl.provider.header\",\n      \"com.sun.jersey.core.impl.provider.xml\",\n      \"com.sun.jersey.core.osgi\",\n      \"com.sun.jersey.core.provider\",\n      \"com.sun.jersey.core.provider.jaxb\",\n      \"com.sun.jersey.core.reflection\",\n      \"com.sun.jersey.core.spi.component\",\n      \"com.sun.jersey.core.spi.component.ioc\",\n      \"com.sun.jersey.core.spi.factory\",\n      \"com.sun.jersey.core.spi.scanning\",\n      \"com.sun.jersey.core.spi.scanning.uri\",\n      \"com.sun.jersey.core.util\",\n      \"com.sun.jersey.impl\",\n      \"com.sun.jersey.localization\",\n      \"com.sun.jersey.spi\",\n      \"com.sun.jersey.spi.inject\",\n      \"com.sun.jersey.spi.service\"\n    ],\n    \"info.picocli:picocli\": [\"picocli\"],\n    \"javax.annotation:javax.annotation-api\": [\n      \"javax.annotation\",\n      \"javax.annotation.security\",\n      \"javax.annotation.sql\"\n    ],\n    \"javax.inject:javax.inject\": [\"javax.inject\"],\n    \"javax.ws.rs:jsr311-api\": [\n      \"javax.ws.rs\",\n      \"javax.ws.rs.core\",\n      \"javax.ws.rs.ext\"\n    ],\n    \"joda-time:joda-time\": [\n      \"org.joda.time\",\n      \"org.joda.time.base\",\n      \"org.joda.time.chrono\",\n      \"org.joda.time.convert\",\n      \"org.joda.time.field\",\n      \"org.joda.time.format\",\n      \"org.joda.time.tz\"\n    ],\n    \"junit:junit\": [\n      \"junit.extensions\",\n      \"junit.framework\",\n      \"junit.runner\",\n      \"junit.textui\",\n      \"org.junit\",\n      \"org.junit.experimental\",\n      \"org.junit.experimental.categories\",\n      \"org.junit.experimental.max\",\n      \"org.junit.experimental.results\",\n      \"org.junit.experimental.runners\",\n      \"org.junit.experimental.theories\",\n      \"org.junit.experimental.theories.internal\",\n      \"org.junit.experimental.theories.suppliers\",\n      \"org.junit.function\",\n      \"org.junit.internal\",\n      \"org.junit.internal.builders\",\n      \"org.junit.internal.management\",\n      \"org.junit.internal.matchers\",\n      \"org.junit.internal.requests\",\n      \"org.junit.internal.runners\",\n      \"org.junit.internal.runners.model\",\n      \"org.junit.internal.runners.rules\",\n      \"org.junit.internal.runners.statements\",\n      \"org.junit.matchers\",\n      \"org.junit.rules\",\n      \"org.junit.runner\",\n      \"org.junit.runner.manipulation\",\n      \"org.junit.runner.notification\",\n      \"org.junit.runners\",\n      \"org.junit.runners.model\",\n      \"org.junit.runners.parameterized\",\n      \"org.junit.validator\"\n    ],\n    \"net.bytebuddy:byte-buddy\": [\n      \"net.bytebuddy\",\n      \"net.bytebuddy.agent.builder\",\n      \"net.bytebuddy.asm\",\n      \"net.bytebuddy.build\",\n      \"net.bytebuddy.description\",\n      \"net.bytebuddy.description.annotation\",\n      \"net.bytebuddy.description.enumeration\",\n      \"net.bytebuddy.description.field\",\n      \"net.bytebuddy.description.method\",\n      \"net.bytebuddy.description.modifier\",\n      \"net.bytebuddy.description.type\",\n      \"net.bytebuddy.dynamic\",\n      \"net.bytebuddy.dynamic.loading\",\n      \"net.bytebuddy.dynamic.scaffold\",\n      \"net.bytebuddy.dynamic.scaffold.inline\",\n      \"net.bytebuddy.dynamic.scaffold.subclass\",\n      \"net.bytebuddy.implementation\",\n      \"net.bytebuddy.implementation.attribute\",\n      \"net.bytebuddy.implementation.auxiliary\",\n      \"net.bytebuddy.implementation.bind\",\n      \"net.bytebuddy.implementation.bind.annotation\",\n      \"net.bytebuddy.implementation.bytecode\",\n      \"net.bytebuddy.implementation.bytecode.assign\",\n      \"net.bytebuddy.implementation.bytecode.assign.primitive\",\n      \"net.bytebuddy.implementation.bytecode.assign.reference\",\n      \"net.bytebuddy.implementation.bytecode.collection\",\n      \"net.bytebuddy.implementation.bytecode.constant\",\n      \"net.bytebuddy.implementation.bytecode.member\",\n      \"net.bytebuddy.jar.asm\",\n      \"net.bytebuddy.jar.asm.commons\",\n      \"net.bytebuddy.jar.asm.signature\",\n      \"net.bytebuddy.matcher\",\n      \"net.bytebuddy.pool\",\n      \"net.bytebuddy.utility\",\n      \"net.bytebuddy.utility.dispatcher\",\n      \"net.bytebuddy.utility.nullability\",\n      \"net.bytebuddy.utility.privilege\",\n      \"net.bytebuddy.utility.visitor\"\n    ],\n    \"net.bytebuddy:byte-buddy-agent\": [\n      \"net.bytebuddy.agent\",\n      \"net.bytebuddy.agent.utility.nullability\"\n    ],\n    \"org.checkerframework:checker-compat-qual\": [\n      \"org.checkerframework.checker.nullness.compatqual\"\n    ],\n    \"org.checkerframework:checker-qual\": [\n      \"org.checkerframework.checker.builder.qual\",\n      \"org.checkerframework.checker.calledmethods.qual\",\n      \"org.checkerframework.checker.compilermsgs.qual\",\n      \"org.checkerframework.checker.fenum.qual\",\n      \"org.checkerframework.checker.formatter.qual\",\n      \"org.checkerframework.checker.guieffect.qual\",\n      \"org.checkerframework.checker.i18n.qual\",\n      \"org.checkerframework.checker.i18nformatter.qual\",\n      \"org.checkerframework.checker.index.qual\",\n      \"org.checkerframework.checker.initialization.qual\",\n      \"org.checkerframework.checker.interning.qual\",\n      \"org.checkerframework.checker.lock.qual\",\n      \"org.checkerframework.checker.mustcall.qual\",\n      \"org.checkerframework.checker.nullness.qual\",\n      \"org.checkerframework.checker.optional.qual\",\n      \"org.checkerframework.checker.propkey.qual\",\n      \"org.checkerframework.checker.regex.qual\",\n      \"org.checkerframework.checker.signature.qual\",\n      \"org.checkerframework.checker.signedness.qual\",\n      \"org.checkerframework.checker.tainting.qual\",\n      \"org.checkerframework.checker.units.qual\",\n      \"org.checkerframework.common.aliasing.qual\",\n      \"org.checkerframework.common.initializedfields.qual\",\n      \"org.checkerframework.common.reflection.qual\",\n      \"org.checkerframework.common.returnsreceiver.qual\",\n      \"org.checkerframework.common.subtyping.qual\",\n      \"org.checkerframework.common.util.report.qual\",\n      \"org.checkerframework.common.value.qual\",\n      \"org.checkerframework.dataflow.qual\",\n      \"org.checkerframework.framework.qual\"\n    ],\n    \"org.hamcrest:hamcrest-core\": [\n      \"org.hamcrest\",\n      \"org.hamcrest.core\",\n      \"org.hamcrest.internal\"\n    ],\n    \"org.mockito:mockito-core\": [\n      \"org.mockito\",\n      \"org.mockito.codegen\",\n      \"org.mockito.configuration\",\n      \"org.mockito.creation.instance\",\n      \"org.mockito.exceptions.base\",\n      \"org.mockito.exceptions.misusing\",\n      \"org.mockito.exceptions.stacktrace\",\n      \"org.mockito.exceptions.verification\",\n      \"org.mockito.exceptions.verification.junit\",\n      \"org.mockito.exceptions.verification.opentest4j\",\n      \"org.mockito.hamcrest\",\n      \"org.mockito.internal\",\n      \"org.mockito.internal.configuration\",\n      \"org.mockito.internal.configuration.injection\",\n      \"org.mockito.internal.configuration.injection.filter\",\n      \"org.mockito.internal.configuration.injection.scanner\",\n      \"org.mockito.internal.configuration.plugins\",\n      \"org.mockito.internal.creation\",\n      \"org.mockito.internal.creation.bytebuddy\",\n      \"org.mockito.internal.creation.instance\",\n      \"org.mockito.internal.creation.proxy\",\n      \"org.mockito.internal.creation.settings\",\n      \"org.mockito.internal.creation.util\",\n      \"org.mockito.internal.debugging\",\n      \"org.mockito.internal.exceptions\",\n      \"org.mockito.internal.exceptions.stacktrace\",\n      \"org.mockito.internal.exceptions.util\",\n      \"org.mockito.internal.framework\",\n      \"org.mockito.internal.hamcrest\",\n      \"org.mockito.internal.handler\",\n      \"org.mockito.internal.invocation\",\n      \"org.mockito.internal.invocation.finder\",\n      \"org.mockito.internal.invocation.mockref\",\n      \"org.mockito.internal.junit\",\n      \"org.mockito.internal.listeners\",\n      \"org.mockito.internal.matchers\",\n      \"org.mockito.internal.matchers.apachecommons\",\n      \"org.mockito.internal.matchers.text\",\n      \"org.mockito.internal.progress\",\n      \"org.mockito.internal.reporting\",\n      \"org.mockito.internal.runners\",\n      \"org.mockito.internal.runners.util\",\n      \"org.mockito.internal.session\",\n      \"org.mockito.internal.stubbing\",\n      \"org.mockito.internal.stubbing.answers\",\n      \"org.mockito.internal.stubbing.defaultanswers\",\n      \"org.mockito.internal.util\",\n      \"org.mockito.internal.util.collections\",\n      \"org.mockito.internal.util.concurrent\",\n      \"org.mockito.internal.util.io\",\n      \"org.mockito.internal.util.reflection\",\n      \"org.mockito.internal.verification\",\n      \"org.mockito.internal.verification.api\",\n      \"org.mockito.internal.verification.argumentmatching\",\n      \"org.mockito.internal.verification.checkers\",\n      \"org.mockito.invocation\",\n      \"org.mockito.junit\",\n      \"org.mockito.listeners\",\n      \"org.mockito.mock\",\n      \"org.mockito.plugins\",\n      \"org.mockito.quality\",\n      \"org.mockito.session\",\n      \"org.mockito.stubbing\",\n      \"org.mockito.verification\"\n    ],\n    \"org.objenesis:objenesis\": [\n      \"org.objenesis\",\n      \"org.objenesis.instantiator\",\n      \"org.objenesis.instantiator.android\",\n      \"org.objenesis.instantiator.annotations\",\n      \"org.objenesis.instantiator.basic\",\n      \"org.objenesis.instantiator.gcj\",\n      \"org.objenesis.instantiator.perc\",\n      \"org.objenesis.instantiator.sun\",\n      \"org.objenesis.instantiator.util\",\n      \"org.objenesis.strategy\"\n    ],\n    \"org.osgi:org.osgi.dto\": [\"org.osgi.dto\"],\n    \"org.osgi:org.osgi.framework\": [\n      \"org.osgi.framework\",\n      \"org.osgi.framework.dto\",\n      \"org.osgi.framework.hooks.bundle\",\n      \"org.osgi.framework.hooks.resolver\",\n      \"org.osgi.framework.hooks.service\",\n      \"org.osgi.framework.hooks.weaving\",\n      \"org.osgi.framework.launch\",\n      \"org.osgi.framework.namespace\",\n      \"org.osgi.framework.startlevel\",\n      \"org.osgi.framework.startlevel.dto\",\n      \"org.osgi.framework.wiring\",\n      \"org.osgi.framework.wiring.dto\"\n    ],\n    \"org.osgi:org.osgi.resource\": [\n      \"org.osgi.resource\",\n      \"org.osgi.resource.dto\"\n    ],\n    \"org.osgi:org.osgi.service.log\": [\"org.osgi.service.log\"],\n    \"org.osgi:org.osgi.service.repository\": [\"org.osgi.service.repository\"],\n    \"org.osgi:org.osgi.util.function\": [\"org.osgi.util.function\"],\n    \"org.osgi:org.osgi.util.promise\": [\"org.osgi.util.promise\"],\n    \"org.osgi:org.osgi.util.tracker\": [\"org.osgi.util.tracker\"],\n    \"org.osgi:osgi.annotation\": [\n      \"org.osgi.annotation.bundle\",\n      \"org.osgi.annotation.versioning\"\n    ],\n    \"org.ow2.asm:asm\": [\"org.objectweb.asm\", \"org.objectweb.asm.signature\"],\n    \"org.ow2.asm:asm-analysis\": [\"org.objectweb.asm.tree.analysis\"],\n    \"org.ow2.asm:asm-commons\": [\"org.objectweb.asm.commons\"],\n    \"org.ow2.asm:asm-tree\": [\"org.objectweb.asm.tree\"],\n    \"org.ow2.asm:asm-util\": [\"org.objectweb.asm.util\"],\n    \"org.slf4j:slf4j-api\": [\n      \"org.slf4j\",\n      \"org.slf4j.event\",\n      \"org.slf4j.helpers\",\n      \"org.slf4j.spi\"\n    ],\n    \"org.yaml:snakeyaml\": [\n      \"org.yaml.snakeyaml\",\n      \"org.yaml.snakeyaml.comments\",\n      \"org.yaml.snakeyaml.composer\",\n      \"org.yaml.snakeyaml.constructor\",\n      \"org.yaml.snakeyaml.emitter\",\n      \"org.yaml.snakeyaml.env\",\n      \"org.yaml.snakeyaml.error\",\n      \"org.yaml.snakeyaml.events\",\n      \"org.yaml.snakeyaml.extensions.compactnotation\",\n      \"org.yaml.snakeyaml.external.biz.base64Coder\",\n      \"org.yaml.snakeyaml.external.com.google.gdata.util.common.base\",\n      \"org.yaml.snakeyaml.inspector\",\n      \"org.yaml.snakeyaml.internal\",\n      \"org.yaml.snakeyaml.introspector\",\n      \"org.yaml.snakeyaml.nodes\",\n      \"org.yaml.snakeyaml.parser\",\n      \"org.yaml.snakeyaml.reader\",\n      \"org.yaml.snakeyaml.representer\",\n      \"org.yaml.snakeyaml.resolver\",\n      \"org.yaml.snakeyaml.scanner\",\n      \"org.yaml.snakeyaml.serializer\",\n      \"org.yaml.snakeyaml.tokens\",\n      \"org.yaml.snakeyaml.util\"\n    ]\n  },\n  \"repositories\": {\n    \"https://repo1.maven.org/maven2/\": [\n      \"biz.aQute.bnd:biz.aQute.bnd.util\",\n      \"biz.aQute.bnd:biz.aQute.bndlib\",\n      \"com.google.auto.value:auto-value-annotations\",\n      \"com.google.caliper:caliper\",\n      \"com.google.caliper:caliper-api\",\n      \"com.google.caliper:caliper-core\",\n      \"com.google.caliper:caliper-runner\",\n      \"com.google.caliper:caliper-util\",\n      \"com.google.caliper:caliper-worker\",\n      \"com.google.caliper:caliper-worker-jvm\",\n      \"com.google.code.findbugs:jsr305\",\n      \"com.google.code.gson:gson\",\n      \"com.google.code.java-allocation-instrumenter:java-allocation-instrumenter\",\n      \"com.google.dagger:dagger\",\n      \"com.google.dagger:dagger-producers\",\n      \"com.google.errorprone:error_prone_annotations\",\n      \"com.google.guava:failureaccess\",\n      \"com.google.guava:guava\",\n      \"com.google.guava:guava-testlib\",\n      \"com.google.guava:listenablefuture\",\n      \"com.google.j2objc:j2objc-annotations\",\n      \"com.google.testparameterinjector:test-parameter-injector\",\n      \"com.google.truth:truth\",\n      \"com.squareup.okhttp:okhttp\",\n      \"com.squareup.okio:okio\",\n      \"com.sun.jersey:jersey-client\",\n      \"com.sun.jersey:jersey-core\",\n      \"info.picocli:picocli\",\n      \"javax.annotation:javax.annotation-api\",\n      \"javax.inject:javax.inject\",\n      \"javax.ws.rs:jsr311-api\",\n      \"joda-time:joda-time\",\n      \"junit:junit\",\n      \"net.bytebuddy:byte-buddy\",\n      \"net.bytebuddy:byte-buddy-agent\",\n      \"org.checkerframework:checker-compat-qual\",\n      \"org.checkerframework:checker-qual\",\n      \"org.hamcrest:hamcrest-core\",\n      \"org.mockito:mockito-core\",\n      \"org.objenesis:objenesis\",\n      \"org.osgi:org.osgi.dto\",\n      \"org.osgi:org.osgi.framework\",\n      \"org.osgi:org.osgi.resource\",\n      \"org.osgi:org.osgi.service.log\",\n      \"org.osgi:org.osgi.service.repository\",\n      \"org.osgi:org.osgi.util.function\",\n      \"org.osgi:org.osgi.util.promise\",\n      \"org.osgi:org.osgi.util.tracker\",\n      \"org.osgi:osgi.annotation\",\n      \"org.ow2.asm:asm\",\n      \"org.ow2.asm:asm-analysis\",\n      \"org.ow2.asm:asm-commons\",\n      \"org.ow2.asm:asm-tree\",\n      \"org.ow2.asm:asm-util\",\n      \"org.slf4j:slf4j-api\",\n      \"org.yaml:snakeyaml\"\n    ],\n    \"https://repo.maven.apache.org/maven2/\": [\n      \"biz.aQute.bnd:biz.aQute.bnd.util\",\n      \"biz.aQute.bnd:biz.aQute.bndlib\",\n      \"com.google.auto.value:auto-value-annotations\",\n      \"com.google.caliper:caliper\",\n      \"com.google.caliper:caliper-api\",\n      \"com.google.caliper:caliper-core\",\n      \"com.google.caliper:caliper-runner\",\n      \"com.google.caliper:caliper-util\",\n      \"com.google.caliper:caliper-worker\",\n      \"com.google.caliper:caliper-worker-jvm\",\n      \"com.google.code.findbugs:jsr305\",\n      \"com.google.code.gson:gson\",\n      \"com.google.code.java-allocation-instrumenter:java-allocation-instrumenter\",\n      \"com.google.dagger:dagger\",\n      \"com.google.dagger:dagger-producers\",\n      \"com.google.errorprone:error_prone_annotations\",\n      \"com.google.guava:failureaccess\",\n      \"com.google.guava:guava\",\n      \"com.google.guava:guava-testlib\",\n      \"com.google.guava:listenablefuture\",\n      \"com.google.j2objc:j2objc-annotations\",\n      \"com.google.testparameterinjector:test-parameter-injector\",\n      \"com.google.truth:truth\",\n      \"com.squareup.okhttp:okhttp\",\n      \"com.squareup.okio:okio\",\n      \"com.sun.jersey:jersey-client\",\n      \"com.sun.jersey:jersey-core\",\n      \"info.picocli:picocli\",\n      \"javax.annotation:javax.annotation-api\",\n      \"javax.inject:javax.inject\",\n      \"javax.ws.rs:jsr311-api\",\n      \"joda-time:joda-time\",\n      \"junit:junit\",\n      \"net.bytebuddy:byte-buddy\",\n      \"net.bytebuddy:byte-buddy-agent\",\n      \"org.checkerframework:checker-compat-qual\",\n      \"org.checkerframework:checker-qual\",\n      \"org.hamcrest:hamcrest-core\",\n      \"org.mockito:mockito-core\",\n      \"org.objenesis:objenesis\",\n      \"org.osgi:org.osgi.dto\",\n      \"org.osgi:org.osgi.framework\",\n      \"org.osgi:org.osgi.resource\",\n      \"org.osgi:org.osgi.service.log\",\n      \"org.osgi:org.osgi.service.repository\",\n      \"org.osgi:org.osgi.util.function\",\n      \"org.osgi:org.osgi.util.promise\",\n      \"org.osgi:org.osgi.util.tracker\",\n      \"org.osgi:osgi.annotation\",\n      \"org.ow2.asm:asm\",\n      \"org.ow2.asm:asm-analysis\",\n      \"org.ow2.asm:asm-commons\",\n      \"org.ow2.asm:asm-tree\",\n      \"org.ow2.asm:asm-util\",\n      \"org.slf4j:slf4j-api\",\n      \"org.yaml:snakeyaml\"\n    ]\n  },\n  \"services\": {\n    \"com.sun.jersey:jersey-core\": {\n      \"com.sun.jersey.spi.HeaderDelegateProvider\": [\n        \"com.sun.jersey.core.impl.provider.header.CacheControlProvider\",\n        \"com.sun.jersey.core.impl.provider.header.CookieProvider\",\n        \"com.sun.jersey.core.impl.provider.header.DateProvider\",\n        \"com.sun.jersey.core.impl.provider.header.EntityTagProvider\",\n        \"com.sun.jersey.core.impl.provider.header.LocaleProvider\",\n        \"com.sun.jersey.core.impl.provider.header.MediaTypeProvider\",\n        \"com.sun.jersey.core.impl.provider.header.NewCookieProvider\",\n        \"com.sun.jersey.core.impl.provider.header.StringProvider\",\n        \"com.sun.jersey.core.impl.provider.header.URIProvider\"\n      ],\n      \"com.sun.jersey.spi.inject.InjectableProvider\": [\n        \"com.sun.jersey.core.impl.provider.xml.DocumentBuilderFactoryProvider\",\n        \"com.sun.jersey.core.impl.provider.xml.SAXParserContextProvider\",\n        \"com.sun.jersey.core.impl.provider.xml.TransformerFactoryProvider\",\n        \"com.sun.jersey.core.impl.provider.xml.XMLStreamReaderContextProvider\"\n      ],\n      \"javax.ws.rs.ext.MessageBodyReader\": [\n        \"com.sun.jersey.core.impl.provider.entity.ByteArrayProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.DataSourceProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.DocumentProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.EntityHolderReader\",\n        \"com.sun.jersey.core.impl.provider.entity.FileProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.FormMultivaluedMapProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.FormProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.InputStreamProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.MimeMultipartProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.ReaderProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.RenderedImageProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.SourceProvider$DOMSourceReader\",\n        \"com.sun.jersey.core.impl.provider.entity.SourceProvider$SAXSourceReader\",\n        \"com.sun.jersey.core.impl.provider.entity.SourceProvider$StreamSourceReader\",\n        \"com.sun.jersey.core.impl.provider.entity.StringProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLJAXBElementProvider$App\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLJAXBElementProvider$General\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLJAXBElementProvider$Text\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLListElementProvider$App\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLListElementProvider$General\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLListElementProvider$Text\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLRootElementProvider$App\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLRootElementProvider$General\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLRootElementProvider$Text\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLRootObjectProvider$App\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLRootObjectProvider$General\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLRootObjectProvider$Text\"\n      ],\n      \"javax.ws.rs.ext.MessageBodyWriter\": [\n        \"com.sun.jersey.core.impl.provider.entity.ByteArrayProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.DataSourceProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.DocumentProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.FileProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.FormMultivaluedMapProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.FormProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.InputStreamProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.MimeMultipartProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.ReaderProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.RenderedImageProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.SourceProvider$SourceWriter\",\n        \"com.sun.jersey.core.impl.provider.entity.StreamingOutputProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.StringProvider\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLJAXBElementProvider$App\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLJAXBElementProvider$General\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLJAXBElementProvider$Text\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLListElementProvider$App\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLListElementProvider$General\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLListElementProvider$Text\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLRootElementProvider$App\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLRootElementProvider$General\",\n        \"com.sun.jersey.core.impl.provider.entity.XMLRootElementProvider$Text\"\n      ]\n    }\n  },\n  \"version\": \"2\"\n}\n"
        },
        {
          "name": "objectivec",
          "type": "tree",
          "content": null
        },
        {
          "name": "php",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "protobuf.bzl",
          "type": "blob",
          "size": 24.95,
          "content": "load(\"@bazel_skylib//lib:versions.bzl\", \"versions\")\nload(\"@rules_cc//cc:defs.bzl\", \"objc_library\")\nload(\"@rules_python//python:defs.bzl\", \"py_library\")\nload(\"//bazel/common:proto_info.bzl\", \"ProtoInfo\")\n\ndef _GetPath(ctx, path):\n    if ctx.label.workspace_root:\n        return ctx.label.workspace_root + \"/\" + path\n    else:\n        return path\n\ndef _IsNewExternal(ctx):\n    # Bazel 0.4.4 and older have genfiles paths that look like:\n    #   bazel-out/local-fastbuild/genfiles/external/repo/foo\n    # After the exec root rearrangement, they look like:\n    #   ../repo/bazel-out/local-fastbuild/genfiles/foo\n    return ctx.label.workspace_root.startswith(\"../\")\n\ndef _GenDir(ctx):\n    if _IsNewExternal(ctx):\n        # We are using the fact that Bazel 0.4.4+ provides repository-relative paths\n        # for ctx.genfiles_dir.\n        return ctx.genfiles_dir.path + (\n            \"/\" + ctx.attr.includes[0] if ctx.attr.includes and ctx.attr.includes[0] else \"\"\n        )\n\n    # This means that we're either in the old version OR the new version in the local repo.\n    # Either way, appending the source path to the genfiles dir works.\n    return ctx.var[\"GENDIR\"] + \"/\" + _SourceDir(ctx)\n\ndef _SourceDir(ctx):\n    if not ctx.attr.includes:\n        return ctx.label.workspace_root\n    if not ctx.attr.includes[0]:\n        return _GetPath(ctx, ctx.label.package)\n    if not ctx.label.package:\n        return _GetPath(ctx, ctx.attr.includes[0])\n    return _GetPath(ctx, ctx.label.package + \"/\" + ctx.attr.includes[0])\n\ndef _ObjcBase(srcs):\n    return [\n        \"\".join([token.capitalize() for token in src[:-len(\".proto\")].split(\"_\")])\n        for src in srcs\n    ]\n\ndef _ObjcHdrs(srcs):\n    return [src + \".pbobjc.h\" for src in _ObjcBase(srcs)]\n\ndef _ObjcSrcs(srcs):\n    return [src + \".pbobjc.m\" for src in _ObjcBase(srcs)]\n\ndef _ObjcOuts(srcs, out_type):\n    if out_type == \"hdrs\":\n        return _ObjcHdrs(srcs)\n    if out_type == \"srcs\":\n        return _ObjcSrcs(srcs)\n    return _ObjcHdrs(srcs) + _ObjcSrcs(srcs)\n\ndef _PyOuts(srcs, use_grpc_plugin = False):\n    ret = [s[:-len(\".proto\")] + \"_pb2.py\" for s in srcs]\n    if use_grpc_plugin:\n        ret += [s[:-len(\".proto\")] + \"_pb2_grpc.py\" for s in srcs]\n    return ret\n\ndef _RubyOuts(srcs):\n    return [s[:-len(\".proto\")] + \"_pb.rb\" for s in srcs]\n\ndef _CsharpOuts(srcs):\n    return [\n        \"\".join([token.capitalize() for token in src[:-len(\".proto\")].split(\"_\")]) + \".cs\"\n        for src in srcs\n    ]\n\nProtoGenInfo = provider(\n    fields = [\"srcs\", \"import_flags\", \"deps\"],\n)\n\ndef _proto_gen_impl(ctx):\n    \"\"\"General implementation for generating protos\"\"\"\n    srcs = ctx.files.srcs\n    langs = ctx.attr.langs or []\n    out_type = ctx.attr.out_type\n    enable_editions = ctx.attr.enable_editions\n    deps = depset(direct = ctx.files.srcs)\n    source_dir = _SourceDir(ctx)\n    gen_dir = _GenDir(ctx).rstrip(\"/\")\n    import_flags = []\n\n    if source_dir:\n        has_sources = any([src.is_source for src in srcs])\n        if has_sources:\n            import_flags += [\"-I\" + source_dir]\n    else:\n        import_flags += [\"-I.\"]\n\n    has_generated = any([not src.is_source for src in srcs])\n    if has_generated:\n        import_flags += [\"-I\" + gen_dir]\n\n    if ctx.attr.includes:\n        for include in ctx.attr.includes:\n            if include == \".\":\n                # This is effectively source_dir, which has already been handled,\n                # and may be generated incorrectly here.\n                continue\n            import_flags += [\"-I\" + _GetPath(ctx, include)]\n\n    import_flags = depset(direct = import_flags)\n\n    for dep in ctx.attr.deps:\n        dep_proto = dep[ProtoGenInfo]\n        if type(dep_proto.import_flags) == \"list\":\n            import_flags = depset(\n                transitive = [import_flags],\n                direct = dep_proto.import_flags,\n            )\n        else:\n            import_flags = depset(\n                transitive = [import_flags, dep_proto.import_flags],\n            )\n        if type(dep_proto.deps) == \"list\":\n            deps = depset(transitive = [deps], direct = dep_proto.deps)\n        else:\n            deps = depset(transitive = [deps, dep_proto.deps])\n\n    if not langs and not ctx.executable.plugin:\n        return [\n            ProtoGenInfo(\n                srcs = srcs,\n                import_flags = import_flags,\n                deps = deps,\n            ),\n        ]\n\n    generated_files = []\n    for src in srcs:\n        args = []\n        if enable_editions:\n            args.append(\"--experimental_editions\")\n\n        in_gen_dir = src.root.path == gen_dir\n        if in_gen_dir:\n            import_flags_real = []\n            for f in import_flags.to_list():\n                path = f.replace(\"-I\", \"\")\n                import_flags_real.append(\"-I$(realpath -s %s)\" % path)\n\n        use_grpc_plugin = (ctx.attr.plugin_language == \"grpc\" and ctx.attr.plugin)\n        path_tpl = \"$(realpath %s)\" if in_gen_dir else \"%s\"\n\n        outs = []\n        for lang in langs:\n            if lang == \"csharp\":\n                outs.extend(_CsharpOuts([src.basename]))\n            elif lang == \"objc\":\n                outs.extend(_ObjcOuts([src.basename], out_type = out_type))\n            elif lang == \"python\":\n                outs.extend(_PyOuts([src.basename], use_grpc_plugin = use_grpc_plugin))\n            elif lang == \"ruby\":\n                outs.extend(_RubyOuts([src.basename]))\n\n            # Otherwise, rely on user-supplied outs.\n            args += [(\"--%s_out=\" + path_tpl) % (lang, gen_dir)]\n\n        if ctx.attr.outs:\n            outs.extend(ctx.attr.outs)\n        outs = [ctx.actions.declare_file(out, sibling = src) for out in outs]\n        generated_files.extend(outs)\n\n        inputs = [src] + deps.to_list()\n        tools = [ctx.executable.protoc]\n        if ctx.executable.plugin:\n            plugin = ctx.executable.plugin\n            lang = ctx.attr.plugin_language\n            if not lang and plugin.basename.startswith(\"protoc-gen-\"):\n                lang = plugin.basename[len(\"protoc-gen-\"):]\n            if not lang:\n                fail(\"cannot infer the target language of plugin\", \"plugin_language\")\n\n            outdir = \".\" if in_gen_dir else gen_dir\n\n            if ctx.attr.plugin_options:\n                outdir = \",\".join(ctx.attr.plugin_options) + \":\" + outdir\n            args += [(\"--plugin=protoc-gen-%s=\" + path_tpl) % (lang, plugin.path)]\n            args += [\"--%s_out=%s\" % (lang, outdir)]\n            tools.append(plugin)\n\n        if not in_gen_dir:\n            ctx.actions.run(\n                inputs = inputs,\n                tools = tools,\n                outputs = outs,\n                arguments = args + import_flags.to_list() + [src.path],\n                executable = ctx.executable.protoc,\n                mnemonic = \"ProtoCompile\",\n                use_default_shell_env = True,\n            )\n        else:\n            for out in outs:\n                orig_command = \" \".join(\n                    [\"$(realpath %s)\" % ctx.executable.protoc.path] + args +\n                    import_flags_real + [src.basename],\n                )\n                command = \";\".join([\n                    'CMD=\"%s\"' % orig_command,\n                    \"cd %s\" % src.dirname,\n                    \"${CMD}\",\n                    \"cd -\",\n                ])\n                generated_out = \"/\".join([gen_dir, out.basename])\n                if generated_out != out.path:\n                    command += \";mv %s %s\" % (generated_out, out.path)\n                ctx.actions.run_shell(\n                    inputs = inputs,\n                    outputs = [out],\n                    command = command,\n                    mnemonic = \"ProtoCompile\",\n                    tools = tools,\n                    use_default_shell_env = True,\n                )\n\n    return [\n        ProtoGenInfo(\n            srcs = srcs,\n            import_flags = import_flags,\n            deps = deps,\n        ),\n        DefaultInfo(files = depset(generated_files)),\n    ]\n\n\"\"\"Generates codes from Protocol Buffers definitions.\n\nThis rule helps you to implement Skylark macros specific to the target\nlanguage. You should prefer more specific `cc_proto_library `,\n`py_proto_library` and others unless you are adding such wrapper macros.\n\nArgs:\n  srcs: Protocol Buffers definition files (.proto) to run the protocol compiler\n    against.\n  deps: a list of dependency labels; must be other proto libraries.\n  enable_editions: if true, sets the --experimental_editions flag.\n  includes: a list of include paths to .proto files.\n  protoc: the label of the protocol compiler to generate the sources.\n  plugin: the label of the protocol compiler plugin to be passed to the protocol\n    compiler.\n  plugin_language: the language of the generated sources\n  plugin_options: a list of options to be passed to the plugin\n  langs: generates sources in addition to the ones from the plugin for each\n    specified language.\n  outs: a list of labels of the expected outputs from the protocol compiler.\n  out_type: only generated a single type of source file for languages that have\n    split sources (e.g. *.h and *.cc in C++)\n\"\"\"\n_proto_gen = rule(\n    attrs = {\n        \"srcs\": attr.label_list(allow_files = True),\n        \"deps\": attr.label_list(providers = [ProtoGenInfo]),\n        \"enable_editions\": attr.bool(),\n        \"includes\": attr.string_list(),\n        \"protoc\": attr.label(\n            cfg = \"exec\",\n            executable = True,\n            allow_single_file = True,\n            mandatory = True,\n        ),\n        \"plugin\": attr.label(\n            cfg = \"exec\",\n            allow_files = True,\n            executable = True,\n        ),\n        \"plugin_language\": attr.string(),\n        \"plugin_options\": attr.string_list(),\n        \"langs\": attr.string_list(),\n        \"outs\": attr.string_list(),\n        \"out_type\": attr.string(\n            default = \"all\",\n        ),\n    },\n    implementation = _proto_gen_impl,\n)\n\ndef _internal_gen_well_known_protos_java_impl(ctx):\n    args = ctx.actions.args()\n\n    deps = [d[ProtoInfo] for d in ctx.attr.deps]\n\n    srcjar = ctx.actions.declare_file(\"{}.srcjar\".format(ctx.attr.name))\n    if ctx.attr.javalite:\n        java_out = \"lite:%s\" % srcjar.path\n    else:\n        java_out = srcjar\n\n    args.add(\"--java_out\", java_out)\n\n    descriptors = depset(\n        transitive = [dep.transitive_descriptor_sets for dep in deps],\n    )\n    args.add_joined(\n        \"--descriptor_set_in\",\n        descriptors,\n        join_with = ctx.configuration.host_path_separator,\n    )\n\n    for dep in deps:\n        if \".\" == dep.proto_source_root:\n            args.add_all([src.path for src in dep.direct_sources])\n        else:\n            source_root = dep.proto_source_root\n            offset = len(source_root) + 1  # + '/'.\n            args.add_all([src.path[offset:] for src in dep.direct_sources])\n\n    ctx.actions.run(\n        executable = ctx.executable._protoc,\n        inputs = descriptors,\n        outputs = [srcjar],\n        arguments = [args],\n        mnemonic = \"ProtoCompile\",\n        use_default_shell_env = True,\n    )\n\n    return [\n        DefaultInfo(\n            files = depset([srcjar]),\n        ),\n    ]\n\ninternal_gen_well_known_protos_java = rule(\n    implementation = _internal_gen_well_known_protos_java_impl,\n    attrs = {\n        \"deps\": attr.label_list(\n            mandatory = True,\n            providers = [ProtoInfo],\n        ),\n        \"javalite\": attr.bool(\n            default = False,\n        ),\n        \"_protoc\": attr.label(\n            executable = True,\n            cfg = \"exec\",\n            default = \"//:protoc\",\n        ),\n    },\n)\n\ndef _internal_gen_kt_protos(ctx):\n    args = ctx.actions.args()\n\n    deps = [d[ProtoInfo] for d in ctx.attr.deps]\n\n    srcjar = ctx.actions.declare_file(\"{}.srcjar\".format(ctx.attr.name))\n    if ctx.attr.lite:\n        out = \"lite:%s\" % srcjar.path\n    else:\n        out = srcjar\n\n    args.add(\"--kotlin_out\", out)\n\n    descriptors = depset(\n        transitive = [dep.transitive_descriptor_sets for dep in deps],\n    )\n    args.add_joined(\n        \"--descriptor_set_in\",\n        descriptors,\n        join_with = ctx.configuration.host_path_separator,\n    )\n\n    for dep in deps:\n        if \".\" == dep.proto_source_root:\n            args.add_all([src.path for src in dep.direct_sources])\n        else:\n            source_root = dep.proto_source_root\n            offset = len(source_root) + 1  # + '/'.\n            args.add_all([src.path[offset:] for src in dep.direct_sources])\n\n    ctx.actions.run(\n        executable = ctx.executable._protoc,\n        inputs = descriptors,\n        outputs = [srcjar],\n        arguments = [args],\n        mnemonic = \"ProtoCompile\",\n        use_default_shell_env = True,\n    )\n\n    return [\n        DefaultInfo(\n            files = depset([srcjar]),\n        ),\n    ]\n\ninternal_gen_kt_protos = rule(\n    implementation = _internal_gen_kt_protos,\n    attrs = {\n        \"deps\": attr.label_list(\n            mandatory = True,\n            providers = [ProtoInfo],\n        ),\n        \"lite\": attr.bool(\n            default = False,\n        ),\n        \"_protoc\": attr.label(\n            executable = True,\n            cfg = \"exec\",\n            default = \"//:protoc\",\n        ),\n    },\n)\n\ndef internal_objc_proto_library(\n        name,\n        srcs = [],\n        deps = [],\n        outs = [],\n        proto_deps = [],\n        includes = [\".\"],\n        default_runtime = Label(\"//:protobuf_objc\"),\n        protoc = Label(\"//:protoc\"),\n        testonly = None,\n        visibility = [\"//visibility:public\"],\n        **kwargs):\n    \"\"\"Bazel rule to create a Objective-C protobuf library from proto sources\n\n    NOTE: the rule is only an internal workaround to generate protos. The\n    interface may change and the rule may be removed when bazel has introduced\n    the native rule.\n\n    Args:\n      name: the name of the objc_proto_library.\n      srcs: the .proto files to compile.\n      deps: a list of dependency labels; must be objc_proto_library.\n      outs: a list of expected output files.\n      proto_deps: a list of proto file dependencies that don't have a\n        objc_proto_library rule.\n      includes: a string indicating the include path of the .proto files.\n      default_runtime: the Objective-C Protobuf runtime\n      protoc: the label of the protocol compiler to generate the sources.\n      testonly: common rule attribute (see:\n          https://bazel.build/reference/be/common-definitions#common-attributes)\n      visibility: the visibility of the generated files.\n      **kwargs: other keyword arguments that are passed to py_library.\n\n    \"\"\"\n    full_deps = [d + \"_genproto\" for d in deps]\n\n    if proto_deps:\n        _proto_gen(\n            name = name + \"_deps_genproto\",\n            testonly = testonly,\n            srcs = proto_deps,\n            protoc = protoc,\n            includes = includes,\n        )\n        full_deps.append(\":%s_deps_genproto\" % name)\n\n    # Note: we need to run the protoc build twice to get separate targets for\n    # the generated header and the source files.\n    _proto_gen(\n        name = name + \"_genproto_hdrs\",\n        srcs = srcs,\n        deps = full_deps,\n        langs = [\"objc\"],\n        out_type = \"hdrs\",\n        includes = includes,\n        protoc = protoc,\n        testonly = testonly,\n        visibility = visibility,\n        tags = [\"manual\"],\n    )\n\n    _proto_gen(\n        name = name + \"_genproto\",\n        srcs = srcs,\n        deps = full_deps,\n        langs = [\"objc\"],\n        out_type = \"srcs\",\n        includes = includes,\n        protoc = protoc,\n        testonly = testonly,\n        visibility = visibility,\n        tags = [\"manual\"],\n    )\n\n    objc_library(\n        name = name,\n        hdrs = [name + \"_genproto_hdrs\"],\n        non_arc_srcs = [name + \"_genproto\"],\n        deps = [default_runtime],\n        includes = includes,\n        testonly = testonly,\n        visibility = visibility,\n        # Don't auto-expand these targets until target_compatible_with\n        # works.  See https://github.com/bazelbuild/bazel/issues/12897.\n        tags = [\"manual\"],\n        target_compatible_with = [\"@platforms//os:osx\"],\n        **kwargs\n    )\n\ndef internal_ruby_proto_library(\n        name,\n        ruby_library,\n        srcs = [],\n        deps = [],\n        includes = [\".\"],\n        default_runtime = \"@com_google_protobuf//ruby:protobuf\",\n        protoc = \"@com_google_protobuf//:protoc\",\n        testonly = None,\n        visibility = [\"//visibility:public\"],\n        **kwargs):\n    \"\"\"Bazel rule to create a Ruby protobuf library from proto source files\n\n    NOTE: the rule is only an internal workaround to generate protos. The\n    interface may change and the rule may be removed when bazel has introduced\n    the native rule.\n\n    Args:\n      name: the name of the ruby_proto_library.\n      ruby_library: the ruby library rules to use.\n      srcs: the .proto files to compile.\n      deps: a list of dependency labels; must be a internal_ruby_proto_library.\n      includes: a string indicating the include path of the .proto files.\n      default_runtime: the RubyProtobuf runtime\n      protoc: the label of the protocol compiler to generate the sources.\n      testonly: common rule attribute (see:\n          https://bazel.build/reference/be/common-definitions#common-attributes)\n      visibility: the visibility of the generated files.\n      **kwargs: other keyword arguments that are passed to ruby_library.\n\n    \"\"\"\n\n    # Note: we need to run the protoc build twice to get separate targets for\n    # the generated header and the source files.\n    _proto_gen(\n        name = name + \"_genproto\",\n        srcs = srcs,\n        deps = [s + \"_genproto\" for s in deps],\n        langs = [\"ruby\"],\n        includes = includes,\n        protoc = protoc,\n        testonly = testonly,\n        visibility = visibility,\n        tags = [\"manual\"],\n    )\n\n    deps = []\n    if default_runtime:\n        deps.append(default_runtime)\n    ruby_library(\n        name = name,\n        srcs = [name + \"_genproto\"],\n        deps = deps,\n        testonly = testonly,\n        visibility = visibility,\n        includes = includes,\n        **kwargs\n    )\n\n# When canonical labels are in use, use additional \"@\" prefix\n_canonical_label_prefix = \"@\" if str(Label(\"//:protoc\")).startswith(\"@@\") else \"\"\n\ndef _to_label(label_str):\n    \"\"\"Converts a string to a label using the repository of the calling thread\"\"\"\n    if type(label_str) == type(Label(\"//:foo\")):\n        return label_str\n    return Label(_canonical_label_prefix + native.repository_name() + \"//\" + native.package_name() + \":foo\").relative(label_str)\n\ndef internal_py_proto_library(\n        name,\n        srcs = [],\n        deps = [],\n        py_libs = [],\n        py_extra_srcs = [],\n        include = None,\n        default_runtime = Label(\"//:protobuf_python\"),\n        protoc = Label(\"//:protoc\"),\n        use_grpc_plugin = False,\n        testonly = None,\n        **kargs):\n    \"\"\"Bazel rule to create a Python protobuf library from proto source files\n\n    NOTE: the rule is is only an internal workaround to generate protos.  It is deprecated and will\n    be removed in the next minor release.  Users should migrate to the py_proto_library rule from\n    rules_python instead.\n\n    Args:\n      name: the name of the py_proto_library.\n      srcs: the .proto files of the py_proto_library.\n      deps: a list of dependency labels; must be py_proto_library.\n      py_libs: a list of other py_library targets depended by the generated\n          py_library.\n      py_extra_srcs: extra source files that will be added to the output\n          py_library. This attribute is used for internal bootstrapping.\n      include: a string indicating the include path of the .proto files.\n      default_runtime: the implicitly default runtime which will be depended on by\n          the generated py_library target.\n      protoc: the label of the protocol compiler to generate the sources.\n      use_grpc_plugin: a flag to indicate whether to call the Python C++ plugin\n          when processing the proto files.\n      testonly: common rule attribute (see:\n          https://bazel.build/reference/be/common-definitions#common-attributes)\n      **kargs: other keyword arguments that are passed to py_library.\n\n    \"\"\"\n    includes = []\n    if include != None:\n        includes = [include]\n\n    grpc_python_plugin = None\n    if use_grpc_plugin:\n        grpc_python_plugin = \"//external:grpc_python_plugin\"\n        # Note: Generated grpc code depends on Python grpc module. This dependency\n        # is not explicitly listed in py_libs. Instead, host system is assumed to\n        # have grpc installed.\n\n    _proto_gen(\n        name = name + \"_genproto\",\n        testonly = testonly,\n        srcs = srcs,\n        deps = [s + \"_genproto\" for s in deps],\n        includes = includes,\n        protoc = protoc,\n        langs = [\"python\"],\n        visibility = [\"//visibility:public\"],\n        plugin = grpc_python_plugin,\n        plugin_language = \"grpc\",\n    )\n\n    if default_runtime:\n        # Resolve non-local labels\n        labels = [_to_label(lib) for lib in py_libs + deps]\n        if not _to_label(default_runtime) in labels:\n            py_libs = py_libs + [default_runtime]\n\n    py_library(\n        name = name,\n        testonly = testonly,\n        srcs = [name + \"_genproto\"] + py_extra_srcs,\n        deps = py_libs + deps,\n        imports = includes,\n        **kargs\n    )\n\ndef _source_proto_library(\n        name,\n        srcs = [],\n        deps = [],\n        proto_deps = [],\n        outs = [],\n        lang = None,\n        includes = [\".\"],\n        protoc = Label(\"//:protoc\"),\n        testonly = None,\n        visibility = [\"//visibility:public\"],\n        enable_editions = False,\n        **kwargs):\n    \"\"\"Bazel rule to create generated protobuf code from proto source files for\n    languages not well supported by Bazel yet.  This will output the generated\n    code as-is without any compilation.  This is most useful for interpreted\n    languages that don't require it.\n\n    NOTE: the rule is only an internal workaround to generate protos. The\n    interface may change and the rule may be removed when bazel has introduced\n    the native rule.\n\n    Args:\n      name: the name of the unsupported_proto_library.\n      srcs: the .proto files to compile.  Note, that for languages where out\n        needs to be provided, only a single source file is allowed.\n      deps: a list of dependency labels; must be unsupported_proto_library.\n      proto_deps: a list of proto file dependencies that don't have a\n        unsupported_proto_library rule.\n      lang: the language to (optionally) generate code for.\n      outs: a list of expected output files.  This is only required for\n        languages where we can't predict the outputs.\n      includes: strings indicating the include path of the .proto files.\n      protoc: the label of the protocol compiler to generate the sources.\n      testonly: common rule attribute (see:\n          https://bazel.build/reference/be/common-definitions#common-attributes)\n      visibility: the visibility of the generated files.\n      **kwargs: other keyword arguments that are passed to py_library.\n\n    \"\"\"\n    if outs and len(srcs) != 1:\n        fail(\"Custom outputs only allowed for single proto targets.\")\n\n    langs = []\n    if lang != None:\n        langs = [lang]\n\n    full_deps = [d + \"_genproto\" for d in deps]\n\n    if proto_deps:\n        _proto_gen(\n            name = name + \"_deps_genproto\",\n            testonly = testonly,\n            srcs = proto_deps,\n            protoc = protoc,\n            includes = includes,\n            enable_editions = enable_editions,\n        )\n        full_deps.append(\":%s_deps_genproto\" % name)\n\n    _proto_gen(\n        name = name + \"_genproto\",\n        srcs = srcs,\n        deps = full_deps,\n        langs = langs,\n        outs = outs,\n        includes = includes,\n        protoc = protoc,\n        testonly = testonly,\n        visibility = visibility,\n        enable_editions = enable_editions,\n    )\n\n    native.filegroup(\n        name = name,\n        srcs = [\":%s_genproto\" % name],\n        testonly = testonly,\n        visibility = visibility,\n        **kwargs\n    )\n\ndef internal_csharp_proto_library(**kwargs):\n    \"\"\"Bazel rule to create a C# protobuf library from proto source files\n\n    NOTE: the rule is only an internal workaround to generate protos. The\n    interface may change and the rule may be removed when bazel has introduced\n    the native rule.\n\n    Args:\n      **kwargs: arguments that are passed to unsupported_proto_library.\n\n    \"\"\"\n\n    _source_proto_library(\n        lang = \"csharp\",\n        **kwargs\n    )\n\ndef internal_php_proto_library(**kwargs):\n    \"\"\"Bazel rule to create a PHP protobuf library from proto source files\n\n    NOTE: the rule is only an internal workaround to generate protos. The\n    interface may change and the rule may be removed when bazel has introduced\n    the native rule.\n\n    Args:\n      **kwargs: arguments that are passed to unsupported_proto_library.\n\n    \"\"\"\n    if not kwargs.get(\"outs\"):\n        fail(\"Unable to predict the outputs for php_proto_library.  Please specify them via `outs`.\")\n\n    _source_proto_library(\n        lang = \"php\",\n        **kwargs\n    )\n\ndef check_protobuf_required_bazel_version():\n    \"\"\"For WORKSPACE files, to check the installed version of bazel.\n\n    This ensures bazel supports our approach to proto_library() depending on a\n    copied filegroup. (Fixed in bazel 0.5.4)\n    \"\"\"\n    versions.check(minimum_bazel_version = \"0.5.4\")\n"
        },
        {
          "name": "protobuf_deps.bzl",
          "type": "blob",
          "size": 8.64,
          "content": "\"\"\"Load dependencies needed to compile the protobuf library as a 3rd-party consumer.\n\nThe consumers should use the following WORKSPACE snippet, which loads dependencies\nand sets up the repositories protobuf needs:\n\n```\nhttp_archive(\n    name = \"com_google_protobuf\",\n    strip_prefix = \"protobuf-VERSION\",\n    sha256 = ...,\n    url = ...,\n)\n\nload(\"@com_google_protobuf//:protobuf_deps.bzl\", \"protobuf_deps\")\n\nprotobuf_deps()\n\nload(\"@com_google_protobuf//:protobuf_extra_deps.bzl\", \"protobuf_extra_deps\")\n\nprotobuf_extra_deps();\n```\n\"\"\"\n\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\nload(\"//bazel/private:proto_bazel_features.bzl\", \"proto_bazel_features\")  # buildifier: disable=bzl-visibility\nload(\"//python/dist:python_downloads.bzl\", \"python_nuget_package\", \"python_source_archive\")\nload(\"//python/dist:system_python.bzl\", \"system_python\")\n\nPROTOBUF_MAVEN_ARTIFACTS = [\n    \"com.google.caliper:caliper:1.0-beta-3\",\n    \"com.google.code.findbugs:jsr305:3.0.2\",\n    \"com.google.code.gson:gson:2.8.9\",\n    \"com.google.errorprone:error_prone_annotations:2.5.1\",\n    \"com.google.j2objc:j2objc-annotations:2.8\",\n    \"com.google.guava:guava:32.0.1-jre\",\n    \"com.google.guava:guava-testlib:32.0.1-jre\",\n    \"com.google.testparameterinjector:test-parameter-injector:1.18\",\n    \"com.google.truth:truth:1.1.2\",\n    \"junit:junit:4.13.2\",\n    \"org.mockito:mockito-core:4.3.1\",\n    \"biz.aQute.bnd:biz.aQute.bndlib:6.4.0\",\n    \"info.picocli:picocli:4.6.3\",\n]\n\ndef _github_archive(repo, commit, **kwargs):\n    repo_name = repo.split(\"/\")[-1]\n    http_archive(\n        urls = [repo + \"/archive/\" + commit + \".zip\"],\n        strip_prefix = repo_name + \"-\" + commit,\n        **kwargs\n    )\n\ndef protobuf_deps():\n    \"\"\"Loads common dependencies needed to compile the protobuf library.\"\"\"\n\n    if not native.existing_rule(\"bazel_features\"):\n        http_archive(\n            name = \"bazel_features\",\n            sha256 = \"95fb3cfd11466b4cad6565e3647a76f89886d875556a4b827c021525cb2482bb\",\n            strip_prefix = \"bazel_features-1.10.0\",\n            url = \"https://github.com/bazel-contrib/bazel_features/releases/download/v1.10.0/bazel_features-v1.10.0.tar.gz\",\n        )\n\n    if not native.existing_rule(\"bazel_skylib\"):\n        http_archive(\n            name = \"bazel_skylib\",\n            sha256 = \"d00f1389ee20b60018e92644e0948e16e350a7707219e7a390fb0a99b6ec9262\",\n            urls = [\n                \"https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.7.0/bazel-skylib-1.7.0.tar.gz\",\n                \"https://github.com/bazelbuild/bazel-skylib/releases/download/1.7.0/bazel-skylib-1.7.0.tar.gz\",\n            ],\n        )\n\n    if not native.existing_rule(\"com_google_absl\"):\n        _github_archive(\n            name = \"com_google_absl\",\n            repo = \"https://github.com/abseil/abseil-cpp\",\n            commit = \"4447c7562e3bc702ade25105912dce503f0c4010\",  # Abseil LTS 20240722.0\n            sha256 = \"d8342ad77aa9e16103c486b615460c24a695a1f04cdb760eb02fef780df99759\",\n        )\n\n    if not native.existing_rule(\"zlib\"):\n        http_archive(\n            name = \"zlib\",\n            build_file = Label(\"//third_party:zlib.BUILD\"),\n            sha256 = \"38ef96b8dfe510d42707d9c781877914792541133e1870841463bfa73f883e32\",\n            strip_prefix = \"zlib-1.3.1\",\n            urls = [\n                \"https://github.com/madler/zlib/releases/download/v1.3.1/zlib-1.3.1.tar.xz\",\n                \"https://zlib.net/zlib-1.3.1.tar.xz\",\n            ],\n        )\n\n    if not native.existing_rule(\"jsoncpp\"):\n        _github_archive(\n            name = \"jsoncpp\",\n            repo = \"https://github.com/open-source-parsers/jsoncpp\",\n            commit = \"89e2973c754a9c02a49974d839779b151e95afd6\",  # 1.9.6\n            sha256 = \"02f0804596c1e18c064d890ac9497fa17d585e822fcacf07ff8a8aa0b344a7bd\",\n            build_file = Label(\"//third_party:jsoncpp.BUILD\"),\n        )\n\n    if not native.existing_rule(\"rules_cc\"):\n        http_archive(\n            name = \"rules_cc\",\n            urls = [\"https://github.com/bazelbuild/rules_cc/releases/download/0.0.16/rules_cc-0.0.16.tar.gz\"],\n            sha256 = \"bbf1ae2f83305b7053b11e4467d317a7ba3517a12cef608543c1b1c5bf48a4df\",\n            strip_prefix = \"rules_cc-0.0.16\",\n        )\n\n    if not native.existing_rule(\"rules_java\"):\n        http_archive(\n            name = \"rules_java\",\n            url = \"https://github.com/bazelbuild/rules_java/releases/download/8.3.2/rules_java-8.3.2.tar.gz\",\n            sha256 = \"9b9614f8a7f7b7ed93cb7975d227ece30fe7daed2c0a76f03a5ee37f69e437de\",\n        )\n\n    if not native.existing_rule(\"rules_shell\"):\n        http_archive(\n            name = \"rules_shell\",\n            sha256 = \"410e8ff32e018b9efd2743507e7595c26e2628567c42224411ff533b57d27c28\",\n            strip_prefix = \"rules_shell-0.2.0\",\n            url = \"https://github.com/bazelbuild/rules_shell/releases/download/v0.2.0/rules_shell-v0.2.0.tar.gz\",\n        )\n\n    if not native.existing_rule(\"proto_bazel_features\"):\n        proto_bazel_features(name = \"proto_bazel_features\")\n\n    if not native.existing_rule(\"rules_python\"):\n        http_archive(\n            name = \"rules_python\",\n            sha256 = \"d70cd72a7a4880f0000a6346253414825c19cdd40a28289bdf67b8e6480edff8\",\n            strip_prefix = \"rules_python-0.28.0\",\n            url = \"https://github.com/bazelbuild/rules_python/releases/download/0.28.0/rules_python-0.28.0.tar.gz\",\n        )\n\n    if not native.existing_rule(\"system_python\"):\n        system_python(\n            name = \"system_python\",\n            minimum_python_version = \"3.9\",\n        )\n\n    if not native.existing_rule(\"rules_jvm_external\"):\n        http_archive(\n            name = \"rules_jvm_external\",\n            strip_prefix = \"rules_jvm_external-6.3\",\n            sha256 = \"c18a69d784bcd851be95897ca0eca0b57dc86bb02e62402f15736df44160eb02\",\n            url = \"https://github.com/bazelbuild/rules_jvm_external/releases/download/6.3/rules_jvm_external-6.3.tar.gz\",\n        )\n\n    if not native.existing_rule(\"rules_pkg\"):\n        http_archive(\n            name = \"rules_pkg\",\n            urls = [\n                \"https://mirror.bazel.build/github.com/bazelbuild/rules_pkg/releases/download/1.0.1/rules_pkg-1.0.1.tar.gz\",\n                \"https://github.com/bazelbuild/rules_pkg/releases/download/1.0.1/rules_pkg-1.0.1.tar.gz\",\n            ],\n            sha256 = \"d20c951960ed77cb7b341c2a59488534e494d5ad1d30c4818c736d57772a9fef\",\n        )\n\n    if not native.existing_rule(\"build_bazel_rules_apple\"):\n        http_archive(\n            name = \"build_bazel_rules_apple\",\n            sha256 = \"b892911288715b354e05b9a6fe9009635f7155991f24f27e779fe80d435c92bc\",\n            url = \"https://github.com/bazelbuild/rules_apple/releases/download/3.13.0/rules_apple.3.13.0.tar.gz\",\n        )\n\n    if not native.existing_rule(\"build_bazel_apple_support\"):\n        http_archive(\n            name = \"build_bazel_apple_support\",\n            sha256 = \"c4bb2b7367c484382300aee75be598b92f847896fb31bbd22f3a2346adf66a80\",\n            url = \"https://github.com/bazelbuild/apple_support/releases/download/1.15.1/apple_support.1.15.1.tar.gz\",\n        )\n\n    if not native.existing_rule(\"rules_kotlin\"):\n        http_archive(\n            name = \"rules_kotlin\",\n            sha256 = \"3b772976fec7bdcda1d84b9d39b176589424c047eb2175bed09aac630e50af43\",\n            url = \"https://github.com/bazelbuild/rules_kotlin/releases/download/v1.9.6/rules_kotlin-v1.9.6.tar.gz\",\n        )\n\n    if not native.existing_rule(\"rules_license\"):\n        http_archive(\n            name = \"rules_license\",\n            urls = [\n                \"https://mirror.bazel.build/github.com/bazelbuild/rules_license/releases/download/1.0.0/rules_license-1.0.0.tar.gz\",\n                \"https://github.com/bazelbuild/rules_license/releases/download/1.0.0/rules_license-1.0.0.tar.gz\",\n            ],\n            sha256 = \"26d4021f6898e23b82ef953078389dd49ac2b5618ac564ade4ef87cced147b38\",\n        )\n\n    # Python Downloads\n    python_source_archive(\n        name = \"python-3.9.0\",\n        sha256 = \"df796b2dc8ef085edae2597a41c1c0a63625ebd92487adaef2fed22b567873e8\",\n    )\n    python_nuget_package(\n        name = \"nuget_python_i686_3.9.0\",\n        sha256 = \"229abecbe49dc08fe5709e0b31e70edfb3b88f23335ebfc2904c44f940fd59b6\",\n    )\n    python_nuget_package(\n        name = \"nuget_python_x86-64_3.9.0\",\n        sha256 = \"6af58a733e7dfbfcdd50d55788134393d6ffe7ab8270effbf724bdb786558832\",\n    )\n    python_nuget_package(\n        name = \"nuget_python_i686_3.10.0\",\n        sha256 = \"e115e102eb90ce160ab0ef7506b750a8d7ecc385bde0a496f02a54337a8bc333\",\n    )\n    python_nuget_package(\n        name = \"nuget_python_x86-64_3.10.0\",\n        sha256 = \"4474c83c25625d93e772e926f95f4cd398a0abbb52793625fa30f39af3d2cc00\",\n    )\n    native.register_toolchains(\"//bazel/private/toolchains:all\")\n"
        },
        {
          "name": "protobuf_extra_deps.bzl",
          "type": "blob",
          "size": 0.81,
          "content": "\"\"\"Loads the dependencies necessary for the external repositories defined in protobuf_deps.bzl.\n\nThe consumers should use the following WORKSPACE snippet, which loads dependencies\nand sets up the repositories protobuf needs:\n\n```\nhttp_archive(\n    name = \"com_google_protobuf\",\n    strip_prefix = \"protobuf-VERSION\",\n    sha256 = ...,\n    url = ...,\n)\n\nload(\"@com_google_protobuf//:protobuf_deps.bzl\", \"protobuf_deps\")\n\nprotobuf_deps()\n\nload(\"@com_google_protobuf//:protobuf_extra_deps.bzl\", \"protobuf_extra_deps\")\n\nprotobuf_extra_deps();\n```\n\"\"\"\n\nload(\"@rules_java//java:repositories.bzl\", \"rules_java_dependencies\", \"rules_java_toolchains\")\n\ndef protobuf_extra_deps():\n    \"\"\"Loads extra dependencies needed for the external repositories defined in protobuf_deps.bzl.\"\"\"\n\n    rules_java_dependencies()\n\n    rules_java_toolchains()\n"
        },
        {
          "name": "protobuf_release.bzl",
          "type": "blob",
          "size": 1.47,
          "content": "\"\"\"\nGenerates package naming variables for use with rules_pkg.\n\"\"\"\n\nload(\"@bazel_tools//tools/cpp:toolchain_utils.bzl\", \"find_cpp_toolchain\")\nload(\"@rules_pkg//pkg:providers.bzl\", \"PackageVariablesInfo\")\nload(\":protobuf_version.bzl\", \"PROTOC_VERSION\")\n\ndef _package_naming_impl(ctx):\n    values = {}\n    values[\"version\"] = PROTOC_VERSION\n\n    # infer from the current cpp toolchain.\n    toolchain = find_cpp_toolchain(ctx)\n    cpu = toolchain.cpu\n    system_name = toolchain.target_gnu_system_name\n\n    # rename cpus to match what we want artifacts to be\n    if cpu == \"systemz\":\n        cpu = \"s390_64\"\n    elif cpu == \"aarch64\":\n        cpu = \"aarch_64\"\n    elif cpu == \"ppc64\":\n        cpu = \"ppcle_64\"\n\n    # use the system name to determine the os and then create platform names\n    if \"apple\" in system_name:\n        values[\"platform\"] = \"osx-\" + cpu\n    elif \"linux\" in system_name:\n        values[\"platform\"] = \"linux-\" + cpu\n    elif \"mingw\" in system_name:\n        if cpu == \"x86_64\":\n            values[\"platform\"] = \"win64\"\n        else:\n            values[\"platform\"] = \"win32\"\n    else:\n        values[\"platform\"] = \"unknown\"\n\n    return PackageVariablesInfo(values = values)\n\npackage_naming = rule(\n    implementation = _package_naming_impl,\n    attrs = {\n        # Necessary data dependency for find_cpp_toolchain.\n        \"_cc_toolchain\": attr.label(default = Label(\"@bazel_tools//tools/cpp:current_cc_toolchain\")),\n    },\n    toolchains = [\"@bazel_tools//tools/cpp:toolchain_type\"],\n)\n"
        },
        {
          "name": "protobuf_version.bzl",
          "type": "blob",
          "size": 0.29,
          "content": "\"\"\" Contains version numbers to be used in other bzl files \"\"\"\nPROTOC_VERSION = \"30.0\"\nPROTOBUF_JAVA_VERSION = \"4.30.0\"\nPROTOBUF_PYTHON_VERSION = \"5.30.0\"\nPROTOBUF_PHP_VERSION = \"4.30.0\"\nPROTOBUF_RUBY_VERSION = \"4.30.0\"\nPROTOBUF_RUST_VERSION = \"4.30.0\"\nPROTOBUF_PREVIOUS_RELEASE = \"28.0-rc1\"\n"
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "regenerate_stale_files.sh",
          "type": "blob",
          "size": 1.39,
          "content": "#!/bin/bash\n\n# This script runs the staleness tests and uses them to update any stale\n# generated files.\n\nset -ex\n\necho \"::group::Regenerate stale files\"\n\n# Cd to the repo root.\ncd $(dirname -- \"$0\")\n\nreadonly BazelBin=\"${BAZEL:-bazel} ${BAZEL_STARTUP_FLAGS}\"\n\nSTALENESS_TESTS=(\n  \"csharp:generated_csharp_defaults_staleness_test\"\n  \"java/core:generated_java_defaults_staleness_test\"\n  \"upb/reflection:bootstrap_upb_defaults_staleness_test\"\n  \"cmake:test_dependencies_staleness\"\n  \"src:cmake_lists_staleness_test\"\n  \"src/google/protobuf:well_known_types_staleness_test\"\n  \"objectivec:well_known_types_staleness_test\"\n  \"php:test_amalgamation_staleness\"\n  \"php:proto_staleness_test\"\n  \"ruby/ext/google/protobuf_c:test_amalgamation_staleness\"\n  \"upb/cmake:test_generated_files\"\n  \"upb/reflection:descriptor_upb_proto_staleness_test\"\n  \"upb_generator:plugin_upb_proto_staleness_test\"\n)\n\n# Run and fix all staleness tests.\nfor test in ${STALENESS_TESTS[@]}; do\n  ${BazelBin} test $test \"$@\" || ./bazel-bin/${test%%:*}/${test#*:} --fix\ndone\n\n# Generate C# code.\n# This doesn't currently have Bazel staleness tests, but there's an existing\n# shell script that generates everything required. The output files are stable,\n# so just regenerating in place should be harmless. \n${BazelBin} build src/google/protobuf/compiler:protoc \"$@\"\n(export PROTOC=$PWD/bazel-bin/protoc && cd csharp && ./generate_protos.sh)\n\necho \"::endgroup::\"\n"
        },
        {
          "name": "ruby",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "toolchain",
          "type": "tree",
          "content": null
        },
        {
          "name": "upb",
          "type": "tree",
          "content": null
        },
        {
          "name": "upb_generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.json",
          "type": "blob",
          "size": 0.43,
          "content": "{\n    \"main\": {\n        \"protoc_version\": \"30-dev\",\n        \"lts\": false,\n        \"date\": \"2024-09-30\",\n        \"languages\": {\n            \"cpp\": \"6.30-dev\",\n            \"csharp\": \"3.30-dev\",\n            \"java\": \"4.30-dev\",\n            \"javascript\": \"3.30-dev\",\n            \"objectivec\": \"4.30-dev\",\n            \"php\": \"4.30-dev\",\n            \"python\": \"6.30-dev\",\n            \"ruby\": \"4.30-dev\",\n            \"rust\": \"4.30-dev\"\n        }\n    }\n}"
        }
      ]
    }
  ]
}