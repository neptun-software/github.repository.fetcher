{
  "metadata": {
    "timestamp": 1736557765171,
    "page": 929,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "airbnb/lottie-ios",
      "stars": 25922,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.32,
          "content": "# Xcode\nxcuserdata/\n\n# AppCode\n.idea/\n\n# other\nbuild/\n\n# macOS\n.DS_Store\n\n# Swift Package Manager\n.swiftpm\n.build/\n\n# Carthage support tests\nscript/test-carthage/Carthage\n\n# Test artifacts\nTests/Artifacts\n\n# Private test animations\nTests/Samples/Private/*.json\nTests/Samples/Private/**/*.json\nTests/__Snapshots__/**/*Private*\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.05,
          "content": "_AeFiles\n_Gifs\nExample\nscript\nTests\n.build\n.swiftpm\n"
        },
        {
          "name": ".spi.yml",
          "type": "blob",
          "size": 0.09,
          "content": "version: 1\nbuilder:\n  configs:\n    - platform: ios\n      documentation_targets:\n      - Lottie\n"
        },
        {
          "name": "Example",
          "type": "tree",
          "content": null
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.11,
          "content": "source 'https://rubygems.org' do\n  gem 'cocoapods', '~> 1.15.0'\n  gem \"rake\", \"~> 13.0.0\"\n  gem 'git', '~> 1.18'\nend\n"
        },
        {
          "name": "Gemfile.lock",
          "type": "blob",
          "size": 2.47,
          "content": "GEM\n  specs:\n\nGEM\n  remote: https://rubygems.org/\n  specs:\n    CFPropertyList (3.0.6)\n      rexml\n    activesupport (6.1.7.6)\n      concurrent-ruby (~> 1.0, >= 1.0.2)\n      i18n (>= 1.6, < 2)\n      minitest (>= 5.1)\n      tzinfo (~> 2.0)\n      zeitwerk (~> 2.3)\n    addressable (2.8.0)\n      public_suffix (>= 2.0.2, < 5.0)\n    algoliasearch (1.27.5)\n      httpclient (~> 2.8, >= 2.8.3)\n      json (>= 1.5.1)\n    atomos (0.1.3)\n    claide (1.1.0)\n    cocoapods (1.15.0)\n      addressable (~> 2.8)\n      claide (>= 1.0.2, < 2.0)\n      cocoapods-core (= 1.15.0)\n      cocoapods-deintegrate (>= 1.0.3, < 2.0)\n      cocoapods-downloader (>= 2.1, < 3.0)\n      cocoapods-plugins (>= 1.0.0, < 2.0)\n      cocoapods-search (>= 1.0.0, < 2.0)\n      cocoapods-trunk (>= 1.6.0, < 2.0)\n      cocoapods-try (>= 1.1.0, < 2.0)\n      colored2 (~> 3.1)\n      escape (~> 0.0.4)\n      fourflusher (>= 2.3.0, < 3.0)\n      gh_inspector (~> 1.0)\n      molinillo (~> 0.8.0)\n      nap (~> 1.0)\n      ruby-macho (>= 2.3.0, < 3.0)\n      xcodeproj (>= 1.23.0, < 2.0)\n    cocoapods-core (1.15.0)\n      activesupport (>= 5.0, < 8)\n      addressable (~> 2.8)\n      algoliasearch (~> 1.0)\n      concurrent-ruby (~> 1.1)\n      fuzzy_match (~> 2.0.4)\n      nap (~> 1.0)\n      netrc (~> 0.11)\n      public_suffix (~> 4.0)\n      typhoeus (~> 1.0)\n    cocoapods-deintegrate (1.0.5)\n    cocoapods-downloader (2.1)\n    cocoapods-plugins (1.0.0)\n      nap\n    cocoapods-search (1.0.1)\n    cocoapods-trunk (1.6.0)\n      nap (>= 0.8, < 2.0)\n      netrc (~> 0.11)\n    cocoapods-try (1.2.0)\n    colored2 (3.1.2)\n    concurrent-ruby (1.2.3)\n    escape (0.0.4)\n    ethon (0.16.0)\n      ffi (>= 1.15.0)\n    ffi (1.16.3)\n    fourflusher (2.3.1)\n    fuzzy_match (2.0.4)\n    gh_inspector (1.1.3)\n    git (1.18.0)\n      addressable (~> 2.8)\n      rchardet (~> 1.8)\n    httpclient (2.8.3)\n    i18n (1.14.1)\n      concurrent-ruby (~> 1.0)\n    json (2.7.1)\n    minitest (5.21.2)\n    molinillo (0.8.0)\n    nanaimo (0.3.0)\n    nap (1.1.0)\n    netrc (0.11.0)\n    public_suffix (4.0.6)\n    rake (13.0.6)\n    rchardet (1.8.0)\n    rexml (3.2.6)\n    ruby-macho (2.5.1)\n    typhoeus (1.4.1)\n      ethon (>= 0.9.0)\n    tzinfo (2.0.6)\n      concurrent-ruby (~> 1.0)\n    xcodeproj (1.24.0)\n      CFPropertyList (>= 2.3.3, < 4.0)\n      atomos (~> 0.1.3)\n      claide (>= 1.0.2, < 2.0)\n      colored2 (~> 3.1)\n      nanaimo (~> 0.3.0)\n      rexml (~> 3.2.4)\n    zeitwerk (2.6.12)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  cocoapods (~> 1.15.0)!\n  git (~> 1.18)!\n  rake (~> 13.0.0)!\n\nBUNDLED WITH\n   2.3.19\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.08,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2018 Airbnb, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Lottie.xcodeproj",
          "type": "tree",
          "content": null
        },
        {
          "name": "Lottie.xcworkspace",
          "type": "tree",
          "content": null
        },
        {
          "name": "Package.resolved",
          "type": "blob",
          "size": 0.56,
          "content": "{\n  \"pins\" : [\n    {\n      \"identity\" : \"swift\",\n      \"kind\" : \"remoteSourceControl\",\n      \"location\" : \"https://github.com/airbnb/swift\",\n      \"state\" : {\n        \"revision\" : \"c7e833face3f893b8defde66eecb66f24b55ca35\",\n        \"version\" : \"1.0.8\"\n      }\n    },\n    {\n      \"identity\" : \"swift-argument-parser\",\n      \"kind\" : \"remoteSourceControl\",\n      \"location\" : \"https://github.com/apple/swift-argument-parser\",\n      \"state\" : {\n        \"revision\" : \"df9ee6676cd5b3bf5b330ec7568a5644f547201b\",\n        \"version\" : \"1.1.3\"\n      }\n    }\n  ],\n  \"version\" : 2\n}\n"
        },
        {
          "name": "Package.swift",
          "type": "blob",
          "size": 1.17,
          "content": "// swift-tools-version:5.9\nimport PackageDescription\n\nlet package = Package(\n  name: \"Lottie\",\n  // Minimum platform versions should be kept in sync with the per-platform targets in Lottie.xcodeproj, lottie-ios.podspec, and lottie-spm's Package.swift\n  platforms: [.iOS(\"13.0\"), .macOS(\"10.15\"), .tvOS(\"13.0\"), .custom(\"visionOS\", versionString: \"1.0\")],\n  products: [\n    .library(name: \"Lottie\", targets: [\"Lottie\"]),\n    // Product for dynamic linking, as SPM builds libraries statically by default.\n    // This product should be used in a modular project structure with multiple packages using Lottie to avoid duplicate symbols.\n    .library(name: \"Lottie-Dynamic\", type: .dynamic, targets: [\"Lottie\"]),\n  ],\n  dependencies: [\n    .package(url: \"https://github.com/airbnb/swift\", .upToNextMajor(from: \"1.0.1\")),\n  ],\n  targets: [\n    .target(\n      name: \"Lottie\",\n      path: \"Sources\",\n      exclude: [\n        \"Private/EmbeddedLibraries/README.md\",\n        \"Private/EmbeddedLibraries/ZipFoundation/README.md\",\n        \"Private/EmbeddedLibraries/EpoxyCore/README.md\",\n        \"Private/EmbeddedLibraries/LRUCache/README.md\",\n      ],\n      resources: [.copy(\"PrivacyInfo.xcprivacy\")]),\n  ])\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.04,
          "content": "# Lottie for iOS\n [![Version](https://img.shields.io/cocoapods/v/lottie-ios.svg?style=flat)](https://cocoapods.org/pods/lottie-ios) [![Carthage Compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage) [![SwiftPM](https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat)](https://swift.org/package-manager/) [![License](https://img.shields.io/cocoapods/l/lottie-ios.svg?style=flat)](https://cocoapods.org/pods/lottie-ios) [![Platform](https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fairbnb%2Flottie-ios%2Fbadge%3Ftype%3Dplatforms)](https://swiftpackageindex.com/airbnb/lottie-ios) [![Swift Versions](https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fairbnb%2Flottie-ios%2Fbadge%3Ftype%3Dswift-versions)](https://swiftpackageindex.com/airbnb/lottie-ios)\n\n**View documentation, FAQ, help, examples, and more at [airbnb.io/lottie](https://airbnb.io/lottie/)**\n\nLottie is a cross-platform library for iOS, macOS, tvOS, visionOS, [Android](https://github.com/airbnb/lottie-android), and [Web](https://github.com/airbnb/lottie-web) that natively renders vector-based animations and art in realtime with minimal code.\n\nLottie loads and renders animations and vectors exported in the bodymovin JSON format. Bodymovin JSON can be created and exported from After Effects with [bodymovin](https://github.com/bodymovin/bodymovin), Sketch with [Lottie Sketch Export](https://github.com/buba447/Lottie-Sketch-Export), and from [Haiku](https://www.haikuanimator.com).\n\nDesigners can create **and ship** beautiful animations without an engineer painstakingly recreating them by hand.\nSince the animations are backed by JSON, they are extremely small in size but can be large in complexity!\nAnimations can be played, resized, looped, sped up, slowed down, reversed, and even interactively scrubbed.\nLottie can play or loop just a portion of the animation as well, the possibilities are endless!\nAnimations can even be ***changed at runtime*** in various ways! Change the color, position, or any keyframable value!\n\nHere is just a small sampling of the power of Lottie\n\n![Example1](_Gifs/Examples1.gif)\n![Example2](_Gifs/Examples2.gif)\n\n<img src=\"_Gifs/Community 2_3.gif\" />\n\n![Example3](_Gifs/Examples3.gif)\n\n![Abcs](_Gifs/Examples4.gif)\n\n## Installing Lottie\nLottie supports [Swift Package Manager](https://www.swift.org/package-manager/), [CocoaPods](https://cocoapods.org/), and [Carthage](https://github.com/Carthage/Carthage) (Both dynamic and static).\n\n### Github Repo\n\nYou can pull the [Lottie Github Repo](https://github.com/airbnb/lottie-ios/) and include the `Lottie.xcodeproj` to build a dynamic or static library.\n\n### Swift Package Manager\n\nTo install Lottie using [Swift Package Manager](https://github.com/swiftlang/swift-package-manager) you can follow the [tutorial published by Apple](https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app) using the URL for the Lottie repo with the current version:\n\n1. In Xcode, select “File” → “Add Packages...”\n1. Enter https://github.com/airbnb/lottie-spm.git\n\nor you can add the following dependency to your `Package.swift`:\n\n```swift\n.package(url: \"https://github.com/airbnb/lottie-spm.git\", from: \"4.5.0\")\n```\n\nWhen using Swift Package Manager we recommend using the [lottie-spm](https://github.com/airbnb/lottie-spm) repo instead of the main lottie-ios repo.  The main git repository for [lottie-ios](https://github.com/airbnb/lottie-ios) is somewhat large (300+ MB), and Swift Package Manager always downloads the full repository with all git history. The [lottie-spm](https://github.com/airbnb/lottie-spm) repo is much smaller (less than 500kb), so can be downloaded much more quickly. \n\nInstead of downloading the full git history of Lottie and building it from source, the lottie-spm repo just contains a pointer to the precompiled XCFramework included in the [latest lottie-ios release](https://github.com/airbnb/lottie-ios/releases/latest) (typically ~8MB). If you prefer to include Lottie source directly your project, you can directly depend on the main lottie-ios repo by referencing `https://github.com/airbnb/lottie-ios.git` instead.\n\n### CocoaPods\nAdd the pod to your Podfile:\n```ruby\npod 'lottie-ios'\n```\n\nAnd then run:\n```ruby\npod install\n```\nAfter installing the cocoapod into your project import Lottie with\n```swift\nimport Lottie\n```\n\n### Carthage\nAdd Lottie to your Cartfile:\n```\ngithub \"airbnb/lottie-ios\" \"master\"\n```\n\nAnd then run:\n```\ncarthage update\n```\nIn your application targets “General” tab under the “Linked Frameworks and Libraries” section, drag and drop lottie-ios.framework from the Carthage/Build/iOS directory that `carthage update` produced.\n\n## Swift Version Support\n\nLottie supports Swift / Xcode versions back to the minimum version that is permitted by Apple for submissions to the App Store. You can see the most up-to-date information for which Swift versions Lottie supports on [Swift Package Index](https://swiftpackageindex.com/airbnb/lottie-ios):\n\n[![Swift Versions](https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fairbnb%2Flottie-ios%2Fbadge%3Ftype%3Dswift-versions)](https://swiftpackageindex.com/airbnb/lottie-ios)\n\n## Privacy\n\nLottie does not collect any data. We provide this notice to help you fill out [App Privacy Details](https://developer.apple.com/app-store/app-privacy-details/). We additionally provide a [privacy manifest](https://github.com/airbnb/lottie-ios/blob/master/Sources/PrivacyInfo.xcprivacy) which can be included in your app.\n\n## Security\n\nWe distribute XCFramework bundles for each release on [GitHub](https://github.com/airbnb/lottie-ios/releases/latest). In Lottie 4.4.0 and later, these XCFramework bundles include a [code signature](https://developer.apple.com/documentation/xcode/verifying-the-origin-of-your-xcframeworks). These bundles are self-signed under the name \"Lottie iOS\" and have the following fingerprint:\n\n```\n89 2F 1B 43 04 7B 50 53 8F 2F 46 EA D9 29 00 DD 3D 48 11 F358 21 78 C0 61 A5 FB 20 F1 11 CB 26\n```\n\nIn Xcode you can verify this by selecting `Lottie.xcframework` and confirming that it shows the following information:\n\n![Code Signature in Xcode](_Gifs/code_signature.png)\n\n## Contributing\n\nWe always appreciate contributions from the community. To make changes to the project, you can clone the repo and open `Lottie.xcworkspace`. This workspace includes:\n - the Lottie framework (for iOS, macOS, and tvOS)\n - unit tests and snapshot tests (for iOS, must be run on an iPhone 8 simulator)\n - an Example iOS app that lets you browse and test over 100 sample animations included in the repo\n\nAll pull requests with new features or bug fixes that affect how animations render should include snapshot test cases that validate the included changes. \n  - To add a new sample animation to the snapshot testing suite, you can add the `.json` file to `Tests/Samples`. Re-run the snapshot tests to generate the new snapshot image files.\n  - To update existing snapshots after making changes, you can set `isRecording = true` in `SnapshotTests.swift` `setUp()` method and then re-run the snapshot tests.\n\nThe project also includes several helpful commands defined in our [Rakefile](https://github.com/airbnb/lottie-ios/blob/master/Rakefile). To use these, you need to install [Bundler](https://bundler.io/):\n\n```bash\n$ sudo gem install bundle\n$ bundle install\n```\n\nFor example, all Swift code should be formatted according to the [Airbnb Swift Style Guide](https://github.com/airbnb/swift). After making changes, you can reformat the code automatically using [SwiftFormat](https://github.com/nicklockwood/SwiftFormat) and [SwiftLint](https://github.com/realm/SwiftLint) by running `bundle exec rake format:swift`. Other helpful commands include:\n\n```bash\n$ bundle exec rake build:all # builds all targets for all platforms\n$ bundle exec rake build:package:iOS # builds the Lottie package for iOS\n$ bundle exec rake test:package # tests the Lottie package\n$ bundle exec rake format:swift # reformat Swift code based on the Airbnb Swift Style Guide\n```\n"
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 12.13,
          "content": "require 'json'\nrequire 'git'\n\nnamespace :build do\n  desc 'Builds all packages and executables'\n  task all: ['package:all', 'example:all', 'xcframework']\n\n  desc 'Builds the Lottie package for supported platforms'\n  namespace :package do\n    desc 'Builds the Lottie package for all supported platforms'\n    task all: ['iOS', 'macOS', 'tvOS', 'visionOS']\n\n    desc 'Builds the Lottie package for iOS'\n    task :iOS do\n      xcodebuild('build -scheme \"Lottie (iOS)\" -destination generic/platform=iOS -workspace Lottie.xcworkspace OTHER_SWIFT_FLAGS=\"-warnings-as-errors\"')\n    end\n\n    desc 'Builds the Lottie package for macOS'\n    task :macOS do\n      xcodebuild('build -scheme \"Lottie (macOS)\" -destination generic/platform=macOS -workspace Lottie.xcworkspace OTHER_SWIFT_FLAGS=\"-warnings-as-errors\"')\n    end\n\n    desc 'Builds the Lottie package for tvOS'\n    task :tvOS do\n      xcodebuild('build -scheme \"Lottie (tvOS)\" -destination generic/platform=tvOS -workspace Lottie.xcworkspace OTHER_SWIFT_FLAGS=\"-warnings-as-errors\"')\n    end\n\n    desc 'Builds the Lottie package for visionOS'\n    task :visionOS do\n      ifVisionOSEnabled {\n        xcodebuild('build -scheme \"Lottie (visionOS)\" -destination generic/platform=visionOS -workspace Lottie.xcworkspace OTHER_SWIFT_FLAGS=\"-warnings-as-errors\"')\n      }\n    end\n  end\n\n  desc 'Builds the Lottie example app for supported platforms'\n  namespace :example do\n    desc 'Builds the Lottie example apps for all supported platforms'\n    task all: ['iOS', 'macOS', 'tvOS', 'visionOS']\n\n    desc 'Builds the iOS Lottie Example app'\n    task :iOS do\n      xcodebuild('build -scheme \"Example (Multiplatform)\" -destination \"platform=iOS Simulator,name=iPhone SE (3rd generation)\" -workspace Lottie.xcworkspace')\n    end\n\n    desc 'Builds the macOS Lottie Example app'\n    task :macOS do\n      xcodebuild('build -scheme \"Example (Multiplatform)\" -workspace Lottie.xcworkspace')\n    end\n\n    desc 'Builds the tvOS Lottie Example app'\n    task :tvOS do\n      xcodebuild('build -scheme \"Example (Multiplatform)\" -destination \"platform=tvOS Simulator,name=Apple TV\" -workspace Lottie.xcworkspace')\n    end\n\n    desc 'Builds the visionOS Lottie Example app'\n    task :visionOS do\n      ifVisionOSEnabled {\n        xcodebuild('build -scheme \"Example (Multiplatform)\" -destination \"platform=visionOS Simulator,name=Apple Vision Pro\" -workspace Lottie.xcworkspace')\n      }\n    end\n  end\n\n  desc 'Builds an xcframework for all supported platforms'\n  task :xcframework, [:zip_archive_name] do |_t, args|\n    args.with_defaults(:zip_archive_name => 'Lottie')\n\n    sh 'rm -rf .build/archives'\n\n    # Build the framework for each supported platform, including simulators\n    xcodebuild('archive -workspace Lottie.xcworkspace -scheme \"Lottie (iOS)\" -destination generic/platform=iOS -archivePath \".build/archives/Lottie_iOS\" SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES ENABLE_BITCODE=NO SWIFT_SERIALIZE_DEBUGGING_OPTIONS=NO')\n    xcodebuild('archive -workspace Lottie.xcworkspace -scheme \"Lottie (iOS)\" -destination \"generic/platform=iOS Simulator\" -archivePath \".build/archives/Lottie_iOS_Simulator\" SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES ENABLE_BITCODE=NO SWIFT_SERIALIZE_DEBUGGING_OPTIONS=NO')\n    xcodebuild('archive -workspace Lottie.xcworkspace -scheme \"Lottie (iOS)\" -destination \"generic/platform=macOS,variant=Mac Catalyst\" -archivePath \".build/archives/Lottie_Mac_Catalyst\" SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES ENABLE_BITCODE=NO SWIFT_SERIALIZE_DEBUGGING_OPTIONS=NO')\n    xcodebuild('archive -workspace Lottie.xcworkspace -scheme \"Lottie (macOS)\" -destination generic/platform=macOS -archivePath \".build/archives/Lottie_macOS\" SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES ENABLE_BITCODE=NO SWIFT_SERIALIZE_DEBUGGING_OPTIONS=NO')\n    xcodebuild('archive -workspace Lottie.xcworkspace -scheme \"Lottie (tvOS)\" -destination generic/platform=tvOS -archivePath \".build/archives/Lottie_tvOS\" SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES ENABLE_BITCODE=NO SWIFT_SERIALIZE_DEBUGGING_OPTIONS=NO')\n    xcodebuild('archive -workspace Lottie.xcworkspace -scheme \"Lottie (tvOS)\" -destination \"generic/platform=tvOS Simulator\" -archivePath \".build/archives/Lottie_tvOS_Simulator\" SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES ENABLE_BITCODE=NO SWIFT_SERIALIZE_DEBUGGING_OPTIONS=NO')\n\n    ifVisionOSEnabled {\n      xcodebuild('archive -workspace Lottie.xcworkspace -scheme \"Lottie (visionOS)\" -destination generic/platform=visionOS -archivePath \".build/archives/Lottie_visionOS\" SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES ENABLE_BITCODE=NO SWIFT_SERIALIZE_DEBUGGING_OPTIONS=NO')\n      xcodebuild('archive -workspace Lottie.xcworkspace -scheme \"Lottie (visionOS)\" -destination \"generic/platform=visionOS Simulator\" -archivePath \".build/archives/Lottie_visionOS_Simulator\" SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES ENABLE_BITCODE=NO SWIFT_SERIALIZE_DEBUGGING_OPTIONS=NO')\n    }\n\n    # Combine all of the platforms into a single XCFramework\n    xcframeworkInvocation = [\n      '-create-xcframework',\n      '-archive .build/archives/Lottie_iOS.xcarchive -framework Lottie.framework',\n      '-archive .build/archives/Lottie_iOS_Simulator.xcarchive -framework Lottie.framework',\n      '-archive .build/archives/Lottie_Mac_Catalyst.xcarchive -framework Lottie.framework',\n      '-archive .build/archives/Lottie_tvOS.xcarchive -framework Lottie.framework',\n      '-archive .build/archives/Lottie_tvOS_Simulator.xcarchive -framework Lottie.framework',\n      '-archive .build/archives/Lottie_macOS.xcarchive -framework Lottie.framework',\n    ]\n\n    ifVisionOSEnabled {\n      xcframeworkInvocation.push('-archive .build/archives/Lottie_visionOS.xcarchive -framework Lottie.framework')\n      xcframeworkInvocation.push('-archive .build/archives/Lottie_visionOS_Simulator.xcarchive -framework Lottie.framework')\n    }\n\n    xcframeworkInvocation.push('-output .build/archives/Lottie.xcframework')\n\n    xcodebuild(xcframeworkInvocation.join(\" \"))\n\n    Dir.chdir('.build/archives') do\n      # Codesign the XCFramework using the \"Lottie iOS\" certificate, which should be installed in the keychain.\n      #  - Check to make sure the certificate is installed before attemtping to codesign.\n      #  - In GitHub actions CI, only jobs run by contibutors have access to repo secrets,\n      #    so PR jobs from external contributors won't have access to this certificate.\n      #    In that case we skip codesigning so the job doesn't fail.\n      puts \"Checking if signing certificate is installed...\"\n      `security find-certificate -c 'Lottie iOS'`\n      if $?.success?\n        puts \"Signing certificate is installed. Code signing Lottie.xcframework.\"\n        sh 'codesign --timestamp -v --sign \"Lottie iOS\" Lottie.xcframework'\n      else\n        puts \"Signing certificate is not installed. Lottie.xcframework will not be code signed.\"\n      end\n\n      # Archive the XCFramework into a zip file\n      # Use --symlinks to avoid \"Multiple binaries share the same codesign path. This can happen if your build process copies frameworks by following symlinks.\" \n      # error when validating macOS apps (#1948)\n      sh \"zip -r --symlinks #{args[:zip_archive_name]}.xcframework.zip Lottie.xcframework\"\n      sh 'rm -rf Lottie.xcframework'\n    end\n\n    sh \"swift package compute-checksum .build/archives/#{args[:zip_archive_name]}.xcframework.zip\"\n  end\nend\n\nnamespace :test do\n  desc 'Tests the Lottie package for iOS'\n  task :package do\n    sh 'rm -rf Tests/Artifacts'\n    xcodebuild('test -scheme \"Lottie (iOS)\" -destination \"platform=iOS Simulator,name=iPhone SE (3rd generation)\" -resultBundlePath Tests/Artifacts/LottieTests.xcresult')\n  end\n\n  desc 'Processes .xcresult artifacts from the most recent test:package execution'\n  task :process do\n    sh 'mint run ChargePoint/xcparse@2.3.1 xcparse attachments Tests/Artifacts/LottieTests.xcresult Tests/Artifacts/TestAttachments'\n  end\n\n  desc 'Tests Carthage support'\n  task :carthage do\n    # Copy the repo to `Carthage/Checkouts/Lottie-ios`\n    sh 'rm -rf script/test-carthage/Carthage'\n    sh 'mkdir script/test-carthage/Carthage script/test-carthage/Carthage/Checkouts script/test-carthage/Carthage/Checkouts/lottie-ios'\n    sh 'cp -R [^script]* script/test-carthage/Carthage/Checkouts/lottie-ios'\n\n    Dir.chdir('script/test-carthage') do\n      # Build the Lottie framework scheme\n      sh 'carthage build --use-xcframeworks'\n\n      # Delete Carthage's derived data to verify that the built .xcframework doesn't depend on any\n      # side effects from building on this specific machine.\n      # https://github.com/airbnb/lottie-ios/issues/1492\n      sh 'rm -rf ~/Library/Caches/org.carthage.CarthageKit/DerivedData'\n\n      # Build a test app that imports and uses the Lottie framework built via Carthage\n      xcodebuild('build -scheme CarthageTest  -destination \"platform=iOS Simulator,name=iPhone SE (3rd generation)\"')\n      xcodebuild('build -scheme CarthageTest -destination generic/platform=macOS')\n      xcodebuild('build -scheme CarthageTest -destination \"platform=tvOS Simulator,name=Apple TV\"')\n      xcodebuild('build -scheme CarthageTest -destination \"platform=visionOS Simulator,name=Apple Vision Pro\"')\n    end\n  end\n\n  desc 'Tests Swift Package Manager support'\n  task :spm do\n    Dir.chdir('script/test-spm') do\n      # Build for iOS, macOS, and tvOS using the targets defined in Package.swift\n      xcodebuild('build -scheme \"Lottie\" -destination generic/platform=iOS')\n      xcodebuild('build -scheme \"Lottie\" -destination generic/platform=macOS')\n      xcodebuild('build -scheme \"Lottie\" -destination generic/platform=tvOS')\n\n      ifVisionOSEnabled {\n        xcodebuild('build -scheme \"Lottie\" -destination generic/platform=visionOS')\n      }\n    end\n  end\nend\n\nnamespace :lint do\n  desc 'Lints swift files'\n  task :swift do\n    sh 'swift package --allow-writing-to-package-directory format --lint'\n  end\n\n  desc 'Lints the CocoaPods podspec'\n  task :podspec do\n    sh 'pod lib lint lottie-ios.podspec'\n  end\n\n  desc 'Lints the EmbeddedLibraries directory'\n  task :EmbeddedLibraries do\n    sh 'echo \"Linting /Sources/Private/EmbeddedLibraries (should not contain any public symbols)\"'\n    sh '! grep -r \"public\" Sources/Private/EmbeddedLibraries --include \\*.swift'\n  end\nend\n\nnamespace :format do\n  desc 'Formats swift files'\n  task :swift do\n    sh 'swift package --allow-writing-to-package-directory format'\n  end\nend\n\nnamespace :emerge do\n  desc 'Uploads to emerge'\n  task :upload do\n    xcodebuild('build -scheme \"SizeTest\" -destination generic/platform=iOS -project script/SizeTest/SizeTest.xcodeproj -archivePath test.xcarchive archive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO')\n    sh \"zip -r -qq test.zip test.xcarchive\"\n\n    g = Git.open('.')\n\n    upload_data = {\n      repoName: 'airbnb/lottie-ios',\n      filename: 'test.zip'\n    }\n    if ENV[\"PR_NUMBER\"] != \"\" && ENV[\"PR_NUMBER\"] != \"false\"\n      upload_data[:sha] = g.log[0].parents[1].sha\n      upload_data[:baseSha] = g.log[0].parent.sha\n      upload_data[:prNumber] = ENV[\"PR_NUMBER\"]\n      upload_data[:buildType] = 'pull_request'\n    else\n      upload_data[:sha] = g.log[0].sha\n      upload_data[:buildType] = 'master'\n    end\n    api_token = ENV['EMERGE_API_TOKEN']\n    if api_token.nil? || api_token.empty?\n      puts \"Skipping Emerge upload because API token was not provided.\"\n      next\n    end\n    api_token_header = \"X-API-Token: #{api_token}\"\n    url = \"https://api.emergetools.com/upload\"\n    cmd = \"curl --fail -s --request POST --url #{url} --header 'Accept: application/json' --header 'Content-Type: application/json' --header '#{api_token_header}' --data '#{upload_data.to_json}'\"\n    upload_json = %x(#{cmd})\n    upload_url = JSON.parse(upload_json)['uploadURL']\n    %x(curl --fail -s -H 'Content-Type: application/zip' -T test.zip '#{upload_url}')\n  end\nend\n\ndef xcodebuild(command)\n  # Check if the mint tool is installed -- if so, pipe the xcodebuild output through xcbeautify\n  `which mint`\n\n  if $?.success?\n    sh \"set -o pipefail && xcodebuild #{command} | mint run thii/xcbeautify@0.10.2\"\n  else\n    sh \"xcodebuild #{command}\"\n  end\nend\n\n# Runs the given code block, unless `SKIP_VISION_OS=true`.\n# TODO: Remove this once Lottie only supports Xcode 15.2+.\ndef ifVisionOSEnabled\n  if ENV[\"SKIP_VISION_OS\"] == \"true\"\n    puts \"Skipping visionOS build\"\n  else\n    yield\n  end\nend"
        },
        {
          "name": "Sources",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "Version.xcconfig",
          "type": "blob",
          "size": 0.28,
          "content": "// Created by Cal Stephens on 3/12/24.\n// Copyright © 2024 Airbnb Inc. All rights reserved.\n\n// The version numbers used when building Lottie.xcframework\nMARKETING_VERSION = 4.5.1\nCURRENT_PROJECT_VERSION = 451 // a three-digit representation of the marketing version, without dots.\n"
        },
        {
          "name": "_AeFiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "_Gifs",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 0.08,
          "content": "throw new Error('NPM Module \\'lottie-ios\\' has no main JavaScript export.');\n"
        },
        {
          "name": "lottie-ios.podspec",
          "type": "blob",
          "size": 2.01,
          "content": "#\n# Be sure to run `pod lib lint lottie-ios.podspec' to ensure this is a\n# valid spec before submitting.\n#\n# Any lines starting with a # are optional, but their use is encouraged\n# To learn more about a Podspec see https://guides.cocoapods.org/syntax/podspec.html\n#\n\nPod::Spec.new do |s|\n  s.name             = 'lottie-ios'\n  s.version          = '4.5.1'\n  s.summary          = 'A library to render native animations from bodymovin json'\n\n  s.description = <<-DESC\nLottie is a mobile library for Android and iOS that parses Adobe After Effects animations exported as json with bodymovin and renders the vector animations natively on mobile and through React Native!\n\nLottie enables designers to create and ship beautiful animations without an engineer painstakingly recreating it be hand. Since the animation is backed by JSON they are extremely small in size but can be large in complexity! Animations can be played, resized, looped, sped up, slowed down, and even interactively scrubbed.\n  DESC\n\n  s.homepage         = 'https://github.com/airbnb/lottie-ios'\n  s.license          = { :type => 'Apache', :file => 'LICENSE' }\n  s.author           = { 'Brandon Withrow' => 'buba447@gmail.com', 'Cal Stephens' => 'cal.stephens@airbnb.com' }\n  s.source           = { :git => 'https://github.com/airbnb/lottie-ios.git', :tag => s.version.to_s }\n\n  s.swift_version = '5.9'\n  s.ios.deployment_target = '13.0'\n  s.osx.deployment_target = '10.15'\n  s.tvos.deployment_target = '13.0'\n  s.visionos.deployment_target = \"1.0\"\n\n  s.source_files = 'Sources/**/*.swift'\n  s.resource_bundles = {\n    'LottiePrivacyInfo' => ['Sources/PrivacyInfo.xcprivacy'],\n  }\n  s.ios.exclude_files = 'Sources/Public/MacOS/**/*'\n  s.tvos.exclude_files = 'Sources/Public/MacOS/**/*'\n  s.osx.exclude_files = 'Sources/Public/iOS/**/*'\n\n  s.ios.frameworks = ['UIKit', 'CoreGraphics', 'QuartzCore']\n  s.tvos.frameworks = ['UIKit', 'CoreGraphics', 'QuartzCore']\n  s.osx.frameworks = ['AppKit', 'CoreGraphics', 'QuartzCore']\n  s.weak_frameworks = ['SwiftUI', 'Combine']\n  s.module_name = 'Lottie'\nend\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.71,
          "content": "{\n  \"name\": \"lottie-ios\",\n  \"version\": \"4.5.1\",\n  \"description\": \"Lottie is a mobile library for Android and iOS that parses Adobe After Effects animations exported as json with bodymovin and renders the vector animations natively on mobile and through React Native!\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/airbnb/lottie-ios.git\"\n  },\n  \"author\": \"Brandon Withrow <buba447@gmail.com>, Cal Stephens <cal.stephens@airbnb.com>\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/airbnb/lottie-ios/issues\"\n  },\n  \"homepage\": \"https://github.com/airbnb/lottie-ios#readme\"\n}\n"
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}