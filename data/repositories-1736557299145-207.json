{
  "metadata": {
    "timestamp": 1736557299145,
    "page": 207,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spring-projects/spring-framework",
      "stars": 57089,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.23,
          "content": "root = true\n\n[*.{adoc,bat,groovy,html,java,js,jsp,kt,kts,md,properties,py,rb,sh,sql,svg,txt,xml,xsd}]\ncharset = utf-8\n\n[*.{groovy,java,kt,kts,xml,xsd}]\nindent_style = tab\nindent_size = 4\ncontinuation_indent_size = 8\nend_of_line = lf\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.35,
          "content": "# Normalize line endings to LF.\n* text eol=lf\n\n# Ensure that line endings for multipart files in spring-web are not modified.\n*.multipart -text\n\n# Ensure that line endings for DOS batch files are not modified.\n*.bat -text\n\n# Ensure the following are treated as binary.\n*.gif   binary\n*.jar   binary\n*.jpeg  binary\n*.jpg   binary\n*.png   binary\n*.vsd   binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.67,
          "content": "# Miscellaneous\n*.java.hsp\n*.sonarj\n*.sw*\n.DS_Store\nbuild.sh\nintegration-repo\nivy-cache\nargfile*\nactivemq-data/\nclasses/\n\n# Log files\njxl.log\njmx.log\nderby.log\n\n# Gradle artifacts\n.gradle\n.gradletasknamecache\n/build\nbuildSrc/build\n/spring-*/build\n/framework-*/build\n/integration-tests/build\n/src/asciidoc/build\nspring-test/test-output/\n\n# Maven artifacts\npom.xml\n/target/\n\n# Eclipse artifacts, including WTP generated manifests\nbin\n.classpath\n.project\n.settings\n.springBeans\nspring-*/src/main/java/META-INF/MANIFEST.MF\n\n# IDEA artifacts and output dirs\n*.iml\n*.ipr\n*.iws\n.idea\nout\ntest-output\natlassian-ide-plugin.xml\n\n# VS Code\n.vscode/\n\ncached-antora-playbook.yml\n\nnode_modules\n/.kotlin/\n"
        },
        {
          "name": ".sdkmanrc",
          "type": "blob",
          "size": 0.11,
          "content": "# Enable auto-env through the sdkman_auto_env config\n# Add key=value pairs of SDKs to use below\njava=23.0.1-librca\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.92,
          "content": "# Contributing  to the Spring Framework\n\nFirst off, thank you for taking the time to contribute! :+1: :tada: \n\n### Table of Contents\n\n* [Code of Conduct](#code-of-conduct)\n* [How to Contribute](#how-to-contribute)\n  * [Ask questions](#ask-questions)\n  * [Create an Issue](#create-an-issue)\n  * [Issue Lifecycle](#issue-lifecycle)\n  * [Submit a Pull Request](#submit-a-pull-request)\n* [Build from Source](#build-from-source)\n* [Source Code Style](#source-code-style)\n* [Reference Docs](#reference-docs)\n\n### Code of Conduct\n\nThis project is governed by the [Spring Code of Conduct](https://github.com/spring-projects/spring-framework#coc-ov-file).\nBy participating you are expected to uphold this code.\nPlease report unacceptable behavior to spring-code-of-conduct@spring.io.\n\n### How to Contribute\n\n#### Ask questions\n\nIf you have a question, check Stack Overflow using\n[this list of tags](https://stackoverflow.com/questions/tagged/spring+or+spring-mvc+or+spring-aop+or+spring-jdbc+or+spring-transactions+or+spring-annotations+or+spring-jms+or+spring-el+or+spring-test+or+spring+or+spring-remoting+or+spring-orm+or+spring-jmx+or+spring-cache+or+spring-webflux?tab=Newest). Find an existing discussion, or start a new one if necessary.\n\nIf you believe there is an issue, search through\n[existing issues](https://github.com/spring-projects/spring-framework/issues) trying a\nfew different ways to find discussions, past or current, that are related to the issue.\nReading those discussions helps you to learn about the issue, and helps us to make a\ndecision.\n\n\n#### Create an Issue\n\nReporting an issue or making a feature request is a great way to contribute. Your feedback\nand the conversations that result from it provide a continuous flow of ideas. However,\nbefore creating a ticket, please take the time to [ask and research](#ask-questions) first.\n\nIf you create an issue after a discussion on Stack Overflow, please provide a description\nin the issue instead of simply referring to Stack Overflow. The issue tracker is an\nimportant place of record for design discussions and should be self-sufficient.\n\nOnce you're ready, create an issue on [GitHub](https://github.com/spring-projects/spring-framework/issues).\n\nMany issues are caused by subtle behavior, typos, and unintended configuration.\nCreating a [Minimal Reproducible Example](https://stackoverflow.com/help/minimal-reproducible-example)\n(starting with https://start.spring.io for example) of the problem helps the team\nquickly triage your issue and get to the core of the problem.\n\n#### Issue Lifecycle\n\nWhen an issue is first created, it is flagged `waiting-for-triage` waiting for a team\nmember to triage it. Once the issue has been reviewed, the team may ask for further\ninformation if needed, and based on the findings, the issue is either assigned a target\nmilestone or is closed with a specific status.\n\nWhen a fix is ready, the issue is closed and may still be re-opened until the fix is\nreleased. After that the issue will typically no longer be reopened. In rare cases if the\nissue was not at all fixed, the issue may be re-opened. In most cases however any\nfollow-up reports will need to be created as new issues with a fresh description.\n\n#### Submit a Pull Request\n\n1. Should you create an issue first? No, just create the pull request and use the\ndescription to provide context and motivation, as you would for an issue. If you want\nto start a discussion first or have already created an issue, once a pull request is\ncreated, we will close the issue as superseded by the pull request, and the discussion\nabout the issue will continue under the pull request.\n\n1. Always check out the `main` branch and submit pull requests against it\n(for target version see [settings.gradle](settings.gradle)).\nBackports to prior versions will be considered on a case-by-case basis and reflected as\nthe fix version in the issue tracker.\n\n1. Choose the granularity of your commits consciously and squash commits that represent\nmultiple edits or corrections of the same logical change. See\n[Rewriting History section of Pro Git](https://git-scm.com/book/en/Git-Tools-Rewriting-History)\nfor an overview of streamlining the commit history.\n\n1. All commits must include a _Signed-off-by_ trailer at the end of each commit message\nto indicate that the contributor agrees to the Developer Certificate of Origin.\nFor additional details, please refer to the blog post\n[Hello DCO, Goodbye CLA: Simplifying Contributions to Spring](https://spring.io/blog/2025/01/06/hello-dco-goodbye-cla-simplifying-contributions-to-spring).\n\n1. Format commit messages using 55 characters for the subject line, 72 characters per line\nfor the description, followed by the issue fixed, for example, `Closes gh-22276`. See the\n[Commit Guidelines section of Pro Git](https://git-scm.com/book/en/Distributed-Git-Contributing-to-a-Project#Commit-Guidelines)\nfor best practices around commit messages, and use `git log` to see some examples.\n\n1. If there is a prior issue, reference the GitHub issue number in the description of the\npull request.\n\nIf accepted, your contribution may be heavily modified as needed prior to merging.\nYou will likely retain author attribution for your Git commits granted that the bulk of\nyour changes remain intact. You may also be asked to rework the submission.\n\nIf asked to make corrections, simply push the changes against the same branch, and your\npull request will be updated. In other words, you do not need to create a new pull request\nwhen asked to make changes.\n\n#### Participate in Reviews\n\nHelping to review pull requests is another great way to contribute. Your feedback\ncan help to shape the implementation of new features. When reviewing pull requests,\nhowever, please refrain from approving or rejecting a PR unless you are a core\ncommitter for the Spring Framework.\n\n### Build from Source\n\nSee the [Build from Source](https://github.com/spring-projects/spring-framework/wiki/Build-from-Source)\nwiki page for instructions on how to check out, build, and import the Spring Framework\nsource code into your IDE.\n\n### Source Code Style\n\nThe wiki pages\n[Code Style](https://github.com/spring-projects/spring-framework/wiki/Code-Style) and\n[IntelliJ IDEA Editor Settings](https://github.com/spring-projects/spring-framework/wiki/IntelliJ-IDEA-Editor-Settings)\ndefine the source file coding standards we use along with some IDEA editor settings we customize.\n\n### Reference Docs\n\nThe reference documentation is authored in [Asciidoctor](https://asciidoctor.org/) format\nusing [Antora](https://docs.antora.org/antora/latest/). The source files for the documentation\nreside in the [framework-docs/modules/ROOT](framework-docs/modules/ROOT) directory. For\ntrivial changes, you may be able to browse, edit source files, and submit directly from GitHub.\n\nWhen making changes locally, execute `./gradlew antora` and then browse the results under\n`framework-docs/build/site/index.html`.\n\nAsciidoctor also supports live editing. For more details see\n[AsciiDoc Tooling](https://docs.asciidoctor.org/asciidoctor/latest/tooling/).\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.09,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        https://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       https://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.99,
          "content": "# <img src=\"framework-docs/src/docs/spring-framework.png\" width=\"80\" height=\"80\"> Spring Framework [![Build Status](https://github.com/spring-projects/spring-framework/actions/workflows/build-and-deploy-snapshot.yml/badge.svg?branch=main)](https://github.com/spring-projects/spring-framework/actions/workflows/build-and-deploy-snapshot.yml?query=branch%3Amain) [![Revved up by Develocity](https://img.shields.io/badge/Revved%20up%20by-Develocity-06A0CE?logo=Gradle&labelColor=02303A)](https://ge.spring.io/scans?search.rootProjectNames=spring)\n\nThis is the home of the Spring Framework: the foundation for all [Spring projects](https://spring.io/projects). Collectively the Spring Framework and the family of Spring projects are often referred to simply as \"Spring\". \n\nSpring provides everything required beyond the Java programming language for creating enterprise applications for a wide range of scenarios and architectures. Please read the [Overview](https://docs.spring.io/spring-framework/reference/overview.html) section of the reference documentation for a more complete introduction.\n\n## Code of Conduct\n\nThis project is governed by the [Spring Code of Conduct](https://github.com/spring-projects/spring-framework/?tab=coc-ov-file#contributor-code-of-conduct). By participating, you are expected to uphold this code of conduct. Please report unacceptable behavior to spring-code-of-conduct@spring.io.\n\n## Access to Binaries\n\nFor access to artifacts or a distribution zip, see the [Spring Framework Artifacts](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Artifacts) wiki page.\n\n## Documentation\n\nThe Spring Framework maintains reference documentation ([published](https://docs.spring.io/spring-framework/reference/) and [source](framework-docs/modules/ROOT)), GitHub [wiki pages](https://github.com/spring-projects/spring-framework/wiki), and an\n[API reference](https://docs.spring.io/spring-framework/docs/current/javadoc-api/). There are also [guides and tutorials](https://spring.io/guides) across Spring projects.\n\n## Micro-Benchmarks\n\nSee the [Micro-Benchmarks](https://github.com/spring-projects/spring-framework/wiki/Micro-Benchmarks) wiki page.\n\n## Build from Source\n\nSee the [Build from Source](https://github.com/spring-projects/spring-framework/wiki/Build-from-Source) wiki page and the [CONTRIBUTING.md](CONTRIBUTING.md) file.\n\n## Continuous Integration Builds\n\nInformation regarding CI builds can be found in the [Spring Framework Concourse pipeline](ci/README.adoc) documentation.\n\n## Stay in Touch\n\nFollow [@SpringCentral](https://twitter.com/springcentral), [@SpringFramework](https://twitter.com/springframework), and its [team members](https://twitter.com/springframework/lists/team/members) on 𝕏. In-depth articles can be found at [The Spring Blog](https://spring.io/blog/), and releases are announced via our [releases feed](https://spring.io/blog/category/releases).\n\n## License\n\nThe Spring Framework is released under version 2.0 of the [Apache License](https://www.apache.org/licenses/LICENSE-2.0).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.6,
          "content": "# Reporting a Vulnerability\n\nPlease, [open a draft security advisory](https://github.com/spring-projects/security-advisories/security/advisories/new) if you need to disclose and discuss a security issue in private with the Spring Framework team. Note that we only accept reports against [supported versions](https://spring.io/projects/spring-framework#support).\n\nFor more details, check out our [security policy](https://spring.io/security-policy).\n\n## JAR signing\n\nSpring Framework JARs released on Maven Central are signed.\nYou'll find more information about the key here: https://spring.io/GPG-KEY-spring.txt\n"
        },
        {
          "name": "build.gradle",
          "type": "blob",
          "size": 4.22,
          "content": "plugins {\n\tid 'io.freefair.aspectj' version '8.4' apply false\n\t// kotlinVersion is managed in gradle.properties\n\tid 'org.jetbrains.kotlin.plugin.serialization' version \"${kotlinVersion}\" apply false\n\tid 'org.jetbrains.dokka' version '1.9.20'\n\tid 'com.github.ben-manes.versions' version '0.51.0'\n\tid 'com.github.bjornvester.xjc' version '1.8.2' apply false\n\tid 'de.undercouch.download' version '5.4.0'\n\tid 'io.github.goooler.shadow' version '8.1.8' apply false\n\tid 'me.champeau.jmh' version '0.7.2' apply false\n\tid 'me.champeau.mrjar' version '0.1.1'\n\tid \"net.ltgt.errorprone\" version \"3.1.0\" apply false\n}\n\next {\n\tmoduleProjects = subprojects.findAll { it.name.startsWith(\"spring-\") }\n\tjavaProjects = subprojects.findAll { !it.name.startsWith(\"framework-\") }\n}\n\ndescription = \"Spring Framework\"\n\nconfigure(allprojects) { project ->\n\tapply plugin: \"org.springframework.build.localdev\"\n\tgroup = \"org.springframework\"\n\trepositories {\n\t\tmavenCentral()\n\t\tmaven {\n\t\t\turl = \"https://repo.spring.io/milestone\"\n\t\t\tcontent {\n\t\t\t\t// Netty 5 optional support\n\t\t\t\tincludeGroup 'io.projectreactor.netty'\n\t\t\t}\n\t\t}\n\t\tif (version.contains('-')) {\n\t\t\tmaven { url = \"https://repo.spring.io/milestone\" }\n\t\t}\n\t\tif (version.endsWith('-SNAPSHOT')) {\n\t\t\tmaven { url = \"https://repo.spring.io/snapshot\" }\n\t\t}\n\t}\n\tconfigurations.all {\n\t\tresolutionStrategy {\n\t\t\tcacheChangingModulesFor 0, \"seconds\"\n\t\t\tcacheDynamicVersionsFor 0, \"seconds\"\n\t\t}\n\t}\n}\n\nconfigure(allprojects - project(\":framework-platform\")) {\n\tconfigurations {\n\t\tdependencyManagement {\n\t\t\tcanBeConsumed = false\n\t\t\tcanBeResolved = false\n\t\t\tvisible = false\n\t\t}\n\t\tmatching { it.name.endsWith(\"Classpath\") }.all { it.extendsFrom(dependencyManagement) }\n\t}\n\tdependencies {\n\t\tdependencyManagement(enforcedPlatform(dependencies.project(path: \":framework-platform\")))\n\t}\n}\n\nconfigure([rootProject] + javaProjects) { project ->\n\tapply plugin: \"java\"\n\tapply plugin: \"java-test-fixtures\"\n\tapply plugin: 'org.springframework.build.conventions'\n\tapply from: \"${rootDir}/gradle/toolchains.gradle\"\n\tapply from: \"${rootDir}/gradle/ide.gradle\"\n\n\tdependencies {\n\t\ttestImplementation(\"org.junit.jupiter:junit-jupiter-api\")\n\t\ttestImplementation(\"org.junit.jupiter:junit-jupiter-params\")\n\t\ttestImplementation(\"org.junit.platform:junit-platform-suite-api\")\n\t\ttestImplementation(\"org.mockito:mockito-core\")\n\t\ttestImplementation(\"org.mockito:mockito-junit-jupiter\")\n\t\ttestImplementation(\"io.mockk:mockk\")\n\t\ttestImplementation(\"org.assertj:assertj-core\")\n\t\t// Pull in the latest JUnit 5 Launcher API to ensure proper support in IDEs.\n\t\ttestRuntimeOnly(\"org.junit.jupiter:junit-jupiter-engine\")\n\t\ttestRuntimeOnly(\"org.junit.platform:junit-platform-launcher\")\n\t\ttestRuntimeOnly(\"org.junit.platform:junit-platform-suite-engine\")\n\t\ttestRuntimeOnly(\"org.apache.logging.log4j:log4j-core\")\n\t}\n\n\text.javadocLinks = [\n\t\t\t\"https://docs.oracle.com/en/java/javase/17/docs/api/\",\n\t\t\t\"https://jakarta.ee/specifications/platform/11/apidocs/\",\n\t\t\t\"https://docs.jboss.org/hibernate/orm/5.6/javadocs/\",\n\t\t\t\"https://www.quartz-scheduler.org/api/2.3.0/\",\n\t\t\t\"https://fasterxml.github.io/jackson-core/javadoc/2.14/\",\n\t\t\t\"https://fasterxml.github.io/jackson-databind/javadoc/2.14/\",\n\t\t\t\"https://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.14/\",\n\t\t\t\"https://hc.apache.org/httpcomponents-client-5.4.x/current/httpclient5/apidocs/\",\n\t\t\t\"https://projectreactor.io/docs/test/release/api/\",\n\t\t\t\"https://junit.org/junit4/javadoc/4.13.2/\",\n\t\t\t// TODO Uncomment link to JUnit 5 docs once we execute Gradle with Java 18+.\n\t\t\t// See https://github.com/spring-projects/spring-framework/issues/27497\n\t\t\t//\n\t\t\t// \"https://junit.org/junit5/docs/5.11.4/api/\",\n\t\t\t\"https://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/\",\n\t\t\t//\"https://javadoc.io/static/io.rsocket/rsocket-core/1.1.1/\",\n\t\t\t\"https://r2dbc.io/spec/1.0.0.RELEASE/api/\",\n\t\t\t// Previously there could be a split-package issue between JSR250 and JSR305 javax.annotation packages,\n\t\t\t// but since 6.0 JSR 250 annotations such as @Resource and @PostConstruct have been replaced by their\n\t\t\t// JakartaEE equivalents in the jakarta.annotation package.\n\t\t\t//\"https://www.javadoc.io/doc/com.google.code.findbugs/jsr305/3.0.2/\",\n\t\t\t\"https://jspecify.dev/docs/api/\"\n\t] as String[]\n}\n\nconfigure(moduleProjects) { project ->\n\tapply from: \"${rootDir}/gradle/spring-module.gradle\"\n}\n"
        },
        {
          "name": "buildSrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "framework-api",
          "type": "tree",
          "content": null
        },
        {
          "name": "framework-bom",
          "type": "tree",
          "content": null
        },
        {
          "name": "framework-docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "framework-platform",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradle.properties",
          "type": "blob",
          "size": 0.2,
          "content": "version=7.0.0-SNAPSHOT\n\norg.gradle.caching=true\norg.gradle.jvmargs=-Xmx2048m\norg.gradle.parallel=true\n\nkotlinVersion=2.1.0\n\nkotlin.jvm.target.validation.mode=ignore\nkotlin.stdlib.default.dependency=false\n"
        },
        {
          "name": "gradle",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradlew",
          "type": "blob",
          "size": 8.56,
          "content": "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n#\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is\n#       noncompliant, but you have some other compliant shell such as ksh or\n#       bash, then to run this script, type that shell name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n#\n#       Busybox and similar reduced shells will NOT work, because this script\n#       requires all of these POSIX shell features:\n#         * functions;\n#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound commands having a testable exit status, especially «case»;\n#         * various built-in commands including «command», «set», and «ulimit».\n#\n#   Important for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n#\n#       The \"traditional\" practice of packing multiple parameters into a\n#       space-separated string is a well documented source of bugs and security\n#       problems, so this is (mostly) avoided, by progressively accumulating\n#       options in \"$@\", and eventually passing that to Java.\n#\n#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#       see the in-line comments for details.\n#\n#       There are tweaks for specific operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n#\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n#       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n#\n##############################################################################\n\n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"}  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\ndo\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\nAPP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\nAPP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\\n' \"$PWD\" ) || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;; #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true    ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$( ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command, stacking in reverse order:\n#   * args from the command line\n#   * the main class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n            case $arg in                                #(\n              -*)   false ;;                            # don't mess with options #(\n              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n                    [ -e \"$t\" ] ;;                      #(\n              *)    false ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly as many times as the number of\n        # args, so each arg winds up back in the position where it started, but\n        # possibly modified.\n        #\n        # NB: a `for` loop captures its iteration list before it begins, so\n        # changing the positional parameters here affects neither the number of\n        # iterations, nor the values presented in `arg`.\n        shift                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath \"$CLASSPATH\" \\\n        org.gradle.wrapper.GradleWrapperMain \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n# Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n#\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\" \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so instead we\n# post-process each arg (as a line of input to sed) to backslash-escape any\n# character that might be a shell metacharacter, then use eval to reverse\n# that process (while maintaining the separation between arguments), and wrap\n# the whole thing up as a single \"set\" statement.\n#\n# This will of course break if any of these variables contains a newline or\n# an unmatched quote.\n#\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
        },
        {
          "name": "gradlew.bat",
          "type": "blob",
          "size": 2.9,
          "content": "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n@rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem you may not use this file except in compliance with the License.\r\n@rem You may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@rem See the License for the specific language governing permissions and\r\n@rem limitations under the License.\r\n@rem\r\n@rem SPDX-License-Identifier: Apache-2.0\r\n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"=%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in your environment to match the 1>&2\r\necho location of your Java installation. 1>&2\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*\r\n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\nif %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
        },
        {
          "name": "import-into-eclipse.md",
          "type": "blob",
          "size": 4.8,
          "content": "# Spring Framework - Eclipse/STS Project Import Guide\n\nThis document will guide you through the process of importing the Spring Framework\nprojects into Eclipse or the Spring Tool Suite (_STS_). It is recommended that you\nhave a recent version of Eclipse. As a bare minimum you will need Eclipse with full Java\n17 support and Eclipse Buildship.\n\nThe following instructions have been tested against [STS](https://spring.io/tools) 4.12.0\n([download](https://github.com/spring-projects/sts4/wiki/Previous-Versions#spring-tools-4120-changelog))\n(based on Eclipse 4.21) with [Eclipse Buildship](https://projects.eclipse.org/projects/tools.buildship).\nThe instructions should work with the latest Eclipse distribution as long as you install\n[Buildship](https://marketplace.eclipse.org/content/buildship-gradle-integration). Note\nthat STS 4 comes with Buildship preinstalled.\n\nIf you are using Eclipse 4.21, you will need to install\n[Java 17 Support for Eclipse 2021-09 (4.21)](https://marketplace.eclipse.org/content/java-17-support-eclipse-2021-09-421)\nfrom the Eclipse Marketplace.\n\n## Steps\n\n_When instructed to execute `./gradlew` from the command line, be sure to execute it within your locally cloned `spring-framework` working directory._\n\n1. Ensure that the _Forbidden reference (access rule)_ in Eclipse is set to `Info`\n(Preferences &#8594; Java &#8594; Compiler &#8594; Errors/Warnings &#8594; Deprecated and restricted API &#8594; Forbidden reference (access rule)).\n1. Optionally install the [Kotlin Plugin for Eclipse](https://marketplace.eclipse.org/content/kotlin-plugin-eclipse) if you need to execute Kotlin-based tests or develop Kotlin extensions.\n   - **NOTE**: As of September 21, 2021, it appears that the Kotlin Plugin for Eclipse does not yet work with Eclipse 4.21.\n1. Optionally install the [AspectJ Development Tools](https://marketplace.eclipse.org/content/aspectj-development-tools) (_AJDT_) if you need to work with the `spring-aspects` project.\n   - **NOTE**: As of September 21, 2021, it appears that the AspectJ Development Tools do not yet work with Eclipse 4.21.\n1. Optionally install the [TestNG plugin](https://testng.org/doc/eclipse.html) in Eclipse if you need to execute individual TestNG test classes or tests in the `spring-test` module.\n   - As an alternative to installing the TestNG plugin, you can execute the `org.springframework.test.context.testng.TestNGTestSuite` class as a \"JUnit 5\" test class in Eclipse.\n1. Build `spring-oxm` from the command line with `./gradlew :spring-oxm:check`.\n1. To apply Spring Framework specific settings, run `./gradlew cleanEclipse eclipse` from the command line.\n1. Import all projects into Eclipse (File &#8594; Import &#8594; Gradle &#8594; Existing Gradle Project &#8594; Navigate to the locally cloned `spring-framework` directory &#8594; Select Finish).\n   - If you have not installed AJDT, exclude the `spring-aspects` project from the import, if prompted, or close it after the import.\n   - If you run into errors during the import, you may need to set the _Java home_ for Gradle Buildship to the location of your JDK 8 installation in Eclipse (Preferences &#8594; Gradle &#8594; Java home).\n1. If you need to execute JAXB-related tests in the `spring-oxm` project and wish to have the generated sources available, add the `build/generated-sources/jaxb` folder to the build path (right click on the `jaxb` folder and select \"Build Path &#8594; Use as Source Folder\").\n   - If you do not see the `build` folder in the `spring-oxm` project, ensure that the \"Gradle build folder\" is not filtered out from the view. This setting is available under \"Filters\" in the configuration of the Package Explorer (available by clicking on the _three vertical dots_ in the upper right corner of the Package Explorer).\n1. Code away!\n\n## Known Issues\n\n1. `spring-core` should be pre-compiled due to repackaged dependencies.\n   - See `*RepackJar` tasks in the `spring-core.gradle` build file.\n1. `spring-oxm` should be pre-compiled due to JAXB types generated for tests.\n   - Note that executing `./gradlew :spring-oxm:check` as explained in the _Steps_ above will compile `spring-core` and generate JAXB types for `spring-oxm`.\n1. `spring-aspects` does not compile due to references to aspect types unknown to Eclipse.\n   - If you installed _AJDT_ into Eclipse it should work.\n1. While JUnit tests pass from the command line with Gradle, some may fail when run from\n   the IDE.\n   - Resolving this is a work in progress.\n   - If attempting to run all JUnit tests from within the IDE, you may need to set the following VM options to avoid out of memory errors: `-XX:MaxPermSize=2048m -Xmx2048m -XX:MaxHeapSize=2048m`\n\n## Tips\n\nIn any case, please do not check in your own generated `.classpath` file, `.project`\nfile, or `.settings` folder. You'll notice these files are already intentionally in\n`.gitignore`. The same policy holds for IDEA metadata.\n"
        },
        {
          "name": "import-into-idea.md",
          "type": "blob",
          "size": 1.77,
          "content": "The following has been tested against IntelliJ IDEA 2016.2.2\n\n## Steps\n\n_Within your locally cloned spring-framework working directory:_\n\n1. Precompile `spring-oxm` with `./gradlew :spring-oxm:compileTestJava`\n2. Import into IntelliJ (File -> New -> Project from Existing Sources -> Navigate to directory -> Select build.gradle)\n3. When prompted exclude the `spring-aspects` module (or after the import via File-> Project Structure -> Modules)\n4. Code away\n\n## Known issues\n\n1. `spring-core` and `spring-oxm` should be pre-compiled due to repackaged dependencies.\nSee `*RepackJar` tasks in the build and https://youtrack.jetbrains.com/issue/IDEA-160605).\n2. `spring-aspects` does not compile due to references to aspect types unknown to\nIntelliJ IDEA. See https://youtrack.jetbrains.com/issue/IDEA-64446 for details. In the meantime, the\n'spring-aspects' can be excluded from the project to avoid compilation errors.\n3. While JUnit tests pass from the command line with Gradle, some may fail when run from\nIntelliJ IDEA. Resolving this is a work in progress. If attempting to run all JUnit tests from within\nIntelliJ IDEA, you will likely need to set the following VM options to avoid out of memory errors:\n    -XX:MaxPermSize=2048m -Xmx2048m -XX:MaxHeapSize=2048m\n4. If you invoke \"Rebuild Project\" in the IDE, you'll have to generate some test\nresources of the `spring-oxm` module again (`./gradlew :spring-oxm:compileTestJava`)    \n\n\n## Tips\n\nIn any case, please do not check in your own generated .iml, .ipr, or .iws files.\nYou'll notice these files are already intentionally in .gitignore. The same policy goes for eclipse metadata.\n\n## FAQ\n\nQ. What about IntelliJ IDEA's own [Gradle support](https://www.jetbrains.com/help/idea/gradle.html)?\n\nA. Keep an eye on https://youtrack.jetbrains.com/issue/IDEA-53476\n"
        },
        {
          "name": "integration-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.gradle",
          "type": "blob",
          "size": 1.36,
          "content": "plugins {\n\tid \"com.gradle.develocity\" version \"3.17.2\"\n\tid \"io.spring.ge.conventions\" version \"0.0.17\"\n\tid \"org.gradle.toolchains.foojay-resolver-convention\" version \"0.7.0\"\n}\n\ninclude \"spring-aop\"\ninclude \"spring-aspects\"\ninclude \"spring-beans\"\ninclude \"spring-context\"\ninclude \"spring-context-indexer\"\ninclude \"spring-context-support\"\ninclude \"spring-core\"\ninclude \"spring-core-test\"\ninclude \"spring-expression\"\ninclude \"spring-instrument\"\ninclude \"spring-jdbc\"\ninclude \"spring-jms\"\ninclude \"spring-messaging\"\ninclude \"spring-orm\"\ninclude \"spring-oxm\"\ninclude \"spring-r2dbc\"\ninclude \"spring-test\"\ninclude \"spring-tx\"\ninclude \"spring-web\"\ninclude \"spring-webflux\"\ninclude \"spring-webmvc\"\ninclude \"spring-websocket\"\ninclude \"framework-api\"\ninclude \"framework-bom\"\ninclude \"framework-docs\"\ninclude \"framework-platform\"\ninclude \"integration-tests\"\n\nrootProject.name = \"spring\"\nrootProject.children.each {project ->\n\tproject.buildFileName = \"${project.name}.gradle\"\n}\n\nsettings.gradle.projectsLoaded {\n\tdevelocity {\n\t\tbuildScan {\n\t\t\tFile buildDir = settings.gradle.rootProject\n\t\t\t\t\t.getLayout().getBuildDirectory().getAsFile().get()\n\t\t\tbuildDir.mkdirs()\n\t\t\tnew File(buildDir, \"build-scan-uri.txt\").text = \"(build scan not generated)\"\n\t\t\tbuildScanPublished { scan ->\n\t\t\t\tif (buildDir.exists()) {\n\t\t\t\t\tnew File(buildDir, \"build-scan-uri.txt\").text = \"${scan.buildScanUri}\\n\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "spring-aop",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-aspects",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-beans",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-context-indexer",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-context-support",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-context",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-core-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-expression",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-instrument",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-jdbc",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-jms",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-messaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-orm",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-oxm",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-r2dbc",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-tx",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-web",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-webflux",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-webmvc",
          "type": "tree",
          "content": null
        },
        {
          "name": "spring-websocket",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "update_copyright_headers.sh",
          "type": "blob",
          "size": 0.94,
          "content": "#!/bin/sh\n#\n# This shell script updates the copyright headers in source code files\n# in the current branch that have been added or modified during the\n# current year (at least as much as the `git diff` command supports the\n# date range in terms of log history).\n#\n# This has only been tested on mac OS.\n\ncurrent_year=$(date +'%Y')\necho Updating copyright headers in Java, Kotlin, and Groovy source code for year $current_year\n\n# Added/Modified this year and committed\nfor file in $(git --no-pager diff --name-only --diff-filter=AM @{$current_year-01-01}..@{$current_year-12-31} | egrep \"^.+\\.(java|kt|groovy)$\" | uniq); do\n\tsed -i '' -E \"s/Copyright 2002-[0-9]{4}/Copyright 2002-$current_year/g\" $file;\ndone\n\n# Added/Modified and staged but not yet committed\nfor file in $(git --no-pager diff --name-only --diff-filter=AM --cached | egrep \"^.+\\.(java|kt|groovy)$\" | uniq); do\n\tsed -i '' -E \"s/Copyright 2002-[0-9]{4}/Copyright 2002-$current_year/g\" $file;\ndone\n"
        }
      ]
    }
  ]
}