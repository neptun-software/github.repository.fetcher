{
  "metadata": {
    "timestamp": 1736557713168,
    "page": 841,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "StevenBlack/hosts",
      "stars": 27265,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.08,
          "content": "*\n!updateHostsFile.py\n!data\n!alternates\n!extensions\n!readmeData.json\n!requirements.txt\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.25,
          "content": "# editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.bat]\nend_of_line = crlf\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.py]\nindent_size = 4\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.18,
          "content": "# Enforce Unix newlines for all files\n* text=auto eol=lf\n# Enforce Windows newlines for .bat files\n*.bat text eol=crlf\n\n*.py linguist-detectable=true\n*.nb linguist-detectable=false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.12,
          "content": ".idea\n*.iml\nmyhosts\nblacklist\nwhitelist\nhosts-*\n/web.config\n/__pycache__\n/node_modules/\n/package-lock.json\n/yarn.lock\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.02,
          "content": "package-lock=false\n"
        },
        {
          "name": ".release-it.json",
          "type": "blob",
          "size": 0.16,
          "content": "{\n  \"src\": {\n    \"tagName\": \"v%s\",\n    \"commitArgs\": \"-S\",\n    \"tagArgs\": \"-S\"\n  },\n  \"github\": {\n    \"release\": true\n  },\n  \"npm\": {\n    \"publish\": false\n  }\n}\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2,
          "content": "FROM docker.io/python:3-alpine\n\nENV IN_CONTAINER 1\n\nRUN apk add --no-cache git sudo\n\nCOPY . /hosts\n\nRUN pip install --no-cache-dir --upgrade -r /hosts/requirements.txt\n\nENV PATH $PATH:/hosts\n\nWORKDIR /hosts\n"
        },
        {
          "name": "aggregator.png",
          "type": "blob",
          "size": 39.66,
          "content": null
        },
        {
          "name": "alternates",
          "type": "tree",
          "content": null
        },
        {
          "name": "blacklist.example",
          "type": "blob",
          "size": 0.26,
          "content": "# blacklist\n#\n# The contents of this file (containing a listing of additional domains in\n# 'hosts' file format) are appended to the unified hosts file during the\n# update process. For example, uncomment the following line to block\n# 'example.com':\n\n# 0.0.0.0 example.com\n"
        },
        {
          "name": "code_of_conduct.md",
          "type": "blob",
          "size": 3.27,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at hosts@sbc.io. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "codebase_structure.md",
          "type": "blob",
          "size": 1.93,
          "content": "# Codebase Structure\n\nThese are the folders and some key files used to generate and store various unified hosts files.\n\n## Data folders\n\nThere are two facets of the hosts files generated by\n[/updateHostsFile.py](https://github.com/StevenBlack/hosts/blob/master/updateHostsFile.py):\n\n### Basic hosts\n\nBasic hosts are domains that purvey advertising, malware, tracking, coin\nmining and other abominable behavior. These hosts are included in all our products.\n\nThe [/data](https://github.com/StevenBlack/hosts/tree/master/data) folder holds the\nmetadata and latest hosts for all our basic hosts sources. The hosts are updated\nautomatically by `/updateHostsFile.py` which iterates all the subfolders within `./data`.\n\n### Optional hosts extensions\n\nHosts extensions include domains that push potentially addictive content like `porn`, `fake news`,\n`gambling`, and `social` media.\n\nThe [/extensions](https://github.com/StevenBlack/hosts/tree/master/extensions) folder holds\nmetadata and latest hosts for all our basic hosts sources. The hosts are updated\nautomatically by `/updateHostsFile.py` which iterates all the subfolders within `./extensions`.\n\n## Product folders\n\n### Basic hosts\n\nThe [basic hosts file](https://github.com/StevenBlack/hosts/blob/master/hosts), containing\njust adware, malware, etc, is stored in the root folder of this repository.\n\nThe [/hosts/alternates](https://github.com/StevenBlack/hosts/tree/master/alternates) this folder\ncontains the products of `updateHostsFile.py`, one subfolder for each permutation of\n`fakenews`, `gambling`, `porn`, and `social` media hosts, all of which include the base extensions\ncontaining hosts that block adware, malware, tracking, etc.\n\n## Other notable files\n\n+ [./readme_template.md](https://github.com/StevenBlack/hosts/blob/master/readme_template.md):\nThis file is used to generate all the various readme files in this repository.  Therefore,\nif you wish to change the readme, you need to change only this file.\n"
        },
        {
          "name": "contributing.md",
          "type": "blob",
          "size": 1.25,
          "content": "# Contributing Guide\n\nContributing to Hosts is easy. This document shows you how to get started\n\n## General\n\n- The [Codebase Structure](https://github.com/StevenBlack/hosts/blob/master/codebase_structure.md) has\ndetailed information about how the various folders and files in this project are structured.\n\n## Submitting changes\n\n- Fork the repo\n  - <https://github.com/StevenBlack/hosts/fork>\n- Check out a new branch based and name it to what you intend to do:\n  - Example:\n\n    ```sh\n    git checkout -b BRANCH_NAME\n    ```\n\n    If you get an error, you may need to fetch first, by using\n\n    ```sh\n    git remote update && git fetch\n    ```\n\n  - Use one branch per fix / feature\n- Commit your changes\n  - Please provide a git message that explains what you've done\n  - Please make sure your commits follow the [conventions](https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53#file-commit-message-guidelines-md)\n  - Commit to the forked repository\n  - Example:\n\n    ```sh\n    git commit -am 'Add some fooBar'\n    ```\n\n- Push to the branch\n  - Example:\n\n    ```sh\n    git push origin BRANCH_NAME\n    ```\n\n- Make a pull request\n  - Make sure you send the PR to the `BRANCH_NAME` branch\n\nIf you follow these instructions, your Pull Request will land safely!\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "disable-dnscache-service-win.bat",
          "type": "blob",
          "size": 1.1,
          "content": "@echo off\n\ntitle Disable DNS Cache Service\n\n:: Check if we are an administrator. If not, exit immediately.\n:: BatchGotAdmin\n:: Check for permissions\nif \"%PROCESSOR_ARCHITECTURE%\" equ \"amd64\" (\n  >nul 2>&1 \"%SYSTEMROOT%\\SysWOW64\\cacls.exe\" \"%SYSTEMROOT%\\SysWOW64\\config\\system\"\n) else (\n  >nul 2>&1 \"%SYSTEMROOT%\\system32\\cacls.exe\" \"%SYSTEMROOT%\\system32\\config\\system\"\n)\n\n:: If the error flag set, we do not have admin rights.\nif %ERRORLEVEL% neq 0 (\n  echo Requesting administrative privileges...\n  goto UACPrompt\n) else (\n  goto gotAdmin\n)\n\n:UACPrompt\necho Set UAC = CreateObject^(\"Shell.Application\"^) > \"%TEMP%\\getadmin.vbs\"\nset params= %*\necho UAC.ShellExecute \"cmd.exe\", \"/c \"\"%~s0\"\" %params:\"=\"\"%\", \"\", \"runas\", 1 >> \"%TEMP%\\getadmin.vbs\"\n\nwscript.exe \"%TEMP%\\getadmin.vbs\"\ndel \"%TEMP%\\getadmin.vbs\"\nexit /b\n\n:gotAdmin\n\n:SCset\n:: VALUE\n:: 2 (Automatic) (DEFAULT)\n:: 4 (Disabled) (to prevent network freeze after applying a huge hosts file)\n::\n:: See https://superuser.com/a/1277960\n::\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\services\\Dnscache\" /v Start /t REG_DWORD /d 4 /f\necho Reboot your system now!\necho.\npause\n"
        },
        {
          "name": "extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 1.82,
          "content": "{\n  description = \"Unified hosts file with base extensions.\";\n  outputs = { self, nixpkgs, ... }@inputs:\n    let\n      forAllSystems = nixpkgs.lib.genAttrs nixpkgs.lib.platforms.unix;\n\n      nixpkgsFor = forAllSystems (system: import nixpkgs {\n        inherit system;\n      });\n    in\n    {\n      nixosModule = { config, ... }:\n        with nixpkgs.lib;\n        let\n          cfg = config.networking.stevenBlackHosts;\n          alternatesList = (if cfg.blockFakenews then [ \"fakenews\" ] else []) ++\n                           (if cfg.blockGambling then [ \"gambling\" ] else []) ++\n                           (if cfg.blockPorn then [ \"porn\" ] else []) ++\n                           (if cfg.blockSocial then [ \"social\" ] else []);\n          alternatesPath = \"alternates/\" + builtins.concatStringsSep \"-\" alternatesList + \"/\";\n        in\n        {\n          options.networking.stevenBlackHosts = {\n            enable = mkEnableOption \"Use Steven Black's hosts file as extra hosts.\";\n            blockFakenews = mkEnableOption \"Additionally block fakenews hosts.\";\n            blockGambling = mkEnableOption \"Additionally block gambling hosts.\";\n            blockPorn = mkEnableOption \"Additionally block porn hosts.\";\n            blockSocial = mkEnableOption \"Additionally block social hosts.\";\n          };\n          config = mkIf cfg.enable {\n            networking.extraHosts =\n              builtins.readFile (\n                \"${self}/\" + (if alternatesList != [] then alternatesPath else \"\") + \"hosts\"\n              );\n          };\n        };\n\n      devShells = forAllSystems (system:\n        let pkgs = nixpkgsFor.${system}; in\n        {\n          default = pkgs.mkShell {\n            buildInputs = with pkgs; [\n              python3\n              python3Packages.flake8\n              python3Packages.requests\n            ];\n          };\n        });\n    };\n}\n"
        },
        {
          "name": "hosts",
          "type": "blob",
          "size": 3436.63,
          "content": null
        },
        {
          "name": "hosts_file_size_history.png",
          "type": "blob",
          "size": 38.96,
          "content": null
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 1.06,
          "content": "The MIT License (MIT)\n\nCopyright © 2023 Steven Black\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the “Software”), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "makeHosts.py",
          "type": "blob",
          "size": 2.64,
          "content": "#!/usr/bin/env python\n\n# Script by gfyoung\n# https://github.com/gfyoung\n#\n# This Python script will generate hosts files and update the readme file.\n\nfrom __future__ import print_function\n\nimport argparse\nimport subprocess\nimport sys\n\n\ndef print_failure(msg):\n    \"\"\"\n    Print a failure message.\n\n    Parameters\n    ----------\n    msg : str\n        The failure message to print.\n    \"\"\"\n\n    print(\"\\033[91m\" + msg + \"\\033[0m\")\n\n\ndef update_hosts_file(*flags):\n    \"\"\"\n    Wrapper around running updateHostsFile.py\n\n    Parameters\n    ----------\n    flags : varargs\n        Commandline flags to pass into updateHostsFile.py. For more info, run\n        the following command in the terminal or command prompt:\n\n        ```\n        python updateHostsFile.py -h\n        ```\n    \"\"\"\n\n    if subprocess.call([sys.executable, \"updateHostsFile.py\"] + list(flags)):\n        print_failure(\"Failed to update hosts file\")\n\n\ndef update_readme_file():\n    \"\"\"\n    Wrapper around running updateReadme.py\n    \"\"\"\n\n    if subprocess.call([sys.executable, \"updateReadme.py\"]):\n        print_failure(\"Failed to update readme file\")\n\n\ndef recursively_loop_extensions(extension, extensions, current_extensions):\n    \"\"\"\n    Helper function that recursively calls itself to prevent manually creating\n    all possible combinations of extensions.\n\n    Will call update_hosts_file for all combinations of extensions\n    \"\"\"\n\n    c_extensions = extensions.copy()\n    c_current_extensions = current_extensions.copy()\n    c_current_extensions.append(extension)\n\n    name = \"-\".join(c_current_extensions)\n\n    params = (\"-a\", \"-n\", \"-o\", \"alternates/\"+name, \"-e\") + tuple(c_current_extensions)\n    update_hosts_file(*params)\n\n    params = (\"-a\", \"-n\", \"-s\", \"--nounifiedhosts\", \"-o\", \"alternates/\"+name+\"-only\", \"-e\") + tuple(c_current_extensions)\n    update_hosts_file(*params)\n\n    while len(c_extensions) > 0:\n        recursively_loop_extensions(c_extensions.pop(0), c_extensions, c_current_extensions)\n\n\ndef main():\n    parser = argparse.ArgumentParser(\n        description=\"Creates custom hosts \"\n        \"file from hosts stored in \"\n        \"data subfolders.\"\n    )\n    parser.parse_args()\n\n    # Update the unified hosts file\n    update_hosts_file(\"-a\")\n\n    # List of extensions we want to generate, we will loop over them recursively to prevent manual definitions\n    # Only add new extensions to the end of the array, to avoid relocating existing hosts-files\n    extensions = [\"fakenews\", \"gambling\", \"porn\", \"social\"]\n\n    while len(extensions) > 0:\n        recursively_loop_extensions(extensions.pop(0), extensions, [])\n\n    # Update the readme files.\n    update_readme_file()\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "myhosts.example",
          "type": "blob",
          "size": 0.07,
          "content": "# Custom host records are listed here.\n\n\n# End of custom host records.\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.08,
          "content": "{\n  \"name\": \"hosts\",\n  \"version\": \"3.15.9\",\n  \"description\": \"Extending and consolidating hosts files from several well-curated sources like adaway.org, mvps.org, malwaredomainlist.com, someonewhocares.org, and potentially others. You can optionally invoke extensions to block additional sites by category.\",\n  \"main\": \"\",\n  \"private\": true,\n  \"scripts\": {\n    \"test\": \"python3 testUpdateHostsFile.py\",\n    \"start\": \"python3 makeHosts.py\",\n    \"release\": \"release-it\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/StevenBlack/hosts.git\"\n  },\n  \"keywords\": [\n    \"python\",\n    \"unified-hosts\",\n    \"malware\",\n    \"ad-blocker\",\n    \"porn-filter\",\n    \"social-media-filter\",\n    \"hosts\",\n    \"privacy\",\n    \"protection\",\n    \"pornblocker\",\n    \"gambling-filter\",\n    \"ransomware\",\n    \"trojans\"\n  ],\n  \"author\": \"Steven Black (https://github.com/StevenBlack)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/StevenBlack/hosts/issues\"\n  },\n  \"homepage\": \"https://github.com/StevenBlack/hosts#readme\",\n  \"devDependencies\": {\n    \"release-it\": \"^17.1.1\"\n  }\n}\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 41.01,
          "content": "**Take Note!**\n\nWith the exception of issues and PRs regarding changes to\n`hosts/data/StevenBlack/hosts`, all other issues regarding the content of the\nproduced hosts files should be made with the appropriate data source that\ncontributed the content in question. The contact information for all of the data\nsources can be found in the `hosts/data/` directory.\n\n---\n\n![Logo](https://raw.githubusercontent.com/StevenBlack/hosts/master/.github/logo.png)\n\n[![latest release](https://img.shields.io/github/release/StevenBlack/hosts)](https://github.com/StevenBlack/hosts/releases)\n[![license](https://img.shields.io/github/license/StevenBlack/hosts)](https://github.com/StevenBlack/hosts/blob/master/license.txt)\n[![repo size](https://img.shields.io/github/repo-size/StevenBlack/hosts)](https://github.com/StevenBlack/hosts)\n[![contributors](https://img.shields.io/github/contributors/StevenBlack/hosts)](https://github.com/StevenBlack/hosts/graphs/contributors)\n[![Build Status](https://img.shields.io/github/actions/workflow/status/StevenBlack/hosts/ci.yml?branch=master)](https://github.com/StevenBlack/hosts/actions/workflows/ci.yml?query=branch%3Amaster)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000)](https://github.com/python/black)\n[![commits since last release](https://img.shields.io/github/commits-since/StevenBlack/hosts/latest)](https://github.com/StevenBlack/hosts/commits/master)\n[![last commit](https://img.shields.io/github/last-commit/StevenBlack/hosts)](https://github.com/StevenBlack/hosts/commits/master)\n[![commit activity](https://img.shields.io/github/commit-activity/y/StevenBlack/hosts)](https://github.com/StevenBlack/hosts/commits/master)\n\n# Unified hosts file with base extensions\n\nThis repository consolidates several reputable `hosts` files, and merges them\ninto a unified hosts file with duplicates removed. A variety of tailored hosts\nfiles are provided.\n\n**Therefore this repository is a hosts file aggregator.**\n\n![Aggregator](https://raw.githubusercontent.com/StevenBlack/hosts/master/aggregator.png)\n\n- Last updated: **January 09 2025**.\n- Here's the\n  [raw hosts file Unified hosts file with base extensions](https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts)\n  containing 116,154 entries.\n\n![Size history](https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts_file_size_history.png)\n\n## List of all hosts file variants\n\nThis repository offers\n[31 different host file variants](https://github.com/StevenBlack/hosts/tree/master/alternates),\nin addition to the base variant, with and without the unified hosts included.\n\nThe **Non GitHub mirror** is the link to use for some hosts file managers like\n[Hostsman for Windows](https://www.abelhadigital.com/hostsman/) that don't work\nwith GitHub download links.\n\n| Host file recipe | Readme | Raw hosts | Unique domains | Non GitHub mirror |\n| ---------------- | :----: | :-------: | :------------: | :---------------: |\nUnified hosts = **(adware + malware)** | [Readme](https://github.com/StevenBlack/hosts/blob/master/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts) | 116,154 | [link](http://sbc.io/hosts/hosts)\nUnified hosts **+ fakenews** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/fakenews/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews/hosts) | 118,348 | [link](http://sbc.io/hosts/alternates/fakenews/hosts)\n**fakenews** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/fakenews-only/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-only/hosts) | 2,194 | [link](http://sbc.io/hosts/alternates/fakenews-only/hosts)\nUnified hosts **+ gambling** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/gambling/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/gambling/hosts) | 124,843 | [link](http://sbc.io/hosts/alternates/gambling/hosts)\n**gambling** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/gambling-only/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/gambling-only/hosts) | 8,701 | [link](http://sbc.io/hosts/alternates/gambling-only/hosts)\nUnified hosts **+ porn** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/porn/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/porn/hosts) | 192,229 | [link](http://sbc.io/hosts/alternates/porn/hosts)\n**porn** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/porn-only/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/porn-only/hosts) | 76,770 | [link](http://sbc.io/hosts/alternates/porn-only/hosts)\nUnified hosts **+ social** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/social/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/social/hosts) | 119,342 | [link](http://sbc.io/hosts/alternates/social/hosts)\n**social** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/social-only/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/social-only/hosts) | 3,217 | [link](http://sbc.io/hosts/alternates/social-only/hosts)\nUnified hosts **+ fakenews + gambling** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/fakenews-gambling/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling/hosts) | 127,037 | [link](http://sbc.io/hosts/alternates/fakenews-gambling/hosts)\n**fakenews + gambling** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/fakenews-gambling-only/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling-only/hosts) | 10,895 | [link](http://sbc.io/hosts/alternates/fakenews-gambling-only/hosts)\nUnified hosts **+ fakenews + porn** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/fakenews-porn/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-porn/hosts) | 194,423 | [link](http://sbc.io/hosts/alternates/fakenews-porn/hosts)\n**fakenews + porn** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/fakenews-porn-only/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-porn-only/hosts) | 78,964 | [link](http://sbc.io/hosts/alternates/fakenews-porn-only/hosts)\nUnified hosts **+ fakenews + social** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/fakenews-social/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-social/hosts) | 121,536 | [link](http://sbc.io/hosts/alternates/fakenews-social/hosts)\n**fakenews + social** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/fakenews-social-only/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-social-only/hosts) | 5,411 | [link](http://sbc.io/hosts/alternates/fakenews-social-only/hosts)\nUnified hosts **+ gambling + porn** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/gambling-porn/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/gambling-porn/hosts) | 200,918 | [link](http://sbc.io/hosts/alternates/gambling-porn/hosts)\n**gambling + porn** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/gambling-porn-only/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/gambling-porn-only/hosts) | 85,471 | [link](http://sbc.io/hosts/alternates/gambling-porn-only/hosts)\nUnified hosts **+ gambling + social** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/gambling-social/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/gambling-social/hosts) | 128,031 | [link](http://sbc.io/hosts/alternates/gambling-social/hosts)\n**gambling + social** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/gambling-social-only/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/gambling-social-only/hosts) | 11,918 | [link](http://sbc.io/hosts/alternates/gambling-social-only/hosts)\nUnified hosts **+ porn + social** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/porn-social/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/porn-social/hosts) | 195,416 | [link](http://sbc.io/hosts/alternates/porn-social/hosts)\n**porn + social** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/porn-social-only/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/porn-social-only/hosts) | 79,986 | [link](http://sbc.io/hosts/alternates/porn-social-only/hosts)\nUnified hosts **+ fakenews + gambling + porn** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/fakenews-gambling-porn/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling-porn/hosts) | 203,112 | [link](http://sbc.io/hosts/alternates/fakenews-gambling-porn/hosts)\n**fakenews + gambling + porn** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/fakenews-gambling-porn-only/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling-porn-only/hosts) | 87,665 | [link](http://sbc.io/hosts/alternates/fakenews-gambling-porn-only/hosts)\nUnified hosts **+ fakenews + gambling + social** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/fakenews-gambling-social/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling-social/hosts) | 130,225 | [link](http://sbc.io/hosts/alternates/fakenews-gambling-social/hosts)\n**fakenews + gambling + social** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/fakenews-gambling-social-only/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling-social-only/hosts) | 14,112 | [link](http://sbc.io/hosts/alternates/fakenews-gambling-social-only/hosts)\nUnified hosts **+ fakenews + porn + social** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/fakenews-porn-social/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-porn-social/hosts) | 197,610 | [link](http://sbc.io/hosts/alternates/fakenews-porn-social/hosts)\n**fakenews + porn + social** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/fakenews-porn-social-only/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-porn-social-only/hosts) | 82,180 | [link](http://sbc.io/hosts/alternates/fakenews-porn-social-only/hosts)\nUnified hosts **+ gambling + porn + social** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/gambling-porn-social/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/gambling-porn-social/hosts) | 204,105 | [link](http://sbc.io/hosts/alternates/gambling-porn-social/hosts)\n**gambling + porn + social** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/gambling-porn-social-only/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/gambling-porn-social-only/hosts) | 88,687 | [link](http://sbc.io/hosts/alternates/gambling-porn-social-only/hosts)\nUnified hosts **+ fakenews + gambling + porn + social** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/fakenews-gambling-porn-social/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling-porn-social/hosts) | 206,299 | [link](http://sbc.io/hosts/alternates/fakenews-gambling-porn-social/hosts)\n**fakenews + gambling + porn + social** | [Readme](https://github.com/StevenBlack/hosts/blob/master/alternates/fakenews-gambling-porn-social-only/readme.md) | [link](https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling-porn-social-only/hosts) | 90,881 | [link](http://sbc.io/hosts/alternates/fakenews-gambling-porn-social-only/hosts)\n\n\n**Expectation**: These unified hosts files should serve all devices, regardless\nof OS.\n\n## Sources of hosts data unified in this variant\n\nUpdated `hosts` files from the following locations are always unified and\nincluded:\n\n| Host file source | Home page | Raw hosts | License | Issues | Description |\n| ---------------- | :-------: | :-------: | :-----: | :----: | ----------- |\nSteven Black's ad-hoc list |[link](https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts) | [raw](https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts) | MIT | [issues](https://github.com/StevenBlack/hosts/issues)| Additional sketch domains as I come across them.\nAdAway |[link](https://adaway.org/) | [raw](https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt) | CC BY 3.0 | [issues](https://github.com/AdAway/adaway.github.io/issues)| AdAway is an open source ad blocker for Android using the hosts file.\nadd.2o7Net |[link](https://github.com/FadeMind/hosts.extras) | [raw](https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts) | MIT | [issues](https://github.com/FadeMind/hosts.extras/issues)| 2o7Net tracking sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\nadd.Dead |[link](https://github.com/FadeMind/hosts.extras) | [raw](https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Dead/hosts) | MIT | [issues](https://github.com/FadeMind/hosts.extras/issues)| Dead sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\nadd.Risk |[link](https://github.com/FadeMind/hosts.extras) | [raw](https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts) | MIT | [issues](https://github.com/FadeMind/hosts.extras/issues)| Risk content sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\nadd.Spam |[link](https://github.com/FadeMind/hosts.extras) | [raw](https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts) | MIT | [issues](https://github.com/FadeMind/hosts.extras/issues)| Spam sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\nMitchell Krog's - Badd Boyz Hosts |[link](https://github.com/mitchellkrogza/Badd-Boyz-Hosts) | [raw](https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts) | MIT | [issues](https://github.com/mitchellkrogza/Badd-Boyz-Hosts/issues)| Sketchy domains and Bad Referrers from my Nginx and Apache Bad Bot and Spam Referrer Blockers\nhostsVN |[link](https://github.com/bigdargon/hostsVN) | [raw](https://raw.githubusercontent.com/bigdargon/hostsVN/master/option/hosts-VN) | MIT | [issues](https://github.com/bigdargon/hostsVN/issues)| Hosts block ads of Vietnamese\nKADhosts |[link](https://kadantiscam.netlify.app/) | [raw](https://raw.githubusercontent.com/FiltersHeroes/KADhosts/master/KADhosts.txt) | CC BY-SA 4.0 | [issues](https://github.com//FiltersHeroes/KADhosts/issues)| Fraud/adware/scam websites.\nminecraft-hosts |[link](https://github.com/jamiemansfield/minecraft-hosts) | [raw](https://raw.githubusercontent.com/jamiemansfield/minecraft-hosts/master/lists/tracking.txt) | CC0-1.0 | [issues](https://github.com/jamiemansfield/minecraft-hosts/issues)| Minecraft related tracker hosts\nMVPS hosts file |[link](https://winhelp2002.mvps.org/) | [raw](https://winhelp2002.mvps.org/hosts.txt) | CC BY-NC-SA 4.0 | [issues](mailto:winhelp2002@gmail.com)| The purpose of this site is to provide the user with a high quality custom HOSTS file.\nDan Pollock – [someonewhocares](https://someonewhocares.org/) |[link](https://someonewhocares.org/hosts/) | [raw](https://someonewhocares.org/hosts/zero/hosts) | non-commercial with attribution | [issues](mailto:hosts@someonewhocares.org)| How to make the internet not suck (as much).\nTiuxo hostlist - ads |[link](https://github.com/tiuxo/hosts) | [raw](https://raw.githubusercontent.com/tiuxo/hosts/master/ads) | CC BY 4.0 | [issues](https://github.com/tiuxo/hosts/issues)| Categorized hosts files for DNS based content blocking\nUncheckyAds |[link](https://github.com/FadeMind/hosts.extras) | [raw](https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts) | MIT | [issues](https://github.com/FadeMind/hosts.extras/issues)| Windows installers ads sources sites based on https://unchecky.com/ content.\nURLHaus |[link](https://urlhaus.abuse.ch/) | [raw](https://urlhaus.abuse.ch/downloads/hostfile/) | CC0 | [issues](mailto:contactme@abuse.ch)| A project from [abuse.ch](https://abuse.ch/) with the goal of sharing malicious URLs.\nyoyo.org |[link](https://pgl.yoyo.org/adservers/) | [raw](https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext&useip=0.0.0.0) |  | [issues](mailto:pgl@yoyo.org)| Blocking with ad server and tracking server hostnames.\n\n\n## Extensions\n\nThe unified hosts file is optionally extensible. Extensions are used to include\ndomains by category. Currently, we offer the following categories: `fakenews`,\n`social`, `gambling`, and `porn`.\n\nExtensions are optional, and can be combined in various ways with the base hosts\nfile. The combined products are stored in the\n[`alternates`](https://github.com/StevenBlack/hosts/tree/master/alternates)\nfolder.\n\nData for extensions are stored in the\n[`extensions`](https://github.com/StevenBlack/hosts/tree/master/extensions)\nfolder. You manage extensions by curating this folder tree, where you will find\nthe data for `fakenews`, `social`, `gambling`, and `porn` extension data that we\nmaintain and provide for you.\n\n## Generate your own unified hosts file\n\nYou have three options to generate your own hosts file. You can use our\ncontainer image, build your own image, or do it in your own environment. Option\n#1 is easiest if you have Linux with Docker installed.\n\n### Option 1: Use our container image (Linux only)\n\n> This will replace your `/etc/hosts`.\n\nWe assume you have Docker available on your host. Just run the following\ncommand. Set extensions to your preference.\n\n```sh\ndocker run --pull always --rm -it -v /etc/hosts:/etc/hosts \\\nghcr.io/stevenblack/hosts:latest updateHostsFile.py --auto \\\n--replace --extensions gambling porn\n```\n\nIf you want to add custom hosts or a whitelist, create either or both files as\nper [the instructions](#how-do-i-control-which-sources-are-unified) and add the\nfollowing arguments _before_ `ghcr.io/stevenblack/hosts:latest` depending on\nwhich you wish to use.\n\n```sh\n-v \"path/to/myhosts:/hosts/myhosts\" \\\n-v \"path/to/whitelist:/hosts/whitelist\" \\\n```\n\nYou can rerun this exact command later to update based on the latest available\nhosts (for example, add it to a weekly cron job).\n\n### Option 2: Generate your own container image\n\nWe provide the\n[Dockerfile](https://github.com/StevenBlack/hosts/blob/master/Dockerfile) used\nby the previous step, which you can use to create a container image with\neverything you need. The container will contain Python 3 and all its dependency\nrequirements, and a copy of the latest version of this repository.\n\nBuild the Docker container from the root of this repo like this:\n\n```sh\ndocker build --no-cache . -t stevenblack-hosts\n```\n\nThen run your command as such:\n\n```sh\ndocker run --rm -it stevenblack-hosts updateHostsFile.py\n```\n\n> This will create the hosts file, and remove it with the container when done,\n> so not very useful. You can use the example in option #1 to add volumes so\n> files on your host are replaced.\n\n### Option 3: Generate it in your own environment\n\nTo generate your own amalgamated hosts files you will need Python 3.6 or later.\n\nFirst, install the dependencies with:\n\n```sh\npip3 install --user -r requirements.txt\n```\n\n**Note** we recommend the `--user` flag which installs the required dependencies\nat the user level. More information about it can be found on pip\n[documentation](https://pip.pypa.io/en/stable/reference/pip_install/?highlight=--user#cmdoption-user).\n\n### Option 4: Generate it in Google Colab\n\nSpin up a free remote [Google Colab](https://colab.research.google.com/drive/1tYWXpU2iuPDqN_o03JW9ml3ExO80eBLq?usp=sharing) environment.\n\n### Common steps regardless of your development environment\n\nTo **run unit tests**, in the top-level directory, run:\n\n```sh\npython3 testUpdateHostsFile.py\n```\n\nThe `updateHostsFile.py` script will generate a unified hosts file based on the\nsources in the local `data/` subfolder. The script will prompt you whether it\nshould fetch updated versions (from locations defined by the `update.json` text\nfile in each source's folder). Otherwise, it will use the `hosts` file that's\nalready there.\n\n```sh\npython3 updateHostsFile.py [--auto] [--replace] [--ip nnn.nnn.nnn.nnn] [--extensions ext1 ext2 ext3]\n```\n\n#### Command line options\n\n`--help`, or `-h`: display help.\n\n`--auto`, or `-a`: run the script without prompting. When `--auto` is invoked,\n\n- Hosts data sources, including extensions, are updated.\n- No extensions are included by default. Use the `--extensions` or `-e` flag to\n  include any you want.\n- Your active hosts file is _not_ replaced unless you include the `--replace`\n  flag.\n\n`--backup`, or `-b`: Make a backup of existing hosts file(s) as you generate\nover them.\n\n`--extensions <ext1> <ext2> <ext3>`, or `-e <ext1> <ext2> <ext3>`: the names of\nsubfolders below the `extensions` folder containing additional category-specific\nhosts files to include in the amalgamation. Example: `--extensions porn` or\n`-e social porn`.\n\n`--flush-dns-cache`, or `-f`: skip the prompt for flushing the DNS cache. Only\nactive when `--replace` is also active.\n\n`--ip nnn.nnn.nnn.nnn`, or `-i nnn.nnn.nnn.nnn`: the IP address to use as the\ntarget. Default is `0.0.0.0`.\n\n`--keepdomaincomments`, or `-k`: `true` (default) or `false`, keep the comments\nthat appear on the same line as domains. The default is `true`.\n\n`--noupdate`, or `-n`: skip fetching updates from hosts data sources.\n\n`--output <subfolder>`, or `-o <subfolder>`: place the generated source file in\na subfolder. If the subfolder does not exist, it will be created.\n\n`--replace`, or `-r`: trigger replacing your active hosts\n\n`--skipstatichosts`, or `-s`: `false` (default) or `true`, omit the standard\nsection at the top, containing lines like `127.0.0.1 localhost`. This is useful\nfor configuring proximate DNS services on the local network.\n\n`--nogendata`, or `-g`: `false` (default) or `true`, skip the generation of the\nreadmeData.json file used for generating readme.md files. This is useful if you\nare generating host files with additional whitelists or blacklists and want to\nkeep your local checkout of this repo unmodified.\n\n`--nounifiedhosts`: `false` (default) or `true`, do not include the unified hosts\nfile in the final hosts file. Usually used together with `--extensions`.\n\n`--compress`, or `-c`: `false` (default) or `true`, _Compress_ the hosts file\nignoring non-necessary lines (empty lines and comments) and putting multiple\ndomains in each line. Reducing the number of lines of the hosts file improves\nthe performances under Windows (with DNS Client service enabled).\n\n`--minimise`, or `-m`: `false` (default) or `true`, like `--compress`, but puts\neach domain on a separate line. This is necessary because many implementations\nof URL blockers that rely on `hosts` files do not conform to the standard which\nallows multiple hosts on a single line.\n\n`--blacklist <blacklistfile>`, or `-x <blacklistfile>`: Append the given\nblacklist file in hosts format to the generated hosts file.\n\n`--whitelist <whitelistfile>`, or `-w <whitelistfile>`: Use the given whitelist\nfile to remove hosts from the generated hosts file.\n\n## How do I control which sources are unified?\n\nAdd one or more _additional_ sources, each in a subfolder of the `data/` folder,\nand specify the `url` key in its `update.json` file.\n\nAdd one or more _optional_ extensions, which originate from subfolders of the\n`extensions/` folder. Again the url in `update.json` controls where this\nextension finds its updates.\n\nCreate an _optional_ `blacklist` file. The contents of this file (containing a\nlisting of additional domains in `hosts` file format) are appended to the\nunified hosts file during the update process. A sample `blacklist` is included,\nand may be modified as you need.\n\n- NOTE: The `blacklist` is not tracked by git, so any changes you make won't be\n  overridden when you `git pull` this repo from `origin` in the future.\n\n### How do I include my own custom domain mappings?\n\nIf you have custom hosts records, place them in file `myhosts`. The contents of\nthis file are prepended to the unified hosts file during the update process.\n\nThe `myhosts` file is not tracked by git, so any changes you make won't be\noverridden when you `git pull` this repo from `origin` in the future.\n\n### How do I prevent domains from being included?\n\nThe domains you list in the `whitelist` file are excluded from the final hosts\nfile.\n\nThe `whitelist` uses partial matching. Therefore if you whitelist\n`google-analytics.com`, that domain and all its subdomains won't be merged into\nthe final hosts file.\n\nThe `whitelist` is not tracked by git, so any changes you make won't be\noverridden when you `git pull` this repo from `origin` in the future.\n\n## How can I contribute hosts records?\n\nIf you discover sketchy domains you feel should be included here, here are some\nways to contribute them.\n\n### Option 1: contact one of our hosts sources\n\nThe best way to get new domains included is to submit an issue to any of the\ndata providers whose home pages are\n[listed here](https://github.com/StevenBlack/hosts#sources-of-hosts-data-unified-in-this-variant).\nThis is best because once you submit new domains, they will be curated and\nupdated by the dedicated folks who maintain these sources.\n\n### Option 2: Fork this repository, add your domains to Steven Black's personal data file, and submit a pull request\n\nFork this hosts this repo and add your links to\n[https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts](https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts).\n\nThen, submit a pull request.\n\n**WARNING**: this is less desirable than Option 1 because the ongoing curation\nfalls on us. So this creates more work for us.\n\n### Option 3: create your own hosts list as a repo on GitHub\n\nIf you're able to curate your own collection of sketchy domains, then curate\nyour own hosts list. Then signal the existence of your repo as\n[a new issue](https://github.com/StevenBlack/hosts/issues) and we may include\nyour new repo into the collection of sources we pull whenever we create new\nversions.\n\n## What is a hosts file?\n\nA hosts file, named `hosts` (with no file extension), is a plain-text file used\nby all operating systems to map hostnames to IP addresses.\n\nIn most operating systems, the `hosts` file is preferential to `DNS`. Therefore\nif a domain name is resolved by the `hosts` file, the request never leaves your\ncomputer.\n\nHaving a smart `hosts` file goes a long way towards blocking malware, adware,\nand other irritants.\n\nFor example, to nullify requests to some doubleclick.net servers, adding these\nlines to your hosts file will do it:\n\n```text\n# block doubleClick's servers\n0.0.0.0 ad.ae.doubleclick.net\n0.0.0.0 ad.ar.doubleclick.net\n0.0.0.0 ad.at.doubleclick.net\n0.0.0.0 ad.au.doubleclick.net\n0.0.0.0 ad.be.doubleclick.net\n# etc...\n```\n\n## We recommend using `0.0.0.0` instead of `127.0.0.1`\n\nTraditionally most host files use `127.0.0.1`, the _loopback address_, to\nestablish an IP connection to the local machine.\n\nWe prefer to use `0.0.0.0`, which is defined as a non-routable meta-address used\nto designate an invalid, unknown, or non-applicable target.\n\nUsing `0.0.0.0` is empirically faster, possibly because there's no wait for a\ntimeout resolution. It also does not interfere with a web server that may be\nrunning on the local PC.\n\n## Why not use `0` instead of `0.0.0.0`?\n\nWe tried that. Using `0` doesn't work universally.\n\n## Location of your hosts file\n\nTo modify your current `hosts` file, look for it in the following places and\nmodify it with a text editor.\n\n- **macOS (until 10.14.x macOS Mojave), iOS, Android, Linux**: `/etc/hosts`\n  file.\n- **macOS Catalina:** `/private/etc/hosts` file.\n- **Windows**: `%SystemRoot%\\system32\\drivers\\etc\\hosts` file.\n\n## Gentoo\n\nGentoo users may find\n[`sb-hosts`](https://github.com/PF4Public/gentoo-overlay/tree/master/net-misc/sb-hosts)\nin [::pf4public](https://github.com/PF4Public/gentoo-overlay) Gentoo overlay\n\n## NixOS\n\nTo install hosts file on your machine add the following into your\n`configuration.nix`:\n\n```nix\n{\n  networking.extraHosts = let\n    hostsPath = https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts;\n    hostsFile = builtins.fetchurl hostsPath;\n  in builtins.readFile \"${hostsFile}\";\n}\n```\n\n- NOTE: Change `hostsPath` if you need other versions of hosts file.\n- NOTE: The call to `fetchurl` is impure. Use `fetchFromGitHub` with the exact\n  commit if you want to always get the same result.\n\n### Nix Flake\n\nNixOS installations which are managed through _flakes_ can use the hosts file\nlike this:\n\n```nix\n{\n  inputs.hosts.url = \"github:StevenBlack/hosts\";\n  outputs = { self, nixpkgs, hosts }: {\n    nixosConfigurations.my-hostname = {\n      system = \"<architecture>\";\n      modules = [\n        hosts.nixosModule {\n          networking.stevenBlackHosts.enable = true;\n        }\n      ];\n    };\n  };\n}\n```\n\nThe hosts extensions are also available with the following options:\n\n```nix\n{\n  networking.stevenBlackHosts = {\n    blockFakenews = true;\n    blockGambling = true;\n    blockPorn = true;\n    blockSocial = true;\n  };\n}\n```\n\n## Updating hosts file on Windows\n\n(NOTE: See also some third-party Hosts managers, listed below.)\n\nOn Linux and macOS, run the Python script. On Windows more work is required due\nto compatibility issues so it's preferable to run the batch file as follows:\n\n```sh\nupdateHostsWindows.bat\n```\n\nThis file **MUST** be run in command prompt with administrator privileges in the\nrepository directory. In addition to updating the hosts file, it can also\nreplace the existing hosts file, and reload the DNS cache. It goes without\nsaying that for this to work, you must be connected to the internet.\n\nTo open a command prompt as administrator in the repository's directory, do the\nfollowing:\n\n- **Windows XP**: Start → Run → `cmd`\n- **Windows Vista, 7**: Start Button → type `cmd` → right-click Command Prompt →\n  \"Run as Administrator\"\n- **Windows 8**: Start → Swipe Up → All Apps → Windows System → right-click\n  Command Prompt → \"Run as Administrator\"\n- **Windows 10**: Start Button → type `cmd` → right-click Command Prompt → \"Run\n  as Administrator\"\n\nYou can also refer to the \"Third-Party Hosts Managers\" section for further\nrecommended solutions from third parties.\n\n### Warning: Using this `hosts` file in Windows may require disabling DNS Cache service\n\nWindows has issues with larger hosts files. Recent changes in security within\nWindows 10 denies access to changing services via other tools except registry\nhacks. Use the `disable-dnscache-service-win.cmd` file to make proper changes to\nthe Windows registry. You will need to reboot your device once that's done. See\nthe\n[the comments within the `cmd` file](https://github.com/StevenBlack/hosts/blob/master/disable-dnscache-service-win.bat)\nfor more details.\n\nDisabling the DNS Cache Service can cause issues with services and applications like *WSL* and it's possible to compress the hosts file and negate the need to disable the DNS caching service. You can try the *C++* Windows command line tool at [Hosts Compress - Windows](https://github.com/Lateralus138/hosts-compress-windows) (the recommended method) or the *PowerShell* compression script and check out the guide located at the [Hosts Compression Scripts](https://github.com/Lateralus138/hosts-compression-scripts) repository.\n\n## Reloading hosts file\n\nYour operating system will cache DNS lookups. You can either reboot or run the\nfollowing commands to manually flush your DNS cache once the new hosts file is\nin place.\n\nThe Google Chrome browser may require manually cleaning up its DNS Cache on\n`chrome://net-internals/#dns` page to thereafter see the changes in your hosts\nfile. See: <https://superuser.com/questions/723703>\n\n### Windows\n\nOpen a command prompt with administrator privileges and run this command:\n\n```bat\nipconfig /flushdns\n```\n\n### Linux\n\nOpen a Terminal and run with root privileges:\n\n- **Debian/Ubuntu** `sudo service network-manager restart`\n- **Linux Mint** `sudo /etc/init.d/dns-clean start`\n- **Linux with systemd**: `sudo systemctl restart network.service`\n- **Fedora Linux**: `sudo systemctl restart NetworkManager.service`\n- **Arch Linux/Manjaro with Network Manager**:\n  `sudo systemctl restart NetworkManager.service`\n- **Arch Linux/Manjaro with Wicd**: `sudo systemctl restart wicd.service`\n- **RHEL/Centos**: `sudo /etc/init.d/network restart`\n- **FreeBSD**: `sudo service nscd restart`\n\n  To enable the `nscd` daemon initially, it is recommended that you run the\n  following commands:\n\n  ```sh\n  sudo sysrc nscd_enable=\"YES\"\n  sudo service nscd start\n  ```\n\n  Then modify the `hosts` line in your `/etc/nsswitch.conf` file to the\n  following:\n\n  ```text\n  hosts: cache files dns\n  ```\n\n- **NixOS**: The `nscd.service` is automatically restarted when the option\n  `networking.extraHosts` was changed.\n- **Others**: Consult\n  [this Wikipedia article](https://en.wikipedia.org/wiki/Hosts_%28file%29#Location_in_the_file_system).\n\n### macOS\n\nAs described in [this article](https://osxdaily.com/2022/11/21/how-clear-dns-cache-macos-ventura-monterey/),\nopen a Terminal and run:\n\n```sh\nsudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder\n```\n\n## Release management\n\nThis repository uses [release-it](https://github.com/release-it/release-it), an\nexcellent CLI release tool for GitHub repos and npm packages, to automate\ncreating [releases](https://github.com/StevenBlack/hosts/releases). This is why\nthe\n[package.json](https://github.com/StevenBlack/hosts/blob/master/package.json)\nand\n[.release-it.json](https://github.com/StevenBlack/hosts/blob/master/.release-it.json)\nfiles are bundled.\n\n## Goals of this unified hosts file\n\nThe goals of this repo are to:\n\n1. automatically combine high-quality lists of hosts,\n2. provide situation-appropriate extensions,\n3. de-dupe the resultant combined list,\n4. and keep the resultant file reasonably sized.\n\nA high-quality source is defined here as one that is actively curated. A hosts\nsource should be frequently updated by its maintainers with both additions and\nremovals. The larger the hosts file, the higher the level of curation is\nexpected.\n\nIt is expected that this unified hosts file will serve both desktop and mobile\ndevices under a variety of operating systems.\n\n## Third-Party Hosts Managers\n\n- [Unified Hosts AutoUpdate](https://github.com/ScriptTiger/Unified-Hosts-AutoUpdate \"Unified Hosts AutoUpdate\")\n  (for Windows): The Unified Hosts AutoUpdate package is purpose-built for this\n  unified hosts project as well as in active development by community members.\n  You can install and uninstall any blacklist and keep it automatically up to\n  date, and can be placed in a shared network location and deployed across an\n  organization via group policies. And since it is in active development by\n  community members, your bug reports, feature requests, and other feedback are\n  most welcome.\n- [ViHoMa](https://github.com/cmabad/ViHoMa) is a Visual Hosts file Manager,\n  written in Java, by Christian Martínez. Check it out!\n\n## Interesting Applications\n\n- [Hosts-BL](https://github.com/ScriptTiger/Hosts-BL \"Hosts-BL\") is a simple\n  tool to handle hosts file black lists. It can remove comments, remove\n  duplicates, compress to 9 domains per line, add IPv6 entries. In addition, it\n  can also convert black lists to multiple other black list formats compatible\n  with other software, such as dnsmasq, DualServer, RPZ, Privoxy, and Unbound,\n  to name a few.\n- [Host Minder](https://github.com/jeremehancock/hostminder#readme) is a simple\n  GUI that allows you to easily update your /etc/hosts file to one of four\n  consolidated hosts files from StevenBlack/hosts. It is provided as a deb\n  package and comes pre-installed on [UbuntuCE](https://ubuntuce.com/).\n- [Maza ad blocking](https://github.com/tanrax/maza-ad-blocking) is a bash\n  script that automatically updates host file. You can also update a fresh copy.\n  And each time it generates a dnsmasq-compatible configuration file. Fast\n  installation, compatible with MacOS, Linux and BSD.\n- [Hostile](https://github.com/feross/hostile) is a nifty command line utility\n  to easily add or remove domains from your hosts file. If our hosts files are\n  too aggressive for you, you can use `hostile` to remove domains, or you can\n  use `hostile` in a bash script to automate a post process each time you\n  download fresh versions of hosts.\n- [macOS Scripting for Configuration, Backup and Restore](https://github.com/tiiiecherle/osx_install_config)\n  helps customizing, re-installing and using macOS. It also provides a\n  [script](https://github.com/tiiiecherle/osx_install_config/blob/master/09_launchd/9b_run_on_boot/root/1_hosts_file/launchd_and_script/hosts_file_generator.sh)\n  to install and update the hosts file using this project on macOS. In\n  combination with a\n  [launchd](https://github.com/tiiiecherle/osx_install_config/blob/master/09_launchd/9b_run_on_boot/root/1_hosts_file/launchd_and_script/com.hostsfile.install_update.plist)\n  it updates the hosts file every x days (default is 4). To install both,\n  download the GitHub repo and run the\n  [install script](https://github.com/tiiiecherle/osx_install_config/blob/master/09_launchd/9b_run_on_boot/root/1_hosts_file/install_hosts_file_generator_and_launchdservice.sh)\n  from the directory one level up.\n- [Pi-hole](https://pi-hole.net/) is a network-wide DHCP server and ad blocker\n  that runs on [Raspberry Pi](https://en.wikipedia.org/wiki/Raspberry_Pi).\n  Pi-hole uses this repository as one of its sources.\n- [Block ads and malware via local BIND9 DNS server](https://github.com/mueller-ma/block-ads-via-dns \"Block ads and malware via local DNS server\")\n  (for Debian, Raspbian & Ubuntu): Set up a local DNS server with a\n  `/etc/bind/named.conf.blocked` file, sourced from here.\n- [Block ads, malware, and deploy parental controls via local DualServer DNS/DHCP server](https://scripttiger.github.io/dualserver/ \"Block ads, malware, and deploy parental controls via local DualServer DNS/DHCP server\")\n  (for BSD, Windows & Linux): Set up a blacklist for everyone on your network\n  using the power of the unified hosts reformatted for DualServer. And if you're\n  on Windows, this project also maintains an update script to make updating\n  DualServer's blacklist even easier.\n- [Blocking ads and malwares with unbound](https://deadc0de.re/articles/unbound-blocking-ads.html \"Blocking ads and malwares with unbound\")\n  –\n  [Unbound](https://www.unbound.net/ \"Unbound is a validating, recursive, and caching DNS resolver.\")\n  is a validating, recursive, and caching DNS resolver.\n- [dnsmasq conversion script](https://gist.github.com/erlepereira/c11f4f7a3f60cd2071e79018e895fc8a#file-dnsmasq-antimalware)\n  This GitHub gist has a short shell script (bash, will work on any 'nix) and\n  uses `wget` & `awk` present in most distros, to fetch a specified hosts file\n  and convert it to the format required by dnsmasq. Supports IPv4 and IPv6.\n  Designed to be used as either a shell script, or can be dropped into\n  `/etc/cron.weekly` (or wherever suits). The script is short and easily edited,\n  also has a short document attached with notes on dnsmasq setup.\n- [BlackHosts - Command Line Installer/Updater](https://github.com/Lateralus138/blackhosts)\n  This is a cross-platform command line utility to help install/update hosts\n  files found at this repository.\n- [Hosts Compression Scripts](https://github.com/Lateralus138/hosts-compression-scripts) These are various scripts to help compress hosts files (by the author of BlackHosts).\n- [Hosts Compress - Windows](https://github.com/Lateralus138/hosts-compress-windows) This is a *C++* Windows command line tool to help compress hosts files (by the author of BlackHosts and Hosts Compression Scripts). This is highly recommended over the scripts as it is **exponentially faster**.\n- [dnscrypt-proxy](https://github.com/DNSCrypt/dnscrypt-proxy/wiki/Combining-Blocklists)\n  provides a tool to build block lists from local and remote lists in common\n  formats.\n- [Control D](https://controld.com/free-dns)\n  offers a public anycast network hosted mirror of the Unified (Adware + Malware) blocklist:\n  - Legacy DNS: `76.76.2.35`, `76.76.10.35`, `2606:1a40::35`, `2606:1a40:1::35`\n  - DNS-over-HTTPS/TLS/DOQ: `https://freedns.controld.com/x-stevenblack`, `x-stevenblack.freedns.controld.com`\n\n## Contribute\n\nPlease read our\n[Contributing Guide](https://github.com/StevenBlack/hosts/blob/master/contributing.md).\nAmong other things, this explains how we organize files and folders in this\nrepository.\n\nWe are always interested in discovering well-curated sources of hosts. If you\nfind one, please open an [issue](https://github.com/StevenBlack/hosts/issues) to\ndraw our attention.\n\nBefore you create or respond to any issue, please read our\n[code of conduct](https://github.com/StevenBlack/hosts/blob/master/code_of_conduct.md).\n\nLogo by [@Tobaloidee](https://github.com/Tobaloidee) Thank you!.\n"
        },
        {
          "name": "readmeData.json",
          "type": "blob",
          "size": 152.95,
          "content": "{\"fakenews-gambling-porn\": {\"location\": \"alternates/fakenews-gambling-porn/\", \"no_unified_hosts\": false, \"entries\": 203112, \"sourcesdata\": [{\"name\": \"Steven Black's ad-hoc list\", \"description\": \"Additional sketch domains as I come across them.\", \"homeurl\": \"https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/StevenBlack/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts\", \"license\": \"MIT\"}, {\"name\": \"AdAway\", \"description\": \"AdAway is an open source ad blocker for Android using the hosts file.\", \"homeurl\": \"https://adaway.org/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com/AdAway/adaway.github.io/issues\", \"url\": \"https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt\", \"license\": \"CC BY 3.0\", \"pause\": true}, {\"name\": \"add.2o7Net\", \"description\": \"2o7Net tracking sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Dead\", \"description\": \"Dead sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Dead/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Risk\", \"description\": \"Risk content sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Spam\", \"description\": \"Spam sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\", \"license\": \"MIT\"}, {\"name\": \"Mitchell Krog's - Badd Boyz Hosts\", \"description\": \"Sketchy domains and Bad Referrers from my Nginx and Apache Bad Bot and Spam Referrer Blockers\", \"homeurl\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts\", \"frequency\": \"weekly\", \"issues\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts/issues\", \"url\": \"https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts\", \"license\": \"MIT\"}, {\"name\": \"hostsVN\", \"description\": \"Hosts block ads of Vietnamese\", \"homeurl\": \"https://github.com/bigdargon/hostsVN\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/option/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"KADhosts\", \"description\": \"Fraud/adware/scam websites.\", \"homeurl\": \"https://kadantiscam.netlify.app/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com//FiltersHeroes/KADhosts/issues\", \"url\": \"https://raw.githubusercontent.com/FiltersHeroes/KADhosts/master/KADhosts.txt\", \"license\": \"CC BY-SA 4.0\"}, {\"name\": \"minecraft-hosts\", \"description\": \"Minecraft related tracker hosts\", \"homeurl\": \"https://github.com/jamiemansfield/minecraft-hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/jamiemansfield/minecraft-hosts/issues\", \"url\": \"https://raw.githubusercontent.com/jamiemansfield/minecraft-hosts/master/lists/tracking.txt\", \"license\": \"CC0-1.0\"}, {\"name\": \"MVPS hosts file\", \"description\": \"The purpose of this site is to provide the user with a high quality custom HOSTS file.\", \"homeurl\": \"https://winhelp2002.mvps.org/\", \"frequency\": \"monthly\", \"issues\": \"mailto:winhelp2002@gmail.com\", \"url\": \"https://winhelp2002.mvps.org/hosts.txt\", \"license\": \"CC BY-NC-SA 4.0\", \"pause\": true}, {\"name\": \"Dan Pollock \\u2013 [someonewhocares](https://someonewhocares.org/)\", \"description\": \"How to make the internet not suck (as much).\", \"homeurl\": \"https://someonewhocares.org/hosts/\", \"frequency\": \"frequently\", \"issues\": \"mailto:hosts@someonewhocares.org\", \"url\": \"https://someonewhocares.org/hosts/zero/hosts\", \"license\": \"non-commercial with attribution\"}, {\"name\": \"Tiuxo hostlist - ads\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/ads\", \"license\": \"CC BY 4.0\"}, {\"name\": \"UncheckyAds\", \"description\": \"Windows installers ads sources sites based on https://unchecky.com/ content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\", \"license\": \"MIT\"}, {\"name\": \"URLHaus\", \"description\": \"A project from [abuse.ch](https://abuse.ch/) with the goal of sharing malicious URLs.\", \"homeurl\": \"https://urlhaus.abuse.ch/\", \"frequency\": \"weekly\", \"issues\": \"mailto:contactme@abuse.ch\", \"url\": \"https://urlhaus.abuse.ch/downloads/hostfile/\", \"license\": \"CC0\"}, {\"name\": \"yoyo.org\", \"description\": \"Blocking with ad server and tracking server hostnames.\", \"homeurl\": \"https://pgl.yoyo.org/adservers/\", \"frequency\": \"frequently\", \"issues\": \"mailto:pgl@yoyo.org\", \"url\": \"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext&useip=0.0.0.0\", \"pause\": true}, {\"name\": \"Fake News\", \"description\": \"An in-progress collection of fake news outlets.\", \"homeurl\": \"https://github.com/marktron/fakenews\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/marktron/fakenews/issues\", \"url\": \"https://raw.githubusercontent.com/marktron/fakenews/master/fakenews\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's gambling domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/gambling/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's gambling blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/gambling-hosts\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's adult domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/adult/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"brijrajparmar27 - pornography\", \"description\": \"hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/brijrajparmar27/host-sources\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/brijrajparmar27/host-sources/issues\", \"url\": \"https://raw.githubusercontent.com/brijrajparmar27/host-sources/master/Porn/hosts\", \"license\": \"CC BY 4.0\"}, {\"name\": \"pornhosts -- a consolidated anti porn hosts file\", \"description\": \"This is an endeavour to find all porn domains and compile them into a single hosts to allow for easy blocking of porn on your local machine or on a network.\", \"homeurl\": \"https://github.com/Clefspeare13/pornhosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Clefspeare13/pornhosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/extensions/porn/clefspeare13/hosts\", \"url.old\": \"https://raw.githubusercontent.com/Clefspeare13/pornhosts/master/download_here/0.0.0.0/hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's porn blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/pornography-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's snuff-site blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/snuff-hosts\", \"license\": \"MIT\"}, {\"name\": \"Tiuxo hostlist - pornography\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/porn\", \"license\": \"CC BY 4.0\"}]}, \"fakenews-gambling-porn-social\": {\"location\": \"alternates/fakenews-gambling-porn-social/\", \"no_unified_hosts\": false, \"entries\": 206299, \"sourcesdata\": [{\"name\": \"Steven Black's ad-hoc list\", \"description\": \"Additional sketch domains as I come across them.\", \"homeurl\": \"https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/StevenBlack/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts\", \"license\": \"MIT\"}, {\"name\": \"AdAway\", \"description\": \"AdAway is an open source ad blocker for Android using the hosts file.\", \"homeurl\": \"https://adaway.org/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com/AdAway/adaway.github.io/issues\", \"url\": \"https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt\", \"license\": \"CC BY 3.0\", \"pause\": true}, {\"name\": \"add.2o7Net\", \"description\": \"2o7Net tracking sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Dead\", \"description\": \"Dead sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Dead/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Risk\", \"description\": \"Risk content sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Spam\", \"description\": \"Spam sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\", \"license\": \"MIT\"}, {\"name\": \"Mitchell Krog's - Badd Boyz Hosts\", \"description\": \"Sketchy domains and Bad Referrers from my Nginx and Apache Bad Bot and Spam Referrer Blockers\", \"homeurl\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts\", \"frequency\": \"weekly\", \"issues\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts/issues\", \"url\": \"https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts\", \"license\": \"MIT\"}, {\"name\": \"hostsVN\", \"description\": \"Hosts block ads of Vietnamese\", \"homeurl\": \"https://github.com/bigdargon/hostsVN\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/option/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"KADhosts\", \"description\": \"Fraud/adware/scam websites.\", \"homeurl\": \"https://kadantiscam.netlify.app/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com//FiltersHeroes/KADhosts/issues\", \"url\": \"https://raw.githubusercontent.com/FiltersHeroes/KADhosts/master/KADhosts.txt\", \"license\": \"CC BY-SA 4.0\"}, {\"name\": \"minecraft-hosts\", \"description\": \"Minecraft related tracker hosts\", \"homeurl\": \"https://github.com/jamiemansfield/minecraft-hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/jamiemansfield/minecraft-hosts/issues\", \"url\": \"https://raw.githubusercontent.com/jamiemansfield/minecraft-hosts/master/lists/tracking.txt\", \"license\": \"CC0-1.0\"}, {\"name\": \"MVPS hosts file\", \"description\": \"The purpose of this site is to provide the user with a high quality custom HOSTS file.\", \"homeurl\": \"https://winhelp2002.mvps.org/\", \"frequency\": \"monthly\", \"issues\": \"mailto:winhelp2002@gmail.com\", \"url\": \"https://winhelp2002.mvps.org/hosts.txt\", \"license\": \"CC BY-NC-SA 4.0\", \"pause\": true}, {\"name\": \"Dan Pollock \\u2013 [someonewhocares](https://someonewhocares.org/)\", \"description\": \"How to make the internet not suck (as much).\", \"homeurl\": \"https://someonewhocares.org/hosts/\", \"frequency\": \"frequently\", \"issues\": \"mailto:hosts@someonewhocares.org\", \"url\": \"https://someonewhocares.org/hosts/zero/hosts\", \"license\": \"non-commercial with attribution\"}, {\"name\": \"Tiuxo hostlist - ads\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/ads\", \"license\": \"CC BY 4.0\"}, {\"name\": \"UncheckyAds\", \"description\": \"Windows installers ads sources sites based on https://unchecky.com/ content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\", \"license\": \"MIT\"}, {\"name\": \"URLHaus\", \"description\": \"A project from [abuse.ch](https://abuse.ch/) with the goal of sharing malicious URLs.\", \"homeurl\": \"https://urlhaus.abuse.ch/\", \"frequency\": \"weekly\", \"issues\": \"mailto:contactme@abuse.ch\", \"url\": \"https://urlhaus.abuse.ch/downloads/hostfile/\", \"license\": \"CC0\"}, {\"name\": \"yoyo.org\", \"description\": \"Blocking with ad server and tracking server hostnames.\", \"homeurl\": \"https://pgl.yoyo.org/adservers/\", \"frequency\": \"frequently\", \"issues\": \"mailto:pgl@yoyo.org\", \"url\": \"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext&useip=0.0.0.0\", \"pause\": true}, {\"name\": \"Fake News\", \"description\": \"An in-progress collection of fake news outlets.\", \"homeurl\": \"https://github.com/marktron/fakenews\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/marktron/fakenews/issues\", \"url\": \"https://raw.githubusercontent.com/marktron/fakenews/master/fakenews\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's gambling domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/gambling/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's gambling blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/gambling-hosts\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's adult domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/adult/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"brijrajparmar27 - pornography\", \"description\": \"hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/brijrajparmar27/host-sources\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/brijrajparmar27/host-sources/issues\", \"url\": \"https://raw.githubusercontent.com/brijrajparmar27/host-sources/master/Porn/hosts\", \"license\": \"CC BY 4.0\"}, {\"name\": \"pornhosts -- a consolidated anti porn hosts file\", \"description\": \"This is an endeavour to find all porn domains and compile them into a single hosts to allow for easy blocking of porn on your local machine or on a network.\", \"homeurl\": \"https://github.com/Clefspeare13/pornhosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Clefspeare13/pornhosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/extensions/porn/clefspeare13/hosts\", \"url.old\": \"https://raw.githubusercontent.com/Clefspeare13/pornhosts/master/download_here/0.0.0.0/hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's porn blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/pornography-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's snuff-site blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/snuff-hosts\", \"license\": \"MIT\"}, {\"name\": \"Tiuxo hostlist - pornography\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/porn\", \"license\": \"CC BY 4.0\"}, {\"name\": \"Sinfonietta's social media blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/social-hosts\", \"license\": \"MIT\"}]}, \"social\": {\"location\": \"alternates/social/\", \"no_unified_hosts\": false, \"entries\": 119342, \"sourcesdata\": [{\"name\": \"Steven Black's ad-hoc list\", \"description\": \"Additional sketch domains as I come across them.\", \"homeurl\": \"https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/StevenBlack/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts\", \"license\": \"MIT\"}, {\"name\": \"AdAway\", \"description\": \"AdAway is an open source ad blocker for Android using the hosts file.\", \"homeurl\": \"https://adaway.org/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com/AdAway/adaway.github.io/issues\", \"url\": \"https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt\", \"license\": \"CC BY 3.0\", \"pause\": true}, {\"name\": \"add.2o7Net\", \"description\": \"2o7Net tracking sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Dead\", \"description\": \"Dead sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Dead/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Risk\", \"description\": \"Risk content sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Spam\", \"description\": \"Spam sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\", \"license\": \"MIT\"}, {\"name\": \"Mitchell Krog's - Badd Boyz Hosts\", \"description\": \"Sketchy domains and Bad Referrers from my Nginx and Apache Bad Bot and Spam Referrer Blockers\", \"homeurl\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts\", \"frequency\": \"weekly\", \"issues\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts/issues\", \"url\": \"https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts\", \"license\": \"MIT\"}, {\"name\": \"hostsVN\", \"description\": \"Hosts block ads of Vietnamese\", \"homeurl\": \"https://github.com/bigdargon/hostsVN\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/option/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"KADhosts\", \"description\": \"Fraud/adware/scam websites.\", \"homeurl\": \"https://kadantiscam.netlify.app/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com//FiltersHeroes/KADhosts/issues\", \"url\": \"https://raw.githubusercontent.com/FiltersHeroes/KADhosts/master/KADhosts.txt\", \"license\": \"CC BY-SA 4.0\"}, {\"name\": \"minecraft-hosts\", \"description\": \"Minecraft related tracker hosts\", \"homeurl\": \"https://github.com/jamiemansfield/minecraft-hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/jamiemansfield/minecraft-hosts/issues\", \"url\": \"https://raw.githubusercontent.com/jamiemansfield/minecraft-hosts/master/lists/tracking.txt\", \"license\": \"CC0-1.0\"}, {\"name\": \"MVPS hosts file\", \"description\": \"The purpose of this site is to provide the user with a high quality custom HOSTS file.\", \"homeurl\": \"https://winhelp2002.mvps.org/\", \"frequency\": \"monthly\", \"issues\": \"mailto:winhelp2002@gmail.com\", \"url\": \"https://winhelp2002.mvps.org/hosts.txt\", \"license\": \"CC BY-NC-SA 4.0\", \"pause\": true}, {\"name\": \"Dan Pollock \\u2013 [someonewhocares](https://someonewhocares.org/)\", \"description\": \"How to make the internet not suck (as much).\", \"homeurl\": \"https://someonewhocares.org/hosts/\", \"frequency\": \"frequently\", \"issues\": \"mailto:hosts@someonewhocares.org\", \"url\": \"https://someonewhocares.org/hosts/zero/hosts\", \"license\": \"non-commercial with attribution\"}, {\"name\": \"Tiuxo hostlist - ads\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/ads\", \"license\": \"CC BY 4.0\"}, {\"name\": \"UncheckyAds\", \"description\": \"Windows installers ads sources sites based on https://unchecky.com/ content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\", \"license\": \"MIT\"}, {\"name\": \"URLHaus\", \"description\": \"A project from [abuse.ch](https://abuse.ch/) with the goal of sharing malicious URLs.\", \"homeurl\": \"https://urlhaus.abuse.ch/\", \"frequency\": \"weekly\", \"issues\": \"mailto:contactme@abuse.ch\", \"url\": \"https://urlhaus.abuse.ch/downloads/hostfile/\", \"license\": \"CC0\"}, {\"name\": \"yoyo.org\", \"description\": \"Blocking with ad server and tracking server hostnames.\", \"homeurl\": \"https://pgl.yoyo.org/adservers/\", \"frequency\": \"frequently\", \"issues\": \"mailto:pgl@yoyo.org\", \"url\": \"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext&useip=0.0.0.0\", \"pause\": true}, {\"name\": \"Sinfonietta's social media blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/social-hosts\", \"license\": \"MIT\"}]}, \"gambling-porn-social\": {\"location\": \"alternates/gambling-porn-social/\", \"no_unified_hosts\": false, \"entries\": 204105, \"sourcesdata\": [{\"name\": \"Steven Black's ad-hoc list\", \"description\": \"Additional sketch domains as I come across them.\", \"homeurl\": \"https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/StevenBlack/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts\", \"license\": \"MIT\"}, {\"name\": \"AdAway\", \"description\": \"AdAway is an open source ad blocker for Android using the hosts file.\", \"homeurl\": \"https://adaway.org/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com/AdAway/adaway.github.io/issues\", \"url\": \"https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt\", \"license\": \"CC BY 3.0\", \"pause\": true}, {\"name\": \"add.2o7Net\", \"description\": \"2o7Net tracking sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Dead\", \"description\": \"Dead sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Dead/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Risk\", \"description\": \"Risk content sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Spam\", \"description\": \"Spam sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\", \"license\": \"MIT\"}, {\"name\": \"Mitchell Krog's - Badd Boyz Hosts\", \"description\": \"Sketchy domains and Bad Referrers from my Nginx and Apache Bad Bot and Spam Referrer Blockers\", \"homeurl\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts\", \"frequency\": \"weekly\", \"issues\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts/issues\", \"url\": \"https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts\", \"license\": \"MIT\"}, {\"name\": \"hostsVN\", \"description\": \"Hosts block ads of Vietnamese\", \"homeurl\": \"https://github.com/bigdargon/hostsVN\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/option/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"KADhosts\", \"description\": \"Fraud/adware/scam websites.\", \"homeurl\": \"https://kadantiscam.netlify.app/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com//FiltersHeroes/KADhosts/issues\", \"url\": \"https://raw.githubusercontent.com/FiltersHeroes/KADhosts/master/KADhosts.txt\", \"license\": \"CC BY-SA 4.0\"}, {\"name\": \"minecraft-hosts\", \"description\": \"Minecraft related tracker hosts\", \"homeurl\": \"https://github.com/jamiemansfield/minecraft-hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/jamiemansfield/minecraft-hosts/issues\", \"url\": \"https://raw.githubusercontent.com/jamiemansfield/minecraft-hosts/master/lists/tracking.txt\", \"license\": \"CC0-1.0\"}, {\"name\": \"MVPS hosts file\", \"description\": \"The purpose of this site is to provide the user with a high quality custom HOSTS file.\", \"homeurl\": \"https://winhelp2002.mvps.org/\", \"frequency\": \"monthly\", \"issues\": \"mailto:winhelp2002@gmail.com\", \"url\": \"https://winhelp2002.mvps.org/hosts.txt\", \"license\": \"CC BY-NC-SA 4.0\", \"pause\": true}, {\"name\": \"Dan Pollock \\u2013 [someonewhocares](https://someonewhocares.org/)\", \"description\": \"How to make the internet not suck (as much).\", \"homeurl\": \"https://someonewhocares.org/hosts/\", \"frequency\": \"frequently\", \"issues\": \"mailto:hosts@someonewhocares.org\", \"url\": \"https://someonewhocares.org/hosts/zero/hosts\", \"license\": \"non-commercial with attribution\"}, {\"name\": \"Tiuxo hostlist - ads\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/ads\", \"license\": \"CC BY 4.0\"}, {\"name\": \"UncheckyAds\", \"description\": \"Windows installers ads sources sites based on https://unchecky.com/ content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\", \"license\": \"MIT\"}, {\"name\": \"URLHaus\", \"description\": \"A project from [abuse.ch](https://abuse.ch/) with the goal of sharing malicious URLs.\", \"homeurl\": \"https://urlhaus.abuse.ch/\", \"frequency\": \"weekly\", \"issues\": \"mailto:contactme@abuse.ch\", \"url\": \"https://urlhaus.abuse.ch/downloads/hostfile/\", \"license\": \"CC0\"}, {\"name\": \"yoyo.org\", \"description\": \"Blocking with ad server and tracking server hostnames.\", \"homeurl\": \"https://pgl.yoyo.org/adservers/\", \"frequency\": \"frequently\", \"issues\": \"mailto:pgl@yoyo.org\", \"url\": \"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext&useip=0.0.0.0\", \"pause\": true}, {\"name\": \"BigDargon's gambling domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/gambling/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's gambling blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/gambling-hosts\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's adult domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/adult/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"brijrajparmar27 - pornography\", \"description\": \"hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/brijrajparmar27/host-sources\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/brijrajparmar27/host-sources/issues\", \"url\": \"https://raw.githubusercontent.com/brijrajparmar27/host-sources/master/Porn/hosts\", \"license\": \"CC BY 4.0\"}, {\"name\": \"pornhosts -- a consolidated anti porn hosts file\", \"description\": \"This is an endeavour to find all porn domains and compile them into a single hosts to allow for easy blocking of porn on your local machine or on a network.\", \"homeurl\": \"https://github.com/Clefspeare13/pornhosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Clefspeare13/pornhosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/extensions/porn/clefspeare13/hosts\", \"url.old\": \"https://raw.githubusercontent.com/Clefspeare13/pornhosts/master/download_here/0.0.0.0/hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's porn blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/pornography-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's snuff-site blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/snuff-hosts\", \"license\": \"MIT\"}, {\"name\": \"Tiuxo hostlist - pornography\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/porn\", \"license\": \"CC BY 4.0\"}, {\"name\": \"Sinfonietta's social media blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/social-hosts\", \"license\": \"MIT\"}]}, \"gambling\": {\"location\": \"alternates/gambling/\", \"no_unified_hosts\": false, \"entries\": 124843, \"sourcesdata\": [{\"name\": \"Steven Black's ad-hoc list\", \"description\": \"Additional sketch domains as I come across them.\", \"homeurl\": \"https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/StevenBlack/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts\", \"license\": \"MIT\"}, {\"name\": \"AdAway\", \"description\": \"AdAway is an open source ad blocker for Android using the hosts file.\", \"homeurl\": \"https://adaway.org/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com/AdAway/adaway.github.io/issues\", \"url\": \"https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt\", \"license\": \"CC BY 3.0\", \"pause\": true}, {\"name\": \"add.2o7Net\", \"description\": \"2o7Net tracking sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Dead\", \"description\": \"Dead sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Dead/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Risk\", \"description\": \"Risk content sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Spam\", \"description\": \"Spam sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\", \"license\": \"MIT\"}, {\"name\": \"Mitchell Krog's - Badd Boyz Hosts\", \"description\": \"Sketchy domains and Bad Referrers from my Nginx and Apache Bad Bot and Spam Referrer Blockers\", \"homeurl\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts\", \"frequency\": \"weekly\", \"issues\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts/issues\", \"url\": \"https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts\", \"license\": \"MIT\"}, {\"name\": \"hostsVN\", \"description\": \"Hosts block ads of Vietnamese\", \"homeurl\": \"https://github.com/bigdargon/hostsVN\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/option/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"KADhosts\", \"description\": \"Fraud/adware/scam websites.\", \"homeurl\": \"https://kadantiscam.netlify.app/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com//FiltersHeroes/KADhosts/issues\", \"url\": \"https://raw.githubusercontent.com/FiltersHeroes/KADhosts/master/KADhosts.txt\", \"license\": \"CC BY-SA 4.0\"}, {\"name\": \"minecraft-hosts\", \"description\": \"Minecraft related tracker hosts\", \"homeurl\": \"https://github.com/jamiemansfield/minecraft-hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/jamiemansfield/minecraft-hosts/issues\", \"url\": \"https://raw.githubusercontent.com/jamiemansfield/minecraft-hosts/master/lists/tracking.txt\", \"license\": \"CC0-1.0\"}, {\"name\": \"MVPS hosts file\", \"description\": \"The purpose of this site is to provide the user with a high quality custom HOSTS file.\", \"homeurl\": \"https://winhelp2002.mvps.org/\", \"frequency\": \"monthly\", \"issues\": \"mailto:winhelp2002@gmail.com\", \"url\": \"https://winhelp2002.mvps.org/hosts.txt\", \"license\": \"CC BY-NC-SA 4.0\", \"pause\": true}, {\"name\": \"Dan Pollock \\u2013 [someonewhocares](https://someonewhocares.org/)\", \"description\": \"How to make the internet not suck (as much).\", \"homeurl\": \"https://someonewhocares.org/hosts/\", \"frequency\": \"frequently\", \"issues\": \"mailto:hosts@someonewhocares.org\", \"url\": \"https://someonewhocares.org/hosts/zero/hosts\", \"license\": \"non-commercial with attribution\"}, {\"name\": \"Tiuxo hostlist - ads\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/ads\", \"license\": \"CC BY 4.0\"}, {\"name\": \"UncheckyAds\", \"description\": \"Windows installers ads sources sites based on https://unchecky.com/ content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\", \"license\": \"MIT\"}, {\"name\": \"URLHaus\", \"description\": \"A project from [abuse.ch](https://abuse.ch/) with the goal of sharing malicious URLs.\", \"homeurl\": \"https://urlhaus.abuse.ch/\", \"frequency\": \"weekly\", \"issues\": \"mailto:contactme@abuse.ch\", \"url\": \"https://urlhaus.abuse.ch/downloads/hostfile/\", \"license\": \"CC0\"}, {\"name\": \"yoyo.org\", \"description\": \"Blocking with ad server and tracking server hostnames.\", \"homeurl\": \"https://pgl.yoyo.org/adservers/\", \"frequency\": \"frequently\", \"issues\": \"mailto:pgl@yoyo.org\", \"url\": \"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext&useip=0.0.0.0\", \"pause\": true}, {\"name\": \"BigDargon's gambling domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/gambling/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's gambling blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/gambling-hosts\", \"license\": \"MIT\"}]}, \"porn-social\": {\"location\": \"alternates/porn-social/\", \"no_unified_hosts\": false, \"entries\": 195416, \"sourcesdata\": [{\"name\": \"Steven Black's ad-hoc list\", \"description\": \"Additional sketch domains as I come across them.\", \"homeurl\": \"https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/StevenBlack/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts\", \"license\": \"MIT\"}, {\"name\": \"AdAway\", \"description\": \"AdAway is an open source ad blocker for Android using the hosts file.\", \"homeurl\": \"https://adaway.org/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com/AdAway/adaway.github.io/issues\", \"url\": \"https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt\", \"license\": \"CC BY 3.0\", \"pause\": true}, {\"name\": \"add.2o7Net\", \"description\": \"2o7Net tracking sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Dead\", \"description\": \"Dead sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Dead/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Risk\", \"description\": \"Risk content sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Spam\", \"description\": \"Spam sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\", \"license\": \"MIT\"}, {\"name\": \"Mitchell Krog's - Badd Boyz Hosts\", \"description\": \"Sketchy domains and Bad Referrers from my Nginx and Apache Bad Bot and Spam Referrer Blockers\", \"homeurl\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts\", \"frequency\": \"weekly\", \"issues\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts/issues\", \"url\": \"https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts\", \"license\": \"MIT\"}, {\"name\": \"hostsVN\", \"description\": \"Hosts block ads of Vietnamese\", \"homeurl\": \"https://github.com/bigdargon/hostsVN\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/option/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"KADhosts\", \"description\": \"Fraud/adware/scam websites.\", \"homeurl\": \"https://kadantiscam.netlify.app/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com//FiltersHeroes/KADhosts/issues\", \"url\": \"https://raw.githubusercontent.com/FiltersHeroes/KADhosts/master/KADhosts.txt\", \"license\": \"CC BY-SA 4.0\"}, {\"name\": \"minecraft-hosts\", \"description\": \"Minecraft related tracker hosts\", \"homeurl\": \"https://github.com/jamiemansfield/minecraft-hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/jamiemansfield/minecraft-hosts/issues\", \"url\": \"https://raw.githubusercontent.com/jamiemansfield/minecraft-hosts/master/lists/tracking.txt\", \"license\": \"CC0-1.0\"}, {\"name\": \"MVPS hosts file\", \"description\": \"The purpose of this site is to provide the user with a high quality custom HOSTS file.\", \"homeurl\": \"https://winhelp2002.mvps.org/\", \"frequency\": \"monthly\", \"issues\": \"mailto:winhelp2002@gmail.com\", \"url\": \"https://winhelp2002.mvps.org/hosts.txt\", \"license\": \"CC BY-NC-SA 4.0\", \"pause\": true}, {\"name\": \"Dan Pollock \\u2013 [someonewhocares](https://someonewhocares.org/)\", \"description\": \"How to make the internet not suck (as much).\", \"homeurl\": \"https://someonewhocares.org/hosts/\", \"frequency\": \"frequently\", \"issues\": \"mailto:hosts@someonewhocares.org\", \"url\": \"https://someonewhocares.org/hosts/zero/hosts\", \"license\": \"non-commercial with attribution\"}, {\"name\": \"Tiuxo hostlist - ads\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/ads\", \"license\": \"CC BY 4.0\"}, {\"name\": \"UncheckyAds\", \"description\": \"Windows installers ads sources sites based on https://unchecky.com/ content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\", \"license\": \"MIT\"}, {\"name\": \"URLHaus\", \"description\": \"A project from [abuse.ch](https://abuse.ch/) with the goal of sharing malicious URLs.\", \"homeurl\": \"https://urlhaus.abuse.ch/\", \"frequency\": \"weekly\", \"issues\": \"mailto:contactme@abuse.ch\", \"url\": \"https://urlhaus.abuse.ch/downloads/hostfile/\", \"license\": \"CC0\"}, {\"name\": \"yoyo.org\", \"description\": \"Blocking with ad server and tracking server hostnames.\", \"homeurl\": \"https://pgl.yoyo.org/adservers/\", \"frequency\": \"frequently\", \"issues\": \"mailto:pgl@yoyo.org\", \"url\": \"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext&useip=0.0.0.0\", \"pause\": true}, {\"name\": \"BigDargon's adult domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/adult/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"brijrajparmar27 - pornography\", \"description\": \"hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/brijrajparmar27/host-sources\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/brijrajparmar27/host-sources/issues\", \"url\": \"https://raw.githubusercontent.com/brijrajparmar27/host-sources/master/Porn/hosts\", \"license\": \"CC BY 4.0\"}, {\"name\": \"pornhosts -- a consolidated anti porn hosts file\", \"description\": \"This is an endeavour to find all porn domains and compile them into a single hosts to allow for easy blocking of porn on your local machine or on a network.\", \"homeurl\": \"https://github.com/Clefspeare13/pornhosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Clefspeare13/pornhosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/extensions/porn/clefspeare13/hosts\", \"url.old\": \"https://raw.githubusercontent.com/Clefspeare13/pornhosts/master/download_here/0.0.0.0/hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's porn blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/pornography-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's snuff-site blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/snuff-hosts\", \"license\": \"MIT\"}, {\"name\": \"Tiuxo hostlist - pornography\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/porn\", \"license\": \"CC BY 4.0\"}, {\"name\": \"Sinfonietta's social media blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/social-hosts\", \"license\": \"MIT\"}]}, \"gambling-social\": {\"location\": \"alternates/gambling-social/\", \"no_unified_hosts\": false, \"entries\": 128031, \"sourcesdata\": [{\"name\": \"Steven Black's ad-hoc list\", \"description\": \"Additional sketch domains as I come across them.\", \"homeurl\": \"https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/StevenBlack/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts\", \"license\": \"MIT\"}, {\"name\": \"AdAway\", \"description\": \"AdAway is an open source ad blocker for Android using the hosts file.\", \"homeurl\": \"https://adaway.org/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com/AdAway/adaway.github.io/issues\", \"url\": \"https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt\", \"license\": \"CC BY 3.0\", \"pause\": true}, {\"name\": \"add.2o7Net\", \"description\": \"2o7Net tracking sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Dead\", \"description\": \"Dead sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Dead/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Risk\", \"description\": \"Risk content sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Spam\", \"description\": \"Spam sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\", \"license\": \"MIT\"}, {\"name\": \"Mitchell Krog's - Badd Boyz Hosts\", \"description\": \"Sketchy domains and Bad Referrers from my Nginx and Apache Bad Bot and Spam Referrer Blockers\", \"homeurl\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts\", \"frequency\": \"weekly\", \"issues\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts/issues\", \"url\": \"https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts\", \"license\": \"MIT\"}, {\"name\": \"hostsVN\", \"description\": \"Hosts block ads of Vietnamese\", \"homeurl\": \"https://github.com/bigdargon/hostsVN\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/option/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"KADhosts\", \"description\": \"Fraud/adware/scam websites.\", \"homeurl\": \"https://kadantiscam.netlify.app/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com//FiltersHeroes/KADhosts/issues\", \"url\": \"https://raw.githubusercontent.com/FiltersHeroes/KADhosts/master/KADhosts.txt\", \"license\": \"CC BY-SA 4.0\"}, {\"name\": \"minecraft-hosts\", \"description\": \"Minecraft related tracker hosts\", \"homeurl\": \"https://github.com/jamiemansfield/minecraft-hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/jamiemansfield/minecraft-hosts/issues\", \"url\": \"https://raw.githubusercontent.com/jamiemansfield/minecraft-hosts/master/lists/tracking.txt\", \"license\": \"CC0-1.0\"}, {\"name\": \"MVPS hosts file\", \"description\": \"The purpose of this site is to provide the user with a high quality custom HOSTS file.\", \"homeurl\": \"https://winhelp2002.mvps.org/\", \"frequency\": \"monthly\", \"issues\": \"mailto:winhelp2002@gmail.com\", \"url\": \"https://winhelp2002.mvps.org/hosts.txt\", \"license\": \"CC BY-NC-SA 4.0\", \"pause\": true}, {\"name\": \"Dan Pollock \\u2013 [someonewhocares](https://someonewhocares.org/)\", \"description\": \"How to make the internet not suck (as much).\", \"homeurl\": \"https://someonewhocares.org/hosts/\", \"frequency\": \"frequently\", \"issues\": \"mailto:hosts@someonewhocares.org\", \"url\": \"https://someonewhocares.org/hosts/zero/hosts\", \"license\": \"non-commercial with attribution\"}, {\"name\": \"Tiuxo hostlist - ads\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/ads\", \"license\": \"CC BY 4.0\"}, {\"name\": \"UncheckyAds\", \"description\": \"Windows installers ads sources sites based on https://unchecky.com/ content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\", \"license\": \"MIT\"}, {\"name\": \"URLHaus\", \"description\": \"A project from [abuse.ch](https://abuse.ch/) with the goal of sharing malicious URLs.\", \"homeurl\": \"https://urlhaus.abuse.ch/\", \"frequency\": \"weekly\", \"issues\": \"mailto:contactme@abuse.ch\", \"url\": \"https://urlhaus.abuse.ch/downloads/hostfile/\", \"license\": \"CC0\"}, {\"name\": \"yoyo.org\", \"description\": \"Blocking with ad server and tracking server hostnames.\", \"homeurl\": \"https://pgl.yoyo.org/adservers/\", \"frequency\": \"frequently\", \"issues\": \"mailto:pgl@yoyo.org\", \"url\": \"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext&useip=0.0.0.0\", \"pause\": true}, {\"name\": \"BigDargon's gambling domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/gambling/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's gambling blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/gambling-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's social media blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/social-hosts\", \"license\": \"MIT\"}]}, \"fakenews-porn\": {\"location\": \"alternates/fakenews-porn/\", \"no_unified_hosts\": false, \"entries\": 194423, \"sourcesdata\": [{\"name\": \"Steven Black's ad-hoc list\", \"description\": \"Additional sketch domains as I come across them.\", \"homeurl\": \"https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/StevenBlack/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts\", \"license\": \"MIT\"}, {\"name\": \"AdAway\", \"description\": \"AdAway is an open source ad blocker for Android using the hosts file.\", \"homeurl\": \"https://adaway.org/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com/AdAway/adaway.github.io/issues\", \"url\": \"https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt\", \"license\": \"CC BY 3.0\", \"pause\": true}, {\"name\": \"add.2o7Net\", \"description\": \"2o7Net tracking sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Dead\", \"description\": \"Dead sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Dead/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Risk\", \"description\": \"Risk content sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Spam\", \"description\": \"Spam sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\", \"license\": \"MIT\"}, {\"name\": \"Mitchell Krog's - Badd Boyz Hosts\", \"description\": \"Sketchy domains and Bad Referrers from my Nginx and Apache Bad Bot and Spam Referrer Blockers\", \"homeurl\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts\", \"frequency\": \"weekly\", \"issues\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts/issues\", \"url\": \"https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts\", \"license\": \"MIT\"}, {\"name\": \"hostsVN\", \"description\": \"Hosts block ads of Vietnamese\", \"homeurl\": \"https://github.com/bigdargon/hostsVN\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/option/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"KADhosts\", \"description\": \"Fraud/adware/scam websites.\", \"homeurl\": \"https://kadantiscam.netlify.app/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com//FiltersHeroes/KADhosts/issues\", \"url\": \"https://raw.githubusercontent.com/FiltersHeroes/KADhosts/master/KADhosts.txt\", \"license\": \"CC BY-SA 4.0\"}, {\"name\": \"minecraft-hosts\", \"description\": \"Minecraft related tracker hosts\", \"homeurl\": \"https://github.com/jamiemansfield/minecraft-hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/jamiemansfield/minecraft-hosts/issues\", \"url\": \"https://raw.githubusercontent.com/jamiemansfield/minecraft-hosts/master/lists/tracking.txt\", \"license\": \"CC0-1.0\"}, {\"name\": \"MVPS hosts file\", \"description\": \"The purpose of this site is to provide the user with a high quality custom HOSTS file.\", \"homeurl\": \"https://winhelp2002.mvps.org/\", \"frequency\": \"monthly\", \"issues\": \"mailto:winhelp2002@gmail.com\", \"url\": \"https://winhelp2002.mvps.org/hosts.txt\", \"license\": \"CC BY-NC-SA 4.0\", \"pause\": true}, {\"name\": \"Dan Pollock \\u2013 [someonewhocares](https://someonewhocares.org/)\", \"description\": \"How to make the internet not suck (as much).\", \"homeurl\": \"https://someonewhocares.org/hosts/\", \"frequency\": \"frequently\", \"issues\": \"mailto:hosts@someonewhocares.org\", \"url\": \"https://someonewhocares.org/hosts/zero/hosts\", \"license\": \"non-commercial with attribution\"}, {\"name\": \"Tiuxo hostlist - ads\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/ads\", \"license\": \"CC BY 4.0\"}, {\"name\": \"UncheckyAds\", \"description\": \"Windows installers ads sources sites based on https://unchecky.com/ content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\", \"license\": \"MIT\"}, {\"name\": \"URLHaus\", \"description\": \"A project from [abuse.ch](https://abuse.ch/) with the goal of sharing malicious URLs.\", \"homeurl\": \"https://urlhaus.abuse.ch/\", \"frequency\": \"weekly\", \"issues\": \"mailto:contactme@abuse.ch\", \"url\": \"https://urlhaus.abuse.ch/downloads/hostfile/\", \"license\": \"CC0\"}, {\"name\": \"yoyo.org\", \"description\": \"Blocking with ad server and tracking server hostnames.\", \"homeurl\": \"https://pgl.yoyo.org/adservers/\", \"frequency\": \"frequently\", \"issues\": \"mailto:pgl@yoyo.org\", \"url\": \"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext&useip=0.0.0.0\", \"pause\": true}, {\"name\": \"Fake News\", \"description\": \"An in-progress collection of fake news outlets.\", \"homeurl\": \"https://github.com/marktron/fakenews\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/marktron/fakenews/issues\", \"url\": \"https://raw.githubusercontent.com/marktron/fakenews/master/fakenews\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's adult domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/adult/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"brijrajparmar27 - pornography\", \"description\": \"hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/brijrajparmar27/host-sources\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/brijrajparmar27/host-sources/issues\", \"url\": \"https://raw.githubusercontent.com/brijrajparmar27/host-sources/master/Porn/hosts\", \"license\": \"CC BY 4.0\"}, {\"name\": \"pornhosts -- a consolidated anti porn hosts file\", \"description\": \"This is an endeavour to find all porn domains and compile them into a single hosts to allow for easy blocking of porn on your local machine or on a network.\", \"homeurl\": \"https://github.com/Clefspeare13/pornhosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Clefspeare13/pornhosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/extensions/porn/clefspeare13/hosts\", \"url.old\": \"https://raw.githubusercontent.com/Clefspeare13/pornhosts/master/download_here/0.0.0.0/hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's porn blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/pornography-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's snuff-site blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/snuff-hosts\", \"license\": \"MIT\"}, {\"name\": \"Tiuxo hostlist - pornography\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/porn\", \"license\": \"CC BY 4.0\"}]}, \"fakenews-porn-social\": {\"location\": \"alternates/fakenews-porn-social/\", \"no_unified_hosts\": false, \"entries\": 197610, \"sourcesdata\": [{\"name\": \"Steven Black's ad-hoc list\", \"description\": \"Additional sketch domains as I come across them.\", \"homeurl\": \"https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/StevenBlack/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts\", \"license\": \"MIT\"}, {\"name\": \"AdAway\", \"description\": \"AdAway is an open source ad blocker for Android using the hosts file.\", \"homeurl\": \"https://adaway.org/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com/AdAway/adaway.github.io/issues\", \"url\": \"https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt\", \"license\": \"CC BY 3.0\", \"pause\": true}, {\"name\": \"add.2o7Net\", \"description\": \"2o7Net tracking sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Dead\", \"description\": \"Dead sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Dead/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Risk\", \"description\": \"Risk content sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Spam\", \"description\": \"Spam sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\", \"license\": \"MIT\"}, {\"name\": \"Mitchell Krog's - Badd Boyz Hosts\", \"description\": \"Sketchy domains and Bad Referrers from my Nginx and Apache Bad Bot and Spam Referrer Blockers\", \"homeurl\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts\", \"frequency\": \"weekly\", \"issues\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts/issues\", \"url\": \"https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts\", \"license\": \"MIT\"}, {\"name\": \"hostsVN\", \"description\": \"Hosts block ads of Vietnamese\", \"homeurl\": \"https://github.com/bigdargon/hostsVN\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/option/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"KADhosts\", \"description\": \"Fraud/adware/scam websites.\", \"homeurl\": \"https://kadantiscam.netlify.app/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com//FiltersHeroes/KADhosts/issues\", \"url\": \"https://raw.githubusercontent.com/FiltersHeroes/KADhosts/master/KADhosts.txt\", \"license\": \"CC BY-SA 4.0\"}, {\"name\": \"minecraft-hosts\", \"description\": \"Minecraft related tracker hosts\", \"homeurl\": \"https://github.com/jamiemansfield/minecraft-hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/jamiemansfield/minecraft-hosts/issues\", \"url\": \"https://raw.githubusercontent.com/jamiemansfield/minecraft-hosts/master/lists/tracking.txt\", \"license\": \"CC0-1.0\"}, {\"name\": \"MVPS hosts file\", \"description\": \"The purpose of this site is to provide the user with a high quality custom HOSTS file.\", \"homeurl\": \"https://winhelp2002.mvps.org/\", \"frequency\": \"monthly\", \"issues\": \"mailto:winhelp2002@gmail.com\", \"url\": \"https://winhelp2002.mvps.org/hosts.txt\", \"license\": \"CC BY-NC-SA 4.0\", \"pause\": true}, {\"name\": \"Dan Pollock \\u2013 [someonewhocares](https://someonewhocares.org/)\", \"description\": \"How to make the internet not suck (as much).\", \"homeurl\": \"https://someonewhocares.org/hosts/\", \"frequency\": \"frequently\", \"issues\": \"mailto:hosts@someonewhocares.org\", \"url\": \"https://someonewhocares.org/hosts/zero/hosts\", \"license\": \"non-commercial with attribution\"}, {\"name\": \"Tiuxo hostlist - ads\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/ads\", \"license\": \"CC BY 4.0\"}, {\"name\": \"UncheckyAds\", \"description\": \"Windows installers ads sources sites based on https://unchecky.com/ content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\", \"license\": \"MIT\"}, {\"name\": \"URLHaus\", \"description\": \"A project from [abuse.ch](https://abuse.ch/) with the goal of sharing malicious URLs.\", \"homeurl\": \"https://urlhaus.abuse.ch/\", \"frequency\": \"weekly\", \"issues\": \"mailto:contactme@abuse.ch\", \"url\": \"https://urlhaus.abuse.ch/downloads/hostfile/\", \"license\": \"CC0\"}, {\"name\": \"yoyo.org\", \"description\": \"Blocking with ad server and tracking server hostnames.\", \"homeurl\": \"https://pgl.yoyo.org/adservers/\", \"frequency\": \"frequently\", \"issues\": \"mailto:pgl@yoyo.org\", \"url\": \"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext&useip=0.0.0.0\", \"pause\": true}, {\"name\": \"Fake News\", \"description\": \"An in-progress collection of fake news outlets.\", \"homeurl\": \"https://github.com/marktron/fakenews\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/marktron/fakenews/issues\", \"url\": \"https://raw.githubusercontent.com/marktron/fakenews/master/fakenews\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's adult domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/adult/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"brijrajparmar27 - pornography\", \"description\": \"hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/brijrajparmar27/host-sources\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/brijrajparmar27/host-sources/issues\", \"url\": \"https://raw.githubusercontent.com/brijrajparmar27/host-sources/master/Porn/hosts\", \"license\": \"CC BY 4.0\"}, {\"name\": \"pornhosts -- a consolidated anti porn hosts file\", \"description\": \"This is an endeavour to find all porn domains and compile them into a single hosts to allow for easy blocking of porn on your local machine or on a network.\", \"homeurl\": \"https://github.com/Clefspeare13/pornhosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Clefspeare13/pornhosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/extensions/porn/clefspeare13/hosts\", \"url.old\": \"https://raw.githubusercontent.com/Clefspeare13/pornhosts/master/download_here/0.0.0.0/hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's porn blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/pornography-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's snuff-site blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/snuff-hosts\", \"license\": \"MIT\"}, {\"name\": \"Tiuxo hostlist - pornography\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/porn\", \"license\": \"CC BY 4.0\"}, {\"name\": \"Sinfonietta's social media blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/social-hosts\", \"license\": \"MIT\"}]}, \"fakenews-gambling\": {\"location\": \"alternates/fakenews-gambling/\", \"no_unified_hosts\": false, \"entries\": 127037, \"sourcesdata\": [{\"name\": \"Steven Black's ad-hoc list\", \"description\": \"Additional sketch domains as I come across them.\", \"homeurl\": \"https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/StevenBlack/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts\", \"license\": \"MIT\"}, {\"name\": \"AdAway\", \"description\": \"AdAway is an open source ad blocker for Android using the hosts file.\", \"homeurl\": \"https://adaway.org/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com/AdAway/adaway.github.io/issues\", \"url\": \"https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt\", \"license\": \"CC BY 3.0\", \"pause\": true}, {\"name\": \"add.2o7Net\", \"description\": \"2o7Net tracking sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Dead\", \"description\": \"Dead sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Dead/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Risk\", \"description\": \"Risk content sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Spam\", \"description\": \"Spam sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\", \"license\": \"MIT\"}, {\"name\": \"Mitchell Krog's - Badd Boyz Hosts\", \"description\": \"Sketchy domains and Bad Referrers from my Nginx and Apache Bad Bot and Spam Referrer Blockers\", \"homeurl\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts\", \"frequency\": \"weekly\", \"issues\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts/issues\", \"url\": \"https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts\", \"license\": \"MIT\"}, {\"name\": \"hostsVN\", \"description\": \"Hosts block ads of Vietnamese\", \"homeurl\": \"https://github.com/bigdargon/hostsVN\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/option/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"KADhosts\", \"description\": \"Fraud/adware/scam websites.\", \"homeurl\": \"https://kadantiscam.netlify.app/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com//FiltersHeroes/KADhosts/issues\", \"url\": \"https://raw.githubusercontent.com/FiltersHeroes/KADhosts/master/KADhosts.txt\", \"license\": \"CC BY-SA 4.0\"}, {\"name\": \"minecraft-hosts\", \"description\": \"Minecraft related tracker hosts\", \"homeurl\": \"https://github.com/jamiemansfield/minecraft-hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/jamiemansfield/minecraft-hosts/issues\", \"url\": \"https://raw.githubusercontent.com/jamiemansfield/minecraft-hosts/master/lists/tracking.txt\", \"license\": \"CC0-1.0\"}, {\"name\": \"MVPS hosts file\", \"description\": \"The purpose of this site is to provide the user with a high quality custom HOSTS file.\", \"homeurl\": \"https://winhelp2002.mvps.org/\", \"frequency\": \"monthly\", \"issues\": \"mailto:winhelp2002@gmail.com\", \"url\": \"https://winhelp2002.mvps.org/hosts.txt\", \"license\": \"CC BY-NC-SA 4.0\", \"pause\": true}, {\"name\": \"Dan Pollock \\u2013 [someonewhocares](https://someonewhocares.org/)\", \"description\": \"How to make the internet not suck (as much).\", \"homeurl\": \"https://someonewhocares.org/hosts/\", \"frequency\": \"frequently\", \"issues\": \"mailto:hosts@someonewhocares.org\", \"url\": \"https://someonewhocares.org/hosts/zero/hosts\", \"license\": \"non-commercial with attribution\"}, {\"name\": \"Tiuxo hostlist - ads\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/ads\", \"license\": \"CC BY 4.0\"}, {\"name\": \"UncheckyAds\", \"description\": \"Windows installers ads sources sites based on https://unchecky.com/ content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\", \"license\": \"MIT\"}, {\"name\": \"URLHaus\", \"description\": \"A project from [abuse.ch](https://abuse.ch/) with the goal of sharing malicious URLs.\", \"homeurl\": \"https://urlhaus.abuse.ch/\", \"frequency\": \"weekly\", \"issues\": \"mailto:contactme@abuse.ch\", \"url\": \"https://urlhaus.abuse.ch/downloads/hostfile/\", \"license\": \"CC0\"}, {\"name\": \"yoyo.org\", \"description\": \"Blocking with ad server and tracking server hostnames.\", \"homeurl\": \"https://pgl.yoyo.org/adservers/\", \"frequency\": \"frequently\", \"issues\": \"mailto:pgl@yoyo.org\", \"url\": \"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext&useip=0.0.0.0\", \"pause\": true}, {\"name\": \"Fake News\", \"description\": \"An in-progress collection of fake news outlets.\", \"homeurl\": \"https://github.com/marktron/fakenews\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/marktron/fakenews/issues\", \"url\": \"https://raw.githubusercontent.com/marktron/fakenews/master/fakenews\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's gambling domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/gambling/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's gambling blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/gambling-hosts\", \"license\": \"MIT\"}]}, \"porn\": {\"location\": \"alternates/porn/\", \"no_unified_hosts\": false, \"entries\": 192229, \"sourcesdata\": [{\"name\": \"Steven Black's ad-hoc list\", \"description\": \"Additional sketch domains as I come across them.\", \"homeurl\": \"https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/StevenBlack/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts\", \"license\": \"MIT\"}, {\"name\": \"AdAway\", \"description\": \"AdAway is an open source ad blocker for Android using the hosts file.\", \"homeurl\": \"https://adaway.org/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com/AdAway/adaway.github.io/issues\", \"url\": \"https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt\", \"license\": \"CC BY 3.0\", \"pause\": true}, {\"name\": \"add.2o7Net\", \"description\": \"2o7Net tracking sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Dead\", \"description\": \"Dead sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Dead/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Risk\", \"description\": \"Risk content sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Spam\", \"description\": \"Spam sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\", \"license\": \"MIT\"}, {\"name\": \"Mitchell Krog's - Badd Boyz Hosts\", \"description\": \"Sketchy domains and Bad Referrers from my Nginx and Apache Bad Bot and Spam Referrer Blockers\", \"homeurl\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts\", \"frequency\": \"weekly\", \"issues\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts/issues\", \"url\": \"https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts\", \"license\": \"MIT\"}, {\"name\": \"hostsVN\", \"description\": \"Hosts block ads of Vietnamese\", \"homeurl\": \"https://github.com/bigdargon/hostsVN\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/option/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"KADhosts\", \"description\": \"Fraud/adware/scam websites.\", \"homeurl\": \"https://kadantiscam.netlify.app/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com//FiltersHeroes/KADhosts/issues\", \"url\": \"https://raw.githubusercontent.com/FiltersHeroes/KADhosts/master/KADhosts.txt\", \"license\": \"CC BY-SA 4.0\"}, {\"name\": \"minecraft-hosts\", \"description\": \"Minecraft related tracker hosts\", \"homeurl\": \"https://github.com/jamiemansfield/minecraft-hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/jamiemansfield/minecraft-hosts/issues\", \"url\": \"https://raw.githubusercontent.com/jamiemansfield/minecraft-hosts/master/lists/tracking.txt\", \"license\": \"CC0-1.0\"}, {\"name\": \"MVPS hosts file\", \"description\": \"The purpose of this site is to provide the user with a high quality custom HOSTS file.\", \"homeurl\": \"https://winhelp2002.mvps.org/\", \"frequency\": \"monthly\", \"issues\": \"mailto:winhelp2002@gmail.com\", \"url\": \"https://winhelp2002.mvps.org/hosts.txt\", \"license\": \"CC BY-NC-SA 4.0\", \"pause\": true}, {\"name\": \"Dan Pollock \\u2013 [someonewhocares](https://someonewhocares.org/)\", \"description\": \"How to make the internet not suck (as much).\", \"homeurl\": \"https://someonewhocares.org/hosts/\", \"frequency\": \"frequently\", \"issues\": \"mailto:hosts@someonewhocares.org\", \"url\": \"https://someonewhocares.org/hosts/zero/hosts\", \"license\": \"non-commercial with attribution\"}, {\"name\": \"Tiuxo hostlist - ads\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/ads\", \"license\": \"CC BY 4.0\"}, {\"name\": \"UncheckyAds\", \"description\": \"Windows installers ads sources sites based on https://unchecky.com/ content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\", \"license\": \"MIT\"}, {\"name\": \"URLHaus\", \"description\": \"A project from [abuse.ch](https://abuse.ch/) with the goal of sharing malicious URLs.\", \"homeurl\": \"https://urlhaus.abuse.ch/\", \"frequency\": \"weekly\", \"issues\": \"mailto:contactme@abuse.ch\", \"url\": \"https://urlhaus.abuse.ch/downloads/hostfile/\", \"license\": \"CC0\"}, {\"name\": \"yoyo.org\", \"description\": \"Blocking with ad server and tracking server hostnames.\", \"homeurl\": \"https://pgl.yoyo.org/adservers/\", \"frequency\": \"frequently\", \"issues\": \"mailto:pgl@yoyo.org\", \"url\": \"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext&useip=0.0.0.0\", \"pause\": true}, {\"name\": \"BigDargon's adult domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/adult/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"brijrajparmar27 - pornography\", \"description\": \"hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/brijrajparmar27/host-sources\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/brijrajparmar27/host-sources/issues\", \"url\": \"https://raw.githubusercontent.com/brijrajparmar27/host-sources/master/Porn/hosts\", \"license\": \"CC BY 4.0\"}, {\"name\": \"pornhosts -- a consolidated anti porn hosts file\", \"description\": \"This is an endeavour to find all porn domains and compile them into a single hosts to allow for easy blocking of porn on your local machine or on a network.\", \"homeurl\": \"https://github.com/Clefspeare13/pornhosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Clefspeare13/pornhosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/extensions/porn/clefspeare13/hosts\", \"url.old\": \"https://raw.githubusercontent.com/Clefspeare13/pornhosts/master/download_here/0.0.0.0/hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's porn blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/pornography-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's snuff-site blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/snuff-hosts\", \"license\": \"MIT\"}, {\"name\": \"Tiuxo hostlist - pornography\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/porn\", \"license\": \"CC BY 4.0\"}]}, \"fakenews-social\": {\"location\": \"alternates/fakenews-social/\", \"no_unified_hosts\": false, \"entries\": 121536, \"sourcesdata\": [{\"name\": \"Steven Black's ad-hoc list\", \"description\": \"Additional sketch domains as I come across them.\", \"homeurl\": \"https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/StevenBlack/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts\", \"license\": \"MIT\"}, {\"name\": \"AdAway\", \"description\": \"AdAway is an open source ad blocker for Android using the hosts file.\", \"homeurl\": \"https://adaway.org/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com/AdAway/adaway.github.io/issues\", \"url\": \"https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt\", \"license\": \"CC BY 3.0\", \"pause\": true}, {\"name\": \"add.2o7Net\", \"description\": \"2o7Net tracking sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Dead\", \"description\": \"Dead sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Dead/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Risk\", \"description\": \"Risk content sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Spam\", \"description\": \"Spam sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\", \"license\": \"MIT\"}, {\"name\": \"Mitchell Krog's - Badd Boyz Hosts\", \"description\": \"Sketchy domains and Bad Referrers from my Nginx and Apache Bad Bot and Spam Referrer Blockers\", \"homeurl\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts\", \"frequency\": \"weekly\", \"issues\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts/issues\", \"url\": \"https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts\", \"license\": \"MIT\"}, {\"name\": \"hostsVN\", \"description\": \"Hosts block ads of Vietnamese\", \"homeurl\": \"https://github.com/bigdargon/hostsVN\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/option/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"KADhosts\", \"description\": \"Fraud/adware/scam websites.\", \"homeurl\": \"https://kadantiscam.netlify.app/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com//FiltersHeroes/KADhosts/issues\", \"url\": \"https://raw.githubusercontent.com/FiltersHeroes/KADhosts/master/KADhosts.txt\", \"license\": \"CC BY-SA 4.0\"}, {\"name\": \"minecraft-hosts\", \"description\": \"Minecraft related tracker hosts\", \"homeurl\": \"https://github.com/jamiemansfield/minecraft-hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/jamiemansfield/minecraft-hosts/issues\", \"url\": \"https://raw.githubusercontent.com/jamiemansfield/minecraft-hosts/master/lists/tracking.txt\", \"license\": \"CC0-1.0\"}, {\"name\": \"MVPS hosts file\", \"description\": \"The purpose of this site is to provide the user with a high quality custom HOSTS file.\", \"homeurl\": \"https://winhelp2002.mvps.org/\", \"frequency\": \"monthly\", \"issues\": \"mailto:winhelp2002@gmail.com\", \"url\": \"https://winhelp2002.mvps.org/hosts.txt\", \"license\": \"CC BY-NC-SA 4.0\", \"pause\": true}, {\"name\": \"Dan Pollock \\u2013 [someonewhocares](https://someonewhocares.org/)\", \"description\": \"How to make the internet not suck (as much).\", \"homeurl\": \"https://someonewhocares.org/hosts/\", \"frequency\": \"frequently\", \"issues\": \"mailto:hosts@someonewhocares.org\", \"url\": \"https://someonewhocares.org/hosts/zero/hosts\", \"license\": \"non-commercial with attribution\"}, {\"name\": \"Tiuxo hostlist - ads\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/ads\", \"license\": \"CC BY 4.0\"}, {\"name\": \"UncheckyAds\", \"description\": \"Windows installers ads sources sites based on https://unchecky.com/ content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\", \"license\": \"MIT\"}, {\"name\": \"URLHaus\", \"description\": \"A project from [abuse.ch](https://abuse.ch/) with the goal of sharing malicious URLs.\", \"homeurl\": \"https://urlhaus.abuse.ch/\", \"frequency\": \"weekly\", \"issues\": \"mailto:contactme@abuse.ch\", \"url\": \"https://urlhaus.abuse.ch/downloads/hostfile/\", \"license\": \"CC0\"}, {\"name\": \"yoyo.org\", \"description\": \"Blocking with ad server and tracking server hostnames.\", \"homeurl\": \"https://pgl.yoyo.org/adservers/\", \"frequency\": \"frequently\", \"issues\": \"mailto:pgl@yoyo.org\", \"url\": \"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext&useip=0.0.0.0\", \"pause\": true}, {\"name\": \"Fake News\", \"description\": \"An in-progress collection of fake news outlets.\", \"homeurl\": \"https://github.com/marktron/fakenews\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/marktron/fakenews/issues\", \"url\": \"https://raw.githubusercontent.com/marktron/fakenews/master/fakenews\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's social media blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/social-hosts\", \"license\": \"MIT\"}]}, \"gambling-porn\": {\"location\": \"alternates/gambling-porn/\", \"no_unified_hosts\": false, \"entries\": 200918, \"sourcesdata\": [{\"name\": \"Steven Black's ad-hoc list\", \"description\": \"Additional sketch domains as I come across them.\", \"homeurl\": \"https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/StevenBlack/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts\", \"license\": \"MIT\"}, {\"name\": \"AdAway\", \"description\": \"AdAway is an open source ad blocker for Android using the hosts file.\", \"homeurl\": \"https://adaway.org/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com/AdAway/adaway.github.io/issues\", \"url\": \"https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt\", \"license\": \"CC BY 3.0\", \"pause\": true}, {\"name\": \"add.2o7Net\", \"description\": \"2o7Net tracking sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Dead\", \"description\": \"Dead sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Dead/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Risk\", \"description\": \"Risk content sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Spam\", \"description\": \"Spam sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\", \"license\": \"MIT\"}, {\"name\": \"Mitchell Krog's - Badd Boyz Hosts\", \"description\": \"Sketchy domains and Bad Referrers from my Nginx and Apache Bad Bot and Spam Referrer Blockers\", \"homeurl\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts\", \"frequency\": \"weekly\", \"issues\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts/issues\", \"url\": \"https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts\", \"license\": \"MIT\"}, {\"name\": \"hostsVN\", \"description\": \"Hosts block ads of Vietnamese\", \"homeurl\": \"https://github.com/bigdargon/hostsVN\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/option/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"KADhosts\", \"description\": \"Fraud/adware/scam websites.\", \"homeurl\": \"https://kadantiscam.netlify.app/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com//FiltersHeroes/KADhosts/issues\", \"url\": \"https://raw.githubusercontent.com/FiltersHeroes/KADhosts/master/KADhosts.txt\", \"license\": \"CC BY-SA 4.0\"}, {\"name\": \"minecraft-hosts\", \"description\": \"Minecraft related tracker hosts\", \"homeurl\": \"https://github.com/jamiemansfield/minecraft-hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/jamiemansfield/minecraft-hosts/issues\", \"url\": \"https://raw.githubusercontent.com/jamiemansfield/minecraft-hosts/master/lists/tracking.txt\", \"license\": \"CC0-1.0\"}, {\"name\": \"MVPS hosts file\", \"description\": \"The purpose of this site is to provide the user with a high quality custom HOSTS file.\", \"homeurl\": \"https://winhelp2002.mvps.org/\", \"frequency\": \"monthly\", \"issues\": \"mailto:winhelp2002@gmail.com\", \"url\": \"https://winhelp2002.mvps.org/hosts.txt\", \"license\": \"CC BY-NC-SA 4.0\", \"pause\": true}, {\"name\": \"Dan Pollock \\u2013 [someonewhocares](https://someonewhocares.org/)\", \"description\": \"How to make the internet not suck (as much).\", \"homeurl\": \"https://someonewhocares.org/hosts/\", \"frequency\": \"frequently\", \"issues\": \"mailto:hosts@someonewhocares.org\", \"url\": \"https://someonewhocares.org/hosts/zero/hosts\", \"license\": \"non-commercial with attribution\"}, {\"name\": \"Tiuxo hostlist - ads\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/ads\", \"license\": \"CC BY 4.0\"}, {\"name\": \"UncheckyAds\", \"description\": \"Windows installers ads sources sites based on https://unchecky.com/ content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\", \"license\": \"MIT\"}, {\"name\": \"URLHaus\", \"description\": \"A project from [abuse.ch](https://abuse.ch/) with the goal of sharing malicious URLs.\", \"homeurl\": \"https://urlhaus.abuse.ch/\", \"frequency\": \"weekly\", \"issues\": \"mailto:contactme@abuse.ch\", \"url\": \"https://urlhaus.abuse.ch/downloads/hostfile/\", \"license\": \"CC0\"}, {\"name\": \"yoyo.org\", \"description\": \"Blocking with ad server and tracking server hostnames.\", \"homeurl\": \"https://pgl.yoyo.org/adservers/\", \"frequency\": \"frequently\", \"issues\": \"mailto:pgl@yoyo.org\", \"url\": \"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext&useip=0.0.0.0\", \"pause\": true}, {\"name\": \"BigDargon's gambling domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/gambling/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's gambling blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/gambling-hosts\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's adult domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/adult/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"brijrajparmar27 - pornography\", \"description\": \"hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/brijrajparmar27/host-sources\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/brijrajparmar27/host-sources/issues\", \"url\": \"https://raw.githubusercontent.com/brijrajparmar27/host-sources/master/Porn/hosts\", \"license\": \"CC BY 4.0\"}, {\"name\": \"pornhosts -- a consolidated anti porn hosts file\", \"description\": \"This is an endeavour to find all porn domains and compile them into a single hosts to allow for easy blocking of porn on your local machine or on a network.\", \"homeurl\": \"https://github.com/Clefspeare13/pornhosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Clefspeare13/pornhosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/extensions/porn/clefspeare13/hosts\", \"url.old\": \"https://raw.githubusercontent.com/Clefspeare13/pornhosts/master/download_here/0.0.0.0/hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's porn blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/pornography-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's snuff-site blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/snuff-hosts\", \"license\": \"MIT\"}, {\"name\": \"Tiuxo hostlist - pornography\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/porn\", \"license\": \"CC BY 4.0\"}]}, \"fakenews\": {\"location\": \"alternates/fakenews/\", \"no_unified_hosts\": false, \"entries\": 118348, \"sourcesdata\": [{\"name\": \"Steven Black's ad-hoc list\", \"description\": \"Additional sketch domains as I come across them.\", \"homeurl\": \"https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/StevenBlack/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts\", \"license\": \"MIT\"}, {\"name\": \"AdAway\", \"description\": \"AdAway is an open source ad blocker for Android using the hosts file.\", \"homeurl\": \"https://adaway.org/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com/AdAway/adaway.github.io/issues\", \"url\": \"https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt\", \"license\": \"CC BY 3.0\", \"pause\": true}, {\"name\": \"add.2o7Net\", \"description\": \"2o7Net tracking sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Dead\", \"description\": \"Dead sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Dead/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Risk\", \"description\": \"Risk content sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Spam\", \"description\": \"Spam sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\", \"license\": \"MIT\"}, {\"name\": \"Mitchell Krog's - Badd Boyz Hosts\", \"description\": \"Sketchy domains and Bad Referrers from my Nginx and Apache Bad Bot and Spam Referrer Blockers\", \"homeurl\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts\", \"frequency\": \"weekly\", \"issues\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts/issues\", \"url\": \"https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts\", \"license\": \"MIT\"}, {\"name\": \"hostsVN\", \"description\": \"Hosts block ads of Vietnamese\", \"homeurl\": \"https://github.com/bigdargon/hostsVN\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/option/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"KADhosts\", \"description\": \"Fraud/adware/scam websites.\", \"homeurl\": \"https://kadantiscam.netlify.app/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com//FiltersHeroes/KADhosts/issues\", \"url\": \"https://raw.githubusercontent.com/FiltersHeroes/KADhosts/master/KADhosts.txt\", \"license\": \"CC BY-SA 4.0\"}, {\"name\": \"minecraft-hosts\", \"description\": \"Minecraft related tracker hosts\", \"homeurl\": \"https://github.com/jamiemansfield/minecraft-hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/jamiemansfield/minecraft-hosts/issues\", \"url\": \"https://raw.githubusercontent.com/jamiemansfield/minecraft-hosts/master/lists/tracking.txt\", \"license\": \"CC0-1.0\"}, {\"name\": \"MVPS hosts file\", \"description\": \"The purpose of this site is to provide the user with a high quality custom HOSTS file.\", \"homeurl\": \"https://winhelp2002.mvps.org/\", \"frequency\": \"monthly\", \"issues\": \"mailto:winhelp2002@gmail.com\", \"url\": \"https://winhelp2002.mvps.org/hosts.txt\", \"license\": \"CC BY-NC-SA 4.0\", \"pause\": true}, {\"name\": \"Dan Pollock \\u2013 [someonewhocares](https://someonewhocares.org/)\", \"description\": \"How to make the internet not suck (as much).\", \"homeurl\": \"https://someonewhocares.org/hosts/\", \"frequency\": \"frequently\", \"issues\": \"mailto:hosts@someonewhocares.org\", \"url\": \"https://someonewhocares.org/hosts/zero/hosts\", \"license\": \"non-commercial with attribution\"}, {\"name\": \"Tiuxo hostlist - ads\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/ads\", \"license\": \"CC BY 4.0\"}, {\"name\": \"UncheckyAds\", \"description\": \"Windows installers ads sources sites based on https://unchecky.com/ content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\", \"license\": \"MIT\"}, {\"name\": \"URLHaus\", \"description\": \"A project from [abuse.ch](https://abuse.ch/) with the goal of sharing malicious URLs.\", \"homeurl\": \"https://urlhaus.abuse.ch/\", \"frequency\": \"weekly\", \"issues\": \"mailto:contactme@abuse.ch\", \"url\": \"https://urlhaus.abuse.ch/downloads/hostfile/\", \"license\": \"CC0\"}, {\"name\": \"yoyo.org\", \"description\": \"Blocking with ad server and tracking server hostnames.\", \"homeurl\": \"https://pgl.yoyo.org/adservers/\", \"frequency\": \"frequently\", \"issues\": \"mailto:pgl@yoyo.org\", \"url\": \"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext&useip=0.0.0.0\", \"pause\": true}, {\"name\": \"Fake News\", \"description\": \"An in-progress collection of fake news outlets.\", \"homeurl\": \"https://github.com/marktron/fakenews\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/marktron/fakenews/issues\", \"url\": \"https://raw.githubusercontent.com/marktron/fakenews/master/fakenews\", \"license\": \"MIT\"}]}, \"fakenews-gambling-social\": {\"location\": \"alternates/fakenews-gambling-social/\", \"no_unified_hosts\": false, \"entries\": 130225, \"sourcesdata\": [{\"name\": \"Steven Black's ad-hoc list\", \"description\": \"Additional sketch domains as I come across them.\", \"homeurl\": \"https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/StevenBlack/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts\", \"license\": \"MIT\"}, {\"name\": \"AdAway\", \"description\": \"AdAway is an open source ad blocker for Android using the hosts file.\", \"homeurl\": \"https://adaway.org/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com/AdAway/adaway.github.io/issues\", \"url\": \"https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt\", \"license\": \"CC BY 3.0\", \"pause\": true}, {\"name\": \"add.2o7Net\", \"description\": \"2o7Net tracking sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Dead\", \"description\": \"Dead sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Dead/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Risk\", \"description\": \"Risk content sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Spam\", \"description\": \"Spam sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\", \"license\": \"MIT\"}, {\"name\": \"Mitchell Krog's - Badd Boyz Hosts\", \"description\": \"Sketchy domains and Bad Referrers from my Nginx and Apache Bad Bot and Spam Referrer Blockers\", \"homeurl\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts\", \"frequency\": \"weekly\", \"issues\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts/issues\", \"url\": \"https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts\", \"license\": \"MIT\"}, {\"name\": \"hostsVN\", \"description\": \"Hosts block ads of Vietnamese\", \"homeurl\": \"https://github.com/bigdargon/hostsVN\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/option/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"KADhosts\", \"description\": \"Fraud/adware/scam websites.\", \"homeurl\": \"https://kadantiscam.netlify.app/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com//FiltersHeroes/KADhosts/issues\", \"url\": \"https://raw.githubusercontent.com/FiltersHeroes/KADhosts/master/KADhosts.txt\", \"license\": \"CC BY-SA 4.0\"}, {\"name\": \"minecraft-hosts\", \"description\": \"Minecraft related tracker hosts\", \"homeurl\": \"https://github.com/jamiemansfield/minecraft-hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/jamiemansfield/minecraft-hosts/issues\", \"url\": \"https://raw.githubusercontent.com/jamiemansfield/minecraft-hosts/master/lists/tracking.txt\", \"license\": \"CC0-1.0\"}, {\"name\": \"MVPS hosts file\", \"description\": \"The purpose of this site is to provide the user with a high quality custom HOSTS file.\", \"homeurl\": \"https://winhelp2002.mvps.org/\", \"frequency\": \"monthly\", \"issues\": \"mailto:winhelp2002@gmail.com\", \"url\": \"https://winhelp2002.mvps.org/hosts.txt\", \"license\": \"CC BY-NC-SA 4.0\", \"pause\": true}, {\"name\": \"Dan Pollock \\u2013 [someonewhocares](https://someonewhocares.org/)\", \"description\": \"How to make the internet not suck (as much).\", \"homeurl\": \"https://someonewhocares.org/hosts/\", \"frequency\": \"frequently\", \"issues\": \"mailto:hosts@someonewhocares.org\", \"url\": \"https://someonewhocares.org/hosts/zero/hosts\", \"license\": \"non-commercial with attribution\"}, {\"name\": \"Tiuxo hostlist - ads\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/ads\", \"license\": \"CC BY 4.0\"}, {\"name\": \"UncheckyAds\", \"description\": \"Windows installers ads sources sites based on https://unchecky.com/ content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\", \"license\": \"MIT\"}, {\"name\": \"URLHaus\", \"description\": \"A project from [abuse.ch](https://abuse.ch/) with the goal of sharing malicious URLs.\", \"homeurl\": \"https://urlhaus.abuse.ch/\", \"frequency\": \"weekly\", \"issues\": \"mailto:contactme@abuse.ch\", \"url\": \"https://urlhaus.abuse.ch/downloads/hostfile/\", \"license\": \"CC0\"}, {\"name\": \"yoyo.org\", \"description\": \"Blocking with ad server and tracking server hostnames.\", \"homeurl\": \"https://pgl.yoyo.org/adservers/\", \"frequency\": \"frequently\", \"issues\": \"mailto:pgl@yoyo.org\", \"url\": \"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext&useip=0.0.0.0\", \"pause\": true}, {\"name\": \"Fake News\", \"description\": \"An in-progress collection of fake news outlets.\", \"homeurl\": \"https://github.com/marktron/fakenews\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/marktron/fakenews/issues\", \"url\": \"https://raw.githubusercontent.com/marktron/fakenews/master/fakenews\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's gambling domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/gambling/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's gambling blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/gambling-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's social media blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/social-hosts\", \"license\": \"MIT\"}]}, \"base\": {\"location\": \"\", \"no_unified_hosts\": false, \"entries\": 116154, \"sourcesdata\": [{\"name\": \"Steven Black's ad-hoc list\", \"description\": \"Additional sketch domains as I come across them.\", \"homeurl\": \"https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/StevenBlack/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/data/StevenBlack/hosts\", \"license\": \"MIT\"}, {\"name\": \"AdAway\", \"description\": \"AdAway is an open source ad blocker for Android using the hosts file.\", \"homeurl\": \"https://adaway.org/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com/AdAway/adaway.github.io/issues\", \"url\": \"https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt\", \"license\": \"CC BY 3.0\", \"pause\": true}, {\"name\": \"add.2o7Net\", \"description\": \"2o7Net tracking sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Dead\", \"description\": \"Dead sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Dead/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Risk\", \"description\": \"Risk content sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts\", \"license\": \"MIT\"}, {\"name\": \"add.Spam\", \"description\": \"Spam sites based on [hostsfile.org](https://www.hostsfile.org/hosts.html) content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts\", \"license\": \"MIT\"}, {\"name\": \"Mitchell Krog's - Badd Boyz Hosts\", \"description\": \"Sketchy domains and Bad Referrers from my Nginx and Apache Bad Bot and Spam Referrer Blockers\", \"homeurl\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts\", \"frequency\": \"weekly\", \"issues\": \"https://github.com/mitchellkrogza/Badd-Boyz-Hosts/issues\", \"url\": \"https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts\", \"license\": \"MIT\"}, {\"name\": \"hostsVN\", \"description\": \"Hosts block ads of Vietnamese\", \"homeurl\": \"https://github.com/bigdargon/hostsVN\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/option/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"KADhosts\", \"description\": \"Fraud/adware/scam websites.\", \"homeurl\": \"https://kadantiscam.netlify.app/\", \"frequency\": \"frequently\", \"issues\": \"https://github.com//FiltersHeroes/KADhosts/issues\", \"url\": \"https://raw.githubusercontent.com/FiltersHeroes/KADhosts/master/KADhosts.txt\", \"license\": \"CC BY-SA 4.0\"}, {\"name\": \"minecraft-hosts\", \"description\": \"Minecraft related tracker hosts\", \"homeurl\": \"https://github.com/jamiemansfield/minecraft-hosts\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/jamiemansfield/minecraft-hosts/issues\", \"url\": \"https://raw.githubusercontent.com/jamiemansfield/minecraft-hosts/master/lists/tracking.txt\", \"license\": \"CC0-1.0\"}, {\"name\": \"MVPS hosts file\", \"description\": \"The purpose of this site is to provide the user with a high quality custom HOSTS file.\", \"homeurl\": \"https://winhelp2002.mvps.org/\", \"frequency\": \"monthly\", \"issues\": \"mailto:winhelp2002@gmail.com\", \"url\": \"https://winhelp2002.mvps.org/hosts.txt\", \"license\": \"CC BY-NC-SA 4.0\", \"pause\": true}, {\"name\": \"Dan Pollock \\u2013 [someonewhocares](https://someonewhocares.org/)\", \"description\": \"How to make the internet not suck (as much).\", \"homeurl\": \"https://someonewhocares.org/hosts/\", \"frequency\": \"frequently\", \"issues\": \"mailto:hosts@someonewhocares.org\", \"url\": \"https://someonewhocares.org/hosts/zero/hosts\", \"license\": \"non-commercial with attribution\"}, {\"name\": \"Tiuxo hostlist - ads\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/ads\", \"license\": \"CC BY 4.0\"}, {\"name\": \"UncheckyAds\", \"description\": \"Windows installers ads sources sites based on https://unchecky.com/ content.\", \"homeurl\": \"https://github.com/FadeMind/hosts.extras\", \"frequency\": \"occasionally\", \"issues\": \"https://github.com/FadeMind/hosts.extras/issues\", \"url\": \"https://raw.githubusercontent.com/FadeMind/hosts.extras/master/UncheckyAds/hosts\", \"license\": \"MIT\"}, {\"name\": \"URLHaus\", \"description\": \"A project from [abuse.ch](https://abuse.ch/) with the goal of sharing malicious URLs.\", \"homeurl\": \"https://urlhaus.abuse.ch/\", \"frequency\": \"weekly\", \"issues\": \"mailto:contactme@abuse.ch\", \"url\": \"https://urlhaus.abuse.ch/downloads/hostfile/\", \"license\": \"CC0\"}, {\"name\": \"yoyo.org\", \"description\": \"Blocking with ad server and tracking server hostnames.\", \"homeurl\": \"https://pgl.yoyo.org/adservers/\", \"frequency\": \"frequently\", \"issues\": \"mailto:pgl@yoyo.org\", \"url\": \"https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&mimetype=plaintext&useip=0.0.0.0\", \"pause\": true}]}, \"fakenews-only\": {\"location\": \"alternates/fakenews-only/\", \"no_unified_hosts\": true, \"entries\": 2194, \"sourcesdata\": [{\"name\": \"Fake News\", \"description\": \"An in-progress collection of fake news outlets.\", \"homeurl\": \"https://github.com/marktron/fakenews\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/marktron/fakenews/issues\", \"url\": \"https://raw.githubusercontent.com/marktron/fakenews/master/fakenews\", \"license\": \"MIT\"}]}, \"fakenews-gambling-only\": {\"location\": \"alternates/fakenews-gambling-only/\", \"no_unified_hosts\": true, \"entries\": 10895, \"sourcesdata\": [{\"name\": \"Fake News\", \"description\": \"An in-progress collection of fake news outlets.\", \"homeurl\": \"https://github.com/marktron/fakenews\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/marktron/fakenews/issues\", \"url\": \"https://raw.githubusercontent.com/marktron/fakenews/master/fakenews\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's gambling domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/gambling/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's gambling blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/gambling-hosts\", \"license\": \"MIT\"}]}, \"fakenews-gambling-porn-only\": {\"location\": \"alternates/fakenews-gambling-porn-only/\", \"no_unified_hosts\": true, \"entries\": 87665, \"sourcesdata\": [{\"name\": \"Fake News\", \"description\": \"An in-progress collection of fake news outlets.\", \"homeurl\": \"https://github.com/marktron/fakenews\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/marktron/fakenews/issues\", \"url\": \"https://raw.githubusercontent.com/marktron/fakenews/master/fakenews\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's gambling domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/gambling/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's gambling blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/gambling-hosts\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's adult domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/adult/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"brijrajparmar27 - pornography\", \"description\": \"hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/brijrajparmar27/host-sources\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/brijrajparmar27/host-sources/issues\", \"url\": \"https://raw.githubusercontent.com/brijrajparmar27/host-sources/master/Porn/hosts\", \"license\": \"CC BY 4.0\"}, {\"name\": \"pornhosts -- a consolidated anti porn hosts file\", \"description\": \"This is an endeavour to find all porn domains and compile them into a single hosts to allow for easy blocking of porn on your local machine or on a network.\", \"homeurl\": \"https://github.com/Clefspeare13/pornhosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Clefspeare13/pornhosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/extensions/porn/clefspeare13/hosts\", \"url.old\": \"https://raw.githubusercontent.com/Clefspeare13/pornhosts/master/download_here/0.0.0.0/hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's porn blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/pornography-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's snuff-site blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/snuff-hosts\", \"license\": \"MIT\"}, {\"name\": \"Tiuxo hostlist - pornography\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/porn\", \"license\": \"CC BY 4.0\"}]}, \"fakenews-gambling-porn-social-only\": {\"location\": \"alternates/fakenews-gambling-porn-social-only/\", \"no_unified_hosts\": true, \"entries\": 90881, \"sourcesdata\": [{\"name\": \"Fake News\", \"description\": \"An in-progress collection of fake news outlets.\", \"homeurl\": \"https://github.com/marktron/fakenews\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/marktron/fakenews/issues\", \"url\": \"https://raw.githubusercontent.com/marktron/fakenews/master/fakenews\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's gambling domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/gambling/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's gambling blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/gambling-hosts\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's adult domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/adult/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"brijrajparmar27 - pornography\", \"description\": \"hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/brijrajparmar27/host-sources\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/brijrajparmar27/host-sources/issues\", \"url\": \"https://raw.githubusercontent.com/brijrajparmar27/host-sources/master/Porn/hosts\", \"license\": \"CC BY 4.0\"}, {\"name\": \"pornhosts -- a consolidated anti porn hosts file\", \"description\": \"This is an endeavour to find all porn domains and compile them into a single hosts to allow for easy blocking of porn on your local machine or on a network.\", \"homeurl\": \"https://github.com/Clefspeare13/pornhosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Clefspeare13/pornhosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/extensions/porn/clefspeare13/hosts\", \"url.old\": \"https://raw.githubusercontent.com/Clefspeare13/pornhosts/master/download_here/0.0.0.0/hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's porn blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/pornography-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's snuff-site blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/snuff-hosts\", \"license\": \"MIT\"}, {\"name\": \"Tiuxo hostlist - pornography\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/porn\", \"license\": \"CC BY 4.0\"}, {\"name\": \"Sinfonietta's social media blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/social-hosts\", \"license\": \"MIT\"}]}, \"fakenews-gambling-social-only\": {\"location\": \"alternates/fakenews-gambling-social-only/\", \"no_unified_hosts\": true, \"entries\": 14112, \"sourcesdata\": [{\"name\": \"Fake News\", \"description\": \"An in-progress collection of fake news outlets.\", \"homeurl\": \"https://github.com/marktron/fakenews\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/marktron/fakenews/issues\", \"url\": \"https://raw.githubusercontent.com/marktron/fakenews/master/fakenews\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's gambling domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/gambling/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's gambling blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/gambling-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's social media blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/social-hosts\", \"license\": \"MIT\"}]}, \"fakenews-porn-only\": {\"location\": \"alternates/fakenews-porn-only/\", \"no_unified_hosts\": true, \"entries\": 78964, \"sourcesdata\": [{\"name\": \"Fake News\", \"description\": \"An in-progress collection of fake news outlets.\", \"homeurl\": \"https://github.com/marktron/fakenews\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/marktron/fakenews/issues\", \"url\": \"https://raw.githubusercontent.com/marktron/fakenews/master/fakenews\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's adult domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/adult/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"brijrajparmar27 - pornography\", \"description\": \"hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/brijrajparmar27/host-sources\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/brijrajparmar27/host-sources/issues\", \"url\": \"https://raw.githubusercontent.com/brijrajparmar27/host-sources/master/Porn/hosts\", \"license\": \"CC BY 4.0\"}, {\"name\": \"pornhosts -- a consolidated anti porn hosts file\", \"description\": \"This is an endeavour to find all porn domains and compile them into a single hosts to allow for easy blocking of porn on your local machine or on a network.\", \"homeurl\": \"https://github.com/Clefspeare13/pornhosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Clefspeare13/pornhosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/extensions/porn/clefspeare13/hosts\", \"url.old\": \"https://raw.githubusercontent.com/Clefspeare13/pornhosts/master/download_here/0.0.0.0/hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's porn blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/pornography-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's snuff-site blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/snuff-hosts\", \"license\": \"MIT\"}, {\"name\": \"Tiuxo hostlist - pornography\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/porn\", \"license\": \"CC BY 4.0\"}]}, \"fakenews-porn-social-only\": {\"location\": \"alternates/fakenews-porn-social-only/\", \"no_unified_hosts\": true, \"entries\": 82180, \"sourcesdata\": [{\"name\": \"Fake News\", \"description\": \"An in-progress collection of fake news outlets.\", \"homeurl\": \"https://github.com/marktron/fakenews\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/marktron/fakenews/issues\", \"url\": \"https://raw.githubusercontent.com/marktron/fakenews/master/fakenews\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's adult domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/adult/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"brijrajparmar27 - pornography\", \"description\": \"hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/brijrajparmar27/host-sources\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/brijrajparmar27/host-sources/issues\", \"url\": \"https://raw.githubusercontent.com/brijrajparmar27/host-sources/master/Porn/hosts\", \"license\": \"CC BY 4.0\"}, {\"name\": \"pornhosts -- a consolidated anti porn hosts file\", \"description\": \"This is an endeavour to find all porn domains and compile them into a single hosts to allow for easy blocking of porn on your local machine or on a network.\", \"homeurl\": \"https://github.com/Clefspeare13/pornhosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Clefspeare13/pornhosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/extensions/porn/clefspeare13/hosts\", \"url.old\": \"https://raw.githubusercontent.com/Clefspeare13/pornhosts/master/download_here/0.0.0.0/hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's porn blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/pornography-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's snuff-site blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/snuff-hosts\", \"license\": \"MIT\"}, {\"name\": \"Tiuxo hostlist - pornography\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/porn\", \"license\": \"CC BY 4.0\"}, {\"name\": \"Sinfonietta's social media blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/social-hosts\", \"license\": \"MIT\"}]}, \"fakenews-social-only\": {\"location\": \"alternates/fakenews-social-only/\", \"no_unified_hosts\": true, \"entries\": 5411, \"sourcesdata\": [{\"name\": \"Fake News\", \"description\": \"An in-progress collection of fake news outlets.\", \"homeurl\": \"https://github.com/marktron/fakenews\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/marktron/fakenews/issues\", \"url\": \"https://raw.githubusercontent.com/marktron/fakenews/master/fakenews\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's social media blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/social-hosts\", \"license\": \"MIT\"}]}, \"gambling-only\": {\"location\": \"alternates/gambling-only/\", \"no_unified_hosts\": true, \"entries\": 8701, \"sourcesdata\": [{\"name\": \"BigDargon's gambling domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/gambling/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's gambling blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/gambling-hosts\", \"license\": \"MIT\"}]}, \"gambling-porn-only\": {\"location\": \"alternates/gambling-porn-only/\", \"no_unified_hosts\": true, \"entries\": 85471, \"sourcesdata\": [{\"name\": \"BigDargon's gambling domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/gambling/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's gambling blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/gambling-hosts\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's adult domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/adult/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"brijrajparmar27 - pornography\", \"description\": \"hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/brijrajparmar27/host-sources\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/brijrajparmar27/host-sources/issues\", \"url\": \"https://raw.githubusercontent.com/brijrajparmar27/host-sources/master/Porn/hosts\", \"license\": \"CC BY 4.0\"}, {\"name\": \"pornhosts -- a consolidated anti porn hosts file\", \"description\": \"This is an endeavour to find all porn domains and compile them into a single hosts to allow for easy blocking of porn on your local machine or on a network.\", \"homeurl\": \"https://github.com/Clefspeare13/pornhosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Clefspeare13/pornhosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/extensions/porn/clefspeare13/hosts\", \"url.old\": \"https://raw.githubusercontent.com/Clefspeare13/pornhosts/master/download_here/0.0.0.0/hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's porn blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/pornography-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's snuff-site blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/snuff-hosts\", \"license\": \"MIT\"}, {\"name\": \"Tiuxo hostlist - pornography\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/porn\", \"license\": \"CC BY 4.0\"}]}, \"gambling-porn-social-only\": {\"location\": \"alternates/gambling-porn-social-only/\", \"no_unified_hosts\": true, \"entries\": 88687, \"sourcesdata\": [{\"name\": \"BigDargon's gambling domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/gambling/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's gambling blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/gambling-hosts\", \"license\": \"MIT\"}, {\"name\": \"BigDargon's adult domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/adult/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"brijrajparmar27 - pornography\", \"description\": \"hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/brijrajparmar27/host-sources\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/brijrajparmar27/host-sources/issues\", \"url\": \"https://raw.githubusercontent.com/brijrajparmar27/host-sources/master/Porn/hosts\", \"license\": \"CC BY 4.0\"}, {\"name\": \"pornhosts -- a consolidated anti porn hosts file\", \"description\": \"This is an endeavour to find all porn domains and compile them into a single hosts to allow for easy blocking of porn on your local machine or on a network.\", \"homeurl\": \"https://github.com/Clefspeare13/pornhosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Clefspeare13/pornhosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/extensions/porn/clefspeare13/hosts\", \"url.old\": \"https://raw.githubusercontent.com/Clefspeare13/pornhosts/master/download_here/0.0.0.0/hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's porn blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/pornography-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's snuff-site blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/snuff-hosts\", \"license\": \"MIT\"}, {\"name\": \"Tiuxo hostlist - pornography\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/porn\", \"license\": \"CC BY 4.0\"}, {\"name\": \"Sinfonietta's social media blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/social-hosts\", \"license\": \"MIT\"}]}, \"gambling-social-only\": {\"location\": \"alternates/gambling-social-only/\", \"no_unified_hosts\": true, \"entries\": 11918, \"sourcesdata\": [{\"name\": \"BigDargon's gambling domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/gambling/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's gambling blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/gambling-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's social media blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/social-hosts\", \"license\": \"MIT\"}]}, \"porn-only\": {\"location\": \"alternates/porn-only/\", \"no_unified_hosts\": true, \"entries\": 76770, \"sourcesdata\": [{\"name\": \"BigDargon's adult domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/adult/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"brijrajparmar27 - pornography\", \"description\": \"hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/brijrajparmar27/host-sources\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/brijrajparmar27/host-sources/issues\", \"url\": \"https://raw.githubusercontent.com/brijrajparmar27/host-sources/master/Porn/hosts\", \"license\": \"CC BY 4.0\"}, {\"name\": \"pornhosts -- a consolidated anti porn hosts file\", \"description\": \"This is an endeavour to find all porn domains and compile them into a single hosts to allow for easy blocking of porn on your local machine or on a network.\", \"homeurl\": \"https://github.com/Clefspeare13/pornhosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Clefspeare13/pornhosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/extensions/porn/clefspeare13/hosts\", \"url.old\": \"https://raw.githubusercontent.com/Clefspeare13/pornhosts/master/download_here/0.0.0.0/hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's porn blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/pornography-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's snuff-site blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/snuff-hosts\", \"license\": \"MIT\"}, {\"name\": \"Tiuxo hostlist - pornography\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/porn\", \"license\": \"CC BY 4.0\"}]}, \"porn-social-only\": {\"location\": \"alternates/porn-social-only/\", \"no_unified_hosts\": true, \"entries\": 79986, \"sourcesdata\": [{\"name\": \"BigDargon's adult domain blocking hosts file\", \"description\": \"Extension from the project hostsVN\", \"homeurl\": \"https://github.com/bigdargon/hostsVN/\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/bigdargon/hostsVN/issues\", \"url\": \"https://raw.githubusercontent.com/bigdargon/hostsVN/master/extensions/adult/hosts-VN\", \"license\": \"MIT\"}, {\"name\": \"brijrajparmar27 - pornography\", \"description\": \"hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/brijrajparmar27/host-sources\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/brijrajparmar27/host-sources/issues\", \"url\": \"https://raw.githubusercontent.com/brijrajparmar27/host-sources/master/Porn/hosts\", \"license\": \"CC BY 4.0\"}, {\"name\": \"pornhosts -- a consolidated anti porn hosts file\", \"description\": \"This is an endeavour to find all porn domains and compile them into a single hosts to allow for easy blocking of porn on your local machine or on a network.\", \"homeurl\": \"https://github.com/Clefspeare13/pornhosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Clefspeare13/pornhosts/issues\", \"url\": \"https://raw.githubusercontent.com/StevenBlack/hosts/master/extensions/porn/clefspeare13/hosts\", \"url.old\": \"https://raw.githubusercontent.com/Clefspeare13/pornhosts/master/download_here/0.0.0.0/hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's porn blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/pornography-hosts\", \"license\": \"MIT\"}, {\"name\": \"Sinfonietta's snuff-site blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/snuff-hosts\", \"license\": \"MIT\"}, {\"name\": \"Tiuxo hostlist - pornography\", \"description\": \"Categorized hosts files for DNS based content blocking\", \"homeurl\": \"https://github.com/tiuxo/hosts\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/tiuxo/hosts/issues\", \"url\": \"https://raw.githubusercontent.com/tiuxo/hosts/master/porn\", \"license\": \"CC BY 4.0\"}, {\"name\": \"Sinfonietta's social media blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/social-hosts\", \"license\": \"MIT\"}]}, \"social-only\": {\"location\": \"alternates/social-only/\", \"no_unified_hosts\": true, \"entries\": 3217, \"sourcesdata\": [{\"name\": \"Sinfonietta's social media blocking hosts file\", \"description\": \"A collection of category-specific host files.\", \"homeurl\": \"https://github.com/Sinfonietta/hostfiles\", \"frequency\": \"occasional\", \"issues\": \"https://github.com/Sinfonietta/hostfiles/issues\", \"url\": \"https://raw.githubusercontent.com/Sinfonietta/hostfiles/master/social-hosts\", \"license\": \"MIT\"}]}}"
        },
        {
          "name": "readme_template.md",
          "type": "blob",
          "size": 27.26,
          "content": "**Take Note!**\n\nWith the exception of issues and PRs regarding changes to\n`hosts/data/StevenBlack/hosts`, all other issues regarding the content of the\nproduced hosts files should be made with the appropriate data source that\ncontributed the content in question. The contact information for all of the data\nsources can be found in the `hosts/data/` directory.\n\n---\n\n![Logo](https://raw.githubusercontent.com/StevenBlack/hosts/master/.github/logo.png)\n\n[![latest release](https://img.shields.io/github/release/StevenBlack/hosts)](https://github.com/StevenBlack/hosts/releases)\n[![license](https://img.shields.io/github/license/StevenBlack/hosts)](https://github.com/StevenBlack/hosts/blob/master/license.txt)\n[![repo size](https://img.shields.io/github/repo-size/StevenBlack/hosts)](https://github.com/StevenBlack/hosts)\n[![contributors](https://img.shields.io/github/contributors/StevenBlack/hosts)](https://github.com/StevenBlack/hosts/graphs/contributors)\n[![Build Status](https://img.shields.io/github/actions/workflow/status/StevenBlack/hosts/ci.yml?branch=master)](https://github.com/StevenBlack/hosts/actions/workflows/ci.yml?query=branch%3Amaster)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000)](https://github.com/python/black)\n[![commits since last release](https://img.shields.io/github/commits-since/StevenBlack/hosts/latest)](https://github.com/StevenBlack/hosts/commits/master)\n[![last commit](https://img.shields.io/github/last-commit/StevenBlack/hosts)](https://github.com/StevenBlack/hosts/commits/master)\n[![commit activity](https://img.shields.io/github/commit-activity/y/StevenBlack/hosts)](https://github.com/StevenBlack/hosts/commits/master)\n\n# @EXTENSIONS_HEADER@\n\nThis repository consolidates several reputable `hosts` files, and merges them\ninto a unified hosts file with duplicates removed. A variety of tailored hosts\nfiles are provided.\n\n**Therefore this repository is a hosts file aggregator.**\n\n![Aggregator](https://raw.githubusercontent.com/StevenBlack/hosts/master/aggregator.png)\n\n- Last updated: **@GEN_DATE@**.\n- Here's the\n  [raw hosts file @EXTENSIONS_HEADER@](https://raw.githubusercontent.com/StevenBlack/hosts/master/@SUBFOLDER@hosts)\n  containing @NUM_ENTRIES@ entries.\n\n@SIZEHISTORY@\n\n## List of all hosts file variants\n\nThis repository offers\n[31 different host file variants](https://github.com/StevenBlack/hosts/tree/master/alternates),\nin addition to the base variant, with and without the unified hosts included.\n\nThe **Non GitHub mirror** is the link to use for some hosts file managers like\n[Hostsman for Windows](https://www.abelhadigital.com/hostsman/) that don't work\nwith GitHub download links.\n\n| Host file recipe | Readme | Raw hosts | Unique domains | Non GitHub mirror |\n| ---------------- | :----: | :-------: | :------------: | :---------------: |\n@TOCROWS@\n\n**Expectation**: These unified hosts files should serve all devices, regardless\nof OS.\n\n## Sources of hosts data unified in this variant\n\nUpdated `hosts` files from the following locations are always unified and\nincluded:\n\n| Host file source | Home page | Raw hosts | License | Issues | Description |\n| ---------------- | :-------: | :-------: | :-----: | :----: | ----------- |\n@SOURCEROWS@\n\n## Extensions\n\nThe unified hosts file is optionally extensible. Extensions are used to include\ndomains by category. Currently, we offer the following categories: `fakenews`,\n`social`, `gambling`, and `porn`.\n\nExtensions are optional, and can be combined in various ways with the base hosts\nfile. The combined products are stored in the\n[`alternates`](https://github.com/StevenBlack/hosts/tree/master/alternates)\nfolder.\n\nData for extensions are stored in the\n[`extensions`](https://github.com/StevenBlack/hosts/tree/master/extensions)\nfolder. You manage extensions by curating this folder tree, where you will find\nthe data for `fakenews`, `social`, `gambling`, and `porn` extension data that we\nmaintain and provide for you.\n\n## Generate your own unified hosts file\n\nYou have three options to generate your own hosts file. You can use our\ncontainer image, build your own image, or do it in your own environment. Option\n#1 is easiest if you have Linux with Docker installed.\n\n### Option 1: Use our container image (Linux only)\n\n> This will replace your `/etc/hosts`.\n\nWe assume you have Docker available on your host. Just run the following\ncommand. Set extensions to your preference.\n\n```sh\ndocker run --pull always --rm -it -v /etc/hosts:/etc/hosts \\\nghcr.io/stevenblack/hosts:latest updateHostsFile.py --auto \\\n--replace --extensions gambling porn\n```\n\nIf you want to add custom hosts or a whitelist, create either or both files as\nper [the instructions](#how-do-i-control-which-sources-are-unified) and add the\nfollowing arguments _before_ `ghcr.io/stevenblack/hosts:latest` depending on\nwhich you wish to use.\n\n```sh\n-v \"path/to/myhosts:/hosts/myhosts\" \\\n-v \"path/to/whitelist:/hosts/whitelist\" \\\n```\n\nYou can rerun this exact command later to update based on the latest available\nhosts (for example, add it to a weekly cron job).\n\n### Option 2: Generate your own container image\n\nWe provide the\n[Dockerfile](https://github.com/StevenBlack/hosts/blob/master/Dockerfile) used\nby the previous step, which you can use to create a container image with\neverything you need. The container will contain Python 3 and all its dependency\nrequirements, and a copy of the latest version of this repository.\n\nBuild the Docker container from the root of this repo like this:\n\n```sh\ndocker build --no-cache . -t stevenblack-hosts\n```\n\nThen run your command as such:\n\n```sh\ndocker run --rm -it stevenblack-hosts updateHostsFile.py\n```\n\n> This will create the hosts file, and remove it with the container when done,\n> so not very useful. You can use the example in option #1 to add volumes so\n> files on your host are replaced.\n\n### Option 3: Generate it in your own environment\n\nTo generate your own amalgamated hosts files you will need Python 3.6 or later.\n\nFirst, install the dependencies with:\n\n```sh\npip3 install --user -r requirements.txt\n```\n\n**Note** we recommend the `--user` flag which installs the required dependencies\nat the user level. More information about it can be found on pip\n[documentation](https://pip.pypa.io/en/stable/reference/pip_install/?highlight=--user#cmdoption-user).\n\n### Option 4: Generate it in Google Colab\n\nSpin up a free remote [Google Colab](https://colab.research.google.com/drive/1tYWXpU2iuPDqN_o03JW9ml3ExO80eBLq?usp=sharing) environment.\n\n### Common steps regardless of your development environment\n\nTo **run unit tests**, in the top-level directory, run:\n\n```sh\npython3 testUpdateHostsFile.py\n```\n\nThe `updateHostsFile.py` script will generate a unified hosts file based on the\nsources in the local `data/` subfolder. The script will prompt you whether it\nshould fetch updated versions (from locations defined by the `update.json` text\nfile in each source's folder). Otherwise, it will use the `hosts` file that's\nalready there.\n\n```sh\npython3 updateHostsFile.py [--auto] [--replace] [--ip nnn.nnn.nnn.nnn] [--extensions ext1 ext2 ext3]\n```\n\n#### Command line options\n\n`--help`, or `-h`: display help.\n\n`--auto`, or `-a`: run the script without prompting. When `--auto` is invoked,\n\n- Hosts data sources, including extensions, are updated.\n- No extensions are included by default. Use the `--extensions` or `-e` flag to\n  include any you want.\n- Your active hosts file is _not_ replaced unless you include the `--replace`\n  flag.\n\n`--backup`, or `-b`: Make a backup of existing hosts file(s) as you generate\nover them.\n\n`--extensions <ext1> <ext2> <ext3>`, or `-e <ext1> <ext2> <ext3>`: the names of\nsubfolders below the `extensions` folder containing additional category-specific\nhosts files to include in the amalgamation. Example: `--extensions porn` or\n`-e social porn`.\n\n`--flush-dns-cache`, or `-f`: skip the prompt for flushing the DNS cache. Only\nactive when `--replace` is also active.\n\n`--ip nnn.nnn.nnn.nnn`, or `-i nnn.nnn.nnn.nnn`: the IP address to use as the\ntarget. Default is `0.0.0.0`.\n\n`--keepdomaincomments`, or `-k`: `true` (default) or `false`, keep the comments\nthat appear on the same line as domains. The default is `true`.\n\n`--noupdate`, or `-n`: skip fetching updates from hosts data sources.\n\n`--output <subfolder>`, or `-o <subfolder>`: place the generated source file in\na subfolder. If the subfolder does not exist, it will be created.\n\n`--replace`, or `-r`: trigger replacing your active hosts\n\n`--skipstatichosts`, or `-s`: `false` (default) or `true`, omit the standard\nsection at the top, containing lines like `127.0.0.1 localhost`. This is useful\nfor configuring proximate DNS services on the local network.\n\n`--nogendata`, or `-g`: `false` (default) or `true`, skip the generation of the\nreadmeData.json file used for generating readme.md files. This is useful if you\nare generating host files with additional whitelists or blacklists and want to\nkeep your local checkout of this repo unmodified.\n\n`--nounifiedhosts`: `false` (default) or `true`, do not include the unified hosts\nfile in the final hosts file. Usually used together with `--extensions`.\n\n`--compress`, or `-c`: `false` (default) or `true`, _Compress_ the hosts file\nignoring non-necessary lines (empty lines and comments) and putting multiple\ndomains in each line. Reducing the number of lines of the hosts file improves\nthe performances under Windows (with DNS Client service enabled).\n\n`--minimise`, or `-m`: `false` (default) or `true`, like `--compress`, but puts\neach domain on a separate line. This is necessary because many implementations\nof URL blockers that rely on `hosts` files do not conform to the standard which\nallows multiple hosts on a single line.\n\n`--blacklist <blacklistfile>`, or `-x <blacklistfile>`: Append the given\nblacklist file in hosts format to the generated hosts file.\n\n`--whitelist <whitelistfile>`, or `-w <whitelistfile>`: Use the given whitelist\nfile to remove hosts from the generated hosts file.\n\n## How do I control which sources are unified?\n\nAdd one or more _additional_ sources, each in a subfolder of the `data/` folder,\nand specify the `url` key in its `update.json` file.\n\nAdd one or more _optional_ extensions, which originate from subfolders of the\n`extensions/` folder. Again the url in `update.json` controls where this\nextension finds its updates.\n\nCreate an _optional_ `blacklist` file. The contents of this file (containing a\nlisting of additional domains in `hosts` file format) are appended to the\nunified hosts file during the update process. A sample `blacklist` is included,\nand may be modified as you need.\n\n- NOTE: The `blacklist` is not tracked by git, so any changes you make won't be\n  overridden when you `git pull` this repo from `origin` in the future.\n\n### How do I include my own custom domain mappings?\n\nIf you have custom hosts records, place them in file `myhosts`. The contents of\nthis file are prepended to the unified hosts file during the update process.\n\nThe `myhosts` file is not tracked by git, so any changes you make won't be\noverridden when you `git pull` this repo from `origin` in the future.\n\n### How do I prevent domains from being included?\n\nThe domains you list in the `whitelist` file are excluded from the final hosts\nfile.\n\nThe `whitelist` uses partial matching. Therefore if you whitelist\n`google-analytics.com`, that domain and all its subdomains won't be merged into\nthe final hosts file.\n\nThe `whitelist` is not tracked by git, so any changes you make won't be\noverridden when you `git pull` this repo from `origin` in the future.\n\n## How can I contribute hosts records?\n\nIf you discover sketchy domains you feel should be included here, here are some\nways to contribute them.\n\n### Option 1: contact one of our hosts sources\n\nThe best way to get new domains included is to submit an issue to any of the\ndata providers whose home pages are\n[listed here](https://github.com/StevenBlack/hosts#sources-of-hosts-data-unified-in-this-variant).\nThis is best because once you submit new domains, they will be curated and\nupdated by the dedicated folks who maintain these sources.\n\n### Option 2: Fork this repository, add your domains to Steven Black's personal data file, and submit a pull request\n\nFork this hosts this repo and add your links to\n[https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts](https://github.com/StevenBlack/hosts/blob/master/data/StevenBlack/hosts).\n\nThen, submit a pull request.\n\n**WARNING**: this is less desirable than Option 1 because the ongoing curation\nfalls on us. So this creates more work for us.\n\n### Option 3: create your own hosts list as a repo on GitHub\n\nIf you're able to curate your own collection of sketchy domains, then curate\nyour own hosts list. Then signal the existence of your repo as\n[a new issue](https://github.com/StevenBlack/hosts/issues) and we may include\nyour new repo into the collection of sources we pull whenever we create new\nversions.\n\n## What is a hosts file?\n\nA hosts file, named `hosts` (with no file extension), is a plain-text file used\nby all operating systems to map hostnames to IP addresses.\n\nIn most operating systems, the `hosts` file is preferential to `DNS`. Therefore\nif a domain name is resolved by the `hosts` file, the request never leaves your\ncomputer.\n\nHaving a smart `hosts` file goes a long way towards blocking malware, adware,\nand other irritants.\n\nFor example, to nullify requests to some doubleclick.net servers, adding these\nlines to your hosts file will do it:\n\n```text\n# block doubleClick's servers\n0.0.0.0 ad.ae.doubleclick.net\n0.0.0.0 ad.ar.doubleclick.net\n0.0.0.0 ad.at.doubleclick.net\n0.0.0.0 ad.au.doubleclick.net\n0.0.0.0 ad.be.doubleclick.net\n# etc...\n```\n\n## We recommend using `0.0.0.0` instead of `127.0.0.1`\n\nTraditionally most host files use `127.0.0.1`, the _loopback address_, to\nestablish an IP connection to the local machine.\n\nWe prefer to use `0.0.0.0`, which is defined as a non-routable meta-address used\nto designate an invalid, unknown, or non-applicable target.\n\nUsing `0.0.0.0` is empirically faster, possibly because there's no wait for a\ntimeout resolution. It also does not interfere with a web server that may be\nrunning on the local PC.\n\n## Why not use `0` instead of `0.0.0.0`?\n\nWe tried that. Using `0` doesn't work universally.\n\n## Location of your hosts file\n\nTo modify your current `hosts` file, look for it in the following places and\nmodify it with a text editor.\n\n- **macOS (until 10.14.x macOS Mojave), iOS, Android, Linux**: `/etc/hosts`\n  file.\n- **macOS Catalina:** `/private/etc/hosts` file.\n- **Windows**: `%SystemRoot%\\system32\\drivers\\etc\\hosts` file.\n\n## Gentoo\n\nGentoo users may find\n[`sb-hosts`](https://github.com/PF4Public/gentoo-overlay/tree/master/net-misc/sb-hosts)\nin [::pf4public](https://github.com/PF4Public/gentoo-overlay) Gentoo overlay\n\n## NixOS\n\nTo install hosts file on your machine add the following into your\n`configuration.nix`:\n\n```nix\n{\n  networking.extraHosts = let\n    hostsPath = https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts;\n    hostsFile = builtins.fetchurl hostsPath;\n  in builtins.readFile \"${hostsFile}\";\n}\n```\n\n- NOTE: Change `hostsPath` if you need other versions of hosts file.\n- NOTE: The call to `fetchurl` is impure. Use `fetchFromGitHub` with the exact\n  commit if you want to always get the same result.\n\n### Nix Flake\n\nNixOS installations which are managed through _flakes_ can use the hosts file\nlike this:\n\n```nix\n{\n  inputs.hosts.url = \"github:StevenBlack/hosts\";\n  outputs = { self, nixpkgs, hosts }: {\n    nixosConfigurations.my-hostname = {\n      system = \"<architecture>\";\n      modules = [\n        hosts.nixosModule {\n          networking.stevenBlackHosts.enable = true;\n        }\n      ];\n    };\n  };\n}\n```\n\nThe hosts extensions are also available with the following options:\n\n```nix\n{\n  networking.stevenBlackHosts = {\n    blockFakenews = true;\n    blockGambling = true;\n    blockPorn = true;\n    blockSocial = true;\n  };\n}\n```\n\n## Updating hosts file on Windows\n\n(NOTE: See also some third-party Hosts managers, listed below.)\n\nOn Linux and macOS, run the Python script. On Windows more work is required due\nto compatibility issues so it's preferable to run the batch file as follows:\n\n```sh\nupdateHostsWindows.bat\n```\n\nThis file **MUST** be run in command prompt with administrator privileges in the\nrepository directory. In addition to updating the hosts file, it can also\nreplace the existing hosts file, and reload the DNS cache. It goes without\nsaying that for this to work, you must be connected to the internet.\n\nTo open a command prompt as administrator in the repository's directory, do the\nfollowing:\n\n- **Windows XP**: Start → Run → `cmd`\n- **Windows Vista, 7**: Start Button → type `cmd` → right-click Command Prompt →\n  \"Run as Administrator\"\n- **Windows 8**: Start → Swipe Up → All Apps → Windows System → right-click\n  Command Prompt → \"Run as Administrator\"\n- **Windows 10**: Start Button → type `cmd` → right-click Command Prompt → \"Run\n  as Administrator\"\n\nYou can also refer to the \"Third-Party Hosts Managers\" section for further\nrecommended solutions from third parties.\n\n### Warning: Using this `hosts` file in Windows may require disabling DNS Cache service\n\nWindows has issues with larger hosts files. Recent changes in security within\nWindows 10 denies access to changing services via other tools except registry\nhacks. Use the `disable-dnscache-service-win.cmd` file to make proper changes to\nthe Windows registry. You will need to reboot your device once that's done. See\nthe\n[the comments within the `cmd` file](https://github.com/StevenBlack/hosts/blob/master/disable-dnscache-service-win.bat)\nfor more details.\n\nDisabling the DNS Cache Service can cause issues with services and applications like *WSL* and it's possible to compress the hosts file and negate the need to disable the DNS caching service. You can try the *C++* Windows command line tool at [Hosts Compress - Windows](https://github.com/Lateralus138/hosts-compress-windows) (the recommended method) or the *PowerShell* compression script and check out the guide located at the [Hosts Compression Scripts](https://github.com/Lateralus138/hosts-compression-scripts) repository.\n\n## Reloading hosts file\n\nYour operating system will cache DNS lookups. You can either reboot or run the\nfollowing commands to manually flush your DNS cache once the new hosts file is\nin place.\n\nThe Google Chrome browser may require manually cleaning up its DNS Cache on\n`chrome://net-internals/#dns` page to thereafter see the changes in your hosts\nfile. See: <https://superuser.com/questions/723703>\n\n### Windows\n\nOpen a command prompt with administrator privileges and run this command:\n\n```bat\nipconfig /flushdns\n```\n\n### Linux\n\nOpen a Terminal and run with root privileges:\n\n- **Debian/Ubuntu** `sudo service network-manager restart`\n- **Linux Mint** `sudo /etc/init.d/dns-clean start`\n- **Linux with systemd**: `sudo systemctl restart network.service`\n- **Fedora Linux**: `sudo systemctl restart NetworkManager.service`\n- **Arch Linux/Manjaro with Network Manager**:\n  `sudo systemctl restart NetworkManager.service`\n- **Arch Linux/Manjaro with Wicd**: `sudo systemctl restart wicd.service`\n- **RHEL/Centos**: `sudo /etc/init.d/network restart`\n- **FreeBSD**: `sudo service nscd restart`\n\n  To enable the `nscd` daemon initially, it is recommended that you run the\n  following commands:\n\n  ```sh\n  sudo sysrc nscd_enable=\"YES\"\n  sudo service nscd start\n  ```\n\n  Then modify the `hosts` line in your `/etc/nsswitch.conf` file to the\n  following:\n\n  ```text\n  hosts: cache files dns\n  ```\n\n- **NixOS**: The `nscd.service` is automatically restarted when the option\n  `networking.extraHosts` was changed.\n- **Others**: Consult\n  [this Wikipedia article](https://en.wikipedia.org/wiki/Hosts_%28file%29#Location_in_the_file_system).\n\n### macOS\n\nAs described in [this article](https://osxdaily.com/2022/11/21/how-clear-dns-cache-macos-ventura-monterey/),\nopen a Terminal and run:\n\n```sh\nsudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder\n```\n\n## Release management\n\nThis repository uses [release-it](https://github.com/release-it/release-it), an\nexcellent CLI release tool for GitHub repos and npm packages, to automate\ncreating [releases](https://github.com/StevenBlack/hosts/releases). This is why\nthe\n[package.json](https://github.com/StevenBlack/hosts/blob/master/package.json)\nand\n[.release-it.json](https://github.com/StevenBlack/hosts/blob/master/.release-it.json)\nfiles are bundled.\n\n## Goals of this unified hosts file\n\nThe goals of this repo are to:\n\n1. automatically combine high-quality lists of hosts,\n2. provide situation-appropriate extensions,\n3. de-dupe the resultant combined list,\n4. and keep the resultant file reasonably sized.\n\nA high-quality source is defined here as one that is actively curated. A hosts\nsource should be frequently updated by its maintainers with both additions and\nremovals. The larger the hosts file, the higher the level of curation is\nexpected.\n\nIt is expected that this unified hosts file will serve both desktop and mobile\ndevices under a variety of operating systems.\n\n## Third-Party Hosts Managers\n\n- [Unified Hosts AutoUpdate](https://github.com/ScriptTiger/Unified-Hosts-AutoUpdate \"Unified Hosts AutoUpdate\")\n  (for Windows): The Unified Hosts AutoUpdate package is purpose-built for this\n  unified hosts project as well as in active development by community members.\n  You can install and uninstall any blacklist and keep it automatically up to\n  date, and can be placed in a shared network location and deployed across an\n  organization via group policies. And since it is in active development by\n  community members, your bug reports, feature requests, and other feedback are\n  most welcome.\n- [ViHoMa](https://github.com/cmabad/ViHoMa) is a Visual Hosts file Manager,\n  written in Java, by Christian Martínez. Check it out!\n\n## Interesting Applications\n\n- [Hosts-BL](https://github.com/ScriptTiger/Hosts-BL \"Hosts-BL\") is a simple\n  tool to handle hosts file black lists. It can remove comments, remove\n  duplicates, compress to 9 domains per line, add IPv6 entries. In addition, it\n  can also convert black lists to multiple other black list formats compatible\n  with other software, such as dnsmasq, DualServer, RPZ, Privoxy, and Unbound,\n  to name a few.\n- [Host Minder](https://github.com/jeremehancock/hostminder#readme) is a simple\n  GUI that allows you to easily update your /etc/hosts file to one of four\n  consolidated hosts files from StevenBlack/hosts. It is provided as a deb\n  package and comes pre-installed on [UbuntuCE](https://ubuntuce.com/).\n- [Maza ad blocking](https://github.com/tanrax/maza-ad-blocking) is a bash\n  script that automatically updates host file. You can also update a fresh copy.\n  And each time it generates a dnsmasq-compatible configuration file. Fast\n  installation, compatible with MacOS, Linux and BSD.\n- [Hostile](https://github.com/feross/hostile) is a nifty command line utility\n  to easily add or remove domains from your hosts file. If our hosts files are\n  too aggressive for you, you can use `hostile` to remove domains, or you can\n  use `hostile` in a bash script to automate a post process each time you\n  download fresh versions of hosts.\n- [macOS Scripting for Configuration, Backup and Restore](https://github.com/tiiiecherle/osx_install_config)\n  helps customizing, re-installing and using macOS. It also provides a\n  [script](https://github.com/tiiiecherle/osx_install_config/blob/master/09_launchd/9b_run_on_boot/root/1_hosts_file/launchd_and_script/hosts_file_generator.sh)\n  to install and update the hosts file using this project on macOS. In\n  combination with a\n  [launchd](https://github.com/tiiiecherle/osx_install_config/blob/master/09_launchd/9b_run_on_boot/root/1_hosts_file/launchd_and_script/com.hostsfile.install_update.plist)\n  it updates the hosts file every x days (default is 4). To install both,\n  download the GitHub repo and run the\n  [install script](https://github.com/tiiiecherle/osx_install_config/blob/master/09_launchd/9b_run_on_boot/root/1_hosts_file/install_hosts_file_generator_and_launchdservice.sh)\n  from the directory one level up.\n- [Pi-hole](https://pi-hole.net/) is a network-wide DHCP server and ad blocker\n  that runs on [Raspberry Pi](https://en.wikipedia.org/wiki/Raspberry_Pi).\n  Pi-hole uses this repository as one of its sources.\n- [Block ads and malware via local BIND9 DNS server](https://github.com/mueller-ma/block-ads-via-dns \"Block ads and malware via local DNS server\")\n  (for Debian, Raspbian & Ubuntu): Set up a local DNS server with a\n  `/etc/bind/named.conf.blocked` file, sourced from here.\n- [Block ads, malware, and deploy parental controls via local DualServer DNS/DHCP server](https://scripttiger.github.io/dualserver/ \"Block ads, malware, and deploy parental controls via local DualServer DNS/DHCP server\")\n  (for BSD, Windows & Linux): Set up a blacklist for everyone on your network\n  using the power of the unified hosts reformatted for DualServer. And if you're\n  on Windows, this project also maintains an update script to make updating\n  DualServer's blacklist even easier.\n- [Blocking ads and malwares with unbound](https://deadc0de.re/articles/unbound-blocking-ads.html \"Blocking ads and malwares with unbound\")\n  –\n  [Unbound](https://www.unbound.net/ \"Unbound is a validating, recursive, and caching DNS resolver.\")\n  is a validating, recursive, and caching DNS resolver.\n- [dnsmasq conversion script](https://gist.github.com/erlepereira/c11f4f7a3f60cd2071e79018e895fc8a#file-dnsmasq-antimalware)\n  This GitHub gist has a short shell script (bash, will work on any 'nix) and\n  uses `wget` & `awk` present in most distros, to fetch a specified hosts file\n  and convert it to the format required by dnsmasq. Supports IPv4 and IPv6.\n  Designed to be used as either a shell script, or can be dropped into\n  `/etc/cron.weekly` (or wherever suits). The script is short and easily edited,\n  also has a short document attached with notes on dnsmasq setup.\n- [BlackHosts - Command Line Installer/Updater](https://github.com/Lateralus138/blackhosts)\n  This is a cross-platform command line utility to help install/update hosts\n  files found at this repository.\n- [Hosts Compression Scripts](https://github.com/Lateralus138/hosts-compression-scripts) These are various scripts to help compress hosts files (by the author of BlackHosts).\n- [Hosts Compress - Windows](https://github.com/Lateralus138/hosts-compress-windows) This is a *C++* Windows command line tool to help compress hosts files (by the author of BlackHosts and Hosts Compression Scripts). This is highly recommended over the scripts as it is **exponentially faster**.\n- [dnscrypt-proxy](https://github.com/DNSCrypt/dnscrypt-proxy/wiki/Combining-Blocklists)\n  provides a tool to build block lists from local and remote lists in common\n  formats.\n- [Control D](https://controld.com/free-dns)\n  offers a public anycast network hosted mirror of the Unified (Adware + Malware) blocklist:\n  - Legacy DNS: `76.76.2.35`, `76.76.10.35`, `2606:1a40::35`, `2606:1a40:1::35`\n  - DNS-over-HTTPS/TLS/DOQ: `https://freedns.controld.com/x-stevenblack`, `x-stevenblack.freedns.controld.com`\n\n## Contribute\n\nPlease read our\n[Contributing Guide](https://github.com/StevenBlack/hosts/blob/master/contributing.md).\nAmong other things, this explains how we organize files and folders in this\nrepository.\n\nWe are always interested in discovering well-curated sources of hosts. If you\nfind one, please open an [issue](https://github.com/StevenBlack/hosts/issues) to\ndraw our attention.\n\nBefore you create or respond to any issue, please read our\n[code of conduct](https://github.com/StevenBlack/hosts/blob/master/code_of_conduct.md).\n\nLogo by [@Tobaloidee](https://github.com/Tobaloidee) Thank you!.\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.03,
          "content": "requests ~=2.20\nflake8 ~=6.0\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.08,
          "content": "[flake8]\nmax-line-length = 135\nextend-ignore = E203\n\n[isort]\nprofile = black\n"
        },
        {
          "name": "sourcestats.nb",
          "type": "blob",
          "size": 1043.74,
          "content": null
        },
        {
          "name": "sourcestats.sh",
          "type": "blob",
          "size": 1.96,
          "content": "#!/bin/sh\n\nlists=\"\nalternates/fakenews\nalternates/fakenews-gambling\nalternates/fakenews-gambling-only\nalternates/fakenews-gambling-porn\nalternates/fakenews-gambling-porn-only\nalternates/fakenews-gambling-porn-social\nalternates/fakenews-gambling-porn-social-only\nalternates/fakenews-gambling-social\nalternates/fakenews-gambling-social-only\nalternates/fakenews-only\nalternates/fakenews-porn\nalternates/fakenews-porn-only\nalternates/fakenews-porn-social\nalternates/fakenews-porn-social-only\nalternates/fakenews-social\nalternates/fakenews-social-only\nalternates/gambling\nalternates/gambling-only\nalternates/gambling-porn\nalternates/gambling-porn-only\nalternates/gambling-porn-social\nalternates/gambling-porn-social-only\nalternates/gambling-social\nalternates/gambling-social-only\nalternates/porn\nalternates/porn-only\nalternates/porn-social\nalternates/porn-social-only\nalternates/social\nalternates/social-only\ndata/Badd-Boyz-Hosts\ndata/KADhosts\ndata/StevenBlack\ndata/URLHaus\ndata/UncheckyAds\ndata/adaway.org\ndata/add.2o7Net\ndata/add.Dead\ndata/add.Risk\ndata/add.Spam\ndata/hostsVN\ndata/minecraft-hosts\ndata/mvps.org\ndata/someonewhocares.org\ndata/tiuxo\ndata/yoyo.org\nextensions/fakenews\nextensions/gambling\nextensions/gambling/bigdargon\nextensions/gambling/sinfonietta\nextensions/porn\nextensions/porn/bigdargon\nextensions/porn/brijrajparmar27\nextensions/porn/clefspeare13\nextensions/porn/sinfonietta\nextensions/porn/sinfonietta-snuff\nextensions/porn/tiuxo\nextensions/social\nextensions/social/sinfonietta\nextensions/social/tiuxo\n\"\n\nIFS='\n'\n\nfor item in $lists; do\n  echo \"\" > $item/stats.out\n\n  for HASH_DATE in $(git log --reverse --format=\"%t,%as\" -- $item);  do\n    # echo $item $HASH_DATE\n    IFS=\" \"\n    split=(${HASH_DATE//,/ })\n    git checkout ${split[0]} ${item}/hosts 1> /dev/null 2> /dev/null\n    domains=$(rh -q -m $item/hosts)\n    echo  $item ${split[1]} ${domains}\n    echo ${split[1]},${domains} >> ${item}/stats.out\n    IFS='\n'\n  done\n  git checkout HEAD^ ${item}/hosts 1> /dev/null 2> /dev/null\ndone\n"
        },
        {
          "name": "stats.nb",
          "type": "blob",
          "size": 35.17,
          "content": "(* Content-type: application/vnd.wolfram.mathematica *)\n\n(*** Wolfram Notebook File ***)\n(* http://www.wolfram.com/nb *)\n\n(* CreatedBy='WolframDesktop 13.1' *)\n\n(*CacheID: 234*)\n(* Internal cache information:\nNotebookFileLineBreakTest\nNotebookFileLineBreakTest\nNotebookDataPosition[       161,          7]\nNotebookDataLength[     35855,        751]\nNotebookOptionsPosition[     35065,        729]\nNotebookOutlinePosition[     35458,        745]\nCellTagsIndexPosition[     35415,        742]\nWindowFrame->Normal*)\n\n(* Beginning of Notebook Content *)\nNotebook[{\n\nCell[CellGroupData[{\nCell[BoxData[\"\\[AliasDelimiter]\"], \"Input\",\n CellChangeTimes->{3.931804384010314*^9},\n CellLabel->\n  \"In[1169]:=\",ExpressionUUID->\"7134d186-2f8f-4a5d-b8fd-e1205134ab62\"],\n\nCell[BoxData[\"\\[AliasDelimiter]\"], \"Output\",\n CellChangeTimes->{{3.931804387524592*^9, 3.9318044059991903`*^9}, \n   3.9321123850124197`*^9, 3.932387643037456*^9, 3.9328025295152884`*^9, \n   3.9329341818122463`*^9, 3.933185624470751*^9, 3.933683992176692*^9, \n   3.933944168442651*^9, 3.934049100907174*^9, 3.934134035639214*^9, \n   3.934454107475078*^9, 3.9346630739785833`*^9, 3.934969542910392*^9, \n   3.935238771709779*^9, 3.935503361187483*^9, 3.935869095494813*^9, \n   3.935941745079809*^9, 3.936030388772883*^9, 3.936280154713859*^9, \n   3.936444367251707*^9, 3.9368054886510687`*^9, 3.936959096230813*^9, \n   3.937168650948542*^9, 3.937300611375231*^9, 3.9374896704758387`*^9, \n   3.937558235209944*^9, 3.937671079070621*^9, 3.937761518611168*^9, \n   3.937858089679325*^9, 3.9380347882547083`*^9, 3.9382909290330772`*^9, \n   3.9387187900204887`*^9, 3.938985928014577*^9, 3.939327116227829*^9, \n   3.939554161527875*^9, 3.940022647070471*^9, 3.940365417966402*^9, \n   3.9405877575915213`*^9, 3.9410410832399483`*^9, 3.941391259844369*^9, \n   3.941465459938279*^9, 3.941819366244154*^9, 3.942176463010902*^9, \n   3.942342955444633*^9, 3.9424844399855623`*^9, 3.943023258469998*^9, \n   3.9432856491135283`*^9, 3.9433497079535427`*^9, 3.943385934472458*^9, \n   3.943385965678677*^9, 3.943541808180114*^9, 3.94370805739546*^9, \n   3.943962268440778*^9, 3.944239344446944*^9, 3.944331366728922*^9, \n   3.944582807109686*^9, 3.945035698005081*^9, 3.945187222377173*^9, \n   3.945427572840287*^9},\n CellLabel->\n  \"Out[1169]=\",ExpressionUUID->\"2f148843-a6e1-4c05-967c-150ec393a121\"]\n}, Open  ]],\n\nCell[BoxData[{\n RowBox[{\n  RowBox[{\"SetDirectory\", \"[\", \n   RowBox[{\"NotebookDirectory\", \"[\", \"]\"}], \"]\"}], \n  \";\"}], \"\\[IndentingNewLine]\", \n RowBox[{\n  RowBox[{\"data\", \"=\", \n   RowBox[{\"Import\", \"[\", \"\\\"\\<stats.out\\>\\\"\", \"]\"}]}], \n  \";\"}], \"\\[IndentingNewLine]\", \n RowBox[{\n  RowBox[{\"graphtitle\", \"=\", \"\\\"\\<Hosts file size history\\>\\\"\"}], \n  \";\"}], \"\\[IndentingNewLine]\", \n RowBox[{\n  RowBox[{\n  \"graphsubtitle\", \" \", \"=\", \" \", \n   \"\\\"\\<base version: (adware + malware) only\\>\\\"\"}], \n  \";\"}], \"\\[IndentingNewLine]\", \n RowBox[{\n  RowBox[{\"data\", \"=\", \n   RowBox[{\n    RowBox[{\"(\", \n     RowBox[{\n      RowBox[{\"{\", \n       RowBox[{\n        RowBox[{\"DateObject\", \"[\", \n         RowBox[{\"#1\", \"\\[LeftDoubleBracket]\", \"1\", \"\\[RightDoubleBracket]\"}],\n          \"]\"}], \",\", \n        RowBox[{\n        \"#1\", \"\\[LeftDoubleBracket]\", \"2\", \"\\[RightDoubleBracket]\"}]}], \"}\"}],\n       \"&\"}], \")\"}], \"/@\", \"data\"}]}], \";\"}], \"\\[IndentingNewLine]\", \n RowBox[{\n  RowBox[{\"lastitem\", \"=\", \n   RowBox[{\"Callout\", \"[\", \n    RowBox[{\n     RowBox[{\"Last\", \"[\", \"data\", \"]\"}], \",\", \n     RowBox[{\"ToString\", \"[\", \n      RowBox[{\n       RowBox[{\"Last\", \"[\", \"data\", \"]\"}], \"[\", \n       RowBox[{\"[\", \"2\", \"]\"}], \"]\"}], \"]\"}], \",\", \"Right\", \",\", \" \", \n     RowBox[{\"LabelStyle\", \"->\", \"Small\"}], \",\", \" \", \n     RowBox[{\"Background\", \"->\", \"LightBlue\"}]}], \"]\"}]}], \n  \";\"}], \"\\[IndentingNewLine]\", \n RowBox[{\n  RowBox[{\n   RowBox[{\"data\", \"[\", \n    RowBox[{\"[\", \n     RowBox[{\"Length\", \"[\", \"data\", \"]\"}], \"]\"}], \"]\"}], \"=\", \"lastitem\"}], \n  \";\"}]}], \"Input\",\n CellChangeTimes->{{3.867182545948308*^9, 3.867182555077017*^9}, {\n   3.8671856323646584`*^9, 3.867185655249*^9}, 3.867187032420275*^9, {\n   3.867187218478177*^9, 3.867187234045384*^9}, {3.867187352932571*^9, \n   3.867187371829939*^9}, {3.8671903940899982`*^9, 3.8671904257542353`*^9}, \n   3.867190458276375*^9, {3.867190733940156*^9, 3.867190734419613*^9}, {\n   3.867190798905361*^9, 3.86719081289338*^9}, {3.867190843782461*^9, \n   3.867190868878964*^9}, {3.867191008084812*^9, 3.867191008823593*^9}, {\n   3.867191045756618*^9, 3.86719109928176*^9}, {3.867191132601091*^9, \n   3.867191153305139*^9}, {3.867191256528245*^9, 3.867191304159674*^9}, {\n   3.867191352877194*^9, 3.867191356182763*^9}, {3.867191386467814*^9, \n   3.867191411094434*^9}, {3.867191451576531*^9, 3.867191464669776*^9}, {\n   3.867191517397131*^9, 3.867191585673174*^9}, {3.867191623805966*^9, \n   3.867191637345644*^9}, {3.867191694067857*^9, 3.867191832972144*^9}, {\n   3.867443529594183*^9, 3.867443565893339*^9}, {3.867445761749815*^9, \n   3.86744582007928*^9}, {3.867445877108981*^9, 3.867445877563551*^9}, {\n   3.88987554010293*^9, 3.889875542354431*^9}, {3.890909771395684*^9, \n   3.890909773446272*^9}, {3.89765774638717*^9, 3.897657747223047*^9}, {\n   3.898379436246955*^9, 3.898379440050661*^9}, {3.90338401735606*^9, \n   3.9033840200448112`*^9}, {3.906908185436775*^9, 3.9069081879516287`*^9}, {\n   3.925848183308426*^9, 3.925848185881434*^9}, {3.926438108465784*^9, \n   3.92643813766343*^9}, {3.928879584090178*^9, 3.928879587280989*^9}, {\n   3.9293606429237022`*^9, 3.929360645945132*^9}, {3.931376802792758*^9, \n   3.931376805515088*^9}},\n CellLabel->\n  \"In[1170]:=\",ExpressionUUID->\"e5e34011-aa3d-4e95-90b1-863054ac32f5\"],\n\nCell[CellGroupData[{\n\nCell[BoxData[{\n RowBox[{\n  RowBox[{\"graph\", \"=\", \n   RowBox[{\"DateListPlot\", \"[\", \n    RowBox[{\"data\", \"\\[IndentingNewLine]\", \",\", \n     RowBox[{\"PlotTheme\", \"\\[Rule]\", \"\\\"\\<Detailed\\>\\\"\"}], \n     \"\\[IndentingNewLine]\", \",\", \n     RowBox[{\"FrameLabel\", \"\\[Rule]\", \n      RowBox[{\"{\", \n       RowBox[{\n        RowBox[{\"{\", \n         RowBox[{\n          RowBox[{\"HoldForm\", \"[\", \n           RowBox[{\"Unique\", \" \", \"domains\"}], \"]\"}], \",\", \"None\"}], \"}\"}], \n        \",\", \n        RowBox[{\"{\", \n         RowBox[{\n          RowBox[{\"HoldForm\", \"[\", \"Year\", \"]\"}], \",\", \"None\"}], \"}\"}]}], \n       \"}\"}]}], \"\\[IndentingNewLine]\", \",\", \n     RowBox[{\"FrameTicks\", \"->\", \n      RowBox[{\"{\", \n       RowBox[{\n        RowBox[{\"{\", \n         RowBox[{\"All\", \",\", \"All\"}], \"}\"}], \",\", \"Automatic\"}], \"}\"}]}], \n     \"\\[IndentingNewLine]\", \",\", \" \", \n     RowBox[{\"GridLines\", \"->\", \n      RowBox[{\"{\", \n       RowBox[{\n        RowBox[{\"Table\", \"[\", \n         RowBox[{\n          RowBox[{\"DateObject\", \"[\", \n           RowBox[{\"{\", \"x\", \"}\"}], \"]\"}], \",\", \n          RowBox[{\"{\", \n           RowBox[{\"x\", \",\", \"2017\", \",\", \"2025\"}], \"}\"}]}], \"]\"}], \",\", \" \", \n        \"Automatic\"}], \"}\"}]}], \"\\[IndentingNewLine]\", \",\", \n     RowBox[{\"ImageMargins\", \"\\[Rule]\", \"10\"}], \"\\[IndentingNewLine]\", \",\", \n     RowBox[{\"ImageSize\", \" \", \"->\", \" \", \"Large\"}], \"\\[IndentingNewLine]\", \n     \",\", \n     RowBox[{\"PlotLabel\", \" \", \"->\", \" \", \"\\[IndentingNewLine]\", \n      RowBox[{\"Column\", \"[\", \"\\[IndentingNewLine]\", \n       RowBox[{\n        RowBox[{\"{\", \"\\[IndentingNewLine]\", \n         RowBox[{\n          RowBox[{\"Style\", \"[\", \n           RowBox[{\"graphtitle\", \",\", \"16\", \",\", \"Bold\"}], \"]\"}], \n          \"\\[IndentingNewLine]\", \",\", \n          RowBox[{\"Style\", \"[\", \n           RowBox[{\"graphsubtitle\", \",\", \"12\", \",\", \"Bold\"}], \"]\"}], \n          \"\\[IndentingNewLine]\", \",\", \n          RowBox[{\"Style\", \"[\", \n           RowBox[{\n            RowBox[{\"\\\"\\<updated: \\>\\\"\", \"<>\", \n             RowBox[{\"DateString\", \"[\", \n              RowBox[{\"TimeZone\", \"->\", \"\\\"\\<Zulu\\>\\\"\"}], \"]\"}], \" \", \"<>\", \n             \" \", \"\\\"\\< UTC\\>\\\"\"}], \",\", \"12\"}], \"]\"}]}], \n         \"\\[IndentingNewLine]\", \"}\"}], \"\\[IndentingNewLine]\", \",\", \"Center\"}],\n        \"\\[IndentingNewLine]\", \"]\"}]}], \"\\[IndentingNewLine]\", \",\", \n     RowBox[{\"LabelStyle\", \"\\[Rule]\", \n      RowBox[{\"{\", \n       RowBox[{\"GrayLevel\", \"[\", \"0\", \"]\"}], \"}\"}]}]}], \"\\[IndentingNewLine]\",\n     \"]\"}]}], \";\"}], \"\\[IndentingNewLine]\", \n RowBox[{\n  RowBox[{\"Export\", \"[\", \n   RowBox[{\n    RowBox[{\n     RowBox[{\"StringReplace\", \"[\", \n      RowBox[{\n       RowBox[{\"ToLowerCase\", \"[\", \"graphtitle\", \"]\"}], \",\", \n       RowBox[{\"\\\"\\< \\>\\\"\", \"->\", \"\\\"\\<_\\>\\\"\"}]}], \"]\"}], \"<>\", \" \", \n     \"\\\"\\<.png\\>\\\"\"}], \",\", \" \", \"graph\"}], \"]\"}], \n  \";\"}], \"\\[IndentingNewLine]\", \"graph\"}], \"Input\",\n CellChangeTimes->{{3.867186565207215*^9, 3.867186567959504*^9}, {\n   3.867186655694774*^9, 3.867186670522201*^9}, {3.867186775392453*^9, \n   3.867186776891725*^9}, 3.867186837903651*^9, {3.867186904930146*^9, \n   3.867186940968878*^9}, {3.867187286976087*^9, 3.867187304612606*^9}, {\n   3.867187379649686*^9, 3.867187384392969*^9}, {3.8671874248081408`*^9, \n   3.867187425393301*^9}, {3.867187462942827*^9, 3.867187467876066*^9}, {\n   3.867187585120219*^9, 3.867187592332826*^9}, {3.867190421572784*^9, \n   3.867190455350173*^9}, {3.867191170483214*^9, 3.867191170658471*^9}, {\n   3.867191203296914*^9, 3.867191245177144*^9}, {3.867443579626745*^9, \n   3.867443615991692*^9}, {3.867445864801002*^9, 3.867445865695055*^9}, {\n   3.867585461992905*^9, 3.867585470469511*^9}, {3.904556674711198*^9, \n   3.90455667849632*^9}, {3.9218516314196*^9, 3.921851639595783*^9}, {\n   3.92185167067825*^9, 3.9218517351487503`*^9}, 3.9218517880751457`*^9},\n NumberMarks->False,\n CellLabel->\n  \"In[1177]:=\",ExpressionUUID->\"55c17c4f-14a9-40f1-a01c-ab0b0c9b3309\"],\n\nCell[BoxData[\n GraphicsBox[{{}, {{{}, {}, \n     TagBox[\n      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[\n       0.0055000000000000005`], AbsoluteThickness[2], LineBox[CompressedData[\"\n\n1:eJyN2Gd0FdUWB/ChJ9QroDSFoXcYCCJFYCiPopQbREKVgUhThAsiohRHBOkw\nFCE0nSc8WihXiAkiT0YEDQJywYABKSM11FxAJKG+l/3/z4f7Fq71/GD8rXPO\nPvvsc+bOGSsOGtV9cG5FUb77779y/v73H3NO6rXWOf/hxl3Tn+Jg8t/Y6R1p\ns5vYV2g/rPcUBwbQ9utie6ZnxAttpx1Yi/qZ7iO2+tFuX7HzKa0vj7TaX6z+\n7o2HzfoHYGMQ8u1Nq0OR7xbahvV0r/+iG09zIPdBeg3y70mricg/kda3i41j\ntLMN63lC27A6+RDX92Gk7ebI/yitZl6V/B/S+nWxW+0X+qJYn0Abp8VKlcP0\nWbFz8O98VBz+i1Zh/6sheivm/yLkrQ/z76cVWC9/hOchSRzoSLtrxEa5o1xf\nIuYfRTvzMd9N2rQQf8SvHD9JbD+bxvGmONSKVmErg1Z6YT0vH2M7bH57zDu/\nqE+R3zjfGYyf7dkVqwXTWZ8HWP8M2p2F83OatufiPEw7wflXRtpdEWkH1k7S\nagrOS96TnO8wzks9Wj8pDk+hzTzXJZ/avzNetDiQ9jd2i4hDNU7RL4itI7SZ\nLg5XPc38e9yUeq2h1Vixm0W7yfI8hA6c4fgUsXrnLPtPEAdHu2xfiOen7B9c\nTzbGj/ScS+KrS86xns3EvuHnmU+8WBtyge3Hxc4F2p2B8U0v0jFif7znmohX\n+FJE/lr0Zea7WWz1p13//7i3OPwV7fQSu1Mz6Fuod54rXG9f1DuONjLxe1Xr\nKucriP5rr3H9sFL1OvtPQv9DtD0Gv1/2DY6fiPNz+ybz+wzP1/OZ7D9W7EsI\nM5+zV3Ks7/Hsw/Ow6zbrmy+cY/ubO2zfmCn5n/e8Q+wk/8n1dhb7X7xLzxXr\nUX9x/jliq/49+gL2I502LopDNbPpEtI/XO0+vfi27GcsbUdLu6/KA643E+eh\n4kPmf/ec5PcFrcKBco8ZL0us7aX1kuelf5snbC8l1hcr12FVrA3NBSsFxea8\n3LCTT2zPzgObUYg3Iy/HF0D/BvnonzH/5vyMt0Xs31gAdteK9UlR7J8sttZE\nw3pQbL5fkOMT0V8txHymi40XCjNeb7E7sgjHD8b8S4qyvYHkZ12l1drIv2Qx\nrgcOXvZcFvUZ4uP4Z8Vq4eIR7f7Gnsugf3QJ2G6K+bSSdBPEr/ss48GhWs/R\nl1H/jzxnIL9HtH1d7N4vRd8RK1mlOX82xu8rRz9EfnueZzzY9/YLbH+C/sPK\n090u5Djsq8D4g8TmfNqcJg5+43muWCtUkfGXoL1fJbavECtTK9N9UY/cVVj/\n4pF2BkTaLoH116GV1RIvsL4q93cd5o+txnhbxP6u1Tk+SWyUr8n5hyDeGM/D\nUJ9btH1f+rujajH+FbF1rTbPZ2akbVh9qw7XfxvzL/b8GPGK1+X4J+hfpD7n\nT0d9B9KGK/a5tH0V6zutsT7FLsp6CjRgfNh/ktaLi0O1YyKs9KTdmVj/Y9qJ\nx3k80ojtb+B8PaBN7Ifuf/HpVtHfer8x2weJwwdoG/3NV16i30X8zz2/jfM/\nugnHZ4qNMK08yZB82zX1zmuknf+xosjvvf+Hpl79pT1YqhnrcV/sG0G7p8T6\nElpdKTYWNWd7SYmnvvwy/aLYtGi9Ft4vTVswv/pirXBL5tNC7Myi1TYYH9OK\n8Zr/X9ZP0XqzSKuwtlVne2dxOK41z5OOemyi7XZi3+ttaEMcekQ7Ct6nE9vS\nFXCfvE8rXXAfXN2O88Xj/lvpH5xvIu6/nWkV72PlgNf+EeJXaM/1VY+0sQj3\n0U60PQfzr6KVpXh/P9+B8bchn/aek3F/DtBOCvLbRxvoH2rbkfFOirUE2s54\nqsN6J8bjffgKrdzDfaPlK2y/ifiXaDUW99vBr7JepSKt1sD9Zk5n1qOU3Ifc\nZNquGWm1llgv1IXraSDWztBODbH/964cn0ts5utG5xfbuf2MVwb335qxPL9F\nET+2O/vDRtfX2P8R7uMHaSMv5qvYg/Nn43vyT9otdD3CDhwa87r3fEt/ZRWt\nPxD79/bkeOazNI7zVUc+i3sxv3qYf2hv9l+Fel2k9QUY36wP3eKpDu2gnYli\n1e3L9hOIX7Af138W9WxEO2h3Z9DuPMQ/TRt3sd8n+zPfOmK39gC2D8H30eMB\n3u8lvoerDfTeb6hn5UHs/yXiqfHcr19wfjq8yXzS8P8byg7m+A34nrpBuxNw\nvy41hPXHeQxepe2y+D6yhrE9EfUoNpzxPsH642nlbXzfNH6L8w/B980s2q6K\n74mYt1m/5jLe6f92RHt4Om3WFJv5RzzdamsZ75tGK02k3c7zDvPri++bKe94\n73vErzWS843E/nQfxXquwfNTNcD2fVhvFq0n4Xulwhi2b8X5u00bs7Ge9u+y\nfSzOyz7atPC8XR/L+iegvrvfY/zvUM+F49j/mRsRVorje3JXpN1LtNsS6y06\nnu0G6j3IM75HnTm0/RHiDfiA+c9HvJm0uwT71+9D7udOxP+KdpPxvTl1AvMv\nj++hLZ5P4nslbiLj3xcHEmn1Ib6P1k9iuyrfX2r1yd77VeyPpf1zxIGuH8HB\nsWKjosl4o8TBjh+z/zqx/hNt3ZbvKSUwBdYK3MlxuM0nHF9THLxGW4nSP5Qx\nlf0nSrvz7TTuT48/JV/fp7Bv7J0I+6cg3jw6lCz2nafdDWJ74HTWq5s4NJt2\nXhMrybSvb6TtMZhv+wzm/yPmazCT8c5gvk9pZxPG954FB66Jrd9ovy7rCabN\n5viGYuXhHOYfjfb353H+Q8h37Hz6X6jnaIvrSxWbYVrLQj6jFtB3Uc+rC7n/\nlRH/34sYr43YvUw7mvTXin3G+COk3ZlLWwvEZuMl7J8uDvVfCodb382xf2sC\n16OK3brLuJ9txSFlOetzQqzUpu3cf8l8v9KhHxCv+wrGLyDtvge0XkmsV13J\n9sViLYv2J4nVA6s432px4Pbn3vtTbGV+wfo0Rv+RNuvXQWzuoe1R4tCVf7L/\nWszX8ks+L0cw/pnVXO8fYvcbWrv8VNuD1nC9uzE+6V/8PbmEfH9fy3wzxUqf\ndVzPDeSfTvui70m9Pl7PfIPi0NENHJ83K8JWHnH48Eau52fpHxyfyPXsE+v3\naDNNHKi4ifW9L1ZsWq8t8azym5lPfbHTkdY6ioPltvB5mi+2b9LhaZEOWWLt\nna2cfzrif0/7EsSqHuT4DWI3gw5Mkfw03zb2PyE2mtGBvWJnHh26ivoV2c71\n7JJ4vmTaqJMt6y+YRL8othvR7uuo7xt0eCTq2/dr1n8F8quXzP05hfi9aedC\npC04lCuF689APdPo0AHJ15y0g/t1HPtx+BvG/xX1y6bNmahfl53cj1Wo30Ha\nSBGb6rfc3w7iwB3aekds/LjL218l569/2b/ZP+6+7O8NWntPbDvfsf8esTF8\nN9d7Q6wWd1i/cg9k/Rdpq4zYjv+e+XUUG4X3MP5CjP+aVoegvv1/4Pi10l/f\nRttfi7Vpe7k/DcThuvtYP0PsKj9yfKmHUs/HtPFerpy/ztqfuN5pYvUBrfeT\n8Wa3VMYfIw5U2s/17ZJ8Q+No69dI27D6+c9cz+AnUo/RB7h/49C/zEHu/06x\ntYcO7n4k63nuEPsfFpuf0UFX+mvPHIbTf8R65tPOaiXCM2D1Aq29JesJDgrR\n2cgvhbZLSv9AoSOcPyztWhId9TziTT8KN2kh1qf+Cme0EodypzGf3sjnGB31\nAc5bj2Nw1mdi3yPa3IB41Y/D41PERpXfOH4b5j9Eh1IR7x6945DYfS+d+/MH\n1vMnrWQiv44n6IJSP+sWbcSIgzdP8velXu6cv5p+ivOPFqslTrP/MnFwAT3M\nFgeaneH6XXFoHr3+FuKdpwO3xc7As3BCgTxSj5ku3KutWOn3B8/nBLG5+RzX\nZ6B/nfOsf3+x3pNW+4itSRd4ftLEzjrPR8XBDy8yv9WId5gOLEC8bDo1Efl8\neYn5finWDtI7lmI+9TLrtQfzvUK755D/HVpLEbsdMrgf+zHfSjq9bV6pX9kr\ncI0bmG/UFe/3Str9I67yvJcVu1c9NxQHhl9jPRuLjZevc33dxI5Fz3gN8Yrd\n4PleIA7G0/YK5GPc5O/DH2IrOpPjsxEvht5RNJ/E20YnvCR2tTDnby9W6t1i\n/2liYwqdlSz2Pb7N+jTPn/PXnniH+Rlio+qf/H1+X+zPorWvxe64u5w/URy4\nS1spiFfhL9b7e8RLpbWH4nD7e6x//QKyPyOz4I6zxUqpbO7Hd2JnN52aJg40\nf8D1dYqS/btAK/FiNeUh85stNgs9Yry/Ip1wBPt5hk6/IFb6P+b+9JF6adNp\n/1Cxk+8Jn5+3xGof2v+p2NxCW5vEepxyQzx+ozh0jDbOY3965KIrS32syXRU\nB7EZmxseNkIcnEAbAbF+n96xW6zaeeEmPqlXsHw+eH0j1O8nOtxFbN+i/X7U\nv31+OGGAWAvQURPExnK6iSW29nrtQezXTXrGWnG4dAHY/ULsXqOjjmP+xVGw\neQXxW0TDSlHZL7+vIKw1E7vz6B0dxKGBheCMD8XKHLr0ZJyHmYXhYBL2/zRt\n7xTrnxaBs87hPPUuClvR0bKe3+iOncXhXMWYfzexWocOflxQ4pv0+M/Fbhqt\nYv2BZc8yf1gp/RwccvC8O7S7Bu+jVqWYb7LYHE77luB99HJpOHWVWPmWtvH+\n0y7SUcfE4bll4PSwONi4LNuHyvvKNejxk8R2dDnYSRCHYugm68XGNjr1FO4P\n+Z9nPc7h/XeC7oX3X2DKC+wfK7Y30f7heL8dp3d8gPfZhvKsX7LYX6MCz8NR\nvC8n0tZFjP9A5Xz18fv+C612xfujc0Wel8ni8DhamSVW/0k3mYf319hKNNYf\nSKWtdWL/yCo8P51Qv+t06GOxr1RV1mM66rOwGvdno9hsXp35HRbrF+gmGWJl\nbg22+7D+pJrMd6XYbViL83+Pev5OqxmoX3pt7m9zWY8/rg7rFy+2J9fl+FSx\nUb0e8x2J8RNoY57YrFKf6zsjVsZpfH6TUG+bTk1Gvcs34HmujvffLXrGcrG9\ntyH7N8Tv6/cx3P9d4uDiRsy3ON43LV5k+xC8X3yNmf9mvK/O09YB/H4WeYn5\nRuF5cT0PeKzn/GnUhM/TFLHaryn3Z7nYzduM57+g3F8Dn9CBgWLLbM72l8Tq\nE9r1i21/C/7+NsB988uWzC8d+exvxfMYi/MR1vn7vBXPzw+tub7CON9OG+7/\nOrHRqi33Zz/2axE9TM0T4RpDcD+y2nG903E/ukiX3on72Lx/cP5s3L8Kt2c9\nYmS/1Nl0Ku6rbkwHrv8mnu9tHbzfb5yvU7RbAfmc6MjzGEA+xztxP8ag/0ev\nsD4JyCeN1n/A+azxKs837pvqETqqDM5Xt85cX1Ocr0pdeH5m4v3+Pq0sw/3t\nAJ3wk9hM7cp6lsR9qUM3tut4n4+mw13FgRV06e64L7Tzc78m4zzvodd/jvtb\n61juTzPcL3fHeu9j3Edadme+I8TaZXrYq5H255HvUav5azyP38n3mLqT1hVp\nN4v2YH0ri/UU2u4htgu9znoMw/etQdvDxUYSrXcSO1E9+bwPFocbeh4hVvvT\n2ppIW+uQz1c9vd8/sU+L435+JQ5MpfVdmD+uF9vPIp7Sm/MdF7vr6WA1+b7V\nH9FGL7Fxvw+9Ed/D4/uyXkvxPXyPVjeLAz/343n+Sqy925/zJSLeKtqdI1bb\nv8H1OmJfmQFc7w7k05a2vxXbSwdE9HcWG9zPtWJ/iYFcz3Lk12Kg97yKg0Pp\ngCV2F9DGOMx3iVbixKE3BzF+UeR/nrZTcX6KxLP/BtR3juet2J8Bb3K9Cdif\n7XQwBuel4WDG6/tQ/w8bPm6f\n        \"]]},\n      Annotation[#, \"Charting`Private`Tag#1\"]& ]}, \n    TagBox[\n     {Opacity[0.], PointBox[{{3.9453696*^9, 116154.}}]},\n     Annotation[#, {{Callout}, Charting`Private`Tag, {702}}]& ]}, {{{}, {{}, \n      GraphicsGroupBox[{\n        {RGBColor[0.87, 0.94, 1], AbsoluteThickness[4], Opacity[\n          NCache[\n           Rational[2, 3], 0.6666666666666666]], CapForm[\"Butt\"], JoinForm[\n         \"Round\"], \n         BSplineCurveBox[{\n          Offset[{3., 0.}, {3.946020327*^9, 116154.}], \n           Offset[{8., 0.}, {3.946020327*^9, 116154.}], \n           Offset[{10., 0.}, {3.946020327*^9, 116154.}], \n           Offset[{12., 0.}, {3.946020327*^9, 116154.}], \n           Offset[{12., 0.}, {3.946020327*^9, 116154.}]}]}, \n        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],\n          AbsoluteThickness[1.25], \n         BSplineCurveBox[{\n          Offset[{3., 0.}, {3.946020327*^9, 116154.}], \n           Offset[{8., 0.}, {3.946020327*^9, 116154.}], \n           Offset[{10., 0.}, {3.946020327*^9, 116154.}], \n           Offset[{12., 0.}, {3.946020327*^9, 116154.}], \n           Offset[{12., 0.}, {3.946020327*^9, 116154.}]}]}, \n        {EdgeForm[None], FaceForm[{RGBColor[0.87, 0.94, 1], Opacity[\n          NCache[\n           Rational[2, 3], 0.6666666666666666]]}], \n         PolygonBox[{\n          Offset[{48., 5.5000000000000036`}, {3.946020327*^9, 116154.}], \n           Offset[{48., -5.4999999999999964`}, {3.946020327*^9, 116154.}], \n           Offset[{12., -5.5000000000000036`}, {3.946020327*^9, 116154.}], \n           Offset[{12., 5.4999999999999964`}, {3.946020327*^9, 116154.}]}]}, \n        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],\n          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[\n         StyleBox[\n          RotationBox[\"\\<\\\"116154\\\"\\>\",\n           BoxRotation->0.],\n          StripOnInput->False,\n          LineColor->GrayLevel[0],\n          LineOpacity->1,\n          FrontFaceColor->GrayLevel[0],\n          BackFaceColor->GrayLevel[0],\n          FrontFaceOpacity->1,\n          BackFaceOpacity->1,\n          GraphicsColor->GrayLevel[0],\n          Opacity->1,\n          FontSize->Small,\n          FontColor->GrayLevel[0],\n          FontOpacity->1], Offset[{30., 0.}, {3.946020327*^9, 116154.}], \n         NCache[ImageScaled[{Rational[1, 2], Rational[1, 2]}], \n          ImageScaled[{0.5, 0.5}]]]}]}}, {}}},\n  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],\n  Axes->{False, False},\n  AxesLabel->{None, None},\n  AxesOrigin->{3.729024*^9, 0},\n  DisplayFunction->Identity,\n  Frame->{{True, True}, {True, True}},\n  FrameLabel->{{\n     FormBox[\n      TagBox[\n       TagBox[\n        RowBox[{\"Unique\", \" \", \"domains\"}], HoldForm], HoldForm], \n      TraditionalForm], None}, {\n     FormBox[\n      TagBox[\n       TagBox[\"Year\", HoldForm], HoldForm], TraditionalForm], None}},\n  FrameStyle->Automatic,\n  FrameTicks->FrontEndValueCache[{{All, All}, {\n      Charting`DateTicksFunction[Automatic, DateTicksFormat -> {Automatic}], \n      Charting`DateTicksFunction[\n      Automatic, DateTicksFormat -> {Automatic}, \"TickLabels\" -> None]}}, {{\n     All, All}, {{{3.7237536*^9, \n        FormBox[\n         StyleBox[\"\\\"2018\\\"\", \n          Directive[], {}, StripOnInput -> False], TraditionalForm], \n        Automatic, \n        Directive[]}, {3.7868256*^9, \n        FormBox[\n         StyleBox[\"\\\"2020\\\"\", \n          Directive[], {}, StripOnInput -> False], TraditionalForm], \n        Automatic, \n        Directive[]}, {3.849984*^9, \n        FormBox[\n         StyleBox[\"\\\"2022\\\"\", \n          Directive[], {}, StripOnInput -> False], TraditionalForm], \n        Automatic, \n        Directive[]}, {3.913056*^9, \n        FormBox[\n         StyleBox[\"\\\"2024\\\"\", \n          Directive[], {}, StripOnInput -> False], TraditionalForm], \n        Automatic, \n        Directive[]}, {3.9762144*^9, \n        FormBox[\n         StyleBox[\"\\\"2026\\\"\", \n          Directive[], {}, StripOnInput -> False], TraditionalForm], \n        Automatic, \n        Directive[]}, {3.7237536*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.7552896*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.7868256*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.7868256*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.818448*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.849984*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.849984*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.88152*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.913056*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.913056*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.9446784*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.9762144*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}}, {{3.7237536*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.7868256*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.849984*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.913056*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.9762144*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.7237536*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.7552896*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.7868256*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.7868256*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.818448*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.849984*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.849984*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.88152*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.913056*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.913056*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.9446784*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}, {3.9762144*^9, \n        FormBox[\n         TemplateBox[{0, 0}, \"Spacer2\"], TraditionalForm], Automatic, \n        Directive[]}}}}],\n  GridLines->{{3.6922176*^9, 3.7237536*^9, 3.7552896*^9, 3.7868256*^9, \n    3.818448*^9, 3.849984*^9, 3.88152*^9, 3.913056*^9, 3.9446784*^9}, \n    Automatic},\n  GridLinesStyle->Directive[\n    GrayLevel[0.4, 0.5], \n    AbsoluteThickness[1], \n    AbsoluteDashing[{1, 2}]],\n  ImageMargins->10,\n  ImagePadding->{{All, All}, {All, All}},\n  ImageSize->Large,\n  LabelStyle->{\n    GrayLevel[0]},\n  Method->{\n   \"NoShowPlotTheme\" -> \"Detailed\", \"AxisPadding\" -> Scaled[0.02], \n    \"DefaultBoundaryStyle\" -> Automatic, \n    \"DefaultGraphicsInteraction\" -> {\n     \"Version\" -> 1.2, \"TrackMousePosition\" -> {True, False}, \n      \"Effects\" -> {\n       \"Highlight\" -> {\"ratio\" -> 2}, \"HighlightPoint\" -> {\"ratio\" -> 2}, \n        \"Droplines\" -> {\n         \"freeformCursorMode\" -> True, \n          \"placement\" -> {\"x\" -> \"All\", \"y\" -> \"None\"}}}}, \"DefaultMeshStyle\" -> \n    AbsolutePointSize[6], \"DefaultPlotStyle\" -> {\n      Directive[\n       RGBColor[0.368417, 0.506779, 0.709798], \n       AbsoluteThickness[2]], \n      Directive[\n       RGBColor[0.880722, 0.611041, 0.142051], \n       AbsoluteThickness[2]], \n      Directive[\n       RGBColor[0.560181, 0.691569, 0.194885], \n       AbsoluteThickness[2]], \n      Directive[\n       RGBColor[0.922526, 0.385626, 0.209179], \n       AbsoluteThickness[2]], \n      Directive[\n       RGBColor[0.528488, 0.470624, 0.701351], \n       AbsoluteThickness[2]], \n      Directive[\n       RGBColor[0.772079, 0.431554, 0.102387], \n       AbsoluteThickness[2]], \n      Directive[\n       RGBColor[0.363898, 0.618501, 0.782349], \n       AbsoluteThickness[2]], \n      Directive[\n       RGBColor[1, 0.75, 0], \n       AbsoluteThickness[2]], \n      Directive[\n       RGBColor[0.647624, 0.37816, 0.614037], \n       AbsoluteThickness[2]], \n      Directive[\n       RGBColor[0.571589, 0.586483, 0.], \n       AbsoluteThickness[2]], \n      Directive[\n       RGBColor[0.915, 0.3325, 0.2125], \n       AbsoluteThickness[2]], \n      Directive[\n       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], \n       AbsoluteThickness[2]], \n      Directive[\n       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], \n       AbsoluteThickness[2]], \n      Directive[\n       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], \n       AbsoluteThickness[2]], \n      Directive[\n       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], \n       AbsoluteThickness[2]]}, \"DomainPadding\" -> Scaled[0.02], \n    \"PointSizeFunction\" -> \"SmallPointSize\", \"RangePadding\" -> Scaled[0.05], \n    \"AllowMicroRanges\" -> {True, False}, \"OptimizePlotMarkers\" -> True, \n    \"IncludeHighlighting\" -> \"CurrentSet\", \"HighlightStyle\" -> Automatic, \n    \"OptimizePlotMarkers\" -> True, \n    \"CoordinatesToolOptions\" -> {\"DisplayFunction\" -> (({\n        DateString[\n         Part[#, 1], \"DateShort\"], \n        Part[#, 2]}& )[{\n         Identity[\n          Part[#, 1]], \n         Identity[\n          Part[#, 2]]}]& ), \"CopiedValueFunction\" -> (({\n        DateString[\n         Part[#, 1], \"DateShort\"], \n        Part[#, 2]}& )[{\n         Identity[\n          Part[#, 1]], \n         Identity[\n          Part[#, 2]]}]& )}},\n  PlotLabel->FormBox[\n    TagBox[\n     GridBox[{{\n        StyleBox[\n        \"\\\"Hosts file size history\\\"\", 16, Bold, StripOnInput -> False]}, {\n        StyleBox[\n        \"\\\"base version: (adware + malware) only\\\"\", 12, Bold, StripOnInput -> \n         False]}, {\n        StyleBox[\n        \"\\\"updated: Thu 9 Jan 2025 16:06:12 UTC\\\"\", 12, StripOnInput -> \n         False]}}, GridBoxAlignment -> {\"Columns\" -> {{Center}}}, \n      DefaultBaseStyle -> \"Column\", \n      GridBoxItemSize -> {\n       \"Columns\" -> {{Automatic}}, \"Rows\" -> {{Automatic}}}], \"Column\"], \n    TraditionalForm],\n  PlotRange->{{3.729024*^9, 3.9453696*^9}, {0, 218063.}},\n  PlotRangePadding->{{\n     Scaled[0.02], \n     Scaled[0.02]}, {\n     Scaled[0.02], \n     Scaled[0.08090169943749476]}},\n  Ticks->{{}, Automatic}]], \"Output\",\n CellChangeTimes->{\n  3.867186551570758*^9, {3.867186680772122*^9, 3.867186699782072*^9}, \n   3.867186777935874*^9, 3.86718694202357*^9, 3.867187051044989*^9, \n   3.867187255654533*^9, 3.867187310041932*^9, 3.867187431429256*^9, \n   3.867187477376759*^9, 3.867187602705633*^9, {3.867190444725642*^9, \n   3.86719046295945*^9}, 3.867190761611189*^9, 3.867190819779409*^9, {\n   3.867190852467555*^9, 3.867190875035033*^9}, 3.867191085771729*^9, {\n   3.867191139927058*^9, 3.867191174532995*^9}, {3.867191217100472*^9, \n   3.867191249934973*^9}, {3.867191282486545*^9, 3.867191309118765*^9}, \n   3.867191362884745*^9, {3.86719139757495*^9, 3.867191417861985*^9}, \n   3.867191469212702*^9, 3.867191534117766*^9, {3.867191566041802*^9, \n   3.867191590853747*^9}, {3.867191700666916*^9, 3.867191770546698*^9}, {\n   3.867191813970607*^9, 3.867191837153657*^9}, {3.8674436061237383`*^9, \n   3.867443624613255*^9}, 3.867444944515202*^9, 3.867445839945568*^9, {\n   3.867445870303279*^9, 3.867445881911745*^9}, 3.867584995471957*^9, \n   3.867585478130906*^9, 3.86774687062293*^9, 3.868098851430778*^9, \n   3.868523516725683*^9, 3.86906681078651*^9, 3.869308928711943*^9, \n   3.869735161175044*^9, 3.870007810203533*^9, 3.870340372505321*^9, \n   3.870340403401229*^9, 3.87045361082372*^9, 3.870942972286525*^9, \n   3.8713065010498323`*^9, 3.871395829118849*^9, 3.871641630959985*^9, \n   3.871642275253429*^9, 3.871899229411577*^9, 3.8720932523644876`*^9, \n   3.87242839478826*^9, 3.8729292766301403`*^9, 3.8736608832707767`*^9, \n   3.874069338302347*^9, 3.874325909186389*^9, 3.874696457503956*^9, \n   3.874861895344188*^9, 3.875050962875978*^9, 3.87526519097518*^9, \n   3.875891090297274*^9, 3.876342003848527*^9, 3.876998312579729*^9, \n   3.8772936096656237`*^9, 3.877382516377141*^9, 3.877964348832008*^9, \n   3.87804450687954*^9, 3.878470212323723*^9, 3.8786395885601797`*^9, \n   3.878639620334971*^9, 3.878757847201033*^9, 3.879112223224792*^9, \n   3.879170520951467*^9, 3.879289724404871*^9, 3.879371591147833*^9, \n   3.879797285624524*^9, 3.879923975629261*^9, 3.880151317819726*^9, \n   3.880393658429194*^9, 3.880543046724104*^9, 3.881056375670085*^9, \n   3.881325738216374*^9, 3.881334367469533*^9, 3.881592959478129*^9, \n   3.882027365892887*^9, 3.88219345383886*^9, 3.882466370101098*^9, \n   3.882613249735723*^9, 3.883174805016778*^9, 3.883439999108673*^9, \n   3.883605359783735*^9, 3.883843869256338*^9, 3.883866592728613*^9, \n   3.883867143448183*^9, 3.884153915891087*^9, 3.884641124197339*^9, \n   3.884773401559798*^9, 3.884775165607097*^9, 3.88477566967144*^9, \n   3.885548303427269*^9, 3.885831123028147*^9, 3.886191584864834*^9, \n   3.886621436378044*^9, 3.886855243870946*^9, 3.887106308113074*^9, \n   3.887235622274569*^9, 3.887498860649525*^9, 3.887834971429055*^9, \n   3.8884179282247667`*^9, 3.888752672205769*^9, 3.889131678960092*^9, \n   3.889875549917007*^9, 3.890245716755601*^9, {3.890686789876093*^9, \n   3.8906868143380527`*^9}, 3.8908207849213142`*^9, 3.890908186110266*^9, \n   3.89090978001711*^9, 3.891285151358225*^9, 3.891545263571479*^9, \n   3.8916073042523813`*^9, 3.891872341652968*^9, 3.892072401751935*^9, \n   3.89228235594491*^9, 3.892544999424947*^9, 3.892806179970969*^9, \n   3.893095552437428*^9, 3.893172375102555*^9, 3.89362060069613*^9, \n   3.893686053639799*^9, 3.89397203764882*^9, 3.894751203039884*^9, \n   3.895084844111672*^9, 3.895439490125032*^9, 3.895526321693917*^9, \n   3.895657784061549*^9, 3.8957448599055853`*^9, 3.895931247787265*^9, \n   3.896013566564756*^9, 3.896095386373332*^9, 3.8965191786429*^9, \n   3.896893631393726*^9, 3.897216178858164*^9, 3.897657754621402*^9, \n   3.897926194231195*^9, 3.898379414999449*^9, 3.8983794476037083`*^9, \n   3.898434292317229*^9, 3.898951274337104*^9, 3.899121622375916*^9, \n   3.899475149831279*^9, 3.899911501496304*^9, 3.900175205856585*^9, \n   3.900270527812401*^9, 3.900491563343502*^9, {3.903025185560467*^9, \n   3.903025205982198*^9}, 3.903174150401764*^9, 3.903182074275147*^9, \n   3.903383990135808*^9, 3.903384025396119*^9, 3.903726387165244*^9, \n   3.903971852825098*^9, 3.904336629052966*^9, 3.904556665826528*^9, \n   3.904660734636202*^9, 3.905083048189001*^9, 3.905285129053268*^9, \n   3.905441042720232*^9, 3.905782272103561*^9, 3.906106379419388*^9, \n   3.90620708413487*^9, 3.906558811905631*^9, 3.906635301595938*^9, \n   3.906908194396344*^9, 3.907055587466549*^9, 3.907452024145508*^9, \n   3.90783837173269*^9, 3.90797214412626*^9, 3.908034764359009*^9, \n   3.908469310792593*^9, 3.908732154353013*^9, 3.908732190062996*^9, \n   3.908901085229148*^9, {3.909427575397406*^9, 3.909427588602787*^9}, \n   3.909612415221402*^9, 3.909847575834868*^9, 3.909936481017467*^9, \n   3.909991254378272*^9, 3.910005424673617*^9, 3.910456143107051*^9, \n   3.910647476573389*^9, 3.911433387460314*^9, 3.911728222756092*^9, \n   3.9118237070907784`*^9, 3.912544596386341*^9, 3.912962757486238*^9, \n   3.91332901505127*^9, 3.913585485561975*^9, 3.914191899559814*^9, \n   3.91452905381531*^9, 3.914864261401607*^9, 3.915353459292568*^9, \n   3.915612436883578*^9, 3.916243653217845*^9, 3.916581681635819*^9, \n   3.916758553791595*^9, 3.917042927532581*^9, 3.91779822205876*^9, \n   3.917830311292558*^9, 3.918163568568325*^9, 3.918587407268053*^9, \n   3.9190016728292847`*^9, 3.9195037040688963`*^9, 3.9198942834595957`*^9, \n   3.920234712218867*^9, 3.920662078423338*^9, 3.921093853155019*^9, \n   3.921237317218327*^9, 3.921696325797345*^9, 3.921851598339695*^9, \n   3.921851647511963*^9, {3.921851723783431*^9, 3.921851736631104*^9}, \n   3.921851789631633*^9, 3.922439881880352*^9, 3.922748366740074*^9, \n   3.923045431914585*^9, 3.923572464604835*^9, 3.923778956655144*^9, \n   3.924544421212076*^9, 3.925203572822671*^9, 3.925848169754739*^9, \n   3.925848217744079*^9, 3.926438083805722*^9, {3.9264381205815907`*^9, \n   3.9264381421853952`*^9}, 3.9268502289991503`*^9, 3.927388977392035*^9, \n   3.92757446555766*^9, 3.92782075468937*^9, 3.927990566625127*^9, \n   3.928273181747738*^9, 3.928273253177276*^9, 3.928445235964464*^9, \n   3.928879595108038*^9, 3.929093886948715*^9, {3.9293606314921618`*^9, \n   3.929360652965334*^9}, 3.929714464833693*^9, 3.929988766810141*^9, \n   3.930079284149286*^9, 3.930510896991767*^9, 3.930510938300539*^9, \n   3.931113466961287*^9, {3.9313767836902103`*^9, 3.931376810889453*^9}, \n   3.9316146196756153`*^9, {3.931804387786202*^9, 3.931804406214263*^9}, \n   3.9321123856670113`*^9, 3.9323876432660027`*^9, 3.932802530588872*^9, \n   3.932934182040694*^9, 3.933185625332106*^9, 3.933683992394909*^9, \n   3.933944168693449*^9, 3.934049101145823*^9, 3.9341340358613033`*^9, \n   3.9344541086606693`*^9, 3.934663074849002*^9, 3.9349695431536903`*^9, \n   3.9352387720342407`*^9, 3.93550336171005*^9, 3.93586909609081*^9, \n   3.935941745580612*^9, 3.936030389292848*^9, 3.93628015526616*^9, \n   3.936444367786038*^9, 3.936805488935912*^9, 3.9369590965559273`*^9, \n   3.937168651459606*^9, 3.937300611594054*^9, 3.937489671622321*^9, \n   3.937558235442833*^9, 3.937671079329116*^9, 3.9377615200370893`*^9, \n   3.93785808991883*^9, 3.938034788460722*^9, 3.938290929252728*^9, \n   3.938718791109577*^9, 3.938985933523465*^9, 3.93932711736786*^9, \n   3.9395541667847223`*^9, 3.94002264823391*^9, 3.940365418251431*^9, \n   3.940587757835065*^9, 3.941041083594245*^9, 3.941391262071135*^9, \n   3.941465460154566*^9, 3.941819366459153*^9, 3.942176463258642*^9, \n   3.942342955722383*^9, 3.942484441050716*^9, 3.9430232620045*^9, \n   3.94328565204541*^9, 3.9433497081629467`*^9, 3.9433859356078568`*^9, \n   3.9433859659393463`*^9, 3.9435418083866587`*^9, 3.943708057618864*^9, \n   3.9439622686622868`*^9, 3.94423934466717*^9, 3.944331366932857*^9, \n   3.944582807320376*^9, 3.945035698250413*^9, 3.9451872226369143`*^9, \n   3.9454275730998573`*^9},\n CellLabel->\n  \"Out[1179]=\",ExpressionUUID->\"c00d16f5-42f8-4c9e-a8f0-80d2e2b7e17f\"]\n}, Open  ]]\n},\nWindowSize->{1234, 1257},\nWindowMargins->{{0, Automatic}, {Automatic, 0}},\nFrontEndVersion->\"14.1 for Mac OS X ARM (64-bit) (July 16, 2024)\",\nStyleDefinitions->\"Default.nb\",\nExpressionUUID->\"a68abeaf-41ba-46e4-a91b-e09f414e080e\"\n]\n(* End of Notebook Content *)\n\n(* Internal cache information *)\n(*CellTagsOutline\nCellTagsIndex->{}\n*)\n(*CellTagsIndex\nCellTagsIndex->{}\n*)\n(*NotebookFileOutline\nNotebook[{\nCell[CellGroupData[{\nCell[583, 22, 169, 3, 29, \"Input\",ExpressionUUID->\"7134d186-2f8f-4a5d-b8fd-e1205134ab62\"],\nCell[755, 27, 1579, 23, 47, \"Output\",ExpressionUUID->\"2f148843-a6e1-4c05-967c-150ec393a121\"]\n}, Open  ]],\nCell[2349, 53, 3248, 72, 151, \"Input\",ExpressionUUID->\"e5e34011-aa3d-4e95-90b1-863054ac32f5\"],\nCell[CellGroupData[{\nCell[5622, 129, 3850, 86, 417, \"Input\",ExpressionUUID->\"55c17c4f-14a9-40f1-a01c-ab0b0c9b3309\"],\nCell[9475, 217, 25574, 509, 475, \"Output\",ExpressionUUID->\"c00d16f5-42f8-4c9e-a8f0-80d2e2b7e17f\"]\n}, Open  ]]\n}\n]\n*)\n\n"
        },
        {
          "name": "stats.out",
          "type": "blob",
          "size": 11.96,
          "content": "2018-03-03,55999\n2018-03-03,55999\n2018-03-04,55999\n2018-03-04,56014\n2018-03-04,55932\n2018-03-06,55986\n2018-03-08,55981\n2018-03-09,55997\n2018-03-10,55998\n2018-03-12,56022\n2018-03-14,56031\n2018-03-15,56530\n2018-03-15,56041\n2018-03-17,56046\n2018-03-19,56083\n2018-03-20,56121\n2018-03-22,56125\n2018-03-23,60571\n2018-03-23,60571\n2018-03-24,56611\n2018-03-26,56665\n2018-03-28,56730\n2018-03-29,56726\n2018-03-30,56725\n2018-04-02,56279\n2018-04-02,55773\n2018-04-04,55161\n2018-04-05,55138\n2018-04-06,55082\n2018-04-08,55019\n2018-04-12,55035\n2018-04-16,55035\n2018-04-16,54931\n2018-04-17,54929\n2018-04-19,54649\n2018-04-21,54682\n2018-04-22,54680\n2018-04-24,54692\n2018-04-25,54567\n2018-04-30,54621\n2018-05-02,54398\n2018-05-05,54404\n2018-05-08,54255\n2018-05-12,54277\n2018-05-13,54273\n2018-05-17,53952\n2018-05-19,53953\n2018-05-22,53966\n2018-05-30,55028\n2018-06-02,55044\n2018-06-05,55259\n2018-06-08,56407\n2018-06-10,56429\n2018-06-14,56544\n2018-06-14,56543\n2018-06-14,56542\n2018-06-16,56761\n2018-06-17,56955\n2018-06-18,57042\n2018-06-20,57372\n2018-06-24,57422\n2018-06-28,57422\n2018-06-28,57455\n2018-06-30,57583\n2018-07-04,59076\n2018-07-06,62112\n2018-07-09,62089\n2018-07-11,60855\n2018-07-16,60860\n2018-07-23,60377\n2018-07-26,60564\n2018-07-30,61386\n2018-08-01,61450\n2018-08-08,61909\n2018-08-13,62232\n2018-08-19,63157\n2018-08-22,62535\n2018-08-24,61855\n2018-08-25,61775\n2018-08-29,60855\n2018-09-04,60777\n2018-09-06,60039\n2018-09-06,60111\n2018-09-08,60102\n2018-09-13,59278\n2018-09-16,58076\n2018-09-18,57211\n2018-09-23,57425\n2018-10-02,57426\n2018-10-05,56299\n2018-10-09,56213\n2018-10-14,56289\n2018-10-22,54447\n2018-10-23,54181\n2018-11-01,52988\n2018-11-02,53380\n2018-11-14,65616\n2018-11-20,64852\n2018-11-21,64964\n2018-11-26,64102\n2018-11-29,64622\n2018-12-04,64613\n2018-12-11,63269\n2018-12-15,63275\n2018-12-23,63643\n2018-12-29,76102\n2018-12-30,63565\n2019-01-04,63359\n2019-01-10,38824\n2019-01-13,38825\n2019-01-22,38851\n2019-01-26,39074\n2019-01-29,39099\n2019-02-06,39171\n2019-02-11,38992\n2019-02-18,38958\n2019-02-24,38980\n2019-03-02,38971\n2019-03-06,38483\n2019-03-15,38256\n2019-03-21,38199\n2019-03-26,38323\n2019-04-02,38274\n2019-04-07,38232\n2019-04-11,37950\n2019-04-17,37583\n2019-04-25,37674\n2019-05-02,39311\n2019-05-04,39257\n2019-05-05,39260\n2019-05-10,39124\n2019-05-13,39087\n2019-05-23,39124\n2019-05-24,39116\n2019-05-29,39373\n2019-06-05,39365\n2019-06-11,39367\n2019-06-17,40767\n2019-06-19,40775\n2019-06-22,40805\n2019-06-28,40861\n2019-07-04,40908\n2019-07-21,40932\n2019-07-27,40935\n2019-07-31,40956\n2019-08-06,41596\n2019-08-10,41749\n2019-08-13,42028\n2019-08-14,42092\n2019-08-22,42167\n2019-08-30,42204\n2019-09-06,39644\n2019-09-09,39057\n2019-09-09,39678\n2019-09-09,39069\n2019-09-10,42264\n2019-09-19,42298\n2019-09-23,42353\n2019-09-29,42405\n2019-10-10,39732\n2019-10-12,39748\n2019-10-15,42965\n2019-10-18,42826\n2019-10-27,42875\n2019-10-27,42877\n2019-10-30,42903\n2019-10-31,42999\n2019-11-03,43003\n2019-11-15,42692\n2019-11-17,42755\n2019-11-20,42837\n2019-11-26,43134\n2019-11-27,43135\n2019-12-02,43154\n2019-12-10,43154\n2019-12-11,40015\n2019-12-15,39710\n2019-12-20,39671\n2019-12-21,39676\n2019-12-23,39676\n2019-12-23,39665\n2019-12-30,39700\n2020-01-01,39677\n2020-01-04,39837\n2020-01-06,39773\n2020-01-11,40828\n2020-01-14,51192\n2020-01-16,51196\n2020-01-16,51198\n2020-01-16,51200\n2020-01-19,51191\n2020-01-21,51154\n2020-01-23,50919\n2020-01-24,50401\n2020-01-30,51367\n2020-02-03,51631\n2020-02-05,51538\n2020-02-09,51580\n2020-02-14,51688\n2020-02-17,51729\n2020-02-21,51679\n2020-02-21,51679\n2020-02-21,51679\n2020-02-25,51666\n2020-02-25,51665\n2020-03-01,51810\n2020-03-05,51715\n2020-03-07,51749\n2020-03-11,51973\n2020-03-15,53254\n2020-03-18,53502\n2020-03-21,53864\n2020-03-25,54042\n2020-03-28,54243\n2020-03-29,54177\n2020-04-01,54267\n2020-04-03,53567\n2020-04-03,54427\n2020-04-04,54373\n2020-04-06,54456\n2020-04-09,54673\n2020-04-10,54705\n2020-04-11,54718\n2020-04-13,54675\n2020-04-16,54992\n2020-04-18,55109\n2020-04-18,55109\n2020-04-22,55262\n2020-04-26,55224\n2020-04-28,55158\n2020-05-02,55945\n2020-05-05,55482\n2020-05-05,55617\n2020-05-12,57535\n2020-05-13,57677\n2020-05-13,57681\n2020-05-15,57739\n2020-05-20,57670\n2020-05-26,57357\n2020-05-27,57397\n2020-06-02,57545\n2020-06-09,57460\n2020-06-16,57461\n2020-06-22,57321\n2020-06-25,57379\n2020-06-27,57294\n2020-07-02,57439\n2020-07-02,57438\n2020-07-05,57336\n2020-07-06,57306\n2020-07-13,57463\n2020-07-18,57659\n2020-07-24,57717\n2020-07-29,58607\n2020-08-01,58506\n2020-08-03,57834\n2020-08-03,57834\n2020-08-06,58342\n2020-08-13,59082\n2020-08-14,59129\n2020-08-15,59086\n2020-08-17,58487\n2020-08-19,57259\n2020-08-25,55653\n2020-09-02,56115\n2020-09-07,56061\n2020-09-14,56634\n2020-09-20,56595\n2020-09-26,56948\n2020-10-03,56998\n2020-10-08,56650\n2020-10-13,56287\n2020-10-14,55480\n2020-10-19,57557\n2020-10-29,58712\n2020-11-01,58394\n2020-11-03,60248\n2020-11-08,60214\n2020-11-10,59693\n2020-11-14,57817\n2020-11-15,59693\n2020-11-16,59724\n2020-11-19,59724\n2020-11-19,57865\n2020-11-22,59840\n2020-11-25,60122\n2020-11-28,60212\n2020-12-02,58229\n2020-12-09,58659\n2020-12-14,58925\n2020-12-19,58786\n2020-12-26,58749\n2020-12-31,58459\n2021-01-02,58277\n2021-01-05,58500\n2021-01-12,58567\n2021-01-17,58866\n2021-01-22,59532\n2021-01-22,59536\n2021-01-23,59536\n2021-01-24,59895\n2021-01-31,60160\n2021-02-02,60376\n2021-02-03,60413\n2021-02-08,60539\n2021-02-09,60599\n2021-02-14,60886\n2021-02-16,62903\n2021-02-21,63730\n2021-02-22,65234\n2021-02-26,65491\n2021-02-28,65505\n2021-03-06,66054\n2021-03-09,66398\n2021-03-10,67781\n2021-03-16,67403\n2021-03-21,67314\n2021-03-28,68213\n2021-03-31,77609\n2021-04-04,77939\n2021-04-09,78482\n2021-04-13,76473\n2021-04-19,79811\n2021-04-24,83272\n2021-04-26,79681\n2021-04-26,79909\n2021-04-29,80749\n2021-05-01,80542\n2021-05-04,79092\n2021-05-05,79164\n2021-05-06,79281\n2021-05-06,79658\n2021-05-12,80994\n2021-05-15,81380\n2021-05-17,80588\n2021-05-22,81591\n2021-05-25,82949\n2021-05-31,82724\n2021-06-07,82077\n2021-06-16,81114\n2021-06-22,80474\n2021-06-28,81038\n2021-07-01,81795\n2021-07-04,81747\n2021-07-13,82486\n2021-07-18,82986\n2021-07-19,78604\n2021-07-26,83662\n2021-07-29,84249\n2021-08-02,85388\n2021-08-09,87071\n2021-08-17,86541\n2021-08-20,87096\n2021-08-25,89495\n2021-08-26,90154\n2021-08-30,89149\n2021-09-02,90239\n2021-09-06,90660\n2021-09-07,92495\n2021-09-12,92997\n2021-09-17,92727\n2021-09-24,94108\n2021-09-30,90982\n2021-10-03,91251\n2021-10-05,91898\n2021-10-12,92774\n2021-10-14,93467\n2021-10-19,93720\n2021-10-23,93811\n2021-10-23,93811\n2021-10-27,93181\n2021-11-04,93792\n2021-11-11,93948\n2021-11-14,93911\n2021-11-17,94353\n2021-11-21,97034\n2021-11-29,98380\n2021-11-29,98361\n2021-12-05,97446\n2021-12-09,97371\n2021-12-12,97608\n2021-12-13,98213\n2021-12-16,98996\n2021-12-19,99057\n2021-12-20,99459\n2021-12-25,100594\n2021-12-30,100447\n2021-12-30,100621\n2022-01-02,100472\n2022-01-04,100737\n2022-01-07,101023\n2022-01-11,96295\n2022-01-18,97681\n2022-01-19,97351\n2022-01-21,97965\n2022-01-24,101316\n2022-01-28,103110\n2022-01-30,103254\n2022-01-31,99678\n2022-02-01,100079\n2022-02-07,100796\n2022-02-12,101834\n2022-02-13,101964\n2022-02-13,101961\n2022-02-17,102024\n2022-02-22,97469\n2022-02-26,97643\n2022-03-06,101690\n2022-03-07,100504\n2022-03-09,100819\n2022-03-12,101238\n2022-03-14,99445\n2022-03-19,100057\n2022-03-24,132578\n2022-03-29,107893\n2022-03-31,108371\n2022-04-05,109601\n2022-04-09,110300\n2022-04-13,111038\n2022-04-18,111001\n2022-04-21,111750\n2022-04-25,108835\n2022-04-29,99938\n2022-05-03,113257\n2022-05-05,113498\n2022-05-10,111391\n2022-05-14,112139\n2022-05-19,115065\n2022-05-25,143020\n2022-05-29,143530\n2022-05-31,112068\n2022-06-02,112431\n2022-06-07,109518\n2022-06-09,109881\n2022-06-09,109882\n2022-06-16,128594\n2022-06-21,108392\n2022-06-25,109485\n2022-06-29,121851\n2022-07-01,122104\n2022-07-04,110091\n2022-07-13,145627\n2022-07-16,136312\n2022-07-16,136305\n2022-07-18,112291\n2022-07-21,130963\n2022-07-23,131732\n2022-07-25,130824\n2022-07-29,131969\n2022-08-03,133031\n2022-08-09,133117\n2022-08-12,133944\n2022-08-17,134945\n2022-08-20,135871\n2022-08-24,136496\n2022-08-25,136943\n2022-08-31,136769\n2022-09-04,137498\n2022-09-05,137655\n2022-09-08,138290\n2022-09-11,138720\n2022-09-13,139584\n2022-09-17,140908\n2022-09-23,148942\n2022-10-01,151073\n2022-10-06,152364\n2022-10-09,152589\n2022-10-13,154648\n2022-10-15,155189\n2022-10-17,155214\n2022-10-20,155891\n2022-10-27,157803\n2022-11-01,159592\n2022-11-09,158738\n2022-11-12,158653\n2022-11-13,158532\n2022-11-20,162454\n2022-11-21,162390\n2022-11-26,160885\n2022-11-28,160302\n2022-11-29,161145\n2022-12-03,160851\n2022-12-04,160503\n2022-12-06,161857\n2022-12-07,162908\n2022-12-11,161510\n2022-12-13,162080\n2022-12-15,166011\n2022-12-18,163237\n2022-12-20,166634\n2022-12-26,164689\n2022-12-29,165457\n2023-01-01,165579\n2023-01-06,166382\n2023-01-08,166513\n2023-01-11,168487\n2023-01-13,168820\n2023-01-19,171070\n2023-01-23,171825\n2023-01-24,172503\n2023-01-27,173811\n2023-01-30,174286\n2023-02-05,176311\n2023-02-07,177887\n2023-02-16,182112\n2023-02-19,183303\n2023-02-23,184034\n2023-02-28,186022\n2023-03-03,185715\n2023-03-06,186098\n2023-03-07,186427\n2023-03-11,188294\n2023-03-14,189925\n2023-03-21,192873\n2023-03-25,194506\n2023-03-29,195225\n2023-04-07,198967\n2023-04-11,199776\n2023-04-16,201075\n2023-04-18,204490\n2023-04-18,170547\n2023-04-23,171163\n2023-04-26,174932\n2023-04-27,175338\n2023-04-30,175432\n2023-05-02,176330\n2023-05-04,177554\n2023-05-08,177487\n2023-05-11,179308\n2023-05-14,181356\n2023-05-15,182497\n2023-05-20,183693\n2023-05-21,183820\n2023-05-24,186359\n2023-06-03,188935\n2023-06-06,190101\n2023-06-10,190910\n2023-06-11,190986\n2023-06-13,191475\n2023-06-14,192353\n2023-06-15,193031\n2023-06-16,194049\n2023-06-17,193745\n2023-06-18,193532\n2023-06-23,195265\n2023-06-27,195888\n2023-07-01,197056\n2023-07-06,198470\n2023-07-09,198903\n2023-07-14,200541\n2023-07-15,200643\n2023-07-21,202390\n2023-07-23,202580\n2023-07-27,203871\n2023-08-01,205106\n2023-08-04,207241\n2023-08-05,207329\n2023-08-06,217142\n2023-08-08,218063\n2023-08-10,193508\n2023-09-14,193527\n2023-09-17,170010\n2023-09-21,136348\n2023-09-24,136916\n2023-09-25,135874\n2023-09-30,136121\n2023-10-03,136500\n2023-10-04,137889\n2023-10-08,138779\n2023-10-12,142561\n2023-10-13,143279\n2023-10-17,144152\n2023-10-18,144647\n2023-10-21,146329\n2023-10-23,146518\n2023-10-28,148939\n2023-11-01,150073\n2023-11-02,150826\n2023-11-03,151351\n2023-11-08,153284\n2023-11-11,154182\n2023-11-13,154802\n2023-11-19,157163\n2023-11-21,158148\n2023-11-24,159709\n2023-11-25,160064\n2023-11-26,160199\n2023-12-01,144135\n2023-12-03,144626\n2023-12-13,141631\n2023-12-16,143418\n2023-12-17,143606\n2023-12-26,144724\n2023-12-30,145892\n2024-01-03,146695\n2024-01-07,147972\n2024-01-14,152448\n2024-01-17,153663\n2024-01-21,154884\n2024-01-27,157537\n2024-01-30,158822\n2024-02-06,162079\n2024-02-10,150998\n2024-02-12,152012\n2024-02-16,154586\n2024-02-24,161424\n2024-02-25,161497\n2024-02-28,165116\n2024-03-04,168785\n2024-03-09,173657\n2024-03-15,178071\n2024-03-20,180806\n2024-03-24,183511\n2024-03-29,185791\n2024-04-03,186738\n2024-04-04,131354\n2024-04-09,124413\n2024-04-11,124961\n2024-04-18,125354\n2024-04-22,127148\n2024-04-25,128535\n2024-05-01,127868\n2024-05-04,128270\n2024-05-12,132661\n2024-05-20,138002\n2024-05-27,141885\n2024-06-03,144894\n2024-06-08,147871\n2024-06-14,152800\n2024-06-17,153900\n2024-06-19,156685\n2024-06-19,158917\n2024-06-25,159970\n2024-06-27,161603\n2024-07-01,163646\n2024-07-04,165492\n2024-07-07,152377\n2024-07-11,155096\n2024-07-14,156096\n2024-07-15,156668\n2024-07-21,159233\n2024-07-27,159322\n2024-07-31,160530\n2024-08-02,161896\n2024-08-04,162372\n2024-08-08,164641\n2024-08-11,165666\n2024-08-16,168230\n2024-08-18,168736\n2024-08-20,170227\n2024-08-26,172684\n2024-08-29,174099\n2024-08-30,174558\n2024-08-31,174659\n2024-09-04,176095\n2024-09-07,177109\n2024-09-10,165709\n2024-09-13,166334\n2024-09-16,167302\n2024-09-20,166253\n2024-09-20,114741\n2024-09-22,113639\n2024-09-25,114692\n2024-09-27,115261\n2024-10-01,116042\n2024-10-03,116352\n2024-10-05,116378\n2024-10-07,115860\n2024-10-09,116312\n2024-10-10,116424\n2024-10-11,117315\n2024-10-11,117369\n2024-10-13,117418\n2024-10-16,117522\n2024-10-18,117700\n2024-10-23,118258\n2024-10-27,118120\n2024-10-31,119403\n2024-11-02,120198\n2024-11-08,121510\n2024-11-11,121207\n2024-11-14,121554\n2024-11-19,121628\n2024-11-23,121528\n2024-11-24,121038\n2024-11-28,121859\n2024-12-03,121737\n2024-12-04,121786\n2024-12-06,121859\n2024-12-12,121445\n2024-12-15,121259\n2024-12-16,120945\n2024-12-17,121095\n2024-12-18,120678\n2024-12-20,120176\n2024-12-23,119013\n2024-12-26,117898\n2024-12-27,117392\n2024-12-30,117488\n2025-01-04,117134\n2025-01-06,115515\n2025-01-09,116154\n"
        },
        {
          "name": "stats.sh",
          "type": "blob",
          "size": 0.35,
          "content": "#!/usr/bin/env bash\n\necho \\n \"\" > stats.out\n\nfor TAG_DATE in $(git tag --sort=creatordate  --format='%(refname:short),%(creatordate:short)'); do\n  # echo \"$TAG_DATE\"\n  split=(${TAG_DATE//,/ })\n  # echo ${split[0]}\n  git checkout tags/${split[0]} readmeData.json\n  entries=$(jq '.base.entries' readmeData.json)\n  echo ${split[1]},${entries} >> stats.out\ndone\n"
        },
        {
          "name": "testUpdateHostsFile.py",
          "type": "blob",
          "size": 70.23,
          "content": "#!/usr/bin/env python\n\n# Script by gfyoung\n# https://github.com/gfyoung\n#\n# Python script for testing updateHostFiles.py\n\nimport json\nimport locale\nimport os\nimport platform\nimport re\nimport shutil\nimport sys\nimport tempfile\nimport unittest\nimport unittest.mock as mock\nfrom io import BytesIO, StringIO\n\nimport requests\n\nimport updateHostsFile\nfrom updateHostsFile import (\n    Colors,\n    colorize,\n    display_exclusion_options,\n    domain_to_idna,\n    exclude_domain,\n    flush_dns_cache,\n    gather_custom_exclusions,\n    get_defaults,\n    get_file_by_url,\n    is_valid_user_provided_domain_format,\n    matches_exclusions,\n    move_hosts_file_into_place,\n    normalize_rule,\n    path_join_robust,\n    print_failure,\n    print_success,\n    prompt_for_exclusions,\n    prompt_for_flush_dns_cache,\n    prompt_for_move,\n    prompt_for_update,\n    query_yes_no,\n    recursive_glob,\n    remove_old_hosts_file,\n    sort_sources,\n    strip_rule,\n    supports_color,\n    update_all_sources,\n    update_readme_data,\n    update_sources_data,\n    write_data,\n    write_opening_header,\n)\n\nunicode = str\n\n\n# Test Helper Objects\nclass Base(unittest.TestCase):\n    @staticmethod\n    def mock_property(name):\n        return mock.patch(name, new_callable=mock.PropertyMock)\n\n    @property\n    def sep(self):\n        if platform.system().lower() == \"windows\":\n            return \"\\\\\"\n        return os.sep\n\n    def assert_called_once(self, mock_method):\n        self.assertEqual(mock_method.call_count, 1)\n\n\nclass BaseStdout(Base):\n    def setUp(self):\n        sys.stdout = StringIO()\n\n    def tearDown(self):\n        sys.stdout.close()\n        sys.stdout = sys.__stdout__\n\n\nclass BaseMockDir(Base):\n    @property\n    def dir_count(self):\n        return len(os.listdir(self.test_dir))\n\n    def setUp(self):\n        self.test_dir = tempfile.mkdtemp()\n\n    def tearDown(self):\n        shutil.rmtree(self.test_dir)\n\n\n# End Test Helper Objects\n\n\n# Project Settings\nclass TestGetDefaults(Base):\n    def test_get_defaults(self):\n        with self.mock_property(\"updateHostsFile.BASEDIR_PATH\"):\n            updateHostsFile.BASEDIR_PATH = \"foo\"\n            actual = get_defaults()\n            expected = {\n                \"numberofrules\": 0,\n                \"datapath\": \"foo\" + self.sep + \"data\",\n                \"freshen\": True,\n                \"replace\": False,\n                \"backup\": False,\n                \"skipstatichosts\": False,\n                \"keepdomaincomments\": True,\n                \"extensionspath\": \"foo\" + self.sep + \"extensions\",\n                \"extensions\": [],\n                \"nounifiedhosts\": False,\n                \"compress\": False,\n                \"minimise\": False,\n                \"outputsubfolder\": \"\",\n                \"hostfilename\": \"hosts\",\n                \"targetip\": \"0.0.0.0\",\n                \"sourcedatafilename\": \"update.json\",\n                \"sourcesdata\": [],\n                \"readmefilename\": \"readme.md\",\n                \"readmetemplate\": (\"foo\" + self.sep + \"readme_template.md\"),\n                \"readmedata\": {},\n                \"readmedatafilename\": (\"foo\" + self.sep + \"readmeData.json\"),\n                \"exclusionpattern\": r\"([a-zA-Z\\d-]+\\.){0,}\",\n                \"exclusionregexes\": [],\n                \"exclusions\": [],\n                \"commonexclusions\": [\"hulu.com\"],\n                \"blacklistfile\": \"foo\" + self.sep + \"blacklist\",\n                \"whitelistfile\": \"foo\" + self.sep + \"whitelist\",\n            }\n            self.assertDictEqual(actual, expected)\n\n\n# End Project Settings\n\n\nclass TestSortSources(Base):\n    def test_sort_sources_simple(self):\n        given = [\n            \"sbc.io\",\n            \"example.com\",\n            \"github.com\",\n        ]\n\n        expected = [\"example.com\", \"github.com\", \"sbc.io\"]\n\n        actual = sort_sources(given)\n\n        self.assertEqual(actual, expected)\n\n    def test_live_data(self):\n        given = [\n            \"data/KADhosts/update.json\",\n            \"data/someonewhocares.org/update.json\",\n            \"data/StevenBlack/update.json\",\n            \"data/adaway.org/update.json\",\n            \"data/URLHaus/update.json\",\n            \"data/UncheckyAds/update.json\",\n            \"data/add.2o7Net/update.json\",\n            \"data/mvps.org/update.json\",\n            \"data/add.Spam/update.json\",\n            \"data/add.Dead/update.json\",\n            \"data/malwaredomainlist.com/update.json\",\n            \"data/Badd-Boyz-Hosts/update.json\",\n            \"data/hostsVN/update.json\",\n            \"data/yoyo.org/update.json\",\n            \"data/add.Risk/update.json\",\n            \"data/tiuxo/update.json\",\n            \"extensions/gambling/update.json\",\n            \"extensions/porn/clefspeare13/update.json\",\n            \"extensions/porn/sinfonietta-snuff/update.json\",\n            \"extensions/porn/tiuxo/update.json\",\n            \"extensions/porn/sinfonietta/update.json\",\n            \"extensions/fakenews/update.json\",\n            \"extensions/social/tiuxo/update.json\",\n            \"extensions/social/sinfonietta/update.json\",\n        ]\n\n        expected = [\n            \"data/StevenBlack/update.json\",\n            \"data/adaway.org/update.json\",\n            \"data/add.2o7Net/update.json\",\n            \"data/add.Dead/update.json\",\n            \"data/add.Risk/update.json\",\n            \"data/add.Spam/update.json\",\n            \"data/Badd-Boyz-Hosts/update.json\",\n            \"data/hostsVN/update.json\",\n            \"data/KADhosts/update.json\",\n            \"data/malwaredomainlist.com/update.json\",\n            \"data/mvps.org/update.json\",\n            \"data/someonewhocares.org/update.json\",\n            \"data/tiuxo/update.json\",\n            \"data/UncheckyAds/update.json\",\n            \"data/URLHaus/update.json\",\n            \"data/yoyo.org/update.json\",\n            \"extensions/fakenews/update.json\",\n            \"extensions/gambling/update.json\",\n            \"extensions/porn/clefspeare13/update.json\",\n            \"extensions/porn/sinfonietta/update.json\",\n            \"extensions/porn/sinfonietta-snuff/update.json\",\n            \"extensions/porn/tiuxo/update.json\",\n            \"extensions/social/sinfonietta/update.json\",\n            \"extensions/social/tiuxo/update.json\",\n        ]\n\n        actual = sort_sources(given)\n\n        self.assertEqual(actual, expected)\n\n\n# Prompt the User\nclass TestPromptForUpdate(BaseStdout, BaseMockDir):\n    def setUp(self):\n        BaseStdout.setUp(self)\n        BaseMockDir.setUp(self)\n\n    def test_no_freshen_no_new_file(self):\n        hosts_file = os.path.join(self.test_dir, \"hosts\")\n        hosts_data = \"This data should not be overwritten\"\n\n        with self.mock_property(\"updateHostsFile.BASEDIR_PATH\"):\n            updateHostsFile.BASEDIR_PATH = self.test_dir\n\n            with open(hosts_file, \"w\") as f:\n                f.write(hosts_data)\n\n        for update_auto in (False, True):\n            dir_count = self.dir_count\n            prompt_for_update(freshen=False, update_auto=update_auto)\n\n            output = sys.stdout.getvalue()\n            self.assertEqual(output, \"\")\n\n            sys.stdout = StringIO()\n\n            self.assertEqual(self.dir_count, dir_count)\n\n            with open(hosts_file, \"r\") as f:\n                contents = f.read()\n                self.assertEqual(contents, hosts_data)\n\n    def test_no_freshen_new_file(self):\n        hosts_file = os.path.join(self.test_dir, \"hosts\")\n\n        with self.mock_property(\"updateHostsFile.BASEDIR_PATH\"):\n            updateHostsFile.BASEDIR_PATH = self.test_dir\n\n            dir_count = self.dir_count\n            prompt_for_update(freshen=False, update_auto=False)\n\n            output = sys.stdout.getvalue()\n            self.assertEqual(output, \"\")\n\n            sys.stdout = StringIO()\n\n            self.assertEqual(self.dir_count, dir_count + 1)\n\n            with open(hosts_file, \"r\") as f:\n                contents = f.read()\n                self.assertEqual(contents, \"\")\n\n    @mock.patch(\"builtins.open\")\n    def test_no_freshen_fail_new_file(self, mock_open):\n        for exc in (IOError, OSError):\n            mock_open.side_effect = exc(\"failed open\")\n\n            with self.mock_property(\"updateHostsFile.BASEDIR_PATH\"):\n                updateHostsFile.BASEDIR_PATH = self.test_dir\n                prompt_for_update(freshen=False, update_auto=False)\n\n                output = sys.stdout.getvalue()\n                expected = (\n                    \"ERROR: No 'hosts' file in the folder. \"\n                    \"Try creating one manually.\"\n                )\n                self.assertIn(expected, output)\n\n                sys.stdout = StringIO()\n\n    @mock.patch(\"updateHostsFile.query_yes_no\", return_value=False)\n    def test_freshen_no_update(self, _):\n        hosts_file = os.path.join(self.test_dir, \"hosts\")\n        hosts_data = \"This data should not be overwritten\"\n\n        with self.mock_property(\"updateHostsFile.BASEDIR_PATH\"):\n            updateHostsFile.BASEDIR_PATH = self.test_dir\n\n            with open(hosts_file, \"w\") as f:\n                f.write(hosts_data)\n\n            dir_count = self.dir_count\n\n            update_sources = prompt_for_update(freshen=True, update_auto=False)\n            self.assertFalse(update_sources)\n\n            output = sys.stdout.getvalue()\n            expected = \"OK, we'll stick with what we've got locally.\"\n            self.assertIn(expected, output)\n\n            sys.stdout = StringIO()\n\n            self.assertEqual(self.dir_count, dir_count)\n\n            with open(hosts_file, \"r\") as f:\n                contents = f.read()\n                self.assertEqual(contents, hosts_data)\n\n    @mock.patch(\"updateHostsFile.query_yes_no\", return_value=True)\n    def test_freshen_update(self, _):\n        hosts_file = os.path.join(self.test_dir, \"hosts\")\n        hosts_data = \"This data should not be overwritten\"\n\n        with self.mock_property(\"updateHostsFile.BASEDIR_PATH\"):\n            updateHostsFile.BASEDIR_PATH = self.test_dir\n\n            with open(hosts_file, \"w\") as f:\n                f.write(hosts_data)\n\n            dir_count = self.dir_count\n\n            for update_auto in (False, True):\n                update_sources = prompt_for_update(\n                    freshen=True, update_auto=update_auto\n                )\n                self.assertTrue(update_sources)\n\n                output = sys.stdout.getvalue()\n                self.assertEqual(output, \"\")\n\n                sys.stdout = StringIO()\n\n                self.assertEqual(self.dir_count, dir_count)\n\n                with open(hosts_file, \"r\") as f:\n                    contents = f.read()\n                    self.assertEqual(contents, hosts_data)\n\n    def tearDown(self):\n        BaseStdout.tearDown(self)\n\n\nclass TestPromptForExclusions(BaseStdout):\n    @mock.patch(\"updateHostsFile.query_yes_no\", return_value=False)\n    def testSkipPrompt(self, mock_query):\n        gather_exclusions = prompt_for_exclusions(skip_prompt=True)\n        self.assertFalse(gather_exclusions)\n\n        output = sys.stdout.getvalue()\n        self.assertEqual(output, \"\")\n\n        mock_query.assert_not_called()\n\n    @mock.patch(\"updateHostsFile.query_yes_no\", return_value=False)\n    def testNoSkipPromptNoDisplay(self, mock_query):\n        gather_exclusions = prompt_for_exclusions(skip_prompt=False)\n        self.assertFalse(gather_exclusions)\n\n        output = sys.stdout.getvalue()\n        expected = \"OK, we'll only exclude domains in the whitelist.\"\n        self.assertIn(expected, output)\n\n        self.assert_called_once(mock_query)\n\n    @mock.patch(\"updateHostsFile.query_yes_no\", return_value=True)\n    def testNoSkipPromptDisplay(self, mock_query):\n        gather_exclusions = prompt_for_exclusions(skip_prompt=False)\n        self.assertTrue(gather_exclusions)\n\n        output = sys.stdout.getvalue()\n        self.assertEqual(output, \"\")\n\n        self.assert_called_once(mock_query)\n\n\nclass TestPromptForFlushDnsCache(Base):\n    @mock.patch(\"updateHostsFile.flush_dns_cache\", return_value=0)\n    @mock.patch(\"updateHostsFile.query_yes_no\", return_value=False)\n    def testFlushCache(self, mock_query, mock_flush):\n        for prompt_flush in (False, True):\n            prompt_for_flush_dns_cache(flush_cache=True, prompt_flush=prompt_flush)\n\n            mock_query.assert_not_called()\n            self.assert_called_once(mock_flush)\n\n            mock_query.reset_mock()\n            mock_flush.reset_mock()\n\n    @mock.patch(\"updateHostsFile.flush_dns_cache\", return_value=0)\n    @mock.patch(\"updateHostsFile.query_yes_no\", return_value=False)\n    def testNoFlushCacheNoPrompt(self, mock_query, mock_flush):\n        prompt_for_flush_dns_cache(flush_cache=False, prompt_flush=False)\n\n        mock_query.assert_not_called()\n        mock_flush.assert_not_called()\n\n    @mock.patch(\"updateHostsFile.flush_dns_cache\", return_value=0)\n    @mock.patch(\"updateHostsFile.query_yes_no\", return_value=False)\n    def testNoFlushCachePromptNoFlush(self, mock_query, mock_flush):\n        prompt_for_flush_dns_cache(flush_cache=False, prompt_flush=True)\n\n        self.assert_called_once(mock_query)\n        mock_flush.assert_not_called()\n\n    @mock.patch(\"updateHostsFile.flush_dns_cache\", return_value=0)\n    @mock.patch(\"updateHostsFile.query_yes_no\", return_value=True)\n    def testNoFlushCachePromptFlush(self, mock_query, mock_flush):\n        prompt_for_flush_dns_cache(flush_cache=False, prompt_flush=True)\n\n        self.assert_called_once(mock_query)\n        self.assert_called_once(mock_flush)\n\n\nclass TestPromptForMove(Base):\n    def setUp(self):\n        Base.setUp(self)\n        self.final_file = \"final.txt\"\n\n    def prompt_for_move(self, **move_params):\n        return prompt_for_move(self.final_file, **move_params)\n\n    @mock.patch(\"updateHostsFile.move_hosts_file_into_place\", return_value=0)\n    @mock.patch(\"updateHostsFile.query_yes_no\", return_value=False)\n    def testSkipStaticHosts(self, mock_query, mock_move):\n        for replace in (False, True):\n            for auto in (False, True):\n                move_file = self.prompt_for_move(\n                    replace=replace, auto=auto, skipstatichosts=True\n                )\n                self.assertFalse(move_file)\n\n                mock_query.assert_not_called()\n                mock_move.assert_not_called()\n\n                mock_query.reset_mock()\n                mock_move.reset_mock()\n\n    @mock.patch(\"updateHostsFile.move_hosts_file_into_place\", return_value=0)\n    @mock.patch(\"updateHostsFile.query_yes_no\", return_value=False)\n    def testReplaceNoSkipStaticHosts(self, mock_query, mock_move):\n        for auto in (False, True):\n            move_file = self.prompt_for_move(\n                replace=True, auto=auto, skipstatichosts=False\n            )\n            self.assertFalse(move_file)\n\n            mock_query.assert_not_called()\n            self.assert_called_once(mock_move)\n\n            mock_query.reset_mock()\n            mock_move.reset_mock()\n\n    @mock.patch(\"updateHostsFile.move_hosts_file_into_place\", return_value=0)\n    @mock.patch(\"updateHostsFile.query_yes_no\", return_value=False)\n    def testAutoNoSkipStaticHosts(self, mock_query, mock_move):\n        for replace in (False, True):\n            move_file = self.prompt_for_move(\n                replace=replace, auto=True, skipstatichosts=True\n            )\n            self.assertFalse(move_file)\n\n            mock_query.assert_not_called()\n            mock_move.assert_not_called()\n\n            mock_query.reset_mock()\n            mock_move.reset_mock()\n\n    @mock.patch(\"updateHostsFile.move_hosts_file_into_place\", return_value=0)\n    @mock.patch(\"updateHostsFile.query_yes_no\", return_value=False)\n    def testPromptNoMove(self, mock_query, mock_move):\n        move_file = self.prompt_for_move(\n            replace=False, auto=False, skipstatichosts=False\n        )\n        self.assertFalse(move_file)\n\n        self.assert_called_once(mock_query)\n        mock_move.assert_not_called()\n\n    @mock.patch(\"updateHostsFile.move_hosts_file_into_place\", return_value=0)\n    @mock.patch(\"updateHostsFile.query_yes_no\", return_value=True)\n    def testPromptMove(self, mock_query, mock_move):\n        move_file = self.prompt_for_move(\n            replace=False, auto=False, skipstatichosts=False\n        )\n        self.assertFalse(move_file)\n\n        self.assert_called_once(mock_query)\n        self.assert_called_once(mock_move)\n\n\n# End Prompt the User\n\n\n# Exclusion Logic\nclass TestDisplayExclusionsOptions(Base):\n    @mock.patch(\"updateHostsFile.query_yes_no\", return_value=0)\n    @mock.patch(\"updateHostsFile.exclude_domain\", return_value=None)\n    @mock.patch(\"updateHostsFile.gather_custom_exclusions\", return_value=None)\n    def test_no_exclusions(self, mock_gather, mock_exclude, _):\n        common_exclusions = []\n        display_exclusion_options(common_exclusions, \"foo\", [])\n\n        mock_gather.assert_not_called()\n        mock_exclude.assert_not_called()\n\n    @mock.patch(\"updateHostsFile.query_yes_no\", side_effect=[1, 1, 0])\n    @mock.patch(\"updateHostsFile.exclude_domain\", return_value=None)\n    @mock.patch(\"updateHostsFile.gather_custom_exclusions\", return_value=None)\n    def test_only_common_exclusions(self, mock_gather, mock_exclude, _):\n        common_exclusions = [\"foo\", \"bar\"]\n        display_exclusion_options(common_exclusions, \"foo\", [])\n\n        mock_gather.assert_not_called()\n\n        exclude_calls = [mock.call(\"foo\", \"foo\", []), mock.call(\"bar\", \"foo\", None)]\n        mock_exclude.assert_has_calls(exclude_calls)\n\n    @mock.patch(\"updateHostsFile.query_yes_no\", side_effect=[0, 0, 1])\n    @mock.patch(\"updateHostsFile.exclude_domain\", return_value=None)\n    @mock.patch(\"updateHostsFile.gather_custom_exclusions\", return_value=None)\n    def test_gather_exclusions(self, mock_gather, mock_exclude, _):\n        common_exclusions = [\"foo\", \"bar\"]\n        display_exclusion_options(common_exclusions, \"foo\", [])\n\n        mock_exclude.assert_not_called()\n        self.assert_called_once(mock_gather)\n\n    @mock.patch(\"updateHostsFile.query_yes_no\", side_effect=[1, 0, 1])\n    @mock.patch(\"updateHostsFile.exclude_domain\", return_value=None)\n    @mock.patch(\"updateHostsFile.gather_custom_exclusions\", return_value=None)\n    def test_mixture_gather_exclusions(self, mock_gather, mock_exclude, _):\n        common_exclusions = [\"foo\", \"bar\"]\n        display_exclusion_options(common_exclusions, \"foo\", [])\n\n        mock_exclude.assert_called_once_with(\"foo\", \"foo\", [])\n        self.assert_called_once(mock_gather)\n\n\nclass TestGatherCustomExclusions(BaseStdout):\n\n    # Can only test in the invalid domain case\n    # because of the settings global variable.\n    @mock.patch(\"updateHostsFile.input\", side_effect=[\"foo\", \"no\"])\n    @mock.patch(\n        \"updateHostsFile.is_valid_user_provided_domain_format\", return_value=False\n    )\n    def test_basic(self, *_):\n        gather_custom_exclusions(\"foo\", [])\n\n        expected = \"Do you have more domains you want to enter? [Y/n]\"\n        output = sys.stdout.getvalue()\n        self.assertIn(expected, output)\n\n    @mock.patch(\"updateHostsFile.input\", side_effect=[\"foo\", \"yes\", \"bar\", \"no\"])\n    @mock.patch(\n        \"updateHostsFile.is_valid_user_provided_domain_format\", return_value=False\n    )\n    def test_multiple(self, *_):\n        gather_custom_exclusions(\"foo\", [])\n\n        expected = (\n            \"Do you have more domains you want to enter? [Y/n] \"\n            \"Do you have more domains you want to enter? [Y/n]\"\n        )\n        output = sys.stdout.getvalue()\n        self.assertIn(expected, output)\n\n\nclass TestExcludeDomain(Base):\n    def test_invalid_exclude_domain(self):\n        exclusion_regexes = []\n        exclusion_pattern = \"*.com\"\n\n        for domain in [\"google.com\", \"hulu.com\", \"adaway.org\"]:\n            self.assertRaises(\n                re.error, exclude_domain, domain, exclusion_pattern, exclusion_regexes\n            )\n\n        self.assertListEqual(exclusion_regexes, [])\n\n    def test_valid_exclude_domain(self):\n        exp_count = 0\n        expected_regexes = []\n        exclusion_regexes = []\n        exclusion_pattern = r\"[a-z]\\.\"\n\n        for domain in [\"google.com\", \"hulu.com\", \"adaway.org\"]:\n            self.assertEqual(len(exclusion_regexes), exp_count)\n\n            exclusion_regexes = exclude_domain(\n                domain, exclusion_pattern, exclusion_regexes\n            )\n            expected_regex = re.compile(exclusion_pattern + domain)\n\n            expected_regexes.append(expected_regex)\n            exp_count += 1\n\n        self.assertEqual(len(exclusion_regexes), exp_count)\n        self.assertListEqual(exclusion_regexes, expected_regexes)\n\n\nclass TestMatchesExclusions(Base):\n    def test_no_match_empty_list(self):\n        exclusion_regexes = []\n\n        for domain in [\n            \"1.2.3.4 localhost\",\n            \"5.6.7.8 hulu.com\",\n            \"9.1.2.3 yahoo.com\",\n            \"4.5.6.7 cloudfront.net\",\n        ]:\n            self.assertFalse(matches_exclusions(domain, exclusion_regexes))\n\n    def test_no_match_list(self):\n        exclusion_regexes = [r\".*\\.org\", r\".*\\.edu\"]\n        exclusion_regexes = [re.compile(regex) for regex in exclusion_regexes]\n\n        for domain in [\n            \"1.2.3.4 localhost\",\n            \"5.6.7.8 hulu.com\",\n            \"9.1.2.3 yahoo.com\",\n            \"4.5.6.7 cloudfront.net\",\n        ]:\n            self.assertFalse(matches_exclusions(domain, exclusion_regexes))\n\n    def test_match_list(self):\n        exclusion_regexes = [r\".*\\.com\", r\".*\\.org\", r\".*\\.edu\"]\n        exclusion_regexes = [re.compile(regex) for regex in exclusion_regexes]\n\n        for domain in [\n            \"5.6.7.8 hulu.com\",\n            \"9.1.2.3 yahoo.com\",\n            \"4.5.6.7 adaway.org\",\n            \"8.9.1.2 education.edu\",\n        ]:\n            self.assertTrue(matches_exclusions(domain, exclusion_regexes))\n\n    def test_match_raw_list(self):\n        exclusion_regexes = [r\".*\\.com\", r\".*\\.org\", r\".*\\.edu\", r\".*@.*\"]\n        exclusion_regexes = [re.compile(regex) for regex in exclusion_regexes]\n\n        for domain in [\n            \"hulu.com\",\n            \"yahoo.com\",\n            \"adaway.org\",\n            \"education.edu\",\n            \"a.stro.lo.gy@45.144.225.135\",\n        ]:\n            self.assertTrue(matches_exclusions(domain, exclusion_regexes))\n\n    def test_no_match_raw_list(self):\n        exclusion_regexes = [r\".*\\.org\", r\".*\\.edu\"]\n        exclusion_regexes = [re.compile(regex) for regex in exclusion_regexes]\n\n        for domain in [\n            \"localhost\",\n            \"hulu.com\",\n            \"yahoo.com\",\n            \"cloudfront.net\",\n        ]:\n            self.assertFalse(matches_exclusions(domain, exclusion_regexes))\n\n\n# End Exclusion Logic\n\n\n# Update Logic\nclass TestUpdateSourcesData(Base):\n    def setUp(self):\n        Base.setUp(self)\n\n        self.data_path = \"data\"\n        self.extensions_path = \"extensions\"\n        self.source_data_filename = \"update.json\"\n\n        self.update_kwargs = dict(\n            datapath=self.data_path,\n            extensionspath=self.extensions_path,\n            sourcedatafilename=self.source_data_filename,\n            nounifiedhosts=False,\n        )\n\n    def update_sources_data(self, sources_data, extensions):\n        return update_sources_data(\n            sources_data[:], extensions=extensions, **self.update_kwargs\n        )\n\n    @mock.patch(\"updateHostsFile.recursive_glob\", return_value=[])\n    @mock.patch(\"updateHostsFile.path_join_robust\", return_value=\"dirpath\")\n    @mock.patch(\"builtins.open\", return_value=mock.Mock())\n    def test_no_update(self, mock_open, mock_join_robust, _):\n        extensions = []\n        sources_data = [{\"source\": \"source1.txt\"}, {\"source\": \"source2.txt\"}]\n\n        new_sources_data = self.update_sources_data(sources_data, extensions)\n        self.assertEqual(new_sources_data, sources_data)\n        mock_join_robust.assert_not_called()\n        mock_open.assert_not_called()\n\n        extensions = [\".json\", \".txt\"]\n        new_sources_data = self.update_sources_data(sources_data, extensions)\n\n        self.assertEqual(new_sources_data, sources_data)\n        join_calls = [\n            mock.call(self.extensions_path, \".json\"),\n            mock.call(self.extensions_path, \".txt\"),\n        ]\n        mock_join_robust.assert_has_calls(join_calls)\n        mock_open.assert_not_called()\n\n    @mock.patch(\n        \"updateHostsFile.recursive_glob\",\n        side_effect=[[], [\"update1.txt\", \"update2.txt\"]],\n    )\n    @mock.patch(\"json.load\", return_value={\"mock_source\": \"mock_source.ext\"})\n    @mock.patch(\"builtins.open\", return_value=mock.Mock())\n    @mock.patch(\"updateHostsFile.path_join_robust\", return_value=\"dirpath\")\n    def test_update_only_extensions(self, mock_join_robust, *_):\n        extensions = [\".json\"]\n        sources_data = [{\"source\": \"source1.txt\"}, {\"source\": \"source2.txt\"}]\n        new_sources_data = self.update_sources_data(sources_data, extensions)\n\n        expected = sources_data + [{\"mock_source\": \"mock_source.ext\"}] * 2\n        self.assertEqual(new_sources_data, expected)\n        self.assert_called_once(mock_join_robust)\n\n    @mock.patch(\n        \"updateHostsFile.recursive_glob\",\n        side_effect=[[\"update1.txt\", \"update2.txt\"], [\"update3.txt\", \"update4.txt\"]],\n    )\n    @mock.patch(\n        \"json.load\",\n        side_effect=[\n            {\"mock_source\": \"mock_source.txt\"},\n            {\"mock_source\": \"mock_source2.txt\"},\n            {\"mock_source\": \"mock_source3.txt\"},\n            {\"mock_source\": \"mock_source4.txt\"},\n        ],\n    )\n    @mock.patch(\"builtins.open\", return_value=mock.Mock())\n    @mock.patch(\"updateHostsFile.path_join_robust\", return_value=\"dirpath\")\n    def test_update_both_pathways(self, mock_join_robust, *_):\n        extensions = [\".json\"]\n        sources_data = [{\"source\": \"source1.txt\"}, {\"source\": \"source2.txt\"}]\n        new_sources_data = self.update_sources_data(sources_data, extensions)\n\n        expected = sources_data + [\n            {\"mock_source\": \"mock_source.txt\"},\n            {\"mock_source\": \"mock_source2.txt\"},\n            {\"mock_source\": \"mock_source3.txt\"},\n            {\"mock_source\": \"mock_source4.txt\"},\n        ]\n        self.assertEqual(new_sources_data, expected)\n        self.assert_called_once(mock_join_robust)\n\n\nclass TestUpdateAllSources(BaseStdout):\n    def setUp(self):\n        BaseStdout.setUp(self)\n\n        self.source_data_filename = \"data.json\"\n        self.host_filename = \"hosts.txt\"\n\n    @mock.patch(\"builtins.open\")\n    @mock.patch(\"updateHostsFile.recursive_glob\", return_value=[])\n    def test_no_sources(self, _, mock_open):\n        update_all_sources(self.source_data_filename, self.host_filename)\n        mock_open.assert_not_called()\n\n    @mock.patch(\"builtins.open\", return_value=mock.Mock())\n    @mock.patch(\"json.load\", return_value={\"url\": \"example.com\"})\n    @mock.patch(\"updateHostsFile.recursive_glob\", return_value=[\"foo\"])\n    @mock.patch(\"updateHostsFile.write_data\", return_value=0)\n    @mock.patch(\"updateHostsFile.get_file_by_url\", return_value=\"file_data\")\n    def test_one_source(self, mock_get, mock_write, *_):\n        update_all_sources(self.source_data_filename, self.host_filename)\n        self.assert_called_once(mock_write)\n        self.assert_called_once(mock_get)\n\n        output = sys.stdout.getvalue()\n        expected = \"Updating source  from example.com\"\n\n        self.assertIn(expected, output)\n\n    @mock.patch(\"builtins.open\", return_value=mock.Mock())\n    @mock.patch(\"json.load\", return_value={\"url\": \"example.com\"})\n    @mock.patch(\"updateHostsFile.recursive_glob\", return_value=[\"foo\"])\n    @mock.patch(\"updateHostsFile.write_data\", return_value=0)\n    @mock.patch(\"updateHostsFile.get_file_by_url\", return_value=Exception(\"fail\"))\n    def test_source_fail(self, mock_get, mock_write, *_):\n        update_all_sources(self.source_data_filename, self.host_filename)\n        mock_write.assert_not_called()\n        self.assert_called_once(mock_get)\n\n        output = sys.stdout.getvalue()\n        expecteds = [\n            \"Updating source  from example.com\",\n            \"Error in updating source:  example.com\",\n        ]\n        for expected in expecteds:\n            self.assertIn(expected, output)\n\n    @mock.patch(\"builtins.open\", return_value=mock.Mock())\n    @mock.patch(\n        \"json.load\", side_effect=[{\"url\": \"example.com\"}, {\"url\": \"example2.com\"}]\n    )\n    @mock.patch(\"updateHostsFile.recursive_glob\", return_value=[\"foo\", \"bar\"])\n    @mock.patch(\"updateHostsFile.write_data\", return_value=0)\n    @mock.patch(\n        \"updateHostsFile.get_file_by_url\", side_effect=[Exception(\"fail\"), \"file_data\"]\n    )\n    def test_sources_fail_succeed(self, mock_get, mock_write, *_):\n        update_all_sources(self.source_data_filename, self.host_filename)\n        self.assert_called_once(mock_write)\n\n        get_calls = [mock.call(\"example.com\"), mock.call(\"example2.com\")]\n        mock_get.assert_has_calls(get_calls)\n\n        output = sys.stdout.getvalue()\n        expecteds = [\n            \"Updating source  from example.com\",\n            \"Error in updating source:  example.com\",\n            \"Updating source  from example2.com\",\n        ]\n        for expected in expecteds:\n            self.assertIn(expected, output)\n\n\n# End Update Logic\n\n\n# File Logic\nclass TestNormalizeRule(BaseStdout):\n    def test_no_match(self):\n        kwargs = dict(target_ip=\"0.0.0.0\", keep_domain_comments=False)\n\n        # Note: \"Bare\"- Domains are accepted. IP are excluded.\n        for rule in [\n            \"128.0.0.1\",\n            \"::1\",\n            \"0.0.0.0 128.0.0.2\",\n            \"0.1.2.3 foo/bar\",\n            \"0.3.4.5 example.org/hello/world\",\n            \"0.0.0.0 https\",\n            \"0.0.0.0 https..\",\n            \"0.0.0.0 foo.\",\n        ]:\n            self.assertEqual(normalize_rule(rule, **kwargs), (None, None))\n\n            output = sys.stdout.getvalue()\n            sys.stdout = StringIO()\n\n            expected = \"==>\" + rule + \"<==\"\n            self.assertIn(expected, output)\n\n    def test_mixed_cases(self):\n        for rule, expected_target in (\n            (\"tWiTTer.cOM\", \"twitter.com\"),\n            (\"goOgLe.Com\", \"google.com\"),\n            (\"FoO.bAR.edu\", \"foo.bar.edu\"),\n        ):\n            expected = (expected_target, \"0.0.0.0 \" + expected_target + \"\\n\")\n\n            actual = normalize_rule(\n                rule, target_ip=\"0.0.0.0\", keep_domain_comments=False\n            )\n            self.assertEqual(actual, expected)\n\n            # Nothing gets printed if there's a match.\n            output = sys.stdout.getvalue()\n            self.assertEqual(output, \"\")\n\n            sys.stdout = StringIO()\n\n    def test_no_comments(self):\n        for target_ip in (\"0.0.0.0\", \"127.0.0.1\", \"8.8.8.8\"):\n            rule = \"127.0.0.1 1.google.com foo\"\n            expected = (\"1.google.com\", str(target_ip) + \" 1.google.com\\n\")\n\n            actual = normalize_rule(\n                rule, target_ip=target_ip, keep_domain_comments=False\n            )\n            self.assertEqual(actual, expected)\n\n            # Nothing gets printed if there's a match.\n            output = sys.stdout.getvalue()\n            self.assertEqual(output, \"\")\n\n            sys.stdout = StringIO()\n\n    def test_with_comments(self):\n        for target_ip in (\"0.0.0.0\", \"127.0.0.1\", \"8.8.8.8\"):\n            for comment in (\"foo\", \"bar\", \"baz\"):\n                rule = \"127.0.0.1 1.google.co.uk \" + comment\n                expected = (\n                    \"1.google.co.uk\",\n                    (str(target_ip) + \" 1.google.co.uk # \" + comment + \"\\n\"),\n                )\n\n                actual = normalize_rule(\n                    rule, target_ip=target_ip, keep_domain_comments=True\n                )\n                self.assertEqual(actual, expected)\n\n                # Nothing gets printed if there's a match.\n                output = sys.stdout.getvalue()\n                self.assertEqual(output, \"\")\n\n                sys.stdout = StringIO()\n\n    def test_two_ips(self):\n        for target_ip in (\"0.0.0.0\", \"127.0.0.1\", \"8.8.8.8\"):\n            rule = \"127.0.0.1 11.22.33.44 foo\"\n\n            actual = normalize_rule(\n                rule, target_ip=target_ip, keep_domain_comments=False\n            )\n            self.assertEqual(actual, (None, None))\n\n            output = sys.stdout.getvalue()\n\n            expected = \"==>\" + rule + \"<==\"\n            self.assertIn(expected, output)\n\n            sys.stdout = StringIO()\n\n    def test_no_comment_raw(self):\n        for rule in (\n            \"twitter.com\",\n            \"google.com\",\n            \"foo.bar.edu\",\n            \"www.example-foo.bar.edu\",\n            \"www.example-3045.foobar.com\",\n            \"www.example.xn--p1ai\"\n        ):\n            expected = (rule, \"0.0.0.0 \" + rule + \"\\n\")\n\n            actual = normalize_rule(\n                rule, target_ip=\"0.0.0.0\", keep_domain_comments=False\n            )\n            self.assertEqual(actual, expected)\n\n            # Nothing gets printed if there's a match.\n            output = sys.stdout.getvalue()\n            self.assertEqual(output, \"\")\n\n            sys.stdout = StringIO()\n\n    def test_with_comments_raw(self):\n        for target_ip in (\"0.0.0.0\", \"127.0.0.1\", \"8.8.8.8\"):\n            for comment in (\"foo\", \"bar\", \"baz\"):\n                rule = \"1.google.co.uk \" + comment\n                expected = (\n                    \"1.google.co.uk\",\n                    (str(target_ip) + \" 1.google.co.uk # \" + comment + \"\\n\"),\n                )\n\n                actual = normalize_rule(\n                    rule, target_ip=target_ip, keep_domain_comments=True\n                )\n                self.assertEqual(actual, expected)\n\n                # Nothing gets printed if there's a match.\n                output = sys.stdout.getvalue()\n                self.assertEqual(output, \"\")\n\n                sys.stdout = StringIO()\n\n\nclass TestStripRule(Base):\n    def test_strip_exactly_two(self):\n        for line in [\n            \"0.0.0.0 twitter.com\",\n            \"127.0.0.1 facebook.com\",\n            \"8.8.8.8 google.com\",\n            \"1.2.3.4 foo.bar.edu\",\n        ]:\n            output = strip_rule(line)\n            self.assertEqual(output, line)\n\n    def test_strip_more_than_two(self):\n        comment = \" # comments here galore\"\n\n        for line in [\n            \"0.0.0.0 twitter.com\",\n            \"127.0.0.1 facebook.com\",\n            \"8.8.8.8 google.com\",\n            \"1.2.3.4 foo.bar.edu\",\n        ]:\n            output = strip_rule(line + comment)\n            self.assertEqual(output, line + comment)\n\n    def test_strip_raw(self):\n        for line in [\n            \"twitter.com\",\n            \"facebook.com\",\n            \"google.com\",\n            \"foo.bar.edu\",\n        ]:\n            output = strip_rule(line)\n            self.assertEqual(output, line)\n\n    def test_strip_raw_with_comment(self):\n        comment = \" # comments here galore\"\n\n        for line in [\n            \"twitter.com\",\n            \"facebook.com\",\n            \"google.com\",\n            \"foo.bar.edu\",\n        ]:\n            output = strip_rule(line + comment)\n            self.assertEqual(output, line + comment)\n\n\nclass TestWriteOpeningHeader(BaseMockDir):\n    def setUp(self):\n        super(TestWriteOpeningHeader, self).setUp()\n        self.final_file = BytesIO()\n\n    def test_missing_keyword(self):\n        kwargs = dict(\n            extensions=\"\", outputsubfolder=\"\", numberofrules=5, skipstatichosts=False, nounifiedhosts=False\n        )\n\n        for k in kwargs.keys():\n            bad_kwargs = kwargs.copy()\n            bad_kwargs.pop(k)\n\n            self.assertRaises(\n                KeyError, write_opening_header, self.final_file, **bad_kwargs\n            )\n\n    def test_basic(self):\n        kwargs = dict(\n            extensions=\"\", outputsubfolder=\"\", numberofrules=5, skipstatichosts=True, nounifiedhosts=False\n        )\n        write_opening_header(self.final_file, **kwargs)\n\n        contents = self.final_file.getvalue()\n        contents = contents.decode(\"UTF-8\")\n\n        # Expected contents.\n        for expected in (\n            \"# This hosts file is a merged collection\",\n            \"# with a dash of crowd sourcing via GitHub\",\n            \"# Number of unique domains: {count}\".format(count=kwargs[\"numberofrules\"]),\n            \"Fetch the latest version of this file:\",\n            \"Project home page: https://github.com/StevenBlack/hosts\",\n        ):\n            self.assertIn(expected, contents)\n\n        # Expected non-contents.\n        for expected in (\n            \"# Extensions added to this file:\",\n            \"127.0.0.1 localhost\",\n            \"127.0.0.1 local\",\n            \"127.0.0.53\",\n            \"127.0.1.1\",\n        ):\n            self.assertNotIn(expected, contents)\n\n    def test_basic_include_static_hosts(self):\n        kwargs = dict(\n            extensions=\"\", outputsubfolder=\"\", numberofrules=5, skipstatichosts=False, nounifiedhosts=False\n        )\n        with self.mock_property(\"platform.system\") as obj:\n            obj.return_value = \"Windows\"\n            write_opening_header(self.final_file, **kwargs)\n\n        contents = self.final_file.getvalue()\n        contents = contents.decode(\"UTF-8\")\n\n        # Expected contents.\n        for expected in (\n            \"127.0.0.1 local\",\n            \"127.0.0.1 localhost\",\n            \"# This hosts file is a merged collection\",\n            \"# with a dash of crowd sourcing via GitHub\",\n            \"# Number of unique domains: {count}\".format(count=kwargs[\"numberofrules\"]),\n            \"Fetch the latest version of this file:\",\n            \"Project home page: https://github.com/StevenBlack/hosts\",\n        ):\n            self.assertIn(expected, contents)\n\n        # Expected non-contents.\n        for expected in (\"# Extensions added to this file:\", \"127.0.0.53\", \"127.0.1.1\"):\n            self.assertNotIn(expected, contents)\n\n    def test_basic_include_static_hosts_linux(self):\n        kwargs = dict(\n            extensions=\"\", outputsubfolder=\"\", numberofrules=5, skipstatichosts=False, nounifiedhosts=False\n        )\n        with self.mock_property(\"platform.system\") as system:\n            system.return_value = \"Linux\"\n\n            with self.mock_property(\"socket.gethostname\") as hostname:\n                hostname.return_value = \"steven-hosts\"\n                write_opening_header(self.final_file, **kwargs)\n\n        contents = self.final_file.getvalue()\n        contents = contents.decode(\"UTF-8\")\n\n        # Expected contents.\n        for expected in (\n            \"127.0.1.1\",\n            \"127.0.0.53\",\n            \"steven-hosts\",\n            \"127.0.0.1 local\",\n            \"127.0.0.1 localhost\",\n            \"# This hosts file is a merged collection\",\n            \"# with a dash of crowd sourcing via GitHub\",\n            \"# Number of unique domains: {count}\".format(count=kwargs[\"numberofrules\"]),\n            \"Fetch the latest version of this file:\",\n            \"Project home page: https://github.com/StevenBlack/hosts\",\n        ):\n            self.assertIn(expected, contents)\n\n        # Expected non-contents.\n        expected = \"# Extensions added to this file:\"\n        self.assertNotIn(expected, contents)\n\n    def test_extensions(self):\n        kwargs = dict(\n            extensions=[\"epsilon\", \"gamma\", \"mu\", \"phi\"],\n            outputsubfolder=\"\",\n            numberofrules=5,\n            skipstatichosts=True,\n            nounifiedhosts=False,\n        )\n        write_opening_header(self.final_file, **kwargs)\n\n        contents = self.final_file.getvalue()\n        contents = contents.decode(\"UTF-8\")\n\n        # Expected contents.\n        for expected in (\n            \", \".join(kwargs[\"extensions\"]),\n            \"# Extensions added to this file:\",\n            \"# This hosts file is a merged collection\",\n            \"# with a dash of crowd sourcing via GitHub\",\n            \"# Number of unique domains: {count}\".format(count=kwargs[\"numberofrules\"]),\n            \"Fetch the latest version of this file:\",\n            \"Project home page: https://github.com/StevenBlack/hosts\",\n        ):\n            self.assertIn(expected, contents)\n\n        # Expected non-contents.\n        for expected in (\n            \"127.0.0.1 localhost\",\n            \"127.0.0.1 local\",\n            \"127.0.0.53\",\n            \"127.0.1.1\",\n        ):\n            self.assertNotIn(expected, contents)\n\n    def test_no_unified_hosts(self):\n        kwargs = dict(\n            extensions=[\"epsilon\", \"gamma\"],\n            outputsubfolder=\"\",\n            numberofrules=5,\n            skipstatichosts=True,\n            nounifiedhosts=True,\n        )\n        write_opening_header(self.final_file, **kwargs)\n\n        contents = self.final_file.getvalue()\n        contents = contents.decode(\"UTF-8\")\n\n        # Expected contents.\n        for expected in (\n            \", \".join(kwargs[\"extensions\"]),\n            \"# The unified hosts file was not used while generating this file.\",\n            \"# Extensions used to generate this file:\",\n            \"# This hosts file is a merged collection\",\n            \"# with a dash of crowd sourcing via GitHub\",\n            \"# Number of unique domains: {count}\".format(count=kwargs[\"numberofrules\"]),\n            \"Fetch the latest version of this file:\",\n            \"Project home page: https://github.com/StevenBlack/hosts\",\n        ):\n            self.assertIn(expected, contents)\n\n        # Expected non-contents.\n        for expected in (\n            \"127.0.0.1 localhost\",\n            \"127.0.0.1 local\",\n            \"127.0.0.53\",\n            \"127.0.1.1\",\n        ):\n            self.assertNotIn(expected, contents)\n\n    def _check_preamble(self, check_copy):\n        hosts_file = os.path.join(self.test_dir, \"myhosts\")\n        hosts_file += \".example\" if check_copy else \"\"\n\n        with open(hosts_file, \"w\") as f:\n            f.write(\"peter-piper-picked-a-pepper\")\n\n        kwargs = dict(\n            extensions=\"\", outputsubfolder=\"\", numberofrules=5, skipstatichosts=True, nounifiedhosts=False\n        )\n\n        with self.mock_property(\"updateHostsFile.BASEDIR_PATH\"):\n            updateHostsFile.BASEDIR_PATH = self.test_dir\n            write_opening_header(self.final_file, **kwargs)\n\n        contents = self.final_file.getvalue()\n        contents = contents.decode(\"UTF-8\")\n\n        # Expected contents.\n        for expected in (\n            \"peter-piper-picked-a-pepper\",\n            \"# This hosts file is a merged collection\",\n            \"# with a dash of crowd sourcing via GitHub\",\n            \"# Number of unique domains: {count}\".format(count=kwargs[\"numberofrules\"]),\n            \"Fetch the latest version of this file:\",\n            \"Project home page: https://github.com/StevenBlack/hosts\",\n        ):\n            self.assertIn(expected, contents)\n\n        # Expected non-contents.\n        for expected in (\n            \"# Extensions added to this file:\",\n            \"127.0.0.1 localhost\",\n            \"127.0.0.1 local\",\n            \"127.0.0.53\",\n            \"127.0.1.1\",\n        ):\n            self.assertNotIn(expected, contents)\n\n    def test_preamble_exists(self):\n        self._check_preamble(True)\n\n    def test_preamble_copy(self):\n        self._check_preamble(False)\n\n    def tearDown(self):\n        super(TestWriteOpeningHeader, self).tearDown()\n        self.final_file.close()\n\n\nclass TestUpdateReadmeData(BaseMockDir):\n    def setUp(self):\n        super(TestUpdateReadmeData, self).setUp()\n        self.readme_file = os.path.join(self.test_dir, \"readmeData.json\")\n\n    def test_missing_keyword(self):\n        kwargs = dict(\n            extensions=\"\", outputsubfolder=\"\", numberofrules=\"\", sourcesdata=\"\", nounifiedhosts=False\n        )\n\n        for k in kwargs.keys():\n            bad_kwargs = kwargs.copy()\n            bad_kwargs.pop(k)\n\n            self.assertRaises(\n                KeyError, update_readme_data, self.readme_file, **bad_kwargs\n            )\n\n    def test_add_fields(self):\n        with open(self.readme_file, \"w\") as f:\n            json.dump({\"foo\": \"bar\"}, f)\n\n        kwargs = dict(\n            extensions=None, outputsubfolder=\"foo\", numberofrules=5, sourcesdata=\"hosts\", nounifiedhosts=False\n        )\n        update_readme_data(self.readme_file, **kwargs)\n\n        if platform.system().lower() == \"windows\":\n            sep = \"/\"\n        else:\n            sep = self.sep\n\n        expected = {\n            \"base\": {\"location\": \"foo\" + sep, 'no_unified_hosts': False, \"sourcesdata\": \"hosts\", \"entries\": 5},\n            \"foo\": \"bar\",\n        }\n\n        with open(self.readme_file, \"r\") as f:\n            actual = json.load(f)\n            self.assertEqual(actual, expected)\n\n    def test_modify_fields(self):\n        with open(self.readme_file, \"w\") as f:\n            json.dump({\"base\": \"soprano\"}, f)\n\n        kwargs = dict(\n            extensions=None, outputsubfolder=\"foo\", numberofrules=5, sourcesdata=\"hosts\", nounifiedhosts=False\n        )\n        update_readme_data(self.readme_file, **kwargs)\n\n        if platform.system().lower() == \"windows\":\n            sep = \"/\"\n        else:\n            sep = self.sep\n\n        expected = {\n            \"base\": {\"location\": \"foo\" + sep, 'no_unified_hosts': False, \"sourcesdata\": \"hosts\", \"entries\": 5},\n        }\n\n        with open(self.readme_file, \"r\") as f:\n            actual = json.load(f)\n            self.assertEqual(actual, expected)\n\n    def test_set_extensions(self):\n        with open(self.readme_file, \"w\") as f:\n            json.dump({}, f)\n\n        kwargs = dict(\n            extensions=[\"com\", \"org\"],\n            outputsubfolder=\"foo\",\n            numberofrules=5,\n            sourcesdata=\"hosts\",\n            nounifiedhosts=False,\n        )\n        update_readme_data(self.readme_file, **kwargs)\n\n        if platform.system().lower() == \"windows\":\n            sep = \"/\"\n        else:\n            sep = self.sep\n\n        expected = {\n            \"com-org\": {\"location\": \"foo\" + sep, 'no_unified_hosts': False, \"sourcesdata\": \"hosts\", \"entries\": 5}\n        }\n\n        with open(self.readme_file, \"r\") as f:\n            actual = json.load(f)\n            self.assertEqual(actual, expected)\n\n    def test_set_no_unified_hosts(self):\n        with open(self.readme_file, \"w\") as f:\n            json.dump({}, f)\n\n        kwargs = dict(\n            extensions=[\"com\", \"org\"],\n            outputsubfolder=\"foo\",\n            numberofrules=5,\n            sourcesdata=\"hosts\",\n            nounifiedhosts=True,\n        )\n        update_readme_data(self.readme_file, **kwargs)\n\n        if platform.system().lower() == \"windows\":\n            sep = \"/\"\n        else:\n            sep = self.sep\n\n        expected = {\n            \"com-org-only\": {\"location\": \"foo\" + sep, 'no_unified_hosts': True, \"sourcesdata\": \"hosts\", \"entries\": 5}\n        }\n\n        with open(self.readme_file, \"r\") as f:\n            actual = json.load(f)\n            self.assertEqual(actual, expected)\n\n\nclass TestMoveHostsFile(BaseStdout):\n    @mock.patch(\"os.path.abspath\", side_effect=lambda f: f)\n    def test_move_hosts_no_name(self, _):  # TODO: Create test which tries to move actual file\n        with self.mock_property(\"platform.system\") as obj:\n            obj.return_value = \"foo\"\n\n            mock_file = mock.Mock(name=\"foo\")\n            move_hosts_file_into_place(mock_file)\n\n            expected = \"does not exist\"\n            output = sys.stdout.getvalue()\n\n            self.assertIn(expected, output)\n\n    @mock.patch(\"os.path.abspath\", side_effect=lambda f: f)\n    def test_move_hosts_windows(self, _):\n        with self.mock_property(\"platform.system\") as obj:\n            obj.return_value = \"Windows\"\n\n            mock_file = mock.Mock(name=\"foo\")\n            move_hosts_file_into_place(mock_file)\n\n            expected = \"\"\n            output = sys.stdout.getvalue()\n            self.assertIn(expected, output)\n\n    @mock.patch(\"os.path.abspath\", side_effect=lambda f: f)\n    @mock.patch(\"subprocess.call\", return_value=0)\n    def test_move_hosts_posix(self, *_):  # TODO: create test which tries to move an actual file\n        with self.mock_property(\"platform.system\") as obj:\n            obj.return_value = \"Linux\"\n\n            mock_file = mock.Mock(name=\"foo\")\n            move_hosts_file_into_place(mock_file)\n\n            expected = \"does not exist.\"\n            output = sys.stdout.getvalue()\n            self.assertIn(expected, output)\n\n    @mock.patch(\"os.path.abspath\", side_effect=lambda f: f)\n    @mock.patch(\"subprocess.call\", return_value=1)\n    def test_move_hosts_posix_fail(self, *_):\n        with self.mock_property(\"platform.system\") as obj:\n            obj.return_value = \"Linux\"\n\n            mock_file = mock.Mock(name=\"foo\")\n            move_hosts_file_into_place(mock_file)\n\n            expected = \"does not exist.\"\n            output = sys.stdout.getvalue()\n            self.assertIn(expected, output)\n\n\nclass TestFlushDnsCache(BaseStdout):\n    @mock.patch(\"subprocess.call\", return_value=0)\n    def test_flush_darwin(self, _):\n        with self.mock_property(\"platform.system\") as obj:\n            obj.return_value = \"Darwin\"\n            flush_dns_cache()\n\n            expected = (\n                \"Flushing the DNS cache to utilize new hosts \"\n                \"file...\\nFlushing the DNS cache requires \"\n                \"administrative privileges. You might need to \"\n                \"enter your password.\"\n            )\n            output = sys.stdout.getvalue()\n            self.assertIn(expected, output)\n\n    @mock.patch(\"subprocess.call\", return_value=1)\n    def test_flush_darwin_fail(self, _):\n        with self.mock_property(\"platform.system\") as obj:\n            obj.return_value = \"Darwin\"\n            flush_dns_cache()\n\n            expected = \"Flushing the DNS cache failed.\"\n            output = sys.stdout.getvalue()\n            self.assertIn(expected, output)\n\n    def test_flush_windows(self):\n        with self.mock_property(\"platform.system\") as obj:\n            obj.return_value = \"win32\"\n\n            with self.mock_property(\"os.name\"):\n                os.name = \"nt\"\n                flush_dns_cache()\n\n                expected = (\n                    \"Automatically flushing the DNS cache is \"\n                    \"not yet supported.\\nPlease copy and paste \"\n                    \"the command 'ipconfig /flushdns' in \"\n                    \"administrator command prompt after running \"\n                    \"this script.\"\n                )\n                output = sys.stdout.getvalue()\n                self.assertIn(expected, output)\n\n    @mock.patch(\"os.path.isfile\", return_value=False)\n    def test_flush_no_tool(self, _):\n        with self.mock_property(\"platform.system\") as obj:\n            obj.return_value = \"Linux\"\n\n            with self.mock_property(\"os.name\"):\n                os.name = \"posix\"\n                flush_dns_cache()\n\n                expected = \"Unable to determine DNS management tool.\"\n                output = sys.stdout.getvalue()\n                self.assertIn(expected, output)\n\n    @mock.patch(\"os.path.isfile\", side_effect=[True] + [False] * 11)\n    @mock.patch(\"subprocess.call\", return_value=0)\n    def test_flush_posix(self, *_):\n        with self.mock_property(\"platform.system\") as obj:\n            obj.return_value = \"Linux\"\n\n            with self.mock_property(\"os.name\"):\n                os.name = \"posix\"\n                flush_dns_cache()\n\n                expected = \"Flushing the DNS cache by restarting nscd succeeded\"\n                output = sys.stdout.getvalue()\n                self.assertIn(expected, output)\n\n    @mock.patch(\"os.path.isfile\", side_effect=[True] + [False] * 11)\n    @mock.patch(\"subprocess.call\", return_value=1)\n    def test_flush_posix_fail(self, *_):\n        with self.mock_property(\"platform.system\") as obj:\n            obj.return_value = \"Linux\"\n\n            with self.mock_property(\"os.name\"):\n                os.name = \"posix\"\n                flush_dns_cache()\n\n                expected = \"Flushing the DNS cache by restarting nscd failed\"\n                output = sys.stdout.getvalue()\n                self.assertIn(expected, output)\n\n    @mock.patch(\"os.path.isfile\", side_effect=[True, False, False, True] + [False] * 10)\n    @mock.patch(\"subprocess.call\", side_effect=[1, 0, 0])\n    def test_flush_posix_fail_then_succeed(self, *_):\n        with self.mock_property(\"platform.system\") as obj:\n            obj.return_value = \"Linux\"\n\n            with self.mock_property(\"os.name\"):\n                os.name = \"posix\"\n                flush_dns_cache()\n\n                output = sys.stdout.getvalue()\n                for expected in [\n                    (\"Flushing the DNS cache by restarting nscd failed\"),\n                    (\n                        \"Flushing the DNS cache by restarting \"\n                        \"NetworkManager.service succeeded\"\n                    ),\n                ]:\n                    self.assertIn(expected, output)\n\n\nclass TestRemoveOldHostsFile(BaseMockDir):\n    def setUp(self):\n        super(TestRemoveOldHostsFile, self).setUp()\n        self.hosts_file = \"hosts\"\n        self.full_hosts_path = os.path.join(self.test_dir, \"hosts\")\n\n    def test_remove_hosts_file(self):\n        old_dir_count = self.dir_count\n\n        remove_old_hosts_file(self.test_dir, self.hosts_file, backup=False)\n\n        new_dir_count = old_dir_count + 1\n        self.assertEqual(self.dir_count, new_dir_count)\n\n        with open(self.full_hosts_path, \"r\") as f:\n            contents = f.read()\n            self.assertEqual(contents, \"\")\n\n    def test_remove_hosts_file_exists(self):\n        with open(self.full_hosts_path, \"w\") as f:\n            f.write(\"foo\")\n\n        old_dir_count = self.dir_count\n\n        remove_old_hosts_file(self.test_dir, self.hosts_file, backup=False)\n\n        new_dir_count = old_dir_count\n        self.assertEqual(self.dir_count, new_dir_count)\n\n        with open(self.full_hosts_path, \"r\") as f:\n            contents = f.read()\n            self.assertEqual(contents, \"\")\n\n    @mock.patch(\"time.strftime\", return_value=\"new\")\n    def test_remove_hosts_file_backup(self, _):\n        with open(self.full_hosts_path, \"w\") as f:\n            f.write(\"foo\")\n\n        old_dir_count = self.dir_count\n\n        remove_old_hosts_file(self.test_dir, self.hosts_file, backup=True)\n\n        new_dir_count = old_dir_count + 1\n        self.assertEqual(self.dir_count, new_dir_count)\n\n        with open(self.full_hosts_path, \"r\") as f:\n            contents = f.read()\n            self.assertEqual(contents, \"\")\n\n        new_hosts_file = self.full_hosts_path + \"-new\"\n\n        with open(new_hosts_file, \"r\") as f:\n            contents = f.read()\n            self.assertEqual(contents, \"foo\")\n\n\n# End File Logic\n\n\nclass DomainToIDNA(Base):\n    def __init__(self, *args, **kwargs):\n        super(DomainToIDNA, self).__init__(*args, **kwargs)\n\n        self.domains = [b\"\\xc9\\xa2oogle.com\", b\"www.huala\\xc3\\xb1e.cl\"]\n        self.expected_domains = [\"xn--oogle-wmc.com\", \"www.xn--hualae-0wa.cl\"]\n\n    def test_empty_line(self):\n        data = [\"\", \"\\r\", \"\\n\"]\n\n        for empty in data:\n            expected = empty\n\n            actual = domain_to_idna(empty)\n            self.assertEqual(actual, expected)\n\n    def test_commented_line(self):\n        data = \"# Hello World\"\n        expected = data\n        actual = domain_to_idna(data)\n\n        self.assertEqual(actual, expected)\n\n    def test_simple_line(self):\n        # Test with a space as separator.\n        for i in range(len(self.domains)):\n            data = (b\"0.0.0.0 \" + self.domains[i]).decode(\"utf-8\")\n            expected = \"0.0.0.0 \" + self.expected_domains[i]\n\n            actual = domain_to_idna(data)\n\n            self.assertEqual(actual, expected)\n\n        # Test with a tabulation as separator.\n        for i in range(len(self.domains)):\n            data = (b\"0.0.0.0\\t\" + self.domains[i]).decode(\"utf-8\")\n            expected = \"0.0.0.0\\t\" + self.expected_domains[i]\n\n            actual = domain_to_idna(data)\n\n            self.assertEqual(actual, expected)\n\n    def test_multiple_space_as_separator(self):\n        # Test with multiple space as separator.\n        for i in range(len(self.domains)):\n            data = (b\"0.0.0.0      \" + self.domains[i]).decode(\"utf-8\")\n            expected = \"0.0.0.0      \" + self.expected_domains[i]\n\n            actual = domain_to_idna(data)\n\n            self.assertEqual(actual, expected)\n\n    def test_multiple_tabs_as_separator(self):\n        # Test with multiple tabls as separator.\n        for i in range(len(self.domains)):\n            data = (b\"0.0.0.0\\t\\t\\t\\t\\t\\t\" + self.domains[i]).decode(\"utf-8\")\n            expected = \"0.0.0.0\\t\\t\\t\\t\\t\\t\" + self.expected_domains[i]\n\n            actual = domain_to_idna(data)\n\n            self.assertEqual(actual, expected)\n\n    def test_line_with_comment_at_the_end(self):\n        # Test with a space as separator.\n        for i in range(len(self.domains)):\n            data = (b\"0.0.0.0 \" + self.domains[i] + b\" # Hello World\").decode(\"utf-8\")\n            expected = \"0.0.0.0 \" + self.expected_domains[i] + \" # Hello World\"\n\n            actual = domain_to_idna(data)\n\n            self.assertEqual(actual, expected)\n\n        # Test with a tabulation as separator.\n        for i in range(len(self.domains)):\n            data = (b\"0.0.0.0\\t\" + self.domains[i] + b\" # Hello World\").decode(\"utf-8\")\n            expected = \"0.0.0.0\\t\" + self.expected_domains[i] + \" # Hello World\"\n\n            actual = domain_to_idna(data)\n\n            self.assertEqual(actual, expected)\n\n        # Test with tabulation as separator of domain and comment.\n        for i in range(len(self.domains)):\n            data = (b\"0.0.0.0\\t\" + self.domains[i] + b\"\\t # Hello World\").decode(\n                \"utf-8\"\n            )\n            expected = \"0.0.0.0\\t\" + self.expected_domains[i] + \"\\t # Hello World\"\n\n            actual = domain_to_idna(data)\n\n            self.assertEqual(actual, expected)\n\n        # Test with space as separator of domain and tabulation as separator\n        # of comments.\n        for i in range(len(self.domains)):\n            data = (b\"0.0.0.0 \" + self.domains[i] + b\"  \\t # Hello World\").decode(\n                \"utf-8\"\n            )\n            expected = \"0.0.0.0 \" + self.expected_domains[i] + \"  \\t # Hello World\"\n\n            actual = domain_to_idna(data)\n\n            self.assertEqual(actual, expected)\n\n        # Test with multiple space as separator of domain and space and\n        # tabulation as separator or comments.\n        for i in range(len(self.domains)):\n            data = (b\"0.0.0.0     \" + self.domains[i] + b\" \\t # Hello World\").decode(\n                \"utf-8\"\n            )\n            expected = \"0.0.0.0     \" + self.expected_domains[i] + \" \\t # Hello World\"\n\n            actual = domain_to_idna(data)\n\n            self.assertEqual(actual, expected)\n\n        # Test with multiple tabulations as separator of domain and space and\n        # tabulation as separator or comments.\n        for i, domain in enumerate(self.domains):\n            data = (b\"0.0.0.0\\t\\t\\t\" + domain + b\" \\t # Hello World\").decode(\n                \"utf-8\"\n            )\n            expected = \"0.0.0.0\\t\\t\\t\" + self.expected_domains[i] + \" \\t # Hello World\"\n\n            actual = domain_to_idna(data)\n\n            self.assertEqual(actual, expected)\n\n    def test_line_without_prefix(self):\n        for i in range(len(self.domains)):\n            data = self.domains[i].decode(\"utf-8\")\n            expected = self.expected_domains[i]\n\n            actual = domain_to_idna(data)\n\n            self.assertEqual(actual, expected)\n\n\nclass GetFileByUrl(BaseStdout):\n    def test_basic(self):\n        raw_resp_content = \"hello, \".encode(\"ascii\") + \"world\".encode(\"utf-8\")\n        resp_obj = requests.Response()\n        resp_obj.__setstate__({\"_content\": raw_resp_content})\n\n        expected = \"hello, world\"\n\n        with mock.patch(\"requests.get\", return_value=resp_obj):\n            actual = get_file_by_url(\"www.test-url.com\")\n\n        self.assertEqual(expected, actual)\n\n    def test_with_idna(self):\n        raw_resp_content = b\"www.huala\\xc3\\xb1e.cl\"\n        resp_obj = requests.Response()\n        resp_obj.__setstate__({\"_content\": raw_resp_content})\n\n        expected = \"www.xn--hualae-0wa.cl\"\n\n        with mock.patch(\"requests.get\", return_value=resp_obj):\n            actual = get_file_by_url(\"www.test-url.com\")\n\n        self.assertEqual(expected, actual)\n\n    def test_connect_unknown_domain(self):\n        test_url = (\n            \"http://doesnotexist.google.com\"  # leads to exception: ConnectionError\n        )\n        with mock.patch(\n            \"requests.get\", side_effect=requests.exceptions.ConnectionError\n        ):\n            return_value = get_file_by_url(test_url)\n        self.assertIsNone(return_value)\n        printed_output = sys.stdout.getvalue()\n        self.assertEqual(\n            printed_output, \"Error retrieving data from {}\\n\".format(test_url)\n        )\n\n    def test_invalid_url(self):\n        test_url = \"http://fe80::5054:ff:fe5a:fc0\"  # leads to exception: InvalidURL\n        with mock.patch(\n            \"requests.get\", side_effect=requests.exceptions.ConnectionError\n        ):\n            return_value = get_file_by_url(test_url)\n        self.assertIsNone(return_value)\n        printed_output = sys.stdout.getvalue()\n        self.assertEqual(\n            printed_output, \"Error retrieving data from {}\\n\".format(test_url)\n        )\n\n\nclass TestWriteData(Base):\n    def test_write_basic(self):\n        f = BytesIO()\n\n        data = \"foo\"\n        write_data(f, data)\n\n        expected = b\"foo\"\n        actual = f.getvalue()\n\n        self.assertEqual(actual, expected)\n\n    def test_write_unicode(self):\n        f = BytesIO()\n\n        data = u\"foo\"\n        write_data(f, data)\n\n        expected = b\"foo\"\n        actual = f.getvalue()\n\n        self.assertEqual(actual, expected)\n\n\nclass TestQueryYesOrNo(BaseStdout):\n    def test_invalid_default(self):\n        for invalid_default in [\"foo\", \"bar\", \"baz\", 1, 2, 3]:\n            self.assertRaises(ValueError, query_yes_no, \"?\", invalid_default)\n\n    @mock.patch(\"updateHostsFile.input\", side_effect=[\"yes\"] * 3)\n    def test_valid_default(self, _):\n        for valid_default, expected in [\n            (None, \"[y/n]\"),\n            (\"yes\", \"[Y/n]\"),\n            (\"no\", \"[y/N]\"),\n        ]:\n            self.assertTrue(query_yes_no(\"?\", valid_default))\n\n            output = sys.stdout.getvalue()\n            sys.stdout = StringIO()\n\n            self.assertIn(expected, output)\n\n    @mock.patch(\"updateHostsFile.input\", side_effect=([\"\"] * 2))\n    def test_use_valid_default(self, _):\n        for valid_default in [\"yes\", \"no\"]:\n            expected = valid_default == \"yes\"\n            actual = query_yes_no(\"?\", valid_default)\n\n            self.assertEqual(actual, expected)\n\n    @mock.patch(\"updateHostsFile.input\", side_effect=[\"no\", \"NO\", \"N\", \"n\", \"No\", \"nO\"])\n    def test_valid_no(self, _):\n        self.assertFalse(query_yes_no(\"?\", None))\n\n    @mock.patch(\n        \"updateHostsFile.input\",\n        side_effect=[\"yes\", \"YES\", \"Y\", \"yeS\", \"y\", \"YeS\", \"yES\", \"YEs\"],\n    )\n    def test_valid_yes(self, _):\n        self.assertTrue(query_yes_no(\"?\", None))\n\n    @mock.patch(\"updateHostsFile.input\", side_effect=[\"foo\", \"yes\", \"foo\", \"no\"])\n    def test_invalid_then_valid(self, _):\n        expected = \"Please respond with 'yes' or 'no'\"\n\n        # The first time, we respond \"yes\"\n        self.assertTrue(query_yes_no(\"?\", None))\n\n        output = sys.stdout.getvalue()\n        self.assertIn(expected, output)\n\n        sys.stdout = StringIO()\n\n        # The second time, we respond \"no\"\n        self.assertFalse(query_yes_no(\"?\", None))\n\n        output = sys.stdout.getvalue()\n        self.assertIn(expected, output)\n\n\nclass TestIsValidUserProvidedDomainFormat(BaseStdout):\n    def test_empty_domain(self):\n        self.assertFalse(is_valid_user_provided_domain_format(\"\"))\n\n        output = sys.stdout.getvalue()\n        expected = \"You didn't enter a domain. Try again.\"\n\n        self.assertIn(expected, output)\n\n    def test_invalid_domain(self):\n        expected = \"Do not include www.domain.com or http(s)://domain.com. Try again.\"\n\n        for invalid_domain in [\n            \"www.subdomain.domain\",\n            \"https://github.com\",\n            \"http://www.google.com\",\n        ]:\n            self.assertFalse(is_valid_user_provided_domain_format(invalid_domain))\n\n            output = sys.stdout.getvalue()\n            sys.stdout = StringIO()\n\n            self.assertIn(expected, output)\n\n    def test_valid_domain(self):\n        for valid_domain in [\"github.com\", \"travis.org\", \"twitter.com\"]:\n            self.assertTrue(is_valid_user_provided_domain_format(valid_domain))\n\n            output = sys.stdout.getvalue()\n            sys.stdout = StringIO()\n\n            self.assertEqual(output, \"\")\n\n\ndef mock_walk(stem):\n    \"\"\"\n    Mock method for `os.walk`.\n\n    Please refer to the documentation of `os.walk` for information about\n    the provided parameters.\n    \"\"\"\n\n    files = [\n        \"foo.txt\",\n        \"bar.bat\",\n        \"baz.py\",\n        \"foo/foo.c\",\n        \"foo/bar.doc\",\n        \"foo/baz/foo.py\",\n        \"bar/foo/baz.c\",\n        \"bar/bar/foo.bat\",\n    ]\n\n    if stem == \".\":\n        stem = \"\"\n\n    matches = []\n\n    for f in files:\n        if not stem or f.startswith(stem + \"/\"):\n            matches.append((\"\", \"_\", [f]))\n\n    return matches\n\n\nclass TestRecursiveGlob(Base):\n    @staticmethod\n    def sorted_recursive_glob(stem, file_pattern):\n        actual = recursive_glob(stem, file_pattern)\n        actual.sort()\n\n        return actual\n\n    @mock.patch(\"os.walk\", side_effect=mock_walk)\n    def test_all_match(self, _):\n        with self.mock_property(\"sys.version_info\"):\n            sys.version_info = (2, 6)\n\n            expected = [\n                \"bar.bat\",\n                \"bar/bar/foo.bat\",\n                \"bar/foo/baz.c\",\n                \"baz.py\",\n                \"foo.txt\",\n                \"foo/bar.doc\",\n                \"foo/baz/foo.py\",\n                \"foo/foo.c\",\n            ]\n            actual = self.sorted_recursive_glob(\"*\", \"*\")\n            self.assertListEqual(actual, expected)\n\n            expected = [\"bar/bar/foo.bat\", \"bar/foo/baz.c\"]\n            actual = self.sorted_recursive_glob(\"bar\", \"*\")\n            self.assertListEqual(actual, expected)\n\n            expected = [\"foo/bar.doc\", \"foo/baz/foo.py\", \"foo/foo.c\"]\n            actual = self.sorted_recursive_glob(\"foo\", \"*\")\n            self.assertListEqual(actual, expected)\n\n    @mock.patch(\"os.walk\", side_effect=mock_walk)\n    def test_file_ending(self, _):\n        with self.mock_property(\"sys.version_info\"):\n            sys.version_info = (2, 6)\n\n            expected = [\"foo/baz/foo.py\"]\n            actual = self.sorted_recursive_glob(\"foo\", \"*.py\")\n            self.assertListEqual(actual, expected)\n\n            expected = [\"bar/foo/baz.c\", \"foo/foo.c\"]\n            actual = self.sorted_recursive_glob(\"*\", \"*.c\")\n            self.assertListEqual(actual, expected)\n\n            expected = []\n            actual = self.sorted_recursive_glob(\"*\", \".xlsx\")\n            self.assertListEqual(actual, expected)\n\n\ndef mock_path_join(*_):\n    \"\"\"\n    Mock method for `os.path.join`.\n\n    Please refer to the documentation of `os.path.join` for information about\n    the provided parameters.\n    \"\"\"\n\n    raise UnicodeDecodeError(\"foo\", b\"\", 1, 5, \"foo\")\n\n\nclass TestPathJoinRobust(Base):\n    def test_basic(self):\n        expected = \"path1\"\n        actual = path_join_robust(\"path1\")\n        self.assertEqual(actual, expected)\n\n        actual = path_join_robust(u\"path1\")\n        self.assertEqual(actual, expected)\n\n    def test_join(self):\n        for i in range(1, 4):\n            paths = [\"pathNew\"] * i\n            expected = \"path1\" + (self.sep + \"pathNew\") * i\n            actual = path_join_robust(\"path1\", *paths)\n\n            self.assertEqual(actual, expected)\n\n    def test_join_unicode(self):\n        for i in range(1, 4):\n            paths = [u\"pathNew\"] * i\n            expected = \"path1\" + (self.sep + \"pathNew\") * i\n            actual = path_join_robust(\"path1\", *paths)\n\n            self.assertEqual(actual, expected)\n\n    @mock.patch(\"os.path.join\", side_effect=mock_path_join)\n    def test_join_error(self, _):\n        self.assertRaises(locale.Error, path_join_robust, \"path\")\n\n\n# Colors\nclass TestSupportsColor(BaseStdout):\n    def test_posix(self):\n        with self.mock_property(\"sys.platform\"):\n            sys.platform = \"Linux\"\n\n            with self.mock_property(\"sys.stdout.isatty\") as obj:\n                obj.return_value = True\n                self.assertTrue(supports_color())\n\n    def test_pocket_pc(self):\n        with self.mock_property(\"sys.platform\"):\n            sys.platform = \"Pocket PC\"\n            self.assertFalse(supports_color())\n\n    def test_windows_no_ansicon(self):\n        with self.mock_property(\"sys.platform\"):\n            sys.platform = \"win32\"\n\n            with self.mock_property(\"os.environ\"):\n                os.environ = []\n\n                self.assertFalse(supports_color())\n\n    def test_windows_ansicon(self):\n        with self.mock_property(\"sys.platform\"):\n            sys.platform = \"win32\"\n\n            with self.mock_property(\"os.environ\"):\n                os.environ = [\"ANSICON\"]\n\n                with self.mock_property(\"sys.stdout.isatty\") as obj:\n                    obj.return_value = True\n                    self.assertTrue(supports_color())\n\n    def test_no_isatty_attribute(self):\n        with self.mock_property(\"sys.platform\"):\n            sys.platform = \"Linux\"\n\n            with self.mock_property(\"sys.stdout\"):\n                sys.stdout = list()\n                self.assertFalse(supports_color())\n\n    def test_no_isatty(self):\n        with self.mock_property(\"sys.platform\"):\n            sys.platform = \"Linux\"\n\n            with self.mock_property(\"sys.stdout.isatty\") as obj:\n                obj.return_value = False\n                self.assertFalse(supports_color())\n\n\nclass TestColorize(Base):\n    def setUp(self):\n        self.text = \"house\"\n        self.colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"]\n\n    @mock.patch(\"updateHostsFile.supports_color\", return_value=False)\n    def test_colorize_no_support(self, _):\n        for color in self.colors:\n            expected = self.text\n            actual = colorize(self.text, color)\n\n            self.assertEqual(actual, expected)\n\n    @mock.patch(\"updateHostsFile.supports_color\", return_value=True)\n    def test_colorize_support(self, _):\n        for color in self.colors:\n            expected = color + self.text + Colors.ENDC\n            actual = colorize(self.text, color)\n\n            self.assertEqual(actual, expected)\n\n\nclass TestPrintSuccess(BaseStdout):\n    def setUp(self):\n        super(TestPrintSuccess, self).setUp()\n        self.text = \"house\"\n\n    @mock.patch(\"updateHostsFile.supports_color\", return_value=False)\n    def test_print_success_no_support(self, _):\n        print_success(self.text)\n\n        expected = self.text + \"\\n\"\n        actual = sys.stdout.getvalue()\n\n        self.assertEqual(actual, expected)\n\n    @mock.patch(\"updateHostsFile.supports_color\", return_value=True)\n    def test_print_success_support(self, _):\n        print_success(self.text)\n\n        expected = Colors.SUCCESS + self.text + Colors.ENDC + \"\\n\"\n        actual = sys.stdout.getvalue()\n\n        self.assertEqual(actual, expected)\n\n\nclass TestPrintFailure(BaseStdout):\n    def setUp(self):\n        super(TestPrintFailure, self).setUp()\n        self.text = \"house\"\n\n    @mock.patch(\"updateHostsFile.supports_color\", return_value=False)\n    def test_print_failure_no_support(self, _):\n        print_failure(self.text)\n\n        expected = self.text + \"\\n\"\n        actual = sys.stdout.getvalue()\n\n        self.assertEqual(actual, expected)\n\n    @mock.patch(\"updateHostsFile.supports_color\", return_value=True)\n    def test_print_failure_support(self, _):\n        print_failure(self.text)\n\n        expected = Colors.FAIL + self.text + Colors.ENDC + \"\\n\"\n        actual = sys.stdout.getvalue()\n\n        self.assertEqual(actual, expected)\n\n\n# End Helper Functions\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n"
        },
        {
          "name": "updateHostsFile.py",
          "type": "blob",
          "size": 57.4,
          "content": "#!/usr/bin/env python3\n\n# Script by Ben Limmer\n# https://github.com/l1m5\n#\n# This Python script will combine all the host files you provide\n# as sources into one, unique host file to keep your internet browsing happy.\n\nimport argparse\nimport fnmatch\nimport ipaddress\nimport json\nimport locale\nimport os\nimport platform\nfrom pathlib import Path\nimport re\nimport shutil\nimport socket\nimport subprocess\nimport sys\nimport tempfile\nimport time\nfrom glob import glob\nfrom typing import Optional, Tuple\n\n# Detecting Python 3 for version-dependent implementations\nPY3 = sys.version_info >= (3, 0)\n\nif not PY3:\n    raise Exception(\"We do not support Python 2 anymore.\")\n\n\ntry:\n    import requests\nexcept ImportError:\n    raise ImportError(\n        \"This project's dependencies have changed. The Requests library (\"\n        \"https://docs.python-requests.org/en/latest/) is now required.\"\n    )\n\n\n# Syntactic sugar for \"sudo\" command in UNIX / Linux\nif platform.system() == \"OpenBSD\":\n    SUDO = [\"/usr/bin/doas\"]\nelif platform.system() == \"Windows\":\n    SUDO = [\"powershell\", \"Start-Process\", \"powershell\", \"-Verb\", \"runAs\"]\nelse:\n    SUDO = [\"/usr/bin/env\", \"sudo\"]\n\n\n# Project Settings\nBASEDIR_PATH = os.path.dirname(os.path.realpath(__file__))\n\n\ndef get_defaults():\n    \"\"\"\n    Helper method for getting the default settings.\n\n    Returns\n    -------\n    default_settings : dict\n        A dictionary of the default settings when updating host information.\n    \"\"\"\n\n    return {\n        \"numberofrules\": 0,\n        \"datapath\": path_join_robust(BASEDIR_PATH, \"data\"),\n        \"freshen\": True,\n        \"replace\": False,\n        \"backup\": False,\n        \"skipstatichosts\": False,\n        \"keepdomaincomments\": True,\n        \"extensionspath\": path_join_robust(BASEDIR_PATH, \"extensions\"),\n        \"extensions\": [],\n        \"nounifiedhosts\": False,\n        \"compress\": False,\n        \"minimise\": False,\n        \"outputsubfolder\": \"\",\n        \"hostfilename\": \"hosts\",\n        \"targetip\": \"0.0.0.0\",\n        \"sourcedatafilename\": \"update.json\",\n        \"sourcesdata\": [],\n        \"readmefilename\": \"readme.md\",\n        \"readmetemplate\": path_join_robust(BASEDIR_PATH, \"readme_template.md\"),\n        \"readmedata\": {},\n        \"readmedatafilename\": path_join_robust(BASEDIR_PATH, \"readmeData.json\"),\n        \"exclusionpattern\": r\"([a-zA-Z\\d-]+\\.){0,}\",\n        \"exclusionregexes\": [],\n        \"exclusions\": [],\n        \"commonexclusions\": [\"hulu.com\"],\n        \"blacklistfile\": path_join_robust(BASEDIR_PATH, \"blacklist\"),\n        \"whitelistfile\": path_join_robust(BASEDIR_PATH, \"whitelist\"),\n    }\n\n\n# End Project Settings\n\n\ndef main():\n    parser = argparse.ArgumentParser(\n        description=\"Creates a unified hosts \"\n        \"file from hosts stored in the data subfolders.\"\n    )\n    parser.add_argument(\n        \"--auto\",\n        \"-a\",\n        dest=\"auto\",\n        default=False,\n        action=\"store_true\",\n        help=\"Run without prompting.\",\n    )\n    parser.add_argument(\n        \"--backup\",\n        \"-b\",\n        dest=\"backup\",\n        default=False,\n        action=\"store_true\",\n        help=\"Backup the hosts files before they are overridden.\",\n    )\n    parser.add_argument(\n        \"--extensions\",\n        \"-e\",\n        dest=\"extensions\",\n        default=[],\n        nargs=\"*\",\n        help=\"Host extensions to include in the final hosts file.\",\n    )\n    parser.add_argument(\n        \"--nounifiedhosts\",\n        dest=\"nounifiedhosts\",\n        default=False,\n        action=\"store_true\",\n        help=\"Do not include the unified hosts file in the final hosts file. Usually used together with `--extensions`.\",\n    )\n    parser.add_argument(\n        \"--ip\",\n        \"-i\",\n        dest=\"targetip\",\n        default=\"0.0.0.0\",\n        help=\"Target IP address. Default is 0.0.0.0.\",\n    )\n    parser.add_argument(\n        \"--keepdomaincomments\",\n        \"-k\",\n        dest=\"keepdomaincomments\",\n        action=\"store_false\",\n        default=True,\n        help=\"Do not keep domain line comments.\",\n    )\n    parser.add_argument(\n        \"--noupdate\",\n        \"-n\",\n        dest=\"noupdate\",\n        default=False,\n        action=\"store_true\",\n        help=\"Don't update from host data sources.\",\n    )\n    parser.add_argument(\n        \"--skipstatichosts\",\n        \"-s\",\n        dest=\"skipstatichosts\",\n        default=False,\n        action=\"store_true\",\n        help=\"Skip static localhost entries in the final hosts file.\",\n    )\n    parser.add_argument(\n        \"--nogendata\",\n        \"-g\",\n        dest=\"nogendata\",\n        default=False,\n        action=\"store_true\",\n        help=\"Skip generation of readmeData.json\",\n    )\n    parser.add_argument(\n        \"--output\",\n        \"-o\",\n        dest=\"outputsubfolder\",\n        default=\"\",\n        help=\"Output subfolder for generated hosts file.\",\n    )\n    parser.add_argument(\n        \"--replace\",\n        \"-r\",\n        dest=\"replace\",\n        default=False,\n        action=\"store_true\",\n        help=\"Replace your active hosts file with this new hosts file.\",\n    )\n    parser.add_argument(\n        \"--flush-dns-cache\",\n        \"-f\",\n        dest=\"flushdnscache\",\n        default=False,\n        action=\"store_true\",\n        help=\"Attempt to flush DNS cache after replacing the hosts file.\",\n    )\n    parser.add_argument(\n        \"--compress\",\n        \"-c\",\n        dest=\"compress\",\n        default=False,\n        action=\"store_true\",\n        help=\"Compress the hosts file ignoring non-necessary lines \"\n        \"(empty lines and comments) and putting multiple domains in \"\n        \"each line. Improve the performance under Windows.\",\n    )\n    parser.add_argument(\n        \"--minimise\",\n        \"-m\",\n        dest=\"minimise\",\n        default=False,\n        action=\"store_true\",\n        help=\"Minimise the hosts file ignoring non-necessary lines \"\n        \"(empty lines and comments).\",\n    )\n    parser.add_argument(\n        \"--whitelist\",\n        \"-w\",\n        dest=\"whitelistfile\",\n        default=path_join_robust(BASEDIR_PATH, \"whitelist\"),\n        help=\"Whitelist file to use while generating hosts files.\",\n    )\n    parser.add_argument(\n        \"--blacklist\",\n        \"-x\",\n        dest=\"blacklistfile\",\n        default=path_join_robust(BASEDIR_PATH, \"blacklist\"),\n        help=\"Blacklist file to use while generating hosts files.\",\n    )\n\n    global settings\n\n    options = vars(parser.parse_args())\n\n    options[\"outputpath\"] = path_join_robust(BASEDIR_PATH, options[\"outputsubfolder\"])\n    options[\"freshen\"] = not options[\"noupdate\"]\n\n    settings = get_defaults()\n    settings.update(options)\n\n    data_path = settings[\"datapath\"]\n    extensions_path = settings[\"extensionspath\"]\n\n    settings[\"sources\"] = list_dir_no_hidden(data_path)\n    settings[\"extensionsources\"] = list_dir_no_hidden(extensions_path)\n\n    # All our extensions folders...\n    settings[\"extensions\"] = [\n        os.path.basename(item) for item in list_dir_no_hidden(extensions_path)\n    ]\n    # ... intersected with the extensions passed-in as arguments, then sorted.\n    settings[\"extensions\"] = sorted(\n        list(set(options[\"extensions\"]).intersection(settings[\"extensions\"]))\n    )\n\n    auto = settings[\"auto\"]\n    exclusion_regexes = settings[\"exclusionregexes\"]\n    source_data_filename = settings[\"sourcedatafilename\"]\n    no_unified_hosts = settings[\"nounifiedhosts\"]\n\n    update_sources = prompt_for_update(freshen=settings[\"freshen\"], update_auto=auto)\n    if update_sources:\n        update_all_sources(source_data_filename, settings[\"hostfilename\"])\n\n    gather_exclusions = prompt_for_exclusions(skip_prompt=auto)\n\n    if gather_exclusions:\n        common_exclusions = settings[\"commonexclusions\"]\n        exclusion_pattern = settings[\"exclusionpattern\"]\n        exclusion_regexes = display_exclusion_options(\n            common_exclusions=common_exclusions,\n            exclusion_pattern=exclusion_pattern,\n            exclusion_regexes=exclusion_regexes,\n        )\n\n    extensions = settings[\"extensions\"]\n    sources_data = update_sources_data(\n        settings[\"sourcesdata\"],\n        datapath=data_path,\n        extensions=extensions,\n        extensionspath=extensions_path,\n        sourcedatafilename=source_data_filename,\n        nounifiedhosts=no_unified_hosts,\n    )\n\n    merge_file = create_initial_file(\n        nounifiedhosts=no_unified_hosts,\n    )\n    remove_old_hosts_file(settings[\"outputpath\"], \"hosts\", settings[\"backup\"])\n    if settings[\"compress\"]:\n        final_file = open(path_join_robust(settings[\"outputpath\"], \"hosts\"), \"w+b\")\n        compressed_file = tempfile.NamedTemporaryFile()\n        remove_dups_and_excl(merge_file, exclusion_regexes, compressed_file)\n        compress_file(compressed_file, settings[\"targetip\"], final_file)\n    elif settings[\"minimise\"]:\n        final_file = open(path_join_robust(settings[\"outputpath\"], \"hosts\"), \"w+b\")\n        minimised_file = tempfile.NamedTemporaryFile()\n        remove_dups_and_excl(merge_file, exclusion_regexes, minimised_file)\n        minimise_file(minimised_file, settings[\"targetip\"], final_file)\n    else:\n        final_file = remove_dups_and_excl(merge_file, exclusion_regexes)\n\n    number_of_rules = settings[\"numberofrules\"]\n    output_subfolder = settings[\"outputsubfolder\"]\n    skip_static_hosts = settings[\"skipstatichosts\"]\n\n    write_opening_header(\n        final_file,\n        extensions=extensions,\n        numberofrules=number_of_rules,\n        outputsubfolder=output_subfolder,\n        skipstatichosts=skip_static_hosts,\n        nounifiedhosts=no_unified_hosts,\n    )\n    final_file.close()\n\n    if not settings[\"nogendata\"]:\n        update_readme_data(\n            settings[\"readmedatafilename\"],\n            extensions=extensions,\n            numberofrules=number_of_rules,\n            outputsubfolder=output_subfolder,\n            sourcesdata=sources_data,\n            nounifiedhosts=no_unified_hosts,\n        )\n\n    print_success(\n        \"Success! The hosts file has been saved in folder \"\n        + output_subfolder\n        + \"\\nIt contains \"\n        + \"{:,}\".format(number_of_rules)\n        + \" unique entries.\"\n    )\n\n    move_file = prompt_for_move(\n        final_file,\n        auto=auto,\n        replace=settings[\"replace\"],\n        skipstatichosts=skip_static_hosts,\n    )\n\n    # We only flush the DNS cache if we have\n    # moved a new hosts file into place.\n    if move_file:\n        prompt_for_flush_dns_cache(\n            flush_cache=settings[\"flushdnscache\"], prompt_flush=not auto\n        )\n\n\n# Prompt the User\ndef prompt_for_update(freshen, update_auto):\n    \"\"\"\n    Prompt the user to update all hosts files.\n\n    If requested, the function will update all data sources after it\n    checks that a hosts file does indeed exist.\n\n    Parameters\n    ----------\n    freshen : bool\n        Whether data sources should be updated. This function will return\n        if it is requested that data sources not be updated.\n    update_auto : bool\n        Whether or not to automatically update all data sources.\n\n    Returns\n    -------\n    update_sources : bool\n        Whether or not we should update data sources for exclusion files.\n    \"\"\"\n\n    # Create a hosts file if it doesn't exist.\n    hosts_file = path_join_robust(BASEDIR_PATH, \"hosts\")\n\n    if not os.path.isfile(hosts_file):\n        try:\n            open(hosts_file, \"w+\").close()\n        except (IOError, OSError):\n            # Starting in Python 3.3, IOError is aliased\n            # OSError. However, we have to catch both for\n            # Python 2.x failures.\n            print_failure(\n                \"ERROR: No 'hosts' file in the folder. Try creating one manually.\"\n            )\n\n    if not freshen:\n        return False\n\n    prompt = \"Do you want to update all data sources?\"\n\n    if update_auto or query_yes_no(prompt):\n        return True\n    elif not update_auto:\n        print(\"OK, we'll stick with what we've got locally.\")\n\n    return False\n\n\ndef prompt_for_exclusions(skip_prompt):\n    \"\"\"\n    Prompt the user to exclude any custom domains from being blocked.\n\n    Parameters\n    ----------\n    skip_prompt : bool\n        Whether or not to skip prompting for custom domains to be excluded.\n        If true, the function returns immediately.\n\n    Returns\n    -------\n    gather_exclusions : bool\n        Whether or not we should proceed to prompt the user to exclude any\n        custom domains beyond those in the whitelist.\n    \"\"\"\n\n    prompt = (\n        \"Do you want to exclude any domains?\\n\"\n        \"For example, hulu.com video streaming must be able to access \"\n        \"its tracking and ad servers in order to play video.\"\n    )\n\n    if not skip_prompt:\n        if query_yes_no(prompt):\n            return True\n        else:\n            print(\"OK, we'll only exclude domains in the whitelist.\")\n\n    return False\n\n\ndef prompt_for_flush_dns_cache(flush_cache, prompt_flush):\n    \"\"\"\n    Prompt the user to flush the DNS cache.\n\n    Parameters\n    ----------\n    flush_cache : bool\n        Whether to flush the DNS cache without prompting.\n    prompt_flush : bool\n        If `flush_cache` is False, whether we should prompt for flushing the\n        cache. Otherwise, the function returns immediately.\n    \"\"\"\n\n    if flush_cache:\n        flush_dns_cache()\n    elif prompt_flush:\n        if query_yes_no(\"Attempt to flush the DNS cache?\"):\n            flush_dns_cache()\n\n\ndef prompt_for_move(final_file, **move_params):\n    \"\"\"\n    Prompt the user to move the newly created hosts file to its designated\n    location in the OS.\n\n    Parameters\n    ----------\n    final_file : file\n        The file object that contains the newly created hosts data.\n    move_params : kwargs\n        Dictionary providing additional parameters for moving the hosts file\n        into place. Currently, those fields are:\n\n        1) auto\n        2) replace\n        3) skipstatichosts\n\n    Returns\n    -------\n    move_file : bool\n        Whether or not the final hosts file was moved.\n    \"\"\"\n\n    skip_static_hosts = move_params[\"skipstatichosts\"]\n\n    if move_params[\"replace\"] and not skip_static_hosts:\n        move_file = True\n    elif move_params[\"auto\"] or skip_static_hosts:\n        move_file = False\n    else:\n        prompt = \"Do you want to replace your existing hosts file with the newly generated file?\"\n        move_file = query_yes_no(prompt)\n\n    if move_file:\n        move_file = move_hosts_file_into_place(final_file)\n\n    return move_file\n\n\n# End Prompt the User\n\n\ndef sort_sources(sources):\n    \"\"\"\n    Sorts the sources.\n    The idea is that all Steven Black's list, file or entries\n    get on top and the rest sorted alphabetically.\n\n    Parameters\n    ----------\n    sources: list\n        The sources to sort.\n    \"\"\"\n\n    result = sorted(\n        sources.copy(),\n        key=lambda x: x.lower().replace(\"-\", \"\").replace(\"_\", \"\").replace(\" \", \"\"),\n    )\n\n    # Steven Black's repositories/files/lists should be on top!\n    steven_black_positions = [\n        x for x, y in enumerate(result) if \"stevenblack\" in y.lower()\n    ]\n\n    for index in steven_black_positions:\n        result.insert(0, result.pop(index))\n\n    return result\n\n\n# Exclusion logic\ndef display_exclusion_options(common_exclusions, exclusion_pattern, exclusion_regexes):\n    \"\"\"\n    Display the exclusion options to the user.\n\n    This function checks whether a user wants to exclude particular domains,\n    and if so, excludes them.\n\n    Parameters\n    ----------\n    common_exclusions : list\n        A list of common domains that are excluded from being blocked. One\n        example is Hulu. This setting is set directly in the script and cannot\n        be overwritten by the user.\n    exclusion_pattern : str\n        The exclusion pattern with which to create the domain regex.\n    exclusion_regexes : list\n        The list of regex patterns used to exclude domains.\n\n    Returns\n    -------\n    aug_exclusion_regexes : list\n        The original list of regex patterns potentially with additional\n        patterns from domains that the user chooses to exclude.\n    \"\"\"\n\n    for exclusion_option in common_exclusions:\n        prompt = \"Do you want to exclude the domain \" + exclusion_option + \" ?\"\n\n        if query_yes_no(prompt):\n            exclusion_regexes = exclude_domain(\n                exclusion_option, exclusion_pattern, exclusion_regexes\n            )\n        else:\n            continue\n\n    if query_yes_no(\"Do you want to exclude any other domains?\"):\n        exclusion_regexes = gather_custom_exclusions(\n            exclusion_pattern, exclusion_regexes\n        )\n\n    return exclusion_regexes\n\n\ndef gather_custom_exclusions(exclusion_pattern, exclusion_regexes):\n    \"\"\"\n    Gather custom exclusions from the user.\n\n    Parameters\n    ----------\n    exclusion_pattern : str\n        The exclusion pattern with which to create the domain regex.\n    exclusion_regexes : list\n        The list of regex patterns used to exclude domains.\n\n    Returns\n    -------\n    aug_exclusion_regexes : list\n        The original list of regex patterns potentially with additional\n        patterns from domains that the user chooses to exclude.\n    \"\"\"\n\n    # We continue running this while-loop until the user\n    # says that they have no more domains to exclude.\n    while True:\n        domain_prompt = \"Enter the domain you want to exclude (e.g. facebook.com): \"\n        user_domain = input(domain_prompt)\n\n        if is_valid_user_provided_domain_format(user_domain):\n            exclusion_regexes = exclude_domain(\n                user_domain, exclusion_pattern, exclusion_regexes\n            )\n\n        continue_prompt = \"Do you have more domains you want to enter?\"\n        if not query_yes_no(continue_prompt):\n            break\n\n    return exclusion_regexes\n\n\ndef exclude_domain(domain, exclusion_pattern, exclusion_regexes):\n    \"\"\"\n    Exclude a domain from being blocked.\n\n    This creates the domain regex by which to exclude this domain and appends\n    it a list of already-existing exclusion regexes.\n\n    Parameters\n    ----------\n    domain : str\n        The filename or regex pattern to exclude.\n    exclusion_pattern : str\n        The exclusion pattern with which to create the domain regex.\n    exclusion_regexes : list\n        The list of regex patterns used to exclude domains.\n\n    Returns\n    -------\n    aug_exclusion_regexes : list\n        The original list of regex patterns with one additional pattern from\n        the `domain` input.\n    \"\"\"\n\n    exclusion_regex = re.compile(exclusion_pattern + domain)\n    exclusion_regexes.append(exclusion_regex)\n\n    return exclusion_regexes\n\n\ndef matches_exclusions(stripped_rule, exclusion_regexes):\n    \"\"\"\n    Check whether a rule matches an exclusion rule we already provided.\n\n    If this function returns True, that means this rule should be excluded\n    from the final hosts file.\n\n    Parameters\n    ----------\n    stripped_rule : str\n        The rule that we are checking.\n    exclusion_regexes : list\n        The list of regex patterns used to exclude domains.\n\n    Returns\n    -------\n    matches_exclusion : bool\n        Whether or not the rule string matches a provided exclusion.\n    \"\"\"\n\n    try:\n        stripped_domain = stripped_rule.split()[1]\n    except IndexError:\n        # Example: 'example.org' instead of '0.0.0.0 example.org'\n        stripped_domain = stripped_rule\n\n    for exclusionRegex in exclusion_regexes:\n        if exclusionRegex.search(stripped_domain):\n            return True\n\n    return False\n\n\n# End Exclusion Logic\n\n\n# Update Logic\ndef update_sources_data(sources_data, **sources_params):\n    \"\"\"\n    Update the sources data and information for each source.\n\n    Parameters\n    ----------\n    sources_data : list\n        The list of sources data that we are to update.\n    sources_params : kwargs\n        Dictionary providing additional parameters for updating the\n        sources data. Currently, those fields are:\n\n        1) datapath\n        2) extensions\n        3) extensionspath\n        4) sourcedatafilename\n        5) nounifiedhosts\n\n    Returns\n    -------\n    update_sources_data : list\n        The original source data list with new source data appended.\n    \"\"\"\n\n    source_data_filename = sources_params[\"sourcedatafilename\"]\n\n    if not sources_params[\"nounifiedhosts\"]:\n        for source in sort_sources(\n            recursive_glob(sources_params[\"datapath\"], source_data_filename)\n        ):\n            update_file = open(source, \"r\", encoding=\"UTF-8\")\n            try:\n                update_data = json.load(update_file)\n                sources_data.append(update_data)\n            finally:\n                update_file.close()\n\n    for source in sources_params[\"extensions\"]:\n        source_dir = path_join_robust(sources_params[\"extensionspath\"], source)\n        for update_file_path in sort_sources(\n            recursive_glob(source_dir, source_data_filename)\n        ):\n            update_file = open(update_file_path, \"r\")\n            try:\n                update_data = json.load(update_file)\n                sources_data.append(update_data)\n            finally:\n                update_file.close()\n\n    return sources_data\n\n\ndef jsonarray(json_array_string):\n    \"\"\"\n    Transformer, converts a json array string hosts into one host per\n    line, prefixing each line with \"127.0.0.1 \".\n\n    Parameters\n    ----------\n    json_array_string : str\n        The json array string in the form\n          '[\"example1.com\", \"example1.com\", ...]'\n    \"\"\"\n\n    temp_list = json.loads(json_array_string)\n    hostlines = \"127.0.0.1 \" + \"\\n127.0.0.1 \".join(temp_list)\n    return hostlines\n\n\ndef update_all_sources(source_data_filename, host_filename):\n    \"\"\"\n    Update all host files, regardless of folder depth.\n\n    Parameters\n    ----------\n    source_data_filename : str\n        The name of the filename where information regarding updating\n        sources for a particular URL is stored. This filename is assumed\n        to be the same for all sources.\n    host_filename : str\n        The name of the file in which the updated source information\n        is stored for a particular URL. This filename is assumed to be\n        the same for all sources.\n    \"\"\"\n\n    # The transforms we support\n    transform_methods = {\"jsonarray\": jsonarray}\n\n    all_sources = sort_sources(recursive_glob(\"*\", source_data_filename))\n\n    for source in all_sources:\n        update_file = open(source, \"r\", encoding=\"UTF-8\")\n        update_data = json.load(update_file)\n        update_file.close()\n\n        # we can pause updating any given hosts source.\n        # if the update.json \"pause\" key is missing, don't pause.\n        if update_data.get(\"pause\", False):\n            continue\n\n        update_url = update_data[\"url\"]\n        update_transforms = []\n        if update_data.get(\"transforms\"):\n            update_transforms = update_data[\"transforms\"]\n\n        print(\"Updating source \" + os.path.dirname(source) + \" from \" + update_url)\n\n        try:\n            updated_file = get_file_by_url(update_url)\n\n            # spin the transforms as required\n            for transform in update_transforms:\n                updated_file = transform_methods[transform](updated_file)\n\n            # get rid of carriage-return symbols\n            updated_file = updated_file.replace(\"\\r\", \"\")\n\n            hosts_file = open(\n                path_join_robust(BASEDIR_PATH, os.path.dirname(source), host_filename),\n                \"wb\",\n            )\n            write_data(hosts_file, updated_file)\n            hosts_file.close()\n        except Exception:\n            print(\"Error in updating source: \", update_url)\n\n\n# End Update Logic\n\n\n# File Logic\ndef create_initial_file(**initial_file_params):\n    \"\"\"\n    Initialize the file in which we merge all host files for later pruning.\n\n    Parameters\n    ----------\n    header_params : kwargs\n        Dictionary providing additional parameters for populating the initial file\n        information. Currently, those fields are:\n\n        1) nounifiedhosts\n    \"\"\"\n\n    merge_file = tempfile.NamedTemporaryFile()\n\n    if not initial_file_params[\"nounifiedhosts\"]:\n        # spin the sources for the base file\n        for source in sort_sources(\n            recursive_glob(settings[\"datapath\"], settings[\"hostfilename\"])\n        ):\n            start = \"# Start {}\\n\\n\".format(os.path.basename(os.path.dirname(source)))\n            end = \"\\n# End {}\\n\\n\".format(os.path.basename(os.path.dirname(source)))\n\n            with open(source, \"r\", encoding=\"UTF-8\") as curFile:\n                write_data(merge_file, start + curFile.read() + end)\n\n    # spin the sources for extensions to the base file\n    for source in settings[\"extensions\"]:\n        for filename in sort_sources(\n            recursive_glob(\n                path_join_robust(settings[\"extensionspath\"], source),\n                settings[\"hostfilename\"],\n            )\n        ):\n            with open(filename, \"r\") as curFile:\n                write_data(merge_file, curFile.read())\n\n    maybe_copy_example_file(settings[\"blacklistfile\"])\n\n    if os.path.isfile(settings[\"blacklistfile\"]):\n        with open(settings[\"blacklistfile\"], \"r\") as curFile:\n            write_data(merge_file, curFile.read())\n\n    return merge_file\n\n\ndef compress_file(input_file, target_ip, output_file):\n    \"\"\"\n    Reduce the file dimension removing non-necessary lines (empty lines and\n    comments) and putting multiple domains in each line.\n    Reducing the number of lines of the file, the parsing under Microsoft\n    Windows is much faster.\n\n    Parameters\n    ----------\n    input_file : file\n        The file object that contains the hostnames that we are reducing.\n    target_ip : str\n        The target IP address.\n    output_file : file\n        The file object that will contain the reduced hostnames.\n    \"\"\"\n\n    input_file.seek(0)  # reset file pointer\n    write_data(output_file, \"\\n\")\n\n    target_ip_len = len(target_ip)\n    lines = [target_ip]\n    lines_index = 0\n    for line in input_file.readlines():\n        line = line.decode(\"UTF-8\")\n\n        if line.startswith(target_ip):\n            if lines[lines_index].count(\" \") < 9:\n                lines[lines_index] += (\n                    \" \" + line[target_ip_len : line.find(\"#\")].strip()  # noqa: E203\n                )\n            else:\n                lines[lines_index] += \"\\n\"\n                lines.append(line[: line.find(\"#\")].strip())\n                lines_index += 1\n\n    for line in lines:\n        write_data(output_file, line)\n\n    input_file.close()\n\n\ndef minimise_file(input_file, target_ip, output_file):\n    \"\"\"\n    Reduce the file dimension removing non-necessary lines (empty lines and\n    comments).\n\n    Parameters\n    ----------\n    input_file : file\n        The file object that contains the hostnames that we are reducing.\n    target_ip : str\n        The target IP address.\n    output_file : file\n        The file object that will contain the reduced hostnames.\n    \"\"\"\n\n    input_file.seek(0)  # reset file pointer\n    write_data(output_file, \"\\n\")\n\n    lines = []\n    for line in input_file.readlines():\n        line = line.decode(\"UTF-8\")\n\n        if line.startswith(target_ip):\n            lines.append(line[: line.find(\"#\")].strip() + \"\\n\")\n\n    for line in lines:\n        write_data(output_file, line)\n\n    input_file.close()\n\n\ndef remove_dups_and_excl(merge_file, exclusion_regexes, output_file=None):\n    \"\"\"\n    Remove duplicates and remove hosts that we are excluding.\n\n    We check for duplicate hostnames as well as remove any hostnames that\n    have been explicitly excluded by the user.\n\n    Parameters\n    ----------\n    merge_file : file\n        The file object that contains the hostnames that we are pruning.\n    exclusion_regexes : list\n        The list of regex patterns used to exclude domains.\n    output_file : file\n        The file object in which the result is written. If None, the file\n        'settings[\"outputpath\"]' will be created.\n    \"\"\"\n\n    number_of_rules = settings[\"numberofrules\"]\n    maybe_copy_example_file(settings[\"whitelistfile\"])\n\n    if os.path.isfile(settings[\"whitelistfile\"]):\n        with open(settings[\"whitelistfile\"], \"r\") as ins:\n            for line in ins:\n                line = line.strip(\" \\t\\n\\r\")\n                if line and not line.startswith(\"#\"):\n                    settings[\"exclusions\"].append(line)\n\n    if not os.path.exists(settings[\"outputpath\"]):\n        os.makedirs(settings[\"outputpath\"])\n\n    if output_file is None:\n        final_file = open(path_join_robust(settings[\"outputpath\"], \"hosts\"), \"w+b\")\n    else:\n        final_file = output_file\n\n    merge_file.seek(0)  # reset file pointer\n    hostnames = {\"localhost\", \"localhost.localdomain\", \"local\", \"broadcasthost\"}\n    exclusions = settings[\"exclusions\"]\n\n    for line in merge_file.readlines():\n        write_line = True\n\n        # Explicit encoding\n        line = line.decode(\"UTF-8\")\n\n        # replace tabs with space\n        line = line.replace(\"\\t+\", \" \")\n\n        # see gh-271: trim trailing whitespace, periods\n        line = line.rstrip(\" .\")\n\n        # Testing the first character doesn't require startswith\n        if line[0] == \"#\" or re.match(r\"^\\s*$\", line[0]):\n            write_data(final_file, line)\n            continue\n        if \"::1\" in line:\n            continue\n\n        stripped_rule = strip_rule(line)  # strip comments\n        if not stripped_rule or matches_exclusions(stripped_rule, exclusion_regexes):\n            continue\n\n        # Issue #1628\n        if \"@\" in stripped_rule:\n            continue\n\n        # Normalize rule\n        hostname, normalized_rule = normalize_rule(\n            stripped_rule,\n            target_ip=settings[\"targetip\"],\n            keep_domain_comments=settings[\"keepdomaincomments\"],\n        )\n\n        for exclude in exclusions:\n            if re.search(r\"(^|[\\s\\.])\" + re.escape(exclude) + r\"\\s\", line):\n                write_line = False\n                break\n\n        if normalized_rule and (hostname not in hostnames) and write_line:\n            write_data(final_file, normalized_rule)\n            hostnames.add(hostname)\n            number_of_rules += 1\n\n    settings[\"numberofrules\"] = number_of_rules\n    merge_file.close()\n\n    if output_file is None:\n        return final_file\n\n\ndef normalize_rule(rule, target_ip, keep_domain_comments):\n    \"\"\"\n    Standardize and format the rule string provided.\n\n    Parameters\n    ----------\n    rule : str\n        The rule whose spelling and spacing we are standardizing.\n    target_ip : str\n        The target IP address for the rule.\n    keep_domain_comments : bool\n        Whether or not to keep comments regarding these domains in\n        the normalized rule.\n\n    Returns\n    -------\n    normalized_rule : tuple\n        A tuple of the hostname and the rule string with spelling\n        and spacing reformatted.\n    \"\"\"\n\n    def normalize_response(\n        extracted_hostname: str, extracted_suffix: Optional[str]\n    ) -> Tuple[str, str]:\n        \"\"\"\n        Normalizes the responses after the provision of the extracted\n        hostname and suffix - if exist.\n\n        Parameters\n        ----------\n        extracted_hostname: str\n            The extracted hostname to work with.\n        extracted_suffix: str\n            The extracted suffix to with.\n\n        Returns\n        -------\n        normalized_response: tuple\n            A tuple of the hostname and the rule string with spelling\n            and spacing reformatted.\n        \"\"\"\n\n        rule = \"%s %s\" % (target_ip, extracted_hostname)\n\n        if keep_domain_comments and extracted_suffix:\n            if not extracted_suffix.strip().startswith(\"#\"):\n                # Strings are stripped, therefore we need to add the space back.\n                rule += \" # %s\" % extracted_suffix\n            else:\n                rule += \" %s\" % extracted_suffix\n\n        return extracted_hostname, rule + \"\\n\"\n\n    def is_ip(dataset: str) -> bool:\n        \"\"\"\n        Checks whether the given dataset is an IP.\n\n        Parameters\n        ----------\n\n        dataset: str\n            The dataset to work with.\n\n        Returns\n        -------\n        is_ip: bool\n            Whether the dataset is an IP.\n        \"\"\"\n\n        try:\n            _ = ipaddress.ip_address(dataset)\n            return True\n        except ValueError:\n            return False\n\n    def belch_unwanted(unwanted: str) -> Tuple[None, None]:\n        \"\"\"\n        Belches unwanted to screen.\n\n        Parameters\n        ----------\n        unwanted: str\n            The unwanted string to belch.\n\n        Returns\n        -------\n        belched: tuple\n            A tuple of None, None.\n        \"\"\"\n\n        \"\"\"\n        finally, if we get here, just belch to screen\n        \"\"\"\n        print(\"==>%s<==\" % unwanted)\n        return None, None\n\n    \"\"\"\n    first try: IP followed by domain\n    \"\"\"\n\n    static_ip_regex = r\"^(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})$\"\n    split_rule = rule.split(maxsplit=1)\n\n    if is_ip(split_rule[0]):\n        # Assume that the first item is an IP address following the rule.\n\n        if \" \" or \"\\t\" in split_rule[-1]:\n            try:\n                # Example: 0.0.0.0 example.org # hello, world!\n                hostname, suffix = split_rule[-1].split(maxsplit=1)\n            except ValueError:\n                # Example: 0.0.0.0 example.org[:space:]\n                hostname, suffix = split_rule[-1], None\n        else:\n            # Example: 0.0.0.0 example.org\n            hostname, suffix = split_rule[-1], None\n\n        hostname = hostname.lower()\n\n        if (\n            is_ip(hostname)\n            or re.search(static_ip_regex, hostname)\n            or \".\" not in hostname\n            or \"..\" in hostname\n            or \".\" in hostname[-1]\n            or \"/\" in hostname\n            or \":\" in hostname\n        ):\n            # Example: 0.0.0.0 127.0.0.1\n\n            # If the hostname is:\n            #   - an IP - or looks like it,\n            #   - doesn't contain dots, or\n            #   - contains repeated dots,\n            #   - ends in a dot, or\n            #   - contains a slash, or\n            #   - contains a colon,\n            # we don't want to normalize it.\n            return belch_unwanted(rule)\n\n        return normalize_response(hostname, suffix)\n\n    if (\n        not re.search(static_ip_regex, split_rule[0])\n        and \":\" not in split_rule[0]\n        and \"..\" not in split_rule[0]\n        and \"/\" not in split_rule[0]\n        and \".\" in split_rule[0]\n    ):\n        # Deny anything that looks like an IP; doesn't container dots or INVALID.\n\n        try:\n            hostname, suffix = split_rule\n        except ValueError:\n            hostname, suffix = split_rule[0], None\n\n        hostname = hostname.lower()\n\n        return normalize_response(hostname, suffix)\n\n    return belch_unwanted(rule)\n\n\ndef strip_rule(line):\n    \"\"\"\n    Sanitize a rule string provided before writing it to the output hosts file.\n\n    Parameters\n    ----------\n    line : str\n        The rule provided for sanitation.\n\n    Returns\n    -------\n    sanitized_line : str\n        The sanitized rule.\n    \"\"\"\n\n    return \" \".join(line.split())\n\n\ndef write_opening_header(final_file, **header_params):\n    \"\"\"\n    Write the header information into the newly-created hosts file.\n\n    Parameters\n    ----------\n    final_file : file\n        The file object that points to the newly-created hosts file.\n    header_params : kwargs\n        Dictionary providing additional parameters for populating the header\n        information. Currently, those fields are:\n\n        1) extensions\n        2) numberofrules\n        3) outputsubfolder\n        4) skipstatichosts\n        5) nounifiedhosts\n    \"\"\"\n\n    final_file.seek(0)  # Reset file pointer.\n    file_contents = final_file.read()  # Save content.\n\n    final_file.seek(0)  # Write at the top.\n\n    no_unified_hosts = header_params[\"nounifiedhosts\"]\n\n    if header_params[\"extensions\"]:\n        if no_unified_hosts:\n            if len(header_params[\"extensions\"]) > 1:\n                write_data(\n                    final_file,\n                    \"# Title: StevenBlack/hosts extensions {0} and {1} \\n#\\n\".format(\n                        \", \".join(header_params[\"extensions\"][:-1]),\n                        header_params[\"extensions\"][-1],\n                    ),\n                )\n            else:\n                write_data(\n                    final_file,\n                    \"# Title: StevenBlack/hosts extension {0}\\n#\\n\".format(\n                        \", \".join(header_params[\"extensions\"])\n                    ),\n                )\n        else:\n            if len(header_params[\"extensions\"]) > 1:\n                write_data(\n                    final_file,\n                    \"# Title: StevenBlack/hosts with the {0} and {1} extensions\\n#\\n\".format(\n                        \", \".join(header_params[\"extensions\"][:-1]),\n                        header_params[\"extensions\"][-1],\n                    ),\n                )\n            else:\n                write_data(\n                    final_file,\n                    \"# Title: StevenBlack/hosts with the {0} extension\\n#\\n\".format(\n                        \", \".join(header_params[\"extensions\"])\n                    ),\n                )\n    else:\n        write_data(final_file, \"# Title: StevenBlack/hosts\\n#\\n\")\n\n    write_data(\n        final_file,\n        \"# This hosts file is a merged collection \"\n        \"of hosts from reputable sources,\\n\",\n    )\n    write_data(final_file, \"# with a dash of crowd sourcing via GitHub\\n#\\n\")\n    write_data(\n        final_file,\n        \"# Date: \" + time.strftime(\"%d %B %Y %H:%M:%S (%Z)\", time.gmtime()) + \"\\n\",\n    )\n\n    if header_params[\"extensions\"]:\n        if header_params[\"nounifiedhosts\"]:\n            write_data(\n                final_file,\n                \"# The unified hosts file was not used while generating this file.\\n\"\n                \"# Extensions used to generate this file: \"\n                + \", \".join(header_params[\"extensions\"])\n                + \"\\n\",\n            )\n        else:\n            write_data(\n                final_file,\n                \"# Extensions added to this file: \"\n                + \", \".join(header_params[\"extensions\"])\n                + \"\\n\",\n            )\n\n    write_data(\n        final_file,\n        (\n            \"# Number of unique domains: {:,}\\n#\\n\".format(\n                header_params[\"numberofrules\"]\n            )\n        ),\n    )\n    write_data(\n        final_file,\n        \"# Fetch the latest version of this file: \"\n        \"https://raw.githubusercontent.com/StevenBlack/hosts/master/\"\n        + path_join_robust(header_params[\"outputsubfolder\"], \"\").replace(\"\\\\\", \"/\")\n        + \"hosts\\n\",\n    )\n    write_data(\n        final_file, \"# Project home page: https://github.com/StevenBlack/hosts\\n\"\n    )\n    write_data(\n        final_file,\n        \"# Project releases: https://github.com/StevenBlack/hosts/releases\\n#\\n\",\n    )\n    write_data(\n        final_file,\n        \"# ===============================================================\\n\",\n    )\n    write_data(final_file, \"\\n\")\n\n    if not header_params[\"skipstatichosts\"]:\n        write_data(final_file, \"127.0.0.1 localhost\\n\")\n        write_data(final_file, \"127.0.0.1 localhost.localdomain\\n\")\n        write_data(final_file, \"127.0.0.1 local\\n\")\n        write_data(final_file, \"255.255.255.255 broadcasthost\\n\")\n        write_data(final_file, \"::1 localhost\\n\")\n        write_data(final_file, \"::1 ip6-localhost\\n\")\n        write_data(final_file, \"::1 ip6-loopback\\n\")\n        write_data(final_file, \"fe80::1%lo0 localhost\\n\")\n        write_data(final_file, \"ff00::0 ip6-localnet\\n\")\n        write_data(final_file, \"ff00::0 ip6-mcastprefix\\n\")\n        write_data(final_file, \"ff02::1 ip6-allnodes\\n\")\n        write_data(final_file, \"ff02::2 ip6-allrouters\\n\")\n        write_data(final_file, \"ff02::3 ip6-allhosts\\n\")\n        write_data(final_file, \"0.0.0.0 0.0.0.0\\n\")\n\n        if platform.system() == \"Linux\":\n            write_data(final_file, \"127.0.1.1 \" + socket.gethostname() + \"\\n\")\n            write_data(final_file, \"127.0.0.53 \" + socket.gethostname() + \"\\n\")\n\n        write_data(final_file, \"\\n\")\n\n    preamble = path_join_robust(BASEDIR_PATH, \"myhosts\")\n    maybe_copy_example_file(preamble)\n\n    if os.path.isfile(preamble):\n        with open(preamble, \"r\") as f:\n            write_data(final_file, f.read())\n\n    final_file.write(file_contents)\n\n\ndef update_readme_data(readme_file, **readme_updates):\n    \"\"\"\n    Update the host and website information provided in the README JSON data.\n\n    Parameters\n    ----------\n    readme_file : str\n        The name of the README file to update.\n    readme_updates : kwargs\n        Dictionary providing additional JSON fields to update before\n        saving the data. Currently, those fields are:\n\n        1) extensions\n        2) sourcesdata\n        3) numberofrules\n        4) outputsubfolder\n        5) nounifiedhosts\n    \"\"\"\n\n    extensions_key = \"base\"\n    extensions = readme_updates[\"extensions\"]\n    no_unified_hosts = readme_updates[\"nounifiedhosts\"]\n\n    if extensions:\n        extensions_key = \"-\".join(extensions)\n        if no_unified_hosts:\n            extensions_key = extensions_key + \"-only\"\n\n    output_folder = readme_updates[\"outputsubfolder\"]\n    generation_data = {\n        \"location\": path_join_robust(output_folder, \"\"),\n        \"no_unified_hosts\": no_unified_hosts,\n        \"entries\": readme_updates[\"numberofrules\"],\n        \"sourcesdata\": readme_updates[\"sourcesdata\"],\n    }\n\n    with open(readme_file, \"r\") as f:\n        readme_data = json.load(f)\n        readme_data[extensions_key] = generation_data\n\n    for denomination, data in readme_data.copy().items():\n        if \"location\" in data and data[\"location\"] and \"\\\\\" in data[\"location\"]:\n            # Windows compatibility: #1166\n            readme_data[denomination][\"location\"] = data[\"location\"].replace(\"\\\\\", \"/\")\n\n    with open(readme_file, \"w\") as f:\n        json.dump(readme_data, f)\n\n\ndef move_hosts_file_into_place(final_file):\n    r\"\"\"\n    Move the newly-created hosts file into its correct location on the OS.\n\n    For UNIX systems, the hosts file is \"etc/hosts.\" On Windows, it's\n    \"C:\\Windows\\System32\\drivers\\etc\\hosts.\"\n\n    For this move to work, you must have administrator privileges to do this.\n    On UNIX systems, this means having \"sudo\" access, and on Windows, it\n    means being able to run command prompt in administrator mode.\n\n    Parameters\n    ----------\n    final_file : file object\n        The newly-created hosts file to move.\n    \"\"\"  # noqa: W605\n\n    filename = os.path.abspath(final_file.name)\n\n    try:\n        if not Path(filename).exists():\n            raise FileNotFoundError\n    except Exception:\n        print_failure(f\"{filename} does not exist.\")\n        return False\n\n    if platform.system() == \"Windows\":\n        target_file = str(\n            Path(os.getenv(\"SystemRoot\")) / \"system32\" / \"drivers\" / \"etc\" / \"hosts\"\n        )\n    else:\n        target_file = \"/etc/hosts\"\n\n    if os.getenv(\"IN_CONTAINER\"):\n        # It's not allowed to remove/replace a mounted /etc/hosts, so we replace the content.\n        # This requires running the container user as root, as is the default.\n        print(f\"Running in container, so we will replace the content of {target_file}.\")\n        try:\n            with open(target_file, \"w\") as target_stream:\n                with open(filename, \"r\") as source_stream:\n                    source = source_stream.read()\n                    target_stream.write(source)\n            return True\n        except Exception:\n            print_failure(f\"Replacing content of {target_file} failed.\")\n            return False\n    elif (\n        platform.system() == \"Linux\"\n        or platform.system() == \"Windows\"\n        or platform.system() == \"Darwin\"\n    ):\n        print(\n            f\"Replacing {target_file} requires root privileges. You might need to enter your password.\"\n        )\n        try:\n            subprocess.run(SUDO + [\"cp\", filename, target_file], check=True)\n            return True\n        except subprocess.CalledProcessError:\n            print_failure(f\"Replacing {target_file} failed.\")\n            return False\n\n\ndef flush_dns_cache():\n    \"\"\"\n    Flush the DNS cache.\n    \"\"\"\n\n    print(\"Flushing the DNS cache to utilize new hosts file...\")\n    print(\n        \"Flushing the DNS cache requires administrative privileges. You might need to enter your password.\"\n    )\n\n    dns_cache_found = False\n\n    if platform.system() == \"Darwin\":\n        if subprocess.call(SUDO + [\"killall\", \"-HUP\", \"mDNSResponder\"]):\n            print_failure(\"Flushing the DNS cache failed.\")\n    elif os.name == \"nt\":\n        print(\"Automatically flushing the DNS cache is not yet supported.\")\n        print(\n            \"Please copy and paste the command 'ipconfig /flushdns' in \"\n            \"administrator command prompt after running this script.\"\n        )\n    else:\n        nscd_prefixes = [\"/etc\", \"/etc/rc.d\"]\n        nscd_msg = \"Flushing the DNS cache by restarting nscd {result}\"\n\n        for nscd_prefix in nscd_prefixes:\n            nscd_cache = nscd_prefix + \"/init.d/nscd\"\n\n            if os.path.isfile(nscd_cache):\n                dns_cache_found = True\n\n                if subprocess.call(SUDO + [nscd_cache, \"restart\"]):\n                    print_failure(nscd_msg.format(result=\"failed\"))\n                else:\n                    print_success(nscd_msg.format(result=\"succeeded\"))\n\n        centos_file = \"/etc/init.d/network\"\n        centos_msg = \"Flushing the DNS cache by restarting network {result}\"\n\n        if os.path.isfile(centos_file):\n            if subprocess.call(SUDO + [centos_file, \"restart\"]):\n                print_failure(centos_msg.format(result=\"failed\"))\n            else:\n                print_success(centos_msg.format(result=\"succeeded\"))\n\n        system_prefixes = [\"/usr\", \"\"]\n        service_types = [\"NetworkManager\", \"wicd\", \"dnsmasq\", \"networking\"]\n        restarted_services = []\n\n        for system_prefix in system_prefixes:\n            systemctl = system_prefix + \"/bin/systemctl\"\n            system_dir = system_prefix + \"/lib/systemd/system\"\n\n            for service_type in service_types:\n                service = service_type + \".service\"\n                if service in restarted_services:\n                    continue\n\n                service_file = path_join_robust(system_dir, service)\n                service_msg = (\n                    \"Flushing the DNS cache by restarting \" + service + \" {result}\"\n                )\n\n                if os.path.isfile(service_file):\n                    if 0 != subprocess.call(\n                        [systemctl, \"status\", service], stdout=subprocess.DEVNULL\n                    ):\n                        continue\n                    dns_cache_found = True\n\n                    if subprocess.call(SUDO + [systemctl, \"restart\", service]):\n                        print_failure(service_msg.format(result=\"failed\"))\n                    else:\n                        print_success(service_msg.format(result=\"succeeded\"))\n                    restarted_services.append(service)\n\n        dns_clean_file = \"/etc/init.d/dns-clean\"\n        dns_clean_msg = \"Flushing the DNS cache via dns-clean executable {result}\"\n\n        if os.path.isfile(dns_clean_file):\n            dns_cache_found = True\n\n            if subprocess.call(SUDO + [dns_clean_file, \"start\"]):\n                print_failure(dns_clean_msg.format(result=\"failed\"))\n            else:\n                print_success(dns_clean_msg.format(result=\"succeeded\"))\n\n        if not dns_cache_found:\n            print_failure(\"Unable to determine DNS management tool.\")\n\n\ndef remove_old_hosts_file(path_to_file, file_name, backup):\n    \"\"\"\n    Remove the old hosts file.\n\n    This is a hotfix because merging with an already existing hosts file leads\n    to artifacts and duplicates.\n\n    Parameters\n    ----------\n    backup : boolean, default False\n        Whether or not to backup the existing hosts file.\n    \"\"\"\n\n    full_file_path = path_join_robust(path_to_file, file_name)\n\n    if os.path.exists(full_file_path):\n        if backup:\n            backup_file_path = full_file_path + \"-{}\".format(\n                time.strftime(\"%Y-%m-%d-%H-%M-%S\")\n            )\n\n            # Make a backup copy, marking the date in which the list was updated\n            shutil.copy(full_file_path, backup_file_path)\n\n        os.remove(full_file_path)\n\n    # Create directory if not exists\n    if not os.path.exists(path_to_file):\n        os.makedirs(path_to_file)\n\n    # Create new empty hosts file\n    open(full_file_path, \"a\").close()\n\n\n# End File Logic\n\n\ndef domain_to_idna(line):\n    \"\"\"\n    Encode a domain that is present into a line into `idna`. This way we\n    avoid most encoding issues.\n\n    Parameters\n    ----------\n    line : str\n        The line we have to encode/decode.\n\n    Returns\n    -------\n    line : str\n        The line in a converted format.\n\n    Notes\n    -----\n    - This function encodes only the domain to `idna` format because in\n        most cases, the encoding issue is due to a domain which looks like\n        `b'\\xc9\\xa2oogle.com'.decode('idna')`.\n    - About the splitting:\n        We split because we only want to encode the domain and not the full\n        line, which may cause some issues. Keep in mind that we split, but we\n        still concatenate once we encoded the domain.\n\n        - The following split the prefix `0.0.0.0` or `127.0.0.1` of a line.\n        - The following also split the trailing comment of a given line.\n    \"\"\"\n\n    if not line.startswith(\"#\"):\n        tabs = \"\\t\"\n        space = \" \"\n\n        tabs_position, space_position = (line.find(tabs), line.find(space))\n\n        if tabs_position > -1 and space_position > -1:\n            if space_position < tabs_position:\n                separator = space\n            else:\n                separator = tabs\n        elif not tabs_position == -1:\n            separator = tabs\n        elif not space_position == -1:\n            separator = space\n        else:\n            separator = \"\"\n\n        if separator:\n            splited_line = line.split(separator)\n\n            try:\n                index = 1\n                while index < len(splited_line):\n                    if splited_line[index]:\n                        break\n                    index += 1\n\n                if \"#\" in splited_line[index]:\n                    index_comment = splited_line[index].find(\"#\")\n\n                    if index_comment > -1:\n                        comment = splited_line[index][index_comment:]\n\n                        splited_line[index] = (\n                            splited_line[index]\n                            .split(comment)[0]\n                            .encode(\"IDNA\")\n                            .decode(\"UTF-8\")\n                            + comment\n                        )\n\n                splited_line[index] = splited_line[index].encode(\"IDNA\").decode(\"UTF-8\")\n            except IndexError:\n                pass\n            return separator.join(splited_line)\n        return line.encode(\"IDNA\").decode(\"UTF-8\")\n    return line.encode(\"UTF-8\").decode(\"UTF-8\")\n\n\n# Helper Functions\ndef maybe_copy_example_file(file_path):\n    \"\"\"\n    Given a file path, copy over its \".example\" if the path doesn't exist.\n\n    If the path does exist, nothing happens in this function.\n\n    If the path doesn't exist, and the \".example\" file doesn't exist, nothing happens in this function.\n\n    Parameters\n    ----------\n    file_path : str\n        The full file path to check.\n    \"\"\"\n\n    if not os.path.isfile(file_path):\n        example_file_path = file_path + \".example\"\n        if os.path.isfile(example_file_path):\n            shutil.copyfile(example_file_path, file_path)\n\n\ndef get_file_by_url(url, params=None, **kwargs):\n    \"\"\"\n    Retrieve the contents of the hosts file at the URL, then pass it through domain_to_idna().\n\n    Parameters are passed to the requests.get() function.\n\n    Parameters\n    ----------\n    url : str or bytes\n        URL for the new Request object.\n    params :\n        Dictionary, list of tuples or bytes to send in the query string for the Request.\n    kwargs :\n        Optional arguments that request takes.\n\n    Returns\n    -------\n    url_data : str or None\n        The data retrieved at that URL from the file. Returns None if the\n        attempted retrieval is unsuccessful.\n    \"\"\"\n\n    try:\n        req = requests.get(url=url, params=params, **kwargs)\n    except requests.exceptions.RequestException:\n        print(\"Error retrieving data from {}\".format(url))\n        return None\n\n    req.encoding = req.apparent_encoding\n    res_text = \"\\n\".join([domain_to_idna(line) for line in req.text.split(\"\\n\")])\n    return res_text\n\n\ndef write_data(f, data):\n    \"\"\"\n    Write data to a file object.\n\n    Parameters\n    ----------\n    f : file\n        The file object at which to write the data.\n    data : str\n        The data to write to the file.\n    \"\"\"\n\n    f.write(bytes(data, \"UTF-8\"))\n\n\ndef list_dir_no_hidden(path):\n    \"\"\"\n    List all files in a directory, except for hidden files.\n\n    Parameters\n    ----------\n    path : str\n        The path of the directory whose files we wish to list.\n    \"\"\"\n\n    return glob(os.path.join(path, \"*\"))\n\n\ndef query_yes_no(question, default=\"yes\"):\n    \"\"\"\n    Ask a yes/no question via input() and get answer from the user.\n\n    Inspired by the following implementation:\n\n    https://code.activestate.com/recipes/577058/\n\n    Parameters\n    ----------\n    question : str\n        The question presented to the user.\n    default : str, default \"yes\"\n        The presumed answer if the user just hits <Enter>. It must be \"yes\",\n        \"no\", or None (means an answer is required of the user).\n\n    Returns\n    -------\n    yes : Whether or not the user replied yes to the question.\n    \"\"\"\n\n    valid = {\"yes\": \"yes\", \"y\": \"yes\", \"ye\": \"yes\", \"no\": \"no\", \"n\": \"no\"}\n    prompt = {None: \" [y/n] \", \"yes\": \" [Y/n] \", \"no\": \" [y/N] \"}.get(default, None)\n\n    if not prompt:\n        raise ValueError(\"invalid default answer: '%s'\" % default)\n\n    reply = None\n\n    while not reply:\n        sys.stdout.write(colorize(question, Colors.PROMPT) + prompt)\n\n        choice = input().lower()\n        reply = None\n\n        if default and not choice:\n            reply = default\n        elif choice in valid:\n            reply = valid[choice]\n        else:\n            print_failure(\"Please respond with 'yes' or 'no' (or 'y' or 'n').\\n\")\n\n    return reply == \"yes\"\n\n\ndef is_valid_user_provided_domain_format(domain):\n    \"\"\"\n    Check whether a provided domain is valid.\n\n    Parameters\n    ----------\n    domain : str\n        The domain against which to check.\n\n    Returns\n    -------\n    valid_domain : bool\n        Whether or not the domain provided is valid.\n    \"\"\"\n\n    if domain == \"\":\n        print(\"You didn't enter a domain. Try again.\")\n        return False\n\n    domain_regex = re.compile(r\"www\\d{0,3}[.]|https?\")\n\n    if domain_regex.match(domain):\n        print(\n            \"The domain \" + domain + \" is not valid. Do not include \"\n            \"www.domain.com or http(s)://domain.com. Try again.\"\n        )\n        return False\n    else:\n        return True\n\n\ndef recursive_glob(stem, file_pattern):\n    \"\"\"\n    Recursively match files in a directory according to a pattern.\n\n    Parameters\n    ----------\n    stem : str\n        The directory in which to recurse\n    file_pattern : str\n        The filename regex pattern to which to match.\n\n    Returns\n    -------\n    matches_list : list\n        A list of filenames in the directory that match the file pattern.\n    \"\"\"\n\n    if sys.version_info >= (3, 5):\n        return glob(stem + \"/**/\" + file_pattern, recursive=True)\n    else:\n        # gh-316: this will avoid invalid unicode comparisons in Python 2.x\n        if stem == str(\"*\"):\n            stem = \".\"\n        matches = []\n        for root, dirnames, filenames in os.walk(stem):\n            for filename in fnmatch.filter(filenames, file_pattern):\n                matches.append(path_join_robust(root, filename))\n    return matches\n\n\ndef path_join_robust(path, *paths):\n    \"\"\"\n    Wrapper around `os.path.join` with handling for locale issues.\n\n    Parameters\n    ----------\n    path : str\n        The first path to join.\n    paths : varargs\n        Subsequent path strings to join.\n\n    Returns\n    -------\n    joined_path : str\n        The joined path string of the two path inputs.\n\n    Raises\n    ------\n    locale.Error : A locale issue was detected that prevents path joining.\n    \"\"\"\n\n    try:\n        # gh-316: joining unicode and str can be saddening in Python 2.x\n        path = str(path)\n        paths = [str(another_path) for another_path in paths]\n\n        return os.path.join(path, *paths)\n    except UnicodeDecodeError as e:\n        raise locale.Error(\n            \"Unable to construct path. This is likely a LOCALE issue:\\n\\n\" + str(e)\n        )\n\n\n# Colors\nclass Colors(object):\n    PROMPT = \"\\033[94m\"\n    SUCCESS = \"\\033[92m\"\n    FAIL = \"\\033[91m\"\n    ENDC = \"\\033[0m\"\n\n\ndef supports_color():\n    \"\"\"\n    Check whether the running terminal or command prompt supports color.\n\n    Inspired by StackOverflow link (and Django implementation) here:\n\n    https://stackoverflow.com/questions/7445658\n\n    Returns\n    -------\n    colors_supported : bool\n        Whether the running terminal or command prompt supports color.\n    \"\"\"\n\n    sys_platform = sys.platform\n    supported = sys_platform != \"Pocket PC\" and (\n        sys_platform != \"win32\" or \"ANSICON\" in os.environ\n    )\n\n    atty_connected = hasattr(sys.stdout, \"isatty\") and sys.stdout.isatty()\n    return supported and atty_connected\n\n\ndef colorize(text, color):\n    \"\"\"\n    Wrap a string so that it displays in a particular color.\n\n    This function adds a prefix and suffix to a text string so that it is\n    displayed as a particular color, either in command prompt or the terminal.\n\n    If the running terminal or command prompt does not support color, the\n    original text is returned without being wrapped.\n\n    Parameters\n    ----------\n    text : str\n        The message to display.\n    color : str\n        The color string prefix to put before the text.\n\n    Returns\n    -------\n    wrapped_str : str\n        The wrapped string to display in color, if possible.\n    \"\"\"\n\n    if not supports_color():\n        return text\n\n    return color + text + Colors.ENDC\n\n\ndef print_success(text):\n    \"\"\"\n    Print a success message.\n\n    Parameters\n    ----------\n    text : str\n        The message to display.\n    \"\"\"\n\n    print(colorize(text, Colors.SUCCESS))\n\n\ndef print_failure(text):\n    \"\"\"\n    Print a failure message.\n\n    Parameters\n    ----------\n    text : str\n        The message to display.\n    \"\"\"\n\n    print(colorize(text, Colors.FAIL))\n\n\n# End Helper Functions\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "updateHostsWindows.bat",
          "type": "blob",
          "size": 1.67,
          "content": "::\n:: This script will first create a backup of the original or the current hosts\n:: file and save it in a file named \"hosts.skel\".\n::\n:: If the \"hosts.skel\" file exists, the new hosts file with the customized unified\n:: hosts will be copied to the proper path. Next, the DNS cache will be refreshed.\n::\n:: THIS BAT FILE MUST BE LAUNCHED WITH ADMINISTRATOR PRIVILEGES\n:: Admin privileges script based on https://stackoverflow.com/a/10052222\n::\n\n@echo off\ntitle Update Hosts\n\n:: Check if we are an administrator. If not, exit immediately.\n:: BatchGotAdmin\n:: Check for permissions\nif \"%PROCESSOR_ARCHITECTURE%\" equ \"amd64\" (\n  >nul 2>&1 \"%SYSTEMROOT%\\SysWOW64\\cacls.exe\" \"%SYSTEMROOT%\\SysWOW64\\config\\system\"\n) else (\n  >nul 2>&1 \"%SYSTEMROOT%\\system32\\cacls.exe\" \"%SYSTEMROOT%\\system32\\config\\system\"\n)\n\n:: If the error flag set, we do not have admin rights.\nif %ERRORLEVEL% neq 0 (\n  echo Requesting administrative privileges...\n  goto UACPrompt\n) else (\n  goto gotAdmin\n)\n\n:UACPrompt\necho Set UAC = CreateObject^(\"Shell.Application\"^) > \"%TEMP%\\getadmin.vbs\"\nset params= %*\necho UAC.ShellExecute \"cmd.exe\", \"/c \"\"%~s0\"\" %params:\"=\"\"%\", \"\", \"runas\", 1 >> \"%TEMP%\\getadmin.vbs\"\n\nwscript.exe \"%TEMP%\\getadmin.vbs\"\ndel \"%TEMP%\\getadmin.vbs\"\nexit /b\n\n:gotAdmin\ncd /d \"%~dp0\"\n\n:BackupHosts\n:: Backup the default hosts file\nif not exist \"%WINDIR%\\System32\\drivers\\etc\\hosts.skel\" (\n  copy /v \"%WINDIR%\\System32\\drivers\\etc\\hosts\" \"%WINDIR%\\System32\\drivers\\etc\\hosts.skel\"\n)\n\n:UpdateHosts\n:: Update hosts file\npy updateHostsFile.py --auto --minimise %*\n\n:: Copy over the new hosts file in-place\ncopy /y /v hosts \"%WINDIR%\\System32\\drivers\\etc\\\"\n\n:: Flush the DNS cache\nipconfig /flushdns\n\n:: Summary note\npause\n"
        },
        {
          "name": "updateReadme.py",
          "type": "blob",
          "size": 4.17,
          "content": "#!/usr/bin/env python3\n\n# Script by Steven Black\n# https://github.com/StevenBlack\n#\n# This Python script will update the readme files in this repo.\n\nimport json\nimport os\nimport time\nfrom string import Template\n\n# Project Settings\nBASEDIR_PATH = os.path.dirname(os.path.realpath(__file__))\nREADME_TEMPLATE = os.path.join(BASEDIR_PATH, \"readme_template.md\")\nREADME_FILENAME = \"readme.md\"\nREADME_DATA_FILENAME = \"readmeData.json\"\n\n\ndef main():\n    s = Template(\n        \"${description} | [Readme](https://github.com/StevenBlack/\"\n        \"hosts/blob/master/${location}readme.md) | \"\n        \"[link](https://raw.githubusercontent.com/StevenBlack/\"\n        \"hosts/master/${location}hosts) | \"\n        \"${fmtentries} | \"\n        \"[link](http://sbc.io/hosts/${location}hosts)\"\n    )\n    with open(README_DATA_FILENAME, \"r\", encoding=\"utf-8\", newline=\"\\n\") as f:\n        data = json.load(f)\n\n    keys = list(data.keys())\n    # Sort by the number of en-dashes in the key\n    # and then by the key string itself.\n    keys.sort(key=lambda item: (item.replace(\"-only\", \"\").count(\"-\"), item.replace(\"-only\", \"\")))\n\n    toc_rows = \"\"\n    for key in keys:\n        data[key][\"fmtentries\"] = \"{:,}\".format(data[key][\"entries\"])\n        if key == \"base\":\n            data[key][\"description\"] = \"Unified hosts = **(adware + malware)**\"\n        else:\n            if data[key][\"no_unified_hosts\"]:\n                data[key][\"description\"] = (\n                    \"**\" + key.replace(\"-only\", \"\").replace(\"-\", \" + \") + \"**\"\n                )\n            else:\n                data[key][\"description\"] = (\n                    \"Unified hosts **+ \" + key.replace(\"-\", \" + \") + \"**\"\n                )\n\n        if \"\\\\\" in data[key][\"location\"]:\n            data[key][\"location\"] = data[key][\"location\"].replace(\"\\\\\", \"/\")\n\n        toc_rows += s.substitute(data[key]) + \"\\n\"\n\n    row_defaults = {\n        \"name\": \"\",\n        \"homeurl\": \"\",\n        \"url\": \"\",\n        \"license\": \"\",\n        \"issues\": \"\",\n        \"description\": \"\",\n    }\n\n    t = Template(\n        \"${name} |[link](${homeurl})\"\n        \" | [raw](${url}) | ${license} | [issues](${issues})| ${description}\"\n    )\n    size_history_graph = \"![Size history](https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts_file_size_history.png)\"\n    for key in keys:\n        extensions = key.replace(\"-only\", \"\").replace(\"-\", \", \")\n        extensions_str = \"* Extensions: **\" + extensions + \"**.\"\n        if data[key][\"no_unified_hosts\"]:\n            extensions_header = \"Limited to the extensions: \" + extensions\n        else:\n            extensions_header = \"Unified hosts file with \" + extensions + \" extensions\"\n\n        source_rows = \"\"\n        source_list = data[key][\"sourcesdata\"]\n\n        for source in source_list:\n            this_row = {}\n            this_row.update(row_defaults)\n            this_row.update(source)\n            source_rows += t.substitute(this_row) + \"\\n\"\n\n        with open(\n            os.path.join(data[key][\"location\"], README_FILENAME),\n            \"wt\",\n            encoding=\"utf-8\",\n            newline=\"\\n\",\n        ) as out:\n            for line in open(README_TEMPLATE, encoding=\"utf-8\", newline=\"\\n\"):\n                line = line.replace(\n                    \"@GEN_DATE@\", time.strftime(\"%B %d %Y\", time.gmtime())\n                )\n                line = line.replace(\"@EXTENSIONS@\", extensions_str)\n                line = line.replace(\"@EXTENSIONS_HEADER@\", extensions_header)\n                line = line.replace(\n                    \"@NUM_ENTRIES@\", \"{:,}\".format(data[key][\"entries\"])\n                )\n                line = line.replace(\n                    \"@SUBFOLDER@\", os.path.join(data[key][\"location\"], \"\")\n                )\n                line = line.replace(\"@TOCROWS@\", toc_rows)\n                line = line.replace(\"@SOURCEROWS@\", source_rows)\n                # insert the size graph on the home readme only, for now.\n                if key == \"base\":\n                    line = line.replace(\n                        \"@SIZEHISTORY@\", size_history_graph\n                    )\n                else:\n                    line = line.replace(\n                        \"@SIZEHISTORY@\", \"![Size history](stats.png)\")\n\n                out.write(line)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "whitelist.example",
          "type": "blob",
          "size": 0.07,
          "content": "# Domains added below will be ignored, For example:\n# your-domain-name.com\n"
        }
      ]
    }
  ]
}