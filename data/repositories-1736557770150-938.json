{
  "metadata": {
    "timestamp": 1736557770150,
    "page": 938,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kovidgoyal/kitty",
      "stars": 25757,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.36,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ntrim_trailing_whitespace = true\n\n[{Makefile,*.terminfo,*.go}]\nindent_style = tab\n\n# Autogenerated files with tabs below this line.\n\n[kitty/{unicode-data.c,emoji.h,wcwidth-std.h}]\nindent_style = tab\n\n[kittens/unicode_input/names.h]\nindent_style = tab\n\n[glfw/wayland-*-protocol.{c,h}]\nindent_style = tab\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.31,
          "content": "kitty/wcwidth-std.h linguist-generated=true\nkitty/emoji.h linguist-generated=true\nkitty/charsets.c linguist-generated=true\nkitty/key_encoding.py linguist-generated=true\nkitty/unicode-data.c linguist-generated=true\nkitty/rowcolumn-diacritics.c linguist-generated=true\nkitty/rgb.py linguist-generated=true\nkitty/srgb_gamma.* linguist-generated=true\nkitty/gl-wrapper.* linguist-generated=true\nkitty/glfw-wrapper.* linguist-generated=true\nkitty/parse-graphics-command.h linguist-generated=true\nkitty/options/types.py linguist-generated=true\nkitty/options/parse.py linguist-generated=true\nkitty/options/to-c-generated.h linguist-generated=true\nkittens/diff/options/types.py linguist-generated=true\nkittens/diff/options/parse.py linguist-generated=true\nglfw/*.c linguist-vendored=true\nglfw/*.h linguist-vendored=true\n3rdparty/** linguist-vendored=true\nkittens/unicode_input/names.h linguist-generated=true\ntools/wcswidth/std.go linguist-generated=true\ntools/unicode_names/names.txt linguist-generated=true\nterminfo/kitty.term* linguist-generated=true\nterminfo/x/* linguist-generated=true\n*_generated.h linguist-generated=true\n*_generated.go linguist-generated=true\n*_generated_test.go linguist-generated=true\n*_generated_test.s linguist-generated=true\n*_generated.s linguist-generated=true\n\n*.py  text diff=python\n*.m  text diff=objc\n*.go text diff=go\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.42,
          "content": "*.so\n*.pyc\n*.pyo\n*.bin\n*_stub.pyi\n*_generated.go\n*_generated.s\n*_generated_test.go\n*_generated_test.s\n*_generated.h\n/.dmypy.json\n/dependencies\n/tags\n/build/\n/fonts/\n/linux-package/\n/kitty.app/\n/glad/out/\n/kitty/launcher/kitt*\n/*.dSYM/\n__pycache__/\n/glfw/wayland-*-client-protocol.[ch]\n/docs/_build/\n/docs/generated/\n/tools/simdstring/simdstring.test\n/.mypy_cache\n/.ruff_cache\n.DS_Store\n.cache\nbypy/b\nbypy/virtual-machines.conf\n"
        },
        {
          "name": ".ignore",
          "type": "blob",
          "size": 0.03,
          "content": "kittens/unicode_input/names.h\n"
        },
        {
          "name": "3rdparty",
          "type": "tree",
          "content": null
        },
        {
          "name": "Brewfile",
          "type": "blob",
          "size": 0.11,
          "content": "brew \"zlib\"\nbrew \"xxhash\"\nbrew \"simde\"\nbrew \"python\"\nbrew \"imagemagick\"\nbrew \"harfbuzz\"\nbrew \"sphinx-doc\"\nbrew \"go\"\n"
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 0.05,
          "content": "See https://sw.kovidgoyal.net/kitty/changelog/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.28,
          "content": "### Reporting bugs\n\nPlease first search existing bug reports (especially closed ones) for a report\nthat matches your issue.\n\nWhen reporting a bug, provide full details of your environment, that means, at\na minimum, kitty version, OS and OS version, kitty config (ideally a minimal\nconfig to reproduce the issue with).\n\nNote that bugs and feature requests are often closed quickly as they are either\nfixed or deemed wontfix/invalid. In my experience, this is the only scalable way to\nmanage a bug tracker. Feel free to continue to post to a closed bug report\nif you would like to discuss the issue further. Being closed does not mean you\nwill not get any more responses.\n\n### Contributing code\n\nInstall [the dependencies](https://sw.kovidgoyal.net/kitty/build/#dependencies)\nusing your favorite package manager. Build and run kitty [from\nsource](https://sw.kovidgoyal.net/kitty/build/#install-and-run-from-source).\n\nMake a fork, submit your Pull Request. If it's a large/controversial change, open an issue\nbeforehand to discuss it, so that you don't waste your time making a pull\nrequest that gets rejected.\n\nIf the code you are submitting is reasonably easily testable, please contribute\ntests as well (see the `kitty_tests/` sub-directory for existing tests, which\ncan be run with `./test.py`).\n\nThat's it.\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 0.12,
          "content": "[To build from source](https://sw.kovidgoyal.net/kitty/build/)\n\n[Pre-built binaries](https://sw.kovidgoyal.net/kitty/binary/)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.33,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.02,
          "content": "ifdef V\n\tVVAL=--verbose\nendif\nifdef VERBOSE\n\tVVAL=--verbose\nendif\n\nifdef FAIL_WARN\nexport FAIL_WARN\nendif\n\nall:\n\tpython3 setup.py $(VVAL)\n\ntest:\n\tpython3 setup.py $(VVAL) test\n\nclean:\n\tpython3 setup.py $(VVAL) clean\n\n# A debug build\ndebug:\n\tpython3 setup.py build $(VVAL) --debug\n\ndebug-event-loop:\n\tpython3 setup.py build $(VVAL) --debug --extra-logging=event-loop\n\n# Build with the ASAN and UBSAN sanitizers\nasan:\n\tpython3 setup.py build $(VVAL) --debug --sanitize\n\nprofile:\n\tpython3 setup.py build $(VVAL) --profile\n\napp:\n\tpython3 setup.py kitty.app $(VVAL)\n\nlinux-package: FORCE\n\trm -rf linux-package\n\tpython3 setup.py linux-package\n\nFORCE:\n\nman:\n\t$(MAKE) -C docs man\n\nhtml:\n\t$(MAKE) -C docs html\n\ndirhtml:\n\t$(MAKE) -C docs dirhtml\n\nlinkcheck:\n\t$(MAKE) -C docs linkcheck\n\nwebsite:\n\t./publish.py --only website\n\ndocs: man html\n\n\ndevelop-docs:\n\t$(MAKE) -C docs develop-docs\n\n\nprepare-for-cross-compile: clean all\n\tpython3 setup.py $(VVAL) clean --clean-for-cross-compile\n\ncross-compile:\n\tpython3 setup.py linux-package --skip-code-generation\n\t\n"
        },
        {
          "name": "README.asciidoc",
          "type": "blob",
          "size": 0.74,
          "content": "= kitty - the fast, feature-rich, cross-platform, GPU based terminal\n\nSee https://sw.kovidgoyal.net/kitty/[the kitty website].\n\nimage:https://github.com/kovidgoyal/kitty/workflows/CI/badge.svg[\"Build status\", link=\"https://github.com/kovidgoyal/kitty/actions?query=workflow%3ACI\"]\n\nhttps://sw.kovidgoyal.net/kitty/faq/[Frequently Asked Questions]\n\nTo ask other questions about kitty usage, use either the https://github.com/kovidgoyal/kitty/discussions/[discussions on GitHub] or the\nhttps://www.reddit.com/r/KittyTerminal[Reddit community]\n\nPackaging status in various repositories:\n\nimage:https://repology.org/badge/vertical-allrepos/kitty-terminal.svg?columns=3&header=kitty[\"Packaging status\", link=\"https://repology.org/project/kitty-terminal/versions\"]\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.37,
          "content": "# Security Policy\n\n## Supported Versions\n\nThere are no security specific releases of kitty. Security bugs are fixed\nand released just like all other bugs.\n\n## Reporting a vulnerability\n\nPreferably send an email to kovid at kovidgoyal.net or open an issue in the\nGitHub repository, though the latter means you are disclosing the vulnerability\npublicly before it can be fixed.\n"
        },
        {
          "name": "__main__.py",
          "type": "blob",
          "size": 0.17,
          "content": "#!/usr/bin/env python\n# License: GPL v3 Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>\n\n\nif __name__ == '__main__':\n    from kitty.entry_points import main\n    main()\n"
        },
        {
          "name": "benchmark.py",
          "type": "blob",
          "size": 2.6,
          "content": "#!./kitty/launcher/kitty +launch\n# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>\n\nimport fcntl\nimport io\nimport os\nimport select\nimport signal\nimport struct\nimport sys\nimport termios\nimport time\nfrom pty import CHILD, fork\n\nfrom kitty.constants import kitten_exe\nfrom kitty.fast_data_types import Screen, safe_pipe\nfrom kitty.utils import read_screen_size\n\n\ndef run_parsing_benchmark(cell_width: int = 10, cell_height: int = 20, scrollback: int = 20000) -> None:\n    isatty = sys.stdout.isatty()\n    if isatty:\n        sz = read_screen_size()\n        columns, rows = sz.cols, sz.rows\n    else:\n        columns, rows = 80, 25\n    child_pid, master_fd = fork()\n    is_child = child_pid == CHILD\n    argv = [kitten_exe(), '__benchmark__', '--with-scrollback']\n    if is_child:\n        while read_screen_size().width != columns * cell_width:\n            time.sleep(0.01)\n        signal.pthread_sigmask(signal.SIG_SETMASK, ())\n        os.execvp(argv[0], argv)\n    # os.set_blocking(master_fd, False)\n    x_pixels = columns * cell_width\n    y_pixels = rows * cell_height\n    s = struct.pack('HHHH', rows, columns, x_pixels, y_pixels)\n    fcntl.ioctl(master_fd, termios.TIOCSWINSZ, s)\n\n    write_buf = b''\n    r_pipe, w_pipe = safe_pipe(True)\n    class ToChild:\n        def write(self, x: bytes | str) -> None:\n            nonlocal write_buf\n            if isinstance(x, str):\n                x = x.encode()\n            write_buf += x\n            os.write(w_pipe, b'1')\n\n    screen = Screen(None, rows, columns, scrollback, cell_width, cell_height, 0, ToChild())\n\n    def parse_bytes(data: bytes) -> None:\n        data = memoryview(data)\n        while data:\n            dest = screen.test_create_write_buffer()\n            s = screen.test_commit_write_buffer(data, dest)\n            data = data[s:]\n            screen.test_parse_written_data()\n\n\n    while True:\n        rd, wd, _ = select.select([master_fd, r_pipe], [master_fd] if write_buf else [], [])\n        if r_pipe in rd:\n            os.read(r_pipe, 256)\n        if master_fd in rd:\n            try:\n                data = os.read(master_fd, io.DEFAULT_BUFFER_SIZE)\n            except OSError:\n                data = b''\n            if not data:\n                break\n            parse_bytes(data)\n        if master_fd in wd:\n            n = os.write(master_fd, write_buf)\n            write_buf = write_buf[n:]\n    if isatty:\n        lines: list[str] = []\n        screen.linebuf.as_ansi(lines.append)\n        sys.stdout.write(''.join(lines))\n    else:\n        sys.stdout.write(str(screen.linebuf))\n\n\ndef main() -> None:\n    run_parsing_benchmark()\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "build-terminfo",
          "type": "blob",
          "size": 1.95,
          "content": "#!/usr/bin/env python\n# vim:fileencoding=utf-8\n# License: GPL v3 Copyright: 2019, Kovid Goyal <kovid at kovidgoyal.net>\n\nimport glob\nimport os\nimport shutil\nimport subprocess\nimport sys\nimport tempfile\n\n\ndef compile_terminfo(base):\n    with tempfile.TemporaryDirectory() as tdir:\n        proc = subprocess.run(['tic', '-x', f'-o{tdir}', 'terminfo/kitty.terminfo'], capture_output=True)\n        if proc.returncode != 0:\n            sys.stderr.buffer.write(proc.stderr)\n            raise SystemExit(proc.returncode)\n        tfiles = glob.glob(os.path.join(tdir, '*', 'xterm-kitty'))\n        if not tfiles:\n            raise SystemExit('tic failed to output the compiled kitty terminfo file')\n\n        tfile = tfiles[0]\n        directory, xterm_kitty = os.path.split(tfile)\n        _, directory = os.path.split(directory)\n        odir = os.path.join(base, directory)\n        os.makedirs(odir, exist_ok=True)\n        ofile = os.path.join(odir, xterm_kitty)\n        shutil.move(tfile, ofile)\n    return ofile\n\n\ndef generate_terminfo():\n    base = os.path.dirname(os.path.abspath(__file__))\n    os.chdir(base)\n    sys.path.insert(0, base)\n\n    from kitty.terminfo import generate_terminfo\n\n    with open('terminfo/kitty.terminfo', 'w') as f:\n        f.write(generate_terminfo())\n    proc = subprocess.run(['tic', '-CrT0', 'terminfo/kitty.terminfo'], capture_output=True)\n    if proc.returncode != 0:\n        sys.stderr.buffer.write(proc.stderr)\n        raise SystemExit(proc.returncode)\n    tcap = proc.stdout.decode('utf-8').splitlines()[-1]\n    with open('terminfo/kitty.termcap', 'w') as f:\n        f.write(tcap)\n\n    dbfile = compile_terminfo(os.path.join(base, 'terminfo'))\n    with open(dbfile, 'rb') as f:\n        data = f.read()\n    with open('kitty/terminfo.h', 'w') as f:\n        print(f'static const uint8_t terminfo_data[{len(data)}] = ''{', file=f)\n        for b in data:\n            print(b, end=', ', file=f)\n        print('};', file=f)\n\n\nif __name__ == '__main__':\n    generate_terminfo()\n"
        },
        {
          "name": "bypy",
          "type": "tree",
          "content": null
        },
        {
          "name": "count-lines-of-code",
          "type": "blob",
          "size": 0.74,
          "content": "#!/usr/bin/env python\n\nimport subprocess\n\nls_files = subprocess.check_output([ 'git', 'ls-files']).decode('utf-8')\nall_files = set(ls_files.splitlines())\nall_files.discard('')\nfor attr in ('linguist-generated', 'linguist-vendored'):\n    cp = subprocess.run(['git', 'check-attr', attr, '--stdin'],\n                        check=True, stdout=subprocess.PIPE, input='\\n'.join(all_files).encode('utf-8'))\n    for line in cp.stdout.decode().splitlines():\n        if line.endswith(' true'):\n            fname = line.split(':', 1)[0]\n            all_files.discard(fname)\n\nall_files -= {'gen/nerd-fonts-glyphs.txt', 'gen/rowcolumn-diacritics.txt'}\ncp = subprocess.run(['cloc', '--list-file', '-'], input='\\n'.join(all_files).encode())\nraise SystemExit(cp.returncode)\n"
        },
        {
          "name": "dev.sh",
          "type": "blob",
          "size": 0.16,
          "content": "#!/bin/sh\n#\n# dev.sh\n# Copyright (C) 2023 Kovid Goyal <kovid at kovidgoyal.net>\n#\n# Distributed under terms of the GPLv3 license.\n#\n\nexec go run bypy/devenv.go \"$@\"\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gen",
          "type": "tree",
          "content": null
        },
        {
          "name": "glad",
          "type": "tree",
          "content": null
        },
        {
          "name": "glfw",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.21,
          "content": "module kitty\n\ngo 1.23\n\nrequire (\n\tgithub.com/ALTree/bigfloat v0.2.0\n\tgithub.com/alecthomas/chroma/v2 v2.15.0\n\tgithub.com/bmatcuk/doublestar/v4 v4.7.1\n\tgithub.com/dlclark/regexp2 v1.11.4\n\tgithub.com/edwvee/exiffix v0.0.0-20240229113213-0dbb146775be\n\tgithub.com/google/go-cmp v0.6.0\n\tgithub.com/google/uuid v1.6.0\n\tgithub.com/kovidgoyal/imaging v1.6.3\n\tgithub.com/seancfoley/ipaddress-go v1.7.0\n\tgithub.com/shirou/gopsutil/v3 v3.24.5\n\tgithub.com/zeebo/xxh3 v1.0.2\n\tgolang.org/x/exp v0.0.0-20230801115018-d63ba01acd4b\n\tgolang.org/x/image v0.23.0\n\tgolang.org/x/sys v0.29.0\n\thowett.net/plist v1.0.1\n)\n\nrequire (\n\tgithub.com/disintegration/imaging v1.6.2 // indirect\n\tgithub.com/go-ole/go-ole v1.2.6 // indirect\n\tgithub.com/klauspost/cpuid/v2 v2.2.5 // indirect\n\tgithub.com/lufia/plan9stats v0.0.0-20230326075908-cb1d2100619a // indirect\n\tgithub.com/power-devops/perfstat v0.0.0-20221212215047-62379fc7944b // indirect\n\tgithub.com/rwcarlsen/goexif v0.0.0-20190401172101-9e8deecbddbd // indirect\n\tgithub.com/seancfoley/bintree v1.3.1 // indirect\n\tgithub.com/shoenig/go-m1cpu v0.1.6 // indirect\n\tgithub.com/tklauser/go-sysconf v0.3.12 // indirect\n\tgithub.com/tklauser/numcpus v0.6.1 // indirect\n\tgithub.com/yusufpapurcu/wmi v1.2.4 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 7.13,
          "content": "github.com/ALTree/bigfloat v0.2.0 h1:AwNzawrpFuw55/YDVlcPw0F0cmmXrmngBHhVrvdXPvM=\ngithub.com/ALTree/bigfloat v0.2.0/go.mod h1:+NaH2gLeY6RPBPPQf4aRotPPStg+eXc8f9ZaE4vRfD4=\ngithub.com/alecthomas/assert/v2 v2.11.0 h1:2Q9r3ki8+JYXvGsDyBXwH3LcJ+WK5D0gc5E8vS6K3D0=\ngithub.com/alecthomas/assert/v2 v2.11.0/go.mod h1:Bze95FyfUr7x34QZrjL+XP+0qgp/zg8yS+TtBj1WA3k=\ngithub.com/alecthomas/chroma/v2 v2.15.0 h1:LxXTQHFoYrstG2nnV9y2X5O94sOBzf0CIUpSTbpxvMc=\ngithub.com/alecthomas/chroma/v2 v2.15.0/go.mod h1:gUhVLrPDXPtp/f+L1jo9xepo9gL4eLwRuGAunSZMkio=\ngithub.com/alecthomas/repr v0.4.0 h1:GhI2A8MACjfegCPVq9f1FLvIBS+DrQ2KQBFZP1iFzXc=\ngithub.com/alecthomas/repr v0.4.0/go.mod h1:Fr0507jx4eOXV7AlPV6AVZLYrLIuIeSOWtW57eE/O/4=\ngithub.com/bmatcuk/doublestar/v4 v4.7.1 h1:fdDeAqgT47acgwd9bd9HxJRDmc9UAmPpc+2m0CXv75Q=\ngithub.com/bmatcuk/doublestar/v4 v4.7.1/go.mod h1:xBQ8jztBU6kakFMg+8WGxn0c6z1fTSPVIjEY1Wr7jzc=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/disintegration/imaging v1.6.2 h1:w1LecBlG2Lnp8B3jk5zSuNqd7b4DXhcjwek1ei82L+c=\ngithub.com/disintegration/imaging v1.6.2/go.mod h1:44/5580QXChDfwIclfc/PCwrr44amcmDAg8hxG0Ewe4=\ngithub.com/dlclark/regexp2 v1.11.4 h1:rPYF9/LECdNymJufQKmri9gV604RvvABwgOA8un7yAo=\ngithub.com/dlclark/regexp2 v1.11.4/go.mod h1:DHkYz0B9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=\ngithub.com/edwvee/exiffix v0.0.0-20240229113213-0dbb146775be h1:FNPYI8/ifKGW7kdBdlogyGGaPXZmOXBbV1uz4Amr3s0=\ngithub.com/edwvee/exiffix v0.0.0-20240229113213-0dbb146775be/go.mod h1:G3dK5MziX9e4jUa8PWjowCOPCcyQwxsZ5a0oYA73280=\ngithub.com/go-ole/go-ole v1.2.6 h1:/Fpf6oFPoeFik9ty7siob0G6Ke8QvQEuVcuChpwXzpY=\ngithub.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/hexops/gotextdiff v1.0.3 h1:gitA9+qJrrTCsiCl7+kh75nPqQt1cx4ZkudSTLoUqJM=\ngithub.com/hexops/gotextdiff v1.0.3/go.mod h1:pSWU5MAI3yDq+fZBTazCSJysOMbxWL1BSow5/V2vxeg=\ngithub.com/jessevdk/go-flags v1.4.0/go.mod h1:4FA24M0QyGHXBuZZK/XkWh8h0e1EYbRYJSGM75WSRxI=\ngithub.com/klauspost/cpuid/v2 v2.2.5 h1:0E5MSMDEoAulmXNFquVs//DdoomxaoTY1kUhbc/qbZg=\ngithub.com/klauspost/cpuid/v2 v2.2.5/go.mod h1:Lcz8mBdAVJIBVzewtcLocK12l3Y+JytZYpaMropDUws=\ngithub.com/kovidgoyal/imaging v1.6.3 h1:iNPpv7ygiaB/NOztc6APMT7yr9UwBS+rOZwIbAdtyY8=\ngithub.com/kovidgoyal/imaging v1.6.3/go.mod h1:sHvcLOOVhJuto2IoNdPLEqnAUoL5ZfHEF0PpNH+882g=\ngithub.com/lufia/plan9stats v0.0.0-20230326075908-cb1d2100619a h1:N9zuLhTvBSRt0gWSiJswwQ2HqDmtX/ZCDJURnKUt1Ik=\ngithub.com/lufia/plan9stats v0.0.0-20230326075908-cb1d2100619a/go.mod h1:JKx41uQRwqlTZabZc+kILPrO/3jlKnQ2Z8b7YiVw5cE=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/power-devops/perfstat v0.0.0-20221212215047-62379fc7944b h1:0LFwY6Q3gMACTjAbMZBjXAqTOzOwFaj2Ld6cjeQ7Rig=\ngithub.com/power-devops/perfstat v0.0.0-20221212215047-62379fc7944b/go.mod h1:OmDBASR4679mdNQnz2pUhc2G8CO2JrUAVFDRBDP/hJE=\ngithub.com/rwcarlsen/goexif v0.0.0-20190401172101-9e8deecbddbd h1:CmH9+J6ZSsIjUK3dcGsnCnO41eRBOnY12zwkn5qVwgc=\ngithub.com/rwcarlsen/goexif v0.0.0-20190401172101-9e8deecbddbd/go.mod h1:hPqNNc0+uJM6H+SuU8sEs5K5IQeKccPqeSjfgcKGgPk=\ngithub.com/seancfoley/bintree v1.3.1 h1:cqmmQK7Jm4aw8gna0bP+huu5leVOgHGSJBEpUx3EXGI=\ngithub.com/seancfoley/bintree v1.3.1/go.mod h1:hIUabL8OFYyFVTQ6azeajbopogQc2l5C/hiXMcemWNU=\ngithub.com/seancfoley/ipaddress-go v1.7.0 h1:vWp3SR3k+HkV3aKiNO2vEe6xbVxS0x/Ixw6hgyP238s=\ngithub.com/seancfoley/ipaddress-go v1.7.0/go.mod h1:TQRZgv+9jdvzHmKoPGBMxyiaVmoI0rYpfEk8Q/sL/Iw=\ngithub.com/shirou/gopsutil/v3 v3.24.5 h1:i0t8kL+kQTvpAYToeuiVk3TgDeKOFioZO3Ztz/iZ9pI=\ngithub.com/shirou/gopsutil/v3 v3.24.5/go.mod h1:bsoOS1aStSs9ErQ1WWfxllSeS1K5D+U30r2NfcubMVk=\ngithub.com/shoenig/go-m1cpu v0.1.6 h1:nxdKQNcEB6vzgA2E2bvzKIYRuNj7XNJ4S/aRSwKzFtM=\ngithub.com/shoenig/go-m1cpu v0.1.6/go.mod h1:1JJMcUBvfNwpq05QDQVAnx3gUHr9IYF7GNg9SUEw2VQ=\ngithub.com/shoenig/test v0.6.4 h1:kVTaSd7WLz5WZ2IaoM0RSzRsUD+m8wRR+5qvntpn4LU=\ngithub.com/shoenig/test v0.6.4/go.mod h1:byHiCGXqrVaflBLAMq/srcZIHynQPQgeyvkvXnjqq0k=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/tklauser/go-sysconf v0.3.12 h1:0QaGUFOdQaIVdPgfITYzaTegZvdCjmYO52cSFAEVmqU=\ngithub.com/tklauser/go-sysconf v0.3.12/go.mod h1:Ho14jnntGE1fpdOqQEEaiKRpvIavV0hSfmBq8nJbHYI=\ngithub.com/tklauser/numcpus v0.6.1 h1:ng9scYS7az0Bk4OZLvrNXNSAO2Pxr1XXRAPyjhIx+Fk=\ngithub.com/tklauser/numcpus v0.6.1/go.mod h1:1XfjsgE2zo8GVw7POkMbHENHzVg3GzmoZ9fESEdAacY=\ngithub.com/yusufpapurcu/wmi v1.2.4 h1:zFUKzehAFReQwLys1b/iSMl+JQGSCSjtVqQn9bBrPo0=\ngithub.com/yusufpapurcu/wmi v1.2.4/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQmPyzfmi0=\ngithub.com/zeebo/assert v1.3.0 h1:g7C04CbJuIDKNPFHmsk4hwZDO5O+kntRxzaUoNXj+IQ=\ngithub.com/zeebo/assert v1.3.0/go.mod h1:Pq9JiuJQpG8JLJdtkwrJESF0Foym2/D9XMU5ciN/wJ0=\ngithub.com/zeebo/xxh3 v1.0.2 h1:xZmwmqxHZA8AI603jOQ0tMqmBr9lPeFwGg6d+xy9DC0=\ngithub.com/zeebo/xxh3 v1.0.2/go.mod h1:5NWz9Sef7zIDm2JHfFlcQvNekmcEl9ekUZQQKCYaDcA=\ngolang.org/x/exp v0.0.0-20230801115018-d63ba01acd4b h1:r+vk0EmXNmekl0S0BascoeeoHk/L7wmaW2QF90K+kYI=\ngolang.org/x/exp v0.0.0-20230801115018-d63ba01acd4b/go.mod h1:FXUEEKJgO7OQYeo8N01OfiKP8RXMtf6e8aTskBGqWdc=\ngolang.org/x/image v0.0.0-20191009234506-e7c1f5e7dbb8/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=\ngolang.org/x/image v0.23.0 h1:HseQ7c2OpPKTPVzNjG5fwJsOTCiiwS4QdsYi5XU6H68=\ngolang.org/x/image v0.23.0/go.mod h1:wJJBTdLfCCf3tiHa1fNxpZmUI4mmoZvwMCPP0ddoNKY=\ngolang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201204225414-ed752295db88/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.11.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.29.0 h1:TPYlXGxvx1MGTn2GiZDhnjPA9wZzZeGKHHmKhHYvgaU=\ngolang.org/x/sys v0.29.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v1 v1.0.0-20140924161607-9f9df34309c0/go.mod h1:WDnlLJ4WF5VGsH/HVa3CI79GS0ol3YnhVnKP89i0kNg=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nhowett.net/plist v1.0.1 h1:37GdZ8tP09Q35o9ych3ehygcsL+HqKSwzctveSlarvM=\nhowett.net/plist v1.0.1/go.mod h1:lqaXoTrLY4hg8tnEzNru53gicrbv7rrk+2xJA/7hw9g=\n"
        },
        {
          "name": "key_encoding.json",
          "type": "blob",
          "size": 1.82,
          "content": "{\n  \"0\": \"G\",\n  \"1\": \"H\",\n  \"2\": \"I\",\n  \"3\": \"J\",\n  \"4\": \"K\",\n  \"5\": \"L\",\n  \"6\": \"M\",\n  \"7\": \"N\",\n  \"8\": \"O\",\n  \"9\": \"P\",\n  \"A\": \"S\",\n  \"APOSTROPHE\": \"B\",\n  \"B\": \"T\",\n  \"BACKSLASH\": \"t\",\n  \"BACKSPACE\": \"1\",\n  \"C\": \"U\",\n  \"CAPS LOCK\": \":\",\n  \"COMMA\": \"C\",\n  \"D\": \"V\",\n  \"DELETE\": \"3\",\n  \"DOWN\": \"6\",\n  \"E\": \"W\",\n  \"END\": \"-\",\n  \"ENTER\": \"z\",\n  \"EQUAL\": \"R\",\n  \"ESCAPE\": \"y\",\n  \"F\": \"X\",\n  \"F1\": \"/\",\n  \"F10\": \"]\",\n  \"F11\": \"{\",\n  \"F12\": \"}\",\n  \"F13\": \"@\",\n  \"F14\": \"%\",\n  \"F15\": \"$\",\n  \"F16\": \"#\",\n  \"F17\": \"BA\",\n  \"F18\": \"BB\",\n  \"F19\": \"BC\",\n  \"F2\": \"*\",\n  \"F20\": \"BD\",\n  \"F21\": \"BE\",\n  \"F22\": \"BF\",\n  \"F23\": \"BG\",\n  \"F24\": \"BH\",\n  \"F25\": \"BI\",\n  \"F3\": \"?\",\n  \"F4\": \"&\",\n  \"F5\": \"<\",\n  \"F6\": \">\",\n  \"F7\": \"(\",\n  \"F8\": \")\",\n  \"F9\": \"[\",\n  \"G\": \"Y\",\n  \"GRAVE ACCENT\": \"v\",\n  \"H\": \"Z\",\n  \"HOME\": \".\",\n  \"I\": \"a\",\n  \"INSERT\": \"2\",\n  \"J\": \"b\",\n  \"K\": \"c\",\n  \"KP 0\": \"BJ\",\n  \"KP 1\": \"BK\",\n  \"KP 2\": \"BL\",\n  \"KP 3\": \"BM\",\n  \"KP 4\": \"BN\",\n  \"KP 5\": \"BO\",\n  \"KP 6\": \"BP\",\n  \"KP 7\": \"BQ\",\n  \"KP 8\": \"BR\",\n  \"KP 9\": \"BS\",\n  \"KP ADD\": \"BX\",\n  \"KP DECIMAL\": \"BT\",\n  \"KP DIVIDE\": \"BU\",\n  \"KP ENTER\": \"BY\",\n  \"KP EQUAL\": \"BZ\",\n  \"KP MULTIPLY\": \"BV\",\n  \"KP SUBTRACT\": \"BW\",\n  \"L\": \"d\",\n  \"LEFT\": \"5\",\n  \"LEFT ALT\": \"Bc\",\n  \"LEFT BRACKET\": \"s\",\n  \"LEFT CONTROL\": \"Bb\",\n  \"LEFT SHIFT\": \"Ba\",\n  \"LEFT SUPER\": \"Bd\",\n  \"M\": \"e\",\n  \"MINUS\": \"D\",\n  \"N\": \"f\",\n  \"NUM LOCK\": \"=\",\n  \"O\": \"g\",\n  \"P\": \"h\",\n  \"PAGE DOWN\": \"9\",\n  \"PAGE UP\": \"8\",\n  \"PAUSE\": \"!\",\n  \"PERIOD\": \"E\",\n  \"PRINT SCREEN\": \"^\",\n  \"Q\": \"i\",\n  \"R\": \"j\",\n  \"RIGHT\": \"4\",\n  \"RIGHT ALT\": \"Bg\",\n  \"RIGHT BRACKET\": \"u\",\n  \"RIGHT CONTROL\": \"Bf\",\n  \"RIGHT SHIFT\": \"Be\",\n  \"RIGHT SUPER\": \"Bh\",\n  \"S\": \"k\",\n  \"SCROLL LOCK\": \"+\",\n  \"SEMICOLON\": \"Q\",\n  \"SLASH\": \"F\",\n  \"SPACE\": \"A\",\n  \"T\": \"l\",\n  \"TAB\": \"0\",\n  \"U\": \"m\",\n  \"UP\": \"7\",\n  \"V\": \"n\",\n  \"W\": \"o\",\n  \"WORLD 1\": \"w\",\n  \"WORLD 2\": \"x\",\n  \"X\": \"p\",\n  \"Y\": \"q\",\n  \"Z\": \"r\"\n}"
        },
        {
          "name": "kittens",
          "type": "tree",
          "content": null
        },
        {
          "name": "kitty",
          "type": "tree",
          "content": null
        },
        {
          "name": "kitty_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo",
          "type": "tree",
          "content": null
        },
        {
          "name": "publish.py",
          "type": "blob",
          "size": 21.97,
          "content": "#!/usr/bin/env python\n# License: GPL v3 Copyright: 2017, Kovid Goyal <kovid at kovidgoyal.net>\n\nimport argparse\nimport base64\nimport contextlib\nimport datetime\nimport glob\nimport io\nimport json\nimport mimetypes\nimport os\nimport pprint\nimport re\nimport shlex\nimport shutil\nimport subprocess\nimport sys\nimport tempfile\nimport time\nfrom contextlib import contextmanager, suppress\nfrom http.client import HTTPResponse, HTTPSConnection\nfrom typing import Any, Callable, Dict, Generator, Iterable, List, Optional, Tuple, Union\nfrom urllib.parse import urlencode, urlparse\n\nos.chdir(os.path.dirname(os.path.abspath(__file__)))\ndocs_dir = os.path.abspath('docs')\npublish_dir = os.path.abspath(os.path.join('..', 'kovidgoyal.github.io', 'kitty'))\nbuilding_nightly = False\nwith open('kitty/constants.py') as f:\n    raw = f.read()\nnv = re.search(r'^version: Version\\s+=\\s+Version\\((\\d+), (\\d+), (\\d+)\\)', raw, flags=re.MULTILINE)\nif nv is not None:\n    version = f'{nv.group(1)}.{nv.group(2)}.{nv.group(3)}'\nap = re.search(r\"^appname: str\\s+=\\s+'([^']+)'\", raw, flags=re.MULTILINE)\nif ap is not None:\n    appname = ap.group(1)\n\nALL_ACTIONS = 'local_build man html build tag sdist upload website'.split()\nNIGHTLY_ACTIONS = 'local_build man html build sdist upload_nightly'.split()\n\n\ndef echo_cmd(cmd: Iterable[str]) -> None:\n    isatty = sys.stdout.isatty()\n    end = '\\n'\n    if isatty:\n        end = f'\\x1b[m{end}'\n        print('\\x1b[32m', end='')\n    print(shlex.join(cmd), end=end, flush=True)\n\n\ndef call(*cmd: str, cwd: Optional[str] = None, echo: bool = False) -> None:\n    if len(cmd) == 1:\n        q = shlex.split(cmd[0])\n    else:\n        q = list(cmd)\n    if echo:\n        echo_cmd(cmd)\n    ret = subprocess.Popen(q, cwd=cwd).wait()\n    if ret != 0:\n        raise SystemExit(ret)\n\n\ndef run_local_build(args: Any) -> None:\n    call('make debug')\n\n\ndef run_build(args: Any) -> None:\n    import runpy\n\n    m = runpy.run_path('./setup.py', run_name='__publish__')\n    vcs_rev: str = m['get_vcs_rev']()\n\n    def run_with_retry(cmd: str) -> None:\n        try:\n            call(cmd, echo=True)\n        except (SystemExit, Exception):\n            needs_retry = building_nightly and 'linux' not in cmd\n            if not needs_retry:\n                raise\n            print('Build failed, retrying in a minute seconds...', file=sys.stderr)\n            if 'macos' in cmd:\n                call('python ../bypy macos shutdown')\n            time.sleep(60)\n            call(cmd, echo=True)\n\n    for x in ('64', 'arm64'):\n        prefix = f'python ../bypy linux --arch {x} '\n        run_with_retry(prefix + f'program --non-interactive --extra-program-data \"{vcs_rev}\"')\n    run_with_retry(f'python ../bypy macos program --sign-installers --notarize --non-interactive --extra-program-data \"{vcs_rev}\"')\n    call('python ../bypy macos shutdown', echo=True)\n    call('make debug')\n    call('./setup.py build-static-binaries')\n\n\ndef run_tag(args: Any) -> None:\n    call('git push')\n    call('git tag -s v{0} -m version-{0}'.format(version))\n    call(f'git push origin v{version}')\n\n\ndef run_man(args: Any) -> None:\n    call('make FAIL_WARN=1 man', cwd=docs_dir)\n\n\ndef run_html(args: Any) -> None:\n    # Force a fresh build otherwise the search index is not correct\n    with suppress(FileNotFoundError):\n        shutil.rmtree(os.path.join(docs_dir, '_build', 'dirhtml'))\n    call('make FAIL_WARN=1 \"OPTS=-D analytics_id=G-XTJK3R7GF2\" dirhtml', cwd=docs_dir)\n    add_old_redirects('docs/_build/dirhtml')\n\n    with suppress(FileNotFoundError):\n        shutil.rmtree(os.path.join(docs_dir, '_build', 'html'))\n    call('make FAIL_WARN=1 \"OPTS=-D analytics_id=G-XTJK3R7GF2\" html', cwd=docs_dir)\n\n\ndef generate_redirect_html(link_name: str, bname: str) -> None:\n    with open(link_name, 'w') as f:\n        f.write(f'''\n<html>\n<head>\n<title>Redirecting...</title>\n<link rel=\"canonical\" href=\"{bname}/\" />\n<noscript>\n<meta http-equiv=\"refresh\" content=\"0;url={bname}/\" />\n</noscript>\n<script type=\"text/javascript\">\nwindow.location.replace('./{bname}/' + window.location.hash);\n</script>\n</head>\n<body>\n<p>Redirecting, please wait...</p>\n</body>\n</html>\n''')\n\n\ndef add_old_redirects(loc: str) -> None:\n    for dirpath, dirnames, filenames in os.walk(loc):\n        if dirpath != loc:\n            for fname in filenames:\n                if fname == 'index.html':\n                    bname = os.path.basename(dirpath)\n                    base = os.path.dirname(dirpath)\n                    link_name = os.path.join(base, f'{bname}.html') if base else f'{bname}.html'\n                    generate_redirect_html(link_name, bname)\n\n    old_unicode_input_path = os.path.join(loc, 'kittens', 'unicode-input')\n    os.makedirs(old_unicode_input_path, exist_ok=True)\n    generate_redirect_html(os.path.join(old_unicode_input_path, 'index.html'), '../unicode_input')\n    generate_redirect_html(f'{old_unicode_input_path}.html', 'unicode_input')\n\n\ndef run_docs(args: Any) -> None:\n    subprocess.check_call(['make', 'docs'])\n\n\ndef run_website(args: Any) -> None:\n    if os.path.exists(publish_dir):\n        shutil.rmtree(publish_dir)\n    shutil.copytree(os.path.join(docs_dir, '_build', 'dirhtml'), publish_dir, symlinks=True)\n    with open(os.path.join(publish_dir, 'current-version.txt'), 'w') as f:\n        f.write(version)\n    shutil.copy2(os.path.join(docs_dir, 'installer.sh'), publish_dir)\n    os.chdir(os.path.dirname(publish_dir))\n    subprocess.check_call(['optipng', '-o7'] + glob.glob('kitty/_images/social_previews/*.png'))\n    subprocess.check_call(['git', 'add', 'kitty'])\n    subprocess.check_call(['git', 'commit', '-m', 'kitty website updates'])\n    subprocess.check_call(['git', 'push'])\n\n\ndef sign_file(path: str) -> None:\n    dest = f'{path}.sig'\n    with suppress(FileNotFoundError):\n        os.remove(dest)\n    subprocess.check_call([\n        os.environ['PENV'] + '/gpg-as-kovid', '--output', f'{path}.sig',\n        '--detach-sig', path\n    ])\n\n\ndef run_sdist(args: Any) -> None:\n    with tempfile.TemporaryDirectory() as tdir:\n        base = os.path.join(tdir, f'kitty-{version}')\n        os.mkdir(base)\n        subprocess.check_call(f'git archive HEAD | tar -x -C {base}', shell=True)\n        dest = os.path.join(base, 'docs', '_build')\n        os.mkdir(dest)\n        for x in 'html man'.split():\n            shutil.copytree(os.path.join(docs_dir, '_build', x), os.path.join(dest, x))\n        dest = os.path.abspath(os.path.join('build', f'kitty-{version}.tar'))\n        subprocess.check_call(['tar', '-cf', dest, os.path.basename(base)], cwd=tdir)\n        with suppress(FileNotFoundError):\n            os.remove(f'{dest}.xz')\n        subprocess.check_call(['xz', '-9', dest])\n        sign_file(f'{dest}.xz')\n\n\nclass ReadFileWithProgressReporting(io.FileIO):  # {{{\n    def __init__(self, path: str):\n        super().__init__(path, 'rb')\n        self.seek(0, os.SEEK_END)\n        self._total = self.tell()\n        self.seek(0)\n        self.start_time = time.monotonic()\n        print('Starting upload of:', os.path.basename(path), 'size:', self._total)\n\n    def __len__(self) -> int:\n        return self._total\n\n    def read(self, size: Optional[int] = -1) -> bytes:\n        data = io.FileIO.read(self, size)\n        if data:\n            self.report_progress(len(data))\n        return data\n\n    def report_progress(self, size: int) -> None:\n        def write(*args: str) -> None:\n            print(*args, end='')\n\n        frac = int(self.tell() * 100 / self._total)\n        mb_pos = self.tell() / float(1024**2)\n        mb_tot = self._total / float(1024**2)\n        kb_pos = self.tell() / 1024.0\n        kb_rate = kb_pos / (time.monotonic() - self.start_time)\n        bit_rate = kb_rate * 1024\n        eta = int((self._total - self.tell()) / bit_rate) + 1\n        eta_m, eta_s = divmod(eta, 60)\n        if sys.stdout.isatty():\n            write(\n                f'\\r\\033[K\\033[?7h {frac}% {mb_pos:.1f}/{mb_tot:.1f}MB {kb_rate:.1f} KB/sec {eta_m} minutes, {eta_s} seconds left\\033[?7l')\n        if self.tell() >= self._total:\n            t = int(time.monotonic() - self.start_time) + 1\n            print(f'\\nUpload took {t//60} minutes and {t%60} seconds at {kb_rate:.1f} KB/sec')\n        sys.stdout.flush()\n\n\n# }}}\n\n\nclass GitHub:  # {{{\n\n    API = 'https://api.github.com'\n\n    def __init__(\n        self,\n        files: Dict[str, str],\n        reponame: str,\n        version: str,\n        username: str,\n        password: str,\n        replace: bool = False\n    ):\n        self.files, self.reponame, self.version, self.username, self.password, self.replace = (\n            files, reponame, version, username, password, replace)\n        self.current_tag_name = self.version if self.version == 'nightly' else f'v{self.version}'\n        self.is_nightly = self.current_tag_name == 'nightly'\n        self.auth = 'Basic ' + base64.standard_b64encode(f'{self.username}:{self.password}'.encode()).decode()\n        self.url_base = f'{self.API}/repos/{self.username}/{self.reponame}/releases'\n\n    def info(self, *args: Any) -> None:\n        print(*args, flush=True)\n\n    def error(self, *args: Any) -> None:\n        print(*args, flush=True, file=sys.stderr)\n\n    def make_request(\n        self, url: str, data: Optional[Dict[str, Any]] = None, method:str = 'GET',\n        upload_data: Optional[ReadFileWithProgressReporting] = None,\n        params: Optional[Dict[str, str]] = None,\n    ) -> HTTPSConnection:\n        headers={\n            'Authorization': self.auth,\n            'Accept': 'application/vnd.github+json',\n            'User-Agent': 'kitty',\n            'X-GitHub-Api-Version': '2022-11-28',\n        }\n        if params:\n            url += '?' + urlencode(params)\n        rdata: Optional[Union[bytes, io.FileIO]] = None\n        if data is not None:\n            rdata = json.dumps(data).encode('utf-8')\n            headers['Content-Type'] = 'application/json'\n            headers['Content-Length'] = str(len(rdata))\n        elif upload_data is not None:\n            rdata = upload_data\n            mime_type = mimetypes.guess_type(os.path.basename(str(upload_data.name)))[0] or 'application/octet-stream'\n            headers['Content-Type'] = mime_type\n            headers['Content-Length'] = str(upload_data._total)\n        purl = urlparse(url)\n        conn = HTTPSConnection(purl.netloc, timeout=60)\n        conn.request(method, url, body=rdata, headers=headers)\n        return conn\n\n    def make_request_with_retries(\n        self, url: str, data: Optional[Dict[str, str]] = None, method:str = 'GET',\n        num_tries: int = 2, sleep_between_tries: float = 15,\n        success_codes: Tuple[int, ...] = (200,),\n        failure_msg: str = 'Request failed',\n        return_data: bool = False,\n        upload_path: str = '',\n        params: Optional[Dict[str, str]] = None,\n        failure_callback: Callable[[HTTPResponse], None] = lambda r: None,\n    ) -> Any:\n        for i in range(num_tries):\n            is_last_try = i == num_tries - 1\n            try:\n                if upload_path:\n                    conn = self.make_request(url, method='POST', upload_data=ReadFileWithProgressReporting(upload_path), params=params)\n                else:\n                    conn = self.make_request(url, data, method, params=params)\n                with contextlib.closing(conn):\n                    r = conn.getresponse()\n                    if r.status in success_codes:\n                        return json.loads(r.read()) if return_data else None\n                    if is_last_try:\n                        self.fail(r, failure_msg)\n                    else:\n                        self.print_failed_response_details(r, failure_msg)\n                        failure_callback(r)\n            except Exception as e:\n                self.error(failure_msg, 'with error:', e)\n            self.error(f'Retrying after {sleep_between_tries} seconds')\n            if is_last_try:\n                break\n            time.sleep(sleep_between_tries)\n        raise SystemExit('All retries failed, giving up')\n\n    def patch(self, url: str, fail_msg: str, **data: str) -> None:\n        self.make_request_with_retries(url, data, method='PATCH', failure_msg=fail_msg)\n\n    def update_nightly_description(self, release_id: int) -> None:\n        url = f'{self.url_base}/{release_id}'\n        now = str(datetime.datetime.now(datetime.timezone.utc)).split('.')[0] + ' UTC'\n        commit = subprocess.check_output(['git', 'rev-parse', '--verify', '--end-of-options', 'master^{commit}']).decode('utf-8').strip()\n        self.patch(\n            url, 'Failed to update nightly release description',\n            body=f'Nightly release, generated on: {now} from commit: {commit}.'\n            ' For how to install nightly builds, see: https://sw.kovidgoyal.net/kitty/binary/#customizing-the-installation'\n        )\n\n    def __call__(self) -> None:\n        # See https://docs.github.com/en/rest/releases/assets#upload-a-release-asset\n        release = self.create_release()\n        upload_url = release['upload_url'].partition('{')[0]\n        all_assest_for_release = self.existing_assets_for_release(release)\n        assets_by_fname = {a['name']:a for a in all_assest_for_release}\n\n        def delete_asset(asset: Dict[str, Any], allow_not_found: bool = True) -> None:\n            success_codes = [204]\n            if allow_not_found:\n                success_codes.append(404)\n            self.make_request_with_retries(\n                asset['url'], method='DELETE', num_tries=5, sleep_between_tries=2, success_codes=tuple(success_codes),\n                failure_msg='Failed to delete asset from GitHub')\n\n        def upload_with_retries(path: str, desc: str, num_tries: int = 8, sleep_time: float = 60.0) -> None:\n            fname = os.path.basename(path)\n            if self.is_nightly:\n                fname = fname.replace(version, 'nightly')\n            if fname in assets_by_fname:\n                self.info(f'Deleting {fname} from GitHub with id: {assets_by_fname[fname][\"id\"]}')\n                delete_asset(assets_by_fname.pop(fname))\n            params = {'name': fname, 'label': desc}\n\n            self.make_request_with_retries(\n                upload_url, upload_path=path, params=params, num_tries=num_tries, sleep_between_tries=sleep_time,\n                failure_msg=f'Failed to upload file: {fname}', success_codes=(201,),\n            )\n\n        if self.is_nightly:\n            for fname in tuple(assets_by_fname):\n                self.info(f'Deleting {fname} from GitHub with id: {assets_by_fname[fname][\"id\"]}')\n                delete_asset(assets_by_fname.pop(fname))\n        for path, desc in self.files.items():\n            self.info('')\n            upload_with_retries(path, desc)\n        if self.is_nightly:\n            self.update_nightly_description(release['id'])\n\n    def print_failed_response_details(self, r: HTTPResponse, msg: str) -> None:\n        self.error(msg, f'\\nStatus Code: {r.status} {r.reason}')\n        try:\n            jr = json.loads(r.read())\n        except Exception:\n            pass\n        else:\n            self.error('JSON from response:')\n            pprint.pprint(jr, stream=sys.stderr)\n\n    def fail(self, r: HTTPResponse, msg: str) -> None:\n        self.print_failed_response_details(r, msg)\n        raise SystemExit(1)\n\n    def existing_assets_for_release(self, release: Dict[str, Any]) -> List[Dict[str, Any]]:\n        if 'assets' in release:\n            d: List[Dict[str, Any]] = release['assets']\n        else:\n            d = self.make_request_with_retries(\n                release['assets_url'], params={'per_page': '64'}, failure_msg='Failed to get assets for release', return_data=True)\n        return d\n\n    def create_release(self) -> Dict[str, Any]:\n        ' Create a release on GitHub or if it already exists, return the existing release '\n        # Check for existing release\n        url = f'{self.url_base}/tags/{self.current_tag_name}'\n        with contextlib.closing(self.make_request(url)) as conn:\n            r = conn.getresponse()\n            if r.status == 200:\n                return {str(k): v for k, v in json.loads(r.read()).items()}\n        if self.is_nightly:\n            self.fail(r, 'No existing nightly release found on GitHub')\n        data = {\n            'tag_name': self.current_tag_name,\n            'target_commitish': 'master',\n            'name': f'version {self.version}',\n            'body': f'Release version {self.version}.'\n            ' For changelog, see https://sw.kovidgoyal.net/kitty/changelog/#detailed-list-of-changes'\n            ' GPG key used for signing tarballs is: https://calibre-ebook.com/signatures/kovid.gpg',\n            'draft': False,\n            'prerelease': False\n        }\n        with contextlib.closing(self.make_request(self.url_base, method='POST', data=data)) as conn:\n            r = conn.getresponse()\n            if r.status != 201:\n                self.fail(r, f'Failed to create release for version: {self.version}')\n            return {str(k): v for k, v in json.loads(r.read()).items()}\n# }}}\n\n\ndef get_github_data() -> Dict[str, str]:\n    with open(os.environ['PENV'] + '/github-token') as f:\n        un, pw = f.read().strip().split(':')\n    return {'username': un, 'password': pw}\n\n\ndef files_for_upload() -> Dict[str, str]:\n    files = {}\n    signatures = {}\n    for f, desc in {\n        'macos/dist/kitty-{}.dmg': 'macOS dmg',\n        'linux/64/dist/kitty-{}-x86_64.txz': 'Linux amd64 binary bundle',\n        'linux/arm64/dist/kitty-{}-arm64.txz': 'Linux arm64 binary bundle',\n    }.items():\n        path = os.path.join('bypy', 'b', f.format(version))\n        if not os.path.exists(path):\n            raise SystemExit(f'The installer {path} does not exist')\n        files[path] = desc\n        signatures[path] = f'GPG signature for {desc}'\n    b = len(files)\n    for path in glob.glob('build/static/kitten-*'):\n        if path.endswith('.sig'):\n            continue\n        path = os.path.abspath(path)\n        exe_name = os.path.basename(path)\n        files[path] = f'Static {exe_name} executable'\n        signatures[path] = f'GPG signature for static {exe_name} executable'\n    if len(files) == b:\n        raise SystemExit('No static binaries found')\n\n    files[f'build/kitty-{version}.tar.xz'] = 'Source code'\n    files[f'build/kitty-{version}.tar.xz.sig'] = 'Source code GPG signature'\n    for path, desc in signatures.items():\n        sign_file(path)\n        files[f'{path}.sig'] = desc\n    for f in files:\n        if not os.path.exists(f):\n            raise SystemExit(f'The release artifact {f} does not exist')\n    return files\n\n\ndef run_upload(args: Any) -> None:\n    gd = get_github_data()\n    files = files_for_upload()\n    gh = GitHub(files, appname, version, gd['username'], gd['password'])\n    gh()\n\n\ndef run_upload_nightly(args: Any) -> None:\n    subprocess.check_call(['git', 'tag', '-f', 'nightly'])\n    subprocess.check_call(['git', 'push', 'origin', 'nightly', '-f'])\n    gd = get_github_data()\n    files = files_for_upload()\n    gh = GitHub(files, appname, 'nightly', gd['username'], gd['password'])\n    gh()\n\n\ndef current_branch() -> str:\n    return subprocess.check_output(['git', 'symbolic-ref', '--short', 'HEAD']).decode('utf-8').strip()\n\n\ndef require_git_master(branch: str = 'master') -> None:\n    if current_branch() != branch:\n        raise SystemExit(f'You must be in the {branch} git branch')\n\n\ndef safe_read(path: str) -> str:\n    with suppress(FileNotFoundError):\n        with open(path) as f:\n            return f.read()\n    return ''\n\n\ndef remove_pycache_only_folders() -> None:\n    folders_to_remove = []\n    for dirpath, folders, files in os.walk('.'):\n        if not files and folders == ['__pycache__']:\n            folders_to_remove.append(dirpath)\n    for x in folders_to_remove:\n        shutil.rmtree(x)\n\n\n@contextmanager\ndef change_to_git_master() -> Generator[None, None, None]:\n    stash_ref_before = safe_read('.git/refs/stash')\n    subprocess.check_call(['git', 'stash', '-u'])\n    try:\n        branch_before = current_branch()\n        if branch_before != 'master':\n            subprocess.check_call(['git', 'switch', 'master'])\n            remove_pycache_only_folders()\n            subprocess.check_call(['make', 'clean', 'debug'])\n        try:\n            yield\n        finally:\n            if branch_before != 'master':\n                subprocess.check_call(['git', 'switch', branch_before])\n                subprocess.check_call(['make', 'clean', 'debug'])\n    finally:\n        if stash_ref_before != safe_read('.git/refs/stash'):\n            subprocess.check_call(['git', 'stash', 'pop'])\n\n\ndef require_penv() -> None:\n    if 'PENV' not in os.environ:\n        raise SystemExit('The PENV env var is not present, required for uploading releases')\n\n\ndef exec_actions(actions: Iterable[str], args: Any) -> None:\n    for action in actions:\n        print('Running', action)\n        cwd = os.getcwd()\n        globals()[f'run_{action}'](args)\n        os.chdir(cwd)\n\n\ndef main() -> None:\n    global building_nightly\n    parser = argparse.ArgumentParser(description='Publish kitty')\n    parser.add_argument(\n        '--only',\n        default=False,\n        action='store_true',\n        help='Only run the specified action, by default the specified action and all sub-sequent actions are run')\n    parser.add_argument(\n        '--nightly',\n        default=False,\n        action='store_true',\n        help='Upload a nightly release, ignores all other arguments')\n    parser.add_argument(\n        'action',\n        default='all',\n        nargs='?',\n        choices=list(ALL_ACTIONS) + ['all', 'upload_nightly'],\n        help='The action to start with')\n    args = parser.parse_args()\n    require_penv()\n    if args.nightly:\n        with change_to_git_master():\n            building_nightly = True\n            exec_actions(NIGHTLY_ACTIONS, args)\n            subprocess.run(['make', 'clean', 'debug'])\n        return\n    require_git_master()\n    if args.action == 'all':\n        actions = list(ALL_ACTIONS)\n    elif args.action == 'upload_nightly':\n        actions = ['upload_nightly']\n    else:\n        idx = ALL_ACTIONS.index(args.action)\n        actions = ALL_ACTIONS[idx:]\n    if args.only:\n        del actions[1:]\n    else:\n        try:\n            ans = input(f'Publish version \\033[91m{version}\\033[m (y/n): ')\n        except KeyboardInterrupt:\n            ans = 'n'\n        if ans.lower() != 'y':\n            return\n    if actions == ['website']:\n        actions.insert(0, 'html')\n    exec_actions(actions, args)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.86,
          "content": "[project]\nrequires-python = \">=3.10\"\n\n[tool.mypy]\nfiles = 'kitty,kittens,glfw,*.py,docs/conf.py,gen'\nno_implicit_optional = true\nsqlite_cache = true\ncache_fine_grained = true\nwarn_redundant_casts = true\nwarn_unused_ignores = true\nwarn_return_any = true\nwarn_unreachable = true\nwarn_unused_configs = true\ncheck_untyped_defs = true\ndisallow_untyped_defs = true\ndisallow_untyped_decorators = true\ndisallow_untyped_calls = true\ndisallow_incomplete_defs = true\nstrict = true\nno_implicit_reexport = true\n\n[tool.pylsp-mypy]\nenabled = true\ndmypy = true\nexclude = ['kitty_tests/*']\nreport_progress = true\n\n[tool.ruff]\nline-length = 160\n\n[tool.ruff.lint]\nselect = ['E', 'F', 'I', 'RUF100']\n\n[tool.ruff.lint.per-file-ignores]\n\"kitty/options/types.py\" = [\"E501\"]\n\"kitty/options/parse.py\" = [\"E501\"]\n\n[tool.ruff.lint.isort]\ndetect-same-package = true\n\n[tool.ruff.format]\nquote-style = 'single'\n"
        },
        {
          "name": "session.vim",
          "type": "blob",
          "size": 0.32,
          "content": "\" Scan the following dirs recursively for tags\nlet g:project_tags_dirs = ['kitty', 'kittens', 'tools']\nset wildignore+==template.py\nset wildignore+=tags\nset expandtab\nset tabstop=4\nset shiftwidth=4\nset softtabstop=0\nset smarttab\npython3 <<endpython\nimport sys\nsys.path.insert(0, os.path.abspath('.'))\nimport kitty\nendpython\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 83.66,
          "content": "#!/usr/bin/env python\n# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>\n\nimport argparse\nimport glob\nimport json\nimport os\nimport platform\nimport re\nimport runpy\nimport shlex\nimport shutil\nimport struct\nimport subprocess\nimport sys\nimport sysconfig\nimport tempfile\nimport textwrap\nimport time\nfrom contextlib import suppress\nfrom functools import lru_cache, partial\nfrom pathlib import Path\nfrom typing import Callable, Dict, FrozenSet, Iterable, Iterator, List, Optional, Sequence, Set, Tuple, Union, cast\n\nfrom glfw import glfw\nfrom glfw.glfw import ISA, BinaryArch, Command, CompileKey, CompilerType\n\nsrc_base = os.path.dirname(os.path.abspath(__file__))\n\ndef check_version_info() -> None:\n    with open(os.path.join(src_base, 'pyproject.toml')) as f:\n        raw = f.read()\n    m = re.search(r'''^requires-python\\s*=\\s*['\"](.+?)['\"]''', raw, flags=re.MULTILINE)\n    assert m is not None\n    minver = m.group(1)\n    match = re.match(r'(>=?)(\\d+)\\.(\\d+)', minver)\n    assert match is not None\n    q = int(match.group(2)), int(match.group(3))\n    if match.group(1) == '>=':\n        is_ok = sys.version_info >= q\n    else:\n        is_ok = sys.version_info > q\n    if not is_ok:\n        exit(f'calibre requires Python {minver}. Current Python version: {\".\".join(map(str, sys.version_info[:3]))}')\n\n\ncheck_version_info()\nverbose = False\nbuild_dir = 'build'\nconstants = os.path.join('kitty', 'constants.py')\nwith open(constants, 'rb') as f:\n    constants = f.read().decode('utf-8')\nappname = re.search(r\"^appname: str = '([^']+)'\", constants, re.MULTILINE).group(1)  # type: ignore\nversion = tuple(\n    map(\n        int,\n        re.search(  # type: ignore\n            r\"^version: Version = Version\\((\\d+), (\\d+), (\\d+)\\)\", constants, re.MULTILINE\n        ).group(1, 2, 3)\n    )\n)\n_plat = sys.platform.lower()\nis_macos = 'darwin' in _plat\nis_openbsd = 'openbsd' in _plat\nis_freebsd = 'freebsd' in _plat\nis_netbsd = 'netbsd' in _plat\nis_dragonflybsd = 'dragonfly' in _plat\nis_bsd = is_freebsd or is_netbsd or is_dragonflybsd or is_openbsd\nis_arm = platform.processor() == 'arm' or platform.machine() in ('arm64', 'aarch64')\nEnv = glfw.Env\nenv = Env()\nPKGCONFIG = os.environ.get('PKGCONFIG_EXE', 'pkg-config')\nlink_targets: List[str] = []\nmacos_universal_arches = ('arm64', 'x86_64') if is_arm else ('x86_64', 'arm64')\n\n\ndef LinkKey(output: str) -> CompileKey:\n    return CompileKey('', output)\n\n\nclass CompilationDatabase:\n\n    def __init__(self, incremental: bool = False):\n        self.incremental = incremental\n        self.compile_commands: List[Command] = []\n        self.link_commands: List[Command] = []\n        self.post_link_commands: List[Command] = []\n\n    def add_command(\n        self,\n        desc: str,\n        cmd: List[str],\n        is_newer_func: Callable[[], bool],\n        key: Optional[CompileKey] = None,\n        on_success: Optional[Callable[[], None]] = None,\n        keyfile: Optional[str] = None,\n        is_post_link: bool = False,\n    ) -> None:\n        def no_op() -> None:\n            pass\n\n        if is_post_link:\n            queue = self.post_link_commands\n        else:\n            queue = self.link_commands if keyfile is None else self.compile_commands\n        queue.append(Command(desc, cmd, is_newer_func, on_success or no_op, key, keyfile))\n\n    def build_all(self) -> None:\n\n        def sort_key(compile_cmd: Command) -> int:\n            if compile_cmd.keyfile:\n                return os.path.getsize(compile_cmd.keyfile)\n            return 0\n\n        items = []\n        for compile_cmd in self.compile_commands:\n            if not self.incremental or self.cmd_changed(compile_cmd) or compile_cmd.is_newer_func():\n                items.append(compile_cmd)\n        items.sort(key=sort_key, reverse=True)\n        parallel_run(items)\n\n        items = []\n        for compile_cmd in self.link_commands:\n            if not self.incremental or compile_cmd.is_newer_func():\n                items.append(compile_cmd)\n        parallel_run(items)\n\n        items = []\n        for compile_cmd in self.post_link_commands:\n            if not self.incremental or compile_cmd.is_newer_func():\n                items.append(compile_cmd)\n        parallel_run(items)\n\n    def cmd_changed(self, compile_cmd: Command) -> bool:\n        key, cmd = compile_cmd.key, compile_cmd.cmd\n        return bool(self.db.get(key) != cmd)\n\n    def __enter__(self) -> 'CompilationDatabase':\n        self.all_keys: Set[CompileKey] = set()\n        self.dbpath = os.path.abspath(os.path.join(build_dir, 'compile_commands.json'))\n        self.linkdbpath = os.path.join(os.path.dirname(self.dbpath), 'link_commands.json')\n        try:\n            with open(self.dbpath) as f:\n                compilation_database = json.load(f)\n        except FileNotFoundError:\n            compilation_database = []\n        try:\n            with open(self.linkdbpath) as f:\n                link_database = json.load(f)\n        except FileNotFoundError:\n            link_database = []\n        compilation_database = {\n            CompileKey(k['file'], k['output']): k['arguments'] for k in compilation_database\n        }\n        self.db = compilation_database\n        self.linkdb = {tuple(k['output']): k['arguments'] for k in link_database}\n        return self\n\n    def __exit__(self, *a: object) -> None:\n        cdb = self.db\n        for key in set(cdb) - self.all_keys:\n            del cdb[key]\n        compilation_database = [\n            {'file': c.key.src, 'arguments': c.cmd, 'directory': src_base, 'output': c.key.dest} for c in self.compile_commands if c.key is not None\n        ]\n        with suppress(FileNotFoundError):\n            with open(self.dbpath, 'w') as f:\n                json.dump(compilation_database, f, indent=2, sort_keys=True)\n            with open(self.linkdbpath, 'w') as f:\n                json.dump([{'output': c.key, 'arguments': c.cmd, 'directory': src_base} for c in self.link_commands], f, indent=2, sort_keys=True)\n\n\n\nclass Options:\n    action: str = 'build'\n    debug: bool = False\n    verbose: int = 0\n    sanitize: bool = False\n    prefix: str = './linux-package'\n    dir_for_static_binaries: str = 'build/static'\n    skip_code_generation: bool = False\n    skip_building_kitten: bool = False\n    clean_for_cross_compile: bool = False\n    python_compiler_flags: str = ''\n    python_linker_flags: str = ''\n    incremental: bool = True\n    build_dsym: bool = False\n    ignore_compiler_warnings: bool = False\n    profile: bool = False\n    libdir_name: str = 'lib'\n    extra_logging: List[str] = []\n    extra_include_dirs: List[str] = []\n    extra_library_dirs: List[str] = []\n    link_time_optimization: bool = 'KITTY_NO_LTO' not in os.environ\n    update_check_interval: float = 24.0\n    shell_integration: str = 'enabled'\n    egl_library: Optional[str] = os.getenv('KITTY_EGL_LIBRARY')\n    startup_notification_library: Optional[str] = os.getenv('KITTY_STARTUP_NOTIFICATION_LIBRARY')\n    canberra_library: Optional[str] = os.getenv('KITTY_CANBERRA_LIBRARY')\n    systemd_library: Optional[str] = os.getenv('KITTY_SYSTEMD_LIBRARY')\n    fontconfig_library: Optional[str] = os.getenv('KITTY_FONTCONFIG_LIBRARY')\n    building_arch: str = ''\n\n    # Extras\n    compilation_database: CompilationDatabase = CompilationDatabase()\n    vcs_rev: str = ''\n\ndef emphasis(text: str) -> str:\n    if sys.stdout.isatty():\n        text = f'\\033[32m{text}\\033[39m'\n    return text\n\n\ndef error(text: str) -> str:\n    if sys.stdout.isatty():\n        text = f'\\033[91m{text}\\033[39m'\n    return text\n\n\ndef pkg_config(pkg: str, *args: str, extra_pc_dir: str = '', fatal: bool = True) -> List[str]:\n    env = os.environ.copy()\n    if extra_pc_dir:\n        pp = env.get('PKG_CONFIG_PATH', '')\n        if pp:\n            pp += os.pathsep\n        env['PKG_CONFIG_PATH'] = f'{pp}{extra_pc_dir}'\n    cmd = [PKGCONFIG, pkg] + list(args)\n    try:\n        return list(\n            filter(\n                None,\n                shlex.split(\n                    subprocess.check_output(cmd, env=env, stderr=None if fatal else subprocess.DEVNULL).decode('utf-8')\n                )\n            )\n        )\n    except subprocess.CalledProcessError:\n        if fatal:\n            raise SystemExit(f'The package {error(pkg)} was not found on your system')\n        raise\n\n\ndef pkg_version(package: str) -> Tuple[int, int]:\n    ver = subprocess.check_output([\n        PKGCONFIG, package, '--modversion']).decode('utf-8').strip()\n    m = re.match(r'(\\d+).(\\d+)', ver)\n    if m is not None:\n        qmajor, qminor = map(int, m.groups())\n        return qmajor, qminor\n    return -1, -1\n\n\ndef libcrypto_flags() -> Tuple[List[str], List[str]]:\n    # Apple use their special snowflake TLS libraries and additionally\n    # have an ancient broken system OpenSSL, so we need to check for one\n    # installed by all the various macOS package managers.\n    extra_pc_dir = ''\n\n    try:\n        cflags = pkg_config('libcrypto', '--cflags-only-I', fatal=False)\n    except subprocess.CalledProcessError:\n        if is_macos:\n            import ssl\n            v = ssl.OPENSSL_VERSION_INFO\n            pats = f'{v[0]}.{v[1]}', f'{v[0]}'\n            for pat in pats:\n                q = f'opt/openssl@{pat}/lib/pkgconfig'\n                openssl_dirs = glob.glob(f'/opt/homebrew/{q}') + glob.glob(f'/usr/local/{q}')\n                if openssl_dirs:\n                    break\n            else:\n                raise SystemExit(f'Failed to find OpenSSL version {v[0]}.{v[1]} on your system')\n            extra_pc_dir = os.pathsep.join(openssl_dirs)\n        cflags = pkg_config('libcrypto', '--cflags-only-I', extra_pc_dir=extra_pc_dir)\n    ldflags = pkg_config('libcrypto', '--libs', extra_pc_dir=extra_pc_dir)\n    # Workaround bug in homebrew openssl package. This bug appears in CI only\n    if is_macos and ldflags and 'homebrew/Cellar' in ldflags[0] and not ldflags[0].endswith('/lib'):\n        ldflags.insert(0, ldflags[0] + '/lib')\n    return cflags, ldflags\n\n\ndef at_least_version(package: str, major: int, minor: int = 0) -> None:\n    q = f'{major}.{minor}'\n    if subprocess.run([PKGCONFIG, package, f'--atleast-version={q}']\n                      ).returncode != 0:\n        qmajor = qminor = 0\n        try:\n            ver = subprocess.check_output([PKGCONFIG, package, '--modversion']\n                                          ).decode('utf-8').strip()\n            m = re.match(r'(\\d+).(\\d+)', ver)\n            if m is not None:\n                qmajor, qminor = map(int, m.groups())\n        except Exception:\n            ver = 'not found'\n        if qmajor < major or (qmajor == major and qminor < minor):\n            raise SystemExit(f'{error(package)} >= {major}.{minor} is required, found version: {ver}')\n\n\ndef cc_version() -> Tuple[List[str], Tuple[int, int]]:\n    if 'CC' in os.environ:\n        q = os.environ['CC']\n    else:\n        if is_macos:\n            q = 'clang'\n        else:\n            if shutil.which('gcc'):\n                q = 'gcc'\n            elif shutil.which('clang'):\n                q = 'clang'\n            else:\n                q = 'cc'\n    cc = shlex.split(q)\n    raw = subprocess.check_output(cc + ['-dumpversion']).decode('utf-8')\n    ver_ = raw.strip().split('.')[:2]\n    try:\n        if len(ver_) == 1:\n            ver = int(ver_[0]), 0\n        else:\n            ver = int(ver_[0]), int(ver_[1])\n    except Exception:\n        ver = (0, 0)\n    return cc, ver\n\n\ndef get_python_include_paths() -> List[str]:\n    ans = []\n    for name in sysconfig.get_path_names():\n        if 'include' in name:\n            ans.append(name)\n\n    def gp(x: str) -> Optional[str]:\n        return sysconfig.get_path(x)\n\n    return sorted(frozenset(filter(None, map(gp, sorted(ans)))))\n\n\ndef get_python_flags(args: Options, cflags: List[str], for_main_executable: bool = False) -> List[str]:\n    if args.python_compiler_flags:\n        cflags.extend(shlex.split(args.python_compiler_flags))\n    else:\n        cflags.extend(f'-I{x}' for x in get_python_include_paths())\n    if args.python_linker_flags:\n        return shlex.split(args.python_linker_flags)\n    libs: List[str] = []\n    libs += (sysconfig.get_config_var('LIBS') or '').split()\n    libs += (sysconfig.get_config_var('SYSLIBS') or '').split()\n    fw = sysconfig.get_config_var('PYTHONFRAMEWORK')\n    if fw:\n        for var in 'data include stdlib'.split():\n            val = sysconfig.get_path(var)\n            if val and f'/{fw}.framework' in val:\n                fdir = val[:val.index(f'/{fw}.framework')]\n                if os.path.isdir(\n                    os.path.join(fdir, f'{fw}.framework')\n                ):\n                    framework_dir = fdir\n                    break\n        else:\n            raise SystemExit('Failed to find Python framework')\n        ldlib = sysconfig.get_config_var('LDLIBRARY')\n        if ldlib:\n            libs.append(os.path.join(framework_dir, ldlib))\n    else:\n        ldlib = sysconfig.get_config_var('LIBDIR')\n        if ldlib:\n            libs += [f'-L{ldlib}']\n        ldlib = sysconfig.get_config_var('VERSION')\n        if ldlib:\n            libs += [f'-lpython{ldlib}{sys.abiflags}']\n        lval = sysconfig.get_config_var('LINKFORSHARED') or ''\n        if not for_main_executable:\n            # Python sets the stack size on macOS which is not allowed unless\n            # compiling an executable https://github.com/kovidgoyal/kitty/issues/289\n            lval = re.sub(r'-Wl,-stack_size,\\d+', '', lval)\n        libs += list(filter(None, lval.split()))\n    return libs\n\n\ndef get_sanitize_args(cc: List[str], ccver: Tuple[int, int]) -> List[str]:\n    return ['-fsanitize=address,undefined', '-fno-omit-frame-pointer']\n\n\ndef get_binary_arch(path: str) -> BinaryArch:\n    with open(path, 'rb') as f:\n        sig = f.read(64)\n    if sig.startswith(b'\\x7fELF'):  # ELF\n        bits = {1: 32, 2: 64}[sig[4]]\n        endian = {1: '<', 2: '>'}[sig[5]]\n        machine, = struct.unpack_from(endian + 'H', sig, 0x12)\n        isa = {i.value:i for i in ISA}.get(machine, ISA.Other)\n    elif sig[:4] in (b'\\xcf\\xfa\\xed\\xfe', b'\\xce\\xfa\\xed\\xfe'): # Mach-O\n        s, cpu_type, = struct.unpack_from('<II', sig, 0)\n        bits = {0xfeedface: 32, 0xfeedfacf: 64}[s]\n        cpu_type &= 0xff\n        isa = {0x7: ISA.AMD64, 0xc: ISA.ARM64}[cpu_type]\n    else:\n        raise SystemExit(f'Unknown binary format with signature: {sig[:4]!r}')\n    return BinaryArch(bits=bits, isa=isa)\n\n\ndef test_compile(\n    cc: List[str], *cflags: str,\n    src: str = '',\n    source_ext: str = 'c',\n    link_also: bool = True,\n    show_stderr: bool = False,\n    libraries: Iterable[str] = (),\n    ldflags: Iterable[str] = (),\n    get_output_arch: bool = False,\n) -> Union[bool, BinaryArch]:\n    src = src or 'int main(void) { return 0; }'\n    with tempfile.TemporaryDirectory(prefix='kitty-test-compile-') as tdir:\n        with open(os.path.join(tdir, f'source.{source_ext}'), 'w', encoding='utf-8') as srcf:\n            print(src, file=srcf)\n        output = os.path.join(tdir, 'source.output')\n        ret = subprocess.Popen(\n            cc + ['-Werror=implicit-function-declaration'] + list(cflags) + ([] if link_also else ['-c']) +\n            ['-o', output, srcf.name] +\n            [f'-l{x}' for x in libraries] + list(ldflags),\n            stdout=subprocess.DEVNULL, stdin=subprocess.DEVNULL,\n            stderr=None if show_stderr else subprocess.DEVNULL\n        ).wait()\n        if get_output_arch:\n            if ret != 0:\n                raise SystemExit(f'Failed to determine target architecture compiling test program failed with exit code: {ret}')\n            return get_binary_arch(output)\n        return ret == 0\n\n\ndef first_successful_compile(cc: List[str], *cflags: str, src: str = '', source_ext: str = 'c') -> str:\n    for x in cflags:\n        if test_compile(cc, *shlex.split(x), src=src, source_ext=source_ext):\n            return x\n    return ''\n\n\ndef set_arches(flags: List[str], *arches: str) -> None:\n    while True:\n        try:\n            idx = flags.index('-arch')\n        except ValueError:\n            break\n        del flags[idx]\n        del flags[idx]\n    for arch in arches:\n        flags.extend(('-arch', arch))\n\n\ndef init_env(\n    debug: bool = False,\n    sanitize: bool = False,\n    native_optimizations: bool = True,\n    link_time_optimization: bool = True,\n    profile: bool = False,\n    egl_library: Optional[str] = None,\n    startup_notification_library: Optional[str] = None,\n    canberra_library: Optional[str] = None,\n    systemd_library: Optional[str] = None,\n    fontconfig_library: Optional[str] = None,\n    extra_logging: Iterable[str] = (),\n    extra_include_dirs: Iterable[str] = (),\n    ignore_compiler_warnings: bool = False,\n    building_arch: str = '',\n    extra_library_dirs: Iterable[str] = (),\n    verbose: bool = True,\n    vcs_rev: str = '',\n) -> Env:\n    native_optimizations = native_optimizations and not sanitize\n    cc, ccver = cc_version()\n    if verbose:\n        print('CC:', cc, ccver)\n    stack_protector = first_successful_compile(cc, '-fstack-protector-strong', '-fstack-protector')\n    missing_braces = ''\n    if ccver < (5, 2):\n        missing_braces = '-Wno-missing-braces'\n    df = '-g3'\n    float_conversion = ''\n    if ccver >= (5, 0):\n        df += ' -Og'\n        float_conversion = '-Wfloat-conversion'\n    fortify_source = '' if sanitize and is_macos else '-D_FORTIFY_SOURCE=2'\n    optimize = df if debug or sanitize else '-O3'\n    sanitize_args = get_sanitize_args(cc, ccver) if sanitize else []\n    cppflags_ = os.environ.get(\n        'OVERRIDE_CPPFLAGS', '-D{}DEBUG'.format('' if debug else 'N'),\n    )\n    cppflags = shlex.split(cppflags_)\n    for el in extra_logging:\n        cppflags.append('-DDEBUG_{}'.format(el.upper().replace('-', '_')))\n    has_copy_file_range = test_compile(cc, src='#define _GNU_SOURCE 1\\n#include <unistd.h>\\nint main() { copy_file_range(1, NULL, 2, NULL, 0, 0); return 0; }')\n    werror = '' if ignore_compiler_warnings else '-pedantic-errors -Werror'\n    std = '' if is_openbsd else '-std=c11'\n    sanitize_flag = ' '.join(sanitize_args)\n    env_cflags = shlex.split(os.environ.get('CFLAGS', ''))\n    env_cppflags = shlex.split(os.environ.get('CPPFLAGS', ''))\n    env_ldflags = shlex.split(os.environ.get('LDFLAGS', ''))\n\n    cflags_ = os.environ.get(\n        'OVERRIDE_CFLAGS', (\n            f'-Wextra {float_conversion} -Wno-missing-field-initializers -Wall -Wstrict-prototypes {std}'\n            f' {werror} {optimize} {sanitize_flag} -fwrapv {stack_protector} {missing_braces}'\n            f' -pipe -fvisibility=hidden -fno-plt'\n        )\n    )\n    cflags = shlex.split(cflags_) + shlex.split(\n        sysconfig.get_config_var('CCSHARED') or ''\n    )\n    ldflags_ = os.environ.get(\n        'OVERRIDE_LDFLAGS',\n        '-Wall ' + ' '.join(sanitize_args) + ('' if debug else ' -O3')\n    )\n    ldflags = shlex.split(ldflags_)\n    ldflags.append('-shared')\n    cppflags += env_cppflags\n    cflags += env_cflags\n    if fortify_source:\n        for x in cflags:\n            if '_FORTIFY_SOURCE' in x:\n                break\n        else:\n            cflags.append(fortify_source)\n    ldflags += env_ldflags\n    if not debug and not sanitize and not is_openbsd and link_time_optimization:\n        # See https://github.com/google/sanitizers/issues/647\n        cflags.append('-flto')\n        ldflags.append('-flto')\n\n    if debug:\n        cflags.append('-DKITTY_DEBUG_BUILD')\n\n    if profile:\n        cppflags.append('-DWITH_PROFILER')\n        cflags.append('-g3')\n        ldflags.append('-lprofiler')\n\n    if debug or profile:\n        cflags.append('-fno-omit-frame-pointer')\n\n    library_paths: Dict[str, List[str]] = {}\n\n    def add_lpath(which: str, name: str, val: Optional[str]) -> None:\n        if val:\n            if '\"' in val:\n                raise SystemExit(f'Cannot have quotes in library paths: {val}')\n            library_paths.setdefault(which, []).append(f'{name}=\"{val}\"')\n\n    add_lpath('glfw/egl_context.c', '_GLFW_EGL_LIBRARY', egl_library)\n    add_lpath('kitty/desktop.c', '_KITTY_STARTUP_NOTIFICATION_LIBRARY', startup_notification_library)\n    add_lpath('kitty/desktop.c', '_KITTY_CANBERRA_LIBRARY', canberra_library)\n    add_lpath('kitty/systemd.c', '_KITTY_SYSTEMD_LIBRARY', systemd_library)\n    add_lpath('kitty/fontconfig.c', '_KITTY_FONTCONFIG_LIBRARY', fontconfig_library)\n\n    for path in extra_include_dirs:\n        cflags.append(f'-I{path}')\n\n    ldpaths = []\n    for path in extra_library_dirs:\n        ldpaths.append(f'-L{path}')\n\n    if os.environ.get(\"DEVELOP_ROOT\"):\n        cflags.insert(0, f'-I{os.environ[\"DEVELOP_ROOT\"]}/include')\n        ldpaths.insert(0, f'-L{os.environ[\"DEVELOP_ROOT\"]}/lib')\n\n    if building_arch:\n        set_arches(cflags, building_arch)\n        set_arches(ldflags, building_arch)\n    ba = test_compile(cc, *(cppflags + cflags), ldflags=ldflags, get_output_arch=True)\n    assert isinstance(ba, BinaryArch)\n    if ba.isa not in (ISA.AMD64, ISA.X86, ISA.ARM64):\n        cppflags.append('-DKITTY_NO_SIMD')\n\n    control_flow_protection = ''\n    if ba.isa == ISA.AMD64:\n        control_flow_protection = '-fcf-protection=full' if ccver >= (9, 0) else ''\n    elif ba.isa == ISA.ARM64:\n        # Using -mbranch-protection=standard causes crashes on Linux ARM, reported\n        # in https://github.com/kovidgoyal/kitty/issues/6845#issuecomment-1835886938\n        if is_macos:\n            control_flow_protection = '-mbranch-protection=standard'\n\n    if control_flow_protection:\n        cflags.append(control_flow_protection)\n\n    if native_optimizations and ba.isa in (ISA.AMD64, ISA.X86):\n        cflags.extend('-march=native -mtune=native'.split())\n\n    ans = Env(\n        cc, cppflags, cflags, ldflags, library_paths, binary_arch=ba, native_optimizations=native_optimizations,\n        ccver=ccver, ldpaths=ldpaths, vcs_rev=vcs_rev,\n    )\n    ans.has_copy_file_range = bool(has_copy_file_range)\n    if verbose:\n        print(ans.cc_version_string.strip())\n        print('Detected:', ans.compiler_type)\n    return ans\n\n\ndef kitty_env(args: Options) -> Env:\n    ans = env.copy()\n    cflags = ans.cflags\n    cflags.append('-pthread')\n    cppflags = ans.cppflags\n    # We add 4000 to the primary version because vim turns on SGR mouse mode\n    # automatically if this version is high enough\n    ans.primary_version = version[0] + 4000\n    ans.secondary_version = version[1]\n    ans.xt_version = '.'.join(map(str, version))\n\n    at_least_version('harfbuzz', 1, 5)\n    cflags.extend(pkg_config('libpng', '--cflags-only-I'))\n    cflags.extend(pkg_config('lcms2', '--cflags-only-I'))\n    # simde doesnt come with pkg-config files but some Linux distros add\n    # them and on macOS when building with homebrew it is required\n    with suppress(SystemExit, subprocess.CalledProcessError):\n        cflags.extend(pkg_config('simde', '--cflags-only-I', fatal=False))\n    libcrypto_cflags, libcrypto_ldflags = libcrypto_flags()\n    cflags.extend(libcrypto_cflags)\n    if is_macos:\n        platform_libs = [\n            '-framework', 'Carbon', '-framework', 'CoreText', '-framework', 'CoreGraphics',\n            '-framework', 'AudioToolbox',\n        ]\n        test_program_src = '''#include <UserNotifications/UserNotifications.h>\n        int main(void) { return 0; }\\n'''\n        user_notifications_framework = first_successful_compile(\n            ans.cc, '-framework UserNotifications', src=test_program_src, source_ext='m')\n        if user_notifications_framework:\n            platform_libs.extend(shlex.split(user_notifications_framework))\n        else:\n            raise SystemExit('UserNotifications framework missing')\n        # Apple deprecated OpenGL in Mojave (10.14) silence the endless\n        # warnings about it\n        cppflags.append('-DGL_SILENCE_DEPRECATION')\n    else:\n        cflags.extend(pkg_config('fontconfig', '--cflags-only-I'))\n        platform_libs = []\n    cflags.extend(pkg_config('harfbuzz', '--cflags-only-I'))\n    platform_libs.extend(pkg_config('harfbuzz', '--libs'))\n    pylib = get_python_flags(args, cflags)\n    gl_libs = ['-framework', 'OpenGL'] if is_macos else pkg_config('gl', '--libs')\n    libpng = pkg_config('libpng', '--libs')\n    lcms2 = pkg_config('lcms2', '--libs')\n    ans.ldpaths += pylib + platform_libs + gl_libs + libpng + lcms2 + libcrypto_ldflags\n    if is_macos:\n        ans.ldpaths.extend('-framework Cocoa'.split())\n    elif not is_openbsd:\n        ans.ldpaths += ['-lrt']\n        if '-ldl' not in ans.ldpaths:\n            ans.ldpaths.append('-ldl')\n    if '-lz' not in ans.ldpaths:\n        ans.ldpaths.append('-lz')\n\n    return ans\n\n\ndef define(x: str) -> str:\n    return f'-D{x}'\n\n\ndef run_tool(cmd: Union[str, List[str]], desc: Optional[str] = None) -> None:\n    if isinstance(cmd, str):\n        cmd = shlex.split(cmd[0])\n    if verbose:\n        desc = None\n    print(desc or ' '.join(cmd))\n    p = subprocess.Popen(cmd)\n    ret = p.wait()\n    if ret != 0:\n        if desc:\n            print(' '.join(cmd))\n        raise SystemExit(ret)\n\n\n@lru_cache\ndef get_vcs_rev() -> str:\n    ans = ''\n    if os.path.exists('.git'):\n        try:\n            rev = subprocess.check_output(['git', 'rev-parse', 'HEAD']).decode('utf-8')\n        except FileNotFoundError:\n            try:\n                with open('.git/refs/heads/master') as f:\n                    rev = f.read()\n            except NotADirectoryError:\n                with open('.git') as f:\n                    gitloc = f.read()\n                with open(os.path.join(gitloc, 'refs/heads/master')) as f:\n                    rev = f.read()\n\n        ans = rev.strip()\n    return ans\n\n\n@lru_cache\ndef base64_defines(isa: ISA) -> List[str]:\n    defs = {\n        'HAVE_AVX512': 0,\n        'HAVE_AVX2': 0,\n        'HAVE_NEON32': 0,\n        'HAVE_NEON64': 0,\n        'HAVE_SSSE3': 0,\n        'HAVE_SSE41': 0,\n        'HAVE_SSE42': 0,\n        'HAVE_AVX': 0,\n    }\n    if isa == ISA.ARM64:\n        defs['HAVE_NEON64'] = 1\n    elif isa == ISA.AMD64:\n        defs['HAVE_AVX2'] = 1\n        defs['HAVE_AVX'] = 1\n        defs['HAVE_SSE42'] = 1\n        defs['HAVE_SSE41'] = 1\n        defs['HAVE_SSE3'] = 1\n    elif isa == ISA.X86:\n        defs['HAVE_SSE42'] = 1\n        defs['HAVE_SSE41'] = 1\n        defs['HAVE_SSE3'] = 1\n    return [f'{k}={v}' for k, v in defs.items()]\n\n\ndef get_source_specific_defines(env: Env, src: str) -> Tuple[str, List[str], Optional[List[str]]]:\n    if src == 'kitty/vt-parser-dump.c':\n        return 'kitty/vt-parser.c', [], ['DUMP_COMMANDS']\n    if src == 'kitty/data-types.c':\n        if not env.vcs_rev:\n            env.vcs_rev = get_vcs_rev()\n        return src, [], [f'KITTY_VCS_REV=\"{env.vcs_rev}\"', f'WRAPPED_KITTENS=\"{wrapped_kittens()}\"']\n    if src.startswith('3rdparty/base64/'):\n        return src, ['3rdparty/base64',], base64_defines(env.binary_arch.isa)\n    if src == 'kitty/screen.c':\n        return src, [], [f'PRIMARY_VERSION={env.primary_version}', f'SECONDARY_VERSION={env.secondary_version}', f'XT_VERSION=\"{env.xt_version}\"']\n    if src == 'kitty/fast-file-copy.c':\n        return src, [], (['HAS_COPY_FILE_RANGE'] if env.has_copy_file_range else None)\n    try:\n        return src, [], env.library_paths[src]\n    except KeyError:\n        return src, [], None\n\n\ndef get_source_specific_cflags(env: Env, src: str) -> List[str]:\n    ans = list(env.cflags)\n    # SIMD specific flags\n    if src in ('kitty/simd-string-128.c', 'kitty/simd-string-256.c'):\n        # simde recommends these are used for best performance\n        ans.extend(('-fopenmp-simd', '-DSIMDE_ENABLE_OPENMP'))\n        if env.binary_arch.isa in (ISA.AMD64, ISA.X86):\n            ans.append('-msse4.2' if '128' in src else '-mavx2')\n            if '256' in src:\n                # We have manual vzeroupper so prevent compiler from emitting it causing duplicates\n                if env.compiler_type is CompilerType.clang:\n                    ans.append('-mllvm')\n                    ans.append('-x86-use-vzeroupper=0')\n                else:\n                    ans.append('-mno-vzeroupper')\n    elif src.startswith('3rdparty/base64/lib/arch/'):\n        if env.binary_arch.isa in (ISA.AMD64, ISA.X86):\n            q = src.split(os.path.sep)\n            if 'sse3' in q:\n                ans.append('-msse3')\n            elif 'sse41' in q:\n                ans.append('-msse4.1')\n            elif 'sse42' in q:\n                ans.append('-msse4.2')\n            elif 'avx' in q:\n                ans.append('-mavx')\n            elif 'avx2' in q:\n                ans.append('-mavx2')\n    return ans\n\n\ndef newer(dest: str, *sources: str) -> bool:\n    try:\n        dtime = os.path.getmtime(dest)\n    except OSError:\n        return True\n    for s in sources:\n        with suppress(FileNotFoundError):\n            if os.path.getmtime(s) >= dtime:\n                return True\n    return False\n\n\ndef dependecies_for(src: str, obj: str, all_headers: Iterable[str]) -> Iterable[str]:\n    dep_file = obj.rpartition('.')[0] + '.d'\n    try:\n        with open(dep_file) as f:\n            deps = f.read()\n    except FileNotFoundError:\n        yield src\n        yield from iter(all_headers)\n    else:\n        RE_INC = re.compile(\n            r'^(?P<target>.+?):\\s+(?P<deps>.+?)$', re.MULTILINE\n        )\n        SPACE_TOK = '\\x1B'\n\n        text = deps.replace('\\\\\\n', ' ').replace('\\\\ ', SPACE_TOK)\n        for match in RE_INC.finditer(text):\n            files = (\n                f.replace(SPACE_TOK, ' ') for f in match.group('deps').split()\n            )\n            for path in files:\n                path = os.path.abspath(path)\n                if path.startswith(src_base):\n                    yield path\n\n\ndef parallel_run(items: List[Command]) -> None:\n    try:\n        num_workers = max(2, os.cpu_count() or 1)\n    except Exception:\n        num_workers = 2\n    items = list(reversed(items))\n    workers: Dict[int, Tuple[Optional[Command], Optional['subprocess.Popen[bytes]']]] = {}\n    failed = None\n    num, total = 0, len(items)\n\n    def wait() -> None:\n        nonlocal failed\n        if not workers:\n            return\n        pid, s = os.wait()\n        compile_cmd, w = workers.pop(pid, (None, None))\n        if compile_cmd is None:\n            return\n        if ((s & 0xff) != 0 or ((s >> 8) & 0xff) != 0):\n            if failed is None:\n                failed = compile_cmd\n        elif compile_cmd.on_success is not None:\n            compile_cmd.on_success()\n\n    printed = False\n    isatty = sys.stdout.isatty()\n    while items and failed is None:\n        while len(workers) < num_workers and items:\n            compile_cmd = items.pop()\n            num += 1\n            if verbose:\n                print(' '.join(compile_cmd.cmd))\n            elif isatty:\n                print(f'\\r\\x1b[K[{num}/{total}] {compile_cmd.desc}', end='')  # ]]\n            else:\n                print(f'[{num}/{total}] {compile_cmd.desc}', flush=True)\n            printed = True\n            w = subprocess.Popen(compile_cmd.cmd, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)\n            workers[w.pid] = compile_cmd, w\n        wait()\n    while len(workers):\n        wait()\n    if not verbose and printed:\n        print(' done')\n    if failed:\n        print(failed.desc)\n        run_tool(list(failed.cmd))\n\n\ndef add_builtin_fonts(args: Options) -> None:\n    fonts_dir = os.path.join(src_base, 'fonts')\n    os.makedirs(fonts_dir, exist_ok=True)\n\n    for psname, (filename, human_name) in {\n        'SymbolsNFM': ('SymbolsNerdFontMono-Regular.ttf', 'Symbols NERD Font Mono')\n    }.items():\n        dest = os.path.join(fonts_dir, filename)\n        if os.path.exists(dest):\n            continue\n        font_file = ''\n        if is_macos:\n            for candidate in (os.path.expanduser('~/Library/Fonts'), '/Library/Fonts', '/System/Library/Fonts', '/Network/Library/Fonts'):\n                q = os.path.join(candidate, filename)\n                if os.path.exists(q):\n                    font_file = q\n                    break\n        else:\n            lines = subprocess.check_output([\n                'fc-match', '--format', '%{file}\\n%{postscriptname}', f'term:postscriptname={psname}', 'file', 'postscriptname']).decode().splitlines()\n            if len(lines) != 2:\n                raise SystemExit(f'fc-match returned unexpected output: {lines}')\n            if lines[1] != psname:\n                raise SystemExit(f'The font {human_name!r} was not found on your system, please install it')\n            font_file = lines[0]\n        if not font_file:\n            raise SystemExit(f'The font {human_name!r} was not found on your system, please install it')\n        print(f'Copying {human_name!r} from {font_file}')\n        shutil.copy(font_file, dest)\n        os.chmod(dest, 0o644)\n\n\ndef compile_c_extension(\n    kenv: Env,\n    module: str,\n    compilation_database: CompilationDatabase,\n    sources: List[str],\n    headers: List[str],\n    desc_prefix: str = '',\n    build_dsym: bool = False,\n) -> None:\n    prefix = os.path.basename(module)\n    objects = [\n        os.path.join(build_dir, f'{prefix}-{src.replace(\"/\", \"-\")}.o')\n        for src in sources\n    ]\n\n    for original_src, dest in zip(sources, objects):\n        src = original_src\n        cppflags = kenv.cppflags[:]\n        src, include_paths, defines = get_source_specific_defines(kenv, src)\n        if defines is not None:\n            cppflags.extend(map(define, defines))\n        cflags = get_source_specific_cflags(kenv, src)\n        cmd = kenv.cc + ['-MMD'] + cppflags + [f'-I{x}' for x in include_paths] + cflags\n        cmd += ['-c', src] + ['-o', dest]\n        key = CompileKey(original_src, os.path.basename(dest))\n        desc = f'Compiling {emphasis(desc_prefix + src)} ...'\n        compilation_database.add_command(desc, cmd, partial(newer, dest, *dependecies_for(src, dest, headers)), key=key, keyfile=src)\n    dest = os.path.join(build_dir, f'{module}.so')\n    real_dest = f'{module}.so'\n    link_targets.append(os.path.abspath(real_dest))\n    os.makedirs(os.path.dirname(dest), exist_ok=True)\n    desc = f'Linking {emphasis(desc_prefix + module)} ...'\n    # Old versions of clang don't like -pthread being passed to the linker\n    # Don't treat linker warnings as errors (linker generates spurious\n    # warnings on some old systems)\n    unsafe = {'-pthread', '-Werror', '-pedantic-errors'}\n    linker_cflags = list(filter(lambda x: x not in unsafe, kenv.cflags))\n    cmd = kenv.cc + linker_cflags + kenv.ldflags + objects + kenv.ldpaths + ['-o', dest]\n\n    def on_success() -> None:\n        os.rename(dest, real_dest)\n\n    compilation_database.add_command(desc, cmd, partial(newer, real_dest, *objects), on_success=on_success, key=LinkKey(f'{module}.so'))\n    if is_macos and build_dsym:\n        real_dest = os.path.abspath(real_dest)\n        desc = f'Linking dSYM {emphasis(desc_prefix + module)} ...'\n        dsym = f'{real_dest}.dSYM/Contents/Resources/DWARF/{os.path.basename(real_dest)}'\n        compilation_database.add_command(desc, ['dsymutil', real_dest], partial(newer, dsym, real_dest), key=LinkKey(dsym), is_post_link=True)\n\n\ndef find_c_files() -> Tuple[List[str], List[str]]:\n    ans, headers = [], []\n    d = 'kitty'\n    exclude = {\n        'fontconfig.c', 'freetype.c', 'desktop.c', 'freetype_render_ui_text.c'\n    } if is_macos else {\n        'core_text.m', 'cocoa_window.m', 'macos_process_info.c'\n    }\n    for x in sorted(os.listdir(d)):\n        ext = os.path.splitext(x)[1]\n        if ext in ('.c', '.m') and os.path.basename(x) not in exclude:\n            ans.append(os.path.join('kitty', x))\n        elif ext == '.h':\n            headers.append(os.path.join('kitty', x))\n    ans.append('kitty/vt-parser-dump.c')\n\n    # ringbuf\n    ans.append('3rdparty/ringbuf/ringbuf.c')\n    # base64\n    ans.extend(glob.glob('3rdparty/base64/lib/arch/*/codec.c'))\n    ans.append('3rdparty/base64/lib/tables/tables.c')\n    ans.append('3rdparty/base64/lib/codec_choose.c')\n    ans.append('3rdparty/base64/lib/lib.c')\n    return ans, headers\n\n\ndef compile_glfw(compilation_database: CompilationDatabase, build_dsym: bool = False) -> None:\n    modules = 'cocoa' if is_macos else 'x11 wayland'\n    for module in modules.split():\n        try:\n            genv = glfw.init_env(env, pkg_config, pkg_version, at_least_version, test_compile, module)\n        except SystemExit as err:\n            if module != 'wayland':\n                raise\n            print(err, file=sys.stderr)\n            print(error('Disabling building of wayland backend'), file=sys.stderr)\n            continue\n        sources = [os.path.join('glfw', x) for x in genv.sources]\n        all_headers = [os.path.join('glfw', x) for x in genv.all_headers]\n        if module == 'wayland':\n            try:\n                glfw.build_wayland_protocols(genv, parallel_run, emphasis, newer, 'glfw')\n            except SystemExit as err:\n                print(err, file=sys.stderr)\n                print(error('Disabling building of wayland backend'), file=sys.stderr)\n                continue\n        compile_c_extension(\n            genv, f'kitty/glfw-{module}', compilation_database,\n            sources, all_headers, desc_prefix=f'[{module}] ', build_dsym=build_dsym)\n\n\ndef kittens_env(args: Options) -> Env:\n    kenv = env.copy()\n    cflags = kenv.cflags\n    cflags.append('-pthread')\n    cflags.append('-Ikitty')\n    pylib = get_python_flags(args, cflags)\n    kenv.ldpaths += pylib\n    return kenv\n\n\ndef compile_kittens(args: Options) -> None:\n    kenv = kittens_env(args)\n\n    def list_files(q: str) -> List[str]:\n        return sorted(glob.glob(q))\n\n    def files(\n            kitten: str,\n            output: str,\n            extra_headers: Sequence[str] = (),\n            extra_sources: Sequence[str] = (),\n            filter_sources: Optional[Callable[[str], bool]] = None,\n            includes: Sequence[str] = (), libraries: Sequence[str] = (),\n    ) -> Tuple[str, List[str], List[str], str, Sequence[str], Sequence[str]]:\n        sources = list(filter(filter_sources, list(extra_sources) + list_files(os.path.join('kittens', kitten, '*.c'))))\n        headers = list_files(os.path.join('kittens', kitten, '*.h')) + list(extra_headers)\n        return kitten, sources, headers, f'kittens/{kitten}/{output}', includes, libraries\n\n    for kitten, sources, all_headers, dest, includes, libraries in (\n        files('transfer', 'rsync', libraries=pkg_config('libxxhash', '--libs'), includes=pkg_config('libxxhash', '--cflags-only-I')),\n    ):\n        final_env = kenv.copy()\n        final_env.cflags.extend(includes)\n        final_env.ldpaths[:0] = list(libraries)\n        compile_c_extension(\n            final_env, dest, args.compilation_database, sources, all_headers + ['kitty/data-types.h'], build_dsym=args.build_dsym)\n\n\ndef init_env_from_args(args: Options, native_optimizations: bool = False) -> None:\n    global env\n    env = init_env(\n        args.debug, args.sanitize, native_optimizations, args.link_time_optimization, args.profile,\n        args.egl_library, args.startup_notification_library, args.canberra_library, args.systemd_library, args.fontconfig_library,\n        args.extra_logging, args.extra_include_dirs, args.ignore_compiler_warnings,\n        args.building_arch, args.extra_library_dirs, verbose=args.verbose > 0, vcs_rev=args.vcs_rev,\n    )\n\n\n@lru_cache\ndef extract_rst_targets() -> Dict[str, Dict[str, str]]:\n    m = runpy.run_path('docs/extract-rst-targets.py')\n    return cast(Dict[str, Dict[str, str]], m['main']())\n\n\ndef build_ref_map(skip_generation: bool = False) -> str:\n    dest = 'kitty/docs_ref_map_generated.h'\n    if not skip_generation:\n        d = extract_rst_targets()\n        h = 'static const char docs_ref_map[] = {\\n' + textwrap.fill(', '.join(map(str, bytearray(json.dumps(d, sort_keys=True).encode('utf-8'))))) + '\\n};\\n'\n        q = ''\n        with suppress(FileNotFoundError), open(dest) as f:\n            q = f.read()\n        if q != h:\n            with open(dest, 'w') as f:\n                f.write(h)\n    return dest\n\n\ndef build_uniforms_header(skip_generation: bool = False) -> str:\n    dest = 'kitty/uniforms_generated.h'\n    if skip_generation:\n        return dest\n    lines = ['#include \"gl.h\"', '']\n    a = lines.append\n    uniform_names: Dict[str, Tuple[str, ...]] = {}\n    class_names = {}\n    function_names = {}\n\n    def find_uniform_names(raw: str) -> Iterator[str]:\n        for m in re.finditer(r'^uniform\\s+\\S+\\s+(.+?);', raw, flags=re.MULTILINE):\n            for x in m.group(1).split(','):\n                yield x.strip().partition('[')[0]\n\n    for x in sorted(glob.glob('kitty/*.glsl')):\n        name = os.path.basename(x).partition('.')[0]\n        name, sep, shader_type = name.partition('_')\n        if not sep or shader_type not in ('fragment', 'vertex'):\n            continue\n        class_names[name] = f'{name.capitalize()}Uniforms'\n        function_names[name] = f'get_uniform_locations_{name}'\n        with open(x) as f:\n            raw = f.read()\n        uniform_names[name] = uniform_names.setdefault(name, ()) + tuple(find_uniform_names(raw))\n    for name in sorted(class_names):\n        class_name, function_name, uniforms = class_names[name], function_names[name], uniform_names[name]\n        a(f'typedef struct {class_name} ''{')\n        for n in uniforms:\n            a(f'    GLint {n};')\n        a('}'f' {class_name};')\n        a('')\n        a(f'static inline void\\n{function_name}(int program, {class_name} *ans) ''{')\n        for n in uniforms:\n            a(f'    ans->{n} = get_uniform_location(program, \"{n}\");')\n        a('}')\n        a('')\n    src = '\\n'.join(lines)\n    try:\n        with open(dest) as f:\n            current = f.read()\n    except FileNotFoundError:\n        current = ''\n    if src != current:\n        with open(dest, 'w') as f:\n            f.write(src)\n    return dest\n\n\n@lru_cache\ndef wrapped_kittens() -> str:\n    with open('shell-integration/ssh/kitty') as f:\n        for line in f:\n            if line.startswith('    wrapped_kittens=\"'):\n                val = line.strip().partition('\"')[2][:-1]\n                return ' '.join(sorted(filter(None, val.split())))\n    raise Exception('Failed to read wrapped kittens from kitty wrapper script')\n\n\ndef build(args: Options, native_optimizations: bool = True, call_init: bool = True) -> None:\n    if call_init:\n        init_env_from_args(args, native_optimizations)\n    sources, headers = find_c_files()\n    headers.append(build_ref_map(args.skip_code_generation))\n    headers.append(build_uniforms_header(args.skip_code_generation))\n    compile_c_extension(\n        kitty_env(args), 'kitty/fast_data_types', args.compilation_database, sources, headers,\n        build_dsym=args.build_dsym,\n    )\n    compile_glfw(args.compilation_database, args.build_dsym)\n    compile_kittens(args)\n    add_builtin_fonts(args)\n\n\ndef safe_makedirs(path: str) -> None:\n    os.makedirs(path, exist_ok=True)\n\n\ndef update_go_generated_files(args: Options, kitty_exe: str) -> None:\n    if args.skip_code_generation:\n        print('Skipping generation of Go files due to command line option', flush=True)\n        return\n    # update all the various auto-generated go files, if needed\n    if args.verbose:\n        print('Updating Go generated files...', flush=True)\n\n    env = os.environ.copy()\n    env['ASAN_OPTIONS'] = 'detect_leaks=0'\n    cp = subprocess.run([kitty_exe, '+launch', os.path.join(src_base, 'gen/go_code.py')], stdout=subprocess.DEVNULL, env=env)\n    if cp.returncode != 0:\n        if os.environ.get('CI') == 'true' and cp.returncode < 0 and shutil.which('coredumpctl'):\n            subprocess.run(['sh', '-c', 'echo bt | coredumpctl debug'])\n        raise SystemExit(f'Generating go code failed with exit code: {cp.returncode}')\n\n\ndef parse_go_version(x: str) -> Tuple[int, int, int]:\n    def safe_int(x: str) -> int:\n        with suppress(ValueError):\n            return int(x)\n        return int(re.split(r'[-a-zA-Z]', x)[0])\n    ans = list(map(safe_int, x.split('.')))\n    while len(ans) < 3:\n        ans.append(0)\n    return ans[0], ans[1], ans[2]\n\n\ndef build_static_kittens(\n    args: Options, launcher_dir: str, destination_dir: str = '', for_freeze: bool = False,\n    for_platform: Optional[Tuple[str, str]] = None\n) -> str:\n    sys.stdout.flush()\n    sys.stderr.flush()\n    go = shutil.which('go')\n    if not go:\n        raise SystemExit('The go tool was not found on this system. Install Go')\n    required_go_version = subprocess.check_output([go] + 'list -f {{.GoVersion}} -m'.split(), env=dict(os.environ, GO111MODULE=\"on\")).decode().strip()\n    current_go_version = subprocess.check_output([go, 'version']).decode().strip().split()[2][2:]\n    if parse_go_version(required_go_version) > parse_go_version(current_go_version):\n        raise SystemExit(f'The version of go on this system ({current_go_version}) is too old. go >= {required_go_version} is needed')\n    if not for_platform:\n        update_go_generated_files(args, os.path.join(launcher_dir, appname))\n    if args.skip_building_kitten:\n        print('Skipping building of the kitten binary because of a command line option. Build is incomplete', file=sys.stderr)\n        return ''\n    cmd = [go, 'build', '-v']\n    vcs_rev = args.vcs_rev or get_vcs_rev()\n    ld_flags: List[str] = []\n    binary_data_flags = [f\"-X kitty.VCSRevision={vcs_rev}\"]\n    if for_freeze:\n        binary_data_flags.append(\"-X kitty.IsFrozenBuild=true\")\n    if for_platform:\n        binary_data_flags.append(\"-X kitty.IsStandaloneBuild=true\")\n    if not args.debug:\n        ld_flags.append('-s')\n        ld_flags.append('-w')\n    cmd += ['-ldflags', ' '.join(binary_data_flags + ld_flags)]\n    dest = os.path.join(destination_dir or launcher_dir, 'kitten')\n    if for_platform:\n        dest += f'-{for_platform[0]}-{for_platform[1]}'\n    src = os.path.abspath('tools/cmd')\n\n    def run_one(dest: str) -> None:\n        c = cmd + ['-o', dest, src]\n        if args.verbose:\n            print(shlex.join(c))\n        e = os.environ.copy()\n        # https://github.com/kovidgoyal/kitty/issues/6051#issuecomment-1441369828\n        e.pop('PWD', None)\n        if for_platform:\n            e['CGO_ENABLED'] = '0'\n            e['GOOS'] = for_platform[0]\n            e['GOARCH'] = for_platform[1]\n        elif args.building_arch:\n            e['GOARCH'] = {'x86_64': 'amd64', 'arm64': 'arm64'}[args.building_arch]\n        cp = subprocess.run(c, env=e)\n        if cp.returncode != 0:\n            raise SystemExit(cp.returncode)\n\n    if is_macos and for_freeze and not for_platform:\n        adests = []\n        for arch in macos_universal_arches:\n            args.building_arch = arch\n            adest = dest + '-' + arch\n            adests.append(adest)\n            run_one(adest)\n        lipo({dest: adests})\n    else:\n        run_one(dest)\n    return dest\n\n\ndef build_static_binaries(args: Options, launcher_dir: str) -> None:\n    arches = 'amd64', 'arm64'\n    for os_, arches_ in {\n        'darwin': arches, 'linux': arches + ('arm', '386'), 'freebsd': arches, 'netbsd': arches, 'openbsd': arches,\n        'dragonfly': ('amd64',),\n    }.items():\n        for arch in arches_:\n            print('Cross compiling static kitten for:', os_, arch)\n            build_static_kittens(args, launcher_dir, args.dir_for_static_binaries, for_platform=(os_, arch))\n\n\n@lru_cache(2)\ndef kitty_cli_boolean_options() -> Tuple[str, ...]:\n    with open(os.path.join(src_base, 'kitty/cli.py')) as f:\n        raw = f.read()\n    m = re.search(r\"^\\s*OPTIONS = '''(.+?)'''\", raw, flags=re.MULTILINE | re.DOTALL)\n    assert m is not None\n    ans: List[str] = []\n    in_option: List[str] = []\n    prev_line_was_blank = False\n    for line in m.group(1).splitlines():\n        if in_option:\n            is_blank = not line.strip()\n            if is_blank:\n                if prev_line_was_blank:\n                    in_option = []\n            prev_line_was_blank = is_blank\n            if line.startswith('type=bool-'):\n                ans.extend(x.lstrip('-') for x in in_option)\n        else:\n            if line.startswith('-'):\n                in_option = line.strip().split()\n    return tuple(ans)\n\n\ndef build_launcher(args: Options, launcher_dir: str = '.', bundle_type: str = 'source') -> None:\n    werror = '' if args.ignore_compiler_warnings else '-pedantic-errors -Werror'\n    cflags = f'-Wall {werror} -fpie'.split()\n    cppflags = [define(f'WRAPPED_KITTENS=\" {wrapped_kittens()} \"')]\n    libs: List[str] = []\n    ldflags = shlex.split(os.environ.get('LDFLAGS', ''))\n    if args.profile or args.sanitize:\n        cflags.append('-g3')\n        if args.sanitize:\n            sanitize_args = get_sanitize_args(env.cc, env.ccver)\n            cflags.extend(sanitize_args)\n            ldflags.extend(sanitize_args)\n            libs += ['-lasan'] if not is_macos and env.compiler_type is not CompilerType.clang else []\n        if args.profile:\n            libs.append('-lprofiler')\n    else:\n        cflags.append('-g3' if args.debug else '-O3')\n    if bundle_type.endswith('-freeze'):\n        cppflags.append('-DFOR_BUNDLE')\n        cppflags.append(f'-DPYVER=\"{sysconfig.get_python_version()}\"')\n        cppflags.append(f'-DKITTY_LIB_DIR_NAME=\"{args.libdir_name}\"')\n    elif bundle_type == 'source':\n        cppflags.append('-DFROM_SOURCE')\n    elif bundle_type == 'develop':\n        cppflags.append('-DFROM_SOURCE')\n        ph = os.path.relpath(os.environ[\"DEVELOP_ROOT\"], '.')\n        cppflags.append(f'-DSET_PYTHON_HOME=\"{ph}\"')\n        if not is_macos:\n            ldflags += ['-Wl,--disable-new-dtags', f'-Wl,-rpath,$ORIGIN/../../{ph}/lib']\n    if bundle_type.startswith('macos-'):\n        klp = '../Resources/kitty'\n    elif bundle_type.startswith('linux-'):\n        klp = '../{}/kitty'.format(args.libdir_name.strip('/'))\n    elif bundle_type == 'source':\n        klp = os.path.relpath('.', launcher_dir)\n    elif bundle_type == 'develop':\n        # make the kitty executable relocatable\n        klp = src_base\n    else:\n        raise SystemExit(f'Unknown bundle type: {bundle_type}')\n    cppflags.append(f'-DKITTY_LIB_PATH=\"{klp}\"')\n    pylib = get_python_flags(args, cflags, for_main_executable=True)\n    cppflags += shlex.split(os.environ.get('CPPFLAGS', ''))\n    cflags += shlex.split(os.environ.get('CFLAGS', ''))\n    for path in args.extra_include_dirs:\n        cflags.append(f'-I{path}')\n    if args.building_arch:\n        set_arches(cflags, args.building_arch)\n        set_arches(ldflags, args.building_arch)\n    if bundle_type == 'linux-freeze':\n        # --disable-new-dtags prevents -rpath from generating RUNPATH instead of\n        # RPATH entries in the launcher. The ld dynamic linker does not search\n        # RUNPATH locations for transitive dependencies, unlike RPATH.\n        ldflags += ['-Wl,--disable-new-dtags', '-Wl,-rpath,$ORIGIN/../lib']\n    os.makedirs(launcher_dir, exist_ok=True)\n    os.makedirs(build_dir, exist_ok=True)\n    objects = []\n    cppflags.append('-DKITTY_CLI_BOOL_OPTIONS=\" ' + ' '.join(kitty_cli_boolean_options()) + ' \"')\n    cppflags.append('-DKITTY_VERSION=\"' + '.'.join(map(str, version)) + '\"')\n    for src in ('kitty/launcher/main.c', 'kitty/launcher/single-instance.c'):\n        obj = os.path.join(build_dir, src.replace('/', '-').replace('.c', '.o'))\n        objects.append(obj)\n        cmd = env.cc + cppflags + cflags + ['-c', src, '-o', obj]\n        key = CompileKey(src, os.path.basename(obj))\n        args.compilation_database.add_command(f'Compiling {emphasis(src)} ...', cmd, partial(newer, obj, src), key=key, keyfile=src)\n    dest = os.path.join(launcher_dir, 'kitty')\n    link_targets.append(os.path.abspath(dest))\n    desc = f'Linking {emphasis(\"launcher\")} ...'\n    cmd = env.cc + ldflags + objects + libs + pylib + ['-o', dest]\n    args.compilation_database.add_command(desc, cmd, partial(newer, dest, *objects), key=LinkKey('kitty'))\n    if args.build_dsym and is_macos:\n        desc = f'Linking dSYM {emphasis(\"launcher\")} ...'\n        dsym = f'{dest}.dSYM/Contents/Resources/DWARF/{os.path.basename(dest)}'\n        args.compilation_database.add_command(desc, ['dsymutil', dest], partial(newer, dsym, dest), key=LinkKey(dsym), is_post_link=True)\n    args.compilation_database.build_all()\n\n\n# Packaging {{{\ndef copy_man_pages(ddir: str) -> None:\n    mandir = os.path.join(ddir, 'share', 'man')\n    safe_makedirs(mandir)\n    man_levels = '15'\n    with suppress(FileNotFoundError):\n        for x in man_levels:\n            shutil.rmtree(os.path.join(mandir, f'man{x}'))\n    src = 'docs/_build/man'\n    if not os.path.exists(src):\n        raise SystemExit('''\\\nThe kitty man pages are missing. If you are building from git then run:\nmake && make docs\n(needs the sphinx documentation system to be installed)\n''')\n    for x in man_levels:\n        os.makedirs(os.path.join(mandir, f'man{x}'))\n        for y in glob.glob(os.path.join(src, f'*.{x}')):\n            shutil.copy2(y, os.path.join(mandir, f'man{x}'))\n\n\ndef copy_html_docs(ddir: str) -> None:\n    htmldir = os.path.join(ddir, 'share', 'doc', appname, 'html')\n    safe_makedirs(os.path.dirname(htmldir))\n    with suppress(FileNotFoundError):\n        shutil.rmtree(htmldir)\n    src = 'docs/_build/html'\n    if not os.path.exists(src):\n        raise SystemExit('''\\\nThe kitty html docs are missing. If you are building from git then run:\nmake && make docs\n(needs the sphinx documentation system to be installed)\n''')\n    shutil.copytree(src, htmldir)\n\n\ndef compile_python(base_path: str) -> None:\n    import compileall\n    import py_compile\n    for root, dirs, files in os.walk(base_path):\n        for f in files:\n            if f.rpartition('.')[-1] in ('pyc', 'pyo'):\n                os.remove(os.path.join(root, f))\n\n    exclude = re.compile('.*/shell-integration/ssh/bootstrap.py')\n    compileall.compile_dir(\n        base_path, rx=exclude, force=True, optimize=(0, 1, 2), quiet=1, workers=0,  # type: ignore\n        invalidation_mode=py_compile.PycInvalidationMode.UNCHECKED_HASH, ddir='')\n\n\ndef create_linux_bundle_gunk(ddir: str, args: Options) -> None:\n    libdir_name = args.libdir_name\n    base = Path(ddir)\n    in_src_launcher = base / (f'{libdir_name}/kitty/kitty/launcher/kitty')\n    launcher = base / 'bin/kitty'\n    skip_docs = False\n    if not os.path.exists('docs/_build/html'):\n        kitten_exe = os.path.join(os.path.dirname(str(launcher)), 'kitten')\n        if os.path.exists(kitten_exe):\n            os.environ['KITTEN_EXE_FOR_DOCS'] = kitten_exe\n            make = 'gmake' if is_freebsd else 'make'\n            run_tool([make, 'docs'])\n        else:\n            if args.skip_building_kitten:\n                skip_docs = True\n                print('WARNING: You have chosen to skip building kitten.'\n                      ' This means docs could not be generated and will not be included in the linux package.'\n                      ' You should build kitten and then re-run this build.', file=sys.stderr)\n            else:\n                raise SystemExit(f'kitten binary not found at: {kitten_exe}')\n    if not skip_docs:\n        copy_man_pages(ddir)\n        copy_html_docs(ddir)\n    for (icdir, ext) in {'256x256': 'png', 'scalable': 'svg'}.items():\n        icdir = os.path.join(ddir, 'share', 'icons', 'hicolor', icdir, 'apps')\n        safe_makedirs(icdir)\n        shutil.copy2(f'logo/kitty.{ext}', icdir)\n    deskdir = os.path.join(ddir, 'share', 'applications')\n    safe_makedirs(deskdir)\n    with open(os.path.join(deskdir, 'kitty.desktop'), 'w') as f:\n        f.write(\n            '''\\\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=kitty\nGenericName=Terminal emulator\nComment=Fast, feature-rich, GPU based terminal\nTryExec=kitty\nStartupNotify=true\nExec=kitty\nIcon=kitty\nCategories=System;TerminalEmulator;\n''')\n    with open(os.path.join(deskdir, 'kitty-open.desktop'), 'w') as f:\n        f.write(\n            '''\\\n[Desktop Entry]\nVersion=1.0\nType=Application\nName=kitty URL Launcher\nGenericName=Terminal emulator\nComment=Open URLs with kitty\nStartupNotify=true\nTryExec=kitty\nExec=kitty +open %U\nIcon=kitty\nCategories=System;TerminalEmulator;\nNoDisplay=true\nMimeType=image/*;application/x-sh;application/x-shellscript;inode/directory;text/*;x-scheme-handler/kitty;x-scheme-handler/ssh;\n''')\n\n    if os.path.exists(in_src_launcher):\n        os.remove(in_src_launcher)\n    os.makedirs(os.path.dirname(in_src_launcher), exist_ok=True)\n    os.symlink(os.path.relpath(launcher, os.path.dirname(in_src_launcher)), in_src_launcher)\n\n\ndef macos_info_plist() -> bytes:\n    import plistlib\n    VERSION = '.'.join(map(str, version))\n\n    def access(what: str, verb: str = 'would like to access') -> str:\n        return f'A program running inside kitty {verb} {what}'\n\n    docs = [\n        {\n            'CFBundleTypeName': 'Terminal scripts',\n            'CFBundleTypeExtensions': ['command', 'sh', 'zsh', 'bash', 'fish', 'tool'],\n            'CFBundleTypeIconFile': f'{appname}.icns',\n            'CFBundleTypeRole': 'Editor',\n        },\n        {\n            'CFBundleTypeName': 'Folders',\n            'LSItemContentTypes': ['public.directory'],\n            'CFBundleTypeRole': 'Editor',\n            'LSHandlerRank': 'Alternate',\n        },\n        {\n            'LSItemContentTypes': ['public.unix-executable'],\n            'CFBundleTypeRole': 'Shell',\n        },\n        {\n            'CFBundleTypeName': 'Text files',\n            'LSItemContentTypes': ['public.text'],\n            'CFBundleTypeRole': 'Editor',\n            'LSHandlerRank': 'Alternate',\n        },\n        {\n            'CFBundleTypeName': 'Image files',\n            'LSItemContentTypes': ['public.image'],\n            'CFBundleTypeRole': 'Viewer',\n            'LSHandlerRank': 'Alternate',\n        },\n        # Allows dragging arbitrary files to kitty Dock icon, and list kitty in the Open With context menu.\n        {\n            'CFBundleTypeName': 'All files',\n            'LSItemContentTypes': ['public.archive', 'public.content', 'public.data'],\n            'CFBundleTypeRole': 'Editor',\n            'LSHandlerRank': 'Alternate',\n        },\n    ]\n\n    url_schemes = [\n        {\n            'CFBundleURLName': 'File URL',\n            'CFBundleURLSchemes': ['file'],\n        },\n        {\n            'CFBundleURLName': 'FTP URL',\n            'CFBundleURLSchemes': ['ftp', 'ftps'],\n        },\n        {\n            'CFBundleURLName': 'Gemini URL',\n            'CFBundleURLSchemes': ['gemini'],\n        },\n        {\n            'CFBundleURLName': 'Git URL',\n            'CFBundleURLSchemes': ['git'],\n        },\n        {\n            'CFBundleURLName': 'Gopher URL',\n            'CFBundleURLSchemes': ['gopher'],\n        },\n        {\n            'CFBundleURLName': 'HTTP URL',\n            'CFBundleURLSchemes': ['http', 'https'],\n        },\n        {\n            'CFBundleURLName': 'IRC URL',\n            'CFBundleURLSchemes': ['irc', 'irc6', 'ircs'],\n        },\n        {\n            'CFBundleURLName': 'kitty URL',\n            'CFBundleURLSchemes': ['kitty'],\n            'LSHandlerRank': 'Owner',\n            'LSIsAppleDefaultForScheme': True,\n        },\n        {\n            'CFBundleURLName': 'Mail Address URL',\n            'CFBundleURLSchemes': ['mailto'],\n        },\n        {\n            'CFBundleURLName': 'News URL',\n            'CFBundleURLSchemes': ['news', 'nntp'],\n        },\n        {\n            'CFBundleURLName': 'SSH and SFTP URL',\n            'CFBundleURLSchemes': ['ssh', 'sftp'],\n        },\n        {\n            'CFBundleURLName': 'Telnet URL',\n            'CFBundleURLSchemes': ['telnet'],\n        },\n    ]\n\n    services = [\n        {\n            'NSMenuItem': {'default': f'New {appname} Tab Here'},\n            'NSMessage': 'openTab',\n            'NSRequiredContext': {'NSTextContent': 'FilePath'},\n            'NSSendTypes': ['NSFilenamesPboardType', 'public.plain-text'],\n        },\n        {\n            'NSMenuItem': {'default': f'New {appname} Window Here'},\n            'NSMessage': 'openOSWindow',\n            'NSRequiredContext': {'NSTextContent': 'FilePath'},\n            'NSSendTypes': ['NSFilenamesPboardType', 'public.plain-text'],\n        },\n        {\n            'NSMenuItem': {'default': f'Open with {appname}'},\n            'NSMessage': 'openFileURLs',\n            'NSRequiredContext': {'NSTextContent': 'FilePath'},\n            'NSSendTypes': ['NSFilenamesPboardType', 'public.plain-text'],\n        },\n    ]\n\n    pl = dict(\n        # Naming\n        CFBundleName=appname,\n        CFBundleDisplayName=appname,\n        # Identification\n        CFBundleIdentifier=f'net.kovidgoyal.{appname}',\n        # Bundle Version Info\n        CFBundleVersion=VERSION,\n        CFBundleShortVersionString=VERSION,\n        CFBundleInfoDictionaryVersion='6.0',\n        NSHumanReadableCopyright=time.strftime('Copyright %Y, Kovid Goyal'),\n        CFBundleGetInfoString='kitty - The fast, feature-rich, GPU based terminal emulator. https://sw.kovidgoyal.net/kitty/',\n        # Operating System Version\n        LSMinimumSystemVersion='11.0.0',\n        # Categorization\n        CFBundlePackageType='APPL',\n        CFBundleSignature='????',\n        LSApplicationCategoryType='public.app-category.utilities',\n        # App Execution\n        CFBundleExecutable=appname,\n        LSEnvironment={'KITTY_LAUNCHED_BY_LAUNCH_SERVICES': '1'},\n        LSRequiresNativeExecution=True,\n        NSSupportsSuddenTermination=False,\n        # Localization\n        # see https://github.com/kovidgoyal/kitty/issues/1233\n        CFBundleDevelopmentRegion='English',\n        CFBundleAllowMixedLocalizations=True,\n        TICapsLockLanguageSwitchCapable=True,\n        # User Interface and Graphics\n        CFBundleIconFile=f'{appname}.icns',\n        NSHighResolutionCapable=True,\n        NSSupportsAutomaticGraphicsSwitching=True,\n        # Needed for dark mode in Mojave when linking against older SDKs\n        NSRequiresAquaSystemAppearance='NO',\n        # Document and URL Types\n        CFBundleDocumentTypes=docs,\n        CFBundleURLTypes=url_schemes,\n        # Services\n        NSServices=services,\n        # Calendar and Reminders\n        NSCalendarsUsageDescription=access('your calendar data.'),\n        NSRemindersUsageDescription=access('your reminders.'),\n        # Camera and Microphone\n        NSCameraUsageDescription=access('the camera.'),\n        NSMicrophoneUsageDescription=access('the microphone.'),\n        # Contacts\n        NSContactsUsageDescription=access('your contacts.'),\n        # Location\n        NSLocationUsageDescription=access('your location information.'),\n        NSLocationTemporaryUsageDescriptionDictionary=access('your location temporarily.'),\n        # Motion\n        NSMotionUsageDescription=access('motion data.'),\n        # Networking\n        NSLocalNetworkUsageDescription=access('local network.'),\n        # Photos\n        NSPhotoLibraryUsageDescription=access('your photo library.'),\n        # Scripting\n        NSAppleScriptEnabled=False,\n        # Security\n        NSAppleEventsUsageDescription=access('AppleScript.'),\n        NSSystemAdministrationUsageDescription=access('elevated privileges.', 'requires'),\n        NSBluetoothAlwaysUsageDescription=access('Bluetooth.'),\n        # Speech\n        NSSpeechRecognitionUsageDescription=access('speech recognition.'),\n    )\n    return plistlib.dumps(pl)\n\n\ndef create_macos_app_icon(where: str = 'Resources') -> None:\n    iconset_dir = os.path.abspath(os.path.join('logo', f'{appname}.iconset'))\n    icns_dir = os.path.join(where, f'{appname}.icns')\n    try:\n        subprocess.check_call([\n            'iconutil', '-c', 'icns', iconset_dir, '-o', icns_dir\n        ])\n    except FileNotFoundError:\n        print(f'{error(\"iconutil not found\")}, using png2icns (without retina support) to convert the logo', file=sys.stderr)\n        subprocess.check_call([\n            'png2icns', icns_dir\n        ] + [os.path.join(iconset_dir, logo) for logo in [\n            # png2icns does not support retina icons, so only pass the non-retina icons\n            'icon_16x16.png',\n            'icon_32x32.png',\n            'icon_128x128.png',\n            'icon_256x256.png',\n            'icon_512x512.png',\n        ]])\n\n\ndef create_minimal_macos_bundle(args: Options, launcher_dir: str, relocate: bool = False) -> None:\n    kapp = os.path.join(launcher_dir, 'kitty.app')\n    if os.path.exists(kapp):\n        shutil.rmtree(kapp)\n    bin_dir = os.path.join(kapp, 'Contents/MacOS')\n    resources_dir = os.path.join(kapp, 'Contents/Resources')\n    os.makedirs(resources_dir)\n    os.makedirs(bin_dir)\n    with open(os.path.join(kapp, 'Contents/Info.plist'), 'wb') as f:\n        f.write(macos_info_plist())\n    if relocate:\n        shutil.copy2(os.path.join(launcher_dir, \"kitty\"), bin_dir)\n        shutil.copy2(os.path.join(launcher_dir, \"kitten\"), bin_dir)\n    else:\n        build_launcher(args, bin_dir)\n        build_static_kittens(args, launcher_dir=bin_dir)\n        kitty_exe = os.path.join(launcher_dir, appname)\n        with suppress(FileNotFoundError):\n            os.remove(kitty_exe)\n        os.symlink(os.path.join(os.path.relpath(bin_dir, launcher_dir), appname), kitty_exe)\n    create_macos_app_icon(resources_dir)\n\n\ndef create_macos_bundle_gunk(dest: str, for_freeze: bool, args: Options) -> str:\n    ddir = Path(dest)\n    os.mkdir(ddir / 'Contents')\n    with open(ddir / 'Contents/Info.plist', 'wb') as fp:\n        fp.write(macos_info_plist())\n    copy_man_pages(str(ddir))\n    copy_html_docs(str(ddir))\n    os.rename(ddir / 'share', ddir / 'Contents/Resources')\n    os.rename(ddir / 'bin', ddir / 'Contents/MacOS')\n    os.rename(ddir / 'lib', ddir / 'Contents/Frameworks')\n    os.rename(ddir / 'Contents/Frameworks/kitty', ddir / 'Contents/Resources/kitty')\n    kitty_exe = ddir / 'Contents/MacOS/kitty'\n    in_src_launcher = ddir / 'Contents/Resources/kitty/kitty/launcher/kitty'\n    if os.path.exists(in_src_launcher):\n        os.remove(in_src_launcher)\n    os.makedirs(os.path.dirname(in_src_launcher), exist_ok=True)\n    os.symlink(os.path.relpath(kitty_exe, os.path.dirname(in_src_launcher)), in_src_launcher)\n    create_macos_app_icon(os.path.join(ddir, 'Contents', 'Resources'))\n    if not for_freeze:\n        kitten_exe = build_static_kittens(args, launcher_dir=os.path.dirname(kitty_exe))\n        if not kitten_exe:\n            raise SystemExit('kitten not built cannot create macOS bundle')\n        os.symlink(os.path.relpath(kitten_exe, os.path.dirname(in_src_launcher)),\n                   os.path.join(os.path.dirname(in_src_launcher), os.path.basename(kitten_exe)))\n    return str(kitty_exe)\n\n\ndef package(args: Options, bundle_type: str, do_build_all: bool = True) -> None:\n    ddir = args.prefix\n    for_freeze = bundle_type.endswith('-freeze')\n    if bundle_type == 'linux-freeze':\n        args.libdir_name = 'lib'\n    libdir = os.path.join(ddir, args.libdir_name.strip('/'), 'kitty')\n    if os.path.exists(libdir):\n        shutil.rmtree(libdir)\n    launcher_dir = os.path.join(ddir, 'bin')\n    safe_makedirs(launcher_dir)\n    if for_freeze:  # freeze launcher is built separately\n        if do_build_all:\n            args.compilation_database.build_all()\n    else:\n        build_launcher(args, launcher_dir, bundle_type)\n    os.makedirs(os.path.join(libdir, 'logo'))\n    build_terminfo = runpy.run_path('build-terminfo', run_name='import_build')\n    for x in (libdir, os.path.join(ddir, 'share')):\n        odir = os.path.join(x, 'terminfo')\n        safe_makedirs(odir)\n        build_terminfo['compile_terminfo'](odir)\n    shutil.copy2('terminfo/kitty.terminfo', os.path.join(libdir, 'terminfo'))\n    shutil.copy2('terminfo/kitty.termcap', os.path.join(libdir, 'terminfo'))\n    shutil.copy2('__main__.py', libdir)\n    shutil.copy2('logo/kitty-128.png', os.path.join(libdir, 'logo'))\n    shutil.copy2('logo/kitty.png', os.path.join(libdir, 'logo'))\n    shutil.copy2('logo/beam-cursor.png', os.path.join(libdir, 'logo'))\n    shutil.copy2('logo/beam-cursor@2x.png', os.path.join(libdir, 'logo'))\n    shutil.copytree('shell-integration', os.path.join(libdir, 'shell-integration'), dirs_exist_ok=True)\n    shutil.copytree('fonts', os.path.join(libdir, 'fonts'), dirs_exist_ok=True)\n    allowed_extensions = frozenset('py glsl so'.split())\n\n    def src_ignore(parent: str, entries: Iterable[str]) -> List[str]:\n        return [\n            x for x in entries\n            if '.' in x and x.rpartition('.')[2] not in\n            allowed_extensions\n        ]\n\n    shutil.copytree('kitty', os.path.join(libdir, 'kitty'), ignore=src_ignore)\n    shutil.copytree('kittens', os.path.join(libdir, 'kittens'), ignore=src_ignore)\n    if for_freeze:\n        shutil.copytree('kitty_tests', os.path.join(libdir, 'kitty_tests'))\n\n    def repl(name: str, raw: str, defval: Union[str, float, FrozenSet[str]], val: Union[str, float, FrozenSet[str]]) -> str:\n        if defval == val:\n            return raw\n        tname = type(defval).__name__\n        if tname == 'frozenset':\n            tname = 'typing.FrozenSet[str]'\n        prefix = f'{name}: {tname} ='\n        nraw = raw.replace(f'{prefix} {defval!r}', f'{prefix} {val!r}', 1)\n        if nraw == raw:\n            raise SystemExit(f'Failed to change the value of {name}')\n        return nraw\n\n    with open(os.path.join(libdir, 'kitty/options/types.py'), 'r+', encoding='utf-8') as f:\n        oraw = raw = f.read()\n        raw = repl('update_check_interval', raw, Options.update_check_interval, args.update_check_interval)\n        raw = repl('shell_integration', raw, frozenset(Options.shell_integration.split()), frozenset(args.shell_integration.split()))\n        if raw != oraw:\n            f.seek(0), f.truncate(), f.write(raw)\n\n    compile_python(libdir)\n\n    def should_be_executable(path: str) -> bool:\n        if path.endswith('.so'):\n            return True\n        q = path.split(os.sep)[-2:]\n        if len(q) == 2 and q[0] == 'ssh' and q[1] in ('kitty', 'kitten'):\n            return True\n        return False\n\n    for root, dirs, files in os.walk(libdir):\n        for f_ in files:\n            path = os.path.join(root, f_)\n            os.chmod(path, 0o755 if should_be_executable(path) else 0o644)\n    if not for_freeze and not bundle_type.startswith('macos-'):\n        build_static_kittens(args, launcher_dir=launcher_dir)\n    if not is_macos:\n        create_linux_bundle_gunk(ddir, args)\n\n    if bundle_type.startswith('macos-'):\n        create_macos_bundle_gunk(ddir, for_freeze, args)\n# }}}\n\n\ndef clean_launcher_dir(launcher_dir: str) -> None:\n    for x in glob.glob(os.path.join(launcher_dir, 'kitt*')):\n        if os.path.isdir(x):\n            shutil.rmtree(x)\n        else:\n            os.remove(x)\n\n\ndef clean(for_cross_compile: bool = False) -> None:\n\n    def safe_remove(*entries: str) -> None:\n        for x in entries:\n            if os.path.exists(x):\n                if os.path.isdir(x):\n                    shutil.rmtree(x)\n                else:\n                    os.unlink(x)\n\n    safe_remove(\n        'build', 'compile_commands.json', 'link_commands.json',\n        'linux-package', 'kitty.app', 'asan-launcher',\n        'kitty-profile')  # no fonts as that is not generated by build\n    if not for_cross_compile:\n        safe_remove('docs/generated')\n    clean_launcher_dir('kitty/launcher')\n\n    def excluded(root: str, d: str) -> bool:\n        q = os.path.relpath(os.path.join(root, d), src_base).replace(os.sep, '/')\n        return q in ('.git', 'bypy/b', 'dependencies')\n\n    def is_generated(f: str) -> bool:\n        e = f.endswith\n        return (\n            e('_generated.h') or e('_generated.go') or e('_generated.bin') or\n            e('_generated.s') or e('_generated_test.s') or e('_generated_test.go')\n        )\n\n    for root, dirs, files in os.walk(src_base, topdown=True):\n        dirs[:] = [d for d in dirs if not excluded(root, d)]\n        remove_dirs = {d for d in dirs if d == '__pycache__' or d.endswith('.dSYM')}\n        for d in remove_dirs:\n            shutil.rmtree(os.path.join(root, d))\n            dirs.remove(d)\n        for f in files:\n            ext = f.rpartition('.')[-1]\n            if ext in ('so', 'dylib', 'pyc', 'pyo') or (not for_cross_compile and is_generated(f)):\n                os.unlink(os.path.join(root, f))\n    for x in glob.glob('glfw/wayland-*-protocol.[ch]'):\n        os.unlink(x)\n    for x in glob.glob('kittens/*'):\n        if os.path.isdir(x) and not os.path.exists(os.path.join(x, '__init__.py')):\n            shutil.rmtree(x)\n    subprocess.check_call(['go', 'clean', '-cache', '-testcache', '-modcache', '-fuzzcache'])\n\n\ndef option_parser() -> argparse.ArgumentParser:  # {{{\n    p = argparse.ArgumentParser()\n    p.add_argument(\n        'action',\n        nargs='?',\n        default=Options.action,\n        choices=('build',\n                 'test',\n                 'develop',\n                 'linux-package',\n                 'kitty.app',\n                 'linux-freeze',\n                 'macos-freeze',\n                 'build-launcher',\n                 'build-frozen-launcher',\n                 'build-frozen-tools',\n                 'clean',\n                 'export-ci-bundles',\n                 'build-dep',\n                 'build-static-binaries',\n                 ),\n        help='Action to perform (default is build)'\n    )\n    p.add_argument(\n        '--debug',\n        default=Options.debug,\n        action='store_true',\n        help='Build extension modules with debugging symbols'\n    )\n    p.add_argument(\n        '-v', '--verbose',\n        default=Options.verbose,\n        action='count',\n        help='Be verbose'\n    )\n    p.add_argument(\n        '--sanitize',\n        default=Options.sanitize,\n        action='store_true',\n        help='Turn on sanitization to detect memory access errors and undefined behavior. This is a big performance hit.'\n    )\n    p.add_argument(\n        '--prefix',\n        default=Options.prefix,\n        help='Where to create the linux package'\n    )\n    p.add_argument(\n        '--dir-for-static-binaries',\n        default=Options.dir_for_static_binaries,\n        help='Where to create the static kitten binary'\n    )\n    p.add_argument(\n        '--skip-code-generation',\n        default=Options.skip_code_generation,\n        action='store_true',\n        help='Do not create the *_generated.* source files. This is useful if they'\n        ' have already been generated by a previous build, for example during a two-stage cross compilation.'\n    )\n    p.add_argument(\n        '--skip-building-kitten',\n        default=Options.skip_building_kitten,\n        action='store_true',\n        help='Do not build the kitten binary. Useful if you want to build it separately.'\n    )\n    p.add_argument(\n        '--clean-for-cross-compile',\n        default=Options.clean_for_cross_compile,\n        action='store_true',\n        help='Do not clean generated Go source files. Useful for cross-compilation.'\n    )\n    p.add_argument(\n        '--python-compiler-flags', default=Options.python_compiler_flags,\n        help='Compiler flags for compiling against Python. Typically include directives. If not set'\n        ' the Python used to run setup.py is queried for these.'\n    )\n    p.add_argument(\n        '--python-linker-flags', default=Options.python_linker_flags,\n        help='Linker flags for linking against Python. Typically dynamic library names and search paths directives. If not set'\n        ' the Python used to run setup.py is queried for these.'\n    )\n    p.add_argument(\n        '--full',\n        dest='incremental',\n        default=Options.incremental,\n        action='store_false',\n        help='Do a full build, even for unchanged files'\n    )\n    p.add_argument(\n        '--profile',\n        default=Options.profile,\n        action='store_true',\n        help='Use the -pg compile flag to add profiling information'\n    )\n    p.add_argument(\n        '--libdir-name',\n        default=Options.libdir_name,\n        help='The name of the directory inside --prefix in which to store compiled files. Defaults to \"lib\"'\n    )\n    p.add_argument(\n        '--vcs-rev', default='',\n        help='The VCS revision to embed in the binary. The default is to read it from the .git directory when present.'\n    )\n    p.add_argument(\n        '--extra-logging',\n        action='append',\n        default=Options.extra_logging,\n        choices=('event-loop',),\n        help='Turn on extra logging for debugging in this build. Can be specified multiple times, to turn'\n        ' on different types of logging.'\n    )\n    p.add_argument(\n        '--extra-include-dirs', '-I',\n        action='append',\n        default=Options.extra_include_dirs,\n        help='Extra include directories to use while compiling'\n    )\n    p.add_argument(\n        '--extra-library-dirs', '-L',\n        action='append',\n        default=Options.extra_library_dirs,\n        help='Extra library directories to use while linking'\n    )\n    p.add_argument(\n        '--update-check-interval',\n        type=float,\n        default=Options.update_check_interval,\n        help='When building a package, the default value for the update_check_interval setting will'\n        ' be set to this number. Use zero to disable update checking.'\n    )\n    p.add_argument(\n        '--shell-integration',\n        type=str,\n        default=Options.shell_integration,\n        help='When building a package, the default value for the shell_integration setting will'\n        ' be set to this. Use \"enabled no-rc\" if you intend to install the shell integration scripts system wide.'\n    )\n    p.add_argument(\n        '--egl-library',\n        type=str,\n        default=Options.egl_library,\n        help='The filename argument passed to dlopen for libEGL.'\n        ' This can be used to change the name of the loaded library or specify an absolute path.'\n    )\n    p.add_argument(\n        '--startup-notification-library',\n        type=str,\n        default=Options.startup_notification_library,\n        help='The filename argument passed to dlopen for libstartup-notification-1.'\n        ' This can be used to change the name of the loaded library or specify an absolute path.'\n    )\n    p.add_argument(\n        '--canberra-library',\n        type=str,\n        default=Options.canberra_library,\n        help='The filename argument passed to dlopen for libcanberra.'\n        ' This can be used to change the name of the loaded library or specify an absolute path.'\n    )\n    p.add_argument(\n        '--systemd-library',\n        type=str,\n        default=Options.systemd_library,\n        help='The filename argument passed to dlopen for libsystemd.'\n        ' This can be used to change the name of the loaded library or specify an absolute path.'\n    )\n    p.add_argument(\n        '--fontconfig-library',\n        type=str,\n        default=Options.fontconfig_library,\n        help='The filename argument passed to dlopen for libfontconfig.'\n        ' This can be used to change the name of the loaded library or specify an absolute path.'\n    )\n    p.add_argument(\n        '--disable-link-time-optimization',\n        dest='link_time_optimization',\n        default=Options.link_time_optimization,\n        action='store_false',\n        help='Turn off Link Time Optimization (LTO).'\n    )\n    p.add_argument(\n        '--ignore-compiler-warnings',\n        default=Options.ignore_compiler_warnings, action='store_true',\n        help='Ignore any warnings from the compiler while building'\n    )\n    p.add_argument(\n        '--build-dSYM', dest='build_dsym',\n        default=Options.build_dsym, action='store_true',\n        help='Build the dSYM bundle on macOS, ignored on other platforms'\n    )\n    return p\n# }}}\n\n\ndef build_dep() -> None:\n    class Options:\n        platform: str = 'all'\n        deps: List[str] = []\n\n    p = argparse.ArgumentParser(prog=f'{sys.argv[0]} build-dep', description='Build dependencies for the kitty binary packages')\n    p.add_argument(\n        '--platform',\n        default=Options.platform,\n        choices='all macos linux linux-arm64 linux-64'.split(),\n        help='Platforms to build the dep for'\n    )\n    p.add_argument(\n        'deps',\n        nargs='*',\n        default=Options.deps,\n        help='Names of the dependencies, if none provided, build all'\n    )\n    args = p.parse_args(sys.argv[2:], namespace=Options())\n    linux_platforms = [\n        ['linux', '--arch=64'],\n        ['linux', '--arch=arm64'],\n    ]\n    if args.platform == 'all':\n        platforms = linux_platforms + [['macos']]\n    elif args.platform == 'linux':\n        platforms = linux_platforms\n    elif args.platform == 'macos':\n        platforms = [['macos']]\n    elif '-' in args.platform:\n        parts = args.platform.split('-')\n        platforms = [[parts[0], f'--arch={parts[1]}']]\n    else:\n        raise SystemExit(f'Unknown platform: {args.platform}')\n    base = [sys.executable, '../bypy']\n    for pf in platforms:\n        cmd = base + pf + ['dependencies'] + args.deps\n        run_tool(cmd)\n\n\ndef lipo(target_map: Dict[str, List[str]]) -> None:\n    print(f'Using lipo to generate {len(target_map)} universal binaries...')\n    for dest, inputs in target_map.items():\n        cmd = ['lipo', '-create', '-output', dest] + inputs\n        subprocess.check_call(cmd)\n        for x in inputs:\n            os.remove(x)\n\n\ndef macos_freeze(args: Options, launcher_dir: str, only_frozen_launcher: bool = False) -> None:\n    global build_dir\n    # Need to build a universal binary in two stages\n    orig_build_dir = build_dir\n    link_target_map: Dict[str, List[str]] = {}\n    bundle_type = 'macos-freeze'\n    for arch in macos_universal_arches:\n        args.building_arch = arch\n        build_dir = os.path.join(orig_build_dir, arch)\n        os.makedirs(build_dir, exist_ok=True)\n        print('Building for arch:', arch, 'in', build_dir)\n        if arch is not macos_universal_arches[0]:\n            args.skip_code_generation = True  # cant run kitty as its not a native arch\n        link_targets.clear()\n        with CompilationDatabase() as cdb:\n            args.compilation_database = cdb\n            init_env_from_args(args, native_optimizations=False)\n            if only_frozen_launcher:\n                build_launcher(args, launcher_dir=launcher_dir, bundle_type=bundle_type)\n            else:\n                build_launcher(args, launcher_dir=launcher_dir)\n                build(args, native_optimizations=False, call_init=False)\n            cdb.build_all()\n        for x in link_targets:\n            arch_specific = x + '-' + arch\n            link_target_map.setdefault(x, []).append(arch_specific)\n            os.rename(x, arch_specific)\n    build_dir = orig_build_dir\n    lipo(link_target_map)\n    if not only_frozen_launcher:\n        package(args, bundle_type=bundle_type, do_build_all=False)\n\n\ndef do_build(args: Options) -> None:\n    launcher_dir = 'kitty/launcher'\n\n    if args.action == 'test':\n        texe = os.path.abspath(os.path.join(launcher_dir, 'kitty'))\n        os.execl(texe, texe, '+launch', 'test.py')\n    if args.action == 'clean':\n        clean(for_cross_compile=args.clean_for_cross_compile)\n        return\n    if args.action == 'macos-freeze':\n        return macos_freeze(args, launcher_dir)\n    if args.action == 'build-frozen-launcher' and is_macos:\n        launcher_dir=os.path.join(args.prefix, 'bin')\n        return macos_freeze(args, launcher_dir, only_frozen_launcher=True)\n\n    with CompilationDatabase(args.incremental) as cdb:\n        args.compilation_database = cdb\n        if args.action == 'build':\n            build(args)\n            if is_macos:\n                create_minimal_macos_bundle(args, launcher_dir)\n            else:\n                build_launcher(args, launcher_dir=launcher_dir)\n                build_static_kittens(args, launcher_dir=launcher_dir)\n        elif args.action == 'develop':\n            build(args)\n            build_launcher(args, launcher_dir=launcher_dir, bundle_type='develop')\n            build_static_kittens(args, launcher_dir=launcher_dir)\n            if is_macos:\n                create_minimal_macos_bundle(args, launcher_dir, relocate=True)\n        elif args.action == 'build-launcher':\n            init_env_from_args(args, False)\n            build_launcher(args, launcher_dir=launcher_dir)\n            build_static_kittens(args, launcher_dir=launcher_dir)\n        elif args.action == 'build-frozen-launcher':\n            init_env_from_args(args, False)\n            bundle_type = ('macos' if is_macos else 'linux') + '-freeze'\n            build_launcher(args, launcher_dir=os.path.join(args.prefix, 'bin'), bundle_type=bundle_type)\n        elif args.action == 'build-frozen-tools':\n            build_static_kittens(args, launcher_dir=args.prefix, for_freeze=True)\n        elif args.action == 'linux-package':\n            build(args, native_optimizations=False)\n            package(args, bundle_type='linux-package')\n        elif args.action == 'linux-freeze':\n            build(args, native_optimizations=False)\n            package(args, bundle_type='linux-freeze')\n        elif args.action == 'kitty.app':\n            args.prefix = 'kitty.app'\n            if os.path.exists(args.prefix):\n                shutil.rmtree(args.prefix)\n            build(args)\n            package(args, bundle_type='macos-package')\n            print('kitty.app successfully built!')\n        elif args.action == 'export-ci-bundles':\n            cmd = [sys.executable, '../bypy', 'export', 'download.calibre-ebook.com:/srv/download/ci/kitty']\n            subprocess.check_call(cmd + ['linux'])\n            subprocess.check_call(cmd + ['macos'])\n        elif args.action == 'build-static-binaries':\n            build_static_binaries(args, launcher_dir)\n\n\ndef main() -> None:\n    global verbose, build_dir\n    if len(sys.argv) > 1 and sys.argv[1] == 'build-dep':\n        return build_dep()\n    args = option_parser().parse_args(namespace=Options())\n    verbose = args.verbose > 0\n    args.prefix = os.path.abspath(args.prefix)\n    os.chdir(src_base)\n    os.makedirs(build_dir, exist_ok=True)\n    do_build(args)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "shell-integration",
          "type": "tree",
          "content": null
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 2.21,
          "content": "{pkgs ? import <nixpkgs> {}}:\nwith pkgs; let\n  inherit (lib) optional optionals;\n  inherit (xorg) libX11 libXrandr libXinerama libXcursor libXi libXext;\n  inherit (darwin.apple_sdk.frameworks) Cocoa CoreGraphics Foundation IOKit Kernel OpenGL UniformTypeIdentifiers;\n  harfbuzzWithCoreText = harfbuzz.override {withCoreText = stdenv.isDarwin;};\nin\n  with python3Packages;\n    mkShell rec {\n      buildInputs =\n        [\n          harfbuzzWithCoreText\n          ncurses\n          lcms2\n          xxHash\n          simde\n          go_1_23\n        ]\n        ++ optionals stdenv.isDarwin [\n          Cocoa\n          CoreGraphics\n          Foundation\n          IOKit\n          Kernel\n          OpenGL\n          UniformTypeIdentifiers\n          libpng\n          python3\n          zlib\n        ]\n        ++ lib.optionals (stdenv.isDarwin && (builtins.hasAttr \"UserNotifications\" darwin.apple_sdk.frameworks)) [\n          darwin.apple_sdk.frameworks.UserNotifications\n        ]\n        ++ optionals stdenv.isLinux [\n          fontconfig\n          libunistring\n          libcanberra\n          libX11\n          libXrandr\n          libXinerama\n          libXcursor\n          libxkbcommon\n          libXi\n          libXext\n          wayland-protocols\n          wayland\n          openssl\n          dbus\n        ]\n        ++ checkInputs;\n\n      nativeBuildInputs =\n        [\n          ncurses\n          pkg-config\n          sphinx\n          furo\n          sphinx-copybutton\n          sphinxext-opengraph\n          sphinx-inline-tabs\n        ]\n        ++ optionals stdenv.isDarwin [\n          imagemagick\n          libicns # For the png2icns tool.\n        ];\n\n      propagatedBuildInputs = optional stdenv.isLinux libGL;\n\n      checkInputs = [\n        pillow\n      ];\n\n      # Causes build failure due to warning when using Clang\n      hardeningDisable = [\"strictoverflow\"];\n\n      shellHook =\n        if stdenv.isDarwin\n        then ''\n          export KITTY_NO_LTO=\n        ''\n        else ''\n          export KITTY_EGL_LIBRARY='${lib.getLib libGL}/lib/libEGL.so.1'\n          export KITTY_STARTUP_NOTIFICATION_LIBRARY='${libstartup_notification}/lib/libstartup-notification-1.so'\n          export KITTY_CANBERRA_LIBRARY='${libcanberra}/lib/libcanberra.so'\n        '';\n    }\n"
        },
        {
          "name": "staticcheck.conf",
          "type": "blob",
          "size": 0.04,
          "content": "checks = [\"all\", \"-ST10006\", \"-ST1012\"]\n"
        },
        {
          "name": "terminfo",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.py",
          "type": "blob",
          "size": 0.26,
          "content": "#!./kitty/launcher/kitty +launch\n# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>\n\nimport importlib\n\n\ndef main() -> None:\n    m = importlib.import_module('kitty_tests.main')\n    getattr(m, 'main')()\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "update-on-ox",
          "type": "blob",
          "size": 1.78,
          "content": "#!/usr/bin/env python\n# vim:fileencoding=utf-8\n# License: GPL v3 Copyright: 2017, Kovid Goyal <kovid at kovidgoyal.net>\n\nimport atexit\nimport glob\nimport os\nimport shlex\nimport shutil\nimport subprocess\nimport sys\nimport tempfile\n\nif False:\n    dmg = sys.argv[-1]\n    mp = tempfile.mkdtemp()\n    atexit.register(os.rmdir, mp)\n    subprocess.check_call(f'hdiutil attach {dmg} -mountpoint {mp}'.split())\n    try:\n        os.chdir(mp)\n        for app in glob.glob('*.app'):\n            d = os.path.join('/Applications', app)\n            if os.path.exists(d):\n                shutil.rmtree(d)\n            subprocess.check_call(f'ditto -v {app} {d}'.split())\n    finally:\n        os.chdir('/')\n        subprocess.check_call(f'hdiutil detach {mp}'.split())\n\n# EOF_REMOTE\n\nHOST = 'ox'\n\nbase = os.path.dirname(os.path.abspath(__file__))\nif True:\n    sys.path.insert(0, base)\n    from kitty.constants import str_version\n\ndmg = f'kitty-{str_version}.dmg'\n\n\ndef run(what):\n    ret = subprocess.run(shlex.split(what))\n    if ret.returncode != 0:\n        raise SystemExit(ret.returncode)\n\n\nwith open(__file__, 'rb') as f:\n    script = f.read().decode('utf-8')\nscript = script[:script.find('# EOF_REMOTE')].replace('if False:', 'if True:', 1)\nwith tempfile.NamedTemporaryFile(prefix='install-dmg-', suffix='.py') as f:\n    cmd = 'python ../bypy macos program'\n    if 'dont_sign' not in sys.argv:\n        cmd += ' --sign-installers'\n    if 'strip' not in sys.argv:\n        cmd += ' --dont-strip'\n    if 'tests' not in sys.argv:\n        cmd += ' --skip-tests'\n    if 'notarize' in sys.argv:\n        cmd += ' --sign-installers --notarize'\n    run(cmd)\n    f.write(script.encode('utf-8'))\n    f.flush()\n    run(f'scp bypy/b/macos/dist/{dmg} {f.name} {HOST}:/tmp')\n    run(f'ssh {HOST} python3 /tmp/{os.path.basename(f.name)} /tmp/{dmg}')\n"
        }
      ]
    }
  ]
}