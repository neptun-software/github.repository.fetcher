{
  "metadata": {
    "timestamp": 1736561430155,
    "page": 75,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "myshell-ai/OpenVoice",
      "stars": 30415,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.130859375,
          "content": "__pycache__/\n.ipynb_checkpoints/\nprocessed\noutputs\noutputs_v2\ncheckpoints\ncheckpoints_v2\ntrash\nexamples*\n.env\nbuild\n*.egg-info/\n*.zip\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0322265625,
          "content": "Copyright 2024 MyShell.ai\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.046875,
          "content": "<div align=\"center\">\n  <div>&nbsp;</div>\n  <img src=\"resources/openvoicelogo.jpg\" width=\"400\"/> \n\n[Paper](https://arxiv.org/abs/2312.01479) |\n[Website](https://research.myshell.ai/open-voice) <br> <br>\n<a href=\"https://trendshift.io/repositories/6161\" target=\"_blank\"><img src=\"https://trendshift.io/api/badge/repositories/6161\" alt=\"myshell-ai%2FOpenVoice | Trendshift\" style=\"width: 250px; height: 55px;\" width=\"250\" height=\"55\"/></a>\n</div>\n\n## Introduction\n\n### OpenVoice V1\n\nAs we detailed in our [paper](https://arxiv.org/abs/2312.01479) and [website](https://research.myshell.ai/open-voice), the advantages of OpenVoice are three-fold:\n\n**1. Accurate Tone Color Cloning.**\nOpenVoice can accurately clone the reference tone color and generate speech in multiple languages and accents.\n\n**2. Flexible Voice Style Control.**\nOpenVoice enables granular control over voice styles, such as emotion and accent, as well as other style parameters including rhythm, pauses, and intonation. \n\n**3. Zero-shot Cross-lingual Voice Cloning.**\nNeither of the language of the generated speech nor the language of the reference speech needs to be presented in the massive-speaker multi-lingual training dataset.\n\n### OpenVoice V2\n\nIn April 2024, we released OpenVoice V2, which includes all features in V1 and has:\n\n**1. Better Audio Quality.**\nOpenVoice V2 adopts a different training strategy that delivers better audio quality.\n\n**2. Native Multi-lingual Support.**\nEnglish, Spanish, French, Chinese, Japanese and Korean are natively supported in OpenVoice V2.\n\n**3. Free Commercial Use.**\nStarting from April 2024, both V2 and V1 are released under MIT License. Free for commercial use.\n\n[Video](https://github.com/myshell-ai/OpenVoice/assets/40556743/3cba936f-82bf-476c-9e52-09f0f417bb2f)\n\nOpenVoice has been powering the instant voice cloning capability of [myshell.ai](https://app.myshell.ai/explore) since May 2023. Until Nov 2023, the voice cloning model has been used tens of millions of times by users worldwide, and witnessed the explosive user growth on the platform.\n\n## Main Contributors\n\n- [Zengyi Qin](https://www.qinzy.tech) at MIT\n- [Wenliang Zhao](https://wl-zhao.github.io) at Tsinghua University\n- [Xumin Yu](https://yuxumin.github.io) at Tsinghua University\n- [Ethan Sun](https://twitter.com/ethan_myshell) at MyShell\n\n## How to Use\nPlease see [usage](docs/USAGE.md) for detailed instructions.\n\n## Common Issues\n\nPlease see [QA](docs/QA.md) for common questions and answers. We will regularly update the question and answer list.\n\n## Citation\n```\n@article{qin2023openvoice,\n  title={OpenVoice: Versatile Instant Voice Cloning},\n  author={Qin, Zengyi and Zhao, Wenliang and Yu, Xumin and Sun, Xin},\n  journal={arXiv preprint arXiv:2312.01479},\n  year={2023}\n}\n```\n\n## License\nOpenVoice V1 and V2 are MIT Licensed. Free for both commercial and research use.\n\n## Acknowledgements\nThis implementation is based on several excellent projects, [TTS](https://github.com/coqui-ai/TTS), [VITS](https://github.com/jaywalnut310/vits), and [VITS2](https://github.com/daniilrobnikov/vits2). Thanks for their awesome work!\n"
        },
        {
          "name": "demo_part1.ipynb",
          "type": "blob",
          "size": 7.1923828125,
          "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"b6ee1ede\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Voice Style Control Demo\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"b7f043ee\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import os\\n\",\n    \"import torch\\n\",\n    \"from openvoice import se_extractor\\n\",\n    \"from openvoice.api import BaseSpeakerTTS, ToneColorConverter\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"15116b59\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Initialization\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"aacad912\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"ckpt_base = 'checkpoints/base_speakers/EN'\\n\",\n    \"ckpt_converter = 'checkpoints/converter'\\n\",\n    \"device=\\\"cuda:0\\\" if torch.cuda.is_available() else \\\"cpu\\\"\\n\",\n    \"output_dir = 'outputs'\\n\",\n    \"\\n\",\n    \"base_speaker_tts = BaseSpeakerTTS(f'{ckpt_base}/config.json', device=device)\\n\",\n    \"base_speaker_tts.load_ckpt(f'{ckpt_base}/checkpoint.pth')\\n\",\n    \"\\n\",\n    \"tone_color_converter = ToneColorConverter(f'{ckpt_converter}/config.json', device=device)\\n\",\n    \"tone_color_converter.load_ckpt(f'{ckpt_converter}/checkpoint.pth')\\n\",\n    \"\\n\",\n    \"os.makedirs(output_dir, exist_ok=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"7f67740c\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Obtain Tone Color Embedding\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"f8add279\",\n   \"metadata\": {},\n   \"source\": [\n    \"The `source_se` is the tone color embedding of the base speaker. \\n\",\n    \"It is an average of multiple sentences generated by the base speaker. We directly provide the result here but\\n\",\n    \"the readers feel free to extract `source_se` by themselves.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"63ff6273\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"source_se = torch.load(f'{ckpt_base}/en_default_se.pth').to(device)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"4f71fcc3\",\n   \"metadata\": {},\n   \"source\": [\n    \"The `reference_speaker.mp3` below points to the short audio clip of the reference whose voice we want to clone. We provide an example here. If you use your own reference speakers, please **make sure each speaker has a unique filename.** The `se_extractor` will save the `targeted_se` using the filename of the audio and **will not automatically overwrite.**\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"55105eae\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"reference_speaker = 'resources/example_reference.mp3' # This is the voice you want to clone\\n\",\n    \"target_se, audio_name = se_extractor.get_se(reference_speaker, tone_color_converter, target_dir='processed', vad=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"a40284aa\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Inference\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"73dc1259\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"save_path = f'{output_dir}/output_en_default.wav'\\n\",\n    \"\\n\",\n    \"# Run the base speaker tts\\n\",\n    \"text = \\\"This audio is generated by OpenVoice.\\\"\\n\",\n    \"src_path = f'{output_dir}/tmp.wav'\\n\",\n    \"base_speaker_tts.tts(text, src_path, speaker='default', language='English', speed=1.0)\\n\",\n    \"\\n\",\n    \"# Run the tone color converter\\n\",\n    \"encode_message = \\\"@MyShell\\\"\\n\",\n    \"tone_color_converter.convert(\\n\",\n    \"    audio_src_path=src_path, \\n\",\n    \"    src_se=source_se, \\n\",\n    \"    tgt_se=target_se, \\n\",\n    \"    output_path=save_path,\\n\",\n    \"    message=encode_message)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"6e3ea28a\",\n   \"metadata\": {},\n   \"source\": [\n    \"**Try with different styles and speed.** The style can be controlled by the `speaker` parameter in the `base_speaker_tts.tts` method. Available choices: friendly, cheerful, excited, sad, angry, terrified, shouting, whispering. Note that the tone color embedding need to be updated. The speed can be controlled by the `speed` parameter. Let's try whispering with speed 0.9.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"fd022d38\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"source_se = torch.load(f'{ckpt_base}/en_style_se.pth').to(device)\\n\",\n    \"save_path = f'{output_dir}/output_whispering.wav'\\n\",\n    \"\\n\",\n    \"# Run the base speaker tts\\n\",\n    \"text = \\\"This audio is generated by OpenVoice.\\\"\\n\",\n    \"src_path = f'{output_dir}/tmp.wav'\\n\",\n    \"base_speaker_tts.tts(text, src_path, speaker='whispering', language='English', speed=0.9)\\n\",\n    \"\\n\",\n    \"# Run the tone color converter\\n\",\n    \"encode_message = \\\"@MyShell\\\"\\n\",\n    \"tone_color_converter.convert(\\n\",\n    \"    audio_src_path=src_path, \\n\",\n    \"    src_se=source_se, \\n\",\n    \"    tgt_se=target_se, \\n\",\n    \"    output_path=save_path,\\n\",\n    \"    message=encode_message)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"5fcfc70b\",\n   \"metadata\": {},\n   \"source\": [\n    \"**Try with different languages.** OpenVoice can achieve multi-lingual voice cloning by simply replace the base speaker. We provide an example with a Chinese base speaker here and we encourage the readers to try `demo_part2.ipynb` for a detailed demo.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"a71d1387\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"\\n\",\n    \"ckpt_base = 'checkpoints/base_speakers/ZH'\\n\",\n    \"base_speaker_tts = BaseSpeakerTTS(f'{ckpt_base}/config.json', device=device)\\n\",\n    \"base_speaker_tts.load_ckpt(f'{ckpt_base}/checkpoint.pth')\\n\",\n    \"\\n\",\n    \"source_se = torch.load(f'{ckpt_base}/zh_default_se.pth').to(device)\\n\",\n    \"save_path = f'{output_dir}/output_chinese.wav'\\n\",\n    \"\\n\",\n    \"# Run the base speaker tts\\n\",\n    \"text = \\\"今天天气真好，我们一起出去吃饭吧。\\\"\\n\",\n    \"src_path = f'{output_dir}/tmp.wav'\\n\",\n    \"base_speaker_tts.tts(text, src_path, speaker='default', language='Chinese', speed=1.0)\\n\",\n    \"\\n\",\n    \"# Run the tone color converter\\n\",\n    \"encode_message = \\\"@MyShell\\\"\\n\",\n    \"tone_color_converter.convert(\\n\",\n    \"    audio_src_path=src_path, \\n\",\n    \"    src_se=source_se, \\n\",\n    \"    tgt_se=target_se, \\n\",\n    \"    output_path=save_path,\\n\",\n    \"    message=encode_message)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"8e513094\",\n   \"metadata\": {},\n   \"source\": [\n    \"**Tech for good.** For people who will deploy OpenVoice for public usage: We offer you the option to add watermark to avoid potential misuse. Please see the ToneColorConverter class. **MyShell reserves the ability to detect whether an audio is generated by OpenVoice**, no matter whether the watermark is added or not.\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"interpreter\": {\n   \"hash\": \"9d70c38e1c0b038dbdffdaa4f8bfa1f6767c43760905c87a9fbe7800d18c6c35\"\n  },\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.9.18\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n"
        },
        {
          "name": "demo_part2.ipynb",
          "type": "blob",
          "size": 6.6748046875,
          "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"b6ee1ede\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Cross-Lingual Voice Clone Demo\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"b7f043ee\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import os\\n\",\n    \"import torch\\n\",\n    \"from openvoice import se_extractor\\n\",\n    \"from openvoice.api import ToneColorConverter\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"15116b59\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Initialization\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"aacad912\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"ckpt_converter = 'checkpoints/converter'\\n\",\n    \"device=\\\"cuda:0\\\" if torch.cuda.is_available() else \\\"cpu\\\"\\n\",\n    \"output_dir = 'outputs'\\n\",\n    \"\\n\",\n    \"tone_color_converter = ToneColorConverter(f'{ckpt_converter}/config.json', device=device)\\n\",\n    \"tone_color_converter.load_ckpt(f'{ckpt_converter}/checkpoint.pth')\\n\",\n    \"\\n\",\n    \"os.makedirs(output_dir, exist_ok=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"3db80fcf\",\n   \"metadata\": {},\n   \"source\": [\n    \"In this demo, we will use OpenAI TTS as the base speaker to produce multi-lingual speech audio. The users can flexibly change the base speaker according to their own needs. Please create a file named `.env` and place OpenAI key as `OPENAI_API_KEY=xxx`. We have also provided a Chinese base speaker model (see `demo_part1.ipynb`).\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"3b245ca3\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from openai import OpenAI\\n\",\n    \"from dotenv import load_dotenv\\n\",\n    \"\\n\",\n    \"# Please create a file named .env and place your\\n\",\n    \"# OpenAI key as OPENAI_API_KEY=xxx\\n\",\n    \"load_dotenv() \\n\",\n    \"\\n\",\n    \"client = OpenAI(api_key=os.environ.get(\\\"OPENAI_API_KEY\\\"))\\n\",\n    \"\\n\",\n    \"response = client.audio.speech.create(\\n\",\n    \"    model=\\\"tts-1\\\",\\n\",\n    \"    voice=\\\"nova\\\",\\n\",\n    \"    input=\\\"This audio will be used to extract the base speaker tone color embedding. \\\" + \\\\\\n\",\n    \"        \\\"Typically a very short audio should be sufficient, but increasing the audio \\\" + \\\\\\n\",\n    \"        \\\"length will also improve the output audio quality.\\\"\\n\",\n    \")\\n\",\n    \"\\n\",\n    \"response.stream_to_file(f\\\"{output_dir}/openai_source_output.mp3\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"7f67740c\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Obtain Tone Color Embedding\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"f8add279\",\n   \"metadata\": {},\n   \"source\": [\n    \"The `source_se` is the tone color embedding of the base speaker. \\n\",\n    \"It is an average for multiple sentences with multiple emotions\\n\",\n    \"of the base speaker. We directly provide the result here but\\n\",\n    \"the readers feel free to extract `source_se` by themselves.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"63ff6273\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"base_speaker = f\\\"{output_dir}/openai_source_output.mp3\\\"\\n\",\n    \"source_se, audio_name = se_extractor.get_se(base_speaker, tone_color_converter, vad=True)\\n\",\n    \"\\n\",\n    \"reference_speaker = 'resources/example_reference.mp3' # This is the voice you want to clone\\n\",\n    \"target_se, audio_name = se_extractor.get_se(reference_speaker, tone_color_converter, vad=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"a40284aa\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Inference\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"73dc1259\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Run the base speaker tts\\n\",\n    \"text = [\\n\",\n    \"    \\\"MyShell is a decentralized and comprehensive platform for discovering, creating, and staking AI-native apps.\\\",\\n\",\n    \"    \\\"MyShell es una plataforma descentralizada y completa para descubrir, crear y apostar por aplicaciones nativas de IA.\\\",\\n\",\n    \"    \\\"MyShell est une plateforme décentralisée et complète pour découvrir, créer et miser sur des applications natives d'IA.\\\",\\n\",\n    \"    \\\"MyShell ist eine dezentralisierte und umfassende Plattform zum Entdecken, Erstellen und Staken von KI-nativen Apps.\\\",\\n\",\n    \"    \\\"MyShell è una piattaforma decentralizzata e completa per scoprire, creare e scommettere su app native di intelligenza artificiale.\\\",\\n\",\n    \"    \\\"MyShellは、AIネイティブアプリの発見、作成、およびステーキングのための分散型かつ包括的なプラットフォームです。\\\",\\n\",\n    \"    \\\"MyShell — это децентрализованная и всеобъемлющая платформа для обнаружения, создания и стейкинга AI-ориентированных приложений.\\\",\\n\",\n    \"    \\\"MyShell هي منصة لامركزية وشاملة لاكتشاف وإنشاء ورهان تطبيقات الذكاء الاصطناعي الأصلية.\\\",\\n\",\n    \"    \\\"MyShell是一个去中心化且全面的平台，用于发现、创建和投资AI原生应用程序。\\\",\\n\",\n    \"    \\\"MyShell एक विकेंद्रीकृत और व्यापक मंच है, जो AI-मूल ऐप्स की खोज, सृजन और स्टेकिंग के लिए है।\\\",\\n\",\n    \"    \\\"MyShell é uma plataforma descentralizada e abrangente para descobrir, criar e apostar em aplicativos nativos de IA.\\\"\\n\",\n    \"]\\n\",\n    \"src_path = f'{output_dir}/tmp.wav'\\n\",\n    \"\\n\",\n    \"for i, t in enumerate(text):\\n\",\n    \"\\n\",\n    \"    response = client.audio.speech.create(\\n\",\n    \"        model=\\\"tts-1\\\",\\n\",\n    \"        voice=\\\"nova\\\",\\n\",\n    \"        input=t,\\n\",\n    \"    )\\n\",\n    \"\\n\",\n    \"    response.stream_to_file(src_path)\\n\",\n    \"\\n\",\n    \"    save_path = f'{output_dir}/output_crosslingual_{i}.wav'\\n\",\n    \"\\n\",\n    \"    # Run the tone color converter\\n\",\n    \"    encode_message = \\\"@MyShell\\\"\\n\",\n    \"    tone_color_converter.convert(\\n\",\n    \"        audio_src_path=src_path, \\n\",\n    \"        src_se=source_se, \\n\",\n    \"        tgt_se=target_se, \\n\",\n    \"        output_path=save_path,\\n\",\n    \"        message=encode_message)\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"interpreter\": {\n   \"hash\": \"9d70c38e1c0b038dbdffdaa4f8bfa1f6767c43760905c87a9fbe7800d18c6c35\"\n  },\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.9.18\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}\n"
        },
        {
          "name": "demo_part3.ipynb",
          "type": "blob",
          "size": 4.6142578125,
          "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Multi-Accent and Multi-Lingual Voice Clone Demo with MeloTTS\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import os\\n\",\n    \"import torch\\n\",\n    \"from openvoice import se_extractor\\n\",\n    \"from openvoice.api import ToneColorConverter\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Initialization\\n\",\n    \"\\n\",\n    \"In this example, we will use the checkpoints from OpenVoiceV2. OpenVoiceV2 is trained with more aggressive augmentations and thus demonstrate better robustness in some cases.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"ckpt_converter = 'checkpoints_v2/converter'\\n\",\n    \"device = \\\"cuda:0\\\" if torch.cuda.is_available() else \\\"cpu\\\"\\n\",\n    \"output_dir = 'outputs_v2'\\n\",\n    \"\\n\",\n    \"tone_color_converter = ToneColorConverter(f'{ckpt_converter}/config.json', device=device)\\n\",\n    \"tone_color_converter.load_ckpt(f'{ckpt_converter}/checkpoint.pth')\\n\",\n    \"\\n\",\n    \"os.makedirs(output_dir, exist_ok=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"### Obtain Tone Color Embedding\\n\",\n    \"We only extract the tone color embedding for the target speaker. The source tone color embeddings can be directly loaded from `checkpoints_v2/ses` folder.\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"\\n\",\n    \"reference_speaker = 'resources/example_reference.mp3' # This is the voice you want to clone\\n\",\n    \"target_se, audio_name = se_extractor.get_se(reference_speaker, tone_color_converter, vad=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"#### Use MeloTTS as Base Speakers\\n\",\n    \"\\n\",\n    \"MeloTTS is a high-quality multi-lingual text-to-speech library by @MyShell.ai, supporting languages including English (American, British, Indian, Australian, Default), Spanish, French, Chinese, Japanese, Korean. In the following example, we will use the models in MeloTTS as the base speakers. \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from melo.api import TTS\\n\",\n    \"\\n\",\n    \"texts = {\\n\",\n    \"    'EN_NEWEST': \\\"Did you ever hear a folk tale about a giant turtle?\\\",  # The newest English base speaker model\\n\",\n    \"    'EN': \\\"Did you ever hear a folk tale about a giant turtle?\\\",\\n\",\n    \"    'ES': \\\"El resplandor del sol acaricia las olas, pintando el cielo con una paleta deslumbrante.\\\",\\n\",\n    \"    'FR': \\\"La lueur dorée du soleil caresse les vagues, peignant le ciel d'une palette éblouissante.\\\",\\n\",\n    \"    'ZH': \\\"在这次vacation中，我们计划去Paris欣赏埃菲尔铁塔和卢浮宫的美景。\\\",\\n\",\n    \"    'JP': \\\"彼は毎朝ジョギングをして体を健康に保っています。\\\",\\n\",\n    \"    'KR': \\\"안녕하세요! 오늘은 날씨가 정말 좋네요.\\\",\\n\",\n    \"}\\n\",\n    \"\\n\",\n    \"\\n\",\n    \"src_path = f'{output_dir}/tmp.wav'\\n\",\n    \"\\n\",\n    \"# Speed is adjustable\\n\",\n    \"speed = 1.0\\n\",\n    \"\\n\",\n    \"for language, text in texts.items():\\n\",\n    \"    model = TTS(language=language, device=device)\\n\",\n    \"    speaker_ids = model.hps.data.spk2id\\n\",\n    \"    \\n\",\n    \"    for speaker_key in speaker_ids.keys():\\n\",\n    \"        speaker_id = speaker_ids[speaker_key]\\n\",\n    \"        speaker_key = speaker_key.lower().replace('_', '-')\\n\",\n    \"        \\n\",\n    \"        source_se = torch.load(f'checkpoints_v2/base_speakers/ses/{speaker_key}.pth', map_location=device)\\n\",\n    \"        model.tts_to_file(text, speaker_id, src_path, speed=speed)\\n\",\n    \"        save_path = f'{output_dir}/output_v2_{speaker_key}.wav'\\n\",\n    \"\\n\",\n    \"        # Run the tone color converter\\n\",\n    \"        encode_message = \\\"@MyShell\\\"\\n\",\n    \"        tone_color_converter.convert(\\n\",\n    \"            audio_src_path=src_path, \\n\",\n    \"            src_se=source_se, \\n\",\n    \"            tgt_se=target_se, \\n\",\n    \"            output_path=save_path,\\n\",\n    \"            message=encode_message)\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"melo\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.9.18\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "openvoice",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.2470703125,
          "content": "librosa==0.9.1\nfaster-whisper==0.9.0\npydub==0.25.1\nwavmark==0.0.3\nnumpy==1.22.0\neng_to_ipa==0.0.2\ninflect==7.0.0\nunidecode==1.3.7\nwhisper-timestamped==1.14.2\nopenai\npython-dotenv\npypinyin==0.50.0\ncn2an==0.5.22\njieba==0.42.1\ngradio==3.48.0\nlangid==1.1.6\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.4462890625,
          "content": "from setuptools import setup, find_packages\r\n\r\n\r\nsetup(name='MyShell-OpenVoice',\r\n      version='0.0.0',\r\n      description='Instant voice cloning by MyShell.',\r\n      long_description=open('README.md').read().strip(),\r\n      long_description_content_type='text/markdown',\r\n      keywords=[\r\n            'text-to-speech',\r\n            'tts',\r\n            'voice-clone',\r\n            'zero-shot-tts'\r\n      ],\r\n      url='https://github.com/myshell-ai/OpenVoice',\r\n      project_urls={\r\n        'Documentation': 'https://github.com/myshell-ai/OpenVoice/blob/main/docs/USAGE.md',\r\n        'Changes': 'https://github.com/myshell-ai/OpenVoice/releases',\r\n        'Code': 'https://github.com/myshell-ai/OpenVoice',\r\n        'Issue tracker': 'https://github.com/myshell-ai/OpenVoice/issues',\r\n      },\r\n      author='MyShell',\r\n      author_email='ethan@myshell.ai',\r\n      license='MIT License',\r\n      packages=find_packages(),\r\n\r\n      python_requires='>=3.9',\r\n      install_requires=[\r\n            'librosa==0.9.1',\r\n            'faster-whisper==0.9.0',\r\n            'pydub==0.25.1',\r\n            'wavmark==0.0.3',\r\n            'numpy==1.22.0',\r\n            'eng_to_ipa==0.0.2',\r\n            'inflect==7.0.0',\r\n            'unidecode==1.3.7',\r\n            'whisper-timestamped==1.14.2',\r\n            'pypinyin==0.50.0',\r\n            'cn2an==0.5.22',\r\n            'jieba==0.42.1',\r\n            'gradio==3.48.0',\r\n            'langid==1.1.6'\r\n      ],\r\n      zip_safe=False\r\n      )\r\n"
        }
      ]
    }
  ]
}