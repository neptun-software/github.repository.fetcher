{
  "metadata": {
    "timestamp": 1736561426798,
    "page": 69,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lllyasviel/ControlNet",
      "stars": 31169,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.892578125,
          "content": ".idea/\n\ntraining/\nlightning_logs/\nimage_log/\n\n*.pth\n*.pt\n*.ckpt\n*.safetensors\n\ngradio_pose2image_private.py\ngradio_canny2image_private.py\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.2333984375,
          "content": "# News: A nightly version of ControlNet 1.1 is released!\n\n[ControlNet 1.1](https://github.com/lllyasviel/ControlNet-v1-1-nightly) is released. Those new models will be merged to this repo after we make sure that everything is good.\n\n# Below is ControlNet 1.0\n\nOfficial implementation of [Adding Conditional Control to Text-to-Image Diffusion Models](https://arxiv.org/abs/2302.05543).\n\nControlNet is a neural network structure to control diffusion models by adding extra conditions.\n\n![img](github_page/he.png)\n\nIt copys the weights of neural network blocks into a \"locked\" copy and a \"trainable\" copy. \n\nThe \"trainable\" one learns your condition. The \"locked\" one preserves your model. \n\nThanks to this, training with small dataset of image pairs will not destroy the production-ready diffusion models.\n\nThe \"zero convolution\" is 1×1 convolution with both weight and bias initialized as zeros. \n\nBefore training, all zero convolutions output zeros, and ControlNet will not cause any distortion.\n\nNo layer is trained from scratch. You are still fine-tuning. Your original model is safe. \n\nThis allows training on small-scale or even personal devices.\n\nThis is also friendly to merge/replacement/offsetting of models/weights/blocks/layers.\n\n### FAQ\n\n**Q:** But wait, if the weight of a conv layer is zero, the gradient will also be zero, and the network will not learn anything. Why \"zero convolution\" works?\n\n**A:** This is not true. [See an explanation here](docs/faq.md).\n\n# Stable Diffusion + ControlNet\n\nBy repeating the above simple structure 14 times, we can control stable diffusion in this way:\n\n![img](github_page/sd.png)\n\nIn this way, the ControlNet can **reuse** the SD encoder as a **deep, strong, robust, and powerful backbone** to learn diverse controls. Many evidences (like [this](https://jerryxu.net/ODISE/) and [this](https://vpd.ivg-research.xyz/)) validate that the SD encoder is an excellent backbone.\n\nNote that the way we connect layers is computational efficient. The original SD encoder does not need to store gradients (the locked original SD Encoder Block 1234 and Middle). The required GPU memory is not much larger than original SD, although many layers are added. Great!\n\n# Features & News\n\n2023/0/14 - We released [ControlNet 1.1](https://github.com/lllyasviel/ControlNet-v1-1-nightly). Those new models will be merged to this repo after we make sure that everything is good.\n\n2023/03/03 - We released a discussion - [Precomputed ControlNet: Speed up ControlNet by 45%, but is it necessary?](https://github.com/lllyasviel/ControlNet/discussions/216)\n\n2023/02/26 - We released a blog - [Ablation Study: Why ControlNets use deep encoder? What if it was lighter? Or even an MLP?](https://github.com/lllyasviel/ControlNet/discussions/188)\n\n2023/02/20 - Implementation for non-prompt mode released. See also [Guess Mode / Non-Prompt Mode](#guess-anchor).\n\n2023/02/12 - Now you can play with any community model by [Transferring the ControlNet](https://github.com/lllyasviel/ControlNet/discussions/12).\n\n2023/02/11 - [Low VRAM mode](docs/low_vram.md) is added. Please use this mode if you are using 8GB GPU(s) or if you want larger batch size.\n\n# Production-Ready Pretrained Models\n\nFirst create a new conda environment\n\n    conda env create -f environment.yaml\n    conda activate control\n\nAll models and detectors can be downloaded from [our Hugging Face page](https://huggingface.co/lllyasviel/ControlNet). Make sure that SD models are put in \"ControlNet/models\" and detectors are put in \"ControlNet/annotator/ckpts\". Make sure that you download all necessary pretrained weights and detector models from that Hugging Face page, including HED edge detection model, Midas depth estimation model, Openpose, and so on. \n\nWe provide 9 Gradio apps with these models.\n\nAll test images can be found at the folder \"test_imgs\".\n\n## ControlNet with Canny Edge\n\nStable Diffusion 1.5 + ControlNet (using simple Canny edge detection)\n\n    python gradio_canny2image.py\n\nThe Gradio app also allows you to change the Canny edge thresholds. Just try it for more details.\n\nPrompt: \"bird\"\n![p](github_page/p1.png)\n\nPrompt: \"cute dog\"\n![p](github_page/p2.png)\n\n## ControlNet with M-LSD Lines\n\nStable Diffusion 1.5 + ControlNet (using simple M-LSD straight line detection)\n\n    python gradio_hough2image.py\n\nThe Gradio app also allows you to change the M-LSD thresholds. Just try it for more details.\n\nPrompt: \"room\"\n![p](github_page/p3.png)\n\nPrompt: \"building\"\n![p](github_page/p4.png)\n\n## ControlNet with HED Boundary\n\nStable Diffusion 1.5 + ControlNet (using soft HED Boundary)\n\n    python gradio_hed2image.py\n\nThe soft HED Boundary will preserve many details in input images, making this app suitable for recoloring and stylizing. Just try it for more details.\n\nPrompt: \"oil painting of handsome old man, masterpiece\"\n![p](github_page/p5.png)\n\nPrompt: \"Cyberpunk robot\"\n![p](github_page/p6.png)\n\n## ControlNet with User Scribbles\n\nStable Diffusion 1.5 + ControlNet (using Scribbles)\n\n    python gradio_scribble2image.py\n\nNote that the UI is based on Gradio, and Gradio is somewhat difficult to customize. Right now you need to draw scribbles outside the UI (using your favorite drawing software, for example, MS Paint) and then import the scribble image to Gradio. \n\nPrompt: \"turtle\"\n![p](github_page/p7.png)\n\nPrompt: \"hot air balloon\"\n![p](github_page/p8.png)\n\n### Interactive Interface\n\nWe actually provide an interactive interface\n\n    python gradio_scribble2image_interactive.py\n\n~~However, because gradio is very [buggy](https://github.com/gradio-app/gradio/issues/3166) and difficult to customize, right now, user need to first set canvas width and heights and then click \"Open drawing canvas\" to get a drawing area. Please do not upload image to that drawing canvas. Also, the drawing area is very small; it should be bigger. But I failed to find out how to make it larger. Again, gradio is really buggy.~~ (Now fixed, will update asap)\n\nThe below dog sketch is drawn by me. Perhaps we should draw a better dog for showcase.\n\nPrompt: \"dog in a room\"\n![p](github_page/p20.png)\n\n## ControlNet with Fake Scribbles\n\nStable Diffusion 1.5 + ControlNet (using fake scribbles)\n\n    python gradio_fake_scribble2image.py\n\nSometimes we are lazy, and we do not want to draw scribbles. This script use the exactly same scribble-based model but use a simple algorithm to synthesize scribbles from input images.\n\nPrompt: \"bag\"\n![p](github_page/p9.png)\n\nPrompt: \"shose\" (Note that \"shose\" is a typo; it should be \"shoes\". But it still seems to work.)\n![p](github_page/p10.png)\n\n## ControlNet with Human Pose\n\nStable Diffusion 1.5 + ControlNet (using human pose)\n\n    python gradio_pose2image.py\n\nApparently, this model deserves a better UI to directly manipulate pose skeleton. However, again, Gradio is somewhat difficult to customize. Right now you need to input an image and then the Openpose will detect the pose for you.\n\nPrompt: \"Chief in the kitchen\"\n![p](github_page/p11.png)\n\nPrompt: \"An astronaut on the moon\"\n![p](github_page/p12.png)\n\n## ControlNet with Semantic Segmentation\n\nStable Diffusion 1.5 + ControlNet (using semantic segmentation)\n\n    python gradio_seg2image.py\n\nThis model use ADE20K's segmentation protocol. Again, this model deserves a better UI to directly draw the segmentations. However, again, Gradio is somewhat difficult to customize. Right now you need to input an image and then a model called Uniformer will detect the segmentations for you. Just try it for more details.\n\nPrompt: \"House\"\n![p](github_page/p13.png)\n\nPrompt: \"River\"\n![p](github_page/p14.png)\n\n## ControlNet with Depth\n\nStable Diffusion 1.5 + ControlNet (using depth map)\n\n    python gradio_depth2image.py\n\nGreat! Now SD 1.5 also have a depth control. FINALLY. So many possibilities (considering SD1.5 has much more community models than SD2).\n\nNote that different from Stability's model, the ControlNet receive the full 512×512 depth map, rather than 64×64 depth. Note that Stability's SD2 depth model use 64*64 depth maps. This means that the ControlNet will preserve more details in the depth map.\n\nThis is always a strength because if users do not want to preserve more details, they can simply use another SD to post-process an i2i. But if they want to preserve more details, ControlNet becomes their only choice. Again, SD2 uses 64×64 depth, we use 512×512.\n\nPrompt: \"Stormtrooper's lecture\"\n![p](github_page/p15.png)\n\n## ControlNet with Normal Map\n\nStable Diffusion 1.5 + ControlNet (using normal map)\n\n    python gradio_normal2image.py\n\nThis model use normal map. Rightnow in the APP, the normal is computed from the midas depth map and a user threshold (to determine how many area is background with identity normal face to viewer, tune the \"Normal background threshold\" in the gradio app to get a feeling).\n\nPrompt: \"Cute toy\"\n![p](github_page/p17.png)\n\nPrompt: \"Plaster statue of Abraham Lincoln\"\n![p](github_page/p18.png)\n\nCompared to depth model, this model seems to be a bit better at preserving the geometry. This is intuitive: minor details are not salient in depth maps, but are salient in normal maps. Below is the depth result with same inputs. You can see that the hairstyle of the man in the input image is modified by depth model, but preserved by the normal model. \n\nPrompt: \"Plaster statue of Abraham Lincoln\"\n![p](github_page/p19.png)\n\n## ControlNet with Anime Line Drawing\n\nWe also trained a relatively simple ControlNet for anime line drawings. This tool may be useful for artistic creations. (Although the image details in the results is a bit modified, since it still diffuse latent images.)\n\nThis model is not available right now. We need to evaluate the potential risks before releasing this model. Nevertheless, you may be interested in [transferring the ControlNet to any community model](https://github.com/lllyasviel/ControlNet/discussions/12).\n\n![p](github_page/p21.png)\n\n<a id=\"guess-anchor\"></a>\n\n# Guess Mode / Non-Prompt Mode\n\nThe \"guess mode\" (or called non-prompt mode) will completely unleash all the power of the very powerful ControlNet encoder. \n\nSee also the blog - [Ablation Study: Why ControlNets use deep encoder? What if it was lighter? Or even an MLP?](https://github.com/lllyasviel/ControlNet/discussions/188)\n\nYou need to manually check the \"Guess Mode\" toggle to enable this mode.\n\nIn this mode, the ControlNet encoder will try best to recognize the content of the input control map, like depth map, edge map, scribbles, etc, even if you remove all prompts.\n\n**Let's have fun with some very challenging experimental settings!**\n\n**No prompts. No \"positive\" prompts. No \"negative\" prompts. No extra caption detector. One single diffusion loop.**\n\nFor this mode, we recommend to use 50 steps and guidance scale between 3 and 5.\n\n![p](github_page/uc2a.png)\n\nNo prompts:\n\n![p](github_page/uc2b.png)\n\nNote that the below example is 768×768. No prompts. No \"positive\" prompts. No \"negative\" prompts.\n\n![p](github_page/uc1.png)\n\nBy tuning the parameters, you can get some very intereting results like below:\n\n![p](github_page/uc3.png)\n\nBecause no prompt is available, the ControlNet encoder will \"guess\" what is in the control map. Sometimes the guess result is really interesting. Because diffusion algorithm can essentially give multiple results, the ControlNet seems able to give multiple guesses, like this:\n\n![p](github_page/uc4.png)\n\nWithout prompt, the HED seems good at generating images look like paintings when the control strength is relatively low:\n\n![p](github_page/uc6.png)\n\nThe Guess Mode is also supported in [WebUI Plugin](https://github.com/Mikubill/sd-webui-controlnet):\n\n![p](github_page/uci1.png)\n\nNo prompts. Default WebUI parameters. Pure random results with the seed being 12345. Standard SD1.5. Input scribble is in \"test_imgs\" folder to reproduce.\n\n![p](github_page/uci2.png)\n\nBelow is another challenging example:\n\n![p](github_page/uci3.png)\n\nNo prompts. Default WebUI parameters. Pure random results with the seed being 12345. Standard SD1.5. Input scribble is in \"test_imgs\" folder to reproduce.\n\n![p](github_page/uci4.png)\n\nNote that in the guess mode, you will still be able to input prompts. The only difference is that the model will \"try harder\" to guess what is in the control map even if you do not provide the prompt. Just try it yourself!\n\nBesides, if you write some scripts (like BLIP) to generate image captions from the \"guess mode\" images, and then use the generated captions as prompts to diffuse again, you will get a SOTA pipeline for fully automatic conditional image generating.\n\n# Combining Multiple ControlNets\n\nControlNets are composable: more than one ControlNet can be easily composed to multi-condition control.\n\nRight now this feature is in experimental stage in the [Mikubill' A1111 Webui Plugin](https://github.com/Mikubill/sd-webui-controlnet):\n\n![p](github_page/multi2.png)\n\n![p](github_page/multi.png)\n\nAs long as the models are controlling the same SD, the \"boundary\" between different research projects does not even exist. This plugin also allows different methods to work together!\n\n# Use ControlNet in Any Community Model (SD1.X)\n\nThis is an experimental feature.\n\n[See the steps here](https://github.com/lllyasviel/ControlNet/discussions/12).\n\nOr you may want to use the [Mikubill' A1111 Webui Plugin](https://github.com/Mikubill/sd-webui-controlnet) which is plug-and-play and does not need manual merging.\n\n# Annotate Your Own Data\n\nWe provide simple python scripts to process images.\n\n[See a gradio example here](docs/annotator.md).\n\n# Train with Your Own Data\n\nTraining a ControlNet is as easy as (or even easier than) training a simple pix2pix. \n\n[See the steps here](docs/train.md).\n\n# Related Resources\n\nSpecial Thank to the great project - [Mikubill' A1111 Webui Plugin](https://github.com/Mikubill/sd-webui-controlnet) !\n\nWe also thank Hysts for making [Hugging Face Space](https://huggingface.co/spaces/hysts/ControlNet) as well as more than 65 models in that amazing [Colab list](https://github.com/camenduru/controlnet-colab)! \n\nThank haofanwang for making [ControlNet-for-Diffusers](https://github.com/haofanwang/ControlNet-for-Diffusers)!\n\nWe also thank all authors for making Controlnet DEMOs, including but not limited to [fffiloni](https://huggingface.co/spaces/fffiloni/ControlNet-Video), [other-model](https://huggingface.co/spaces/hysts/ControlNet-with-other-models), [ThereforeGames](https://github.com/AUTOMATIC1111/stable-diffusion-webui/discussions/7784), [RamAnanth1](https://huggingface.co/spaces/RamAnanth1/ControlNet), etc!\n\nBesides, you may also want to read these amazing related works:\n\n[Composer: Creative and Controllable Image Synthesis with Composable Conditions](https://github.com/damo-vilab/composer): A much bigger model to control diffusion!\n\n[T2I-Adapter: Learning Adapters to Dig out More Controllable Ability for Text-to-Image Diffusion Models](https://github.com/TencentARC/T2I-Adapter): A much smaller model to control stable diffusion!\n\n[ControlLoRA: A Light Neural Network To Control Stable Diffusion Spatial Information](https://github.com/HighCWu/ControlLoRA): Implement Controlnet using LORA!\n\nAnd these amazing recent projects: [InstructPix2Pix Learning to Follow Image Editing Instructions](https://www.timothybrooks.com/instruct-pix2pix), [Pix2pix-zero: Zero-shot Image-to-Image Translation](https://github.com/pix2pixzero/pix2pix-zero), [Plug-and-Play Diffusion Features for Text-Driven Image-to-Image Translation](https://github.com/MichalGeyer/plug-and-play), [MaskSketch: Unpaired Structure-guided Masked Image Generation](https://arxiv.org/abs/2302.05496), [SEGA: Instructing Diffusion using Semantic Dimensions](https://arxiv.org/abs/2301.12247), [Universal Guidance for Diffusion Models](https://github.com/arpitbansal297/Universal-Guided-Diffusion), [Region-Aware Diffusion for Zero-shot Text-driven Image Editing](https://github.com/haha-lisa/RDM-Region-Aware-Diffusion-Model), [Domain Expansion of Image Generators](https://arxiv.org/abs/2301.05225), [Image Mixer](https://twitter.com/LambdaAPI/status/1626327289288957956), [MultiDiffusion: Fusing Diffusion Paths for Controlled Image Generation](https://multidiffusion.github.io/)\n\n# Citation\n\n    @misc{zhang2023adding,\n      title={Adding Conditional Control to Text-to-Image Diffusion Models}, \n      author={Lvmin Zhang and Anyi Rao and Maneesh Agrawala},\n      booktitle={IEEE International Conference on Computer Vision (ICCV)}\n      year={2023},\n    }\n\n[Arxiv Link](https://arxiv.org/abs/2302.05543)\n\n[Supplementary Materials](https://lllyasviel.github.io/misc/202309/cnet_supp.pdf)\n"
        },
        {
          "name": "annotator",
          "type": "tree",
          "content": null
        },
        {
          "name": "cldm",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.py",
          "type": "blob",
          "size": 0.01953125,
          "content": "save_memory = False\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "environment.yaml",
          "type": "blob",
          "size": 0.791015625,
          "content": "name: control\nchannels:\n  - pytorch\n  - defaults\ndependencies:\n  - python=3.8.5\n  - pip=20.3\n  - cudatoolkit=11.3\n  - pytorch=1.12.1\n  - torchvision=0.13.1\n  - numpy=1.23.1\n  - pip:\n      - gradio==3.16.2\n      - albumentations==1.3.0\n      - opencv-contrib-python==4.3.0.36\n      - imageio==2.9.0\n      - imageio-ffmpeg==0.4.2\n      - pytorch-lightning==1.5.0\n      - omegaconf==2.1.1\n      - test-tube>=0.7.5\n      - streamlit==1.12.1\n      - einops==0.3.0\n      - transformers==4.19.2\n      - webdataset==0.2.5\n      - kornia==0.6\n      - open_clip_torch==2.0.2\n      - invisible-watermark>=0.1.5\n      - streamlit-drawable-canvas==0.8.0\n      - torchmetrics==0.6.0\n      - timm==0.6.12\n      - addict==2.4.0\n      - yapf==0.32.0\n      - prettytable==3.6.0\n      - safetensors==0.2.7\n      - basicsr==1.4.2\n"
        },
        {
          "name": "font",
          "type": "tree",
          "content": null
        },
        {
          "name": "github_page",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradio_annotator.py",
          "type": "blob",
          "size": 5.61328125,
          "content": "import gradio as gr\n\nfrom annotator.util import resize_image, HWC3\n\n\nmodel_canny = None\n\n\ndef canny(img, res, l, h):\n    img = resize_image(HWC3(img), res)\n    global model_canny\n    if model_canny is None:\n        from annotator.canny import CannyDetector\n        model_canny = CannyDetector()\n    result = model_canny(img, l, h)\n    return [result]\n\n\nmodel_hed = None\n\n\ndef hed(img, res):\n    img = resize_image(HWC3(img), res)\n    global model_hed\n    if model_hed is None:\n        from annotator.hed import HEDdetector\n        model_hed = HEDdetector()\n    result = model_hed(img)\n    return [result]\n\n\nmodel_mlsd = None\n\n\ndef mlsd(img, res, thr_v, thr_d):\n    img = resize_image(HWC3(img), res)\n    global model_mlsd\n    if model_mlsd is None:\n        from annotator.mlsd import MLSDdetector\n        model_mlsd = MLSDdetector()\n    result = model_mlsd(img, thr_v, thr_d)\n    return [result]\n\n\nmodel_midas = None\n\n\ndef midas(img, res, a):\n    img = resize_image(HWC3(img), res)\n    global model_midas\n    if model_midas is None:\n        from annotator.midas import MidasDetector\n        model_midas = MidasDetector()\n    results = model_midas(img, a)\n    return results\n\n\nmodel_openpose = None\n\n\ndef openpose(img, res, has_hand):\n    img = resize_image(HWC3(img), res)\n    global model_openpose\n    if model_openpose is None:\n        from annotator.openpose import OpenposeDetector\n        model_openpose = OpenposeDetector()\n    result, _ = model_openpose(img, has_hand)\n    return [result]\n\n\nmodel_uniformer = None\n\n\ndef uniformer(img, res):\n    img = resize_image(HWC3(img), res)\n    global model_uniformer\n    if model_uniformer is None:\n        from annotator.uniformer import UniformerDetector\n        model_uniformer = UniformerDetector()\n    result = model_uniformer(img)\n    return [result]\n\n\nblock = gr.Blocks().queue()\nwith block:\n    with gr.Row():\n        gr.Markdown(\"## Canny Edge\")\n    with gr.Row():\n        with gr.Column():\n            input_image = gr.Image(source='upload', type=\"numpy\")\n            low_threshold = gr.Slider(label=\"low_threshold\", minimum=1, maximum=255, value=100, step=1)\n            high_threshold = gr.Slider(label=\"high_threshold\", minimum=1, maximum=255, value=200, step=1)\n            resolution = gr.Slider(label=\"resolution\", minimum=256, maximum=1024, value=512, step=64)\n            run_button = gr.Button(label=\"Run\")\n        with gr.Column():\n            gallery = gr.Gallery(label=\"Generated images\", show_label=False).style(height=\"auto\")\n    run_button.click(fn=canny, inputs=[input_image, resolution, low_threshold, high_threshold], outputs=[gallery])\n\n    with gr.Row():\n        gr.Markdown(\"## HED Edge\")\n    with gr.Row():\n        with gr.Column():\n            input_image = gr.Image(source='upload', type=\"numpy\")\n            resolution = gr.Slider(label=\"resolution\", minimum=256, maximum=1024, value=512, step=64)\n            run_button = gr.Button(label=\"Run\")\n        with gr.Column():\n            gallery = gr.Gallery(label=\"Generated images\", show_label=False).style(height=\"auto\")\n    run_button.click(fn=hed, inputs=[input_image, resolution], outputs=[gallery])\n\n    with gr.Row():\n        gr.Markdown(\"## MLSD Edge\")\n    with gr.Row():\n        with gr.Column():\n            input_image = gr.Image(source='upload', type=\"numpy\")\n            value_threshold = gr.Slider(label=\"value_threshold\", minimum=0.01, maximum=2.0, value=0.1, step=0.01)\n            distance_threshold = gr.Slider(label=\"distance_threshold\", minimum=0.01, maximum=20.0, value=0.1, step=0.01)\n            resolution = gr.Slider(label=\"resolution\", minimum=256, maximum=1024, value=384, step=64)\n            run_button = gr.Button(label=\"Run\")\n        with gr.Column():\n            gallery = gr.Gallery(label=\"Generated images\", show_label=False).style(height=\"auto\")\n    run_button.click(fn=mlsd, inputs=[input_image, resolution, value_threshold, distance_threshold], outputs=[gallery])\n\n    with gr.Row():\n        gr.Markdown(\"## MIDAS Depth and Normal\")\n    with gr.Row():\n        with gr.Column():\n            input_image = gr.Image(source='upload', type=\"numpy\")\n            alpha = gr.Slider(label=\"alpha\", minimum=0.1, maximum=20.0, value=6.2, step=0.01)\n            resolution = gr.Slider(label=\"resolution\", minimum=256, maximum=1024, value=384, step=64)\n            run_button = gr.Button(label=\"Run\")\n        with gr.Column():\n            gallery = gr.Gallery(label=\"Generated images\", show_label=False).style(height=\"auto\")\n    run_button.click(fn=midas, inputs=[input_image, resolution, alpha], outputs=[gallery])\n\n    with gr.Row():\n        gr.Markdown(\"## Openpose\")\n    with gr.Row():\n        with gr.Column():\n            input_image = gr.Image(source='upload', type=\"numpy\")\n            hand = gr.Checkbox(label='detect hand', value=False)\n            resolution = gr.Slider(label=\"resolution\", minimum=256, maximum=1024, value=512, step=64)\n            run_button = gr.Button(label=\"Run\")\n        with gr.Column():\n            gallery = gr.Gallery(label=\"Generated images\", show_label=False).style(height=\"auto\")\n    run_button.click(fn=openpose, inputs=[input_image, resolution, hand], outputs=[gallery])\n\n\n    with gr.Row():\n        gr.Markdown(\"## Uniformer Segmentation\")\n    with gr.Row():\n        with gr.Column():\n            input_image = gr.Image(source='upload', type=\"numpy\")\n            resolution = gr.Slider(label=\"resolution\", minimum=256, maximum=1024, value=512, step=64)\n            run_button = gr.Button(label=\"Run\")\n        with gr.Column():\n            gallery = gr.Gallery(label=\"Generated images\", show_label=False).style(height=\"auto\")\n    run_button.click(fn=uniformer, inputs=[input_image, resolution], outputs=[gallery])\n\n\nblock.launch(server_name='0.0.0.0')\n"
        },
        {
          "name": "gradio_canny2image.py",
          "type": "blob",
          "size": 4.759765625,
          "content": "from share import *\nimport config\n\nimport cv2\nimport einops\nimport gradio as gr\nimport numpy as np\nimport torch\nimport random\n\nfrom pytorch_lightning import seed_everything\nfrom annotator.util import resize_image, HWC3\nfrom annotator.canny import CannyDetector\nfrom cldm.model import create_model, load_state_dict\nfrom cldm.ddim_hacked import DDIMSampler\n\n\napply_canny = CannyDetector()\n\nmodel = create_model('./models/cldm_v15.yaml').cpu()\nmodel.load_state_dict(load_state_dict('./models/control_sd15_canny.pth', location='cuda'))\nmodel = model.cuda()\nddim_sampler = DDIMSampler(model)\n\n\ndef process(input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, ddim_steps, guess_mode, strength, scale, seed, eta, low_threshold, high_threshold):\n    with torch.no_grad():\n        img = resize_image(HWC3(input_image), image_resolution)\n        H, W, C = img.shape\n\n        detected_map = apply_canny(img, low_threshold, high_threshold)\n        detected_map = HWC3(detected_map)\n\n        control = torch.from_numpy(detected_map.copy()).float().cuda() / 255.0\n        control = torch.stack([control for _ in range(num_samples)], dim=0)\n        control = einops.rearrange(control, 'b h w c -> b c h w').clone()\n\n        if seed == -1:\n            seed = random.randint(0, 65535)\n        seed_everything(seed)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        cond = {\"c_concat\": [control], \"c_crossattn\": [model.get_learned_conditioning([prompt + ', ' + a_prompt] * num_samples)]}\n        un_cond = {\"c_concat\": None if guess_mode else [control], \"c_crossattn\": [model.get_learned_conditioning([n_prompt] * num_samples)]}\n        shape = (4, H // 8, W // 8)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=True)\n\n        model.control_scales = [strength * (0.825 ** float(12 - i)) for i in range(13)] if guess_mode else ([strength] * 13)  # Magic number. IDK why. Perhaps because 0.825**12<0.01 but 0.826**12>0.01\n        samples, intermediates = ddim_sampler.sample(ddim_steps, num_samples,\n                                                     shape, cond, verbose=False, eta=eta,\n                                                     unconditional_guidance_scale=scale,\n                                                     unconditional_conditioning=un_cond)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        x_samples = model.decode_first_stage(samples)\n        x_samples = (einops.rearrange(x_samples, 'b c h w -> b h w c') * 127.5 + 127.5).cpu().numpy().clip(0, 255).astype(np.uint8)\n\n        results = [x_samples[i] for i in range(num_samples)]\n    return [255 - detected_map] + results\n\n\nblock = gr.Blocks().queue()\nwith block:\n    with gr.Row():\n        gr.Markdown(\"## Control Stable Diffusion with Canny Edge Maps\")\n    with gr.Row():\n        with gr.Column():\n            input_image = gr.Image(source='upload', type=\"numpy\")\n            prompt = gr.Textbox(label=\"Prompt\")\n            run_button = gr.Button(label=\"Run\")\n            with gr.Accordion(\"Advanced options\", open=False):\n                num_samples = gr.Slider(label=\"Images\", minimum=1, maximum=12, value=1, step=1)\n                image_resolution = gr.Slider(label=\"Image Resolution\", minimum=256, maximum=768, value=512, step=64)\n                strength = gr.Slider(label=\"Control Strength\", minimum=0.0, maximum=2.0, value=1.0, step=0.01)\n                guess_mode = gr.Checkbox(label='Guess Mode', value=False)\n                low_threshold = gr.Slider(label=\"Canny low threshold\", minimum=1, maximum=255, value=100, step=1)\n                high_threshold = gr.Slider(label=\"Canny high threshold\", minimum=1, maximum=255, value=200, step=1)\n                ddim_steps = gr.Slider(label=\"Steps\", minimum=1, maximum=100, value=20, step=1)\n                scale = gr.Slider(label=\"Guidance Scale\", minimum=0.1, maximum=30.0, value=9.0, step=0.1)\n                seed = gr.Slider(label=\"Seed\", minimum=-1, maximum=2147483647, step=1, randomize=True)\n                eta = gr.Number(label=\"eta (DDIM)\", value=0.0)\n                a_prompt = gr.Textbox(label=\"Added Prompt\", value='best quality, extremely detailed')\n                n_prompt = gr.Textbox(label=\"Negative Prompt\",\n                                      value='longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality')\n        with gr.Column():\n            result_gallery = gr.Gallery(label='Output', show_label=False, elem_id=\"gallery\").style(grid=2, height='auto')\n    ips = [input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, ddim_steps, guess_mode, strength, scale, seed, eta, low_threshold, high_threshold]\n    run_button.click(fn=process, inputs=ips, outputs=[result_gallery])\n\n\nblock.launch(server_name='0.0.0.0')\n"
        },
        {
          "name": "gradio_depth2image.py",
          "type": "blob",
          "size": 4.748046875,
          "content": "from share import *\nimport config\n\nimport cv2\nimport einops\nimport gradio as gr\nimport numpy as np\nimport torch\nimport random\n\nfrom pytorch_lightning import seed_everything\nfrom annotator.util import resize_image, HWC3\nfrom annotator.midas import MidasDetector\nfrom cldm.model import create_model, load_state_dict\nfrom cldm.ddim_hacked import DDIMSampler\n\n\napply_midas = MidasDetector()\n\nmodel = create_model('./models/cldm_v15.yaml').cpu()\nmodel.load_state_dict(load_state_dict('./models/control_sd15_depth.pth', location='cuda'))\nmodel = model.cuda()\nddim_sampler = DDIMSampler(model)\n\n\ndef process(input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, detect_resolution, ddim_steps, guess_mode, strength, scale, seed, eta):\n    with torch.no_grad():\n        input_image = HWC3(input_image)\n        detected_map, _ = apply_midas(resize_image(input_image, detect_resolution))\n        detected_map = HWC3(detected_map)\n        img = resize_image(input_image, image_resolution)\n        H, W, C = img.shape\n\n        detected_map = cv2.resize(detected_map, (W, H), interpolation=cv2.INTER_LINEAR)\n\n        control = torch.from_numpy(detected_map.copy()).float().cuda() / 255.0\n        control = torch.stack([control for _ in range(num_samples)], dim=0)\n        control = einops.rearrange(control, 'b h w c -> b c h w').clone()\n\n        if seed == -1:\n            seed = random.randint(0, 65535)\n        seed_everything(seed)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        cond = {\"c_concat\": [control], \"c_crossattn\": [model.get_learned_conditioning([prompt + ', ' + a_prompt] * num_samples)]}\n        un_cond = {\"c_concat\": None if guess_mode else [control], \"c_crossattn\": [model.get_learned_conditioning([n_prompt] * num_samples)]}\n        shape = (4, H // 8, W // 8)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=True)\n\n        model.control_scales = [strength * (0.825 ** float(12 - i)) for i in range(13)] if guess_mode else ([strength] * 13)  # Magic number. IDK why. Perhaps because 0.825**12<0.01 but 0.826**12>0.01\n        samples, intermediates = ddim_sampler.sample(ddim_steps, num_samples,\n                                                     shape, cond, verbose=False, eta=eta,\n                                                     unconditional_guidance_scale=scale,\n                                                     unconditional_conditioning=un_cond)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        x_samples = model.decode_first_stage(samples)\n        x_samples = (einops.rearrange(x_samples, 'b c h w -> b h w c') * 127.5 + 127.5).cpu().numpy().clip(0, 255).astype(np.uint8)\n\n        results = [x_samples[i] for i in range(num_samples)]\n    return [detected_map] + results\n\n\nblock = gr.Blocks().queue()\nwith block:\n    with gr.Row():\n        gr.Markdown(\"## Control Stable Diffusion with Depth Maps\")\n    with gr.Row():\n        with gr.Column():\n            input_image = gr.Image(source='upload', type=\"numpy\")\n            prompt = gr.Textbox(label=\"Prompt\")\n            run_button = gr.Button(label=\"Run\")\n            with gr.Accordion(\"Advanced options\", open=False):\n                num_samples = gr.Slider(label=\"Images\", minimum=1, maximum=12, value=1, step=1)\n                image_resolution = gr.Slider(label=\"Image Resolution\", minimum=256, maximum=768, value=512, step=64)\n                strength = gr.Slider(label=\"Control Strength\", minimum=0.0, maximum=2.0, value=1.0, step=0.01)\n                guess_mode = gr.Checkbox(label='Guess Mode', value=False)\n                detect_resolution = gr.Slider(label=\"Depth Resolution\", minimum=128, maximum=1024, value=384, step=1)\n                ddim_steps = gr.Slider(label=\"Steps\", minimum=1, maximum=100, value=20, step=1)\n                scale = gr.Slider(label=\"Guidance Scale\", minimum=0.1, maximum=30.0, value=9.0, step=0.1)\n                seed = gr.Slider(label=\"Seed\", minimum=-1, maximum=2147483647, step=1, randomize=True)\n                eta = gr.Number(label=\"eta (DDIM)\", value=0.0)\n                a_prompt = gr.Textbox(label=\"Added Prompt\", value='best quality, extremely detailed')\n                n_prompt = gr.Textbox(label=\"Negative Prompt\",\n                                      value='longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality')\n        with gr.Column():\n            result_gallery = gr.Gallery(label='Output', show_label=False, elem_id=\"gallery\").style(grid=2, height='auto')\n    ips = [input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, detect_resolution, ddim_steps, guess_mode, strength, scale, seed, eta]\n    run_button.click(fn=process, inputs=ips, outputs=[result_gallery])\n\n\nblock.launch(server_name='0.0.0.0')\n"
        },
        {
          "name": "gradio_fake_scribble2image.py",
          "type": "blob",
          "size": 4.9580078125,
          "content": "from share import *\nimport config\n\nimport cv2\nimport einops\nimport gradio as gr\nimport numpy as np\nimport torch\nimport random\n\nfrom pytorch_lightning import seed_everything\nfrom annotator.util import resize_image, HWC3\nfrom annotator.hed import HEDdetector, nms\nfrom cldm.model import create_model, load_state_dict\nfrom cldm.ddim_hacked import DDIMSampler\n\n\napply_hed = HEDdetector()\n\nmodel = create_model('./models/cldm_v15.yaml').cpu()\nmodel.load_state_dict(load_state_dict('./models/control_sd15_scribble.pth', location='cuda'))\nmodel = model.cuda()\nddim_sampler = DDIMSampler(model)\n\n\ndef process(input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, detect_resolution, ddim_steps, guess_mode, strength, scale, seed, eta):\n    with torch.no_grad():\n        input_image = HWC3(input_image)\n        detected_map = apply_hed(resize_image(input_image, detect_resolution))\n        detected_map = HWC3(detected_map)\n        img = resize_image(input_image, image_resolution)\n        H, W, C = img.shape\n\n        detected_map = cv2.resize(detected_map, (W, H), interpolation=cv2.INTER_LINEAR)\n        detected_map = nms(detected_map, 127, 3.0)\n        detected_map = cv2.GaussianBlur(detected_map, (0, 0), 3.0)\n        detected_map[detected_map > 4] = 255\n        detected_map[detected_map < 255] = 0\n\n        control = torch.from_numpy(detected_map.copy()).float().cuda() / 255.0\n        control = torch.stack([control for _ in range(num_samples)], dim=0)\n        control = einops.rearrange(control, 'b h w c -> b c h w').clone()\n\n        if seed == -1:\n            seed = random.randint(0, 65535)\n        seed_everything(seed)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        cond = {\"c_concat\": [control], \"c_crossattn\": [model.get_learned_conditioning([prompt + ', ' + a_prompt] * num_samples)]}\n        un_cond = {\"c_concat\": None if guess_mode else [control], \"c_crossattn\": [model.get_learned_conditioning([n_prompt] * num_samples)]}\n        shape = (4, H // 8, W // 8)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=True)\n\n        model.control_scales = [strength * (0.825 ** float(12 - i)) for i in range(13)] if guess_mode else ([strength] * 13)  # Magic number. IDK why. Perhaps because 0.825**12<0.01 but 0.826**12>0.01\n        samples, intermediates = ddim_sampler.sample(ddim_steps, num_samples,\n                                                     shape, cond, verbose=False, eta=eta,\n                                                     unconditional_guidance_scale=scale,\n                                                     unconditional_conditioning=un_cond)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        x_samples = model.decode_first_stage(samples)\n        x_samples = (einops.rearrange(x_samples, 'b c h w -> b h w c') * 127.5 + 127.5).cpu().numpy().clip(0, 255).astype(np.uint8)\n\n        results = [x_samples[i] for i in range(num_samples)]\n    return [255 - detected_map] + results\n\n\nblock = gr.Blocks().queue()\nwith block:\n    with gr.Row():\n        gr.Markdown(\"## Control Stable Diffusion with Fake Scribble Maps\")\n    with gr.Row():\n        with gr.Column():\n            input_image = gr.Image(source='upload', type=\"numpy\")\n            prompt = gr.Textbox(label=\"Prompt\")\n            run_button = gr.Button(label=\"Run\")\n            with gr.Accordion(\"Advanced options\", open=False):\n                num_samples = gr.Slider(label=\"Images\", minimum=1, maximum=12, value=1, step=1)\n                image_resolution = gr.Slider(label=\"Image Resolution\", minimum=256, maximum=768, value=512, step=64)\n                strength = gr.Slider(label=\"Control Strength\", minimum=0.0, maximum=2.0, value=1.0, step=0.01)\n                guess_mode = gr.Checkbox(label='Guess Mode', value=False)\n                detect_resolution = gr.Slider(label=\"HED Resolution\", minimum=128, maximum=1024, value=512, step=1)\n                ddim_steps = gr.Slider(label=\"Steps\", minimum=1, maximum=100, value=20, step=1)\n                scale = gr.Slider(label=\"Guidance Scale\", minimum=0.1, maximum=30.0, value=9.0, step=0.1)\n                seed = gr.Slider(label=\"Seed\", minimum=-1, maximum=2147483647, step=1, randomize=True)\n                eta = gr.Number(label=\"eta (DDIM)\", value=0.0)\n                a_prompt = gr.Textbox(label=\"Added Prompt\", value='best quality, extremely detailed')\n                n_prompt = gr.Textbox(label=\"Negative Prompt\",\n                                      value='longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality')\n        with gr.Column():\n            result_gallery = gr.Gallery(label='Output', show_label=False, elem_id=\"gallery\").style(grid=2, height='auto')\n    ips = [input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, detect_resolution, ddim_steps, guess_mode, strength, scale, seed, eta]\n    run_button.click(fn=process, inputs=ips, outputs=[result_gallery])\n\n\nblock.launch(server_name='0.0.0.0')\n"
        },
        {
          "name": "gradio_hed2image.py",
          "type": "blob",
          "size": 4.7294921875,
          "content": "from share import *\nimport config\n\nimport cv2\nimport einops\nimport gradio as gr\nimport numpy as np\nimport torch\nimport random\n\nfrom pytorch_lightning import seed_everything\nfrom annotator.util import resize_image, HWC3\nfrom annotator.hed import HEDdetector\nfrom cldm.model import create_model, load_state_dict\nfrom cldm.ddim_hacked import DDIMSampler\n\n\napply_hed = HEDdetector()\n\nmodel = create_model('./models/cldm_v15.yaml').cpu()\nmodel.load_state_dict(load_state_dict('./models/control_sd15_hed.pth', location='cuda'))\nmodel = model.cuda()\nddim_sampler = DDIMSampler(model)\n\n\ndef process(input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, detect_resolution, ddim_steps, guess_mode, strength, scale, seed, eta):\n    with torch.no_grad():\n        input_image = HWC3(input_image)\n        detected_map = apply_hed(resize_image(input_image, detect_resolution))\n        detected_map = HWC3(detected_map)\n        img = resize_image(input_image, image_resolution)\n        H, W, C = img.shape\n\n        detected_map = cv2.resize(detected_map, (W, H), interpolation=cv2.INTER_LINEAR)\n\n        control = torch.from_numpy(detected_map.copy()).float().cuda() / 255.0\n        control = torch.stack([control for _ in range(num_samples)], dim=0)\n        control = einops.rearrange(control, 'b h w c -> b c h w').clone()\n\n        if seed == -1:\n            seed = random.randint(0, 65535)\n        seed_everything(seed)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        cond = {\"c_concat\": [control], \"c_crossattn\": [model.get_learned_conditioning([prompt + ', ' + a_prompt] * num_samples)]}\n        un_cond = {\"c_concat\": None if guess_mode else [control], \"c_crossattn\": [model.get_learned_conditioning([n_prompt] * num_samples)]}\n        shape = (4, H // 8, W // 8)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=True)\n\n        model.control_scales = [strength * (0.825 ** float(12 - i)) for i in range(13)] if guess_mode else ([strength] * 13)  # Magic number. IDK why. Perhaps because 0.825**12<0.01 but 0.826**12>0.01\n        samples, intermediates = ddim_sampler.sample(ddim_steps, num_samples,\n                                                     shape, cond, verbose=False, eta=eta,\n                                                     unconditional_guidance_scale=scale,\n                                                     unconditional_conditioning=un_cond)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        x_samples = model.decode_first_stage(samples)\n        x_samples = (einops.rearrange(x_samples, 'b c h w -> b h w c') * 127.5 + 127.5).cpu().numpy().clip(0, 255).astype(np.uint8)\n\n        results = [x_samples[i] for i in range(num_samples)]\n    return [detected_map] + results\n\n\nblock = gr.Blocks().queue()\nwith block:\n    with gr.Row():\n        gr.Markdown(\"## Control Stable Diffusion with HED Maps\")\n    with gr.Row():\n        with gr.Column():\n            input_image = gr.Image(source='upload', type=\"numpy\")\n            prompt = gr.Textbox(label=\"Prompt\")\n            run_button = gr.Button(label=\"Run\")\n            with gr.Accordion(\"Advanced options\", open=False):\n                num_samples = gr.Slider(label=\"Images\", minimum=1, maximum=12, value=1, step=1)\n                image_resolution = gr.Slider(label=\"Image Resolution\", minimum=256, maximum=768, value=512, step=64)\n                strength = gr.Slider(label=\"Control Strength\", minimum=0.0, maximum=2.0, value=1.0, step=0.01)\n                guess_mode = gr.Checkbox(label='Guess Mode', value=False)\n                detect_resolution = gr.Slider(label=\"HED Resolution\", minimum=128, maximum=1024, value=512, step=1)\n                ddim_steps = gr.Slider(label=\"Steps\", minimum=1, maximum=100, value=20, step=1)\n                scale = gr.Slider(label=\"Guidance Scale\", minimum=0.1, maximum=30.0, value=9.0, step=0.1)\n                seed = gr.Slider(label=\"Seed\", minimum=-1, maximum=2147483647, step=1, randomize=True)\n                eta = gr.Number(label=\"eta (DDIM)\", value=0.0)\n                a_prompt = gr.Textbox(label=\"Added Prompt\", value='best quality, extremely detailed')\n                n_prompt = gr.Textbox(label=\"Negative Prompt\",\n                                      value='longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality')\n        with gr.Column():\n            result_gallery = gr.Gallery(label='Output', show_label=False, elem_id=\"gallery\").style(grid=2, height='auto')\n    ips = [input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, detect_resolution, ddim_steps, guess_mode, strength, scale, seed, eta]\n    run_button.click(fn=process, inputs=ips, outputs=[result_gallery])\n\n\nblock.launch(server_name='0.0.0.0')\n"
        },
        {
          "name": "gradio_hough2image.py",
          "type": "blob",
          "size": 5.185546875,
          "content": "from share import *\nimport config\n\nimport cv2\nimport einops\nimport gradio as gr\nimport numpy as np\nimport torch\nimport random\n\nfrom pytorch_lightning import seed_everything\nfrom annotator.util import resize_image, HWC3\nfrom annotator.mlsd import MLSDdetector\nfrom cldm.model import create_model, load_state_dict\nfrom cldm.ddim_hacked import DDIMSampler\n\n\napply_mlsd = MLSDdetector()\n\nmodel = create_model('./models/cldm_v15.yaml').cpu()\nmodel.load_state_dict(load_state_dict('./models/control_sd15_mlsd.pth', location='cuda'))\nmodel = model.cuda()\nddim_sampler = DDIMSampler(model)\n\n\ndef process(input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, detect_resolution, ddim_steps, guess_mode, strength, scale, seed, eta, value_threshold, distance_threshold):\n    with torch.no_grad():\n        input_image = HWC3(input_image)\n        detected_map = apply_mlsd(resize_image(input_image, detect_resolution), value_threshold, distance_threshold)\n        detected_map = HWC3(detected_map)\n        img = resize_image(input_image, image_resolution)\n        H, W, C = img.shape\n\n        detected_map = cv2.resize(detected_map, (W, H), interpolation=cv2.INTER_NEAREST)\n\n        control = torch.from_numpy(detected_map.copy()).float().cuda() / 255.0\n        control = torch.stack([control for _ in range(num_samples)], dim=0)\n        control = einops.rearrange(control, 'b h w c -> b c h w').clone()\n\n        if seed == -1:\n            seed = random.randint(0, 65535)\n        seed_everything(seed)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        cond = {\"c_concat\": [control], \"c_crossattn\": [model.get_learned_conditioning([prompt + ', ' + a_prompt] * num_samples)]}\n        un_cond = {\"c_concat\": None if guess_mode else [control], \"c_crossattn\": [model.get_learned_conditioning([n_prompt] * num_samples)]}\n        shape = (4, H // 8, W // 8)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=True)\n\n        model.control_scales = [strength * (0.825 ** float(12 - i)) for i in range(13)] if guess_mode else ([strength] * 13)  # Magic number. IDK why. Perhaps because 0.825**12<0.01 but 0.826**12>0.01\n        samples, intermediates = ddim_sampler.sample(ddim_steps, num_samples,\n                                                     shape, cond, verbose=False, eta=eta,\n                                                     unconditional_guidance_scale=scale,\n                                                     unconditional_conditioning=un_cond)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        x_samples = model.decode_first_stage(samples)\n        x_samples = (einops.rearrange(x_samples, 'b c h w -> b h w c') * 127.5 + 127.5).cpu().numpy().clip(0, 255).astype(np.uint8)\n\n        results = [x_samples[i] for i in range(num_samples)]\n    return [255 - cv2.dilate(detected_map, np.ones(shape=(3, 3), dtype=np.uint8), iterations=1)] + results\n\n\nblock = gr.Blocks().queue()\nwith block:\n    with gr.Row():\n        gr.Markdown(\"## Control Stable Diffusion with Hough Line Maps\")\n    with gr.Row():\n        with gr.Column():\n            input_image = gr.Image(source='upload', type=\"numpy\")\n            prompt = gr.Textbox(label=\"Prompt\")\n            run_button = gr.Button(label=\"Run\")\n            with gr.Accordion(\"Advanced options\", open=False):\n                num_samples = gr.Slider(label=\"Images\", minimum=1, maximum=12, value=1, step=1)\n                image_resolution = gr.Slider(label=\"Image Resolution\", minimum=256, maximum=768, value=512, step=64)\n                strength = gr.Slider(label=\"Control Strength\", minimum=0.0, maximum=2.0, value=1.0, step=0.01)\n                guess_mode = gr.Checkbox(label='Guess Mode', value=False)\n                detect_resolution = gr.Slider(label=\"Hough Resolution\", minimum=128, maximum=1024, value=512, step=1)\n                value_threshold = gr.Slider(label=\"Hough value threshold (MLSD)\", minimum=0.01, maximum=2.0, value=0.1, step=0.01)\n                distance_threshold = gr.Slider(label=\"Hough distance threshold (MLSD)\", minimum=0.01, maximum=20.0, value=0.1, step=0.01)\n                ddim_steps = gr.Slider(label=\"Steps\", minimum=1, maximum=100, value=20, step=1)\n                scale = gr.Slider(label=\"Guidance Scale\", minimum=0.1, maximum=30.0, value=9.0, step=0.1)\n                seed = gr.Slider(label=\"Seed\", minimum=-1, maximum=2147483647, step=1, randomize=True)\n                eta = gr.Number(label=\"eta (DDIM)\", value=0.0)\n                a_prompt = gr.Textbox(label=\"Added Prompt\", value='best quality, extremely detailed')\n                n_prompt = gr.Textbox(label=\"Negative Prompt\",\n                                      value='longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality')\n        with gr.Column():\n            result_gallery = gr.Gallery(label='Output', show_label=False, elem_id=\"gallery\").style(grid=2, height='auto')\n    ips = [input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, detect_resolution, ddim_steps, guess_mode, strength, scale, seed, eta, value_threshold, distance_threshold]\n    run_button.click(fn=process, inputs=ips, outputs=[result_gallery])\n\n\nblock.launch(server_name='0.0.0.0')\n"
        },
        {
          "name": "gradio_normal2image.py",
          "type": "blob",
          "size": 4.9326171875,
          "content": "from share import *\nimport config\n\nimport cv2\nimport einops\nimport gradio as gr\nimport numpy as np\nimport torch\nimport random\n\nfrom pytorch_lightning import seed_everything\nfrom annotator.util import resize_image, HWC3\nfrom annotator.midas import MidasDetector\nfrom cldm.model import create_model, load_state_dict\nfrom cldm.ddim_hacked import DDIMSampler\n\n\napply_midas = MidasDetector()\n\nmodel = create_model('./models/cldm_v15.yaml').cpu()\nmodel.load_state_dict(load_state_dict('./models/control_sd15_normal.pth', location='cuda'))\nmodel = model.cuda()\nddim_sampler = DDIMSampler(model)\n\n\ndef process(input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, detect_resolution, ddim_steps, guess_mode, strength, scale, seed, eta, bg_threshold):\n    with torch.no_grad():\n        input_image = HWC3(input_image)\n        _, detected_map = apply_midas(resize_image(input_image, detect_resolution), bg_th=bg_threshold)\n        detected_map = HWC3(detected_map)\n        img = resize_image(input_image, image_resolution)\n        H, W, C = img.shape\n\n        detected_map = cv2.resize(detected_map, (W, H), interpolation=cv2.INTER_LINEAR)\n\n        control = torch.from_numpy(detected_map[:, :, ::-1].copy()).float().cuda() / 255.0\n        control = torch.stack([control for _ in range(num_samples)], dim=0)\n        control = einops.rearrange(control, 'b h w c -> b c h w').clone()\n\n        if seed == -1:\n            seed = random.randint(0, 65535)\n        seed_everything(seed)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        cond = {\"c_concat\": [control], \"c_crossattn\": [model.get_learned_conditioning([prompt + ', ' + a_prompt] * num_samples)]}\n        un_cond = {\"c_concat\": None if guess_mode else [control], \"c_crossattn\": [model.get_learned_conditioning([n_prompt] * num_samples)]}\n        shape = (4, H // 8, W // 8)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=True)\n\n        model.control_scales = [strength * (0.825 ** float(12 - i)) for i in range(13)] if guess_mode else ([strength] * 13)  # Magic number. IDK why. Perhaps because 0.825**12<0.01 but 0.826**12>0.01\n        samples, intermediates = ddim_sampler.sample(ddim_steps, num_samples,\n                                                     shape, cond, verbose=False, eta=eta,\n                                                     unconditional_guidance_scale=scale,\n                                                     unconditional_conditioning=un_cond)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        x_samples = model.decode_first_stage(samples)\n        x_samples = (einops.rearrange(x_samples, 'b c h w -> b h w c') * 127.5 + 127.5).cpu().numpy().clip(0, 255).astype(np.uint8)\n\n        results = [x_samples[i] for i in range(num_samples)]\n    return [detected_map] + results\n\n\nblock = gr.Blocks().queue()\nwith block:\n    with gr.Row():\n        gr.Markdown(\"## Control Stable Diffusion with Normal Maps\")\n    with gr.Row():\n        with gr.Column():\n            input_image = gr.Image(source='upload', type=\"numpy\")\n            prompt = gr.Textbox(label=\"Prompt\")\n            run_button = gr.Button(label=\"Run\")\n            with gr.Accordion(\"Advanced options\", open=False):\n                num_samples = gr.Slider(label=\"Images\", minimum=1, maximum=12, value=1, step=1)\n                image_resolution = gr.Slider(label=\"Image Resolution\", minimum=256, maximum=768, value=512, step=64)\n                strength = gr.Slider(label=\"Control Strength\", minimum=0.0, maximum=2.0, value=1.0, step=0.01)\n                guess_mode = gr.Checkbox(label='Guess Mode', value=False)\n                detect_resolution = gr.Slider(label=\"Normal Resolution\", minimum=128, maximum=1024, value=384, step=1)\n                bg_threshold = gr.Slider(label=\"Normal background threshold\", minimum=0.0, maximum=1.0, value=0.4, step=0.01)\n                ddim_steps = gr.Slider(label=\"Steps\", minimum=1, maximum=100, value=20, step=1)\n                scale = gr.Slider(label=\"Guidance Scale\", minimum=0.1, maximum=30.0, value=9.0, step=0.1)\n                seed = gr.Slider(label=\"Seed\", minimum=-1, maximum=2147483647, step=1, randomize=True)\n                eta = gr.Number(label=\"eta (DDIM)\", value=0.0)\n                a_prompt = gr.Textbox(label=\"Added Prompt\", value='best quality, extremely detailed')\n                n_prompt = gr.Textbox(label=\"Negative Prompt\",\n                                      value='longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality')\n        with gr.Column():\n            result_gallery = gr.Gallery(label='Output', show_label=False, elem_id=\"gallery\").style(grid=2, height='auto')\n    ips = [input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, detect_resolution, ddim_steps, guess_mode, strength, scale, seed, eta, bg_threshold]\n    run_button.click(fn=process, inputs=ips, outputs=[result_gallery])\n\n\nblock.launch(server_name='0.0.0.0')\n"
        },
        {
          "name": "gradio_pose2image.py",
          "type": "blob",
          "size": 4.76953125,
          "content": "from share import *\nimport config\n\nimport cv2\nimport einops\nimport gradio as gr\nimport numpy as np\nimport torch\nimport random\n\nfrom pytorch_lightning import seed_everything\nfrom annotator.util import resize_image, HWC3\nfrom annotator.openpose import OpenposeDetector\nfrom cldm.model import create_model, load_state_dict\nfrom cldm.ddim_hacked import DDIMSampler\n\n\napply_openpose = OpenposeDetector()\n\nmodel = create_model('./models/cldm_v15.yaml').cpu()\nmodel.load_state_dict(load_state_dict('./models/control_sd15_openpose.pth', location='cuda'))\nmodel = model.cuda()\nddim_sampler = DDIMSampler(model)\n\n\ndef process(input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, detect_resolution, ddim_steps, guess_mode, strength, scale, seed, eta):\n    with torch.no_grad():\n        input_image = HWC3(input_image)\n        detected_map, _ = apply_openpose(resize_image(input_image, detect_resolution))\n        detected_map = HWC3(detected_map)\n        img = resize_image(input_image, image_resolution)\n        H, W, C = img.shape\n\n        detected_map = cv2.resize(detected_map, (W, H), interpolation=cv2.INTER_NEAREST)\n\n        control = torch.from_numpy(detected_map.copy()).float().cuda() / 255.0\n        control = torch.stack([control for _ in range(num_samples)], dim=0)\n        control = einops.rearrange(control, 'b h w c -> b c h w').clone()\n\n        if seed == -1:\n            seed = random.randint(0, 65535)\n        seed_everything(seed)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        cond = {\"c_concat\": [control], \"c_crossattn\": [model.get_learned_conditioning([prompt + ', ' + a_prompt] * num_samples)]}\n        un_cond = {\"c_concat\": None if guess_mode else [control], \"c_crossattn\": [model.get_learned_conditioning([n_prompt] * num_samples)]}\n        shape = (4, H // 8, W // 8)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=True)\n\n        model.control_scales = [strength * (0.825 ** float(12 - i)) for i in range(13)] if guess_mode else ([strength] * 13)  # Magic number. IDK why. Perhaps because 0.825**12<0.01 but 0.826**12>0.01\n        samples, intermediates = ddim_sampler.sample(ddim_steps, num_samples,\n                                                     shape, cond, verbose=False, eta=eta,\n                                                     unconditional_guidance_scale=scale,\n                                                     unconditional_conditioning=un_cond)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        x_samples = model.decode_first_stage(samples)\n        x_samples = (einops.rearrange(x_samples, 'b c h w -> b h w c') * 127.5 + 127.5).cpu().numpy().clip(0, 255).astype(np.uint8)\n\n        results = [x_samples[i] for i in range(num_samples)]\n    return [detected_map] + results\n\n\nblock = gr.Blocks().queue()\nwith block:\n    with gr.Row():\n        gr.Markdown(\"## Control Stable Diffusion with Human Pose\")\n    with gr.Row():\n        with gr.Column():\n            input_image = gr.Image(source='upload', type=\"numpy\")\n            prompt = gr.Textbox(label=\"Prompt\")\n            run_button = gr.Button(label=\"Run\")\n            with gr.Accordion(\"Advanced options\", open=False):\n                num_samples = gr.Slider(label=\"Images\", minimum=1, maximum=12, value=1, step=1)\n                image_resolution = gr.Slider(label=\"Image Resolution\", minimum=256, maximum=768, value=512, step=64)\n                strength = gr.Slider(label=\"Control Strength\", minimum=0.0, maximum=2.0, value=1.0, step=0.01)\n                guess_mode = gr.Checkbox(label='Guess Mode', value=False)\n                detect_resolution = gr.Slider(label=\"OpenPose Resolution\", minimum=128, maximum=1024, value=512, step=1)\n                ddim_steps = gr.Slider(label=\"Steps\", minimum=1, maximum=100, value=20, step=1)\n                scale = gr.Slider(label=\"Guidance Scale\", minimum=0.1, maximum=30.0, value=9.0, step=0.1)\n                seed = gr.Slider(label=\"Seed\", minimum=-1, maximum=2147483647, step=1, randomize=True)\n                eta = gr.Number(label=\"eta (DDIM)\", value=0.0)\n                a_prompt = gr.Textbox(label=\"Added Prompt\", value='best quality, extremely detailed')\n                n_prompt = gr.Textbox(label=\"Negative Prompt\",\n                                      value='longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality')\n        with gr.Column():\n            result_gallery = gr.Gallery(label='Output', show_label=False, elem_id=\"gallery\").style(grid=2, height='auto')\n    ips = [input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, detect_resolution, ddim_steps, guess_mode, strength, scale, seed, eta]\n    run_button.click(fn=process, inputs=ips, outputs=[result_gallery])\n\n\nblock.launch(server_name='0.0.0.0')\n"
        },
        {
          "name": "gradio_scribble2image.py",
          "type": "blob",
          "size": 4.4033203125,
          "content": "from share import *\nimport config\n\nimport cv2\nimport einops\nimport gradio as gr\nimport numpy as np\nimport torch\nimport random\n\nfrom pytorch_lightning import seed_everything\nfrom annotator.util import resize_image, HWC3\nfrom cldm.model import create_model, load_state_dict\nfrom cldm.ddim_hacked import DDIMSampler\n\n\nmodel = create_model('./models/cldm_v15.yaml').cpu()\nmodel.load_state_dict(load_state_dict('./models/control_sd15_scribble.pth', location='cuda'))\nmodel = model.cuda()\nddim_sampler = DDIMSampler(model)\n\n\ndef process(input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, ddim_steps, guess_mode, strength, scale, seed, eta):\n    with torch.no_grad():\n        img = resize_image(HWC3(input_image), image_resolution)\n        H, W, C = img.shape\n\n        detected_map = np.zeros_like(img, dtype=np.uint8)\n        detected_map[np.min(img, axis=2) < 127] = 255\n\n        control = torch.from_numpy(detected_map.copy()).float().cuda() / 255.0\n        control = torch.stack([control for _ in range(num_samples)], dim=0)\n        control = einops.rearrange(control, 'b h w c -> b c h w').clone()\n\n        if seed == -1:\n            seed = random.randint(0, 65535)\n        seed_everything(seed)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        cond = {\"c_concat\": [control], \"c_crossattn\": [model.get_learned_conditioning([prompt + ', ' + a_prompt] * num_samples)]}\n        un_cond = {\"c_concat\": None if guess_mode else [control], \"c_crossattn\": [model.get_learned_conditioning([n_prompt] * num_samples)]}\n        shape = (4, H // 8, W // 8)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=True)\n\n        model.control_scales = [strength * (0.825 ** float(12 - i)) for i in range(13)] if guess_mode else ([strength] * 13)  # Magic number. IDK why. Perhaps because 0.825**12<0.01 but 0.826**12>0.01\n        samples, intermediates = ddim_sampler.sample(ddim_steps, num_samples,\n                                                     shape, cond, verbose=False, eta=eta,\n                                                     unconditional_guidance_scale=scale,\n                                                     unconditional_conditioning=un_cond)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        x_samples = model.decode_first_stage(samples)\n        x_samples = (einops.rearrange(x_samples, 'b c h w -> b h w c') * 127.5 + 127.5).cpu().numpy().clip(0, 255).astype(np.uint8)\n\n        results = [x_samples[i] for i in range(num_samples)]\n    return [255 - detected_map] + results\n\n\nblock = gr.Blocks().queue()\nwith block:\n    with gr.Row():\n        gr.Markdown(\"## Control Stable Diffusion with Scribble Maps\")\n    with gr.Row():\n        with gr.Column():\n            input_image = gr.Image(source='upload', type=\"numpy\")\n            prompt = gr.Textbox(label=\"Prompt\")\n            run_button = gr.Button(label=\"Run\")\n            with gr.Accordion(\"Advanced options\", open=False):\n                num_samples = gr.Slider(label=\"Images\", minimum=1, maximum=12, value=1, step=1)\n                image_resolution = gr.Slider(label=\"Image Resolution\", minimum=256, maximum=768, value=512, step=64)\n                strength = gr.Slider(label=\"Control Strength\", minimum=0.0, maximum=2.0, value=1.0, step=0.01)\n                guess_mode = gr.Checkbox(label='Guess Mode', value=False)\n                ddim_steps = gr.Slider(label=\"Steps\", minimum=1, maximum=100, value=20, step=1)\n                scale = gr.Slider(label=\"Guidance Scale\", minimum=0.1, maximum=30.0, value=9.0, step=0.1)\n                seed = gr.Slider(label=\"Seed\", minimum=-1, maximum=2147483647, step=1, randomize=True)\n                eta = gr.Number(label=\"eta (DDIM)\", value=0.0)\n                a_prompt = gr.Textbox(label=\"Added Prompt\", value='best quality, extremely detailed')\n                n_prompt = gr.Textbox(label=\"Negative Prompt\",\n                                      value='longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality')\n        with gr.Column():\n            result_gallery = gr.Gallery(label='Output', show_label=False, elem_id=\"gallery\").style(grid=2, height='auto')\n    ips = [input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, ddim_steps, guess_mode, strength, scale, seed, eta]\n    run_button.click(fn=process, inputs=ips, outputs=[result_gallery])\n\n\nblock.launch(server_name='0.0.0.0')\n"
        },
        {
          "name": "gradio_scribble2image_interactive.py",
          "type": "blob",
          "size": 5.2080078125,
          "content": "from share import *\nimport config\n\nimport cv2\nimport einops\nimport gradio as gr\nimport numpy as np\nimport torch\nimport random\n\nfrom pytorch_lightning import seed_everything\nfrom annotator.util import resize_image, HWC3\nfrom cldm.model import create_model, load_state_dict\nfrom cldm.ddim_hacked import DDIMSampler\n\n\nmodel = create_model('./models/cldm_v15.yaml').cpu()\nmodel.load_state_dict(load_state_dict('./models/control_sd15_scribble.pth', location='cuda'))\nmodel = model.cuda()\nddim_sampler = DDIMSampler(model)\n\n\ndef process(input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, ddim_steps, guess_mode, strength, scale, seed, eta):\n    with torch.no_grad():\n        img = resize_image(HWC3(input_image['mask'][:, :, 0]), image_resolution)\n        H, W, C = img.shape\n\n        detected_map = np.zeros_like(img, dtype=np.uint8)\n        detected_map[np.min(img, axis=2) > 127] = 255\n\n        control = torch.from_numpy(detected_map.copy()).float().cuda() / 255.0\n        control = torch.stack([control for _ in range(num_samples)], dim=0)\n        control = einops.rearrange(control, 'b h w c -> b c h w').clone()\n\n        if seed == -1:\n            seed = random.randint(0, 65535)\n        seed_everything(seed)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        cond = {\"c_concat\": [control], \"c_crossattn\": [model.get_learned_conditioning([prompt + ', ' + a_prompt] * num_samples)]}\n        un_cond = {\"c_concat\": None if guess_mode else [control], \"c_crossattn\": [model.get_learned_conditioning([n_prompt] * num_samples)]}\n        shape = (4, H // 8, W // 8)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=True)\n\n        model.control_scales = [strength * (0.825 ** float(12 - i)) for i in range(13)] if guess_mode else ([strength] * 13)  # Magic number. IDK why. Perhaps because 0.825**12<0.01 but 0.826**12>0.01\n        samples, intermediates = ddim_sampler.sample(ddim_steps, num_samples,\n                                                     shape, cond, verbose=False, eta=eta,\n                                                     unconditional_guidance_scale=scale,\n                                                     unconditional_conditioning=un_cond)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        x_samples = model.decode_first_stage(samples)\n        x_samples = (einops.rearrange(x_samples, 'b c h w -> b h w c') * 127.5 + 127.5).cpu().numpy().clip(0, 255).astype(np.uint8)\n\n        results = [x_samples[i] for i in range(num_samples)]\n    return [255 - detected_map] + results\n\n\ndef create_canvas(w, h):\n    return np.zeros(shape=(h, w, 3), dtype=np.uint8) + 255\n\n\nblock = gr.Blocks().queue()\nwith block:\n    with gr.Row():\n        gr.Markdown(\"## Control Stable Diffusion with Interactive Scribbles\")\n    with gr.Row():\n        with gr.Column():\n            canvas_width = gr.Slider(label=\"Canvas Width\", minimum=256, maximum=1024, value=512, step=1)\n            canvas_height = gr.Slider(label=\"Canvas Height\", minimum=256, maximum=1024, value=512, step=1)\n            create_button = gr.Button(label=\"Start\", value='Open drawing canvas!')\n            input_image = gr.Image(source='upload', type='numpy', tool='sketch')\n            gr.Markdown(value='Do not forget to change your brush width to make it thinner. (Gradio do not allow developers to set brush width so you need to do it manually.) '\n                              'Just click on the small pencil icon in the upper right corner of the above block.')\n            create_button.click(fn=create_canvas, inputs=[canvas_width, canvas_height], outputs=[input_image])\n            prompt = gr.Textbox(label=\"Prompt\")\n            run_button = gr.Button(label=\"Run\")\n            with gr.Accordion(\"Advanced options\", open=False):\n                num_samples = gr.Slider(label=\"Images\", minimum=1, maximum=12, value=1, step=1)\n                image_resolution = gr.Slider(label=\"Image Resolution\", minimum=256, maximum=768, value=512, step=64)\n                strength = gr.Slider(label=\"Control Strength\", minimum=0.0, maximum=2.0, value=1.0, step=0.01)\n                guess_mode = gr.Checkbox(label='Guess Mode', value=False)\n                ddim_steps = gr.Slider(label=\"Steps\", minimum=1, maximum=100, value=20, step=1)\n                scale = gr.Slider(label=\"Guidance Scale\", minimum=0.1, maximum=30.0, value=9.0, step=0.1)\n                seed = gr.Slider(label=\"Seed\", minimum=-1, maximum=2147483647, step=1, randomize=True)\n                eta = gr.Number(label=\"eta (DDIM)\", value=0.0)\n                a_prompt = gr.Textbox(label=\"Added Prompt\", value='best quality, extremely detailed')\n                n_prompt = gr.Textbox(label=\"Negative Prompt\",\n                                      value='longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality')\n        with gr.Column():\n            result_gallery = gr.Gallery(label='Output', show_label=False, elem_id=\"gallery\").style(grid=2, height='auto')\n    ips = [input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, ddim_steps, guess_mode, strength, scale, seed, eta]\n    run_button.click(fn=process, inputs=ips, outputs=[result_gallery])\n\n\nblock.launch(server_name='0.0.0.0')\n"
        },
        {
          "name": "gradio_seg2image.py",
          "type": "blob",
          "size": 4.736328125,
          "content": "from share import *\nimport config\n\nimport cv2\nimport einops\nimport gradio as gr\nimport numpy as np\nimport torch\nimport random\n\nfrom pytorch_lightning import seed_everything\nfrom annotator.util import resize_image, HWC3\nfrom annotator.uniformer import UniformerDetector\nfrom cldm.model import create_model, load_state_dict\nfrom cldm.ddim_hacked import DDIMSampler\n\n\napply_uniformer = UniformerDetector()\n\nmodel = create_model('./models/cldm_v15.yaml').cpu()\nmodel.load_state_dict(load_state_dict('./models/control_sd15_seg.pth', location='cuda'))\nmodel = model.cuda()\nddim_sampler = DDIMSampler(model)\n\n\ndef process(input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, detect_resolution, ddim_steps, guess_mode, strength, scale, seed, eta):\n    with torch.no_grad():\n        input_image = HWC3(input_image)\n        detected_map = apply_uniformer(resize_image(input_image, detect_resolution))\n        img = resize_image(input_image, image_resolution)\n        H, W, C = img.shape\n\n        detected_map = cv2.resize(detected_map, (W, H), interpolation=cv2.INTER_NEAREST)\n\n        control = torch.from_numpy(detected_map.copy()).float().cuda() / 255.0\n        control = torch.stack([control for _ in range(num_samples)], dim=0)\n        control = einops.rearrange(control, 'b h w c -> b c h w').clone()\n\n        if seed == -1:\n            seed = random.randint(0, 65535)\n        seed_everything(seed)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        cond = {\"c_concat\": [control], \"c_crossattn\": [model.get_learned_conditioning([prompt + ', ' + a_prompt] * num_samples)]}\n        un_cond = {\"c_concat\": None if guess_mode else [control], \"c_crossattn\": [model.get_learned_conditioning([n_prompt] * num_samples)]}\n        shape = (4, H // 8, W // 8)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=True)\n\n        model.control_scales = [strength * (0.825 ** float(12 - i)) for i in range(13)] if guess_mode else ([strength] * 13)  # Magic number. IDK why. Perhaps because 0.825**12<0.01 but 0.826**12>0.01\n        samples, intermediates = ddim_sampler.sample(ddim_steps, num_samples,\n                                                     shape, cond, verbose=False, eta=eta,\n                                                     unconditional_guidance_scale=scale,\n                                                     unconditional_conditioning=un_cond)\n\n        if config.save_memory:\n            model.low_vram_shift(is_diffusing=False)\n\n        x_samples = model.decode_first_stage(samples)\n        x_samples = (einops.rearrange(x_samples, 'b c h w -> b h w c') * 127.5 + 127.5).cpu().numpy().clip(0, 255).astype(np.uint8)\n\n        results = [x_samples[i] for i in range(num_samples)]\n    return [detected_map] + results\n\n\nblock = gr.Blocks().queue()\nwith block:\n    with gr.Row():\n        gr.Markdown(\"## Control Stable Diffusion with Segmentation Maps\")\n    with gr.Row():\n        with gr.Column():\n            input_image = gr.Image(source='upload', type=\"numpy\")\n            prompt = gr.Textbox(label=\"Prompt\")\n            run_button = gr.Button(label=\"Run\")\n            with gr.Accordion(\"Advanced options\", open=False):\n                num_samples = gr.Slider(label=\"Images\", minimum=1, maximum=12, value=1, step=1)\n                image_resolution = gr.Slider(label=\"Image Resolution\", minimum=256, maximum=768, value=512, step=64)\n                strength = gr.Slider(label=\"Control Strength\", minimum=0.0, maximum=2.0, value=1.0, step=0.01)\n                guess_mode = gr.Checkbox(label='Guess Mode', value=False)\n                detect_resolution = gr.Slider(label=\"Segmentation Resolution\", minimum=128, maximum=1024, value=512, step=1)\n                ddim_steps = gr.Slider(label=\"Steps\", minimum=1, maximum=100, value=20, step=1)\n                scale = gr.Slider(label=\"Guidance Scale\", minimum=0.1, maximum=30.0, value=9.0, step=0.1)\n                seed = gr.Slider(label=\"Seed\", minimum=-1, maximum=2147483647, step=1, randomize=True)\n                eta = gr.Number(label=\"eta (DDIM)\", value=0.0)\n                a_prompt = gr.Textbox(label=\"Added Prompt\", value='best quality, extremely detailed')\n                n_prompt = gr.Textbox(label=\"Negative Prompt\",\n                                      value='longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality')\n        with gr.Column():\n            result_gallery = gr.Gallery(label='Output', show_label=False, elem_id=\"gallery\").style(grid=2, height='auto')\n    ips = [input_image, prompt, a_prompt, n_prompt, num_samples, image_resolution, detect_resolution, ddim_steps, guess_mode, strength, scale, seed, eta]\n    run_button.click(fn=process, inputs=ips, outputs=[result_gallery])\n\n\nblock.launch(server_name='0.0.0.0')\n"
        },
        {
          "name": "ldm",
          "type": "tree",
          "content": null
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "share.py",
          "type": "blob",
          "size": 0.1513671875,
          "content": "import config\nfrom cldm.hack import disable_verbosity, enable_sliced_attention\n\n\ndisable_verbosity()\n\nif config.save_memory:\n    enable_sliced_attention()\n"
        },
        {
          "name": "test_imgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "tool_add_control.py",
          "type": "blob",
          "size": 1.349609375,
          "content": "import sys\nimport os\n\nassert len(sys.argv) == 3, 'Args are wrong.'\n\ninput_path = sys.argv[1]\noutput_path = sys.argv[2]\n\nassert os.path.exists(input_path), 'Input model does not exist.'\nassert not os.path.exists(output_path), 'Output filename already exists.'\nassert os.path.exists(os.path.dirname(output_path)), 'Output path is not valid.'\n\nimport torch\nfrom share import *\nfrom cldm.model import create_model\n\n\ndef get_node_name(name, parent_name):\n    if len(name) <= len(parent_name):\n        return False, ''\n    p = name[:len(parent_name)]\n    if p != parent_name:\n        return False, ''\n    return True, name[len(parent_name):]\n\n\nmodel = create_model(config_path='./models/cldm_v15.yaml')\n\npretrained_weights = torch.load(input_path)\nif 'state_dict' in pretrained_weights:\n    pretrained_weights = pretrained_weights['state_dict']\n\nscratch_dict = model.state_dict()\n\ntarget_dict = {}\nfor k in scratch_dict.keys():\n    is_control, name = get_node_name(k, 'control_')\n    if is_control:\n        copy_k = 'model.diffusion_' + name\n    else:\n        copy_k = k\n    if copy_k in pretrained_weights:\n        target_dict[k] = pretrained_weights[copy_k].clone()\n    else:\n        target_dict[k] = scratch_dict[k].clone()\n        print(f'These weights are newly added: {k}')\n\nmodel.load_state_dict(target_dict, strict=True)\ntorch.save(model.state_dict(), output_path)\nprint('Done.')\n"
        },
        {
          "name": "tool_add_control_sd21.py",
          "type": "blob",
          "size": 1.349609375,
          "content": "import sys\nimport os\n\nassert len(sys.argv) == 3, 'Args are wrong.'\n\ninput_path = sys.argv[1]\noutput_path = sys.argv[2]\n\nassert os.path.exists(input_path), 'Input model does not exist.'\nassert not os.path.exists(output_path), 'Output filename already exists.'\nassert os.path.exists(os.path.dirname(output_path)), 'Output path is not valid.'\n\nimport torch\nfrom share import *\nfrom cldm.model import create_model\n\n\ndef get_node_name(name, parent_name):\n    if len(name) <= len(parent_name):\n        return False, ''\n    p = name[:len(parent_name)]\n    if p != parent_name:\n        return False, ''\n    return True, name[len(parent_name):]\n\n\nmodel = create_model(config_path='./models/cldm_v21.yaml')\n\npretrained_weights = torch.load(input_path)\nif 'state_dict' in pretrained_weights:\n    pretrained_weights = pretrained_weights['state_dict']\n\nscratch_dict = model.state_dict()\n\ntarget_dict = {}\nfor k in scratch_dict.keys():\n    is_control, name = get_node_name(k, 'control_')\n    if is_control:\n        copy_k = 'model.diffusion_' + name\n    else:\n        copy_k = k\n    if copy_k in pretrained_weights:\n        target_dict[k] = pretrained_weights[copy_k].clone()\n    else:\n        target_dict[k] = scratch_dict[k].clone()\n        print(f'These weights are newly added: {k}')\n\nmodel.load_state_dict(target_dict, strict=True)\ntorch.save(model.state_dict(), output_path)\nprint('Done.')\n"
        },
        {
          "name": "tool_transfer_control.py",
          "type": "blob",
          "size": 1.884765625,
          "content": "path_sd15 = './models/v1-5-pruned.ckpt'\npath_sd15_with_control = './models/control_sd15_openpose.pth'\npath_input = './models/anything-v3-full.safetensors'\npath_output = './models/control_any3_openpose.pth'\n\n\nimport os\n\n\nassert os.path.exists(path_sd15), 'Input path_sd15 does not exists!'\nassert os.path.exists(path_sd15_with_control), 'Input path_sd15_with_control does not exists!'\nassert os.path.exists(path_input), 'Input path_input does not exists!'\nassert os.path.exists(os.path.dirname(path_output)), 'Output folder not exists!'\n\n\nimport torch\nfrom share import *\nfrom cldm.model import load_state_dict\n\n\nsd15_state_dict = load_state_dict(path_sd15)\nsd15_with_control_state_dict = load_state_dict(path_sd15_with_control)\ninput_state_dict = load_state_dict(path_input)\n\n\ndef get_node_name(name, parent_name):\n    if len(name) <= len(parent_name):\n        return False, ''\n    p = name[:len(parent_name)]\n    if p != parent_name:\n        return False, ''\n    return True, name[len(parent_name):]\n\n\nkeys = sd15_with_control_state_dict.keys()\n\nfinal_state_dict = {}\nfor key in keys:\n    is_first_stage, _ = get_node_name(key, 'first_stage_model')\n    is_cond_stage, _ = get_node_name(key, 'cond_stage_model')\n    if is_first_stage or is_cond_stage:\n        final_state_dict[key] = input_state_dict[key]\n        continue\n    p = sd15_with_control_state_dict[key]\n    is_control, node_name = get_node_name(key, 'control_')\n    if is_control:\n        sd15_key_name = 'model.diffusion_' + node_name\n    else:\n        sd15_key_name = key\n    if sd15_key_name in input_state_dict:\n        p_new = p + input_state_dict[sd15_key_name] - sd15_state_dict[sd15_key_name]\n        # print(f'Offset clone from [{sd15_key_name}] to [{key}]')\n    else:\n        p_new = p\n        # print(f'Direct clone to [{key}]')\n    final_state_dict[key] = p_new\n\ntorch.save(final_state_dict, path_output)\nprint('Transferred model saved at ' + path_output)\n"
        },
        {
          "name": "tutorial_dataset.py",
          "type": "blob",
          "size": 1.0810546875,
          "content": "import json\nimport cv2\nimport numpy as np\n\nfrom torch.utils.data import Dataset\n\n\nclass MyDataset(Dataset):\n    def __init__(self):\n        self.data = []\n        with open('./training/fill50k/prompt.json', 'rt') as f:\n            for line in f:\n                self.data.append(json.loads(line))\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, idx):\n        item = self.data[idx]\n\n        source_filename = item['source']\n        target_filename = item['target']\n        prompt = item['prompt']\n\n        source = cv2.imread('./training/fill50k/' + source_filename)\n        target = cv2.imread('./training/fill50k/' + target_filename)\n\n        # Do not forget that OpenCV read images in BGR order.\n        source = cv2.cvtColor(source, cv2.COLOR_BGR2RGB)\n        target = cv2.cvtColor(target, cv2.COLOR_BGR2RGB)\n\n        # Normalize source images to [0, 1].\n        source = source.astype(np.float32) / 255.0\n\n        # Normalize target images to [-1, 1].\n        target = (target.astype(np.float32) / 127.5) - 1.0\n\n        return dict(jpg=target, txt=prompt, hint=source)\n\n"
        },
        {
          "name": "tutorial_dataset_test.py",
          "type": "blob",
          "size": 0.201171875,
          "content": "from tutorial_dataset import MyDataset\n\ndataset = MyDataset()\nprint(len(dataset))\n\nitem = dataset[1234]\njpg = item['jpg']\ntxt = item['txt']\nhint = item['hint']\nprint(txt)\nprint(jpg.shape)\nprint(hint.shape)\n"
        },
        {
          "name": "tutorial_train.py",
          "type": "blob",
          "size": 0.9384765625,
          "content": "from share import *\n\nimport pytorch_lightning as pl\nfrom torch.utils.data import DataLoader\nfrom tutorial_dataset import MyDataset\nfrom cldm.logger import ImageLogger\nfrom cldm.model import create_model, load_state_dict\n\n\n# Configs\nresume_path = './models/control_sd15_ini.ckpt'\nbatch_size = 4\nlogger_freq = 300\nlearning_rate = 1e-5\nsd_locked = True\nonly_mid_control = False\n\n\n# First use cpu to load models. Pytorch Lightning will automatically move it to GPUs.\nmodel = create_model('./models/cldm_v15.yaml').cpu()\nmodel.load_state_dict(load_state_dict(resume_path, location='cpu'))\nmodel.learning_rate = learning_rate\nmodel.sd_locked = sd_locked\nmodel.only_mid_control = only_mid_control\n\n\n# Misc\ndataset = MyDataset()\ndataloader = DataLoader(dataset, num_workers=0, batch_size=batch_size, shuffle=True)\nlogger = ImageLogger(batch_frequency=logger_freq)\ntrainer = pl.Trainer(gpus=1, precision=32, callbacks=[logger])\n\n\n# Train!\ntrainer.fit(model, dataloader)\n"
        },
        {
          "name": "tutorial_train_sd21.py",
          "type": "blob",
          "size": 0.9384765625,
          "content": "from share import *\n\nimport pytorch_lightning as pl\nfrom torch.utils.data import DataLoader\nfrom tutorial_dataset import MyDataset\nfrom cldm.logger import ImageLogger\nfrom cldm.model import create_model, load_state_dict\n\n\n# Configs\nresume_path = './models/control_sd21_ini.ckpt'\nbatch_size = 4\nlogger_freq = 300\nlearning_rate = 1e-5\nsd_locked = True\nonly_mid_control = False\n\n\n# First use cpu to load models. Pytorch Lightning will automatically move it to GPUs.\nmodel = create_model('./models/cldm_v21.yaml').cpu()\nmodel.load_state_dict(load_state_dict(resume_path, location='cpu'))\nmodel.learning_rate = learning_rate\nmodel.sd_locked = sd_locked\nmodel.only_mid_control = only_mid_control\n\n\n# Misc\ndataset = MyDataset()\ndataloader = DataLoader(dataset, num_workers=0, batch_size=batch_size, shuffle=True)\nlogger = ImageLogger(batch_frequency=logger_freq)\ntrainer = pl.Trainer(gpus=1, precision=32, callbacks=[logger])\n\n\n# Train!\ntrainer.fit(model, dataloader)\n"
        }
      ]
    }
  ]
}