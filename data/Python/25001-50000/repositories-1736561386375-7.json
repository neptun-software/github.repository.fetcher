{
  "metadata": {
    "timestamp": 1736561386375,
    "page": 7,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Asabeneh/30-Days-Of-Python",
      "stars": 43820,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2783203125,
          "content": "readme-draft.md\nreadme13-18.md\nreadme19-24.md\nreadme25-30.md\nplayground.py\nres.py\nhello.py\nbackup.md\n.DS_Store\n__pycache__\nplayground/\nplayground\nflask_project/venv\nflask_project/ven/bin/\nflask_project/venv/include/\nflask_project/ven/lib\nnumpy.ipynb\n.ipynb_checkpoints\n.vscode/\ntest.py"
        },
        {
          "name": "01_Day_Introduction",
          "type": "tree",
          "content": null
        },
        {
          "name": "02_Day_Variables_builtin_functions",
          "type": "tree",
          "content": null
        },
        {
          "name": "03_Day_Operators",
          "type": "tree",
          "content": null
        },
        {
          "name": "04_Day_Strings",
          "type": "tree",
          "content": null
        },
        {
          "name": "05_Day_Lists",
          "type": "tree",
          "content": null
        },
        {
          "name": "06_Day_Tuples",
          "type": "tree",
          "content": null
        },
        {
          "name": "07_Day_Sets",
          "type": "tree",
          "content": null
        },
        {
          "name": "08_Day_Dictionaries",
          "type": "tree",
          "content": null
        },
        {
          "name": "09_Day_Conditionals",
          "type": "tree",
          "content": null
        },
        {
          "name": "10_Day_Loops",
          "type": "tree",
          "content": null
        },
        {
          "name": "11_Day_Functions",
          "type": "tree",
          "content": null
        },
        {
          "name": "12_Day_Modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "13_Day_List_comprehension",
          "type": "tree",
          "content": null
        },
        {
          "name": "14_Day_Higher_order_functions",
          "type": "tree",
          "content": null
        },
        {
          "name": "15_Day_Python_type_errors",
          "type": "tree",
          "content": null
        },
        {
          "name": "16_Day_Python_date_time",
          "type": "tree",
          "content": null
        },
        {
          "name": "17_Day_Exception_handling",
          "type": "tree",
          "content": null
        },
        {
          "name": "18_Day_Regular_expressions",
          "type": "tree",
          "content": null
        },
        {
          "name": "19_Day_File_handling",
          "type": "tree",
          "content": null
        },
        {
          "name": "20_Day_Python_package_manager",
          "type": "tree",
          "content": null
        },
        {
          "name": "21_Day_Classes_and_objects",
          "type": "tree",
          "content": null
        },
        {
          "name": "22_Day_Web_scraping",
          "type": "tree",
          "content": null
        },
        {
          "name": "23_Day_Virtual_environment",
          "type": "tree",
          "content": null
        },
        {
          "name": "24_Day_Statistics",
          "type": "tree",
          "content": null
        },
        {
          "name": "25_Day_Pandas",
          "type": "tree",
          "content": null
        },
        {
          "name": "26_Day_Python_web",
          "type": "tree",
          "content": null
        },
        {
          "name": "27_Day_Python_with_mongodb",
          "type": "tree",
          "content": null
        },
        {
          "name": "28_Day_API",
          "type": "tree",
          "content": null
        },
        {
          "name": "29_Day_Building_API",
          "type": "tree",
          "content": null
        },
        {
          "name": "30_Day_Conclusions",
          "type": "tree",
          "content": null
        },
        {
          "name": "Chinese",
          "type": "tree",
          "content": null
        },
        {
          "name": "Korean",
          "type": "tree",
          "content": null
        },
        {
          "name": "Portuguese",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "files",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "korean",
          "type": "tree",
          "content": null
        },
        {
          "name": "mymodule.py",
          "type": "blob",
          "size": 0.3017578125,
          "content": "def generate_full_name(firstname, lastname):\n      space = ' '\n      fullname = firstname + space + lastname\n      return fullname\n\ndef sum_two_nums (num1, num2):\n    return num1 + num2\ngravity = 9.81\nperson = {\n    \"firstname\": \"Asabeneh\",\n    \"age\": 250,\n    \"country\": \"Finland\",\n    \"city\":'Helsinki'\n}\n\n\n"
        },
        {
          "name": "mypackage",
          "type": "tree",
          "content": null
        },
        {
          "name": "numpy.md",
          "type": "blob",
          "size": 28.888671875,
          "content": "- [📘 Day 24](#-day-24)\n  - [Python for Statistical Analysis](#python-for-statistical-analysis)\n  - [Statistics](#statistics)\n  - [Data](#data)\n  - [Statistics Module](#statistics-module)\n- [NumPy](#numpy)\n  - [Importing NumPy](#importing-numpy)\n  - [Creating numpy array using](#creating-numpy-array-using)\n    - [Creating int numpy arrays](#creating-int-numpy-arrays)\n    - [Creating float numpy arrays](#creating-float-numpy-arrays)\n    - [Creating boolean numpy arrays](#creating-boolean-numpy-arrays)\n    - [Creating multidimensional array using numpy](#creating-multidimensional-array-using-numpy)\n    - [Converting numpy array to list](#converting-numpy-array-to-list)\n    - [Creating numpy array from tuple](#creating-numpy-array-from-tuple)\n    - [Shape of numpy array](#shape-of-numpy-array)\n    - [Data type of numpy array](#data-type-of-numpy-array)\n    - [Size of a numpy array](#size-of-a-numpy-array)\n  - [Mathematical Operation using numpy](#mathematical-operation-using-numpy)\n    - [Addition](#addition)\n    - [Subtraction](#subtraction)\n    - [Multiplication](#multiplication)\n    - [Division](#division)\n    - [Modulus](#modulus)\n    - [Floor Division](#floor-division)\n    - [Exponential](#exponential)\n  - [Checking data types](#checking-data-types)\n    - [Converting types](#converting-types)\n  - [Multi-dimensional Arrays](#multi-dimensional-arrays)\n    - [Getting items from a numpy array](#getting-items-from-a-numpy-array)\n  - [Slicing Numpy array](#slicing-numpy-array)\n    - [How to reverse the rows and the whole array?](#how-to-reverse-the-rows-and-the-whole-array)\n    - [Reverse the row and column positions](#reverse-the-row-and-column-positions)\n  - [How to represent missing values ?](#how-to-represent-missing-values-)\n      - [Generating Random Numbers](#generating-random-numbers)\n    - [Generationg random numbers](#generationg-random-numbers)\n  - [Numpy and Statistics](#numpy-and-statistics)\n    - [Matrix in numpy](#matrix-in-numpy)\n    - [Numpy numpy.arange()](#numpy-numpyarange)\n      - [What is Arrange?](#what-is-arrange)\n    - [Creating sequence of numbers using linspace](#creating-sequence-of-numbers-using-linspace)\n    - [NumPy Statistical Functions with Example](#numpy-statistical-functions-with-example)\n    - [How to create repeating sequences?](#how-to-create-repeating-sequences)\n    - [How to generate random numbers?](#how-to-generate-random-numbers)\n    - [Linear Algebra](#linear-algebra)\n    - [NumPy Matrix Multiplication with np.matmul()](#numpy-matrix-multiplication-with-npmatmul)\n- [Summery](#summery)\n  - [💻 Exercises: Day 24](#-exercises-day-24)\n\n# 📘 Day 24\n\n## Python for Statistical Analysis\n\n## Statistics\n\nStatistics is the discipline that studies the _collection_, _organization_, _displaying_, _analysis_, _interpretation_ and _presentation_ of data.\nStatistics is a branch of mathematics that is recommended to be a prerequisite for data science and machine learning. Statistics is a very broad field but we will focus in this section only on the most relevant part.\nAfter completing this challenge, you may go to web development, data analysis, machine learning and data science path. Whatever path you may follow, at some point in your career you will get data which you may work on. Having some statistical knowledge will help you to make decision based on data, _data tells as they say_.\n\n## Data\n\nWhat is data? Data is any set of characters that is gathered and translated for some purpose, usually analysis. It can be any character, including text and numbers, pictures, sound, or video. If data is not put into context, it doesn't give any sense to a human or computer. To make sense from data we need to work on the data using different tools.\n\nThe work flow of data analysis, data science or machine learning starts from data. Data can be provided from some data source or it can be created. There are structured and and unstructure data.\n\nData can be found as small or big data format. Most of the data types we will get have been covered in the file handling section.\n\n## Statistics Module\n\nThe python _statistics_ module provides functions for calculating mathematical statistics of numeric data. The module is not intended to be a competitor to third-party libraries such as NumPy, SciPy, or proprietary full-featured statistics packages aimed at professional statisticians such as Minitab, SAS and Matlab. It is aimed at the level of graphing and scientific calculators.\n\n# NumPy\n\nIn the first section we defined python as a great general-purpose programming language on its own, but with the help of other popular libraries (numpy, scipy, matplotlib, pandas etc) it becomes a powerful environment for scientific computing.\n\nNumpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with arrays.\n\nSo far, we have been using vscode but from now on I would recommend using Jupyter Notebook. To access jupter notebook let's install [anaconda](https://www.anaconda.com/). If you are using anaconda most of the common packages are included and you don't have install packages if you installed anaconda.\n\n```sh\nasabeneh@Asabeneh:~/Desktop/30DaysOfPython$ pip install numpy\n```\n\n## Importing NumPy\n\nJupyter notebook is available if your are in favor of [jupyter notebook](https://github.com/Asabeneh/data-science-for-everyone/blob/master/numpy/numpy.ipynb)\n\n```py\n    # How to import numpy\n    import numpy as np\n    # How to check the version of the numpy package\n    print('numpy:', np.__version__)\n    # Checking the available methods\n    print(dir(np))\n```\n\n## Creating numpy array using\n\n### Creating int numpy arrays\n\n```py\n    # Creating python List\n    python_list = [1,2,3,4,5]\n\n    # Checking data types\n    print('Type:', type (python_list)) # <class 'list'>\n    #\n    print(python_list) # [1, 2, 3, 4, 5]\n\n    two_dimensional_list = [[0,1,2], [3,4,5], [6,7,8]]\n\n    print(two_dimensional_list)  # [[0, 1, 2], [3, 4, 5], [6, 7, 8]]\n\n    # Creating Numpy(Numerical Python) array from python list\n\n    numpy_array_from_list = np.array(python_list)\n    print(type (numpy_array_from_list))   # <class 'numpy.ndarray'>\n    print(numpy_array_from_list) # array([1, 2, 3, 4, 5])\n```\n\n### Creating float numpy arrays\n\nCreating a float numpy array from list with a float data type parameter\n\n```py\n    # Python list\n    python_list = [1,2,3,4,5]\n\n    numy_array_from_list2 = np.array(python_list, dtype=float)\n    print(numy_array_from_list2) # array([1., 2., 3., 4., 5.])\n```\n\n### Creating boolean numpy arrays\n\nCreating a boolean a numpy array from list\n\n```py\n    numpy_bool_array = np.array([0, 1, -1, 0, 0], dtype=bool)\n    print(numpy_bool_array) # array([False,  True,  True, False, False])\n```\n\n### Creating multidimensional array using numpy\n\nA numpy array may have one or multiple rows and columns\n\n```py\n    two_dimensional_list = [[0,1,2], [3,4,5], [6,7,8]]\n    numpy_two_dimensional_list = np.array(two_dimensional_list)\n    print(type (numpy_two_dimensional_list))\n    print(numpy_two_dimensional_list)\n```\n\n```sh\n    <class 'numpy.ndarray'>\n    [[0 1 2]\n     [3 4 5]\n     [6 7 8]]\n```\n\n### Converting numpy array to list\n\n```python\n# We can always convert an array back to a python list using tolist().\nnp_to_list = numpy_array_from_list.tolist()\nprint(type (np_to_list))\nprint('one dimensional array:', np_to_list)\nprint('two dimensional array: ', numpy_two_dimensional_list.tolist())\n```\n\n```sh\n    <class 'list'>\n    one dimensional array: [1, 2, 3, 4, 5]\n    two dimensional array:  [[0, 1, 2], [3, 4, 5], [6, 7, 8]]\n```\n\n### Creating numpy array from tuple\n\n```py\n# Numpy array from tuple\n# Creating tuple in Python\npython_tuple = (1,2,3,4,5)\nprint(type (python_tuple)) # <class 'tuple'>\nprint('python_tuple: ', python_tuple) # python_tuple:  (1, 2, 3, 4, 5)\n\nnumpy_array_from_tuple = np.array(python_tuple)\nprint(type (numpy_array_from_tuple)) # <class 'numpy.ndarray'>\nprint('numpy_array_from_tuple: ', numpy_array_from_tuple) # numpy_array_from_tuple:  [1 2 3 4 5]\n```\n\n### Shape of numpy array\n\nThe shape method provide the shape of the array as a tuple. The first is the row and the second is the column. If the array is just one dimensional it returns the size of the array.\n\n```py\n    nums = np.array([1, 2, 3, 4, 5])\n    print(nums)\n    print('shape of nums: ', nums.shape)\n    print(numpy_two_dimensional_list)\n    print('shape of numpy_two_dimensional_list: ', numpy_two_dimensional_list.shape)\n    three_by_four_array = np.array([[0, 1, 2, 3],\n        [4,5,6,7],\n        [8,9,10, 11]])\n    print(three_by_four_array.shape)\n```\n\n```sh\n    [1 2 3 4 5]\n    shape of nums:  (5,)\n    [[0 1 2]\n     [3 4 5]\n     [6 7 8]]\n    shape of numpy_two_dimensional_list:  (3, 3)\n    (3, 4)\n```\n\n### Data type of numpy array\n\nType of data types: str, int, float, complex, bool, list, None\n\n```py\nint_lists = [-3, -2, -1, 0, 1, 2,3]\nint_array = np.array(int_lists)\nfloat_array = np.array(int_lists, dtype=float)\n\nprint(int_array)\nprint(int_array.dtype)\nprint(float_array)\nprint(float_array.dtype)\n```\n\n```sh\n    [-3 -2 -1  0  1  2  3]\n    int64\n    [-3. -2. -1.  0.  1.  2.  3.]\n    float64\n```\n\n### Size of a numpy array\n\nIn numpy to know the number of items in a numpy array list we use size\n\n```py\nnumpy_array_from_list = np.array([1, 2, 3, 4, 5])\ntwo_dimensional_list = np.array([[0, 1, 2],\n                              [3, 4, 5],\n                              [6, 7, 8]])\n\nprint('The size:', numpy_array_from_list.size) # 5\nprint('The size:', two_dimensional_list.size)  # 3\n\n```\n\n```sh\n    The size: 5\n    The size: 9\n```\n\n## Mathematical Operation using numpy\n\nNumpy array is not like exactly like python list. To do mathematical operation in pyhton list we have to loop through the items but numpy can allow to do any mathematical operation without looping.\nMathematical Operation:\n\n- Addition (+)\n- Subtraction (-)\n- Multiplication (\\*)\n- Division (/)\n- Modules (%)\n- Floor Division(//)\n- Exponential(\\*\\*)\n\n### Addition\n\n```py\n# Mathematical Operation\n# Addition\nnumpy_array_from_list = np.array([1, 2, 3, 4, 5])\nprint('original array: ', numpy_array_from_list)\nten_plus_original = numpy_array_from_list  + 10\nprint(ten_plus_original)\n\n```\n\n```sh\n    original array:  [1 2 3 4 5]\n    [11 12 13 14 15]\n```\n\n### Subtraction\n\n```python\n# Subtraction\nnumpy_array_from_list = np.array([1, 2, 3, 4, 5])\nprint('original array: ', numpy_array_from_list)\nten_minus_original = numpy_array_from_list  - 10\nprint(ten_minus_original)\n```\n\n```sh\n    original array:  [1 2 3 4 5]\n    [-9 -8 -7 -6 -5]\n```\n\n### Multiplication\n\n```python\n# Multiplication\nnumpy_array_from_list = np.array([1, 2, 3, 4, 5])\nprint('original array: ', numpy_array_from_list)\nten_times_original = numpy_array_from_list * 10\nprint(ten_times_original)\n```\n\n```sh\n    original array:  [1 2 3 4 5]\n    [10 20 30 40 50]\n```\n\n### Division\n\n```python\n# Division\nnumpy_array_from_list = np.array([1, 2, 3, 4, 5])\nprint('original array: ', numpy_array_from_list)\nten_times_original = numpy_array_from_list / 10\nprint(ten_times_original)\n```\n\n```sh\n    original array:  [1 2 3 4 5]\n    [0.1 0.2 0.3 0.4 0.5]\n```\n\n### Modulus\n\n```python\n# Modulus; Finding the remainder\nnumpy_array_from_list = np.array([1, 2, 3, 4, 5])\nprint('original array: ', numpy_array_from_list)\nten_times_original = numpy_array_from_list % 3\nprint(ten_times_original)\n```\n\n```sh\n    original array:  [1 2 3 4 5]\n    [1 2 0 1 2]\n```\n\n### Floor Division\n\n```py\n# Floor division: the division result without the remainder\nnumpy_array_from_list = np.array([1, 2, 3, 4, 5])\nprint('original array: ', numpy_array_from_list)\nten_times_original = numpy_array_from_list // 10\nprint(ten_times_original)\n```\n\n### Exponential\n\n```py\n# Exponential is finding some number the power of another:\nnumpy_array_from_list = np.array([1, 2, 3, 4, 5])\nprint('original array: ', numpy_array_from_list)\nten_times_original = numpy_array_from_list  ** 2\nprint(ten_times_original)\n```\n\n```sh\n    original array:  [1 2 3 4 5]\n    [ 1  4  9 16 25]\n```\n\n## Checking data types\n\n```py\n#Int,  Float numbers\nnumpy_int_arr = np.array([1,2,3,4])\nnumpy_float_arr = np.array([1.1, 2.0,3.2])\nnumpy_bool_arr = np.array([-3, -2, 0, 1,2,3], dtype='bool')\n\nprint(numpy_int_arr.dtype)\nprint(numpy_float_arr.dtype)\nprint(numpy_bool_arr.dtype)\n```\n\n```sh\n    int64\n    float64\n    bool\n```\n\n### Converting types\n\nWe can convert the data types of numpy array\n\n1. Int to Float\n\n```py\nnumpy_int_arr = np.array([1,2,3,4], dtype = 'float')\nnumpy_int_arr\n```\n\n    array([1., 2., 3., 4.])\n\n2. Float to Int\n\n```py\nnumpy_int_arr = np.array([1., 2., 3., 4.], dtype = 'int')\nnumpy_int_arr\n```\n\n```sh\n    array([1, 2, 3, 4])\n```\n\n3. Int ot boolean\n\n```py\nnp.array([-3, -2, 0, 1,2,3], dtype='bool')\n\n```\n\n```sh\n    array([ True,  True, False,  True,  True,  True])\n```\n\n4. Int to str\n\n```py\nnumpy_float_list.astype('int').astype('str')\n```\n\n```sh\n    array(['1', '2', '3'], dtype='<U21')\n```\n\n## Multi-dimensional Arrays\n\n```py\n# 2 Dimension Array\ntwo_dimension_array = np.array([(1,2,3),(4,5,6), (7,8,9)])\nprint(type (two_dimension_array))\nprint(two_dimension_array)\nprint('Shape: ', two_dimension_array.shape)\nprint('Size:', two_dimension_array.size)\nprint('Data type:', two_dimension_array.dtype)\n```\n\n```sh\n    <class 'numpy.ndarray'>\n    [[1 2 3]\n     [4 5 6]\n     [7 8 9]]\n    Shape:  (3, 3)\n    Size: 9\n    Data type: int64\n```\n\n### Getting items from a numpy array\n\n```py\n# 2 Dimension Array\ntwo_dimension_array = np.array([[1,2,3],[4,5,6], [7,8,9]])\nfirst_row = two_dimension_array[0]\nsecond_row = two_dimension_array[1]\nthird_row = two_dimension_array[2]\nprint('First row:', first_row)\nprint('Second row:', second_row)\nprint('Third row: ', third_row)\n```\n\n```sh\n    First row: [1 2 3]\n    Second row: [4 5 6]\n    Third row:  [7 8 9]\n```\n\n```py\nfirst_column= two_dimension_array[:,0]\nsecond_column = two_dimension_array[:,1]\nthird_column = two_dimension_array[:,2]\nprint('First column:', first_column)\nprint('Second column:', second_column)\nprint('Third column: ', third_column)\nprint(two_dimension_array)\n\n```\n\n```sh\n    First column: [1 4 7]\n    Second column: [2 5 8]\n    Third column:  [3 6 9]\n    [[1 2 3]\n     [4 5 6]\n     [7 8 9]]\n```\n\n## Slicing Numpy array\n\nSlicing in numpy is similar to slicing in python list\n\n```py\ntwo_dimension_array = np.array([[1,2,3],[4,5,6], [7,8,9]])\nfirst_two_rows_and_columns = two_dimension_array[0:2, 0:2]\nprint(first_two_rows_and_columns)\n```\n\n```sh\n    [[1 2]\n     [4 5]]\n```\n\n### How to reverse the rows and the whole array?\n\n```py\ntwo_dimension_array[::]\n```\n\n```sh\n    array([[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]])\n```\n\n### Reverse the row and column positions\n\n```py\n    two_dimension_array = np.array([[1,2,3],[4,5,6], [7,8,9]])\n    two_dimension_array[::-1,::-1]\n```\n\n```sh\n    array([[9, 8, 7],\n           [6, 5, 4],\n           [3, 2, 1]])\n```\n\n## How to represent missing values ?\n\n```python\n    print(two_dimension_array)\n    two_dimension_array[1,1] = 55\n    two_dimension_array[1,2] =44\n    print(two_dimension_array)\n```\n\n```sh\n    [[1 2 3]\n     [4 5 6]\n     [7 8 9]]\n    [[ 1  2  3]\n     [ 4 55 44]\n     [ 7  8  9]]\n```\n\n```py\n    # Numpy Zeroes\n    # numpy.zeros(shape, dtype=float, order='C')\n    numpy_zeroes = np.zeros((3,3),dtype=int,order='C')\n    numpy_zeroes\n```\n\n```sh\n    array([[0, 0, 0],\n           [0, 0, 0],\n           [0, 0, 0]])\n```\n\n```py\n# Numpy Zeroes\nnumpy_ones = np.ones((3,3),dtype=int,order='C')\nprint(numpy_ones)\n```\n\n```sh\n    [[1 1 1]\n     [1 1 1]\n     [1 1 1]]\n```\n\n```py\ntwoes = numpy_ones * 2\n```\n\n```py\n# Reshape\n# numpy.reshape(), numpy.flatten()\nfirst_shape  = np.array([(1,2,3), (4,5,6)])\nprint(first_shape)\nreshaped = first_shape.reshape(3,2)\nprint(reshaped)\n\n```\n\n```sh\n    [[1 2 3]\n     [4 5 6]]\n    [[1 2]\n     [3 4]\n     [5 6]]\n```\n\n```py\nflattened = reshaped.flatten()\nflattened\n```\n\n```sh\n    array([1, 2, 3, 4, 5, 6])\n```\n\n```py\n    ## Horitzontal Stack\n    np_list_one = np.array([1,2,3])\n    np_list_two = np.array([4,5,6])\n\n    print(np_list_one + np_list_two)\n\n    print('Horizontal Append:', np.hstack((np_list_one, np_list_two)))\n```\n\n```sh\n    [5 7 9]\n    Horizontal Append: [1 2 3 4 5 6]\n```\n\n```py\n    ## Vertical Stack\n    print('Vertical Append:', np.vstack((np_list_one, np_list_two)))\n```\n\n```sh\n    Vertical Append: [[1 2 3]\n     [4 5 6]]\n```\n\n#### Generating Random Numbers\n\n```py\n    # Generate a random float  number\n    random_float = np.random.random()\n    random_float\n```\n\n```sh\n    0.018929887384753874\n```\n\n```py\n    # Generate a random float  number\n    random_floats = np.random.random(5)\n    random_floats\n```\n\n```sh\n    array([0.26392192, 0.35842215, 0.87908478, 0.41902195, 0.78926418])\n```\n\n```py\n    # Generating a random integers between 0 and 10\n\n    random_int = np.random.randint(0, 11)\n    random_int\n```\n\n```sh\n    4\n```\n\n```py\n    # Generating a random integers between 2 and 11, and creating a one row array\n    random_int = np.random.randint(2,10, size=4)\n    random_int\n```\n\n```sh\n    array([8, 8, 8, 2])\n```\n\n```py\n    # Generating a random integers between 0 and 10\n    random_int = np.random.randint(2,10, size=(3,3))\n    random_int\n```\n\n```sh\n    array([[3, 5, 3],\n           [7, 3, 6],\n           [2, 3, 3]])\n```\n\n### Generationg random numbers\n\n```py\n    # np.random.normal(mu, sigma, size)\n    normal_array = np.random.normal(79, 15, 80)\n    normal_array\n\n```\n\n```sh\n    array([ 89.49990595,  82.06056961, 107.21445842,  38.69307086,\n            47.85259157,  93.07381061,  76.40724259,  78.55675184,\n            72.17358173,  47.9888899 ,  65.10370622,  76.29696568,\n            95.58234254,  68.14897213,  38.75862686, 122.5587927 ,\n            67.0762565 ,  95.73990864,  81.97454563,  92.54264805,\n            59.37035153,  77.76828101,  52.30752166,  64.43109931,\n            62.63695351,  90.04616138,  75.70009094,  49.87586877,\n            80.22002414,  68.56708848,  76.27791052,  67.24343975,\n            81.86363935,  78.22703433, 102.85737041,  65.15700341,\n            84.87033426,  76.7569997 ,  64.61321853,  67.37244562,\n            74.4068773 ,  58.65119655,  71.66488727,  53.42458179,\n            70.26872028,  60.96588544,  83.56129414,  72.14255326,\n            81.00787609,  71.81264853,  72.64168853,  86.56608717,\n            94.94667321,  82.32676973,  70.5165446 ,  85.43061003,\n            72.45526212,  87.34681775,  87.69911217, 103.02831489,\n            75.28598596,  67.17806893,  92.41274447, 101.06662611,\n            87.70013935,  70.73980645,  46.40368207,  50.17947092,\n            61.75618542,  90.26191397,  78.63968639,  70.84550744,\n            88.91826581, 103.91474733,  66.3064638 ,  79.49726264,\n            70.81087439,  83.90130623,  87.58555972,  59.95462521])\n```\n\n## Numpy and Statistics\n\n```py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nplt.hist(normal_array, color=\"grey\", bins=50)\n```\n\n```sh\n    (array([2., 0., 0., 0., 1., 2., 2., 0., 2., 0., 0., 1., 2., 2., 1., 4., 3.,\n            4., 2., 7., 2., 2., 5., 4., 2., 4., 3., 2., 1., 5., 3., 0., 3., 2.,\n            1., 0., 0., 1., 3., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.]),\n     array([ 38.69307086,  40.37038529,  42.04769973,  43.72501417,\n             45.4023286 ,  47.07964304,  48.75695748,  50.43427191,\n             52.11158635,  53.78890079,  55.46621523,  57.14352966,\n             58.8208441 ,  60.49815854,  62.17547297,  63.85278741,\n             65.53010185,  67.20741628,  68.88473072,  70.56204516,\n             72.23935959,  73.91667403,  75.59398847,  77.27130291,\n             78.94861734,  80.62593178,  82.30324622,  83.98056065,\n             85.65787509,  87.33518953,  89.01250396,  90.6898184 ,\n             92.36713284,  94.04444727,  95.72176171,  97.39907615,\n             99.07639058, 100.75370502, 102.43101946, 104.1083339 ,\n            105.78564833, 107.46296277, 109.14027721, 110.81759164,\n            112.49490608, 114.17222052, 115.84953495, 117.52684939,\n            119.20416383, 120.88147826, 122.5587927 ]),\n     <a list of 50 Patch objects>)\n```\n\n### Matrix in numpy\n\n```py\n\nfour_by_four_matrix = np.matrix(np.ones((4,4), dtype=float))\n```\n\n```py\nfour_by_four_matrix\n```\n\n```sh\nmatrix([[1., 1., 1., 1.],\n            [1., 1., 1., 1.],\n            [1., 1., 1., 1.],\n            [1., 1., 1., 1.]])\n```\n\n```py\nnp.asarray(four_by_four_matrix)[2] = 2\nfour_by_four_matrix\n```\n\n```sh\n\nmatrix([[1., 1., 1., 1.],\n            [1., 1., 1., 1.],\n            [2., 2., 2., 2.],\n            [1., 1., 1., 1.]])\n```\n\n### Numpy numpy.arange()\n\n#### What is Arrange?\n\nSometimes, you want to create values that are evenly spaced within a defined interval. For instance, you want to create values from 1 to 10; you can use numpy.arange() function\n\n```py\n# creating list using range(starting, stop, step)\nlst = range(0, 11, 2)\nlst\n```\n\n```python\nrange(0, 11, 2)\n```\n\n```python\nfor l in lst:\n    print(l)\n```\n\n```sh 0\n    2\n    4\n    6\n    8\n    10\n```\n\n```py\n# Similar to range arange numpy.arange(start, stop, step)\nwhole_numbers = np.arange(0, 20, 1)\nwhole_numbers\n```\n\n```sh\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n           17, 18, 19])\n```\n\n```py\nnatural_numbers = np.arange(1, 20, 1)\nnatural_numbers\n```\n\n```py\nodd_numbers = np.arange(1, 20, 2)\nodd_numbers\n```\n\n```sh\n    array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19])\n```\n\n```py\neven_numbers = np.arange(2, 20, 2)\neven_numbers\n```\n\n```sh\n    array([ 2,  4,  6,  8, 10, 12, 14, 16, 18])\n```\n\n### Creating sequence of numbers using linspace\n\n```py\n# numpy.linspace()\n# numpy.logspace() in Python with Example\n# For instance, it can be used to create 10 values from 1 to 5 evenly spaced.\nnp.linspace(1.0, 5.0, num=10)\n```\n\n```sh\n    array([1.        , 1.44444444, 1.88888889, 2.33333333, 2.77777778,\n           3.22222222, 3.66666667, 4.11111111, 4.55555556, 5.        ])\n```\n\n```py\n# not to include the last value in the interval\nnp.linspace(1.0, 5.0, num=5, endpoint=False)\n```\n\n```\narray([1. , 1.8, 2.6, 3.4, 4.2])\n```\n\n```py\n# LogSpace\n# LogSpace returns even spaced numbers on a log scale. Logspace has the same parameters as np.linspace.\n\n# Syntax:\n\n# numpy.logspace(start, stop, num, endpoint)\n\nnp.logspace(2, 4.0, num=4)\n```\n\n```sh\n\narray([  100.        ,   464.15888336,  2154.43469003, 10000.        ])\n```\n\n```py\n# to check the size of an array\nx = np.array([1,2,3], dtype=np.complex128)\n```\n\n```py\nx\n```\n\n```sh\n    array([1.+0.j, 2.+0.j, 3.+0.j])\n```\n\n```py\nx.itemsize\n```\n\n```sh\n16\n```\n\n```py\n# indexing and Slicing NumPy Arrays in Python\nnp_list = np.array([(1,2,3), (4,5,6)])\nnp_list\n\n```\n\n```sh\n    array([[1, 2, 3],\n           [4, 5, 6]])\n```\n\n```py\nprint('First row: ', np_list[0])\nprint('Second row: ', np_list[1])\n\n```\n\n```sh\n\n    First row:  [1 2 3]\n    Second row:  [4 5 6]\n```\n\n```p\nprint('First column: ', np_list[:,0])\nprint('Second column: ', np_list[:,1])\nprint('Third column: ', np_list[:,2])\n\n```\n\n```sh\n    First column:  [1 4]\n    Second column:  [2 5]\n    Third column:  [3 6]\n```\n\n### NumPy Statistical Functions with Example\n\nNumPy has quite useful statistical functions for finding minimum, maximum, mean, median, percentile,standard deviation and variance, etc from the given elements in the array.\nThe functions are explained as follows −\nStatistical function\nNumpy is equipped with the robust statistical function as listed below\n\n- Numpy Functions\n  - Min np.min()\n  - Max np.max()\n  - Mean np.mean()\n  - Median np.median()\n  - Varience\n  - Percentile\n  - Standard deviation np.std()\n\n```python\nnp_normal_dis = np.random.normal(5, 0.5, 100)\nnp_normal_dis\n## min, max, mean, median, sd\nprint('min: ', two_dimension_array.min())\nprint('max: ', two_dimension_array.max())\nprint('mean: ',two_dimension_array.mean())\n# print('median: ', two_dimension_array.median())\nprint('sd: ', two_dimension_array.std())\n```\n\n    min:  1\n    max:  55\n    mean:  14.777777777777779\n    sd:  18.913709183069525\n\n```python\nmin:  1\nmax:  55\nmean:  14.777777777777779\nsd:  18.913709183069525\n```\n\n```python\nprint(two_dimension_array)\nprint('Column with minimum: ', np.amin(two_dimension_array,axis=0))\nprint('Column with maximum: ', np.amax(two_dimension_array,axis=0))\nprint('=== Row ==')\nprint('Row with minimum: ', np.amin(two_dimension_array,axis=1))\nprint('Row with maximum: ', np.amax(two_dimension_array,axis=1))\n```\n\n    [[ 1  2  3]\n     [ 4 55 44]\n     [ 7  8  9]]\n    Column with minimum:  [1 2 3]\n    Column with maximum:  [ 7 55 44]\n    === Row ==\n    Row with minimum:  [1 4 7]\n    Row with maximum:  [ 3 55  9]\n\n### How to create repeating sequences?\n\n```python\na = [1,2,3]\n\n# Repeat whole of 'a' two times\nprint('Tile:   ', np.tile(a, 2))\n\n# Repeat each element of 'a' two times\nprint('Repeat: ', np.repeat(a, 2))\n\n```\n\n    Tile:    [1 2 3 1 2 3]\n    Repeat:  [1 1 2 2 3 3]\n\n### How to generate random numbers?\n\n```python\n# One random number between [0,1)\none_random_num = np.random.random()\none_random_in = np.random\nprint(one_random_num)\n```\n\n    0.6149403282678213\n\n```python\n0.4763968133790438\n```\n\n    0.4763968133790438\n\n```python\n# Random numbers between [0,1) of shape 2,3\nr = np.random.random(size=[2,3])\nprint(r)\n```\n\n    [[0.13031737 0.4429537  0.1129527 ]\n     [0.76811539 0.88256594 0.6754075 ]]\n\n```python\nprint(np.random.choice(['a', 'e', 'i', 'o', 'u'], size=10))\n```\n\n    ['u' 'o' 'o' 'i' 'e' 'e' 'u' 'o' 'u' 'a']\n\n```python\n['i' 'u' 'e' 'o' 'a' 'i' 'e' 'u' 'o' 'i']\n```\n\n    ['iueoaieuoi']\n\n```python\n## Random numbers between [0, 1] of shape 2, 2\nrand = np.random.rand(2,2)\nrand\n```\n\n    array([[0.97992598, 0.79642484],\n           [0.65263629, 0.55763145]])\n\n```python\nrand2 = np.random.randn(2,2)\nrand2\n\n```\n\n    array([[ 1.65593322, -0.52326621],\n           [ 0.39071179, -2.03649407]])\n\n```python\n# Random integers between [0, 10) of shape 2,5\nrand_int = np.random.randint(0, 10, size=[5,3])\nrand_int\n```\n\n    array([[0, 7, 5],\n           [4, 1, 4],\n           [3, 5, 3],\n           [4, 3, 8],\n           [4, 6, 7]])\n\n```py\nfrom scipy import stats\nnp_normal_dis = np.random.normal(5, 0.5, 1000) # mean, standard deviation, number of samples\nnp_normal_dis\n## min, max, mean, median, sd\nprint('min: ', np.min(np_normal_dis))\nprint('max: ', np.max(np_normal_dis))\nprint('mean: ', np.mean(np_normal_dis))\nprint('median: ', np.median(np_normal_dis))\nprint('mode: ', stats.mode(np_normal_dis))\nprint('sd: ', np.std(np_normal_dis))\n```\n\n```sh\n\n    min:  3.557811005458804\n    max:  6.876317743643499\n    mean:  5.035832048106663\n    median:  5.020161980441937\n    mode:  ModeResult(mode=array([3.55781101]), count=array([1]))\n    sd:  0.489682424165213\n\n```\n\n```python\nplt.hist(np_normal_dis, color=\"grey\", bins=21)\nplt.show()\n```\n\n![png](test_files/test_121_0.png)\n\n```python\n# numpy.dot(): Dot Product in Python using Numpy\n# Dot Product\n# Numpy is powerful library for matrices computation. For instance, you can compute the dot product with np.dot\n\n# Syntax\n\n# numpy.dot(x, y, out=None)\n```\n\n### Linear Algebra\n\n1. Dot Product\n\n```python\n## Linear algebra\n### Dot product: product of two arrays\nf = np.array([1,2,3])\ng = np.array([4,5,3])\n### 1*4+2*5 + 3*6\nnp.dot(f, g)  # 23\n```\n\n### NumPy Matrix Multiplication with np.matmul()\n\n```python\n### Matmul: matruc product of two arrays\nh = [[1,2],[3,4]]\ni = [[5,6],[7,8]]\n### 1*5+2*7 = 19\nnp.matmul(h, i)\n```\n\n```sh\n    array([[19, 22],\n           [43, 50]])\n\n```\n\n```py\n## Determinant 2*2 matrix\n### 5*8-7*6np.linalg.det(i)\n```\n\n```python\nnp.linalg.det(i)\n```\n\n    -1.999999999999999\n\n```python\nZ = np.zeros((8,8))\nZ[1::2,::2] = 1\nZ[::2,1::2] = 1\n```\n\n```python\nZ\n```\n\n    array([[0., 1., 0., 1., 0., 1., 0., 1.],\n           [1., 0., 1., 0., 1., 0., 1., 0.],\n           [0., 1., 0., 1., 0., 1., 0., 1.],\n           [1., 0., 1., 0., 1., 0., 1., 0.],\n           [0., 1., 0., 1., 0., 1., 0., 1.],\n           [1., 0., 1., 0., 1., 0., 1., 0.],\n           [0., 1., 0., 1., 0., 1., 0., 1.],\n           [1., 0., 1., 0., 1., 0., 1., 0.]])\n\n```python\nnew_list = [ x + 2 for x in range(0, 11)]\n```\n\n```python\nnew_list\n```\n\n    [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n```python\n[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n```\n\n    [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n```python\nnp_arr = np.array(range(0, 11))\nnp_arr + 2\n```\n\narray([ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\nWe use linear equation for quatities which have linear relationship. Let's see the example below:\n\n```python\ntemp = np.array([1,2,3,4,5])\npressure = temp * 2 + 5\npressure\n```\n\narray([ 7, 9, 11, 13, 15])\n\n```python\nplt.plot(temp,pressure)\nplt.xlabel('Temperature in oC')\nplt.ylabel('Pressure in atm')\nplt.title('Temperature vs Pressure')\nplt.xticks(np.arange(0, 6, step=0.5))\nplt.show()\n```\n\n![png](test_files/test_141_0.png)\n\nTo draw the Gaussian normal distribution using numpy. As you can see below, the numpy can generate random numbers. To create random sample, we need the mean(mu), sigma(standard deviation), mumber of data points.\n\n```python\nmu = 28\nsigma = 15\nsamples = 100000\n\nx = np.random.normal(mu, sigma, samples)\nax = sns.distplot(x);\nax.set(xlabel=\"x\", ylabel='y')\nplt.show()\n```\n\n![png](test_files/test_143_0.png)\n\n# Summery\n\nTo summarise, the main differences with python lists are:\n\n1. Arrays support vectorised operations, while lists don’t.\n1. Once an array is created, you cannot change its size. You will have to create a new array or overwrite the existing one.\n1. Every array has one and only one dtype. All items in it should be of that dtype.\n1. An equivalent numpy array occupies much less space than a python list of lists.\n1. numpy arrays support boolean indexing.\n\n## 💻 Exercises: Day 24\n\n1. Repeat all the examples\n"
        },
        {
          "name": "numpy_files",
          "type": "tree",
          "content": null
        },
        {
          "name": "old_files",
          "type": "tree",
          "content": null
        },
        {
          "name": "python_for_web",
          "type": "tree",
          "content": null
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 21.138671875,
          "content": "# 🐍 30 Days Of Python\n\n  <strong>Learn with Asabeneh by joining the upcoming [<em>CODING BOOTCAMP</em>](https://docs.google.com/forms/d/e/1FAIpQLSf0oNIYR9XU1DCctfl-pY36KbWse-SQX5aQaUgetqSinFYnmQ/viewform) </strong>\n\n|# Day | Topics                                                    |\n|------|:---------------------------------------------------------:|\n| 01  |  [Introduction](./readme.md)|\n| 02  |  [Variables, Built-in Functions](./02_Day_Variables_builtin_functions/02_variables_builtin_functions.md)|\n| 03  |  [Operators](./03_Day_Operators/03_operators.md)|\n| 04  |  [Strings](./04_Day_Strings/04_strings.md)|\n| 05  |  [Lists](./05_Day_Lists/05_lists.md)|\n| 06  |  [Tuples](./06_Day_Tuples/06_tuples.md)|\n| 07  |  [Sets](./07_Day_Sets/07_sets.md)|\n| 08  |  [Dictionaries](./08_Day_Dictionaries/08_dictionaries.md)|\n| 09  |  [Conditionals](./09_Day_Conditionals/09_conditionals.md)|\n| 10  |  [Loops](./10_Day_Loops/10_loops.md)|\n| 11  |  [Functions](./11_Day_Functions/11_functions.md)|\n| 12  |  [Modules](./12_Day_Modules/12_modules.md)|\n| 13  |  [List Comprehension](./13_Day_List_comprehension/13_list_comprehension.md)|\n| 14  |  [Higher Order Functions](./14_Day_Higher_order_functions/14_higher_order_functions.md)|\n| 15  |  [Python Type Errors](./15_Day_Python_type_errors/15_python_type_errors.md)|\n| 16 |  [Python Date time](./16_Day_Python_date_time/16_python_datetime.md) |\n| 17 |  [Exception Handling](./17_Day_Exception_handling/17_exception_handling.md)|\n| 18 |  [Regular Expressions](./18_Day_Regular_expressions/18_regular_expressions.md)|\n| 19 |  [File Handling](./19_Day_File_handling/19_file_handling.md)|\n| 20 |  [Python Package Manager](./20_Day_Python_package_manager/20_python_package_manager.md)|\n| 21 |  [Classes and Objects](./21_Day_Classes_and_objects/21_classes_and_objects.md)|\n| 22 |  [Web Scraping](./22_Day_Web_scraping/22_web_scraping.md)|\n| 23 |  [Virtual Environment](./23_Day_Virtual_environment/23_virtual_environment.md)|\n| 24 |  [Statistics](./24_Day_Statistics/24_statistics.md)|\n| 25 |  [Pandas](./25_Day_Pandas/25_pandas.md)|\n| 26 |  [Python web](./26_Day_Python_web/26_python_web.md)|\n| 27 |  [Python with MongoDB](./27_Day_Python_with_mongodb/27_python_with_mongodb.md)|\n| 28 |  [API](./28_Day_API/28_API.md)|\n| 29 |  [Building API](./29_Day_Building_API/29_building_API.md)|\n| 30 |  [Conclusions](./30_Day_Conclusions/30_conclusions.md)|\n\n  <strong>Learn with Asabeneh by joining the upcoming [<em>CODING BOOTCAMP</em>](https://docs.google.com/forms/d/e/1FAIpQLSf0oNIYR9XU1DCctfl-pY36KbWse-SQX5aQaUgetqSinFYnmQ/viewform) </strong>\n\n🧡🧡🧡 HAPPY CODING 🧡🧡🧡\n\n<div>\n<small>Support the <strong>author</strong> to create more educational materials</small> <br />  \n<a href = \"https://www.paypal.me/asabeneh\"><img src='./images/paypal_lg.png' alt='Paypal Logo' style=\"width:10%\"/></a>\n</div>\n\n<div align=\"center\">\n  <h1> 30 Days Of Python: Day 1 - Introduction</h1>\n  <a class=\"header-badge\" target=\"_blank\" href=\"https://www.linkedin.com/in/asabeneh/\">\n  <img src=\"https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&logo=linkedin&style=social\">\n  </a>\n  <a class=\"header-badge\" target=\"_blank\" href=\"https://twitter.com/Asabeneh\">\n  <img alt=\"Twitter Follow\" src=\"https://img.shields.io/twitter/follow/asabeneh?style=social\">\n  </a>\n\n  <sub>Author:\n  <a href=\"https://www.linkedin.com/in/asabeneh/\" target=\"_blank\">Asabeneh Yetayeh</a><br>\n  <small> Second Edition: July, 2021</small>\n  </sub>\n</div>\n\n🇧🇷 [Portuguese](./Portuguese/README.md)\n🇨🇳 [中文](./Chinese/README.md)\n\n[Day 2 >>](./02_Day_Variables_builtin_functions/02_variables_builtin_functions.md)\n\n![30DaysOfPython](./images/30DaysOfPython_banner3@2x.png)\n\n- [🐍 30 Days Of Python](#-30-days-of-python)\n- [📘 Day 1](#-day-1)\n  - [Welcome](#welcome)\n  - [Introduction](#introduction)\n  - [Why Python ?](#why-python-)\n  - [Environment Setup](#environment-setup)\n    - [Installing Python](#installing-python)\n    - [Python Shell](#python-shell)\n    - [Installing Visual Studio Code](#installing-visual-studio-code)\n      - [How to use visual studio code](#how-to-use-visual-studio-code)\n  - [Basic Python](#basic-python)\n    - [Python Syntax](#python-syntax)\n    - [Python Indentation](#python-indentation)\n    - [Comments](#comments)\n    - [Data types](#data-types)\n      - [Number](#number)\n      - [String](#string)\n      - [Booleans](#booleans)\n      - [List](#list)\n      - [Dictionary](#dictionary)\n      - [Tuple](#tuple)\n      - [Set](#set)\n    - [Checking Data types](#checking-data-types)\n    - [Python File](#python-file)\n  - [💻 Exercises - Day 1](#-exercises---day-1)\n    - [Exercise: Level 1](#exercise-level-1)\n    - [Exercise: Level 2](#exercise-level-2)\n    - [Exercise: Level 3](#exercise-level-3)\n\n# 📘 Day 1\n\n## Welcome\n\n**Congratulations** for deciding to participate in a _30 days of Python_ programming challenge. In this challenge, you will learn everything you need to be a python programmer and the whole concept of programming. At the end of the challenge, you will get a _30DaysOfPython_ programming challenge certificate.\n\nIf you would like to actively engage in the challenge, you may join the [30DaysOfPython challenge](https://t.me/ThirtyDaysOfPython) telegram group.  \n\n## Introduction\n\nPython is a high-level programming language for general-purpose programming. It is an open source, interpreted, objected-oriented programming language. Python was created by a Dutch programmer, Guido van Rossum. The name of the Python programming language was derived from a British sketch comedy series, *Monty Python's Flying Circus*.  The first version was released on February 20, 1991. This 30 days of Python challenge will help you learn the latest version of Python, Python 3 step by step. The topics are broken down into 30 days, where each day contains several topics with easy-to-understand explanations, real-world examples, and many hands on exercises and projects.\n\nThis challenge is designed for beginners and professionals who want to learn python programming language. It may take 30 to 100 days to complete the challenge. People who actively participate in the telegram group have a high probability of completing the challenge.\n\nThis challenge is easy to read, written in conversational English, engaging, motivating and at the same time, it is very demanding. You need to allocate much time to finish this challenge. If you are a visual learner, you may get the video lesson on <a href=\"https://www.youtube.com/channel/UC7PNRuno1rzYPb1xLa4yktw\"> Washera</a> YouTube channel. You may start from [Python for Absolute Beginners video](https://youtu.be/OCCWZheOesI). Subscribe the channel, comment and ask questions on YouTube vidoes and be proactive, the author will eventually notice you.\n\nThe author likes to hear your opinion about the challenge, share the author by expressing your thoughts about the 30DaysOfPython challenge. You can leave your testimonial on this [link](https://testimonial-s3sw.onrender.com/)\n\n## Why Python ?\n\nIt is a programming language which is very close to human language and because of that, it is easy to learn and use.\nPython is used by various industries and companies (including Google). It has been used to develop web applications, desktop applications, system administration, and machine learning libraries. Python is a highly embraced language in the data science and machine learning community. I hope this is enough to convince you to start learning Python. Python is eating the world and you are killing it before it eats you.\n\n## Environment Setup\n\n### Installing Python\n\nTo run a python script you need to install python. Let's [download](https://www.python.org/) python.\nIf your are a windows user. Click the button encircled in red.\n\n[![installing on Windows](./images/installing_on_windows.png)](https://www.python.org/)\n\nIf you are a macOS user. Click the button encircled in red.\n\n[![installing on Windows](./images/installing_on_macOS.png)](https://www.python.org/)\n\nTo check if python is installed write the following command on your device terminal.\n\n```shell\npython --version\n```\n\n![Python Version](./images/python_versio.png)\n\nAs you can see from the terminal, I am using _Python 3.7.5_ version at the moment. Your version of Python might be different from mine by but it should be 3.6 or above. If you mange to see the python version, well done. Python has been installed on your machine. Continue to the next section.\n\n### Python Shell\n\nPython is an interpreted scripting language, so it does not need to be compiled. It means it executes the code line by line. Python comes with a _Python Shell (Python Interactive Shell)_. It is used to execute a single python command and get the result.\n\nPython Shell waits for the Python code from the user. When you enter the code, it interprets the code and shows the result in the next line.\nOpen your terminal or command prompt(cmd) and write:\n\n```shell\npython\n```\n\n![Python Scripting Shell](./images/opening_python_shell.png)\n\nThe Python interactive shell is opened and it is waiting for you to write Python code(Python script). You will write your Python script next to this symbol >>> and then click Enter.\nLet us write our very first script on the Python scripting shell.\n\n![Python script on Python shell](./images/adding_on_python_shell.png)\n\nWell done, you wrote your first Python script on Python interactive shell. How do we close the Python interactive shell ?\nTo close the shell, next to this symbol >> write **exit()** command and press Enter.\n\n![Exit from python shell](./images/exit_from_shell.png)\n\nNow, you know how to open the Python interactive shell and how to exit from it.\n\nPython will give you results if you write scripts that Python understands, if not it returns errors. Let's make a deliberate mistake and see what Python will return.\n\n![Invalid Syntax Error](./images/invalid_syntax_error.png)\n\nAs you can see from the returned error, Python is so clever that it knows the mistake we made and which was _Syntax Error: invalid syntax_. Using x as multiplication in Python is a syntax error because (x) is not a valid syntax in Python. Instead of (**x**) we use asterisk (*) for multiplication. The returned error clearly shows what to fix.\n\nThe process of identifying and removing errors from a program is called _debugging_. Let us debug it by putting * in place of **x**.\n\n![Fixing Syntax Error](./images/fixing_syntax_error.png)\n\nOur bug was fixed, the code ran and we got a result we were expecting. As a programmer you will see such kind of errors on daily basis. It is good to know how to debug. To be good at debugging you should understand what kind of errors you are facing. Some of the Python errors you may encounter are _SyntaxError_, _IndexError_, _NameError_, _ModuleNotFoundError_, _KeyError_, _ImportError_, _AttributeError_, _TypeError_, _ValueError_, _ZeroDivisionError_ etc. We will see more about different Python **_error types_** in later sections.\n\nLet us practice more how to use Python interactive shell. Go to your terminal or command prompt and write the word **python**.\n\n![Python Scripting Shell](./images/opening_python_shell.png)\n\nThe Python interactive shell is opened. Let us do some basic mathematical operations (addition, subtraction, multiplication, division, modulus,  exponential).\n\nLet us do some maths first before we write any Python code:\n\n- 2 + 3 is 5\n- 3 - 2 is 1\n- 3 \\* 2 is 6\n- 3 / 2 is 1.5\n- 3 ** 2 is the same as 3 * 3\n\nIn python we have the following additional operations:\n\n- 3 % 2 = 1 => which means finding the remainder\n- 3 // 2 = 1 => which means removing the remainder\n\nLet us change the above mathematical expressions to Python code. The Python shell has been opened and let us write a comment at the very beginning of the shell.\n\nA _comment_ is a part of the code which is not executed by python. So we can leave some text in our code to make our code more readable. Python does not run the comment part. A comment in python starts with hash(#) symbol.\nThis is how you write a comment in python\n\n```shell\n # comment starts with hash\n # this is a python comment, because it starts with a (#) symbol\n```\n\n![Maths on python shell](./images/maths_on_python_shell.png)\n\nBefore we move on to the next section, let us practice more on the Python interactive shell. Close the opened shell by writing _exit()_ on the shell and open it again and let us practice how to write text on the Python shell.\n\n![Writing String on python shell](./images/writing_string_on_shell.png)\n\n### Installing Visual Studio Code\n\nThe Python interactive shell is good to try and test small script codes but it will not be for a big project. In real work environment, developers use different code editors to write codes. In this 30 days of Python programming challenge we will use visual studio code. Visual studio code is a very popular open source text editor. I am a fan of vscode and I would recommend to [download](https://code.visualstudio.com/) visual studio code, but if you are in favor of other editors, feel free to follow with what you have.\n\n[![Visual Studio Code](./images/vscode.png)](https://code.visualstudio.com/)\n\nIf you installed visual studio code, let us see how to use it.\nIf you prefer a video, you can follow this Visual Studio Code for Python [Video tutorial](https://www.youtube.com/watch?v=bn7Cx4z-vSo)\n\n#### How to use visual studio code\n\nOpen the visual studio code by double clicking the visual studio icon. When you open it you will get this kind of interface. Try to interact with the labeled icons.\n\n![Visual studio Code](./images/vscode_ui.png)\n\nCreate a folder named 30DaysOfPython on your desktop. Then open it using visual studio code.\n\n![Opening Project on Visual studio](./images/how_to_open_project_on_vscode.png)\n\n![Opening a project](./images/opening_project.png)\n\nAfter opening it you will see shortcuts for creating files and folders inside of 30DaysOfPython project's directory. As you can see below, I have created the very first file, helloworld.py. You can do the same.\n\n![Creating a python file](./images/helloworld.png)\n\nAfter a long day of coding, you want to close your code editor, right? This is how you will close the opened project.\n\n![Closing project](./images/closing_opened_project.png)\n\nCongratulations, you have finished setting up the development environment. Let us start coding.\n\n## Basic Python\n\n### Python Syntax\n\nA Python script can be written in Python interactive shell or in the code editor. A Python file has an extension .py.\n\n### Python Indentation\n\nAn indentation is a white space in a text. Indentation in many languages is used to increase code readability; however, Python uses indentation to create blocks of code. In other programming languages, curly brackets are used to create code blocks instead of indentation. One of the common bugs when writing Python code is incorrect indentation.\n\n![Indentation Error](./images/indentation.png)\n\n### Comments\n\nComments play a crucial role in enhancing code readability and allowing developers to leave notes within their code. In Python, any text preceded by a hash (#) symbol is considered a comment and is not executed when the code runs.\n\n**Example: Single Line Comment**\n\n```shell\n    # This is the first comment\n    # This is the second comment\n    # Python is eating the world\n```\n\n**Example: Multiline Comment**\n\nTriple quote can be used for multiline comment if it is not assigned to a variable\n\n```shell\n\"\"\"This is multiline comment\nmultiline comment takes multiple lines.\npython is eating the world\n\"\"\"\n```\n\n### Data types\n\nIn Python there are several types of data types. Let us get started with the most common ones. Different data types will be covered in detail in other sections. For the time being, let us just go through the different data types and get familiar with them. You do not have to have a clear understanding now.\n\n#### Number\n\n- Integer: Integer(negative, zero and positive) numbers\n    Example:\n    ... -3, -2, -1, 0, 1, 2, 3 ...\n- Float: Decimal number\n    Example\n    ... -3.5, -2.25, -1.0, 0.0, 1.1, 2.2, 3.5 ...\n- Complex\n    Example\n    1 + j, 2 + 4j\n\n#### String\n\nA collection of one or more characters under a single or double quote. If a string is more than one sentence then we use a triple quote.\n\n**Example:**\n\n```py\n'Asabeneh'\n'Finland'\n'Python'\n'I love teaching'\n'I hope you are enjoying the first day of 30DaysOfPython Challenge'\n```\n\n#### Booleans\n\nA boolean data type is either a True or False value. T and F should be always uppercase.\n\n**Example:**\n\n```python\n    True  #  Is the light on? If it is on, then the value is True\n    False # Is the light on? If it is off, then the value is False\n```\n\n#### List\n\nPython list is an ordered collection which allows to store different data type items. A list is similar to an array in JavaScript.\n\n**Example:**\n\n```py\n[0, 1, 2, 3, 4, 5]  # all are the same data types - a list of numbers\n['Banana', 'Orange', 'Mango', 'Avocado'] # all the same data types - a list of strings (fruits)\n['Finland','Estonia', 'Sweden','Norway'] # all the same data types - a list of strings (countries)\n['Banana', 10, False, 9.81] # different data types in the list - string, integer, boolean and float\n```\n\n#### Dictionary\n\nA Python dictionary object is an unordered collection of data in a key value pair format.\n\n**Example:**\n\n```py\n{\n'first_name':'Asabeneh',\n'last_name':'Yetayeh',\n'country':'Finland', \n'age':250, \n'is_married':True,\n'skills':['JS', 'React', 'Node', 'Python']\n}\n```\n\n#### Tuple\n\nA tuple is an ordered collection of different data types like list but tuples can not be modified once they are created. They are immutable.\n\n**Example:**\n\n```py\n('Asabeneh', 'Pawel', 'Brook', 'Abraham', 'Lidiya') # Names\n```\n\n```py\n('Earth', 'Jupiter', 'Neptune', 'Mars', 'Venus', 'Saturn', 'Uranus', 'Mercury') # planets\n```\n\n#### Set\n\nA set is a collection of data types similar to list and tuple. Unlike list and tuple, set is not an ordered collection of items. Like in Mathematics, set in Python stores only unique items.\n\nIn later sections, we will go in detail about each and every Python data type.\n\n**Example:**\n\n```py\n{2, 4, 3, 5}\n{3.14, 9.81, 2.7} # order is not important in set\n```\n\n### Checking Data types\n\nTo check the data type of certain data/variable we use the **type** function. In the following terminal you will see different python data types:\n\n![Checking Data types](./images/checking_data_types.png)\n\n### Python File\n\nFirst open your project folder, 30DaysOfPython. If you don't have this folder, create a folder name called 30DaysOfPython. Inside this folder, create a file called helloworld.py. Now, let's do what we did on python interactive shell using visual studio code.\n\nThe Python interactive shell was printing without using **print** but on visual studio code to see our result we should use a built in function _print(). The _print()_ built-in function takes one or more arguments as follows _print('arument1', 'argument2', 'argument3')_. See the examples below.\n\n**Example:**\n\nThe file name is helloworld.py\n\n```py\n# Day 1 - 30DaysOfPython Challenge\n\nprint(2 + 3)             # addition(+)\nprint(3 - 1)             # subtraction(-)\nprint(2 * 3)             # multiplication(*)\nprint(3 / 2)             # division(/)\nprint(3 ** 2)            # exponential(**)\nprint(3 % 2)             # modulus(%)\nprint(3 // 2)            # Floor division operator(//)\n\n# Checking data types\nprint(type(10))          # Int\nprint(type(3.14))        # Float\nprint(type(1 + 3j))      # Complex number\nprint(type('Asabeneh'))  # String\nprint(type([1, 2, 3]))   # List\nprint(type({'name':'Asabeneh'})) # Dictionary\nprint(type({9.8, 3.14, 2.7}))    # Set\nprint(type((9.8, 3.14, 2.7)))    # Tuple\n```\n\nTo run the python file check the image below. You can run the python file either by running the green button on Visual Studio Code or by typing _python helloworld.py_ in the terminal .\n\n![Running python script](./images/running_python_script.png)\n\n🌕  You are amazing. You have just completed day 1 challenge and you are on your way to greatness. Now do some exercises for your brain and muscles.\n\n## 💻 Exercises - Day 1\n\n### Exercise: Level 1\n\n1. Check the python version you are using\n2. Open the python interactive shell and do the following operations. The operands are 3 and 4.\n   - addition(+)\n   - subtraction(-)\n   - multiplication(\\*)\n   - modulus(%)\n   - division(/)\n   - exponential(\\*\\*)\n   - floor division operator(//)\n3. Write strings on the python interactive shell. The strings are the following:\n   - Your name\n   - Your family name\n   - Your country\n   - I am enjoying 30 days of python\n4. Check the data types of the following data:\n   - 10\n   - 9.8\n   - 3.14\n   - 4 - 4j\n   - ['Asabeneh', 'Python', 'Finland']\n   - Your name\n   - Your family name\n   - Your country\n\n### Exercise: Level 2\n\n1. Create a folder named day_1 inside 30DaysOfPython folder. Inside day_1 folder, create a python file helloworld.py and repeat questions 1, 2, 3 and 4. Remember to use _print()_ when you are working on a python file. Navigate to the directory where you have saved your file, and run it.\n\n### Exercise: Level 3\n\n1. Write an example for different Python data types such as Number(Integer, Float, Complex), String, Boolean, List, Tuple, Set and Dictionary.\n2. Find an [Euclidian distance](https://en.wikipedia.org/wiki/Euclidean_distance#:~:text=In%20mathematics%2C%20the%20Euclidean%20distance,being%20called%20the%20Pythagorean%20distance.) between (2, 3) and (10, 8)\n\n🎉 CONGRATULATIONS ! 🎉\n\n[Day 2 >>](./02_Day_Variables_builtin_functions/02_variables_builtin_functions.md)\n"
        },
        {
          "name": "test_files",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}