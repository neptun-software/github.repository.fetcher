{
  "metadata": {
    "timestamp": 1736561408973,
    "page": 47,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "openai/gym",
      "stars": 35113,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4013671875,
          "content": "*.swp\n*.pyc\n*.py~\n.DS_Store\n.cache\n.pytest_cache/\n\n# Setuptools distribution and build folders.\n/dist/\n/build\n\n# Virtualenv\n/env\n\n# Python egg metadata, regenerated from source files by setuptools.\n/*.egg-info\n\n*.sublime-project\n*.sublime-workspace\n\nlogs/\n\n.ipynb_checkpoints\nghostdriver.log\n\njunk\nMUJOCO_LOG.txt\n\nrllab_mujoco\n\ntutorial/*.html\n\n# IDE files\n.eggs\n.tox\n\n# PyCharm project files\n.idea\nvizdoom.ini\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.5,
          "content": "---\nrepos:\n  - repo: https://github.com/python/black\n    rev: 22.3.0\n    hooks:\n      - id: black\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.1.0\n    hooks:\n      - id: codespell\n        args:\n          - --ignore-words-list=nd,reacher,thist,ths, ure, referenc\n  - repo: https://gitlab.com/PyCQA/flake8\n    rev: 4.0.1\n    hooks:\n      - id: flake8\n        args:\n          - '--per-file-ignores=*/__init__.py:F401 gym/envs/registration.py:E704'\n          - --ignore=E203,W503,E741\n          - --max-complexity=30\n          - --max-line-length=456\n          - --show-source\n          - --statistics\n  - repo: https://github.com/PyCQA/isort\n    rev: 5.10.1\n    hooks:\n      - id: isort\n        args: [\"--profile\", \"black\"]\n  - repo: https://github.com/pycqa/pydocstyle\n    rev: 6.1.1  # pick a git hash / tag to point to\n    hooks:\n      - id: pydocstyle\n        exclude: ^(gym/version.py)|(gym/envs/)|(tests/)\n        args:\n          - --source\n          - --explain\n          - --convention=google\n        additional_dependencies: [\"toml\"]\n  - repo: https://github.com/asottile/pyupgrade\n    rev: v2.32.0\n    hooks:\n      - id: pyupgrade\n        # TODO: remove `--keep-runtime-typing` option\n        args: [\"--py36-plus\", \"--keep-runtime-typing\"]\n  - repo: local\n    hooks:\n      - id: pyright\n        name: pyright\n        entry: pyright\n        language: node\n        pass_filenames: false\n        types: [python]\n        additional_dependencies: [\"pyright\"]\n        args:\n          - --project=pyproject.toml\n"
        },
        {
          "name": "CODE_OF_CONDUCT.rst",
          "type": "blob",
          "size": 0.6572265625,
          "content": "OpenAI Gym is dedicated to providing a harassment-free experience for\neveryone, regardless of gender, gender identity and expression, sexual\norientation, disability, physical appearance, body size, age, race, or\nreligion. We do not tolerate harassment of participants in any form.\n\nThis code of conduct applies to all OpenAI Gym spaces (including Gist\ncomments) both online and off. Anyone who violates this code of\nconduct may be sanctioned or expelled from these spaces at the\ndiscretion of the OpenAI team.\n\nWe may add additional rules over time, which will be made clearly\navailable to participants. Participants are responsible for knowing\nand abiding by these rules.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.6826171875,
          "content": "# Gym Contribution Guidelines\n\nAt this time we are currently accepting the current forms of contributions:\n\n- Bug reports (keep in mind that changing environment behavior should be minimized as that requires releasing a new version of the environment and makes results hard to compare across versions)\n- Pull requests for bug fixes\n- Documentation improvements\n\nNotably, we are not accepting these forms of contributions:\n\n- New environments\n- New features\n\nThis may change in the future.\nIf you wish to make a Gym environment, follow the instructions in [Creating Environments](https://github.com/openai/gym/blob/master/docs/creating_environments.md).  When your environment works, you can make a PR to add it to the bottom of the [List of Environments](https://github.com/openai/gym/blob/master/docs/third_party_environments.md).\n\n\nEdit July 27, 2021: Please see https://github.com/openai/gym/issues/2259 for new contributing standards\n\n# Development\nThis section contains technical instructions & hints for the contributors.\n\n## Type checking\nThe project uses `pyright` to check types. \nTo type check locally, install `pyright` per official [instructions](https://github.com/microsoft/pyright#command-line). \nIt's configuration lives within `pyproject.toml`. It includes list of included and excluded files currently supporting type checks.\nTo run `pyright` for the project, run the pre-commit process (`pre-commit run --all-files`) or `pyright --project=pyproject.toml`\nAlternatively, pyright is a built-in feature of VSCode that will automatically provide type hinting.\n\n### Adding typing to more modules and packages\nIf you would like to add typing to a module in the project, \nthe list of included, excluded and strict files can be found in pyproject.toml (pyproject.toml -> [tool.pyright]). \nTo run `pyright` for the project, run the pre-commit process (`pre-commit run --all-files`) or `pyright`\n\n## Git hooks\nThe CI will run several checks on the new code pushed to the Gym repository. These checks can also be run locally without waiting for the CI by following the steps below:\n1. [install `pre-commit`](https://pre-commit.com/#install),\n2. Install the Git hooks by running `pre-commit install`.\n\nOnce those two steps are done, the Git hooks will be run automatically at every new commit. \nThe Git hooks can also be run manually with `pre-commit run --all-files`, and if needed they can be skipped (not recommended) with `git commit --no-verify`. \n**Note:** you may have to run `pre-commit run --all-files` manually a couple of times to make it pass when you commit, as each formatting tool will first format the code and fail the first time but should pass the second time.\n\nAdditionally, for pull requests, the project runs a number of tests for the whole project using [pytest](https://docs.pytest.org/en/latest/getting-started.html#install-pytest).\nThese tests can be run locally with `pytest` in the root folder. \n\n## Docstrings\nPydocstyle has been added to the pre-commit process such that all new functions follow the [google docstring style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\nAll new functions require either a short docstring, a single line explaining the purpose of a function\nor a multiline docstring that documents each argument and the return type (if there is one) of the function.\nIn addition, new file and class require top docstrings that should outline the purpose of the file/class.\nFor classes, code block examples can be provided in the top docstring and not the constructor arguments.\n\nTo check your docstrings are correct, run `pre-commit run --all-files` or `pydocstyle --source --explain --convention=google`.\nIf all docstrings that fail, the source and reason for the failure is provided. "
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.4296875,
          "content": "The MIT License\n\nCopyright (c) 2016 OpenAI (https://openai.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n# Mujoco models\nThis work is derived from [MuJuCo models](http://www.mujoco.org/forum/index.php?resources/) used under the following license:\n```\nThis file is part of MuJoCo.     \nCopyright 2009-2015 Roboti LLC.\t\nMujoco\t\t:: Advanced physics simulation engine\nSource\t\t: www.roboti.us\nVersion\t\t: 1.31\nReleased \t: 23Apr16\nAuthor\t\t:: Vikash Kumar\nContacts \t: kumar@roboti.us\n```\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.740234375,
          "content": "[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://pre-commit.com/) [![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n## Important Notice\n\n### The team that has been maintaining Gym since 2021 has moved all future development to [Gymnasium](https://github.com/Farama-Foundation/Gymnasium), a drop in replacement for Gym (import gymnasium as gym), and Gym will not be receiving any future updates. Please switch over to Gymnasium as soon as you're able to do so. If you'd like to read more about the story behind this switch, please check out [this blog post](https://farama.org/Announcing-The-Farama-Foundation).\n\n## Gym\n\nGym is an open source Python library for developing and comparing reinforcement learning algorithms by providing a standard API to communicate between learning algorithms and environments, as well as a standard set of environments compliant with that API. Since its release, Gym's API has become the field standard for doing this.\n\nGym documentation website is at [https://www.gymlibrary.dev/](https://www.gymlibrary.dev/), and you can propose fixes and changes to it [here](https://github.com/Farama-Foundation/gym-docs).\n\nGym also has a discord server for development purposes that you can join here: https://discord.gg/nHg2JRN489\n\n## Installation\n\nTo install the base Gym library, use `pip install gym`.\n\nThis does not include dependencies for all families of environments (there's a massive number, and some can be problematic to install on certain systems). You can install these dependencies for one family like `pip install gym[atari]` or use `pip install gym[all]` to install all dependencies.\n\nWe support Python 3.7, 3.8, 3.9 and 3.10 on Linux and macOS. We will accept PRs related to Windows, but do not officially support it.\n\n## API\n\nThe Gym API's API models environments as simple Python `env` classes. Creating environment instances and interacting with them is very simple- here's an example using the \"CartPole-v1\" environment:\n\n```python\nimport gym\nenv = gym.make(\"CartPole-v1\")\nobservation, info = env.reset(seed=42)\n\nfor _ in range(1000):\n    action = env.action_space.sample()\n    observation, reward, terminated, truncated, info = env.step(action)\n\n    if terminated or truncated:\n        observation, info = env.reset()\nenv.close()\n```\n\n## Notable Related Libraries\n\nPlease note that this is an incomplete list, and just includes libraries that the maintainers most commonly point newcommers to when asked for recommendations.\n\n* [CleanRL](https://github.com/vwxyzjn/cleanrl) is a learning library based on the Gym API. It is designed to cater to newer people in the field and provides very good reference implementations.\n* [Tianshou](https://github.com/thu-ml/tianshou) is a learning library that's geared towards very experienced users and is design to allow for ease in complex algorithm modifications.\n* [RLlib](https://docs.ray.io/en/latest/rllib/index.html) is a learning library that allows for distributed training and inferencing and supports an extraordinarily large number of features throughout the reinforcement learning space.\n* [PettingZoo](https://github.com/Farama-Foundation/PettingZoo) is like Gym, but for environments with multiple agents.\n\n## Environment Versioning\n\nGym keeps strict versioning for reproducibility reasons. All environments end in a suffix like \"\\_v0\".  When changes are made to environments that might impact learning results, the number is increased by one to prevent potential confusion.\n\n## MuJoCo Environments\n\nThe latest \"\\_v4\" and future versions of the MuJoCo environments will no longer depend on `mujoco-py`. Instead `mujoco` will be the required dependency for future gym MuJoCo environment versions. Old gym MuJoCo environment versions that depend on `mujoco-py` will still be kept but unmaintained.\nTo install the dependencies for the latest gym MuJoCo environments use `pip install gym[mujoco]`. Dependencies for old MuJoCo environments can still be installed by `pip install gym[mujoco_py]`. \n\n## Citation\n\nA whitepaper from when Gym just came out is available https://arxiv.org/pdf/1606.01540, and can be cited with the following bibtex entry:\n\n```\n@misc{1606.01540,\n  Author = {Greg Brockman and Vicki Cheung and Ludwig Pettersson and Jonas Schneider and John Schulman and Jie Tang and Wojciech Zaremba},\n  Title = {OpenAI Gym},\n  Year = {2016},\n  Eprint = {arXiv:1606.01540},\n}\n```\n\n## Release Notes\n\nThere used to be release notes for all the new Gym versions here. New release notes are being moved to [releases page](https://github.com/openai/gym/releases) on GitHub, like most other libraries do. Old notes can be viewed [here](https://github.com/openai/gym/blob/31be35ecd460f670f0c4b653a14c9996b7facc6c/README.rst).\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "gym",
          "type": "tree",
          "content": null
        },
        {
          "name": "py.Dockerfile",
          "type": "blob",
          "size": 0.9921875,
          "content": "# A Dockerfile that sets up a full Gym install with test dependencies\nARG PYTHON_VERSION\nFROM python:$PYTHON_VERSION\n\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\nRUN apt-get -y update \\\n    && apt-get install --no-install-recommends -y \\\n    unzip \\\n    libglu1-mesa-dev \\\n    libgl1-mesa-dev \\\n    libosmesa6-dev \\\n    xvfb \\\n    patchelf \\\n    ffmpeg cmake \\\n    && apt-get autoremove -y \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/* \\\n    # Download mujoco\n    && mkdir /root/.mujoco \\\n    && cd /root/.mujoco \\\n    && wget -qO- 'https://github.com/deepmind/mujoco/releases/download/2.1.0/mujoco210-linux-x86_64.tar.gz' | tar -xzvf -\n\nENV LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/root/.mujoco/mujoco210/bin\"\n\nCOPY . /usr/local/gym/\nWORKDIR /usr/local/gym/\n\nRUN if [ \"python:${PYTHON_VERSION}\" = \"python:3.6.15\" ] ; then pip install .[box2d,classic_control,toy_text,other] pytest==\"7.0.1\" --no-cache-dir; else pip install .[testing] --no-cache-dir; fi\n\nENTRYPOINT [\"/usr/local/gym/bin/docker_entrypoint\"]\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.2333984375,
          "content": "[tool.pyright]\n\ninclude = [\n    \"gym/**\",\n    \"tests/**\"\n]\n\nexclude = [\n    \"**/node_modules\",\n    \"**/__pycache__\",\n]\n\nstrict = [\n\n]\n\ntypeCheckingMode = \"basic\"\npythonVersion = \"3.6\"\npythonPlatform = \"All\"\ntypeshedPath = \"typeshed\"\nenableTypeIgnoreComments = true\n\n# This is required as the CI pre-commit does not download the module (i.e. numpy, pygame, box2d)\n#   Therefore, we have to ignore missing imports\nreportMissingImports = \"none\"\n# Some modules are missing type stubs, which is an issue when running pyright locally\nreportMissingTypeStubs = false\n# For warning and error, will raise an error when\nreportInvalidTypeVarUse = \"none\"\n\n# reportUnknownMemberType = \"warning\"  # -> raises 6035 warnings\n# reportUnknownParameterType = \"warning\"  # -> raises 1327 warnings\n# reportUnknownVariableType = \"warning\"  # -> raises 2585 warnings\n# reportUnknownArgumentType = \"warning\"  # -> raises 2104 warnings\nreportGeneralTypeIssues = \"none\"  # -> commented out raises 489 errors\nreportUntypedFunctionDecorator = \"none\"  # -> pytest.mark.parameterize issues\n\nreportPrivateUsage = \"warning\"\nreportUnboundVariable = \"warning\"\n\n[tool.pytest.ini_options]\nfilterwarnings = ['ignore:.*step API.*:DeprecationWarning'] # TODO: to be removed when old step API is removed\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.326171875,
          "content": "numpy>=1.18.0\ncloudpickle>=1.2.0\nimportlib_metadata>=4.8.0; python_version < '3.10'\ngym_notices>=0.0.4\ndataclasses==0.8; python_version == '3.6'\ntyping_extensions==4.3.0; python_version == '3.7'\nopencv-python>=3.0\nlz4>=3.1.0\nmatplotlib>=3.0\nbox2d-py==2.3.5\npygame==2.1.0\nale-py~=0.8.0\nmujoco==2.2.0\nmujoco_py<2.2,>=2.1\nimageio>=2.14.1"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.9765625,
          "content": "\"\"\"Setups the project.\"\"\"\nimport itertools\nimport re\n\nfrom setuptools import find_packages, setup\n\nwith open(\"gym/version.py\") as file:\n    full_version = file.read()\n    assert (\n        re.match(r'VERSION = \"\\d\\.\\d+\\.\\d+\"\\n', full_version).group(0) == full_version\n    ), f\"Unexpected version: {full_version}\"\n    VERSION = re.search(r\"\\d\\.\\d+\\.\\d+\", full_version).group(0)\n\n# Environment-specific dependencies.\nextras = {\n    \"atari\": [\"ale-py~=0.8.0\"],\n    \"accept-rom-license\": [\"autorom[accept-rom-license]~=0.4.2\"],\n    \"box2d\": [\"box2d-py==2.3.5\", \"pygame==2.1.0\", \"swig==4.*\"],\n    \"classic_control\": [\"pygame==2.1.0\"],\n    \"mujoco_py\": [\"mujoco_py<2.2,>=2.1\"],\n    \"mujoco\": [\"mujoco==2.2\", \"imageio>=2.14.1\"],\n    \"toy_text\": [\"pygame==2.1.0\"],\n    \"other\": [\"lz4>=3.1.0\", \"opencv-python>=3.0\", \"matplotlib>=3.0\", \"moviepy>=1.0.0\"],\n}\n\n# Testing dependency groups.\ntesting_group = set(extras.keys()) - {\"accept-rom-license\", \"atari\"}\nextras[\"testing\"] = list(\n    set(itertools.chain.from_iterable(map(lambda group: extras[group], testing_group)))\n) + [\"pytest==7.0.1\"]\n\n# All dependency groups - accept rom license as requires user to run\nall_groups = set(extras.keys()) - {\"accept-rom-license\"}\nextras[\"all\"] = list(\n    set(itertools.chain.from_iterable(map(lambda group: extras[group], all_groups)))\n)\n\n# Uses the readme as the description on PyPI\nwith open(\"README.md\") as fh:\n    long_description = \"\"\n    header_count = 0\n    for line in fh:\n        if line.startswith(\"##\"):\n            header_count += 1\n        if header_count < 2:\n            long_description += line\n        else:\n            break\n\nsetup(\n    author=\"Gym Community\",\n    author_email=\"jkterry@umd.edu\",\n    classifiers=[\n        # Python 3.6 is minimally supported (only with basic gym environments and API)\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n    ],\n    description=\"Gym: A universal API for reinforcement learning environments\",\n    extras_require=extras,\n    install_requires=[\n        \"numpy >= 1.18.0\",\n        \"cloudpickle >= 1.2.0\",\n        \"importlib_metadata >= 4.8.0; python_version < '3.10'\",\n        \"gym_notices >= 0.0.4\",\n        \"dataclasses == 0.8; python_version == '3.6'\",\n    ],\n    license=\"MIT\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    name=\"gym\",\n    packages=[package for package in find_packages() if package.startswith(\"gym\")],\n    package_data={\n        \"gym\": [\n            \"envs/mujoco/assets/*.xml\",\n            \"envs/classic_control/assets/*.png\",\n            \"envs/toy_text/font/*.ttf\",\n            \"envs/toy_text/img/*.png\",\n            \"py.typed\",\n        ]\n    },\n    python_requires=\">=3.6\",\n    tests_require=extras[\"testing\"],\n    url=\"https://www.gymlibrary.dev/\",\n    version=VERSION,\n    zip_safe=False,\n)\n"
        },
        {
          "name": "test_requirements.txt",
          "type": "blob",
          "size": 0.13671875,
          "content": "box2d-py==2.3.5\nlz4>=3.1.0\nopencv-python>=3.0\nmujoco==2.2.0\nmatplotlib>=3.0\nimageio>=2.14.1\npygame==2.1.0\nmujoco_py<2.2,>=2.1\npytest==7.0.1\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}