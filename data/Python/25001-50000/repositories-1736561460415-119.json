{
  "metadata": {
    "timestamp": 1736561460415,
    "page": 119,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chubin/wttr.in",
      "stars": 25141,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0654296875,
          "content": "ve/\nshare/static/fonts/\n*.pyc\ndata/\nlog/\n.idea/\n*.swp\n*.mmdb\n*.dat\n"
        },
        {
          "name": ".golangci.yaml",
          "type": "blob",
          "size": 0.40234375,
          "content": "run:\n  skip-dirs:\n    - pkg/curlator\nlinters:\n  enable-all: true\n  disable:\n    - wsl\n    - wrapcheck\n    - varnamelen\n    - gci\n    - exhaustivestruct\n    - exhaustruct\n    - gomnd\n    - gofmt\n\n    # to be fixed:\n    - ireturn\n    - gosec\n    - noctx\n    - interfacer\n\n    # deprecated:\n    - scopelint\n    - deadcode\n    - varcheck\n    - maligned\n    - ifshort\n    - nosnakecase\n    - structcheck\n    - golint\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.642578125,
          "content": "group: travis_latest\nlanguage: python\ncache: pip\npython:\n    - 3.7\ninstall:\n    - pip install flake8 -r requirements.txt\nbefore_script:\n    # stop the build if there are Python syntax errors or undefined names\n    - flake8 bin lib --count --select=E9,F63,F7,F82 --show-source --statistics\n    # exit-zero treats all errors as warnings.  The GitHub editor is 127 chars wide\n    - flake8 bin lib --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics\nscript:\n    - true  # pytest --capture=sys  # add other tests here\nnotifications:\n    on_success: change\n    on_failure: change  # `always` will be the setting once code changes slow down.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.44921875,
          "content": "# Build stage\nFROM golang:1-alpine as builder\n\nWORKDIR /app\n\nCOPY ./share/we-lang/ /app\n\nRUN apk add --no-cache git\n\nRUN go get -u github.com/mattn/go-colorable && \\\n    go get -u github.com/klauspost/lctime && \\\n    go get -u github.com/mattn/go-runewidth && \\\n    cd /app && CGO_ENABLED=0 go build .\n\n# Application stage\nFROM alpine:3.16\n\nWORKDIR /app\n\nCOPY ./requirements.txt /app\n\nENV LLVM_CONFIG=/usr/bin/llvm11-config\n\nRUN apk add --no-cache --virtual .build \\\n    autoconf \\\n    automake \\\n    g++ \\\n    gcc \\\n    jpeg-dev \\\n    llvm11-dev\\\n    make \\\n    zlib-dev \\\n    && apk add --no-cache \\\n    python3 \\\n    py3-pip \\\n    py3-scipy \\\n    py3-wheel \\\n    py3-gevent \\\n    zlib \\\n    jpeg \\\n    llvm11 \\\n    libtool \\\n    supervisor \\\n    py3-numpy-dev \\\n    python3-dev && \\\n    mkdir -p /app/cache && \\\n    mkdir -p /var/log/supervisor && \\\n    mkdir -p /etc/supervisor/conf.d && \\\n    chmod -R o+rw /var/log/supervisor && \\\n    chmod -R o+rw /var/run && \\\n    pip install -r requirements.txt --no-cache-dir && \\\n    apk del --no-cache -r .build\n\nCOPY --from=builder /app/wttr.in /app/bin/wttr.in\nCOPY ./bin /app/bin\nCOPY ./lib /app/lib\nCOPY ./share /app/share\nCOPY share/docker/supervisord.conf /etc/supervisor/supervisord.conf\n\nENV WTTR_MYDIR=\"/app\"\nENV WTTR_GEOLITE=\"/app/GeoLite2-City.mmdb\"\nENV WTTR_WEGO=\"/app/bin/wttr.in\"\nENV WTTR_LISTEN_HOST=\"0.0.0.0\"\nENV WTTR_LISTEN_PORT=\"8002\"\n\nEXPOSE 8002\n\nCMD [\"/usr/bin/supervisord\", \"-c\", \"/etc/supervisor/supervisord.conf\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.1943359375,
          "content": "srv: srv.go internal/*/*.go internal/*/*/*.go\n\tgo build -o srv -ldflags '-w -linkmode external -extldflags \"-static\"' ./\n\t#go build -o srv ./\n\ngo-test:\n\tgo test ./...\n\nlint:\n\tgolangci-lint run ./...\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 23.59375,
          "content": "\n*wttr.in — the right way to ~check~ `curl` the weather!*\n\nwttr.in is a console-oriented weather forecast service that supports various information\nrepresentation methods like terminal-oriented ANSI-sequences for console HTTP clients\n(curl, httpie, or wget), HTML for web browsers, or PNG for graphical viewers.\n\nOriginally started as a small project, a wrapper for [wego](https://github.com/schachmat/wego),\nintended to demonstrate the power of the console-oriented services,\n*wttr.in* became a popular weather reporting service, handling tens of millions of queries daily.\n\nYou can see it running here: [wttr.in](https://wttr.in).\n\n[Documentation](https://wttr.in/:help) | [Usage](https://github.com/chubin/wttr.in#usage) | [One-line output](https://github.com/chubin/wttr.in#one-line-output) | [Data-rich output format](https://github.com/chubin/wttr.in#data-rich-output-format-v2) | [Map view](https://github.com/chubin/wttr.in#map-view-v3) | [Output formats](https://github.com/chubin/wttr.in#different-output-formats) | [Moon phases](https://github.com/chubin/wttr.in#moon-phases) | [Internationalization](https://github.com/chubin/wttr.in#internationalization-and-localization) | [Installation](https://github.com/chubin/wttr.in#installation)\n\n## Usage\n\nYou can access the service from a shell or from a Web browser like this:\n\n    $ curl wttr.in\n    Weather for City: Paris, France\n\n         \\   /     Clear\n          .-.      10 – 11 °C\n       ― (   ) ―   ↑ 11 km/h\n          `-’      10 km\n         /   \\     0.0 mm\n\n\nHere is an example weather report:\n\n![Weather Report](San_Francisco.png)\n\nOr in PowerShell:\n\n```PowerShell\nInvoke-RestMethod https://wttr.in\n```\n\nWant to get the weather information for a specific location? You can add the desired location to the URL in your\nrequest like this:\n\n    $ curl wttr.in/London\n    $ curl wttr.in/Moscow\n    $ curl wttr.in/Salt+Lake+City\n\nIf you omit the location name, you will get the report for your current location based on your IP address.\n\nUse 3-letter airport codes in order to get the weather information at a certain airport:\n\n    $ curl wttr.in/muc      # Weather for IATA: muc, Munich International Airport, Germany\n    $ curl wttr.in/ham      # Weather for IATA: ham, Hamburg Airport, Germany\n\nLet's say you'd like to get the weather for a geographical location other than a town or city - maybe an attraction\nin a city, a mountain name, or some special location. Add the character `~` before the name to look up that special\nlocation name before the weather is then retrieved:\n\n\t$ curl wttr.in/~Vostok+Station\n\t$ curl wttr.in/~Eiffel+Tower\n\t$ curl wttr.in/~Kilimanjaro\n\nFor these examples, you'll see a line below the weather forecast output that shows the geolocation\nresults of looking up the location:\n\n\tLocation: Vostok Station, станция Восток, AAT, Antarctica [-78.4642714,106.8364678]\n    Location: Tour Eiffel, 5, Avenue Anatole France, Gros-Caillou, 7e, Paris, Île-de-France, 75007, France [48.8582602,2.29449905432]\n\tLocation: Kilimanjaro, Northern, Tanzania [-3.4762789,37.3872648]\n\nYou can also use IP-addresses (direct) or domain names (prefixed with `@`) to specify a location:\n\n    $ curl wttr.in/@github.com\n    $ curl wttr.in/@msu.ru\n\nTo get detailed information online, you can access the [/:help](https://wttr.in/:help) page:\n\n    $ curl wttr.in/:help\n\n### Weather Units\n\nBy default the USCS units are used for the queries from the USA and the metric system for the rest of the world.\nYou can override this behavior by adding `?u`, `?m` or `?M`   to a URL like this:\n\n    $ curl wttr.in/Amsterdam?u  # USCS (used by default in US)\n    $ curl wttr.in/Amsterdam?m  # metric (SI) (used by default everywhere except US)\n    $ curl wttr.in/Amsterdam?M  # metric (SI), but show wind speed in m/s\n\nIf you have several options to pass, write them without delimiters in between for the one-letter options,\nand use `&` as a delimiter for the long options with values:\n\n    $ curl 'wttr.in/Amsterdam?m2&lang=nl'\n\nIt would be a rough equivalent of `-m2 --lang nl` for the GNU CLI syntax.\n\n## Supported output formats and views\n\nwttr.in currently supports five output formats:\n\n* ANSI for the terminal;\n* Plain-text for the terminal and scripts;\n* HTML for the browser;\n* PNG for the graphical viewers;\n* JSON for scripts and APIs;\n* Prometheus metrics for scripts and APIs.\n\nThe ANSI and HTML formats are selected based on the User-Agent string.\n\nTo force plain text, which disables colors:\n\n    $ curl wttr.in/?T\n\nTo restrict output to glyphs available in standard console fonts (e.g. Consolas and Lucida Console):\n\n    $ curl wttr.in/?d\n\nThe PNG format can be forced by adding `.png` to the end of the query:\n\n    $ wget wttr.in/Paris.png\n\nYou can use all of the options with the PNG-format like in an URL, but you have\nto separate them with `_` instead of `?` and `&`:\n\n    $ wget wttr.in/Paris_0tqp_lang=fr.png\n\nUseful options for the PNG format:\n\n* `t` for transparency (`transparency=150`);\n* transparency=0..255 for a custom transparency level.\n\nTransparency is a useful feature when weather PNGs are used to add weather data to pictures:\n\n    $ convert source.jpg <( curl wttr.in/Oymyakon_tqp0.png ) -geometry +50+50 -composite target.jpg\n\nIn this example:\n\n* `source.jpg` - source file;\n* `target.jpg` - target file;\n* `Oymyakon` - name of the location;\n* `tqp0` - options (recommended).\n\n![Picture with weather data](https://pbs.twimg.com/media/C69-wsIW0AAcAD5.jpg)\n\nYou can embed a special wttr.in widget, that displays the weather condition for the current or a selected location, into a HTML page using the [wttr-switcher](https://github.com/midzer/wttr-switcher). That is how it looks like: [wttr-switcher-example](https://midzer.github.io/wttr-switcher/) or on a real world web site: https://feuerwehr-eisolzried.de/.\n\n![Embedded wttr.in example at feuerwehr-eisolzried.de](https://user-images.githubusercontent.com/3875145/65265457-50eac180-db11-11e9-8f9b-2e1711dfc436.png)\n\n## One-line output\n\nOne-line output format is convenient to be used to show weather info\nin status bar of different programs, such as *tmux*, *weechat*, etc.\n\nFor one-line output format, specify additional URL parameter `format`:\n\n```\n$ curl wttr.in/Nuremberg?format=3\nNuremberg: 🌦 +11⁰C\n```\n\nAvailable preconfigured formats: 1, 2, 3, 4 and the custom format using the percent notation (see below).\n* 1: Current weather at location: `🌦 +11⁰C`\n* 2: Current weather at location with more details: `🌦   🌡️+11°C 🌬️↓4km/h`\n* 3: Name of location and current weather at location: `Nuremberg: 🌦 +11⁰C`\n* 4: Name of location and current weather at location with more details: `Nuremberg: 🌦   🌡️+11°C 🌬️↓4km/h`\n\nYou can specify multiple locations separated with `:` (for repeating queries):\n\n```\n$ curl wttr.in/Nuremberg:Hamburg:Berlin?format=3\nNuremberg: 🌦 +11⁰C\n```\nOr to process all this queries at once:\n\n```\n$ curl -s 'wttr.in/{Nuremberg,Hamburg,Berlin}?format=3'\nNuremberg: 🌦 +11⁰C\nHamburg: 🌦 +8⁰C\nBerlin: 🌦 +8⁰C\n```\n\nTo specify your own custom output format, use the special `%`-notation:\n\n```\n    c    Weather condition,\n    C    Weather condition textual name,\n    x    Weather condition, plain-text symbol,\n    h    Humidity,\n    t    Temperature (Actual),\n    f    Temperature (Feels Like),\n    w    Wind,\n    l    Location,\n    m    Moon phase 🌑🌒🌓🌔🌕🌖🌗🌘,\n    M    Moon day,\n    p    Precipitation (mm/3 hours),\n    P    Pressure (hPa),\n    u    UV index (1-12),\n\n    D    Dawn*,\n    S    Sunrise*,\n    z    Zenith*,\n    s    Sunset*,\n    d    Dusk*,\n    T    Current time*,\n    Z    Local timezone.\n\n(*times are shown in the local timezone)\n```\n\nSo, these two calls are the same:\n\n```\n    $ curl wttr.in/London?format=3\n    London: ⛅️ +7⁰C\n    $ curl wttr.in/London?format=\"%l:+%c+%t\\n\"\n    London: ⛅️ +7⁰C\n```\n\n### tmux\n\nWhen using in `tmux.conf`, you have to escape `%` with `%`, i.e. write there `%%` instead of `%`.\n\nThe output does not contain new line by default, when the %-notation is used, but it does contain it when preconfigured format (`1`,`2`,`3` etc.)\nare used. To have the new line in the output when the %-notation is used, use '\\n' and single quotes when doing a query from the shell.\n\nIn programs, that are querying the service automatically (such as tmux), it is better to use some reasonable update interval. In tmux, you can configure it with `status-interval`.\n\nIf several, `:` separated locations, are specified in the query, specify update period\nas an additional query parameter `period=`:\n```\nset -g status-interval 60\nWEATHER='#(curl -s wttr.in/London:Stockholm:Moscow\\?format\\=\"%%l:+%%c%%20%%t%%60%%w&period=60\")'\nset -g status-right \"$WEATHER ...\"\n```\n![wttr.in in tmux status bar](https://wttr.in/files/example-tmux-status-line.png)\n\n### WeeChat\n\nTo embed in to an IRC ([WeeChat](https://github.com/weechat/weechat)) client's existing status bar:\n\n```\n/alias add wttr /exec -pipe \"/mute /set plugins.var.wttr\" url:wttr.in/Montreal?format=%l:+%c+%f+%h+%p+%P+%m+%w+%S+%s;/wait 3 /item refresh wttr\n/trigger add wttr timer 60000;0;0 \"\" \"\" \"/wttr\"\n/item add wttr \"\" \"${plugins.var.wttr}\"\n/eval /set weechat.bar.status.items ${weechat.bar.status.items},spacer,wttr\n/eval /set weechat.startup.command_after_plugins ${weechat.startup.command_after_plugins};/wttr\n/wttr\n```\n![wttr.in in WeeChat status bar](https://i.imgur.com/XkYiRU7.png)\n\n\n### conky\n\nConky usage example:\n\n```\n${texeci 1800 curl wttr.in/kyiv_0pq_lang=uk.png\n  | convert - -transparent black $HOME/.config/conky/out.png}\n${image $HOME/.config/conky/out.png -p 0,0}\n```\n\n![wttr.in in conky](https://user-images.githubusercontent.com/3875145/172178453-9e9ed9e3-9815-426a-9a21-afdd6e279fc8.png)\n\n\n### IRC\n\nIRC integration example:\n\n* https://github.com/OpenSourceTreasure/Mirc-ASCII-weather-translate-pixel-editor\n\n### Emojis support\n\nTo see emojis in terminal, you need:\n\n1. Terminal support for emojis (was added to Cairo 1.15.8);\n2. Font with emojis support.\n\nFor the emoji font, we recommend *Noto Color Emoji*, and a good alternative option would be the *Emoji One* font;\nboth of them support all necessary emoji glyphs.\n\nFont configuration:\n\n```xml\n$ cat ~/.config/fontconfig/fonts.conf\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE fontconfig SYSTEM \"fonts.dtd\">\n<fontconfig>\n  <alias>\n    <family>serif</family>\n    <prefer>\n      <family>Noto Color Emoji</family>\n    </prefer>\n  </alias>\n  <alias>\n    <family>sans-serif</family>\n    <prefer>\n      <family>Noto Color Emoji</family>\n    </prefer>\n  </alias>\n  <alias>\n    <family>monospace</family>\n    <prefer>\n      <family>Noto Color Emoji</family>\n    </prefer>\n  </alias>\n</fontconfig>\n```\n\n(to apply the configuration, run `fc-cache -f -v`).\n\nIn some cases, `tmux` and the terminal understanding of some emoji characters may differ, which may\ncause strange effects similar to that described in #579.\n\n## Data-rich output format (v2)\n\nIn the experimental data-rich output format, that is available under the view code `v2`,\na lot of additional weather and astronomical information is available:\n\n* Temperature, and precipitation changes forecast throughout the days;\n* Moonphase for today and the next three days;\n* The current weather condition, temperature, humidity, wind speed and direction, pressure;\n* Timezone;\n* Dawn, sunrise, noon, sunset, dusk time for he selected location;\n* Precise geographical coordinates for the selected location.\n\n```\n  $ curl v2.wttr.in/München\n```\n\nor\n\n```\n  $ curl wttr.in/München?format=v2\n```\n\nor, if you prefer Nerd Fonts instead of Emoji, `v2d` (day) or `v2n` (night):\n\n```\n  $ curl v2d.wttr.in/München\n```\n\n\n![data-reach output format](https://wttr.in/files/example-wttr-v2.png)\n\n(The mode is experimental, and it has several limitations currently:\n\n* It works only in terminal;\n* Only English is supported).\n\nCurrently, you need some tweaks for some terminals, to get the best possible visualization.\n\n### URXVT\n\nDepending on your configuration you might be taking all steps, or only a few. URXVT currently doesn't support emoji related fonts, but we can get almost the same effect using *Font-Symbola*. So add to your `.Xresources` file the following line:\n```\n    xft:symbola:size=10:minspace=False\n```\nYou can add it _after_ your preferred font and it will only show up when required.\nThen, if you see or feel like you're having spacing issues, add this: `URxvt.letterSpace: 0`\nFor some reason URXVT sometimes stops deciding right the word spacing and we need to force it this way.\n\nThe result, should look like:\n\n![URXVT Emoji line](https://user-images.githubusercontent.com/24360204/63842949-1d36d480-c975-11e9-81dd-998d1329bd8a.png)\n\n## Map view (v3)\n\nIn the experimental map view, that is available under the view code `v3`,\nweather information about a geographical region is available:\n\n```\n    $ curl v3.wttr.in/Bayern.sxl\n```\n\n![v3.wttr.in/Bayern](https://v3.wttr.in/Bayern.png)\n\nor directly in browser:\n\n*   https://v3.wttr.in/Bayern\n\nThe map view currently supports three formats:\n\n* PNG (for browser and messengers);\n* Sixel (terminal inline images support);\n* IIP (terminal with iterm2 inline images protocol support).\n\nTerminal with inline images protocols support:\n\n⟶ *Detailed article: [Images in terminal](doc/terminal-images.md)*\n\n| Terminal              | Environment    | Images support | Protocol |\n| --------------------- | --------- | ------------- | --------- |\n| uxterm                |   X11     |   yes         |   Sixel   |\n| mlterm                |   X11     |   yes         |   Sixel   |\n| kitty                 |   X11     |   yes         |   Kitty   |\n| wezterm               |   X11     |   yes         |   IIP     |\n| Darktile              |   X11     |   yes         |   Sixel   |\n| Jexer                 |   X11     |   yes         |   Sixel   |\n| GNOME Terminal        |   X11     |   [in-progress](https://gitlab.gnome.org/GNOME/vte/-/issues/253) |   Sixel   |\n| alacritty             |   X11     |   [in-progress](https://github.com/alacritty/alacritty/issues/910) |  Sixel   |\n| foot                  |  Wayland  |   yes         |   Sixel   |\n| DomTerm               |   Web     |   yes         |   Sixel   |\n| Yaft                  |   FB      |   yes         |   Sixel   |\n| iTerm2                |   Mac OS X|   yes         |   IIP     |\n| mintty                | Windows   |   yes         |   Sixel   |\n| Windows Terminal  |   Windows     |   [in-progress](https://github.com/microsoft/terminal/issues/448) |   Sixel   |\n| [RLogin](http://nanno.dip.jp/softlib/man/rlogin/) | Windows | yes         |   Sixel   |   |\n\n\n## Different output formats\n\n### JSON output\n\nThe JSON format is a feature providing access to *wttr.in* data through an easy-to-parse format, without requiring the user to create a complex script to reinterpret wttr.in's graphical output.\n\nTo fetch information in JSON format, use the following syntax:\n\n    $ curl wttr.in/Detroit?format=j1\n\nThis will fetch information on the Detroit region in JSON format. The j1 format code is used to allow for the use of other layouts for the JSON output.\n\nThe result will look something like the following:\n```json\n{\n\t\"current_condition\": [\n\t\t{\n\t\t    \"FeelsLikeC\": \"25\",\n\t\t    \"FeelsLikeF\": \"76\",\n\t\t    \"cloudcover\": \"100\",\n\t\t    \"humidity\": \"76\",\n\t\t    \"observation_time\": \"04:08 PM\",\n\t\t    \"precipMM\": \"0.2\",\n\t\t    \"pressure\": \"1019\",\n\t\t    \"temp_C\": \"22\",\n\t\t    \"temp_F\": \"72\",\n\t\t    \"uvIndex\": 5,\n\t\t    \"visibility\": \"16\",\n\t\t    \"weatherCode\": \"122\",\n\t\t    \"weatherDesc\": [\n\t\t\t{\n\t\t\t    \"value\": \"Overcast\"\n\t\t\t}\n\t\t    ],\n\t\t    \"weatherIconUrl\": [\n\t\t\t{\n\t\t\t    \"value\": \"\"\n\t\t\t}\n\t\t    ],\n\t\t    \"winddir16Point\": \"NNE\",\n\t\t    \"winddirDegree\": \"20\",\n\t\t    \"windspeedKmph\": \"7\",\n\t\t    \"windspeedMiles\": \"4\"\n\t\t}\n\t],\n...\n```\n\nMost of these values are self-explanatory, aside from `weatherCode`. The `weatherCode` is an enumeration which you can find at either [the WorldWeatherOnline website](https://www.worldweatheronline.com/developer/api/docs/weather-icons.aspx) or [in the wttr.in source code](https://github.com/chubin/wttr.in/blob/master/lib/constants.py).\n\n### Prometheus Metrics Output\n\nThe [Prometheus](https://github.com/prometheus/prometheus) Metrics format is a feature providing access to *wttr.in* data through an easy-to-parse format for monitoring systems, without requiring the user to create a complex script to reinterpret wttr.in's graphical output.\n\nTo fetch information in Prometheus format, use the following syntax:\n\n    $ curl wttr.in/Detroit?format=p1\n\nThis will fetch information on the Detroit region in Prometheus Metrics format. The `p1` format code is used to allow for the use of other layouts for the Prometheus Metrics output.\n\nA possible configuration for Prometheus could look like this:\n\n```yaml\n    - job_name: 'wttr_in_detroit'\n        static_configs:\n            - targets: ['wttr.in']\n        metrics_path: '/Detroit'\n        params:\n            format: ['p1']\n```\n\nThe result will look something like the following:\n\n\n    # HELP temperature_feels_like_celsius Feels Like Temperature in Celsius\n    temperature_feels_like_celsius{forecast=\"current\"} 7\n    # HELP temperature_feels_like_fahrenheit Feels Like Temperature in Fahrenheit\n    temperature_feels_like_fahrenheit{forecast=\"current\"} 45\n    [truncated]\n...\n\n\n## Moon phases\n\nwttr.in can also be used to check the phase of the Moon. This example shows how to see the current Moon phase\nin the full-output mode:\n\n    $ curl wttr.in/Moon\n\nGet the moon phase for a particular date by adding `@YYYY-MM-DD`:\n\n    $ curl wttr.in/Moon@2016-12-25\n\nThe moon phase information uses [pyphoon](https://github.com/chubin/pyphoon) as its backend.\n\nTo get the moon phase information in the online mode, use `%m`:\n\n    $ curl wttr.in/London?format=%m\n    🌖\n\nKeep in mind that the Unicode representation of moon phases suffers 2 caveats:\n\n- With some fonts, the representation `🌘` is ambiguous, for it either seem\n  almost-shadowed or almost-lit, depending on whether your terminal is in\n  light mode or dark mode. Relying on colored fonts like `noto-fonts` works\n  around this problem.\n\n- The representation `🌘` is also ambiguous, for it means \"last quarter\" in\n  northern hemisphere, but \"first quarter\" in souther hemisphere. It also means\n  nothing in tropical zones. This is a limitation that\n  [Unicode](https://www.unicode.org/L2/L2017/17304-moon-var.pdf) is aware about.\n  But it has not been worked around at `wttr.in` yet.\n\nSee #247, #364 for the corresponding tracking issues,\nand [pyphoon#1](https://github.com/chubin/pyphoon/issues/1) for pyphoon. Any help is welcome.\n\n## Internationalization and localization\n\nwttr.in supports multilingual locations names that can be specified in any language in the world\n(it may be surprising, but many locations in the world don't have an English name).\n\nThe query string should be specified in Unicode (hex-encoded or not). Spaces in the query string\nmust be replaced with `+`:\n\n    $ curl wttr.in/станция+Восток\n    Weather report: станция Восток\n\n                   Overcast\n          .--.     -65 – -47 °C\n       .-(    ).   ↑ 23 km/h\n      (___.__)__)  15 km\n                   0.0 mm\n\nThe language used for the output (except the location name) does not depend on the input language\nand it is either English (by default) or the preferred language of the browser (if the query\nwas issued from a browser) that is specified in the query headers (`Accept-Language`).\n\nThe language can be set explicitly when using console clients by using command-line options like this:\n\n    curl -H \"Accept-Language: fr\" wttr.in\n    http GET wttr.in Accept-Language:ru\n\nThe preferred language can be forced using the `lang` option:\n\n    $ curl wttr.in/Berlin?lang=de\n\nThe third option is to choose the language using the DNS name used in the query:\n\n    $ curl de.wttr.in/Berlin\n\nwttr.in is currently translated into 54 languages, and the number of supported languages is constantly growing.\n\nSee [/:translation](https://wttr.in/:translation) to learn more about the translation process,\nto see the list of supported languages and contributors, or to know how you can help to translate wttr.in\nin your language.\n\n![Queries to wttr.in in various languages](https://pbs.twimg.com/media/C7hShiDXQAES6z1.jpg)\n\n## Installation\n\nTo install the application:\n\n1. Install external dependencies\n2. Install Python dependencies used by the service\n3. Configure IP2Location (optional)\n4. Get a WorldWeatherOnline API and configure wego\n5. Configure wttr.in\n6. Configure the HTTP-frontend service\n\n### Install external dependencies\n\nwttr.in has the following external dependencies:\n\n* [golang](https://golang.org/doc/install), wego dependency\n* [wego](https://github.com/schachmat/wego), weather client for terminal\n\nAfter you install [golang](https://golang.org/doc/install), install `wego`:\n```bash\ngo install github.com/schachmat/wego@latest\n```\n\n### Install Python dependencies\n\nPython requirements:\n\n* Flask\n* geoip2\n* geopy\n* requests\n* gevent\n\nIf you want to get weather reports as PNG files, you'll also need to install:\n\n* PIL\n* pyte (>=0.6)\n* necessary fonts\n\nYou can install most of them using `pip`.\n\nSome python package use LLVM, so install it first:\n\n```bash\napt-get install llvm-7 llvm-7-dev\n```\nIf `virtualenv` is used:\n```bash\nvirtualenv -p python3 ve\nve/bin/pip3 install -r requirements.txt\nve/bin/python3 bin/srv.py\n```\n\nAlso, you need to install the geoip2 database.\nYou can use a free database GeoLite2 that can be downloaded from (http://dev.maxmind.com/geoip/geoip2/geolite2/).\n\n### Configure IP2Location (optional)\n\nIf you want to use the IP2location service for IP-addresses that are not covered by GeoLite2,\nyou have to obtain a API key of that service, and after that save into the `~/.ip2location.key` file:\n\n```\n$ echo 'YOUR_IP2LOCATION_KEY' > ~/.ip2location.key\n```\n\nIf you don't have this file, the service will be silently skipped (it is not a big problem,\nbecause the MaxMind database is pretty good).\n\n### Installation with Docker\n\n* Install Docker\n* Build Docker Image\n* These files should be mounted by the user at runtime:\n\n```\n/root/.wegorc\n/root/.ip2location.key (optional)\n/app/airports.dat\n/app/GeoLite2-City.mmdb\n```\n\n### Get a WorldWeatherOnline key and configure wego\n\nTo get a WorldWeatherOnline API key, you must register here:\n\n    https://developer.worldweatheronline.com/auth/register\n\nAfter you have a WorldWeatherOnline key, you can save it into the\nWWO key file: `~/.wwo.key`\n\nAlso, you have to specify the key in the `wego` configuration:\n\n```json\n$ cat ~/.wegorc\n{\n\t\"APIKey\": \"00XXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n\t\"City\": \"London\",\n\t\"Numdays\": 3,\n\t\"Imperial\": false,\n\t\"Lang\": \"en\"\n}\n```\n\nThe `City` parameter in `~/.wegorc` is ignored.\n\n### Configure wttr.in\n\nConfigure the following environment variables that define the path to the local `wttr.in`\ninstallation, to the GeoLite database, and to the `wego` installation. For example:\n\n```bash\nexport WTTR_MYDIR=\"/home/igor/wttr.in\"\nexport WTTR_GEOLITE=\"/home/igor/wttr.in/GeoLite2-City.mmdb\"\nexport WTTR_WEGO=\"/home/igor/go/bin/wego\"\nexport WTTR_LISTEN_HOST=\"0.0.0.0\"\nexport WTTR_LISTEN_PORT=\"8002\"\n```\n\n\n### Configure the HTTP-frontend service\n\nIt's recommended that you also configure the web server that will be used to access the service:\n\n```nginx\nserver {\n\tlisten [::]:80;\n\tserver_name  wttr.in *.wttr.in;\n\taccess_log  /var/log/nginx/wttr.in-access.log  main;\n\terror_log  /var/log/nginx/wttr.in-error.log;\n\n\tlocation / {\n\t    proxy_pass         http://127.0.0.1:8002;\n\n\t    proxy_set_header   Host             $host;\n\t    proxy_set_header   X-Real-IP        $remote_addr;\n\t    proxy_set_header   X-Forwarded-For  $remote_addr;\n\n\t    client_max_body_size       10m;\n\t    client_body_buffer_size    128k;\n\n\t    proxy_connect_timeout      90;\n\t    proxy_send_timeout         90;\n\t    proxy_read_timeout         90;\n\n\t    proxy_buffer_size          4k;\n\t    proxy_buffers              4 32k;\n\t    proxy_busy_buffers_size    64k;\n\t    proxy_temp_file_write_size 64k;\n\n\t    expires                    off;\n\t}\n}\n```\n"
        },
        {
          "name": "San_Francisco.png",
          "type": "blob",
          "size": 63.4140625,
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.052734375,
          "content": "module github.com/chubin/wttr.in\n\ngo 1.16\n\nrequire (\n\tgithub.com/alecthomas/kong v0.7.1 // indirect\n\tgithub.com/denisenkom/go-mssqldb v0.0.0-20200910202707-1e08a3fab204 // indirect\n\tgithub.com/go-sql-driver/mysql v1.5.0 // indirect\n\tgithub.com/gopherjs/gopherjs v0.0.0-20200217142428-fce0ec30dd00 // indirect\n\tgithub.com/hashicorp/golang-lru v0.6.0\n\tgithub.com/itchyny/gojq v0.12.11 // indirect\n\tgithub.com/klauspost/lctime v0.1.0 // indirect\n\tgithub.com/lib/pq v1.8.0 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.14 // indirect\n\tgithub.com/mattn/go-sqlite3 v1.14.16 // indirect\n\tgithub.com/robfig/cron v1.2.0\n\tgithub.com/samonzeweb/godb v1.0.8 // indirect\n\tgithub.com/sirupsen/logrus v1.9.0 // indirect\n\tgithub.com/smartystreets/assertions v1.2.0 // indirect\n\tgithub.com/smartystreets/goconvey v1.6.4 // indirect\n\tgithub.com/stretchr/testify v1.8.1 // indirect\n\tgithub.com/zsefvlol/timezonemapper v1.0.0 // indirect\n\tgolang.org/x/crypto v0.0.0-20201002170205-7f63de1d35b0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 7.2724609375,
          "content": "github.com/alecthomas/assert/v2 v2.1.0/go.mod h1:b/+1DI2Q6NckYi+3mXyH3wFb8qG37K/DuK80n7WefXA=\ngithub.com/alecthomas/kong v0.7.1 h1:azoTh0IOfwlAX3qN9sHWTxACE2oV8Bg2gAwBsMwDQY4=\ngithub.com/alecthomas/kong v0.7.1/go.mod h1:n1iCIO2xS46oE8ZfYCNDqdR0b0wZNrXAIAqro/2132U=\ngithub.com/alecthomas/repr v0.1.0/go.mod h1:2kn6fqh/zIyPLmm3ugklbEi5hg5wS435eygvNfaDQL8=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/denisenkom/go-mssqldb v0.0.0-20200910202707-1e08a3fab204/go.mod h1:xbL0rPBG9cCiLr28tMa8zpbdarY27NDyej4t/EjAShU=\ngithub.com/go-sql-driver/mysql v1.5.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\ngithub.com/golang-sql/civil v0.0.0-20190719163853-cb61b32ac6fe/go.mod h1:8vg3r2VgvsThLBIFL93Qb5yWzgyZWhEmBwUJWevAkK0=\ngithub.com/google/go-cmp v0.5.4/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/gopherjs/gopherjs v0.0.0-20200217142428-fce0ec30dd00/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/hashicorp/golang-lru v0.6.0 h1:uL2shRDx7RTrOrTCUZEGP/wJUFiUI8QT6E7z5o8jga4=\ngithub.com/hashicorp/golang-lru v0.6.0/go.mod h1:iADmTwqILo4mZ8BN3D2Q6+9jd8WM5uGBxy+E8yxSoD4=\ngithub.com/hexops/gotextdiff v1.0.3/go.mod h1:pSWU5MAI3yDq+fZBTazCSJysOMbxWL1BSow5/V2vxeg=\ngithub.com/itchyny/gojq v0.12.11 h1:YhLueoHhHiN4mkfM+3AyJV6EPcCxKZsOnYf+aVSwaQw=\ngithub.com/itchyny/gojq v0.12.11/go.mod h1:o3FT8Gkbg/geT4pLI0tF3hvip5F3Y/uskjRz9OYa38g=\ngithub.com/itchyny/timefmt-go v0.1.5 h1:G0INE2la8S6ru/ZI5JecgyzbbJNs5lG1RcBqa7Jm6GE=\ngithub.com/itchyny/timefmt-go v0.1.5/go.mod h1:nEP7L+2YmAbT2kZ2HfSs1d8Xtw9LY8D2stDBckWakZ8=\ngithub.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\ngithub.com/klauspost/lctime v0.1.0 h1:nINsuFc860M9cyYhT6vfg6U1USh7kiVBj/s/2b04U70=\ngithub.com/klauspost/lctime v0.1.0/go.mod h1:OwdMhr8tbQvusAsnilqkkgDQqivWlqyg0w5cfXkLiDk=\ngithub.com/lib/pq v1.8.0/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16 h1:bq3VjFmv/sOjHtdEhmkEV4x1AJtvUvOJ2PFAZ5+peKQ=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-runewidth v0.0.14 h1:+xnbZSEeDbOIg5/mE6JF0w6n9duR1l3/WmbinWVwUuU=\ngithub.com/mattn/go-runewidth v0.0.14/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/mattn/go-sqlite3 v1.14.16 h1:yOQRA0RpS5PFz/oikGwBEqvAWhWg5ufRz4ETLjwpU1Y=\ngithub.com/mattn/go-sqlite3 v1.14.16/go.mod h1:2eHXhiwb8IkHr+BDWZGa96P6+rkvnG63S2DGjv9HUNg=\ngithub.com/mattn/go-sqlite3 v2.0.3+incompatible h1:gXHsfypPkaMZrKbD5209QV9jbUTJKjyR5WD3HYQSd+U=\ngithub.com/mattn/go-sqlite3 v2.0.3+incompatible/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rivo/uniseg v0.2.0 h1:S1pD9weZBuJdFmowNwbpi7BJ8TNftyUImj/0WQi72jY=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/robfig/cron v1.2.0 h1:ZjScXvvxeQ63Dbyxy76Fj3AT3Ut0aKsyd2/tl3DTMuQ=\ngithub.com/robfig/cron v1.2.0/go.mod h1:JGuDeoQd7Z6yL4zQhZ3OPEVHB7fL6Ka6skscFHfmt2k=\ngithub.com/samonzeweb/godb v1.0.8 h1:WRn6nq0FChYOzh+w8SgpXHUkEhL7W6ZqkCf5Ninx7Uc=\ngithub.com/samonzeweb/godb v1.0.8/go.mod h1:LNDt3CakfBwpRY4AD0y/QPTbj+jB6O17tSxQES0p47o=\ngithub.com/samonzeweb/godb v1.0.15 h1:HyNb8o1w109as9KWE8ih1YIBe8jC4luJ22f1XNacW38=\ngithub.com/samonzeweb/godb v1.0.15/go.mod h1:SxCHqyireDXNrZApknS9lGUEutA43x9eJF632ecbK5Q=\ngithub.com/sirupsen/logrus v1.9.0 h1:trlNQbNUG3OdDrDil03MCb1H2o9nJ1x4/5LYw7byDE0=\ngithub.com/sirupsen/logrus v1.9.0/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=\ngithub.com/smartystreets/assertions v1.2.0/go.mod h1:tcbTF8ujkAEcZ8TElKY+i30BzYlVhC/LOxJk7iOWnoo=\ngithub.com/smartystreets/goconvey v1.6.4/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0 h1:1zr/of2m5FGMsad5YfcqgdqdWrIhu+EBEJRhR1U7z/c=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1 h1:w7B6lhMri9wdJUVmEZPGGhZzrYTPvgJArz7wNPgYKsk=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/zsefvlol/timezonemapper v1.0.0 h1:HXqkOzf01gXYh2nDQcDSROikFgMaximnhE8BY9SyF6E=\ngithub.com/zsefvlol/timezonemapper v1.0.0/go.mod h1:cVUCOLEmc/VvOMusEhpd2G/UBtadL26ZVz2syODXDoQ=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190325154230-a5d413f7728c/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20201002170205-7f63de1d35b0/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8 h1:0A+M6Uqn+Eje4kHMK80dtF3JCXC4ykBgQG4Fe06QRhQ=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab h1:2QkjZIsXupsJbJIdSjjUOgWK3aEtzyuh2mPt3l/CkeU=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.2.0 h1:ljd4t30dBnAvMZaQCevtY0xLLD0A+bRZXbgLMLU1F/A=\ngolang.org/x/sys v0.2.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.2626953125,
          "content": "flask\ngeoip2\ngeopy\nrequests\ngevent\ndnspython\npylint\ncyrtranslit\nastral>=2.0,<=2.2\ntimezonefinder==2.1.2\npytz\npyte\npython-dateutil>=2.5.0,<=2.8.1\ndiagram\npyjq\nscipy\nnumpy\npillow\nbabel\npylru>=1.0.7,<=1.2.1\npysocks\nsupervisor\nnumba\nemoji>=1.6.0,<=1.7.0\ngrapheme\npycountry\n"
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "srv.go",
          "type": "blob",
          "size": 6.078125,
          "content": "package main\n\nimport (\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"io\"\n\tstdlog \"log\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/alecthomas/kong\"\n\tlog \"github.com/sirupsen/logrus\"\n\n\t\"github.com/chubin/wttr.in/internal/config\"\n\tgeoip \"github.com/chubin/wttr.in/internal/geo/ip\"\n\tgeoloc \"github.com/chubin/wttr.in/internal/geo/location\"\n\t\"github.com/chubin/wttr.in/internal/logging\"\n\t\"github.com/chubin/wttr.in/internal/processor\"\n\t\"github.com/chubin/wttr.in/internal/types\"\n\t// v1 \"github.com/chubin/wttr.in/internal/view/v1\"\n)\n\n//nolint:gochecknoglobals\nvar cli struct {\n\tConfigFile string `name:\"config-file\" arg:\"\" optional:\"\" help:\"Name of configuration file\"`\n\n\tConfigCheck             bool   `name:\"config-check\" help:\"Check configuration\"`\n\tConfigDump              bool   `name:\"config-dump\" help:\"Dump configuration\"`\n\tConvertGeoIPCache       bool   `name:\"convert-geo-ip-cache\" help:\"Convert Geo IP data cache to SQlite\"`\n\tConvertGeoLocationCache bool   `name:\"convert-geo-location-cache\" help:\"Convert Geo Location data cache to SQlite\"`\n\tGeoResolve              string `name:\"geo-resolve\" help:\"Resolve location\"`\n\tLogLevel                string `name:\"log-level\" short:\"l\" help:\"Show log messages with level\" default:\"info\"`\n\n\t// V1 v1.Configuration\n}\n\nconst logLineStart = \"LOG_LINE_START \"\n\nfunc suppressMessages() []string {\n\treturn []string{\n\t\t\"error reading preface from client\",\n\t\t\"TLS handshake error from\",\n\t\t\"URL query contains semicolon, which is no longer a supported separator\",\n\t\t\"connection error: PROTOCOL_ERROR\",\n\t}\n}\n\nfunc copyHeader(dst, src http.Header) {\n\tfor k, vv := range src {\n\t\tfor _, v := range vv {\n\t\t\tdst.Add(k, v)\n\t\t}\n\t}\n}\n\nfunc serveHTTP(mux *http.ServeMux, port int, logFile io.Writer, errs chan<- error) {\n\tsrv := &http.Server{\n\t\tAddr:         fmt.Sprintf(\":%d\", port),\n\t\tErrorLog:     stdlog.New(logFile, logLineStart, stdlog.LstdFlags),\n\t\tReadTimeout:  5 * time.Second,\n\t\tWriteTimeout: 10 * time.Second,\n\t\tIdleTimeout:  1 * time.Second,\n\t\tHandler:      mux,\n\t}\n\terrs <- srv.ListenAndServe()\n}\n\nfunc serveHTTPS(mux *http.ServeMux, port int, certFile, keyFile string, logFile io.Writer, errs chan<- error) {\n\ttlsConfig := &tls.Config{\n\n\t\t// CipherSuites: []uint16{\n\t\t// \ttls.TLS_CHACHA20_POLY1305_SHA256,\n\t\t// \ttls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,\n\t\t// \ttls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,\n\t\t// },\n\t\t// MinVersion: tls.VersionTLS13,\n\t}\n\tsrv := &http.Server{\n\t\tAddr:         fmt.Sprintf(\":%d\", port),\n\t\tErrorLog:     stdlog.New(logFile, logLineStart, stdlog.LstdFlags),\n\t\tReadTimeout:  5 * time.Second,\n\t\tWriteTimeout: 20 * time.Second,\n\t\tIdleTimeout:  1 * time.Second,\n\t\tTLSConfig:    tlsConfig,\n\t\tHandler:      mux,\n\t}\n\terrs <- srv.ListenAndServeTLS(certFile, keyFile)\n}\n\nfunc serve(conf *config.Config) error {\n\tvar (\n\t\t// mux is main HTTP/HTTP requests multiplexer.\n\t\tmux = http.NewServeMux()\n\n\t\t// logger is optimized requests logger.\n\t\tlogger = logging.NewRequestLogger(\n\t\t\tconf.Logging.AccessLog,\n\t\t\ttime.Duration(conf.Logging.Interval)*time.Second)\n\n\t\trp *processor.RequestProcessor\n\n\t\t// errs is the servers errors channel.\n\t\terrs = make(chan error, 1)\n\n\t\t// numberOfServers started. If 0, exit.\n\t\tnumberOfServers int\n\n\t\terrorsLog = logging.NewLogSuppressor(\n\t\t\tconf.Logging.ErrorsLog,\n\t\t\tsuppressMessages(),\n\t\t\tlogLineStart,\n\t\t)\n\n\t\terr error\n\t)\n\n\trp, err = processor.NewRequestProcessor(conf)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"log processor initialization: %w\", err)\n\t}\n\n\terr = errorsLog.Open()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = rp.Start()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tmux.HandleFunc(\"/\", mainHandler(rp, logger))\n\n\tif conf.Server.PortHTTP != 0 {\n\t\tgo serveHTTP(mux, conf.Server.PortHTTP, errorsLog, errs)\n\t\tnumberOfServers++\n\t}\n\tif conf.Server.PortHTTPS != 0 {\n\t\tgo serveHTTPS(mux, conf.Server.PortHTTPS, conf.Server.TLSCertFile, conf.Server.TLSKeyFile, errorsLog, errs)\n\t\tnumberOfServers++\n\t}\n\tif numberOfServers == 0 {\n\t\treturn types.ErrNoServersConfigured\n\t}\n\n\treturn <-errs // block until one of the servers writes an error\n}\n\nfunc mainHandler(\n\trp *processor.RequestProcessor,\n\tlogger *logging.RequestLogger,\n) func(http.ResponseWriter, *http.Request) {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tif err := logger.Log(r); err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\n\t\tif checkURLForPNG(r) {\n\t\t\tw.Write([]byte(\"PNG support temporary disabled\"))\n\n\t\t\treturn\n\t\t}\n\n\t\tresponse, err := rp.ProcessRequest(r)\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\n\t\t\treturn\n\t\t}\n\t\tif response.StatusCode == 0 {\n\t\t\tlog.Println(\"status code 0\", response)\n\n\t\t\treturn\n\t\t}\n\n\t\tcopyHeader(w.Header(), response.Header)\n\t\tw.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\t\tw.WriteHeader(response.StatusCode)\n\t\t_, err = w.Write(response.Body)\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t}\n}\n\nfunc main() {\n\tvar (\n\t\tconf *config.Config\n\t\terr  error\n\t)\n\n\tctx := kong.Parse(&cli)\n\tctx.FatalIfErrorf(setLogLevel(cli.LogLevel))\n\n\tif cli.ConfigFile != \"\" {\n\t\tconf, err = config.Load(cli.ConfigFile)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"reading config from %s: %s\\n\", cli.ConfigFile, err)\n\t\t}\n\t} else {\n\t\tconf = config.Default()\n\t}\n\n\tif cli.ConfigDump {\n\t\t//nolint:forbidigo\n\t\tfmt.Print(string(conf.Dump()))\n\n\t\treturn\n\t}\n\n\tif cli.ConfigCheck {\n\t\treturn\n\t}\n\n\tswitch {\n\tcase cli.ConvertGeoIPCache:\n\t\tctx.FatalIfErrorf(convertGeoIPCache(conf))\n\tcase cli.ConvertGeoLocationCache:\n\t\tctx.FatalIfErrorf(convertGeoLocationCache(conf))\n\tcase cli.GeoResolve != \"\":\n\t\tsr := geoloc.NewSearcher(conf)\n\t\tloc, err := sr.Search(cli.GeoResolve)\n\t\tctx.FatalIfErrorf(err)\n\t\tif loc != nil {\n\t\t\t//nolint:forbidigo\n\t\t\tfmt.Println(*loc)\n\t\t}\n\tdefault:\n\t\terr = serve(conf)\n\t\tctx.FatalIfErrorf(err)\n\t}\n}\n\nfunc convertGeoIPCache(conf *config.Config) error {\n\tgeoIPCache, err := geoip.NewCache(conf)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn geoIPCache.ConvertCache()\n}\n\nfunc convertGeoLocationCache(conf *config.Config) error {\n\tgeoLocCache, err := geoloc.NewCache(conf)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn geoLocCache.ConvertCache(false)\n}\n\nfunc setLogLevel(logLevel string) error {\n\tparsedLevel, err := log.ParseLevel(logLevel)\n\tif err != nil {\n\t\treturn err\n\t}\n\tlog.SetLevel(parsedLevel)\n\n\treturn nil\n}\n\nfunc checkURLForPNG(r *http.Request) bool {\n\turl := r.URL.String()\n\treturn strings.Contains(url, \".png\")\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}